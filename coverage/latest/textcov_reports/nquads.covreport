rust_fuzzer_test_input:
  209|  3.47k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  3.47k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  3.47k|                }
  223|  3.47k|
  224|  3.47k|                __libfuzzer_sys_run(bytes);
  225|  3.47k|                0
  226|       |            }
_RNvNvCslVPiWcgWUHs_6nquads1__19___libfuzzer_sys_run:
  241|  3.47k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|       |            }
LLVMFuzzerTestOneInput:
   58|  3.47k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  3.47k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  3.47k|    });
   63|  3.47k|
   64|  3.47k|    match test_input {
   65|  3.47k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  3.47k|}
_RNCNvCsf8H0iyfdRmj_13libfuzzer_sys15test_input_wrap0B3_:
   59|  3.47k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  3.47k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  3.47k|        rust_fuzzer_test_input(data_slice)
   62|  3.47k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvMs3_NtNtNtCsceChmz4NNcl_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0ECsKJkp6CE2YE_5oxttl:
 1044|   959k|    pub(crate) unsafe fn next(
 1045|   959k|        &mut self,
 1046|   959k|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|   959k|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|   959k|        let found = find_raw(self.start, self.end)?;
 1057|  9.45k|        let result = found.distance(self.original_start);
 1058|  9.45k|        self.start = found.add(1);
 1059|  9.45k|        Some(result)
 1060|   959k|    }
_RINvNtNtNtCsceChmz4NNcl_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECsKJkp6CE2YE_5oxttl:
 1125|  7.95k|pub(crate) unsafe fn search_slice_with_raw(
 1126|  7.95k|    haystack: &[u8],
 1127|  7.95k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  7.95k|) -> Option<usize> {
 1129|  7.95k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  7.95k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  7.95k|    // a &[u8].
 1132|  7.95k|    let start = haystack.as_ptr();
 1133|  7.95k|    let end = start.add(haystack.len());
 1134|  7.95k|    let found = find_raw(start, end)?;
 1135|  1.28k|    Some(found.distance(start))
 1136|  7.95k|}
_RINvNtNtNtCsceChmz4NNcl_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr7memchr20ECsKJkp6CE2YE_5oxttl:
 1125|   326k|pub(crate) unsafe fn search_slice_with_raw(
 1126|   326k|    haystack: &[u8],
 1127|   326k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|   326k|) -> Option<usize> {
 1129|   326k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|   326k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|   326k|    // a &[u8].
 1132|   326k|    let start = haystack.as_ptr();
 1133|   326k|    let end = start.add(haystack.len());
 1134|   326k|    let found = find_raw(start, end)?;
 1135|   159k|    Some(found.distance(start))
 1136|   326k|}
_RNvMs3_NtNtNtCsceChmz4NNcl_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|   949k|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|   949k|        Iter {
 1029|   949k|            original_start: haystack.as_ptr(),
 1030|   949k|            start: haystack.as_ptr(),
 1031|   949k|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|   949k|            haystack: core::marker::PhantomData,
 1033|   949k|        }
 1034|   949k|    }
_RNvMNtNtNtCsceChmz4NNcl_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle1B8_:
  117|  13.3k|    pub(crate) fn needle1(&self) -> u8 {
  118|  13.3k|        self.s1
  119|  13.3k|    }
_RNvMNtNtNtCsceChmz4NNcl_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE3newB8_:
  111|  7.95k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  7.95k|        One { s1: needle, v1: V::splat(needle) }
  113|  7.95k|    }
_RNvMNtNtNtCsceChmz4NNcl_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE3newB8_:
  111|  7.95k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  7.95k|        One { s1: needle, v1: V::splat(needle) }
  113|  7.95k|    }
_RNvMNtNtNtCsceChmz4NNcl_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  1.52k|    pub(crate) unsafe fn find_raw(
  144|  1.52k|        &self,
  145|  1.52k|        start: *const u8,
  146|  1.52k|        end: *const u8,
  147|  1.52k|    ) -> Option<*const u8> {
  148|  1.52k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  1.52k|        // need to move up to using a u64 for the masks used below. Currently
  150|  1.52k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  1.52k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  1.52k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  1.52k|        let topos = V::Mask::first_offset;
  155|  1.52k|        let len = end.distance(start);
  156|  1.52k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  1.52k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|    150|            return Some(cur);
  167|  1.37k|        }
  168|  1.37k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  1.37k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  1.37k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  1.37k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  1.37k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  2.09k|        while cur <= end.sub(V::BYTES) {
  213|    788|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|    788|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|     67|                return Some(cur);
  216|    721|            }
  217|    721|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  1.30k|        if cur < end {
  224|  1.07k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  1.07k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  1.07k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  1.07k|            return self.search_chunk(cur, topos);
  228|    230|        }
  229|    230|        None
  230|  1.52k|    }
_RNvMNtNtNtCsceChmz4NNcl_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  3.07k|    pub(crate) unsafe fn find_raw(
  144|  3.07k|        &self,
  145|  3.07k|        start: *const u8,
  146|  3.07k|        end: *const u8,
  147|  3.07k|    ) -> Option<*const u8> {
  148|  3.07k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  3.07k|        // need to move up to using a u64 for the masks used below. Currently
  150|  3.07k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  3.07k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  3.07k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  3.07k|        let topos = V::Mask::first_offset;
  155|  3.07k|        let len = end.distance(start);
  156|  3.07k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  3.07k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|    549|            return Some(cur);
  167|  2.52k|        }
  168|  2.52k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  2.52k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  2.52k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  2.52k|        if len >= Self::LOOP_SIZE {
  172|  1.23k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|    549|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|    549|                let a = V::load_aligned(cur);
  176|    549|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|    549|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|    549|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|    549|                let eqa = self.v1.cmpeq(a);
  180|    549|                let eqb = self.v1.cmpeq(b);
  181|    549|                let eqc = self.v1.cmpeq(c);
  182|    549|                let eqd = self.v1.cmpeq(d);
  183|    549|                let or1 = eqa.or(eqb);
  184|    549|                let or2 = eqc.or(eqd);
  185|    549|                let or3 = or1.or(or2);
  186|    549|                if or3.movemask_will_have_non_zero() {
  187|    170|                    let mask = eqa.movemask();
  188|    170|                    if mask.has_non_zero() {
  189|     56|                        return Some(cur.add(topos(mask)));
  190|    114|                    }
  191|    114|
  192|    114|                    let mask = eqb.movemask();
  193|    114|                    if mask.has_non_zero() {
  194|     50|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|     64|                    }
  196|     64|
  197|     64|                    let mask = eqc.movemask();
  198|     64|                    if mask.has_non_zero() {
  199|     28|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|     36|                    }
  201|     36|
  202|     36|                    let mask = eqd.movemask();
  203|     36|                    debug_assert!(mask.has_non_zero());
  204|     36|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|    379|                }
  206|    379|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  1.67k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  6.13k|        while cur <= end.sub(V::BYTES) {
  213|  3.84k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  3.84k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|     64|                return Some(cur);
  216|  3.78k|            }
  217|  3.78k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  2.29k|        if cur < end {
  224|  2.07k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  2.07k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  2.07k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  2.07k|            return self.search_chunk(cur, topos);
  228|    220|        }
  229|    220|        None
  230|  3.07k|    }
_RINvMNtNtNtCsceChmz4NNcl_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  3.38k|    unsafe fn search_chunk(
  417|  3.38k|        &self,
  418|  3.38k|        cur: *const u8,
  419|  3.38k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  3.38k|    ) -> Option<*const u8> {
  421|  3.38k|        let chunk = V::load_unaligned(cur);
  422|  3.38k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  3.38k|        if mask.has_non_zero() {
  424|    230|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  3.15k|            None
  427|       |        }
  428|  3.38k|    }
_RINvMNtNtNtCsceChmz4NNcl_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  8.99k|    unsafe fn search_chunk(
  417|  8.99k|        &self,
  418|  8.99k|        cur: *const u8,
  419|  8.99k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  8.99k|    ) -> Option<*const u8> {
  421|  8.99k|        let chunk = V::load_unaligned(cur);
  422|  8.99k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  8.99k|        if mask.has_non_zero() {
  424|    641|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  8.35k|            None
  427|       |        }
  428|  8.99k|    }
_RNvMs_NtNtNtCsceChmz4NNcl_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE3newBa_:
  450|  1.28M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  1.28M|        Two {
  452|  1.28M|            s1: needle1,
  453|  1.28M|            s2: needle2,
  454|  1.28M|            v1: V::splat(needle1),
  455|  1.28M|            v2: V::splat(needle2),
  456|  1.28M|        }
  457|  1.28M|    }
_RNvMs_NtNtNtCsceChmz4NNcl_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE3newBa_:
  450|  1.28M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  1.28M|        Two {
  452|  1.28M|            s1: needle1,
  453|  1.28M|            s2: needle2,
  454|  1.28M|            v1: V::splat(needle1),
  455|  1.28M|            v2: V::splat(needle2),
  456|  1.28M|        }
  457|  1.28M|    }
_RNvMs_NtNtNtCsceChmz4NNcl_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  2.26M|    pub(crate) fn needle1(&self) -> u8 {
  462|  2.26M|        self.s1
  463|  2.26M|    }
_RNvMs_NtNtNtCsceChmz4NNcl_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  2.23M|    pub(crate) fn needle2(&self) -> u8 {
  468|  2.23M|        self.s2
  469|  2.23M|    }
_RNvMs_NtNtNtCsceChmz4NNcl_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE8find_rawBa_:
  493|  34.7k|    pub(crate) unsafe fn find_raw(
  494|  34.7k|        &self,
  495|  34.7k|        start: *const u8,
  496|  34.7k|        end: *const u8,
  497|  34.7k|    ) -> Option<*const u8> {
  498|  34.7k|        // If we want to support vectors bigger than 256 bits, we probably
  499|  34.7k|        // need to move up to using a u64 for the masks used below. Currently
  500|  34.7k|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|  34.7k|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|  34.7k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  34.7k|        let topos = V::Mask::first_offset;
  505|  34.7k|        let len = end.distance(start);
  506|  34.7k|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  34.7k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  13.9k|            return Some(cur);
  517|  20.7k|        }
  518|  20.7k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  20.7k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|  20.7k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  20.7k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|  20.7k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  26.2k|        while cur <= end.sub(V::BYTES) {
  551|  6.04k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  6.04k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|    531|                return Some(cur);
  554|  5.51k|            }
  555|  5.51k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|  20.2k|        if cur < end {
  562|  18.9k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|  18.9k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|  18.9k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|  18.9k|            return self.search_chunk(cur, topos);
  566|  1.28k|        }
  567|  1.28k|        None
  568|  34.7k|    }
_RNvMs_NtNtNtCsceChmz4NNcl_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE8find_rawBa_:
  493|   124k|    pub(crate) unsafe fn find_raw(
  494|   124k|        &self,
  495|   124k|        start: *const u8,
  496|   124k|        end: *const u8,
  497|   124k|    ) -> Option<*const u8> {
  498|   124k|        // If we want to support vectors bigger than 256 bits, we probably
  499|   124k|        // need to move up to using a u64 for the masks used below. Currently
  500|   124k|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|   124k|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|   124k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   124k|        let topos = V::Mask::first_offset;
  505|   124k|        let len = end.distance(start);
  506|   124k|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   124k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   106k|            return Some(cur);
  517|  17.6k|        }
  518|  17.6k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  17.6k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|  17.6k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  17.6k|        if len >= Self::LOOP_SIZE {
  522|  41.7k|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|  34.1k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|  34.1k|                let a = V::load_aligned(cur);
  526|  34.1k|                let b = V::load_aligned(cur.add(V::BYTES));
  527|  34.1k|                let eqa1 = self.v1.cmpeq(a);
  528|  34.1k|                let eqb1 = self.v1.cmpeq(b);
  529|  34.1k|                let eqa2 = self.v2.cmpeq(a);
  530|  34.1k|                let eqb2 = self.v2.cmpeq(b);
  531|  34.1k|                let or1 = eqa1.or(eqb1);
  532|  34.1k|                let or2 = eqa2.or(eqb2);
  533|  34.1k|                let or3 = or1.or(or2);
  534|  34.1k|                if or3.movemask_will_have_non_zero() {
  535|  2.00k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|  2.00k|                    if mask.has_non_zero() {
  537|  1.13k|                        return Some(cur.add(topos(mask)));
  538|    870|                    }
  539|    870|
  540|    870|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|    870|                    debug_assert!(mask.has_non_zero());
  542|    870|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|  32.1k|                }
  544|  32.1k|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|  8.03k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  21.6k|        while cur <= end.sub(V::BYTES) {
  551|  6.68k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  6.68k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|    640|                return Some(cur);
  554|  6.04k|            }
  555|  6.04k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|  14.9k|        if cur < end {
  562|  14.4k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|  14.4k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|  14.4k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|  14.4k|            return self.search_chunk(cur, topos);
  566|    535|        }
  567|    535|        None
  568|   124k|    }
_RINvMs_NtNtNtCsceChmz4NNcl_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  59.7k|    unsafe fn search_chunk(
  671|  59.7k|        &self,
  672|  59.7k|        cur: *const u8,
  673|  59.7k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  59.7k|    ) -> Option<*const u8> {
  675|  59.7k|        let chunk = V::load_unaligned(cur);
  676|  59.7k|        let eq1 = self.v1.cmpeq(chunk);
  677|  59.7k|        let eq2 = self.v2.cmpeq(chunk);
  678|  59.7k|        let mask = eq1.or(eq2).movemask();
  679|  59.7k|        if mask.has_non_zero() {
  680|  15.5k|            let mask1 = eq1.movemask();
  681|  15.5k|            let mask2 = eq2.movemask();
  682|  15.5k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  44.1k|            None
  685|       |        }
  686|  59.7k|    }
_RINvMs_NtNtNtCsceChmz4NNcl_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|   145k|    unsafe fn search_chunk(
  671|   145k|        &self,
  672|   145k|        cur: *const u8,
  673|   145k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|   145k|    ) -> Option<*const u8> {
  675|   145k|        let chunk = V::load_unaligned(cur);
  676|   145k|        let eq1 = self.v1.cmpeq(chunk);
  677|   145k|        let eq2 = self.v2.cmpeq(chunk);
  678|   145k|        let mask = eq1.or(eq2).movemask();
  679|   145k|        if mask.has_non_zero() {
  680|   108k|            let mask1 = eq1.movemask();
  681|   108k|            let mask2 = eq2.movemask();
  682|   108k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  36.6k|            None
  685|       |        }
  686|   145k|    }
_RINvNtNtNtCsceChmz4NNcl_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  2.80k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  2.80k|    start: *const u8,
 1150|  2.80k|    end: *const u8,
 1151|  2.80k|    confirm: F,
 1152|  2.80k|) -> Option<*const u8> {
 1153|  2.80k|    debug_assert!(start <= end);
 1154|  2.80k|    let mut ptr = start;
 1155|  15.8k|    while ptr < end {
 1156|  13.3k|        if confirm(*ptr) {
 1157|    245|            return Some(ptr);
 1158|  13.0k|        }
 1159|  13.0k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  2.55k|    None
 1162|  2.80k|}
_RINvNtNtNtCsceChmz4NNcl_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|   926k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|   926k|    start: *const u8,
 1150|   926k|    end: *const u8,
 1151|   926k|    confirm: F,
 1152|   926k|) -> Option<*const u8> {
 1153|   926k|    debug_assert!(start <= end);
 1154|   926k|    let mut ptr = start;
 1155|  3.15M|    while ptr < end {
 1156|  2.26M|        if confirm(*ptr) {
 1157|  42.9k|            return Some(ptr);
 1158|  2.22M|        }
 1159|  2.22M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|   884k|    None
 1162|   926k|}

_RNvMNtNtNtNtCsceChmz4NNcl_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  7.95k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  7.95k|        One {
   71|  7.95k|            sse2: generic::One::new(needle),
   72|  7.95k|            avx2: generic::One::new(needle),
   73|  7.95k|        }
   74|  7.95k|    }
_RNvMNtNtNtNtCsceChmz4NNcl_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCsceChmz4NNcl_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  7.95k|    pub unsafe fn find_raw(
  180|  7.95k|        &self,
  181|  7.95k|        start: *const u8,
  182|  7.95k|        end: *const u8,
  183|  7.95k|    ) -> Option<*const u8> {
  184|  7.95k|        if start >= end {
  185|    555|            return None;
  186|  7.40k|        }
  187|  7.40k|        let len = end.distance(start);
  188|  7.40k|        if len < __m256i::BYTES {
  189|  4.32k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  2.80k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  2.80k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  1.52k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  3.07k|        }
  201|  3.07k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  3.07k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  3.07k|        // enough to run on the vector routine. Pointer validity is caller's
  204|  3.07k|        // responsibility.
  205|  3.07k|        //
  206|  3.07k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  3.07k|        // means we'd have to annotate this routine with `target_feature`.
  208|  3.07k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  3.07k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  3.07k|        // The real problem is that a routine with a `target_feature`
  211|  3.07k|        // annotation generally can't be inlined into caller code unless
  212|  3.07k|        // the caller code has the same target feature annotations. Namely,
  213|  3.07k|        // the common case (at time of writing) is for calling code to not
  214|  3.07k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  3.07k|        // `target_feature` on this routine, it can be inlined which will
  216|  3.07k|        // handle some of the short-haystack cases above without touching the
  217|  3.07k|        // architecture specific code.
  218|  3.07k|        self.find_raw_avx2(start, end)
  219|  7.95k|    }
_RNCNvMNtNtNtNtCsceChmz4NNcl_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|  13.3k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|  13.3k|                    b == self.sse2.needle1()
  194|  13.3k|                })
_RNvMNtNtNtNtCsceChmz4NNcl_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  1.52k|    unsafe fn find_raw_sse2(
  337|  1.52k|        &self,
  338|  1.52k|        start: *const u8,
  339|  1.52k|        end: *const u8,
  340|  1.52k|    ) -> Option<*const u8> {
  341|  1.52k|        self.sse2.find_raw(start, end)
  342|  1.52k|    }
_RNvMNtNtNtNtCsceChmz4NNcl_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  3.07k|    unsafe fn find_raw_avx2(
  397|  3.07k|        &self,
  398|  3.07k|        start: *const u8,
  399|  3.07k|        end: *const u8,
  400|  3.07k|    ) -> Option<*const u8> {
  401|  3.07k|        self.avx2.find_raw(start, end)
  402|  3.07k|    }
_RNvMs2_NtNtNtNtCsceChmz4NNcl_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  1.28M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  1.28M|        Two {
  558|  1.28M|            sse2: generic::Two::new(needle1, needle2),
  559|  1.28M|            avx2: generic::Two::new(needle1, needle2),
  560|  1.28M|        }
  561|  1.28M|    }
_RNvMs2_NtNtNtNtCsceChmz4NNcl_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNvMs2_NtNtNtNtCsceChmz4NNcl_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  1.28M|    pub unsafe fn find_raw(
  655|  1.28M|        &self,
  656|  1.28M|        start: *const u8,
  657|  1.28M|        end: *const u8,
  658|  1.28M|    ) -> Option<*const u8> {
  659|  1.28M|        if start >= end {
  660|   199k|            return None;
  661|  1.08M|        }
  662|  1.08M|        let len = end.distance(start);
  663|  1.08M|        if len < __m256i::BYTES {
  664|   961k|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|   926k|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|   926k|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|  34.7k|                self.find_raw_sse2(start, end)
  674|       |            };
  675|   124k|        }
  676|   124k|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|   124k|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|   124k|        // enough to run on the vector routine. Pointer validity is caller's
  679|   124k|        // responsibility.
  680|   124k|        //
  681|   124k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|   124k|        // means we'd have to annotate this routine with `target_feature`.
  683|   124k|        // Which is fine, because this routine is `unsafe` anyway and the
  684|   124k|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|   124k|        // The real problem is that a routine with a `target_feature`
  686|   124k|        // annotation generally can't be inlined into caller code unless
  687|   124k|        // the caller code has the same target feature annotations. Namely,
  688|   124k|        // the common case (at time of writing) is for calling code to not
  689|   124k|        // have the `avx2` target feature enabled *at compile time*. Without
  690|   124k|        // `target_feature` on this routine, it can be inlined which will
  691|   124k|        // handle some of the short-haystack cases above without touching the
  692|   124k|        // architecture specific code.
  693|   124k|        self.find_raw_avx2(start, end)
  694|  1.28M|    }
_RNCNvMs2_NtNtNtNtCsceChmz4NNcl_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  2.26M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  2.26M|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  2.26M|                })
_RNvMs2_NtNtNtNtCsceChmz4NNcl_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|  34.7k|    unsafe fn find_raw_sse2(
  765|  34.7k|        &self,
  766|  34.7k|        start: *const u8,
  767|  34.7k|        end: *const u8,
  768|  34.7k|    ) -> Option<*const u8> {
  769|  34.7k|        self.sse2.find_raw(start, end)
  770|  34.7k|    }
_RNvMs2_NtNtNtNtCsceChmz4NNcl_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|   124k|    unsafe fn find_raw_avx2(
  805|   124k|        &self,
  806|   124k|        start: *const u8,
  807|   124k|        end: *const u8,
  808|   124k|    ) -> Option<*const u8> {
  809|   124k|        self.avx2.find_raw(start, end)
  810|   124k|    }

_RNvNtNtNtCsceChmz4NNcl_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  1.28M|pub(crate) fn memchr2_raw(
  221|  1.28M|    n1: u8,
  222|  1.28M|    n2: u8,
  223|  1.28M|    start: *const u8,
  224|  1.28M|    end: *const u8,
  225|  1.28M|) -> Option<*const u8> {
  226|  1.28M|    // SAFETY: We provide a valid function pointer type.
  227|  1.28M|    unsafe_ifunc!(
  228|  1.28M|        Two,
  229|  1.28M|        find_raw,
  230|  1.28M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  1.28M|        Option<*const u8>,
  232|  1.28M|        start,
  233|  1.28M|        end,
  234|  1.28M|        n1,
  235|  1.28M|        n2
  236|  1.28M|    )
  237|  1.28M|}
_RNvNtNtNtCsceChmz4NNcl_6memchr4arch6x86_646memchr10memchr_raw:
  174|  7.95k|pub(crate) fn memchr_raw(
  175|  7.95k|    n1: u8,
  176|  7.95k|    start: *const u8,
  177|  7.95k|    end: *const u8,
  178|  7.95k|) -> Option<*const u8> {
  179|  7.95k|    // SAFETY: We provide a valid function pointer type.
  180|  7.95k|    unsafe_ifunc!(
  181|  7.95k|        One,
  182|  7.95k|        find_raw,
  183|  7.95k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  7.95k|        Option<*const u8>,
  185|  7.95k|        start,
  186|  7.95k|        end,
  187|  7.95k|        n1
  188|  7.95k|    )
  189|  7.95k|}
_RNvNvNtNtNtCsceChmz4NNcl_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  7.95k|        unsafe fn find_avx2(
   79|  7.95k|            $($needle: u8),+,
   80|  7.95k|            $hay_start: *const u8,
   81|  7.95k|            $hay_end: *const u8,
   82|  7.95k|        ) -> $retty {
   83|  7.95k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  7.95k|            $memchrty::new_unchecked($($needle),+)
   85|  7.95k|                .$memchrfind($hay_start, $hay_end)
   86|  7.95k|        }
_RNvNvNtNtNtCsceChmz4NNcl_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCsceChmz4NNcl_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  1.28M|        unsafe fn find_avx2(
   79|  1.28M|            $($needle: u8),+,
   80|  1.28M|            $hay_start: *const u8,
   81|  1.28M|            $hay_end: *const u8,
   82|  1.28M|        ) -> $retty {
   83|  1.28M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  1.28M|            $memchrty::new_unchecked($($needle),+)
   85|  1.28M|                .$memchrfind($hay_start, $hay_end)
   86|  1.28M|        }
_RNvNvNtNtNtCsceChmz4NNcl_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }

_RNvXNtCsceChmz4NNcl_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  1.46M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  1.46M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  1.46M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  1.46M|    }
_RNvXNtCsceChmz4NNcl_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|  42.3k|    fn as_usize(self) -> usize {
   27|  42.3k|        self as usize
   28|  42.3k|    }

_RNCNvNtCsceChmz4NNcl_6memchr6memchr7memchr20CsKJkp6CE2YE_5oxttl:
   96|   326k|        generic::search_slice_with_raw(haystack, |start, end| {
   97|   326k|            memchr2_raw(needle1, needle2, start, end)
   98|   326k|        })
_RNCNvXs3_NtCsceChmz4NNcl_6memchr6memchrNtB7_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0CsKJkp6CE2YE_5oxttl:
  395|   959k|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNvMs2_NtCsceChmz4NNcl_6memchr6memchrNtB5_7Memchr23newCsKJkp6CE2YE_5oxttl:
  377|   949k|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|   949k|        Memchr2 {
  379|   949k|            needle1,
  380|   949k|            needle2,
  381|   949k|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|   949k|        }
  383|   949k|    }
_RNvNtCsceChmz4NNcl_6memchr6memchr11memchr2_rawCsKJkp6CE2YE_5oxttl:
  574|  1.28M|unsafe fn memchr2_raw(
  575|  1.28M|    needle1: u8,
  576|  1.28M|    needle2: u8,
  577|  1.28M|    start: *const u8,
  578|  1.28M|    end: *const u8,
  579|  1.28M|) -> Option<*const u8> {
  580|  1.28M|    #[cfg(target_arch = "x86_64")]
  581|  1.28M|    {
  582|  1.28M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  1.28M|    }
  584|  1.28M|    #[cfg(target_arch = "wasm32")]
  585|  1.28M|    {
  586|  1.28M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  1.28M|    }
  588|  1.28M|    #[cfg(target_arch = "aarch64")]
  589|  1.28M|    {
  590|  1.28M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  1.28M|    }
  592|  1.28M|    #[cfg(not(any(
  593|  1.28M|        target_arch = "x86_64",
  594|  1.28M|        target_arch = "wasm32",
  595|  1.28M|        target_arch = "aarch64"
  596|  1.28M|    )))]
  597|  1.28M|    {
  598|  1.28M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  1.28M|            .find_raw(start, end)
  600|  1.28M|    }
  601|  1.28M|}
_RNvNtCsceChmz4NNcl_6memchr6memchr12memchr2_iterCsKJkp6CE2YE_5oxttl:
  232|   949k|pub fn memchr2_iter<'h>(
  233|   949k|    needle1: u8,
  234|   949k|    needle2: u8,
  235|   949k|    haystack: &'h [u8],
  236|   949k|) -> Memchr2<'h> {
  237|   949k|    Memchr2::new(needle1, needle2, haystack)
  238|   949k|}
_RNvNtCsceChmz4NNcl_6memchr6memchr6memchrCsKJkp6CE2YE_5oxttl:
   27|  7.95k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  7.95k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  7.95k|    // pointer between start and end.
   30|  7.95k|    unsafe {
   31|  7.95k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  7.95k|        })
   34|  7.95k|    }
   35|  7.95k|}
_RNvNtCsceChmz4NNcl_6memchr6memchr7memchr2CsKJkp6CE2YE_5oxttl:
   92|   326k|pub fn memchr2(needle1: u8, needle2: u8, haystack: &[u8]) -> Option<usize> {
   93|   326k|    // SAFETY: memchr2_raw, when a match is found, always returns a valid
   94|   326k|    // pointer between start and end.
   95|   326k|    unsafe {
   96|   326k|        generic::search_slice_with_raw(haystack, |start, end| {
   97|       |            memchr2_raw(needle1, needle2, start, end)
   98|   326k|        })
   99|   326k|    }
  100|   326k|}
_RNvXs3_NtCsceChmz4NNcl_6memchr6memchrNtB5_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCsKJkp6CE2YE_5oxttl:
  390|   959k|    fn next(&mut self) -> Option<usize> {
  391|   959k|        // SAFETY: All of our implementations of memchr ensure that any
  392|   959k|        // pointers returns will fall within the start and end bounds, and this
  393|   959k|        // upholds the safety contract of `self.it.next`.
  394|   959k|        unsafe {
  395|   959k|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|   959k|        }
  397|   959k|    }
_RNCNvNtCsceChmz4NNcl_6memchr6memchr6memchr0B5_:
   31|  7.95k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|  7.95k|            memchr_raw(needle, start, end)
   33|  7.95k|        })
_RNvNtCsceChmz4NNcl_6memchr6memchr10memchr_rawB3_:
  504|  7.95k|unsafe fn memchr_raw(
  505|  7.95k|    needle: u8,
  506|  7.95k|    start: *const u8,
  507|  7.95k|    end: *const u8,
  508|  7.95k|) -> Option<*const u8> {
  509|  7.95k|    #[cfg(target_arch = "x86_64")]
  510|  7.95k|    {
  511|  7.95k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  7.95k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  7.95k|        // time. This function also handles using a fallback if neither AVX2
  514|  7.95k|        // nor SSE2 (unusual) are available.
  515|  7.95k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  7.95k|    }
  517|  7.95k|    #[cfg(target_arch = "wasm32")]
  518|  7.95k|    {
  519|  7.95k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  7.95k|    }
  521|  7.95k|    #[cfg(target_arch = "aarch64")]
  522|  7.95k|    {
  523|  7.95k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  7.95k|    }
  525|  7.95k|    #[cfg(not(any(
  526|  7.95k|        target_arch = "x86_64",
  527|  7.95k|        target_arch = "wasm32",
  528|  7.95k|        target_arch = "aarch64"
  529|  7.95k|    )))]
  530|  7.95k|    {
  531|  7.95k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  7.95k|    }
  533|  7.95k|}

_RNvYNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtNtCsceChmz4NNcl_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   65|  34.6k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   66|  34.6k|        self.movemask().has_non_zero()
   67|  34.6k|    }
_RNvMNtCsceChmz4NNcl_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  128|   127k|    fn get_for_offset(self) -> u32 {
  129|   127k|        #[cfg(target_endian = "big")]
  130|   127k|        {
  131|   127k|            self.0.swap_bytes()
  132|   127k|        }
  133|   127k|        #[cfg(target_endian = "little")]
  134|   127k|        {
  135|   127k|            self.0
  136|   127k|        }
  137|   127k|    }
_RNvXs_NtCsceChmz4NNcl_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  148|   254k|    fn has_non_zero(self) -> bool {
  149|   254k|        self.0 != 0
  150|   254k|    }
_RNvXs_NtCsceChmz4NNcl_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  173|   127k|    fn first_offset(self) -> usize {
  174|   127k|        // We are dealing with little endian here (and if we aren't, we swap
  175|   127k|        // the bytes so we are in practice), where the most significant byte
  176|   127k|        // is at a higher address. That means the least significant bit that
  177|   127k|        // is set corresponds to the position of our first matching byte.
  178|   127k|        // That position corresponds to the number of zeros after the least
  179|   127k|        // significant bit.
  180|   127k|        self.get_for_offset().trailing_zeros() as usize
  181|   127k|    }
_RNvXNtNtCsceChmz4NNcl_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  220|  63.1k|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  221|  63.1k|            _mm_loadu_si128(data as *const __m128i)
  222|  63.1k|        }
_RNvXNtNtCsceChmz4NNcl_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  225|  94.3k|        unsafe fn movemask(self) -> SensibleMoveMask {
  226|  94.3k|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  227|  94.3k|        }
_RNvXNtNtCsceChmz4NNcl_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  230|   122k|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  231|   122k|            _mm_cmpeq_epi8(self, vector2)
  232|   122k|        }
_RNvXNtNtCsceChmz4NNcl_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  270|   154k|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  271|   154k|            _mm256_loadu_si256(data as *const __m256i)
  272|   154k|        }
_RNvXNtNtCsceChmz4NNcl_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  275|   412k|        unsafe fn movemask(self) -> SensibleMoveMask {
  276|   412k|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  277|   412k|        }
_RNvXNtNtCsceChmz4NNcl_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  280|   438k|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  281|   438k|            _mm256_cmpeq_epi8(self, vector2)
  282|   438k|        }
_RNvXs_NtCsceChmz4NNcl_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  163|   127k|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  164|   127k|        SensibleMoveMask(self.0 | other.0)
  165|   127k|    }
_RNvXNtNtCsceChmz4NNcl_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  210|  2.57M|        unsafe fn splat(byte: u8) -> __m128i {
  211|  2.57M|            _mm_set1_epi8(byte as i8)
  212|  2.57M|        }
_RNvXNtNtCsceChmz4NNcl_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector2or:
  240|  59.7k|        unsafe fn or(self, vector2: Self) -> __m128i {
  241|  59.7k|            _mm_or_si128(self, vector2)
  242|  59.7k|        }
_RNvXNtNtCsceChmz4NNcl_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  260|  2.57M|        unsafe fn splat(byte: u8) -> __m256i {
  261|  2.57M|            _mm256_set1_epi8(byte as i8)
  262|  2.57M|        }
_RNvXNtNtCsceChmz4NNcl_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  265|  70.4k|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  266|  70.4k|            _mm256_load_si256(data as *const __m256i)
  267|  70.4k|        }
_RNvXNtNtCsceChmz4NNcl_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector2or:
  290|   249k|        unsafe fn or(self, vector2: Self) -> __m256i {
  291|   249k|            _mm256_or_si256(self, vector2)
  292|   249k|        }

_RNvMs2_NtCskvfXHrT6OsD_9once_cell3impINtB5_8OnceCellNtNtCs3OstG5Tqy1X_5alloc6string6StringE14is_initializedCsf8H0iyfdRmj_13libfuzzer_sys:
   49|  3.47k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  3.47k|        // An `Acquire` load is enough because that makes all the initialization
   51|  3.47k|        // operations visible to us, and, this being a fast path, weaker
   52|  3.47k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  3.47k|        // `SeqCst` operations on the slow path.
   54|  3.47k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  3.47k|    }

_RNvMs4_NtCskvfXHrT6OsD_9once_cell4syncINtB5_8OnceCellNtNtCs3OstG5Tqy1X_5alloc6string6StringE3getCsf8H0iyfdRmj_13libfuzzer_sys:
  963|  3.47k|        pub fn get(&self) -> Option<&T> {
  964|  3.47k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  3.47k|                None
  969|       |            }
  970|  3.47k|        }

_RNvMCsbIcdHmDfq23_10oxilangtagINtB2_11LanguageTagReE10into_innerCsKJkp6CE2YE_5oxttl:
   54|  6.50k|    pub fn into_inner(self) -> T {
   55|  6.50k|        self.tag
   56|  6.50k|    }
_RNvMCsbIcdHmDfq23_10oxilangtagINtB2_11LanguageTagReE5parseCsKJkp6CE2YE_5oxttl:
   41|  10.4k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   42|  10.4k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   43|  6.50k|        Ok(Self { tag, positions })
   44|  10.4k|    }
_RNvCsbIcdHmDfq23_10oxilangtag10is_numericCs6sLY0PWj8mX_5oxrdf:
  865|    332|fn is_numeric(s: &str) -> bool {
  866|    332|    s.chars().all(|x| x.is_ascii_digit())
  867|    332|}
_RNvCsbIcdHmDfq23_10oxilangtag12to_lowercaseCs6sLY0PWj8mX_5oxrdf:
  892|  10.5k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  893|  10.5k|    s.chars().map(|c| c.to_ascii_lowercase())
  894|  10.5k|}
_RNvCsbIcdHmDfq23_10oxilangtag12to_uppercaseCs6sLY0PWj8mX_5oxrdf:
  880|  1.99k|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  881|  1.99k|    s.chars().map(|c| c.to_ascii_uppercase())
  882|  1.99k|}
_RNvCsbIcdHmDfq23_10oxilangtag13is_alphabeticCs6sLY0PWj8mX_5oxrdf:
  860|  11.6k|fn is_alphabetic(s: &str) -> bool {
  861|  11.6k|    s.chars().all(|x| x.is_ascii_alphabetic())
  862|  11.6k|}
_RNvCsbIcdHmDfq23_10oxilangtag15is_alphanumericCs6sLY0PWj8mX_5oxrdf:
  870|  4.34k|fn is_alphanumeric(s: &str) -> bool {
  871|  4.34k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  872|  4.34k|}
_RNvCsbIcdHmDfq23_10oxilangtag18to_uppercase_firstCs6sLY0PWj8mX_5oxrdf:
  886|    614|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  887|    614|    let mut chars = s.chars();
  888|    614|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  889|    614|}
_RNvCsbIcdHmDfq23_10oxilangtag23is_alphanumeric_or_dashCs6sLY0PWj8mX_5oxrdf:
  875|    839|fn is_alphanumeric_or_dash(s: &str) -> bool {
  876|    839|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  877|    839|}
_RNvMsv_CsbIcdHmDfq23_10oxilangtagNtB5_14SubTagIterator3newCs6sLY0PWj8mX_5oxrdf:
  839|  9.59k|    fn new(input: &'a str) -> Self {
  840|  9.59k|        Self {
  841|  9.59k|            split: input.split('-'),
  842|  9.59k|            position: 0,
  843|  9.59k|        }
  844|  9.59k|    }
_RNvXsq_CsbIcdHmDfq23_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCs6sLY0PWj8mX_5oxrdf:
  552|  10.6k|    fn push(&mut self, _: char) {}
_RNvXsw_CsbIcdHmDfq23_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCs6sLY0PWj8mX_5oxrdf:
  851|  25.2k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  852|  25.2k|        let tag = self.split.next()?;
  853|  18.2k|        let tag_end = self.position + tag.len();
  854|  18.2k|        self.position = tag_end + 1;
  855|  18.2k|        Some((tag, tag_end))
  856|  25.2k|    }
_RINvCsbIcdHmDfq23_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECs6sLY0PWj8mX_5oxrdf:
  621|  9.59k|fn parse_langtag(
  622|  9.59k|    input: &str,
  623|  9.59k|    output: &mut impl OutputBuffer,
  624|  9.59k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  625|  9.59k|    #[derive(PartialEq, Eq)]
  626|  9.59k|    enum State {
  627|  9.59k|        Start,
  628|  9.59k|        AfterLanguage,
  629|  9.59k|        AfterExtLang,
  630|  9.59k|        AfterScript,
  631|  9.59k|        AfterRegion,
  632|  9.59k|        InExtension { expected: bool },
  633|  9.59k|        InPrivateUse { expected: bool },
  634|  9.59k|    }
  635|  9.59k|
  636|  9.59k|    let mut state = State::Start;
  637|  9.59k|    let mut language_end = 0;
  638|  9.59k|    let mut extlang_end = 0;
  639|  9.59k|    let mut script_end = 0;
  640|  9.59k|    let mut region_end = 0;
  641|  9.59k|    let mut variant_end = 0;
  642|  9.59k|    let mut extension_end = 0;
  643|  9.59k|    let mut extlangs_count = 0;
  644|  18.2k|    for (subtag, end) in SubTagIterator::new(input) {
  645|  18.2k|        if subtag.is_empty() {
  646|      0|            return Err(LanguageTagParseError {
  647|      0|                kind: TagParseErrorKind::EmptySubtag,
  648|      0|            });
  649|  18.2k|        }
  650|  18.2k|        if subtag.len() > 8 {
  651|    250|            return Err(LanguageTagParseError {
  652|    250|                kind: TagParseErrorKind::SubtagTooLong,
  653|    250|            });
  654|  18.0k|        }
  655|  18.0k|        if state == State::Start {
  656|       |            // Primary language
  657|  9.36k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  658|  1.78k|                return Err(LanguageTagParseError {
  659|  1.78k|                    kind: TagParseErrorKind::InvalidLanguage,
  660|  1.78k|                });
  661|  7.58k|            }
  662|  7.58k|            language_end = end;
  663|  7.58k|            output.extend(to_lowercase(subtag));
  664|  7.58k|            if subtag.len() < 4 {
  665|  5.17k|                // extlangs are only allowed for short language tags
  666|  5.17k|                state = State::AfterLanguage;
  667|  5.17k|            } else {
  668|  2.40k|                state = State::AfterExtLang;
  669|  2.40k|            }
  670|  8.67k|        } else if let State::InPrivateUse { .. } = state {
  671|    792|            if !is_alphanumeric(subtag) {
  672|      0|                return Err(LanguageTagParseError {
  673|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  674|      0|                });
  675|    792|            }
  676|    792|            output.push('-');
  677|    792|            output.extend(to_lowercase(subtag));
  678|    792|            state = State::InPrivateUse { expected: false };
  679|  7.88k|        } else if subtag == "x" || subtag == "X" {
  680|       |            // We make sure extension is found
  681|    821|            if let State::InExtension { expected: true } = state {
  682|     64|                return Err(LanguageTagParseError {
  683|     64|                    kind: TagParseErrorKind::EmptyExtension,
  684|     64|                });
  685|    757|            }
  686|    757|            output.push('-');
  687|    757|            output.push('x');
  688|    757|            state = State::InPrivateUse { expected: true };
  689|  7.06k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  690|       |            // We make sure extension is found
  691|  1.87k|            if let State::InExtension { expected: true } = state {
  692|     82|                return Err(LanguageTagParseError {
  693|     82|                    kind: TagParseErrorKind::EmptyExtension,
  694|     82|                });
  695|  1.79k|            }
  696|  1.79k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  697|  1.79k|            output.push('-');
  698|  1.79k|            output.push(extension_tag);
  699|  1.79k|            state = State::InExtension { expected: true };
  700|  5.18k|        } else if let State::InExtension { .. } = state {
  701|    715|            if !is_alphanumeric(subtag) {
  702|      0|                return Err(LanguageTagParseError {
  703|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  704|      0|                });
  705|    715|            }
  706|    715|            extension_end = end;
  707|    715|            output.push('-');
  708|    715|            output.extend(to_lowercase(subtag));
  709|    715|            state = State::InExtension { expected: false };
  710|  4.46k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  711|    894|            extlangs_count += 1;
  712|    894|            if extlangs_count > 3 {
  713|     62|                return Err(LanguageTagParseError {
  714|     62|                    kind: TagParseErrorKind::TooManyExtlangs,
  715|     62|                });
  716|    832|            }
  717|    832|            // valid extlangs
  718|    832|            extlang_end = end;
  719|    832|            output.push('-');
  720|    832|            output.extend(to_lowercase(subtag));
  721|  3.57k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  722|  2.52k|            && subtag.len() == 4
  723|    614|            && is_alphabetic(subtag)
  724|    614|        {
  725|    614|            // Script
  726|    614|            script_end = end;
  727|    614|            output.push('-');
  728|    614|            output.extend(to_uppercase_first(subtag));
  729|    614|            state = State::AfterScript;
  730|  2.95k|        } else if (state == State::AfterLanguage
  731|  1.52k|            || state == State::AfterExtLang
  732|  1.05k|            || state == State::AfterScript)
  733|  2.40k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  734|    406|                || subtag.len() == 3 && is_numeric(subtag))
  735|  1.99k|        {
  736|  1.99k|            // Region
  737|  1.99k|            region_end = end;
  738|  1.99k|            output.push('-');
  739|  1.99k|            output.extend(to_uppercase(subtag));
  740|  1.99k|            state = State::AfterRegion;
  741|  1.99k|        } else if (state == State::AfterLanguage
  742|    874|            || state == State::AfterExtLang
  743|    565|            || state == State::AfterScript
  744|    555|            || state == State::AfterRegion)
  745|    961|            && is_alphanumeric(subtag)
  746|    961|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  747|    370|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  748|    591|        {
  749|    591|            // Variant
  750|    591|            variant_end = end;
  751|    591|            output.push('-');
  752|    591|            output.extend(to_lowercase(subtag));
  753|    591|            state = State::AfterRegion;
  754|    591|        } else {
  755|    370|            return Err(LanguageTagParseError {
  756|    370|                kind: TagParseErrorKind::InvalidSubtag,
  757|    370|            });
  758|       |        }
  759|       |    }
  760|       |
  761|       |    //We make sure we are in a correct final state
  762|  6.97k|    if let State::InExtension { expected: true } = state {
  763|    968|        return Err(LanguageTagParseError {
  764|    968|            kind: TagParseErrorKind::EmptyExtension,
  765|    968|        });
  766|  6.01k|    }
  767|  6.01k|    if let State::InPrivateUse { expected: true } = state {
  768|    342|        return Err(LanguageTagParseError {
  769|    342|            kind: TagParseErrorKind::EmptyPrivateUse,
  770|    342|        });
  771|  5.66k|    }
  772|  5.66k|
  773|  5.66k|    //We make sure we have not skipped anyone
  774|  5.66k|    if extlang_end < language_end {
  775|  5.05k|        extlang_end = language_end;
  776|  5.05k|    }
  777|  5.66k|    if script_end < extlang_end {
  778|  5.07k|        script_end = extlang_end;
  779|  5.07k|    }
  780|  5.66k|    if region_end < script_end {
  781|  4.12k|        region_end = script_end;
  782|  4.12k|    }
  783|  5.66k|    if variant_end < region_end {
  784|  5.15k|        variant_end = region_end;
  785|  5.15k|    }
  786|  5.66k|    if extension_end < variant_end {
  787|  5.39k|        extension_end = variant_end;
  788|  5.39k|    }
  789|       |
  790|  5.66k|    Ok(TagElementsPositions {
  791|  5.66k|        language_end,
  792|  5.66k|        extlang_end,
  793|  5.66k|        script_end,
  794|  5.66k|        region_end,
  795|  5.66k|        variant_end,
  796|  5.66k|        extension_end,
  797|  5.66k|    })
  798|  9.59k|}
_RINvCsbIcdHmDfq23_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECs6sLY0PWj8mX_5oxrdf:
  576|  10.4k|fn parse_language_tag(
  577|  10.4k|    input: &str,
  578|  10.4k|    output: &mut impl OutputBuffer,
  579|  10.4k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  580|       |    //grandfathered tags
  581|  10.4k|    if let Some(tag) = GRANDFATHEREDS
  582|  10.4k|        .iter()
  583|  10.4k|        .find(|record| record.eq_ignore_ascii_case(input))
  584|       |    {
  585|      0|        output.push_str(tag);
  586|      0|        Ok(TagElementsPositions {
  587|      0|            language_end: tag.len(),
  588|      0|            extlang_end: tag.len(),
  589|      0|            script_end: tag.len(),
  590|      0|            region_end: tag.len(),
  591|      0|            variant_end: tag.len(),
  592|      0|            extension_end: tag.len(),
  593|      0|        })
  594|  10.4k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  595|       |        // private use
  596|    839|        if !is_alphanumeric_or_dash(input) {
  597|      0|            Err(LanguageTagParseError {
  598|      0|                kind: TagParseErrorKind::ForbiddenChar,
  599|      0|            })
  600|    839|        } else if input.len() == 2 {
  601|      0|            Err(LanguageTagParseError {
  602|      0|                kind: TagParseErrorKind::EmptyPrivateUse,
  603|      0|            })
  604|       |        } else {
  605|    839|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  606|    839|            Ok(TagElementsPositions {
  607|    839|                language_end: input.len(),
  608|    839|                extlang_end: input.len(),
  609|    839|                script_end: input.len(),
  610|    839|                region_end: input.len(),
  611|    839|                variant_end: input.len(),
  612|    839|                extension_end: input.len(),
  613|    839|            })
  614|       |        }
  615|       |    } else {
  616|  9.59k|        parse_langtag(input, output)
  617|       |    }
  618|  10.4k|}
_RINvXsr_CsbIcdHmDfq23_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECs6sLY0PWj8mX_5oxrdf:
  560|    839|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsbIcdHmDfq23_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECs6sLY0PWj8mX_5oxrdf:
  560|  10.5k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsbIcdHmDfq23_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECs6sLY0PWj8mX_5oxrdf:
  560|  1.99k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsbIcdHmDfq23_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECs6sLY0PWj8mX_5oxrdf:
  560|    614|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCsbIcdHmDfq23_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0Cs6sLY0PWj8mX_5oxrdf:
  583|   271k|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvXso_CsbIcdHmDfq23_10oxilangtagNtB5_21LanguageTagParseErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
  482|  3.92k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  483|  3.92k|        match self.kind {
  484|       |            TagParseErrorKind::EmptyExtension => {
  485|  1.11k|                write!(f, "If an extension subtag is present, it must not be empty")
  486|       |            }
  487|       |            TagParseErrorKind::EmptyPrivateUse => {
  488|    342|                write!(f, "If the `x` subtag is present, it must not be empty")
  489|       |            }
  490|       |            TagParseErrorKind::ForbiddenChar => {
  491|      0|                write!(f, "The langtag contains a char not allowed")
  492|       |            }
  493|    370|            TagParseErrorKind::InvalidSubtag => write!(
  494|    370|                f,
  495|    370|                "A subtag fails to parse, it does not match any other subtags"
  496|    370|            ),
  497|  1.78k|            TagParseErrorKind::InvalidLanguage => write!(f, "The given language subtag is invalid"),
  498|       |            TagParseErrorKind::SubtagTooLong => {
  499|    250|                write!(f, "A subtag may be eight characters in length at maximum")
  500|       |            }
  501|      0|            TagParseErrorKind::EmptySubtag => write!(f, "A subtag should not be empty"),
  502|       |            TagParseErrorKind::TooManyExtlangs => {
  503|     62|                write!(f, "At maximum three extlangs are allowed")
  504|       |            }
  505|       |        }
  506|  3.92k|    }
_RNCNvCsbIcdHmDfq23_10oxilangtag13is_alphabetic0B3_:
  861|  34.4k|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCsbIcdHmDfq23_10oxilangtag10is_numeric0B3_:
  866|    332|    s.chars().all(|x| x.is_ascii_digit())
_RNCNvCsbIcdHmDfq23_10oxilangtag15is_alphanumeric0B3_:
  871|  10.0k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNCNvCsbIcdHmDfq23_10oxilangtag23is_alphanumeric_or_dash0B3_:
  876|  34.2k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')

_RINvMs11_CskWDZ7qu577C_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECs6sLY0PWj8mX_5oxrdf:
 1567|  5.51k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1568|  5.51k|        Err(IriParseError { kind })
 1569|  5.51k|    }
_RNCNvMs11_CskWDZ7qu577C_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0Cs6sLY0PWj8mX_5oxrdf:
 1550|  1.77k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_CskWDZ7qu577C_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0Cs6sLY0PWj8mX_5oxrdf:
 1551|    867|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMCskWDZ7qu577C_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE10into_innerCs6sLY0PWj8mX_5oxrdf:
  191|  61.2k|    pub fn into_inner(self) -> T {
  192|  61.2k|        self.iri
  193|  61.2k|    }
_RNvMCskWDZ7qu577C_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE11is_absoluteCs6sLY0PWj8mX_5oxrdf:
  205|  65.0k|    pub fn is_absolute(&self) -> bool {
  206|  65.0k|        self.positions.scheme_end != 0
  207|  65.0k|    }
_RNvMCskWDZ7qu577C_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE5parseCs6sLY0PWj8mX_5oxrdf:
   58|  70.5k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  70.5k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  65.0k|        Ok(Self { iri, positions })
   61|  70.5k|    }
_RNvMs11_CskWDZ7qu577C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCs6sLY0PWj8mX_5oxrdf:
 1366|  2.28k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|  2.28k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|    262|            let start_position = self.input.position;
 1370|  3.98k|            while let Some(c) = self.input.next() {
 1371|  3.87k|                self.output.push(c);
 1372|  3.87k|                if c == ']' {
 1373|    156|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|    156|                    if !UNCHECKED {
 1375|    156|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|    156|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|      0|                        }
 1378|      0|                    }
 1379|       |
 1380|      0|                    let c = self.input.next();
 1381|      0|                    return match c {
 1382|       |                        Some(':') => {
 1383|      0|                            self.output.push(':');
 1384|      0|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|      0|                            self.output_positions.authority_end = self.output.len();
 1388|      0|                            self.parse_path_start(c)
 1389|       |                        }
 1390|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|  3.72k|                }
 1393|       |            }
 1394|    106|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|  10.3k|            loop {
 1398|  10.3k|                let c = self.input.next();
 1399|  10.3k|                match c {
 1400|       |                    Some(':') => {
 1401|    579|                        self.output.push(':');
 1402|    579|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|  1.28k|                        self.output_positions.authority_end = self.output.len();
 1406|  1.28k|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|  8.53k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|  2.28k|    }
_RNvMs11_CskWDZ7qu577C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCs6sLY0PWj8mX_5oxrdf:
 1457|  67.9k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|   174k|        loop {
 1459|   174k|            let c = self.input.next();
 1460|   174k|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|  65.7k|                    if self.output.as_str().ends_with("/..") {
 1463|      0|                        self.remove_last_segment();
 1464|      0|                        self.remove_last_segment();
 1465|      0|                        self.output.push('/');
 1466|  65.7k|                    } else if self.output.as_str().ends_with("/.") {
 1467|      0|                        self.remove_last_segment();
 1468|      0|                        self.output.push('/');
 1469|  65.7k|                    } else if c == Some('/') {
 1470|  1.04k|                        self.output.push('/');
 1471|  64.7k|                    }
 1472|       |
 1473|  65.7k|                    if c == Some('?') {
 1474|  1.95k|                        self.output_positions.path_end = self.output.len();
 1475|  1.95k|                        self.output.push('?');
 1476|  1.95k|                        return self.parse_query();
 1477|  63.8k|                    } else if c == Some('#') {
 1478|  1.13k|                        self.output_positions.path_end = self.output.len();
 1479|  1.13k|                        self.output_positions.query_end = self.output.len();
 1480|  1.13k|                        self.output.push('#');
 1481|  1.13k|                        return self.parse_fragment();
 1482|  62.7k|                    } else if c.is_none() {
 1483|  61.6k|                        self.output_positions.path_end = self.output.len();
 1484|  61.6k|                        self.output_positions.query_end = self.output.len();
 1485|  61.6k|                        return Ok(());
 1486|  1.04k|                    }
 1487|       |                }
 1488|   108k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|  67.9k|    }
_RNvMs11_CskWDZ7qu577C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCs6sLY0PWj8mX_5oxrdf:
 1414|    579|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|    857|        loop {
 1416|    857|            let c = self.input.next();
 1417|    715|            match c {
 1418|    715|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|    469|                    self.output_positions.authority_end = self.output.len();
 1421|    469|                    return self.parse_path_start(c);
 1422|       |                }
 1423|    110|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|    579|    }
_RNvMs11_CskWDZ7qu577C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCs6sLY0PWj8mX_5oxrdf:
 1547|  1.93k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1548|  1.93k|        let c1 = self.input.next();
 1549|  1.93k|        let c2 = self.input.next();
 1550|  1.93k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1551|    879|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1552|       |        {
 1553|    747|            self.output.push('%');
 1554|    747|            self.output.push(c1.unwrap());
 1555|    747|            self.output.push(c2.unwrap());
 1556|    747|            Ok(())
 1557|       |        } else {
 1558|  1.18k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1559|  1.18k|                Some('%'),
 1560|  1.18k|                c1,
 1561|  1.18k|                c2,
 1562|  1.18k|            ]))
 1563|       |        }
 1564|  1.93k|    }
_RNvMs11_CskWDZ7qu577C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCs6sLY0PWj8mX_5oxrdf:
 1493|  2.16k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|  14.3k|        while let Some(c) = self.input.next() {
 1495|  12.7k|            if c == '#' {
 1496|     69|                self.output_positions.query_end = self.output.len();
 1497|     69|                self.output.push('#');
 1498|     69|                return self.parse_fragment();
 1499|       |            } else {
 1500|  12.7k|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|  1.55k|        self.output_positions.query_end = self.output.len();
 1504|  1.55k|        Ok(())
 1505|  2.16k|    }
_RNvMs11_CskWDZ7qu577C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCs6sLY0PWj8mX_5oxrdf:
 1220|  64.2k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|   145k|        loop {
 1222|   145k|            let c = self.input.next();
 1223|   144k|            match c {
 1224|   144k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|  80.8k|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|  62.1k|                    self.output.push(':');
 1229|  62.1k|                    self.output_positions.scheme_end = self.output.len();
 1230|  62.1k|                    self.input_scheme_end = self.input.position;
 1231|  62.1k|                    return if self.input.starts_with('/') {
 1232|  1.34k|                        self.input.next();
 1233|  1.34k|                        self.output.push('/');
 1234|  1.34k|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|  60.8k|                        self.output_positions.authority_end = self.output.len();
 1237|  60.8k|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|  2.07k|                    self.input = ParserInput {
 1242|  2.07k|                        value: self.iri.chars(),
 1243|  2.07k|                        position: 0,
 1244|  2.07k|                    }; // reset
 1245|  2.07k|                    self.output.clear();
 1246|  2.07k|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|  64.2k|    }
_RNvMs11_CskWDZ7qu577C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCs6sLY0PWj8mX_5oxrdf:
 1507|  1.35k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|  13.4k|        while let Some(c) = self.input.next() {
 1509|  12.6k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|    802|        Ok(())
 1512|  1.35k|    }
_RNvMs11_CskWDZ7qu577C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_relativeCs6sLY0PWj8mX_5oxrdf:
 1263|  8.11k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1264|  8.11k|        if let Some(base) = self.base {
 1265|      0|            match self.input.front() {
 1266|       |                None => {
 1267|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1268|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1269|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1270|      0|                    self.output_positions.path_end = base.positions.path_end;
 1271|      0|                    self.output_positions.query_end = base.positions.query_end;
 1272|      0|                    Ok(())
 1273|       |                }
 1274|       |                Some('/') => {
 1275|      0|                    self.input.next();
 1276|      0|                    self.parse_relative_slash(&base)
 1277|       |                }
 1278|       |                Some('?') => {
 1279|      0|                    self.input.next();
 1280|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1281|      0|                    self.output.push('?');
 1282|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1283|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1284|      0|                    self.output_positions.path_end = base.positions.path_end;
 1285|      0|                    self.parse_query()
 1286|       |                }
 1287|       |                Some('#') => {
 1288|      0|                    self.input.next();
 1289|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1290|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1291|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1292|      0|                    self.output_positions.path_end = base.positions.path_end;
 1293|      0|                    self.output_positions.query_end = base.positions.query_end;
 1294|      0|                    self.output.push('#');
 1295|      0|                    self.parse_fragment()
 1296|       |                }
 1297|       |                _ => {
 1298|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1299|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1300|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1301|      0|                    self.output_positions.path_end = base.positions.path_end;
 1302|      0|                    self.remove_last_segment();
 1303|      0|                    if self.output.len() > base.positions.scheme_end {
 1304|      0|                        // We have some path or authority, we keep a base '/'
 1305|      0|                        self.output.push('/');
 1306|      0|                    }
 1307|      0|                    self.parse_path()
 1308|       |                }
 1309|       |            }
 1310|       |        } else {
 1311|  8.11k|            self.output_positions.scheme_end = 0;
 1312|  8.11k|            self.input_scheme_end = 0;
 1313|  8.11k|            if self.input.starts_with('/') {
 1314|  2.30k|                self.input.next();
 1315|  2.30k|                self.output.push('/');
 1316|  2.30k|                self.parse_path_or_authority()
 1317|       |            } else {
 1318|  5.80k|                self.output_positions.authority_end = 0;
 1319|  5.80k|                self.parse_path()
 1320|       |            }
 1321|       |        }
 1322|  8.11k|    }
_RNvMs11_CskWDZ7qu577C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCs6sLY0PWj8mX_5oxrdf:
 1342|  2.76k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|  16.2k|        loop {
 1345|  16.2k|            let c = self.input.next();
 1346|  16.2k|            match c {
 1347|       |                Some('@') => {
 1348|    220|                    self.output.push('@');
 1349|    220|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|  2.06k|                    self.input = ParserInput {
 1353|  2.06k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|  2.06k|                        position: self.input_scheme_end + 2,
 1355|  2.06k|                    };
 1356|  2.06k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|  2.06k|                    return self.parse_host();
 1358|       |                }
 1359|  13.9k|                Some(c) => {
 1360|  13.9k|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|  2.76k|    }
_RNvMs11_CskWDZ7qu577C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCs6sLY0PWj8mX_5oxrdf:
 1428|  1.75k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|  1.75k|        match c {
 1430|       |            None => {
 1431|    977|                self.output_positions.path_end = self.output.len();
 1432|    977|                self.output_positions.query_end = self.output.len();
 1433|    977|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|    212|                self.output_positions.path_end = self.output.len();
 1437|    212|                self.output.push('?');
 1438|    212|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|    150|                self.output_positions.path_end = self.output.len();
 1442|    150|                self.output_positions.query_end = self.output.len();
 1443|    150|                self.output.push('#');
 1444|    150|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|    417|                self.output.push('/');
 1448|    417|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|  1.75k|    }
_RNvMs11_CskWDZ7qu577C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCs6sLY0PWj8mX_5oxrdf:
 1212|  70.5k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|  70.5k|        match self.input.front() {
 1214|    238|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|  69.4k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|  6.04k|            _ => self.parse_relative(),
 1217|       |        }
 1218|  70.5k|    }
_RNvMs11_CskWDZ7qu577C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCs6sLY0PWj8mX_5oxrdf:
 1252|  3.65k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|  3.65k|        if self.input.starts_with('/') {
 1254|  2.76k|            self.input.next();
 1255|  2.76k|            self.output.push('/');
 1256|  2.76k|            self.parse_authority()
 1257|       |        } else {
 1258|    884|            self.output_positions.authority_end = self.output.len() - 1;
 1259|    884|            self.parse_path()
 1260|       |        }
 1261|  3.65k|    }
_RNvMs11_CskWDZ7qu577C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarCs6sLY0PWj8mX_5oxrdf:
 1523|   143k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|   143k|        if UNCHECKED || is_url_code_point(c) {
 1525|   138k|            self.output.push(c);
 1526|   138k|            Ok(())
 1527|  4.92k|        } else if c == '%' {
 1528|  1.58k|            self.read_echar()
 1529|       |        } else {
 1530|  3.34k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|   143k|    }
_RNvMs11_CskWDZ7qu577C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E33read_url_query_codepoint_or_echarCs6sLY0PWj8mX_5oxrdf:
 1535|  12.7k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|  12.7k|        if UNCHECKED || is_url_query_code_point(c) {
 1537|  11.9k|            self.output.push(c);
 1538|  11.9k|            Ok(())
 1539|    735|        } else if c == '%' {
 1540|    351|            self.read_echar()
 1541|       |        } else {
 1542|    384|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|  12.7k|    }
_RNvMs11_CskWDZ7qu577C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCs6sLY0PWj8mX_5oxrdf:
 1187|  70.5k|    fn parse(
 1188|  70.5k|        iri: &'a str,
 1189|  70.5k|        base: Option<IriRef<&'a str>>,
 1190|  70.5k|        output: &'a mut O,
 1191|  70.5k|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|  70.5k|        let mut parser = Self {
 1193|  70.5k|            iri,
 1194|  70.5k|            base,
 1195|  70.5k|            input: ParserInput {
 1196|  70.5k|                value: iri.chars(),
 1197|  70.5k|                position: 0,
 1198|  70.5k|            },
 1199|  70.5k|            output,
 1200|  70.5k|            output_positions: IriElementsPositions {
 1201|  70.5k|                scheme_end: 0,
 1202|  70.5k|                authority_end: 0,
 1203|  70.5k|                path_end: 0,
 1204|  70.5k|                query_end: 0,
 1205|  70.5k|            },
 1206|  70.5k|            input_scheme_end: 0,
 1207|  70.5k|        };
 1208|  70.5k|        parser.parse_scheme_start()?;
 1209|  65.0k|        Ok(parser.output_positions)
 1210|  70.5k|    }
_RNvMsp_CskWDZ7qu577C_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE10into_innerCs6sLY0PWj8mX_5oxrdf:
  678|  61.2k|    pub fn into_inner(self) -> T {
  679|  61.2k|        self.0.into_inner()
  680|  61.2k|    }
_RNvMsp_CskWDZ7qu577C_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE5parseCs6sLY0PWj8mX_5oxrdf:
  562|  70.5k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  563|  70.5k|        IriRef::parse(iri)?.try_into()
  564|  70.5k|    }
_RNvXsV_CskWDZ7qu577C_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringEINtNtCscdEvteftVc2_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCs6sLY0PWj8mX_5oxrdf:
  981|  65.0k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  982|  65.0k|        if iri.is_absolute() {
  983|  61.2k|            Ok(Self(iri))
  984|       |        } else {
  985|  3.77k|            Err(IriParseError {
  986|  3.77k|                kind: IriParseErrorKind::NoScheme,
  987|  3.77k|            })
  988|       |        }
  989|  65.0k|    }
_RNvCskWDZ7qu577C_5oxiri17is_url_code_pointCs6sLY0PWj8mX_5oxrdf:
 1573|   156k|fn is_url_code_point(c: char) -> bool {
 1574|   156k|    matches!(c,
 1575|  47.0k|        'a'..='z'
 1576|  46.7k|        | 'A'..='Z'
 1577|  40.6k|        | '0'..='9'
 1578|       |        | '!'
 1579|       |        | '$'
 1580|       |        | '&'
 1581|       |        | '\''
 1582|       |        | '('
 1583|       |        | ')'
 1584|       |        | '*'
 1585|       |        | '+'
 1586|       |        | ','
 1587|       |        | '-'
 1588|       |        | '.'
 1589|       |        | '/'
 1590|       |        | ':'
 1591|       |        | ';'
 1592|       |        | '='
 1593|       |        | '?'
 1594|       |        | '@'
 1595|       |        | '_'
 1596|       |        | '~'
 1597|  2.93k|        | '\u{A0}'..='\u{D7FF}'
 1598|    779|        | '\u{F900}'..='\u{FDCF}'
 1599|    779|        | '\u{FDF0}'..='\u{FFEF}'
 1600|    779|        | '\u{10000}'..='\u{1FFFD}'
 1601|    779|        | '\u{20000}'..='\u{2FFFD}'
 1602|    779|        | '\u{30000}'..='\u{3FFFD}'
 1603|    779|        | '\u{40000}'..='\u{4FFFD}'
 1604|    779|        | '\u{50000}'..='\u{5FFFD}'
 1605|    779|        | '\u{60000}'..='\u{6FFFD}'
 1606|    779|        | '\u{70000}'..='\u{7FFFD}'
 1607|    779|        | '\u{80000}'..='\u{8FFFD}'
 1608|    779|        | '\u{90000}'..='\u{9FFFD}'
 1609|    779|        | '\u{A0000}'..='\u{AFFFD}'
 1610|    779|        | '\u{B0000}'..='\u{BFFFD}'
 1611|    779|        | '\u{C0000}'..='\u{CFFFD}'
 1612|    762|        | '\u{D0000}'..='\u{DFFFD}'
 1613|    762|        | '\u{E1000}'..='\u{EFFFD}'
 1614|       |    )
 1615|   156k|}
_RNvCskWDZ7qu577C_5oxiri23is_url_query_code_pointCs6sLY0PWj8mX_5oxrdf:
 1618|  12.7k|fn is_url_query_code_point(c: char) -> bool {
 1619|  12.7k|    is_url_code_point(c)
 1620|    867|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1621|  12.7k|}
_RNvMs10_CskWDZ7qu577C_5oxiriNtB6_11ParserInput11starts_withCs6sLY0PWj8mX_5oxrdf:
 1169|  76.2k|    fn starts_with(&self, c: char) -> bool {
 1170|  76.2k|        self.value.as_str().starts_with(c)
 1171|  76.2k|    }
_RNvMs10_CskWDZ7qu577C_5oxiriNtB6_11ParserInput4nextCs6sLY0PWj8mX_5oxrdf:
 1154|   389k|    fn next(&mut self) -> Option<char> {
 1155|   389k|        if let Some(head) = self.value.next() {
 1156|   322k|            self.position += head.len_utf8();
 1157|   322k|            Some(head)
 1158|       |        } else {
 1159|  66.8k|            None
 1160|       |        }
 1161|   389k|    }
_RNvMs10_CskWDZ7qu577C_5oxiriNtB6_11ParserInput5frontCs6sLY0PWj8mX_5oxrdf:
 1164|  70.5k|    fn front(&self) -> Option<char> {
 1165|  70.5k|        self.value.clone().next()
 1166|  70.5k|    }
_RNvXsY_CskWDZ7qu577C_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCs6sLY0PWj8mX_5oxrdf:
 1105|   257k|    fn len(&self) -> usize {
 1106|   257k|        self.len
 1107|   257k|    }
_RNvXsY_CskWDZ7qu577C_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCs6sLY0PWj8mX_5oxrdf:
 1085|   312k|    fn push(&mut self, c: char) {
 1086|   312k|        self.len += c.len_utf8();
 1087|   312k|    }
_RNvXsY_CskWDZ7qu577C_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer5clearCs6sLY0PWj8mX_5oxrdf:
 1095|  2.07k|    fn clear(&mut self) {
 1096|  2.07k|        self.len = 0;
 1097|  2.07k|    }
_RNvXsY_CskWDZ7qu577C_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCs6sLY0PWj8mX_5oxrdf:
 1110|   131k|    fn as_str(&self) -> &str {
 1111|   131k|        ""
 1112|   131k|    }
_RNvXsY_CskWDZ7qu577C_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCs6sLY0PWj8mX_5oxrdf:
 1100|  2.06k|    fn truncate(&mut self, new_len: usize) {
 1101|  2.06k|        self.len = new_len;
 1102|  2.06k|    }
_RNvXsW_CskWDZ7qu577C_5oxiriNtB5_13IriParseErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
 1016|  9.29k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1017|  9.29k|        match &self.kind {
 1018|  4.01k|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
 1019|    106|            IriParseErrorKind::InvalidHostCharacter(c) => {
 1020|    106|                write!(f, "Invalid character '{c}' in host")
 1021|       |            }
 1022|    156|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({e})"),
 1023|    110|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{c}'"),
 1024|  3.72k|            IriParseErrorKind::InvalidIriCodePoint(c) => {
 1025|  3.72k|                write!(f, "Invalid IRI code point '{c}'")
 1026|       |            }
 1027|  1.18k|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
 1028|  1.18k|                f,
 1029|  1.18k|                "Invalid IRI percent encoding '{}'",
 1030|  1.18k|                cs.iter().flatten().cloned().collect::<String>()
 1031|  1.18k|            ),
 1032|       |        }
 1033|  9.29k|    }

_RINvCslVPiWcgWUHs_6nquads5parseARShj1_EB2_:
    7|  3.47k|fn parse<'a>(
    8|  3.47k|    chunks: impl IntoIterator<Item = &'a [u8]>,
    9|  3.47k|    unchecked: bool,
   10|  3.47k|) -> (Vec<Quad>, Vec<String>) {
   11|  3.47k|    let mut quads = Vec::new();
   12|  3.47k|    let mut errors = Vec::new();
   13|  3.47k|    let mut parser = NQuadsParser::new().with_quoted_triples();
   14|  3.47k|    if unchecked {
   15|      0|        parser = parser.unchecked();
   16|  3.47k|    }
   17|  3.47k|    let mut reader = parser.parse();
   18|  6.94k|    for chunk in chunks {
   19|  3.47k|        reader.extend_from_slice(chunk);
   20|   135k|        while let Some(result) = reader.read_next() {
   21|   132k|            match result {
   22|  5.95k|                Ok(quad) => quads.push(quad),
   23|   126k|                Err(error) => errors.push(error.to_string()),
   24|       |            }
   25|       |        }
   26|       |    }
   27|  3.47k|    reader.end();
   28|  6.32k|    while let Some(result) = reader.read_next() {
   29|  2.85k|        match result {
   30|    164|            Ok(quad) => quads.push(quad),
   31|  2.68k|            Err(error) => errors.push(error.to_string()),
   32|       |        }
   33|       |    }
   34|  3.47k|    assert!(reader.is_end());
   35|  3.47k|    (quads, errors)
   36|  3.47k|}
_RINvCslVPiWcgWUHs_6nquads5parseINtNtNtCscdEvteftVc2_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_run0EEB2_:
    7|  3.47k|fn parse<'a>(
    8|  3.47k|    chunks: impl IntoIterator<Item = &'a [u8]>,
    9|  3.47k|    unchecked: bool,
   10|  3.47k|) -> (Vec<Quad>, Vec<String>) {
   11|  3.47k|    let mut quads = Vec::new();
   12|  3.47k|    let mut errors = Vec::new();
   13|  3.47k|    let mut parser = NQuadsParser::new().with_quoted_triples();
   14|  3.47k|    if unchecked {
   15|      0|        parser = parser.unchecked();
   16|  3.47k|    }
   17|  3.47k|    let mut reader = parser.parse();
   18|   295k|    for chunk in chunks {
   19|   291k|        reader.extend_from_slice(chunk);
   20|   424k|        while let Some(result) = reader.read_next() {
   21|   132k|            match result {
   22|  5.95k|                Ok(quad) => quads.push(quad),
   23|   126k|                Err(error) => errors.push(error.to_string()),
   24|       |            }
   25|       |        }
   26|       |    }
   27|  3.47k|    reader.end();
   28|  6.32k|    while let Some(result) = reader.read_next() {
   29|  2.85k|        match result {
   30|    164|            Ok(quad) => quads.push(quad),
   31|  2.68k|            Err(error) => errors.push(error.to_string()),
   32|       |        }
   33|       |    }
   34|  3.47k|    assert!(reader.is_end());
   35|  3.47k|    (quads, errors)
   36|  3.47k|}
_RINvCslVPiWcgWUHs_6nquads5parseINtNtNtCscdEvteftVc2_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_runs0_0EEB2_:
    7|    120|fn parse<'a>(
    8|    120|    chunks: impl IntoIterator<Item = &'a [u8]>,
    9|    120|    unchecked: bool,
   10|    120|) -> (Vec<Quad>, Vec<String>) {
   11|    120|    let mut quads = Vec::new();
   12|    120|    let mut errors = Vec::new();
   13|    120|    let mut parser = NQuadsParser::new().with_quoted_triples();
   14|    120|    if unchecked {
   15|    120|        parser = parser.unchecked();
   16|    120|    }
   17|    120|    let mut reader = parser.parse();
   18|  3.60k|    for chunk in chunks {
   19|  3.48k|        reader.extend_from_slice(chunk);
   20|  3.87k|        while let Some(result) = reader.read_next() {
   21|    387|            match result {
   22|    387|                Ok(quad) => quads.push(quad),
   23|      0|                Err(error) => errors.push(error.to_string()),
   24|       |            }
   25|       |        }
   26|       |    }
   27|    120|    reader.end();
   28|    138|    while let Some(result) = reader.read_next() {
   29|     18|        match result {
   30|     18|            Ok(quad) => quads.push(quad),
   31|      0|            Err(error) => errors.push(error.to_string()),
   32|       |        }
   33|       |    }
   34|    120|    assert!(reader.is_end());
   35|    120|    (quads, errors)
   36|    120|}
_RNCNvNvCslVPiWcgWUHs_6nquads1__19___libfuzzer_sys_run0B5_:
   40|  1.03M|    let (quads, errors) = parse(data.split(|c| *c == 0xFF), false);
_RNCNvNvCslVPiWcgWUHs_6nquads1__19___libfuzzer_sys_runs_0B5_:
   46|  1.03M|            .filter(|c| *c != 0xFF)
_RNCNvNvCslVPiWcgWUHs_6nquads1__19___libfuzzer_sys_runs0_0B5_:
   56|  12.2k|        let (quads_unchecked, errors_unchecked) = parse(data.split(|c| *c == 0xFF), true);

_RNvMNtCs6sLY0PWj8mX_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCslVPiWcgWUHs_6nquads:
   87|  4.52k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   88|  4.52k|        BlankNodeRef(match &self.0 {
   89|    891|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   90|  3.63k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   91|  3.63k|                id: *id,
   92|  3.63k|                str: str.as_str(),
   93|  3.63k|            },
   94|       |        })
   95|  4.52k|    }
_RNvMs1_NtCs6sLY0PWj8mX_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCslVPiWcgWUHs_6nquads:
  175|  4.52k|    pub const fn as_str(self) -> &'a str {
  176|  4.52k|        match self.0 {
  177|    891|            BlankNodeRefContent::Named(id) => id,
  178|  3.63k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  179|       |        }
  180|  4.52k|    }
_RNvMs7_NtCs6sLY0PWj8mX_5oxrdf10blank_nodeNtB5_5IdStr6as_strCslVPiWcgWUHs_6nquads:
  261|  3.63k|    fn as_str(&self) -> &str {
  262|  3.63k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  263|  3.63k|        str::from_utf8(&self.0[..len]).unwrap()
  264|  3.63k|    }
_RNvXs2_NtCs6sLY0PWj8mX_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtCslVPiWcgWUHs_6nquads:
  216|  4.52k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  217|  4.52k|        write!(f, "_:{}", self.as_str())
  218|  4.52k|    }
_RINvMNtCs6sLY0PWj8mX_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedReECsKJkp6CE2YE_5oxttl:
   48|  18.2k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   49|  18.2k|        let id = id.into();
   50|  18.2k|        if let Some(numerical_id) = to_integer_id(&id) {
   51|  13.2k|            Self::new_from_unique_id(numerical_id)
   52|       |        } else {
   53|  4.99k|            Self(BlankNodeContent::Named(id))
   54|       |        }
   55|  18.2k|    }
_RNvMNtCs6sLY0PWj8mX_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idCsKJkp6CE2YE_5oxttl:
   61|  13.2k|    pub fn new_from_unique_id(id: u128) -> Self {
   62|  13.2k|        Self(BlankNodeContent::Anonymous {
   63|  13.2k|            id,
   64|  13.2k|            str: IdStr::new(id),
   65|  13.2k|        })
   66|  13.2k|    }
_RNvMs7_NtCs6sLY0PWj8mX_5oxrdf10blank_nodeNtB5_5IdStr3newCsKJkp6CE2YE_5oxttl:
  254|  13.2k|    fn new(id: u128) -> Self {
  255|  13.2k|        let mut str = [0; 32];
  256|  13.2k|        write!(&mut str[..], "{id:x}").unwrap();
  257|  13.2k|        Self(str)
  258|  13.2k|    }
_RNvNtCs6sLY0PWj8mX_5oxrdf10blank_node13to_integer_idCsKJkp6CE2YE_5oxttl:
  327|  18.2k|fn to_integer_id(id: &str) -> Option<u128> {
  328|  18.2k|    let digits = id.as_bytes();
  329|  18.2k|    let mut value: u128 = 0;
  330|  18.2k|    if let None | Some(b'0') = digits.first() {
  331|  3.82k|        return None; // No empty string or leading zeros
  332|  14.3k|    }
  333|  90.8k|    for digit in digits {
  334|  77.5k|        value = value.checked_mul(16)?.checked_add(
  335|  77.5k|            match *digit {
  336|  77.5k|                b'0'..=b'9' => digit - b'0',
  337|  69.8k|                b'a'..=b'f' => digit - b'a' + 10,
  338|  1.10k|                _ => return None,
  339|       |            }
  340|  76.4k|            .into(),
  341|      0|        )?;
  342|       |    }
  343|  13.2k|    Some(value)
  344|  18.2k|}
_RNCNvMs7_NtCs6sLY0PWj8mX_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  262|  26.7k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
_RNvMNtCs6sLY0PWj8mX_5oxrdf10blank_nodeNtB2_9BlankNode6as_refB4_:
   87|    408|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   88|    408|        BlankNodeRef(match &self.0 {
   89|    351|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   90|     57|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   91|     57|                id: *id,
   92|     57|                str: str.as_str(),
   93|     57|            },
   94|       |        })
   95|    408|    }
_RNvMs1_NtCs6sLY0PWj8mX_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strB7_:
  175|    408|    pub const fn as_str(self) -> &'a str {
  176|    408|        match self.0 {
  177|    351|            BlankNodeRefContent::Named(id) => id,
  178|     57|            BlankNodeRefContent::Anonymous { str, .. } => str,
  179|       |        }
  180|    408|    }
_RNvXs2_NtCs6sLY0PWj8mX_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtB7_:
  216|    408|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  217|    408|        write!(f, "_:{}", self.as_str())
  218|    408|    }
_RNvMs7_NtCs6sLY0PWj8mX_5oxrdf10blank_nodeNtB5_5IdStr6as_strB7_:
  261|     57|    fn as_str(&self) -> &str {
  262|     57|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  263|     57|        str::from_utf8(&self.0[..len]).unwrap()
  264|     57|    }

_RNvMNtCs6sLY0PWj8mX_5oxrdf7literalNtB2_7Literal6as_refCslVPiWcgWUHs_6nquads:
  131|    924|    pub fn as_ref(&self) -> LiteralRef<'_> {
  132|    924|        LiteralRef(match &self.0 {
  133|    518|            LiteralContent::String(value) => LiteralRefContent::String(value),
  134|    275|            LiteralContent::LanguageTaggedString { value, language } => {
  135|    275|                LiteralRefContent::LanguageTaggedString { value, language }
  136|       |            }
  137|    131|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  138|    131|                value,
  139|    131|                datatype: datatype.as_ref(),
  140|    131|            },
  141|       |        })
  142|    924|    }
_RNvXsu_NtCs6sLY0PWj8mX_5oxrdf7literalNtB5_10LiteralRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtCslVPiWcgWUHs_6nquads:
  567|    924|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  568|    924|        match self.0 {
  569|    518|            LiteralRefContent::String(value) => print_quoted_str(value, f),
  570|    275|            LiteralRefContent::LanguageTaggedString { value, language } => {
  571|    275|                print_quoted_str(value, f)?;
  572|    275|                write!(f, "@{language}")
  573|       |            }
  574|    131|            LiteralRefContent::TypedLiteral { value, datatype } => {
  575|    131|                print_quoted_str(value, f)?;
  576|    131|                write!(f, "^^{datatype}")
  577|       |            }
  578|       |        }
  579|    924|    }
_RINvMNtCs6sLY0PWj8mX_5oxrdf7literalNtB3_7Literal18new_simple_literalRNtNtCs3OstG5Tqy1X_5alloc6string6StringECsKJkp6CE2YE_5oxttl:
   49|     70|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   50|     70|        Self(LiteralContent::String(value.into()))
   51|     70|    }
_RINvMNtCs6sLY0PWj8mX_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   49|  2.24k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   50|  2.24k|        Self(LiteralContent::String(value.into()))
   51|  2.24k|    }
_RINvMNtCs6sLY0PWj8mX_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   55|    528|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   56|    528|        let value = value.into();
   57|    528|        let datatype = datatype.into();
   58|    528|        Self(if datatype == xsd::STRING {
   59|      0|            LiteralContent::String(value)
   60|       |        } else {
   61|    528|            LiteralContent::TypedLiteral { value, datatype }
   62|       |        })
   63|    528|    }
_RINvMNtCs6sLY0PWj8mX_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringB1n_EB5_:
   87|  1.37k|    pub fn new_language_tagged_literal_unchecked(
   88|  1.37k|        value: impl Into<String>,
   89|  1.37k|        language: impl Into<String>,
   90|  1.37k|    ) -> Self {
   91|  1.37k|        Self(LiteralContent::LanguageTaggedString {
   92|  1.37k|            value: value.into(),
   93|  1.37k|            language: language.into(),
   94|  1.37k|        })
   95|  1.37k|    }
_RINvNtCs6sLY0PWj8mX_5oxrdf7literal16print_quoted_strNtNtCscdEvteftVc2_4core3fmt9FormatterEB4_:
  618|  1.08k|pub fn print_quoted_str(string: &str, f: &mut impl Write) -> fmt::Result {
  619|  1.08k|    f.write_char('"')?;
  620|  29.8k|    for c in string.chars() {
  621|  29.8k|        match c {
  622|    844|            '\u{08}' => f.write_str("\\b"),
  623|    206|            '\t' => f.write_str("\\t"),
  624|  1.41k|            '\n' => f.write_str("\\n"),
  625|    195|            '\u{0C}' => f.write_str("\\f"),
  626|    410|            '\r' => f.write_str("\\r"),
  627|     69|            '"' => f.write_str("\\\""),
  628|     66|            '\\' => f.write_str("\\\\"),
  629|  26.6k|            '\0'..='\u{1F}' | '\u{7F}' => write!(f, "\\u{:04X}", u32::from(c)),
  630|  6.71k|            _ => f.write_char(c),
  631|      0|        }?;
  632|       |    }
  633|  1.08k|    f.write_char('"')
  634|  1.08k|}
_RNvMNtCs6sLY0PWj8mX_5oxrdf7literalNtB2_7Literal6as_refB4_:
  131|    160|    pub fn as_ref(&self) -> LiteralRef<'_> {
  132|    160|        LiteralRef(match &self.0 {
  133|    160|            LiteralContent::String(value) => LiteralRefContent::String(value),
  134|      0|            LiteralContent::LanguageTaggedString { value, language } => {
  135|      0|                LiteralRefContent::LanguageTaggedString { value, language }
  136|       |            }
  137|      0|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  138|      0|                value,
  139|      0|                datatype: datatype.as_ref(),
  140|      0|            },
  141|       |        })
  142|    160|    }
_RNvXsu_NtCs6sLY0PWj8mX_5oxrdf7literalNtB5_10LiteralRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtB7_:
  567|    160|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  568|    160|        match self.0 {
  569|    160|            LiteralRefContent::String(value) => print_quoted_str(value, f),
  570|      0|            LiteralRefContent::LanguageTaggedString { value, language } => {
  571|      0|                print_quoted_str(value, f)?;
  572|      0|                write!(f, "@{language}")
  573|       |            }
  574|      0|            LiteralRefContent::TypedLiteral { value, datatype } => {
  575|      0|                print_quoted_str(value, f)?;
  576|      0|                write!(f, "^^{datatype}")
  577|       |            }
  578|       |        }
  579|    160|    }

_RNvMNtCs6sLY0PWj8mX_5oxrdf10named_nodeNtB2_9NamedNode6as_refCslVPiWcgWUHs_6nquads:
   54|  14.6k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  14.6k|        NamedNodeRef::new_unchecked(&self.iri)
   56|  14.6k|    }
_RNvMs4_NtCs6sLY0PWj8mX_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCslVPiWcgWUHs_6nquads:
  128|  14.6k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  14.6k|        Self { iri }
  130|  14.6k|    }
_RNvMs4_NtCs6sLY0PWj8mX_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCslVPiWcgWUHs_6nquads:
  133|  14.6k|    pub const fn as_str(self) -> &'a str {
  134|  14.6k|        self.iri
  135|  14.6k|    }
_RNvXs5_NtCs6sLY0PWj8mX_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtCslVPiWcgWUHs_6nquads:
  145|  14.6k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|  14.6k|        write!(f, "<{}>", self.as_str())
  147|  14.6k|    }
_RINvMNtCs6sLY0PWj8mX_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   39|  58.0k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  58.0k|        Self { iri: iri.into() }
   41|  58.0k|    }
_RNvMNtCs6sLY0PWj8mX_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|    528|    pub fn as_str(&self) -> &str {
   45|    528|        self.iri.as_str()
   46|    528|    }
_RNvMNtCs6sLY0PWj8mX_5oxrdf10named_nodeNtB2_9NamedNode6as_refB4_:
   54|  1.44k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  1.44k|        NamedNodeRef::new_unchecked(&self.iri)
   56|  1.44k|    }
_RNvMs4_NtCs6sLY0PWj8mX_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedB7_:
  128|  1.44k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  1.44k|        Self { iri }
  130|  1.44k|    }
_RNvMs4_NtCs6sLY0PWj8mX_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|  1.97k|    pub const fn as_str(self) -> &'a str {
  134|  1.97k|        self.iri
  135|  1.97k|    }
_RNvXs5_NtCs6sLY0PWj8mX_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtB7_:
  145|  1.44k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|  1.44k|        write!(f, "<{}>", self.as_str())
  147|  1.44k|    }
_RNvXs9_NtCs6sLY0PWj8mX_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCscdEvteftVc2_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|    528|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|    528|        self.as_str() == other.as_str()
  175|    528|    }

_RNvMs18_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB6_9GraphName6as_refCslVPiWcgWUHs_6nquads:
  883|  6.11k|    pub fn as_ref(&self) -> GraphNameRef<'_> {
  884|  6.11k|        match self {
  885|    775|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.as_ref()),
  886|  1.49k|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.as_ref()),
  887|  3.84k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  888|       |        }
  889|  6.11k|    }
_RNvMs1g_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB6_12GraphNameRef16is_default_graphCslVPiWcgWUHs_6nquads:
  966|  6.11k|    pub fn is_default_graph(&self) -> bool {
  967|  6.11k|        matches!(self, Self::DefaultGraph)
  968|  6.11k|    }
_RNvMs1q_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB6_4Quad6as_refCslVPiWcgWUHs_6nquads:
 1100|  6.11k|    pub fn as_ref(&self) -> QuadRef<'_> {
 1101|  6.11k|        QuadRef {
 1102|  6.11k|            subject: self.subject.as_ref(),
 1103|  6.11k|            predicate: self.predicate.as_ref(),
 1104|  6.11k|            object: self.object.as_ref(),
 1105|  6.11k|            graph_name: self.graph_name.as_ref(),
 1106|  6.11k|        }
 1107|  6.11k|    }
_RNvMsc_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB5_7Subject6as_refCslVPiWcgWUHs_6nquads:
  181|  6.11k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  6.11k|        match self {
  183|  4.82k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|    813|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|    480|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  6.11k|    }
_RNvMsy_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB5_4Term6as_refCslVPiWcgWUHs_6nquads:
  417|  6.11k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|  6.11k|        match self {
  419|  2.81k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|  2.22k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|    924|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|    152|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|  6.11k|    }
_RNvXs1h_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB6_12GraphNameRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtCslVPiWcgWUHs_6nquads:
  982|  2.26k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  983|  2.26k|        match self {
  984|    775|            Self::NamedNode(node) => node.fmt(f),
  985|  1.49k|            Self::BlankNode(node) => node.fmt(f),
  986|      0|            Self::DefaultGraph => f.write_str("DEFAULT"),
  987|       |        }
  988|  2.26k|    }
_RNvXs1u_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB6_7QuadRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtCslVPiWcgWUHs_6nquads:
 1190|  6.11k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1191|  6.11k|        if self.graph_name.is_default_graph() {
 1192|  3.84k|            write!(f, "{} {} {}", self.subject, self.predicate, self.object)
 1193|       |        } else {
 1194|  2.26k|            write!(
 1195|  2.26k|                f,
 1196|  2.26k|                "{} {} {} {}",
 1197|  2.26k|                self.subject, self.predicate, self.object, self.graph_name
 1198|  2.26k|            )
 1199|       |        }
 1200|  6.11k|    }
_RNvXs1w_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB6_7QuadRefINtNtCscdEvteftVc2_4core7convert4FromRNtB6_4QuadE4fromCslVPiWcgWUHs_6nquads:
 1216|  6.11k|    fn from(quad: &'a Quad) -> Self {
 1217|  6.11k|        quad.as_ref()
 1218|  6.11k|    }
_RNvXsO_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB5_7TermRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtCslVPiWcgWUHs_6nquads:
  584|  6.11k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  585|  6.11k|        match self {
  586|  2.81k|            Self::NamedNode(node) => node.fmt(f),
  587|  2.22k|            Self::BlankNode(node) => node.fmt(f),
  588|    924|            Self::Literal(literal) => literal.fmt(f),
  589|       |            #[cfg(feature = "rdf-star")]
  590|    152|            Self::Triple(triple) => {
  591|    152|                write!(f, "<<{triple}>>")
  592|       |            }
  593|       |        }
  594|  6.11k|    }
_RNvXso_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB5_10SubjectRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtCslVPiWcgWUHs_6nquads:
  306|  6.11k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  307|  6.11k|        match self {
  308|  4.82k|            Self::NamedNode(node) => node.fmt(f),
  309|    813|            Self::BlankNode(node) => node.fmt(f),
  310|       |            #[cfg(feature = "rdf-star")]
  311|    480|            Self::Triple(triple) => write!(f, "<<{triple}>>"),
  312|       |        }
  313|  6.11k|    }
_RNvXs1a_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB6_9GraphNameINtNtCscdEvteftVc2_4core7convert4FromNtNtB8_10named_node9NamedNodeE4fromCsKJkp6CE2YE_5oxttl:
  901|  2.32k|    fn from(node: NamedNode) -> Self {
  902|  2.32k|        Self::NamedNode(node)
  903|  2.32k|    }
_RNvXs1c_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB6_9GraphNameINtNtCscdEvteftVc2_4core7convert4FromNtNtB8_10blank_node9BlankNodeE4fromCsKJkp6CE2YE_5oxttl:
  915|  4.61k|    fn from(node: BlankNode) -> Self {
  916|  4.61k|        Self::BlankNode(node)
  917|  4.61k|    }
_RNvMsc_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB5_7Subject6as_refB7_:
  181|    689|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|    689|        match self {
  183|    689|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|      0|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|      0|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|    689|    }
_RNvXse_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|  21.5k|    fn from(node: NamedNode) -> Self {
  201|  21.5k|        Self::NamedNode(node)
  202|  21.5k|    }
_RNvXsg_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|  5.00k|    fn from(node: BlankNode) -> Self {
  215|  5.00k|        Self::BlankNode(node)
  216|  5.00k|    }
_RNvXsi_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtB5_6TripleE4fromB7_:
  229|  1.96k|    fn from(node: Triple) -> Self {
  230|  1.96k|        Self::Triple(Box::new(node))
  231|  1.96k|    }
_RNvXso_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB5_10SubjectRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtB7_:
  306|    689|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  307|    689|        match self {
  308|    689|            Self::NamedNode(node) => node.fmt(f),
  309|      0|            Self::BlankNode(node) => node.fmt(f),
  310|       |            #[cfg(feature = "rdf-star")]
  311|      0|            Self::Triple(triple) => write!(f, "<<{triple}>>"),
  312|       |        }
  313|    689|    }
_RNvMsy_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB5_4Term6as_refB7_:
  417|    689|    pub fn as_ref(&self) -> TermRef<'_> {
  418|    689|        match self {
  419|     64|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|    408|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|    160|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|     57|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|    689|    }
_RNvXsA_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|  9.10k|    fn from(node: NamedNode) -> Self {
  438|  9.10k|        Self::NamedNode(node)
  439|  9.10k|    }
_RNvXsC_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  451|  8.58k|    fn from(node: BlankNode) -> Self {
  452|  8.58k|        Self::BlankNode(node)
  453|  8.58k|    }
_RNvXsE_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  465|  4.22k|    fn from(literal: Literal) -> Self {
  466|  4.22k|        Self::Literal(literal)
  467|  4.22k|    }
_RNvXsG_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtB5_6TripleE4fromB7_:
  480|    781|    fn from(triple: Triple) -> Self {
  481|    781|        Self::Triple(Box::new(triple))
  482|    781|    }
_RNvXsO_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB5_7TermRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtB7_:
  584|    689|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  585|    689|        match self {
  586|     64|            Self::NamedNode(node) => node.fmt(f),
  587|    408|            Self::BlankNode(node) => node.fmt(f),
  588|    160|            Self::Literal(literal) => literal.fmt(f),
  589|       |            #[cfg(feature = "rdf-star")]
  590|     57|            Self::Triple(triple) => {
  591|     57|                write!(f, "<<{triple}>>")
  592|       |            }
  593|       |        }
  594|    689|    }
_RNvMs12_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB6_6Triple6as_refB8_:
  753|    689|    pub fn as_ref(&self) -> TripleRef<'_> {
  754|    689|        TripleRef {
  755|    689|            subject: self.subject.as_ref(),
  756|    689|            predicate: self.predicate.as_ref(),
  757|    689|            object: self.object.as_ref(),
  758|    689|        }
  759|    689|    }
_RNvXs13_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB6_6TripleNtNtCscdEvteftVc2_4core3fmt7Display3fmtB8_:
  764|    689|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  765|    689|        self.as_ref().fmt(f)
  766|    689|    }
_RNvXs15_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB6_9TripleRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtB8_:
  837|    689|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  838|    689|        write!(f, "{} {} {}", self.subject, self.predicate, self.object)
  839|    689|    }

_RNCNvMs_NtCsKJkp6CE2YE_5oxttl5lexerNtB6_7N3Lexer9parse_iris_0B8_:
  230|  9.29k|                    .map_err(|e| (position, e.to_string()))?
_RNCNvMs_NtCsKJkp6CE2YE_5oxttl5lexerNtB6_7N3Lexer26recognize_pname_or_keyword0B8_:
  319|  5.22k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  320|  5.22k|                prefix: pn_prefix,
  321|  5.22k|                local,
  322|  5.22k|                might_be_invalid_iri,
  323|  5.22k|            }),
_RNCNvMs_NtCsKJkp6CE2YE_5oxttl5lexerNtB6_7N3Lexer18recognize_variable0B8_:
  336|  3.47k|            result.and_then(|(name, _)| {
  337|  3.47k|                if name.is_empty() {
  338|  2.33k|                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  339|       |                } else {
  340|  1.13k|                    Ok(N3Token::Variable(name))
  341|       |                }
  342|  3.47k|            }),
_RNCNvMs_NtCsKJkp6CE2YE_5oxttl5lexerNtB6_7N3Lexer14parse_lang_tag0B8_:
  581|  3.92k|                .map_err(|e| (position.clone(), e.to_string()))?
_RNCNvMs_NtCsKJkp6CE2YE_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_char0B8_:
  806|    562|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  807|    562|            (
  808|    562|                position..position + len + 2,
  809|    562|                format!(
  810|    562|                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  811|    562|                ),
  812|    562|            )
  813|    562|        })?;
_RNCNvMs_NtCsKJkp6CE2YE_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_chars_0B8_:
  814|    706|        let c = char::from_u32(codepoint).ok_or_else(|| {
  815|    706|            (
  816|    706|                position..position + len +2,
  817|    706|                format!(
  818|    706|                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  819|    706|                ),
  820|    706|            )
  821|    706|        })?;
_RNCNvMs_NtCsKJkp6CE2YE_5oxttl5lexerNtB6_7N3Lexer22recognize_unicode_char0B8_:
  886|  3.38k|                .map(|c| (c, bytes_needed + 1))
_RNCNvNtCsKJkp6CE2YE_5oxttl5lexer13str_from_utf80B5_:
  958|  1.26k|    str::from_utf8(data).map_err(|e| {
  959|  1.26k|        (
  960|  1.26k|            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  961|  1.26k|            format!("Invalid UTF-8: {e}"),
  962|  1.26k|        )
  963|  1.26k|            .into()
  964|  1.26k|    })
_RNCNvNtCsKJkp6CE2YE_5oxttl5lexer16string_from_utf80B5_:
  968|  2.25k|    String::from_utf8(data).map_err(|e| {
  969|  2.25k|        (
  970|  2.25k|            range.start + e.utf8_error().valid_up_to()
  971|  2.25k|                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  972|  2.25k|            format!("Invalid UTF-8: {e}"),
  973|  2.25k|        )
  974|  2.25k|            .into()
  975|  2.25k|    })
_RNvXNtCsKJkp6CE2YE_5oxttl5lexerNtB2_7N3LexerNtNtNtB4_7toolkit5lexer15TokenRecognizer20recognize_next_token:
   55|   829k|    fn recognize_next_token<'a>(
   56|   829k|        &mut self,
   57|   829k|        data: &'a [u8],
   58|   829k|        is_ending: bool,
   59|   829k|        options: &N3LexerOptions,
   60|   829k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
   61|   829k|        match *data.first()? {
   62|   257k|            b'<' => match *data.get(1)? {
   63|  25.3k|                b'<' => Some((2, Ok(N3Token::Punctuation("<<")))),
   64|    630|                b'=' if self.mode == N3LexerMode::N3 => {
   65|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   66|      0|                        Some(if let Ok(result) = result {
   67|      0|                            (consumed, Ok(result))
   68|       |                        } else {
   69|      0|                            (2, Ok(N3Token::Punctuation("<=")))
   70|       |                        })
   71|      0|                    } else if is_ending {
   72|      0|                        Some((2, Ok(N3Token::Punctuation("<="))))
   73|       |                    } else {
   74|      0|                        None
   75|       |                    }
   76|       |                }
   77|    624|                b'-' if self.mode == N3LexerMode::N3 => {
   78|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   79|      0|                        Some(if let Ok(result) = result {
   80|      0|                            (consumed, Ok(result))
   81|       |                        } else {
   82|      0|                            (2, Ok(N3Token::Punctuation("<-")))
   83|       |                        })
   84|      0|                    } else if is_ending {
   85|      0|                        Some((2, Ok(N3Token::Punctuation("<-"))))
   86|       |                    } else {
   87|      0|                        None
   88|       |                    }
   89|       |                }
   90|   226k|                _ => self.recognize_iri(data, options),
   91|       |            },
   92|       |            b'>' => {
   93|  17.3k|                if *data.get(1)? == b'>' {
   94|  7.44k|                    Some((2, Ok(N3Token::Punctuation(">>"))))
   95|       |                } else {
   96|  8.34k|                    Some((1, Ok(N3Token::Punctuation(">"))))
   97|       |                }
   98|       |            }
   99|  64.5k|            b'_' => match data.get(1)? {
  100|  48.8k|                b':' => Self::recognize_blank_node_label(data),
  101|  12.5k|                c => Some((
  102|  12.5k|                    1,
  103|  12.5k|                    Err((0, format!("Unexpected character '{}'", char::from(*c))).into()),
  104|  12.5k|                )),
  105|       |            },
  106|       |            b'"' => {
  107|  39.9k|                if self.mode != N3LexerMode::NTriples
  108|      0|                    && *data.get(1)? == b'"'
  109|      0|                    && *data.get(2)? == b'"'
  110|       |                {
  111|      0|                    Self::recognize_long_string(data, b'"')
  112|       |                } else {
  113|  39.9k|                    Self::recognize_string(data, b'"')
  114|       |                }
  115|       |            }
  116|  1.23k|            b'\'' if self.mode != N3LexerMode::NTriples => {
  117|      0|                if *data.get(1)? == b'\'' && *data.get(2)? == b'\'' {
  118|      0|                    Self::recognize_long_string(data, b'\'')
  119|       |                } else {
  120|      0|                    Self::recognize_string(data, b'\'')
  121|       |                }
  122|       |            }
  123|  26.0k|            b'@' => self.recognize_lang_tag(data),
  124|  69.1k|            b'.' => match data.get(1) {
  125|  14.2k|                Some(b'0'..=b'9') => Self::recognize_number(data),
  126|  65.1k|                Some(_) => Some((1, Ok(N3Token::Punctuation(".")))),
  127|  2.38k|                None => is_ending.then_some((1, Ok(N3Token::Punctuation(".")))),
  128|       |            },
  129|       |            b'^' => {
  130|  8.72k|                if *data.get(1)? == b'^' {
  131|  3.97k|                    Some((2, Ok(N3Token::Punctuation("^^"))))
  132|       |                } else {
  133|  3.91k|                    Some((1, Ok(N3Token::Punctuation("^"))))
  134|       |                }
  135|       |            }
  136|  2.07k|            b'(' => Some((1, Ok(N3Token::Punctuation("(")))),
  137|  2.23k|            b')' => Some((1, Ok(N3Token::Punctuation(")")))),
  138|  1.31k|            b'[' => Some((1, Ok(N3Token::Punctuation("[")))),
  139|    706|            b']' => Some((1, Ok(N3Token::Punctuation("]")))),
  140|       |            b'{' => {
  141|  1.13k|                if *data.get(1)? == b'|' {
  142|    194|                    Some((2, Ok(N3Token::Punctuation("{|"))))
  143|       |                } else {
  144|    636|                    Some((1, Ok(N3Token::Punctuation("{"))))
  145|       |                }
  146|       |            }
  147|  7.65k|            b'}' => Some((1, Ok(N3Token::Punctuation("}")))),
  148|  4.64k|            b',' => Some((1, Ok(N3Token::Punctuation(",")))),
  149|  1.47k|            b';' => Some((1, Ok(N3Token::Punctuation(";")))),
  150|  1.21k|            b'!' => Some((1, Ok(N3Token::Punctuation("!")))),
  151|       |            b'|' => {
  152|  1.44k|                if *data.get(1)? == b'}' {
  153|    200|                    Some((2, Ok(N3Token::Punctuation("|}"))))
  154|       |                } else {
  155|    986|                    Some((1, Ok(N3Token::Punctuation("|"))))
  156|       |                }
  157|       |            }
  158|       |            b'=' => {
  159|  3.74k|                if *data.get(1)? == b'>' {
  160|    290|                    Some((2, Ok(N3Token::Punctuation("=>"))))
  161|       |                } else {
  162|  2.92k|                    Some((1, Ok(N3Token::Punctuation("="))))
  163|       |                }
  164|       |            }
  165|   149k|            b'0'..=b'9' | b'+' | b'-' => Self::recognize_number(data),
  166|  6.04k|            b'?' => self.recognize_variable(data, is_ending),
  167|   223k|            _ => self.recognize_pname_or_keyword(data, is_ending),
  168|       |        }
  169|   829k|    }
_RNvMs_NtCsKJkp6CE2YE_5oxttl5lexerNtB4_7N3Lexer3new:
  173|  10.5k|    pub fn new(mode: N3LexerMode, unchecked: bool) -> Self {
  174|  10.5k|        Self { mode, unchecked }
  175|  10.5k|    }
_RNvMs_NtCsKJkp6CE2YE_5oxttl5lexerNtB4_7N3Lexer13recognize_iri:
  177|   226k|    fn recognize_iri(
  178|   226k|        &self,
  179|   226k|        data: &[u8],
  180|   226k|        options: &N3LexerOptions,
  181|   226k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  182|   226k|        // [18] IRIREF  ::=  '<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
  183|   226k|        let mut string = Vec::new();
  184|   226k|        let mut i = 1;
  185|       |        loop {
  186|   229k|            let end = memchr2(b'>', b'\\', &data[i..])?;
  187|  80.1k|            string.extend_from_slice(&data[i..i + end]);
  188|  80.1k|            i += end;
  189|  80.1k|            match data[i] {
  190|       |                b'>' => {
  191|       |                    #[allow(clippy::range_plus_one)]
  192|  73.7k|                    return Some((i + 1, self.parse_iri(string, 0..i + 1, options)));
  193|       |                }
  194|       |                b'\\' => {
  195|  6.44k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, false)?;
  196|  3.96k|                    i += additional + 1;
  197|  3.96k|                    match c {
  198|  2.66k|                        Ok(c) => {
  199|  2.66k|                            let mut buf = [0; 4];
  200|  2.66k|                            string.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  201|  2.66k|                        }
  202|  1.30k|                        Err(e) => return Some((i, Err(e))),
  203|       |                    }
  204|       |                }
  205|      0|                _ => unreachable!(),
  206|       |            }
  207|       |        }
  208|   226k|    }
_RNvMs_NtCsKJkp6CE2YE_5oxttl5lexerNtB4_7N3Lexer9parse_iri:
  210|  73.7k|    fn parse_iri(
  211|  73.7k|        &self,
  212|  73.7k|        iri: Vec<u8>,
  213|  73.7k|        position: Range<usize>,
  214|  73.7k|        options: &N3LexerOptions,
  215|  73.7k|    ) -> Result<N3Token<'static>, TokenRecognizerError> {
  216|  73.7k|        let iri = string_from_utf8(iri, position.clone())?;
  217|       |        Ok(N3Token::IriRef(
  218|  71.4k|            if let Some(base_iri) = options.base_iri.as_ref() {
  219|      0|                if self.unchecked {
  220|      0|                    base_iri.resolve_unchecked(&iri)
  221|       |                } else {
  222|      0|                    base_iri.resolve(&iri)
  223|       |                }
  224|      0|                .map_err(|e| (position, e.to_string()))?
  225|      0|                .into_inner()
  226|  71.4k|            } else if self.unchecked {
  227|    955|                iri
  228|       |            } else {
  229|  70.5k|                Iri::parse(iri)
  230|  70.5k|                    .map_err(|e| (position, e.to_string()))?
  231|  61.2k|                    .into_inner()
  232|       |            },
  233|       |        ))
  234|  73.7k|    }
_RNvMs_NtCsKJkp6CE2YE_5oxttl5lexerNtB4_7N3Lexer26recognize_pname_or_keyword:
  236|   223k|    fn recognize_pname_or_keyword<'a>(
  237|   223k|        &self,
  238|   223k|        data: &'a [u8],
  239|   223k|        is_ending: bool,
  240|   223k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  241|   223k|        // [139s]  PNAME_NS   ::=  PN_PREFIX? ':'
  242|   223k|        // [140s]  PNAME_LN   ::=  PNAME_NS PN_LOCAL
  243|   223k|        // [167s]  PN_PREFIX  ::=  PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
  244|   223k|        let mut i = 0;
  245|       |        loop {
  246|   388k|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  247|   374k|                match r {
  248|   303k|                    Ok((c, consumed)) => {
  249|   303k|                        if c == ':' {
  250|  24.0k|                            i += consumed;
  251|  24.0k|                            break;
  252|   279k|                        } else if i == 0 {
  253|   143k|                            if !Self::is_possible_pn_chars_base(c) {
  254|  96.1k|                                return Some((
  255|  96.1k|                                    consumed,
  256|  96.1k|                                    Err((
  257|  96.1k|                                        0..consumed,
  258|  96.1k|                                        format!(
  259|  96.1k|                                            "'{c}' is not allowed at the beginning of a prefix name"
  260|  96.1k|                                        ),
  261|  96.1k|                                    )
  262|  96.1k|                                        .into()),
  263|  96.1k|                                ));
  264|  47.6k|                            }
  265|  47.6k|                            i += consumed;
  266|   136k|                        } else if Self::is_possible_pn_chars(c) || c == '.' {
  267|   117k|                            i += consumed;
  268|   117k|                        } else {
  269|  23.0k|                            while data[..i].ends_with(b".") {
  270|  4.32k|                                i -= 1;
  271|  4.32k|                            }
  272|  18.7k|                            return Some((
  273|  18.7k|                                i,
  274|  18.7k|                                str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  275|  18.7k|                            ));
  276|       |                        }
  277|       |                    }
  278|  70.4k|                    Err(e) => return Some((e.location.end, Err(e))),
  279|       |                }
  280|  14.2k|            } else if is_ending {
  281|  4.08k|                while data[..i].ends_with(b".") {
  282|  3.28k|                    i -= 1;
  283|  3.28k|                }
  284|    796|                return Some(if i == 0 {
  285|    244|                    (
  286|    244|                        1,
  287|    244|                        Err((0..1, format!("Unexpected byte {}", data[0])).into()),
  288|    244|                    )
  289|       |                } else {
  290|    552|                    (
  291|    552|                        i,
  292|    552|                        str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  293|    552|                    )
  294|       |                });
  295|       |            } else {
  296|  13.4k|                return None;
  297|       |            }
  298|       |        }
  299|  24.0k|        let pn_prefix = match str_from_utf8(&data[..i - 1], 0..i - 1) {
  300|  24.0k|            Ok(pn_prefix) => pn_prefix,
  301|      0|            Err(e) => return Some((i, Err(e))),
  302|       |        };
  303|  24.0k|        if pn_prefix.ends_with('.') {
  304|    270|            return Some((
  305|    270|                i,
  306|    270|                Err((
  307|    270|                    0..i,
  308|    270|                    format!(
  309|    270|                        "'{pn_prefix}' is not a valid prefix: prefixes are not allowed to end with '.'"),
  310|    270|                )
  311|    270|                    .into()),
  312|    270|            ));
  313|  23.8k|        }
  314|       |
  315|  7.22k|        let (consumed, pn_local_result) =
  316|  23.8k|            self.recognize_optional_pn_local(&data[i..], is_ending)?;
  317|  7.22k|        Some((
  318|  7.22k|            consumed + i,
  319|  7.22k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  320|       |                prefix: pn_prefix,
  321|       |                local,
  322|       |                might_be_invalid_iri,
  323|  7.22k|            }),
  324|  7.22k|        ))
  325|   223k|    }
_RNvMs_NtCsKJkp6CE2YE_5oxttl5lexerNtB4_7N3Lexer18recognize_variable:
  327|  6.04k|    fn recognize_variable<'a>(
  328|  6.04k|        &self,
  329|  6.04k|        data: &'a [u8],
  330|  6.04k|        is_ending: bool,
  331|  6.04k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  332|       |        // [36]  QUICK_VAR_NAME  ::=  "?" PN_LOCAL
  333|  6.04k|        let (consumed, result) = self.recognize_optional_pn_local(&data[1..], is_ending)?;
  334|  4.08k|        Some((
  335|  4.08k|            consumed + 1,
  336|  4.08k|            result.and_then(|(name, _)| {
  337|       |                if name.is_empty() {
  338|       |                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  339|       |                } else {
  340|       |                    Ok(N3Token::Variable(name))
  341|       |                }
  342|  4.08k|            }),
  343|  4.08k|        ))
  344|  6.04k|    }
_RNvMs_NtCsKJkp6CE2YE_5oxttl5lexerNtB4_7N3Lexer27recognize_optional_pn_local:
  346|  29.8k|    fn recognize_optional_pn_local<'a>(
  347|  29.8k|        &self,
  348|  29.8k|        data: &'a [u8],
  349|  29.8k|        is_ending: bool,
  350|  29.8k|    ) -> Option<(usize, Result<(Cow<'a, str>, bool), TokenRecognizerError>)> {
  351|  29.8k|        // [168s]  PN_LOCAL  ::=  (PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
  352|  29.8k|        let mut i = 0;
  353|  29.8k|        let mut buffer = None; // Buffer if there are some escaped characters
  354|  29.8k|        let mut position_that_is_already_in_buffer = 0;
  355|  29.8k|        let mut might_be_invalid_iri = false;
  356|  29.8k|        let mut ends_with_unescaped_dot = 0;
  357|       |        loop {
  358|   127k|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  359|   110k|                match r {
  360|   108k|                    Ok((c, consumed)) => {
  361|   108k|                        if c == '%' {
  362|  2.31k|                            i += 1;
  363|  2.31k|                            let a = char::from(*data.get(i)?);
  364|  1.86k|                            i += 1;
  365|  1.86k|                            let b = char::from(*data.get(i)?);
  366|  1.52k|                            if !a.is_ascii_hexdigit() || !b.is_ascii_hexdigit() {
  367|    734|                                return Some((i + 1, Err((
  368|    734|                                    i - 2..=i, format!("escapes in IRIs should be % followed by two hexadecimal characters, found '%{a}{b}'")
  369|    734|                                ).into())));
  370|    787|                            }
  371|    787|                            i += 1;
  372|    787|                            ends_with_unescaped_dot = 0;
  373|   106k|                        } else if c == '\\' {
  374|  13.7k|                            i += 1;
  375|  13.7k|                            let a = char::from(*data.get(i)?);
  376|  12.4k|                            if self.unchecked
  377|  3.78k|                                || matches!(
  378|  12.4k|                                    a,
  379|       |                                    '_' | '~'
  380|       |                                        | '.'
  381|       |                                        | '-'
  382|       |                                        | '!'
  383|       |                                        | '$'
  384|       |                                        | '&'
  385|       |                                        | '\''
  386|       |                                        | '('
  387|       |                                        | ')'
  388|       |                                        | '*'
  389|       |                                        | '+'
  390|       |                                        | ','
  391|       |                                        | ';'
  392|       |                                        | '='
  393|       |                                )
  394|  8.70k|                            {
  395|  8.70k|                                // ok to escape
  396|  8.70k|                            } else if matches!(a, '/' | '?' | '#' | '@' | '%') {
  397|  3.48k|                                // ok to escape but requires IRI validation
  398|  3.48k|                                might_be_invalid_iri = true;
  399|  3.48k|                            } else {
  400|    294|                                return Some((i + 1, Err((
  401|    294|                                    i..=i, format!("The character that are allowed to be escaped in IRIs are _~.-!$&'()*+,;=/?#@%, found '{a}'")
  402|    294|                                ).into())));
  403|       |                            }
  404|  12.1k|                            let buffer = buffer.get_or_insert_with(String::new);
  405|  12.1k|                            // We add the missing bytes
  406|  12.1k|                            if i - position_that_is_already_in_buffer > 1 {
  407|  6.66k|                                buffer.push_str(
  408|  6.66k|                                    match str_from_utf8(
  409|  6.66k|                                        &data[position_that_is_already_in_buffer..i - 1],
  410|  6.66k|                                        position_that_is_already_in_buffer..i - 1,
  411|  6.66k|                                    ) {
  412|  6.66k|                                        Ok(data) => data,
  413|      0|                                        Err(e) => return Some((i, Err(e))),
  414|       |                                    },
  415|       |                                )
  416|  5.52k|                            }
  417|  12.1k|                            buffer.push(a);
  418|  12.1k|                            i += 1;
  419|  12.1k|                            position_that_is_already_in_buffer = i;
  420|  12.1k|                            ends_with_unescaped_dot = 0;
  421|  92.6k|                        } else if i == 0 {
  422|  17.7k|                            if !(Self::is_possible_pn_chars_u(c) || c == ':' || c.is_ascii_digit())
  423|       |                            {
  424|  5.08k|                                return Some((0, Ok((Cow::Borrowed(""), false))));
  425|  12.6k|                            }
  426|  12.6k|                            if !self.unchecked {
  427|       |                                might_be_invalid_iri |=
  428|  12.6k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  429|  12.6k|                                        || c == ':';
  430|      0|                            }
  431|  12.6k|                            i += consumed;
  432|  74.8k|                        } else if Self::is_possible_pn_chars(c) || c == ':' {
  433|  56.0k|                            if !self.unchecked {
  434|       |                                might_be_invalid_iri |=
  435|  56.0k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  436|  56.0k|                                        || c == ':';
  437|      0|                            }
  438|  56.0k|                            i += consumed;
  439|  56.0k|                            ends_with_unescaped_dot = 0;
  440|  18.8k|                        } else if c == '.' {
  441|  15.7k|                            i += consumed;
  442|  15.7k|                            ends_with_unescaped_dot += 1;
  443|  15.7k|                        } else {
  444|  3.03k|                            let buffer = if let Some(mut buffer) = buffer {
  445|    784|                                buffer.push_str(
  446|    784|                                    match str_from_utf8(
  447|    784|                                        &data[position_that_is_already_in_buffer..i],
  448|    784|                                        position_that_is_already_in_buffer..i,
  449|    784|                                    ) {
  450|    784|                                        Ok(data) => data,
  451|      0|                                        Err(e) => return Some((i, Err(e))),
  452|       |                                    },
  453|       |                                );
  454|       |                                // We do not include the last dots
  455|    784|                                for _ in 0..ends_with_unescaped_dot {
  456|    580|                                    buffer.pop();
  457|    580|                                }
  458|    784|                                i -= ends_with_unescaped_dot;
  459|    784|                                Cow::Owned(buffer)
  460|       |                            } else {
  461|  2.25k|                                let mut data = match str_from_utf8(&data[..i], 0..i) {
  462|  2.25k|                                    Ok(data) => data,
  463|      0|                                    Err(e) => return Some((i, Err(e))),
  464|       |                                };
  465|       |                                // We do not include the last dots
  466|  2.25k|                                data = &data[..data.len() - ends_with_unescaped_dot];
  467|  2.25k|                                i -= ends_with_unescaped_dot;
  468|  2.25k|                                Cow::Borrowed(data)
  469|       |                            };
  470|  3.03k|                            return Some((i, Ok((buffer, might_be_invalid_iri))));
  471|       |                        }
  472|       |                    }
  473|  1.58k|                    Err(e) => return Some((e.location.end, Err(e))),
  474|       |                }
  475|  17.0k|            } else if is_ending {
  476|    572|                let buffer = if let Some(mut buffer) = buffer {
  477|       |                    // We do not include the last dot
  478|    508|                    while buffer.ends_with('.') {
  479|    242|                        buffer.pop();
  480|    242|                        i -= 1;
  481|    242|                    }
  482|    266|                    Cow::Owned(buffer)
  483|       |                } else {
  484|    306|                    let mut data = match str_from_utf8(&data[..i], 0..i) {
  485|    306|                        Ok(data) => data,
  486|      0|                        Err(e) => return Some((i, Err(e))),
  487|       |                    };
  488|       |                    // We do not include the last dot
  489|    576|                    while let Some(d) = data.strip_suffix('.') {
  490|    270|                        data = d;
  491|    270|                        i -= 1;
  492|    270|                    }
  493|    306|                    Cow::Borrowed(data)
  494|       |                };
  495|    572|                return Some((i, Ok((buffer, might_be_invalid_iri))));
  496|       |            } else {
  497|  16.5k|                return None;
  498|       |            }
  499|       |        }
  500|  29.8k|    }
_RNvMs_NtCsKJkp6CE2YE_5oxttl5lexerNtB4_7N3Lexer26recognize_blank_node_label:
  502|  48.8k|    fn recognize_blank_node_label(
  503|  48.8k|        data: &[u8],
  504|  48.8k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  505|  48.8k|        // [141s]  BLANK_NODE_LABEL  ::=  '_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
  506|  48.8k|        let mut i = 2;
  507|       |        loop {
  508|   360k|            match Self::recognize_unicode_char(&data[i..], i)? {
  509|   333k|                Ok((c, consumed)) => {
  510|   333k|                    if (i == 2 && (Self::is_possible_pn_chars_u(c) || c.is_ascii_digit()))
  511|   289k|                        || (i > 2 && Self::is_possible_pn_chars(c))
  512|   304k|                    {
  513|   304k|                        // Ok
  514|   304k|                    } else if i > 2 && c == '.' {
  515|  7.60k|                        if data[i - 1] == b'.' {
  516|    722|                            i -= 1;
  517|    722|                            return Some((
  518|    722|                                i,
  519|    722|                                str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  520|    722|                            ));
  521|  6.88k|                        }
  522|  20.9k|                    } else if i == 0 {
  523|      0|                        return Some((
  524|      0|                            i,
  525|      0|                            Err((0..i, "A blank node ID should not be empty").into()),
  526|      0|                        ));
  527|  20.9k|                    } else if data[i - 1] == b'.' {
  528|  5.25k|                        i -= 1;
  529|  5.25k|                        return Some((
  530|  5.25k|                            i,
  531|  5.25k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  532|  5.25k|                        ));
  533|       |                    } else {
  534|  15.6k|                        return Some((
  535|  15.6k|                            i,
  536|  15.6k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  537|  15.6k|                        ));
  538|       |                    }
  539|   311k|                    i += consumed;
  540|       |                }
  541|    398|                Err(e) => return Some((e.location.end, Err(e))),
  542|       |            }
  543|       |        }
  544|  48.8k|    }
_RNvMs_NtCsKJkp6CE2YE_5oxttl5lexerNtB4_7N3Lexer18recognize_lang_tag:
  546|  26.0k|    fn recognize_lang_tag<'a>(
  547|  26.0k|        &self,
  548|  26.0k|        data: &'a [u8],
  549|  26.0k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  550|  26.0k|        // [144s]  LANGTAG  ::=  '@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
  551|  26.0k|        let mut is_last_block_empty = true;
  552|   154k|        for (i, c) in data[1..].iter().enumerate() {
  553|   154k|            if c.is_ascii_alphabetic() {
  554|   120k|                is_last_block_empty = false;
  555|   120k|            } else if i == 0 {
  556|  7.25k|                return Some((
  557|  7.25k|                    1,
  558|  7.25k|                    Err((1..2, "A language code should always start with a letter").into()),
  559|  7.25k|                ));
  560|  27.1k|            } else if is_last_block_empty {
  561|    840|                return Some((i, self.parse_lang_tag(&data[1..i], 1..i - 1)));
  562|  26.3k|            } else if *c == b'-' {
  563|  16.7k|                is_last_block_empty = true;
  564|  16.7k|            } else {
  565|  9.59k|                return Some((i + 1, self.parse_lang_tag(&data[1..=i], 1..i)));
  566|       |            }
  567|       |        }
  568|  8.40k|        None
  569|  26.0k|    }
_RNvMs_NtCsKJkp6CE2YE_5oxttl5lexerNtB4_7N3Lexer14parse_lang_tag:
  571|  10.4k|    fn parse_lang_tag<'a>(
  572|  10.4k|        &self,
  573|  10.4k|        lang_tag: &'a [u8],
  574|  10.4k|        position: Range<usize>,
  575|  10.4k|    ) -> Result<N3Token<'a>, TokenRecognizerError> {
  576|  10.4k|        let lang_tag = str_from_utf8(lang_tag, position.clone())?;
  577|  10.4k|        Ok(N3Token::LangTag(if self.unchecked {
  578|      4|            lang_tag
  579|       |        } else {
  580|  10.4k|            LanguageTag::parse(lang_tag)
  581|  10.4k|                .map_err(|e| (position.clone(), e.to_string()))?
  582|  6.50k|                .into_inner()
  583|       |        }))
  584|  10.4k|    }
_RNvMs_NtCsKJkp6CE2YE_5oxttl5lexerNtB4_7N3Lexer16recognize_string:
  586|  39.9k|    fn recognize_string(
  587|  39.9k|        data: &[u8],
  588|  39.9k|        delimiter: u8,
  589|  39.9k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  590|  39.9k|        // [22]  STRING_LITERAL_QUOTE         ::=  '"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
  591|  39.9k|        // [23]  STRING_LITERAL_SINGLE_QUOTE  ::=  "'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
  592|  39.9k|        let mut string = String::new();
  593|  39.9k|        let mut i = 1;
  594|       |        loop {
  595|  92.5k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  596|  77.9k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  597|  77.1k|                Ok(s) => string.push_str(s),
  598|    800|                Err(e) => return Some((end, Err(e))),
  599|       |            };
  600|  77.1k|            i += end;
  601|  77.1k|            match data[i] {
  602|  77.1k|                c if c == delimiter => {
  603|  15.8k|                    return Some((i + 1, Ok(N3Token::String(string))));
  604|       |                }
  605|       |                b'\\' => {
  606|  61.3k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  607|  60.5k|                    i += additional + 1;
  608|  60.5k|                    match c {
  609|  52.6k|                        Ok(c) => {
  610|  52.6k|                            string.push(c);
  611|  52.6k|                        }
  612|  7.95k|                        Err(e) => {
  613|       |                            // We read until the end of string char
  614|  7.95k|                            let end = memchr(delimiter, &data[i..])?;
  615|  1.28k|                            return Some((i + end + 1, Err(e)));
  616|       |                        }
  617|       |                    }
  618|       |                }
  619|      0|                _ => unreachable!(),
  620|       |            }
  621|       |        }
  622|  39.9k|    }
_RNvMs_NtCsKJkp6CE2YE_5oxttl5lexerNtB4_7N3Lexer16recognize_number:
  662|  32.4k|    fn recognize_number(data: &[u8]) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  663|  32.4k|        // [19]  INTEGER    ::=  [+-]? [0-9]+
  664|  32.4k|        // [20]  DECIMAL    ::=  [+-]? [0-9]* '.' [0-9]+
  665|  32.4k|        // [21]  DOUBLE     ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  666|  32.4k|        // [154s] EXPONENT  ::=  [eE] [+-]? [0-9]+
  667|  32.4k|        let mut i = 0;
  668|  32.4k|        let c = *data.first()?;
  669|  32.4k|        if matches!(c, b'+' | b'-') {
  670|  12.8k|            i += 1;
  671|  19.5k|        }
  672|       |        // We read the digits before .
  673|  32.4k|        let mut count_before: usize = 0;
  674|       |        loop {
  675|  77.3k|            let c = *data.get(i)?;
  676|  71.1k|            if c.is_ascii_digit() {
  677|  44.8k|                i += 1;
  678|  44.8k|                count_before += 1;
  679|  44.8k|            } else {
  680|  26.2k|                break;
  681|       |            }
  682|       |        }
  683|       |
  684|       |        // We read the digits after .
  685|       |        #[allow(clippy::if_then_some_else_none)]
  686|  26.2k|        let count_after = if *data.get(i)? == b'.' {
  687|  3.41k|            i += 1;
  688|  3.41k|
  689|  3.41k|            let mut count_after = 0;
  690|       |            loop {
  691|  14.0k|                let c = *data.get(i)?;
  692|  13.1k|                if c.is_ascii_digit() {
  693|  10.6k|                    i += 1;
  694|  10.6k|                    count_after += 1;
  695|  10.6k|                } else {
  696|  2.48k|                    break;
  697|  2.48k|                }
  698|  2.48k|            }
  699|  2.48k|            Some(count_after)
  700|       |        } else {
  701|  22.8k|            None
  702|       |        };
  703|       |
  704|       |        // End
  705|  25.3k|        let c = *data.get(i)?;
  706|  25.3k|        if matches!(c, b'e' | b'E') {
  707|  3.23k|            i += 1;
  708|       |
  709|  3.23k|            let c = *data.get(i)?;
  710|  2.25k|            if matches!(c, b'+' | b'-') {
  711|    236|                i += 1;
  712|  2.02k|            }
  713|       |
  714|  2.25k|            let mut found = false;
  715|       |            loop {
  716|  6.03k|                let c = *data.get(i)?;
  717|  4.85k|                if c.is_ascii_digit() {
  718|  3.78k|                    i += 1;
  719|  3.78k|                    found = true;
  720|  3.78k|                } else {
  721|  1.07k|                    break;
  722|  1.07k|                }
  723|  1.07k|            }
  724|  1.07k|            Some((
  725|  1.07k|                i,
  726|  1.07k|                if !found {
  727|    504|                    Err((0..i, "A double exponent cannot be empty").into())
  728|    572|                } else if count_before == 0 && count_after.unwrap_or(0) == 0 {
  729|    278|                    Err((0..i, "A double should not be empty").into())
  730|       |                } else {
  731|    294|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Double)
  732|       |                },
  733|       |            ))
  734|  22.1k|        } else if let Some(count_after) = count_after {
  735|  1.89k|            if count_after == 0 {
  736|       |                // We do not consume the '.' after all
  737|  1.06k|                i -= 1;
  738|  1.06k|                Some((
  739|  1.06k|                    i,
  740|  1.06k|                    if count_before == 0 {
  741|    294|                        Err((0..i, "An integer should not be empty").into())
  742|       |                    } else {
  743|    766|                        str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  744|       |                    },
  745|       |                ))
  746|       |            } else {
  747|    836|                Some((i, str_from_utf8(&data[..i], 0..i).map(N3Token::Decimal)))
  748|       |            }
  749|       |        } else {
  750|       |            Some((
  751|  20.2k|                i,
  752|  20.2k|                if count_before == 0 {
  753|  8.21k|                    Err((0..i, "An integer should not be empty").into())
  754|       |                } else {
  755|  11.9k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  756|       |                },
  757|       |            ))
  758|       |        }
  759|  32.4k|    }
_RNvMs_NtCsKJkp6CE2YE_5oxttl5lexerNtB4_7N3Lexer16recognize_escape:
  761|  67.7k|    fn recognize_escape(
  762|  67.7k|        data: &[u8],
  763|  67.7k|        position: usize,
  764|  67.7k|        with_echar: bool,
  765|  67.7k|    ) -> Option<(usize, Result<char, TokenRecognizerError>)> {
  766|  67.7k|        // [26]   UCHAR  ::=  '\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
  767|  67.7k|        // [159s] ECHAR  ::=  '\' [tbnrf"'\]
  768|  67.7k|        match *data.get(1)? {
  769|  36.8k|            b'u' => match Self::recognize_hex_char(&data[2..], 4, 'u', position) {
  770|  35.6k|                Ok(c) => Some((5, Ok(c?))),
  771|  1.22k|                Err(e) => Some((5, Err(e))),
  772|       |            },
  773|  4.82k|            b'U' => match Self::recognize_hex_char(&data[2..], 8, 'u', position) {
  774|  4.30k|                Ok(c) => Some((9, Ok(c?))),
  775|    514|                Err(e) => Some((9, Err(e))),
  776|       |            },
  777|    425|            b't' if with_echar => Some((1, Ok('\t'))),
  778|  10.9k|            b'b' if with_echar => Some((1, Ok('\x08'))),
  779|  2.27k|            b'n' if with_echar => Some((1, Ok('\n'))),
  780|    735|            b'r' if with_echar => Some((1, Ok('\r'))),
  781|    465|            b'f' if with_echar => Some((1, Ok('\x0C'))),
  782|    682|            b'"' if with_echar => Some((1, Ok('"'))),
  783|    482|            b'\'' if with_echar => Some((1, Ok('\''))),
  784|  1.23k|            b'\\' if with_echar => Some((1, Ok('\\'))),
  785|  7.52k|            c => Some((
  786|  7.52k|                1,
  787|  7.52k|                Err((
  788|  7.52k|                    position..position + 2,
  789|  7.52k|                    format!("Unexpected escape character '\\{}'", char::from(c)),
  790|  7.52k|                )
  791|  7.52k|                    .into()),
  792|  7.52k|            )), // TODO: read until end of string
  793|       |        }
  794|  67.7k|    }
_RNvMs_NtCsKJkp6CE2YE_5oxttl5lexerNtB4_7N3Lexer18recognize_hex_char:
  796|  41.7k|    fn recognize_hex_char(
  797|  41.7k|        data: &[u8],
  798|  41.7k|        len: usize,
  799|  41.7k|        escape_char: char,
  800|  41.7k|        position: usize,
  801|  41.7k|    ) -> Result<Option<char>, TokenRecognizerError> {
  802|  41.7k|        if data.len() < len {
  803|  1.96k|            return Ok(None);
  804|  39.7k|        }
  805|  39.7k|        let val = str_from_utf8(&data[..len], position..position + len + 2)?;
  806|  39.2k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  807|       |            (
  808|       |                position..position + len + 2,
  809|       |                format!(
  810|       |                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  811|       |                ),
  812|       |            )
  813|  39.2k|        })?;
  814|  38.7k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  815|       |            (
  816|       |                position..position + len +2,
  817|       |                format!(
  818|       |                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  819|       |                ),
  820|       |            )
  821|  38.7k|        })?;
  822|  38.0k|        Ok(Some(c))
  823|  41.7k|    }
_RNvMs_NtCsKJkp6CE2YE_5oxttl5lexerNtB4_7N3Lexer22recognize_unicode_char:
  825|   876k|    fn recognize_unicode_char(
  826|   876k|        data: &[u8],
  827|   876k|        position: usize,
  828|   876k|    ) -> Option<Result<(char, usize), TokenRecognizerError>> {
  829|   876k|        let mut code_point: u32;
  830|   876k|        let bytes_needed: usize;
  831|   876k|        let mut lower_boundary = 0x80;
  832|   876k|        let mut upper_boundary = 0xBF;
  833|       |
  834|   876k|        let byte = *data.first()?;
  835|   823k|        match byte {
  836|   823k|            0x00..=0x7F => return Some(Ok((char::from(byte), 1))),
  837|  48.5k|            0xC2..=0xDF => {
  838|  13.5k|                bytes_needed = 1;
  839|  13.5k|                code_point = u32::from(byte) & 0x1F;
  840|  13.5k|            }
  841|  34.9k|            0xE0..=0xEF => {
  842|  8.46k|                if byte == 0xE0 {
  843|    923|                    lower_boundary = 0xA0;
  844|  7.54k|                }
  845|  8.46k|                if byte == 0xED {
  846|    907|                    upper_boundary = 0x9F;
  847|  7.55k|                }
  848|  8.46k|                bytes_needed = 2;
  849|  8.46k|                code_point = u32::from(byte) & 0xF;
  850|       |            }
  851|  26.5k|            0xF0..=0xF4 => {
  852|  19.8k|                if byte == 0xF0 {
  853|  3.98k|                    lower_boundary = 0x90;
  854|  15.8k|                }
  855|  19.8k|                if byte == 0xF4 {
  856|  14.4k|                    upper_boundary = 0x8F;
  857|  14.4k|                }
  858|  19.8k|                bytes_needed = 3;
  859|  19.8k|                code_point = u32::from(byte) & 0x7;
  860|       |            }
  861|       |            _ => {
  862|  39.3k|                return Some(Err((
  863|  39.3k|                    position..=position,
  864|  39.3k|                    "Invalid UTF-8 character encoding",
  865|  39.3k|                )
  866|  39.3k|                    .into()))
  867|       |            }
  868|       |        }
  869|       |
  870|  44.6k|        for i in 1..=bytes_needed {
  871|  44.6k|            let byte = *data.get(i)?;
  872|  39.1k|            if byte < lower_boundary || upper_boundary < byte {
  873|  33.0k|                return Some(Err((
  874|  33.0k|                    position..=position + i,
  875|  33.0k|                    "Invalid UTF-8 character encoding",
  876|  33.0k|                )
  877|  33.0k|                    .into()));
  878|  6.11k|            }
  879|  6.11k|            lower_boundary = 0x80;
  880|  6.11k|            upper_boundary = 0xBF;
  881|  6.11k|            code_point = (code_point << 6) | (u32::from(byte) & 0x3F);
  882|       |        }
  883|       |
  884|  3.38k|        Some(
  885|  3.38k|            char::from_u32(code_point)
  886|  3.38k|                .map(|c| (c, bytes_needed + 1))
  887|  3.38k|                .ok_or_else(|| {
  888|       |                    (
  889|       |                        position..=position + bytes_needed,
  890|       |                        format!("The codepoint {code_point:X} is not a valid unicode character"),
  891|       |                    )
  892|       |                        .into()
  893|  3.38k|                }),
  894|  3.38k|        )
  895|   876k|    }
_RNvMs_NtCsKJkp6CE2YE_5oxttl5lexerNtB4_7N3Lexer25is_possible_pn_chars_base:
  898|   705k|    fn is_possible_pn_chars_base(c: char) -> bool {
  899|   705k|        matches!(c,
  900|   421k|        'A'..='Z'
  901|   285k|        | 'a'..='z'
  902|  1.83k|        | '\u{00C0}'..='\u{00D6}'
  903|  1.73k|        | '\u{00D8}'..='\u{00F6}'
  904|  1.71k|        | '\u{00F8}'..='\u{02FF}'
  905|  1.46k|        | '\u{0370}'..='\u{037D}'
  906|  1.46k|        | '\u{037F}'..='\u{1FFF}'
  907|    892|        | '\u{200C}'..='\u{200D}'
  908|    892|        | '\u{2070}'..='\u{218F}'
  909|    892|        | '\u{2C00}'..='\u{2FEF}'
  910|    892|        | '\u{3001}'..='\u{D7FF}'
  911|    176|        | '\u{F900}'..='\u{FDCF}'
  912|    176|        | '\u{FDF0}'..='\u{FFFD}'
  913|    176|        | '\u{10000}'..='\u{EFFFF}')
  914|   705k|    }
_RNvMs_NtCsKJkp6CE2YE_5oxttl5lexerNtB4_7N3Lexer22is_possible_pn_chars_u:
  917|   561k|    pub(super) fn is_possible_pn_chars_u(c: char) -> bool {
  918|   561k|        Self::is_possible_pn_chars_base(c) || c == '_'
  919|   561k|    }
_RNvMs_NtCsKJkp6CE2YE_5oxttl5lexerNtB4_7N3Lexer20is_possible_pn_chars:
  922|   496k|    pub(crate) fn is_possible_pn_chars(c: char) -> bool {
  923|   496k|        Self::is_possible_pn_chars_u(c)
  924|   180k|            || matches!(c,
  925|   104k|        '-' | '0'..='9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
  926|   496k|    }
_RNvMs_NtCsKJkp6CE2YE_5oxttl5lexerNtB4_7N3Lexer43is_possible_pn_chars_base_but_not_valid_iri:
  928|  68.7k|    fn is_possible_pn_chars_base_but_not_valid_iri(c: char) -> bool {
  929|  68.7k|        matches!(c, '\u{FFF0}'..='\u{FFFD}')
  930|  68.7k|            || u32::from(c) % u32::from('\u{FFFE}') == 0
  931|  68.7k|            || u32::from(c) % u32::from('\u{FFFF}') == 0
  932|  68.7k|    }
_RNvNtCsKJkp6CE2YE_5oxttl5lexer13str_from_utf8:
  957|   217k|fn str_from_utf8(data: &[u8], range: Range<usize>) -> Result<&str, TokenRecognizerError> {
  958|   217k|    str::from_utf8(data).map_err(|e| {
  959|       |        (
  960|       |            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  961|       |            format!("Invalid UTF-8: {e}"),
  962|       |        )
  963|       |            .into()
  964|   217k|    })
  965|   217k|}
_RNvNtCsKJkp6CE2YE_5oxttl5lexer16string_from_utf8:
  967|  73.7k|fn string_from_utf8(data: Vec<u8>, range: Range<usize>) -> Result<String, TokenRecognizerError> {
  968|  73.7k|    String::from_utf8(data).map_err(|e| {
  969|       |        (
  970|       |            range.start + e.utf8_error().valid_up_to()
  971|       |                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  972|       |            format!("Invalid UTF-8: {e}"),
  973|       |        )
  974|       |            .into()
  975|  73.7k|    })
  976|  73.7k|}

_RNvXNtCsKJkp6CE2YE_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer20error_recovery_state:
   46|   222k|    fn error_recovery_state(mut self) -> Self {
   47|   222k|        self.stack.clear();
   48|   222k|        self.subjects.clear();
   49|   222k|        self.predicates.clear();
   50|   222k|        self.objects.clear();
   51|   222k|        self
   52|   222k|    }
_RNvXNtCsKJkp6CE2YE_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer14recognize_next:
   54|   309k|    fn recognize_next(
   55|   309k|        mut self,
   56|   309k|        token: N3Token<'_>,
   57|   309k|        context: &mut NQuadsRecognizerContext,
   58|   309k|        results: &mut Vec<Quad>,
   59|   309k|        errors: &mut Vec<RuleRecognizerError>,
   60|   309k|    ) -> Self {
   61|   309k|        if let Some(state) = self.stack.pop() {
   62|   156k|            match state {
   63|  5.66k|                NQuadsState::ExpectSubject => match token {
   64|  21.5k|                    N3Token::IriRef(s) => {
   65|  21.5k|                        self.subjects
   66|  21.5k|                            .push(NamedNode::new_unchecked(s).into());
   67|  21.5k|                        self.stack.push(NQuadsState::ExpectPredicate);
   68|  21.5k|                        self
   69|       |                    }
   70|  5.00k|                    N3Token::BlankNodeLabel(s) => {
   71|  5.00k|                        self.subjects.push(BlankNode::new_unchecked(s).into());
   72|  5.00k|                        self.stack.push(NQuadsState::ExpectPredicate);
   73|  5.00k|                        self
   74|       |                    }
   75|       |                    #[cfg(feature = "rdf-star")]
   76|  27.6k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
   77|  5.66k|                        self.stack.push(NQuadsState::AfterQuotedSubject);
   78|  5.66k|                        self.stack.push(NQuadsState::ExpectSubject);
   79|  5.66k|                        self
   80|       |                    }
   81|  26.0k|                    _ => self.error(
   82|  26.0k|                        errors,
   83|  26.0k|                        "The subject of a triple should be an IRI or a blank node, TOKEN found",
   84|  26.0k|                    ),
   85|       |                },
   86|  27.0k|                NQuadsState::ExpectPredicate => match token {
   87|  24.5k|                    N3Token::IriRef(p) => {
   88|  24.5k|                        self.predicates
   89|  24.5k|                            .push(NamedNode::new_unchecked(p));
   90|  24.5k|                        self.stack.push(NQuadsState::ExpectedObject);
   91|  24.5k|                        self
   92|       |                    }
   93|  2.51k|                    _ => self.error(
   94|  2.51k|                        errors,
   95|  2.51k|                        "The predicate of a triple should be an IRI, TOKEN found",
   96|  2.51k|                    ),
   97|       |                },
   98|  1.57k|                NQuadsState::ExpectedObject => match token {
   99|  9.10k|                    N3Token::IriRef(o) => {
  100|  9.10k|                        self.objects
  101|  9.10k|                            .push(NamedNode::new_unchecked(o).into());
  102|  9.10k|                        self.stack
  103|  9.10k|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  104|  9.10k|                        self
  105|       |                    }
  106|  8.58k|                    N3Token::BlankNodeLabel(o) => {
  107|  8.58k|                        self.objects.push(BlankNode::new_unchecked(o).into());
  108|  8.58k|                        self.stack
  109|  8.58k|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  110|  8.58k|                        self
  111|       |                    }
  112|  4.76k|                    N3Token::String(value) => {
  113|  4.76k|                        self.stack
  114|  4.76k|                            .push(NQuadsState::ExpectLiteralAnnotationOrGraphNameOrDot { value });
  115|  4.76k|                        self
  116|       |                    }
  117|       |                    #[cfg(feature = "rdf-star")]
  118|  1.87k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  119|  1.57k|                        self.stack.push(NQuadsState::AfterQuotedObject);
  120|  1.57k|                        self.stack.push(NQuadsState::ExpectSubject);
  121|  1.57k|                        self
  122|       |                    }
  123|    396|                    _ => self.error(
  124|    396|                        errors,
  125|    396|                        "The object of a triple should be an IRI, a blank node or a literal, TOKEN found",
  126|    396|                    ),
  127|       |                },
  128|  4.54k|                NQuadsState::ExpectLiteralAnnotationOrGraphNameOrDot { value } => match token {
  129|  1.37k|                    N3Token::LangTag(lang_tag) => {
  130|  1.37k|                        self.objects.push(
  131|  1.37k|                            Literal::new_language_tagged_literal_unchecked(
  132|  1.37k|                                value,
  133|  1.37k|                                lang_tag.to_ascii_lowercase(),
  134|  1.37k|                            )
  135|  1.37k|                            .into(),
  136|  1.37k|                        );
  137|  1.37k|                        self.stack
  138|  1.37k|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  139|  1.37k|                        self
  140|       |                    }
  141|  2.35k|                    N3Token::Punctuation("^^") => {
  142|    920|                        self.stack
  143|    920|                            .push(NQuadsState::ExpectLiteralDatatype { value });
  144|    920|                        self
  145|       |                    }
  146|       |                    _ => {
  147|  2.24k|                        self.objects.push(Literal::new_simple_literal(value).into());
  148|  2.24k|                        self.stack
  149|  2.24k|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  150|  2.24k|                        self.recognize_next(token, context, results, errors)
  151|       |                    }
  152|       |                },
  153|    790|                NQuadsState::ExpectLiteralDatatype { value } => match token {
  154|    528|                    N3Token::IriRef(d) => {
  155|    528|                        self.objects.push(
  156|    528|                            Literal::new_typed_literal(
  157|    528|                                value,
  158|    528|                                NamedNode::new_unchecked(d)
  159|    528|                            )
  160|    528|                            .into(),
  161|    528|                        );
  162|    528|                        self.stack
  163|    528|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  164|    528|                        self
  165|       |                    }
  166|    262|                    _ => self.error(errors, "A literal datatype must be an IRI, found TOKEN"),
  167|       |                },
  168|       |                NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple => {
  169|  21.4k|                    if self.stack.is_empty() {
  170|  6.94k|                        match token {
  171|  2.32k|                            N3Token::IriRef(g) if context.with_graph_name => {
  172|  2.32k|                                self.emit_quad(
  173|  2.32k|                                    results,
  174|  2.32k|                                    NamedNode::new_unchecked(g).into(),
  175|  2.32k|                                );
  176|  2.32k|                                self.stack.push(NQuadsState::ExpectDot);
  177|  2.32k|                                self
  178|       |                            }
  179|  4.61k|                            N3Token::BlankNodeLabel(g) if context.with_graph_name => {
  180|  4.61k|                                self.emit_quad(results, BlankNode::new_unchecked(g).into());
  181|  4.61k|                                self.stack.push(NQuadsState::ExpectDot);
  182|  4.61k|                                self
  183|       |                            }
  184|       |                            _ => {
  185|  11.5k|                                self.emit_quad(results, GraphName::DefaultGraph);
  186|  11.5k|                                self.stack.push(NQuadsState::ExpectDot);
  187|  11.5k|                                self.recognize_next(token, context, results, errors)
  188|       |                            }
  189|       |                        }
  190|  2.96k|                    } else if token == N3Token::Punctuation(">>") {
  191|  2.77k|                        self
  192|       |                    } else {
  193|    190|                        self.error(errors, "Expecting the end of a quoted triple '>>'")
  194|       |                    }
  195|       |                }
  196|  17.1k|                NQuadsState::ExpectDot => if let N3Token::Punctuation(".") = token {
  197|  11.0k|                    self.stack.push(NQuadsState::ExpectSubject);
  198|  11.0k|                    self
  199|       |                } else {
  200|  6.11k|                    errors.push("Quads should be followed by a dot".into());
  201|  6.11k|                    self.stack.push(NQuadsState::ExpectSubject);
  202|  6.11k|                    self.recognize_next(token, context, results, errors)
  203|       |                },
  204|       |                #[cfg(feature = "rdf-star")]
  205|       |                NQuadsState::AfterQuotedSubject => {
  206|  1.96k|                    let triple = Triple {
  207|  1.96k|                        subject: self.subjects.pop().unwrap(),
  208|  1.96k|                        predicate: self.predicates.pop().unwrap(),
  209|  1.96k|                        object: self.objects.pop().unwrap(),
  210|  1.96k|                    };
  211|  1.96k|                    self.subjects.push(triple.into());
  212|  1.96k|                    self.stack.push(NQuadsState::ExpectPredicate);
  213|  1.96k|                    self.recognize_next(token,context,  results, errors)
  214|       |                }
  215|       |                #[cfg(feature = "rdf-star")]
  216|       |                NQuadsState::AfterQuotedObject => {
  217|    781|                    let triple = Triple {
  218|    781|                        subject: self.subjects.pop().unwrap(),
  219|    781|                        predicate: self.predicates.pop().unwrap(),
  220|    781|                        object: self.objects.pop().unwrap(),
  221|    781|                    };
  222|    781|                    self.objects.push(triple.into());
  223|    781|                    self.stack
  224|    781|                        .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  225|    781|                    self.recognize_next(token, context, results, errors)
  226|       |                }
  227|       |            }
  228|   152k|        } else if token == N3Token::Punctuation(".") {
  229|  37.3k|            self.stack.push(NQuadsState::ExpectSubject);
  230|  37.3k|            self
  231|       |        } else {
  232|   115k|            self
  233|       |        }
  234|   309k|    }
_RNvXNtCsKJkp6CE2YE_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer13recognize_end:
  236|  10.5k|    fn recognize_end(
  237|  10.5k|        mut self,
  238|  10.5k|        _context: &mut NQuadsRecognizerContext,
  239|  10.5k|        results: &mut Vec<Quad>,
  240|  10.5k|        errors: &mut Vec<RuleRecognizerError>,
  241|  10.5k|    ) {
  242|  10.5k|        match &*self.stack {
  243|  10.5k|            [NQuadsState::ExpectSubject] | [] => (),
  244|      8|            [NQuadsState::ExpectDot] => errors.push("Triples should be followed by a dot".into()),
  245|       |            [NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple] => {
  246|    150|                self.emit_quad(results, GraphName::DefaultGraph);
  247|    150|                errors.push("Triples should be followed by a dot".into())
  248|       |            }
  249|     70|            [NQuadsState::ExpectLiteralAnnotationOrGraphNameOrDot { value }] => {
  250|     70|                self.objects.push(Literal::new_simple_literal(value).into());
  251|     70|                self.emit_quad(results, GraphName::DefaultGraph);
  252|     70|                errors.push("Triples should be followed by a dot".into())
  253|       |            }
  254|     86|            _ => errors.push("Unexpected end".into()), // TODO
  255|       |        }
  256|  10.5k|    }
_RNvXNtCsKJkp6CE2YE_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer13lexer_options:
  258|   833k|    fn lexer_options(context: &NQuadsRecognizerContext) -> &N3LexerOptions {
  259|   833k|        &context.lexer_options
  260|   833k|    }
_RNvMs_NtCsKJkp6CE2YE_5oxttl12line_formatsNtB4_16NQuadsRecognizer10new_parser:
  264|  10.5k|    pub fn new_parser(
  265|  10.5k|        with_graph_name: bool,
  266|  10.5k|        #[cfg(feature = "rdf-star")] with_quoted_triples: bool,
  267|  10.5k|        unchecked: bool,
  268|  10.5k|    ) -> Parser<Self> {
  269|  10.5k|        Parser::new(
  270|  10.5k|            Lexer::new(
  271|  10.5k|                N3Lexer::new(N3LexerMode::NTriples, unchecked),
  272|  10.5k|                MIN_BUFFER_SIZE,
  273|  10.5k|                MAX_BUFFER_SIZE,
  274|  10.5k|                true,
  275|  10.5k|                Some(b"#"),
  276|  10.5k|            ),
  277|  10.5k|            Self {
  278|  10.5k|                stack: vec![NQuadsState::ExpectSubject],
  279|  10.5k|                subjects: Vec::new(),
  280|  10.5k|                predicates: Vec::new(),
  281|  10.5k|                objects: Vec::new(),
  282|  10.5k|            },
  283|  10.5k|            NQuadsRecognizerContext {
  284|  10.5k|                with_graph_name,
  285|  10.5k|                #[cfg(feature = "rdf-star")]
  286|  10.5k|                with_quoted_triples,
  287|  10.5k|                lexer_options: N3LexerOptions::default(),
  288|  10.5k|            },
  289|  10.5k|        )
  290|  10.5k|    }
_RNvMs_NtCsKJkp6CE2YE_5oxttl12line_formatsNtB4_16NQuadsRecognizer9emit_quad:
  306|  18.7k|    fn emit_quad(&mut self, results: &mut Vec<Quad>, graph_name: GraphName) {
  307|  18.7k|        results.push(Quad {
  308|  18.7k|            subject: self.subjects.pop().unwrap(),
  309|  18.7k|            predicate: self.predicates.pop().unwrap(),
  310|  18.7k|            object: self.objects.pop().unwrap(),
  311|  18.7k|            graph_name,
  312|  18.7k|        })
  313|  18.7k|    }
_RINvMs_NtCsKJkp6CE2YE_5oxttl12line_formatsNtB5_16NQuadsRecognizer5errorReEB7_:
  293|  29.3k|    fn error(
  294|  29.3k|        mut self,
  295|  29.3k|        errors: &mut Vec<RuleRecognizerError>,
  296|  29.3k|        msg: impl Into<RuleRecognizerError>,
  297|  29.3k|    ) -> Self {
  298|  29.3k|        errors.push(msg.into());
  299|  29.3k|        self.stack.clear();
  300|  29.3k|        self.subjects.clear();
  301|  29.3k|        self.predicates.clear();
  302|  29.3k|        self.objects.clear();
  303|  29.3k|        self
  304|  29.3k|    }

_RNvMNtCsKJkp6CE2YE_5oxttl6nquadsNtB2_12NQuadsParser19with_quoted_triplesCslVPiWcgWUHs_6nquads:
   67|  10.5k|    pub fn with_quoted_triples(mut self) -> Self {
   68|  10.5k|        self.with_quoted_triples = true;
   69|  10.5k|        self
   70|  10.5k|    }
_RNvMNtCsKJkp6CE2YE_5oxttl6nquadsNtB2_12NQuadsParser3newCslVPiWcgWUHs_6nquads:
   49|  10.5k|    pub fn new() -> Self {
   50|  10.5k|        Self::default()
   51|  10.5k|    }
_RNvMNtCsKJkp6CE2YE_5oxttl6nquadsNtB2_12NQuadsParser9uncheckedCslVPiWcgWUHs_6nquads:
   59|    120|    pub fn unchecked(mut self) -> Self {
   60|    120|        self.unchecked = true;
   61|    120|        self
   62|    120|    }
_RNvMs1_NtCsKJkp6CE2YE_5oxttl6nquadsNtB5_16NQuadsSerializer3newCslVPiWcgWUHs_6nquads:
  359|  3.47k|    pub fn new() -> Self {
  360|  3.47k|        Self
  361|  3.47k|    }
_RINvMNtCsKJkp6CE2YE_5oxttl6nquadsNtB3_12NQuadsParser10parse_readRShECslVPiWcgWUHs_6nquads:
   95|  3.47k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadNQuadsReader<R> {
   96|  3.47k|        FromReadNQuadsReader {
   97|  3.47k|            inner: self.parse().parser.parse_read(read),
   98|  3.47k|        }
   99|  3.47k|    }
_RINvMs1_NtCsKJkp6CE2YE_5oxttl6nquadsNtB6_16NQuadsSerializer18serialize_to_writeINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECslVPiWcgWUHs_6nquads:
  382|  3.47k|    pub fn serialize_to_write<W: Write>(self, write: W) -> ToWriteNQuadsWriter<W> {
  383|  3.47k|        ToWriteNQuadsWriter {
  384|  3.47k|            write,
  385|  3.47k|            writer: self.serialize(),
  386|  3.47k|        }
  387|  3.47k|    }
_RINvMs2_NtCsKJkp6CE2YE_5oxttl6nquadsINtB6_19ToWriteNQuadsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE10write_quadRNtNtCs6sLY0PWj8mX_5oxrdf6triple4QuadECslVPiWcgWUHs_6nquads:
  476|  6.11k|    pub fn write_quad<'a>(&mut self, q: impl Into<QuadRef<'a>>) -> io::Result<()> {
  477|  6.11k|        self.writer.write_quad(q, &mut self.write)
  478|  6.11k|    }
_RINvMs3_NtCsKJkp6CE2YE_5oxttl6nquadsNtB6_20LowLevelNQuadsWriter10write_quadRNtNtCs6sLY0PWj8mX_5oxrdf6triple4QuadQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECslVPiWcgWUHs_6nquads:
  557|  6.11k|    pub fn write_quad<'a>(
  558|  6.11k|        &mut self,
  559|  6.11k|        q: impl Into<QuadRef<'a>>,
  560|  6.11k|        mut write: impl Write,
  561|  6.11k|    ) -> io::Result<()> {
  562|  6.11k|        writeln!(write, "{} .", q.into())
  563|  6.11k|    }
_RNvMs2_NtCsKJkp6CE2YE_5oxttl6nquadsINtB5_19ToWriteNQuadsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE6finishCslVPiWcgWUHs_6nquads:
  481|  3.47k|    pub fn finish(self) -> W {
  482|  3.47k|        self.write
  483|  3.47k|    }
_RNvXs_NtCsKJkp6CE2YE_5oxttl6nquadsINtB4_20FromReadNQuadsReaderRShENtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCslVPiWcgWUHs_6nquads:
  218|  9.58k|    fn next(&mut self) -> Option<Self::Item> {
  219|  9.58k|        self.inner.next()
  220|  9.58k|    }
_RNvMNtCsKJkp6CE2YE_5oxttl6nquadsNtB2_12NQuadsParser5parse:
  175|  10.5k|    pub fn parse(self) -> LowLevelNQuadsReader {
  176|  10.5k|        LowLevelNQuadsReader {
  177|  10.5k|            parser: NQuadsRecognizer::new_parser(
  178|  10.5k|                true,
  179|  10.5k|                #[cfg(feature = "rdf-star")]
  180|  10.5k|                self.with_quoted_triples,
  181|  10.5k|                self.unchecked,
  182|  10.5k|            ),
  183|  10.5k|        }
  184|  10.5k|    }
_RNvMs0_NtCsKJkp6CE2YE_5oxttl6nquadsNtB5_20LowLevelNQuadsReader17extend_from_slice:
  306|   298k|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  307|   298k|        self.parser.extend_from_slice(other)
  308|   298k|    }
_RNvMs0_NtCsKJkp6CE2YE_5oxttl6nquadsNtB5_20LowLevelNQuadsReader3end:
  313|  7.06k|    pub fn end(&mut self) {
  314|  7.06k|        self.parser.end()
  315|  7.06k|    }
_RNvMs0_NtCsKJkp6CE2YE_5oxttl6nquadsNtB5_20LowLevelNQuadsReader6is_end:
  318|  7.06k|    pub fn is_end(&self) -> bool {
  319|  7.06k|        self.parser.is_end()
  320|  7.06k|    }
_RNvMs0_NtCsKJkp6CE2YE_5oxttl6nquadsNtB5_20LowLevelNQuadsReader9read_next:
  326|   576k|    pub fn read_next(&mut self) -> Option<Result<Quad, TurtleSyntaxError>> {
  327|   576k|        self.parser.read_next()
  328|   576k|    }
_RNvMs1_NtCsKJkp6CE2YE_5oxttl6nquadsNtB5_16NQuadsSerializer9serialize:
  444|  3.47k|    pub fn serialize(self) -> LowLevelNQuadsWriter {
  445|  3.47k|        LowLevelNQuadsWriter
  446|  3.47k|    }

_RNvXs_NtNtCsKJkp6CE2YE_5oxttl7toolkit5errorNtB4_17TurtleSyntaxErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmtCslVPiWcgWUHs_6nquads:
   37|   258k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   38|   258k|        if self.location.start.offset + 1 >= self.location.end.offset {
   39|   198k|            write!(
   40|   198k|                f,
   41|   198k|                "Parser error at line {} column {}: {}",
   42|   198k|                self.location.start.line + 1,
   43|   198k|                self.location.start.column + 1,
   44|   198k|                self.message
   45|   198k|            )
   46|  59.4k|        } else if self.location.start.line == self.location.end.line {
   47|  58.5k|            write!(
   48|  58.5k|                f,
   49|  58.5k|                "Parser error between at line {} between columns {} and column {}: {}",
   50|  58.5k|                self.location.start.line + 1,
   51|  58.5k|                self.location.start.column + 1,
   52|  58.5k|                self.location.end.column + 1,
   53|  58.5k|                self.message
   54|  58.5k|            )
   55|       |        } else {
   56|    894|            write!(
   57|    894|                f,
   58|    894|                "Parser error between line {} column {} and line {} column {}: {}",
   59|    894|                self.location.start.line + 1,
   60|    894|                self.location.start.column + 1,
   61|    894|                self.location.end.line + 1,
   62|    894|                self.location.end.column + 1,
   63|    894|                self.message
   64|    894|            )
   65|       |        }
   66|   258k|    }

_RINvMs1_NtNtCsKJkp6CE2YE_5oxttl7toolkit5lexerINtB6_5LexerNtNtBa_5lexer7N3LexerE16extend_from_readRShECslVPiWcgWUHs_6nquads:
  113|  7.66k|    pub fn extend_from_read(&mut self, read: &mut impl Read) -> io::Result<()> {
  114|  7.66k|        self.shrink_data();
  115|  7.66k|        if self.data.len() == self.max_buffer_size {
  116|      0|            return Err(io::Error::new(
  117|      0|                io::ErrorKind::OutOfMemory,
  118|      0|                format!(
  119|      0|                    "Reached the buffer maximal size of {}",
  120|      0|                    self.max_buffer_size
  121|      0|                ),
  122|      0|            ));
  123|  7.66k|        }
  124|  7.66k|        let min_end = min(self.data.len() + self.min_buffer_size, self.max_buffer_size);
  125|  7.66k|        let new_start = self.data.len();
  126|  7.66k|        self.data.resize(min_end, 0);
  127|  7.66k|        if self.data.len() < self.data.capacity() {
  128|     36|            // We keep extending to have as much space as available without reallocation
  129|     36|            self.data.resize(self.data.capacity(), 0);
  130|  7.62k|        }
  131|  7.66k|        let read = read.read(&mut self.data[new_start..])?;
  132|  7.66k|        self.data.truncate(new_start + read);
  133|  7.66k|        self.is_ending = read == 0;
  134|  7.66k|        Ok(())
  135|  7.66k|    }
_RNvXNtNtCsKJkp6CE2YE_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB19_3ops5range5RangejENtNtCs3OstG5Tqy1X_5alloc6string6StringEE4fromB6_:
   31|   135k|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|   135k|        Self {
   33|   135k|            location,
   34|   135k|            message: message.into(),
   35|   135k|        }
   36|   135k|    }
_RNvXNtNtCsKJkp6CE2YE_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB19_3ops5range5RangejEReEE4fromB6_:
   31|  91.2k|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|  91.2k|        Self {
   33|  91.2k|            location,
   34|  91.2k|            message: message.into(),
   35|  91.2k|        }
   36|  91.2k|    }
_RNvXs_NtNtCsKJkp6CE2YE_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB1b_3ops5range14RangeInclusivejENtNtCs3OstG5Tqy1X_5alloc6string6StringEE4fromB8_:
   41|  13.5k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  13.5k|        (*location.start()..*location.end() + 1, message).into()
   43|  13.5k|    }
_RNvXs_NtNtCsKJkp6CE2YE_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB1b_3ops5range14RangeInclusivejEReEE4fromB8_:
   41|  72.3k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  72.3k|        (*location.start()..*location.end() + 1, message).into()
   43|  72.3k|    }
_RNvXs0_NtNtCsKJkp6CE2YE_5oxttl7toolkit5lexerNtB5_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTjNtNtCs3OstG5Tqy1X_5alloc6string6StringEE4fromB9_:
   47|  12.5k|    fn from((location, message): (usize, S)) -> Self {
   48|  12.5k|        (location..=location, message).into()
   49|  12.5k|    }
_RNvMs1_NtNtCsKJkp6CE2YE_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3newB9_:
   73|  10.5k|    pub fn new(
   74|  10.5k|        parser: R,
   75|  10.5k|        min_buffer_size: usize,
   76|  10.5k|        max_buffer_size: usize,
   77|  10.5k|        is_line_jump_whitespace: bool,
   78|  10.5k|        line_comment_start: Option<&'static [u8]>,
   79|  10.5k|    ) -> Self {
   80|  10.5k|        Self {
   81|  10.5k|            parser,
   82|  10.5k|            data: Vec::new(),
   83|  10.5k|            position: Position {
   84|  10.5k|                line_start_buffer_offset: 0,
   85|  10.5k|                buffer_offset: 0,
   86|  10.5k|                global_offset: 0,
   87|  10.5k|                global_line: 0,
   88|  10.5k|            },
   89|  10.5k|            previous_position: Position {
   90|  10.5k|                line_start_buffer_offset: 0,
   91|  10.5k|                buffer_offset: 0,
   92|  10.5k|                global_offset: 0,
   93|  10.5k|                global_line: 0,
   94|  10.5k|            },
   95|  10.5k|            is_ending: false,
   96|  10.5k|            min_buffer_size,
   97|  10.5k|            max_buffer_size,
   98|  10.5k|            is_line_jump_whitespace,
   99|  10.5k|            line_comment_start,
  100|  10.5k|        }
  101|  10.5k|    }
_RNvMs1_NtNtCsKJkp6CE2YE_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17extend_from_sliceB9_:
  103|   298k|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  104|   298k|        self.shrink_data();
  105|   298k|        self.data.extend_from_slice(other);
  106|   298k|    }
_RNvMs1_NtNtCsKJkp6CE2YE_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3endB9_:
  109|  7.06k|    pub fn end(&mut self) {
  110|  7.06k|        self.is_ending = true;
  111|  7.06k|    }
_RNvMs1_NtNtCsKJkp6CE2YE_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE9read_nextB9_:
  166|   833k|    pub fn read_next(
  167|   833k|        &mut self,
  168|   833k|        options: &R::Options,
  169|   833k|    ) -> Option<Result<R::Token<'_>, TurtleSyntaxError>> {
  170|   833k|        self.skip_whitespaces_and_comments()?;
  171|   829k|        self.previous_position = self.position;
  172|   829k|        let Some((consumed, result)) = self.parser.recognize_next_token(
  173|   829k|            &self.data[self.position.buffer_offset..],
  174|   829k|            self.is_ending,
  175|   829k|            options,
  176|   829k|        ) else {
  177|   322k|            return if self.is_ending {
  178|  23.2k|                if self.position.buffer_offset == self.data.len() {
  179|  21.0k|                    None // We have finished
  180|       |                } else {
  181|  2.18k|                    let (new_line_jumps, new_line_start) =
  182|  2.18k|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  183|  2.18k|                            &self.data[self.position.buffer_offset..],
  184|  2.18k|                        );
  185|  2.18k|                    if new_line_jumps > 0 {
  186|    130|                        self.position.line_start_buffer_offset =
  187|    130|                            self.position.buffer_offset + new_line_start;
  188|  2.05k|                    }
  189|  2.18k|                    self.position.global_offset +=
  190|  2.18k|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  191|  2.18k|                    self.position.buffer_offset = self.data.len();
  192|  2.18k|                    self.position.global_line += new_line_jumps;
  193|  2.18k|                    let new_position = TextPosition {
  194|  2.18k|                        line: self.position.global_line,
  195|  2.18k|                        column: Self::column_from_bytes(
  196|  2.18k|                            &self.data[self.position.line_start_buffer_offset..],
  197|  2.18k|                        ),
  198|  2.18k|                        offset: self.position.global_offset,
  199|  2.18k|                    };
  200|  2.18k|                    let error = TurtleSyntaxError {
  201|  2.18k|                        location: new_position..new_position,
  202|  2.18k|                        message: "Unexpected end of file".into(),
  203|  2.18k|                    };
  204|  2.18k|                    self.position.buffer_offset = self.data.len(); // We consume everything
  205|  2.18k|                    Some(Err(error))
  206|       |                }
  207|       |            } else {
  208|   298k|                None
  209|       |            };
  210|       |        };
  211|   507k|        debug_assert!(
  212|      0|            consumed > 0,
  213|      0|            "The lexer must consume at least one byte each time"
  214|       |        );
  215|   507k|        debug_assert!(
  216|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  217|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  218|      0|            self.data.len() - self.position.buffer_offset
  219|       |        );
  220|   507k|        let (new_line_jumps, new_line_start) =
  221|   507k|            Self::find_number_of_line_jumps_and_start_of_last_line(
  222|   507k|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  223|   507k|            );
  224|   507k|        if new_line_jumps > 0 {
  225|  1.90k|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  226|   505k|        }
  227|   507k|        self.position.buffer_offset += consumed;
  228|   507k|        self.position.global_offset += u64::try_from(consumed).unwrap();
  229|   507k|        self.position.global_line += new_line_jumps;
  230|   507k|        Some(result.map_err(|e| TurtleSyntaxError {
  231|       |            location: self.location_from_buffer_offset_range(e.location),
  232|       |            message: e.message,
  233|   507k|        }))
  234|   833k|    }
_RNCNvMs1_NtNtCsKJkp6CE2YE_5oxttl7toolkit5lexerINtB7_5LexerNtNtBb_5lexer7N3LexerE9read_next0Bb_:
  230|   220k|        Some(result.map_err(|e| TurtleSyntaxError {
  231|   220k|            location: self.location_from_buffer_offset_range(e.location),
  232|   220k|            message: e.message,
  233|   220k|        }))
_RNvMs1_NtNtCsKJkp6CE2YE_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE33location_from_buffer_offset_rangeB9_:
  236|   220k|    pub fn location_from_buffer_offset_range(
  237|   220k|        &self,
  238|   220k|        offset_range: Range<usize>,
  239|   220k|    ) -> Range<TextPosition> {
  240|   220k|        let start_offset = self.previous_position.buffer_offset + offset_range.start;
  241|   220k|        let (start_extra_line_jumps, start_line_start) =
  242|   220k|            Self::find_number_of_line_jumps_and_start_of_last_line(
  243|   220k|                &self.data[self.previous_position.buffer_offset..start_offset],
  244|   220k|            );
  245|   220k|        let start_line_start = if start_extra_line_jumps > 0 {
  246|    314|            start_line_start + self.previous_position.buffer_offset
  247|       |        } else {
  248|   219k|            self.previous_position.line_start_buffer_offset
  249|       |        };
  250|   220k|        let end_offset = self.previous_position.buffer_offset + offset_range.end;
  251|   220k|        let (end_extra_line_jumps, end_line_start) =
  252|   220k|            Self::find_number_of_line_jumps_and_start_of_last_line(
  253|   220k|                &self.data[self.previous_position.buffer_offset..end_offset],
  254|   220k|            );
  255|   220k|        let end_line_start = if end_extra_line_jumps > 0 {
  256|  1.16k|            end_line_start + self.previous_position.buffer_offset
  257|       |        } else {
  258|   219k|            self.previous_position.line_start_buffer_offset
  259|       |        };
  260|   220k|        TextPosition {
  261|   220k|            line: self.previous_position.global_line + start_extra_line_jumps,
  262|   220k|            column: Self::column_from_bytes(&self.data[start_line_start..start_offset]),
  263|   220k|            offset: self.previous_position.global_offset
  264|   220k|                + u64::try_from(offset_range.start).unwrap(),
  265|   220k|        }..TextPosition {
  266|   220k|            line: self.previous_position.global_line + end_extra_line_jumps,
  267|   220k|            column: Self::column_from_bytes(&self.data[end_line_start..end_offset]),
  268|   220k|            offset: self.previous_position.global_offset + u64::try_from(offset_range.end).unwrap(),
  269|   220k|        }
  270|   220k|    }
_RNvMs1_NtNtCsKJkp6CE2YE_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE19last_token_locationB9_:
  272|  35.7k|    pub fn last_token_location(&self) -> Range<TextPosition> {
  273|  35.7k|        TextPosition {
  274|  35.7k|            line: self.previous_position.global_line,
  275|  35.7k|            column: Self::column_from_bytes(
  276|  35.7k|                &self.data[self.previous_position.line_start_buffer_offset
  277|  35.7k|                    ..self.previous_position.buffer_offset],
  278|  35.7k|            ),
  279|  35.7k|            offset: self.previous_position.global_offset,
  280|  35.7k|        }..TextPosition {
  281|  35.7k|            line: self.position.global_line,
  282|  35.7k|            column: Self::column_from_bytes(
  283|  35.7k|                &self.data[self.position.line_start_buffer_offset..self.position.buffer_offset],
  284|  35.7k|            ),
  285|  35.7k|            offset: self.position.global_offset,
  286|  35.7k|        }
  287|  35.7k|    }
_RNvMs1_NtNtCsKJkp6CE2YE_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17last_token_sourceB9_:
  289|  35.7k|    pub fn last_token_source(&self) -> Cow<'_, str> {
  290|  35.7k|        String::from_utf8_lossy(
  291|  35.7k|            &self.data[self.previous_position.buffer_offset..self.position.buffer_offset],
  292|  35.7k|        )
  293|  35.7k|    }
_RNvMs1_NtNtCsKJkp6CE2YE_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE6is_endB9_:
  295|   324k|    pub fn is_end(&self) -> bool {
  296|   324k|        self.is_ending && self.data.len() == self.position.buffer_offset
  297|   324k|    }
_RNvMs1_NtNtCsKJkp6CE2YE_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  300|   833k|    fn skip_whitespaces_and_comments(&mut self) -> Option<()> {
  301|       |        loop {
  302|   834k|            self.skip_whitespaces()?;
  303|       |
  304|   833k|            let buf = &self.data[self.position.buffer_offset..];
  305|   833k|            if let Some(line_comment_start) = self.line_comment_start {
  306|   833k|                if buf.starts_with(line_comment_start) {
  307|       |                    // Comment
  308|  4.26k|                    if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  309|  1.49k|                        let mut end_position = line_comment_start.len() + end;
  310|  1.49k|                        if buf.get(end_position).copied() == Some(b'\r') {
  311|       |                            // We look for \n for Windows line end style
  312|  1.06k|                            if let Some(c) = buf.get(end_position + 1) {
  313|    580|                                if *c == b'\n' {
  314|      5|                                    end_position += 1;
  315|    575|                                }
  316|    488|                            } else if !self.is_ending {
  317|    461|                                return None; // We need to read more
  318|     27|                            }
  319|    428|                        }
  320|  1.03k|                        let comment_size = end_position + 1;
  321|  1.03k|                        self.position.buffer_offset += comment_size;
  322|  1.03k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  323|  1.03k|                        self.position.global_offset += u64::try_from(comment_size).unwrap();
  324|  1.03k|                        self.position.global_line += 1;
  325|  1.03k|                        continue;
  326|  2.76k|                    }
  327|  2.76k|                    if self.is_ending {
  328|    116|                        self.position.buffer_offset = self.data.len(); // EOF
  329|    116|                        return Some(());
  330|  2.65k|                    }
  331|  2.65k|                    return None; // We need more data
  332|   829k|                }
  333|      0|            }
  334|   829k|            return Some(());
  335|       |        }
  336|   833k|    }
_RNvMs1_NtNtCsKJkp6CE2YE_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  338|   834k|    fn skip_whitespaces(&mut self) -> Option<()> {
  339|   834k|        if self.is_line_jump_whitespace {
  340|   834k|            let mut i = self.position.buffer_offset;
  341|   922k|            while let Some(c) = self.data.get(i) {
  342|   864k|                match c {
  343|  23.8k|                    b' ' | b'\t' => {
  344|  23.8k|                        self.position.buffer_offset += 1;
  345|  23.8k|                        self.position.global_offset += 1;
  346|  23.8k|                    }
  347|       |                    b'\r' => {
  348|       |                        // We look for \n for Windows line end style
  349|  7.09k|                        let mut increment: u8 = 1;
  350|  7.09k|                        if let Some(c) = self.data.get(i + 1) {
  351|  6.08k|                            if *c == b'\n' {
  352|      0|                                increment += 1;
  353|      0|                                i += 1;
  354|  6.08k|                            }
  355|  1.00k|                        } else if !self.is_ending {
  356|    920|                            return None; // We need to read more
  357|     84|                        }
  358|  6.17k|                        self.position.buffer_offset += usize::from(increment);
  359|  6.17k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  360|  6.17k|                        self.position.global_offset += u64::from(increment);
  361|  6.17k|                        self.position.global_line += 1;
  362|       |                    }
  363|  58.1k|                    b'\n' => {
  364|  58.1k|                        self.position.buffer_offset += 1;
  365|  58.1k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  366|  58.1k|                        self.position.global_offset += 1;
  367|  58.1k|                        self.position.global_line += 1;
  368|  58.1k|                    }
  369|   775k|                    _ => return Some(()),
  370|       |                }
  371|  88.2k|                i += 1;
  372|       |                // TODO: SIMD
  373|       |            }
  374|       |        } else {
  375|      0|            for c in &self.data[self.position.buffer_offset..] {
  376|      0|                if matches!(c, b' ' | b'\t') {
  377|      0|                    self.position.buffer_offset += 1;
  378|      0|                    self.position.global_offset += 1;
  379|      0|                } else {
  380|      0|                    return Some(());
  381|       |                }
  382|       |                // TODO: SIMD
  383|       |            }
  384|       |        }
  385|  58.0k|        Some(())
  386|   834k|    }
_RNvMs1_NtNtCsKJkp6CE2YE_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE11shrink_dataB9_:
  388|   306k|    fn shrink_data(&mut self) {
  389|   306k|        if self.position.line_start_buffer_offset > 0 {
  390|  26.7k|            self.data
  391|  26.7k|                .copy_within(self.position.line_start_buffer_offset.., 0);
  392|  26.7k|            self.data
  393|  26.7k|                .truncate(self.data.len() - self.position.line_start_buffer_offset);
  394|  26.7k|            self.position.buffer_offset -= self.position.line_start_buffer_offset;
  395|  26.7k|            self.position.line_start_buffer_offset = 0;
  396|  26.7k|            self.previous_position = self.position;
  397|   279k|        }
  398|   306k|    }
_RNvMs1_NtNtCsKJkp6CE2YE_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  400|   949k|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  401|   949k|        let mut num_of_jumps = 0;
  402|   949k|        let mut last_jump_pos = 0;
  403|   949k|        let mut previous_cr = 0;
  404|   949k|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  405|  9.45k|            if bytes[pos] == b'\r' {
  406|  2.72k|                previous_cr = pos;
  407|  2.72k|                num_of_jumps += 1;
  408|  2.72k|                last_jump_pos = pos + 1;
  409|  2.72k|            } else {
  410|  6.73k|                if previous_cr < pos - 1 {
  411|  5.60k|                    // We count \r\n as a single line jump
  412|  5.60k|                    num_of_jumps += 1;
  413|  5.60k|                }
  414|  6.73k|                last_jump_pos = pos + 1;
  415|       |            }
  416|       |        }
  417|   949k|        (num_of_jumps, last_jump_pos)
  418|   949k|    }
_RNvMs1_NtNtCsKJkp6CE2YE_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17column_from_bytesB9_:
  420|   816k|    fn column_from_bytes(bytes: &[u8]) -> u64 {
  421|   816k|        match str::from_utf8(bytes) {
  422|   457k|            Ok(s) => u64::try_from(s.chars().count()).unwrap(),
  423|   359k|            Err(e) => {
  424|   359k|                if e.valid_up_to() == 0 {
  425|  57.0k|                    0
  426|       |                } else {
  427|   302k|                    Self::column_from_bytes(&bytes[..e.valid_up_to()])
  428|       |                }
  429|       |            }
  430|       |        }
  431|   816k|    }

_RINvMs_NtNtCsKJkp6CE2YE_5oxttl7toolkit6parserINtB5_6ParserNtNtB9_12line_formats16NQuadsRecognizerE10parse_readRShECslVPiWcgWUHs_6nquads:
  124|  3.47k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadIterator<R, RR> {
  125|  3.47k|        FromReadIterator { read, parser: self }
  126|  3.47k|    }
_RNvXs0_NtNtCsKJkp6CE2YE_5oxttl7toolkit6parserINtB5_16FromReadIteratorRShNtNtB9_12line_formats16NQuadsRecognizerENtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCslVPiWcgWUHs_6nquads:
  146|  9.58k|    fn next(&mut self) -> Option<Self::Item> {
  147|  17.2k|        while !self.parser.is_end() {
  148|  13.7k|            if let Some(result) = self.parser.read_next() {
  149|  6.11k|                return Some(result.map_err(TurtleParseError::Syntax));
  150|  7.66k|            }
  151|  7.66k|            if let Err(e) = self.parser.lexer.extend_from_read(&mut self.read) {
  152|      0|                return Some(Err(e.into()));
  153|  7.66k|            }
  154|       |        }
  155|  3.47k|        None
  156|  9.58k|    }
_RNvXNtNtCsKJkp6CE2YE_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromReE4fromB6_:
   39|  35.7k|    fn from(message: S) -> Self {
   40|  35.7k|        Self {
   41|  35.7k|            message: message.into(),
   42|  35.7k|        }
   43|  35.7k|    }
_RNvMs_NtNtCsKJkp6CE2YE_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_12line_formats16NQuadsRecognizerE3newB8_:
   56|  10.5k|    pub fn new(lexer: Lexer<RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   57|  10.5k|        Self {
   58|  10.5k|            lexer,
   59|  10.5k|            state: Some(recognizer),
   60|  10.5k|            context,
   61|  10.5k|            results: vec![],
   62|  10.5k|            errors: vec![],
   63|  10.5k|        }
   64|  10.5k|    }
_RNvMs_NtNtCsKJkp6CE2YE_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_12line_formats16NQuadsRecognizerE17extend_from_sliceB8_:
   66|   298k|    pub fn extend_from_slice(&mut self, other: &[u8]) {
   67|   298k|        self.lexer.extend_from_slice(other)
   68|   298k|    }
_RNvMs_NtNtCsKJkp6CE2YE_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_12line_formats16NQuadsRecognizerE3endB8_:
   71|  7.06k|    pub fn end(&mut self) {
   72|  7.06k|        self.lexer.end()
   73|  7.06k|    }
_RNvMs_NtNtCsKJkp6CE2YE_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_12line_formats16NQuadsRecognizerE6is_endB8_:
   76|  24.3k|    pub fn is_end(&self) -> bool {
   77|  24.3k|        self.state.is_none() && self.results.is_empty() && self.errors.is_empty()
   78|  24.3k|    }
_RNvMs_NtNtCsKJkp6CE2YE_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_12line_formats16NQuadsRecognizerE9read_nextB8_:
   80|   590k|    pub fn read_next(&mut self) -> Option<Result<RR::Output, TurtleSyntaxError>> {
   81|       |        loop {
   82|   887k|            if let Some(error) = self.errors.pop() {
   83|  35.7k|                return Some(Err(TurtleSyntaxError {
   84|  35.7k|                    location: self.lexer.last_token_location(),
   85|  35.7k|                    message: error
   86|  35.7k|                        .message
   87|  35.7k|                        .replace("TOKEN", &self.lexer.last_token_source()),
   88|  35.7k|                }));
   89|   852k|            }
   90|   852k|            if let Some(result) = self.results.pop() {
   91|  18.7k|                return Some(Ok(result));
   92|   833k|            }
   93|   833k|            if let Some(result) = self.lexer.read_next(RR::lexer_options(&self.context)) {
   94|   509k|                match result {
   95|   286k|                    Ok(token) => {
   96|   286k|                        self.state = self.state.take().map(|state| {
   97|       |                            state.recognize_next(
   98|       |                                token,
   99|       |                                &mut self.context,
  100|       |                                &mut self.results,
  101|       |                                &mut self.errors,
  102|       |                            )
  103|   286k|                        });
  104|   286k|                        continue;
  105|       |                    }
  106|   222k|                    Err(e) => {
  107|   222k|                        self.state = self.state.take().map(RR::error_recovery_state);
  108|   222k|                        return Some(Err(e));
  109|       |                    }
  110|       |                }
  111|   324k|            }
  112|   324k|            if self.lexer.is_end() {
  113|  21.0k|                self.state.take()?.recognize_end(
  114|  10.5k|                    &mut self.context,
  115|  10.5k|                    &mut self.results,
  116|  10.5k|                    &mut self.errors,
  117|  10.5k|                )
  118|       |            } else {
  119|   303k|                return None;
  120|       |            }
  121|       |        }
  122|   590k|    }
_RNCNvMs_NtNtCsKJkp6CE2YE_5oxttl7toolkit6parserINtB6_6ParserNtNtBa_12line_formats16NQuadsRecognizerE9read_next0Ba_:
   96|   286k|                        self.state = self.state.take().map(|state| {
   97|   286k|                            state.recognize_next(
   98|   286k|                                token,
   99|   286k|                                &mut self.context,
  100|   286k|                                &mut self.results,
  101|   286k|                                &mut self.errors,
  102|   286k|                            )
  103|   286k|                        });


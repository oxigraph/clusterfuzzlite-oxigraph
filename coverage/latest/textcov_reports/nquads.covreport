rust_fuzzer_test_input:
  209|  56.5k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  56.5k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  56.5k|                }
  223|  56.5k|
  224|  56.5k|                __libfuzzer_sys_run(bytes);
  225|  56.5k|                0
  226|       |            }
_RNvNvCsa0h8KKtWB9J_6nquads1__19___libfuzzer_sys_run:
  241|  56.5k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|       |            }
LLVMFuzzerTestOneInput:
   58|  56.5k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  56.5k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  56.5k|    });
   63|  56.5k|
   64|  56.5k|    match test_input {
   65|  56.5k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  56.5k|}
_RNCNvCskxgTfQto6Vo_13libfuzzer_sys15test_input_wrap0B3_:
   59|  56.5k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  56.5k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  56.5k|        rust_fuzzer_test_input(data_slice)
   62|  56.5k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvMs3_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next0ECslNspdJhbxze_5oxttl:
 1044|  28.9M|    pub(crate) unsafe fn next(
 1045|  28.9M|        &mut self,
 1046|  28.9M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  28.9M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  28.9M|        let found = find_raw(self.start, self.end)?;
 1057|   269k|        let result = found.distance(self.original_start);
 1058|   269k|        self.start = found.add(1);
 1059|   269k|        Some(result)
 1060|  28.9M|    }
_RINvNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECslNspdJhbxze_5oxttl:
 1125|   108k|pub(crate) unsafe fn search_slice_with_raw(
 1126|   108k|    haystack: &[u8],
 1127|   108k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|   108k|) -> Option<usize> {
 1129|   108k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|   108k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|   108k|    // a &[u8].
 1132|   108k|    let start = haystack.as_ptr();
 1133|   108k|    let end = start.add(haystack.len());
 1134|   108k|    let found = find_raw(start, end)?;
 1135|  57.6k|    Some(found.distance(start))
 1136|   108k|}
_RINvNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr7memchr20ECslNspdJhbxze_5oxttl:
 1125|  10.6M|pub(crate) unsafe fn search_slice_with_raw(
 1126|  10.6M|    haystack: &[u8],
 1127|  10.6M|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  10.6M|) -> Option<usize> {
 1129|  10.6M|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  10.6M|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  10.6M|    // a &[u8].
 1132|  10.6M|    let start = haystack.as_ptr();
 1133|  10.6M|    let end = start.add(haystack.len());
 1134|  10.6M|    let found = find_raw(start, end)?;
 1135|  5.24M|    Some(found.distance(start))
 1136|  10.6M|}
_RNvMs3_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  28.6M|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  28.6M|        Iter {
 1029|  28.6M|            original_start: haystack.as_ptr(),
 1030|  28.6M|            start: haystack.as_ptr(),
 1031|  28.6M|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  28.6M|            haystack: core::marker::PhantomData,
 1033|  28.6M|        }
 1034|  28.6M|    }
_RNvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE7needle1B8_:
  117|   113k|    pub(crate) fn needle1(&self) -> u8 {
  118|   113k|        self.s1
  119|   113k|    }
_RNvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE3newB8_:
  111|   108k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|   108k|        One { s1: needle, v1: V::splat(needle) }
  113|   108k|    }
_RNvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  14.8k|    pub(crate) unsafe fn find_raw(
  144|  14.8k|        &self,
  145|  14.8k|        start: *const u8,
  146|  14.8k|        end: *const u8,
  147|  14.8k|    ) -> Option<*const u8> {
  148|  14.8k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  14.8k|        // need to move up to using a u64 for the masks used below. Currently
  150|  14.8k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  14.8k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  14.8k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  14.8k|        let topos = V::Mask::first_offset;
  155|  14.8k|        let len = end.distance(start);
  156|  14.8k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  14.8k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  5.18k|            return Some(cur);
  167|  9.64k|        }
  168|  9.64k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  9.64k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  9.64k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  9.64k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  9.64k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  13.1k|        while cur <= end.sub(V::BYTES) {
  213|  4.23k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  4.23k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    681|                return Some(cur);
  216|  3.55k|            }
  217|  3.55k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  8.96k|        if cur < end {
  224|  7.52k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  7.52k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  7.52k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  7.52k|            return self.search_chunk(cur, topos);
  228|  1.43k|        }
  229|  1.43k|        None
  230|  14.8k|    }
_RINvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  26.5k|    unsafe fn search_chunk(
  417|  26.5k|        &self,
  418|  26.5k|        cur: *const u8,
  419|  26.5k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  26.5k|    ) -> Option<*const u8> {
  421|  26.5k|        let chunk = V::load_unaligned(cur);
  422|  26.5k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  26.5k|        if mask.has_non_zero() {
  424|  7.18k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  19.4k|            None
  427|       |        }
  428|  26.5k|    }
_RNvMs_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE3newBa_:
  450|  39.5M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  39.5M|        Two {
  452|  39.5M|            s1: needle1,
  453|  39.5M|            s2: needle2,
  454|  39.5M|            v1: V::splat(needle1),
  455|  39.5M|            v2: V::splat(needle2),
  456|  39.5M|        }
  457|  39.5M|    }
_RNvMs_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  77.4M|    pub(crate) fn needle1(&self) -> u8 {
  462|  77.4M|        self.s1
  463|  77.4M|    }
_RNvMs_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  76.4M|    pub(crate) fn needle2(&self) -> u8 {
  468|  76.4M|        self.s2
  469|  76.4M|    }
_RNvMs_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE8find_rawBa_:
  493|  1.61M|    pub(crate) unsafe fn find_raw(
  494|  1.61M|        &self,
  495|  1.61M|        start: *const u8,
  496|  1.61M|        end: *const u8,
  497|  1.61M|    ) -> Option<*const u8> {
  498|  1.61M|        // If we want to support vectors bigger than 256 bits, we probably
  499|  1.61M|        // need to move up to using a u64 for the masks used below. Currently
  500|  1.61M|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|  1.61M|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|  1.61M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  1.61M|        let topos = V::Mask::first_offset;
  505|  1.61M|        let len = end.distance(start);
  506|  1.61M|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  1.61M|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   669k|            return Some(cur);
  517|   942k|        }
  518|   942k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   942k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|   942k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   942k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   942k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  1.20M|        while cur <= end.sub(V::BYTES) {
  551|   275k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   275k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  17.3k|                return Some(cur);
  554|   258k|            }
  555|   258k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   925k|        if cur < end {
  562|   869k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   869k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|   869k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   869k|            return self.search_chunk(cur, topos);
  566|  55.6k|        }
  567|  55.6k|        None
  568|  1.61M|    }
_RINvMs_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  2.75M|    unsafe fn search_chunk(
  671|  2.75M|        &self,
  672|  2.75M|        cur: *const u8,
  673|  2.75M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  2.75M|    ) -> Option<*const u8> {
  675|  2.75M|        let chunk = V::load_unaligned(cur);
  676|  2.75M|        let eq1 = self.v1.cmpeq(chunk);
  677|  2.75M|        let eq2 = self.v2.cmpeq(chunk);
  678|  2.75M|        let mask = eq1.or(eq2).movemask();
  679|  2.75M|        if mask.has_non_zero() {
  680|   734k|            let mask1 = eq1.movemask();
  681|   734k|            let mask2 = eq2.movemask();
  682|   734k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  2.02M|            None
  685|       |        }
  686|  2.75M|    }
_RNvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iE3newB8_:
  111|   108k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|   108k|        One { s1: needle, v1: V::splat(needle) }
  113|   108k|    }
_RNvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  67.1k|    pub(crate) unsafe fn find_raw(
  144|  67.1k|        &self,
  145|  67.1k|        start: *const u8,
  146|  67.1k|        end: *const u8,
  147|  67.1k|    ) -> Option<*const u8> {
  148|  67.1k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  67.1k|        // need to move up to using a u64 for the masks used below. Currently
  150|  67.1k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  67.1k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  67.1k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  67.1k|        let topos = V::Mask::first_offset;
  155|  67.1k|        let len = end.distance(start);
  156|  67.1k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  67.1k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  35.5k|            return Some(cur);
  167|  31.6k|        }
  168|  31.6k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  31.6k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  31.6k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  31.6k|        if len >= Self::LOOP_SIZE {
  172|  65.2k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|  53.5k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|  53.5k|                let a = V::load_aligned(cur);
  176|  53.5k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|  53.5k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|  53.5k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|  53.5k|                let eqa = self.v1.cmpeq(a);
  180|  53.5k|                let eqb = self.v1.cmpeq(b);
  181|  53.5k|                let eqc = self.v1.cmpeq(c);
  182|  53.5k|                let eqd = self.v1.cmpeq(d);
  183|  53.5k|                let or1 = eqa.or(eqb);
  184|  53.5k|                let or2 = eqc.or(eqd);
  185|  53.5k|                let or3 = or1.or(or2);
  186|  53.5k|                if or3.movemask_will_have_non_zero() {
  187|  3.62k|                    let mask = eqa.movemask();
  188|  3.62k|                    if mask.has_non_zero() {
  189|  1.25k|                        return Some(cur.add(topos(mask)));
  190|  2.37k|                    }
  191|  2.37k|
  192|  2.37k|                    let mask = eqb.movemask();
  193|  2.37k|                    if mask.has_non_zero() {
  194|  1.51k|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|    863|                    }
  196|    863|
  197|    863|                    let mask = eqc.movemask();
  198|    863|                    if mask.has_non_zero() {
  199|    483|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|    380|                    }
  201|    380|
  202|    380|                    let mask = eqd.movemask();
  203|    380|                    debug_assert!(mask.has_non_zero());
  204|    380|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  49.9k|                }
  206|  49.9k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  16.3k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  63.8k|        while cur <= end.sub(V::BYTES) {
  213|  37.6k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  37.6k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|  1.76k|                return Some(cur);
  216|  35.8k|            }
  217|  35.8k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  26.2k|        if cur < end {
  224|  24.3k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  24.3k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  24.3k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  24.3k|            return self.search_chunk(cur, topos);
  228|  1.87k|        }
  229|  1.87k|        None
  230|  67.1k|    }
_RINvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|   129k|    unsafe fn search_chunk(
  417|   129k|        &self,
  418|   129k|        cur: *const u8,
  419|   129k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|   129k|    ) -> Option<*const u8> {
  421|   129k|        let chunk = V::load_unaligned(cur);
  422|   129k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|   129k|        if mask.has_non_zero() {
  424|  38.8k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  90.3k|            None
  427|       |        }
  428|   129k|    }
_RNvMs_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iE3newBa_:
  450|  39.5M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  39.5M|        Two {
  452|  39.5M|            s1: needle1,
  453|  39.5M|            s2: needle2,
  454|  39.5M|            v1: V::splat(needle1),
  455|  39.5M|            v2: V::splat(needle2),
  456|  39.5M|        }
  457|  39.5M|    }
_RNvMs_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iE8find_rawBa_:
  493|  3.86M|    pub(crate) unsafe fn find_raw(
  494|  3.86M|        &self,
  495|  3.86M|        start: *const u8,
  496|  3.86M|        end: *const u8,
  497|  3.86M|    ) -> Option<*const u8> {
  498|  3.86M|        // If we want to support vectors bigger than 256 bits, we probably
  499|  3.86M|        // need to move up to using a u64 for the masks used below. Currently
  500|  3.86M|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|  3.86M|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|  3.86M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  3.86M|        let topos = V::Mask::first_offset;
  505|  3.86M|        let len = end.distance(start);
  506|  3.86M|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  3.86M|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  3.26M|            return Some(cur);
  517|   602k|        }
  518|   602k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   602k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|   602k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   602k|        if len >= Self::LOOP_SIZE {
  522|  1.06M|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|   819k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|   819k|                let a = V::load_aligned(cur);
  526|   819k|                let b = V::load_aligned(cur.add(V::BYTES));
  527|   819k|                let eqa1 = self.v1.cmpeq(a);
  528|   819k|                let eqb1 = self.v1.cmpeq(b);
  529|   819k|                let eqa2 = self.v2.cmpeq(a);
  530|   819k|                let eqb2 = self.v2.cmpeq(b);
  531|   819k|                let or1 = eqa1.or(eqb1);
  532|   819k|                let or2 = eqa2.or(eqb2);
  533|   819k|                let or3 = or1.or(or2);
  534|   819k|                if or3.movemask_will_have_non_zero() {
  535|  75.8k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|  75.8k|                    if mask.has_non_zero() {
  537|  44.0k|                        return Some(cur.add(topos(mask)));
  538|  31.7k|                    }
  539|  31.7k|
  540|  31.7k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|  31.7k|                    debug_assert!(mask.has_non_zero());
  542|  31.7k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|   743k|                }
  544|   743k|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   284k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   741k|        while cur <= end.sub(V::BYTES) {
  551|   231k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   231k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  16.8k|                return Some(cur);
  554|   214k|            }
  555|   214k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   510k|        if cur < end {
  562|   494k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   494k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|   494k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   494k|            return self.search_chunk(cur, topos);
  566|  16.0k|        }
  567|  16.0k|        None
  568|  3.86M|    }
_RINvMs_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  4.59M|    unsafe fn search_chunk(
  671|  4.59M|        &self,
  672|  4.59M|        cur: *const u8,
  673|  4.59M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  4.59M|    ) -> Option<*const u8> {
  675|  4.59M|        let chunk = V::load_unaligned(cur);
  676|  4.59M|        let eq1 = self.v1.cmpeq(chunk);
  677|  4.59M|        let eq2 = self.v2.cmpeq(chunk);
  678|  4.59M|        let mask = eq1.or(eq2).movemask();
  679|  4.59M|        if mask.has_non_zero() {
  680|  3.31M|            let mask1 = eq1.movemask();
  681|  3.31M|            let mask2 = eq2.movemask();
  682|  3.31M|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  1.27M|            None
  685|       |        }
  686|  4.59M|    }
_RINvNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  23.1k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  23.1k|    start: *const u8,
 1150|  23.1k|    end: *const u8,
 1151|  23.1k|    confirm: F,
 1152|  23.1k|) -> Option<*const u8> {
 1153|  23.1k|    debug_assert!(start <= end);
 1154|  23.1k|    let mut ptr = start;
 1155|   128k|    while ptr < end {
 1156|   113k|        if confirm(*ptr) {
 1157|  7.99k|            return Some(ptr);
 1158|   105k|        }
 1159|   105k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  15.1k|    None
 1162|  23.1k|}
_RINvNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|  27.7M|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  27.7M|    start: *const u8,
 1150|  27.7M|    end: *const u8,
 1151|  27.7M|    confirm: F,
 1152|  27.7M|) -> Option<*const u8> {
 1153|  27.7M|    debug_assert!(start <= end);
 1154|  27.7M|    let mut ptr = start;
 1155|   103M|    while ptr < end {
 1156|  77.4M|        if confirm(*ptr) {
 1157|  1.38M|            return Some(ptr);
 1158|  76.0M|        }
 1159|  76.0M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  26.3M|    None
 1162|  27.7M|}

_RNvMNtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|   108k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|   108k|        One {
   71|   108k|            sse2: generic::One::new(needle),
   72|   108k|            avx2: generic::One::new(needle),
   73|   108k|        }
   74|   108k|    }
_RNvMNtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|   108k|    pub unsafe fn find_raw(
  180|   108k|        &self,
  181|   108k|        start: *const u8,
  182|   108k|        end: *const u8,
  183|   108k|    ) -> Option<*const u8> {
  184|   108k|        if start >= end {
  185|  3.38k|            return None;
  186|   105k|        }
  187|   105k|        let len = end.distance(start);
  188|   105k|        if len < __m256i::BYTES {
  189|  37.9k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  23.1k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  23.1k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  14.8k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  67.1k|        }
  201|  67.1k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  67.1k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  67.1k|        // enough to run on the vector routine. Pointer validity is caller's
  204|  67.1k|        // responsibility.
  205|  67.1k|        //
  206|  67.1k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  67.1k|        // means we'd have to annotate this routine with `target_feature`.
  208|  67.1k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  67.1k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  67.1k|        // The real problem is that a routine with a `target_feature`
  211|  67.1k|        // annotation generally can't be inlined into caller code unless
  212|  67.1k|        // the caller code has the same target feature annotations. Namely,
  213|  67.1k|        // the common case (at time of writing) is for calling code to not
  214|  67.1k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  67.1k|        // `target_feature` on this routine, it can be inlined which will
  216|  67.1k|        // handle some of the short-haystack cases above without touching the
  217|  67.1k|        // architecture specific code.
  218|  67.1k|        self.find_raw_avx2(start, end)
  219|   108k|    }
_RNCNvMNtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|   113k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|   113k|                    b == self.sse2.needle1()
  194|   113k|                })
_RNvMNtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  14.8k|    unsafe fn find_raw_sse2(
  337|  14.8k|        &self,
  338|  14.8k|        start: *const u8,
  339|  14.8k|        end: *const u8,
  340|  14.8k|    ) -> Option<*const u8> {
  341|  14.8k|        self.sse2.find_raw(start, end)
  342|  14.8k|    }
_RNvMNtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  67.1k|    unsafe fn find_raw_avx2(
  397|  67.1k|        &self,
  398|  67.1k|        start: *const u8,
  399|  67.1k|        end: *const u8,
  400|  67.1k|    ) -> Option<*const u8> {
  401|  67.1k|        self.avx2.find_raw(start, end)
  402|  67.1k|    }
_RNvMs2_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  39.5M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  39.5M|        Two {
  558|  39.5M|            sse2: generic::Two::new(needle1, needle2),
  559|  39.5M|            avx2: generic::Two::new(needle1, needle2),
  560|  39.5M|        }
  561|  39.5M|    }
_RNvMs2_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNvMs2_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  39.5M|    pub unsafe fn find_raw(
  655|  39.5M|        &self,
  656|  39.5M|        start: *const u8,
  657|  39.5M|        end: *const u8,
  658|  39.5M|    ) -> Option<*const u8> {
  659|  39.5M|        if start >= end {
  660|  6.30M|            return None;
  661|  33.2M|        }
  662|  33.2M|        let len = end.distance(start);
  663|  33.2M|        if len < __m256i::BYTES {
  664|  29.3M|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  27.7M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  27.7M|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|  1.61M|                self.find_raw_sse2(start, end)
  674|       |            };
  675|  3.86M|        }
  676|  3.86M|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|  3.86M|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|  3.86M|        // enough to run on the vector routine. Pointer validity is caller's
  679|  3.86M|        // responsibility.
  680|  3.86M|        //
  681|  3.86M|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|  3.86M|        // means we'd have to annotate this routine with `target_feature`.
  683|  3.86M|        // Which is fine, because this routine is `unsafe` anyway and the
  684|  3.86M|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|  3.86M|        // The real problem is that a routine with a `target_feature`
  686|  3.86M|        // annotation generally can't be inlined into caller code unless
  687|  3.86M|        // the caller code has the same target feature annotations. Namely,
  688|  3.86M|        // the common case (at time of writing) is for calling code to not
  689|  3.86M|        // have the `avx2` target feature enabled *at compile time*. Without
  690|  3.86M|        // `target_feature` on this routine, it can be inlined which will
  691|  3.86M|        // handle some of the short-haystack cases above without touching the
  692|  3.86M|        // architecture specific code.
  693|  3.86M|        self.find_raw_avx2(start, end)
  694|  39.5M|    }
_RNCNvMs2_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  77.4M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  77.4M|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  77.4M|                })
_RNvMs2_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|  1.61M|    unsafe fn find_raw_sse2(
  765|  1.61M|        &self,
  766|  1.61M|        start: *const u8,
  767|  1.61M|        end: *const u8,
  768|  1.61M|    ) -> Option<*const u8> {
  769|  1.61M|        self.sse2.find_raw(start, end)
  770|  1.61M|    }
_RNvMs2_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|  3.86M|    unsafe fn find_raw_avx2(
  805|  3.86M|        &self,
  806|  3.86M|        start: *const u8,
  807|  3.86M|        end: *const u8,
  808|  3.86M|    ) -> Option<*const u8> {
  809|  3.86M|        self.avx2.find_raw(start, end)
  810|  3.86M|    }

_RNvNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  39.5M|pub(crate) fn memchr2_raw(
  221|  39.5M|    n1: u8,
  222|  39.5M|    n2: u8,
  223|  39.5M|    start: *const u8,
  224|  39.5M|    end: *const u8,
  225|  39.5M|) -> Option<*const u8> {
  226|  39.5M|    // SAFETY: We provide a valid function pointer type.
  227|  39.5M|    unsafe_ifunc!(
  228|  39.5M|        Two,
  229|  39.5M|        find_raw,
  230|  39.5M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  39.5M|        Option<*const u8>,
  232|  39.5M|        start,
  233|  39.5M|        end,
  234|  39.5M|        n1,
  235|  39.5M|        n2
  236|  39.5M|    )
  237|  39.5M|}
_RNvNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_646memchr10memchr_raw:
  174|   108k|pub(crate) fn memchr_raw(
  175|   108k|    n1: u8,
  176|   108k|    start: *const u8,
  177|   108k|    end: *const u8,
  178|   108k|) -> Option<*const u8> {
  179|   108k|    // SAFETY: We provide a valid function pointer type.
  180|   108k|    unsafe_ifunc!(
  181|   108k|        One,
  182|   108k|        find_raw,
  183|   108k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|   108k|        Option<*const u8>,
  185|   108k|        start,
  186|   108k|        end,
  187|   108k|        n1
  188|   108k|    )
  189|   108k|}
_RNvNvNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|   108k|        unsafe fn find_avx2(
   79|   108k|            $($needle: u8),+,
   80|   108k|            $hay_start: *const u8,
   81|   108k|            $hay_end: *const u8,
   82|   108k|        ) -> $retty {
   83|       |            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|   108k|            $memchrty::new_unchecked($($needle),+)
   85|   108k|                .$memchrfind($hay_start, $hay_end)
   86|   108k|        }
_RNvNvNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  39.5M|        unsafe fn find_avx2(
   79|  39.5M|            $($needle: u8),+,
   80|  39.5M|            $hay_start: *const u8,
   81|  39.5M|            $hay_end: *const u8,
   82|  39.5M|        ) -> $retty {
   83|       |            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  39.5M|            $memchrty::new_unchecked($($needle),+)
   85|  39.5M|                .$memchrfind($hay_start, $hay_end)
   86|  39.5M|        }
_RNvNvNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }

_RNvXNtCsgAmdbuUjTpV_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  45.8M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  45.8M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  45.8M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  45.8M|    }
_RNvXNtCsgAmdbuUjTpV_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|  1.58M|    fn as_usize(self) -> usize {
   27|  1.58M|        self as usize
   28|  1.58M|    }

_RNCNvNtCsgAmdbuUjTpV_6memchr6memchr7memchr20CslNspdJhbxze_5oxttl:
   96|  10.6M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|  10.6M|            memchr2_raw(needle1, needle2, start, end)
   98|  10.6M|        })
_RNCNvXs3_NtCsgAmdbuUjTpV_6memchr6memchrNtB7_7Memchr2NtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next0CslNspdJhbxze_5oxttl:
  395|  28.9M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNvMs2_NtCsgAmdbuUjTpV_6memchr6memchrNtB5_7Memchr23newCslNspdJhbxze_5oxttl:
  377|  28.6M|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  28.6M|        Memchr2 {
  379|  28.6M|            needle1,
  380|  28.6M|            needle2,
  381|  28.6M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  28.6M|        }
  383|  28.6M|    }
_RNvNtCsgAmdbuUjTpV_6memchr6memchr11memchr2_rawCslNspdJhbxze_5oxttl:
  574|  39.5M|unsafe fn memchr2_raw(
  575|  39.5M|    needle1: u8,
  576|  39.5M|    needle2: u8,
  577|  39.5M|    start: *const u8,
  578|  39.5M|    end: *const u8,
  579|  39.5M|) -> Option<*const u8> {
  580|  39.5M|    #[cfg(target_arch = "x86_64")]
  581|  39.5M|    {
  582|  39.5M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  39.5M|    }
  584|  39.5M|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  585|  39.5M|    {
  586|  39.5M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  39.5M|    }
  588|  39.5M|    #[cfg(target_arch = "aarch64")]
  589|  39.5M|    {
  590|  39.5M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  39.5M|    }
  592|  39.5M|    #[cfg(not(any(
  593|  39.5M|        target_arch = "x86_64",
  594|  39.5M|        all(target_arch = "wasm32", target_feature = "simd128"),
  595|  39.5M|        target_arch = "aarch64"
  596|  39.5M|    )))]
  597|  39.5M|    {
  598|  39.5M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  39.5M|            .find_raw(start, end)
  600|  39.5M|    }
  601|  39.5M|}
_RNvNtCsgAmdbuUjTpV_6memchr6memchr12memchr2_iterCslNspdJhbxze_5oxttl:
  232|  28.6M|pub fn memchr2_iter<'h>(
  233|  28.6M|    needle1: u8,
  234|  28.6M|    needle2: u8,
  235|  28.6M|    haystack: &'h [u8],
  236|  28.6M|) -> Memchr2<'h> {
  237|  28.6M|    Memchr2::new(needle1, needle2, haystack)
  238|  28.6M|}
_RNvNtCsgAmdbuUjTpV_6memchr6memchr6memchrCslNspdJhbxze_5oxttl:
   27|   108k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|   108k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|   108k|    // pointer between start and end.
   30|   108k|    unsafe {
   31|   108k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|   108k|        })
   34|   108k|    }
   35|   108k|}
_RNvNtCsgAmdbuUjTpV_6memchr6memchr7memchr2CslNspdJhbxze_5oxttl:
   92|  10.6M|pub fn memchr2(needle1: u8, needle2: u8, haystack: &[u8]) -> Option<usize> {
   93|  10.6M|    // SAFETY: memchr2_raw, when a match is found, always returns a valid
   94|  10.6M|    // pointer between start and end.
   95|  10.6M|    unsafe {
   96|  10.6M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|       |            memchr2_raw(needle1, needle2, start, end)
   98|  10.6M|        })
   99|  10.6M|    }
  100|  10.6M|}
_RNvXs3_NtCsgAmdbuUjTpV_6memchr6memchrNtB5_7Memchr2NtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4nextCslNspdJhbxze_5oxttl:
  390|  28.9M|    fn next(&mut self) -> Option<usize> {
  391|  28.9M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  28.9M|        // pointers returns will fall within the start and end bounds, and this
  393|  28.9M|        // upholds the safety contract of `self.it.next`.
  394|  28.9M|        unsafe {
  395|  28.9M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  28.9M|        }
  397|  28.9M|    }
_RNCNvNtCsgAmdbuUjTpV_6memchr6memchr6memchr0B5_:
   31|   108k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|   108k|            memchr_raw(needle, start, end)
   33|   108k|        })
_RNvNtCsgAmdbuUjTpV_6memchr6memchr10memchr_rawB3_:
  504|   108k|unsafe fn memchr_raw(
  505|   108k|    needle: u8,
  506|   108k|    start: *const u8,
  507|   108k|    end: *const u8,
  508|   108k|) -> Option<*const u8> {
  509|   108k|    #[cfg(target_arch = "x86_64")]
  510|   108k|    {
  511|   108k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|   108k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|   108k|        // time. This function also handles using a fallback if neither AVX2
  514|   108k|        // nor SSE2 (unusual) are available.
  515|   108k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|   108k|    }
  517|   108k|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  518|   108k|    {
  519|   108k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|   108k|    }
  521|   108k|    #[cfg(target_arch = "aarch64")]
  522|   108k|    {
  523|   108k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|   108k|    }
  525|   108k|    #[cfg(not(any(
  526|   108k|        target_arch = "x86_64",
  527|   108k|        all(target_arch = "wasm32", target_feature = "simd128"),
  528|   108k|        target_arch = "aarch64"
  529|   108k|    )))]
  530|   108k|    {
  531|   108k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|   108k|    }
  533|   108k|}

_RNvYNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtNtCsgAmdbuUjTpV_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   63|   872k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   64|   872k|        self.movemask().has_non_zero()
   65|   872k|    }
_RNvMNtCsgAmdbuUjTpV_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  126|  4.17M|    fn get_for_offset(self) -> u32 {
  127|  4.17M|        #[cfg(target_endian = "big")]
  128|  4.17M|        {
  129|  4.17M|            self.0.swap_bytes()
  130|  4.17M|        }
  131|  4.17M|        #[cfg(target_endian = "little")]
  132|  4.17M|        {
  133|  4.17M|            self.0
  134|  4.17M|        }
  135|  4.17M|    }
_RNvXs_NtCsgAmdbuUjTpV_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  146|  8.46M|    fn has_non_zero(self) -> bool {
  147|  8.46M|        self.0 != 0
  148|  8.46M|    }
_RNvXs_NtCsgAmdbuUjTpV_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  171|  4.17M|    fn first_offset(self) -> usize {
  172|  4.17M|        // We are dealing with little endian here (and if we aren't, we swap
  173|  4.17M|        // the bytes so we are in practice), where the most significant byte
  174|  4.17M|        // is at a higher address. That means the least significant bit that
  175|  4.17M|        // is set corresponds to the position of our first matching byte.
  176|  4.17M|        // That position corresponds to the number of zeros after the least
  177|  4.17M|        // significant bit.
  178|  4.17M|        self.get_for_offset().trailing_zeros() as usize
  179|  4.17M|    }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86sse2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  222|  4.25M|        unsafe fn movemask(self) -> SensibleMoveMask {
  223|  4.25M|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  224|  4.25M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86avx2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  271|  12.4M|        unsafe fn movemask(self) -> SensibleMoveMask {
  272|  12.4M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  273|  12.4M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86sse2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  217|  2.78M|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  218|  2.78M|            _mm_loadu_si128(data as *const __m128i)
  219|  2.78M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86sse2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  227|  5.54M|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  228|  5.54M|            _mm_cmpeq_epi8(self, vector2)
  229|  5.54M|        }
_RNvXs_NtCsgAmdbuUjTpV_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  161|  4.16M|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  162|  4.16M|        SensibleMoveMask(self.0 | other.0)
  163|  4.16M|    }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86sse2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  207|  79.2M|        unsafe fn splat(byte: u8) -> __m128i {
  208|  79.2M|            _mm_set1_epi8(byte as i8)
  209|  79.2M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86sse2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iNtB4_6Vector2or:
  237|  2.75M|        unsafe fn or(self, vector2: Self) -> __m128i {
  238|  2.75M|            _mm_or_si128(self, vector2)
  239|  2.75M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86avx2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  266|  4.72M|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  267|  4.72M|            _mm256_loadu_si256(data as *const __m256i)
  268|  4.72M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86avx2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  276|  12.8M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  277|  12.8M|            _mm256_cmpeq_epi8(self, vector2)
  278|  12.8M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86avx2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  256|  79.2M|        unsafe fn splat(byte: u8) -> __m256i {
  257|  79.2M|            _mm256_set1_epi8(byte as i8)
  258|  79.2M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86avx2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  261|  1.85M|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  262|  1.85M|            _mm256_load_si256(data as *const __m256i)
  263|  1.85M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86avx2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtB4_6Vector2or:
  286|  7.21M|        unsafe fn or(self, vector2: Self) -> __m256i {
  287|  7.21M|            _mm256_or_si256(self, vector2)
  288|  7.21M|        }

_RNvMs2_NtCsaMS60HLPCvw_9once_cell3impINtB5_8OnceCellNtNtCs8f6x4lOZV33_5alloc6string6StringE14is_initializedCskxgTfQto6Vo_13libfuzzer_sys:
   49|  56.5k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  56.5k|        // An `Acquire` load is enough because that makes all the initialization
   51|  56.5k|        // operations visible to us, and, this being a fast path, weaker
   52|  56.5k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  56.5k|        // `SeqCst` operations on the slow path.
   54|  56.5k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  56.5k|    }

_RNvMs4_NtCsaMS60HLPCvw_9once_cell4syncINtB5_8OnceCellNtNtCs8f6x4lOZV33_5alloc6string6StringE3getCskxgTfQto6Vo_13libfuzzer_sys:
  963|  56.5k|        pub fn get(&self) -> Option<&T> {
  964|  56.5k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  56.5k|                None
  969|       |            }
  970|  56.5k|        }

_RNvMCsl9ThLYvim7w_10oxilangtagINtB2_11LanguageTagReE10into_innerCslNspdJhbxze_5oxttl:
   62|   394k|    pub fn into_inner(self) -> T {
   63|   394k|        self.tag
   64|   394k|    }
_RNvMCsl9ThLYvim7w_10oxilangtagINtB2_11LanguageTagReE5parseCslNspdJhbxze_5oxttl:
   49|   509k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   50|   509k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   51|   394k|        Ok(Self { tag, positions })
   52|   509k|    }
_RINvCsl9ThLYvim7w_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECsbS7gf8MXAex_5oxrdf:
  632|   422k|fn parse_langtag(
  633|   422k|    input: &str,
  634|   422k|    output: &mut impl OutputBuffer,
  635|   422k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  636|       |    #[derive(PartialEq, Eq)]
  637|       |    enum State {
  638|       |        Start,
  639|       |        AfterLanguage,
  640|       |        AfterExtLang,
  641|       |        AfterScript,
  642|       |        AfterRegion,
  643|       |        InExtension { expected: bool },
  644|       |        InPrivateUse { expected: bool },
  645|       |    }
  646|       |
  647|   422k|    let mut state = State::Start;
  648|   422k|    let mut language_end = 0;
  649|   422k|    let mut extlang_end = 0;
  650|   422k|    let mut script_end = 0;
  651|   422k|    let mut region_end = 0;
  652|   422k|    let mut variant_end = 0;
  653|   422k|    let mut extension_end = 0;
  654|   422k|    let mut extlangs_count = 0;
  655|   653k|    for (subtag, end) in SubTagIterator::new(input) {
  656|   653k|        if subtag.is_empty() {
  657|     37|            return Err(LanguageTagParseError {
  658|     37|                kind: TagParseErrorKind::EmptySubtag,
  659|     37|            });
  660|   653k|        }
  661|   653k|        if subtag.len() > 8 {
  662|  6.50k|            return Err(LanguageTagParseError {
  663|  6.50k|                kind: TagParseErrorKind::SubtagTooLong,
  664|  6.50k|            });
  665|   647k|        }
  666|   647k|        if state == State::Start {
  667|       |            // Primary language
  668|   416k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  669|  48.0k|                return Err(LanguageTagParseError {
  670|  48.0k|                    kind: TagParseErrorKind::InvalidLanguage,
  671|  48.0k|                });
  672|   368k|            }
  673|   368k|            language_end = end;
  674|   368k|            output.extend(to_lowercase(subtag));
  675|   368k|            if subtag.len() < 4 {
  676|   314k|                // extlangs are only allowed for short language tags
  677|   314k|                state = State::AfterLanguage;
  678|   314k|            } else {
  679|  53.7k|                state = State::AfterExtLang;
  680|  53.7k|            }
  681|   230k|        } else if let State::InPrivateUse { .. } = state {
  682|  10.0k|            if !is_alphanumeric(subtag) {
  683|      0|                return Err(LanguageTagParseError {
  684|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  685|      0|                });
  686|  10.0k|            }
  687|  10.0k|            output.push('-');
  688|  10.0k|            output.extend(to_lowercase(subtag));
  689|  10.0k|            state = State::InPrivateUse { expected: false };
  690|   220k|        } else if subtag == "x" || subtag == "X" {
  691|       |            // We make sure extension is found
  692|  15.5k|            if let State::InExtension { expected: true } = state {
  693|  2.51k|                return Err(LanguageTagParseError {
  694|  2.51k|                    kind: TagParseErrorKind::EmptyExtension,
  695|  2.51k|                });
  696|  12.9k|            }
  697|  12.9k|            output.push('-');
  698|  12.9k|            output.push('x');
  699|  12.9k|            state = State::InPrivateUse { expected: true };
  700|   205k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  701|       |            // We make sure extension is found
  702|  65.9k|            if let State::InExtension { expected: true } = state {
  703|  2.32k|                return Err(LanguageTagParseError {
  704|  2.32k|                    kind: TagParseErrorKind::EmptyExtension,
  705|  2.32k|                });
  706|  63.6k|            }
  707|  63.6k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  708|  63.6k|            output.push('-');
  709|  63.6k|            output.push(extension_tag);
  710|  63.6k|            state = State::InExtension { expected: true };
  711|   139k|        } else if let State::InExtension { .. } = state {
  712|  27.5k|            if !is_alphanumeric(subtag) {
  713|      0|                return Err(LanguageTagParseError {
  714|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  715|      0|                });
  716|  27.5k|            }
  717|  27.5k|            extension_end = end;
  718|  27.5k|            output.push('-');
  719|  27.5k|            output.extend(to_lowercase(subtag));
  720|  27.5k|            state = State::InExtension { expected: false };
  721|   111k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  722|  24.4k|            extlangs_count += 1;
  723|  24.4k|            if extlangs_count > 3 {
  724|  2.32k|                return Err(LanguageTagParseError {
  725|  2.32k|                    kind: TagParseErrorKind::TooManyExtlangs,
  726|  2.32k|                });
  727|  22.1k|            }
  728|  22.1k|            // valid extlangs
  729|  22.1k|            extlang_end = end;
  730|  22.1k|            output.push('-');
  731|  22.1k|            output.extend(to_lowercase(subtag));
  732|  87.3k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  733|  63.4k|            && subtag.len() == 4
  734|  23.3k|            && is_alphabetic(subtag)
  735|  23.3k|        {
  736|  23.3k|            // Script
  737|  23.3k|            script_end = end;
  738|  23.3k|            output.push('-');
  739|  23.3k|            output.extend(to_uppercase_first(subtag));
  740|  23.3k|            state = State::AfterScript;
  741|  63.9k|        } else if (state == State::AfterLanguage
  742|  36.3k|            || state == State::AfterExtLang
  743|  23.9k|            || state == State::AfterScript)
  744|  51.9k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  745|  10.1k|                || subtag.len() == 3 && is_numeric(subtag))
  746|  41.7k|        {
  747|  41.7k|            // Region
  748|  41.7k|            region_end = end;
  749|  41.7k|            output.push('-');
  750|  41.7k|            output.extend(to_uppercase(subtag));
  751|  41.7k|            state = State::AfterRegion;
  752|  41.7k|        } else if (state == State::AfterLanguage
  753|  16.6k|            || state == State::AfterExtLang
  754|  12.3k|            || state == State::AfterScript
  755|  12.0k|            || state == State::AfterRegion)
  756|  22.2k|            && is_alphanumeric(subtag)
  757|  22.2k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  758|  8.32k|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  759|  13.8k|        {
  760|  13.8k|            // Variant
  761|  13.8k|            variant_end = end;
  762|  13.8k|            output.push('-');
  763|  13.8k|            output.extend(to_lowercase(subtag));
  764|  13.8k|            state = State::AfterRegion;
  765|  13.8k|        } else {
  766|  8.32k|            return Err(LanguageTagParseError {
  767|  8.32k|                kind: TagParseErrorKind::InvalidSubtag,
  768|  8.32k|            });
  769|       |        }
  770|       |    }
  771|       |
  772|       |    //We make sure we are in a correct final state
  773|   352k|    if let State::InExtension { expected: true } = state {
  774|  37.2k|        return Err(LanguageTagParseError {
  775|  37.2k|            kind: TagParseErrorKind::EmptyExtension,
  776|  37.2k|        });
  777|   314k|    }
  778|   314k|    if let State::InPrivateUse { expected: true } = state {
  779|  8.09k|        return Err(LanguageTagParseError {
  780|  8.09k|            kind: TagParseErrorKind::EmptyPrivateUse,
  781|  8.09k|        });
  782|   306k|    }
  783|   306k|
  784|   306k|    //We make sure we have not skipped anyone
  785|   306k|    if extlang_end < language_end {
  786|   293k|        extlang_end = language_end;
  787|   293k|    }
  788|   306k|    if script_end < extlang_end {
  789|   284k|        script_end = extlang_end;
  790|   284k|    }
  791|   306k|    if region_end < script_end {
  792|   278k|        region_end = script_end;
  793|   278k|    }
  794|   306k|    if variant_end < region_end {
  795|   296k|        variant_end = region_end;
  796|   296k|    }
  797|   306k|    if extension_end < variant_end {
  798|   294k|        extension_end = variant_end;
  799|   294k|    }
  800|       |
  801|   306k|    Ok(TagElementsPositions {
  802|   306k|        language_end,
  803|   306k|        extlang_end,
  804|   306k|        script_end,
  805|   306k|        region_end,
  806|   306k|        variant_end,
  807|   306k|        extension_end,
  808|   306k|    })
  809|   422k|}
_RINvCsl9ThLYvim7w_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECsbS7gf8MXAex_5oxrdf:
  587|   518k|fn parse_language_tag(
  588|   518k|    input: &str,
  589|   518k|    output: &mut impl OutputBuffer,
  590|   518k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  591|       |    //grandfathered tags
  592|   518k|    if let Some(tag) = GRANDFATHEREDS
  593|   518k|        .iter()
  594|   518k|        .find(|record| record.eq_ignore_ascii_case(input))
  595|       |    {
  596|      0|        output.push_str(tag);
  597|      0|        Ok(TagElementsPositions {
  598|      0|            language_end: tag.len(),
  599|      0|            extlang_end: tag.len(),
  600|      0|            script_end: tag.len(),
  601|      0|            region_end: tag.len(),
  602|      0|            variant_end: tag.len(),
  603|      0|            extension_end: tag.len(),
  604|      0|        })
  605|   518k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  606|       |        // private use
  607|  96.7k|        if !is_alphanumeric_or_dash(input) {
  608|      0|            Err(LanguageTagParseError {
  609|      0|                kind: TagParseErrorKind::ForbiddenChar,
  610|      0|            })
  611|  96.7k|        } else if input.len() == 2 {
  612|      7|            Err(LanguageTagParseError {
  613|      7|                kind: TagParseErrorKind::EmptyPrivateUse,
  614|      7|            })
  615|       |        } else {
  616|  96.7k|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  617|  96.7k|            Ok(TagElementsPositions {
  618|  96.7k|                language_end: input.len(),
  619|  96.7k|                extlang_end: input.len(),
  620|  96.7k|                script_end: input.len(),
  621|  96.7k|                region_end: input.len(),
  622|  96.7k|                variant_end: input.len(),
  623|  96.7k|                extension_end: input.len(),
  624|  96.7k|            })
  625|       |        }
  626|       |    } else {
  627|   422k|        parse_langtag(input, output)
  628|       |    }
  629|   518k|}
_RINvXsr_Csl9ThLYvim7w_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECsbS7gf8MXAex_5oxrdf:
  571|  96.7k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Csl9ThLYvim7w_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECsbS7gf8MXAex_5oxrdf:
  571|   442k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Csl9ThLYvim7w_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECsbS7gf8MXAex_5oxrdf:
  571|  41.7k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Csl9ThLYvim7w_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECsbS7gf8MXAex_5oxrdf:
  571|  23.3k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCsl9ThLYvim7w_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0CsbS7gf8MXAex_5oxrdf:
  594|  13.4M|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvMCsl9ThLYvim7w_10oxilangtagINtB2_11LanguageTagNtNtCs8f6x4lOZV33_5alloc6string6StringE10into_innerCsbS7gf8MXAex_5oxrdf:
   62|  9.04k|    pub fn into_inner(self) -> T {
   63|  9.04k|        self.tag
   64|  9.04k|    }
_RNvMCsl9ThLYvim7w_10oxilangtagINtB2_11LanguageTagNtNtCs8f6x4lOZV33_5alloc6string6StringE5parseCsbS7gf8MXAex_5oxrdf:
   49|  9.36k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   50|  9.36k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   51|  9.04k|        Ok(Self { tag, positions })
   52|  9.36k|    }
_RNvCsl9ThLYvim7w_10oxilangtag10is_numericCsbS7gf8MXAex_5oxrdf:
  876|  6.25k|fn is_numeric(s: &str) -> bool {
  877|  6.25k|    s.chars().all(|x| x.is_ascii_digit())
  878|  6.25k|}
_RNvCsl9ThLYvim7w_10oxilangtag12to_lowercaseCsbS7gf8MXAex_5oxrdf:
  903|   442k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  904|   442k|    s.chars().map(|c| c.to_ascii_lowercase())
  905|   442k|}
_RNvCsl9ThLYvim7w_10oxilangtag12to_uppercaseCsbS7gf8MXAex_5oxrdf:
  891|  41.7k|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  892|  41.7k|    s.chars().map(|c| c.to_ascii_uppercase())
  893|  41.7k|}
_RNvCsl9ThLYvim7w_10oxilangtag13is_alphabeticCsbS7gf8MXAex_5oxrdf:
  871|   471k|fn is_alphabetic(s: &str) -> bool {
  872|   471k|    s.chars().all(|x| x.is_ascii_alphabetic())
  873|   471k|}
_RNvCsl9ThLYvim7w_10oxilangtag15is_alphanumericCsbS7gf8MXAex_5oxrdf:
  881|   125k|fn is_alphanumeric(s: &str) -> bool {
  882|   125k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  883|   125k|}
_RNvCsl9ThLYvim7w_10oxilangtag18to_uppercase_firstCsbS7gf8MXAex_5oxrdf:
  897|  23.3k|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  898|  23.3k|    let mut chars = s.chars();
  899|  23.3k|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  900|  23.3k|}
_RNvCsl9ThLYvim7w_10oxilangtag23is_alphanumeric_or_dashCsbS7gf8MXAex_5oxrdf:
  886|  96.7k|fn is_alphanumeric_or_dash(s: &str) -> bool {
  887|  96.7k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  888|  96.7k|}
_RNvMsv_Csl9ThLYvim7w_10oxilangtagNtB5_14SubTagIterator3newCsbS7gf8MXAex_5oxrdf:
  850|   422k|    fn new(input: &'a str) -> Self {
  851|   422k|        Self {
  852|   422k|            split: input.split('-'),
  853|   422k|            position: 0,
  854|   422k|        }
  855|   422k|    }
_RNvXsq_Csl9ThLYvim7w_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsbS7gf8MXAex_5oxrdf:
  563|   292k|    fn push(&mut self, _: char) {}
_RNvXsw_Csl9ThLYvim7w_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4nextCsbS7gf8MXAex_5oxrdf:
  862|  1.00M|    fn next(&mut self) -> Option<(&'a str, usize)> {
  863|  1.00M|        let tag = self.split.next()?;
  864|   653k|        let tag_end = self.position + tag.len();
  865|   653k|        self.position = tag_end + 1;
  866|   653k|        Some((tag, tag_end))
  867|  1.00M|    }
_RNvXso_Csl9ThLYvim7w_10oxilangtagNtB5_21LanguageTagParseErrorNtNtCshZc3FwCJ069_4core3fmt7Display3fmt:
  490|   115k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  491|   115k|        match self.kind {
  492|       |            TagParseErrorKind::EmptyExtension => {
  493|  42.0k|                write!(f, "If an extension subtag is present, it must not be empty")
  494|       |            }
  495|       |            TagParseErrorKind::EmptyPrivateUse => {
  496|  8.09k|                write!(f, "If the `x` subtag is present, it must not be empty")
  497|       |            }
  498|       |            TagParseErrorKind::ForbiddenChar => {
  499|      0|                write!(f, "The langtag contains a char not allowed")
  500|       |            }
  501|  8.32k|            TagParseErrorKind::InvalidSubtag => write!(
  502|  8.32k|                f,
  503|  8.32k|                "A subtag fails to parse, it does not match any other subtags"
  504|  8.32k|            ),
  505|  48.0k|            TagParseErrorKind::InvalidLanguage => write!(f, "The given language subtag is invalid"),
  506|       |            TagParseErrorKind::SubtagTooLong => {
  507|  6.50k|                write!(f, "A subtag may be eight characters in length at maximum")
  508|       |            }
  509|     37|            TagParseErrorKind::EmptySubtag => write!(f, "A subtag should not be empty"),
  510|       |            TagParseErrorKind::TooManyExtlangs => {
  511|  2.32k|                write!(f, "At maximum three extlangs are allowed")
  512|       |            }
  513|       |        }
  514|   115k|    }
_RNCNvCsl9ThLYvim7w_10oxilangtag13is_alphabetic0B3_:
  872|  1.19M|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCsl9ThLYvim7w_10oxilangtag10is_numeric0B3_:
  877|  6.25k|    s.chars().all(|x| x.is_ascii_digit())
_RNCNvCsl9ThLYvim7w_10oxilangtag15is_alphanumeric0B3_:
  882|   288k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNCNvCsl9ThLYvim7w_10oxilangtag23is_alphanumeric_or_dash0B3_:
  887|  2.43M|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')

_RNvMs12_CsikbtAEUxupI_5oxiriNtB6_11ParserInput11starts_withCsbS7gf8MXAex_5oxrdf:
 1305|  4.43M|    fn starts_with(&self, c: char) -> bool {
 1306|  4.43M|        self.value.as_str().starts_with(c)
 1307|  4.43M|    }
_RNvMs12_CsikbtAEUxupI_5oxiriNtB6_11ParserInput4nextCsbS7gf8MXAex_5oxrdf:
 1290|  20.9M|    fn next(&mut self) -> Option<char> {
 1291|  20.9M|        if let Some(head) = self.value.next() {
 1292|  17.6M|            self.position += head.len_utf8();
 1293|  17.6M|            Some(head)
 1294|       |        } else {
 1295|  3.33M|            None
 1296|       |        }
 1297|  20.9M|    }
_RNvMs12_CsikbtAEUxupI_5oxiriNtB6_11ParserInput5frontCsbS7gf8MXAex_5oxrdf:
 1300|  4.82M|    fn front(&self) -> Option<char> {
 1301|  4.82M|        self.value.clone().next()
 1302|  4.82M|    }
_RNvXs10_CsikbtAEUxupI_5oxiriNtB6_16VoidOutputBufferNtB6_12OutputBuffer3lenCsbS7gf8MXAex_5oxrdf:
 1241|  12.7M|    fn len(&self) -> usize {
 1242|  12.7M|        self.len
 1243|  12.7M|    }
_RNvXs10_CsikbtAEUxupI_5oxiriNtB6_16VoidOutputBufferNtB6_12OutputBuffer4pushCsbS7gf8MXAex_5oxrdf:
 1221|  16.7M|    fn push(&mut self, c: char) {
 1222|  16.7M|        self.len += c.len_utf8();
 1223|  16.7M|    }
_RNvXs10_CsikbtAEUxupI_5oxiriNtB6_16VoidOutputBufferNtB6_12OutputBuffer5clearCsbS7gf8MXAex_5oxrdf:
 1231|   144k|    fn clear(&mut self) {
 1232|   144k|        self.len = 0;
 1233|   144k|    }
_RNvXs10_CsikbtAEUxupI_5oxiriNtB6_16VoidOutputBufferNtB6_12OutputBuffer6as_strCsbS7gf8MXAex_5oxrdf:
 1246|  6.35M|    fn as_str(&self) -> &str {
 1247|  6.35M|        ""
 1248|  6.35M|    }
_RNvXs10_CsikbtAEUxupI_5oxiriNtB6_16VoidOutputBufferNtB6_12OutputBuffer8truncateCsbS7gf8MXAex_5oxrdf:
 1236|   340k|    fn truncate(&mut self, new_len: usize) {
 1237|   340k|        self.len = new_len;
 1238|   340k|    }
_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECsbS7gf8MXAex_5oxrdf:
 1739|   504k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1740|   504k|        Err(IriParseError { kind })
 1741|   504k|    }
_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_10parse_path0ECsbS7gf8MXAex_5oxrdf:
 1705|  2.20M|    fn read_url_codepoint_or_echar(
 1706|  2.20M|        &mut self,
 1707|  2.20M|        c: char,
 1708|  2.20M|        valid: impl Fn(char) -> bool,
 1709|  2.20M|    ) -> Result<(), IriParseError> {
 1710|  2.20M|        if UNCHECKED || valid(c) {
 1711|  2.10M|            self.output.push(c);
 1712|  2.10M|            Ok(())
 1713|   101k|        } else if c == '%' {
 1714|  14.1k|            self.read_echar()
 1715|       |        } else {
 1716|  87.2k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1717|       |        }
 1718|  2.20M|    }
_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_11parse_query0ECsbS7gf8MXAex_5oxrdf:
 1705|   394k|    fn read_url_codepoint_or_echar(
 1706|   394k|        &mut self,
 1707|   394k|        c: char,
 1708|   394k|        valid: impl Fn(char) -> bool,
 1709|   394k|    ) -> Result<(), IriParseError> {
 1710|   394k|        if UNCHECKED || valid(c) {
 1711|   352k|            self.output.push(c);
 1712|   352k|            Ok(())
 1713|  42.6k|        } else if c == '%' {
 1714|  15.4k|            self.read_echar()
 1715|       |        } else {
 1716|  27.1k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1717|       |        }
 1718|   394k|    }
_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_14parse_fragment0ECsbS7gf8MXAex_5oxrdf:
 1705|   333k|    fn read_url_codepoint_or_echar(
 1706|   333k|        &mut self,
 1707|   333k|        c: char,
 1708|   333k|        valid: impl Fn(char) -> bool,
 1709|   333k|    ) -> Result<(), IriParseError> {
 1710|   333k|        if UNCHECKED || valid(c) {
 1711|   299k|            self.output.push(c);
 1712|   299k|            Ok(())
 1713|  34.0k|        } else if c == '%' {
 1714|  15.0k|            self.read_echar()
 1715|       |        } else {
 1716|  18.9k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1717|       |        }
 1718|   333k|    }
_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_15parse_authority0ECsbS7gf8MXAex_5oxrdf:
 1705|   498k|    fn read_url_codepoint_or_echar(
 1706|   498k|        &mut self,
 1707|   498k|        c: char,
 1708|   498k|        valid: impl Fn(char) -> bool,
 1709|   498k|    ) -> Result<(), IriParseError> {
 1710|   498k|        if UNCHECKED || valid(c) {
 1711|   472k|            self.output.push(c);
 1712|   472k|            Ok(())
 1713|  25.9k|        } else if c == '%' {
 1714|  15.7k|            self.read_echar()
 1715|       |        } else {
 1716|  10.1k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1717|       |        }
 1718|   498k|    }
_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_19parse_relative_path0ECsbS7gf8MXAex_5oxrdf:
 1705|   949k|    fn read_url_codepoint_or_echar(
 1706|   949k|        &mut self,
 1707|   949k|        c: char,
 1708|   949k|        valid: impl Fn(char) -> bool,
 1709|   949k|    ) -> Result<(), IriParseError> {
 1710|   949k|        if UNCHECKED || valid(c) {
 1711|   810k|            self.output.push(c);
 1712|   810k|            Ok(())
 1713|   139k|        } else if c == '%' {
 1714|  33.1k|            self.read_echar()
 1715|       |        } else {
 1716|   106k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1717|       |        }
 1718|   949k|    }
_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNvB7_28is_iunreserved_or_sub_delimsECsbS7gf8MXAex_5oxrdf:
 1705|   375k|    fn read_url_codepoint_or_echar(
 1706|   375k|        &mut self,
 1707|   375k|        c: char,
 1708|   375k|        valid: impl Fn(char) -> bool,
 1709|   375k|    ) -> Result<(), IriParseError> {
 1710|   375k|        if UNCHECKED || valid(c) {
 1711|   356k|            self.output.push(c);
 1712|   356k|            Ok(())
 1713|  18.4k|        } else if c == '%' {
 1714|  11.2k|            self.read_echar()
 1715|       |        } else {
 1716|  7.19k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1717|       |        }
 1718|   375k|    }
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10parse_path0CsbS7gf8MXAex_5oxrdf:
 1665|  2.20M|                Some(c) => self.read_url_codepoint_or_echar(c, |c| {
 1666|  2.20M|                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1667|  2.20M|                })?,
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0CsbS7gf8MXAex_5oxrdf:
 1723|  95.4k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0CsbS7gf8MXAex_5oxrdf:
 1724|  49.2k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E11parse_query0CsbS7gf8MXAex_5oxrdf:
 1679|   394k|                self.read_url_codepoint_or_echar(c, |c| {
 1680|   394k|                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?' | '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1681|   276k|                })?
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E14parse_fragment0CsbS7gf8MXAex_5oxrdf:
 1690|   333k|            self.read_url_codepoint_or_echar(c, |c| {
 1691|   333k|                is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?')
 1692|   333k|            })?;
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E15parse_authority0CsbS7gf8MXAex_5oxrdf:
 1513|   498k|                    self.read_url_codepoint_or_echar(c, |c| {
 1514|   498k|                        is_iunreserved_or_sub_delims(c) || c == ':'
 1515|   498k|                    })?;
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E19parse_relative_path0CsbS7gf8MXAex_5oxrdf:
 1472|   949k|            self.read_url_codepoint_or_echar(c, |c| is_iunreserved_or_sub_delims(c) || c == '@')?;
_RNvMCsikbtAEUxupI_5oxiriINtB2_6IriRefNtNtCs8f6x4lOZV33_5alloc6string6StringE10into_innerCsbS7gf8MXAex_5oxrdf:
  185|  2.97M|    pub fn into_inner(self) -> T {
  186|  2.97M|        self.iri
  187|  2.97M|    }
_RNvMCsikbtAEUxupI_5oxiriINtB2_6IriRefNtNtCs8f6x4lOZV33_5alloc6string6StringE11is_absoluteCsbS7gf8MXAex_5oxrdf:
  199|  3.19M|    pub fn is_absolute(&self) -> bool {
  200|  3.19M|        self.positions.scheme_end != 0
  201|  3.19M|    }
_RNvMCsikbtAEUxupI_5oxiriINtB2_6IriRefNtNtCs8f6x4lOZV33_5alloc6string6StringE5parseCsbS7gf8MXAex_5oxrdf:
   58|  3.69M|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  3.69M|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  3.19M|        Ok(Self { iri, positions })
   61|  3.69M|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCsbS7gf8MXAex_5oxrdf:
 1521|   351k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1522|   351k|        if self.input.starts_with('[') {
 1523|       |            // IP v6
 1524|   246k|            let start_position = self.input.position;
 1525|  2.12M|            while let Some(c) = self.input.next() {
 1526|  2.09M|                self.output.push(c);
 1527|  2.09M|                if c == ']' {
 1528|   213k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1529|   213k|                    if !UNCHECKED {
 1530|   213k|                        if ip.starts_with('v') || ip.starts_with('V') {
 1531|  84.4k|                            self.validate_ip_v_future(ip)?;
 1532|   129k|                        } else if let Err(error) = Ipv6Addr::from_str(ip) {
 1533|  29.1k|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1534|   100k|                        }
 1535|      0|                    }
 1536|       |
 1537|   114k|                    let c = self.input.next();
 1538|   114k|                    return match c {
 1539|       |                        Some(':') => {
 1540|  41.0k|                            self.output.push(':');
 1541|  41.0k|                            self.parse_port()
 1542|       |                        }
 1543|       |                        None | Some('/') | Some('?') | Some('#') => {
 1544|  33.4k|                            self.output_positions.authority_end = self.output.len();
 1545|  33.4k|                            self.parse_path_start(c)
 1546|       |                        }
 1547|  16.1k|                        Some(c) => {
 1548|  16.1k|                            if UNCHECKED {
 1549|      0|                                self.output.push(c);
 1550|      0|                                continue;
 1551|       |                            } else {
 1552|  16.1k|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1553|       |                            }
 1554|       |                        }
 1555|       |                    };
 1556|  1.88M|                }
 1557|       |            }
 1558|  32.7k|            if UNCHECKED {
 1559|       |                // We consider it's valid even if it's not finished
 1560|      0|                self.output_positions.authority_end = self.output.len();
 1561|      0|                self.parse_path_start(None)
 1562|       |            } else {
 1563|  32.7k|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1564|       |            }
 1565|       |        } else {
 1566|       |            // Other host
 1567|       |            loop {
 1568|   469k|                let c = self.input.next();
 1569|   469k|                match c {
 1570|       |                    Some(':') => {
 1571|  32.4k|                        self.output.push(':');
 1572|  32.4k|                        return self.parse_port();
 1573|       |                    }
 1574|       |                    None | Some('/') | Some('?') | Some('#') => {
 1575|  45.4k|                        self.output_positions.authority_end = self.output.len();
 1576|  45.4k|                        return self.parse_path_start(c);
 1577|       |                    }
 1578|   375k|                    Some(c) => self.read_url_codepoint_or_echar(c, is_iunreserved_or_sub_delims)?,
 1579|       |                }
 1580|       |            }
 1581|       |        }
 1582|   310k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCsbS7gf8MXAex_5oxrdf:
 1634|  3.22M|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1635|       |        loop {
 1636|  5.38M|            let c = self.input.next();
 1637|  5.38M|            match c {
 1638|       |                None | Some('/') | Some('?') | Some('#') => {
 1639|  3.07M|                    if self.output.as_str().ends_with("/..") {
 1640|      0|                        self.remove_last_segment();
 1641|      0|                        self.remove_last_segment();
 1642|      0|                        self.output.push('/');
 1643|  3.07M|                    } else if self.output.as_str().ends_with("/.") {
 1644|      0|                        self.remove_last_segment();
 1645|      0|                        self.output.push('/');
 1646|  3.07M|                    } else if c == Some('/') {
 1647|  44.4k|                        self.output.push('/');
 1648|  3.13M|                    }
 1649|       |
 1650|  3.17M|                    if c == Some('?') {
 1651|  60.8k|                        self.output_positions.path_end = self.output.len();
 1652|  60.8k|                        self.output.push('?');
 1653|  60.8k|                        return self.parse_query();
 1654|  3.11M|                    } else if c == Some('#') {
 1655|  43.1k|                        self.output_positions.path_end = self.output.len();
 1656|  43.1k|                        self.output_positions.query_end = self.output.len();
 1657|  43.1k|                        self.output.push('#');
 1658|  43.1k|                        return self.parse_fragment();
 1659|  3.07M|                    } else if c.is_none() {
 1660|  3.02M|                        self.output_positions.path_end = self.output.len();
 1661|  3.02M|                        self.output_positions.query_end = self.output.len();
 1662|  3.02M|                        return Ok(());
 1663|  44.4k|                    }
 1664|       |                }
 1665|  2.20M|                Some(c) => self.read_url_codepoint_or_echar(c, |c| {
 1666|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1667|  2.20M|                })?,
 1668|       |            }
 1669|       |        }
 1670|  3.22M|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCsbS7gf8MXAex_5oxrdf:
 1584|  73.4k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1585|       |        loop {
 1586|  87.3k|            let c = self.input.next();
 1587|  87.3k|            match c {
 1588|       |                Some('/') | Some('?') | Some('#') | None => {
 1589|  37.5k|                    self.output_positions.authority_end = self.output.len();
 1590|  37.5k|                    return self.parse_path_start(c);
 1591|       |                }
 1592|  35.3k|                Some(c) => {
 1593|  35.3k|                    if UNCHECKED || c.is_ascii_digit() {
 1594|  13.9k|                        self.output.push(c)
 1595|       |                    } else {
 1596|  21.4k|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1597|       |                    }
 1598|       |                }
 1599|       |            }
 1600|       |        }
 1601|  58.9k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCsbS7gf8MXAex_5oxrdf:
 1720|   104k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1721|   104k|        let c1 = self.input.next();
 1722|   104k|        let c2 = self.input.next();
 1723|   104k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1724|  49.4k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1725|       |        {
 1726|  42.8k|            self.output.push('%');
 1727|  42.8k|            self.output.push(c1.unwrap());
 1728|  42.8k|            self.output.push(c2.unwrap());
 1729|  42.8k|            Ok(())
 1730|       |        } else {
 1731|  61.9k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1732|  61.9k|                Some('%'),
 1733|  61.9k|                c1,
 1734|  61.9k|                c2,
 1735|  61.9k|            ]))
 1736|       |        }
 1737|   104k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCsbS7gf8MXAex_5oxrdf:
 1672|   102k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1673|   460k|        while let Some(c) = self.input.next() {
 1674|   413k|            if c == '#' {
 1675|  19.1k|                self.output_positions.query_end = self.output.len();
 1676|  19.1k|                self.output.push('#');
 1677|  19.1k|                return self.parse_fragment();
 1678|       |            } else {
 1679|   394k|                self.read_url_codepoint_or_echar(c, |c| {
 1680|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?' | '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1681|   394k|                })?
 1682|       |            }
 1683|       |        }
 1684|  47.0k|        self.output_positions.query_end = self.output.len();
 1685|  47.0k|        Ok(())
 1686|   102k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCsbS7gf8MXAex_5oxrdf:
 1362|  3.27M|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1363|       |        loop {
 1364|  9.12M|            let c = self.input.next();
 1365|  9.08M|            match c {
 1366|  9.08M|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1367|  5.85M|                    self.output.push(c)
 1368|       |                }
 1369|       |                Some(':') => {
 1370|  3.12M|                    self.output.push(':');
 1371|  3.12M|                    self.output_positions.scheme_end = self.output.len();
 1372|  3.12M|                    self.input_scheme_end = self.input.position;
 1373|  3.12M|                    return if self.input.starts_with('/') {
 1374|   169k|                        self.input.next();
 1375|   169k|                        self.output.push('/');
 1376|   169k|                        self.parse_path_or_authority()
 1377|       |                    } else {
 1378|  2.95M|                        self.output_positions.authority_end = self.output.len();
 1379|  2.95M|                        self.parse_path()
 1380|       |                    };
 1381|       |                }
 1382|       |                _ => {
 1383|   144k|                    self.input = ParserInput {
 1384|   144k|                        value: self.iri.chars(),
 1385|   144k|                        position: 0,
 1386|   144k|                    }; // reset
 1387|   144k|                    self.output.clear();
 1388|   144k|                    return self.parse_relative();
 1389|       |                }
 1390|       |            }
 1391|       |        }
 1392|  3.27M|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCsbS7gf8MXAex_5oxrdf:
 1688|  76.5k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1689|   381k|        while let Some(c) = self.input.next() {
 1690|   333k|            self.read_url_codepoint_or_echar(c, |c| {
 1691|       |                is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?')
 1692|   333k|            })?;
 1693|       |        }
 1694|  48.6k|        Ok(())
 1695|  76.5k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_relativeCsbS7gf8MXAex_5oxrdf:
 1405|   550k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1406|   550k|        if let Some(base) = self.base {
 1407|      0|            match self.input.front() {
 1408|       |                None => {
 1409|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1410|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1411|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1412|      0|                    self.output_positions.path_end = base.positions.path_end;
 1413|      0|                    self.output_positions.query_end = base.positions.query_end;
 1414|      0|                    Ok(())
 1415|       |                }
 1416|       |                Some('/') => {
 1417|      0|                    self.input.next();
 1418|      0|                    self.parse_relative_slash(&base)
 1419|       |                }
 1420|       |                Some('?') => {
 1421|      0|                    self.input.next();
 1422|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1423|      0|                    self.output.push('?');
 1424|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1425|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1426|      0|                    self.output_positions.path_end = base.positions.path_end;
 1427|      0|                    self.parse_query()
 1428|       |                }
 1429|       |                Some('#') => {
 1430|      0|                    self.input.next();
 1431|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1432|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1433|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1434|      0|                    self.output_positions.path_end = base.positions.path_end;
 1435|      0|                    self.output_positions.query_end = base.positions.query_end;
 1436|      0|                    self.output.push('#');
 1437|      0|                    self.parse_fragment()
 1438|       |                }
 1439|       |                _ => {
 1440|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1441|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1442|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1443|      0|                    self.output_positions.path_end = base.positions.path_end;
 1444|      0|                    self.remove_last_segment();
 1445|      0|                    if self.output.len() > base.positions.scheme_end {
 1446|      0|                        // We have some path or authority, we keep a base '/'
 1447|      0|                        self.output.push('/');
 1448|      0|                    }
 1449|      0|                    self.parse_relative_path()
 1450|       |                }
 1451|       |            }
 1452|       |        } else {
 1453|   550k|            self.output_positions.scheme_end = 0;
 1454|   550k|            self.input_scheme_end = 0;
 1455|   550k|            if self.input.starts_with('/') {
 1456|   236k|                self.input.next();
 1457|   236k|                self.output.push('/');
 1458|   236k|                self.parse_path_or_authority()
 1459|       |            } else {
 1460|   314k|                self.output_positions.authority_end = 0;
 1461|   314k|                self.parse_relative_path()
 1462|       |            }
 1463|       |        }
 1464|   550k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCsbS7gf8MXAex_5oxrdf:
 1495|   368k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1496|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1497|       |        loop {
 1498|   849k|            let c = self.input.next();
 1499|   849k|            match c {
 1500|       |                Some('@') => {
 1501|  11.1k|                    self.output.push('@');
 1502|  11.1k|                    return self.parse_host();
 1503|       |                }
 1504|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1505|   290k|                    self.input = ParserInput {
 1506|   290k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1507|   290k|                        position: self.input_scheme_end + 2,
 1508|   290k|                    };
 1509|   290k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1510|   290k|                    return self.parse_host();
 1511|       |                }
 1512|   498k|                Some(c) => {
 1513|   498k|                    self.read_url_codepoint_or_echar(c, |c| {
 1514|       |                        is_iunreserved_or_sub_delims(c) || c == ':'
 1515|   498k|                    })?;
 1516|       |                }
 1517|       |            }
 1518|       |        }
 1519|   319k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCsbS7gf8MXAex_5oxrdf:
 1603|   171k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1604|   171k|        match c {
 1605|       |            None => {
 1606|  66.3k|                self.output_positions.path_end = self.output.len();
 1607|  66.3k|                self.output_positions.query_end = self.output.len();
 1608|  66.3k|                Ok(())
 1609|       |            }
 1610|       |            Some('?') => {
 1611|  41.1k|                self.output_positions.path_end = self.output.len();
 1612|  41.1k|                self.output.push('?');
 1613|  41.1k|                self.parse_query()
 1614|       |            }
 1615|       |            Some('#') => {
 1616|  14.2k|                self.output_positions.path_end = self.output.len();
 1617|  14.2k|                self.output_positions.query_end = self.output.len();
 1618|  14.2k|                self.output.push('#');
 1619|  14.2k|                self.parse_fragment()
 1620|       |            }
 1621|       |            Some('/') => {
 1622|  50.0k|                self.output.push('/');
 1623|  50.0k|                self.parse_path()
 1624|       |            }
 1625|      0|            Some(c) => {
 1626|      0|                self.read_url_codepoint_or_echar(c, |c| {
 1627|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1628|      0|                })?;
 1629|      0|                self.parse_path()
 1630|       |            }
 1631|       |        }
 1632|   171k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCsbS7gf8MXAex_5oxrdf:
 1348|  3.69M|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1349|  3.69M|        match self.input.front() {
 1350|       |            Some(':') => {
 1351|  15.8k|                if UNCHECKED {
 1352|      0|                    self.parse_scheme()
 1353|       |                } else {
 1354|  15.8k|                    self.parse_error(IriParseErrorKind::NoScheme)
 1355|       |                }
 1356|       |            }
 1357|  3.64M|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1358|   406k|            _ => self.parse_relative(),
 1359|       |        }
 1360|  3.69M|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E19parse_relative_pathCsbS7gf8MXAex_5oxrdf:
 1466|   314k|    fn parse_relative_path(&mut self) -> Result<(), IriParseError> {
 1467|  1.13M|        while let Some(c) = self.input.front() {
 1468|  1.02M|            if matches!(c, '/' | '?' | '#') {
 1469|  75.8k|                break;
 1470|   949k|            }
 1471|   949k|            self.input.next();
 1472|   949k|            self.read_url_codepoint_or_echar(c, |c| is_iunreserved_or_sub_delims(c) || c == '@')?;
 1473|       |        }
 1474|   181k|        self.parse_path()
 1475|   314k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E20validate_ip_v_futureCsbS7gf8MXAex_5oxrdf:
 1744|  84.4k|    fn validate_ip_v_future(&self, ip: &str) -> Result<(), IriParseError> {
 1745|  84.4k|        let mut chars = ip.chars();
 1746|       |
 1747|  84.4k|        let c = chars.next().ok_or(IriParseError {
 1748|  84.4k|            kind: IriParseErrorKind::InvalidHostCharacter(']'),
 1749|  84.4k|        })?;
 1750|  84.4k|        if !matches!(c, 'v' | 'V') {
 1751|      0|            return self.parse_error(IriParseErrorKind::InvalidHostCharacter(c));
 1752|  84.4k|        };
 1753|  84.4k|
 1754|  84.4k|        let mut with_a_version = false;
 1755|   186k|        for c in &mut chars {
 1756|   174k|            if c == '.' {
 1757|  38.9k|                break;
 1758|   135k|            } else if c.is_ascii_hexdigit() {
 1759|   101k|                with_a_version = true;
 1760|   101k|            } else {
 1761|  33.7k|                return self.parse_error(IriParseErrorKind::InvalidHostCharacter(c));
 1762|       |            }
 1763|       |        }
 1764|  50.7k|        if !with_a_version {
 1765|  15.2k|            return self.parse_error(IriParseErrorKind::InvalidHostCharacter(
 1766|  15.2k|                chars.next().unwrap_or(']'),
 1767|  15.2k|            ));
 1768|  35.4k|        }
 1769|  35.4k|
 1770|  35.4k|        if chars.as_str().is_empty() {
 1771|  9.75k|            return self.parse_error(IriParseErrorKind::InvalidHostCharacter(']'));
 1772|  25.7k|        };
 1773|   502k|        for c in chars {
 1774|   487k|            if !is_unreserved_or_sub_delims(c) && c != ':' {
 1775|  10.8k|                return self.parse_error(IriParseErrorKind::InvalidHostCharacter(c));
 1776|   476k|            }
 1777|       |        }
 1778|       |
 1779|  14.8k|        Ok(())
 1780|  84.4k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCsbS7gf8MXAex_5oxrdf:
 1394|   405k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1395|   405k|        if self.input.starts_with('/') {
 1396|   368k|            self.input.next();
 1397|   368k|            self.output.push('/');
 1398|   368k|            self.parse_authority()
 1399|       |        } else {
 1400|  37.1k|            self.output_positions.authority_end = self.output.len() - 1;
 1401|  37.1k|            self.parse_path()
 1402|       |        }
 1403|   405k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCsbS7gf8MXAex_5oxrdf:
 1323|  3.69M|    fn parse(
 1324|  3.69M|        iri: &'a str,
 1325|  3.69M|        base: Option<IriRef<&'a str>>,
 1326|  3.69M|        output: &'a mut O,
 1327|  3.69M|    ) -> Result<IriElementsPositions, IriParseError> {
 1328|  3.69M|        let mut parser = Self {
 1329|  3.69M|            iri,
 1330|  3.69M|            base,
 1331|  3.69M|            input: ParserInput {
 1332|  3.69M|                value: iri.chars(),
 1333|  3.69M|                position: 0,
 1334|  3.69M|            },
 1335|  3.69M|            output,
 1336|  3.69M|            output_positions: IriElementsPositions {
 1337|  3.69M|                scheme_end: 0,
 1338|  3.69M|                authority_end: 0,
 1339|  3.69M|                path_end: 0,
 1340|  3.69M|                query_end: 0,
 1341|  3.69M|            },
 1342|  3.69M|            input_scheme_end: 0,
 1343|  3.69M|        };
 1344|  3.69M|        parser.parse_scheme_start()?;
 1345|  3.19M|        Ok(parser.output_positions)
 1346|  3.69M|    }
_RNvMsp_CsikbtAEUxupI_5oxiriINtB5_3IriNtNtCs8f6x4lOZV33_5alloc6string6StringE10into_innerCsbS7gf8MXAex_5oxrdf:
  796|  2.97M|    pub fn into_inner(self) -> T {
  797|  2.97M|        self.0.into_inner()
  798|  2.97M|    }
_RNvMsp_CsikbtAEUxupI_5oxiriINtB5_3IriNtNtCs8f6x4lOZV33_5alloc6string6StringE5parseCsbS7gf8MXAex_5oxrdf:
  556|  3.69M|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|  3.69M|        IriRef::parse(iri)?.try_into()
  558|  3.69M|    }
_RNvXsV_CsikbtAEUxupI_5oxiriINtB5_3IriNtNtCs8f6x4lOZV33_5alloc6string6StringEINtNtCshZc3FwCJ069_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsbS7gf8MXAex_5oxrdf:
 1099|  3.19M|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
 1100|  3.19M|        if iri.is_absolute() {
 1101|  2.97M|            Ok(Self(iri))
 1102|       |        } else {
 1103|   219k|            Err(IriParseError {
 1104|   219k|                kind: IriParseErrorKind::NoScheme,
 1105|   219k|            })
 1106|       |        }
 1107|  3.19M|    }
_RNvXsW_CsikbtAEUxupI_5oxiriNtB5_13IriParseErrorNtNtCshZc3FwCJ069_4core3fmt7Display3fmt:
 1134|   723k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1135|   723k|        match &self.kind {
 1136|   235k|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
 1137|   118k|            IriParseErrorKind::InvalidHostCharacter(c) => {
 1138|   118k|                write!(f, "Invalid character '{c}' in host")
 1139|       |            }
 1140|  29.1k|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({e})"),
 1141|  21.4k|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{c}'"),
 1142|   257k|            IriParseErrorKind::InvalidIriCodePoint(c) => {
 1143|   257k|                write!(f, "Invalid IRI code point '{c}'")
 1144|       |            }
 1145|  61.9k|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
 1146|  61.9k|                f,
 1147|  61.9k|                "Invalid IRI percent encoding '{}'",
 1148|  61.9k|                cs.iter().flatten().cloned().collect::<String>()
 1149|  61.9k|            ),
 1150|       |        }
 1151|   723k|    }
_RNvCsikbtAEUxupI_5oxiri28is_iunreserved_or_sub_delims:
 1783|  4.76M|fn is_iunreserved_or_sub_delims(c: char) -> bool {
 1784|  4.76M|    matches!(c,
 1785|  1.59M|        'a'..='z'
 1786|  1.51M|        | 'A'..='Z'
 1787|  1.35M|        | '0'..='9'
 1788|       |        | '!'
 1789|       |        | '$'
 1790|       |        | '&'
 1791|       |        | '\''
 1792|       |        | '('
 1793|       |        | ')'
 1794|       |        | '*'
 1795|       |        | '+'
 1796|       |        | ','
 1797|       |        | '-'
 1798|       |        | '.'
 1799|       |        | ';'
 1800|       |        | '='
 1801|       |        | '_'
 1802|       |        | '~'
 1803|   276k|        | '\u{A0}'..='\u{D7FF}'
 1804|  41.0k|        | '\u{F900}'..='\u{FDCF}'
 1805|  40.8k|        | '\u{FDF0}'..='\u{FFEF}'
 1806|  40.8k|        | '\u{10000}'..='\u{1FFFD}'
 1807|  40.8k|        | '\u{20000}'..='\u{2FFFD}'
 1808|  40.8k|        | '\u{30000}'..='\u{3FFFD}'
 1809|  40.8k|        | '\u{40000}'..='\u{4FFFD}'
 1810|  40.8k|        | '\u{50000}'..='\u{5FFFD}'
 1811|  40.8k|        | '\u{60000}'..='\u{6FFFD}'
 1812|  40.8k|        | '\u{70000}'..='\u{7FFFD}'
 1813|  40.8k|        | '\u{80000}'..='\u{8FFFD}'
 1814|  40.8k|        | '\u{90000}'..='\u{9FFFD}'
 1815|  40.8k|        | '\u{A0000}'..='\u{AFFFD}'
 1816|  40.7k|        | '\u{B0000}'..='\u{BFFFD}'
 1817|  40.6k|        | '\u{C0000}'..='\u{CFFFD}'
 1818|  33.8k|        | '\u{D0000}'..='\u{DFFFD}'
 1819|  32.8k|        | '\u{E1000}'..='\u{EFFFD}'
 1820|       |    )
 1821|  3.88M|}
_RNvCsikbtAEUxupI_5oxiri27is_unreserved_or_sub_delims:
 1823|   487k|fn is_unreserved_or_sub_delims(c: char) -> bool {
 1824|   487k|    matches!(c,
 1825|  29.5k|        'a'..='z'
 1826|   126k|        | 'A'..='Z'
 1827|  96.1k|        | '0'..='9'
 1828|       |        | '!'
 1829|       |        | '$'
 1830|       |        | '&'
 1831|       |        | '\''
 1832|       |        | '('
 1833|       |        | ')'
 1834|       |        | '*'
 1835|       |        | '+'
 1836|       |        | ','
 1837|       |        | '-'
 1838|       |        | '.'
 1839|       |        | ';'
 1840|       |        | '='
 1841|       |        | '_'
 1842|       |        | '~'
 1843|       |    )
 1844|   174k|}

_RNvXNtCsa8D9DvNAnXy_9thiserror7displayRNtNtCs8f6x4lOZV33_5alloc6string6StringNtB2_9AsDisplay10as_displayCsbS7gf8MXAex_5oxrdf:
   19|  5.84k|    fn as_display(&'a self) -> Self::Target {
   20|  5.84k|        *self
   21|  5.84k|    }
_RNvXNtCsa8D9DvNAnXy_9thiserror7displayRNtNtCsbS7gf8MXAex_5oxrdf10blank_node21BlankNodeIdParseErrorNtB2_9AsDisplay10as_displayBF_:
   19|    917|    fn as_display(&'a self) -> Self::Target {
   20|    917|        *self
   21|    917|    }
_RNvXNtCsa8D9DvNAnXy_9thiserror7displayRNtCsl9ThLYvim7w_10oxilangtag21LanguageTagParseErrorNtB2_9AsDisplay10as_displayCsbS7gf8MXAex_5oxrdf:
   19|    318|    fn as_display(&'a self) -> Self::Target {
   20|    318|        *self
   21|    318|    }
_RNvXNtCsa8D9DvNAnXy_9thiserror7displayRNtCsikbtAEUxupI_5oxiri13IriParseErrorNtB2_9AsDisplay10as_displayCsbS7gf8MXAex_5oxrdf:
   19|  4.60k|    fn as_display(&'a self) -> Self::Target {
   20|  4.60k|        *self
   21|  4.60k|    }
_RNvXNtCsa8D9DvNAnXy_9thiserror7displayRReNtB2_9AsDisplay10as_displayCsieTkyBvGlyt_12oxsdatatypes:
   19|  12.6k|    fn as_display(&'a self) -> Self::Target {
   20|  12.6k|        *self
   21|  12.6k|    }

_RINvCsa0h8KKtWB9J_6nquads5parseARShj1_EB2_:
    9|  56.5k|fn parse<'a>(
   10|  56.5k|    chunks: impl IntoIterator<Item = &'a [u8]>,
   11|  56.5k|    unchecked: bool,
   12|  56.5k|) -> (Vec<Quad>, Vec<String>) {
   13|  56.5k|    let mut quads = Vec::new();
   14|  56.5k|    let mut errors = Vec::new();
   15|  56.5k|    let mut parser = NQuadsParser::new().with_quoted_triples();
   16|  56.5k|    if unchecked {
   17|      0|        parser = parser.unchecked();
   18|  56.5k|    }
   19|  56.5k|    let mut parser = parser.low_level();
   20|   113k|    for chunk in chunks {
   21|  56.5k|        parser.extend_from_slice(chunk);
   22|  4.25M|        while let Some(result) = parser.parse_next() {
   23|  4.19M|            match result {
   24|   123k|                Ok(quad) => quads.push(quad),
   25|  4.07M|                Err(error) => errors.push(error.to_string()),
   26|       |            }
   27|       |        }
   28|       |    }
   29|  56.5k|    parser.end();
   30|   141k|    while let Some(result) = parser.parse_next() {
   31|  84.7k|        match result {
   32|  1.38k|            Ok(quad) => quads.push(quad),
   33|  83.3k|            Err(error) => errors.push(error.to_string()),
   34|       |        }
   35|       |    }
   36|  56.5k|    assert!(parser.is_end());
   37|  56.5k|    (quads, errors)
   38|  56.5k|}
_RINvCsa0h8KKtWB9J_6nquads5parseINtNtNtCshZc3FwCJ069_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_run0EEB2_:
    9|  56.5k|fn parse<'a>(
   10|  56.5k|    chunks: impl IntoIterator<Item = &'a [u8]>,
   11|  56.5k|    unchecked: bool,
   12|  56.5k|) -> (Vec<Quad>, Vec<String>) {
   13|  56.5k|    let mut quads = Vec::new();
   14|  56.5k|    let mut errors = Vec::new();
   15|  56.5k|    let mut parser = NQuadsParser::new().with_quoted_triples();
   16|  56.5k|    if unchecked {
   17|      0|        parser = parser.unchecked();
   18|  56.5k|    }
   19|  56.5k|    let mut parser = parser.low_level();
   20|  7.17M|    for chunk in chunks {
   21|  7.12M|        parser.extend_from_slice(chunk);
   22|  11.3M|        while let Some(result) = parser.parse_next() {
   23|  4.19M|            match result {
   24|   123k|                Ok(quad) => quads.push(quad),
   25|  4.07M|                Err(error) => errors.push(error.to_string()),
   26|       |            }
   27|       |        }
   28|       |    }
   29|  56.5k|    parser.end();
   30|   141k|    while let Some(result) = parser.parse_next() {
   31|  84.7k|        match result {
   32|  1.38k|            Ok(quad) => quads.push(quad),
   33|  83.3k|            Err(error) => errors.push(error.to_string()),
   34|       |        }
   35|       |    }
   36|  56.5k|    assert!(parser.is_end());
   37|  56.5k|    (quads, errors)
   38|  56.5k|}
_RINvCsa0h8KKtWB9J_6nquads5parseINtNtNtCshZc3FwCJ069_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_runs0_0EEB2_:
    9|    411|fn parse<'a>(
   10|    411|    chunks: impl IntoIterator<Item = &'a [u8]>,
   11|    411|    unchecked: bool,
   12|    411|) -> (Vec<Quad>, Vec<String>) {
   13|    411|    let mut quads = Vec::new();
   14|    411|    let mut errors = Vec::new();
   15|    411|    let mut parser = NQuadsParser::new().with_quoted_triples();
   16|    411|    if unchecked {
   17|    411|        parser = parser.unchecked();
   18|    411|    }
   19|    411|    let mut parser = parser.low_level();
   20|  7.27k|    for chunk in chunks {
   21|  6.86k|        parser.extend_from_slice(chunk);
   22|  7.15k|        while let Some(result) = parser.parse_next() {
   23|    290|            match result {
   24|    290|                Ok(quad) => quads.push(quad),
   25|      0|                Err(error) => errors.push(error.to_string()),
   26|       |            }
   27|       |        }
   28|       |    }
   29|    411|    parser.end();
   30|    494|    while let Some(result) = parser.parse_next() {
   31|     83|        match result {
   32|     83|            Ok(quad) => quads.push(quad),
   33|      0|            Err(error) => errors.push(error.to_string()),
   34|       |        }
   35|       |    }
   36|    411|    assert!(parser.is_end());
   37|    411|    (quads, errors)
   38|    411|}
_RNCNvNvCsa0h8KKtWB9J_6nquads1__19___libfuzzer_sys_run0B5_:
   42|  37.3M|    let (quads, errors) = parse(data.split(|c| *c == 0xFF), false);
_RNCNvNvCsa0h8KKtWB9J_6nquads1__19___libfuzzer_sys_runs_0B5_:
   47|  37.3M|        .filter(|c| *c != 0xFF)
_RNCNvNvCsa0h8KKtWB9J_6nquads1__19___libfuzzer_sys_runs0_0B5_:
   56|  35.0k|        let (quads_unchecked, errors_unchecked) = parse(data.split(|c| *c == 0xFF), true);
_RNCNvNvCsa0h8KKtWB9J_6nquads1__19___libfuzzer_sys_runs2_0B5_:
   88|  26.7k|            .map_err(|e| e.to_string())
_RNCNvNvCsa0h8KKtWB9J_6nquads1__19___libfuzzer_sys_runs3_0B5_:
   89|  20.5k|            .and_then(|d| {
   90|  20.5k|                d.split('\n')
   91|  20.5k|                    .filter(|l| !l.trim().is_empty())
   92|  20.5k|                    .map(Quad::from_str)
   93|  20.5k|                    .collect::<Result<Vec<_>, _>>()
   94|  20.5k|                    .map_err(|e| e.to_string())
   95|  20.5k|            }) {
_RNCNCNvNvCsa0h8KKtWB9J_6nquads1__19___libfuzzer_sys_runs3_00B7_:
   91|  63.7k|                    .filter(|l| !l.trim().is_empty())
_RNCNCNvNvCsa0h8KKtWB9J_6nquads1__19___libfuzzer_sys_runs3_0s_0B7_:
   94|  18.5k|                    .map_err(|e| e.to_string())

_RNvMNtCsbS7gf8MXAex_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCsa0h8KKtWB9J_6nquads:
   88|  71.1k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|  71.1k|        BlankNodeRef(match &self.0 {
   90|  22.0k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|  49.0k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|  49.0k|                id: *id,
   93|  49.0k|                str: str.as_str(),
   94|  49.0k|            },
   95|       |        })
   96|  71.1k|    }
_RNvMs1_NtCsbS7gf8MXAex_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCsa0h8KKtWB9J_6nquads:
  179|  71.1k|    pub const fn as_str(self) -> &'a str {
  180|  71.1k|        match self.0 {
  181|  22.0k|            BlankNodeRefContent::Named(id) => id,
  182|  49.0k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  183|       |        }
  184|  71.1k|    }
_RNvMs7_NtCsbS7gf8MXAex_5oxrdf10blank_nodeNtB5_5IdStr6as_strCsa0h8KKtWB9J_6nquads:
  265|  49.0k|    fn as_str(&self) -> &str {
  266|  49.0k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|  49.0k|        str::from_utf8(&self.0[..len]).unwrap()
  268|  49.0k|    }
_RNvXs2_NtCsbS7gf8MXAex_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCshZc3FwCJ069_4core3fmt7Display3fmtCsa0h8KKtWB9J_6nquads:
  220|  71.1k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  221|  71.1k|        write!(f, "_:{}", self.as_str())
  222|  71.1k|    }
_RINvMNtCsbS7gf8MXAex_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedReECslNspdJhbxze_5oxttl:
   49|   322k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   50|   322k|        let id = id.into();
   51|   322k|        if let Some(numerical_id) = to_integer_id(&id) {
   52|   192k|            Self::new_from_unique_id(numerical_id)
   53|       |        } else {
   54|   129k|            Self(BlankNodeContent::Named(id))
   55|       |        }
   56|   322k|    }
_RNvMNtCsbS7gf8MXAex_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idCslNspdJhbxze_5oxttl:
   62|   192k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|   192k|        Self(BlankNodeContent::Anonymous {
   64|   192k|            id: id.to_ne_bytes(),
   65|   192k|            str: IdStr::new(id),
   66|   192k|        })
   67|   192k|    }
_RNvMs7_NtCsbS7gf8MXAex_5oxrdf10blank_nodeNtB5_5IdStr3newCslNspdJhbxze_5oxttl:
  258|   192k|    fn new(id: u128) -> Self {
  259|   192k|        let mut str = [0; 32];
  260|   192k|        write!(&mut str[..], "{id:x}").unwrap();
  261|   192k|        Self(str)
  262|   192k|    }
_RNvNtCsbS7gf8MXAex_5oxrdf10blank_node13to_integer_idCslNspdJhbxze_5oxttl:
  331|   322k|fn to_integer_id(id: &str) -> Option<u128> {
  332|   322k|    let digits = id.as_bytes();
  333|   322k|    let mut value: u128 = 0;
  334|   322k|    if let None | Some(b'0') = digits.first() {
  335|  5.76k|        return None; // No empty string or leading zeros
  336|   316k|    }
  337|  1.85M|    for digit in digits {
  338|  1.66M|        value = value.checked_mul(16)?.checked_add(
  339|  1.66M|            match *digit {
  340|  1.62M|                b'0'..=b'9' => digit - b'0',
  341|  1.34M|                b'a'..=b'f' => digit - b'a' + 10,
  342|   123k|                _ => return None,
  343|       |            }
  344|  1.54M|            .into(),
  345|      0|        )?;
  346|       |    }
  347|   192k|    Some(value)
  348|   322k|}
_RINvMNtCsbS7gf8MXAex_5oxrdf10blank_nodeNtB3_9BlankNode3newReEB5_:
   36|  21.2k|    pub fn new(id: impl Into<String>) -> Result<Self, BlankNodeIdParseError> {
   37|  21.2k|        let id = id.into();
   38|  21.2k|        validate_blank_node_identifier(&id)?;
   39|  20.2k|        Ok(Self::new_unchecked(id))
   40|  21.2k|    }
_RINvMNtCsbS7gf8MXAex_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedNtNtCs8f6x4lOZV33_5alloc6string6StringEB5_:
   49|  20.2k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   50|  20.2k|        let id = id.into();
   51|  20.2k|        if let Some(numerical_id) = to_integer_id(&id) {
   52|  9.06k|            Self::new_from_unique_id(numerical_id)
   53|       |        } else {
   54|  11.2k|            Self(BlankNodeContent::Named(id))
   55|       |        }
   56|  20.2k|    }
_RNCNvMs7_NtCsbS7gf8MXAex_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  266|   386k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
_RNvMNtCsbS7gf8MXAex_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idB4_:
   62|  9.06k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|  9.06k|        Self(BlankNodeContent::Anonymous {
   64|  9.06k|            id: id.to_ne_bytes(),
   65|  9.06k|            str: IdStr::new(id),
   66|  9.06k|        })
   67|  9.06k|    }
_RNvMNtCsbS7gf8MXAex_5oxrdf10blank_nodeNtB2_9BlankNode6as_refB4_:
   88|  5.16k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|  5.16k|        BlankNodeRef(match &self.0 {
   90|  3.20k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|  1.95k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|  1.95k|                id: *id,
   93|  1.95k|                str: str.as_str(),
   94|  1.95k|            },
   95|       |        })
   96|  5.16k|    }
_RNvMs1_NtCsbS7gf8MXAex_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strB7_:
  179|  5.16k|    pub const fn as_str(self) -> &'a str {
  180|  5.16k|        match self.0 {
  181|  3.20k|            BlankNodeRefContent::Named(id) => id,
  182|  1.95k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  183|       |        }
  184|  5.16k|    }
_RNvXs2_NtCsbS7gf8MXAex_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCshZc3FwCJ069_4core3fmt7Display3fmtB7_:
  220|  5.16k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  221|  5.16k|        write!(f, "_:{}", self.as_str())
  222|  5.16k|    }
_RNvMs7_NtCsbS7gf8MXAex_5oxrdf10blank_nodeNtB5_5IdStr3newB7_:
  258|  9.06k|    fn new(id: u128) -> Self {
  259|  9.06k|        let mut str = [0; 32];
  260|  9.06k|        write!(&mut str[..], "{id:x}").unwrap();
  261|  9.06k|        Self(str)
  262|  9.06k|    }
_RNvMs7_NtCsbS7gf8MXAex_5oxrdf10blank_nodeNtB5_5IdStr6as_strB7_:
  265|  1.95k|    fn as_str(&self) -> &str {
  266|  1.95k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|  1.95k|        str::from_utf8(&self.0[..len]).unwrap()
  268|  1.95k|    }
_RNvNtCsbS7gf8MXAex_5oxrdf10blank_node30validate_blank_node_identifier:
  271|  21.2k|fn validate_blank_node_identifier(id: &str) -> Result<(), BlankNodeIdParseError> {
  272|  21.2k|    let mut chars = id.chars();
  273|  21.2k|    let front = chars.next().ok_or(BlankNodeIdParseError)?;
  274|  21.0k|    match front {
  275|  20.9k|        '0'..='9'
  276|       |        | '_'
  277|       |        | ':'
  278|  19.6k|        | 'A'..='Z'
  279|  19.2k|        | 'a'..='z'
  280|    106|        | '\u{00C0}'..='\u{00D6}'
  281|    106|        | '\u{00D8}'..='\u{00F6}'
  282|    106|        | '\u{00F8}'..='\u{02FF}'
  283|    101|        | '\u{0370}'..='\u{037D}'
  284|    101|        | '\u{037F}'..='\u{1FFF}'
  285|     81|        | '\u{200C}'..='\u{200D}'
  286|     55|        | '\u{2070}'..='\u{218F}'
  287|     54|        | '\u{2C00}'..='\u{2FEF}'
  288|     54|        | '\u{3001}'..='\u{D7FF}'
  289|     23|        | '\u{F900}'..='\u{FDCF}'
  290|     23|        | '\u{FDF0}'..='\u{FFFD}'
  291|  20.9k|        | '\u{10000}'..='\u{EFFFF}' => (),
  292|    132|        _ => return Err(BlankNodeIdParseError),
  293|       |    }
  294|   241k|    for c in chars {
  295|   221k|        match c {
  296|       |            '.' // validated later
  297|       |            | '-'
  298|   214k|            | '0'..='9'
  299|       |            | '\u{00B7}'
  300|  4.06k|            | '\u{0300}'..='\u{036F}'
  301|  3.93k|            | '\u{203F}'..='\u{2040}'
  302|       |            | '_'
  303|       |            | ':'
  304|   206k|            | 'A'..='Z'
  305|   186k|            | 'a'..='z'
  306|  4.08k|            | '\u{00C0}'..='\u{00D6}'
  307|  4.08k|            | '\u{00D8}'..='\u{00F6}'
  308|  4.08k|            | '\u{00F8}'..='\u{02FF}'
  309|  4.06k|            | '\u{0370}'..='\u{037D}'
  310|  4.06k|            | '\u{037F}'..='\u{1FFF}'
  311|  3.96k|            | '\u{200C}'..='\u{200D}'
  312|  3.93k|            | '\u{2070}'..='\u{218F}'
  313|  3.93k|            | '\u{2C00}'..='\u{2FEF}'
  314|  3.93k|            | '\u{3001}'..='\u{D7FF}'
  315|    111|            | '\u{F900}'..='\u{FDCF}'
  316|    111|            | '\u{FDF0}'..='\u{FFFD}'
  317|   220k|            | '\u{10000}'..='\u{EFFFF}' => (),
  318|    601|            _ => return Err(BlankNodeIdParseError),
  319|       |        }
  320|       |    }
  321|       |
  322|       |    // Could not end with a dot
  323|  20.2k|    if id.ends_with('.') {
  324|      0|        Err(BlankNodeIdParseError)
  325|       |    } else {
  326|  20.2k|        Ok(())
  327|       |    }
  328|  21.2k|}
_RNvNtCsbS7gf8MXAex_5oxrdf10blank_node13to_integer_idB3_:
  331|  20.2k|fn to_integer_id(id: &str) -> Option<u128> {
  332|  20.2k|    let digits = id.as_bytes();
  333|  20.2k|    let mut value: u128 = 0;
  334|  20.2k|    if let None | Some(b'0') = digits.first() {
  335|    107|        return None; // No empty string or leading zeros
  336|  20.1k|    }
  337|  51.9k|    for digit in digits {
  338|  42.9k|        value = value.checked_mul(16)?.checked_add(
  339|  42.8k|            match *digit {
  340|  37.0k|                b'0'..=b'9' => digit - b'0',
  341|  27.2k|                b'a'..=b'f' => digit - b'a' + 10,
  342|  11.1k|                _ => return None,
  343|       |            }
  344|  31.7k|            .into(),
  345|      0|        )?;
  346|       |    }
  347|  9.06k|    Some(value)
  348|  20.2k|}

_RNvMNtCsbS7gf8MXAex_5oxrdf7literalNtB2_7Literal6as_refCsa0h8KKtWB9J_6nquads:
  129|  37.0k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|  37.0k|        LiteralRef(match &self.0 {
  131|  12.8k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|  12.9k|            LiteralContent::LanguageTaggedString { value, language } => {
  133|  12.9k|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|  11.3k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|  11.3k|                value,
  137|  11.3k|                datatype: datatype.as_ref(),
  138|  11.3k|            },
  139|       |        })
  140|  37.0k|    }
_RNvXsu_NtCsbS7gf8MXAex_5oxrdf7literalNtB5_10LiteralRefNtNtCshZc3FwCJ069_4core3fmt7Display3fmtCsa0h8KKtWB9J_6nquads:
  565|  37.0k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  566|  37.0k|        match self.0 {
  567|  12.8k|            LiteralRefContent::String(value) => print_quoted_str(value, f),
  568|  12.9k|            LiteralRefContent::LanguageTaggedString { value, language } => {
  569|  12.9k|                print_quoted_str(value, f)?;
  570|  12.9k|                write!(f, "@{language}")
  571|       |            }
  572|  11.3k|            LiteralRefContent::TypedLiteral { value, datatype } => {
  573|  11.3k|                print_quoted_str(value, f)?;
  574|  11.3k|                write!(f, "^^{datatype}")
  575|       |            }
  576|       |        }
  577|  37.0k|    }
_RINvMNtCsbS7gf8MXAex_5oxrdf7literalNtB3_7Literal18new_simple_literalRNtNtCs8f6x4lOZV33_5alloc6string6StringECslNspdJhbxze_5oxttl:
   47|    588|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|    588|        Self(LiteralContent::String(value.into()))
   49|    588|    }
_RINvMNtCsbS7gf8MXAex_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCs8f6x4lOZV33_5alloc6string6StringEB5_:
   47|  45.7k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|  45.7k|        Self(LiteralContent::String(value.into()))
   49|  45.7k|    }
_RINvMNtCsbS7gf8MXAex_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCs8f6x4lOZV33_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   53|  41.6k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|  41.6k|        let value = value.into();
   55|  41.6k|        let datatype = datatype.into();
   56|  41.6k|        Self(if datatype == xsd::STRING {
   57|    524|            LiteralContent::String(value)
   58|       |        } else {
   59|  41.1k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|  41.6k|    }
_RINvMNtCsbS7gf8MXAex_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   53|  2.85k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|  2.85k|        let value = value.into();
   55|  2.85k|        let datatype = datatype.into();
   56|  2.85k|        Self(if datatype == xsd::STRING {
   57|      0|            LiteralContent::String(value)
   58|       |        } else {
   59|  2.85k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|  2.85k|    }
_RINvMNtCsbS7gf8MXAex_5oxrdf7literalNtB3_7Literal27new_language_tagged_literalNtNtCs8f6x4lOZV33_5alloc6string6StringReEB5_:
   65|  9.36k|    pub fn new_language_tagged_literal(
   66|  9.36k|        value: impl Into<String>,
   67|  9.36k|        language: impl Into<String>,
   68|  9.36k|    ) -> Result<Self, LanguageTagParseError> {
   69|  9.36k|        let mut language = language.into();
   70|  9.36k|        language.make_ascii_lowercase();
   71|  9.36k|        Ok(Self::new_language_tagged_literal_unchecked(
   72|  9.36k|            value,
   73|  9.36k|            LanguageTag::parse(language)?.into_inner(),
   74|       |        ))
   75|  9.36k|    }
_RINvMNtCsbS7gf8MXAex_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCs8f6x4lOZV33_5alloc6string6StringB1n_EB5_:
   85|  71.4k|    pub fn new_language_tagged_literal_unchecked(
   86|  71.4k|        value: impl Into<String>,
   87|  71.4k|        language: impl Into<String>,
   88|  71.4k|    ) -> Self {
   89|  71.4k|        Self(LiteralContent::LanguageTaggedString {
   90|  71.4k|            value: value.into(),
   91|  71.4k|            language: language.into(),
   92|  71.4k|        })
   93|  71.4k|    }
_RINvNtCsbS7gf8MXAex_5oxrdf7literal16print_quoted_strNtNtCshZc3FwCJ069_4core3fmt9FormatterEB4_:
  616|  39.3k|pub fn print_quoted_str(string: &str, f: &mut impl Write) -> fmt::Result {
  617|  39.3k|    f.write_char('"')?;
  618|  98.9k|    for c in string.chars() {
  619|  98.9k|        match c {
  620|  3.05k|            '\u{08}' => f.write_str("\\b"),
  621|  2.97k|            '\t' => f.write_str("\\t"),
  622|     58|            '\n' => f.write_str("\\n"),
  623|  1.44k|            '\u{0C}' => f.write_str("\\f"),
  624|    137|            '\r' => f.write_str("\\r"),
  625|  8.84k|            '"' => f.write_str("\\\""),
  626|    191|            '\\' => f.write_str("\\\\"),
  627|  82.2k|            '\0'..='\u{1F}' | '\u{7F}' => write!(f, "\\u{:04X}", u32::from(c)),
  628|  61.6k|            _ => f.write_char(c),
  629|      0|        }?;
  630|       |    }
  631|  39.3k|    f.write_char('"')
  632|  39.3k|}
_RNvMNtCsbS7gf8MXAex_5oxrdf7literalNtB2_7Literal6as_refB4_:
  129|  2.27k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|  2.27k|        LiteralRef(match &self.0 {
  131|    882|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|    852|            LiteralContent::LanguageTaggedString { value, language } => {
  133|    852|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|    537|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|    537|                value,
  137|    537|                datatype: datatype.as_ref(),
  138|    537|            },
  139|       |        })
  140|  2.27k|    }
_RNvXsu_NtCsbS7gf8MXAex_5oxrdf7literalNtB5_10LiteralRefNtNtCshZc3FwCJ069_4core3fmt7Display3fmtB7_:
  565|  2.27k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  566|  2.27k|        match self.0 {
  567|    882|            LiteralRefContent::String(value) => print_quoted_str(value, f),
  568|    852|            LiteralRefContent::LanguageTaggedString { value, language } => {
  569|    852|                print_quoted_str(value, f)?;
  570|    852|                write!(f, "@{language}")
  571|       |            }
  572|    537|            LiteralRefContent::TypedLiteral { value, datatype } => {
  573|    537|                print_quoted_str(value, f)?;
  574|    537|                write!(f, "^^{datatype}")
  575|       |            }
  576|       |        }
  577|  2.27k|    }

_RNvMNtCsbS7gf8MXAex_5oxrdf10named_nodeNtB2_9NamedNode6as_refCsa0h8KKtWB9J_6nquads:
   54|   297k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|   297k|        NamedNodeRef::new_unchecked(&self.iri)
   56|   297k|    }
_RNvMs4_NtCsbS7gf8MXAex_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCsa0h8KKtWB9J_6nquads:
  128|   297k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   297k|        Self { iri }
  130|   297k|    }
_RNvMs4_NtCsbS7gf8MXAex_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCsa0h8KKtWB9J_6nquads:
  133|   297k|    pub const fn as_str(self) -> &'a str {
  134|   297k|        self.iri
  135|   297k|    }
_RNvXs5_NtCsbS7gf8MXAex_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCshZc3FwCJ069_4core3fmt7Display3fmtCsa0h8KKtWB9J_6nquads:
  145|   297k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|   297k|        write!(f, "<{}>", self.as_str())
  147|   297k|    }
_RINvMNtCsbS7gf8MXAex_5oxrdf10named_nodeNtB3_9NamedNode3newReEB5_:
   24|   120k|    pub fn new(iri: impl Into<String>) -> Result<Self, IriParseError> {
   25|   120k|        Ok(Self::new_from_iri(Iri::parse(iri.into())?))
   26|   120k|    }
_RINvMNtCsbS7gf8MXAex_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCs8f6x4lOZV33_5alloc6string6StringEB5_:
   39|  2.23M|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  2.23M|        Self { iri: iri.into() }
   41|  2.23M|    }
_RINvMNtCsbS7gf8MXAex_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|  2.85k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  2.85k|        Self { iri: iri.into() }
   41|  2.85k|    }
_RNvMNtCsbS7gf8MXAex_5oxrdf10named_nodeNtB2_9NamedNode12new_from_iriB4_:
   29|   115k|    pub(crate) fn new_from_iri(iri: Iri<String>) -> Self {
   30|   115k|        Self::new_unchecked(iri.into_inner())
   31|   115k|    }
_RNvMNtCsbS7gf8MXAex_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|  44.5k|    pub fn as_str(&self) -> &str {
   45|  44.5k|        self.iri.as_str()
   46|  44.5k|    }
_RNvMNtCsbS7gf8MXAex_5oxrdf10named_nodeNtB2_9NamedNode6as_refB4_:
   54|  8.95k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  8.95k|        NamedNodeRef::new_unchecked(&self.iri)
   56|  8.95k|    }
_RNvMs4_NtCsbS7gf8MXAex_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedB7_:
  128|  8.95k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  8.95k|        Self { iri }
  130|  8.95k|    }
_RNvMs4_NtCsbS7gf8MXAex_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|  53.4k|    pub const fn as_str(self) -> &'a str {
  134|  53.4k|        self.iri
  135|  53.4k|    }
_RNvMs4_NtCsbS7gf8MXAex_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|  2.85k|    pub fn into_owned(self) -> NamedNode {
  139|  2.85k|        NamedNode::new_unchecked(self.iri)
  140|  2.85k|    }
_RNvXs5_NtCsbS7gf8MXAex_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCshZc3FwCJ069_4core3fmt7Display3fmtB7_:
  145|  8.95k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|  8.95k|        write!(f, "<{}>", self.as_str())
  147|  8.95k|    }
_RNvXs6_NtCsbS7gf8MXAex_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCshZc3FwCJ069_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|  2.85k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|  2.85k|        node.into_owned()
  154|  2.85k|    }
_RNvXs9_NtCsbS7gf8MXAex_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCshZc3FwCJ069_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|  44.5k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|  44.5k|        self.as_str() == other.as_str()
  175|  44.5k|    }

_RNvNtCsbS7gf8MXAex_5oxrdf6parser15read_named_node:
  244|   123k|fn read_named_node(s: &str) -> Result<(NamedNode, &str), TermParseError> {
  245|   123k|    let s = s.trim();
  246|   123k|    if let Some(remain) = s.strip_prefix('<') {
  247|   120k|        let end = remain
  248|   120k|            .find('>')
  249|   120k|            .ok_or_else(|| TermParseError::msg("Named node serialization should end with a >"))?;
  250|   120k|        let (value, remain) = remain.split_at(end);
  251|   120k|        let remain = &remain[1..];
  252|   120k|        let value = if value.contains('\\') {
  253|    616|            let mut escaped = String::with_capacity(value.len());
  254|    616|            let mut chars = value.chars();
  255|  37.8k|            while let Some(c) = chars.next() {
  256|  37.2k|                if c == '\\' {
  257|  2.86k|                    match chars.next() {
  258|    544|                        Some('u') => escaped.push(read_hexa_char(&mut chars, 4)?),
  259|    412|                        Some('U') => escaped.push(read_hexa_char(&mut chars, 8)?),
  260|  1.86k|                        Some(c) => {
  261|  1.86k|                            escaped.push('\\');
  262|  1.86k|                            escaped.push(c);
  263|  1.86k|                        }
  264|     42|                        None => escaped.push('\\'),
  265|       |                    }
  266|  34.4k|                } else {
  267|  34.4k|                    escaped.push(c);
  268|  34.4k|                }
  269|       |            }
  270|    563|            Cow::Owned(escaped)
  271|       |        } else {
  272|   119k|            Cow::Borrowed(value)
  273|       |        };
  274|   120k|        let term = NamedNode::new(value.as_ref()).map_err(|error| {
  275|       |            TermParseError(TermParseErrorKind::Iri {
  276|       |                value: value.into_owned(),
  277|       |                error,
  278|       |            })
  279|   120k|        })?;
  280|   115k|        Ok((term, remain))
  281|       |    } else {
  282|  2.45k|        Err(TermParseError::msg(
  283|  2.45k|            "Named node serialization should start with a <",
  284|  2.45k|        ))
  285|       |    }
  286|   123k|}
_RNvNtCsbS7gf8MXAex_5oxrdf6parser15read_blank_node:
  288|  21.3k|fn read_blank_node(s: &str) -> Result<(BlankNode, &str), TermParseError> {
  289|  21.3k|    let s = s.trim();
  290|  21.3k|    if let Some(remain) = s.strip_prefix("_:") {
  291|  21.2k|        let mut end = remain
  292|  21.2k|            .find(|v: char| {
  293|       |                v.is_whitespace()
  294|       |                    || matches!(v, '<' | '?' | '$' | '"' | '\'' | '>' | '@' | '^' | ':')
  295|  21.2k|            })
  296|  21.2k|            .unwrap_or(remain.len());
  297|  21.2k|        if let Some(pos) = remain[..end].find("..") {
  298|     67|            end = pos;
  299|  21.1k|        }
  300|  21.2k|        if remain[..end].ends_with('.') {
  301|  4.17k|            // It can't end with '.'
  302|  4.17k|            end -= 1;
  303|  17.0k|        }
  304|  21.2k|        let (value, remain) = remain.split_at(end);
  305|  21.2k|        let term = BlankNode::new(value).map_err(|error| {
  306|       |            TermParseError(TermParseErrorKind::BlankNode {
  307|       |                value: value.to_owned(),
  308|       |                error,
  309|       |            })
  310|  21.2k|        })?;
  311|  20.2k|        Ok((term, remain))
  312|       |    } else {
  313|    102|        Err(TermParseError::msg(
  314|    102|            "Blank node serialization should start with '_:'",
  315|    102|        ))
  316|       |    }
  317|  21.3k|}
_RNvNtCsbS7gf8MXAex_5oxrdf6parser12read_literal:
  319|  22.7k|fn read_literal(s: &str) -> Result<(Literal, &str), TermParseError> {
  320|  22.7k|    let s = s.trim();
  321|  22.7k|    if let Some(s) = s.strip_prefix('"') {
  322|  12.4k|        let mut value = String::with_capacity(s.len());
  323|  12.4k|        let mut chars = s.chars();
  324|   108k|        while let Some(c) = chars.next() {
  325|   107k|            match c {
  326|       |                '"' => {
  327|  11.6k|                    let remain = chars.as_str().trim();
  328|  11.6k|                    return if let Some(remain) = remain.strip_prefix('@') {
  329|  9.36k|                        let end = remain
  330|  9.36k|                            .find(|v| !matches!(v, 'a'..='z' | 'A'..='Z' | '-'))
  331|  9.36k|                            .unwrap_or(remain.len());
  332|  9.36k|                        let (language, remain) = remain.split_at(end);
  333|  9.36k|                        Ok((
  334|  9.36k|                            Literal::new_language_tagged_literal(value, language).map_err(
  335|  9.36k|                                |error| {
  336|       |                                    TermParseError(TermParseErrorKind::LanguageTag {
  337|       |                                        value: language.to_owned(),
  338|       |                                        error,
  339|       |                                    })
  340|  9.36k|                                },
  341|  9.36k|                            )?,
  342|  9.04k|                            remain,
  343|       |                        ))
  344|  2.28k|                    } else if let Some(remain) = remain.strip_prefix("^^") {
  345|    284|                        let (datatype, remain) = read_named_node(remain)?;
  346|    208|                        Ok((Literal::new_typed_literal(value, datatype), remain))
  347|       |                    } else {
  348|  2.00k|                        Ok((Literal::new_simple_literal(value), remain))
  349|       |                    };
  350|       |                }
  351|       |                '\\' => {
  352|  6.98k|                    if let Some(c) = chars.next() {
  353|  6.95k|                        value.push(match c {
  354|    449|                            't' => '\t',
  355|  1.02k|                            'b' => '\u{08}',
  356|    672|                            'n' => '\n',
  357|    327|                            'r' => '\r',
  358|    709|                            'f' => '\u{0C}',
  359|    868|                            '"' => '"',
  360|    611|                            '\'' => '\'',
  361|    553|                            '\\' => '\\',
  362|  1.04k|                            'u' => read_hexa_char(&mut chars, 4)?,
  363|    603|                            'U' => read_hexa_char(&mut chars, 8)?,
  364|    100|                            _ => return Err(TermParseError::msg("Unexpected escaped char")),
  365|       |                        })
  366|       |                    } else {
  367|     24|                        return Err(TermParseError::msg("Unexpected literal end"));
  368|       |                    }
  369|       |                }
  370|  88.8k|                _ => value.push(c),
  371|       |            }
  372|       |        }
  373|    624|        Err(TermParseError::msg("Unexpected literal end"))
  374|  10.2k|    } else if let Some(remain) = s.strip_prefix("true") {
  375|     74|        Ok((Literal::new_typed_literal("true", xsd::BOOLEAN), remain))
  376|  10.1k|    } else if let Some(remain) = s.strip_prefix("false") {
  377|     16|        Ok((Literal::new_typed_literal("false", xsd::BOOLEAN), remain))
  378|       |    } else {
  379|  10.1k|        let input = s.as_bytes();
  380|  10.1k|        if input.is_empty() {
  381|    366|            return Err(TermParseError::msg("Empty term serialization"));
  382|  9.76k|        }
  383|       |
  384|  9.76k|        let mut cursor = match input.first() {
  385|    355|            Some(b'+' | b'-') => 1,
  386|  9.40k|            _ => 0,
  387|       |        };
  388|  9.76k|        let mut with_dot = false;
  389|  9.76k|
  390|  9.76k|        let mut count_before: usize = 0;
  391|  14.0k|        while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  392|  4.26k|            count_before += 1;
  393|  4.26k|            cursor += 1;
  394|  4.26k|        }
  395|       |
  396|  9.76k|        let mut count_after: usize = 0;
  397|  9.76k|        if cursor < input.len() && input[cursor] == b'.' {
  398|  1.42k|            with_dot = true;
  399|  1.42k|            cursor += 1;
  400|  3.77k|            while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  401|  2.34k|                count_after += 1;
  402|  2.34k|                cursor += 1;
  403|  2.34k|            }
  404|  8.33k|        }
  405|       |
  406|  9.76k|        if cursor < input.len() && (input[cursor] == b'e' || input[cursor] == b'E') {
  407|    175|            cursor += 1;
  408|    175|            cursor += match input.get(cursor) {
  409|     48|                Some(b'+' | b'-') => 1,
  410|    127|                _ => 0,
  411|       |            };
  412|    175|            let mut count_exponent = 0;
  413|  1.17k|            while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  414|  1.00k|                count_exponent += 1;
  415|  1.00k|                cursor += 1;
  416|  1.00k|            }
  417|    175|            if count_exponent > 0 {
  418|     87|                Ok((Literal::new_typed_literal(s, xsd::DOUBLE), &s[cursor..]))
  419|       |            } else {
  420|     88|                Err(TermParseError::msg(
  421|     88|                    "Double serialization with an invalid exponent",
  422|     88|                ))
  423|       |            }
  424|  9.58k|        } else if with_dot {
  425|  1.41k|            if count_after > 0 {
  426|    511|                Ok((Literal::new_typed_literal(s, xsd::DECIMAL), &s[cursor..]))
  427|       |            } else {
  428|    902|                Err(TermParseError::msg(
  429|    902|                    "Decimal serialization without floating part",
  430|    902|                ))
  431|       |            }
  432|  8.17k|        } else if count_before > 0 {
  433|  2.16k|            Ok((Literal::new_typed_literal(s, xsd::INTEGER), &s[cursor..]))
  434|       |        } else {
  435|  6.01k|            Err(TermParseError::msg("Empty integer serialization"))
  436|       |        }
  437|       |    }
  438|  22.7k|}
_RNvNtCsbS7gf8MXAex_5oxrdf6parser9read_term:
  440|   330k|fn read_term(s: &str, number_of_recursive_calls: usize) -> Result<(Term, &str), TermParseError> {
  441|   330k|    if number_of_recursive_calls == MAX_NUMBER_OF_NESTED_TRIPLES {
  442|      8|        return Err(TermParseError::msg(
  443|      8|            "Too many nested triples. The parser fails here to avoid a stack overflow.",
  444|      8|        ));
  445|   330k|    }
  446|   330k|    let s = s.trim();
  447|       |    #[allow(unused_variables)]
  448|   330k|    if let Some(remain) = s.strip_prefix("<<") {
  449|       |        #[cfg(feature = "rdf-star")]
  450|       |        {
  451|   213k|            let (triple, remain) = read_triple(remain, number_of_recursive_calls + 1)?;
  452|  1.25k|            let remain = remain.trim_start();
  453|  1.25k|            if let Some(remain) = remain.strip_prefix(">>") {
  454|    666|                Ok((triple.into(), remain))
  455|       |            } else {
  456|    593|                Err(TermParseError::msg(
  457|    593|                    "Nested triple serialization should be enclosed between << and >>",
  458|    593|                ))
  459|       |            }
  460|       |        }
  461|       |        #[cfg(not(feature = "rdf-star"))]
  462|       |        {
  463|       |            Err(TermParseError::msg("RDF-star is not supported"))
  464|       |        }
  465|   116k|    } else if s.starts_with('<') {
  466|  72.8k|        let (term, remain) = read_named_node(s)?;
  467|  68.6k|        Ok((term.into(), remain))
  468|  44.0k|    } else if s.starts_with('_') {
  469|  21.3k|        let (term, remain) = read_blank_node(s)?;
  470|  20.2k|        Ok((term.into(), remain))
  471|       |    } else {
  472|  22.7k|        let (term, remain) = read_literal(s)?;
  473|  14.1k|        Ok((term.into(), remain))
  474|       |    }
  475|   330k|}
_RNvNtCsbS7gf8MXAex_5oxrdf6parser11read_triple:
  477|   272k|fn read_triple(
  478|   272k|    s: &str,
  479|   272k|    number_of_recursive_calls: usize,
  480|   272k|) -> Result<(Triple, &str), TermParseError> {
  481|   272k|    let s = s.trim();
  482|   272k|    let (subject, remain) = read_term(s, number_of_recursive_calls + 1)?;
  483|  50.2k|    let (predicate, remain) = read_named_node(remain)?;
  484|  46.8k|    let (object, remain) = read_term(remain, number_of_recursive_calls + 1)?;
  485|       |    Ok((
  486|       |        Triple {
  487|  43.2k|            subject: match subject {
  488|  41.7k|                Term::NamedNode(s) => s.into(),
  489|  1.30k|                Term::BlankNode(s) => s.into(),
  490|       |                Term::Literal(_) => {
  491|     70|                    return Err(TermParseError::msg(
  492|     70|                        "Literals are not allowed in subject position",
  493|     70|                    ));
  494|       |                }
  495|       |                #[cfg(feature = "rdf-star")]
  496|    174|                Term::Triple(s) => Subject::Triple(s),
  497|       |            },
  498|  43.2k|            predicate,
  499|  43.2k|            object,
  500|  43.2k|        },
  501|  43.2k|        remain,
  502|       |    ))
  503|   272k|}
_RNvNtCsbS7gf8MXAex_5oxrdf6parser14read_hexa_char:
  505|  2.60k|fn read_hexa_char(input: &mut Chars<'_>, len: usize) -> Result<char, TermParseError> {
  506|  2.60k|    let mut value = 0;
  507|  2.60k|    for _ in 0..len {
  508|  14.0k|        if let Some(c) = input.next() {
  509|  13.9k|            value = value * 16
  510|  13.9k|                + match c {
  511|  13.9k|                    '0'..='9' => u32::from(c) - u32::from('0'),
  512|    859|                    'a'..='f' => u32::from(c) - u32::from('a') + 10,
  513|  7.04k|                    'A'..='F' => u32::from(c) - u32::from('A') + 10,
  514|       |                    _ => {
  515|     82|                        return Err(TermParseError::msg(
  516|     82|                            "Unexpected character in a unicode escape",
  517|     82|                        ));
  518|       |                    }
  519|       |                }
  520|       |        } else {
  521|     52|            return Err(TermParseError::msg("Unexpected literal string end"));
  522|       |        }
  523|       |    }
  524|  2.46k|    char::from_u32(value).ok_or_else(|| TermParseError::msg("Invalid encoded unicode code point"))
  525|  2.60k|}
_RNvMs5_NtCsbS7gf8MXAex_5oxrdf6parserNtB5_14TermParseError3msg:
  557|  12.6k|    pub(crate) fn msg(msg: &'static str) -> Self {
  558|  12.6k|        Self(TermParseErrorKind::Msg(msg))
  559|  12.6k|    }
_RNvXs3_NtCsbS7gf8MXAex_5oxrdf6parserNtNtB7_6triple4QuadNtNtNtCshZc3FwCJ069_4core3str6traits7FromStr8from_str:
  187|  58.4k|    fn from_str(s: &str) -> Result<Self, Self::Err> {
  188|  58.4k|        let (triple, left) = read_triple(s, 0)?;
  189|  41.9k|        if matches!(left.trim(), "" | ".") {
  190|  30.2k|            return Ok(triple.in_graph(GraphName::DefaultGraph));
  191|  11.6k|        }
  192|  11.6k|        let (graph_name, left) = read_term(left, 0)?;
  193|  10.1k|        if !matches!(left.trim(), "" | ".") {
  194|    486|            return Err(Self::Err::msg("Invalid triple serialization"));
  195|  9.67k|        }
  196|  9.67k|        Ok(triple.in_graph(match graph_name {
  197|  8.21k|            Term::NamedNode(graph_name) => GraphName::from(graph_name),
  198|  1.39k|            Term::BlankNode(graph_name) => GraphName::from(graph_name),
  199|       |            Term::Literal(_) => {
  200|     60|                return Err(TermParseError::msg(
  201|     60|                    "Literals are not allowed in graph name position",
  202|     60|                ));
  203|       |            }
  204|       |            #[cfg(feature = "rdf-star")]
  205|       |            Term::Triple(_) => {
  206|      6|                return Err(TermParseError::msg(
  207|      6|                    "Triple terms are not allowed in graph name position",
  208|      6|                ));
  209|       |            }
  210|       |        }))
  211|  58.4k|    }
_RNCNvNtCsbS7gf8MXAex_5oxrdf6parser15read_named_node0B5_:
  249|    657|            .ok_or_else(|| TermParseError::msg("Named node serialization should end with a >"))?;
_RNCNvNtCsbS7gf8MXAex_5oxrdf6parser15read_named_nodes_0B5_:
  274|  4.60k|        let term = NamedNode::new(value.as_ref()).map_err(|error| {
  275|  4.60k|            TermParseError(TermParseErrorKind::Iri {
  276|  4.60k|                value: value.into_owned(),
  277|  4.60k|                error,
  278|  4.60k|            })
  279|  4.60k|        })?;
_RNCNvNtCsbS7gf8MXAex_5oxrdf6parser15read_blank_node0B5_:
  292|   271k|            .find(|v: char| {
  293|   271k|                v.is_whitespace()
  294|   270k|                    || matches!(v, '<' | '?' | '$' | '"' | '\'' | '>' | '@' | '^' | ':')
  295|   271k|            })
_RNCNvNtCsbS7gf8MXAex_5oxrdf6parser15read_blank_nodes_0B5_:
  305|    917|        let term = BlankNode::new(value).map_err(|error| {
  306|    917|            TermParseError(TermParseErrorKind::BlankNode {
  307|    917|                value: value.to_owned(),
  308|    917|                error,
  309|    917|            })
  310|    917|        })?;
_RNCNvNtCsbS7gf8MXAex_5oxrdf6parser12read_literal0B5_:
  330|   448k|                            .find(|v| !matches!(v, 'a'..='z' | 'A'..='Z' | '-'))
_RNCNvNtCsbS7gf8MXAex_5oxrdf6parser12read_literals_0B5_:
  335|    318|                                |error| {
  336|    318|                                    TermParseError(TermParseErrorKind::LanguageTag {
  337|    318|                                        value: language.to_owned(),
  338|    318|                                        error,
  339|    318|                                    })
  340|    318|                                },
_RNCNvNtCsbS7gf8MXAex_5oxrdf6parser14read_hexa_char0B5_:
  524|     10|    char::from_u32(value).ok_or_else(|| TermParseError::msg("Invalid encoded unicode code point"))

_RNvMs1c_NtCsbS7gf8MXAex_5oxrdf6tripleNtB6_9GraphName6as_refCsa0h8KKtWB9J_6nquads:
  968|   124k|    pub fn as_ref(&self) -> GraphNameRef<'_> {
  969|   124k|        match self {
  970|  13.8k|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.as_ref()),
  971|  12.3k|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.as_ref()),
  972|  98.1k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  973|       |        }
  974|   124k|    }
_RNvMs1k_NtCsbS7gf8MXAex_5oxrdf6tripleNtB6_12GraphNameRef16is_default_graphCsa0h8KKtWB9J_6nquads:
 1052|   124k|    pub fn is_default_graph(&self) -> bool {
 1053|   124k|        matches!(self, Self::DefaultGraph)
 1054|   124k|    }
_RNvMs1u_NtCsbS7gf8MXAex_5oxrdf6tripleNtB6_4Quad6as_refCsa0h8KKtWB9J_6nquads:
 1186|   124k|    pub fn as_ref(&self) -> QuadRef<'_> {
 1187|   124k|        QuadRef {
 1188|   124k|            subject: self.subject.as_ref(),
 1189|   124k|            predicate: self.predicate.as_ref(),
 1190|   124k|            object: self.object.as_ref(),
 1191|   124k|            graph_name: self.graph_name.as_ref(),
 1192|   124k|        }
 1193|   124k|    }
_RNvMsc_NtCsbS7gf8MXAex_5oxrdf6tripleNtB5_7Subject6as_refCsa0h8KKtWB9J_6nquads:
  181|   124k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|   124k|        match self {
  183|   119k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|  2.27k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|  2.96k|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|   124k|    }
_RNvMsy_NtCsbS7gf8MXAex_5oxrdf6tripleNtB5_4Term6as_refCsa0h8KKtWB9J_6nquads:
  418|   124k|    pub fn as_ref(&self) -> TermRef<'_> {
  419|   124k|        match self {
  420|  28.5k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  421|  56.5k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  422|  37.0k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  423|       |            #[cfg(feature = "rdf-star")]
  424|  2.27k|            Self::Triple(triple) => TermRef::Triple(triple),
  425|       |        }
  426|   124k|    }
_RNvXs1A_NtCsbS7gf8MXAex_5oxrdf6tripleNtB6_7QuadRefINtNtCshZc3FwCJ069_4core7convert4FromRNtB6_4QuadE4fromCsa0h8KKtWB9J_6nquads:
 1302|   124k|    fn from(quad: &'a Quad) -> Self {
 1303|   124k|        quad.as_ref()
 1304|   124k|    }
_RNvXs1l_NtCsbS7gf8MXAex_5oxrdf6tripleNtB6_12GraphNameRefNtNtCshZc3FwCJ069_4core3fmt7Display3fmtCsa0h8KKtWB9J_6nquads:
 1068|  26.2k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1069|  26.2k|        match self {
 1070|  13.8k|            Self::NamedNode(node) => node.fmt(f),
 1071|  12.3k|            Self::BlankNode(node) => node.fmt(f),
 1072|      0|            Self::DefaultGraph => f.write_str("DEFAULT"),
 1073|       |        }
 1074|  26.2k|    }
_RNvXs1y_NtCsbS7gf8MXAex_5oxrdf6tripleNtB6_7QuadRefNtNtCshZc3FwCJ069_4core3fmt7Display3fmtCsa0h8KKtWB9J_6nquads:
 1276|   124k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1277|   124k|        if self.graph_name.is_default_graph() {
 1278|  98.1k|            write!(f, "{} {} {}", self.subject, self.predicate, self.object)
 1279|       |        } else {
 1280|  26.2k|            write!(
 1281|  26.2k|                f,
 1282|  26.2k|                "{} {} {} {}",
 1283|  26.2k|                self.subject, self.predicate, self.object, self.graph_name
 1284|  26.2k|            )
 1285|       |        }
 1286|   124k|    }
_RNvXsS_NtCsbS7gf8MXAex_5oxrdf6tripleNtB5_7TermRefNtNtCshZc3FwCJ069_4core3fmt7Display3fmtCsa0h8KKtWB9J_6nquads:
  652|   124k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  653|   124k|        match self {
  654|  28.5k|            Self::NamedNode(node) => node.fmt(f),
  655|  56.5k|            Self::BlankNode(node) => node.fmt(f),
  656|  37.0k|            Self::Literal(literal) => literal.fmt(f),
  657|       |            #[cfg(feature = "rdf-star")]
  658|  2.27k|            Self::Triple(triple) => {
  659|  2.27k|                write!(f, "<<{triple}>>")
  660|       |            }
  661|       |        }
  662|   124k|    }
_RNvXso_NtCsbS7gf8MXAex_5oxrdf6tripleNtB5_10SubjectRefNtNtCshZc3FwCJ069_4core3fmt7Display3fmtCsa0h8KKtWB9J_6nquads:
  306|   124k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  307|   124k|        match self {
  308|   119k|            Self::NamedNode(node) => node.fmt(f),
  309|  2.27k|            Self::BlankNode(node) => node.fmt(f),
  310|       |            #[cfg(feature = "rdf-star")]
  311|  2.96k|            Self::Triple(triple) => write!(f, "<<{triple}>>"),
  312|       |        }
  313|   124k|    }
_RNvXs1e_NtCsbS7gf8MXAex_5oxrdf6tripleNtB6_9GraphNameINtNtCshZc3FwCJ069_4core7convert4FromNtNtB8_10named_node9NamedNodeE4fromCslNspdJhbxze_5oxttl:
  986|  41.5k|    fn from(node: NamedNode) -> Self {
  987|  41.5k|        Self::NamedNode(node)
  988|  41.5k|    }
_RNvXs1g_NtCsbS7gf8MXAex_5oxrdf6tripleNtB6_9GraphNameINtNtCshZc3FwCJ069_4core7convert4FromNtNtB8_10blank_node9BlankNodeE4fromCslNspdJhbxze_5oxttl:
 1000|  37.1k|    fn from(node: BlankNode) -> Self {
 1001|  37.1k|        Self::BlankNode(node)
 1002|  37.1k|    }
_RINvMs16_NtCsbS7gf8MXAex_5oxrdf6tripleNtB7_6Triple8in_graphNtB7_9GraphNameEB9_:
  827|  39.8k|    pub fn in_graph(self, graph_name: impl Into<GraphName>) -> Quad {
  828|  39.8k|        Quad {
  829|  39.8k|            subject: self.subject,
  830|  39.8k|            predicate: self.predicate,
  831|  39.8k|            object: self.object,
  832|  39.8k|            graph_name: graph_name.into(),
  833|  39.8k|        }
  834|  39.8k|    }
_RNvMsc_NtCsbS7gf8MXAex_5oxrdf6tripleNtB5_7Subject6as_refB7_:
  181|  5.30k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  5.30k|        match self {
  183|  3.06k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|  2.23k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|      4|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  5.30k|    }
_RNvXse_NtCsbS7gf8MXAex_5oxrdf6tripleNtB5_7SubjectINtNtCshZc3FwCJ069_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|  1.45M|    fn from(node: NamedNode) -> Self {
  201|  1.45M|        Self::NamedNode(node)
  202|  1.45M|    }
_RNvXsg_NtCsbS7gf8MXAex_5oxrdf6tripleNtB5_7SubjectINtNtCshZc3FwCJ069_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|  83.7k|    fn from(node: BlankNode) -> Self {
  215|  83.7k|        Self::BlankNode(node)
  216|  83.7k|    }
_RNvXsi_NtCsbS7gf8MXAex_5oxrdf6tripleNtB5_7SubjectINtNtCshZc3FwCJ069_4core7convert4FromNtB5_6TripleE4fromB7_:
  229|  41.9k|    fn from(node: Triple) -> Self {
  230|  41.9k|        Self::Triple(Box::new(node))
  231|  41.9k|    }
_RNvXso_NtCsbS7gf8MXAex_5oxrdf6tripleNtB5_10SubjectRefNtNtCshZc3FwCJ069_4core3fmt7Display3fmtB7_:
  306|  5.30k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  307|  5.30k|        match self {
  308|  3.06k|            Self::NamedNode(node) => node.fmt(f),
  309|  2.23k|            Self::BlankNode(node) => node.fmt(f),
  310|       |            #[cfg(feature = "rdf-star")]
  311|      4|            Self::Triple(triple) => write!(f, "<<{triple}>>"),
  312|       |        }
  313|  5.30k|    }
_RNvMsy_NtCsbS7gf8MXAex_5oxrdf6tripleNtB5_4Term6as_refB7_:
  418|  5.30k|    pub fn as_ref(&self) -> TermRef<'_> {
  419|  5.30k|        match self {
  420|     55|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  421|  2.92k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  422|  2.27k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  423|       |            #[cfg(feature = "rdf-star")]
  424|     51|            Self::Triple(triple) => TermRef::Triple(triple),
  425|       |        }
  426|  5.30k|    }
_RNvXsA_NtCsbS7gf8MXAex_5oxrdf6tripleNtB5_4TermINtNtCshZc3FwCJ069_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  438|   158k|    fn from(node: NamedNode) -> Self {
  439|   158k|        Self::NamedNode(node)
  440|   158k|    }
_RNvXsC_NtCsbS7gf8MXAex_5oxrdf6tripleNtB5_4TermINtNtCshZc3FwCJ069_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  452|   222k|    fn from(node: BlankNode) -> Self {
  453|   222k|        Self::BlankNode(node)
  454|   222k|    }
_RNvXsE_NtCsbS7gf8MXAex_5oxrdf6tripleNtB5_4TermINtNtCshZc3FwCJ069_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  466|   162k|    fn from(literal: Literal) -> Self {
  467|   162k|        Self::Literal(literal)
  468|   162k|    }
_RNvXsG_NtCsbS7gf8MXAex_5oxrdf6tripleNtB5_4TermINtNtCshZc3FwCJ069_4core7convert4FromNtB5_6TripleE4fromB7_:
  481|  8.08k|    fn from(triple: Triple) -> Self {
  482|  8.08k|        Self::Triple(Box::new(triple))
  483|  8.08k|    }
_RNvXsS_NtCsbS7gf8MXAex_5oxrdf6tripleNtB5_7TermRefNtNtCshZc3FwCJ069_4core3fmt7Display3fmtB7_:
  652|  5.30k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  653|  5.30k|        match self {
  654|     55|            Self::NamedNode(node) => node.fmt(f),
  655|  2.92k|            Self::BlankNode(node) => node.fmt(f),
  656|  2.27k|            Self::Literal(literal) => literal.fmt(f),
  657|       |            #[cfg(feature = "rdf-star")]
  658|     51|            Self::Triple(triple) => {
  659|     51|                write!(f, "<<{triple}>>")
  660|       |            }
  661|       |        }
  662|  5.30k|    }
_RNvMs16_NtCsbS7gf8MXAex_5oxrdf6tripleNtB6_6Triple6as_refB8_:
  837|  5.30k|    pub fn as_ref(&self) -> TripleRef<'_> {
  838|  5.30k|        TripleRef {
  839|  5.30k|            subject: self.subject.as_ref(),
  840|  5.30k|            predicate: self.predicate.as_ref(),
  841|  5.30k|            object: self.object.as_ref(),
  842|  5.30k|        }
  843|  5.30k|    }
_RNvXs17_NtCsbS7gf8MXAex_5oxrdf6tripleNtB6_6TripleNtNtCshZc3FwCJ069_4core3fmt7Display3fmtB8_:
  848|  5.30k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  849|  5.30k|        self.as_ref().fmt(f)
  850|  5.30k|    }
_RNvXs19_NtCsbS7gf8MXAex_5oxrdf6tripleNtB6_9TripleRefNtNtCshZc3FwCJ069_4core3fmt7Display3fmtB8_:
  921|  5.30k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  922|  5.30k|        write!(f, "{} {} {}", self.subject, self.predicate, self.object)
  923|  5.30k|    }
_RNvXs1e_NtCsbS7gf8MXAex_5oxrdf6tripleNtB6_9GraphNameINtNtCshZc3FwCJ069_4core7convert4FromNtNtB8_10named_node9NamedNodeE4fromB8_:
  986|  8.21k|    fn from(node: NamedNode) -> Self {
  987|  8.21k|        Self::NamedNode(node)
  988|  8.21k|    }
_RNvXs1g_NtCsbS7gf8MXAex_5oxrdf6tripleNtB6_9GraphNameINtNtCshZc3FwCJ069_4core7convert4FromNtNtB8_10blank_node9BlankNodeE4fromB8_:
 1000|  1.39k|    fn from(node: BlankNode) -> Self {
 1001|  1.39k|        Self::BlankNode(node)
 1002|  1.39k|    }

_RNvXNtCslNspdJhbxze_5oxttl5lexerNtB2_7N3LexerNtNtNtB4_7toolkit5lexer15TokenRecognizer20recognize_next_token:
   57|  23.3M|    fn recognize_next_token<'a>(
   58|  23.3M|        &mut self,
   59|  23.3M|        data: &'a [u8],
   60|  23.3M|        is_ending: bool,
   61|  23.3M|        options: &N3LexerOptions,
   62|  23.3M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
   63|  23.3M|        match *data.first()? {
   64|  8.77M|            b'<' => match *data.get(1)? {
   65|  1.01M|                b'<' => Some((2, Ok(N3Token::Punctuation("<<")))),
   66|  4.83k|                b'=' if self.mode == N3LexerMode::N3 => {
   67|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   68|      0|                        Some(if let Ok(result) = result {
   69|      0|                            (consumed, Ok(result))
   70|       |                        } else {
   71|      0|                            (2, Ok(N3Token::Punctuation("<=")))
   72|       |                        })
   73|      0|                    } else if is_ending {
   74|      0|                        Some((2, Ok(N3Token::Punctuation("<="))))
   75|       |                    } else {
   76|      0|                        None
   77|       |                    }
   78|       |                }
   79|  12.9k|                b'-' if self.mode == N3LexerMode::N3 => {
   80|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   81|      0|                        Some(if let Ok(result) = result {
   82|      0|                            (consumed, Ok(result))
   83|       |                        } else {
   84|      0|                            (2, Ok(N3Token::Punctuation("<-")))
   85|       |                        })
   86|      0|                    } else if is_ending {
   87|      0|                        Some((2, Ok(N3Token::Punctuation("<-"))))
   88|       |                    } else {
   89|      0|                        None
   90|       |                    }
   91|       |                }
   92|  7.64M|                _ => self.recognize_iri(data, options),
   93|       |            },
   94|       |            b'>' => {
   95|   872k|                if *data.get(1)? == b'>' {
   96|   326k|                    Some((2, Ok(N3Token::Punctuation(">>"))))
   97|       |                } else {
   98|   493k|                    Some((1, Ok(N3Token::Punctuation(">"))))
   99|       |                }
  100|       |            }
  101|  1.93M|            b'_' => match data.get(1)? {
  102|  1.73M|                b':' => Self::recognize_blank_node_label(data),
  103|   160k|                c => Some((
  104|   160k|                    1,
  105|   160k|                    Err((0, format!("Unexpected character '{}'", char::from(*c))).into()),
  106|   160k|                )),
  107|       |            },
  108|       |            b'"' => {
  109|  1.13M|                if self.mode != N3LexerMode::NTriples
  110|      0|                    && *data.get(1)? == b'"'
  111|      0|                    && *data.get(2)? == b'"'
  112|       |                {
  113|      0|                    self.recognize_long_string(data, b'"')
  114|       |                } else {
  115|  1.13M|                    self.recognize_string(data, b'"')
  116|       |                }
  117|       |            }
  118|  41.2k|            b'\'' if self.mode != N3LexerMode::NTriples => {
  119|      0|                if *data.get(1)? == b'\'' && *data.get(2)? == b'\'' {
  120|      0|                    self.recognize_long_string(data, b'\'')
  121|       |                } else {
  122|      0|                    self.recognize_string(data, b'\'')
  123|       |                }
  124|       |            }
  125|   791k|            b'@' => self.recognize_lang_tag(data),
  126|  1.95M|            b'.' => match data.get(1) {
  127|   669k|                Some(b'0'..=b'9') => Self::recognize_number(data),
  128|  1.88M|                Some(_) => Some((1, Ok(N3Token::Punctuation(".")))),
  129|  46.0k|                None => is_ending.then_some((1, Ok(N3Token::Punctuation(".")))),
  130|       |            },
  131|       |            b'^' => {
  132|   298k|                if *data.get(1)? == b'^' {
  133|   183k|                    Some((2, Ok(N3Token::Punctuation("^^"))))
  134|       |                } else {
  135|   105k|                    Some((1, Ok(N3Token::Punctuation("^"))))
  136|       |                }
  137|       |            }
  138|  58.3k|            b'(' => Some((1, Ok(N3Token::Punctuation("(")))),
  139|  60.2k|            b')' => Some((1, Ok(N3Token::Punctuation(")")))),
  140|  80.8k|            b'[' => Some((1, Ok(N3Token::Punctuation("[")))),
  141|  75.2k|            b']' => Some((1, Ok(N3Token::Punctuation("]")))),
  142|       |            b'{' => {
  143|  39.7k|                if *data.get(1)? == b'|' {
  144|  3.43k|                    Some((2, Ok(N3Token::Punctuation("{|"))))
  145|       |                } else {
  146|  33.6k|                    Some((1, Ok(N3Token::Punctuation("{"))))
  147|       |                }
  148|       |            }
  149|  71.8k|            b'}' => Some((1, Ok(N3Token::Punctuation("}")))),
  150|   114k|            b',' => Some((1, Ok(N3Token::Punctuation(",")))),
  151|  33.8k|            b';' => Some((1, Ok(N3Token::Punctuation(";")))),
  152|  41.9k|            b'!' => Some((1, Ok(N3Token::Punctuation("!")))),
  153|       |            b'|' => {
  154|  16.4k|                if *data.get(1)? == b'}' {
  155|  1.26k|                    Some((2, Ok(N3Token::Punctuation("|}"))))
  156|       |                } else {
  157|  11.3k|                    Some((1, Ok(N3Token::Punctuation("|"))))
  158|       |                }
  159|       |            }
  160|       |            b'=' => {
  161|  57.2k|                if *data.get(1)? == b'>' {
  162|  12.4k|                    Some((2, Ok(N3Token::Punctuation("=>"))))
  163|       |                } else {
  164|  38.7k|                    Some((1, Ok(N3Token::Punctuation("="))))
  165|       |                }
  166|       |            }
  167|  3.69M|            b'0'..=b'9' | b'+' | b'-' => Self::recognize_number(data),
  168|   194k|            b'?' => self.recognize_variable(data, is_ending),
  169|  5.73M|            _ => self.recognize_pname_or_keyword(data, is_ending),
  170|       |        }
  171|  23.0M|    }
_RNvMs_NtCslNspdJhbxze_5oxttl5lexerNtB4_7N3Lexer3new:
  175|   170k|    pub fn new(mode: N3LexerMode, unchecked: bool) -> Self {
  176|   170k|        Self { mode, unchecked }
  177|   170k|    }
_RNvMs_NtCslNspdJhbxze_5oxttl5lexerNtB4_7N3Lexer13recognize_iri:
  179|  7.64M|    fn recognize_iri(
  180|  7.64M|        &self,
  181|  7.64M|        data: &[u8],
  182|  7.64M|        options: &N3LexerOptions,
  183|  7.64M|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  184|  7.64M|        // [18] IRIREF  ::=  '<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
  185|  7.64M|        let mut string = Vec::new();
  186|  7.64M|        let mut i = 1;
  187|       |        loop {
  188|  7.70M|            let end = memchr2(b'>', b'\\', &data[i..])?;
  189|  3.89M|            string.extend_from_slice(&data[i..i + end]);
  190|  3.89M|            i += end;
  191|  3.89M|            match data[i] {
  192|       |                b'>' => {
  193|  3.71M|                    return Some((i + 1, self.parse_iri(string, 0..i + 1, options)));
  194|       |                }
  195|       |                b'\\' => {
  196|   185k|                    let (additional, c) = self.recognize_escape(&data[i..], i, false)?;
  197|   125k|                    i += additional + 1;
  198|   125k|                    match c {
  199|  54.7k|                        Ok(c) => {
  200|  54.7k|                            let mut buf = [0; 4];
  201|  54.7k|                            string.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  202|  54.7k|                        }
  203|  70.4k|                        Err(e) => return Some((i, Err(e))),
  204|       |                    }
  205|       |                }
  206|      0|                _ => unreachable!(),
  207|       |            }
  208|       |        }
  209|  7.64M|    }
_RNvMs_NtCslNspdJhbxze_5oxttl5lexerNtB4_7N3Lexer9parse_iri:
  211|  3.71M|    fn parse_iri(
  212|  3.71M|        &self,
  213|  3.71M|        iri: Vec<u8>,
  214|  3.71M|        position: Range<usize>,
  215|  3.71M|        options: &N3LexerOptions,
  216|  3.71M|    ) -> Result<N3Token<'static>, TokenRecognizerError> {
  217|  3.71M|        let iri = string_from_utf8(iri, position.clone())?;
  218|       |        Ok(N3Token::IriRef(
  219|  3.57M|            if let Some(base_iri) = options.base_iri.as_ref() {
  220|      0|                if self.unchecked {
  221|      0|                    base_iri.resolve_unchecked(&iri)
  222|       |                } else {
  223|      0|                    base_iri
  224|      0|                        .resolve(&iri)
  225|      0|                        .map_err(|e| (position, e.to_string()))?
  226|       |                }
  227|      0|                .into_inner()
  228|  3.57M|            } else if self.unchecked {
  229|    797|                iri
  230|       |            } else {
  231|  3.57M|                Iri::parse(iri)
  232|  3.57M|                    .map_err(|e| (position, e.to_string()))?
  233|  2.85M|                    .into_inner()
  234|       |            },
  235|       |        ))
  236|  3.71M|    }
_RNvMs_NtCslNspdJhbxze_5oxttl5lexerNtB4_7N3Lexer26recognize_pname_or_keyword:
  238|  5.73M|    fn recognize_pname_or_keyword<'a>(
  239|  5.73M|        &self,
  240|  5.73M|        data: &'a [u8],
  241|  5.73M|        is_ending: bool,
  242|  5.73M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  243|  5.73M|        // [139s]  PNAME_NS   ::=  PN_PREFIX? ':'
  244|  5.73M|        // [140s]  PNAME_LN   ::=  PNAME_NS PN_LOCAL
  245|  5.73M|        // [167s]  PN_PREFIX  ::=  PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
  246|  5.73M|        let mut i = 0;
  247|       |        loop {
  248|  10.1M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  249|  9.80M|                match r {
  250|  8.25M|                    Ok((c, consumed)) => {
  251|  8.25M|                        if c == ':' {
  252|   645k|                            i += consumed;
  253|   645k|                            break;
  254|  7.60M|                        } else if i == 0 {
  255|  3.84M|                            if !Self::is_possible_pn_chars_base(c) {
  256|  2.48M|                                return Some((
  257|  2.48M|                                    consumed,
  258|  2.48M|                                    Err((
  259|  2.48M|                                        0..consumed,
  260|  2.48M|                                        format!(
  261|  2.48M|                                            "'{c}' is not allowed at the beginning of a prefix name"
  262|  2.48M|                                        ),
  263|  2.48M|                                    )
  264|  2.48M|                                        .into()),
  265|  2.48M|                                ));
  266|  1.36M|                            }
  267|  1.36M|                            i += consumed;
  268|  3.76M|                        } else if Self::is_possible_pn_chars(c) || c == '.' {
  269|  3.04M|                            i += consumed;
  270|  3.04M|                        } else {
  271|   907k|                            while data[..i].ends_with(b".") {
  272|   187k|                                i -= 1;
  273|   187k|                            }
  274|   719k|                            return Some((
  275|   719k|                                i,
  276|   719k|                                str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  277|   719k|                            ));
  278|       |                        }
  279|       |                    }
  280|  1.54M|                    Err(e) => return Some((e.location.end, Err(e))),
  281|       |                }
  282|   333k|            } else if is_ending {
  283|  36.9k|                while data[..i].ends_with(b".") {
  284|  22.6k|                    i -= 1;
  285|  22.6k|                }
  286|  14.3k|                return Some(if i == 0 {
  287|  2.99k|                    (
  288|  2.99k|                        1,
  289|  2.99k|                        Err((0..1, format!("Unexpected byte {}", data[0])).into()),
  290|  2.99k|                    )
  291|       |                } else {
  292|  11.3k|                    (
  293|  11.3k|                        i,
  294|  11.3k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  295|  11.3k|                    )
  296|       |                });
  297|       |            } else {
  298|   319k|                return None;
  299|       |            }
  300|       |        }
  301|   645k|        let pn_prefix = match str_from_utf8(&data[..i - 1], 0..i - 1) {
  302|   645k|            Ok(pn_prefix) => pn_prefix,
  303|      0|            Err(e) => return Some((i, Err(e))),
  304|       |        };
  305|   645k|        if pn_prefix.ends_with('.') {
  306|  4.93k|            return Some((
  307|  4.93k|                i,
  308|  4.93k|                Err((
  309|  4.93k|                    0..i,
  310|  4.93k|                    format!(
  311|  4.93k|                        "'{pn_prefix}' is not a valid prefix: prefixes are not allowed to end with '.'"),
  312|  4.93k|                )
  313|  4.93k|                    .into()),
  314|  4.93k|            ));
  315|   640k|        }
  316|       |
  317|   347k|        let (consumed, pn_local_result) =
  318|   640k|            self.recognize_optional_pn_local(&data[i..], is_ending)?;
  319|   347k|        Some((
  320|   347k|            consumed + i,
  321|   347k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  322|       |                prefix: pn_prefix,
  323|       |                local,
  324|       |                might_be_invalid_iri,
  325|   347k|            }),
  326|   347k|        ))
  327|  5.73M|    }
_RNvMs_NtCslNspdJhbxze_5oxttl5lexerNtB4_7N3Lexer18recognize_variable:
  329|   194k|    fn recognize_variable<'a>(
  330|   194k|        &self,
  331|   194k|        data: &'a [u8],
  332|   194k|        is_ending: bool,
  333|   194k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  334|       |        // [36]  QUICK_VAR_NAME  ::=  "?" PN_LOCAL
  335|   194k|        let (consumed, result) = self.recognize_optional_pn_local(&data[1..], is_ending)?;
  336|   142k|        Some((
  337|   142k|            consumed + 1,
  338|   142k|            result.and_then(|(name, _)| {
  339|       |                if name.is_empty() {
  340|       |                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  341|       |                } else {
  342|       |                    Ok(N3Token::Variable(name))
  343|       |                }
  344|   142k|            }),
  345|   142k|        ))
  346|   194k|    }
_RNvMs_NtCslNspdJhbxze_5oxttl5lexerNtB4_7N3Lexer27recognize_optional_pn_local:
  348|   835k|    fn recognize_optional_pn_local<'a>(
  349|   835k|        &self,
  350|   835k|        data: &'a [u8],
  351|   835k|        is_ending: bool,
  352|   835k|    ) -> Option<(usize, Result<(Cow<'a, str>, bool), TokenRecognizerError>)> {
  353|   835k|        // [168s]  PN_LOCAL  ::=  (PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
  354|   835k|        let mut i = 0;
  355|   835k|        let mut buffer = None; // Buffer if there are some escaped characters
  356|   835k|        let mut position_that_is_already_in_buffer = 0;
  357|   835k|        let mut might_be_invalid_iri = false;
  358|   835k|        let mut ends_with_unescaped_dot = 0;
  359|       |        loop {
  360|  2.61M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  361|  2.28M|                match r {
  362|  2.24M|                    Ok((c, consumed)) => {
  363|  2.24M|                        if c == '%' {
  364|  23.7k|                            i += 1;
  365|  23.7k|                            let a = char::from(*data.get(i)?);
  366|  16.9k|                            i += 1;
  367|  16.9k|                            let b = char::from(*data.get(i)?);
  368|  13.8k|                            if !a.is_ascii_hexdigit() || !b.is_ascii_hexdigit() {
  369|  9.30k|                                return Some((i + 1, Err((
  370|  9.30k|                                    i - 2..=i, format!("escapes in IRIs should be % followed by two hexadecimal characters, found '%{a}{b}'")
  371|  9.30k|                                ).into())));
  372|  4.56k|                            }
  373|  4.56k|                            i += 1;
  374|  4.56k|                            ends_with_unescaped_dot = 0;
  375|  2.22M|                        } else if c == '\\' {
  376|   183k|                            i += 1;
  377|   183k|                            let a = char::from(*data.get(i)?);
  378|   175k|                            if self.unchecked
  379|  89.0k|                                || matches!(
  380|   175k|                                    a,
  381|       |                                    '_' | '~'
  382|       |                                        | '.'
  383|       |                                        | '-'
  384|       |                                        | '!'
  385|       |                                        | '$'
  386|       |                                        | '&'
  387|       |                                        | '\''
  388|       |                                        | '('
  389|       |                                        | ')'
  390|       |                                        | '*'
  391|       |                                        | '+'
  392|       |                                        | ','
  393|       |                                        | ';'
  394|       |                                        | '='
  395|       |                                )
  396|  86.5k|                            {
  397|  86.5k|                                // ok to escape
  398|  89.0k|                            } else if matches!(a, '/' | '?' | '#' | '@' | '%') {
  399|  74.5k|                                // ok to escape but requires IRI validation
  400|  74.5k|                                might_be_invalid_iri = true;
  401|  74.5k|                            } else {
  402|  14.4k|                                return Some((i + 1, Err((
  403|  14.4k|                                    i..=i, format!("The character that are allowed to be escaped in IRIs are _~.-!$&'()*+,;=/?#@%, found '{a}'")
  404|  14.4k|                                ).into())));
  405|       |                            }
  406|   161k|                            let buffer = buffer.get_or_insert_with(String::new);
  407|   161k|                            // We add the missing bytes
  408|   161k|                            if i - position_that_is_already_in_buffer > 1 {
  409|  44.4k|                                buffer.push_str(
  410|  44.4k|                                    match str_from_utf8(
  411|  44.4k|                                        &data[position_that_is_already_in_buffer..i - 1],
  412|  44.4k|                                        position_that_is_already_in_buffer..i - 1,
  413|  44.4k|                                    ) {
  414|  44.4k|                                        Ok(data) => data,
  415|      0|                                        Err(e) => return Some((i, Err(e))),
  416|       |                                    },
  417|       |                                )
  418|   116k|                            }
  419|   161k|                            buffer.push(a);
  420|   161k|                            i += 1;
  421|   161k|                            position_that_is_already_in_buffer = i;
  422|   161k|                            ends_with_unescaped_dot = 0;
  423|  2.04M|                        } else if i == 0 {
  424|   556k|                            if !(Self::is_possible_pn_chars_u(c) || c == ':' || c.is_ascii_digit())
  425|       |                            {
  426|   218k|                                return Some((0, Ok((Cow::Borrowed(""), false))));
  427|   337k|                            }
  428|   337k|                            if !self.unchecked {
  429|       |                                might_be_invalid_iri |=
  430|   337k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  431|   335k|                                        || c == ':';
  432|      0|                            }
  433|   337k|                            i += consumed;
  434|  1.48M|                        } else if Self::is_possible_pn_chars(c) || c == ':' {
  435|  1.12M|                            if !self.unchecked {
  436|       |                                might_be_invalid_iri |=
  437|  1.12M|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  438|  1.12M|                                        || c == ':';
  439|      0|                            }
  440|  1.12M|                            i += consumed;
  441|  1.12M|                            ends_with_unescaped_dot = 0;
  442|   357k|                        } else if c == '.' {
  443|   153k|                            i += consumed;
  444|   153k|                            ends_with_unescaped_dot += 1;
  445|   153k|                        } else {
  446|   203k|                            let buffer = if let Some(mut buffer) = buffer {
  447|  51.5k|                                buffer.push_str(
  448|  51.5k|                                    match str_from_utf8(
  449|  51.5k|                                        &data[position_that_is_already_in_buffer..i],
  450|  51.5k|                                        position_that_is_already_in_buffer..i,
  451|  51.5k|                                    ) {
  452|  51.5k|                                        Ok(data) => data,
  453|      0|                                        Err(e) => return Some((i, Err(e))),
  454|       |                                    },
  455|       |                                );
  456|       |                                // We do not include the last dots
  457|  51.5k|                                for _ in 0..ends_with_unescaped_dot {
  458|  34.2k|                                    buffer.pop();
  459|  34.2k|                                }
  460|  51.5k|                                i -= ends_with_unescaped_dot;
  461|  51.5k|                                Cow::Owned(buffer)
  462|       |                            } else {
  463|   152k|                                let mut data = match str_from_utf8(&data[..i], 0..i) {
  464|   152k|                                    Ok(data) => data,
  465|      0|                                    Err(e) => return Some((i, Err(e))),
  466|       |                                };
  467|       |                                // We do not include the last dots
  468|   152k|                                data = &data[..data.len() - ends_with_unescaped_dot];
  469|   152k|                                i -= ends_with_unescaped_dot;
  470|   152k|                                Cow::Borrowed(data)
  471|       |                            };
  472|   203k|                            return Some((i, Ok((buffer, might_be_invalid_iri))));
  473|       |                        }
  474|       |                    }
  475|  38.1k|                    Err(e) => return Some((e.location.end, Err(e))),
  476|       |                }
  477|   333k|            } else if is_ending {
  478|  5.32k|                let buffer = if let Some(mut buffer) = buffer {
  479|       |                    // We do not include the last dot
  480|  1.33k|                    while buffer.ends_with('.') {
  481|    594|                        buffer.pop();
  482|    594|                        i -= 1;
  483|    594|                    }
  484|    744|                    Cow::Owned(buffer)
  485|       |                } else {
  486|  4.58k|                    let mut data = match str_from_utf8(&data[..i], 0..i) {
  487|  4.58k|                        Ok(data) => data,
  488|      0|                        Err(e) => return Some((i, Err(e))),
  489|       |                    };
  490|       |                    // We do not include the last dot
  491|  5.69k|                    while let Some(d) = data.strip_suffix('.') {
  492|  1.10k|                        data = d;
  493|  1.10k|                        i -= 1;
  494|  1.10k|                    }
  495|  4.58k|                    Cow::Borrowed(data)
  496|       |                };
  497|  5.32k|                return Some((i, Ok((buffer, might_be_invalid_iri))));
  498|       |            } else {
  499|   327k|                return None;
  500|       |            }
  501|       |        }
  502|   835k|    }
_RNvMs_NtCslNspdJhbxze_5oxttl5lexerNtB4_7N3Lexer26recognize_blank_node_label:
  504|  1.73M|    fn recognize_blank_node_label(
  505|  1.73M|        data: &[u8],
  506|  1.73M|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  507|  1.73M|        // [141s]  BLANK_NODE_LABEL  ::=  '_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
  508|  1.73M|        let mut i = 2;
  509|       |        loop {
  510|  16.8M|            match Self::recognize_unicode_char(&data[i..], i)? {
  511|  15.8M|                Ok((c, consumed)) => {
  512|  15.8M|                    if (i == 2 && (Self::is_possible_pn_chars_u(c) || c.is_ascii_digit()))
  513|  14.3M|                        || (i > 2 && Self::is_possible_pn_chars(c))
  514|  14.8M|                    {
  515|  14.8M|                        // Ok
  516|  14.8M|                    } else if i > 2 && c == '.' {
  517|   233k|                        if data[i - 1] == b'.' {
  518|  14.6k|                            i -= 1;
  519|  14.6k|                            return Some((
  520|  14.6k|                                i,
  521|  14.6k|                                str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  522|  14.6k|                            ));
  523|   218k|                        }
  524|   776k|                    } else if i == 2 {
  525|  80.0k|                        return Some((
  526|  80.0k|                            i,
  527|  80.0k|                            Err((0..i, "A blank node ID should not be empty").into()),
  528|  80.0k|                        ));
  529|   696k|                    } else if data[i - 1] == b'.' {
  530|   133k|                        i -= 1;
  531|   133k|                        return Some((
  532|   133k|                            i,
  533|   133k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  534|   133k|                        ));
  535|       |                    } else {
  536|   562k|                        return Some((
  537|   562k|                            i,
  538|   562k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  539|   562k|                        ));
  540|       |                    }
  541|  15.0M|                    i += consumed;
  542|       |                }
  543|  20.0k|                Err(e) => return Some((e.location.end, Err(e))),
  544|       |            }
  545|       |        }
  546|  1.73M|    }
_RNvMs_NtCslNspdJhbxze_5oxttl5lexerNtB4_7N3Lexer18recognize_lang_tag:
  548|   791k|    fn recognize_lang_tag<'a>(
  549|   791k|        &self,
  550|   791k|        data: &'a [u8],
  551|   791k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  552|   791k|        // [144s]  LANGTAG  ::=  '@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
  553|   791k|        let mut is_last_block_empty = true;
  554|  6.40M|        for (i, c) in data[1..].iter().enumerate() {
  555|  6.40M|            if c.is_ascii_alphabetic() {
  556|  5.12M|                is_last_block_empty = false;
  557|  5.12M|            } else if i == 0 {
  558|   117k|                return Some((
  559|   117k|                    1,
  560|   117k|                    Err((1..2, "A language code should always start with a letter").into()),
  561|   117k|                ));
  562|  1.16M|            } else if is_last_block_empty {
  563|  29.9k|                return Some((i, self.parse_lang_tag(&data[1..i], 1..i - 1)));
  564|  1.13M|            } else if *c == b'-' {
  565|   657k|                is_last_block_empty = true;
  566|   657k|            } else {
  567|   479k|                return Some((i + 1, self.parse_lang_tag(&data[1..=i], 1..i)));
  568|       |            }
  569|       |        }
  570|   164k|        None
  571|   791k|    }
_RNvMs_NtCslNspdJhbxze_5oxttl5lexerNtB4_7N3Lexer14parse_lang_tag:
  573|   509k|    fn parse_lang_tag<'a>(
  574|   509k|        &self,
  575|   509k|        lang_tag: &'a [u8],
  576|   509k|        position: Range<usize>,
  577|   509k|    ) -> Result<N3Token<'a>, TokenRecognizerError> {
  578|   509k|        let lang_tag = str_from_utf8(lang_tag, position.clone())?;
  579|   509k|        Ok(N3Token::LangTag(if self.unchecked {
  580|     19|            lang_tag
  581|       |        } else {
  582|   509k|            LanguageTag::parse(lang_tag)
  583|   509k|                .map_err(|e| (position.clone(), e.to_string()))?
  584|   394k|                .into_inner()
  585|       |        }))
  586|   509k|    }
_RNvMs_NtCslNspdJhbxze_5oxttl5lexerNtB4_7N3Lexer16recognize_string:
  587|  1.13M|    fn recognize_string(
  588|  1.13M|        &self,
  589|  1.13M|        data: &[u8],
  590|  1.13M|        delimiter: u8,
  591|  1.13M|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  592|  1.13M|        // [22]  STRING_LITERAL_QUOTE         ::=  '"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
  593|  1.13M|        // [23]  STRING_LITERAL_SINGLE_QUOTE  ::=  "'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
  594|  1.13M|        let mut string = String::new();
  595|  1.13M|        let mut i = 1;
  596|       |        loop {
  597|  1.55M|            let mut end = memchr2(delimiter, b'\\', &data[i..])?;
  598|  1.26M|            if !self.unchecked {
  599|       |                // We check also line jumps
  600|  1.26M|                if let Some(line_jump_end) = memchr2(b'\n', b'\r', &data[i..i + end]) {
  601|  45.4k|                    end = line_jump_end;
  602|  1.21M|                }
  603|    780|            }
  604|  1.26M|            match str_from_utf8(&data[i..i + end], i..i + end) {
  605|  1.24M|                Ok(s) => string.push_str(s),
  606|  19.9k|                Err(e) => return Some((end, Err(e))),
  607|       |            };
  608|  1.24M|            i += end;
  609|  1.24M|            match data[i] {
  610|  1.24M|                c if c == delimiter => {
  611|   707k|                    return Some((i + 1, Ok(N3Token::String(string))));
  612|       |                }
  613|       |                b'\\' => {
  614|   493k|                    let (additional, c) = self.recognize_escape(&data[i..], i, true)?;
  615|   488k|                    i += additional + 1;
  616|   488k|                    match c {
  617|   423k|                        Ok(c) => {
  618|   423k|                            string.push(c);
  619|   423k|                        }
  620|  64.7k|                        Err(e) => {
  621|       |                            // We read until the end of string char
  622|  64.7k|                            let end = memchr(delimiter, &data[i..])?;
  623|  28.5k|                            return Some((i + end + 1, Err(e)));
  624|       |                        }
  625|       |                    }
  626|       |                }
  627|       |                b'\n' | b'\r' => {
  628|       |                    // We read until the end of string char
  629|  43.7k|                    let end = memchr(delimiter, &data[i..])?;
  630|  29.0k|                    return Some((
  631|  29.0k|                        i + end + 1,
  632|  29.0k|                        Err((
  633|  29.0k|                            i..i + 1,
  634|  29.0k|                            "Line jumps are not allowed in string literals, use \\n",
  635|  29.0k|                        )
  636|  29.0k|                            .into()),
  637|  29.0k|                    ));
  638|       |                }
  639|      0|                _ => unreachable!(),
  640|       |            }
  641|       |        }
  642|  1.13M|    }
_RNvMs_NtCslNspdJhbxze_5oxttl5lexerNtB4_7N3Lexer16recognize_number:
  683|   705k|    fn recognize_number(data: &[u8]) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  684|   705k|        // [19]  INTEGER    ::=  [+-]? [0-9]+
  685|   705k|        // [20]  DECIMAL    ::=  [+-]? [0-9]* '.' [0-9]+
  686|   705k|        // [21]  DOUBLE     ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  687|   705k|        // [154s] EXPONENT  ::=  [eE] [+-]? [0-9]+
  688|   705k|        let mut i = 0;
  689|   705k|        let c = *data.first()?;
  690|   705k|        if matches!(c, b'+' | b'-') {
  691|   366k|            i += 1;
  692|   366k|        }
  693|       |        // We read the digits before .
  694|   705k|        let mut count_before: usize = 0;
  695|       |        loop {
  696|  1.25M|            let c = *data.get(i)?;
  697|  1.16M|            if c.is_ascii_digit() {
  698|   549k|                i += 1;
  699|   549k|                count_before += 1;
  700|   549k|            } else {
  701|   615k|                break;
  702|       |            }
  703|       |        }
  704|       |
  705|       |        // We read the digits after .
  706|       |        #[allow(clippy::if_then_some_else_none)]
  707|   615k|        let count_after = if *data.get(i)? == b'.' {
  708|  57.2k|            i += 1;
  709|  57.2k|
  710|  57.2k|            let mut count_after = 0;
  711|       |            loop {
  712|   151k|                let c = *data.get(i)?;
  713|   140k|                if c.is_ascii_digit() {
  714|  93.8k|                    i += 1;
  715|  93.8k|                    count_after += 1;
  716|  93.8k|                } else {
  717|  46.9k|                    break;
  718|  46.9k|                }
  719|  46.9k|            }
  720|  46.9k|            Some(count_after)
  721|       |        } else {
  722|   557k|            None
  723|       |        };
  724|       |
  725|       |        // End
  726|   604k|        let c = *data.get(i)?;
  727|   604k|        if matches!(c, b'e' | b'E') {
  728|  48.0k|            i += 1;
  729|       |
  730|  48.0k|            let c = *data.get(i)?;
  731|  34.5k|            if matches!(c, b'+' | b'-') {
  732|  3.42k|                i += 1;
  733|  31.1k|            }
  734|       |
  735|  34.5k|            let mut found = false;
  736|       |            loop {
  737|  62.5k|                let c = *data.get(i)?;
  738|  56.1k|                if c.is_ascii_digit() {
  739|  27.9k|                    i += 1;
  740|  27.9k|                    found = true;
  741|  27.9k|                } else {
  742|  28.1k|                    break;
  743|  28.1k|                }
  744|  28.1k|            }
  745|  28.1k|            Some((
  746|  28.1k|                i,
  747|  28.1k|                if !found {
  748|  16.1k|                    Err((0..i, "A double exponent cannot be empty").into())
  749|  12.0k|                } else if count_before == 0 && count_after.unwrap_or(0) == 0 {
  750|  4.97k|                    Err((0..i, "A double should not be empty").into())
  751|       |                } else {
  752|  7.03k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Double)
  753|       |                },
  754|       |            ))
  755|   556k|        } else if let Some(count_after) = count_after {
  756|  43.2k|            if count_after == 0 {
  757|       |                // We do not consume the '.' after all
  758|  23.8k|                i -= 1;
  759|  23.8k|                Some((
  760|  23.8k|                    i,
  761|  23.8k|                    if count_before == 0 {
  762|  7.52k|                        Err((0..i, "An integer should not be empty").into())
  763|       |                    } else {
  764|  16.2k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  765|       |                    },
  766|       |                ))
  767|       |            } else {
  768|  19.4k|                Some((i, str_from_utf8(&data[..i], 0..i).map(N3Token::Decimal)))
  769|       |            }
  770|       |        } else {
  771|       |            Some((
  772|   513k|                i,
  773|   513k|                if count_before == 0 {
  774|   297k|                    Err((0..i, "An integer should not be empty").into())
  775|       |                } else {
  776|   216k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  777|       |                },
  778|       |            ))
  779|       |        }
  780|   705k|    }
_RNvMs_NtCslNspdJhbxze_5oxttl5lexerNtB4_7N3Lexer16recognize_escape:
  782|   678k|    fn recognize_escape(
  783|   678k|        &self,
  784|   678k|        data: &[u8],
  785|   678k|        position: usize,
  786|   678k|        with_echar: bool,
  787|   678k|    ) -> Option<(usize, Result<char, TokenRecognizerError>)> {
  788|   678k|        // [26]   UCHAR  ::=  '\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
  789|   678k|        // [159s] ECHAR  ::=  '\' [tbnrf"'\]
  790|   678k|        match *data.get(1)? {
  791|   143k|            b'u' => match Self::recognize_hex_char(&data[2..], 4, 'u', position) {
  792|   135k|                Ok(c) => Some((5, Ok(c?))),
  793|  7.76k|                Err(e) => {
  794|  7.76k|                    if self.unchecked {
  795|      0|                        match Self::recognize_utf16_surrogate_pair(&data[2..], position) {
  796|      0|                            Ok(c) => Some((11, Ok(c?))),
  797|      0|                            Err(e) => Some((5, Err(e))),
  798|       |                        }
  799|       |                    } else {
  800|  7.76k|                        Some((5, Err(e)))
  801|       |                    }
  802|       |                }
  803|       |            },
  804|  72.2k|            b'U' => match Self::recognize_hex_char(&data[2..], 8, 'u', position) {
  805|  67.4k|                Ok(c) => Some((9, Ok(c?))),
  806|  4.88k|                Err(e) => Some((9, Err(e))),
  807|       |            },
  808|  22.1k|            b't' if with_echar => Some((1, Ok('\t'))),
  809|   106k|            b'b' if with_echar => Some((1, Ok('\x08'))),
  810|  27.1k|            b'n' if with_echar => Some((1, Ok('\n'))),
  811|  7.98k|            b'r' if with_echar => Some((1, Ok('\r'))),
  812|  15.8k|            b'f' if with_echar => Some((1, Ok('\x0C'))),
  813|  53.7k|            b'"' if with_echar => Some((1, Ok('"'))),
  814|  39.7k|            b'\'' if with_echar => Some((1, Ok('\''))),
  815|  10.3k|            b'\\' if with_echar => Some((1, Ok('\\'))),
  816|   122k|            c => Some((
  817|   122k|                1,
  818|   122k|                Err((
  819|   122k|                    position..position + 2,
  820|   122k|                    format!("Unexpected escape character '\\{}'", char::from(c)),
  821|   122k|                )
  822|   122k|                    .into()),
  823|   122k|            )), // TODO: read until end of string
  824|       |        }
  825|   678k|    }
_RNvMs_NtCslNspdJhbxze_5oxttl5lexerNtB4_7N3Lexer18recognize_hex_char:
  827|   215k|    fn recognize_hex_char(
  828|   215k|        data: &[u8],
  829|   215k|        len: usize,
  830|   215k|        escape_char: char,
  831|   215k|        position: usize,
  832|   215k|    ) -> Result<Option<char>, TokenRecognizerError> {
  833|   215k|        if data.len() < len {
  834|  8.52k|            return Ok(None);
  835|   206k|        }
  836|   206k|        let val = str_from_utf8(&data[..len], position..position + len + 2)?;
  837|   200k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  838|       |            (
  839|       |                position..position + len + 2,
  840|       |                format!(
  841|       |                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  842|       |                ),
  843|       |            )
  844|   200k|        })?;
  845|   196k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  846|       |            (
  847|       |                position..position + len +2,
  848|       |                format!(
  849|       |                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  850|       |                ),
  851|       |            )
  852|   196k|        })?;
  853|   194k|        Ok(Some(c))
  854|   215k|    }
_RNvMs_NtCslNspdJhbxze_5oxttl5lexerNtB4_7N3Lexer22recognize_unicode_char:
  931|  29.5M|    fn recognize_unicode_char(
  932|  29.5M|        data: &[u8],
  933|  29.5M|        position: usize,
  934|  29.5M|    ) -> Option<Result<(char, usize), TokenRecognizerError>> {
  935|  29.5M|        let mut code_point: u32;
  936|  29.5M|        let bytes_needed: usize;
  937|  29.5M|        let mut lower_boundary = 0x80;
  938|  29.5M|        let mut upper_boundary = 0xBF;
  939|       |
  940|  29.5M|        let byte = *data.first()?;
  941|  28.0M|        match byte {
  942|  28.0M|            0x00..=0x7F => return Some(Ok((char::from(byte), 1))),
  943|  3.51M|            0xC2..=0xDF => {
  944|  1.43M|                bytes_needed = 1;
  945|  1.43M|                code_point = u32::from(byte) & 0x1F;
  946|  1.43M|            }
  947|  2.08M|            0xE0..=0xEF => {
  948|  1.60M|                if byte == 0xE0 {
  949|  12.3k|                    lower_boundary = 0xA0;
  950|  1.59M|                }
  951|  1.60M|                if byte == 0xED {
  952|  8.41k|                    upper_boundary = 0x9F;
  953|  1.59M|                }
  954|  1.60M|                bytes_needed = 2;
  955|  1.60M|                code_point = u32::from(byte) & 0xF;
  956|       |            }
  957|   474k|            0xF0..=0xF4 => {
  958|   349k|                if byte == 0xF0 {
  959|  86.4k|                    lower_boundary = 0x90;
  960|   263k|                }
  961|   349k|                if byte == 0xF4 {
  962|   208k|                    upper_boundary = 0x8F;
  963|   208k|                }
  964|   349k|                bytes_needed = 3;
  965|   349k|                code_point = u32::from(byte) & 0x7;
  966|       |            }
  967|       |            _ => {
  968|  1.06M|                return Some(Err((
  969|  1.06M|                    position..=position,
  970|  1.06M|                    "Invalid UTF-8 character encoding",
  971|  1.06M|                )
  972|  1.06M|                    .into()))
  973|       |            }
  974|       |        }
  975|       |
  976|  4.96M|        for i in 1..=bytes_needed {
  977|  4.96M|            let byte = *data.get(i)?;
  978|  4.87M|            if byte < lower_boundary || upper_boundary < byte {
  979|   536k|                return Some(Err((
  980|   536k|                    position..=position + i,
  981|   536k|                    "Invalid UTF-8 character encoding",
  982|   536k|                )
  983|   536k|                    .into()));
  984|  4.34M|            }
  985|  4.34M|            lower_boundary = 0x80;
  986|  4.34M|            upper_boundary = 0xBF;
  987|  4.34M|            code_point = (code_point << 6) | (u32::from(byte) & 0x3F);
  988|       |        }
  989|       |
  990|  2.76M|        Some(
  991|  2.76M|            char::from_u32(code_point)
  992|  2.76M|                .map(|c| (c, bytes_needed + 1))
  993|  2.76M|                .ok_or_else(|| {
  994|       |                    (
  995|       |                        position..=position + bytes_needed,
  996|       |                        format!("The codepoint {code_point:X} is not a valid unicode character"),
  997|       |                    )
  998|       |                        .into()
  999|  2.76M|                }),
 1000|  2.76M|        )
 1001|  29.5M|    }
_RNvMs_NtCslNspdJhbxze_5oxttl5lexerNtB4_7N3Lexer25is_possible_pn_chars_base:
 1004|  25.5M|    fn is_possible_pn_chars_base(c: char) -> bool {
 1005|  25.5M|        matches!(c,
 1006|  18.0M|        'A'..='Z'
 1007|  15.9M|        | 'a'..='z'
 1008|  1.55M|        | '\u{00C0}'..='\u{00D6}'
 1009|  1.55M|        | '\u{00D8}'..='\u{00F6}'
 1010|  1.55M|        | '\u{00F8}'..='\u{02FF}'
 1011|  1.53M|        | '\u{0370}'..='\u{037D}'
 1012|  1.53M|        | '\u{037F}'..='\u{1FFF}'
 1013|  1.52M|        | '\u{200C}'..='\u{200D}'
 1014|  1.51M|        | '\u{2070}'..='\u{218F}'
 1015|  1.51M|        | '\u{2C00}'..='\u{2FEF}'
 1016|  1.51M|        | '\u{3001}'..='\u{D7FF}'
 1017|  44.1k|        | '\u{F900}'..='\u{FDCF}'
 1018|  44.1k|        | '\u{FDF0}'..='\u{FFFD}'
 1019|  38.3k|        | '\u{10000}'..='\u{EFFFF}')
 1020|  25.5M|    }
_RNvMs_NtCslNspdJhbxze_5oxttl5lexerNtB4_7N3Lexer22is_possible_pn_chars_u:
 1023|  21.6M|    pub(super) fn is_possible_pn_chars_u(c: char) -> bool {
 1024|  21.6M|        Self::is_possible_pn_chars_base(c) || c == '_'
 1025|  21.6M|    }
_RNvMs_NtCslNspdJhbxze_5oxttl5lexerNtB4_7N3Lexer20is_possible_pn_chars:
 1028|  19.4M|    pub(crate) fn is_possible_pn_chars(c: char) -> bool {
 1029|  19.4M|        Self::is_possible_pn_chars_u(c)
 1030|  5.96M|            || matches!(c,
 1031|  3.09M|        '-' | '0'..='9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
 1032|  18.2M|    }
_RNvMs_NtCslNspdJhbxze_5oxttl5lexerNtB4_7N3Lexer43is_possible_pn_chars_base_but_not_valid_iri:
 1034|  1.46M|    fn is_possible_pn_chars_base_but_not_valid_iri(c: char) -> bool {
 1035|  1.46M|        matches!(c, '\u{FFF0}'..='\u{FFFD}')
 1036|  1.45M|            || u32::from(c) % u32::from('\u{FFFE}') == 0
 1037|  1.45M|            || u32::from(c) % u32::from('\u{FFFF}') == 0
 1038|  1.46M|    }
_RNvNtCslNspdJhbxze_5oxttl5lexer13str_from_utf8:
 1063|  4.58M|fn str_from_utf8(data: &[u8], range: Range<usize>) -> Result<&str, TokenRecognizerError> {
 1064|  4.58M|    str::from_utf8(data).map_err(|e| {
 1065|       |        (
 1066|       |            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
 1067|       |            format!("Invalid UTF-8: {e}"),
 1068|       |        )
 1069|       |            .into()
 1070|  4.58M|    })
 1071|  4.58M|}
_RNvNtCslNspdJhbxze_5oxttl5lexer16string_from_utf8:
 1073|  3.71M|fn string_from_utf8(data: Vec<u8>, range: Range<usize>) -> Result<String, TokenRecognizerError> {
 1074|  3.71M|    String::from_utf8(data).map_err(|e| {
 1075|       |        (
 1076|       |            range.start + e.utf8_error().valid_up_to()
 1077|       |                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
 1078|       |            format!("Invalid UTF-8: {e}"),
 1079|       |        )
 1080|       |            .into()
 1081|  3.71M|    })
 1082|  3.71M|}
_RNCNvMs_NtCslNspdJhbxze_5oxttl5lexerNtB6_7N3Lexer9parse_iris_0B8_:
  232|   719k|                    .map_err(|e| (position, e.to_string()))?
_RNCNvMs_NtCslNspdJhbxze_5oxttl5lexerNtB6_7N3Lexer26recognize_pname_or_keyword0B8_:
  321|   310k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  322|   310k|                prefix: pn_prefix,
  323|   310k|                local,
  324|   310k|                might_be_invalid_iri,
  325|   310k|            }),
_RNCNvMs_NtCslNspdJhbxze_5oxttl5lexerNtB6_7N3Lexer18recognize_variable0B8_:
  338|   118k|            result.and_then(|(name, _)| {
  339|   118k|                if name.is_empty() {
  340|  52.9k|                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  341|       |                } else {
  342|  65.0k|                    Ok(N3Token::Variable(name))
  343|       |                }
  344|   118k|            }),
_RNCNvMs_NtCslNspdJhbxze_5oxttl5lexerNtB6_7N3Lexer14parse_lang_tag0B8_:
  583|   115k|                .map_err(|e| (position.clone(), e.to_string()))?
_RNCNvMs_NtCslNspdJhbxze_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_char0B8_:
  837|  3.30k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  838|  3.30k|            (
  839|  3.30k|                position..position + len + 2,
  840|  3.30k|                format!(
  841|  3.30k|                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  842|  3.30k|                ),
  843|  3.30k|            )
  844|  3.30k|        })?;
_RNCNvMs_NtCslNspdJhbxze_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_chars_0B8_:
  845|  2.70k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  846|  2.70k|            (
  847|  2.70k|                position..position + len +2,
  848|  2.70k|                format!(
  849|  2.70k|                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  850|  2.70k|                ),
  851|  2.70k|            )
  852|  2.70k|        })?;
_RNCNvMs_NtCslNspdJhbxze_5oxttl5lexerNtB6_7N3Lexer22recognize_unicode_char0B8_:
  992|  2.76M|                .map(|c| (c, bytes_needed + 1))
_RNCNvNtCslNspdJhbxze_5oxttl5lexer13str_from_utf80B5_:
 1064|  26.5k|    str::from_utf8(data).map_err(|e| {
 1065|  26.5k|        (
 1066|  26.5k|            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
 1067|  26.5k|            format!("Invalid UTF-8: {e}"),
 1068|  26.5k|        )
 1069|  26.5k|            .into()
 1070|  26.5k|    })
_RNCNvNtCslNspdJhbxze_5oxttl5lexer16string_from_utf80B5_:
 1074|   134k|    String::from_utf8(data).map_err(|e| {
 1075|   134k|        (
 1076|   134k|            range.start + e.utf8_error().valid_up_to()
 1077|   134k|                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
 1078|   134k|            format!("Invalid UTF-8: {e}"),
 1079|   134k|        )
 1080|   134k|            .into()
 1081|   134k|    })

_RINvMs_NtCslNspdJhbxze_5oxttl12line_formatsNtB5_16NQuadsRecognizer10new_parserINtNtCs8f6x4lOZV33_5alloc3vec3VechEEB7_:
  313|   113k|    pub fn new_parser<B>(
  314|   113k|        data: B,
  315|   113k|        is_ending: bool,
  316|   113k|        with_graph_name: bool,
  317|   113k|        #[cfg(feature = "rdf-star")] with_quoted_triples: bool,
  318|   113k|        unchecked: bool,
  319|   113k|    ) -> Parser<B, Self> {
  320|   113k|        Parser::new(
  321|   113k|            Lexer::new(
  322|   113k|                N3Lexer::new(N3LexerMode::NTriples, unchecked),
  323|   113k|                data,
  324|   113k|                is_ending,
  325|   113k|                MIN_BUFFER_SIZE,
  326|   113k|                MAX_BUFFER_SIZE,
  327|   113k|                Some(b"#"),
  328|   113k|            ),
  329|   113k|            Self {
  330|   113k|                stack: vec![NQuadsState::ExpectSubject],
  331|   113k|                subjects: Vec::new(),
  332|   113k|                predicates: Vec::new(),
  333|   113k|                objects: Vec::new(),
  334|   113k|            },
  335|   113k|            NQuadsRecognizerContext {
  336|   113k|                with_graph_name,
  337|   113k|                #[cfg(feature = "rdf-star")]
  338|   113k|                with_quoted_triples,
  339|   113k|                lexer_options: N3LexerOptions::default(),
  340|   113k|            },
  341|   113k|        )
  342|   113k|    }
_RINvMs_NtCslNspdJhbxze_5oxttl12line_formatsNtB5_16NQuadsRecognizer10new_parserRShEB7_:
  313|  56.5k|    pub fn new_parser<B>(
  314|  56.5k|        data: B,
  315|  56.5k|        is_ending: bool,
  316|  56.5k|        with_graph_name: bool,
  317|  56.5k|        #[cfg(feature = "rdf-star")] with_quoted_triples: bool,
  318|  56.5k|        unchecked: bool,
  319|  56.5k|    ) -> Parser<B, Self> {
  320|  56.5k|        Parser::new(
  321|  56.5k|            Lexer::new(
  322|  56.5k|                N3Lexer::new(N3LexerMode::NTriples, unchecked),
  323|  56.5k|                data,
  324|  56.5k|                is_ending,
  325|  56.5k|                MIN_BUFFER_SIZE,
  326|  56.5k|                MAX_BUFFER_SIZE,
  327|  56.5k|                Some(b"#"),
  328|  56.5k|            ),
  329|  56.5k|            Self {
  330|  56.5k|                stack: vec![NQuadsState::ExpectSubject],
  331|  56.5k|                subjects: Vec::new(),
  332|  56.5k|                predicates: Vec::new(),
  333|  56.5k|                objects: Vec::new(),
  334|  56.5k|            },
  335|  56.5k|            NQuadsRecognizerContext {
  336|  56.5k|                with_graph_name,
  337|  56.5k|                #[cfg(feature = "rdf-star")]
  338|  56.5k|                with_quoted_triples,
  339|  56.5k|                lexer_options: N3LexerOptions::default(),
  340|  56.5k|            },
  341|  56.5k|        )
  342|  56.5k|    }
_RINvMs_NtCslNspdJhbxze_5oxttl12line_formatsNtB5_16NQuadsRecognizer5errorReEB7_:
  345|  2.08M|    fn error(
  346|  2.08M|        mut self,
  347|  2.08M|        errors: &mut Vec<RuleRecognizerError>,
  348|  2.08M|        msg: impl Into<RuleRecognizerError>,
  349|  2.08M|    ) -> Self {
  350|  2.08M|        errors.push(msg.into());
  351|  2.08M|        self.stack.clear();
  352|  2.08M|        self.subjects.clear();
  353|  2.08M|        self.predicates.clear();
  354|  2.08M|        self.objects.clear();
  355|  2.08M|        self
  356|  2.08M|    }
_RNvXNtCslNspdJhbxze_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer20error_recovery_state:
   49|  6.02M|    fn error_recovery_state(mut self) -> Self {
   50|  6.02M|        self.stack.clear();
   51|  6.02M|        self.stack.push(NQuadsState::RecoverToLineJump);
   52|  6.02M|        self.subjects.clear();
   53|  6.02M|        self.predicates.clear();
   54|  6.02M|        self.objects.clear();
   55|  6.02M|        self
   56|  6.02M|    }
_RNvXNtCslNspdJhbxze_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer14recognize_next:
   58|  12.9M|    fn recognize_next(
   59|  12.9M|        mut self,
   60|  12.9M|        token: TokenOrLineJump<N3Token<'_>>,
   61|  12.9M|        context: &mut NQuadsRecognizerContext,
   62|  12.9M|        results: &mut Vec<Quad>,
   63|  12.9M|        errors: &mut Vec<RuleRecognizerError>,
   64|  12.9M|    ) -> Self {
   65|  12.9M|        match self.stack.pop().unwrap_or(NQuadsState::ExpectSubject) {
   66|       |            NQuadsState::ExpectSubject => {
   67|  3.47M|                let TokenOrLineJump::Token(token) = token else {
   68|   353k|                    return if self.stack.is_empty() {
   69|   328k|                        self
   70|       |                    } else {
   71|  25.0k|                        self.error(
   72|  25.0k|                            errors,
   73|  25.0k|                            "line jumps are not allowed inside of quoted triples",
   74|  25.0k|                        )
   75|       |                    };
   76|       |                };
   77|   604k|                match token {
   78|  1.41M|                    N3Token::IriRef(s) => {
   79|  1.41M|                        self.subjects.push(NamedNode::new_unchecked(s).into());
   80|  1.41M|                        self.stack.push(NQuadsState::ExpectPredicate);
   81|  1.41M|                        self
   82|       |                    }
   83|  82.4k|                    N3Token::BlankNodeLabel(s) => {
   84|  82.4k|                        self.subjects.push(BlankNode::new_unchecked(s).into());
   85|  82.4k|                        self.stack.push(NQuadsState::ExpectPredicate);
   86|  82.4k|                        self
   87|       |                    }
   88|       |                    #[cfg(feature = "rdf-star")]
   89|  1.30M|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
   90|   604k|                        self.stack.push(NQuadsState::AfterQuotedSubject);
   91|   604k|                        self.stack.push(NQuadsState::ExpectSubject);
   92|   604k|                        self
   93|       |                    }
   94|  1.01M|                    _ => self.error(
   95|  1.01M|                        errors,
   96|  1.01M|                        "The subject of a triple should be an IRI or a blank node, TOKEN found",
   97|  1.01M|                    ),
   98|       |                }
   99|       |            }
  100|       |            NQuadsState::ExpectPredicate => {
  101|  1.41M|                let TokenOrLineJump::Token(token) = token else {
  102|   509k|                    return self.error(
  103|   509k|                        errors,
  104|   509k|                        "line jumps are not allowed in the middle of triples",
  105|   509k|                    );
  106|       |                };
  107|   908k|                match token {
  108|   531k|                    N3Token::IriRef(p) => {
  109|   531k|                        self.predicates.push(NamedNode::new_unchecked(p));
  110|   531k|                        self.stack.push(NQuadsState::ExpectedObject);
  111|   531k|                        self
  112|       |                    }
  113|   376k|                    _ => self.error(
  114|   376k|                        errors,
  115|   376k|                        "The predicate of a triple should be an IRI, TOKEN found",
  116|   376k|                    ),
  117|       |                }
  118|       |            }
  119|       |            NQuadsState::ExpectedObject => {
  120|   512k|                let TokenOrLineJump::Token(token) = token else {
  121|  8.12k|                    return self.error(
  122|  8.12k|                        errors,
  123|  8.12k|                        "line jumps are not allowed in the middle of triples",
  124|  8.12k|                    );
  125|       |                };
  126|  13.6k|                match token {
  127|  89.8k|                        N3Token::IriRef(o) => {
  128|  89.8k|                            self.objects
  129|  89.8k|                                .push(NamedNode::new_unchecked(o).into());
  130|  89.8k|                            self.stack
  131|  89.8k|                                .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  132|  89.8k|                            self
  133|       |                        }
  134|   202k|                        N3Token::BlankNodeLabel(o) => {
  135|   202k|                            self.objects.push(BlankNode::new_unchecked(o).into());
  136|   202k|                            self.stack
  137|   202k|                                .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  138|   202k|                            self
  139|       |                        }
  140|   175k|                        N3Token::String(value) => {
  141|   175k|                            self.stack
  142|   175k|                                .push(NQuadsState::ExpectLiteralAnnotationOrGraphNameOrDot { value });
  143|   175k|                            self
  144|       |                        }
  145|       |                        #[cfg(feature = "rdf-star")]
  146|  21.4k|                        N3Token::Punctuation("<<") if context.with_quoted_triples => {
  147|  13.6k|                            self.stack.push(NQuadsState::AfterQuotedObject);
  148|  13.6k|                            self.stack.push(NQuadsState::ExpectSubject);
  149|  13.6k|                            self
  150|       |                        }
  151|  22.6k|                        _ => self.error(
  152|  22.6k|                            errors,
  153|  22.6k|                            "The object of a triple should be an IRI, a blank node or a literal, TOKEN found",
  154|  22.6k|                        ),
  155|       |                    }
  156|       |            }
  157|   165k|            NQuadsState::ExpectLiteralAnnotationOrGraphNameOrDot { value } => match token {
  158|  62.4k|                TokenOrLineJump::Token(N3Token::LangTag(lang_tag)) => {
  159|  62.4k|                    self.objects.push(
  160|  62.4k|                        Literal::new_language_tagged_literal_unchecked(
  161|  62.4k|                            value,
  162|  62.4k|                            lang_tag.to_ascii_lowercase(),
  163|  62.4k|                        )
  164|  62.4k|                        .into(),
  165|  62.4k|                    );
  166|  62.4k|                    self.stack
  167|  62.4k|                        .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  168|  62.4k|                    self
  169|       |                }
  170|  93.9k|                TokenOrLineJump::Token(N3Token::Punctuation("^^")) => {
  171|  59.6k|                    self.stack
  172|  59.6k|                        .push(NQuadsState::ExpectLiteralDatatype { value });
  173|  59.6k|                    self
  174|       |                }
  175|       |                _ => {
  176|  43.7k|                    self.objects.push(Literal::new_simple_literal(value).into());
  177|  43.7k|                    self.stack
  178|  43.7k|                        .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  179|  43.7k|                    self.recognize_next(token, context, results, errors)
  180|       |                }
  181|       |            },
  182|  52.9k|            NQuadsState::ExpectLiteralDatatype { value } => {
  183|  52.9k|                let TokenOrLineJump::Token(token) = token else {
  184|  3.48k|                    return self.error(
  185|  3.48k|                        errors,
  186|  3.48k|                        "line jumps are not allowed in the middle of triples",
  187|  3.48k|                    );
  188|       |                };
  189|  49.5k|                match token {
  190|  41.4k|                    N3Token::IriRef(d) => {
  191|  41.4k|                        self.objects.push(
  192|  41.4k|                            Literal::new_typed_literal(value, NamedNode::new_unchecked(d)).into(),
  193|  41.4k|                        );
  194|  41.4k|                        self.stack
  195|  41.4k|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  196|  41.4k|                        self
  197|       |                    }
  198|  8.02k|                    _ => self.error(errors, "A literal datatype must be an IRI, found TOKEN"),
  199|       |                }
  200|       |            }
  201|       |            NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple => {
  202|   436k|                if self.stack.is_empty() {
  203|  41.5k|                    match token {
  204|  41.5k|                        TokenOrLineJump::Token(N3Token::IriRef(g)) if context.with_graph_name => {
  205|  41.5k|                            self.emit_quad(results, NamedNode::new_unchecked(g).into());
  206|  41.5k|                            self.stack.push(NQuadsState::ExpectDot);
  207|  41.5k|                            self
  208|       |                        }
  209|  37.1k|                        TokenOrLineJump::Token(N3Token::BlankNodeLabel(g))
  210|  37.1k|                            if context.with_graph_name =>
  211|  37.1k|                        {
  212|  37.1k|                            self.emit_quad(results, BlankNode::new_unchecked(g).into());
  213|  37.1k|                            self.stack.push(NQuadsState::ExpectDot);
  214|  37.1k|                            self
  215|       |                        }
  216|       |                        _ => {
  217|   292k|                            self.emit_quad(results, GraphName::DefaultGraph);
  218|   292k|                            self.stack.push(NQuadsState::ExpectDot);
  219|   292k|                            self.recognize_next(token, context, results, errors)
  220|       |                        }
  221|       |                    }
  222|  64.6k|                } else if token == TokenOrLineJump::Token(N3Token::Punctuation(">>")) {
  223|  49.8k|                    self
  224|       |                } else {
  225|  14.8k|                    self.error(errors, "Expecting the end of a quoted triple '>>'")
  226|       |                }
  227|       |            }
  228|       |            NQuadsState::ExpectDot => {
  229|   364k|                let TokenOrLineJump::Token(token) = token else {
  230|  94.8k|                    return self.error(errors, "Quads should be followed by a dot");
  231|       |                };
  232|   269k|                if let N3Token::Punctuation(".") = token {
  233|   184k|                    self.stack.push(NQuadsState::ExpectLineJump);
  234|   184k|                    self
  235|       |                } else {
  236|  85.1k|                    errors.push("Quads should be followed by a dot".into());
  237|  85.1k|                    self.recognize_next(TokenOrLineJump::Token(token), context, results, errors)
  238|       |                }
  239|       |            }
  240|       |            NQuadsState::ExpectLineJump => {
  241|   181k|                let TokenOrLineJump::Token(token) = token else {
  242|   154k|                    return self;
  243|       |                };
  244|  26.9k|                errors.push(
  245|  26.9k|                    format!(
  246|  26.9k|                        "Only a single triple or quad can be written in a line, found {token:?}"
  247|  26.9k|                    )
  248|  26.9k|                    .into(),
  249|  26.9k|                );
  250|  26.9k|                self.recognize_next(TokenOrLineJump::Token(token), context, results, errors)
  251|       |            }
  252|       |            #[cfg(feature = "rdf-star")]
  253|       |            NQuadsState::AfterQuotedSubject => {
  254|  41.9k|                let triple = Triple {
  255|  41.9k|                    subject: self.subjects.pop().unwrap(),
  256|  41.9k|                    predicate: self.predicates.pop().unwrap(),
  257|  41.9k|                    object: self.objects.pop().unwrap(),
  258|  41.9k|                };
  259|  41.9k|                self.subjects.push(triple.into());
  260|  41.9k|                self.stack.push(NQuadsState::ExpectPredicate);
  261|  41.9k|                self.recognize_next(token, context, results, errors)
  262|       |            }
  263|       |            #[cfg(feature = "rdf-star")]
  264|       |            NQuadsState::AfterQuotedObject => {
  265|  7.41k|                let triple = Triple {
  266|  7.41k|                    subject: self.subjects.pop().unwrap(),
  267|  7.41k|                    predicate: self.predicates.pop().unwrap(),
  268|  7.41k|                    object: self.objects.pop().unwrap(),
  269|  7.41k|                };
  270|  7.41k|                self.objects.push(triple.into());
  271|  7.41k|                self.stack
  272|  7.41k|                    .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  273|  7.41k|                self.recognize_next(token, context, results, errors)
  274|       |            }
  275|       |            NQuadsState::RecoverToLineJump => {
  276|  6.26M|                if token != TokenOrLineJump::LineJump {
  277|  5.64M|                    self.stack.push(NQuadsState::RecoverToLineJump);
  278|  5.64M|                }
  279|  6.26M|                self
  280|       |            }
  281|       |        }
  282|  12.9M|    }
_RNvXNtCslNspdJhbxze_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer13recognize_end:
  284|   170k|    fn recognize_end(
  285|   170k|        mut self,
  286|   170k|        _context: &mut NQuadsRecognizerContext,
  287|   170k|        results: &mut Vec<Quad>,
  288|   170k|        errors: &mut Vec<RuleRecognizerError>,
  289|   170k|    ) {
  290|   170k|        match &*self.stack {
  291|   170k|            [NQuadsState::ExpectSubject | NQuadsState::ExpectLineJump] | [] => (),
  292|    130|            [NQuadsState::ExpectDot] => errors.push("Triples should be followed by a dot".into()),
  293|       |            [NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple] => {
  294|  1.51k|                self.emit_quad(results, GraphName::DefaultGraph);
  295|  1.51k|                errors.push("Triples should be followed by a dot".into())
  296|       |            }
  297|    588|            [NQuadsState::ExpectLiteralAnnotationOrGraphNameOrDot { value }] => {
  298|    588|                self.objects.push(Literal::new_simple_literal(value).into());
  299|    588|                self.emit_quad(results, GraphName::DefaultGraph);
  300|    588|                errors.push("Triples should be followed by a dot".into())
  301|       |            }
  302|  95.4k|            _ => errors.push("Unexpected end".into()), // TODO
  303|       |        }
  304|   169k|    }
_RNvXNtCslNspdJhbxze_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer13lexer_options:
  306|  25.9M|    fn lexer_options(context: &NQuadsRecognizerContext) -> &N3LexerOptions {
  307|  25.9M|        &context.lexer_options
  308|  25.9M|    }
_RNvMs_NtCslNspdJhbxze_5oxttl12line_formatsNtB4_16NQuadsRecognizer9emit_quad:
  358|   373k|    fn emit_quad(&mut self, results: &mut Vec<Quad>, graph_name: GraphName) {
  359|   373k|        results.push(Quad {
  360|   373k|            subject: self.subjects.pop().unwrap(),
  361|   373k|            predicate: self.predicates.pop().unwrap(),
  362|   373k|            object: self.objects.pop().unwrap(),
  363|   373k|            graph_name,
  364|   373k|        })
  365|   373k|    }

_RINvMs2_NtCslNspdJhbxze_5oxttl6nquadsNtB6_16NQuadsSerializer10for_writerINtNtCs8f6x4lOZV33_5alloc3vec3VechEECsa0h8KKtWB9J_6nquads:
  514|  56.5k|    pub fn for_writer<W: Write>(self, writer: W) -> WriterNQuadsSerializer<W> {
  515|  56.5k|        WriterNQuadsSerializer {
  516|  56.5k|            writer,
  517|  56.5k|            low_level_writer: self.low_level(),
  518|  56.5k|        }
  519|  56.5k|    }
_RINvMs3_NtCslNspdJhbxze_5oxttl6nquadsINtB6_22WriterNQuadsSerializerINtNtCs8f6x4lOZV33_5alloc3vec3VechEE14serialize_quadRNtNtCsbS7gf8MXAex_5oxrdf6triple4QuadECsa0h8KKtWB9J_6nquads:
  610|   124k|    pub fn serialize_quad<'a>(&mut self, q: impl Into<QuadRef<'a>>) -> io::Result<()> {
  611|   124k|        self.low_level_writer.serialize_quad(q, &mut self.writer)
  612|   124k|    }
_RINvMs4_NtCslNspdJhbxze_5oxttl6nquadsNtB6_24LowLevelNQuadsSerializer14serialize_quadRNtNtCsbS7gf8MXAex_5oxrdf6triple4QuadQINtNtCs8f6x4lOZV33_5alloc3vec3VechEECsa0h8KKtWB9J_6nquads:
  696|   124k|    pub fn serialize_quad<'a>(
  697|   124k|        &mut self,
  698|   124k|        q: impl Into<QuadRef<'a>>,
  699|   124k|        mut writer: impl Write,
  700|   124k|    ) -> io::Result<()> {
  701|   124k|        writeln!(writer, "{} .", q.into())
  702|   124k|    }
_RNvMs3_NtCslNspdJhbxze_5oxttl6nquadsINtB5_22WriterNQuadsSerializerINtNtCs8f6x4lOZV33_5alloc3vec3VechEE6finishCsa0h8KKtWB9J_6nquads:
  615|  56.5k|    pub fn finish(self) -> W {
  616|  56.5k|        self.writer
  617|  56.5k|    }
_RNvMNtCslNspdJhbxze_5oxttl6nquadsNtB2_12NQuadsParser19with_quoted_triplesCsa0h8KKtWB9J_6nquads:
   69|   170k|    pub fn with_quoted_triples(mut self) -> Self {
   70|   170k|        self.with_quoted_triples = true;
   71|   170k|        self
   72|   170k|    }
_RNvMNtCslNspdJhbxze_5oxttl6nquadsNtB2_12NQuadsParser3newCsa0h8KKtWB9J_6nquads:
   51|   170k|    pub fn new() -> Self {
   52|   170k|        Self::default()
   53|   170k|    }
_RNvMNtCslNspdJhbxze_5oxttl6nquadsNtB2_12NQuadsParser9uncheckedCsa0h8KKtWB9J_6nquads:
   61|    411|    pub fn unchecked(mut self) -> Self {
   62|    411|        self.unchecked = true;
   63|    411|        self
   64|    411|    }
_RNvMs2_NtCslNspdJhbxze_5oxttl6nquadsNtB5_16NQuadsSerializer3newCsa0h8KKtWB9J_6nquads:
  491|  56.5k|    pub fn new() -> Self {
  492|  56.5k|        Self {}
  493|  56.5k|    }
_RNvMNtCslNspdJhbxze_5oxttl6nquadsNtB2_12NQuadsParser9for_slice:
  163|  56.5k|    pub fn for_slice(self, slice: &[u8]) -> SliceNQuadsParser<'_> {
  164|  56.5k|        SliceNQuadsParser {
  165|  56.5k|            inner: NQuadsRecognizer::new_parser(
  166|  56.5k|                slice,
  167|  56.5k|                true,
  168|  56.5k|                true,
  169|  56.5k|                #[cfg(feature = "rdf-star")]
  170|  56.5k|                self.with_quoted_triples,
  171|  56.5k|                self.unchecked,
  172|  56.5k|            )
  173|  56.5k|            .into_iter(),
  174|  56.5k|        }
  175|  56.5k|    }
_RNvMNtCslNspdJhbxze_5oxttl6nquadsNtB2_12NQuadsParser9low_level:
  260|   113k|    pub fn low_level(self) -> LowLevelNQuadsParser {
  261|   113k|        LowLevelNQuadsParser {
  262|   113k|            parser: NQuadsRecognizer::new_parser(
  263|   113k|                Vec::new(),
  264|   113k|                false,
  265|   113k|                true,
  266|   113k|                #[cfg(feature = "rdf-star")]
  267|   113k|                self.with_quoted_triples,
  268|   113k|                self.unchecked,
  269|   113k|            ),
  270|   113k|        }
  271|   113k|    }
_RNvXs0_NtCslNspdJhbxze_5oxttl6nquadsNtB5_17SliceNQuadsParserNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next:
  388|   180k|    fn next(&mut self) -> Option<Self::Item> {
  389|   180k|        self.inner.next()
  390|   180k|    }
_RNvMs1_NtCslNspdJhbxze_5oxttl6nquadsNtB5_20LowLevelNQuadsParser17extend_from_slice:
  437|  7.18M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  438|  7.18M|        self.parser.extend_from_slice(other)
  439|  7.18M|    }
_RNvMs1_NtCslNspdJhbxze_5oxttl6nquadsNtB5_20LowLevelNQuadsParser3end:
  444|   113k|    pub fn end(&mut self) {
  445|   113k|        self.parser.end()
  446|   113k|    }
_RNvMs1_NtCslNspdJhbxze_5oxttl6nquadsNtB5_20LowLevelNQuadsParser6is_end:
  449|   113k|    pub fn is_end(&self) -> bool {
  450|   113k|        self.parser.is_end()
  451|   113k|    }
_RNvMs1_NtCslNspdJhbxze_5oxttl6nquadsNtB5_20LowLevelNQuadsParser10parse_next:
  457|  15.8M|    pub fn parse_next(&mut self) -> Option<Result<Quad, TurtleSyntaxError>> {
  458|  15.8M|        self.parser.parse_next()
  459|  15.8M|    }
_RNvMs2_NtCslNspdJhbxze_5oxttl6nquadsNtB5_16NQuadsSerializer9low_level:
  576|  56.5k|    pub fn low_level(self) -> LowLevelNQuadsSerializer {
  577|  56.5k|        LowLevelNQuadsSerializer {}
  578|  56.5k|    }

_RNvXs_NtNtCslNspdJhbxze_5oxttl7toolkit5errorNtB4_17TurtleSyntaxErrorNtNtCshZc3FwCJ069_4core3fmt7Display3fmtCsa0h8KKtWB9J_6nquads:
   44|  8.31M|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   45|  8.31M|        if self.location.start.offset + 1 >= self.location.end.offset {
   46|  5.85M|            write!(
   47|  5.85M|                f,
   48|  5.85M|                "Parser error at line {} column {}: {}",
   49|  5.85M|                self.location.start.line + 1,
   50|  5.85M|                self.location.start.column + 1,
   51|  5.85M|                self.message
   52|  5.85M|            )
   53|  2.45M|        } else if self.location.start.line == self.location.end.line {
   54|  2.40M|            write!(
   55|  2.40M|                f,
   56|  2.40M|                "Parser error between at line {} between columns {} and column {}: {}",
   57|  2.40M|                self.location.start.line + 1,
   58|  2.40M|                self.location.start.column + 1,
   59|  2.40M|                self.location.end.column + 1,
   60|  2.40M|                self.message
   61|  2.40M|            )
   62|       |        } else {
   63|  48.9k|            write!(
   64|  48.9k|                f,
   65|  48.9k|                "Parser error between line {} column {} and line {} column {}: {}",
   66|  48.9k|                self.location.start.line + 1,
   67|  48.9k|                self.location.start.column + 1,
   68|  48.9k|                self.location.end.line + 1,
   69|  48.9k|                self.location.end.column + 1,
   70|  48.9k|                self.message
   71|  48.9k|            )
   72|       |        }
   73|  8.31M|    }
_RINvMNtNtCslNspdJhbxze_5oxttl7toolkit5errorNtB3_17TurtleSyntaxError3newNtNtCs8f6x4lOZV33_5alloc6string6StringEB7_:
   22|  8.26M|    pub(crate) fn new(location: Range<TextPosition>, message: impl Into<String>) -> Self {
   23|  8.26M|        Self {
   24|  8.26M|            location,
   25|  8.26M|            message: message.into(),
   26|  8.26M|        }
   27|  8.26M|    }
_RINvMNtNtCslNspdJhbxze_5oxttl7toolkit5errorNtB3_17TurtleSyntaxError3newReEB7_:
   22|  46.4k|    pub(crate) fn new(location: Range<TextPosition>, message: impl Into<String>) -> Self {
   23|  46.4k|        Self {
   24|  46.4k|            location,
   25|  46.4k|            message: message.into(),
   26|  46.4k|        }
   27|  46.4k|    }

_RNvXNtNtCslNspdJhbxze_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCshZc3FwCJ069_4core7convert4FromTINtNtNtB1a_3ops5range5RangejENtNtCs8f6x4lOZV33_5alloc6string6StringEE4fromB6_:
   37|  3.80M|    fn from((location, message): (Range<usize>, S)) -> Self {
   38|  3.80M|        Self {
   39|  3.80M|            location,
   40|  3.80M|            message: message.into(),
   41|  3.80M|        }
   42|  3.80M|    }
_RNvXNtNtCslNspdJhbxze_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCshZc3FwCJ069_4core7convert4FromTINtNtNtB1a_3ops5range5RangejEReEE4fromB6_:
   37|  2.20M|    fn from((location, message): (Range<usize>, S)) -> Self {
   38|  2.20M|        Self {
   39|  2.20M|            location,
   40|  2.20M|            message: message.into(),
   41|  2.20M|        }
   42|  2.20M|    }
_RNvXs_NtNtCslNspdJhbxze_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCshZc3FwCJ069_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejENtNtCs8f6x4lOZV33_5alloc6string6StringEE4fromB8_:
   47|   184k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   48|   184k|        (*location.start()..*location.end() + 1, message).into()
   49|   184k|    }
_RNvXs_NtNtCslNspdJhbxze_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCshZc3FwCJ069_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejEReEE4fromB8_:
   47|  1.60M|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   48|  1.60M|        (*location.start()..*location.end() + 1, message).into()
   49|  1.60M|    }
_RNvXs0_NtNtCslNspdJhbxze_5oxttl7toolkit5lexerNtB5_20TokenRecognizerErrorINtNtCshZc3FwCJ069_4core7convert4FromTjNtNtCs8f6x4lOZV33_5alloc6string6StringEE4fromB9_:
   53|   160k|    fn from((location, message): (usize, S)) -> Self {
   54|   160k|        (location..=location, message).into()
   55|   160k|    }
_RNvMs1_NtNtCslNspdJhbxze_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_5lexer7N3LexerE3newB9_:
   78|   113k|    pub fn new(
   79|   113k|        parser: R,
   80|   113k|        data: B,
   81|   113k|        is_ending: bool,
   82|   113k|        min_buffer_size: usize,
   83|   113k|        max_buffer_size: usize,
   84|   113k|        line_comment_start: Option<&'static [u8]>,
   85|   113k|    ) -> Self {
   86|   113k|        Self {
   87|   113k|            parser,
   88|   113k|            data,
   89|   113k|            position: Position {
   90|   113k|                line_start_buffer_offset: 0,
   91|   113k|                buffer_offset: 0,
   92|   113k|                global_offset: 0,
   93|   113k|                global_line: 0,
   94|   113k|            },
   95|   113k|            previous_position: Position {
   96|   113k|                line_start_buffer_offset: 0,
   97|   113k|                buffer_offset: 0,
   98|   113k|                global_offset: 0,
   99|   113k|                global_line: 0,
  100|   113k|            },
  101|   113k|            is_ending,
  102|   113k|            min_buffer_size,
  103|   113k|            max_buffer_size,
  104|   113k|            line_comment_start,
  105|   113k|        }
  106|   113k|    }
_RNvMs1_NtNtCslNspdJhbxze_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE3newB9_:
   78|  56.5k|    pub fn new(
   79|  56.5k|        parser: R,
   80|  56.5k|        data: B,
   81|  56.5k|        is_ending: bool,
   82|  56.5k|        min_buffer_size: usize,
   83|  56.5k|        max_buffer_size: usize,
   84|  56.5k|        line_comment_start: Option<&'static [u8]>,
   85|  56.5k|    ) -> Self {
   86|  56.5k|        Self {
   87|  56.5k|            parser,
   88|  56.5k|            data,
   89|  56.5k|            position: Position {
   90|  56.5k|                line_start_buffer_offset: 0,
   91|  56.5k|                buffer_offset: 0,
   92|  56.5k|                global_offset: 0,
   93|  56.5k|                global_line: 0,
   94|  56.5k|            },
   95|  56.5k|            previous_position: Position {
   96|  56.5k|                line_start_buffer_offset: 0,
   97|  56.5k|                buffer_offset: 0,
   98|  56.5k|                global_offset: 0,
   99|  56.5k|                global_line: 0,
  100|  56.5k|            },
  101|  56.5k|            is_ending,
  102|  56.5k|            min_buffer_size,
  103|  56.5k|            max_buffer_size,
  104|  56.5k|            line_comment_start,
  105|  56.5k|        }
  106|  56.5k|    }
_RNvMs2_NtNtCslNspdJhbxze_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_5lexer7N3LexerE17extend_from_sliceB9_:
  110|  7.18M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  111|  7.18M|        self.shrink_data();
  112|  7.18M|        self.data.extend_from_slice(other);
  113|  7.18M|    }
_RNvMs2_NtNtCslNspdJhbxze_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_5lexer7N3LexerE3endB9_:
  116|   113k|    pub fn end(&mut self) {
  117|   113k|        self.is_ending = true;
  118|   113k|    }
_RNvMs2_NtNtCslNspdJhbxze_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_5lexer7N3LexerE11shrink_dataB9_:
  172|  7.18M|    fn shrink_data(&mut self) {
  173|  7.18M|        if self.position.line_start_buffer_offset > 0 {
  174|   711k|            self.data
  175|   711k|                .copy_within(self.position.line_start_buffer_offset.., 0);
  176|   711k|            self.data
  177|   711k|                .truncate(self.data.len() - self.position.line_start_buffer_offset);
  178|   711k|            self.position.buffer_offset -= self.position.line_start_buffer_offset;
  179|   711k|            self.position.line_start_buffer_offset = 0;
  180|   711k|            self.previous_position = self.position;
  181|  6.47M|        }
  182|  7.18M|    }
_RNvMs3_NtNtCslNspdJhbxze_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_5lexer7N3LexerE10parse_nextB9_:
  187|  25.1M|    pub fn parse_next(
  188|  25.1M|        &mut self,
  189|  25.1M|        options: &R::Options,
  190|  25.1M|    ) -> Option<Result<TokenOrLineJump<R::Token<'_>>, TurtleSyntaxError>> {
  191|  25.1M|        if self.skip_whitespaces_and_comments()? {
  192|  1.61M|            self.previous_position = self.position;
  193|  1.61M|            return Some(Ok(TokenOrLineJump::LineJump));
  194|  22.6M|        }
  195|  22.6M|        self.previous_position = self.position;
  196|  22.6M|        let Some((consumed, result)) = self.parser.recognize_next_token(
  197|  22.6M|            &self.data[self.position.buffer_offset..],
  198|  22.6M|            self.is_ending,
  199|  22.6M|            options,
  200|  22.6M|        ) else {
  201|  6.58M|            return if self.is_ending {
  202|   273k|                if self.position.buffer_offset == self.data.len() {
  203|   226k|                    None // We have finished
  204|       |                } else {
  205|  46.4k|                    let (new_line_jumps, new_line_start) =
  206|  46.4k|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  207|  46.4k|                            &self.data[self.position.buffer_offset..],
  208|  46.4k|                        );
  209|  46.4k|                    if new_line_jumps > 0 {
  210|  2.14k|                        self.position.line_start_buffer_offset =
  211|  2.14k|                            self.position.buffer_offset + new_line_start;
  212|  44.2k|                    }
  213|  46.4k|                    self.position.global_offset +=
  214|  46.4k|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  215|  46.4k|                    self.position.buffer_offset = self.data.len();
  216|  46.4k|                    self.position.global_line += new_line_jumps;
  217|  46.4k|                    let error = TurtleSyntaxError::new(
  218|  46.4k|                        self.last_token_location(),
  219|  46.4k|                        "Unexpected end of file",
  220|  46.4k|                    );
  221|  46.4k|                    Some(Err(error))
  222|       |                }
  223|       |            } else {
  224|  6.31M|                None
  225|       |            };
  226|       |        };
  227|  16.0M|        debug_assert!(
  228|      0|            consumed > 0,
  229|      0|            "The lexer must consume at least one byte each time"
  230|       |        );
  231|  16.0M|        debug_assert!(
  232|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  233|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  234|      0|            self.data.len() - self.position.buffer_offset
  235|       |        );
  236|  16.0M|        let (new_line_jumps, new_line_start) =
  237|  16.0M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  238|  16.0M|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  239|  16.0M|            );
  240|  16.0M|        if new_line_jumps > 0 {
  241|  92.7k|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  242|  15.9M|        }
  243|  16.0M|        self.position.buffer_offset += consumed;
  244|  16.0M|        self.position.global_offset += u64::try_from(consumed).unwrap();
  245|  16.0M|        self.position.global_line += new_line_jumps;
  246|  16.0M|        Some(result.map(TokenOrLineJump::Token).map_err(|e| {
  247|       |            TurtleSyntaxError::new(
  248|       |                self.location_from_buffer_offset_range(e.location),
  249|       |                e.message,
  250|       |            )
  251|  16.0M|        }))
  252|  25.1M|    }
_RNvMs3_NtNtCslNspdJhbxze_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE10parse_nextB9_:
  187|   820k|    pub fn parse_next(
  188|   820k|        &mut self,
  189|   820k|        options: &R::Options,
  190|   820k|    ) -> Option<Result<TokenOrLineJump<R::Token<'_>>, TurtleSyntaxError>> {
  191|   820k|        if self.skip_whitespaces_and_comments()? {
  192|   124k|            self.previous_position = self.position;
  193|   124k|            return Some(Ok(TokenOrLineJump::LineJump));
  194|   695k|        }
  195|   695k|        self.previous_position = self.position;
  196|   695k|        let Some((consumed, result)) = self.parser.recognize_next_token(
  197|   695k|            &self.data[self.position.buffer_offset..],
  198|   695k|            self.is_ending,
  199|   695k|            options,
  200|   695k|        ) else {
  201|   113k|            return if self.is_ending {
  202|   113k|                if self.position.buffer_offset == self.data.len() {
  203|   113k|                    None // We have finished
  204|       |                } else {
  205|      0|                    let (new_line_jumps, new_line_start) =
  206|      0|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  207|      0|                            &self.data[self.position.buffer_offset..],
  208|      0|                        );
  209|      0|                    if new_line_jumps > 0 {
  210|      0|                        self.position.line_start_buffer_offset =
  211|      0|                            self.position.buffer_offset + new_line_start;
  212|      0|                    }
  213|      0|                    self.position.global_offset +=
  214|      0|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  215|      0|                    self.position.buffer_offset = self.data.len();
  216|      0|                    self.position.global_line += new_line_jumps;
  217|      0|                    let error = TurtleSyntaxError::new(
  218|      0|                        self.last_token_location(),
  219|      0|                        "Unexpected end of file",
  220|      0|                    );
  221|      0|                    Some(Err(error))
  222|       |                }
  223|       |            } else {
  224|      0|                None
  225|       |            };
  226|       |        };
  227|   582k|        debug_assert!(
  228|      0|            consumed > 0,
  229|      0|            "The lexer must consume at least one byte each time"
  230|       |        );
  231|   582k|        debug_assert!(
  232|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  233|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  234|      0|            self.data.len() - self.position.buffer_offset
  235|       |        );
  236|   582k|        let (new_line_jumps, new_line_start) =
  237|   582k|            Self::find_number_of_line_jumps_and_start_of_last_line(
  238|   582k|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  239|   582k|            );
  240|   582k|        if new_line_jumps > 0 {
  241|      0|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  242|   582k|        }
  243|   582k|        self.position.buffer_offset += consumed;
  244|   582k|        self.position.global_offset += u64::try_from(consumed).unwrap();
  245|   582k|        self.position.global_line += new_line_jumps;
  246|   582k|        Some(result.map(TokenOrLineJump::Token).map_err(|e| {
  247|       |            TurtleSyntaxError::new(
  248|       |                self.location_from_buffer_offset_range(e.location),
  249|       |                e.message,
  250|       |            )
  251|   582k|        }))
  252|   820k|    }
_RNCNvMs3_NtNtCslNspdJhbxze_5oxttl7toolkit5lexerINtB7_5LexerINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtBb_5lexer7N3LexerE10parse_next0Bb_:
  246|  5.97M|        Some(result.map(TokenOrLineJump::Token).map_err(|e| {
  247|  5.97M|            TurtleSyntaxError::new(
  248|  5.97M|                self.location_from_buffer_offset_range(e.location),
  249|  5.97M|                e.message,
  250|  5.97M|            )
  251|  5.97M|        }))
_RNvMs3_NtNtCslNspdJhbxze_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_5lexer7N3LexerE33location_from_buffer_offset_rangeB9_:
  254|  5.97M|    pub fn location_from_buffer_offset_range(
  255|  5.97M|        &self,
  256|  5.97M|        offset_range: Range<usize>,
  257|  5.97M|    ) -> Range<TextPosition> {
  258|  5.97M|        let start_offset = self.previous_position.buffer_offset + offset_range.start;
  259|  5.97M|        let (start_extra_line_jumps, start_line_start) =
  260|  5.97M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  261|  5.97M|                &self.data[self.previous_position.buffer_offset..start_offset],
  262|  5.97M|            );
  263|  5.97M|        let start_line_start = if start_extra_line_jumps > 0 {
  264|  4.57k|            start_line_start + self.previous_position.buffer_offset
  265|       |        } else {
  266|  5.97M|            self.previous_position.line_start_buffer_offset
  267|       |        };
  268|  5.97M|        let end_offset = self.previous_position.buffer_offset + offset_range.end;
  269|  5.97M|        let (end_extra_line_jumps, end_line_start) =
  270|  5.97M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  271|  5.97M|                &self.data[self.previous_position.buffer_offset..end_offset],
  272|  5.97M|            );
  273|  5.97M|        let end_line_start = if end_extra_line_jumps > 0 {
  274|  79.7k|            end_line_start + self.previous_position.buffer_offset
  275|       |        } else {
  276|  5.89M|            self.previous_position.line_start_buffer_offset
  277|       |        };
  278|  5.97M|        TextPosition {
  279|  5.97M|            line: self.previous_position.global_line + start_extra_line_jumps,
  280|  5.97M|            column: Self::column_from_bytes(&self.data[start_line_start..start_offset]),
  281|  5.97M|            offset: self.previous_position.global_offset
  282|  5.97M|                + u64::try_from(offset_range.start).unwrap(),
  283|  5.97M|        }..TextPosition {
  284|  5.97M|            line: self.previous_position.global_line + end_extra_line_jumps,
  285|  5.97M|            column: Self::column_from_bytes(&self.data[end_line_start..end_offset]),
  286|  5.97M|            offset: self.previous_position.global_offset + u64::try_from(offset_range.end).unwrap(),
  287|  5.97M|        }
  288|  5.97M|    }
_RNvMs3_NtNtCslNspdJhbxze_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_5lexer7N3LexerE19last_token_locationB9_:
  290|  2.33M|    pub fn last_token_location(&self) -> Range<TextPosition> {
  291|  2.33M|        self.text_position_from_position(&self.previous_position)
  292|  2.33M|            ..self.text_position_from_position(&self.position)
  293|  2.33M|    }
_RNvMs3_NtNtCslNspdJhbxze_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_5lexer7N3LexerE27text_position_from_positionB9_:
  295|  4.67M|    fn text_position_from_position(&self, position: &Position) -> TextPosition {
  296|  4.67M|        TextPosition {
  297|  4.67M|            line: position.global_line,
  298|  4.67M|            column: Self::column_from_bytes(
  299|  4.67M|                &self.data[position.line_start_buffer_offset..position.buffer_offset],
  300|  4.67M|            ),
  301|  4.67M|            offset: position.global_offset,
  302|  4.67M|        }
  303|  4.67M|    }
_RNvMs3_NtNtCslNspdJhbxze_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_5lexer7N3LexerE17last_token_sourceB9_:
  305|  2.29M|    pub fn last_token_source(&self) -> Cow<'_, str> {
  306|  2.29M|        String::from_utf8_lossy(
  307|  2.29M|            &self.data[self.previous_position.buffer_offset..self.position.buffer_offset],
  308|  2.29M|        )
  309|  2.29M|    }
_RNvMs3_NtNtCslNspdJhbxze_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_5lexer7N3LexerE6is_endB9_:
  311|  7.41M|    pub fn is_end(&self) -> bool {
  312|  7.41M|        self.is_ending && self.data.len() == self.position.buffer_offset
  313|  7.41M|    }
_RNvMs3_NtNtCslNspdJhbxze_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE6is_endB9_:
  311|   113k|    pub fn is_end(&self) -> bool {
  312|   113k|        self.is_ending && self.data.len() == self.position.buffer_offset
  313|   113k|    }
_RNvMs3_NtNtCslNspdJhbxze_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  316|  25.1M|    fn skip_whitespaces_and_comments(&mut self) -> Option<bool> {
  317|  25.1M|        if self.skip_whitespaces()? {
  318|  1.58M|            return Some(true);
  319|  22.7M|        }
  320|  22.7M|
  321|  22.7M|        let buf = &self.data[self.position.buffer_offset..];
  322|  22.7M|        if let Some(line_comment_start) = self.line_comment_start {
  323|  22.7M|            if buf.starts_with(line_comment_start) {
  324|       |                // Comment
  325|  95.8k|                if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  326|  42.3k|                    let mut end_position = line_comment_start.len() + end;
  327|  42.3k|                    if buf.get(end_position).copied() == Some(b'\r') {
  328|       |                        // We look for \n for Windows line end style
  329|  17.7k|                        if let Some(c) = buf.get(end_position + 1) {
  330|  10.6k|                            if *c == b'\n' {
  331|    217|                                end_position += 1;
  332|  10.4k|                            }
  333|  7.11k|                        } else if !self.is_ending {
  334|  7.07k|                            return None; // We need to read more
  335|     31|                        }
  336|  24.5k|                    }
  337|  35.2k|                    let comment_size = end_position + 1;
  338|  35.2k|                    self.position.buffer_offset += comment_size;
  339|  35.2k|                    self.position.line_start_buffer_offset = self.position.buffer_offset;
  340|  35.2k|                    self.position.global_offset += u64::try_from(comment_size).unwrap();
  341|  35.2k|                    self.position.global_line += 1;
  342|  35.2k|                    return Some(true);
  343|  53.5k|                }
  344|  53.5k|                if self.is_ending {
  345|  1.93k|                    self.position.buffer_offset = self.data.len(); // EOF
  346|  1.93k|                    return Some(false);
  347|  51.5k|                }
  348|  51.5k|                return None; // We need more data
  349|  22.6M|            } else if !self.is_ending && buf.len() < line_comment_start.len() {
  350|      0|                return None; // We need more data
  351|  22.6M|            }
  352|      0|        }
  353|  22.6M|        Some(false)
  354|  25.1M|    }
_RNvMs3_NtNtCslNspdJhbxze_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  316|   820k|    fn skip_whitespaces_and_comments(&mut self) -> Option<bool> {
  317|   820k|        if self.skip_whitespaces()? {
  318|   124k|            return Some(true);
  319|   695k|        }
  320|   695k|
  321|   695k|        let buf = &self.data[self.position.buffer_offset..];
  322|   695k|        if let Some(line_comment_start) = self.line_comment_start {
  323|   695k|            if buf.starts_with(line_comment_start) {
  324|       |                // Comment
  325|      0|                if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  326|      0|                    let mut end_position = line_comment_start.len() + end;
  327|      0|                    if buf.get(end_position).copied() == Some(b'\r') {
  328|       |                        // We look for \n for Windows line end style
  329|      0|                        if let Some(c) = buf.get(end_position + 1) {
  330|      0|                            if *c == b'\n' {
  331|      0|                                end_position += 1;
  332|      0|                            }
  333|      0|                        } else if !self.is_ending {
  334|      0|                            return None; // We need to read more
  335|      0|                        }
  336|      0|                    }
  337|      0|                    let comment_size = end_position + 1;
  338|      0|                    self.position.buffer_offset += comment_size;
  339|      0|                    self.position.line_start_buffer_offset = self.position.buffer_offset;
  340|      0|                    self.position.global_offset += u64::try_from(comment_size).unwrap();
  341|      0|                    self.position.global_line += 1;
  342|      0|                    return Some(true);
  343|      0|                }
  344|      0|                if self.is_ending {
  345|      0|                    self.position.buffer_offset = self.data.len(); // EOF
  346|      0|                    return Some(false);
  347|      0|                }
  348|      0|                return None; // We need more data
  349|   695k|            } else if !self.is_ending && buf.len() < line_comment_start.len() {
  350|      0|                return None; // We need more data
  351|   695k|            }
  352|      0|        }
  353|   695k|        Some(false)
  354|   820k|    }
_RNvMs3_NtNtCslNspdJhbxze_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  356|  25.1M|    fn skip_whitespaces(&mut self) -> Option<bool> {
  357|  25.1M|        let mut i = self.position.buffer_offset;
  358|  25.2M|        while let Some(c) = self.data.get(i) {
  359|  24.1M|            match c {
  360|  68.7k|                b' ' | b'\t' => {
  361|  68.7k|                    self.position.buffer_offset += 1;
  362|  68.7k|                    self.position.global_offset += 1;
  363|  68.7k|                }
  364|       |                b'\r' => {
  365|       |                    // We look for \n for Windows line end style
  366|  45.0k|                    let mut increment: u8 = 1;
  367|  45.0k|                    if let Some(c) = self.data.get(i + 1) {
  368|  35.0k|                        if *c == b'\n' {
  369|  1.39k|                            increment += 1;
  370|  33.6k|                        }
  371|  10.0k|                    } else if !self.is_ending {
  372|  9.60k|                        return None; // We need to read more
  373|    458|                    }
  374|  35.4k|                    self.position.buffer_offset += usize::from(increment);
  375|  35.4k|                    self.position.line_start_buffer_offset = self.position.buffer_offset;
  376|  35.4k|                    self.position.global_offset += u64::from(increment);
  377|  35.4k|                    self.position.global_line += 1;
  378|  35.4k|                    return Some(true);
  379|       |                }
  380|       |                b'\n' => {
  381|  1.54M|                    self.position.buffer_offset += 1;
  382|  1.54M|                    self.position.line_start_buffer_offset = self.position.buffer_offset;
  383|  1.54M|                    self.position.global_offset += 1;
  384|  1.54M|                    self.position.global_line += 1;
  385|  1.54M|                    return Some(true);
  386|       |                }
  387|  22.5M|                _ => return Some(false),
  388|       |            }
  389|  68.7k|            i += 1;
  390|       |            // TODO: SIMD
  391|       |        }
  392|  1.02M|        self.is_ending.then_some(false) // We return None if there is not enough data
  393|  25.1M|    }
_RNvMs3_NtNtCslNspdJhbxze_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  356|   820k|    fn skip_whitespaces(&mut self) -> Option<bool> {
  357|   820k|        let mut i = self.position.buffer_offset;
  358|  1.23M|        while let Some(c) = self.data.get(i) {
  359|  1.11M|            match c {
  360|   410k|                b' ' | b'\t' => {
  361|   410k|                    self.position.buffer_offset += 1;
  362|   410k|                    self.position.global_offset += 1;
  363|   410k|                }
  364|       |                b'\r' => {
  365|       |                    // We look for \n for Windows line end style
  366|      0|                    let mut increment: u8 = 1;
  367|      0|                    if let Some(c) = self.data.get(i + 1) {
  368|      0|                        if *c == b'\n' {
  369|      0|                            increment += 1;
  370|      0|                        }
  371|      0|                    } else if !self.is_ending {
  372|      0|                        return None; // We need to read more
  373|      0|                    }
  374|      0|                    self.position.buffer_offset += usize::from(increment);
  375|      0|                    self.position.line_start_buffer_offset = self.position.buffer_offset;
  376|      0|                    self.position.global_offset += u64::from(increment);
  377|      0|                    self.position.global_line += 1;
  378|      0|                    return Some(true);
  379|       |                }
  380|       |                b'\n' => {
  381|   124k|                    self.position.buffer_offset += 1;
  382|   124k|                    self.position.line_start_buffer_offset = self.position.buffer_offset;
  383|   124k|                    self.position.global_offset += 1;
  384|   124k|                    self.position.global_line += 1;
  385|   124k|                    return Some(true);
  386|       |                }
  387|   582k|                _ => return Some(false),
  388|       |            }
  389|   410k|            i += 1;
  390|       |            // TODO: SIMD
  391|       |        }
  392|   113k|        self.is_ending.then_some(false) // We return None if there is not enough data
  393|   820k|    }
_RNvMs3_NtNtCslNspdJhbxze_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  395|  28.0M|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  396|  28.0M|        let mut num_of_jumps = 0;
  397|  28.0M|        let mut last_jump_pos = 0;
  398|  28.0M|        let mut previous_cr = 0;
  399|  28.0M|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  400|   269k|            if bytes[pos] == b'\r' {
  401|  59.4k|                previous_cr = pos;
  402|  59.4k|                num_of_jumps += 1;
  403|  59.4k|                last_jump_pos = pos + 1;
  404|  59.4k|            } else {
  405|   210k|                if previous_cr < pos - 1 {
  406|   176k|                    // We count \r\n as a single line jump
  407|   176k|                    num_of_jumps += 1;
  408|   176k|                }
  409|   210k|                last_jump_pos = pos + 1;
  410|       |            }
  411|       |        }
  412|  28.0M|        (num_of_jumps, last_jump_pos)
  413|  28.0M|    }
_RNvMs3_NtNtCslNspdJhbxze_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  395|   582k|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  396|   582k|        let mut num_of_jumps = 0;
  397|   582k|        let mut last_jump_pos = 0;
  398|   582k|        let mut previous_cr = 0;
  399|   582k|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  400|      0|            if bytes[pos] == b'\r' {
  401|      0|                previous_cr = pos;
  402|      0|                num_of_jumps += 1;
  403|      0|                last_jump_pos = pos + 1;
  404|      0|            } else {
  405|      0|                if previous_cr < pos - 1 {
  406|      0|                    // We count \r\n as a single line jump
  407|      0|                    num_of_jumps += 1;
  408|      0|                }
  409|      0|                last_jump_pos = pos + 1;
  410|       |            }
  411|       |        }
  412|   582k|        (num_of_jumps, last_jump_pos)
  413|   582k|    }
_RNvMs3_NtNtCslNspdJhbxze_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_5lexer7N3LexerE17column_from_bytesB9_:
  415|  23.7M|    fn column_from_bytes(bytes: &[u8]) -> u64 {
  416|  23.7M|        match str::from_utf8(bytes) {
  417|  15.3M|            Ok(s) => u64::try_from(s.chars().count()).unwrap(),
  418|  8.36M|            Err(e) => {
  419|  8.36M|                if e.valid_up_to() == 0 {
  420|  1.26M|                    0
  421|       |                } else {
  422|  7.09M|                    Self::column_from_bytes(&bytes[..e.valid_up_to()])
  423|       |                }
  424|       |            }
  425|       |        }
  426|  23.7M|    }

_RNvXNtNtCslNspdJhbxze_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCshZc3FwCJ069_4core7convert4FromNtNtCs8f6x4lOZV33_5alloc6string6StringE4fromB6_:
   40|  26.9k|    fn from(message: S) -> Self {
   41|  26.9k|        Self {
   42|  26.9k|            message: message.into(),
   43|  26.9k|        }
   44|  26.9k|    }
_RNvXNtNtCslNspdJhbxze_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCshZc3FwCJ069_4core7convert4FromReE4fromB6_:
   40|  2.26M|    fn from(message: S) -> Self {
   41|  2.26M|        Self {
   42|  2.26M|            message: message.into(),
   43|  2.26M|        }
   44|  2.26M|    }
_RNvMs_NtNtCslNspdJhbxze_5oxttl7toolkit6parserINtB4_6ParserINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB8_12line_formats16NQuadsRecognizerE3newB8_:
   57|   113k|    pub fn new(lexer: Lexer<B, RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   58|   113k|        Self {
   59|   113k|            lexer,
   60|   113k|            state: Some(recognizer),
   61|   113k|            context,
   62|   113k|            results: vec![],
   63|   113k|            errors: vec![],
   64|   113k|        }
   65|   113k|    }
_RNvMs_NtNtCslNspdJhbxze_5oxttl7toolkit6parserINtB4_6ParserRShNtNtB8_12line_formats16NQuadsRecognizerE3newB8_:
   57|  56.5k|    pub fn new(lexer: Lexer<B, RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   58|  56.5k|        Self {
   59|  56.5k|            lexer,
   60|  56.5k|            state: Some(recognizer),
   61|  56.5k|            context,
   62|  56.5k|            results: vec![],
   63|  56.5k|            errors: vec![],
   64|  56.5k|        }
   65|  56.5k|    }
_RNvMs0_NtNtCslNspdJhbxze_5oxttl7toolkit6parserINtB5_6ParserINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_12line_formats16NQuadsRecognizerE6is_endB9_:
   70|   113k|    pub fn is_end(&self) -> bool {
   71|   113k|        self.state.is_none() && self.results.is_empty() && self.errors.is_empty()
   72|   113k|    }
_RNvMs0_NtNtCslNspdJhbxze_5oxttl7toolkit6parserINtB5_6ParserINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_12line_formats16NQuadsRecognizerE10parse_nextB9_:
   74|  15.8M|    pub fn parse_next(&mut self) -> Option<Result<RR::Output, TurtleSyntaxError>> {
   75|       |        loop {
   76|  27.6M|            if let Some(error) = self.errors.pop() {
   77|  2.29M|                return Some(Err(TurtleSyntaxError::new(
   78|  2.29M|                    self.lexer.last_token_location(),
   79|  2.29M|                    error
   80|  2.29M|                        .message
   81|  2.29M|                        .replace("TOKEN", &self.lexer.last_token_source()),
   82|  2.29M|                )));
   83|  25.3M|            }
   84|  25.3M|            if let Some(result) = self.results.pop() {
   85|   249k|                return Some(Ok(result));
   86|  25.1M|            }
   87|  25.1M|            if let Some(result) = self.lexer.parse_next(RR::lexer_options(&self.context)) {
   88|  17.7M|                match result {
   89|  11.7M|                    Ok(token) => {
   90|  11.7M|                        self.state = self.state.take().map(|state| {
   91|       |                            state.recognize_next(
   92|       |                                token,
   93|       |                                &mut self.context,
   94|       |                                &mut self.results,
   95|       |                                &mut self.errors,
   96|       |                            )
   97|  11.7M|                        });
   98|  11.7M|                        continue;
   99|       |                    }
  100|  6.02M|                    Err(e) => {
  101|  6.02M|                        self.state = self.state.take().map(RR::error_recovery_state);
  102|  6.02M|                        return Some(Err(e));
  103|       |                    }
  104|       |                }
  105|  7.41M|            }
  106|  7.41M|            if self.lexer.is_end() {
  107|   226k|                self.state.take()?.recognize_end(
  108|   113k|                    &mut self.context,
  109|   113k|                    &mut self.results,
  110|   113k|                    &mut self.errors,
  111|   113k|                )
  112|       |            } else {
  113|  7.18M|                return None;
  114|       |            }
  115|       |        }
  116|  15.8M|    }
_RNvMs0_NtNtCslNspdJhbxze_5oxttl7toolkit6parserINtB5_6ParserRShNtNtB9_12line_formats16NQuadsRecognizerE10parse_nextB9_:
   74|   180k|    pub fn parse_next(&mut self) -> Option<Result<RR::Output, TurtleSyntaxError>> {
   75|       |        loop {
   76|   944k|            if let Some(error) = self.errors.pop() {
   77|      0|                return Some(Err(TurtleSyntaxError::new(
   78|      0|                    self.lexer.last_token_location(),
   79|      0|                    error
   80|      0|                        .message
   81|      0|                        .replace("TOKEN", &self.lexer.last_token_source()),
   82|      0|                )));
   83|   944k|            }
   84|   944k|            if let Some(result) = self.results.pop() {
   85|   124k|                return Some(Ok(result));
   86|   820k|            }
   87|   820k|            if let Some(result) = self.lexer.parse_next(RR::lexer_options(&self.context)) {
   88|   707k|                match result {
   89|   707k|                    Ok(token) => {
   90|   707k|                        self.state = self.state.take().map(|state| {
   91|       |                            state.recognize_next(
   92|       |                                token,
   93|       |                                &mut self.context,
   94|       |                                &mut self.results,
   95|       |                                &mut self.errors,
   96|       |                            )
   97|   707k|                        });
   98|   707k|                        continue;
   99|       |                    }
  100|      0|                    Err(e) => {
  101|      0|                        self.state = self.state.take().map(RR::error_recovery_state);
  102|      0|                        return Some(Err(e));
  103|       |                    }
  104|       |                }
  105|   113k|            }
  106|   113k|            if self.lexer.is_end() {
  107|   113k|                self.state.take()?.recognize_end(
  108|  56.5k|                    &mut self.context,
  109|  56.5k|                    &mut self.results,
  110|  56.5k|                    &mut self.errors,
  111|  56.5k|                )
  112|       |            } else {
  113|      0|                return None;
  114|       |            }
  115|       |        }
  116|   180k|    }
_RNCNvMs0_NtNtCslNspdJhbxze_5oxttl7toolkit6parserINtB7_6ParserINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtBb_12line_formats16NQuadsRecognizerE10parse_next0Bb_:
   90|  11.7M|                        self.state = self.state.take().map(|state| {
   91|  11.7M|                            state.recognize_next(
   92|  11.7M|                                token,
   93|  11.7M|                                &mut self.context,
   94|  11.7M|                                &mut self.results,
   95|  11.7M|                                &mut self.errors,
   96|  11.7M|                            )
   97|  11.7M|                        });
_RNCNvMs0_NtNtCslNspdJhbxze_5oxttl7toolkit6parserINtB7_6ParserRShNtNtBb_12line_formats16NQuadsRecognizerE10parse_next0Bb_:
   90|   707k|                        self.state = self.state.take().map(|state| {
   91|   707k|                            state.recognize_next(
   92|   707k|                                token,
   93|   707k|                                &mut self.context,
   94|   707k|                                &mut self.results,
   95|   707k|                                &mut self.errors,
   96|   707k|                            )
   97|   707k|                        });
_RNvMs1_NtNtCslNspdJhbxze_5oxttl7toolkit6parserINtB5_6ParserINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_12line_formats16NQuadsRecognizerE3endB9_:
  121|   113k|    pub fn end(&mut self) {
  122|   113k|        self.lexer.end()
  123|   113k|    }
_RNvMs1_NtNtCslNspdJhbxze_5oxttl7toolkit6parserINtB5_6ParserINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_12line_formats16NQuadsRecognizerE17extend_from_sliceB9_:
  125|  7.18M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  126|  7.18M|        self.lexer.extend_from_slice(other)
  127|  7.18M|    }
_RNvXs2_NtNtCslNspdJhbxze_5oxttl7toolkit6parserINtB5_6ParserRShNtNtB9_12line_formats16NQuadsRecognizerENtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect12IntoIterator9into_iterB9_:
  152|  56.5k|    fn into_iter(self) -> Self::IntoIter {
  153|  56.5k|        SliceIterator { parser: self }
  154|  56.5k|    }
_RNvXs4_NtNtCslNspdJhbxze_5oxttl7toolkit6parserINtB5_13SliceIteratorNtNtB9_12line_formats16NQuadsRecognizerENtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4nextB9_:
  212|   180k|    fn next(&mut self) -> Option<Self::Item> {
  213|   180k|        self.parser.parse_next()
  214|   180k|    }


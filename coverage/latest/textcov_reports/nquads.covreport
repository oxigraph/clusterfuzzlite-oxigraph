rust_fuzzer_test_input:
  209|  52.0k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  52.0k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  52.0k|                }
  223|  52.0k|
  224|  52.0k|                __libfuzzer_sys_run(bytes);
  225|  52.0k|                0
  226|       |            }
_RNvNvCsdwlLKB38Swz_6nquads1__19___libfuzzer_sys_run:
  241|  52.0k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|       |            }
LLVMFuzzerTestOneInput:
   58|  52.0k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  52.0k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  52.0k|    });
   63|  52.0k|
   64|  52.0k|    match test_input {
   65|  52.0k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  52.0k|}
_RNCNvCs7X8AIZF1ltS_13libfuzzer_sys15test_input_wrap0B3_:
   59|  52.0k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  52.0k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  52.0k|        rust_fuzzer_test_input(data_slice)
   62|  52.0k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvMs3_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next0ECs8X3sjsXBtJI_5oxttl:
 1044|  27.0M|    pub(crate) unsafe fn next(
 1045|  27.0M|        &mut self,
 1046|  27.0M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  27.0M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  27.0M|        let found = find_raw(self.start, self.end)?;
 1057|   239k|        let result = found.distance(self.original_start);
 1058|   239k|        self.start = found.add(1);
 1059|   239k|        Some(result)
 1060|  27.0M|    }
_RINvNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECs8X3sjsXBtJI_5oxttl:
 1125|   100k|pub(crate) unsafe fn search_slice_with_raw(
 1126|   100k|    haystack: &[u8],
 1127|   100k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|   100k|) -> Option<usize> {
 1129|   100k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|   100k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|   100k|    // a &[u8].
 1132|   100k|    let start = haystack.as_ptr();
 1133|   100k|    let end = start.add(haystack.len());
 1134|   100k|    let found = find_raw(start, end)?;
 1135|  54.3k|    Some(found.distance(start))
 1136|   100k|}
_RINvNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr7memchr20ECs8X3sjsXBtJI_5oxttl:
 1125|  9.82M|pub(crate) unsafe fn search_slice_with_raw(
 1126|  9.82M|    haystack: &[u8],
 1127|  9.82M|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  9.82M|) -> Option<usize> {
 1129|  9.82M|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  9.82M|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  9.82M|    // a &[u8].
 1132|  9.82M|    let start = haystack.as_ptr();
 1133|  9.82M|    let end = start.add(haystack.len());
 1134|  9.82M|    let found = find_raw(start, end)?;
 1135|  4.82M|    Some(found.distance(start))
 1136|  9.82M|}
_RNvMs3_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  26.8M|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  26.8M|        Iter {
 1029|  26.8M|            original_start: haystack.as_ptr(),
 1030|  26.8M|            start: haystack.as_ptr(),
 1031|  26.8M|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  26.8M|            haystack: core::marker::PhantomData,
 1033|  26.8M|        }
 1034|  26.8M|    }
_RNvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE7needle1B8_:
  117|  99.2k|    pub(crate) fn needle1(&self) -> u8 {
  118|  99.2k|        self.s1
  119|  99.2k|    }
_RNvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE3newB8_:
  111|   100k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|   100k|        One { s1: needle, v1: V::splat(needle) }
  113|   100k|    }
_RNvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  13.2k|    pub(crate) unsafe fn find_raw(
  144|  13.2k|        &self,
  145|  13.2k|        start: *const u8,
  146|  13.2k|        end: *const u8,
  147|  13.2k|    ) -> Option<*const u8> {
  148|  13.2k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  13.2k|        // need to move up to using a u64 for the masks used below. Currently
  150|  13.2k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  13.2k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  13.2k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  13.2k|        let topos = V::Mask::first_offset;
  155|  13.2k|        let len = end.distance(start);
  156|  13.2k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  13.2k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  4.92k|            return Some(cur);
  167|  8.36k|        }
  168|  8.36k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  8.36k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  8.36k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  8.36k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  8.36k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  11.6k|        while cur <= end.sub(V::BYTES) {
  213|  3.91k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  3.91k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    668|                return Some(cur);
  216|  3.24k|            }
  217|  3.24k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  7.69k|        if cur < end {
  224|  6.40k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  6.40k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  6.40k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  6.40k|            return self.search_chunk(cur, topos);
  228|  1.29k|        }
  229|  1.29k|        None
  230|  13.2k|    }
_RINvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  23.6k|    unsafe fn search_chunk(
  417|  23.6k|        &self,
  418|  23.6k|        cur: *const u8,
  419|  23.6k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  23.6k|    ) -> Option<*const u8> {
  421|  23.6k|        let chunk = V::load_unaligned(cur);
  422|  23.6k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  23.6k|        if mask.has_non_zero() {
  424|  6.82k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  16.7k|            None
  427|       |        }
  428|  23.6k|    }
_RNvMs_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE3newBa_:
  450|  36.8M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  36.8M|        Two {
  452|  36.8M|            s1: needle1,
  453|  36.8M|            s2: needle2,
  454|  36.8M|            v1: V::splat(needle1),
  455|  36.8M|            v2: V::splat(needle2),
  456|  36.8M|        }
  457|  36.8M|    }
_RNvMs_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  72.1M|    pub(crate) fn needle1(&self) -> u8 {
  462|  72.1M|        self.s1
  463|  72.1M|    }
_RNvMs_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  71.2M|    pub(crate) fn needle2(&self) -> u8 {
  468|  71.2M|        self.s2
  469|  71.2M|    }
_RNvMs_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE8find_rawBa_:
  493|  1.47M|    pub(crate) unsafe fn find_raw(
  494|  1.47M|        &self,
  495|  1.47M|        start: *const u8,
  496|  1.47M|        end: *const u8,
  497|  1.47M|    ) -> Option<*const u8> {
  498|  1.47M|        // If we want to support vectors bigger than 256 bits, we probably
  499|  1.47M|        // need to move up to using a u64 for the masks used below. Currently
  500|  1.47M|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|  1.47M|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|  1.47M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  1.47M|        let topos = V::Mask::first_offset;
  505|  1.47M|        let len = end.distance(start);
  506|  1.47M|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  1.47M|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   598k|            return Some(cur);
  517|   874k|        }
  518|   874k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   874k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|   874k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   874k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   874k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  1.11M|        while cur <= end.sub(V::BYTES) {
  551|   254k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   254k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  15.0k|                return Some(cur);
  554|   239k|            }
  555|   239k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   859k|        if cur < end {
  562|   807k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   807k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|   807k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   807k|            return self.search_chunk(cur, topos);
  566|  51.7k|        }
  567|  51.7k|        None
  568|  1.47M|    }
_RINvMs_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  2.53M|    unsafe fn search_chunk(
  671|  2.53M|        &self,
  672|  2.53M|        cur: *const u8,
  673|  2.53M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  2.53M|    ) -> Option<*const u8> {
  675|  2.53M|        let chunk = V::load_unaligned(cur);
  676|  2.53M|        let eq1 = self.v1.cmpeq(chunk);
  677|  2.53M|        let eq2 = self.v2.cmpeq(chunk);
  678|  2.53M|        let mask = eq1.or(eq2).movemask();
  679|  2.53M|        if mask.has_non_zero() {
  680|   657k|            let mask1 = eq1.movemask();
  681|   657k|            let mask2 = eq2.movemask();
  682|   657k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  1.87M|            None
  685|       |        }
  686|  2.53M|    }
_RNvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iE3newB8_:
  111|   100k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|   100k|        One { s1: needle, v1: V::splat(needle) }
  113|   100k|    }
_RNvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  62.6k|    pub(crate) unsafe fn find_raw(
  144|  62.6k|        &self,
  145|  62.6k|        start: *const u8,
  146|  62.6k|        end: *const u8,
  147|  62.6k|    ) -> Option<*const u8> {
  148|  62.6k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  62.6k|        // need to move up to using a u64 for the masks used below. Currently
  150|  62.6k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  62.6k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  62.6k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  62.6k|        let topos = V::Mask::first_offset;
  155|  62.6k|        let len = end.distance(start);
  156|  62.6k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  62.6k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  33.2k|            return Some(cur);
  167|  29.4k|        }
  168|  29.4k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  29.4k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  29.4k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  29.4k|        if len >= Self::LOOP_SIZE {
  172|  64.0k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|  52.8k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|  52.8k|                let a = V::load_aligned(cur);
  176|  52.8k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|  52.8k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|  52.8k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|  52.8k|                let eqa = self.v1.cmpeq(a);
  180|  52.8k|                let eqb = self.v1.cmpeq(b);
  181|  52.8k|                let eqc = self.v1.cmpeq(c);
  182|  52.8k|                let eqd = self.v1.cmpeq(d);
  183|  52.8k|                let or1 = eqa.or(eqb);
  184|  52.8k|                let or2 = eqc.or(eqd);
  185|  52.8k|                let or3 = or1.or(or2);
  186|  52.8k|                if or3.movemask_will_have_non_zero() {
  187|  3.48k|                    let mask = eqa.movemask();
  188|  3.48k|                    if mask.has_non_zero() {
  189|  1.23k|                        return Some(cur.add(topos(mask)));
  190|  2.25k|                    }
  191|  2.25k|
  192|  2.25k|                    let mask = eqb.movemask();
  193|  2.25k|                    if mask.has_non_zero() {
  194|  1.39k|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|    864|                    }
  196|    864|
  197|    864|                    let mask = eqc.movemask();
  198|    864|                    if mask.has_non_zero() {
  199|    497|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|    367|                    }
  201|    367|
  202|    367|                    let mask = eqd.movemask();
  203|    367|                    debug_assert!(mask.has_non_zero());
  204|    367|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  49.3k|                }
  206|  49.3k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  14.8k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  60.9k|        while cur <= end.sub(V::BYTES) {
  213|  36.6k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  36.6k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|  1.68k|                return Some(cur);
  216|  34.9k|            }
  217|  34.9k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  24.2k|        if cur < end {
  224|  22.3k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  22.3k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  22.3k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  22.3k|            return self.search_chunk(cur, topos);
  228|  1.95k|        }
  229|  1.95k|        None
  230|  62.6k|    }
_RINvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|   121k|    unsafe fn search_chunk(
  417|   121k|        &self,
  418|   121k|        cur: *const u8,
  419|   121k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|   121k|    ) -> Option<*const u8> {
  421|   121k|        let chunk = V::load_unaligned(cur);
  422|   121k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|   121k|        if mask.has_non_zero() {
  424|  36.3k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  85.2k|            None
  427|       |        }
  428|   121k|    }
_RNvMs_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iE3newBa_:
  450|  36.8M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  36.8M|        Two {
  452|  36.8M|            s1: needle1,
  453|  36.8M|            s2: needle2,
  454|  36.8M|            v1: V::splat(needle1),
  455|  36.8M|            v2: V::splat(needle2),
  456|  36.8M|        }
  457|  36.8M|    }
_RNvMs_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iE8find_rawBa_:
  493|  3.55M|    pub(crate) unsafe fn find_raw(
  494|  3.55M|        &self,
  495|  3.55M|        start: *const u8,
  496|  3.55M|        end: *const u8,
  497|  3.55M|    ) -> Option<*const u8> {
  498|  3.55M|        // If we want to support vectors bigger than 256 bits, we probably
  499|  3.55M|        // need to move up to using a u64 for the masks used below. Currently
  500|  3.55M|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|  3.55M|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|  3.55M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  3.55M|        let topos = V::Mask::first_offset;
  505|  3.55M|        let len = end.distance(start);
  506|  3.55M|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  3.55M|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  3.03M|            return Some(cur);
  517|   523k|        }
  518|   523k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   523k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|   523k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   523k|        if len >= Self::LOOP_SIZE {
  522|   805k|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|   604k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|   604k|                let a = V::load_aligned(cur);
  526|   604k|                let b = V::load_aligned(cur.add(V::BYTES));
  527|   604k|                let eqa1 = self.v1.cmpeq(a);
  528|   604k|                let eqb1 = self.v1.cmpeq(b);
  529|   604k|                let eqa2 = self.v2.cmpeq(a);
  530|   604k|                let eqb2 = self.v2.cmpeq(b);
  531|   604k|                let or1 = eqa1.or(eqb1);
  532|   604k|                let or2 = eqa2.or(eqb2);
  533|   604k|                let or3 = or1.or(or2);
  534|   604k|                if or3.movemask_will_have_non_zero() {
  535|  68.1k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|  68.1k|                    if mask.has_non_zero() {
  537|  41.1k|                        return Some(cur.add(topos(mask)));
  538|  27.0k|                    }
  539|  27.0k|
  540|  27.0k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|  27.0k|                    debug_assert!(mask.has_non_zero());
  542|  27.0k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|   536k|                }
  544|   536k|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   254k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   633k|        while cur <= end.sub(V::BYTES) {
  551|   192k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   192k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  15.1k|                return Some(cur);
  554|   177k|            }
  555|   177k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   440k|        if cur < end {
  562|   426k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   426k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|   426k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   426k|            return self.search_chunk(cur, topos);
  566|  13.8k|        }
  567|  13.8k|        None
  568|  3.55M|    }
_RINvMs_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  4.17M|    unsafe fn search_chunk(
  671|  4.17M|        &self,
  672|  4.17M|        cur: *const u8,
  673|  4.17M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  4.17M|    ) -> Option<*const u8> {
  675|  4.17M|        let chunk = V::load_unaligned(cur);
  676|  4.17M|        let eq1 = self.v1.cmpeq(chunk);
  677|  4.17M|        let eq2 = self.v2.cmpeq(chunk);
  678|  4.17M|        let mask = eq1.or(eq2).movemask();
  679|  4.17M|        if mask.has_non_zero() {
  680|  3.07M|            let mask1 = eq1.movemask();
  681|  3.07M|            let mask2 = eq2.movemask();
  682|  3.07M|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  1.09M|            None
  685|       |        }
  686|  4.17M|    }
_RINvNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  21.5k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  21.5k|    start: *const u8,
 1150|  21.5k|    end: *const u8,
 1151|  21.5k|    confirm: F,
 1152|  21.5k|) -> Option<*const u8> {
 1153|  21.5k|    debug_assert!(start <= end);
 1154|  21.5k|    let mut ptr = start;
 1155|   113k|    while ptr < end {
 1156|  99.2k|        if confirm(*ptr) {
 1157|  7.63k|            return Some(ptr);
 1158|  91.5k|        }
 1159|  91.5k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  13.9k|    None
 1162|  21.5k|}
_RINvNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|  25.9M|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  25.9M|    start: *const u8,
 1150|  25.9M|    end: *const u8,
 1151|  25.9M|    confirm: F,
 1152|  25.9M|) -> Option<*const u8> {
 1153|  25.9M|    debug_assert!(start <= end);
 1154|  25.9M|    let mut ptr = start;
 1155|  96.8M|    while ptr < end {
 1156|  72.1M|        if confirm(*ptr) {
 1157|  1.25M|            return Some(ptr);
 1158|  70.9M|        }
 1159|  70.9M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  24.6M|    None
 1162|  25.9M|}

_RNvMNtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|   100k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|   100k|        One {
   71|   100k|            sse2: generic::One::new(needle),
   72|   100k|            avx2: generic::One::new(needle),
   73|   100k|        }
   74|   100k|    }
_RNvMNtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|   100k|    pub unsafe fn find_raw(
  180|   100k|        &self,
  181|   100k|        start: *const u8,
  182|   100k|        end: *const u8,
  183|   100k|    ) -> Option<*const u8> {
  184|   100k|        if start >= end {
  185|  3.38k|            return None;
  186|  97.5k|        }
  187|  97.5k|        let len = end.distance(start);
  188|  97.5k|        if len < __m256i::BYTES {
  189|  34.8k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  21.5k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  21.5k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  13.2k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  62.6k|        }
  201|  62.6k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  62.6k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  62.6k|        // enough to run on the vector routine. Pointer validity is caller's
  204|  62.6k|        // responsibility.
  205|  62.6k|        //
  206|  62.6k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  62.6k|        // means we'd have to annotate this routine with `target_feature`.
  208|  62.6k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  62.6k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  62.6k|        // The real problem is that a routine with a `target_feature`
  211|  62.6k|        // annotation generally can't be inlined into caller code unless
  212|  62.6k|        // the caller code has the same target feature annotations. Namely,
  213|  62.6k|        // the common case (at time of writing) is for calling code to not
  214|  62.6k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  62.6k|        // `target_feature` on this routine, it can be inlined which will
  216|  62.6k|        // handle some of the short-haystack cases above without touching the
  217|  62.6k|        // architecture specific code.
  218|  62.6k|        self.find_raw_avx2(start, end)
  219|   100k|    }
_RNCNvMNtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|  99.2k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|  99.2k|                    b == self.sse2.needle1()
  194|  99.2k|                })
_RNvMNtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  13.2k|    unsafe fn find_raw_sse2(
  337|  13.2k|        &self,
  338|  13.2k|        start: *const u8,
  339|  13.2k|        end: *const u8,
  340|  13.2k|    ) -> Option<*const u8> {
  341|  13.2k|        self.sse2.find_raw(start, end)
  342|  13.2k|    }
_RNvMNtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  62.6k|    unsafe fn find_raw_avx2(
  397|  62.6k|        &self,
  398|  62.6k|        start: *const u8,
  399|  62.6k|        end: *const u8,
  400|  62.6k|    ) -> Option<*const u8> {
  401|  62.6k|        self.avx2.find_raw(start, end)
  402|  62.6k|    }
_RNvMs2_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  36.8M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  36.8M|        Two {
  558|  36.8M|            sse2: generic::Two::new(needle1, needle2),
  559|  36.8M|            avx2: generic::Two::new(needle1, needle2),
  560|  36.8M|        }
  561|  36.8M|    }
_RNvMs2_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNvMs2_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  36.8M|    pub unsafe fn find_raw(
  655|  36.8M|        &self,
  656|  36.8M|        start: *const u8,
  657|  36.8M|        end: *const u8,
  658|  36.8M|    ) -> Option<*const u8> {
  659|  36.8M|        if start >= end {
  660|  5.93M|            return None;
  661|  30.9M|        }
  662|  30.9M|        let len = end.distance(start);
  663|  30.9M|        if len < __m256i::BYTES {
  664|  27.3M|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  25.9M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  25.9M|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|  1.47M|                self.find_raw_sse2(start, end)
  674|       |            };
  675|  3.55M|        }
  676|  3.55M|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|  3.55M|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|  3.55M|        // enough to run on the vector routine. Pointer validity is caller's
  679|  3.55M|        // responsibility.
  680|  3.55M|        //
  681|  3.55M|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|  3.55M|        // means we'd have to annotate this routine with `target_feature`.
  683|  3.55M|        // Which is fine, because this routine is `unsafe` anyway and the
  684|  3.55M|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|  3.55M|        // The real problem is that a routine with a `target_feature`
  686|  3.55M|        // annotation generally can't be inlined into caller code unless
  687|  3.55M|        // the caller code has the same target feature annotations. Namely,
  688|  3.55M|        // the common case (at time of writing) is for calling code to not
  689|  3.55M|        // have the `avx2` target feature enabled *at compile time*. Without
  690|  3.55M|        // `target_feature` on this routine, it can be inlined which will
  691|  3.55M|        // handle some of the short-haystack cases above without touching the
  692|  3.55M|        // architecture specific code.
  693|  3.55M|        self.find_raw_avx2(start, end)
  694|  36.8M|    }
_RNCNvMs2_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  72.1M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  72.1M|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  72.1M|                })
_RNvMs2_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|  1.47M|    unsafe fn find_raw_sse2(
  765|  1.47M|        &self,
  766|  1.47M|        start: *const u8,
  767|  1.47M|        end: *const u8,
  768|  1.47M|    ) -> Option<*const u8> {
  769|  1.47M|        self.sse2.find_raw(start, end)
  770|  1.47M|    }
_RNvMs2_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|  3.55M|    unsafe fn find_raw_avx2(
  805|  3.55M|        &self,
  806|  3.55M|        start: *const u8,
  807|  3.55M|        end: *const u8,
  808|  3.55M|    ) -> Option<*const u8> {
  809|  3.55M|        self.avx2.find_raw(start, end)
  810|  3.55M|    }

_RNvNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  36.8M|pub(crate) fn memchr2_raw(
  221|  36.8M|    n1: u8,
  222|  36.8M|    n2: u8,
  223|  36.8M|    start: *const u8,
  224|  36.8M|    end: *const u8,
  225|  36.8M|) -> Option<*const u8> {
  226|  36.8M|    // SAFETY: We provide a valid function pointer type.
  227|  36.8M|    unsafe_ifunc!(
  228|  36.8M|        Two,
  229|  36.8M|        find_raw,
  230|  36.8M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  36.8M|        Option<*const u8>,
  232|  36.8M|        start,
  233|  36.8M|        end,
  234|  36.8M|        n1,
  235|  36.8M|        n2
  236|  36.8M|    )
  237|  36.8M|}
_RNvNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_646memchr10memchr_raw:
  174|   100k|pub(crate) fn memchr_raw(
  175|   100k|    n1: u8,
  176|   100k|    start: *const u8,
  177|   100k|    end: *const u8,
  178|   100k|) -> Option<*const u8> {
  179|   100k|    // SAFETY: We provide a valid function pointer type.
  180|   100k|    unsafe_ifunc!(
  181|   100k|        One,
  182|   100k|        find_raw,
  183|   100k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|   100k|        Option<*const u8>,
  185|   100k|        start,
  186|   100k|        end,
  187|   100k|        n1
  188|   100k|    )
  189|   100k|}
_RNvNvNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|   100k|        unsafe fn find_avx2(
   79|   100k|            $($needle: u8),+,
   80|   100k|            $hay_start: *const u8,
   81|   100k|            $hay_end: *const u8,
   82|   100k|        ) -> $retty {
   83|       |            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|   100k|            $memchrty::new_unchecked($($needle),+)
   85|   100k|                .$memchrfind($hay_start, $hay_end)
   86|   100k|        }
_RNvNvNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  36.8M|        unsafe fn find_avx2(
   79|  36.8M|            $($needle: u8),+,
   80|  36.8M|            $hay_start: *const u8,
   81|  36.8M|            $hay_end: *const u8,
   82|  36.8M|        ) -> $retty {
   83|       |            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  36.8M|            $memchrty::new_unchecked($($needle),+)
   85|  36.8M|                .$memchrfind($hay_start, $hay_end)
   86|  36.8M|        }
_RNvNvNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }

_RNvXNtCsgAmdbuUjTpV_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  42.5M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  42.5M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  42.5M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  42.5M|    }
_RNvXNtCsgAmdbuUjTpV_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|  1.43M|    fn as_usize(self) -> usize {
   27|  1.43M|        self as usize
   28|  1.43M|    }

_RNCNvNtCsgAmdbuUjTpV_6memchr6memchr7memchr20Cs8X3sjsXBtJI_5oxttl:
   96|  9.82M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|  9.82M|            memchr2_raw(needle1, needle2, start, end)
   98|  9.82M|        })
_RNCNvXs3_NtCsgAmdbuUjTpV_6memchr6memchrNtB7_7Memchr2NtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next0Cs8X3sjsXBtJI_5oxttl:
  395|  27.0M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNvMs2_NtCsgAmdbuUjTpV_6memchr6memchrNtB5_7Memchr23newCs8X3sjsXBtJI_5oxttl:
  377|  26.8M|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  26.8M|        Memchr2 {
  379|  26.8M|            needle1,
  380|  26.8M|            needle2,
  381|  26.8M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  26.8M|        }
  383|  26.8M|    }
_RNvNtCsgAmdbuUjTpV_6memchr6memchr11memchr2_rawCs8X3sjsXBtJI_5oxttl:
  574|  36.8M|unsafe fn memchr2_raw(
  575|  36.8M|    needle1: u8,
  576|  36.8M|    needle2: u8,
  577|  36.8M|    start: *const u8,
  578|  36.8M|    end: *const u8,
  579|  36.8M|) -> Option<*const u8> {
  580|  36.8M|    #[cfg(target_arch = "x86_64")]
  581|  36.8M|    {
  582|  36.8M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  36.8M|    }
  584|  36.8M|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  585|  36.8M|    {
  586|  36.8M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  36.8M|    }
  588|  36.8M|    #[cfg(target_arch = "aarch64")]
  589|  36.8M|    {
  590|  36.8M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  36.8M|    }
  592|  36.8M|    #[cfg(not(any(
  593|  36.8M|        target_arch = "x86_64",
  594|  36.8M|        all(target_arch = "wasm32", target_feature = "simd128"),
  595|  36.8M|        target_arch = "aarch64"
  596|  36.8M|    )))]
  597|  36.8M|    {
  598|  36.8M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  36.8M|            .find_raw(start, end)
  600|  36.8M|    }
  601|  36.8M|}
_RNvNtCsgAmdbuUjTpV_6memchr6memchr12memchr2_iterCs8X3sjsXBtJI_5oxttl:
  232|  26.8M|pub fn memchr2_iter<'h>(
  233|  26.8M|    needle1: u8,
  234|  26.8M|    needle2: u8,
  235|  26.8M|    haystack: &'h [u8],
  236|  26.8M|) -> Memchr2<'h> {
  237|  26.8M|    Memchr2::new(needle1, needle2, haystack)
  238|  26.8M|}
_RNvNtCsgAmdbuUjTpV_6memchr6memchr6memchrCs8X3sjsXBtJI_5oxttl:
   27|   100k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|   100k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|   100k|    // pointer between start and end.
   30|   100k|    unsafe {
   31|   100k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|   100k|        })
   34|   100k|    }
   35|   100k|}
_RNvNtCsgAmdbuUjTpV_6memchr6memchr7memchr2Cs8X3sjsXBtJI_5oxttl:
   92|  9.82M|pub fn memchr2(needle1: u8, needle2: u8, haystack: &[u8]) -> Option<usize> {
   93|  9.82M|    // SAFETY: memchr2_raw, when a match is found, always returns a valid
   94|  9.82M|    // pointer between start and end.
   95|  9.82M|    unsafe {
   96|  9.82M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|       |            memchr2_raw(needle1, needle2, start, end)
   98|  9.82M|        })
   99|  9.82M|    }
  100|  9.82M|}
_RNvXs3_NtCsgAmdbuUjTpV_6memchr6memchrNtB5_7Memchr2NtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4nextCs8X3sjsXBtJI_5oxttl:
  390|  27.0M|    fn next(&mut self) -> Option<usize> {
  391|  27.0M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  27.0M|        // pointers returns will fall within the start and end bounds, and this
  393|  27.0M|        // upholds the safety contract of `self.it.next`.
  394|  27.0M|        unsafe {
  395|  27.0M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  27.0M|        }
  397|  27.0M|    }
_RNCNvNtCsgAmdbuUjTpV_6memchr6memchr6memchr0B5_:
   31|   100k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|   100k|            memchr_raw(needle, start, end)
   33|   100k|        })
_RNvNtCsgAmdbuUjTpV_6memchr6memchr10memchr_rawB3_:
  504|   100k|unsafe fn memchr_raw(
  505|   100k|    needle: u8,
  506|   100k|    start: *const u8,
  507|   100k|    end: *const u8,
  508|   100k|) -> Option<*const u8> {
  509|   100k|    #[cfg(target_arch = "x86_64")]
  510|   100k|    {
  511|   100k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|   100k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|   100k|        // time. This function also handles using a fallback if neither AVX2
  514|   100k|        // nor SSE2 (unusual) are available.
  515|   100k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|   100k|    }
  517|   100k|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  518|   100k|    {
  519|   100k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|   100k|    }
  521|   100k|    #[cfg(target_arch = "aarch64")]
  522|   100k|    {
  523|   100k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|   100k|    }
  525|   100k|    #[cfg(not(any(
  526|   100k|        target_arch = "x86_64",
  527|   100k|        all(target_arch = "wasm32", target_feature = "simd128"),
  528|   100k|        target_arch = "aarch64"
  529|   100k|    )))]
  530|   100k|    {
  531|   100k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|   100k|    }
  533|   100k|}

_RNvYNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtNtCsgAmdbuUjTpV_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   63|   657k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   64|   657k|        self.movemask().has_non_zero()
   65|   657k|    }
_RNvMNtCsgAmdbuUjTpV_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  126|  3.85M|    fn get_for_offset(self) -> u32 {
  127|  3.85M|        #[cfg(target_endian = "big")]
  128|  3.85M|        {
  129|  3.85M|            self.0.swap_bytes()
  130|  3.85M|        }
  131|  3.85M|        #[cfg(target_endian = "little")]
  132|  3.85M|        {
  133|  3.85M|            self.0
  134|  3.85M|        }
  135|  3.85M|    }
_RNvXs_NtCsgAmdbuUjTpV_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  146|  7.58M|    fn has_non_zero(self) -> bool {
  147|  7.58M|        self.0 != 0
  148|  7.58M|    }
_RNvXs_NtCsgAmdbuUjTpV_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  171|  3.85M|    fn first_offset(self) -> usize {
  172|  3.85M|        // We are dealing with little endian here (and if we aren't, we swap
  173|  3.85M|        // the bytes so we are in practice), where the most significant byte
  174|  3.85M|        // is at a higher address. That means the least significant bit that
  175|  3.85M|        // is set corresponds to the position of our first matching byte.
  176|  3.85M|        // That position corresponds to the number of zeros after the least
  177|  3.85M|        // significant bit.
  178|  3.85M|        self.get_for_offset().trailing_zeros() as usize
  179|  3.85M|    }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86sse2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  222|  3.87M|        unsafe fn movemask(self) -> SensibleMoveMask {
  223|  3.87M|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  224|  3.87M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86avx2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  271|  11.3M|        unsafe fn movemask(self) -> SensibleMoveMask {
  272|  11.3M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  273|  11.3M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86sse2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  217|  2.55M|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  218|  2.55M|            _mm_loadu_si128(data as *const __m128i)
  219|  2.55M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86sse2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  227|  5.09M|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  228|  5.09M|            _mm_cmpeq_epi8(self, vector2)
  229|  5.09M|        }
_RNvXs_NtCsgAmdbuUjTpV_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  161|  3.83M|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  162|  3.83M|        SensibleMoveMask(self.0 | other.0)
  163|  3.83M|    }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86sse2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  207|  73.8M|        unsafe fn splat(byte: u8) -> __m128i {
  208|  73.8M|            _mm_set1_epi8(byte as i8)
  209|  73.8M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86sse2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iNtB4_6Vector2or:
  237|  2.53M|        unsafe fn or(self, vector2: Self) -> __m128i {
  238|  2.53M|            _mm_or_si128(self, vector2)
  239|  2.53M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86avx2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  266|  4.29M|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  267|  4.29M|            _mm256_loadu_si256(data as *const __m256i)
  268|  4.29M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86avx2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  276|  11.0M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  277|  11.0M|            _mm256_cmpeq_epi8(self, vector2)
  278|  11.0M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86avx2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  256|  73.8M|        unsafe fn splat(byte: u8) -> __m256i {
  257|  73.8M|            _mm256_set1_epi8(byte as i8)
  258|  73.8M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86avx2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  261|  1.42M|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  262|  1.42M|            _mm256_load_si256(data as *const __m256i)
  263|  1.42M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86avx2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtB4_6Vector2or:
  286|  6.14M|        unsafe fn or(self, vector2: Self) -> __m256i {
  287|  6.14M|            _mm256_or_si256(self, vector2)
  288|  6.14M|        }

_RNvMs2_NtCsaMS60HLPCvw_9once_cell3impINtB5_8OnceCellNtNtCs8f6x4lOZV33_5alloc6string6StringE14is_initializedCs7X8AIZF1ltS_13libfuzzer_sys:
   49|  52.0k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  52.0k|        // An `Acquire` load is enough because that makes all the initialization
   51|  52.0k|        // operations visible to us, and, this being a fast path, weaker
   52|  52.0k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  52.0k|        // `SeqCst` operations on the slow path.
   54|  52.0k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  52.0k|    }

_RNvMs4_NtCsaMS60HLPCvw_9once_cell4syncINtB5_8OnceCellNtNtCs8f6x4lOZV33_5alloc6string6StringE3getCs7X8AIZF1ltS_13libfuzzer_sys:
  963|  52.0k|        pub fn get(&self) -> Option<&T> {
  964|  52.0k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  52.0k|                None
  969|       |            }
  970|  52.0k|        }

_RNvMCsl9ThLYvim7w_10oxilangtagINtB2_11LanguageTagReE10into_innerCs8X3sjsXBtJI_5oxttl:
   62|   419k|    pub fn into_inner(self) -> T {
   63|   419k|        self.tag
   64|   419k|    }
_RNvMCsl9ThLYvim7w_10oxilangtagINtB2_11LanguageTagReE5parseCs8X3sjsXBtJI_5oxttl:
   49|   529k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   50|   529k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   51|   419k|        Ok(Self { tag, positions })
   52|   529k|    }
_RNvCsl9ThLYvim7w_10oxilangtag10is_numericCs4x4bMiUCp0I_5oxrdf:
  876|  5.96k|fn is_numeric(s: &str) -> bool {
  877|  5.96k|    s.chars().all(|x| x.is_ascii_digit())
  878|  5.96k|}
_RNvCsl9ThLYvim7w_10oxilangtag12to_lowercaseCs4x4bMiUCp0I_5oxrdf:
  903|   471k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  904|   471k|    s.chars().map(|c| c.to_ascii_lowercase())
  905|   471k|}
_RNvCsl9ThLYvim7w_10oxilangtag12to_uppercaseCs4x4bMiUCp0I_5oxrdf:
  891|  39.6k|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  892|  39.6k|    s.chars().map(|c| c.to_ascii_uppercase())
  893|  39.6k|}
_RNvCsl9ThLYvim7w_10oxilangtag13is_alphabeticCs4x4bMiUCp0I_5oxrdf:
  871|   501k|fn is_alphabetic(s: &str) -> bool {
  872|   501k|    s.chars().all(|x| x.is_ascii_alphabetic())
  873|   501k|}
_RNvCsl9ThLYvim7w_10oxilangtag15is_alphanumericCs4x4bMiUCp0I_5oxrdf:
  881|   119k|fn is_alphanumeric(s: &str) -> bool {
  882|   119k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  883|   119k|}
_RNvCsl9ThLYvim7w_10oxilangtag18to_uppercase_firstCs4x4bMiUCp0I_5oxrdf:
  897|  23.2k|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  898|  23.2k|    let mut chars = s.chars();
  899|  23.2k|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  900|  23.2k|}
_RNvCsl9ThLYvim7w_10oxilangtag23is_alphanumeric_or_dashCs4x4bMiUCp0I_5oxrdf:
  886|  85.2k|fn is_alphanumeric_or_dash(s: &str) -> bool {
  887|  85.2k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  888|  85.2k|}
_RNvMsv_Csl9ThLYvim7w_10oxilangtagNtB5_14SubTagIterator3newCs4x4bMiUCp0I_5oxrdf:
  850|   452k|    fn new(input: &'a str) -> Self {
  851|   452k|        Self {
  852|   452k|            split: input.split('-'),
  853|   452k|            position: 0,
  854|   452k|        }
  855|   452k|    }
_RNvXsq_Csl9ThLYvim7w_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCs4x4bMiUCp0I_5oxrdf:
  563|   280k|    fn push(&mut self, _: char) {}
_RNvXsw_Csl9ThLYvim7w_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4nextCs4x4bMiUCp0I_5oxrdf:
  862|  1.06M|    fn next(&mut self) -> Option<(&'a str, usize)> {
  863|  1.06M|        let tag = self.split.next()?;
  864|   674k|        let tag_end = self.position + tag.len();
  865|   674k|        self.position = tag_end + 1;
  866|   674k|        Some((tag, tag_end))
  867|  1.06M|    }
_RINvCsl9ThLYvim7w_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECs4x4bMiUCp0I_5oxrdf:
  632|   452k|fn parse_langtag(
  633|   452k|    input: &str,
  634|   452k|    output: &mut impl OutputBuffer,
  635|   452k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  636|       |    #[derive(PartialEq, Eq)]
  637|       |    enum State {
  638|       |        Start,
  639|       |        AfterLanguage,
  640|       |        AfterExtLang,
  641|       |        AfterScript,
  642|       |        AfterRegion,
  643|       |        InExtension { expected: bool },
  644|       |        InPrivateUse { expected: bool },
  645|       |    }
  646|       |
  647|   452k|    let mut state = State::Start;
  648|   452k|    let mut language_end = 0;
  649|   452k|    let mut extlang_end = 0;
  650|   452k|    let mut script_end = 0;
  651|   452k|    let mut region_end = 0;
  652|   452k|    let mut variant_end = 0;
  653|   452k|    let mut extension_end = 0;
  654|   452k|    let mut extlangs_count = 0;
  655|   674k|    for (subtag, end) in SubTagIterator::new(input) {
  656|   674k|        if subtag.is_empty() {
  657|     34|            return Err(LanguageTagParseError {
  658|     34|                kind: TagParseErrorKind::EmptySubtag,
  659|     34|            });
  660|   674k|        }
  661|   674k|        if subtag.len() > 8 {
  662|  6.06k|            return Err(LanguageTagParseError {
  663|  6.06k|                kind: TagParseErrorKind::SubtagTooLong,
  664|  6.06k|            });
  665|   668k|        }
  666|   668k|        if state == State::Start {
  667|       |            // Primary language
  668|   446k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  669|  45.2k|                return Err(LanguageTagParseError {
  670|  45.2k|                    kind: TagParseErrorKind::InvalidLanguage,
  671|  45.2k|                });
  672|   401k|            }
  673|   401k|            language_end = end;
  674|   401k|            output.extend(to_lowercase(subtag));
  675|   401k|            if subtag.len() < 4 {
  676|   348k|                // extlangs are only allowed for short language tags
  677|   348k|                state = State::AfterLanguage;
  678|   348k|            } else {
  679|  52.8k|                state = State::AfterExtLang;
  680|  52.8k|            }
  681|   221k|        } else if let State::InPrivateUse { .. } = state {
  682|  9.86k|            if !is_alphanumeric(subtag) {
  683|      0|                return Err(LanguageTagParseError {
  684|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  685|      0|                });
  686|  9.86k|            }
  687|  9.86k|            output.push('-');
  688|  9.86k|            output.extend(to_lowercase(subtag));
  689|  9.86k|            state = State::InPrivateUse { expected: false };
  690|   211k|        } else if subtag == "x" || subtag == "X" {
  691|       |            // We make sure extension is found
  692|  15.3k|            if let State::InExtension { expected: true } = state {
  693|  2.51k|                return Err(LanguageTagParseError {
  694|  2.51k|                    kind: TagParseErrorKind::EmptyExtension,
  695|  2.51k|                });
  696|  12.8k|            }
  697|  12.8k|            output.push('-');
  698|  12.8k|            output.push('x');
  699|  12.8k|            state = State::InPrivateUse { expected: true };
  700|   196k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  701|       |            // We make sure extension is found
  702|  63.1k|            if let State::InExtension { expected: true } = state {
  703|  2.22k|                return Err(LanguageTagParseError {
  704|  2.22k|                    kind: TagParseErrorKind::EmptyExtension,
  705|  2.22k|                });
  706|  60.9k|            }
  707|  60.9k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  708|  60.9k|            output.push('-');
  709|  60.9k|            output.push(extension_tag);
  710|  60.9k|            state = State::InExtension { expected: true };
  711|   133k|        } else if let State::InExtension { .. } = state {
  712|  25.3k|            if !is_alphanumeric(subtag) {
  713|      0|                return Err(LanguageTagParseError {
  714|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  715|      0|                });
  716|  25.3k|            }
  717|  25.3k|            extension_end = end;
  718|  25.3k|            output.push('-');
  719|  25.3k|            output.extend(to_lowercase(subtag));
  720|  25.3k|            state = State::InExtension { expected: false };
  721|   107k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  722|  24.2k|            extlangs_count += 1;
  723|  24.2k|            if extlangs_count > 3 {
  724|  2.32k|                return Err(LanguageTagParseError {
  725|  2.32k|                    kind: TagParseErrorKind::TooManyExtlangs,
  726|  2.32k|                });
  727|  21.9k|            }
  728|  21.9k|            // valid extlangs
  729|  21.9k|            extlang_end = end;
  730|  21.9k|            output.push('-');
  731|  21.9k|            output.extend(to_lowercase(subtag));
  732|  83.6k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  733|  60.8k|            && subtag.len() == 4
  734|  23.2k|            && is_alphabetic(subtag)
  735|  23.2k|        {
  736|  23.2k|            // Script
  737|  23.2k|            script_end = end;
  738|  23.2k|            output.push('-');
  739|  23.2k|            output.extend(to_uppercase_first(subtag));
  740|  23.2k|            state = State::AfterScript;
  741|  60.4k|        } else if (state == State::AfterLanguage
  742|  34.8k|            || state == State::AfterExtLang
  743|  22.7k|            || state == State::AfterScript)
  744|  49.4k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  745|  9.79k|                || subtag.len() == 3 && is_numeric(subtag))
  746|  39.6k|        {
  747|  39.6k|            // Region
  748|  39.6k|            region_end = end;
  749|  39.6k|            output.push('-');
  750|  39.6k|            output.extend(to_uppercase(subtag));
  751|  39.6k|            state = State::AfterRegion;
  752|  39.6k|        } else if (state == State::AfterLanguage
  753|  15.4k|            || state == State::AfterExtLang
  754|  11.2k|            || state == State::AfterScript
  755|  10.9k|            || state == State::AfterRegion)
  756|  20.7k|            && is_alphanumeric(subtag)
  757|  20.7k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  758|  7.82k|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  759|  12.9k|        {
  760|  12.9k|            // Variant
  761|  12.9k|            variant_end = end;
  762|  12.9k|            output.push('-');
  763|  12.9k|            output.extend(to_lowercase(subtag));
  764|  12.9k|            state = State::AfterRegion;
  765|  12.9k|        } else {
  766|  7.82k|            return Err(LanguageTagParseError {
  767|  7.82k|                kind: TagParseErrorKind::InvalidSubtag,
  768|  7.82k|            });
  769|       |        }
  770|       |    }
  771|       |
  772|       |    //We make sure we are in a correct final state
  773|   386k|    if let State::InExtension { expected: true } = state {
  774|  36.0k|        return Err(LanguageTagParseError {
  775|  36.0k|            kind: TagParseErrorKind::EmptyExtension,
  776|  36.0k|        });
  777|   350k|    }
  778|   350k|    if let State::InPrivateUse { expected: true } = state {
  779|  8.06k|        return Err(LanguageTagParseError {
  780|  8.06k|            kind: TagParseErrorKind::EmptyPrivateUse,
  781|  8.06k|        });
  782|   342k|    }
  783|   342k|
  784|   342k|    //We make sure we have not skipped anyone
  785|   342k|    if extlang_end < language_end {
  786|   329k|        extlang_end = language_end;
  787|   329k|    }
  788|   342k|    if script_end < extlang_end {
  789|   319k|        script_end = extlang_end;
  790|   319k|    }
  791|   342k|    if region_end < script_end {
  792|   314k|        region_end = script_end;
  793|   314k|    }
  794|   342k|    if variant_end < region_end {
  795|   332k|        variant_end = region_end;
  796|   332k|    }
  797|   342k|    if extension_end < variant_end {
  798|   330k|        extension_end = variant_end;
  799|   330k|    }
  800|       |
  801|   342k|    Ok(TagElementsPositions {
  802|   342k|        language_end,
  803|   342k|        extlang_end,
  804|   342k|        script_end,
  805|   342k|        region_end,
  806|   342k|        variant_end,
  807|   342k|        extension_end,
  808|   342k|    })
  809|   452k|}
_RINvCsl9ThLYvim7w_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECs4x4bMiUCp0I_5oxrdf:
  587|   537k|fn parse_language_tag(
  588|   537k|    input: &str,
  589|   537k|    output: &mut impl OutputBuffer,
  590|   537k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  591|       |    //grandfathered tags
  592|   537k|    if let Some(tag) = GRANDFATHEREDS
  593|   537k|        .iter()
  594|   537k|        .find(|record| record.eq_ignore_ascii_case(input))
  595|       |    {
  596|      0|        output.push_str(tag);
  597|      0|        Ok(TagElementsPositions {
  598|      0|            language_end: tag.len(),
  599|      0|            extlang_end: tag.len(),
  600|      0|            script_end: tag.len(),
  601|      0|            region_end: tag.len(),
  602|      0|            variant_end: tag.len(),
  603|      0|            extension_end: tag.len(),
  604|      0|        })
  605|   537k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  606|       |        // private use
  607|  85.2k|        if !is_alphanumeric_or_dash(input) {
  608|      0|            Err(LanguageTagParseError {
  609|      0|                kind: TagParseErrorKind::ForbiddenChar,
  610|      0|            })
  611|  85.2k|        } else if input.len() == 2 {
  612|      7|            Err(LanguageTagParseError {
  613|      7|                kind: TagParseErrorKind::EmptyPrivateUse,
  614|      7|            })
  615|       |        } else {
  616|  85.2k|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  617|  85.2k|            Ok(TagElementsPositions {
  618|  85.2k|                language_end: input.len(),
  619|  85.2k|                extlang_end: input.len(),
  620|  85.2k|                script_end: input.len(),
  621|  85.2k|                region_end: input.len(),
  622|  85.2k|                variant_end: input.len(),
  623|  85.2k|                extension_end: input.len(),
  624|  85.2k|            })
  625|       |        }
  626|       |    } else {
  627|   452k|        parse_langtag(input, output)
  628|       |    }
  629|   537k|}
_RINvXsr_Csl9ThLYvim7w_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECs4x4bMiUCp0I_5oxrdf:
  571|  85.2k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Csl9ThLYvim7w_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECs4x4bMiUCp0I_5oxrdf:
  571|   471k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Csl9ThLYvim7w_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECs4x4bMiUCp0I_5oxrdf:
  571|  39.6k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Csl9ThLYvim7w_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECs4x4bMiUCp0I_5oxrdf:
  571|  23.2k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCsl9ThLYvim7w_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0Cs4x4bMiUCp0I_5oxrdf:
  594|  13.9M|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvMCsl9ThLYvim7w_10oxilangtagINtB2_11LanguageTagNtNtCs8f6x4lOZV33_5alloc6string6StringE10into_innerCs4x4bMiUCp0I_5oxrdf:
   62|  7.73k|    pub fn into_inner(self) -> T {
   63|  7.73k|        self.tag
   64|  7.73k|    }
_RNvMCsl9ThLYvim7w_10oxilangtagINtB2_11LanguageTagNtNtCs8f6x4lOZV33_5alloc6string6StringE5parseCs4x4bMiUCp0I_5oxrdf:
   49|  8.02k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   50|  8.02k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   51|  7.73k|        Ok(Self { tag, positions })
   52|  8.02k|    }
_RNvXso_Csl9ThLYvim7w_10oxilangtagNtB5_21LanguageTagParseErrorNtNtCshZc3FwCJ069_4core3fmt7Display3fmt:
  490|   110k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  491|   110k|        match self.kind {
  492|       |            TagParseErrorKind::EmptyExtension => {
  493|  40.7k|                write!(f, "If an extension subtag is present, it must not be empty")
  494|       |            }
  495|       |            TagParseErrorKind::EmptyPrivateUse => {
  496|  8.07k|                write!(f, "If the `x` subtag is present, it must not be empty")
  497|       |            }
  498|       |            TagParseErrorKind::ForbiddenChar => {
  499|      0|                write!(f, "The langtag contains a char not allowed")
  500|       |            }
  501|  7.82k|            TagParseErrorKind::InvalidSubtag => write!(
  502|  7.82k|                f,
  503|  7.82k|                "A subtag fails to parse, it does not match any other subtags"
  504|  7.82k|            ),
  505|  45.2k|            TagParseErrorKind::InvalidLanguage => write!(f, "The given language subtag is invalid"),
  506|       |            TagParseErrorKind::SubtagTooLong => {
  507|  6.06k|                write!(f, "A subtag may be eight characters in length at maximum")
  508|       |            }
  509|     34|            TagParseErrorKind::EmptySubtag => write!(f, "A subtag should not be empty"),
  510|       |            TagParseErrorKind::TooManyExtlangs => {
  511|  2.32k|                write!(f, "At maximum three extlangs are allowed")
  512|       |            }
  513|       |        }
  514|   110k|    }
_RNCNvCsl9ThLYvim7w_10oxilangtag13is_alphabetic0B3_:
  872|  1.25M|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCsl9ThLYvim7w_10oxilangtag10is_numeric0B3_:
  877|  5.96k|    s.chars().all(|x| x.is_ascii_digit())
_RNCNvCsl9ThLYvim7w_10oxilangtag15is_alphanumeric0B3_:
  882|   268k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNCNvCsl9ThLYvim7w_10oxilangtag23is_alphanumeric_or_dash0B3_:
  887|  2.09M|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')

_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECs4x4bMiUCp0I_5oxrdf:
 1739|   475k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1740|   475k|        Err(IriParseError { kind })
 1741|   475k|    }
_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_10parse_path0ECs4x4bMiUCp0I_5oxrdf:
 1705|  2.05M|    fn read_url_codepoint_or_echar(
 1706|  2.05M|        &mut self,
 1707|  2.05M|        c: char,
 1708|  2.05M|        valid: impl Fn(char) -> bool,
 1709|  2.05M|    ) -> Result<(), IriParseError> {
 1710|  2.05M|        if UNCHECKED || valid(c) {
 1711|  1.95M|            self.output.push(c);
 1712|  1.95M|            Ok(())
 1713|  93.7k|        } else if c == '%' {
 1714|  13.7k|            self.read_echar()
 1715|       |        } else {
 1716|  80.0k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1717|       |        }
 1718|  2.05M|    }
_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_11parse_query0ECs4x4bMiUCp0I_5oxrdf:
 1705|   372k|    fn read_url_codepoint_or_echar(
 1706|   372k|        &mut self,
 1707|   372k|        c: char,
 1708|   372k|        valid: impl Fn(char) -> bool,
 1709|   372k|    ) -> Result<(), IriParseError> {
 1710|   372k|        if UNCHECKED || valid(c) {
 1711|   331k|            self.output.push(c);
 1712|   331k|            Ok(())
 1713|  41.4k|        } else if c == '%' {
 1714|  15.1k|            self.read_echar()
 1715|       |        } else {
 1716|  26.2k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1717|       |        }
 1718|   372k|    }
_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_14parse_fragment0ECs4x4bMiUCp0I_5oxrdf:
 1705|   314k|    fn read_url_codepoint_or_echar(
 1706|   314k|        &mut self,
 1707|   314k|        c: char,
 1708|   314k|        valid: impl Fn(char) -> bool,
 1709|   314k|    ) -> Result<(), IriParseError> {
 1710|   314k|        if UNCHECKED || valid(c) {
 1711|   281k|            self.output.push(c);
 1712|   281k|            Ok(())
 1713|  32.8k|        } else if c == '%' {
 1714|  14.7k|            self.read_echar()
 1715|       |        } else {
 1716|  18.1k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1717|       |        }
 1718|   314k|    }
_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_15parse_authority0ECs4x4bMiUCp0I_5oxrdf:
 1705|   470k|    fn read_url_codepoint_or_echar(
 1706|   470k|        &mut self,
 1707|   470k|        c: char,
 1708|   470k|        valid: impl Fn(char) -> bool,
 1709|   470k|    ) -> Result<(), IriParseError> {
 1710|   470k|        if UNCHECKED || valid(c) {
 1711|   446k|            self.output.push(c);
 1712|   446k|            Ok(())
 1713|  23.7k|        } else if c == '%' {
 1714|  14.0k|            self.read_echar()
 1715|       |        } else {
 1716|  9.68k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1717|       |        }
 1718|   470k|    }
_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_19parse_relative_path0ECs4x4bMiUCp0I_5oxrdf:
 1705|   865k|    fn read_url_codepoint_or_echar(
 1706|   865k|        &mut self,
 1707|   865k|        c: char,
 1708|   865k|        valid: impl Fn(char) -> bool,
 1709|   865k|    ) -> Result<(), IriParseError> {
 1710|   865k|        if UNCHECKED || valid(c) {
 1711|   737k|            self.output.push(c);
 1712|   737k|            Ok(())
 1713|   127k|        } else if c == '%' {
 1714|  32.8k|            self.read_echar()
 1715|       |        } else {
 1716|  94.8k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1717|       |        }
 1718|   865k|    }
_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNvB7_28is_iunreserved_or_sub_delimsECs4x4bMiUCp0I_5oxrdf:
 1705|   349k|    fn read_url_codepoint_or_echar(
 1706|   349k|        &mut self,
 1707|   349k|        c: char,
 1708|   349k|        valid: impl Fn(char) -> bool,
 1709|   349k|    ) -> Result<(), IriParseError> {
 1710|   349k|        if UNCHECKED || valid(c) {
 1711|   332k|            self.output.push(c);
 1712|   332k|            Ok(())
 1713|  16.7k|        } else if c == '%' {
 1714|  9.53k|            self.read_echar()
 1715|       |        } else {
 1716|  7.17k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1717|       |        }
 1718|   349k|    }
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10parse_path0Cs4x4bMiUCp0I_5oxrdf:
 1665|  2.05M|                Some(c) => self.read_url_codepoint_or_echar(c, |c| {
 1666|  2.05M|                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1667|  2.05M|                })?,
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0Cs4x4bMiUCp0I_5oxrdf:
 1723|  90.9k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0Cs4x4bMiUCp0I_5oxrdf:
 1724|  45.2k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E11parse_query0Cs4x4bMiUCp0I_5oxrdf:
 1679|   372k|                self.read_url_codepoint_or_echar(c, |c| {
 1680|   372k|                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?' | '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1681|   256k|                })?
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E14parse_fragment0Cs4x4bMiUCp0I_5oxrdf:
 1690|   314k|            self.read_url_codepoint_or_echar(c, |c| {
 1691|   314k|                is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?')
 1692|   314k|            })?;
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E15parse_authority0Cs4x4bMiUCp0I_5oxrdf:
 1513|   470k|                    self.read_url_codepoint_or_echar(c, |c| {
 1514|   470k|                        is_iunreserved_or_sub_delims(c) || c == ':'
 1515|   470k|                    })?;
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E19parse_relative_path0Cs4x4bMiUCp0I_5oxrdf:
 1472|   865k|            self.read_url_codepoint_or_echar(c, |c| is_iunreserved_or_sub_delims(c) || c == '@')?;
_RNvMCsikbtAEUxupI_5oxiriINtB2_6IriRefNtNtCs8f6x4lOZV33_5alloc6string6StringE10into_innerCs4x4bMiUCp0I_5oxrdf:
  185|  2.70M|    pub fn into_inner(self) -> T {
  186|  2.70M|        self.iri
  187|  2.70M|    }
_RNvMCsikbtAEUxupI_5oxiriINtB2_6IriRefNtNtCs8f6x4lOZV33_5alloc6string6StringE11is_absoluteCs4x4bMiUCp0I_5oxrdf:
  199|  2.91M|    pub fn is_absolute(&self) -> bool {
  200|  2.91M|        self.positions.scheme_end != 0
  201|  2.91M|    }
_RNvMCsikbtAEUxupI_5oxiriINtB2_6IriRefNtNtCs8f6x4lOZV33_5alloc6string6StringE5parseCs4x4bMiUCp0I_5oxrdf:
   58|  3.38M|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  3.38M|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  2.91M|        Ok(Self { iri, positions })
   61|  3.38M|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCs4x4bMiUCp0I_5oxrdf:
 1521|   337k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1522|   337k|        if self.input.starts_with('[') {
 1523|       |            // IP v6
 1524|   236k|            let start_position = self.input.position;
 1525|  2.00M|            while let Some(c) = self.input.next() {
 1526|  1.97M|                self.output.push(c);
 1527|  1.97M|                if c == ']' {
 1528|   205k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1529|   205k|                    if !UNCHECKED {
 1530|   205k|                        if ip.starts_with('v') || ip.starts_with('V') {
 1531|  79.8k|                            self.validate_ip_v_future(ip)?;
 1532|   125k|                        } else if let Err(error) = Ipv6Addr::from_str(ip) {
 1533|  28.4k|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1534|  96.6k|                        }
 1535|      0|                    }
 1536|       |
 1537|   110k|                    let c = self.input.next();
 1538|   110k|                    return match c {
 1539|       |                        Some(':') => {
 1540|  39.6k|                            self.output.push(':');
 1541|  39.6k|                            self.parse_port()
 1542|       |                        }
 1543|       |                        None | Some('/') | Some('?') | Some('#') => {
 1544|  32.0k|                            self.output_positions.authority_end = self.output.len();
 1545|  32.0k|                            self.parse_path_start(c)
 1546|       |                        }
 1547|  15.5k|                        Some(c) => {
 1548|  15.5k|                            if UNCHECKED {
 1549|      0|                                self.output.push(c);
 1550|      0|                                continue;
 1551|       |                            } else {
 1552|  15.5k|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1553|       |                            }
 1554|       |                        }
 1555|       |                    };
 1556|  1.77M|                }
 1557|       |            }
 1558|  31.5k|            if UNCHECKED {
 1559|       |                // We consider it's valid even if it's not finished
 1560|      0|                self.output_positions.authority_end = self.output.len();
 1561|      0|                self.parse_path_start(None)
 1562|       |            } else {
 1563|  31.5k|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1564|       |            }
 1565|       |        } else {
 1566|       |            // Other host
 1567|       |            loop {
 1568|   439k|                let c = self.input.next();
 1569|   439k|                match c {
 1570|       |                    Some(':') => {
 1571|  31.6k|                        self.output.push(':');
 1572|  31.6k|                        return self.parse_port();
 1573|       |                    }
 1574|       |                    None | Some('/') | Some('?') | Some('#') => {
 1575|  43.1k|                        self.output_positions.authority_end = self.output.len();
 1576|  43.1k|                        return self.parse_path_start(c);
 1577|       |                    }
 1578|   349k|                    Some(c) => self.read_url_codepoint_or_echar(c, is_iunreserved_or_sub_delims)?,
 1579|       |                }
 1580|       |            }
 1581|       |        }
 1582|   298k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCs4x4bMiUCp0I_5oxrdf:
 1634|  2.94M|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1635|       |        loop {
 1636|  4.94M|            let c = self.input.next();
 1637|  4.94M|            match c {
 1638|       |                None | Some('/') | Some('?') | Some('#') => {
 1639|  2.79M|                    if self.output.as_str().ends_with("/..") {
 1640|      0|                        self.remove_last_segment();
 1641|      0|                        self.remove_last_segment();
 1642|      0|                        self.output.push('/');
 1643|  2.79M|                    } else if self.output.as_str().ends_with("/.") {
 1644|      0|                        self.remove_last_segment();
 1645|      0|                        self.output.push('/');
 1646|  2.79M|                    } else if c == Some('/') {
 1647|  41.5k|                        self.output.push('/');
 1648|  2.85M|                    }
 1649|       |
 1650|  2.89M|                    if c == Some('?') {
 1651|  59.5k|                        self.output_positions.path_end = self.output.len();
 1652|  59.5k|                        self.output.push('?');
 1653|  59.5k|                        return self.parse_query();
 1654|  2.83M|                    } else if c == Some('#') {
 1655|  40.9k|                        self.output_positions.path_end = self.output.len();
 1656|  40.9k|                        self.output_positions.query_end = self.output.len();
 1657|  40.9k|                        self.output.push('#');
 1658|  40.9k|                        return self.parse_fragment();
 1659|  2.79M|                    } else if c.is_none() {
 1660|  2.75M|                        self.output_positions.path_end = self.output.len();
 1661|  2.75M|                        self.output_positions.query_end = self.output.len();
 1662|  2.75M|                        return Ok(());
 1663|  41.5k|                    }
 1664|       |                }
 1665|  2.05M|                Some(c) => self.read_url_codepoint_or_echar(c, |c| {
 1666|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1667|  2.05M|                })?,
 1668|       |            }
 1669|       |        }
 1670|  2.94M|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCs4x4bMiUCp0I_5oxrdf:
 1584|  71.2k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1585|       |        loop {
 1586|  84.6k|            let c = self.input.next();
 1587|  84.6k|            match c {
 1588|       |                Some('/') | Some('?') | Some('#') | None => {
 1589|  36.2k|                    self.output_positions.authority_end = self.output.len();
 1590|  36.2k|                    return self.parse_path_start(c);
 1591|       |                }
 1592|  34.6k|                Some(c) => {
 1593|  34.6k|                    if UNCHECKED || c.is_ascii_digit() {
 1594|  13.4k|                        self.output.push(c)
 1595|       |                    } else {
 1596|  21.2k|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1597|       |                    }
 1598|       |                }
 1599|       |            }
 1600|       |        }
 1601|  57.5k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCs4x4bMiUCp0I_5oxrdf:
 1720|   100k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1721|   100k|        let c1 = self.input.next();
 1722|   100k|        let c2 = self.input.next();
 1723|   100k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1724|  45.4k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1725|       |        {
 1726|  38.9k|            self.output.push('%');
 1727|  38.9k|            self.output.push(c1.unwrap());
 1728|  38.9k|            self.output.push(c2.unwrap());
 1729|  38.9k|            Ok(())
 1730|       |        } else {
 1731|  61.0k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1732|  61.0k|                Some('%'),
 1733|  61.0k|                c1,
 1734|  61.0k|                c2,
 1735|  61.0k|            ]))
 1736|       |        }
 1737|   100k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCs4x4bMiUCp0I_5oxrdf:
 1672|  99.3k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1673|   437k|        while let Some(c) = self.input.next() {
 1674|   391k|            if c == '#' {
 1675|  18.8k|                self.output_positions.query_end = self.output.len();
 1676|  18.8k|                self.output.push('#');
 1677|  18.8k|                return self.parse_fragment();
 1678|       |            } else {
 1679|   372k|                self.read_url_codepoint_or_echar(c, |c| {
 1680|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?' | '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1681|   372k|                })?
 1682|       |            }
 1683|       |        }
 1684|  45.8k|        self.output_positions.query_end = self.output.len();
 1685|  45.8k|        Ok(())
 1686|  99.3k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCs4x4bMiUCp0I_5oxrdf:
 1362|  2.98M|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1363|       |        loop {
 1364|  8.31M|            let c = self.input.next();
 1365|  8.28M|            match c {
 1366|  8.28M|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1367|  5.33M|                    self.output.push(c)
 1368|       |                }
 1369|       |                Some(':') => {
 1370|  2.85M|                    self.output.push(':');
 1371|  2.85M|                    self.output_positions.scheme_end = self.output.len();
 1372|  2.85M|                    self.input_scheme_end = self.input.position;
 1373|  2.85M|                    return if self.input.starts_with('/') {
 1374|   160k|                        self.input.next();
 1375|   160k|                        self.output.push('/');
 1376|   160k|                        self.parse_path_or_authority()
 1377|       |                    } else {
 1378|  2.69M|                        self.output_positions.authority_end = self.output.len();
 1379|  2.69M|                        self.parse_path()
 1380|       |                    };
 1381|       |                }
 1382|       |                _ => {
 1383|   130k|                    self.input = ParserInput {
 1384|   130k|                        value: self.iri.chars(),
 1385|   130k|                        position: 0,
 1386|   130k|                    }; // reset
 1387|   130k|                    self.output.clear();
 1388|   130k|                    return self.parse_relative();
 1389|       |                }
 1390|       |            }
 1391|       |        }
 1392|  2.98M|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCs4x4bMiUCp0I_5oxrdf:
 1688|  72.7k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1689|   360k|        while let Some(c) = self.input.next() {
 1690|   314k|            self.read_url_codepoint_or_echar(c, |c| {
 1691|       |                is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?')
 1692|   314k|            })?;
 1693|       |        }
 1694|  46.0k|        Ok(())
 1695|  72.7k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_relativeCs4x4bMiUCp0I_5oxrdf:
 1405|   518k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1406|   518k|        if let Some(base) = self.base {
 1407|      0|            match self.input.front() {
 1408|       |                None => {
 1409|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1410|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1411|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1412|      0|                    self.output_positions.path_end = base.positions.path_end;
 1413|      0|                    self.output_positions.query_end = base.positions.query_end;
 1414|      0|                    Ok(())
 1415|       |                }
 1416|       |                Some('/') => {
 1417|      0|                    self.input.next();
 1418|      0|                    self.parse_relative_slash(&base)
 1419|       |                }
 1420|       |                Some('?') => {
 1421|      0|                    self.input.next();
 1422|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1423|      0|                    self.output.push('?');
 1424|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1425|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1426|      0|                    self.output_positions.path_end = base.positions.path_end;
 1427|      0|                    self.parse_query()
 1428|       |                }
 1429|       |                Some('#') => {
 1430|      0|                    self.input.next();
 1431|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1432|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1433|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1434|      0|                    self.output_positions.path_end = base.positions.path_end;
 1435|      0|                    self.output_positions.query_end = base.positions.query_end;
 1436|      0|                    self.output.push('#');
 1437|      0|                    self.parse_fragment()
 1438|       |                }
 1439|       |                _ => {
 1440|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1441|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1442|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1443|      0|                    self.output_positions.path_end = base.positions.path_end;
 1444|      0|                    self.remove_last_segment();
 1445|      0|                    if self.output.len() > base.positions.scheme_end {
 1446|      0|                        // We have some path or authority, we keep a base '/'
 1447|      0|                        self.output.push('/');
 1448|      0|                    }
 1449|      0|                    self.parse_relative_path()
 1450|       |                }
 1451|       |            }
 1452|       |        } else {
 1453|   518k|            self.output_positions.scheme_end = 0;
 1454|   518k|            self.input_scheme_end = 0;
 1455|   518k|            if self.input.starts_with('/') {
 1456|   228k|                self.input.next();
 1457|   228k|                self.output.push('/');
 1458|   228k|                self.parse_path_or_authority()
 1459|       |            } else {
 1460|   289k|                self.output_positions.authority_end = 0;
 1461|   289k|                self.parse_relative_path()
 1462|       |            }
 1463|       |        }
 1464|   518k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCs4x4bMiUCp0I_5oxrdf:
 1495|   354k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1496|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1497|       |        loop {
 1498|   807k|            let c = self.input.next();
 1499|   807k|            match c {
 1500|       |                Some('@') => {
 1501|  11.1k|                    self.output.push('@');
 1502|  11.1k|                    return self.parse_host();
 1503|       |                }
 1504|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1505|   280k|                    self.input = ParserInput {
 1506|   280k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1507|   280k|                        position: self.input_scheme_end + 2,
 1508|   280k|                    };
 1509|   280k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1510|   280k|                    return self.parse_host();
 1511|       |                }
 1512|   470k|                Some(c) => {
 1513|   470k|                    self.read_url_codepoint_or_echar(c, |c| {
 1514|       |                        is_iunreserved_or_sub_delims(c) || c == ':'
 1515|   470k|                    })?;
 1516|       |                }
 1517|       |            }
 1518|       |        }
 1519|   308k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCs4x4bMiUCp0I_5oxrdf:
 1603|   164k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1604|   164k|        match c {
 1605|       |            None => {
 1606|  64.4k|                self.output_positions.path_end = self.output.len();
 1607|  64.4k|                self.output_positions.query_end = self.output.len();
 1608|  64.4k|                Ok(())
 1609|       |            }
 1610|       |            Some('?') => {
 1611|  39.8k|                self.output_positions.path_end = self.output.len();
 1612|  39.8k|                self.output.push('?');
 1613|  39.8k|                self.parse_query()
 1614|       |            }
 1615|       |            Some('#') => {
 1616|  12.9k|                self.output_positions.path_end = self.output.len();
 1617|  12.9k|                self.output_positions.query_end = self.output.len();
 1618|  12.9k|                self.output.push('#');
 1619|  12.9k|                self.parse_fragment()
 1620|       |            }
 1621|       |            Some('/') => {
 1622|  47.1k|                self.output.push('/');
 1623|  47.1k|                self.parse_path()
 1624|       |            }
 1625|      0|            Some(c) => {
 1626|      0|                self.read_url_codepoint_or_echar(c, |c| {
 1627|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1628|      0|                })?;
 1629|      0|                self.parse_path()
 1630|       |            }
 1631|       |        }
 1632|   164k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCs4x4bMiUCp0I_5oxrdf:
 1348|  3.38M|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1349|  3.38M|        match self.input.front() {
 1350|       |            Some(':') => {
 1351|  14.7k|                if UNCHECKED {
 1352|      0|                    self.parse_scheme()
 1353|       |                } else {
 1354|  14.7k|                    self.parse_error(IriParseErrorKind::NoScheme)
 1355|       |                }
 1356|       |            }
 1357|  3.34M|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1358|   387k|            _ => self.parse_relative(),
 1359|       |        }
 1360|  3.38M|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E19parse_relative_pathCs4x4bMiUCp0I_5oxrdf:
 1466|   289k|    fn parse_relative_path(&mut self) -> Result<(), IriParseError> {
 1467|  1.03M|        while let Some(c) = self.input.front() {
 1468|   939k|            if matches!(c, '/' | '?' | '#') {
 1469|  73.6k|                break;
 1470|   865k|            }
 1471|   865k|            self.input.next();
 1472|   865k|            self.read_url_codepoint_or_echar(c, |c| is_iunreserved_or_sub_delims(c) || c == '@')?;
 1473|       |        }
 1474|   168k|        self.parse_path()
 1475|   289k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E20validate_ip_v_futureCs4x4bMiUCp0I_5oxrdf:
 1744|  79.8k|    fn validate_ip_v_future(&self, ip: &str) -> Result<(), IriParseError> {
 1745|  79.8k|        let mut chars = ip.chars();
 1746|       |
 1747|  79.8k|        let c = chars.next().ok_or(IriParseError {
 1748|  79.8k|            kind: IriParseErrorKind::InvalidHostCharacter(']'),
 1749|  79.8k|        })?;
 1750|  79.8k|        if !matches!(c, 'v' | 'V') {
 1751|      0|            return self.parse_error(IriParseErrorKind::InvalidHostCharacter(c));
 1752|  79.8k|        };
 1753|  79.8k|
 1754|  79.8k|        let mut with_a_version = false;
 1755|   175k|        for c in &mut chars {
 1756|   164k|            if c == '.' {
 1757|  36.6k|                break;
 1758|   127k|            } else if c.is_ascii_hexdigit() {
 1759|  95.7k|                with_a_version = true;
 1760|  95.7k|            } else {
 1761|  32.1k|                return self.parse_error(IriParseErrorKind::InvalidHostCharacter(c));
 1762|       |            }
 1763|       |        }
 1764|  47.7k|        if !with_a_version {
 1765|  14.5k|            return self.parse_error(IriParseErrorKind::InvalidHostCharacter(
 1766|  14.5k|                chars.next().unwrap_or(']'),
 1767|  14.5k|            ));
 1768|  33.1k|        }
 1769|  33.1k|
 1770|  33.1k|        if chars.as_str().is_empty() {
 1771|  9.05k|            return self.parse_error(IriParseErrorKind::InvalidHostCharacter(']'));
 1772|  24.1k|        };
 1773|   472k|        for c in chars {
 1774|   458k|            if !is_unreserved_or_sub_delims(c) && c != ':' {
 1775|  10.3k|                return self.parse_error(IriParseErrorKind::InvalidHostCharacter(c));
 1776|   448k|            }
 1777|       |        }
 1778|       |
 1779|  13.7k|        Ok(())
 1780|  79.8k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCs4x4bMiUCp0I_5oxrdf:
 1394|   389k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1395|   389k|        if self.input.starts_with('/') {
 1396|   354k|            self.input.next();
 1397|   354k|            self.output.push('/');
 1398|   354k|            self.parse_authority()
 1399|       |        } else {
 1400|  35.0k|            self.output_positions.authority_end = self.output.len() - 1;
 1401|  35.0k|            self.parse_path()
 1402|       |        }
 1403|   389k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCs4x4bMiUCp0I_5oxrdf:
 1323|  3.38M|    fn parse(
 1324|  3.38M|        iri: &'a str,
 1325|  3.38M|        base: Option<IriRef<&'a str>>,
 1326|  3.38M|        output: &'a mut O,
 1327|  3.38M|    ) -> Result<IriElementsPositions, IriParseError> {
 1328|  3.38M|        let mut parser = Self {
 1329|  3.38M|            iri,
 1330|  3.38M|            base,
 1331|  3.38M|            input: ParserInput {
 1332|  3.38M|                value: iri.chars(),
 1333|  3.38M|                position: 0,
 1334|  3.38M|            },
 1335|  3.38M|            output,
 1336|  3.38M|            output_positions: IriElementsPositions {
 1337|  3.38M|                scheme_end: 0,
 1338|  3.38M|                authority_end: 0,
 1339|  3.38M|                path_end: 0,
 1340|  3.38M|                query_end: 0,
 1341|  3.38M|            },
 1342|  3.38M|            input_scheme_end: 0,
 1343|  3.38M|        };
 1344|  3.38M|        parser.parse_scheme_start()?;
 1345|  2.91M|        Ok(parser.output_positions)
 1346|  3.38M|    }
_RNvMsp_CsikbtAEUxupI_5oxiriINtB5_3IriNtNtCs8f6x4lOZV33_5alloc6string6StringE10into_innerCs4x4bMiUCp0I_5oxrdf:
  796|  2.70M|    pub fn into_inner(self) -> T {
  797|  2.70M|        self.0.into_inner()
  798|  2.70M|    }
_RNvMsp_CsikbtAEUxupI_5oxiriINtB5_3IriNtNtCs8f6x4lOZV33_5alloc6string6StringE5parseCs4x4bMiUCp0I_5oxrdf:
  556|  3.38M|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|  3.38M|        IriRef::parse(iri)?.try_into()
  558|  3.38M|    }
_RNvXsV_CsikbtAEUxupI_5oxiriINtB5_3IriNtNtCs8f6x4lOZV33_5alloc6string6StringEINtNtCshZc3FwCJ069_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCs4x4bMiUCp0I_5oxrdf:
 1099|  2.91M|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
 1100|  2.91M|        if iri.is_absolute() {
 1101|  2.70M|            Ok(Self(iri))
 1102|       |        } else {
 1103|   204k|            Err(IriParseError {
 1104|   204k|                kind: IriParseErrorKind::NoScheme,
 1105|   204k|            })
 1106|       |        }
 1107|  2.91M|    }
_RNvMs12_CsikbtAEUxupI_5oxiriNtB6_11ParserInput11starts_withCs4x4bMiUCp0I_5oxrdf:
 1305|  4.10M|    fn starts_with(&self, c: char) -> bool {
 1306|  4.10M|        self.value.as_str().starts_with(c)
 1307|  4.10M|    }
_RNvMs12_CsikbtAEUxupI_5oxiriNtB6_11ParserInput4nextCs4x4bMiUCp0I_5oxrdf:
 1290|  19.3M|    fn next(&mut self) -> Option<char> {
 1291|  19.3M|        if let Some(head) = self.value.next() {
 1292|  16.2M|            self.position += head.len_utf8();
 1293|  16.2M|            Some(head)
 1294|       |        } else {
 1295|  3.04M|            None
 1296|       |        }
 1297|  19.3M|    }
_RNvMs12_CsikbtAEUxupI_5oxiriNtB6_11ParserInput5frontCs4x4bMiUCp0I_5oxrdf:
 1300|  4.42M|    fn front(&self) -> Option<char> {
 1301|  4.42M|        self.value.clone().next()
 1302|  4.42M|    }
_RNvXs10_CsikbtAEUxupI_5oxiriNtB6_16VoidOutputBufferNtB6_12OutputBuffer3lenCs4x4bMiUCp0I_5oxrdf:
 1241|  11.6M|    fn len(&self) -> usize {
 1242|  11.6M|        self.len
 1243|  11.6M|    }
_RNvXs10_CsikbtAEUxupI_5oxiriNtB6_16VoidOutputBufferNtB6_12OutputBuffer4pushCs4x4bMiUCp0I_5oxrdf:
 1221|  15.4M|    fn push(&mut self, c: char) {
 1222|  15.4M|        self.len += c.len_utf8();
 1223|  15.4M|    }
_RNvXs10_CsikbtAEUxupI_5oxiriNtB6_16VoidOutputBufferNtB6_12OutputBuffer5clearCs4x4bMiUCp0I_5oxrdf:
 1231|   130k|    fn clear(&mut self) {
 1232|   130k|        self.len = 0;
 1233|   130k|    }
_RNvXs10_CsikbtAEUxupI_5oxiriNtB6_16VoidOutputBufferNtB6_12OutputBuffer6as_strCs4x4bMiUCp0I_5oxrdf:
 1246|  5.79M|    fn as_str(&self) -> &str {
 1247|  5.79M|        ""
 1248|  5.79M|    }
_RNvXs10_CsikbtAEUxupI_5oxiriNtB6_16VoidOutputBufferNtB6_12OutputBuffer8truncateCs4x4bMiUCp0I_5oxrdf:
 1236|   326k|    fn truncate(&mut self, new_len: usize) {
 1237|   326k|        self.len = new_len;
 1238|   326k|    }
_RNvXsW_CsikbtAEUxupI_5oxiriNtB5_13IriParseErrorNtNtCshZc3FwCJ069_4core3fmt7Display3fmt:
 1134|   679k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1135|   679k|        match &self.kind {
 1136|   219k|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
 1137|   113k|            IriParseErrorKind::InvalidHostCharacter(c) => {
 1138|   113k|                write!(f, "Invalid character '{c}' in host")
 1139|       |            }
 1140|  28.4k|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({e})"),
 1141|  21.2k|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{c}'"),
 1142|   236k|            IriParseErrorKind::InvalidIriCodePoint(c) => {
 1143|   236k|                write!(f, "Invalid IRI code point '{c}'")
 1144|       |            }
 1145|  61.0k|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
 1146|  61.0k|                f,
 1147|  61.0k|                "Invalid IRI percent encoding '{}'",
 1148|  61.0k|                cs.iter().flatten().cloned().collect::<String>()
 1149|  61.0k|            ),
 1150|       |        }
 1151|   679k|    }
_RNvCsikbtAEUxupI_5oxiri28is_iunreserved_or_sub_delims:
 1783|  4.42M|fn is_iunreserved_or_sub_delims(c: char) -> bool {
 1784|  4.42M|    matches!(c,
 1785|  1.43M|        'a'..='z'
 1786|  1.41M|        | 'A'..='Z'
 1787|  1.25M|        | '0'..='9'
 1788|       |        | '!'
 1789|       |        | '$'
 1790|       |        | '&'
 1791|       |        | '\''
 1792|       |        | '('
 1793|       |        | ')'
 1794|       |        | '*'
 1795|       |        | '+'
 1796|       |        | ','
 1797|       |        | '-'
 1798|       |        | '.'
 1799|       |        | ';'
 1800|       |        | '='
 1801|       |        | '_'
 1802|       |        | '~'
 1803|   243k|        | '\u{A0}'..='\u{D7FF}'
 1804|  39.7k|        | '\u{F900}'..='\u{FDCF}'
 1805|  39.5k|        | '\u{FDF0}'..='\u{FFEF}'
 1806|  39.5k|        | '\u{10000}'..='\u{1FFFD}'
 1807|  39.5k|        | '\u{20000}'..='\u{2FFFD}'
 1808|  39.5k|        | '\u{30000}'..='\u{3FFFD}'
 1809|  39.5k|        | '\u{40000}'..='\u{4FFFD}'
 1810|  39.5k|        | '\u{50000}'..='\u{5FFFD}'
 1811|  39.5k|        | '\u{60000}'..='\u{6FFFD}'
 1812|  39.5k|        | '\u{70000}'..='\u{7FFFD}'
 1813|  39.5k|        | '\u{80000}'..='\u{8FFFD}'
 1814|  39.5k|        | '\u{90000}'..='\u{9FFFD}'
 1815|  39.5k|        | '\u{A0000}'..='\u{AFFFD}'
 1816|  39.5k|        | '\u{B0000}'..='\u{BFFFD}'
 1817|  39.3k|        | '\u{C0000}'..='\u{CFFFD}'
 1818|  32.7k|        | '\u{D0000}'..='\u{DFFFD}'
 1819|  31.8k|        | '\u{E1000}'..='\u{EFFFD}'
 1820|       |    )
 1821|  3.58M|}
_RNvCsikbtAEUxupI_5oxiri27is_unreserved_or_sub_delims:
 1823|   458k|fn is_unreserved_or_sub_delims(c: char) -> bool {
 1824|   458k|    matches!(c,
 1825|  28.0k|        'a'..='z'
 1826|   120k|        | 'A'..='Z'
 1827|  91.4k|        | '0'..='9'
 1828|       |        | '!'
 1829|       |        | '$'
 1830|       |        | '&'
 1831|       |        | '\''
 1832|       |        | '('
 1833|       |        | ')'
 1834|       |        | '*'
 1835|       |        | '+'
 1836|       |        | ','
 1837|       |        | '-'
 1838|       |        | '.'
 1839|       |        | ';'
 1840|       |        | '='
 1841|       |        | '_'
 1842|       |        | '~'
 1843|       |    )
 1844|   167k|}

_RNvXNtCs4xy0Jncn10v_9thiserror7displayRNtNtCs8f6x4lOZV33_5alloc6string6StringNtB2_9AsDisplay10as_displayCs4x4bMiUCp0I_5oxrdf:
   19|  5.21k|    fn as_display(&'a self) -> Self::Target {
   20|  5.21k|        *self
   21|  5.21k|    }
_RNvXNtCs4xy0Jncn10v_9thiserror7displayRNtNtCs4x4bMiUCp0I_5oxrdf10blank_node21BlankNodeIdParseErrorNtB2_9AsDisplay10as_displayBF_:
   19|    832|    fn as_display(&'a self) -> Self::Target {
   20|    832|        *self
   21|    832|    }
_RNvXNtCs4xy0Jncn10v_9thiserror7displayRNtCsl9ThLYvim7w_10oxilangtag21LanguageTagParseErrorNtB2_9AsDisplay10as_displayCs4x4bMiUCp0I_5oxrdf:
   19|    282|    fn as_display(&'a self) -> Self::Target {
   20|    282|        *self
   21|    282|    }
_RNvXNtCs4xy0Jncn10v_9thiserror7displayRNtCsikbtAEUxupI_5oxiri13IriParseErrorNtB2_9AsDisplay10as_displayCs4x4bMiUCp0I_5oxrdf:
   19|  4.10k|    fn as_display(&'a self) -> Self::Target {
   20|  4.10k|        *self
   21|  4.10k|    }
_RNvXNtCs4xy0Jncn10v_9thiserror7displayRReNtB2_9AsDisplay10as_displayCs2pkdW2YzOTC_12oxsdatatypes:
   19|  11.6k|    fn as_display(&'a self) -> Self::Target {
   20|  11.6k|        *self
   21|  11.6k|    }

_RINvCsdwlLKB38Swz_6nquads5parseARShj1_EB2_:
    9|  52.0k|fn parse<'a>(
   10|  52.0k|    chunks: impl IntoIterator<Item = &'a [u8]>,
   11|  52.0k|    unchecked: bool,
   12|  52.0k|) -> (Vec<Quad>, Vec<String>) {
   13|  52.0k|    let mut quads = Vec::new();
   14|  52.0k|    let mut errors = Vec::new();
   15|  52.0k|    let mut parser = NQuadsParser::new().with_quoted_triples();
   16|  52.0k|    if unchecked {
   17|      0|        parser = parser.unchecked();
   18|  52.0k|    }
   19|  52.0k|    let mut parser = parser.low_level();
   20|   104k|    for chunk in chunks {
   21|  52.0k|        parser.extend_from_slice(chunk);
   22|  5.94M|        while let Some(result) = parser.parse_next() {
   23|  5.88M|            match result {
   24|   172k|                Ok(quad) => quads.push(quad),
   25|  5.71M|                Err(error) => errors.push(error.to_string()),
   26|       |            }
   27|       |        }
   28|       |    }
   29|  52.0k|    parser.end();
   30|  99.0k|    while let Some(result) = parser.parse_next() {
   31|  46.9k|        match result {
   32|  1.31k|            Ok(quad) => quads.push(quad),
   33|  45.6k|            Err(error) => errors.push(error.to_string()),
   34|       |        }
   35|       |    }
   36|  52.0k|    assert!(parser.is_end());
   37|  52.0k|    (quads, errors)
   38|  52.0k|}
_RINvCsdwlLKB38Swz_6nquads5parseINtNtNtCshZc3FwCJ069_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_run0EEB2_:
    9|  52.0k|fn parse<'a>(
   10|  52.0k|    chunks: impl IntoIterator<Item = &'a [u8]>,
   11|  52.0k|    unchecked: bool,
   12|  52.0k|) -> (Vec<Quad>, Vec<String>) {
   13|  52.0k|    let mut quads = Vec::new();
   14|  52.0k|    let mut errors = Vec::new();
   15|  52.0k|    let mut parser = NQuadsParser::new().with_quoted_triples();
   16|  52.0k|    if unchecked {
   17|      0|        parser = parser.unchecked();
   18|  52.0k|    }
   19|  52.0k|    let mut parser = parser.low_level();
   20|  6.62M|    for chunk in chunks {
   21|  6.57M|        parser.extend_from_slice(chunk);
   22|  12.4M|        while let Some(result) = parser.parse_next() {
   23|  5.88M|            match result {
   24|   172k|                Ok(quad) => quads.push(quad),
   25|  5.71M|                Err(error) => errors.push(error.to_string()),
   26|       |            }
   27|       |        }
   28|       |    }
   29|  52.0k|    parser.end();
   30|  99.0k|    while let Some(result) = parser.parse_next() {
   31|  46.9k|        match result {
   32|  1.31k|            Ok(quad) => quads.push(quad),
   33|  45.6k|            Err(error) => errors.push(error.to_string()),
   34|       |        }
   35|       |    }
   36|  52.0k|    assert!(parser.is_end());
   37|  52.0k|    (quads, errors)
   38|  52.0k|}
_RINvCsdwlLKB38Swz_6nquads5parseINtNtNtCshZc3FwCJ069_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_runs0_0EEB2_:
    9|    380|fn parse<'a>(
   10|    380|    chunks: impl IntoIterator<Item = &'a [u8]>,
   11|    380|    unchecked: bool,
   12|    380|) -> (Vec<Quad>, Vec<String>) {
   13|    380|    let mut quads = Vec::new();
   14|    380|    let mut errors = Vec::new();
   15|    380|    let mut parser = NQuadsParser::new().with_quoted_triples();
   16|    380|    if unchecked {
   17|    380|        parser = parser.unchecked();
   18|    380|    }
   19|    380|    let mut parser = parser.low_level();
   20|  6.55k|    for chunk in chunks {
   21|  6.17k|        parser.extend_from_slice(chunk);
   22|  6.39k|        while let Some(result) = parser.parse_next() {
   23|    220|            match result {
   24|    220|                Ok(quad) => quads.push(quad),
   25|      0|                Err(error) => errors.push(error.to_string()),
   26|       |            }
   27|       |        }
   28|       |    }
   29|    380|    parser.end();
   30|    443|    while let Some(result) = parser.parse_next() {
   31|     63|        match result {
   32|     63|            Ok(quad) => quads.push(quad),
   33|      0|            Err(error) => errors.push(error.to_string()),
   34|       |        }
   35|       |    }
   36|    380|    assert!(parser.is_end());
   37|    380|    (quads, errors)
   38|    380|}
_RNCNvNvCsdwlLKB38Swz_6nquads1__19___libfuzzer_sys_run0B5_:
   42|  33.7M|    let (quads, errors) = parse(data.split(|c| *c == 0xFF), false);
_RNCNvNvCsdwlLKB38Swz_6nquads1__19___libfuzzer_sys_runs_0B5_:
   47|  33.7M|        .filter(|c| *c != 0xFF)
_RNCNvNvCsdwlLKB38Swz_6nquads1__19___libfuzzer_sys_runs0_0B5_:
   56|  32.1k|        let (quads_unchecked, errors_unchecked) = parse(data.split(|c| *c == 0xFF), true);
_RNCNvNvCsdwlLKB38Swz_6nquads1__19___libfuzzer_sys_runs2_0B5_:
   88|  24.8k|            .map_err(|e| e.to_string())
_RNCNvNvCsdwlLKB38Swz_6nquads1__19___libfuzzer_sys_runs3_0B5_:
   89|  18.5k|            .and_then(|d| {
   90|  18.5k|                d.split('\n')
   91|  18.5k|                    .filter(|l| !l.trim().is_empty())
   92|  18.5k|                    .map(Quad::from_str)
   93|  18.5k|                    .collect::<Result<Vec<_>, _>>()
   94|  18.5k|                    .map_err(|e| e.to_string())
   95|  18.5k|            }) {
_RNCNCNvNvCsdwlLKB38Swz_6nquads1__19___libfuzzer_sys_runs3_00B7_:
   91|  51.6k|                    .filter(|l| !l.trim().is_empty())
_RNCNCNvNvCsdwlLKB38Swz_6nquads1__19___libfuzzer_sys_runs3_0s_0B7_:
   94|  16.8k|                    .map_err(|e| e.to_string())

_RNvMNtCs4x4bMiUCp0I_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCsdwlLKB38Swz_6nquads:
   88|  77.4k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|  77.4k|        BlankNodeRef(match &self.0 {
   90|  16.4k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|  61.0k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|  61.0k|                id: *id,
   93|  61.0k|                str: str.as_str(),
   94|  61.0k|            },
   95|       |        })
   96|  77.4k|    }
_RNvMs1_NtCs4x4bMiUCp0I_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCsdwlLKB38Swz_6nquads:
  179|  77.4k|    pub const fn as_str(self) -> &'a str {
  180|  77.4k|        match self.0 {
  181|  16.4k|            BlankNodeRefContent::Named(id) => id,
  182|  61.0k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  183|       |        }
  184|  77.4k|    }
_RNvMs7_NtCs4x4bMiUCp0I_5oxrdf10blank_nodeNtB5_5IdStr6as_strCsdwlLKB38Swz_6nquads:
  265|  61.0k|    fn as_str(&self) -> &str {
  266|  61.0k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|  61.0k|        str::from_utf8(&self.0[..len]).unwrap()
  268|  61.0k|    }
_RNvXs2_NtCs4x4bMiUCp0I_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCshZc3FwCJ069_4core3fmt7Display3fmtCsdwlLKB38Swz_6nquads:
  220|  77.4k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  221|  77.4k|        write!(f, "_:{}", self.as_str())
  222|  77.4k|    }
_RNvMNtCs4x4bMiUCp0I_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idCs8X3sjsXBtJI_5oxttl:
   62|   311k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|   311k|        Self(BlankNodeContent::Anonymous {
   64|   311k|            id: id.to_ne_bytes(),
   65|   311k|            str: IdStr::new(id),
   66|   311k|        })
   67|   311k|    }
_RNvMs7_NtCs4x4bMiUCp0I_5oxrdf10blank_nodeNtB5_5IdStr3newCs8X3sjsXBtJI_5oxttl:
  258|   311k|    fn new(id: u128) -> Self {
  259|   311k|        let mut str = [0; 32];
  260|   311k|        write!(&mut str[..], "{id:x}").unwrap();
  261|   311k|        Self(str)
  262|   311k|    }
_RNvNtCs4x4bMiUCp0I_5oxrdf10blank_node13to_integer_idCs8X3sjsXBtJI_5oxttl:
  331|   447k|fn to_integer_id(id: &str) -> Option<u128> {
  332|   447k|    let digits = id.as_bytes();
  333|   447k|    let mut value: u128 = 0;
  334|   447k|    if let None | Some(b'0') = digits.first() {
  335|  13.8k|        return None; // No empty string or leading zeros
  336|   433k|    }
  337|  4.18M|    for digit in digits {
  338|  3.87M|        value = value.checked_mul(16)?.checked_add(
  339|  3.86M|            match *digit {
  340|  3.83M|                b'0'..=b'9' => digit - b'0',
  341|  3.46M|                b'a'..=b'f' => digit - b'a' + 10,
  342|   114k|                _ => return None,
  343|       |            }
  344|  3.75M|            .into(),
  345|      0|        )?;
  346|       |    }
  347|   311k|    Some(value)
  348|   447k|}
_RINvMNtCs4x4bMiUCp0I_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedReECs8X3sjsXBtJI_5oxttl:
   49|   447k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   50|   447k|        let id = id.into();
   51|   447k|        if let Some(numerical_id) = to_integer_id(&id) {
   52|   311k|            Self::new_from_unique_id(numerical_id)
   53|       |        } else {
   54|   136k|            Self(BlankNodeContent::Named(id))
   55|       |        }
   56|   447k|    }
_RINvMNtCs4x4bMiUCp0I_5oxrdf10blank_nodeNtB3_9BlankNode3newReEB5_:
   36|  14.9k|    pub fn new(id: impl Into<String>) -> Result<Self, BlankNodeIdParseError> {
   37|  14.9k|        let id = id.into();
   38|  14.9k|        validate_blank_node_identifier(&id)?;
   39|  14.0k|        Ok(Self::new_unchecked(id))
   40|  14.9k|    }
_RINvMNtCs4x4bMiUCp0I_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedNtNtCs8f6x4lOZV33_5alloc6string6StringEB5_:
   49|  14.0k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   50|  14.0k|        let id = id.into();
   51|  14.0k|        if let Some(numerical_id) = to_integer_id(&id) {
   52|  6.16k|            Self::new_from_unique_id(numerical_id)
   53|       |        } else {
   54|  7.90k|            Self(BlankNodeContent::Named(id))
   55|       |        }
   56|  14.0k|    }
_RNCNvMs7_NtCs4x4bMiUCp0I_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  266|   743k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
_RNvMNtCs4x4bMiUCp0I_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idB4_:
   62|  6.16k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|  6.16k|        Self(BlankNodeContent::Anonymous {
   64|  6.16k|            id: id.to_ne_bytes(),
   65|  6.16k|            str: IdStr::new(id),
   66|  6.16k|        })
   67|  6.16k|    }
_RNvMNtCs4x4bMiUCp0I_5oxrdf10blank_nodeNtB2_9BlankNode6as_refB4_:
   88|  3.25k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|  3.25k|        BlankNodeRef(match &self.0 {
   90|  1.89k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|  1.36k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|  1.36k|                id: *id,
   93|  1.36k|                str: str.as_str(),
   94|  1.36k|            },
   95|       |        })
   96|  3.25k|    }
_RNvMs1_NtCs4x4bMiUCp0I_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strB7_:
  179|  3.25k|    pub const fn as_str(self) -> &'a str {
  180|  3.25k|        match self.0 {
  181|  1.89k|            BlankNodeRefContent::Named(id) => id,
  182|  1.36k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  183|       |        }
  184|  3.25k|    }
_RNvXs2_NtCs4x4bMiUCp0I_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCshZc3FwCJ069_4core3fmt7Display3fmtB7_:
  220|  3.25k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  221|  3.25k|        write!(f, "_:{}", self.as_str())
  222|  3.25k|    }
_RNvMs7_NtCs4x4bMiUCp0I_5oxrdf10blank_nodeNtB5_5IdStr3newB7_:
  258|  6.16k|    fn new(id: u128) -> Self {
  259|  6.16k|        let mut str = [0; 32];
  260|  6.16k|        write!(&mut str[..], "{id:x}").unwrap();
  261|  6.16k|        Self(str)
  262|  6.16k|    }
_RNvMs7_NtCs4x4bMiUCp0I_5oxrdf10blank_nodeNtB5_5IdStr6as_strB7_:
  265|  1.36k|    fn as_str(&self) -> &str {
  266|  1.36k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|  1.36k|        str::from_utf8(&self.0[..len]).unwrap()
  268|  1.36k|    }
_RNvNtCs4x4bMiUCp0I_5oxrdf10blank_node30validate_blank_node_identifier:
  271|  14.9k|fn validate_blank_node_identifier(id: &str) -> Result<(), BlankNodeIdParseError> {
  272|  14.9k|    let mut chars = id.chars();
  273|  14.9k|    let front = chars.next().ok_or(BlankNodeIdParseError)?;
  274|  14.7k|    match front {
  275|  14.6k|        '0'..='9'
  276|       |        | '_'
  277|       |        | ':'
  278|  13.5k|        | 'A'..='Z'
  279|  13.2k|        | 'a'..='z'
  280|     98|        | '\u{00C0}'..='\u{00D6}'
  281|     98|        | '\u{00D8}'..='\u{00F6}'
  282|     98|        | '\u{00F8}'..='\u{02FF}'
  283|     95|        | '\u{0370}'..='\u{037D}'
  284|     95|        | '\u{037F}'..='\u{1FFF}'
  285|     75|        | '\u{200C}'..='\u{200D}'
  286|     51|        | '\u{2070}'..='\u{218F}'
  287|     50|        | '\u{2C00}'..='\u{2FEF}'
  288|     50|        | '\u{3001}'..='\u{D7FF}'
  289|     23|        | '\u{F900}'..='\u{FDCF}'
  290|     23|        | '\u{FDF0}'..='\u{FFFD}'
  291|  14.6k|        | '\u{10000}'..='\u{EFFFF}' => (),
  292|    117|        _ => return Err(BlankNodeIdParseError),
  293|       |    }
  294|   168k|    for c in chars {
  295|   154k|        match c {
  296|       |            '.' // validated later
  297|       |            | '-'
  298|   150k|            | '0'..='9'
  299|       |            | '\u{00B7}'
  300|  3.80k|            | '\u{0300}'..='\u{036F}'
  301|  3.69k|            | '\u{203F}'..='\u{2040}'
  302|       |            | '_'
  303|       |            | ':'
  304|   144k|            | 'A'..='Z'
  305|   129k|            | 'a'..='z'
  306|  3.82k|            | '\u{00C0}'..='\u{00D6}'
  307|  3.82k|            | '\u{00D8}'..='\u{00F6}'
  308|  3.82k|            | '\u{00F8}'..='\u{02FF}'
  309|  3.80k|            | '\u{0370}'..='\u{037D}'
  310|  3.80k|            | '\u{037F}'..='\u{1FFF}'
  311|  3.71k|            | '\u{200C}'..='\u{200D}'
  312|  3.69k|            | '\u{2070}'..='\u{218F}'
  313|  3.69k|            | '\u{2C00}'..='\u{2FEF}'
  314|  3.69k|            | '\u{3001}'..='\u{D7FF}'
  315|     95|            | '\u{F900}'..='\u{FDCF}'
  316|     95|            | '\u{FDF0}'..='\u{FFFD}'
  317|   154k|            | '\u{10000}'..='\u{EFFFF}' => (),
  318|    546|            _ => return Err(BlankNodeIdParseError),
  319|       |        }
  320|       |    }
  321|       |
  322|       |    // Could not end with a dot
  323|  14.0k|    if id.ends_with('.') {
  324|      0|        Err(BlankNodeIdParseError)
  325|       |    } else {
  326|  14.0k|        Ok(())
  327|       |    }
  328|  14.9k|}
_RNvNtCs4x4bMiUCp0I_5oxrdf10blank_node13to_integer_idB3_:
  331|  14.0k|fn to_integer_id(id: &str) -> Option<u128> {
  332|  14.0k|    let digits = id.as_bytes();
  333|  14.0k|    let mut value: u128 = 0;
  334|  14.0k|    if let None | Some(b'0') = digits.first() {
  335|     74|        return None; // No empty string or leading zeros
  336|  14.0k|    }
  337|  37.7k|    for digit in digits {
  338|  31.5k|        value = value.checked_mul(16)?.checked_add(
  339|  31.5k|            match *digit {
  340|  27.6k|                b'0'..=b'9' => digit - b'0',
  341|  20.5k|                b'a'..=b'f' => digit - b'a' + 10,
  342|  7.81k|                _ => return None,
  343|       |            }
  344|  23.7k|            .into(),
  345|      0|        )?;
  346|       |    }
  347|  6.16k|    Some(value)
  348|  14.0k|}

_RNvMNtCs4x4bMiUCp0I_5oxrdf7literalNtB2_7Literal6as_refCsdwlLKB38Swz_6nquads:
  129|  87.6k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|  87.6k|        LiteralRef(match &self.0 {
  131|  15.4k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|  61.7k|            LiteralContent::LanguageTaggedString { value, language } => {
  133|  61.7k|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|  10.4k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|  10.4k|                value,
  137|  10.4k|                datatype: datatype.as_ref(),
  138|  10.4k|            },
  139|       |        })
  140|  87.6k|    }
_RNvXsu_NtCs4x4bMiUCp0I_5oxrdf7literalNtB5_10LiteralRefNtNtCshZc3FwCJ069_4core3fmt7Display3fmtCsdwlLKB38Swz_6nquads:
  565|  87.6k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  566|  87.6k|        match self.0 {
  567|  15.4k|            LiteralRefContent::String(value) => print_quoted_str(value, f),
  568|  61.7k|            LiteralRefContent::LanguageTaggedString { value, language } => {
  569|  61.7k|                print_quoted_str(value, f)?;
  570|  61.7k|                write!(f, "@{language}")
  571|       |            }
  572|  10.4k|            LiteralRefContent::TypedLiteral { value, datatype } => {
  573|  10.4k|                print_quoted_str(value, f)?;
  574|  10.4k|                write!(f, "^^{datatype}")
  575|       |            }
  576|       |        }
  577|  87.6k|    }
_RINvMNtCs4x4bMiUCp0I_5oxrdf7literalNtB3_7Literal18new_simple_literalRNtNtCs8f6x4lOZV33_5alloc6string6StringECs8X3sjsXBtJI_5oxttl:
   47|    492|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|    492|        Self(LiteralContent::String(value.into()))
   49|    492|    }
_RINvMNtCs4x4bMiUCp0I_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCs8f6x4lOZV33_5alloc6string6StringEB5_:
   47|  56.8k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|  56.8k|        Self(LiteralContent::String(value.into()))
   49|  56.8k|    }
_RINvMNtCs4x4bMiUCp0I_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCs8f6x4lOZV33_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   53|  43.3k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|  43.3k|        let value = value.into();
   55|  43.3k|        let datatype = datatype.into();
   56|  43.3k|        Self(if datatype == xsd::STRING {
   57|  2.79k|            LiteralContent::String(value)
   58|       |        } else {
   59|  40.5k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|  43.3k|    }
_RINvMNtCs4x4bMiUCp0I_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   53|  2.33k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|  2.33k|        let value = value.into();
   55|  2.33k|        let datatype = datatype.into();
   56|  2.33k|        Self(if datatype == xsd::STRING {
   57|      0|            LiteralContent::String(value)
   58|       |        } else {
   59|  2.33k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|  2.33k|    }
_RINvMNtCs4x4bMiUCp0I_5oxrdf7literalNtB3_7Literal27new_language_tagged_literalNtNtCs8f6x4lOZV33_5alloc6string6StringReEB5_:
   65|  8.02k|    pub fn new_language_tagged_literal(
   66|  8.02k|        value: impl Into<String>,
   67|  8.02k|        language: impl Into<String>,
   68|  8.02k|    ) -> Result<Self, LanguageTagParseError> {
   69|  8.02k|        let mut language = language.into();
   70|  8.02k|        language.make_ascii_lowercase();
   71|  8.02k|        Ok(Self::new_language_tagged_literal_unchecked(
   72|  8.02k|            value,
   73|  8.02k|            LanguageTag::parse(language)?.into_inner(),
   74|       |        ))
   75|  8.02k|    }
_RINvMNtCs4x4bMiUCp0I_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCs8f6x4lOZV33_5alloc6string6StringB1n_EB5_:
   85|   219k|    pub fn new_language_tagged_literal_unchecked(
   86|   219k|        value: impl Into<String>,
   87|   219k|        language: impl Into<String>,
   88|   219k|    ) -> Self {
   89|   219k|        Self(LiteralContent::LanguageTaggedString {
   90|   219k|            value: value.into(),
   91|   219k|            language: language.into(),
   92|   219k|        })
   93|   219k|    }
_RINvNtCs4x4bMiUCp0I_5oxrdf7literal16print_quoted_strNtNtCshZc3FwCJ069_4core3fmt9FormatterEB4_:
  616|  90.4k|pub fn print_quoted_str(string: &str, f: &mut impl Write) -> fmt::Result {
  617|  90.4k|    f.write_char('"')?;
  618|   100k|    for c in string.chars() {
  619|   100k|        match c {
  620|  1.28k|            '\u{08}' => f.write_str("\\b"),
  621|  3.05k|            '\t' => f.write_str("\\t"),
  622|    146|            '\n' => f.write_str("\\n"),
  623|  5.44k|            '\u{0C}' => f.write_str("\\f"),
  624|     20|            '\r' => f.write_str("\\r"),
  625|  5.73k|            '"' => f.write_str("\\\""),
  626|    226|            '\\' => f.write_str("\\\\"),
  627|  84.7k|            '\0'..='\u{1F}' | '\u{7F}' => write!(f, "\\u{:04X}", u32::from(c)),
  628|  68.2k|            _ => f.write_char(c),
  629|      0|        }?;
  630|       |    }
  631|  90.4k|    f.write_char('"')
  632|  90.4k|}
_RNvMNtCs4x4bMiUCp0I_5oxrdf7literalNtB2_7Literal6as_refB4_:
  129|  2.82k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|  2.82k|        LiteralRef(match &self.0 {
  131|  1.51k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|    641|            LiteralContent::LanguageTaggedString { value, language } => {
  133|    641|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|    669|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|    669|                value,
  137|    669|                datatype: datatype.as_ref(),
  138|    669|            },
  139|       |        })
  140|  2.82k|    }
_RNvXsu_NtCs4x4bMiUCp0I_5oxrdf7literalNtB5_10LiteralRefNtNtCshZc3FwCJ069_4core3fmt7Display3fmtB7_:
  565|  2.82k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  566|  2.82k|        match self.0 {
  567|  1.51k|            LiteralRefContent::String(value) => print_quoted_str(value, f),
  568|    641|            LiteralRefContent::LanguageTaggedString { value, language } => {
  569|    641|                print_quoted_str(value, f)?;
  570|    641|                write!(f, "@{language}")
  571|       |            }
  572|    669|            LiteralRefContent::TypedLiteral { value, datatype } => {
  573|    669|                print_quoted_str(value, f)?;
  574|    669|                write!(f, "^^{datatype}")
  575|       |            }
  576|       |        }
  577|  2.82k|    }

_RNvMNtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB2_9NamedNode6as_refCsdwlLKB38Swz_6nquads:
   54|   391k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|   391k|        NamedNodeRef::new_unchecked(&self.iri)
   56|   391k|    }
_RNvMs4_NtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCsdwlLKB38Swz_6nquads:
  128|   391k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   391k|        Self { iri }
  130|   391k|    }
_RNvMs4_NtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCsdwlLKB38Swz_6nquads:
  133|   391k|    pub const fn as_str(self) -> &'a str {
  134|   391k|        self.iri
  135|   391k|    }
_RNvXs5_NtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCshZc3FwCJ069_4core3fmt7Display3fmtCsdwlLKB38Swz_6nquads:
  145|   391k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|   391k|        write!(f, "<{}>", self.as_str())
  147|   391k|    }
_RNvMNtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB2_9NamedNode12new_from_iriB4_:
   29|  92.6k|    pub(crate) fn new_from_iri(iri: Iri<String>) -> Self {
   30|  92.6k|        Self::new_unchecked(iri.into_inner())
   31|  92.6k|    }
_RNvMNtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|  45.6k|    pub fn as_str(&self) -> &str {
   45|  45.6k|        self.iri.as_str()
   46|  45.6k|    }
_RNvMNtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB2_9NamedNode6as_refB4_:
   54|  11.8k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  11.8k|        NamedNodeRef::new_unchecked(&self.iri)
   56|  11.8k|    }
_RNvMs4_NtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedB7_:
  128|  11.8k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  11.8k|        Self { iri }
  130|  11.8k|    }
_RNvMs4_NtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|  57.5k|    pub const fn as_str(self) -> &'a str {
  134|  57.5k|        self.iri
  135|  57.5k|    }
_RNvMs4_NtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|  2.33k|    pub fn into_owned(self) -> NamedNode {
  139|  2.33k|        NamedNode::new_unchecked(self.iri)
  140|  2.33k|    }
_RNvXs5_NtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCshZc3FwCJ069_4core3fmt7Display3fmtB7_:
  145|  11.8k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|  11.8k|        write!(f, "<{}>", self.as_str())
  147|  11.8k|    }
_RNvXs6_NtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCshZc3FwCJ069_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|  2.33k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|  2.33k|        node.into_owned()
  154|  2.33k|    }
_RNvXs9_NtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCshZc3FwCJ069_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|  45.6k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|  45.6k|        self.as_str() == other.as_str()
  175|  45.6k|    }
_RINvMNtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB3_9NamedNode3newReEB5_:
   24|  96.7k|    pub fn new(iri: impl Into<String>) -> Result<Self, IriParseError> {
   25|  96.7k|        Ok(Self::new_from_iri(Iri::parse(iri.into())?))
   26|  96.7k|    }
_RINvMNtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCs8f6x4lOZV33_5alloc6string6StringEB5_:
   39|  2.70M|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  2.70M|        Self { iri: iri.into() }
   41|  2.70M|    }
_RINvMNtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|  2.33k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  2.33k|        Self { iri: iri.into() }
   41|  2.33k|    }

_RNvNtCs4x4bMiUCp0I_5oxrdf6parser15read_named_node:
  244|  99.6k|fn read_named_node(s: &str) -> Result<(NamedNode, &str), TermParseError> {
  245|  99.6k|    let s = s.trim();
  246|  99.6k|    if let Some(remain) = s.strip_prefix('<') {
  247|  97.3k|        let end = remain
  248|  97.3k|            .find('>')
  249|  97.3k|            .ok_or_else(|| TermParseError::msg("Named node serialization should end with a >"))?;
  250|  96.7k|        let (value, remain) = remain.split_at(end);
  251|  96.7k|        let remain = &remain[1..];
  252|  96.7k|        let value = if value.contains('\\') {
  253|    310|            let mut escaped = String::with_capacity(value.len());
  254|    310|            let mut chars = value.chars();
  255|  14.5k|            while let Some(c) = chars.next() {
  256|  14.2k|                if c == '\\' {
  257|    954|                    match chars.next() {
  258|    190|                        Some('u') => escaped.push(read_hexa_char(&mut chars, 4)?),
  259|    142|                        Some('U') => escaped.push(read_hexa_char(&mut chars, 8)?),
  260|    591|                        Some(c) => {
  261|    591|                            escaped.push('\\');
  262|    591|                            escaped.push(c);
  263|    591|                        }
  264|     31|                        None => escaped.push('\\'),
  265|       |                    }
  266|  13.3k|                } else {
  267|  13.3k|                    escaped.push(c);
  268|  13.3k|                }
  269|       |            }
  270|    288|            Cow::Owned(escaped)
  271|       |        } else {
  272|  96.4k|            Cow::Borrowed(value)
  273|       |        };
  274|  96.7k|        let term = NamedNode::new(value.as_ref()).map_err(|error| {
  275|       |            TermParseError(TermParseErrorKind::Iri {
  276|       |                value: value.into_owned(),
  277|       |                error,
  278|       |            })
  279|  96.7k|        })?;
  280|  92.6k|        Ok((term, remain))
  281|       |    } else {
  282|  2.30k|        Err(TermParseError::msg(
  283|  2.30k|            "Named node serialization should start with a <",
  284|  2.30k|        ))
  285|       |    }
  286|  99.6k|}
_RNvNtCs4x4bMiUCp0I_5oxrdf6parser15read_blank_node:
  288|  15.0k|fn read_blank_node(s: &str) -> Result<(BlankNode, &str), TermParseError> {
  289|  15.0k|    let s = s.trim();
  290|  15.0k|    if let Some(remain) = s.strip_prefix("_:") {
  291|  14.9k|        let mut end = remain
  292|  14.9k|            .find(|v: char| {
  293|       |                v.is_whitespace()
  294|       |                    || matches!(v, '<' | '?' | '$' | '"' | '\'' | '>' | '@' | '^' | ':')
  295|  14.9k|            })
  296|  14.9k|            .unwrap_or(remain.len());
  297|  14.9k|        if let Some(pos) = remain[..end].find("..") {
  298|     65|            end = pos;
  299|  14.8k|        }
  300|  14.9k|        if remain[..end].ends_with('.') {
  301|  3.12k|            // It can't end with '.'
  302|  3.12k|            end -= 1;
  303|  11.7k|        }
  304|  14.9k|        let (value, remain) = remain.split_at(end);
  305|  14.9k|        let term = BlankNode::new(value).map_err(|error| {
  306|       |            TermParseError(TermParseErrorKind::BlankNode {
  307|       |                value: value.to_owned(),
  308|       |                error,
  309|       |            })
  310|  14.9k|        })?;
  311|  14.0k|        Ok((term, remain))
  312|       |    } else {
  313|     93|        Err(TermParseError::msg(
  314|     93|            "Blank node serialization should start with '_:'",
  315|     93|        ))
  316|       |    }
  317|  15.0k|}
_RNvNtCs4x4bMiUCp0I_5oxrdf6parser12read_literal:
  319|  19.5k|fn read_literal(s: &str) -> Result<(Literal, &str), TermParseError> {
  320|  19.5k|    let s = s.trim();
  321|  19.5k|    if let Some(s) = s.strip_prefix('"') {
  322|  10.4k|        let mut value = String::with_capacity(s.len());
  323|  10.4k|        let mut chars = s.chars();
  324|  94.4k|        while let Some(c) = chars.next() {
  325|  93.9k|            match c {
  326|       |                '"' => {
  327|  9.64k|                    let remain = chars.as_str().trim();
  328|  9.64k|                    return if let Some(remain) = remain.strip_prefix('@') {
  329|  8.02k|                        let end = remain
  330|  8.02k|                            .find(|v| !matches!(v, 'a'..='z' | 'A'..='Z' | '-'))
  331|  8.02k|                            .unwrap_or(remain.len());
  332|  8.02k|                        let (language, remain) = remain.split_at(end);
  333|  8.02k|                        Ok((
  334|  8.02k|                            Literal::new_language_tagged_literal(value, language).map_err(
  335|  8.02k|                                |error| {
  336|       |                                    TermParseError(TermParseErrorKind::LanguageTag {
  337|       |                                        value: language.to_owned(),
  338|       |                                        error,
  339|       |                                    })
  340|  8.02k|                                },
  341|  8.02k|                            )?,
  342|  7.73k|                            remain,
  343|       |                        ))
  344|  1.61k|                    } else if let Some(remain) = remain.strip_prefix("^^") {
  345|    261|                        let (datatype, remain) = read_named_node(remain)?;
  346|    188|                        Ok((Literal::new_typed_literal(value, datatype), remain))
  347|       |                    } else {
  348|  1.35k|                        Ok((Literal::new_simple_literal(value), remain))
  349|       |                    };
  350|       |                }
  351|       |                '\\' => {
  352|  6.14k|                    if let Some(c) = chars.next() {
  353|  6.12k|                        value.push(match c {
  354|    417|                            't' => '\t',
  355|    932|                            'b' => '\u{08}',
  356|    619|                            'n' => '\n',
  357|    279|                            'r' => '\r',
  358|    646|                            'f' => '\u{0C}',
  359|    519|                            '"' => '"',
  360|    555|                            '\'' => '\'',
  361|    542|                            '\\' => '\\',
  362|    970|                            'u' => read_hexa_char(&mut chars, 4)?,
  363|    545|                            'U' => read_hexa_char(&mut chars, 8)?,
  364|    100|                            _ => return Err(TermParseError::msg("Unexpected escaped char")),
  365|       |                        })
  366|       |                    } else {
  367|     23|                        return Err(TermParseError::msg("Unexpected literal end"));
  368|       |                    }
  369|       |                }
  370|  78.1k|                _ => value.push(c),
  371|       |            }
  372|       |        }
  373|    571|        Err(TermParseError::msg("Unexpected literal end"))
  374|  9.16k|    } else if let Some(remain) = s.strip_prefix("true") {
  375|     74|        Ok((Literal::new_typed_literal("true", xsd::BOOLEAN), remain))
  376|  9.09k|    } else if let Some(remain) = s.strip_prefix("false") {
  377|     16|        Ok((Literal::new_typed_literal("false", xsd::BOOLEAN), remain))
  378|       |    } else {
  379|  9.07k|        let input = s.as_bytes();
  380|  9.07k|        if input.is_empty() {
  381|    351|            return Err(TermParseError::msg("Empty term serialization"));
  382|  8.72k|        }
  383|       |
  384|  8.72k|        let mut cursor = match input.first() {
  385|    339|            Some(b'+' | b'-') => 1,
  386|  8.38k|            _ => 0,
  387|       |        };
  388|  8.72k|        let mut with_dot = false;
  389|  8.72k|
  390|  8.72k|        let mut count_before: usize = 0;
  391|  12.5k|        while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  392|  3.82k|            count_before += 1;
  393|  3.82k|            cursor += 1;
  394|  3.82k|        }
  395|       |
  396|  8.72k|        let mut count_after: usize = 0;
  397|  8.72k|        if cursor < input.len() && input[cursor] == b'.' {
  398|  1.27k|            with_dot = true;
  399|  1.27k|            cursor += 1;
  400|  3.50k|            while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  401|  2.23k|                count_after += 1;
  402|  2.23k|                cursor += 1;
  403|  2.23k|            }
  404|  7.44k|        }
  405|       |
  406|  8.72k|        if cursor < input.len() && (input[cursor] == b'e' || input[cursor] == b'E') {
  407|    168|            cursor += 1;
  408|    168|            cursor += match input.get(cursor) {
  409|     48|                Some(b'+' | b'-') => 1,
  410|    120|                _ => 0,
  411|       |            };
  412|    168|            let mut count_exponent = 0;
  413|  1.16k|            while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  414|    997|                count_exponent += 1;
  415|    997|                cursor += 1;
  416|    997|            }
  417|    168|            if count_exponent > 0 {
  418|     83|                Ok((Literal::new_typed_literal(s, xsd::DOUBLE), &s[cursor..]))
  419|       |            } else {
  420|     85|                Err(TermParseError::msg(
  421|     85|                    "Double serialization with an invalid exponent",
  422|     85|                ))
  423|       |            }
  424|  8.55k|        } else if with_dot {
  425|  1.26k|            if count_after > 0 {
  426|    425|                Ok((Literal::new_typed_literal(s, xsd::DECIMAL), &s[cursor..]))
  427|       |            } else {
  428|    842|                Err(TermParseError::msg(
  429|    842|                    "Decimal serialization without floating part",
  430|    842|                ))
  431|       |            }
  432|  7.28k|        } else if count_before > 0 {
  433|  1.74k|            Ok((Literal::new_typed_literal(s, xsd::INTEGER), &s[cursor..]))
  434|       |        } else {
  435|  5.54k|            Err(TermParseError::msg("Empty integer serialization"))
  436|       |        }
  437|       |    }
  438|  19.5k|}
_RNvNtCs4x4bMiUCp0I_5oxrdf6parser9read_term:
  440|   286k|fn read_term(s: &str, number_of_recursive_calls: usize) -> Result<(Term, &str), TermParseError> {
  441|   286k|    if number_of_recursive_calls == MAX_NUMBER_OF_NESTED_TRIPLES {
  442|      8|        return Err(TermParseError::msg(
  443|      8|            "Too many nested triples. The parser fails here to avoid a stack overflow.",
  444|      8|        ));
  445|   286k|    }
  446|   286k|    let s = s.trim();
  447|       |    #[allow(unused_variables)]
  448|   286k|    if let Some(remain) = s.strip_prefix("<<") {
  449|       |        #[cfg(feature = "rdf-star")]
  450|       |        {
  451|   192k|            let (triple, remain) = read_triple(remain, number_of_recursive_calls + 1)?;
  452|  1.03k|            let remain = remain.trim_start();
  453|  1.03k|            if let Some(remain) = remain.strip_prefix(">>") {
  454|    538|                Ok((triple.into(), remain))
  455|       |            } else {
  456|    500|                Err(TermParseError::msg(
  457|    500|                    "Nested triple serialization should be enclosed between << and >>",
  458|    500|                ))
  459|       |            }
  460|       |        }
  461|       |        #[cfg(not(feature = "rdf-star"))]
  462|       |        {
  463|       |            Err(TermParseError::msg("RDF-star is not supported"))
  464|       |        }
  465|  94.3k|    } else if s.starts_with('<') {
  466|  59.7k|        let (term, remain) = read_named_node(s)?;
  467|  55.9k|        Ok((term.into(), remain))
  468|  34.5k|    } else if s.starts_with('_') {
  469|  15.0k|        let (term, remain) = read_blank_node(s)?;
  470|  14.0k|        Ok((term.into(), remain))
  471|       |    } else {
  472|  19.5k|        let (term, remain) = read_literal(s)?;
  473|  11.6k|        Ok((term.into(), remain))
  474|       |    }
  475|   286k|}
_RNvNtCs4x4bMiUCp0I_5oxrdf6parser11read_triple:
  477|   240k|fn read_triple(
  478|   240k|    s: &str,
  479|   240k|    number_of_recursive_calls: usize,
  480|   240k|) -> Result<(Triple, &str), TermParseError> {
  481|   240k|    let s = s.trim();
  482|   240k|    let (subject, remain) = read_term(s, number_of_recursive_calls + 1)?;
  483|  39.6k|    let (predicate, remain) = read_named_node(remain)?;
  484|  36.5k|    let (object, remain) = read_term(remain, number_of_recursive_calls + 1)?;
  485|       |    Ok((
  486|       |        Triple {
  487|  33.8k|            subject: match subject {
  488|  32.6k|                Term::NamedNode(s) => s.into(),
  489|    974|                Term::BlankNode(s) => s.into(),
  490|       |                Term::Literal(_) => {
  491|     69|                    return Err(TermParseError::msg(
  492|     69|                        "Literals are not allowed in subject position",
  493|     69|                    ));
  494|       |                }
  495|       |                #[cfg(feature = "rdf-star")]
  496|    142|                Term::Triple(s) => Subject::Triple(s),
  497|       |            },
  498|  33.7k|            predicate,
  499|  33.7k|            object,
  500|  33.7k|        },
  501|  33.7k|        remain,
  502|       |    ))
  503|   240k|}
_RNvNtCs4x4bMiUCp0I_5oxrdf6parser14read_hexa_char:
  505|  1.84k|fn read_hexa_char(input: &mut Chars<'_>, len: usize) -> Result<char, TermParseError> {
  506|  1.84k|    let mut value = 0;
  507|  1.84k|    for _ in 0..len {
  508|  9.83k|        if let Some(c) = input.next() {
  509|  9.79k|            value = value * 16
  510|  9.79k|                + match c {
  511|  9.77k|                    '0'..='9' => u32::from(c) - u32::from('0'),
  512|    799|                    'a'..='f' => u32::from(c) - u32::from('a') + 10,
  513|  4.85k|                    'A'..='F' => u32::from(c) - u32::from('A') + 10,
  514|       |                    _ => {
  515|     62|                        return Err(TermParseError::msg(
  516|     62|                            "Unexpected character in a unicode escape",
  517|     62|                        ));
  518|       |                    }
  519|       |                }
  520|       |        } else {
  521|     40|            return Err(TermParseError::msg("Unexpected literal string end"));
  522|       |        }
  523|       |    }
  524|  1.74k|    char::from_u32(value).ok_or_else(|| TermParseError::msg("Invalid encoded unicode code point"))
  525|  1.84k|}
_RNvMs5_NtCs4x4bMiUCp0I_5oxrdf6parserNtB5_14TermParseError3msg:
  557|  11.6k|    pub(crate) fn msg(msg: &'static str) -> Self {
  558|  11.6k|        Self(TermParseErrorKind::Msg(msg))
  559|  11.6k|    }
_RNvXs3_NtCs4x4bMiUCp0I_5oxrdf6parserNtNtB7_6triple4QuadNtNtNtCshZc3FwCJ069_4core3str6traits7FromStr8from_str:
  187|  47.7k|    fn from_str(s: &str) -> Result<Self, Self::Err> {
  188|  47.7k|        let (triple, left) = read_triple(s, 0)?;
  189|  32.6k|        if matches!(left.trim(), "" | ".") {
  190|  22.6k|            return Ok(triple.in_graph(GraphName::DefaultGraph));
  191|  10.0k|        }
  192|  10.0k|        let (graph_name, left) = read_term(left, 0)?;
  193|  8.72k|        if !matches!(left.trim(), "" | ".") {
  194|    425|            return Err(Self::Err::msg("Invalid triple serialization"));
  195|  8.30k|        }
  196|  8.30k|        Ok(triple.in_graph(match graph_name {
  197|  7.37k|            Term::NamedNode(graph_name) => GraphName::from(graph_name),
  198|    874|            Term::BlankNode(graph_name) => GraphName::from(graph_name),
  199|       |            Term::Literal(_) => {
  200|     52|                return Err(TermParseError::msg(
  201|     52|                    "Literals are not allowed in graph name position",
  202|     52|                ));
  203|       |            }
  204|       |            #[cfg(feature = "rdf-star")]
  205|       |            Term::Triple(_) => {
  206|      6|                return Err(TermParseError::msg(
  207|      6|                    "Triple terms are not allowed in graph name position",
  208|      6|                ));
  209|       |            }
  210|       |        }))
  211|  47.7k|    }
_RNCNvNtCs4x4bMiUCp0I_5oxrdf6parser15read_named_node0B5_:
  249|    577|            .ok_or_else(|| TermParseError::msg("Named node serialization should end with a >"))?;
_RNCNvNtCs4x4bMiUCp0I_5oxrdf6parser15read_named_nodes_0B5_:
  274|  4.10k|        let term = NamedNode::new(value.as_ref()).map_err(|error| {
  275|  4.10k|            TermParseError(TermParseErrorKind::Iri {
  276|  4.10k|                value: value.into_owned(),
  277|  4.10k|                error,
  278|  4.10k|            })
  279|  4.10k|        })?;
_RNCNvNtCs4x4bMiUCp0I_5oxrdf6parser15read_blank_node0B5_:
  292|   195k|            .find(|v: char| {
  293|   195k|                v.is_whitespace()
  294|   195k|                    || matches!(v, '<' | '?' | '$' | '"' | '\'' | '>' | '@' | '^' | ':')
  295|   195k|            })
_RNCNvNtCs4x4bMiUCp0I_5oxrdf6parser15read_blank_nodes_0B5_:
  305|    832|        let term = BlankNode::new(value).map_err(|error| {
  306|    832|            TermParseError(TermParseErrorKind::BlankNode {
  307|    832|                value: value.to_owned(),
  308|    832|                error,
  309|    832|            })
  310|    832|        })?;
_RNCNvNtCs4x4bMiUCp0I_5oxrdf6parser12read_literal0B5_:
  330|   389k|                            .find(|v| !matches!(v, 'a'..='z' | 'A'..='Z' | '-'))
_RNCNvNtCs4x4bMiUCp0I_5oxrdf6parser12read_literals_0B5_:
  335|    282|                                |error| {
  336|    282|                                    TermParseError(TermParseErrorKind::LanguageTag {
  337|    282|                                        value: language.to_owned(),
  338|    282|                                        error,
  339|    282|                                    })
  340|    282|                                },
_RNCNvNtCs4x4bMiUCp0I_5oxrdf6parser14read_hexa_char0B5_:
  524|     10|    char::from_u32(value).ok_or_else(|| TermParseError::msg("Invalid encoded unicode code point"))

_RNvMs1c_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB6_9GraphName6as_refCsdwlLKB38Swz_6nquads:
  968|   173k|    pub fn as_ref(&self) -> GraphNameRef<'_> {
  969|   173k|        match self {
  970|  17.9k|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.as_ref()),
  971|  12.1k|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.as_ref()),
  972|   143k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  973|       |        }
  974|   173k|    }
_RNvMs1k_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB6_12GraphNameRef16is_default_graphCsdwlLKB38Swz_6nquads:
 1052|   173k|    pub fn is_default_graph(&self) -> bool {
 1053|   173k|        matches!(self, Self::DefaultGraph)
 1054|   173k|    }
_RNvMs1u_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB6_4Quad6as_refCsdwlLKB38Swz_6nquads:
 1186|   173k|    pub fn as_ref(&self) -> QuadRef<'_> {
 1187|   173k|        QuadRef {
 1188|   173k|            subject: self.subject.as_ref(),
 1189|   173k|            predicate: self.predicate.as_ref(),
 1190|   173k|            object: self.object.as_ref(),
 1191|   173k|            graph_name: self.graph_name.as_ref(),
 1192|   173k|        }
 1193|   173k|    }
_RNvMsc_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB5_7Subject6as_refCsdwlLKB38Swz_6nquads:
  181|   173k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|   173k|        match self {
  183|   157k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|  13.3k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|  3.34k|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|   173k|    }
_RNvMsy_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB5_4Term6as_refCsdwlLKB38Swz_6nquads:
  418|   173k|    pub fn as_ref(&self) -> TermRef<'_> {
  419|   173k|        match self {
  420|  32.0k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  421|  51.9k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  422|  87.6k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  423|       |            #[cfg(feature = "rdf-star")]
  424|  2.23k|            Self::Triple(triple) => TermRef::Triple(triple),
  425|       |        }
  426|   173k|    }
_RNvXs1A_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB6_7QuadRefINtNtCshZc3FwCJ069_4core7convert4FromRNtB6_4QuadE4fromCsdwlLKB38Swz_6nquads:
 1302|   173k|    fn from(quad: &'a Quad) -> Self {
 1303|   173k|        quad.as_ref()
 1304|   173k|    }
_RNvXs1l_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB6_12GraphNameRefNtNtCshZc3FwCJ069_4core3fmt7Display3fmtCsdwlLKB38Swz_6nquads:
 1068|  30.1k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1069|  30.1k|        match self {
 1070|  17.9k|            Self::NamedNode(node) => node.fmt(f),
 1071|  12.1k|            Self::BlankNode(node) => node.fmt(f),
 1072|      0|            Self::DefaultGraph => f.write_str("DEFAULT"),
 1073|       |        }
 1074|  30.1k|    }
_RNvXs1y_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB6_7QuadRefNtNtCshZc3FwCJ069_4core3fmt7Display3fmtCsdwlLKB38Swz_6nquads:
 1276|   173k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1277|   173k|        if self.graph_name.is_default_graph() {
 1278|   143k|            write!(f, "{} {} {}", self.subject, self.predicate, self.object)
 1279|       |        } else {
 1280|  30.1k|            write!(
 1281|  30.1k|                f,
 1282|  30.1k|                "{} {} {} {}",
 1283|  30.1k|                self.subject, self.predicate, self.object, self.graph_name
 1284|  30.1k|            )
 1285|       |        }
 1286|   173k|    }
_RNvXsS_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB5_7TermRefNtNtCshZc3FwCJ069_4core3fmt7Display3fmtCsdwlLKB38Swz_6nquads:
  652|   173k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  653|   173k|        match self {
  654|  32.0k|            Self::NamedNode(node) => node.fmt(f),
  655|  51.9k|            Self::BlankNode(node) => node.fmt(f),
  656|  87.6k|            Self::Literal(literal) => literal.fmt(f),
  657|       |            #[cfg(feature = "rdf-star")]
  658|  2.23k|            Self::Triple(triple) => {
  659|  2.23k|                write!(f, "<<{triple}>>")
  660|       |            }
  661|       |        }
  662|   173k|    }
_RNvXso_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB5_10SubjectRefNtNtCshZc3FwCJ069_4core3fmt7Display3fmtCsdwlLKB38Swz_6nquads:
  306|   173k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  307|   173k|        match self {
  308|   157k|            Self::NamedNode(node) => node.fmt(f),
  309|  13.3k|            Self::BlankNode(node) => node.fmt(f),
  310|       |            #[cfg(feature = "rdf-star")]
  311|  3.34k|            Self::Triple(triple) => write!(f, "<<{triple}>>"),
  312|       |        }
  313|   173k|    }
_RNvXs1e_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB6_9GraphNameINtNtCshZc3FwCJ069_4core7convert4FromNtNtB8_10named_node9NamedNodeE4fromCs8X3sjsXBtJI_5oxttl:
  986|  53.9k|    fn from(node: NamedNode) -> Self {
  987|  53.9k|        Self::NamedNode(node)
  988|  53.9k|    }
_RNvXs1g_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB6_9GraphNameINtNtCshZc3FwCJ069_4core7convert4FromNtNtB8_10blank_node9BlankNodeE4fromCs8X3sjsXBtJI_5oxttl:
 1000|  36.5k|    fn from(node: BlankNode) -> Self {
 1001|  36.5k|        Self::BlankNode(node)
 1002|  36.5k|    }
_RINvMs16_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB7_6Triple8in_graphNtB7_9GraphNameEB9_:
  827|  30.8k|    pub fn in_graph(self, graph_name: impl Into<GraphName>) -> Quad {
  828|  30.8k|        Quad {
  829|  30.8k|            subject: self.subject,
  830|  30.8k|            predicate: self.predicate,
  831|  30.8k|            object: self.object,
  832|  30.8k|            graph_name: graph_name.into(),
  833|  30.8k|        }
  834|  30.8k|    }
_RNvMsc_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB5_7Subject6as_refB7_:
  181|  5.85k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  5.85k|        match self {
  183|  4.46k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|  1.26k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|    130|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  5.85k|    }
_RNvXse_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB5_7SubjectINtNtCshZc3FwCJ069_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|  1.72M|    fn from(node: NamedNode) -> Self {
  201|  1.72M|        Self::NamedNode(node)
  202|  1.72M|    }
_RNvXsg_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB5_7SubjectINtNtCshZc3FwCJ069_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|   224k|    fn from(node: BlankNode) -> Self {
  215|   224k|        Self::BlankNode(node)
  216|   224k|    }
_RNvXsi_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB5_7SubjectINtNtCshZc3FwCJ069_4core7convert4FromNtB5_6TripleE4fromB7_:
  229|  50.1k|    fn from(node: Triple) -> Self {
  230|  50.1k|        Self::Triple(Box::new(node))
  231|  50.1k|    }
_RNvXso_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB5_10SubjectRefNtNtCshZc3FwCJ069_4core3fmt7Display3fmtB7_:
  306|  5.85k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  307|  5.85k|        match self {
  308|  4.46k|            Self::NamedNode(node) => node.fmt(f),
  309|  1.26k|            Self::BlankNode(node) => node.fmt(f),
  310|       |            #[cfg(feature = "rdf-star")]
  311|    130|            Self::Triple(triple) => write!(f, "<<{triple}>>"),
  312|       |        }
  313|  5.85k|    }
_RNvMsy_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB5_4Term6as_refB7_:
  418|  5.85k|    pub fn as_ref(&self) -> TermRef<'_> {
  419|  5.85k|        match self {
  420|    899|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  421|  1.99k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  422|  2.82k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  423|       |            #[cfg(feature = "rdf-star")]
  424|    142|            Self::Triple(triple) => TermRef::Triple(triple),
  425|       |        }
  426|  5.85k|    }
_RNvXsA_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB5_4TermINtNtCshZc3FwCJ069_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  438|   160k|    fn from(node: NamedNode) -> Self {
  439|   160k|        Self::NamedNode(node)
  440|   160k|    }
_RNvXsC_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB5_4TermINtNtCshZc3FwCJ069_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  452|   201k|    fn from(node: BlankNode) -> Self {
  453|   201k|        Self::BlankNode(node)
  454|   201k|    }
_RNvXsE_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB5_4TermINtNtCshZc3FwCJ069_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  466|   322k|    fn from(literal: Literal) -> Self {
  467|   322k|        Self::Literal(literal)
  468|   322k|    }
_RNvXsG_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB5_4TermINtNtCshZc3FwCJ069_4core7convert4FromNtB5_6TripleE4fromB7_:
  481|  9.64k|    fn from(triple: Triple) -> Self {
  482|  9.64k|        Self::Triple(Box::new(triple))
  483|  9.64k|    }
_RNvXsS_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB5_7TermRefNtNtCshZc3FwCJ069_4core3fmt7Display3fmtB7_:
  652|  5.85k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  653|  5.85k|        match self {
  654|    899|            Self::NamedNode(node) => node.fmt(f),
  655|  1.99k|            Self::BlankNode(node) => node.fmt(f),
  656|  2.82k|            Self::Literal(literal) => literal.fmt(f),
  657|       |            #[cfg(feature = "rdf-star")]
  658|    142|            Self::Triple(triple) => {
  659|    142|                write!(f, "<<{triple}>>")
  660|       |            }
  661|       |        }
  662|  5.85k|    }
_RNvMs16_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB6_6Triple6as_refB8_:
  837|  5.85k|    pub fn as_ref(&self) -> TripleRef<'_> {
  838|  5.85k|        TripleRef {
  839|  5.85k|            subject: self.subject.as_ref(),
  840|  5.85k|            predicate: self.predicate.as_ref(),
  841|  5.85k|            object: self.object.as_ref(),
  842|  5.85k|        }
  843|  5.85k|    }
_RNvXs17_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB6_6TripleNtNtCshZc3FwCJ069_4core3fmt7Display3fmtB8_:
  848|  5.85k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  849|  5.85k|        self.as_ref().fmt(f)
  850|  5.85k|    }
_RNvXs19_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB6_9TripleRefNtNtCshZc3FwCJ069_4core3fmt7Display3fmtB8_:
  921|  5.85k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  922|  5.85k|        write!(f, "{} {} {}", self.subject, self.predicate, self.object)
  923|  5.85k|    }
_RNvXs1e_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB6_9GraphNameINtNtCshZc3FwCJ069_4core7convert4FromNtNtB8_10named_node9NamedNodeE4fromB8_:
  986|  7.37k|    fn from(node: NamedNode) -> Self {
  987|  7.37k|        Self::NamedNode(node)
  988|  7.37k|    }
_RNvXs1g_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB6_9GraphNameINtNtCshZc3FwCJ069_4core7convert4FromNtNtB8_10blank_node9BlankNodeE4fromB8_:
 1000|    874|    fn from(node: BlankNode) -> Self {
 1001|    874|        Self::BlankNode(node)
 1002|    874|    }

_RNCNvMs_NtCs8X3sjsXBtJI_5oxttl5lexerNtB6_7N3Lexer9parse_iris_0B8_:
  232|   675k|                    .map_err(|e| (position, e.to_string()))?
_RNCNvMs_NtCs8X3sjsXBtJI_5oxttl5lexerNtB6_7N3Lexer26recognize_pname_or_keyword0B8_:
  321|   269k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  322|   269k|                prefix: pn_prefix,
  323|   269k|                local,
  324|   269k|                might_be_invalid_iri,
  325|   269k|            }),
_RNCNvMs_NtCs8X3sjsXBtJI_5oxttl5lexerNtB6_7N3Lexer18recognize_variable0B8_:
  338|   108k|            result.and_then(|(name, _)| {
  339|   108k|                if name.is_empty() {
  340|  49.8k|                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  341|       |                } else {
  342|  58.6k|                    Ok(N3Token::Variable(name))
  343|       |                }
  344|   108k|            }),
_RNCNvMs_NtCs8X3sjsXBtJI_5oxttl5lexerNtB6_7N3Lexer14parse_lang_tag0B8_:
  583|   110k|                .map_err(|e| (position.clone(), e.to_string()))?
_RNCNvMs_NtCs8X3sjsXBtJI_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_char0B8_:
  837|  3.16k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  838|  3.16k|            (
  839|  3.16k|                position..position + len + 2,
  840|  3.16k|                format!(
  841|  3.16k|                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  842|  3.16k|                ),
  843|  3.16k|            )
  844|  3.16k|        })?;
_RNCNvMs_NtCs8X3sjsXBtJI_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_chars_0B8_:
  845|  2.63k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  846|  2.63k|            (
  847|  2.63k|                position..position + len +2,
  848|  2.63k|                format!(
  849|  2.63k|                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  850|  2.63k|                ),
  851|  2.63k|            )
  852|  2.63k|        })?;
_RNCNvMs_NtCs8X3sjsXBtJI_5oxttl5lexerNtB6_7N3Lexer22recognize_unicode_char0B8_:
  992|  2.29M|                .map(|c| (c, bytes_needed + 1))
_RNCNvNtCs8X3sjsXBtJI_5oxttl5lexer13str_from_utf80B5_:
 1064|  24.8k|    str::from_utf8(data).map_err(|e| {
 1065|  24.8k|        (
 1066|  24.8k|            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
 1067|  24.8k|            format!("Invalid UTF-8: {e}"),
 1068|  24.8k|        )
 1069|  24.8k|            .into()
 1070|  24.8k|    })
_RNCNvNtCs8X3sjsXBtJI_5oxttl5lexer16string_from_utf80B5_:
 1074|   123k|    String::from_utf8(data).map_err(|e| {
 1075|   123k|        (
 1076|   123k|            range.start + e.utf8_error().valid_up_to()
 1077|   123k|                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
 1078|   123k|            format!("Invalid UTF-8: {e}"),
 1079|   123k|        )
 1080|   123k|            .into()
 1081|   123k|    })
_RNvXNtCs8X3sjsXBtJI_5oxttl5lexerNtB2_7N3LexerNtNtNtB4_7toolkit5lexer15TokenRecognizer20recognize_next_token:
   57|  22.4M|    fn recognize_next_token<'a>(
   58|  22.4M|        &mut self,
   59|  22.4M|        data: &'a [u8],
   60|  22.4M|        is_ending: bool,
   61|  22.4M|        options: &N3LexerOptions,
   62|  22.4M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
   63|  22.4M|        match *data.first()? {
   64|  8.12M|            b'<' => match *data.get(1)? {
   65|   929k|                b'<' => Some((2, Ok(N3Token::Punctuation("<<")))),
   66|  4.63k|                b'=' if self.mode == N3LexerMode::N3 => {
   67|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   68|      0|                        Some(if let Ok(result) = result {
   69|      0|                            (consumed, Ok(result))
   70|       |                        } else {
   71|      0|                            (2, Ok(N3Token::Punctuation("<=")))
   72|       |                        })
   73|      0|                    } else if is_ending {
   74|      0|                        Some((2, Ok(N3Token::Punctuation("<="))))
   75|       |                    } else {
   76|      0|                        None
   77|       |                    }
   78|       |                }
   79|  12.6k|                b'-' if self.mode == N3LexerMode::N3 => {
   80|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   81|      0|                        Some(if let Ok(result) = result {
   82|      0|                            (consumed, Ok(result))
   83|       |                        } else {
   84|      0|                            (2, Ok(N3Token::Punctuation("<-")))
   85|       |                        })
   86|      0|                    } else if is_ending {
   87|      0|                        Some((2, Ok(N3Token::Punctuation("<-"))))
   88|       |                    } else {
   89|      0|                        None
   90|       |                    }
   91|       |                }
   92|  7.09M|                _ => self.recognize_iri(data, options),
   93|       |            },
   94|       |            b'>' => {
   95|   787k|                if *data.get(1)? == b'>' {
   96|   294k|                    Some((2, Ok(N3Token::Punctuation(">>"))))
   97|       |                } else {
   98|   443k|                    Some((1, Ok(N3Token::Punctuation(">"))))
   99|       |                }
  100|       |            }
  101|  1.72M|            b'_' => match data.get(1)? {
  102|  1.53M|                b':' => Self::recognize_blank_node_label(data),
  103|   153k|                c => Some((
  104|   153k|                    1,
  105|   153k|                    Err((0, format!("Unexpected character '{}'", char::from(*c))).into()),
  106|   153k|                )),
  107|       |            },
  108|       |            b'"' => {
  109|  1.07M|                if self.mode != N3LexerMode::NTriples
  110|      0|                    && *data.get(1)? == b'"'
  111|      0|                    && *data.get(2)? == b'"'
  112|       |                {
  113|      0|                    self.recognize_long_string(data, b'"')
  114|       |                } else {
  115|  1.07M|                    self.recognize_string(data, b'"')
  116|       |                }
  117|       |            }
  118|  36.3k|            b'\'' if self.mode != N3LexerMode::NTriples => {
  119|      0|                if *data.get(1)? == b'\'' && *data.get(2)? == b'\'' {
  120|      0|                    self.recognize_long_string(data, b'\'')
  121|       |                } else {
  122|      0|                    self.recognize_string(data, b'\'')
  123|       |                }
  124|       |            }
  125|   803k|            b'@' => self.recognize_lang_tag(data),
  126|  1.86M|            b'.' => match data.get(1) {
  127|   609k|                Some(b'0'..=b'9') => Self::recognize_number(data),
  128|  1.79M|                Some(_) => Some((1, Ok(N3Token::Punctuation(".")))),
  129|  43.0k|                None => is_ending.then_some((1, Ok(N3Token::Punctuation(".")))),
  130|       |            },
  131|       |            b'^' => {
  132|   269k|                if *data.get(1)? == b'^' {
  133|   163k|                    Some((2, Ok(N3Token::Punctuation("^^"))))
  134|       |                } else {
  135|  96.7k|                    Some((1, Ok(N3Token::Punctuation("^"))))
  136|       |                }
  137|       |            }
  138|  53.8k|            b'(' => Some((1, Ok(N3Token::Punctuation("(")))),
  139|  54.7k|            b')' => Some((1, Ok(N3Token::Punctuation(")")))),
  140|  76.9k|            b'[' => Some((1, Ok(N3Token::Punctuation("[")))),
  141|  72.9k|            b']' => Some((1, Ok(N3Token::Punctuation("]")))),
  142|       |            b'{' => {
  143|  32.8k|                if *data.get(1)? == b'|' {
  144|  3.22k|                    Some((2, Ok(N3Token::Punctuation("{|"))))
  145|       |                } else {
  146|  27.4k|                    Some((1, Ok(N3Token::Punctuation("{"))))
  147|       |                }
  148|       |            }
  149|  70.3k|            b'}' => Some((1, Ok(N3Token::Punctuation("}")))),
  150|   103k|            b',' => Some((1, Ok(N3Token::Punctuation(",")))),
  151|  31.5k|            b';' => Some((1, Ok(N3Token::Punctuation(";")))),
  152|  38.8k|            b'!' => Some((1, Ok(N3Token::Punctuation("!")))),
  153|       |            b'|' => {
  154|  14.2k|                if *data.get(1)? == b'}' {
  155|  1.12k|                    Some((2, Ok(N3Token::Punctuation("|}"))))
  156|       |                } else {
  157|  10.3k|                    Some((1, Ok(N3Token::Punctuation("|"))))
  158|       |                }
  159|       |            }
  160|       |            b'=' => {
  161|  55.2k|                if *data.get(1)? == b'>' {
  162|  11.6k|                    Some((2, Ok(N3Token::Punctuation("=>"))))
  163|       |                } else {
  164|  37.9k|                    Some((1, Ok(N3Token::Punctuation("="))))
  165|       |                }
  166|       |            }
  167|  3.40M|            b'0'..=b'9' | b'+' | b'-' => Self::recognize_number(data),
  168|   179k|            b'?' => self.recognize_variable(data, is_ending),
  169|  5.31M|            _ => self.recognize_pname_or_keyword(data, is_ending),
  170|       |        }
  171|  22.1M|    }
_RNvMs_NtCs8X3sjsXBtJI_5oxttl5lexerNtB4_7N3Lexer3new:
  175|   156k|    pub fn new(mode: N3LexerMode, unchecked: bool) -> Self {
  176|   156k|        Self { mode, unchecked }
  177|   156k|    }
_RNvMs_NtCs8X3sjsXBtJI_5oxttl5lexerNtB4_7N3Lexer13recognize_iri:
  179|  7.09M|    fn recognize_iri(
  180|  7.09M|        &self,
  181|  7.09M|        data: &[u8],
  182|  7.09M|        options: &N3LexerOptions,
  183|  7.09M|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  184|  7.09M|        // [18] IRIREF  ::=  '<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
  185|  7.09M|        let mut string = Vec::new();
  186|  7.09M|        let mut i = 1;
  187|       |        loop {
  188|  7.12M|            let end = memchr2(b'>', b'\\', &data[i..])?;
  189|  3.56M|            string.extend_from_slice(&data[i..i + end]);
  190|  3.56M|            i += end;
  191|  3.56M|            match data[i] {
  192|       |                b'>' => {
  193|  3.41M|                    return Some((i + 1, self.parse_iri(string, 0..i + 1, options)));
  194|       |                }
  195|       |                b'\\' => {
  196|   153k|                    let (additional, c) = self.recognize_escape(&data[i..], i, false)?;
  197|  95.4k|                    i += additional + 1;
  198|  95.4k|                    match c {
  199|  28.9k|                        Ok(c) => {
  200|  28.9k|                            let mut buf = [0; 4];
  201|  28.9k|                            string.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  202|  28.9k|                        }
  203|  66.4k|                        Err(e) => return Some((i, Err(e))),
  204|       |                    }
  205|       |                }
  206|      0|                _ => unreachable!(),
  207|       |            }
  208|       |        }
  209|  7.09M|    }
_RNvMs_NtCs8X3sjsXBtJI_5oxttl5lexerNtB4_7N3Lexer9parse_iri:
  211|  3.41M|    fn parse_iri(
  212|  3.41M|        &self,
  213|  3.41M|        iri: Vec<u8>,
  214|  3.41M|        position: Range<usize>,
  215|  3.41M|        options: &N3LexerOptions,
  216|  3.41M|    ) -> Result<N3Token<'static>, TokenRecognizerError> {
  217|  3.41M|        let iri = string_from_utf8(iri, position.clone())?;
  218|       |        Ok(N3Token::IriRef(
  219|  3.29M|            if let Some(base_iri) = options.base_iri.as_ref() {
  220|      0|                if self.unchecked {
  221|      0|                    base_iri.resolve_unchecked(&iri)
  222|       |                } else {
  223|      0|                    base_iri
  224|      0|                        .resolve(&iri)
  225|      0|                        .map_err(|e| (position, e.to_string()))?
  226|       |                }
  227|      0|                .into_inner()
  228|  3.29M|            } else if self.unchecked {
  229|    615|                iri
  230|       |            } else {
  231|  3.29M|                Iri::parse(iri)
  232|  3.29M|                    .map_err(|e| (position, e.to_string()))?
  233|  2.61M|                    .into_inner()
  234|       |            },
  235|       |        ))
  236|  3.41M|    }
_RNvMs_NtCs8X3sjsXBtJI_5oxttl5lexerNtB4_7N3Lexer26recognize_pname_or_keyword:
  238|  5.31M|    fn recognize_pname_or_keyword<'a>(
  239|  5.31M|        &self,
  240|  5.31M|        data: &'a [u8],
  241|  5.31M|        is_ending: bool,
  242|  5.31M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  243|  5.31M|        // [139s]  PNAME_NS   ::=  PN_PREFIX? ':'
  244|  5.31M|        // [140s]  PNAME_LN   ::=  PNAME_NS PN_LOCAL
  245|  5.31M|        // [167s]  PN_PREFIX  ::=  PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
  246|  5.31M|        let mut i = 0;
  247|       |        loop {
  248|  8.85M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  249|  8.57M|                match r {
  250|  7.11M|                    Ok((c, consumed)) => {
  251|  7.11M|                        if c == ':' {
  252|   580k|                            i += consumed;
  253|   580k|                            break;
  254|  6.53M|                        } else if i == 0 {
  255|  3.55M|                            if !Self::is_possible_pn_chars_base(c) {
  256|  2.33M|                                return Some((
  257|  2.33M|                                    consumed,
  258|  2.33M|                                    Err((
  259|  2.33M|                                        0..consumed,
  260|  2.33M|                                        format!(
  261|  2.33M|                                            "'{c}' is not allowed at the beginning of a prefix name"
  262|  2.33M|                                        ),
  263|  2.33M|                                    )
  264|  2.33M|                                        .into()),
  265|  2.33M|                                ));
  266|  1.22M|                            }
  267|  1.22M|                            i += consumed;
  268|  2.97M|                        } else if Self::is_possible_pn_chars(c) || c == '.' {
  269|  2.31M|                            i += consumed;
  270|  2.31M|                        } else {
  271|   820k|                            while data[..i].ends_with(b".") {
  272|   164k|                                i -= 1;
  273|   164k|                            }
  274|   656k|                            return Some((
  275|   656k|                                i,
  276|   656k|                                str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  277|   656k|                            ));
  278|       |                        }
  279|       |                    }
  280|  1.45M|                    Err(e) => return Some((e.location.end, Err(e))),
  281|       |                }
  282|   286k|            } else if is_ending {
  283|  32.5k|                while data[..i].ends_with(b".") {
  284|  19.3k|                    i -= 1;
  285|  19.3k|                }
  286|  13.2k|                return Some(if i == 0 {
  287|  2.87k|                    (
  288|  2.87k|                        1,
  289|  2.87k|                        Err((0..1, format!("Unexpected byte {}", data[0])).into()),
  290|  2.87k|                    )
  291|       |                } else {
  292|  10.4k|                    (
  293|  10.4k|                        i,
  294|  10.4k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  295|  10.4k|                    )
  296|       |                });
  297|       |            } else {
  298|   272k|                return None;
  299|       |            }
  300|       |        }
  301|   580k|        let pn_prefix = match str_from_utf8(&data[..i - 1], 0..i - 1) {
  302|   580k|            Ok(pn_prefix) => pn_prefix,
  303|      0|            Err(e) => return Some((i, Err(e))),
  304|       |        };
  305|   580k|        if pn_prefix.ends_with('.') {
  306|  4.27k|            return Some((
  307|  4.27k|                i,
  308|  4.27k|                Err((
  309|  4.27k|                    0..i,
  310|  4.27k|                    format!(
  311|  4.27k|                        "'{pn_prefix}' is not a valid prefix: prefixes are not allowed to end with '.'"),
  312|  4.27k|                )
  313|  4.27k|                    .into()),
  314|  4.27k|            ));
  315|   576k|        }
  316|       |
  317|   304k|        let (consumed, pn_local_result) =
  318|   576k|            self.recognize_optional_pn_local(&data[i..], is_ending)?;
  319|   304k|        Some((
  320|   304k|            consumed + i,
  321|   304k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  322|       |                prefix: pn_prefix,
  323|       |                local,
  324|       |                might_be_invalid_iri,
  325|   304k|            }),
  326|   304k|        ))
  327|  5.31M|    }
_RNvMs_NtCs8X3sjsXBtJI_5oxttl5lexerNtB4_7N3Lexer18recognize_variable:
  329|   179k|    fn recognize_variable<'a>(
  330|   179k|        &self,
  331|   179k|        data: &'a [u8],
  332|   179k|        is_ending: bool,
  333|   179k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  334|       |        // [36]  QUICK_VAR_NAME  ::=  "?" PN_LOCAL
  335|   179k|        let (consumed, result) = self.recognize_optional_pn_local(&data[1..], is_ending)?;
  336|   131k|        Some((
  337|   131k|            consumed + 1,
  338|   131k|            result.and_then(|(name, _)| {
  339|       |                if name.is_empty() {
  340|       |                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  341|       |                } else {
  342|       |                    Ok(N3Token::Variable(name))
  343|       |                }
  344|   131k|            }),
  345|   131k|        ))
  346|   179k|    }
_RNvMs_NtCs8X3sjsXBtJI_5oxttl5lexerNtB4_7N3Lexer27recognize_optional_pn_local:
  348|   756k|    fn recognize_optional_pn_local<'a>(
  349|   756k|        &self,
  350|   756k|        data: &'a [u8],
  351|   756k|        is_ending: bool,
  352|   756k|    ) -> Option<(usize, Result<(Cow<'a, str>, bool), TokenRecognizerError>)> {
  353|   756k|        // [168s]  PN_LOCAL  ::=  (PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
  354|   756k|        let mut i = 0;
  355|   756k|        let mut buffer = None; // Buffer if there are some escaped characters
  356|   756k|        let mut position_that_is_already_in_buffer = 0;
  357|   756k|        let mut might_be_invalid_iri = false;
  358|   756k|        let mut ends_with_unescaped_dot = 0;
  359|       |        loop {
  360|  2.36M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  361|  2.05M|                match r {
  362|  2.01M|                    Ok((c, consumed)) => {
  363|  2.01M|                        if c == '%' {
  364|  23.3k|                            i += 1;
  365|  23.3k|                            let a = char::from(*data.get(i)?);
  366|  16.6k|                            i += 1;
  367|  16.6k|                            let b = char::from(*data.get(i)?);
  368|  13.5k|                            if !a.is_ascii_hexdigit() || !b.is_ascii_hexdigit() {
  369|  9.14k|                                return Some((i + 1, Err((
  370|  9.14k|                                    i - 2..=i, format!("escapes in IRIs should be % followed by two hexadecimal characters, found '%{a}{b}'")
  371|  9.14k|                                ).into())));
  372|  4.39k|                            }
  373|  4.39k|                            i += 1;
  374|  4.39k|                            ends_with_unescaped_dot = 0;
  375|  1.99M|                        } else if c == '\\' {
  376|   172k|                            i += 1;
  377|   172k|                            let a = char::from(*data.get(i)?);
  378|   165k|                            if self.unchecked
  379|  85.2k|                                || matches!(
  380|   165k|                                    a,
  381|       |                                    '_' | '~'
  382|       |                                        | '.'
  383|       |                                        | '-'
  384|       |                                        | '!'
  385|       |                                        | '$'
  386|       |                                        | '&'
  387|       |                                        | '\''
  388|       |                                        | '('
  389|       |                                        | ')'
  390|       |                                        | '*'
  391|       |                                        | '+'
  392|       |                                        | ','
  393|       |                                        | ';'
  394|       |                                        | '='
  395|       |                                )
  396|  80.4k|                            {
  397|  80.4k|                                // ok to escape
  398|  85.2k|                            } else if matches!(a, '/' | '?' | '#' | '@' | '%') {
  399|  72.3k|                                // ok to escape but requires IRI validation
  400|  72.3k|                                might_be_invalid_iri = true;
  401|  72.3k|                            } else {
  402|  12.9k|                                return Some((i + 1, Err((
  403|  12.9k|                                    i..=i, format!("The character that are allowed to be escaped in IRIs are _~.-!$&'()*+,;=/?#@%, found '{a}'")
  404|  12.9k|                                ).into())));
  405|       |                            }
  406|   152k|                            let buffer = buffer.get_or_insert_with(String::new);
  407|   152k|                            // We add the missing bytes
  408|   152k|                            if i - position_that_is_already_in_buffer > 1 {
  409|  43.3k|                                buffer.push_str(
  410|  43.3k|                                    match str_from_utf8(
  411|  43.3k|                                        &data[position_that_is_already_in_buffer..i - 1],
  412|  43.3k|                                        position_that_is_already_in_buffer..i - 1,
  413|  43.3k|                                    ) {
  414|  43.3k|                                        Ok(data) => data,
  415|      0|                                        Err(e) => return Some((i, Err(e))),
  416|       |                                    },
  417|       |                                )
  418|   109k|                            }
  419|   152k|                            buffer.push(a);
  420|   152k|                            i += 1;
  421|   152k|                            position_that_is_already_in_buffer = i;
  422|   152k|                            ends_with_unescaped_dot = 0;
  423|  1.81M|                        } else if i == 0 {
  424|   499k|                            if !(Self::is_possible_pn_chars_u(c) || c == ':' || c.is_ascii_digit())
  425|       |                            {
  426|   190k|                                return Some((0, Ok((Cow::Borrowed(""), false))));
  427|   308k|                            }
  428|   308k|                            if !self.unchecked {
  429|       |                                might_be_invalid_iri |=
  430|   308k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  431|   306k|                                        || c == ':';
  432|      0|                            }
  433|   308k|                            i += consumed;
  434|  1.32M|                        } else if Self::is_possible_pn_chars(c) || c == ':' {
  435|   995k|                            if !self.unchecked {
  436|       |                                might_be_invalid_iri |=
  437|   995k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  438|   993k|                                        || c == ':';
  439|      0|                            }
  440|   995k|                            i += consumed;
  441|   995k|                            ends_with_unescaped_dot = 0;
  442|   324k|                        } else if c == '.' {
  443|   142k|                            i += consumed;
  444|   142k|                            ends_with_unescaped_dot += 1;
  445|   142k|                        } else {
  446|   182k|                            let buffer = if let Some(mut buffer) = buffer {
  447|  46.4k|                                buffer.push_str(
  448|  46.4k|                                    match str_from_utf8(
  449|  46.4k|                                        &data[position_that_is_already_in_buffer..i],
  450|  46.4k|                                        position_that_is_already_in_buffer..i,
  451|  46.4k|                                    ) {
  452|  46.4k|                                        Ok(data) => data,
  453|      0|                                        Err(e) => return Some((i, Err(e))),
  454|       |                                    },
  455|       |                                );
  456|       |                                // We do not include the last dots
  457|  46.4k|                                for _ in 0..ends_with_unescaped_dot {
  458|  32.9k|                                    buffer.pop();
  459|  32.9k|                                }
  460|  46.4k|                                i -= ends_with_unescaped_dot;
  461|  46.4k|                                Cow::Owned(buffer)
  462|       |                            } else {
  463|   135k|                                let mut data = match str_from_utf8(&data[..i], 0..i) {
  464|   135k|                                    Ok(data) => data,
  465|      0|                                    Err(e) => return Some((i, Err(e))),
  466|       |                                };
  467|       |                                // We do not include the last dots
  468|   135k|                                data = &data[..data.len() - ends_with_unescaped_dot];
  469|   135k|                                i -= ends_with_unescaped_dot;
  470|   135k|                                Cow::Borrowed(data)
  471|       |                            };
  472|   182k|                            return Some((i, Ok((buffer, might_be_invalid_iri))));
  473|       |                        }
  474|       |                    }
  475|  36.1k|                    Err(e) => return Some((e.location.end, Err(e))),
  476|       |                }
  477|   308k|            } else if is_ending {
  478|  5.00k|                let buffer = if let Some(mut buffer) = buffer {
  479|       |                    // We do not include the last dot
  480|  1.28k|                    while buffer.ends_with('.') {
  481|    594|                        buffer.pop();
  482|    594|                        i -= 1;
  483|    594|                    }
  484|    694|                    Cow::Owned(buffer)
  485|       |                } else {
  486|  4.31k|                    let mut data = match str_from_utf8(&data[..i], 0..i) {
  487|  4.31k|                        Ok(data) => data,
  488|      0|                        Err(e) => return Some((i, Err(e))),
  489|       |                    };
  490|       |                    // We do not include the last dot
  491|  5.28k|                    while let Some(d) = data.strip_suffix('.') {
  492|    974|                        data = d;
  493|    974|                        i -= 1;
  494|    974|                    }
  495|  4.31k|                    Cow::Borrowed(data)
  496|       |                };
  497|  5.00k|                return Some((i, Ok((buffer, might_be_invalid_iri))));
  498|       |            } else {
  499|   303k|                return None;
  500|       |            }
  501|       |        }
  502|   756k|    }
_RNvMs_NtCs8X3sjsXBtJI_5oxttl5lexerNtB4_7N3Lexer26recognize_blank_node_label:
  504|  1.53M|    fn recognize_blank_node_label(
  505|  1.53M|        data: &[u8],
  506|  1.53M|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  507|  1.53M|        // [141s]  BLANK_NODE_LABEL  ::=  '_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
  508|  1.53M|        let mut i = 2;
  509|       |        loop {
  510|  15.0M|            match Self::recognize_unicode_char(&data[i..], i)? {
  511|  14.1M|                Ok((c, consumed)) => {
  512|  14.1M|                    if (i == 2 && (Self::is_possible_pn_chars_u(c) || c.is_ascii_digit()))
  513|  12.8M|                        || (i > 2 && Self::is_possible_pn_chars(c))
  514|  13.3M|                    {
  515|  13.3M|                        // Ok
  516|  13.3M|                    } else if i > 2 && c == '.' {
  517|   181k|                        if data[i - 1] == b'.' {
  518|  13.1k|                            i -= 1;
  519|  13.1k|                            return Some((
  520|  13.1k|                                i,
  521|  13.1k|                                str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  522|  13.1k|                            ));
  523|   168k|                        }
  524|   673k|                    } else if i == 2 {
  525|  75.1k|                        return Some((
  526|  75.1k|                            i,
  527|  75.1k|                            Err((0..i, "A blank node ID should not be empty").into()),
  528|  75.1k|                        ));
  529|   597k|                    } else if data[i - 1] == b'.' {
  530|   113k|                        i -= 1;
  531|   113k|                        return Some((
  532|   113k|                            i,
  533|   113k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  534|   113k|                        ));
  535|       |                    } else {
  536|   484k|                        return Some((
  537|   484k|                            i,
  538|   484k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  539|   484k|                        ));
  540|       |                    }
  541|  13.4M|                    i += consumed;
  542|       |                }
  543|  17.8k|                Err(e) => return Some((e.location.end, Err(e))),
  544|       |            }
  545|       |        }
  546|  1.53M|    }
_RNvMs_NtCs8X3sjsXBtJI_5oxttl5lexerNtB4_7N3Lexer18recognize_lang_tag:
  548|   803k|    fn recognize_lang_tag<'a>(
  549|   803k|        &self,
  550|   803k|        data: &'a [u8],
  551|   803k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  552|   803k|        // [144s]  LANGTAG  ::=  '@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
  553|   803k|        let mut is_last_block_empty = true;
  554|  6.03M|        for (i, c) in data[1..].iter().enumerate() {
  555|  6.03M|            if c.is_ascii_alphabetic() {
  556|  4.78M|                is_last_block_empty = false;
  557|  4.78M|            } else if i == 0 {
  558|   112k|                return Some((
  559|   112k|                    1,
  560|   112k|                    Err((1..2, "A language code should always start with a letter").into()),
  561|   112k|                ));
  562|  1.13M|            } else if is_last_block_empty {
  563|  27.9k|                return Some((i, self.parse_lang_tag(&data[1..i], 1..i - 1)));
  564|  1.10M|            } else if *c == b'-' {
  565|   607k|                is_last_block_empty = true;
  566|   607k|            } else {
  567|   501k|                return Some((i + 1, self.parse_lang_tag(&data[1..=i], 1..i)));
  568|       |            }
  569|       |        }
  570|   160k|        None
  571|   803k|    }
_RNvMs_NtCs8X3sjsXBtJI_5oxttl5lexerNtB4_7N3Lexer14parse_lang_tag:
  573|   529k|    fn parse_lang_tag<'a>(
  574|   529k|        &self,
  575|   529k|        lang_tag: &'a [u8],
  576|   529k|        position: Range<usize>,
  577|   529k|    ) -> Result<N3Token<'a>, TokenRecognizerError> {
  578|   529k|        let lang_tag = str_from_utf8(lang_tag, position.clone())?;
  579|   529k|        Ok(N3Token::LangTag(if self.unchecked {
  580|     17|            lang_tag
  581|       |        } else {
  582|   529k|            LanguageTag::parse(lang_tag)
  583|   529k|                .map_err(|e| (position.clone(), e.to_string()))?
  584|   419k|                .into_inner()
  585|       |        }))
  586|   529k|    }
_RNvMs_NtCs8X3sjsXBtJI_5oxttl5lexerNtB4_7N3Lexer16recognize_string:
  587|  1.07M|    fn recognize_string(
  588|  1.07M|        &self,
  589|  1.07M|        data: &[u8],
  590|  1.07M|        delimiter: u8,
  591|  1.07M|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  592|  1.07M|        // [22]  STRING_LITERAL_QUOTE         ::=  '"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
  593|  1.07M|        // [23]  STRING_LITERAL_SINGLE_QUOTE  ::=  "'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
  594|  1.07M|        let mut string = String::new();
  595|  1.07M|        let mut i = 1;
  596|       |        loop {
  597|  1.43M|            let mut end = memchr2(delimiter, b'\\', &data[i..])?;
  598|  1.17M|            if !self.unchecked {
  599|       |                // We check also line jumps
  600|  1.17M|                if let Some(line_jump_end) = memchr2(b'\n', b'\r', &data[i..i + end]) {
  601|  39.2k|                    end = line_jump_end;
  602|  1.13M|                }
  603|    235|            }
  604|  1.17M|            match str_from_utf8(&data[i..i + end], i..i + end) {
  605|  1.15M|                Ok(s) => string.push_str(s),
  606|  18.2k|                Err(e) => return Some((end, Err(e))),
  607|       |            };
  608|  1.15M|            i += end;
  609|  1.15M|            match data[i] {
  610|  1.15M|                c if c == delimiter => {
  611|   688k|                    return Some((i + 1, Ok(N3Token::String(string))));
  612|       |                }
  613|       |                b'\\' => {
  614|   430k|                    let (additional, c) = self.recognize_escape(&data[i..], i, true)?;
  615|   426k|                    i += additional + 1;
  616|   426k|                    match c {
  617|   363k|                        Ok(c) => {
  618|   363k|                            string.push(c);
  619|   363k|                        }
  620|  63.0k|                        Err(e) => {
  621|       |                            // We read until the end of string char
  622|  63.0k|                            let end = memchr(delimiter, &data[i..])?;
  623|  27.7k|                            return Some((i + end + 1, Err(e)));
  624|       |                        }
  625|       |                    }
  626|       |                }
  627|       |                b'\n' | b'\r' => {
  628|       |                    // We read until the end of string char
  629|  37.8k|                    let end = memchr(delimiter, &data[i..])?;
  630|  26.5k|                    return Some((
  631|  26.5k|                        i + end + 1,
  632|  26.5k|                        Err((
  633|  26.5k|                            i..i + 1,
  634|  26.5k|                            "Line jumps are not allowed in string literals, use \\n",
  635|  26.5k|                        )
  636|  26.5k|                            .into()),
  637|  26.5k|                    ));
  638|       |                }
  639|      0|                _ => unreachable!(),
  640|       |            }
  641|       |        }
  642|  1.07M|    }
_RNvMs_NtCs8X3sjsXBtJI_5oxttl5lexerNtB4_7N3Lexer16recognize_number:
  683|   670k|    fn recognize_number(data: &[u8]) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  684|   670k|        // [19]  INTEGER    ::=  [+-]? [0-9]+
  685|   670k|        // [20]  DECIMAL    ::=  [+-]? [0-9]* '.' [0-9]+
  686|   670k|        // [21]  DOUBLE     ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  687|   670k|        // [154s] EXPONENT  ::=  [eE] [+-]? [0-9]+
  688|   670k|        let mut i = 0;
  689|   670k|        let c = *data.first()?;
  690|   670k|        if matches!(c, b'+' | b'-') {
  691|   352k|            i += 1;
  692|   352k|        }
  693|       |        // We read the digits before .
  694|   670k|        let mut count_before: usize = 0;
  695|       |        loop {
  696|  1.18M|            let c = *data.get(i)?;
  697|  1.10M|            if c.is_ascii_digit() {
  698|   516k|                i += 1;
  699|   516k|                count_before += 1;
  700|   516k|            } else {
  701|   586k|                break;
  702|       |            }
  703|       |        }
  704|       |
  705|       |        // We read the digits after .
  706|       |        #[allow(clippy::if_then_some_else_none)]
  707|   586k|        let count_after = if *data.get(i)? == b'.' {
  708|  53.9k|            i += 1;
  709|  53.9k|
  710|  53.9k|            let mut count_after = 0;
  711|       |            loop {
  712|   144k|                let c = *data.get(i)?;
  713|   134k|                if c.is_ascii_digit() {
  714|  90.3k|                    i += 1;
  715|  90.3k|                    count_after += 1;
  716|  90.3k|                } else {
  717|  43.8k|                    break;
  718|  43.8k|                }
  719|  43.8k|            }
  720|  43.8k|            Some(count_after)
  721|       |        } else {
  722|   532k|            None
  723|       |        };
  724|       |
  725|       |        // End
  726|   576k|        let c = *data.get(i)?;
  727|   576k|        if matches!(c, b'e' | b'E') {
  728|  44.6k|            i += 1;
  729|       |
  730|  44.6k|            let c = *data.get(i)?;
  731|  31.5k|            if matches!(c, b'+' | b'-') {
  732|  3.07k|                i += 1;
  733|  28.4k|            }
  734|       |
  735|  31.5k|            let mut found = false;
  736|       |            loop {
  737|  58.8k|                let c = *data.get(i)?;
  738|  52.7k|                if c.is_ascii_digit() {
  739|  27.2k|                    i += 1;
  740|  27.2k|                    found = true;
  741|  27.2k|                } else {
  742|  25.4k|                    break;
  743|  25.4k|                }
  744|  25.4k|            }
  745|  25.4k|            Some((
  746|  25.4k|                i,
  747|  25.4k|                if !found {
  748|  14.0k|                    Err((0..i, "A double exponent cannot be empty").into())
  749|  11.4k|                } else if count_before == 0 && count_after.unwrap_or(0) == 0 {
  750|  4.94k|                    Err((0..i, "A double should not be empty").into())
  751|       |                } else {
  752|  6.46k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Double)
  753|       |                },
  754|       |            ))
  755|   531k|        } else if let Some(count_after) = count_after {
  756|  40.5k|            if count_after == 0 {
  757|       |                // We do not consume the '.' after all
  758|  22.1k|                i -= 1;
  759|  22.1k|                Some((
  760|  22.1k|                    i,
  761|  22.1k|                    if count_before == 0 {
  762|  7.30k|                        Err((0..i, "An integer should not be empty").into())
  763|       |                    } else {
  764|  14.8k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  765|       |                    },
  766|       |                ))
  767|       |            } else {
  768|  18.4k|                Some((i, str_from_utf8(&data[..i], 0..i).map(N3Token::Decimal)))
  769|       |            }
  770|       |        } else {
  771|       |            Some((
  772|   490k|                i,
  773|   490k|                if count_before == 0 {
  774|   286k|                    Err((0..i, "An integer should not be empty").into())
  775|       |                } else {
  776|   204k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  777|       |                },
  778|       |            ))
  779|       |        }
  780|   670k|    }
_RNvMs_NtCs8X3sjsXBtJI_5oxttl5lexerNtB4_7N3Lexer16recognize_escape:
  782|   583k|    fn recognize_escape(
  783|   583k|        &self,
  784|   583k|        data: &[u8],
  785|   583k|        position: usize,
  786|   583k|        with_echar: bool,
  787|   583k|    ) -> Option<(usize, Result<char, TokenRecognizerError>)> {
  788|   583k|        // [26]   UCHAR  ::=  '\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
  789|   583k|        // [159s] ECHAR  ::=  '\' [tbnrf"'\]
  790|   583k|        match *data.get(1)? {
  791|   111k|            b'u' => match Self::recognize_hex_char(&data[2..], 4, 'u', position) {
  792|   103k|                Ok(c) => Some((5, Ok(c?))),
  793|  7.66k|                Err(e) => {
  794|  7.66k|                    if self.unchecked {
  795|      0|                        match Self::recognize_utf16_surrogate_pair(&data[2..], position) {
  796|      0|                            Ok(c) => Some((11, Ok(c?))),
  797|      0|                            Err(e) => Some((5, Err(e))),
  798|       |                        }
  799|       |                    } else {
  800|  7.66k|                        Some((5, Err(e)))
  801|       |                    }
  802|       |                }
  803|       |            },
  804|  62.3k|            b'U' => match Self::recognize_hex_char(&data[2..], 8, 'u', position) {
  805|  57.5k|                Ok(c) => Some((9, Ok(c?))),
  806|  4.72k|                Err(e) => Some((9, Err(e))),
  807|       |            },
  808|  20.8k|            b't' if with_echar => Some((1, Ok('\t'))),
  809|   103k|            b'b' if with_echar => Some((1, Ok('\x08'))),
  810|  23.1k|            b'n' if with_echar => Some((1, Ok('\n'))),
  811|  6.74k|            b'r' if with_echar => Some((1, Ok('\r'))),
  812|  18.6k|            b'f' if with_echar => Some((1, Ok('\x0C'))),
  813|  35.5k|            b'"' if with_echar => Some((1, Ok('"'))),
  814|  20.2k|            b'\'' if with_echar => Some((1, Ok('\''))),
  815|  9.87k|            b'\\' if with_echar => Some((1, Ok('\\'))),
  816|   117k|            c => Some((
  817|   117k|                1,
  818|   117k|                Err((
  819|   117k|                    position..position + 2,
  820|   117k|                    format!("Unexpected escape character '\\{}'", char::from(c)),
  821|   117k|                )
  822|   117k|                    .into()),
  823|   117k|            )), // TODO: read until end of string
  824|       |        }
  825|   583k|    }
_RNvMs_NtCs8X3sjsXBtJI_5oxttl5lexerNtB4_7N3Lexer18recognize_hex_char:
  827|   173k|    fn recognize_hex_char(
  828|   173k|        data: &[u8],
  829|   173k|        len: usize,
  830|   173k|        escape_char: char,
  831|   173k|        position: usize,
  832|   173k|    ) -> Result<Option<char>, TokenRecognizerError> {
  833|   173k|        if data.len() < len {
  834|  7.78k|            return Ok(None);
  835|   165k|        }
  836|   165k|        let val = str_from_utf8(&data[..len], position..position + len + 2)?;
  837|   159k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  838|       |            (
  839|       |                position..position + len + 2,
  840|       |                format!(
  841|       |                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  842|       |                ),
  843|       |            )
  844|   159k|        })?;
  845|   156k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  846|       |            (
  847|       |                position..position + len +2,
  848|       |                format!(
  849|       |                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  850|       |                ),
  851|       |            )
  852|   156k|        })?;
  853|   153k|        Ok(Some(c))
  854|   173k|    }
_RNvMs_NtCs8X3sjsXBtJI_5oxttl5lexerNtB4_7N3Lexer22recognize_unicode_char:
  931|  26.2M|    fn recognize_unicode_char(
  932|  26.2M|        data: &[u8],
  933|  26.2M|        position: usize,
  934|  26.2M|    ) -> Option<Result<(char, usize), TokenRecognizerError>> {
  935|  26.2M|        let mut code_point: u32;
  936|  26.2M|        let bytes_needed: usize;
  937|  26.2M|        let mut lower_boundary = 0x80;
  938|  26.2M|        let mut upper_boundary = 0xBF;
  939|       |
  940|  26.2M|        let byte = *data.first()?;
  941|  24.9M|        match byte {
  942|  24.9M|            0x00..=0x7F => return Some(Ok((char::from(byte), 1))),
  943|  3.01M|            0xC2..=0xDF => {
  944|  1.20M|                bytes_needed = 1;
  945|  1.20M|                code_point = u32::from(byte) & 0x1F;
  946|  1.20M|            }
  947|  1.80M|            0xE0..=0xEF => {
  948|  1.35M|                if byte == 0xE0 {
  949|  12.0k|                    lower_boundary = 0xA0;
  950|  1.33M|                }
  951|  1.35M|                if byte == 0xED {
  952|  7.94k|                    upper_boundary = 0x9F;
  953|  1.34M|                }
  954|  1.35M|                bytes_needed = 2;
  955|  1.35M|                code_point = u32::from(byte) & 0xF;
  956|       |            }
  957|   453k|            0xF0..=0xF4 => {
  958|   336k|                if byte == 0xF0 {
  959|  84.3k|                    lower_boundary = 0x90;
  960|   252k|                }
  961|   336k|                if byte == 0xF4 {
  962|   201k|                    upper_boundary = 0x8F;
  963|   201k|                }
  964|   336k|                bytes_needed = 3;
  965|   336k|                code_point = u32::from(byte) & 0x7;
  966|       |            }
  967|       |            _ => {
  968|   999k|                return Some(Err((
  969|   999k|                    position..=position,
  970|   999k|                    "Invalid UTF-8 character encoding",
  971|   999k|                )
  972|   999k|                    .into()))
  973|       |            }
  974|       |        }
  975|       |
  976|  4.21M|        for i in 1..=bytes_needed {
  977|  4.21M|            let byte = *data.get(i)?;
  978|  4.12M|            if byte < lower_boundary || upper_boundary < byte {
  979|   513k|                return Some(Err((
  980|   513k|                    position..=position + i,
  981|   513k|                    "Invalid UTF-8 character encoding",
  982|   513k|                )
  983|   513k|                    .into()));
  984|  3.61M|            }
  985|  3.61M|            lower_boundary = 0x80;
  986|  3.61M|            upper_boundary = 0xBF;
  987|  3.61M|            code_point = (code_point << 6) | (u32::from(byte) & 0x3F);
  988|       |        }
  989|       |
  990|  2.29M|        Some(
  991|  2.29M|            char::from_u32(code_point)
  992|  2.29M|                .map(|c| (c, bytes_needed + 1))
  993|  2.29M|                .ok_or_else(|| {
  994|       |                    (
  995|       |                        position..=position + bytes_needed,
  996|       |                        format!("The codepoint {code_point:X} is not a valid unicode character"),
  997|       |                    )
  998|       |                        .into()
  999|  2.29M|                }),
 1000|  2.29M|        )
 1001|  26.2M|    }
_RNvMs_NtCs8X3sjsXBtJI_5oxttl5lexerNtB4_7N3Lexer25is_possible_pn_chars_base:
 1004|  22.5M|    fn is_possible_pn_chars_base(c: char) -> bool {
 1005|  22.5M|        matches!(c,
 1006|  15.8M|        'A'..='Z'
 1007|  13.8M|        | 'a'..='z'
 1008|  1.29M|        | '\u{00C0}'..='\u{00D6}'
 1009|  1.29M|        | '\u{00D8}'..='\u{00F6}'
 1010|  1.29M|        | '\u{00F8}'..='\u{02FF}'
 1011|  1.28M|        | '\u{0370}'..='\u{037D}'
 1012|  1.27M|        | '\u{037F}'..='\u{1FFF}'
 1013|  1.27M|        | '\u{200C}'..='\u{200D}'
 1014|  1.26M|        | '\u{2070}'..='\u{218F}'
 1015|  1.26M|        | '\u{2C00}'..='\u{2FEF}'
 1016|  1.26M|        | '\u{3001}'..='\u{D7FF}'
 1017|  40.5k|        | '\u{F900}'..='\u{FDCF}'
 1018|  40.5k|        | '\u{FDF0}'..='\u{FFFD}'
 1019|  36.0k|        | '\u{10000}'..='\u{EFFFF}')
 1020|  22.5M|    }
_RNvMs_NtCs8X3sjsXBtJI_5oxttl5lexerNtB4_7N3Lexer22is_possible_pn_chars_u:
 1023|  18.9M|    pub(super) fn is_possible_pn_chars_u(c: char) -> bool {
 1024|  18.9M|        Self::is_possible_pn_chars_base(c) || c == '_'
 1025|  18.9M|    }
_RNvMs_NtCs8X3sjsXBtJI_5oxttl5lexerNtB4_7N3Lexer20is_possible_pn_chars:
 1028|  17.0M|    pub(crate) fn is_possible_pn_chars(c: char) -> bool {
 1029|  17.0M|        Self::is_possible_pn_chars_u(c)
 1030|  5.17M|            || matches!(c,
 1031|  2.71M|        '-' | '0'..='9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
 1032|  16.0M|    }
_RNvMs_NtCs8X3sjsXBtJI_5oxttl5lexerNtB4_7N3Lexer43is_possible_pn_chars_base_but_not_valid_iri:
 1034|  1.30M|    fn is_possible_pn_chars_base_but_not_valid_iri(c: char) -> bool {
 1035|  1.30M|        matches!(c, '\u{FFF0}'..='\u{FFFD}')
 1036|  1.29M|            || u32::from(c) % u32::from('\u{FFFE}') == 0
 1037|  1.29M|            || u32::from(c) % u32::from('\u{FFFF}') == 0
 1038|  1.30M|    }
_RNvNtCs8X3sjsXBtJI_5oxttl5lexer13str_from_utf8:
 1063|  4.20M|fn str_from_utf8(data: &[u8], range: Range<usize>) -> Result<&str, TokenRecognizerError> {
 1064|  4.20M|    str::from_utf8(data).map_err(|e| {
 1065|       |        (
 1066|       |            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
 1067|       |            format!("Invalid UTF-8: {e}"),
 1068|       |        )
 1069|       |            .into()
 1070|  4.20M|    })
 1071|  4.20M|}
_RNvNtCs8X3sjsXBtJI_5oxttl5lexer16string_from_utf8:
 1073|  3.41M|fn string_from_utf8(data: Vec<u8>, range: Range<usize>) -> Result<String, TokenRecognizerError> {
 1074|  3.41M|    String::from_utf8(data).map_err(|e| {
 1075|       |        (
 1076|       |            range.start + e.utf8_error().valid_up_to()
 1077|       |                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
 1078|       |            format!("Invalid UTF-8: {e}"),
 1079|       |        )
 1080|       |            .into()
 1081|  3.41M|    })
 1082|  3.41M|}

_RNvXNtCs8X3sjsXBtJI_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer20error_recovery_state:
   48|  5.67M|    fn error_recovery_state(mut self) -> Self {
   49|  5.67M|        self.stack.clear();
   50|  5.67M|        self.subjects.clear();
   51|  5.67M|        self.predicates.clear();
   52|  5.67M|        self.objects.clear();
   53|  5.67M|        self
   54|  5.67M|    }
_RNvXNtCs8X3sjsXBtJI_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer14recognize_next:
   56|  12.2M|    fn recognize_next(
   57|  12.2M|        mut self,
   58|  12.2M|        token: TokenOrLineJump<N3Token<'_>>,
   59|  12.2M|        context: &mut NQuadsRecognizerContext,
   60|  12.2M|        results: &mut Vec<Quad>,
   61|  12.2M|        errors: &mut Vec<RuleRecognizerError>,
   62|  12.2M|    ) -> Self {
   63|  12.2M|        match self.stack.pop().unwrap_or(NQuadsState::ExpectSubject) {
   64|       |            NQuadsState::ExpectSubject => {
   65|  7.93M|                let TokenOrLineJump::Token(token) = token else {
   66|   794k|                    return if self.stack.is_empty() {
   67|   722k|                        self
   68|       |                    } else {
   69|  71.8k|                        self.error(
   70|  71.8k|                            errors,
   71|  71.8k|                            "line jumps are not allowed inside of quoted triples",
   72|  71.8k|                        )
   73|       |                    };
   74|       |                };
   75|   897k|                match token {
   76|  1.69M|                    N3Token::IriRef(s) => {
   77|  1.69M|                        self.subjects.push(NamedNode::new_unchecked(s).into());
   78|  1.69M|                        self.stack.push(NQuadsState::ExpectPredicate);
   79|  1.69M|                        self
   80|       |                    }
   81|   223k|                    N3Token::BlankNodeLabel(s) => {
   82|   223k|                        self.subjects.push(BlankNode::new_unchecked(s).into());
   83|   223k|                        self.stack.push(NQuadsState::ExpectPredicate);
   84|   223k|                        self
   85|       |                    }
   86|       |                    #[cfg(feature = "rdf-star")]
   87|  3.65M|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
   88|   897k|                        self.stack.push(NQuadsState::AfterQuotedSubject);
   89|   897k|                        self.stack.push(NQuadsState::ExpectSubject);
   90|   897k|                        self
   91|       |                    }
   92|  4.32M|                    _ => self.error(
   93|  4.32M|                        errors,
   94|  4.32M|                        "The subject of a triple should be an IRI or a blank node, TOKEN found",
   95|  4.32M|                    ),
   96|       |                }
   97|       |            }
   98|       |            NQuadsState::ExpectPredicate => {
   99|  1.80M|                let TokenOrLineJump::Token(token) = token else {
  100|   543k|                    return self.error(
  101|   543k|                        errors,
  102|   543k|                        "line jumps are not allowed in the middle of triples",
  103|   543k|                    );
  104|       |                };
  105|  1.25M|                match token {
  106|   721k|                    N3Token::IriRef(p) => {
  107|   721k|                        self.predicates.push(NamedNode::new_unchecked(p));
  108|   721k|                        self.stack.push(NQuadsState::ExpectedObject);
  109|   721k|                        self
  110|       |                    }
  111|   535k|                    _ => self.error(
  112|   535k|                        errors,
  113|   535k|                        "The predicate of a triple should be an IRI, TOKEN found",
  114|   535k|                    ),
  115|       |                }
  116|       |            }
  117|       |            NQuadsState::ExpectedObject => {
  118|   694k|                let TokenOrLineJump::Token(token) = token else {
  119|  10.4k|                    return self.error(
  120|  10.4k|                        errors,
  121|  10.4k|                        "line jumps are not allowed in the middle of triples",
  122|  10.4k|                    );
  123|       |                };
  124|  20.8k|                match token {
  125|   104k|                        N3Token::IriRef(o) => {
  126|   104k|                            self.objects
  127|   104k|                                .push(NamedNode::new_unchecked(o).into());
  128|   104k|                            self.stack
  129|   104k|                                .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  130|   104k|                            self
  131|       |                        }
  132|   187k|                        N3Token::BlankNodeLabel(o) => {
  133|   187k|                            self.objects.push(BlankNode::new_unchecked(o).into());
  134|   187k|                            self.stack
  135|   187k|                                .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  136|   187k|                            self
  137|       |                        }
  138|   342k|                        N3Token::String(value) => {
  139|   342k|                            self.stack
  140|   342k|                                .push(NQuadsState::ExpectLiteralAnnotationOrGraphNameOrDot { value });
  141|   342k|                            self
  142|       |                        }
  143|       |                        #[cfg(feature = "rdf-star")]
  144|  29.4k|                        N3Token::Punctuation("<<") if context.with_quoted_triples => {
  145|  20.8k|                            self.stack.push(NQuadsState::AfterQuotedObject);
  146|  20.8k|                            self.stack.push(NQuadsState::ExpectSubject);
  147|  20.8k|                            self
  148|       |                        }
  149|  28.8k|                        _ => self.error(
  150|  28.8k|                            errors,
  151|  28.8k|                            "The object of a triple should be an IRI, a blank node or a literal, TOKEN found",
  152|  28.8k|                        ),
  153|       |                    }
  154|       |            }
  155|   330k|            NQuadsState::ExpectLiteralAnnotationOrGraphNameOrDot { value } => match token {
  156|   211k|                TokenOrLineJump::Token(N3Token::LangTag(lang_tag)) => {
  157|   211k|                    self.objects.push(
  158|   211k|                        Literal::new_language_tagged_literal_unchecked(
  159|   211k|                            value,
  160|   211k|                            lang_tag.to_ascii_lowercase(),
  161|   211k|                        )
  162|   211k|                        .into(),
  163|   211k|                    );
  164|   211k|                    self.stack
  165|   211k|                        .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  166|   211k|                    self
  167|       |                }
  168|   107k|                TokenOrLineJump::Token(N3Token::Punctuation("^^")) => {
  169|  63.2k|                    self.stack
  170|  63.2k|                        .push(NQuadsState::ExpectLiteralDatatype { value });
  171|  63.2k|                    self
  172|       |                }
  173|       |                _ => {
  174|  55.4k|                    self.objects.push(Literal::new_simple_literal(value).into());
  175|  55.4k|                    self.stack
  176|  55.4k|                        .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  177|  55.4k|                    self.recognize_next(token, context, results, errors)
  178|       |                }
  179|       |            },
  180|  55.7k|            NQuadsState::ExpectLiteralDatatype { value } => {
  181|  55.7k|                let TokenOrLineJump::Token(token) = token else {
  182|  3.11k|                    return self.error(
  183|  3.11k|                        errors,
  184|  3.11k|                        "line jumps are not allowed in the middle of triples",
  185|  3.11k|                    );
  186|       |                };
  187|  52.6k|                match token {
  188|  43.1k|                    N3Token::IriRef(d) => {
  189|  43.1k|                        self.objects.push(
  190|  43.1k|                            Literal::new_typed_literal(value, NamedNode::new_unchecked(d)).into(),
  191|  43.1k|                        );
  192|  43.1k|                        self.stack
  193|  43.1k|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  194|  43.1k|                        self
  195|       |                    }
  196|  9.46k|                    _ => self.error(errors, "A literal datatype must be an IRI, found TOKEN"),
  197|       |                }
  198|       |            }
  199|       |            NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple => {
  200|   594k|                if self.stack.is_empty() {
  201|  53.9k|                    match token {
  202|  53.9k|                        TokenOrLineJump::Token(N3Token::IriRef(g)) if context.with_graph_name => {
  203|  53.9k|                            self.emit_quad(results, NamedNode::new_unchecked(g).into());
  204|  53.9k|                            self.stack.push(NQuadsState::ExpectDot);
  205|  53.9k|                            self
  206|       |                        }
  207|  36.5k|                        TokenOrLineJump::Token(N3Token::BlankNodeLabel(g))
  208|  36.5k|                            if context.with_graph_name =>
  209|  36.5k|                        {
  210|  36.5k|                            self.emit_quad(results, BlankNode::new_unchecked(g).into());
  211|  36.5k|                            self.stack.push(NQuadsState::ExpectDot);
  212|  36.5k|                            self
  213|       |                        }
  214|       |                        _ => {
  215|   429k|                            self.emit_quad(results, GraphName::DefaultGraph);
  216|   429k|                            self.stack.push(NQuadsState::ExpectDot);
  217|   429k|                            self.recognize_next(token, context, results, errors)
  218|       |                        }
  219|       |                    }
  220|  74.2k|                } else if token == TokenOrLineJump::Token(N3Token::Punctuation(">>")) {
  221|  59.7k|                    self
  222|       |                } else {
  223|  14.4k|                    self.error(errors, "Expecting the end of a quoted triple '>>'")
  224|       |                }
  225|       |            }
  226|       |            NQuadsState::ExpectDot => {
  227|   512k|                let TokenOrLineJump::Token(token) = token else {
  228|  78.9k|                    return self.error(errors, "Quads should be followed by a dot");
  229|       |                };
  230|   433k|                if let N3Token::Punctuation(".") = token {
  231|   323k|                    self.stack.push(NQuadsState::ExpectLineJump);
  232|   323k|                    self
  233|       |                } else {
  234|   110k|                    errors.push("Quads should be followed by a dot".into());
  235|   110k|                    self.recognize_next(TokenOrLineJump::Token(token), context, results, errors)
  236|       |                }
  237|       |            }
  238|       |            NQuadsState::ExpectLineJump => {
  239|   309k|                let TokenOrLineJump::Token(token) = token else {
  240|   197k|                    return self;
  241|       |                };
  242|   112k|                errors.push(
  243|   112k|                    format!(
  244|   112k|                        "Only a single triple or quad can be written in a line, found {token:?}"
  245|   112k|                    )
  246|   112k|                    .into(),
  247|   112k|                );
  248|   112k|                self.recognize_next(TokenOrLineJump::Token(token), context, results, errors)
  249|       |            }
  250|       |            #[cfg(feature = "rdf-star")]
  251|       |            NQuadsState::AfterQuotedSubject => {
  252|  50.1k|                let triple = Triple {
  253|  50.1k|                    subject: self.subjects.pop().unwrap(),
  254|  50.1k|                    predicate: self.predicates.pop().unwrap(),
  255|  50.1k|                    object: self.objects.pop().unwrap(),
  256|  50.1k|                };
  257|  50.1k|                self.subjects.push(triple.into());
  258|  50.1k|                self.stack.push(NQuadsState::ExpectPredicate);
  259|  50.1k|                self.recognize_next(token, context, results, errors)
  260|       |            }
  261|       |            #[cfg(feature = "rdf-star")]
  262|       |            NQuadsState::AfterQuotedObject => {
  263|  9.10k|                let triple = Triple {
  264|  9.10k|                    subject: self.subjects.pop().unwrap(),
  265|  9.10k|                    predicate: self.predicates.pop().unwrap(),
  266|  9.10k|                    object: self.objects.pop().unwrap(),
  267|  9.10k|                };
  268|  9.10k|                self.objects.push(triple.into());
  269|  9.10k|                self.stack
  270|  9.10k|                    .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  271|  9.10k|                self.recognize_next(token, context, results, errors)
  272|       |            }
  273|       |        }
  274|  12.2M|    }
_RNvXNtCs8X3sjsXBtJI_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer13recognize_end:
  276|   156k|    fn recognize_end(
  277|   156k|        mut self,
  278|   156k|        _context: &mut NQuadsRecognizerContext,
  279|   156k|        results: &mut Vec<Quad>,
  280|   156k|        errors: &mut Vec<RuleRecognizerError>,
  281|   156k|    ) {
  282|   156k|        match &*self.stack {
  283|   156k|            [NQuadsState::ExpectSubject | NQuadsState::ExpectLineJump] | [] => (),
  284|    126|            [NQuadsState::ExpectDot] => errors.push("Triples should be followed by a dot".into()),
  285|       |            [NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple] => {
  286|  1.47k|                self.emit_quad(results, GraphName::DefaultGraph);
  287|  1.47k|                errors.push("Triples should be followed by a dot".into())
  288|       |            }
  289|    492|            [NQuadsState::ExpectLiteralAnnotationOrGraphNameOrDot { value }] => {
  290|    492|                self.objects.push(Literal::new_simple_literal(value).into());
  291|    492|                self.emit_quad(results, GraphName::DefaultGraph);
  292|    492|                errors.push("Triples should be followed by a dot".into())
  293|       |            }
  294|  3.68k|            _ => errors.push("Unexpected end".into()), // TODO
  295|       |        }
  296|   156k|    }
_RNvXNtCs8X3sjsXBtJI_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer13lexer_options:
  298|  24.1M|    fn lexer_options(context: &NQuadsRecognizerContext) -> &N3LexerOptions {
  299|  24.1M|        &context.lexer_options
  300|  24.1M|    }
_RNvMs_NtCs8X3sjsXBtJI_5oxttl12line_formatsNtB4_16NQuadsRecognizer9emit_quad:
  350|   522k|    fn emit_quad(&mut self, results: &mut Vec<Quad>, graph_name: GraphName) {
  351|   522k|        results.push(Quad {
  352|   522k|            subject: self.subjects.pop().unwrap(),
  353|   522k|            predicate: self.predicates.pop().unwrap(),
  354|   522k|            object: self.objects.pop().unwrap(),
  355|   522k|            graph_name,
  356|   522k|        })
  357|   522k|    }
_RINvMs_NtCs8X3sjsXBtJI_5oxttl12line_formatsNtB5_16NQuadsRecognizer10new_parserINtNtCs8f6x4lOZV33_5alloc3vec3VechEEB7_:
  305|   104k|    pub fn new_parser<B>(
  306|   104k|        data: B,
  307|   104k|        is_ending: bool,
  308|   104k|        with_graph_name: bool,
  309|   104k|        #[cfg(feature = "rdf-star")] with_quoted_triples: bool,
  310|   104k|        unchecked: bool,
  311|   104k|    ) -> Parser<B, Self> {
  312|   104k|        Parser::new(
  313|   104k|            Lexer::new(
  314|   104k|                N3Lexer::new(N3LexerMode::NTriples, unchecked),
  315|   104k|                data,
  316|   104k|                is_ending,
  317|   104k|                MIN_BUFFER_SIZE,
  318|   104k|                MAX_BUFFER_SIZE,
  319|   104k|                Some(b"#"),
  320|   104k|            ),
  321|   104k|            Self {
  322|   104k|                stack: vec![NQuadsState::ExpectSubject],
  323|   104k|                subjects: Vec::new(),
  324|   104k|                predicates: Vec::new(),
  325|   104k|                objects: Vec::new(),
  326|   104k|            },
  327|   104k|            NQuadsRecognizerContext {
  328|   104k|                with_graph_name,
  329|   104k|                #[cfg(feature = "rdf-star")]
  330|   104k|                with_quoted_triples,
  331|   104k|                lexer_options: N3LexerOptions::default(),
  332|   104k|            },
  333|   104k|        )
  334|   104k|    }
_RINvMs_NtCs8X3sjsXBtJI_5oxttl12line_formatsNtB5_16NQuadsRecognizer10new_parserRShEB7_:
  305|  52.0k|    pub fn new_parser<B>(
  306|  52.0k|        data: B,
  307|  52.0k|        is_ending: bool,
  308|  52.0k|        with_graph_name: bool,
  309|  52.0k|        #[cfg(feature = "rdf-star")] with_quoted_triples: bool,
  310|  52.0k|        unchecked: bool,
  311|  52.0k|    ) -> Parser<B, Self> {
  312|  52.0k|        Parser::new(
  313|  52.0k|            Lexer::new(
  314|  52.0k|                N3Lexer::new(N3LexerMode::NTriples, unchecked),
  315|  52.0k|                data,
  316|  52.0k|                is_ending,
  317|  52.0k|                MIN_BUFFER_SIZE,
  318|  52.0k|                MAX_BUFFER_SIZE,
  319|  52.0k|                Some(b"#"),
  320|  52.0k|            ),
  321|  52.0k|            Self {
  322|  52.0k|                stack: vec![NQuadsState::ExpectSubject],
  323|  52.0k|                subjects: Vec::new(),
  324|  52.0k|                predicates: Vec::new(),
  325|  52.0k|                objects: Vec::new(),
  326|  52.0k|            },
  327|  52.0k|            NQuadsRecognizerContext {
  328|  52.0k|                with_graph_name,
  329|  52.0k|                #[cfg(feature = "rdf-star")]
  330|  52.0k|                with_quoted_triples,
  331|  52.0k|                lexer_options: N3LexerOptions::default(),
  332|  52.0k|            },
  333|  52.0k|        )
  334|  52.0k|    }
_RINvMs_NtCs8X3sjsXBtJI_5oxttl12line_formatsNtB5_16NQuadsRecognizer5errorReEB7_:
  337|  5.62M|    fn error(
  338|  5.62M|        mut self,
  339|  5.62M|        errors: &mut Vec<RuleRecognizerError>,
  340|  5.62M|        msg: impl Into<RuleRecognizerError>,
  341|  5.62M|    ) -> Self {
  342|  5.62M|        errors.push(msg.into());
  343|  5.62M|        self.stack.clear();
  344|  5.62M|        self.subjects.clear();
  345|  5.62M|        self.predicates.clear();
  346|  5.62M|        self.objects.clear();
  347|  5.62M|        self
  348|  5.62M|    }

_RINvMs2_NtCs8X3sjsXBtJI_5oxttl6nquadsNtB6_16NQuadsSerializer10for_writerINtNtCs8f6x4lOZV33_5alloc3vec3VechEECsdwlLKB38Swz_6nquads:
  514|  52.0k|    pub fn for_writer<W: Write>(self, writer: W) -> WriterNQuadsSerializer<W> {
  515|  52.0k|        WriterNQuadsSerializer {
  516|  52.0k|            writer,
  517|  52.0k|            low_level_writer: self.low_level(),
  518|  52.0k|        }
  519|  52.0k|    }
_RINvMs3_NtCs8X3sjsXBtJI_5oxttl6nquadsINtB6_22WriterNQuadsSerializerINtNtCs8f6x4lOZV33_5alloc3vec3VechEE14serialize_quadRNtNtCs4x4bMiUCp0I_5oxrdf6triple4QuadECsdwlLKB38Swz_6nquads:
  610|   173k|    pub fn serialize_quad<'a>(&mut self, q: impl Into<QuadRef<'a>>) -> io::Result<()> {
  611|   173k|        self.low_level_writer.serialize_quad(q, &mut self.writer)
  612|   173k|    }
_RINvMs4_NtCs8X3sjsXBtJI_5oxttl6nquadsNtB6_24LowLevelNQuadsSerializer14serialize_quadRNtNtCs4x4bMiUCp0I_5oxrdf6triple4QuadQINtNtCs8f6x4lOZV33_5alloc3vec3VechEECsdwlLKB38Swz_6nquads:
  696|   173k|    pub fn serialize_quad<'a>(
  697|   173k|        &mut self,
  698|   173k|        q: impl Into<QuadRef<'a>>,
  699|   173k|        mut writer: impl Write,
  700|   173k|    ) -> io::Result<()> {
  701|   173k|        writeln!(writer, "{} .", q.into())
  702|   173k|    }
_RNvMs3_NtCs8X3sjsXBtJI_5oxttl6nquadsINtB5_22WriterNQuadsSerializerINtNtCs8f6x4lOZV33_5alloc3vec3VechEE6finishCsdwlLKB38Swz_6nquads:
  615|  52.0k|    pub fn finish(self) -> W {
  616|  52.0k|        self.writer
  617|  52.0k|    }
_RNvMNtCs8X3sjsXBtJI_5oxttl6nquadsNtB2_12NQuadsParser19with_quoted_triplesCsdwlLKB38Swz_6nquads:
   69|   156k|    pub fn with_quoted_triples(mut self) -> Self {
   70|   156k|        self.with_quoted_triples = true;
   71|   156k|        self
   72|   156k|    }
_RNvMNtCs8X3sjsXBtJI_5oxttl6nquadsNtB2_12NQuadsParser3newCsdwlLKB38Swz_6nquads:
   51|   156k|    pub fn new() -> Self {
   52|   156k|        Self::default()
   53|   156k|    }
_RNvMNtCs8X3sjsXBtJI_5oxttl6nquadsNtB2_12NQuadsParser9uncheckedCsdwlLKB38Swz_6nquads:
   61|    380|    pub fn unchecked(mut self) -> Self {
   62|    380|        self.unchecked = true;
   63|    380|        self
   64|    380|    }
_RNvMs2_NtCs8X3sjsXBtJI_5oxttl6nquadsNtB5_16NQuadsSerializer3newCsdwlLKB38Swz_6nquads:
  491|  52.0k|    pub fn new() -> Self {
  492|  52.0k|        Self {}
  493|  52.0k|    }
_RNvMNtCs8X3sjsXBtJI_5oxttl6nquadsNtB2_12NQuadsParser9for_slice:
  163|  52.0k|    pub fn for_slice(self, slice: &[u8]) -> SliceNQuadsParser<'_> {
  164|  52.0k|        SliceNQuadsParser {
  165|  52.0k|            inner: NQuadsRecognizer::new_parser(
  166|  52.0k|                slice,
  167|  52.0k|                true,
  168|  52.0k|                true,
  169|  52.0k|                #[cfg(feature = "rdf-star")]
  170|  52.0k|                self.with_quoted_triples,
  171|  52.0k|                self.unchecked,
  172|  52.0k|            )
  173|  52.0k|            .into_iter(),
  174|  52.0k|        }
  175|  52.0k|    }
_RNvMNtCs8X3sjsXBtJI_5oxttl6nquadsNtB2_12NQuadsParser9low_level:
  260|   104k|    pub fn low_level(self) -> LowLevelNQuadsParser {
  261|   104k|        LowLevelNQuadsParser {
  262|   104k|            parser: NQuadsRecognizer::new_parser(
  263|   104k|                Vec::new(),
  264|   104k|                false,
  265|   104k|                true,
  266|   104k|                #[cfg(feature = "rdf-star")]
  267|   104k|                self.with_quoted_triples,
  268|   104k|                self.unchecked,
  269|   104k|            ),
  270|   104k|        }
  271|   104k|    }
_RNvXs0_NtCs8X3sjsXBtJI_5oxttl6nquadsNtB5_17SliceNQuadsParserNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next:
  388|   226k|    fn next(&mut self) -> Option<Self::Item> {
  389|   226k|        self.inner.next()
  390|   226k|    }
_RNvMs1_NtCs8X3sjsXBtJI_5oxttl6nquadsNtB5_20LowLevelNQuadsParser17extend_from_slice:
  437|  6.63M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  438|  6.63M|        self.parser.extend_from_slice(other)
  439|  6.63M|    }
_RNvMs1_NtCs8X3sjsXBtJI_5oxttl6nquadsNtB5_20LowLevelNQuadsParser3end:
  444|   104k|    pub fn end(&mut self) {
  445|   104k|        self.parser.end()
  446|   104k|    }
_RNvMs1_NtCs8X3sjsXBtJI_5oxttl6nquadsNtB5_20LowLevelNQuadsParser6is_end:
  449|   104k|    pub fn is_end(&self) -> bool {
  450|   104k|        self.parser.is_end()
  451|   104k|    }
_RNvMs1_NtCs8X3sjsXBtJI_5oxttl6nquadsNtB5_20LowLevelNQuadsParser10parse_next:
  457|  18.6M|    pub fn parse_next(&mut self) -> Option<Result<Quad, TurtleSyntaxError>> {
  458|  18.6M|        self.parser.parse_next()
  459|  18.6M|    }
_RNvMs2_NtCs8X3sjsXBtJI_5oxttl6nquadsNtB5_16NQuadsSerializer9low_level:
  576|  52.0k|    pub fn low_level(self) -> LowLevelNQuadsSerializer {
  577|  52.0k|        LowLevelNQuadsSerializer {}
  578|  52.0k|    }

_RNvXs_NtNtCs8X3sjsXBtJI_5oxttl7toolkit5errorNtB4_17TurtleSyntaxErrorNtNtCshZc3FwCJ069_4core3fmt7Display3fmtCsdwlLKB38Swz_6nquads:
   44|  11.5M|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   45|  11.5M|        if self.location.start.offset + 1 >= self.location.end.offset {
   46|  7.95M|            write!(
   47|  7.95M|                f,
   48|  7.95M|                "Parser error at line {} column {}: {}",
   49|  7.95M|                self.location.start.line + 1,
   50|  7.95M|                self.location.start.column + 1,
   51|  7.95M|                self.message
   52|  7.95M|            )
   53|  3.56M|        } else if self.location.start.line == self.location.end.line {
   54|  3.52M|            write!(
   55|  3.52M|                f,
   56|  3.52M|                "Parser error between at line {} between columns {} and column {}: {}",
   57|  3.52M|                self.location.start.line + 1,
   58|  3.52M|                self.location.start.column + 1,
   59|  3.52M|                self.location.end.column + 1,
   60|  3.52M|                self.message
   61|  3.52M|            )
   62|       |        } else {
   63|  43.7k|            write!(
   64|  43.7k|                f,
   65|  43.7k|                "Parser error between line {} column {} and line {} column {}: {}",
   66|  43.7k|                self.location.start.line + 1,
   67|  43.7k|                self.location.start.column + 1,
   68|  43.7k|                self.location.end.line + 1,
   69|  43.7k|                self.location.end.column + 1,
   70|  43.7k|                self.message
   71|  43.7k|            )
   72|       |        }
   73|  11.5M|    }
_RINvMNtNtCs8X3sjsXBtJI_5oxttl7toolkit5errorNtB3_17TurtleSyntaxError3newNtNtCs8f6x4lOZV33_5alloc6string6StringEB7_:
   22|  11.4M|    pub(crate) fn new(location: Range<TextPosition>, message: impl Into<String>) -> Self {
   23|  11.4M|        Self {
   24|  11.4M|            location,
   25|  11.4M|            message: message.into(),
   26|  11.4M|        }
   27|  11.4M|    }
_RINvMNtNtCs8X3sjsXBtJI_5oxttl7toolkit5errorNtB3_17TurtleSyntaxError3newReEB7_:
   22|  42.4k|    pub(crate) fn new(location: Range<TextPosition>, message: impl Into<String>) -> Self {
   23|  42.4k|        Self {
   24|  42.4k|            location,
   25|  42.4k|            message: message.into(),
   26|  42.4k|        }
   27|  42.4k|    }

_RNvXNtNtCs8X3sjsXBtJI_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCshZc3FwCJ069_4core7convert4FromTINtNtNtB1a_3ops5range5RangejENtNtCs8f6x4lOZV33_5alloc6string6StringEE4fromB6_:
   37|  3.57M|    fn from((location, message): (Range<usize>, S)) -> Self {
   38|  3.57M|        Self {
   39|  3.57M|            location,
   40|  3.57M|            message: message.into(),
   41|  3.57M|        }
   42|  3.57M|    }
_RNvXNtNtCs8X3sjsXBtJI_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCshZc3FwCJ069_4core7convert4FromTINtNtNtB1a_3ops5range5RangejEReEE4fromB6_:
   37|  2.09M|    fn from((location, message): (Range<usize>, S)) -> Self {
   38|  2.09M|        Self {
   39|  2.09M|            location,
   40|  2.09M|            message: message.into(),
   41|  2.09M|        }
   42|  2.09M|    }
_RNvXs_NtNtCs8X3sjsXBtJI_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCshZc3FwCJ069_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejENtNtCs8f6x4lOZV33_5alloc6string6StringEE4fromB8_:
   47|   175k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   48|   175k|        (*location.start()..*location.end() + 1, message).into()
   49|   175k|    }
_RNvXs_NtNtCs8X3sjsXBtJI_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCshZc3FwCJ069_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejEReEE4fromB8_:
   47|  1.51M|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   48|  1.51M|        (*location.start()..*location.end() + 1, message).into()
   49|  1.51M|    }
_RNvXs0_NtNtCs8X3sjsXBtJI_5oxttl7toolkit5lexerNtB5_20TokenRecognizerErrorINtNtCshZc3FwCJ069_4core7convert4FromTjNtNtCs8f6x4lOZV33_5alloc6string6StringEE4fromB9_:
   53|   153k|    fn from((location, message): (usize, S)) -> Self {
   54|   153k|        (location..=location, message).into()
   55|   153k|    }
_RNvMs1_NtNtCs8X3sjsXBtJI_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_5lexer7N3LexerE3newB9_:
   78|   104k|    pub fn new(
   79|   104k|        parser: R,
   80|   104k|        data: B,
   81|   104k|        is_ending: bool,
   82|   104k|        min_buffer_size: usize,
   83|   104k|        max_buffer_size: usize,
   84|   104k|        line_comment_start: Option<&'static [u8]>,
   85|   104k|    ) -> Self {
   86|   104k|        Self {
   87|   104k|            parser,
   88|   104k|            data,
   89|   104k|            position: Position {
   90|   104k|                line_start_buffer_offset: 0,
   91|   104k|                buffer_offset: 0,
   92|   104k|                global_offset: 0,
   93|   104k|                global_line: 0,
   94|   104k|            },
   95|   104k|            previous_position: Position {
   96|   104k|                line_start_buffer_offset: 0,
   97|   104k|                buffer_offset: 0,
   98|   104k|                global_offset: 0,
   99|   104k|                global_line: 0,
  100|   104k|            },
  101|   104k|            is_ending,
  102|   104k|            min_buffer_size,
  103|   104k|            max_buffer_size,
  104|   104k|            line_comment_start,
  105|   104k|        }
  106|   104k|    }
_RNvMs1_NtNtCs8X3sjsXBtJI_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE3newB9_:
   78|  52.0k|    pub fn new(
   79|  52.0k|        parser: R,
   80|  52.0k|        data: B,
   81|  52.0k|        is_ending: bool,
   82|  52.0k|        min_buffer_size: usize,
   83|  52.0k|        max_buffer_size: usize,
   84|  52.0k|        line_comment_start: Option<&'static [u8]>,
   85|  52.0k|    ) -> Self {
   86|  52.0k|        Self {
   87|  52.0k|            parser,
   88|  52.0k|            data,
   89|  52.0k|            position: Position {
   90|  52.0k|                line_start_buffer_offset: 0,
   91|  52.0k|                buffer_offset: 0,
   92|  52.0k|                global_offset: 0,
   93|  52.0k|                global_line: 0,
   94|  52.0k|            },
   95|  52.0k|            previous_position: Position {
   96|  52.0k|                line_start_buffer_offset: 0,
   97|  52.0k|                buffer_offset: 0,
   98|  52.0k|                global_offset: 0,
   99|  52.0k|                global_line: 0,
  100|  52.0k|            },
  101|  52.0k|            is_ending,
  102|  52.0k|            min_buffer_size,
  103|  52.0k|            max_buffer_size,
  104|  52.0k|            line_comment_start,
  105|  52.0k|        }
  106|  52.0k|    }
_RNvMs2_NtNtCs8X3sjsXBtJI_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_5lexer7N3LexerE17extend_from_sliceB9_:
  110|  6.63M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  111|  6.63M|        self.shrink_data();
  112|  6.63M|        self.data.extend_from_slice(other);
  113|  6.63M|    }
_RNvMs2_NtNtCs8X3sjsXBtJI_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_5lexer7N3LexerE3endB9_:
  116|   104k|    pub fn end(&mut self) {
  117|   104k|        self.is_ending = true;
  118|   104k|    }
_RNvMs2_NtNtCs8X3sjsXBtJI_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_5lexer7N3LexerE11shrink_dataB9_:
  172|  6.63M|    fn shrink_data(&mut self) {
  173|  6.63M|        if self.position.line_start_buffer_offset > 0 {
  174|   646k|            self.data
  175|   646k|                .copy_within(self.position.line_start_buffer_offset.., 0);
  176|   646k|            self.data
  177|   646k|                .truncate(self.data.len() - self.position.line_start_buffer_offset);
  178|   646k|            self.position.buffer_offset -= self.position.line_start_buffer_offset;
  179|   646k|            self.position.line_start_buffer_offset = 0;
  180|   646k|            self.previous_position = self.position;
  181|  5.98M|        }
  182|  6.63M|    }
_RNvMs3_NtNtCs8X3sjsXBtJI_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_5lexer7N3LexerE10parse_nextB9_:
  187|  23.0M|    pub fn parse_next(
  188|  23.0M|        &mut self,
  189|  23.0M|        options: &R::Options,
  190|  23.0M|    ) -> Option<Result<TokenOrLineJump<R::Token<'_>>, TurtleSyntaxError>> {
  191|  23.0M|        if self.skip_whitespaces_and_comments()? {
  192|  1.45M|            self.previous_position = self.position;
  193|  1.45M|            return Some(Ok(TokenOrLineJump::LineJump));
  194|  21.5M|        }
  195|  21.5M|        self.previous_position = self.position;
  196|  21.5M|        let Some((consumed, result)) = self.parser.recognize_next_token(
  197|  21.5M|            &self.data[self.position.buffer_offset..],
  198|  21.5M|            self.is_ending,
  199|  21.5M|            options,
  200|  21.5M|        ) else {
  201|  6.81M|            return if self.is_ending {
  202|   251k|                if self.position.buffer_offset == self.data.len() {
  203|   209k|                    None // We have finished
  204|       |                } else {
  205|  42.4k|                    let (new_line_jumps, new_line_start) =
  206|  42.4k|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  207|  42.4k|                            &self.data[self.position.buffer_offset..],
  208|  42.4k|                        );
  209|  42.4k|                    if new_line_jumps > 0 {
  210|  1.84k|                        self.position.line_start_buffer_offset =
  211|  1.84k|                            self.position.buffer_offset + new_line_start;
  212|  40.5k|                    }
  213|  42.4k|                    self.position.global_offset +=
  214|  42.4k|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  215|  42.4k|                    self.position.buffer_offset = self.data.len();
  216|  42.4k|                    self.position.global_line += new_line_jumps;
  217|  42.4k|                    let error = TurtleSyntaxError::new(
  218|  42.4k|                        self.last_token_location(),
  219|  42.4k|                        "Unexpected end of file",
  220|  42.4k|                    );
  221|  42.4k|                    Some(Err(error))
  222|       |                }
  223|       |            } else {
  224|  6.56M|                None
  225|       |            };
  226|       |        };
  227|  14.6M|        debug_assert!(
  228|      0|            consumed > 0,
  229|      0|            "The lexer must consume at least one byte each time"
  230|       |        );
  231|  14.6M|        debug_assert!(
  232|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  233|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  234|      0|            self.data.len() - self.position.buffer_offset
  235|       |        );
  236|  14.6M|        let (new_line_jumps, new_line_start) =
  237|  14.6M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  238|  14.6M|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  239|  14.6M|            );
  240|  14.6M|        if new_line_jumps > 0 {
  241|  83.3k|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  242|  14.6M|        }
  243|  14.6M|        self.position.buffer_offset += consumed;
  244|  14.6M|        self.position.global_offset += u64::try_from(consumed).unwrap();
  245|  14.6M|        self.position.global_line += new_line_jumps;
  246|  14.6M|        Some(result.map(TokenOrLineJump::Token).map_err(|e| {
  247|       |            TurtleSyntaxError::new(
  248|       |                self.location_from_buffer_offset_range(e.location),
  249|       |                e.message,
  250|       |            )
  251|  14.6M|        }))
  252|  23.0M|    }
_RNvMs3_NtNtCs8X3sjsXBtJI_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE10parse_nextB9_:
  187|  1.11M|    pub fn parse_next(
  188|  1.11M|        &mut self,
  189|  1.11M|        options: &R::Options,
  190|  1.11M|    ) -> Option<Result<TokenOrLineJump<R::Token<'_>>, TurtleSyntaxError>> {
  191|  1.11M|        if self.skip_whitespaces_and_comments()? {
  192|   173k|            self.previous_position = self.position;
  193|   173k|            return Some(Ok(TokenOrLineJump::LineJump));
  194|   938k|        }
  195|   938k|        self.previous_position = self.position;
  196|   938k|        let Some((consumed, result)) = self.parser.recognize_next_token(
  197|   938k|            &self.data[self.position.buffer_offset..],
  198|   938k|            self.is_ending,
  199|   938k|            options,
  200|   938k|        ) else {
  201|   104k|            return if self.is_ending {
  202|   104k|                if self.position.buffer_offset == self.data.len() {
  203|   104k|                    None // We have finished
  204|       |                } else {
  205|      0|                    let (new_line_jumps, new_line_start) =
  206|      0|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  207|      0|                            &self.data[self.position.buffer_offset..],
  208|      0|                        );
  209|      0|                    if new_line_jumps > 0 {
  210|      0|                        self.position.line_start_buffer_offset =
  211|      0|                            self.position.buffer_offset + new_line_start;
  212|      0|                    }
  213|      0|                    self.position.global_offset +=
  214|      0|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  215|      0|                    self.position.buffer_offset = self.data.len();
  216|      0|                    self.position.global_line += new_line_jumps;
  217|      0|                    let error = TurtleSyntaxError::new(
  218|      0|                        self.last_token_location(),
  219|      0|                        "Unexpected end of file",
  220|      0|                    );
  221|      0|                    Some(Err(error))
  222|       |                }
  223|       |            } else {
  224|      0|                None
  225|       |            };
  226|       |        };
  227|   834k|        debug_assert!(
  228|      0|            consumed > 0,
  229|      0|            "The lexer must consume at least one byte each time"
  230|       |        );
  231|   834k|        debug_assert!(
  232|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  233|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  234|      0|            self.data.len() - self.position.buffer_offset
  235|       |        );
  236|   834k|        let (new_line_jumps, new_line_start) =
  237|   834k|            Self::find_number_of_line_jumps_and_start_of_last_line(
  238|   834k|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  239|   834k|            );
  240|   834k|        if new_line_jumps > 0 {
  241|      0|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  242|   834k|        }
  243|   834k|        self.position.buffer_offset += consumed;
  244|   834k|        self.position.global_offset += u64::try_from(consumed).unwrap();
  245|   834k|        self.position.global_line += new_line_jumps;
  246|   834k|        Some(result.map(TokenOrLineJump::Token).map_err(|e| {
  247|       |            TurtleSyntaxError::new(
  248|       |                self.location_from_buffer_offset_range(e.location),
  249|       |                e.message,
  250|       |            )
  251|   834k|        }))
  252|  1.11M|    }
_RNCNvMs3_NtNtCs8X3sjsXBtJI_5oxttl7toolkit5lexerINtB7_5LexerINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtBb_5lexer7N3LexerE10parse_next0Bb_:
  246|  5.62M|        Some(result.map(TokenOrLineJump::Token).map_err(|e| {
  247|  5.62M|            TurtleSyntaxError::new(
  248|  5.62M|                self.location_from_buffer_offset_range(e.location),
  249|  5.62M|                e.message,
  250|  5.62M|            )
  251|  5.62M|        }))
_RNvMs3_NtNtCs8X3sjsXBtJI_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_5lexer7N3LexerE33location_from_buffer_offset_rangeB9_:
  254|  5.62M|    pub fn location_from_buffer_offset_range(
  255|  5.62M|        &self,
  256|  5.62M|        offset_range: Range<usize>,
  257|  5.62M|    ) -> Range<TextPosition> {
  258|  5.62M|        let start_offset = self.previous_position.buffer_offset + offset_range.start;
  259|  5.62M|        let (start_extra_line_jumps, start_line_start) =
  260|  5.62M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  261|  5.62M|                &self.data[self.previous_position.buffer_offset..start_offset],
  262|  5.62M|            );
  263|  5.62M|        let start_line_start = if start_extra_line_jumps > 0 {
  264|  3.53k|            start_line_start + self.previous_position.buffer_offset
  265|       |        } else {
  266|  5.62M|            self.previous_position.line_start_buffer_offset
  267|       |        };
  268|  5.62M|        let end_offset = self.previous_position.buffer_offset + offset_range.end;
  269|  5.62M|        let (end_extra_line_jumps, end_line_start) =
  270|  5.62M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  271|  5.62M|                &self.data[self.previous_position.buffer_offset..end_offset],
  272|  5.62M|            );
  273|  5.62M|        let end_line_start = if end_extra_line_jumps > 0 {
  274|  71.3k|            end_line_start + self.previous_position.buffer_offset
  275|       |        } else {
  276|  5.55M|            self.previous_position.line_start_buffer_offset
  277|       |        };
  278|  5.62M|        TextPosition {
  279|  5.62M|            line: self.previous_position.global_line + start_extra_line_jumps,
  280|  5.62M|            column: Self::column_from_bytes(&self.data[start_line_start..start_offset]),
  281|  5.62M|            offset: self.previous_position.global_offset
  282|  5.62M|                + u64::try_from(offset_range.start).unwrap(),
  283|  5.62M|        }..TextPosition {
  284|  5.62M|            line: self.previous_position.global_line + end_extra_line_jumps,
  285|  5.62M|            column: Self::column_from_bytes(&self.data[end_line_start..end_offset]),
  286|  5.62M|            offset: self.previous_position.global_offset + u64::try_from(offset_range.end).unwrap(),
  287|  5.62M|        }
  288|  5.62M|    }
_RNvMs3_NtNtCs8X3sjsXBtJI_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_5lexer7N3LexerE19last_token_locationB9_:
  290|  5.89M|    pub fn last_token_location(&self) -> Range<TextPosition> {
  291|  5.89M|        self.text_position_from_position(&self.previous_position)
  292|  5.89M|            ..self.text_position_from_position(&self.position)
  293|  5.89M|    }
_RNvMs3_NtNtCs8X3sjsXBtJI_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_5lexer7N3LexerE27text_position_from_positionB9_:
  295|  11.7M|    fn text_position_from_position(&self, position: &Position) -> TextPosition {
  296|  11.7M|        TextPosition {
  297|  11.7M|            line: position.global_line,
  298|  11.7M|            column: Self::column_from_bytes(
  299|  11.7M|                &self.data[position.line_start_buffer_offset..position.buffer_offset],
  300|  11.7M|            ),
  301|  11.7M|            offset: position.global_offset,
  302|  11.7M|        }
  303|  11.7M|    }
_RNvMs3_NtNtCs8X3sjsXBtJI_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_5lexer7N3LexerE17last_token_sourceB9_:
  305|  5.85M|    pub fn last_token_source(&self) -> Cow<'_, str> {
  306|  5.85M|        String::from_utf8_lossy(
  307|  5.85M|            &self.data[self.previous_position.buffer_offset..self.position.buffer_offset],
  308|  5.85M|        )
  309|  5.85M|    }
_RNvMs3_NtNtCs8X3sjsXBtJI_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_5lexer7N3LexerE6is_endB9_:
  311|  6.84M|    pub fn is_end(&self) -> bool {
  312|  6.84M|        self.is_ending && self.data.len() == self.position.buffer_offset
  313|  6.84M|    }
_RNvMs3_NtNtCs8X3sjsXBtJI_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE6is_endB9_:
  311|   104k|    pub fn is_end(&self) -> bool {
  312|   104k|        self.is_ending && self.data.len() == self.position.buffer_offset
  313|   104k|    }
_RNvMs3_NtNtCs8X3sjsXBtJI_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  316|  23.0M|    fn skip_whitespaces_and_comments(&mut self) -> Option<bool> {
  317|  23.0M|        if self.skip_whitespaces()? {
  318|  1.42M|            return Some(true);
  319|  21.5M|        }
  320|  21.5M|
  321|  21.5M|        let buf = &self.data[self.position.buffer_offset..];
  322|  21.5M|        if let Some(line_comment_start) = self.line_comment_start {
  323|  21.5M|            if buf.starts_with(line_comment_start) {
  324|       |                // Comment
  325|  91.9k|                if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  326|  40.6k|                    let mut end_position = line_comment_start.len() + end;
  327|  40.6k|                    if buf.get(end_position).copied() == Some(b'\r') {
  328|       |                        // We look for \n for Windows line end style
  329|  17.5k|                        if let Some(c) = buf.get(end_position + 1) {
  330|  10.5k|                            if *c == b'\n' {
  331|    211|                                end_position += 1;
  332|  10.3k|                            }
  333|  7.08k|                        } else if !self.is_ending {
  334|  7.05k|                            return None; // We need to read more
  335|     31|                        }
  336|  23.0k|                    }
  337|  33.6k|                    let comment_size = end_position + 1;
  338|  33.6k|                    self.position.buffer_offset += comment_size;
  339|  33.6k|                    self.position.line_start_buffer_offset = self.position.buffer_offset;
  340|  33.6k|                    self.position.global_offset += u64::try_from(comment_size).unwrap();
  341|  33.6k|                    self.position.global_line += 1;
  342|  33.6k|                    return Some(true);
  343|  51.2k|                }
  344|  51.2k|                if self.is_ending {
  345|  1.83k|                    self.position.buffer_offset = self.data.len(); // EOF
  346|  1.83k|                    return Some(false);
  347|  49.4k|                }
  348|  49.4k|                return None; // We need more data
  349|  21.5M|            }
  350|      0|        }
  351|  21.5M|        Some(false)
  352|  23.0M|    }
_RNvMs3_NtNtCs8X3sjsXBtJI_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  316|  1.11M|    fn skip_whitespaces_and_comments(&mut self) -> Option<bool> {
  317|  1.11M|        if self.skip_whitespaces()? {
  318|   173k|            return Some(true);
  319|   938k|        }
  320|   938k|
  321|   938k|        let buf = &self.data[self.position.buffer_offset..];
  322|   938k|        if let Some(line_comment_start) = self.line_comment_start {
  323|   938k|            if buf.starts_with(line_comment_start) {
  324|       |                // Comment
  325|      0|                if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  326|      0|                    let mut end_position = line_comment_start.len() + end;
  327|      0|                    if buf.get(end_position).copied() == Some(b'\r') {
  328|       |                        // We look for \n for Windows line end style
  329|      0|                        if let Some(c) = buf.get(end_position + 1) {
  330|      0|                            if *c == b'\n' {
  331|      0|                                end_position += 1;
  332|      0|                            }
  333|      0|                        } else if !self.is_ending {
  334|      0|                            return None; // We need to read more
  335|      0|                        }
  336|      0|                    }
  337|      0|                    let comment_size = end_position + 1;
  338|      0|                    self.position.buffer_offset += comment_size;
  339|      0|                    self.position.line_start_buffer_offset = self.position.buffer_offset;
  340|      0|                    self.position.global_offset += u64::try_from(comment_size).unwrap();
  341|      0|                    self.position.global_line += 1;
  342|      0|                    return Some(true);
  343|      0|                }
  344|      0|                if self.is_ending {
  345|      0|                    self.position.buffer_offset = self.data.len(); // EOF
  346|      0|                    return Some(false);
  347|      0|                }
  348|      0|                return None; // We need more data
  349|   938k|            }
  350|      0|        }
  351|   938k|        Some(false)
  352|  1.11M|    }
_RNvMs3_NtNtCs8X3sjsXBtJI_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  354|  23.0M|    fn skip_whitespaces(&mut self) -> Option<bool> {
  355|  23.0M|        let mut i = self.position.buffer_offset;
  356|  23.0M|        while let Some(c) = self.data.get(i) {
  357|  22.1M|            match c {
  358|  65.6k|                b' ' | b'\t' => {
  359|  65.6k|                    self.position.buffer_offset += 1;
  360|  65.6k|                    self.position.global_offset += 1;
  361|  65.6k|                }
  362|       |                b'\r' => {
  363|       |                    // We look for \n for Windows line end style
  364|  43.7k|                    let mut increment: u8 = 1;
  365|  43.7k|                    if let Some(c) = self.data.get(i + 1) {
  366|  33.8k|                        if *c == b'\n' {
  367|  1.26k|                            increment += 1;
  368|  32.6k|                        }
  369|  9.84k|                    } else if !self.is_ending {
  370|  9.39k|                        return None; // We need to read more
  371|    448|                    }
  372|  34.3k|                    self.position.buffer_offset += usize::from(increment);
  373|  34.3k|                    self.position.line_start_buffer_offset = self.position.buffer_offset;
  374|  34.3k|                    self.position.global_offset += u64::from(increment);
  375|  34.3k|                    self.position.global_line += 1;
  376|  34.3k|                    return Some(true);
  377|       |                }
  378|       |                b'\n' => {
  379|  1.38M|                    self.position.buffer_offset += 1;
  380|  1.38M|                    self.position.line_start_buffer_offset = self.position.buffer_offset;
  381|  1.38M|                    self.position.global_offset += 1;
  382|  1.38M|                    self.position.global_line += 1;
  383|  1.38M|                    return Some(true);
  384|       |                }
  385|  20.6M|                _ => return Some(false),
  386|       |            }
  387|  65.6k|            i += 1;
  388|       |            // TODO: SIMD
  389|       |        }
  390|   950k|        Some(false)
  391|  23.0M|    }
_RNvMs3_NtNtCs8X3sjsXBtJI_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  354|  1.11M|    fn skip_whitespaces(&mut self) -> Option<bool> {
  355|  1.11M|        let mut i = self.position.buffer_offset;
  356|  1.67M|        while let Some(c) = self.data.get(i) {
  357|  1.57M|            match c {
  358|   563k|                b' ' | b'\t' => {
  359|   563k|                    self.position.buffer_offset += 1;
  360|   563k|                    self.position.global_offset += 1;
  361|   563k|                }
  362|       |                b'\r' => {
  363|       |                    // We look for \n for Windows line end style
  364|      0|                    let mut increment: u8 = 1;
  365|      0|                    if let Some(c) = self.data.get(i + 1) {
  366|      0|                        if *c == b'\n' {
  367|      0|                            increment += 1;
  368|      0|                        }
  369|      0|                    } else if !self.is_ending {
  370|      0|                        return None; // We need to read more
  371|      0|                    }
  372|      0|                    self.position.buffer_offset += usize::from(increment);
  373|      0|                    self.position.line_start_buffer_offset = self.position.buffer_offset;
  374|      0|                    self.position.global_offset += u64::from(increment);
  375|      0|                    self.position.global_line += 1;
  376|      0|                    return Some(true);
  377|       |                }
  378|       |                b'\n' => {
  379|   173k|                    self.position.buffer_offset += 1;
  380|   173k|                    self.position.line_start_buffer_offset = self.position.buffer_offset;
  381|   173k|                    self.position.global_offset += 1;
  382|   173k|                    self.position.global_line += 1;
  383|   173k|                    return Some(true);
  384|       |                }
  385|   834k|                _ => return Some(false),
  386|       |            }
  387|   563k|            i += 1;
  388|       |            // TODO: SIMD
  389|       |        }
  390|   104k|        Some(false)
  391|  1.11M|    }
_RNvMs3_NtNtCs8X3sjsXBtJI_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  393|  25.9M|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  394|  25.9M|        let mut num_of_jumps = 0;
  395|  25.9M|        let mut last_jump_pos = 0;
  396|  25.9M|        let mut previous_cr = 0;
  397|  25.9M|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  398|   239k|            if bytes[pos] == b'\r' {
  399|  52.9k|                previous_cr = pos;
  400|  52.9k|                num_of_jumps += 1;
  401|  52.9k|                last_jump_pos = pos + 1;
  402|  52.9k|            } else {
  403|   186k|                if previous_cr < pos - 1 {
  404|   158k|                    // We count \r\n as a single line jump
  405|   158k|                    num_of_jumps += 1;
  406|   158k|                }
  407|   186k|                last_jump_pos = pos + 1;
  408|       |            }
  409|       |        }
  410|  25.9M|        (num_of_jumps, last_jump_pos)
  411|  25.9M|    }
_RNvMs3_NtNtCs8X3sjsXBtJI_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  393|   834k|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  394|   834k|        let mut num_of_jumps = 0;
  395|   834k|        let mut last_jump_pos = 0;
  396|   834k|        let mut previous_cr = 0;
  397|   834k|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  398|      0|            if bytes[pos] == b'\r' {
  399|      0|                previous_cr = pos;
  400|      0|                num_of_jumps += 1;
  401|      0|                last_jump_pos = pos + 1;
  402|      0|            } else {
  403|      0|                if previous_cr < pos - 1 {
  404|      0|                    // We count \r\n as a single line jump
  405|      0|                    num_of_jumps += 1;
  406|      0|                }
  407|      0|                last_jump_pos = pos + 1;
  408|       |            }
  409|       |        }
  410|   834k|        (num_of_jumps, last_jump_pos)
  411|   834k|    }
_RNvMs3_NtNtCs8X3sjsXBtJI_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_5lexer7N3LexerE17column_from_bytesB9_:
  413|  34.2M|    fn column_from_bytes(bytes: &[u8]) -> u64 {
  414|  34.2M|        match str::from_utf8(bytes) {
  415|  21.3M|            Ok(s) => u64::try_from(s.chars().count()).unwrap(),
  416|  12.8M|            Err(e) => {
  417|  12.8M|                if e.valid_up_to() == 0 {
  418|  1.71M|                    0
  419|       |                } else {
  420|  11.1M|                    Self::column_from_bytes(&bytes[..e.valid_up_to()])
  421|       |                }
  422|       |            }
  423|       |        }
  424|  34.2M|    }

_RNvXNtNtCs8X3sjsXBtJI_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCshZc3FwCJ069_4core7convert4FromNtNtCs8f6x4lOZV33_5alloc6string6StringE4fromB6_:
   40|   112k|    fn from(message: S) -> Self {
   41|   112k|        Self {
   42|   112k|            message: message.into(),
   43|   112k|        }
   44|   112k|    }
_RNvXNtNtCs8X3sjsXBtJI_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCshZc3FwCJ069_4core7convert4FromReE4fromB6_:
   40|  5.74M|    fn from(message: S) -> Self {
   41|  5.74M|        Self {
   42|  5.74M|            message: message.into(),
   43|  5.74M|        }
   44|  5.74M|    }
_RNvMs_NtNtCs8X3sjsXBtJI_5oxttl7toolkit6parserINtB4_6ParserINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB8_12line_formats16NQuadsRecognizerE3newB8_:
   57|   104k|    pub fn new(lexer: Lexer<B, RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   58|   104k|        Self {
   59|   104k|            lexer,
   60|   104k|            state: Some(recognizer),
   61|   104k|            context,
   62|   104k|            results: vec![],
   63|   104k|            errors: vec![],
   64|   104k|        }
   65|   104k|    }
_RNvMs_NtNtCs8X3sjsXBtJI_5oxttl7toolkit6parserINtB4_6ParserRShNtNtB8_12line_formats16NQuadsRecognizerE3newB8_:
   57|  52.0k|    pub fn new(lexer: Lexer<B, RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   58|  52.0k|        Self {
   59|  52.0k|            lexer,
   60|  52.0k|            state: Some(recognizer),
   61|  52.0k|            context,
   62|  52.0k|            results: vec![],
   63|  52.0k|            errors: vec![],
   64|  52.0k|        }
   65|  52.0k|    }
_RNvMs0_NtNtCs8X3sjsXBtJI_5oxttl7toolkit6parserINtB5_6ParserINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_12line_formats16NQuadsRecognizerE6is_endB9_:
   70|   104k|    pub fn is_end(&self) -> bool {
   71|   104k|        self.state.is_none() && self.results.is_empty() && self.errors.is_empty()
   72|   104k|    }
_RNvMs0_NtNtCs8X3sjsXBtJI_5oxttl7toolkit6parserINtB5_6ParserINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_12line_formats16NQuadsRecognizerE10parse_nextB9_:
   74|  18.6M|    pub fn parse_next(&mut self) -> Option<Result<RR::Output, TurtleSyntaxError>> {
   75|       |        loop {
   76|  29.2M|            if let Some(error) = self.errors.pop() {
   77|  5.85M|                return Some(Err(TurtleSyntaxError::new(
   78|  5.85M|                    self.lexer.last_token_location(),
   79|  5.85M|                    error
   80|  5.85M|                        .message
   81|  5.85M|                        .replace("TOKEN", &self.lexer.last_token_source()),
   82|  5.85M|                )));
   83|  23.3M|            }
   84|  23.3M|            if let Some(result) = self.results.pop() {
   85|   348k|                return Some(Ok(result));
   86|  23.0M|            }
   87|  23.0M|            if let Some(result) = self.lexer.parse_next(RR::lexer_options(&self.context)) {
   88|  16.1M|                match result {
   89|  10.5M|                    Ok(token) => {
   90|  10.5M|                        self.state = self.state.take().map(|state| {
   91|       |                            state.recognize_next(
   92|       |                                token,
   93|       |                                &mut self.context,
   94|       |                                &mut self.results,
   95|       |                                &mut self.errors,
   96|       |                            )
   97|  10.5M|                        });
   98|  10.5M|                        continue;
   99|       |                    }
  100|  5.67M|                    Err(e) => {
  101|  5.67M|                        self.state = self.state.take().map(RR::error_recovery_state);
  102|  5.67M|                        return Some(Err(e));
  103|       |                    }
  104|       |                }
  105|  6.84M|            }
  106|  6.84M|            if self.lexer.is_end() {
  107|   209k|                self.state.take()?.recognize_end(
  108|   104k|                    &mut self.context,
  109|   104k|                    &mut self.results,
  110|   104k|                    &mut self.errors,
  111|   104k|                )
  112|       |            } else {
  113|  6.63M|                return None;
  114|       |            }
  115|       |        }
  116|  18.6M|    }
_RNvMs0_NtNtCs8X3sjsXBtJI_5oxttl7toolkit6parserINtB5_6ParserRShNtNtB9_12line_formats16NQuadsRecognizerE10parse_nextB9_:
   74|   226k|    pub fn parse_next(&mut self) -> Option<Result<RR::Output, TurtleSyntaxError>> {
   75|       |        loop {
   76|  1.28M|            if let Some(error) = self.errors.pop() {
   77|      0|                return Some(Err(TurtleSyntaxError::new(
   78|      0|                    self.lexer.last_token_location(),
   79|      0|                    error
   80|      0|                        .message
   81|      0|                        .replace("TOKEN", &self.lexer.last_token_source()),
   82|      0|                )));
   83|  1.28M|            }
   84|  1.28M|            if let Some(result) = self.results.pop() {
   85|   173k|                return Some(Ok(result));
   86|  1.11M|            }
   87|  1.11M|            if let Some(result) = self.lexer.parse_next(RR::lexer_options(&self.context)) {
   88|  1.00M|                match result {
   89|  1.00M|                    Ok(token) => {
   90|  1.00M|                        self.state = self.state.take().map(|state| {
   91|       |                            state.recognize_next(
   92|       |                                token,
   93|       |                                &mut self.context,
   94|       |                                &mut self.results,
   95|       |                                &mut self.errors,
   96|       |                            )
   97|  1.00M|                        });
   98|  1.00M|                        continue;
   99|       |                    }
  100|      0|                    Err(e) => {
  101|      0|                        self.state = self.state.take().map(RR::error_recovery_state);
  102|      0|                        return Some(Err(e));
  103|       |                    }
  104|       |                }
  105|   104k|            }
  106|   104k|            if self.lexer.is_end() {
  107|   104k|                self.state.take()?.recognize_end(
  108|  52.0k|                    &mut self.context,
  109|  52.0k|                    &mut self.results,
  110|  52.0k|                    &mut self.errors,
  111|  52.0k|                )
  112|       |            } else {
  113|      0|                return None;
  114|       |            }
  115|       |        }
  116|   226k|    }
_RNCNvMs0_NtNtCs8X3sjsXBtJI_5oxttl7toolkit6parserINtB7_6ParserINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtBb_12line_formats16NQuadsRecognizerE10parse_next0Bb_:
   90|  10.5M|                        self.state = self.state.take().map(|state| {
   91|  10.5M|                            state.recognize_next(
   92|  10.5M|                                token,
   93|  10.5M|                                &mut self.context,
   94|  10.5M|                                &mut self.results,
   95|  10.5M|                                &mut self.errors,
   96|  10.5M|                            )
   97|  10.5M|                        });
_RNCNvMs0_NtNtCs8X3sjsXBtJI_5oxttl7toolkit6parserINtB7_6ParserRShNtNtBb_12line_formats16NQuadsRecognizerE10parse_next0Bb_:
   90|  1.00M|                        self.state = self.state.take().map(|state| {
   91|  1.00M|                            state.recognize_next(
   92|  1.00M|                                token,
   93|  1.00M|                                &mut self.context,
   94|  1.00M|                                &mut self.results,
   95|  1.00M|                                &mut self.errors,
   96|  1.00M|                            )
   97|  1.00M|                        });
_RNvMs1_NtNtCs8X3sjsXBtJI_5oxttl7toolkit6parserINtB5_6ParserINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_12line_formats16NQuadsRecognizerE3endB9_:
  121|   104k|    pub fn end(&mut self) {
  122|   104k|        self.lexer.end()
  123|   104k|    }
_RNvMs1_NtNtCs8X3sjsXBtJI_5oxttl7toolkit6parserINtB5_6ParserINtNtCs8f6x4lOZV33_5alloc3vec3VechENtNtB9_12line_formats16NQuadsRecognizerE17extend_from_sliceB9_:
  125|  6.63M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  126|  6.63M|        self.lexer.extend_from_slice(other)
  127|  6.63M|    }
_RNvXs2_NtNtCs8X3sjsXBtJI_5oxttl7toolkit6parserINtB5_6ParserRShNtNtB9_12line_formats16NQuadsRecognizerENtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect12IntoIterator9into_iterB9_:
  152|  52.0k|    fn into_iter(self) -> Self::IntoIter {
  153|  52.0k|        SliceIterator { parser: self }
  154|  52.0k|    }
_RNvXs4_NtNtCs8X3sjsXBtJI_5oxttl7toolkit6parserINtB5_13SliceIteratorNtNtB9_12line_formats16NQuadsRecognizerENtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4nextB9_:
  212|   226k|    fn next(&mut self) -> Option<Self::Item> {
  213|   226k|        self.parser.parse_next()
  214|   226k|    }













_RINvCshSz5G3uQ7q5_6nquads5parseARShj1_EB2_:
    7|  16.8k|fn parse<'a>(
    8|  16.8k|    chunks: impl IntoIterator<Item = &'a [u8]>,
    9|  16.8k|    unchecked: bool,
   10|  16.8k|) -> (Vec<Quad>, Vec<String>) {
   11|  16.8k|    let mut quads = Vec::new();
   12|  16.8k|    let mut errors = Vec::new();
   13|  16.8k|    let mut parser = NQuadsParser::new().with_quoted_triples();
   14|  16.8k|    if unchecked {
   15|      0|        parser = parser.unchecked();
   16|  16.8k|    }
   17|  16.8k|    let mut reader = parser.parse();
   18|  33.6k|    for chunk in chunks {
   19|  16.8k|        reader.extend_from_slice(chunk);
   20|  1.21M|        while let Some(result) = reader.read_next() {
   21|  1.19M|            match result {
   22|  75.2k|                Ok(quad) => quads.push(quad),
   23|  1.11M|                Err(error) => errors.push(error.to_string()),
   24|       |            }
   25|       |        }
   26|       |    }
   27|  16.8k|    reader.end();
   28|  27.8k|    while let Some(result) = reader.read_next() {
   29|  10.9k|        match result {
   30|  1.11k|            Ok(quad) => quads.push(quad),
   31|  9.86k|            Err(error) => errors.push(error.to_string()),
   32|       |        }
   33|       |    }
   34|  16.8k|    assert!(reader.is_end());
   35|  16.8k|    (quads, errors)
   36|  16.8k|}
_RINvCshSz5G3uQ7q5_6nquads5parseINtNtNtCscdEvteftVc2_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_run0EEB2_:
    7|  16.8k|fn parse<'a>(
    8|  16.8k|    chunks: impl IntoIterator<Item = &'a [u8]>,
    9|  16.8k|    unchecked: bool,
   10|  16.8k|) -> (Vec<Quad>, Vec<String>) {
   11|  16.8k|    let mut quads = Vec::new();
   12|  16.8k|    let mut errors = Vec::new();
   13|  16.8k|    let mut parser = NQuadsParser::new().with_quoted_triples();
   14|  16.8k|    if unchecked {
   15|      0|        parser = parser.unchecked();
   16|  16.8k|    }
   17|  16.8k|    let mut reader = parser.parse();
   18|  2.68M|    for chunk in chunks {
   19|  2.67M|        reader.extend_from_slice(chunk);
   20|  3.86M|        while let Some(result) = reader.read_next() {
   21|  1.19M|            match result {
   22|  75.2k|                Ok(quad) => quads.push(quad),
   23|  1.11M|                Err(error) => errors.push(error.to_string()),
   24|       |            }
   25|       |        }
   26|       |    }
   27|  16.8k|    reader.end();
   28|  27.8k|    while let Some(result) = reader.read_next() {
   29|  10.9k|        match result {
   30|  1.11k|            Ok(quad) => quads.push(quad),
   31|  9.86k|            Err(error) => errors.push(error.to_string()),
   32|       |        }
   33|       |    }
   34|  16.8k|    assert!(reader.is_end());
   35|  16.8k|    (quads, errors)
   36|  16.8k|}
_RINvCshSz5G3uQ7q5_6nquads5parseINtNtNtCscdEvteftVc2_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_runs0_0EEB2_:
    7|    321|fn parse<'a>(
    8|    321|    chunks: impl IntoIterator<Item = &'a [u8]>,
    9|    321|    unchecked: bool,
   10|    321|) -> (Vec<Quad>, Vec<String>) {
   11|    321|    let mut quads = Vec::new();
   12|    321|    let mut errors = Vec::new();
   13|    321|    let mut parser = NQuadsParser::new().with_quoted_triples();
   14|    321|    if unchecked {
   15|    321|        parser = parser.unchecked();
   16|    321|    }
   17|    321|    let mut reader = parser.parse();
   18|  15.8k|    for chunk in chunks {
   19|  15.5k|        reader.extend_from_slice(chunk);
   20|  17.4k|        while let Some(result) = reader.read_next() {
   21|  1.95k|            match result {
   22|  1.95k|                Ok(quad) => quads.push(quad),
   23|      0|                Err(error) => errors.push(error.to_string()),
   24|       |            }
   25|       |        }
   26|       |    }
   27|    321|    reader.end();
   28|    379|    while let Some(result) = reader.read_next() {
   29|     58|        match result {
   30|     58|            Ok(quad) => quads.push(quad),
   31|      0|            Err(error) => errors.push(error.to_string()),
   32|       |        }
   33|       |    }
   34|    321|    assert!(reader.is_end());
   35|    321|    (quads, errors)
   36|    321|}
_RNCNvNvCshSz5G3uQ7q5_6nquads1__19___libfuzzer_sys_run0B5_:
   40|  10.8M|    let (quads, errors) = parse(data.split(|c| *c == 0xFF), false);
_RNCNvNvCshSz5G3uQ7q5_6nquads1__19___libfuzzer_sys_runs_0B5_:
   46|  10.8M|            .filter(|c| *c != 0xFF)
_RNCNvNvCshSz5G3uQ7q5_6nquads1__19___libfuzzer_sys_runs0_0B5_:
   56|  65.0k|        let (quads_unchecked, errors_unchecked) = parse(data.split(|c| *c == 0xFF), true);

_RNvMNtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCshSz5G3uQ7q5_6nquads:
   88|  49.4k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|  49.4k|        BlankNodeRef(match &self.0 {
   90|  12.0k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|  37.4k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|  37.4k|                id: *id,
   93|  37.4k|                str: str.as_str(),
   94|  37.4k|            },
   95|       |        })
   96|  49.4k|    }
_RNvMs1_NtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCshSz5G3uQ7q5_6nquads:
  179|  49.4k|    pub const fn as_str(self) -> &'a str {
  180|  49.4k|        match self.0 {
  181|  12.0k|            BlankNodeRefContent::Named(id) => id,
  182|  37.4k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  183|       |        }
  184|  49.4k|    }
_RNvMs7_NtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB5_5IdStr6as_strCshSz5G3uQ7q5_6nquads:
  265|  37.4k|    fn as_str(&self) -> &str {
  266|  37.4k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|  37.4k|        str::from_utf8(&self.0[..len]).unwrap()
  268|  37.4k|    }
_RNvXs2_NtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtCshSz5G3uQ7q5_6nquads:
  220|  49.4k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  221|  49.4k|        write!(f, "_:{}", self.as_str())
  222|  49.4k|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idCs3Okv3MbnXN6_5oxttl:
   62|   130k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|   130k|        Self(BlankNodeContent::Anonymous {
   64|   130k|            id: id.to_ne_bytes(),
   65|   130k|            str: IdStr::new(id),
   66|   130k|        })
   67|   130k|    }
_RNvMs7_NtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB5_5IdStr3newCs3Okv3MbnXN6_5oxttl:
  258|   130k|    fn new(id: u128) -> Self {
  259|   130k|        let mut str = [0; 32];
  260|   130k|        write!(&mut str[..], "{id:x}").unwrap();
  261|   130k|        Self(str)
  262|   130k|    }
_RNvNtCsg6vp76A8CLh_5oxrdf10blank_node13to_integer_idCs3Okv3MbnXN6_5oxttl:
  331|   215k|fn to_integer_id(id: &str) -> Option<u128> {
  332|   215k|    let digits = id.as_bytes();
  333|   215k|    let mut value: u128 = 0;
  334|   215k|    if let None | Some(b'0') = digits.first() {
  335|  42.3k|        return None; // No empty string or leading zeros
  336|   173k|    }
  337|  1.38M|    for digit in digits {
  338|  1.25M|        value = value.checked_mul(16)?.checked_add(
  339|  1.25M|            match *digit {
  340|  1.25M|                b'0'..=b'9' => digit - b'0',
  341|  1.11M|                b'a'..=b'f' => digit - b'a' + 10,
  342|  41.0k|                _ => return None,
  343|       |            }
  344|  1.21M|            .into(),
  345|      0|        )?;
  346|       |    }
  347|   130k|    Some(value)
  348|   215k|}
_RINvMNtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedReECs3Okv3MbnXN6_5oxttl:
   49|   215k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   50|   215k|        let id = id.into();
   51|   215k|        if let Some(numerical_id) = to_integer_id(&id) {
   52|   130k|            Self::new_from_unique_id(numerical_id)
   53|       |        } else {
   54|  84.9k|            Self(BlankNodeContent::Named(id))
   55|       |        }
   56|   215k|    }
_RNCNvMs7_NtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  266|   388k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
_RNvMNtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB2_9BlankNode6as_refB4_:
   88|  11.5k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|  11.5k|        BlankNodeRef(match &self.0 {
   90|  10.7k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|    781|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|    781|                id: *id,
   93|    781|                str: str.as_str(),
   94|    781|            },
   95|       |        })
   96|  11.5k|    }
_RNvMs1_NtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strB7_:
  179|  11.5k|    pub const fn as_str(self) -> &'a str {
  180|  11.5k|        match self.0 {
  181|  10.7k|            BlankNodeRefContent::Named(id) => id,
  182|    781|            BlankNodeRefContent::Anonymous { str, .. } => str,
  183|       |        }
  184|  11.5k|    }
_RNvXs2_NtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtB7_:
  220|  11.5k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  221|  11.5k|        write!(f, "_:{}", self.as_str())
  222|  11.5k|    }
_RNvMs7_NtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB5_5IdStr6as_strB7_:
  265|    781|    fn as_str(&self) -> &str {
  266|    781|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|    781|        str::from_utf8(&self.0[..len]).unwrap()
  268|    781|    }

_RNvMNtCsg6vp76A8CLh_5oxrdf7literalNtB2_7Literal6as_refCshSz5G3uQ7q5_6nquads:
  129|  19.4k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|  19.4k|        LiteralRef(match &self.0 {
  131|  6.84k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|  10.6k|            LiteralContent::LanguageTaggedString { value, language } => {
  133|  10.6k|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|  1.97k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|  1.97k|                value,
  137|  1.97k|                datatype: datatype.as_ref(),
  138|  1.97k|            },
  139|       |        })
  140|  19.4k|    }
_RNvXsu_NtCsg6vp76A8CLh_5oxrdf7literalNtB5_10LiteralRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtCshSz5G3uQ7q5_6nquads:
  565|  19.4k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  566|  19.4k|        match self.0 {
  567|  6.84k|            LiteralRefContent::String(value) => print_quoted_str(value, f),
  568|  10.6k|            LiteralRefContent::LanguageTaggedString { value, language } => {
  569|  10.6k|                print_quoted_str(value, f)?;
  570|  10.6k|                write!(f, "@{language}")
  571|       |            }
  572|  1.97k|            LiteralRefContent::TypedLiteral { value, datatype } => {
  573|  1.97k|                print_quoted_str(value, f)?;
  574|  1.97k|                write!(f, "^^{datatype}")
  575|       |            }
  576|       |        }
  577|  19.4k|    }
_RINvMNtCsg6vp76A8CLh_5oxrdf7literalNtB3_7Literal18new_simple_literalRNtNtCs3OstG5Tqy1X_5alloc6string6StringECs3Okv3MbnXN6_5oxttl:
   47|    254|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|    254|        Self(LiteralContent::String(value.into()))
   49|    254|    }
_RINvMNtCsg6vp76A8CLh_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   47|  25.7k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|  25.7k|        Self(LiteralContent::String(value.into()))
   49|  25.7k|    }
_RINvMNtCsg6vp76A8CLh_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   53|  15.3k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|  15.3k|        let value = value.into();
   55|  15.3k|        let datatype = datatype.into();
   56|  15.3k|        Self(if datatype == xsd::STRING {
   57|  1.44k|            LiteralContent::String(value)
   58|       |        } else {
   59|  13.9k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|  15.3k|    }
_RINvMNtCsg6vp76A8CLh_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringB1n_EB5_:
   85|  41.9k|    pub fn new_language_tagged_literal_unchecked(
   86|  41.9k|        value: impl Into<String>,
   87|  41.9k|        language: impl Into<String>,
   88|  41.9k|    ) -> Self {
   89|  41.9k|        Self(LiteralContent::LanguageTaggedString {
   90|  41.9k|            value: value.into(),
   91|  41.9k|            language: language.into(),
   92|  41.9k|        })
   93|  41.9k|    }
_RINvNtCsg6vp76A8CLh_5oxrdf7literal16print_quoted_strNtNtCscdEvteftVc2_4core3fmt9FormatterEB4_:
  616|  21.9k|pub fn print_quoted_str(string: &str, f: &mut impl Write) -> fmt::Result {
  617|  21.9k|    f.write_char('"')?;
  618|   162k|    for c in string.chars() {
  619|   162k|        match c {
  620|  11.8k|            '\u{08}' => f.write_str("\\b"),
  621|  2.02k|            '\t' => f.write_str("\\t"),
  622|  2.56k|            '\n' => f.write_str("\\n"),
  623|    615|            '\u{0C}' => f.write_str("\\f"),
  624|  1.34k|            '\r' => f.write_str("\\r"),
  625|  1.06k|            '"' => f.write_str("\\\""),
  626|     82|            '\\' => f.write_str("\\\\"),
  627|   143k|            '\0'..='\u{1F}' | '\u{7F}' => write!(f, "\\u{:04X}", u32::from(c)),
  628|  72.0k|            _ => f.write_char(c),
  629|      0|        }?;
  630|       |    }
  631|  21.9k|    f.write_char('"')
  632|  21.9k|}
_RNvMNtCsg6vp76A8CLh_5oxrdf7literalNtB2_7Literal6as_refB4_:
  129|  2.52k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|  2.52k|        LiteralRef(match &self.0 {
  131|  1.23k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|    606|            LiteralContent::LanguageTaggedString { value, language } => {
  133|    606|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|    689|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|    689|                value,
  137|    689|                datatype: datatype.as_ref(),
  138|    689|            },
  139|       |        })
  140|  2.52k|    }
_RNvXsu_NtCsg6vp76A8CLh_5oxrdf7literalNtB5_10LiteralRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtB7_:
  565|  2.52k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  566|  2.52k|        match self.0 {
  567|  1.23k|            LiteralRefContent::String(value) => print_quoted_str(value, f),
  568|    606|            LiteralRefContent::LanguageTaggedString { value, language } => {
  569|    606|                print_quoted_str(value, f)?;
  570|    606|                write!(f, "@{language}")
  571|       |            }
  572|    689|            LiteralRefContent::TypedLiteral { value, datatype } => {
  573|    689|                print_quoted_str(value, f)?;
  574|    689|                write!(f, "^^{datatype}")
  575|       |            }
  576|       |        }
  577|  2.52k|    }

_RNvMNtCsg6vp76A8CLh_5oxrdf10named_nodeNtB2_9NamedNode6as_refCshSz5G3uQ7q5_6nquads:
   54|   175k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|   175k|        NamedNodeRef::new_unchecked(&self.iri)
   56|   175k|    }
_RNvMs4_NtCsg6vp76A8CLh_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCshSz5G3uQ7q5_6nquads:
  128|   175k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   175k|        Self { iri }
  130|   175k|    }
_RNvMs4_NtCsg6vp76A8CLh_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCshSz5G3uQ7q5_6nquads:
  133|   175k|    pub const fn as_str(self) -> &'a str {
  134|   175k|        self.iri
  135|   175k|    }
_RNvXs5_NtCsg6vp76A8CLh_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtCshSz5G3uQ7q5_6nquads:
  145|   175k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|   175k|        write!(f, "<{}>", self.as_str())
  147|   175k|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|  15.3k|    pub fn as_str(&self) -> &str {
   45|  15.3k|        self.iri.as_str()
   46|  15.3k|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf10named_nodeNtB2_9NamedNode6as_refB4_:
   54|  22.7k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  22.7k|        NamedNodeRef::new_unchecked(&self.iri)
   56|  22.7k|    }
_RNvMs4_NtCsg6vp76A8CLh_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedB7_:
  128|  22.7k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  22.7k|        Self { iri }
  130|  22.7k|    }
_RNvMs4_NtCsg6vp76A8CLh_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|  38.0k|    pub const fn as_str(self) -> &'a str {
  134|  38.0k|        self.iri
  135|  38.0k|    }
_RNvXs5_NtCsg6vp76A8CLh_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtB7_:
  145|  22.7k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|  22.7k|        write!(f, "<{}>", self.as_str())
  147|  22.7k|    }
_RNvXs9_NtCsg6vp76A8CLh_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCscdEvteftVc2_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|  15.3k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|  15.3k|        self.as_str() == other.as_str()
  175|  15.3k|    }
_RINvMNtCsg6vp76A8CLh_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   39|   748k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   748k|        Self { iri: iri.into() }
   41|   748k|    }

_RNvMs1c_NtCsg6vp76A8CLh_5oxrdf6tripleNtB6_9GraphName6as_refCshSz5G3uQ7q5_6nquads:
  965|  76.3k|    pub fn as_ref(&self) -> GraphNameRef<'_> {
  966|  76.3k|        match self {
  967|  8.79k|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.as_ref()),
  968|  15.6k|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.as_ref()),
  969|  51.9k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  970|       |        }
  971|  76.3k|    }
_RNvMs1k_NtCsg6vp76A8CLh_5oxrdf6tripleNtB6_12GraphNameRef16is_default_graphCshSz5G3uQ7q5_6nquads:
 1048|  76.3k|    pub fn is_default_graph(&self) -> bool {
 1049|  76.3k|        matches!(self, Self::DefaultGraph)
 1050|  76.3k|    }
_RNvMs1u_NtCsg6vp76A8CLh_5oxrdf6tripleNtB6_4Quad6as_refCshSz5G3uQ7q5_6nquads:
 1182|  76.3k|    pub fn as_ref(&self) -> QuadRef<'_> {
 1183|  76.3k|        QuadRef {
 1184|  76.3k|            subject: self.subject.as_ref(),
 1185|  76.3k|            predicate: self.predicate.as_ref(),
 1186|  76.3k|            object: self.object.as_ref(),
 1187|  76.3k|            graph_name: self.graph_name.as_ref(),
 1188|  76.3k|        }
 1189|  76.3k|    }
_RNvMsc_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_7Subject6as_refCshSz5G3uQ7q5_6nquads:
  181|  76.3k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  76.3k|        match self {
  183|  57.0k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|  12.9k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|  6.38k|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  76.3k|    }
_RNvMsy_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_4Term6as_refCshSz5G3uQ7q5_6nquads:
  417|  76.3k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|  76.3k|        match self {
  419|  31.7k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|  20.8k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  19.4k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|  4.27k|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|  76.3k|    }
_RNvXs1A_NtCsg6vp76A8CLh_5oxrdf6tripleNtB6_7QuadRefINtNtCscdEvteftVc2_4core7convert4FromRNtB6_4QuadE4fromCshSz5G3uQ7q5_6nquads:
 1298|  76.3k|    fn from(quad: &'a Quad) -> Self {
 1299|  76.3k|        quad.as_ref()
 1300|  76.3k|    }
_RNvXs1l_NtCsg6vp76A8CLh_5oxrdf6tripleNtB6_12GraphNameRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtCshSz5G3uQ7q5_6nquads:
 1064|  24.4k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1065|  24.4k|        match self {
 1066|  8.79k|            Self::NamedNode(node) => node.fmt(f),
 1067|  15.6k|            Self::BlankNode(node) => node.fmt(f),
 1068|      0|            Self::DefaultGraph => f.write_str("DEFAULT"),
 1069|       |        }
 1070|  24.4k|    }
_RNvXs1y_NtCsg6vp76A8CLh_5oxrdf6tripleNtB6_7QuadRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtCshSz5G3uQ7q5_6nquads:
 1272|  76.3k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1273|  76.3k|        if self.graph_name.is_default_graph() {
 1274|  51.9k|            write!(f, "{} {} {}", self.subject, self.predicate, self.object)
 1275|       |        } else {
 1276|  24.4k|            write!(
 1277|  24.4k|                f,
 1278|  24.4k|                "{} {} {} {}",
 1279|  24.4k|                self.subject, self.predicate, self.object, self.graph_name
 1280|  24.4k|            )
 1281|       |        }
 1282|  76.3k|    }
_RNvXsS_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_7TermRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtCshSz5G3uQ7q5_6nquads:
  650|  76.3k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  651|  76.3k|        match self {
  652|  31.7k|            Self::NamedNode(node) => node.fmt(f),
  653|  20.8k|            Self::BlankNode(node) => node.fmt(f),
  654|  19.4k|            Self::Literal(literal) => literal.fmt(f),
  655|       |            #[cfg(feature = "rdf-star")]
  656|  4.27k|            Self::Triple(triple) => {
  657|  4.27k|                write!(f, "<<{triple}>>")
  658|       |            }
  659|       |        }
  660|  76.3k|    }
_RNvXso_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_10SubjectRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtCshSz5G3uQ7q5_6nquads:
  306|  76.3k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  307|  76.3k|        match self {
  308|  57.0k|            Self::NamedNode(node) => node.fmt(f),
  309|  12.9k|            Self::BlankNode(node) => node.fmt(f),
  310|       |            #[cfg(feature = "rdf-star")]
  311|  6.38k|            Self::Triple(triple) => write!(f, "<<{triple}>>"),
  312|       |        }
  313|  76.3k|    }
_RNvXs1e_NtCsg6vp76A8CLh_5oxrdf6tripleNtB6_9GraphNameINtNtCscdEvteftVc2_4core7convert4FromNtNtB8_10named_node9NamedNodeE4fromCs3Okv3MbnXN6_5oxttl:
  983|  26.3k|    fn from(node: NamedNode) -> Self {
  984|  26.3k|        Self::NamedNode(node)
  985|  26.3k|    }
_RNvXs1g_NtCsg6vp76A8CLh_5oxrdf6tripleNtB6_9GraphNameINtNtCscdEvteftVc2_4core7convert4FromNtNtB8_10blank_node9BlankNodeE4fromCs3Okv3MbnXN6_5oxttl:
  997|  47.6k|    fn from(node: BlankNode) -> Self {
  998|  47.6k|        Self::BlankNode(node)
  999|  47.6k|    }
_RNvMsc_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_7Subject6as_refB7_:
  181|  12.6k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  12.6k|        match self {
  183|  8.47k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|  2.88k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|  1.33k|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  12.6k|    }
_RNvXse_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|   274k|    fn from(node: NamedNode) -> Self {
  201|   274k|        Self::NamedNode(node)
  202|   274k|    }
_RNvXsg_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|  67.4k|    fn from(node: BlankNode) -> Self {
  215|  67.4k|        Self::BlankNode(node)
  216|  67.4k|    }
_RNvXsi_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtB5_6TripleE4fromB7_:
  229|  37.9k|    fn from(node: Triple) -> Self {
  230|  37.9k|        Self::Triple(Box::new(node))
  231|  37.9k|    }
_RNvXso_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_10SubjectRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtB7_:
  306|  12.6k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  307|  12.6k|        match self {
  308|  8.47k|            Self::NamedNode(node) => node.fmt(f),
  309|  2.88k|            Self::BlankNode(node) => node.fmt(f),
  310|       |            #[cfg(feature = "rdf-star")]
  311|  1.33k|            Self::Triple(triple) => write!(f, "<<{triple}>>"),
  312|       |        }
  313|  12.6k|    }
_RNvMsy_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_4Term6as_refB7_:
  417|  12.6k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|  12.6k|        match self {
  419|    850|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|  8.62k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  2.52k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|    699|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|  12.6k|    }
_RNvXsA_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|   102k|    fn from(node: NamedNode) -> Self {
  438|   102k|        Self::NamedNode(node)
  439|   102k|    }
_RNvXsC_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  451|   100k|    fn from(node: BlankNode) -> Self {
  452|   100k|        Self::BlankNode(node)
  453|   100k|    }
_RNvXsE_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  465|  83.2k|    fn from(literal: Literal) -> Self {
  466|  83.2k|        Self::Literal(literal)
  467|  83.2k|    }
_RNvXsG_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtB5_6TripleE4fromB7_:
  480|  16.0k|    fn from(triple: Triple) -> Self {
  481|  16.0k|        Self::Triple(Box::new(triple))
  482|  16.0k|    }
_RNvXsS_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_7TermRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtB7_:
  650|  12.6k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  651|  12.6k|        match self {
  652|    850|            Self::NamedNode(node) => node.fmt(f),
  653|  8.62k|            Self::BlankNode(node) => node.fmt(f),
  654|  2.52k|            Self::Literal(literal) => literal.fmt(f),
  655|       |            #[cfg(feature = "rdf-star")]
  656|    699|            Self::Triple(triple) => {
  657|    699|                write!(f, "<<{triple}>>")
  658|       |            }
  659|       |        }
  660|  12.6k|    }
_RNvMs16_NtCsg6vp76A8CLh_5oxrdf6tripleNtB6_6Triple6as_refB8_:
  835|  12.6k|    pub fn as_ref(&self) -> TripleRef<'_> {
  836|  12.6k|        TripleRef {
  837|  12.6k|            subject: self.subject.as_ref(),
  838|  12.6k|            predicate: self.predicate.as_ref(),
  839|  12.6k|            object: self.object.as_ref(),
  840|  12.6k|        }
  841|  12.6k|    }
_RNvXs17_NtCsg6vp76A8CLh_5oxrdf6tripleNtB6_6TripleNtNtCscdEvteftVc2_4core3fmt7Display3fmtB8_:
  846|  12.6k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  847|  12.6k|        self.as_ref().fmt(f)
  848|  12.6k|    }
_RNvXs19_NtCsg6vp76A8CLh_5oxrdf6tripleNtB6_9TripleRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtB8_:
  919|  12.6k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  920|  12.6k|        write!(f, "{} {} {}", self.subject, self.predicate, self.object)
  921|  12.6k|    }

_RNCNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB6_7N3Lexer9parse_iris_0B8_:
  231|   235k|                    .map_err(|e| (position, e.to_string()))?
_RNCNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB6_7N3Lexer26recognize_pname_or_keyword0B8_:
  320|  74.9k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|  74.9k|                prefix: pn_prefix,
  322|  74.9k|                local,
  323|  74.9k|                might_be_invalid_iri,
  324|  74.9k|            }),
_RNCNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB6_7N3Lexer18recognize_variable0B8_:
  337|  28.9k|            result.and_then(|(name, _)| {
  338|  28.9k|                if name.is_empty() {
  339|  16.9k|                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|  11.9k|                    Ok(N3Token::Variable(name))
  342|       |                }
  343|  28.9k|            }),
_RNCNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB6_7N3Lexer14parse_lang_tag0B8_:
  582|  40.4k|                .map_err(|e| (position.clone(), e.to_string()))?
_RNCNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_char0B8_:
  819|  1.70k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  820|  1.70k|            (
  821|  1.70k|                position..position + len + 2,
  822|  1.70k|                format!(
  823|  1.70k|                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  824|  1.70k|                ),
  825|  1.70k|            )
  826|  1.70k|        })?;
_RNCNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_chars_0B8_:
  827|  1.95k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  828|  1.95k|            (
  829|  1.95k|                position..position + len +2,
  830|  1.95k|                format!(
  831|  1.95k|                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  832|  1.95k|                ),
  833|  1.95k|            )
  834|  1.95k|        })?;
_RNCNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB6_7N3Lexer22recognize_unicode_char0B8_:
  974|  26.5k|                .map(|c| (c, bytes_needed + 1))
_RNCNvNtCs3Okv3MbnXN6_5oxttl5lexer13str_from_utf80B5_:
 1046|  11.5k|    str::from_utf8(data).map_err(|e| {
 1047|  11.5k|        (
 1048|  11.5k|            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
 1049|  11.5k|            format!("Invalid UTF-8: {e}"),
 1050|  11.5k|        )
 1051|  11.5k|            .into()
 1052|  11.5k|    })
_RNCNvNtCs3Okv3MbnXN6_5oxttl5lexer16string_from_utf80B5_:
 1056|  25.1k|    String::from_utf8(data).map_err(|e| {
 1057|  25.1k|        (
 1058|  25.1k|            range.start + e.utf8_error().valid_up_to()
 1059|  25.1k|                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
 1060|  25.1k|            format!("Invalid UTF-8: {e}"),
 1061|  25.1k|        )
 1062|  25.1k|            .into()
 1063|  25.1k|    })
_RNvXNtCs3Okv3MbnXN6_5oxttl5lexerNtB2_7N3LexerNtNtNtB4_7toolkit5lexer15TokenRecognizer20recognize_next_token:
   55|  7.98M|    fn recognize_next_token<'a>(
   56|  7.98M|        &mut self,
   57|  7.98M|        data: &'a [u8],
   58|  7.98M|        is_ending: bool,
   59|  7.98M|        options: &N3LexerOptions,
   60|  7.98M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
   61|  7.98M|        match *data.first()? {
   62|  2.93M|            b'<' => match *data.get(1)? {
   63|   255k|                b'<' => Some((2, Ok(N3Token::Punctuation("<<")))),
   64|  2.74k|                b'=' if self.mode == N3LexerMode::N3 => {
   65|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   66|      0|                        Some(if let Ok(result) = result {
   67|      0|                            (consumed, Ok(result))
   68|       |                        } else {
   69|      0|                            (2, Ok(N3Token::Punctuation("<=")))
   70|       |                        })
   71|      0|                    } else if is_ending {
   72|      0|                        Some((2, Ok(N3Token::Punctuation("<="))))
   73|       |                    } else {
   74|      0|                        None
   75|       |                    }
   76|       |                }
   77|  6.11k|                b'-' if self.mode == N3LexerMode::N3 => {
   78|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   79|      0|                        Some(if let Ok(result) = result {
   80|      0|                            (consumed, Ok(result))
   81|       |                        } else {
   82|      0|                            (2, Ok(N3Token::Punctuation("<-")))
   83|       |                        })
   84|      0|                    } else if is_ending {
   85|      0|                        Some((2, Ok(N3Token::Punctuation("<-"))))
   86|       |                    } else {
   87|      0|                        None
   88|       |                    }
   89|       |                }
   90|  2.62M|                _ => self.recognize_iri(data, options),
   91|       |            },
   92|       |            b'>' => {
   93|   270k|                if *data.get(1)? == b'>' {
   94|   106k|                    Some((2, Ok(N3Token::Punctuation(">>"))))
   95|       |                } else {
   96|   145k|                    Some((1, Ok(N3Token::Punctuation(">"))))
   97|       |                }
   98|       |            }
   99|   666k|            b'_' => match data.get(1)? {
  100|   561k|                b':' => Self::recognize_blank_node_label(data),
  101|  85.5k|                c => Some((
  102|  85.5k|                    1,
  103|  85.5k|                    Err((0, format!("Unexpected character '{}'", char::from(*c))).into()),
  104|  85.5k|                )),
  105|       |            },
  106|       |            b'"' => {
  107|   343k|                if self.mode != N3LexerMode::NTriples
  108|      0|                    && *data.get(1)? == b'"'
  109|      0|                    && *data.get(2)? == b'"'
  110|       |                {
  111|      0|                    self.recognize_long_string(data, b'"')
  112|       |                } else {
  113|   343k|                    self.recognize_string(data, b'"')
  114|       |                }
  115|       |            }
  116|  10.5k|            b'\'' if self.mode != N3LexerMode::NTriples => {
  117|      0|                if *data.get(1)? == b'\'' && *data.get(2)? == b'\'' {
  118|      0|                    self.recognize_long_string(data, b'\'')
  119|       |                } else {
  120|      0|                    self.recognize_string(data, b'\'')
  121|       |                }
  122|       |            }
  123|   273k|            b'@' => self.recognize_lang_tag(data),
  124|   691k|            b'.' => match data.get(1) {
  125|   178k|                Some(b'0'..=b'9') => Self::recognize_number(data),
  126|   661k|                Some(_) => Some((1, Ok(N3Token::Punctuation(".")))),
  127|  18.5k|                None => is_ending.then_some((1, Ok(N3Token::Punctuation(".")))),
  128|       |            },
  129|       |            b'^' => {
  130|   111k|                if *data.get(1)? == b'^' {
  131|  59.8k|                    Some((2, Ok(N3Token::Punctuation("^^"))))
  132|       |                } else {
  133|  46.9k|                    Some((1, Ok(N3Token::Punctuation("^"))))
  134|       |                }
  135|       |            }
  136|  17.8k|            b'(' => Some((1, Ok(N3Token::Punctuation("(")))),
  137|  21.3k|            b')' => Some((1, Ok(N3Token::Punctuation(")")))),
  138|  23.4k|            b'[' => Some((1, Ok(N3Token::Punctuation("[")))),
  139|  24.3k|            b']' => Some((1, Ok(N3Token::Punctuation("]")))),
  140|       |            b'{' => {
  141|  13.1k|                if *data.get(1)? == b'|' {
  142|  2.04k|                    Some((2, Ok(N3Token::Punctuation("{|"))))
  143|       |                } else {
  144|  10.1k|                    Some((1, Ok(N3Token::Punctuation("{"))))
  145|       |                }
  146|       |            }
  147|  34.4k|            b'}' => Some((1, Ok(N3Token::Punctuation("}")))),
  148|  35.1k|            b',' => Some((1, Ok(N3Token::Punctuation(",")))),
  149|  11.0k|            b';' => Some((1, Ok(N3Token::Punctuation(";")))),
  150|  18.7k|            b'!' => Some((1, Ok(N3Token::Punctuation("!")))),
  151|       |            b'|' => {
  152|  6.10k|                if *data.get(1)? == b'}' {
  153|    508|                    Some((2, Ok(N3Token::Punctuation("|}"))))
  154|       |                } else {
  155|  5.33k|                    Some((1, Ok(N3Token::Punctuation("|"))))
  156|       |                }
  157|       |            }
  158|       |            b'=' => {
  159|  31.3k|                if *data.get(1)? == b'>' {
  160|  6.15k|                    Some((2, Ok(N3Token::Punctuation("=>"))))
  161|       |                } else {
  162|  21.9k|                    Some((1, Ok(N3Token::Punctuation("="))))
  163|       |                }
  164|       |            }
  165|  1.22M|            b'0'..=b'9' | b'+' | b'-' => Self::recognize_number(data),
  166|  51.9k|            b'?' => self.recognize_variable(data, is_ending),
  167|  1.77M|            _ => self.recognize_pname_or_keyword(data, is_ending),
  168|       |        }
  169|  7.98M|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer3new:
  173|  50.8k|    pub fn new(mode: N3LexerMode, unchecked: bool) -> Self {
  174|  50.8k|        Self { mode, unchecked }
  175|  50.8k|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer13recognize_iri:
  177|  2.62M|    fn recognize_iri(
  178|  2.62M|        &self,
  179|  2.62M|        data: &[u8],
  180|  2.62M|        options: &N3LexerOptions,
  181|  2.62M|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  182|  2.62M|        // [18] IRIREF  ::=  '<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
  183|  2.62M|        let mut string = Vec::new();
  184|  2.62M|        let mut i = 1;
  185|       |        loop {
  186|  2.64M|            let end = memchr2(b'>', b'\\', &data[i..])?;
  187|  1.11M|            string.extend_from_slice(&data[i..i + end]);
  188|  1.11M|            i += end;
  189|  1.11M|            match data[i] {
  190|       |                b'>' => {
  191|       |                    #[allow(clippy::range_plus_one)]
  192|  1.06M|                    return Some((i + 1, self.parse_iri(string, 0..i + 1, options)));
  193|       |                }
  194|       |                b'\\' => {
  195|  50.7k|                    let (additional, c) = self.recognize_escape(&data[i..], i, false)?;
  196|  39.0k|                    i += additional + 1;
  197|  39.0k|                    match c {
  198|  13.6k|                        Ok(c) => {
  199|  13.6k|                            let mut buf = [0; 4];
  200|  13.6k|                            string.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  201|  13.6k|                        }
  202|  25.3k|                        Err(e) => return Some((i, Err(e))),
  203|       |                    }
  204|       |                }
  205|      0|                _ => unreachable!(),
  206|       |            }
  207|       |        }
  208|  2.62M|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer9parse_iri:
  210|  1.06M|    fn parse_iri(
  211|  1.06M|        &self,
  212|  1.06M|        iri: Vec<u8>,
  213|  1.06M|        position: Range<usize>,
  214|  1.06M|        options: &N3LexerOptions,
  215|  1.06M|    ) -> Result<N3Token<'static>, TokenRecognizerError> {
  216|  1.06M|        let iri = string_from_utf8(iri, position.clone())?;
  217|       |        Ok(N3Token::IriRef(
  218|  1.03M|            if let Some(base_iri) = options.base_iri.as_ref() {
  219|      0|                if self.unchecked {
  220|      0|                    base_iri.resolve_unchecked(&iri)
  221|       |                } else {
  222|      0|                    base_iri
  223|      0|                        .resolve(&iri)
  224|      0|                        .map_err(|e| (position, e.to_string()))?
  225|       |                }
  226|      0|                .into_inner()
  227|  1.03M|            } else if self.unchecked {
  228|  4.76k|                iri
  229|       |            } else {
  230|  1.03M|                Iri::parse(iri)
  231|  1.03M|                    .map_err(|e| (position, e.to_string()))?
  232|   799k|                    .into_inner()
  233|       |            },
  234|       |        ))
  235|  1.06M|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer26recognize_pname_or_keyword:
  237|  1.77M|    fn recognize_pname_or_keyword<'a>(
  238|  1.77M|        &self,
  239|  1.77M|        data: &'a [u8],
  240|  1.77M|        is_ending: bool,
  241|  1.77M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  242|  1.77M|        // [139s]  PNAME_NS   ::=  PN_PREFIX? ':'
  243|  1.77M|        // [140s]  PNAME_LN   ::=  PNAME_NS PN_LOCAL
  244|  1.77M|        // [167s]  PN_PREFIX  ::=  PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
  245|  1.77M|        let mut i = 0;
  246|       |        loop {
  247|  2.86M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  248|  2.77M|                match r {
  249|  2.25M|                    Ok((c, consumed)) => {
  250|  2.25M|                        if c == ':' {
  251|   194k|                            i += consumed;
  252|   194k|                            break;
  253|  2.05M|                        } else if i == 0 {
  254|  1.17M|                            if !Self::is_possible_pn_chars_base(c) {
  255|   738k|                                return Some((
  256|   738k|                                    consumed,
  257|   738k|                                    Err((
  258|   738k|                                        0..consumed,
  259|   738k|                                        format!(
  260|   738k|                                            "'{c}' is not allowed at the beginning of a prefix name"
  261|   738k|                                        ),
  262|   738k|                                    )
  263|   738k|                                        .into()),
  264|   738k|                                ));
  265|   439k|                            }
  266|   439k|                            i += consumed;
  267|   879k|                        } else if Self::is_possible_pn_chars(c) || c == '.' {
  268|   655k|                            i += consumed;
  269|   655k|                        } else {
  270|   274k|                            while data[..i].ends_with(b".") {
  271|  49.2k|                                i -= 1;
  272|  49.2k|                            }
  273|   224k|                            return Some((
  274|   224k|                                i,
  275|   224k|                                str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  276|   224k|                            ));
  277|       |                        }
  278|       |                    }
  279|   519k|                    Err(e) => return Some((e.location.end, Err(e))),
  280|       |                }
  281|  93.5k|            } else if is_ending {
  282|  7.77k|                while data[..i].ends_with(b".") {
  283|  3.27k|                    i -= 1;
  284|  3.27k|                }
  285|  4.50k|                return Some(if i == 0 {
  286|  1.05k|                    (
  287|  1.05k|                        1,
  288|  1.05k|                        Err((0..1, format!("Unexpected byte {}", data[0])).into()),
  289|  1.05k|                    )
  290|       |                } else {
  291|  3.44k|                    (
  292|  3.44k|                        i,
  293|  3.44k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  294|  3.44k|                    )
  295|       |                });
  296|       |            } else {
  297|  89.0k|                return None;
  298|       |            }
  299|       |        }
  300|   194k|        let pn_prefix = match str_from_utf8(&data[..i - 1], 0..i - 1) {
  301|   194k|            Ok(pn_prefix) => pn_prefix,
  302|      0|            Err(e) => return Some((i, Err(e))),
  303|       |        };
  304|   194k|        if pn_prefix.ends_with('.') {
  305|  2.40k|            return Some((
  306|  2.40k|                i,
  307|  2.40k|                Err((
  308|  2.40k|                    0..i,
  309|  2.40k|                    format!(
  310|  2.40k|                        "'{pn_prefix}' is not a valid prefix: prefixes are not allowed to end with '.'"),
  311|  2.40k|                )
  312|  2.40k|                    .into()),
  313|  2.40k|            ));
  314|   191k|        }
  315|       |
  316|  96.5k|        let (consumed, pn_local_result) =
  317|   191k|            self.recognize_optional_pn_local(&data[i..], is_ending)?;
  318|  96.5k|        Some((
  319|  96.5k|            consumed + i,
  320|  96.5k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|       |                prefix: pn_prefix,
  322|       |                local,
  323|       |                might_be_invalid_iri,
  324|  96.5k|            }),
  325|  96.5k|        ))
  326|  1.77M|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer18recognize_variable:
  328|  51.9k|    fn recognize_variable<'a>(
  329|  51.9k|        &self,
  330|  51.9k|        data: &'a [u8],
  331|  51.9k|        is_ending: bool,
  332|  51.9k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  333|       |        // [36]  QUICK_VAR_NAME  ::=  "?" PN_LOCAL
  334|  51.9k|        let (consumed, result) = self.recognize_optional_pn_local(&data[1..], is_ending)?;
  335|  34.6k|        Some((
  336|  34.6k|            consumed + 1,
  337|  34.6k|            result.and_then(|(name, _)| {
  338|       |                if name.is_empty() {
  339|       |                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|       |                    Ok(N3Token::Variable(name))
  342|       |                }
  343|  34.6k|            }),
  344|  34.6k|        ))
  345|  51.9k|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer27recognize_optional_pn_local:
  347|   243k|    fn recognize_optional_pn_local<'a>(
  348|   243k|        &self,
  349|   243k|        data: &'a [u8],
  350|   243k|        is_ending: bool,
  351|   243k|    ) -> Option<(usize, Result<(Cow<'a, str>, bool), TokenRecognizerError>)> {
  352|   243k|        // [168s]  PN_LOCAL  ::=  (PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
  353|   243k|        let mut i = 0;
  354|   243k|        let mut buffer = None; // Buffer if there are some escaped characters
  355|   243k|        let mut position_that_is_already_in_buffer = 0;
  356|   243k|        let mut might_be_invalid_iri = false;
  357|   243k|        let mut ends_with_unescaped_dot = 0;
  358|       |        loop {
  359|   703k|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  360|   597k|                match r {
  361|   580k|                    Ok((c, consumed)) => {
  362|   580k|                        if c == '%' {
  363|  10.7k|                            i += 1;
  364|  10.7k|                            let a = char::from(*data.get(i)?);
  365|  7.70k|                            i += 1;
  366|  7.70k|                            let b = char::from(*data.get(i)?);
  367|  6.25k|                            if !a.is_ascii_hexdigit() || !b.is_ascii_hexdigit() {
  368|  4.61k|                                return Some((i + 1, Err((
  369|  4.61k|                                    i - 2..=i, format!("escapes in IRIs should be % followed by two hexadecimal characters, found '%{a}{b}'")
  370|  4.61k|                                ).into())));
  371|  1.64k|                            }
  372|  1.64k|                            i += 1;
  373|  1.64k|                            ends_with_unescaped_dot = 0;
  374|   569k|                        } else if c == '\\' {
  375|  77.0k|                            i += 1;
  376|  77.0k|                            let a = char::from(*data.get(i)?);
  377|  72.5k|                            if self.unchecked
  378|  39.6k|                                || matches!(
  379|  72.5k|                                    a,
  380|       |                                    '_' | '~'
  381|       |                                        | '.'
  382|       |                                        | '-'
  383|       |                                        | '!'
  384|       |                                        | '$'
  385|       |                                        | '&'
  386|       |                                        | '\''
  387|       |                                        | '('
  388|       |                                        | ')'
  389|       |                                        | '*'
  390|       |                                        | '+'
  391|       |                                        | ','
  392|       |                                        | ';'
  393|       |                                        | '='
  394|       |                                )
  395|  32.9k|                            {
  396|  32.9k|                                // ok to escape
  397|  39.6k|                            } else if matches!(a, '/' | '?' | '#' | '@' | '%') {
  398|  33.9k|                                // ok to escape but requires IRI validation
  399|  33.9k|                                might_be_invalid_iri = true;
  400|  33.9k|                            } else {
  401|  5.69k|                                return Some((i + 1, Err((
  402|  5.69k|                                    i..=i, format!("The character that are allowed to be escaped in IRIs are _~.-!$&'()*+,;=/?#@%, found '{a}'")
  403|  5.69k|                                ).into())));
  404|       |                            }
  405|  66.8k|                            let buffer = buffer.get_or_insert_with(String::new);
  406|  66.8k|                            // We add the missing bytes
  407|  66.8k|                            if i - position_that_is_already_in_buffer > 1 {
  408|  22.9k|                                buffer.push_str(
  409|  22.9k|                                    match str_from_utf8(
  410|  22.9k|                                        &data[position_that_is_already_in_buffer..i - 1],
  411|  22.9k|                                        position_that_is_already_in_buffer..i - 1,
  412|  22.9k|                                    ) {
  413|  22.9k|                                        Ok(data) => data,
  414|      0|                                        Err(e) => return Some((i, Err(e))),
  415|       |                                    },
  416|       |                                )
  417|  43.9k|                            }
  418|  66.8k|                            buffer.push(a);
  419|  66.8k|                            i += 1;
  420|  66.8k|                            position_that_is_already_in_buffer = i;
  421|  66.8k|                            ends_with_unescaped_dot = 0;
  422|   492k|                        } else if i == 0 {
  423|   143k|                            if !(Self::is_possible_pn_chars_u(c) || c == ':' || c.is_ascii_digit())
  424|       |                            {
  425|  57.1k|                                return Some((0, Ok((Cow::Borrowed(""), false))));
  426|  86.4k|                            }
  427|  86.4k|                            if !self.unchecked {
  428|       |                                might_be_invalid_iri |=
  429|  86.4k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  430|  86.4k|                                        || c == ':';
  431|      0|                            }
  432|  86.4k|                            i += consumed;
  433|   349k|                        } else if Self::is_possible_pn_chars(c) || c == ':' {
  434|   263k|                            if !self.unchecked {
  435|       |                                might_be_invalid_iri |=
  436|   263k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  437|   263k|                                        || c == ':';
  438|      0|                            }
  439|   263k|                            i += consumed;
  440|   263k|                            ends_with_unescaped_dot = 0;
  441|  85.6k|                        } else if c == '.' {
  442|  40.9k|                            i += consumed;
  443|  40.9k|                            ends_with_unescaped_dot += 1;
  444|  40.9k|                        } else {
  445|  44.6k|                            let buffer = if let Some(mut buffer) = buffer {
  446|  11.5k|                                buffer.push_str(
  447|  11.5k|                                    match str_from_utf8(
  448|  11.5k|                                        &data[position_that_is_already_in_buffer..i],
  449|  11.5k|                                        position_that_is_already_in_buffer..i,
  450|  11.5k|                                    ) {
  451|  11.5k|                                        Ok(data) => data,
  452|      0|                                        Err(e) => return Some((i, Err(e))),
  453|       |                                    },
  454|       |                                );
  455|       |                                // We do not include the last dots
  456|  11.5k|                                for _ in 0..ends_with_unescaped_dot {
  457|  7.47k|                                    buffer.pop();
  458|  7.47k|                                }
  459|  11.5k|                                i -= ends_with_unescaped_dot;
  460|  11.5k|                                Cow::Owned(buffer)
  461|       |                            } else {
  462|  33.1k|                                let mut data = match str_from_utf8(&data[..i], 0..i) {
  463|  33.1k|                                    Ok(data) => data,
  464|      0|                                    Err(e) => return Some((i, Err(e))),
  465|       |                                };
  466|       |                                // We do not include the last dots
  467|  33.1k|                                data = &data[..data.len() - ends_with_unescaped_dot];
  468|  33.1k|                                i -= ends_with_unescaped_dot;
  469|  33.1k|                                Cow::Borrowed(data)
  470|       |                            };
  471|  44.6k|                            return Some((i, Ok((buffer, might_be_invalid_iri))));
  472|       |                        }
  473|       |                    }
  474|  17.0k|                    Err(e) => return Some((e.location.end, Err(e))),
  475|       |                }
  476|   105k|            } else if is_ending {
  477|  2.01k|                let buffer = if let Some(mut buffer) = buffer {
  478|       |                    // We do not include the last dot
  479|    886|                    while buffer.ends_with('.') {
  480|    432|                        buffer.pop();
  481|    432|                        i -= 1;
  482|    432|                    }
  483|    454|                    Cow::Owned(buffer)
  484|       |                } else {
  485|  1.55k|                    let mut data = match str_from_utf8(&data[..i], 0..i) {
  486|  1.55k|                        Ok(data) => data,
  487|      0|                        Err(e) => return Some((i, Err(e))),
  488|       |                    };
  489|       |                    // We do not include the last dot
  490|  2.12k|                    while let Some(d) = data.strip_suffix('.') {
  491|    566|                        data = d;
  492|    566|                        i -= 1;
  493|    566|                    }
  494|  1.55k|                    Cow::Borrowed(data)
  495|       |                };
  496|  2.01k|                return Some((i, Ok((buffer, might_be_invalid_iri))));
  497|       |            } else {
  498|   103k|                return None;
  499|       |            }
  500|       |        }
  501|   243k|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer26recognize_blank_node_label:
  503|   561k|    fn recognize_blank_node_label(
  504|   561k|        data: &[u8],
  505|   561k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  506|   561k|        // [141s]  BLANK_NODE_LABEL  ::=  '_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
  507|   561k|        let mut i = 2;
  508|       |        loop {
  509|  4.29M|            match Self::recognize_unicode_char(&data[i..], i)? {
  510|  3.98M|                Ok((c, consumed)) => {
  511|  3.98M|                    if (i == 2 && (Self::is_possible_pn_chars_u(c) || c.is_ascii_digit()))
  512|  3.49M|                        || (i > 2 && Self::is_possible_pn_chars(c))
  513|  3.68M|                    {
  514|  3.68M|                        // Ok
  515|  3.68M|                    } else if i > 2 && c == '.' {
  516|  59.3k|                        if data[i - 1] == b'.' {
  517|  6.79k|                            i -= 1;
  518|  6.79k|                            return Some((
  519|  6.79k|                                i,
  520|  6.79k|                                str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  521|  6.79k|                            ));
  522|  52.6k|                        }
  523|   245k|                    } else if i == 0 {
  524|      0|                        return Some((
  525|      0|                            i,
  526|      0|                            Err((0..i, "A blank node ID should not be empty").into()),
  527|      0|                        ));
  528|   245k|                    } else if data[i - 1] == b'.' {
  529|  42.1k|                        i -= 1;
  530|  42.1k|                        return Some((
  531|  42.1k|                            i,
  532|  42.1k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  533|  42.1k|                        ));
  534|       |                    } else {
  535|   203k|                        return Some((
  536|   203k|                            i,
  537|   203k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  538|   203k|                        ));
  539|       |                    }
  540|  3.73M|                    i += consumed;
  541|       |                }
  542|  6.25k|                Err(e) => return Some((e.location.end, Err(e))),
  543|       |            }
  544|       |        }
  545|   561k|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer18recognize_lang_tag:
  547|   273k|    fn recognize_lang_tag<'a>(
  548|   273k|        &self,
  549|   273k|        data: &'a [u8],
  550|   273k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  551|   273k|        // [144s]  LANGTAG  ::=  '@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
  552|   273k|        let mut is_last_block_empty = true;
  553|  1.77M|        for (i, c) in data[1..].iter().enumerate() {
  554|  1.77M|            if c.is_ascii_alphabetic() {
  555|  1.35M|                is_last_block_empty = false;
  556|  1.35M|            } else if i == 0 {
  557|  50.5k|                return Some((
  558|  50.5k|                    1,
  559|  50.5k|                    Err((1..2, "A language code should always start with a letter").into()),
  560|  50.5k|                ));
  561|   368k|            } else if is_last_block_empty {
  562|  10.5k|                return Some((i, self.parse_lang_tag(&data[1..i], 1..i - 1)));
  563|   357k|            } else if *c == b'-' {
  564|   218k|                is_last_block_empty = true;
  565|   218k|            } else {
  566|   138k|                return Some((i + 1, self.parse_lang_tag(&data[1..=i], 1..i)));
  567|       |            }
  568|       |        }
  569|  73.4k|        None
  570|   273k|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer14parse_lang_tag:
  572|   149k|    fn parse_lang_tag<'a>(
  573|   149k|        &self,
  574|   149k|        lang_tag: &'a [u8],
  575|   149k|        position: Range<usize>,
  576|   149k|    ) -> Result<N3Token<'a>, TokenRecognizerError> {
  577|   149k|        let lang_tag = str_from_utf8(lang_tag, position.clone())?;
  578|   149k|        Ok(N3Token::LangTag(if self.unchecked {
  579|     37|            lang_tag
  580|       |        } else {
  581|   149k|            LanguageTag::parse(lang_tag)
  582|   149k|                .map_err(|e| (position.clone(), e.to_string()))?
  583|   108k|                .into_inner()
  584|       |        }))
  585|   149k|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer16recognize_string:
  587|   343k|    fn recognize_string(
  588|   343k|        &self,
  589|   343k|        data: &[u8],
  590|   343k|        delimiter: u8,
  591|   343k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  592|   343k|        // [22]  STRING_LITERAL_QUOTE         ::=  '"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
  593|   343k|        // [23]  STRING_LITERAL_SINGLE_QUOTE  ::=  "'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
  594|   343k|        let mut string = String::new();
  595|   343k|        let mut i = 1;
  596|       |        loop {
  597|   513k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  598|   429k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  599|   422k|                Ok(s) => string.push_str(s),
  600|  7.53k|                Err(e) => return Some((end, Err(e))),
  601|       |            };
  602|   422k|            i += end;
  603|   422k|            match data[i] {
  604|   422k|                c if c == delimiter => {
  605|   211k|                    return Some((i + 1, Ok(N3Token::String(string))));
  606|       |                }
  607|       |                b'\\' => {
  608|   210k|                    let (additional, c) = self.recognize_escape(&data[i..], i, true)?;
  609|   209k|                    i += additional + 1;
  610|   209k|                    match c {
  611|   169k|                        Ok(c) => {
  612|   169k|                            string.push(c);
  613|   169k|                        }
  614|  40.4k|                        Err(e) => {
  615|       |                            // We read until the end of string char
  616|  40.4k|                            let end = memchr(delimiter, &data[i..])?;
  617|  17.9k|                            return Some((i + end + 1, Err(e)));
  618|       |                        }
  619|       |                    }
  620|       |                }
  621|      0|                _ => unreachable!(),
  622|       |            }
  623|       |        }
  624|   343k|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer16recognize_number:
  665|   255k|    fn recognize_number(data: &[u8]) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  666|   255k|        // [19]  INTEGER    ::=  [+-]? [0-9]+
  667|   255k|        // [20]  DECIMAL    ::=  [+-]? [0-9]* '.' [0-9]+
  668|   255k|        // [21]  DOUBLE     ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  669|   255k|        // [154s] EXPONENT  ::=  [eE] [+-]? [0-9]+
  670|   255k|        let mut i = 0;
  671|   255k|        let c = *data.first()?;
  672|   255k|        if matches!(c, b'+' | b'-') {
  673|   101k|            i += 1;
  674|   153k|        }
  675|       |        // We read the digits before .
  676|   255k|        let mut count_before: usize = 0;
  677|       |        loop {
  678|   511k|            let c = *data.get(i)?;
  679|   469k|            if c.is_ascii_digit() {
  680|   256k|                i += 1;
  681|   256k|                count_before += 1;
  682|   256k|            } else {
  683|   213k|                break;
  684|       |            }
  685|       |        }
  686|       |
  687|       |        // We read the digits after .
  688|       |        #[allow(clippy::if_then_some_else_none)]
  689|   213k|        let count_after = if *data.get(i)? == b'.' {
  690|  25.1k|            i += 1;
  691|  25.1k|
  692|  25.1k|            let mut count_after = 0;
  693|       |            loop {
  694|  80.1k|                let c = *data.get(i)?;
  695|  74.0k|                if c.is_ascii_digit() {
  696|  55.0k|                    i += 1;
  697|  55.0k|                    count_after += 1;
  698|  55.0k|                } else {
  699|  19.0k|                    break;
  700|  19.0k|                }
  701|  19.0k|            }
  702|  19.0k|            Some(count_after)
  703|       |        } else {
  704|   188k|            None
  705|       |        };
  706|       |
  707|       |        // End
  708|   207k|        let c = *data.get(i)?;
  709|   207k|        if matches!(c, b'e' | b'E') {
  710|  21.1k|            i += 1;
  711|       |
  712|  21.1k|            let c = *data.get(i)?;
  713|  15.2k|            if matches!(c, b'+' | b'-') {
  714|  1.88k|                i += 1;
  715|  13.3k|            }
  716|       |
  717|  15.2k|            let mut found = false;
  718|       |            loop {
  719|  25.7k|                let c = *data.get(i)?;
  720|  21.8k|                if c.is_ascii_digit() {
  721|  10.4k|                    i += 1;
  722|  10.4k|                    found = true;
  723|  10.4k|                } else {
  724|  11.3k|                    break;
  725|  11.3k|                }
  726|  11.3k|            }
  727|  11.3k|            Some((
  728|  11.3k|                i,
  729|  11.3k|                if !found {
  730|  6.64k|                    Err((0..i, "A double exponent cannot be empty").into())
  731|  4.67k|                } else if count_before == 0 && count_after.unwrap_or(0) == 0 {
  732|  2.04k|                    Err((0..i, "A double should not be empty").into())
  733|       |                } else {
  734|  2.63k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Double)
  735|       |                },
  736|       |            ))
  737|   186k|        } else if let Some(count_after) = count_after {
  738|  17.3k|            if count_after == 0 {
  739|       |                // We do not consume the '.' after all
  740|  9.74k|                i -= 1;
  741|  9.74k|                Some((
  742|  9.74k|                    i,
  743|  9.74k|                    if count_before == 0 {
  744|  3.82k|                        Err((0..i, "An integer should not be empty").into())
  745|       |                    } else {
  746|  5.91k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  747|       |                    },
  748|       |                ))
  749|       |            } else {
  750|  7.57k|                Some((i, str_from_utf8(&data[..i], 0..i).map(N3Token::Decimal)))
  751|       |            }
  752|       |        } else {
  753|       |            Some((
  754|   169k|                i,
  755|   169k|                if count_before == 0 {
  756|  69.7k|                    Err((0..i, "An integer should not be empty").into())
  757|       |                } else {
  758|  99.5k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  759|       |                },
  760|       |            ))
  761|       |        }
  762|   255k|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer16recognize_escape:
  764|   261k|    fn recognize_escape(
  765|   261k|        &self,
  766|   261k|        data: &[u8],
  767|   261k|        position: usize,
  768|   261k|        with_echar: bool,
  769|   261k|    ) -> Option<(usize, Result<char, TokenRecognizerError>)> {
  770|   261k|        // [26]   UCHAR  ::=  '\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
  771|   261k|        // [159s] ECHAR  ::=  '\' [tbnrf"'\]
  772|   261k|        match *data.get(1)? {
  773|  83.4k|            b'u' => match Self::recognize_hex_char(&data[2..], 4, 'u', position) {
  774|  77.5k|                Ok(c) => Some((5, Ok(c?))),
  775|  5.98k|                Err(e) => {
  776|  5.98k|                    if self.unchecked {
  777|      0|                        match Self::recognize_utf16_surrogate_pair(&data[2..], position) {
  778|      0|                            Ok(c) => Some((11, Ok(c?))),
  779|      0|                            Err(e) => Some((5, Err(e))),
  780|       |                        }
  781|       |                    } else {
  782|  5.98k|                        Some((5, Err(e)))
  783|       |                    }
  784|       |                }
  785|       |            },
  786|  17.4k|            b'U' => match Self::recognize_hex_char(&data[2..], 8, 'u', position) {
  787|  15.7k|                Ok(c) => Some((9, Ok(c?))),
  788|  1.70k|                Err(e) => Some((9, Err(e))),
  789|       |            },
  790|  2.53k|            b't' if with_echar => Some((1, Ok('\t'))),
  791|  75.5k|            b'b' if with_echar => Some((1, Ok('\x08'))),
  792|  2.87k|            b'n' if with_echar => Some((1, Ok('\n'))),
  793|  1.60k|            b'r' if with_echar => Some((1, Ok('\r'))),
  794|    944|            b'f' if with_echar => Some((1, Ok('\x0C'))),
  795|  4.75k|            b'"' if with_echar => Some((1, Ok('"'))),
  796|  2.37k|            b'\'' if with_echar => Some((1, Ok('\''))),
  797|  3.70k|            b'\\' if with_echar => Some((1, Ok('\\'))),
  798|  58.1k|            c => Some((
  799|  58.1k|                1,
  800|  58.1k|                Err((
  801|  58.1k|                    position..position + 2,
  802|  58.1k|                    format!("Unexpected escape character '\\{}'", char::from(c)),
  803|  58.1k|                )
  804|  58.1k|                    .into()),
  805|  58.1k|            )), // TODO: read until end of string
  806|       |        }
  807|   261k|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer18recognize_hex_char:
  809|   100k|    fn recognize_hex_char(
  810|   100k|        data: &[u8],
  811|   100k|        len: usize,
  812|   100k|        escape_char: char,
  813|   100k|        position: usize,
  814|   100k|    ) -> Result<Option<char>, TokenRecognizerError> {
  815|   100k|        if data.len() < len {
  816|  4.51k|            return Ok(None);
  817|  96.4k|        }
  818|  96.4k|        let val = str_from_utf8(&data[..len], position..position + len + 2)?;
  819|  92.3k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  820|       |            (
  821|       |                position..position + len + 2,
  822|       |                format!(
  823|       |                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  824|       |                ),
  825|       |            )
  826|  92.3k|        })?;
  827|  90.6k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  828|       |            (
  829|       |                position..position + len +2,
  830|       |                format!(
  831|       |                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  832|       |                ),
  833|       |            )
  834|  90.6k|        })?;
  835|  88.7k|        Ok(Some(c))
  836|   100k|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer22recognize_unicode_char:
  913|  7.86M|    fn recognize_unicode_char(
  914|  7.86M|        data: &[u8],
  915|  7.86M|        position: usize,
  916|  7.86M|    ) -> Option<Result<(char, usize), TokenRecognizerError>> {
  917|  7.86M|        let mut code_point: u32;
  918|  7.86M|        let bytes_needed: usize;
  919|  7.86M|        let mut lower_boundary = 0x80;
  920|  7.86M|        let mut upper_boundary = 0xBF;
  921|       |
  922|  7.86M|        let byte = *data.first()?;
  923|  7.39M|        match byte {
  924|  7.39M|            0x00..=0x7F => return Some(Ok((char::from(byte), 1))),
  925|   375k|            0xC2..=0xDF => {
  926|   108k|                bytes_needed = 1;
  927|   108k|                code_point = u32::from(byte) & 0x1F;
  928|   108k|            }
  929|   267k|            0xE0..=0xEF => {
  930|  44.1k|                if byte == 0xE0 {
  931|  6.95k|                    lower_boundary = 0xA0;
  932|  37.1k|                }
  933|  44.1k|                if byte == 0xED {
  934|  3.50k|                    upper_boundary = 0x9F;
  935|  40.6k|                }
  936|  44.1k|                bytes_needed = 2;
  937|  44.1k|                code_point = u32::from(byte) & 0xF;
  938|       |            }
  939|   223k|            0xF0..=0xF4 => {
  940|   175k|                if byte == 0xF0 {
  941|  32.4k|                    lower_boundary = 0x90;
  942|   143k|                }
  943|   175k|                if byte == 0xF4 {
  944|   126k|                    upper_boundary = 0x8F;
  945|   126k|                }
  946|   175k|                bytes_needed = 3;
  947|   175k|                code_point = u32::from(byte) & 0x7;
  948|       |            }
  949|       |            _ => {
  950|   272k|                return Some(Err((
  951|   272k|                    position..=position,
  952|   272k|                    "Invalid UTF-8 character encoding",
  953|   272k|                )
  954|   272k|                    .into()))
  955|       |            }
  956|       |        }
  957|       |
  958|   355k|        for i in 1..=bytes_needed {
  959|   355k|            let byte = *data.get(i)?;
  960|   324k|            if byte < lower_boundary || upper_boundary < byte {
  961|   270k|                return Some(Err((
  962|   270k|                    position..=position + i,
  963|   270k|                    "Invalid UTF-8 character encoding",
  964|   270k|                )
  965|   270k|                    .into()));
  966|  53.8k|            }
  967|  53.8k|            lower_boundary = 0x80;
  968|  53.8k|            upper_boundary = 0xBF;
  969|  53.8k|            code_point = (code_point << 6) | (u32::from(byte) & 0x3F);
  970|       |        }
  971|       |
  972|  26.5k|        Some(
  973|  26.5k|            char::from_u32(code_point)
  974|  26.5k|                .map(|c| (c, bytes_needed + 1))
  975|  26.5k|                .ok_or_else(|| {
  976|       |                    (
  977|       |                        position..=position + bytes_needed,
  978|       |                        format!("The codepoint {code_point:X} is not a valid unicode character"),
  979|       |                    )
  980|       |                        .into()
  981|  26.5k|                }),
  982|  26.5k|        )
  983|  7.86M|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer25is_possible_pn_chars_base:
  986|  6.53M|    fn is_possible_pn_chars_base(c: char) -> bool {
  987|  6.53M|        matches!(c,
  988|  4.22M|        'A'..='Z'
  989|  3.32M|        | 'a'..='z'
  990|  22.1k|        | '\u{00C0}'..='\u{00D6}'
  991|  21.4k|        | '\u{00D8}'..='\u{00F6}'
  992|  21.4k|        | '\u{00F8}'..='\u{02FF}'
  993|  15.6k|        | '\u{0370}'..='\u{037D}'
  994|  15.4k|        | '\u{037F}'..='\u{1FFF}'
  995|  12.2k|        | '\u{200C}'..='\u{200D}'
  996|  12.2k|        | '\u{2070}'..='\u{218F}'
  997|  12.2k|        | '\u{2C00}'..='\u{2FEF}'
  998|  12.2k|        | '\u{3001}'..='\u{D7FF}'
  999|  9.68k|        | '\u{F900}'..='\u{FDCF}'
 1000|  9.68k|        | '\u{FDF0}'..='\u{FFFD}'
 1001|  9.68k|        | '\u{10000}'..='\u{EFFFF}')
 1002|  6.53M|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer22is_possible_pn_chars_u:
 1005|  5.36M|    pub(super) fn is_possible_pn_chars_u(c: char) -> bool {
 1006|  5.36M|        Self::is_possible_pn_chars_base(c) || c == '_'
 1007|  5.36M|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer20is_possible_pn_chars:
 1010|  4.67M|    pub(crate) fn is_possible_pn_chars(c: char) -> bool {
 1011|  4.67M|        Self::is_possible_pn_chars_u(c)
 1012|  1.51M|            || matches!(c,
 1013|   990k|        '-' | '0'..='9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
 1014|  4.67M|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer43is_possible_pn_chars_base_but_not_valid_iri:
 1016|   350k|    fn is_possible_pn_chars_base_but_not_valid_iri(c: char) -> bool {
 1017|   350k|        matches!(c, '\u{FFF0}'..='\u{FFFD}')
 1018|   350k|            || u32::from(c) % u32::from('\u{FFFE}') == 0
 1019|   350k|            || u32::from(c) % u32::from('\u{FFFF}') == 0
 1020|   350k|    }
_RNvNtCs3Okv3MbnXN6_5oxttl5lexer13str_from_utf8:
 1045|  1.53M|fn str_from_utf8(data: &[u8], range: Range<usize>) -> Result<&str, TokenRecognizerError> {
 1046|  1.53M|    str::from_utf8(data).map_err(|e| {
 1047|       |        (
 1048|       |            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
 1049|       |            format!("Invalid UTF-8: {e}"),
 1050|       |        )
 1051|       |            .into()
 1052|  1.53M|    })
 1053|  1.53M|}
_RNvNtCs3Okv3MbnXN6_5oxttl5lexer16string_from_utf8:
 1055|  1.06M|fn string_from_utf8(data: Vec<u8>, range: Range<usize>) -> Result<String, TokenRecognizerError> {
 1056|  1.06M|    String::from_utf8(data).map_err(|e| {
 1057|       |        (
 1058|       |            range.start + e.utf8_error().valid_up_to()
 1059|       |                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
 1060|       |            format!("Invalid UTF-8: {e}"),
 1061|       |        )
 1062|       |            .into()
 1063|  1.06M|    })
 1064|  1.06M|}

_RINvMs_NtCs3Okv3MbnXN6_5oxttl12line_formatsNtB5_16NQuadsRecognizer10new_parserINtNtCs3OstG5Tqy1X_5alloc3vec3VechEEB7_:
  266|  33.9k|    pub fn new_parser<B>(
  267|  33.9k|        data: B,
  268|  33.9k|        is_ending: bool,
  269|  33.9k|        with_graph_name: bool,
  270|  33.9k|        #[cfg(feature = "rdf-star")] with_quoted_triples: bool,
  271|  33.9k|        unchecked: bool,
  272|  33.9k|    ) -> Parser<B, Self> {
  273|  33.9k|        Parser::new(
  274|  33.9k|            Lexer::new(
  275|  33.9k|                N3Lexer::new(N3LexerMode::NTriples, unchecked),
  276|  33.9k|                data,
  277|  33.9k|                is_ending,
  278|  33.9k|                MIN_BUFFER_SIZE,
  279|  33.9k|                MAX_BUFFER_SIZE,
  280|  33.9k|                true,
  281|  33.9k|                Some(b"#"),
  282|  33.9k|            ),
  283|  33.9k|            Self {
  284|  33.9k|                stack: vec![NQuadsState::ExpectSubject],
  285|  33.9k|                subjects: Vec::new(),
  286|  33.9k|                predicates: Vec::new(),
  287|  33.9k|                objects: Vec::new(),
  288|  33.9k|            },
  289|  33.9k|            NQuadsRecognizerContext {
  290|  33.9k|                with_graph_name,
  291|  33.9k|                #[cfg(feature = "rdf-star")]
  292|  33.9k|                with_quoted_triples,
  293|  33.9k|                lexer_options: N3LexerOptions::default(),
  294|  33.9k|            },
  295|  33.9k|        )
  296|  33.9k|    }
_RINvMs_NtCs3Okv3MbnXN6_5oxttl12line_formatsNtB5_16NQuadsRecognizer10new_parserRShEB7_:
  266|  16.8k|    pub fn new_parser<B>(
  267|  16.8k|        data: B,
  268|  16.8k|        is_ending: bool,
  269|  16.8k|        with_graph_name: bool,
  270|  16.8k|        #[cfg(feature = "rdf-star")] with_quoted_triples: bool,
  271|  16.8k|        unchecked: bool,
  272|  16.8k|    ) -> Parser<B, Self> {
  273|  16.8k|        Parser::new(
  274|  16.8k|            Lexer::new(
  275|  16.8k|                N3Lexer::new(N3LexerMode::NTriples, unchecked),
  276|  16.8k|                data,
  277|  16.8k|                is_ending,
  278|  16.8k|                MIN_BUFFER_SIZE,
  279|  16.8k|                MAX_BUFFER_SIZE,
  280|  16.8k|                true,
  281|  16.8k|                Some(b"#"),
  282|  16.8k|            ),
  283|  16.8k|            Self {
  284|  16.8k|                stack: vec![NQuadsState::ExpectSubject],
  285|  16.8k|                subjects: Vec::new(),
  286|  16.8k|                predicates: Vec::new(),
  287|  16.8k|                objects: Vec::new(),
  288|  16.8k|            },
  289|  16.8k|            NQuadsRecognizerContext {
  290|  16.8k|                with_graph_name,
  291|  16.8k|                #[cfg(feature = "rdf-star")]
  292|  16.8k|                with_quoted_triples,
  293|  16.8k|                lexer_options: N3LexerOptions::default(),
  294|  16.8k|            },
  295|  16.8k|        )
  296|  16.8k|    }
_RINvMs_NtCs3Okv3MbnXN6_5oxttl12line_formatsNtB5_16NQuadsRecognizer5errorReEB7_:
  299|   284k|    fn error(
  300|   284k|        mut self,
  301|   284k|        errors: &mut Vec<RuleRecognizerError>,
  302|   284k|        msg: impl Into<RuleRecognizerError>,
  303|   284k|    ) -> Self {
  304|   284k|        errors.push(msg.into());
  305|   284k|        self.stack.clear();
  306|   284k|        self.subjects.clear();
  307|   284k|        self.predicates.clear();
  308|   284k|        self.objects.clear();
  309|   284k|        self
  310|   284k|    }
_RNvXNtCs3Okv3MbnXN6_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer20error_recovery_state:
   47|  1.89M|    fn error_recovery_state(mut self) -> Self {
   48|  1.89M|        self.stack.clear();
   49|  1.89M|        self.subjects.clear();
   50|  1.89M|        self.predicates.clear();
   51|  1.89M|        self.objects.clear();
   52|  1.89M|        self
   53|  1.89M|    }
_RNvXNtCs3Okv3MbnXN6_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer14recognize_next:
   55|  3.63M|    fn recognize_next(
   56|  3.63M|        mut self,
   57|  3.63M|        token: N3Token<'_>,
   58|  3.63M|        context: &mut NQuadsRecognizerContext,
   59|  3.63M|        results: &mut Vec<Quad>,
   60|  3.63M|        errors: &mut Vec<RuleRecognizerError>,
   61|  3.63M|    ) -> Self {
   62|  3.63M|        if let Some(state) = self.stack.pop() {
   63|  2.03M|            match state {
   64|  97.6k|                NQuadsState::ExpectSubject => match token {
   65|   274k|                    N3Token::IriRef(s) => {
   66|   274k|                        self.subjects
   67|   274k|                            .push(NamedNode::new_unchecked(s).into());
   68|   274k|                        self.stack.push(NQuadsState::ExpectPredicate);
   69|   274k|                        self
   70|       |                    }
   71|  67.4k|                    N3Token::BlankNodeLabel(s) => {
   72|  67.4k|                        self.subjects.push(BlankNode::new_unchecked(s).into());
   73|  67.4k|                        self.stack.push(NQuadsState::ExpectPredicate);
   74|  67.4k|                        self
   75|       |                    }
   76|       |                    #[cfg(feature = "rdf-star")]
   77|   288k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
   78|  97.6k|                        self.stack.push(NQuadsState::AfterQuotedSubject);
   79|  97.6k|                        self.stack.push(NQuadsState::ExpectSubject);
   80|  97.6k|                        self
   81|       |                    }
   82|   236k|                    _ => self.error(
   83|   236k|                        errors,
   84|   236k|                        "The subject of a triple should be an IRI or a blank node, TOKEN found",
   85|   236k|                    ),
   86|       |                },
   87|   363k|                NQuadsState::ExpectPredicate => match token {
   88|   329k|                    N3Token::IriRef(p) => {
   89|   329k|                        self.predicates
   90|   329k|                            .push(NamedNode::new_unchecked(p));
   91|   329k|                        self.stack.push(NQuadsState::ExpectedObject);
   92|   329k|                        self
   93|       |                    }
   94|  33.1k|                    _ => self.error(
   95|  33.1k|                        errors,
   96|  33.1k|                        "The predicate of a triple should be an IRI, TOKEN found",
   97|  33.1k|                    ),
   98|       |                },
   99|  22.5k|                NQuadsState::ExpectedObject => match token {
  100|   102k|                    N3Token::IriRef(o) => {
  101|   102k|                        self.objects
  102|   102k|                            .push(NamedNode::new_unchecked(o).into());
  103|   102k|                        self.stack
  104|   102k|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  105|   102k|                        self
  106|       |                    }
  107|   100k|                    N3Token::BlankNodeLabel(o) => {
  108|   100k|                        self.objects.push(BlankNode::new_unchecked(o).into());
  109|   100k|                        self.stack
  110|   100k|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  111|   100k|                        self
  112|       |                    }
  113|  94.0k|                    N3Token::String(value) => {
  114|  94.0k|                        self.stack
  115|  94.0k|                            .push(NQuadsState::ExpectLiteralAnnotationOrGraphNameOrDot { value });
  116|  94.0k|                        self
  117|       |                    }
  118|       |                    #[cfg(feature = "rdf-star")]
  119|  28.1k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  120|  22.5k|                        self.stack.push(NQuadsState::AfterQuotedObject);
  121|  22.5k|                        self.stack.push(NQuadsState::ExpectSubject);
  122|  22.5k|                        self
  123|       |                    }
  124|  7.60k|                    _ => self.error(
  125|  7.60k|                        errors,
  126|  7.60k|                        "The object of a triple should be an IRI, a blank node or a literal, TOKEN found",
  127|  7.60k|                    ),
  128|       |                },
  129|  90.7k|                NQuadsState::ExpectLiteralAnnotationOrGraphNameOrDot { value } => match token {
  130|  41.9k|                    N3Token::LangTag(lang_tag) => {
  131|  41.9k|                        self.objects.push(
  132|  41.9k|                            Literal::new_language_tagged_literal_unchecked(
  133|  41.9k|                                value,
  134|  41.9k|                                lang_tag.to_ascii_lowercase(),
  135|  41.9k|                            )
  136|  41.9k|                            .into(),
  137|  41.9k|                        );
  138|  41.9k|                        self.stack
  139|  41.9k|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  140|  41.9k|                        self
  141|       |                    }
  142|  40.1k|                    N3Token::Punctuation("^^") => {
  143|  23.0k|                        self.stack
  144|  23.0k|                            .push(NQuadsState::ExpectLiteralDatatype { value });
  145|  23.0k|                        self
  146|       |                    }
  147|       |                    _ => {
  148|  25.7k|                        self.objects.push(Literal::new_simple_literal(value).into());
  149|  25.7k|                        self.stack
  150|  25.7k|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  151|  25.7k|                        self.recognize_next(token, context, results, errors)
  152|       |                    }
  153|       |                },
  154|  20.2k|                NQuadsState::ExpectLiteralDatatype { value } => match token {
  155|  15.3k|                    N3Token::IriRef(d) => {
  156|  15.3k|                        self.objects.push(
  157|  15.3k|                            Literal::new_typed_literal(
  158|  15.3k|                                value,
  159|  15.3k|                                NamedNode::new_unchecked(d)
  160|  15.3k|                            )
  161|  15.3k|                            .into(),
  162|  15.3k|                        );
  163|  15.3k|                        self.stack
  164|  15.3k|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  165|  15.3k|                        self
  166|       |                    }
  167|  4.85k|                    _ => self.error(errors, "A literal datatype must be an IRI, found TOKEN"),
  168|       |                },
  169|       |                NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple => {
  170|   286k|                    if self.stack.is_empty() {
  171|  74.0k|                        match token {
  172|  26.3k|                            N3Token::IriRef(g) if context.with_graph_name => {
  173|  26.3k|                                self.emit_quad(
  174|  26.3k|                                    results,
  175|  26.3k|                                    NamedNode::new_unchecked(g).into(),
  176|  26.3k|                                );
  177|  26.3k|                                self.stack.push(NQuadsState::ExpectDot);
  178|  26.3k|                                self
  179|       |                            }
  180|  47.6k|                            N3Token::BlankNodeLabel(g) if context.with_graph_name => {
  181|  47.6k|                                self.emit_quad(results, BlankNode::new_unchecked(g).into());
  182|  47.6k|                                self.stack.push(NQuadsState::ExpectDot);
  183|  47.6k|                                self
  184|       |                            }
  185|       |                            _ => {
  186|   155k|                                self.emit_quad(results, GraphName::DefaultGraph);
  187|   155k|                                self.stack.push(NQuadsState::ExpectDot);
  188|   155k|                                self.recognize_next(token, context, results, errors)
  189|       |                            }
  190|       |                        }
  191|  56.9k|                    } else if token == N3Token::Punctuation(">>") {
  192|  54.2k|                        self
  193|       |                    } else {
  194|  2.68k|                        self.error(errors, "Expecting the end of a quoted triple '>>'")
  195|       |                    }
  196|       |                }
  197|   213k|                NQuadsState::ExpectDot => if let N3Token::Punctuation(".") = token {
  198|   134k|                    self.stack.push(NQuadsState::ExpectSubject);
  199|   134k|                    self
  200|       |                } else {
  201|  79.1k|                    errors.push("Quads should be followed by a dot".into());
  202|  79.1k|                    self.stack.push(NQuadsState::ExpectSubject);
  203|  79.1k|                    self.recognize_next(token, context, results, errors)
  204|       |                },
  205|       |                #[cfg(feature = "rdf-star")]
  206|       |                NQuadsState::AfterQuotedSubject => {
  207|  37.9k|                    let triple = Triple {
  208|  37.9k|                        subject: self.subjects.pop().unwrap(),
  209|  37.9k|                        predicate: self.predicates.pop().unwrap(),
  210|  37.9k|                        object: self.objects.pop().unwrap(),
  211|  37.9k|                    };
  212|  37.9k|                    self.subjects.push(triple.into());
  213|  37.9k|                    self.stack.push(NQuadsState::ExpectPredicate);
  214|  37.9k|                    self.recognize_next(token,context,  results, errors)
  215|       |                }
  216|       |                #[cfg(feature = "rdf-star")]
  217|       |                NQuadsState::AfterQuotedObject => {
  218|  16.0k|                    let triple = Triple {
  219|  16.0k|                        subject: self.subjects.pop().unwrap(),
  220|  16.0k|                        predicate: self.predicates.pop().unwrap(),
  221|  16.0k|                        object: self.objects.pop().unwrap(),
  222|  16.0k|                    };
  223|  16.0k|                    self.objects.push(triple.into());
  224|  16.0k|                    self.stack
  225|  16.0k|                        .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  226|  16.0k|                    self.recognize_next(token, context, results, errors)
  227|       |                }
  228|       |            }
  229|  1.59M|        } else if token == N3Token::Punctuation(".") {
  230|   397k|            self.stack.push(NQuadsState::ExpectSubject);
  231|   397k|            self
  232|       |        } else {
  233|  1.20M|            self
  234|       |        }
  235|  3.63M|    }
_RNvXNtCs3Okv3MbnXN6_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer13recognize_end:
  237|  50.8k|    fn recognize_end(
  238|  50.8k|        mut self,
  239|  50.8k|        _context: &mut NQuadsRecognizerContext,
  240|  50.8k|        results: &mut Vec<Quad>,
  241|  50.8k|        errors: &mut Vec<RuleRecognizerError>,
  242|  50.8k|    ) {
  243|  50.8k|        match &*self.stack {
  244|  50.8k|            [NQuadsState::ExpectSubject] | [] => (),
  245|    254|            [NQuadsState::ExpectDot] => errors.push("Triples should be followed by a dot".into()),
  246|       |            [NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple] => {
  247|  1.07k|                self.emit_quad(results, GraphName::DefaultGraph);
  248|  1.07k|                errors.push("Triples should be followed by a dot".into())
  249|       |            }
  250|    254|            [NQuadsState::ExpectLiteralAnnotationOrGraphNameOrDot { value }] => {
  251|    254|                self.objects.push(Literal::new_simple_literal(value).into());
  252|    254|                self.emit_quad(results, GraphName::DefaultGraph);
  253|    254|                errors.push("Triples should be followed by a dot".into())
  254|       |            }
  255|    422|            _ => errors.push("Unexpected end".into()), // TODO
  256|       |        }
  257|  50.8k|    }
_RNvXNtCs3Okv3MbnXN6_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer13lexer_options:
  259|  8.01M|    fn lexer_options(context: &NQuadsRecognizerContext) -> &N3LexerOptions {
  260|  8.01M|        &context.lexer_options
  261|  8.01M|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl12line_formatsNtB4_16NQuadsRecognizer9emit_quad:
  312|   231k|    fn emit_quad(&mut self, results: &mut Vec<Quad>, graph_name: GraphName) {
  313|   231k|        results.push(Quad {
  314|   231k|            subject: self.subjects.pop().unwrap(),
  315|   231k|            predicate: self.predicates.pop().unwrap(),
  316|   231k|            object: self.objects.pop().unwrap(),
  317|   231k|            graph_name,
  318|   231k|        })
  319|   231k|    }

_RINvMs2_NtCs3Okv3MbnXN6_5oxttl6nquadsNtB6_16NQuadsSerializer18serialize_to_writeINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECshSz5G3uQ7q5_6nquads:
  459|  16.8k|    pub fn serialize_to_write<W: Write>(self, write: W) -> ToWriteNQuadsWriter<W> {
  460|  16.8k|        ToWriteNQuadsWriter {
  461|  16.8k|            write,
  462|  16.8k|            writer: self.serialize(),
  463|  16.8k|        }
  464|  16.8k|    }
_RINvMs3_NtCs3Okv3MbnXN6_5oxttl6nquadsINtB6_19ToWriteNQuadsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE10write_quadRNtNtCsg6vp76A8CLh_5oxrdf6triple4QuadECshSz5G3uQ7q5_6nquads:
  553|  76.3k|    pub fn write_quad<'a>(&mut self, q: impl Into<QuadRef<'a>>) -> io::Result<()> {
  554|  76.3k|        self.writer.write_quad(q, &mut self.write)
  555|  76.3k|    }
_RINvMs4_NtCs3Okv3MbnXN6_5oxttl6nquadsNtB6_20LowLevelNQuadsWriter10write_quadRNtNtCsg6vp76A8CLh_5oxrdf6triple4QuadQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECshSz5G3uQ7q5_6nquads:
  634|  76.3k|    pub fn write_quad<'a>(
  635|  76.3k|        &mut self,
  636|  76.3k|        q: impl Into<QuadRef<'a>>,
  637|  76.3k|        mut write: impl Write,
  638|  76.3k|    ) -> io::Result<()> {
  639|  76.3k|        writeln!(write, "{} .", q.into())
  640|  76.3k|    }
_RNvMs3_NtCs3Okv3MbnXN6_5oxttl6nquadsINtB5_19ToWriteNQuadsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE6finishCshSz5G3uQ7q5_6nquads:
  558|  16.8k|    pub fn finish(self) -> W {
  559|  16.8k|        self.write
  560|  16.8k|    }
_RNvMNtCs3Okv3MbnXN6_5oxttl6nquadsNtB2_12NQuadsParser19with_quoted_triplesCshSz5G3uQ7q5_6nquads:
   69|  50.8k|    pub fn with_quoted_triples(mut self) -> Self {
   70|  50.8k|        self.with_quoted_triples = true;
   71|  50.8k|        self
   72|  50.8k|    }
_RNvMNtCs3Okv3MbnXN6_5oxttl6nquadsNtB2_12NQuadsParser3newCshSz5G3uQ7q5_6nquads:
   51|  50.8k|    pub fn new() -> Self {
   52|  50.8k|        Self::default()
   53|  50.8k|    }
_RNvMNtCs3Okv3MbnXN6_5oxttl6nquadsNtB2_12NQuadsParser9uncheckedCshSz5G3uQ7q5_6nquads:
   61|    321|    pub fn unchecked(mut self) -> Self {
   62|    321|        self.unchecked = true;
   63|    321|        self
   64|    321|    }
_RNvMs2_NtCs3Okv3MbnXN6_5oxttl6nquadsNtB5_16NQuadsSerializer3newCshSz5G3uQ7q5_6nquads:
  436|  16.8k|    pub fn new() -> Self {
  437|  16.8k|        Self
  438|  16.8k|    }
_RNvMNtCs3Okv3MbnXN6_5oxttl6nquadsNtB2_12NQuadsParser11parse_slice:
  163|  16.8k|    pub fn parse_slice(self, slice: &[u8]) -> FromSliceNQuadsReader<'_> {
  164|  16.8k|        FromSliceNQuadsReader {
  165|  16.8k|            inner: NQuadsRecognizer::new_parser(
  166|  16.8k|                slice,
  167|  16.8k|                true,
  168|  16.8k|                true,
  169|  16.8k|                #[cfg(feature = "rdf-star")]
  170|  16.8k|                self.with_quoted_triples,
  171|  16.8k|                self.unchecked,
  172|  16.8k|            )
  173|  16.8k|            .into_iter(),
  174|  16.8k|        }
  175|  16.8k|    }
_RNvMNtCs3Okv3MbnXN6_5oxttl6nquadsNtB2_12NQuadsParser5parse:
  214|  33.9k|    pub fn parse(self) -> LowLevelNQuadsReader {
  215|  33.9k|        LowLevelNQuadsReader {
  216|  33.9k|            parser: NQuadsRecognizer::new_parser(
  217|  33.9k|                Vec::new(),
  218|  33.9k|                false,
  219|  33.9k|                true,
  220|  33.9k|                #[cfg(feature = "rdf-star")]
  221|  33.9k|                self.with_quoted_triples,
  222|  33.9k|                self.unchecked,
  223|  33.9k|            ),
  224|  33.9k|        }
  225|  33.9k|    }
_RNvXs0_NtCs3Okv3MbnXN6_5oxttl6nquadsNtB5_21FromSliceNQuadsReaderNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next:
  336|  93.1k|    fn next(&mut self) -> Option<Self::Item> {
  337|  93.1k|        self.inner.next()
  338|  93.1k|    }
_RNvMs1_NtCs3Okv3MbnXN6_5oxttl6nquadsNtB5_20LowLevelNQuadsReader17extend_from_slice:
  383|  2.70M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  384|  2.70M|        self.parser.extend_from_slice(other)
  385|  2.70M|    }
_RNvMs1_NtCs3Okv3MbnXN6_5oxttl6nquadsNtB5_20LowLevelNQuadsReader3end:
  390|  33.9k|    pub fn end(&mut self) {
  391|  33.9k|        self.parser.end()
  392|  33.9k|    }
_RNvMs1_NtCs3Okv3MbnXN6_5oxttl6nquadsNtB5_20LowLevelNQuadsReader6is_end:
  395|  33.9k|    pub fn is_end(&self) -> bool {
  396|  33.9k|        self.parser.is_end()
  397|  33.9k|    }
_RNvMs1_NtCs3Okv3MbnXN6_5oxttl6nquadsNtB5_20LowLevelNQuadsReader9read_next:
  403|  5.15M|    pub fn read_next(&mut self) -> Option<Result<Quad, TurtleSyntaxError>> {
  404|  5.15M|        self.parser.read_next()
  405|  5.15M|    }
_RNvMs2_NtCs3Okv3MbnXN6_5oxttl6nquadsNtB5_16NQuadsSerializer9serialize:
  521|  16.8k|    pub fn serialize(self) -> LowLevelNQuadsWriter {
  522|  16.8k|        LowLevelNQuadsWriter
  523|  16.8k|    }

_RNvXs_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5errorNtB4_17TurtleSyntaxErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmtCshSz5G3uQ7q5_6nquads:
   37|  2.25M|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   38|  2.25M|        if self.location.start.offset + 1 >= self.location.end.offset {
   39|  1.54M|            write!(
   40|  1.54M|                f,
   41|  1.54M|                "Parser error at line {} column {}: {}",
   42|  1.54M|                self.location.start.line + 1,
   43|  1.54M|                self.location.start.column + 1,
   44|  1.54M|                self.message
   45|  1.54M|            )
   46|   713k|        } else if self.location.start.line == self.location.end.line {
   47|   699k|            write!(
   48|   699k|                f,
   49|   699k|                "Parser error between at line {} between columns {} and column {}: {}",
   50|   699k|                self.location.start.line + 1,
   51|   699k|                self.location.start.column + 1,
   52|   699k|                self.location.end.column + 1,
   53|   699k|                self.message
   54|   699k|            )
   55|       |        } else {
   56|  13.7k|            write!(
   57|  13.7k|                f,
   58|  13.7k|                "Parser error between line {} column {} and line {} column {}: {}",
   59|  13.7k|                self.location.start.line + 1,
   60|  13.7k|                self.location.start.column + 1,
   61|  13.7k|                self.location.end.line + 1,
   62|  13.7k|                self.location.end.column + 1,
   63|  13.7k|                self.message
   64|  13.7k|            )
   65|       |        }
   66|  2.25M|    }

_RNvXNtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB1a_3ops5range5RangejENtNtCs3OstG5Tqy1X_5alloc6string6StringEE4fromB6_:
   31|  1.21M|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|  1.21M|        Self {
   33|  1.21M|            location,
   34|  1.21M|            message: message.into(),
   35|  1.21M|        }
   36|  1.21M|    }
_RNvXNtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB1a_3ops5range5RangejEReEE4fromB6_:
   31|   692k|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|   692k|        Self {
   33|   692k|            location,
   34|   692k|            message: message.into(),
   35|   692k|        }
   36|   692k|    }
_RNvXs_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejENtNtCs3OstG5Tqy1X_5alloc6string6StringEE4fromB8_:
   41|  95.8k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  95.8k|        (*location.start()..*location.end() + 1, message).into()
   43|  95.8k|    }
_RNvXs_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejEReEE4fromB8_:
   41|   542k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|   542k|        (*location.start()..*location.end() + 1, message).into()
   43|   542k|    }
_RNvXs0_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerNtB5_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTjNtNtCs3OstG5Tqy1X_5alloc6string6StringEE4fromB9_:
   47|  85.5k|    fn from((location, message): (usize, S)) -> Self {
   48|  85.5k|        (location..=location, message).into()
   49|  85.5k|    }
_RNvMs1_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE3newB9_:
   73|  33.9k|    pub fn new(
   74|  33.9k|        parser: R,
   75|  33.9k|        data: B,
   76|  33.9k|        is_ending: bool,
   77|  33.9k|        min_buffer_size: usize,
   78|  33.9k|        max_buffer_size: usize,
   79|  33.9k|        is_line_jump_whitespace: bool,
   80|  33.9k|        line_comment_start: Option<&'static [u8]>,
   81|  33.9k|    ) -> Self {
   82|  33.9k|        Self {
   83|  33.9k|            parser,
   84|  33.9k|            data,
   85|  33.9k|            position: Position {
   86|  33.9k|                line_start_buffer_offset: 0,
   87|  33.9k|                buffer_offset: 0,
   88|  33.9k|                global_offset: 0,
   89|  33.9k|                global_line: 0,
   90|  33.9k|            },
   91|  33.9k|            previous_position: Position {
   92|  33.9k|                line_start_buffer_offset: 0,
   93|  33.9k|                buffer_offset: 0,
   94|  33.9k|                global_offset: 0,
   95|  33.9k|                global_line: 0,
   96|  33.9k|            },
   97|  33.9k|            is_ending,
   98|  33.9k|            min_buffer_size,
   99|  33.9k|            max_buffer_size,
  100|  33.9k|            is_line_jump_whitespace,
  101|  33.9k|            line_comment_start,
  102|  33.9k|        }
  103|  33.9k|    }
_RNvMs1_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE3newB9_:
   73|  16.8k|    pub fn new(
   74|  16.8k|        parser: R,
   75|  16.8k|        data: B,
   76|  16.8k|        is_ending: bool,
   77|  16.8k|        min_buffer_size: usize,
   78|  16.8k|        max_buffer_size: usize,
   79|  16.8k|        is_line_jump_whitespace: bool,
   80|  16.8k|        line_comment_start: Option<&'static [u8]>,
   81|  16.8k|    ) -> Self {
   82|  16.8k|        Self {
   83|  16.8k|            parser,
   84|  16.8k|            data,
   85|  16.8k|            position: Position {
   86|  16.8k|                line_start_buffer_offset: 0,
   87|  16.8k|                buffer_offset: 0,
   88|  16.8k|                global_offset: 0,
   89|  16.8k|                global_line: 0,
   90|  16.8k|            },
   91|  16.8k|            previous_position: Position {
   92|  16.8k|                line_start_buffer_offset: 0,
   93|  16.8k|                buffer_offset: 0,
   94|  16.8k|                global_offset: 0,
   95|  16.8k|                global_line: 0,
   96|  16.8k|            },
   97|  16.8k|            is_ending,
   98|  16.8k|            min_buffer_size,
   99|  16.8k|            max_buffer_size,
  100|  16.8k|            is_line_jump_whitespace,
  101|  16.8k|            line_comment_start,
  102|  16.8k|        }
  103|  16.8k|    }
_RNvMs2_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE17extend_from_sliceB9_:
  107|  2.70M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  108|  2.70M|        self.shrink_data();
  109|  2.70M|        self.data.extend_from_slice(other);
  110|  2.70M|    }
_RNvMs2_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE3endB9_:
  113|  33.9k|    pub fn end(&mut self) {
  114|  33.9k|        self.is_ending = true;
  115|  33.9k|    }
_RNvMs2_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE11shrink_dataB9_:
  169|  2.70M|    fn shrink_data(&mut self) {
  170|  2.70M|        if self.position.line_start_buffer_offset > 0 {
  171|   296k|            self.data
  172|   296k|                .copy_within(self.position.line_start_buffer_offset.., 0);
  173|   296k|            self.data
  174|   296k|                .truncate(self.data.len() - self.position.line_start_buffer_offset);
  175|   296k|            self.position.buffer_offset -= self.position.line_start_buffer_offset;
  176|   296k|            self.position.line_start_buffer_offset = 0;
  177|   296k|            self.previous_position = self.position;
  178|  2.40M|        }
  179|  2.70M|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE9read_nextB9_:
  184|  7.58M|    pub fn read_next(
  185|  7.58M|        &mut self,
  186|  7.58M|        options: &R::Options,
  187|  7.58M|    ) -> Option<Result<R::Token<'_>, TurtleSyntaxError>> {
  188|  7.58M|        self.skip_whitespaces_and_comments()?;
  189|  7.55M|        self.previous_position = self.position;
  190|  7.55M|        let Some((consumed, result)) = self.parser.recognize_next_token(
  191|  7.55M|            &self.data[self.position.buffer_offset..],
  192|  7.55M|            self.is_ending,
  193|  7.55M|            options,
  194|  7.55M|        ) else {
  195|  2.74M|            return if self.is_ending {
  196|  79.6k|                if self.position.buffer_offset == self.data.len() {
  197|  67.9k|                    None // We have finished
  198|       |                } else {
  199|  11.6k|                    let (new_line_jumps, new_line_start) =
  200|  11.6k|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  201|  11.6k|                            &self.data[self.position.buffer_offset..],
  202|  11.6k|                        );
  203|  11.6k|                    if new_line_jumps > 0 {
  204|    552|                        self.position.line_start_buffer_offset =
  205|    552|                            self.position.buffer_offset + new_line_start;
  206|  11.0k|                    }
  207|  11.6k|                    self.position.global_offset +=
  208|  11.6k|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  209|  11.6k|                    self.position.buffer_offset = self.data.len();
  210|  11.6k|                    self.position.global_line += new_line_jumps;
  211|  11.6k|                    let new_position = TextPosition {
  212|  11.6k|                        line: self.position.global_line,
  213|  11.6k|                        column: Self::column_from_bytes(
  214|  11.6k|                            &self.data[self.position.line_start_buffer_offset..],
  215|  11.6k|                        ),
  216|  11.6k|                        offset: self.position.global_offset,
  217|  11.6k|                    };
  218|  11.6k|                    let error = TurtleSyntaxError {
  219|  11.6k|                        location: new_position..new_position,
  220|  11.6k|                        message: "Unexpected end of file".into(),
  221|  11.6k|                    };
  222|  11.6k|                    self.position.buffer_offset = self.data.len(); // We consume everything
  223|  11.6k|                    Some(Err(error))
  224|       |                }
  225|       |            } else {
  226|  2.66M|                None
  227|       |            };
  228|       |        };
  229|  4.80M|        debug_assert!(
  230|      0|            consumed > 0,
  231|      0|            "The lexer must consume at least one byte each time"
  232|       |        );
  233|  4.80M|        debug_assert!(
  234|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  235|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  236|      0|            self.data.len() - self.position.buffer_offset
  237|       |        );
  238|  4.80M|        let (new_line_jumps, new_line_start) =
  239|  4.80M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  240|  4.80M|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  241|  4.80M|            );
  242|  4.80M|        if new_line_jumps > 0 {
  243|  25.8k|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  244|  4.77M|        }
  245|  4.80M|        self.position.buffer_offset += consumed;
  246|  4.80M|        self.position.global_offset += u64::try_from(consumed).unwrap();
  247|  4.80M|        self.position.global_line += new_line_jumps;
  248|  4.80M|        Some(result.map_err(|e| TurtleSyntaxError {
  249|       |            location: self.location_from_buffer_offset_range(e.location),
  250|       |            message: e.message,
  251|  4.80M|        }))
  252|  7.58M|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE9read_nextB9_:
  184|   430k|    pub fn read_next(
  185|   430k|        &mut self,
  186|   430k|        options: &R::Options,
  187|   430k|    ) -> Option<Result<R::Token<'_>, TurtleSyntaxError>> {
  188|   430k|        self.skip_whitespaces_and_comments()?;
  189|   430k|        self.previous_position = self.position;
  190|   430k|        let Some((consumed, result)) = self.parser.recognize_next_token(
  191|   430k|            &self.data[self.position.buffer_offset..],
  192|   430k|            self.is_ending,
  193|   430k|            options,
  194|   430k|        ) else {
  195|  33.6k|            return if self.is_ending {
  196|  33.6k|                if self.position.buffer_offset == self.data.len() {
  197|  33.6k|                    None // We have finished
  198|       |                } else {
  199|      0|                    let (new_line_jumps, new_line_start) =
  200|      0|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  201|      0|                            &self.data[self.position.buffer_offset..],
  202|      0|                        );
  203|      0|                    if new_line_jumps > 0 {
  204|      0|                        self.position.line_start_buffer_offset =
  205|      0|                            self.position.buffer_offset + new_line_start;
  206|      0|                    }
  207|      0|                    self.position.global_offset +=
  208|      0|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  209|      0|                    self.position.buffer_offset = self.data.len();
  210|      0|                    self.position.global_line += new_line_jumps;
  211|      0|                    let new_position = TextPosition {
  212|      0|                        line: self.position.global_line,
  213|      0|                        column: Self::column_from_bytes(
  214|      0|                            &self.data[self.position.line_start_buffer_offset..],
  215|      0|                        ),
  216|      0|                        offset: self.position.global_offset,
  217|      0|                    };
  218|      0|                    let error = TurtleSyntaxError {
  219|      0|                        location: new_position..new_position,
  220|      0|                        message: "Unexpected end of file".into(),
  221|      0|                    };
  222|      0|                    self.position.buffer_offset = self.data.len(); // We consume everything
  223|      0|                    Some(Err(error))
  224|       |                }
  225|       |            } else {
  226|      0|                None
  227|       |            };
  228|       |        };
  229|   397k|        debug_assert!(
  230|      0|            consumed > 0,
  231|      0|            "The lexer must consume at least one byte each time"
  232|       |        );
  233|   397k|        debug_assert!(
  234|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  235|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  236|      0|            self.data.len() - self.position.buffer_offset
  237|       |        );
  238|   397k|        let (new_line_jumps, new_line_start) =
  239|   397k|            Self::find_number_of_line_jumps_and_start_of_last_line(
  240|   397k|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  241|   397k|            );
  242|   397k|        if new_line_jumps > 0 {
  243|      0|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  244|   397k|        }
  245|   397k|        self.position.buffer_offset += consumed;
  246|   397k|        self.position.global_offset += u64::try_from(consumed).unwrap();
  247|   397k|        self.position.global_line += new_line_jumps;
  248|   397k|        Some(result.map_err(|e| TurtleSyntaxError {
  249|       |            location: self.location_from_buffer_offset_range(e.location),
  250|       |            message: e.message,
  251|   397k|        }))
  252|   430k|    }
_RNCNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB7_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtBb_5lexer7N3LexerE9read_next0Bb_:
  248|  1.88M|        Some(result.map_err(|e| TurtleSyntaxError {
  249|  1.88M|            location: self.location_from_buffer_offset_range(e.location),
  250|  1.88M|            message: e.message,
  251|  1.88M|        }))
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE33location_from_buffer_offset_rangeB9_:
  254|  1.88M|    pub fn location_from_buffer_offset_range(
  255|  1.88M|        &self,
  256|  1.88M|        offset_range: Range<usize>,
  257|  1.88M|    ) -> Range<TextPosition> {
  258|  1.88M|        let start_offset = self.previous_position.buffer_offset + offset_range.start;
  259|  1.88M|        let (start_extra_line_jumps, start_line_start) =
  260|  1.88M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  261|  1.88M|                &self.data[self.previous_position.buffer_offset..start_offset],
  262|  1.88M|            );
  263|  1.88M|        let start_line_start = if start_extra_line_jumps > 0 {
  264|  4.54k|            start_line_start + self.previous_position.buffer_offset
  265|       |        } else {
  266|  1.87M|            self.previous_position.line_start_buffer_offset
  267|       |        };
  268|  1.88M|        let end_offset = self.previous_position.buffer_offset + offset_range.end;
  269|  1.88M|        let (end_extra_line_jumps, end_line_start) =
  270|  1.88M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  271|  1.88M|                &self.data[self.previous_position.buffer_offset..end_offset],
  272|  1.88M|            );
  273|  1.88M|        let end_line_start = if end_extra_line_jumps > 0 {
  274|  17.5k|            end_line_start + self.previous_position.buffer_offset
  275|       |        } else {
  276|  1.86M|            self.previous_position.line_start_buffer_offset
  277|       |        };
  278|  1.88M|        TextPosition {
  279|  1.88M|            line: self.previous_position.global_line + start_extra_line_jumps,
  280|  1.88M|            column: Self::column_from_bytes(&self.data[start_line_start..start_offset]),
  281|  1.88M|            offset: self.previous_position.global_offset
  282|  1.88M|                + u64::try_from(offset_range.start).unwrap(),
  283|  1.88M|        }..TextPosition {
  284|  1.88M|            line: self.previous_position.global_line + end_extra_line_jumps,
  285|  1.88M|            column: Self::column_from_bytes(&self.data[end_line_start..end_offset]),
  286|  1.88M|            offset: self.previous_position.global_offset + u64::try_from(offset_range.end).unwrap(),
  287|  1.88M|        }
  288|  1.88M|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE19last_token_locationB9_:
  290|   365k|    pub fn last_token_location(&self) -> Range<TextPosition> {
  291|   365k|        TextPosition {
  292|   365k|            line: self.previous_position.global_line,
  293|   365k|            column: Self::column_from_bytes(
  294|   365k|                &self.data[self.previous_position.line_start_buffer_offset
  295|   365k|                    ..self.previous_position.buffer_offset],
  296|   365k|            ),
  297|   365k|            offset: self.previous_position.global_offset,
  298|   365k|        }..TextPosition {
  299|   365k|            line: self.position.global_line,
  300|   365k|            column: Self::column_from_bytes(
  301|   365k|                &self.data[self.position.line_start_buffer_offset..self.position.buffer_offset],
  302|   365k|            ),
  303|   365k|            offset: self.position.global_offset,
  304|   365k|        }
  305|   365k|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE17last_token_sourceB9_:
  307|   365k|    pub fn last_token_source(&self) -> Cow<'_, str> {
  308|   365k|        String::from_utf8_lossy(
  309|   365k|            &self.data[self.previous_position.buffer_offset..self.position.buffer_offset],
  310|   365k|        )
  311|   365k|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE6is_endB9_:
  313|  2.77M|    pub fn is_end(&self) -> bool {
  314|  2.77M|        self.is_ending && self.data.len() == self.position.buffer_offset
  315|  2.77M|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE6is_endB9_:
  313|  33.6k|    pub fn is_end(&self) -> bool {
  314|  33.6k|        self.is_ending && self.data.len() == self.position.buffer_offset
  315|  33.6k|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  318|  7.58M|    fn skip_whitespaces_and_comments(&mut self) -> Option<()> {
  319|       |        loop {
  320|  7.60M|            self.skip_whitespaces()?;
  321|       |
  322|  7.59M|            let buf = &self.data[self.position.buffer_offset..];
  323|  7.59M|            if let Some(line_comment_start) = self.line_comment_start {
  324|  7.59M|                if buf.starts_with(line_comment_start) {
  325|       |                    // Comment
  326|  48.2k|                    if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  327|  22.8k|                        let mut end_position = line_comment_start.len() + end;
  328|  22.8k|                        if buf.get(end_position).copied() == Some(b'\r') {
  329|       |                            // We look for \n for Windows line end style
  330|  12.1k|                            if let Some(c) = buf.get(end_position + 1) {
  331|  7.58k|                                if *c == b'\n' {
  332|     29|                                    end_position += 1;
  333|  7.55k|                                }
  334|  4.56k|                            } else if !self.is_ending {
  335|  4.53k|                                return None; // We need to read more
  336|     31|                            }
  337|  10.6k|                        }
  338|  18.2k|                        let comment_size = end_position + 1;
  339|  18.2k|                        self.position.buffer_offset += comment_size;
  340|  18.2k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  341|  18.2k|                        self.position.global_offset += u64::try_from(comment_size).unwrap();
  342|  18.2k|                        self.position.global_line += 1;
  343|  18.2k|                        continue;
  344|  25.3k|                    }
  345|  25.3k|                    if self.is_ending {
  346|    786|                        self.position.buffer_offset = self.data.len(); // EOF
  347|    786|                        return Some(());
  348|  24.5k|                    }
  349|  24.5k|                    return None; // We need more data
  350|  7.54M|                }
  351|      0|            }
  352|  7.54M|            return Some(());
  353|       |        }
  354|  7.58M|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  318|   430k|    fn skip_whitespaces_and_comments(&mut self) -> Option<()> {
  319|       |        loop {
  320|   430k|            self.skip_whitespaces()?;
  321|       |
  322|   430k|            let buf = &self.data[self.position.buffer_offset..];
  323|   430k|            if let Some(line_comment_start) = self.line_comment_start {
  324|   430k|                if buf.starts_with(line_comment_start) {
  325|       |                    // Comment
  326|      0|                    if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  327|      0|                        let mut end_position = line_comment_start.len() + end;
  328|      0|                        if buf.get(end_position).copied() == Some(b'\r') {
  329|       |                            // We look for \n for Windows line end style
  330|      0|                            if let Some(c) = buf.get(end_position + 1) {
  331|      0|                                if *c == b'\n' {
  332|      0|                                    end_position += 1;
  333|      0|                                }
  334|      0|                            } else if !self.is_ending {
  335|      0|                                return None; // We need to read more
  336|      0|                            }
  337|      0|                        }
  338|      0|                        let comment_size = end_position + 1;
  339|      0|                        self.position.buffer_offset += comment_size;
  340|      0|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  341|      0|                        self.position.global_offset += u64::try_from(comment_size).unwrap();
  342|      0|                        self.position.global_line += 1;
  343|      0|                        continue;
  344|      0|                    }
  345|      0|                    if self.is_ending {
  346|      0|                        self.position.buffer_offset = self.data.len(); // EOF
  347|      0|                        return Some(());
  348|      0|                    }
  349|      0|                    return None; // We need more data
  350|   430k|                }
  351|      0|            }
  352|   430k|            return Some(());
  353|       |        }
  354|   430k|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  356|  7.60M|    fn skip_whitespaces(&mut self) -> Option<()> {
  357|  7.60M|        if self.is_line_jump_whitespace {
  358|  7.60M|            let mut i = self.position.buffer_offset;
  359|  8.25M|            while let Some(c) = self.data.get(i) {
  360|  7.89M|                match c {
  361|  21.2k|                    b' ' | b'\t' => {
  362|  21.2k|                        self.position.buffer_offset += 1;
  363|  21.2k|                        self.position.global_offset += 1;
  364|  21.2k|                    }
  365|       |                    b'\r' => {
  366|       |                        // We look for \n for Windows line end style
  367|  24.1k|                        let mut increment: u8 = 1;
  368|  24.1k|                        if let Some(c) = self.data.get(i + 1) {
  369|  19.3k|                            if *c == b'\n' {
  370|    276|                                increment += 1;
  371|    276|                                i += 1;
  372|  19.0k|                            }
  373|  4.81k|                        } else if !self.is_ending {
  374|  4.53k|                            return None; // We need to read more
  375|    280|                        }
  376|  19.6k|                        self.position.buffer_offset += usize::from(increment);
  377|  19.6k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  378|  19.6k|                        self.position.global_offset += u64::from(increment);
  379|  19.6k|                        self.position.global_line += 1;
  380|       |                    }
  381|   608k|                    b'\n' => {
  382|   608k|                        self.position.buffer_offset += 1;
  383|   608k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  384|   608k|                        self.position.global_offset += 1;
  385|   608k|                        self.position.global_line += 1;
  386|   608k|                    }
  387|  7.24M|                    _ => return Some(()),
  388|       |                }
  389|   649k|                i += 1;
  390|       |                // TODO: SIMD
  391|       |            }
  392|       |        } else {
  393|      0|            for c in &self.data[self.position.buffer_offset..] {
  394|      0|                if matches!(c, b' ' | b'\t') {
  395|      0|                    self.position.buffer_offset += 1;
  396|      0|                    self.position.global_offset += 1;
  397|      0|                } else {
  398|      0|                    return Some(());
  399|       |                }
  400|       |                // TODO: SIMD
  401|       |            }
  402|       |        }
  403|   353k|        Some(())
  404|  7.60M|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  356|   430k|    fn skip_whitespaces(&mut self) -> Option<()> {
  357|   430k|        if self.is_line_jump_whitespace {
  358|   430k|            let mut i = self.position.buffer_offset;
  359|   786k|            while let Some(c) = self.data.get(i) {
  360|   752k|                match c {
  361|   278k|                    b' ' | b'\t' => {
  362|   278k|                        self.position.buffer_offset += 1;
  363|   278k|                        self.position.global_offset += 1;
  364|   278k|                    }
  365|       |                    b'\r' => {
  366|       |                        // We look for \n for Windows line end style
  367|      0|                        let mut increment: u8 = 1;
  368|      0|                        if let Some(c) = self.data.get(i + 1) {
  369|      0|                            if *c == b'\n' {
  370|      0|                                increment += 1;
  371|      0|                                i += 1;
  372|      0|                            }
  373|      0|                        } else if !self.is_ending {
  374|      0|                            return None; // We need to read more
  375|      0|                        }
  376|      0|                        self.position.buffer_offset += usize::from(increment);
  377|      0|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  378|      0|                        self.position.global_offset += u64::from(increment);
  379|      0|                        self.position.global_line += 1;
  380|       |                    }
  381|  76.3k|                    b'\n' => {
  382|  76.3k|                        self.position.buffer_offset += 1;
  383|  76.3k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  384|  76.3k|                        self.position.global_offset += 1;
  385|  76.3k|                        self.position.global_line += 1;
  386|  76.3k|                    }
  387|   397k|                    _ => return Some(()),
  388|       |                }
  389|   355k|                i += 1;
  390|       |                // TODO: SIMD
  391|       |            }
  392|       |        } else {
  393|      0|            for c in &self.data[self.position.buffer_offset..] {
  394|      0|                if matches!(c, b' ' | b'\t') {
  395|      0|                    self.position.buffer_offset += 1;
  396|      0|                    self.position.global_offset += 1;
  397|      0|                } else {
  398|      0|                    return Some(());
  399|       |                }
  400|       |                // TODO: SIMD
  401|       |            }
  402|       |        }
  403|  33.6k|        Some(())
  404|   430k|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  406|  8.57M|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  407|  8.57M|        let mut num_of_jumps = 0;
  408|  8.57M|        let mut last_jump_pos = 0;
  409|  8.57M|        let mut previous_cr = 0;
  410|  8.57M|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  411|  78.9k|            if bytes[pos] == b'\r' {
  412|  28.0k|                previous_cr = pos;
  413|  28.0k|                num_of_jumps += 1;
  414|  28.0k|                last_jump_pos = pos + 1;
  415|  28.0k|            } else {
  416|  50.9k|                if previous_cr < pos - 1 {
  417|  37.8k|                    // We count \r\n as a single line jump
  418|  37.8k|                    num_of_jumps += 1;
  419|  37.8k|                }
  420|  50.9k|                last_jump_pos = pos + 1;
  421|       |            }
  422|       |        }
  423|  8.57M|        (num_of_jumps, last_jump_pos)
  424|  8.57M|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  406|   397k|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  407|   397k|        let mut num_of_jumps = 0;
  408|   397k|        let mut last_jump_pos = 0;
  409|   397k|        let mut previous_cr = 0;
  410|   397k|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  411|      0|            if bytes[pos] == b'\r' {
  412|      0|                previous_cr = pos;
  413|      0|                num_of_jumps += 1;
  414|      0|                last_jump_pos = pos + 1;
  415|      0|            } else {
  416|      0|                if previous_cr < pos - 1 {
  417|      0|                    // We count \r\n as a single line jump
  418|      0|                    num_of_jumps += 1;
  419|      0|                }
  420|      0|                last_jump_pos = pos + 1;
  421|       |            }
  422|       |        }
  423|   397k|        (num_of_jumps, last_jump_pos)
  424|   397k|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE17column_from_bytesB9_:
  426|  6.93M|    fn column_from_bytes(bytes: &[u8]) -> u64 {
  427|  6.93M|        match str::from_utf8(bytes) {
  428|  4.10M|            Ok(s) => u64::try_from(s.chars().count()).unwrap(),
  429|  2.83M|            Err(e) => {
  430|  2.83M|                if e.valid_up_to() == 0 {
  431|   403k|                    0
  432|       |                } else {
  433|  2.42M|                    Self::column_from_bytes(&bytes[..e.valid_up_to()])
  434|       |                }
  435|       |            }
  436|       |        }
  437|  6.93M|    }

_RNvXNtNtCs3Okv3MbnXN6_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromReE4fromB6_:
   40|   365k|    fn from(message: S) -> Self {
   41|   365k|        Self {
   42|   365k|            message: message.into(),
   43|   365k|        }
   44|   365k|    }
_RNvMs_NtNtCs3Okv3MbnXN6_5oxttl7toolkit6parserINtB4_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB8_12line_formats16NQuadsRecognizerE3newB8_:
   57|  33.9k|    pub fn new(lexer: Lexer<B, RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   58|  33.9k|        Self {
   59|  33.9k|            lexer,
   60|  33.9k|            state: Some(recognizer),
   61|  33.9k|            context,
   62|  33.9k|            results: vec![],
   63|  33.9k|            errors: vec![],
   64|  33.9k|        }
   65|  33.9k|    }
_RNvMs_NtNtCs3Okv3MbnXN6_5oxttl7toolkit6parserINtB4_6ParserRShNtNtB8_12line_formats16NQuadsRecognizerE3newB8_:
   57|  16.8k|    pub fn new(lexer: Lexer<B, RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   58|  16.8k|        Self {
   59|  16.8k|            lexer,
   60|  16.8k|            state: Some(recognizer),
   61|  16.8k|            context,
   62|  16.8k|            results: vec![],
   63|  16.8k|            errors: vec![],
   64|  16.8k|        }
   65|  16.8k|    }
_RNvMs0_NtNtCs3Okv3MbnXN6_5oxttl7toolkit6parserINtB5_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_12line_formats16NQuadsRecognizerE6is_endB9_:
   70|  33.9k|    pub fn is_end(&self) -> bool {
   71|  33.9k|        self.state.is_none() && self.results.is_empty() && self.errors.is_empty()
   72|  33.9k|    }
_RNvMs0_NtNtCs3Okv3MbnXN6_5oxttl7toolkit6parserINtB5_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_12line_formats16NQuadsRecognizerE9read_nextB9_:
   74|  5.15M|    pub fn read_next(&mut self) -> Option<Result<RR::Output, TurtleSyntaxError>> {
   75|       |        loop {
   76|  8.10M|            if let Some(error) = self.errors.pop() {
   77|   365k|                return Some(Err(TurtleSyntaxError {
   78|   365k|                    location: self.lexer.last_token_location(),
   79|   365k|                    message: error
   80|   365k|                        .message
   81|   365k|                        .replace("TOKEN", &self.lexer.last_token_source()),
   82|   365k|                }));
   83|  7.73M|            }
   84|  7.73M|            if let Some(result) = self.results.pop() {
   85|   154k|                return Some(Ok(result));
   86|  7.58M|            }
   87|  7.58M|            if let Some(result) = self.lexer.read_next(RR::lexer_options(&self.context)) {
   88|  4.81M|                match result {
   89|  2.91M|                    Ok(token) => {
   90|  2.91M|                        self.state = self.state.take().map(|state| {
   91|       |                            state.recognize_next(
   92|       |                                token,
   93|       |                                &mut self.context,
   94|       |                                &mut self.results,
   95|       |                                &mut self.errors,
   96|       |                            )
   97|  2.91M|                        });
   98|  2.91M|                        continue;
   99|       |                    }
  100|  1.89M|                    Err(e) => {
  101|  1.89M|                        self.state = self.state.take().map(RR::error_recovery_state);
  102|  1.89M|                        return Some(Err(e));
  103|       |                    }
  104|       |                }
  105|  2.77M|            }
  106|  2.77M|            if self.lexer.is_end() {
  107|  67.9k|                self.state.take()?.recognize_end(
  108|  33.9k|                    &mut self.context,
  109|  33.9k|                    &mut self.results,
  110|  33.9k|                    &mut self.errors,
  111|  33.9k|                )
  112|       |            } else {
  113|  2.70M|                return None;
  114|       |            }
  115|       |        }
  116|  5.15M|    }
_RNvMs0_NtNtCs3Okv3MbnXN6_5oxttl7toolkit6parserINtB5_6ParserRShNtNtB9_12line_formats16NQuadsRecognizerE9read_nextB9_:
   74|  93.1k|    pub fn read_next(&mut self) -> Option<Result<RR::Output, TurtleSyntaxError>> {
   75|       |        loop {
   76|   507k|            if let Some(error) = self.errors.pop() {
   77|      0|                return Some(Err(TurtleSyntaxError {
   78|      0|                    location: self.lexer.last_token_location(),
   79|      0|                    message: error
   80|      0|                        .message
   81|      0|                        .replace("TOKEN", &self.lexer.last_token_source()),
   82|      0|                }));
   83|   507k|            }
   84|   507k|            if let Some(result) = self.results.pop() {
   85|  76.3k|                return Some(Ok(result));
   86|   430k|            }
   87|   430k|            if let Some(result) = self.lexer.read_next(RR::lexer_options(&self.context)) {
   88|   397k|                match result {
   89|   397k|                    Ok(token) => {
   90|   397k|                        self.state = self.state.take().map(|state| {
   91|       |                            state.recognize_next(
   92|       |                                token,
   93|       |                                &mut self.context,
   94|       |                                &mut self.results,
   95|       |                                &mut self.errors,
   96|       |                            )
   97|   397k|                        });
   98|   397k|                        continue;
   99|       |                    }
  100|      0|                    Err(e) => {
  101|      0|                        self.state = self.state.take().map(RR::error_recovery_state);
  102|      0|                        return Some(Err(e));
  103|       |                    }
  104|       |                }
  105|  33.6k|            }
  106|  33.6k|            if self.lexer.is_end() {
  107|  33.6k|                self.state.take()?.recognize_end(
  108|  16.8k|                    &mut self.context,
  109|  16.8k|                    &mut self.results,
  110|  16.8k|                    &mut self.errors,
  111|  16.8k|                )
  112|       |            } else {
  113|      0|                return None;
  114|       |            }
  115|       |        }
  116|  93.1k|    }
_RNCNvMs0_NtNtCs3Okv3MbnXN6_5oxttl7toolkit6parserINtB7_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtBb_12line_formats16NQuadsRecognizerE9read_next0Bb_:
   90|  2.91M|                        self.state = self.state.take().map(|state| {
   91|  2.91M|                            state.recognize_next(
   92|  2.91M|                                token,
   93|  2.91M|                                &mut self.context,
   94|  2.91M|                                &mut self.results,
   95|  2.91M|                                &mut self.errors,
   96|  2.91M|                            )
   97|  2.91M|                        });
_RNCNvMs0_NtNtCs3Okv3MbnXN6_5oxttl7toolkit6parserINtB7_6ParserRShNtNtBb_12line_formats16NQuadsRecognizerE9read_next0Bb_:
   90|   397k|                        self.state = self.state.take().map(|state| {
   91|   397k|                            state.recognize_next(
   92|   397k|                                token,
   93|   397k|                                &mut self.context,
   94|   397k|                                &mut self.results,
   95|   397k|                                &mut self.errors,
   96|   397k|                            )
   97|   397k|                        });
_RNvMs1_NtNtCs3Okv3MbnXN6_5oxttl7toolkit6parserINtB5_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_12line_formats16NQuadsRecognizerE3endB9_:
  121|  33.9k|    pub fn end(&mut self) {
  122|  33.9k|        self.lexer.end()
  123|  33.9k|    }
_RNvMs1_NtNtCs3Okv3MbnXN6_5oxttl7toolkit6parserINtB5_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_12line_formats16NQuadsRecognizerE17extend_from_sliceB9_:
  125|  2.70M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  126|  2.70M|        self.lexer.extend_from_slice(other)
  127|  2.70M|    }
_RNvXs2_NtNtCs3Okv3MbnXN6_5oxttl7toolkit6parserINtB5_6ParserRShNtNtB9_12line_formats16NQuadsRecognizerENtNtNtNtCscdEvteftVc2_4core4iter6traits7collect12IntoIterator9into_iterB9_:
  146|  16.8k|    fn into_iter(self) -> Self::IntoIter {
  147|  16.8k|        FromSliceIterator { parser: self }
  148|  16.8k|    }
_RNvXs4_NtNtCs3Okv3MbnXN6_5oxttl7toolkit6parserINtB5_17FromSliceIteratorNtNtB9_12line_formats16NQuadsRecognizerENtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextB9_:
  206|  93.1k|    fn next(&mut self) -> Option<Self::Item> {
  207|  93.1k|        self.parser.read_next()
  208|  93.1k|    }


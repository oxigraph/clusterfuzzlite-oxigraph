rust_fuzzer_test_input:
  209|  68.7k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  68.7k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  68.7k|                }
  223|  68.7k|
  224|  68.7k|                __libfuzzer_sys_run(bytes);
  225|  68.7k|                0
  226|       |            }
_RNvNvCscPAijTBEHth_6nquads1__19___libfuzzer_sys_run:
  241|  68.7k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|       |            }
LLVMFuzzerTestOneInput:
   58|  68.7k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  68.7k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  68.7k|    });
   63|  68.7k|
   64|  68.7k|    match test_input {
   65|  68.7k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  68.7k|}
_RNCNvCsfZga41Oi5MJ_13libfuzzer_sys15test_input_wrap0B3_:
   59|  68.7k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  68.7k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  68.7k|        rust_fuzzer_test_input(data_slice)
   62|  68.7k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvMs3_NtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCsjv2Y2xFO4ua_4core4iter6traits8iterator8Iterator4next0ECscuJmoqhSOSr_5oxttl:
 1044|  40.2M|    pub(crate) unsafe fn next(
 1045|  40.2M|        &mut self,
 1046|  40.2M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  40.2M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  40.2M|        let found = find_raw(self.start, self.end)?;
 1057|   214k|        let result = found.distance(self.original_start);
 1058|   214k|        self.start = found.add(1);
 1059|   214k|        Some(result)
 1060|  40.2M|    }
_RINvNtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECscuJmoqhSOSr_5oxttl:
 1125|   177k|pub(crate) unsafe fn search_slice_with_raw(
 1126|   177k|    haystack: &[u8],
 1127|   177k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|   177k|) -> Option<usize> {
 1129|   177k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|   177k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|   177k|    // a &[u8].
 1132|   177k|    let start = haystack.as_ptr();
 1133|   177k|    let end = start.add(haystack.len());
 1134|   177k|    let found = find_raw(start, end)?;
 1135|  14.9k|    Some(found.distance(start))
 1136|   177k|}
_RINvNtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr7memchr20ECscuJmoqhSOSr_5oxttl:
 1125|  6.09M|pub(crate) unsafe fn search_slice_with_raw(
 1126|  6.09M|    haystack: &[u8],
 1127|  6.09M|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  6.09M|) -> Option<usize> {
 1129|  6.09M|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  6.09M|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  6.09M|    // a &[u8].
 1132|  6.09M|    let start = haystack.as_ptr();
 1133|  6.09M|    let end = start.add(haystack.len());
 1134|  6.09M|    let found = find_raw(start, end)?;
 1135|  2.34M|    Some(found.distance(start))
 1136|  6.09M|}
_RNvMs3_NtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  40.0M|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  40.0M|        Iter {
 1029|  40.0M|            original_start: haystack.as_ptr(),
 1030|  40.0M|            start: haystack.as_ptr(),
 1031|  40.0M|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  40.0M|            haystack: core::marker::PhantomData,
 1033|  40.0M|        }
 1034|  40.0M|    }
_RNvMNtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m128iE7needle1B8_:
  117|   207k|    pub(crate) fn needle1(&self) -> u8 {
  118|   207k|        self.s1
  119|   207k|    }
_RNvMNtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m128iE3newB8_:
  111|   177k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|   177k|        One { s1: needle, v1: V::splat(needle) }
  113|   177k|    }
_RNvMNtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m256iE3newB8_:
  111|   177k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|   177k|        One { s1: needle, v1: V::splat(needle) }
  113|   177k|    }
_RNvMNtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  27.3k|    pub(crate) unsafe fn find_raw(
  144|  27.3k|        &self,
  145|  27.3k|        start: *const u8,
  146|  27.3k|        end: *const u8,
  147|  27.3k|    ) -> Option<*const u8> {
  148|  27.3k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  27.3k|        // need to move up to using a u64 for the masks used below. Currently
  150|  27.3k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  27.3k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  27.3k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  27.3k|        let topos = V::Mask::first_offset;
  155|  27.3k|        let len = end.distance(start);
  156|  27.3k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  27.3k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  2.26k|            return Some(cur);
  167|  25.0k|        }
  168|  25.0k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  25.0k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  25.0k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  25.0k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  25.0k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  39.3k|        while cur <= end.sub(V::BYTES) {
  213|  14.7k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  14.7k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    428|                return Some(cur);
  216|  14.3k|            }
  217|  14.3k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  24.6k|        if cur < end {
  224|  20.3k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  20.3k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  20.3k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  20.3k|            return self.search_chunk(cur, topos);
  228|  4.31k|        }
  229|  4.31k|        None
  230|  27.3k|    }
_RNvMNtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m256iE8find_rawB8_:
  143|   104k|    pub(crate) unsafe fn find_raw(
  144|   104k|        &self,
  145|   104k|        start: *const u8,
  146|   104k|        end: *const u8,
  147|   104k|    ) -> Option<*const u8> {
  148|   104k|        // If we want to support vectors bigger than 256 bits, we probably
  149|   104k|        // need to move up to using a u64 for the masks used below. Currently
  150|   104k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|   104k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|   104k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|   104k|        let topos = V::Mask::first_offset;
  155|   104k|        let len = end.distance(start);
  156|   104k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|   104k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  5.64k|            return Some(cur);
  167|  98.5k|        }
  168|  98.5k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  98.5k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  98.5k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  98.5k|        if len >= Self::LOOP_SIZE {
  172|  71.6k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|  38.6k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|  38.6k|                let a = V::load_aligned(cur);
  176|  38.6k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|  38.6k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|  38.6k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|  38.6k|                let eqa = self.v1.cmpeq(a);
  180|  38.6k|                let eqb = self.v1.cmpeq(b);
  181|  38.6k|                let eqc = self.v1.cmpeq(c);
  182|  38.6k|                let eqd = self.v1.cmpeq(d);
  183|  38.6k|                let or1 = eqa.or(eqb);
  184|  38.6k|                let or2 = eqc.or(eqd);
  185|  38.6k|                let or3 = or1.or(or2);
  186|  38.6k|                if or3.movemask_will_have_non_zero() {
  187|  2.00k|                    let mask = eqa.movemask();
  188|  2.00k|                    if mask.has_non_zero() {
  189|    546|                        return Some(cur.add(topos(mask)));
  190|  1.45k|                    }
  191|  1.45k|
  192|  1.45k|                    let mask = eqb.movemask();
  193|  1.45k|                    if mask.has_non_zero() {
  194|    883|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|    575|                    }
  196|    575|
  197|    575|                    let mask = eqc.movemask();
  198|    575|                    if mask.has_non_zero() {
  199|    279|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|    296|                    }
  201|    296|
  202|    296|                    let mask = eqd.movemask();
  203|    296|                    debug_assert!(mask.has_non_zero());
  204|    296|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  36.5k|                }
  206|  36.5k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  63.4k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|   212k|        while cur <= end.sub(V::BYTES) {
  213|   116k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|   116k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    738|                return Some(cur);
  216|   115k|            }
  217|   115k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  95.7k|        if cur < end {
  224|  91.3k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  91.3k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  91.3k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  91.3k|            return self.search_chunk(cur, topos);
  228|  4.39k|        }
  229|  4.39k|        None
  230|   104k|    }
_RINvMNtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  62.3k|    unsafe fn search_chunk(
  417|  62.3k|        &self,
  418|  62.3k|        cur: *const u8,
  419|  62.3k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  62.3k|    ) -> Option<*const u8> {
  421|  62.3k|        let chunk = V::load_unaligned(cur);
  422|  62.3k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  62.3k|        if mask.has_non_zero() {
  424|  2.88k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  59.4k|            None
  427|       |        }
  428|  62.3k|    }
_RINvMNtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|   311k|    unsafe fn search_chunk(
  417|   311k|        &self,
  418|   311k|        cur: *const u8,
  419|   311k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|   311k|    ) -> Option<*const u8> {
  421|   311k|        let chunk = V::load_unaligned(cur);
  422|   311k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|   311k|        if mask.has_non_zero() {
  424|  7.41k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|   304k|            None
  427|       |        }
  428|   311k|    }
_RNvMs_NtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m128iE3newBa_:
  450|  46.3M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  46.3M|        Two {
  452|  46.3M|            s1: needle1,
  453|  46.3M|            s2: needle2,
  454|  46.3M|            v1: V::splat(needle1),
  455|  46.3M|            v2: V::splat(needle2),
  456|  46.3M|        }
  457|  46.3M|    }
_RNvMs_NtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m256iE3newBa_:
  450|  46.3M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  46.3M|        Two {
  452|  46.3M|            s1: needle1,
  453|  46.3M|            s2: needle2,
  454|  46.3M|            v1: V::splat(needle1),
  455|  46.3M|            v2: V::splat(needle2),
  456|  46.3M|        }
  457|  46.3M|    }
_RNvMs_NtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  63.6M|    pub(crate) fn needle1(&self) -> u8 {
  462|  63.6M|        self.s1
  463|  63.6M|    }
_RNvMs_NtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  63.3M|    pub(crate) fn needle2(&self) -> u8 {
  468|  63.3M|        self.s2
  469|  63.3M|    }
_RNvMs_NtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m128iE8find_rawBa_:
  493|  1.03M|    pub(crate) unsafe fn find_raw(
  494|  1.03M|        &self,
  495|  1.03M|        start: *const u8,
  496|  1.03M|        end: *const u8,
  497|  1.03M|    ) -> Option<*const u8> {
  498|  1.03M|        // If we want to support vectors bigger than 256 bits, we probably
  499|  1.03M|        // need to move up to using a u64 for the masks used below. Currently
  500|  1.03M|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|  1.03M|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|  1.03M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  1.03M|        let topos = V::Mask::first_offset;
  505|  1.03M|        let len = end.distance(start);
  506|  1.03M|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  1.03M|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   200k|            return Some(cur);
  517|   831k|        }
  518|   831k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   831k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|   831k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   831k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   831k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  1.07M|        while cur <= end.sub(V::BYTES) {
  551|   258k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   258k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  14.9k|                return Some(cur);
  554|   243k|            }
  555|   243k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   817k|        if cur < end {
  562|   771k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   771k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|   771k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   771k|            return self.search_chunk(cur, topos);
  566|  45.2k|        }
  567|  45.2k|        None
  568|  1.03M|    }
_RNvMs_NtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m256iE8find_rawBa_:
  493|  2.67M|    pub(crate) unsafe fn find_raw(
  494|  2.67M|        &self,
  495|  2.67M|        start: *const u8,
  496|  2.67M|        end: *const u8,
  497|  2.67M|    ) -> Option<*const u8> {
  498|  2.67M|        // If we want to support vectors bigger than 256 bits, we probably
  499|  2.67M|        // need to move up to using a u64 for the masks used below. Currently
  500|  2.67M|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|  2.67M|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|  2.67M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  2.67M|        let topos = V::Mask::first_offset;
  505|  2.67M|        let len = end.distance(start);
  506|  2.67M|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  2.67M|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  1.27M|            return Some(cur);
  517|  1.40M|        }
  518|  1.40M|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  1.40M|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|  1.40M|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  1.40M|        if len >= Self::LOOP_SIZE {
  522|  2.10M|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|  1.48M|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|  1.48M|                let a = V::load_aligned(cur);
  526|  1.48M|                let b = V::load_aligned(cur.add(V::BYTES));
  527|  1.48M|                let eqa1 = self.v1.cmpeq(a);
  528|  1.48M|                let eqb1 = self.v1.cmpeq(b);
  529|  1.48M|                let eqa2 = self.v2.cmpeq(a);
  530|  1.48M|                let eqb2 = self.v2.cmpeq(b);
  531|  1.48M|                let or1 = eqa1.or(eqb1);
  532|  1.48M|                let or2 = eqa2.or(eqb2);
  533|  1.48M|                let or3 = or1.or(or2);
  534|  1.48M|                if or3.movemask_will_have_non_zero() {
  535|   256k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|   256k|                    if mask.has_non_zero() {
  537|   100k|                        return Some(cur.add(topos(mask)));
  538|   155k|                    }
  539|   155k|
  540|   155k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|   155k|                    debug_assert!(mask.has_non_zero());
  542|   155k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|  1.23M|                }
  544|  1.23M|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   525k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  1.65M|        while cur <= end.sub(V::BYTES) {
  551|   543k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   543k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  38.3k|                return Some(cur);
  554|   505k|            }
  555|   505k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|  1.10M|        if cur < end {
  562|  1.07M|            debug_assert!(end.distance(cur) < V::BYTES);
  563|  1.07M|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|  1.07M|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|  1.07M|            return self.search_chunk(cur, topos);
  566|  29.4k|        }
  567|  29.4k|        None
  568|  2.67M|    }
_RINvMs_NtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  2.06M|    unsafe fn search_chunk(
  671|  2.06M|        &self,
  672|  2.06M|        cur: *const u8,
  673|  2.06M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  2.06M|    ) -> Option<*const u8> {
  675|  2.06M|        let chunk = V::load_unaligned(cur);
  676|  2.06M|        let eq1 = self.v1.cmpeq(chunk);
  677|  2.06M|        let eq2 = self.v2.cmpeq(chunk);
  678|  2.06M|        let mask = eq1.or(eq2).movemask();
  679|  2.06M|        if mask.has_non_zero() {
  680|   264k|            let mask1 = eq1.movemask();
  681|   264k|            let mask2 = eq2.movemask();
  682|   264k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  1.79M|            None
  685|       |        }
  686|  2.06M|    }
_RINvMs_NtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  4.29M|    unsafe fn search_chunk(
  671|  4.29M|        &self,
  672|  4.29M|        cur: *const u8,
  673|  4.29M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  4.29M|    ) -> Option<*const u8> {
  675|  4.29M|        let chunk = V::load_unaligned(cur);
  676|  4.29M|        let eq1 = self.v1.cmpeq(chunk);
  677|  4.29M|        let eq2 = self.v2.cmpeq(chunk);
  678|  4.29M|        let mask = eq1.or(eq2).movemask();
  679|  4.29M|        if mask.has_non_zero() {
  680|  1.50M|            let mask1 = eq1.movemask();
  681|  1.50M|            let mask2 = eq2.movemask();
  682|  1.50M|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  2.78M|            None
  685|       |        }
  686|  4.29M|    }
_RINvNtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  38.0k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  38.0k|    start: *const u8,
 1150|  38.0k|    end: *const u8,
 1151|  38.0k|    confirm: F,
 1152|  38.0k|) -> Option<*const u8> {
 1153|  38.0k|    debug_assert!(start <= end);
 1154|  38.0k|    let mut ptr = start;
 1155|   242k|    while ptr < end {
 1156|   207k|        if confirm(*ptr) {
 1157|  2.62k|            return Some(ptr);
 1158|   204k|        }
 1159|   204k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  35.3k|    None
 1162|  38.0k|}
_RINvNtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|  32.4M|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  32.4M|    start: *const u8,
 1150|  32.4M|    end: *const u8,
 1151|  32.4M|    confirm: F,
 1152|  32.4M|) -> Option<*const u8> {
 1153|  32.4M|    debug_assert!(start <= end);
 1154|  32.4M|    let mut ptr = start;
 1155|  95.6M|    while ptr < end {
 1156|  63.6M|        if confirm(*ptr) {
 1157|   526k|            return Some(ptr);
 1158|  63.1M|        }
 1159|  63.1M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  31.9M|    None
 1162|  32.4M|}

_RNvMNtNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|   177k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|   177k|        One {
   71|   177k|            sse2: generic::One::new(needle),
   72|   177k|            avx2: generic::One::new(needle),
   73|   177k|        }
   74|   177k|    }
_RNvMNtNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|   177k|    pub unsafe fn find_raw(
  180|   177k|        &self,
  181|   177k|        start: *const u8,
  182|   177k|        end: *const u8,
  183|   177k|    ) -> Option<*const u8> {
  184|   177k|        if start >= end {
  185|  7.74k|            return None;
  186|   169k|        }
  187|   169k|        let len = end.distance(start);
  188|   169k|        if len < __m256i::BYTES {
  189|  65.3k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  38.0k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  38.0k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  27.3k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|   104k|        }
  201|   104k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|   104k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|   104k|        // enough to run on the vector routine. Pointer validity is caller's
  204|   104k|        // responsibility.
  205|   104k|        //
  206|   104k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|   104k|        // means we'd have to annotate this routine with `target_feature`.
  208|   104k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|   104k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|   104k|        // The real problem is that a routine with a `target_feature`
  211|   104k|        // annotation generally can't be inlined into caller code unless
  212|   104k|        // the caller code has the same target feature annotations. Namely,
  213|   104k|        // the common case (at time of writing) is for calling code to not
  214|   104k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|   104k|        // `target_feature` on this routine, it can be inlined which will
  216|   104k|        // handle some of the short-haystack cases above without touching the
  217|   104k|        // architecture specific code.
  218|   104k|        self.find_raw_avx2(start, end)
  219|   177k|    }
_RNCNvMNtNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|   207k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|   207k|                    b == self.sse2.needle1()
  194|   207k|                })
_RNvMNtNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  27.3k|    unsafe fn find_raw_sse2(
  337|  27.3k|        &self,
  338|  27.3k|        start: *const u8,
  339|  27.3k|        end: *const u8,
  340|  27.3k|    ) -> Option<*const u8> {
  341|  27.3k|        self.sse2.find_raw(start, end)
  342|  27.3k|    }
_RNvMNtNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|   104k|    unsafe fn find_raw_avx2(
  397|   104k|        &self,
  398|   104k|        start: *const u8,
  399|   104k|        end: *const u8,
  400|   104k|    ) -> Option<*const u8> {
  401|   104k|        self.avx2.find_raw(start, end)
  402|   104k|    }
_RNvMs2_NtNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  46.3M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  46.3M|        Two {
  558|  46.3M|            sse2: generic::Two::new(needle1, needle2),
  559|  46.3M|            avx2: generic::Two::new(needle1, needle2),
  560|  46.3M|        }
  561|  46.3M|    }
_RNvMs2_NtNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNvMs2_NtNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  46.3M|    pub unsafe fn find_raw(
  655|  46.3M|        &self,
  656|  46.3M|        start: *const u8,
  657|  46.3M|        end: *const u8,
  658|  46.3M|    ) -> Option<*const u8> {
  659|  46.3M|        if start >= end {
  660|  10.1M|            return None;
  661|  36.1M|        }
  662|  36.1M|        let len = end.distance(start);
  663|  36.1M|        if len < __m256i::BYTES {
  664|  33.5M|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  32.4M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  32.4M|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|  1.03M|                self.find_raw_sse2(start, end)
  674|       |            };
  675|  2.67M|        }
  676|  2.67M|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|  2.67M|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|  2.67M|        // enough to run on the vector routine. Pointer validity is caller's
  679|  2.67M|        // responsibility.
  680|  2.67M|        //
  681|  2.67M|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|  2.67M|        // means we'd have to annotate this routine with `target_feature`.
  683|  2.67M|        // Which is fine, because this routine is `unsafe` anyway and the
  684|  2.67M|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|  2.67M|        // The real problem is that a routine with a `target_feature`
  686|  2.67M|        // annotation generally can't be inlined into caller code unless
  687|  2.67M|        // the caller code has the same target feature annotations. Namely,
  688|  2.67M|        // the common case (at time of writing) is for calling code to not
  689|  2.67M|        // have the `avx2` target feature enabled *at compile time*. Without
  690|  2.67M|        // `target_feature` on this routine, it can be inlined which will
  691|  2.67M|        // handle some of the short-haystack cases above without touching the
  692|  2.67M|        // architecture specific code.
  693|  2.67M|        self.find_raw_avx2(start, end)
  694|  46.3M|    }
_RNCNvMs2_NtNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  63.6M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  63.6M|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  63.6M|                })
_RNvMs2_NtNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|  1.03M|    unsafe fn find_raw_sse2(
  765|  1.03M|        &self,
  766|  1.03M|        start: *const u8,
  767|  1.03M|        end: *const u8,
  768|  1.03M|    ) -> Option<*const u8> {
  769|  1.03M|        self.sse2.find_raw(start, end)
  770|  1.03M|    }
_RNvMs2_NtNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|  2.67M|    unsafe fn find_raw_avx2(
  805|  2.67M|        &self,
  806|  2.67M|        start: *const u8,
  807|  2.67M|        end: *const u8,
  808|  2.67M|    ) -> Option<*const u8> {
  809|  2.67M|        self.avx2.find_raw(start, end)
  810|  2.67M|    }

_RNvNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  46.3M|pub(crate) fn memchr2_raw(
  221|  46.3M|    n1: u8,
  222|  46.3M|    n2: u8,
  223|  46.3M|    start: *const u8,
  224|  46.3M|    end: *const u8,
  225|  46.3M|) -> Option<*const u8> {
  226|  46.3M|    // SAFETY: We provide a valid function pointer type.
  227|  46.3M|    unsafe_ifunc!(
  228|  46.3M|        Two,
  229|  46.3M|        find_raw,
  230|  46.3M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  46.3M|        Option<*const u8>,
  232|  46.3M|        start,
  233|  46.3M|        end,
  234|  46.3M|        n1,
  235|  46.3M|        n2
  236|  46.3M|    )
  237|  46.3M|}
_RNvNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_646memchr10memchr_raw:
  174|   177k|pub(crate) fn memchr_raw(
  175|   177k|    n1: u8,
  176|   177k|    start: *const u8,
  177|   177k|    end: *const u8,
  178|   177k|) -> Option<*const u8> {
  179|   177k|    // SAFETY: We provide a valid function pointer type.
  180|   177k|    unsafe_ifunc!(
  181|   177k|        One,
  182|   177k|        find_raw,
  183|   177k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|   177k|        Option<*const u8>,
  185|   177k|        start,
  186|   177k|        end,
  187|   177k|        n1
  188|   177k|    )
  189|   177k|}
_RNvNvNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|   177k|        unsafe fn find_avx2(
   79|   177k|            $($needle: u8),+,
   80|   177k|            $hay_start: *const u8,
   81|   177k|            $hay_end: *const u8,
   82|   177k|        ) -> $retty {
   83|   177k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|   177k|            $memchrty::new_unchecked($($needle),+)
   85|   177k|                .$memchrfind($hay_start, $hay_end)
   86|   177k|        }
_RNvNvNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  46.3M|        unsafe fn find_avx2(
   79|  46.3M|            $($needle: u8),+,
   80|  46.3M|            $hay_start: *const u8,
   81|  46.3M|            $hay_end: *const u8,
   82|  46.3M|        ) -> $retty {
   83|  46.3M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  46.3M|            $memchrty::new_unchecked($($needle),+)
   85|  46.3M|                .$memchrfind($hay_start, $hay_end)
   86|  46.3M|        }
_RNvNvNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }

_RNvXNtCsenUNIr1NycQ_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  44.7M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  44.7M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  44.7M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  44.7M|    }
_RNvXNtCsenUNIr1NycQ_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|  2.35M|    fn as_usize(self) -> usize {
   27|  2.35M|        self as usize
   28|  2.35M|    }

_RNvMs2_NtCsenUNIr1NycQ_6memchr6memchrNtB5_7Memchr23newCscuJmoqhSOSr_5oxttl:
  377|  40.0M|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  40.0M|        Memchr2 {
  379|  40.0M|            needle1,
  380|  40.0M|            needle2,
  381|  40.0M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  40.0M|        }
  383|  40.0M|    }
_RNvNtCsenUNIr1NycQ_6memchr6memchr11memchr2_rawCscuJmoqhSOSr_5oxttl:
  574|  46.3M|unsafe fn memchr2_raw(
  575|  46.3M|    needle1: u8,
  576|  46.3M|    needle2: u8,
  577|  46.3M|    start: *const u8,
  578|  46.3M|    end: *const u8,
  579|  46.3M|) -> Option<*const u8> {
  580|  46.3M|    #[cfg(target_arch = "x86_64")]
  581|  46.3M|    {
  582|  46.3M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  46.3M|    }
  584|  46.3M|    #[cfg(target_arch = "wasm32")]
  585|  46.3M|    {
  586|  46.3M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  46.3M|    }
  588|  46.3M|    #[cfg(target_arch = "aarch64")]
  589|  46.3M|    {
  590|  46.3M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  46.3M|    }
  592|  46.3M|    #[cfg(not(any(
  593|  46.3M|        target_arch = "x86_64",
  594|  46.3M|        target_arch = "wasm32",
  595|  46.3M|        target_arch = "aarch64"
  596|  46.3M|    )))]
  597|  46.3M|    {
  598|  46.3M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  46.3M|            .find_raw(start, end)
  600|  46.3M|    }
  601|  46.3M|}
_RNvNtCsenUNIr1NycQ_6memchr6memchr12memchr2_iterCscuJmoqhSOSr_5oxttl:
  232|  40.0M|pub fn memchr2_iter<'h>(
  233|  40.0M|    needle1: u8,
  234|  40.0M|    needle2: u8,
  235|  40.0M|    haystack: &'h [u8],
  236|  40.0M|) -> Memchr2<'h> {
  237|  40.0M|    Memchr2::new(needle1, needle2, haystack)
  238|  40.0M|}
_RNvNtCsenUNIr1NycQ_6memchr6memchr6memchrCscuJmoqhSOSr_5oxttl:
   27|   177k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|   177k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|   177k|    // pointer between start and end.
   30|   177k|    unsafe {
   31|   177k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|   177k|        })
   34|   177k|    }
   35|   177k|}
_RNvNtCsenUNIr1NycQ_6memchr6memchr7memchr2CscuJmoqhSOSr_5oxttl:
   92|  6.09M|pub fn memchr2(needle1: u8, needle2: u8, haystack: &[u8]) -> Option<usize> {
   93|  6.09M|    // SAFETY: memchr2_raw, when a match is found, always returns a valid
   94|  6.09M|    // pointer between start and end.
   95|  6.09M|    unsafe {
   96|  6.09M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|       |            memchr2_raw(needle1, needle2, start, end)
   98|  6.09M|        })
   99|  6.09M|    }
  100|  6.09M|}
_RNvXs3_NtCsenUNIr1NycQ_6memchr6memchrNtB5_7Memchr2NtNtNtNtCsjv2Y2xFO4ua_4core4iter6traits8iterator8Iterator4nextCscuJmoqhSOSr_5oxttl:
  390|  40.2M|    fn next(&mut self) -> Option<usize> {
  391|  40.2M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  40.2M|        // pointers returns will fall within the start and end bounds, and this
  393|  40.2M|        // upholds the safety contract of `self.it.next`.
  394|  40.2M|        unsafe {
  395|  40.2M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  40.2M|        }
  397|  40.2M|    }
_RNCNvNtCsenUNIr1NycQ_6memchr6memchr7memchr20CscuJmoqhSOSr_5oxttl:
   96|  6.09M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|  6.09M|            memchr2_raw(needle1, needle2, start, end)
   98|  6.09M|        })
_RNCNvXs3_NtCsenUNIr1NycQ_6memchr6memchrNtB7_7Memchr2NtNtNtNtCsjv2Y2xFO4ua_4core4iter6traits8iterator8Iterator4next0CscuJmoqhSOSr_5oxttl:
  395|  40.2M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNCNvNtCsenUNIr1NycQ_6memchr6memchr6memchr0B5_:
   31|   177k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|   177k|            memchr_raw(needle, start, end)
   33|   177k|        })
_RNvNtCsenUNIr1NycQ_6memchr6memchr10memchr_rawB3_:
  504|   177k|unsafe fn memchr_raw(
  505|   177k|    needle: u8,
  506|   177k|    start: *const u8,
  507|   177k|    end: *const u8,
  508|   177k|) -> Option<*const u8> {
  509|   177k|    #[cfg(target_arch = "x86_64")]
  510|   177k|    {
  511|   177k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|   177k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|   177k|        // time. This function also handles using a fallback if neither AVX2
  514|   177k|        // nor SSE2 (unusual) are available.
  515|   177k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|   177k|    }
  517|   177k|    #[cfg(target_arch = "wasm32")]
  518|   177k|    {
  519|   177k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|   177k|    }
  521|   177k|    #[cfg(target_arch = "aarch64")]
  522|   177k|    {
  523|   177k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|   177k|    }
  525|   177k|    #[cfg(not(any(
  526|   177k|        target_arch = "x86_64",
  527|   177k|        target_arch = "wasm32",
  528|   177k|        target_arch = "aarch64"
  529|   177k|    )))]
  530|   177k|    {
  531|   177k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|   177k|    }
  533|   177k|}

_RNvMNtCsenUNIr1NycQ_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  128|  2.04M|    fn get_for_offset(self) -> u32 {
  129|  2.04M|        #[cfg(target_endian = "big")]
  130|  2.04M|        {
  131|  2.04M|            self.0.swap_bytes()
  132|  2.04M|        }
  133|  2.04M|        #[cfg(target_endian = "little")]
  134|  2.04M|        {
  135|  2.04M|            self.0
  136|  2.04M|        }
  137|  2.04M|    }
_RNvXs_NtCsenUNIr1NycQ_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  148|  8.52M|    fn has_non_zero(self) -> bool {
  149|  8.52M|        self.0 != 0
  150|  8.52M|    }
_RNvXs_NtCsenUNIr1NycQ_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  173|  2.04M|    fn first_offset(self) -> usize {
  174|  2.04M|        // We are dealing with little endian here (and if we aren't, we swap
  175|  2.04M|        // the bytes so we are in practice), where the most significant byte
  176|  2.04M|        // is at a higher address. That means the least significant bit that
  177|  2.04M|        // is set corresponds to the position of our first matching byte.
  178|  2.04M|        // That position corresponds to the number of zeros after the least
  179|  2.04M|        // significant bit.
  180|  2.04M|        self.get_for_offset().trailing_zeros() as usize
  181|  2.04M|    }
_RNvXNtNtCsenUNIr1NycQ_6memchr6vector7x86sse2NtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  220|  2.12M|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  221|  2.12M|            _mm_loadu_si128(data as *const __m128i)
  222|  2.12M|        }
_RNvXNtNtCsenUNIr1NycQ_6memchr6vector7x86sse2NtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  225|  2.65M|        unsafe fn movemask(self) -> SensibleMoveMask {
  226|  2.65M|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  227|  2.65M|        }
_RNvXNtNtCsenUNIr1NycQ_6memchr6vector7x86sse2NtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  230|  4.18M|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  231|  4.18M|            _mm_cmpeq_epi8(self, vector2)
  232|  4.18M|        }
_RNvYNtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m256iNtNtCsenUNIr1NycQ_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   65|  1.52M|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   66|  1.52M|        self.movemask().has_non_zero()
   67|  1.52M|    }
_RNvXNtNtCsenUNIr1NycQ_6memchr6vector7x86avx2NtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  275|  9.98M|        unsafe fn movemask(self) -> SensibleMoveMask {
  276|  9.98M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  277|  9.98M|        }
_RNvXNtNtCsenUNIr1NycQ_6memchr6vector7x86avx2NtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  270|  4.60M|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  271|  4.60M|            _mm256_loadu_si256(data as *const __m256i)
  272|  4.60M|        }
_RNvXNtNtCsenUNIr1NycQ_6memchr6vector7x86avx2NtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  280|  15.0M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  281|  15.0M|            _mm256_cmpeq_epi8(self, vector2)
  282|  15.0M|        }
_RNvXs_NtCsenUNIr1NycQ_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  163|  2.18M|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  164|  2.18M|        SensibleMoveMask(self.0 | other.0)
  165|  2.18M|    }
_RNvXNtNtCsenUNIr1NycQ_6memchr6vector7x86sse2NtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  210|  92.8M|        unsafe fn splat(byte: u8) -> __m128i {
  211|  92.8M|            _mm_set1_epi8(byte as i8)
  212|  92.8M|        }
_RNvXNtNtCsenUNIr1NycQ_6memchr6vector7x86sse2NtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m128iNtB4_6Vector2or:
  240|  2.06M|        unsafe fn or(self, vector2: Self) -> __m128i {
  241|  2.06M|            _mm_or_si128(self, vector2)
  242|  2.06M|        }
_RNvXNtNtCsenUNIr1NycQ_6memchr6vector7x86avx2NtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  260|  92.8M|        unsafe fn splat(byte: u8) -> __m256i {
  261|  92.8M|            _mm256_set1_epi8(byte as i8)
  262|  92.8M|        }
_RNvXNtNtCsenUNIr1NycQ_6memchr6vector7x86avx2NtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  265|  3.12M|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  266|  3.12M|            _mm256_load_si256(data as *const __m256i)
  267|  3.12M|        }
_RNvXNtNtCsenUNIr1NycQ_6memchr6vector7x86avx2NtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m256iNtB4_6Vector2or:
  290|  8.87M|        unsafe fn or(self, vector2: Self) -> __m256i {
  291|  8.87M|            _mm256_or_si256(self, vector2)
  292|  8.87M|        }

_RNvMs2_NtCsb5PdA0LJG5h_9once_cell3impINtB5_8OnceCellNtNtCs15NWbik7Z2V_5alloc6string6StringE14is_initializedCsfZga41Oi5MJ_13libfuzzer_sys:
   49|  68.7k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  68.7k|        // An `Acquire` load is enough because that makes all the initialization
   51|  68.7k|        // operations visible to us, and, this being a fast path, weaker
   52|  68.7k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  68.7k|        // `SeqCst` operations on the slow path.
   54|  68.7k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  68.7k|    }

_RNvMs4_NtCsb5PdA0LJG5h_9once_cell4syncINtB5_8OnceCellNtNtCs15NWbik7Z2V_5alloc6string6StringE3getCsfZga41Oi5MJ_13libfuzzer_sys:
  963|  68.7k|        pub fn get(&self) -> Option<&T> {
  964|  68.7k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  68.7k|                None
  969|       |            }
  970|  68.7k|        }

_RNvMCs8Z3Sevypr4T_10oxilangtagINtB2_11LanguageTagReE10into_innerCscuJmoqhSOSr_5oxttl:
   54|   138k|    pub fn into_inner(self) -> T {
   55|   138k|        self.tag
   56|   138k|    }
_RNvMCs8Z3Sevypr4T_10oxilangtagINtB2_11LanguageTagReE5parseCscuJmoqhSOSr_5oxttl:
   41|   236k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   42|   236k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   43|   138k|        Ok(Self { tag, positions })
   44|   236k|    }
_RNvXsE_Cs8Z3Sevypr4T_10oxilangtagNtB5_16VoidOutputBufferNtNtCsjv2Y2xFO4ua_4core7default7Default7defaultCscuJmoqhSOSr_5oxttl:
  547|   236k|#[derive(Default)]
_RINvCs8Z3Sevypr4T_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECs5bua6W9iSBw_5oxrdf:
  621|   227k|fn parse_langtag(
  622|   227k|    input: &str,
  623|   227k|    output: &mut impl OutputBuffer,
  624|   227k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  625|   227k|    #[derive(PartialEq, Eq)]
  626|   227k|    enum State {
  627|   227k|        Start,
  628|   227k|        AfterLanguage,
  629|   227k|        AfterExtLang,
  630|   227k|        AfterScript,
  631|   227k|        AfterRegion,
  632|   227k|        InExtension { expected: bool },
  633|   227k|        InPrivateUse { expected: bool },
  634|   227k|    }
  635|   227k|
  636|   227k|    let mut state = State::Start;
  637|   227k|    let mut language_end = 0;
  638|   227k|    let mut extlang_end = 0;
  639|   227k|    let mut script_end = 0;
  640|   227k|    let mut region_end = 0;
  641|   227k|    let mut variant_end = 0;
  642|   227k|    let mut extension_end = 0;
  643|   227k|    let mut extlangs_count = 0;
  644|   393k|    for (subtag, end) in SubTagIterator::new(input) {
  645|   393k|        if subtag.is_empty() {
  646|      0|            return Err(LanguageTagParseError {
  647|      0|                kind: TagParseErrorKind::EmptySubtag,
  648|      0|            });
  649|   393k|        }
  650|   393k|        if subtag.len() > 8 {
  651|  9.08k|            return Err(LanguageTagParseError {
  652|  9.08k|                kind: TagParseErrorKind::SubtagTooLong,
  653|  9.08k|            });
  654|   384k|        }
  655|   384k|        if state == State::Start {
  656|       |            // Primary language
  657|   219k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  658|  33.3k|                return Err(LanguageTagParseError {
  659|  33.3k|                    kind: TagParseErrorKind::InvalidLanguage,
  660|  33.3k|                });
  661|   185k|            }
  662|   185k|            language_end = end;
  663|   185k|            output.extend(to_lowercase(subtag));
  664|   185k|            if subtag.len() < 4 {
  665|   103k|                // extlangs are only allowed for short language tags
  666|   103k|                state = State::AfterLanguage;
  667|   103k|            } else {
  668|  82.5k|                state = State::AfterExtLang;
  669|  82.5k|            }
  670|   165k|        } else if let State::InPrivateUse { .. } = state {
  671|  22.8k|            if !is_alphanumeric(subtag) {
  672|      0|                return Err(LanguageTagParseError {
  673|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  674|      0|                });
  675|  22.8k|            }
  676|  22.8k|            output.push('-');
  677|  22.8k|            output.extend(to_lowercase(subtag));
  678|  22.8k|            state = State::InPrivateUse { expected: false };
  679|   142k|        } else if subtag == "x" || subtag == "X" {
  680|       |            // We make sure extension is found
  681|  30.6k|            if let State::InExtension { expected: true } = state {
  682|  1.60k|                return Err(LanguageTagParseError {
  683|  1.60k|                    kind: TagParseErrorKind::EmptyExtension,
  684|  1.60k|                });
  685|  29.0k|            }
  686|  29.0k|            output.push('-');
  687|  29.0k|            output.push('x');
  688|  29.0k|            state = State::InPrivateUse { expected: true };
  689|   111k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  690|       |            // We make sure extension is found
  691|  41.5k|            if let State::InExtension { expected: true } = state {
  692|  2.84k|                return Err(LanguageTagParseError {
  693|  2.84k|                    kind: TagParseErrorKind::EmptyExtension,
  694|  2.84k|                });
  695|  38.6k|            }
  696|  38.6k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  697|  38.6k|            output.push('-');
  698|  38.6k|            output.push(extension_tag);
  699|  38.6k|            state = State::InExtension { expected: true };
  700|  70.4k|        } else if let State::InExtension { .. } = state {
  701|  8.74k|            if !is_alphanumeric(subtag) {
  702|      0|                return Err(LanguageTagParseError {
  703|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  704|      0|                });
  705|  8.74k|            }
  706|  8.74k|            extension_end = end;
  707|  8.74k|            output.push('-');
  708|  8.74k|            output.extend(to_lowercase(subtag));
  709|  8.74k|            state = State::InExtension { expected: false };
  710|  61.6k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  711|  11.1k|            extlangs_count += 1;
  712|  11.1k|            if extlangs_count > 3 {
  713|    900|                return Err(LanguageTagParseError {
  714|    900|                    kind: TagParseErrorKind::TooManyExtlangs,
  715|    900|                });
  716|  10.2k|            }
  717|  10.2k|            // valid extlangs
  718|  10.2k|            extlang_end = end;
  719|  10.2k|            output.push('-');
  720|  10.2k|            output.extend(to_lowercase(subtag));
  721|  50.5k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  722|  40.8k|            && subtag.len() == 4
  723|  5.13k|            && is_alphabetic(subtag)
  724|  5.13k|        {
  725|  5.13k|            // Script
  726|  5.13k|            script_end = end;
  727|  5.13k|            output.push('-');
  728|  5.13k|            output.extend(to_uppercase_first(subtag));
  729|  5.13k|            state = State::AfterScript;
  730|  45.4k|        } else if (state == State::AfterLanguage
  731|  21.2k|            || state == State::AfterExtLang
  732|  9.71k|            || state == State::AfterScript)
  733|  37.8k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  734|  10.7k|                || subtag.len() == 3 && is_numeric(subtag))
  735|  27.1k|        {
  736|  27.1k|            // Region
  737|  27.1k|            region_end = end;
  738|  27.1k|            output.push('-');
  739|  27.1k|            output.extend(to_uppercase(subtag));
  740|  27.1k|            state = State::AfterRegion;
  741|  27.1k|        } else if (state == State::AfterLanguage
  742|  15.7k|            || state == State::AfterExtLang
  743|  7.60k|            || state == State::AfterScript
  744|  7.56k|            || state == State::AfterRegion)
  745|  18.3k|            && is_alphanumeric(subtag)
  746|  18.3k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  747|  8.08k|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  748|  10.2k|        {
  749|  10.2k|            // Variant
  750|  10.2k|            variant_end = end;
  751|  10.2k|            output.push('-');
  752|  10.2k|            output.extend(to_lowercase(subtag));
  753|  10.2k|            state = State::AfterRegion;
  754|  10.2k|        } else {
  755|  8.08k|            return Err(LanguageTagParseError {
  756|  8.08k|                kind: TagParseErrorKind::InvalidSubtag,
  757|  8.08k|            });
  758|       |        }
  759|       |    }
  760|       |
  761|       |    //We make sure we are in a correct final state
  762|   172k|    if let State::InExtension { expected: true } = state {
  763|  25.8k|        return Err(LanguageTagParseError {
  764|  25.8k|            kind: TagParseErrorKind::EmptyExtension,
  765|  25.8k|        });
  766|   146k|    }
  767|   146k|    if let State::InPrivateUse { expected: true } = state {
  768|  16.7k|        return Err(LanguageTagParseError {
  769|  16.7k|            kind: TagParseErrorKind::EmptyPrivateUse,
  770|  16.7k|        });
  771|   129k|    }
  772|   129k|
  773|   129k|    //We make sure we have not skipped anyone
  774|   129k|    if extlang_end < language_end {
  775|   122k|        extlang_end = language_end;
  776|   122k|    }
  777|   129k|    if script_end < extlang_end {
  778|   124k|        script_end = extlang_end;
  779|   124k|    }
  780|   129k|    if region_end < script_end {
  781|   114k|        region_end = script_end;
  782|   114k|    }
  783|   129k|    if variant_end < region_end {
  784|   119k|        variant_end = region_end;
  785|   119k|    }
  786|   129k|    if extension_end < variant_end {
  787|   126k|        extension_end = variant_end;
  788|   126k|    }
  789|       |
  790|   129k|    Ok(TagElementsPositions {
  791|   129k|        language_end,
  792|   129k|        extlang_end,
  793|   129k|        script_end,
  794|   129k|        region_end,
  795|   129k|        variant_end,
  796|   129k|        extension_end,
  797|   129k|    })
  798|   227k|}
_RINvCs8Z3Sevypr4T_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECs5bua6W9iSBw_5oxrdf:
  576|   236k|fn parse_language_tag(
  577|   236k|    input: &str,
  578|   236k|    output: &mut impl OutputBuffer,
  579|   236k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  580|       |    //grandfathered tags
  581|   236k|    if let Some(tag) = GRANDFATHEREDS
  582|   236k|        .iter()
  583|   236k|        .find(|record| record.eq_ignore_ascii_case(input))
  584|       |    {
  585|      0|        output.push_str(tag);
  586|      0|        Ok(TagElementsPositions {
  587|      0|            language_end: tag.len(),
  588|      0|            extlang_end: tag.len(),
  589|      0|            script_end: tag.len(),
  590|      0|            region_end: tag.len(),
  591|      0|            variant_end: tag.len(),
  592|      0|            extension_end: tag.len(),
  593|      0|        })
  594|   236k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  595|       |        // private use
  596|  8.73k|        if !is_alphanumeric_or_dash(input) {
  597|      0|            Err(LanguageTagParseError {
  598|      0|                kind: TagParseErrorKind::ForbiddenChar,
  599|      0|            })
  600|  8.73k|        } else if input.len() == 2 {
  601|      0|            Err(LanguageTagParseError {
  602|      0|                kind: TagParseErrorKind::EmptyPrivateUse,
  603|      0|            })
  604|       |        } else {
  605|  8.73k|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  606|  8.73k|            Ok(TagElementsPositions {
  607|  8.73k|                language_end: input.len(),
  608|  8.73k|                extlang_end: input.len(),
  609|  8.73k|                script_end: input.len(),
  610|  8.73k|                region_end: input.len(),
  611|  8.73k|                variant_end: input.len(),
  612|  8.73k|                extension_end: input.len(),
  613|  8.73k|            })
  614|       |        }
  615|       |    } else {
  616|   227k|        parse_langtag(input, output)
  617|       |    }
  618|   236k|}
_RINvXsr_Cs8Z3Sevypr4T_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsjv2Y2xFO4ua_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECs5bua6W9iSBw_5oxrdf:
  560|  8.73k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Cs8Z3Sevypr4T_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsjv2Y2xFO4ua_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECs5bua6W9iSBw_5oxrdf:
  560|   237k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Cs8Z3Sevypr4T_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsjv2Y2xFO4ua_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECs5bua6W9iSBw_5oxrdf:
  560|  27.1k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Cs8Z3Sevypr4T_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsjv2Y2xFO4ua_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECs5bua6W9iSBw_5oxrdf:
  560|  5.13k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCs8Z3Sevypr4T_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0Cs5bua6W9iSBw_5oxrdf:
  583|  6.15M|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvCs8Z3Sevypr4T_10oxilangtag10is_numericCs5bua6W9iSBw_5oxrdf:
  865|  7.94k|fn is_numeric(s: &str) -> bool {
  866|  7.94k|    s.chars().all(|x| x.is_ascii_digit())
  867|  7.94k|}
_RNvCs8Z3Sevypr4T_10oxilangtag12to_lowercaseCs5bua6W9iSBw_5oxrdf:
  892|   237k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  893|   237k|    s.chars().map(|c| c.to_ascii_lowercase())
  894|   237k|}
_RNvCs8Z3Sevypr4T_10oxilangtag12to_uppercaseCs5bua6W9iSBw_5oxrdf:
  880|  27.1k|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  881|  27.1k|    s.chars().map(|c| c.to_ascii_uppercase())
  882|  27.1k|}
_RNvCs8Z3Sevypr4T_10oxilangtag13is_alphabeticCs5bua6W9iSBw_5oxrdf:
  860|   239k|fn is_alphabetic(s: &str) -> bool {
  861|   239k|    s.chars().all(|x| x.is_ascii_alphabetic())
  862|   239k|}
_RNvCs8Z3Sevypr4T_10oxilangtag15is_alphanumericCs5bua6W9iSBw_5oxrdf:
  870|  91.4k|fn is_alphanumeric(s: &str) -> bool {
  871|  91.4k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  872|  91.4k|}
_RNvCs8Z3Sevypr4T_10oxilangtag18to_uppercase_firstCs5bua6W9iSBw_5oxrdf:
  886|  5.13k|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  887|  5.13k|    let mut chars = s.chars();
  888|  5.13k|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  889|  5.13k|}
_RNvCs8Z3Sevypr4T_10oxilangtag23is_alphanumeric_or_dashCs5bua6W9iSBw_5oxrdf:
  875|  8.73k|fn is_alphanumeric_or_dash(s: &str) -> bool {
  876|  8.73k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  877|  8.73k|}
_RNvMsv_Cs8Z3Sevypr4T_10oxilangtagNtB5_14SubTagIterator3newCs5bua6W9iSBw_5oxrdf:
  839|   227k|    fn new(input: &'a str) -> Self {
  840|   227k|        Self {
  841|   227k|            split: input.split('-'),
  842|   227k|            position: 0,
  843|   227k|        }
  844|   227k|    }
_RNvXs_NvCs8Z3Sevypr4T_10oxilangtag13parse_langtagNtB4_5StateNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqCs5bua6W9iSBw_5oxrdf:
  625|   645k|    #[derive(PartialEq, Eq)]
_RNvXsq_Cs8Z3Sevypr4T_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCs5bua6W9iSBw_5oxrdf:
  552|   219k|    fn push(&mut self, _: char) {}
_RNvXsw_Cs8Z3Sevypr4T_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCsjv2Y2xFO4ua_4core4iter6traits8iterator8Iterator4nextCs5bua6W9iSBw_5oxrdf:
  851|   565k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  852|   565k|        let tag = self.split.next()?;
  853|   393k|        let tag_end = self.position + tag.len();
  854|   393k|        self.position = tag_end + 1;
  855|   393k|        Some((tag, tag_end))
  856|   565k|    }
_RNvXso_Cs8Z3Sevypr4T_10oxilangtagNtB5_21LanguageTagParseErrorNtNtCsjv2Y2xFO4ua_4core3fmt7Display3fmt:
  482|  98.5k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  483|  98.5k|        match self.kind {
  484|       |            TagParseErrorKind::EmptyExtension => {
  485|  30.3k|                write!(f, "If an extension subtag is present, it must not be empty")
  486|       |            }
  487|       |            TagParseErrorKind::EmptyPrivateUse => {
  488|  16.7k|                write!(f, "If the `x` subtag is present, it must not be empty")
  489|       |            }
  490|       |            TagParseErrorKind::ForbiddenChar => {
  491|      0|                write!(f, "The langtag contains a char not allowed")
  492|       |            }
  493|  8.08k|            TagParseErrorKind::InvalidSubtag => write!(
  494|  8.08k|                f,
  495|  8.08k|                "A subtag fails to parse, it does not match any other subtags"
  496|  8.08k|            ),
  497|  33.3k|            TagParseErrorKind::InvalidLanguage => write!(f, "The given language subtag is invalid"),
  498|       |            TagParseErrorKind::SubtagTooLong => {
  499|  9.08k|                write!(f, "A subtag may be eight characters in length at maximum")
  500|       |            }
  501|      0|            TagParseErrorKind::EmptySubtag => write!(f, "A subtag should not be empty"),
  502|       |            TagParseErrorKind::TooManyExtlangs => {
  503|    900|                write!(f, "At maximum three extlangs are allowed")
  504|       |            }
  505|       |        }
  506|  98.5k|    }
_RNCNvCs8Z3Sevypr4T_10oxilangtag13is_alphabetic0B3_:
  861|   815k|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCs8Z3Sevypr4T_10oxilangtag10is_numeric0B3_:
  866|  7.94k|    s.chars().all(|x| x.is_ascii_digit())
_RNCNvCs8Z3Sevypr4T_10oxilangtag15is_alphanumeric0B3_:
  871|   200k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNCNvCs8Z3Sevypr4T_10oxilangtag23is_alphanumeric_or_dash0B3_:
  876|   243k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')

_RINvMs11_Csh8sWMiPH21C_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECs5bua6W9iSBw_5oxrdf:
 1567|   170k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1568|   170k|        Err(IriParseError { kind })
 1569|   170k|    }
_RNCNvMs11_Csh8sWMiPH21C_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0Cs5bua6W9iSBw_5oxrdf:
 1550|  29.9k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_Csh8sWMiPH21C_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0Cs5bua6W9iSBw_5oxrdf:
 1551|  8.98k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMCsh8sWMiPH21C_5oxiriINtB2_6IriRefNtNtCs15NWbik7Z2V_5alloc6string6StringE10into_innerCs5bua6W9iSBw_5oxrdf:
  191|   534k|    pub fn into_inner(self) -> T {
  192|   534k|        self.iri
  193|   534k|    }
_RNvMCsh8sWMiPH21C_5oxiriINtB2_6IriRefNtNtCs15NWbik7Z2V_5alloc6string6StringE11is_absoluteCs5bua6W9iSBw_5oxrdf:
  205|   624k|    pub fn is_absolute(&self) -> bool {
  206|   624k|        self.positions.scheme_end != 0
  207|   624k|    }
_RNvMCsh8sWMiPH21C_5oxiriINtB2_6IriRefNtNtCs15NWbik7Z2V_5alloc6string6StringE5parseCs5bua6W9iSBw_5oxrdf:
   58|   794k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|   794k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|   624k|        Ok(Self { iri, positions })
   61|   794k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCs5bua6W9iSBw_5oxrdf:
 1366|  46.8k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|  46.8k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|  8.44k|            let start_position = self.input.position;
 1370|   270k|            while let Some(c) = self.input.next() {
 1371|   263k|                self.output.push(c);
 1372|   263k|                if c == ']' {
 1373|  1.67k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|  1.67k|                    if !UNCHECKED {
 1375|  1.67k|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|  1.67k|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|      0|                        }
 1378|      0|                    }
 1379|       |
 1380|      0|                    let c = self.input.next();
 1381|      0|                    return match c {
 1382|       |                        Some(':') => {
 1383|      0|                            self.output.push(':');
 1384|      0|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|      0|                            self.output_positions.authority_end = self.output.len();
 1388|      0|                            self.parse_path_start(c)
 1389|       |                        }
 1390|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|   261k|                }
 1393|       |            }
 1394|  6.77k|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|   434k|            loop {
 1398|   434k|                let c = self.input.next();
 1399|   434k|                match c {
 1400|       |                    Some(':') => {
 1401|  10.2k|                        self.output.push(':');
 1402|  10.2k|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|  23.3k|                        self.output_positions.authority_end = self.output.len();
 1406|  23.3k|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|   401k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|  46.8k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCs5bua6W9iSBw_5oxrdf:
 1457|   733k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|  3.18M|        loop {
 1459|  3.18M|            let c = self.input.next();
 1460|  3.18M|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|   727k|                    if self.output.as_str().ends_with("/..") {
 1463|      0|                        self.remove_last_segment();
 1464|      0|                        self.remove_last_segment();
 1465|      0|                        self.output.push('/');
 1466|   727k|                    } else if self.output.as_str().ends_with("/.") {
 1467|      0|                        self.remove_last_segment();
 1468|      0|                        self.output.push('/');
 1469|   727k|                    } else if c == Some('/') {
 1470|  87.7k|                        self.output.push('/');
 1471|   639k|                    }
 1472|       |
 1473|   727k|                    if c == Some('?') {
 1474|  50.2k|                        self.output_positions.path_end = self.output.len();
 1475|  50.2k|                        self.output.push('?');
 1476|  50.2k|                        return self.parse_query();
 1477|   677k|                    } else if c == Some('#') {
 1478|  16.0k|                        self.output_positions.path_end = self.output.len();
 1479|  16.0k|                        self.output_positions.query_end = self.output.len();
 1480|  16.0k|                        self.output.push('#');
 1481|  16.0k|                        return self.parse_fragment();
 1482|   661k|                    } else if c.is_none() {
 1483|   573k|                        self.output_positions.path_end = self.output.len();
 1484|   573k|                        self.output_positions.query_end = self.output.len();
 1485|   573k|                        return Ok(());
 1486|  87.7k|                    }
 1487|       |                }
 1488|  2.45M|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|   733k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCs5bua6W9iSBw_5oxrdf:
 1414|  10.2k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|  28.5k|        loop {
 1416|  28.5k|            let c = self.input.next();
 1417|  26.8k|            match c {
 1418|  26.8k|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|  5.08k|                    self.output_positions.authority_end = self.output.len();
 1421|  5.08k|                    return self.parse_path_start(c);
 1422|       |                }
 1423|  5.17k|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|  10.2k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCs5bua6W9iSBw_5oxrdf:
 1547|  32.2k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1548|  32.2k|        let c1 = self.input.next();
 1549|  32.2k|        let c2 = self.input.next();
 1550|  32.2k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1551|  10.4k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1552|       |        {
 1553|  6.08k|            self.output.push('%');
 1554|  6.08k|            self.output.push(c1.unwrap());
 1555|  6.08k|            self.output.push(c2.unwrap());
 1556|  6.08k|            Ok(())
 1557|       |        } else {
 1558|  26.1k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1559|  26.1k|                Some('%'),
 1560|  26.1k|                c1,
 1561|  26.1k|                c2,
 1562|  26.1k|            ]))
 1563|       |        }
 1564|  32.2k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCs5bua6W9iSBw_5oxrdf:
 1493|  55.5k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|   922k|        while let Some(c) = self.input.next() {
 1495|   891k|            if c == '#' {
 1496|  2.06k|                self.output_positions.query_end = self.output.len();
 1497|  2.06k|                self.output.push('#');
 1498|  2.06k|                return self.parse_fragment();
 1499|       |            } else {
 1500|   889k|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|  30.5k|        self.output_positions.query_end = self.output.len();
 1504|  30.5k|        Ok(())
 1505|  55.5k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCs5bua6W9iSBw_5oxrdf:
 1220|   615k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|  1.99M|        loop {
 1222|  1.99M|            let c = self.input.next();
 1223|  1.98M|            match c {
 1224|  1.98M|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|  1.37M|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|   556k|                    self.output.push(':');
 1229|   556k|                    self.output_positions.scheme_end = self.output.len();
 1230|   556k|                    self.input_scheme_end = self.input.position;
 1231|   556k|                    return if self.input.starts_with('/') {
 1232|  19.6k|                        self.input.next();
 1233|  19.6k|                        self.output.push('/');
 1234|  19.6k|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|   536k|                        self.output_positions.authority_end = self.output.len();
 1237|   536k|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|  59.0k|                    self.input = ParserInput {
 1242|  59.0k|                        value: self.iri.chars(),
 1243|  59.0k|                        position: 0,
 1244|  59.0k|                    }; // reset
 1245|  59.0k|                    self.output.clear();
 1246|  59.0k|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|   615k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCs5bua6W9iSBw_5oxrdf:
 1507|  21.3k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|   338k|        while let Some(c) = self.input.next() {
 1509|   331k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|  6.84k|        Ok(())
 1512|  21.3k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_relativeCs5bua6W9iSBw_5oxrdf:
 1263|   232k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1264|   232k|        if let Some(base) = self.base {
 1265|      0|            match self.input.front() {
 1266|       |                None => {
 1267|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1268|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1269|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1270|      0|                    self.output_positions.path_end = base.positions.path_end;
 1271|      0|                    self.output_positions.query_end = base.positions.query_end;
 1272|      0|                    Ok(())
 1273|       |                }
 1274|       |                Some('/') => {
 1275|      0|                    self.input.next();
 1276|      0|                    self.parse_relative_slash(&base)
 1277|       |                }
 1278|       |                Some('?') => {
 1279|      0|                    self.input.next();
 1280|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1281|      0|                    self.output.push('?');
 1282|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1283|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1284|      0|                    self.output_positions.path_end = base.positions.path_end;
 1285|      0|                    self.parse_query()
 1286|       |                }
 1287|       |                Some('#') => {
 1288|      0|                    self.input.next();
 1289|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1290|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1291|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1292|      0|                    self.output_positions.path_end = base.positions.path_end;
 1293|      0|                    self.output_positions.query_end = base.positions.query_end;
 1294|      0|                    self.output.push('#');
 1295|      0|                    self.parse_fragment()
 1296|       |                }
 1297|       |                _ => {
 1298|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1299|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1300|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1301|      0|                    self.output_positions.path_end = base.positions.path_end;
 1302|      0|                    self.remove_last_segment();
 1303|      0|                    if self.output.len() > base.positions.scheme_end {
 1304|      0|                        // We have some path or authority, we keep a base '/'
 1305|      0|                        self.output.push('/');
 1306|      0|                    }
 1307|      0|                    self.parse_path()
 1308|       |                }
 1309|       |            }
 1310|       |        } else {
 1311|   232k|            self.output_positions.scheme_end = 0;
 1312|   232k|            self.input_scheme_end = 0;
 1313|   232k|            if self.input.starts_with('/') {
 1314|  62.8k|                self.input.next();
 1315|  62.8k|                self.output.push('/');
 1316|  62.8k|                self.parse_path_or_authority()
 1317|       |            } else {
 1318|   169k|                self.output_positions.authority_end = 0;
 1319|   169k|                self.parse_path()
 1320|       |            }
 1321|       |        }
 1322|   232k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCs5bua6W9iSBw_5oxrdf:
 1342|  61.8k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|   519k|        loop {
 1345|   519k|            let c = self.input.next();
 1346|   519k|            match c {
 1347|       |                Some('@') => {
 1348|  5.15k|                    self.output.push('@');
 1349|  5.15k|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|  41.7k|                    self.input = ParserInput {
 1353|  41.7k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|  41.7k|                        position: self.input_scheme_end + 2,
 1355|  41.7k|                    };
 1356|  41.7k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|  41.7k|                    return self.parse_host();
 1358|       |                }
 1359|   472k|                Some(c) => {
 1360|   472k|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|  61.8k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCs5bua6W9iSBw_5oxrdf:
 1428|  28.4k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|  28.4k|        match c {
 1430|       |            None => {
 1431|  13.3k|                self.output_positions.path_end = self.output.len();
 1432|  13.3k|                self.output_positions.query_end = self.output.len();
 1433|  13.3k|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|  5.25k|                self.output_positions.path_end = self.output.len();
 1437|  5.25k|                self.output.push('?');
 1438|  5.25k|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|  3.22k|                self.output_positions.path_end = self.output.len();
 1442|  3.22k|                self.output_positions.query_end = self.output.len();
 1443|  3.22k|                self.output.push('#');
 1444|  3.22k|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|  6.60k|                self.output.push('/');
 1448|  6.60k|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|  28.4k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCs5bua6W9iSBw_5oxrdf:
 1212|   794k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|   794k|        match self.input.front() {
 1214|  5.92k|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|   759k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|   173k|            _ => self.parse_relative(),
 1217|       |        }
 1218|   794k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCs5bua6W9iSBw_5oxrdf:
 1252|  82.4k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|  82.4k|        if self.input.starts_with('/') {
 1254|  61.8k|            self.input.next();
 1255|  61.8k|            self.output.push('/');
 1256|  61.8k|            self.parse_authority()
 1257|       |        } else {
 1258|  20.6k|            self.output_positions.authority_end = self.output.len() - 1;
 1259|  20.6k|            self.parse_path()
 1260|       |        }
 1261|  82.4k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarCs5bua6W9iSBw_5oxrdf:
 1523|  3.65M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|  3.65M|        if UNCHECKED || is_url_code_point(c) {
 1525|  3.52M|            self.output.push(c);
 1526|  3.52M|            Ok(())
 1527|   132k|        } else if c == '%' {
 1528|  26.5k|            self.read_echar()
 1529|       |        } else {
 1530|   105k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|  3.65M|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E33read_url_query_codepoint_or_echarCs5bua6W9iSBw_5oxrdf:
 1535|   889k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|   889k|        if UNCHECKED || is_url_query_code_point(c) {
 1537|   865k|            self.output.push(c);
 1538|   865k|            Ok(())
 1539|  24.4k|        } else if c == '%' {
 1540|  5.70k|            self.read_echar()
 1541|       |        } else {
 1542|  18.7k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|   889k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCs5bua6W9iSBw_5oxrdf:
 1187|   794k|    fn parse(
 1188|   794k|        iri: &'a str,
 1189|   794k|        base: Option<IriRef<&'a str>>,
 1190|   794k|        output: &'a mut O,
 1191|   794k|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|   794k|        let mut parser = Self {
 1193|   794k|            iri,
 1194|   794k|            base,
 1195|   794k|            input: ParserInput {
 1196|   794k|                value: iri.chars(),
 1197|   794k|                position: 0,
 1198|   794k|            },
 1199|   794k|            output,
 1200|   794k|            output_positions: IriElementsPositions {
 1201|   794k|                scheme_end: 0,
 1202|   794k|                authority_end: 0,
 1203|   794k|                path_end: 0,
 1204|   794k|                query_end: 0,
 1205|   794k|            },
 1206|   794k|            input_scheme_end: 0,
 1207|   794k|        };
 1208|   794k|        parser.parse_scheme_start()?;
 1209|   624k|        Ok(parser.output_positions)
 1210|   794k|    }
_RNvMsp_Csh8sWMiPH21C_5oxiriINtB5_3IriNtNtCs15NWbik7Z2V_5alloc6string6StringE10into_innerCs5bua6W9iSBw_5oxrdf:
  678|   534k|    pub fn into_inner(self) -> T {
  679|   534k|        self.0.into_inner()
  680|   534k|    }
_RNvMsp_Csh8sWMiPH21C_5oxiriINtB5_3IriNtNtCs15NWbik7Z2V_5alloc6string6StringE5parseCs5bua6W9iSBw_5oxrdf:
  562|   794k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  563|   794k|        IriRef::parse(iri)?.try_into()
  564|   794k|    }
_RNvXsV_Csh8sWMiPH21C_5oxiriINtB5_3IriNtNtCs15NWbik7Z2V_5alloc6string6StringEINtNtCsjv2Y2xFO4ua_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCs5bua6W9iSBw_5oxrdf:
  981|   624k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  982|   624k|        if iri.is_absolute() {
  983|   534k|            Ok(Self(iri))
  984|       |        } else {
  985|  89.9k|            Err(IriParseError {
  986|  89.9k|                kind: IriParseErrorKind::NoScheme,
  987|  89.9k|            })
  988|       |        }
  989|   624k|    }
_RNvCsh8sWMiPH21C_5oxiri17is_url_code_pointCs5bua6W9iSBw_5oxrdf:
 1573|  4.54M|fn is_url_code_point(c: char) -> bool {
 1574|  4.54M|    matches!(c,
 1575|   609k|        'a'..='z'
 1576|  2.10M|        | 'A'..='Z'
 1577|   856k|        | '0'..='9'
 1578|       |        | '!'
 1579|       |        | '$'
 1580|       |        | '&'
 1581|       |        | '\''
 1582|       |        | '('
 1583|       |        | ')'
 1584|       |        | '*'
 1585|       |        | '+'
 1586|       |        | ','
 1587|       |        | '-'
 1588|       |        | '.'
 1589|       |        | '/'
 1590|       |        | ':'
 1591|       |        | ';'
 1592|       |        | '='
 1593|       |        | '?'
 1594|       |        | '@'
 1595|       |        | '_'
 1596|       |        | '~'
 1597|  52.0k|        | '\u{A0}'..='\u{D7FF}'
 1598|  13.6k|        | '\u{F900}'..='\u{FDCF}'
 1599|  13.6k|        | '\u{FDF0}'..='\u{FFEF}'
 1600|  13.6k|        | '\u{10000}'..='\u{1FFFD}'
 1601|  13.6k|        | '\u{20000}'..='\u{2FFFD}'
 1602|  13.6k|        | '\u{30000}'..='\u{3FFFD}'
 1603|  13.6k|        | '\u{40000}'..='\u{4FFFD}'
 1604|  13.6k|        | '\u{50000}'..='\u{5FFFD}'
 1605|  13.6k|        | '\u{60000}'..='\u{6FFFD}'
 1606|  13.6k|        | '\u{70000}'..='\u{7FFFD}'
 1607|  13.5k|        | '\u{80000}'..='\u{8FFFD}'
 1608|  13.5k|        | '\u{90000}'..='\u{9FFFD}'
 1609|  13.5k|        | '\u{A0000}'..='\u{AFFFD}'
 1610|  13.5k|        | '\u{B0000}'..='\u{BFFFD}'
 1611|  13.5k|        | '\u{C0000}'..='\u{CFFFD}'
 1612|  13.1k|        | '\u{D0000}'..='\u{DFFFD}'
 1613|  13.1k|        | '\u{E1000}'..='\u{EFFFD}'
 1614|       |    )
 1615|  4.54M|}
_RNvCsh8sWMiPH21C_5oxiri23is_url_query_code_pointCs5bua6W9iSBw_5oxrdf:
 1618|   889k|fn is_url_query_code_point(c: char) -> bool {
 1619|   889k|    is_url_code_point(c)
 1620|  26.8k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1621|   889k|}
_RNvMs10_Csh8sWMiPH21C_5oxiriNtB6_11ParserInput11starts_withCs5bua6W9iSBw_5oxrdf:
 1169|   918k|    fn starts_with(&self, c: char) -> bool {
 1170|   918k|        self.value.as_str().starts_with(c)
 1171|   918k|    }
_RNvMs10_Csh8sWMiPH21C_5oxiriNtB6_11ParserInput4nextCs5bua6W9iSBw_5oxrdf:
 1154|  7.89M|    fn next(&mut self) -> Option<char> {
 1155|  7.89M|        if let Some(head) = self.value.next() {
 1156|  7.23M|            self.position += head.len_utf8();
 1157|  7.23M|            Some(head)
 1158|       |        } else {
 1159|   657k|            None
 1160|       |        }
 1161|  7.89M|    }
_RNvMs10_Csh8sWMiPH21C_5oxiriNtB6_11ParserInput5frontCs5bua6W9iSBw_5oxrdf:
 1164|   794k|    fn front(&self) -> Option<char> {
 1165|   794k|        self.value.clone().next()
 1166|   794k|    }
_RNvXs1b_Csh8sWMiPH21C_5oxiriNtB6_16VoidOutputBufferNtNtCsjv2Y2xFO4ua_4core7default7Default7defaultCs5bua6W9iSBw_5oxrdf:
 1078|   794k|#[derive(Default)]
_RNvXsY_Csh8sWMiPH21C_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCs5bua6W9iSBw_5oxrdf:
 1105|  2.44M|    fn len(&self) -> usize {
 1106|  2.44M|        self.len
 1107|  2.44M|    }
_RNvXsY_Csh8sWMiPH21C_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCs5bua6W9iSBw_5oxrdf:
 1085|  6.95M|    fn push(&mut self, c: char) {
 1086|  6.95M|        self.len += c.len_utf8();
 1087|  6.95M|    }
_RNvXsY_Csh8sWMiPH21C_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer5clearCs5bua6W9iSBw_5oxrdf:
 1095|  59.0k|    fn clear(&mut self) {
 1096|  59.0k|        self.len = 0;
 1097|  59.0k|    }
_RNvXsY_Csh8sWMiPH21C_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCs5bua6W9iSBw_5oxrdf:
 1110|  1.45M|    fn as_str(&self) -> &str {
 1111|  1.45M|        ""
 1112|  1.45M|    }
_RNvXsY_Csh8sWMiPH21C_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCs5bua6W9iSBw_5oxrdf:
 1100|  41.7k|    fn truncate(&mut self, new_len: usize) {
 1101|  41.7k|        self.len = new_len;
 1102|  41.7k|    }
_RNvXsW_Csh8sWMiPH21C_5oxiriNtB5_13IriParseErrorNtNtCsjv2Y2xFO4ua_4core3fmt7Display3fmt:
 1016|   260k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1017|   260k|        match &self.kind {
 1018|  95.9k|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
 1019|  6.77k|            IriParseErrorKind::InvalidHostCharacter(c) => {
 1020|  6.77k|                write!(f, "Invalid character '{c}' in host")
 1021|       |            }
 1022|  1.67k|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({e})"),
 1023|  5.17k|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{c}'"),
 1024|   124k|            IriParseErrorKind::InvalidIriCodePoint(c) => {
 1025|   124k|                write!(f, "Invalid IRI code point '{c}'")
 1026|       |            }
 1027|  26.1k|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
 1028|  26.1k|                f,
 1029|  26.1k|                "Invalid IRI percent encoding '{}'",
 1030|  26.1k|                cs.iter().flatten().cloned().collect::<String>()
 1031|  26.1k|            ),
 1032|       |        }
 1033|   260k|    }

_RINvCscPAijTBEHth_6nquads5parseARShj1_EB2_:
    7|  68.7k|fn parse<'a>(
    8|  68.7k|    chunks: impl IntoIterator<Item = &'a [u8]>,
    9|  68.7k|    unchecked: bool,
   10|  68.7k|) -> (Vec<Quad>, Vec<String>) {
   11|  68.7k|    let mut quads = Vec::new();
   12|  68.7k|    let mut errors = Vec::new();
   13|  68.7k|    let mut parser = NQuadsParser::new().with_quoted_triples();
   14|  68.7k|    if unchecked {
   15|      0|        parser = parser.unchecked();
   16|  68.7k|    }
   17|  68.7k|    let mut reader = parser.parse();
   18|   137k|    for chunk in chunks {
   19|  68.7k|        reader.extend_from_slice(chunk);
   20|  5.90M|        while let Some(result) = reader.read_next() {
   21|  5.84M|            match result {
   22|  42.2k|                Ok(quad) => quads.push(quad),
   23|  5.79M|                Err(error) => errors.push(error.to_string()),
   24|       |            }
   25|       |        }
   26|       |    }
   27|  68.7k|    reader.end();
   28|   106k|    while let Some(result) = reader.read_next() {
   29|  37.5k|        match result {
   30|    496|            Ok(quad) => quads.push(quad),
   31|  37.0k|            Err(error) => errors.push(error.to_string()),
   32|       |        }
   33|       |    }
   34|  68.7k|    assert!(reader.is_end());
   35|  68.7k|    (quads, errors)
   36|  68.7k|}
_RINvCscPAijTBEHth_6nquads5parseINtNtNtCsjv2Y2xFO4ua_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_run0EEB2_:
    7|  68.7k|fn parse<'a>(
    8|  68.7k|    chunks: impl IntoIterator<Item = &'a [u8]>,
    9|  68.7k|    unchecked: bool,
   10|  68.7k|) -> (Vec<Quad>, Vec<String>) {
   11|  68.7k|    let mut quads = Vec::new();
   12|  68.7k|    let mut errors = Vec::new();
   13|  68.7k|    let mut parser = NQuadsParser::new().with_quoted_triples();
   14|  68.7k|    if unchecked {
   15|      0|        parser = parser.unchecked();
   16|  68.7k|    }
   17|  68.7k|    let mut reader = parser.parse();
   18|  8.92M|    for chunk in chunks {
   19|  8.85M|        reader.extend_from_slice(chunk);
   20|  14.6M|        while let Some(result) = reader.read_next() {
   21|  5.84M|            match result {
   22|  42.2k|                Ok(quad) => quads.push(quad),
   23|  5.79M|                Err(error) => errors.push(error.to_string()),
   24|       |            }
   25|       |        }
   26|       |    }
   27|  68.7k|    reader.end();
   28|   106k|    while let Some(result) = reader.read_next() {
   29|  37.5k|        match result {
   30|    496|            Ok(quad) => quads.push(quad),
   31|  37.0k|            Err(error) => errors.push(error.to_string()),
   32|       |        }
   33|       |    }
   34|  68.7k|    assert!(reader.is_end());
   35|  68.7k|    (quads, errors)
   36|  68.7k|}
_RINvCscPAijTBEHth_6nquads5parseINtNtNtCsjv2Y2xFO4ua_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_runs0_0EEB2_:
    7|    281|fn parse<'a>(
    8|    281|    chunks: impl IntoIterator<Item = &'a [u8]>,
    9|    281|    unchecked: bool,
   10|    281|) -> (Vec<Quad>, Vec<String>) {
   11|    281|    let mut quads = Vec::new();
   12|    281|    let mut errors = Vec::new();
   13|    281|    let mut parser = NQuadsParser::new().with_quoted_triples();
   14|    281|    if unchecked {
   15|    281|        parser = parser.unchecked();
   16|    281|    }
   17|    281|    let mut reader = parser.parse();
   18|  5.48k|    for chunk in chunks {
   19|  5.20k|        reader.extend_from_slice(chunk);
   20|  5.21k|        while let Some(result) = reader.read_next() {
   21|      6|            match result {
   22|      6|                Ok(quad) => quads.push(quad),
   23|      0|                Err(error) => errors.push(error.to_string()),
   24|       |            }
   25|       |        }
   26|       |    }
   27|    281|    reader.end();
   28|    311|    while let Some(result) = reader.read_next() {
   29|     30|        match result {
   30|     30|            Ok(quad) => quads.push(quad),
   31|      0|            Err(error) => errors.push(error.to_string()),
   32|       |        }
   33|       |    }
   34|    281|    assert!(reader.is_end());
   35|    281|    (quads, errors)
   36|    281|}
_RNCNvNvCscPAijTBEHth_6nquads1__19___libfuzzer_sys_run0B5_:
   40|  35.2M|    let (quads, errors) = parse(data.split(|c| *c == 0xFF), false);
_RNCNvNvCscPAijTBEHth_6nquads1__19___libfuzzer_sys_runs_0B5_:
   46|  35.2M|            .filter(|c| *c != 0xFF)
_RNCNvNvCscPAijTBEHth_6nquads1__19___libfuzzer_sys_runs0_0B5_:
   56|  15.5k|        let (quads_unchecked, errors_unchecked) = parse(data.split(|c| *c == 0xFF), true);

_RNvMNtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCscPAijTBEHth_6nquads:
   92|  26.7k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   93|  26.7k|        BlankNodeRef(match &self.0 {
   94|  5.70k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   95|  21.0k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   96|  21.0k|                id: *id,
   97|  21.0k|                str: str.as_str(),
   98|  21.0k|            },
   99|       |        })
  100|  26.7k|    }
_RNvMs1_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCscPAijTBEHth_6nquads:
  183|  26.7k|    pub const fn as_str(self) -> &'a str {
  184|  26.7k|        match self.0 {
  185|  5.70k|            BlankNodeRefContent::Named(id) => id,
  186|  21.0k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  187|       |        }
  188|  26.7k|    }
_RNvMs7_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_5IdStr6as_strCscPAijTBEHth_6nquads:
  266|  21.0k|    fn as_str(&self) -> &str {
  267|  21.0k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  268|  21.0k|        str::from_utf8(&self.0[..len]).unwrap()
  269|  21.0k|    }
_RNvXs2_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCsjv2Y2xFO4ua_4core3fmt7Display3fmtCscPAijTBEHth_6nquads:
  221|  26.7k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  222|  26.7k|        write!(f, "_:{}", self.as_str())
  223|  26.7k|    }
_RNvXsF_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_5IdStrNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqCscPAijTBEHth_6nquads:
  254|  42.1k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsd_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqCscPAijTBEHth_6nquads:
   24|  53.5k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsi_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqCscPAijTBEHth_6nquads:
   27|  53.5k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RINvMNtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedReECscuJmoqhSOSr_5oxttl:
   53|   105k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   54|   105k|        let id = id.into();
   55|   105k|        if let Some(numerical_id) = to_integer_id(&id) {
   56|  72.2k|            Self::new_from_unique_id(numerical_id)
   57|       |        } else {
   58|  33.1k|            Self(BlankNodeContent::Named(id))
   59|       |        }
   60|   105k|    }
_RNvMNtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idCscuJmoqhSOSr_5oxttl:
   66|  72.2k|    pub fn new_from_unique_id(id: u128) -> Self {
   67|  72.2k|        Self(BlankNodeContent::Anonymous {
   68|  72.2k|            id,
   69|  72.2k|            str: IdStr::new(id),
   70|  72.2k|        })
   71|  72.2k|    }
_RNvMs7_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_5IdStr3newCscuJmoqhSOSr_5oxttl:
  259|  72.2k|    fn new(id: u128) -> Self {
  260|  72.2k|        let mut str = [0; 32];
  261|  72.2k|        write!(&mut str[..], "{id:x}").unwrap();
  262|  72.2k|        Self(str)
  263|  72.2k|    }
_RNvNtCs5bua6W9iSBw_5oxrdf10blank_node13to_integer_idCscuJmoqhSOSr_5oxttl:
  332|   105k|fn to_integer_id(id: &str) -> Option<u128> {
  333|   105k|    let digits = id.as_bytes();
  334|   105k|    let mut value: u128 = 0;
  335|   105k|    if let None | Some(b'0') = digits.first() {
  336|  22.6k|        return None; // No empty string or leading zeros
  337|  82.8k|    }
  338|   982k|    for digit in digits {
  339|   910k|        value = value.checked_mul(16)?.checked_add(
  340|   908k|            match *digit {
  341|   908k|                b'0'..=b'9' => digit - b'0',
  342|   823k|                b'a'..=b'f' => digit - b'a' + 10,
  343|  8.95k|                _ => return None,
  344|       |            }
  345|   899k|            .into(),
  346|      0|        )?;
  347|       |    }
  348|  72.2k|    Some(value)
  349|   105k|}
_RNCNvMs7_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  267|   271k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);

_RNvMNtCs5bua6W9iSBw_5oxrdf7literalNtB2_7Literal6as_refCscPAijTBEHth_6nquads:
  132|  9.24k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  133|  9.24k|        LiteralRef(match &self.0 {
  134|  5.64k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  135|  2.46k|            LiteralContent::LanguageTaggedString { value, language } => {
  136|  2.46k|                LiteralRefContent::LanguageTaggedString { value, language }
  137|       |            }
  138|  1.12k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  139|  1.12k|                value,
  140|  1.12k|                datatype: datatype.as_ref(),
  141|  1.12k|            },
  142|       |        })
  143|  9.24k|    }
_RNvXsD_NtCs5bua6W9iSBw_5oxrdf7literalNtB5_7LiteralNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqCscPAijTBEHth_6nquads:
   37|  18.5k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsI_NtCs5bua6W9iSBw_5oxrdf7literalNtB5_14LiteralContentNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqCscPAijTBEHth_6nquads:
   40|  18.5k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsu_NtCs5bua6W9iSBw_5oxrdf7literalNtB5_10LiteralRefNtNtCsjv2Y2xFO4ua_4core3fmt7Display3fmtCscPAijTBEHth_6nquads:
  568|  9.24k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  569|  9.24k|        match self.0 {
  570|  5.64k|            LiteralRefContent::String(value) => print_quoted_str(value, f),
  571|  2.46k|            LiteralRefContent::LanguageTaggedString { value, language } => {
  572|  2.46k|                print_quoted_str(value, f)?;
  573|  2.46k|                write!(f, "@{language}")
  574|       |            }
  575|  1.12k|            LiteralRefContent::TypedLiteral { value, datatype } => {
  576|  1.12k|                print_quoted_str(value, f)?;
  577|  1.12k|                write!(f, "^^{datatype}")
  578|       |            }
  579|       |        }
  580|  9.24k|    }
_RINvMNtCs5bua6W9iSBw_5oxrdf7literalNtB3_7Literal18new_simple_literalRNtNtCs15NWbik7Z2V_5alloc6string6StringECscuJmoqhSOSr_5oxttl:
   50|    158|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   51|    158|        Self(LiteralContent::String(value.into()))
   52|    158|    }
_RINvMNtCs5bua6W9iSBw_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCs15NWbik7Z2V_5alloc6string6StringEB5_:
   50|  18.0k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   51|  18.0k|        Self(LiteralContent::String(value.into()))
   52|  18.0k|    }
_RINvMNtCs5bua6W9iSBw_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCs15NWbik7Z2V_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   56|  5.33k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   57|  5.33k|        let value = value.into();
   58|  5.33k|        let datatype = datatype.into();
   59|  5.33k|        Self(if datatype == xsd::STRING {
   60|      0|            LiteralContent::String(value)
   61|       |        } else {
   62|  5.33k|            LiteralContent::TypedLiteral { value, datatype }
   63|       |        })
   64|  5.33k|    }
_RINvMNtCs5bua6W9iSBw_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCs15NWbik7Z2V_5alloc6string6StringB1n_EB5_:
   88|  13.4k|    pub fn new_language_tagged_literal_unchecked(
   89|  13.4k|        value: impl Into<String>,
   90|  13.4k|        language: impl Into<String>,
   91|  13.4k|    ) -> Self {
   92|  13.4k|        Self(LiteralContent::LanguageTaggedString {
   93|  13.4k|            value: value.into(),
   94|  13.4k|            language: language.into(),
   95|  13.4k|        })
   96|  13.4k|    }
_RINvNtCs5bua6W9iSBw_5oxrdf7literal16print_quoted_strNtNtCsjv2Y2xFO4ua_4core3fmt9FormatterEB4_:
  619|  9.24k|pub fn print_quoted_str(string: &str, f: &mut impl Write) -> fmt::Result {
  620|  9.24k|    f.write_char('"')?;
  621|   284k|    for c in string.chars() {
  622|   284k|        match c {
  623|  9.17k|            '\u{08}' => f.write_str("\\b"),
  624|  3.59k|            '\t' => f.write_str("\\t"),
  625|  10.1k|            '\n' => f.write_str("\\n"),
  626|  4.86k|            '\u{0c}' => f.write_str("\\f"),
  627|  4.31k|            '\r' => f.write_str("\\r"),
  628|    487|            '"' => f.write_str("\\\""),
  629|  1.30k|            '\\' => f.write_str("\\\\"),
  630|   250k|            '\0'..='\u{1f}' | '\u{7f}' => write!(f, "\\u{:04X}", u32::from(c)),
  631|  75.9k|            _ => f.write_char(c),
  632|      0|        }?;
  633|       |    }
  634|  9.24k|    f.write_char('"')
  635|  9.24k|}

_RNvMNtCs5bua6W9iSBw_5oxrdf10named_nodeNtB2_9NamedNode6as_refCscPAijTBEHth_6nquads:
   54|   114k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|   114k|        NamedNodeRef::new_unchecked(&self.iri)
   56|   114k|    }
_RNvMs4_NtCs5bua6W9iSBw_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCscPAijTBEHth_6nquads:
  128|   114k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   114k|        Self { iri }
  130|   114k|    }
_RNvMs4_NtCs5bua6W9iSBw_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCscPAijTBEHth_6nquads:
  133|   114k|    pub const fn as_str(self) -> &'a str {
  134|   114k|        self.iri
  135|   114k|    }
_RNvXs5_NtCs5bua6W9iSBw_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCsjv2Y2xFO4ua_4core3fmt7Display3fmtCscPAijTBEHth_6nquads:
  145|   114k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|   114k|        write!(f, "<{}>", self.as_str())
  147|   114k|    }
_RNvXsl_NtCs5bua6W9iSBw_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqCscPAijTBEHth_6nquads:
   17|   229k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMNtCs5bua6W9iSBw_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|  5.33k|    pub fn as_str(&self) -> &str {
   45|  5.33k|        self.iri.as_str()
   46|  5.33k|    }
_RNvMs4_NtCs5bua6W9iSBw_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|  5.33k|    pub const fn as_str(self) -> &'a str {
  134|  5.33k|        self.iri
  135|  5.33k|    }
_RNvXs9_NtCs5bua6W9iSBw_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCsjv2Y2xFO4ua_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|  5.33k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|  5.33k|        self.as_str() == other.as_str()
  175|  5.33k|    }
_RINvMNtCs5bua6W9iSBw_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCs15NWbik7Z2V_5alloc6string6StringEB5_:
   39|   440k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   440k|        Self { iri: iri.into() }
   41|   440k|    }

_RNvMs18_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_9GraphName6as_refCscPAijTBEHth_6nquads:
  881|  42.7k|    pub fn as_ref(&self) -> GraphNameRef<'_> {
  882|  42.7k|        match self {
  883|  12.7k|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.as_ref()),
  884|  8.53k|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.as_ref()),
  885|  21.4k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  886|       |        }
  887|  42.7k|    }
_RNvMs1g_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_12GraphNameRef16is_default_graphCscPAijTBEHth_6nquads:
  964|  42.7k|    pub fn is_default_graph(&self) -> bool {
  965|  42.7k|        matches!(self, Self::DefaultGraph)
  966|  42.7k|    }
_RNvMs1q_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_4Quad6as_refCscPAijTBEHth_6nquads:
 1098|  42.7k|    pub fn as_ref(&self) -> QuadRef<'_> {
 1099|  42.7k|        QuadRef {
 1100|  42.7k|            subject: self.subject.as_ref(),
 1101|  42.7k|            predicate: self.predicate.as_ref(),
 1102|  42.7k|            object: self.object.as_ref(),
 1103|  42.7k|            graph_name: self.graph_name.as_ref(),
 1104|  42.7k|        }
 1105|  42.7k|    }
_RNvMsc_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_7Subject6as_refCscPAijTBEHth_6nquads:
  181|  42.7k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  42.7k|        match self {
  183|  33.8k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|  8.89k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|      0|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  42.7k|    }
_RNvMsy_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_4Term6as_refCscPAijTBEHth_6nquads:
  417|  42.7k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|  42.7k|        match self {
  419|  24.1k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|  9.34k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  9.24k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|      0|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|  42.7k|    }
_RNvXs1Q_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_7SubjectNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqCscPAijTBEHth_6nquads:
  155|  85.5k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1h_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_12GraphNameRefNtNtCsjv2Y2xFO4ua_4core3fmt7Display3fmtCscPAijTBEHth_6nquads:
  980|  21.2k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  981|  21.2k|        match self {
  982|  12.7k|            Self::NamedNode(node) => node.fmt(f),
  983|  8.53k|            Self::BlankNode(node) => node.fmt(f),
  984|      0|            Self::DefaultGraph => write!(f, "DEFAULT"),
  985|       |        }
  986|  21.2k|    }
_RNvXs1u_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_7QuadRefNtNtCsjv2Y2xFO4ua_4core3fmt7Display3fmtCscPAijTBEHth_6nquads:
 1188|  42.7k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1189|  42.7k|        if self.graph_name.is_default_graph() {
 1190|  21.4k|            write!(f, "{} {} {}", self.subject, self.predicate, self.object)
 1191|       |        } else {
 1192|  21.2k|            write!(
 1193|  21.2k|                f,
 1194|  21.2k|                "{} {} {} {}",
 1195|  21.2k|                self.subject, self.predicate, self.object, self.graph_name
 1196|  21.2k|            )
 1197|       |        }
 1198|  42.7k|    }
_RNvXs1w_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_7QuadRefINtNtCsjv2Y2xFO4ua_4core7convert4FromRNtB6_4QuadE4fromCscPAijTBEHth_6nquads:
 1214|  42.7k|    fn from(quad: &'a Quad) -> Self {
 1215|  42.7k|        quad.as_ref()
 1216|  42.7k|    }
_RNvXs25_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_4TermNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqCscPAijTBEHth_6nquads:
  385|  85.5k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2Q_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_4QuadNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqCscPAijTBEHth_6nquads:
 1065|  85.5k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2z_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_9GraphNameNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqCscPAijTBEHth_6nquads:
  856|  85.5k|#[derive(Eq, PartialEq, Debug, Clone, Hash, Default)]
_RNvXsO_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_7TermRefNtNtCsjv2Y2xFO4ua_4core3fmt7Display3fmtCscPAijTBEHth_6nquads:
  584|  42.7k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  585|  42.7k|        match self {
  586|  24.1k|            Self::NamedNode(node) => node.fmt(f),
  587|  9.34k|            Self::BlankNode(node) => node.fmt(f),
  588|  9.24k|            Self::Literal(literal) => literal.fmt(f),
  589|       |            #[cfg(feature = "rdf-star")]
  590|      0|            Self::Triple(triple) => {
  591|      0|                write!(f, "<<{triple}>>")
  592|       |            }
  593|       |        }
  594|  42.7k|    }
_RNvXso_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_10SubjectRefNtNtCsjv2Y2xFO4ua_4core3fmt7Display3fmtCscPAijTBEHth_6nquads:
  306|  42.7k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  307|  42.7k|        match self {
  308|  33.8k|            Self::NamedNode(node) => node.fmt(f),
  309|  8.89k|            Self::BlankNode(node) => node.fmt(f),
  310|       |            #[cfg(feature = "rdf-star")]
  311|      0|            Self::Triple(triple) => write!(f, "<<{triple}>>"),
  312|       |        }
  313|  42.7k|    }
_RNvXs1a_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_9GraphNameINtNtCsjv2Y2xFO4ua_4core7convert4FromNtNtB8_10named_node9NamedNodeE4fromCscuJmoqhSOSr_5oxttl:
  899|  38.2k|    fn from(node: NamedNode) -> Self {
  900|  38.2k|        Self::NamedNode(node)
  901|  38.2k|    }
_RNvXs1c_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_9GraphNameINtNtCsjv2Y2xFO4ua_4core7convert4FromNtNtB8_10blank_node9BlankNodeE4fromCscuJmoqhSOSr_5oxttl:
  913|  25.6k|    fn from(node: BlankNode) -> Self {
  914|  25.6k|        Self::BlankNode(node)
  915|  25.6k|    }
_RNvXse_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_7SubjectINtNtCsjv2Y2xFO4ua_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|   153k|    fn from(node: NamedNode) -> Self {
  201|   153k|        Self::NamedNode(node)
  202|   153k|    }
_RNvXsg_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_7SubjectINtNtCsjv2Y2xFO4ua_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|  49.1k|    fn from(node: BlankNode) -> Self {
  215|  49.1k|        Self::BlankNode(node)
  216|  49.1k|    }
_RNvXsA_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_4TermINtNtCsjv2Y2xFO4ua_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|  75.7k|    fn from(node: NamedNode) -> Self {
  438|  75.7k|        Self::NamedNode(node)
  439|  75.7k|    }
_RNvXsC_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_4TermINtNtCsjv2Y2xFO4ua_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  451|  30.7k|    fn from(node: BlankNode) -> Self {
  452|  30.7k|        Self::BlankNode(node)
  453|  30.7k|    }
_RNvXsE_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_4TermINtNtCsjv2Y2xFO4ua_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  465|  36.9k|    fn from(literal: Literal) -> Self {
  466|  36.9k|        Self::Literal(literal)
  467|  36.9k|    }

_RNCNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB6_7N3Lexer9parse_iris_0B8_:
  230|   260k|                    .map_err(|e| (position, e.to_string()))?
_RNCNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB6_7N3Lexer26recognize_pname_or_keyword0B8_:
  320|   179k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|   179k|                prefix: pn_prefix,
  322|   179k|                local,
  323|   179k|                might_be_invalid_iri,
  324|   179k|            }),
_RNCNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB6_7N3Lexer18recognize_variable0B8_:
  337|   174k|            result.and_then(|(name, _)| {
  338|   174k|                if name.is_empty() {
  339|   143k|                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|  31.1k|                    Ok(N3Token::Variable(name))
  342|       |                }
  343|   174k|            }),
_RNCNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB6_7N3Lexer14parse_lang_tag0B8_:
  577|  98.5k|                .map_err(|e| (position.clone(), e.to_string()))?
_RNCNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_char0B8_:
  802|  16.6k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  803|  16.6k|            (
  804|  16.6k|                position..position + len + 2,
  805|  16.6k|                format!(
  806|  16.6k|                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  807|  16.6k|                ),
  808|  16.6k|            )
  809|  16.6k|        })?;
_RNCNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_chars_0B8_:
  810|  13.9k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  811|  13.9k|            (
  812|  13.9k|                position..position + len +2,
  813|  13.9k|                format!(
  814|  13.9k|                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  815|  13.9k|                ),
  816|  13.9k|            )
  817|  13.9k|        })?;
_RNCNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB6_7N3Lexer22recognize_unicode_char0B8_:
  882|   109k|                .map(|c| (c, bytes_needed + 1))
_RNCNvNtCscuJmoqhSOSr_5oxttl5lexer13str_from_utf80B5_:
  954|  31.8k|    str::from_utf8(data).map_err(|e| {
  955|  31.8k|        (
  956|  31.8k|            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  957|  31.8k|            format!("Invalid UTF-8: {e}"),
  958|  31.8k|        )
  959|  31.8k|            .into()
  960|  31.8k|    })
_RNCNvNtCscuJmoqhSOSr_5oxttl5lexer16string_from_utf80B5_:
  964|  69.4k|    String::from_utf8(data).map_err(|e| {
  965|  69.4k|        (
  966|  69.4k|            range.start + e.utf8_error().valid_up_to()
  967|  69.4k|                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  968|  69.4k|            format!("Invalid UTF-8: {e}"),
  969|  69.4k|        )
  970|  69.4k|            .into()
  971|  69.4k|    })
_RNvXNtCscuJmoqhSOSr_5oxttl5lexerNtB2_7N3LexerNtNtNtB4_7toolkit5lexer15TokenRecognizer20recognize_next_token:
   55|  27.6M|    fn recognize_next_token<'a>(
   56|  27.6M|        &mut self,
   57|  27.6M|        data: &'a [u8],
   58|  27.6M|        is_ending: bool,
   59|  27.6M|        options: &N3LexerOptions,
   60|  27.6M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
   61|  27.6M|        match *data.first()? {
   62|  6.15M|            b'<' => match *data.get(1)? {
   63|  1.63M|                b'<' => Some((2, Ok(N3Token::Punctuation("<<")))),
   64|  59.6k|                b'=' if self.mode == N3LexerMode::N3 => {
   65|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   66|      0|                        Some(if let Ok(result) = result {
   67|      0|                            (consumed, Ok(result))
   68|       |                        } else {
   69|      0|                            (2, Ok(N3Token::Punctuation("<=")))
   70|       |                        })
   71|      0|                    } else if is_ending {
   72|      0|                        Some((2, Ok(N3Token::Punctuation("<="))))
   73|       |                    } else {
   74|      0|                        None
   75|       |                    }
   76|       |                }
   77|  17.9k|                b'-' if self.mode == N3LexerMode::N3 => {
   78|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   79|      0|                        Some(if let Ok(result) = result {
   80|      0|                            (consumed, Ok(result))
   81|       |                        } else {
   82|      0|                            (2, Ok(N3Token::Punctuation("<-")))
   83|       |                        })
   84|      0|                    } else if is_ending {
   85|      0|                        Some((2, Ok(N3Token::Punctuation("<-"))))
   86|       |                    } else {
   87|      0|                        None
   88|       |                    }
   89|       |                }
   90|  4.42M|                _ => self.recognize_iri(data, options),
   91|       |            },
   92|       |            b'>' => {
   93|   601k|                if *data.get(1)? == b'>' {
   94|   344k|                    Some((2, Ok(N3Token::Punctuation(">>"))))
   95|       |                } else {
   96|   214k|                    Some((1, Ok(N3Token::Punctuation(">"))))
   97|       |                }
   98|       |            }
   99|  1.12M|            b'_' => match data.get(1)? {
  100|   647k|                b':' => Self::recognize_blank_node_label(data),
  101|   389k|                c => Some((
  102|   389k|                    1,
  103|   389k|                    Err((0, format!("Unexpected character '{}'", char::from(*c))).into()),
  104|   389k|                )),
  105|       |            },
  106|       |            b'"' => {
  107|   825k|                if self.mode != N3LexerMode::NTriples
  108|      0|                    && *data.get(1)? == b'"'
  109|      0|                    && *data.get(2)? == b'"'
  110|       |                {
  111|      0|                    Self::recognize_long_string(data, b'"')
  112|       |                } else {
  113|   825k|                    Self::recognize_string(data, b'"')
  114|       |                }
  115|       |            }
  116|  58.3k|            b'\'' if self.mode != N3LexerMode::NTriples => {
  117|      0|                if *data.get(1)? == b'\'' && *data.get(2)? == b'\'' {
  118|      0|                    Self::recognize_long_string(data, b'\'')
  119|       |                } else {
  120|      0|                    Self::recognize_string(data, b'\'')
  121|       |                }
  122|       |            }
  123|   835k|            b'@' => self.recognize_lang_tag(data),
  124|  1.65M|            b'.' => match data.get(1) {
  125|   264k|                Some(b'0'..=b'9') => Self::recognize_number(data),
  126|  1.51M|                Some(_) => Some((1, Ok(N3Token::Punctuation(".")))),
  127|  98.7k|                None => is_ending.then_some((1, Ok(N3Token::Punctuation(".")))),
  128|       |            },
  129|       |            b'^' => {
  130|   297k|                if *data.get(1)? == b'^' {
  131|   157k|                    Some((2, Ok(N3Token::Punctuation("^^"))))
  132|       |                } else {
  133|  94.5k|                    Some((1, Ok(N3Token::Punctuation("^"))))
  134|       |                }
  135|       |            }
  136|   129k|            b'(' => Some((1, Ok(N3Token::Punctuation("(")))),
  137|  66.3k|            b')' => Some((1, Ok(N3Token::Punctuation(")")))),
  138|  58.9k|            b'[' => Some((1, Ok(N3Token::Punctuation("[")))),
  139|  33.0k|            b']' => Some((1, Ok(N3Token::Punctuation("]")))),
  140|       |            b'{' => {
  141|  58.8k|                if *data.get(1)? == b'|' {
  142|  2.77k|                    Some((2, Ok(N3Token::Punctuation("{|"))))
  143|       |                } else {
  144|  45.7k|                    Some((1, Ok(N3Token::Punctuation("{"))))
  145|       |                }
  146|       |            }
  147|   153k|            b'}' => Some((1, Ok(N3Token::Punctuation("}")))),
  148|   162k|            b',' => Some((1, Ok(N3Token::Punctuation(",")))),
  149|  68.3k|            b';' => Some((1, Ok(N3Token::Punctuation(";")))),
  150|  51.9k|            b'!' => Some((1, Ok(N3Token::Punctuation("!")))),
  151|       |            b'|' => {
  152|  84.5k|                if *data.get(1)? == b'}' {
  153|  3.22k|                    Some((2, Ok(N3Token::Punctuation("|}"))))
  154|       |                } else {
  155|  75.8k|                    Some((1, Ok(N3Token::Punctuation("|"))))
  156|       |                }
  157|       |            }
  158|       |            b'=' => {
  159|   186k|                if *data.get(1)? == b'>' {
  160|  8.85k|                    Some((2, Ok(N3Token::Punctuation("=>"))))
  161|       |                } else {
  162|   162k|                    Some((1, Ok(N3Token::Punctuation("="))))
  163|       |                }
  164|       |            }
  165|  6.93M|            b'0'..=b'9' | b'+' | b'-' => Self::recognize_number(data),
  166|   288k|            b'?' => self.recognize_variable(data, is_ending),
  167|  11.6M|            _ => self.recognize_pname_or_keyword(data, is_ending),
  168|       |        }
  169|  27.6M|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer3new:
  173|   206k|    pub fn new(mode: N3LexerMode, unchecked: bool) -> Self {
  174|   206k|        Self { mode, unchecked }
  175|   206k|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer13recognize_iri:
  177|  4.42M|    fn recognize_iri(
  178|  4.42M|        &self,
  179|  4.42M|        data: &[u8],
  180|  4.42M|        options: &N3LexerOptions,
  181|  4.42M|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  182|  4.42M|        // [18] 	IRIREF 	::= 	'<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
  183|  4.42M|        let mut string = Vec::new();
  184|  4.42M|        let mut i = 1;
  185|       |        loop {
  186|  4.59M|            let end = memchr2(b'>', b'\\', &data[i..])?;
  187|  1.26M|            string.extend_from_slice(&data[i..i + end]);
  188|  1.26M|            i += end;
  189|  1.26M|            match data[i] {
  190|       |                b'>' => {
  191|       |                    #[allow(clippy::range_plus_one)]
  192|   864k|                    return Some((i + 1, self.parse_iri(string, 0..i + 1, options)));
  193|       |                }
  194|       |                b'\\' => {
  195|   405k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, false)?;
  196|   208k|                    i += additional + 1;
  197|   208k|                    match c {
  198|   166k|                        Ok(c) => {
  199|   166k|                            let mut buf = [0; 4];
  200|   166k|                            string.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  201|   166k|                        }
  202|  42.2k|                        Err(e) => return Some((i, Err(e))),
  203|       |                    }
  204|       |                }
  205|      0|                _ => unreachable!(),
  206|       |            }
  207|       |        }
  208|  4.42M|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer9parse_iri:
  210|   864k|    fn parse_iri(
  211|   864k|        &self,
  212|   864k|        iri: Vec<u8>,
  213|   864k|        position: Range<usize>,
  214|   864k|        options: &N3LexerOptions,
  215|   864k|    ) -> Result<N3Token<'static>, TokenRecognizerError> {
  216|   864k|        let iri = string_from_utf8(iri, position.clone())?;
  217|       |        Ok(N3Token::IriRef(
  218|   794k|            if let Some(base_iri) = options.base_iri.as_ref() {
  219|      0|                if self.unchecked {
  220|      0|                    base_iri.resolve_unchecked(&iri)
  221|       |                } else {
  222|      0|                    base_iri.resolve(&iri)
  223|       |                }
  224|      0|                .map_err(|e| (position, e.to_string()))?
  225|      0|                .into_inner()
  226|   794k|            } else if self.unchecked {
  227|     55|                iri
  228|       |            } else {
  229|   794k|                Iri::parse(iri)
  230|   794k|                    .map_err(|e| (position, e.to_string()))?
  231|   534k|                    .into_inner()
  232|       |            },
  233|       |        ))
  234|   864k|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer26recognize_pname_or_keyword:
  236|  11.6M|    fn recognize_pname_or_keyword<'a>(
  237|  11.6M|        &self,
  238|  11.6M|        data: &'a [u8],
  239|  11.6M|        is_ending: bool,
  240|  11.6M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  241|  11.6M|        // [139s] 	PNAME_NS 	::= 	PN_PREFIX? ':'
  242|  11.6M|        // [140s] 	PNAME_LN 	::= 	PNAME_NS PN_LOCAL
  243|  11.6M|
  244|  11.6M|        // [167s] 	PN_PREFIX 	::= 	PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
  245|  11.6M|        let mut i = 0;
  246|       |        loop {
  247|  23.6M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  248|  22.8M|                match r {
  249|  19.2M|                    Ok((c, consumed)) => {
  250|  19.2M|                        if c == ':' {
  251|   961k|                            i += consumed;
  252|   961k|                            break;
  253|  18.3M|                        } else if i == 0 {
  254|  7.51M|                            if !Self::is_possible_pn_chars_base(c) {
  255|  5.48M|                                return Some((
  256|  5.48M|                                    consumed,
  257|  5.48M|                                    Err((
  258|  5.48M|                                        0..consumed,
  259|  5.48M|                                        format!(
  260|  5.48M|                                            "'{c}' is not allowed at the beginning of a prefix name"
  261|  5.48M|                                        ),
  262|  5.48M|                                    )
  263|  5.48M|                                        .into()),
  264|  5.48M|                                ));
  265|  2.03M|                            }
  266|  2.03M|                            i += consumed;
  267|  10.8M|                        } else if Self::is_possible_pn_chars(c) || c == '.' {
  268|  10.0M|                            i += consumed;
  269|  10.0M|                        } else {
  270|  1.22M|                            while data[..i].ends_with(b".") {
  271|   423k|                                i -= 1;
  272|   423k|                            }
  273|   798k|                            return Some((
  274|   798k|                                i,
  275|   798k|                                str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  276|   798k|                            ));
  277|       |                        }
  278|       |                    }
  279|  3.54M|                    Err(e) => return Some((e.location.end, Err(e))),
  280|       |                }
  281|   828k|            } else if is_ending {
  282|  24.6k|                while data[..i].ends_with(b".") {
  283|  8.19k|                    i -= 1;
  284|  8.19k|                }
  285|  16.4k|                return Some(if i == 0 {
  286|  3.53k|                    (
  287|  3.53k|                        1,
  288|  3.53k|                        Err((0..1, format!("Unexpected byte {}", data[0])).into()),
  289|  3.53k|                    )
  290|       |                } else {
  291|  12.9k|                    (
  292|  12.9k|                        i,
  293|  12.9k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  294|  12.9k|                    )
  295|       |                });
  296|       |            } else {
  297|   812k|                return None;
  298|       |            }
  299|       |        }
  300|   961k|        let pn_prefix = match str_from_utf8(&data[..i - 1], 0..i - 1) {
  301|   961k|            Ok(pn_prefix) => pn_prefix,
  302|      0|            Err(e) => return Some((i, Err(e))),
  303|       |        };
  304|   961k|        if pn_prefix.ends_with('.') {
  305|  3.58k|            return Some((
  306|  3.58k|                i,
  307|  3.58k|                Err((
  308|  3.58k|                    0..i,
  309|  3.58k|                    format!(
  310|  3.58k|                        "'{pn_prefix}' is not a valid prefix: prefixes are not allowed to end with '.'"),
  311|  3.58k|                )
  312|  3.58k|                    .into()),
  313|  3.58k|            ));
  314|   958k|        }
  315|       |
  316|   241k|        let (consumed, pn_local_result) =
  317|   958k|            self.recognize_optional_pn_local(&data[i..], is_ending)?;
  318|   241k|        Some((
  319|   241k|            consumed + i,
  320|   241k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|       |                prefix: pn_prefix,
  322|       |                local,
  323|       |                might_be_invalid_iri,
  324|   241k|            }),
  325|   241k|        ))
  326|  11.6M|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer18recognize_variable:
  328|   288k|    fn recognize_variable<'a>(
  329|   288k|        &self,
  330|   288k|        data: &'a [u8],
  331|   288k|        is_ending: bool,
  332|   288k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  333|       |        // [36] 	QUICK_VAR_NAME 	::= 	"?" PN_LOCAL
  334|   288k|        let (consumed, result) = self.recognize_optional_pn_local(&data[1..], is_ending)?;
  335|   191k|        Some((
  336|   191k|            consumed + 1,
  337|   191k|            result.and_then(|(name, _)| {
  338|       |                if name.is_empty() {
  339|       |                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|       |                    Ok(N3Token::Variable(name))
  342|       |                }
  343|   191k|            }),
  344|   191k|        ))
  345|   288k|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer27recognize_optional_pn_local:
  347|  1.24M|    fn recognize_optional_pn_local<'a>(
  348|  1.24M|        &self,
  349|  1.24M|        data: &'a [u8],
  350|  1.24M|        is_ending: bool,
  351|  1.24M|    ) -> Option<(usize, Result<(Cow<'a, str>, bool), TokenRecognizerError>)> {
  352|  1.24M|        // [168s] 	PN_LOCAL 	::= 	(PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
  353|  1.24M|        let mut i = 0;
  354|  1.24M|        let mut buffer = None; // Buffer if there are some escaped characters
  355|  1.24M|        let mut position_that_is_already_in_buffer = 0;
  356|  1.24M|        let mut might_be_invalid_iri = false;
  357|       |        loop {
  358|  6.72M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  359|  6.00M|                match r {
  360|  5.93M|                    Ok((c, consumed)) => {
  361|  5.93M|                        if c == '%' {
  362|  42.4k|                            i += 1;
  363|  42.4k|                            let a = char::from(*data.get(i)?);
  364|  30.2k|                            i += 1;
  365|  30.2k|                            let b = char::from(*data.get(i)?);
  366|  22.1k|                            if !a.is_ascii_hexdigit() || !b.is_ascii_hexdigit() {
  367|  7.86k|                                return Some((i + 1, Err((
  368|  7.86k|                                    i - 2..=i, format!("escapes in IRIs should be % followed by two hexadecimal characters, found '%{a}{b}'")
  369|  7.86k|                                ).into())));
  370|  14.3k|                            }
  371|  14.3k|                            i += 1;
  372|  5.89M|                        } else if c == '\\' {
  373|   442k|                            i += 1;
  374|   442k|                            let a = char::from(*data.get(i)?);
  375|   373k|                            if self.unchecked
  376|   212k|                                || matches!(
  377|   373k|                                    a,
  378|       |                                    '_' | '~'
  379|       |                                        | '.'
  380|       |                                        | '-'
  381|       |                                        | '!'
  382|       |                                        | '$'
  383|       |                                        | '&'
  384|       |                                        | '\''
  385|       |                                        | '('
  386|       |                                        | ')'
  387|       |                                        | '*'
  388|       |                                        | '+'
  389|       |                                        | ','
  390|       |                                        | ';'
  391|       |                                        | '='
  392|       |                                )
  393|   160k|                            {
  394|   160k|                                // ok to escape
  395|   212k|                            } else if matches!(a, '/' | '?' | '#' | '@' | '%') {
  396|   204k|                                // ok to escape but requires IRI validation
  397|   204k|                                might_be_invalid_iri = true;
  398|   204k|                            } else {
  399|  7.90k|                                return Some((i + 1, Err((
  400|  7.90k|                                    i..=i, format!("The character that are allowed to be escaped in IRIs are _~.-!$&'()*+,;=/?#@%, found '{a}'")
  401|  7.90k|                                ).into())));
  402|       |                            }
  403|   365k|                            let buffer = buffer.get_or_insert_with(String::new);
  404|   365k|                            // We add the missing bytes
  405|   365k|                            if i - position_that_is_already_in_buffer > 1 {
  406|   258k|                                buffer.push_str(
  407|   258k|                                    match str_from_utf8(
  408|   258k|                                        &data[position_that_is_already_in_buffer..i - 1],
  409|   258k|                                        position_that_is_already_in_buffer..i - 1,
  410|   258k|                                    ) {
  411|   258k|                                        Ok(data) => data,
  412|      0|                                        Err(e) => return Some((i, Err(e))),
  413|       |                                    },
  414|       |                                )
  415|   106k|                            }
  416|   365k|                            buffer.push(a);
  417|   365k|                            i += 1;
  418|   365k|                            position_that_is_already_in_buffer = i;
  419|  5.45M|                        } else if i == 0 {
  420|   801k|                            if !(Self::is_possible_pn_chars_u(c) || c == ':' || c.is_ascii_digit())
  421|       |                            {
  422|   239k|                                return Some((0, Ok((Cow::Borrowed(""), false))));
  423|   562k|                            }
  424|   562k|                            if !self.unchecked {
  425|       |                                might_be_invalid_iri |=
  426|   562k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  427|   562k|                                        || c == ':';
  428|      0|                            }
  429|   562k|                            i += consumed;
  430|  4.65M|                        } else if Self::is_possible_pn_chars(c) || c == ':' || c == '.' {
  431|  4.54M|                            if !self.unchecked {
  432|       |                                might_be_invalid_iri |=
  433|  4.54M|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  434|  4.54M|                                        || c == ':';
  435|      0|                            }
  436|  4.54M|                            i += consumed;
  437|       |                        } else {
  438|   109k|                            let buffer = if let Some(mut buffer) = buffer {
  439|  37.5k|                                buffer.push_str(
  440|  37.5k|                                    match str_from_utf8(
  441|  37.5k|                                        &data[position_that_is_already_in_buffer..i],
  442|  37.5k|                                        position_that_is_already_in_buffer..i,
  443|  37.5k|                                    ) {
  444|  37.5k|                                        Ok(data) => data,
  445|      0|                                        Err(e) => return Some((i, Err(e))),
  446|       |                                    },
  447|       |                                );
  448|       |                                // We do not include the last dot
  449|  62.5k|                                while buffer.ends_with('.') {
  450|  24.9k|                                    buffer.pop();
  451|  24.9k|                                    i -= 1;
  452|  24.9k|                                }
  453|  37.5k|                                Cow::Owned(buffer)
  454|       |                            } else {
  455|  71.6k|                                let mut data = match str_from_utf8(&data[..i], 0..i) {
  456|  71.6k|                                    Ok(data) => data,
  457|      0|                                    Err(e) => return Some((i, Err(e))),
  458|       |                                };
  459|       |                                // We do not include the last dot
  460|  81.2k|                                while let Some(d) = data.strip_suffix('.') {
  461|  9.57k|                                    data = d;
  462|  9.57k|                                    i -= 1;
  463|  9.57k|                                }
  464|  71.6k|                                Cow::Borrowed(data)
  465|       |                            };
  466|   109k|                            return Some((i, Ok((buffer, might_be_invalid_iri))));
  467|       |                        }
  468|       |                    }
  469|  63.7k|                    Err(e) => return Some((e.location.end, Err(e))),
  470|       |                }
  471|   728k|            } else if is_ending {
  472|  5.15k|                let buffer = if let Some(mut buffer) = buffer {
  473|       |                    // We do not include the last dot
  474|  5.84k|                    while buffer.ends_with('.') {
  475|  3.66k|                        buffer.pop();
  476|  3.66k|                        i -= 1;
  477|  3.66k|                    }
  478|  2.18k|                    Cow::Owned(buffer)
  479|       |                } else {
  480|  2.97k|                    let mut data = match str_from_utf8(&data[..i], 0..i) {
  481|  2.97k|                        Ok(data) => data,
  482|      0|                        Err(e) => return Some((i, Err(e))),
  483|       |                    };
  484|       |                    // We do not include the last dot
  485|  6.99k|                    while let Some(d) = data.strip_suffix('.') {
  486|  4.02k|                        data = d;
  487|  4.02k|                        i -= 1;
  488|  4.02k|                    }
  489|  2.97k|                    Cow::Borrowed(data)
  490|       |                };
  491|  5.15k|                return Some((i, Ok((buffer, might_be_invalid_iri))));
  492|       |            } else {
  493|   723k|                return None;
  494|       |            }
  495|       |        }
  496|  1.24M|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer26recognize_blank_node_label:
  498|   647k|    fn recognize_blank_node_label(
  499|   647k|        data: &[u8],
  500|   647k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  501|   647k|        // [141s] 	BLANK_NODE_LABEL 	::= 	'_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
  502|   647k|        let mut i = 2;
  503|       |        loop {
  504|  5.92M|            match Self::recognize_unicode_char(&data[i..], i)? {
  505|  5.42M|                Ok((c, consumed)) => {
  506|  5.42M|                    if (i == 2 && (Self::is_possible_pn_chars_u(c) || c.is_ascii_digit()))
  507|  4.84M|                        || (i > 2 && Self::is_possible_pn_chars(c))
  508|  5.23M|                    {
  509|  5.23M|                        // Ok
  510|  5.23M|                    } else if i > 2 && c == '.' {
  511|  46.1k|                        if data[i - 1] == b'.' {
  512|  3.64k|                            i -= 1;
  513|  3.64k|                            return Some((
  514|  3.64k|                                i,
  515|  3.64k|                                str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  516|  3.64k|                            ));
  517|  42.5k|                        }
  518|   148k|                    } else if i == 0 {
  519|      0|                        return Some((
  520|      0|                            i,
  521|      0|                            Err((0..i, "A blank node ID should not be empty").into()),
  522|      0|                        ));
  523|   148k|                    } else if data[i - 1] == b'.' {
  524|  3.68k|                        i -= 1;
  525|  3.68k|                        return Some((
  526|  3.68k|                            i,
  527|  3.68k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  528|  3.68k|                        ));
  529|       |                    } else {
  530|   144k|                        return Some((
  531|   144k|                            i,
  532|   144k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  533|   144k|                        ));
  534|       |                    }
  535|  5.27M|                    i += consumed;
  536|       |                }
  537|  6.90k|                Err(e) => return Some((e.location.end, Err(e))),
  538|       |            }
  539|       |        }
  540|   647k|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer18recognize_lang_tag:
  542|   835k|    fn recognize_lang_tag<'a>(
  543|   835k|        &self,
  544|   835k|        data: &'a [u8],
  545|   835k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  546|   835k|        // [144s] 	LANGTAG 	::= 	'@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
  547|   835k|        let mut is_last_block_empty = true;
  548|  3.45M|        for (i, c) in data[1..].iter().enumerate() {
  549|  3.45M|            if c.is_ascii_alphabetic() {
  550|  2.54M|                is_last_block_empty = false;
  551|  2.54M|            } else if i == 0 {
  552|   328k|                return Some((
  553|   328k|                    1,
  554|   328k|                    Err((1..2, "A language code should always start with a letter").into()),
  555|   328k|                ));
  556|   580k|            } else if is_last_block_empty {
  557|  14.4k|                return Some((i, self.parse_lang_tag(&data[1..i], 1..i - 1)));
  558|   566k|            } else if *c == b'-' {
  559|   344k|                is_last_block_empty = true;
  560|   344k|            } else {
  561|   222k|                return Some((i + 1, self.parse_lang_tag(&data[1..=i], 1..i)));
  562|       |            }
  563|       |        }
  564|   270k|        None
  565|   835k|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer14parse_lang_tag:
  567|   236k|    fn parse_lang_tag<'a>(
  568|   236k|        &self,
  569|   236k|        lang_tag: &'a [u8],
  570|   236k|        position: Range<usize>,
  571|   236k|    ) -> Result<N3Token<'a>, TokenRecognizerError> {
  572|   236k|        let lang_tag = str_from_utf8(lang_tag, position.clone())?;
  573|   236k|        Ok(N3Token::LangTag(if self.unchecked {
  574|      0|            lang_tag
  575|       |        } else {
  576|   236k|            LanguageTag::parse(lang_tag)
  577|   236k|                .map_err(|e| (position.clone(), e.to_string()))?
  578|   138k|                .into_inner()
  579|       |        }))
  580|   236k|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer16recognize_string:
  582|   825k|    fn recognize_string(
  583|   825k|        data: &[u8],
  584|   825k|        delimiter: u8,
  585|   825k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  586|   825k|        // [22] 	STRING_LITERAL_QUOTE 	::= 	'"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
  587|   825k|        // [23] 	STRING_LITERAL_SINGLE_QUOTE 	::= 	"'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
  588|   825k|        let mut string = String::new();
  589|   825k|        let mut i = 1;
  590|       |        loop {
  591|  1.37M|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  592|  1.03M|            match str_from_utf8(&data[i..i + end], i..i + end) {
  593|  1.01M|                Ok(s) => string.push_str(s),
  594|  23.3k|                Err(e) => return Some((end, Err(e))),
  595|       |            };
  596|  1.01M|            i += end;
  597|  1.01M|            match data[i] {
  598|  1.01M|                c if c == delimiter => {
  599|   266k|                    return Some((i + 1, Ok(N3Token::String(string))));
  600|       |                }
  601|       |                b'\\' => {
  602|   747k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  603|   723k|                    i += additional + 1;
  604|   723k|                    match c {
  605|   546k|                        Ok(c) => {
  606|   546k|                            string.push(c);
  607|   546k|                        }
  608|   177k|                        Err(e) => {
  609|       |                            // We read until the end of string char
  610|   177k|                            let end = memchr(delimiter, &data[i..])?;
  611|  14.9k|                            return Some((i + end + 1, Err(e)));
  612|       |                        }
  613|       |                    }
  614|       |                }
  615|      0|                _ => unreachable!(),
  616|       |            }
  617|       |        }
  618|   825k|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer16recognize_number:
  658|  1.01M|    fn recognize_number(data: &[u8]) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  659|  1.01M|        // [19] 	INTEGER 	::= 	[+-]? [0-9]+
  660|  1.01M|        // [20] 	DECIMAL 	::= 	[+-]? [0-9]* '.' [0-9]+
  661|  1.01M|        // [21] 	DOUBLE 	::= 	[+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  662|  1.01M|        // [154s] 	EXPONENT 	::= 	[eE] [+-]? [0-9]+
  663|  1.01M|        let mut i = 0;
  664|  1.01M|        let c = *data.first()?;
  665|  1.01M|        if matches!(c, b'+' | b'-') {
  666|   457k|            i += 1;
  667|   554k|        }
  668|       |        // We read the digits before .
  669|  1.01M|        let mut count_before: usize = 0;
  670|       |        loop {
  671|  3.16M|            let c = *data.get(i)?;
  672|  2.95M|            if c.is_ascii_digit() {
  673|  2.14M|                i += 1;
  674|  2.14M|                count_before += 1;
  675|  2.14M|            } else {
  676|   805k|                break;
  677|       |            }
  678|       |        }
  679|       |
  680|       |        // We read the digits after .
  681|       |        #[allow(clippy::if_then_some_else_none)]
  682|   805k|        let count_after = if *data.get(i)? == b'.' {
  683|  77.3k|            i += 1;
  684|  77.3k|
  685|  77.3k|            let mut count_after = 0;
  686|       |            loop {
  687|   751k|                let c = *data.get(i)?;
  688|   711k|                if c.is_ascii_digit() {
  689|   674k|                    i += 1;
  690|   674k|                    count_after += 1;
  691|   674k|                } else {
  692|  36.5k|                    break;
  693|  36.5k|                }
  694|  36.5k|            }
  695|  36.5k|            Some(count_after)
  696|       |        } else {
  697|   728k|            None
  698|       |        };
  699|       |
  700|       |        // End
  701|   765k|        let c = *data.get(i)?;
  702|   765k|        if matches!(c, b'e' | b'E') {
  703|  84.8k|            i += 1;
  704|       |
  705|  84.8k|            let c = *data.get(i)?;
  706|  53.7k|            if matches!(c, b'+' | b'-') {
  707|  3.07k|                i += 1;
  708|  50.7k|            }
  709|       |
  710|  53.7k|            let mut found = false;
  711|       |            loop {
  712|   195k|                let c = *data.get(i)?;
  713|   171k|                if c.is_ascii_digit() {
  714|   141k|                    i += 1;
  715|   141k|                    found = true;
  716|   141k|                } else {
  717|  29.1k|                    break;
  718|  29.1k|                }
  719|  29.1k|            }
  720|  29.1k|            Some((
  721|  29.1k|                i,
  722|  29.1k|                if !found {
  723|  12.1k|                    Err((0..i, "A double exponent cannot be empty").into())
  724|  17.0k|                } else if count_before == 0 && count_after.unwrap_or(0) == 0 {
  725|  6.27k|                    Err((0..i, "A double should not be empty").into())
  726|       |                } else {
  727|  10.7k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Double)
  728|       |                },
  729|       |            ))
  730|   680k|        } else if let Some(count_after) = count_after {
  731|  32.1k|            if count_after == 0 {
  732|       |                // We do not consume the '.' after all
  733|  10.5k|                i -= 1;
  734|  10.5k|                Some((
  735|  10.5k|                    i,
  736|  10.5k|                    if count_before == 0 {
  737|  4.06k|                        Err((0..i, "An integer should not be empty").into())
  738|       |                    } else {
  739|  6.48k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  740|       |                    },
  741|       |                ))
  742|       |            } else {
  743|  21.6k|                Some((i, str_from_utf8(&data[..i], 0..i).map(N3Token::Decimal)))
  744|       |            }
  745|       |        } else {
  746|       |            Some((
  747|   647k|                i,
  748|   647k|                if count_before == 0 {
  749|   312k|                    Err((0..i, "An integer should not be empty").into())
  750|       |                } else {
  751|   334k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  752|       |                },
  753|       |            ))
  754|       |        }
  755|  1.01M|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer16recognize_escape:
  757|  1.15M|    fn recognize_escape(
  758|  1.15M|        data: &[u8],
  759|  1.15M|        position: usize,
  760|  1.15M|        with_echar: bool,
  761|  1.15M|    ) -> Option<(usize, Result<char, TokenRecognizerError>)> {
  762|  1.15M|        // [26] 	UCHAR 	::= 	'\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
  763|  1.15M|        // [159s] 	ECHAR 	::= 	'\' [tbnrf"'\]
  764|  1.15M|        match *data.get(1)? {
  765|   282k|            b'u' => match Self::recognize_hex_char(&data[2..], 4, 'u', position) {
  766|   255k|                Ok(c) => Some((5, Ok(c?))),
  767|  27.0k|                Err(e) => Some((5, Err(e))),
  768|       |            },
  769|   337k|            b'U' => match Self::recognize_hex_char(&data[2..], 8, 'u', position) {
  770|   324k|                Ok(c) => Some((9, Ok(c?))),
  771|  12.1k|                Err(e) => Some((9, Err(e))),
  772|       |            },
  773|  32.3k|            b't' if with_echar => Some((1, Ok('\t'))),
  774|   150k|            b'b' if with_echar => Some((1, Ok('\x08'))),
  775|  41.7k|            b'n' if with_echar => Some((1, Ok('\n'))),
  776|  6.74k|            b'r' if with_echar => Some((1, Ok('\r'))),
  777|  14.2k|            b'f' if with_echar => Some((1, Ok('\x0C'))),
  778|  9.30k|            b'"' if with_echar => Some((1, Ok('"'))),
  779|  16.4k|            b'\'' if with_echar => Some((1, Ok('\''))),
  780|  36.7k|            b'\\' if with_echar => Some((1, Ok('\\'))),
  781|   180k|            c => Some((
  782|   180k|                1,
  783|   180k|                Err((
  784|   180k|                    position..position + 2,
  785|   180k|                    format!("Unexpected escape character '\\{}'", char::from(c)),
  786|   180k|                )
  787|   180k|                    .into()),
  788|   180k|            )), //TODO: read until end of string
  789|       |        }
  790|  1.15M|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer18recognize_hex_char:
  792|   619k|    fn recognize_hex_char(
  793|   619k|        data: &[u8],
  794|   619k|        len: usize,
  795|   619k|        escape_char: char,
  796|   619k|        position: usize,
  797|   619k|    ) -> Result<Option<char>, TokenRecognizerError> {
  798|   619k|        if data.len() < len {
  799|   176k|            return Ok(None);
  800|   443k|        }
  801|   443k|        let val = str_from_utf8(&data[..len], position..position + len + 2)?;
  802|   434k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  803|       |            (
  804|       |                position..position + len + 2,
  805|       |                format!(
  806|       |                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  807|       |                ),
  808|       |            )
  809|   434k|        })?;
  810|   418k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  811|       |            (
  812|       |                position..position + len +2,
  813|       |                format!(
  814|       |                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  815|       |                ),
  816|       |            )
  817|   418k|        })?;
  818|   404k|        Ok(Some(c))
  819|   619k|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer22recognize_unicode_char:
  821|  36.3M|    fn recognize_unicode_char(
  822|  36.3M|        data: &[u8],
  823|  36.3M|        position: usize,
  824|  36.3M|    ) -> Option<Result<(char, usize), TokenRecognizerError>> {
  825|  36.3M|        let mut code_point: u32;
  826|  36.3M|        let bytes_needed: usize;
  827|  36.3M|        let mut lower_boundary = 0x80;
  828|  36.3M|        let mut upper_boundary = 0xBF;
  829|       |
  830|  36.3M|        let byte = *data.first()?;
  831|  34.5M|        match byte {
  832|  34.5M|            0x00..=0x7F => return Some(Ok((char::from(byte), 1))),
  833|  2.24M|            0xC2..=0xDF => {
  834|   762k|                bytes_needed = 1;
  835|   762k|                code_point = u32::from(byte) & 0x1F;
  836|   762k|            }
  837|  1.48M|            0xE0..=0xEF => {
  838|   484k|                if byte == 0xE0 {
  839|  88.7k|                    lower_boundary = 0xA0;
  840|   395k|                }
  841|   484k|                if byte == 0xED {
  842|  18.1k|                    upper_boundary = 0x9F;
  843|   466k|                }
  844|   484k|                bytes_needed = 2;
  845|   484k|                code_point = u32::from(byte) & 0xF;
  846|       |            }
  847|   997k|            0xF0..=0xF4 => {
  848|   646k|                if byte == 0xF0 {
  849|  91.6k|                    lower_boundary = 0x90;
  850|   554k|                }
  851|   646k|                if byte == 0xF4 {
  852|   434k|                    upper_boundary = 0x8F;
  853|   434k|                }
  854|   646k|                bytes_needed = 3;
  855|   646k|                code_point = u32::from(byte) & 0x7;
  856|       |            }
  857|       |            _ => {
  858|  2.14M|                return Some(Err((
  859|  2.14M|                    position..=position,
  860|  2.14M|                    "Invalid UTF-8 character encoding",
  861|  2.14M|                )
  862|  2.14M|                    .into()))
  863|       |            }
  864|       |        }
  865|       |
  866|  1.98M|        for i in 1..=bytes_needed {
  867|  1.98M|            let byte = *data.get(i)?;
  868|  1.67M|            if byte < lower_boundary || upper_boundary < byte {
  869|  1.47M|                return Some(Err((
  870|  1.47M|                    position..=position + i,
  871|  1.47M|                    "Invalid UTF-8 character encoding",
  872|  1.47M|                )
  873|  1.47M|                    .into()));
  874|   203k|            }
  875|   203k|            lower_boundary = 0x80;
  876|   203k|            upper_boundary = 0xBF;
  877|   203k|            code_point = (code_point << 6) | (u32::from(byte) & 0x3F);
  878|       |        }
  879|       |
  880|   109k|        Some(
  881|   109k|            char::from_u32(code_point)
  882|   109k|                .map(|c| (c, bytes_needed + 1))
  883|   109k|                .ok_or_else(|| {
  884|       |                    (
  885|       |                        position..=position + bytes_needed,
  886|       |                        format!("The codepoint {code_point:X} is not a valid unicode character"),
  887|       |                    )
  888|       |                        .into()
  889|   109k|                }),
  890|   109k|        )
  891|  36.3M|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer25is_possible_pn_chars_base:
  894|  29.1M|    fn is_possible_pn_chars_base(c: char) -> bool {
  895|  29.1M|        matches!(c,
  896|  16.5M|        'A'..='Z'
  897|  5.77M|        | 'a'..='z'
  898|  91.0k|        | '\u{00C0}'..='\u{00D6}'
  899|  85.5k|        | '\u{00D8}'..='\u{00F6}'
  900|  82.7k|        | '\u{00F8}'..='\u{02FF}'
  901|  74.5k|        | '\u{0370}'..='\u{037D}'
  902|  74.4k|        | '\u{037F}'..='\u{1FFF}'
  903|  43.5k|        | '\u{200C}'..='\u{200D}'
  904|  43.5k|        | '\u{2070}'..='\u{218F}'
  905|  43.5k|        | '\u{2C00}'..='\u{2FEF}'
  906|  43.3k|        | '\u{3001}'..='\u{D7FF}'
  907|  14.1k|        | '\u{F900}'..='\u{FDCF}'
  908|  13.9k|        | '\u{FDF0}'..='\u{FFFD}'
  909|  13.9k|        | '\u{10000}'..='\u{EFFFF}')
  910|  29.1M|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer22is_possible_pn_chars_u:
  913|  21.6M|    fn is_possible_pn_chars_u(c: char) -> bool {
  914|  21.6M|        Self::is_possible_pn_chars_base(c) || c == '_'
  915|  21.6M|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer20is_possible_pn_chars:
  918|  20.2M|    fn is_possible_pn_chars(c: char) -> bool {
  919|  20.2M|        Self::is_possible_pn_chars_u(c)
  920|  6.95M|            || matches!(c,
  921|  4.54M|        '-' | '0'..='9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
  922|  20.2M|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer43is_possible_pn_chars_base_but_not_valid_iri:
  924|  5.10M|    fn is_possible_pn_chars_base_but_not_valid_iri(c: char) -> bool {
  925|  5.10M|        matches!(c, '\u{FFF0}'..='\u{FFFD}')
  926|  5.10M|            || u32::from(c) % u32::from('\u{FFFE}') == 0
  927|  5.10M|            || u32::from(c) % u32::from('\u{FFFF}') == 0
  928|  5.10M|    }
_RNvNtCscuJmoqhSOSr_5oxttl5lexer13str_from_utf8:
  953|  4.38M|fn str_from_utf8(data: &[u8], range: Range<usize>) -> Result<&str, TokenRecognizerError> {
  954|  4.38M|    str::from_utf8(data).map_err(|e| {
  955|       |        (
  956|       |            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  957|       |            format!("Invalid UTF-8: {e}"),
  958|       |        )
  959|       |            .into()
  960|  4.38M|    })
  961|  4.38M|}
_RNvNtCscuJmoqhSOSr_5oxttl5lexer16string_from_utf8:
  963|   864k|fn string_from_utf8(data: Vec<u8>, range: Range<usize>) -> Result<String, TokenRecognizerError> {
  964|   864k|    String::from_utf8(data).map_err(|e| {
  965|       |        (
  966|       |            range.start + e.utf8_error().valid_up_to()
  967|       |                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  968|       |            format!("Invalid UTF-8: {e}"),
  969|       |        )
  970|       |            .into()
  971|   864k|    })
  972|   864k|}
_RNvXs2_NtCscuJmoqhSOSr_5oxttl5lexerNtB5_7N3TokenNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqB7_:
   12|  5.97M|#[derive(Debug, PartialEq, Eq)]
_RNvXs8_NtCscuJmoqhSOSr_5oxttl5lexerNtB5_11N3LexerModeNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqB7_:
   31|   961k|#[derive(Eq, PartialEq)]
_RNvXs9_NtCscuJmoqhSOSr_5oxttl5lexerNtB5_14N3LexerOptionsNtNtCsjv2Y2xFO4ua_4core7default7Default7defaultB7_:
   38|   206k|#[derive(Default)]

_RNvXNtCscuJmoqhSOSr_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer20error_recovery_state:
   46|  10.8M|    fn error_recovery_state(mut self) -> Self {
   47|  10.8M|        self.stack.clear();
   48|  10.8M|        self.subjects.clear();
   49|  10.8M|        self.predicates.clear();
   50|  10.8M|        self.objects.clear();
   51|  10.8M|        self
   52|  10.8M|    }
_RNvXNtCscuJmoqhSOSr_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer14recognize_next:
   54|  7.61M|    fn recognize_next(
   55|  7.61M|        mut self,
   56|  7.61M|        token: N3Token<'_>,
   57|  7.61M|        context: &mut NQuadsRecognizerContext,
   58|  7.61M|        results: &mut Vec<Quad>,
   59|  7.61M|        errors: &mut Vec<RuleRecognizerError>,
   60|  7.61M|    ) -> Self {
   61|  7.61M|        if let Some(state) = self.stack.pop() {
   62|  1.63M|            match state {
   63|   105k|                NQuadsState::ExpectSubject => match token {
   64|   153k|                    N3Token::IriRef(s) => {
   65|   153k|                        self.subjects
   66|   153k|                            .push(NamedNode::new_unchecked(s).into());
   67|   153k|                        self.stack.push(NQuadsState::ExpectPredicate);
   68|   153k|                        self
   69|       |                    }
   70|  49.1k|                    N3Token::BlankNodeLabel(s) => {
   71|  49.1k|                        self.subjects.push(BlankNode::new_unchecked(s).into());
   72|  49.1k|                        self.stack.push(NQuadsState::ExpectPredicate);
   73|  49.1k|                        self
   74|       |                    }
   75|       |                    #[cfg(feature = "rdf-star")]
   76|   752k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
   77|   105k|                        self.stack.push(NQuadsState::AfterQuotedSubject);
   78|   105k|                        self.stack.push(NQuadsState::ExpectSubject);
   79|   105k|                        self
   80|       |                    }
   81|   702k|                    _ => self.error(
   82|   702k|                        errors,
   83|   702k|                        "The subject of a triple should be an IRI or a blank node, TOKEN found",
   84|   702k|                    ),
   85|       |                },
   86|   183k|                NQuadsState::ExpectPredicate => match token {
   87|   167k|                    N3Token::IriRef(p) => {
   88|   167k|                        self.predicates
   89|   167k|                            .push(NamedNode::new_unchecked(p));
   90|   167k|                        self.stack.push(NQuadsState::ExpectedObject);
   91|   167k|                        self
   92|       |                    }
   93|  15.9k|                    _ => self.error(
   94|  15.9k|                        errors,
   95|  15.9k|                        "The predicate of a triple should be an IRI, TOKEN found",
   96|  15.9k|                    ),
   97|       |                },
   98|  6.33k|                NQuadsState::ExpectedObject => match token {
   99|  75.7k|                    N3Token::IriRef(o) => {
  100|  75.7k|                        self.objects
  101|  75.7k|                            .push(NamedNode::new_unchecked(o).into());
  102|  75.7k|                        self.stack
  103|  75.7k|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  104|  75.7k|                        self
  105|       |                    }
  106|  30.7k|                    N3Token::BlankNodeLabel(o) => {
  107|  30.7k|                        self.objects.push(BlankNode::new_unchecked(o).into());
  108|  30.7k|                        self.stack
  109|  30.7k|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  110|  30.7k|                        self
  111|       |                    }
  112|  43.4k|                    N3Token::String(value) => {
  113|  43.4k|                        self.stack
  114|  43.4k|                            .push(NQuadsState::ExpectLiteralAnnotationOrGraphNameOrDot { value });
  115|  43.4k|                        self
  116|       |                    }
  117|       |                    #[cfg(feature = "rdf-star")]
  118|  9.00k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  119|  6.33k|                        self.stack.push(NQuadsState::AfterQuotedObject);
  120|  6.33k|                        self.stack.push(NQuadsState::ExpectSubject);
  121|  6.33k|                        self
  122|       |                    }
  123|  5.02k|                    _ => self.error(
  124|  5.02k|                        errors,
  125|  5.02k|                        "The object of a triple should be an IRI, a blank node or a literal, TOKEN found",
  126|  5.02k|                    ),
  127|       |                },
  128|  40.7k|                NQuadsState::ExpectLiteralAnnotationOrGraphNameOrDot { value } => match token {
  129|  13.4k|                    N3Token::LangTag(lang_tag) => {
  130|  13.4k|                        self.objects.push(
  131|  13.4k|                            Literal::new_language_tagged_literal_unchecked(
  132|  13.4k|                                value,
  133|  13.4k|                                lang_tag.to_ascii_lowercase(),
  134|  13.4k|                            )
  135|  13.4k|                            .into(),
  136|  13.4k|                        );
  137|  13.4k|                        self.stack
  138|  13.4k|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  139|  13.4k|                        self
  140|       |                    }
  141|  17.7k|                    N3Token::Punctuation("^^") => {
  142|  9.29k|                        self.stack
  143|  9.29k|                            .push(NQuadsState::ExpectLiteralDatatype { value });
  144|  9.29k|                        self
  145|       |                    }
  146|       |                    _ => {
  147|  18.0k|                        self.objects.push(Literal::new_simple_literal(value).into());
  148|  18.0k|                        self.stack
  149|  18.0k|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  150|  18.0k|                        self.recognize_next(token, context, results, errors)
  151|       |                    }
  152|       |                },
  153|  7.88k|                NQuadsState::ExpectLiteralDatatype { value } => match token {
  154|  5.33k|                    N3Token::IriRef(d) => {
  155|  5.33k|                        self.objects.push(
  156|  5.33k|                            Literal::new_typed_literal(
  157|  5.33k|                                value,
  158|  5.33k|                                NamedNode::new_unchecked(d)
  159|  5.33k|                            )
  160|  5.33k|                            .into(),
  161|  5.33k|                        );
  162|  5.33k|                        self.stack
  163|  5.33k|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  164|  5.33k|                        self
  165|       |                    }
  166|  2.55k|                    _ => self.error(errors, "A literal datatype must be an IRI, found TOKEN"),
  167|       |                },
  168|       |                NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple => {
  169|   129k|                    if self.stack.is_empty() {
  170|  63.8k|                        match token {
  171|  38.2k|                            N3Token::IriRef(g) if context.with_graph_name => {
  172|  38.2k|                                self.emit_quad(
  173|  38.2k|                                    results,
  174|  38.2k|                                    NamedNode::new_unchecked(g).into(),
  175|  38.2k|                                );
  176|  38.2k|                                self.stack.push(NQuadsState::ExpectDot);
  177|  38.2k|                                self
  178|       |                            }
  179|  25.6k|                            N3Token::BlankNodeLabel(g) if context.with_graph_name => {
  180|  25.6k|                                self.emit_quad(results, BlankNode::new_unchecked(g).into());
  181|  25.6k|                                self.stack.push(NQuadsState::ExpectDot);
  182|  25.6k|                                self
  183|       |                            }
  184|       |                            _ => {
  185|  64.0k|                                self.emit_quad(results, GraphName::DefaultGraph);
  186|  64.0k|                                self.stack.push(NQuadsState::ExpectDot);
  187|  64.0k|                                self.recognize_next(token, context, results, errors)
  188|       |                            }
  189|       |                        }
  190|  1.31k|                    } else if token == N3Token::Punctuation(">>") {
  191|      0|                        self
  192|       |                    } else {
  193|  1.31k|                        self.error(errors, "Expecting the end of a quoted triple '>>'")
  194|       |                    }
  195|       |                }
  196|   106k|                NQuadsState::ExpectDot => if let N3Token::Punctuation(".") = token {
  197|  46.7k|                    self.stack.push(NQuadsState::ExpectSubject);
  198|  46.7k|                    self
  199|       |                } else {
  200|  59.7k|                    errors.push("Quads should be followed by a dot".into());
  201|  59.7k|                    self.stack.push(NQuadsState::ExpectSubject);
  202|  59.7k|                    self.recognize_next(token, context, results, errors)
  203|       |                },
  204|       |                #[cfg(feature = "rdf-star")]
  205|       |                NQuadsState::AfterQuotedSubject => {
  206|      0|                    let triple = Triple {
  207|      0|                        subject: self.subjects.pop().unwrap(),
  208|      0|                        predicate: self.predicates.pop().unwrap(),
  209|      0|                        object: self.objects.pop().unwrap(),
  210|      0|                    };
  211|      0|                    self.subjects.push(triple.into());
  212|      0|                    self.stack.push(NQuadsState::ExpectPredicate);
  213|      0|                    self.recognize_next(token,context,  results, errors)
  214|       |                }
  215|       |                #[cfg(feature = "rdf-star")]
  216|       |                NQuadsState::AfterQuotedObject => {
  217|      0|                    let triple = Triple {
  218|      0|                        subject: self.subjects.pop().unwrap(),
  219|      0|                        predicate: self.predicates.pop().unwrap(),
  220|      0|                        object: self.objects.pop().unwrap(),
  221|      0|                    };
  222|      0|                    self.objects.push(triple.into());
  223|      0|                    self.stack
  224|      0|                        .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  225|      0|                    self.recognize_next(token, context, results, errors)
  226|       |                }
  227|       |            }
  228|  5.97M|        } else if token == N3Token::Punctuation(".") {
  229|   910k|            self.stack.push(NQuadsState::ExpectSubject);
  230|   910k|            self
  231|       |        } else {
  232|  5.06M|            self
  233|       |        }
  234|  7.61M|    }
_RNvXNtCscuJmoqhSOSr_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer13recognize_end:
  236|   206k|    fn recognize_end(
  237|   206k|        mut self,
  238|   206k|        _context: &mut NQuadsRecognizerContext,
  239|   206k|        results: &mut Vec<Quad>,
  240|   206k|        errors: &mut Vec<RuleRecognizerError>,
  241|   206k|    ) {
  242|   206k|        match &*self.stack {
  243|   206k|            [NQuadsState::ExpectSubject] | [] => (),
  244|    116|            [NQuadsState::ExpectDot] => errors.push("Triples should be followed by a dot".into()),
  245|       |            [NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple] => {
  246|    226|                self.emit_quad(results, GraphName::DefaultGraph);
  247|    226|                errors.push("Triples should be followed by a dot".into())
  248|       |            }
  249|    158|            [NQuadsState::ExpectLiteralAnnotationOrGraphNameOrDot { value }] => {
  250|    158|                self.objects.push(Literal::new_simple_literal(value).into());
  251|    158|                self.emit_quad(results, GraphName::DefaultGraph);
  252|    158|                errors.push("Triples should be followed by a dot".into())
  253|       |            }
  254|    476|            _ => errors.push("Unexpected end".into()), //TODO
  255|       |        }
  256|   206k|    }
_RNvXNtCscuJmoqhSOSr_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer13lexer_options:
  258|  27.7M|    fn lexer_options(context: &NQuadsRecognizerContext) -> &N3LexerOptions {
  259|  27.7M|        &context.lexer_options
  260|  27.7M|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl12line_formatsNtB4_16NQuadsRecognizer10new_parser:
  264|   206k|    pub fn new_parser(
  265|   206k|        with_graph_name: bool,
  266|   206k|        #[cfg(feature = "rdf-star")] with_quoted_triples: bool,
  267|   206k|        unchecked: bool,
  268|   206k|    ) -> Parser<Self> {
  269|   206k|        Parser::new(
  270|   206k|            Lexer::new(
  271|   206k|                N3Lexer::new(N3LexerMode::NTriples, unchecked),
  272|   206k|                MIN_BUFFER_SIZE,
  273|   206k|                MAX_BUFFER_SIZE,
  274|   206k|                true,
  275|   206k|                Some(b"#"),
  276|   206k|            ),
  277|   206k|            NQuadsRecognizer {
  278|   206k|                stack: vec![NQuadsState::ExpectSubject],
  279|   206k|                subjects: Vec::new(),
  280|   206k|                predicates: Vec::new(),
  281|   206k|                objects: Vec::new(),
  282|   206k|            },
  283|   206k|            NQuadsRecognizerContext {
  284|   206k|                with_graph_name,
  285|   206k|                #[cfg(feature = "rdf-star")]
  286|   206k|                with_quoted_triples,
  287|   206k|                lexer_options: N3LexerOptions::default(),
  288|   206k|            },
  289|   206k|        )
  290|   206k|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl12line_formatsNtB4_16NQuadsRecognizer9emit_quad:
  306|   128k|    fn emit_quad(&mut self, results: &mut Vec<Quad>, graph_name: GraphName) {
  307|   128k|        results.push(Quad {
  308|   128k|            subject: self.subjects.pop().unwrap(),
  309|   128k|            predicate: self.predicates.pop().unwrap(),
  310|   128k|            object: self.objects.pop().unwrap(),
  311|   128k|            graph_name,
  312|   128k|        })
  313|   128k|    }
_RINvMs_NtCscuJmoqhSOSr_5oxttl12line_formatsNtB5_16NQuadsRecognizer5errorReEB7_:
  293|   727k|    fn error(
  294|   727k|        mut self,
  295|   727k|        errors: &mut Vec<RuleRecognizerError>,
  296|   727k|        msg: impl Into<RuleRecognizerError>,
  297|   727k|    ) -> Self {
  298|   727k|        errors.push(msg.into());
  299|   727k|        self.stack.clear();
  300|   727k|        self.subjects.clear();
  301|   727k|        self.predicates.clear();
  302|   727k|        self.objects.clear();
  303|   727k|        self
  304|   727k|    }

_RINvMNtCscuJmoqhSOSr_5oxttl6nquadsNtB3_12NQuadsParser10parse_readRShECscPAijTBEHth_6nquads:
   95|  68.7k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadNQuadsReader<R> {
   96|  68.7k|        FromReadNQuadsReader {
   97|  68.7k|            inner: self.parse().parser.parse_read(read),
   98|  68.7k|        }
   99|  68.7k|    }
_RINvMs1_NtCscuJmoqhSOSr_5oxttl6nquadsNtB6_16NQuadsSerializer18serialize_to_writeINtNtCs15NWbik7Z2V_5alloc3vec3VechEECscPAijTBEHth_6nquads:
  382|  68.7k|    pub fn serialize_to_write<W: Write>(self, write: W) -> ToWriteNQuadsWriter<W> {
  383|  68.7k|        ToWriteNQuadsWriter {
  384|  68.7k|            write,
  385|  68.7k|            writer: self.serialize(),
  386|  68.7k|        }
  387|  68.7k|    }
_RINvMs2_NtCscuJmoqhSOSr_5oxttl6nquadsINtB6_19ToWriteNQuadsWriterINtNtCs15NWbik7Z2V_5alloc3vec3VechEE10write_quadRNtNtCs5bua6W9iSBw_5oxrdf6triple4QuadECscPAijTBEHth_6nquads:
  476|  42.7k|    pub fn write_quad<'a>(&mut self, q: impl Into<QuadRef<'a>>) -> io::Result<()> {
  477|  42.7k|        self.writer.write_quad(q, &mut self.write)
  478|  42.7k|    }
_RINvMs3_NtCscuJmoqhSOSr_5oxttl6nquadsNtB6_20LowLevelNQuadsWriter10write_quadRNtNtCs5bua6W9iSBw_5oxrdf6triple4QuadQINtNtCs15NWbik7Z2V_5alloc3vec3VechEECscPAijTBEHth_6nquads:
  557|  42.7k|    pub fn write_quad<'a>(
  558|  42.7k|        &mut self,
  559|  42.7k|        q: impl Into<QuadRef<'a>>,
  560|  42.7k|        mut write: impl Write,
  561|  42.7k|    ) -> io::Result<()> {
  562|  42.7k|        writeln!(write, "{} .", q.into())
  563|  42.7k|    }
_RNvMs2_NtCscuJmoqhSOSr_5oxttl6nquadsINtB5_19ToWriteNQuadsWriterINtNtCs15NWbik7Z2V_5alloc3vec3VechEE6finishCscPAijTBEHth_6nquads:
  481|  68.7k|    pub fn finish(self) -> W {
  482|  68.7k|        self.write
  483|  68.7k|    }
_RNvXs_NtCscuJmoqhSOSr_5oxttl6nquadsINtB4_20FromReadNQuadsReaderRShENtNtNtNtCsjv2Y2xFO4ua_4core4iter6traits8iterator8Iterator4nextCscPAijTBEHth_6nquads:
  218|   111k|    fn next(&mut self) -> Option<Result<Quad, ParseError>> {
  219|   111k|        self.inner.next()
  220|   111k|    }
_RNvMNtCscuJmoqhSOSr_5oxttl6nquadsNtB2_12NQuadsParser19with_quoted_triplesCscPAijTBEHth_6nquads:
   67|   206k|    pub fn with_quoted_triples(mut self) -> Self {
   68|   206k|        self.with_quoted_triples = true;
   69|   206k|        self
   70|   206k|    }
_RNvMNtCscuJmoqhSOSr_5oxttl6nquadsNtB2_12NQuadsParser3newCscPAijTBEHth_6nquads:
   49|   206k|    pub fn new() -> Self {
   50|   206k|        Self::default()
   51|   206k|    }
_RNvMNtCscuJmoqhSOSr_5oxttl6nquadsNtB2_12NQuadsParser9uncheckedCscPAijTBEHth_6nquads:
   59|    281|    pub fn unchecked(mut self) -> Self {
   60|    281|        self.unchecked = true;
   61|    281|        self
   62|    281|    }
_RNvMs1_NtCscuJmoqhSOSr_5oxttl6nquadsNtB5_16NQuadsSerializer3newCscPAijTBEHth_6nquads:
  359|  68.7k|    pub fn new() -> Self {
  360|  68.7k|        Self
  361|  68.7k|    }
_RNvXs4_NtCscuJmoqhSOSr_5oxttl6nquadsNtB5_12NQuadsParserNtNtCsjv2Y2xFO4ua_4core7default7Default7defaultCscPAijTBEHth_6nquads:
   38|   206k|#[derive(Default)]
_RNvMNtCscuJmoqhSOSr_5oxttl6nquadsNtB2_12NQuadsParser5parse:
  175|   206k|    pub fn parse(self) -> LowLevelNQuadsReader {
  176|   206k|        LowLevelNQuadsReader {
  177|   206k|            parser: NQuadsRecognizer::new_parser(
  178|   206k|                true,
  179|   206k|                #[cfg(feature = "rdf-star")]
  180|   206k|                self.with_quoted_triples,
  181|   206k|                self.unchecked,
  182|   206k|            ),
  183|   206k|        }
  184|   206k|    }
_RNvMs0_NtCscuJmoqhSOSr_5oxttl6nquadsNtB5_20LowLevelNQuadsReader17extend_from_slice:
  306|  8.92M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  307|  8.92M|        self.parser.extend_from_slice(other)
  308|  8.92M|    }
_RNvMs0_NtCscuJmoqhSOSr_5oxttl6nquadsNtB5_20LowLevelNQuadsReader3end:
  313|   137k|    pub fn end(&mut self) {
  314|   137k|        self.parser.end()
  315|   137k|    }
_RNvMs0_NtCscuJmoqhSOSr_5oxttl6nquadsNtB5_20LowLevelNQuadsReader6is_end:
  318|   137k|    pub fn is_end(&self) -> bool {
  319|   137k|        self.parser.is_end()
  320|   137k|    }
_RNvMs0_NtCscuJmoqhSOSr_5oxttl6nquadsNtB5_20LowLevelNQuadsReader9read_next:
  326|  20.8M|    pub fn read_next(&mut self) -> Option<Result<Quad, SyntaxError>> {
  327|  20.8M|        self.parser.read_next()
  328|  20.8M|    }
_RNvMs1_NtCscuJmoqhSOSr_5oxttl6nquadsNtB5_16NQuadsSerializer9serialize:
  444|  68.7k|    pub fn serialize(&self) -> LowLevelNQuadsWriter {
  445|  68.7k|        LowLevelNQuadsWriter
  446|  68.7k|    }

_RNvXs_NtNtCscuJmoqhSOSr_5oxttl7toolkit5errorNtB4_11SyntaxErrorNtNtCsjv2Y2xFO4ua_4core3fmt7Display3fmtCscPAijTBEHth_6nquads:
   38|  11.6M|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   39|  11.6M|        if self.location.start.offset + 1 >= self.location.end.offset {
   40|  9.61M|            write!(
   41|  9.61M|                f,
   42|  9.61M|                "Parser error at line {} column {}: {}",
   43|  9.61M|                self.location.start.line + 1,
   44|  9.61M|                self.location.start.column + 1,
   45|  9.61M|                self.message
   46|  9.61M|            )
   47|  2.05M|        } else if self.location.start.line == self.location.end.line {
   48|  2.03M|            write!(
   49|  2.03M|                f,
   50|  2.03M|                "Parser error between at line {} between columns {} and column {}: {}",
   51|  2.03M|                self.location.start.line + 1,
   52|  2.03M|                self.location.start.column + 1,
   53|  2.03M|                self.location.end.column + 1,
   54|  2.03M|                self.message
   55|  2.03M|            )
   56|       |        } else {
   57|  24.8k|            write!(
   58|  24.8k|                f,
   59|  24.8k|                "Parser error between line {} column {} and line {} column {}: {}",
   60|  24.8k|                self.location.start.line + 1,
   61|  24.8k|                self.location.start.column + 1,
   62|  24.8k|                self.location.end.line + 1,
   63|  24.8k|                self.location.end.column + 1,
   64|  24.8k|                self.message
   65|  24.8k|            )
   66|       |        }
   67|  11.6M|    }

_RINvMs1_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerINtB6_5LexerNtNtBa_5lexer7N3LexerE16extend_from_readRShECscPAijTBEHth_6nquads:
  113|   148k|    pub fn extend_from_read(&mut self, read: &mut impl Read) -> io::Result<()> {
  114|   148k|        self.shrink_data();
  115|   148k|        if self.data.len() == self.max_buffer_size {
  116|      0|            return Err(io::Error::new(
  117|      0|                io::ErrorKind::OutOfMemory,
  118|      0|                format!(
  119|      0|                    "Reached the buffer maximal size of {}",
  120|      0|                    self.max_buffer_size
  121|      0|                ),
  122|      0|            ));
  123|   148k|        }
  124|   148k|        let min_end = min(self.data.len() + self.min_buffer_size, self.max_buffer_size);
  125|   148k|        let new_start = self.data.len();
  126|   148k|        self.data.resize(min_end, 0);
  127|   148k|        if self.data.len() < self.data.capacity() {
  128|    243|            // We keep extending to have as much space as available without reallocation
  129|    243|            self.data.resize(self.data.capacity(), 0);
  130|   148k|        }
  131|   148k|        let read = read.read(&mut self.data[new_start..])?;
  132|   148k|        self.data.truncate(new_start + read);
  133|   148k|        self.is_ending = read == 0;
  134|   148k|        Ok(())
  135|   148k|    }
_RNvXNtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCsjv2Y2xFO4ua_4core7convert4FromTINtNtNtB1a_3ops5range5RangejENtNtCs15NWbik7Z2V_5alloc6string6StringEE4fromB6_:
   31|  6.56M|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|  6.56M|        Self {
   33|  6.56M|            location,
   34|  6.56M|            message: message.into(),
   35|  6.56M|        }
   36|  6.56M|    }
_RNvXNtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCsjv2Y2xFO4ua_4core7convert4FromTINtNtNtB1a_3ops5range5RangejEReEE4fromB6_:
   31|  4.42M|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|  4.42M|        Self {
   33|  4.42M|            location,
   34|  4.42M|            message: message.into(),
   35|  4.42M|        }
   36|  4.42M|    }
_RNvXs_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCsjv2Y2xFO4ua_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejENtNtCs15NWbik7Z2V_5alloc6string6StringEE4fromB8_:
   41|   405k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|   405k|        (*location.start()..*location.end() + 1, message).into()
   43|   405k|    }
_RNvXs_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCsjv2Y2xFO4ua_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejEReEE4fromB8_:
   41|  3.61M|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  3.61M|        (*location.start()..*location.end() + 1, message).into()
   43|  3.61M|    }
_RNvXs0_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerNtB5_20TokenRecognizerErrorINtNtCsjv2Y2xFO4ua_4core7convert4FromTjNtNtCs15NWbik7Z2V_5alloc6string6StringEE4fromB9_:
   47|   389k|    fn from((location, message): (usize, S)) -> Self {
   48|   389k|        (location..=location, message).into()
   49|   389k|    }
_RNvMs1_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3newB9_:
   73|   206k|    pub fn new(
   74|   206k|        parser: R,
   75|   206k|        min_buffer_size: usize,
   76|   206k|        max_buffer_size: usize,
   77|   206k|        is_line_jump_whitespace: bool,
   78|   206k|        line_comment_start: Option<&'static [u8]>,
   79|   206k|    ) -> Self {
   80|   206k|        Self {
   81|   206k|            parser,
   82|   206k|            data: Vec::new(),
   83|   206k|            position: Position {
   84|   206k|                line_start_buffer_offset: 0,
   85|   206k|                buffer_offset: 0,
   86|   206k|                global_offset: 0,
   87|   206k|                global_line: 0,
   88|   206k|            },
   89|   206k|            previous_position: Position {
   90|   206k|                line_start_buffer_offset: 0,
   91|   206k|                buffer_offset: 0,
   92|   206k|                global_offset: 0,
   93|   206k|                global_line: 0,
   94|   206k|            },
   95|   206k|            is_ending: false,
   96|   206k|            min_buffer_size,
   97|   206k|            max_buffer_size,
   98|   206k|            is_line_jump_whitespace,
   99|   206k|            line_comment_start,
  100|   206k|        }
  101|   206k|    }
_RNvMs1_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17extend_from_sliceB9_:
  103|  8.92M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  104|  8.92M|        self.shrink_data();
  105|  8.92M|        self.data.extend_from_slice(other);
  106|  8.92M|    }
_RNvMs1_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3endB9_:
  109|   137k|    pub fn end(&mut self) {
  110|   137k|        self.is_ending = true;
  111|   137k|    }
_RNvMs1_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE9read_nextB9_:
  166|  27.7M|    pub fn read_next(&mut self, options: &R::Options) -> Option<Result<R::Token<'_>, SyntaxError>> {
  167|  27.7M|        self.skip_whitespaces_and_comments()?;
  168|  27.6M|        self.previous_position = self.position;
  169|  27.6M|        let Some((consumed, result)) = self.parser.recognize_next_token(
  170|  27.6M|            &self.data[self.position.buffer_offset..],
  171|  27.6M|            self.is_ending,
  172|  27.6M|            options,
  173|  27.6M|        ) else {
  174|  9.32M|            return if self.is_ending {
  175|   471k|                if self.position.buffer_offset == self.data.len() {
  176|   413k|                    None // We have finished
  177|       |                } else {
  178|  58.3k|                    let (new_line_jumps, new_line_start) =
  179|  58.3k|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  180|  58.3k|                            &self.data[self.position.buffer_offset..],
  181|  58.3k|                        );
  182|  58.3k|                    if new_line_jumps > 0 {
  183|  7.11k|                        self.position.line_start_buffer_offset =
  184|  7.11k|                            self.position.buffer_offset + new_line_start;
  185|  51.2k|                    }
  186|  58.3k|                    self.position.global_offset +=
  187|  58.3k|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  188|  58.3k|                    self.position.buffer_offset = self.data.len();
  189|  58.3k|                    self.position.global_line += new_line_jumps;
  190|  58.3k|                    let new_position = TextPosition {
  191|  58.3k|                        line: self.position.global_line,
  192|  58.3k|                        column: Self::column_from_bytes(
  193|  58.3k|                            &self.data[self.position.line_start_buffer_offset..],
  194|  58.3k|                        ),
  195|  58.3k|                        offset: self.position.global_offset,
  196|  58.3k|                    };
  197|  58.3k|                    let error = SyntaxError {
  198|  58.3k|                        location: new_position..new_position,
  199|  58.3k|                        message: "Unexpected end of file".into(),
  200|  58.3k|                    };
  201|  58.3k|                    self.position.buffer_offset = self.data.len(); // We consume everything
  202|  58.3k|                    Some(Err(error))
  203|       |                }
  204|       |            } else {
  205|  8.85M|                None
  206|       |            };
  207|       |        };
  208|  18.2M|        debug_assert!(
  209|      0|            consumed > 0,
  210|      0|            "The lexer must consume at least one byte each time"
  211|       |        );
  212|  18.2M|        debug_assert!(
  213|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  214|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  215|      0|            self.data.len() - self.position.buffer_offset
  216|       |        );
  217|  18.2M|        let (new_line_jumps, new_line_start) =
  218|  18.2M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  219|  18.2M|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  220|  18.2M|            );
  221|  18.2M|        if new_line_jumps > 0 {
  222|  52.0k|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  223|  18.2M|        }
  224|  18.2M|        self.position.buffer_offset += consumed;
  225|  18.2M|        self.position.global_offset += u64::try_from(consumed).unwrap();
  226|  18.2M|        self.position.global_line += new_line_jumps;
  227|  18.2M|        Some(result.map_err(|e| SyntaxError {
  228|       |            location: self.location_from_buffer_offset_range(e.location),
  229|       |            message: e.message,
  230|  18.2M|        }))
  231|  27.7M|    }
_RNCNvMs1_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerINtB7_5LexerNtNtBb_5lexer7N3LexerE9read_next0Bb_:
  227|  10.8M|        Some(result.map_err(|e| SyntaxError {
  228|  10.8M|            location: self.location_from_buffer_offset_range(e.location),
  229|  10.8M|            message: e.message,
  230|  10.8M|        }))
_RNvMs1_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE33location_from_buffer_offset_rangeB9_:
  233|  10.8M|    pub fn location_from_buffer_offset_range(
  234|  10.8M|        &self,
  235|  10.8M|        offset_range: Range<usize>,
  236|  10.8M|    ) -> Range<TextPosition> {
  237|  10.8M|        let start_offset = self.previous_position.buffer_offset + offset_range.start;
  238|  10.8M|        let (start_extra_line_jumps, start_line_start) =
  239|  10.8M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  240|  10.8M|                &self.data[self.previous_position.buffer_offset..start_offset],
  241|  10.8M|            );
  242|  10.8M|        let start_line_start = if start_extra_line_jumps > 0 {
  243|  8.55k|            start_line_start + self.previous_position.buffer_offset
  244|       |        } else {
  245|  10.8M|            self.previous_position.line_start_buffer_offset
  246|       |        };
  247|  10.8M|        let end_offset = self.previous_position.buffer_offset + offset_range.end;
  248|  10.8M|        let (end_extra_line_jumps, end_line_start) =
  249|  10.8M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  250|  10.8M|                &self.data[self.previous_position.buffer_offset..end_offset],
  251|  10.8M|            );
  252|  10.8M|        let end_line_start = if end_extra_line_jumps > 0 {
  253|  33.4k|            end_line_start + self.previous_position.buffer_offset
  254|       |        } else {
  255|  10.7M|            self.previous_position.line_start_buffer_offset
  256|       |        };
  257|  10.8M|        TextPosition {
  258|  10.8M|            line: self.previous_position.global_line + start_extra_line_jumps,
  259|  10.8M|            column: Self::column_from_bytes(&self.data[start_line_start..start_offset]),
  260|  10.8M|            offset: self.previous_position.global_offset
  261|  10.8M|                + u64::try_from(offset_range.start).unwrap(),
  262|  10.8M|        }..TextPosition {
  263|  10.8M|            line: self.previous_position.global_line + end_extra_line_jumps,
  264|  10.8M|            column: Self::column_from_bytes(&self.data[end_line_start..end_offset]),
  265|  10.8M|            offset: self.previous_position.global_offset + u64::try_from(offset_range.end).unwrap(),
  266|  10.8M|        }
  267|  10.8M|    }
_RNvMs1_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE19last_token_locationB9_:
  269|   787k|    pub fn last_token_location(&self) -> Range<TextPosition> {
  270|   787k|        TextPosition {
  271|   787k|            line: self.previous_position.global_line,
  272|   787k|            column: Self::column_from_bytes(
  273|   787k|                &self.data[self.previous_position.line_start_buffer_offset
  274|   787k|                    ..self.previous_position.buffer_offset],
  275|   787k|            ),
  276|   787k|            offset: self.previous_position.global_offset,
  277|   787k|        }..TextPosition {
  278|   787k|            line: self.position.global_line,
  279|   787k|            column: Self::column_from_bytes(
  280|   787k|                &self.data[self.position.line_start_buffer_offset..self.position.buffer_offset],
  281|   787k|            ),
  282|   787k|            offset: self.position.global_offset,
  283|   787k|        }
  284|   787k|    }
_RNvMs1_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17last_token_sourceB9_:
  286|   787k|    pub fn last_token_source(&self) -> Cow<'_, str> {
  287|   787k|        String::from_utf8_lossy(
  288|   787k|            &self.data[self.previous_position.buffer_offset..self.position.buffer_offset],
  289|   787k|        )
  290|   787k|    }
_RNvMs1_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE6is_endB9_:
  292|  9.41M|    pub fn is_end(&self) -> bool {
  293|  9.41M|        self.is_ending && self.data.len() == self.position.buffer_offset
  294|  9.41M|    }
_RNvMs1_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  297|  27.7M|    fn skip_whitespaces_and_comments(&mut self) -> Option<()> {
  298|       |        loop {
  299|  27.7M|            self.skip_whitespaces()?;
  300|       |
  301|  27.7M|            let buf = &self.data[self.position.buffer_offset..];
  302|  27.7M|            if let Some(line_comment_start) = self.line_comment_start {
  303|  27.7M|                if buf.starts_with(line_comment_start) {
  304|       |                    // Comment
  305|   136k|                    if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  306|  34.9k|                        let mut end_position = line_comment_start.len() + end;
  307|  34.9k|                        if buf.get(end_position).copied() == Some(b'\r') {
  308|       |                            // We look for \n for Windows line end style
  309|  24.8k|                            if let Some(c) = buf.get(end_position + 1) {
  310|  8.12k|                                if *c == b'\n' {
  311|     36|                                    end_position += 1;
  312|  8.08k|                                }
  313|  16.6k|                            } else if !self.is_ending {
  314|  16.5k|                                return None; // We need to read more
  315|    105|                            }
  316|  10.1k|                        }
  317|  18.3k|                        let comment_size = end_position + 1;
  318|  18.3k|                        self.position.buffer_offset += comment_size;
  319|  18.3k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  320|  18.3k|                        self.position.global_offset += u64::try_from(comment_size).unwrap();
  321|  18.3k|                        self.position.global_line += 1;
  322|  18.3k|                        continue;
  323|   101k|                    }
  324|   101k|                    if self.is_ending {
  325|  3.48k|                        self.position.buffer_offset = self.data.len(); // EOF
  326|  3.48k|                        return Some(());
  327|  97.6k|                    }
  328|  97.6k|                    return None; // We need more data
  329|  27.6M|                }
  330|      0|            }
  331|  27.6M|            return Some(());
  332|       |        }
  333|  27.7M|    }
_RNvMs1_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  335|  27.7M|    fn skip_whitespaces(&mut self) -> Option<()> {
  336|  27.7M|        if self.is_line_jump_whitespace {
  337|  27.7M|            let mut i = self.position.buffer_offset;
  338|  28.9M|            while let Some(c) = self.data.get(i) {
  339|  26.7M|                match c {
  340|   198k|                    b' ' | b'\t' => {
  341|   198k|                        self.position.buffer_offset += 1;
  342|   198k|                        self.position.global_offset += 1;
  343|   198k|                    }
  344|       |                    b'\r' => {
  345|       |                        // We look for \n for Windows line end style
  346|   301k|                        let mut increment: u8 = 1;
  347|   301k|                        if let Some(c) = self.data.get(i + 1) {
  348|   260k|                            if *c == b'\n' {
  349|    122|                                increment += 1;
  350|    122|                                i += 1;
  351|   260k|                            }
  352|  40.1k|                        } else if !self.is_ending {
  353|  39.6k|                            return None; // We need to read more
  354|    513|                        }
  355|   261k|                        self.position.buffer_offset += usize::from(increment);
  356|   261k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  357|   261k|                        self.position.global_offset += u64::from(increment);
  358|   261k|                        self.position.global_line += 1;
  359|       |                    }
  360|   684k|                    b'\n' => {
  361|   684k|                        self.position.buffer_offset += 1;
  362|   684k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  363|   684k|                        self.position.global_offset += 1;
  364|   684k|                        self.position.global_line += 1;
  365|   684k|                    }
  366|  25.5M|                    _ => return Some(()),
  367|       |                }
  368|  1.14M|                i += 1;
  369|       |                //TODO: SIMD
  370|       |            }
  371|       |        } else {
  372|      0|            for c in &self.data[self.position.buffer_offset..] {
  373|      0|                if matches!(c, b' ' | b'\t') {
  374|      0|                    self.position.buffer_offset += 1;
  375|      0|                    self.position.global_offset += 1;
  376|      0|                } else {
  377|      0|                    return Some(());
  378|       |                }
  379|       |                //TODO: SIMD
  380|       |            }
  381|       |        }
  382|  2.19M|        Some(())
  383|  27.7M|    }
_RNvMs1_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE11shrink_dataB9_:
  385|  9.07M|    fn shrink_data(&mut self) {
  386|  9.07M|        if self.position.line_start_buffer_offset > 0 {
  387|   336k|            self.data
  388|   336k|                .copy_within(self.position.line_start_buffer_offset.., 0);
  389|   336k|            self.data
  390|   336k|                .truncate(self.data.len() - self.position.line_start_buffer_offset);
  391|   336k|            self.position.buffer_offset -= self.position.line_start_buffer_offset;
  392|   336k|            self.position.line_start_buffer_offset = 0;
  393|   336k|            self.previous_position = self.position;
  394|  8.73M|        }
  395|  9.07M|    }
_RNvMs1_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  397|  40.0M|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  398|  40.0M|        let mut num_of_jumps = 0;
  399|  40.0M|        let mut last_jump_pos = 0;
  400|  40.0M|        let mut previous_cr = 0;
  401|  40.0M|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  402|   214k|            if bytes[pos] == b'\r' {
  403|  65.8k|                previous_cr = pos;
  404|  65.8k|                num_of_jumps += 1;
  405|  65.8k|                last_jump_pos = pos + 1;
  406|  65.8k|            } else {
  407|   148k|                if previous_cr < pos - 1 {
  408|   109k|                    // We count \r\n as a single line jump
  409|   109k|                    num_of_jumps += 1;
  410|   109k|                }
  411|   148k|                last_jump_pos = pos + 1;
  412|       |            }
  413|       |        }
  414|  40.0M|        (num_of_jumps, last_jump_pos)
  415|  40.0M|    }
_RNvMs1_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17column_from_bytesB9_:
  417|  38.5M|    fn column_from_bytes(bytes: &[u8]) -> u64 {
  418|  38.5M|        match str::from_utf8(bytes) {
  419|  19.2M|            Ok(s) => u64::try_from(s.chars().count()).unwrap(),
  420|  19.2M|            Err(e) => {
  421|  19.2M|                if e.valid_up_to() == 0 {
  422|  3.98M|                    0
  423|       |                } else {
  424|  15.3M|                    Self::column_from_bytes(&bytes[..e.valid_up_to()])
  425|       |                }
  426|       |            }
  427|       |        }
  428|  38.5M|    }

_RINvMs_NtNtCscuJmoqhSOSr_5oxttl7toolkit6parserINtB5_6ParserNtNtB9_12line_formats16NQuadsRecognizerE10parse_readRShECscPAijTBEHth_6nquads:
  123|  68.7k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadIterator<R, RR> {
  124|  68.7k|        FromReadIterator { read, parser: self }
  125|  68.7k|    }
_RNvXs0_NtNtCscuJmoqhSOSr_5oxttl7toolkit6parserINtB5_16FromReadIteratorRShNtNtB9_12line_formats16NQuadsRecognizerENtNtNtNtCsjv2Y2xFO4ua_4core4iter6traits8iterator8Iterator4nextCscPAijTBEHth_6nquads:
  145|   111k|    fn next(&mut self) -> Option<Self::Item> {
  146|   259k|        while !self.parser.is_end() {
  147|   191k|            if let Some(result) = self.parser.read_next() {
  148|  42.7k|                return Some(result.map_err(ParseError::Syntax));
  149|   148k|            }
  150|   148k|            if let Err(e) = self.parser.lexer.extend_from_read(&mut self.read) {
  151|      0|                return Some(Err(e.into()));
  152|   148k|            }
  153|       |        }
  154|  68.7k|        None
  155|   111k|    }
_RNvXNtNtCscuJmoqhSOSr_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCsjv2Y2xFO4ua_4core7convert4FromReE4fromB6_:
   39|   787k|    fn from(message: S) -> Self {
   40|   787k|        Self {
   41|   787k|            message: message.into(),
   42|   787k|        }
   43|   787k|    }
_RNvMs_NtNtCscuJmoqhSOSr_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_12line_formats16NQuadsRecognizerE3newB8_:
   56|   206k|    pub fn new(lexer: Lexer<RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   57|   206k|        Self {
   58|   206k|            lexer,
   59|   206k|            state: Some(recognizer),
   60|   206k|            context,
   61|   206k|            results: vec![],
   62|   206k|            errors: vec![],
   63|   206k|        }
   64|   206k|    }
_RNvMs_NtNtCscuJmoqhSOSr_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_12line_formats16NQuadsRecognizerE17extend_from_sliceB8_:
   66|  8.92M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
   67|  8.92M|        self.lexer.extend_from_slice(other)
   68|  8.92M|    }
_RNvMs_NtNtCscuJmoqhSOSr_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_12line_formats16NQuadsRecognizerE3endB8_:
   71|   137k|    pub fn end(&mut self) {
   72|   137k|        self.lexer.end()
   73|   137k|    }
_RNvMs_NtNtCscuJmoqhSOSr_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_12line_formats16NQuadsRecognizerE6is_endB8_:
   76|   397k|    pub fn is_end(&self) -> bool {
   77|   397k|        self.state.is_none() && self.results.is_empty() && self.errors.is_empty()
   78|   397k|    }
_RNvMs_NtNtCscuJmoqhSOSr_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_12line_formats16NQuadsRecognizerE9read_nextB8_:
   80|  21.0M|    pub fn read_next(&mut self) -> Option<Result<RR::Output, SyntaxError>> {
   81|       |        loop {
   82|  28.6M|            if let Some(error) = self.errors.pop() {
   83|   787k|                return Some(Err(SyntaxError {
   84|   787k|                    location: self.lexer.last_token_location(),
   85|   787k|                    message: error
   86|   787k|                        .message
   87|   787k|                        .replace("TOKEN", &self.lexer.last_token_source()),
   88|   787k|                }));
   89|  27.9M|            }
   90|  27.9M|            if let Some(result) = self.results.pop() {
   91|   128k|                return Some(Ok(result));
   92|  27.7M|            }
   93|  27.7M|            if let Some(result) = self.lexer.read_next(RR::lexer_options(&self.context)) {
   94|  18.3M|                match result {
   95|  7.47M|                    Ok(token) => {
   96|  7.47M|                        self.state = self.state.take().map(|state| {
   97|       |                            state.recognize_next(
   98|       |                                token,
   99|       |                                &mut self.context,
  100|       |                                &mut self.results,
  101|       |                                &mut self.errors,
  102|       |                            )
  103|  7.47M|                        });
  104|  7.47M|                        continue;
  105|       |                    }
  106|  10.8M|                    Err(e) => {
  107|  10.8M|                        self.state = self.state.take().map(RR::error_recovery_state);
  108|  10.8M|                        return Some(Err(e));
  109|       |                    }
  110|       |                }
  111|  9.41M|            }
  112|  9.41M|            if self.lexer.is_end() {
  113|   413k|                let Some(state) = self.state.take() else {
  114|   206k|                    return None;
  115|       |                };
  116|   206k|                state.recognize_end(&mut self.context, &mut self.results, &mut self.errors)
  117|       |            } else {
  118|  9.00M|                return None;
  119|       |            }
  120|       |        }
  121|  21.0M|    }
_RNCNvMs_NtNtCscuJmoqhSOSr_5oxttl7toolkit6parserINtB6_6ParserNtNtBa_12line_formats16NQuadsRecognizerE9read_next0Ba_:
   96|  7.47M|                        self.state = self.state.take().map(|state| {
   97|  7.47M|                            state.recognize_next(
   98|  7.47M|                                token,
   99|  7.47M|                                &mut self.context,
  100|  7.47M|                                &mut self.results,
  101|  7.47M|                                &mut self.errors,
  102|  7.47M|                            )
  103|  7.47M|                        });


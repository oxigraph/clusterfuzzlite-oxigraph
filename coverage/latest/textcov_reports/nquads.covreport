rust_fuzzer_test_input:
  209|  42.7k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  42.7k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  42.7k|                }
  223|  42.7k|
  224|  42.7k|                __libfuzzer_sys_run(bytes);
  225|  42.7k|                0
  226|       |            }
_RNvNvCsjjjxbQDSpyn_6nquads1__19___libfuzzer_sys_run:
  241|  42.7k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|       |            }
LLVMFuzzerTestOneInput:
   58|  42.7k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  42.7k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  42.7k|    });
   63|  42.7k|
   64|  42.7k|    match test_input {
   65|  42.7k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  42.7k|}
_RNCNvCs24IpJFTnVTQ_13libfuzzer_sys15test_input_wrap0B3_:
   59|  42.7k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  42.7k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  42.7k|        rust_fuzzer_test_input(data_slice)
   62|  42.7k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvMs3_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0ECs7ZOrRad3M6Z_5oxttl:
 1044|  22.0M|    pub(crate) unsafe fn next(
 1045|  22.0M|        &mut self,
 1046|  22.0M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  22.0M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  22.0M|        let found = find_raw(self.start, self.end)?;
 1057|   183k|        let result = found.distance(self.original_start);
 1058|   183k|        self.start = found.add(1);
 1059|   183k|        Some(result)
 1060|  22.0M|    }
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECs7ZOrRad3M6Z_5oxttl:
 1125|  58.1k|pub(crate) unsafe fn search_slice_with_raw(
 1126|  58.1k|    haystack: &[u8],
 1127|  58.1k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  58.1k|) -> Option<usize> {
 1129|  58.1k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  58.1k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  58.1k|    // a &[u8].
 1132|  58.1k|    let start = haystack.as_ptr();
 1133|  58.1k|    let end = start.add(haystack.len());
 1134|  58.1k|    let found = find_raw(start, end)?;
 1135|  25.2k|    Some(found.distance(start))
 1136|  58.1k|}
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr7memchr20ECs7ZOrRad3M6Z_5oxttl:
 1125|  6.99M|pub(crate) unsafe fn search_slice_with_raw(
 1126|  6.99M|    haystack: &[u8],
 1127|  6.99M|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  6.99M|) -> Option<usize> {
 1129|  6.99M|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  6.99M|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  6.99M|    // a &[u8].
 1132|  6.99M|    let start = haystack.as_ptr();
 1133|  6.99M|    let end = start.add(haystack.len());
 1134|  6.99M|    let found = find_raw(start, end)?;
 1135|  3.65M|    Some(found.distance(start))
 1136|  6.99M|}
_RNvMs3_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  21.8M|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  21.8M|        Iter {
 1029|  21.8M|            original_start: haystack.as_ptr(),
 1030|  21.8M|            start: haystack.as_ptr(),
 1031|  21.8M|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  21.8M|            haystack: core::marker::PhantomData,
 1033|  21.8M|        }
 1034|  21.8M|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle1B8_:
  117|  71.3k|    pub(crate) fn needle1(&self) -> u8 {
  118|  71.3k|        self.s1
  119|  71.3k|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE3newB8_:
  111|  58.1k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  58.1k|        One { s1: needle, v1: V::splat(needle) }
  113|  58.1k|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE3newB8_:
  111|  58.1k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  58.1k|        One { s1: needle, v1: V::splat(needle) }
  113|  58.1k|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  8.95k|    pub(crate) unsafe fn find_raw(
  144|  8.95k|        &self,
  145|  8.95k|        start: *const u8,
  146|  8.95k|        end: *const u8,
  147|  8.95k|    ) -> Option<*const u8> {
  148|  8.95k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  8.95k|        // need to move up to using a u64 for the masks used below. Currently
  150|  8.95k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  8.95k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  8.95k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  8.95k|        let topos = V::Mask::first_offset;
  155|  8.95k|        let len = end.distance(start);
  156|  8.95k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  8.95k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  2.11k|            return Some(cur);
  167|  6.84k|        }
  168|  6.84k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  6.84k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  6.84k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  6.84k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  6.84k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  9.78k|        while cur <= end.sub(V::BYTES) {
  213|  3.41k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  3.41k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    474|                return Some(cur);
  216|  2.94k|            }
  217|  2.94k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  6.37k|        if cur < end {
  224|  5.10k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  5.10k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  5.10k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  5.10k|            return self.search_chunk(cur, topos);
  228|  1.26k|        }
  229|  1.26k|        None
  230|  8.95k|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  28.3k|    pub(crate) unsafe fn find_raw(
  144|  28.3k|        &self,
  145|  28.3k|        start: *const u8,
  146|  28.3k|        end: *const u8,
  147|  28.3k|    ) -> Option<*const u8> {
  148|  28.3k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  28.3k|        // need to move up to using a u64 for the masks used below. Currently
  150|  28.3k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  28.3k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  28.3k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  28.3k|        let topos = V::Mask::first_offset;
  155|  28.3k|        let len = end.distance(start);
  156|  28.3k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  28.3k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  13.9k|            return Some(cur);
  167|  14.4k|        }
  168|  14.4k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  14.4k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  14.4k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  14.4k|        if len >= Self::LOOP_SIZE {
  172|  6.31k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|  4.12k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|  4.12k|                let a = V::load_aligned(cur);
  176|  4.12k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|  4.12k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|  4.12k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|  4.12k|                let eqa = self.v1.cmpeq(a);
  180|  4.12k|                let eqb = self.v1.cmpeq(b);
  181|  4.12k|                let eqc = self.v1.cmpeq(c);
  182|  4.12k|                let eqd = self.v1.cmpeq(d);
  183|  4.12k|                let or1 = eqa.or(eqb);
  184|  4.12k|                let or2 = eqc.or(eqd);
  185|  4.12k|                let or3 = or1.or(or2);
  186|  4.12k|                if or3.movemask_will_have_non_zero() {
  187|  2.00k|                    let mask = eqa.movemask();
  188|  2.00k|                    if mask.has_non_zero() {
  189|    478|                        return Some(cur.add(topos(mask)));
  190|  1.52k|                    }
  191|  1.52k|
  192|  1.52k|                    let mask = eqb.movemask();
  193|  1.52k|                    if mask.has_non_zero() {
  194|    868|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|    660|                    }
  196|    660|
  197|    660|                    let mask = eqc.movemask();
  198|    660|                    if mask.has_non_zero() {
  199|    268|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|    392|                    }
  201|    392|
  202|    392|                    let mask = eqd.movemask();
  203|    392|                    debug_assert!(mask.has_non_zero());
  204|    392|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  2.11k|                }
  206|  2.11k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  10.2k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  28.6k|        while cur <= end.sub(V::BYTES) {
  213|  17.1k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  17.1k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    882|                return Some(cur);
  216|  16.2k|            }
  217|  16.2k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  11.5k|        if cur < end {
  224|  10.5k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  10.5k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  10.5k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  10.5k|            return self.search_chunk(cur, topos);
  228|  1.01k|        }
  229|  1.01k|        None
  230|  28.3k|    }
_RINvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  17.4k|    unsafe fn search_chunk(
  417|  17.4k|        &self,
  418|  17.4k|        cur: *const u8,
  419|  17.4k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  17.4k|    ) -> Option<*const u8> {
  421|  17.4k|        let chunk = V::load_unaligned(cur);
  422|  17.4k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  17.4k|        if mask.has_non_zero() {
  424|  2.61k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  14.8k|            None
  427|       |        }
  428|  17.4k|    }
_RINvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  56.0k|    unsafe fn search_chunk(
  417|  56.0k|        &self,
  418|  56.0k|        cur: *const u8,
  419|  56.0k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  56.0k|    ) -> Option<*const u8> {
  421|  56.0k|        let chunk = V::load_unaligned(cur);
  422|  56.0k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  56.0k|        if mask.has_non_zero() {
  424|  15.1k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  40.8k|            None
  427|       |        }
  428|  56.0k|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE3newBa_:
  450|  29.0M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  29.0M|        Two {
  452|  29.0M|            s1: needle1,
  453|  29.0M|            s2: needle2,
  454|  29.0M|            v1: V::splat(needle1),
  455|  29.0M|            v2: V::splat(needle2),
  456|  29.0M|        }
  457|  29.0M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE3newBa_:
  450|  29.0M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  29.0M|        Two {
  452|  29.0M|            s1: needle1,
  453|  29.0M|            s2: needle2,
  454|  29.0M|            v1: V::splat(needle1),
  455|  29.0M|            v2: V::splat(needle2),
  456|  29.0M|        }
  457|  29.0M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  58.4M|    pub(crate) fn needle1(&self) -> u8 {
  462|  58.4M|        self.s1
  463|  58.4M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  57.7M|    pub(crate) fn needle2(&self) -> u8 {
  468|  57.7M|        self.s2
  469|  57.7M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE8find_rawBa_:
  493|  1.11M|    pub(crate) unsafe fn find_raw(
  494|  1.11M|        &self,
  495|  1.11M|        start: *const u8,
  496|  1.11M|        end: *const u8,
  497|  1.11M|    ) -> Option<*const u8> {
  498|  1.11M|        // If we want to support vectors bigger than 256 bits, we probably
  499|  1.11M|        // need to move up to using a u64 for the masks used below. Currently
  500|  1.11M|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|  1.11M|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|  1.11M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  1.11M|        let topos = V::Mask::first_offset;
  505|  1.11M|        let len = end.distance(start);
  506|  1.11M|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  1.11M|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   454k|            return Some(cur);
  517|   660k|        }
  518|   660k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   660k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|   660k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   660k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   660k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   832k|        while cur <= end.sub(V::BYTES) {
  551|   183k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   183k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  11.1k|                return Some(cur);
  554|   172k|            }
  555|   172k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   649k|        if cur < end {
  562|   609k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   609k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|   609k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   609k|            return self.search_chunk(cur, topos);
  566|  39.9k|        }
  567|  39.9k|        None
  568|  1.11M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE8find_rawBa_:
  493|  2.58M|    pub(crate) unsafe fn find_raw(
  494|  2.58M|        &self,
  495|  2.58M|        start: *const u8,
  496|  2.58M|        end: *const u8,
  497|  2.58M|    ) -> Option<*const u8> {
  498|  2.58M|        // If we want to support vectors bigger than 256 bits, we probably
  499|  2.58M|        // need to move up to using a u64 for the masks used below. Currently
  500|  2.58M|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|  2.58M|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|  2.58M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  2.58M|        let topos = V::Mask::first_offset;
  505|  2.58M|        let len = end.distance(start);
  506|  2.58M|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  2.58M|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  2.23M|            return Some(cur);
  517|   352k|        }
  518|   352k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   352k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|   352k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   352k|        if len >= Self::LOOP_SIZE {
  522|   461k|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|   332k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|   332k|                let a = V::load_aligned(cur);
  526|   332k|                let b = V::load_aligned(cur.add(V::BYTES));
  527|   332k|                let eqa1 = self.v1.cmpeq(a);
  528|   332k|                let eqb1 = self.v1.cmpeq(b);
  529|   332k|                let eqa2 = self.v2.cmpeq(a);
  530|   332k|                let eqb2 = self.v2.cmpeq(b);
  531|   332k|                let or1 = eqa1.or(eqb1);
  532|   332k|                let or2 = eqa2.or(eqb2);
  533|   332k|                let or3 = or1.or(or2);
  534|   332k|                if or3.movemask_will_have_non_zero() {
  535|  48.2k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|  48.2k|                    if mask.has_non_zero() {
  537|  28.5k|                        return Some(cur.add(topos(mask)));
  538|  19.7k|                    }
  539|  19.7k|
  540|  19.7k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|  19.7k|                    debug_assert!(mask.has_non_zero());
  542|  19.7k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|   284k|                }
  544|   284k|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   175k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   425k|        while cur <= end.sub(V::BYTES) {
  551|   132k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   132k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  11.1k|                return Some(cur);
  554|   121k|            }
  555|   121k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   293k|        if cur < end {
  562|   284k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   284k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|   284k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   284k|            return self.search_chunk(cur, topos);
  566|  9.16k|        }
  567|  9.16k|        None
  568|  2.58M|    }
_RINvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  1.90M|    unsafe fn search_chunk(
  671|  1.90M|        &self,
  672|  1.90M|        cur: *const u8,
  673|  1.90M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  1.90M|    ) -> Option<*const u8> {
  675|  1.90M|        let chunk = V::load_unaligned(cur);
  676|  1.90M|        let eq1 = self.v1.cmpeq(chunk);
  677|  1.90M|        let eq2 = self.v2.cmpeq(chunk);
  678|  1.90M|        let mask = eq1.or(eq2).movemask();
  679|  1.90M|        if mask.has_non_zero() {
  680|   497k|            let mask1 = eq1.movemask();
  681|   497k|            let mask2 = eq2.movemask();
  682|   497k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  1.40M|            None
  685|       |        }
  686|  1.90M|    }
_RINvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  3.00M|    unsafe fn search_chunk(
  671|  3.00M|        &self,
  672|  3.00M|        cur: *const u8,
  673|  3.00M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  3.00M|    ) -> Option<*const u8> {
  675|  3.00M|        let chunk = V::load_unaligned(cur);
  676|  3.00M|        let eq1 = self.v1.cmpeq(chunk);
  677|  3.00M|        let eq2 = self.v2.cmpeq(chunk);
  678|  3.00M|        let mask = eq1.or(eq2).movemask();
  679|  3.00M|        if mask.has_non_zero() {
  680|  2.27M|            let mask1 = eq1.movemask();
  681|  2.27M|            let mask2 = eq2.movemask();
  682|  2.27M|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|   733k|            None
  685|       |        }
  686|  3.00M|    }
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  17.6k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  17.6k|    start: *const u8,
 1150|  17.6k|    end: *const u8,
 1151|  17.6k|    confirm: F,
 1152|  17.6k|) -> Option<*const u8> {
 1153|  17.6k|    debug_assert!(start <= end);
 1154|  17.6k|    let mut ptr = start;
 1155|  83.4k|    while ptr < end {
 1156|  71.3k|        if confirm(*ptr) {
 1157|  5.47k|            return Some(ptr);
 1158|  65.8k|        }
 1159|  65.8k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  12.1k|    None
 1162|  17.6k|}
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|  21.0M|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  21.0M|    start: *const u8,
 1150|  21.0M|    end: *const u8,
 1151|  21.0M|    confirm: F,
 1152|  21.0M|) -> Option<*const u8> {
 1153|  21.0M|    debug_assert!(start <= end);
 1154|  21.0M|    let mut ptr = start;
 1155|  78.5M|    while ptr < end {
 1156|  58.4M|        if confirm(*ptr) {
 1157|  1.01M|            return Some(ptr);
 1158|  57.4M|        }
 1159|  57.4M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  20.0M|    None
 1162|  21.0M|}

_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  58.1k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  58.1k|        One {
   71|  58.1k|            sse2: generic::One::new(needle),
   72|  58.1k|            avx2: generic::One::new(needle),
   73|  58.1k|        }
   74|  58.1k|    }
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  58.1k|    pub unsafe fn find_raw(
  180|  58.1k|        &self,
  181|  58.1k|        start: *const u8,
  182|  58.1k|        end: *const u8,
  183|  58.1k|    ) -> Option<*const u8> {
  184|  58.1k|        if start >= end {
  185|  3.20k|            return None;
  186|  54.9k|        }
  187|  54.9k|        let len = end.distance(start);
  188|  54.9k|        if len < __m256i::BYTES {
  189|  26.5k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  17.6k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  17.6k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  8.95k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  28.3k|        }
  201|  28.3k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  28.3k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  28.3k|        // enough to run on the vector routine. Pointer validity is caller's
  204|  28.3k|        // responsibility.
  205|  28.3k|        //
  206|  28.3k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  28.3k|        // means we'd have to annotate this routine with `target_feature`.
  208|  28.3k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  28.3k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  28.3k|        // The real problem is that a routine with a `target_feature`
  211|  28.3k|        // annotation generally can't be inlined into caller code unless
  212|  28.3k|        // the caller code has the same target feature annotations. Namely,
  213|  28.3k|        // the common case (at time of writing) is for calling code to not
  214|  28.3k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  28.3k|        // `target_feature` on this routine, it can be inlined which will
  216|  28.3k|        // handle some of the short-haystack cases above without touching the
  217|  28.3k|        // architecture specific code.
  218|  28.3k|        self.find_raw_avx2(start, end)
  219|  58.1k|    }
_RNCNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|  71.3k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|  71.3k|                    b == self.sse2.needle1()
  194|  71.3k|                })
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  8.95k|    unsafe fn find_raw_sse2(
  337|  8.95k|        &self,
  338|  8.95k|        start: *const u8,
  339|  8.95k|        end: *const u8,
  340|  8.95k|    ) -> Option<*const u8> {
  341|  8.95k|        self.sse2.find_raw(start, end)
  342|  8.95k|    }
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  28.3k|    unsafe fn find_raw_avx2(
  397|  28.3k|        &self,
  398|  28.3k|        start: *const u8,
  399|  28.3k|        end: *const u8,
  400|  28.3k|    ) -> Option<*const u8> {
  401|  28.3k|        self.avx2.find_raw(start, end)
  402|  28.3k|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  29.0M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  29.0M|        Two {
  558|  29.0M|            sse2: generic::Two::new(needle1, needle2),
  559|  29.0M|            avx2: generic::Two::new(needle1, needle2),
  560|  29.0M|        }
  561|  29.0M|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  29.0M|    pub unsafe fn find_raw(
  655|  29.0M|        &self,
  656|  29.0M|        start: *const u8,
  657|  29.0M|        end: *const u8,
  658|  29.0M|    ) -> Option<*const u8> {
  659|  29.0M|        if start >= end {
  660|  4.24M|            return None;
  661|  24.7M|        }
  662|  24.7M|        let len = end.distance(start);
  663|  24.7M|        if len < __m256i::BYTES {
  664|  22.1M|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  21.0M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  21.0M|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|  1.11M|                self.find_raw_sse2(start, end)
  674|       |            };
  675|  2.58M|        }
  676|  2.58M|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|  2.58M|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|  2.58M|        // enough to run on the vector routine. Pointer validity is caller's
  679|  2.58M|        // responsibility.
  680|  2.58M|        //
  681|  2.58M|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|  2.58M|        // means we'd have to annotate this routine with `target_feature`.
  683|  2.58M|        // Which is fine, because this routine is `unsafe` anyway and the
  684|  2.58M|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|  2.58M|        // The real problem is that a routine with a `target_feature`
  686|  2.58M|        // annotation generally can't be inlined into caller code unless
  687|  2.58M|        // the caller code has the same target feature annotations. Namely,
  688|  2.58M|        // the common case (at time of writing) is for calling code to not
  689|  2.58M|        // have the `avx2` target feature enabled *at compile time*. Without
  690|  2.58M|        // `target_feature` on this routine, it can be inlined which will
  691|  2.58M|        // handle some of the short-haystack cases above without touching the
  692|  2.58M|        // architecture specific code.
  693|  2.58M|        self.find_raw_avx2(start, end)
  694|  29.0M|    }
_RNCNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  58.4M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  58.4M|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  58.4M|                })
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|  1.11M|    unsafe fn find_raw_sse2(
  765|  1.11M|        &self,
  766|  1.11M|        start: *const u8,
  767|  1.11M|        end: *const u8,
  768|  1.11M|    ) -> Option<*const u8> {
  769|  1.11M|        self.sse2.find_raw(start, end)
  770|  1.11M|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|  2.58M|    unsafe fn find_raw_avx2(
  805|  2.58M|        &self,
  806|  2.58M|        start: *const u8,
  807|  2.58M|        end: *const u8,
  808|  2.58M|    ) -> Option<*const u8> {
  809|  2.58M|        self.avx2.find_raw(start, end)
  810|  2.58M|    }

_RNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  29.0M|pub(crate) fn memchr2_raw(
  221|  29.0M|    n1: u8,
  222|  29.0M|    n2: u8,
  223|  29.0M|    start: *const u8,
  224|  29.0M|    end: *const u8,
  225|  29.0M|) -> Option<*const u8> {
  226|  29.0M|    // SAFETY: We provide a valid function pointer type.
  227|  29.0M|    unsafe_ifunc!(
  228|  29.0M|        Two,
  229|  29.0M|        find_raw,
  230|  29.0M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  29.0M|        Option<*const u8>,
  232|  29.0M|        start,
  233|  29.0M|        end,
  234|  29.0M|        n1,
  235|  29.0M|        n2
  236|  29.0M|    )
  237|  29.0M|}
_RNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr10memchr_raw:
  174|  58.1k|pub(crate) fn memchr_raw(
  175|  58.1k|    n1: u8,
  176|  58.1k|    start: *const u8,
  177|  58.1k|    end: *const u8,
  178|  58.1k|) -> Option<*const u8> {
  179|  58.1k|    // SAFETY: We provide a valid function pointer type.
  180|  58.1k|    unsafe_ifunc!(
  181|  58.1k|        One,
  182|  58.1k|        find_raw,
  183|  58.1k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  58.1k|        Option<*const u8>,
  185|  58.1k|        start,
  186|  58.1k|        end,
  187|  58.1k|        n1
  188|  58.1k|    )
  189|  58.1k|}
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  58.1k|        unsafe fn find_avx2(
   79|  58.1k|            $($needle: u8),+,
   80|  58.1k|            $hay_start: *const u8,
   81|  58.1k|            $hay_end: *const u8,
   82|  58.1k|        ) -> $retty {
   83|  58.1k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  58.1k|            $memchrty::new_unchecked($($needle),+)
   85|  58.1k|                .$memchrfind($hay_start, $hay_end)
   86|  58.1k|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  29.0M|        unsafe fn find_avx2(
   79|  29.0M|            $($needle: u8),+,
   80|  29.0M|            $hay_start: *const u8,
   81|  29.0M|            $hay_end: *const u8,
   82|  29.0M|        ) -> $retty {
   83|  29.0M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  29.0M|            $memchrty::new_unchecked($($needle),+)
   85|  29.0M|                .$memchrfind($hay_start, $hay_end)
   86|  29.0M|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }

_RNvXNtCseJq1f3D7C0A_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  33.3M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  33.3M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  33.3M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  33.3M|    }
_RNvXNtCseJq1f3D7C0A_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|  1.03M|    fn as_usize(self) -> usize {
   27|  1.03M|        self as usize
   28|  1.03M|    }

_RNCNvNtCseJq1f3D7C0A_6memchr6memchr7memchr20Cs7ZOrRad3M6Z_5oxttl:
   96|  6.99M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|  6.99M|            memchr2_raw(needle1, needle2, start, end)
   98|  6.99M|        })
_RNCNvXs3_NtCseJq1f3D7C0A_6memchr6memchrNtB7_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0Cs7ZOrRad3M6Z_5oxttl:
  395|  22.0M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNvMs2_NtCseJq1f3D7C0A_6memchr6memchrNtB5_7Memchr23newCs7ZOrRad3M6Z_5oxttl:
  377|  21.8M|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  21.8M|        Memchr2 {
  379|  21.8M|            needle1,
  380|  21.8M|            needle2,
  381|  21.8M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  21.8M|        }
  383|  21.8M|    }
_RNvNtCseJq1f3D7C0A_6memchr6memchr11memchr2_rawCs7ZOrRad3M6Z_5oxttl:
  574|  29.0M|unsafe fn memchr2_raw(
  575|  29.0M|    needle1: u8,
  576|  29.0M|    needle2: u8,
  577|  29.0M|    start: *const u8,
  578|  29.0M|    end: *const u8,
  579|  29.0M|) -> Option<*const u8> {
  580|  29.0M|    #[cfg(target_arch = "x86_64")]
  581|  29.0M|    {
  582|  29.0M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  29.0M|    }
  584|  29.0M|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  585|  29.0M|    {
  586|  29.0M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  29.0M|    }
  588|  29.0M|    #[cfg(target_arch = "aarch64")]
  589|  29.0M|    {
  590|  29.0M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  29.0M|    }
  592|  29.0M|    #[cfg(not(any(
  593|  29.0M|        target_arch = "x86_64",
  594|  29.0M|        all(target_arch = "wasm32", target_feature = "simd128"),
  595|  29.0M|        target_arch = "aarch64"
  596|  29.0M|    )))]
  597|  29.0M|    {
  598|  29.0M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  29.0M|            .find_raw(start, end)
  600|  29.0M|    }
  601|  29.0M|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr12memchr2_iterCs7ZOrRad3M6Z_5oxttl:
  232|  21.8M|pub fn memchr2_iter<'h>(
  233|  21.8M|    needle1: u8,
  234|  21.8M|    needle2: u8,
  235|  21.8M|    haystack: &'h [u8],
  236|  21.8M|) -> Memchr2<'h> {
  237|  21.8M|    Memchr2::new(needle1, needle2, haystack)
  238|  21.8M|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr6memchrCs7ZOrRad3M6Z_5oxttl:
   27|  58.1k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  58.1k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  58.1k|    // pointer between start and end.
   30|  58.1k|    unsafe {
   31|  58.1k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  58.1k|        })
   34|  58.1k|    }
   35|  58.1k|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr7memchr2Cs7ZOrRad3M6Z_5oxttl:
   92|  6.99M|pub fn memchr2(needle1: u8, needle2: u8, haystack: &[u8]) -> Option<usize> {
   93|  6.99M|    // SAFETY: memchr2_raw, when a match is found, always returns a valid
   94|  6.99M|    // pointer between start and end.
   95|  6.99M|    unsafe {
   96|  6.99M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|       |            memchr2_raw(needle1, needle2, start, end)
   98|  6.99M|        })
   99|  6.99M|    }
  100|  6.99M|}
_RNvXs3_NtCseJq1f3D7C0A_6memchr6memchrNtB5_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCs7ZOrRad3M6Z_5oxttl:
  390|  22.0M|    fn next(&mut self) -> Option<usize> {
  391|  22.0M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  22.0M|        // pointers returns will fall within the start and end bounds, and this
  393|  22.0M|        // upholds the safety contract of `self.it.next`.
  394|  22.0M|        unsafe {
  395|  22.0M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  22.0M|        }
  397|  22.0M|    }
_RNCNvNtCseJq1f3D7C0A_6memchr6memchr6memchr0B5_:
   31|  58.1k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|  58.1k|            memchr_raw(needle, start, end)
   33|  58.1k|        })
_RNvNtCseJq1f3D7C0A_6memchr6memchr10memchr_rawB3_:
  504|  58.1k|unsafe fn memchr_raw(
  505|  58.1k|    needle: u8,
  506|  58.1k|    start: *const u8,
  507|  58.1k|    end: *const u8,
  508|  58.1k|) -> Option<*const u8> {
  509|  58.1k|    #[cfg(target_arch = "x86_64")]
  510|  58.1k|    {
  511|  58.1k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  58.1k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  58.1k|        // time. This function also handles using a fallback if neither AVX2
  514|  58.1k|        // nor SSE2 (unusual) are available.
  515|  58.1k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  58.1k|    }
  517|  58.1k|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  518|  58.1k|    {
  519|  58.1k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  58.1k|    }
  521|  58.1k|    #[cfg(target_arch = "aarch64")]
  522|  58.1k|    {
  523|  58.1k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  58.1k|    }
  525|  58.1k|    #[cfg(not(any(
  526|  58.1k|        target_arch = "x86_64",
  527|  58.1k|        all(target_arch = "wasm32", target_feature = "simd128"),
  528|  58.1k|        target_arch = "aarch64"
  529|  58.1k|    )))]
  530|  58.1k|    {
  531|  58.1k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  58.1k|    }
  533|  58.1k|}

_RNvMNtCseJq1f3D7C0A_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  126|  2.83M|    fn get_for_offset(self) -> u32 {
  127|  2.83M|        #[cfg(target_endian = "big")]
  128|  2.83M|        {
  129|  2.83M|            self.0.swap_bytes()
  130|  2.83M|        }
  131|  2.83M|        #[cfg(target_endian = "little")]
  132|  2.83M|        {
  133|  2.83M|            self.0
  134|  2.83M|        }
  135|  2.83M|    }
_RNvXs_NtCseJq1f3D7C0A_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  171|  2.83M|    fn first_offset(self) -> usize {
  172|  2.83M|        // We are dealing with little endian here (and if we aren't, we swap
  173|  2.83M|        // the bytes so we are in practice), where the most significant byte
  174|  2.83M|        // is at a higher address. That means the least significant bit that
  175|  2.83M|        // is set corresponds to the position of our first matching byte.
  176|  2.83M|        // That position corresponds to the number of zeros after the least
  177|  2.83M|        // significant bit.
  178|  2.83M|        self.get_for_offset().trailing_zeros() as usize
  179|  2.83M|    }
_RNvXs_NtCseJq1f3D7C0A_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  146|  5.37M|    fn has_non_zero(self) -> bool {
  147|  5.37M|        self.0 != 0
  148|  5.37M|    }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  217|  1.92M|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  218|  1.92M|            _mm_loadu_si128(data as *const __m128i)
  219|  1.92M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  222|  2.92M|        unsafe fn movemask(self) -> SensibleMoveMask {
  223|  2.92M|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  224|  2.92M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  227|  3.83M|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  228|  3.83M|            _mm_cmpeq_epi8(self, vector2)
  229|  3.83M|        }
_RNvYNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtNtCseJq1f3D7C0A_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   63|   336k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   64|   336k|        self.movemask().has_non_zero()
   65|   336k|    }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  266|  3.06M|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  267|  3.06M|            _mm256_loadu_si256(data as *const __m256i)
  268|  3.06M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  271|  8.08M|        unsafe fn movemask(self) -> SensibleMoveMask {
  272|  8.08M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  273|  8.08M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  276|  7.41M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  277|  7.41M|            _mm256_cmpeq_epi8(self, vector2)
  278|  7.41M|        }
_RNvXs_NtCseJq1f3D7C0A_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  161|  2.83M|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  162|  2.83M|        SensibleMoveMask(self.0 | other.0)
  163|  2.83M|    }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  207|  58.1M|        unsafe fn splat(byte: u8) -> __m128i {
  208|  58.1M|            _mm_set1_epi8(byte as i8)
  209|  58.1M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector2or:
  237|  1.90M|        unsafe fn or(self, vector2: Self) -> __m128i {
  238|  1.90M|            _mm_or_si128(self, vector2)
  239|  1.90M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  256|  58.1M|        unsafe fn splat(byte: u8) -> __m256i {
  257|  58.1M|            _mm256_set1_epi8(byte as i8)
  258|  58.1M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  261|   682k|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  262|   682k|            _mm256_load_si256(data as *const __m256i)
  263|   682k|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector2or:
  286|  4.01M|        unsafe fn or(self, vector2: Self) -> __m256i {
  287|  4.01M|            _mm256_or_si256(self, vector2)
  288|  4.01M|        }

_RNvMs2_NtCskvfXHrT6OsD_9once_cell3impINtB5_8OnceCellNtNtCs3OstG5Tqy1X_5alloc6string6StringE14is_initializedCs24IpJFTnVTQ_13libfuzzer_sys:
   49|  42.7k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  42.7k|        // An `Acquire` load is enough because that makes all the initialization
   51|  42.7k|        // operations visible to us, and, this being a fast path, weaker
   52|  42.7k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  42.7k|        // `SeqCst` operations on the slow path.
   54|  42.7k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  42.7k|    }

_RNvMs4_NtCskvfXHrT6OsD_9once_cell4syncINtB5_8OnceCellNtNtCs3OstG5Tqy1X_5alloc6string6StringE3getCs24IpJFTnVTQ_13libfuzzer_sys:
  963|  42.7k|        pub fn get(&self) -> Option<&T> {
  964|  42.7k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  42.7k|                None
  969|       |            }
  970|  42.7k|        }

_RNvMCsaOqqenhRLQf_10oxilangtagINtB2_11LanguageTagReE10into_innerCs7ZOrRad3M6Z_5oxttl:
   62|   335k|    pub fn into_inner(self) -> T {
   63|   335k|        self.tag
   64|   335k|    }
_RNvMCsaOqqenhRLQf_10oxilangtagINtB2_11LanguageTagReE5parseCs7ZOrRad3M6Z_5oxttl:
   49|   430k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   50|   430k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   51|   335k|        Ok(Self { tag, positions })
   52|   430k|    }
_RINvCsaOqqenhRLQf_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECsiVhMQ2GRKjW_5oxrdf:
  632|   376k|fn parse_langtag(
  633|   376k|    input: &str,
  634|   376k|    output: &mut impl OutputBuffer,
  635|   376k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  636|   376k|    #[derive(PartialEq, Eq)]
  637|   376k|    enum State {
  638|   376k|        Start,
  639|   376k|        AfterLanguage,
  640|   376k|        AfterExtLang,
  641|   376k|        AfterScript,
  642|   376k|        AfterRegion,
  643|   376k|        InExtension { expected: bool },
  644|   376k|        InPrivateUse { expected: bool },
  645|   376k|    }
  646|   376k|
  647|   376k|    let mut state = State::Start;
  648|   376k|    let mut language_end = 0;
  649|   376k|    let mut extlang_end = 0;
  650|   376k|    let mut script_end = 0;
  651|   376k|    let mut region_end = 0;
  652|   376k|    let mut variant_end = 0;
  653|   376k|    let mut extension_end = 0;
  654|   376k|    let mut extlangs_count = 0;
  655|   575k|    for (subtag, end) in SubTagIterator::new(input) {
  656|   575k|        if subtag.is_empty() {
  657|     25|            return Err(LanguageTagParseError {
  658|     25|                kind: TagParseErrorKind::EmptySubtag,
  659|     25|            });
  660|   575k|        }
  661|   575k|        if subtag.len() > 8 {
  662|  4.43k|            return Err(LanguageTagParseError {
  663|  4.43k|                kind: TagParseErrorKind::SubtagTooLong,
  664|  4.43k|            });
  665|   570k|        }
  666|   570k|        if state == State::Start {
  667|       |            // Primary language
  668|   372k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  669|  37.1k|                return Err(LanguageTagParseError {
  670|  37.1k|                    kind: TagParseErrorKind::InvalidLanguage,
  671|  37.1k|                });
  672|   335k|            }
  673|   335k|            language_end = end;
  674|   335k|            output.extend(to_lowercase(subtag));
  675|   335k|            if subtag.len() < 4 {
  676|   287k|                // extlangs are only allowed for short language tags
  677|   287k|                state = State::AfterLanguage;
  678|   287k|            } else {
  679|  47.6k|                state = State::AfterExtLang;
  680|  47.6k|            }
  681|   198k|        } else if let State::InPrivateUse { .. } = state {
  682|  7.99k|            if !is_alphanumeric(subtag) {
  683|      0|                return Err(LanguageTagParseError {
  684|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  685|      0|                });
  686|  7.99k|            }
  687|  7.99k|            output.push('-');
  688|  7.99k|            output.extend(to_lowercase(subtag));
  689|  7.99k|            state = State::InPrivateUse { expected: false };
  690|   190k|        } else if subtag == "x" || subtag == "X" {
  691|       |            // We make sure extension is found
  692|  14.2k|            if let State::InExtension { expected: true } = state {
  693|  2.50k|                return Err(LanguageTagParseError {
  694|  2.50k|                    kind: TagParseErrorKind::EmptyExtension,
  695|  2.50k|                });
  696|  11.7k|            }
  697|  11.7k|            output.push('-');
  698|  11.7k|            output.push('x');
  699|  11.7k|            state = State::InPrivateUse { expected: true };
  700|   176k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  701|       |            // We make sure extension is found
  702|  55.6k|            if let State::InExtension { expected: true } = state {
  703|  1.92k|                return Err(LanguageTagParseError {
  704|  1.92k|                    kind: TagParseErrorKind::EmptyExtension,
  705|  1.92k|                });
  706|  53.6k|            }
  707|  53.6k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  708|  53.6k|            output.push('-');
  709|  53.6k|            output.push(extension_tag);
  710|  53.6k|            state = State::InExtension { expected: true };
  711|   120k|        } else if let State::InExtension { .. } = state {
  712|  19.7k|            if !is_alphanumeric(subtag) {
  713|      0|                return Err(LanguageTagParseError {
  714|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  715|      0|                });
  716|  19.7k|            }
  717|  19.7k|            extension_end = end;
  718|  19.7k|            output.push('-');
  719|  19.7k|            output.extend(to_lowercase(subtag));
  720|  19.7k|            state = State::InExtension { expected: false };
  721|   101k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  722|  23.4k|            extlangs_count += 1;
  723|  23.4k|            if extlangs_count > 3 {
  724|  2.29k|                return Err(LanguageTagParseError {
  725|  2.29k|                    kind: TagParseErrorKind::TooManyExtlangs,
  726|  2.29k|                });
  727|  21.1k|            }
  728|  21.1k|            // valid extlangs
  729|  21.1k|            extlang_end = end;
  730|  21.1k|            output.push('-');
  731|  21.1k|            output.extend(to_lowercase(subtag));
  732|  77.5k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  733|  56.6k|            && subtag.len() == 4
  734|  21.3k|            && is_alphabetic(subtag)
  735|  21.3k|        {
  736|  21.3k|            // Script
  737|  21.3k|            script_end = end;
  738|  21.3k|            output.push('-');
  739|  21.3k|            output.extend(to_uppercase_first(subtag));
  740|  21.3k|            state = State::AfterScript;
  741|  56.2k|        } else if (state == State::AfterLanguage
  742|  31.6k|            || state == State::AfterExtLang
  743|  20.9k|            || state == State::AfterScript)
  744|  46.5k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  745|  8.63k|                || subtag.len() == 3 && is_numeric(subtag))
  746|  37.9k|        {
  747|  37.9k|            // Region
  748|  37.9k|            region_end = end;
  749|  37.9k|            output.push('-');
  750|  37.9k|            output.extend(to_uppercase(subtag));
  751|  37.9k|            state = State::AfterRegion;
  752|  37.9k|        } else if (state == State::AfterLanguage
  753|  13.3k|            || state == State::AfterExtLang
  754|  9.86k|            || state == State::AfterScript
  755|  9.63k|            || state == State::AfterRegion)
  756|  18.2k|            && is_alphanumeric(subtag)
  757|  18.2k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  758|  7.05k|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  759|  11.2k|        {
  760|  11.2k|            // Variant
  761|  11.2k|            variant_end = end;
  762|  11.2k|            output.push('-');
  763|  11.2k|            output.extend(to_lowercase(subtag));
  764|  11.2k|            state = State::AfterRegion;
  765|  11.2k|        } else {
  766|  7.05k|            return Err(LanguageTagParseError {
  767|  7.05k|                kind: TagParseErrorKind::InvalidSubtag,
  768|  7.05k|            });
  769|       |        }
  770|       |    }
  771|       |
  772|       |    //We make sure we are in a correct final state
  773|   320k|    if let State::InExtension { expected: true } = state {
  774|  32.8k|        return Err(LanguageTagParseError {
  775|  32.8k|            kind: TagParseErrorKind::EmptyExtension,
  776|  32.8k|        });
  777|   288k|    }
  778|   288k|    if let State::InPrivateUse { expected: true } = state {
  779|  7.33k|        return Err(LanguageTagParseError {
  780|  7.33k|            kind: TagParseErrorKind::EmptyPrivateUse,
  781|  7.33k|        });
  782|   280k|    }
  783|   280k|
  784|   280k|    //We make sure we have not skipped anyone
  785|   280k|    if extlang_end < language_end {
  786|   268k|        extlang_end = language_end;
  787|   268k|    }
  788|   280k|    if script_end < extlang_end {
  789|   260k|        script_end = extlang_end;
  790|   260k|    }
  791|   280k|    if region_end < script_end {
  792|   254k|        region_end = script_end;
  793|   254k|    }
  794|   280k|    if variant_end < region_end {
  795|   272k|        variant_end = region_end;
  796|   272k|    }
  797|   280k|    if extension_end < variant_end {
  798|   270k|        extension_end = variant_end;
  799|   270k|    }
  800|       |
  801|   280k|    Ok(TagElementsPositions {
  802|   280k|        language_end,
  803|   280k|        extlang_end,
  804|   280k|        script_end,
  805|   280k|        region_end,
  806|   280k|        variant_end,
  807|   280k|        extension_end,
  808|   280k|    })
  809|   376k|}
_RINvCsaOqqenhRLQf_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECsiVhMQ2GRKjW_5oxrdf:
  587|   433k|fn parse_language_tag(
  588|   433k|    input: &str,
  589|   433k|    output: &mut impl OutputBuffer,
  590|   433k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  591|       |    //grandfathered tags
  592|   433k|    if let Some(tag) = GRANDFATHEREDS
  593|   433k|        .iter()
  594|   433k|        .find(|record| record.eq_ignore_ascii_case(input))
  595|       |    {
  596|      0|        output.push_str(tag);
  597|      0|        Ok(TagElementsPositions {
  598|      0|            language_end: tag.len(),
  599|      0|            extlang_end: tag.len(),
  600|      0|            script_end: tag.len(),
  601|      0|            region_end: tag.len(),
  602|      0|            variant_end: tag.len(),
  603|      0|            extension_end: tag.len(),
  604|      0|        })
  605|   433k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  606|       |        // private use
  607|  57.4k|        if !is_alphanumeric_or_dash(input) {
  608|      0|            Err(LanguageTagParseError {
  609|      0|                kind: TagParseErrorKind::ForbiddenChar,
  610|      0|            })
  611|  57.4k|        } else if input.len() == 2 {
  612|      7|            Err(LanguageTagParseError {
  613|      7|                kind: TagParseErrorKind::EmptyPrivateUse,
  614|      7|            })
  615|       |        } else {
  616|  57.4k|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  617|  57.4k|            Ok(TagElementsPositions {
  618|  57.4k|                language_end: input.len(),
  619|  57.4k|                extlang_end: input.len(),
  620|  57.4k|                script_end: input.len(),
  621|  57.4k|                region_end: input.len(),
  622|  57.4k|                variant_end: input.len(),
  623|  57.4k|                extension_end: input.len(),
  624|  57.4k|            })
  625|       |        }
  626|       |    } else {
  627|   376k|        parse_langtag(input, output)
  628|       |    }
  629|   433k|}
_RINvXsr_CsaOqqenhRLQf_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECsiVhMQ2GRKjW_5oxrdf:
  571|  57.4k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsaOqqenhRLQf_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECsiVhMQ2GRKjW_5oxrdf:
  571|   395k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsaOqqenhRLQf_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECsiVhMQ2GRKjW_5oxrdf:
  571|  37.9k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsaOqqenhRLQf_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECsiVhMQ2GRKjW_5oxrdf:
  571|  21.3k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCsaOqqenhRLQf_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0CsiVhMQ2GRKjW_5oxrdf:
  594|  11.2M|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvMCsaOqqenhRLQf_10oxilangtagINtB2_11LanguageTagNtNtCs3OstG5Tqy1X_5alloc6string6StringE10into_innerCsiVhMQ2GRKjW_5oxrdf:
   62|  2.54k|    pub fn into_inner(self) -> T {
   63|  2.54k|        self.tag
   64|  2.54k|    }
_RNvMCsaOqqenhRLQf_10oxilangtagINtB2_11LanguageTagNtNtCs3OstG5Tqy1X_5alloc6string6StringE5parseCsiVhMQ2GRKjW_5oxrdf:
   49|  2.71k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   50|  2.71k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   51|  2.54k|        Ok(Self { tag, positions })
   52|  2.71k|    }
_RNvCsaOqqenhRLQf_10oxilangtag10is_numericCsiVhMQ2GRKjW_5oxrdf:
  876|  5.40k|fn is_numeric(s: &str) -> bool {
  877|  5.40k|    s.chars().all(|x| x.is_ascii_digit())
  878|  5.40k|}
_RNvCsaOqqenhRLQf_10oxilangtag12to_lowercaseCsiVhMQ2GRKjW_5oxrdf:
  903|   395k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  904|   395k|    s.chars().map(|c| c.to_ascii_lowercase())
  905|   395k|}
_RNvCsaOqqenhRLQf_10oxilangtag12to_uppercaseCsiVhMQ2GRKjW_5oxrdf:
  891|  37.9k|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  892|  37.9k|    s.chars().map(|c| c.to_ascii_uppercase())
  893|  37.9k|}
_RNvCsaOqqenhRLQf_10oxilangtag13is_alphabeticCsiVhMQ2GRKjW_5oxrdf:
  871|   429k|fn is_alphabetic(s: &str) -> bool {
  872|   429k|    s.chars().all(|x| x.is_ascii_alphabetic())
  873|   429k|}
_RNvCsaOqqenhRLQf_10oxilangtag15is_alphanumericCsiVhMQ2GRKjW_5oxrdf:
  881|   101k|fn is_alphanumeric(s: &str) -> bool {
  882|   101k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  883|   101k|}
_RNvCsaOqqenhRLQf_10oxilangtag18to_uppercase_firstCsiVhMQ2GRKjW_5oxrdf:
  897|  21.3k|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  898|  21.3k|    let mut chars = s.chars();
  899|  21.3k|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  900|  21.3k|}
_RNvCsaOqqenhRLQf_10oxilangtag23is_alphanumeric_or_dashCsiVhMQ2GRKjW_5oxrdf:
  886|  57.4k|fn is_alphanumeric_or_dash(s: &str) -> bool {
  887|  57.4k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  888|  57.4k|}
_RNvMsv_CsaOqqenhRLQf_10oxilangtagNtB5_14SubTagIterator3newCsiVhMQ2GRKjW_5oxrdf:
  850|   376k|    fn new(input: &'a str) -> Self {
  851|   376k|        Self {
  852|   376k|            split: input.split('-'),
  853|   376k|            position: 0,
  854|   376k|        }
  855|   376k|    }
_RNvXsq_CsaOqqenhRLQf_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsiVhMQ2GRKjW_5oxrdf:
  563|   250k|    fn push(&mut self, _: char) {}
_RNvXsw_CsaOqqenhRLQf_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCsiVhMQ2GRKjW_5oxrdf:
  862|   896k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  863|   896k|        let tag = self.split.next()?;
  864|   575k|        let tag_end = self.position + tag.len();
  865|   575k|        self.position = tag_end + 1;
  866|   575k|        Some((tag, tag_end))
  867|   896k|    }
_RNvXso_CsaOqqenhRLQf_10oxilangtagNtB5_21LanguageTagParseErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
  490|  95.5k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  491|  95.5k|        match self.kind {
  492|       |            TagParseErrorKind::EmptyExtension => {
  493|  37.2k|                write!(f, "If an extension subtag is present, it must not be empty")
  494|       |            }
  495|       |            TagParseErrorKind::EmptyPrivateUse => {
  496|  7.33k|                write!(f, "If the `x` subtag is present, it must not be empty")
  497|       |            }
  498|       |            TagParseErrorKind::ForbiddenChar => {
  499|      0|                write!(f, "The langtag contains a char not allowed")
  500|       |            }
  501|  7.05k|            TagParseErrorKind::InvalidSubtag => write!(
  502|  7.05k|                f,
  503|  7.05k|                "A subtag fails to parse, it does not match any other subtags"
  504|  7.05k|            ),
  505|  37.1k|            TagParseErrorKind::InvalidLanguage => write!(f, "The given language subtag is invalid"),
  506|       |            TagParseErrorKind::SubtagTooLong => {
  507|  4.43k|                write!(f, "A subtag may be eight characters in length at maximum")
  508|       |            }
  509|     25|            TagParseErrorKind::EmptySubtag => write!(f, "A subtag should not be empty"),
  510|       |            TagParseErrorKind::TooManyExtlangs => {
  511|  2.29k|                write!(f, "At maximum three extlangs are allowed")
  512|       |            }
  513|       |        }
  514|  95.5k|    }
_RNCNvCsaOqqenhRLQf_10oxilangtag13is_alphabetic0B3_:
  872|  1.08M|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCsaOqqenhRLQf_10oxilangtag10is_numeric0B3_:
  877|  5.40k|    s.chars().all(|x| x.is_ascii_digit())
_RNCNvCsaOqqenhRLQf_10oxilangtag15is_alphanumeric0B3_:
  882|   220k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNCNvCsaOqqenhRLQf_10oxilangtag23is_alphanumeric_or_dash0B3_:
  887|  1.15M|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')

_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECsiVhMQ2GRKjW_5oxrdf:
 1590|   404k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1591|   404k|        Err(IriParseError { kind })
 1592|   404k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_10parse_path0ECsiVhMQ2GRKjW_5oxrdf:
 1556|  1.65M|    fn read_url_codepoint_or_echar(
 1557|  1.65M|        &mut self,
 1558|  1.65M|        c: char,
 1559|  1.65M|        valid: impl Fn(char) -> bool,
 1560|  1.65M|    ) -> Result<(), IriParseError> {
 1561|  1.65M|        if UNCHECKED || valid(c) {
 1562|  1.57M|            self.output.push(c);
 1563|  1.57M|            Ok(())
 1564|  76.3k|        } else if c == '%' {
 1565|  11.5k|            self.read_echar()
 1566|       |        } else {
 1567|  64.7k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|  1.65M|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_11parse_query0ECsiVhMQ2GRKjW_5oxrdf:
 1556|   317k|    fn read_url_codepoint_or_echar(
 1557|   317k|        &mut self,
 1558|   317k|        c: char,
 1559|   317k|        valid: impl Fn(char) -> bool,
 1560|   317k|    ) -> Result<(), IriParseError> {
 1561|   317k|        if UNCHECKED || valid(c) {
 1562|   278k|            self.output.push(c);
 1563|   278k|            Ok(())
 1564|  38.7k|        } else if c == '%' {
 1565|  13.7k|            self.read_echar()
 1566|       |        } else {
 1567|  24.9k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   317k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_14parse_fragment0ECsiVhMQ2GRKjW_5oxrdf:
 1556|   262k|    fn read_url_codepoint_or_echar(
 1557|   262k|        &mut self,
 1558|   262k|        c: char,
 1559|   262k|        valid: impl Fn(char) -> bool,
 1560|   262k|    ) -> Result<(), IriParseError> {
 1561|   262k|        if UNCHECKED || valid(c) {
 1562|   233k|            self.output.push(c);
 1563|   233k|            Ok(())
 1564|  29.7k|        } else if c == '%' {
 1565|  12.8k|            self.read_echar()
 1566|       |        } else {
 1567|  16.8k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   262k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_15parse_authority0ECsiVhMQ2GRKjW_5oxrdf:
 1556|   428k|    fn read_url_codepoint_or_echar(
 1557|   428k|        &mut self,
 1558|   428k|        c: char,
 1559|   428k|        valid: impl Fn(char) -> bool,
 1560|   428k|    ) -> Result<(), IriParseError> {
 1561|   428k|        if UNCHECKED || valid(c) {
 1562|   407k|            self.output.push(c);
 1563|   407k|            Ok(())
 1564|  20.9k|        } else if c == '%' {
 1565|  13.0k|            self.read_echar()
 1566|       |        } else {
 1567|  7.87k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   428k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_19parse_relative_path0ECsiVhMQ2GRKjW_5oxrdf:
 1556|   714k|    fn read_url_codepoint_or_echar(
 1557|   714k|        &mut self,
 1558|   714k|        c: char,
 1559|   714k|        valid: impl Fn(char) -> bool,
 1560|   714k|    ) -> Result<(), IriParseError> {
 1561|   714k|        if UNCHECKED || valid(c) {
 1562|   607k|            self.output.push(c);
 1563|   607k|            Ok(())
 1564|   106k|        } else if c == '%' {
 1565|  31.2k|            self.read_echar()
 1566|       |        } else {
 1567|  75.6k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   714k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNvB7_28is_iunreserved_or_sub_delimsECsiVhMQ2GRKjW_5oxrdf:
 1556|   326k|    fn read_url_codepoint_or_echar(
 1557|   326k|        &mut self,
 1558|   326k|        c: char,
 1559|   326k|        valid: impl Fn(char) -> bool,
 1560|   326k|    ) -> Result<(), IriParseError> {
 1561|   326k|        if UNCHECKED || valid(c) {
 1562|   311k|            self.output.push(c);
 1563|   311k|            Ok(())
 1564|  14.9k|        } else if c == '%' {
 1565|  8.53k|            self.read_echar()
 1566|       |        } else {
 1567|  6.38k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   326k|    }
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10parse_path0CsiVhMQ2GRKjW_5oxrdf:
 1516|  1.65M|                Some(c) => self.read_url_codepoint_or_echar(c, |c| {
 1517|  1.65M|                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1518|  1.65M|                })?,
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0CsiVhMQ2GRKjW_5oxrdf:
 1574|  82.9k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0CsiVhMQ2GRKjW_5oxrdf:
 1575|  41.7k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E11parse_query0CsiVhMQ2GRKjW_5oxrdf:
 1530|   317k|                self.read_url_codepoint_or_echar(c, |c| {
 1531|   317k|                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?' | '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1532|   317k|                })?
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E14parse_fragment0CsiVhMQ2GRKjW_5oxrdf:
 1541|   262k|            self.read_url_codepoint_or_echar(c, |c| {
 1542|   262k|                is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?')
 1543|   262k|            })?;
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E15parse_authority0CsiVhMQ2GRKjW_5oxrdf:
 1364|   428k|                    self.read_url_codepoint_or_echar(c, |c| {
 1365|   428k|                        is_iunreserved_or_sub_delims(c) || c == ':'
 1366|   428k|                    })?;
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E19parse_relative_path0CsiVhMQ2GRKjW_5oxrdf:
 1323|   714k|            self.read_url_codepoint_or_echar(c, |c| is_iunreserved_or_sub_delims(c) || c == '@')?;
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE10into_innerCsiVhMQ2GRKjW_5oxrdf:
  185|  1.97M|    pub fn into_inner(self) -> T {
  186|  1.97M|        self.iri
  187|  1.97M|    }
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE11is_absoluteCsiVhMQ2GRKjW_5oxrdf:
  199|  2.14M|    pub fn is_absolute(&self) -> bool {
  200|  2.14M|        self.positions.scheme_end != 0
  201|  2.14M|    }
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE5parseCsiVhMQ2GRKjW_5oxrdf:
   58|  2.55M|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  2.55M|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  2.14M|        Ok(Self { iri, positions })
   61|  2.55M|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCsiVhMQ2GRKjW_5oxrdf:
 1372|   299k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1373|   299k|        if self.input.starts_with('[') {
 1374|       |            // IP v6
 1375|   205k|            let start_position = self.input.position;
 1376|  1.67M|            while let Some(c) = self.input.next() {
 1377|  1.64M|                self.output.push(c);
 1378|  1.64M|                if c == ']' {
 1379|   177k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1380|   177k|                    if !UNCHECKED {
 1381|   177k|                        if ip.starts_with('v') || ip.starts_with('V') {
 1382|  62.9k|                            self.validate_ip_v_future(ip)?;
 1383|   114k|                        } else if let Err(error) = Ipv6Addr::from_str(ip) {
 1384|  25.5k|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1385|  88.8k|                        }
 1386|      0|                    }
 1387|       |
 1388|  98.0k|                    let c = self.input.next();
 1389|  98.0k|                    return match c {
 1390|       |                        Some(':') => {
 1391|  35.8k|                            self.output.push(':');
 1392|  35.8k|                            self.parse_port()
 1393|       |                        }
 1394|       |                        None | Some('/') | Some('?') | Some('#') => {
 1395|  48.0k|                            self.output_positions.authority_end = self.output.len();
 1396|  48.0k|                            self.parse_path_start(c)
 1397|       |                        }
 1398|  14.0k|                        Some(c) => {
 1399|  14.0k|                            if UNCHECKED {
 1400|      0|                                self.output.push(c);
 1401|      0|                                continue;
 1402|       |                            } else {
 1403|  14.0k|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1404|       |                            }
 1405|       |                        }
 1406|       |                    };
 1407|  1.46M|                }
 1408|       |            }
 1409|  28.5k|            if UNCHECKED {
 1410|       |                // We consider it's valid even if it's not finished
 1411|      0|                self.output_positions.authority_end = self.output.len();
 1412|      0|                self.parse_path_start(None)
 1413|       |            } else {
 1414|  28.5k|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1415|       |            }
 1416|       |        } else {
 1417|       |            // Other host
 1418|   410k|            loop {
 1419|   410k|                let c = self.input.next();
 1420|   410k|                match c {
 1421|       |                    Some(':') => {
 1422|  29.6k|                        self.output.push(':');
 1423|  29.6k|                        return self.parse_port();
 1424|       |                    }
 1425|       |                    None | Some('/') | Some('?') | Some('#') => {
 1426|  54.5k|                        self.output_positions.authority_end = self.output.len();
 1427|  54.5k|                        return self.parse_path_start(c);
 1428|       |                    }
 1429|   326k|                    Some(c) => self.read_url_codepoint_or_echar(c, is_iunreserved_or_sub_delims)?,
 1430|       |                }
 1431|       |            }
 1432|       |        }
 1433|   299k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCsiVhMQ2GRKjW_5oxrdf:
 1485|  2.16M|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1486|  3.78M|        loop {
 1487|  3.78M|            let c = self.input.next();
 1488|  3.78M|            match c {
 1489|       |                None | Some('/') | Some('?') | Some('#') => {
 1490|  2.12M|                    if self.output.as_str().ends_with("/..") {
 1491|      0|                        self.remove_last_segment();
 1492|      0|                        self.remove_last_segment();
 1493|      0|                        self.output.push('/');
 1494|  2.12M|                    } else if self.output.as_str().ends_with("/.") {
 1495|      0|                        self.remove_last_segment();
 1496|      0|                        self.output.push('/');
 1497|  2.12M|                    } else if c == Some('/') {
 1498|  33.3k|                        self.output.push('/');
 1499|  2.09M|                    }
 1500|       |
 1501|  2.12M|                    if c == Some('?') {
 1502|  50.9k|                        self.output_positions.path_end = self.output.len();
 1503|  50.9k|                        self.output.push('?');
 1504|  50.9k|                        return self.parse_query();
 1505|  2.07M|                    } else if c == Some('#') {
 1506|  35.6k|                        self.output_positions.path_end = self.output.len();
 1507|  35.6k|                        self.output_positions.query_end = self.output.len();
 1508|  35.6k|                        self.output.push('#');
 1509|  35.6k|                        return self.parse_fragment();
 1510|  2.04M|                    } else if c.is_none() {
 1511|  2.00M|                        self.output_positions.path_end = self.output.len();
 1512|  2.00M|                        self.output_positions.query_end = self.output.len();
 1513|  2.00M|                        return Ok(());
 1514|  33.3k|                    }
 1515|       |                }
 1516|  1.65M|                Some(c) => self.read_url_codepoint_or_echar(c, |c| {
 1517|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1518|  1.65M|                })?,
 1519|       |            }
 1520|       |        }
 1521|  2.16M|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCsiVhMQ2GRKjW_5oxrdf:
 1435|  65.5k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1436|  78.6k|        loop {
 1437|  78.6k|            let c = self.input.next();
 1438|  78.6k|            match c {
 1439|       |                Some('/') | Some('?') | Some('#') | None => {
 1440|  45.4k|                    self.output_positions.authority_end = self.output.len();
 1441|  45.4k|                    return self.parse_path_start(c);
 1442|       |                }
 1443|  33.2k|                Some(c) => {
 1444|  33.2k|                    if UNCHECKED || c.is_ascii_digit() {
 1445|  13.1k|                        self.output.push(c)
 1446|       |                    } else {
 1447|  20.1k|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1448|       |                    }
 1449|       |                }
 1450|       |            }
 1451|       |        }
 1452|  65.5k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCsiVhMQ2GRKjW_5oxrdf:
 1571|  91.0k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1572|  91.0k|        let c1 = self.input.next();
 1573|  91.0k|        let c2 = self.input.next();
 1574|  91.0k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1575|  41.8k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1576|       |        {
 1577|  35.8k|            self.output.push('%');
 1578|  35.8k|            self.output.push(c1.unwrap());
 1579|  35.8k|            self.output.push(c2.unwrap());
 1580|  35.8k|            Ok(())
 1581|       |        } else {
 1582|  55.2k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1583|  55.2k|                Some('%'),
 1584|  55.2k|                c1,
 1585|  55.2k|                c2,
 1586|  55.2k|            ]))
 1587|       |        }
 1588|  91.0k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCsiVhMQ2GRKjW_5oxrdf:
 1523|  88.5k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1524|   373k|        while let Some(c) = self.input.next() {
 1525|   330k|            if c == '#' {
 1526|  13.3k|                self.output_positions.query_end = self.output.len();
 1527|  13.3k|                self.output.push('#');
 1528|  13.3k|                return self.parse_fragment();
 1529|       |            } else {
 1530|   317k|                self.read_url_codepoint_or_echar(c, |c| {
 1531|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?' | '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1532|   317k|                })?
 1533|       |            }
 1534|       |        }
 1535|  42.5k|        self.output_positions.query_end = self.output.len();
 1536|  42.5k|        Ok(())
 1537|  88.5k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCsiVhMQ2GRKjW_5oxrdf:
 1213|  2.20M|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|  5.83M|        loop {
 1215|  5.83M|            let c = self.input.next();
 1216|  5.80M|            match c {
 1217|  5.80M|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|  3.63M|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|  2.09M|                    self.output.push(':');
 1222|  2.09M|                    self.output_positions.scheme_end = self.output.len();
 1223|  2.09M|                    self.input_scheme_end = self.input.position;
 1224|  2.09M|                    return if self.input.starts_with('/') {
 1225|   138k|                        self.input.next();
 1226|   138k|                        self.output.push('/');
 1227|   138k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  1.95M|                        self.output_positions.authority_end = self.output.len();
 1230|  1.95M|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|   105k|                    self.input = ParserInput {
 1235|   105k|                        value: self.iri.chars(),
 1236|   105k|                        position: 0,
 1237|   105k|                    }; // reset
 1238|   105k|                    self.output.clear();
 1239|   105k|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|  2.20M|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCsiVhMQ2GRKjW_5oxrdf:
 1539|  61.0k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1540|   300k|        while let Some(c) = self.input.next() {
 1541|   262k|            self.read_url_codepoint_or_echar(c, |c| {
 1542|       |                is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?')
 1543|   262k|            })?;
 1544|       |        }
 1545|  37.2k|        Ok(())
 1546|  61.0k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_relativeCsiVhMQ2GRKjW_5oxrdf:
 1256|   444k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1257|   444k|        if let Some(base) = self.base {
 1258|      0|            match self.input.front() {
 1259|       |                None => {
 1260|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1261|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1262|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1263|      0|                    self.output_positions.path_end = base.positions.path_end;
 1264|      0|                    self.output_positions.query_end = base.positions.query_end;
 1265|      0|                    Ok(())
 1266|       |                }
 1267|       |                Some('/') => {
 1268|      0|                    self.input.next();
 1269|      0|                    self.parse_relative_slash(&base)
 1270|       |                }
 1271|       |                Some('?') => {
 1272|      0|                    self.input.next();
 1273|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1274|      0|                    self.output.push('?');
 1275|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1276|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1277|      0|                    self.output_positions.path_end = base.positions.path_end;
 1278|      0|                    self.parse_query()
 1279|       |                }
 1280|       |                Some('#') => {
 1281|      0|                    self.input.next();
 1282|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1283|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1284|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1285|      0|                    self.output_positions.path_end = base.positions.path_end;
 1286|      0|                    self.output_positions.query_end = base.positions.query_end;
 1287|      0|                    self.output.push('#');
 1288|      0|                    self.parse_fragment()
 1289|       |                }
 1290|       |                _ => {
 1291|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1292|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1293|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1294|      0|                    self.output_positions.path_end = base.positions.path_end;
 1295|      0|                    self.remove_last_segment();
 1296|      0|                    if self.output.len() > base.positions.scheme_end {
 1297|      0|                        // We have some path or authority, we keep a base '/'
 1298|      0|                        self.output.push('/');
 1299|      0|                    }
 1300|      0|                    self.parse_relative_path()
 1301|       |                }
 1302|       |            }
 1303|       |        } else {
 1304|   444k|            self.output_positions.scheme_end = 0;
 1305|   444k|            self.input_scheme_end = 0;
 1306|   444k|            if self.input.starts_with('/') {
 1307|   206k|                self.input.next();
 1308|   206k|                self.output.push('/');
 1309|   206k|                self.parse_path_or_authority()
 1310|       |            } else {
 1311|   238k|                self.output_positions.authority_end = 0;
 1312|   238k|                self.parse_relative_path()
 1313|       |            }
 1314|       |        }
 1315|   444k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCsiVhMQ2GRKjW_5oxrdf:
 1346|   313k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1347|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1348|   727k|        loop {
 1349|   727k|            let c = self.input.next();
 1350|   727k|            match c {
 1351|       |                Some('@') => {
 1352|  9.92k|                    self.output.push('@');
 1353|  9.92k|                    return self.parse_host();
 1354|       |                }
 1355|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1356|   289k|                    self.input = ParserInput {
 1357|   289k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1358|   289k|                        position: self.input_scheme_end + 2,
 1359|   289k|                    };
 1360|   289k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1361|   289k|                    return self.parse_host();
 1362|       |                }
 1363|   428k|                Some(c) => {
 1364|   428k|                    self.read_url_codepoint_or_echar(c, |c| {
 1365|       |                        is_iunreserved_or_sub_delims(c) || c == ':'
 1366|   428k|                    })?;
 1367|       |                }
 1368|       |            }
 1369|       |        }
 1370|   313k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCsiVhMQ2GRKjW_5oxrdf:
 1454|   148k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1455|   148k|        match c {
 1456|       |            None => {
 1457|  57.1k|                self.output_positions.path_end = self.output.len();
 1458|  57.1k|                self.output_positions.query_end = self.output.len();
 1459|  57.1k|                Ok(())
 1460|       |            }
 1461|       |            Some('?') => {
 1462|  37.6k|                self.output_positions.path_end = self.output.len();
 1463|  37.6k|                self.output.push('?');
 1464|  37.6k|                self.parse_query()
 1465|       |            }
 1466|       |            Some('#') => {
 1467|  12.0k|                self.output_positions.path_end = self.output.len();
 1468|  12.0k|                self.output_positions.query_end = self.output.len();
 1469|  12.0k|                self.output.push('#');
 1470|  12.0k|                self.parse_fragment()
 1471|       |            }
 1472|       |            Some('/') => {
 1473|  41.3k|                self.output.push('/');
 1474|  41.3k|                self.parse_path()
 1475|       |            }
 1476|      0|            Some(c) => {
 1477|      0|                self.read_url_codepoint_or_echar(c, |c| {
 1478|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1479|      0|                })?;
 1480|      0|                self.parse_path()
 1481|       |            }
 1482|       |        }
 1483|   148k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCsiVhMQ2GRKjW_5oxrdf:
 1199|  2.55M|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|  2.55M|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|  11.0k|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|  11.0k|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|  2.51M|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|   339k|            _ => self.parse_relative(),
 1210|       |        }
 1211|  2.55M|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E19parse_relative_pathCsiVhMQ2GRKjW_5oxrdf:
 1317|   238k|    fn parse_relative_path(&mut self) -> Result<(), IriParseError> {
 1318|   852k|        while let Some(c) = self.input.front() {
 1319|   776k|            if matches!(c, '/' | '?' | '#') {
 1320|  62.1k|                break;
 1321|   714k|            }
 1322|   714k|            self.input.next();
 1323|   714k|            self.read_url_codepoint_or_echar(c, |c| is_iunreserved_or_sub_delims(c) || c == '@')?;
 1324|       |        }
 1325|   137k|        self.parse_path()
 1326|   238k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E20validate_ip_v_futureCsiVhMQ2GRKjW_5oxrdf:
 1595|  62.9k|    fn validate_ip_v_future(&self, ip: &str) -> Result<(), IriParseError> {
 1596|  62.9k|        let mut chars = ip.chars();
 1597|       |
 1598|  62.9k|        let c = chars.next().ok_or(IriParseError {
 1599|  62.9k|            kind: IriParseErrorKind::InvalidHostCharacter(']'),
 1600|  62.9k|        })?;
 1601|  62.9k|        if !matches!(c, 'v' | 'V') {
 1602|      0|            return self.parse_error(IriParseErrorKind::InvalidHostCharacter(c));
 1603|  62.9k|        };
 1604|  62.9k|
 1605|  62.9k|        let mut with_a_version = false;
 1606|   135k|        for c in &mut chars {
 1607|   126k|            if c == '.' {
 1608|  28.6k|                break;
 1609|  98.0k|            } else if c.is_ascii_hexdigit() {
 1610|  72.5k|                with_a_version = true;
 1611|  72.5k|            } else {
 1612|  25.5k|                return self.parse_error(IriParseErrorKind::InvalidHostCharacter(c));
 1613|       |            }
 1614|       |        }
 1615|  37.4k|        if !with_a_version {
 1616|  12.4k|            return self.parse_error(IriParseErrorKind::InvalidHostCharacter(
 1617|  12.4k|                chars.next().unwrap_or(']'),
 1618|  12.4k|            ));
 1619|  25.0k|        }
 1620|  25.0k|
 1621|  25.0k|        if chars.as_str().is_empty() {
 1622|  7.13k|            return self.parse_error(IriParseErrorKind::InvalidHostCharacter(']'));
 1623|  17.9k|        };
 1624|   367k|        for c in chars {
 1625|   358k|            if !is_unreserved_or_sub_delims(c) && c != ':' {
 1626|  8.74k|                return self.parse_error(IriParseErrorKind::InvalidHostCharacter(c));
 1627|   349k|            }
 1628|       |        }
 1629|       |
 1630|  9.18k|        Ok(())
 1631|  62.9k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCsiVhMQ2GRKjW_5oxrdf:
 1245|   345k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|   345k|        if self.input.starts_with('/') {
 1247|   313k|            self.input.next();
 1248|   313k|            self.output.push('/');
 1249|   313k|            self.parse_authority()
 1250|       |        } else {
 1251|  31.2k|            self.output_positions.authority_end = self.output.len() - 1;
 1252|  31.2k|            self.parse_path()
 1253|       |        }
 1254|   345k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCsiVhMQ2GRKjW_5oxrdf:
 1174|  2.55M|    fn parse(
 1175|  2.55M|        iri: &'a str,
 1176|  2.55M|        base: Option<IriRef<&'a str>>,
 1177|  2.55M|        output: &'a mut O,
 1178|  2.55M|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|  2.55M|        let mut parser = Self {
 1180|  2.55M|            iri,
 1181|  2.55M|            base,
 1182|  2.55M|            input: ParserInput {
 1183|  2.55M|                value: iri.chars(),
 1184|  2.55M|                position: 0,
 1185|  2.55M|            },
 1186|  2.55M|            output,
 1187|  2.55M|            output_positions: IriElementsPositions {
 1188|  2.55M|                scheme_end: 0,
 1189|  2.55M|                authority_end: 0,
 1190|  2.55M|                path_end: 0,
 1191|  2.55M|                query_end: 0,
 1192|  2.55M|            },
 1193|  2.55M|            input_scheme_end: 0,
 1194|  2.55M|        };
 1195|  2.55M|        parser.parse_scheme_start()?;
 1196|  2.14M|        Ok(parser.output_positions)
 1197|  2.55M|    }
_RNvMsp_Cs8SDT0Q3242W_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE10into_innerCsiVhMQ2GRKjW_5oxrdf:
  665|  1.97M|    pub fn into_inner(self) -> T {
  666|  1.97M|        self.0.into_inner()
  667|  1.97M|    }
_RNvMsp_Cs8SDT0Q3242W_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE5parseCsiVhMQ2GRKjW_5oxrdf:
  556|  2.55M|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|  2.55M|        IriRef::parse(iri)?.try_into()
  558|  2.55M|    }
_RNvXsV_Cs8SDT0Q3242W_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringEINtNtCscdEvteftVc2_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsiVhMQ2GRKjW_5oxrdf:
  968|  2.14M|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  969|  2.14M|        if iri.is_absolute() {
  970|  1.97M|            Ok(Self(iri))
  971|       |        } else {
  972|   172k|            Err(IriParseError {
  973|   172k|                kind: IriParseErrorKind::NoScheme,
  974|   172k|            })
  975|       |        }
  976|  2.14M|    }
_RNvMs10_Cs8SDT0Q3242W_5oxiriNtB6_11ParserInput11starts_withCsiVhMQ2GRKjW_5oxrdf:
 1156|  3.18M|    fn starts_with(&self, c: char) -> bool {
 1157|  3.18M|        self.value.as_str().starts_with(c)
 1158|  3.18M|    }
_RNvMs10_Cs8SDT0Q3242W_5oxiriNtB6_11ParserInput4nextCsiVhMQ2GRKjW_5oxrdf:
 1141|  14.8M|    fn next(&mut self) -> Option<char> {
 1142|  14.8M|        if let Some(head) = self.value.next() {
 1143|  12.5M|            self.position += head.len_utf8();
 1144|  12.5M|            Some(head)
 1145|       |        } else {
 1146|  2.26M|            None
 1147|       |        }
 1148|  14.8M|    }
_RNvMs10_Cs8SDT0Q3242W_5oxiriNtB6_11ParserInput5frontCsiVhMQ2GRKjW_5oxrdf:
 1151|  3.40M|    fn front(&self) -> Option<char> {
 1152|  3.40M|        self.value.clone().next()
 1153|  3.40M|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCsiVhMQ2GRKjW_5oxrdf:
 1092|  8.60M|    fn len(&self) -> usize {
 1093|  8.60M|        self.len
 1094|  8.60M|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsiVhMQ2GRKjW_5oxrdf:
 1072|  11.8M|    fn push(&mut self, c: char) {
 1073|  11.8M|        self.len += c.len_utf8();
 1074|  11.8M|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer5clearCsiVhMQ2GRKjW_5oxrdf:
 1082|   105k|    fn clear(&mut self) {
 1083|   105k|        self.len = 0;
 1084|   105k|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCsiVhMQ2GRKjW_5oxrdf:
 1097|  4.25M|    fn as_str(&self) -> &str {
 1098|  4.25M|        ""
 1099|  4.25M|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCsiVhMQ2GRKjW_5oxrdf:
 1087|   289k|    fn truncate(&mut self, new_len: usize) {
 1088|   289k|        self.len = new_len;
 1089|   289k|    }
_RNvXsW_Cs8SDT0Q3242W_5oxiriNtB5_13IriParseErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
 1003|   576k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1004|   576k|        match &self.kind {
 1005|   183k|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
 1006|  96.3k|            IriParseErrorKind::InvalidHostCharacter(c) => {
 1007|  96.3k|                write!(f, "Invalid character '{c}' in host")
 1008|       |            }
 1009|  25.5k|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({e})"),
 1010|  20.1k|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{c}'"),
 1011|   196k|            IriParseErrorKind::InvalidIriCodePoint(c) => {
 1012|   196k|                write!(f, "Invalid IRI code point '{c}'")
 1013|       |            }
 1014|  55.2k|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
 1015|  55.2k|                f,
 1016|  55.2k|                "Invalid IRI percent encoding '{}'",
 1017|  55.2k|                cs.iter().flatten().cloned().collect::<String>()
 1018|  55.2k|            ),
 1019|       |        }
 1020|   576k|    }
_RNvCs8SDT0Q3242W_5oxiri28is_iunreserved_or_sub_delims:
 1634|  3.70M|fn is_iunreserved_or_sub_delims(c: char) -> bool {
 1635|  3.70M|    matches!(c,
 1636|  1.13M|        'a'..='z'
 1637|  1.15M|        | 'A'..='Z'
 1638|  1.04M|        | '0'..='9'
 1639|       |        | '!'
 1640|       |        | '$'
 1641|       |        | '&'
 1642|       |        | '\''
 1643|       |        | '('
 1644|       |        | ')'
 1645|       |        | '*'
 1646|       |        | '+'
 1647|       |        | ','
 1648|       |        | '-'
 1649|       |        | '.'
 1650|       |        | ';'
 1651|       |        | '='
 1652|       |        | '_'
 1653|       |        | '~'
 1654|   175k|        | '\u{A0}'..='\u{D7FF}'
 1655|  36.3k|        | '\u{F900}'..='\u{FDCF}'
 1656|  36.1k|        | '\u{FDF0}'..='\u{FFEF}'
 1657|  36.1k|        | '\u{10000}'..='\u{1FFFD}'
 1658|  36.1k|        | '\u{20000}'..='\u{2FFFD}'
 1659|  36.1k|        | '\u{30000}'..='\u{3FFFD}'
 1660|  36.0k|        | '\u{40000}'..='\u{4FFFD}'
 1661|  36.0k|        | '\u{50000}'..='\u{5FFFD}'
 1662|  36.0k|        | '\u{60000}'..='\u{6FFFD}'
 1663|  36.0k|        | '\u{70000}'..='\u{7FFFD}'
 1664|  36.0k|        | '\u{80000}'..='\u{8FFFD}'
 1665|  36.0k|        | '\u{90000}'..='\u{9FFFD}'
 1666|  36.0k|        | '\u{A0000}'..='\u{AFFFD}'
 1667|  36.0k|        | '\u{B0000}'..='\u{BFFFD}'
 1668|  35.9k|        | '\u{C0000}'..='\u{CFFFD}'
 1669|  29.5k|        | '\u{D0000}'..='\u{DFFFD}'
 1670|  28.7k|        | '\u{E1000}'..='\u{EFFFD}'
 1671|       |    )
 1672|  3.70M|}
_RNvCs8SDT0Q3242W_5oxiri27is_unreserved_or_sub_delims:
 1674|   358k|fn is_unreserved_or_sub_delims(c: char) -> bool {
 1675|   358k|    matches!(c,
 1676|  22.9k|        'a'..='z'
 1677|   101k|        | 'A'..='Z'
 1678|  75.2k|        | '0'..='9'
 1679|       |        | '!'
 1680|       |        | '$'
 1681|       |        | '&'
 1682|       |        | '\''
 1683|       |        | '('
 1684|       |        | ')'
 1685|       |        | '*'
 1686|       |        | '+'
 1687|       |        | ','
 1688|       |        | '-'
 1689|       |        | '.'
 1690|       |        | ';'
 1691|       |        | '='
 1692|       |        | '_'
 1693|       |        | '~'
 1694|       |    )
 1695|   358k|}

_RNvXNtCsdelFS9W8VVu_9thiserror7displayRNtNtCsiVhMQ2GRKjW_5oxrdf10blank_node21BlankNodeIdParseErrorNtB2_9AsDisplay10as_displayBF_:
   19|    639|    fn as_display(&'a self) -> Self::Target {
   20|    639|        *self
   21|    639|    }
_RNvXNtCsdelFS9W8VVu_9thiserror7displayRNtNtCs3OstG5Tqy1X_5alloc6string6StringNtB2_9AsDisplay10as_displayCsiVhMQ2GRKjW_5oxrdf:
   19|  4.01k|    fn as_display(&'a self) -> Self::Target {
   20|  4.01k|        *self
   21|  4.01k|    }
_RNvXNtCsdelFS9W8VVu_9thiserror7displayRNtCs8SDT0Q3242W_5oxiri13IriParseErrorNtB2_9AsDisplay10as_displayCsiVhMQ2GRKjW_5oxrdf:
   19|  3.19k|    fn as_display(&'a self) -> Self::Target {
   20|  3.19k|        *self
   21|  3.19k|    }
_RNvXNtCsdelFS9W8VVu_9thiserror7displayRNtCsaOqqenhRLQf_10oxilangtag21LanguageTagParseErrorNtB2_9AsDisplay10as_displayCsiVhMQ2GRKjW_5oxrdf:
   19|    177|    fn as_display(&'a self) -> Self::Target {
   20|    177|        *self
   21|    177|    }
_RNvXNtCsdelFS9W8VVu_9thiserror7displayRReNtB2_9AsDisplay10as_displayCskupW9u3pVUS_12oxsdatatypes:
   19|  9.23k|    fn as_display(&'a self) -> Self::Target {
   20|  9.23k|        *self
   21|  9.23k|    }

_RINvCsjjjxbQDSpyn_6nquads5parseARShj1_EB2_:
    9|  42.7k|fn parse<'a>(
   10|  42.7k|    chunks: impl IntoIterator<Item = &'a [u8]>,
   11|  42.7k|    unchecked: bool,
   12|  42.7k|) -> (Vec<Quad>, Vec<String>) {
   13|  42.7k|    let mut quads = Vec::new();
   14|  42.7k|    let mut errors = Vec::new();
   15|  42.7k|    let mut parser = NQuadsParser::new().with_quoted_triples();
   16|  42.7k|    if unchecked {
   17|      0|        parser = parser.unchecked();
   18|  42.7k|    }
   19|  42.7k|    let mut parser = parser.low_level();
   20|  85.5k|    for chunk in chunks {
   21|  42.7k|        parser.extend_from_slice(chunk);
   22|  4.95M|        while let Some(result) = parser.parse_next() {
   23|  4.91M|            match result {
   24|   112k|                Ok(quad) => quads.push(quad),
   25|  4.79M|                Err(error) => errors.push(error.to_string()),
   26|       |            }
   27|       |        }
   28|       |    }
   29|  42.7k|    parser.end();
   30|  82.3k|    while let Some(result) = parser.parse_next() {
   31|  39.5k|        match result {
   32|    933|            Ok(quad) => quads.push(quad),
   33|  38.6k|            Err(error) => errors.push(error.to_string()),
   34|       |        }
   35|       |    }
   36|  42.7k|    assert!(parser.is_end());
   37|  42.7k|    (quads, errors)
   38|  42.7k|}
_RINvCsjjjxbQDSpyn_6nquads5parseINtNtNtCscdEvteftVc2_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_run0EEB2_:
    9|  42.7k|fn parse<'a>(
   10|  42.7k|    chunks: impl IntoIterator<Item = &'a [u8]>,
   11|  42.7k|    unchecked: bool,
   12|  42.7k|) -> (Vec<Quad>, Vec<String>) {
   13|  42.7k|    let mut quads = Vec::new();
   14|  42.7k|    let mut errors = Vec::new();
   15|  42.7k|    let mut parser = NQuadsParser::new().with_quoted_triples();
   16|  42.7k|    if unchecked {
   17|      0|        parser = parser.unchecked();
   18|  42.7k|    }
   19|  42.7k|    let mut parser = parser.low_level();
   20|  5.67M|    for chunk in chunks {
   21|  5.63M|        parser.extend_from_slice(chunk);
   22|  10.5M|        while let Some(result) = parser.parse_next() {
   23|  4.91M|            match result {
   24|   112k|                Ok(quad) => quads.push(quad),
   25|  4.79M|                Err(error) => errors.push(error.to_string()),
   26|       |            }
   27|       |        }
   28|       |    }
   29|  42.7k|    parser.end();
   30|  82.3k|    while let Some(result) = parser.parse_next() {
   31|  39.5k|        match result {
   32|    933|            Ok(quad) => quads.push(quad),
   33|  38.6k|            Err(error) => errors.push(error.to_string()),
   34|       |        }
   35|       |    }
   36|  42.7k|    assert!(parser.is_end());
   37|  42.7k|    (quads, errors)
   38|  42.7k|}
_RINvCsjjjxbQDSpyn_6nquads5parseINtNtNtCscdEvteftVc2_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_runs0_0EEB2_:
    9|    347|fn parse<'a>(
   10|    347|    chunks: impl IntoIterator<Item = &'a [u8]>,
   11|    347|    unchecked: bool,
   12|    347|) -> (Vec<Quad>, Vec<String>) {
   13|    347|    let mut quads = Vec::new();
   14|    347|    let mut errors = Vec::new();
   15|    347|    let mut parser = NQuadsParser::new().with_quoted_triples();
   16|    347|    if unchecked {
   17|    347|        parser = parser.unchecked();
   18|    347|    }
   19|    347|    let mut parser = parser.low_level();
   20|  5.87k|    for chunk in chunks {
   21|  5.53k|        parser.extend_from_slice(chunk);
   22|  5.62k|        while let Some(result) = parser.parse_next() {
   23|     95|            match result {
   24|     95|                Ok(quad) => quads.push(quad),
   25|      0|                Err(error) => errors.push(error.to_string()),
   26|       |            }
   27|       |        }
   28|       |    }
   29|    347|    parser.end();
   30|    407|    while let Some(result) = parser.parse_next() {
   31|     60|        match result {
   32|     60|            Ok(quad) => quads.push(quad),
   33|      0|            Err(error) => errors.push(error.to_string()),
   34|       |        }
   35|       |    }
   36|    347|    assert!(parser.is_end());
   37|    347|    (quads, errors)
   38|    347|}
_RNCNvNvCsjjjxbQDSpyn_6nquads1__19___libfuzzer_sys_run0B5_:
   42|  27.0M|    let (quads, errors) = parse(data.split(|c| *c == 0xFF), false);
_RNCNvNvCsjjjxbQDSpyn_6nquads1__19___libfuzzer_sys_runs_0B5_:
   47|  27.0M|        .filter(|c| *c != 0xFF)
_RNCNvNvCsjjjxbQDSpyn_6nquads1__19___libfuzzer_sys_runs0_0B5_:
   56|  28.5k|        let (quads_unchecked, errors_unchecked) = parse(data.split(|c| *c == 0xFF), true);
_RNCNvNvCsjjjxbQDSpyn_6nquads1__19___libfuzzer_sys_runs2_0B5_:
   88|  21.3k|            .map_err(|e| e.to_string())
_RNCNvNvCsjjjxbQDSpyn_6nquads1__19___libfuzzer_sys_runs3_0B5_:
   89|  14.1k|            .and_then(|d| {
   90|  14.1k|                d.split('\n')
   91|  14.1k|                    .filter(|l| !l.trim().is_empty())
   92|  14.1k|                    .map(Quad::from_str)
   93|  14.1k|                    .collect::<Result<Vec<_>, _>>()
   94|  14.1k|                    .map_err(|e| e.to_string())
   95|  14.1k|            }) {
_RNCNCNvNvCsjjjxbQDSpyn_6nquads1__19___libfuzzer_sys_runs3_00B7_:
   91|  26.0k|                    .filter(|l| !l.trim().is_empty())
_RNCNCNvNvCsjjjxbQDSpyn_6nquads1__19___libfuzzer_sys_runs3_0s_0B7_:
   94|  13.2k|                    .map_err(|e| e.to_string())

_RNvMNtCsiVhMQ2GRKjW_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCsjjjxbQDSpyn_6nquads:
   88|  42.5k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|  42.5k|        BlankNodeRef(match &self.0 {
   90|  7.16k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|  35.3k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|  35.3k|                id: *id,
   93|  35.3k|                str: str.as_str(),
   94|  35.3k|            },
   95|       |        })
   96|  42.5k|    }
_RNvMs1_NtCsiVhMQ2GRKjW_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCsjjjxbQDSpyn_6nquads:
  179|  42.5k|    pub const fn as_str(self) -> &'a str {
  180|  42.5k|        match self.0 {
  181|  7.16k|            BlankNodeRefContent::Named(id) => id,
  182|  35.3k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  183|       |        }
  184|  42.5k|    }
_RNvMs7_NtCsiVhMQ2GRKjW_5oxrdf10blank_nodeNtB5_5IdStr6as_strCsjjjxbQDSpyn_6nquads:
  265|  35.3k|    fn as_str(&self) -> &str {
  266|  35.3k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|  35.3k|        str::from_utf8(&self.0[..len]).unwrap()
  268|  35.3k|    }
_RNvXs2_NtCsiVhMQ2GRKjW_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtCsjjjxbQDSpyn_6nquads:
  220|  42.5k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  221|  42.5k|        write!(f, "_:{}", self.as_str())
  222|  42.5k|    }
_RNvMNtCsiVhMQ2GRKjW_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idCs7ZOrRad3M6Z_5oxttl:
   62|   212k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|   212k|        Self(BlankNodeContent::Anonymous {
   64|   212k|            id: id.to_ne_bytes(),
   65|   212k|            str: IdStr::new(id),
   66|   212k|        })
   67|   212k|    }
_RNvMs7_NtCsiVhMQ2GRKjW_5oxrdf10blank_nodeNtB5_5IdStr3newCs7ZOrRad3M6Z_5oxttl:
  258|   212k|    fn new(id: u128) -> Self {
  259|   212k|        let mut str = [0; 32];
  260|   212k|        write!(&mut str[..], "{id:x}").unwrap();
  261|   212k|        Self(str)
  262|   212k|    }
_RNvNtCsiVhMQ2GRKjW_5oxrdf10blank_node13to_integer_idCs7ZOrRad3M6Z_5oxttl:
  331|   306k|fn to_integer_id(id: &str) -> Option<u128> {
  332|   306k|    let digits = id.as_bytes();
  333|   306k|    let mut value: u128 = 0;
  334|   306k|    if let None | Some(b'0') = digits.first() {
  335|  12.8k|        return None; // No empty string or leading zeros
  336|   293k|    }
  337|  2.92M|    for digit in digits {
  338|  2.70M|        value = value.checked_mul(16)?.checked_add(
  339|  2.70M|            match *digit {
  340|  2.69M|                b'0'..=b'9' => digit - b'0',
  341|  2.42M|                b'a'..=b'f' => digit - b'a' + 10,
  342|  74.1k|                _ => return None,
  343|       |            }
  344|  2.62M|            .into(),
  345|      0|        )?;
  346|       |    }
  347|   212k|    Some(value)
  348|   306k|}
_RINvMNtCsiVhMQ2GRKjW_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedReECs7ZOrRad3M6Z_5oxttl:
   49|   306k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   50|   306k|        let id = id.into();
   51|   306k|        if let Some(numerical_id) = to_integer_id(&id) {
   52|   212k|            Self::new_from_unique_id(numerical_id)
   53|       |        } else {
   54|  94.2k|            Self(BlankNodeContent::Named(id))
   55|       |        }
   56|   306k|    }
_RINvMNtCsiVhMQ2GRKjW_5oxrdf10blank_nodeNtB3_9BlankNode3newReEB5_:
   36|  4.13k|    pub fn new(id: impl Into<String>) -> Result<Self, BlankNodeIdParseError> {
   37|  4.13k|        let id = id.into();
   38|  4.13k|        validate_blank_node_identifier(&id)?;
   39|  3.50k|        Ok(Self::new_unchecked(id))
   40|  4.13k|    }
_RINvMNtCsiVhMQ2GRKjW_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   49|  3.50k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   50|  3.50k|        let id = id.into();
   51|  3.50k|        if let Some(numerical_id) = to_integer_id(&id) {
   52|  1.56k|            Self::new_from_unique_id(numerical_id)
   53|       |        } else {
   54|  1.93k|            Self(BlankNodeContent::Named(id))
   55|       |        }
   56|  3.50k|    }
_RNCNvMs7_NtCsiVhMQ2GRKjW_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  266|   432k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
_RNvMNtCsiVhMQ2GRKjW_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idB4_:
   62|  1.56k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|  1.56k|        Self(BlankNodeContent::Anonymous {
   64|  1.56k|            id: id.to_ne_bytes(),
   65|  1.56k|            str: IdStr::new(id),
   66|  1.56k|        })
   67|  1.56k|    }
_RNvMNtCsiVhMQ2GRKjW_5oxrdf10blank_nodeNtB2_9BlankNode6as_refB4_:
   88|  1.96k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|  1.96k|        BlankNodeRef(match &self.0 {
   90|  1.17k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|    794|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|    794|                id: *id,
   93|    794|                str: str.as_str(),
   94|    794|            },
   95|       |        })
   96|  1.96k|    }
_RNvMs1_NtCsiVhMQ2GRKjW_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strB7_:
  179|  1.96k|    pub const fn as_str(self) -> &'a str {
  180|  1.96k|        match self.0 {
  181|  1.17k|            BlankNodeRefContent::Named(id) => id,
  182|    794|            BlankNodeRefContent::Anonymous { str, .. } => str,
  183|       |        }
  184|  1.96k|    }
_RNvXs2_NtCsiVhMQ2GRKjW_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtB7_:
  220|  1.96k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  221|  1.96k|        write!(f, "_:{}", self.as_str())
  222|  1.96k|    }
_RNvMs7_NtCsiVhMQ2GRKjW_5oxrdf10blank_nodeNtB5_5IdStr3newB7_:
  258|  1.56k|    fn new(id: u128) -> Self {
  259|  1.56k|        let mut str = [0; 32];
  260|  1.56k|        write!(&mut str[..], "{id:x}").unwrap();
  261|  1.56k|        Self(str)
  262|  1.56k|    }
_RNvMs7_NtCsiVhMQ2GRKjW_5oxrdf10blank_nodeNtB5_5IdStr6as_strB7_:
  265|    794|    fn as_str(&self) -> &str {
  266|    794|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|    794|        str::from_utf8(&self.0[..len]).unwrap()
  268|    794|    }
_RNvNtCsiVhMQ2GRKjW_5oxrdf10blank_node30validate_blank_node_identifier:
  271|  4.13k|fn validate_blank_node_identifier(id: &str) -> Result<(), BlankNodeIdParseError> {
  272|  4.13k|    let mut chars = id.chars();
  273|  4.13k|    let front = chars.next().ok_or(BlankNodeIdParseError)?;
  274|  3.98k|    match front {
  275|  3.94k|        '0'..='9'
  276|       |        | '_'
  277|       |        | ':'
  278|  3.36k|        | 'A'..='Z'
  279|  3.15k|        | 'a'..='z'
  280|     50|        | '\u{00C0}'..='\u{00D6}'
  281|     50|        | '\u{00D8}'..='\u{00F6}'
  282|     50|        | '\u{00F8}'..='\u{02FF}'
  283|     49|        | '\u{0370}'..='\u{037D}'
  284|     49|        | '\u{037F}'..='\u{1FFF}'
  285|     32|        | '\u{200C}'..='\u{200D}'
  286|     31|        | '\u{2070}'..='\u{218F}'
  287|     30|        | '\u{2C00}'..='\u{2FEF}'
  288|     30|        | '\u{3001}'..='\u{D7FF}'
  289|     20|        | '\u{F900}'..='\u{FDCF}'
  290|     20|        | '\u{FDF0}'..='\u{FFFD}'
  291|  3.91k|        | '\u{10000}'..='\u{EFFFF}' => (),
  292|     69|        _ => return Err(BlankNodeIdParseError),
  293|       |    }
  294|  43.9k|    for c in chars {
  295|  40.4k|        match c {
  296|       |            '.' // validated later
  297|       |            | '-'
  298|  35.5k|            | '0'..='9'
  299|       |            | '\u{00B7}'
  300|  2.54k|            | '\u{0300}'..='\u{036F}'
  301|  2.48k|            | '\u{203F}'..='\u{2040}'
  302|       |            | '_'
  303|       |            | ':'
  304|  33.9k|            | 'A'..='Z'
  305|  29.2k|            | 'a'..='z'
  306|  2.55k|            | '\u{00C0}'..='\u{00D6}'
  307|  2.55k|            | '\u{00D8}'..='\u{00F6}'
  308|  2.55k|            | '\u{00F8}'..='\u{02FF}'
  309|  2.54k|            | '\u{0370}'..='\u{037D}'
  310|  2.54k|            | '\u{037F}'..='\u{1FFF}'
  311|  2.51k|            | '\u{200C}'..='\u{200D}'
  312|  2.48k|            | '\u{2070}'..='\u{218F}'
  313|  2.48k|            | '\u{2C00}'..='\u{2FEF}'
  314|  2.48k|            | '\u{3001}'..='\u{D7FF}'
  315|     59|            | '\u{F900}'..='\u{FDCF}'
  316|     59|            | '\u{FDF0}'..='\u{FFFD}'
  317|  40.0k|            | '\u{10000}'..='\u{EFFFF}' => (),
  318|    415|            _ => return Err(BlankNodeIdParseError),
  319|       |        }
  320|       |    }
  321|       |
  322|       |    // Could not end with a dot
  323|  3.50k|    if id.ends_with('.') {
  324|      0|        Err(BlankNodeIdParseError)
  325|       |    } else {
  326|  3.50k|        Ok(())
  327|       |    }
  328|  4.13k|}
_RNvNtCsiVhMQ2GRKjW_5oxrdf10blank_node13to_integer_idB3_:
  331|  3.50k|fn to_integer_id(id: &str) -> Option<u128> {
  332|  3.50k|    let digits = id.as_bytes();
  333|  3.50k|    let mut value: u128 = 0;
  334|  3.50k|    if let None | Some(b'0') = digits.first() {
  335|     25|        return None; // No empty string or leading zeros
  336|  3.47k|    }
  337|  13.4k|    for digit in digits {
  338|  11.8k|        value = value.checked_mul(16)?.checked_add(
  339|  11.8k|            match *digit {
  340|  11.2k|                b'0'..=b'9' => digit - b'0',
  341|  8.96k|                b'a'..=b'f' => digit - b'a' + 10,
  342|  1.89k|                _ => return None,
  343|       |            }
  344|  9.96k|            .into(),
  345|      0|        )?;
  346|       |    }
  347|  1.56k|    Some(value)
  348|  3.50k|}
_RNvXsG_NtCsiVhMQ2GRKjW_5oxrdf10blank_nodeNtB5_21BlankNodeIdParseErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
  351|    639|#[derive(Debug, thiserror::Error)]

_RNvMNtCsiVhMQ2GRKjW_5oxrdf7literalNtB2_7Literal6as_refCsjjjxbQDSpyn_6nquads:
  129|  65.8k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|  65.8k|        LiteralRef(match &self.0 {
  131|  9.32k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|  46.2k|            LiteralContent::LanguageTaggedString { value, language } => {
  133|  46.2k|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|  10.3k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|  10.3k|                value,
  137|  10.3k|                datatype: datatype.as_ref(),
  138|  10.3k|            },
  139|       |        })
  140|  65.8k|    }
_RNvXsu_NtCsiVhMQ2GRKjW_5oxrdf7literalNtB5_10LiteralRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtCsjjjxbQDSpyn_6nquads:
  565|  65.8k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  566|  65.8k|        match self.0 {
  567|  9.32k|            LiteralRefContent::String(value) => print_quoted_str(value, f),
  568|  46.2k|            LiteralRefContent::LanguageTaggedString { value, language } => {
  569|  46.2k|                print_quoted_str(value, f)?;
  570|  46.2k|                write!(f, "@{language}")
  571|       |            }
  572|  10.3k|            LiteralRefContent::TypedLiteral { value, datatype } => {
  573|  10.3k|                print_quoted_str(value, f)?;
  574|  10.3k|                write!(f, "^^{datatype}")
  575|       |            }
  576|       |        }
  577|  65.8k|    }
_RINvMNtCsiVhMQ2GRKjW_5oxrdf7literalNtB3_7Literal18new_simple_literalRNtNtCs3OstG5Tqy1X_5alloc6string6StringECs7ZOrRad3M6Z_5oxttl:
   47|    392|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|    392|        Self(LiteralContent::String(value.into()))
   49|    392|    }
_RNvMNtCsiVhMQ2GRKjW_5oxrdf7literalNtB2_7Literal6as_refB4_:
  129|  1.00k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|  1.00k|        LiteralRef(match &self.0 {
  131|    601|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|    384|            LiteralContent::LanguageTaggedString { value, language } => {
  133|    384|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|     18|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|     18|                value,
  137|     18|                datatype: datatype.as_ref(),
  138|     18|            },
  139|       |        })
  140|  1.00k|    }
_RNvXsu_NtCsiVhMQ2GRKjW_5oxrdf7literalNtB5_10LiteralRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtB7_:
  565|  1.00k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  566|  1.00k|        match self.0 {
  567|    601|            LiteralRefContent::String(value) => print_quoted_str(value, f),
  568|    384|            LiteralRefContent::LanguageTaggedString { value, language } => {
  569|    384|                print_quoted_str(value, f)?;
  570|    384|                write!(f, "@{language}")
  571|       |            }
  572|     18|            LiteralRefContent::TypedLiteral { value, datatype } => {
  573|     18|                print_quoted_str(value, f)?;
  574|     18|                write!(f, "^^{datatype}")
  575|       |            }
  576|       |        }
  577|  1.00k|    }
_RINvMNtCsiVhMQ2GRKjW_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   47|  31.6k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|  31.6k|        Self(LiteralContent::String(value.into()))
   49|  31.6k|    }
_RINvMNtCsiVhMQ2GRKjW_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   53|  37.7k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|  37.7k|        let value = value.into();
   55|  37.7k|        let datatype = datatype.into();
   56|  37.7k|        Self(if datatype == xsd::STRING {
   57|  2.70k|            LiteralContent::String(value)
   58|       |        } else {
   59|  35.0k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|  37.7k|    }
_RINvMNtCsiVhMQ2GRKjW_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   53|  1.10k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|  1.10k|        let value = value.into();
   55|  1.10k|        let datatype = datatype.into();
   56|  1.10k|        Self(if datatype == xsd::STRING {
   57|      0|            LiteralContent::String(value)
   58|       |        } else {
   59|  1.10k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|  1.10k|    }
_RINvMNtCsiVhMQ2GRKjW_5oxrdf7literalNtB3_7Literal27new_language_tagged_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringReEB5_:
   65|  2.71k|    pub fn new_language_tagged_literal(
   66|  2.71k|        value: impl Into<String>,
   67|  2.71k|        language: impl Into<String>,
   68|  2.71k|    ) -> Result<Self, LanguageTagParseError> {
   69|  2.71k|        let mut language = language.into();
   70|  2.71k|        language.make_ascii_lowercase();
   71|  2.71k|        Ok(Self::new_language_tagged_literal_unchecked(
   72|  2.71k|            value,
   73|  2.71k|            LanguageTag::parse(language)?.into_inner(),
   74|       |        ))
   75|  2.71k|    }
_RINvMNtCsiVhMQ2GRKjW_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringB1n_EB5_:
   85|   162k|    pub fn new_language_tagged_literal_unchecked(
   86|   162k|        value: impl Into<String>,
   87|   162k|        language: impl Into<String>,
   88|   162k|    ) -> Self {
   89|   162k|        Self(LiteralContent::LanguageTaggedString {
   90|   162k|            value: value.into(),
   91|   162k|            language: language.into(),
   92|   162k|        })
   93|   162k|    }
_RINvNtCsiVhMQ2GRKjW_5oxrdf7literal16print_quoted_strNtNtCscdEvteftVc2_4core3fmt9FormatterEB4_:
  616|  66.8k|pub fn print_quoted_str(string: &str, f: &mut impl Write) -> fmt::Result {
  617|  66.8k|    f.write_char('"')?;
  618|   122k|    for c in string.chars() {
  619|   122k|        match c {
  620|  1.11k|            '\u{08}' => f.write_str("\\b"),
  621|  2.82k|            '\t' => f.write_str("\\t"),
  622|  3.39k|            '\n' => f.write_str("\\n"),
  623|  2.85k|            '\u{0C}' => f.write_str("\\f"),
  624|    775|            '\r' => f.write_str("\\r"),
  625|  2.48k|            '"' => f.write_str("\\\""),
  626|    204|            '\\' => f.write_str("\\\\"),
  627|   109k|            '\0'..='\u{1F}' | '\u{7F}' => write!(f, "\\u{:04X}", u32::from(c)),
  628|  96.1k|            _ => f.write_char(c),
  629|      0|        }?;
  630|       |    }
  631|  66.8k|    f.write_char('"')
  632|  66.8k|}

_RNvMNtCsiVhMQ2GRKjW_5oxrdf10named_nodeNtB2_9NamedNode6as_refCsjjjxbQDSpyn_6nquads:
   54|   256k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|   256k|        NamedNodeRef::new_unchecked(&self.iri)
   56|   256k|    }
_RNvMs4_NtCsiVhMQ2GRKjW_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCsjjjxbQDSpyn_6nquads:
  128|   256k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   256k|        Self { iri }
  130|   256k|    }
_RNvMs4_NtCsiVhMQ2GRKjW_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCsjjjxbQDSpyn_6nquads:
  133|   256k|    pub const fn as_str(self) -> &'a str {
  134|   256k|        self.iri
  135|   256k|    }
_RNvXs5_NtCsiVhMQ2GRKjW_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtCsjjjxbQDSpyn_6nquads:
  145|   256k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|   256k|        write!(f, "<{}>", self.as_str())
  147|   256k|    }
_RINvMNtCsiVhMQ2GRKjW_5oxrdf10named_nodeNtB3_9NamedNode3newReEB5_:
   24|  39.0k|    pub fn new(iri: impl Into<String>) -> Result<Self, IriParseError> {
   25|  39.0k|        Ok(Self::new_from_iri(Iri::parse(iri.into())?))
   26|  39.0k|    }
_RINvMNtCsiVhMQ2GRKjW_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   39|  1.97M|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  1.97M|        Self { iri: iri.into() }
   41|  1.97M|    }
_RINvMNtCsiVhMQ2GRKjW_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|  1.10k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  1.10k|        Self { iri: iri.into() }
   41|  1.10k|    }
_RNvMNtCsiVhMQ2GRKjW_5oxrdf10named_nodeNtB2_9NamedNode12new_from_iriB4_:
   29|  35.8k|    pub(crate) fn new_from_iri(iri: Iri<String>) -> Self {
   30|  35.8k|        Self::new_unchecked(iri.into_inner())
   31|  35.8k|    }
_RNvMNtCsiVhMQ2GRKjW_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|  38.8k|    pub fn as_str(&self) -> &str {
   45|  38.8k|        self.iri.as_str()
   46|  38.8k|    }
_RNvMNtCsiVhMQ2GRKjW_5oxrdf10named_nodeNtB2_9NamedNode6as_refB4_:
   54|  5.12k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  5.12k|        NamedNodeRef::new_unchecked(&self.iri)
   56|  5.12k|    }
_RNvMs4_NtCsiVhMQ2GRKjW_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedB7_:
  128|  5.12k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  5.12k|        Self { iri }
  130|  5.12k|    }
_RNvMs4_NtCsiVhMQ2GRKjW_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|  43.9k|    pub const fn as_str(self) -> &'a str {
  134|  43.9k|        self.iri
  135|  43.9k|    }
_RNvMs4_NtCsiVhMQ2GRKjW_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|  1.10k|    pub fn into_owned(self) -> NamedNode {
  139|  1.10k|        NamedNode::new_unchecked(self.iri)
  140|  1.10k|    }
_RNvXs5_NtCsiVhMQ2GRKjW_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtB7_:
  145|  5.12k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|  5.12k|        write!(f, "<{}>", self.as_str())
  147|  5.12k|    }
_RNvXs6_NtCsiVhMQ2GRKjW_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCscdEvteftVc2_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|  1.10k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|  1.10k|        node.into_owned()
  154|  1.10k|    }
_RNvXs9_NtCsiVhMQ2GRKjW_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCscdEvteftVc2_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|  38.8k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|  38.8k|        self.as_str() == other.as_str()
  175|  38.8k|    }

_RNvXs3_NtCsiVhMQ2GRKjW_5oxrdf6parserNtNtB7_6triple4QuadNtNtNtCscdEvteftVc2_4core3str6traits7FromStr8from_str:
  186|  23.2k|    fn from_str(s: &str) -> Result<Self, Self::Err> {
  187|  23.2k|        let (triple, left) = read_triple(s, 0)?;
  188|  11.1k|        if matches!(left.trim(), "" | ".") {
  189|  6.36k|            return Ok(triple.in_graph(GraphName::DefaultGraph));
  190|  4.79k|        }
  191|  4.79k|        let (graph_name, left) = read_term(left, 0)?;
  192|  3.87k|        if !matches!(left.trim(), "" | ".") {
  193|    213|            return Err(Self::Err::msg("Invalid triple serialization"));
  194|  3.66k|        }
  195|  3.66k|        Ok(triple.in_graph(match graph_name {
  196|  3.50k|            Term::NamedNode(graph_name) => GraphName::from(graph_name),
  197|    128|            Term::BlankNode(graph_name) => GraphName::from(graph_name),
  198|       |            Term::Literal(_) => {
  199|     26|                return Err(TermParseError::msg(
  200|     26|                    "Literals are not allowed in graph name position",
  201|     26|                ));
  202|       |            }
  203|       |            #[cfg(feature = "rdf-star")]
  204|       |            Term::Triple(_) => {
  205|      2|                return Err(TermParseError::msg(
  206|      2|                    "Triple terms are not allowed in graph name position",
  207|      2|                ));
  208|       |            }
  209|       |        }))
  210|  23.2k|    }
_RNCNvNtCsiVhMQ2GRKjW_5oxrdf6parser15read_named_node0B5_:
  248|    426|            .ok_or_else(|| TermParseError::msg("Named node serialization should end with a >"))?;
_RNCNvNtCsiVhMQ2GRKjW_5oxrdf6parser15read_named_nodes_0B5_:
  251|  3.19k|        let term = NamedNode::new(value).map_err(|error| {
  252|  3.19k|            TermParseError(TermParseErrorKind::Iri {
  253|  3.19k|                value: value.to_owned(),
  254|  3.19k|                error,
  255|  3.19k|            })
  256|  3.19k|        })?;
_RNCNvNtCsiVhMQ2GRKjW_5oxrdf6parser15read_blank_node0B5_:
  269|  57.3k|            .find(|v: char| {
  270|  57.3k|                v.is_whitespace()
  271|  57.0k|                    || matches!(v, '<' | '?' | '$' | '"' | '\'' | '>' | '@' | '^' | ':')
  272|  57.3k|            })
_RNCNvNtCsiVhMQ2GRKjW_5oxrdf6parser15read_blank_nodes_0B5_:
  282|    639|        let term = BlankNode::new(value).map_err(|error| {
  283|    639|            TermParseError(TermParseErrorKind::BlankNode {
  284|    639|                value: value.to_owned(),
  285|    639|                error,
  286|    639|            })
  287|    639|        })?;
_RNCNvNtCsiVhMQ2GRKjW_5oxrdf6parser12read_literal0B5_:
  307|   154k|                            .find(|v| !matches!(v, 'a'..='z' | 'A'..='Z' | '-'))
_RNCNvNtCsiVhMQ2GRKjW_5oxrdf6parser12read_literals_0B5_:
  312|    177|                                |error| {
  313|    177|                                    TermParseError(TermParseErrorKind::LanguageTag {
  314|    177|                                        value: language.to_owned(),
  315|    177|                                        error,
  316|    177|                                    })
  317|    177|                                },
_RNCNvNtCsiVhMQ2GRKjW_5oxrdf6parser14read_hexa_char0B5_:
  501|      3|    char::from_u32(value).ok_or_else(|| TermParseError::msg("Invalid encoded unicode code point"))
_RNvNtCsiVhMQ2GRKjW_5oxrdf6parser15read_named_node:
  243|  41.4k|fn read_named_node(s: &str) -> Result<(NamedNode, &str), TermParseError> {
  244|  41.4k|    let s = s.trim();
  245|  41.4k|    if let Some(remain) = s.strip_prefix('<') {
  246|  39.5k|        let end = remain
  247|  39.5k|            .find('>')
  248|  39.5k|            .ok_or_else(|| TermParseError::msg("Named node serialization should end with a >"))?;
  249|  39.0k|        let (value, remain) = remain.split_at(end);
  250|  39.0k|        let remain = &remain[1..];
  251|  39.0k|        let term = NamedNode::new(value).map_err(|error| {
  252|       |            TermParseError(TermParseErrorKind::Iri {
  253|       |                value: value.to_owned(),
  254|       |                error,
  255|       |            })
  256|  39.0k|        })?;
  257|  35.8k|        Ok((term, remain))
  258|       |    } else {
  259|  1.94k|        Err(TermParseError::msg(
  260|  1.94k|            "Named node serialization should start with a <",
  261|  1.94k|        ))
  262|       |    }
  263|  41.4k|}
_RNvNtCsiVhMQ2GRKjW_5oxrdf6parser15read_blank_node:
  265|  4.20k|fn read_blank_node(s: &str) -> Result<(BlankNode, &str), TermParseError> {
  266|  4.20k|    let s = s.trim();
  267|  4.20k|    if let Some(remain) = s.strip_prefix("_:") {
  268|  4.13k|        let mut end = remain
  269|  4.13k|            .find(|v: char| {
  270|       |                v.is_whitespace()
  271|       |                    || matches!(v, '<' | '?' | '$' | '"' | '\'' | '>' | '@' | '^' | ':')
  272|  4.13k|            })
  273|  4.13k|            .unwrap_or(remain.len());
  274|  4.13k|        if let Some(pos) = remain[..end].find("..") {
  275|     61|            end = pos;
  276|  4.07k|        }
  277|  4.13k|        if remain[..end].ends_with('.') {
  278|    984|            // It can't end with '.'
  279|    984|            end -= 1;
  280|  3.15k|        }
  281|  4.13k|        let (value, remain) = remain.split_at(end);
  282|  4.13k|        let term = BlankNode::new(value).map_err(|error| {
  283|       |            TermParseError(TermParseErrorKind::BlankNode {
  284|       |                value: value.to_owned(),
  285|       |                error,
  286|       |            })
  287|  4.13k|        })?;
  288|  3.50k|        Ok((term, remain))
  289|       |    } else {
  290|     64|        Err(TermParseError::msg(
  291|     64|            "Blank node serialization should start with '_:'",
  292|     64|        ))
  293|       |    }
  294|  4.20k|}
_RNvNtCsiVhMQ2GRKjW_5oxrdf6parser12read_literal:
  296|  10.9k|fn read_literal(s: &str) -> Result<(Literal, &str), TermParseError> {
  297|  10.9k|    let s = s.trim();
  298|  10.9k|    if let Some(s) = s.strip_prefix('"') {
  299|  4.16k|        let mut value = String::with_capacity(s.len());
  300|  4.16k|        let mut chars = s.chars();
  301|  60.2k|        while let Some(c) = chars.next() {
  302|  59.8k|            match c {
  303|       |                '"' => {
  304|  3.59k|                    let remain = chars.as_str();
  305|  3.59k|                    return if let Some(remain) = remain.strip_prefix('@') {
  306|  2.71k|                        let end = remain
  307|  2.71k|                            .find(|v| !matches!(v, 'a'..='z' | 'A'..='Z' | '-'))
  308|  2.71k|                            .unwrap_or(remain.len());
  309|  2.71k|                        let (language, remain) = remain.split_at(end);
  310|  2.71k|                        Ok((
  311|  2.71k|                            Literal::new_language_tagged_literal(value, language).map_err(
  312|  2.71k|                                |error| {
  313|       |                                    TermParseError(TermParseErrorKind::LanguageTag {
  314|       |                                        value: language.to_owned(),
  315|       |                                        error,
  316|       |                                    })
  317|  2.71k|                                },
  318|  2.71k|                            )?,
  319|  2.54k|                            remain,
  320|       |                        ))
  321|    877|                    } else if let Some(remain) = remain.strip_prefix("^^") {
  322|    111|                        let (datatype, remain) = read_named_node(remain)?;
  323|     76|                        Ok((Literal::new_typed_literal(value, datatype), remain))
  324|       |                    } else {
  325|    766|                        Ok((Literal::new_simple_literal(value), remain))
  326|       |                    };
  327|       |                }
  328|       |                '\\' => {
  329|  3.70k|                    if let Some(c) = chars.next() {
  330|  3.68k|                        value.push(match c {
  331|    186|                            't' => '\t',
  332|    710|                            'b' => '\u{08}',
  333|    312|                            'n' => '\n',
  334|    241|                            'r' => '\r',
  335|    200|                            'f' => '\u{0C}',
  336|    313|                            '"' => '"',
  337|    284|                            '\'' => '\'',
  338|    445|                            '\\' => '\\',
  339|    569|                            'u' => read_hexa_char(&mut chars, 4)?,
  340|    346|                            'U' => read_hexa_char(&mut chars, 8)?,
  341|     77|                            _ => return Err(TermParseError::msg("Unexpected escaped char")),
  342|       |                        })
  343|       |                    } else {
  344|     19|                        return Err(TermParseError::msg("Unexpected literal end"));
  345|       |                    }
  346|       |                }
  347|  52.5k|                _ => value.push(c),
  348|       |            }
  349|       |        }
  350|    415|        Err(TermParseError::msg("Unexpected literal end"))
  351|  6.73k|    } else if let Some(remain) = s.strip_prefix("true") {
  352|     56|        Ok((Literal::new_typed_literal("true", xsd::BOOLEAN), remain))
  353|  6.68k|    } else if let Some(remain) = s.strip_prefix("false") {
  354|     16|        Ok((Literal::new_typed_literal("false", xsd::BOOLEAN), remain))
  355|       |    } else {
  356|  6.66k|        let input = s.as_bytes();
  357|  6.66k|        if input.is_empty() {
  358|    277|            return Err(TermParseError::msg("Empty term serialization"));
  359|  6.38k|        }
  360|       |
  361|  6.38k|        let mut cursor = match input.first() {
  362|    291|            Some(b'+' | b'-') => 1,
  363|  6.09k|            _ => 0,
  364|       |        };
  365|  6.38k|        let mut with_dot = false;
  366|  6.38k|
  367|  6.38k|        let mut count_before: usize = 0;
  368|  8.41k|        while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  369|  2.03k|            count_before += 1;
  370|  2.03k|            cursor += 1;
  371|  2.03k|        }
  372|       |
  373|  6.38k|        let mut count_after: usize = 0;
  374|  6.38k|        if cursor < input.len() && input[cursor] == b'.' {
  375|  1.04k|            with_dot = true;
  376|  1.04k|            cursor += 1;
  377|  2.90k|            while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  378|  1.86k|                count_after += 1;
  379|  1.86k|                cursor += 1;
  380|  1.86k|            }
  381|  5.33k|        }
  382|       |
  383|  6.38k|        if cursor < input.len() && (input[cursor] == b'e' || input[cursor] == b'E') {
  384|    135|            cursor += 1;
  385|    135|            cursor += match input.get(cursor) {
  386|     40|                Some(b'+' | b'-') => 1,
  387|     95|                _ => 0,
  388|       |            };
  389|    135|            let mut count_exponent = 0;
  390|    845|            while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  391|    710|                count_exponent += 1;
  392|    710|                cursor += 1;
  393|    710|            }
  394|    135|            if count_exponent > 0 {
  395|     65|                Ok((Literal::new_typed_literal(s, xsd::DOUBLE), &s[cursor..]))
  396|       |            } else {
  397|     70|                Err(TermParseError::msg(
  398|     70|                    "Double serialization with an invalid exponent",
  399|     70|                ))
  400|       |            }
  401|  6.25k|        } else if with_dot {
  402|  1.04k|            if count_after > 0 {
  403|    331|                Ok((Literal::new_typed_literal(s, xsd::DECIMAL), &s[cursor..]))
  404|       |            } else {
  405|    712|                Err(TermParseError::msg(
  406|    712|                    "Decimal serialization without floating part",
  407|    712|                ))
  408|       |            }
  409|  5.20k|        } else if count_before > 0 {
  410|    636|            Ok((Literal::new_typed_literal(s, xsd::INTEGER), &s[cursor..]))
  411|       |        } else {
  412|  4.57k|            Err(TermParseError::msg("Empty integer serialization"))
  413|       |        }
  414|       |    }
  415|  10.9k|}
_RNvNtCsiVhMQ2GRKjW_5oxrdf6parser9read_term:
  417|   149k|fn read_term(s: &str, number_of_recursive_calls: usize) -> Result<(Term, &str), TermParseError> {
  418|   149k|    if number_of_recursive_calls == MAX_NUMBER_OF_NESTED_TRIPLES {
  419|      8|        return Err(TermParseError::msg(
  420|      8|            "Too many nested triples. The parser fails here to avoid a stack overflow.",
  421|      8|        ));
  422|   149k|    }
  423|   149k|    let s = s.trim();
  424|       |    #[allow(unused_variables)]
  425|   149k|    if let Some(remain) = s.strip_prefix("<<") {
  426|       |        #[cfg(feature = "rdf-star")]
  427|       |        {
  428|   108k|            let (triple, remain) = read_triple(remain, number_of_recursive_calls + 1)?;
  429|    579|            let remain = remain.trim_start();
  430|    579|            if let Some(remain) = remain.strip_prefix(">>") {
  431|    285|                Ok((triple.into(), remain))
  432|       |            } else {
  433|    294|                Err(TermParseError::msg(
  434|    294|                    "Nested triple serialization should be enclosed between << and >>",
  435|    294|                ))
  436|       |            }
  437|       |        }
  438|       |        #[cfg(not(feature = "rdf-star"))]
  439|       |        {
  440|       |            Err(TermParseError::msg("RDF-star is not supported"))
  441|       |        }
  442|  40.9k|    } else if s.starts_with('<') {
  443|  25.8k|        let (term, remain) = read_named_node(s)?;
  444|  22.8k|        Ok((term.into(), remain))
  445|  15.1k|    } else if s.starts_with('_') {
  446|  4.20k|        let (term, remain) = read_blank_node(s)?;
  447|  3.50k|        Ok((term.into(), remain))
  448|       |    } else {
  449|  10.9k|        let (term, remain) = read_literal(s)?;
  450|  4.48k|        Ok((term.into(), remain))
  451|       |    }
  452|   149k|}
_RNvNtCsiVhMQ2GRKjW_5oxrdf6parser11read_triple:
  454|   132k|fn read_triple(
  455|   132k|    s: &str,
  456|   132k|    number_of_recursive_calls: usize,
  457|   132k|) -> Result<(Triple, &str), TermParseError> {
  458|   132k|    let s = s.trim();
  459|   132k|    let (subject, remain) = read_term(s, number_of_recursive_calls + 1)?;
  460|  15.4k|    let (predicate, remain) = read_named_node(remain)?;
  461|  12.9k|    let (object, remain) = read_term(remain, number_of_recursive_calls + 1)?;
  462|       |    Ok((
  463|       |        Triple {
  464|  11.7k|            subject: match subject {
  465|  11.2k|                Term::NamedNode(s) => s.into(),
  466|    457|                Term::BlankNode(s) => s.into(),
  467|       |                Term::Literal(_) => {
  468|     50|                    return Err(TermParseError::msg(
  469|     50|                        "Literals are not allowed in subject position",
  470|     50|                    ));
  471|       |                }
  472|       |                #[cfg(feature = "rdf-star")]
  473|     49|                Term::Triple(s) => Subject::Triple(s),
  474|       |            },
  475|  11.7k|            predicate,
  476|  11.7k|            object,
  477|  11.7k|        },
  478|  11.7k|        remain,
  479|       |    ))
  480|   132k|}
_RNvNtCsiVhMQ2GRKjW_5oxrdf6parser14read_hexa_char:
  482|    915|fn read_hexa_char(input: &mut Chars<'_>, len: usize) -> Result<char, TermParseError> {
  483|    915|    let mut value = 0;
  484|    915|    for _ in 0..len {
  485|  4.88k|        if let Some(c) = input.next() {
  486|  4.86k|            value = value * 16
  487|  4.86k|                + match c {
  488|  4.86k|                    '0'..='9' => u32::from(c) - u32::from('0'),
  489|    532|                    'a'..='f' => u32::from(c) - u32::from('a') + 10,
  490|  2.04k|                    'A'..='F' => u32::from(c) - u32::from('A') + 10,
  491|       |                    _ => {
  492|     40|                        return Err(TermParseError::msg(
  493|     40|                            "Unexpected character in a unicode escape",
  494|     40|                        ));
  495|       |                    }
  496|       |                }
  497|       |        } else {
  498|     18|            return Err(TermParseError::msg("Unexpected literal string end"));
  499|       |        }
  500|       |    }
  501|    857|    char::from_u32(value).ok_or_else(|| TermParseError::msg("Invalid encoded unicode code point"))
  502|    915|}
_RNvMs5_NtCsiVhMQ2GRKjW_5oxrdf6parserNtB5_14TermParseError3msg:
  534|  9.23k|    pub(crate) fn msg(msg: &'static str) -> Self {
  535|  9.23k|        Self(TermParseErrorKind::Msg(msg))
  536|  9.23k|    }
_RNvXs8_NtCsiVhMQ2GRKjW_5oxrdf6parserNtB5_14TermParseErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
  505|  13.2k|#[derive(Debug, thiserror::Error)]
_RNvXsc_NtCsiVhMQ2GRKjW_5oxrdf6parserNtB5_18TermParseErrorKindNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
  510|  13.2k|#[derive(Debug, thiserror::Error)]

_RNvMs1c_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB6_9GraphName6as_refCsjjjxbQDSpyn_6nquads:
  968|   113k|    pub fn as_ref(&self) -> GraphNameRef<'_> {
  969|   113k|        match self {
  970|  10.4k|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.as_ref()),
  971|  7.37k|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.as_ref()),
  972|  95.2k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  973|       |        }
  974|   113k|    }
_RNvMs1k_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB6_12GraphNameRef16is_default_graphCsjjjxbQDSpyn_6nquads:
 1052|   113k|    pub fn is_default_graph(&self) -> bool {
 1053|   113k|        matches!(self, Self::DefaultGraph)
 1054|   113k|    }
_RNvMs1u_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB6_4Quad6as_refCsjjjxbQDSpyn_6nquads:
 1186|   113k|    pub fn as_ref(&self) -> QuadRef<'_> {
 1187|   113k|        QuadRef {
 1188|   113k|            subject: self.subject.as_ref(),
 1189|   113k|            predicate: self.predicate.as_ref(),
 1190|   113k|            object: self.object.as_ref(),
 1191|   113k|            graph_name: self.graph_name.as_ref(),
 1192|   113k|        }
 1193|   113k|    }
_RNvMsc_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB5_7Subject6as_refCsjjjxbQDSpyn_6nquads:
  181|   113k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|   113k|        match self {
  183|   104k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|  7.49k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|  1.35k|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|   113k|    }
_RNvMsy_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB5_4Term6as_refCsjjjxbQDSpyn_6nquads:
  418|   113k|    pub fn as_ref(&self) -> TermRef<'_> {
  419|   113k|        match self {
  420|  18.2k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  421|  27.6k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  422|  65.8k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  423|       |            #[cfg(feature = "rdf-star")]
  424|  1.32k|            Self::Triple(triple) => TermRef::Triple(triple),
  425|       |        }
  426|   113k|    }
_RNvXs1A_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB6_7QuadRefINtNtCscdEvteftVc2_4core7convert4FromRNtB6_4QuadE4fromCsjjjxbQDSpyn_6nquads:
 1302|   113k|    fn from(quad: &'a Quad) -> Self {
 1303|   113k|        quad.as_ref()
 1304|   113k|    }
_RNvXs1l_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB6_12GraphNameRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtCsjjjxbQDSpyn_6nquads:
 1068|  17.8k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1069|  17.8k|        match self {
 1070|  10.4k|            Self::NamedNode(node) => node.fmt(f),
 1071|  7.37k|            Self::BlankNode(node) => node.fmt(f),
 1072|      0|            Self::DefaultGraph => f.write_str("DEFAULT"),
 1073|       |        }
 1074|  17.8k|    }
_RNvXs1y_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB6_7QuadRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtCsjjjxbQDSpyn_6nquads:
 1276|   113k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1277|   113k|        if self.graph_name.is_default_graph() {
 1278|  95.2k|            write!(f, "{} {} {}", self.subject, self.predicate, self.object)
 1279|       |        } else {
 1280|  17.8k|            write!(
 1281|  17.8k|                f,
 1282|  17.8k|                "{} {} {} {}",
 1283|  17.8k|                self.subject, self.predicate, self.object, self.graph_name
 1284|  17.8k|            )
 1285|       |        }
 1286|   113k|    }
_RNvXsS_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB5_7TermRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtCsjjjxbQDSpyn_6nquads:
  652|   113k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  653|   113k|        match self {
  654|  18.2k|            Self::NamedNode(node) => node.fmt(f),
  655|  27.6k|            Self::BlankNode(node) => node.fmt(f),
  656|  65.8k|            Self::Literal(literal) => literal.fmt(f),
  657|       |            #[cfg(feature = "rdf-star")]
  658|  1.32k|            Self::Triple(triple) => {
  659|  1.32k|                write!(f, "<<{triple}>>")
  660|       |            }
  661|       |        }
  662|   113k|    }
_RNvXso_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB5_10SubjectRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtCsjjjxbQDSpyn_6nquads:
  306|   113k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  307|   113k|        match self {
  308|   104k|            Self::NamedNode(node) => node.fmt(f),
  309|  7.49k|            Self::BlankNode(node) => node.fmt(f),
  310|       |            #[cfg(feature = "rdf-star")]
  311|  1.35k|            Self::Triple(triple) => write!(f, "<<{triple}>>"),
  312|       |        }
  313|   113k|    }
_RNvXs1e_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB6_9GraphNameINtNtCscdEvteftVc2_4core7convert4FromNtNtB8_10named_node9NamedNodeE4fromCs7ZOrRad3M6Z_5oxttl:
  986|  31.4k|    fn from(node: NamedNode) -> Self {
  987|  31.4k|        Self::NamedNode(node)
  988|  31.4k|    }
_RNvXs1g_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB6_9GraphNameINtNtCscdEvteftVc2_4core7convert4FromNtNtB8_10blank_node9BlankNodeE4fromCs7ZOrRad3M6Z_5oxttl:
 1000|  22.1k|    fn from(node: BlankNode) -> Self {
 1001|  22.1k|        Self::BlankNode(node)
 1002|  22.1k|    }
_RNvMsc_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB5_7Subject6as_refB7_:
  181|  2.70k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  2.70k|        match self {
  183|  1.93k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|    764|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|      0|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  2.70k|    }
_RNvXse_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|  1.35M|    fn from(node: NamedNode) -> Self {
  201|  1.35M|        Self::NamedNode(node)
  202|  1.35M|    }
_RNvXsg_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|   179k|    fn from(node: BlankNode) -> Self {
  215|   179k|        Self::BlankNode(node)
  216|   179k|    }
_RNvXsi_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtB5_6TripleE4fromB7_:
  229|  35.4k|    fn from(node: Triple) -> Self {
  230|  35.4k|        Self::Triple(Box::new(node))
  231|  35.4k|    }
_RNvXso_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB5_10SubjectRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtB7_:
  306|  2.70k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  307|  2.70k|        match self {
  308|  1.93k|            Self::NamedNode(node) => node.fmt(f),
  309|    764|            Self::BlankNode(node) => node.fmt(f),
  310|       |            #[cfg(feature = "rdf-star")]
  311|      0|            Self::Triple(triple) => write!(f, "<<{triple}>>"),
  312|       |        }
  313|  2.70k|    }
_RNvMsy_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB5_4Term6as_refB7_:
  418|  2.70k|    pub fn as_ref(&self) -> TermRef<'_> {
  419|  2.70k|        match self {
  420|    468|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  421|  1.20k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  422|  1.00k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  423|       |            #[cfg(feature = "rdf-star")]
  424|     25|            Self::Triple(triple) => TermRef::Triple(triple),
  425|       |        }
  426|  2.70k|    }
_RNvXsA_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  438|  81.8k|    fn from(node: NamedNode) -> Self {
  439|  81.8k|        Self::NamedNode(node)
  440|  81.8k|    }
_RNvXsC_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  452|   109k|    fn from(node: BlankNode) -> Self {
  453|   109k|        Self::BlankNode(node)
  454|   109k|    }
_RNvXsE_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  466|   233k|    fn from(literal: Literal) -> Self {
  467|   233k|        Self::Literal(literal)
  468|   233k|    }
_RNvXsG_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtB5_6TripleE4fromB7_:
  481|  5.41k|    fn from(triple: Triple) -> Self {
  482|  5.41k|        Self::Triple(Box::new(triple))
  483|  5.41k|    }
_RNvXsS_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB5_7TermRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtB7_:
  652|  2.70k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  653|  2.70k|        match self {
  654|    468|            Self::NamedNode(node) => node.fmt(f),
  655|  1.20k|            Self::BlankNode(node) => node.fmt(f),
  656|  1.00k|            Self::Literal(literal) => literal.fmt(f),
  657|       |            #[cfg(feature = "rdf-star")]
  658|     25|            Self::Triple(triple) => {
  659|     25|                write!(f, "<<{triple}>>")
  660|       |            }
  661|       |        }
  662|  2.70k|    }
_RNvMs16_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB6_6Triple6as_refB8_:
  837|  2.70k|    pub fn as_ref(&self) -> TripleRef<'_> {
  838|  2.70k|        TripleRef {
  839|  2.70k|            subject: self.subject.as_ref(),
  840|  2.70k|            predicate: self.predicate.as_ref(),
  841|  2.70k|            object: self.object.as_ref(),
  842|  2.70k|        }
  843|  2.70k|    }
_RNvXs17_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB6_6TripleNtNtCscdEvteftVc2_4core3fmt7Display3fmtB8_:
  848|  2.70k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  849|  2.70k|        self.as_ref().fmt(f)
  850|  2.70k|    }
_RNvXs19_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB6_9TripleRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtB8_:
  921|  2.70k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  922|  2.70k|        write!(f, "{} {} {}", self.subject, self.predicate, self.object)
  923|  2.70k|    }
_RNvXs1e_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB6_9GraphNameINtNtCscdEvteftVc2_4core7convert4FromNtNtB8_10named_node9NamedNodeE4fromB8_:
  986|  3.50k|    fn from(node: NamedNode) -> Self {
  987|  3.50k|        Self::NamedNode(node)
  988|  3.50k|    }
_RNvXs1g_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB6_9GraphNameINtNtCscdEvteftVc2_4core7convert4FromNtNtB8_10blank_node9BlankNodeE4fromB8_:
 1000|    128|    fn from(node: BlankNode) -> Self {
 1001|    128|        Self::BlankNode(node)
 1002|    128|    }
_RINvMs16_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB7_6Triple8in_graphNtB7_9GraphNameEB9_:
  827|  9.99k|    pub fn in_graph(self, graph_name: impl Into<GraphName>) -> Quad {
  828|  9.99k|        Quad {
  829|  9.99k|            subject: self.subject,
  830|  9.99k|            predicate: self.predicate,
  831|  9.99k|            object: self.object,
  832|  9.99k|            graph_name: graph_name.into(),
  833|  9.99k|        }
  834|  9.99k|    }

_RNCNvMs_NtCs7ZOrRad3M6Z_5oxttl5lexerNtB6_7N3Lexer9parse_iris_0B8_:
  231|   573k|                    .map_err(|e| (position, e.to_string()))?
_RNCNvMs_NtCs7ZOrRad3M6Z_5oxttl5lexerNtB6_7N3Lexer26recognize_pname_or_keyword0B8_:
  320|   212k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|   212k|                prefix: pn_prefix,
  322|   212k|                local,
  323|   212k|                might_be_invalid_iri,
  324|   212k|            }),
_RNCNvMs_NtCs7ZOrRad3M6Z_5oxttl5lexerNtB6_7N3Lexer18recognize_variable0B8_:
  337|  80.1k|            result.and_then(|(name, _)| {
  338|  80.1k|                if name.is_empty() {
  339|  38.3k|                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|  41.7k|                    Ok(N3Token::Variable(name))
  342|       |                }
  343|  80.1k|            }),
_RNCNvMs_NtCs7ZOrRad3M6Z_5oxttl5lexerNtB6_7N3Lexer14parse_lang_tag0B8_:
  582|  95.3k|                .map_err(|e| (position.clone(), e.to_string()))?
_RNCNvMs_NtCs7ZOrRad3M6Z_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_char0B8_:
  819|  2.65k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  820|  2.65k|            (
  821|  2.65k|                position..position + len + 2,
  822|  2.65k|                format!(
  823|  2.65k|                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  824|  2.65k|                ),
  825|  2.65k|            )
  826|  2.65k|        })?;
_RNCNvMs_NtCs7ZOrRad3M6Z_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_chars_0B8_:
  827|  2.22k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  828|  2.22k|            (
  829|  2.22k|                position..position + len +2,
  830|  2.22k|                format!(
  831|  2.22k|                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  832|  2.22k|                ),
  833|  2.22k|            )
  834|  2.22k|        })?;
_RNCNvMs_NtCs7ZOrRad3M6Z_5oxttl5lexerNtB6_7N3Lexer22recognize_unicode_char0B8_:
  974|  1.32M|                .map(|c| (c, bytes_needed + 1))
_RNCNvNtCs7ZOrRad3M6Z_5oxttl5lexer13str_from_utf80B5_:
 1046|  21.9k|    str::from_utf8(data).map_err(|e| {
 1047|  21.9k|        (
 1048|  21.9k|            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
 1049|  21.9k|            format!("Invalid UTF-8: {e}"),
 1050|  21.9k|        )
 1051|  21.9k|            .into()
 1052|  21.9k|    })
_RNCNvNtCs7ZOrRad3M6Z_5oxttl5lexer16string_from_utf80B5_:
 1056|  94.3k|    String::from_utf8(data).map_err(|e| {
 1057|  94.3k|        (
 1058|  94.3k|            range.start + e.utf8_error().valid_up_to()
 1059|  94.3k|                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
 1060|  94.3k|            format!("Invalid UTF-8: {e}"),
 1061|  94.3k|        )
 1062|  94.3k|            .into()
 1063|  94.3k|    })
_RNvXNtCs7ZOrRad3M6Z_5oxttl5lexerNtB2_7N3LexerNtNtNtB4_7toolkit5lexer15TokenRecognizer20recognize_next_token:
   55|  18.4M|    fn recognize_next_token<'a>(
   56|  18.4M|        &mut self,
   57|  18.4M|        data: &'a [u8],
   58|  18.4M|        is_ending: bool,
   59|  18.4M|        options: &N3LexerOptions,
   60|  18.4M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
   61|  18.4M|        match *data.first()? {
   62|  6.61M|            b'<' => match *data.get(1)? {
   63|   679k|                b'<' => Some((2, Ok(N3Token::Punctuation("<<")))),
   64|  4.40k|                b'=' if self.mode == N3LexerMode::N3 => {
   65|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   66|      0|                        Some(if let Ok(result) = result {
   67|      0|                            (consumed, Ok(result))
   68|       |                        } else {
   69|      0|                            (2, Ok(N3Token::Punctuation("<=")))
   70|       |                        })
   71|      0|                    } else if is_ending {
   72|      0|                        Some((2, Ok(N3Token::Punctuation("<="))))
   73|       |                    } else {
   74|      0|                        None
   75|       |                    }
   76|       |                }
   77|  11.8k|                b'-' if self.mode == N3LexerMode::N3 => {
   78|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   79|      0|                        Some(if let Ok(result) = result {
   80|      0|                            (consumed, Ok(result))
   81|       |                        } else {
   82|      0|                            (2, Ok(N3Token::Punctuation("<-")))
   83|       |                        })
   84|      0|                    } else if is_ending {
   85|      0|                        Some((2, Ok(N3Token::Punctuation("<-"))))
   86|       |                    } else {
   87|      0|                        None
   88|       |                    }
   89|       |                }
   90|  5.83M|                _ => self.recognize_iri(data, options),
   91|       |            },
   92|       |            b'>' => {
   93|   638k|                if *data.get(1)? == b'>' {
   94|   232k|                    Some((2, Ok(N3Token::Punctuation(">>"))))
   95|       |                } else {
   96|   363k|                    Some((1, Ok(N3Token::Punctuation(">"))))
   97|       |                }
   98|       |            }
   99|  1.38M|            b'_' => match data.get(1)? {
  100|  1.21M|                b':' => Self::recognize_blank_node_label(data),
  101|   141k|                c => Some((
  102|   141k|                    1,
  103|   141k|                    Err((0, format!("Unexpected character '{}'", char::from(*c))).into()),
  104|   141k|                )),
  105|       |            },
  106|       |            b'"' => {
  107|   808k|                if self.mode != N3LexerMode::NTriples
  108|      0|                    && *data.get(1)? == b'"'
  109|      0|                    && *data.get(2)? == b'"'
  110|       |                {
  111|      0|                    self.recognize_long_string(data, b'"')
  112|       |                } else {
  113|   808k|                    self.recognize_string(data, b'"')
  114|       |                }
  115|       |            }
  116|  27.1k|            b'\'' if self.mode != N3LexerMode::NTriples => {
  117|      0|                if *data.get(1)? == b'\'' && *data.get(2)? == b'\'' {
  118|      0|                    self.recognize_long_string(data, b'\'')
  119|       |                } else {
  120|      0|                    self.recognize_string(data, b'\'')
  121|       |                }
  122|       |            }
  123|   668k|            b'@' => self.recognize_lang_tag(data),
  124|  1.58M|            b'.' => match data.get(1) {
  125|   500k|                Some(b'0'..=b'9') => Self::recognize_number(data),
  126|  1.52M|                Some(_) => Some((1, Ok(N3Token::Punctuation(".")))),
  127|  39.2k|                None => is_ending.then_some((1, Ok(N3Token::Punctuation(".")))),
  128|       |            },
  129|       |            b'^' => {
  130|   224k|                if *data.get(1)? == b'^' {
  131|   132k|                    Some((2, Ok(N3Token::Punctuation("^^"))))
  132|       |                } else {
  133|  83.3k|                    Some((1, Ok(N3Token::Punctuation("^"))))
  134|       |                }
  135|       |            }
  136|  48.5k|            b'(' => Some((1, Ok(N3Token::Punctuation("(")))),
  137|  48.4k|            b')' => Some((1, Ok(N3Token::Punctuation(")")))),
  138|  59.1k|            b'[' => Some((1, Ok(N3Token::Punctuation("[")))),
  139|  60.9k|            b']' => Some((1, Ok(N3Token::Punctuation("]")))),
  140|       |            b'{' => {
  141|  26.1k|                if *data.get(1)? == b'|' {
  142|  2.96k|                    Some((2, Ok(N3Token::Punctuation("{|"))))
  143|       |                } else {
  144|  21.4k|                    Some((1, Ok(N3Token::Punctuation("{"))))
  145|       |                }
  146|       |            }
  147|  67.8k|            b'}' => Some((1, Ok(N3Token::Punctuation("}")))),
  148|  83.3k|            b',' => Some((1, Ok(N3Token::Punctuation(",")))),
  149|  27.4k|            b';' => Some((1, Ok(N3Token::Punctuation(";")))),
  150|  34.5k|            b'!' => Some((1, Ok(N3Token::Punctuation("!")))),
  151|       |            b'|' => {
  152|  11.3k|                if *data.get(1)? == b'}' {
  153|    952|                    Some((2, Ok(N3Token::Punctuation("|}"))))
  154|       |                } else {
  155|  8.51k|                    Some((1, Ok(N3Token::Punctuation("|"))))
  156|       |                }
  157|       |            }
  158|       |            b'=' => {
  159|  51.3k|                if *data.get(1)? == b'>' {
  160|  10.1k|                    Some((2, Ok(N3Token::Punctuation("=>"))))
  161|       |                } else {
  162|  36.0k|                    Some((1, Ok(N3Token::Punctuation("="))))
  163|       |                }
  164|       |            }
  165|  2.81M|            b'0'..=b'9' | b'+' | b'-' => Self::recognize_number(data),
  166|   137k|            b'?' => self.recognize_variable(data, is_ending),
  167|  4.42M|            _ => self.recognize_pname_or_keyword(data, is_ending),
  168|       |        }
  169|  18.4M|    }
_RNvMs_NtCs7ZOrRad3M6Z_5oxttl5lexerNtB4_7N3Lexer3new:
  173|   128k|    pub fn new(mode: N3LexerMode, unchecked: bool) -> Self {
  174|   128k|        Self { mode, unchecked }
  175|   128k|    }
_RNvMs_NtCs7ZOrRad3M6Z_5oxttl5lexerNtB4_7N3Lexer13recognize_iri:
  177|  5.83M|    fn recognize_iri(
  178|  5.83M|        &self,
  179|  5.83M|        data: &[u8],
  180|  5.83M|        options: &N3LexerOptions,
  181|  5.83M|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  182|  5.83M|        // [18] IRIREF  ::=  '<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
  183|  5.83M|        let mut string = Vec::new();
  184|  5.83M|        let mut i = 1;
  185|       |        loop {
  186|  5.85M|            let end = memchr2(b'>', b'\\', &data[i..])?;
  187|  2.74M|            string.extend_from_slice(&data[i..i + end]);
  188|  2.74M|            i += end;
  189|  2.74M|            match data[i] {
  190|       |                b'>' => {
  191|       |                    #[allow(clippy::range_plus_one)]
  192|  2.60M|                    return Some((i + 1, self.parse_iri(string, 0..i + 1, options)));
  193|       |                }
  194|       |                b'\\' => {
  195|   134k|                    let (additional, c) = self.recognize_escape(&data[i..], i, false)?;
  196|  80.3k|                    i += additional + 1;
  197|  80.3k|                    match c {
  198|  17.7k|                        Ok(c) => {
  199|  17.7k|                            let mut buf = [0; 4];
  200|  17.7k|                            string.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  201|  17.7k|                        }
  202|  62.5k|                        Err(e) => return Some((i, Err(e))),
  203|       |                    }
  204|       |                }
  205|      0|                _ => unreachable!(),
  206|       |            }
  207|       |        }
  208|  5.83M|    }
_RNvMs_NtCs7ZOrRad3M6Z_5oxttl5lexerNtB4_7N3Lexer9parse_iri:
  210|  2.60M|    fn parse_iri(
  211|  2.60M|        &self,
  212|  2.60M|        iri: Vec<u8>,
  213|  2.60M|        position: Range<usize>,
  214|  2.60M|        options: &N3LexerOptions,
  215|  2.60M|    ) -> Result<N3Token<'static>, TokenRecognizerError> {
  216|  2.60M|        let iri = string_from_utf8(iri, position.clone())?;
  217|       |        Ok(N3Token::IriRef(
  218|  2.51M|            if let Some(base_iri) = options.base_iri.as_ref() {
  219|      0|                if self.unchecked {
  220|      0|                    base_iri.resolve_unchecked(&iri)
  221|       |                } else {
  222|      0|                    base_iri
  223|      0|                        .resolve(&iri)
  224|      0|                        .map_err(|e| (position, e.to_string()))?
  225|       |                }
  226|      0|                .into_inner()
  227|  2.51M|            } else if self.unchecked {
  228|    352|                iri
  229|       |            } else {
  230|  2.51M|                Iri::parse(iri)
  231|  2.51M|                    .map_err(|e| (position, e.to_string()))?
  232|  1.93M|                    .into_inner()
  233|       |            },
  234|       |        ))
  235|  2.60M|    }
_RNvMs_NtCs7ZOrRad3M6Z_5oxttl5lexerNtB4_7N3Lexer26recognize_pname_or_keyword:
  237|  4.42M|    fn recognize_pname_or_keyword<'a>(
  238|  4.42M|        &self,
  239|  4.42M|        data: &'a [u8],
  240|  4.42M|        is_ending: bool,
  241|  4.42M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  242|  4.42M|        // [139s]  PNAME_NS   ::=  PN_PREFIX? ':'
  243|  4.42M|        // [140s]  PNAME_LN   ::=  PNAME_NS PN_LOCAL
  244|  4.42M|        // [167s]  PN_PREFIX  ::=  PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
  245|  4.42M|        let mut i = 0;
  246|       |        loop {
  247|  7.18M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  248|  6.95M|                match r {
  249|  5.75M|                    Ok((c, consumed)) => {
  250|  5.75M|                        if c == ':' {
  251|   477k|                            i += consumed;
  252|   477k|                            break;
  253|  5.27M|                        } else if i == 0 {
  254|  2.98M|                            if !Self::is_possible_pn_chars_base(c) {
  255|  1.96M|                                return Some((
  256|  1.96M|                                    consumed,
  257|  1.96M|                                    Err((
  258|  1.96M|                                        0..consumed,
  259|  1.96M|                                        format!(
  260|  1.96M|                                            "'{c}' is not allowed at the beginning of a prefix name"
  261|  1.96M|                                        ),
  262|  1.96M|                                    )
  263|  1.96M|                                        .into()),
  264|  1.96M|                                ));
  265|  1.01M|                            }
  266|  1.01M|                            i += consumed;
  267|  2.29M|                        } else if Self::is_possible_pn_chars(c) || c == '.' {
  268|  1.74M|                            i += consumed;
  269|  1.74M|                        } else {
  270|   678k|                            while data[..i].ends_with(b".") {
  271|   135k|                                i -= 1;
  272|   135k|                            }
  273|   543k|                            return Some((
  274|   543k|                                i,
  275|   543k|                                str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  276|   543k|                            ));
  277|       |                        }
  278|       |                    }
  279|  1.20M|                    Err(e) => return Some((e.location.end, Err(e))),
  280|       |                }
  281|   231k|            } else if is_ending {
  282|  30.4k|                while data[..i].ends_with(b".") {
  283|  19.1k|                    i -= 1;
  284|  19.1k|                }
  285|  11.3k|                return Some(if i == 0 {
  286|  2.69k|                    (
  287|  2.69k|                        1,
  288|  2.69k|                        Err((0..1, format!("Unexpected byte {}", data[0])).into()),
  289|  2.69k|                    )
  290|       |                } else {
  291|  8.64k|                    (
  292|  8.64k|                        i,
  293|  8.64k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  294|  8.64k|                    )
  295|       |                });
  296|       |            } else {
  297|   219k|                return None;
  298|       |            }
  299|       |        }
  300|   477k|        let pn_prefix = match str_from_utf8(&data[..i - 1], 0..i - 1) {
  301|   477k|            Ok(pn_prefix) => pn_prefix,
  302|      0|            Err(e) => return Some((i, Err(e))),
  303|       |        };
  304|   477k|        if pn_prefix.ends_with('.') {
  305|  3.69k|            return Some((
  306|  3.69k|                i,
  307|  3.69k|                Err((
  308|  3.69k|                    0..i,
  309|  3.69k|                    format!(
  310|  3.69k|                        "'{pn_prefix}' is not a valid prefix: prefixes are not allowed to end with '.'"),
  311|  3.69k|                )
  312|  3.69k|                    .into()),
  313|  3.69k|            ));
  314|   473k|        }
  315|       |
  316|   245k|        let (consumed, pn_local_result) =
  317|   473k|            self.recognize_optional_pn_local(&data[i..], is_ending)?;
  318|   245k|        Some((
  319|   245k|            consumed + i,
  320|   245k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|       |                prefix: pn_prefix,
  322|       |                local,
  323|       |                might_be_invalid_iri,
  324|   245k|            }),
  325|   245k|        ))
  326|  4.42M|    }
_RNvMs_NtCs7ZOrRad3M6Z_5oxttl5lexerNtB4_7N3Lexer18recognize_variable:
  328|   137k|    fn recognize_variable<'a>(
  329|   137k|        &self,
  330|   137k|        data: &'a [u8],
  331|   137k|        is_ending: bool,
  332|   137k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  333|       |        // [36]  QUICK_VAR_NAME  ::=  "?" PN_LOCAL
  334|   137k|        let (consumed, result) = self.recognize_optional_pn_local(&data[1..], is_ending)?;
  335|  97.4k|        Some((
  336|  97.4k|            consumed + 1,
  337|  97.4k|            result.and_then(|(name, _)| {
  338|       |                if name.is_empty() {
  339|       |                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|       |                    Ok(N3Token::Variable(name))
  342|       |                }
  343|  97.4k|            }),
  344|  97.4k|        ))
  345|   137k|    }
_RNvMs_NtCs7ZOrRad3M6Z_5oxttl5lexerNtB4_7N3Lexer27recognize_optional_pn_local:
  347|   611k|    fn recognize_optional_pn_local<'a>(
  348|   611k|        &self,
  349|   611k|        data: &'a [u8],
  350|   611k|        is_ending: bool,
  351|   611k|    ) -> Option<(usize, Result<(Cow<'a, str>, bool), TokenRecognizerError>)> {
  352|   611k|        // [168s]  PN_LOCAL  ::=  (PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
  353|   611k|        let mut i = 0;
  354|   611k|        let mut buffer = None; // Buffer if there are some escaped characters
  355|   611k|        let mut position_that_is_already_in_buffer = 0;
  356|   611k|        let mut might_be_invalid_iri = false;
  357|   611k|        let mut ends_with_unescaped_dot = 0;
  358|       |        loop {
  359|  1.92M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  360|  1.67M|                match r {
  361|  1.64M|                    Ok((c, consumed)) => {
  362|  1.64M|                        if c == '%' {
  363|  21.2k|                            i += 1;
  364|  21.2k|                            let a = char::from(*data.get(i)?);
  365|  14.5k|                            i += 1;
  366|  14.5k|                            let b = char::from(*data.get(i)?);
  367|  11.6k|                            if !a.is_ascii_hexdigit() || !b.is_ascii_hexdigit() {
  368|  8.72k|                                return Some((i + 1, Err((
  369|  8.72k|                                    i - 2..=i, format!("escapes in IRIs should be % followed by two hexadecimal characters, found '%{a}{b}'")
  370|  8.72k|                                ).into())));
  371|  2.91k|                            }
  372|  2.91k|                            i += 1;
  373|  2.91k|                            ends_with_unescaped_dot = 0;
  374|  1.62M|                        } else if c == '\\' {
  375|   145k|                            i += 1;
  376|   145k|                            let a = char::from(*data.get(i)?);
  377|   138k|                            if self.unchecked
  378|  76.4k|                                || matches!(
  379|   138k|                                    a,
  380|       |                                    '_' | '~'
  381|       |                                        | '.'
  382|       |                                        | '-'
  383|       |                                        | '!'
  384|       |                                        | '$'
  385|       |                                        | '&'
  386|       |                                        | '\''
  387|       |                                        | '('
  388|       |                                        | ')'
  389|       |                                        | '*'
  390|       |                                        | '+'
  391|       |                                        | ','
  392|       |                                        | ';'
  393|       |                                        | '='
  394|       |                                )
  395|  62.3k|                            {
  396|  62.3k|                                // ok to escape
  397|  76.4k|                            } else if matches!(a, '/' | '?' | '#' | '@' | '%') {
  398|  66.5k|                                // ok to escape but requires IRI validation
  399|  66.5k|                                might_be_invalid_iri = true;
  400|  66.5k|                            } else {
  401|  9.94k|                                return Some((i + 1, Err((
  402|  9.94k|                                    i..=i, format!("The character that are allowed to be escaped in IRIs are _~.-!$&'()*+,;=/?#@%, found '{a}'")
  403|  9.94k|                                ).into())));
  404|       |                            }
  405|   128k|                            let buffer = buffer.get_or_insert_with(String::new);
  406|   128k|                            // We add the missing bytes
  407|   128k|                            if i - position_that_is_already_in_buffer > 1 {
  408|  39.4k|                                buffer.push_str(
  409|  39.4k|                                    match str_from_utf8(
  410|  39.4k|                                        &data[position_that_is_already_in_buffer..i - 1],
  411|  39.4k|                                        position_that_is_already_in_buffer..i - 1,
  412|  39.4k|                                    ) {
  413|  39.4k|                                        Ok(data) => data,
  414|      0|                                        Err(e) => return Some((i, Err(e))),
  415|       |                                    },
  416|       |                                )
  417|  89.5k|                            }
  418|   128k|                            buffer.push(a);
  419|   128k|                            i += 1;
  420|   128k|                            position_that_is_already_in_buffer = i;
  421|   128k|                            ends_with_unescaped_dot = 0;
  422|  1.47M|                        } else if i == 0 {
  423|   396k|                            if !(Self::is_possible_pn_chars_u(c) || c == ':' || c.is_ascii_digit())
  424|       |                            {
  425|   148k|                                return Some((0, Ok((Cow::Borrowed(""), false))));
  426|   247k|                            }
  427|   247k|                            if !self.unchecked {
  428|       |                                might_be_invalid_iri |=
  429|   247k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  430|   247k|                                        || c == ':';
  431|      0|                            }
  432|   247k|                            i += consumed;
  433|  1.07M|                        } else if Self::is_possible_pn_chars(c) || c == ':' {
  434|   806k|                            if !self.unchecked {
  435|       |                                might_be_invalid_iri |=
  436|   806k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  437|   806k|                                        || c == ':';
  438|      0|                            }
  439|   806k|                            i += consumed;
  440|   806k|                            ends_with_unescaped_dot = 0;
  441|   271k|                        } else if c == '.' {
  442|   131k|                            i += consumed;
  443|   131k|                            ends_with_unescaped_dot += 1;
  444|   131k|                        } else {
  445|   139k|                            let buffer = if let Some(mut buffer) = buffer {
  446|  34.1k|                                buffer.push_str(
  447|  34.1k|                                    match str_from_utf8(
  448|  34.1k|                                        &data[position_that_is_already_in_buffer..i],
  449|  34.1k|                                        position_that_is_already_in_buffer..i,
  450|  34.1k|                                    ) {
  451|  34.1k|                                        Ok(data) => data,
  452|      0|                                        Err(e) => return Some((i, Err(e))),
  453|       |                                    },
  454|       |                                );
  455|       |                                // We do not include the last dots
  456|  34.1k|                                for _ in 0..ends_with_unescaped_dot {
  457|  32.4k|                                    buffer.pop();
  458|  32.4k|                                }
  459|  34.1k|                                i -= ends_with_unescaped_dot;
  460|  34.1k|                                Cow::Owned(buffer)
  461|       |                            } else {
  462|   105k|                                let mut data = match str_from_utf8(&data[..i], 0..i) {
  463|   105k|                                    Ok(data) => data,
  464|      0|                                    Err(e) => return Some((i, Err(e))),
  465|       |                                };
  466|       |                                // We do not include the last dots
  467|   105k|                                data = &data[..data.len() - ends_with_unescaped_dot];
  468|   105k|                                i -= ends_with_unescaped_dot;
  469|   105k|                                Cow::Borrowed(data)
  470|       |                            };
  471|   139k|                            return Some((i, Ok((buffer, might_be_invalid_iri))));
  472|       |                        }
  473|       |                    }
  474|  31.6k|                    Err(e) => return Some((e.location.end, Err(e))),
  475|       |                }
  476|   256k|            } else if is_ending {
  477|  4.08k|                let buffer = if let Some(mut buffer) = buffer {
  478|       |                    // We do not include the last dot
  479|  1.23k|                    while buffer.ends_with('.') {
  480|    590|                        buffer.pop();
  481|    590|                        i -= 1;
  482|    590|                    }
  483|    640|                    Cow::Owned(buffer)
  484|       |                } else {
  485|  3.44k|                    let mut data = match str_from_utf8(&data[..i], 0..i) {
  486|  3.44k|                        Ok(data) => data,
  487|      0|                        Err(e) => return Some((i, Err(e))),
  488|       |                    };
  489|       |                    // We do not include the last dot
  490|  4.23k|                    while let Some(d) = data.strip_suffix('.') {
  491|    792|                        data = d;
  492|    792|                        i -= 1;
  493|    792|                    }
  494|  3.44k|                    Cow::Borrowed(data)
  495|       |                };
  496|  4.08k|                return Some((i, Ok((buffer, might_be_invalid_iri))));
  497|       |            } else {
  498|   252k|                return None;
  499|       |            }
  500|       |        }
  501|   611k|    }
_RNvMs_NtCs7ZOrRad3M6Z_5oxttl5lexerNtB4_7N3Lexer26recognize_blank_node_label:
  503|  1.21M|    fn recognize_blank_node_label(
  504|  1.21M|        data: &[u8],
  505|  1.21M|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  506|  1.21M|        // [141s]  BLANK_NODE_LABEL  ::=  '_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
  507|  1.21M|        let mut i = 2;
  508|       |        loop {
  509|  11.1M|            match Self::recognize_unicode_char(&data[i..], i)? {
  510|  10.4M|                Ok((c, consumed)) => {
  511|  10.4M|                    if (i == 2 && (Self::is_possible_pn_chars_u(c) || c.is_ascii_digit()))
  512|  9.38M|                        || (i > 2 && Self::is_possible_pn_chars(c))
  513|  9.83M|                    {
  514|  9.83M|                        // Ok
  515|  9.83M|                    } else if i > 2 && c == '.' {
  516|   131k|                        if data[i - 1] == b'.' {
  517|  11.9k|                            i -= 1;
  518|  11.9k|                            return Some((
  519|  11.9k|                                i,
  520|  11.9k|                                str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  521|  11.9k|                            ));
  522|   120k|                        }
  523|   505k|                    } else if i == 2 {
  524|  63.1k|                        return Some((
  525|  63.1k|                            i,
  526|  63.1k|                            Err((0..i, "A blank node ID should not be empty").into()),
  527|  63.1k|                        ));
  528|   442k|                    } else if data[i - 1] == b'.' {
  529|  89.9k|                        i -= 1;
  530|  89.9k|                        return Some((
  531|  89.9k|                            i,
  532|  89.9k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  533|  89.9k|                        ));
  534|       |                    } else {
  535|   352k|                        return Some((
  536|   352k|                            i,
  537|   352k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  538|   352k|                        ));
  539|       |                    }
  540|  9.95M|                    i += consumed;
  541|       |                }
  542|  14.6k|                Err(e) => return Some((e.location.end, Err(e))),
  543|       |            }
  544|       |        }
  545|  1.21M|    }
_RNvMs_NtCs7ZOrRad3M6Z_5oxttl5lexerNtB4_7N3Lexer18recognize_lang_tag:
  547|   668k|    fn recognize_lang_tag<'a>(
  548|   668k|        &self,
  549|   668k|        data: &'a [u8],
  550|   668k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  551|   668k|        // [144s]  LANGTAG  ::=  '@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
  552|   668k|        let mut is_last_block_empty = true;
  553|  4.39M|        for (i, c) in data[1..].iter().enumerate() {
  554|  4.39M|            if c.is_ascii_alphabetic() {
  555|  3.40M|                is_last_block_empty = false;
  556|  3.40M|            } else if i == 0 {
  557|  96.5k|                return Some((
  558|  96.5k|                    1,
  559|  96.5k|                    Err((1..2, "A language code should always start with a letter").into()),
  560|  96.5k|                ));
  561|   889k|            } else if is_last_block_empty {
  562|  22.5k|                return Some((i, self.parse_lang_tag(&data[1..i], 1..i - 1)));
  563|   866k|            } else if *c == b'-' {
  564|   458k|                is_last_block_empty = true;
  565|   458k|            } else {
  566|   408k|                return Some((i + 1, self.parse_lang_tag(&data[1..=i], 1..i)));
  567|       |            }
  568|       |        }
  569|   140k|        None
  570|   668k|    }
_RNvMs_NtCs7ZOrRad3M6Z_5oxttl5lexerNtB4_7N3Lexer14parse_lang_tag:
  572|   431k|    fn parse_lang_tag<'a>(
  573|   431k|        &self,
  574|   431k|        lang_tag: &'a [u8],
  575|   431k|        position: Range<usize>,
  576|   431k|    ) -> Result<N3Token<'a>, TokenRecognizerError> {
  577|   431k|        let lang_tag = str_from_utf8(lang_tag, position.clone())?;
  578|   431k|        Ok(N3Token::LangTag(if self.unchecked {
  579|     32|            lang_tag
  580|       |        } else {
  581|   430k|            LanguageTag::parse(lang_tag)
  582|   430k|                .map_err(|e| (position.clone(), e.to_string()))?
  583|   335k|                .into_inner()
  584|       |        }))
  585|   431k|    }
_RNvMs_NtCs7ZOrRad3M6Z_5oxttl5lexerNtB4_7N3Lexer16recognize_string:
  587|   808k|    fn recognize_string(
  588|   808k|        &self,
  589|   808k|        data: &[u8],
  590|   808k|        delimiter: u8,
  591|   808k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  592|   808k|        // [22]  STRING_LITERAL_QUOTE         ::=  '"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
  593|   808k|        // [23]  STRING_LITERAL_SINGLE_QUOTE  ::=  "'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
  594|   808k|        let mut string = String::new();
  595|   808k|        let mut i = 1;
  596|       |        loop {
  597|  1.05M|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  598|   875k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  599|   860k|                Ok(s) => string.push_str(s),
  600|  15.6k|                Err(e) => return Some((end, Err(e))),
  601|       |            };
  602|   860k|            i += end;
  603|   860k|            match data[i] {
  604|   860k|                c if c == delimiter => {
  605|   550k|                    return Some((i + 1, Ok(N3Token::String(string))));
  606|       |                }
  607|       |                b'\\' => {
  608|   309k|                    let (additional, c) = self.recognize_escape(&data[i..], i, true)?;
  609|   306k|                    i += additional + 1;
  610|   306k|                    match c {
  611|   247k|                        Ok(c) => {
  612|   247k|                            string.push(c);
  613|   247k|                        }
  614|  58.1k|                        Err(e) => {
  615|       |                            // We read until the end of string char
  616|  58.1k|                            let end = memchr(delimiter, &data[i..])?;
  617|  25.2k|                            return Some((i + end + 1, Err(e)));
  618|       |                        }
  619|       |                    }
  620|       |                }
  621|      0|                _ => unreachable!(),
  622|       |            }
  623|       |        }
  624|   808k|    }
_RNvMs_NtCs7ZOrRad3M6Z_5oxttl5lexerNtB4_7N3Lexer16recognize_number:
  665|   528k|    fn recognize_number(data: &[u8]) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  666|   528k|        // [19]  INTEGER    ::=  [+-]? [0-9]+
  667|   528k|        // [20]  DECIMAL    ::=  [+-]? [0-9]* '.' [0-9]+
  668|   528k|        // [21]  DOUBLE     ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  669|   528k|        // [154s] EXPONENT  ::=  [eE] [+-]? [0-9]+
  670|   528k|        let mut i = 0;
  671|   528k|        let c = *data.first()?;
  672|   528k|        if matches!(c, b'+' | b'-') {
  673|   249k|            i += 1;
  674|   278k|        }
  675|       |        // We read the digits before .
  676|   528k|        let mut count_before: usize = 0;
  677|       |        loop {
  678|   985k|            let c = *data.get(i)?;
  679|   912k|            if c.is_ascii_digit() {
  680|   456k|                i += 1;
  681|   456k|                count_before += 1;
  682|   456k|            } else {
  683|   455k|                break;
  684|       |            }
  685|       |        }
  686|       |
  687|       |        // We read the digits after .
  688|       |        #[allow(clippy::if_then_some_else_none)]
  689|   455k|        let count_after = if *data.get(i)? == b'.' {
  690|  46.1k|            i += 1;
  691|  46.1k|
  692|  46.1k|            let mut count_after = 0;
  693|       |            loop {
  694|   124k|                let c = *data.get(i)?;
  695|   116k|                if c.is_ascii_digit() {
  696|  78.7k|                    i += 1;
  697|  78.7k|                    count_after += 1;
  698|  78.7k|                } else {
  699|  37.5k|                    break;
  700|  37.5k|                }
  701|  37.5k|            }
  702|  37.5k|            Some(count_after)
  703|       |        } else {
  704|   409k|            None
  705|       |        };
  706|       |
  707|       |        // End
  708|   447k|        let c = *data.get(i)?;
  709|   447k|        if matches!(c, b'e' | b'E') {
  710|  38.1k|            i += 1;
  711|       |
  712|  38.1k|            let c = *data.get(i)?;
  713|  26.4k|            if matches!(c, b'+' | b'-') {
  714|  2.55k|                i += 1;
  715|  23.9k|            }
  716|       |
  717|  26.4k|            let mut found = false;
  718|       |            loop {
  719|  49.3k|                let c = *data.get(i)?;
  720|  43.8k|                if c.is_ascii_digit() {
  721|  22.8k|                    i += 1;
  722|  22.8k|                    found = true;
  723|  22.8k|                } else {
  724|  21.0k|                    break;
  725|  21.0k|                }
  726|  21.0k|            }
  727|  21.0k|            Some((
  728|  21.0k|                i,
  729|  21.0k|                if !found {
  730|  12.4k|                    Err((0..i, "A double exponent cannot be empty").into())
  731|  8.60k|                } else if count_before == 0 && count_after.unwrap_or(0) == 0 {
  732|  4.14k|                    Err((0..i, "A double should not be empty").into())
  733|       |                } else {
  734|  4.45k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Double)
  735|       |                },
  736|       |            ))
  737|   408k|        } else if let Some(count_after) = count_after {
  738|  35.1k|            if count_after == 0 {
  739|       |                // We do not consume the '.' after all
  740|  19.1k|                i -= 1;
  741|  19.1k|                Some((
  742|  19.1k|                    i,
  743|  19.1k|                    if count_before == 0 {
  744|  6.58k|                        Err((0..i, "An integer should not be empty").into())
  745|       |                    } else {
  746|  12.5k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  747|       |                    },
  748|       |                ))
  749|       |            } else {
  750|  16.0k|                Some((i, str_from_utf8(&data[..i], 0..i).map(N3Token::Decimal)))
  751|       |            }
  752|       |        } else {
  753|       |            Some((
  754|   373k|                i,
  755|   373k|                if count_before == 0 {
  756|   191k|                    Err((0..i, "An integer should not be empty").into())
  757|       |                } else {
  758|   181k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  759|       |                },
  760|       |            ))
  761|       |        }
  762|   528k|    }
_RNvMs_NtCs7ZOrRad3M6Z_5oxttl5lexerNtB4_7N3Lexer16recognize_escape:
  764|   443k|    fn recognize_escape(
  765|   443k|        &self,
  766|   443k|        data: &[u8],
  767|   443k|        position: usize,
  768|   443k|        with_echar: bool,
  769|   443k|    ) -> Option<(usize, Result<char, TokenRecognizerError>)> {
  770|   443k|        // [26]   UCHAR  ::=  '\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
  771|   443k|        // [159s] ECHAR  ::=  '\' [tbnrf"'\]
  772|   443k|        match *data.get(1)? {
  773|  63.3k|            b'u' => match Self::recognize_hex_char(&data[2..], 4, 'u', position) {
  774|  56.3k|                Ok(c) => Some((5, Ok(c?))),
  775|  6.97k|                Err(e) => {
  776|  6.97k|                    if self.unchecked {
  777|      0|                        match Self::recognize_utf16_surrogate_pair(&data[2..], position) {
  778|      0|                            Ok(c) => Some((11, Ok(c?))),
  779|      0|                            Err(e) => Some((5, Err(e))),
  780|       |                        }
  781|       |                    } else {
  782|  6.97k|                        Some((5, Err(e)))
  783|       |                    }
  784|       |                }
  785|       |            },
  786|  49.8k|            b'U' => match Self::recognize_hex_char(&data[2..], 8, 'u', position) {
  787|  45.5k|                Ok(c) => Some((9, Ok(c?))),
  788|  4.28k|                Err(e) => Some((9, Err(e))),
  789|       |            },
  790|  10.2k|            b't' if with_echar => Some((1, Ok('\t'))),
  791|  98.5k|            b'b' if with_echar => Some((1, Ok('\x08'))),
  792|  11.2k|            b'n' if with_echar => Some((1, Ok('\n'))),
  793|  6.69k|            b'r' if with_echar => Some((1, Ok('\r'))),
  794|  9.05k|            b'f' if with_echar => Some((1, Ok('\x0C'))),
  795|  17.4k|            b'"' if with_echar => Some((1, Ok('"'))),
  796|  9.07k|            b'\'' if with_echar => Some((1, Ok('\''))),
  797|  7.93k|            b'\\' if with_echar => Some((1, Ok('\\'))),
  798|   109k|            c => Some((
  799|   109k|                1,
  800|   109k|                Err((
  801|   109k|                    position..position + 2,
  802|   109k|                    format!("Unexpected escape character '\\{}'", char::from(c)),
  803|   109k|                )
  804|   109k|                    .into()),
  805|   109k|            )), // TODO: read until end of string
  806|       |        }
  807|   443k|    }
_RNvMs_NtCs7ZOrRad3M6Z_5oxttl5lexerNtB4_7N3Lexer18recognize_hex_char:
  809|   113k|    fn recognize_hex_char(
  810|   113k|        data: &[u8],
  811|   113k|        len: usize,
  812|   113k|        escape_char: char,
  813|   113k|        position: usize,
  814|   113k|    ) -> Result<Option<char>, TokenRecognizerError> {
  815|   113k|        if data.len() < len {
  816|  6.43k|            return Ok(None);
  817|   106k|        }
  818|   106k|        let val = str_from_utf8(&data[..len], position..position + len + 2)?;
  819|   100k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  820|       |            (
  821|       |                position..position + len + 2,
  822|       |                format!(
  823|       |                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  824|       |                ),
  825|       |            )
  826|   100k|        })?;
  827|  97.7k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  828|       |            (
  829|       |                position..position + len +2,
  830|       |                format!(
  831|       |                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  832|       |                ),
  833|       |            )
  834|  97.7k|        })?;
  835|  95.4k|        Ok(Some(c))
  836|   113k|    }
_RNvMs_NtCs7ZOrRad3M6Z_5oxttl5lexerNtB4_7N3Lexer22recognize_unicode_char:
  913|  20.2M|    fn recognize_unicode_char(
  914|  20.2M|        data: &[u8],
  915|  20.2M|        position: usize,
  916|  20.2M|    ) -> Option<Result<(char, usize), TokenRecognizerError>> {
  917|  20.2M|        let mut code_point: u32;
  918|  20.2M|        let bytes_needed: usize;
  919|  20.2M|        let mut lower_boundary = 0x80;
  920|  20.2M|        let mut upper_boundary = 0xBF;
  921|       |
  922|  20.2M|        let byte = *data.first()?;
  923|  19.1M|        match byte {
  924|  19.1M|            0x00..=0x7F => return Some(Ok((char::from(byte), 1))),
  925|  1.95M|            0xC2..=0xDF => {
  926|   754k|                bytes_needed = 1;
  927|   754k|                code_point = u32::from(byte) & 0x1F;
  928|   754k|            }
  929|  1.19M|            0xE0..=0xEF => {
  930|   809k|                if byte == 0xE0 {
  931|  10.6k|                    lower_boundary = 0xA0;
  932|   798k|                }
  933|   809k|                if byte == 0xED {
  934|  7.16k|                    upper_boundary = 0x9F;
  935|   801k|                }
  936|   809k|                bytes_needed = 2;
  937|   809k|                code_point = u32::from(byte) & 0xF;
  938|       |            }
  939|   388k|            0xF0..=0xF4 => {
  940|   290k|                if byte == 0xF0 {
  941|  54.2k|                    lower_boundary = 0x90;
  942|   236k|                }
  943|   290k|                if byte == 0xF4 {
  944|   193k|                    upper_boundary = 0x8F;
  945|   193k|                }
  946|   290k|                bytes_needed = 3;
  947|   290k|                code_point = u32::from(byte) & 0x7;
  948|       |            }
  949|       |            _ => {
  950|   795k|                return Some(Err((
  951|   795k|                    position..=position,
  952|   795k|                    "Invalid UTF-8 character encoding",
  953|   795k|                )
  954|   795k|                    .into()))
  955|       |            }
  956|       |        }
  957|       |
  958|  2.63M|        for i in 1..=bytes_needed {
  959|  2.63M|            let byte = *data.get(i)?;
  960|  2.55M|            if byte < lower_boundary || upper_boundary < byte {
  961|   450k|                return Some(Err((
  962|   450k|                    position..=position + i,
  963|   450k|                    "Invalid UTF-8 character encoding",
  964|   450k|                )
  965|   450k|                    .into()));
  966|  2.10M|            }
  967|  2.10M|            lower_boundary = 0x80;
  968|  2.10M|            upper_boundary = 0xBF;
  969|  2.10M|            code_point = (code_point << 6) | (u32::from(byte) & 0x3F);
  970|       |        }
  971|       |
  972|  1.32M|        Some(
  973|  1.32M|            char::from_u32(code_point)
  974|  1.32M|                .map(|c| (c, bytes_needed + 1))
  975|  1.32M|                .ok_or_else(|| {
  976|       |                    (
  977|       |                        position..=position + bytes_needed,
  978|       |                        format!("The codepoint {code_point:X} is not a valid unicode character"),
  979|       |                    )
  980|       |                        .into()
  981|  1.32M|                }),
  982|  1.32M|        )
  983|  20.2M|    }
_RNvMs_NtCs7ZOrRad3M6Z_5oxttl5lexerNtB4_7N3Lexer25is_possible_pn_chars_base:
  986|  17.2M|    fn is_possible_pn_chars_base(c: char) -> bool {
  987|  17.2M|        matches!(c,
  988|  11.6M|        'A'..='Z'
  989|  9.94M|        | 'a'..='z'
  990|   760k|        | '\u{00C0}'..='\u{00D6}'
  991|   759k|        | '\u{00D8}'..='\u{00F6}'
  992|   759k|        | '\u{00F8}'..='\u{02FF}'
  993|   746k|        | '\u{0370}'..='\u{037D}'
  994|   746k|        | '\u{037F}'..='\u{1FFF}'
  995|   739k|        | '\u{200C}'..='\u{200D}'
  996|   735k|        | '\u{2070}'..='\u{218F}'
  997|   735k|        | '\u{2C00}'..='\u{2FEF}'
  998|   735k|        | '\u{3001}'..='\u{D7FF}'
  999|  30.9k|        | '\u{F900}'..='\u{FDCF}'
 1000|  30.9k|        | '\u{FDF0}'..='\u{FFFD}'
 1001|  29.9k|        | '\u{10000}'..='\u{EFFFF}')
 1002|  17.2M|    }
_RNvMs_NtCs7ZOrRad3M6Z_5oxttl5lexerNtB4_7N3Lexer22is_possible_pn_chars_u:
 1005|  14.2M|    pub(super) fn is_possible_pn_chars_u(c: char) -> bool {
 1006|  14.2M|        Self::is_possible_pn_chars_base(c) || c == '_'
 1007|  14.2M|    }
_RNvMs_NtCs7ZOrRad3M6Z_5oxttl5lexerNtB4_7N3Lexer20is_possible_pn_chars:
 1010|  12.6M|    pub(crate) fn is_possible_pn_chars(c: char) -> bool {
 1011|  12.6M|        Self::is_possible_pn_chars_u(c)
 1012|  4.01M|            || matches!(c,
 1013|  2.24M|        '-' | '0'..='9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
 1014|  12.6M|    }
_RNvMs_NtCs7ZOrRad3M6Z_5oxttl5lexerNtB4_7N3Lexer43is_possible_pn_chars_base_but_not_valid_iri:
 1016|  1.05M|    fn is_possible_pn_chars_base_but_not_valid_iri(c: char) -> bool {
 1017|  1.05M|        matches!(c, '\u{FFF0}'..='\u{FFFD}')
 1018|  1.05M|            || u32::from(c) % u32::from('\u{FFFE}') == 0
 1019|  1.05M|            || u32::from(c) % u32::from('\u{FFFF}') == 0
 1020|  1.05M|    }
_RNvNtCs7ZOrRad3M6Z_5oxttl5lexer13str_from_utf8:
 1045|  3.29M|fn str_from_utf8(data: &[u8], range: Range<usize>) -> Result<&str, TokenRecognizerError> {
 1046|  3.29M|    str::from_utf8(data).map_err(|e| {
 1047|       |        (
 1048|       |            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
 1049|       |            format!("Invalid UTF-8: {e}"),
 1050|       |        )
 1051|       |            .into()
 1052|  3.29M|    })
 1053|  3.29M|}
_RNvNtCs7ZOrRad3M6Z_5oxttl5lexer16string_from_utf8:
 1055|  2.60M|fn string_from_utf8(data: Vec<u8>, range: Range<usize>) -> Result<String, TokenRecognizerError> {
 1056|  2.60M|    String::from_utf8(data).map_err(|e| {
 1057|       |        (
 1058|       |            range.start + e.utf8_error().valid_up_to()
 1059|       |                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
 1060|       |            format!("Invalid UTF-8: {e}"),
 1061|       |        )
 1062|       |            .into()
 1063|  2.60M|    })
 1064|  2.60M|}

_RINvMs_NtCs7ZOrRad3M6Z_5oxttl12line_formatsNtB5_16NQuadsRecognizer10new_parserINtNtCs3OstG5Tqy1X_5alloc3vec3VechEEB7_:
  305|  85.9k|    pub fn new_parser<B>(
  306|  85.9k|        data: B,
  307|  85.9k|        is_ending: bool,
  308|  85.9k|        with_graph_name: bool,
  309|  85.9k|        #[cfg(feature = "rdf-star")] with_quoted_triples: bool,
  310|  85.9k|        unchecked: bool,
  311|  85.9k|    ) -> Parser<B, Self> {
  312|  85.9k|        Parser::new(
  313|  85.9k|            Lexer::new(
  314|  85.9k|                N3Lexer::new(N3LexerMode::NTriples, unchecked),
  315|  85.9k|                data,
  316|  85.9k|                is_ending,
  317|  85.9k|                MIN_BUFFER_SIZE,
  318|  85.9k|                MAX_BUFFER_SIZE,
  319|  85.9k|                Some(b"#"),
  320|  85.9k|            ),
  321|  85.9k|            Self {
  322|  85.9k|                stack: vec![NQuadsState::ExpectSubject],
  323|  85.9k|                subjects: Vec::new(),
  324|  85.9k|                predicates: Vec::new(),
  325|  85.9k|                objects: Vec::new(),
  326|  85.9k|            },
  327|  85.9k|            NQuadsRecognizerContext {
  328|  85.9k|                with_graph_name,
  329|  85.9k|                #[cfg(feature = "rdf-star")]
  330|  85.9k|                with_quoted_triples,
  331|  85.9k|                lexer_options: N3LexerOptions::default(),
  332|  85.9k|            },
  333|  85.9k|        )
  334|  85.9k|    }
_RINvMs_NtCs7ZOrRad3M6Z_5oxttl12line_formatsNtB5_16NQuadsRecognizer10new_parserRShEB7_:
  305|  42.7k|    pub fn new_parser<B>(
  306|  42.7k|        data: B,
  307|  42.7k|        is_ending: bool,
  308|  42.7k|        with_graph_name: bool,
  309|  42.7k|        #[cfg(feature = "rdf-star")] with_quoted_triples: bool,
  310|  42.7k|        unchecked: bool,
  311|  42.7k|    ) -> Parser<B, Self> {
  312|  42.7k|        Parser::new(
  313|  42.7k|            Lexer::new(
  314|  42.7k|                N3Lexer::new(N3LexerMode::NTriples, unchecked),
  315|  42.7k|                data,
  316|  42.7k|                is_ending,
  317|  42.7k|                MIN_BUFFER_SIZE,
  318|  42.7k|                MAX_BUFFER_SIZE,
  319|  42.7k|                Some(b"#"),
  320|  42.7k|            ),
  321|  42.7k|            Self {
  322|  42.7k|                stack: vec![NQuadsState::ExpectSubject],
  323|  42.7k|                subjects: Vec::new(),
  324|  42.7k|                predicates: Vec::new(),
  325|  42.7k|                objects: Vec::new(),
  326|  42.7k|            },
  327|  42.7k|            NQuadsRecognizerContext {
  328|  42.7k|                with_graph_name,
  329|  42.7k|                #[cfg(feature = "rdf-star")]
  330|  42.7k|                with_quoted_triples,
  331|  42.7k|                lexer_options: N3LexerOptions::default(),
  332|  42.7k|            },
  333|  42.7k|        )
  334|  42.7k|    }
_RINvMs_NtCs7ZOrRad3M6Z_5oxttl12line_formatsNtB5_16NQuadsRecognizer5errorReEB7_:
  337|  4.80M|    fn error(
  338|  4.80M|        mut self,
  339|  4.80M|        errors: &mut Vec<RuleRecognizerError>,
  340|  4.80M|        msg: impl Into<RuleRecognizerError>,
  341|  4.80M|    ) -> Self {
  342|  4.80M|        errors.push(msg.into());
  343|  4.80M|        self.stack.clear();
  344|  4.80M|        self.subjects.clear();
  345|  4.80M|        self.predicates.clear();
  346|  4.80M|        self.objects.clear();
  347|  4.80M|        self
  348|  4.80M|    }
_RNvXNtCs7ZOrRad3M6Z_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer20error_recovery_state:
   48|  4.69M|    fn error_recovery_state(mut self) -> Self {
   49|  4.69M|        self.stack.clear();
   50|  4.69M|        self.subjects.clear();
   51|  4.69M|        self.predicates.clear();
   52|  4.69M|        self.objects.clear();
   53|  4.69M|        self
   54|  4.69M|    }
_RNvXNtCs7ZOrRad3M6Z_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer14recognize_next:
   56|  9.71M|    fn recognize_next(
   57|  9.71M|        mut self,
   58|  9.71M|        token: TokenOrLineJump<N3Token<'_>>,
   59|  9.71M|        context: &mut NQuadsRecognizerContext,
   60|  9.71M|        results: &mut Vec<Quad>,
   61|  9.71M|        errors: &mut Vec<RuleRecognizerError>,
   62|  9.71M|    ) -> Self {
   63|  9.71M|        match self.stack.pop().unwrap_or(NQuadsState::ExpectSubject) {
   64|       |            NQuadsState::ExpectSubject => {
   65|  6.57M|                let TokenOrLineJump::Token(token) = token else {
   66|   674k|                    return if self.stack.is_empty() {
   67|   619k|                        self
   68|       |                    } else {
   69|  54.9k|                        self.error(
   70|  54.9k|                            errors,
   71|  54.9k|                            "line jumps are not allowed inside of quoted triples",
   72|  54.9k|                        )
   73|       |                    };
   74|       |                };
   75|   661k|                match token {
   76|  1.34M|                    N3Token::IriRef(s) => {
   77|  1.34M|                        self.subjects.push(NamedNode::new_unchecked(s).into());
   78|  1.34M|                        self.stack.push(NQuadsState::ExpectPredicate);
   79|  1.34M|                        self
   80|       |                    }
   81|   178k|                    N3Token::BlankNodeLabel(s) => {
   82|   178k|                        self.subjects.push(BlankNode::new_unchecked(s).into());
   83|   178k|                        self.stack.push(NQuadsState::ExpectPredicate);
   84|   178k|                        self
   85|       |                    }
   86|       |                    #[cfg(feature = "rdf-star")]
   87|  3.05M|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
   88|   661k|                        self.stack.push(NQuadsState::AfterQuotedSubject);
   89|   661k|                        self.stack.push(NQuadsState::ExpectSubject);
   90|   661k|                        self
   91|       |                    }
   92|  3.70M|                    _ => self.error(
   93|  3.70M|                        errors,
   94|  3.70M|                        "The subject of a triple should be an IRI or a blank node, TOKEN found",
   95|  3.70M|                    ),
   96|       |                }
   97|       |            }
   98|       |            NQuadsState::ExpectPredicate => {
   99|  1.43M|                let TokenOrLineJump::Token(token) = token else {
  100|   514k|                    return self.error(
  101|   514k|                        errors,
  102|   514k|                        "line jumps are not allowed in the middle of triples",
  103|   514k|                    );
  104|       |                };
  105|   918k|                match token {
  106|   462k|                    N3Token::IriRef(p) => {
  107|   462k|                        self.predicates.push(NamedNode::new_unchecked(p));
  108|   462k|                        self.stack.push(NQuadsState::ExpectedObject);
  109|   462k|                        self
  110|       |                    }
  111|   455k|                    _ => self.error(
  112|   455k|                        errors,
  113|   455k|                        "The predicate of a triple should be an IRI, TOKEN found",
  114|   455k|                    ),
  115|       |                }
  116|       |            }
  117|       |            NQuadsState::ExpectedObject => {
  118|   449k|                let TokenOrLineJump::Token(token) = token else {
  119|  9.25k|                    return self.error(
  120|  9.25k|                        errors,
  121|  9.25k|                        "line jumps are not allowed in the middle of triples",
  122|  9.25k|                    );
  123|       |                };
  124|  11.2k|                match token {
  125|  59.0k|                        N3Token::IriRef(o) => {
  126|  59.0k|                            self.objects
  127|  59.0k|                                .push(NamedNode::new_unchecked(o).into());
  128|  59.0k|                            self.stack
  129|  59.0k|                                .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  130|  59.0k|                            self
  131|       |                        }
  132|   105k|                        N3Token::BlankNodeLabel(o) => {
  133|   105k|                            self.objects.push(BlankNode::new_unchecked(o).into());
  134|   105k|                            self.stack
  135|   105k|                                .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  136|   105k|                            self
  137|       |                        }
  138|   247k|                        N3Token::String(value) => {
  139|   247k|                            self.stack
  140|   247k|                                .push(NQuadsState::ExpectLiteralAnnotationOrGraphNameOrDot { value });
  141|   247k|                            self
  142|       |                        }
  143|       |                        #[cfg(feature = "rdf-star")]
  144|  16.3k|                        N3Token::Punctuation("<<") if context.with_quoted_triples => {
  145|  11.2k|                            self.stack.push(NQuadsState::AfterQuotedObject);
  146|  11.2k|                            self.stack.push(NQuadsState::ExpectSubject);
  147|  11.2k|                            self
  148|       |                        }
  149|  17.5k|                        _ => self.error(
  150|  17.5k|                            errors,
  151|  17.5k|                            "The object of a triple should be an IRI, a blank node or a literal, TOKEN found",
  152|  17.5k|                        ),
  153|       |                    }
  154|       |            }
  155|   239k|            NQuadsState::ExpectLiteralAnnotationOrGraphNameOrDot { value } => match token {
  156|   159k|                TokenOrLineJump::Token(N3Token::LangTag(lang_tag)) => {
  157|   159k|                    self.objects.push(
  158|   159k|                        Literal::new_language_tagged_literal_unchecked(
  159|   159k|                            value,
  160|   159k|                            lang_tag.to_ascii_lowercase(),
  161|   159k|                        )
  162|   159k|                        .into(),
  163|   159k|                    );
  164|   159k|                    self.stack
  165|   159k|                        .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  166|   159k|                    self
  167|       |                }
  168|  72.5k|                TokenOrLineJump::Token(N3Token::Punctuation("^^")) => {
  169|  48.9k|                    self.stack
  170|  48.9k|                        .push(NQuadsState::ExpectLiteralDatatype { value });
  171|  48.9k|                    self
  172|       |                }
  173|       |                _ => {
  174|  30.8k|                    self.objects.push(Literal::new_simple_literal(value).into());
  175|  30.8k|                    self.stack
  176|  30.8k|                        .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  177|  30.8k|                    self.recognize_next(token, context, results, errors)
  178|       |                }
  179|       |            },
  180|  45.0k|            NQuadsState::ExpectLiteralDatatype { value } => {
  181|  45.0k|                let TokenOrLineJump::Token(token) = token else {
  182|  1.89k|                    return self.error(
  183|  1.89k|                        errors,
  184|  1.89k|                        "line jumps are not allowed in the middle of triples",
  185|  1.89k|                    );
  186|       |                };
  187|  43.1k|                match token {
  188|  37.6k|                    N3Token::IriRef(d) => {
  189|  37.6k|                        self.objects.push(
  190|  37.6k|                            Literal::new_typed_literal(value, NamedNode::new_unchecked(d)).into(),
  191|  37.6k|                        );
  192|  37.6k|                        self.stack
  193|  37.6k|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  194|  37.6k|                        self
  195|       |                    }
  196|  5.50k|                    _ => self.error(errors, "A literal datatype must be an IRI, found TOKEN"),
  197|       |                }
  198|       |            }
  199|       |            NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple => {
  200|   387k|                if self.stack.is_empty() {
  201|  53.6k|                    match token {
  202|  31.4k|                        TokenOrLineJump::Token(N3Token::IriRef(g)) if context.with_graph_name => {
  203|  31.4k|                            self.emit_quad(results, NamedNode::new_unchecked(g).into());
  204|  31.4k|                            self.stack.push(NQuadsState::ExpectDot);
  205|  31.4k|                            self
  206|       |                        }
  207|  22.1k|                        TokenOrLineJump::Token(N3Token::BlankNodeLabel(g))
  208|  22.1k|                            if context.with_graph_name =>
  209|  22.1k|                        {
  210|  22.1k|                            self.emit_quad(results, BlankNode::new_unchecked(g).into());
  211|  22.1k|                            self.stack.push(NQuadsState::ExpectDot);
  212|  22.1k|                            self
  213|       |                        }
  214|       |                        _ => {
  215|   284k|                            self.emit_quad(results, GraphName::DefaultGraph);
  216|   284k|                            self.stack.push(NQuadsState::ExpectDot);
  217|   284k|                            self.recognize_next(token, context, results, errors)
  218|       |                        }
  219|       |                    }
  220|  49.5k|                } else if token == TokenOrLineJump::Token(N3Token::Punctuation(">>")) {
  221|  40.9k|                    self
  222|       |                } else {
  223|  8.63k|                    self.error(errors, "Expecting the end of a quoted triple '>>'")
  224|       |                }
  225|       |            }
  226|       |            NQuadsState::ExpectDot => {
  227|   332k|                let TokenOrLineJump::Token(token) = token else {
  228|  32.6k|                    return self.error(errors, "Quads should be followed by a dot");
  229|       |                };
  230|   300k|                if let N3Token::Punctuation(".") = token {
  231|   220k|                    self.stack.push(NQuadsState::ExpectLineJump);
  232|   220k|                    self
  233|       |                } else {
  234|  79.9k|                    errors.push("Quads should be followed by a dot".into());
  235|  79.9k|                    self.recognize_next(TokenOrLineJump::Token(token), context, results, errors)
  236|       |                }
  237|       |            }
  238|       |            NQuadsState::ExpectLineJump => {
  239|   210k|                let TokenOrLineJump::Token(token) = token else {
  240|   125k|                    return self;
  241|       |                };
  242|  85.4k|                errors.push(
  243|  85.4k|                    format!(
  244|  85.4k|                        "Only a single triple or quad can be written in a line, found {token:?}"
  245|  85.4k|                    )
  246|  85.4k|                    .into(),
  247|  85.4k|                );
  248|  85.4k|                self.recognize_next(TokenOrLineJump::Token(token), context, results, errors)
  249|       |            }
  250|       |            #[cfg(feature = "rdf-star")]
  251|       |            NQuadsState::AfterQuotedSubject => {
  252|  35.4k|                let triple = Triple {
  253|  35.4k|                    subject: self.subjects.pop().unwrap(),
  254|  35.4k|                    predicate: self.predicates.pop().unwrap(),
  255|  35.4k|                    object: self.objects.pop().unwrap(),
  256|  35.4k|                };
  257|  35.4k|                self.subjects.push(triple.into());
  258|  35.4k|                self.stack.push(NQuadsState::ExpectPredicate);
  259|  35.4k|                self.recognize_next(token, context, results, errors)
  260|       |            }
  261|       |            #[cfg(feature = "rdf-star")]
  262|       |            NQuadsState::AfterQuotedObject => {
  263|  5.13k|                let triple = Triple {
  264|  5.13k|                    subject: self.subjects.pop().unwrap(),
  265|  5.13k|                    predicate: self.predicates.pop().unwrap(),
  266|  5.13k|                    object: self.objects.pop().unwrap(),
  267|  5.13k|                };
  268|  5.13k|                self.objects.push(triple.into());
  269|  5.13k|                self.stack
  270|  5.13k|                    .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  271|  5.13k|                self.recognize_next(token, context, results, errors)
  272|       |            }
  273|       |        }
  274|  9.71M|    }
_RNvXNtCs7ZOrRad3M6Z_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer13recognize_end:
  276|   128k|    fn recognize_end(
  277|   128k|        mut self,
  278|   128k|        _context: &mut NQuadsRecognizerContext,
  279|   128k|        results: &mut Vec<Quad>,
  280|   128k|        errors: &mut Vec<RuleRecognizerError>,
  281|   128k|    ) {
  282|   128k|        match &*self.stack {
  283|   128k|            [NQuadsState::ExpectSubject | NQuadsState::ExpectLineJump] | [] => (),
  284|     90|            [NQuadsState::ExpectDot] => errors.push("Triples should be followed by a dot".into()),
  285|       |            [NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple] => {
  286|    898|                self.emit_quad(results, GraphName::DefaultGraph);
  287|    898|                errors.push("Triples should be followed by a dot".into())
  288|       |            }
  289|    392|            [NQuadsState::ExpectLiteralAnnotationOrGraphNameOrDot { value }] => {
  290|    392|                self.objects.push(Literal::new_simple_literal(value).into());
  291|    392|                self.emit_quad(results, GraphName::DefaultGraph);
  292|    392|                errors.push("Triples should be followed by a dot".into())
  293|       |            }
  294|  3.07k|            _ => errors.push("Unexpected end".into()), // TODO
  295|       |        }
  296|   128k|    }
_RNvXNtCs7ZOrRad3M6Z_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer13lexer_options:
  298|  19.8M|    fn lexer_options(context: &NQuadsRecognizerContext) -> &N3LexerOptions {
  299|  19.8M|        &context.lexer_options
  300|  19.8M|    }
_RNvMs_NtCs7ZOrRad3M6Z_5oxttl12line_formatsNtB4_16NQuadsRecognizer9emit_quad:
  350|   339k|    fn emit_quad(&mut self, results: &mut Vec<Quad>, graph_name: GraphName) {
  351|   339k|        results.push(Quad {
  352|   339k|            subject: self.subjects.pop().unwrap(),
  353|   339k|            predicate: self.predicates.pop().unwrap(),
  354|   339k|            object: self.objects.pop().unwrap(),
  355|   339k|            graph_name,
  356|   339k|        })
  357|   339k|    }

_RNvMNtCs7ZOrRad3M6Z_5oxttl6nquadsNtB2_12NQuadsParser19with_quoted_triplesCsjjjxbQDSpyn_6nquads:
   69|   128k|    pub fn with_quoted_triples(mut self) -> Self {
   70|   128k|        self.with_quoted_triples = true;
   71|   128k|        self
   72|   128k|    }
_RNvMNtCs7ZOrRad3M6Z_5oxttl6nquadsNtB2_12NQuadsParser3newCsjjjxbQDSpyn_6nquads:
   51|   128k|    pub fn new() -> Self {
   52|   128k|        Self::default()
   53|   128k|    }
_RNvMNtCs7ZOrRad3M6Z_5oxttl6nquadsNtB2_12NQuadsParser9uncheckedCsjjjxbQDSpyn_6nquads:
   61|    347|    pub fn unchecked(mut self) -> Self {
   62|    347|        self.unchecked = true;
   63|    347|        self
   64|    347|    }
_RNvMs2_NtCs7ZOrRad3M6Z_5oxttl6nquadsNtB5_16NQuadsSerializer3newCsjjjxbQDSpyn_6nquads:
  491|  42.7k|    pub fn new() -> Self {
  492|  42.7k|        Self {}
  493|  42.7k|    }
_RINvMs2_NtCs7ZOrRad3M6Z_5oxttl6nquadsNtB6_16NQuadsSerializer10for_writerINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECsjjjxbQDSpyn_6nquads:
  514|  42.7k|    pub fn for_writer<W: Write>(self, writer: W) -> WriterNQuadsSerializer<W> {
  515|  42.7k|        WriterNQuadsSerializer {
  516|  42.7k|            writer,
  517|  42.7k|            low_level_writer: self.low_level(),
  518|  42.7k|        }
  519|  42.7k|    }
_RINvMs3_NtCs7ZOrRad3M6Z_5oxttl6nquadsINtB6_22WriterNQuadsSerializerINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE14serialize_quadRNtNtCsiVhMQ2GRKjW_5oxrdf6triple4QuadECsjjjxbQDSpyn_6nquads:
  610|   113k|    pub fn serialize_quad<'a>(&mut self, q: impl Into<QuadRef<'a>>) -> io::Result<()> {
  611|   113k|        self.low_level_writer.serialize_quad(q, &mut self.writer)
  612|   113k|    }
_RINvMs4_NtCs7ZOrRad3M6Z_5oxttl6nquadsNtB6_24LowLevelNQuadsSerializer14serialize_quadRNtNtCsiVhMQ2GRKjW_5oxrdf6triple4QuadQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECsjjjxbQDSpyn_6nquads:
  696|   113k|    pub fn serialize_quad<'a>(
  697|   113k|        &mut self,
  698|   113k|        q: impl Into<QuadRef<'a>>,
  699|   113k|        mut writer: impl Write,
  700|   113k|    ) -> io::Result<()> {
  701|   113k|        writeln!(writer, "{} .", q.into())
  702|   113k|    }
_RNvMs3_NtCs7ZOrRad3M6Z_5oxttl6nquadsINtB5_22WriterNQuadsSerializerINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE6finishCsjjjxbQDSpyn_6nquads:
  615|  42.7k|    pub fn finish(self) -> W {
  616|  42.7k|        self.writer
  617|  42.7k|    }
_RNvMNtCs7ZOrRad3M6Z_5oxttl6nquadsNtB2_12NQuadsParser9for_slice:
  163|  42.7k|    pub fn for_slice(self, slice: &[u8]) -> SliceNQuadsParser<'_> {
  164|  42.7k|        SliceNQuadsParser {
  165|  42.7k|            inner: NQuadsRecognizer::new_parser(
  166|  42.7k|                slice,
  167|  42.7k|                true,
  168|  42.7k|                true,
  169|  42.7k|                #[cfg(feature = "rdf-star")]
  170|  42.7k|                self.with_quoted_triples,
  171|  42.7k|                self.unchecked,
  172|  42.7k|            )
  173|  42.7k|            .into_iter(),
  174|  42.7k|        }
  175|  42.7k|    }
_RNvMNtCs7ZOrRad3M6Z_5oxttl6nquadsNtB2_12NQuadsParser9low_level:
  260|  85.9k|    pub fn low_level(self) -> LowLevelNQuadsParser {
  261|  85.9k|        LowLevelNQuadsParser {
  262|  85.9k|            parser: NQuadsRecognizer::new_parser(
  263|  85.9k|                Vec::new(),
  264|  85.9k|                false,
  265|  85.9k|                true,
  266|  85.9k|                #[cfg(feature = "rdf-star")]
  267|  85.9k|                self.with_quoted_triples,
  268|  85.9k|                self.unchecked,
  269|  85.9k|            ),
  270|  85.9k|        }
  271|  85.9k|    }
_RNvXs0_NtCs7ZOrRad3M6Z_5oxttl6nquadsNtB5_17SliceNQuadsParserNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next:
  388|   155k|    fn next(&mut self) -> Option<Self::Item> {
  389|   155k|        self.inner.next()
  390|   155k|    }
_RNvMs1_NtCs7ZOrRad3M6Z_5oxttl6nquadsNtB5_20LowLevelNQuadsParser17extend_from_slice:
  437|  5.68M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  438|  5.68M|        self.parser.extend_from_slice(other)
  439|  5.68M|    }
_RNvMs1_NtCs7ZOrRad3M6Z_5oxttl6nquadsNtB5_20LowLevelNQuadsParser3end:
  444|  85.9k|    pub fn end(&mut self) {
  445|  85.9k|        self.parser.end()
  446|  85.9k|    }
_RNvMs1_NtCs7ZOrRad3M6Z_5oxttl6nquadsNtB5_20LowLevelNQuadsParser6is_end:
  449|  85.9k|    pub fn is_end(&self) -> bool {
  450|  85.9k|        self.parser.is_end()
  451|  85.9k|    }
_RNvMs1_NtCs7ZOrRad3M6Z_5oxttl6nquadsNtB5_20LowLevelNQuadsParser10parse_next:
  457|  15.6M|    pub fn parse_next(&mut self) -> Option<Result<Quad, TurtleSyntaxError>> {
  458|  15.6M|        self.parser.parse_next()
  459|  15.6M|    }
_RNvMs2_NtCs7ZOrRad3M6Z_5oxttl6nquadsNtB5_16NQuadsSerializer9low_level:
  576|  42.7k|    pub fn low_level(self) -> LowLevelNQuadsSerializer {
  577|  42.7k|        LowLevelNQuadsSerializer {}
  578|  42.7k|    }

_RNvXs_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit5errorNtB4_17TurtleSyntaxErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmtCsjjjxbQDSpyn_6nquads:
   44|  9.67M|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   45|  9.67M|        if self.location.start.offset + 1 >= self.location.end.offset {
   46|  6.66M|            write!(
   47|  6.66M|                f,
   48|  6.66M|                "Parser error at line {} column {}: {}",
   49|  6.66M|                self.location.start.line + 1,
   50|  6.66M|                self.location.start.column + 1,
   51|  6.66M|                self.message
   52|  6.66M|            )
   53|  3.01M|        } else if self.location.start.line == self.location.end.line {
   54|  2.96M|            write!(
   55|  2.96M|                f,
   56|  2.96M|                "Parser error between at line {} between columns {} and column {}: {}",
   57|  2.96M|                self.location.start.line + 1,
   58|  2.96M|                self.location.start.column + 1,
   59|  2.96M|                self.location.end.column + 1,
   60|  2.96M|                self.message
   61|  2.96M|            )
   62|       |        } else {
   63|  47.2k|            write!(
   64|  47.2k|                f,
   65|  47.2k|                "Parser error between line {} column {} and line {} column {}: {}",
   66|  47.2k|                self.location.start.line + 1,
   67|  47.2k|                self.location.start.column + 1,
   68|  47.2k|                self.location.end.line + 1,
   69|  47.2k|                self.location.end.column + 1,
   70|  47.2k|                self.message
   71|  47.2k|            )
   72|       |        }
   73|  9.67M|    }
_RINvMNtNtCs7ZOrRad3M6Z_5oxttl7toolkit5errorNtB3_17TurtleSyntaxError3newNtNtCs3OstG5Tqy1X_5alloc6string6StringEB7_:
   22|  9.64M|    pub(crate) fn new(location: Range<TextPosition>, message: impl Into<String>) -> Self {
   23|  9.64M|        Self {
   24|  9.64M|            location,
   25|  9.64M|            message: message.into(),
   26|  9.64M|        }
   27|  9.64M|    }
_RINvMNtNtCs7ZOrRad3M6Z_5oxttl7toolkit5errorNtB3_17TurtleSyntaxError3newReEB7_:
   22|  33.6k|    pub(crate) fn new(location: Range<TextPosition>, message: impl Into<String>) -> Self {
   23|  33.6k|        Self {
   24|  33.6k|            location,
   25|  33.6k|            message: message.into(),
   26|  33.6k|        }
   27|  33.6k|    }

_RNvXNtNtCs7ZOrRad3M6Z_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB1a_3ops5range5RangejENtNtCs3OstG5Tqy1X_5alloc6string6StringEE4fromB6_:
   37|  3.03M|    fn from((location, message): (Range<usize>, S)) -> Self {
   38|  3.03M|        Self {
   39|  3.03M|            location,
   40|  3.03M|            message: message.into(),
   41|  3.03M|        }
   42|  3.03M|    }
_RNvXNtNtCs7ZOrRad3M6Z_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB1a_3ops5range5RangejEReEE4fromB6_:
   37|  1.65M|    fn from((location, message): (Range<usize>, S)) -> Self {
   38|  1.65M|        Self {
   39|  1.65M|            location,
   40|  1.65M|            message: message.into(),
   41|  1.65M|        }
   42|  1.65M|    }
_RNvXs_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejENtNtCs3OstG5Tqy1X_5alloc6string6StringEE4fromB8_:
   47|   160k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   48|   160k|        (*location.start()..*location.end() + 1, message).into()
   49|   160k|    }
_RNvXs_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejEReEE4fromB8_:
   47|  1.24M|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   48|  1.24M|        (*location.start()..*location.end() + 1, message).into()
   49|  1.24M|    }
_RNvXs0_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit5lexerNtB5_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTjNtNtCs3OstG5Tqy1X_5alloc6string6StringEE4fromB9_:
   53|   141k|    fn from((location, message): (usize, S)) -> Self {
   54|   141k|        (location..=location, message).into()
   55|   141k|    }
_RNvMs1_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE3newB9_:
   78|  85.9k|    pub fn new(
   79|  85.9k|        parser: R,
   80|  85.9k|        data: B,
   81|  85.9k|        is_ending: bool,
   82|  85.9k|        min_buffer_size: usize,
   83|  85.9k|        max_buffer_size: usize,
   84|  85.9k|        line_comment_start: Option<&'static [u8]>,
   85|  85.9k|    ) -> Self {
   86|  85.9k|        Self {
   87|  85.9k|            parser,
   88|  85.9k|            data,
   89|  85.9k|            position: Position {
   90|  85.9k|                line_start_buffer_offset: 0,
   91|  85.9k|                buffer_offset: 0,
   92|  85.9k|                global_offset: 0,
   93|  85.9k|                global_line: 0,
   94|  85.9k|            },
   95|  85.9k|            previous_position: Position {
   96|  85.9k|                line_start_buffer_offset: 0,
   97|  85.9k|                buffer_offset: 0,
   98|  85.9k|                global_offset: 0,
   99|  85.9k|                global_line: 0,
  100|  85.9k|            },
  101|  85.9k|            is_ending,
  102|  85.9k|            min_buffer_size,
  103|  85.9k|            max_buffer_size,
  104|  85.9k|            line_comment_start,
  105|  85.9k|        }
  106|  85.9k|    }
_RNvMs1_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE3newB9_:
   78|  42.7k|    pub fn new(
   79|  42.7k|        parser: R,
   80|  42.7k|        data: B,
   81|  42.7k|        is_ending: bool,
   82|  42.7k|        min_buffer_size: usize,
   83|  42.7k|        max_buffer_size: usize,
   84|  42.7k|        line_comment_start: Option<&'static [u8]>,
   85|  42.7k|    ) -> Self {
   86|  42.7k|        Self {
   87|  42.7k|            parser,
   88|  42.7k|            data,
   89|  42.7k|            position: Position {
   90|  42.7k|                line_start_buffer_offset: 0,
   91|  42.7k|                buffer_offset: 0,
   92|  42.7k|                global_offset: 0,
   93|  42.7k|                global_line: 0,
   94|  42.7k|            },
   95|  42.7k|            previous_position: Position {
   96|  42.7k|                line_start_buffer_offset: 0,
   97|  42.7k|                buffer_offset: 0,
   98|  42.7k|                global_offset: 0,
   99|  42.7k|                global_line: 0,
  100|  42.7k|            },
  101|  42.7k|            is_ending,
  102|  42.7k|            min_buffer_size,
  103|  42.7k|            max_buffer_size,
  104|  42.7k|            line_comment_start,
  105|  42.7k|        }
  106|  42.7k|    }
_RNvMs2_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE17extend_from_sliceB9_:
  110|  5.68M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  111|  5.68M|        self.shrink_data();
  112|  5.68M|        self.data.extend_from_slice(other);
  113|  5.68M|    }
_RNvMs2_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE3endB9_:
  116|  85.9k|    pub fn end(&mut self) {
  117|  85.9k|        self.is_ending = true;
  118|  85.9k|    }
_RNvMs2_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE11shrink_dataB9_:
  172|  5.68M|    fn shrink_data(&mut self) {
  173|  5.68M|        if self.position.line_start_buffer_offset > 0 {
  174|   556k|            self.data
  175|   556k|                .copy_within(self.position.line_start_buffer_offset.., 0);
  176|   556k|            self.data
  177|   556k|                .truncate(self.data.len() - self.position.line_start_buffer_offset);
  178|   556k|            self.position.buffer_offset -= self.position.line_start_buffer_offset;
  179|   556k|            self.position.line_start_buffer_offset = 0;
  180|   556k|            self.previous_position = self.position;
  181|  5.12M|        }
  182|  5.68M|    }
_RNvMs3_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE10parse_nextB9_:
  187|  19.0M|    pub fn parse_next(
  188|  19.0M|        &mut self,
  189|  19.0M|        options: &R::Options,
  190|  19.0M|    ) -> Option<Result<TokenOrLineJump<R::Token<'_>>, TurtleSyntaxError>> {
  191|  19.0M|        if self.skip_whitespaces_and_comments()? {
  192|  1.24M|            self.previous_position = self.position;
  193|  1.24M|            return Some(Ok(TokenOrLineJump::LineJump));
  194|  17.7M|        }
  195|  17.7M|        self.previous_position = self.position;
  196|  17.7M|        let Some((consumed, result)) = self.parser.recognize_next_token(
  197|  17.7M|            &self.data[self.position.buffer_offset..],
  198|  17.7M|            self.is_ending,
  199|  17.7M|            options,
  200|  17.7M|        ) else {
  201|  5.82M|            return if self.is_ending {
  202|   205k|                if self.position.buffer_offset == self.data.len() {
  203|   171k|                    None // We have finished
  204|       |                } else {
  205|  33.6k|                    let (new_line_jumps, new_line_start) =
  206|  33.6k|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  207|  33.6k|                            &self.data[self.position.buffer_offset..],
  208|  33.6k|                        );
  209|  33.6k|                    if new_line_jumps > 0 {
  210|  1.39k|                        self.position.line_start_buffer_offset =
  211|  1.39k|                            self.position.buffer_offset + new_line_start;
  212|  32.2k|                    }
  213|  33.6k|                    self.position.global_offset +=
  214|  33.6k|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  215|  33.6k|                    self.position.buffer_offset = self.data.len();
  216|  33.6k|                    self.position.global_line += new_line_jumps;
  217|  33.6k|                    let error = TurtleSyntaxError::new(
  218|  33.6k|                        self.last_token_location(),
  219|  33.6k|                        "Unexpected end of file",
  220|  33.6k|                    );
  221|  33.6k|                    Some(Err(error))
  222|       |                }
  223|       |            } else {
  224|  5.62M|                None
  225|       |            };
  226|       |        };
  227|  11.9M|        debug_assert!(
  228|      0|            consumed > 0,
  229|      0|            "The lexer must consume at least one byte each time"
  230|       |        );
  231|  11.9M|        debug_assert!(
  232|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  233|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  234|      0|            self.data.len() - self.position.buffer_offset
  235|       |        );
  236|  11.9M|        let (new_line_jumps, new_line_start) =
  237|  11.9M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  238|  11.9M|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  239|  11.9M|            );
  240|  11.9M|        if new_line_jumps > 0 {
  241|  68.5k|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  242|  11.8M|        }
  243|  11.9M|        self.position.buffer_offset += consumed;
  244|  11.9M|        self.position.global_offset += u64::try_from(consumed).unwrap();
  245|  11.9M|        self.position.global_line += new_line_jumps;
  246|  11.9M|        Some(result.map(TokenOrLineJump::Token).map_err(|e| {
  247|       |            TurtleSyntaxError::new(
  248|       |                self.location_from_buffer_offset_range(e.location),
  249|       |                e.message,
  250|       |            )
  251|  11.9M|        }))
  252|  19.0M|    }
_RNvMs3_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE10parse_nextB9_:
  187|   746k|    pub fn parse_next(
  188|   746k|        &mut self,
  189|   746k|        options: &R::Options,
  190|   746k|    ) -> Option<Result<TokenOrLineJump<R::Token<'_>>, TurtleSyntaxError>> {
  191|   746k|        if self.skip_whitespaces_and_comments()? {
  192|   113k|            self.previous_position = self.position;
  193|   113k|            return Some(Ok(TokenOrLineJump::LineJump));
  194|   633k|        }
  195|   633k|        self.previous_position = self.position;
  196|   633k|        let Some((consumed, result)) = self.parser.recognize_next_token(
  197|   633k|            &self.data[self.position.buffer_offset..],
  198|   633k|            self.is_ending,
  199|   633k|            options,
  200|   633k|        ) else {
  201|  85.5k|            return if self.is_ending {
  202|  85.5k|                if self.position.buffer_offset == self.data.len() {
  203|  85.5k|                    None // We have finished
  204|       |                } else {
  205|      0|                    let (new_line_jumps, new_line_start) =
  206|      0|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  207|      0|                            &self.data[self.position.buffer_offset..],
  208|      0|                        );
  209|      0|                    if new_line_jumps > 0 {
  210|      0|                        self.position.line_start_buffer_offset =
  211|      0|                            self.position.buffer_offset + new_line_start;
  212|      0|                    }
  213|      0|                    self.position.global_offset +=
  214|      0|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  215|      0|                    self.position.buffer_offset = self.data.len();
  216|      0|                    self.position.global_line += new_line_jumps;
  217|      0|                    let error = TurtleSyntaxError::new(
  218|      0|                        self.last_token_location(),
  219|      0|                        "Unexpected end of file",
  220|      0|                    );
  221|      0|                    Some(Err(error))
  222|       |                }
  223|       |            } else {
  224|      0|                None
  225|       |            };
  226|       |        };
  227|   548k|        debug_assert!(
  228|      0|            consumed > 0,
  229|      0|            "The lexer must consume at least one byte each time"
  230|       |        );
  231|   548k|        debug_assert!(
  232|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  233|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  234|      0|            self.data.len() - self.position.buffer_offset
  235|       |        );
  236|   548k|        let (new_line_jumps, new_line_start) =
  237|   548k|            Self::find_number_of_line_jumps_and_start_of_last_line(
  238|   548k|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  239|   548k|            );
  240|   548k|        if new_line_jumps > 0 {
  241|      0|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  242|   548k|        }
  243|   548k|        self.position.buffer_offset += consumed;
  244|   548k|        self.position.global_offset += u64::try_from(consumed).unwrap();
  245|   548k|        self.position.global_line += new_line_jumps;
  246|   548k|        Some(result.map(TokenOrLineJump::Token).map_err(|e| {
  247|       |            TurtleSyntaxError::new(
  248|       |                self.location_from_buffer_offset_range(e.location),
  249|       |                e.message,
  250|       |            )
  251|   548k|        }))
  252|   746k|    }
_RNCNvMs3_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit5lexerINtB7_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtBb_5lexer7N3LexerE10parse_next0Bb_:
  246|  4.66M|        Some(result.map(TokenOrLineJump::Token).map_err(|e| {
  247|  4.66M|            TurtleSyntaxError::new(
  248|  4.66M|                self.location_from_buffer_offset_range(e.location),
  249|  4.66M|                e.message,
  250|  4.66M|            )
  251|  4.66M|        }))
_RNvMs3_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE33location_from_buffer_offset_rangeB9_:
  254|  4.66M|    pub fn location_from_buffer_offset_range(
  255|  4.66M|        &self,
  256|  4.66M|        offset_range: Range<usize>,
  257|  4.66M|    ) -> Range<TextPosition> {
  258|  4.66M|        let start_offset = self.previous_position.buffer_offset + offset_range.start;
  259|  4.66M|        let (start_extra_line_jumps, start_line_start) =
  260|  4.66M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  261|  4.66M|                &self.data[self.previous_position.buffer_offset..start_offset],
  262|  4.66M|            );
  263|  4.66M|        let start_line_start = if start_extra_line_jumps > 0 {
  264|  7.39k|            start_line_start + self.previous_position.buffer_offset
  265|       |        } else {
  266|  4.65M|            self.previous_position.line_start_buffer_offset
  267|       |        };
  268|  4.66M|        let end_offset = self.previous_position.buffer_offset + offset_range.end;
  269|  4.66M|        let (end_extra_line_jumps, end_line_start) =
  270|  4.66M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  271|  4.66M|                &self.data[self.previous_position.buffer_offset..end_offset],
  272|  4.66M|            );
  273|  4.66M|        let end_line_start = if end_extra_line_jumps > 0 {
  274|  40.4k|            end_line_start + self.previous_position.buffer_offset
  275|       |        } else {
  276|  4.62M|            self.previous_position.line_start_buffer_offset
  277|       |        };
  278|  4.66M|        TextPosition {
  279|  4.66M|            line: self.previous_position.global_line + start_extra_line_jumps,
  280|  4.66M|            column: Self::column_from_bytes(&self.data[start_line_start..start_offset]),
  281|  4.66M|            offset: self.previous_position.global_offset
  282|  4.66M|                + u64::try_from(offset_range.start).unwrap(),
  283|  4.66M|        }..TextPosition {
  284|  4.66M|            line: self.previous_position.global_line + end_extra_line_jumps,
  285|  4.66M|            column: Self::column_from_bytes(&self.data[end_line_start..end_offset]),
  286|  4.66M|            offset: self.previous_position.global_offset + u64::try_from(offset_range.end).unwrap(),
  287|  4.66M|        }
  288|  4.66M|    }
_RNvMs3_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE19last_token_locationB9_:
  290|  5.01M|    pub fn last_token_location(&self) -> Range<TextPosition> {
  291|  5.01M|        self.text_position_from_position(&self.previous_position)
  292|  5.01M|            ..self.text_position_from_position(&self.position)
  293|  5.01M|    }
_RNvMs3_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE27text_position_from_positionB9_:
  295|  10.0M|    fn text_position_from_position(&self, position: &Position) -> TextPosition {
  296|  10.0M|        TextPosition {
  297|  10.0M|            line: position.global_line,
  298|  10.0M|            column: Self::column_from_bytes(
  299|  10.0M|                &self.data[position.line_start_buffer_offset..position.buffer_offset],
  300|  10.0M|            ),
  301|  10.0M|            offset: position.global_offset,
  302|  10.0M|        }
  303|  10.0M|    }
_RNvMs3_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE17last_token_sourceB9_:
  305|  4.97M|    pub fn last_token_source(&self) -> Cow<'_, str> {
  306|  4.97M|        String::from_utf8_lossy(
  307|  4.97M|            &self.data[self.previous_position.buffer_offset..self.position.buffer_offset],
  308|  4.97M|        )
  309|  4.97M|    }
_RNvMs3_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE6is_endB9_:
  311|  5.85M|    pub fn is_end(&self) -> bool {
  312|  5.85M|        self.is_ending && self.data.len() == self.position.buffer_offset
  313|  5.85M|    }
_RNvMs3_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE6is_endB9_:
  311|  85.5k|    pub fn is_end(&self) -> bool {
  312|  85.5k|        self.is_ending && self.data.len() == self.position.buffer_offset
  313|  85.5k|    }
_RNvMs3_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  316|  19.0M|    fn skip_whitespaces_and_comments(&mut self) -> Option<bool> {
  317|  19.0M|        if self.skip_whitespaces()? {
  318|  1.21M|            return Some(true);
  319|  17.8M|        }
  320|  17.8M|
  321|  17.8M|        let buf = &self.data[self.position.buffer_offset..];
  322|  17.8M|        if let Some(line_comment_start) = self.line_comment_start {
  323|  17.8M|            if buf.starts_with(line_comment_start) {
  324|       |                // Comment
  325|  81.6k|                if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  326|  36.1k|                    let mut end_position = line_comment_start.len() + end;
  327|  36.1k|                    if buf.get(end_position).copied() == Some(b'\r') {
  328|       |                        // We look for \n for Windows line end style
  329|  16.3k|                        if let Some(c) = buf.get(end_position + 1) {
  330|  9.69k|                            if *c == b'\n' {
  331|    137|                                end_position += 1;
  332|  9.55k|                            }
  333|  6.64k|                        } else if !self.is_ending {
  334|  6.61k|                            return None; // We need to read more
  335|     31|                        }
  336|  19.8k|                    }
  337|  29.5k|                    let comment_size = end_position + 1;
  338|  29.5k|                    self.position.buffer_offset += comment_size;
  339|  29.5k|                    self.position.line_start_buffer_offset = self.position.buffer_offset;
  340|  29.5k|                    self.position.global_offset += u64::try_from(comment_size).unwrap();
  341|  29.5k|                    self.position.global_line += 1;
  342|  29.5k|                    return Some(true);
  343|  45.5k|                }
  344|  45.5k|                if self.is_ending {
  345|  1.62k|                    self.position.buffer_offset = self.data.len(); // EOF
  346|  1.62k|                    return Some(false);
  347|  43.8k|                }
  348|  43.8k|                return None; // We need more data
  349|  17.7M|            }
  350|      0|        }
  351|  17.7M|        Some(false)
  352|  19.0M|    }
_RNvMs3_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  316|   746k|    fn skip_whitespaces_and_comments(&mut self) -> Option<bool> {
  317|   746k|        if self.skip_whitespaces()? {
  318|   113k|            return Some(true);
  319|   633k|        }
  320|   633k|
  321|   633k|        let buf = &self.data[self.position.buffer_offset..];
  322|   633k|        if let Some(line_comment_start) = self.line_comment_start {
  323|   633k|            if buf.starts_with(line_comment_start) {
  324|       |                // Comment
  325|      0|                if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  326|      0|                    let mut end_position = line_comment_start.len() + end;
  327|      0|                    if buf.get(end_position).copied() == Some(b'\r') {
  328|       |                        // We look for \n for Windows line end style
  329|      0|                        if let Some(c) = buf.get(end_position + 1) {
  330|      0|                            if *c == b'\n' {
  331|      0|                                end_position += 1;
  332|      0|                            }
  333|      0|                        } else if !self.is_ending {
  334|      0|                            return None; // We need to read more
  335|      0|                        }
  336|      0|                    }
  337|      0|                    let comment_size = end_position + 1;
  338|      0|                    self.position.buffer_offset += comment_size;
  339|      0|                    self.position.line_start_buffer_offset = self.position.buffer_offset;
  340|      0|                    self.position.global_offset += u64::try_from(comment_size).unwrap();
  341|      0|                    self.position.global_line += 1;
  342|      0|                    return Some(true);
  343|      0|                }
  344|      0|                if self.is_ending {
  345|      0|                    self.position.buffer_offset = self.data.len(); // EOF
  346|      0|                    return Some(false);
  347|      0|                }
  348|      0|                return None; // We need more data
  349|   633k|            }
  350|      0|        }
  351|   633k|        Some(false)
  352|   746k|    }
_RNvMs3_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  354|  19.0M|    fn skip_whitespaces(&mut self) -> Option<bool> {
  355|  19.0M|        let mut i = self.position.buffer_offset;
  356|  19.1M|        while let Some(c) = self.data.get(i) {
  357|  18.3M|            match c {
  358|  54.6k|                b' ' | b'\t' => {
  359|  54.6k|                    self.position.buffer_offset += 1;
  360|  54.6k|                    self.position.global_offset += 1;
  361|  54.6k|                }
  362|       |                b'\r' => {
  363|       |                    // We look for \n for Windows line end style
  364|  38.7k|                    let mut increment: u8 = 1;
  365|  38.7k|                    if let Some(c) = self.data.get(i + 1) {
  366|  30.4k|                        if *c == b'\n' {
  367|    788|                            increment += 1;
  368|  29.6k|                        }
  369|  8.35k|                    } else if !self.is_ending {
  370|  7.95k|                        return None; // We need to read more
  371|    396|                    }
  372|  30.8k|                    self.position.buffer_offset += usize::from(increment);
  373|  30.8k|                    self.position.line_start_buffer_offset = self.position.buffer_offset;
  374|  30.8k|                    self.position.global_offset += u64::from(increment);
  375|  30.8k|                    self.position.global_line += 1;
  376|  30.8k|                    return Some(true);
  377|       |                }
  378|       |                b'\n' => {
  379|  1.18M|                    self.position.buffer_offset += 1;
  380|  1.18M|                    self.position.line_start_buffer_offset = self.position.buffer_offset;
  381|  1.18M|                    self.position.global_offset += 1;
  382|  1.18M|                    self.position.global_line += 1;
  383|  1.18M|                    return Some(true);
  384|       |                }
  385|  17.0M|                _ => return Some(false),
  386|       |            }
  387|  54.6k|            i += 1;
  388|       |            // TODO: SIMD
  389|       |        }
  390|   805k|        Some(false)
  391|  19.0M|    }
_RNvMs3_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  354|   746k|    fn skip_whitespaces(&mut self) -> Option<bool> {
  355|   746k|        let mut i = self.position.buffer_offset;
  356|  1.10M|        while let Some(c) = self.data.get(i) {
  357|  1.02M|            match c {
  358|   362k|                b' ' | b'\t' => {
  359|   362k|                    self.position.buffer_offset += 1;
  360|   362k|                    self.position.global_offset += 1;
  361|   362k|                }
  362|       |                b'\r' => {
  363|       |                    // We look for \n for Windows line end style
  364|      0|                    let mut increment: u8 = 1;
  365|      0|                    if let Some(c) = self.data.get(i + 1) {
  366|      0|                        if *c == b'\n' {
  367|      0|                            increment += 1;
  368|      0|                        }
  369|      0|                    } else if !self.is_ending {
  370|      0|                        return None; // We need to read more
  371|      0|                    }
  372|      0|                    self.position.buffer_offset += usize::from(increment);
  373|      0|                    self.position.line_start_buffer_offset = self.position.buffer_offset;
  374|      0|                    self.position.global_offset += u64::from(increment);
  375|      0|                    self.position.global_line += 1;
  376|      0|                    return Some(true);
  377|       |                }
  378|       |                b'\n' => {
  379|   113k|                    self.position.buffer_offset += 1;
  380|   113k|                    self.position.line_start_buffer_offset = self.position.buffer_offset;
  381|   113k|                    self.position.global_offset += 1;
  382|   113k|                    self.position.global_line += 1;
  383|   113k|                    return Some(true);
  384|       |                }
  385|   548k|                _ => return Some(false),
  386|       |            }
  387|   362k|            i += 1;
  388|       |            // TODO: SIMD
  389|       |        }
  390|  85.5k|        Some(false)
  391|   746k|    }
_RNvMs3_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  393|  21.3M|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  394|  21.3M|        let mut num_of_jumps = 0;
  395|  21.3M|        let mut last_jump_pos = 0;
  396|  21.3M|        let mut previous_cr = 0;
  397|  21.3M|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  398|   183k|            if bytes[pos] == b'\r' {
  399|  51.4k|                previous_cr = pos;
  400|  51.4k|                num_of_jumps += 1;
  401|  51.4k|                last_jump_pos = pos + 1;
  402|  51.4k|            } else {
  403|   132k|                if previous_cr < pos - 1 {
  404|   107k|                    // We count \r\n as a single line jump
  405|   107k|                    num_of_jumps += 1;
  406|   107k|                }
  407|   132k|                last_jump_pos = pos + 1;
  408|       |            }
  409|       |        }
  410|  21.3M|        (num_of_jumps, last_jump_pos)
  411|  21.3M|    }
_RNvMs3_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  393|   548k|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  394|   548k|        let mut num_of_jumps = 0;
  395|   548k|        let mut last_jump_pos = 0;
  396|   548k|        let mut previous_cr = 0;
  397|   548k|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  398|      0|            if bytes[pos] == b'\r' {
  399|      0|                previous_cr = pos;
  400|      0|                num_of_jumps += 1;
  401|      0|                last_jump_pos = pos + 1;
  402|      0|            } else {
  403|      0|                if previous_cr < pos - 1 {
  404|      0|                    // We count \r\n as a single line jump
  405|      0|                    num_of_jumps += 1;
  406|      0|                }
  407|      0|                last_jump_pos = pos + 1;
  408|       |            }
  409|       |        }
  410|   548k|        (num_of_jumps, last_jump_pos)
  411|   548k|    }
_RNvMs3_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE17column_from_bytesB9_:
  413|  28.8M|    fn column_from_bytes(bytes: &[u8]) -> u64 {
  414|  28.8M|        match str::from_utf8(bytes) {
  415|  17.9M|            Ok(s) => u64::try_from(s.chars().count()).unwrap(),
  416|  10.8M|            Err(e) => {
  417|  10.8M|                if e.valid_up_to() == 0 {
  418|  1.35M|                    0
  419|       |                } else {
  420|  9.44M|                    Self::column_from_bytes(&bytes[..e.valid_up_to()])
  421|       |                }
  422|       |            }
  423|       |        }
  424|  28.8M|    }

_RNvXNtNtCs7ZOrRad3M6Z_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromNtNtCs3OstG5Tqy1X_5alloc6string6StringE4fromB6_:
   40|  85.4k|    fn from(message: S) -> Self {
   41|  85.4k|        Self {
   42|  85.4k|            message: message.into(),
   43|  85.4k|        }
   44|  85.4k|    }
_RNvXNtNtCs7ZOrRad3M6Z_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromReE4fromB6_:
   40|  4.89M|    fn from(message: S) -> Self {
   41|  4.89M|        Self {
   42|  4.89M|            message: message.into(),
   43|  4.89M|        }
   44|  4.89M|    }
_RNvMs_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit6parserINtB4_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB8_12line_formats16NQuadsRecognizerE3newB8_:
   57|  85.9k|    pub fn new(lexer: Lexer<B, RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   58|  85.9k|        Self {
   59|  85.9k|            lexer,
   60|  85.9k|            state: Some(recognizer),
   61|  85.9k|            context,
   62|  85.9k|            results: vec![],
   63|  85.9k|            errors: vec![],
   64|  85.9k|        }
   65|  85.9k|    }
_RNvMs_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit6parserINtB4_6ParserRShNtNtB8_12line_formats16NQuadsRecognizerE3newB8_:
   57|  42.7k|    pub fn new(lexer: Lexer<B, RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   58|  42.7k|        Self {
   59|  42.7k|            lexer,
   60|  42.7k|            state: Some(recognizer),
   61|  42.7k|            context,
   62|  42.7k|            results: vec![],
   63|  42.7k|            errors: vec![],
   64|  42.7k|        }
   65|  42.7k|    }
_RNvMs0_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit6parserINtB5_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_12line_formats16NQuadsRecognizerE6is_endB9_:
   70|  85.9k|    pub fn is_end(&self) -> bool {
   71|  85.9k|        self.state.is_none() && self.results.is_empty() && self.errors.is_empty()
   72|  85.9k|    }
_RNvMs0_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit6parserINtB5_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_12line_formats16NQuadsRecognizerE10parse_nextB9_:
   74|  15.6M|    pub fn parse_next(&mut self) -> Option<Result<RR::Output, TurtleSyntaxError>> {
   75|       |        loop {
   76|  24.2M|            if let Some(error) = self.errors.pop() {
   77|  4.97M|                return Some(Err(TurtleSyntaxError::new(
   78|  4.97M|                    self.lexer.last_token_location(),
   79|  4.97M|                    error
   80|  4.97M|                        .message
   81|  4.97M|                        .replace("TOKEN", &self.lexer.last_token_source()),
   82|  4.97M|                )));
   83|  19.3M|            }
   84|  19.3M|            if let Some(result) = self.results.pop() {
   85|   226k|                return Some(Ok(result));
   86|  19.0M|            }
   87|  19.0M|            if let Some(result) = self.lexer.parse_next(RR::lexer_options(&self.context)) {
   88|  13.2M|                match result {
   89|  8.52M|                    Ok(token) => {
   90|  8.52M|                        self.state = self.state.take().map(|state| {
   91|       |                            state.recognize_next(
   92|       |                                token,
   93|       |                                &mut self.context,
   94|       |                                &mut self.results,
   95|       |                                &mut self.errors,
   96|       |                            )
   97|  8.52M|                        });
   98|  8.52M|                        continue;
   99|       |                    }
  100|  4.69M|                    Err(e) => {
  101|  4.69M|                        self.state = self.state.take().map(RR::error_recovery_state);
  102|  4.69M|                        return Some(Err(e));
  103|       |                    }
  104|       |                }
  105|  5.85M|            }
  106|  5.85M|            if self.lexer.is_end() {
  107|   171k|                self.state.take()?.recognize_end(
  108|  85.9k|                    &mut self.context,
  109|  85.9k|                    &mut self.results,
  110|  85.9k|                    &mut self.errors,
  111|  85.9k|                )
  112|       |            } else {
  113|  5.68M|                return None;
  114|       |            }
  115|       |        }
  116|  15.6M|    }
_RNvMs0_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit6parserINtB5_6ParserRShNtNtB9_12line_formats16NQuadsRecognizerE10parse_nextB9_:
   74|   155k|    pub fn parse_next(&mut self) -> Option<Result<RR::Output, TurtleSyntaxError>> {
   75|       |        loop {
   76|   859k|            if let Some(error) = self.errors.pop() {
   77|      0|                return Some(Err(TurtleSyntaxError::new(
   78|      0|                    self.lexer.last_token_location(),
   79|      0|                    error
   80|      0|                        .message
   81|      0|                        .replace("TOKEN", &self.lexer.last_token_source()),
   82|      0|                )));
   83|   859k|            }
   84|   859k|            if let Some(result) = self.results.pop() {
   85|   113k|                return Some(Ok(result));
   86|   746k|            }
   87|   746k|            if let Some(result) = self.lexer.parse_next(RR::lexer_options(&self.context)) {
   88|   661k|                match result {
   89|   661k|                    Ok(token) => {
   90|   661k|                        self.state = self.state.take().map(|state| {
   91|       |                            state.recognize_next(
   92|       |                                token,
   93|       |                                &mut self.context,
   94|       |                                &mut self.results,
   95|       |                                &mut self.errors,
   96|       |                            )
   97|   661k|                        });
   98|   661k|                        continue;
   99|       |                    }
  100|      0|                    Err(e) => {
  101|      0|                        self.state = self.state.take().map(RR::error_recovery_state);
  102|      0|                        return Some(Err(e));
  103|       |                    }
  104|       |                }
  105|  85.5k|            }
  106|  85.5k|            if self.lexer.is_end() {
  107|  85.5k|                self.state.take()?.recognize_end(
  108|  42.7k|                    &mut self.context,
  109|  42.7k|                    &mut self.results,
  110|  42.7k|                    &mut self.errors,
  111|  42.7k|                )
  112|       |            } else {
  113|      0|                return None;
  114|       |            }
  115|       |        }
  116|   155k|    }
_RNCNvMs0_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit6parserINtB7_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtBb_12line_formats16NQuadsRecognizerE10parse_next0Bb_:
   90|  8.52M|                        self.state = self.state.take().map(|state| {
   91|  8.52M|                            state.recognize_next(
   92|  8.52M|                                token,
   93|  8.52M|                                &mut self.context,
   94|  8.52M|                                &mut self.results,
   95|  8.52M|                                &mut self.errors,
   96|  8.52M|                            )
   97|  8.52M|                        });
_RNCNvMs0_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit6parserINtB7_6ParserRShNtNtBb_12line_formats16NQuadsRecognizerE10parse_next0Bb_:
   90|   661k|                        self.state = self.state.take().map(|state| {
   91|   661k|                            state.recognize_next(
   92|   661k|                                token,
   93|   661k|                                &mut self.context,
   94|   661k|                                &mut self.results,
   95|   661k|                                &mut self.errors,
   96|   661k|                            )
   97|   661k|                        });
_RNvMs1_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit6parserINtB5_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_12line_formats16NQuadsRecognizerE3endB9_:
  121|  85.9k|    pub fn end(&mut self) {
  122|  85.9k|        self.lexer.end()
  123|  85.9k|    }
_RNvMs1_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit6parserINtB5_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_12line_formats16NQuadsRecognizerE17extend_from_sliceB9_:
  125|  5.68M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  126|  5.68M|        self.lexer.extend_from_slice(other)
  127|  5.68M|    }
_RNvXs2_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit6parserINtB5_6ParserRShNtNtB9_12line_formats16NQuadsRecognizerENtNtNtNtCscdEvteftVc2_4core4iter6traits7collect12IntoIterator9into_iterB9_:
  152|  42.7k|    fn into_iter(self) -> Self::IntoIter {
  153|  42.7k|        SliceIterator { parser: self }
  154|  42.7k|    }
_RNvXs4_NtNtCs7ZOrRad3M6Z_5oxttl7toolkit6parserINtB5_13SliceIteratorNtNtB9_12line_formats16NQuadsRecognizerENtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextB9_:
  212|   155k|    fn next(&mut self) -> Option<Self::Item> {
  213|   155k|        self.parser.parse_next()
  214|   155k|    }


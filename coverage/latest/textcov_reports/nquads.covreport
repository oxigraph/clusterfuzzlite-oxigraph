rust_fuzzer_test_input:
  209|  26.1k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  26.1k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  26.1k|                }
  223|  26.1k|
  224|  26.1k|                __libfuzzer_sys_run(bytes);
  225|  26.1k|                0
  226|  26.1k|            }
_RNvNvCs9GGLCkRBSt4_6nquads1__19___libfuzzer_sys_run:
  241|  26.1k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|  26.1k|            }
LLVMFuzzerTestOneInput:
   58|  26.1k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  26.1k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  26.1k|    });
   63|  26.1k|
   64|  26.1k|    match test_input {
   65|  26.1k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  26.1k|}
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}
_RNCNvCs5ixuek62Ty3_13libfuzzer_sys15test_input_wrap0B3_:
   59|  26.1k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  26.1k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  26.1k|        rust_fuzzer_test_input(data_slice)
   62|  26.1k|    });

_RINvNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECs4WjTcpTVJQo_5oxttl:
 1125|  94.3k|pub(crate) unsafe fn search_slice_with_raw(
 1126|  94.3k|    haystack: &[u8],
 1127|  94.3k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  94.3k|) -> Option<usize> {
 1129|  94.3k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  94.3k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  94.3k|    // a &[u8].
 1132|  94.3k|    let start = haystack.as_ptr();
 1133|  94.3k|    let end = start.add(haystack.len());
 1134|  94.3k|    let found = find_raw(start, end)?;
 1135|  4.39k|    Some(found.distance(start))
 1136|  94.3k|}
_RINvMs3_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4next0ECs4WjTcpTVJQo_5oxttl:
 1044|  12.1M|    pub(crate) unsafe fn next(
 1045|  12.1M|        &mut self,
 1046|  12.1M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  12.1M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  12.1M|        let found = find_raw(self.start, self.end)?;
 1057|  39.6k|        let result = found.distance(self.original_start);
 1058|  39.6k|        self.start = found.add(1);
 1059|  39.6k|        Some(result)
 1060|  12.1M|    }
_RINvNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr7memchr20ECs4WjTcpTVJQo_5oxttl:
 1125|   956k|pub(crate) unsafe fn search_slice_with_raw(
 1126|   956k|    haystack: &[u8],
 1127|   956k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|   956k|) -> Option<usize> {
 1129|   956k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|   956k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|   956k|    // a &[u8].
 1132|   956k|    let start = haystack.as_ptr();
 1133|   956k|    let end = start.add(haystack.len());
 1134|   956k|    let found = find_raw(start, end)?;
 1135|   488k|    Some(found.distance(start))
 1136|   956k|}
_RNvMs3_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  12.0M|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  12.0M|        Iter {
 1029|  12.0M|            original_start: haystack.as_ptr(),
 1030|  12.0M|            start: haystack.as_ptr(),
 1031|  12.0M|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  12.0M|            haystack: core::marker::PhantomData,
 1033|  12.0M|        }
 1034|  12.0M|    }
_RNvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE7needle1B8_:
  117|  88.0k|    pub(crate) fn needle1(&self) -> u8 {
  118|  88.0k|        self.s1
  119|  88.0k|    }
_RINvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|   412k|    unsafe fn search_chunk(
  671|   412k|        &self,
  672|   412k|        cur: *const u8,
  673|   412k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|   412k|    ) -> Option<*const u8> {
  675|   412k|        let chunk = V::load_unaligned(cur);
  676|   412k|        let eq1 = self.v1.cmpeq(chunk);
  677|   412k|        let eq2 = self.v2.cmpeq(chunk);
  678|   412k|        let mask = eq1.or(eq2).movemask();
  679|   412k|        if mask.has_non_zero() {
  680|  40.0k|            let mask1 = eq1.movemask();
  681|  40.0k|            let mask2 = eq2.movemask();
  682|  40.0k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|   372k|            None
  685|       |        }
  686|   412k|    }
_RINvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  1.40M|    unsafe fn search_chunk(
  671|  1.40M|        &self,
  672|  1.40M|        cur: *const u8,
  673|  1.40M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  1.40M|    ) -> Option<*const u8> {
  675|  1.40M|        let chunk = V::load_unaligned(cur);
  676|  1.40M|        let eq1 = self.v1.cmpeq(chunk);
  677|  1.40M|        let eq2 = self.v2.cmpeq(chunk);
  678|  1.40M|        let mask = eq1.or(eq2).movemask();
  679|  1.40M|        if mask.has_non_zero() {
  680|   305k|            let mask1 = eq1.movemask();
  681|   305k|            let mask2 = eq2.movemask();
  682|   305k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  1.09M|            None
  685|       |        }
  686|  1.40M|    }
_RNvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE3newB8_:
  111|  94.3k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  94.3k|        One { s1: needle, v1: V::splat(needle) }
  113|  94.3k|    }
_RNvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  13.8M|    pub(crate) fn needle2(&self) -> u8 {
  468|  13.8M|        self.s2
  469|  13.8M|    }
_RINvNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  14.8k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  14.8k|    start: *const u8,
 1150|  14.8k|    end: *const u8,
 1151|  14.8k|    confirm: F,
 1152|  14.8k|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  14.8k|    let mut ptr = start;
 1155|   102k|    while ptr < end {
 1156|  88.0k|        if confirm(*ptr) {
 1157|    783|            return Some(ptr);
 1158|  87.2k|        }
 1159|  87.2k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  14.0k|    None
 1162|  14.8k|}
_RNvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE8find_rawBa_:
  493|   191k|    pub(crate) unsafe fn find_raw(
  494|   191k|        &self,
  495|   191k|        start: *const u8,
  496|   191k|        end: *const u8,
  497|   191k|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   191k|        let topos = V::Mask::first_offset;
  505|   191k|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   191k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  26.2k|            return Some(cur);
  517|   165k|        }
  518|   165k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   165k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   165k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   165k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   231k|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  70.9k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  4.67k|                return Some(cur);
  554|  66.2k|            }
  555|  66.2k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   160k|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   149k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   149k|            return self.search_chunk(cur, topos);
  566|  11.2k|        }
  567|  11.2k|        None
  568|   191k|    }
_RNvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE3newBa_:
  450|  13.0M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  13.0M|        Two {
  452|  13.0M|            s1: needle1,
  453|  13.0M|            s2: needle2,
  454|  13.0M|            v1: V::splat(needle1),
  455|  13.0M|            v2: V::splat(needle2),
  456|  13.0M|        }
  457|  13.0M|    }
_RINvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  32.8k|    unsafe fn search_chunk(
  417|  32.8k|        &self,
  418|  32.8k|        cur: *const u8,
  419|  32.8k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  32.8k|    ) -> Option<*const u8> {
  421|  32.8k|        let chunk = V::load_unaligned(cur);
  422|  32.8k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  32.8k|        if mask.has_non_zero() {
  424|    596|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  32.2k|            None
  427|       |        }
  428|  32.8k|    }
_RNvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  13.8k|    pub(crate) unsafe fn find_raw(
  144|  13.8k|        &self,
  145|  13.8k|        start: *const u8,
  146|  13.8k|        end: *const u8,
  147|  13.8k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  13.8k|        let topos = V::Mask::first_offset;
  155|  13.8k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  13.8k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|    438|            return Some(cur);
  167|  13.4k|        }
  168|  13.4k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  13.4k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  13.4k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  13.4k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  20.6k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  7.24k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|     56|                return Some(cur);
  216|  7.19k|            }
  217|  7.19k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  13.4k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  11.6k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  11.6k|            return self.search_chunk(cur, topos);
  228|  1.73k|        }
  229|  1.73k|        None
  230|  13.8k|    }
_RNvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iE3newB8_:
  111|  94.3k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  94.3k|        One { s1: needle, v1: V::splat(needle) }
  113|  94.3k|    }
_RNvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iE8find_rawBa_:
  493|   759k|    pub(crate) unsafe fn find_raw(
  494|   759k|        &self,
  495|   759k|        start: *const u8,
  496|   759k|        end: *const u8,
  497|   759k|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   759k|        let topos = V::Mask::first_offset;
  505|   759k|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   759k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   194k|            return Some(cur);
  517|   564k|        }
  518|   564k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   564k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   564k|        if len >= Self::LOOP_SIZE {
  522|  1.03M|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|   757k|                let a = V::load_aligned(cur);
  526|   757k|                let b = V::load_aligned(cur.add(V::BYTES));
  527|   757k|                let eqa1 = self.v1.cmpeq(a);
  528|   757k|                let eqb1 = self.v1.cmpeq(b);
  529|   757k|                let eqa2 = self.v2.cmpeq(a);
  530|   757k|                let eqb2 = self.v2.cmpeq(b);
  531|   757k|                let or1 = eqa1.or(eqb1);
  532|   757k|                let or2 = eqa2.or(eqb2);
  533|   757k|                let or3 = or1.or(or2);
  534|   757k|                if or3.movemask_will_have_non_zero() {
  535|   125k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|   125k|                    if mask.has_non_zero() {
  537|  43.7k|                        return Some(cur.add(topos(mask)));
  538|  81.3k|                    }
  539|  81.3k|
  540|  81.3k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|  81.3k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|   631k|                }
  544|   631k|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   162k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   656k|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   232k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  15.0k|                return Some(cur);
  554|   217k|            }
  555|   217k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   424k|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   413k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   413k|            return self.search_chunk(cur, topos);
  566|  10.8k|        }
  567|  10.8k|        None
  568|   759k|    }
_RINvNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|  8.90M|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  8.90M|    start: *const u8,
 1150|  8.90M|    end: *const u8,
 1151|  8.90M|    confirm: F,
 1152|  8.90M|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  8.90M|    let mut ptr = start;
 1155|  22.7M|    while ptr < end {
 1156|  13.9M|        if confirm(*ptr) {
 1157|  57.3k|            return Some(ptr);
 1158|  13.8M|        }
 1159|  13.8M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  8.84M|    None
 1162|  8.90M|}
_RNvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  13.9M|    pub(crate) fn needle1(&self) -> u8 {
  462|  13.9M|        self.s1
  463|  13.9M|    }
_RNvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iE3newBa_:
  450|  13.0M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  13.0M|        Two {
  452|  13.0M|            s1: needle1,
  453|  13.0M|            s2: needle2,
  454|  13.0M|            v1: V::splat(needle1),
  455|  13.0M|            v2: V::splat(needle2),
  456|  13.0M|        }
  457|  13.0M|    }
_RNvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  62.0k|    pub(crate) unsafe fn find_raw(
  144|  62.0k|        &self,
  145|  62.0k|        start: *const u8,
  146|  62.0k|        end: *const u8,
  147|  62.0k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  62.0k|        let topos = V::Mask::first_offset;
  155|  62.0k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  62.0k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|    983|            return Some(cur);
  167|  61.0k|        }
  168|  61.0k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  61.0k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  61.0k|        if len >= Self::LOOP_SIZE {
  172|  46.8k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|  26.5k|                let a = V::load_aligned(cur);
  176|  26.5k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|  26.5k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|  26.5k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|  26.5k|                let eqa = self.v1.cmpeq(a);
  180|  26.5k|                let eqb = self.v1.cmpeq(b);
  181|  26.5k|                let eqc = self.v1.cmpeq(c);
  182|  26.5k|                let eqd = self.v1.cmpeq(d);
  183|  26.5k|                let or1 = eqa.or(eqb);
  184|  26.5k|                let or2 = eqc.or(eqd);
  185|  26.5k|                let or3 = or1.or(or2);
  186|  26.5k|                if or3.movemask_will_have_non_zero() {
  187|    926|                    let mask = eqa.movemask();
  188|    926|                    if mask.has_non_zero() {
  189|    194|                        return Some(cur.add(topos(mask)));
  190|    732|                    }
  191|    732|
  192|    732|                    let mask = eqb.movemask();
  193|    732|                    if mask.has_non_zero() {
  194|    353|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|    379|                    }
  196|    379|
  197|    379|                    let mask = eqc.movemask();
  198|    379|                    if mask.has_non_zero() {
  199|    176|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|    203|                    }
  201|    203|
  202|    203|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|    203|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  25.5k|                }
  206|  25.5k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  39.8k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|   131k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  71.4k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    456|                return Some(cur);
  216|  70.9k|            }
  217|  70.9k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  59.6k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  57.6k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  57.6k|            return self.search_chunk(cur, topos);
  228|  2.06k|        }
  229|  2.06k|        None
  230|  62.0k|    }
_RINvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|   191k|    unsafe fn search_chunk(
  417|   191k|        &self,
  418|   191k|        cur: *const u8,
  419|   191k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|   191k|    ) -> Option<*const u8> {
  421|   191k|        let chunk = V::load_unaligned(cur);
  422|   191k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|   191k|        if mask.has_non_zero() {
  424|  2.08k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|   189k|            None
  427|       |        }
  428|   191k|    }

_RNCNvMs2_NtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  13.9M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  13.9M|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  13.9M|                })
_RNvMs2_NtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNCNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|  88.0k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|  88.0k|                    b == self.sse2.needle1()
  194|  88.0k|                })
_RNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  62.0k|    unsafe fn find_raw_avx2(
  397|  62.0k|        &self,
  398|  62.0k|        start: *const u8,
  399|  62.0k|        end: *const u8,
  400|  62.0k|    ) -> Option<*const u8> {
  401|  62.0k|        self.avx2.find_raw(start, end)
  402|  62.0k|    }
_RNvMs2_NtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  13.0M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  13.0M|        Two {
  558|  13.0M|            sse2: generic::Two::new(needle1, needle2),
  559|  13.0M|            avx2: generic::Two::new(needle1, needle2),
  560|  13.0M|        }
  561|  13.0M|    }
_RNvMs2_NtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  13.0M|    pub unsafe fn find_raw(
  655|  13.0M|        &self,
  656|  13.0M|        start: *const u8,
  657|  13.0M|        end: *const u8,
  658|  13.0M|    ) -> Option<*const u8> {
  659|  13.0M|        if start >= end {
  660|  3.22M|            return None;
  661|  9.85M|        }
  662|  9.85M|        let len = end.distance(start);
  663|  9.85M|        if len < __m256i::BYTES {
  664|  9.09M|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  8.90M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  8.90M|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|   191k|                self.find_raw_sse2(start, end)
  674|       |            };
  675|   759k|        }
  676|   759k|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|   759k|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|   759k|        // enough to run on the vector routine. Pointer validity is caller's
  679|   759k|        // responsibility.
  680|   759k|        //
  681|   759k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|   759k|        // means we'd have to annotate this routine with `target_feature`.
  683|   759k|        // Which is fine, because this routine is `unsafe` anyway and the
  684|   759k|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|   759k|        // The real problem is that a routine with a `target_feature`
  686|   759k|        // annotation generally can't be inlined into caller code unless
  687|   759k|        // the caller code has the same target feature annotations. Namely,
  688|   759k|        // the common case (at time of writing) is for calling code to not
  689|   759k|        // have the `avx2` target feature enabled *at compile time*. Without
  690|   759k|        // `target_feature` on this routine, it can be inlined which will
  691|   759k|        // handle some of the short-haystack cases above without touching the
  692|   759k|        // architecture specific code.
  693|   759k|        self.find_raw_avx2(start, end)
  694|  13.0M|    }
_RNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  94.3k|    pub unsafe fn find_raw(
  180|  94.3k|        &self,
  181|  94.3k|        start: *const u8,
  182|  94.3k|        end: *const u8,
  183|  94.3k|    ) -> Option<*const u8> {
  184|  94.3k|        if start >= end {
  185|  3.59k|            return None;
  186|  90.7k|        }
  187|  90.7k|        let len = end.distance(start);
  188|  90.7k|        if len < __m256i::BYTES {
  189|  28.7k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  14.8k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  14.8k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  13.8k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  62.0k|        }
  201|  62.0k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  62.0k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  62.0k|        // enough to run on the vector routine. Pointer validity is caller's
  204|  62.0k|        // responsibility.
  205|  62.0k|        //
  206|  62.0k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  62.0k|        // means we'd have to annotate this routine with `target_feature`.
  208|  62.0k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  62.0k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  62.0k|        // The real problem is that a routine with a `target_feature`
  211|  62.0k|        // annotation generally can't be inlined into caller code unless
  212|  62.0k|        // the caller code has the same target feature annotations. Namely,
  213|  62.0k|        // the common case (at time of writing) is for calling code to not
  214|  62.0k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  62.0k|        // `target_feature` on this routine, it can be inlined which will
  216|  62.0k|        // handle some of the short-haystack cases above without touching the
  217|  62.0k|        // architecture specific code.
  218|  62.0k|        self.find_raw_avx2(start, end)
  219|  94.3k|    }
_RNvMs2_NtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|   191k|    unsafe fn find_raw_sse2(
  765|   191k|        &self,
  766|   191k|        start: *const u8,
  767|   191k|        end: *const u8,
  768|   191k|    ) -> Option<*const u8> {
  769|   191k|        self.sse2.find_raw(start, end)
  770|   191k|    }
_RNvMs2_NtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|   759k|    unsafe fn find_raw_avx2(
  805|   759k|        &self,
  806|   759k|        start: *const u8,
  807|   759k|        end: *const u8,
  808|   759k|    ) -> Option<*const u8> {
  809|   759k|        self.avx2.find_raw(start, end)
  810|   759k|    }
_RNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  13.8k|    unsafe fn find_raw_sse2(
  337|  13.8k|        &self,
  338|  13.8k|        start: *const u8,
  339|  13.8k|        end: *const u8,
  340|  13.8k|    ) -> Option<*const u8> {
  341|  13.8k|        self.sse2.find_raw(start, end)
  342|  13.8k|    }
_RNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  94.3k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  94.3k|        One {
   71|  94.3k|            sse2: generic::One::new(needle),
   72|  94.3k|            avx2: generic::One::new(needle),
   73|  94.3k|        }
   74|  94.3k|    }

_RNvNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  13.0M|pub(crate) fn memchr2_raw(
  221|  13.0M|    n1: u8,
  222|  13.0M|    n2: u8,
  223|  13.0M|    start: *const u8,
  224|  13.0M|    end: *const u8,
  225|  13.0M|) -> Option<*const u8> {
  226|  13.0M|    // SAFETY: We provide a valid function pointer type.
  227|  13.0M|    unsafe_ifunc!(
  228|  13.0M|        Two,
  229|  13.0M|        find_raw,
  230|  13.0M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  13.0M|        Option<*const u8>,
  232|  13.0M|        start,
  233|  13.0M|        end,
  234|  13.0M|        n1,
  235|  13.0M|        n2
  236|  13.0M|    )
  237|  13.0M|}
_RNvNvNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  13.0M|        unsafe fn find_avx2(
   79|  13.0M|            $($needle: u8),+,
   80|  13.0M|            $hay_start: *const u8,
   81|  13.0M|            $hay_end: *const u8,
   82|  13.0M|        ) -> $retty {
   83|  13.0M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  13.0M|            $memchrty::new_unchecked($($needle),+)
   85|  13.0M|                .$memchrfind($hay_start, $hay_end)
   86|  13.0M|        }
_RNvNvNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  94.3k|        unsafe fn find_avx2(
   79|  94.3k|            $($needle: u8),+,
   80|  94.3k|            $hay_start: *const u8,
   81|  94.3k|            $hay_end: *const u8,
   82|  94.3k|        ) -> $retty {
   83|  94.3k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  94.3k|            $memchrty::new_unchecked($($needle),+)
   85|  94.3k|                .$memchrfind($hay_start, $hay_end)
   86|  94.3k|        }
_RNvNvNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_646memchr10memchr_raw:
  174|  94.3k|pub(crate) fn memchr_raw(
  175|  94.3k|    n1: u8,
  176|  94.3k|    start: *const u8,
  177|  94.3k|    end: *const u8,
  178|  94.3k|) -> Option<*const u8> {
  179|  94.3k|    // SAFETY: We provide a valid function pointer type.
  180|  94.3k|    unsafe_ifunc!(
  181|  94.3k|        One,
  182|  94.3k|        find_raw,
  183|  94.3k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  94.3k|        Option<*const u8>,
  185|  94.3k|        start,
  186|  94.3k|        end,
  187|  94.3k|        n1
  188|  94.3k|    )
  189|  94.3k|}

_RNvXNtCs8oHv9mjUfNq_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  12.1M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  12.1M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  12.1M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  12.1M|    }
_RNvXNtCs8oHv9mjUfNq_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|   804k|    fn as_usize(self) -> usize {
   27|   804k|        self as usize
   28|   804k|    }

_RNCNvXs3_NtCs8oHv9mjUfNq_6memchr6memchrNtB7_7Memchr2NtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4next0Cs4WjTcpTVJQo_5oxttl:
  395|  12.1M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNCNvNtCs8oHv9mjUfNq_6memchr6memchr7memchr20Cs4WjTcpTVJQo_5oxttl:
   96|   956k|        generic::search_slice_with_raw(haystack, |start, end| {
   97|   956k|            memchr2_raw(needle1, needle2, start, end)
   98|   956k|        })
_RNvXs3_NtCs8oHv9mjUfNq_6memchr6memchrNtB5_7Memchr2NtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4nextCs4WjTcpTVJQo_5oxttl:
  390|  12.1M|    fn next(&mut self) -> Option<usize> {
  391|  12.1M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  12.1M|        // pointers returns will fall within the start and end bounds, and this
  393|  12.1M|        // upholds the safety contract of `self.it.next`.
  394|  12.1M|        unsafe {
  395|  12.1M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  12.1M|        }
  397|  12.1M|    }
_RNvNtCs8oHv9mjUfNq_6memchr6memchr6memchrCs4WjTcpTVJQo_5oxttl:
   27|  94.3k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  94.3k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  94.3k|    // pointer between start and end.
   30|  94.3k|    unsafe {
   31|  94.3k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  94.3k|        })
   34|  94.3k|    }
   35|  94.3k|}
_RNvNtCs8oHv9mjUfNq_6memchr6memchr12memchr2_iterCs4WjTcpTVJQo_5oxttl:
  232|  12.0M|pub fn memchr2_iter<'h>(
  233|  12.0M|    needle1: u8,
  234|  12.0M|    needle2: u8,
  235|  12.0M|    haystack: &'h [u8],
  236|  12.0M|) -> Memchr2<'h> {
  237|  12.0M|    Memchr2::new(needle1, needle2, haystack)
  238|  12.0M|}
_RNvMs2_NtCs8oHv9mjUfNq_6memchr6memchrNtB5_7Memchr23newCs4WjTcpTVJQo_5oxttl:
  377|  12.0M|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  12.0M|        Memchr2 {
  379|  12.0M|            needle1,
  380|  12.0M|            needle2,
  381|  12.0M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  12.0M|        }
  383|  12.0M|    }
_RNvNtCs8oHv9mjUfNq_6memchr6memchr7memchr2Cs4WjTcpTVJQo_5oxttl:
   92|   956k|pub fn memchr2(needle1: u8, needle2: u8, haystack: &[u8]) -> Option<usize> {
   93|   956k|    // SAFETY: memchr2_raw, when a match is found, always returns a valid
   94|   956k|    // pointer between start and end.
   95|   956k|    unsafe {
   96|   956k|        generic::search_slice_with_raw(haystack, |start, end| {
   97|       |            memchr2_raw(needle1, needle2, start, end)
   98|   956k|        })
   99|   956k|    }
  100|   956k|}
_RNvNtCs8oHv9mjUfNq_6memchr6memchr11memchr2_rawCs4WjTcpTVJQo_5oxttl:
  574|  13.0M|unsafe fn memchr2_raw(
  575|  13.0M|    needle1: u8,
  576|  13.0M|    needle2: u8,
  577|  13.0M|    start: *const u8,
  578|  13.0M|    end: *const u8,
  579|  13.0M|) -> Option<*const u8> {
  580|  13.0M|    #[cfg(target_arch = "x86_64")]
  581|  13.0M|    {
  582|  13.0M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  13.0M|    }
  584|  13.0M|    #[cfg(target_arch = "wasm32")]
  585|  13.0M|    {
  586|  13.0M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  13.0M|    }
  588|  13.0M|    #[cfg(target_arch = "aarch64")]
  589|  13.0M|    {
  590|  13.0M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  13.0M|    }
  592|  13.0M|    #[cfg(not(any(
  593|  13.0M|        target_arch = "x86_64",
  594|  13.0M|        target_arch = "wasm32",
  595|  13.0M|        target_arch = "aarch64"
  596|  13.0M|    )))]
  597|  13.0M|    {
  598|  13.0M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  13.0M|            .find_raw(start, end)
  600|  13.0M|    }
  601|  13.0M|}
_RNvNtCs8oHv9mjUfNq_6memchr6memchr10memchr_rawB3_:
  504|  94.3k|unsafe fn memchr_raw(
  505|  94.3k|    needle: u8,
  506|  94.3k|    start: *const u8,
  507|  94.3k|    end: *const u8,
  508|  94.3k|) -> Option<*const u8> {
  509|  94.3k|    #[cfg(target_arch = "x86_64")]
  510|  94.3k|    {
  511|  94.3k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  94.3k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  94.3k|        // time. This function also handles using a fallback if neither AVX2
  514|  94.3k|        // nor SSE2 (unusual) are available.
  515|  94.3k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  94.3k|    }
  517|  94.3k|    #[cfg(target_arch = "wasm32")]
  518|  94.3k|    {
  519|  94.3k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  94.3k|    }
  521|  94.3k|    #[cfg(target_arch = "aarch64")]
  522|  94.3k|    {
  523|  94.3k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  94.3k|    }
  525|  94.3k|    #[cfg(not(any(
  526|  94.3k|        target_arch = "x86_64",
  527|  94.3k|        target_arch = "wasm32",
  528|  94.3k|        target_arch = "aarch64"
  529|  94.3k|    )))]
  530|  94.3k|    {
  531|  94.3k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  94.3k|    }
  533|  94.3k|}
_RNCNvNtCs8oHv9mjUfNq_6memchr6memchr6memchr0B5_:
   31|  94.3k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|  94.3k|            memchr_raw(needle, start, end)
   33|  94.3k|        })

_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86sse2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  225|   525k|        unsafe fn movemask(self) -> SensibleMoveMask {
  226|   525k|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  227|   525k|        }
_RNvXs_NtCs8oHv9mjUfNq_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  148|  2.95M|    fn has_non_zero(self) -> bool {
  149|  2.95M|        self.0 != 0
  150|  2.95M|    }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  275|  3.40M|        unsafe fn movemask(self) -> SensibleMoveMask {
  276|  3.40M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  277|  3.40M|        }
_RNvXs_NtCs8oHv9mjUfNq_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  173|   474k|    fn first_offset(self) -> usize {
  174|   474k|        // We are dealing with little endian here (and if we aren't, we swap
  175|   474k|        // the bytes so we are in practice), where the most significant byte
  176|   474k|        // is at a higher address. That means the least significant bit that
  177|   474k|        // is set corresponds to the position of our first matching byte.
  178|   474k|        // That position corresponds to the number of zeros after the least
  179|   474k|        // significant bit.
  180|   474k|        self.get_for_offset().trailing_zeros() as usize
  181|   474k|    }
_RNvYNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtNtCs8oHv9mjUfNq_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   65|   783k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   66|   783k|        self.movemask().has_non_zero()
   67|   783k|    }
_RNvMNtCs8oHv9mjUfNq_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  128|   474k|    fn get_for_offset(self) -> u32 {
  129|   474k|        #[cfg(target_endian = "big")]
  130|   474k|        {
  131|   474k|            self.0.swap_bytes()
  132|   474k|        }
  133|   474k|        #[cfg(target_endian = "little")]
  134|   474k|        {
  135|   474k|            self.0
  136|   474k|        }
  137|   474k|    }
_RNvXs_NtCs8oHv9mjUfNq_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  163|   552k|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  164|   552k|        SensibleMoveMask(self.0 | other.0)
  165|   552k|    }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86sse2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  230|   857k|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  231|   857k|            _mm_cmpeq_epi8(self, vector2)
  232|   857k|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  265|  1.62M|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  266|  1.62M|            _mm256_load_si256(data as *const __m256i)
  267|  1.62M|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector2or:
  290|  3.75M|        unsafe fn or(self, vector2: Self) -> __m256i {
  291|  3.75M|            _mm256_or_si256(self, vector2)
  292|  3.75M|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  280|  6.13M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  281|  6.13M|            _mm256_cmpeq_epi8(self, vector2)
  282|  6.13M|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86sse2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  220|   445k|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  221|   445k|            _mm_loadu_si128(data as *const __m128i)
  222|   445k|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86sse2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  210|  26.2M|        unsafe fn splat(byte: u8) -> __m128i {
  211|  26.2M|            _mm_set1_epi8(byte as i8)
  212|  26.2M|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86sse2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iNtB4_6Vector2or:
  240|   412k|        unsafe fn or(self, vector2: Self) -> __m128i {
  241|   412k|            _mm_or_si128(self, vector2)
  242|   412k|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  270|  1.59M|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  271|  1.59M|            _mm256_loadu_si256(data as *const __m256i)
  272|  1.59M|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  260|  26.2M|        unsafe fn splat(byte: u8) -> __m256i {
  261|  26.2M|            _mm256_set1_epi8(byte as i8)
  262|  26.2M|        }

_RNvMs2_NtCsfr4O1C3G5Ja_9once_cell3impINtB5_8OnceCellNtNtCsdBW21Yiwikk_5alloc6string6StringE14is_initializedCs5ixuek62Ty3_13libfuzzer_sys:
   49|  26.1k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  26.1k|        // An `Acquire` load is enough because that makes all the initialization
   51|  26.1k|        // operations visible to us, and, this being a fast path, weaker
   52|  26.1k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  26.1k|        // `SeqCst` operations on the slow path.
   54|  26.1k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  26.1k|    }

_RNvMs4_NtCsfr4O1C3G5Ja_9once_cell4syncINtB5_8OnceCellNtNtCsdBW21Yiwikk_5alloc6string6StringE3getCs5ixuek62Ty3_13libfuzzer_sys:
  963|  26.1k|        pub fn get(&self) -> Option<&T> {
  964|  26.1k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  26.1k|                None
  969|       |            }
  970|  26.1k|        }

_RNvMCsebFzSuz8Vhk_10oxilangtagINtB2_11LanguageTagReE10into_innerCs4WjTcpTVJQo_5oxttl:
   54|  28.6k|    pub fn into_inner(self) -> T {
   55|  28.6k|        self.tag
   56|  28.6k|    }
_RNvMCsebFzSuz8Vhk_10oxilangtagINtB2_11LanguageTagReE5parseCs4WjTcpTVJQo_5oxttl:
   41|  51.7k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   42|  51.7k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   43|  28.6k|        Ok(Self { tag, positions })
   44|  51.7k|    }
_RNvXsE_CsebFzSuz8Vhk_10oxilangtagNtB5_16VoidOutputBufferNtNtCsl2lhD68vXAd_4core7default7Default7defaultCs4WjTcpTVJQo_5oxttl:
  547|  51.7k|#[derive(Default)]
_RINvCsebFzSuz8Vhk_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECsbrE1BkJ52QU_5oxrdf:
  621|  50.6k|fn parse_langtag(
  622|  50.6k|    input: &str,
  623|  50.6k|    output: &mut impl OutputBuffer,
  624|  50.6k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  625|  50.6k|    #[derive(PartialEq, Eq)]
  626|  50.6k|    enum State {
  627|  50.6k|        Start,
  628|  50.6k|        AfterLanguage,
  629|  50.6k|        AfterExtLang,
  630|  50.6k|        AfterScript,
  631|  50.6k|        AfterRegion,
  632|  50.6k|        InExtension { expected: bool },
  633|  50.6k|        InPrivateUse { expected: bool },
  634|  50.6k|    }
  635|  50.6k|
  636|  50.6k|    let mut state = State::Start;
  637|  50.6k|    let mut language_end = 0;
  638|  50.6k|    let mut extlang_end = 0;
  639|  50.6k|    let mut script_end = 0;
  640|  50.6k|    let mut region_end = 0;
  641|  50.6k|    let mut variant_end = 0;
  642|  50.6k|    let mut extension_end = 0;
  643|  50.6k|    let mut extlangs_count = 0;
  644|  82.2k|    for (subtag, end) in SubTagIterator::new(input) {
  645|  82.2k|        if subtag.is_empty() {
  646|      0|            return Err(LanguageTagParseError {
  647|      0|                kind: TagParseErrorKind::EmptySubtag,
  648|      0|            });
  649|  82.2k|        }
  650|  82.2k|        if subtag.len() > 8 {
  651|  4.96k|            return Err(LanguageTagParseError {
  652|  4.96k|                kind: TagParseErrorKind::SubtagTooLong,
  653|  4.96k|            });
  654|  77.2k|        }
  655|  77.2k|        if state == State::Start {
  656|       |            // Primary language
  657|  45.7k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  658|  7.02k|                return Err(LanguageTagParseError {
  659|  7.02k|                    kind: TagParseErrorKind::InvalidLanguage,
  660|  7.02k|                });
  661|  38.7k|            }
  662|  38.7k|            language_end = end;
  663|  38.7k|            output.extend(to_lowercase(subtag));
  664|  38.7k|            if subtag.len() < 4 {
  665|  19.9k|                // extlangs are only allowed for short language tags
  666|  19.9k|                state = State::AfterLanguage;
  667|  19.9k|            } else {
  668|  18.7k|                state = State::AfterExtLang;
  669|  18.7k|            }
  670|  31.5k|        } else if let State::InPrivateUse { .. } = state {
  671|  1.85k|            if !is_alphanumeric(subtag) {
  672|      0|                return Err(LanguageTagParseError {
  673|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  674|      0|                });
  675|  1.85k|            }
  676|  1.85k|            output.push('-');
  677|  1.85k|            output.extend(to_lowercase(subtag));
  678|  1.85k|            state = State::InPrivateUse { expected: false };
  679|  29.6k|        } else if subtag == "x" || subtag == "X" {
  680|       |            // We make sure extension is found
  681|  2.47k|            if let State::InExtension { expected: true } = state {
  682|    630|                return Err(LanguageTagParseError {
  683|    630|                    kind: TagParseErrorKind::EmptyExtension,
  684|    630|                });
  685|  1.84k|            }
  686|  1.84k|            output.push('-');
  687|  1.84k|            output.push('x');
  688|  1.84k|            state = State::InPrivateUse { expected: true };
  689|  27.1k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  690|       |            // We make sure extension is found
  691|  10.4k|            if let State::InExtension { expected: true } = state {
  692|    784|                return Err(LanguageTagParseError {
  693|    784|                    kind: TagParseErrorKind::EmptyExtension,
  694|    784|                });
  695|  9.64k|            }
  696|  9.64k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  697|  9.64k|            output.push('-');
  698|  9.64k|            output.push(extension_tag);
  699|  9.64k|            state = State::InExtension { expected: true };
  700|  16.7k|        } else if let State::InExtension { .. } = state {
  701|  1.82k|            if !is_alphanumeric(subtag) {
  702|      0|                return Err(LanguageTagParseError {
  703|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  704|      0|                });
  705|  1.82k|            }
  706|  1.82k|            extension_end = end;
  707|  1.82k|            output.push('-');
  708|  1.82k|            output.extend(to_lowercase(subtag));
  709|  1.82k|            state = State::InExtension { expected: false };
  710|  14.9k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  711|  2.06k|            extlangs_count += 1;
  712|  2.06k|            if extlangs_count > 3 {
  713|      4|                return Err(LanguageTagParseError {
  714|      4|                    kind: TagParseErrorKind::TooManyExtlangs,
  715|      4|                });
  716|  2.06k|            }
  717|  2.06k|            // valid extlangs
  718|  2.06k|            extlang_end = end;
  719|  2.06k|            output.push('-');
  720|  2.06k|            output.extend(to_lowercase(subtag));
  721|  12.8k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  722|  10.8k|            && subtag.len() == 4
  723|  1.69k|            && is_alphabetic(subtag)
  724|  1.69k|        {
  725|  1.69k|            // Script
  726|  1.69k|            script_end = end;
  727|  1.69k|            output.push('-');
  728|  1.69k|            output.extend(to_uppercase_first(subtag));
  729|  1.69k|            state = State::AfterScript;
  730|  11.1k|        } else if (state == State::AfterLanguage
  731|  6.22k|            || state == State::AfterExtLang
  732|  2.02k|            || state == State::AfterScript)
  733|  9.63k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  734|  4.03k|                || subtag.len() == 3 && is_numeric(subtag))
  735|  5.59k|        {
  736|  5.59k|            // Region
  737|  5.59k|            region_end = end;
  738|  5.59k|            output.push('-');
  739|  5.59k|            output.extend(to_uppercase(subtag));
  740|  5.59k|            state = State::AfterRegion;
  741|  5.59k|        } else if (state == State::AfterLanguage
  742|  4.94k|            || state == State::AfterExtLang
  743|  1.53k|            || state == State::AfterScript
  744|  1.53k|            || state == State::AfterRegion)
  745|  5.56k|            && is_alphanumeric(subtag)
  746|  5.56k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  747|  2.73k|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  748|  2.83k|        {
  749|  2.83k|            // Variant
  750|  2.83k|            variant_end = end;
  751|  2.83k|            output.push('-');
  752|  2.83k|            output.extend(to_lowercase(subtag));
  753|  2.83k|            state = State::AfterRegion;
  754|  2.83k|        } else {
  755|  2.73k|            return Err(LanguageTagParseError {
  756|  2.73k|                kind: TagParseErrorKind::InvalidSubtag,
  757|  2.73k|            });
  758|       |        }
  759|       |    }
  760|       |
  761|       |    //We make sure we are in a correct final state
  762|  34.4k|    if let State::InExtension { expected: true } = state {
  763|  6.40k|        return Err(LanguageTagParseError {
  764|  6.40k|            kind: TagParseErrorKind::EmptyExtension,
  765|  6.40k|        });
  766|  28.0k|    }
  767|  28.0k|    if let State::InPrivateUse { expected: true } = state {
  768|    588|        return Err(LanguageTagParseError {
  769|    588|            kind: TagParseErrorKind::EmptyPrivateUse,
  770|    588|        });
  771|  27.4k|    }
  772|  27.4k|
  773|  27.4k|    //We make sure we have not skipped anyone
  774|  27.4k|    if extlang_end < language_end {
  775|  25.4k|        extlang_end = language_end;
  776|  25.4k|    }
  777|  27.4k|    if script_end < extlang_end {
  778|  25.8k|        script_end = extlang_end;
  779|  25.8k|    }
  780|  27.4k|    if region_end < script_end {
  781|  24.5k|        region_end = script_end;
  782|  24.5k|    }
  783|  27.4k|    if variant_end < region_end {
  784|  24.6k|        variant_end = region_end;
  785|  24.6k|    }
  786|  27.4k|    if extension_end < variant_end {
  787|  26.6k|        extension_end = variant_end;
  788|  26.6k|    }
  789|       |
  790|  27.4k|    Ok(TagElementsPositions {
  791|  27.4k|        language_end,
  792|  27.4k|        extlang_end,
  793|  27.4k|        script_end,
  794|  27.4k|        region_end,
  795|  27.4k|        variant_end,
  796|  27.4k|        extension_end,
  797|  27.4k|    })
  798|  50.6k|}
_RINvXsr_CsebFzSuz8Vhk_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECsbrE1BkJ52QU_5oxrdf:
  560|  1.15k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsebFzSuz8Vhk_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECsbrE1BkJ52QU_5oxrdf:
  560|  47.3k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvCsebFzSuz8Vhk_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECsbrE1BkJ52QU_5oxrdf:
  576|  51.7k|fn parse_language_tag(
  577|  51.7k|    input: &str,
  578|  51.7k|    output: &mut impl OutputBuffer,
  579|  51.7k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  580|       |    //grandfathered tags
  581|  51.7k|    if let Some(tag) = GRANDFATHEREDS
  582|  51.7k|        .iter()
  583|  51.7k|        .find(|record| record.eq_ignore_ascii_case(input))
  584|       |    {
  585|      0|        output.push_str(tag);
  586|      0|        Ok(TagElementsPositions {
  587|      0|            language_end: tag.len(),
  588|      0|            extlang_end: tag.len(),
  589|      0|            script_end: tag.len(),
  590|      0|            region_end: tag.len(),
  591|      0|            variant_end: tag.len(),
  592|      0|            extension_end: tag.len(),
  593|      0|        })
  594|  51.7k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  595|       |        // private use
  596|  1.15k|        if !is_alphanumeric_or_dash(input) {
  597|      0|            Err(LanguageTagParseError {
  598|      0|                kind: TagParseErrorKind::ForbiddenChar,
  599|      0|            })
  600|  1.15k|        } else if input.len() == 2 {
  601|      0|            Err(LanguageTagParseError {
  602|      0|                kind: TagParseErrorKind::EmptyPrivateUse,
  603|      0|            })
  604|       |        } else {
  605|  1.15k|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  606|  1.15k|            Ok(TagElementsPositions {
  607|  1.15k|                language_end: input.len(),
  608|  1.15k|                extlang_end: input.len(),
  609|  1.15k|                script_end: input.len(),
  610|  1.15k|                region_end: input.len(),
  611|  1.15k|                variant_end: input.len(),
  612|  1.15k|                extension_end: input.len(),
  613|  1.15k|            })
  614|       |        }
  615|       |    } else {
  616|  50.6k|        parse_langtag(input, output)
  617|       |    }
  618|  51.7k|}
_RINvXsr_CsebFzSuz8Vhk_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECsbrE1BkJ52QU_5oxrdf:
  560|  5.59k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsebFzSuz8Vhk_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECsbrE1BkJ52QU_5oxrdf:
  560|  1.69k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCsebFzSuz8Vhk_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0CsbrE1BkJ52QU_5oxrdf:
  583|  1.34M|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvCsebFzSuz8Vhk_10oxilangtag23is_alphanumeric_or_dashCsbrE1BkJ52QU_5oxrdf:
  875|  1.15k|fn is_alphanumeric_or_dash(s: &str) -> bool {
  876|  1.15k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  877|  1.15k|}
_RNvXsw_CsebFzSuz8Vhk_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4nextCsbrE1BkJ52QU_5oxrdf:
  851|   116k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  852|   116k|        let tag = self.split.next()?;
  853|  82.2k|        let tag_end = self.position + tag.len();
  854|  82.2k|        self.position = tag_end + 1;
  855|  82.2k|        Some((tag, tag_end))
  856|   116k|    }
_RNvCsebFzSuz8Vhk_10oxilangtag12to_lowercaseCsbrE1BkJ52QU_5oxrdf:
  892|  47.3k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  893|  47.3k|    s.chars().map(|c| c.to_ascii_lowercase())
  894|  47.3k|}
_RNvCsebFzSuz8Vhk_10oxilangtag10is_numericCsbrE1BkJ52QU_5oxrdf:
  865|  2.71k|fn is_numeric(s: &str) -> bool {
  866|  2.71k|    s.chars().all(|x| x.is_ascii_digit())
  867|  2.71k|}
_RNvCsebFzSuz8Vhk_10oxilangtag12to_uppercaseCsbrE1BkJ52QU_5oxrdf:
  880|  5.59k|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  881|  5.59k|    s.chars().map(|c| c.to_ascii_uppercase())
  882|  5.59k|}
_RNvMsv_CsebFzSuz8Vhk_10oxilangtagNtB5_14SubTagIterator3newCsbrE1BkJ52QU_5oxrdf:
  839|  50.6k|    fn new(input: &'a str) -> Self {
  840|  50.6k|        Self {
  841|  50.6k|            split: input.split('-'),
  842|  50.6k|            position: 0,
  843|  50.6k|        }
  844|  50.6k|    }
_RNvXs_NvCsebFzSuz8Vhk_10oxilangtag13parse_langtagNtB4_5StateNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCsbrE1BkJ52QU_5oxrdf:
  625|   144k|    #[derive(PartialEq, Eq)]
_RNvCsebFzSuz8Vhk_10oxilangtag15is_alphanumericCsbrE1BkJ52QU_5oxrdf:
  870|  19.6k|fn is_alphanumeric(s: &str) -> bool {
  871|  19.6k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  872|  19.6k|}
_RNvCsebFzSuz8Vhk_10oxilangtag18to_uppercase_firstCsbrE1BkJ52QU_5oxrdf:
  886|  1.69k|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  887|  1.69k|    let mut chars = s.chars();
  888|  1.69k|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  889|  1.69k|}
_RNvXsq_CsebFzSuz8Vhk_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsbrE1BkJ52QU_5oxrdf:
  552|  38.8k|    fn push(&mut self, _: char) {}
_RNvCsebFzSuz8Vhk_10oxilangtag13is_alphabeticCsbrE1BkJ52QU_5oxrdf:
  860|  50.9k|fn is_alphabetic(s: &str) -> bool {
  861|  50.9k|    s.chars().all(|x| x.is_ascii_alphabetic())
  862|  50.9k|}
_RNCNvCsebFzSuz8Vhk_10oxilangtag15is_alphanumeric0B3_:
  871|  44.4k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNvXso_CsebFzSuz8Vhk_10oxilangtagNtB5_21LanguageTagParseErrorNtNtCsl2lhD68vXAd_4core3fmt7Display3fmt:
  482|  23.1k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  483|  23.1k|        match self.kind {
  484|       |            TagParseErrorKind::EmptyExtension => {
  485|  7.82k|                write!(f, "If an extension subtag is present, it must not be empty")
  486|       |            }
  487|       |            TagParseErrorKind::EmptyPrivateUse => {
  488|    588|                write!(f, "If the `x` subtag is present, it must not be empty")
  489|       |            }
  490|       |            TagParseErrorKind::ForbiddenChar => {
  491|      0|                write!(f, "The langtag contains a char not allowed")
  492|       |            }
  493|  2.73k|            TagParseErrorKind::InvalidSubtag => write!(
  494|  2.73k|                f,
  495|  2.73k|                "A subtag fails to parse, it does not match any other subtags"
  496|  2.73k|            ),
  497|  7.02k|            TagParseErrorKind::InvalidLanguage => write!(f, "The given language subtag is invalid"),
  498|       |            TagParseErrorKind::SubtagTooLong => {
  499|  4.96k|                write!(f, "A subtag may be eight characters in length at maximum")
  500|       |            }
  501|      0|            TagParseErrorKind::EmptySubtag => write!(f, "A subtag should not be empty"),
  502|       |            TagParseErrorKind::TooManyExtlangs => {
  503|      4|                write!(f, "At maximum three extlangs are allowed")
  504|       |            }
  505|       |        }
  506|  23.1k|    }
_RNCNvCsebFzSuz8Vhk_10oxilangtag13is_alphabetic0B3_:
  861|   179k|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCsebFzSuz8Vhk_10oxilangtag23is_alphanumeric_or_dash0B3_:
  876|  16.0k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
_RNCNvCsebFzSuz8Vhk_10oxilangtag10is_numeric0B3_:
  866|  2.71k|    s.chars().all(|x| x.is_ascii_digit())

_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE14parse_relativeCsbrE1BkJ52QU_5oxrdf:
 1152|  44.4k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1153|  44.4k|        if let Some(base) = self.base {
 1154|      0|            match self.input.front() {
 1155|       |                None => {
 1156|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1157|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1158|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1159|      0|                    self.output_positions.path_end = base.positions.path_end;
 1160|      0|                    self.output_positions.query_end = base.positions.query_end;
 1161|      0|                    Ok(())
 1162|       |                }
 1163|       |                Some('/') => {
 1164|      0|                    self.input.next();
 1165|      0|                    self.parse_relative_slash(&base)
 1166|       |                }
 1167|       |                Some('?') => {
 1168|      0|                    self.input.next();
 1169|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1170|      0|                    self.output.push('?');
 1171|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1172|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1173|      0|                    self.output_positions.path_end = base.positions.path_end;
 1174|      0|                    self.parse_query()
 1175|       |                }
 1176|       |                Some('#') => {
 1177|      0|                    self.input.next();
 1178|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1179|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1180|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1181|      0|                    self.output_positions.path_end = base.positions.path_end;
 1182|      0|                    self.output_positions.query_end = base.positions.query_end;
 1183|      0|                    self.output.push('#');
 1184|      0|                    self.parse_fragment()
 1185|       |                }
 1186|       |                _ => {
 1187|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1188|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1189|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1190|      0|                    self.output_positions.path_end = base.positions.path_end;
 1191|      0|                    self.remove_last_segment();
 1192|      0|                    if self.output.len() > base.positions.scheme_end {
 1193|      0|                        // We have some path or authority, we keep a base '/'
 1194|      0|                        self.output.push('/');
 1195|      0|                    }
 1196|      0|                    self.parse_path()
 1197|       |                }
 1198|       |            }
 1199|       |        } else {
 1200|  44.4k|            self.output_positions.scheme_end = 0;
 1201|  44.4k|            self.input_scheme_end = 0;
 1202|  44.4k|            if self.input.starts_with('/') {
 1203|  8.61k|                self.input.next();
 1204|  8.61k|                self.output.push('/');
 1205|  8.61k|                self.parse_path_or_authority()
 1206|       |            } else {
 1207|  35.7k|                self.output_positions.authority_end = 0;
 1208|  35.7k|                self.parse_path()
 1209|       |            }
 1210|       |        }
 1211|  44.4k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_pathCsbrE1BkJ52QU_5oxrdf:
 1344|  43.3k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1345|   754k|        loop {
 1346|   754k|            let c = self.input.next();
 1347|   754k|            match c {
 1348|       |                None | Some('/') | Some('?') | Some('#') => {
 1349|  64.2k|                    if self.output.as_str().ends_with("/..") {
 1350|      0|                        self.remove_last_segment();
 1351|      0|                        self.remove_last_segment();
 1352|      0|                        self.output.push('/');
 1353|  64.2k|                    } else if self.output.as_str().ends_with("/.") {
 1354|      0|                        self.remove_last_segment();
 1355|      0|                        self.output.push('/');
 1356|  64.2k|                    } else if c == Some('/') {
 1357|  40.8k|                        self.output.push('/');
 1358|  40.8k|                    }
 1359|       |
 1360|  64.2k|                    if c == Some('?') {
 1361|  8.20k|                        self.output_positions.path_end = self.output.len();
 1362|  8.20k|                        self.output.push('?');
 1363|  8.20k|                        return self.parse_query();
 1364|  55.9k|                    } else if c == Some('#') {
 1365|  2.64k|                        self.output_positions.path_end = self.output.len();
 1366|  2.64k|                        self.output_positions.query_end = self.output.len();
 1367|  2.64k|                        self.output.push('#');
 1368|  2.64k|                        return self.parse_fragment();
 1369|  53.3k|                    } else if c == None {
 1370|  12.5k|                        self.output_positions.path_end = self.output.len();
 1371|  12.5k|                        self.output_positions.query_end = self.output.len();
 1372|  12.5k|                        return Ok(());
 1373|  40.8k|                    }
 1374|       |                }
 1375|   690k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1376|       |            }
 1377|       |        }
 1378|  43.3k|    }
_RINvMs11_Cs72NQLJxIjgJ_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferE11parse_erroruECsbrE1BkJ52QU_5oxrdf:
 1454|  33.2k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1455|  33.2k|        Err(IriParseError { kind })
 1456|  33.2k|    }
_RNvXsV_Cs72NQLJxIjgJ_5oxiriINtB5_3IriNtNtCsdBW21Yiwikk_5alloc6string6StringEINtNtCsl2lhD68vXAd_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsbrE1BkJ52QU_5oxrdf:
  871|  16.6k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  872|  16.6k|        if iri.is_absolute() {
  873|  3.97k|            Ok(Self(iri))
  874|       |        } else {
  875|  12.6k|            Err(IriParseError {
  876|  12.6k|                kind: IriParseErrorKind::NoScheme,
  877|  12.6k|            })
  878|       |        }
  879|  16.6k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE18parse_scheme_startCsbrE1BkJ52QU_5oxrdf:
 1101|  49.8k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1102|  49.8k|        match self.input.front() {
 1103|    982|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1104|  44.1k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1105|  27.5k|            _ => self.parse_relative(),
 1106|       |        }
 1107|  49.8k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_hostCsbrE1BkJ52QU_5oxrdf:
 1255|  5.54k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1256|  5.54k|        if self.input.starts_with('[') {
 1257|       |            // IP v6
 1258|    700|            let start_position = self.input.position;
 1259|  27.3k|            while let Some(c) = self.input.next() {
 1260|  26.6k|                self.output.push(c);
 1261|  26.6k|                if c == ']' {
 1262|     60|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1263|     60|                    if let Err(error) = Ipv6Addr::from_str(ip) {
 1264|     60|                        return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1265|      0|                    }
 1266|      0|
 1267|      0|                    let c = self.input.next();
 1268|      0|                    return match c {
 1269|       |                        Some(':') => {
 1270|      0|                            self.output.push(':');
 1271|      0|                            self.parse_port()
 1272|       |                        }
 1273|       |                        None | Some('/') | Some('?') | Some('#') => {
 1274|      0|                            self.output_positions.authority_end = self.output.len();
 1275|      0|                            self.parse_path_start(c)
 1276|       |                        }
 1277|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1278|       |                    };
 1279|  26.6k|                }
 1280|       |            }
 1281|    640|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1282|       |        } else {
 1283|       |            // Other host
 1284|  43.0k|            loop {
 1285|  43.0k|                let c = self.input.next();
 1286|  43.0k|                match c {
 1287|       |                    Some(':') => {
 1288|    292|                        self.output.push(':');
 1289|    292|                        return self.parse_port();
 1290|       |                    }
 1291|       |                    None | Some('/') | Some('?') | Some('#') => {
 1292|  3.82k|                        self.output_positions.authority_end = self.output.len();
 1293|  3.82k|                        return self.parse_path_start(c);
 1294|       |                    }
 1295|  38.9k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1296|       |                }
 1297|       |            }
 1298|       |        }
 1299|  5.54k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE16parse_path_startCsbrE1BkJ52QU_5oxrdf:
 1315|  3.95k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1316|  3.95k|        match c {
 1317|       |            None => {
 1318|  1.34k|                self.output_positions.path_end = self.output.len();
 1319|  1.34k|                self.output_positions.query_end = self.output.len();
 1320|  1.34k|                Ok(())
 1321|       |            }
 1322|       |            Some('?') => {
 1323|    448|                self.output_positions.path_end = self.output.len();
 1324|    448|                self.output.push('?');
 1325|    448|                self.parse_query()
 1326|       |            }
 1327|       |            Some('#') => {
 1328|    518|                self.output_positions.path_end = self.output.len();
 1329|    518|                self.output_positions.query_end = self.output.len();
 1330|    518|                self.output.push('#');
 1331|    518|                self.parse_fragment()
 1332|       |            }
 1333|       |            Some('/') => {
 1334|  1.64k|                self.output.push('/');
 1335|  1.64k|                self.parse_path()
 1336|       |            }
 1337|      0|            Some(c) => {
 1338|      0|                self.read_url_codepoint_or_echar(c)?;
 1339|      0|                self.parse_path()
 1340|       |            }
 1341|       |        }
 1342|  3.95k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE33read_url_query_codepoint_or_echarCsbrE1BkJ52QU_5oxrdf:
 1422|   320k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1423|   320k|        if c == '%' {
 1424|    324|            self.read_echar()
 1425|   319k|        } else if is_url_query_code_point(c) {
 1426|   313k|            self.output.push(c);
 1427|   313k|            Ok(())
 1428|       |        } else {
 1429|  6.14k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1430|       |        }
 1431|   320k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10read_echarCsbrE1BkJ52QU_5oxrdf:
 1434|  4.11k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1435|  4.11k|        let c1 = self.input.next();
 1436|  4.11k|        let c2 = self.input.next();
 1437|  4.11k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1438|  1.15k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1439|       |        {
 1440|    706|            self.output.push('%');
 1441|    706|            self.output.push(c1.unwrap());
 1442|    706|            self.output.push(c2.unwrap());
 1443|    706|            Ok(())
 1444|       |        } else {
 1445|  3.40k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1446|  3.40k|                Some('%'),
 1447|  3.40k|                c1,
 1448|  3.40k|                c2,
 1449|  3.40k|            ]))
 1450|       |        }
 1451|  4.11k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE5parseCsbrE1BkJ52QU_5oxrdf:
 1076|  49.8k|    fn parse(
 1077|  49.8k|        iri: &'a str,
 1078|  49.8k|        base: Option<IriRef<&'a str>>,
 1079|  49.8k|        output: &'a mut O,
 1080|  49.8k|    ) -> Result<IriElementsPositions, IriParseError> {
 1081|  49.8k|        let mut parser = Self {
 1082|  49.8k|            iri,
 1083|  49.8k|            base,
 1084|  49.8k|            input: ParserInput {
 1085|  49.8k|                value: iri.chars(),
 1086|  49.8k|                position: 0,
 1087|  49.8k|            },
 1088|  49.8k|            output,
 1089|  49.8k|            output_positions: IriElementsPositions {
 1090|  49.8k|                scheme_end: 0,
 1091|  49.8k|                authority_end: 0,
 1092|  49.8k|                path_end: 0,
 1093|  49.8k|                query_end: 0,
 1094|  49.8k|            },
 1095|  49.8k|            input_scheme_end: 0,
 1096|  49.8k|        };
 1097|  49.8k|        parser.parse_scheme_start()?;
 1098|  16.6k|        Ok(parser.output_positions)
 1099|  49.8k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE14parse_fragmentCsbrE1BkJ52QU_5oxrdf:
 1394|  3.79k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1395|  95.6k|        while let Some(c) = self.input.next() {
 1396|  94.6k|            self.read_url_codepoint_or_echar(c)?
 1397|       |        }
 1398|  1.02k|        Ok(())
 1399|  3.79k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE12parse_schemeCsbrE1BkJ52QU_5oxrdf:
 1109|  21.3k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1110|   326k|        loop {
 1111|   326k|            let c = self.input.next();
 1112|   326k|            match c {
 1113|   326k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1114|   305k|                    self.output.push(c)
 1115|       |                }
 1116|       |                Some(':') => {
 1117|  4.48k|                    self.output.push(':');
 1118|  4.48k|                    self.output_positions.scheme_end = self.output.len();
 1119|  4.48k|                    self.input_scheme_end = self.input.position;
 1120|  4.48k|                    return if self.input.starts_with('/') {
 1121|  1.08k|                        self.input.next();
 1122|  1.08k|                        self.output.push('/');
 1123|  1.08k|                        self.parse_path_or_authority()
 1124|       |                    } else {
 1125|  3.40k|                        self.output_positions.authority_end = self.output.len();
 1126|  3.40k|                        self.parse_path()
 1127|       |                    };
 1128|       |                }
 1129|       |                _ => {
 1130|  16.8k|                    self.input = ParserInput {
 1131|  16.8k|                        value: self.iri.chars(),
 1132|  16.8k|                        position: 0,
 1133|  16.8k|                    }; // reset
 1134|  16.8k|                    self.output.clear();
 1135|  16.8k|                    return self.parse_relative();
 1136|       |                }
 1137|       |            }
 1138|       |        }
 1139|  21.3k|    }
_RNvMsp_Cs72NQLJxIjgJ_5oxiriINtB5_3IriNtNtCsdBW21Yiwikk_5alloc6string6StringE5parseCsbrE1BkJ52QU_5oxrdf:
  501|  49.8k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  502|  49.8k|        IriRef::parse(iri)?.try_into()
  503|  49.8k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE23parse_path_or_authorityCsbrE1BkJ52QU_5oxrdf:
 1141|  9.69k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1142|  9.69k|        if self.input.starts_with('/') {
 1143|  7.23k|            self.input.next();
 1144|  7.23k|            self.output.push('/');
 1145|  7.23k|            self.parse_authority()
 1146|       |        } else {
 1147|  2.45k|            self.output_positions.authority_end = self.output.len() - 1;
 1148|  2.45k|            self.parse_path()
 1149|       |        }
 1150|  9.69k|    }
_RNvMCs72NQLJxIjgJ_5oxiriINtB2_6IriRefNtNtCsdBW21Yiwikk_5alloc6string6StringE5parseCsbrE1BkJ52QU_5oxrdf:
   55|  49.8k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   56|  49.8k|        let positions = IriParser::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   57|  16.6k|        Ok(Self { iri, positions })
   58|  49.8k|    }
_RNvMCs72NQLJxIjgJ_5oxiriINtB2_6IriRefNtNtCsdBW21Yiwikk_5alloc6string6StringE11is_absoluteCsbrE1BkJ52QU_5oxrdf:
  146|  16.6k|    pub fn is_absolute(&self) -> bool {
  147|  16.6k|        self.positions.scheme_end != 0
  148|  16.6k|    }
_RNCNvMs11_Cs72NQLJxIjgJ_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferE10read_echars_0CsbrE1BkJ52QU_5oxrdf:
 1438|  1.15k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE11parse_queryCsbrE1BkJ52QU_5oxrdf:
 1380|  8.65k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1381|   322k|        while let Some(c) = self.input.next() {
 1382|   320k|            if c == '#' {
 1383|    632|                self.output_positions.query_end = self.output.len();
 1384|    632|                self.output.push('#');
 1385|    632|                return self.parse_fragment();
 1386|       |            } else {
 1387|   320k|                self.read_url_query_codepoint_or_echar(c)?
 1388|       |            }
 1389|       |        }
 1390|  1.73k|        self.output_positions.query_end = self.output.len();
 1391|  1.73k|        Ok(())
 1392|  8.65k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE15parse_authorityCsbrE1BkJ52QU_5oxrdf:
 1231|  7.23k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1232|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1233|  66.7k|        loop {
 1234|  66.7k|            let c = self.input.next();
 1235|  66.7k|            match c {
 1236|       |                Some('@') => {
 1237|    650|                    self.output.push('@');
 1238|    650|                    return self.parse_host();
 1239|       |                }
 1240|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1241|  4.89k|                    self.input = ParserInput {
 1242|  4.89k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1243|  4.89k|                        position: self.input_scheme_end + 2,
 1244|  4.89k|                    };
 1245|  4.89k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1246|  4.89k|                    return self.parse_host();
 1247|       |                }
 1248|  61.1k|                Some(c) => {
 1249|  61.1k|                    self.read_url_codepoint_or_echar(c)?;
 1250|       |                }
 1251|       |            }
 1252|       |        }
 1253|  7.23k|    }
_RNvMsp_Cs72NQLJxIjgJ_5oxiriINtB5_3IriNtNtCsdBW21Yiwikk_5alloc6string6StringE10into_innerCsbrE1BkJ52QU_5oxrdf:
  568|  1.88k|    pub fn into_inner(self) -> T {
  569|  1.88k|        self.0.into_inner()
  570|  1.88k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_portCsbrE1BkJ52QU_5oxrdf:
 1301|    292|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1302|    302|        loop {
 1303|    302|            let c = self.input.next();
 1304|    266|            match c {
 1305|    266|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1306|       |                Some('/') | Some('?') | Some('#') | None => {
 1307|    124|                    self.output_positions.authority_end = self.output.len();
 1308|    124|                    return self.parse_path_start(c);
 1309|       |                }
 1310|    168|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1311|       |            }
 1312|       |        }
 1313|    292|    }
_RNvMCs72NQLJxIjgJ_5oxiriINtB2_6IriRefNtNtCsdBW21Yiwikk_5alloc6string6StringE10into_innerCsbrE1BkJ52QU_5oxrdf:
  132|  1.88k|    pub fn into_inner(self) -> T {
  133|  1.88k|        self.iri
  134|  1.88k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE27read_url_codepoint_or_echarCsbrE1BkJ52QU_5oxrdf:
 1410|   885k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1411|   885k|        if c == '%' {
 1412|  3.78k|            self.read_echar()
 1413|   881k|        } else if is_url_code_point(c) {
 1414|   859k|            self.output.push(c);
 1415|   859k|            Ok(())
 1416|       |        } else {
 1417|  21.8k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1418|       |        }
 1419|   885k|    }
_RNCNvMs11_Cs72NQLJxIjgJ_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferE10read_echar0CsbrE1BkJ52QU_5oxrdf:
 1437|  3.56k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs10_Cs72NQLJxIjgJ_5oxiriNtB6_11ParserInput5frontCsbrE1BkJ52QU_5oxrdf:
 1053|  49.8k|    fn front(&self) -> Option<char> {
 1054|  49.8k|        self.value.clone().next()
 1055|  49.8k|    }
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer5clearCsbrE1BkJ52QU_5oxrdf:
  985|  16.8k|    fn clear(&mut self) {
  986|  16.8k|        self.len = 0;
  987|  16.8k|    }
_RNvMs10_Cs72NQLJxIjgJ_5oxiriNtB6_11ParserInput11starts_withCsbrE1BkJ52QU_5oxrdf:
 1058|  64.1k|    fn starts_with(&self, c: char) -> bool {
 1059|  64.1k|        self.value.as_str().starts_with(c)
 1060|  64.1k|    }
_RNvXs1b_Cs72NQLJxIjgJ_5oxiriNtB6_16VoidOutputBufferNtNtCsl2lhD68vXAd_4core7default7Default7defaultCsbrE1BkJ52QU_5oxrdf:
  968|  49.8k|#[derive(Default)]
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCsbrE1BkJ52QU_5oxrdf:
  990|  4.89k|    fn truncate(&mut self, new_len: usize) {
  991|  4.89k|        self.len = new_len;
  992|  4.89k|    }
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCsbrE1BkJ52QU_5oxrdf:
  995|  59.3k|    fn len(&self) -> usize {
  996|  59.3k|        self.len
  997|  59.3k|    }
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCsbrE1BkJ52QU_5oxrdf:
 1000|   128k|    fn as_str(&self) -> &str {
 1001|   128k|        ""
 1002|   128k|    }
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsbrE1BkJ52QU_5oxrdf:
  975|  1.58M|    fn push(&mut self, c: char) {
  976|  1.58M|        self.len += c.len_utf8();
  977|  1.58M|    }
_RNvMs10_Cs72NQLJxIjgJ_5oxiriNtB6_11ParserInput4nextCsbrE1BkJ52QU_5oxrdf:
 1043|  1.66M|    fn next(&mut self) -> Option<char> {
 1044|  1.66M|        if let Some(head) = self.value.next() {
 1045|  1.64M|            self.position += head.len_utf8();
 1046|  1.64M|            Some(head)
 1047|       |        } else {
 1048|  20.3k|            None
 1049|       |        }
 1050|  1.66M|    }
_RNvCs72NQLJxIjgJ_5oxiri17is_url_code_point:
 1459|  1.20M|fn is_url_code_point(c: char) -> bool {
 1460|  1.20M|    matches!(c,
 1461|  17.4k|        'a'..='z'
 1462|   779k|        | 'A'..='Z'
 1463|   172k|        | '0'..='9'
 1464|       |        | '!'
 1465|       |        | '$'
 1466|       |        | '&'
 1467|       |        | '\''
 1468|       |        | '('
 1469|       |        | ')'
 1470|       |        | '*'
 1471|       |        | '+'
 1472|       |        | ','
 1473|       |        | '-'
 1474|       |        | '.'
 1475|       |        | '/'
 1476|       |        | ':'
 1477|       |        | ';'
 1478|       |        | '='
 1479|       |        | '?'
 1480|       |        | '@'
 1481|       |        | '_'
 1482|       |        | '~'
 1483|  3.07k|        | '\u{A0}'..='\u{D7FF}'
 1484|     18|        | '\u{F900}'..='\u{FDCF}'
 1485|     18|        | '\u{FDF0}'..='\u{FFEF}'
 1486|     18|        | '\u{10000}'..='\u{1FFFD}'
 1487|     18|        | '\u{20000}'..='\u{2FFFD}'
 1488|     18|        | '\u{30000}'..='\u{3FFFD}'
 1489|     18|        | '\u{40000}'..='\u{4FFFD}'
 1490|     18|        | '\u{50000}'..='\u{5FFFD}'
 1491|     18|        | '\u{60000}'..='\u{6FFFD}'
 1492|     18|        | '\u{70000}'..='\u{7FFFD}'
 1493|     18|        | '\u{80000}'..='\u{8FFFD}'
 1494|     18|        | '\u{90000}'..='\u{9FFFD}'
 1495|     18|        | '\u{A0000}'..='\u{AFFFD}'
 1496|     18|        | '\u{B0000}'..='\u{BFFFD}'
 1497|     18|        | '\u{C0000}'..='\u{CFFFD}'
 1498|     18|        | '\u{D0000}'..='\u{DFFFD}'
 1499|     18|        | '\u{E1000}'..='\u{EFFFD}'
 1500|       |    )
 1501|  1.20M|}
_RNvXsW_Cs72NQLJxIjgJ_5oxiriNtB5_13IriParseErrorNtNtCsl2lhD68vXAd_4core3fmt7Display3fmt:
  906|  45.9k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  907|  45.9k|        match &self.kind {
  908|  13.6k|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
  909|    640|            IriParseErrorKind::InvalidHostCharacter(c) => {
  910|    640|                write!(f, "Invalid character '{}' in host", c)
  911|       |            }
  912|     60|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({})", e),
  913|    168|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{}'", c),
  914|  27.9k|            IriParseErrorKind::InvalidIriCodePoint(c) => {
  915|  27.9k|                write!(f, "Invalid IRI code point '{}'", c)
  916|       |            }
  917|  3.40k|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
  918|  3.40k|                f,
  919|  3.40k|                "Invalid IRI percent encoding '{}'",
  920|  3.40k|                cs.iter().flatten().cloned().collect::<String>()
  921|  3.40k|            ),
  922|       |        }
  923|  45.9k|    }
_RNvCs72NQLJxIjgJ_5oxiri23is_url_query_code_point:
 1503|   319k|fn is_url_query_code_point(c: char) -> bool {
 1504|   319k|    is_url_code_point(c)
 1505|  6.14k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1506|   319k|}

_RNCNvNvCs9GGLCkRBSt4_6nquads1__19___libfuzzer_sys_runs_0B5_:
   38|  9.81M|        .filter(|c| *c != 0xFF)
_RINvCs9GGLCkRBSt4_6nquads5parseARShj1_EB2_:
    7|  26.1k|fn parse<'a>(chunks: impl IntoIterator<Item = &'a [u8]>) -> (Vec<Quad>, Vec<String>) {
    8|  26.1k|    let mut quads = Vec::new();
    9|  26.1k|    let mut errors = Vec::new();
   10|  26.1k|    let mut parser = NQuadsParser::new().with_quoted_triples().parse();
   11|  52.2k|    for chunk in chunks {
   12|  26.1k|        parser.extend_from_slice(chunk);
   13|  1.80M|        while let Some(result) = parser.read_next() {
   14|  1.78M|            match result {
   15|     18|                Ok(quad) => quads.push(quad),
   16|  1.78M|                Err(error) => errors.push(error.to_string()),
   17|       |            }
   18|       |        }
   19|       |    }
   20|  26.1k|    parser.end();
   21|  38.8k|    while let Some(result) = parser.read_next() {
   22|  12.7k|        match result {
   23|      0|            Ok(quad) => quads.push(quad),
   24|  12.7k|            Err(error) => errors.push(error.to_string()),
   25|       |        }
   26|       |    }
   27|  26.1k|    assert!(parser.is_end());
   28|  26.1k|    (quads, errors)
   29|  26.1k|}
_RINvCs9GGLCkRBSt4_6nquads5parseINtNtNtCsl2lhD68vXAd_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_run0EEB2_:
    7|  26.1k|fn parse<'a>(chunks: impl IntoIterator<Item = &'a [u8]>) -> (Vec<Quad>, Vec<String>) {
    8|  26.1k|    let mut quads = Vec::new();
    9|  26.1k|    let mut errors = Vec::new();
   10|  26.1k|    let mut parser = NQuadsParser::new().with_quoted_triples().parse();
   11|  2.15M|    for chunk in chunks {
   12|  2.12M|        parser.extend_from_slice(chunk);
   13|  3.90M|        while let Some(result) = parser.read_next() {
   14|  1.78M|            match result {
   15|     18|                Ok(quad) => quads.push(quad),
   16|  1.78M|                Err(error) => errors.push(error.to_string()),
   17|       |            }
   18|       |        }
   19|       |    }
   20|  26.1k|    parser.end();
   21|  38.8k|    while let Some(result) = parser.read_next() {
   22|  12.7k|        match result {
   23|      0|            Ok(quad) => quads.push(quad),
   24|  12.7k|            Err(error) => errors.push(error.to_string()),
   25|       |        }
   26|       |    }
   27|  26.1k|    assert!(parser.is_end());
   28|  26.1k|    (quads, errors)
   29|  26.1k|}
_RNCNvNvCs9GGLCkRBSt4_6nquads1__19___libfuzzer_sys_run0B5_:
   33|  9.81M|    let (quads, errors) = parse(data.split(|c| *c == 0xFF));

_RNvNtCsbrE1BkJ52QU_5oxrdf10blank_node13to_integer_idCs4WjTcpTVJQo_5oxttl:
  332|  3.33k|fn to_integer_id(id: &str) -> Option<u128> {
  333|  3.33k|    let digits = id.as_bytes();
  334|  3.33k|    let mut value: u128 = 0;
  335|  3.33k|    if let None | Some(b'0') = digits.first() {
  336|  1.17k|        return None; // No empty string or leading zeros
  337|  2.15k|    }
  338|  30.8k|    for digit in digits {
  339|  29.9k|        value = value.checked_mul(16)?.checked_add(
  340|  29.4k|            match *digit {
  341|  29.4k|                b'0'..=b'9' => digit - b'0',
  342|  27.8k|                b'a'..=b'f' => digit - b'a' + 10,
  343|    772|                _ => return None,
  344|       |            }
  345|  28.7k|            .into(),
  346|      0|        )?;
  347|       |    }
  348|    872|    Some(value)
  349|  3.33k|}
_RNvMNtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idCs4WjTcpTVJQo_5oxttl:
   66|    872|    pub fn new_from_unique_id(id: u128) -> Self {
   67|    872|        Self(BlankNodeContent::Anonymous {
   68|    872|            id,
   69|    872|            str: IdStr::new(id),
   70|    872|        })
   71|    872|    }
_RNvMs7_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_5IdStr3newCs4WjTcpTVJQo_5oxttl:
  259|    872|    fn new(id: u128) -> Self {
  260|    872|        let mut str = [0; 32];
  261|    872|        write!(&mut str[..], "{id:x}").unwrap();
  262|    872|        Self(str)
  263|    872|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedReECs4WjTcpTVJQo_5oxttl:
   53|  3.33k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   54|  3.33k|        let id = id.into();
   55|  3.33k|        if let Some(numerical_id) = to_integer_id(&id) {
   56|    872|            Self::new_from_unique_id(numerical_id)
   57|       |        } else {
   58|  2.46k|            Self(BlankNodeContent::Named(id))
   59|       |        }
   60|  3.33k|    }

_RNvMNtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB2_9NamedNode6as_refCs9GGLCkRBSt4_6nquads:
   54|     64|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|     64|        NamedNodeRef::new_unchecked(&self.iri)
   56|     64|    }
_RNvXsl_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs9GGLCkRBSt4_6nquads:
   17|    128|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCs9GGLCkRBSt4_6nquads:
  128|     64|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|     64|        Self { iri }
  130|     64|    }
_RNvXs5_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCs9GGLCkRBSt4_6nquads:
  145|     64|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|     64|        write!(f, "<{}>", self.as_str())
  147|     64|    }
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCs9GGLCkRBSt4_6nquads:
  133|     64|    pub const fn as_str(self) -> &'a str {
  134|     64|        self.iri
  135|     64|    }
_RNvXsg_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCsl2lhD68vXAd_4core7convert4FromINtCs72NQLJxIjgJ_5oxiri3IriNtNtCsdBW21Yiwikk_5alloc6string6StringEE4fromCs4WjTcpTVJQo_5oxttl:
  222|  1.88k|    fn from(iri: Iri<String>) -> Self {
  223|  1.88k|        Self {
  224|  1.88k|            iri: iri.into_inner(),
  225|  1.88k|        }
  226|  1.88k|    }

_RNvXs25_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_4TermNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs9GGLCkRBSt4_6nquads:
  385|     36|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2z_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_9GraphNameNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs9GGLCkRBSt4_6nquads:
  856|     36|#[derive(Eq, PartialEq, Debug, Clone, Hash, Default)]
_RNvXsO_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7TermRefNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCs9GGLCkRBSt4_6nquads:
  584|     18|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  585|     18|        match self {
  586|     18|            Self::NamedNode(node) => node.fmt(f),
  587|      0|            Self::BlankNode(node) => node.fmt(f),
  588|      0|            Self::Literal(literal) => literal.fmt(f),
  589|       |            #[cfg(feature = "rdf-star")]
  590|      0|            Self::Triple(triple) => {
  591|      0|                write!(f, "<<{triple}>>")
  592|       |            }
  593|       |        }
  594|     18|    }
_RNvMsc_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7Subject6as_refCs9GGLCkRBSt4_6nquads:
  181|     18|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|     18|        match self {
  183|     18|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|      0|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|      0|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|     18|    }
_RNvXso_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_10SubjectRefNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCs9GGLCkRBSt4_6nquads:
  306|     18|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  307|     18|        match self {
  308|     18|            Self::NamedNode(node) => node.fmt(f),
  309|      0|            Self::BlankNode(node) => node.fmt(f),
  310|       |            #[cfg(feature = "rdf-star")]
  311|      0|            Self::Triple(triple) => write!(f, "<<{triple}>>"),
  312|       |        }
  313|     18|    }
_RNvMsy_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_4Term6as_refCs9GGLCkRBSt4_6nquads:
  417|     18|    pub fn as_ref(&self) -> TermRef<'_> {
  418|     18|        match self {
  419|     18|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|      0|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|      0|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|      0|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|     18|    }
_RNvXs2Q_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_4QuadNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs9GGLCkRBSt4_6nquads:
 1065|     36|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMs18_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_9GraphName6as_refCs9GGLCkRBSt4_6nquads:
  881|     18|    pub fn as_ref(&self) -> GraphNameRef<'_> {
  882|     18|        match self {
  883|     10|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.as_ref()),
  884|      0|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.as_ref()),
  885|      8|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  886|       |        }
  887|     18|    }
_RNvXs1h_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_12GraphNameRefNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCs9GGLCkRBSt4_6nquads:
  980|     10|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  981|     10|        match self {
  982|     10|            Self::NamedNode(node) => node.fmt(f),
  983|      0|            Self::BlankNode(node) => node.fmt(f),
  984|      0|            Self::DefaultGraph => write!(f, "DEFAULT"),
  985|       |        }
  986|     10|    }
_RNvXs1Q_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_7SubjectNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs9GGLCkRBSt4_6nquads:
  155|     36|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMs1g_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_12GraphNameRef16is_default_graphCs9GGLCkRBSt4_6nquads:
  964|     18|    pub fn is_default_graph(&self) -> bool {
  965|     18|        matches!(self, Self::DefaultGraph)
  966|     18|    }
_RNvXs1u_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_7QuadRefNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCs9GGLCkRBSt4_6nquads:
 1188|     18|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1189|     18|        if self.graph_name.is_default_graph() {
 1190|      8|            write!(f, "{} {} {}", self.subject, self.predicate, self.object)
 1191|       |        } else {
 1192|     10|            write!(
 1193|     10|                f,
 1194|     10|                "{} {} {} {}",
 1195|     10|                self.subject, self.predicate, self.object, self.graph_name
 1196|     10|            )
 1197|       |        }
 1198|     18|    }
_RNvXs1w_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_7QuadRefINtNtCsl2lhD68vXAd_4core7convert4FromRNtB6_4QuadE4fromCs9GGLCkRBSt4_6nquads:
 1214|     18|    fn from(quad: &'a Quad) -> Self {
 1215|     18|        quad.as_ref()
 1216|     18|    }
_RNvMs1q_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_4Quad6as_refCs9GGLCkRBSt4_6nquads:
 1098|     18|    pub fn as_ref(&self) -> QuadRef<'_> {
 1099|     18|        QuadRef {
 1100|     18|            subject: self.subject.as_ref(),
 1101|     18|            predicate: self.predicate.as_ref(),
 1102|     18|            object: self.object.as_ref(),
 1103|     18|            graph_name: self.graph_name.as_ref(),
 1104|     18|        }
 1105|     18|    }
_RNvXs1a_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_9GraphNameINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB8_10named_node9NamedNodeE4fromCs4WjTcpTVJQo_5oxttl:
  899|     30|    fn from(node: NamedNode) -> Self {
  900|     30|        Self::NamedNode(node)
  901|     30|    }
_RNvXse_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7SubjectINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|  1.08k|    fn from(node: NamedNode) -> Self {
  201|  1.08k|        Self::NamedNode(node)
  202|  1.08k|    }
_RNvXsg_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7SubjectINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|  3.33k|    fn from(node: BlankNode) -> Self {
  215|  3.33k|        Self::BlankNode(node)
  216|  3.33k|    }
_RNvXsA_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_4TermINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|     76|    fn from(node: NamedNode) -> Self {
  438|     76|        Self::NamedNode(node)
  439|     76|    }

_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer9parse_iri0B8_:
  212|  7.95k|        let iri = String::from_utf8(iri).map_err(|e| {
  213|  7.95k|            (
  214|  7.95k|                position.clone(),
  215|  7.95k|                format!("The IRI contains invalid UTF-8 characters: {e}"),
  216|  7.95k|            )
  217|  7.95k|        })?;
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer14parse_lang_tag0B8_:
  551|  23.1k|                .map_err(|e| (position.clone(), e.to_string()))?
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_chars_0B8_:
  784|  5.89k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  785|  5.89k|            (
  786|  5.89k|                position..position + len +2,
  787|  5.89k|                format!(
  788|  5.89k|                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  789|  5.89k|                ),
  790|  5.89k|            )
  791|  5.89k|        })?;
_RNCNvNtCs4WjTcpTVJQo_5oxttl5lexer13str_from_utf80B5_:
  928|  7.57k|    str::from_utf8(data).map_err(|e| {
  929|  7.57k|        (
  930|  7.57k|            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  931|  7.57k|            format!("Invalid UTF-8: {e}"),
  932|  7.57k|        )
  933|  7.57k|            .into()
  934|  7.57k|    })
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer18recognize_variable0B8_:
  325|  40.1k|            result.and_then(|(name, _)| {
  326|  40.1k|                if name.is_empty() {
  327|  33.7k|                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  328|       |                } else {
  329|  6.40k|                    Ok(N3Token::Variable(name))
  330|       |                }
  331|  40.1k|            }),
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer9parse_iris_0B8_:
  223|  45.9k|        .map_err(|e| (position, e.to_string()))?;
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer22recognize_unicode_char0B8_:
  856|  32.7k|                .map(|c| (c, bytes_needed + 1))
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer26recognize_pname_or_keyword0B8_:
  309|  45.4k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  310|  45.4k|                prefix: pn_prefix,
  311|  45.4k|                local,
  312|  45.4k|                might_be_invalid_iri,
  313|  45.4k|            }),
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_char0B8_:
  776|  3.98k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  777|  3.98k|            (
  778|  3.98k|                position..position + len + 2,
  779|  3.98k|                format!(
  780|  3.98k|                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  781|  3.98k|                ),
  782|  3.98k|            )
  783|  3.98k|        })?;
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer16recognize_string:
  556|   252k|    fn recognize_string(
  557|   252k|        data: &[u8],
  558|   252k|        delimiter: u8,
  559|   252k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  560|   252k|        // [22] 	STRING_LITERAL_QUOTE 	::= 	'"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
  561|   252k|        // [23] 	STRING_LITERAL_SINGLE_QUOTE 	::= 	"'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
  562|   252k|        let mut string = String::new();
  563|   252k|        let mut i = 1;
  564|       |        loop {
  565|   332k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  566|   234k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  567|   229k|                Ok(s) => string.push_str(s),
  568|  4.73k|                Err(e) => return Some((end, Err(e))),
  569|       |            };
  570|   229k|            i += end;
  571|   229k|            match data[i] {
  572|   229k|                c if c == delimiter => {
  573|  50.5k|                    return Some((i + 1, Ok(N3Token::String(string))));
  574|       |                }
  575|       |                b'\\' => {
  576|   179k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  577|   173k|                    i += additional + 1;
  578|   173k|                    match c {
  579|  79.4k|                        Ok(c) => {
  580|  79.4k|                            string.push(c);
  581|  79.4k|                        }
  582|  94.3k|                        Err(e) => {
  583|       |                            // We read until the end of string char
  584|  94.3k|                            let end = memchr(delimiter, &data[i..])?;
  585|  4.39k|                            return Some((i + end + 1, Err(e)));
  586|       |                        }
  587|       |                    }
  588|       |                }
  589|      0|                _ => unreachable!(),
  590|       |            }
  591|       |        }
  592|   252k|    }
_RNvXs9_NtCs4WjTcpTVJQo_5oxttl5lexerNtB5_14N3LexerOptionsNtNtCsl2lhD68vXAd_4core7default7Default7defaultB7_:
   38|  78.3k|#[derive(Default)]
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer20is_possible_pn_chars:
  892|  6.84M|    fn is_possible_pn_chars(c: char) -> bool {
  893|  6.84M|        Self::is_possible_pn_chars_u(c)
  894|  2.40M|            || matches!(c,
  895|  1.57M|        '-' | '0'..='9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
  896|  6.84M|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer26recognize_blank_node_label:
  477|  78.1k|    fn recognize_blank_node_label(
  478|  78.1k|        data: &[u8],
  479|  78.1k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  480|  78.1k|        // [141s] 	BLANK_NODE_LABEL 	::= 	'_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
  481|  78.1k|        let mut i = 2;
  482|       |        loop {
  483|   546k|            match Self::recognize_unicode_char(&data[i..], i)? {
  484|   479k|                Ok((c, consumed)) => {
  485|   479k|                    if (i == 2 && (Self::is_possible_pn_chars_u(c) || c.is_ascii_digit()))
  486|   432k|                        || (i > 2 && Self::is_possible_pn_chars(c))
  487|   456k|                    {
  488|   456k|                        // Ok
  489|   456k|                    } else if i > 2 && c == '.' {
  490|  12.7k|                        if data[i - 1] == b'.' {
  491|    574|                            i -= 1;
  492|    574|                            return Some((
  493|    574|                                i,
  494|    574|                                str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  495|    574|                            ));
  496|  12.1k|                        }
  497|  10.6k|                    } else if i == 0 {
  498|      0|                        return Some((
  499|      0|                            i,
  500|      0|                            Err((0..i, "A blank node ID should not be empty").into()),
  501|      0|                        ));
  502|  10.6k|                    } else if data[i - 1] == b'.' {
  503|    886|                        i -= 1;
  504|    886|                        return Some((
  505|    886|                            i,
  506|    886|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  507|    886|                        ));
  508|       |                    } else {
  509|  9.72k|                        return Some((
  510|  9.72k|                            i,
  511|  9.72k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  512|  9.72k|                        ));
  513|       |                    }
  514|   468k|                    i += consumed;
  515|       |                }
  516|  1.45k|                Err(e) => return Some((e.location.end, Err(e))),
  517|       |            }
  518|       |        }
  519|  78.1k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer16recognize_number:
  632|   290k|    fn recognize_number(data: &[u8]) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  633|   290k|        // [19] 	INTEGER 	::= 	[+-]? [0-9]+
  634|   290k|        // [20] 	DECIMAL 	::= 	[+-]? [0-9]* '.' [0-9]+
  635|   290k|        // [21] 	DOUBLE 	::= 	[+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  636|   290k|        // [154s] 	EXPONENT 	::= 	[eE] [+-]? [0-9]+
  637|   290k|        let mut i = 0;
  638|   290k|        let c = *data.first()?;
  639|   290k|        if matches!(c, b'+' | b'-') {
  640|   164k|            i += 1;
  641|   164k|        }
  642|       |        // We read the digits before .
  643|   290k|        let mut count_before: usize = 0;
  644|       |        loop {
  645|   877k|            let c = *data.get(i)?;
  646|   817k|            if c.is_ascii_digit() {
  647|   586k|                i += 1;
  648|   586k|                count_before += 1;
  649|   586k|            } else {
  650|   230k|                break;
  651|       |            }
  652|       |        }
  653|       |
  654|       |        // We read the digits after .
  655|       |        #[allow(clippy::if_then_some_else_none)]
  656|   230k|        let count_after = if *data.get(i)? == b'.' {
  657|  25.5k|            i += 1;
  658|  25.5k|
  659|  25.5k|            let mut count_after = 0;
  660|       |            loop {
  661|   372k|                let c = *data.get(i)?;
  662|   354k|                if c.is_ascii_digit() {
  663|   346k|                    i += 1;
  664|   346k|                    count_after += 1;
  665|   346k|                } else {
  666|  7.77k|                    break;
  667|  7.77k|                }
  668|  7.77k|            }
  669|  7.77k|            Some(count_after)
  670|       |        } else {
  671|   204k|            None
  672|       |        };
  673|       |
  674|       |        // End
  675|   212k|        let c = *data.get(i)?;
  676|   212k|        if matches!(c, b'e' | b'E') {
  677|  32.0k|            i += 1;
  678|       |
  679|  32.0k|            let c = *data.get(i)?;
  680|  20.2k|            if matches!(c, b'+' | b'-') {
  681|  1.23k|                i += 1;
  682|  18.9k|            }
  683|       |
  684|  20.2k|            let mut found = false;
  685|       |            loop {
  686|  93.8k|                let c = *data.get(i)?;
  687|  82.0k|                if c.is_ascii_digit() {
  688|  73.6k|                    i += 1;
  689|  73.6k|                    found = true;
  690|  73.6k|                } else {
  691|  8.42k|                    break;
  692|  8.42k|                }
  693|  8.42k|            }
  694|  8.42k|            Some((
  695|  8.42k|                i,
  696|  8.42k|                if !found {
  697|  3.77k|                    Err((0..i, "A double exponent cannot be empty").into())
  698|  4.64k|                } else if count_before == 0 && count_after.unwrap_or(0) == 0 {
  699|  2.22k|                    Err((0..i, "A double should not be empty").into())
  700|       |                } else {
  701|  2.42k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Double)
  702|       |                },
  703|       |            ))
  704|   180k|        } else if let Some(count_after) = count_after {
  705|  5.80k|            if count_after == 0 {
  706|       |                // We do not consume the '.' after all
  707|  2.88k|                i -= 1;
  708|  2.88k|                Some((
  709|  2.88k|                    i,
  710|  2.88k|                    if count_before == 0 {
  711|  1.16k|                        Err((0..i, "An integer should not be empty").into())
  712|       |                    } else {
  713|  1.71k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  714|       |                    },
  715|       |                ))
  716|       |            } else {
  717|  2.91k|                Some((i, str_from_utf8(&data[..i], 0..i).map(N3Token::Decimal)))
  718|       |            }
  719|       |        } else {
  720|       |            Some((
  721|   174k|                i,
  722|   174k|                if count_before == 0 {
  723|   114k|                    Err((0..i, "An integer should not be empty").into())
  724|       |                } else {
  725|  59.6k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  726|       |                },
  727|       |            ))
  728|       |        }
  729|   290k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer13recognize_iri:
  176|   495k|    fn recognize_iri(
  177|   495k|        data: &[u8],
  178|   495k|        options: &N3LexerOptions,
  179|   495k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  180|   495k|        // [18] 	IRIREF 	::= 	'<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
  181|   495k|        let mut string = Vec::new();
  182|   495k|        let mut i = 1;
  183|       |        loop {
  184|   573k|            let end = memchr2(b'>', b'\\', &data[i..])?;
  185|   241k|            string.extend_from_slice(&data[i..i + end]);
  186|   241k|            i += end;
  187|   241k|            match data[i] {
  188|       |                b'>' => {
  189|  57.8k|                    return Some((i + 1, Self::parse_iri(string, 0..=i, options)));
  190|       |                }
  191|       |                b'\\' => {
  192|   183k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, false)?;
  193|  88.3k|                    i += additional + 1;
  194|  88.3k|                    match c {
  195|  77.7k|                        Ok(c) => {
  196|  77.7k|                            let mut buf = [0; 4];
  197|  77.7k|                            string.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  198|  77.7k|                        }
  199|  10.6k|                        Err(e) => return Some((i, Err(e))),
  200|       |                    }
  201|       |                }
  202|      0|                _ => unreachable!(),
  203|       |            }
  204|       |        }
  205|   495k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer14parse_lang_tag:
  545|  51.7k|    fn parse_lang_tag(
  546|  51.7k|        lang_tag: &[u8],
  547|  51.7k|        position: Range<usize>,
  548|  51.7k|    ) -> Result<N3Token<'_>, TokenRecognizerError> {
  549|  51.7k|        Ok(N3Token::LangTag(
  550|  51.7k|            LanguageTag::parse(str_from_utf8(lang_tag, position.clone())?)
  551|  51.7k|                .map_err(|e| (position.clone(), e.to_string()))?
  552|  28.6k|                .into_inner(),
  553|       |        ))
  554|  51.7k|    }
_RNvXNtCs4WjTcpTVJQo_5oxttl5lexerNtB2_7N3LexerNtNtNtB4_7toolkit5lexer15TokenRecognizer20recognize_next_token:
   54|  7.54M|    fn recognize_next_token<'a>(
   55|  7.54M|        &mut self,
   56|  7.54M|        data: &'a [u8],
   57|  7.54M|        is_ending: bool,
   58|  7.54M|        options: &N3LexerOptions,
   59|  7.54M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
   60|  7.54M|        match *data.first()? {
   61|  1.11M|            b'<' => match *data.get(1)? {
   62|   596k|                b'<' => Some((2, Ok(N3Token::Punctuation("<<")))),
   63|  34.5k|                b'=' if self.mode == N3LexerMode::N3 => {
   64|      0|                    if let Some((consumed, result)) = Self::recognize_iri(data, options) {
   65|      0|                        Some(if let Ok(result) = result {
   66|      0|                            (consumed, Ok(result))
   67|       |                        } else {
   68|      0|                            (2, Ok(N3Token::Punctuation("<=")))
   69|       |                        })
   70|      0|                    } else if is_ending {
   71|      0|                        Some((2, Ok(N3Token::Punctuation("<="))))
   72|       |                    } else {
   73|      0|                        None
   74|       |                    }
   75|       |                }
   76|  10.8k|                b'-' if self.mode == N3LexerMode::N3 => {
   77|      0|                    if let Some((consumed, result)) = Self::recognize_iri(data, options) {
   78|      0|                        Some(if let Ok(result) = result {
   79|      0|                            (consumed, Ok(result))
   80|       |                        } else {
   81|      0|                            (2, Ok(N3Token::Punctuation("<-")))
   82|       |                        })
   83|      0|                    } else if is_ending {
   84|      0|                        Some((2, Ok(N3Token::Punctuation("<-"))))
   85|       |                    } else {
   86|      0|                        None
   87|       |                    }
   88|       |                }
   89|   495k|                _ => Self::recognize_iri(data, options),
   90|       |            },
   91|       |            b'>' => {
   92|   145k|                if *data.get(1)? == b'>' {
   93|   106k|                    Some((2, Ok(N3Token::Punctuation(">>"))))
   94|       |                } else {
   95|  22.7k|                    Some((1, Ok(N3Token::Punctuation(">"))))
   96|       |                }
   97|       |            }
   98|   217k|            b'_' => match data.get(1)? {
   99|  78.1k|                b':' => Self::recognize_blank_node_label(data),
  100|   129k|                c => Some((
  101|   129k|                    1,
  102|   129k|                    Err((0, format!("Unexpected character '{}'", char::from(*c))).into()),
  103|   129k|                )),
  104|       |            },
  105|       |            b'"' => {
  106|   252k|                if self.mode != N3LexerMode::NTriples
  107|      0|                    && *data.get(1)? == b'"'
  108|      0|                    && *data.get(2)? == b'"'
  109|       |                {
  110|      0|                    Self::recognize_long_string(data, b'"')
  111|       |                } else {
  112|   252k|                    Self::recognize_string(data, b'"')
  113|       |                }
  114|       |            }
  115|  25.4k|            b'\'' if self.mode != N3LexerMode::NTriples => {
  116|      0|                if *data.get(1)? == b'\'' && *data.get(2)? == b'\'' {
  117|      0|                    Self::recognize_long_string(data, b'\'')
  118|       |                } else {
  119|      0|                    Self::recognize_string(data, b'\'')
  120|       |                }
  121|       |            }
  122|   274k|            b'@' => Self::recognize_lang_tag(data),
  123|   332k|            b'.' => match data.get(1) {
  124|  39.1k|                Some(b'0'..=b'9') => Self::recognize_number(data),
  125|   288k|                Some(_) => Some((1, Ok(N3Token::Punctuation(".")))),
  126|  35.6k|                None => is_ending.then_some((1, Ok(N3Token::Punctuation(".")))),
  127|       |            },
  128|       |            b'^' => {
  129|  75.7k|                if *data.get(1)? == b'^' {
  130|  43.9k|                    Some((2, Ok(N3Token::Punctuation("^^"))))
  131|       |                } else {
  132|  15.5k|                    Some((1, Ok(N3Token::Punctuation("^"))))
  133|       |                }
  134|       |            }
  135|  57.2k|            b'(' => Some((1, Ok(N3Token::Punctuation("(")))),
  136|  17.3k|            b')' => Some((1, Ok(N3Token::Punctuation(")")))),
  137|  16.0k|            b'[' => Some((1, Ok(N3Token::Punctuation("[")))),
  138|  12.1k|            b']' => Some((1, Ok(N3Token::Punctuation("]")))),
  139|       |            b'{' => {
  140|  28.2k|                if *data.get(1)? == b'|' {
  141|    850|                    Some((2, Ok(N3Token::Punctuation("{|"))))
  142|       |                } else {
  143|  21.9k|                    Some((1, Ok(N3Token::Punctuation("{"))))
  144|       |                }
  145|       |            }
  146|  33.4k|            b'}' => Some((1, Ok(N3Token::Punctuation("}")))),
  147|  39.1k|            b',' => Some((1, Ok(N3Token::Punctuation(",")))),
  148|  19.5k|            b';' => Some((1, Ok(N3Token::Punctuation(";")))),
  149|  8.32k|            b'!' => Some((1, Ok(N3Token::Punctuation("!")))),
  150|       |            b'|' => {
  151|  36.6k|                if *data.get(1)? == b'}' {
  152|    570|                    Some((2, Ok(N3Token::Punctuation("|}"))))
  153|       |                } else {
  154|  33.4k|                    Some((1, Ok(N3Token::Punctuation("|"))))
  155|       |                }
  156|       |            }
  157|       |            b'=' => {
  158|  63.9k|                if *data.get(1)? == b'>' {
  159|    976|                    Some((2, Ok(N3Token::Punctuation("=>"))))
  160|       |                } else {
  161|  59.0k|                    Some((1, Ok(N3Token::Punctuation("="))))
  162|       |                }
  163|       |            }
  164|  2.02M|            b'0'..=b'9' | b'+' | b'-' => Self::recognize_number(data),
  165|  88.6k|            b'?' => Self::recognize_variable(data, is_ending),
  166|  3.67M|            _ => Self::recognize_pname_or_keyword(data, is_ending),
  167|       |        }
  168|  7.54M|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer9parse_iri:
  207|  57.8k|    fn parse_iri(
  208|  57.8k|        iri: Vec<u8>,
  209|  57.8k|        position: RangeInclusive<usize>,
  210|  57.8k|        options: &N3LexerOptions,
  211|  57.8k|    ) -> Result<N3Token<'static>, TokenRecognizerError> {
  212|  57.8k|        let iri = String::from_utf8(iri).map_err(|e| {
  213|       |            (
  214|       |                position.clone(),
  215|       |                format!("The IRI contains invalid UTF-8 characters: {e}"),
  216|       |            )
  217|  57.8k|        })?;
  218|  49.8k|        let iri = if let Some(base_iri) = options.base_iri.as_ref() {
  219|      0|            base_iri.resolve(&iri)
  220|       |        } else {
  221|  49.8k|            Iri::parse(iri)
  222|       |        }
  223|  49.8k|        .map_err(|e| (position, e.to_string()))?;
  224|  3.97k|        Ok(N3Token::IriRef(iri))
  225|  57.8k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer18recognize_hex_char:
  766|   186k|    fn recognize_hex_char(
  767|   186k|        data: &[u8],
  768|   186k|        len: usize,
  769|   186k|        escape_char: char,
  770|   186k|        position: usize,
  771|   186k|    ) -> Result<Option<char>, TokenRecognizerError> {
  772|   186k|        if data.len() < len {
  773|  88.9k|            return Ok(None);
  774|  97.1k|        }
  775|  97.1k|        let val = str_from_utf8(&data[..len], position..position + len + 2)?;
  776|  94.2k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  777|       |            (
  778|       |                position..position + len + 2,
  779|       |                format!(
  780|       |                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  781|       |                ),
  782|       |            )
  783|  94.2k|        })?;
  784|  90.2k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  785|       |            (
  786|       |                position..position + len +2,
  787|       |                format!(
  788|       |                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  789|       |                ),
  790|       |            )
  791|  90.2k|        })?;
  792|  84.3k|        Ok(Some(c))
  793|   186k|    }
_RNvXs8_NtCs4WjTcpTVJQo_5oxttl5lexerNtB5_11N3LexerModeNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqB7_:
   31|   323k|#[derive(Eq, PartialEq)]
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer22is_possible_pn_chars_u:
  887|  7.18M|    fn is_possible_pn_chars_u(c: char) -> bool {
  888|  7.18M|        Self::is_possible_pn_chars_base(c) || c == '_'
  889|  7.18M|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer27recognize_optional_pn_local:
  335|   394k|    fn recognize_optional_pn_local(
  336|   394k|        data: &[u8],
  337|   394k|        is_ending: bool,
  338|   394k|    ) -> Option<(usize, Result<(Cow<'_, str>, bool), TokenRecognizerError>)> {
  339|   394k|        // [168s] 	PN_LOCAL 	::= 	(PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
  340|   394k|        let mut i = 0;
  341|   394k|        let mut buffer = None; // Buffer if there are some escaped characters
  342|   394k|        let mut position_that_is_already_in_buffer = 0;
  343|   394k|        let mut might_be_invalid_iri = false;
  344|       |        loop {
  345|  3.06M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  346|  2.83M|                match r {
  347|  2.81M|                    Ok((c, consumed)) => {
  348|  2.81M|                        if c == '%' {
  349|  17.4k|                            i += 1;
  350|  17.4k|                            let a = char::from(*data.get(i)?);
  351|  12.1k|                            i += 1;
  352|  12.1k|                            let b = char::from(*data.get(i)?);
  353|  8.15k|                            if !a.is_ascii_hexdigit() || !b.is_ascii_hexdigit() {
  354|  2.30k|                                return Some((i + 1, Err((
  355|  2.30k|                                    i - 2..=i, format!("escapes in IRIs should be % followed by two hexadecimal characters, found '%{a}{b}'")
  356|  2.30k|                                ).into())));
  357|  5.85k|                            }
  358|  5.85k|                            i += 1;
  359|  2.79M|                        } else if c == '\\' {
  360|   188k|                            i += 1;
  361|   188k|                            let a = char::from(*data.get(i)?);
  362|  96.6k|                            if matches!(
  363|   150k|                                a,
  364|       |                                '_' | '~'
  365|       |                                    | '.'
  366|       |                                    | '-'
  367|       |                                    | '!'
  368|       |                                    | '$'
  369|       |                                    | '&'
  370|       |                                    | '\''
  371|       |                                    | '('
  372|       |                                    | ')'
  373|       |                                    | '*'
  374|       |                                    | '+'
  375|       |                                    | ','
  376|       |                                    | ';'
  377|       |                                    | '='
  378|  54.2k|                            ) {
  379|  54.2k|                                // ok to escape
  380|  96.6k|                            } else if matches!(a, '/' | '?' | '#' | '@' | '%') {
  381|  94.6k|                                // ok to escape but requires IRI validation
  382|  94.6k|                                might_be_invalid_iri = true;
  383|  94.6k|                            } else {
  384|  1.93k|                                return Some((i + 1, Err((
  385|  1.93k|                                    i..=i, format!("The character that are allowed to be escaped in IRIs are _~.-!$&'()*+,;=/?#@%, found '{a}'")
  386|  1.93k|                                ).into())));
  387|       |                            }
  388|   148k|                            let buffer = buffer.get_or_insert_with(String::new);
  389|   148k|                            // We add the missing bytes
  390|   148k|                            if i - position_that_is_already_in_buffer > 1 {
  391|   115k|                                buffer.push_str(
  392|   115k|                                    match str_from_utf8(
  393|   115k|                                        &data[position_that_is_already_in_buffer..i - 1],
  394|   115k|                                        position_that_is_already_in_buffer..i - 1,
  395|   115k|                                    ) {
  396|   115k|                                        Ok(data) => data,
  397|      0|                                        Err(e) => return Some((i, Err(e))),
  398|       |                                    },
  399|       |                                )
  400|  33.1k|                            }
  401|   148k|                            buffer.push(a);
  402|   148k|                            i += 1;
  403|   148k|                            position_that_is_already_in_buffer = i;
  404|  2.60M|                        } else if i == 0 {
  405|   292k|                            if !(Self::is_possible_pn_chars_u(c) || c == ':' || c.is_ascii_digit())
  406|       |                            {
  407|  52.6k|                                return Some((0, Ok((Cow::Borrowed(""), false))));
  408|   239k|                            }
  409|   239k|                            might_be_invalid_iri |=
  410|   239k|                                Self::is_possible_pn_chars_base_but_not_valid_iri(c) || c == ':';
  411|   239k|                            i += consumed;
  412|  2.31M|                        } else if Self::is_possible_pn_chars(c) || c == ':' || c == '.' {
  413|       |                            might_be_invalid_iri |=
  414|  2.28M|                                Self::is_possible_pn_chars_base_but_not_valid_iri(c) || c == ':';
  415|  2.28M|                            i += consumed;
  416|       |                        } else {
  417|  31.4k|                            let buffer = if let Some(mut buffer) = buffer {
  418|  12.0k|                                buffer.push_str(
  419|  12.0k|                                    match str_from_utf8(
  420|  12.0k|                                        &data[position_that_is_already_in_buffer..i],
  421|  12.0k|                                        position_that_is_already_in_buffer..i,
  422|  12.0k|                                    ) {
  423|  12.0k|                                        Ok(data) => data,
  424|      0|                                        Err(e) => return Some((i, Err(e))),
  425|       |                                    },
  426|       |                                );
  427|       |                                // We do not include the last dot
  428|  22.0k|                                while buffer.ends_with('.') {
  429|  10.0k|                                    buffer.pop();
  430|  10.0k|                                    i -= 1;
  431|  10.0k|                                }
  432|  12.0k|                                Cow::Owned(buffer)
  433|       |                            } else {
  434|  19.4k|                                let mut data = match str_from_utf8(&data[..i], 0..i) {
  435|  19.4k|                                    Ok(data) => data,
  436|      0|                                    Err(e) => return Some((i, Err(e))),
  437|       |                                };
  438|       |                                // We do not include the last dot
  439|  24.0k|                                while let Some(d) = data.strip_suffix('.') {
  440|  4.65k|                                    data = d;
  441|  4.65k|                                    i -= 1;
  442|  4.65k|                                }
  443|  19.4k|                                Cow::Borrowed(data)
  444|       |                            };
  445|  31.4k|                            return Some((i, Ok((buffer, might_be_invalid_iri))));
  446|       |                        }
  447|       |                    }
  448|  20.5k|                    Err(e) => return Some((e.location.end, Err(e))),
  449|       |                }
  450|   238k|            } else if is_ending {
  451|  1.56k|                let buffer = if let Some(mut buffer) = buffer {
  452|       |                    // We do not include the last dot
  453|  1.67k|                    while buffer.ends_with('.') {
  454|  1.09k|                        buffer.pop();
  455|  1.09k|                        i -= 1;
  456|  1.09k|                    }
  457|    576|                    Cow::Owned(buffer)
  458|       |                } else {
  459|    988|                    let mut data = match str_from_utf8(&data[..i], 0..i) {
  460|    988|                        Ok(data) => data,
  461|      0|                        Err(e) => return Some((i, Err(e))),
  462|       |                    };
  463|       |                    // We do not include the last dot
  464|  3.32k|                    while let Some(d) = data.strip_suffix('.') {
  465|  2.33k|                        data = d;
  466|  2.33k|                        i -= 1;
  467|  2.33k|                    }
  468|    988|                    Cow::Borrowed(data)
  469|       |                };
  470|  1.56k|                return Some((i, Ok((buffer, might_be_invalid_iri))));
  471|       |            } else {
  472|   236k|                return None;
  473|       |            }
  474|       |        }
  475|   394k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer3new:
  172|  78.3k|    pub fn new(mode: N3LexerMode) -> Self {
  173|  78.3k|        Self { mode }
  174|  78.3k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer26recognize_pname_or_keyword:
  227|  3.67M|    fn recognize_pname_or_keyword(
  228|  3.67M|        data: &[u8],
  229|  3.67M|        is_ending: bool,
  230|  3.67M|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  231|  3.67M|        // [139s] 	PNAME_NS 	::= 	PN_PREFIX? ':'
  232|  3.67M|        // [140s] 	PNAME_LN 	::= 	PNAME_NS PN_LOCAL
  233|  3.67M|
  234|  3.67M|        // [167s] 	PN_PREFIX 	::= 	PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
  235|  3.67M|        let mut i = 0;
  236|       |        loop {
  237|  8.05M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  238|  7.77M|                match r {
  239|  6.74M|                    Ok((c, consumed)) => {
  240|  6.74M|                        if c == ':' {
  241|   305k|                            i += consumed;
  242|   305k|                            break;
  243|  6.43M|                        } else if i == 0 {
  244|  2.33M|                            if !Self::is_possible_pn_chars_base(c) {
  245|  1.84M|                                return Some((
  246|  1.84M|                                    consumed,
  247|  1.84M|                                    Err((
  248|  1.84M|                                        0..consumed,
  249|  1.84M|                                        format!(
  250|  1.84M|                                            "'{c}' is not allowed at the beginning of a prefix name"
  251|  1.84M|                                        ),
  252|  1.84M|                                    )
  253|  1.84M|                                        .into()),
  254|  1.84M|                                ));
  255|   489k|                            }
  256|   489k|                            i += consumed;
  257|  4.10M|                        } else if Self::is_possible_pn_chars(c) || c == '.' {
  258|  3.89M|                            i += consumed;
  259|  3.89M|                        } else {
  260|   309k|                            while data[..i].ends_with(b".") {
  261|  96.8k|                                i -= 1;
  262|  96.8k|                            }
  263|   213k|                            return Some((
  264|   213k|                                i,
  265|   213k|                                str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  266|   213k|                            ));
  267|       |                        }
  268|       |                    }
  269|  1.03M|                    Err(e) => return Some((e.location.end, Err(e))),
  270|       |                }
  271|   283k|            } else if is_ending {
  272|  8.66k|                while data[..i].ends_with(b".") {
  273|  3.31k|                    i -= 1;
  274|  3.31k|                }
  275|  5.35k|                return Some(if i == 0 {
  276|  1.56k|                    (
  277|  1.56k|                        1,
  278|  1.56k|                        Err((0..1, format!("Unexpected byte {}", data[0])).into()),
  279|  1.56k|                    )
  280|       |                } else {
  281|  3.78k|                    (
  282|  3.78k|                        i,
  283|  3.78k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  284|  3.78k|                    )
  285|       |                });
  286|       |            } else {
  287|   278k|                return None;
  288|       |            }
  289|       |        }
  290|   305k|        let pn_prefix = match str_from_utf8(&data[..i - 1], 0..i - 1) {
  291|   305k|            Ok(pn_prefix) => pn_prefix,
  292|      0|            Err(e) => return Some((i, Err(e))),
  293|       |        };
  294|   305k|        if pn_prefix.ends_with('.') {
  295|    578|            return Some((
  296|    578|                i,
  297|    578|                Err((
  298|    578|                    0..i,
  299|    578|                    format!(
  300|    578|                        "'{pn_prefix}' is not a valid prefix: prefixes are not allowed to end with '.'"),
  301|    578|                )
  302|    578|                    .into()),
  303|    578|            ));
  304|   305k|        }
  305|       |
  306|   305k|        let (consumed, pn_local_result) = Self::recognize_optional_pn_local(&data[i..], is_ending)?;
  307|  64.6k|        Some((
  308|  64.6k|            consumed + i,
  309|  64.6k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  310|       |                prefix: pn_prefix,
  311|       |                local,
  312|       |                might_be_invalid_iri,
  313|  64.6k|            }),
  314|  64.6k|        ))
  315|  3.67M|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer18recognize_lang_tag:
  521|   274k|    fn recognize_lang_tag(
  522|   274k|        data: &[u8],
  523|   274k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  524|   274k|        // [144s] 	LANGTAG 	::= 	'@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
  525|   274k|        let mut is_last_block_empty = true;
  526|  1.06M|        for (i, c) in data[1..].iter().enumerate() {
  527|  1.06M|            if c.is_ascii_alphabetic() {
  528|   805k|                is_last_block_empty = false;
  529|   805k|            } else if i == 0 {
  530|   127k|                return Some((
  531|   127k|                    1,
  532|   127k|                    Err((1..2, "A language code should always start with a letter").into()),
  533|   127k|                ));
  534|   128k|            } else if is_last_block_empty {
  535|  2.12k|                return Some((i, Self::parse_lang_tag(&data[1..i], 1..i - 1)));
  536|   126k|            } else if *c == b'-' {
  537|  76.4k|                is_last_block_empty = true;
  538|  76.4k|            } else {
  539|  49.6k|                return Some((i + 1, Self::parse_lang_tag(&data[1..=i], 1..i)));
  540|       |            }
  541|       |        }
  542|  94.5k|        None
  543|   274k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer16recognize_escape:
  731|   362k|    fn recognize_escape(
  732|   362k|        data: &[u8],
  733|   362k|        position: usize,
  734|   362k|        with_echar: bool,
  735|   362k|    ) -> Option<(usize, Result<char, TokenRecognizerError>)> {
  736|   362k|        // [26] 	UCHAR 	::= 	'\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
  737|   362k|        // [159s] 	ECHAR 	::= 	'\' [tbnrf"'\]
  738|   362k|        match *data.get(1)? {
  739|  18.6k|            b'u' => match Self::recognize_hex_char(&data[2..], 4, 'u', position) {
  740|  9.98k|                Ok(c) => Some((5, Ok(c?))),
  741|  8.70k|                Err(e) => Some((5, Err(e))),
  742|       |            },
  743|   167k|            b'U' => match Self::recognize_hex_char(&data[2..], 8, 'u', position) {
  744|   163k|                Ok(c) => Some((9, Ok(c?))),
  745|  4.01k|                Err(e) => Some((9, Err(e))),
  746|       |            },
  747|  22.8k|            b't' if with_echar => Some((1, Ok('\t'))),
  748|  6.91k|            b'b' if with_echar => Some((1, Ok('\x08'))),
  749|  17.0k|            b'n' if with_echar => Some((1, Ok('\n'))),
  750|  1.28k|            b'r' if with_echar => Some((1, Ok('\r'))),
  751|  2.78k|            b'f' if with_echar => Some((1, Ok('\x0C'))),
  752|  4.29k|            b'"' if with_echar => Some((1, Ok('"'))),
  753|  7.04k|            b'\'' if with_echar => Some((1, Ok('\''))),
  754|  10.4k|            b'\\' if with_echar => Some((1, Ok('\\'))),
  755|  92.2k|            c => Some((
  756|  92.2k|                1,
  757|  92.2k|                Err((
  758|  92.2k|                    position..position + 2,
  759|  92.2k|                    format!("Unexpected escape character '\\{}'", char::from(c)),
  760|  92.2k|                )
  761|  92.2k|                    .into()),
  762|  92.2k|            )), //TODO: read until end of string
  763|       |        }
  764|   362k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer22recognize_unicode_char:
  795|  11.6M|    fn recognize_unicode_char(
  796|  11.6M|        data: &[u8],
  797|  11.6M|        position: usize,
  798|  11.6M|    ) -> Option<Result<(char, usize), TokenRecognizerError>> {
  799|  11.6M|        let mut code_point: u32;
  800|  11.6M|        let bytes_needed: usize;
  801|  11.6M|        let mut lower_boundary = 0x80;
  802|  11.6M|        let mut upper_boundary = 0xBF;
  803|       |
  804|  11.6M|        let byte = *data.first()?;
  805|  11.2M|        match byte {
  806|  11.2M|            0x00..=0x7F => return Some(Ok((char::from(byte), 1))),
  807|   674k|            0xC2..=0xDF => {
  808|   261k|                bytes_needed = 1;
  809|   261k|                code_point = u32::from(byte) & 0x1F;
  810|   261k|            }
  811|   413k|            0xE0..=0xEF => {
  812|   190k|                if byte == 0xE0 {
  813|  17.8k|                    lower_boundary = 0xA0;
  814|   172k|                }
  815|   190k|                if byte == 0xED {
  816|  7.55k|                    upper_boundary = 0x9F;
  817|   182k|                }
  818|   190k|                bytes_needed = 2;
  819|   190k|                code_point = u32::from(byte) & 0xF;
  820|       |            }
  821|   222k|            0xF0..=0xF4 => {
  822|   118k|                if byte == 0xF0 {
  823|  45.6k|                    lower_boundary = 0x90;
  824|  72.5k|                }
  825|   118k|                if byte == 0xF4 {
  826|  9.37k|                    upper_boundary = 0x8F;
  827|   108k|                }
  828|   118k|                bytes_needed = 3;
  829|   118k|                code_point = u32::from(byte) & 0x7;
  830|       |            }
  831|       |            _ => {
  832|   635k|                return Some(Err((
  833|   635k|                    position..=position,
  834|   635k|                    "Invalid UTF-8 character encoding",
  835|   635k|                )
  836|   635k|                    .into()))
  837|       |            }
  838|       |        }
  839|       |
  840|   598k|        for i in 1..=bytes_needed {
  841|   598k|            let byte = *data.get(i)?;
  842|   479k|            if byte < lower_boundary || upper_boundary < byte {
  843|   418k|                return Some(Err((
  844|   418k|                    position..=position + i,
  845|   418k|                    "Invalid UTF-8 character encoding",
  846|   418k|                )
  847|   418k|                    .into()));
  848|  60.6k|            }
  849|  60.6k|            lower_boundary = 0x80;
  850|  60.6k|            upper_boundary = 0xBF;
  851|  60.6k|            code_point = (code_point << 6) | (u32::from(byte) & 0x3F);
  852|       |        }
  853|       |
  854|  32.7k|        Some(
  855|  32.7k|            char::from_u32(code_point)
  856|  32.7k|                .map(|c| (c, bytes_needed + 1))
  857|  32.7k|                .ok_or_else(|| {
  858|       |                    (
  859|       |                        position..=position + bytes_needed,
  860|       |                        format!("The codepoint {code_point:X} is not a valid unicode character"),
  861|       |                    )
  862|       |                        .into()
  863|  32.7k|                }),
  864|  32.7k|        )
  865|  11.6M|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer18recognize_variable:
  317|  88.6k|    fn recognize_variable(
  318|  88.6k|        data: &[u8],
  319|  88.6k|        is_ending: bool,
  320|  88.6k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  321|       |        // [36] 	QUICK_VAR_NAME 	::= 	"?" PN_LOCAL
  322|  88.6k|        let (consumed, result) = Self::recognize_optional_pn_local(&data[1..], is_ending)?;
  323|  45.7k|        Some((
  324|  45.7k|            consumed + 1,
  325|  45.7k|            result.and_then(|(name, _)| {
  326|       |                if name.is_empty() {
  327|       |                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  328|       |                } else {
  329|       |                    Ok(N3Token::Variable(name))
  330|       |                }
  331|  45.7k|            }),
  332|  45.7k|        ))
  333|  88.6k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer43is_possible_pn_chars_base_but_not_valid_iri:
  898|  2.52M|    fn is_possible_pn_chars_base_but_not_valid_iri(c: char) -> bool {
  899|  2.52M|        matches!(c, '\u{FFF0}'..='\u{FFFD}')
  900|  2.52M|            || u32::from(c) % u32::from('\u{FFFE}') == 0
  901|  2.52M|            || u32::from(c) % u32::from('\u{FFFF}') == 0
  902|  2.52M|    }
_RNvNtCs4WjTcpTVJQo_5oxttl5lexer13str_from_utf8:
  927|  1.13M|fn str_from_utf8(data: &[u8], range: Range<usize>) -> Result<&str, TokenRecognizerError> {
  928|  1.13M|    str::from_utf8(data).map_err(|e| {
  929|       |        (
  930|       |            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  931|       |            format!("Invalid UTF-8: {e}"),
  932|       |        )
  933|       |            .into()
  934|  1.13M|    })
  935|  1.13M|}
_RNvXs2_NtCs4WjTcpTVJQo_5oxttl5lexerNtB5_7N3TokenNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqB7_:
   12|  1.65M|#[derive(Debug, PartialEq, Eq)]
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer25is_possible_pn_chars_base:
  868|  9.52M|    fn is_possible_pn_chars_base(c: char) -> bool {
  869|  9.52M|        matches!(c,
  870|  5.17M|        'A'..='Z'
  871|   751k|        | 'a'..='z'
  872|  27.2k|        | '\u{00C0}'..='\u{00D6}'
  873|  27.0k|        | '\u{00D8}'..='\u{00F6}'
  874|  25.6k|        | '\u{00F8}'..='\u{02FF}'
  875|  22.8k|        | '\u{0370}'..='\u{037D}'
  876|  22.8k|        | '\u{037F}'..='\u{1FFF}'
  877|  11.7k|        | '\u{200C}'..='\u{200D}'
  878|  11.7k|        | '\u{2070}'..='\u{218F}'
  879|  11.7k|        | '\u{2C00}'..='\u{2FEF}'
  880|  11.5k|        | '\u{3001}'..='\u{D7FF}'
  881|  2.87k|        | '\u{F900}'..='\u{FDCF}'
  882|  2.70k|        | '\u{FDF0}'..='\u{FFFD}'
  883|  2.70k|        | '\u{10000}'..='\u{EFFFF}')
  884|  9.52M|    }

_RNvMs_NtCs4WjTcpTVJQo_5oxttl12line_formatsNtB4_16NQuadsRecognizer10new_parser:
  264|  78.3k|    pub fn new_parser(
  265|  78.3k|        with_graph_name: bool,
  266|  78.3k|        #[cfg(feature = "rdf-star")] with_quoted_triples: bool,
  267|  78.3k|    ) -> Parser<Self> {
  268|  78.3k|        Parser::new(
  269|  78.3k|            Lexer::new(
  270|  78.3k|                N3Lexer::new(N3LexerMode::NTriples),
  271|  78.3k|                MIN_BUFFER_SIZE,
  272|  78.3k|                MAX_BUFFER_SIZE,
  273|  78.3k|                true,
  274|  78.3k|                Some(b"#"),
  275|  78.3k|            ),
  276|  78.3k|            NQuadsRecognizer {
  277|  78.3k|                stack: vec![NQuadsState::ExpectSubject],
  278|  78.3k|                subjects: Vec::new(),
  279|  78.3k|                predicates: Vec::new(),
  280|  78.3k|                objects: Vec::new(),
  281|  78.3k|            },
  282|  78.3k|            NQuadsRecognizerContext {
  283|  78.3k|                with_graph_name,
  284|  78.3k|                #[cfg(feature = "rdf-star")]
  285|  78.3k|                with_quoted_triples,
  286|  78.3k|                lexer_options: N3LexerOptions::default(),
  287|  78.3k|            },
  288|  78.3k|        )
  289|  78.3k|    }
_RNvXNtCs4WjTcpTVJQo_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer20error_recovery_state:
   46|  3.43M|    fn error_recovery_state(mut self) -> Self {
   47|  3.43M|        self.stack.clear();
   48|  3.43M|        self.subjects.clear();
   49|  3.43M|        self.predicates.clear();
   50|  3.43M|        self.objects.clear();
   51|  3.43M|        self
   52|  3.43M|    }
_RNvXNtCs4WjTcpTVJQo_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer14recognize_next:
   54|  1.82M|    fn recognize_next(
   55|  1.82M|        mut self,
   56|  1.82M|        token: N3Token<'_>,
   57|  1.82M|        context: &mut NQuadsRecognizerContext,
   58|  1.82M|        results: &mut Vec<Quad>,
   59|  1.82M|        errors: &mut Vec<RuleRecognizerError>,
   60|  1.82M|    ) -> Self {
   61|  1.82M|        if let Some(state) = self.stack.pop() {
   62|   170k|            match state {
   63|  12.5k|                NQuadsState::ExpectSubject => match token {
   64|  1.08k|                    N3Token::IriRef(s) => {
   65|  1.08k|                        self.subjects
   66|  1.08k|                            .push(NamedNode::from(s).into());
   67|  1.08k|                        self.stack.push(NQuadsState::ExpectPredicate);
   68|  1.08k|                        self
   69|       |                    }
   70|  3.33k|                    N3Token::BlankNodeLabel(s) => {
   71|  3.33k|                        self.subjects.push(BlankNode::new_unchecked(s).into());
   72|  3.33k|                        self.stack.push(NQuadsState::ExpectPredicate);
   73|  3.33k|                        self
   74|       |                    }
   75|       |                    #[cfg(feature = "rdf-star")]
   76|   150k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
   77|  12.5k|                        self.stack.push(NQuadsState::AfterQuotedSubject);
   78|  12.5k|                        self.stack.push(NQuadsState::ExpectSubject);
   79|  12.5k|                        self
   80|       |                    }
   81|   151k|                    _ => self.error(
   82|   151k|                        errors,
   83|   151k|                        "The subject of a triple should be an IRI or a blank node, TOKEN found",
   84|   151k|                    ),
   85|       |                },
   86|  1.90k|                NQuadsState::ExpectPredicate => match token {
   87|    700|                    N3Token::IriRef(p) => {
   88|    700|                        self.predicates
   89|    700|                            .push(p.into());
   90|    700|                        self.stack.push(NQuadsState::ExpectedObject);
   91|    700|                        self
   92|       |                    }
   93|  1.20k|                    _ => self.error(
   94|  1.20k|                        errors,
   95|  1.20k|                        "The predicate of a triple should be an IRI, TOKEN found",
   96|  1.20k|                    ),
   97|       |                },
   98|      4|                NQuadsState::ExpectedObject => match token {
   99|     76|                    N3Token::IriRef(o) => {
  100|     76|                        self.objects
  101|     76|                            .push(NamedNode::from(o).into());
  102|     76|                        self.stack
  103|     76|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  104|     76|                        self
  105|       |                    }
  106|      0|                    N3Token::BlankNodeLabel(o) => {
  107|      0|                        self.objects.push(BlankNode::new_unchecked(o).into());
  108|      0|                        self.stack
  109|      0|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  110|      0|                        self
  111|       |                    }
  112|      0|                    N3Token::String(value) => {
  113|      0|                        self.stack
  114|      0|                            .push(NQuadsState::ExpectLiteralAnnotationOrGraphNameOrDot { value });
  115|      0|                        self
  116|       |                    }
  117|       |                    #[cfg(feature = "rdf-star")]
  118|    130|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  119|      4|                        self.stack.push(NQuadsState::AfterQuotedObject);
  120|      4|                        self.stack.push(NQuadsState::ExpectSubject);
  121|      4|                        self
  122|       |                    }
  123|    256|                    _ => self.error(
  124|    256|                        errors,
  125|    256|                        "The object of a triple should be an IRI, a blank node or a literal, TOKEN found",
  126|    256|                    ),
  127|       |                },
  128|      0|                NQuadsState::ExpectLiteralAnnotationOrGraphNameOrDot { value } => match token {
  129|      0|                    N3Token::LangTag(lang_tag) => {
  130|      0|                        self.objects.push(
  131|      0|                            Literal::new_language_tagged_literal_unchecked(
  132|      0|                                value,
  133|      0|                                lang_tag.to_ascii_lowercase(),
  134|      0|                            )
  135|      0|                            .into(),
  136|      0|                        );
  137|      0|                        self.stack
  138|      0|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  139|      0|                        self
  140|       |                    }
  141|      0|                    N3Token::Punctuation("^^") => {
  142|      0|                        self.stack
  143|      0|                            .push(NQuadsState::ExpectLiteralDatatype { value });
  144|      0|                        self
  145|       |                    }
  146|       |                    _ => {
  147|      0|                        self.objects.push(Literal::new_simple_literal(value).into());
  148|      0|                        self.stack
  149|      0|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  150|      0|                        self.recognize_next(token, context, results, errors)
  151|       |                    }
  152|       |                },
  153|      0|                NQuadsState::ExpectLiteralDatatype { value } => match token {
  154|      0|                    N3Token::IriRef(d) => {
  155|      0|                        self.objects.push(
  156|      0|                            Literal::new_typed_literal(
  157|      0|                                value,
  158|      0|                                d
  159|      0|                            )
  160|      0|                            .into(),
  161|      0|                        );
  162|      0|                        self.stack
  163|      0|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  164|      0|                        self
  165|       |                    }
  166|      0|                    _ => self.error(errors, "A literal datatype must be an IRI, found TOKEN"),
  167|       |                },
  168|       |                NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple => {
  169|     54|                    if self.stack.is_empty() {
  170|     30|                        match token {
  171|     30|                            N3Token::IriRef(g) if context.with_graph_name => {
  172|     30|                                self.emit_quad(
  173|     30|                                    results,
  174|     30|                                    NamedNode::from(g).into(),
  175|     30|                                );
  176|     30|                                self.stack.push(NQuadsState::ExpectDot);
  177|     30|                                self
  178|       |                            }
  179|      0|                            N3Token::BlankNodeLabel(g) if context.with_graph_name => {
  180|      0|                                self.emit_quad(results, BlankNode::new_unchecked(g).into());
  181|      0|                                self.stack.push(NQuadsState::ExpectDot);
  182|      0|                                self
  183|       |                            }
  184|       |                            _ => {
  185|     24|                                self.emit_quad(results, GraphName::DefaultGraph);
  186|     24|                                self.stack.push(NQuadsState::ExpectDot);
  187|     24|                                self.recognize_next(token, context, results, errors)
  188|       |                            }
  189|       |                        }
  190|      0|                    } else if token == N3Token::Punctuation(">>") {
  191|      0|                        self
  192|       |                    } else {
  193|      0|                        self.error(errors, "Expecting the end of a quoted triple '>>'")
  194|       |                    }
  195|       |                }
  196|     44|                NQuadsState::ExpectDot => if let N3Token::Punctuation(".") = token {
  197|     18|                    self.stack.push(NQuadsState::ExpectSubject);
  198|     18|                    self
  199|       |                } else {
  200|     26|                    errors.push("Quads should be followed by a dot".into());
  201|     26|                    self.stack.push(NQuadsState::ExpectSubject);
  202|     26|                    self.recognize_next(token, context, results, errors)
  203|       |                },
  204|       |                #[cfg(feature = "rdf-star")]
  205|       |                NQuadsState::AfterQuotedSubject => {
  206|      0|                    let triple = Triple {
  207|      0|                        subject: self.subjects.pop().unwrap(),
  208|      0|                        predicate: self.predicates.pop().unwrap(),
  209|      0|                        object: self.objects.pop().unwrap(),
  210|      0|                    };
  211|      0|                    self.subjects.push(triple.into());
  212|      0|                    self.stack.push(NQuadsState::ExpectPredicate);
  213|      0|                    self.recognize_next(token,context,  results, errors)
  214|       |                }
  215|       |                #[cfg(feature = "rdf-star")]
  216|       |                NQuadsState::AfterQuotedObject => {
  217|      0|                    let triple = Triple {
  218|      0|                        subject: self.subjects.pop().unwrap(),
  219|      0|                        predicate: self.predicates.pop().unwrap(),
  220|      0|                        object: self.objects.pop().unwrap(),
  221|      0|                    };
  222|      0|                    self.objects.push(triple.into());
  223|      0|                    self.stack
  224|      0|                        .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  225|      0|                    self.recognize_next(token, context, results, errors)
  226|       |                }
  227|       |            }
  228|  1.65M|        } else if token == N3Token::Punctuation(".") {
  229|   165k|            self.stack.push(NQuadsState::ExpectSubject);
  230|   165k|            self
  231|       |        } else {
  232|  1.48M|            self
  233|       |        }
  234|  1.82M|    }
_RNvXNtCs4WjTcpTVJQo_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer13lexer_options:
  258|  7.59M|    fn lexer_options(context: &NQuadsRecognizerContext) -> &N3LexerOptions {
  259|  7.59M|        &context.lexer_options
  260|  7.59M|    }
_RNvXNtCs4WjTcpTVJQo_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer13recognize_end:
  236|  78.3k|    fn recognize_end(
  237|  78.3k|        mut self,
  238|  78.3k|        _context: &mut NQuadsRecognizerContext,
  239|  78.3k|        results: &mut Vec<Quad>,
  240|  78.3k|        errors: &mut Vec<RuleRecognizerError>,
  241|  78.3k|    ) {
  242|  78.3k|        match &*self.stack {
  243|  78.3k|            [NQuadsState::ExpectSubject] | [] => (),
  244|      0|            [NQuadsState::ExpectDot] => errors.push("Triples should be followed by a dot".into()),
  245|       |            [NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple] => {
  246|      0|                self.emit_quad(results, GraphName::DefaultGraph);
  247|      0|                errors.push("Triples should be followed by a dot".into())
  248|       |            }
  249|      0|            [NQuadsState::ExpectLiteralAnnotationOrGraphNameOrDot { value }] => {
  250|      0|                self.objects.push(Literal::new_simple_literal(value).into());
  251|      0|                self.emit_quad(results, GraphName::DefaultGraph);
  252|      0|                errors.push("Triples should be followed by a dot".into())
  253|       |            }
  254|    112|            _ => errors.push("Unexpected end".into()), //TODO
  255|       |        }
  256|  78.3k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl12line_formatsNtB4_16NQuadsRecognizer9emit_quad:
  305|     54|    fn emit_quad(&mut self, results: &mut Vec<Quad>, graph_name: GraphName) {
  306|     54|        results.push(Quad {
  307|     54|            subject: self.subjects.pop().unwrap(),
  308|     54|            predicate: self.predicates.pop().unwrap(),
  309|     54|            object: self.objects.pop().unwrap(),
  310|     54|            graph_name,
  311|     54|        })
  312|     54|    }
_RINvMs_NtCs4WjTcpTVJQo_5oxttl12line_formatsNtB5_16NQuadsRecognizer5errorReEB7_:
  292|   152k|    fn error(
  293|   152k|        mut self,
  294|   152k|        errors: &mut Vec<RuleRecognizerError>,
  295|   152k|        msg: impl Into<RuleRecognizerError>,
  296|   152k|    ) -> Self {
  297|   152k|        errors.push(msg.into());
  298|   152k|        self.stack.clear();
  299|   152k|        self.subjects.clear();
  300|   152k|        self.predicates.clear();
  301|   152k|        self.objects.clear();
  302|   152k|        self
  303|   152k|    }

_RINvMs1_NtCs4WjTcpTVJQo_5oxttl6nquadsNtB6_16NQuadsSerializer18serialize_to_writeINtNtCsdBW21Yiwikk_5alloc3vec3VechEECs9GGLCkRBSt4_6nquads:
  368|  26.1k|    pub fn serialize_to_write<W: Write>(self, write: W) -> ToWriteNQuadsWriter<W> {
  369|  26.1k|        ToWriteNQuadsWriter {
  370|  26.1k|            write,
  371|  26.1k|            writer: self.serialize(),
  372|  26.1k|        }
  373|  26.1k|    }
_RNvMs2_NtCs4WjTcpTVJQo_5oxttl6nquadsINtB5_19ToWriteNQuadsWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE6finishCs9GGLCkRBSt4_6nquads:
  467|  26.1k|    pub fn finish(self) -> W {
  468|  26.1k|        self.write
  469|  26.1k|    }
_RNvXs_NtCs4WjTcpTVJQo_5oxttl6nquadsINtB4_20FromReadNQuadsReaderRShENtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4nextCs9GGLCkRBSt4_6nquads:
  204|  26.1k|    fn next(&mut self) -> Option<Result<Quad, ParseError>> {
  205|  26.1k|        self.inner.next()
  206|  26.1k|    }
_RINvMs2_NtCs4WjTcpTVJQo_5oxttl6nquadsINtB6_19ToWriteNQuadsWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE10write_quadRNtNtCsbrE1BkJ52QU_5oxrdf6triple4QuadECs9GGLCkRBSt4_6nquads:
  462|     18|    pub fn write_quad<'a>(&mut self, q: impl Into<QuadRef<'a>>) -> io::Result<()> {
  463|     18|        self.writer.write_quad(q, &mut self.write)
  464|     18|    }
_RINvMs3_NtCs4WjTcpTVJQo_5oxttl6nquadsNtB6_20LowLevelNQuadsWriter10write_quadRNtNtCsbrE1BkJ52QU_5oxrdf6triple4QuadQINtNtCsdBW21Yiwikk_5alloc3vec3VechEECs9GGLCkRBSt4_6nquads:
  543|     18|    pub fn write_quad<'a>(
  544|     18|        &mut self,
  545|     18|        q: impl Into<QuadRef<'a>>,
  546|     18|        mut write: impl Write,
  547|     18|    ) -> io::Result<()> {
  548|     18|        writeln!(write, "{} .", q.into())
  549|     18|    }
_RINvMNtCs4WjTcpTVJQo_5oxttl6nquadsNtB3_12NQuadsParser10parse_readRShECs9GGLCkRBSt4_6nquads:
   82|  26.1k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadNQuadsReader<R> {
   83|  26.1k|        FromReadNQuadsReader {
   84|  26.1k|            inner: self.parse().parser.parse_read(read),
   85|  26.1k|        }
   86|  26.1k|    }
_RNvXs4_NtCs4WjTcpTVJQo_5oxttl6nquadsNtB5_12NQuadsParserNtNtCsl2lhD68vXAd_4core7default7Default7defaultCs9GGLCkRBSt4_6nquads:
   37|  78.3k|#[derive(Default)]
_RNvMNtCs4WjTcpTVJQo_5oxttl6nquadsNtB2_12NQuadsParser3newCs9GGLCkRBSt4_6nquads:
   47|  78.3k|    pub fn new() -> Self {
   48|  78.3k|        Self::default()
   49|  78.3k|    }
_RNvMNtCs4WjTcpTVJQo_5oxttl6nquadsNtB2_12NQuadsParser19with_quoted_triplesCs9GGLCkRBSt4_6nquads:
   54|  78.3k|    pub fn with_quoted_triples(mut self) -> Self {
   55|  78.3k|        self.with_quoted_triples = true;
   56|  78.3k|        self
   57|  78.3k|    }
_RNvMs1_NtCs4WjTcpTVJQo_5oxttl6nquadsNtB5_16NQuadsSerializer3newCs9GGLCkRBSt4_6nquads:
  345|  26.1k|    pub fn new() -> Self {
  346|  26.1k|        Self
  347|  26.1k|    }
_RNvMNtCs4WjTcpTVJQo_5oxttl6nquadsNtB2_12NQuadsParser5parse:
  162|  78.3k|    pub fn parse(self) -> LowLevelNQuadsReader {
  163|  78.3k|        LowLevelNQuadsReader {
  164|  78.3k|            parser: NQuadsRecognizer::new_parser(
  165|  78.3k|                true,
  166|  78.3k|                #[cfg(feature = "rdf-star")]
  167|  78.3k|                self.with_quoted_triples,
  168|  78.3k|            ),
  169|  78.3k|        }
  170|  78.3k|    }
_RNvMs0_NtCs4WjTcpTVJQo_5oxttl6nquadsNtB5_20LowLevelNQuadsReader3end:
  299|  52.2k|    pub fn end(&mut self) {
  300|  52.2k|        self.parser.end()
  301|  52.2k|    }
_RNvMs0_NtCs4WjTcpTVJQo_5oxttl6nquadsNtB5_20LowLevelNQuadsReader6is_end:
  304|  52.2k|    pub fn is_end(&self) -> bool {
  305|  52.2k|        self.parser.is_end()
  306|  52.2k|    }
_RNvMs1_NtCs4WjTcpTVJQo_5oxttl6nquadsNtB5_16NQuadsSerializer9serialize:
  430|  26.1k|    pub fn serialize(&self) -> LowLevelNQuadsWriter {
  431|  26.1k|        LowLevelNQuadsWriter
  432|  26.1k|    }
_RNvMs0_NtCs4WjTcpTVJQo_5oxttl6nquadsNtB5_20LowLevelNQuadsReader9read_next:
  312|  5.79M|    pub fn read_next(&mut self) -> Option<Result<Quad, SyntaxError>> {
  313|  5.79M|        self.parser.read_next()
  314|  5.79M|    }
_RNvMs0_NtCs4WjTcpTVJQo_5oxttl6nquadsNtB5_20LowLevelNQuadsReader17extend_from_slice:
  292|  2.15M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  293|  2.15M|        self.parser.extend_from_slice(other)
  294|  2.15M|    }

_RNvXs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5errorNtB4_11SyntaxErrorNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCs9GGLCkRBSt4_6nquads:
   38|  3.58M|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   39|  3.58M|        if self.location.start.offset + 1 >= self.location.end.offset {
   40|  3.05M|            write!(
   41|  3.05M|                f,
   42|  3.05M|                "Parser error at line {} column {}: {}",
   43|  3.05M|                self.location.start.line + 1,
   44|  3.05M|                self.location.start.column + 1,
   45|  3.05M|                self.message
   46|  3.05M|            )
   47|   531k|        } else if self.location.start.line == self.location.end.line {
   48|   526k|            write!(
   49|   526k|                f,
   50|   526k|                "Parser error between at line {} between columns {} and column {}: {}",
   51|   526k|                self.location.start.line + 1,
   52|   526k|                self.location.start.column + 1,
   53|   526k|                self.location.end.column + 1,
   54|   526k|                self.message
   55|   526k|            )
   56|       |        } else {
   57|  4.70k|            write!(
   58|  4.70k|                f,
   59|  4.70k|                "Parser error between line {} column {} and line {} column {}: {}",
   60|  4.70k|                self.location.start.line + 1,
   61|  4.70k|                self.location.start.column + 1,
   62|  4.70k|                self.location.end.line + 1,
   63|  4.70k|                self.location.end.column + 1,
   64|  4.70k|                self.message
   65|  4.70k|            )
   66|       |        }
   67|  3.58M|    }

_RINvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB6_5LexerNtNtBa_5lexer7N3LexerE16extend_from_readRShECs9GGLCkRBSt4_6nquads:
  113|  52.2k|    pub fn extend_from_read(&mut self, read: &mut impl Read) -> io::Result<()> {
  114|  52.2k|        self.shrink_data();
  115|  52.2k|        if self.data.len() == self.max_buffer_size {
  116|      0|            return Err(io::Error::new(
  117|      0|                io::ErrorKind::OutOfMemory,
  118|      0|                format!(
  119|      0|                    "Reached the buffer maximal size of {}",
  120|      0|                    self.max_buffer_size
  121|      0|                ),
  122|      0|            ));
  123|  52.2k|        }
  124|  52.2k|        let min_end = min(self.data.len() + self.min_buffer_size, self.max_buffer_size);
  125|  52.2k|        let new_start = self.data.len();
  126|  52.2k|        self.data.resize(min_end, 0);
  127|  52.2k|        if self.data.len() < self.data.capacity() {
  128|      0|            // We keep extending to have as much space as available without reallocation
  129|      0|            self.data.resize(self.data.capacity(), 0);
  130|  52.2k|        }
  131|  52.2k|        let read = read.read(&mut self.data[new_start..])?;
  132|  52.2k|        self.data.truncate(new_start + read);
  133|  52.2k|        self.is_ending = read == 0;
  134|  52.2k|        Ok(())
  135|  52.2k|    }
_RNvXs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCsl2lhD68vXAd_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejEReEE4fromB8_:
   41|  1.05M|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  1.05M|        (*location.start()..*location.end() + 1, message).into()
   43|  1.05M|    }
_RNCNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB7_5LexerNtNtBb_5lexer7N3LexerE9read_next0Bb_:
  227|  3.41M|        Some(result.map_err(|e| SyntaxError {
  228|  3.41M|            location: self.location_from_buffer_offset_range(e.location),
  229|  3.41M|            message: e.message,
  230|  3.41M|        }))
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  397|  12.0M|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  398|  12.0M|        let mut num_of_jumps = 0;
  399|  12.0M|        let mut last_jump_pos = 0;
  400|  12.0M|        let mut previous_cr = 0;
  401|  12.0M|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  402|  39.6k|            if bytes[pos] == b'\r' {
  403|  17.0k|                previous_cr = pos;
  404|  17.0k|                num_of_jumps += 1;
  405|  17.0k|                last_jump_pos = pos + 1;
  406|  17.0k|            } else {
  407|  22.5k|                if previous_cr < pos - 1 {
  408|  15.8k|                    // We count \r\n as a single line jump
  409|  15.8k|                    num_of_jumps += 1;
  410|  15.8k|                }
  411|  22.5k|                last_jump_pos = pos + 1;
  412|       |            }
  413|       |        }
  414|  12.0M|        (num_of_jumps, last_jump_pos)
  415|  12.0M|    }
_RNvXNtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCsl2lhD68vXAd_4core7convert4FromTINtNtNtB1a_3ops5range5RangejENtNtCsdBW21Yiwikk_5alloc6string6StringEE4fromB6_:
   31|  2.16M|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|  2.16M|        Self {
   33|  2.16M|            location,
   34|  2.16M|            message: message.into(),
   35|  2.16M|        }
   36|  2.16M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE9read_nextB9_:
  166|  7.59M|    pub fn read_next(&mut self, options: &R::Options) -> Option<Result<R::Token<'_>, SyntaxError>> {
  167|  7.59M|        self.skip_whitespaces_and_comments()?;
  168|  7.54M|        self.previous_position = self.position;
  169|  7.54M|        let Some((consumed, result)) = self.parser.recognize_next_token(
  170|  7.54M|            &self.data[self.position.buffer_offset..],
  171|  7.54M|            self.is_ending,
  172|  7.54M|            options,
  173|  7.54M|        ) else {
  174|  2.30M|            return if self.is_ending {
  175|   176k|                if self.position.buffer_offset == self.data.len() {
  176|   156k|                    None // We have finished
  177|       |                } else {
  178|  19.8k|                    let (new_line_jumps, new_line_start) =
  179|  19.8k|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  180|  19.8k|                            &self.data[self.position.buffer_offset..],
  181|  19.8k|                        );
  182|  19.8k|                    if new_line_jumps > 0 {
  183|  2.90k|                        self.position.line_start_buffer_offset =
  184|  2.90k|                            self.position.buffer_offset + new_line_start;
  185|  16.9k|                    }
  186|  19.8k|                    self.position.global_offset +=
  187|  19.8k|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  188|  19.8k|                    self.position.buffer_offset = self.data.len();
  189|  19.8k|                    self.position.global_line += new_line_jumps;
  190|  19.8k|                    let new_position = TextPosition {
  191|  19.8k|                        line: self.position.global_line,
  192|  19.8k|                        column: Self::column_from_bytes(
  193|  19.8k|                            &self.data[self.position.line_start_buffer_offset..],
  194|  19.8k|                        ),
  195|  19.8k|                        offset: self.position.global_offset,
  196|  19.8k|                    };
  197|  19.8k|                    let error = SyntaxError {
  198|  19.8k|                        location: new_position..new_position,
  199|  19.8k|                        message: "Unexpected end of file".into(),
  200|  19.8k|                    };
  201|  19.8k|                    self.position.buffer_offset = self.data.len(); // We consume everything
  202|  19.8k|                    Some(Err(error))
  203|       |                }
  204|       |            } else {
  205|  2.12M|                None
  206|       |            };
  207|       |        };
  208|       |        debug_assert!(
  209|      0|            consumed > 0,
  210|      0|            "The lexer must consume at least one byte each time"
  211|       |        );
  212|       |        debug_assert!(
  213|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  214|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  215|      0|            self.data.len() - self.position.buffer_offset
  216|       |        );
  217|  5.23M|        let (new_line_jumps, new_line_start) =
  218|  5.23M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  219|  5.23M|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  220|  5.23M|            );
  221|  5.23M|        if new_line_jumps > 0 {
  222|  7.19k|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  223|  5.23M|        }
  224|  5.23M|        self.position.buffer_offset += consumed;
  225|  5.23M|        self.position.global_offset += u64::try_from(consumed).unwrap();
  226|  5.23M|        self.position.global_line += new_line_jumps;
  227|  5.23M|        Some(result.map_err(|e| SyntaxError {
  228|       |            location: self.location_from_buffer_offset_range(e.location),
  229|       |            message: e.message,
  230|  5.23M|        }))
  231|  7.59M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  297|  7.59M|    fn skip_whitespaces_and_comments(&mut self) -> Option<()> {
  298|       |        loop {
  299|  7.60M|            self.skip_whitespaces()?;
  300|       |
  301|  7.59M|            let buf = &self.data[self.position.buffer_offset..];
  302|  7.59M|            if let Some(line_comment_start) = self.line_comment_start {
  303|  7.59M|                if buf.starts_with(line_comment_start) {
  304|       |                    // Comment
  305|  50.1k|                    if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  306|  12.9k|                        let mut end_position = line_comment_start.len() + end;
  307|  12.9k|                        if buf.get(end_position).copied() == Some(b'\r') {
  308|       |                            // We look for \n for Windows line end style
  309|  10.2k|                            if let Some(c) = buf.get(end_position + 1) {
  310|  1.98k|                                if *c == b'\n' {
  311|     26|                                    end_position += 1;
  312|  1.95k|                                }
  313|  8.27k|                            } else if !self.is_ending {
  314|  8.24k|                                return None; // We need to read more
  315|     36|                            }
  316|  2.67k|                        }
  317|  4.69k|                        let comment_size = end_position + 1;
  318|  4.69k|                        self.position.buffer_offset += comment_size;
  319|  4.69k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  320|  4.69k|                        self.position.global_offset += u64::try_from(comment_size).unwrap();
  321|  4.69k|                        self.position.global_line += 1;
  322|  4.69k|                        continue;
  323|  37.1k|                    }
  324|  37.1k|                    if self.is_ending {
  325|  1.39k|                        self.position.buffer_offset = self.data.len(); // EOF
  326|  1.39k|                        return Some(());
  327|  35.7k|                    }
  328|  35.7k|                    return None; // We need more data
  329|  7.54M|                }
  330|      0|            }
  331|  7.54M|            return Some(());
  332|       |        }
  333|  7.59M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  335|  7.60M|    fn skip_whitespaces(&mut self) -> Option<()> {
  336|  7.60M|        if self.is_line_jump_whitespace {
  337|  7.60M|            let mut i = self.position.buffer_offset;
  338|  7.73M|            while let Some(c) = self.data.get(i) {
  339|  6.98M|                match c {
  340|  13.8k|                    b' ' | b'\t' => {
  341|  13.8k|                        self.position.buffer_offset += 1;
  342|  13.8k|                        self.position.global_offset += 1;
  343|  13.8k|                    }
  344|       |                    b'\r' => {
  345|       |                        // We look for \n for Windows line end style
  346|  90.7k|                        let mut increment: u8 = 1;
  347|  90.7k|                        if let Some(c) = self.data.get(i + 1) {
  348|  82.6k|                            if *c == b'\n' {
  349|     50|                                increment += 1;
  350|     50|                                i += 1;
  351|  82.5k|                            }
  352|  8.14k|                        } else if !self.is_ending {
  353|  8.05k|                            return None; // We need to read more
  354|     90|                        }
  355|  82.7k|                        self.position.buffer_offset += usize::from(increment);
  356|  82.7k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  357|  82.7k|                        self.position.global_offset += u64::from(increment);
  358|  82.7k|                        self.position.global_line += 1;
  359|       |                    }
  360|  39.8k|                    b'\n' => {
  361|  39.8k|                        self.position.buffer_offset += 1;
  362|  39.8k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  363|  39.8k|                        self.position.global_offset += 1;
  364|  39.8k|                        self.position.global_line += 1;
  365|  39.8k|                    }
  366|  6.84M|                    _ => return Some(()),
  367|       |                }
  368|   136k|                i += 1;
  369|       |                //TODO: SIMD
  370|       |            }
  371|       |        } else {
  372|      0|            for c in &self.data[self.position.buffer_offset..] {
  373|      0|                if matches!(c, b' ' | b'\t') {
  374|      0|                    self.position.buffer_offset += 1;
  375|      0|                    self.position.global_offset += 1;
  376|      0|                } else {
  377|      0|                    return Some(());
  378|       |                }
  379|       |                //TODO: SIMD
  380|       |            }
  381|       |        }
  382|   751k|        Some(())
  383|  7.60M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE33location_from_buffer_offset_rangeB9_:
  233|  3.41M|    pub fn location_from_buffer_offset_range(
  234|  3.41M|        &self,
  235|  3.41M|        offset_range: Range<usize>,
  236|  3.41M|    ) -> Range<TextPosition> {
  237|  3.41M|        let start_offset = self.previous_position.buffer_offset + offset_range.start;
  238|  3.41M|        let (start_extra_line_jumps, start_line_start) =
  239|  3.41M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  240|  3.41M|                &self.data[self.previous_position.buffer_offset..start_offset],
  241|  3.41M|            );
  242|  3.41M|        let start_line_start = if start_extra_line_jumps > 0 {
  243|  1.68k|            start_line_start + self.previous_position.buffer_offset
  244|       |        } else {
  245|  3.41M|            self.previous_position.line_start_buffer_offset
  246|       |        };
  247|  3.41M|        let end_offset = self.previous_position.buffer_offset + offset_range.end;
  248|  3.41M|        let (end_extra_line_jumps, end_line_start) =
  249|  3.41M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  250|  3.41M|                &self.data[self.previous_position.buffer_offset..end_offset],
  251|  3.41M|            );
  252|  3.41M|        let end_line_start = if end_extra_line_jumps > 0 {
  253|  6.68k|            end_line_start + self.previous_position.buffer_offset
  254|       |        } else {
  255|  3.40M|            self.previous_position.line_start_buffer_offset
  256|       |        };
  257|  3.41M|        TextPosition {
  258|  3.41M|            line: self.previous_position.global_line + start_extra_line_jumps,
  259|  3.41M|            column: Self::column_from_bytes(&self.data[start_line_start..start_offset]),
  260|  3.41M|            offset: self.previous_position.global_offset
  261|  3.41M|                + u64::try_from(offset_range.start).unwrap(),
  262|  3.41M|        }..TextPosition {
  263|  3.41M|            line: self.previous_position.global_line + end_extra_line_jumps,
  264|  3.41M|            column: Self::column_from_bytes(&self.data[end_line_start..end_offset]),
  265|  3.41M|            offset: self.previous_position.global_offset + u64::try_from(offset_range.end).unwrap(),
  266|  3.41M|        }
  267|  3.41M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE11shrink_dataB9_:
  385|  2.20M|    fn shrink_data(&mut self) {
  386|  2.20M|        if self.position.line_start_buffer_offset > 0 {
  387|  16.3k|            self.data
  388|  16.3k|                .copy_within(self.position.line_start_buffer_offset.., 0);
  389|  16.3k|            self.data
  390|  16.3k|                .truncate(self.data.len() - self.position.line_start_buffer_offset);
  391|  16.3k|            self.position.buffer_offset -= self.position.line_start_buffer_offset;
  392|  16.3k|            self.position.line_start_buffer_offset = 0;
  393|  16.3k|            self.previous_position = self.position;
  394|  2.19M|        }
  395|  2.20M|    }
_RNvXs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCsl2lhD68vXAd_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejENtNtCsdBW21Yiwikk_5alloc6string6StringEE4fromB8_:
   41|   187k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|   187k|        (*location.start()..*location.end() + 1, message).into()
   43|   187k|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3endB9_:
  109|  52.2k|    pub fn end(&mut self) {
  110|  52.2k|        self.is_ending = true;
  111|  52.2k|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17last_token_sourceB9_:
  286|   152k|    pub fn last_token_source(&self) -> Cow<'_, str> {
  287|   152k|        String::from_utf8_lossy(
  288|   152k|            &self.data[self.previous_position.buffer_offset..self.position.buffer_offset],
  289|   152k|        )
  290|   152k|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17column_from_bytesB9_:
  417|  11.9M|    fn column_from_bytes(bytes: &[u8]) -> u64 {
  418|  11.9M|        match str::from_utf8(bytes) {
  419|  5.64M|            Ok(s) => u64::try_from(s.chars().count()).unwrap(),
  420|  6.31M|            Err(e) => {
  421|  6.31M|                if e.valid_up_to() == 0 {
  422|  1.50M|                    0
  423|       |                } else {
  424|  4.81M|                    Self::column_from_bytes(&bytes[..e.valid_up_to()])
  425|       |                }
  426|       |            }
  427|       |        }
  428|  11.9M|    }
_RNvXNtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCsl2lhD68vXAd_4core7convert4FromTINtNtNtB1a_3ops5range5RangejEReEE4fromB6_:
   31|  1.33M|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|  1.33M|        Self {
   33|  1.33M|            location,
   34|  1.33M|            message: message.into(),
   35|  1.33M|        }
   36|  1.33M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE6is_endB9_:
  292|  2.33M|    pub fn is_end(&self) -> bool {
  293|  2.33M|        self.is_ending && self.data.len() == self.position.buffer_offset
  294|  2.33M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3newB9_:
   73|  78.3k|    pub fn new(
   74|  78.3k|        parser: R,
   75|  78.3k|        min_buffer_size: usize,
   76|  78.3k|        max_buffer_size: usize,
   77|  78.3k|        is_line_jump_whitespace: bool,
   78|  78.3k|        line_comment_start: Option<&'static [u8]>,
   79|  78.3k|    ) -> Self {
   80|  78.3k|        Self {
   81|  78.3k|            parser,
   82|  78.3k|            data: Vec::new(),
   83|  78.3k|            position: Position {
   84|  78.3k|                line_start_buffer_offset: 0,
   85|  78.3k|                buffer_offset: 0,
   86|  78.3k|                global_offset: 0,
   87|  78.3k|                global_line: 0,
   88|  78.3k|            },
   89|  78.3k|            previous_position: Position {
   90|  78.3k|                line_start_buffer_offset: 0,
   91|  78.3k|                buffer_offset: 0,
   92|  78.3k|                global_offset: 0,
   93|  78.3k|                global_line: 0,
   94|  78.3k|            },
   95|  78.3k|            is_ending: false,
   96|  78.3k|            min_buffer_size,
   97|  78.3k|            max_buffer_size,
   98|  78.3k|            is_line_jump_whitespace,
   99|  78.3k|            line_comment_start,
  100|  78.3k|        }
  101|  78.3k|    }
_RNvXs0_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerNtB5_20TokenRecognizerErrorINtNtCsl2lhD68vXAd_4core7convert4FromTjNtNtCsdBW21Yiwikk_5alloc6string6StringEE4fromB9_:
   47|   129k|    fn from((location, message): (usize, S)) -> Self {
   48|   129k|        (location..=location, message).into()
   49|   129k|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17extend_from_sliceB9_:
  103|  2.15M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  104|  2.15M|        self.shrink_data();
  105|  2.15M|        self.data.extend_from_slice(other);
  106|  2.15M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE19last_token_locationB9_:
  269|   152k|    pub fn last_token_location(&self) -> Range<TextPosition> {
  270|   152k|        TextPosition {
  271|   152k|            line: self.previous_position.global_line,
  272|   152k|            column: Self::column_from_bytes(
  273|   152k|                &self.data[self.previous_position.line_start_buffer_offset
  274|   152k|                    ..self.previous_position.buffer_offset],
  275|   152k|            ),
  276|   152k|            offset: self.previous_position.global_offset,
  277|   152k|        }..TextPosition {
  278|   152k|            line: self.position.global_line,
  279|   152k|            column: Self::column_from_bytes(
  280|   152k|                &self.data[self.position.line_start_buffer_offset..self.position.buffer_offset],
  281|   152k|            ),
  282|   152k|            offset: self.position.global_offset,
  283|   152k|        }
  284|   152k|    }

_RINvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB5_6ParserNtNtB9_12line_formats16NQuadsRecognizerE10parse_readRShECs9GGLCkRBSt4_6nquads:
  123|  26.1k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadIterator<R, RR> {
  124|  26.1k|        FromReadIterator { read, parser: self }
  125|  26.1k|    }
_RNvXs0_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB5_16FromReadIteratorRShNtNtB9_12line_formats16NQuadsRecognizerENtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4nextCs9GGLCkRBSt4_6nquads:
  145|  26.1k|    fn next(&mut self) -> Option<Self::Item> {
  146|  78.3k|        while !self.parser.is_end() {
  147|  52.2k|            if let Some(result) = self.parser.read_next() {
  148|     18|                return Some(result.map_err(ParseError::Syntax));
  149|  52.2k|            }
  150|  52.2k|            if let Err(e) = self.parser.lexer.extend_from_read(&mut self.read) {
  151|      0|                return Some(Err(e.into()));
  152|  52.2k|            }
  153|       |        }
  154|  26.1k|        None
  155|  26.1k|    }
_RNvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_12line_formats16NQuadsRecognizerE9read_nextB8_:
   80|  5.84M|    pub fn read_next(&mut self) -> Option<Result<RR::Output, SyntaxError>> {
   81|       |        loop {
   82|  7.74M|            if let Some(error) = self.errors.pop() {
   83|   152k|                return Some(Err(SyntaxError {
   84|   152k|                    location: self.lexer.last_token_location(),
   85|   152k|                    message: error
   86|   152k|                        .message
   87|   152k|                        .replace("TOKEN", &self.lexer.last_token_source()),
   88|   152k|                }));
   89|  7.59M|            }
   90|  7.59M|            if let Some(result) = self.results.pop() {
   91|     54|                return Some(Ok(result));
   92|  7.59M|            }
   93|  7.59M|            if let Some(result) = self.lexer.read_next(RR::lexer_options(&self.context)) {
   94|  5.25M|                match result {
   95|  1.82M|                    Ok(token) => {
   96|  1.82M|                        self.state = self.state.take().map(|state| {
   97|       |                            state.recognize_next(
   98|       |                                token,
   99|       |                                &mut self.context,
  100|       |                                &mut self.results,
  101|       |                                &mut self.errors,
  102|       |                            )
  103|  1.82M|                        });
  104|  1.82M|                        continue;
  105|       |                    }
  106|  3.43M|                    Err(e) => {
  107|  3.43M|                        self.state = self.state.take().map(RR::error_recovery_state);
  108|  3.43M|                        return Some(Err(e));
  109|       |                    }
  110|       |                }
  111|  2.33M|            }
  112|  2.33M|            if self.lexer.is_end() {
  113|   156k|                let Some(state) = self.state.take() else {
  114|  78.3k|                    return None;
  115|       |                };
  116|  78.3k|                state.recognize_end(&mut self.context, &mut self.results, &mut self.errors)
  117|       |            } else {
  118|  2.18M|                return None;
  119|       |            }
  120|       |        }
  121|  5.84M|    }
_RNCNvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB6_6ParserNtNtBa_12line_formats16NQuadsRecognizerE9read_next0Ba_:
   96|  1.82M|                        self.state = self.state.take().map(|state| {
   97|  1.82M|                            state.recognize_next(
   98|  1.82M|                                token,
   99|  1.82M|                                &mut self.context,
  100|  1.82M|                                &mut self.results,
  101|  1.82M|                                &mut self.errors,
  102|  1.82M|                            )
  103|  1.82M|                        });
_RNvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_12line_formats16NQuadsRecognizerE17extend_from_sliceB8_:
   66|  2.15M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
   67|  2.15M|        self.lexer.extend_from_slice(other)
   68|  2.15M|    }
_RNvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_12line_formats16NQuadsRecognizerE6is_endB8_:
   76|   130k|    pub fn is_end(&self) -> bool {
   77|   130k|        self.state.is_none() && self.results.is_empty() && self.errors.is_empty()
   78|   130k|    }
_RNvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_12line_formats16NQuadsRecognizerE3newB8_:
   56|  78.3k|    pub fn new(lexer: Lexer<RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   57|  78.3k|        Self {
   58|  78.3k|            lexer,
   59|  78.3k|            state: Some(recognizer),
   60|  78.3k|            context,
   61|  78.3k|            results: vec![],
   62|  78.3k|            errors: vec![],
   63|  78.3k|        }
   64|  78.3k|    }
_RNvXNtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCsl2lhD68vXAd_4core7convert4FromReE4fromB6_:
   39|   152k|    fn from(message: S) -> Self {
   40|   152k|        Self {
   41|   152k|            message: message.into(),
   42|   152k|        }
   43|   152k|    }
_RNvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_12line_formats16NQuadsRecognizerE3endB8_:
   71|  52.2k|    pub fn end(&mut self) {
   72|  52.2k|        self.lexer.end()
   73|  52.2k|    }


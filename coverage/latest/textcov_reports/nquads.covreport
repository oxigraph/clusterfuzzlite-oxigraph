rust_fuzzer_test_input:
  209|  79.6k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  79.6k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  79.6k|                }
  223|  79.6k|
  224|  79.6k|                __libfuzzer_sys_run(bytes);
  225|  79.6k|                0
  226|       |            }
_RNvNvCsg5j8di3JvXp_6nquads1__19___libfuzzer_sys_run:
  241|  79.6k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|       |            }
LLVMFuzzerTestOneInput:
   58|  79.6k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  79.6k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  79.6k|    });
   63|  79.6k|
   64|  79.6k|    match test_input {
   65|  79.6k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  79.6k|}
_RNCNvCslK7OP0j43wo_13libfuzzer_sys15test_input_wrap0B3_:
   59|  79.6k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  79.6k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  79.6k|        rust_fuzzer_test_input(data_slice)
   62|  79.6k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvMs3_NtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCsaXZRpaJvnVB_4core4iter6traits8iterator8Iterator4next0ECs6v03uY4lCtp_5oxttl:
 1044|  47.6M|    pub(crate) unsafe fn next(
 1045|  47.6M|        &mut self,
 1046|  47.6M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  47.6M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  47.6M|        let found = find_raw(self.start, self.end)?;
 1057|   259k|        let result = found.distance(self.original_start);
 1058|   259k|        self.start = found.add(1);
 1059|   259k|        Some(result)
 1060|  47.6M|    }
_RINvNtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECs6v03uY4lCtp_5oxttl:
 1125|   199k|pub(crate) unsafe fn search_slice_with_raw(
 1126|   199k|    haystack: &[u8],
 1127|   199k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|   199k|) -> Option<usize> {
 1129|   199k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|   199k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|   199k|    // a &[u8].
 1132|   199k|    let start = haystack.as_ptr();
 1133|   199k|    let end = start.add(haystack.len());
 1134|   199k|    let found = find_raw(start, end)?;
 1135|  18.5k|    Some(found.distance(start))
 1136|   199k|}
_RINvNtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr7memchr20ECs6v03uY4lCtp_5oxttl:
 1125|  7.72M|pub(crate) unsafe fn search_slice_with_raw(
 1126|  7.72M|    haystack: &[u8],
 1127|  7.72M|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  7.72M|) -> Option<usize> {
 1129|  7.72M|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  7.72M|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  7.72M|    // a &[u8].
 1132|  7.72M|    let start = haystack.as_ptr();
 1133|  7.72M|    let end = start.add(haystack.len());
 1134|  7.72M|    let found = find_raw(start, end)?;
 1135|  2.95M|    Some(found.distance(start))
 1136|  7.72M|}
_RNvMs3_NtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  47.3M|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  47.3M|        Iter {
 1029|  47.3M|            original_start: haystack.as_ptr(),
 1030|  47.3M|            start: haystack.as_ptr(),
 1031|  47.3M|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  47.3M|            haystack: core::marker::PhantomData,
 1033|  47.3M|        }
 1034|  47.3M|    }
_RNvMNtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iE7needle1B8_:
  117|   246k|    pub(crate) fn needle1(&self) -> u8 {
  118|   246k|        self.s1
  119|   246k|    }
_RNvMNtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iE3newB8_:
  111|   199k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|   199k|        One { s1: needle, v1: V::splat(needle) }
  113|   199k|    }
_RNvMNtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m256iE3newB8_:
  111|   199k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|   199k|        One { s1: needle, v1: V::splat(needle) }
  113|   199k|    }
_RNvMNtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  31.4k|    pub(crate) unsafe fn find_raw(
  144|  31.4k|        &self,
  145|  31.4k|        start: *const u8,
  146|  31.4k|        end: *const u8,
  147|  31.4k|    ) -> Option<*const u8> {
  148|  31.4k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  31.4k|        // need to move up to using a u64 for the masks used below. Currently
  150|  31.4k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  31.4k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  31.4k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  31.4k|        let topos = V::Mask::first_offset;
  155|  31.4k|        let len = end.distance(start);
  156|  31.4k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  31.4k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  2.85k|            return Some(cur);
  167|  28.5k|        }
  168|  28.5k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  28.5k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  28.5k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  28.5k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  28.5k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  44.4k|        while cur <= end.sub(V::BYTES) {
  213|  16.5k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  16.5k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    699|                return Some(cur);
  216|  15.8k|            }
  217|  15.8k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  27.8k|        if cur < end {
  224|  23.0k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  23.0k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  23.0k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  23.0k|            return self.search_chunk(cur, topos);
  228|  4.87k|        }
  229|  4.87k|        None
  230|  31.4k|    }
_RNvMNtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m256iE8find_rawB8_:
  143|   113k|    pub(crate) unsafe fn find_raw(
  144|   113k|        &self,
  145|   113k|        start: *const u8,
  146|   113k|        end: *const u8,
  147|   113k|    ) -> Option<*const u8> {
  148|   113k|        // If we want to support vectors bigger than 256 bits, we probably
  149|   113k|        // need to move up to using a u64 for the masks used below. Currently
  150|   113k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|   113k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|   113k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|   113k|        let topos = V::Mask::first_offset;
  155|   113k|        let len = end.distance(start);
  156|   113k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|   113k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  7.38k|            return Some(cur);
  167|   106k|        }
  168|   106k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|   106k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|   106k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|   106k|        if len >= Self::LOOP_SIZE {
  172|  76.6k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|  41.3k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|  41.3k|                let a = V::load_aligned(cur);
  176|  41.3k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|  41.3k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|  41.3k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|  41.3k|                let eqa = self.v1.cmpeq(a);
  180|  41.3k|                let eqb = self.v1.cmpeq(b);
  181|  41.3k|                let eqc = self.v1.cmpeq(c);
  182|  41.3k|                let eqd = self.v1.cmpeq(d);
  183|  41.3k|                let or1 = eqa.or(eqb);
  184|  41.3k|                let or2 = eqc.or(eqd);
  185|  41.3k|                let or3 = or1.or(or2);
  186|  41.3k|                if or3.movemask_will_have_non_zero() {
  187|  2.37k|                    let mask = eqa.movemask();
  188|  2.37k|                    if mask.has_non_zero() {
  189|    661|                        return Some(cur.add(topos(mask)));
  190|  1.71k|                    }
  191|  1.71k|
  192|  1.71k|                    let mask = eqb.movemask();
  193|  1.71k|                    if mask.has_non_zero() {
  194|  1.03k|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|    675|                    }
  196|    675|
  197|    675|                    let mask = eqc.movemask();
  198|    675|                    if mask.has_non_zero() {
  199|    355|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|    320|                    }
  201|    320|
  202|    320|                    let mask = eqd.movemask();
  203|    320|                    debug_assert!(mask.has_non_zero());
  204|    320|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  38.9k|                }
  206|  38.9k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  68.8k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|   227k|        while cur <= end.sub(V::BYTES) {
  213|   123k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|   123k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    859|                return Some(cur);
  216|   123k|            }
  217|   123k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|   103k|        if cur < end {
  224|  99.2k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  99.2k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  99.2k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  99.2k|            return self.search_chunk(cur, topos);
  228|  4.07k|        }
  229|  4.07k|        None
  230|   113k|    }
_RINvMNtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  71.0k|    unsafe fn search_chunk(
  417|  71.0k|        &self,
  418|  71.0k|        cur: *const u8,
  419|  71.0k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  71.0k|    ) -> Option<*const u8> {
  421|  71.0k|        let chunk = V::load_unaligned(cur);
  422|  71.0k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  71.0k|        if mask.has_non_zero() {
  424|  3.78k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  67.2k|            None
  427|       |        }
  428|  71.0k|    }
_RINvMNtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|   337k|    unsafe fn search_chunk(
  417|   337k|        &self,
  418|   337k|        cur: *const u8,
  419|   337k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|   337k|    ) -> Option<*const u8> {
  421|   337k|        let chunk = V::load_unaligned(cur);
  422|   337k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|   337k|        if mask.has_non_zero() {
  424|  9.30k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|   327k|            None
  427|       |        }
  428|   337k|    }
_RNvMs_NtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iE3newBa_:
  450|  55.3M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  55.3M|        Two {
  452|  55.3M|            s1: needle1,
  453|  55.3M|            s2: needle2,
  454|  55.3M|            v1: V::splat(needle1),
  455|  55.3M|            v2: V::splat(needle2),
  456|  55.3M|        }
  457|  55.3M|    }
_RNvMs_NtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m256iE3newBa_:
  450|  55.3M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  55.3M|        Two {
  452|  55.3M|            s1: needle1,
  453|  55.3M|            s2: needle2,
  454|  55.3M|            v1: V::splat(needle1),
  455|  55.3M|            v2: V::splat(needle2),
  456|  55.3M|        }
  457|  55.3M|    }
_RNvMs_NtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  78.2M|    pub(crate) fn needle1(&self) -> u8 {
  462|  78.2M|        self.s1
  463|  78.2M|    }
_RNvMs_NtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  77.8M|    pub(crate) fn needle2(&self) -> u8 {
  468|  77.8M|        self.s2
  469|  77.8M|    }
_RNvMs_NtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iE8find_rawBa_:
  493|  1.28M|    pub(crate) unsafe fn find_raw(
  494|  1.28M|        &self,
  495|  1.28M|        start: *const u8,
  496|  1.28M|        end: *const u8,
  497|  1.28M|    ) -> Option<*const u8> {
  498|  1.28M|        // If we want to support vectors bigger than 256 bits, we probably
  499|  1.28M|        // need to move up to using a u64 for the masks used below. Currently
  500|  1.28M|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|  1.28M|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|  1.28M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  1.28M|        let topos = V::Mask::first_offset;
  505|  1.28M|        let len = end.distance(start);
  506|  1.28M|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  1.28M|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   261k|            return Some(cur);
  517|  1.02M|        }
  518|  1.02M|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  1.02M|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|  1.02M|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  1.02M|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|  1.02M|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  1.31M|        while cur <= end.sub(V::BYTES) {
  551|   312k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   312k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  17.3k|                return Some(cur);
  554|   294k|            }
  555|   294k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|  1.00M|        if cur < end {
  562|   949k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   949k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|   949k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   949k|            return self.search_chunk(cur, topos);
  566|  55.4k|        }
  567|  55.4k|        None
  568|  1.28M|    }
_RNvMs_NtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m256iE8find_rawBa_:
  493|  3.24M|    pub(crate) unsafe fn find_raw(
  494|  3.24M|        &self,
  495|  3.24M|        start: *const u8,
  496|  3.24M|        end: *const u8,
  497|  3.24M|    ) -> Option<*const u8> {
  498|  3.24M|        // If we want to support vectors bigger than 256 bits, we probably
  499|  3.24M|        // need to move up to using a u64 for the masks used below. Currently
  500|  3.24M|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|  3.24M|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|  3.24M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  3.24M|        let topos = V::Mask::first_offset;
  505|  3.24M|        let len = end.distance(start);
  506|  3.24M|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  3.24M|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  1.64M|            return Some(cur);
  517|  1.59M|        }
  518|  1.59M|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  1.59M|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|  1.59M|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  1.59M|        if len >= Self::LOOP_SIZE {
  522|  2.38M|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|  1.68M|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|  1.68M|                let a = V::load_aligned(cur);
  526|  1.68M|                let b = V::load_aligned(cur.add(V::BYTES));
  527|  1.68M|                let eqa1 = self.v1.cmpeq(a);
  528|  1.68M|                let eqb1 = self.v1.cmpeq(b);
  529|  1.68M|                let eqa2 = self.v2.cmpeq(a);
  530|  1.68M|                let eqb2 = self.v2.cmpeq(b);
  531|  1.68M|                let or1 = eqa1.or(eqb1);
  532|  1.68M|                let or2 = eqa2.or(eqb2);
  533|  1.68M|                let or3 = or1.or(or2);
  534|  1.68M|                if or3.movemask_will_have_non_zero() {
  535|   279k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|   279k|                    if mask.has_non_zero() {
  537|   112k|                        return Some(cur.add(topos(mask)));
  538|   166k|                    }
  539|   166k|
  540|   166k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|   166k|                    debug_assert!(mask.has_non_zero());
  542|   166k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|  1.40M|                }
  544|  1.40M|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   621k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  1.89M|        while cur <= end.sub(V::BYTES) {
  551|   622k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   622k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  44.4k|                return Some(cur);
  554|   577k|            }
  555|   577k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|  1.27M|        if cur < end {
  562|  1.24M|            debug_assert!(end.distance(cur) < V::BYTES);
  563|  1.24M|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|  1.24M|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|  1.24M|            return self.search_chunk(cur, topos);
  566|  33.2k|        }
  567|  33.2k|        None
  568|  3.24M|    }
_RINvMs_NtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  2.54M|    unsafe fn search_chunk(
  671|  2.54M|        &self,
  672|  2.54M|        cur: *const u8,
  673|  2.54M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  2.54M|    ) -> Option<*const u8> {
  675|  2.54M|        let chunk = V::load_unaligned(cur);
  676|  2.54M|        let eq1 = self.v1.cmpeq(chunk);
  677|  2.54M|        let eq2 = self.v2.cmpeq(chunk);
  678|  2.54M|        let mask = eq1.or(eq2).movemask();
  679|  2.54M|        if mask.has_non_zero() {
  680|   338k|            let mask1 = eq1.movemask();
  681|   338k|            let mask2 = eq2.movemask();
  682|   338k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  2.20M|            None
  685|       |        }
  686|  2.54M|    }
_RINvMs_NtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  5.11M|    unsafe fn search_chunk(
  671|  5.11M|        &self,
  672|  5.11M|        cur: *const u8,
  673|  5.11M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  5.11M|    ) -> Option<*const u8> {
  675|  5.11M|        let chunk = V::load_unaligned(cur);
  676|  5.11M|        let eq1 = self.v1.cmpeq(chunk);
  677|  5.11M|        let eq2 = self.v2.cmpeq(chunk);
  678|  5.11M|        let mask = eq1.or(eq2).movemask();
  679|  5.11M|        if mask.has_non_zero() {
  680|  1.91M|            let mask1 = eq1.movemask();
  681|  1.91M|            let mask2 = eq2.movemask();
  682|  1.91M|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  3.20M|            None
  685|       |        }
  686|  5.11M|    }
_RINvNtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  45.9k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  45.9k|    start: *const u8,
 1150|  45.9k|    end: *const u8,
 1151|  45.9k|    confirm: F,
 1152|  45.9k|) -> Option<*const u8> {
 1153|  45.9k|    debug_assert!(start <= end);
 1154|  45.9k|    let mut ptr = start;
 1155|   288k|    while ptr < end {
 1156|   246k|        if confirm(*ptr) {
 1157|  3.12k|            return Some(ptr);
 1158|   243k|        }
 1159|   243k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  42.8k|    None
 1162|  45.9k|}
_RINvNtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|  39.0M|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  39.0M|    start: *const u8,
 1150|  39.0M|    end: *const u8,
 1151|  39.0M|    confirm: F,
 1152|  39.0M|) -> Option<*const u8> {
 1153|  39.0M|    debug_assert!(start <= end);
 1154|  39.0M|    let mut ptr = start;
 1155|   116M|    while ptr < end {
 1156|  78.2M|        if confirm(*ptr) {
 1157|   686k|            return Some(ptr);
 1158|  77.5M|        }
 1159|  77.5M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  38.3M|    None
 1162|  39.0M|}

_RNvMNtNtNtNtCshOovA0K1uQa_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|   199k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|   199k|        One {
   71|   199k|            sse2: generic::One::new(needle),
   72|   199k|            avx2: generic::One::new(needle),
   73|   199k|        }
   74|   199k|    }
_RNvMNtNtNtNtCshOovA0K1uQa_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCshOovA0K1uQa_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|   199k|    pub unsafe fn find_raw(
  180|   199k|        &self,
  181|   199k|        start: *const u8,
  182|   199k|        end: *const u8,
  183|   199k|    ) -> Option<*const u8> {
  184|   199k|        if start >= end {
  185|  8.23k|            return None;
  186|   191k|        }
  187|   191k|        let len = end.distance(start);
  188|   191k|        if len < __m256i::BYTES {
  189|  77.3k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  45.9k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  45.9k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  31.4k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|   113k|        }
  201|   113k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|   113k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|   113k|        // enough to run on the vector routine. Pointer validity is caller's
  204|   113k|        // responsibility.
  205|   113k|        //
  206|   113k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|   113k|        // means we'd have to annotate this routine with `target_feature`.
  208|   113k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|   113k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|   113k|        // The real problem is that a routine with a `target_feature`
  211|   113k|        // annotation generally can't be inlined into caller code unless
  212|   113k|        // the caller code has the same target feature annotations. Namely,
  213|   113k|        // the common case (at time of writing) is for calling code to not
  214|   113k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|   113k|        // `target_feature` on this routine, it can be inlined which will
  216|   113k|        // handle some of the short-haystack cases above without touching the
  217|   113k|        // architecture specific code.
  218|   113k|        self.find_raw_avx2(start, end)
  219|   199k|    }
_RNCNvMNtNtNtNtCshOovA0K1uQa_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|   246k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|   246k|                    b == self.sse2.needle1()
  194|   246k|                })
_RNvMNtNtNtNtCshOovA0K1uQa_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  31.4k|    unsafe fn find_raw_sse2(
  337|  31.4k|        &self,
  338|  31.4k|        start: *const u8,
  339|  31.4k|        end: *const u8,
  340|  31.4k|    ) -> Option<*const u8> {
  341|  31.4k|        self.sse2.find_raw(start, end)
  342|  31.4k|    }
_RNvMNtNtNtNtCshOovA0K1uQa_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|   113k|    unsafe fn find_raw_avx2(
  397|   113k|        &self,
  398|   113k|        start: *const u8,
  399|   113k|        end: *const u8,
  400|   113k|    ) -> Option<*const u8> {
  401|   113k|        self.avx2.find_raw(start, end)
  402|   113k|    }
_RNvMs2_NtNtNtNtCshOovA0K1uQa_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  55.3M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  55.3M|        Two {
  558|  55.3M|            sse2: generic::Two::new(needle1, needle2),
  559|  55.3M|            avx2: generic::Two::new(needle1, needle2),
  560|  55.3M|        }
  561|  55.3M|    }
_RNvMs2_NtNtNtNtCshOovA0K1uQa_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNvMs2_NtNtNtNtCshOovA0K1uQa_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  55.3M|    pub unsafe fn find_raw(
  655|  55.3M|        &self,
  656|  55.3M|        start: *const u8,
  657|  55.3M|        end: *const u8,
  658|  55.3M|    ) -> Option<*const u8> {
  659|  55.3M|        if start >= end {
  660|  11.7M|            return None;
  661|  43.5M|        }
  662|  43.5M|        let len = end.distance(start);
  663|  43.5M|        if len < __m256i::BYTES {
  664|  40.3M|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  39.0M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  39.0M|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|  1.28M|                self.find_raw_sse2(start, end)
  674|       |            };
  675|  3.24M|        }
  676|  3.24M|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|  3.24M|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|  3.24M|        // enough to run on the vector routine. Pointer validity is caller's
  679|  3.24M|        // responsibility.
  680|  3.24M|        //
  681|  3.24M|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|  3.24M|        // means we'd have to annotate this routine with `target_feature`.
  683|  3.24M|        // Which is fine, because this routine is `unsafe` anyway and the
  684|  3.24M|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|  3.24M|        // The real problem is that a routine with a `target_feature`
  686|  3.24M|        // annotation generally can't be inlined into caller code unless
  687|  3.24M|        // the caller code has the same target feature annotations. Namely,
  688|  3.24M|        // the common case (at time of writing) is for calling code to not
  689|  3.24M|        // have the `avx2` target feature enabled *at compile time*. Without
  690|  3.24M|        // `target_feature` on this routine, it can be inlined which will
  691|  3.24M|        // handle some of the short-haystack cases above without touching the
  692|  3.24M|        // architecture specific code.
  693|  3.24M|        self.find_raw_avx2(start, end)
  694|  55.3M|    }
_RNCNvMs2_NtNtNtNtCshOovA0K1uQa_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  78.2M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  78.2M|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  78.2M|                })
_RNvMs2_NtNtNtNtCshOovA0K1uQa_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|  1.28M|    unsafe fn find_raw_sse2(
  765|  1.28M|        &self,
  766|  1.28M|        start: *const u8,
  767|  1.28M|        end: *const u8,
  768|  1.28M|    ) -> Option<*const u8> {
  769|  1.28M|        self.sse2.find_raw(start, end)
  770|  1.28M|    }
_RNvMs2_NtNtNtNtCshOovA0K1uQa_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|  3.24M|    unsafe fn find_raw_avx2(
  805|  3.24M|        &self,
  806|  3.24M|        start: *const u8,
  807|  3.24M|        end: *const u8,
  808|  3.24M|    ) -> Option<*const u8> {
  809|  3.24M|        self.avx2.find_raw(start, end)
  810|  3.24M|    }

_RNvNtNtNtCshOovA0K1uQa_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  55.3M|pub(crate) fn memchr2_raw(
  221|  55.3M|    n1: u8,
  222|  55.3M|    n2: u8,
  223|  55.3M|    start: *const u8,
  224|  55.3M|    end: *const u8,
  225|  55.3M|) -> Option<*const u8> {
  226|  55.3M|    // SAFETY: We provide a valid function pointer type.
  227|  55.3M|    unsafe_ifunc!(
  228|  55.3M|        Two,
  229|  55.3M|        find_raw,
  230|  55.3M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  55.3M|        Option<*const u8>,
  232|  55.3M|        start,
  233|  55.3M|        end,
  234|  55.3M|        n1,
  235|  55.3M|        n2
  236|  55.3M|    )
  237|  55.3M|}
_RNvNvNtNtNtCshOovA0K1uQa_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|   199k|        unsafe fn find_avx2(
   79|   199k|            $($needle: u8),+,
   80|   199k|            $hay_start: *const u8,
   81|   199k|            $hay_end: *const u8,
   82|   199k|        ) -> $retty {
   83|   199k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|   199k|            $memchrty::new_unchecked($($needle),+)
   85|   199k|                .$memchrfind($hay_start, $hay_end)
   86|   199k|        }
_RNvNvNtNtNtCshOovA0K1uQa_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCshOovA0K1uQa_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  55.3M|        unsafe fn find_avx2(
   79|  55.3M|            $($needle: u8),+,
   80|  55.3M|            $hay_start: *const u8,
   81|  55.3M|            $hay_end: *const u8,
   82|  55.3M|        ) -> $retty {
   83|  55.3M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  55.3M|            $memchrty::new_unchecked($($needle),+)
   85|  55.3M|                .$memchrfind($hay_start, $hay_end)
   86|  55.3M|        }
_RNvNvNtNtNtCshOovA0K1uQa_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNtNtNtCshOovA0K1uQa_6memchr4arch6x86_646memchr10memchr_raw:
  174|   199k|pub(crate) fn memchr_raw(
  175|   199k|    n1: u8,
  176|   199k|    start: *const u8,
  177|   199k|    end: *const u8,
  178|   199k|) -> Option<*const u8> {
  179|   199k|    // SAFETY: We provide a valid function pointer type.
  180|   199k|    unsafe_ifunc!(
  181|   199k|        One,
  182|   199k|        find_raw,
  183|   199k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|   199k|        Option<*const u8>,
  185|   199k|        start,
  186|   199k|        end,
  187|   199k|        n1
  188|   199k|    )
  189|   199k|}

_RNvXNtCshOovA0K1uQa_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  53.9M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  53.9M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  53.9M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  53.9M|    }
_RNvXNtCshOovA0K1uQa_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|  2.75M|    fn as_usize(self) -> usize {
   27|  2.75M|        self as usize
   28|  2.75M|    }

_RNCNvNtCshOovA0K1uQa_6memchr6memchr7memchr20Cs6v03uY4lCtp_5oxttl:
   96|  7.72M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|  7.72M|            memchr2_raw(needle1, needle2, start, end)
   98|  7.72M|        })
_RNCNvXs3_NtCshOovA0K1uQa_6memchr6memchrNtB7_7Memchr2NtNtNtNtCsaXZRpaJvnVB_4core4iter6traits8iterator8Iterator4next0Cs6v03uY4lCtp_5oxttl:
  395|  47.6M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNvMs2_NtCshOovA0K1uQa_6memchr6memchrNtB5_7Memchr23newCs6v03uY4lCtp_5oxttl:
  377|  47.3M|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  47.3M|        Memchr2 {
  379|  47.3M|            needle1,
  380|  47.3M|            needle2,
  381|  47.3M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  47.3M|        }
  383|  47.3M|    }
_RNvNtCshOovA0K1uQa_6memchr6memchr11memchr2_rawCs6v03uY4lCtp_5oxttl:
  574|  55.3M|unsafe fn memchr2_raw(
  575|  55.3M|    needle1: u8,
  576|  55.3M|    needle2: u8,
  577|  55.3M|    start: *const u8,
  578|  55.3M|    end: *const u8,
  579|  55.3M|) -> Option<*const u8> {
  580|  55.3M|    #[cfg(target_arch = "x86_64")]
  581|  55.3M|    {
  582|  55.3M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  55.3M|    }
  584|  55.3M|    #[cfg(target_arch = "wasm32")]
  585|  55.3M|    {
  586|  55.3M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  55.3M|    }
  588|  55.3M|    #[cfg(target_arch = "aarch64")]
  589|  55.3M|    {
  590|  55.3M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  55.3M|    }
  592|  55.3M|    #[cfg(not(any(
  593|  55.3M|        target_arch = "x86_64",
  594|  55.3M|        target_arch = "wasm32",
  595|  55.3M|        target_arch = "aarch64"
  596|  55.3M|    )))]
  597|  55.3M|    {
  598|  55.3M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  55.3M|            .find_raw(start, end)
  600|  55.3M|    }
  601|  55.3M|}
_RNvNtCshOovA0K1uQa_6memchr6memchr12memchr2_iterCs6v03uY4lCtp_5oxttl:
  232|  47.3M|pub fn memchr2_iter<'h>(
  233|  47.3M|    needle1: u8,
  234|  47.3M|    needle2: u8,
  235|  47.3M|    haystack: &'h [u8],
  236|  47.3M|) -> Memchr2<'h> {
  237|  47.3M|    Memchr2::new(needle1, needle2, haystack)
  238|  47.3M|}
_RNvNtCshOovA0K1uQa_6memchr6memchr6memchrCs6v03uY4lCtp_5oxttl:
   27|   199k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|   199k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|   199k|    // pointer between start and end.
   30|   199k|    unsafe {
   31|   199k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|   199k|        })
   34|   199k|    }
   35|   199k|}
_RNvNtCshOovA0K1uQa_6memchr6memchr7memchr2Cs6v03uY4lCtp_5oxttl:
   92|  7.72M|pub fn memchr2(needle1: u8, needle2: u8, haystack: &[u8]) -> Option<usize> {
   93|  7.72M|    // SAFETY: memchr2_raw, when a match is found, always returns a valid
   94|  7.72M|    // pointer between start and end.
   95|  7.72M|    unsafe {
   96|  7.72M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|       |            memchr2_raw(needle1, needle2, start, end)
   98|  7.72M|        })
   99|  7.72M|    }
  100|  7.72M|}
_RNvXs3_NtCshOovA0K1uQa_6memchr6memchrNtB5_7Memchr2NtNtNtNtCsaXZRpaJvnVB_4core4iter6traits8iterator8Iterator4nextCs6v03uY4lCtp_5oxttl:
  390|  47.6M|    fn next(&mut self) -> Option<usize> {
  391|  47.6M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  47.6M|        // pointers returns will fall within the start and end bounds, and this
  393|  47.6M|        // upholds the safety contract of `self.it.next`.
  394|  47.6M|        unsafe {
  395|  47.6M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  47.6M|        }
  397|  47.6M|    }
_RNCNvNtCshOovA0K1uQa_6memchr6memchr6memchr0B5_:
   31|   199k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|   199k|            memchr_raw(needle, start, end)
   33|   199k|        })
_RNvNtCshOovA0K1uQa_6memchr6memchr10memchr_rawB3_:
  504|   199k|unsafe fn memchr_raw(
  505|   199k|    needle: u8,
  506|   199k|    start: *const u8,
  507|   199k|    end: *const u8,
  508|   199k|) -> Option<*const u8> {
  509|   199k|    #[cfg(target_arch = "x86_64")]
  510|   199k|    {
  511|   199k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|   199k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|   199k|        // time. This function also handles using a fallback if neither AVX2
  514|   199k|        // nor SSE2 (unusual) are available.
  515|   199k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|   199k|    }
  517|   199k|    #[cfg(target_arch = "wasm32")]
  518|   199k|    {
  519|   199k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|   199k|    }
  521|   199k|    #[cfg(target_arch = "aarch64")]
  522|   199k|    {
  523|   199k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|   199k|    }
  525|   199k|    #[cfg(not(any(
  526|   199k|        target_arch = "x86_64",
  527|   199k|        target_arch = "wasm32",
  528|   199k|        target_arch = "aarch64"
  529|   199k|    )))]
  530|   199k|    {
  531|   199k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|   199k|    }
  533|   199k|}

_RNvMNtCshOovA0K1uQa_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  128|  2.54M|    fn get_for_offset(self) -> u32 {
  129|  2.54M|        #[cfg(target_endian = "big")]
  130|  2.54M|        {
  131|  2.54M|            self.0.swap_bytes()
  132|  2.54M|        }
  133|  2.54M|        #[cfg(target_endian = "little")]
  134|  2.54M|        {
  135|  2.54M|            self.0
  136|  2.54M|        }
  137|  2.54M|    }
_RNvXs_NtCshOovA0K1uQa_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  148|  10.0M|    fn has_non_zero(self) -> bool {
  149|  10.0M|        self.0 != 0
  150|  10.0M|    }
_RNvXs_NtCshOovA0K1uQa_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  173|  2.54M|    fn first_offset(self) -> usize {
  174|  2.54M|        // We are dealing with little endian here (and if we aren't, we swap
  175|  2.54M|        // the bytes so we are in practice), where the most significant byte
  176|  2.54M|        // is at a higher address. That means the least significant bit that
  177|  2.54M|        // is set corresponds to the position of our first matching byte.
  178|  2.54M|        // That position corresponds to the number of zeros after the least
  179|  2.54M|        // significant bit.
  180|  2.54M|        self.get_for_offset().trailing_zeros() as usize
  181|  2.54M|    }
_RNvXNtNtCshOovA0K1uQa_6memchr6vector7x86sse2NtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  220|  2.61M|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  221|  2.61M|            _mm_loadu_si128(data as *const __m128i)
  222|  2.61M|        }
_RNvXNtNtCshOovA0K1uQa_6memchr6vector7x86sse2NtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  225|  3.29M|        unsafe fn movemask(self) -> SensibleMoveMask {
  226|  3.29M|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  227|  3.29M|        }
_RNvXNtNtCshOovA0K1uQa_6memchr6vector7x86sse2NtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  230|  5.16M|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  231|  5.16M|            _mm_cmpeq_epi8(self, vector2)
  232|  5.16M|        }
_RNvYNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m256iNtNtCshOovA0K1uQa_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   65|  1.73M|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   66|  1.73M|        self.movemask().has_non_zero()
   67|  1.73M|    }
_RNvXNtNtCshOovA0K1uQa_6memchr6vector7x86avx2NtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  275|  11.9M|        unsafe fn movemask(self) -> SensibleMoveMask {
  276|  11.9M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  277|  11.9M|        }
_RNvXNtNtCshOovA0K1uQa_6memchr6vector7x86avx2NtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  270|  5.45M|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  271|  5.45M|            _mm256_loadu_si256(data as *const __m256i)
  272|  5.45M|        }
_RNvXNtNtCshOovA0K1uQa_6memchr6vector7x86avx2NtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  280|  17.4M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  281|  17.4M|            _mm256_cmpeq_epi8(self, vector2)
  282|  17.4M|        }
_RNvXs_NtCshOovA0K1uQa_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  163|  2.69M|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  164|  2.69M|        SensibleMoveMask(self.0 | other.0)
  165|  2.69M|    }
_RNvXNtNtCshOovA0K1uQa_6memchr6vector7x86sse2NtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  210|   110M|        unsafe fn splat(byte: u8) -> __m128i {
  211|   110M|            _mm_set1_epi8(byte as i8)
  212|   110M|        }
_RNvXNtNtCshOovA0K1uQa_6memchr6vector7x86sse2NtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iNtB4_6Vector2or:
  240|  2.54M|        unsafe fn or(self, vector2: Self) -> __m128i {
  241|  2.54M|            _mm_or_si128(self, vector2)
  242|  2.54M|        }
_RNvXNtNtCshOovA0K1uQa_6memchr6vector7x86avx2NtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  260|   110M|        unsafe fn splat(byte: u8) -> __m256i {
  261|   110M|            _mm256_set1_epi8(byte as i8)
  262|   110M|        }
_RNvXNtNtCshOovA0K1uQa_6memchr6vector7x86avx2NtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  265|  3.54M|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  266|  3.54M|            _mm256_load_si256(data as *const __m256i)
  267|  3.54M|        }
_RNvXNtNtCshOovA0K1uQa_6memchr6vector7x86avx2NtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m256iNtB4_6Vector2or:
  290|  10.3M|        unsafe fn or(self, vector2: Self) -> __m256i {
  291|  10.3M|            _mm256_or_si256(self, vector2)
  292|  10.3M|        }

_RNvMs2_NtCs4x5FkYnI8d7_9once_cell3impINtB5_8OnceCellNtNtCsjp9TdQkU1Un_5alloc6string6StringE14is_initializedCslK7OP0j43wo_13libfuzzer_sys:
   49|  79.6k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  79.6k|        // An `Acquire` load is enough because that makes all the initialization
   51|  79.6k|        // operations visible to us, and, this being a fast path, weaker
   52|  79.6k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  79.6k|        // `SeqCst` operations on the slow path.
   54|  79.6k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  79.6k|    }

_RNvMs4_NtCs4x5FkYnI8d7_9once_cell4syncINtB5_8OnceCellNtNtCsjp9TdQkU1Un_5alloc6string6StringE3getCslK7OP0j43wo_13libfuzzer_sys:
  963|  79.6k|        pub fn get(&self) -> Option<&T> {
  964|  79.6k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  79.6k|                None
  969|       |            }
  970|  79.6k|        }

_RNvMCs1MGLbQ7ar2w_10oxilangtagINtB2_11LanguageTagReE10into_innerCs6v03uY4lCtp_5oxttl:
   54|   172k|    pub fn into_inner(self) -> T {
   55|   172k|        self.tag
   56|   172k|    }
_RNvMCs1MGLbQ7ar2w_10oxilangtagINtB2_11LanguageTagReE5parseCs6v03uY4lCtp_5oxttl:
   41|   294k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   42|   294k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   43|   172k|        Ok(Self { tag, positions })
   44|   294k|    }
_RNvXsE_Cs1MGLbQ7ar2w_10oxilangtagNtB5_16VoidOutputBufferNtNtCsaXZRpaJvnVB_4core7default7Default7defaultCs6v03uY4lCtp_5oxttl:
  547|   294k|#[derive(Default)]
_RINvCs1MGLbQ7ar2w_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECsal5YaZOfl0H_5oxrdf:
  621|   281k|fn parse_langtag(
  622|   281k|    input: &str,
  623|   281k|    output: &mut impl OutputBuffer,
  624|   281k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  625|   281k|    #[derive(PartialEq, Eq)]
  626|   281k|    enum State {
  627|   281k|        Start,
  628|   281k|        AfterLanguage,
  629|   281k|        AfterExtLang,
  630|   281k|        AfterScript,
  631|   281k|        AfterRegion,
  632|   281k|        InExtension { expected: bool },
  633|   281k|        InPrivateUse { expected: bool },
  634|   281k|    }
  635|   281k|
  636|   281k|    let mut state = State::Start;
  637|   281k|    let mut language_end = 0;
  638|   281k|    let mut extlang_end = 0;
  639|   281k|    let mut script_end = 0;
  640|   281k|    let mut region_end = 0;
  641|   281k|    let mut variant_end = 0;
  642|   281k|    let mut extension_end = 0;
  643|   281k|    let mut extlangs_count = 0;
  644|   492k|    for (subtag, end) in SubTagIterator::new(input) {
  645|   492k|        if subtag.is_empty() {
  646|      0|            return Err(LanguageTagParseError {
  647|      0|                kind: TagParseErrorKind::EmptySubtag,
  648|      0|            });
  649|   492k|        }
  650|   492k|        if subtag.len() > 8 {
  651|  10.3k|            return Err(LanguageTagParseError {
  652|  10.3k|                kind: TagParseErrorKind::SubtagTooLong,
  653|  10.3k|            });
  654|   482k|        }
  655|   482k|        if state == State::Start {
  656|       |            // Primary language
  657|   271k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  658|  43.6k|                return Err(LanguageTagParseError {
  659|  43.6k|                    kind: TagParseErrorKind::InvalidLanguage,
  660|  43.6k|                });
  661|   228k|            }
  662|   228k|            language_end = end;
  663|   228k|            output.extend(to_lowercase(subtag));
  664|   228k|            if subtag.len() < 4 {
  665|   126k|                // extlangs are only allowed for short language tags
  666|   126k|                state = State::AfterLanguage;
  667|   126k|            } else {
  668|   101k|                state = State::AfterExtLang;
  669|   101k|            }
  670|   210k|        } else if let State::InPrivateUse { .. } = state {
  671|  28.5k|            if !is_alphanumeric(subtag) {
  672|      0|                return Err(LanguageTagParseError {
  673|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  674|      0|                });
  675|  28.5k|            }
  676|  28.5k|            output.push('-');
  677|  28.5k|            output.extend(to_lowercase(subtag));
  678|  28.5k|            state = State::InPrivateUse { expected: false };
  679|   181k|        } else if subtag == "x" || subtag == "X" {
  680|       |            // We make sure extension is found
  681|  36.5k|            if let State::InExtension { expected: true } = state {
  682|  1.93k|                return Err(LanguageTagParseError {
  683|  1.93k|                    kind: TagParseErrorKind::EmptyExtension,
  684|  1.93k|                });
  685|  34.6k|            }
  686|  34.6k|            output.push('-');
  687|  34.6k|            output.push('x');
  688|  34.6k|            state = State::InPrivateUse { expected: true };
  689|   145k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  690|       |            // We make sure extension is found
  691|  55.8k|            if let State::InExtension { expected: true } = state {
  692|  3.37k|                return Err(LanguageTagParseError {
  693|  3.37k|                    kind: TagParseErrorKind::EmptyExtension,
  694|  3.37k|                });
  695|  52.4k|            }
  696|  52.4k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  697|  52.4k|            output.push('-');
  698|  52.4k|            output.push(extension_tag);
  699|  52.4k|            state = State::InExtension { expected: true };
  700|  89.3k|        } else if let State::InExtension { .. } = state {
  701|  14.4k|            if !is_alphanumeric(subtag) {
  702|      0|                return Err(LanguageTagParseError {
  703|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  704|      0|                });
  705|  14.4k|            }
  706|  14.4k|            extension_end = end;
  707|  14.4k|            output.push('-');
  708|  14.4k|            output.extend(to_lowercase(subtag));
  709|  14.4k|            state = State::InExtension { expected: false };
  710|  74.9k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  711|  14.2k|            extlangs_count += 1;
  712|  14.2k|            if extlangs_count > 3 {
  713|  1.14k|                return Err(LanguageTagParseError {
  714|  1.14k|                    kind: TagParseErrorKind::TooManyExtlangs,
  715|  1.14k|                });
  716|  13.1k|            }
  717|  13.1k|            // valid extlangs
  718|  13.1k|            extlang_end = end;
  719|  13.1k|            output.push('-');
  720|  13.1k|            output.extend(to_lowercase(subtag));
  721|  60.7k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  722|  48.4k|            && subtag.len() == 4
  723|  6.49k|            && is_alphabetic(subtag)
  724|  6.49k|        {
  725|  6.49k|            // Script
  726|  6.49k|            script_end = end;
  727|  6.49k|            output.push('-');
  728|  6.49k|            output.extend(to_uppercase_first(subtag));
  729|  6.49k|            state = State::AfterScript;
  730|  54.2k|        } else if (state == State::AfterLanguage
  731|  25.9k|            || state == State::AfterExtLang
  732|  12.2k|            || state == State::AfterScript)
  733|  45.0k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  734|  12.3k|                || subtag.len() == 3 && is_numeric(subtag))
  735|  32.7k|        {
  736|  32.7k|            // Region
  737|  32.7k|            region_end = end;
  738|  32.7k|            output.push('-');
  739|  32.7k|            output.extend(to_uppercase(subtag));
  740|  32.7k|            state = State::AfterRegion;
  741|  32.7k|        } else if (state == State::AfterLanguage
  742|  18.5k|            || state == State::AfterExtLang
  743|  9.24k|            || state == State::AfterScript
  744|  9.15k|            || state == State::AfterRegion)
  745|  21.5k|            && is_alphanumeric(subtag)
  746|  21.5k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  747|  9.47k|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  748|  12.0k|        {
  749|  12.0k|            // Variant
  750|  12.0k|            variant_end = end;
  751|  12.0k|            output.push('-');
  752|  12.0k|            output.extend(to_lowercase(subtag));
  753|  12.0k|            state = State::AfterRegion;
  754|  12.0k|        } else {
  755|  9.47k|            return Err(LanguageTagParseError {
  756|  9.47k|                kind: TagParseErrorKind::InvalidSubtag,
  757|  9.47k|            });
  758|       |        }
  759|       |    }
  760|       |
  761|       |    //We make sure we are in a correct final state
  762|   211k|    if let State::InExtension { expected: true } = state {
  763|  33.2k|        return Err(LanguageTagParseError {
  764|  33.2k|            kind: TagParseErrorKind::EmptyExtension,
  765|  33.2k|        });
  766|   178k|    }
  767|   178k|    if let State::InPrivateUse { expected: true } = state {
  768|  19.5k|        return Err(LanguageTagParseError {
  769|  19.5k|            kind: TagParseErrorKind::EmptyPrivateUse,
  770|  19.5k|        });
  771|   158k|    }
  772|   158k|
  773|   158k|    //We make sure we have not skipped anyone
  774|   158k|    if extlang_end < language_end {
  775|   149k|        extlang_end = language_end;
  776|   149k|    }
  777|   158k|    if script_end < extlang_end {
  778|   152k|        script_end = extlang_end;
  779|   152k|    }
  780|   158k|    if region_end < script_end {
  781|   140k|        region_end = script_end;
  782|   140k|    }
  783|   158k|    if variant_end < region_end {
  784|   147k|        variant_end = region_end;
  785|   147k|    }
  786|   158k|    if extension_end < variant_end {
  787|   154k|        extension_end = variant_end;
  788|   154k|    }
  789|       |
  790|   158k|    Ok(TagElementsPositions {
  791|   158k|        language_end,
  792|   158k|        extlang_end,
  793|   158k|        script_end,
  794|   158k|        region_end,
  795|   158k|        variant_end,
  796|   158k|        extension_end,
  797|   158k|    })
  798|   281k|}
_RINvCs1MGLbQ7ar2w_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECsal5YaZOfl0H_5oxrdf:
  576|   294k|fn parse_language_tag(
  577|   294k|    input: &str,
  578|   294k|    output: &mut impl OutputBuffer,
  579|   294k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  580|       |    //grandfathered tags
  581|   294k|    if let Some(tag) = GRANDFATHEREDS
  582|   294k|        .iter()
  583|   294k|        .find(|record| record.eq_ignore_ascii_case(input))
  584|       |    {
  585|      0|        output.push_str(tag);
  586|      0|        Ok(TagElementsPositions {
  587|      0|            language_end: tag.len(),
  588|      0|            extlang_end: tag.len(),
  589|      0|            script_end: tag.len(),
  590|      0|            region_end: tag.len(),
  591|      0|            variant_end: tag.len(),
  592|      0|            extension_end: tag.len(),
  593|      0|        })
  594|   294k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  595|       |        // private use
  596|  13.1k|        if !is_alphanumeric_or_dash(input) {
  597|      0|            Err(LanguageTagParseError {
  598|      0|                kind: TagParseErrorKind::ForbiddenChar,
  599|      0|            })
  600|  13.1k|        } else if input.len() == 2 {
  601|      0|            Err(LanguageTagParseError {
  602|      0|                kind: TagParseErrorKind::EmptyPrivateUse,
  603|      0|            })
  604|       |        } else {
  605|  13.1k|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  606|  13.1k|            Ok(TagElementsPositions {
  607|  13.1k|                language_end: input.len(),
  608|  13.1k|                extlang_end: input.len(),
  609|  13.1k|                script_end: input.len(),
  610|  13.1k|                region_end: input.len(),
  611|  13.1k|                variant_end: input.len(),
  612|  13.1k|                extension_end: input.len(),
  613|  13.1k|            })
  614|       |        }
  615|       |    } else {
  616|   281k|        parse_langtag(input, output)
  617|       |    }
  618|   294k|}
_RINvXsr_Cs1MGLbQ7ar2w_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsaXZRpaJvnVB_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECsal5YaZOfl0H_5oxrdf:
  560|  13.1k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Cs1MGLbQ7ar2w_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsaXZRpaJvnVB_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECsal5YaZOfl0H_5oxrdf:
  560|   296k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Cs1MGLbQ7ar2w_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsaXZRpaJvnVB_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECsal5YaZOfl0H_5oxrdf:
  560|  32.7k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Cs1MGLbQ7ar2w_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsaXZRpaJvnVB_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECsal5YaZOfl0H_5oxrdf:
  560|  6.49k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCs1MGLbQ7ar2w_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0Csal5YaZOfl0H_5oxrdf:
  583|  7.66M|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvCs1MGLbQ7ar2w_10oxilangtag10is_numericCsal5YaZOfl0H_5oxrdf:
  865|  9.29k|fn is_numeric(s: &str) -> bool {
  866|  9.29k|    s.chars().all(|x| x.is_ascii_digit())
  867|  9.29k|}
_RNvCs1MGLbQ7ar2w_10oxilangtag12to_lowercaseCsal5YaZOfl0H_5oxrdf:
  892|   296k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  893|   296k|    s.chars().map(|c| c.to_ascii_lowercase())
  894|   296k|}
_RNvCs1MGLbQ7ar2w_10oxilangtag12to_uppercaseCsal5YaZOfl0H_5oxrdf:
  880|  32.7k|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  881|  32.7k|    s.chars().map(|c| c.to_ascii_uppercase())
  882|  32.7k|}
_RNvCs1MGLbQ7ar2w_10oxilangtag13is_alphabeticCsal5YaZOfl0H_5oxrdf:
  860|   293k|fn is_alphabetic(s: &str) -> bool {
  861|   293k|    s.chars().all(|x| x.is_ascii_alphabetic())
  862|   293k|}
_RNvCs1MGLbQ7ar2w_10oxilangtag15is_alphanumericCsal5YaZOfl0H_5oxrdf:
  870|   120k|fn is_alphanumeric(s: &str) -> bool {
  871|   120k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  872|   120k|}
_RNvCs1MGLbQ7ar2w_10oxilangtag18to_uppercase_firstCsal5YaZOfl0H_5oxrdf:
  886|  6.49k|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  887|  6.49k|    let mut chars = s.chars();
  888|  6.49k|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  889|  6.49k|}
_RNvCs1MGLbQ7ar2w_10oxilangtag23is_alphanumeric_or_dashCsal5YaZOfl0H_5oxrdf:
  875|  13.1k|fn is_alphanumeric_or_dash(s: &str) -> bool {
  876|  13.1k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  877|  13.1k|}
_RNvMsv_Cs1MGLbQ7ar2w_10oxilangtagNtB5_14SubTagIterator3newCsal5YaZOfl0H_5oxrdf:
  839|   281k|    fn new(input: &'a str) -> Self {
  840|   281k|        Self {
  841|   281k|            split: input.split('-'),
  842|   281k|            position: 0,
  843|   281k|        }
  844|   281k|    }
_RNvXs_NvCs1MGLbQ7ar2w_10oxilangtag13parse_langtagNtB4_5StateNtNtCsaXZRpaJvnVB_4core3cmp9PartialEq2eqCsal5YaZOfl0H_5oxrdf:
  625|   796k|    #[derive(PartialEq, Eq)]
_RNvXsq_Cs1MGLbQ7ar2w_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsal5YaZOfl0H_5oxrdf:
  552|   281k|    fn push(&mut self, _: char) {}
_RNvXsw_Cs1MGLbQ7ar2w_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCsaXZRpaJvnVB_4core4iter6traits8iterator8Iterator4nextCsal5YaZOfl0H_5oxrdf:
  851|   704k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  852|   704k|        let tag = self.split.next()?;
  853|   492k|        let tag_end = self.position + tag.len();
  854|   492k|        self.position = tag_end + 1;
  855|   492k|        Some((tag, tag_end))
  856|   704k|    }
_RNvXso_Cs1MGLbQ7ar2w_10oxilangtagNtB5_21LanguageTagParseErrorNtNtCsaXZRpaJvnVB_4core3fmt7Display3fmt:
  482|   122k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  483|   122k|        match self.kind {
  484|       |            TagParseErrorKind::EmptyExtension => {
  485|  38.5k|                write!(f, "If an extension subtag is present, it must not be empty")
  486|       |            }
  487|       |            TagParseErrorKind::EmptyPrivateUse => {
  488|  19.5k|                write!(f, "If the `x` subtag is present, it must not be empty")
  489|       |            }
  490|       |            TagParseErrorKind::ForbiddenChar => {
  491|      0|                write!(f, "The langtag contains a char not allowed")
  492|       |            }
  493|  9.47k|            TagParseErrorKind::InvalidSubtag => write!(
  494|  9.47k|                f,
  495|  9.47k|                "A subtag fails to parse, it does not match any other subtags"
  496|  9.47k|            ),
  497|  43.6k|            TagParseErrorKind::InvalidLanguage => write!(f, "The given language subtag is invalid"),
  498|       |            TagParseErrorKind::SubtagTooLong => {
  499|  10.3k|                write!(f, "A subtag may be eight characters in length at maximum")
  500|       |            }
  501|      0|            TagParseErrorKind::EmptySubtag => write!(f, "A subtag should not be empty"),
  502|       |            TagParseErrorKind::TooManyExtlangs => {
  503|  1.14k|                write!(f, "At maximum three extlangs are allowed")
  504|       |            }
  505|       |        }
  506|   122k|    }
_RNCNvCs1MGLbQ7ar2w_10oxilangtag13is_alphabetic0B3_:
  861|  1.00M|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCs1MGLbQ7ar2w_10oxilangtag10is_numeric0B3_:
  866|  9.29k|    s.chars().all(|x| x.is_ascii_digit())
_RNCNvCs1MGLbQ7ar2w_10oxilangtag15is_alphanumeric0B3_:
  871|   260k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNCNvCs1MGLbQ7ar2w_10oxilangtag23is_alphanumeric_or_dash0B3_:
  876|   451k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')

_RINvMs11_CsenmunypmJnb_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECsal5YaZOfl0H_5oxrdf:
 1567|   217k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1568|   217k|        Err(IriParseError { kind })
 1569|   217k|    }
_RNCNvMs11_CsenmunypmJnb_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0Csal5YaZOfl0H_5oxrdf:
 1550|  40.7k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_CsenmunypmJnb_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0Csal5YaZOfl0H_5oxrdf:
 1551|  12.7k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMCsenmunypmJnb_5oxiriINtB2_6IriRefNtNtCsjp9TdQkU1Un_5alloc6string6StringE10into_innerCsal5YaZOfl0H_5oxrdf:
  191|   724k|    pub fn into_inner(self) -> T {
  192|   724k|        self.iri
  193|   724k|    }
_RNvMCsenmunypmJnb_5oxiriINtB2_6IriRefNtNtCsjp9TdQkU1Un_5alloc6string6StringE11is_absoluteCsal5YaZOfl0H_5oxrdf:
  205|   836k|    pub fn is_absolute(&self) -> bool {
  206|   836k|        self.positions.scheme_end != 0
  207|   836k|    }
_RNvMCsenmunypmJnb_5oxiriINtB2_6IriRefNtNtCsjp9TdQkU1Un_5alloc6string6StringE5parseCsal5YaZOfl0H_5oxrdf:
   58|  1.05M|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  1.05M|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|   836k|        Ok(Self { iri, positions })
   61|  1.05M|    }
_RNvMs11_CsenmunypmJnb_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCsal5YaZOfl0H_5oxrdf:
 1366|  64.6k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|  64.6k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|  11.0k|            let start_position = self.input.position;
 1370|   344k|            while let Some(c) = self.input.next() {
 1371|   335k|                self.output.push(c);
 1372|   335k|                if c == ']' {
 1373|  2.39k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|  2.39k|                    if !UNCHECKED {
 1375|  2.39k|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|  2.39k|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|      0|                        }
 1378|      0|                    }
 1379|       |
 1380|      0|                    let c = self.input.next();
 1381|      0|                    return match c {
 1382|       |                        Some(':') => {
 1383|      0|                            self.output.push(':');
 1384|      0|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|      0|                            self.output_positions.authority_end = self.output.len();
 1388|      0|                            self.parse_path_start(c)
 1389|       |                        }
 1390|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|   333k|                }
 1393|       |            }
 1394|  8.64k|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|   587k|            loop {
 1398|   587k|                let c = self.input.next();
 1399|   587k|                match c {
 1400|       |                    Some(':') => {
 1401|  14.9k|                        self.output.push(':');
 1402|  14.9k|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|  31.8k|                        self.output_positions.authority_end = self.output.len();
 1406|  31.8k|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|   540k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|  64.6k|    }
_RNvMs11_CsenmunypmJnb_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCsal5YaZOfl0H_5oxrdf:
 1457|   969k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|  3.93M|        loop {
 1459|  3.93M|            let c = self.input.next();
 1460|  3.93M|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|   959k|                    if self.output.as_str().ends_with("/..") {
 1463|      0|                        self.remove_last_segment();
 1464|      0|                        self.remove_last_segment();
 1465|      0|                        self.output.push('/');
 1466|   959k|                    } else if self.output.as_str().ends_with("/.") {
 1467|      0|                        self.remove_last_segment();
 1468|      0|                        self.output.push('/');
 1469|   959k|                    } else if c == Some('/') {
 1470|   104k|                        self.output.push('/');
 1471|   854k|                    }
 1472|       |
 1473|   959k|                    if c == Some('?') {
 1474|  65.4k|                        self.output_positions.path_end = self.output.len();
 1475|  65.4k|                        self.output.push('?');
 1476|  65.4k|                        return self.parse_query();
 1477|   894k|                    } else if c == Some('#') {
 1478|  22.3k|                        self.output_positions.path_end = self.output.len();
 1479|  22.3k|                        self.output_positions.query_end = self.output.len();
 1480|  22.3k|                        self.output.push('#');
 1481|  22.3k|                        return self.parse_fragment();
 1482|   872k|                    } else if c.is_none() {
 1483|   767k|                        self.output_positions.path_end = self.output.len();
 1484|   767k|                        self.output_positions.query_end = self.output.len();
 1485|   767k|                        return Ok(());
 1486|   104k|                    }
 1487|       |                }
 1488|  2.97M|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|   969k|    }
_RNvMs11_CsenmunypmJnb_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCsal5YaZOfl0H_5oxrdf:
 1414|  14.9k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|  36.6k|        loop {
 1416|  36.6k|            let c = self.input.next();
 1417|  34.0k|            match c {
 1418|  34.0k|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|  7.40k|                    self.output_positions.authority_end = self.output.len();
 1421|  7.40k|                    return self.parse_path_start(c);
 1422|       |                }
 1423|  7.51k|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|  14.9k|    }
_RNvMs11_CsenmunypmJnb_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCsal5YaZOfl0H_5oxrdf:
 1547|  43.7k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1548|  43.7k|        let c1 = self.input.next();
 1549|  43.7k|        let c2 = self.input.next();
 1550|  43.7k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1551|  14.7k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1552|       |        {
 1553|  8.72k|            self.output.push('%');
 1554|  8.72k|            self.output.push(c1.unwrap());
 1555|  8.72k|            self.output.push(c2.unwrap());
 1556|  8.72k|            Ok(())
 1557|       |        } else {
 1558|  35.0k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1559|  35.0k|                Some('%'),
 1560|  35.0k|                c1,
 1561|  35.0k|                c2,
 1562|  35.0k|            ]))
 1563|       |        }
 1564|  43.7k|    }
_RNvMs11_CsenmunypmJnb_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCsal5YaZOfl0H_5oxrdf:
 1493|  72.9k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|  1.08M|        while let Some(c) = self.input.next() {
 1495|  1.04M|            if c == '#' {
 1496|  2.40k|                self.output_positions.query_end = self.output.len();
 1497|  2.40k|                self.output.push('#');
 1498|  2.40k|                return self.parse_fragment();
 1499|       |            } else {
 1500|  1.04M|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|  41.5k|        self.output_positions.query_end = self.output.len();
 1504|  41.5k|        Ok(())
 1505|  72.9k|    }
_RNvMs11_CsenmunypmJnb_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCsal5YaZOfl0H_5oxrdf:
 1220|   825k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|  2.53M|        loop {
 1222|  2.53M|            let c = self.input.next();
 1223|  2.52M|            match c {
 1224|  2.52M|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|  1.70M|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|   751k|                    self.output.push(':');
 1229|   751k|                    self.output_positions.scheme_end = self.output.len();
 1230|   751k|                    self.input_scheme_end = self.input.position;
 1231|   751k|                    return if self.input.starts_with('/') {
 1232|  24.8k|                        self.input.next();
 1233|  24.8k|                        self.output.push('/');
 1234|  24.8k|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|   727k|                        self.output_positions.authority_end = self.output.len();
 1237|   727k|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|  73.3k|                    self.input = ParserInput {
 1242|  73.3k|                        value: self.iri.chars(),
 1243|  73.3k|                        position: 0,
 1244|  73.3k|                    }; // reset
 1245|  73.3k|                    self.output.clear();
 1246|  73.3k|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|   825k|    }
_RNvMs11_CsenmunypmJnb_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCsal5YaZOfl0H_5oxrdf:
 1507|  29.3k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|   407k|        while let Some(c) = self.input.next() {
 1509|   398k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|  8.94k|        Ok(())
 1512|  29.3k|    }
_RNvMs11_CsenmunypmJnb_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_relativeCsal5YaZOfl0H_5oxrdf:
 1263|   294k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1264|   294k|        if let Some(base) = self.base {
 1265|      0|            match self.input.front() {
 1266|       |                None => {
 1267|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1268|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1269|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1270|      0|                    self.output_positions.path_end = base.positions.path_end;
 1271|      0|                    self.output_positions.query_end = base.positions.query_end;
 1272|      0|                    Ok(())
 1273|       |                }
 1274|       |                Some('/') => {
 1275|      0|                    self.input.next();
 1276|      0|                    self.parse_relative_slash(&base)
 1277|       |                }
 1278|       |                Some('?') => {
 1279|      0|                    self.input.next();
 1280|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1281|      0|                    self.output.push('?');
 1282|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1283|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1284|      0|                    self.output_positions.path_end = base.positions.path_end;
 1285|      0|                    self.parse_query()
 1286|       |                }
 1287|       |                Some('#') => {
 1288|      0|                    self.input.next();
 1289|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1290|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1291|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1292|      0|                    self.output_positions.path_end = base.positions.path_end;
 1293|      0|                    self.output_positions.query_end = base.positions.query_end;
 1294|      0|                    self.output.push('#');
 1295|      0|                    self.parse_fragment()
 1296|       |                }
 1297|       |                _ => {
 1298|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1299|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1300|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1301|      0|                    self.output_positions.path_end = base.positions.path_end;
 1302|      0|                    self.remove_last_segment();
 1303|      0|                    if self.output.len() > base.positions.scheme_end {
 1304|      0|                        // We have some path or authority, we keep a base '/'
 1305|      0|                        self.output.push('/');
 1306|      0|                    }
 1307|      0|                    self.parse_path()
 1308|       |                }
 1309|       |            }
 1310|       |        } else {
 1311|   294k|            self.output_positions.scheme_end = 0;
 1312|   294k|            self.input_scheme_end = 0;
 1313|   294k|            if self.input.starts_with('/') {
 1314|  84.8k|                self.input.next();
 1315|  84.8k|                self.output.push('/');
 1316|  84.8k|                self.parse_path_or_authority()
 1317|       |            } else {
 1318|   210k|                self.output_positions.authority_end = 0;
 1319|   210k|                self.parse_path()
 1320|       |            }
 1321|       |        }
 1322|   294k|    }
_RNvMs11_CsenmunypmJnb_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCsal5YaZOfl0H_5oxrdf:
 1342|  84.9k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|   719k|        loop {
 1345|   719k|            let c = self.input.next();
 1346|   719k|            match c {
 1347|       |                Some('@') => {
 1348|  7.78k|                    self.output.push('@');
 1349|  7.78k|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|  56.8k|                    self.input = ParserInput {
 1353|  56.8k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|  56.8k|                        position: self.input_scheme_end + 2,
 1355|  56.8k|                    };
 1356|  56.8k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|  56.8k|                    return self.parse_host();
 1358|       |                }
 1359|   655k|                Some(c) => {
 1360|   655k|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|  84.9k|    }
_RNvMs11_CsenmunypmJnb_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCsal5YaZOfl0H_5oxrdf:
 1428|  39.2k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|  39.2k|        match c {
 1430|       |            None => {
 1431|  19.0k|                self.output_positions.path_end = self.output.len();
 1432|  19.0k|                self.output_positions.query_end = self.output.len();
 1433|  19.0k|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|  7.50k|                self.output_positions.path_end = self.output.len();
 1437|  7.50k|                self.output.push('?');
 1438|  7.50k|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|  4.60k|                self.output_positions.path_end = self.output.len();
 1442|  4.60k|                self.output_positions.query_end = self.output.len();
 1443|  4.60k|                self.output.push('#');
 1444|  4.60k|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|  8.10k|                self.output.push('/');
 1448|  8.10k|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|  39.2k|    }
_RNvMs11_CsenmunypmJnb_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCsal5YaZOfl0H_5oxrdf:
 1212|  1.05M|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|  1.05M|        match self.input.front() {
 1214|  7.47k|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|  1.01M|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|   221k|            _ => self.parse_relative(),
 1217|       |        }
 1218|  1.05M|    }
_RNvMs11_CsenmunypmJnb_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCsal5YaZOfl0H_5oxrdf:
 1252|   109k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|   109k|        if self.input.starts_with('/') {
 1254|  84.9k|            self.input.next();
 1255|  84.9k|            self.output.push('/');
 1256|  84.9k|            self.parse_authority()
 1257|       |        } else {
 1258|  24.7k|            self.output_positions.authority_end = self.output.len() - 1;
 1259|  24.7k|            self.parse_path()
 1260|       |        }
 1261|   109k|    }
_RNvMs11_CsenmunypmJnb_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarCsal5YaZOfl0H_5oxrdf:
 1523|  4.56M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|  4.56M|        if UNCHECKED || is_url_code_point(c) {
 1525|  4.39M|            self.output.push(c);
 1526|  4.39M|            Ok(())
 1527|   168k|        } else if c == '%' {
 1528|  35.1k|            self.read_echar()
 1529|       |        } else {
 1530|   133k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|  4.56M|    }
_RNvMs11_CsenmunypmJnb_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E33read_url_query_codepoint_or_echarCsal5YaZOfl0H_5oxrdf:
 1535|  1.04M|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|  1.04M|        if UNCHECKED || is_url_query_code_point(c) {
 1537|  1.01M|            self.output.push(c);
 1538|  1.01M|            Ok(())
 1539|  31.3k|        } else if c == '%' {
 1540|  8.62k|            self.read_echar()
 1541|       |        } else {
 1542|  22.7k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|  1.04M|    }
_RNvMs11_CsenmunypmJnb_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCsal5YaZOfl0H_5oxrdf:
 1187|  1.05M|    fn parse(
 1188|  1.05M|        iri: &'a str,
 1189|  1.05M|        base: Option<IriRef<&'a str>>,
 1190|  1.05M|        output: &'a mut O,
 1191|  1.05M|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|  1.05M|        let mut parser = Self {
 1193|  1.05M|            iri,
 1194|  1.05M|            base,
 1195|  1.05M|            input: ParserInput {
 1196|  1.05M|                value: iri.chars(),
 1197|  1.05M|                position: 0,
 1198|  1.05M|            },
 1199|  1.05M|            output,
 1200|  1.05M|            output_positions: IriElementsPositions {
 1201|  1.05M|                scheme_end: 0,
 1202|  1.05M|                authority_end: 0,
 1203|  1.05M|                path_end: 0,
 1204|  1.05M|                query_end: 0,
 1205|  1.05M|            },
 1206|  1.05M|            input_scheme_end: 0,
 1207|  1.05M|        };
 1208|  1.05M|        parser.parse_scheme_start()?;
 1209|   836k|        Ok(parser.output_positions)
 1210|  1.05M|    }
_RNvMsp_CsenmunypmJnb_5oxiriINtB5_3IriNtNtCsjp9TdQkU1Un_5alloc6string6StringE10into_innerCsal5YaZOfl0H_5oxrdf:
  678|   724k|    pub fn into_inner(self) -> T {
  679|   724k|        self.0.into_inner()
  680|   724k|    }
_RNvMsp_CsenmunypmJnb_5oxiriINtB5_3IriNtNtCsjp9TdQkU1Un_5alloc6string6StringE5parseCsal5YaZOfl0H_5oxrdf:
  562|  1.05M|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  563|  1.05M|        IriRef::parse(iri)?.try_into()
  564|  1.05M|    }
_RNvXsV_CsenmunypmJnb_5oxiriINtB5_3IriNtNtCsjp9TdQkU1Un_5alloc6string6StringEINtNtCsaXZRpaJvnVB_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsal5YaZOfl0H_5oxrdf:
  981|   836k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  982|   836k|        if iri.is_absolute() {
  983|   724k|            Ok(Self(iri))
  984|       |        } else {
  985|   111k|            Err(IriParseError {
  986|   111k|                kind: IriParseErrorKind::NoScheme,
  987|   111k|            })
  988|       |        }
  989|   836k|    }
_RNvCsenmunypmJnb_5oxiri17is_url_code_pointCsal5YaZOfl0H_5oxrdf:
 1573|  5.61M|fn is_url_code_point(c: char) -> bool {
 1574|  5.61M|    matches!(c,
 1575|   802k|        'a'..='z'
 1576|  2.53M|        | 'A'..='Z'
 1577|  1.08M|        | '0'..='9'
 1578|       |        | '!'
 1579|       |        | '$'
 1580|       |        | '&'
 1581|       |        | '\''
 1582|       |        | '('
 1583|       |        | ')'
 1584|       |        | '*'
 1585|       |        | '+'
 1586|       |        | ','
 1587|       |        | '-'
 1588|       |        | '.'
 1589|       |        | '/'
 1590|       |        | ':'
 1591|       |        | ';'
 1592|       |        | '='
 1593|       |        | '?'
 1594|       |        | '@'
 1595|       |        | '_'
 1596|       |        | '~'
 1597|  76.6k|        | '\u{A0}'..='\u{D7FF}'
 1598|  23.9k|        | '\u{F900}'..='\u{FDCF}'
 1599|  23.9k|        | '\u{FDF0}'..='\u{FFEF}'
 1600|  23.9k|        | '\u{10000}'..='\u{1FFFD}'
 1601|  23.9k|        | '\u{20000}'..='\u{2FFFD}'
 1602|  23.9k|        | '\u{30000}'..='\u{3FFFD}'
 1603|  23.9k|        | '\u{40000}'..='\u{4FFFD}'
 1604|  23.9k|        | '\u{50000}'..='\u{5FFFD}'
 1605|  23.9k|        | '\u{60000}'..='\u{6FFFD}'
 1606|  23.9k|        | '\u{70000}'..='\u{7FFFD}'
 1607|  23.8k|        | '\u{80000}'..='\u{8FFFD}'
 1608|  23.8k|        | '\u{90000}'..='\u{9FFFD}'
 1609|  23.8k|        | '\u{A0000}'..='\u{AFFFD}'
 1610|  23.8k|        | '\u{B0000}'..='\u{BFFFD}'
 1611|  23.8k|        | '\u{C0000}'..='\u{CFFFD}'
 1612|  22.4k|        | '\u{D0000}'..='\u{DFFFD}'
 1613|  22.4k|        | '\u{E1000}'..='\u{EFFFD}'
 1614|       |    )
 1615|  5.61M|}
_RNvCsenmunypmJnb_5oxiri23is_url_query_code_pointCsal5YaZOfl0H_5oxrdf:
 1618|  1.04M|fn is_url_query_code_point(c: char) -> bool {
 1619|  1.04M|    is_url_code_point(c)
 1620|  34.9k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1621|  1.04M|}
_RNvMs10_CsenmunypmJnb_5oxiriNtB6_11ParserInput11starts_withCsal5YaZOfl0H_5oxrdf:
 1169|  1.22M|    fn starts_with(&self, c: char) -> bool {
 1170|  1.22M|        self.value.as_str().starts_with(c)
 1171|  1.22M|    }
_RNvMs10_CsenmunypmJnb_5oxiriNtB6_11ParserInput4nextCsal5YaZOfl0H_5oxrdf:
 1154|  9.92M|    fn next(&mut self) -> Option<char> {
 1155|  9.92M|        if let Some(head) = self.value.next() {
 1156|  9.04M|            self.position += head.len_utf8();
 1157|  9.04M|            Some(head)
 1158|       |        } else {
 1159|   883k|            None
 1160|       |        }
 1161|  9.92M|    }
_RNvMs10_CsenmunypmJnb_5oxiriNtB6_11ParserInput5frontCsal5YaZOfl0H_5oxrdf:
 1164|  1.05M|    fn front(&self) -> Option<char> {
 1165|  1.05M|        self.value.clone().next()
 1166|  1.05M|    }
_RNvXs1b_CsenmunypmJnb_5oxiriNtB6_16VoidOutputBufferNtNtCsaXZRpaJvnVB_4core7default7Default7defaultCsal5YaZOfl0H_5oxrdf:
 1078|  1.05M|#[derive(Default)]
_RNvXsY_CsenmunypmJnb_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCsal5YaZOfl0H_5oxrdf:
 1105|  3.28M|    fn len(&self) -> usize {
 1106|  3.28M|        self.len
 1107|  3.28M|    }
_RNvXsY_CsenmunypmJnb_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsal5YaZOfl0H_5oxrdf:
 1085|  8.68M|    fn push(&mut self, c: char) {
 1086|  8.68M|        self.len += c.len_utf8();
 1087|  8.68M|    }
_RNvXsY_CsenmunypmJnb_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer5clearCsal5YaZOfl0H_5oxrdf:
 1095|  73.3k|    fn clear(&mut self) {
 1096|  73.3k|        self.len = 0;
 1097|  73.3k|    }
_RNvXsY_CsenmunypmJnb_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCsal5YaZOfl0H_5oxrdf:
 1110|  1.91M|    fn as_str(&self) -> &str {
 1111|  1.91M|        ""
 1112|  1.91M|    }
_RNvXsY_CsenmunypmJnb_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCsal5YaZOfl0H_5oxrdf:
 1100|  56.8k|    fn truncate(&mut self, new_len: usize) {
 1101|  56.8k|        self.len = new_len;
 1102|  56.8k|    }
_RNvXsW_CsenmunypmJnb_5oxiriNtB5_13IriParseErrorNtNtCsaXZRpaJvnVB_4core3fmt7Display3fmt:
 1016|   329k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1017|   329k|        match &self.kind {
 1018|   119k|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
 1019|  8.64k|            IriParseErrorKind::InvalidHostCharacter(c) => {
 1020|  8.64k|                write!(f, "Invalid character '{c}' in host")
 1021|       |            }
 1022|  2.39k|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({e})"),
 1023|  7.51k|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{c}'"),
 1024|   156k|            IriParseErrorKind::InvalidIriCodePoint(c) => {
 1025|   156k|                write!(f, "Invalid IRI code point '{c}'")
 1026|       |            }
 1027|  35.0k|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
 1028|  35.0k|                f,
 1029|  35.0k|                "Invalid IRI percent encoding '{}'",
 1030|  35.0k|                cs.iter().flatten().cloned().collect::<String>()
 1031|  35.0k|            ),
 1032|       |        }
 1033|   329k|    }

_RINvCsg5j8di3JvXp_6nquads5parseARShj1_EB2_:
    7|  79.6k|fn parse<'a>(
    8|  79.6k|    chunks: impl IntoIterator<Item = &'a [u8]>,
    9|  79.6k|    unchecked: bool,
   10|  79.6k|) -> (Vec<Quad>, Vec<String>) {
   11|  79.6k|    let mut quads = Vec::new();
   12|  79.6k|    let mut errors = Vec::new();
   13|  79.6k|    let mut parser = NQuadsParser::new().with_quoted_triples();
   14|  79.6k|    if unchecked {
   15|      0|        parser = parser.unchecked();
   16|  79.6k|    }
   17|  79.6k|    let mut reader = parser.parse();
   18|   159k|    for chunk in chunks {
   19|  79.6k|        reader.extend_from_slice(chunk);
   20|  6.97M|        while let Some(result) = reader.read_next() {
   21|  6.89M|            match result {
   22|  59.1k|                Ok(quad) => quads.push(quad),
   23|  6.83M|                Err(error) => errors.push(error.to_string()),
   24|       |            }
   25|       |        }
   26|       |    }
   27|  79.6k|    reader.end();
   28|   123k|    while let Some(result) = reader.read_next() {
   29|  44.0k|        match result {
   30|    886|            Ok(quad) => quads.push(quad),
   31|  43.1k|            Err(error) => errors.push(error.to_string()),
   32|       |        }
   33|       |    }
   34|  79.6k|    assert!(reader.is_end());
   35|  79.6k|    (quads, errors)
   36|  79.6k|}
_RINvCsg5j8di3JvXp_6nquads5parseINtNtNtCsaXZRpaJvnVB_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_run0EEB2_:
    7|  79.6k|fn parse<'a>(
    8|  79.6k|    chunks: impl IntoIterator<Item = &'a [u8]>,
    9|  79.6k|    unchecked: bool,
   10|  79.6k|) -> (Vec<Quad>, Vec<String>) {
   11|  79.6k|    let mut quads = Vec::new();
   12|  79.6k|    let mut errors = Vec::new();
   13|  79.6k|    let mut parser = NQuadsParser::new().with_quoted_triples();
   14|  79.6k|    if unchecked {
   15|      0|        parser = parser.unchecked();
   16|  79.6k|    }
   17|  79.6k|    let mut reader = parser.parse();
   18|  10.8M|    for chunk in chunks {
   19|  10.7M|        reader.extend_from_slice(chunk);
   20|  17.6M|        while let Some(result) = reader.read_next() {
   21|  6.89M|            match result {
   22|  59.1k|                Ok(quad) => quads.push(quad),
   23|  6.83M|                Err(error) => errors.push(error.to_string()),
   24|       |            }
   25|       |        }
   26|       |    }
   27|  79.6k|    reader.end();
   28|   123k|    while let Some(result) = reader.read_next() {
   29|  44.0k|        match result {
   30|    886|            Ok(quad) => quads.push(quad),
   31|  43.1k|            Err(error) => errors.push(error.to_string()),
   32|       |        }
   33|       |    }
   34|  79.6k|    assert!(reader.is_end());
   35|  79.6k|    (quads, errors)
   36|  79.6k|}
_RINvCsg5j8di3JvXp_6nquads5parseINtNtNtCsaXZRpaJvnVB_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_runs0_0EEB2_:
    7|    387|fn parse<'a>(
    8|    387|    chunks: impl IntoIterator<Item = &'a [u8]>,
    9|    387|    unchecked: bool,
   10|    387|) -> (Vec<Quad>, Vec<String>) {
   11|    387|    let mut quads = Vec::new();
   12|    387|    let mut errors = Vec::new();
   13|    387|    let mut parser = NQuadsParser::new().with_quoted_triples();
   14|    387|    if unchecked {
   15|    387|        parser = parser.unchecked();
   16|    387|    }
   17|    387|    let mut reader = parser.parse();
   18|  7.70k|    for chunk in chunks {
   19|  7.32k|        reader.extend_from_slice(chunk);
   20|  7.42k|        while let Some(result) = reader.read_next() {
   21|    107|            match result {
   22|    107|                Ok(quad) => quads.push(quad),
   23|      0|                Err(error) => errors.push(error.to_string()),
   24|       |            }
   25|       |        }
   26|       |    }
   27|    387|    reader.end();
   28|    462|    while let Some(result) = reader.read_next() {
   29|     75|        match result {
   30|     75|            Ok(quad) => quads.push(quad),
   31|      0|            Err(error) => errors.push(error.to_string()),
   32|       |        }
   33|       |    }
   34|    387|    assert!(reader.is_end());
   35|    387|    (quads, errors)
   36|    387|}
_RNCNvNvCsg5j8di3JvXp_6nquads1__19___libfuzzer_sys_run0B5_:
   40|  42.2M|    let (quads, errors) = parse(data.split(|c| *c == 0xFF), false);
_RNCNvNvCsg5j8di3JvXp_6nquads1__19___libfuzzer_sys_runs_0B5_:
   46|  42.2M|            .filter(|c| *c != 0xFF)
_RNCNvNvCsg5j8di3JvXp_6nquads1__19___libfuzzer_sys_runs0_0B5_:
   56|  22.8k|        let (quads_unchecked, errors_unchecked) = parse(data.split(|c| *c == 0xFF), true);

_RNvMNtCsal5YaZOfl0H_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCsg5j8di3JvXp_6nquads:
   88|  37.7k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|  37.7k|        BlankNodeRef(match &self.0 {
   90|  8.62k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|  29.1k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|  29.1k|                id: *id,
   93|  29.1k|                str: str.as_str(),
   94|  29.1k|            },
   95|       |        })
   96|  37.7k|    }
_RNvMs1_NtCsal5YaZOfl0H_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCsg5j8di3JvXp_6nquads:
  176|  37.7k|    pub const fn as_str(self) -> &'a str {
  177|  37.7k|        match self.0 {
  178|  8.62k|            BlankNodeRefContent::Named(id) => id,
  179|  29.1k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  180|       |        }
  181|  37.7k|    }
_RNvMs7_NtCsal5YaZOfl0H_5oxrdf10blank_nodeNtB5_5IdStr6as_strCsg5j8di3JvXp_6nquads:
  262|  29.1k|    fn as_str(&self) -> &str {
  263|  29.1k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  264|  29.1k|        str::from_utf8(&self.0[..len]).unwrap()
  265|  29.1k|    }
_RNvXs2_NtCsal5YaZOfl0H_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCsaXZRpaJvnVB_4core3fmt7Display3fmtCsg5j8di3JvXp_6nquads:
  217|  37.7k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  218|  37.7k|        write!(f, "_:{}", self.as_str())
  219|  37.7k|    }
_RNvXsF_NtCsal5YaZOfl0H_5oxrdf10blank_nodeNtB5_5IdStrNtNtCsaXZRpaJvnVB_4core3cmp9PartialEq2eqCsg5j8di3JvXp_6nquads:
  250|  58.3k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsd_NtCsal5YaZOfl0H_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCsaXZRpaJvnVB_4core3cmp9PartialEq2eqCsg5j8di3JvXp_6nquads:
   20|  75.6k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsi_NtCsal5YaZOfl0H_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCsaXZRpaJvnVB_4core3cmp9PartialEq2eqCsg5j8di3JvXp_6nquads:
   23|  75.6k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMNtCsal5YaZOfl0H_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idCs6v03uY4lCtp_5oxttl:
   62|   104k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|   104k|        Self(BlankNodeContent::Anonymous {
   64|   104k|            id,
   65|   104k|            str: IdStr::new(id),
   66|   104k|        })
   67|   104k|    }
_RNvMs7_NtCsal5YaZOfl0H_5oxrdf10blank_nodeNtB5_5IdStr3newCs6v03uY4lCtp_5oxttl:
  255|   104k|    fn new(id: u128) -> Self {
  256|   104k|        let mut str = [0; 32];
  257|   104k|        write!(&mut str[..], "{id:x}").unwrap();
  258|   104k|        Self(str)
  259|   104k|    }
_RNvNtCsal5YaZOfl0H_5oxrdf10blank_node13to_integer_idCs6v03uY4lCtp_5oxttl:
  328|   152k|fn to_integer_id(id: &str) -> Option<u128> {
  329|   152k|    let digits = id.as_bytes();
  330|   152k|    let mut value: u128 = 0;
  331|   152k|    if let None | Some(b'0') = digits.first() {
  332|  33.9k|        return None; // No empty string or leading zeros
  333|   118k|    }
  334|  1.35M|    for digit in digits {
  335|  1.24M|        value = value.checked_mul(16)?.checked_add(
  336|  1.24M|            match *digit {
  337|  1.24M|                b'0'..=b'9' => digit - b'0',
  338|  1.12M|                b'a'..=b'f' => digit - b'a' + 10,
  339|  11.8k|                _ => return None,
  340|       |            }
  341|  1.23M|            .into(),
  342|      0|        )?;
  343|       |    }
  344|   104k|    Some(value)
  345|   152k|}
_RINvMNtCsal5YaZOfl0H_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedReECs6v03uY4lCtp_5oxttl:
   49|   152k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   50|   152k|        let id = id.into();
   51|   152k|        if let Some(numerical_id) = to_integer_id(&id) {
   52|   104k|            Self::new_from_unique_id(numerical_id)
   53|       |        } else {
   54|  47.7k|            Self(BlankNodeContent::Named(id))
   55|       |        }
   56|   152k|    }
_RNCNvMs7_NtCsal5YaZOfl0H_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  263|   378k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);

_RNvMNtCsal5YaZOfl0H_5oxrdf7literalNtB2_7Literal6as_refCsg5j8di3JvXp_6nquads:
  131|  13.7k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  132|  13.7k|        LiteralRef(match &self.0 {
  133|  7.80k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  134|  3.70k|            LiteralContent::LanguageTaggedString { value, language } => {
  135|  3.70k|                LiteralRefContent::LanguageTaggedString { value, language }
  136|       |            }
  137|  2.19k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  138|  2.19k|                value,
  139|  2.19k|                datatype: datatype.as_ref(),
  140|  2.19k|            },
  141|       |        })
  142|  13.7k|    }
_RNvXsD_NtCsal5YaZOfl0H_5oxrdf7literalNtB5_7LiteralNtNtCsaXZRpaJvnVB_4core3cmp9PartialEq2eqCsg5j8di3JvXp_6nquads:
   36|  27.4k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsI_NtCsal5YaZOfl0H_5oxrdf7literalNtB5_14LiteralContentNtNtCsaXZRpaJvnVB_4core3cmp9PartialEq2eqCsg5j8di3JvXp_6nquads:
   39|  27.4k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsu_NtCsal5YaZOfl0H_5oxrdf7literalNtB5_10LiteralRefNtNtCsaXZRpaJvnVB_4core3fmt7Display3fmtCsg5j8di3JvXp_6nquads:
  567|  13.7k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  568|  13.7k|        match self.0 {
  569|  7.80k|            LiteralRefContent::String(value) => print_quoted_str(value, f),
  570|  3.70k|            LiteralRefContent::LanguageTaggedString { value, language } => {
  571|  3.70k|                print_quoted_str(value, f)?;
  572|  3.70k|                write!(f, "@{language}")
  573|       |            }
  574|  2.19k|            LiteralRefContent::TypedLiteral { value, datatype } => {
  575|  2.19k|                print_quoted_str(value, f)?;
  576|  2.19k|                write!(f, "^^{datatype}")
  577|       |            }
  578|       |        }
  579|  13.7k|    }
_RINvMNtCsal5YaZOfl0H_5oxrdf7literalNtB3_7Literal18new_simple_literalRNtNtCsjp9TdQkU1Un_5alloc6string6StringECs6v03uY4lCtp_5oxttl:
   49|    268|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   50|    268|        Self(LiteralContent::String(value.into()))
   51|    268|    }
_RINvMNtCsal5YaZOfl0H_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCsjp9TdQkU1Un_5alloc6string6StringEB5_:
   49|  25.1k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   50|  25.1k|        Self(LiteralContent::String(value.into()))
   51|  25.1k|    }
_RINvMNtCsal5YaZOfl0H_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCsjp9TdQkU1Un_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   55|  9.75k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   56|  9.75k|        let value = value.into();
   57|  9.75k|        let datatype = datatype.into();
   58|  9.75k|        Self(if datatype == xsd::STRING {
   59|      0|            LiteralContent::String(value)
   60|       |        } else {
   61|  9.75k|            LiteralContent::TypedLiteral { value, datatype }
   62|       |        })
   63|  9.75k|    }
_RINvMNtCsal5YaZOfl0H_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCsjp9TdQkU1Un_5alloc6string6StringB1n_EB5_:
   87|  19.7k|    pub fn new_language_tagged_literal_unchecked(
   88|  19.7k|        value: impl Into<String>,
   89|  19.7k|        language: impl Into<String>,
   90|  19.7k|    ) -> Self {
   91|  19.7k|        Self(LiteralContent::LanguageTaggedString {
   92|  19.7k|            value: value.into(),
   93|  19.7k|            language: language.into(),
   94|  19.7k|        })
   95|  19.7k|    }
_RINvNtCsal5YaZOfl0H_5oxrdf7literal16print_quoted_strNtNtCsaXZRpaJvnVB_4core3fmt9FormatterEB4_:
  618|  13.7k|pub fn print_quoted_str(string: &str, f: &mut impl Write) -> fmt::Result {
  619|  13.7k|    f.write_char('"')?;
  620|   392k|    for c in string.chars() {
  621|   392k|        match c {
  622|  12.9k|            '\u{08}' => f.write_str("\\b"),
  623|  5.21k|            '\t' => f.write_str("\\t"),
  624|  12.8k|            '\n' => f.write_str("\\n"),
  625|  5.66k|            '\u{0c}' => f.write_str("\\f"),
  626|  6.83k|            '\r' => f.write_str("\\r"),
  627|    684|            '"' => f.write_str("\\\""),
  628|  2.19k|            '\\' => f.write_str("\\\\"),
  629|   346k|            '\0'..='\u{1f}' | '\u{7f}' => write!(f, "\\u{:04X}", u32::from(c)),
  630|   114k|            _ => f.write_char(c),
  631|      0|        }?;
  632|       |    }
  633|  13.7k|    f.write_char('"')
  634|  13.7k|}

_RNvMNtCsal5YaZOfl0H_5oxrdf10named_nodeNtB2_9NamedNode6as_refCsg5j8di3JvXp_6nquads:
   54|   159k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|   159k|        NamedNodeRef::new_unchecked(&self.iri)
   56|   159k|    }
_RNvMs4_NtCsal5YaZOfl0H_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCsg5j8di3JvXp_6nquads:
  128|   159k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   159k|        Self { iri }
  130|   159k|    }
_RNvMs4_NtCsal5YaZOfl0H_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCsg5j8di3JvXp_6nquads:
  133|   159k|    pub const fn as_str(self) -> &'a str {
  134|   159k|        self.iri
  135|   159k|    }
_RNvXs5_NtCsal5YaZOfl0H_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCsaXZRpaJvnVB_4core3fmt7Display3fmtCsg5j8di3JvXp_6nquads:
  145|   159k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|   159k|        write!(f, "<{}>", self.as_str())
  147|   159k|    }
_RNvXsl_NtCsal5YaZOfl0H_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCsaXZRpaJvnVB_4core3cmp9PartialEq2eqCsg5j8di3JvXp_6nquads:
   17|   319k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RINvMNtCsal5YaZOfl0H_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCsjp9TdQkU1Un_5alloc6string6StringEB5_:
   39|   611k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   611k|        Self { iri: iri.into() }
   41|   611k|    }
_RNvMNtCsal5YaZOfl0H_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|  9.75k|    pub fn as_str(&self) -> &str {
   45|  9.75k|        self.iri.as_str()
   46|  9.75k|    }
_RNvMNtCsal5YaZOfl0H_5oxrdf10named_nodeNtB2_9NamedNode6as_refB4_:
   54|    145|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|    145|        NamedNodeRef::new_unchecked(&self.iri)
   56|    145|    }
_RNvMs4_NtCsal5YaZOfl0H_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedB7_:
  128|    145|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|    145|        Self { iri }
  130|    145|    }
_RNvMs4_NtCsal5YaZOfl0H_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|  9.89k|    pub const fn as_str(self) -> &'a str {
  134|  9.89k|        self.iri
  135|  9.89k|    }
_RNvXs5_NtCsal5YaZOfl0H_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCsaXZRpaJvnVB_4core3fmt7Display3fmtB7_:
  145|    145|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|    145|        write!(f, "<{}>", self.as_str())
  147|    145|    }
_RNvXs9_NtCsal5YaZOfl0H_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCsaXZRpaJvnVB_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|  9.75k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|  9.75k|        self.as_str() == other.as_str()
  175|  9.75k|    }

_RNvMs18_NtCsal5YaZOfl0H_5oxrdf6tripleNtB6_9GraphName6as_refCsg5j8di3JvXp_6nquads:
  883|  60.0k|    pub fn as_ref(&self) -> GraphNameRef<'_> {
  884|  60.0k|        match self {
  885|  17.1k|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.as_ref()),
  886|  11.4k|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.as_ref()),
  887|  31.4k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  888|       |        }
  889|  60.0k|    }
_RNvMs1g_NtCsal5YaZOfl0H_5oxrdf6tripleNtB6_12GraphNameRef16is_default_graphCsg5j8di3JvXp_6nquads:
  966|  60.0k|    pub fn is_default_graph(&self) -> bool {
  967|  60.0k|        matches!(self, Self::DefaultGraph)
  968|  60.0k|    }
_RNvMs1q_NtCsal5YaZOfl0H_5oxrdf6tripleNtB6_4Quad6as_refCsg5j8di3JvXp_6nquads:
 1100|  60.0k|    pub fn as_ref(&self) -> QuadRef<'_> {
 1101|  60.0k|        QuadRef {
 1102|  60.0k|            subject: self.subject.as_ref(),
 1103|  60.0k|            predicate: self.predicate.as_ref(),
 1104|  60.0k|            object: self.object.as_ref(),
 1105|  60.0k|            graph_name: self.graph_name.as_ref(),
 1106|  60.0k|        }
 1107|  60.0k|    }
_RNvMsc_NtCsal5YaZOfl0H_5oxrdf6tripleNtB5_7Subject6as_refCsg5j8di3JvXp_6nquads:
  181|  60.0k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  60.0k|        match self {
  183|  46.9k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|  13.0k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|      0|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  60.0k|    }
_RNvMsy_NtCsal5YaZOfl0H_5oxrdf6tripleNtB5_4Term6as_refCsg5j8di3JvXp_6nquads:
  417|  60.0k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|  60.0k|        match self {
  419|  33.0k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|  13.1k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  13.7k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|     41|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|  60.0k|    }
_RNvXs1Q_NtCsal5YaZOfl0H_5oxrdf6tripleNtB6_7SubjectNtNtCsaXZRpaJvnVB_4core3cmp9PartialEq2eqCsg5j8di3JvXp_6nquads:
  155|   120k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1h_NtCsal5YaZOfl0H_5oxrdf6tripleNtB6_12GraphNameRefNtNtCsaXZRpaJvnVB_4core3fmt7Display3fmtCsg5j8di3JvXp_6nquads:
  982|  28.5k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  983|  28.5k|        match self {
  984|  17.1k|            Self::NamedNode(node) => node.fmt(f),
  985|  11.4k|            Self::BlankNode(node) => node.fmt(f),
  986|      0|            Self::DefaultGraph => write!(f, "DEFAULT"),
  987|       |        }
  988|  28.5k|    }
_RNvXs1u_NtCsal5YaZOfl0H_5oxrdf6tripleNtB6_7QuadRefNtNtCsaXZRpaJvnVB_4core3fmt7Display3fmtCsg5j8di3JvXp_6nquads:
 1190|  60.0k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1191|  60.0k|        if self.graph_name.is_default_graph() {
 1192|  31.4k|            write!(f, "{} {} {}", self.subject, self.predicate, self.object)
 1193|       |        } else {
 1194|  28.5k|            write!(
 1195|  28.5k|                f,
 1196|  28.5k|                "{} {} {} {}",
 1197|  28.5k|                self.subject, self.predicate, self.object, self.graph_name
 1198|  28.5k|            )
 1199|       |        }
 1200|  60.0k|    }
_RNvXs1w_NtCsal5YaZOfl0H_5oxrdf6tripleNtB6_7QuadRefINtNtCsaXZRpaJvnVB_4core7convert4FromRNtB6_4QuadE4fromCsg5j8di3JvXp_6nquads:
 1216|  60.0k|    fn from(quad: &'a Quad) -> Self {
 1217|  60.0k|        quad.as_ref()
 1218|  60.0k|    }
_RNvXs25_NtCsal5YaZOfl0H_5oxrdf6tripleNtB6_4TermNtNtCsaXZRpaJvnVB_4core3cmp9PartialEq2eqCsg5j8di3JvXp_6nquads:
  385|   120k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2Q_NtCsal5YaZOfl0H_5oxrdf6tripleNtB6_4QuadNtNtCsaXZRpaJvnVB_4core3cmp9PartialEq2eqCsg5j8di3JvXp_6nquads:
 1067|   120k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2k_NtCsal5YaZOfl0H_5oxrdf6tripleNtB6_6TripleNtNtCsaXZRpaJvnVB_4core3cmp9PartialEq2eqCsg5j8di3JvXp_6nquads:
  714|    104|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2z_NtCsal5YaZOfl0H_5oxrdf6tripleNtB6_9GraphNameNtNtCsaXZRpaJvnVB_4core3cmp9PartialEq2eqCsg5j8di3JvXp_6nquads:
  858|   120k|#[derive(Eq, PartialEq, Debug, Clone, Hash, Default)]
_RNvXsO_NtCsal5YaZOfl0H_5oxrdf6tripleNtB5_7TermRefNtNtCsaXZRpaJvnVB_4core3fmt7Display3fmtCsg5j8di3JvXp_6nquads:
  584|  60.0k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  585|  60.0k|        match self {
  586|  33.0k|            Self::NamedNode(node) => node.fmt(f),
  587|  13.1k|            Self::BlankNode(node) => node.fmt(f),
  588|  13.7k|            Self::Literal(literal) => literal.fmt(f),
  589|       |            #[cfg(feature = "rdf-star")]
  590|     41|            Self::Triple(triple) => {
  591|     41|                write!(f, "<<{triple}>>")
  592|       |            }
  593|       |        }
  594|  60.0k|    }
_RNvXso_NtCsal5YaZOfl0H_5oxrdf6tripleNtB5_10SubjectRefNtNtCsaXZRpaJvnVB_4core3fmt7Display3fmtCsg5j8di3JvXp_6nquads:
  306|  60.0k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  307|  60.0k|        match self {
  308|  46.9k|            Self::NamedNode(node) => node.fmt(f),
  309|  13.0k|            Self::BlankNode(node) => node.fmt(f),
  310|       |            #[cfg(feature = "rdf-star")]
  311|      0|            Self::Triple(triple) => write!(f, "<<{triple}>>"),
  312|       |        }
  313|  60.0k|    }
_RNvXs1a_NtCsal5YaZOfl0H_5oxrdf6tripleNtB6_9GraphNameINtNtCsaXZRpaJvnVB_4core7convert4FromNtNtB8_10named_node9NamedNodeE4fromCs6v03uY4lCtp_5oxttl:
  901|  51.3k|    fn from(node: NamedNode) -> Self {
  902|  51.3k|        Self::NamedNode(node)
  903|  51.3k|    }
_RNvXs1c_NtCsal5YaZOfl0H_5oxrdf6tripleNtB6_9GraphNameINtNtCsaXZRpaJvnVB_4core7convert4FromNtNtB8_10blank_node9BlankNodeE4fromCs6v03uY4lCtp_5oxttl:
  915|  34.4k|    fn from(node: BlankNode) -> Self {
  916|  34.4k|        Self::BlankNode(node)
  917|  34.4k|    }
_RNvMsc_NtCsal5YaZOfl0H_5oxrdf6tripleNtB5_7Subject6as_refB7_:
  181|     52|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|     52|        match self {
  183|     52|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|      0|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|      0|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|     52|    }
_RNvXse_NtCsal5YaZOfl0H_5oxrdf6tripleNtB5_7SubjectINtNtCsaXZRpaJvnVB_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|   211k|    fn from(node: NamedNode) -> Self {
  201|   211k|        Self::NamedNode(node)
  202|   211k|    }
_RNvXsg_NtCsal5YaZOfl0H_5oxrdf6tripleNtB5_7SubjectINtNtCsaXZRpaJvnVB_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|  73.6k|    fn from(node: BlankNode) -> Self {
  215|  73.6k|        Self::BlankNode(node)
  216|  73.6k|    }
_RNvXsi_NtCsal5YaZOfl0H_5oxrdf6tripleNtB5_7SubjectINtNtCsaXZRpaJvnVB_4core7convert4FromNtB5_6TripleE4fromB7_:
  229|    506|    fn from(node: Triple) -> Self {
  230|    506|        Self::Triple(Box::new(node))
  231|    506|    }
_RNvXso_NtCsal5YaZOfl0H_5oxrdf6tripleNtB5_10SubjectRefNtNtCsaXZRpaJvnVB_4core3fmt7Display3fmtB7_:
  306|     52|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  307|     52|        match self {
  308|     52|            Self::NamedNode(node) => node.fmt(f),
  309|      0|            Self::BlankNode(node) => node.fmt(f),
  310|       |            #[cfg(feature = "rdf-star")]
  311|      0|            Self::Triple(triple) => write!(f, "<<{triple}>>"),
  312|       |        }
  313|     52|    }
_RNvMsy_NtCsal5YaZOfl0H_5oxrdf6tripleNtB5_4Term6as_refB7_:
  417|     52|    pub fn as_ref(&self) -> TermRef<'_> {
  418|     52|        match self {
  419|     41|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|      0|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|      0|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|     11|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|     52|    }
_RNvXsA_NtCsal5YaZOfl0H_5oxrdf6tripleNtB5_4TermINtNtCsaXZRpaJvnVB_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|   103k|    fn from(node: NamedNode) -> Self {
  438|   103k|        Self::NamedNode(node)
  439|   103k|    }
_RNvXsC_NtCsal5YaZOfl0H_5oxrdf6tripleNtB5_4TermINtNtCsaXZRpaJvnVB_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  451|  43.9k|    fn from(node: BlankNode) -> Self {
  452|  43.9k|        Self::BlankNode(node)
  453|  43.9k|    }
_RNvXsE_NtCsal5YaZOfl0H_5oxrdf6tripleNtB5_4TermINtNtCsaXZRpaJvnVB_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  465|  54.9k|    fn from(literal: Literal) -> Self {
  466|  54.9k|        Self::Literal(literal)
  467|  54.9k|    }
_RNvXsG_NtCsal5YaZOfl0H_5oxrdf6tripleNtB5_4TermINtNtCsaXZRpaJvnVB_4core7convert4FromNtB5_6TripleE4fromB7_:
  480|    188|    fn from(triple: Triple) -> Self {
  481|    188|        Self::Triple(Box::new(triple))
  482|    188|    }
_RNvXsO_NtCsal5YaZOfl0H_5oxrdf6tripleNtB5_7TermRefNtNtCsaXZRpaJvnVB_4core3fmt7Display3fmtB7_:
  584|     52|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  585|     52|        match self {
  586|     41|            Self::NamedNode(node) => node.fmt(f),
  587|      0|            Self::BlankNode(node) => node.fmt(f),
  588|      0|            Self::Literal(literal) => literal.fmt(f),
  589|       |            #[cfg(feature = "rdf-star")]
  590|     11|            Self::Triple(triple) => {
  591|     11|                write!(f, "<<{triple}>>")
  592|       |            }
  593|       |        }
  594|     52|    }
_RNvMs12_NtCsal5YaZOfl0H_5oxrdf6tripleNtB6_6Triple6as_refB8_:
  753|     52|    pub fn as_ref(&self) -> TripleRef<'_> {
  754|     52|        TripleRef {
  755|     52|            subject: self.subject.as_ref(),
  756|     52|            predicate: self.predicate.as_ref(),
  757|     52|            object: self.object.as_ref(),
  758|     52|        }
  759|     52|    }
_RNvXs13_NtCsal5YaZOfl0H_5oxrdf6tripleNtB6_6TripleNtNtCsaXZRpaJvnVB_4core3fmt7Display3fmtB8_:
  764|     52|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  765|     52|        self.as_ref().fmt(f)
  766|     52|    }
_RNvXs15_NtCsal5YaZOfl0H_5oxrdf6tripleNtB6_9TripleRefNtNtCsaXZRpaJvnVB_4core3fmt7Display3fmtB8_:
  837|     52|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  838|     52|        write!(f, "{} {} {}", self.subject, self.predicate, self.object)
  839|     52|    }

_RNvXNtCs6v03uY4lCtp_5oxttl5lexerNtB2_7N3LexerNtNtNtB4_7toolkit5lexer15TokenRecognizer20recognize_next_token:
   55|  33.2M|    fn recognize_next_token<'a>(
   56|  33.2M|        &mut self,
   57|  33.2M|        data: &'a [u8],
   58|  33.2M|        is_ending: bool,
   59|  33.2M|        options: &Self::Options,
   60|  33.2M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
   61|  33.2M|        match *data.first()? {
   62|  7.68M|            b'<' => match *data.get(1)? {
   63|  1.90M|                b'<' => Some((2, Ok(N3Token::Punctuation("<<")))),
   64|  63.0k|                b'=' if self.mode == N3LexerMode::N3 => {
   65|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   66|      0|                        Some(if let Ok(result) = result {
   67|      0|                            (consumed, Ok(result))
   68|       |                        } else {
   69|      0|                            (2, Ok(N3Token::Punctuation("<=")))
   70|       |                        })
   71|      0|                    } else if is_ending {
   72|      0|                        Some((2, Ok(N3Token::Punctuation("<="))))
   73|       |                    } else {
   74|      0|                        None
   75|       |                    }
   76|       |                }
   77|  22.2k|                b'-' if self.mode == N3LexerMode::N3 => {
   78|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   79|      0|                        Some(if let Ok(result) = result {
   80|      0|                            (consumed, Ok(result))
   81|       |                        } else {
   82|      0|                            (2, Ok(N3Token::Punctuation("<-")))
   83|       |                        })
   84|      0|                    } else if is_ending {
   85|      0|                        Some((2, Ok(N3Token::Punctuation("<-"))))
   86|       |                    } else {
   87|      0|                        None
   88|       |                    }
   89|       |                }
   90|  5.65M|                _ => self.recognize_iri(data, options),
   91|       |            },
   92|       |            b'>' => {
   93|   716k|                if *data.get(1)? == b'>' {
   94|   398k|                    Some((2, Ok(N3Token::Punctuation(">>"))))
   95|       |                } else {
   96|   269k|                    Some((1, Ok(N3Token::Punctuation(">"))))
   97|       |                }
   98|       |            }
   99|  1.41M|            b'_' => match data.get(1)? {
  100|   846k|                b':' => Self::recognize_blank_node_label(data),
  101|   459k|                c => Some((
  102|   459k|                    1,
  103|   459k|                    Err((0, format!("Unexpected character '{}'", char::from(*c))).into()),
  104|   459k|                )),
  105|       |            },
  106|       |            b'"' => {
  107|  1.01M|                if self.mode != N3LexerMode::NTriples
  108|      0|                    && *data.get(1)? == b'"'
  109|      0|                    && *data.get(2)? == b'"'
  110|       |                {
  111|      0|                    Self::recognize_long_string(data, b'"')
  112|       |                } else {
  113|  1.01M|                    Self::recognize_string(data, b'"')
  114|       |                }
  115|       |            }
  116|  67.8k|            b'\'' if self.mode != N3LexerMode::NTriples => {
  117|      0|                if *data.get(1)? == b'\'' && *data.get(2)? == b'\'' {
  118|      0|                    Self::recognize_long_string(data, b'\'')
  119|       |                } else {
  120|      0|                    Self::recognize_string(data, b'\'')
  121|       |                }
  122|       |            }
  123|  1.05M|            b'@' => self.recognize_lang_tag(data),
  124|  2.05M|            b'.' => match data.get(1) {
  125|   347k|                Some(b'0'..=b'9') => Self::recognize_number(data),
  126|  1.88M|                Some(_) => Some((1, Ok(N3Token::Punctuation(".")))),
  127|   116k|                None => is_ending.then_some((1, Ok(N3Token::Punctuation(".")))),
  128|       |            },
  129|       |            b'^' => {
  130|   386k|                if *data.get(1)? == b'^' {
  131|   212k|                    Some((2, Ok(N3Token::Punctuation("^^"))))
  132|       |                } else {
  133|   123k|                    Some((1, Ok(N3Token::Punctuation("^"))))
  134|       |                }
  135|       |            }
  136|   146k|            b'(' => Some((1, Ok(N3Token::Punctuation("(")))),
  137|  83.5k|            b')' => Some((1, Ok(N3Token::Punctuation(")")))),
  138|  68.1k|            b'[' => Some((1, Ok(N3Token::Punctuation("[")))),
  139|  37.1k|            b']' => Some((1, Ok(N3Token::Punctuation("]")))),
  140|       |            b'{' => {
  141|  66.4k|                if *data.get(1)? == b'|' {
  142|  3.50k|                    Some((2, Ok(N3Token::Punctuation("{|"))))
  143|       |                } else {
  144|  51.4k|                    Some((1, Ok(N3Token::Punctuation("{"))))
  145|       |                }
  146|       |            }
  147|   211k|            b'}' => Some((1, Ok(N3Token::Punctuation("}")))),
  148|   190k|            b',' => Some((1, Ok(N3Token::Punctuation(",")))),
  149|  81.3k|            b';' => Some((1, Ok(N3Token::Punctuation(";")))),
  150|  63.4k|            b'!' => Some((1, Ok(N3Token::Punctuation("!")))),
  151|       |            b'|' => {
  152|  93.6k|                if *data.get(1)? == b'}' {
  153|  4.59k|                    Some((2, Ok(N3Token::Punctuation("|}"))))
  154|       |                } else {
  155|  83.2k|                    Some((1, Ok(N3Token::Punctuation("|"))))
  156|       |                }
  157|       |            }
  158|       |            b'=' => {
  159|   247k|                if *data.get(1)? == b'>' {
  160|  13.9k|                    Some((2, Ok(N3Token::Punctuation("=>"))))
  161|       |                } else {
  162|   215k|                    Some((1, Ok(N3Token::Punctuation("="))))
  163|       |                }
  164|       |            }
  165|  8.17M|            b'0'..=b'9' | b'+' | b'-' => Self::recognize_number(data),
  166|   342k|            b'?' => self.recognize_variable(data, is_ending),
  167|  13.5M|            _ => self.recognize_pname_or_keyword(data, is_ending),
  168|       |        }
  169|  33.2M|    }
_RNvMs_NtCs6v03uY4lCtp_5oxttl5lexerNtB4_7N3Lexer3new:
  173|   239k|    pub fn new(mode: N3LexerMode, unchecked: bool) -> Self {
  174|   239k|        Self { mode, unchecked }
  175|   239k|    }
_RNvMs_NtCs6v03uY4lCtp_5oxttl5lexerNtB4_7N3Lexer13recognize_iri:
  177|  5.65M|    fn recognize_iri(
  178|  5.65M|        &self,
  179|  5.65M|        data: &[u8],
  180|  5.65M|        options: &N3LexerOptions,
  181|  5.65M|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  182|  5.65M|        // [18] IRIREF  ::=  '<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
  183|  5.65M|        let mut string = Vec::new();
  184|  5.65M|        let mut i = 1;
  185|       |        loop {
  186|  5.84M|            let end = memchr2(b'>', b'\\', &data[i..])?;
  187|  1.60M|            string.extend_from_slice(&data[i..i + end]);
  188|  1.60M|            i += end;
  189|  1.60M|            match data[i] {
  190|       |                b'>' => {
  191|       |                    #[allow(clippy::range_plus_one)]
  192|  1.14M|                    return Some((i + 1, self.parse_iri(string, 0..i + 1, options)));
  193|       |                }
  194|       |                b'\\' => {
  195|   457k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, false)?;
  196|   239k|                    i += additional + 1;
  197|   239k|                    match c {
  198|   184k|                        Ok(c) => {
  199|   184k|                            let mut buf = [0; 4];
  200|   184k|                            string.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  201|   184k|                        }
  202|  54.5k|                        Err(e) => return Some((i, Err(e))),
  203|       |                    }
  204|       |                }
  205|      0|                _ => unreachable!(),
  206|       |            }
  207|       |        }
  208|  5.65M|    }
_RNvMs_NtCs6v03uY4lCtp_5oxttl5lexerNtB4_7N3Lexer9parse_iri:
  210|  1.14M|    fn parse_iri(
  211|  1.14M|        &self,
  212|  1.14M|        iri: Vec<u8>,
  213|  1.14M|        position: Range<usize>,
  214|  1.14M|        options: &N3LexerOptions,
  215|  1.14M|    ) -> Result<N3Token<'static>, TokenRecognizerError> {
  216|  1.14M|        let iri = string_from_utf8(iri, position.clone())?;
  217|       |        Ok(N3Token::IriRef(
  218|  1.05M|            if let Some(base_iri) = options.base_iri.as_ref() {
  219|      0|                if self.unchecked {
  220|      0|                    base_iri.resolve_unchecked(&iri)
  221|       |                } else {
  222|      0|                    base_iri.resolve(&iri)
  223|       |                }
  224|      0|                .map_err(|e| (position, e.to_string()))?
  225|      0|                .into_inner()
  226|  1.05M|            } else if self.unchecked {
  227|    364|                iri
  228|       |            } else {
  229|  1.05M|                Iri::parse(iri)
  230|  1.05M|                    .map_err(|e| (position, e.to_string()))?
  231|   724k|                    .into_inner()
  232|       |            },
  233|       |        ))
  234|  1.14M|    }
_RNvMs_NtCs6v03uY4lCtp_5oxttl5lexerNtB4_7N3Lexer26recognize_pname_or_keyword:
  236|  13.5M|    fn recognize_pname_or_keyword<'a>(
  237|  13.5M|        &self,
  238|  13.5M|        data: &'a [u8],
  239|  13.5M|        is_ending: bool,
  240|  13.5M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  241|  13.5M|        // [139s]  PNAME_NS   ::=  PN_PREFIX? ':'
  242|  13.5M|        // [140s]  PNAME_LN   ::=  PNAME_NS PN_LOCAL
  243|  13.5M|        // [167s]  PN_PREFIX  ::=  PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
  244|  13.5M|        let mut i = 0;
  245|       |        loop {
  246|  27.3M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  247|  26.3M|                match r {
  248|  22.2M|                    Ok((c, consumed)) => {
  249|  22.2M|                        if c == ':' {
  250|  1.11M|                            i += consumed;
  251|  1.11M|                            break;
  252|  21.1M|                        } else if i == 0 {
  253|  8.78M|                            if !Self::is_possible_pn_chars_base(c) {
  254|  6.33M|                                return Some((
  255|  6.33M|                                    consumed,
  256|  6.33M|                                    Err((
  257|  6.33M|                                        0..consumed,
  258|  6.33M|                                        format!(
  259|  6.33M|                                            "'{c}' is not allowed at the beginning of a prefix name"
  260|  6.33M|                                        ),
  261|  6.33M|                                    )
  262|  6.33M|                                        .into()),
  263|  6.33M|                                ));
  264|  2.44M|                            }
  265|  2.44M|                            i += consumed;
  266|  12.3M|                        } else if Self::is_possible_pn_chars(c) || c == '.' {
  267|  11.3M|                            i += consumed;
  268|  11.3M|                        } else {
  269|  1.46M|                            while data[..i].ends_with(b".") {
  270|   492k|                                i -= 1;
  271|   492k|                            }
  272|   969k|                            return Some((
  273|   969k|                                i,
  274|   969k|                                str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  275|   969k|                            ));
  276|       |                        }
  277|       |                    }
  278|  4.16M|                    Err(e) => return Some((e.location.end, Err(e))),
  279|       |                }
  280|   962k|            } else if is_ending {
  281|  28.6k|                while data[..i].ends_with(b".") {
  282|  9.09k|                    i -= 1;
  283|  9.09k|                }
  284|  19.5k|                return Some(if i == 0 {
  285|  4.11k|                    (
  286|  4.11k|                        1,
  287|  4.11k|                        Err((0..1, format!("Unexpected byte {}", data[0])).into()),
  288|  4.11k|                    )
  289|       |                } else {
  290|  15.4k|                    (
  291|  15.4k|                        i,
  292|  15.4k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  293|  15.4k|                    )
  294|       |                });
  295|       |            } else {
  296|   942k|                return None;
  297|       |            }
  298|       |        }
  299|  1.11M|        let pn_prefix = match str_from_utf8(&data[..i - 1], 0..i - 1) {
  300|  1.11M|            Ok(pn_prefix) => pn_prefix,
  301|      0|            Err(e) => return Some((i, Err(e))),
  302|       |        };
  303|  1.11M|        if pn_prefix.ends_with('.') {
  304|  4.58k|            return Some((
  305|  4.58k|                i,
  306|  4.58k|                Err((
  307|  4.58k|                    0..i,
  308|  4.58k|                    format!(
  309|  4.58k|                        "'{pn_prefix}' is not a valid prefix: prefixes are not allowed to end with '.'"),
  310|  4.58k|                )
  311|  4.58k|                    .into()),
  312|  4.58k|            ));
  313|  1.10M|        }
  314|       |
  315|   288k|        let (consumed, pn_local_result) =
  316|  1.10M|            self.recognize_optional_pn_local(&data[i..], is_ending)?;
  317|   288k|        Some((
  318|   288k|            consumed + i,
  319|   288k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  320|       |                prefix: pn_prefix,
  321|       |                local,
  322|       |                might_be_invalid_iri,
  323|   288k|            }),
  324|   288k|        ))
  325|  13.5M|    }
_RNvMs_NtCs6v03uY4lCtp_5oxttl5lexerNtB4_7N3Lexer18recognize_variable:
  327|   342k|    fn recognize_variable<'a>(
  328|   342k|        &self,
  329|   342k|        data: &'a [u8],
  330|   342k|        is_ending: bool,
  331|   342k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  332|       |        // [36]  QUICK_VAR_NAME  ::=  "?" PN_LOCAL
  333|   342k|        let (consumed, result) = self.recognize_optional_pn_local(&data[1..], is_ending)?;
  334|   231k|        Some((
  335|   231k|            consumed + 1,
  336|   231k|            result.and_then(|(name, _)| {
  337|       |                if name.is_empty() {
  338|       |                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  339|       |                } else {
  340|       |                    Ok(N3Token::Variable(name))
  341|       |                }
  342|   231k|            }),
  343|   231k|        ))
  344|   342k|    }
_RNvMs_NtCs6v03uY4lCtp_5oxttl5lexerNtB4_7N3Lexer27recognize_optional_pn_local:
  346|  1.44M|    fn recognize_optional_pn_local<'a>(
  347|  1.44M|        &self,
  348|  1.44M|        data: &'a [u8],
  349|  1.44M|        is_ending: bool,
  350|  1.44M|    ) -> Option<(usize, Result<(Cow<'a, str>, bool), TokenRecognizerError>)> {
  351|  1.44M|        // [168s]  PN_LOCAL  ::=  (PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
  352|  1.44M|        let mut i = 0;
  353|  1.44M|        let mut buffer = None; // Buffer if there are some escaped characters
  354|  1.44M|        let mut position_that_is_already_in_buffer = 0;
  355|  1.44M|        let mut might_be_invalid_iri = false;
  356|  1.44M|        let mut ends_with_unescaped_dot = 0;
  357|       |        loop {
  358|  7.43M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  359|  6.59M|                match r {
  360|  6.52M|                    Ok((c, consumed)) => {
  361|  6.52M|                        if c == '%' {
  362|  49.9k|                            i += 1;
  363|  49.9k|                            let a = char::from(*data.get(i)?);
  364|  35.8k|                            i += 1;
  365|  35.8k|                            let b = char::from(*data.get(i)?);
  366|  26.3k|                            if !a.is_ascii_hexdigit() || !b.is_ascii_hexdigit() {
  367|  9.71k|                                return Some((i + 1, Err((
  368|  9.71k|                                    i - 2..=i, format!("escapes in IRIs should be % followed by two hexadecimal characters, found '%{a}{b}'")
  369|  9.71k|                                ).into())));
  370|  16.6k|                            }
  371|  16.6k|                            i += 1;
  372|  16.6k|                            ends_with_unescaped_dot = 0;
  373|  6.47M|                        } else if c == '\\' {
  374|   501k|                            i += 1;
  375|   501k|                            let a = char::from(*data.get(i)?);
  376|   424k|                            if self.unchecked
  377|   235k|                                || matches!(
  378|   424k|                                    a,
  379|       |                                    '_' | '~'
  380|       |                                        | '.'
  381|       |                                        | '-'
  382|       |                                        | '!'
  383|       |                                        | '$'
  384|       |                                        | '&'
  385|       |                                        | '\''
  386|       |                                        | '('
  387|       |                                        | ')'
  388|       |                                        | '*'
  389|       |                                        | '+'
  390|       |                                        | ','
  391|       |                                        | ';'
  392|       |                                        | '='
  393|       |                                )
  394|   188k|                            {
  395|   188k|                                // ok to escape
  396|   235k|                            } else if matches!(a, '/' | '?' | '#' | '@' | '%') {
  397|   225k|                                // ok to escape but requires IRI validation
  398|   225k|                                might_be_invalid_iri = true;
  399|   225k|                            } else {
  400|  10.3k|                                return Some((i + 1, Err((
  401|  10.3k|                                    i..=i, format!("The character that are allowed to be escaped in IRIs are _~.-!$&'()*+,;=/?#@%, found '{a}'")
  402|  10.3k|                                ).into())));
  403|       |                            }
  404|   414k|                            let buffer = buffer.get_or_insert_with(String::new);
  405|   414k|                            // We add the missing bytes
  406|   414k|                            if i - position_that_is_already_in_buffer > 1 {
  407|   286k|                                buffer.push_str(
  408|   286k|                                    match str_from_utf8(
  409|   286k|                                        &data[position_that_is_already_in_buffer..i - 1],
  410|   286k|                                        position_that_is_already_in_buffer..i - 1,
  411|   286k|                                    ) {
  412|   286k|                                        Ok(data) => data,
  413|      0|                                        Err(e) => return Some((i, Err(e))),
  414|       |                                    },
  415|       |                                )
  416|   127k|                            }
  417|   414k|                            buffer.push(a);
  418|   414k|                            i += 1;
  419|   414k|                            position_that_is_already_in_buffer = i;
  420|   414k|                            ends_with_unescaped_dot = 0;
  421|  5.96M|                        } else if i == 0 {
  422|   922k|                            if !(Self::is_possible_pn_chars_u(c) || c == ':' || c.is_ascii_digit())
  423|       |                            {
  424|   284k|                                return Some((0, Ok((Cow::Borrowed(""), false))));
  425|   637k|                            }
  426|   637k|                            if !self.unchecked {
  427|       |                                might_be_invalid_iri |=
  428|   637k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  429|   637k|                                        || c == ':';
  430|      0|                            }
  431|   637k|                            i += consumed;
  432|  5.04M|                        } else if Self::is_possible_pn_chars(c) || c == ':' {
  433|  4.46M|                            if !self.unchecked {
  434|       |                                might_be_invalid_iri |=
  435|  4.46M|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  436|  4.46M|                                        || c == ':';
  437|      0|                            }
  438|  4.46M|                            i += consumed;
  439|  4.46M|                            ends_with_unescaped_dot = 0;
  440|   586k|                        } else if c == '.' {
  441|   451k|                            i += consumed;
  442|   451k|                            ends_with_unescaped_dot += 1;
  443|   451k|                        } else {
  444|   134k|                            let buffer = if let Some(mut buffer) = buffer {
  445|  46.4k|                                buffer.push_str(
  446|  46.4k|                                    match str_from_utf8(
  447|  46.4k|                                        &data[position_that_is_already_in_buffer..i],
  448|  46.4k|                                        position_that_is_already_in_buffer..i,
  449|  46.4k|                                    ) {
  450|  46.4k|                                        Ok(data) => data,
  451|      0|                                        Err(e) => return Some((i, Err(e))),
  452|       |                                    },
  453|       |                                );
  454|       |                                // We do not include the last dots
  455|  46.4k|                                for _ in 0..ends_with_unescaped_dot {
  456|  22.6k|                                    buffer.pop();
  457|  22.6k|                                }
  458|  46.4k|                                i -= ends_with_unescaped_dot;
  459|  46.4k|                                Cow::Owned(buffer)
  460|       |                            } else {
  461|  87.7k|                                let mut data = match str_from_utf8(&data[..i], 0..i) {
  462|  87.7k|                                    Ok(data) => data,
  463|      0|                                    Err(e) => return Some((i, Err(e))),
  464|       |                                };
  465|       |                                // We do not include the last dots
  466|  87.7k|                                data = &data[..data.len() - ends_with_unescaped_dot];
  467|  87.7k|                                i -= ends_with_unescaped_dot;
  468|  87.7k|                                Cow::Borrowed(data)
  469|       |                            };
  470|   134k|                            return Some((i, Ok((buffer, might_be_invalid_iri))));
  471|       |                        }
  472|       |                    }
  473|  75.5k|                    Err(e) => return Some((e.location.end, Err(e))),
  474|       |                }
  475|   834k|            } else if is_ending {
  476|  6.18k|                let buffer = if let Some(mut buffer) = buffer {
  477|       |                    // We do not include the last dot
  478|  6.55k|                    while buffer.ends_with('.') {
  479|  3.95k|                        buffer.pop();
  480|  3.95k|                        i -= 1;
  481|  3.95k|                    }
  482|  2.60k|                    Cow::Owned(buffer)
  483|       |                } else {
  484|  3.57k|                    let mut data = match str_from_utf8(&data[..i], 0..i) {
  485|  3.57k|                        Ok(data) => data,
  486|      0|                        Err(e) => return Some((i, Err(e))),
  487|       |                    };
  488|       |                    // We do not include the last dot
  489|  7.92k|                    while let Some(d) = data.strip_suffix('.') {
  490|  4.35k|                        data = d;
  491|  4.35k|                        i -= 1;
  492|  4.35k|                    }
  493|  3.57k|                    Cow::Borrowed(data)
  494|       |                };
  495|  6.18k|                return Some((i, Ok((buffer, might_be_invalid_iri))));
  496|       |            } else {
  497|   827k|                return None;
  498|       |            }
  499|       |        }
  500|  1.44M|    }
_RNvMs_NtCs6v03uY4lCtp_5oxttl5lexerNtB4_7N3Lexer26recognize_blank_node_label:
  502|   846k|    fn recognize_blank_node_label(
  503|   846k|        data: &[u8],
  504|   846k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  505|   846k|        // [141s]  BLANK_NODE_LABEL  ::=  '_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
  506|   846k|        let mut i = 2;
  507|       |        loop {
  508|  7.72M|            match Self::recognize_unicode_char(&data[i..], i)? {
  509|  7.09M|                Ok((c, consumed)) => {
  510|  7.09M|                    if (i == 2 && (Self::is_possible_pn_chars_u(c) || c.is_ascii_digit()))
  511|  6.32M|                        || (i > 2 && Self::is_possible_pn_chars(c))
  512|  6.83M|                    {
  513|  6.83M|                        // Ok
  514|  6.83M|                    } else if i > 2 && c == '.' {
  515|  55.9k|                        if data[i - 1] == b'.' {
  516|  6.44k|                            i -= 1;
  517|  6.44k|                            return Some((
  518|  6.44k|                                i,
  519|  6.44k|                                str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  520|  6.44k|                            ));
  521|  49.4k|                        }
  522|   202k|                    } else if i == 0 {
  523|      0|                        return Some((
  524|      0|                            i,
  525|      0|                            Err((0..i, "A blank node ID should not be empty").into()),
  526|      0|                        ));
  527|   202k|                    } else if data[i - 1] == b'.' {
  528|  4.59k|                        i -= 1;
  529|  4.59k|                        return Some((
  530|  4.59k|                            i,
  531|  4.59k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  532|  4.59k|                        ));
  533|       |                    } else {
  534|   197k|                        return Some((
  535|   197k|                            i,
  536|   197k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  537|   197k|                        ));
  538|       |                    }
  539|  6.88M|                    i += consumed;
  540|       |                }
  541|  8.33k|                Err(e) => return Some((e.location.end, Err(e))),
  542|       |            }
  543|       |        }
  544|   846k|    }
_RNvMs_NtCs6v03uY4lCtp_5oxttl5lexerNtB4_7N3Lexer18recognize_lang_tag:
  546|  1.05M|    fn recognize_lang_tag<'a>(
  547|  1.05M|        &self,
  548|  1.05M|        data: &'a [u8],
  549|  1.05M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  550|  1.05M|        // [144s]  LANGTAG  ::=  '@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
  551|  1.05M|        let mut is_last_block_empty = true;
  552|  4.47M|        for (i, c) in data[1..].iter().enumerate() {
  553|  4.47M|            if c.is_ascii_alphabetic() {
  554|  3.31M|                is_last_block_empty = false;
  555|  3.31M|            } else if i == 0 {
  556|   430k|                return Some((
  557|   430k|                    1,
  558|   430k|                    Err((1..2, "A language code should always start with a letter").into()),
  559|   430k|                ));
  560|   732k|            } else if is_last_block_empty {
  561|  19.1k|                return Some((i, self.parse_lang_tag(&data[1..i], 1..i - 1)));
  562|   713k|            } else if *c == b'-' {
  563|   437k|                is_last_block_empty = true;
  564|   437k|            } else {
  565|   275k|                return Some((i + 1, self.parse_lang_tag(&data[1..=i], 1..i)));
  566|       |            }
  567|       |        }
  568|   332k|        None
  569|  1.05M|    }
_RNvMs_NtCs6v03uY4lCtp_5oxttl5lexerNtB4_7N3Lexer14parse_lang_tag:
  571|   294k|    fn parse_lang_tag<'a>(
  572|   294k|        &self,
  573|   294k|        lang_tag: &'a [u8],
  574|   294k|        position: Range<usize>,
  575|   294k|    ) -> Result<N3Token<'a>, TokenRecognizerError> {
  576|   294k|        let lang_tag = str_from_utf8(lang_tag, position.clone())?;
  577|   294k|        Ok(N3Token::LangTag(if self.unchecked {
  578|      1|            lang_tag
  579|       |        } else {
  580|   294k|            LanguageTag::parse(lang_tag)
  581|   294k|                .map_err(|e| (position.clone(), e.to_string()))?
  582|   172k|                .into_inner()
  583|       |        }))
  584|   294k|    }
_RNvMs_NtCs6v03uY4lCtp_5oxttl5lexerNtB4_7N3Lexer16recognize_string:
  586|  1.01M|    fn recognize_string(
  587|  1.01M|        data: &[u8],
  588|  1.01M|        delimiter: u8,
  589|  1.01M|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  590|  1.01M|        // [22]  STRING_LITERAL_QUOTE         ::=  '"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
  591|  1.01M|        // [23]  STRING_LITERAL_SINGLE_QUOTE  ::=  "'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
  592|  1.01M|        let mut string = String::new();
  593|  1.01M|        let mut i = 1;
  594|       |        loop {
  595|  1.72M|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  596|  1.31M|            match str_from_utf8(&data[i..i + end], i..i + end) {
  597|  1.28M|                Ok(s) => string.push_str(s),
  598|  29.7k|                Err(e) => return Some((end, Err(e))),
  599|       |            };
  600|  1.28M|            i += end;
  601|  1.28M|            match data[i] {
  602|  1.28M|                c if c == delimiter => {
  603|   343k|                    return Some((i + 1, Ok(N3Token::String(string))));
  604|       |                }
  605|       |                b'\\' => {
  606|   944k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  607|   916k|                    i += additional + 1;
  608|   916k|                    match c {
  609|   717k|                        Ok(c) => {
  610|   717k|                            string.push(c);
  611|   717k|                        }
  612|   199k|                        Err(e) => {
  613|       |                            // We read until the end of string char
  614|   199k|                            let end = memchr(delimiter, &data[i..])?;
  615|  18.5k|                            return Some((i + end + 1, Err(e)));
  616|       |                        }
  617|       |                    }
  618|       |                }
  619|      0|                _ => unreachable!(),
  620|       |            }
  621|       |        }
  622|  1.01M|    }
_RNvMs_NtCs6v03uY4lCtp_5oxttl5lexerNtB4_7N3Lexer16recognize_number:
  662|  1.20M|    fn recognize_number(data: &[u8]) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  663|  1.20M|        // [19]  INTEGER    ::=  [+-]? [0-9]+
  664|  1.20M|        // [20]  DECIMAL    ::=  [+-]? [0-9]* '.' [0-9]+
  665|  1.20M|        // [21]  DOUBLE     ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  666|  1.20M|        // [154s] EXPONENT  ::=  [eE] [+-]? [0-9]+
  667|  1.20M|        let mut i = 0;
  668|  1.20M|        let c = *data.first()?;
  669|  1.20M|        if matches!(c, b'+' | b'-') {
  670|   532k|            i += 1;
  671|   674k|        }
  672|       |        // We read the digits before .
  673|  1.20M|        let mut count_before: usize = 0;
  674|       |        loop {
  675|  3.73M|            let c = *data.get(i)?;
  676|  3.48M|            if c.is_ascii_digit() {
  677|  2.53M|                i += 1;
  678|  2.53M|                count_before += 1;
  679|  2.53M|            } else {
  680|   958k|                break;
  681|       |            }
  682|       |        }
  683|       |
  684|       |        // We read the digits after .
  685|       |        #[allow(clippy::if_then_some_else_none)]
  686|   958k|        let count_after = if *data.get(i)? == b'.' {
  687|  93.2k|            i += 1;
  688|  93.2k|
  689|  93.2k|            let mut count_after = 0;
  690|       |            loop {
  691|   845k|                let c = *data.get(i)?;
  692|   798k|                if c.is_ascii_digit() {
  693|   752k|                    i += 1;
  694|   752k|                    count_after += 1;
  695|   752k|                } else {
  696|  46.0k|                    break;
  697|  46.0k|                }
  698|  46.0k|            }
  699|  46.0k|            Some(count_after)
  700|       |        } else {
  701|   865k|            None
  702|       |        };
  703|       |
  704|       |        // End
  705|   911k|        let c = *data.get(i)?;
  706|   911k|        if matches!(c, b'e' | b'E') {
  707|  98.4k|            i += 1;
  708|       |
  709|  98.4k|            let c = *data.get(i)?;
  710|  62.6k|            if matches!(c, b'+' | b'-') {
  711|  3.39k|                i += 1;
  712|  59.2k|            }
  713|       |
  714|  62.6k|            let mut found = false;
  715|       |            loop {
  716|   219k|                let c = *data.get(i)?;
  717|   191k|                if c.is_ascii_digit() {
  718|   156k|                    i += 1;
  719|   156k|                    found = true;
  720|   156k|                } else {
  721|  34.5k|                    break;
  722|  34.5k|                }
  723|  34.5k|            }
  724|  34.5k|            Some((
  725|  34.5k|                i,
  726|  34.5k|                if !found {
  727|  14.7k|                    Err((0..i, "A double exponent cannot be empty").into())
  728|  19.8k|                } else if count_before == 0 && count_after.unwrap_or(0) == 0 {
  729|  7.68k|                    Err((0..i, "A double should not be empty").into())
  730|       |                } else {
  731|  12.1k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Double)
  732|       |                },
  733|       |            ))
  734|   813k|        } else if let Some(count_after) = count_after {
  735|  40.7k|            if count_after == 0 {
  736|       |                // We do not consume the '.' after all
  737|  13.5k|                i -= 1;
  738|  13.5k|                Some((
  739|  13.5k|                    i,
  740|  13.5k|                    if count_before == 0 {
  741|  4.94k|                        Err((0..i, "An integer should not be empty").into())
  742|       |                    } else {
  743|  8.61k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  744|       |                    },
  745|       |                ))
  746|       |            } else {
  747|  27.1k|                Some((i, str_from_utf8(&data[..i], 0..i).map(N3Token::Decimal)))
  748|       |            }
  749|       |        } else {
  750|       |            Some((
  751|   772k|                i,
  752|   772k|                if count_before == 0 {
  753|   359k|                    Err((0..i, "An integer should not be empty").into())
  754|       |                } else {
  755|   413k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  756|       |                },
  757|       |            ))
  758|       |        }
  759|  1.20M|    }
_RNvMs_NtCs6v03uY4lCtp_5oxttl5lexerNtB4_7N3Lexer16recognize_escape:
  761|  1.40M|    fn recognize_escape(
  762|  1.40M|        data: &[u8],
  763|  1.40M|        position: usize,
  764|  1.40M|        with_echar: bool,
  765|  1.40M|    ) -> Option<(usize, Result<char, TokenRecognizerError>)> {
  766|  1.40M|        // [26]   UCHAR  ::=  '\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
  767|  1.40M|        // [159s] ECHAR  ::=  '\' [tbnrf"'\]
  768|  1.40M|        match *data.get(1)? {
  769|   379k|            b'u' => match Self::recognize_hex_char(&data[2..], 4, 'u', position) {
  770|   347k|                Ok(c) => Some((5, Ok(c?))),
  771|  31.9k|                Err(e) => Some((5, Err(e))),
  772|       |            },
  773|   371k|            b'U' => match Self::recognize_hex_char(&data[2..], 8, 'u', position) {
  774|   357k|                Ok(c) => Some((9, Ok(c?))),
  775|  13.5k|                Err(e) => Some((9, Err(e))),
  776|       |            },
  777|  34.2k|            b't' if with_echar => Some((1, Ok('\t'))),
  778|   205k|            b'b' if with_echar => Some((1, Ok('\x08'))),
  779|  46.6k|            b'n' if with_echar => Some((1, Ok('\n'))),
  780|  9.58k|            b'r' if with_echar => Some((1, Ok('\r'))),
  781|  16.9k|            b'f' if with_echar => Some((1, Ok('\x0C'))),
  782|  10.9k|            b'"' if with_echar => Some((1, Ok('"'))),
  783|  18.8k|            b'\'' if with_echar => Some((1, Ok('\''))),
  784|  46.3k|            b'\\' if with_echar => Some((1, Ok('\\'))),
  785|   208k|            c => Some((
  786|   208k|                1,
  787|   208k|                Err((
  788|   208k|                    position..position + 2,
  789|   208k|                    format!("Unexpected escape character '\\{}'", char::from(c)),
  790|   208k|                )
  791|   208k|                    .into()),
  792|   208k|            )), // TODO: read until end of string
  793|       |        }
  794|  1.40M|    }
_RNvMs_NtCs6v03uY4lCtp_5oxttl5lexerNtB4_7N3Lexer18recognize_hex_char:
  796|   750k|    fn recognize_hex_char(
  797|   750k|        data: &[u8],
  798|   750k|        len: usize,
  799|   750k|        escape_char: char,
  800|   750k|        position: usize,
  801|   750k|    ) -> Result<Option<char>, TokenRecognizerError> {
  802|   750k|        if data.len() < len {
  803|   192k|            return Ok(None);
  804|   557k|        }
  805|   557k|        let val = str_from_utf8(&data[..len], position..position + len + 2)?;
  806|   547k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  807|       |            (
  808|       |                position..position + len + 2,
  809|       |                format!(
  810|       |                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  811|       |                ),
  812|       |            )
  813|   547k|        })?;
  814|   528k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  815|       |            (
  816|       |                position..position + len +2,
  817|       |                format!(
  818|       |                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  819|       |                ),
  820|       |            )
  821|   528k|        })?;
  822|   512k|        Ok(Some(c))
  823|   750k|    }
_RNvMs_NtCs6v03uY4lCtp_5oxttl5lexerNtB4_7N3Lexer22recognize_unicode_char:
  825|  42.5M|    fn recognize_unicode_char(
  826|  42.5M|        data: &[u8],
  827|  42.5M|        position: usize,
  828|  42.5M|    ) -> Option<Result<(char, usize), TokenRecognizerError>> {
  829|  42.5M|        let mut code_point: u32;
  830|  42.5M|        let bytes_needed: usize;
  831|  42.5M|        let mut lower_boundary = 0x80;
  832|  42.5M|        let mut upper_boundary = 0xBF;
  833|       |
  834|  42.5M|        let byte = *data.first()?;
  835|  40.4M|        match byte {
  836|  40.4M|            0x00..=0x7F => return Some(Ok((char::from(byte), 1))),
  837|  2.67M|            0xC2..=0xDF => {
  838|   914k|                bytes_needed = 1;
  839|   914k|                code_point = u32::from(byte) & 0x1F;
  840|   914k|            }
  841|  1.75M|            0xE0..=0xEF => {
  842|   553k|                if byte == 0xE0 {
  843|   107k|                    lower_boundary = 0xA0;
  844|   446k|                }
  845|   553k|                if byte == 0xED {
  846|  20.8k|                    upper_boundary = 0x9F;
  847|   532k|                }
  848|   553k|                bytes_needed = 2;
  849|   553k|                code_point = u32::from(byte) & 0xF;
  850|       |            }
  851|  1.20M|            0xF0..=0xF4 => {
  852|   774k|                if byte == 0xF0 {
  853|   103k|                    lower_boundary = 0x90;
  854|   671k|                }
  855|   774k|                if byte == 0xF4 {
  856|   542k|                    upper_boundary = 0x8F;
  857|   542k|                }
  858|   774k|                bytes_needed = 3;
  859|   774k|                code_point = u32::from(byte) & 0x7;
  860|       |            }
  861|       |            _ => {
  862|  2.49M|                return Some(Err((
  863|  2.49M|                    position..=position,
  864|  2.49M|                    "Invalid UTF-8 character encoding",
  865|  2.49M|                )
  866|  2.49M|                    .into()))
  867|       |            }
  868|       |        }
  869|       |
  870|  2.35M|        for i in 1..=bytes_needed {
  871|  2.35M|            let byte = *data.get(i)?;
  872|  1.99M|            if byte < lower_boundary || upper_boundary < byte {
  873|  1.75M|                return Some(Err((
  874|  1.75M|                    position..=position + i,
  875|  1.75M|                    "Invalid UTF-8 character encoding",
  876|  1.75M|                )
  877|  1.75M|                    .into()));
  878|   237k|            }
  879|   237k|            lower_boundary = 0x80;
  880|   237k|            upper_boundary = 0xBF;
  881|   237k|            code_point = (code_point << 6) | (u32::from(byte) & 0x3F);
  882|       |        }
  883|       |
  884|   127k|        Some(
  885|   127k|            char::from_u32(code_point)
  886|   127k|                .map(|c| (c, bytes_needed + 1))
  887|   127k|                .ok_or_else(|| {
  888|       |                    (
  889|       |                        position..=position + bytes_needed,
  890|       |                        format!("The codepoint {code_point:X} is not a valid unicode character"),
  891|       |                    )
  892|       |                        .into()
  893|   127k|                }),
  894|   127k|        )
  895|  42.5M|    }
_RNvMs_NtCs6v03uY4lCtp_5oxttl5lexerNtB4_7N3Lexer25is_possible_pn_chars_base:
  898|  34.1M|    fn is_possible_pn_chars_base(c: char) -> bool {
  899|  34.1M|        matches!(c,
  900|  19.5M|        'A'..='Z'
  901|  7.43M|        | 'a'..='z'
  902|   104k|        | '\u{00C0}'..='\u{00D6}'
  903|  98.0k|        | '\u{00D8}'..='\u{00F6}'
  904|  95.0k|        | '\u{00F8}'..='\u{02FF}'
  905|  84.4k|        | '\u{0370}'..='\u{037D}'
  906|  84.4k|        | '\u{037F}'..='\u{1FFF}'
  907|  49.3k|        | '\u{200C}'..='\u{200D}'
  908|  49.3k|        | '\u{2070}'..='\u{218F}'
  909|  49.3k|        | '\u{2C00}'..='\u{2FEF}'
  910|  49.1k|        | '\u{3001}'..='\u{D7FF}'
  911|  17.7k|        | '\u{F900}'..='\u{FDCF}'
  912|  17.5k|        | '\u{FDF0}'..='\u{FFFD}'
  913|  17.4k|        | '\u{10000}'..='\u{EFFFF}')
  914|  34.1M|    }
_RNvMs_NtCs6v03uY4lCtp_5oxttl5lexerNtB4_7N3Lexer22is_possible_pn_chars_u:
  917|  25.3M|    fn is_possible_pn_chars_u(c: char) -> bool {
  918|  25.3M|        Self::is_possible_pn_chars_base(c) || c == '_'
  919|  25.3M|    }
_RNvMs_NtCs6v03uY4lCtp_5oxttl5lexerNtB4_7N3Lexer20is_possible_pn_chars:
  922|  23.6M|    fn is_possible_pn_chars(c: char) -> bool {
  923|  23.6M|        Self::is_possible_pn_chars_u(c)
  924|  8.09M|            || matches!(c,
  925|  5.28M|        '-' | '0'..='9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
  926|  23.6M|    }
_RNvMs_NtCs6v03uY4lCtp_5oxttl5lexerNtB4_7N3Lexer43is_possible_pn_chars_base_but_not_valid_iri:
  928|  5.09M|    fn is_possible_pn_chars_base_but_not_valid_iri(c: char) -> bool {
  929|  5.09M|        matches!(c, '\u{FFF0}'..='\u{FFFD}')
  930|  5.09M|            || u32::from(c) % u32::from('\u{FFFE}') == 0
  931|  5.09M|            || u32::from(c) % u32::from('\u{FFFF}') == 0
  932|  5.09M|    }
_RNvNtCs6v03uY4lCtp_5oxttl5lexer13str_from_utf8:
  957|  5.36M|fn str_from_utf8(data: &[u8], range: Range<usize>) -> Result<&str, TokenRecognizerError> {
  958|  5.36M|    str::from_utf8(data).map_err(|e| {
  959|       |        (
  960|       |            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  961|       |            format!("Invalid UTF-8: {e}"),
  962|       |        )
  963|       |            .into()
  964|  5.36M|    })
  965|  5.36M|}
_RNvNtCs6v03uY4lCtp_5oxttl5lexer16string_from_utf8:
  967|  1.14M|fn string_from_utf8(data: Vec<u8>, range: Range<usize>) -> Result<String, TokenRecognizerError> {
  968|  1.14M|    String::from_utf8(data).map_err(|e| {
  969|       |        (
  970|       |            range.start + e.utf8_error().valid_up_to()
  971|       |                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  972|       |            format!("Invalid UTF-8: {e}"),
  973|       |        )
  974|       |            .into()
  975|  1.14M|    })
  976|  1.14M|}
_RNvXs2_NtCs6v03uY4lCtp_5oxttl5lexerNtB5_7N3TokenNtNtCsaXZRpaJvnVB_4core3cmp9PartialEq2eqB7_:
   12|  7.22M|#[derive(Debug, PartialEq, Eq)]
_RNvXs8_NtCs6v03uY4lCtp_5oxttl5lexerNtB5_11N3LexerModeNtNtCsaXZRpaJvnVB_4core3cmp9PartialEq2eqB7_:
   31|  1.16M|#[derive(Eq, PartialEq)]
_RNvXs9_NtCs6v03uY4lCtp_5oxttl5lexerNtB5_14N3LexerOptionsNtNtCsaXZRpaJvnVB_4core7default7Default7defaultB7_:
   38|   239k|#[derive(Default)]
_RNCNvMs_NtCs6v03uY4lCtp_5oxttl5lexerNtB6_7N3Lexer9parse_iris_0B8_:
  230|   329k|                    .map_err(|e| (position, e.to_string()))?
_RNCNvMs_NtCs6v03uY4lCtp_5oxttl5lexerNtB6_7N3Lexer26recognize_pname_or_keyword0B8_:
  319|   213k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  320|   213k|                prefix: pn_prefix,
  321|   213k|                local,
  322|   213k|                might_be_invalid_iri,
  323|   213k|            }),
_RNCNvMs_NtCs6v03uY4lCtp_5oxttl5lexerNtB6_7N3Lexer18recognize_variable0B8_:
  336|   211k|            result.and_then(|(name, _)| {
  337|   211k|                if name.is_empty() {
  338|   164k|                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  339|       |                } else {
  340|  46.7k|                    Ok(N3Token::Variable(name))
  341|       |                }
  342|   211k|            }),
_RNCNvMs_NtCs6v03uY4lCtp_5oxttl5lexerNtB6_7N3Lexer14parse_lang_tag0B8_:
  581|   122k|                .map_err(|e| (position.clone(), e.to_string()))?
_RNCNvMs_NtCs6v03uY4lCtp_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_char0B8_:
  806|  18.9k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  807|  18.9k|            (
  808|  18.9k|                position..position + len + 2,
  809|  18.9k|                format!(
  810|  18.9k|                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  811|  18.9k|                ),
  812|  18.9k|            )
  813|  18.9k|        })?;
_RNCNvMs_NtCs6v03uY4lCtp_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_chars_0B8_:
  814|  16.5k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  815|  16.5k|            (
  816|  16.5k|                position..position + len +2,
  817|  16.5k|                format!(
  818|  16.5k|                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  819|  16.5k|                ),
  820|  16.5k|            )
  821|  16.5k|        })?;
_RNCNvMs_NtCs6v03uY4lCtp_5oxttl5lexerNtB6_7N3Lexer22recognize_unicode_char0B8_:
  886|   127k|                .map(|c| (c, bytes_needed + 1))
_RNCNvNtCs6v03uY4lCtp_5oxttl5lexer13str_from_utf80B5_:
  958|  39.7k|    str::from_utf8(data).map_err(|e| {
  959|  39.7k|        (
  960|  39.7k|            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  961|  39.7k|            format!("Invalid UTF-8: {e}"),
  962|  39.7k|        )
  963|  39.7k|            .into()
  964|  39.7k|    })
_RNCNvNtCs6v03uY4lCtp_5oxttl5lexer16string_from_utf80B5_:
  968|  87.6k|    String::from_utf8(data).map_err(|e| {
  969|  87.6k|        (
  970|  87.6k|            range.start + e.utf8_error().valid_up_to()
  971|  87.6k|                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  972|  87.6k|            format!("Invalid UTF-8: {e}"),
  973|  87.6k|        )
  974|  87.6k|            .into()
  975|  87.6k|    })

_RNvXNtCs6v03uY4lCtp_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer20error_recovery_state:
   46|  12.7M|    fn error_recovery_state(mut self) -> Self {
   47|  12.7M|        self.stack.clear();
   48|  12.7M|        self.subjects.clear();
   49|  12.7M|        self.predicates.clear();
   50|  12.7M|        self.objects.clear();
   51|  12.7M|        self
   52|  12.7M|    }
_RNvXNtCs6v03uY4lCtp_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer14recognize_next:
   54|  9.41M|    fn recognize_next(
   55|  9.41M|        mut self,
   56|  9.41M|        token: N3Token<'_>,
   57|  9.41M|        context: &mut NQuadsRecognizerContext,
   58|  9.41M|        results: &mut Vec<Quad>,
   59|  9.41M|        errors: &mut Vec<RuleRecognizerError>,
   60|  9.41M|    ) -> Self {
   61|  9.41M|        if let Some(state) = self.stack.pop() {
   62|  2.19M|            match state {
   63|   143k|                NQuadsState::ExpectSubject => match token {
   64|   211k|                    N3Token::IriRef(s) => {
   65|   211k|                        self.subjects
   66|   211k|                            .push(NamedNode::new_unchecked(s).into());
   67|   211k|                        self.stack.push(NQuadsState::ExpectPredicate);
   68|   211k|                        self
   69|       |                    }
   70|  73.6k|                    N3Token::BlankNodeLabel(s) => {
   71|  73.6k|                        self.subjects.push(BlankNode::new_unchecked(s).into());
   72|  73.6k|                        self.stack.push(NQuadsState::ExpectPredicate);
   73|  73.6k|                        self
   74|       |                    }
   75|       |                    #[cfg(feature = "rdf-star")]
   76|   933k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
   77|   143k|                        self.stack.push(NQuadsState::AfterQuotedSubject);
   78|   143k|                        self.stack.push(NQuadsState::ExpectSubject);
   79|   143k|                        self
   80|       |                    }
   81|   865k|                    _ => self.error(
   82|   865k|                        errors,
   83|   865k|                        "The subject of a triple should be an IRI or a blank node, TOKEN found",
   84|   865k|                    ),
   85|       |                },
   86|   261k|                NQuadsState::ExpectPredicate => match token {
   87|   235k|                    N3Token::IriRef(p) => {
   88|   235k|                        self.predicates
   89|   235k|                            .push(NamedNode::new_unchecked(p));
   90|   235k|                        self.stack.push(NQuadsState::ExpectedObject);
   91|   235k|                        self
   92|       |                    }
   93|  25.9k|                    _ => self.error(
   94|  25.9k|                        errors,
   95|  25.9k|                        "The predicate of a triple should be an IRI, TOKEN found",
   96|  25.9k|                    ),
   97|       |                },
   98|  8.69k|                NQuadsState::ExpectedObject => match token {
   99|   103k|                    N3Token::IriRef(o) => {
  100|   103k|                        self.objects
  101|   103k|                            .push(NamedNode::new_unchecked(o).into());
  102|   103k|                        self.stack
  103|   103k|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  104|   103k|                        self
  105|       |                    }
  106|  43.9k|                    N3Token::BlankNodeLabel(o) => {
  107|  43.9k|                        self.objects.push(BlankNode::new_unchecked(o).into());
  108|  43.9k|                        self.stack
  109|  43.9k|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  110|  43.9k|                        self
  111|       |                    }
  112|  64.5k|                    N3Token::String(value) => {
  113|  64.5k|                        self.stack
  114|  64.5k|                            .push(NQuadsState::ExpectLiteralAnnotationOrGraphNameOrDot { value });
  115|  64.5k|                        self
  116|       |                    }
  117|       |                    #[cfg(feature = "rdf-star")]
  118|  12.3k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  119|  8.69k|                        self.stack.push(NQuadsState::AfterQuotedObject);
  120|  8.69k|                        self.stack.push(NQuadsState::ExpectSubject);
  121|  8.69k|                        self
  122|       |                    }
  123|  6.51k|                    _ => self.error(
  124|  6.51k|                        errors,
  125|  6.51k|                        "The object of a triple should be an IRI, a blank node or a literal, TOKEN found",
  126|  6.51k|                    ),
  127|       |                },
  128|  60.8k|                NQuadsState::ExpectLiteralAnnotationOrGraphNameOrDot { value } => match token {
  129|  19.7k|                    N3Token::LangTag(lang_tag) => {
  130|  19.7k|                        self.objects.push(
  131|  19.7k|                            Literal::new_language_tagged_literal_unchecked(
  132|  19.7k|                                value,
  133|  19.7k|                                lang_tag.to_ascii_lowercase(),
  134|  19.7k|                            )
  135|  19.7k|                            .into(),
  136|  19.7k|                        );
  137|  19.7k|                        self.stack
  138|  19.7k|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  139|  19.7k|                        self
  140|       |                    }
  141|  27.6k|                    N3Token::Punctuation("^^") => {
  142|  15.9k|                        self.stack
  143|  15.9k|                            .push(NQuadsState::ExpectLiteralDatatype { value });
  144|  15.9k|                        self
  145|       |                    }
  146|       |                    _ => {
  147|  25.1k|                        self.objects.push(Literal::new_simple_literal(value).into());
  148|  25.1k|                        self.stack
  149|  25.1k|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  150|  25.1k|                        self.recognize_next(token, context, results, errors)
  151|       |                    }
  152|       |                },
  153|  13.7k|                NQuadsState::ExpectLiteralDatatype { value } => match token {
  154|  9.75k|                    N3Token::IriRef(d) => {
  155|  9.75k|                        self.objects.push(
  156|  9.75k|                            Literal::new_typed_literal(
  157|  9.75k|                                value,
  158|  9.75k|                                NamedNode::new_unchecked(d)
  159|  9.75k|                            )
  160|  9.75k|                            .into(),
  161|  9.75k|                        );
  162|  9.75k|                        self.stack
  163|  9.75k|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  164|  9.75k|                        self
  165|       |                    }
  166|  3.95k|                    _ => self.error(errors, "A literal datatype must be an IRI, found TOKEN"),
  167|       |                },
  168|       |                NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple => {
  169|   182k|                    if self.stack.is_empty() {
  170|  85.8k|                        match token {
  171|  51.3k|                            N3Token::IriRef(g) if context.with_graph_name => {
  172|  51.3k|                                self.emit_quad(
  173|  51.3k|                                    results,
  174|  51.3k|                                    NamedNode::new_unchecked(g).into(),
  175|  51.3k|                                );
  176|  51.3k|                                self.stack.push(NQuadsState::ExpectDot);
  177|  51.3k|                                self
  178|       |                            }
  179|  34.4k|                            N3Token::BlankNodeLabel(g) if context.with_graph_name => {
  180|  34.4k|                                self.emit_quad(results, BlankNode::new_unchecked(g).into());
  181|  34.4k|                                self.stack.push(NQuadsState::ExpectDot);
  182|  34.4k|                                self
  183|       |                            }
  184|       |                            _ => {
  185|  93.6k|                                self.emit_quad(results, GraphName::DefaultGraph);
  186|  93.6k|                                self.stack.push(NQuadsState::ExpectDot);
  187|  93.6k|                                self.recognize_next(token, context, results, errors)
  188|       |                            }
  189|       |                        }
  190|  2.76k|                    } else if token == N3Token::Punctuation(">>") {
  191|    744|                        self
  192|       |                    } else {
  193|  2.02k|                        self.error(errors, "Expecting the end of a quoted triple '>>'")
  194|       |                    }
  195|       |                }
  196|   150k|                NQuadsState::ExpectDot => if let N3Token::Punctuation(".") = token {
  197|  67.1k|                    self.stack.push(NQuadsState::ExpectSubject);
  198|  67.1k|                    self
  199|       |                } else {
  200|  83.7k|                    errors.push("Quads should be followed by a dot".into());
  201|  83.7k|                    self.stack.push(NQuadsState::ExpectSubject);
  202|  83.7k|                    self.recognize_next(token, context, results, errors)
  203|       |                },
  204|       |                #[cfg(feature = "rdf-star")]
  205|       |                NQuadsState::AfterQuotedSubject => {
  206|    506|                    let triple = Triple {
  207|    506|                        subject: self.subjects.pop().unwrap(),
  208|    506|                        predicate: self.predicates.pop().unwrap(),
  209|    506|                        object: self.objects.pop().unwrap(),
  210|    506|                    };
  211|    506|                    self.subjects.push(triple.into());
  212|    506|                    self.stack.push(NQuadsState::ExpectPredicate);
  213|    506|                    self.recognize_next(token,context,  results, errors)
  214|       |                }
  215|       |                #[cfg(feature = "rdf-star")]
  216|       |                NQuadsState::AfterQuotedObject => {
  217|    188|                    let triple = Triple {
  218|    188|                        subject: self.subjects.pop().unwrap(),
  219|    188|                        predicate: self.predicates.pop().unwrap(),
  220|    188|                        object: self.objects.pop().unwrap(),
  221|    188|                    };
  222|    188|                    self.objects.push(triple.into());
  223|    188|                    self.stack
  224|    188|                        .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  225|    188|                    self.recognize_next(token, context, results, errors)
  226|       |                }
  227|       |            }
  228|  7.22M|        } else if token == N3Token::Punctuation(".") {
  229|  1.14M|            self.stack.push(NQuadsState::ExpectSubject);
  230|  1.14M|            self
  231|       |        } else {
  232|  6.08M|            self
  233|       |        }
  234|  9.41M|    }
_RNvXNtCs6v03uY4lCtp_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer13recognize_end:
  236|   239k|    fn recognize_end(
  237|   239k|        mut self,
  238|   239k|        _context: &mut NQuadsRecognizerContext,
  239|   239k|        results: &mut Vec<Quad>,
  240|   239k|        errors: &mut Vec<RuleRecognizerError>,
  241|   239k|    ) {
  242|   239k|        match &*self.stack {
  243|   239k|            [NQuadsState::ExpectSubject] | [] => (),
  244|    156|            [NQuadsState::ExpectDot] => errors.push("Triples should be followed by a dot".into()),
  245|       |            [NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple] => {
  246|    524|                self.emit_quad(results, GraphName::DefaultGraph);
  247|    524|                errors.push("Triples should be followed by a dot".into())
  248|       |            }
  249|    268|            [NQuadsState::ExpectLiteralAnnotationOrGraphNameOrDot { value }] => {
  250|    268|                self.objects.push(Literal::new_simple_literal(value).into());
  251|    268|                self.emit_quad(results, GraphName::DefaultGraph);
  252|    268|                errors.push("Triples should be followed by a dot".into())
  253|       |            }
  254|    636|            _ => errors.push("Unexpected end".into()), // TODO
  255|       |        }
  256|   239k|    }
_RNvXNtCs6v03uY4lCtp_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer13lexer_options:
  258|  33.3M|    fn lexer_options(context: &NQuadsRecognizerContext) -> &N3LexerOptions {
  259|  33.3M|        &context.lexer_options
  260|  33.3M|    }
_RNvMs_NtCs6v03uY4lCtp_5oxttl12line_formatsNtB4_16NQuadsRecognizer10new_parser:
  264|   239k|    pub fn new_parser(
  265|   239k|        with_graph_name: bool,
  266|   239k|        #[cfg(feature = "rdf-star")] with_quoted_triples: bool,
  267|   239k|        unchecked: bool,
  268|   239k|    ) -> Parser<Self> {
  269|   239k|        Parser::new(
  270|   239k|            Lexer::new(
  271|   239k|                N3Lexer::new(N3LexerMode::NTriples, unchecked),
  272|   239k|                MIN_BUFFER_SIZE,
  273|   239k|                MAX_BUFFER_SIZE,
  274|   239k|                true,
  275|   239k|                Some(b"#"),
  276|   239k|            ),
  277|   239k|            Self {
  278|   239k|                stack: vec![NQuadsState::ExpectSubject],
  279|   239k|                subjects: Vec::new(),
  280|   239k|                predicates: Vec::new(),
  281|   239k|                objects: Vec::new(),
  282|   239k|            },
  283|   239k|            NQuadsRecognizerContext {
  284|   239k|                with_graph_name,
  285|   239k|                #[cfg(feature = "rdf-star")]
  286|   239k|                with_quoted_triples,
  287|   239k|                lexer_options: N3LexerOptions::default(),
  288|   239k|            },
  289|   239k|        )
  290|   239k|    }
_RNvMs_NtCs6v03uY4lCtp_5oxttl12line_formatsNtB4_16NQuadsRecognizer9emit_quad:
  306|   180k|    fn emit_quad(&mut self, results: &mut Vec<Quad>, graph_name: GraphName) {
  307|   180k|        results.push(Quad {
  308|   180k|            subject: self.subjects.pop().unwrap(),
  309|   180k|            predicate: self.predicates.pop().unwrap(),
  310|   180k|            object: self.objects.pop().unwrap(),
  311|   180k|            graph_name,
  312|   180k|        })
  313|   180k|    }
_RINvMs_NtCs6v03uY4lCtp_5oxttl12line_formatsNtB5_16NQuadsRecognizer5errorReEB7_:
  293|   903k|    fn error(
  294|   903k|        mut self,
  295|   903k|        errors: &mut Vec<RuleRecognizerError>,
  296|   903k|        msg: impl Into<RuleRecognizerError>,
  297|   903k|    ) -> Self {
  298|   903k|        errors.push(msg.into());
  299|   903k|        self.stack.clear();
  300|   903k|        self.subjects.clear();
  301|   903k|        self.predicates.clear();
  302|   903k|        self.objects.clear();
  303|   903k|        self
  304|   903k|    }

_RINvMNtCs6v03uY4lCtp_5oxttl6nquadsNtB3_12NQuadsParser10parse_readRShECsg5j8di3JvXp_6nquads:
   95|  79.6k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadNQuadsReader<R> {
   96|  79.6k|        FromReadNQuadsReader {
   97|  79.6k|            inner: self.parse().parser.parse_read(read),
   98|  79.6k|        }
   99|  79.6k|    }
_RINvMs1_NtCs6v03uY4lCtp_5oxttl6nquadsNtB6_16NQuadsSerializer18serialize_to_writeINtNtCsjp9TdQkU1Un_5alloc3vec3VechEECsg5j8di3JvXp_6nquads:
  382|  79.6k|    pub fn serialize_to_write<W: Write>(self, write: W) -> ToWriteNQuadsWriter<W> {
  383|  79.6k|        ToWriteNQuadsWriter {
  384|  79.6k|            write,
  385|  79.6k|            writer: self.serialize(),
  386|  79.6k|        }
  387|  79.6k|    }
_RINvMs2_NtCs6v03uY4lCtp_5oxttl6nquadsINtB6_19ToWriteNQuadsWriterINtNtCsjp9TdQkU1Un_5alloc3vec3VechEE10write_quadRNtNtCsal5YaZOfl0H_5oxrdf6triple4QuadECsg5j8di3JvXp_6nquads:
  476|  60.0k|    pub fn write_quad<'a>(&mut self, q: impl Into<QuadRef<'a>>) -> io::Result<()> {
  477|  60.0k|        self.writer.write_quad(q, &mut self.write)
  478|  60.0k|    }
_RINvMs3_NtCs6v03uY4lCtp_5oxttl6nquadsNtB6_20LowLevelNQuadsWriter10write_quadRNtNtCsal5YaZOfl0H_5oxrdf6triple4QuadQINtNtCsjp9TdQkU1Un_5alloc3vec3VechEECsg5j8di3JvXp_6nquads:
  557|  60.0k|    pub fn write_quad<'a>(
  558|  60.0k|        &mut self,
  559|  60.0k|        q: impl Into<QuadRef<'a>>,
  560|  60.0k|        mut write: impl Write,
  561|  60.0k|    ) -> io::Result<()> {
  562|  60.0k|        writeln!(write, "{} .", q.into())
  563|  60.0k|    }
_RNvMs2_NtCs6v03uY4lCtp_5oxttl6nquadsINtB5_19ToWriteNQuadsWriterINtNtCsjp9TdQkU1Un_5alloc3vec3VechEE6finishCsg5j8di3JvXp_6nquads:
  481|  79.6k|    pub fn finish(self) -> W {
  482|  79.6k|        self.write
  483|  79.6k|    }
_RNvXs_NtCs6v03uY4lCtp_5oxttl6nquadsINtB4_20FromReadNQuadsReaderRShENtNtNtNtCsaXZRpaJvnVB_4core4iter6traits8iterator8Iterator4nextCsg5j8di3JvXp_6nquads:
  218|   139k|    fn next(&mut self) -> Option<Self::Item> {
  219|   139k|        self.inner.next()
  220|   139k|    }
_RNvMNtCs6v03uY4lCtp_5oxttl6nquadsNtB2_12NQuadsParser19with_quoted_triplesCsg5j8di3JvXp_6nquads:
   67|   239k|    pub fn with_quoted_triples(mut self) -> Self {
   68|   239k|        self.with_quoted_triples = true;
   69|   239k|        self
   70|   239k|    }
_RNvMNtCs6v03uY4lCtp_5oxttl6nquadsNtB2_12NQuadsParser3newCsg5j8di3JvXp_6nquads:
   49|   239k|    pub fn new() -> Self {
   50|   239k|        Self::default()
   51|   239k|    }
_RNvMNtCs6v03uY4lCtp_5oxttl6nquadsNtB2_12NQuadsParser9uncheckedCsg5j8di3JvXp_6nquads:
   59|    387|    pub fn unchecked(mut self) -> Self {
   60|    387|        self.unchecked = true;
   61|    387|        self
   62|    387|    }
_RNvMs1_NtCs6v03uY4lCtp_5oxttl6nquadsNtB5_16NQuadsSerializer3newCsg5j8di3JvXp_6nquads:
  359|  79.6k|    pub fn new() -> Self {
  360|  79.6k|        Self
  361|  79.6k|    }
_RNvXs4_NtCs6v03uY4lCtp_5oxttl6nquadsNtB5_12NQuadsParserNtNtCsaXZRpaJvnVB_4core7default7Default7defaultCsg5j8di3JvXp_6nquads:
   38|   239k|#[derive(Default)]
_RNvMNtCs6v03uY4lCtp_5oxttl6nquadsNtB2_12NQuadsParser5parse:
  175|   239k|    pub fn parse(self) -> LowLevelNQuadsReader {
  176|   239k|        LowLevelNQuadsReader {
  177|   239k|            parser: NQuadsRecognizer::new_parser(
  178|   239k|                true,
  179|   239k|                #[cfg(feature = "rdf-star")]
  180|   239k|                self.with_quoted_triples,
  181|   239k|                self.unchecked,
  182|   239k|            ),
  183|   239k|        }
  184|   239k|    }
_RNvMs0_NtCs6v03uY4lCtp_5oxttl6nquadsNtB5_20LowLevelNQuadsReader17extend_from_slice:
  306|  10.8M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  307|  10.8M|        self.parser.extend_from_slice(other)
  308|  10.8M|    }
_RNvMs0_NtCs6v03uY4lCtp_5oxttl6nquadsNtB5_20LowLevelNQuadsReader3end:
  313|   159k|    pub fn end(&mut self) {
  314|   159k|        self.parser.end()
  315|   159k|    }
_RNvMs0_NtCs6v03uY4lCtp_5oxttl6nquadsNtB5_20LowLevelNQuadsReader6is_end:
  318|   159k|    pub fn is_end(&self) -> bool {
  319|   159k|        self.parser.is_end()
  320|   159k|    }
_RNvMs0_NtCs6v03uY4lCtp_5oxttl6nquadsNtB5_20LowLevelNQuadsReader9read_next:
  326|  24.8M|    pub fn read_next(&mut self) -> Option<Result<Quad, SyntaxError>> {
  327|  24.8M|        self.parser.read_next()
  328|  24.8M|    }
_RNvMs1_NtCs6v03uY4lCtp_5oxttl6nquadsNtB5_16NQuadsSerializer9serialize:
  444|  79.6k|    pub fn serialize(&self) -> LowLevelNQuadsWriter {
  445|  79.6k|        LowLevelNQuadsWriter
  446|  79.6k|    }

_RNvXs_NtNtCs6v03uY4lCtp_5oxttl7toolkit5errorNtB4_11SyntaxErrorNtNtCsaXZRpaJvnVB_4core3fmt7Display3fmtCsg5j8di3JvXp_6nquads:
   38|  13.7M|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   39|  13.7M|        if self.location.start.offset + 1 >= self.location.end.offset {
   40|  11.2M|            write!(
   41|  11.2M|                f,
   42|  11.2M|                "Parser error at line {} column {}: {}",
   43|  11.2M|                self.location.start.line + 1,
   44|  11.2M|                self.location.start.column + 1,
   45|  11.2M|                self.message
   46|  11.2M|            )
   47|  2.51M|        } else if self.location.start.line == self.location.end.line {
   48|  2.47M|            write!(
   49|  2.47M|                f,
   50|  2.47M|                "Parser error between at line {} between columns {} and column {}: {}",
   51|  2.47M|                self.location.start.line + 1,
   52|  2.47M|                self.location.start.column + 1,
   53|  2.47M|                self.location.end.column + 1,
   54|  2.47M|                self.message
   55|  2.47M|            )
   56|       |        } else {
   57|  31.0k|            write!(
   58|  31.0k|                f,
   59|  31.0k|                "Parser error between line {} column {} and line {} column {}: {}",
   60|  31.0k|                self.location.start.line + 1,
   61|  31.0k|                self.location.start.column + 1,
   62|  31.0k|                self.location.end.line + 1,
   63|  31.0k|                self.location.end.column + 1,
   64|  31.0k|                self.message
   65|  31.0k|            )
   66|       |        }
   67|  13.7M|    }

_RINvMs1_NtNtCs6v03uY4lCtp_5oxttl7toolkit5lexerINtB6_5LexerNtNtBa_5lexer7N3LexerE16extend_from_readRShECsg5j8di3JvXp_6nquads:
  113|   173k|    pub fn extend_from_read(&mut self, read: &mut impl Read) -> io::Result<()> {
  114|   173k|        self.shrink_data();
  115|   173k|        if self.data.len() == self.max_buffer_size {
  116|      0|            return Err(io::Error::new(
  117|      0|                io::ErrorKind::OutOfMemory,
  118|      0|                format!(
  119|      0|                    "Reached the buffer maximal size of {}",
  120|      0|                    self.max_buffer_size
  121|      0|                ),
  122|      0|            ));
  123|   173k|        }
  124|   173k|        let min_end = min(self.data.len() + self.min_buffer_size, self.max_buffer_size);
  125|   173k|        let new_start = self.data.len();
  126|   173k|        self.data.resize(min_end, 0);
  127|   173k|        if self.data.len() < self.data.capacity() {
  128|    327|            // We keep extending to have as much space as available without reallocation
  129|    327|            self.data.resize(self.data.capacity(), 0);
  130|   173k|        }
  131|   173k|        let read = read.read(&mut self.data[new_start..])?;
  132|   173k|        self.data.truncate(new_start + read);
  133|   173k|        self.is_ending = read == 0;
  134|   173k|        Ok(())
  135|   173k|    }
_RNvXNtNtCs6v03uY4lCtp_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCsaXZRpaJvnVB_4core7convert4FromTINtNtNtB1a_3ops5range5RangejENtNtCsjp9TdQkU1Un_5alloc6string6StringEE4fromB6_:
   31|  7.64M|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|  7.64M|        Self {
   33|  7.64M|            location,
   34|  7.64M|            message: message.into(),
   35|  7.64M|        }
   36|  7.64M|    }
_RNvXNtNtCs6v03uY4lCtp_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCsaXZRpaJvnVB_4core7convert4FromTINtNtNtB1a_3ops5range5RangejEReEE4fromB6_:
   31|  5.23M|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|  5.23M|        Self {
   33|  5.23M|            location,
   34|  5.23M|            message: message.into(),
   35|  5.23M|        }
   36|  5.23M|    }
_RNvXs_NtNtCs6v03uY4lCtp_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCsaXZRpaJvnVB_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejENtNtCsjp9TdQkU1Un_5alloc6string6StringEE4fromB8_:
   41|   479k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|   479k|        (*location.start()..*location.end() + 1, message).into()
   43|   479k|    }
_RNvXs_NtNtCs6v03uY4lCtp_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCsaXZRpaJvnVB_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejEReEE4fromB8_:
   41|  4.25M|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  4.25M|        (*location.start()..*location.end() + 1, message).into()
   43|  4.25M|    }
_RNvXs0_NtNtCs6v03uY4lCtp_5oxttl7toolkit5lexerNtB5_20TokenRecognizerErrorINtNtCsaXZRpaJvnVB_4core7convert4FromTjNtNtCsjp9TdQkU1Un_5alloc6string6StringEE4fromB9_:
   47|   459k|    fn from((location, message): (usize, S)) -> Self {
   48|   459k|        (location..=location, message).into()
   49|   459k|    }
_RNvMs1_NtNtCs6v03uY4lCtp_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3newB9_:
   73|   239k|    pub fn new(
   74|   239k|        parser: R,
   75|   239k|        min_buffer_size: usize,
   76|   239k|        max_buffer_size: usize,
   77|   239k|        is_line_jump_whitespace: bool,
   78|   239k|        line_comment_start: Option<&'static [u8]>,
   79|   239k|    ) -> Self {
   80|   239k|        Self {
   81|   239k|            parser,
   82|   239k|            data: Vec::new(),
   83|   239k|            position: Position {
   84|   239k|                line_start_buffer_offset: 0,
   85|   239k|                buffer_offset: 0,
   86|   239k|                global_offset: 0,
   87|   239k|                global_line: 0,
   88|   239k|            },
   89|   239k|            previous_position: Position {
   90|   239k|                line_start_buffer_offset: 0,
   91|   239k|                buffer_offset: 0,
   92|   239k|                global_offset: 0,
   93|   239k|                global_line: 0,
   94|   239k|            },
   95|   239k|            is_ending: false,
   96|   239k|            min_buffer_size,
   97|   239k|            max_buffer_size,
   98|   239k|            is_line_jump_whitespace,
   99|   239k|            line_comment_start,
  100|   239k|        }
  101|   239k|    }
_RNvMs1_NtNtCs6v03uY4lCtp_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17extend_from_sliceB9_:
  103|  10.8M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  104|  10.8M|        self.shrink_data();
  105|  10.8M|        self.data.extend_from_slice(other);
  106|  10.8M|    }
_RNvMs1_NtNtCs6v03uY4lCtp_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3endB9_:
  109|   159k|    pub fn end(&mut self) {
  110|   159k|        self.is_ending = true;
  111|   159k|    }
_RNvMs1_NtNtCs6v03uY4lCtp_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE9read_nextB9_:
  166|  33.3M|    pub fn read_next(&mut self, options: &R::Options) -> Option<Result<R::Token<'_>, SyntaxError>> {
  167|  33.3M|        self.skip_whitespaces_and_comments()?;
  168|  33.2M|        self.previous_position = self.position;
  169|  33.2M|        let Some((consumed, result)) = self.parser.recognize_next_token(
  170|  33.2M|            &self.data[self.position.buffer_offset..],
  171|  33.2M|            self.is_ending,
  172|  33.2M|            options,
  173|  33.2M|        ) else {
  174|  11.2M|            return if self.is_ending {
  175|   545k|                if self.position.buffer_offset == self.data.len() {
  176|   478k|                    None // We have finished
  177|       |                } else {
  178|  67.4k|                    let (new_line_jumps, new_line_start) =
  179|  67.4k|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  180|  67.4k|                            &self.data[self.position.buffer_offset..],
  181|  67.4k|                        );
  182|  67.4k|                    if new_line_jumps > 0 {
  183|  7.76k|                        self.position.line_start_buffer_offset =
  184|  7.76k|                            self.position.buffer_offset + new_line_start;
  185|  59.6k|                    }
  186|  67.4k|                    self.position.global_offset +=
  187|  67.4k|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  188|  67.4k|                    self.position.buffer_offset = self.data.len();
  189|  67.4k|                    self.position.global_line += new_line_jumps;
  190|  67.4k|                    let new_position = TextPosition {
  191|  67.4k|                        line: self.position.global_line,
  192|  67.4k|                        column: Self::column_from_bytes(
  193|  67.4k|                            &self.data[self.position.line_start_buffer_offset..],
  194|  67.4k|                        ),
  195|  67.4k|                        offset: self.position.global_offset,
  196|  67.4k|                    };
  197|  67.4k|                    let error = SyntaxError {
  198|  67.4k|                        location: new_position..new_position,
  199|  67.4k|                        message: "Unexpected end of file".into(),
  200|  67.4k|                    };
  201|  67.4k|                    self.position.buffer_offset = self.data.len(); // We consume everything
  202|  67.4k|                    Some(Err(error))
  203|       |                }
  204|       |            } else {
  205|  10.7M|                None
  206|       |            };
  207|       |        };
  208|  21.9M|        debug_assert!(
  209|      0|            consumed > 0,
  210|      0|            "The lexer must consume at least one byte each time"
  211|       |        );
  212|  21.9M|        debug_assert!(
  213|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  214|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  215|      0|            self.data.len() - self.position.buffer_offset
  216|       |        );
  217|  21.9M|        let (new_line_jumps, new_line_start) =
  218|  21.9M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  219|  21.9M|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  220|  21.9M|            );
  221|  21.9M|        if new_line_jumps > 0 {
  222|  64.0k|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  223|  21.8M|        }
  224|  21.9M|        self.position.buffer_offset += consumed;
  225|  21.9M|        self.position.global_offset += u64::try_from(consumed).unwrap();
  226|  21.9M|        self.position.global_line += new_line_jumps;
  227|  21.9M|        Some(result.map_err(|e| SyntaxError {
  228|       |            location: self.location_from_buffer_offset_range(e.location),
  229|       |            message: e.message,
  230|  21.9M|        }))
  231|  33.3M|    }
_RNCNvMs1_NtNtCs6v03uY4lCtp_5oxttl7toolkit5lexerINtB7_5LexerNtNtBb_5lexer7N3LexerE9read_next0Bb_:
  227|  12.7M|        Some(result.map_err(|e| SyntaxError {
  228|  12.7M|            location: self.location_from_buffer_offset_range(e.location),
  229|  12.7M|            message: e.message,
  230|  12.7M|        }))
_RNvMs1_NtNtCs6v03uY4lCtp_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE33location_from_buffer_offset_rangeB9_:
  233|  12.7M|    pub fn location_from_buffer_offset_range(
  234|  12.7M|        &self,
  235|  12.7M|        offset_range: Range<usize>,
  236|  12.7M|    ) -> Range<TextPosition> {
  237|  12.7M|        let start_offset = self.previous_position.buffer_offset + offset_range.start;
  238|  12.7M|        let (start_extra_line_jumps, start_line_start) =
  239|  12.7M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  240|  12.7M|                &self.data[self.previous_position.buffer_offset..start_offset],
  241|  12.7M|            );
  242|  12.7M|        let start_line_start = if start_extra_line_jumps > 0 {
  243|  10.1k|            start_line_start + self.previous_position.buffer_offset
  244|       |        } else {
  245|  12.6M|            self.previous_position.line_start_buffer_offset
  246|       |        };
  247|  12.7M|        let end_offset = self.previous_position.buffer_offset + offset_range.end;
  248|  12.7M|        let (end_extra_line_jumps, end_line_start) =
  249|  12.7M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  250|  12.7M|                &self.data[self.previous_position.buffer_offset..end_offset],
  251|  12.7M|            );
  252|  12.7M|        let end_line_start = if end_extra_line_jumps > 0 {
  253|  40.8k|            end_line_start + self.previous_position.buffer_offset
  254|       |        } else {
  255|  12.6M|            self.previous_position.line_start_buffer_offset
  256|       |        };
  257|  12.7M|        TextPosition {
  258|  12.7M|            line: self.previous_position.global_line + start_extra_line_jumps,
  259|  12.7M|            column: Self::column_from_bytes(&self.data[start_line_start..start_offset]),
  260|  12.7M|            offset: self.previous_position.global_offset
  261|  12.7M|                + u64::try_from(offset_range.start).unwrap(),
  262|  12.7M|        }..TextPosition {
  263|  12.7M|            line: self.previous_position.global_line + end_extra_line_jumps,
  264|  12.7M|            column: Self::column_from_bytes(&self.data[end_line_start..end_offset]),
  265|  12.7M|            offset: self.previous_position.global_offset + u64::try_from(offset_range.end).unwrap(),
  266|  12.7M|        }
  267|  12.7M|    }
_RNvMs1_NtNtCs6v03uY4lCtp_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE19last_token_locationB9_:
  269|   988k|    pub fn last_token_location(&self) -> Range<TextPosition> {
  270|   988k|        TextPosition {
  271|   988k|            line: self.previous_position.global_line,
  272|   988k|            column: Self::column_from_bytes(
  273|   988k|                &self.data[self.previous_position.line_start_buffer_offset
  274|   988k|                    ..self.previous_position.buffer_offset],
  275|   988k|            ),
  276|   988k|            offset: self.previous_position.global_offset,
  277|   988k|        }..TextPosition {
  278|   988k|            line: self.position.global_line,
  279|   988k|            column: Self::column_from_bytes(
  280|   988k|                &self.data[self.position.line_start_buffer_offset..self.position.buffer_offset],
  281|   988k|            ),
  282|   988k|            offset: self.position.global_offset,
  283|   988k|        }
  284|   988k|    }
_RNvMs1_NtNtCs6v03uY4lCtp_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17last_token_sourceB9_:
  286|   988k|    pub fn last_token_source(&self) -> Cow<'_, str> {
  287|   988k|        String::from_utf8_lossy(
  288|   988k|            &self.data[self.previous_position.buffer_offset..self.position.buffer_offset],
  289|   988k|        )
  290|   988k|    }
_RNvMs1_NtNtCs6v03uY4lCtp_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE6is_endB9_:
  292|  11.4M|    pub fn is_end(&self) -> bool {
  293|  11.4M|        self.is_ending && self.data.len() == self.position.buffer_offset
  294|  11.4M|    }
_RNvMs1_NtNtCs6v03uY4lCtp_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  297|  33.3M|    fn skip_whitespaces_and_comments(&mut self) -> Option<()> {
  298|       |        loop {
  299|  33.4M|            self.skip_whitespaces()?;
  300|       |
  301|  33.3M|            let buf = &self.data[self.position.buffer_offset..];
  302|  33.3M|            if let Some(line_comment_start) = self.line_comment_start {
  303|  33.3M|                if buf.starts_with(line_comment_start) {
  304|       |                    // Comment
  305|   152k|                    if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  306|  40.1k|                        let mut end_position = line_comment_start.len() + end;
  307|  40.1k|                        if buf.get(end_position).copied() == Some(b'\r') {
  308|       |                            // We look for \n for Windows line end style
  309|  27.8k|                            if let Some(c) = buf.get(end_position + 1) {
  310|  9.33k|                                if *c == b'\n' {
  311|     36|                                    end_position += 1;
  312|  9.30k|                                }
  313|  18.4k|                            } else if !self.is_ending {
  314|  18.3k|                                return None; // We need to read more
  315|    133|                            }
  316|  12.3k|                        }
  317|  21.7k|                        let comment_size = end_position + 1;
  318|  21.7k|                        self.position.buffer_offset += comment_size;
  319|  21.7k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  320|  21.7k|                        self.position.global_offset += u64::try_from(comment_size).unwrap();
  321|  21.7k|                        self.position.global_line += 1;
  322|  21.7k|                        continue;
  323|   112k|                    }
  324|   112k|                    if self.is_ending {
  325|  3.84k|                        self.position.buffer_offset = self.data.len(); // EOF
  326|  3.84k|                        return Some(());
  327|   108k|                    }
  328|   108k|                    return None; // We need more data
  329|  33.2M|                }
  330|      0|            }
  331|  33.2M|            return Some(());
  332|       |        }
  333|  33.3M|    }
_RNvMs1_NtNtCs6v03uY4lCtp_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  335|  33.4M|    fn skip_whitespaces(&mut self) -> Option<()> {
  336|  33.4M|        if self.is_line_jump_whitespace {
  337|  33.4M|            let mut i = self.position.buffer_offset;
  338|  34.8M|            while let Some(c) = self.data.get(i) {
  339|  32.3M|                match c {
  340|   275k|                    b' ' | b'\t' => {
  341|   275k|                        self.position.buffer_offset += 1;
  342|   275k|                        self.position.global_offset += 1;
  343|   275k|                    }
  344|       |                    b'\r' => {
  345|       |                        // We look for \n for Windows line end style
  346|   350k|                        let mut increment: u8 = 1;
  347|   350k|                        if let Some(c) = self.data.get(i + 1) {
  348|   302k|                            if *c == b'\n' {
  349|    132|                                increment += 1;
  350|    132|                                i += 1;
  351|   301k|                            }
  352|  48.1k|                        } else if !self.is_ending {
  353|  47.5k|                            return None; // We need to read more
  354|    647|                        }
  355|   302k|                        self.position.buffer_offset += usize::from(increment);
  356|   302k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  357|   302k|                        self.position.global_offset += u64::from(increment);
  358|   302k|                        self.position.global_line += 1;
  359|       |                    }
  360|   891k|                    b'\n' => {
  361|   891k|                        self.position.buffer_offset += 1;
  362|   891k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  363|   891k|                        self.position.global_offset += 1;
  364|   891k|                        self.position.global_line += 1;
  365|   891k|                    }
  366|  30.8M|                    _ => return Some(()),
  367|       |                }
  368|  1.46M|                i += 1;
  369|       |                // TODO: SIMD
  370|       |            }
  371|       |        } else {
  372|      0|            for c in &self.data[self.position.buffer_offset..] {
  373|      0|                if matches!(c, b' ' | b'\t') {
  374|      0|                    self.position.buffer_offset += 1;
  375|      0|                    self.position.global_offset += 1;
  376|      0|                } else {
  377|      0|                    return Some(());
  378|       |                }
  379|       |                // TODO: SIMD
  380|       |            }
  381|       |        }
  382|  2.54M|        Some(())
  383|  33.4M|    }
_RNvMs1_NtNtCs6v03uY4lCtp_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE11shrink_dataB9_:
  385|  11.0M|    fn shrink_data(&mut self) {
  386|  11.0M|        if self.position.line_start_buffer_offset > 0 {
  387|   437k|            self.data
  388|   437k|                .copy_within(self.position.line_start_buffer_offset.., 0);
  389|   437k|            self.data
  390|   437k|                .truncate(self.data.len() - self.position.line_start_buffer_offset);
  391|   437k|            self.position.buffer_offset -= self.position.line_start_buffer_offset;
  392|   437k|            self.position.line_start_buffer_offset = 0;
  393|   437k|            self.previous_position = self.position;
  394|  10.5M|        }
  395|  11.0M|    }
_RNvMs1_NtNtCs6v03uY4lCtp_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  397|  47.3M|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  398|  47.3M|        let mut num_of_jumps = 0;
  399|  47.3M|        let mut last_jump_pos = 0;
  400|  47.3M|        let mut previous_cr = 0;
  401|  47.3M|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  402|   259k|            if bytes[pos] == b'\r' {
  403|  82.2k|                previous_cr = pos;
  404|  82.2k|                num_of_jumps += 1;
  405|  82.2k|                last_jump_pos = pos + 1;
  406|  82.2k|            } else {
  407|   177k|                if previous_cr < pos - 1 {
  408|   130k|                    // We count \r\n as a single line jump
  409|   130k|                    num_of_jumps += 1;
  410|   130k|                }
  411|   177k|                last_jump_pos = pos + 1;
  412|       |            }
  413|       |        }
  414|  47.3M|        (num_of_jumps, last_jump_pos)
  415|  47.3M|    }
_RNvMs1_NtNtCs6v03uY4lCtp_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17column_from_bytesB9_:
  417|  45.4M|    fn column_from_bytes(bytes: &[u8]) -> u64 {
  418|  45.4M|        match str::from_utf8(bytes) {
  419|  22.8M|            Ok(s) => u64::try_from(s.chars().count()).unwrap(),
  420|  22.5M|            Err(e) => {
  421|  22.5M|                if e.valid_up_to() == 0 {
  422|  4.58M|                    0
  423|       |                } else {
  424|  18.0M|                    Self::column_from_bytes(&bytes[..e.valid_up_to()])
  425|       |                }
  426|       |            }
  427|       |        }
  428|  45.4M|    }

_RINvMs_NtNtCs6v03uY4lCtp_5oxttl7toolkit6parserINtB5_6ParserNtNtB9_12line_formats16NQuadsRecognizerE10parse_readRShECsg5j8di3JvXp_6nquads:
  124|  79.6k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadIterator<R, RR> {
  125|  79.6k|        FromReadIterator { read, parser: self }
  126|  79.6k|    }
_RNvXs0_NtNtCs6v03uY4lCtp_5oxttl7toolkit6parserINtB5_16FromReadIteratorRShNtNtB9_12line_formats16NQuadsRecognizerENtNtNtNtCsaXZRpaJvnVB_4core4iter6traits8iterator8Iterator4nextCsg5j8di3JvXp_6nquads:
  146|   139k|    fn next(&mut self) -> Option<Self::Item> {
  147|   313k|        while !self.parser.is_end() {
  148|   233k|            if let Some(result) = self.parser.read_next() {
  149|  60.0k|                return Some(result.map_err(ParseError::Syntax));
  150|   173k|            }
  151|   173k|            if let Err(e) = self.parser.lexer.extend_from_read(&mut self.read) {
  152|      0|                return Some(Err(e.into()));
  153|   173k|            }
  154|       |        }
  155|  79.6k|        None
  156|   139k|    }
_RNvXNtNtCs6v03uY4lCtp_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCsaXZRpaJvnVB_4core7convert4FromReE4fromB6_:
   39|   988k|    fn from(message: S) -> Self {
   40|   988k|        Self {
   41|   988k|            message: message.into(),
   42|   988k|        }
   43|   988k|    }
_RNvMs_NtNtCs6v03uY4lCtp_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_12line_formats16NQuadsRecognizerE3newB8_:
   56|   239k|    pub fn new(lexer: Lexer<RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   57|   239k|        Self {
   58|   239k|            lexer,
   59|   239k|            state: Some(recognizer),
   60|   239k|            context,
   61|   239k|            results: vec![],
   62|   239k|            errors: vec![],
   63|   239k|        }
   64|   239k|    }
_RNvMs_NtNtCs6v03uY4lCtp_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_12line_formats16NQuadsRecognizerE17extend_from_sliceB8_:
   66|  10.8M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
   67|  10.8M|        self.lexer.extend_from_slice(other)
   68|  10.8M|    }
_RNvMs_NtNtCs6v03uY4lCtp_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_12line_formats16NQuadsRecognizerE3endB8_:
   71|   159k|    pub fn end(&mut self) {
   72|   159k|        self.lexer.end()
   73|   159k|    }
_RNvMs_NtNtCs6v03uY4lCtp_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_12line_formats16NQuadsRecognizerE6is_endB8_:
   76|   472k|    pub fn is_end(&self) -> bool {
   77|   472k|        self.state.is_none() && self.results.is_empty() && self.errors.is_empty()
   78|   472k|    }
_RNvMs_NtNtCs6v03uY4lCtp_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_12line_formats16NQuadsRecognizerE9read_nextB8_:
   80|  25.0M|    pub fn read_next(&mut self) -> Option<Result<RR::Output, SyntaxError>> {
   81|       |        loop {
   82|  34.5M|            if let Some(error) = self.errors.pop() {
   83|   988k|                return Some(Err(SyntaxError {
   84|   988k|                    location: self.lexer.last_token_location(),
   85|   988k|                    message: error
   86|   988k|                        .message
   87|   988k|                        .replace("TOKEN", &self.lexer.last_token_source()),
   88|   988k|                }));
   89|  33.5M|            }
   90|  33.5M|            if let Some(result) = self.results.pop() {
   91|   180k|                return Some(Ok(result));
   92|  33.3M|            }
   93|  33.3M|            if let Some(result) = self.lexer.read_next(RR::lexer_options(&self.context)) {
   94|  21.9M|                match result {
   95|  9.21M|                    Ok(token) => {
   96|  9.21M|                        self.state = self.state.take().map(|state| {
   97|       |                            state.recognize_next(
   98|       |                                token,
   99|       |                                &mut self.context,
  100|       |                                &mut self.results,
  101|       |                                &mut self.errors,
  102|       |                            )
  103|  9.21M|                        });
  104|  9.21M|                        continue;
  105|       |                    }
  106|  12.7M|                    Err(e) => {
  107|  12.7M|                        self.state = self.state.take().map(RR::error_recovery_state);
  108|  12.7M|                        return Some(Err(e));
  109|       |                    }
  110|       |                }
  111|  11.4M|            }
  112|  11.4M|            if self.lexer.is_end() {
  113|   478k|                self.state.take()?.recognize_end(
  114|   239k|                    &mut self.context,
  115|   239k|                    &mut self.results,
  116|   239k|                    &mut self.errors,
  117|   239k|                )
  118|       |            } else {
  119|  10.9M|                return None;
  120|       |            }
  121|       |        }
  122|  25.0M|    }
_RNCNvMs_NtNtCs6v03uY4lCtp_5oxttl7toolkit6parserINtB6_6ParserNtNtBa_12line_formats16NQuadsRecognizerE9read_next0Ba_:
   96|  9.21M|                        self.state = self.state.take().map(|state| {
   97|  9.21M|                            state.recognize_next(
   98|  9.21M|                                token,
   99|  9.21M|                                &mut self.context,
  100|  9.21M|                                &mut self.results,
  101|  9.21M|                                &mut self.errors,
  102|  9.21M|                            )
  103|  9.21M|                        });


rust_fuzzer_test_input:
  209|  34.6k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  34.6k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  34.6k|                }
  223|  34.6k|
  224|  34.6k|                __libfuzzer_sys_run(bytes);
  225|  34.6k|                0
  226|  34.6k|            }
_RNvNvCs80t0coX2wt6_6nquads1__19___libfuzzer_sys_run:
  241|  34.6k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|  34.6k|            }
LLVMFuzzerTestOneInput:
   58|  34.6k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  34.6k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  34.6k|    });
   63|  34.6k|
   64|  34.6k|    match test_input {
   65|  34.6k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  34.6k|}
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}
_RNCNvCs8psSAyD4vLQ_13libfuzzer_sys15test_input_wrap0B3_:
   59|  34.6k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  34.6k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  34.6k|        rust_fuzzer_test_input(data_slice)
   62|  34.6k|    });

_RINvNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECs4WjTcpTVJQo_5oxttl:
 1125|   112k|pub(crate) unsafe fn search_slice_with_raw(
 1126|   112k|    haystack: &[u8],
 1127|   112k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|   112k|) -> Option<usize> {
 1129|   112k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|   112k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|   112k|    // a &[u8].
 1132|   112k|    let start = haystack.as_ptr();
 1133|   112k|    let end = start.add(haystack.len());
 1134|   112k|    let found = find_raw(start, end)?;
 1135|  6.41k|    Some(found.distance(start))
 1136|   112k|}
_RINvMs3_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4next0ECs4WjTcpTVJQo_5oxttl:
 1044|  16.3M|    pub(crate) unsafe fn next(
 1045|  16.3M|        &mut self,
 1046|  16.3M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  16.3M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  16.3M|        let found = find_raw(self.start, self.end)?;
 1057|  61.4k|        let result = found.distance(self.original_start);
 1058|  61.4k|        self.start = found.add(1);
 1059|  61.4k|        Some(result)
 1060|  16.3M|    }
_RINvNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr7memchr20ECs4WjTcpTVJQo_5oxttl:
 1125|  1.44M|pub(crate) unsafe fn search_slice_with_raw(
 1126|  1.44M|    haystack: &[u8],
 1127|  1.44M|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  1.44M|) -> Option<usize> {
 1129|  1.44M|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  1.44M|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  1.44M|    // a &[u8].
 1132|  1.44M|    let start = haystack.as_ptr();
 1133|  1.44M|    let end = start.add(haystack.len());
 1134|  1.44M|    let found = find_raw(start, end)?;
 1135|   680k|    Some(found.distance(start))
 1136|  1.44M|}
_RNvMs3_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  16.2M|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  16.2M|        Iter {
 1029|  16.2M|            original_start: haystack.as_ptr(),
 1030|  16.2M|            start: haystack.as_ptr(),
 1031|  16.2M|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  16.2M|            haystack: core::marker::PhantomData,
 1033|  16.2M|        }
 1034|  16.2M|    }
_RNvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE7needle1B8_:
  117|   106k|    pub(crate) fn needle1(&self) -> u8 {
  118|   106k|        self.s1
  119|   106k|    }
_RNvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE3newB8_:
  111|   112k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|   112k|        One { s1: needle, v1: V::splat(needle) }
  113|   112k|    }
_RNvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  20.0M|    pub(crate) fn needle2(&self) -> u8 {
  468|  20.0M|        self.s2
  469|  20.0M|    }
_RINvNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  18.0k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  18.0k|    start: *const u8,
 1150|  18.0k|    end: *const u8,
 1151|  18.0k|    confirm: F,
 1152|  18.0k|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  18.0k|    let mut ptr = start;
 1155|   123k|    while ptr < end {
 1156|   106k|        if confirm(*ptr) {
 1157|  1.10k|            return Some(ptr);
 1158|   105k|        }
 1159|   105k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  16.9k|    None
 1162|  18.0k|}
_RNvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE8find_rawBa_:
  493|   292k|    pub(crate) unsafe fn find_raw(
  494|   292k|        &self,
  495|   292k|        start: *const u8,
  496|   292k|        end: *const u8,
  497|   292k|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   292k|        let topos = V::Mask::first_offset;
  505|   292k|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   292k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  43.8k|            return Some(cur);
  517|   248k|        }
  518|   248k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   248k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   248k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   248k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   340k|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  98.1k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  6.50k|                return Some(cur);
  554|  91.6k|            }
  555|  91.6k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   242k|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   226k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   226k|            return self.search_chunk(cur, topos);
  566|  16.0k|        }
  567|  16.0k|        None
  568|   292k|    }
_RNvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE3newBa_:
  450|  17.7M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  17.7M|        Two {
  452|  17.7M|            s1: needle1,
  453|  17.7M|            s2: needle2,
  454|  17.7M|            v1: V::splat(needle1),
  455|  17.7M|            v2: V::splat(needle2),
  456|  17.7M|        }
  457|  17.7M|    }
_RINvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|   220k|    unsafe fn search_chunk(
  417|   220k|        &self,
  418|   220k|        cur: *const u8,
  419|   220k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|   220k|    ) -> Option<*const u8> {
  421|   220k|        let chunk = V::load_unaligned(cur);
  422|   220k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|   220k|        if mask.has_non_zero() {
  424|  3.06k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|   217k|            None
  427|       |        }
  428|   220k|    }
_RINvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|   617k|    unsafe fn search_chunk(
  671|   617k|        &self,
  672|   617k|        cur: *const u8,
  673|   617k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|   617k|    ) -> Option<*const u8> {
  675|   617k|        let chunk = V::load_unaligned(cur);
  676|   617k|        let eq1 = self.v1.cmpeq(chunk);
  677|   617k|        let eq2 = self.v2.cmpeq(chunk);
  678|   617k|        let mask = eq1.or(eq2).movemask();
  679|   617k|        if mask.has_non_zero() {
  680|  64.6k|            let mask1 = eq1.movemask();
  681|  64.6k|            let mask2 = eq2.movemask();
  682|  64.6k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|   552k|            None
  685|       |        }
  686|   617k|    }
_RINvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  1.86M|    unsafe fn search_chunk(
  671|  1.86M|        &self,
  672|  1.86M|        cur: *const u8,
  673|  1.86M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  1.86M|    ) -> Option<*const u8> {
  675|  1.86M|        let chunk = V::load_unaligned(cur);
  676|  1.86M|        let eq1 = self.v1.cmpeq(chunk);
  677|  1.86M|        let eq2 = self.v2.cmpeq(chunk);
  678|  1.86M|        let mask = eq1.or(eq2).movemask();
  679|  1.86M|        if mask.has_non_zero() {
  680|   420k|            let mask1 = eq1.movemask();
  681|   420k|            let mask2 = eq2.movemask();
  682|   420k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  1.44M|            None
  685|       |        }
  686|  1.86M|    }
_RNvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  16.8k|    pub(crate) unsafe fn find_raw(
  144|  16.8k|        &self,
  145|  16.8k|        start: *const u8,
  146|  16.8k|        end: *const u8,
  147|  16.8k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  16.8k|        let topos = V::Mask::first_offset;
  155|  16.8k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  16.8k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|    887|            return Some(cur);
  167|  15.9k|        }
  168|  15.9k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  15.9k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  15.9k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  15.9k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  24.8k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  9.01k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|     70|                return Some(cur);
  216|  8.94k|            }
  217|  8.94k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  15.8k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  13.6k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  13.6k|            return self.search_chunk(cur, topos);
  228|  2.23k|        }
  229|  2.23k|        None
  230|  16.8k|    }
_RNvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iE3newB8_:
  111|   112k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|   112k|        One { s1: needle, v1: V::splat(needle) }
  113|   112k|    }
_RNvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iE8find_rawBa_:
  493|  1.01M|    pub(crate) unsafe fn find_raw(
  494|  1.01M|        &self,
  495|  1.01M|        start: *const u8,
  496|  1.01M|        end: *const u8,
  497|  1.01M|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  1.01M|        let topos = V::Mask::first_offset;
  505|  1.01M|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  1.01M|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   274k|            return Some(cur);
  517|   744k|        }
  518|   744k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   744k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   744k|        if len >= Self::LOOP_SIZE {
  522|  1.25M|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|   906k|                let a = V::load_aligned(cur);
  526|   906k|                let b = V::load_aligned(cur.add(V::BYTES));
  527|   906k|                let eqa1 = self.v1.cmpeq(a);
  528|   906k|                let eqb1 = self.v1.cmpeq(b);
  529|   906k|                let eqa2 = self.v2.cmpeq(a);
  530|   906k|                let eqb2 = self.v2.cmpeq(b);
  531|   906k|                let or1 = eqa1.or(eqb1);
  532|   906k|                let or2 = eqa2.or(eqb2);
  533|   906k|                let or3 = or1.or(or2);
  534|   906k|                if or3.movemask_will_have_non_zero() {
  535|   163k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|   163k|                    if mask.has_non_zero() {
  537|  56.0k|                        return Some(cur.add(topos(mask)));
  538|   107k|                    }
  539|   107k|
  540|   107k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|   107k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|   742k|                }
  544|   742k|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   231k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   859k|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   300k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  21.2k|                return Some(cur);
  554|   279k|            }
  555|   279k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   559k|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   544k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   544k|            return self.search_chunk(cur, topos);
  566|  14.9k|        }
  567|  14.9k|        None
  568|  1.01M|    }
_RINvNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|  12.2M|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  12.2M|    start: *const u8,
 1150|  12.2M|    end: *const u8,
 1151|  12.2M|    confirm: F,
 1152|  12.2M|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  12.2M|    let mut ptr = start;
 1155|  32.2M|    while ptr < end {
 1156|  20.0M|        if confirm(*ptr) {
 1157|  92.4k|            return Some(ptr);
 1158|  20.0M|        }
 1159|  20.0M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  12.1M|    None
 1162|  12.2M|}
_RNvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  20.0M|    pub(crate) fn needle1(&self) -> u8 {
  462|  20.0M|        self.s1
  463|  20.0M|    }
_RNvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iE3newBa_:
  450|  17.7M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  17.7M|        Two {
  452|  17.7M|            s1: needle1,
  453|  17.7M|            s2: needle2,
  454|  17.7M|            v1: V::splat(needle1),
  455|  17.7M|            v2: V::splat(needle2),
  456|  17.7M|        }
  457|  17.7M|    }
_RNvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  72.7k|    pub(crate) unsafe fn find_raw(
  144|  72.7k|        &self,
  145|  72.7k|        start: *const u8,
  146|  72.7k|        end: *const u8,
  147|  72.7k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  72.7k|        let topos = V::Mask::first_offset;
  155|  72.7k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  72.7k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  1.77k|            return Some(cur);
  167|  70.9k|        }
  168|  70.9k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  70.9k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  70.9k|        if len >= Self::LOOP_SIZE {
  172|  53.4k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|  30.1k|                let a = V::load_aligned(cur);
  176|  30.1k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|  30.1k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|  30.1k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|  30.1k|                let eqa = self.v1.cmpeq(a);
  180|  30.1k|                let eqb = self.v1.cmpeq(b);
  181|  30.1k|                let eqc = self.v1.cmpeq(c);
  182|  30.1k|                let eqd = self.v1.cmpeq(d);
  183|  30.1k|                let or1 = eqa.or(eqb);
  184|  30.1k|                let or2 = eqc.or(eqd);
  185|  30.1k|                let or3 = or1.or(or2);
  186|  30.1k|                if or3.movemask_will_have_non_zero() {
  187|  1.17k|                    let mask = eqa.movemask();
  188|  1.17k|                    if mask.has_non_zero() {
  189|    231|                        return Some(cur.add(topos(mask)));
  190|    941|                    }
  191|    941|
  192|    941|                    let mask = eqb.movemask();
  193|    941|                    if mask.has_non_zero() {
  194|    513|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|    428|                    }
  196|    428|
  197|    428|                    let mask = eqc.movemask();
  198|    428|                    if mask.has_non_zero() {
  199|    211|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|    217|                    }
  201|    217|
  202|    217|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|    217|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  28.9k|                }
  206|  28.9k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  46.4k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|   149k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  80.7k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    544|                return Some(cur);
  216|  80.1k|            }
  217|  80.1k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  69.2k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  66.8k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  66.8k|            return self.search_chunk(cur, topos);
  228|  2.34k|        }
  229|  2.34k|        None
  230|  72.7k|    }
_RINvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  39.4k|    unsafe fn search_chunk(
  417|  39.4k|        &self,
  418|  39.4k|        cur: *const u8,
  419|  39.4k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  39.4k|    ) -> Option<*const u8> {
  421|  39.4k|        let chunk = V::load_unaligned(cur);
  422|  39.4k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  39.4k|        if mask.has_non_zero() {
  424|  1.08k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  38.4k|            None
  427|       |        }
  428|  39.4k|    }

_RNCNvMs2_NtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  20.0M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  20.0M|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  20.0M|                })
_RNvMs2_NtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNCNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|   106k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|   106k|                    b == self.sse2.needle1()
  194|   106k|                })
_RNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  72.7k|    unsafe fn find_raw_avx2(
  397|  72.7k|        &self,
  398|  72.7k|        start: *const u8,
  399|  72.7k|        end: *const u8,
  400|  72.7k|    ) -> Option<*const u8> {
  401|  72.7k|        self.avx2.find_raw(start, end)
  402|  72.7k|    }
_RNvMs2_NtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  17.7M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  17.7M|        Two {
  558|  17.7M|            sse2: generic::Two::new(needle1, needle2),
  559|  17.7M|            avx2: generic::Two::new(needle1, needle2),
  560|  17.7M|        }
  561|  17.7M|    }
_RNvMs2_NtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  17.7M|    pub unsafe fn find_raw(
  655|  17.7M|        &self,
  656|  17.7M|        start: *const u8,
  657|  17.7M|        end: *const u8,
  658|  17.7M|    ) -> Option<*const u8> {
  659|  17.7M|        if start >= end {
  660|  4.28M|            return None;
  661|  13.5M|        }
  662|  13.5M|        let len = end.distance(start);
  663|  13.5M|        if len < __m256i::BYTES {
  664|  12.4M|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  12.2M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  12.2M|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|   292k|                self.find_raw_sse2(start, end)
  674|       |            };
  675|  1.01M|        }
  676|  1.01M|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|  1.01M|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|  1.01M|        // enough to run on the vector routine. Pointer validity is caller's
  679|  1.01M|        // responsibility.
  680|  1.01M|        //
  681|  1.01M|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|  1.01M|        // means we'd have to annotate this routine with `target_feature`.
  683|  1.01M|        // Which is fine, because this routine is `unsafe` anyway and the
  684|  1.01M|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|  1.01M|        // The real problem is that a routine with a `target_feature`
  686|  1.01M|        // annotation generally can't be inlined into caller code unless
  687|  1.01M|        // the caller code has the same target feature annotations. Namely,
  688|  1.01M|        // the common case (at time of writing) is for calling code to not
  689|  1.01M|        // have the `avx2` target feature enabled *at compile time*. Without
  690|  1.01M|        // `target_feature` on this routine, it can be inlined which will
  691|  1.01M|        // handle some of the short-haystack cases above without touching the
  692|  1.01M|        // architecture specific code.
  693|  1.01M|        self.find_raw_avx2(start, end)
  694|  17.7M|    }
_RNvMs2_NtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|  1.01M|    unsafe fn find_raw_avx2(
  805|  1.01M|        &self,
  806|  1.01M|        start: *const u8,
  807|  1.01M|        end: *const u8,
  808|  1.01M|    ) -> Option<*const u8> {
  809|  1.01M|        self.avx2.find_raw(start, end)
  810|  1.01M|    }
_RNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|   112k|    pub unsafe fn find_raw(
  180|   112k|        &self,
  181|   112k|        start: *const u8,
  182|   112k|        end: *const u8,
  183|   112k|    ) -> Option<*const u8> {
  184|   112k|        if start >= end {
  185|  5.00k|            return None;
  186|   107k|        }
  187|   107k|        let len = end.distance(start);
  188|   107k|        if len < __m256i::BYTES {
  189|  34.8k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  18.0k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  18.0k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  16.8k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  72.7k|        }
  201|  72.7k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  72.7k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  72.7k|        // enough to run on the vector routine. Pointer validity is caller's
  204|  72.7k|        // responsibility.
  205|  72.7k|        //
  206|  72.7k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  72.7k|        // means we'd have to annotate this routine with `target_feature`.
  208|  72.7k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  72.7k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  72.7k|        // The real problem is that a routine with a `target_feature`
  211|  72.7k|        // annotation generally can't be inlined into caller code unless
  212|  72.7k|        // the caller code has the same target feature annotations. Namely,
  213|  72.7k|        // the common case (at time of writing) is for calling code to not
  214|  72.7k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  72.7k|        // `target_feature` on this routine, it can be inlined which will
  216|  72.7k|        // handle some of the short-haystack cases above without touching the
  217|  72.7k|        // architecture specific code.
  218|  72.7k|        self.find_raw_avx2(start, end)
  219|   112k|    }
_RNvMs2_NtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|   292k|    unsafe fn find_raw_sse2(
  765|   292k|        &self,
  766|   292k|        start: *const u8,
  767|   292k|        end: *const u8,
  768|   292k|    ) -> Option<*const u8> {
  769|   292k|        self.sse2.find_raw(start, end)
  770|   292k|    }
_RNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  16.8k|    unsafe fn find_raw_sse2(
  337|  16.8k|        &self,
  338|  16.8k|        start: *const u8,
  339|  16.8k|        end: *const u8,
  340|  16.8k|    ) -> Option<*const u8> {
  341|  16.8k|        self.sse2.find_raw(start, end)
  342|  16.8k|    }
_RNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|   112k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|   112k|        One {
   71|   112k|            sse2: generic::One::new(needle),
   72|   112k|            avx2: generic::One::new(needle),
   73|   112k|        }
   74|   112k|    }

_RNvNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  17.7M|pub(crate) fn memchr2_raw(
  221|  17.7M|    n1: u8,
  222|  17.7M|    n2: u8,
  223|  17.7M|    start: *const u8,
  224|  17.7M|    end: *const u8,
  225|  17.7M|) -> Option<*const u8> {
  226|  17.7M|    // SAFETY: We provide a valid function pointer type.
  227|  17.7M|    unsafe_ifunc!(
  228|  17.7M|        Two,
  229|  17.7M|        find_raw,
  230|  17.7M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  17.7M|        Option<*const u8>,
  232|  17.7M|        start,
  233|  17.7M|        end,
  234|  17.7M|        n1,
  235|  17.7M|        n2
  236|  17.7M|    )
  237|  17.7M|}
_RNvNvNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  17.7M|        unsafe fn find_avx2(
   79|  17.7M|            $($needle: u8),+,
   80|  17.7M|            $hay_start: *const u8,
   81|  17.7M|            $hay_end: *const u8,
   82|  17.7M|        ) -> $retty {
   83|  17.7M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  17.7M|            $memchrty::new_unchecked($($needle),+)
   85|  17.7M|                .$memchrfind($hay_start, $hay_end)
   86|  17.7M|        }
_RNvNvNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|   112k|        unsafe fn find_avx2(
   79|   112k|            $($needle: u8),+,
   80|   112k|            $hay_start: *const u8,
   81|   112k|            $hay_end: *const u8,
   82|   112k|        ) -> $retty {
   83|   112k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|   112k|            $memchrty::new_unchecked($($needle),+)
   85|   112k|                .$memchrfind($hay_start, $hay_end)
   86|   112k|        }
_RNvNvNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_646memchr10memchr_raw:
  174|   112k|pub(crate) fn memchr_raw(
  175|   112k|    n1: u8,
  176|   112k|    start: *const u8,
  177|   112k|    end: *const u8,
  178|   112k|) -> Option<*const u8> {
  179|   112k|    // SAFETY: We provide a valid function pointer type.
  180|   112k|    unsafe_ifunc!(
  181|   112k|        One,
  182|   112k|        find_raw,
  183|   112k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|   112k|        Option<*const u8>,
  185|   112k|        start,
  186|   112k|        end,
  187|   112k|        n1
  188|   112k|    )
  189|   112k|}

_RNvXNtCs8oHv9mjUfNq_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  16.6M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  16.6M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  16.6M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  16.6M|    }
_RNvXNtCs8oHv9mjUfNq_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|  1.08M|    fn as_usize(self) -> usize {
   27|  1.08M|        self as usize
   28|  1.08M|    }

_RNCNvXs3_NtCs8oHv9mjUfNq_6memchr6memchrNtB7_7Memchr2NtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4next0Cs4WjTcpTVJQo_5oxttl:
  395|  16.3M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNCNvNtCs8oHv9mjUfNq_6memchr6memchr7memchr20Cs4WjTcpTVJQo_5oxttl:
   96|  1.44M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|  1.44M|            memchr2_raw(needle1, needle2, start, end)
   98|  1.44M|        })
_RNvXs3_NtCs8oHv9mjUfNq_6memchr6memchrNtB5_7Memchr2NtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4nextCs4WjTcpTVJQo_5oxttl:
  390|  16.3M|    fn next(&mut self) -> Option<usize> {
  391|  16.3M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  16.3M|        // pointers returns will fall within the start and end bounds, and this
  393|  16.3M|        // upholds the safety contract of `self.it.next`.
  394|  16.3M|        unsafe {
  395|  16.3M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  16.3M|        }
  397|  16.3M|    }
_RNvNtCs8oHv9mjUfNq_6memchr6memchr6memchrCs4WjTcpTVJQo_5oxttl:
   27|   112k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|   112k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|   112k|    // pointer between start and end.
   30|   112k|    unsafe {
   31|   112k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|   112k|        })
   34|   112k|    }
   35|   112k|}
_RNvNtCs8oHv9mjUfNq_6memchr6memchr12memchr2_iterCs4WjTcpTVJQo_5oxttl:
  232|  16.2M|pub fn memchr2_iter<'h>(
  233|  16.2M|    needle1: u8,
  234|  16.2M|    needle2: u8,
  235|  16.2M|    haystack: &'h [u8],
  236|  16.2M|) -> Memchr2<'h> {
  237|  16.2M|    Memchr2::new(needle1, needle2, haystack)
  238|  16.2M|}
_RNvMs2_NtCs8oHv9mjUfNq_6memchr6memchrNtB5_7Memchr23newCs4WjTcpTVJQo_5oxttl:
  377|  16.2M|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  16.2M|        Memchr2 {
  379|  16.2M|            needle1,
  380|  16.2M|            needle2,
  381|  16.2M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  16.2M|        }
  383|  16.2M|    }
_RNvNtCs8oHv9mjUfNq_6memchr6memchr7memchr2Cs4WjTcpTVJQo_5oxttl:
   92|  1.44M|pub fn memchr2(needle1: u8, needle2: u8, haystack: &[u8]) -> Option<usize> {
   93|  1.44M|    // SAFETY: memchr2_raw, when a match is found, always returns a valid
   94|  1.44M|    // pointer between start and end.
   95|  1.44M|    unsafe {
   96|  1.44M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|       |            memchr2_raw(needle1, needle2, start, end)
   98|  1.44M|        })
   99|  1.44M|    }
  100|  1.44M|}
_RNvNtCs8oHv9mjUfNq_6memchr6memchr11memchr2_rawCs4WjTcpTVJQo_5oxttl:
  574|  17.7M|unsafe fn memchr2_raw(
  575|  17.7M|    needle1: u8,
  576|  17.7M|    needle2: u8,
  577|  17.7M|    start: *const u8,
  578|  17.7M|    end: *const u8,
  579|  17.7M|) -> Option<*const u8> {
  580|  17.7M|    #[cfg(target_arch = "x86_64")]
  581|  17.7M|    {
  582|  17.7M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  17.7M|    }
  584|  17.7M|    #[cfg(target_arch = "wasm32")]
  585|  17.7M|    {
  586|  17.7M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  17.7M|    }
  588|  17.7M|    #[cfg(target_arch = "aarch64")]
  589|  17.7M|    {
  590|  17.7M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  17.7M|    }
  592|  17.7M|    #[cfg(not(any(
  593|  17.7M|        target_arch = "x86_64",
  594|  17.7M|        target_arch = "wasm32",
  595|  17.7M|        target_arch = "aarch64"
  596|  17.7M|    )))]
  597|  17.7M|    {
  598|  17.7M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  17.7M|            .find_raw(start, end)
  600|  17.7M|    }
  601|  17.7M|}
_RNvNtCs8oHv9mjUfNq_6memchr6memchr10memchr_rawB3_:
  504|   112k|unsafe fn memchr_raw(
  505|   112k|    needle: u8,
  506|   112k|    start: *const u8,
  507|   112k|    end: *const u8,
  508|   112k|) -> Option<*const u8> {
  509|   112k|    #[cfg(target_arch = "x86_64")]
  510|   112k|    {
  511|   112k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|   112k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|   112k|        // time. This function also handles using a fallback if neither AVX2
  514|   112k|        // nor SSE2 (unusual) are available.
  515|   112k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|   112k|    }
  517|   112k|    #[cfg(target_arch = "wasm32")]
  518|   112k|    {
  519|   112k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|   112k|    }
  521|   112k|    #[cfg(target_arch = "aarch64")]
  522|   112k|    {
  523|   112k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|   112k|    }
  525|   112k|    #[cfg(not(any(
  526|   112k|        target_arch = "x86_64",
  527|   112k|        target_arch = "wasm32",
  528|   112k|        target_arch = "aarch64"
  529|   112k|    )))]
  530|   112k|    {
  531|   112k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|   112k|    }
  533|   112k|}
_RNCNvNtCs8oHv9mjUfNq_6memchr6memchr6memchr0B5_:
   31|   112k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|   112k|            memchr_raw(needle, start, end)
   33|   112k|        })

_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86sse2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  225|   785k|        unsafe fn movemask(self) -> SensibleMoveMask {
  226|   785k|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  227|   785k|        }
_RNvXs_NtCs8oHv9mjUfNq_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  148|  3.84M|    fn has_non_zero(self) -> bool {
  149|  3.84M|        self.0 != 0
  150|  3.84M|    }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  275|  4.40M|        unsafe fn movemask(self) -> SensibleMoveMask {
  276|  4.40M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  277|  4.40M|        }
_RNvXs_NtCs8oHv9mjUfNq_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  173|   654k|    fn first_offset(self) -> usize {
  174|   654k|        // We are dealing with little endian here (and if we aren't, we swap
  175|   654k|        // the bytes so we are in practice), where the most significant byte
  176|   654k|        // is at a higher address. That means the least significant bit that
  177|   654k|        // is set corresponds to the position of our first matching byte.
  178|   654k|        // That position corresponds to the number of zeros after the least
  179|   654k|        // significant bit.
  180|   654k|        self.get_for_offset().trailing_zeros() as usize
  181|   654k|    }
_RNvYNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtNtCs8oHv9mjUfNq_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   65|   936k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   66|   936k|        self.movemask().has_non_zero()
   67|   936k|    }
_RNvMNtCs8oHv9mjUfNq_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  128|   654k|    fn get_for_offset(self) -> u32 {
  129|   654k|        #[cfg(target_endian = "big")]
  130|   654k|        {
  131|   654k|            self.0.swap_bytes()
  132|   654k|        }
  133|   654k|        #[cfg(target_endian = "little")]
  134|   654k|        {
  135|   654k|            self.0
  136|   654k|        }
  137|   654k|    }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86sse2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  230|  1.27M|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  231|  1.27M|            _mm_cmpeq_epi8(self, vector2)
  232|  1.27M|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector2or:
  290|  4.67M|        unsafe fn or(self, vector2: Self) -> __m256i {
  291|  4.67M|            _mm256_or_si256(self, vector2)
  292|  4.67M|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  265|  1.93M|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  266|  1.93M|            _mm256_load_si256(data as *const __m256i)
  267|  1.93M|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  280|  7.69M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  281|  7.69M|            _mm256_cmpeq_epi8(self, vector2)
  282|  7.69M|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86sse2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  220|   656k|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  221|   656k|            _mm_loadu_si128(data as *const __m128i)
  222|   656k|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86sse2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  210|  35.7M|        unsafe fn splat(byte: u8) -> __m128i {
  211|  35.7M|            _mm_set1_epi8(byte as i8)
  212|  35.7M|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86sse2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iNtB4_6Vector2or:
  240|   617k|        unsafe fn or(self, vector2: Self) -> __m128i {
  241|   617k|            _mm_or_si128(self, vector2)
  242|   617k|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  270|  2.08M|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  271|  2.08M|            _mm256_loadu_si256(data as *const __m256i)
  272|  2.08M|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  260|  35.7M|        unsafe fn splat(byte: u8) -> __m256i {
  261|  35.7M|            _mm256_set1_epi8(byte as i8)
  262|  35.7M|        }
_RNvXs_NtCs8oHv9mjUfNq_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  163|   757k|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  164|   757k|        SensibleMoveMask(self.0 | other.0)
  165|   757k|    }

_RNvMs2_NtCsfr4O1C3G5Ja_9once_cell3impINtB5_8OnceCellNtNtCsdBW21Yiwikk_5alloc6string6StringE14is_initializedCs8psSAyD4vLQ_13libfuzzer_sys:
   49|  34.6k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  34.6k|        // An `Acquire` load is enough because that makes all the initialization
   51|  34.6k|        // operations visible to us, and, this being a fast path, weaker
   52|  34.6k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  34.6k|        // `SeqCst` operations on the slow path.
   54|  34.6k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  34.6k|    }

_RNvMs4_NtCsfr4O1C3G5Ja_9once_cell4syncINtB5_8OnceCellNtNtCsdBW21Yiwikk_5alloc6string6StringE3getCs8psSAyD4vLQ_13libfuzzer_sys:
  963|  34.6k|        pub fn get(&self) -> Option<&T> {
  964|  34.6k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  34.6k|                None
  969|       |            }
  970|  34.6k|        }

_RNvMCsebFzSuz8Vhk_10oxilangtagINtB2_11LanguageTagReE10into_innerCs4WjTcpTVJQo_5oxttl:
   54|  41.0k|    pub fn into_inner(self) -> T {
   55|  41.0k|        self.tag
   56|  41.0k|    }
_RNvMCsebFzSuz8Vhk_10oxilangtagINtB2_11LanguageTagReE5parseCs4WjTcpTVJQo_5oxttl:
   41|  73.9k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   42|  73.9k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   43|  41.0k|        Ok(Self { tag, positions })
   44|  73.9k|    }
_RNvXsE_CsebFzSuz8Vhk_10oxilangtagNtB5_16VoidOutputBufferNtNtCsl2lhD68vXAd_4core7default7Default7defaultCs4WjTcpTVJQo_5oxttl:
  547|  73.9k|#[derive(Default)]
_RINvCsebFzSuz8Vhk_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECsbrE1BkJ52QU_5oxrdf:
  621|  72.1k|fn parse_langtag(
  622|  72.1k|    input: &str,
  623|  72.1k|    output: &mut impl OutputBuffer,
  624|  72.1k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  625|  72.1k|    #[derive(PartialEq, Eq)]
  626|  72.1k|    enum State {
  627|  72.1k|        Start,
  628|  72.1k|        AfterLanguage,
  629|  72.1k|        AfterExtLang,
  630|  72.1k|        AfterScript,
  631|  72.1k|        AfterRegion,
  632|  72.1k|        InExtension { expected: bool },
  633|  72.1k|        InPrivateUse { expected: bool },
  634|  72.1k|    }
  635|  72.1k|
  636|  72.1k|    let mut state = State::Start;
  637|  72.1k|    let mut language_end = 0;
  638|  72.1k|    let mut extlang_end = 0;
  639|  72.1k|    let mut script_end = 0;
  640|  72.1k|    let mut region_end = 0;
  641|  72.1k|    let mut variant_end = 0;
  642|  72.1k|    let mut extension_end = 0;
  643|  72.1k|    let mut extlangs_count = 0;
  644|   120k|    for (subtag, end) in SubTagIterator::new(input) {
  645|   120k|        if subtag.is_empty() {
  646|      0|            return Err(LanguageTagParseError {
  647|      0|                kind: TagParseErrorKind::EmptySubtag,
  648|      0|            });
  649|   120k|        }
  650|   120k|        if subtag.len() > 8 {
  651|  5.88k|            return Err(LanguageTagParseError {
  652|  5.88k|                kind: TagParseErrorKind::SubtagTooLong,
  653|  5.88k|            });
  654|   114k|        }
  655|   114k|        if state == State::Start {
  656|       |            // Primary language
  657|  66.3k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  658|  9.43k|                return Err(LanguageTagParseError {
  659|  9.43k|                    kind: TagParseErrorKind::InvalidLanguage,
  660|  9.43k|                });
  661|  56.9k|            }
  662|  56.9k|            language_end = end;
  663|  56.9k|            output.extend(to_lowercase(subtag));
  664|  56.9k|            if subtag.len() < 4 {
  665|  29.7k|                // extlangs are only allowed for short language tags
  666|  29.7k|                state = State::AfterLanguage;
  667|  29.7k|            } else {
  668|  27.1k|                state = State::AfterExtLang;
  669|  27.1k|            }
  670|  48.2k|        } else if let State::InPrivateUse { .. } = state {
  671|  2.82k|            if !is_alphanumeric(subtag) {
  672|      0|                return Err(LanguageTagParseError {
  673|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  674|      0|                });
  675|  2.82k|            }
  676|  2.82k|            output.push('-');
  677|  2.82k|            output.extend(to_lowercase(subtag));
  678|  2.82k|            state = State::InPrivateUse { expected: false };
  679|  45.4k|        } else if subtag == "x" || subtag == "X" {
  680|       |            // We make sure extension is found
  681|  4.95k|            if let State::InExtension { expected: true } = state {
  682|    732|                return Err(LanguageTagParseError {
  683|    732|                    kind: TagParseErrorKind::EmptyExtension,
  684|    732|                });
  685|  4.22k|            }
  686|  4.22k|            output.push('-');
  687|  4.22k|            output.push('x');
  688|  4.22k|            state = State::InPrivateUse { expected: true };
  689|  40.4k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  690|       |            // We make sure extension is found
  691|  15.5k|            if let State::InExtension { expected: true } = state {
  692|  1.19k|                return Err(LanguageTagParseError {
  693|  1.19k|                    kind: TagParseErrorKind::EmptyExtension,
  694|  1.19k|                });
  695|  14.3k|            }
  696|  14.3k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  697|  14.3k|            output.push('-');
  698|  14.3k|            output.push(extension_tag);
  699|  14.3k|            state = State::InExtension { expected: true };
  700|  24.9k|        } else if let State::InExtension { .. } = state {
  701|  2.81k|            if !is_alphanumeric(subtag) {
  702|      0|                return Err(LanguageTagParseError {
  703|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  704|      0|                });
  705|  2.81k|            }
  706|  2.81k|            extension_end = end;
  707|  2.81k|            output.push('-');
  708|  2.81k|            output.extend(to_lowercase(subtag));
  709|  2.81k|            state = State::InExtension { expected: false };
  710|  22.0k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  711|  3.62k|            extlangs_count += 1;
  712|  3.62k|            if extlangs_count > 3 {
  713|    124|                return Err(LanguageTagParseError {
  714|    124|                    kind: TagParseErrorKind::TooManyExtlangs,
  715|    124|                });
  716|  3.49k|            }
  717|  3.49k|            // valid extlangs
  718|  3.49k|            extlang_end = end;
  719|  3.49k|            output.push('-');
  720|  3.49k|            output.extend(to_lowercase(subtag));
  721|  18.4k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  722|  15.3k|            && subtag.len() == 4
  723|  2.23k|            && is_alphabetic(subtag)
  724|  2.23k|        {
  725|  2.23k|            // Script
  726|  2.23k|            script_end = end;
  727|  2.23k|            output.push('-');
  728|  2.23k|            output.extend(to_uppercase_first(subtag));
  729|  2.23k|            state = State::AfterScript;
  730|  16.2k|        } else if (state == State::AfterLanguage
  731|  8.53k|            || state == State::AfterExtLang
  732|  3.10k|            || state == State::AfterScript)
  733|  13.8k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  734|  5.22k|                || subtag.len() == 3 && is_numeric(subtag))
  735|  8.65k|        {
  736|  8.65k|            // Region
  737|  8.65k|            region_end = end;
  738|  8.65k|            output.push('-');
  739|  8.65k|            output.extend(to_uppercase(subtag));
  740|  8.65k|            state = State::AfterRegion;
  741|  8.65k|        } else if (state == State::AfterLanguage
  742|  6.67k|            || state == State::AfterExtLang
  743|  2.34k|            || state == State::AfterScript
  744|  2.34k|            || state == State::AfterRegion)
  745|  7.57k|            && is_alphanumeric(subtag)
  746|  7.57k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  747|  3.74k|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  748|  3.83k|        {
  749|  3.83k|            // Variant
  750|  3.83k|            variant_end = end;
  751|  3.83k|            output.push('-');
  752|  3.83k|            output.extend(to_lowercase(subtag));
  753|  3.83k|            state = State::AfterRegion;
  754|  3.83k|        } else {
  755|  3.74k|            return Err(LanguageTagParseError {
  756|  3.74k|                kind: TagParseErrorKind::InvalidSubtag,
  757|  3.74k|            });
  758|       |        }
  759|       |    }
  760|       |
  761|       |    //We make sure we are in a correct final state
  762|  51.0k|    if let State::InExtension { expected: true } = state {
  763|  9.63k|        return Err(LanguageTagParseError {
  764|  9.63k|            kind: TagParseErrorKind::EmptyExtension,
  765|  9.63k|        });
  766|  41.3k|    }
  767|  41.3k|    if let State::InPrivateUse { expected: true } = state {
  768|  2.12k|        return Err(LanguageTagParseError {
  769|  2.12k|            kind: TagParseErrorKind::EmptyPrivateUse,
  770|  2.12k|        });
  771|  39.2k|    }
  772|  39.2k|
  773|  39.2k|    //We make sure we have not skipped anyone
  774|  39.2k|    if extlang_end < language_end {
  775|  36.2k|        extlang_end = language_end;
  776|  36.2k|    }
  777|  39.2k|    if script_end < extlang_end {
  778|  37.0k|        script_end = extlang_end;
  779|  37.0k|    }
  780|  39.2k|    if region_end < script_end {
  781|  34.7k|        region_end = script_end;
  782|  34.7k|    }
  783|  39.2k|    if variant_end < region_end {
  784|  35.4k|        variant_end = region_end;
  785|  35.4k|    }
  786|  39.2k|    if extension_end < variant_end {
  787|  38.0k|        extension_end = variant_end;
  788|  38.0k|    }
  789|       |
  790|  39.2k|    Ok(TagElementsPositions {
  791|  39.2k|        language_end,
  792|  39.2k|        extlang_end,
  793|  39.2k|        script_end,
  794|  39.2k|        region_end,
  795|  39.2k|        variant_end,
  796|  39.2k|        extension_end,
  797|  39.2k|    })
  798|  72.1k|}
_RINvXsr_CsebFzSuz8Vhk_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECsbrE1BkJ52QU_5oxrdf:
  560|  1.81k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsebFzSuz8Vhk_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECsbrE1BkJ52QU_5oxrdf:
  560|  69.8k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvCsebFzSuz8Vhk_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECsbrE1BkJ52QU_5oxrdf:
  576|  73.9k|fn parse_language_tag(
  577|  73.9k|    input: &str,
  578|  73.9k|    output: &mut impl OutputBuffer,
  579|  73.9k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  580|       |    //grandfathered tags
  581|  73.9k|    if let Some(tag) = GRANDFATHEREDS
  582|  73.9k|        .iter()
  583|  73.9k|        .find(|record| record.eq_ignore_ascii_case(input))
  584|       |    {
  585|      0|        output.push_str(tag);
  586|      0|        Ok(TagElementsPositions {
  587|      0|            language_end: tag.len(),
  588|      0|            extlang_end: tag.len(),
  589|      0|            script_end: tag.len(),
  590|      0|            region_end: tag.len(),
  591|      0|            variant_end: tag.len(),
  592|      0|            extension_end: tag.len(),
  593|      0|        })
  594|  73.9k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  595|       |        // private use
  596|  1.81k|        if !is_alphanumeric_or_dash(input) {
  597|      0|            Err(LanguageTagParseError {
  598|      0|                kind: TagParseErrorKind::ForbiddenChar,
  599|      0|            })
  600|  1.81k|        } else if input.len() == 2 {
  601|      0|            Err(LanguageTagParseError {
  602|      0|                kind: TagParseErrorKind::EmptyPrivateUse,
  603|      0|            })
  604|       |        } else {
  605|  1.81k|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  606|  1.81k|            Ok(TagElementsPositions {
  607|  1.81k|                language_end: input.len(),
  608|  1.81k|                extlang_end: input.len(),
  609|  1.81k|                script_end: input.len(),
  610|  1.81k|                region_end: input.len(),
  611|  1.81k|                variant_end: input.len(),
  612|  1.81k|                extension_end: input.len(),
  613|  1.81k|            })
  614|       |        }
  615|       |    } else {
  616|  72.1k|        parse_langtag(input, output)
  617|       |    }
  618|  73.9k|}
_RINvXsr_CsebFzSuz8Vhk_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECsbrE1BkJ52QU_5oxrdf:
  560|  8.65k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsebFzSuz8Vhk_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECsbrE1BkJ52QU_5oxrdf:
  560|  2.23k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCsebFzSuz8Vhk_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0CsbrE1BkJ52QU_5oxrdf:
  583|  1.92M|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvCsebFzSuz8Vhk_10oxilangtag23is_alphanumeric_or_dashCsbrE1BkJ52QU_5oxrdf:
  875|  1.81k|fn is_alphanumeric_or_dash(s: &str) -> bool {
  876|  1.81k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  877|  1.81k|}
_RNvXsw_CsebFzSuz8Vhk_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4nextCsbrE1BkJ52QU_5oxrdf:
  851|   171k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  852|   171k|        let tag = self.split.next()?;
  853|   120k|        let tag_end = self.position + tag.len();
  854|   120k|        self.position = tag_end + 1;
  855|   120k|        Some((tag, tag_end))
  856|   171k|    }
_RNvCsebFzSuz8Vhk_10oxilangtag12to_lowercaseCsbrE1BkJ52QU_5oxrdf:
  892|  69.8k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  893|  69.8k|    s.chars().map(|c| c.to_ascii_lowercase())
  894|  69.8k|}
_RNvCsebFzSuz8Vhk_10oxilangtag10is_numericCsbrE1BkJ52QU_5oxrdf:
  865|  3.70k|fn is_numeric(s: &str) -> bool {
  866|  3.70k|    s.chars().all(|x| x.is_ascii_digit())
  867|  3.70k|}
_RNvCsebFzSuz8Vhk_10oxilangtag12to_uppercaseCsbrE1BkJ52QU_5oxrdf:
  880|  8.65k|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  881|  8.65k|    s.chars().map(|c| c.to_ascii_uppercase())
  882|  8.65k|}
_RNvMsv_CsebFzSuz8Vhk_10oxilangtagNtB5_14SubTagIterator3newCsbrE1BkJ52QU_5oxrdf:
  839|  72.1k|    fn new(input: &'a str) -> Self {
  840|  72.1k|        Self {
  841|  72.1k|            split: input.split('-'),
  842|  72.1k|            position: 0,
  843|  72.1k|        }
  844|  72.1k|    }
_RNvXs_NvCsebFzSuz8Vhk_10oxilangtag13parse_langtagNtB4_5StateNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCsbrE1BkJ52QU_5oxrdf:
  625|   211k|    #[derive(PartialEq, Eq)]
_RNvCsebFzSuz8Vhk_10oxilangtag15is_alphanumericCsbrE1BkJ52QU_5oxrdf:
  870|  28.7k|fn is_alphanumeric(s: &str) -> bool {
  871|  28.7k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  872|  28.7k|}
_RNvCsebFzSuz8Vhk_10oxilangtag18to_uppercase_firstCsbrE1BkJ52QU_5oxrdf:
  886|  2.23k|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  887|  2.23k|    let mut chars = s.chars();
  888|  2.23k|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  889|  2.23k|}
_RNvXsq_CsebFzSuz8Vhk_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsbrE1BkJ52QU_5oxrdf:
  552|  61.0k|    fn push(&mut self, _: char) {}
_RNvCsebFzSuz8Vhk_10oxilangtag13is_alphabeticCsbrE1BkJ52QU_5oxrdf:
  860|  75.2k|fn is_alphabetic(s: &str) -> bool {
  861|  75.2k|    s.chars().all(|x| x.is_ascii_alphabetic())
  862|  75.2k|}
_RNCNvCsebFzSuz8Vhk_10oxilangtag15is_alphanumeric0B3_:
  871|  63.5k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNvXso_CsebFzSuz8Vhk_10oxilangtagNtB5_21LanguageTagParseErrorNtNtCsl2lhD68vXAd_4core3fmt7Display3fmt:
  482|  32.8k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  483|  32.8k|        match self.kind {
  484|       |            TagParseErrorKind::EmptyExtension => {
  485|  11.5k|                write!(f, "If an extension subtag is present, it must not be empty")
  486|       |            }
  487|       |            TagParseErrorKind::EmptyPrivateUse => {
  488|  2.12k|                write!(f, "If the `x` subtag is present, it must not be empty")
  489|       |            }
  490|       |            TagParseErrorKind::ForbiddenChar => {
  491|      0|                write!(f, "The langtag contains a char not allowed")
  492|       |            }
  493|  3.74k|            TagParseErrorKind::InvalidSubtag => write!(
  494|  3.74k|                f,
  495|  3.74k|                "A subtag fails to parse, it does not match any other subtags"
  496|  3.74k|            ),
  497|  9.43k|            TagParseErrorKind::InvalidLanguage => write!(f, "The given language subtag is invalid"),
  498|       |            TagParseErrorKind::SubtagTooLong => {
  499|  5.88k|                write!(f, "A subtag may be eight characters in length at maximum")
  500|       |            }
  501|      0|            TagParseErrorKind::EmptySubtag => write!(f, "A subtag should not be empty"),
  502|       |            TagParseErrorKind::TooManyExtlangs => {
  503|    124|                write!(f, "At maximum three extlangs are allowed")
  504|       |            }
  505|       |        }
  506|  32.8k|    }
_RNCNvCsebFzSuz8Vhk_10oxilangtag13is_alphabetic0B3_:
  861|   262k|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCsebFzSuz8Vhk_10oxilangtag23is_alphanumeric_or_dash0B3_:
  876|  23.8k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
_RNCNvCsebFzSuz8Vhk_10oxilangtag10is_numeric0B3_:
  866|  3.70k|    s.chars().all(|x| x.is_ascii_digit())

_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE14parse_relativeCsbrE1BkJ52QU_5oxrdf:
 1152|  71.0k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1153|  71.0k|        if let Some(base) = self.base {
 1154|      0|            match self.input.front() {
 1155|       |                None => {
 1156|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1157|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1158|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1159|      0|                    self.output_positions.path_end = base.positions.path_end;
 1160|      0|                    self.output_positions.query_end = base.positions.query_end;
 1161|      0|                    Ok(())
 1162|       |                }
 1163|       |                Some('/') => {
 1164|      0|                    self.input.next();
 1165|      0|                    self.parse_relative_slash(&base)
 1166|       |                }
 1167|       |                Some('?') => {
 1168|      0|                    self.input.next();
 1169|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1170|      0|                    self.output.push('?');
 1171|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1172|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1173|      0|                    self.output_positions.path_end = base.positions.path_end;
 1174|      0|                    self.parse_query()
 1175|       |                }
 1176|       |                Some('#') => {
 1177|      0|                    self.input.next();
 1178|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1179|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1180|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1181|      0|                    self.output_positions.path_end = base.positions.path_end;
 1182|      0|                    self.output_positions.query_end = base.positions.query_end;
 1183|      0|                    self.output.push('#');
 1184|      0|                    self.parse_fragment()
 1185|       |                }
 1186|       |                _ => {
 1187|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1188|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1189|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1190|      0|                    self.output_positions.path_end = base.positions.path_end;
 1191|      0|                    self.remove_last_segment();
 1192|      0|                    if self.output.len() > base.positions.scheme_end {
 1193|      0|                        // We have some path or authority, we keep a base '/'
 1194|      0|                        self.output.push('/');
 1195|      0|                    }
 1196|      0|                    self.parse_path()
 1197|       |                }
 1198|       |            }
 1199|       |        } else {
 1200|  71.0k|            self.output_positions.scheme_end = 0;
 1201|  71.0k|            self.input_scheme_end = 0;
 1202|  71.0k|            if self.input.starts_with('/') {
 1203|  16.1k|                self.input.next();
 1204|  16.1k|                self.output.push('/');
 1205|  16.1k|                self.parse_path_or_authority()
 1206|       |            } else {
 1207|  54.9k|                self.output_positions.authority_end = 0;
 1208|  54.9k|                self.parse_path()
 1209|       |            }
 1210|       |        }
 1211|  71.0k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_pathCsbrE1BkJ52QU_5oxrdf:
 1344|  91.2k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1345|  1.03M|        loop {
 1346|  1.03M|            let c = self.input.next();
 1347|  1.03M|            match c {
 1348|       |                None | Some('/') | Some('?') | Some('#') => {
 1349|   114k|                    if self.output.as_str().ends_with("/..") {
 1350|      0|                        self.remove_last_segment();
 1351|      0|                        self.remove_last_segment();
 1352|      0|                        self.output.push('/');
 1353|   114k|                    } else if self.output.as_str().ends_with("/.") {
 1354|      0|                        self.remove_last_segment();
 1355|      0|                        self.output.push('/');
 1356|   114k|                    } else if c == Some('/') {
 1357|  52.0k|                        self.output.push('/');
 1358|  62.0k|                    }
 1359|       |
 1360|   114k|                    if c == Some('?') {
 1361|  13.3k|                        self.output_positions.path_end = self.output.len();
 1362|  13.3k|                        self.output.push('?');
 1363|  13.3k|                        return self.parse_query();
 1364|   100k|                    } else if c == Some('#') {
 1365|  5.22k|                        self.output_positions.path_end = self.output.len();
 1366|  5.22k|                        self.output_positions.query_end = self.output.len();
 1367|  5.22k|                        self.output.push('#');
 1368|  5.22k|                        return self.parse_fragment();
 1369|  95.4k|                    } else if c == None {
 1370|  43.4k|                        self.output_positions.path_end = self.output.len();
 1371|  43.4k|                        self.output_positions.query_end = self.output.len();
 1372|  43.4k|                        return Ok(());
 1373|  52.0k|                    }
 1374|       |                }
 1375|   922k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1376|       |            }
 1377|       |        }
 1378|  91.2k|    }
_RINvMs11_Cs72NQLJxIjgJ_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferE11parse_erroruECsbrE1BkJ52QU_5oxrdf:
 1454|  51.8k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1455|  51.8k|        Err(IriParseError { kind })
 1456|  51.8k|    }
_RNvXsV_Cs72NQLJxIjgJ_5oxiriINtB5_3IriNtNtCsdBW21Yiwikk_5alloc6string6StringEINtNtCsl2lhD68vXAd_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsbrE1BkJ52QU_5oxrdf:
  871|  52.8k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  872|  52.8k|        if iri.is_absolute() {
  873|  30.8k|            Ok(Self(iri))
  874|       |        } else {
  875|  22.0k|            Err(IriParseError {
  876|  22.0k|                kind: IriParseErrorKind::NoScheme,
  877|  22.0k|            })
  878|       |        }
  879|  52.8k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE18parse_scheme_startCsbrE1BkJ52QU_5oxrdf:
 1101|   104k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1102|   104k|        match self.input.front() {
 1103|  1.76k|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1104|  95.7k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1105|  45.7k|            _ => self.parse_relative(),
 1106|       |        }
 1107|   104k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_hostCsbrE1BkJ52QU_5oxrdf:
 1255|  11.6k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1256|  11.6k|        if self.input.starts_with('[') {
 1257|       |            // IP v6
 1258|  1.69k|            let start_position = self.input.position;
 1259|  67.0k|            while let Some(c) = self.input.next() {
 1260|  65.5k|                self.output.push(c);
 1261|  65.5k|                if c == ']' {
 1262|    230|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1263|    230|                    if let Err(error) = Ipv6Addr::from_str(ip) {
 1264|    230|                        return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1265|      0|                    }
 1266|      0|
 1267|      0|                    let c = self.input.next();
 1268|      0|                    return match c {
 1269|       |                        Some(':') => {
 1270|      0|                            self.output.push(':');
 1271|      0|                            self.parse_port()
 1272|       |                        }
 1273|       |                        None | Some('/') | Some('?') | Some('#') => {
 1274|      0|                            self.output_positions.authority_end = self.output.len();
 1275|      0|                            self.parse_path_start(c)
 1276|       |                        }
 1277|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1278|       |                    };
 1279|  65.3k|                }
 1280|       |            }
 1281|  1.46k|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1282|       |        } else {
 1283|       |            // Other host
 1284|  80.1k|            loop {
 1285|  80.1k|                let c = self.input.next();
 1286|  80.1k|                match c {
 1287|       |                    Some(':') => {
 1288|  1.40k|                        self.output.push(':');
 1289|  1.40k|                        return self.parse_port();
 1290|       |                    }
 1291|       |                    None | Some('/') | Some('?') | Some('#') => {
 1292|  7.30k|                        self.output_positions.authority_end = self.output.len();
 1293|  7.30k|                        return self.parse_path_start(c);
 1294|       |                    }
 1295|  71.4k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1296|       |                }
 1297|       |            }
 1298|       |        }
 1299|  11.6k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE16parse_path_startCsbrE1BkJ52QU_5oxrdf:
 1315|  7.96k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1316|  7.96k|        match c {
 1317|       |            None => {
 1318|  3.31k|                self.output_positions.path_end = self.output.len();
 1319|  3.31k|                self.output_positions.query_end = self.output.len();
 1320|  3.31k|                Ok(())
 1321|       |            }
 1322|       |            Some('?') => {
 1323|    946|                self.output_positions.path_end = self.output.len();
 1324|    946|                self.output.push('?');
 1325|    946|                self.parse_query()
 1326|       |            }
 1327|       |            Some('#') => {
 1328|    956|                self.output_positions.path_end = self.output.len();
 1329|    956|                self.output_positions.query_end = self.output.len();
 1330|    956|                self.output.push('#');
 1331|    956|                self.parse_fragment()
 1332|       |            }
 1333|       |            Some('/') => {
 1334|  2.74k|                self.output.push('/');
 1335|  2.74k|                self.parse_path()
 1336|       |            }
 1337|      0|            Some(c) => {
 1338|      0|                self.read_url_codepoint_or_echar(c)?;
 1339|      0|                self.parse_path()
 1340|       |            }
 1341|       |        }
 1342|  7.96k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE33read_url_query_codepoint_or_echarCsbrE1BkJ52QU_5oxrdf:
 1422|   445k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1423|   445k|        if c == '%' {
 1424|    754|            self.read_echar()
 1425|   444k|        } else if is_url_query_code_point(c) {
 1426|   435k|            self.output.push(c);
 1427|   435k|            Ok(())
 1428|       |        } else {
 1429|  8.93k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1430|       |        }
 1431|   445k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10read_echarCsbrE1BkJ52QU_5oxrdf:
 1434|  8.03k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1435|  8.03k|        let c1 = self.input.next();
 1436|  8.03k|        let c2 = self.input.next();
 1437|  8.03k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1438|  2.28k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1439|       |        {
 1440|  1.45k|            self.output.push('%');
 1441|  1.45k|            self.output.push(c1.unwrap());
 1442|  1.45k|            self.output.push(c2.unwrap());
 1443|  1.45k|            Ok(())
 1444|       |        } else {
 1445|  6.58k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1446|  6.58k|                Some('%'),
 1447|  6.58k|                c1,
 1448|  6.58k|                c2,
 1449|  6.58k|            ]))
 1450|       |        }
 1451|  8.03k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE5parseCsbrE1BkJ52QU_5oxrdf:
 1076|   104k|    fn parse(
 1077|   104k|        iri: &'a str,
 1078|   104k|        base: Option<IriRef<&'a str>>,
 1079|   104k|        output: &'a mut O,
 1080|   104k|    ) -> Result<IriElementsPositions, IriParseError> {
 1081|   104k|        let mut parser = Self {
 1082|   104k|            iri,
 1083|   104k|            base,
 1084|   104k|            input: ParserInput {
 1085|   104k|                value: iri.chars(),
 1086|   104k|                position: 0,
 1087|   104k|            },
 1088|   104k|            output,
 1089|   104k|            output_positions: IriElementsPositions {
 1090|   104k|                scheme_end: 0,
 1091|   104k|                authority_end: 0,
 1092|   104k|                path_end: 0,
 1093|   104k|                query_end: 0,
 1094|   104k|            },
 1095|   104k|            input_scheme_end: 0,
 1096|   104k|        };
 1097|   104k|        parser.parse_scheme_start()?;
 1098|  52.8k|        Ok(parser.output_positions)
 1099|   104k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE14parse_fragmentCsbrE1BkJ52QU_5oxrdf:
 1394|  7.07k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1395|   151k|        while let Some(c) = self.input.next() {
 1396|   149k|            self.read_url_codepoint_or_echar(c)?
 1397|       |        }
 1398|  2.09k|        Ok(())
 1399|  7.07k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE12parse_schemeCsbrE1BkJ52QU_5oxrdf:
 1109|  57.1k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1110|   506k|        loop {
 1111|   506k|            let c = self.input.next();
 1112|   505k|            match c {
 1113|   505k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1114|   449k|                    self.output.push(c)
 1115|       |                }
 1116|       |                Some(':') => {
 1117|  31.9k|                    self.output.push(':');
 1118|  31.9k|                    self.output_positions.scheme_end = self.output.len();
 1119|  31.9k|                    self.input_scheme_end = self.input.position;
 1120|  31.9k|                    return if self.input.starts_with('/') {
 1121|  4.67k|                        self.input.next();
 1122|  4.67k|                        self.output.push('/');
 1123|  4.67k|                        self.parse_path_or_authority()
 1124|       |                    } else {
 1125|  27.2k|                        self.output_positions.authority_end = self.output.len();
 1126|  27.2k|                        self.parse_path()
 1127|       |                    };
 1128|       |                }
 1129|       |                _ => {
 1130|  25.2k|                    self.input = ParserInput {
 1131|  25.2k|                        value: self.iri.chars(),
 1132|  25.2k|                        position: 0,
 1133|  25.2k|                    }; // reset
 1134|  25.2k|                    self.output.clear();
 1135|  25.2k|                    return self.parse_relative();
 1136|       |                }
 1137|       |            }
 1138|       |        }
 1139|  57.1k|    }
_RNvMsp_Cs72NQLJxIjgJ_5oxiriINtB5_3IriNtNtCsdBW21Yiwikk_5alloc6string6StringE5parseCsbrE1BkJ52QU_5oxrdf:
  501|   104k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  502|   104k|        IriRef::parse(iri)?.try_into()
  503|   104k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE23parse_path_or_authorityCsbrE1BkJ52QU_5oxrdf:
 1141|  20.8k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1142|  20.8k|        if self.input.starts_with('/') {
 1143|  14.4k|            self.input.next();
 1144|  14.4k|            self.output.push('/');
 1145|  14.4k|            self.parse_authority()
 1146|       |        } else {
 1147|  6.32k|            self.output_positions.authority_end = self.output.len() - 1;
 1148|  6.32k|            self.parse_path()
 1149|       |        }
 1150|  20.8k|    }
_RNvMCs72NQLJxIjgJ_5oxiriINtB2_6IriRefNtNtCsdBW21Yiwikk_5alloc6string6StringE5parseCsbrE1BkJ52QU_5oxrdf:
   55|   104k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   56|   104k|        let positions = IriParser::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   57|  52.8k|        Ok(Self { iri, positions })
   58|   104k|    }
_RNvMCs72NQLJxIjgJ_5oxiriINtB2_6IriRefNtNtCsdBW21Yiwikk_5alloc6string6StringE11is_absoluteCsbrE1BkJ52QU_5oxrdf:
  146|  52.8k|    pub fn is_absolute(&self) -> bool {
  147|  52.8k|        self.positions.scheme_end != 0
  148|  52.8k|    }
_RNCNvMs11_Cs72NQLJxIjgJ_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferE10read_echars_0CsbrE1BkJ52QU_5oxrdf:
 1438|  2.22k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE11parse_queryCsbrE1BkJ52QU_5oxrdf:
 1380|  14.2k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1381|   450k|        while let Some(c) = self.input.next() {
 1382|   446k|            if c == '#' {
 1383|    898|                self.output_positions.query_end = self.output.len();
 1384|    898|                self.output.push('#');
 1385|    898|                return self.parse_fragment();
 1386|       |            } else {
 1387|   445k|                self.read_url_query_codepoint_or_echar(c)?
 1388|       |            }
 1389|       |        }
 1390|  4.04k|        self.output_positions.query_end = self.output.len();
 1391|  4.04k|        Ok(())
 1392|  14.2k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE15parse_authorityCsbrE1BkJ52QU_5oxrdf:
 1231|  14.4k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1232|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1233|   136k|        loop {
 1234|   136k|            let c = self.input.next();
 1235|   136k|            match c {
 1236|       |                Some('@') => {
 1237|  1.13k|                    self.output.push('@');
 1238|  1.13k|                    return self.parse_host();
 1239|       |                }
 1240|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1241|  10.4k|                    self.input = ParserInput {
 1242|  10.4k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1243|  10.4k|                        position: self.input_scheme_end + 2,
 1244|  10.4k|                    };
 1245|  10.4k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1246|  10.4k|                    return self.parse_host();
 1247|       |                }
 1248|   124k|                Some(c) => {
 1249|   124k|                    self.read_url_codepoint_or_echar(c)?;
 1250|       |                }
 1251|       |            }
 1252|       |        }
 1253|  14.4k|    }
_RNvMsp_Cs72NQLJxIjgJ_5oxiriINtB5_3IriNtNtCsdBW21Yiwikk_5alloc6string6StringE10into_innerCsbrE1BkJ52QU_5oxrdf:
  568|  22.7k|    pub fn into_inner(self) -> T {
  569|  22.7k|        self.0.into_inner()
  570|  22.7k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_portCsbrE1BkJ52QU_5oxrdf:
 1301|  1.40k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1302|  5.14k|        loop {
 1303|  5.14k|            let c = self.input.next();
 1304|  4.99k|            match c {
 1305|  4.99k|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1306|       |                Some('/') | Some('?') | Some('#') | None => {
 1307|    658|                    self.output_positions.authority_end = self.output.len();
 1308|    658|                    return self.parse_path_start(c);
 1309|       |                }
 1310|    746|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1311|       |            }
 1312|       |        }
 1313|  1.40k|    }
_RNvMCs72NQLJxIjgJ_5oxiriINtB2_6IriRefNtNtCsdBW21Yiwikk_5alloc6string6StringE10into_innerCsbrE1BkJ52QU_5oxrdf:
  132|  22.7k|    pub fn into_inner(self) -> T {
  133|  22.7k|        self.iri
  134|  22.7k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE27read_url_codepoint_or_echarCsbrE1BkJ52QU_5oxrdf:
 1410|  1.26M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1411|  1.26M|        if c == '%' {
 1412|  7.28k|            self.read_echar()
 1413|  1.26M|        } else if is_url_code_point(c) {
 1414|  1.22M|            self.output.push(c);
 1415|  1.22M|            Ok(())
 1416|       |        } else {
 1417|  32.1k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1418|       |        }
 1419|  1.26M|    }
_RNCNvMs11_Cs72NQLJxIjgJ_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferE10read_echar0CsbrE1BkJ52QU_5oxrdf:
 1437|  7.11k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs10_Cs72NQLJxIjgJ_5oxiriNtB6_11ParserInput5frontCsbrE1BkJ52QU_5oxrdf:
 1053|   104k|    fn front(&self) -> Option<char> {
 1054|   104k|        self.value.clone().next()
 1055|   104k|    }
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer5clearCsbrE1BkJ52QU_5oxrdf:
  985|  25.2k|    fn clear(&mut self) {
  986|  25.2k|        self.len = 0;
  987|  25.2k|    }
_RNvMs10_Cs72NQLJxIjgJ_5oxiriNtB6_11ParserInput11starts_withCsbrE1BkJ52QU_5oxrdf:
 1058|   135k|    fn starts_with(&self, c: char) -> bool {
 1059|   135k|        self.value.as_str().starts_with(c)
 1060|   135k|    }
_RNvXs1b_Cs72NQLJxIjgJ_5oxiriNtB6_16VoidOutputBufferNtNtCsl2lhD68vXAd_4core7default7Default7defaultCsbrE1BkJ52QU_5oxrdf:
  968|   104k|#[derive(Default)]
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCsbrE1BkJ52QU_5oxrdf:
  990|  10.4k|    fn truncate(&mut self, new_len: usize) {
  991|  10.4k|        self.len = new_len;
  992|  10.4k|    }
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCsbrE1BkJ52QU_5oxrdf:
  995|   198k|    fn len(&self) -> usize {
  996|   198k|        self.len
  997|   198k|    }
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCsbrE1BkJ52QU_5oxrdf:
 1000|   228k|    fn as_str(&self) -> &str {
 1001|   228k|        ""
 1002|   228k|    }
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsbrE1BkJ52QU_5oxrdf:
  975|  2.33M|    fn push(&mut self, c: char) {
  976|  2.33M|        self.len += c.len_utf8();
  977|  2.33M|    }
_RNvMs10_Cs72NQLJxIjgJ_5oxiriNtB6_11ParserInput4nextCsbrE1BkJ52QU_5oxrdf:
 1043|  2.48M|    fn next(&mut self) -> Option<char> {
 1044|  2.48M|        if let Some(head) = self.value.next() {
 1045|  2.42M|            self.position += head.len_utf8();
 1046|  2.42M|            Some(head)
 1047|       |        } else {
 1048|  60.9k|            None
 1049|       |        }
 1050|  2.48M|    }
_RNvCs72NQLJxIjgJ_5oxiri17is_url_code_point:
 1459|  1.70M|fn is_url_code_point(c: char) -> bool {
 1460|  1.70M|    matches!(c,
 1461|  49.5k|        'a'..='z'
 1462|  1.05M|        | 'A'..='Z'
 1463|   259k|        | '0'..='9'
 1464|       |        | '!'
 1465|       |        | '$'
 1466|       |        | '&'
 1467|       |        | '\''
 1468|       |        | '('
 1469|       |        | ')'
 1470|       |        | '*'
 1471|       |        | '+'
 1472|       |        | ','
 1473|       |        | '-'
 1474|       |        | '.'
 1475|       |        | '/'
 1476|       |        | ':'
 1477|       |        | ';'
 1478|       |        | '='
 1479|       |        | '?'
 1480|       |        | '@'
 1481|       |        | '_'
 1482|       |        | '~'
 1483|  6.46k|        | '\u{A0}'..='\u{D7FF}'
 1484|    198|        | '\u{F900}'..='\u{FDCF}'
 1485|    198|        | '\u{FDF0}'..='\u{FFEF}'
 1486|    198|        | '\u{10000}'..='\u{1FFFD}'
 1487|    198|        | '\u{20000}'..='\u{2FFFD}'
 1488|    198|        | '\u{30000}'..='\u{3FFFD}'
 1489|    198|        | '\u{40000}'..='\u{4FFFD}'
 1490|    198|        | '\u{50000}'..='\u{5FFFD}'
 1491|    198|        | '\u{60000}'..='\u{6FFFD}'
 1492|    198|        | '\u{70000}'..='\u{7FFFD}'
 1493|    198|        | '\u{80000}'..='\u{8FFFD}'
 1494|    198|        | '\u{90000}'..='\u{9FFFD}'
 1495|    198|        | '\u{A0000}'..='\u{AFFFD}'
 1496|    198|        | '\u{B0000}'..='\u{BFFFD}'
 1497|    198|        | '\u{C0000}'..='\u{CFFFD}'
 1498|    198|        | '\u{D0000}'..='\u{DFFFD}'
 1499|    198|        | '\u{E1000}'..='\u{EFFFD}'
 1500|       |    )
 1501|  1.70M|}
_RNvXsW_Cs72NQLJxIjgJ_5oxiriNtB5_13IriParseErrorNtNtCsl2lhD68vXAd_4core3fmt7Display3fmt:
  906|  73.9k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  907|  73.9k|        match &self.kind {
  908|  23.8k|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
  909|  1.46k|            IriParseErrorKind::InvalidHostCharacter(c) => {
  910|  1.46k|                write!(f, "Invalid character '{}' in host", c)
  911|       |            }
  912|    230|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({})", e),
  913|    746|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{}'", c),
  914|  41.0k|            IriParseErrorKind::InvalidIriCodePoint(c) => {
  915|  41.0k|                write!(f, "Invalid IRI code point '{}'", c)
  916|       |            }
  917|  6.58k|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
  918|  6.58k|                f,
  919|  6.58k|                "Invalid IRI percent encoding '{}'",
  920|  6.58k|                cs.iter().flatten().cloned().collect::<String>()
  921|  6.58k|            ),
  922|       |        }
  923|  73.9k|    }
_RNvCs72NQLJxIjgJ_5oxiri23is_url_query_code_point:
 1503|   444k|fn is_url_query_code_point(c: char) -> bool {
 1504|   444k|    is_url_code_point(c)
 1505|  8.93k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1506|   444k|}

_RNCNvNvCs80t0coX2wt6_6nquads1__19___libfuzzer_sys_runs_0B5_:
   38|  13.4M|        .filter(|c| *c != 0xFF)
_RINvCs80t0coX2wt6_6nquads5parseARShj1_EB2_:
    7|  34.6k|fn parse<'a>(chunks: impl IntoIterator<Item = &'a [u8]>) -> (Vec<Quad>, Vec<String>) {
    8|  34.6k|    let mut quads = Vec::new();
    9|  34.6k|    let mut errors = Vec::new();
   10|  34.6k|    let mut parser = NQuadsParser::new().with_quoted_triples().parse();
   11|  69.3k|    for chunk in chunks {
   12|  34.6k|        parser.extend_from_slice(chunk);
   13|  2.42M|        while let Some(result) = parser.read_next() {
   14|  2.38M|            match result {
   15|  1.37k|                Ok(quad) => quads.push(quad),
   16|  2.38M|                Err(error) => errors.push(error.to_string()),
   17|       |            }
   18|       |        }
   19|       |    }
   20|  34.6k|    parser.end();
   21|  52.0k|    while let Some(result) = parser.read_next() {
   22|  17.3k|        match result {
   23|     36|            Ok(quad) => quads.push(quad),
   24|  17.3k|            Err(error) => errors.push(error.to_string()),
   25|       |        }
   26|       |    }
   27|  34.6k|    assert!(parser.is_end());
   28|  34.6k|    (quads, errors)
   29|  34.6k|}
_RINvCs80t0coX2wt6_6nquads5parseINtNtNtCsl2lhD68vXAd_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_run0EEB2_:
    7|  34.6k|fn parse<'a>(chunks: impl IntoIterator<Item = &'a [u8]>) -> (Vec<Quad>, Vec<String>) {
    8|  34.6k|    let mut quads = Vec::new();
    9|  34.6k|    let mut errors = Vec::new();
   10|  34.6k|    let mut parser = NQuadsParser::new().with_quoted_triples().parse();
   11|  2.98M|    for chunk in chunks {
   12|  2.94M|        parser.extend_from_slice(chunk);
   13|  5.33M|        while let Some(result) = parser.read_next() {
   14|  2.38M|            match result {
   15|  1.37k|                Ok(quad) => quads.push(quad),
   16|  2.38M|                Err(error) => errors.push(error.to_string()),
   17|       |            }
   18|       |        }
   19|       |    }
   20|  34.6k|    parser.end();
   21|  52.0k|    while let Some(result) = parser.read_next() {
   22|  17.3k|        match result {
   23|     36|            Ok(quad) => quads.push(quad),
   24|  17.3k|            Err(error) => errors.push(error.to_string()),
   25|       |        }
   26|       |    }
   27|  34.6k|    assert!(parser.is_end());
   28|  34.6k|    (quads, errors)
   29|  34.6k|}
_RNCNvNvCs80t0coX2wt6_6nquads1__19___libfuzzer_sys_run0B5_:
   33|  13.4M|    let (quads, errors) = parse(data.split(|c| *c == 0xFF));

_RNvNtCsbrE1BkJ52QU_5oxrdf10blank_node13to_integer_idCs4WjTcpTVJQo_5oxttl:
  332|  4.49k|fn to_integer_id(id: &str) -> Option<u128> {
  333|  4.49k|    let digits = id.as_bytes();
  334|  4.49k|    let mut value: u128 = 0;
  335|  4.49k|    if let None | Some(b'0') = digits.first() {
  336|  1.55k|        return None; // No empty string or leading zeros
  337|  2.93k|    }
  338|  39.7k|    for digit in digits {
  339|  38.5k|        value = value.checked_mul(16)?.checked_add(
  340|  37.9k|            match *digit {
  341|  37.9k|                b'0'..=b'9' => digit - b'0',
  342|  35.8k|                b'a'..=b'f' => digit - b'a' + 10,
  343|  1.10k|                _ => return None,
  344|       |            }
  345|  36.8k|            .into(),
  346|      0|        )?;
  347|       |    }
  348|  1.23k|    Some(value)
  349|  4.49k|}
_RNvMNtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idCs4WjTcpTVJQo_5oxttl:
   66|  1.23k|    pub fn new_from_unique_id(id: u128) -> Self {
   67|  1.23k|        Self(BlankNodeContent::Anonymous {
   68|  1.23k|            id,
   69|  1.23k|            str: IdStr::new(id),
   70|  1.23k|        })
   71|  1.23k|    }
_RNvMs7_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_5IdStr3newCs4WjTcpTVJQo_5oxttl:
  259|  1.23k|    fn new(id: u128) -> Self {
  260|  1.23k|        let mut str = [0; 32];
  261|  1.23k|        write!(&mut str[..], "{id:x}").unwrap();
  262|  1.23k|        Self(str)
  263|  1.23k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedReECs4WjTcpTVJQo_5oxttl:
   53|  4.49k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   54|  4.49k|        let id = id.into();
   55|  4.49k|        if let Some(numerical_id) = to_integer_id(&id) {
   56|  1.23k|            Self::new_from_unique_id(numerical_id)
   57|       |        } else {
   58|  3.26k|            Self(BlankNodeContent::Named(id))
   59|       |        }
   60|  4.49k|    }

_RINvMNtCsbrE1BkJ52QU_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCsdBW21Yiwikk_5alloc6string6StringEB5_:
   50|      2|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   51|      2|        Self(LiteralContent::String(value.into()))
   52|      2|    }

_RNvMNtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB2_9NamedNode6as_refCs80t0coX2wt6_6nquads:
   54|  5.25k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  5.25k|        NamedNodeRef::new_unchecked(&self.iri)
   56|  5.25k|    }
_RNvXsl_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs80t0coX2wt6_6nquads:
   17|  10.5k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCs80t0coX2wt6_6nquads:
  128|  5.25k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  5.25k|        Self { iri }
  130|  5.25k|    }
_RNvXs5_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCs80t0coX2wt6_6nquads:
  145|  5.25k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|  5.25k|        write!(f, "<{}>", self.as_str())
  147|  5.25k|    }
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCs80t0coX2wt6_6nquads:
  133|  5.25k|    pub const fn as_str(self) -> &'a str {
  134|  5.25k|        self.iri
  135|  5.25k|    }
_RNvXsg_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCsl2lhD68vXAd_4core7convert4FromINtCs72NQLJxIjgJ_5oxiri3IriNtNtCsdBW21Yiwikk_5alloc6string6StringEE4fromCs4WjTcpTVJQo_5oxttl:
  222|  22.7k|    fn from(iri: Iri<String>) -> Self {
  223|  22.7k|        Self {
  224|  22.7k|            iri: iri.into_inner(),
  225|  22.7k|        }
  226|  22.7k|    }

_RNvXs25_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_4TermNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs80t0coX2wt6_6nquads:
  385|  2.81k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2z_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_9GraphNameNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs80t0coX2wt6_6nquads:
  856|  2.81k|#[derive(Eq, PartialEq, Debug, Clone, Hash, Default)]
_RNvXsO_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7TermRefNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCs80t0coX2wt6_6nquads:
  584|  1.40k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  585|  1.40k|        match self {
  586|  1.40k|            Self::NamedNode(node) => node.fmt(f),
  587|      0|            Self::BlankNode(node) => node.fmt(f),
  588|      0|            Self::Literal(literal) => literal.fmt(f),
  589|       |            #[cfg(feature = "rdf-star")]
  590|      0|            Self::Triple(triple) => {
  591|      0|                write!(f, "<<{triple}>>")
  592|       |            }
  593|       |        }
  594|  1.40k|    }
_RNvMsc_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7Subject6as_refCs80t0coX2wt6_6nquads:
  181|  1.40k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  1.40k|        match self {
  183|  1.40k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|      0|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|      0|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  1.40k|    }
_RNvXso_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_10SubjectRefNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCs80t0coX2wt6_6nquads:
  306|  1.40k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  307|  1.40k|        match self {
  308|  1.40k|            Self::NamedNode(node) => node.fmt(f),
  309|      0|            Self::BlankNode(node) => node.fmt(f),
  310|       |            #[cfg(feature = "rdf-star")]
  311|      0|            Self::Triple(triple) => write!(f, "<<{triple}>>"),
  312|       |        }
  313|  1.40k|    }
_RNvMsy_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_4Term6as_refCs80t0coX2wt6_6nquads:
  417|  1.40k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|  1.40k|        match self {
  419|  1.40k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|      0|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|      0|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|      0|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|  1.40k|    }
_RNvXs2Q_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_4QuadNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs80t0coX2wt6_6nquads:
 1065|  2.81k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMs18_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_9GraphName6as_refCs80t0coX2wt6_6nquads:
  881|  1.40k|    pub fn as_ref(&self) -> GraphNameRef<'_> {
  882|  1.40k|        match self {
  883|  1.03k|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.as_ref()),
  884|      0|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.as_ref()),
  885|    376|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  886|       |        }
  887|  1.40k|    }
_RNvXs1h_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_12GraphNameRefNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCs80t0coX2wt6_6nquads:
  980|  1.03k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  981|  1.03k|        match self {
  982|  1.03k|            Self::NamedNode(node) => node.fmt(f),
  983|      0|            Self::BlankNode(node) => node.fmt(f),
  984|      0|            Self::DefaultGraph => write!(f, "DEFAULT"),
  985|       |        }
  986|  1.03k|    }
_RNvXs1Q_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_7SubjectNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs80t0coX2wt6_6nquads:
  155|  2.81k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMs1g_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_12GraphNameRef16is_default_graphCs80t0coX2wt6_6nquads:
  964|  1.40k|    pub fn is_default_graph(&self) -> bool {
  965|  1.40k|        matches!(self, Self::DefaultGraph)
  966|  1.40k|    }
_RNvXs1u_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_7QuadRefNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCs80t0coX2wt6_6nquads:
 1188|  1.40k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1189|  1.40k|        if self.graph_name.is_default_graph() {
 1190|    376|            write!(f, "{} {} {}", self.subject, self.predicate, self.object)
 1191|       |        } else {
 1192|  1.03k|            write!(
 1193|  1.03k|                f,
 1194|  1.03k|                "{} {} {} {}",
 1195|  1.03k|                self.subject, self.predicate, self.object, self.graph_name
 1196|  1.03k|            )
 1197|       |        }
 1198|  1.40k|    }
_RNvXs1w_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_7QuadRefINtNtCsl2lhD68vXAd_4core7convert4FromRNtB6_4QuadE4fromCs80t0coX2wt6_6nquads:
 1214|  1.40k|    fn from(quad: &'a Quad) -> Self {
 1215|  1.40k|        quad.as_ref()
 1216|  1.40k|    }
_RNvMs1q_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_4Quad6as_refCs80t0coX2wt6_6nquads:
 1098|  1.40k|    pub fn as_ref(&self) -> QuadRef<'_> {
 1099|  1.40k|        QuadRef {
 1100|  1.40k|            subject: self.subject.as_ref(),
 1101|  1.40k|            predicate: self.predicate.as_ref(),
 1102|  1.40k|            object: self.object.as_ref(),
 1103|  1.40k|            graph_name: self.graph_name.as_ref(),
 1104|  1.40k|        }
 1105|  1.40k|    }
_RNvXs1a_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_9GraphNameINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB8_10named_node9NamedNodeE4fromCs4WjTcpTVJQo_5oxttl:
  899|  3.09k|    fn from(node: NamedNode) -> Self {
  900|  3.09k|        Self::NamedNode(node)
  901|  3.09k|    }
_RNvXse_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7SubjectINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|  8.41k|    fn from(node: NamedNode) -> Self {
  201|  8.41k|        Self::NamedNode(node)
  202|  8.41k|    }
_RNvXsg_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7SubjectINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|  4.48k|    fn from(node: BlankNode) -> Self {
  215|  4.48k|        Self::BlankNode(node)
  216|  4.48k|    }
_RNvXsC_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_4TermINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  451|      8|    fn from(node: BlankNode) -> Self {
  452|      8|        Self::BlankNode(node)
  453|      8|    }
_RNvXsA_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_4TermINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|  4.61k|    fn from(node: NamedNode) -> Self {
  438|  4.61k|        Self::NamedNode(node)
  439|  4.61k|    }
_RNvXsE_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_4TermINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  465|      2|    fn from(literal: Literal) -> Self {
  466|      2|        Self::Literal(literal)
  467|      2|    }

_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer9parse_iri0B8_:
  212|  14.0k|        let iri = String::from_utf8(iri).map_err(|e| {
  213|  14.0k|            (
  214|  14.0k|                position.clone(),
  215|  14.0k|                format!("The IRI contains invalid UTF-8 characters: {e}"),
  216|  14.0k|            )
  217|  14.0k|        })?;
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer14parse_lang_tag0B8_:
  551|  32.8k|                .map_err(|e| (position.clone(), e.to_string()))?
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_chars_0B8_:
  784|  7.43k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  785|  7.43k|            (
  786|  7.43k|                position..position + len +2,
  787|  7.43k|                format!(
  788|  7.43k|                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  789|  7.43k|                ),
  790|  7.43k|            )
  791|  7.43k|        })?;
_RNCNvNtCs4WjTcpTVJQo_5oxttl5lexer13str_from_utf80B5_:
  928|  10.8k|    str::from_utf8(data).map_err(|e| {
  929|  10.8k|        (
  930|  10.8k|            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  931|  10.8k|            format!("Invalid UTF-8: {e}"),
  932|  10.8k|        )
  933|  10.8k|            .into()
  934|  10.8k|    })
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer18recognize_variable0B8_:
  325|  61.0k|            result.and_then(|(name, _)| {
  326|  61.0k|                if name.is_empty() {
  327|  51.5k|                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  328|       |                } else {
  329|  9.43k|                    Ok(N3Token::Variable(name))
  330|       |                }
  331|  61.0k|            }),
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer9parse_iris_0B8_:
  223|  73.9k|        .map_err(|e| (position, e.to_string()))?;
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer22recognize_unicode_char0B8_:
  856|  44.0k|                .map(|c| (c, bytes_needed + 1))
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer26recognize_pname_or_keyword0B8_:
  309|  60.7k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  310|  60.7k|                prefix: pn_prefix,
  311|  60.7k|                local,
  312|  60.7k|                might_be_invalid_iri,
  313|  60.7k|            }),
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_char0B8_:
  776|  7.25k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  777|  7.25k|            (
  778|  7.25k|                position..position + len + 2,
  779|  7.25k|                format!(
  780|  7.25k|                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  781|  7.25k|                ),
  782|  7.25k|            )
  783|  7.25k|        })?;
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer16recognize_string:
  556|   317k|    fn recognize_string(
  557|   317k|        data: &[u8],
  558|   317k|        delimiter: u8,
  559|   317k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  560|   317k|        // [22] 	STRING_LITERAL_QUOTE 	::= 	'"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
  561|   317k|        // [23] 	STRING_LITERAL_SINGLE_QUOTE 	::= 	"'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
  562|   317k|        let mut string = String::new();
  563|   317k|        let mut i = 1;
  564|       |        loop {
  565|   414k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  566|   297k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  567|   290k|                Ok(s) => string.push_str(s),
  568|  6.65k|                Err(e) => return Some((end, Err(e))),
  569|       |            };
  570|   290k|            i += end;
  571|   290k|            match data[i] {
  572|   290k|                c if c == delimiter => {
  573|  72.9k|                    return Some((i + 1, Ok(N3Token::String(string))));
  574|       |                }
  575|       |                b'\\' => {
  576|   217k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  577|   209k|                    i += additional + 1;
  578|   209k|                    match c {
  579|  97.1k|                        Ok(c) => {
  580|  97.1k|                            string.push(c);
  581|  97.1k|                        }
  582|   112k|                        Err(e) => {
  583|       |                            // We read until the end of string char
  584|   112k|                            let end = memchr(delimiter, &data[i..])?;
  585|  6.41k|                            return Some((i + end + 1, Err(e)));
  586|       |                        }
  587|       |                    }
  588|       |                }
  589|      0|                _ => unreachable!(),
  590|       |            }
  591|       |        }
  592|   317k|    }
_RNvXs9_NtCs4WjTcpTVJQo_5oxttl5lexerNtB5_14N3LexerOptionsNtNtCsl2lhD68vXAd_4core7default7Default7defaultB7_:
   38|   104k|#[derive(Default)]
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer20is_possible_pn_chars:
  892|  8.81M|    fn is_possible_pn_chars(c: char) -> bool {
  893|  8.81M|        Self::is_possible_pn_chars_u(c)
  894|  3.07M|            || matches!(c,
  895|  1.97M|        '-' | '0'..='9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
  896|  8.81M|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer26recognize_blank_node_label:
  477|  96.5k|    fn recognize_blank_node_label(
  478|  96.5k|        data: &[u8],
  479|  96.5k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  480|  96.5k|        // [141s] 	BLANK_NODE_LABEL 	::= 	'_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
  481|  96.5k|        let mut i = 2;
  482|       |        loop {
  483|   705k|            match Self::recognize_unicode_char(&data[i..], i)? {
  484|   622k|                Ok((c, consumed)) => {
  485|   622k|                    if (i == 2 && (Self::is_possible_pn_chars_u(c) || c.is_ascii_digit()))
  486|   561k|                        || (i > 2 && Self::is_possible_pn_chars(c))
  487|   590k|                    {
  488|   590k|                        // Ok
  489|   590k|                    } else if i > 2 && c == '.' {
  490|  18.7k|                        if data[i - 1] == b'.' {
  491|    894|                            i -= 1;
  492|    894|                            return Some((
  493|    894|                                i,
  494|    894|                                str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  495|    894|                            ));
  496|  17.8k|                        }
  497|  13.3k|                    } else if i == 0 {
  498|      0|                        return Some((
  499|      0|                            i,
  500|      0|                            Err((0..i, "A blank node ID should not be empty").into()),
  501|      0|                        ));
  502|  13.3k|                    } else if data[i - 1] == b'.' {
  503|  1.10k|                        i -= 1;
  504|  1.10k|                        return Some((
  505|  1.10k|                            i,
  506|  1.10k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  507|  1.10k|                        ));
  508|       |                    } else {
  509|  12.2k|                        return Some((
  510|  12.2k|                            i,
  511|  12.2k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  512|  12.2k|                        ));
  513|       |                    }
  514|   608k|                    i += consumed;
  515|       |                }
  516|  1.99k|                Err(e) => return Some((e.location.end, Err(e))),
  517|       |            }
  518|       |        }
  519|  96.5k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer16recognize_number:
  632|   391k|    fn recognize_number(data: &[u8]) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  633|   391k|        // [19] 	INTEGER 	::= 	[+-]? [0-9]+
  634|   391k|        // [20] 	DECIMAL 	::= 	[+-]? [0-9]* '.' [0-9]+
  635|   391k|        // [21] 	DOUBLE 	::= 	[+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  636|   391k|        // [154s] 	EXPONENT 	::= 	[eE] [+-]? [0-9]+
  637|   391k|        let mut i = 0;
  638|   391k|        let c = *data.first()?;
  639|   391k|        if matches!(c, b'+' | b'-') {
  640|   217k|            i += 1;
  641|   217k|        }
  642|       |        // We read the digits before .
  643|   391k|        let mut count_before: usize = 0;
  644|       |        loop {
  645|  1.16M|            let c = *data.get(i)?;
  646|  1.08M|            if c.is_ascii_digit() {
  647|   774k|                i += 1;
  648|   774k|                count_before += 1;
  649|   774k|            } else {
  650|   312k|                break;
  651|       |            }
  652|       |        }
  653|       |
  654|       |        // We read the digits after .
  655|       |        #[allow(clippy::if_then_some_else_none)]
  656|   312k|        let count_after = if *data.get(i)? == b'.' {
  657|  32.3k|            i += 1;
  658|  32.3k|
  659|  32.3k|            let mut count_after = 0;
  660|       |            loop {
  661|   434k|                let c = *data.get(i)?;
  662|   412k|                if c.is_ascii_digit() {
  663|   402k|                    i += 1;
  664|   402k|                    count_after += 1;
  665|   402k|                } else {
  666|  10.1k|                    break;
  667|  10.1k|                }
  668|  10.1k|            }
  669|  10.1k|            Some(count_after)
  670|       |        } else {
  671|   279k|            None
  672|       |        };
  673|       |
  674|       |        // End
  675|   289k|        let c = *data.get(i)?;
  676|   289k|        if matches!(c, b'e' | b'E') {
  677|  43.7k|            i += 1;
  678|       |
  679|  43.7k|            let c = *data.get(i)?;
  680|  26.7k|            if matches!(c, b'+' | b'-') {
  681|  1.79k|                i += 1;
  682|  24.9k|            }
  683|       |
  684|  26.7k|            let mut found = false;
  685|       |            loop {
  686|   114k|                let c = *data.get(i)?;
  687|  99.9k|                if c.is_ascii_digit() {
  688|  87.3k|                    i += 1;
  689|  87.3k|                    found = true;
  690|  87.3k|                } else {
  691|  12.5k|                    break;
  692|  12.5k|                }
  693|  12.5k|            }
  694|  12.5k|            Some((
  695|  12.5k|                i,
  696|  12.5k|                if !found {
  697|  5.93k|                    Err((0..i, "A double exponent cannot be empty").into())
  698|  6.64k|                } else if count_before == 0 && count_after.unwrap_or(0) == 0 {
  699|  3.52k|                    Err((0..i, "A double should not be empty").into())
  700|       |                } else {
  701|  3.12k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Double)
  702|       |                },
  703|       |            ))
  704|   246k|        } else if let Some(count_after) = count_after {
  705|  7.83k|            if count_after == 0 {
  706|       |                // We do not consume the '.' after all
  707|  3.95k|                i -= 1;
  708|  3.95k|                Some((
  709|  3.95k|                    i,
  710|  3.95k|                    if count_before == 0 {
  711|  1.61k|                        Err((0..i, "An integer should not be empty").into())
  712|       |                    } else {
  713|  2.34k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  714|       |                    },
  715|       |                ))
  716|       |            } else {
  717|  3.87k|                Some((i, str_from_utf8(&data[..i], 0..i).map(N3Token::Decimal)))
  718|       |            }
  719|       |        } else {
  720|       |            Some((
  721|   238k|                i,
  722|   238k|                if count_before == 0 {
  723|   148k|                    Err((0..i, "An integer should not be empty").into())
  724|       |                } else {
  725|  90.0k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  726|       |                },
  727|       |            ))
  728|       |        }
  729|   391k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer13recognize_iri:
  176|   865k|    fn recognize_iri(
  177|   865k|        data: &[u8],
  178|   865k|        options: &N3LexerOptions,
  179|   865k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  180|   865k|        // [18] 	IRIREF 	::= 	'<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
  181|   865k|        let mut string = Vec::new();
  182|   865k|        let mut i = 1;
  183|       |        loop {
  184|   969k|            let end = memchr2(b'>', b'\\', &data[i..])?;
  185|   364k|            string.extend_from_slice(&data[i..i + end]);
  186|   364k|            i += end;
  187|   364k|            match data[i] {
  188|       |                b'>' => {
  189|   118k|                    return Some((i + 1, Self::parse_iri(string, 0..=i, options)));
  190|       |                }
  191|       |                b'\\' => {
  192|   246k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, false)?;
  193|   120k|                    i += additional + 1;
  194|   120k|                    match c {
  195|   103k|                        Ok(c) => {
  196|   103k|                            let mut buf = [0; 4];
  197|   103k|                            string.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  198|   103k|                        }
  199|  17.3k|                        Err(e) => return Some((i, Err(e))),
  200|       |                    }
  201|       |                }
  202|      0|                _ => unreachable!(),
  203|       |            }
  204|       |        }
  205|   865k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer14parse_lang_tag:
  545|  73.9k|    fn parse_lang_tag(
  546|  73.9k|        lang_tag: &[u8],
  547|  73.9k|        position: Range<usize>,
  548|  73.9k|    ) -> Result<N3Token<'_>, TokenRecognizerError> {
  549|  73.9k|        Ok(N3Token::LangTag(
  550|  73.9k|            LanguageTag::parse(str_from_utf8(lang_tag, position.clone())?)
  551|  73.9k|                .map_err(|e| (position.clone(), e.to_string()))?
  552|  41.0k|                .into_inner(),
  553|       |        ))
  554|  73.9k|    }
_RNvXNtCs4WjTcpTVJQo_5oxttl5lexerNtB2_7N3LexerNtNtNtB4_7toolkit5lexer15TokenRecognizer20recognize_next_token:
   54|  10.3M|    fn recognize_next_token<'a>(
   55|  10.3M|        &mut self,
   56|  10.3M|        data: &'a [u8],
   57|  10.3M|        is_ending: bool,
   58|  10.3M|        options: &N3LexerOptions,
   59|  10.3M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
   60|  10.3M|        match *data.first()? {
   61|  1.71M|            b'<' => match *data.get(1)? {
   62|   815k|                b'<' => Some((2, Ok(N3Token::Punctuation("<<")))),
   63|  43.5k|                b'=' if self.mode == N3LexerMode::N3 => {
   64|      0|                    if let Some((consumed, result)) = Self::recognize_iri(data, options) {
   65|      0|                        Some(if let Ok(result) = result {
   66|      0|                            (consumed, Ok(result))
   67|       |                        } else {
   68|      0|                            (2, Ok(N3Token::Punctuation("<=")))
   69|       |                        })
   70|      0|                    } else if is_ending {
   71|      0|                        Some((2, Ok(N3Token::Punctuation("<="))))
   72|       |                    } else {
   73|      0|                        None
   74|       |                    }
   75|       |                }
   76|  13.2k|                b'-' if self.mode == N3LexerMode::N3 => {
   77|      0|                    if let Some((consumed, result)) = Self::recognize_iri(data, options) {
   78|      0|                        Some(if let Ok(result) = result {
   79|      0|                            (consumed, Ok(result))
   80|       |                        } else {
   81|      0|                            (2, Ok(N3Token::Punctuation("<-")))
   82|       |                        })
   83|      0|                    } else if is_ending {
   84|      0|                        Some((2, Ok(N3Token::Punctuation("<-"))))
   85|       |                    } else {
   86|      0|                        None
   87|       |                    }
   88|       |                }
   89|   865k|                _ => Self::recognize_iri(data, options),
   90|       |            },
   91|       |            b'>' => {
   92|   218k|                if *data.get(1)? == b'>' {
   93|   155k|                    Some((2, Ok(N3Token::Punctuation(">>"))))
   94|       |                } else {
   95|  43.4k|                    Some((1, Ok(N3Token::Punctuation(">"))))
   96|       |                }
   97|       |            }
   98|   275k|            b'_' => match data.get(1)? {
   99|  96.5k|                b':' => Self::recognize_blank_node_label(data),
  100|   166k|                c => Some((
  101|   166k|                    1,
  102|   166k|                    Err((0, format!("Unexpected character '{}'", char::from(*c))).into()),
  103|   166k|                )),
  104|       |            },
  105|       |            b'"' => {
  106|   317k|                if self.mode != N3LexerMode::NTriples
  107|      0|                    && *data.get(1)? == b'"'
  108|      0|                    && *data.get(2)? == b'"'
  109|       |                {
  110|      0|                    Self::recognize_long_string(data, b'"')
  111|       |                } else {
  112|   317k|                    Self::recognize_string(data, b'"')
  113|       |                }
  114|       |            }
  115|  34.9k|            b'\'' if self.mode != N3LexerMode::NTriples => {
  116|      0|                if *data.get(1)? == b'\'' && *data.get(2)? == b'\'' {
  117|      0|                    Self::recognize_long_string(data, b'\'')
  118|       |                } else {
  119|      0|                    Self::recognize_string(data, b'\'')
  120|       |                }
  121|       |            }
  122|   364k|            b'@' => Self::recognize_lang_tag(data),
  123|   519k|            b'.' => match data.get(1) {
  124|  67.9k|                Some(b'0'..=b'9') => Self::recognize_number(data),
  125|   462k|                Some(_) => Some((1, Ok(N3Token::Punctuation(".")))),
  126|  46.1k|                None => is_ending.then_some((1, Ok(N3Token::Punctuation(".")))),
  127|       |            },
  128|       |            b'^' => {
  129|   100k|                if *data.get(1)? == b'^' {
  130|  54.8k|                    Some((2, Ok(N3Token::Punctuation("^^"))))
  131|       |                } else {
  132|  24.0k|                    Some((1, Ok(N3Token::Punctuation("^"))))
  133|       |                }
  134|       |            }
  135|  75.6k|            b'(' => Some((1, Ok(N3Token::Punctuation("(")))),
  136|  21.6k|            b')' => Some((1, Ok(N3Token::Punctuation(")")))),
  137|  23.1k|            b'[' => Some((1, Ok(N3Token::Punctuation("[")))),
  138|  15.6k|            b']' => Some((1, Ok(N3Token::Punctuation("]")))),
  139|       |            b'{' => {
  140|  34.2k|                if *data.get(1)? == b'|' {
  141|  1.19k|                    Some((2, Ok(N3Token::Punctuation("{|"))))
  142|       |                } else {
  143|  26.3k|                    Some((1, Ok(N3Token::Punctuation("{"))))
  144|       |                }
  145|       |            }
  146|  47.7k|            b'}' => Some((1, Ok(N3Token::Punctuation("}")))),
  147|  54.8k|            b',' => Some((1, Ok(N3Token::Punctuation(",")))),
  148|  28.3k|            b';' => Some((1, Ok(N3Token::Punctuation(";")))),
  149|  13.3k|            b'!' => Some((1, Ok(N3Token::Punctuation("!")))),
  150|       |            b'|' => {
  151|  43.2k|                if *data.get(1)? == b'}' {
  152|    792|                    Some((2, Ok(N3Token::Punctuation("|}"))))
  153|       |                } else {
  154|  39.2k|                    Some((1, Ok(N3Token::Punctuation("|"))))
  155|       |                }
  156|       |            }
  157|       |            b'=' => {
  158|  83.9k|                if *data.get(1)? == b'>' {
  159|  1.43k|                    Some((2, Ok(N3Token::Punctuation("=>"))))
  160|       |                } else {
  161|  77.9k|                    Some((1, Ok(N3Token::Punctuation("="))))
  162|       |                }
  163|       |            }
  164|  2.75M|            b'0'..=b'9' | b'+' | b'-' => Self::recognize_number(data),
  165|   121k|            b'?' => Self::recognize_variable(data, is_ending),
  166|  4.90M|            _ => Self::recognize_pname_or_keyword(data, is_ending),
  167|       |        }
  168|  10.3M|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer9parse_iri:
  207|   118k|    fn parse_iri(
  208|   118k|        iri: Vec<u8>,
  209|   118k|        position: RangeInclusive<usize>,
  210|   118k|        options: &N3LexerOptions,
  211|   118k|    ) -> Result<N3Token<'static>, TokenRecognizerError> {
  212|   118k|        let iri = String::from_utf8(iri).map_err(|e| {
  213|       |            (
  214|       |                position.clone(),
  215|       |                format!("The IRI contains invalid UTF-8 characters: {e}"),
  216|       |            )
  217|   118k|        })?;
  218|   104k|        let iri = if let Some(base_iri) = options.base_iri.as_ref() {
  219|      0|            base_iri.resolve(&iri)
  220|       |        } else {
  221|   104k|            Iri::parse(iri)
  222|       |        }
  223|   104k|        .map_err(|e| (position, e.to_string()))?;
  224|  30.8k|        Ok(N3Token::IriRef(iri))
  225|   118k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer18recognize_hex_char:
  766|   251k|    fn recognize_hex_char(
  767|   251k|        data: &[u8],
  768|   251k|        len: usize,
  769|   251k|        escape_char: char,
  770|   251k|        position: usize,
  771|   251k|    ) -> Result<Option<char>, TokenRecognizerError> {
  772|   251k|        if data.len() < len {
  773|   116k|            return Ok(None);
  774|   135k|        }
  775|   135k|        let val = str_from_utf8(&data[..len], position..position + len + 2)?;
  776|   130k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  777|       |            (
  778|       |                position..position + len + 2,
  779|       |                format!(
  780|       |                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  781|       |                ),
  782|       |            )
  783|   130k|        })?;
  784|   123k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  785|       |            (
  786|       |                position..position + len +2,
  787|       |                format!(
  788|       |                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  789|       |                ),
  790|       |            )
  791|   123k|        })?;
  792|   116k|        Ok(Some(c))
  793|   251k|    }
_RNvXs8_NtCs4WjTcpTVJQo_5oxttl5lexerNtB5_11N3LexerModeNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqB7_:
   31|   408k|#[derive(Eq, PartialEq)]
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer22is_possible_pn_chars_u:
  887|  9.25M|    fn is_possible_pn_chars_u(c: char) -> bool {
  888|  9.25M|        Self::is_possible_pn_chars_base(c) || c == '_'
  889|  9.25M|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer27recognize_optional_pn_local:
  335|   514k|    fn recognize_optional_pn_local(
  336|   514k|        data: &[u8],
  337|   514k|        is_ending: bool,
  338|   514k|    ) -> Option<(usize, Result<(Cow<'_, str>, bool), TokenRecognizerError>)> {
  339|   514k|        // [168s] 	PN_LOCAL 	::= 	(PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
  340|   514k|        let mut i = 0;
  341|   514k|        let mut buffer = None; // Buffer if there are some escaped characters
  342|   514k|        let mut position_that_is_already_in_buffer = 0;
  343|   514k|        let mut might_be_invalid_iri = false;
  344|       |        loop {
  345|  3.81M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  346|  3.50M|                match r {
  347|  3.48M|                    Ok((c, consumed)) => {
  348|  3.48M|                        if c == '%' {
  349|  22.0k|                            i += 1;
  350|  22.0k|                            let a = char::from(*data.get(i)?);
  351|  15.3k|                            i += 1;
  352|  15.3k|                            let b = char::from(*data.get(i)?);
  353|  10.8k|                            if !a.is_ascii_hexdigit() || !b.is_ascii_hexdigit() {
  354|  3.31k|                                return Some((i + 1, Err((
  355|  3.31k|                                    i - 2..=i, format!("escapes in IRIs should be % followed by two hexadecimal characters, found '%{a}{b}'")
  356|  3.31k|                                ).into())));
  357|  7.53k|                            }
  358|  7.53k|                            i += 1;
  359|  3.45M|                        } else if c == '\\' {
  360|   240k|                            i += 1;
  361|   240k|                            let a = char::from(*data.get(i)?);
  362|   121k|                            if matches!(
  363|   194k|                                a,
  364|       |                                '_' | '~'
  365|       |                                    | '.'
  366|       |                                    | '-'
  367|       |                                    | '!'
  368|       |                                    | '$'
  369|       |                                    | '&'
  370|       |                                    | '\''
  371|       |                                    | '('
  372|       |                                    | ')'
  373|       |                                    | '*'
  374|       |                                    | '+'
  375|       |                                    | ','
  376|       |                                    | ';'
  377|       |                                    | '='
  378|  72.4k|                            ) {
  379|  72.4k|                                // ok to escape
  380|   121k|                            } else if matches!(a, '/' | '?' | '#' | '@' | '%') {
  381|   119k|                                // ok to escape but requires IRI validation
  382|   119k|                                might_be_invalid_iri = true;
  383|   119k|                            } else {
  384|  2.62k|                                return Some((i + 1, Err((
  385|  2.62k|                                    i..=i, format!("The character that are allowed to be escaped in IRIs are _~.-!$&'()*+,;=/?#@%, found '{a}'")
  386|  2.62k|                                ).into())));
  387|       |                            }
  388|   191k|                            let buffer = buffer.get_or_insert_with(String::new);
  389|   191k|                            // We add the missing bytes
  390|   191k|                            if i - position_that_is_already_in_buffer > 1 {
  391|   146k|                                buffer.push_str(
  392|   146k|                                    match str_from_utf8(
  393|   146k|                                        &data[position_that_is_already_in_buffer..i - 1],
  394|   146k|                                        position_that_is_already_in_buffer..i - 1,
  395|   146k|                                    ) {
  396|   146k|                                        Ok(data) => data,
  397|      0|                                        Err(e) => return Some((i, Err(e))),
  398|       |                                    },
  399|       |                                )
  400|  44.9k|                            }
  401|   191k|                            buffer.push(a);
  402|   191k|                            i += 1;
  403|   191k|                            position_that_is_already_in_buffer = i;
  404|  3.21M|                        } else if i == 0 {
  405|   376k|                            if !(Self::is_possible_pn_chars_u(c) || c == ':' || c.is_ascii_digit())
  406|       |                            {
  407|  77.3k|                                return Some((0, Ok((Cow::Borrowed(""), false))));
  408|   299k|                            }
  409|   299k|                            might_be_invalid_iri |=
  410|   299k|                                Self::is_possible_pn_chars_base_but_not_valid_iri(c) || c == ':';
  411|   299k|                            i += consumed;
  412|  2.84M|                        } else if Self::is_possible_pn_chars(c) || c == ':' || c == '.' {
  413|       |                            might_be_invalid_iri |=
  414|  2.80M|                                Self::is_possible_pn_chars_base_but_not_valid_iri(c) || c == ':';
  415|  2.80M|                            i += consumed;
  416|       |                        } else {
  417|  42.1k|                            let buffer = if let Some(mut buffer) = buffer {
  418|  16.0k|                                buffer.push_str(
  419|  16.0k|                                    match str_from_utf8(
  420|  16.0k|                                        &data[position_that_is_already_in_buffer..i],
  421|  16.0k|                                        position_that_is_already_in_buffer..i,
  422|  16.0k|                                    ) {
  423|  16.0k|                                        Ok(data) => data,
  424|      0|                                        Err(e) => return Some((i, Err(e))),
  425|       |                                    },
  426|       |                                );
  427|       |                                // We do not include the last dot
  428|  29.8k|                                while buffer.ends_with('.') {
  429|  13.7k|                                    buffer.pop();
  430|  13.7k|                                    i -= 1;
  431|  13.7k|                                }
  432|  16.0k|                                Cow::Owned(buffer)
  433|       |                            } else {
  434|  26.0k|                                let mut data = match str_from_utf8(&data[..i], 0..i) {
  435|  26.0k|                                    Ok(data) => data,
  436|      0|                                    Err(e) => return Some((i, Err(e))),
  437|       |                                };
  438|       |                                // We do not include the last dot
  439|  31.9k|                                while let Some(d) = data.strip_suffix('.') {
  440|  5.84k|                                    data = d;
  441|  5.84k|                                    i -= 1;
  442|  5.84k|                                }
  443|  26.0k|                                Cow::Borrowed(data)
  444|       |                            };
  445|  42.1k|                            return Some((i, Ok((buffer, might_be_invalid_iri))));
  446|       |                        }
  447|       |                    }
  448|  26.6k|                    Err(e) => return Some((e.location.end, Err(e))),
  449|       |                }
  450|   304k|            } else if is_ending {
  451|  2.28k|                let buffer = if let Some(mut buffer) = buffer {
  452|       |                    // We do not include the last dot
  453|  2.59k|                    while buffer.ends_with('.') {
  454|  1.64k|                        buffer.pop();
  455|  1.64k|                        i -= 1;
  456|  1.64k|                    }
  457|    946|                    Cow::Owned(buffer)
  458|       |                } else {
  459|  1.33k|                    let mut data = match str_from_utf8(&data[..i], 0..i) {
  460|  1.33k|                        Ok(data) => data,
  461|      0|                        Err(e) => return Some((i, Err(e))),
  462|       |                    };
  463|       |                    // We do not include the last dot
  464|  4.29k|                    while let Some(d) = data.strip_suffix('.') {
  465|  2.96k|                        data = d;
  466|  2.96k|                        i -= 1;
  467|  2.96k|                    }
  468|  1.33k|                    Cow::Borrowed(data)
  469|       |                };
  470|  2.28k|                return Some((i, Ok((buffer, might_be_invalid_iri))));
  471|       |            } else {
  472|   302k|                return None;
  473|       |            }
  474|       |        }
  475|   514k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer3new:
  172|   104k|    pub fn new(mode: N3LexerMode) -> Self {
  173|   104k|        Self { mode }
  174|   104k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer26recognize_pname_or_keyword:
  227|  4.90M|    fn recognize_pname_or_keyword(
  228|  4.90M|        data: &[u8],
  229|  4.90M|        is_ending: bool,
  230|  4.90M|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  231|  4.90M|        // [139s] 	PNAME_NS 	::= 	PN_PREFIX? ':'
  232|  4.90M|        // [140s] 	PNAME_LN 	::= 	PNAME_NS PN_LOCAL
  233|  4.90M|
  234|  4.90M|        // [167s] 	PN_PREFIX 	::= 	PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
  235|  4.90M|        let mut i = 0;
  236|       |        loop {
  237|  10.7M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  238|  10.3M|                match r {
  239|  8.93M|                    Ok((c, consumed)) => {
  240|  8.93M|                        if c == ':' {
  241|   394k|                            i += consumed;
  242|   394k|                            break;
  243|  8.53M|                        } else if i == 0 {
  244|  3.12M|                            if !Self::is_possible_pn_chars_base(c) {
  245|  2.41M|                                return Some((
  246|  2.41M|                                    consumed,
  247|  2.41M|                                    Err((
  248|  2.41M|                                        0..consumed,
  249|  2.41M|                                        format!(
  250|  2.41M|                                            "'{c}' is not allowed at the beginning of a prefix name"
  251|  2.41M|                                        ),
  252|  2.41M|                                    )
  253|  2.41M|                                        .into()),
  254|  2.41M|                                ));
  255|   710k|                            }
  256|   710k|                            i += consumed;
  257|  5.41M|                        } else if Self::is_possible_pn_chars(c) || c == '.' {
  258|  5.10M|                            i += consumed;
  259|  5.10M|                        } else {
  260|   461k|                            while data[..i].ends_with(b".") {
  261|   150k|                                i -= 1;
  262|   150k|                            }
  263|   311k|                            return Some((
  264|   311k|                                i,
  265|   311k|                                str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  266|   311k|                            ));
  267|       |                        }
  268|       |                    }
  269|  1.39M|                    Err(e) => return Some((e.location.end, Err(e))),
  270|       |                }
  271|   383k|            } else if is_ending {
  272|  11.7k|                while data[..i].ends_with(b".") {
  273|  4.27k|                    i -= 1;
  274|  4.27k|                }
  275|  7.51k|                return Some(if i == 0 {
  276|  1.97k|                    (
  277|  1.97k|                        1,
  278|  1.97k|                        Err((0..1, format!("Unexpected byte {}", data[0])).into()),
  279|  1.97k|                    )
  280|       |                } else {
  281|  5.54k|                    (
  282|  5.54k|                        i,
  283|  5.54k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  284|  5.54k|                    )
  285|       |                });
  286|       |            } else {
  287|   376k|                return None;
  288|       |            }
  289|       |        }
  290|   394k|        let pn_prefix = match str_from_utf8(&data[..i - 1], 0..i - 1) {
  291|   394k|            Ok(pn_prefix) => pn_prefix,
  292|      0|            Err(e) => return Some((i, Err(e))),
  293|       |        };
  294|   394k|        if pn_prefix.ends_with('.') {
  295|  1.07k|            return Some((
  296|  1.07k|                i,
  297|  1.07k|                Err((
  298|  1.07k|                    0..i,
  299|  1.07k|                    format!(
  300|  1.07k|                        "'{pn_prefix}' is not a valid prefix: prefixes are not allowed to end with '.'"),
  301|  1.07k|                )
  302|  1.07k|                    .into()),
  303|  1.07k|            ));
  304|   393k|        }
  305|       |
  306|   393k|        let (consumed, pn_local_result) = Self::recognize_optional_pn_local(&data[i..], is_ending)?;
  307|  85.0k|        Some((
  308|  85.0k|            consumed + i,
  309|  85.0k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  310|       |                prefix: pn_prefix,
  311|       |                local,
  312|       |                might_be_invalid_iri,
  313|  85.0k|            }),
  314|  85.0k|        ))
  315|  4.90M|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer18recognize_lang_tag:
  521|   364k|    fn recognize_lang_tag(
  522|   364k|        data: &[u8],
  523|   364k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  524|   364k|        // [144s] 	LANGTAG 	::= 	'@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
  525|   364k|        let mut is_last_block_empty = true;
  526|  1.39M|        for (i, c) in data[1..].iter().enumerate() {
  527|  1.39M|            if c.is_ascii_alphabetic() {
  528|  1.03M|                is_last_block_empty = false;
  529|  1.03M|            } else if i == 0 {
  530|   166k|                return Some((
  531|   166k|                    1,
  532|   166k|                    Err((1..2, "A language code should always start with a letter").into()),
  533|   166k|                ));
  534|   187k|            } else if is_last_block_empty {
  535|  3.24k|                return Some((i, Self::parse_lang_tag(&data[1..i], 1..i - 1)));
  536|   184k|            } else if *c == b'-' {
  537|   113k|                is_last_block_empty = true;
  538|   113k|            } else {
  539|  70.6k|                return Some((i + 1, Self::parse_lang_tag(&data[1..=i], 1..i)));
  540|       |            }
  541|       |        }
  542|   123k|        None
  543|   364k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer16recognize_escape:
  731|   463k|    fn recognize_escape(
  732|   463k|        data: &[u8],
  733|   463k|        position: usize,
  734|   463k|        with_echar: bool,
  735|   463k|    ) -> Option<(usize, Result<char, TokenRecognizerError>)> {
  736|   463k|        // [26] 	UCHAR 	::= 	'\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
  737|   463k|        // [159s] 	ECHAR 	::= 	'\' [tbnrf"'\]
  738|   463k|        match *data.get(1)? {
  739|  32.2k|            b'u' => match Self::recognize_hex_char(&data[2..], 4, 'u', position) {
  740|  19.5k|                Ok(c) => Some((5, Ok(c?))),
  741|  12.6k|                Err(e) => Some((5, Err(e))),
  742|       |            },
  743|   219k|            b'U' => match Self::recognize_hex_char(&data[2..], 8, 'u', position) {
  744|   213k|                Ok(c) => Some((9, Ok(c?))),
  745|  6.23k|                Err(e) => Some((9, Err(e))),
  746|       |            },
  747|  24.1k|            b't' if with_echar => Some((1, Ok('\t'))),
  748|  7.83k|            b'b' if with_echar => Some((1, Ok('\x08'))),
  749|  20.4k|            b'n' if with_echar => Some((1, Ok('\n'))),
  750|  1.67k|            b'r' if with_echar => Some((1, Ok('\r'))),
  751|  3.44k|            b'f' if with_echar => Some((1, Ok('\x0C'))),
  752|  5.01k|            b'"' if with_echar => Some((1, Ok('"'))),
  753|  9.33k|            b'\'' if with_echar => Some((1, Ok('\''))),
  754|  12.5k|            b'\\' if with_echar => Some((1, Ok('\\'))),
  755|   111k|            c => Some((
  756|   111k|                1,
  757|   111k|                Err((
  758|   111k|                    position..position + 2,
  759|   111k|                    format!("Unexpected escape character '\\{}'", char::from(c)),
  760|   111k|                )
  761|   111k|                    .into()),
  762|   111k|            )), //TODO: read until end of string
  763|       |        }
  764|   463k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer22recognize_unicode_char:
  795|  15.2M|    fn recognize_unicode_char(
  796|  15.2M|        data: &[u8],
  797|  15.2M|        position: usize,
  798|  15.2M|    ) -> Option<Result<(char, usize), TokenRecognizerError>> {
  799|  15.2M|        let mut code_point: u32;
  800|  15.2M|        let bytes_needed: usize;
  801|  15.2M|        let mut lower_boundary = 0x80;
  802|  15.2M|        let mut upper_boundary = 0xBF;
  803|       |
  804|  15.2M|        let byte = *data.first()?;
  805|  14.6M|        match byte {
  806|  14.6M|            0x00..=0x7F => return Some(Ok((char::from(byte), 1))),
  807|   915k|            0xC2..=0xDF => {
  808|   351k|                bytes_needed = 1;
  809|   351k|                code_point = u32::from(byte) & 0x1F;
  810|   351k|            }
  811|   564k|            0xE0..=0xEF => {
  812|   245k|                if byte == 0xE0 {
  813|  26.3k|                    lower_boundary = 0xA0;
  814|   218k|                }
  815|   245k|                if byte == 0xED {
  816|  10.8k|                    upper_boundary = 0x9F;
  817|   234k|                }
  818|   245k|                bytes_needed = 2;
  819|   245k|                code_point = u32::from(byte) & 0xF;
  820|       |            }
  821|   319k|            0xF0..=0xF4 => {
  822|   182k|                if byte == 0xF0 {
  823|  55.2k|                    lower_boundary = 0x90;
  824|   127k|                }
  825|   182k|                if byte == 0xF4 {
  826|  49.0k|                    upper_boundary = 0x8F;
  827|   133k|                }
  828|   182k|                bytes_needed = 3;
  829|   182k|                code_point = u32::from(byte) & 0x7;
  830|       |            }
  831|       |            _ => {
  832|   848k|                return Some(Err((
  833|   848k|                    position..=position,
  834|   848k|                    "Invalid UTF-8 character encoding",
  835|   848k|                )
  836|   848k|                    .into()))
  837|       |            }
  838|       |        }
  839|       |
  840|   818k|        for i in 1..=bytes_needed {
  841|   818k|            let byte = *data.get(i)?;
  842|   662k|            if byte < lower_boundary || upper_boundary < byte {
  843|   578k|                return Some(Err((
  844|   578k|                    position..=position + i,
  845|   578k|                    "Invalid UTF-8 character encoding",
  846|   578k|                )
  847|   578k|                    .into()));
  848|  83.6k|            }
  849|  83.6k|            lower_boundary = 0x80;
  850|  83.6k|            upper_boundary = 0xBF;
  851|  83.6k|            code_point = (code_point << 6) | (u32::from(byte) & 0x3F);
  852|       |        }
  853|       |
  854|  44.0k|        Some(
  855|  44.0k|            char::from_u32(code_point)
  856|  44.0k|                .map(|c| (c, bytes_needed + 1))
  857|  44.0k|                .ok_or_else(|| {
  858|       |                    (
  859|       |                        position..=position + bytes_needed,
  860|       |                        format!("The codepoint {code_point:X} is not a valid unicode character"),
  861|       |                    )
  862|       |                        .into()
  863|  44.0k|                }),
  864|  44.0k|        )
  865|  15.2M|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer18recognize_variable:
  317|   121k|    fn recognize_variable(
  318|   121k|        data: &[u8],
  319|   121k|        is_ending: bool,
  320|   121k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  321|       |        // [36] 	QUICK_VAR_NAME 	::= 	"?" PN_LOCAL
  322|   121k|        let (consumed, result) = Self::recognize_optional_pn_local(&data[1..], is_ending)?;
  323|  69.2k|        Some((
  324|  69.2k|            consumed + 1,
  325|  69.2k|            result.and_then(|(name, _)| {
  326|       |                if name.is_empty() {
  327|       |                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  328|       |                } else {
  329|       |                    Ok(N3Token::Variable(name))
  330|       |                }
  331|  69.2k|            }),
  332|  69.2k|        ))
  333|   121k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer43is_possible_pn_chars_base_but_not_valid_iri:
  898|  3.09M|    fn is_possible_pn_chars_base_but_not_valid_iri(c: char) -> bool {
  899|  3.09M|        matches!(c, '\u{FFF0}'..='\u{FFFD}')
  900|  3.09M|            || u32::from(c) % u32::from('\u{FFFE}') == 0
  901|  3.09M|            || u32::from(c) % u32::from('\u{FFFF}') == 0
  902|  3.09M|    }
_RNvNtCs4WjTcpTVJQo_5oxttl5lexer13str_from_utf8:
  927|  1.52M|fn str_from_utf8(data: &[u8], range: Range<usize>) -> Result<&str, TokenRecognizerError> {
  928|  1.52M|    str::from_utf8(data).map_err(|e| {
  929|       |        (
  930|       |            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  931|       |            format!("Invalid UTF-8: {e}"),
  932|       |        )
  933|       |            .into()
  934|  1.52M|    })
  935|  1.52M|}
_RNvXs2_NtCs4WjTcpTVJQo_5oxttl5lexerNtB5_7N3TokenNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqB7_:
   12|  2.34M|#[derive(Debug, PartialEq, Eq)]
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer25is_possible_pn_chars_base:
  868|  12.3M|    fn is_possible_pn_chars_base(c: char) -> bool {
  869|  12.3M|        matches!(c,
  870|  6.78M|        'A'..='Z'
  871|   980k|        | 'a'..='z'
  872|  36.1k|        | '\u{00C0}'..='\u{00D6}'
  873|  35.9k|        | '\u{00D8}'..='\u{00F6}'
  874|  33.9k|        | '\u{00F8}'..='\u{02FF}'
  875|  29.8k|        | '\u{0370}'..='\u{037D}'
  876|  29.8k|        | '\u{037F}'..='\u{1FFF}'
  877|  15.7k|        | '\u{200C}'..='\u{200D}'
  878|  15.7k|        | '\u{2070}'..='\u{218F}'
  879|  15.7k|        | '\u{2C00}'..='\u{2FEF}'
  880|  15.5k|        | '\u{3001}'..='\u{D7FF}'
  881|  4.78k|        | '\u{F900}'..='\u{FDCF}'
  882|  4.59k|        | '\u{FDF0}'..='\u{FFFD}'
  883|  4.59k|        | '\u{10000}'..='\u{EFFFF}')
  884|  12.3M|    }

_RNvMs_NtCs4WjTcpTVJQo_5oxttl12line_formatsNtB4_16NQuadsRecognizer10new_parser:
  264|   104k|    pub fn new_parser(
  265|   104k|        with_graph_name: bool,
  266|   104k|        #[cfg(feature = "rdf-star")] with_quoted_triples: bool,
  267|   104k|    ) -> Parser<Self> {
  268|   104k|        Parser::new(
  269|   104k|            Lexer::new(
  270|   104k|                N3Lexer::new(N3LexerMode::NTriples),
  271|   104k|                MIN_BUFFER_SIZE,
  272|   104k|                MAX_BUFFER_SIZE,
  273|   104k|                true,
  274|   104k|                Some(b"#"),
  275|   104k|            ),
  276|   104k|            NQuadsRecognizer {
  277|   104k|                stack: vec![NQuadsState::ExpectSubject],
  278|   104k|                subjects: Vec::new(),
  279|   104k|                predicates: Vec::new(),
  280|   104k|                objects: Vec::new(),
  281|   104k|            },
  282|   104k|            NQuadsRecognizerContext {
  283|   104k|                with_graph_name,
  284|   104k|                #[cfg(feature = "rdf-star")]
  285|   104k|                with_quoted_triples,
  286|   104k|                lexer_options: N3LexerOptions::default(),
  287|   104k|            },
  288|   104k|        )
  289|   104k|    }
_RNvXNtCs4WjTcpTVJQo_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer20error_recovery_state:
   46|  4.57M|    fn error_recovery_state(mut self) -> Self {
   47|  4.57M|        self.stack.clear();
   48|  4.57M|        self.subjects.clear();
   49|  4.57M|        self.predicates.clear();
   50|  4.57M|        self.objects.clear();
   51|  4.57M|        self
   52|  4.57M|    }
_RNvXNtCs4WjTcpTVJQo_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer14recognize_next:
   54|  2.63M|    fn recognize_next(
   55|  2.63M|        mut self,
   56|  2.63M|        token: N3Token<'_>,
   57|  2.63M|        context: &mut NQuadsRecognizerContext,
   58|  2.63M|        results: &mut Vec<Quad>,
   59|  2.63M|        errors: &mut Vec<RuleRecognizerError>,
   60|  2.63M|    ) -> Self {
   61|  2.63M|        if let Some(state) = self.stack.pop() {
   62|   292k|            match state {
   63|  24.1k|                NQuadsState::ExpectSubject => match token {
   64|  8.41k|                    N3Token::IriRef(s) => {
   65|  8.41k|                        self.subjects
   66|  8.41k|                            .push(NamedNode::from(s).into());
   67|  8.41k|                        self.stack.push(NQuadsState::ExpectPredicate);
   68|  8.41k|                        self
   69|       |                    }
   70|  4.48k|                    N3Token::BlankNodeLabel(s) => {
   71|  4.48k|                        self.subjects.push(BlankNode::new_unchecked(s).into());
   72|  4.48k|                        self.stack.push(NQuadsState::ExpectPredicate);
   73|  4.48k|                        self
   74|       |                    }
   75|       |                    #[cfg(feature = "rdf-star")]
   76|   238k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
   77|  24.1k|                        self.stack.push(NQuadsState::AfterQuotedSubject);
   78|  24.1k|                        self.stack.push(NQuadsState::ExpectSubject);
   79|  24.1k|                        self
   80|       |                    }
   81|   233k|                    _ => self.error(
   82|   233k|                        errors,
   83|   233k|                        "The subject of a triple should be an IRI or a blank node, TOKEN found",
   84|   233k|                    ),
   85|       |                },
   86|  8.69k|                NQuadsState::ExpectPredicate => match token {
   87|  6.63k|                    N3Token::IriRef(p) => {
   88|  6.63k|                        self.predicates
   89|  6.63k|                            .push(p.into());
   90|  6.63k|                        self.stack.push(NQuadsState::ExpectedObject);
   91|  6.63k|                        self
   92|       |                    }
   93|  2.05k|                    _ => self.error(
   94|  2.05k|                        errors,
   95|  2.05k|                        "The predicate of a triple should be an IRI, TOKEN found",
   96|  2.05k|                    ),
   97|       |                },
   98|     42|                NQuadsState::ExpectedObject => match token {
   99|  4.61k|                    N3Token::IriRef(o) => {
  100|  4.61k|                        self.objects
  101|  4.61k|                            .push(NamedNode::from(o).into());
  102|  4.61k|                        self.stack
  103|  4.61k|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  104|  4.61k|                        self
  105|       |                    }
  106|      8|                    N3Token::BlankNodeLabel(o) => {
  107|      8|                        self.objects.push(BlankNode::new_unchecked(o).into());
  108|      8|                        self.stack
  109|      8|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  110|      8|                        self
  111|       |                    }
  112|      2|                    N3Token::String(value) => {
  113|      2|                        self.stack
  114|      2|                            .push(NQuadsState::ExpectLiteralAnnotationOrGraphNameOrDot { value });
  115|      2|                        self
  116|       |                    }
  117|       |                    #[cfg(feature = "rdf-star")]
  118|    514|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  119|     42|                        self.stack.push(NQuadsState::AfterQuotedObject);
  120|     42|                        self.stack.push(NQuadsState::ExpectSubject);
  121|     42|                        self
  122|       |                    }
  123|  1.08k|                    _ => self.error(
  124|  1.08k|                        errors,
  125|  1.08k|                        "The object of a triple should be an IRI, a blank node or a literal, TOKEN found",
  126|  1.08k|                    ),
  127|       |                },
  128|      2|                NQuadsState::ExpectLiteralAnnotationOrGraphNameOrDot { value } => match token {
  129|      0|                    N3Token::LangTag(lang_tag) => {
  130|      0|                        self.objects.push(
  131|      0|                            Literal::new_language_tagged_literal_unchecked(
  132|      0|                                value,
  133|      0|                                lang_tag.to_ascii_lowercase(),
  134|      0|                            )
  135|      0|                            .into(),
  136|      0|                        );
  137|      0|                        self.stack
  138|      0|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  139|      0|                        self
  140|       |                    }
  141|      0|                    N3Token::Punctuation("^^") => {
  142|      0|                        self.stack
  143|      0|                            .push(NQuadsState::ExpectLiteralDatatype { value });
  144|      0|                        self
  145|       |                    }
  146|       |                    _ => {
  147|      2|                        self.objects.push(Literal::new_simple_literal(value).into());
  148|      2|                        self.stack
  149|      2|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  150|      2|                        self.recognize_next(token, context, results, errors)
  151|       |                    }
  152|       |                },
  153|      0|                NQuadsState::ExpectLiteralDatatype { value } => match token {
  154|      0|                    N3Token::IriRef(d) => {
  155|      0|                        self.objects.push(
  156|      0|                            Literal::new_typed_literal(
  157|      0|                                value,
  158|      0|                                d
  159|      0|                            )
  160|      0|                            .into(),
  161|      0|                        );
  162|      0|                        self.stack
  163|      0|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  164|      0|                        self
  165|       |                    }
  166|      0|                    _ => self.error(errors, "A literal datatype must be an IRI, found TOKEN"),
  167|       |                },
  168|       |                NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple => {
  169|  4.21k|                    if self.stack.is_empty() {
  170|  3.09k|                        match token {
  171|  3.09k|                            N3Token::IriRef(g) if context.with_graph_name => {
  172|  3.09k|                                self.emit_quad(
  173|  3.09k|                                    results,
  174|  3.09k|                                    NamedNode::from(g).into(),
  175|  3.09k|                                );
  176|  3.09k|                                self.stack.push(NQuadsState::ExpectDot);
  177|  3.09k|                                self
  178|       |                            }
  179|      0|                            N3Token::BlankNodeLabel(g) if context.with_graph_name => {
  180|      0|                                self.emit_quad(results, BlankNode::new_unchecked(g).into());
  181|      0|                                self.stack.push(NQuadsState::ExpectDot);
  182|      0|                                self
  183|       |                            }
  184|       |                            _ => {
  185|  1.11k|                                self.emit_quad(results, GraphName::DefaultGraph);
  186|  1.11k|                                self.stack.push(NQuadsState::ExpectDot);
  187|  1.11k|                                self.recognize_next(token, context, results, errors)
  188|       |                            }
  189|       |                        }
  190|      6|                    } else if token == N3Token::Punctuation(">>") {
  191|      0|                        self
  192|       |                    } else {
  193|      6|                        self.error(errors, "Expecting the end of a quoted triple '>>'")
  194|       |                    }
  195|       |                }
  196|  3.64k|                NQuadsState::ExpectDot => if let N3Token::Punctuation(".") = token {
  197|  1.41k|                    self.stack.push(NQuadsState::ExpectSubject);
  198|  1.41k|                    self
  199|       |                } else {
  200|  2.23k|                    errors.push("Quads should be followed by a dot".into());
  201|  2.23k|                    self.stack.push(NQuadsState::ExpectSubject);
  202|  2.23k|                    self.recognize_next(token, context, results, errors)
  203|       |                },
  204|       |                #[cfg(feature = "rdf-star")]
  205|       |                NQuadsState::AfterQuotedSubject => {
  206|      0|                    let triple = Triple {
  207|      0|                        subject: self.subjects.pop().unwrap(),
  208|      0|                        predicate: self.predicates.pop().unwrap(),
  209|      0|                        object: self.objects.pop().unwrap(),
  210|      0|                    };
  211|      0|                    self.subjects.push(triple.into());
  212|      0|                    self.stack.push(NQuadsState::ExpectPredicate);
  213|      0|                    self.recognize_next(token,context,  results, errors)
  214|       |                }
  215|       |                #[cfg(feature = "rdf-star")]
  216|       |                NQuadsState::AfterQuotedObject => {
  217|      0|                    let triple = Triple {
  218|      0|                        subject: self.subjects.pop().unwrap(),
  219|      0|                        predicate: self.predicates.pop().unwrap(),
  220|      0|                        object: self.objects.pop().unwrap(),
  221|      0|                    };
  222|      0|                    self.objects.push(triple.into());
  223|      0|                    self.stack
  224|      0|                        .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  225|      0|                    self.recognize_next(token, context, results, errors)
  226|       |                }
  227|       |            }
  228|  2.34M|        } else if token == N3Token::Punctuation(".") {
  229|   269k|            self.stack.push(NQuadsState::ExpectSubject);
  230|   269k|            self
  231|       |        } else {
  232|  2.07M|            self
  233|       |        }
  234|  2.63M|    }
_RNvXNtCs4WjTcpTVJQo_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer13lexer_options:
  258|  10.4M|    fn lexer_options(context: &NQuadsRecognizerContext) -> &N3LexerOptions {
  259|  10.4M|        &context.lexer_options
  260|  10.4M|    }
_RNvXNtCs4WjTcpTVJQo_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer13recognize_end:
  236|   104k|    fn recognize_end(
  237|   104k|        mut self,
  238|   104k|        _context: &mut NQuadsRecognizerContext,
  239|   104k|        results: &mut Vec<Quad>,
  240|   104k|        errors: &mut Vec<RuleRecognizerError>,
  241|   104k|    ) {
  242|   104k|        match &*self.stack {
  243|   104k|            [NQuadsState::ExpectSubject] | [] => (),
  244|     24|            [NQuadsState::ExpectDot] => errors.push("Triples should be followed by a dot".into()),
  245|       |            [NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple] => {
  246|     12|                self.emit_quad(results, GraphName::DefaultGraph);
  247|     12|                errors.push("Triples should be followed by a dot".into())
  248|       |            }
  249|      0|            [NQuadsState::ExpectLiteralAnnotationOrGraphNameOrDot { value }] => {
  250|      0|                self.objects.push(Literal::new_simple_literal(value).into());
  251|      0|                self.emit_quad(results, GraphName::DefaultGraph);
  252|      0|                errors.push("Triples should be followed by a dot".into())
  253|       |            }
  254|    130|            _ => errors.push("Unexpected end".into()), //TODO
  255|       |        }
  256|   104k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl12line_formatsNtB4_16NQuadsRecognizer9emit_quad:
  305|  4.22k|    fn emit_quad(&mut self, results: &mut Vec<Quad>, graph_name: GraphName) {
  306|  4.22k|        results.push(Quad {
  307|  4.22k|            subject: self.subjects.pop().unwrap(),
  308|  4.22k|            predicate: self.predicates.pop().unwrap(),
  309|  4.22k|            object: self.objects.pop().unwrap(),
  310|  4.22k|            graph_name,
  311|  4.22k|        })
  312|  4.22k|    }
_RINvMs_NtCs4WjTcpTVJQo_5oxttl12line_formatsNtB5_16NQuadsRecognizer5errorReEB7_:
  292|   236k|    fn error(
  293|   236k|        mut self,
  294|   236k|        errors: &mut Vec<RuleRecognizerError>,
  295|   236k|        msg: impl Into<RuleRecognizerError>,
  296|   236k|    ) -> Self {
  297|   236k|        errors.push(msg.into());
  298|   236k|        self.stack.clear();
  299|   236k|        self.subjects.clear();
  300|   236k|        self.predicates.clear();
  301|   236k|        self.objects.clear();
  302|   236k|        self
  303|   236k|    }

_RINvMs1_NtCs4WjTcpTVJQo_5oxttl6nquadsNtB6_16NQuadsSerializer18serialize_to_writeINtNtCsdBW21Yiwikk_5alloc3vec3VechEECs80t0coX2wt6_6nquads:
  368|  34.6k|    pub fn serialize_to_write<W: Write>(self, write: W) -> ToWriteNQuadsWriter<W> {
  369|  34.6k|        ToWriteNQuadsWriter {
  370|  34.6k|            write,
  371|  34.6k|            writer: self.serialize(),
  372|  34.6k|        }
  373|  34.6k|    }
_RNvMs2_NtCs4WjTcpTVJQo_5oxttl6nquadsINtB5_19ToWriteNQuadsWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE6finishCs80t0coX2wt6_6nquads:
  467|  34.6k|    pub fn finish(self) -> W {
  468|  34.6k|        self.write
  469|  34.6k|    }
_RNvXs_NtCs4WjTcpTVJQo_5oxttl6nquadsINtB4_20FromReadNQuadsReaderRShENtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4nextCs80t0coX2wt6_6nquads:
  204|  36.0k|    fn next(&mut self) -> Option<Result<Quad, ParseError>> {
  205|  36.0k|        self.inner.next()
  206|  36.0k|    }
_RINvMs2_NtCs4WjTcpTVJQo_5oxttl6nquadsINtB6_19ToWriteNQuadsWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE10write_quadRNtNtCsbrE1BkJ52QU_5oxrdf6triple4QuadECs80t0coX2wt6_6nquads:
  462|  1.40k|    pub fn write_quad<'a>(&mut self, q: impl Into<QuadRef<'a>>) -> io::Result<()> {
  463|  1.40k|        self.writer.write_quad(q, &mut self.write)
  464|  1.40k|    }
_RINvMs3_NtCs4WjTcpTVJQo_5oxttl6nquadsNtB6_20LowLevelNQuadsWriter10write_quadRNtNtCsbrE1BkJ52QU_5oxrdf6triple4QuadQINtNtCsdBW21Yiwikk_5alloc3vec3VechEECs80t0coX2wt6_6nquads:
  543|  1.40k|    pub fn write_quad<'a>(
  544|  1.40k|        &mut self,
  545|  1.40k|        q: impl Into<QuadRef<'a>>,
  546|  1.40k|        mut write: impl Write,
  547|  1.40k|    ) -> io::Result<()> {
  548|  1.40k|        writeln!(write, "{} .", q.into())
  549|  1.40k|    }
_RINvMNtCs4WjTcpTVJQo_5oxttl6nquadsNtB3_12NQuadsParser10parse_readRShECs80t0coX2wt6_6nquads:
   82|  34.6k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadNQuadsReader<R> {
   83|  34.6k|        FromReadNQuadsReader {
   84|  34.6k|            inner: self.parse().parser.parse_read(read),
   85|  34.6k|        }
   86|  34.6k|    }
_RNvXs4_NtCs4WjTcpTVJQo_5oxttl6nquadsNtB5_12NQuadsParserNtNtCsl2lhD68vXAd_4core7default7Default7defaultCs80t0coX2wt6_6nquads:
   37|   104k|#[derive(Default)]
_RNvMNtCs4WjTcpTVJQo_5oxttl6nquadsNtB2_12NQuadsParser3newCs80t0coX2wt6_6nquads:
   47|   104k|    pub fn new() -> Self {
   48|   104k|        Self::default()
   49|   104k|    }
_RNvMNtCs4WjTcpTVJQo_5oxttl6nquadsNtB2_12NQuadsParser19with_quoted_triplesCs80t0coX2wt6_6nquads:
   54|   104k|    pub fn with_quoted_triples(mut self) -> Self {
   55|   104k|        self.with_quoted_triples = true;
   56|   104k|        self
   57|   104k|    }
_RNvMs1_NtCs4WjTcpTVJQo_5oxttl6nquadsNtB5_16NQuadsSerializer3newCs80t0coX2wt6_6nquads:
  345|  34.6k|    pub fn new() -> Self {
  346|  34.6k|        Self
  347|  34.6k|    }
_RNvMNtCs4WjTcpTVJQo_5oxttl6nquadsNtB2_12NQuadsParser5parse:
  162|   104k|    pub fn parse(self) -> LowLevelNQuadsReader {
  163|   104k|        LowLevelNQuadsReader {
  164|   104k|            parser: NQuadsRecognizer::new_parser(
  165|   104k|                true,
  166|   104k|                #[cfg(feature = "rdf-star")]
  167|   104k|                self.with_quoted_triples,
  168|   104k|            ),
  169|   104k|        }
  170|   104k|    }
_RNvMs0_NtCs4WjTcpTVJQo_5oxttl6nquadsNtB5_20LowLevelNQuadsReader3end:
  299|  69.3k|    pub fn end(&mut self) {
  300|  69.3k|        self.parser.end()
  301|  69.3k|    }
_RNvMs0_NtCs4WjTcpTVJQo_5oxttl6nquadsNtB5_20LowLevelNQuadsReader6is_end:
  304|  69.3k|    pub fn is_end(&self) -> bool {
  305|  69.3k|        self.parser.is_end()
  306|  69.3k|    }
_RNvMs1_NtCs4WjTcpTVJQo_5oxttl6nquadsNtB5_16NQuadsSerializer9serialize:
  430|  34.6k|    pub fn serialize(&self) -> LowLevelNQuadsWriter {
  431|  34.6k|        LowLevelNQuadsWriter
  432|  34.6k|    }
_RNvMs0_NtCs4WjTcpTVJQo_5oxttl6nquadsNtB5_20LowLevelNQuadsReader9read_next:
  312|  7.86M|    pub fn read_next(&mut self) -> Option<Result<Quad, SyntaxError>> {
  313|  7.86M|        self.parser.read_next()
  314|  7.86M|    }
_RNvMs0_NtCs4WjTcpTVJQo_5oxttl6nquadsNtB5_20LowLevelNQuadsReader17extend_from_slice:
  292|  2.98M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  293|  2.98M|        self.parser.extend_from_slice(other)
  294|  2.98M|    }

_RNvXs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5errorNtB4_11SyntaxErrorNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCs80t0coX2wt6_6nquads:
   38|  4.80M|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   39|  4.80M|        if self.location.start.offset + 1 >= self.location.end.offset {
   40|  4.05M|            write!(
   41|  4.05M|                f,
   42|  4.05M|                "Parser error at line {} column {}: {}",
   43|  4.05M|                self.location.start.line + 1,
   44|  4.05M|                self.location.start.column + 1,
   45|  4.05M|                self.message
   46|  4.05M|            )
   47|   757k|        } else if self.location.start.line == self.location.end.line {
   48|   748k|            write!(
   49|   748k|                f,
   50|   748k|                "Parser error between at line {} between columns {} and column {}: {}",
   51|   748k|                self.location.start.line + 1,
   52|   748k|                self.location.start.column + 1,
   53|   748k|                self.location.end.column + 1,
   54|   748k|                self.message
   55|   748k|            )
   56|       |        } else {
   57|  8.64k|            write!(
   58|  8.64k|                f,
   59|  8.64k|                "Parser error between line {} column {} and line {} column {}: {}",
   60|  8.64k|                self.location.start.line + 1,
   61|  8.64k|                self.location.start.column + 1,
   62|  8.64k|                self.location.end.line + 1,
   63|  8.64k|                self.location.end.column + 1,
   64|  8.64k|                self.message
   65|  8.64k|            )
   66|       |        }
   67|  4.80M|    }

_RINvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB6_5LexerNtNtBa_5lexer7N3LexerE16extend_from_readRShECs80t0coX2wt6_6nquads:
  113|  69.9k|    pub fn extend_from_read(&mut self, read: &mut impl Read) -> io::Result<()> {
  114|  69.9k|        self.shrink_data();
  115|  69.9k|        if self.data.len() == self.max_buffer_size {
  116|      0|            return Err(io::Error::new(
  117|      0|                io::ErrorKind::OutOfMemory,
  118|      0|                format!(
  119|      0|                    "Reached the buffer maximal size of {}",
  120|      0|                    self.max_buffer_size
  121|      0|                ),
  122|      0|            ));
  123|  69.9k|        }
  124|  69.9k|        let min_end = min(self.data.len() + self.min_buffer_size, self.max_buffer_size);
  125|  69.9k|        let new_start = self.data.len();
  126|  69.9k|        self.data.resize(min_end, 0);
  127|  69.9k|        if self.data.len() < self.data.capacity() {
  128|      0|            // We keep extending to have as much space as available without reallocation
  129|      0|            self.data.resize(self.data.capacity(), 0);
  130|  69.9k|        }
  131|  69.9k|        let read = read.read(&mut self.data[new_start..])?;
  132|  69.9k|        self.data.truncate(new_start + read);
  133|  69.9k|        self.is_ending = read == 0;
  134|  69.9k|        Ok(())
  135|  69.9k|    }
_RNvXs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCsl2lhD68vXAd_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejEReEE4fromB8_:
   41|  1.42M|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  1.42M|        (*location.start()..*location.end() + 1, message).into()
   43|  1.42M|    }
_RNCNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB7_5LexerNtNtBb_5lexer7N3LexerE9read_next0Bb_:
  227|  4.54M|        Some(result.map_err(|e| SyntaxError {
  228|  4.54M|            location: self.location_from_buffer_offset_range(e.location),
  229|  4.54M|            message: e.message,
  230|  4.54M|        }))
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  397|  16.2M|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  398|  16.2M|        let mut num_of_jumps = 0;
  399|  16.2M|        let mut last_jump_pos = 0;
  400|  16.2M|        let mut previous_cr = 0;
  401|  16.2M|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  402|  61.4k|            if bytes[pos] == b'\r' {
  403|  24.3k|                previous_cr = pos;
  404|  24.3k|                num_of_jumps += 1;
  405|  24.3k|                last_jump_pos = pos + 1;
  406|  24.3k|            } else {
  407|  37.0k|                if previous_cr < pos - 1 {
  408|  26.6k|                    // We count \r\n as a single line jump
  409|  26.6k|                    num_of_jumps += 1;
  410|  26.6k|                }
  411|  37.0k|                last_jump_pos = pos + 1;
  412|       |            }
  413|       |        }
  414|  16.2M|        (num_of_jumps, last_jump_pos)
  415|  16.2M|    }
_RNvXNtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCsl2lhD68vXAd_4core7convert4FromTINtNtNtB1a_3ops5range5RangejENtNtCsdBW21Yiwikk_5alloc6string6StringEE4fromB6_:
   31|  2.84M|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|  2.84M|        Self {
   33|  2.84M|            location,
   34|  2.84M|            message: message.into(),
   35|  2.84M|        }
   36|  2.84M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE9read_nextB9_:
  166|  10.4M|    pub fn read_next(&mut self, options: &R::Options) -> Option<Result<R::Token<'_>, SyntaxError>> {
  167|  10.4M|        self.skip_whitespaces_and_comments()?;
  168|  10.3M|        self.previous_position = self.position;
  169|  10.3M|        let Some((consumed, result)) = self.parser.recognize_next_token(
  170|  10.3M|            &self.data[self.position.buffer_offset..],
  171|  10.3M|            self.is_ending,
  172|  10.3M|            options,
  173|  10.3M|        ) else {
  174|  3.17M|            return if self.is_ending {
  175|   235k|                if self.position.buffer_offset == self.data.len() {
  176|   208k|                    None // We have finished
  177|       |                } else {
  178|  27.0k|                    let (new_line_jumps, new_line_start) =
  179|  27.0k|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  180|  27.0k|                            &self.data[self.position.buffer_offset..],
  181|  27.0k|                        );
  182|  27.0k|                    if new_line_jumps > 0 {
  183|  3.89k|                        self.position.line_start_buffer_offset =
  184|  3.89k|                            self.position.buffer_offset + new_line_start;
  185|  23.2k|                    }
  186|  27.0k|                    self.position.global_offset +=
  187|  27.0k|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  188|  27.0k|                    self.position.buffer_offset = self.data.len();
  189|  27.0k|                    self.position.global_line += new_line_jumps;
  190|  27.0k|                    let new_position = TextPosition {
  191|  27.0k|                        line: self.position.global_line,
  192|  27.0k|                        column: Self::column_from_bytes(
  193|  27.0k|                            &self.data[self.position.line_start_buffer_offset..],
  194|  27.0k|                        ),
  195|  27.0k|                        offset: self.position.global_offset,
  196|  27.0k|                    };
  197|  27.0k|                    let error = SyntaxError {
  198|  27.0k|                        location: new_position..new_position,
  199|  27.0k|                        message: "Unexpected end of file".into(),
  200|  27.0k|                    };
  201|  27.0k|                    self.position.buffer_offset = self.data.len(); // We consume everything
  202|  27.0k|                    Some(Err(error))
  203|       |                }
  204|       |            } else {
  205|  2.94M|                None
  206|       |            };
  207|       |        };
  208|       |        debug_assert!(
  209|      0|            consumed > 0,
  210|      0|            "The lexer must consume at least one byte each time"
  211|       |        );
  212|       |        debug_assert!(
  213|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  214|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  215|      0|            self.data.len() - self.position.buffer_offset
  216|       |        );
  217|  7.17M|        let (new_line_jumps, new_line_start) =
  218|  7.17M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  219|  7.17M|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  220|  7.17M|            );
  221|  7.17M|        if new_line_jumps > 0 {
  222|  12.0k|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  223|  7.16M|        }
  224|  7.17M|        self.position.buffer_offset += consumed;
  225|  7.17M|        self.position.global_offset += u64::try_from(consumed).unwrap();
  226|  7.17M|        self.position.global_line += new_line_jumps;
  227|  7.17M|        Some(result.map_err(|e| SyntaxError {
  228|       |            location: self.location_from_buffer_offset_range(e.location),
  229|       |            message: e.message,
  230|  7.17M|        }))
  231|  10.4M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  297|  10.4M|    fn skip_whitespaces_and_comments(&mut self) -> Option<()> {
  298|       |        loop {
  299|  10.4M|            self.skip_whitespaces()?;
  300|       |
  301|  10.4M|            let buf = &self.data[self.position.buffer_offset..];
  302|  10.4M|            if let Some(line_comment_start) = self.line_comment_start {
  303|  10.4M|                if buf.starts_with(line_comment_start) {
  304|       |                    // Comment
  305|  65.1k|                    if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  306|  17.9k|                        let mut end_position = line_comment_start.len() + end;
  307|  17.9k|                        if buf.get(end_position).copied() == Some(b'\r') {
  308|       |                            // We look for \n for Windows line end style
  309|  14.6k|                            if let Some(c) = buf.get(end_position + 1) {
  310|  2.86k|                                if *c == b'\n' {
  311|     28|                                    end_position += 1;
  312|  2.83k|                                }
  313|  11.7k|                            } else if !self.is_ending {
  314|  11.7k|                                return None; // We need to read more
  315|     50|                            }
  316|  3.27k|                        }
  317|  6.19k|                        let comment_size = end_position + 1;
  318|  6.19k|                        self.position.buffer_offset += comment_size;
  319|  6.19k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  320|  6.19k|                        self.position.global_offset += u64::try_from(comment_size).unwrap();
  321|  6.19k|                        self.position.global_line += 1;
  322|  6.19k|                        continue;
  323|  47.2k|                    }
  324|  47.2k|                    if self.is_ending {
  325|  1.78k|                        self.position.buffer_offset = self.data.len(); // EOF
  326|  1.78k|                        return Some(());
  327|  45.4k|                    }
  328|  45.4k|                    return None; // We need more data
  329|  10.3M|                }
  330|      0|            }
  331|  10.3M|            return Some(());
  332|       |        }
  333|  10.4M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  335|  10.4M|    fn skip_whitespaces(&mut self) -> Option<()> {
  336|  10.4M|        if self.is_line_jump_whitespace {
  337|  10.4M|            let mut i = self.position.buffer_offset;
  338|  10.6M|            while let Some(c) = self.data.get(i) {
  339|  9.64M|                match c {
  340|  22.4k|                    b' ' | b'\t' => {
  341|  22.4k|                        self.position.buffer_offset += 1;
  342|  22.4k|                        self.position.global_offset += 1;
  343|  22.4k|                    }
  344|       |                    b'\r' => {
  345|       |                        // We look for \n for Windows line end style
  346|   124k|                        let mut increment: u8 = 1;
  347|   124k|                        if let Some(c) = self.data.get(i + 1) {
  348|   108k|                            if *c == b'\n' {
  349|     70|                                increment += 1;
  350|     70|                                i += 1;
  351|   108k|                            }
  352|  15.3k|                        } else if !self.is_ending {
  353|  15.1k|                            return None; // We need to read more
  354|    166|                        }
  355|   108k|                        self.position.buffer_offset += usize::from(increment);
  356|   108k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  357|   108k|                        self.position.global_offset += u64::from(increment);
  358|   108k|                        self.position.global_line += 1;
  359|       |                    }
  360|  79.2k|                    b'\n' => {
  361|  79.2k|                        self.position.buffer_offset += 1;
  362|  79.2k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  363|  79.2k|                        self.position.global_offset += 1;
  364|  79.2k|                        self.position.global_line += 1;
  365|  79.2k|                    }
  366|  9.41M|                    _ => return Some(()),
  367|       |                }
  368|   210k|                i += 1;
  369|       |                //TODO: SIMD
  370|       |            }
  371|       |        } else {
  372|      0|            for c in &self.data[self.position.buffer_offset..] {
  373|      0|                if matches!(c, b' ' | b'\t') {
  374|      0|                    self.position.buffer_offset += 1;
  375|      0|                    self.position.global_offset += 1;
  376|      0|                } else {
  377|      0|                    return Some(());
  378|       |                }
  379|       |                //TODO: SIMD
  380|       |            }
  381|       |        }
  382|   999k|        Some(())
  383|  10.4M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE33location_from_buffer_offset_rangeB9_:
  233|  4.54M|    pub fn location_from_buffer_offset_range(
  234|  4.54M|        &self,
  235|  4.54M|        offset_range: Range<usize>,
  236|  4.54M|    ) -> Range<TextPosition> {
  237|  4.54M|        let start_offset = self.previous_position.buffer_offset + offset_range.start;
  238|  4.54M|        let (start_extra_line_jumps, start_line_start) =
  239|  4.54M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  240|  4.54M|                &self.data[self.previous_position.buffer_offset..start_offset],
  241|  4.54M|            );
  242|  4.54M|        let start_line_start = if start_extra_line_jumps > 0 {
  243|  2.57k|            start_line_start + self.previous_position.buffer_offset
  244|       |        } else {
  245|  4.54M|            self.previous_position.line_start_buffer_offset
  246|       |        };
  247|  4.54M|        let end_offset = self.previous_position.buffer_offset + offset_range.end;
  248|  4.54M|        let (end_extra_line_jumps, end_line_start) =
  249|  4.54M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  250|  4.54M|                &self.data[self.previous_position.buffer_offset..end_offset],
  251|  4.54M|            );
  252|  4.54M|        let end_line_start = if end_extra_line_jumps > 0 {
  253|  11.7k|            end_line_start + self.previous_position.buffer_offset
  254|       |        } else {
  255|  4.53M|            self.previous_position.line_start_buffer_offset
  256|       |        };
  257|  4.54M|        TextPosition {
  258|  4.54M|            line: self.previous_position.global_line + start_extra_line_jumps,
  259|  4.54M|            column: Self::column_from_bytes(&self.data[start_line_start..start_offset]),
  260|  4.54M|            offset: self.previous_position.global_offset
  261|  4.54M|                + u64::try_from(offset_range.start).unwrap(),
  262|  4.54M|        }..TextPosition {
  263|  4.54M|            line: self.previous_position.global_line + end_extra_line_jumps,
  264|  4.54M|            column: Self::column_from_bytes(&self.data[end_line_start..end_offset]),
  265|  4.54M|            offset: self.previous_position.global_offset + u64::try_from(offset_range.end).unwrap(),
  266|  4.54M|        }
  267|  4.54M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE11shrink_dataB9_:
  385|  3.05M|    fn shrink_data(&mut self) {
  386|  3.05M|        if self.position.line_start_buffer_offset > 0 {
  387|  35.8k|            self.data
  388|  35.8k|                .copy_within(self.position.line_start_buffer_offset.., 0);
  389|  35.8k|            self.data
  390|  35.8k|                .truncate(self.data.len() - self.position.line_start_buffer_offset);
  391|  35.8k|            self.position.buffer_offset -= self.position.line_start_buffer_offset;
  392|  35.8k|            self.position.line_start_buffer_offset = 0;
  393|  35.8k|            self.previous_position = self.position;
  394|  3.01M|        }
  395|  3.05M|    }
_RNvXs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCsl2lhD68vXAd_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejENtNtCsdBW21Yiwikk_5alloc6string6StringEE4fromB8_:
   41|   260k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|   260k|        (*location.start()..*location.end() + 1, message).into()
   43|   260k|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3endB9_:
  109|  69.3k|    pub fn end(&mut self) {
  110|  69.3k|        self.is_ending = true;
  111|  69.3k|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17last_token_sourceB9_:
  286|   238k|    pub fn last_token_source(&self) -> Cow<'_, str> {
  287|   238k|        String::from_utf8_lossy(
  288|   238k|            &self.data[self.previous_position.buffer_offset..self.position.buffer_offset],
  289|   238k|        )
  290|   238k|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17column_from_bytesB9_:
  417|  16.0M|    fn column_from_bytes(bytes: &[u8]) -> u64 {
  418|  16.0M|        match str::from_utf8(bytes) {
  419|  7.57M|            Ok(s) => u64::try_from(s.chars().count()).unwrap(),
  420|  8.45M|            Err(e) => {
  421|  8.45M|                if e.valid_up_to() == 0 {
  422|  2.01M|                    0
  423|       |                } else {
  424|  6.44M|                    Self::column_from_bytes(&bytes[..e.valid_up_to()])
  425|       |                }
  426|       |            }
  427|       |        }
  428|  16.0M|    }
_RNvXNtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCsl2lhD68vXAd_4core7convert4FromTINtNtNtB1a_3ops5range5RangejEReEE4fromB6_:
   31|  1.80M|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|  1.80M|        Self {
   33|  1.80M|            location,
   34|  1.80M|            message: message.into(),
   35|  1.80M|        }
   36|  1.80M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE6is_endB9_:
  292|  3.22M|    pub fn is_end(&self) -> bool {
  293|  3.22M|        self.is_ending && self.data.len() == self.position.buffer_offset
  294|  3.22M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3newB9_:
   73|   104k|    pub fn new(
   74|   104k|        parser: R,
   75|   104k|        min_buffer_size: usize,
   76|   104k|        max_buffer_size: usize,
   77|   104k|        is_line_jump_whitespace: bool,
   78|   104k|        line_comment_start: Option<&'static [u8]>,
   79|   104k|    ) -> Self {
   80|   104k|        Self {
   81|   104k|            parser,
   82|   104k|            data: Vec::new(),
   83|   104k|            position: Position {
   84|   104k|                line_start_buffer_offset: 0,
   85|   104k|                buffer_offset: 0,
   86|   104k|                global_offset: 0,
   87|   104k|                global_line: 0,
   88|   104k|            },
   89|   104k|            previous_position: Position {
   90|   104k|                line_start_buffer_offset: 0,
   91|   104k|                buffer_offset: 0,
   92|   104k|                global_offset: 0,
   93|   104k|                global_line: 0,
   94|   104k|            },
   95|   104k|            is_ending: false,
   96|   104k|            min_buffer_size,
   97|   104k|            max_buffer_size,
   98|   104k|            is_line_jump_whitespace,
   99|   104k|            line_comment_start,
  100|   104k|        }
  101|   104k|    }
_RNvXs0_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerNtB5_20TokenRecognizerErrorINtNtCsl2lhD68vXAd_4core7convert4FromTjNtNtCsdBW21Yiwikk_5alloc6string6StringEE4fromB9_:
   47|   166k|    fn from((location, message): (usize, S)) -> Self {
   48|   166k|        (location..=location, message).into()
   49|   166k|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17extend_from_sliceB9_:
  103|  2.98M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  104|  2.98M|        self.shrink_data();
  105|  2.98M|        self.data.extend_from_slice(other);
  106|  2.98M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE19last_token_locationB9_:
  269|   238k|    pub fn last_token_location(&self) -> Range<TextPosition> {
  270|   238k|        TextPosition {
  271|   238k|            line: self.previous_position.global_line,
  272|   238k|            column: Self::column_from_bytes(
  273|   238k|                &self.data[self.previous_position.line_start_buffer_offset
  274|   238k|                    ..self.previous_position.buffer_offset],
  275|   238k|            ),
  276|   238k|            offset: self.previous_position.global_offset,
  277|   238k|        }..TextPosition {
  278|   238k|            line: self.position.global_line,
  279|   238k|            column: Self::column_from_bytes(
  280|   238k|                &self.data[self.position.line_start_buffer_offset..self.position.buffer_offset],
  281|   238k|            ),
  282|   238k|            offset: self.position.global_offset,
  283|   238k|        }
  284|   238k|    }

_RINvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB5_6ParserNtNtB9_12line_formats16NQuadsRecognizerE10parse_readRShECs80t0coX2wt6_6nquads:
  123|  34.6k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadIterator<R, RR> {
  124|  34.6k|        FromReadIterator { read, parser: self }
  125|  34.6k|    }
_RNvXs0_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB5_16FromReadIteratorRShNtNtB9_12line_formats16NQuadsRecognizerENtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4nextCs80t0coX2wt6_6nquads:
  145|  36.0k|    fn next(&mut self) -> Option<Self::Item> {
  146|   106k|        while !self.parser.is_end() {
  147|  71.3k|            if let Some(result) = self.parser.read_next() {
  148|  1.40k|                return Some(result.map_err(ParseError::Syntax));
  149|  69.9k|            }
  150|  69.9k|            if let Err(e) = self.parser.lexer.extend_from_read(&mut self.read) {
  151|      0|                return Some(Err(e.into()));
  152|  69.9k|            }
  153|       |        }
  154|  34.6k|        None
  155|  36.0k|    }
_RNvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_12line_formats16NQuadsRecognizerE9read_nextB8_:
   80|  7.93M|    pub fn read_next(&mut self) -> Option<Result<RR::Output, SyntaxError>> {
   81|       |        loop {
   82|  10.6M|            if let Some(error) = self.errors.pop() {
   83|   238k|                return Some(Err(SyntaxError {
   84|   238k|                    location: self.lexer.last_token_location(),
   85|   238k|                    message: error
   86|   238k|                        .message
   87|   238k|                        .replace("TOKEN", &self.lexer.last_token_source()),
   88|   238k|                }));
   89|  10.4M|            }
   90|  10.4M|            if let Some(result) = self.results.pop() {
   91|  4.22k|                return Some(Ok(result));
   92|  10.4M|            }
   93|  10.4M|            if let Some(result) = self.lexer.read_next(RR::lexer_options(&self.context)) {
   94|  7.20M|                match result {
   95|  2.63M|                    Ok(token) => {
   96|  2.63M|                        self.state = self.state.take().map(|state| {
   97|       |                            state.recognize_next(
   98|       |                                token,
   99|       |                                &mut self.context,
  100|       |                                &mut self.results,
  101|       |                                &mut self.errors,
  102|       |                            )
  103|  2.63M|                        });
  104|  2.63M|                        continue;
  105|       |                    }
  106|  4.57M|                    Err(e) => {
  107|  4.57M|                        self.state = self.state.take().map(RR::error_recovery_state);
  108|  4.57M|                        return Some(Err(e));
  109|       |                    }
  110|       |                }
  111|  3.22M|            }
  112|  3.22M|            if self.lexer.is_end() {
  113|   208k|                let Some(state) = self.state.take() else {
  114|   104k|                    return None;
  115|       |                };
  116|   104k|                state.recognize_end(&mut self.context, &mut self.results, &mut self.errors)
  117|       |            } else {
  118|  3.01M|                return None;
  119|       |            }
  120|       |        }
  121|  7.93M|    }
_RNCNvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB6_6ParserNtNtBa_12line_formats16NQuadsRecognizerE9read_next0Ba_:
   96|  2.63M|                        self.state = self.state.take().map(|state| {
   97|  2.63M|                            state.recognize_next(
   98|  2.63M|                                token,
   99|  2.63M|                                &mut self.context,
  100|  2.63M|                                &mut self.results,
  101|  2.63M|                                &mut self.errors,
  102|  2.63M|                            )
  103|  2.63M|                        });
_RNvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_12line_formats16NQuadsRecognizerE17extend_from_sliceB8_:
   66|  2.98M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
   67|  2.98M|        self.lexer.extend_from_slice(other)
   68|  2.98M|    }
_RNvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_12line_formats16NQuadsRecognizerE6is_endB8_:
   76|   175k|    pub fn is_end(&self) -> bool {
   77|   175k|        self.state.is_none() && self.results.is_empty() && self.errors.is_empty()
   78|   175k|    }
_RNvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_12line_formats16NQuadsRecognizerE3newB8_:
   56|   104k|    pub fn new(lexer: Lexer<RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   57|   104k|        Self {
   58|   104k|            lexer,
   59|   104k|            state: Some(recognizer),
   60|   104k|            context,
   61|   104k|            results: vec![],
   62|   104k|            errors: vec![],
   63|   104k|        }
   64|   104k|    }
_RNvXNtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCsl2lhD68vXAd_4core7convert4FromReE4fromB6_:
   39|   238k|    fn from(message: S) -> Self {
   40|   238k|        Self {
   41|   238k|            message: message.into(),
   42|   238k|        }
   43|   238k|    }
_RNvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_12line_formats16NQuadsRecognizerE3endB8_:
   71|  69.3k|    pub fn end(&mut self) {
   72|  69.3k|        self.lexer.end()
   73|  69.3k|    }


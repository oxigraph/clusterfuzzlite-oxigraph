rust_fuzzer_test_input:
  209|  3.75k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  3.75k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  3.75k|                }
  223|  3.75k|
  224|  3.75k|                __libfuzzer_sys_run(bytes);
  225|  3.75k|                0
  226|  3.75k|            }
_RNvNvCsjN1WeLjmkFM_6nquads1__19___libfuzzer_sys_run:
  241|  3.75k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|  3.75k|            }
LLVMFuzzerTestOneInput:
   58|  3.75k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  3.75k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  3.75k|    });
   63|  3.75k|
   64|  3.75k|    match test_input {
   65|  3.75k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  3.75k|}
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}
_RNCNvCslXKkHRQk88S_13libfuzzer_sys15test_input_wrap0B3_:
   59|  3.75k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  3.75k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  3.75k|        rust_fuzzer_test_input(data_slice)
   62|  3.75k|    });

_RINvNtNtNtCsjrlUEbVm63W_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECsgfQ0H3lfwIZ_5oxttl:
 1125|  7.74k|pub(crate) unsafe fn search_slice_with_raw(
 1126|  7.74k|    haystack: &[u8],
 1127|  7.74k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  7.74k|) -> Option<usize> {
 1129|  7.74k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  7.74k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  7.74k|    // a &[u8].
 1132|  7.74k|    let start = haystack.as_ptr();
 1133|  7.74k|    let end = start.add(haystack.len());
 1134|  7.74k|    let found = find_raw(start, end)?;
 1135|  1.21k|    Some(found.distance(start))
 1136|  7.74k|}
_RINvNtNtNtCsjrlUEbVm63W_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr7memchr20ECsgfQ0H3lfwIZ_5oxttl:
 1125|   348k|pub(crate) unsafe fn search_slice_with_raw(
 1126|   348k|    haystack: &[u8],
 1127|   348k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|   348k|) -> Option<usize> {
 1129|   348k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|   348k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|   348k|    // a &[u8].
 1132|   348k|    let start = haystack.as_ptr();
 1133|   348k|    let end = start.add(haystack.len());
 1134|   348k|    let found = find_raw(start, end)?;
 1135|   178k|    Some(found.distance(start))
 1136|   348k|}
_RNvMs3_NtNtNtCsjrlUEbVm63W_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|   899k|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|   899k|        Iter {
 1029|   899k|            original_start: haystack.as_ptr(),
 1030|   899k|            start: haystack.as_ptr(),
 1031|   899k|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|   899k|            haystack: core::marker::PhantomData,
 1033|   899k|        }
 1034|   899k|    }
_RINvMs3_NtNtNtCsjrlUEbVm63W_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0ECsgfQ0H3lfwIZ_5oxttl:
 1044|   908k|    pub(crate) unsafe fn next(
 1045|   908k|        &mut self,
 1046|   908k|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|   908k|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|   908k|        let found = find_raw(self.start, self.end)?;
 1057|  8.28k|        let result = found.distance(self.original_start);
 1058|  8.28k|        self.start = found.add(1);
 1059|  8.28k|        Some(result)
 1060|   908k|    }
_RNvMNtNtNtCsjrlUEbVm63W_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE7needle1B8_:
  117|  10.1k|    pub(crate) fn needle1(&self) -> u8 {
  118|  10.1k|        self.s1
  119|  10.1k|    }
_RINvMNtNtNtCsjrlUEbVm63W_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  3.13k|    unsafe fn search_chunk(
  417|  3.13k|        &self,
  418|  3.13k|        cur: *const u8,
  419|  3.13k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  3.13k|    ) -> Option<*const u8> {
  421|  3.13k|        let chunk = V::load_unaligned(cur);
  422|  3.13k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  3.13k|        if mask.has_non_zero() {
  424|    199|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  2.93k|            None
  427|       |        }
  428|  3.13k|    }
_RNvMNtNtNtCsjrlUEbVm63W_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  1.49k|    pub(crate) unsafe fn find_raw(
  144|  1.49k|        &self,
  145|  1.49k|        start: *const u8,
  146|  1.49k|        end: *const u8,
  147|  1.49k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  1.49k|        let topos = V::Mask::first_offset;
  155|  1.49k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  1.49k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|    123|            return Some(cur);
  167|  1.37k|        }
  168|  1.37k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  1.37k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  1.37k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  1.37k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  1.96k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|    660|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|     66|                return Some(cur);
  216|    594|            }
  217|    594|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  1.30k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|    975|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|    975|            return self.search_chunk(cur, topos);
  228|    333|        }
  229|    333|        None
  230|  1.49k|    }
_RNvMs_NtNtNtCsjrlUEbVm63W_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  2.36M|    pub(crate) fn needle1(&self) -> u8 {
  462|  2.36M|        self.s1
  463|  2.36M|    }
_RINvNtNtNtCsjrlUEbVm63W_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  2.31k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  2.31k|    start: *const u8,
 1150|  2.31k|    end: *const u8,
 1151|  2.31k|    confirm: F,
 1152|  2.31k|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  2.31k|    let mut ptr = start;
 1155|  12.2k|    while ptr < end {
 1156|  10.1k|        if confirm(*ptr) {
 1157|    213|            return Some(ptr);
 1158|  9.97k|        }
 1159|  9.97k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  2.10k|    None
 1162|  2.31k|}
_RINvNtNtNtCsjrlUEbVm63W_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|   896k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|   896k|    start: *const u8,
 1150|   896k|    end: *const u8,
 1151|   896k|    confirm: F,
 1152|   896k|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|   896k|    let mut ptr = start;
 1155|  3.21M|    while ptr < end {
 1156|  2.36M|        if confirm(*ptr) {
 1157|  47.9k|            return Some(ptr);
 1158|  2.31M|        }
 1159|  2.31M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|   848k|    None
 1162|   896k|}
_RNvMNtNtNtCsjrlUEbVm63W_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE3newB8_:
  111|  7.74k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  7.74k|        One { s1: needle, v1: V::splat(needle) }
  113|  7.74k|    }
_RINvMNtNtNtCsjrlUEbVm63W_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  8.74k|    unsafe fn search_chunk(
  417|  8.74k|        &self,
  418|  8.74k|        cur: *const u8,
  419|  8.74k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  8.74k|    ) -> Option<*const u8> {
  421|  8.74k|        let chunk = V::load_unaligned(cur);
  422|  8.74k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  8.74k|        if mask.has_non_zero() {
  424|    568|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  8.17k|            None
  427|       |        }
  428|  8.74k|    }
_RNvMs_NtNtNtCsjrlUEbVm63W_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  2.32M|    pub(crate) fn needle2(&self) -> u8 {
  468|  2.32M|        self.s2
  469|  2.32M|    }
_RINvMs_NtNtNtCsjrlUEbVm63W_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  73.9k|    unsafe fn search_chunk(
  671|  73.9k|        &self,
  672|  73.9k|        cur: *const u8,
  673|  73.9k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  73.9k|    ) -> Option<*const u8> {
  675|  73.9k|        let chunk = V::load_unaligned(cur);
  676|  73.9k|        let eq1 = self.v1.cmpeq(chunk);
  677|  73.9k|        let eq2 = self.v2.cmpeq(chunk);
  678|  73.9k|        let mask = eq1.or(eq2).movemask();
  679|  73.9k|        if mask.has_non_zero() {
  680|  18.7k|            let mask1 = eq1.movemask();
  681|  18.7k|            let mask2 = eq2.movemask();
  682|  18.7k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  55.1k|            None
  685|       |        }
  686|  73.9k|    }
_RNvMNtNtNtCsjrlUEbVm63W_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE3newB8_:
  111|  7.74k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  7.74k|        One { s1: needle, v1: V::splat(needle) }
  113|  7.74k|    }
_RNvMs_NtNtNtCsjrlUEbVm63W_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE8find_rawBa_:
  493|   132k|    pub(crate) unsafe fn find_raw(
  494|   132k|        &self,
  495|   132k|        start: *const u8,
  496|   132k|        end: *const u8,
  497|   132k|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   132k|        let topos = V::Mask::first_offset;
  505|   132k|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   132k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   117k|            return Some(cur);
  517|  15.4k|        }
  518|  15.4k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  15.4k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  15.4k|        if len >= Self::LOOP_SIZE {
  522|  34.7k|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|  28.1k|                let a = V::load_aligned(cur);
  526|  28.1k|                let b = V::load_aligned(cur.add(V::BYTES));
  527|  28.1k|                let eqa1 = self.v1.cmpeq(a);
  528|  28.1k|                let eqb1 = self.v1.cmpeq(b);
  529|  28.1k|                let eqa2 = self.v2.cmpeq(a);
  530|  28.1k|                let eqb2 = self.v2.cmpeq(b);
  531|  28.1k|                let or1 = eqa1.or(eqb1);
  532|  28.1k|                let or2 = eqa2.or(eqb2);
  533|  28.1k|                let or3 = or1.or(or2);
  534|  28.1k|                if or3.movemask_will_have_non_zero() {
  535|  1.66k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|  1.66k|                    if mask.has_non_zero() {
  537|  1.05k|                        return Some(cur.add(topos(mask)));
  538|    609|                    }
  539|    609|
  540|    609|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|    609|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|  26.5k|                }
  544|  26.5k|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|  7.19k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  19.0k|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  5.80k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|    479|                return Some(cur);
  554|  5.32k|            }
  555|  5.32k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|  13.2k|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|  12.6k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|  12.6k|            return self.search_chunk(cur, topos);
  566|    628|        }
  567|    628|        None
  568|   132k|    }
_RINvMs_NtNtNtCsjrlUEbVm63W_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|   150k|    unsafe fn search_chunk(
  671|   150k|        &self,
  672|   150k|        cur: *const u8,
  673|   150k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|   150k|    ) -> Option<*const u8> {
  675|   150k|        let chunk = V::load_unaligned(cur);
  676|   150k|        let eq1 = self.v1.cmpeq(chunk);
  677|   150k|        let eq2 = self.v2.cmpeq(chunk);
  678|   150k|        let mask = eq1.or(eq2).movemask();
  679|   150k|        if mask.has_non_zero() {
  680|   118k|            let mask1 = eq1.movemask();
  681|   118k|            let mask2 = eq2.movemask();
  682|   118k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  32.0k|            None
  685|       |        }
  686|   150k|    }
_RNvMs_NtNtNtCsjrlUEbVm63W_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE8find_rawBa_:
  493|  43.0k|    pub(crate) unsafe fn find_raw(
  494|  43.0k|        &self,
  495|  43.0k|        start: *const u8,
  496|  43.0k|        end: *const u8,
  497|  43.0k|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  43.0k|        let topos = V::Mask::first_offset;
  505|  43.0k|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  43.0k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  16.6k|            return Some(cur);
  517|  26.3k|        }
  518|  26.3k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  26.3k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  26.3k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|  26.3k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  32.6k|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  6.91k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|    644|                return Some(cur);
  554|  6.27k|            }
  555|  6.27k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|  25.7k|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|  23.9k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|  23.9k|            return self.search_chunk(cur, topos);
  566|  1.73k|        }
  567|  1.73k|        None
  568|  43.0k|    }
_RNvMs_NtNtNtCsjrlUEbVm63W_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE3newBa_:
  450|  1.25M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  1.25M|        Two {
  452|  1.25M|            s1: needle1,
  453|  1.25M|            s2: needle2,
  454|  1.25M|            v1: V::splat(needle1),
  455|  1.25M|            v2: V::splat(needle2),
  456|  1.25M|        }
  457|  1.25M|    }
_RNvMNtNtNtCsjrlUEbVm63W_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  3.26k|    pub(crate) unsafe fn find_raw(
  144|  3.26k|        &self,
  145|  3.26k|        start: *const u8,
  146|  3.26k|        end: *const u8,
  147|  3.26k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  3.26k|        let topos = V::Mask::first_offset;
  155|  3.26k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  3.26k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|    480|            return Some(cur);
  167|  2.78k|        }
  168|  2.78k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  2.78k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  2.78k|        if len >= Self::LOOP_SIZE {
  172|  1.48k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|    813|                let a = V::load_aligned(cur);
  176|    813|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|    813|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|    813|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|    813|                let eqa = self.v1.cmpeq(a);
  180|    813|                let eqb = self.v1.cmpeq(b);
  181|    813|                let eqc = self.v1.cmpeq(c);
  182|    813|                let eqd = self.v1.cmpeq(d);
  183|    813|                let or1 = eqa.or(eqb);
  184|    813|                let or2 = eqc.or(eqd);
  185|    813|                let or3 = or1.or(or2);
  186|    813|                if or3.movemask_will_have_non_zero() {
  187|    230|                    let mask = eqa.movemask();
  188|    230|                    if mask.has_non_zero() {
  189|     69|                        return Some(cur.add(topos(mask)));
  190|    161|                    }
  191|    161|
  192|    161|                    let mask = eqb.movemask();
  193|    161|                    if mask.has_non_zero() {
  194|     71|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|     90|                    }
  196|     90|
  197|     90|                    let mask = eqc.movemask();
  198|     90|                    if mask.has_non_zero() {
  199|     31|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|     59|                    }
  201|     59|
  202|     59|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|     59|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|    583|                }
  206|    583|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  1.87k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  5.73k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  3.24k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|     61|                return Some(cur);
  216|  3.18k|            }
  217|  3.18k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  2.49k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  2.23k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  2.23k|            return self.search_chunk(cur, topos);
  228|    253|        }
  229|    253|        None
  230|  3.26k|    }
_RNvMs_NtNtNtCsjrlUEbVm63W_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE3newBa_:
  450|  1.25M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  1.25M|        Two {
  452|  1.25M|            s1: needle1,
  453|  1.25M|            s2: needle2,
  454|  1.25M|            v1: V::splat(needle1),
  455|  1.25M|            v2: V::splat(needle2),
  456|  1.25M|        }
  457|  1.25M|    }

_RNvMs2_NtNtNtNtCsjrlUEbVm63W_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNCNvMNtNtNtNtCsjrlUEbVm63W_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|  10.1k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|  10.1k|                    b == self.sse2.needle1()
  194|  10.1k|                })
_RNvMNtNtNtNtCsjrlUEbVm63W_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  3.26k|    unsafe fn find_raw_avx2(
  397|  3.26k|        &self,
  398|  3.26k|        start: *const u8,
  399|  3.26k|        end: *const u8,
  400|  3.26k|    ) -> Option<*const u8> {
  401|  3.26k|        self.avx2.find_raw(start, end)
  402|  3.26k|    }
_RNvMs2_NtNtNtNtCsjrlUEbVm63W_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  1.25M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  1.25M|        Two {
  558|  1.25M|            sse2: generic::Two::new(needle1, needle2),
  559|  1.25M|            avx2: generic::Two::new(needle1, needle2),
  560|  1.25M|        }
  561|  1.25M|    }
_RNvMs2_NtNtNtNtCsjrlUEbVm63W_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  1.25M|    pub unsafe fn find_raw(
  655|  1.25M|        &self,
  656|  1.25M|        start: *const u8,
  657|  1.25M|        end: *const u8,
  658|  1.25M|    ) -> Option<*const u8> {
  659|  1.25M|        if start >= end {
  660|   184k|            return None;
  661|  1.07M|        }
  662|  1.07M|        let len = end.distance(start);
  663|  1.07M|        if len < __m256i::BYTES {
  664|   939k|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|   896k|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|   896k|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|  43.0k|                self.find_raw_sse2(start, end)
  674|       |            };
  675|   132k|        }
  676|   132k|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|   132k|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|   132k|        // enough to run on the vector routine. Pointer validity is caller's
  679|   132k|        // responsibility.
  680|   132k|        //
  681|   132k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|   132k|        // means we'd have to annotate this routine with `target_feature`.
  683|   132k|        // Which is fine, because this routine is `unsafe` anyway and the
  684|   132k|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|   132k|        // The real problem is that a routine with a `target_feature`
  686|   132k|        // annotation generally can't be inlined into caller code unless
  687|   132k|        // the caller code has the same target feature annotations. Namely,
  688|   132k|        // the common case (at time of writing) is for calling code to not
  689|   132k|        // have the `avx2` target feature enabled *at compile time*. Without
  690|   132k|        // `target_feature` on this routine, it can be inlined which will
  691|   132k|        // handle some of the short-haystack cases above without touching the
  692|   132k|        // architecture specific code.
  693|   132k|        self.find_raw_avx2(start, end)
  694|  1.25M|    }
_RNvMs2_NtNtNtNtCsjrlUEbVm63W_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|   132k|    unsafe fn find_raw_avx2(
  805|   132k|        &self,
  806|   132k|        start: *const u8,
  807|   132k|        end: *const u8,
  808|   132k|    ) -> Option<*const u8> {
  809|   132k|        self.avx2.find_raw(start, end)
  810|   132k|    }
_RNvMNtNtNtNtCsjrlUEbVm63W_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCsjrlUEbVm63W_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  7.74k|    pub unsafe fn find_raw(
  180|  7.74k|        &self,
  181|  7.74k|        start: *const u8,
  182|  7.74k|        end: *const u8,
  183|  7.74k|    ) -> Option<*const u8> {
  184|  7.74k|        if start >= end {
  185|    672|            return None;
  186|  7.07k|        }
  187|  7.07k|        let len = end.distance(start);
  188|  7.07k|        if len < __m256i::BYTES {
  189|  3.81k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  2.31k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  2.31k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  1.49k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  3.26k|        }
  201|  3.26k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  3.26k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  3.26k|        // enough to run on the vector routine. Pointer validity is caller's
  204|  3.26k|        // responsibility.
  205|  3.26k|        //
  206|  3.26k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  3.26k|        // means we'd have to annotate this routine with `target_feature`.
  208|  3.26k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  3.26k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  3.26k|        // The real problem is that a routine with a `target_feature`
  211|  3.26k|        // annotation generally can't be inlined into caller code unless
  212|  3.26k|        // the caller code has the same target feature annotations. Namely,
  213|  3.26k|        // the common case (at time of writing) is for calling code to not
  214|  3.26k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  3.26k|        // `target_feature` on this routine, it can be inlined which will
  216|  3.26k|        // handle some of the short-haystack cases above without touching the
  217|  3.26k|        // architecture specific code.
  218|  3.26k|        self.find_raw_avx2(start, end)
  219|  7.74k|    }
_RNvMs2_NtNtNtNtCsjrlUEbVm63W_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|  43.0k|    unsafe fn find_raw_sse2(
  765|  43.0k|        &self,
  766|  43.0k|        start: *const u8,
  767|  43.0k|        end: *const u8,
  768|  43.0k|    ) -> Option<*const u8> {
  769|  43.0k|        self.sse2.find_raw(start, end)
  770|  43.0k|    }
_RNvMNtNtNtNtCsjrlUEbVm63W_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  1.49k|    unsafe fn find_raw_sse2(
  337|  1.49k|        &self,
  338|  1.49k|        start: *const u8,
  339|  1.49k|        end: *const u8,
  340|  1.49k|    ) -> Option<*const u8> {
  341|  1.49k|        self.sse2.find_raw(start, end)
  342|  1.49k|    }
_RNvMNtNtNtNtCsjrlUEbVm63W_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  7.74k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  7.74k|        One {
   71|  7.74k|            sse2: generic::One::new(needle),
   72|  7.74k|            avx2: generic::One::new(needle),
   73|  7.74k|        }
   74|  7.74k|    }
_RNCNvMs2_NtNtNtNtCsjrlUEbVm63W_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  2.36M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  2.36M|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  2.36M|                })

_RNvNtNtNtCsjrlUEbVm63W_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  1.25M|pub(crate) fn memchr2_raw(
  221|  1.25M|    n1: u8,
  222|  1.25M|    n2: u8,
  223|  1.25M|    start: *const u8,
  224|  1.25M|    end: *const u8,
  225|  1.25M|) -> Option<*const u8> {
  226|  1.25M|    // SAFETY: We provide a valid function pointer type.
  227|  1.25M|    unsafe_ifunc!(
  228|  1.25M|        Two,
  229|  1.25M|        find_raw,
  230|  1.25M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  1.25M|        Option<*const u8>,
  232|  1.25M|        start,
  233|  1.25M|        end,
  234|  1.25M|        n1,
  235|  1.25M|        n2
  236|  1.25M|    )
  237|  1.25M|}
_RNvNvNtNtNtCsjrlUEbVm63W_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  7.74k|        unsafe fn find_avx2(
   79|  7.74k|            $($needle: u8),+,
   80|  7.74k|            $hay_start: *const u8,
   81|  7.74k|            $hay_end: *const u8,
   82|  7.74k|        ) -> $retty {
   83|  7.74k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  7.74k|            $memchrty::new_unchecked($($needle),+)
   85|  7.74k|                .$memchrfind($hay_start, $hay_end)
   86|  7.74k|        }
_RNvNvNtNtNtCsjrlUEbVm63W_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCsjrlUEbVm63W_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  1.25M|        unsafe fn find_avx2(
   79|  1.25M|            $($needle: u8),+,
   80|  1.25M|            $hay_start: *const u8,
   81|  1.25M|            $hay_end: *const u8,
   82|  1.25M|        ) -> $retty {
   83|  1.25M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  1.25M|            $memchrty::new_unchecked($($needle),+)
   85|  1.25M|                .$memchrfind($hay_start, $hay_end)
   86|  1.25M|        }
_RNvNvNtNtNtCsjrlUEbVm63W_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNtNtNtCsjrlUEbVm63W_6memchr4arch6x86_646memchr10memchr_raw:
  174|  7.74k|pub(crate) fn memchr_raw(
  175|  7.74k|    n1: u8,
  176|  7.74k|    start: *const u8,
  177|  7.74k|    end: *const u8,
  178|  7.74k|) -> Option<*const u8> {
  179|  7.74k|    // SAFETY: We provide a valid function pointer type.
  180|  7.74k|    unsafe_ifunc!(
  181|  7.74k|        One,
  182|  7.74k|        find_raw,
  183|  7.74k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  7.74k|        Option<*const u8>,
  185|  7.74k|        start,
  186|  7.74k|        end,
  187|  7.74k|        n1
  188|  7.74k|    )
  189|  7.74k|}

_RNvXNtCsjrlUEbVm63W_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  1.48M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  1.48M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  1.48M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  1.48M|    }
_RNvXNtCsjrlUEbVm63W_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|  45.9k|    fn as_usize(self) -> usize {
   27|  45.9k|        self as usize
   28|  45.9k|    }

_RNCNvXs3_NtCsjrlUEbVm63W_6memchr6memchrNtB7_7Memchr2NtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0CsgfQ0H3lfwIZ_5oxttl:
  395|   908k|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNCNvNtCsjrlUEbVm63W_6memchr6memchr7memchr20CsgfQ0H3lfwIZ_5oxttl:
   96|   348k|        generic::search_slice_with_raw(haystack, |start, end| {
   97|   348k|            memchr2_raw(needle1, needle2, start, end)
   98|   348k|        })
_RNvNtCsjrlUEbVm63W_6memchr6memchr11memchr2_rawCsgfQ0H3lfwIZ_5oxttl:
  574|  1.25M|unsafe fn memchr2_raw(
  575|  1.25M|    needle1: u8,
  576|  1.25M|    needle2: u8,
  577|  1.25M|    start: *const u8,
  578|  1.25M|    end: *const u8,
  579|  1.25M|) -> Option<*const u8> {
  580|  1.25M|    #[cfg(target_arch = "x86_64")]
  581|  1.25M|    {
  582|  1.25M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  1.25M|    }
  584|  1.25M|    #[cfg(target_arch = "wasm32")]
  585|  1.25M|    {
  586|  1.25M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  1.25M|    }
  588|  1.25M|    #[cfg(target_arch = "aarch64")]
  589|  1.25M|    {
  590|  1.25M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  1.25M|    }
  592|  1.25M|    #[cfg(not(any(
  593|  1.25M|        target_arch = "x86_64",
  594|  1.25M|        target_arch = "wasm32",
  595|  1.25M|        target_arch = "aarch64"
  596|  1.25M|    )))]
  597|  1.25M|    {
  598|  1.25M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  1.25M|            .find_raw(start, end)
  600|  1.25M|    }
  601|  1.25M|}
_RNvNtCsjrlUEbVm63W_6memchr6memchr7memchr2CsgfQ0H3lfwIZ_5oxttl:
   92|   348k|pub fn memchr2(needle1: u8, needle2: u8, haystack: &[u8]) -> Option<usize> {
   93|   348k|    // SAFETY: memchr2_raw, when a match is found, always returns a valid
   94|   348k|    // pointer between start and end.
   95|   348k|    unsafe {
   96|   348k|        generic::search_slice_with_raw(haystack, |start, end| {
   97|       |            memchr2_raw(needle1, needle2, start, end)
   98|   348k|        })
   99|   348k|    }
  100|   348k|}
_RNvNtCsjrlUEbVm63W_6memchr6memchr6memchrCsgfQ0H3lfwIZ_5oxttl:
   27|  7.74k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  7.74k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  7.74k|    // pointer between start and end.
   30|  7.74k|    unsafe {
   31|  7.74k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  7.74k|        })
   34|  7.74k|    }
   35|  7.74k|}
_RNvXs3_NtCsjrlUEbVm63W_6memchr6memchrNtB5_7Memchr2NtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCsgfQ0H3lfwIZ_5oxttl:
  390|   908k|    fn next(&mut self) -> Option<usize> {
  391|   908k|        // SAFETY: All of our implementations of memchr ensure that any
  392|   908k|        // pointers returns will fall within the start and end bounds, and this
  393|   908k|        // upholds the safety contract of `self.it.next`.
  394|   908k|        unsafe {
  395|   908k|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|   908k|        }
  397|   908k|    }
_RNvNtCsjrlUEbVm63W_6memchr6memchr12memchr2_iterCsgfQ0H3lfwIZ_5oxttl:
  232|   899k|pub fn memchr2_iter<'h>(
  233|   899k|    needle1: u8,
  234|   899k|    needle2: u8,
  235|   899k|    haystack: &'h [u8],
  236|   899k|) -> Memchr2<'h> {
  237|   899k|    Memchr2::new(needle1, needle2, haystack)
  238|   899k|}
_RNvMs2_NtCsjrlUEbVm63W_6memchr6memchrNtB5_7Memchr23newCsgfQ0H3lfwIZ_5oxttl:
  377|   899k|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|   899k|        Memchr2 {
  379|   899k|            needle1,
  380|   899k|            needle2,
  381|   899k|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|   899k|        }
  383|   899k|    }
_RNvNtCsjrlUEbVm63W_6memchr6memchr10memchr_rawB3_:
  504|  7.74k|unsafe fn memchr_raw(
  505|  7.74k|    needle: u8,
  506|  7.74k|    start: *const u8,
  507|  7.74k|    end: *const u8,
  508|  7.74k|) -> Option<*const u8> {
  509|  7.74k|    #[cfg(target_arch = "x86_64")]
  510|  7.74k|    {
  511|  7.74k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  7.74k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  7.74k|        // time. This function also handles using a fallback if neither AVX2
  514|  7.74k|        // nor SSE2 (unusual) are available.
  515|  7.74k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  7.74k|    }
  517|  7.74k|    #[cfg(target_arch = "wasm32")]
  518|  7.74k|    {
  519|  7.74k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  7.74k|    }
  521|  7.74k|    #[cfg(target_arch = "aarch64")]
  522|  7.74k|    {
  523|  7.74k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  7.74k|    }
  525|  7.74k|    #[cfg(not(any(
  526|  7.74k|        target_arch = "x86_64",
  527|  7.74k|        target_arch = "wasm32",
  528|  7.74k|        target_arch = "aarch64"
  529|  7.74k|    )))]
  530|  7.74k|    {
  531|  7.74k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  7.74k|    }
  533|  7.74k|}
_RNCNvNtCsjrlUEbVm63W_6memchr6memchr6memchr0B5_:
   31|  7.74k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|  7.74k|            memchr_raw(needle, start, end)
   33|  7.74k|        })

_RNvXNtNtCsjrlUEbVm63W_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  230|   150k|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  231|   150k|            _mm_cmpeq_epi8(self, vector2)
  232|   150k|        }
_RNvXNtNtCsjrlUEbVm63W_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  225|   114k|        unsafe fn movemask(self) -> SensibleMoveMask {
  226|   114k|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  227|   114k|        }
_RNvXs_NtCsjrlUEbVm63W_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  148|   267k|    fn has_non_zero(self) -> bool {
  149|   267k|        self.0 != 0
  150|   267k|    }
_RNvXNtNtCsjrlUEbVm63W_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  220|  77.0k|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  221|  77.0k|            _mm_loadu_si128(data as *const __m128i)
  222|  77.0k|        }
_RNvXs_NtCsjrlUEbVm63W_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  173|   140k|    fn first_offset(self) -> usize {
  174|   140k|        // We are dealing with little endian here (and if we aren't, we swap
  175|   140k|        // the bytes so we are in practice), where the most significant byte
  176|   140k|        // is at a higher address. That means the least significant bit that
  177|   140k|        // is set corresponds to the position of our first matching byte.
  178|   140k|        // That position corresponds to the number of zeros after the least
  179|   140k|        // significant bit.
  180|   140k|        self.get_for_offset().trailing_zeros() as usize
  181|   140k|    }
_RNvMNtCsjrlUEbVm63W_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  128|   140k|    fn get_for_offset(self) -> u32 {
  129|   140k|        #[cfg(target_endian = "big")]
  130|   140k|        {
  131|   140k|            self.0.swap_bytes()
  132|   140k|        }
  133|   140k|        #[cfg(target_endian = "little")]
  134|   140k|        {
  135|   140k|            self.0
  136|   140k|        }
  137|   140k|    }
_RNvXNtNtCsjrlUEbVm63W_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  275|   431k|        unsafe fn movemask(self) -> SensibleMoveMask {
  276|   431k|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  277|   431k|        }
_RNvYNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtNtCsjrlUEbVm63W_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   65|  29.0k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   66|  29.0k|        self.movemask().has_non_zero()
   67|  29.0k|    }
_RNvXNtNtCsjrlUEbVm63W_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  270|   159k|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  271|   159k|            _mm256_loadu_si256(data as *const __m256i)
  272|   159k|        }
_RNvXNtNtCsjrlUEbVm63W_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  280|   426k|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  281|   426k|            _mm256_cmpeq_epi8(self, vector2)
  282|   426k|        }
_RNvXNtNtCsjrlUEbVm63W_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  265|  59.6k|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  266|  59.6k|            _mm256_load_si256(data as *const __m256i)
  267|  59.6k|        }
_RNvXNtNtCsjrlUEbVm63W_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector2or:
  290|   237k|        unsafe fn or(self, vector2: Self) -> __m256i {
  291|   237k|            _mm256_or_si256(self, vector2)
  292|   237k|        }
_RNvXNtNtCsjrlUEbVm63W_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  210|  2.52M|        unsafe fn splat(byte: u8) -> __m128i {
  211|  2.52M|            _mm_set1_epi8(byte as i8)
  212|  2.52M|        }
_RNvXNtNtCsjrlUEbVm63W_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector2or:
  240|  73.9k|        unsafe fn or(self, vector2: Self) -> __m128i {
  241|  73.9k|            _mm_or_si128(self, vector2)
  242|  73.9k|        }
_RNvXNtNtCsjrlUEbVm63W_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  260|  2.52M|        unsafe fn splat(byte: u8) -> __m256i {
  261|  2.52M|            _mm256_set1_epi8(byte as i8)
  262|  2.52M|        }
_RNvXs_NtCsjrlUEbVm63W_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  163|   139k|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  164|   139k|        SensibleMoveMask(self.0 | other.0)
  165|   139k|    }

_RNvMs2_NtCs4LeKDsHh25A_9once_cell3impINtB5_8OnceCellNtNtCsjOdcKtOMjJI_5alloc6string6StringE14is_initializedCslXKkHRQk88S_13libfuzzer_sys:
   49|  3.75k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  3.75k|        // An `Acquire` load is enough because that makes all the initialization
   51|  3.75k|        // operations visible to us, and, this being a fast path, weaker
   52|  3.75k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  3.75k|        // `SeqCst` operations on the slow path.
   54|  3.75k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  3.75k|    }

_RNvMs4_NtCs4LeKDsHh25A_9once_cell4syncINtB5_8OnceCellNtNtCsjOdcKtOMjJI_5alloc6string6StringE3getCslXKkHRQk88S_13libfuzzer_sys:
  963|  3.75k|        pub fn get(&self) -> Option<&T> {
  964|  3.75k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  3.75k|                None
  969|       |            }
  970|  3.75k|        }

_RNvMCs87w0kKV82sz_10oxilangtagINtB2_11LanguageTagReE5parseCsgfQ0H3lfwIZ_5oxttl:
   49|  10.6k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   50|  10.6k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   51|  6.80k|        Ok(Self { tag, positions })
   52|  10.6k|    }
_RNvMCs87w0kKV82sz_10oxilangtagINtB2_11LanguageTagReE10into_innerCsgfQ0H3lfwIZ_5oxttl:
   62|  6.80k|    pub fn into_inner(self) -> T {
   63|  6.80k|        self.tag
   64|  6.80k|    }
_RNvXsE_Cs87w0kKV82sz_10oxilangtagNtB5_16VoidOutputBufferNtNtCs9nhK3FOW46N_4core7default7Default7defaultCsgfQ0H3lfwIZ_5oxttl:
  558|  10.6k|#[derive(Default)]
_RINvXsr_Cs87w0kKV82sz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECsgtGDRi1noi_5oxrdf:
  571|  10.8k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Cs87w0kKV82sz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECsgtGDRi1noi_5oxrdf:
  571|  2.09k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvCs87w0kKV82sz_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECsgtGDRi1noi_5oxrdf:
  632|  9.33k|fn parse_langtag(
  633|  9.33k|    input: &str,
  634|  9.33k|    output: &mut impl OutputBuffer,
  635|  9.33k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  636|  9.33k|    #[derive(PartialEq, Eq)]
  637|  9.33k|    enum State {
  638|  9.33k|        Start,
  639|  9.33k|        AfterLanguage,
  640|  9.33k|        AfterExtLang,
  641|  9.33k|        AfterScript,
  642|  9.33k|        AfterRegion,
  643|  9.33k|        InExtension { expected: bool },
  644|  9.33k|        InPrivateUse { expected: bool },
  645|  9.33k|    }
  646|  9.33k|
  647|  9.33k|    let mut state = State::Start;
  648|  9.33k|    let mut language_end = 0;
  649|  9.33k|    let mut extlang_end = 0;
  650|  9.33k|    let mut script_end = 0;
  651|  9.33k|    let mut region_end = 0;
  652|  9.33k|    let mut variant_end = 0;
  653|  9.33k|    let mut extension_end = 0;
  654|  9.33k|    let mut extlangs_count = 0;
  655|  18.7k|    for (subtag, end) in SubTagIterator::new(input) {
  656|  18.7k|        if subtag.is_empty() {
  657|      0|            return Err(LanguageTagParseError {
  658|      0|                kind: TagParseErrorKind::EmptySubtag,
  659|      0|            });
  660|  18.7k|        }
  661|  18.7k|        if subtag.len() > 8 {
  662|    234|            return Err(LanguageTagParseError {
  663|    234|                kind: TagParseErrorKind::SubtagTooLong,
  664|    234|            });
  665|  18.4k|        }
  666|  18.4k|        if state == State::Start {
  667|       |            // Primary language
  668|  9.11k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  669|  1.56k|                return Err(LanguageTagParseError {
  670|  1.56k|                    kind: TagParseErrorKind::InvalidLanguage,
  671|  1.56k|                });
  672|  7.54k|            }
  673|  7.54k|            language_end = end;
  674|  7.54k|            output.extend(to_lowercase(subtag));
  675|  7.54k|            if subtag.len() < 4 {
  676|  5.35k|                // extlangs are only allowed for short language tags
  677|  5.35k|                state = State::AfterLanguage;
  678|  5.35k|            } else {
  679|  2.18k|                state = State::AfterExtLang;
  680|  2.18k|            }
  681|  9.36k|        } else if let State::InPrivateUse { .. } = state {
  682|    632|            if !is_alphanumeric(subtag) {
  683|      0|                return Err(LanguageTagParseError {
  684|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  685|      0|                });
  686|    632|            }
  687|    632|            output.push('-');
  688|    632|            output.extend(to_lowercase(subtag));
  689|    632|            state = State::InPrivateUse { expected: false };
  690|  8.72k|        } else if subtag == "x" || subtag == "X" {
  691|       |            // We make sure extension is found
  692|    797|            if let State::InExtension { expected: true } = state {
  693|    192|                return Err(LanguageTagParseError {
  694|    192|                    kind: TagParseErrorKind::EmptyExtension,
  695|    192|                });
  696|    605|            }
  697|    605|            output.push('-');
  698|    605|            output.push('x');
  699|    605|            state = State::InPrivateUse { expected: true };
  700|  7.93k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  701|       |            // We make sure extension is found
  702|  1.63k|            if let State::InExtension { expected: true } = state {
  703|     74|                return Err(LanguageTagParseError {
  704|     74|                    kind: TagParseErrorKind::EmptyExtension,
  705|     74|                });
  706|  1.56k|            }
  707|  1.56k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  708|  1.56k|            output.push('-');
  709|  1.56k|            output.push(extension_tag);
  710|  1.56k|            state = State::InExtension { expected: true };
  711|  6.29k|        } else if let State::InExtension { .. } = state {
  712|    585|            if !is_alphanumeric(subtag) {
  713|      0|                return Err(LanguageTagParseError {
  714|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  715|      0|                });
  716|    585|            }
  717|    585|            extension_end = end;
  718|    585|            output.push('-');
  719|    585|            output.extend(to_lowercase(subtag));
  720|    585|            state = State::InExtension { expected: false };
  721|  5.70k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  722|  1.43k|            extlangs_count += 1;
  723|  1.43k|            if extlangs_count > 3 {
  724|    190|                return Err(LanguageTagParseError {
  725|    190|                    kind: TagParseErrorKind::TooManyExtlangs,
  726|    190|                });
  727|  1.24k|            }
  728|  1.24k|            // valid extlangs
  729|  1.24k|            extlang_end = end;
  730|  1.24k|            output.push('-');
  731|  1.24k|            output.extend(to_lowercase(subtag));
  732|  4.27k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  733|  2.97k|            && subtag.len() == 4
  734|    746|            && is_alphabetic(subtag)
  735|    746|        {
  736|    746|            // Script
  737|    746|            script_end = end;
  738|    746|            output.push('-');
  739|    746|            output.extend(to_uppercase_first(subtag));
  740|    746|            state = State::AfterScript;
  741|  3.53k|        } else if (state == State::AfterLanguage
  742|  1.98k|            || state == State::AfterExtLang
  743|  1.30k|            || state == State::AfterScript)
  744|  2.85k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  745|    758|                || subtag.len() == 3 && is_numeric(subtag))
  746|  2.09k|        {
  747|  2.09k|            // Region
  748|  2.09k|            region_end = end;
  749|  2.09k|            output.push('-');
  750|  2.09k|            output.extend(to_uppercase(subtag));
  751|  2.09k|            state = State::AfterRegion;
  752|  2.09k|        } else if (state == State::AfterLanguage
  753|  1.13k|            || state == State::AfterExtLang
  754|    695|            || state == State::AfterScript
  755|    683|            || state == State::AfterRegion)
  756|  1.44k|            && is_alphanumeric(subtag)
  757|  1.44k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  758|    560|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  759|    881|        {
  760|    881|            // Variant
  761|    881|            variant_end = end;
  762|    881|            output.push('-');
  763|    881|            output.extend(to_lowercase(subtag));
  764|    881|            state = State::AfterRegion;
  765|    881|        } else {
  766|    560|            return Err(LanguageTagParseError {
  767|    560|                kind: TagParseErrorKind::InvalidSubtag,
  768|    560|            });
  769|       |        }
  770|       |    }
  771|       |
  772|       |    //We make sure we are in a correct final state
  773|  6.51k|    if let State::InExtension { expected: true } = state {
  774|    766|        return Err(LanguageTagParseError {
  775|    766|            kind: TagParseErrorKind::EmptyExtension,
  776|    766|        });
  777|  5.75k|    }
  778|  5.75k|    if let State::InPrivateUse { expected: true } = state {
  779|    252|        return Err(LanguageTagParseError {
  780|    252|            kind: TagParseErrorKind::EmptyPrivateUse,
  781|    252|        });
  782|  5.49k|    }
  783|  5.49k|
  784|  5.49k|    //We make sure we have not skipped anyone
  785|  5.49k|    if extlang_end < language_end {
  786|  4.90k|        extlang_end = language_end;
  787|  4.90k|    }
  788|  5.49k|    if script_end < extlang_end {
  789|  4.77k|        script_end = extlang_end;
  790|  4.77k|    }
  791|  5.49k|    if region_end < script_end {
  792|  3.98k|        region_end = script_end;
  793|  3.98k|    }
  794|  5.49k|    if variant_end < region_end {
  795|  4.75k|        variant_end = region_end;
  796|  4.75k|    }
  797|  5.49k|    if extension_end < variant_end {
  798|  5.23k|        extension_end = variant_end;
  799|  5.23k|    }
  800|       |
  801|  5.49k|    Ok(TagElementsPositions {
  802|  5.49k|        language_end,
  803|  5.49k|        extlang_end,
  804|  5.49k|        script_end,
  805|  5.49k|        region_end,
  806|  5.49k|        variant_end,
  807|  5.49k|        extension_end,
  808|  5.49k|    })
  809|  9.33k|}
_RINvXsr_Cs87w0kKV82sz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECsgtGDRi1noi_5oxrdf:
  571|    746|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvCs87w0kKV82sz_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECsgtGDRi1noi_5oxrdf:
  587|  10.6k|fn parse_language_tag(
  588|  10.6k|    input: &str,
  589|  10.6k|    output: &mut impl OutputBuffer,
  590|  10.6k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  591|       |    //grandfathered tags
  592|  10.6k|    if let Some(tag) = GRANDFATHEREDS
  593|  10.6k|        .iter()
  594|  10.6k|        .find(|record| record.eq_ignore_ascii_case(input))
  595|       |    {
  596|      0|        output.push_str(tag);
  597|      0|        Ok(TagElementsPositions {
  598|      0|            language_end: tag.len(),
  599|      0|            extlang_end: tag.len(),
  600|      0|            script_end: tag.len(),
  601|      0|            region_end: tag.len(),
  602|      0|            variant_end: tag.len(),
  603|      0|            extension_end: tag.len(),
  604|      0|        })
  605|  10.6k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  606|       |        // private use
  607|  1.31k|        if !is_alphanumeric_or_dash(input) {
  608|      0|            Err(LanguageTagParseError {
  609|      0|                kind: TagParseErrorKind::ForbiddenChar,
  610|      0|            })
  611|  1.31k|        } else if input.len() == 2 {
  612|      0|            Err(LanguageTagParseError {
  613|      0|                kind: TagParseErrorKind::EmptyPrivateUse,
  614|      0|            })
  615|       |        } else {
  616|  1.31k|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  617|  1.31k|            Ok(TagElementsPositions {
  618|  1.31k|                language_end: input.len(),
  619|  1.31k|                extlang_end: input.len(),
  620|  1.31k|                script_end: input.len(),
  621|  1.31k|                region_end: input.len(),
  622|  1.31k|                variant_end: input.len(),
  623|  1.31k|                extension_end: input.len(),
  624|  1.31k|            })
  625|       |        }
  626|       |    } else {
  627|  9.33k|        parse_langtag(input, output)
  628|       |    }
  629|  10.6k|}
_RINvXsr_Cs87w0kKV82sz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECsgtGDRi1noi_5oxrdf:
  571|  1.31k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCs87w0kKV82sz_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0CsgtGDRi1noi_5oxrdf:
  594|   276k|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvCs87w0kKV82sz_10oxilangtag12to_uppercaseCsgtGDRi1noi_5oxrdf:
  891|  2.09k|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  892|  2.09k|    s.chars().map(|c| c.to_ascii_uppercase())
  893|  2.09k|}
_RNvXs_NvCs87w0kKV82sz_10oxilangtag13parse_langtagNtB4_5StateNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsgtGDRi1noi_5oxrdf:
  636|  41.3k|    #[derive(PartialEq, Eq)]
_RNvCs87w0kKV82sz_10oxilangtag15is_alphanumericCsgtGDRi1noi_5oxrdf:
  881|  4.29k|fn is_alphanumeric(s: &str) -> bool {
  882|  4.29k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  883|  4.29k|}
_RNvCs87w0kKV82sz_10oxilangtag18to_uppercase_firstCsgtGDRi1noi_5oxrdf:
  897|    746|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  898|    746|    let mut chars = s.chars();
  899|    746|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  900|    746|}
_RNvXsq_Cs87w0kKV82sz_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsgtGDRi1noi_5oxrdf:
  563|  10.5k|    fn push(&mut self, _: char) {}
_RNvCs87w0kKV82sz_10oxilangtag13is_alphabeticCsgtGDRi1noi_5oxrdf:
  871|  12.6k|fn is_alphabetic(s: &str) -> bool {
  872|  12.6k|    s.chars().all(|x| x.is_ascii_alphabetic())
  873|  12.6k|}
_RNvCs87w0kKV82sz_10oxilangtag23is_alphanumeric_or_dashCsgtGDRi1noi_5oxrdf:
  886|  1.31k|fn is_alphanumeric_or_dash(s: &str) -> bool {
  887|  1.31k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  888|  1.31k|}
_RNvCs87w0kKV82sz_10oxilangtag12to_lowercaseCsgtGDRi1noi_5oxrdf:
  903|  10.8k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  904|  10.8k|    s.chars().map(|c| c.to_ascii_lowercase())
  905|  10.8k|}
_RNvCs87w0kKV82sz_10oxilangtag10is_numericCsgtGDRi1noi_5oxrdf:
  876|    484|fn is_numeric(s: &str) -> bool {
  877|    484|    s.chars().all(|x| x.is_ascii_digit())
  878|    484|}
_RNvXsw_Cs87w0kKV82sz_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCsgtGDRi1noi_5oxrdf:
  862|  25.2k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  863|  25.2k|        let tag = self.split.next()?;
  864|  18.7k|        let tag_end = self.position + tag.len();
  865|  18.7k|        self.position = tag_end + 1;
  866|  18.7k|        Some((tag, tag_end))
  867|  25.2k|    }
_RNvMsv_Cs87w0kKV82sz_10oxilangtagNtB5_14SubTagIterator3newCsgtGDRi1noi_5oxrdf:
  850|  9.33k|    fn new(input: &'a str) -> Self {
  851|  9.33k|        Self {
  852|  9.33k|            split: input.split('-'),
  853|  9.33k|            position: 0,
  854|  9.33k|        }
  855|  9.33k|    }
_RNCNvCs87w0kKV82sz_10oxilangtag10is_numeric0B3_:
  877|    484|    s.chars().all(|x| x.is_ascii_digit())
_RNCNvCs87w0kKV82sz_10oxilangtag15is_alphanumeric0B3_:
  882|  11.3k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNvXso_Cs87w0kKV82sz_10oxilangtagNtB5_21LanguageTagParseErrorNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  490|  3.83k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  491|  3.83k|        match self.kind {
  492|       |            TagParseErrorKind::EmptyExtension => {
  493|  1.03k|                write!(f, "If an extension subtag is present, it must not be empty")
  494|       |            }
  495|       |            TagParseErrorKind::EmptyPrivateUse => {
  496|    252|                write!(f, "If the `x` subtag is present, it must not be empty")
  497|       |            }
  498|       |            TagParseErrorKind::ForbiddenChar => {
  499|      0|                write!(f, "The langtag contains a char not allowed")
  500|       |            }
  501|    560|            TagParseErrorKind::InvalidSubtag => write!(
  502|    560|                f,
  503|    560|                "A subtag fails to parse, it does not match any other subtags"
  504|    560|            ),
  505|  1.56k|            TagParseErrorKind::InvalidLanguage => write!(f, "The given language subtag is invalid"),
  506|       |            TagParseErrorKind::SubtagTooLong => {
  507|    234|                write!(f, "A subtag may be eight characters in length at maximum")
  508|       |            }
  509|      0|            TagParseErrorKind::EmptySubtag => write!(f, "A subtag should not be empty"),
  510|       |            TagParseErrorKind::TooManyExtlangs => {
  511|    190|                write!(f, "At maximum three extlangs are allowed")
  512|       |            }
  513|       |        }
  514|  3.83k|    }
_RNCNvCs87w0kKV82sz_10oxilangtag13is_alphabetic0B3_:
  872|  35.7k|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCs87w0kKV82sz_10oxilangtag23is_alphanumeric_or_dash0B3_:
  887|  43.3k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')

_RNvMs11_Cs4yBHfwNtpDd_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCsgtGDRi1noi_5oxrdf:
 1252|  9.67k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|  9.67k|        if self.input.starts_with('/') {
 1254|  8.55k|            self.input.next();
 1255|  8.55k|            self.output.push('/');
 1256|  8.55k|            self.parse_authority()
 1257|       |        } else {
 1258|  1.12k|            self.output_positions.authority_end = self.output.len() - 1;
 1259|  1.12k|            self.parse_path()
 1260|       |        }
 1261|  9.67k|    }
_RNvMs11_Cs4yBHfwNtpDd_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCsgtGDRi1noi_5oxrdf:
 1428|  3.81k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|  3.81k|        match c {
 1430|       |            None => {
 1431|  2.32k|                self.output_positions.path_end = self.output.len();
 1432|  2.32k|                self.output_positions.query_end = self.output.len();
 1433|  2.32k|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|    515|                self.output_positions.path_end = self.output.len();
 1437|    515|                self.output.push('?');
 1438|    515|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|    395|                self.output_positions.path_end = self.output.len();
 1442|    395|                self.output_positions.query_end = self.output.len();
 1443|    395|                self.output.push('#');
 1444|    395|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|    572|                self.output.push('/');
 1448|    572|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|  3.81k|    }
_RNvMs11_Cs4yBHfwNtpDd_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCsgtGDRi1noi_5oxrdf:
 1547|  2.95k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1548|  2.95k|        let c1 = self.input.next();
 1549|  2.95k|        let c2 = self.input.next();
 1550|  2.95k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1551|  1.16k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1552|       |        {
 1553|  1.01k|            self.output.push('%');
 1554|  1.01k|            self.output.push(c1.unwrap());
 1555|  1.01k|            self.output.push(c2.unwrap());
 1556|  1.01k|            Ok(())
 1557|       |        } else {
 1558|  1.94k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1559|  1.94k|                Some('%'),
 1560|  1.94k|                c1,
 1561|  1.94k|                c2,
 1562|  1.94k|            ]))
 1563|       |        }
 1564|  2.95k|    }
_RNvMCs4yBHfwNtpDd_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE10into_innerCsgtGDRi1noi_5oxrdf:
  191|  69.6k|    pub fn into_inner(self) -> T {
  192|  69.6k|        self.iri
  193|  69.6k|    }
_RNvMs11_Cs4yBHfwNtpDd_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCsgtGDRi1noi_5oxrdf:
 1507|  2.28k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|  12.4k|        while let Some(c) = self.input.next() {
 1509|  11.6k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|    836|        Ok(())
 1512|  2.28k|    }
_RNvMs11_Cs4yBHfwNtpDd_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCsgtGDRi1noi_5oxrdf:
 1342|  8.55k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|  28.3k|        loop {
 1345|  28.3k|            let c = self.input.next();
 1346|  28.3k|            match c {
 1347|       |                Some('@') => {
 1348|    746|                    self.output.push('@');
 1349|    746|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|  6.72k|                    self.input = ParserInput {
 1353|  6.72k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|  6.72k|                        position: self.input_scheme_end + 2,
 1355|  6.72k|                    };
 1356|  6.72k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|  6.72k|                    return self.parse_host();
 1358|       |                }
 1359|  20.8k|                Some(c) => {
 1360|  20.8k|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|  8.55k|    }
_RNvMCs4yBHfwNtpDd_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE5parseCsgtGDRi1noi_5oxrdf:
   58|  86.3k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  86.3k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  74.8k|        Ok(Self { iri, positions })
   61|  86.3k|    }
_RINvMs11_Cs4yBHfwNtpDd_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECsgtGDRi1noi_5oxrdf:
 1567|  11.5k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1568|  11.5k|        Err(IriParseError { kind })
 1569|  11.5k|    }
_RNvMs11_Cs4yBHfwNtpDd_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCsgtGDRi1noi_5oxrdf:
 1414|  1.68k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|  2.25k|        loop {
 1416|  2.25k|            let c = self.input.next();
 1417|  1.88k|            match c {
 1418|  1.88k|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|    953|                    self.output_positions.authority_end = self.output.len();
 1421|    953|                    return self.parse_path_start(c);
 1422|       |                }
 1423|    736|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|  1.68k|    }
_RNvMs11_Cs4yBHfwNtpDd_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCsgtGDRi1noi_5oxrdf:
 1220|  74.1k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|   168k|        loop {
 1222|   168k|            let c = self.input.next();
 1223|   168k|            match c {
 1224|   168k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|  94.7k|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|  70.8k|                    self.output.push(':');
 1229|  70.8k|                    self.output_positions.scheme_end = self.output.len();
 1230|  70.8k|                    self.input_scheme_end = self.input.position;
 1231|  70.8k|                    return if self.input.starts_with('/') {
 1232|  2.02k|                        self.input.next();
 1233|  2.02k|                        self.output.push('/');
 1234|  2.02k|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|  68.8k|                        self.output_positions.authority_end = self.output.len();
 1237|  68.8k|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|  3.33k|                    self.input = ParserInput {
 1242|  3.33k|                        value: self.iri.chars(),
 1243|  3.33k|                        position: 0,
 1244|  3.33k|                    }; // reset
 1245|  3.33k|                    self.output.clear();
 1246|  3.33k|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|  74.1k|    }
_RNvMs11_Cs4yBHfwNtpDd_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarCsgtGDRi1noi_5oxrdf:
 1523|   164k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|   164k|        if UNCHECKED || is_url_code_point(c) {
 1525|   156k|            self.output.push(c);
 1526|   156k|            Ok(())
 1527|  7.71k|        } else if c == '%' {
 1528|  2.44k|            self.read_echar()
 1529|       |        } else {
 1530|  5.26k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|   164k|    }
_RNvMs11_Cs4yBHfwNtpDd_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCsgtGDRi1noi_5oxrdf:
 1187|  86.3k|    fn parse(
 1188|  86.3k|        iri: &'a str,
 1189|  86.3k|        base: Option<IriRef<&'a str>>,
 1190|  86.3k|        output: &'a mut O,
 1191|  86.3k|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|  86.3k|        let mut parser = Self {
 1193|  86.3k|            iri,
 1194|  86.3k|            base,
 1195|  86.3k|            input: ParserInput {
 1196|  86.3k|                value: iri.chars(),
 1197|  86.3k|                position: 0,
 1198|  86.3k|            },
 1199|  86.3k|            output,
 1200|  86.3k|            output_positions: IriElementsPositions {
 1201|  86.3k|                scheme_end: 0,
 1202|  86.3k|                authority_end: 0,
 1203|  86.3k|                path_end: 0,
 1204|  86.3k|                query_end: 0,
 1205|  86.3k|            },
 1206|  86.3k|            input_scheme_end: 0,
 1207|  86.3k|        };
 1208|  86.3k|        parser.parse_scheme_start()?;
 1209|  74.8k|        Ok(parser.output_positions)
 1210|  86.3k|    }
_RNvMs11_Cs4yBHfwNtpDd_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E33read_url_query_codepoint_or_echarCsgtGDRi1noi_5oxrdf:
 1535|  12.4k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|  12.4k|        if UNCHECKED || is_url_query_code_point(c) {
 1537|  11.2k|            self.output.push(c);
 1538|  11.2k|            Ok(())
 1539|  1.18k|        } else if c == '%' {
 1540|    511|            self.read_echar()
 1541|       |        } else {
 1542|    676|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|  12.4k|    }
_RNvMsp_Cs4yBHfwNtpDd_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE5parseCsgtGDRi1noi_5oxrdf:
  562|  86.3k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  563|  86.3k|        IriRef::parse(iri)?.try_into()
  564|  86.3k|    }
_RNvMs11_Cs4yBHfwNtpDd_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCsgtGDRi1noi_5oxrdf:
 1493|  2.44k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|  13.8k|        while let Some(c) = self.input.next() {
 1495|  12.5k|            if c == '#' {
 1496|    106|                self.output_positions.query_end = self.output.len();
 1497|    106|                self.output.push('#');
 1498|    106|                return self.parse_fragment();
 1499|       |            } else {
 1500|  12.4k|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|  1.34k|        self.output_positions.query_end = self.output.len();
 1504|  1.34k|        Ok(())
 1505|  2.44k|    }
_RNvMs11_Cs4yBHfwNtpDd_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCsgtGDRi1noi_5oxrdf:
 1212|  86.3k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|  86.3k|        match self.input.front() {
 1214|    264|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|  85.3k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|  11.9k|            _ => self.parse_relative(),
 1217|       |        }
 1218|  86.3k|    }
_RNvMCs4yBHfwNtpDd_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE11is_absoluteCsgtGDRi1noi_5oxrdf:
  205|  74.8k|    pub fn is_absolute(&self) -> bool {
  206|  74.8k|        self.positions.scheme_end != 0
  207|  74.8k|    }
_RNvMs11_Cs4yBHfwNtpDd_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCsgtGDRi1noi_5oxrdf:
 1366|  7.47k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|  7.47k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|  3.95k|            let start_position = self.input.position;
 1370|  26.6k|            while let Some(c) = self.input.next() {
 1371|  25.6k|                self.output.push(c);
 1372|  25.6k|                if c == ']' {
 1373|  3.01k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|  3.01k|                    if !UNCHECKED {
 1375|  3.01k|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|    650|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|  2.36k|                        }
 1378|      0|                    }
 1379|       |
 1380|  2.36k|                    let c = self.input.next();
 1381|  2.36k|                    return match c {
 1382|       |                        Some(':') => {
 1383|    649|                            self.output.push(':');
 1384|    649|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|    620|                            self.output_positions.authority_end = self.output.len();
 1388|    620|                            self.parse_path_start(c)
 1389|       |                        }
 1390|  1.09k|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|  22.6k|                }
 1393|       |            }
 1394|    940|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|  18.9k|            loop {
 1398|  18.9k|                let c = self.input.next();
 1399|  18.9k|                match c {
 1400|       |                    Some(':') => {
 1401|  1.04k|                        self.output.push(':');
 1402|  1.04k|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|  2.23k|                        self.output_positions.authority_end = self.output.len();
 1406|  2.23k|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|  15.7k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|  7.47k|    }
_RNvMs11_Cs4yBHfwNtpDd_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_relativeCsgtGDRi1noi_5oxrdf:
 1263|  15.2k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1264|  15.2k|        if let Some(base) = self.base {
 1265|      0|            match self.input.front() {
 1266|       |                None => {
 1267|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1268|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1269|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1270|      0|                    self.output_positions.path_end = base.positions.path_end;
 1271|      0|                    self.output_positions.query_end = base.positions.query_end;
 1272|      0|                    Ok(())
 1273|       |                }
 1274|       |                Some('/') => {
 1275|      0|                    self.input.next();
 1276|      0|                    self.parse_relative_slash(&base)
 1277|       |                }
 1278|       |                Some('?') => {
 1279|      0|                    self.input.next();
 1280|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1281|      0|                    self.output.push('?');
 1282|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1283|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1284|      0|                    self.output_positions.path_end = base.positions.path_end;
 1285|      0|                    self.parse_query()
 1286|       |                }
 1287|       |                Some('#') => {
 1288|      0|                    self.input.next();
 1289|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1290|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1291|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1292|      0|                    self.output_positions.path_end = base.positions.path_end;
 1293|      0|                    self.output_positions.query_end = base.positions.query_end;
 1294|      0|                    self.output.push('#');
 1295|      0|                    self.parse_fragment()
 1296|       |                }
 1297|       |                _ => {
 1298|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1299|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1300|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1301|      0|                    self.output_positions.path_end = base.positions.path_end;
 1302|      0|                    self.remove_last_segment();
 1303|      0|                    if self.output.len() > base.positions.scheme_end {
 1304|      0|                        // We have some path or authority, we keep a base '/'
 1305|      0|                        self.output.push('/');
 1306|      0|                    }
 1307|      0|                    self.parse_path()
 1308|       |                }
 1309|       |            }
 1310|       |        } else {
 1311|  15.2k|            self.output_positions.scheme_end = 0;
 1312|  15.2k|            self.input_scheme_end = 0;
 1313|  15.2k|            if self.input.starts_with('/') {
 1314|  7.64k|                self.input.next();
 1315|  7.64k|                self.output.push('/');
 1316|  7.64k|                self.parse_path_or_authority()
 1317|       |            } else {
 1318|  7.63k|                self.output_positions.authority_end = 0;
 1319|  7.63k|                self.parse_path()
 1320|       |            }
 1321|       |        }
 1322|  15.2k|    }
_RNvMs11_Cs4yBHfwNtpDd_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCsgtGDRi1noi_5oxrdf:
 1457|  78.1k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|   191k|        loop {
 1459|   191k|            let c = self.input.next();
 1460|   191k|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|  75.0k|                    if self.output.as_str().ends_with("/..") {
 1463|      0|                        self.remove_last_segment();
 1464|      0|                        self.remove_last_segment();
 1465|      0|                        self.output.push('/');
 1466|  75.0k|                    } else if self.output.as_str().ends_with("/.") {
 1467|      0|                        self.remove_last_segment();
 1468|      0|                        self.output.push('/');
 1469|  75.0k|                    } else if c == Some('/') {
 1470|  1.06k|                        self.output.push('/');
 1471|  74.0k|                    }
 1472|       |
 1473|  75.0k|                    if c == Some('?') {
 1474|  1.92k|                        self.output_positions.path_end = self.output.len();
 1475|  1.92k|                        self.output.push('?');
 1476|  1.92k|                        return self.parse_query();
 1477|  73.1k|                    } else if c == Some('#') {
 1478|  1.77k|                        self.output_positions.path_end = self.output.len();
 1479|  1.77k|                        self.output_positions.query_end = self.output.len();
 1480|  1.77k|                        self.output.push('#');
 1481|  1.77k|                        return self.parse_fragment();
 1482|  71.3k|                    } else if c.is_none() {
 1483|  70.3k|                        self.output_positions.path_end = self.output.len();
 1484|  70.3k|                        self.output_positions.query_end = self.output.len();
 1485|  70.3k|                        return Ok(());
 1486|  1.06k|                    }
 1487|       |                }
 1488|   116k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|  78.1k|    }
_RNCNvMs11_Cs4yBHfwNtpDd_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0CsgtGDRi1noi_5oxrdf:
 1550|  2.63k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNvXsV_Cs4yBHfwNtpDd_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringEINtNtCs9nhK3FOW46N_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsgtGDRi1noi_5oxrdf:
  981|  74.8k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  982|  74.8k|        if iri.is_absolute() {
  983|  69.6k|            Ok(Self(iri))
  984|       |        } else {
  985|  5.17k|            Err(IriParseError {
  986|  5.17k|                kind: IriParseErrorKind::NoScheme,
  987|  5.17k|            })
  988|       |        }
  989|  74.8k|    }
_RNvMsp_Cs4yBHfwNtpDd_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE10into_innerCsgtGDRi1noi_5oxrdf:
  678|  69.6k|    pub fn into_inner(self) -> T {
  679|  69.6k|        self.0.into_inner()
  680|  69.6k|    }
_RNCNvMs11_Cs4yBHfwNtpDd_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0CsgtGDRi1noi_5oxrdf:
 1551|  1.16k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs10_Cs4yBHfwNtpDd_5oxiriNtB6_11ParserInput11starts_withCsgtGDRi1noi_5oxrdf:
 1169|   103k|    fn starts_with(&self, c: char) -> bool {
 1170|   103k|        self.value.as_str().starts_with(c)
 1171|   103k|    }
_RNvXs1b_Cs4yBHfwNtpDd_5oxiriNtB6_16VoidOutputBufferNtNtCs9nhK3FOW46N_4core7default7Default7defaultCsgtGDRi1noi_5oxrdf:
 1078|  86.3k|#[derive(Default)]
_RNvXsY_Cs4yBHfwNtpDd_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCsgtGDRi1noi_5oxrdf:
 1105|   298k|    fn len(&self) -> usize {
 1106|   298k|        self.len
 1107|   298k|    }
_RNvXsY_Cs4yBHfwNtpDd_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsgtGDRi1noi_5oxrdf:
 1085|   389k|    fn push(&mut self, c: char) {
 1086|   389k|        self.len += c.len_utf8();
 1087|   389k|    }
_RNvXsY_Cs4yBHfwNtpDd_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCsgtGDRi1noi_5oxrdf:
 1110|   150k|    fn as_str(&self) -> &str {
 1111|   150k|        ""
 1112|   150k|    }
_RNvXsY_Cs4yBHfwNtpDd_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer5clearCsgtGDRi1noi_5oxrdf:
 1095|  3.33k|    fn clear(&mut self) {
 1096|  3.33k|        self.len = 0;
 1097|  3.33k|    }
_RNvXsY_Cs4yBHfwNtpDd_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCsgtGDRi1noi_5oxrdf:
 1100|  6.72k|    fn truncate(&mut self, new_len: usize) {
 1101|  6.72k|        self.len = new_len;
 1102|  6.72k|    }
_RNvCs4yBHfwNtpDd_5oxiri17is_url_code_pointCsgtGDRi1noi_5oxrdf:
 1573|   176k|fn is_url_code_point(c: char) -> bool {
 1574|   176k|    matches!(c,
 1575|  52.7k|        'a'..='z'
 1576|  53.9k|        | 'A'..='Z'
 1577|  49.0k|        | '0'..='9'
 1578|       |        | '!'
 1579|       |        | '$'
 1580|       |        | '&'
 1581|       |        | '\''
 1582|       |        | '('
 1583|       |        | ')'
 1584|       |        | '*'
 1585|       |        | '+'
 1586|       |        | ','
 1587|       |        | '-'
 1588|       |        | '.'
 1589|       |        | '/'
 1590|       |        | ':'
 1591|       |        | ';'
 1592|       |        | '='
 1593|       |        | '?'
 1594|       |        | '@'
 1595|       |        | '_'
 1596|       |        | '~'
 1597|  5.96k|        | '\u{A0}'..='\u{D7FF}'
 1598|  2.58k|        | '\u{F900}'..='\u{FDCF}'
 1599|  2.58k|        | '\u{FDF0}'..='\u{FFEF}'
 1600|  2.58k|        | '\u{10000}'..='\u{1FFFD}'
 1601|  2.58k|        | '\u{20000}'..='\u{2FFFD}'
 1602|  2.58k|        | '\u{30000}'..='\u{3FFFD}'
 1603|  2.58k|        | '\u{40000}'..='\u{4FFFD}'
 1604|  2.58k|        | '\u{50000}'..='\u{5FFFD}'
 1605|  2.58k|        | '\u{60000}'..='\u{6FFFD}'
 1606|  2.58k|        | '\u{70000}'..='\u{7FFFD}'
 1607|  2.58k|        | '\u{80000}'..='\u{8FFFD}'
 1608|  2.58k|        | '\u{90000}'..='\u{9FFFD}'
 1609|  2.58k|        | '\u{A0000}'..='\u{AFFFD}'
 1610|  2.58k|        | '\u{B0000}'..='\u{BFFFD}'
 1611|  2.58k|        | '\u{C0000}'..='\u{CFFFD}'
 1612|  2.40k|        | '\u{D0000}'..='\u{DFFFD}'
 1613|  2.40k|        | '\u{E1000}'..='\u{EFFFD}'
 1614|       |    )
 1615|   176k|}
_RNvMs10_Cs4yBHfwNtpDd_5oxiriNtB6_11ParserInput4nextCsgtGDRi1noi_5oxrdf:
 1154|   489k|    fn next(&mut self) -> Option<char> {
 1155|   489k|        if let Some(head) = self.value.next() {
 1156|   410k|            self.position += head.len_utf8();
 1157|   410k|            Some(head)
 1158|       |        } else {
 1159|  78.8k|            None
 1160|       |        }
 1161|   489k|    }
_RNvCs4yBHfwNtpDd_5oxiri23is_url_query_code_pointCsgtGDRi1noi_5oxrdf:
 1618|  12.4k|fn is_url_query_code_point(c: char) -> bool {
 1619|  12.4k|    is_url_code_point(c)
 1620|  1.65k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1621|  12.4k|}
_RNvMs10_Cs4yBHfwNtpDd_5oxiriNtB6_11ParserInput5frontCsgtGDRi1noi_5oxrdf:
 1164|  86.3k|    fn front(&self) -> Option<char> {
 1165|  86.3k|        self.value.clone().next()
 1166|  86.3k|    }
_RNvXsW_Cs4yBHfwNtpDd_5oxiriNtB5_13IriParseErrorNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1016|  16.7k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1017|  16.7k|        match &self.kind {
 1018|  5.44k|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
 1019|  2.03k|            IriParseErrorKind::InvalidHostCharacter(c) => {
 1020|  2.03k|                write!(f, "Invalid character '{c}' in host")
 1021|       |            }
 1022|    650|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({e})"),
 1023|    736|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{c}'"),
 1024|  5.94k|            IriParseErrorKind::InvalidIriCodePoint(c) => {
 1025|  5.94k|                write!(f, "Invalid IRI code point '{c}'")
 1026|       |            }
 1027|  1.94k|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
 1028|  1.94k|                f,
 1029|  1.94k|                "Invalid IRI percent encoding '{}'",
 1030|  1.94k|                cs.iter().flatten().cloned().collect::<String>()
 1031|  1.94k|            ),
 1032|       |        }
 1033|  16.7k|    }

_RNCNvNvCsjN1WeLjmkFM_6nquads1__19___libfuzzer_sys_run0B5_:
   40|  1.07M|    let (quads, errors) = parse(data.split(|c| *c == 0xFF), false);
_RNCNvNvCsjN1WeLjmkFM_6nquads1__19___libfuzzer_sys_runs_0B5_:
   46|  1.07M|            .filter(|c| *c != 0xFF)
_RNCNvNvCsjN1WeLjmkFM_6nquads1__19___libfuzzer_sys_runs0_0B5_:
   56|  20.1k|        let (quads_unchecked, errors_unchecked) = parse(data.split(|c| *c == 0xFF), true);
_RINvCsjN1WeLjmkFM_6nquads5parseARShj1_EB2_:
    7|  3.75k|fn parse<'a>(
    8|  3.75k|    chunks: impl IntoIterator<Item = &'a [u8]>,
    9|  3.75k|    unchecked: bool,
   10|  3.75k|) -> (Vec<Quad>, Vec<String>) {
   11|  3.75k|    let mut quads = Vec::new();
   12|  3.75k|    let mut errors = Vec::new();
   13|  3.75k|    let mut parser = NQuadsParser::new().with_quoted_triples();
   14|  3.75k|    if unchecked {
   15|      0|        parser = parser.unchecked();
   16|  3.75k|    }
   17|  3.75k|    let mut reader = parser.parse();
   18|  7.51k|    for chunk in chunks {
   19|  3.75k|        reader.extend_from_slice(chunk);
   20|   127k|        while let Some(result) = reader.read_next() {
   21|   123k|            match result {
   22|  6.70k|                Ok(quad) => quads.push(quad),
   23|   116k|                Err(error) => errors.push(error.to_string()),
   24|       |            }
   25|       |        }
   26|       |    }
   27|  3.75k|    reader.end();
   28|  6.84k|    while let Some(result) = reader.read_next() {
   29|  3.08k|        match result {
   30|    238|            Ok(quad) => quads.push(quad),
   31|  2.84k|            Err(error) => errors.push(error.to_string()),
   32|       |        }
   33|       |    }
   34|  3.75k|    assert!(reader.is_end());
   35|  3.75k|    (quads, errors)
   36|  3.75k|}
_RINvCsjN1WeLjmkFM_6nquads5parseINtNtNtCs9nhK3FOW46N_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_run0EEB2_:
    7|  3.75k|fn parse<'a>(
    8|  3.75k|    chunks: impl IntoIterator<Item = &'a [u8]>,
    9|  3.75k|    unchecked: bool,
   10|  3.75k|) -> (Vec<Quad>, Vec<String>) {
   11|  3.75k|    let mut quads = Vec::new();
   12|  3.75k|    let mut errors = Vec::new();
   13|  3.75k|    let mut parser = NQuadsParser::new().with_quoted_triples();
   14|  3.75k|    if unchecked {
   15|      0|        parser = parser.unchecked();
   16|  3.75k|    }
   17|  3.75k|    let mut reader = parser.parse();
   18|   289k|    for chunk in chunks {
   19|   286k|        reader.extend_from_slice(chunk);
   20|   409k|        while let Some(result) = reader.read_next() {
   21|   123k|            match result {
   22|  6.70k|                Ok(quad) => quads.push(quad),
   23|   116k|                Err(error) => errors.push(error.to_string()),
   24|       |            }
   25|       |        }
   26|       |    }
   27|  3.75k|    reader.end();
   28|  6.84k|    while let Some(result) = reader.read_next() {
   29|  3.08k|        match result {
   30|    238|            Ok(quad) => quads.push(quad),
   31|  2.84k|            Err(error) => errors.push(error.to_string()),
   32|       |        }
   33|       |    }
   34|  3.75k|    assert!(reader.is_end());
   35|  3.75k|    (quads, errors)
   36|  3.75k|}
_RINvCsjN1WeLjmkFM_6nquads5parseINtNtNtCs9nhK3FOW46N_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_runs0_0EEB2_:
    7|    142|fn parse<'a>(
    8|    142|    chunks: impl IntoIterator<Item = &'a [u8]>,
    9|    142|    unchecked: bool,
   10|    142|) -> (Vec<Quad>, Vec<String>) {
   11|    142|    let mut quads = Vec::new();
   12|    142|    let mut errors = Vec::new();
   13|    142|    let mut parser = NQuadsParser::new().with_quoted_triples();
   14|    142|    if unchecked {
   15|    142|        parser = parser.unchecked();
   16|    142|    }
   17|    142|    let mut reader = parser.parse();
   18|  5.66k|    for chunk in chunks {
   19|  5.52k|        reader.extend_from_slice(chunk);
   20|  6.18k|        while let Some(result) = reader.read_next() {
   21|    663|            match result {
   22|    663|                Ok(quad) => quads.push(quad),
   23|      0|                Err(error) => errors.push(error.to_string()),
   24|       |            }
   25|       |        }
   26|       |    }
   27|    142|    reader.end();
   28|    167|    while let Some(result) = reader.read_next() {
   29|     25|        match result {
   30|     25|            Ok(quad) => quads.push(quad),
   31|      0|            Err(error) => errors.push(error.to_string()),
   32|       |        }
   33|       |    }
   34|    142|    assert!(reader.is_end());
   35|    142|    (quads, errors)
   36|    142|}

_RNvXsb_NtCsgtGDRi1noi_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsjN1WeLjmkFM_6nquads:
   19|  12.2k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2_NtCsgtGDRi1noi_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsjN1WeLjmkFM_6nquads:
  216|  5.24k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  217|  5.24k|        write!(f, "_:{}", self.as_str())
  218|  5.24k|    }
_RNvXsg_NtCsgtGDRi1noi_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsjN1WeLjmkFM_6nquads:
   22|  12.2k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMs1_NtCsgtGDRi1noi_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCsjN1WeLjmkFM_6nquads:
  175|  5.24k|    pub const fn as_str(self) -> &'a str {
  176|  5.24k|        match self.0 {
  177|  1.02k|            BlankNodeRefContent::Named(id) => id,
  178|  4.21k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  179|       |        }
  180|  5.24k|    }
_RNvXsD_NtCsgtGDRi1noi_5oxrdf10blank_nodeNtB5_5IdStrNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsjN1WeLjmkFM_6nquads:
  249|  9.26k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMs7_NtCsgtGDRi1noi_5oxrdf10blank_nodeNtB5_5IdStr6as_strCsjN1WeLjmkFM_6nquads:
  261|  4.21k|    fn as_str(&self) -> &str {
  262|  4.21k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  263|  4.21k|        str::from_utf8(&self.0[..len]).unwrap()
  264|  4.21k|    }
_RNvMNtCsgtGDRi1noi_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCsjN1WeLjmkFM_6nquads:
   87|  5.24k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   88|  5.24k|        BlankNodeRef(match &self.0 {
   89|  1.02k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   90|  4.21k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   91|  4.21k|                id: *id,
   92|  4.21k|                str: str.as_str(),
   93|  4.21k|            },
   94|       |        })
   95|  5.24k|    }
_RINvMNtCsgtGDRi1noi_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedReECsgfQ0H3lfwIZ_5oxttl:
   48|  20.7k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   49|  20.7k|        let id = id.into();
   50|  20.7k|        if let Some(numerical_id) = to_integer_id(&id) {
   51|  14.7k|            Self::new_from_unique_id(numerical_id)
   52|       |        } else {
   53|  5.97k|            Self(BlankNodeContent::Named(id))
   54|       |        }
   55|  20.7k|    }
_RNvNtCsgtGDRi1noi_5oxrdf10blank_node13to_integer_idCsgfQ0H3lfwIZ_5oxttl:
  327|  20.7k|fn to_integer_id(id: &str) -> Option<u128> {
  328|  20.7k|    let digits = id.as_bytes();
  329|  20.7k|    let mut value: u128 = 0;
  330|  20.7k|    if let None | Some(b'0') = digits.first() {
  331|  3.83k|        return None; // No empty string or leading zeros
  332|  16.9k|    }
  333|   109k|    for digit in digits {
  334|  94.3k|        value = value.checked_mul(16)?.checked_add(
  335|  94.3k|            match *digit {
  336|  94.3k|                b'0'..=b'9' => digit - b'0',
  337|  85.0k|                b'a'..=b'f' => digit - b'a' + 10,
  338|  2.07k|                _ => return None,
  339|       |            }
  340|  92.2k|            .into(),
  341|      0|        )?;
  342|       |    }
  343|  14.7k|    Some(value)
  344|  20.7k|}
_RNvMNtCsgtGDRi1noi_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idCsgfQ0H3lfwIZ_5oxttl:
   61|  14.7k|    pub fn new_from_unique_id(id: u128) -> Self {
   62|  14.7k|        Self(BlankNodeContent::Anonymous {
   63|  14.7k|            id,
   64|  14.7k|            str: IdStr::new(id),
   65|  14.7k|        })
   66|  14.7k|    }
_RNvMs7_NtCsgtGDRi1noi_5oxrdf10blank_nodeNtB5_5IdStr3newCsgfQ0H3lfwIZ_5oxttl:
  254|  14.7k|    fn new(id: u128) -> Self {
  255|  14.7k|        let mut str = [0; 32];
  256|  14.7k|        write!(&mut str[..], "{id:x}").unwrap();
  257|  14.7k|        Self(str)
  258|  14.7k|    }
_RNvXs2_NtCsgtGDRi1noi_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtB7_:
  216|    542|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  217|    542|        write!(f, "_:{}", self.as_str())
  218|    542|    }
_RNvMs1_NtCsgtGDRi1noi_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strB7_:
  175|    542|    pub const fn as_str(self) -> &'a str {
  176|    542|        match self.0 {
  177|    452|            BlankNodeRefContent::Named(id) => id,
  178|     90|            BlankNodeRefContent::Anonymous { str, .. } => str,
  179|       |        }
  180|    542|    }
_RNvMs7_NtCsgtGDRi1noi_5oxrdf10blank_nodeNtB5_5IdStr6as_strB7_:
  261|     90|    fn as_str(&self) -> &str {
  262|     90|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  263|     90|        str::from_utf8(&self.0[..len]).unwrap()
  264|     90|    }
_RNvMNtCsgtGDRi1noi_5oxrdf10blank_nodeNtB2_9BlankNode6as_refB4_:
   87|    542|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   88|    542|        BlankNodeRef(match &self.0 {
   89|    452|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   90|     90|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   91|     90|                id: *id,
   92|     90|                str: str.as_str(),
   93|     90|            },
   94|       |        })
   95|    542|    }
_RNCNvMs7_NtCsgtGDRi1noi_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  262|  32.1k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);

_RNvXsu_NtCsgtGDRi1noi_5oxrdf7literalNtB5_10LiteralRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsjN1WeLjmkFM_6nquads:
  565|  1.03k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  566|  1.03k|        match self.0 {
  567|    544|            LiteralRefContent::String(value) => print_quoted_str(value, f),
  568|    284|            LiteralRefContent::LanguageTaggedString { value, language } => {
  569|    284|                print_quoted_str(value, f)?;
  570|    284|                write!(f, "@{language}")
  571|       |            }
  572|    209|            LiteralRefContent::TypedLiteral { value, datatype } => {
  573|    209|                print_quoted_str(value, f)?;
  574|    209|                write!(f, "^^{datatype}")
  575|       |            }
  576|       |        }
  577|  1.03k|    }
_RNvMNtCsgtGDRi1noi_5oxrdf7literalNtB2_7Literal6as_refCsjN1WeLjmkFM_6nquads:
  129|  1.03k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|  1.03k|        LiteralRef(match &self.0 {
  131|    544|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|    284|            LiteralContent::LanguageTaggedString { value, language } => {
  133|    284|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|    209|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|    209|                value,
  137|    209|                datatype: datatype.as_ref(),
  138|    209|            },
  139|       |        })
  140|  1.03k|    }
_RNvXsI_NtCsgtGDRi1noi_5oxrdf7literalNtB5_14LiteralContentNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsjN1WeLjmkFM_6nquads:
   37|  2.58k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsD_NtCsgtGDRi1noi_5oxrdf7literalNtB5_7LiteralNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsjN1WeLjmkFM_6nquads:
   34|  2.58k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RINvMNtCsgtGDRi1noi_5oxrdf7literalNtB3_7Literal18new_simple_literalRNtNtCsjOdcKtOMjJI_5alloc6string6StringECsgfQ0H3lfwIZ_5oxttl:
   47|    104|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|    104|        Self(LiteralContent::String(value.into()))
   49|    104|    }
_RINvMNtCsgtGDRi1noi_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCsjOdcKtOMjJI_5alloc6string6StringB1m_EB5_:
   85|  1.71k|    pub fn new_language_tagged_literal_unchecked(
   86|  1.71k|        value: impl Into<String>,
   87|  1.71k|        language: impl Into<String>,
   88|  1.71k|    ) -> Self {
   89|  1.71k|        Self(LiteralContent::LanguageTaggedString {
   90|  1.71k|            value: value.into(),
   91|  1.71k|            language: language.into(),
   92|  1.71k|        })
   93|  1.71k|    }
_RINvMNtCsgtGDRi1noi_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCsjOdcKtOMjJI_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   53|    774|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|    774|        let value = value.into();
   55|    774|        let datatype = datatype.into();
   56|    774|        Self(if datatype == xsd::STRING {
   57|      0|            LiteralContent::String(value)
   58|       |        } else {
   59|    774|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|    774|    }
_RINvNtCsgtGDRi1noi_5oxrdf7literal16print_quoted_strNtNtCs9nhK3FOW46N_4core3fmt9FormatterEB4_:
  616|  1.27k|pub fn print_quoted_str(string: &str, f: &mut impl Write) -> fmt::Result {
  617|  1.27k|    f.write_char('"')?;
  618|  31.4k|    for c in string.chars() {
  619|  31.4k|        match c {
  620|    833|            '\u{08}' => f.write_str("\\b"),
  621|    207|            '\t' => f.write_str("\\t"),
  622|    943|            '\n' => f.write_str("\\n"),
  623|    198|            '\u{0C}' => f.write_str("\\f"),
  624|    410|            '\r' => f.write_str("\\r"),
  625|    111|            '"' => f.write_str("\\\""),
  626|     66|            '\\' => f.write_str("\\\\"),
  627|  28.6k|            '\0'..='\u{1F}' | '\u{7F}' => write!(f, "\\u{:04X}", u32::from(c)),
  628|  6.08k|            _ => f.write_char(c),
  629|      0|        }?;
  630|       |    }
  631|  1.27k|    f.write_char('"')
  632|  1.27k|}
_RINvMNtCsgtGDRi1noi_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCsjOdcKtOMjJI_5alloc6string6StringEB5_:
   47|  2.23k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|  2.23k|        Self(LiteralContent::String(value.into()))
   49|  2.23k|    }
_RNvXsu_NtCsgtGDRi1noi_5oxrdf7literalNtB5_10LiteralRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtB7_:
  565|    238|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  566|    238|        match self.0 {
  567|    143|            LiteralRefContent::String(value) => print_quoted_str(value, f),
  568|     95|            LiteralRefContent::LanguageTaggedString { value, language } => {
  569|     95|                print_quoted_str(value, f)?;
  570|     95|                write!(f, "@{language}")
  571|       |            }
  572|      0|            LiteralRefContent::TypedLiteral { value, datatype } => {
  573|      0|                print_quoted_str(value, f)?;
  574|      0|                write!(f, "^^{datatype}")
  575|       |            }
  576|       |        }
  577|    238|    }
_RNvMNtCsgtGDRi1noi_5oxrdf7literalNtB2_7Literal6as_refB4_:
  129|    238|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|    238|        LiteralRef(match &self.0 {
  131|    143|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|     95|            LiteralContent::LanguageTaggedString { value, language } => {
  133|     95|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|      0|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|      0|                value,
  137|      0|                datatype: datatype.as_ref(),
  138|      0|            },
  139|       |        })
  140|    238|    }

_RNvMNtCsgtGDRi1noi_5oxrdf10named_nodeNtB2_9NamedNode6as_refCsjN1WeLjmkFM_6nquads:
   54|  16.5k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  16.5k|        NamedNodeRef::new_unchecked(&self.iri)
   56|  16.5k|    }
_RNvXsl_NtCsgtGDRi1noi_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsjN1WeLjmkFM_6nquads:
   17|  38.5k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMs4_NtCsgtGDRi1noi_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCsjN1WeLjmkFM_6nquads:
  128|  16.5k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  16.5k|        Self { iri }
  130|  16.5k|    }
_RNvXs5_NtCsgtGDRi1noi_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsjN1WeLjmkFM_6nquads:
  145|  16.5k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|  16.5k|        write!(f, "<{}>", self.as_str())
  147|  16.5k|    }
_RNvMs4_NtCsgtGDRi1noi_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCsjN1WeLjmkFM_6nquads:
  133|  16.5k|    pub const fn as_str(self) -> &'a str {
  134|  16.5k|        self.iri
  135|  16.5k|    }
_RINvMNtCsgtGDRi1noi_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCsjOdcKtOMjJI_5alloc6string6StringEB5_:
   39|  67.2k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  67.2k|        Self { iri: iri.into() }
   41|  67.2k|    }
_RNvMs4_NtCsgtGDRi1noi_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|  2.65k|    pub const fn as_str(self) -> &'a str {
  134|  2.65k|        self.iri
  135|  2.65k|    }
_RNvMNtCsgtGDRi1noi_5oxrdf10named_nodeNtB2_9NamedNode6as_refB4_:
   54|  1.88k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  1.88k|        NamedNodeRef::new_unchecked(&self.iri)
   56|  1.88k|    }
_RNvXs9_NtCsgtGDRi1noi_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs9nhK3FOW46N_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|    774|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|    774|        self.as_str() == other.as_str()
  175|    774|    }
_RNvXs5_NtCsgtGDRi1noi_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtB7_:
  145|  1.88k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|  1.88k|        write!(f, "<{}>", self.as_str())
  147|  1.88k|    }
_RNvMNtCsgtGDRi1noi_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|    774|    pub fn as_str(&self) -> &str {
   45|    774|        self.iri.as_str()
   46|    774|    }
_RNvMs4_NtCsgtGDRi1noi_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedB7_:
  128|  1.88k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  1.88k|        Self { iri }
  130|  1.88k|    }

_RNvXs2p_NtCsgtGDRi1noi_5oxrdf6tripleNtB6_6TripleNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsjN1WeLjmkFM_6nquads:
  780|  1.88k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1y_NtCsgtGDRi1noi_5oxrdf6tripleNtB6_7QuadRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsjN1WeLjmkFM_6nquads:
 1272|  6.94k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1273|  6.94k|        if self.graph_name.is_default_graph() {
 1274|  4.38k|            write!(f, "{} {} {}", self.subject, self.predicate, self.object)
 1275|       |        } else {
 1276|  2.56k|            write!(
 1277|  2.56k|                f,
 1278|  2.56k|                "{} {} {} {}",
 1279|  2.56k|                self.subject, self.predicate, self.object, self.graph_name
 1280|  2.56k|            )
 1281|       |        }
 1282|  6.94k|    }
_RNvXs1A_NtCsgtGDRi1noi_5oxrdf6tripleNtB6_7QuadRefINtNtCs9nhK3FOW46N_4core7convert4FromRNtB6_4QuadE4fromCsjN1WeLjmkFM_6nquads:
 1298|  6.94k|    fn from(quad: &'a Quad) -> Self {
 1299|  6.94k|        quad.as_ref()
 1300|  6.94k|    }
_RNvXs1V_NtCsgtGDRi1noi_5oxrdf6tripleNtB6_7SubjectNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsjN1WeLjmkFM_6nquads:
  155|  16.4k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMs1c_NtCsgtGDRi1noi_5oxrdf6tripleNtB6_9GraphName6as_refCsjN1WeLjmkFM_6nquads:
  965|  6.94k|    pub fn as_ref(&self) -> GraphNameRef<'_> {
  966|  6.94k|        match self {
  967|    830|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.as_ref()),
  968|  1.73k|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.as_ref()),
  969|  4.38k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  970|       |        }
  971|  6.94k|    }
_RNvXso_NtCsgtGDRi1noi_5oxrdf6tripleNtB5_10SubjectRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsjN1WeLjmkFM_6nquads:
  306|  6.94k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  307|  6.94k|        match self {
  308|  5.44k|            Self::NamedNode(node) => node.fmt(f),
  309|    942|            Self::BlankNode(node) => node.fmt(f),
  310|       |            #[cfg(feature = "rdf-star")]
  311|    562|            Self::Triple(triple) => write!(f, "<<{triple}>>"),
  312|       |        }
  313|  6.94k|    }
_RNvXs2E_NtCsgtGDRi1noi_5oxrdf6tripleNtB6_9GraphNameNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsjN1WeLjmkFM_6nquads:
  940|  14.5k|#[derive(Eq, PartialEq, Debug, Clone, Hash, Default)]
_RNvMs1k_NtCsgtGDRi1noi_5oxrdf6tripleNtB6_12GraphNameRef16is_default_graphCsjN1WeLjmkFM_6nquads:
 1048|  6.94k|    pub fn is_default_graph(&self) -> bool {
 1049|  6.94k|        matches!(self, Self::DefaultGraph)
 1050|  6.94k|    }
_RNvXs2a_NtCsgtGDRi1noi_5oxrdf6tripleNtB6_4TermNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsjN1WeLjmkFM_6nquads:
  385|  16.4k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMsc_NtCsgtGDRi1noi_5oxrdf6tripleNtB5_7Subject6as_refCsjN1WeLjmkFM_6nquads:
  181|  6.94k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  6.94k|        match self {
  183|  5.44k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|    942|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|    562|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  6.94k|    }
_RNvMs1u_NtCsgtGDRi1noi_5oxrdf6tripleNtB6_4Quad6as_refCsjN1WeLjmkFM_6nquads:
 1182|  6.94k|    pub fn as_ref(&self) -> QuadRef<'_> {
 1183|  6.94k|        QuadRef {
 1184|  6.94k|            subject: self.subject.as_ref(),
 1185|  6.94k|            predicate: self.predicate.as_ref(),
 1186|  6.94k|            object: self.object.as_ref(),
 1187|  6.94k|            graph_name: self.graph_name.as_ref(),
 1188|  6.94k|        }
 1189|  6.94k|    }
_RNvXs1l_NtCsgtGDRi1noi_5oxrdf6tripleNtB6_12GraphNameRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsjN1WeLjmkFM_6nquads:
 1064|  2.56k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1065|  2.56k|        match self {
 1066|    830|            Self::NamedNode(node) => node.fmt(f),
 1067|  1.73k|            Self::BlankNode(node) => node.fmt(f),
 1068|      0|            Self::DefaultGraph => f.write_str("DEFAULT"),
 1069|       |        }
 1070|  2.56k|    }
_RNvXsS_NtCsgtGDRi1noi_5oxrdf6tripleNtB5_7TermRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsjN1WeLjmkFM_6nquads:
  650|  6.94k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  651|  6.94k|        match self {
  652|  3.12k|            Self::NamedNode(node) => node.fmt(f),
  653|  2.56k|            Self::BlankNode(node) => node.fmt(f),
  654|  1.03k|            Self::Literal(literal) => literal.fmt(f),
  655|       |            #[cfg(feature = "rdf-star")]
  656|    219|            Self::Triple(triple) => {
  657|    219|                write!(f, "<<{triple}>>")
  658|       |            }
  659|       |        }
  660|  6.94k|    }
_RNvMsy_NtCsgtGDRi1noi_5oxrdf6tripleNtB5_4Term6as_refCsjN1WeLjmkFM_6nquads:
  417|  6.94k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|  6.94k|        match self {
  419|  3.12k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|  2.56k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  1.03k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|    219|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|  6.94k|    }
_RNvXs2V_NtCsgtGDRi1noi_5oxrdf6tripleNtB6_4QuadNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsjN1WeLjmkFM_6nquads:
 1149|  14.5k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1g_NtCsgtGDRi1noi_5oxrdf6tripleNtB6_9GraphNameINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB8_10blank_node9BlankNodeE4fromCsgfQ0H3lfwIZ_5oxttl:
  997|  5.47k|    fn from(node: BlankNode) -> Self {
  998|  5.47k|        Self::BlankNode(node)
  999|  5.47k|    }
_RNvXs1e_NtCsgtGDRi1noi_5oxrdf6tripleNtB6_9GraphNameINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB8_10named_node9NamedNodeE4fromCsgfQ0H3lfwIZ_5oxttl:
  983|  2.49k|    fn from(node: NamedNode) -> Self {
  984|  2.49k|        Self::NamedNode(node)
  985|  2.49k|    }
_RNvXsC_NtCsgtGDRi1noi_5oxrdf6tripleNtB5_4TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  451|  10.5k|    fn from(node: BlankNode) -> Self {
  452|  10.5k|        Self::BlankNode(node)
  453|  10.5k|    }
_RNvXs19_NtCsgtGDRi1noi_5oxrdf6tripleNtB6_9TripleRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtB8_:
  919|    940|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  920|    940|        write!(f, "{} {} {}", self.subject, self.predicate, self.object)
  921|    940|    }
_RNvXsA_NtCsgtGDRi1noi_5oxrdf6tripleNtB5_4TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|  10.1k|    fn from(node: NamedNode) -> Self {
  438|  10.1k|        Self::NamedNode(node)
  439|  10.1k|    }
_RNvXsG_NtCsgtGDRi1noi_5oxrdf6tripleNtB5_4TermINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_6TripleE4fromB7_:
  480|  1.01k|    fn from(triple: Triple) -> Self {
  481|  1.01k|        Self::Triple(Box::new(triple))
  482|  1.01k|    }
_RNvMsy_NtCsgtGDRi1noi_5oxrdf6tripleNtB5_4Term6as_refB7_:
  417|    940|    pub fn as_ref(&self) -> TermRef<'_> {
  418|    940|        match self {
  419|     87|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|    542|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|    238|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|     73|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|    940|    }
_RNvMs16_NtCsgtGDRi1noi_5oxrdf6tripleNtB6_6Triple6as_refB8_:
  835|    940|    pub fn as_ref(&self) -> TripleRef<'_> {
  836|    940|        TripleRef {
  837|    940|            subject: self.subject.as_ref(),
  838|    940|            predicate: self.predicate.as_ref(),
  839|    940|            object: self.object.as_ref(),
  840|    940|        }
  841|    940|    }
_RNvXs17_NtCsgtGDRi1noi_5oxrdf6tripleNtB6_6TripleNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtB8_:
  846|    940|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  847|    940|        self.as_ref().fmt(f)
  848|    940|    }
_RNvXse_NtCsgtGDRi1noi_5oxrdf6tripleNtB5_7SubjectINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|  24.9k|    fn from(node: NamedNode) -> Self {
  201|  24.9k|        Self::NamedNode(node)
  202|  24.9k|    }
_RNvMsc_NtCsgtGDRi1noi_5oxrdf6tripleNtB5_7Subject6as_refB7_:
  181|    940|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|    940|        match self {
  183|    854|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|      0|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|     86|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|    940|    }
_RNvXso_NtCsgtGDRi1noi_5oxrdf6tripleNtB5_10SubjectRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtB7_:
  306|    940|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  307|    940|        match self {
  308|    854|            Self::NamedNode(node) => node.fmt(f),
  309|      0|            Self::BlankNode(node) => node.fmt(f),
  310|       |            #[cfg(feature = "rdf-star")]
  311|     86|            Self::Triple(triple) => write!(f, "<<{triple}>>"),
  312|       |        }
  313|    940|    }
_RNvXsi_NtCsgtGDRi1noi_5oxrdf6tripleNtB5_7SubjectINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_6TripleE4fromB7_:
  229|  2.66k|    fn from(node: Triple) -> Self {
  230|  2.66k|        Self::Triple(Box::new(node))
  231|  2.66k|    }
_RNvXsS_NtCsgtGDRi1noi_5oxrdf6tripleNtB5_7TermRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtB7_:
  650|    940|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  651|    940|        match self {
  652|     87|            Self::NamedNode(node) => node.fmt(f),
  653|    542|            Self::BlankNode(node) => node.fmt(f),
  654|    238|            Self::Literal(literal) => literal.fmt(f),
  655|       |            #[cfg(feature = "rdf-star")]
  656|     73|            Self::Triple(triple) => {
  657|     73|                write!(f, "<<{triple}>>")
  658|       |            }
  659|       |        }
  660|    940|    }
_RNvXsg_NtCsgtGDRi1noi_5oxrdf6tripleNtB5_7SubjectINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|  4.75k|    fn from(node: BlankNode) -> Self {
  215|  4.75k|        Self::BlankNode(node)
  216|  4.75k|    }
_RNvXsE_NtCsgtGDRi1noi_5oxrdf6tripleNtB5_4TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  465|  4.83k|    fn from(literal: Literal) -> Self {
  466|  4.83k|        Self::Literal(literal)
  467|  4.83k|    }

_RNvMs_NtCsgfQ0H3lfwIZ_5oxttl5lexerNtB4_7N3Lexer3new:
  173|  11.4k|    pub fn new(mode: N3LexerMode, unchecked: bool) -> Self {
  174|  11.4k|        Self { mode, unchecked }
  175|  11.4k|    }
_RNvMs_NtCsgfQ0H3lfwIZ_5oxttl5lexerNtB4_7N3Lexer26recognize_pname_or_keyword:
  236|   204k|    fn recognize_pname_or_keyword<'a>(
  237|   204k|        &self,
  238|   204k|        data: &'a [u8],
  239|   204k|        is_ending: bool,
  240|   204k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  241|   204k|        // [139s]  PNAME_NS   ::=  PN_PREFIX? ':'
  242|   204k|        // [140s]  PNAME_LN   ::=  PNAME_NS PN_LOCAL
  243|   204k|        // [167s]  PN_PREFIX  ::=  PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
  244|   204k|        let mut i = 0;
  245|       |        loop {
  246|   348k|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  247|   335k|                match r {
  248|   273k|                    Ok((c, consumed)) => {
  249|   273k|                        if c == ':' {
  250|  22.9k|                            i += consumed;
  251|  22.9k|                            break;
  252|   250k|                        } else if i == 0 {
  253|   133k|                            if !Self::is_possible_pn_chars_base(c) {
  254|  86.1k|                                return Some((
  255|  86.1k|                                    consumed,
  256|  86.1k|                                    Err((
  257|  86.1k|                                        0..consumed,
  258|  86.1k|                                        format!(
  259|  86.1k|                                            "'{c}' is not allowed at the beginning of a prefix name"
  260|  86.1k|                                        ),
  261|  86.1k|                                    )
  262|  86.1k|                                        .into()),
  263|  86.1k|                                ));
  264|  47.6k|                            }
  265|  47.6k|                            i += consumed;
  266|   117k|                        } else if Self::is_possible_pn_chars(c) || c == '.' {
  267|  96.5k|                            i += consumed;
  268|  96.5k|                        } else {
  269|  24.1k|                            while data[..i].ends_with(b".") {
  270|  3.70k|                                i -= 1;
  271|  3.70k|                            }
  272|  20.4k|                            return Some((
  273|  20.4k|                                i,
  274|  20.4k|                                str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  275|  20.4k|                            ));
  276|       |                        }
  277|       |                    }
  278|  61.4k|                    Err(e) => return Some((e.location.end, Err(e))),
  279|       |                }
  280|  13.1k|            } else if is_ending {
  281|  4.00k|                while data[..i].ends_with(b".") {
  282|  3.18k|                    i -= 1;
  283|  3.18k|                }
  284|    820|                return Some(if i == 0 {
  285|    262|                    (
  286|    262|                        1,
  287|    262|                        Err((0..1, format!("Unexpected byte {}", data[0])).into()),
  288|    262|                    )
  289|       |                } else {
  290|    558|                    (
  291|    558|                        i,
  292|    558|                        str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  293|    558|                    )
  294|       |                });
  295|       |            } else {
  296|  12.3k|                return None;
  297|       |            }
  298|       |        }
  299|  22.9k|        let pn_prefix = match str_from_utf8(&data[..i - 1], 0..i - 1) {
  300|  22.9k|            Ok(pn_prefix) => pn_prefix,
  301|      0|            Err(e) => return Some((i, Err(e))),
  302|       |        };
  303|  22.9k|        if pn_prefix.ends_with('.') {
  304|    206|            return Some((
  305|    206|                i,
  306|    206|                Err((
  307|    206|                    0..i,
  308|    206|                    format!(
  309|    206|                        "'{pn_prefix}' is not a valid prefix: prefixes are not allowed to end with '.'"),
  310|    206|                )
  311|    206|                    .into()),
  312|    206|            ));
  313|  22.7k|        }
  314|       |
  315|  7.47k|        let (consumed, pn_local_result) =
  316|  22.7k|            self.recognize_optional_pn_local(&data[i..], is_ending)?;
  317|  7.47k|        Some((
  318|  7.47k|            consumed + i,
  319|  7.47k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  320|       |                prefix: pn_prefix,
  321|       |                local,
  322|       |                might_be_invalid_iri,
  323|  7.47k|            }),
  324|  7.47k|        ))
  325|   204k|    }
_RNvMs_NtCsgfQ0H3lfwIZ_5oxttl5lexerNtB4_7N3Lexer27recognize_optional_pn_local:
  346|  28.9k|    fn recognize_optional_pn_local<'a>(
  347|  28.9k|        &self,
  348|  28.9k|        data: &'a [u8],
  349|  28.9k|        is_ending: bool,
  350|  28.9k|    ) -> Option<(usize, Result<(Cow<'a, str>, bool), TokenRecognizerError>)> {
  351|  28.9k|        // [168s]  PN_LOCAL  ::=  (PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
  352|  28.9k|        let mut i = 0;
  353|  28.9k|        let mut buffer = None; // Buffer if there are some escaped characters
  354|  28.9k|        let mut position_that_is_already_in_buffer = 0;
  355|  28.9k|        let mut might_be_invalid_iri = false;
  356|  28.9k|        let mut ends_with_unescaped_dot = 0;
  357|       |        loop {
  358|   117k|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  359|   100k|                match r {
  360|  98.7k|                    Ok((c, consumed)) => {
  361|  98.7k|                        if c == '%' {
  362|  2.10k|                            i += 1;
  363|  2.10k|                            let a = char::from(*data.get(i)?);
  364|  1.52k|                            i += 1;
  365|  1.52k|                            let b = char::from(*data.get(i)?);
  366|  1.11k|                            if !a.is_ascii_hexdigit() || !b.is_ascii_hexdigit() {
  367|    430|                                return Some((i + 1, Err((
  368|    430|                                    i - 2..=i, format!("escapes in IRIs should be % followed by two hexadecimal characters, found '%{a}{b}'")
  369|    430|                                ).into())));
  370|    686|                            }
  371|    686|                            i += 1;
  372|    686|                            ends_with_unescaped_dot = 0;
  373|  96.6k|                        } else if c == '\\' {
  374|  14.1k|                            i += 1;
  375|  14.1k|                            let a = char::from(*data.get(i)?);
  376|  13.4k|                            if self.unchecked
  377|  4.73k|                                || matches!(
  378|  13.4k|                                    a,
  379|       |                                    '_' | '~'
  380|       |                                        | '.'
  381|       |                                        | '-'
  382|       |                                        | '!'
  383|       |                                        | '$'
  384|       |                                        | '&'
  385|       |                                        | '\''
  386|       |                                        | '('
  387|       |                                        | ')'
  388|       |                                        | '*'
  389|       |                                        | '+'
  390|       |                                        | ','
  391|       |                                        | ';'
  392|       |                                        | '='
  393|       |                                )
  394|  8.70k|                            {
  395|  8.70k|                                // ok to escape
  396|  8.70k|                            } else if matches!(a, '/' | '?' | '#' | '@' | '%') {
  397|  4.47k|                                // ok to escape but requires IRI validation
  398|  4.47k|                                might_be_invalid_iri = true;
  399|  4.47k|                            } else {
  400|    254|                                return Some((i + 1, Err((
  401|    254|                                    i..=i, format!("The character that are allowed to be escaped in IRIs are _~.-!$&'()*+,;=/?#@%, found '{a}'")
  402|    254|                                ).into())));
  403|       |                            }
  404|  13.1k|                            let buffer = buffer.get_or_insert_with(String::new);
  405|  13.1k|                            // We add the missing bytes
  406|  13.1k|                            if i - position_that_is_already_in_buffer > 1 {
  407|  6.34k|                                buffer.push_str(
  408|  6.34k|                                    match str_from_utf8(
  409|  6.34k|                                        &data[position_that_is_already_in_buffer..i - 1],
  410|  6.34k|                                        position_that_is_already_in_buffer..i - 1,
  411|  6.34k|                                    ) {
  412|  6.34k|                                        Ok(data) => data,
  413|      0|                                        Err(e) => return Some((i, Err(e))),
  414|       |                                    },
  415|       |                                )
  416|  6.83k|                            }
  417|  13.1k|                            buffer.push(a);
  418|  13.1k|                            i += 1;
  419|  13.1k|                            position_that_is_already_in_buffer = i;
  420|  13.1k|                            ends_with_unescaped_dot = 0;
  421|  82.4k|                        } else if i == 0 {
  422|  17.1k|                            if !(Self::is_possible_pn_chars_u(c) || c == ':' || c.is_ascii_digit())
  423|       |                            {
  424|  5.10k|                                return Some((0, Ok((Cow::Borrowed(""), false))));
  425|  12.0k|                            }
  426|  12.0k|                            if !self.unchecked {
  427|       |                                might_be_invalid_iri |=
  428|  12.0k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  429|  12.0k|                                        || c == ':';
  430|      0|                            }
  431|  12.0k|                            i += consumed;
  432|  65.3k|                        } else if Self::is_possible_pn_chars(c) || c == ':' {
  433|  50.1k|                            if !self.unchecked {
  434|       |                                might_be_invalid_iri |=
  435|  50.1k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  436|  50.1k|                                        || c == ':';
  437|      0|                            }
  438|  50.1k|                            i += consumed;
  439|  50.1k|                            ends_with_unescaped_dot = 0;
  440|  15.1k|                        } else if c == '.' {
  441|  12.1k|                            i += consumed;
  442|  12.1k|                            ends_with_unescaped_dot += 1;
  443|  12.1k|                        } else {
  444|  3.05k|                            let buffer = if let Some(mut buffer) = buffer {
  445|    828|                                buffer.push_str(
  446|    828|                                    match str_from_utf8(
  447|    828|                                        &data[position_that_is_already_in_buffer..i],
  448|    828|                                        position_that_is_already_in_buffer..i,
  449|    828|                                    ) {
  450|    828|                                        Ok(data) => data,
  451|      0|                                        Err(e) => return Some((i, Err(e))),
  452|       |                                    },
  453|       |                                );
  454|       |                                // We do not include the last dots
  455|    828|                                for _ in 0..ends_with_unescaped_dot {
  456|    572|                                    buffer.pop();
  457|    572|                                }
  458|    828|                                i -= ends_with_unescaped_dot;
  459|    828|                                Cow::Owned(buffer)
  460|       |                            } else {
  461|  2.23k|                                let mut data = match str_from_utf8(&data[..i], 0..i) {
  462|  2.23k|                                    Ok(data) => data,
  463|      0|                                    Err(e) => return Some((i, Err(e))),
  464|       |                                };
  465|       |                                // We do not include the last dots
  466|  2.23k|                                data = &data[..data.len() - ends_with_unescaped_dot];
  467|  2.23k|                                i -= ends_with_unescaped_dot;
  468|  2.23k|                                Cow::Borrowed(data)
  469|       |                            };
  470|  3.05k|                            return Some((i, Ok((buffer, might_be_invalid_iri))));
  471|       |                        }
  472|       |                    }
  473|  1.53k|                    Err(e) => return Some((e.location.end, Err(e))),
  474|       |                }
  475|  16.8k|            } else if is_ending {
  476|    630|                let buffer = if let Some(mut buffer) = buffer {
  477|       |                    // We do not include the last dot
  478|    602|                    while buffer.ends_with('.') {
  479|    326|                        buffer.pop();
  480|    326|                        i -= 1;
  481|    326|                    }
  482|    276|                    Cow::Owned(buffer)
  483|       |                } else {
  484|    354|                    let mut data = match str_from_utf8(&data[..i], 0..i) {
  485|    354|                        Ok(data) => data,
  486|      0|                        Err(e) => return Some((i, Err(e))),
  487|       |                    };
  488|       |                    // We do not include the last dot
  489|    736|                    while let Some(d) = data.strip_suffix('.') {
  490|    382|                        data = d;
  491|    382|                        i -= 1;
  492|    382|                    }
  493|    354|                    Cow::Borrowed(data)
  494|       |                };
  495|    630|                return Some((i, Ok((buffer, might_be_invalid_iri))));
  496|       |            } else {
  497|  16.2k|                return None;
  498|       |            }
  499|       |        }
  500|  28.9k|    }
_RNvMs_NtCsgfQ0H3lfwIZ_5oxttl5lexerNtB4_7N3Lexer16recognize_number:
  662|  28.8k|    fn recognize_number(data: &[u8]) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  663|  28.8k|        // [19]  INTEGER    ::=  [+-]? [0-9]+
  664|  28.8k|        // [20]  DECIMAL    ::=  [+-]? [0-9]* '.' [0-9]+
  665|  28.8k|        // [21]  DOUBLE     ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  666|  28.8k|        // [154s] EXPONENT  ::=  [eE] [+-]? [0-9]+
  667|  28.8k|        let mut i = 0;
  668|  28.8k|        let c = *data.first()?;
  669|  28.8k|        if matches!(c, b'+' | b'-') {
  670|  12.0k|            i += 1;
  671|  16.7k|        }
  672|       |        // We read the digits before .
  673|  28.8k|        let mut count_before: usize = 0;
  674|       |        loop {
  675|  64.3k|            let c = *data.get(i)?;
  676|  59.5k|            if c.is_ascii_digit() {
  677|  35.5k|                i += 1;
  678|  35.5k|                count_before += 1;
  679|  35.5k|            } else {
  680|  24.0k|                break;
  681|       |            }
  682|       |        }
  683|       |
  684|       |        // We read the digits after .
  685|       |        #[allow(clippy::if_then_some_else_none)]
  686|  24.0k|        let count_after = if *data.get(i)? == b'.' {
  687|  3.45k|            i += 1;
  688|  3.45k|
  689|  3.45k|            let mut count_after = 0;
  690|       |            loop {
  691|  13.8k|                let c = *data.get(i)?;
  692|  12.7k|                if c.is_ascii_digit() {
  693|  10.3k|                    i += 1;
  694|  10.3k|                    count_after += 1;
  695|  10.3k|                } else {
  696|  2.38k|                    break;
  697|  2.38k|                }
  698|  2.38k|            }
  699|  2.38k|            Some(count_after)
  700|       |        } else {
  701|  20.5k|            None
  702|       |        };
  703|       |
  704|       |        // End
  705|  22.9k|        let c = *data.get(i)?;
  706|  22.9k|        if matches!(c, b'e' | b'E') {
  707|  3.39k|            i += 1;
  708|       |
  709|  3.39k|            let c = *data.get(i)?;
  710|  2.62k|            if matches!(c, b'+' | b'-') {
  711|    503|                i += 1;
  712|  2.11k|            }
  713|       |
  714|  2.62k|            let mut found = false;
  715|       |            loop {
  716|  6.94k|                let c = *data.get(i)?;
  717|  5.27k|                if c.is_ascii_digit() {
  718|  4.32k|                    i += 1;
  719|  4.32k|                    found = true;
  720|  4.32k|                } else {
  721|    954|                    break;
  722|    954|                }
  723|    954|            }
  724|    954|            Some((
  725|    954|                i,
  726|    954|                if !found {
  727|    496|                    Err((0..i, "A double exponent cannot be empty").into())
  728|    458|                } else if count_before == 0 && count_after.unwrap_or(0) == 0 {
  729|    214|                    Err((0..i, "A double should not be empty").into())
  730|       |                } else {
  731|    244|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Double)
  732|       |                },
  733|       |            ))
  734|  19.5k|        } else if let Some(count_after) = count_after {
  735|  1.52k|            if count_after == 0 {
  736|       |                // We do not consume the '.' after all
  737|    848|                i -= 1;
  738|    848|                Some((
  739|    848|                    i,
  740|    848|                    if count_before == 0 {
  741|    298|                        Err((0..i, "An integer should not be empty").into())
  742|       |                    } else {
  743|    550|                        str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  744|       |                    },
  745|       |                ))
  746|       |            } else {
  747|    680|                Some((i, str_from_utf8(&data[..i], 0..i).map(N3Token::Decimal)))
  748|       |            }
  749|       |        } else {
  750|       |            Some((
  751|  18.0k|                i,
  752|  18.0k|                if count_before == 0 {
  753|  7.94k|                    Err((0..i, "An integer should not be empty").into())
  754|       |                } else {
  755|  10.0k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  756|       |                },
  757|       |            ))
  758|       |        }
  759|  28.8k|    }
_RNvMs_NtCsgfQ0H3lfwIZ_5oxttl5lexerNtB4_7N3Lexer18recognize_hex_char:
  796|  46.5k|    fn recognize_hex_char(
  797|  46.5k|        data: &[u8],
  798|  46.5k|        len: usize,
  799|  46.5k|        escape_char: char,
  800|  46.5k|        position: usize,
  801|  46.5k|    ) -> Result<Option<char>, TokenRecognizerError> {
  802|  46.5k|        if data.len() < len {
  803|  1.57k|            return Ok(None);
  804|  44.9k|        }
  805|  44.9k|        let val = str_from_utf8(&data[..len], position..position + len + 2)?;
  806|  44.4k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  807|       |            (
  808|       |                position..position + len + 2,
  809|       |                format!(
  810|       |                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  811|       |                ),
  812|       |            )
  813|  44.4k|        })?;
  814|  43.8k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  815|       |            (
  816|       |                position..position + len +2,
  817|       |                format!(
  818|       |                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  819|       |                ),
  820|       |            )
  821|  43.8k|        })?;
  822|  43.1k|        Ok(Some(c))
  823|  46.5k|    }
_RNvMs_NtCsgfQ0H3lfwIZ_5oxttl5lexerNtB4_7N3Lexer25is_possible_pn_chars_base:
  898|   678k|    fn is_possible_pn_chars_base(c: char) -> bool {
  899|   678k|        matches!(c,
  900|   414k|        'A'..='Z'
  901|   295k|        | 'a'..='z'
  902|  2.05k|        | '\u{00C0}'..='\u{00D6}'
  903|  1.96k|        | '\u{00D8}'..='\u{00F6}'
  904|  1.95k|        | '\u{00F8}'..='\u{02FF}'
  905|  1.65k|        | '\u{0370}'..='\u{037D}'
  906|  1.65k|        | '\u{037F}'..='\u{1FFF}'
  907|  1.32k|        | '\u{200C}'..='\u{200D}'
  908|  1.32k|        | '\u{2070}'..='\u{218F}'
  909|  1.32k|        | '\u{2C00}'..='\u{2FEF}'
  910|  1.32k|        | '\u{3001}'..='\u{D7FF}'
  911|    900|        | '\u{F900}'..='\u{FDCF}'
  912|    900|        | '\u{FDF0}'..='\u{FFFD}'
  913|    900|        | '\u{10000}'..='\u{EFFFF}')
  914|   678k|    }
_RNvMs_NtCsgfQ0H3lfwIZ_5oxttl5lexerNtB4_7N3Lexer26recognize_blank_node_label:
  502|  52.4k|    fn recognize_blank_node_label(
  503|  52.4k|        data: &[u8],
  504|  52.4k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  505|  52.4k|        // [141s]  BLANK_NODE_LABEL  ::=  '_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
  506|  52.4k|        let mut i = 2;
  507|       |        loop {
  508|   373k|            match Self::recognize_unicode_char(&data[i..], i)? {
  509|   345k|                Ok((c, consumed)) => {
  510|   345k|                    if (i == 2 && (Self::is_possible_pn_chars_u(c) || c.is_ascii_digit()))
  511|   297k|                        || (i > 2 && Self::is_possible_pn_chars(c))
  512|   313k|                    {
  513|   313k|                        // Ok
  514|   313k|                    } else if i > 2 && c == '.' {
  515|  8.78k|                        if data[i - 1] == b'.' {
  516|    596|                            i -= 1;
  517|    596|                            return Some((
  518|    596|                                i,
  519|    596|                                str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  520|    596|                            ));
  521|  8.18k|                        }
  522|  23.3k|                    } else if i == 0 {
  523|      0|                        return Some((
  524|      0|                            i,
  525|      0|                            Err((0..i, "A blank node ID should not be empty").into()),
  526|      0|                        ));
  527|  23.3k|                    } else if data[i - 1] == b'.' {
  528|  6.65k|                        i -= 1;
  529|  6.65k|                        return Some((
  530|  6.65k|                            i,
  531|  6.65k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  532|  6.65k|                        ));
  533|       |                    } else {
  534|  16.6k|                        return Some((
  535|  16.6k|                            i,
  536|  16.6k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  537|  16.6k|                        ));
  538|       |                    }
  539|   321k|                    i += consumed;
  540|       |                }
  541|    480|                Err(e) => return Some((e.location.end, Err(e))),
  542|       |            }
  543|       |        }
  544|  52.4k|    }
_RNvMs_NtCsgfQ0H3lfwIZ_5oxttl5lexerNtB4_7N3Lexer16recognize_string:
  586|  36.7k|    fn recognize_string(
  587|  36.7k|        data: &[u8],
  588|  36.7k|        delimiter: u8,
  589|  36.7k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  590|  36.7k|        // [22]  STRING_LITERAL_QUOTE         ::=  '"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
  591|  36.7k|        // [23]  STRING_LITERAL_SINGLE_QUOTE  ::=  "'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
  592|  36.7k|        let mut string = String::new();
  593|  36.7k|        let mut i = 1;
  594|       |        loop {
  595|  92.5k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  596|  80.2k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  597|  79.5k|                Ok(s) => string.push_str(s),
  598|    638|                Err(e) => return Some((end, Err(e))),
  599|       |            };
  600|  79.5k|            i += end;
  601|  79.5k|            match data[i] {
  602|  79.5k|                c if c == delimiter => {
  603|  15.4k|                    return Some((i + 1, Ok(N3Token::String(string))));
  604|       |                }
  605|       |                b'\\' => {
  606|  64.1k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  607|  63.4k|                    i += additional + 1;
  608|  63.4k|                    match c {
  609|  55.7k|                        Ok(c) => {
  610|  55.7k|                            string.push(c);
  611|  55.7k|                        }
  612|  7.74k|                        Err(e) => {
  613|       |                            // We read until the end of string char
  614|  7.74k|                            let end = memchr(delimiter, &data[i..])?;
  615|  1.21k|                            return Some((i + end + 1, Err(e)));
  616|       |                        }
  617|       |                    }
  618|       |                }
  619|      0|                _ => unreachable!(),
  620|       |            }
  621|       |        }
  622|  36.7k|    }
_RNvXs9_NtCsgfQ0H3lfwIZ_5oxttl5lexerNtB5_14N3LexerOptionsNtNtCs9nhK3FOW46N_4core7default7Default7defaultB7_:
   38|  11.4k|#[derive(Default)]
_RNvXs2_NtCsgfQ0H3lfwIZ_5oxttl5lexerNtB5_7N3TokenNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB7_:
   12|   144k|#[derive(Debug, PartialEq, Eq)]
_RNvNtCsgfQ0H3lfwIZ_5oxttl5lexer16string_from_utf8:
  967|  90.6k|fn string_from_utf8(data: Vec<u8>, range: Range<usize>) -> Result<String, TokenRecognizerError> {
  968|  90.6k|    String::from_utf8(data).map_err(|e| {
  969|       |        (
  970|       |            range.start + e.utf8_error().valid_up_to()
  971|       |                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  972|       |            format!("Invalid UTF-8: {e}"),
  973|       |        )
  974|       |            .into()
  975|  90.6k|    })
  976|  90.6k|}
_RNvMs_NtCsgfQ0H3lfwIZ_5oxttl5lexerNtB4_7N3Lexer22recognize_unicode_char:
  825|   839k|    fn recognize_unicode_char(
  826|   839k|        data: &[u8],
  827|   839k|        position: usize,
  828|   839k|    ) -> Option<Result<(char, usize), TokenRecognizerError>> {
  829|   839k|        let mut code_point: u32;
  830|   839k|        let bytes_needed: usize;
  831|   839k|        let mut lower_boundary = 0x80;
  832|   839k|        let mut upper_boundary = 0xBF;
  833|       |
  834|   839k|        let byte = *data.first()?;
  835|   786k|        match byte {
  836|   786k|            0x00..=0x7F => return Some(Ok((char::from(byte), 1))),
  837|  45.8k|            0xC2..=0xDF => {
  838|  12.3k|                bytes_needed = 1;
  839|  12.3k|                code_point = u32::from(byte) & 0x1F;
  840|  12.3k|            }
  841|  33.4k|            0xE0..=0xEF => {
  842|  7.75k|                if byte == 0xE0 {
  843|    967|                    lower_boundary = 0xA0;
  844|  6.78k|                }
  845|  7.75k|                if byte == 0xED {
  846|    751|                    upper_boundary = 0x9F;
  847|  7.00k|                }
  848|  7.75k|                bytes_needed = 2;
  849|  7.75k|                code_point = u32::from(byte) & 0xF;
  850|       |            }
  851|  25.7k|            0xF0..=0xF4 => {
  852|  20.5k|                if byte == 0xF0 {
  853|  4.57k|                    lower_boundary = 0x90;
  854|  16.0k|                }
  855|  20.5k|                if byte == 0xF4 {
  856|  14.4k|                    upper_boundary = 0x8F;
  857|  14.4k|                }
  858|  20.5k|                bytes_needed = 3;
  859|  20.5k|                code_point = u32::from(byte) & 0x7;
  860|       |            }
  861|       |            _ => {
  862|  31.4k|                return Some(Err((
  863|  31.4k|                    position..=position,
  864|  31.4k|                    "Invalid UTF-8 character encoding",
  865|  31.4k|                )
  866|  31.4k|                    .into()))
  867|       |            }
  868|       |        }
  869|       |
  870|  44.1k|        for i in 1..=bytes_needed {
  871|  44.1k|            let byte = *data.get(i)?;
  872|  38.9k|            if byte < lower_boundary || upper_boundary < byte {
  873|  32.0k|                return Some(Err((
  874|  32.0k|                    position..=position + i,
  875|  32.0k|                    "Invalid UTF-8 character encoding",
  876|  32.0k|                )
  877|  32.0k|                    .into()));
  878|  6.92k|            }
  879|  6.92k|            lower_boundary = 0x80;
  880|  6.92k|            upper_boundary = 0xBF;
  881|  6.92k|            code_point = (code_point << 6) | (u32::from(byte) & 0x3F);
  882|       |        }
  883|       |
  884|  3.49k|        Some(
  885|  3.49k|            char::from_u32(code_point)
  886|  3.49k|                .map(|c| (c, bytes_needed + 1))
  887|  3.49k|                .ok_or_else(|| {
  888|       |                    (
  889|       |                        position..=position + bytes_needed,
  890|       |                        format!("The codepoint {code_point:X} is not a valid unicode character"),
  891|       |                    )
  892|       |                        .into()
  893|  3.49k|                }),
  894|  3.49k|        )
  895|   839k|    }
_RNvMs_NtCsgfQ0H3lfwIZ_5oxttl5lexerNtB4_7N3Lexer43is_possible_pn_chars_base_but_not_valid_iri:
  928|  62.2k|    fn is_possible_pn_chars_base_but_not_valid_iri(c: char) -> bool {
  929|  62.2k|        matches!(c, '\u{FFF0}'..='\u{FFFD}')
  930|  62.2k|            || u32::from(c) % u32::from('\u{FFFE}') == 0
  931|  62.2k|            || u32::from(c) % u32::from('\u{FFFF}') == 0
  932|  62.2k|    }
_RNvMs_NtCsgfQ0H3lfwIZ_5oxttl5lexerNtB4_7N3Lexer14parse_lang_tag:
  571|  10.6k|    fn parse_lang_tag<'a>(
  572|  10.6k|        &self,
  573|  10.6k|        lang_tag: &'a [u8],
  574|  10.6k|        position: Range<usize>,
  575|  10.6k|    ) -> Result<N3Token<'a>, TokenRecognizerError> {
  576|  10.6k|        let lang_tag = str_from_utf8(lang_tag, position.clone())?;
  577|  10.6k|        Ok(N3Token::LangTag(if self.unchecked {
  578|     21|            lang_tag
  579|       |        } else {
  580|  10.6k|            LanguageTag::parse(lang_tag)
  581|  10.6k|                .map_err(|e| (position.clone(), e.to_string()))?
  582|  6.80k|                .into_inner()
  583|       |        }))
  584|  10.6k|    }
_RNvMs_NtCsgfQ0H3lfwIZ_5oxttl5lexerNtB4_7N3Lexer13recognize_iri:
  177|   247k|    fn recognize_iri(
  178|   247k|        &self,
  179|   247k|        data: &[u8],
  180|   247k|        options: &N3LexerOptions,
  181|   247k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  182|   247k|        // [18] IRIREF  ::=  '<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
  183|   247k|        let mut string = Vec::new();
  184|   247k|        let mut i = 1;
  185|       |        loop {
  186|   250k|            let end = memchr2(b'>', b'\\', &data[i..])?;
  187|  96.7k|            string.extend_from_slice(&data[i..i + end]);
  188|  96.7k|            i += end;
  189|  96.7k|            match data[i] {
  190|       |                b'>' => {
  191|       |                    #[allow(clippy::range_plus_one)]
  192|  90.6k|                    return Some((i + 1, self.parse_iri(string, 0..i + 1, options)));
  193|       |                }
  194|       |                b'\\' => {
  195|  6.11k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, false)?;
  196|  4.21k|                    i += additional + 1;
  197|  4.21k|                    match c {
  198|  2.84k|                        Ok(c) => {
  199|  2.84k|                            let mut buf = [0; 4];
  200|  2.84k|                            string.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  201|  2.84k|                        }
  202|  1.36k|                        Err(e) => return Some((i, Err(e))),
  203|       |                    }
  204|       |                }
  205|      0|                _ => unreachable!(),
  206|       |            }
  207|       |        }
  208|   247k|    }
_RNvMs_NtCsgfQ0H3lfwIZ_5oxttl5lexerNtB4_7N3Lexer16recognize_escape:
  761|  70.2k|    fn recognize_escape(
  762|  70.2k|        data: &[u8],
  763|  70.2k|        position: usize,
  764|  70.2k|        with_echar: bool,
  765|  70.2k|    ) -> Option<(usize, Result<char, TokenRecognizerError>)> {
  766|  70.2k|        // [26]   UCHAR  ::=  '\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
  767|  70.2k|        // [159s] ECHAR  ::=  '\' [tbnrf"'\]
  768|  70.2k|        match *data.get(1)? {
  769|  42.1k|            b'u' => match Self::recognize_hex_char(&data[2..], 4, 'u', position) {
  770|  40.9k|                Ok(c) => Some((5, Ok(c?))),
  771|  1.23k|                Err(e) => Some((5, Err(e))),
  772|       |            },
  773|  4.31k|            b'U' => match Self::recognize_hex_char(&data[2..], 8, 'u', position) {
  774|  3.78k|                Ok(c) => Some((9, Ok(c?))),
  775|    528|                Err(e) => Some((9, Err(e))),
  776|       |            },
  777|    484|            b't' if with_echar => Some((1, Ok('\t'))),
  778|  9.47k|            b'b' if with_echar => Some((1, Ok('\x08'))),
  779|  1.65k|            b'n' if with_echar => Some((1, Ok('\n'))),
  780|    734|            b'r' if with_echar => Some((1, Ok('\r'))),
  781|    528|            b'f' if with_echar => Some((1, Ok('\x0C'))),
  782|    844|            b'"' if with_echar => Some((1, Ok('"'))),
  783|    476|            b'\'' if with_echar => Some((1, Ok('\''))),
  784|  1.24k|            b'\\' if with_echar => Some((1, Ok('\\'))),
  785|  7.35k|            c => Some((
  786|  7.35k|                1,
  787|  7.35k|                Err((
  788|  7.35k|                    position..position + 2,
  789|  7.35k|                    format!("Unexpected escape character '\\{}'", char::from(c)),
  790|  7.35k|                )
  791|  7.35k|                    .into()),
  792|  7.35k|            )), // TODO: read until end of string
  793|       |        }
  794|  70.2k|    }
_RNvNtCsgfQ0H3lfwIZ_5oxttl5lexer13str_from_utf8:
  957|   225k|fn str_from_utf8(data: &[u8], range: Range<usize>) -> Result<&str, TokenRecognizerError> {
  958|   225k|    str::from_utf8(data).map_err(|e| {
  959|       |        (
  960|       |            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  961|       |            format!("Invalid UTF-8: {e}"),
  962|       |        )
  963|       |            .into()
  964|   225k|    })
  965|   225k|}
_RNvXNtCsgfQ0H3lfwIZ_5oxttl5lexerNtB2_7N3LexerNtNtNtB4_7toolkit5lexer15TokenRecognizer20recognize_next_token:
   55|   812k|    fn recognize_next_token<'a>(
   56|   812k|        &mut self,
   57|   812k|        data: &'a [u8],
   58|   812k|        is_ending: bool,
   59|   812k|        options: &N3LexerOptions,
   60|   812k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
   61|   812k|        match *data.first()? {
   62|   276k|            b'<' => match *data.get(1)? {
   63|  23.6k|                b'<' => Some((2, Ok(N3Token::Punctuation("<<")))),
   64|    676|                b'=' if self.mode == N3LexerMode::N3 => {
   65|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   66|      0|                        Some(if let Ok(result) = result {
   67|      0|                            (consumed, Ok(result))
   68|       |                        } else {
   69|      0|                            (2, Ok(N3Token::Punctuation("<=")))
   70|       |                        })
   71|      0|                    } else if is_ending {
   72|      0|                        Some((2, Ok(N3Token::Punctuation("<="))))
   73|       |                    } else {
   74|      0|                        None
   75|       |                    }
   76|       |                }
   77|    933|                b'-' if self.mode == N3LexerMode::N3 => {
   78|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   79|      0|                        Some(if let Ok(result) = result {
   80|      0|                            (consumed, Ok(result))
   81|       |                        } else {
   82|      0|                            (2, Ok(N3Token::Punctuation("<-")))
   83|       |                        })
   84|      0|                    } else if is_ending {
   85|      0|                        Some((2, Ok(N3Token::Punctuation("<-"))))
   86|       |                    } else {
   87|      0|                        None
   88|       |                    }
   89|       |                }
   90|   247k|                _ => self.recognize_iri(data, options),
   91|       |            },
   92|       |            b'>' => {
   93|  20.2k|                if *data.get(1)? == b'>' {
   94|  7.23k|                    Some((2, Ok(N3Token::Punctuation(">>"))))
   95|       |                } else {
   96|  10.9k|                    Some((1, Ok(N3Token::Punctuation(">"))))
   97|       |                }
   98|       |            }
   99|  64.0k|            b'_' => match data.get(1)? {
  100|  52.4k|                b':' => Self::recognize_blank_node_label(data),
  101|  8.94k|                c => Some((
  102|  8.94k|                    1,
  103|  8.94k|                    Err((0, format!("Unexpected character '{}'", char::from(*c))).into()),
  104|  8.94k|                )),
  105|       |            },
  106|       |            b'"' => {
  107|  36.7k|                if self.mode != N3LexerMode::NTriples
  108|      0|                    && *data.get(1)? == b'"'
  109|      0|                    && *data.get(2)? == b'"'
  110|       |                {
  111|      0|                    Self::recognize_long_string(data, b'"')
  112|       |                } else {
  113|  36.7k|                    Self::recognize_string(data, b'"')
  114|       |                }
  115|       |            }
  116|  1.12k|            b'\'' if self.mode != N3LexerMode::NTriples => {
  117|      0|                if *data.get(1)? == b'\'' && *data.get(2)? == b'\'' {
  118|      0|                    Self::recognize_long_string(data, b'\'')
  119|       |                } else {
  120|      0|                    Self::recognize_string(data, b'\'')
  121|       |                }
  122|       |            }
  123|  23.5k|            b'@' => self.recognize_lang_tag(data),
  124|  64.4k|            b'.' => match data.get(1) {
  125|  12.9k|                Some(b'0'..=b'9') => Self::recognize_number(data),
  126|  60.8k|                Some(_) => Some((1, Ok(N3Token::Punctuation(".")))),
  127|  2.19k|                None => is_ending.then_some((1, Ok(N3Token::Punctuation(".")))),
  128|       |            },
  129|       |            b'^' => {
  130|  8.03k|                if *data.get(1)? == b'^' {
  131|  3.73k|                    Some((2, Ok(N3Token::Punctuation("^^"))))
  132|       |                } else {
  133|  3.65k|                    Some((1, Ok(N3Token::Punctuation("^"))))
  134|       |                }
  135|       |            }
  136|  1.65k|            b'(' => Some((1, Ok(N3Token::Punctuation("(")))),
  137|  1.80k|            b')' => Some((1, Ok(N3Token::Punctuation(")")))),
  138|  2.11k|            b'[' => Some((1, Ok(N3Token::Punctuation("[")))),
  139|  1.72k|            b']' => Some((1, Ok(N3Token::Punctuation("]")))),
  140|       |            b'{' => {
  141|    966|                if *data.get(1)? == b'|' {
  142|    206|                    Some((2, Ok(N3Token::Punctuation("{|"))))
  143|       |                } else {
  144|    500|                    Some((1, Ok(N3Token::Punctuation("{"))))
  145|       |                }
  146|       |            }
  147|  4.09k|            b'}' => Some((1, Ok(N3Token::Punctuation("}")))),
  148|  3.99k|            b',' => Some((1, Ok(N3Token::Punctuation(",")))),
  149|  1.20k|            b';' => Some((1, Ok(N3Token::Punctuation(";")))),
  150|  1.60k|            b'!' => Some((1, Ok(N3Token::Punctuation("!")))),
  151|       |            b'|' => {
  152|  1.52k|                if *data.get(1)? == b'}' {
  153|    212|                    Some((2, Ok(N3Token::Punctuation("|}"))))
  154|       |                } else {
  155|  1.07k|                    Some((1, Ok(N3Token::Punctuation("|"))))
  156|       |                }
  157|       |            }
  158|       |            b'=' => {
  159|  3.09k|                if *data.get(1)? == b'>' {
  160|    370|                    Some((2, Ok(N3Token::Punctuation("=>"))))
  161|       |                } else {
  162|  2.21k|                    Some((1, Ok(N3Token::Punctuation("="))))
  163|       |                }
  164|       |            }
  165|   137k|            b'0'..=b'9' | b'+' | b'-' => Self::recognize_number(data),
  166|  6.19k|            b'?' => self.recognize_variable(data, is_ending),
  167|   204k|            _ => self.recognize_pname_or_keyword(data, is_ending),
  168|       |        }
  169|   812k|    }
_RNvMs_NtCsgfQ0H3lfwIZ_5oxttl5lexerNtB4_7N3Lexer9parse_iri:
  210|  90.6k|    fn parse_iri(
  211|  90.6k|        &self,
  212|  90.6k|        iri: Vec<u8>,
  213|  90.6k|        position: Range<usize>,
  214|  90.6k|        options: &N3LexerOptions,
  215|  90.6k|    ) -> Result<N3Token<'static>, TokenRecognizerError> {
  216|  90.6k|        let iri = string_from_utf8(iri, position.clone())?;
  217|       |        Ok(N3Token::IriRef(
  218|  88.0k|            if let Some(base_iri) = options.base_iri.as_ref() {
  219|      0|                if self.unchecked {
  220|      0|                    base_iri.resolve_unchecked(&iri)
  221|       |                } else {
  222|      0|                    base_iri.resolve(&iri)
  223|       |                }
  224|      0|                .map_err(|e| (position, e.to_string()))?
  225|      0|                .into_inner()
  226|  88.0k|            } else if self.unchecked {
  227|  1.64k|                iri
  228|       |            } else {
  229|  86.3k|                Iri::parse(iri)
  230|  86.3k|                    .map_err(|e| (position, e.to_string()))?
  231|  69.6k|                    .into_inner()
  232|       |            },
  233|       |        ))
  234|  90.6k|    }
_RNvMs_NtCsgfQ0H3lfwIZ_5oxttl5lexerNtB4_7N3Lexer18recognize_variable:
  327|  6.19k|    fn recognize_variable<'a>(
  328|  6.19k|        &self,
  329|  6.19k|        data: &'a [u8],
  330|  6.19k|        is_ending: bool,
  331|  6.19k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  332|       |        // [36]  QUICK_VAR_NAME  ::=  "?" PN_LOCAL
  333|  6.19k|        let (consumed, result) = self.recognize_optional_pn_local(&data[1..], is_ending)?;
  334|  3.53k|        Some((
  335|  3.53k|            consumed + 1,
  336|  3.53k|            result.and_then(|(name, _)| {
  337|       |                if name.is_empty() {
  338|       |                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  339|       |                } else {
  340|       |                    Ok(N3Token::Variable(name))
  341|       |                }
  342|  3.53k|            }),
  343|  3.53k|        ))
  344|  6.19k|    }
_RNvMs_NtCsgfQ0H3lfwIZ_5oxttl5lexerNtB4_7N3Lexer18recognize_lang_tag:
  546|  23.5k|    fn recognize_lang_tag<'a>(
  547|  23.5k|        &self,
  548|  23.5k|        data: &'a [u8],
  549|  23.5k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  550|  23.5k|        // [144s]  LANGTAG  ::=  '@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
  551|  23.5k|        let mut is_last_block_empty = true;
  552|   172k|        for (i, c) in data[1..].iter().enumerate() {
  553|   172k|            if c.is_ascii_alphabetic() {
  554|   137k|                is_last_block_empty = false;
  555|   137k|            } else if i == 0 {
  556|  5.54k|                return Some((
  557|  5.54k|                    1,
  558|  5.54k|                    Err((1..2, "A language code should always start with a letter").into()),
  559|  5.54k|                ));
  560|  28.6k|            } else if is_last_block_empty {
  561|    772|                return Some((i, self.parse_lang_tag(&data[1..i], 1..i - 1)));
  562|  27.9k|            } else if *c == b'-' {
  563|  18.0k|                is_last_block_empty = true;
  564|  18.0k|            } else {
  565|  9.89k|                return Some((i + 1, self.parse_lang_tag(&data[1..=i], 1..i)));
  566|       |            }
  567|       |        }
  568|  7.34k|        None
  569|  23.5k|    }
_RNvMs_NtCsgfQ0H3lfwIZ_5oxttl5lexerNtB4_7N3Lexer22is_possible_pn_chars_u:
  917|   544k|    pub(super) fn is_possible_pn_chars_u(c: char) -> bool {
  918|   544k|        Self::is_possible_pn_chars_base(c) || c == '_'
  919|   544k|    }
_RNvXs8_NtCsgfQ0H3lfwIZ_5oxttl5lexerNtB5_11N3LexerModeNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB7_:
   31|  39.5k|#[derive(Eq, PartialEq)]
_RNvMs_NtCsgfQ0H3lfwIZ_5oxttl5lexerNtB4_7N3Lexer20is_possible_pn_chars:
  922|   476k|    pub(crate) fn is_possible_pn_chars(c: char) -> bool {
  923|   476k|        Self::is_possible_pn_chars_u(c)
  924|   170k|            || matches!(c,
  925|  96.4k|        '-' | '0'..='9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
  926|   476k|    }
_RNCNvNtCsgfQ0H3lfwIZ_5oxttl5lexer13str_from_utf80B5_:
  958|  1.12k|    str::from_utf8(data).map_err(|e| {
  959|  1.12k|        (
  960|  1.12k|            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  961|  1.12k|            format!("Invalid UTF-8: {e}"),
  962|  1.12k|        )
  963|  1.12k|            .into()
  964|  1.12k|    })
_RNCNvMs_NtCsgfQ0H3lfwIZ_5oxttl5lexerNtB6_7N3Lexer18recognize_variable0B8_:
  336|  3.05k|            result.and_then(|(name, _)| {
  337|  3.05k|                if name.is_empty() {
  338|  2.04k|                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  339|       |                } else {
  340|  1.00k|                    Ok(N3Token::Variable(name))
  341|       |                }
  342|  3.05k|            }),
_RNCNvMs_NtCsgfQ0H3lfwIZ_5oxttl5lexerNtB6_7N3Lexer22recognize_unicode_char0B8_:
  886|  3.49k|                .map(|c| (c, bytes_needed + 1))
_RNCNvMs_NtCsgfQ0H3lfwIZ_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_chars_0B8_:
  814|    706|        let c = char::from_u32(codepoint).ok_or_else(|| {
  815|    706|            (
  816|    706|                position..position + len +2,
  817|    706|                format!(
  818|    706|                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  819|    706|                ),
  820|    706|            )
  821|    706|        })?;
_RNCNvMs_NtCsgfQ0H3lfwIZ_5oxttl5lexerNtB6_7N3Lexer14parse_lang_tag0B8_:
  581|  3.83k|                .map_err(|e| (position.clone(), e.to_string()))?
_RNCNvMs_NtCsgfQ0H3lfwIZ_5oxttl5lexerNtB6_7N3Lexer9parse_iris_0B8_:
  230|  16.7k|                    .map_err(|e| (position, e.to_string()))?
_RNCNvNtCsgfQ0H3lfwIZ_5oxttl5lexer16string_from_utf80B5_:
  968|  2.59k|    String::from_utf8(data).map_err(|e| {
  969|  2.59k|        (
  970|  2.59k|            range.start + e.utf8_error().valid_up_to()
  971|  2.59k|                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  972|  2.59k|            format!("Invalid UTF-8: {e}"),
  973|  2.59k|        )
  974|  2.59k|            .into()
  975|  2.59k|    })
_RNCNvMs_NtCsgfQ0H3lfwIZ_5oxttl5lexerNtB6_7N3Lexer26recognize_pname_or_keyword0B8_:
  319|  5.73k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  320|  5.73k|                prefix: pn_prefix,
  321|  5.73k|                local,
  322|  5.73k|                might_be_invalid_iri,
  323|  5.73k|            }),
_RNCNvMs_NtCsgfQ0H3lfwIZ_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_char0B8_:
  806|    576|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  807|    576|            (
  808|    576|                position..position + len + 2,
  809|    576|                format!(
  810|    576|                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  811|    576|                ),
  812|    576|            )
  813|    576|        })?;

_RNvMs_NtCsgfQ0H3lfwIZ_5oxttl12line_formatsNtB4_16NQuadsRecognizer10new_parser:
  264|  11.4k|    pub fn new_parser(
  265|  11.4k|        with_graph_name: bool,
  266|  11.4k|        #[cfg(feature = "rdf-star")] with_quoted_triples: bool,
  267|  11.4k|        unchecked: bool,
  268|  11.4k|    ) -> Parser<Self> {
  269|  11.4k|        Parser::new(
  270|  11.4k|            Lexer::new(
  271|  11.4k|                N3Lexer::new(N3LexerMode::NTriples, unchecked),
  272|  11.4k|                MIN_BUFFER_SIZE,
  273|  11.4k|                MAX_BUFFER_SIZE,
  274|  11.4k|                true,
  275|  11.4k|                Some(b"#"),
  276|  11.4k|            ),
  277|  11.4k|            Self {
  278|  11.4k|                stack: vec![NQuadsState::ExpectSubject],
  279|  11.4k|                subjects: Vec::new(),
  280|  11.4k|                predicates: Vec::new(),
  281|  11.4k|                objects: Vec::new(),
  282|  11.4k|            },
  283|  11.4k|            NQuadsRecognizerContext {
  284|  11.4k|                with_graph_name,
  285|  11.4k|                #[cfg(feature = "rdf-star")]
  286|  11.4k|                with_quoted_triples,
  287|  11.4k|                lexer_options: N3LexerOptions::default(),
  288|  11.4k|            },
  289|  11.4k|        )
  290|  11.4k|    }
_RNvXNtCsgfQ0H3lfwIZ_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer20error_recovery_state:
   46|   204k|    fn error_recovery_state(mut self) -> Self {
   47|   204k|        self.stack.clear();
   48|   204k|        self.subjects.clear();
   49|   204k|        self.predicates.clear();
   50|   204k|        self.objects.clear();
   51|   204k|        self
   52|   204k|    }
_RNvXNtCsgfQ0H3lfwIZ_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer13recognize_end:
  236|  11.4k|    fn recognize_end(
  237|  11.4k|        mut self,
  238|  11.4k|        _context: &mut NQuadsRecognizerContext,
  239|  11.4k|        results: &mut Vec<Quad>,
  240|  11.4k|        errors: &mut Vec<RuleRecognizerError>,
  241|  11.4k|    ) {
  242|  11.4k|        match &*self.stack {
  243|  11.4k|            [NQuadsState::ExpectSubject] | [] => (),
  244|     18|            [NQuadsState::ExpectDot] => errors.push("Triples should be followed by a dot".into()),
  245|       |            [NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple] => {
  246|    226|                self.emit_quad(results, GraphName::DefaultGraph);
  247|    226|                errors.push("Triples should be followed by a dot".into())
  248|       |            }
  249|    104|            [NQuadsState::ExpectLiteralAnnotationOrGraphNameOrDot { value }] => {
  250|    104|                self.objects.push(Literal::new_simple_literal(value).into());
  251|    104|                self.emit_quad(results, GraphName::DefaultGraph);
  252|    104|                errors.push("Triples should be followed by a dot".into())
  253|       |            }
  254|     98|            _ => errors.push("Unexpected end".into()), // TODO
  255|       |        }
  256|  11.4k|    }
_RNvXNtCsgfQ0H3lfwIZ_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer14recognize_next:
   54|   315k|    fn recognize_next(
   55|   315k|        mut self,
   56|   315k|        token: N3Token<'_>,
   57|   315k|        context: &mut NQuadsRecognizerContext,
   58|   315k|        results: &mut Vec<Quad>,
   59|   315k|        errors: &mut Vec<RuleRecognizerError>,
   60|   315k|    ) -> Self {
   61|   315k|        if let Some(state) = self.stack.pop() {
   62|   175k|            match state {
   63|  7.43k|                NQuadsState::ExpectSubject => match token {
   64|  24.9k|                    N3Token::IriRef(s) => {
   65|  24.9k|                        self.subjects
   66|  24.9k|                            .push(NamedNode::new_unchecked(s).into());
   67|  24.9k|                        self.stack.push(NQuadsState::ExpectPredicate);
   68|  24.9k|                        self
   69|       |                    }
   70|  4.75k|                    N3Token::BlankNodeLabel(s) => {
   71|  4.75k|                        self.subjects.push(BlankNode::new_unchecked(s).into());
   72|  4.75k|                        self.stack.push(NQuadsState::ExpectPredicate);
   73|  4.75k|                        self
   74|       |                    }
   75|       |                    #[cfg(feature = "rdf-star")]
   76|  26.6k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
   77|  7.43k|                        self.stack.push(NQuadsState::AfterQuotedSubject);
   78|  7.43k|                        self.stack.push(NQuadsState::ExpectSubject);
   79|  7.43k|                        self
   80|       |                    }
   81|  23.6k|                    _ => self.error(
   82|  23.6k|                        errors,
   83|  23.6k|                        "The subject of a triple should be an IRI or a blank node, TOKEN found",
   84|  23.6k|                    ),
   85|       |                },
   86|  31.1k|                NQuadsState::ExpectPredicate => match token {
   87|  28.8k|                    N3Token::IriRef(p) => {
   88|  28.8k|                        self.predicates
   89|  28.8k|                            .push(NamedNode::new_unchecked(p));
   90|  28.8k|                        self.stack.push(NQuadsState::ExpectedObject);
   91|  28.8k|                        self
   92|       |                    }
   93|  2.27k|                    _ => self.error(
   94|  2.27k|                        errors,
   95|  2.27k|                        "The predicate of a triple should be an IRI, TOKEN found",
   96|  2.27k|                    ),
   97|       |                },
   98|  1.89k|                NQuadsState::ExpectedObject => match token {
   99|  10.1k|                    N3Token::IriRef(o) => {
  100|  10.1k|                        self.objects
  101|  10.1k|                            .push(NamedNode::new_unchecked(o).into());
  102|  10.1k|                        self.stack
  103|  10.1k|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  104|  10.1k|                        self
  105|       |                    }
  106|  10.5k|                    N3Token::BlankNodeLabel(o) => {
  107|  10.5k|                        self.objects.push(BlankNode::new_unchecked(o).into());
  108|  10.5k|                        self.stack
  109|  10.5k|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  110|  10.5k|                        self
  111|       |                    }
  112|  5.39k|                    N3Token::String(value) => {
  113|  5.39k|                        self.stack
  114|  5.39k|                            .push(NQuadsState::ExpectLiteralAnnotationOrGraphNameOrDot { value });
  115|  5.39k|                        self
  116|       |                    }
  117|       |                    #[cfg(feature = "rdf-star")]
  118|  2.34k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  119|  1.89k|                        self.stack.push(NQuadsState::AfterQuotedObject);
  120|  1.89k|                        self.stack.push(NQuadsState::ExpectSubject);
  121|  1.89k|                        self
  122|       |                    }
  123|    722|                    _ => self.error(
  124|    722|                        errors,
  125|    722|                        "The object of a triple should be an IRI, a blank node or a literal, TOKEN found",
  126|    722|                    ),
  127|       |                },
  128|  5.14k|                NQuadsState::ExpectLiteralAnnotationOrGraphNameOrDot { value } => match token {
  129|  1.71k|                    N3Token::LangTag(lang_tag) => {
  130|  1.71k|                        self.objects.push(
  131|  1.71k|                            Literal::new_language_tagged_literal_unchecked(
  132|  1.71k|                                value,
  133|  1.71k|                                lang_tag.to_ascii_lowercase(),
  134|  1.71k|                            )
  135|  1.71k|                            .into(),
  136|  1.71k|                        );
  137|  1.71k|                        self.stack
  138|  1.71k|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  139|  1.71k|                        self
  140|       |                    }
  141|  2.64k|                    N3Token::Punctuation("^^") => {
  142|  1.19k|                        self.stack
  143|  1.19k|                            .push(NQuadsState::ExpectLiteralDatatype { value });
  144|  1.19k|                        self
  145|       |                    }
  146|       |                    _ => {
  147|  2.23k|                        self.objects.push(Literal::new_simple_literal(value).into());
  148|  2.23k|                        self.stack
  149|  2.23k|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  150|  2.23k|                        self.recognize_next(token, context, results, errors)
  151|       |                    }
  152|       |                },
  153|  1.06k|                NQuadsState::ExpectLiteralDatatype { value } => match token {
  154|    774|                    N3Token::IriRef(d) => {
  155|    774|                        self.objects.push(
  156|    774|                            Literal::new_typed_literal(
  157|    774|                                value,
  158|    774|                                NamedNode::new_unchecked(d)
  159|    774|                            )
  160|    774|                            .into(),
  161|    774|                        );
  162|    774|                        self.stack
  163|    774|                            .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  164|    774|                        self
  165|       |                    }
  166|    286|                    _ => self.error(errors, "A literal datatype must be an IRI, found TOKEN"),
  167|       |                },
  168|       |                NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple => {
  169|  25.0k|                    if self.stack.is_empty() {
  170|  7.96k|                        match token {
  171|  2.49k|                            N3Token::IriRef(g) if context.with_graph_name => {
  172|  2.49k|                                self.emit_quad(
  173|  2.49k|                                    results,
  174|  2.49k|                                    NamedNode::new_unchecked(g).into(),
  175|  2.49k|                                );
  176|  2.49k|                                self.stack.push(NQuadsState::ExpectDot);
  177|  2.49k|                                self
  178|       |                            }
  179|  5.47k|                            N3Token::BlankNodeLabel(g) if context.with_graph_name => {
  180|  5.47k|                                self.emit_quad(results, BlankNode::new_unchecked(g).into());
  181|  5.47k|                                self.stack.push(NQuadsState::ExpectDot);
  182|  5.47k|                                self
  183|       |                            }
  184|       |                            _ => {
  185|  13.2k|                                self.emit_quad(results, GraphName::DefaultGraph);
  186|  13.2k|                                self.stack.push(NQuadsState::ExpectDot);
  187|  13.2k|                                self.recognize_next(token, context, results, errors)
  188|       |                            }
  189|       |                        }
  190|  3.88k|                    } else if token == N3Token::Punctuation(">>") {
  191|  3.69k|                        self
  192|       |                    } else {
  193|    182|                        self.error(errors, "Expecting the end of a quoted triple '>>'")
  194|       |                    }
  195|       |                }
  196|  19.9k|                NQuadsState::ExpectDot => if let N3Token::Punctuation(".") = token {
  197|  13.0k|                    self.stack.push(NQuadsState::ExpectSubject);
  198|  13.0k|                    self
  199|       |                } else {
  200|  6.89k|                    errors.push("Quads should be followed by a dot".into());
  201|  6.89k|                    self.stack.push(NQuadsState::ExpectSubject);
  202|  6.89k|                    self.recognize_next(token, context, results, errors)
  203|       |                },
  204|       |                #[cfg(feature = "rdf-star")]
  205|       |                NQuadsState::AfterQuotedSubject => {
  206|  2.66k|                    let triple = Triple {
  207|  2.66k|                        subject: self.subjects.pop().unwrap(),
  208|  2.66k|                        predicate: self.predicates.pop().unwrap(),
  209|  2.66k|                        object: self.objects.pop().unwrap(),
  210|  2.66k|                    };
  211|  2.66k|                    self.subjects.push(triple.into());
  212|  2.66k|                    self.stack.push(NQuadsState::ExpectPredicate);
  213|  2.66k|                    self.recognize_next(token,context,  results, errors)
  214|       |                }
  215|       |                #[cfg(feature = "rdf-star")]
  216|       |                NQuadsState::AfterQuotedObject => {
  217|  1.01k|                    let triple = Triple {
  218|  1.01k|                        subject: self.subjects.pop().unwrap(),
  219|  1.01k|                        predicate: self.predicates.pop().unwrap(),
  220|  1.01k|                        object: self.objects.pop().unwrap(),
  221|  1.01k|                    };
  222|  1.01k|                    self.objects.push(triple.into());
  223|  1.01k|                    self.stack
  224|  1.01k|                        .push(NQuadsState::ExpectPossibleGraphOrEndOfQuotedTriple);
  225|  1.01k|                    self.recognize_next(token, context, results, errors)
  226|       |                }
  227|       |            }
  228|   140k|        } else if token == N3Token::Punctuation(".") {
  229|  34.3k|            self.stack.push(NQuadsState::ExpectSubject);
  230|  34.3k|            self
  231|       |        } else {
  232|   106k|            self
  233|       |        }
  234|   315k|    }
_RNvXNtCsgfQ0H3lfwIZ_5oxttl12line_formatsNtB2_16NQuadsRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer13lexer_options:
  258|   817k|    fn lexer_options(context: &NQuadsRecognizerContext) -> &N3LexerOptions {
  259|   817k|        &context.lexer_options
  260|   817k|    }
_RNvMs_NtCsgfQ0H3lfwIZ_5oxttl12line_formatsNtB4_16NQuadsRecognizer9emit_quad:
  306|  21.5k|    fn emit_quad(&mut self, results: &mut Vec<Quad>, graph_name: GraphName) {
  307|  21.5k|        results.push(Quad {
  308|  21.5k|            subject: self.subjects.pop().unwrap(),
  309|  21.5k|            predicate: self.predicates.pop().unwrap(),
  310|  21.5k|            object: self.objects.pop().unwrap(),
  311|  21.5k|            graph_name,
  312|  21.5k|        })
  313|  21.5k|    }
_RINvMs_NtCsgfQ0H3lfwIZ_5oxttl12line_formatsNtB5_16NQuadsRecognizer5errorReEB7_:
  293|  27.0k|    fn error(
  294|  27.0k|        mut self,
  295|  27.0k|        errors: &mut Vec<RuleRecognizerError>,
  296|  27.0k|        msg: impl Into<RuleRecognizerError>,
  297|  27.0k|    ) -> Self {
  298|  27.0k|        errors.push(msg.into());
  299|  27.0k|        self.stack.clear();
  300|  27.0k|        self.subjects.clear();
  301|  27.0k|        self.predicates.clear();
  302|  27.0k|        self.objects.clear();
  303|  27.0k|        self
  304|  27.0k|    }

_RNvMNtCsgfQ0H3lfwIZ_5oxttl6nquadsNtB2_12NQuadsParser19with_quoted_triplesCsjN1WeLjmkFM_6nquads:
   67|  11.4k|    pub fn with_quoted_triples(mut self) -> Self {
   68|  11.4k|        self.with_quoted_triples = true;
   69|  11.4k|        self
   70|  11.4k|    }
_RNvMNtCsgfQ0H3lfwIZ_5oxttl6nquadsNtB2_12NQuadsParser9uncheckedCsjN1WeLjmkFM_6nquads:
   59|    142|    pub fn unchecked(mut self) -> Self {
   60|    142|        self.unchecked = true;
   61|    142|        self
   62|    142|    }
_RNvXs4_NtCsgfQ0H3lfwIZ_5oxttl6nquadsNtB5_12NQuadsParserNtNtCs9nhK3FOW46N_4core7default7Default7defaultCsjN1WeLjmkFM_6nquads:
   38|  11.4k|#[derive(Default)]
_RNvMs1_NtCsgfQ0H3lfwIZ_5oxttl6nquadsNtB5_16NQuadsSerializer3newCsjN1WeLjmkFM_6nquads:
  359|  3.75k|    pub fn new() -> Self {
  360|  3.75k|        Self
  361|  3.75k|    }
_RNvMNtCsgfQ0H3lfwIZ_5oxttl6nquadsNtB2_12NQuadsParser3newCsjN1WeLjmkFM_6nquads:
   49|  11.4k|    pub fn new() -> Self {
   50|  11.4k|        Self::default()
   51|  11.4k|    }
_RNvMs2_NtCsgfQ0H3lfwIZ_5oxttl6nquadsINtB5_19ToWriteNQuadsWriterINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE6finishCsjN1WeLjmkFM_6nquads:
  481|  3.75k|    pub fn finish(self) -> W {
  482|  3.75k|        self.write
  483|  3.75k|    }
_RNvXs_NtCsgfQ0H3lfwIZ_5oxttl6nquadsINtB4_20FromReadNQuadsReaderRShENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCsjN1WeLjmkFM_6nquads:
  218|  10.7k|    fn next(&mut self) -> Option<Self::Item> {
  219|  10.7k|        self.inner.next()
  220|  10.7k|    }
_RINvMNtCsgfQ0H3lfwIZ_5oxttl6nquadsNtB3_12NQuadsParser10parse_readRShECsjN1WeLjmkFM_6nquads:
   95|  3.75k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadNQuadsReader<R> {
   96|  3.75k|        FromReadNQuadsReader {
   97|  3.75k|            inner: self.parse().parser.parse_read(read),
   98|  3.75k|        }
   99|  3.75k|    }
_RINvMs2_NtCsgfQ0H3lfwIZ_5oxttl6nquadsINtB6_19ToWriteNQuadsWriterINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE10write_quadRNtNtCsgtGDRi1noi_5oxrdf6triple4QuadECsjN1WeLjmkFM_6nquads:
  476|  6.94k|    pub fn write_quad<'a>(&mut self, q: impl Into<QuadRef<'a>>) -> io::Result<()> {
  477|  6.94k|        self.writer.write_quad(q, &mut self.write)
  478|  6.94k|    }
_RINvMs3_NtCsgfQ0H3lfwIZ_5oxttl6nquadsNtB6_20LowLevelNQuadsWriter10write_quadRNtNtCsgtGDRi1noi_5oxrdf6triple4QuadQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEECsjN1WeLjmkFM_6nquads:
  557|  6.94k|    pub fn write_quad<'a>(
  558|  6.94k|        &mut self,
  559|  6.94k|        q: impl Into<QuadRef<'a>>,
  560|  6.94k|        mut write: impl Write,
  561|  6.94k|    ) -> io::Result<()> {
  562|  6.94k|        writeln!(write, "{} .", q.into())
  563|  6.94k|    }
_RINvMs1_NtCsgfQ0H3lfwIZ_5oxttl6nquadsNtB6_16NQuadsSerializer18serialize_to_writeINtNtCsjOdcKtOMjJI_5alloc3vec3VechEECsjN1WeLjmkFM_6nquads:
  382|  3.75k|    pub fn serialize_to_write<W: Write>(self, write: W) -> ToWriteNQuadsWriter<W> {
  383|  3.75k|        ToWriteNQuadsWriter {
  384|  3.75k|            write,
  385|  3.75k|            writer: self.serialize(),
  386|  3.75k|        }
  387|  3.75k|    }
_RNvMs0_NtCsgfQ0H3lfwIZ_5oxttl6nquadsNtB5_20LowLevelNQuadsReader9read_next:
  326|   556k|    pub fn read_next(&mut self) -> Option<Result<Quad, TurtleSyntaxError>> {
  327|   556k|        self.parser.read_next()
  328|   556k|    }
_RNvMs1_NtCsgfQ0H3lfwIZ_5oxttl6nquadsNtB5_16NQuadsSerializer9serialize:
  444|  3.75k|    pub fn serialize(self) -> LowLevelNQuadsWriter {
  445|  3.75k|        LowLevelNQuadsWriter
  446|  3.75k|    }
_RNvMNtCsgfQ0H3lfwIZ_5oxttl6nquadsNtB2_12NQuadsParser5parse:
  175|  11.4k|    pub fn parse(self) -> LowLevelNQuadsReader {
  176|  11.4k|        LowLevelNQuadsReader {
  177|  11.4k|            parser: NQuadsRecognizer::new_parser(
  178|  11.4k|                true,
  179|  11.4k|                #[cfg(feature = "rdf-star")]
  180|  11.4k|                self.with_quoted_triples,
  181|  11.4k|                self.unchecked,
  182|  11.4k|            ),
  183|  11.4k|        }
  184|  11.4k|    }
_RNvMs0_NtCsgfQ0H3lfwIZ_5oxttl6nquadsNtB5_20LowLevelNQuadsReader17extend_from_slice:
  306|   295k|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  307|   295k|        self.parser.extend_from_slice(other)
  308|   295k|    }
_RNvMs0_NtCsgfQ0H3lfwIZ_5oxttl6nquadsNtB5_20LowLevelNQuadsReader3end:
  313|  7.65k|    pub fn end(&mut self) {
  314|  7.65k|        self.parser.end()
  315|  7.65k|    }
_RNvMs0_NtCsgfQ0H3lfwIZ_5oxttl6nquadsNtB5_20LowLevelNQuadsReader6is_end:
  318|  7.65k|    pub fn is_end(&self) -> bool {
  319|  7.65k|        self.parser.is_end()
  320|  7.65k|    }

_RNvXs_NtNtCsgfQ0H3lfwIZ_5oxttl7toolkit5errorNtB4_17TurtleSyntaxErrorNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsjN1WeLjmkFM_6nquads:
   37|   239k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   38|   239k|        if self.location.start.offset + 1 >= self.location.end.offset {
   39|   172k|            write!(
   40|   172k|                f,
   41|   172k|                "Parser error at line {} column {}: {}",
   42|   172k|                self.location.start.line + 1,
   43|   172k|                self.location.start.column + 1,
   44|   172k|                self.message
   45|   172k|            )
   46|  66.4k|        } else if self.location.start.line == self.location.end.line {
   47|  65.4k|            write!(
   48|  65.4k|                f,
   49|  65.4k|                "Parser error between at line {} between columns {} and column {}: {}",
   50|  65.4k|                self.location.start.line + 1,
   51|  65.4k|                self.location.start.column + 1,
   52|  65.4k|                self.location.end.column + 1,
   53|  65.4k|                self.message
   54|  65.4k|            )
   55|       |        } else {
   56|  1.05k|            write!(
   57|  1.05k|                f,
   58|  1.05k|                "Parser error between line {} column {} and line {} column {}: {}",
   59|  1.05k|                self.location.start.line + 1,
   60|  1.05k|                self.location.start.column + 1,
   61|  1.05k|                self.location.end.line + 1,
   62|  1.05k|                self.location.end.column + 1,
   63|  1.05k|                self.message
   64|  1.05k|            )
   65|       |        }
   66|   239k|    }

_RINvMs1_NtNtCsgfQ0H3lfwIZ_5oxttl7toolkit5lexerINtB6_5LexerNtNtBa_5lexer7N3LexerE16extend_from_readRShECsjN1WeLjmkFM_6nquads:
  113|  8.31k|    pub fn extend_from_read(&mut self, read: &mut impl Read) -> io::Result<()> {
  114|  8.31k|        self.shrink_data();
  115|  8.31k|        if self.data.len() == self.max_buffer_size {
  116|      0|            return Err(io::Error::new(
  117|      0|                io::ErrorKind::OutOfMemory,
  118|      0|                format!(
  119|      0|                    "Reached the buffer maximal size of {}",
  120|      0|                    self.max_buffer_size
  121|      0|                ),
  122|      0|            ));
  123|  8.31k|        }
  124|  8.31k|        let min_end = min(self.data.len() + self.min_buffer_size, self.max_buffer_size);
  125|  8.31k|        let new_start = self.data.len();
  126|  8.31k|        self.data.resize(min_end, 0);
  127|  8.31k|        if self.data.len() < self.data.capacity() {
  128|     44|            // We keep extending to have as much space as available without reallocation
  129|     44|            self.data.resize(self.data.capacity(), 0);
  130|  8.27k|        }
  131|  8.31k|        let read = read.read(&mut self.data[new_start..])?;
  132|  8.31k|        self.data.truncate(new_start + read);
  133|  8.31k|        self.is_ending = read == 0;
  134|  8.31k|        Ok(())
  135|  8.31k|    }
_RNvMs1_NtNtCsgfQ0H3lfwIZ_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3newB9_:
   73|  11.4k|    pub fn new(
   74|  11.4k|        parser: R,
   75|  11.4k|        min_buffer_size: usize,
   76|  11.4k|        max_buffer_size: usize,
   77|  11.4k|        is_line_jump_whitespace: bool,
   78|  11.4k|        line_comment_start: Option<&'static [u8]>,
   79|  11.4k|    ) -> Self {
   80|  11.4k|        Self {
   81|  11.4k|            parser,
   82|  11.4k|            data: Vec::new(),
   83|  11.4k|            position: Position {
   84|  11.4k|                line_start_buffer_offset: 0,
   85|  11.4k|                buffer_offset: 0,
   86|  11.4k|                global_offset: 0,
   87|  11.4k|                global_line: 0,
   88|  11.4k|            },
   89|  11.4k|            previous_position: Position {
   90|  11.4k|                line_start_buffer_offset: 0,
   91|  11.4k|                buffer_offset: 0,
   92|  11.4k|                global_offset: 0,
   93|  11.4k|                global_line: 0,
   94|  11.4k|            },
   95|  11.4k|            is_ending: false,
   96|  11.4k|            min_buffer_size,
   97|  11.4k|            max_buffer_size,
   98|  11.4k|            is_line_jump_whitespace,
   99|  11.4k|            line_comment_start,
  100|  11.4k|        }
  101|  11.4k|    }
_RNvMs1_NtNtCsgfQ0H3lfwIZ_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE33location_from_buffer_offset_rangeB9_:
  236|   202k|    pub fn location_from_buffer_offset_range(
  237|   202k|        &self,
  238|   202k|        offset_range: Range<usize>,
  239|   202k|    ) -> Range<TextPosition> {
  240|   202k|        let start_offset = self.previous_position.buffer_offset + offset_range.start;
  241|   202k|        let (start_extra_line_jumps, start_line_start) =
  242|   202k|            Self::find_number_of_line_jumps_and_start_of_last_line(
  243|   202k|                &self.data[self.previous_position.buffer_offset..start_offset],
  244|   202k|            );
  245|   202k|        let start_line_start = if start_extra_line_jumps > 0 {
  246|    310|            start_line_start + self.previous_position.buffer_offset
  247|       |        } else {
  248|   202k|            self.previous_position.line_start_buffer_offset
  249|       |        };
  250|   202k|        let end_offset = self.previous_position.buffer_offset + offset_range.end;
  251|   202k|        let (end_extra_line_jumps, end_line_start) =
  252|   202k|            Self::find_number_of_line_jumps_and_start_of_last_line(
  253|   202k|                &self.data[self.previous_position.buffer_offset..end_offset],
  254|   202k|            );
  255|   202k|        let end_line_start = if end_extra_line_jumps > 0 {
  256|  1.30k|            end_line_start + self.previous_position.buffer_offset
  257|       |        } else {
  258|   201k|            self.previous_position.line_start_buffer_offset
  259|       |        };
  260|   202k|        TextPosition {
  261|   202k|            line: self.previous_position.global_line + start_extra_line_jumps,
  262|   202k|            column: Self::column_from_bytes(&self.data[start_line_start..start_offset]),
  263|   202k|            offset: self.previous_position.global_offset
  264|   202k|                + u64::try_from(offset_range.start).unwrap(),
  265|   202k|        }..TextPosition {
  266|   202k|            line: self.previous_position.global_line + end_extra_line_jumps,
  267|   202k|            column: Self::column_from_bytes(&self.data[end_line_start..end_offset]),
  268|   202k|            offset: self.previous_position.global_offset + u64::try_from(offset_range.end).unwrap(),
  269|   202k|        }
  270|   202k|    }
_RNvMs1_NtNtCsgfQ0H3lfwIZ_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE11shrink_dataB9_:
  388|   303k|    fn shrink_data(&mut self) {
  389|   303k|        if self.position.line_start_buffer_offset > 0 {
  390|  29.8k|            self.data
  391|  29.8k|                .copy_within(self.position.line_start_buffer_offset.., 0);
  392|  29.8k|            self.data
  393|  29.8k|                .truncate(self.data.len() - self.position.line_start_buffer_offset);
  394|  29.8k|            self.position.buffer_offset -= self.position.line_start_buffer_offset;
  395|  29.8k|            self.position.line_start_buffer_offset = 0;
  396|  29.8k|            self.previous_position = self.position;
  397|   273k|        }
  398|   303k|    }
_RNvMs1_NtNtCsgfQ0H3lfwIZ_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE19last_token_locationB9_:
  272|  34.4k|    pub fn last_token_location(&self) -> Range<TextPosition> {
  273|  34.4k|        TextPosition {
  274|  34.4k|            line: self.previous_position.global_line,
  275|  34.4k|            column: Self::column_from_bytes(
  276|  34.4k|                &self.data[self.previous_position.line_start_buffer_offset
  277|  34.4k|                    ..self.previous_position.buffer_offset],
  278|  34.4k|            ),
  279|  34.4k|            offset: self.previous_position.global_offset,
  280|  34.4k|        }..TextPosition {
  281|  34.4k|            line: self.position.global_line,
  282|  34.4k|            column: Self::column_from_bytes(
  283|  34.4k|                &self.data[self.position.line_start_buffer_offset..self.position.buffer_offset],
  284|  34.4k|            ),
  285|  34.4k|            offset: self.position.global_offset,
  286|  34.4k|        }
  287|  34.4k|    }
_RNvXNtNtCsgfQ0H3lfwIZ_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromTINtNtNtB1a_3ops5range5RangejENtNtCsjOdcKtOMjJI_5alloc6string6StringEE4fromB6_:
   31|   129k|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|   129k|        Self {
   33|   129k|            location,
   34|   129k|            message: message.into(),
   35|   129k|        }
   36|   129k|    }
_RNvXs0_NtNtCsgfQ0H3lfwIZ_5oxttl7toolkit5lexerNtB5_20TokenRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromTjNtNtCsjOdcKtOMjJI_5alloc6string6StringEE4fromB9_:
   47|  8.94k|    fn from((location, message): (usize, S)) -> Self {
   48|  8.94k|        (location..=location, message).into()
   49|  8.94k|    }
_RNvMs1_NtNtCsgfQ0H3lfwIZ_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  400|   899k|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  401|   899k|        let mut num_of_jumps = 0;
  402|   899k|        let mut last_jump_pos = 0;
  403|   899k|        let mut previous_cr = 0;
  404|   899k|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  405|  8.28k|            if bytes[pos] == b'\r' {
  406|  2.58k|                previous_cr = pos;
  407|  2.58k|                num_of_jumps += 1;
  408|  2.58k|                last_jump_pos = pos + 1;
  409|  2.58k|            } else {
  410|  5.69k|                if previous_cr < pos - 1 {
  411|  4.56k|                    // We count \r\n as a single line jump
  412|  4.56k|                    num_of_jumps += 1;
  413|  4.56k|                }
  414|  5.69k|                last_jump_pos = pos + 1;
  415|       |            }
  416|       |        }
  417|   899k|        (num_of_jumps, last_jump_pos)
  418|   899k|    }
_RNvMs1_NtNtCsgfQ0H3lfwIZ_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17column_from_bytesB9_:
  420|   749k|    fn column_from_bytes(bytes: &[u8]) -> u64 {
  421|   749k|        match str::from_utf8(bytes) {
  422|   434k|            Ok(s) => u64::try_from(s.chars().count()).unwrap(),
  423|   314k|            Err(e) => {
  424|   314k|                if e.valid_up_to() == 0 {
  425|  41.7k|                    0
  426|       |                } else {
  427|   273k|                    Self::column_from_bytes(&bytes[..e.valid_up_to()])
  428|       |                }
  429|       |            }
  430|       |        }
  431|   749k|    }
_RNvXs_NtNtCsgfQ0H3lfwIZ_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejEReEE4fromB8_:
   41|  63.4k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  63.4k|        (*location.start()..*location.end() + 1, message).into()
   43|  63.4k|    }
_RNvMs1_NtNtCsgfQ0H3lfwIZ_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  338|   818k|    fn skip_whitespaces(&mut self) -> Option<()> {
  339|   818k|        if self.is_line_jump_whitespace {
  340|   818k|            let mut i = self.position.buffer_offset;
  341|   914k|            while let Some(c) = self.data.get(i) {
  342|   857k|                match c {
  343|  27.0k|                    b' ' | b'\t' => {
  344|  27.0k|                        self.position.buffer_offset += 1;
  345|  27.0k|                        self.position.global_offset += 1;
  346|  27.0k|                    }
  347|       |                    b'\r' => {
  348|       |                        // We look for \n for Windows line end style
  349|  4.88k|                        let mut increment: u8 = 1;
  350|  4.88k|                        if let Some(c) = self.data.get(i + 1) {
  351|  3.85k|                            if *c == b'\n' {
  352|      0|                                increment += 1;
  353|      0|                                i += 1;
  354|  3.85k|                            }
  355|  1.03k|                        } else if !self.is_ending {
  356|    946|                            return None; // We need to read more
  357|     84|                        }
  358|  3.94k|                        self.position.buffer_offset += usize::from(increment);
  359|  3.94k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  360|  3.94k|                        self.position.global_offset += u64::from(increment);
  361|  3.94k|                        self.position.global_line += 1;
  362|       |                    }
  363|  64.6k|                    b'\n' => {
  364|  64.6k|                        self.position.buffer_offset += 1;
  365|  64.6k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  366|  64.6k|                        self.position.global_offset += 1;
  367|  64.6k|                        self.position.global_line += 1;
  368|  64.6k|                    }
  369|   760k|                    _ => return Some(()),
  370|       |                }
  371|  95.6k|                i += 1;
  372|       |                // TODO: SIMD
  373|       |            }
  374|       |        } else {
  375|      0|            for c in &self.data[self.position.buffer_offset..] {
  376|      0|                if matches!(c, b' ' | b'\t') {
  377|      0|                    self.position.buffer_offset += 1;
  378|      0|                    self.position.global_offset += 1;
  379|      0|                } else {
  380|      0|                    return Some(());
  381|       |                }
  382|       |                // TODO: SIMD
  383|       |            }
  384|       |        }
  385|  57.3k|        Some(())
  386|   818k|    }
_RNvMs1_NtNtCsgfQ0H3lfwIZ_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17extend_from_sliceB9_:
  103|   295k|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  104|   295k|        self.shrink_data();
  105|   295k|        self.data.extend_from_slice(other);
  106|   295k|    }
_RNvXNtNtCsgfQ0H3lfwIZ_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromTINtNtNtB1a_3ops5range5RangejEReEE4fromB6_:
   31|  79.9k|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|  79.9k|        Self {
   33|  79.9k|            location,
   34|  79.9k|            message: message.into(),
   35|  79.9k|        }
   36|  79.9k|    }
_RNvMs1_NtNtCsgfQ0H3lfwIZ_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3endB9_:
  109|  7.65k|    pub fn end(&mut self) {
  110|  7.65k|        self.is_ending = true;
  111|  7.65k|    }
_RNvMs1_NtNtCsgfQ0H3lfwIZ_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17last_token_sourceB9_:
  289|  34.4k|    pub fn last_token_source(&self) -> Cow<'_, str> {
  290|  34.4k|        String::from_utf8_lossy(
  291|  34.4k|            &self.data[self.previous_position.buffer_offset..self.position.buffer_offset],
  292|  34.4k|        )
  293|  34.4k|    }
_RNvMs1_NtNtCsgfQ0H3lfwIZ_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE6is_endB9_:
  295|   322k|    pub fn is_end(&self) -> bool {
  296|   322k|        self.is_ending && self.data.len() == self.position.buffer_offset
  297|   322k|    }
_RNvMs1_NtNtCsgfQ0H3lfwIZ_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE9read_nextB9_:
  166|   817k|    pub fn read_next(
  167|   817k|        &mut self,
  168|   817k|        options: &R::Options,
  169|   817k|    ) -> Option<Result<R::Token<'_>, TurtleSyntaxError>> {
  170|   817k|        self.skip_whitespaces_and_comments()?;
  171|   812k|        self.previous_position = self.position;
  172|   812k|        let Some((consumed, result)) = self.parser.recognize_next_token(
  173|   812k|            &self.data[self.position.buffer_offset..],
  174|   812k|            self.is_ending,
  175|   812k|            options,
  176|   812k|        ) else {
  177|   320k|            return if self.is_ending {
  178|  24.9k|                if self.position.buffer_offset == self.data.len() {
  179|  22.8k|                    None // We have finished
  180|       |                } else {
  181|  2.15k|                    let (new_line_jumps, new_line_start) =
  182|  2.15k|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  183|  2.15k|                            &self.data[self.position.buffer_offset..],
  184|  2.15k|                        );
  185|  2.15k|                    if new_line_jumps > 0 {
  186|     96|                        self.position.line_start_buffer_offset =
  187|     96|                            self.position.buffer_offset + new_line_start;
  188|  2.06k|                    }
  189|  2.15k|                    self.position.global_offset +=
  190|  2.15k|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  191|  2.15k|                    self.position.buffer_offset = self.data.len();
  192|  2.15k|                    self.position.global_line += new_line_jumps;
  193|  2.15k|                    let new_position = TextPosition {
  194|  2.15k|                        line: self.position.global_line,
  195|  2.15k|                        column: Self::column_from_bytes(
  196|  2.15k|                            &self.data[self.position.line_start_buffer_offset..],
  197|  2.15k|                        ),
  198|  2.15k|                        offset: self.position.global_offset,
  199|  2.15k|                    };
  200|  2.15k|                    let error = TurtleSyntaxError {
  201|  2.15k|                        location: new_position..new_position,
  202|  2.15k|                        message: "Unexpected end of file".into(),
  203|  2.15k|                    };
  204|  2.15k|                    self.position.buffer_offset = self.data.len(); // We consume everything
  205|  2.15k|                    Some(Err(error))
  206|       |                }
  207|       |            } else {
  208|   295k|                None
  209|       |            };
  210|       |        };
  211|       |        debug_assert!(
  212|      0|            consumed > 0,
  213|      0|            "The lexer must consume at least one byte each time"
  214|       |        );
  215|       |        debug_assert!(
  216|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  217|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  218|      0|            self.data.len() - self.position.buffer_offset
  219|       |        );
  220|   492k|        let (new_line_jumps, new_line_start) =
  221|   492k|            Self::find_number_of_line_jumps_and_start_of_last_line(
  222|   492k|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  223|   492k|            );
  224|   492k|        if new_line_jumps > 0 {
  225|  2.01k|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  226|   490k|        }
  227|   492k|        self.position.buffer_offset += consumed;
  228|   492k|        self.position.global_offset += u64::try_from(consumed).unwrap();
  229|   492k|        self.position.global_line += new_line_jumps;
  230|   492k|        Some(result.map_err(|e| TurtleSyntaxError {
  231|       |            location: self.location_from_buffer_offset_range(e.location),
  232|       |            message: e.message,
  233|   492k|        }))
  234|   817k|    }
_RNvMs1_NtNtCsgfQ0H3lfwIZ_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  300|   817k|    fn skip_whitespaces_and_comments(&mut self) -> Option<()> {
  301|       |        loop {
  302|   818k|            self.skip_whitespaces()?;
  303|       |
  304|   817k|            let buf = &self.data[self.position.buffer_offset..];
  305|   817k|            if let Some(line_comment_start) = self.line_comment_start {
  306|   817k|                if buf.starts_with(line_comment_start) {
  307|       |                    // Comment
  308|  5.30k|                    if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  309|  1.97k|                        let mut end_position = line_comment_start.len() + end;
  310|  1.97k|                        if buf.get(end_position).copied() == Some(b'\r') {
  311|       |                            // We look for \n for Windows line end style
  312|  1.22k|                            if let Some(c) = buf.get(end_position + 1) {
  313|    609|                                if *c == b'\n' {
  314|      7|                                    end_position += 1;
  315|    602|                                }
  316|    614|                            } else if !self.is_ending {
  317|    584|                                return None; // We need to read more
  318|     30|                            }
  319|    752|                        }
  320|  1.39k|                        let comment_size = end_position + 1;
  321|  1.39k|                        self.position.buffer_offset += comment_size;
  322|  1.39k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  323|  1.39k|                        self.position.global_offset += u64::try_from(comment_size).unwrap();
  324|  1.39k|                        self.position.global_line += 1;
  325|  1.39k|                        continue;
  326|  3.32k|                    }
  327|  3.32k|                    if self.is_ending {
  328|    132|                        self.position.buffer_offset = self.data.len(); // EOF
  329|    132|                        return Some(());
  330|  3.19k|                    }
  331|  3.19k|                    return None; // We need more data
  332|   812k|                }
  333|      0|            }
  334|   812k|            return Some(());
  335|       |        }
  336|   817k|    }
_RNvXs_NtNtCsgfQ0H3lfwIZ_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejENtNtCsjOdcKtOMjJI_5alloc6string6StringEE4fromB8_:
   41|  9.62k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  9.62k|        (*location.start()..*location.end() + 1, message).into()
   43|  9.62k|    }
_RNCNvMs1_NtNtCsgfQ0H3lfwIZ_5oxttl7toolkit5lexerINtB7_5LexerNtNtBb_5lexer7N3LexerE9read_next0Bb_:
  230|   202k|        Some(result.map_err(|e| TurtleSyntaxError {
  231|   202k|            location: self.location_from_buffer_offset_range(e.location),
  232|   202k|            message: e.message,
  233|   202k|        }))

_RINvMs_NtNtCsgfQ0H3lfwIZ_5oxttl7toolkit6parserINtB5_6ParserNtNtB9_12line_formats16NQuadsRecognizerE10parse_readRShECsjN1WeLjmkFM_6nquads:
  124|  3.75k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadIterator<R, RR> {
  125|  3.75k|        FromReadIterator { read, parser: self }
  126|  3.75k|    }
_RNvXs0_NtNtCsgfQ0H3lfwIZ_5oxttl7toolkit6parserINtB5_16FromReadIteratorRShNtNtB9_12line_formats16NQuadsRecognizerENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCsjN1WeLjmkFM_6nquads:
  146|  10.7k|    fn next(&mut self) -> Option<Self::Item> {
  147|  19.0k|        while !self.parser.is_end() {
  148|  15.2k|            if let Some(result) = self.parser.read_next() {
  149|  6.94k|                return Some(result.map_err(TurtleParseError::Syntax));
  150|  8.31k|            }
  151|  8.31k|            if let Err(e) = self.parser.lexer.extend_from_read(&mut self.read) {
  152|      0|                return Some(Err(e.into()));
  153|  8.31k|            }
  154|       |        }
  155|  3.75k|        None
  156|  10.7k|    }
_RNvMs_NtNtCsgfQ0H3lfwIZ_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_12line_formats16NQuadsRecognizerE9read_nextB8_:
   80|   572k|    pub fn read_next(&mut self) -> Option<Result<RR::Output, TurtleSyntaxError>> {
   81|       |        loop {
   82|   873k|            if let Some(error) = self.errors.pop() {
   83|  34.4k|                return Some(Err(TurtleSyntaxError {
   84|  34.4k|                    location: self.lexer.last_token_location(),
   85|  34.4k|                    message: error
   86|  34.4k|                        .message
   87|  34.4k|                        .replace("TOKEN", &self.lexer.last_token_source()),
   88|  34.4k|                }));
   89|   838k|            }
   90|   838k|            if let Some(result) = self.results.pop() {
   91|  21.5k|                return Some(Ok(result));
   92|   817k|            }
   93|   817k|            if let Some(result) = self.lexer.read_next(RR::lexer_options(&self.context)) {
   94|   494k|                match result {
   95|   289k|                    Ok(token) => {
   96|   289k|                        self.state = self.state.take().map(|state| {
   97|       |                            state.recognize_next(
   98|       |                                token,
   99|       |                                &mut self.context,
  100|       |                                &mut self.results,
  101|       |                                &mut self.errors,
  102|       |                            )
  103|   289k|                        });
  104|   289k|                        continue;
  105|       |                    }
  106|   204k|                    Err(e) => {
  107|   204k|                        self.state = self.state.take().map(RR::error_recovery_state);
  108|   204k|                        return Some(Err(e));
  109|       |                    }
  110|       |                }
  111|   322k|            }
  112|   322k|            if self.lexer.is_end() {
  113|  22.8k|                self.state.take()?.recognize_end(
  114|  11.4k|                    &mut self.context,
  115|  11.4k|                    &mut self.results,
  116|  11.4k|                    &mut self.errors,
  117|  11.4k|                )
  118|       |            } else {
  119|   299k|                return None;
  120|       |            }
  121|       |        }
  122|   572k|    }
_RNvXNtNtCsgfQ0H3lfwIZ_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromReE4fromB6_:
   39|  34.4k|    fn from(message: S) -> Self {
   40|  34.4k|        Self {
   41|  34.4k|            message: message.into(),
   42|  34.4k|        }
   43|  34.4k|    }
_RNvMs_NtNtCsgfQ0H3lfwIZ_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_12line_formats16NQuadsRecognizerE3newB8_:
   56|  11.4k|    pub fn new(lexer: Lexer<RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   57|  11.4k|        Self {
   58|  11.4k|            lexer,
   59|  11.4k|            state: Some(recognizer),
   60|  11.4k|            context,
   61|  11.4k|            results: vec![],
   62|  11.4k|            errors: vec![],
   63|  11.4k|        }
   64|  11.4k|    }
_RNvMs_NtNtCsgfQ0H3lfwIZ_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_12line_formats16NQuadsRecognizerE17extend_from_sliceB8_:
   66|   295k|    pub fn extend_from_slice(&mut self, other: &[u8]) {
   67|   295k|        self.lexer.extend_from_slice(other)
   68|   295k|    }
_RNvMs_NtNtCsgfQ0H3lfwIZ_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_12line_formats16NQuadsRecognizerE3endB8_:
   71|  7.65k|    pub fn end(&mut self) {
   72|  7.65k|        self.lexer.end()
   73|  7.65k|    }
_RNvMs_NtNtCsgfQ0H3lfwIZ_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_12line_formats16NQuadsRecognizerE6is_endB8_:
   76|  26.6k|    pub fn is_end(&self) -> bool {
   77|  26.6k|        self.state.is_none() && self.results.is_empty() && self.errors.is_empty()
   78|  26.6k|    }
_RNCNvMs_NtNtCsgfQ0H3lfwIZ_5oxttl7toolkit6parserINtB6_6ParserNtNtBa_12line_formats16NQuadsRecognizerE9read_next0Ba_:
   96|   289k|                        self.state = self.state.take().map(|state| {
   97|   289k|                            state.recognize_next(
   98|   289k|                                token,
   99|   289k|                                &mut self.context,
  100|   289k|                                &mut self.results,
  101|   289k|                                &mut self.errors,
  102|   289k|                            )
  103|   289k|                        });


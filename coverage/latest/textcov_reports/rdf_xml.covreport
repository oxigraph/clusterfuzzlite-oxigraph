_RINvMNtCs7cZHLZmpkps_9getrandom4lazyNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   34|      9|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   35|      9|        // Relaxed ordering is fine, as we only have a single atomic variable.
   36|      9|        let mut val = self.0.load(Relaxed);
   37|      9|        if val == Self::UNINIT {
   38|      1|            val = init();
   39|      1|            self.0.store(val, Relaxed);
   40|      8|        }
   41|      9|        val
   42|      9|    }
_RINvMs_NtCs7cZHLZmpkps_9getrandom4lazyNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   53|      9|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   54|      9|        self.0.unsync_init(|| init() as usize) != 0
   55|      9|    }
_RNCINvMs_NtCs7cZHLZmpkps_9getrandom4lazyNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   54|      1|        self.0.unsync_init(|| init() as usize) != 0

_RNvCs7cZHLZmpkps_9getrandom16getrandom_uninitCsaK7gPiXiUtz_9rand_core:
  345|      9|pub fn getrandom_uninit(dest: &mut [MaybeUninit<u8>]) -> Result<&mut [u8], Error> {
  346|      9|    if !dest.is_empty() {
  347|      9|        imp::getrandom_inner(dest)?;
  348|      0|    }
  349|       |    // SAFETY: `dest` has been fully initialized by `imp::getrandom_inner`
  350|       |    // since it returned `Ok`.
  351|      9|    Ok(unsafe { slice_assume_init_mut(dest) })
  352|      9|}
_RNvCs7cZHLZmpkps_9getrandom9getrandomCsaK7gPiXiUtz_9rand_core:
  315|      9|pub fn getrandom(dest: &mut [u8]) -> Result<(), Error> {
  316|      9|    // SAFETY: The `&mut MaybeUninit<_>` reference doesn't escape, and
  317|      9|    // `getrandom_uninit` guarantees it will never de-initialize any part of
  318|      9|    // `dest`.
  319|      9|    getrandom_uninit(unsafe { slice_as_uninit_mut(dest) })?;
  320|      9|    Ok(())
  321|      9|}

_RNvNtCs7cZHLZmpkps_9getrandom3imp15getrandom_inner:
    9|      9|pub fn getrandom_inner(dest: &mut [MaybeUninit<u8>]) -> Result<(), Error> {
   10|      9|    // getrandom(2) was introduced in Linux 3.17
   11|      9|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   12|      9|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   13|      9|        sys_fill_exact(dest, |buf| unsafe {
   14|       |            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   15|      9|        })
   16|       |    } else {
   17|      0|        use_file::getrandom_inner(dest)
   18|       |    }
   19|      9|}
_RNCNvNtCs7cZHLZmpkps_9getrandom3imp15getrandom_inner0B5_:
   13|      9|        sys_fill_exact(dest, |buf| unsafe {
   14|      9|            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   15|      9|        })
_RNvNtCs7cZHLZmpkps_9getrandom3imp22is_getrandom_available:
   21|      1|fn is_getrandom_available() -> bool {
   22|      1|    let res = unsafe { getrandom(core::ptr::null_mut(), 0, libc::GRND_NONBLOCK) };
   23|      1|    if res < 0 {
   24|      0|        match last_os_error().raw_os_error() {
   25|      0|            Some(libc::ENOSYS) => false, // No kernel support
   26|      0|            Some(libc::EPERM) => false,  // Blocked by seccomp
   27|      0|            _ => true,
   28|       |        }
   29|       |    } else {
   30|      1|        true
   31|       |    }
   32|      1|}
_RNvNtCs7cZHLZmpkps_9getrandom3imp9getrandom:
   34|     10|unsafe fn getrandom(
   35|     10|    buf: *mut libc::c_void,
   36|     10|    buflen: libc::size_t,
   37|     10|    flags: libc::c_uint,
   38|     10|) -> libc::ssize_t {
   39|     10|    libc::syscall(libc::SYS_getrandom, buf, buflen, flags) as libc::ssize_t
   40|     10|}

_RINvNtCs7cZHLZmpkps_9getrandom4util19slice_as_uninit_muthECsaK7gPiXiUtz_9rand_core:
   32|      9|pub unsafe fn slice_as_uninit_mut<T>(slice: &mut [T]) -> &mut [MaybeUninit<T>] {
   33|      9|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   34|      9|    &mut *(slice as *mut [T] as *mut [MaybeUninit<T>])
   35|      9|}
_RINvNtCs7cZHLZmpkps_9getrandom4util21slice_assume_init_muthECsaK7gPiXiUtz_9rand_core:
    8|      9|pub unsafe fn slice_assume_init_mut<T>(slice: &mut [MaybeUninit<T>]) -> &mut [T] {
    9|      9|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   10|      9|    &mut *(slice as *mut [MaybeUninit<T>] as *mut [T])
   11|      9|}

_RINvNtCs7cZHLZmpkps_9getrandom9util_libc14sys_fill_exactNCNvNtB4_3imp15getrandom_inner0EB4_:
   59|      9|pub fn sys_fill_exact(
   60|      9|    mut buf: &mut [MaybeUninit<u8>],
   61|      9|    sys_fill: impl Fn(&mut [MaybeUninit<u8>]) -> libc::ssize_t,
   62|      9|) -> Result<(), Error> {
   63|     18|    while !buf.is_empty() {
   64|      9|        let res = sys_fill(buf);
   65|      9|        match res {
   66|      9|            res if res > 0 => buf = buf.get_mut(res as usize..).ok_or(Error::UNEXPECTED)?,
   67|       |            -1 => {
   68|      0|                let err = last_os_error();
   69|      0|                // We should try again if the call was interrupted.
   70|      0|                if err.raw_os_error() != Some(libc::EINTR) {
   71|      0|                    return Err(err);
   72|      0|                }
   73|       |            }
   74|       |            // Negative return codes not equal to -1 should be impossible.
   75|       |            // EOF (ret = 0) should be impossible, as the data we are reading
   76|       |            // should be an infinite stream of random bytes.
   77|      0|            _ => return Err(Error::UNEXPECTED),
   78|       |        }
   79|       |    }
   80|      9|    Ok(())
   81|      9|}

rust_fuzzer_test_input:
  209|  3.64k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  3.64k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  3.64k|                }
  223|  3.64k|
  224|  3.64k|                __libfuzzer_sys_run(bytes);
  225|  3.64k|                0
  226|       |            }
_RNvNvCseFzqD1pb09d_7rdf_xml1__19___libfuzzer_sys_run:
  241|  3.64k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|       |            }
LLVMFuzzerTestOneInput:
   58|  3.64k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  3.64k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  3.64k|    });
   63|  3.64k|
   64|  3.64k|    match test_input {
   65|  3.64k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  3.64k|}
_RNCNvCslK7OP0j43wo_13libfuzzer_sys15test_input_wrap0B3_:
   59|  3.64k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  3.64k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  3.64k|        rust_fuzzer_test_input(data_slice)
   62|  3.64k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvMs3_NtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCsaXZRpaJvnVB_4core4iter6traits8iterator8Iterator4next0ECseFzqD1pb09d_7rdf_xml:
 1044|   884k|    pub(crate) unsafe fn next(
 1045|   884k|        &mut self,
 1046|   884k|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|   884k|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|   884k|        let found = find_raw(self.start, self.end)?;
 1057|   667k|        let result = found.distance(self.original_start);
 1058|   667k|        self.start = found.add(1);
 1059|   667k|        Some(result)
 1060|   884k|    }
_RINvMs3_NtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs7_NtBc_6memchrNtB1e_7Memchr3NtNtNtNtCsaXZRpaJvnVB_4core4iter6traits8iterator8Iterator4next0ECseFzqD1pb09d_7rdf_xml:
 1044|   214k|    pub(crate) unsafe fn next(
 1045|   214k|        &mut self,
 1046|   214k|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|   214k|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|   214k|        let found = find_raw(self.start, self.end)?;
 1057|   212k|        let result = found.distance(self.original_start);
 1058|   212k|        self.start = found.add(1);
 1059|   212k|        Some(result)
 1060|   214k|    }
_RINvMs3_NtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs_NtBc_6memchrNtB1d_6MemchrNtNtNtNtCsaXZRpaJvnVB_4core4iter6traits8iterator8Iterator4next0ECseFzqD1pb09d_7rdf_xml:
 1044|  2.23k|    pub(crate) unsafe fn next(
 1045|  2.23k|        &mut self,
 1046|  2.23k|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  2.23k|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  2.23k|        let found = find_raw(self.start, self.end)?;
 1057|  2.17k|        let result = found.distance(self.original_start);
 1058|  2.17k|        self.start = found.add(1);
 1059|  2.17k|        Some(result)
 1060|  2.23k|    }
_RINvNtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECseFzqD1pb09d_7rdf_xml:
 1125|   168k|pub(crate) unsafe fn search_slice_with_raw(
 1126|   168k|    haystack: &[u8],
 1127|   168k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|   168k|) -> Option<usize> {
 1129|   168k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|   168k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|   168k|    // a &[u8].
 1132|   168k|    let start = haystack.as_ptr();
 1133|   168k|    let end = start.add(haystack.len());
 1134|   168k|    let found = find_raw(start, end)?;
 1135|   166k|    Some(found.distance(start))
 1136|   168k|}
_RNvMs3_NtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|   336k|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|   336k|        Iter {
 1029|   336k|            original_start: haystack.as_ptr(),
 1030|   336k|            start: haystack.as_ptr(),
 1031|   336k|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|   336k|            haystack: core::marker::PhantomData,
 1033|   336k|        }
 1034|   336k|    }
_RINvMs3_NtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCsaXZRpaJvnVB_4core4iter6traits8iterator8Iterator4next0ECsfk1XolJ15f9_9quick_xml:
 1044|   150k|    pub(crate) unsafe fn next(
 1045|   150k|        &mut self,
 1046|   150k|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|   150k|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|   150k|        let found = find_raw(self.start, self.end)?;
 1057|   149k|        let result = found.distance(self.original_start);
 1058|   149k|        self.start = found.add(1);
 1059|   149k|        Some(result)
 1060|   150k|    }
_RINvNtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECsfk1XolJ15f9_9quick_xml:
 1125|   135k|pub(crate) unsafe fn search_slice_with_raw(
 1126|   135k|    haystack: &[u8],
 1127|   135k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|   135k|) -> Option<usize> {
 1129|   135k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|   135k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|   135k|    // a &[u8].
 1132|   135k|    let start = haystack.as_ptr();
 1133|   135k|    let end = start.add(haystack.len());
 1134|   135k|    let found = find_raw(start, end)?;
 1135|  73.1k|    Some(found.distance(start))
 1136|   135k|}
_RNvMNtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iE7needle1B8_:
  117|   387k|    pub(crate) fn needle1(&self) -> u8 {
  118|   387k|        self.s1
  119|   387k|    }
_RNvMNtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iE3newB8_:
  111|   306k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|   306k|        One { s1: needle, v1: V::splat(needle) }
  113|   306k|    }
_RNvMNtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m256iE3newB8_:
  111|   306k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|   306k|        One { s1: needle, v1: V::splat(needle) }
  113|   306k|    }
_RNvMNtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  9.60k|    pub(crate) unsafe fn find_raw(
  144|  9.60k|        &self,
  145|  9.60k|        start: *const u8,
  146|  9.60k|        end: *const u8,
  147|  9.60k|    ) -> Option<*const u8> {
  148|  9.60k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  9.60k|        // need to move up to using a u64 for the masks used below. Currently
  150|  9.60k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  9.60k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  9.60k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  9.60k|        let topos = V::Mask::first_offset;
  155|  9.60k|        let len = end.distance(start);
  156|  9.60k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  9.60k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  6.20k|            return Some(cur);
  167|  3.39k|        }
  168|  3.39k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  3.39k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  3.39k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  3.39k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  3.39k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  3.59k|        while cur <= end.sub(V::BYTES) {
  213|  1.31k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  1.31k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|  1.11k|                return Some(cur);
  216|    200|            }
  217|    200|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  2.28k|        if cur < end {
  224|  1.98k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  1.98k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  1.98k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  1.98k|            return self.search_chunk(cur, topos);
  228|    297|        }
  229|    297|        None
  230|  9.60k|    }
_RNvMNtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m256iE8find_rawB8_:
  143|   158k|    pub(crate) unsafe fn find_raw(
  144|   158k|        &self,
  145|   158k|        start: *const u8,
  146|   158k|        end: *const u8,
  147|   158k|    ) -> Option<*const u8> {
  148|   158k|        // If we want to support vectors bigger than 256 bits, we probably
  149|   158k|        // need to move up to using a u64 for the masks used below. Currently
  150|   158k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|   158k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|   158k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|   158k|        let topos = V::Mask::first_offset;
  155|   158k|        let len = end.distance(start);
  156|   158k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|   158k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|   142k|            return Some(cur);
  167|  15.7k|        }
  168|  15.7k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  15.7k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  15.7k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  15.7k|        if len >= Self::LOOP_SIZE {
  172|  14.1k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|  12.8k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|  12.8k|                let a = V::load_aligned(cur);
  176|  12.8k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|  12.8k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|  12.8k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|  12.8k|                let eqa = self.v1.cmpeq(a);
  180|  12.8k|                let eqb = self.v1.cmpeq(b);
  181|  12.8k|                let eqc = self.v1.cmpeq(c);
  182|  12.8k|                let eqd = self.v1.cmpeq(d);
  183|  12.8k|                let or1 = eqa.or(eqb);
  184|  12.8k|                let or2 = eqc.or(eqd);
  185|  12.8k|                let or3 = or1.or(or2);
  186|  12.8k|                if or3.movemask_will_have_non_zero() {
  187|  10.5k|                    let mask = eqa.movemask();
  188|  10.5k|                    if mask.has_non_zero() {
  189|  6.16k|                        return Some(cur.add(topos(mask)));
  190|  4.41k|                    }
  191|  4.41k|
  192|  4.41k|                    let mask = eqb.movemask();
  193|  4.41k|                    if mask.has_non_zero() {
  194|  3.25k|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|  1.16k|                    }
  196|  1.16k|
  197|  1.16k|                    let mask = eqc.movemask();
  198|  1.16k|                    if mask.has_non_zero() {
  199|    774|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|    391|                    }
  201|    391|
  202|    391|                    let mask = eqd.movemask();
  203|    391|                    debug_assert!(mask.has_non_zero());
  204|    391|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  2.22k|                }
  206|  2.22k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  3.82k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  7.90k|        while cur <= end.sub(V::BYTES) {
  213|  5.48k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  5.48k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|  2.78k|                return Some(cur);
  216|  2.70k|            }
  217|  2.70k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  2.41k|        if cur < end {
  224|  2.16k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  2.16k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  2.16k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  2.16k|            return self.search_chunk(cur, topos);
  228|    254|        }
  229|    254|        None
  230|   158k|    }
_RINvMNtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  12.9k|    unsafe fn search_chunk(
  417|  12.9k|        &self,
  418|  12.9k|        cur: *const u8,
  419|  12.9k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  12.9k|    ) -> Option<*const u8> {
  421|  12.9k|        let chunk = V::load_unaligned(cur);
  422|  12.9k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  12.9k|        if mask.has_non_zero() {
  424|  7.91k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  4.99k|            None
  427|       |        }
  428|  12.9k|    }
_RINvMNtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|   166k|    unsafe fn search_chunk(
  417|   166k|        &self,
  418|   166k|        cur: *const u8,
  419|   166k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|   166k|    ) -> Option<*const u8> {
  421|   166k|        let chunk = V::load_unaligned(cur);
  422|   166k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|   166k|        if mask.has_non_zero() {
  424|   145k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  20.4k|            None
  427|       |        }
  428|   166k|    }
_RNvMs_NtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iE3newBa_:
  450|  1.03M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  1.03M|        Two {
  452|  1.03M|            s1: needle1,
  453|  1.03M|            s2: needle2,
  454|  1.03M|            v1: V::splat(needle1),
  455|  1.03M|            v2: V::splat(needle2),
  456|  1.03M|        }
  457|  1.03M|    }
_RNvMs_NtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m256iE3newBa_:
  450|  1.03M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  1.03M|        Two {
  452|  1.03M|            s1: needle1,
  453|  1.03M|            s2: needle2,
  454|  1.03M|            v1: V::splat(needle1),
  455|  1.03M|            v2: V::splat(needle2),
  456|  1.03M|        }
  457|  1.03M|    }
_RNvMs_NtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iE7needle1Ba_:
  461|   403k|    pub(crate) fn needle1(&self) -> u8 {
  462|   403k|        self.s1
  463|   403k|    }
_RNvMs_NtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iE7needle2Ba_:
  467|   385k|    pub(crate) fn needle2(&self) -> u8 {
  468|   385k|        self.s2
  469|   385k|    }
_RNvMs_NtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iE8find_rawBa_:
  493|  42.3k|    pub(crate) unsafe fn find_raw(
  494|  42.3k|        &self,
  495|  42.3k|        start: *const u8,
  496|  42.3k|        end: *const u8,
  497|  42.3k|    ) -> Option<*const u8> {
  498|  42.3k|        // If we want to support vectors bigger than 256 bits, we probably
  499|  42.3k|        // need to move up to using a u64 for the masks used below. Currently
  500|  42.3k|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|  42.3k|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|  42.3k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  42.3k|        let topos = V::Mask::first_offset;
  505|  42.3k|        let len = end.distance(start);
  506|  42.3k|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  42.3k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  27.5k|            return Some(cur);
  517|  14.8k|        }
  518|  14.8k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  14.8k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|  14.8k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  14.8k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|  14.8k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  18.6k|        while cur <= end.sub(V::BYTES) {
  551|  4.24k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  4.24k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|    496|                return Some(cur);
  554|  3.75k|            }
  555|  3.75k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|  14.3k|        if cur < end {
  562|  13.9k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|  13.9k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|  13.9k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|  13.9k|            return self.search_chunk(cur, topos);
  566|    429|        }
  567|    429|        None
  568|  42.3k|    }
_RNvMs_NtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m256iE8find_rawBa_:
  493|   856k|    pub(crate) unsafe fn find_raw(
  494|   856k|        &self,
  495|   856k|        start: *const u8,
  496|   856k|        end: *const u8,
  497|   856k|    ) -> Option<*const u8> {
  498|   856k|        // If we want to support vectors bigger than 256 bits, we probably
  499|   856k|        // need to move up to using a u64 for the masks used below. Currently
  500|   856k|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|   856k|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|   856k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   856k|        let topos = V::Mask::first_offset;
  505|   856k|        let len = end.distance(start);
  506|   856k|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   856k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   725k|            return Some(cur);
  517|   131k|        }
  518|   131k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   131k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|   131k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   131k|        if len >= Self::LOOP_SIZE {
  522|  74.4k|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|  58.8k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|  58.8k|                let a = V::load_aligned(cur);
  526|  58.8k|                let b = V::load_aligned(cur.add(V::BYTES));
  527|  58.8k|                let eqa1 = self.v1.cmpeq(a);
  528|  58.8k|                let eqb1 = self.v1.cmpeq(b);
  529|  58.8k|                let eqa2 = self.v2.cmpeq(a);
  530|  58.8k|                let eqb2 = self.v2.cmpeq(b);
  531|  58.8k|                let or1 = eqa1.or(eqb1);
  532|  58.8k|                let or2 = eqa2.or(eqb2);
  533|  58.8k|                let or3 = or1.or(or2);
  534|  58.8k|                if or3.movemask_will_have_non_zero() {
  535|  11.1k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|  11.1k|                    if mask.has_non_zero() {
  537|  6.76k|                        return Some(cur.add(topos(mask)));
  538|  4.38k|                    }
  539|  4.38k|
  540|  4.38k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|  4.38k|                    debug_assert!(mask.has_non_zero());
  542|  4.38k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|  47.6k|                }
  544|  47.6k|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   104k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   156k|        while cur <= end.sub(V::BYTES) {
  551|  38.9k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  38.9k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  2.64k|                return Some(cur);
  554|  36.2k|            }
  555|  36.2k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   117k|        if cur < end {
  562|   115k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   115k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|   115k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   115k|            return self.search_chunk(cur, topos);
  566|  1.93k|        }
  567|  1.93k|        None
  568|   856k|    }
_RINvMs_NtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  60.5k|    unsafe fn search_chunk(
  671|  60.5k|        &self,
  672|  60.5k|        cur: *const u8,
  673|  60.5k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  60.5k|    ) -> Option<*const u8> {
  675|  60.5k|        let chunk = V::load_unaligned(cur);
  676|  60.5k|        let eq1 = self.v1.cmpeq(chunk);
  677|  60.5k|        let eq2 = self.v2.cmpeq(chunk);
  678|  60.5k|        let mask = eq1.or(eq2).movemask();
  679|  60.5k|        if mask.has_non_zero() {
  680|  28.8k|            let mask1 = eq1.movemask();
  681|  28.8k|            let mask2 = eq2.movemask();
  682|  28.8k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  31.7k|            None
  685|       |        }
  686|  60.5k|    }
_RINvMs_NtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  1.01M|    unsafe fn search_chunk(
  671|  1.01M|        &self,
  672|  1.01M|        cur: *const u8,
  673|  1.01M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  1.01M|    ) -> Option<*const u8> {
  675|  1.01M|        let chunk = V::load_unaligned(cur);
  676|  1.01M|        let eq1 = self.v1.cmpeq(chunk);
  677|  1.01M|        let eq2 = self.v2.cmpeq(chunk);
  678|  1.01M|        let mask = eq1.or(eq2).movemask();
  679|  1.01M|        if mask.has_non_zero() {
  680|   732k|            let mask1 = eq1.movemask();
  681|   732k|            let mask2 = eq2.movemask();
  682|   732k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|   279k|            None
  685|       |        }
  686|  1.01M|    }
_RNvMs0_NtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iE3newBb_:
  710|   214k|    pub(crate) unsafe fn new(
  711|   214k|        needle1: u8,
  712|   214k|        needle2: u8,
  713|   214k|        needle3: u8,
  714|   214k|    ) -> Three<V> {
  715|   214k|        Three {
  716|   214k|            s1: needle1,
  717|   214k|            s2: needle2,
  718|   214k|            s3: needle3,
  719|   214k|            v1: V::splat(needle1),
  720|   214k|            v2: V::splat(needle2),
  721|   214k|            v3: V::splat(needle3),
  722|   214k|        }
  723|   214k|    }
_RNvMs0_NtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m256iE3newBb_:
  710|   214k|    pub(crate) unsafe fn new(
  711|   214k|        needle1: u8,
  712|   214k|        needle2: u8,
  713|   214k|        needle3: u8,
  714|   214k|    ) -> Three<V> {
  715|   214k|        Three {
  716|   214k|            s1: needle1,
  717|   214k|            s2: needle2,
  718|   214k|            s3: needle3,
  719|   214k|            v1: V::splat(needle1),
  720|   214k|            v2: V::splat(needle2),
  721|   214k|            v3: V::splat(needle3),
  722|   214k|        }
  723|   214k|    }
_RNvMs0_NtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iE7needle1Bb_:
  727|  16.4k|    pub(crate) fn needle1(&self) -> u8 {
  728|  16.4k|        self.s1
  729|  16.4k|    }
_RNvMs0_NtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iE7needle2Bb_:
  733|  12.0k|    pub(crate) fn needle2(&self) -> u8 {
  734|  12.0k|        self.s2
  735|  12.0k|    }
_RNvMs0_NtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iE7needle3Bb_:
  739|  11.6k|    pub(crate) fn needle3(&self) -> u8 {
  740|  11.6k|        self.s3
  741|  11.6k|    }
_RNvMs0_NtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iE8find_rawBb_:
  765|  3.24k|    pub(crate) unsafe fn find_raw(
  766|  3.24k|        &self,
  767|  3.24k|        start: *const u8,
  768|  3.24k|        end: *const u8,
  769|  3.24k|    ) -> Option<*const u8> {
  770|  3.24k|        // If we want to support vectors bigger than 256 bits, we probably
  771|  3.24k|        // need to move up to using a u64 for the masks used below. Currently
  772|  3.24k|        // they are 32 bits, which means we're SOL for vectors that need masks
  773|  3.24k|        // bigger than 32 bits. Overall unclear until there's a use case.
  774|  3.24k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  775|       |
  776|  3.24k|        let topos = V::Mask::first_offset;
  777|  3.24k|        let len = end.distance(start);
  778|  3.24k|        debug_assert!(
  779|      0|            len >= V::BYTES,
  780|      0|            "haystack has length {}, but must be at least {}",
  781|       |            len,
  782|       |            V::BYTES
  783|       |        );
  784|       |
  785|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  786|       |        // of the haystack prior to where aligned loads can start.
  787|  3.24k|        if let Some(cur) = self.search_chunk(start, topos) {
  788|  2.79k|            return Some(cur);
  789|    446|        }
  790|    446|        // Set `cur` to the first V-aligned pointer greater than `start`.
  791|    446|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  792|    446|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  793|    446|        if len >= Self::LOOP_SIZE {
  794|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  795|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  796|       |
  797|      0|                let a = V::load_aligned(cur);
  798|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  799|      0|                let eqa1 = self.v1.cmpeq(a);
  800|      0|                let eqb1 = self.v1.cmpeq(b);
  801|      0|                let eqa2 = self.v2.cmpeq(a);
  802|      0|                let eqb2 = self.v2.cmpeq(b);
  803|      0|                let eqa3 = self.v3.cmpeq(a);
  804|      0|                let eqb3 = self.v3.cmpeq(b);
  805|      0|                let or1 = eqa1.or(eqb1);
  806|      0|                let or2 = eqa2.or(eqb2);
  807|      0|                let or3 = eqa3.or(eqb3);
  808|      0|                let or4 = or1.or(or2);
  809|      0|                let or5 = or3.or(or4);
  810|      0|                if or5.movemask_will_have_non_zero() {
  811|      0|                    let mask = eqa1
  812|      0|                        .movemask()
  813|      0|                        .or(eqa2.movemask())
  814|      0|                        .or(eqa3.movemask());
  815|      0|                    if mask.has_non_zero() {
  816|      0|                        return Some(cur.add(topos(mask)));
  817|      0|                    }
  818|      0|
  819|      0|                    let mask = eqb1
  820|      0|                        .movemask()
  821|      0|                        .or(eqb2.movemask())
  822|      0|                        .or(eqb3.movemask());
  823|      0|                    debug_assert!(mask.has_non_zero());
  824|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  825|      0|                }
  826|      0|                cur = cur.add(Self::LOOP_SIZE);
  827|       |            }
  828|    446|        }
  829|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  830|       |        // loads here, but I believe we are guaranteed that they are aligned
  831|       |        // since `cur` is aligned.
  832|    582|        while cur <= end.sub(V::BYTES) {
  833|    216|            debug_assert!(end.distance(cur) >= V::BYTES);
  834|    216|            if let Some(cur) = self.search_chunk(cur, topos) {
  835|     80|                return Some(cur);
  836|    136|            }
  837|    136|            cur = cur.add(V::BYTES);
  838|       |        }
  839|       |        // Finally handle any remaining bytes less than the size of V. In this
  840|       |        // case, our pointer may indeed be unaligned and the load may overlap
  841|       |        // with the previous one. But that's okay since we know the previous
  842|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  843|    366|        if cur < end {
  844|    287|            debug_assert!(end.distance(cur) < V::BYTES);
  845|    287|            cur = cur.sub(V::BYTES - end.distance(cur));
  846|    287|            debug_assert_eq!(end.distance(cur), V::BYTES);
  847|    287|            return self.search_chunk(cur, topos);
  848|     79|        }
  849|     79|        None
  850|  3.24k|    }
_RNvMs0_NtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m256iE8find_rawBb_:
  765|   204k|    pub(crate) unsafe fn find_raw(
  766|   204k|        &self,
  767|   204k|        start: *const u8,
  768|   204k|        end: *const u8,
  769|   204k|    ) -> Option<*const u8> {
  770|   204k|        // If we want to support vectors bigger than 256 bits, we probably
  771|   204k|        // need to move up to using a u64 for the masks used below. Currently
  772|   204k|        // they are 32 bits, which means we're SOL for vectors that need masks
  773|   204k|        // bigger than 32 bits. Overall unclear until there's a use case.
  774|   204k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  775|       |
  776|   204k|        let topos = V::Mask::first_offset;
  777|   204k|        let len = end.distance(start);
  778|   204k|        debug_assert!(
  779|      0|            len >= V::BYTES,
  780|      0|            "haystack has length {}, but must be at least {}",
  781|       |            len,
  782|       |            V::BYTES
  783|       |        );
  784|       |
  785|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  786|       |        // of the haystack prior to where aligned loads can start.
  787|   204k|        if let Some(cur) = self.search_chunk(start, topos) {
  788|   169k|            return Some(cur);
  789|  35.1k|        }
  790|  35.1k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  791|  35.1k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  792|  35.1k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  793|  35.1k|        if len >= Self::LOOP_SIZE {
  794|  74.7k|            while cur <= end.sub(Self::LOOP_SIZE) {
  795|  73.6k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  796|       |
  797|  73.6k|                let a = V::load_aligned(cur);
  798|  73.6k|                let b = V::load_aligned(cur.add(V::BYTES));
  799|  73.6k|                let eqa1 = self.v1.cmpeq(a);
  800|  73.6k|                let eqb1 = self.v1.cmpeq(b);
  801|  73.6k|                let eqa2 = self.v2.cmpeq(a);
  802|  73.6k|                let eqb2 = self.v2.cmpeq(b);
  803|  73.6k|                let eqa3 = self.v3.cmpeq(a);
  804|  73.6k|                let eqb3 = self.v3.cmpeq(b);
  805|  73.6k|                let or1 = eqa1.or(eqb1);
  806|  73.6k|                let or2 = eqa2.or(eqb2);
  807|  73.6k|                let or3 = eqa3.or(eqb3);
  808|  73.6k|                let or4 = or1.or(or2);
  809|  73.6k|                let or5 = or3.or(or4);
  810|  73.6k|                if or5.movemask_will_have_non_zero() {
  811|  31.7k|                    let mask = eqa1
  812|  31.7k|                        .movemask()
  813|  31.7k|                        .or(eqa2.movemask())
  814|  31.7k|                        .or(eqa3.movemask());
  815|  31.7k|                    if mask.has_non_zero() {
  816|  21.4k|                        return Some(cur.add(topos(mask)));
  817|  10.2k|                    }
  818|  10.2k|
  819|  10.2k|                    let mask = eqb1
  820|  10.2k|                        .movemask()
  821|  10.2k|                        .or(eqb2.movemask())
  822|  10.2k|                        .or(eqb3.movemask());
  823|  10.2k|                    debug_assert!(mask.has_non_zero());
  824|  10.2k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  825|  41.9k|                }
  826|  41.9k|                cur = cur.add(Self::LOOP_SIZE);
  827|       |            }
  828|  2.43k|        }
  829|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  830|       |        // loads here, but I believe we are guaranteed that they are aligned
  831|       |        // since `cur` is aligned.
  832|  5.11k|        while cur <= end.sub(V::BYTES) {
  833|  3.24k|            debug_assert!(end.distance(cur) >= V::BYTES);
  834|  3.24k|            if let Some(cur) = self.search_chunk(cur, topos) {
  835|  1.59k|                return Some(cur);
  836|  1.64k|            }
  837|  1.64k|            cur = cur.add(V::BYTES);
  838|       |        }
  839|       |        // Finally handle any remaining bytes less than the size of V. In this
  840|       |        // case, our pointer may indeed be unaligned and the load may overlap
  841|       |        // with the previous one. But that's okay since we know the previous
  842|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  843|  1.87k|        if cur < end {
  844|  1.63k|            debug_assert!(end.distance(cur) < V::BYTES);
  845|  1.63k|            cur = cur.sub(V::BYTES - end.distance(cur));
  846|  1.63k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  847|  1.63k|            return self.search_chunk(cur, topos);
  848|    235|        }
  849|    235|        None
  850|   204k|    }
_RINvMs0_NtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB6_5ThreeNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBc_6vector16SensibleMoveMaskNtB29_8MoveMask12first_offsetEBc_:
  962|  3.74k|    unsafe fn search_chunk(
  963|  3.74k|        &self,
  964|  3.74k|        cur: *const u8,
  965|  3.74k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  966|  3.74k|    ) -> Option<*const u8> {
  967|  3.74k|        let chunk = V::load_unaligned(cur);
  968|  3.74k|        let eq1 = self.v1.cmpeq(chunk);
  969|  3.74k|        let eq2 = self.v2.cmpeq(chunk);
  970|  3.74k|        let eq3 = self.v3.cmpeq(chunk);
  971|  3.74k|        let mask = eq1.or(eq2).or(eq3).movemask();
  972|  3.74k|        if mask.has_non_zero() {
  973|  2.97k|            let mask1 = eq1.movemask();
  974|  2.97k|            let mask2 = eq2.movemask();
  975|  2.97k|            let mask3 = eq3.movemask();
  976|  2.97k|            Some(cur.add(mask_to_offset(mask1.or(mask2).or(mask3))))
  977|       |        } else {
  978|    773|            None
  979|       |        }
  980|  3.74k|    }
_RINvMs0_NtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchrINtB6_5ThreeNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBc_6vector16SensibleMoveMaskNtB29_8MoveMask12first_offsetEBc_:
  962|   209k|    unsafe fn search_chunk(
  963|   209k|        &self,
  964|   209k|        cur: *const u8,
  965|   209k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  966|   209k|    ) -> Option<*const u8> {
  967|   209k|        let chunk = V::load_unaligned(cur);
  968|   209k|        let eq1 = self.v1.cmpeq(chunk);
  969|   209k|        let eq2 = self.v2.cmpeq(chunk);
  970|   209k|        let eq3 = self.v3.cmpeq(chunk);
  971|   209k|        let mask = eq1.or(eq2).or(eq3).movemask();
  972|   209k|        if mask.has_non_zero() {
  973|   172k|            let mask1 = eq1.movemask();
  974|   172k|            let mask2 = eq2.movemask();
  975|   172k|            let mask3 = eq3.movemask();
  976|   172k|            Some(cur.add(mask_to_offset(mask1.or(mask2).or(mask3))))
  977|       |        } else {
  978|  37.0k|            None
  979|       |        }
  980|   209k|    }
_RINvNtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  94.6k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  94.6k|    start: *const u8,
 1150|  94.6k|    end: *const u8,
 1151|  94.6k|    confirm: F,
 1152|  94.6k|) -> Option<*const u8> {
 1153|  94.6k|    debug_assert!(start <= end);
 1154|  94.6k|    let mut ptr = start;
 1155|   403k|    while ptr < end {
 1156|   387k|        if confirm(*ptr) {
 1157|  78.0k|            return Some(ptr);
 1158|   309k|        }
 1159|   309k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  16.5k|    None
 1162|  94.6k|}
_RINvNtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|   130k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|   130k|    start: *const u8,
 1150|   130k|    end: *const u8,
 1151|   130k|    confirm: F,
 1152|   130k|) -> Option<*const u8> {
 1153|   130k|    debug_assert!(start <= end);
 1154|   130k|    let mut ptr = start;
 1155|   489k|    while ptr < end {
 1156|   403k|        if confirm(*ptr) {
 1157|  45.0k|            return Some(ptr);
 1158|   358k|        }
 1159|   358k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  85.7k|    None
 1162|   130k|}
_RINvNtNtNtCshOovA0K1uQa_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs6_NtNtNtB6_6x86_644avx26memchrNtB1d_5Three8find_raw0EB8_:
 1148|  6.56k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  6.56k|    start: *const u8,
 1150|  6.56k|    end: *const u8,
 1151|  6.56k|    confirm: F,
 1152|  6.56k|) -> Option<*const u8> {
 1153|  6.56k|    debug_assert!(start <= end);
 1154|  6.56k|    let mut ptr = start;
 1155|  17.6k|    while ptr < end {
 1156|  16.4k|        if confirm(*ptr) {
 1157|  5.33k|            return Some(ptr);
 1158|  11.0k|        }
 1159|  11.0k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  1.23k|    None
 1162|  6.56k|}

_RNvMNtNtNtNtCshOovA0K1uQa_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|   306k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|   306k|        One {
   71|   306k|            sse2: generic::One::new(needle),
   72|   306k|            avx2: generic::One::new(needle),
   73|   306k|        }
   74|   306k|    }
_RNvMNtNtNtNtCshOovA0K1uQa_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCshOovA0K1uQa_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|   306k|    pub unsafe fn find_raw(
  180|   306k|        &self,
  181|   306k|        start: *const u8,
  182|   306k|        end: *const u8,
  183|   306k|    ) -> Option<*const u8> {
  184|   306k|        if start >= end {
  185|  43.3k|            return None;
  186|   262k|        }
  187|   262k|        let len = end.distance(start);
  188|   262k|        if len < __m256i::BYTES {
  189|   104k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  94.6k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  94.6k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  9.60k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|   158k|        }
  201|   158k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|   158k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|   158k|        // enough to run on the vector routine. Pointer validity is caller's
  204|   158k|        // responsibility.
  205|   158k|        //
  206|   158k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|   158k|        // means we'd have to annotate this routine with `target_feature`.
  208|   158k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|   158k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|   158k|        // The real problem is that a routine with a `target_feature`
  211|   158k|        // annotation generally can't be inlined into caller code unless
  212|   158k|        // the caller code has the same target feature annotations. Namely,
  213|   158k|        // the common case (at time of writing) is for calling code to not
  214|   158k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|   158k|        // `target_feature` on this routine, it can be inlined which will
  216|   158k|        // handle some of the short-haystack cases above without touching the
  217|   158k|        // architecture specific code.
  218|   158k|        self.find_raw_avx2(start, end)
  219|   306k|    }
_RNCNvMNtNtNtNtCshOovA0K1uQa_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|   387k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|   387k|                    b == self.sse2.needle1()
  194|   387k|                })
_RNvMNtNtNtNtCshOovA0K1uQa_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  9.60k|    unsafe fn find_raw_sse2(
  337|  9.60k|        &self,
  338|  9.60k|        start: *const u8,
  339|  9.60k|        end: *const u8,
  340|  9.60k|    ) -> Option<*const u8> {
  341|  9.60k|        self.sse2.find_raw(start, end)
  342|  9.60k|    }
_RNvMNtNtNtNtCshOovA0K1uQa_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|   158k|    unsafe fn find_raw_avx2(
  397|   158k|        &self,
  398|   158k|        start: *const u8,
  399|   158k|        end: *const u8,
  400|   158k|    ) -> Option<*const u8> {
  401|   158k|        self.avx2.find_raw(start, end)
  402|   158k|    }
_RNvMs2_NtNtNtNtCshOovA0K1uQa_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  1.03M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  1.03M|        Two {
  558|  1.03M|            sse2: generic::Two::new(needle1, needle2),
  559|  1.03M|            avx2: generic::Two::new(needle1, needle2),
  560|  1.03M|        }
  561|  1.03M|    }
_RNvMs2_NtNtNtNtCshOovA0K1uQa_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNvMs2_NtNtNtNtCshOovA0K1uQa_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  1.03M|    pub unsafe fn find_raw(
  655|  1.03M|        &self,
  656|  1.03M|        start: *const u8,
  657|  1.03M|        end: *const u8,
  658|  1.03M|    ) -> Option<*const u8> {
  659|  1.03M|        if start >= end {
  660|  5.05k|            return None;
  661|  1.02M|        }
  662|  1.02M|        let len = end.distance(start);
  663|  1.02M|        if len < __m256i::BYTES {
  664|   173k|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|   130k|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|   130k|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|  42.3k|                self.find_raw_sse2(start, end)
  674|       |            };
  675|   856k|        }
  676|   856k|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|   856k|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|   856k|        // enough to run on the vector routine. Pointer validity is caller's
  679|   856k|        // responsibility.
  680|   856k|        //
  681|   856k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|   856k|        // means we'd have to annotate this routine with `target_feature`.
  683|   856k|        // Which is fine, because this routine is `unsafe` anyway and the
  684|   856k|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|   856k|        // The real problem is that a routine with a `target_feature`
  686|   856k|        // annotation generally can't be inlined into caller code unless
  687|   856k|        // the caller code has the same target feature annotations. Namely,
  688|   856k|        // the common case (at time of writing) is for calling code to not
  689|   856k|        // have the `avx2` target feature enabled *at compile time*. Without
  690|   856k|        // `target_feature` on this routine, it can be inlined which will
  691|   856k|        // handle some of the short-haystack cases above without touching the
  692|   856k|        // architecture specific code.
  693|   856k|        self.find_raw_avx2(start, end)
  694|  1.03M|    }
_RNCNvMs2_NtNtNtNtCshOovA0K1uQa_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|   403k|                generic::fwd_byte_by_byte(start, end, |b| {
  668|   403k|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|   403k|                })
_RNvMs2_NtNtNtNtCshOovA0K1uQa_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|  42.3k|    unsafe fn find_raw_sse2(
  765|  42.3k|        &self,
  766|  42.3k|        start: *const u8,
  767|  42.3k|        end: *const u8,
  768|  42.3k|    ) -> Option<*const u8> {
  769|  42.3k|        self.sse2.find_raw(start, end)
  770|  42.3k|    }
_RNvMs2_NtNtNtNtCshOovA0K1uQa_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|   856k|    unsafe fn find_raw_avx2(
  805|   856k|        &self,
  806|   856k|        start: *const u8,
  807|   856k|        end: *const u8,
  808|   856k|    ) -> Option<*const u8> {
  809|   856k|        self.avx2.find_raw(start, end)
  810|   856k|    }
_RNvMs6_NtNtNtNtCshOovA0K1uQa_6memchr4arch6x86_644avx26memchrNtB5_5Three13new_uncheckedBd_:
  935|   214k|    pub unsafe fn new_unchecked(
  936|   214k|        needle1: u8,
  937|   214k|        needle2: u8,
  938|   214k|        needle3: u8,
  939|   214k|    ) -> Three {
  940|   214k|        Three {
  941|   214k|            sse2: generic::Three::new(needle1, needle2, needle3),
  942|   214k|            avx2: generic::Three::new(needle1, needle2, needle3),
  943|   214k|        }
  944|   214k|    }
_RNvMs6_NtNtNtNtCshOovA0K1uQa_6memchr4arch6x86_644avx26memchrNtB5_5Three12is_availableBd_:
  956|      1|    pub fn is_available() -> bool {
  957|      1|        #[cfg(not(target_feature = "sse2"))]
  958|      1|        {
  959|      1|            false
  960|      1|        }
  961|      1|        #[cfg(target_feature = "sse2")]
  962|      1|        {
  963|      1|            #[cfg(target_feature = "avx2")]
  964|      1|            {
  965|      1|                true
  966|      1|            }
  967|      1|            #[cfg(not(target_feature = "avx2"))]
  968|      1|            {
  969|      1|                #[cfg(feature = "std")]
  970|      1|                {
  971|      1|                    std::is_x86_feature_detected!("avx2")
  972|       |                }
  973|       |                #[cfg(not(feature = "std"))]
  974|       |                {
  975|       |                    false
  976|       |                }
  977|       |            }
  978|       |        }
  979|      1|    }
_RNvMs6_NtNtNtNtCshOovA0K1uQa_6memchr4arch6x86_644avx26memchrNtB5_5Three8find_rawBd_:
 1037|   214k|    pub unsafe fn find_raw(
 1038|   214k|        &self,
 1039|   214k|        start: *const u8,
 1040|   214k|        end: *const u8,
 1041|   214k|    ) -> Option<*const u8> {
 1042|   214k|        if start >= end {
 1043|    178|            return None;
 1044|   214k|        }
 1045|   214k|        let len = end.distance(start);
 1046|   214k|        if len < __m256i::BYTES {
 1047|  9.80k|            return if len < __m128i::BYTES {
 1048|       |                // SAFETY: We require the caller to pass valid start/end
 1049|       |                // pointers.
 1050|  6.56k|                generic::fwd_byte_by_byte(start, end, |b| {
 1051|       |                    b == self.sse2.needle1()
 1052|       |                        || b == self.sse2.needle2()
 1053|       |                        || b == self.sse2.needle3()
 1054|  6.56k|                })
 1055|       |            } else {
 1056|       |                // SAFETY: We require the caller to pass valid start/end
 1057|       |                // pointers.
 1058|  3.24k|                self.find_raw_sse2(start, end)
 1059|       |            };
 1060|   204k|        }
 1061|   204k|        // SAFETY: Building a `Three` means it's safe to call both 'sse2' and
 1062|   204k|        // 'avx2' routines. Also, we've checked that our haystack is big
 1063|   204k|        // enough to run on the vector routine. Pointer validity is caller's
 1064|   204k|        // responsibility.
 1065|   204k|        //
 1066|   204k|        // Note that we could call `self.avx2.find_raw` directly here. But that
 1067|   204k|        // means we'd have to annotate this routine with `target_feature`.
 1068|   204k|        // Which is fine, because this routine is `unsafe` anyway and the
 1069|   204k|        // `target_feature` obligation is met by virtue of building a `Three`.
 1070|   204k|        // The real problem is that a routine with a `target_feature`
 1071|   204k|        // annotation generally can't be inlined into caller code unless
 1072|   204k|        // the caller code has the same target feature annotations. Namely,
 1073|   204k|        // the common case (at time of writing) is for calling code to not
 1074|   204k|        // have the `avx2` target feature enabled *at compile time*. Without
 1075|   204k|        // `target_feature` on this routine, it can be inlined which will
 1076|   204k|        // handle some of the short-haystack cases above without touching the
 1077|   204k|        // architecture specific code.
 1078|   204k|        self.find_raw_avx2(start, end)
 1079|   214k|    }
_RNCNvMs6_NtNtNtNtCshOovA0K1uQa_6memchr4arch6x86_644avx26memchrNtB7_5Three8find_raw0Bf_:
 1050|  16.4k|                generic::fwd_byte_by_byte(start, end, |b| {
 1051|  16.4k|                    b == self.sse2.needle1()
 1052|  12.0k|                        || b == self.sse2.needle2()
 1053|  11.6k|                        || b == self.sse2.needle3()
 1054|  16.4k|                })
_RNvMs6_NtNtNtNtCshOovA0K1uQa_6memchr4arch6x86_644avx26memchrNtB5_5Three13find_raw_sse2Bd_:
 1151|  3.24k|    unsafe fn find_raw_sse2(
 1152|  3.24k|        &self,
 1153|  3.24k|        start: *const u8,
 1154|  3.24k|        end: *const u8,
 1155|  3.24k|    ) -> Option<*const u8> {
 1156|  3.24k|        self.sse2.find_raw(start, end)
 1157|  3.24k|    }
_RNvMs6_NtNtNtNtCshOovA0K1uQa_6memchr4arch6x86_644avx26memchrNtB5_5Three13find_raw_avx2Bd_:
 1191|   204k|    unsafe fn find_raw_avx2(
 1192|   204k|        &self,
 1193|   204k|        start: *const u8,
 1194|   204k|        end: *const u8,
 1195|   204k|    ) -> Option<*const u8> {
 1196|   204k|        self.avx2.find_raw(start, end)
 1197|   204k|    }

_RNvNtNtNtCshOovA0K1uQa_6memchr4arch6x86_646memchr10memchr_raw:
  174|   306k|pub(crate) fn memchr_raw(
  175|   306k|    n1: u8,
  176|   306k|    start: *const u8,
  177|   306k|    end: *const u8,
  178|   306k|) -> Option<*const u8> {
  179|   306k|    // SAFETY: We provide a valid function pointer type.
  180|   306k|    unsafe_ifunc!(
  181|   306k|        One,
  182|   306k|        find_raw,
  183|   306k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|   306k|        Option<*const u8>,
  185|   306k|        start,
  186|   306k|        end,
  187|   306k|        n1
  188|   306k|    )
  189|   306k|}
_RNvNtNtNtCshOovA0K1uQa_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  1.03M|pub(crate) fn memchr2_raw(
  221|  1.03M|    n1: u8,
  222|  1.03M|    n2: u8,
  223|  1.03M|    start: *const u8,
  224|  1.03M|    end: *const u8,
  225|  1.03M|) -> Option<*const u8> {
  226|  1.03M|    // SAFETY: We provide a valid function pointer type.
  227|  1.03M|    unsafe_ifunc!(
  228|  1.03M|        Two,
  229|  1.03M|        find_raw,
  230|  1.03M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  1.03M|        Option<*const u8>,
  232|  1.03M|        start,
  233|  1.03M|        end,
  234|  1.03M|        n1,
  235|  1.03M|        n2
  236|  1.03M|    )
  237|  1.03M|}
_RNvNtNtNtCshOovA0K1uQa_6memchr4arch6x86_646memchr11memchr3_raw:
  270|   214k|pub(crate) fn memchr3_raw(
  271|   214k|    n1: u8,
  272|   214k|    n2: u8,
  273|   214k|    n3: u8,
  274|   214k|    start: *const u8,
  275|   214k|    end: *const u8,
  276|   214k|) -> Option<*const u8> {
  277|   214k|    // SAFETY: We provide a valid function pointer type.
  278|   214k|    unsafe_ifunc!(
  279|   214k|        Three,
  280|   214k|        find_raw,
  281|   214k|        unsafe fn(u8, u8, u8, *const u8, *const u8) -> Option<*const u8>,
  282|   214k|        Option<*const u8>,
  283|   214k|        start,
  284|   214k|        end,
  285|   214k|        n1,
  286|   214k|        n2,
  287|   214k|        n3
  288|   214k|    )
  289|   214k|}
_RNvNvNtNtNtCshOovA0K1uQa_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|   306k|        unsafe fn find_avx2(
   79|   306k|            $($needle: u8),+,
   80|   306k|            $hay_start: *const u8,
   81|   306k|            $hay_end: *const u8,
   82|   306k|        ) -> $retty {
   83|   306k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|   306k|            $memchrty::new_unchecked($($needle),+)
   85|   306k|                .$memchrfind($hay_start, $hay_end)
   86|   306k|        }
_RNvNvNtNtNtCshOovA0K1uQa_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCshOovA0K1uQa_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  1.03M|        unsafe fn find_avx2(
   79|  1.03M|            $($needle: u8),+,
   80|  1.03M|            $hay_start: *const u8,
   81|  1.03M|            $hay_end: *const u8,
   82|  1.03M|        ) -> $retty {
   83|  1.03M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  1.03M|            $memchrty::new_unchecked($($needle),+)
   85|  1.03M|                .$memchrfind($hay_start, $hay_end)
   86|  1.03M|        }
_RNvNvNtNtNtCshOovA0K1uQa_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCshOovA0K1uQa_6memchr4arch6x86_646memchr11memchr3_raw9find_avx2:
   78|   214k|        unsafe fn find_avx2(
   79|   214k|            $($needle: u8),+,
   80|   214k|            $hay_start: *const u8,
   81|   214k|            $hay_end: *const u8,
   82|   214k|        ) -> $retty {
   83|   214k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|   214k|            $memchrty::new_unchecked($($needle),+)
   85|   214k|                .$memchrfind($hay_start, $hay_end)
   86|   214k|        }
_RNvNvNtNtNtCshOovA0K1uQa_6memchr4arch6x86_646memchr11memchr3_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }

_RNvXNtCshOovA0K1uQa_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  4.18M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  4.18M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  4.18M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  4.18M|    }
_RNvXNtCshOovA0K1uQa_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|   201k|    fn as_usize(self) -> usize {
   27|   201k|        self as usize
   28|   201k|    }

_RNvMNtCshOovA0K1uQa_6memchr6memchrNtB2_6Memchr3newCseFzqD1pb09d_7rdf_xml:
  300|    210|    pub fn new(needle1: u8, haystack: &'h [u8]) -> Memchr<'h> {
  301|    210|        Memchr {
  302|    210|            needle1,
  303|    210|            it: crate::arch::generic::memchr::Iter::new(haystack),
  304|    210|        }
  305|    210|    }
_RNvMs2_NtCshOovA0K1uQa_6memchr6memchrNtB5_7Memchr23newCseFzqD1pb09d_7rdf_xml:
  377|   229k|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|   229k|        Memchr2 {
  379|   229k|            needle1,
  380|   229k|            needle2,
  381|   229k|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|   229k|        }
  383|   229k|    }
_RNvMs6_NtCshOovA0K1uQa_6memchr6memchrNtB5_7Memchr33newCseFzqD1pb09d_7rdf_xml:
  446|   107k|    pub fn new(
  447|   107k|        needle1: u8,
  448|   107k|        needle2: u8,
  449|   107k|        needle3: u8,
  450|   107k|        haystack: &'h [u8],
  451|   107k|    ) -> Memchr3<'h> {
  452|   107k|        Memchr3 {
  453|   107k|            needle1,
  454|   107k|            needle2,
  455|   107k|            needle3,
  456|   107k|            it: crate::arch::generic::memchr::Iter::new(haystack),
  457|   107k|        }
  458|   107k|    }
_RNvNtCshOovA0K1uQa_6memchr6memchr11memchr_iterCseFzqD1pb09d_7rdf_xml:
  216|    210|pub fn memchr_iter<'h>(needle: u8, haystack: &'h [u8]) -> Memchr<'h> {
  217|    210|    Memchr::new(needle, haystack)
  218|    210|}
_RNvNtCshOovA0K1uQa_6memchr6memchr12memchr2_iterCseFzqD1pb09d_7rdf_xml:
  232|   229k|pub fn memchr2_iter<'h>(
  233|   229k|    needle1: u8,
  234|   229k|    needle2: u8,
  235|   229k|    haystack: &'h [u8],
  236|   229k|) -> Memchr2<'h> {
  237|   229k|    Memchr2::new(needle1, needle2, haystack)
  238|   229k|}
_RNvNtCshOovA0K1uQa_6memchr6memchr12memchr3_iterCseFzqD1pb09d_7rdf_xml:
  256|   107k|pub fn memchr3_iter<'h>(
  257|   107k|    needle1: u8,
  258|   107k|    needle2: u8,
  259|   107k|    needle3: u8,
  260|   107k|    haystack: &'h [u8],
  261|   107k|) -> Memchr3<'h> {
  262|   107k|    Memchr3::new(needle1, needle2, needle3, haystack)
  263|   107k|}
_RNvNtCshOovA0K1uQa_6memchr6memchr6memchrCseFzqD1pb09d_7rdf_xml:
   27|   168k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|   168k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|   168k|    // pointer between start and end.
   30|   168k|    unsafe {
   31|   168k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|   168k|        })
   34|   168k|    }
   35|   168k|}
_RNvXs3_NtCshOovA0K1uQa_6memchr6memchrNtB5_7Memchr2NtNtNtNtCsaXZRpaJvnVB_4core4iter6traits8iterator8Iterator4nextCseFzqD1pb09d_7rdf_xml:
  390|   884k|    fn next(&mut self) -> Option<usize> {
  391|   884k|        // SAFETY: All of our implementations of memchr ensure that any
  392|   884k|        // pointers returns will fall within the start and end bounds, and this
  393|   884k|        // upholds the safety contract of `self.it.next`.
  394|   884k|        unsafe {
  395|   884k|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|   884k|        }
  397|   884k|    }
_RNvXs7_NtCshOovA0K1uQa_6memchr6memchrNtB5_7Memchr3NtNtNtNtCsaXZRpaJvnVB_4core4iter6traits8iterator8Iterator4nextCseFzqD1pb09d_7rdf_xml:
  465|   214k|    fn next(&mut self) -> Option<usize> {
  466|   214k|        // SAFETY: All of our implementations of memchr ensure that any
  467|   214k|        // pointers returns will fall within the start and end bounds, and this
  468|   214k|        // upholds the safety contract of `self.it.next`.
  469|   214k|        unsafe {
  470|   214k|            self.it.next(|s, e| {
  471|       |                memchr3_raw(self.needle1, self.needle2, self.needle3, s, e)
  472|   214k|            })
  473|   214k|        }
  474|   214k|    }
_RNvXs_NtCshOovA0K1uQa_6memchr6memchrNtB4_6MemchrNtNtNtNtCsaXZRpaJvnVB_4core4iter6traits8iterator8Iterator4nextCseFzqD1pb09d_7rdf_xml:
  312|  2.23k|    fn next(&mut self) -> Option<usize> {
  313|  2.23k|        // SAFETY: All of our implementations of memchr ensure that any
  314|  2.23k|        // pointers returns will fall within the start and end bounds, and this
  315|  2.23k|        // upholds the safety contract of `self.it.next`.
  316|  2.23k|        unsafe {
  317|  2.23k|            // NOTE: I attempted to define an enum of previously created
  318|  2.23k|            // searchers and then switch on those here instead of just
  319|  2.23k|            // calling `memchr_raw` (or `One::new(..).find_raw(..)`). But
  320|  2.23k|            // that turned out to have a fair bit of extra overhead when
  321|  2.23k|            // searching very small haystacks.
  322|  2.23k|            self.it.next(|s, e| memchr_raw(self.needle1, s, e))
  323|  2.23k|        }
  324|  2.23k|    }
_RNCNvXs3_NtCshOovA0K1uQa_6memchr6memchrNtB7_7Memchr2NtNtNtNtCsaXZRpaJvnVB_4core4iter6traits8iterator8Iterator4next0Csfk1XolJ15f9_9quick_xml:
  395|  1.03M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNCNvXs7_NtCshOovA0K1uQa_6memchr6memchrNtB7_7Memchr3NtNtNtNtCsaXZRpaJvnVB_4core4iter6traits8iterator8Iterator4next0Csfk1XolJ15f9_9quick_xml:
  470|   214k|            self.it.next(|s, e| {
  471|   214k|                memchr3_raw(self.needle1, self.needle2, self.needle3, s, e)
  472|   214k|            })
_RNCNvXs_NtCshOovA0K1uQa_6memchr6memchrNtB6_6MemchrNtNtNtNtCsaXZRpaJvnVB_4core4iter6traits8iterator8Iterator4next0Csfk1XolJ15f9_9quick_xml:
  322|  2.23k|            self.it.next(|s, e| memchr_raw(self.needle1, s, e))
_RNvNtCshOovA0K1uQa_6memchr6memchr10memchr_rawCsfk1XolJ15f9_9quick_xml:
  504|  2.23k|unsafe fn memchr_raw(
  505|  2.23k|    needle: u8,
  506|  2.23k|    start: *const u8,
  507|  2.23k|    end: *const u8,
  508|  2.23k|) -> Option<*const u8> {
  509|  2.23k|    #[cfg(target_arch = "x86_64")]
  510|  2.23k|    {
  511|  2.23k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  2.23k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  2.23k|        // time. This function also handles using a fallback if neither AVX2
  514|  2.23k|        // nor SSE2 (unusual) are available.
  515|  2.23k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  2.23k|    }
  517|  2.23k|    #[cfg(target_arch = "wasm32")]
  518|  2.23k|    {
  519|  2.23k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  2.23k|    }
  521|  2.23k|    #[cfg(target_arch = "aarch64")]
  522|  2.23k|    {
  523|  2.23k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  2.23k|    }
  525|  2.23k|    #[cfg(not(any(
  526|  2.23k|        target_arch = "x86_64",
  527|  2.23k|        target_arch = "wasm32",
  528|  2.23k|        target_arch = "aarch64"
  529|  2.23k|    )))]
  530|  2.23k|    {
  531|  2.23k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  2.23k|    }
  533|  2.23k|}
_RNvNtCshOovA0K1uQa_6memchr6memchr11memchr2_rawCsfk1XolJ15f9_9quick_xml:
  574|  1.03M|unsafe fn memchr2_raw(
  575|  1.03M|    needle1: u8,
  576|  1.03M|    needle2: u8,
  577|  1.03M|    start: *const u8,
  578|  1.03M|    end: *const u8,
  579|  1.03M|) -> Option<*const u8> {
  580|  1.03M|    #[cfg(target_arch = "x86_64")]
  581|  1.03M|    {
  582|  1.03M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  1.03M|    }
  584|  1.03M|    #[cfg(target_arch = "wasm32")]
  585|  1.03M|    {
  586|  1.03M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  1.03M|    }
  588|  1.03M|    #[cfg(target_arch = "aarch64")]
  589|  1.03M|    {
  590|  1.03M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  1.03M|    }
  592|  1.03M|    #[cfg(not(any(
  593|  1.03M|        target_arch = "x86_64",
  594|  1.03M|        target_arch = "wasm32",
  595|  1.03M|        target_arch = "aarch64"
  596|  1.03M|    )))]
  597|  1.03M|    {
  598|  1.03M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  1.03M|            .find_raw(start, end)
  600|  1.03M|    }
  601|  1.03M|}
_RNvNtCshOovA0K1uQa_6memchr6memchr11memchr3_rawCsfk1XolJ15f9_9quick_xml:
  646|   214k|unsafe fn memchr3_raw(
  647|   214k|    needle1: u8,
  648|   214k|    needle2: u8,
  649|   214k|    needle3: u8,
  650|   214k|    start: *const u8,
  651|   214k|    end: *const u8,
  652|   214k|) -> Option<*const u8> {
  653|   214k|    #[cfg(target_arch = "x86_64")]
  654|   214k|    {
  655|   214k|        crate::arch::x86_64::memchr::memchr3_raw(
  656|   214k|            needle1, needle2, needle3, start, end,
  657|   214k|        )
  658|   214k|    }
  659|   214k|    #[cfg(target_arch = "wasm32")]
  660|   214k|    {
  661|   214k|        crate::arch::wasm32::memchr::memchr3_raw(
  662|   214k|            needle1, needle2, needle3, start, end,
  663|   214k|        )
  664|   214k|    }
  665|   214k|    #[cfg(target_arch = "aarch64")]
  666|   214k|    {
  667|   214k|        crate::arch::aarch64::memchr::memchr3_raw(
  668|   214k|            needle1, needle2, needle3, start, end,
  669|   214k|        )
  670|   214k|    }
  671|   214k|    #[cfg(not(any(
  672|   214k|        target_arch = "x86_64",
  673|   214k|        target_arch = "wasm32",
  674|   214k|        target_arch = "aarch64"
  675|   214k|    )))]
  676|   214k|    {
  677|   214k|        crate::arch::all::memchr::Three::new(needle1, needle2, needle3)
  678|   214k|            .find_raw(start, end)
  679|   214k|    }
  680|   214k|}
_RNvNtCshOovA0K1uQa_6memchr6memchr6memchrCsfk1XolJ15f9_9quick_xml:
   27|   135k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|   135k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|   135k|    // pointer between start and end.
   30|   135k|    unsafe {
   31|   135k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|   135k|        })
   34|   135k|    }
   35|   135k|}
_RNvXs3_NtCshOovA0K1uQa_6memchr6memchrNtB5_7Memchr2NtNtNtNtCsaXZRpaJvnVB_4core4iter6traits8iterator8Iterator4nextCsfk1XolJ15f9_9quick_xml:
  390|   150k|    fn next(&mut self) -> Option<usize> {
  391|   150k|        // SAFETY: All of our implementations of memchr ensure that any
  392|   150k|        // pointers returns will fall within the start and end bounds, and this
  393|   150k|        // upholds the safety contract of `self.it.next`.
  394|   150k|        unsafe {
  395|   150k|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|   150k|        }
  397|   150k|    }
_RNCNvNtCshOovA0K1uQa_6memchr6memchr6memchr0B5_:
   31|   303k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|   303k|            memchr_raw(needle, start, end)
   33|   303k|        })
_RNvNtCshOovA0K1uQa_6memchr6memchr10memchr_rawB3_:
  504|   303k|unsafe fn memchr_raw(
  505|   303k|    needle: u8,
  506|   303k|    start: *const u8,
  507|   303k|    end: *const u8,
  508|   303k|) -> Option<*const u8> {
  509|   303k|    #[cfg(target_arch = "x86_64")]
  510|   303k|    {
  511|   303k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|   303k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|   303k|        // time. This function also handles using a fallback if neither AVX2
  514|   303k|        // nor SSE2 (unusual) are available.
  515|   303k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|   303k|    }
  517|   303k|    #[cfg(target_arch = "wasm32")]
  518|   303k|    {
  519|   303k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|   303k|    }
  521|   303k|    #[cfg(target_arch = "aarch64")]
  522|   303k|    {
  523|   303k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|   303k|    }
  525|   303k|    #[cfg(not(any(
  526|   303k|        target_arch = "x86_64",
  527|   303k|        target_arch = "wasm32",
  528|   303k|        target_arch = "aarch64"
  529|   303k|    )))]
  530|   303k|    {
  531|   303k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|   303k|    }
  533|   303k|}

_RNvMNtCshOovA0K1uQa_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  128|  1.14M|    fn get_for_offset(self) -> u32 {
  129|  1.14M|        #[cfg(target_endian = "big")]
  130|  1.14M|        {
  131|  1.14M|            self.0.swap_bytes()
  132|  1.14M|        }
  133|  1.14M|        #[cfg(target_endian = "little")]
  134|  1.14M|        {
  135|  1.14M|            self.0
  136|  1.14M|        }
  137|  1.14M|    }
_RNvXs_NtCshOovA0K1uQa_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  148|  1.66M|    fn has_non_zero(self) -> bool {
  149|  1.66M|        self.0 != 0
  150|  1.66M|    }
_RNvXs_NtCshOovA0K1uQa_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  173|  1.14M|    fn first_offset(self) -> usize {
  174|  1.14M|        // We are dealing with little endian here (and if we aren't, we swap
  175|  1.14M|        // the bytes so we are in practice), where the most significant byte
  176|  1.14M|        // is at a higher address. That means the least significant bit that
  177|  1.14M|        // is set corresponds to the position of our first matching byte.
  178|  1.14M|        // That position corresponds to the number of zeros after the least
  179|  1.14M|        // significant bit.
  180|  1.14M|        self.get_for_offset().trailing_zeros() as usize
  181|  1.14M|    }
_RNvXNtNtCshOovA0K1uQa_6memchr6vector7x86sse2NtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  220|  77.1k|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  221|  77.1k|            _mm_loadu_si128(data as *const __m128i)
  222|  77.1k|        }
_RNvXNtNtCshOovA0K1uQa_6memchr6vector7x86sse2NtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  225|   143k|        unsafe fn movemask(self) -> SensibleMoveMask {
  226|   143k|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  227|   143k|        }
_RNvXNtNtCshOovA0K1uQa_6memchr6vector7x86sse2NtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  230|   145k|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  231|   145k|            _mm_cmpeq_epi8(self, vector2)
  232|   145k|        }
_RNvYNtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m256iNtNtCshOovA0K1uQa_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   65|   145k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   66|   145k|        self.movemask().has_non_zero()
   67|   145k|    }
_RNvXNtNtCshOovA0K1uQa_6memchr6vector7x86avx2NtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  275|  3.68M|        unsafe fn movemask(self) -> SensibleMoveMask {
  276|  3.68M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  277|  3.68M|        }
_RNvXNtNtCshOovA0K1uQa_6memchr6vector7x86avx2NtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  270|  1.38M|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  271|  1.38M|            _mm256_loadu_si256(data as *const __m256i)
  272|  1.38M|        }
_RNvXNtNtCshOovA0K1uQa_6memchr6vector7x86avx2NtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  280|  3.54M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  281|  3.54M|            _mm256_cmpeq_epi8(self, vector2)
  282|  3.54M|        }
_RNvXs_NtCshOovA0K1uQa_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  163|  1.21M|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  164|  1.21M|        SensibleMoveMask(self.0 | other.0)
  165|  1.21M|    }
_RNvXNtNtCshOovA0K1uQa_6memchr6vector7x86sse2NtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  210|  3.01M|        unsafe fn splat(byte: u8) -> __m128i {
  211|  3.01M|            _mm_set1_epi8(byte as i8)
  212|  3.01M|        }
_RNvXNtNtCshOovA0K1uQa_6memchr6vector7x86sse2NtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m128iNtB4_6Vector2or:
  240|  68.0k|        unsafe fn or(self, vector2: Self) -> __m128i {
  241|  68.0k|            _mm_or_si128(self, vector2)
  242|  68.0k|        }
_RNvXNtNtCshOovA0K1uQa_6memchr6vector7x86avx2NtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  260|  3.01M|        unsafe fn splat(byte: u8) -> __m256i {
  261|  3.01M|            _mm256_set1_epi8(byte as i8)
  262|  3.01M|        }
_RNvXNtNtCshOovA0K1uQa_6memchr6vector7x86avx2NtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  265|   316k|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  266|   316k|            _mm256_load_si256(data as *const __m256i)
  267|   316k|        }
_RNvXNtNtCshOovA0K1uQa_6memchr6vector7x86avx2NtNtNtCsaXZRpaJvnVB_4core9core_arch3x867___m256iNtB4_6Vector2or:
  290|  2.01M|        unsafe fn or(self, vector2: Self) -> __m256i {
  291|  2.01M|            _mm256_or_si256(self, vector2)
  292|  2.01M|        }

_RNvMs2_NtCs4x5FkYnI8d7_9once_cell3impINtB5_8OnceCellNtNtCsjp9TdQkU1Un_5alloc6string6StringE14is_initializedCslK7OP0j43wo_13libfuzzer_sys:
   49|  3.64k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  3.64k|        // An `Acquire` load is enough because that makes all the initialization
   51|  3.64k|        // operations visible to us, and, this being a fast path, weaker
   52|  3.64k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  3.64k|        // `SeqCst` operations on the slow path.
   54|  3.64k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  3.64k|    }

_RNvMs4_NtCs4x5FkYnI8d7_9once_cell4syncINtB5_8OnceCellNtNtCsjp9TdQkU1Un_5alloc6string6StringE3getCslK7OP0j43wo_13libfuzzer_sys:
  963|  3.64k|        pub fn get(&self) -> Option<&T> {
  964|  3.64k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  3.64k|                None
  969|       |            }
  970|  3.64k|        }

_RINvMs11_CsenmunypmJnb_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECsal5YaZOfl0H_5oxrdf:
 1567|  11.8k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1568|  11.8k|        Err(IriParseError { kind })
 1569|  11.8k|    }
_RNCNvMs11_CsenmunypmJnb_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0Csal5YaZOfl0H_5oxrdf:
 1550|  5.25k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_CsenmunypmJnb_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0Csal5YaZOfl0H_5oxrdf:
 1551|  3.50k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMCsenmunypmJnb_5oxiriINtB2_6IriRefNtNtCsjp9TdQkU1Un_5alloc6string6StringE10into_innerCsal5YaZOfl0H_5oxrdf:
  191|  75.3k|    pub fn into_inner(self) -> T {
  192|  75.3k|        self.iri
  193|  75.3k|    }
_RNvMCsenmunypmJnb_5oxiriINtB2_6IriRefNtNtCsjp9TdQkU1Un_5alloc6string6StringE11is_absoluteCsal5YaZOfl0H_5oxrdf:
  205|  76.4k|    pub fn is_absolute(&self) -> bool {
  206|  76.4k|        self.positions.scheme_end != 0
  207|  76.4k|    }
_RNvMCsenmunypmJnb_5oxiriINtB2_6IriRefNtNtCsjp9TdQkU1Un_5alloc6string6StringE5parseCsal5YaZOfl0H_5oxrdf:
   58|  88.3k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  88.3k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  76.4k|        Ok(Self { iri, positions })
   61|  88.3k|    }
_RNvMs11_CsenmunypmJnb_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCsal5YaZOfl0H_5oxrdf:
 1366|  76.2k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|  76.2k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|  1.23k|            let start_position = self.input.position;
 1370|  43.5k|            while let Some(c) = self.input.next() {
 1371|  42.8k|                self.output.push(c);
 1372|  42.8k|                if c == ']' {
 1373|    568|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|    568|                    if !UNCHECKED {
 1375|    568|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|    568|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|      0|                        }
 1378|      0|                    }
 1379|       |
 1380|      0|                    let c = self.input.next();
 1381|      0|                    return match c {
 1382|       |                        Some(':') => {
 1383|      0|                            self.output.push(':');
 1384|      0|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|      0|                            self.output_positions.authority_end = self.output.len();
 1388|      0|                            self.parse_path_start(c)
 1389|       |                        }
 1390|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|  42.2k|                }
 1393|       |            }
 1394|    666|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|  1.05M|            loop {
 1398|  1.05M|                let c = self.input.next();
 1399|  1.05M|                match c {
 1400|       |                    Some(':') => {
 1401|  10.9k|                        self.output.push(':');
 1402|  10.9k|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|  63.5k|                        self.output_positions.authority_end = self.output.len();
 1406|  63.5k|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|   981k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|  76.2k|    }
_RNvMs11_CsenmunypmJnb_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCsal5YaZOfl0H_5oxrdf:
 1457|  75.1k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|  2.69M|        loop {
 1459|  2.69M|            let c = self.input.next();
 1460|  2.69M|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|   192k|                    if self.output.as_str().ends_with("/..") {
 1463|      0|                        self.remove_last_segment();
 1464|      0|                        self.remove_last_segment();
 1465|      0|                        self.output.push('/');
 1466|   192k|                    } else if self.output.as_str().ends_with("/.") {
 1467|      0|                        self.remove_last_segment();
 1468|      0|                        self.output.push('/');
 1469|   192k|                    } else if c == Some('/') {
 1470|   122k|                        self.output.push('/');
 1471|   122k|                    }
 1472|       |
 1473|   192k|                    if c == Some('?') {
 1474|  11.0k|                        self.output_positions.path_end = self.output.len();
 1475|  11.0k|                        self.output.push('?');
 1476|  11.0k|                        return self.parse_query();
 1477|   181k|                    } else if c == Some('#') {
 1478|  37.3k|                        self.output_positions.path_end = self.output.len();
 1479|  37.3k|                        self.output_positions.query_end = self.output.len();
 1480|  37.3k|                        self.output.push('#');
 1481|  37.3k|                        return self.parse_fragment();
 1482|   144k|                    } else if c.is_none() {
 1483|  21.6k|                        self.output_positions.path_end = self.output.len();
 1484|  21.6k|                        self.output_positions.query_end = self.output.len();
 1485|  21.6k|                        return Ok(());
 1486|   122k|                    }
 1487|       |                }
 1488|  2.50M|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|  75.1k|    }
_RNvMs11_CsenmunypmJnb_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCsal5YaZOfl0H_5oxrdf:
 1414|  10.9k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|  11.4k|        loop {
 1416|  11.4k|            let c = self.input.next();
 1417|  8.61k|            match c {
 1418|  8.61k|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|  10.1k|                    self.output_positions.authority_end = self.output.len();
 1421|  10.1k|                    return self.parse_path_start(c);
 1422|       |                }
 1423|    855|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|  10.9k|    }
_RNvMs11_CsenmunypmJnb_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCsal5YaZOfl0H_5oxrdf:
 1547|  5.49k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1548|  5.49k|        let c1 = self.input.next();
 1549|  5.49k|        let c2 = self.input.next();
 1550|  5.49k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1551|  3.64k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1552|       |        {
 1553|  2.39k|            self.output.push('%');
 1554|  2.39k|            self.output.push(c1.unwrap());
 1555|  2.39k|            self.output.push(c2.unwrap());
 1556|  2.39k|            Ok(())
 1557|       |        } else {
 1558|  3.10k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1559|  3.10k|                Some('%'),
 1560|  3.10k|                c1,
 1561|  3.10k|                c2,
 1562|  3.10k|            ]))
 1563|       |        }
 1564|  5.49k|    }
_RNvMs11_CsenmunypmJnb_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCsal5YaZOfl0H_5oxrdf:
 1493|  12.4k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|  1.84M|        while let Some(c) = self.input.next() {
 1495|  1.84M|            if c == '#' {
 1496|  1.68k|                self.output_positions.query_end = self.output.len();
 1497|  1.68k|                self.output.push('#');
 1498|  1.68k|                return self.parse_fragment();
 1499|       |            } else {
 1500|  1.83M|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|  9.38k|        self.output_positions.query_end = self.output.len();
 1504|  9.38k|        Ok(())
 1505|  12.4k|    }
_RNvMs11_CsenmunypmJnb_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCsal5YaZOfl0H_5oxrdf:
 1220|  86.0k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|   543k|        loop {
 1222|   543k|            let c = self.input.next();
 1223|   543k|            match c {
 1224|   543k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|   457k|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|  83.9k|                    self.output.push(':');
 1229|  83.9k|                    self.output_positions.scheme_end = self.output.len();
 1230|  83.9k|                    self.input_scheme_end = self.input.position;
 1231|  83.9k|                    return if self.input.starts_with('/') {
 1232|  79.9k|                        self.input.next();
 1233|  79.9k|                        self.output.push('/');
 1234|  79.9k|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|  3.94k|                        self.output_positions.authority_end = self.output.len();
 1237|  3.94k|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|  2.08k|                    self.input = ParserInput {
 1242|  2.08k|                        value: self.iri.chars(),
 1243|  2.08k|                        position: 0,
 1244|  2.08k|                    }; // reset
 1245|  2.08k|                    self.output.clear();
 1246|  2.08k|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|  86.0k|    }
_RNvMs11_CsenmunypmJnb_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCsal5YaZOfl0H_5oxrdf:
 1507|  39.8k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|   663k|        while let Some(c) = self.input.next() {
 1509|   624k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|  38.9k|        Ok(())
 1512|  39.8k|    }
_RNvMs11_CsenmunypmJnb_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_relativeCsal5YaZOfl0H_5oxrdf:
 1263|  4.20k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1264|  4.20k|        if let Some(base) = self.base {
 1265|      0|            match self.input.front() {
 1266|       |                None => {
 1267|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1268|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1269|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1270|      0|                    self.output_positions.path_end = base.positions.path_end;
 1271|      0|                    self.output_positions.query_end = base.positions.query_end;
 1272|      0|                    Ok(())
 1273|       |                }
 1274|       |                Some('/') => {
 1275|      0|                    self.input.next();
 1276|      0|                    self.parse_relative_slash(&base)
 1277|       |                }
 1278|       |                Some('?') => {
 1279|      0|                    self.input.next();
 1280|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1281|      0|                    self.output.push('?');
 1282|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1283|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1284|      0|                    self.output_positions.path_end = base.positions.path_end;
 1285|      0|                    self.parse_query()
 1286|       |                }
 1287|       |                Some('#') => {
 1288|      0|                    self.input.next();
 1289|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1290|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1291|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1292|      0|                    self.output_positions.path_end = base.positions.path_end;
 1293|      0|                    self.output_positions.query_end = base.positions.query_end;
 1294|      0|                    self.output.push('#');
 1295|      0|                    self.parse_fragment()
 1296|       |                }
 1297|       |                _ => {
 1298|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1299|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1300|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1301|      0|                    self.output_positions.path_end = base.positions.path_end;
 1302|      0|                    self.remove_last_segment();
 1303|      0|                    if self.output.len() > base.positions.scheme_end {
 1304|      0|                        // We have some path or authority, we keep a base '/'
 1305|      0|                        self.output.push('/');
 1306|      0|                    }
 1307|      0|                    self.parse_path()
 1308|       |                }
 1309|       |            }
 1310|       |        } else {
 1311|  4.20k|            self.output_positions.scheme_end = 0;
 1312|  4.20k|            self.input_scheme_end = 0;
 1313|  4.20k|            if self.input.starts_with('/') {
 1314|    580|                self.input.next();
 1315|    580|                self.output.push('/');
 1316|    580|                self.parse_path_or_authority()
 1317|       |            } else {
 1318|  3.62k|                self.output_positions.authority_end = 0;
 1319|  3.62k|                self.parse_path()
 1320|       |            }
 1321|       |        }
 1322|  4.20k|    }
_RNvMs11_CsenmunypmJnb_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCsal5YaZOfl0H_5oxrdf:
 1342|  77.8k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|  1.10M|        loop {
 1345|  1.10M|            let c = self.input.next();
 1346|  1.10M|            match c {
 1347|       |                Some('@') => {
 1348|  1.67k|                    self.output.push('@');
 1349|  1.67k|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|  74.5k|                    self.input = ParserInput {
 1353|  74.5k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|  74.5k|                        position: self.input_scheme_end + 2,
 1355|  74.5k|                    };
 1356|  74.5k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|  74.5k|                    return self.parse_host();
 1358|       |                }
 1359|  1.02M|                Some(c) => {
 1360|  1.02M|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|  77.8k|    }
_RNvMs11_CsenmunypmJnb_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCsal5YaZOfl0H_5oxrdf:
 1428|  73.6k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|  73.6k|        match c {
 1430|       |            None => {
 1431|  6.45k|                self.output_positions.path_end = self.output.len();
 1432|  6.45k|                self.output_positions.query_end = self.output.len();
 1433|  6.45k|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|  1.44k|                self.output_positions.path_end = self.output.len();
 1437|  1.44k|                self.output.push('?');
 1438|  1.44k|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|    863|                self.output_positions.path_end = self.output.len();
 1442|    863|                self.output_positions.query_end = self.output.len();
 1443|    863|                self.output.push('#');
 1444|    863|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|  64.8k|                self.output.push('/');
 1448|  64.8k|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|  73.6k|    }
_RNvMs11_CsenmunypmJnb_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCsal5YaZOfl0H_5oxrdf:
 1212|  88.3k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|  88.3k|        match self.input.front() {
 1214|    194|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|  88.1k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|  2.11k|            _ => self.parse_relative(),
 1217|       |        }
 1218|  88.3k|    }
_RNvMs11_CsenmunypmJnb_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCsal5YaZOfl0H_5oxrdf:
 1252|  80.5k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|  80.5k|        if self.input.starts_with('/') {
 1254|  77.8k|            self.input.next();
 1255|  77.8k|            self.output.push('/');
 1256|  77.8k|            self.parse_authority()
 1257|       |        } else {
 1258|  2.75k|            self.output_positions.authority_end = self.output.len() - 1;
 1259|  2.75k|            self.parse_path()
 1260|       |        }
 1261|  80.5k|    }
_RNvMs11_CsenmunypmJnb_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarCsal5YaZOfl0H_5oxrdf:
 1523|  5.13M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|  5.13M|        if UNCHECKED || is_url_code_point(c) {
 1525|  5.12M|            self.output.push(c);
 1526|  5.12M|            Ok(())
 1527|  10.3k|        } else if c == '%' {
 1528|  5.03k|            self.read_echar()
 1529|       |        } else {
 1530|  5.36k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|  5.13M|    }
_RNvMs11_CsenmunypmJnb_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E33read_url_query_codepoint_or_echarCsal5YaZOfl0H_5oxrdf:
 1535|  1.83M|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|  1.83M|        if UNCHECKED || is_url_query_code_point(c) {
 1537|  1.83M|            self.output.push(c);
 1538|  1.83M|            Ok(())
 1539|  1.60k|        } else if c == '%' {
 1540|    460|            self.read_echar()
 1541|       |        } else {
 1542|  1.14k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|  1.83M|    }
_RNvMs11_CsenmunypmJnb_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCsal5YaZOfl0H_5oxrdf:
 1187|  88.3k|    fn parse(
 1188|  88.3k|        iri: &'a str,
 1189|  88.3k|        base: Option<IriRef<&'a str>>,
 1190|  88.3k|        output: &'a mut O,
 1191|  88.3k|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|  88.3k|        let mut parser = Self {
 1193|  88.3k|            iri,
 1194|  88.3k|            base,
 1195|  88.3k|            input: ParserInput {
 1196|  88.3k|                value: iri.chars(),
 1197|  88.3k|                position: 0,
 1198|  88.3k|            },
 1199|  88.3k|            output,
 1200|  88.3k|            output_positions: IriElementsPositions {
 1201|  88.3k|                scheme_end: 0,
 1202|  88.3k|                authority_end: 0,
 1203|  88.3k|                path_end: 0,
 1204|  88.3k|                query_end: 0,
 1205|  88.3k|            },
 1206|  88.3k|            input_scheme_end: 0,
 1207|  88.3k|        };
 1208|  88.3k|        parser.parse_scheme_start()?;
 1209|  76.4k|        Ok(parser.output_positions)
 1210|  88.3k|    }
_RNvMsp_CsenmunypmJnb_5oxiriINtB5_3IriNtNtCsjp9TdQkU1Un_5alloc6string6StringE10into_innerCsal5YaZOfl0H_5oxrdf:
  678|  75.3k|    pub fn into_inner(self) -> T {
  679|  75.3k|        self.0.into_inner()
  680|  75.3k|    }
_RNvMsp_CsenmunypmJnb_5oxiriINtB5_3IriNtNtCsjp9TdQkU1Un_5alloc6string6StringE5parseCsal5YaZOfl0H_5oxrdf:
  562|  88.3k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  563|  88.3k|        IriRef::parse(iri)?.try_into()
  564|  88.3k|    }
_RNvXsV_CsenmunypmJnb_5oxiriINtB5_3IriNtNtCsjp9TdQkU1Un_5alloc6string6StringEINtNtCsaXZRpaJvnVB_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsal5YaZOfl0H_5oxrdf:
  981|  76.4k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  982|  76.4k|        if iri.is_absolute() {
  983|  75.3k|            Ok(Self(iri))
  984|       |        } else {
  985|  1.14k|            Err(IriParseError {
  986|  1.14k|                kind: IriParseErrorKind::NoScheme,
  987|  1.14k|            })
  988|       |        }
  989|  76.4k|    }
_RNvCsenmunypmJnb_5oxiri17is_url_code_pointCsal5YaZOfl0H_5oxrdf:
 1573|  6.97M|fn is_url_code_point(c: char) -> bool {
 1574|  6.97M|    matches!(c,
 1575|  3.06M|        'a'..='z'
 1576|  1.13M|        | 'A'..='Z'
 1577|  1.56M|        | '0'..='9'
 1578|       |        | '!'
 1579|       |        | '$'
 1580|       |        | '&'
 1581|       |        | '\''
 1582|       |        | '('
 1583|       |        | ')'
 1584|       |        | '*'
 1585|       |        | '+'
 1586|       |        | ','
 1587|       |        | '-'
 1588|       |        | '.'
 1589|       |        | '/'
 1590|       |        | ':'
 1591|       |        | ';'
 1592|       |        | '='
 1593|       |        | '?'
 1594|       |        | '@'
 1595|       |        | '_'
 1596|       |        | '~'
 1597|  36.5k|        | '\u{A0}'..='\u{D7FF}'
 1598|  15.5k|        | '\u{F900}'..='\u{FDCF}'
 1599|  15.5k|        | '\u{FDF0}'..='\u{FFEF}'
 1600|  6.44k|        | '\u{10000}'..='\u{1FFFD}'
 1601|  1.48k|        | '\u{20000}'..='\u{2FFFD}'
 1602|  1.48k|        | '\u{30000}'..='\u{3FFFD}'
 1603|  1.48k|        | '\u{40000}'..='\u{4FFFD}'
 1604|  1.48k|        | '\u{50000}'..='\u{5FFFD}'
 1605|    937|        | '\u{60000}'..='\u{6FFFD}'
 1606|    937|        | '\u{70000}'..='\u{7FFFD}'
 1607|    937|        | '\u{80000}'..='\u{8FFFD}'
 1608|    937|        | '\u{90000}'..='\u{9FFFD}'
 1609|    937|        | '\u{A0000}'..='\u{AFFFD}'
 1610|      0|        | '\u{B0000}'..='\u{BFFFD}'
 1611|      0|        | '\u{C0000}'..='\u{CFFFD}'
 1612|      0|        | '\u{D0000}'..='\u{DFFFD}'
 1613|      0|        | '\u{E1000}'..='\u{EFFFD}'
 1614|       |    )
 1615|  6.97M|}
_RNvCsenmunypmJnb_5oxiri23is_url_query_code_pointCsal5YaZOfl0H_5oxrdf:
 1618|  1.83M|fn is_url_query_code_point(c: char) -> bool {
 1619|  1.83M|    is_url_code_point(c)
 1620|  1.71k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1621|  1.83M|}
_RNvMs10_CsenmunypmJnb_5oxiriNtB6_11ParserInput11starts_withCsal5YaZOfl0H_5oxrdf:
 1169|   244k|    fn starts_with(&self, c: char) -> bool {
 1170|   244k|        self.value.as_str().starts_with(c)
 1171|   244k|    }
_RNvMs10_CsenmunypmJnb_5oxiriNtB6_11ParserInput4nextCsal5YaZOfl0H_5oxrdf:
 1154|  8.13M|    fn next(&mut self) -> Option<char> {
 1155|  8.13M|        if let Some(head) = self.value.next() {
 1156|  8.04M|            self.position += head.len_utf8();
 1157|  8.04M|            Some(head)
 1158|       |        } else {
 1159|  84.8k|            None
 1160|       |        }
 1161|  8.13M|    }
_RNvMs10_CsenmunypmJnb_5oxiriNtB6_11ParserInput5frontCsal5YaZOfl0H_5oxrdf:
 1164|  88.3k|    fn front(&self) -> Option<char> {
 1165|  88.3k|        self.value.clone().next()
 1166|  88.3k|    }
_RNvXs1b_CsenmunypmJnb_5oxiriNtB6_16VoidOutputBufferNtNtCsaXZRpaJvnVB_4core7default7Default7defaultCsal5YaZOfl0H_5oxrdf:
 1078|  88.3k|#[derive(Default)]
_RNvXsY_CsenmunypmJnb_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCsal5YaZOfl0H_5oxrdf:
 1105|   320k|    fn len(&self) -> usize {
 1106|   320k|        self.len
 1107|   320k|    }
_RNvXsY_CsenmunypmJnb_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsal5YaZOfl0H_5oxrdf:
 1085|  7.96M|    fn push(&mut self, c: char) {
 1086|  7.96M|        self.len += c.len_utf8();
 1087|  7.96M|    }
_RNvXsY_CsenmunypmJnb_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer5clearCsal5YaZOfl0H_5oxrdf:
 1095|  2.08k|    fn clear(&mut self) {
 1096|  2.08k|        self.len = 0;
 1097|  2.08k|    }
_RNvXsY_CsenmunypmJnb_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCsal5YaZOfl0H_5oxrdf:
 1110|   385k|    fn as_str(&self) -> &str {
 1111|   385k|        ""
 1112|   385k|    }
_RNvXsY_CsenmunypmJnb_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCsal5YaZOfl0H_5oxrdf:
 1100|  74.5k|    fn truncate(&mut self, new_len: usize) {
 1101|  74.5k|        self.len = new_len;
 1102|  74.5k|    }

_RNvMNtCsbwVAzcVgG9f_10ppv_lite864softINtB2_2x2INtNtNtNtB4_6x86_644sse24avx212u32x4x2_avx2NtBP_4NoNIENtBN_2G0E3newCsddBejCGwUKp_11rand_chacha:
   13|   290k|    pub fn new(xs: [W; 2]) -> Self {
   14|   290k|        x2(xs, PhantomData)
   15|   290k|    }
_RNvXsG_NtCsbwVAzcVgG9f_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCsaXZRpaJvnVB_4core3ops3bit6BitXor6bitxorCsddBejCGwUKp_11rand_chacha:
   22|   101k|            fn $fn(self, rhs: Self) -> Self::Output {
   23|   101k|                x2::new([self.0[0].$fn(rhs.0[0]), self.0[1].$fn(rhs.0[1])])
   24|   101k|            }
_RNvXsM_NtCsbwVAzcVgG9f_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCsaXZRpaJvnVB_4core3ops5arith9AddAssign10add_assignCsddBejCGwUKp_11rand_chacha:
   32|   101k|            fn $fn_assign(&mut self, rhs: Self) {
   33|   101k|                (self.0[0]).$fn_assign(rhs.0[0]);
   34|   101k|                (self.0[1]).$fn_assign(rhs.0[1]);
   35|   101k|            }
_RNvXs_NtCsbwVAzcVgG9f_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right16CsddBejCGwUKp_11rand_chacha:
   42|  25.4k|        fn $fn(self) -> Self {
   43|  25.4k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  25.4k|        }
_RNvXs_NtCsbwVAzcVgG9f_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right20CsddBejCGwUKp_11rand_chacha:
   42|  25.4k|        fn $fn(self) -> Self {
   43|  25.4k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  25.4k|        }
_RNvXs_NtCsbwVAzcVgG9f_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right24CsddBejCGwUKp_11rand_chacha:
   42|  25.4k|        fn $fn(self) -> Self {
   43|  25.4k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  25.4k|        }
_RNvXs_NtCsbwVAzcVgG9f_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right25CsddBejCGwUKp_11rand_chacha:
   42|  25.4k|        fn $fn(self) -> Self {
   43|  25.4k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  25.4k|        }
_RNvXsg_NtCsbwVAzcVgG9f_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words1230CsddBejCGwUKp_11rand_chacha:
  208|  25.4k|    fn shuffle_lane_words1230(self) -> Self {
  209|  25.4k|        Self::new([
  210|  25.4k|            self.0[0].shuffle_lane_words1230(),
  211|  25.4k|            self.0[1].shuffle_lane_words1230(),
  212|  25.4k|        ])
  213|  25.4k|    }
_RNvXsg_NtCsbwVAzcVgG9f_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words2301CsddBejCGwUKp_11rand_chacha:
  201|  25.4k|    fn shuffle_lane_words2301(self) -> Self {
  202|  25.4k|        Self::new([
  203|  25.4k|            self.0[0].shuffle_lane_words2301(),
  204|  25.4k|            self.0[1].shuffle_lane_words2301(),
  205|  25.4k|        ])
  206|  25.4k|    }
_RNvXsg_NtCsbwVAzcVgG9f_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words3012CsddBejCGwUKp_11rand_chacha:
  215|  25.4k|    fn shuffle_lane_words3012(self) -> Self {
  216|  25.4k|        Self::new([
  217|  25.4k|            self.0[0].shuffle_lane_words3012(),
  218|  25.4k|            self.0[1].shuffle_lane_words3012(),
  219|  25.4k|        ])
  220|  25.4k|    }

_RINvYINtNtCsbwVAzcVgG9f_10ppv_lite866x86_6410SseMachineNtB6_5YesS3NtB6_5YesS4NtB6_4NoNIENtNtB8_5types7Machine7read_leINtNtB6_4sse210u32x4_sse2BR_B12_B1d_EECsddBejCGwUKp_11rand_chacha:
  259|     18|    fn read_le<V>(self, input: &[u8]) -> V
  260|     18|    where
  261|     18|        V: StoreBytes,
  262|     18|    {
  263|     18|        unsafe { V::unsafe_read_le(input) }
  264|     18|    }
_RINvYINtNtCsbwVAzcVgG9f_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine3vecINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EAmj4_ECsddBejCGwUKp_11rand_chacha:
  251|  2.12k|    fn vec<V, A>(self, a: A) -> V
  252|  2.12k|    where
  253|  2.12k|        V: MultiLane<A>,
  254|  2.12k|    {
  255|  2.12k|        V::from_lanes(a)
  256|  2.12k|    }
_RINvYINtNtCsbwVAzcVgG9f_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec128_storageINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EECsddBejCGwUKp_11rand_chacha:
  246|  19.1k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|  19.1k|        unsafe { V::unpack(s) }
  248|  19.1k|    }
_RINvYINtNtCsbwVAzcVgG9f_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec512_storageINtNtB8_4soft2x2INtNtNtB6_4sse24avx212u32x4x2_avx2BS_ENtB2b_2G0EECsddBejCGwUKp_11rand_chacha:
  246|  2.12k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|  2.12k|        unsafe { V::unpack(s) }
  248|  2.12k|    }

_RNvXNtCsbwVAzcVgG9f_10ppv_lite866x86_64INtB2_10SseMachineNtB2_5YesS3NtB2_5YesS4NtB2_4NoNIENtNtB4_5types7Machine8instanceCsddBejCGwUKp_11rand_chacha:
   64|      9|    unsafe fn instance() -> Self {
   65|      9|        SseMachine(PhantomData)
   66|      9|    }
_RNvXs_NtCsbwVAzcVgG9f_10ppv_lite866x86_64INtB4_11Avx2MachineNtB4_4NoNIENtNtB6_5types7Machine8instanceCsddBejCGwUKp_11rand_chacha:
   92|  2.12k|    unsafe fn instance() -> Self {
   93|  2.12k|        Avx2Machine(PhantomData)
   94|  2.12k|    }
_RNvNtCsddBejCGwUKp_11rand_chacha4guts11refill_wide:
  250|  2.12k|        $($pub$(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  251|  2.12k|            #[inline(always)]
  252|  2.12k|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  253|  2.12k|            use std::arch::x86_64::*;
  254|  2.12k|            #[target_feature(enable = "avx2")]
  255|  2.12k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  2.12k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  2.12k|                _mm256_zeroupper();
  258|  2.12k|                ret
  259|  2.12k|            }
  260|  2.12k|            #[target_feature(enable = "avx")]
  261|  2.12k|            #[target_feature(enable = "sse4.1")]
  262|  2.12k|            #[target_feature(enable = "ssse3")]
  263|  2.12k|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  264|  2.12k|                let ret = fn_impl($crate::x86_64::AVX::instance(), $($arg),*);
  265|  2.12k|                _mm256_zeroupper();
  266|  2.12k|                ret
  267|  2.12k|            }
  268|  2.12k|            #[target_feature(enable = "sse4.1")]
  269|  2.12k|            #[target_feature(enable = "ssse3")]
  270|  2.12k|            unsafe fn impl_sse41($($arg: $argty),*) -> $ret {
  271|  2.12k|                fn_impl($crate::x86_64::SSE41::instance(), $($arg),*)
  272|  2.12k|            }
  273|  2.12k|            #[target_feature(enable = "ssse3")]
  274|  2.12k|            unsafe fn impl_ssse3($($arg: $argty),*) -> $ret {
  275|  2.12k|                fn_impl($crate::x86_64::SSSE3::instance(), $($arg),*)
  276|  2.12k|            }
  277|  2.12k|            #[target_feature(enable = "sse2")]
  278|  2.12k|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  279|  2.12k|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  280|  2.12k|            }
  281|  2.12k|            unsafe {
  282|  2.12k|                if is_x86_feature_detected!("avx2") {
  283|  2.12k|                    impl_avx2($($arg),*)
  284|      0|                } else if is_x86_feature_detected!("avx") {
  285|      0|                    impl_avx($($arg),*)
  286|      0|                } else if is_x86_feature_detected!("sse4.1") {
  287|      0|                    impl_sse41($($arg),*)
  288|      0|                } else if is_x86_feature_detected!("ssse3") {
  289|      0|                    impl_ssse3($($arg),*)
  290|      0|                } else if is_x86_feature_detected!("sse2") {
  291|      0|                    impl_sse2($($arg),*)
  292|       |                } else {
  293|      0|                    unimplemented!()
  294|       |                }
  295|       |            }
  296|       |        }
_RNvNvNtCsddBejCGwUKp_11rand_chacha4guts11refill_wide9impl_avx2:
  255|  2.12k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  2.12k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  2.12k|                _mm256_zeroupper();
  258|  2.12k|                ret
  259|  2.12k|            }
_RNvNtCsddBejCGwUKp_11rand_chacha4guts11init_chacha:
  333|      9|        $($pub $(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  334|      9|            #[inline(always)]
  335|      9|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  336|      9|            use std::arch::x86_64::*;
  337|      9|            #[target_feature(enable = "avx")]
  338|      9|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|      9|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|      9|            }
  341|      9|            #[target_feature(enable = "sse2")]
  342|      9|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  343|      9|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  344|      9|            }
  345|      9|            unsafe {
  346|      9|                if is_x86_feature_detected!("avx") {
  347|      9|                    impl_avx($($arg),*)
  348|      0|                } else if is_x86_feature_detected!("sse2") {
  349|      0|                    impl_sse2($($arg),*)
  350|       |                } else {
  351|      0|                    unimplemented!()
  352|       |                }
  353|       |            }
  354|       |        }
_RNvNvNtCsddBejCGwUKp_11rand_chacha4guts11init_chacha8impl_avx:
  338|      9|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|      9|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|      9|            }
_RNvXs2_NtCsbwVAzcVgG9f_10ppv_lite866x86_64NtB5_14vec128_storageINtNtCsaXZRpaJvnVB_4core7convert4FromAmj4_E4from:
  130|      9|    fn from(u32x4: [u32; 4]) -> Self {
  131|      9|        vec128_storage { u32x4 }
  132|      9|    }

_RNvMNtNtNtCsbwVAzcVgG9f_10ppv_lite866x86_644sse24avx2INtB2_12u32x4x2_avx2NtB6_4NoNIE3newCsddBejCGwUKp_11rand_chacha:
 1394|   785k|        fn new(x: __m256i) -> Self {
 1395|   785k|            Self { x, ni: PhantomData }
 1396|   785k|        }
_RNvMsZ_NtNtCsbwVAzcVgG9f_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIE3newCsddBejCGwUKp_11rand_chacha:
   64|   118k|            fn new(x: __m128i) -> Self {
   65|   118k|                $vec {
   66|   118k|                    x,
   67|   118k|                    s3: PhantomData,
   68|   118k|                    s4: PhantomData,
   69|   118k|                    ni: PhantomData,
   70|   118k|                }
   71|   118k|            }
_RNvXs0_NtNtNtCsbwVAzcVgG9f_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types5StoreNtB9_14vec256_storageE6unpackCsddBejCGwUKp_11rand_chacha:
 1402|  4.24k|        unsafe fn unpack(p: vec256_storage) -> Self {
 1403|  4.24k|            Self::new(p.avx)
 1404|  4.24k|        }
_RNvXs10_NtNtCsbwVAzcVgG9f_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes14unsafe_read_leCsddBejCGwUKp_11rand_chacha:
   79|     18|            unsafe fn unsafe_read_le(input: &[u8]) -> Self {
   80|     18|                assert_eq!(input.len(), 16);
   81|     18|                Self::new(_mm_loadu_si128(input.as_ptr() as *const _))
   82|     18|            }
_RNvXs10_NtNtCsbwVAzcVgG9f_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes8write_leCsddBejCGwUKp_11rand_chacha:
   89|  33.9k|            fn write_le(self, out: &mut [u8]) {
   90|  33.9k|                assert_eq!(out.len(), 16);
   91|  33.9k|                unsafe { _mm_storeu_si128(out.as_mut_ptr() as *mut _, self.x) }
   92|  33.9k|            }
_RNvXs1R_NtNtCsbwVAzcVgG9f_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtNtCsaXZRpaJvnVB_4core3ops5arith3Add3addCsddBejCGwUKp_11rand_chacha:
   18|  33.9k|            fn $fn(self, rhs: Self) -> Self::Output {
   19|  33.9k|                Self::new(unsafe { $impl_fn(self.x, rhs.x) })
   20|  33.9k|            }
_RNvXs2_NtNtNtCsbwVAzcVgG9f_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E10from_lanesCsddBejCGwUKp_11rand_chacha:
 1439|  16.9k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 2]) -> Self {
 1440|  16.9k|            Self::new(unsafe { _mm256_setr_m128i(x[0].x, x[1].x) })
 1441|  16.9k|        }
_RNvXs2_NtNtNtCsbwVAzcVgG9f_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E8to_lanesCsddBejCGwUKp_11rand_chacha:
 1430|  16.9k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 2] {
 1431|  16.9k|            unsafe {
 1432|  16.9k|                [
 1433|  16.9k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 0)),
 1434|  16.9k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 1)),
 1435|  16.9k|                ]
 1436|  16.9k|            }
 1437|  16.9k|        }
_RNvXs6_NtNtCsbwVAzcVgG9f_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E10from_lanesCsddBejCGwUKp_11rand_chacha:
  331|  2.12k|    fn from_lanes(xs: [u32; 4]) -> Self {
  332|  2.12k|        unsafe {
  333|  2.12k|            let mut x = _mm_cvtsi64_si128((xs[0] as u64 | ((xs[1] as u64) << 32)) as i64);
  334|  2.12k|            x = _mm_insert_epi64(x, (xs[2] as u64 | ((xs[3] as u64) << 32)) as i64, 1);
  335|  2.12k|            Self::new(x)
  336|  2.12k|        }
  337|  2.12k|    }
_RNvXs6_NtNtCsbwVAzcVgG9f_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E8to_lanesCsddBejCGwUKp_11rand_chacha:
  323|  8.49k|    fn to_lanes(self) -> [u32; 4] {
  324|  8.49k|        unsafe {
  325|  8.49k|            let x = _mm_cvtsi128_si64(self.x) as u64;
  326|  8.49k|            let y = _mm_extract_epi64(self.x, 1) as u64;
  327|  8.49k|            [x as u32, (x >> 32) as u32, y as u32, (y >> 32) as u32]
  328|  8.49k|        }
  329|  8.49k|    }
_RNvXs6_NtNtNtCsbwVAzcVgG9f_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right16CsddBejCGwUKp_11rand_chacha:
 1470|  50.9k|            fn $name(self) -> Self {
 1471|  50.9k|                Self::new(unsafe {
 1472|  50.9k|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|  50.9k|                })
 1474|  50.9k|            }
_RNvXs6_NtNtNtCsbwVAzcVgG9f_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right20CsddBejCGwUKp_11rand_chacha:
 1480|  50.9k|            fn $name(self) -> Self {
 1481|  50.9k|                Self::new(unsafe {
 1482|  50.9k|                    _mm256_or_si256(
 1483|  50.9k|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|  50.9k|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|  50.9k|                    )
 1486|  50.9k|                })
 1487|  50.9k|            }
_RNvXs6_NtNtNtCsbwVAzcVgG9f_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right24CsddBejCGwUKp_11rand_chacha:
 1470|  50.9k|            fn $name(self) -> Self {
 1471|  50.9k|                Self::new(unsafe {
 1472|  50.9k|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|  50.9k|                })
 1474|  50.9k|            }
_RNvXs6_NtNtNtCsbwVAzcVgG9f_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right25CsddBejCGwUKp_11rand_chacha:
 1480|  50.9k|            fn $name(self) -> Self {
 1481|  50.9k|                Self::new(unsafe {
 1482|  50.9k|                    _mm256_or_si256(
 1483|  50.9k|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|  50.9k|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|  50.9k|                    )
 1486|  50.9k|                })
 1487|  50.9k|            }
_RNvXsX_NtNtCsbwVAzcVgG9f_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types5StoreNtB7_14vec128_storageE6unpackCsddBejCGwUKp_11rand_chacha:
   52|  19.1k|            unsafe fn unpack(x: vec128_storage) -> Self {
   53|  19.1k|                Self::new(x.sse2)
   54|  19.1k|            }
_RNvXsc_NtNtNtCsbwVAzcVgG9f_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words1230CsddBejCGwUKp_11rand_chacha:
 1582|  50.9k|        fn shuffle_lane_words1230(self) -> Self {
 1583|  50.9k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b1001_0011) })
 1584|  50.9k|        }
_RNvXsc_NtNtNtCsbwVAzcVgG9f_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words2301CsddBejCGwUKp_11rand_chacha:
 1586|  50.9k|        fn shuffle_lane_words2301(self) -> Self {
 1587|  50.9k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0100_1110) })
 1588|  50.9k|        }
_RNvXsc_NtNtNtCsbwVAzcVgG9f_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words3012CsddBejCGwUKp_11rand_chacha:
 1590|  50.9k|        fn shuffle_lane_words3012(self) -> Self {
 1591|  50.9k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0011_1001) })
 1592|  50.9k|        }
_RNvXse_NtNtNtCsbwVAzcVgG9f_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types5StoreNtB9_14vec512_storageE6unpackCsddBejCGwUKp_11rand_chacha:
 1602|  2.12k|        unsafe fn unpack(p: vec512_storage) -> Self {
 1603|  2.12k|            Self::new([
 1604|  2.12k|                u32x4x2_avx2::unpack(p.avx[0]),
 1605|  2.12k|                u32x4x2_avx2::unpack(p.avx[1]),
 1606|  2.12k|            ])
 1607|  2.12k|        }
_RNvXsf_NtNtNtCsbwVAzcVgG9f_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E10from_lanesCsddBejCGwUKp_11rand_chacha:
 1617|  8.49k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 4]) -> Self {
 1618|  8.49k|            let ab = u32x4x2_avx2::from_lanes([x[0], x[1]]);
 1619|  8.49k|            let cd = u32x4x2_avx2::from_lanes([x[2], x[3]]);
 1620|  8.49k|            Self::new([ab, cd])
 1621|  8.49k|        }
_RNvXsf_NtNtNtCsbwVAzcVgG9f_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E8to_lanesCsddBejCGwUKp_11rand_chacha:
 1611|  8.49k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 4] {
 1612|  8.49k|            let [a, b] = self.0[0].to_lanes();
 1613|  8.49k|            let [c, d] = self.0[1].to_lanes();
 1614|  8.49k|            [a, b, c, d]
 1615|  8.49k|        }
_RNvXsl_NtNtCsbwVAzcVgG9f_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE6insertCsddBejCGwUKp_11rand_chacha:
  523|  29.7k|    fn insert(self, v: u32, i: u32) -> Self {
  524|  29.7k|        Self::new(unsafe {
  525|  29.7k|            match i {
  526|  14.8k|                0 => _mm_insert_epi32(self.x, v as i32, 0),
  527|  14.8k|                1 => _mm_insert_epi32(self.x, v as i32, 1),
  528|      0|                2 => _mm_insert_epi32(self.x, v as i32, 2),
  529|      0|                3 => _mm_insert_epi32(self.x, v as i32, 3),
  530|      0|                _ => unreachable!(),
  531|       |            }
  532|       |        })
  533|  29.7k|    }
_RNvXsl_NtNtCsbwVAzcVgG9f_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE7extractCsddBejCGwUKp_11rand_chacha:
  519|  8.49k|    fn extract(self, i: u32) -> u32 {
  520|  8.49k|        self.to_lanes()[i as usize]
  521|  8.49k|    }
_RNvXsq_NtNtNtCsbwVAzcVgG9f_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCsaXZRpaJvnVB_4core3ops5arith9AddAssign10add_assignCsddBejCGwUKp_11rand_chacha:
 1527|   203k|                fn $assign_fn(&mut self, rhs: Self) {
 1528|   203k|                    *self = self.$bin_fn(rhs);
 1529|   203k|                }
_RNvXsr_NtNtNtCsbwVAzcVgG9f_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCsaXZRpaJvnVB_4core3ops3bit6BitXor6bitxorCsddBejCGwUKp_11rand_chacha:
 1543|   203k|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|   203k|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|   203k|                }
_RNvXsv_NtNtNtCsbwVAzcVgG9f_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCsaXZRpaJvnVB_4core3ops5arith3Add3addCsddBejCGwUKp_11rand_chacha:
 1543|   203k|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|   203k|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|   203k|                }
_RNvXsY_NtNtCsbwVAzcVgG9f_10ppv_lite866x86_644sse2NtB7_14vec128_storageINtNtCsaXZRpaJvnVB_4core7convert4FromINtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEE4fromCsddBejCGwUKp_11rand_chacha:
   58|  2.14k|            fn from(x: $vec<S3, S4, NI>) -> Self {
   59|  2.14k|                vec128_storage { sse2: x.x }
   60|  2.14k|            }
_RNvXsj_NtNtNtCsbwVAzcVgG9f_10ppv_lite866x86_644sse24avx2NtB9_14vec512_storageINtNtCsaXZRpaJvnVB_4core7convert4FromINtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EE4fromCsddBejCGwUKp_11rand_chacha:
 1683|  2.12k|        fn from(x: u32x4x4_avx2<NI>) -> Self {
 1684|  2.12k|            Self {
 1685|  2.12k|                avx: [
 1686|  2.12k|                    vec256_storage { avx: x.0[0].x },
 1687|  2.12k|                    vec256_storage { avx: x.0[1].x },
 1688|  2.12k|                ],
 1689|  2.12k|            }
 1690|  2.12k|        }

_RNvMNtCsfk1XolJ15f9_9quick_xml8encodingNtB2_7Decoder4utf8:
   45|  6.59k|    pub(crate) fn utf8() -> Self {
   46|  6.59k|        Decoder {
   47|  6.59k|            #[cfg(feature = "encoding")]
   48|  6.59k|            encoding: UTF_8,
   49|  6.59k|        }
   50|  6.59k|    }
_RNvMs_NtCsfk1XolJ15f9_9quick_xml8encodingNtB4_7Decoder6decode:
   82|   282k|    pub fn decode<'b>(&self, bytes: &'b [u8]) -> Result<Cow<'b, str>> {
   83|       |        #[cfg(not(feature = "encoding"))]
   84|   282k|        let decoded = Ok(Cow::Borrowed(std::str::from_utf8(bytes)?));
   85|       |
   86|       |        #[cfg(feature = "encoding")]
   87|       |        let decoded = decode(bytes, self.encoding);
   88|       |
   89|   229k|        decoded
   90|   282k|    }

_RNvXs1_NtCsfk1XolJ15f9_9quick_xml6errorsNtB5_5ErrorINtNtCsaXZRpaJvnVB_4core7convert4FromNtNtB7_7escapei11EscapeErrorE4fromCseFzqD1pb09d_7rdf_xml:
   97|  6.71k|    fn from(error: EscapeError) -> Error {
   98|  6.71k|        Error::EscapeError(error)
   99|  6.71k|    }
_RNvXs_NtCsfk1XolJ15f9_9quick_xml6errorsNtB4_5ErrorINtNtCsaXZRpaJvnVB_4core7convert4FromNtNtNtBR_3str5error9Utf8ErrorE4fromB6_:
   81|  52.8k|    fn from(error: Utf8Error) -> Error {
   82|  52.8k|        Error::NonDecodable(Some(error))
   83|  52.8k|    }
_RNvXs1_NtCsfk1XolJ15f9_9quick_xml6errorsNtB5_5ErrorINtNtCsaXZRpaJvnVB_4core7convert4FromNtNtB7_7escapei11EscapeErrorE4fromB7_:
   97|  8.58k|    fn from(error: EscapeError) -> Error {
   98|  8.58k|        Error::EscapeError(error)
   99|  8.58k|    }
_RNvXs2_NtCsfk1XolJ15f9_9quick_xml6errorsNtB5_5ErrorINtNtCsaXZRpaJvnVB_4core7convert4FromNtNtNtB7_6events10attributes9AttrErrorE4fromB7_:
  104|    658|    fn from(error: AttrError) -> Self {
  105|    658|        Error::InvalidAttr(error)
  106|    658|    }

_RINvNtCsfk1XolJ15f9_9quick_xml7escapei13unescape_withNCNvMs2_NtCs6NQ0qd6wXH9_8oxrdfxml6parserINtBX_12RdfXmlReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE15resolve_ns_name0ECseFzqD1pb09d_7rdf_xml:
  162|   122k|pub fn unescape_with<'input, 'entity, F>(
  163|   122k|    raw: &'input str,
  164|   122k|    mut resolve_entity: F,
  165|   122k|) -> Result<Cow<'input, str>, EscapeError>
  166|   122k|where
  167|   122k|    // the lifetime of the output comes from a capture or is `'static`
  168|   122k|    F: FnMut(&str) -> Option<&'entity str>,
  169|   122k|{
  170|   122k|    let bytes = raw.as_bytes();
  171|   122k|    let mut unescaped = None;
  172|   122k|    let mut last_end = 0;
  173|   122k|    let mut iter = memchr2_iter(b'&', b';', bytes);
  174|   136k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
  175|  21.2k|        match iter.next() {
  176|  20.5k|            Some(end) if bytes[end] == b';' => {
  177|  20.2k|                // append valid data
  178|  20.2k|                if unescaped.is_none() {
  179|  12.8k|                    unescaped = Some(String::with_capacity(raw.len()));
  180|  12.8k|                }
  181|  20.2k|                let unescaped = unescaped.as_mut().expect("initialized");
  182|  20.2k|                unescaped.push_str(&raw[last_end..start]);
  183|  20.2k|
  184|  20.2k|                // search for character correctness
  185|  20.2k|                let pat = &raw[start + 1..end];
  186|  20.2k|                if let Some(entity) = pat.strip_prefix('#') {
  187|  10.1k|                    let codepoint = parse_number(entity, start..end)?;
  188|  7.48k|                    unescaped.push_str(codepoint.encode_utf8(&mut [0u8; 4]));
  189|  10.0k|                } else if let Some(value) = named_entity(pat) {
  190|  7.03k|                    unescaped.push_str(value);
  191|  7.03k|                } else if let Some(value) = resolve_entity(pat) {
  192|      0|                    unescaped.push_str(value);
  193|      0|                } else {
  194|  3.04k|                    return Err(EscapeError::UnrecognizedSymbol(
  195|  3.04k|                        start + 1..end,
  196|  3.04k|                        pat.to_string(),
  197|  3.04k|                    ));
  198|       |                }
  199|       |
  200|  14.5k|                last_end = end + 1;
  201|       |            }
  202|    999|            _ => return Err(EscapeError::UnterminatedEntity(start..raw.len())),
  203|       |        }
  204|       |    }
  205|       |
  206|   115k|    if let Some(mut unescaped) = unescaped {
  207|  6.87k|        if let Some(raw) = raw.get(last_end..) {
  208|  6.87k|            unescaped.push_str(raw);
  209|  6.87k|        }
  210|  6.87k|        Ok(Cow::Owned(unescaped))
  211|       |    } else {
  212|   108k|        Ok(Cow::Borrowed(raw))
  213|       |    }
  214|   122k|}
_RINvNtCsfk1XolJ15f9_9quick_xml7escapei13unescape_withNCNvMs2_NtCs6NQ0qd6wXH9_8oxrdfxml6parserINtBX_12RdfXmlReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE16parse_text_event0ECseFzqD1pb09d_7rdf_xml:
  162|  77.6k|pub fn unescape_with<'input, 'entity, F>(
  163|  77.6k|    raw: &'input str,
  164|  77.6k|    mut resolve_entity: F,
  165|  77.6k|) -> Result<Cow<'input, str>, EscapeError>
  166|  77.6k|where
  167|  77.6k|    // the lifetime of the output comes from a capture or is `'static`
  168|  77.6k|    F: FnMut(&str) -> Option<&'entity str>,
  169|  77.6k|{
  170|  77.6k|    let bytes = raw.as_bytes();
  171|  77.6k|    let mut unescaped = None;
  172|  77.6k|    let mut last_end = 0;
  173|  77.6k|    let mut iter = memchr2_iter(b'&', b';', bytes);
  174|  88.8k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
  175|  19.7k|        match iter.next() {
  176|  16.3k|            Some(end) if bytes[end] == b';' => {
  177|  14.7k|                // append valid data
  178|  14.7k|                if unescaped.is_none() {
  179|  4.47k|                    unescaped = Some(String::with_capacity(raw.len()));
  180|  10.2k|                }
  181|  14.7k|                let unescaped = unescaped.as_mut().expect("initialized");
  182|  14.7k|                unescaped.push_str(&raw[last_end..start]);
  183|  14.7k|
  184|  14.7k|                // search for character correctness
  185|  14.7k|                let pat = &raw[start + 1..end];
  186|  14.7k|                if let Some(entity) = pat.strip_prefix('#') {
  187|    977|                    let codepoint = parse_number(entity, start..end)?;
  188|    561|                    unescaped.push_str(codepoint.encode_utf8(&mut [0u8; 4]));
  189|  13.7k|                } else if let Some(value) = named_entity(pat) {
  190|  10.5k|                    unescaped.push_str(value);
  191|  10.5k|                } else if let Some(value) = resolve_entity(pat) {
  192|      0|                    unescaped.push_str(value);
  193|      0|                } else {
  194|  3.18k|                    return Err(EscapeError::UnrecognizedSymbol(
  195|  3.18k|                        start + 1..end,
  196|  3.18k|                        pat.to_string(),
  197|  3.18k|                    ));
  198|       |                }
  199|       |
  200|  11.1k|                last_end = end + 1;
  201|       |            }
  202|  4.98k|            _ => return Err(EscapeError::UnterminatedEntity(start..raw.len())),
  203|       |        }
  204|       |    }
  205|       |
  206|  69.1k|    if let Some(mut unescaped) = unescaped {
  207|    866|        if let Some(raw) = raw.get(last_end..) {
  208|    866|            unescaped.push_str(raw);
  209|    866|        }
  210|    866|        Ok(Cow::Owned(unescaped))
  211|       |    } else {
  212|  68.2k|        Ok(Cow::Borrowed(raw))
  213|       |    }
  214|  77.6k|}
_RINvNtCsfk1XolJ15f9_9quick_xml7escapei13unescape_withNCNvMs2_NtCs6NQ0qd6wXH9_8oxrdfxml6parserINtBX_12RdfXmlReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE17convert_attribute0ECseFzqD1pb09d_7rdf_xml:
  162|  27.8k|pub fn unescape_with<'input, 'entity, F>(
  163|  27.8k|    raw: &'input str,
  164|  27.8k|    mut resolve_entity: F,
  165|  27.8k|) -> Result<Cow<'input, str>, EscapeError>
  166|  27.8k|where
  167|  27.8k|    // the lifetime of the output comes from a capture or is `'static`
  168|  27.8k|    F: FnMut(&str) -> Option<&'entity str>,
  169|  27.8k|{
  170|  27.8k|    let bytes = raw.as_bytes();
  171|  27.8k|    let mut unescaped = None;
  172|  27.8k|    let mut last_end = 0;
  173|  27.8k|    let mut iter = memchr2_iter(b'&', b';', bytes);
  174|   313k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
  175|   285k|        match iter.next() {
  176|   285k|            Some(end) if bytes[end] == b';' => {
  177|   285k|                // append valid data
  178|   285k|                if unescaped.is_none() {
  179|  4.33k|                    unescaped = Some(String::with_capacity(raw.len()));
  180|   281k|                }
  181|   285k|                let unescaped = unescaped.as_mut().expect("initialized");
  182|   285k|                unescaped.push_str(&raw[last_end..start]);
  183|   285k|
  184|   285k|                // search for character correctness
  185|   285k|                let pat = &raw[start + 1..end];
  186|   285k|                if let Some(entity) = pat.strip_prefix('#') {
  187|      0|                    let codepoint = parse_number(entity, start..end)?;
  188|      0|                    unescaped.push_str(codepoint.encode_utf8(&mut [0u8; 4]));
  189|   285k|                } else if let Some(value) = named_entity(pat) {
  190|   285k|                    unescaped.push_str(value);
  191|   285k|                } else if let Some(value) = resolve_entity(pat) {
  192|      0|                    unescaped.push_str(value);
  193|      0|                } else {
  194|      0|                    return Err(EscapeError::UnrecognizedSymbol(
  195|      0|                        start + 1..end,
  196|      0|                        pat.to_string(),
  197|      0|                    ));
  198|       |                }
  199|       |
  200|   285k|                last_end = end + 1;
  201|       |            }
  202|      0|            _ => return Err(EscapeError::UnterminatedEntity(start..raw.len())),
  203|       |        }
  204|       |    }
  205|       |
  206|  27.8k|    if let Some(mut unescaped) = unescaped {
  207|  4.33k|        if let Some(raw) = raw.get(last_end..) {
  208|  4.33k|            unescaped.push_str(raw);
  209|  4.33k|        }
  210|  4.33k|        Ok(Cow::Owned(unescaped))
  211|       |    } else {
  212|  23.4k|        Ok(Cow::Borrowed(raw))
  213|       |    }
  214|  27.8k|}
_RNCINvNtCsfk1XolJ15f9_9quick_xml7escapei13unescape_withNCNvMs2_NtCs6NQ0qd6wXH9_8oxrdfxml6parserINtBZ_12RdfXmlReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE15resolve_ns_name0E0CseFzqD1pb09d_7rdf_xml:
  174|  34.9k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
_RNCINvNtCsfk1XolJ15f9_9quick_xml7escapei13unescape_withNCNvMs2_NtCs6NQ0qd6wXH9_8oxrdfxml6parserINtBZ_12RdfXmlReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE16parse_text_event0E0CseFzqD1pb09d_7rdf_xml:
  174|  21.9k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
_RNCINvNtCsfk1XolJ15f9_9quick_xml7escapei13unescape_withNCNvMs2_NtCs6NQ0qd6wXH9_8oxrdfxml6parserINtBZ_12RdfXmlReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE17convert_attribute0E0CseFzqD1pb09d_7rdf_xml:
  174|   288k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
_RNvNtCsfk1XolJ15f9_9quick_xml7escapei6escape:
   74|  44.4k|pub fn escape(raw: &str) -> Cow<str> {
   75|  44.4k|    _escape(raw, |ch| matches!(ch, b'<' | b'>' | b'&' | b'\'' | b'\"'))
   76|  44.4k|}
_RNCNvNtCsfk1XolJ15f9_9quick_xml7escapei6escape0B5_:
   75|  2.41M|    _escape(raw, |ch| matches!(ch, b'<' | b'>' | b'&' | b'\'' | b'\"'))
_RINvNtCsfk1XolJ15f9_9quick_xml7escapei7__escapeNCNvB2_6escape0EB4_:
   97|  44.4k|pub(crate) fn _escape<F: Fn(u8) -> bool>(raw: &str, escape_chars: F) -> Cow<str> {
   98|  44.4k|    let bytes = raw.as_bytes();
   99|  44.4k|    let mut escaped = None;
  100|  44.4k|    let mut iter = bytes.iter();
  101|  44.4k|    let mut pos = 0;
  102|   345k|    while let Some(i) = iter.position(|&b| escape_chars(b)) {
  103|   301k|        if escaped.is_none() {
  104|  6.39k|            escaped = Some(Vec::with_capacity(raw.len()));
  105|   295k|        }
  106|   301k|        let escaped = escaped.as_mut().expect("initialized");
  107|   301k|        let new_pos = pos + i;
  108|   301k|        escaped.extend_from_slice(&bytes[pos..new_pos]);
  109|   301k|        match bytes[new_pos] {
  110|    263|            b'<' => escaped.extend_from_slice(b"&lt;"),
  111|  6.83k|            b'>' => escaped.extend_from_slice(b"&gt;"),
  112|   290k|            b'\'' => escaped.extend_from_slice(b"&apos;"),
  113|    689|            b'&' => escaped.extend_from_slice(b"&amp;"),
  114|  2.70k|            b'"' => escaped.extend_from_slice(b"&quot;"),
  115|       |
  116|       |            // This set of escapes handles characters that should be escaped
  117|       |            // in elements of xs:lists, because those characters works as
  118|       |            // delimiters of list elements
  119|      0|            b'\t' => escaped.extend_from_slice(b"&#9;"),
  120|      0|            b'\n' => escaped.extend_from_slice(b"&#10;"),
  121|      0|            b'\r' => escaped.extend_from_slice(b"&#13;"),
  122|      0|            b' ' => escaped.extend_from_slice(b"&#32;"),
  123|      0|            _ => unreachable!(
  124|      0|                "Only '<', '>','\', '&', '\"', '\\t', '\\r', '\\n', and ' ' are escaped"
  125|      0|            ),
  126|       |        }
  127|   301k|        pos = new_pos + 1;
  128|       |    }
  129|       |
  130|  44.4k|    if let Some(mut escaped) = escaped {
  131|  6.39k|        if let Some(raw) = bytes.get(pos..) {
  132|  6.39k|            escaped.extend_from_slice(raw);
  133|  6.39k|        }
  134|       |        // SAFETY: we operate on UTF-8 input and search for an one byte chars only,
  135|       |        // so all slices that was put to the `escaped` is a valid UTF-8 encoded strings
  136|       |        // TODO: Can be replaced with `unsafe { String::from_utf8_unchecked() }`
  137|       |        // if unsafe code will be allowed
  138|  6.39k|        Cow::Owned(String::from_utf8(escaped).unwrap())
  139|       |    } else {
  140|  38.0k|        Cow::Borrowed(raw)
  141|       |    }
  142|  44.4k|}
_RNCINvNtCsfk1XolJ15f9_9quick_xml7escapei7__escapeNCNvB4_6escape0E0B6_:
  102|  2.41M|    while let Some(i) = iter.position(|&b| escape_chars(b)) {
_RNvNtCsfk1XolJ15f9_9quick_xml7escapei12named_entity:
  217|   309k|fn named_entity(name: &str) -> Option<&str> {
  218|       |    // match over strings are not allowed in const functions
  219|   309k|    let s = match name.as_bytes() {
  220|   309k|        b"lt" => "<",
  221|  7.02k|        b"gt" => ">",
  222|   299k|        b"amp" => "&",
  223|   296k|        b"apos" => "'",
  224|  2.70k|        b"quot" => "\"",
  225|  6.22k|        _ => return None,
  226|       |    };
  227|   303k|    Some(s)
  228|   309k|}
_RNvNtCsfk1XolJ15f9_9quick_xml7escapei12parse_number:
 1694|  11.1k|fn parse_number(bytes: &str, range: Range<usize>) -> Result<char, EscapeError> {
 1695|  11.1k|    let code = if let Some(hex_digits) = bytes.strip_prefix('x') {
 1696|  1.07k|        parse_hexadecimal(hex_digits)
 1697|       |    } else {
 1698|  10.0k|        parse_decimal(bytes)
 1699|  2.27k|    }?;
 1700|  8.86k|    if code == 0 {
 1701|    619|        return Err(EscapeError::EntityWithNull(range));
 1702|  8.24k|    }
 1703|  8.24k|    match std::char::from_u32(code) {
 1704|  8.05k|        Some(c) => Ok(c),
 1705|    199|        None => Err(EscapeError::InvalidCodepoint(code)),
 1706|       |    }
 1707|  11.1k|}
_RNvNtCsfk1XolJ15f9_9quick_xml7escapei17parse_hexadecimal:
 1709|  1.07k|fn parse_hexadecimal(bytes: &str) -> Result<u32, EscapeError> {
 1710|  1.07k|    // maximum code is 0x10FFFF => 6 characters
 1711|  1.07k|    if bytes.len() > 6 {
 1712|    200|        return Err(EscapeError::TooLongHexadecimal);
 1713|    870|    }
 1714|    870|    let mut code = 0;
 1715|  1.25k|    for b in bytes.bytes() {
 1716|  1.25k|        code <<= 4;
 1717|  1.25k|        code += match b {
 1718|  1.25k|            b'0'..=b'9' => b - b'0',
 1719|    856|            b'a'..=b'f' => b - b'a' + 10,
 1720|    623|            b'A'..=b'F' => b - b'A' + 10,
 1721|    433|            b => return Err(EscapeError::InvalidHexadecimal(b as char)),
 1722|       |        } as u32;
 1723|       |    }
 1724|    437|    Ok(code)
 1725|  1.07k|}
_RNvNtCsfk1XolJ15f9_9quick_xml7escapei13parse_decimal:
 1727|  10.0k|fn parse_decimal(bytes: &str) -> Result<u32, EscapeError> {
 1728|  10.0k|    // maximum code is 0x10FFFF = 1114111 => 7 characters
 1729|  10.0k|    if bytes.len() > 7 {
 1730|    198|        return Err(EscapeError::TooLongDecimal);
 1731|  9.87k|    }
 1732|  9.87k|    let mut code = 0;
 1733|  42.3k|    for b in bytes.bytes() {
 1734|  42.3k|        code *= 10;
 1735|  42.3k|        code += match b {
 1736|  41.5k|            b'0'..=b'9' => b - b'0',
 1737|  1.44k|            b => return Err(EscapeError::InvalidDecimal(b as char)),
 1738|       |        } as u32;
 1739|       |    }
 1740|  8.43k|    Ok(code)
 1741|  10.0k|}

_RINvMNtNtCsfk1XolJ15f9_9quick_xml6events10attributesNtB3_9Attribute30decode_and_unescape_value_withINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShENCNvMs2_NtCs6NQ0qd6wXH9_8oxrdfxml6parserINtB2I_12RdfXmlReaderB1z_E17convert_attribute0ECseFzqD1pb09d_7rdf_xml:
   95|  27.8k|    pub fn decode_and_unescape_value_with<'entity, B>(
   96|  27.8k|        &self,
   97|  27.8k|        reader: &Reader<B>,
   98|  27.8k|        resolve_entity: impl FnMut(&str) -> Option<&'entity str>,
   99|  27.8k|    ) -> XmlResult<Cow<'a, str>> {
  100|  27.8k|        let decoded = match &self.value {
  101|  27.8k|            Cow::Borrowed(bytes) => reader.decoder().decode(bytes)?,
  102|       |            // Convert to owned, because otherwise Cow will be bound with wrong lifetime
  103|      0|            Cow::Owned(bytes) => reader.decoder().decode(bytes)?.into_owned().into(),
  104|       |        };
  105|       |
  106|  27.8k|        match unescape_with(&decoded, resolve_entity)? {
  107|       |            // Because result is borrowed, no replacements was done and we can use original string
  108|  23.4k|            Cow::Borrowed(_) => Ok(decoded),
  109|  4.33k|            Cow::Owned(s) => Ok(s.into()),
  110|       |        }
  111|  27.8k|    }
_RNvXs4_NtNtCsfk1XolJ15f9_9quick_xml6events10attributesNtB5_10AttributesNtNtNtNtCsaXZRpaJvnVB_4core4iter6traits8iterator8Iterator4nextCseFzqD1pb09d_7rdf_xml:
  231|   126k|    fn next(&mut self) -> Option<Self::Item> {
  232|   126k|        match self.state.next(self.bytes) {
  233|  85.4k|            None => None,
  234|  39.6k|            Some(Ok(a)) => Some(Ok(a.map(|range| &self.bytes[range]).into())),
  235|  1.62k|            Some(Err(e)) => Some(Err(e)),
  236|       |        }
  237|   126k|    }
_RNvXs1_NtNtCsfk1XolJ15f9_9quick_xml6events10attributesNtB5_9AttributeINtNtCsaXZRpaJvnVB_4core7convert4FromTReB1H_EE4from:
  158|  37.8k|    fn from(val: (&'a str, &'a str)) -> Attribute<'a> {
  159|  37.8k|        Attribute {
  160|  37.8k|            key: QName(val.0.as_bytes()),
  161|  37.8k|            value: match escape(val.1) {
  162|  32.0k|                Cow::Borrowed(s) => Cow::Borrowed(s.as_bytes()),
  163|  5.84k|                Cow::Owned(s) => Cow::Owned(s.into_bytes()),
  164|       |            },
  165|       |        }
  166|  37.8k|    }
_RNvXs2_NtNtCsfk1XolJ15f9_9quick_xml6events10attributesNtB5_9AttributeINtNtCsaXZRpaJvnVB_4core7convert4FromINtB5_4AttrRShEE4fromB9_:
  171|  91.7k|    fn from(attr: Attr<&'a [u8]>) -> Self {
  172|  91.7k|        Self {
  173|  91.7k|            key: attr.key(),
  174|  91.7k|            value: Cow::Borrowed(attr.value()),
  175|  91.7k|        }
  176|  91.7k|    }
_RNvMs3_NtNtCsfk1XolJ15f9_9quick_xml6events10attributesNtB5_10Attributes4wrapB9_:
  198|   201k|    pub(crate) fn wrap(buf: &'a [u8], pos: usize, html: bool) -> Self {
  199|   201k|        Self {
  200|   201k|            bytes: buf,
  201|   201k|            state: IterState::new(pos, html),
  202|   201k|        }
  203|   201k|    }
_RNvMs3_NtNtCsfk1XolJ15f9_9quick_xml6events10attributesNtB5_10Attributes11with_checks:
  221|   113k|    pub fn with_checks(&mut self, val: bool) -> &mut Attributes<'a> {
  222|   113k|        self.state.check_duplicates = val;
  223|   113k|        self
  224|   113k|    }
_RNvXs4_NtNtCsfk1XolJ15f9_9quick_xml6events10attributesNtB5_10AttributesNtNtNtNtCsaXZRpaJvnVB_4core4iter6traits8iterator8Iterator4nextB9_:
  231|   159k|    fn next(&mut self) -> Option<Self::Item> {
  232|   159k|        match self.state.next(self.bytes) {
  233|   101k|            None => None,
  234|  52.1k|            Some(Ok(a)) => Some(Ok(a.map(|range| &self.bytes[range]).into())),
  235|  6.67k|            Some(Err(e)) => Some(Err(e)),
  236|       |        }
  237|   159k|    }
_RNCNvXs4_NtNtCsfk1XolJ15f9_9quick_xml6events10attributesNtB7_10AttributesNtNtNtNtCsaXZRpaJvnVB_4core4iter6traits8iterator8Iterator4next0Bb_:
  234|   183k|            Some(Ok(a)) => Some(Ok(a.map(|range| &self.bytes[range]).into())),
_RINvMs8_NtNtCsfk1XolJ15f9_9quick_xml6events10attributesINtB6_4AttrINtNtNtCsaXZRpaJvnVB_4core3ops5range5RangejEE3mapRShNCNvXs4_B6_NtB6_10AttributesNtNtNtNtB19_4iter6traits8iterator8Iterator4next0EBa_:
  403|  91.7k|    pub fn map<U, F>(self, mut f: F) -> Attr<U>
  404|  91.7k|    where
  405|  91.7k|        F: FnMut(T) -> U,
  406|  91.7k|    {
  407|  91.7k|        match self {
  408|  91.6k|            Attr::DoubleQ(key, value) => Attr::DoubleQ(f(key), f(value)),
  409|     90|            Attr::SingleQ(key, value) => Attr::SingleQ(f(key), f(value)),
  410|      0|            Attr::Empty(key) => Attr::Empty(f(key)),
  411|      0|            Attr::Unquoted(key, value) => Attr::Unquoted(f(key), f(value)),
  412|       |        }
  413|  91.7k|    }
_RNvMs9_NtNtCsfk1XolJ15f9_9quick_xml6events10attributesINtB5_4AttrRShE3keyB9_:
  419|  91.7k|    pub fn key(&self) -> QName<'a> {
  420|  91.7k|        QName(match self {
  421|  91.6k|            Attr::DoubleQ(key, _) => key,
  422|     90|            Attr::SingleQ(key, _) => key,
  423|      0|            Attr::Empty(key) => key,
  424|      0|            Attr::Unquoted(key, _) => key,
  425|       |        })
  426|  91.7k|    }
_RNvMs9_NtNtCsfk1XolJ15f9_9quick_xml6events10attributesINtB5_4AttrRShE5valueB9_:
  432|  91.7k|    pub fn value(&self) -> &'a [u8] {
  433|  91.7k|        match self {
  434|  91.6k|            Attr::DoubleQ(_, value) => value,
  435|     90|            Attr::SingleQ(_, value) => value,
  436|      0|            Attr::Empty(_) => &[],
  437|      0|            Attr::Unquoted(_, value) => value,
  438|       |        }
  439|  91.7k|    }
_RNvMsc_NtNtCsfk1XolJ15f9_9quick_xml6events10attributesNtB5_9IterState3new:
  521|   201k|    pub fn new(offset: usize, html: bool) -> Self {
  522|   201k|        Self {
  523|   201k|            state: State::Next(offset),
  524|   201k|            html,
  525|   201k|            check_duplicates: true,
  526|   201k|            keys: Vec::new(),
  527|   201k|        }
  528|   201k|    }
_RNvMsc_NtNtCsfk1XolJ15f9_9quick_xml6events10attributesNtB5_9IterState7recover:
  533|   286k|    fn recover(&self, slice: &[u8]) -> Option<usize> {
  534|   286k|        match self.state {
  535|      0|            State::Done => None,
  536|   286k|            State::Next(offset) => Some(offset),
  537|      0|            State::SkipValue(offset) => self.skip_value(slice, offset),
  538|      0|            State::SkipEqValue(offset) => self.skip_eq_value(slice, offset),
  539|       |        }
  540|   286k|    }
_RNvMsc_NtNtCsfk1XolJ15f9_9quick_xml6events10attributesNtB5_9IterState20check_for_duplicatesB9_:
  603|  93.0k|    fn check_for_duplicates(
  604|  93.0k|        &mut self,
  605|  93.0k|        slice: &[u8],
  606|  93.0k|        key: Range<usize>,
  607|  93.0k|    ) -> Result<Range<usize>, AttrError> {
  608|  93.0k|        if self.check_duplicates {
  609|  39.9k|            if let Some(prev) = self
  610|  39.9k|                .keys
  611|  39.9k|                .iter()
  612|  39.9k|                .find(|r| slice[(*r).clone()] == slice[key.clone()])
  613|       |            {
  614|     36|                return Err(AttrError::Duplicated(key.start, prev.start));
  615|  39.9k|            }
  616|  39.9k|            self.keys.push(key.clone());
  617|  53.0k|        }
  618|  93.0k|        Ok(key)
  619|  93.0k|    }
_RNCNvMsc_NtNtCsfk1XolJ15f9_9quick_xml6events10attributesNtB7_9IterState20check_for_duplicates0Bb_:
  612|  2.18k|                .find(|r| slice[(*r).clone()] == slice[key.clone()])
_RNvMsc_NtNtCsfk1XolJ15f9_9quick_xml6events10attributesNtB5_9IterState8key_onlyB9_:
  627|  6.94k|    fn key_only(&mut self, slice: &[u8], key: Range<usize>, offset: usize) -> Option<AttrResult> {
  628|  6.94k|        Some(if self.html {
  629|      0|            self.check_for_duplicates(slice, key).map(Attr::Empty)
  630|       |        } else {
  631|  6.94k|            Err(AttrError::ExpectedEq(offset))
  632|       |        })
  633|  6.94k|    }
_RNvMsc_NtNtCsfk1XolJ15f9_9quick_xml6events10attributesNtB5_9IterState8double_qB9_:
  636|  91.6k|    fn double_q(&mut self, key: Range<usize>, value: Range<usize>) -> Option<AttrResult> {
  637|  91.6k|        self.state = State::Next(value.end + 1); // +1 for `"`
  638|  91.6k|
  639|  91.6k|        Some(Ok(Attr::DoubleQ(key, value)))
  640|  91.6k|    }
_RNvMsc_NtNtCsfk1XolJ15f9_9quick_xml6events10attributesNtB5_9IterState8single_qB9_:
  643|     90|    fn single_q(&mut self, key: Range<usize>, value: Range<usize>) -> Option<AttrResult> {
  644|     90|        self.state = State::Next(value.end + 1); // +1 for `'`
  645|     90|
  646|     90|        Some(Ok(Attr::SingleQ(key, value)))
  647|     90|    }
_RNvMsc_NtNtCsfk1XolJ15f9_9quick_xml6events10attributesNtB5_9IterState4next:
  649|   286k|    pub fn next(&mut self, slice: &[u8]) -> Option<AttrResult> {
  650|   286k|        let mut iter = match self.recover(slice) {
  651|   286k|            Some(offset) => (offset..).zip(slice[offset..].iter()),
  652|      0|            None => return None,
  653|       |        };
  654|       |
  655|       |        // Index where next key started
  656|   286k|        let start_key = match iter.find(|(_, &b)| !is_whitespace(b)) {
  657|       |            // Input: `    key`
  658|       |            //             ^
  659|   100k|            Some((s, _)) => s,
  660|       |            // Input: `    `
  661|       |            //             ^
  662|       |            None => {
  663|       |                // Because we reach end-of-input, stop iteration on next call
  664|   186k|                self.state = State::Done;
  665|   186k|                return None;
  666|       |            }
  667|       |        };
  668|       |        // Span of a key
  669|   100k|        let (key, offset) = match iter.find(|(_, &b)| b == b'=' || is_whitespace(b)) {
  670|       |            // Input: `    key=`
  671|       |            //             |  ^
  672|       |            //             s  e
  673|  85.5k|            Some((e, b'=')) => (start_key..e, e),
  674|       |
  675|       |            // Input: `    key `
  676|       |            //                ^
  677|  10.4k|            Some((e, _)) => match iter.find(|(_, &b)| !is_whitespace(b)) {
  678|       |                // Input: `    key  =`
  679|       |                //             |  | ^
  680|       |                //     start_key  e
  681|  7.47k|                Some((offset, b'=')) => (start_key..e, offset),
  682|       |                // Input: `    key  x`
  683|       |                //             |  | ^
  684|       |                //     start_key  e
  685|       |                // If HTML-like attributes is allowed, this is the result, otherwise error
  686|  2.64k|                Some((offset, _)) => {
  687|  2.64k|                    // In any case, recovering is not required
  688|  2.64k|                    self.state = State::Next(offset);
  689|  2.64k|                    return self.key_only(slice, start_key..e, offset);
  690|       |                }
  691|       |                // Input: `    key  `
  692|       |                //             |  | ^
  693|       |                //     start_key  e
  694|       |                // If HTML-like attributes is allowed, this is the result, otherwise error
  695|       |                None => {
  696|       |                    // Because we reach end-of-input, stop iteration on next call
  697|    361|                    self.state = State::Done;
  698|    361|                    return self.key_only(slice, start_key..e, slice.len());
  699|       |                }
  700|       |            },
  701|       |
  702|       |            // Input: `    key`
  703|       |            //             |  ^
  704|       |            //             s  e = len()
  705|       |            // If HTML-like attributes is allowed, this is the result, otherwise error
  706|       |            None => {
  707|       |                // Because we reach end-of-input, stop iteration on next call
  708|  3.94k|                self.state = State::Done;
  709|  3.94k|                let e = slice.len();
  710|  3.94k|                return self.key_only(slice, start_key..e, e);
  711|       |            }
  712|       |        };
  713|       |
  714|  93.0k|        let key = match self.check_for_duplicates(slice, key) {
  715|     36|            Err(e) => {
  716|     36|                self.state = State::SkipEqValue(offset);
  717|     36|                return Some(Err(e));
  718|       |            }
  719|  93.0k|            Ok(key) => key,
  720|       |        };
  721|       |
  722|       |        ////////////////////////////////////////////////////////////////////////
  723|       |
  724|       |        // Gets the position of quote and quote type
  725|  93.0k|        let (start_value, quote) = match iter.find(|(_, &b)| !is_whitespace(b)) {
  726|       |            // Input: `    key  =  "`
  727|       |            //                     ^
  728|  91.8k|            Some((s, b'"')) => (s + 1, b'"'),
  729|       |            // Input: `    key  =  '`
  730|       |            //                     ^
  731|     91|            Some((s, b'\'')) => (s + 1, b'\''),
  732|       |
  733|       |            // Input: `    key  =  x`
  734|       |            //                     ^
  735|       |            // If HTML-like attributes is allowed, this is the start of the value
  736|      0|            Some((s, _)) if self.html => {
  737|       |                // We do not check validity of attribute value characters as required
  738|       |                // according to https://html.spec.whatwg.org/#unquoted. It can be done
  739|       |                // during validation phase
  740|      0|                let end = match iter.find(|(_, &b)| is_whitespace(b)) {
  741|       |                    // Input: `    key  =  value `
  742|       |                    //                     |    ^
  743|       |                    //                     s    e
  744|      0|                    Some((e, _)) => e,
  745|       |                    // Input: `    key  =  value`
  746|       |                    //                     |    ^
  747|       |                    //                     s    e = len()
  748|      0|                    None => slice.len(),
  749|       |                };
  750|      0|                self.state = State::Next(end);
  751|      0|                return Some(Ok(Attr::Unquoted(key, s..end)));
  752|       |            }
  753|       |            // Input: `    key  =  x`
  754|       |            //                     ^
  755|    786|            Some((s, _)) => {
  756|    786|                self.state = State::SkipValue(s);
  757|    786|                return Some(Err(AttrError::UnquotedValue(s)));
  758|       |            }
  759|       |
  760|       |            // Input: `    key  =  `
  761|       |            //                     ^
  762|       |            None => {
  763|       |                // Because we reach end-of-input, stop iteration on next call
  764|    303|                self.state = State::Done;
  765|    303|                return Some(Err(AttrError::ExpectedValue(slice.len())));
  766|       |            }
  767|       |        };
  768|       |
  769|  91.9k|        match iter.find(|(_, &b)| b == quote) {
  770|       |            // Input: `    key  =  "   "`
  771|       |            //                         ^
  772|  91.6k|            Some((e, b'"')) => self.double_q(key, start_value..e),
  773|       |            // Input: `    key  =  '   '`
  774|       |            //                         ^
  775|     90|            Some((e, _)) => self.single_q(key, start_value..e),
  776|       |
  777|       |            // Input: `    key  =  "   `
  778|       |            // Input: `    key  =  '   `
  779|       |            //                         ^
  780|       |            // Closing quote not found
  781|       |            None => {
  782|       |                // Because we reach end-of-input, stop iteration on next call
  783|    226|                self.state = State::Done;
  784|    226|                Some(Err(AttrError::ExpectedQuote(slice.len(), quote)))
  785|       |            }
  786|       |        }
  787|   286k|    }
_RNCNvMsc_NtNtCsfk1XolJ15f9_9quick_xml6events10attributesNtB7_9IterState4next0Bb_:
  656|   218k|        let start_key = match iter.find(|(_, &b)| !is_whitespace(b)) {
_RNCNvMsc_NtNtCsfk1XolJ15f9_9quick_xml6events10attributesNtB7_9IterState4nexts_0Bb_:
  669|   926k|        let (key, offset) = match iter.find(|(_, &b)| b == b'=' || is_whitespace(b)) {
_RNCNvMsc_NtNtCsfk1XolJ15f9_9quick_xml6events10attributesNtB7_9IterState4nexts0_0Bb_:
  677|  57.9k|            Some((e, _)) => match iter.find(|(_, &b)| !is_whitespace(b)) {
_RNCNvMsc_NtNtCsfk1XolJ15f9_9quick_xml6events10attributesNtB7_9IterState4nexts1_0Bb_:
  725|   107k|        let (start_value, quote) = match iter.find(|(_, &b)| !is_whitespace(b)) {
_RNCNvMsc_NtNtCsfk1XolJ15f9_9quick_xml6events10attributesNtB7_9IterState4nexts3_0Bb_:
  769|  8.00M|        match iter.find(|(_, &b)| b == quote) {

_RNvMNtCsfk1XolJ15f9_9quick_xml6eventsNtB2_10BytesStart4nameCseFzqD1pb09d_7rdf_xml:
  170|   106k|    pub fn name(&self) -> QName {
  171|   106k|        QName(&self.buf[..self.name_len])
  172|   106k|    }
_RNvMs4_NtCsfk1XolJ15f9_9quick_xml6eventsNtB5_8BytesEnd4wrapCseFzqD1pb09d_7rdf_xml:
  596|  24.5k|    pub(crate) fn wrap(name: Cow<'a, [u8]>) -> Self {
  597|  24.5k|        BytesEnd { name }
  598|  24.5k|    }
_RNvMs7_NtCsfk1XolJ15f9_9quick_xml6eventsNtB5_9BytesText3newCseFzqD1pb09d_7rdf_xml:
  700|  6.59k|    pub fn new(content: &'a str) -> Self {
  701|  6.59k|        Self::from_escaped(escape(content))
  702|  6.59k|    }
_RINvMNtCsfk1XolJ15f9_9quick_xml6eventsNtB3_10BytesStart3newINtNtCsjp9TdQkU1Un_5alloc6borrow3CoweEECseFzqD1pb09d_7rdf_xml:
   92|  20.3k|    pub fn new<C: Into<Cow<'a, str>>>(name: C) -> Self {
   93|  20.3k|        let buf = str_cow_to_bytes(name);
   94|  20.3k|        BytesStart {
   95|  20.3k|            name_len: buf.len(),
   96|  20.3k|            buf,
   97|  20.3k|        }
   98|  20.3k|    }
_RINvMs4_NtCsfk1XolJ15f9_9quick_xml6eventsNtB6_8BytesEnd3newINtNtCsjp9TdQkU1Un_5alloc6borrow3CoweEECseFzqD1pb09d_7rdf_xml:
  606|  6.59k|    pub fn new<C: Into<Cow<'a, str>>>(name: C) -> Self {
  607|  6.59k|        Self::wrap(str_cow_to_bytes(name))
  608|  6.59k|    }
_RINvMs7_NtCsfk1XolJ15f9_9quick_xml6eventsNtB6_9BytesText12from_escapedINtNtCsjp9TdQkU1Un_5alloc6borrow3CoweEECseFzqD1pb09d_7rdf_xml:
  693|  6.59k|    pub fn from_escaped<C: Into<Cow<'a, str>>>(content: C) -> Self {
  694|  6.59k|        Self::wrap(str_cow_to_bytes(content), Decoder::utf8())
  695|  6.59k|    }
_RINvMs7_NtCsfk1XolJ15f9_9quick_xml6eventsNtB6_9BytesText13unescape_withNCNvMs2_NtCs6NQ0qd6wXH9_8oxrdfxml6parserINtB1f_12RdfXmlReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE16parse_text_event0ECseFzqD1pb09d_7rdf_xml:
  741|   127k|    pub fn unescape_with<'entity>(
  742|   127k|        &self,
  743|   127k|        resolve_entity: impl FnMut(&str) -> Option<&'entity str>,
  744|   127k|    ) -> Result<Cow<'a, str>> {
  745|   127k|        let decoded = match &self.content {
  746|   127k|            Cow::Borrowed(bytes) => self.decoder.decode(bytes)?,
  747|       |            // Convert to owned, because otherwise Cow will be bound with wrong lifetime
  748|      0|            Cow::Owned(bytes) => self.decoder.decode(bytes)?.into_owned().into(),
  749|       |        };
  750|       |
  751|  77.6k|        match unescape_with(&decoded, resolve_entity)? {
  752|       |            // Because result is borrowed, no replacements was done and we can use original string
  753|  68.2k|            Cow::Borrowed(_) => Ok(decoded),
  754|    866|            Cow::Owned(s) => Ok(s.into()),
  755|       |        }
  756|   127k|    }
_RINvNtCsfk1XolJ15f9_9quick_xml6events16str_cow_to_bytesINtNtCsjp9TdQkU1Un_5alloc6borrow3CoweEECseFzqD1pb09d_7rdf_xml:
 1043|  33.5k|fn str_cow_to_bytes<'a, C: Into<Cow<'a, str>>>(content: C) -> Cow<'a, [u8]> {
 1044|  33.5k|    match content.into() {
 1045|  18.6k|        Cow::Borrowed(s) => Cow::Borrowed(s.as_bytes()),
 1046|  14.9k|        Cow::Owned(s) => Cow::Owned(s.into_bytes()),
 1047|       |    }
 1048|  33.5k|}
_RINvMNtCsfk1XolJ15f9_9quick_xml6eventsNtB3_10BytesStart3newReECs6NQ0qd6wXH9_8oxrdfxml:
   92|  17.6k|    pub fn new<C: Into<Cow<'a, str>>>(name: C) -> Self {
   93|  17.6k|        let buf = str_cow_to_bytes(name);
   94|  17.6k|        BytesStart {
   95|  17.6k|            name_len: buf.len(),
   96|  17.6k|            buf,
   97|  17.6k|        }
   98|  17.6k|    }
_RINvMs4_NtCsfk1XolJ15f9_9quick_xml6eventsNtB6_8BytesEnd3newReECs6NQ0qd6wXH9_8oxrdfxml:
  606|  17.6k|    pub fn new<C: Into<Cow<'a, str>>>(name: C) -> Self {
  607|  17.6k|        Self::wrap(str_cow_to_bytes(name))
  608|  17.6k|    }
_RINvMs_NtCsfk1XolJ15f9_9quick_xml6eventsNtB5_10BytesStart14push_attributeTReB1a_EECs6NQ0qd6wXH9_8oxrdfxml:
  241|  37.8k|    pub fn push_attribute<'b, A>(&mut self, attr: A)
  242|  37.8k|    where
  243|  37.8k|        A: Into<Attribute<'b>>,
  244|  37.8k|    {
  245|  37.8k|        let a = attr.into();
  246|  37.8k|        let bytes = self.buf.to_mut();
  247|  37.8k|        bytes.push(b' ');
  248|  37.8k|        bytes.extend_from_slice(a.key.as_ref());
  249|  37.8k|        bytes.extend_from_slice(b"=\"");
  250|  37.8k|        bytes.extend_from_slice(a.value.as_ref());
  251|  37.8k|        bytes.push(b'"');
  252|  37.8k|    }
_RINvNtCsfk1XolJ15f9_9quick_xml6events16str_cow_to_bytesReECs6NQ0qd6wXH9_8oxrdfxml:
 1043|  35.3k|fn str_cow_to_bytes<'a, C: Into<Cow<'a, str>>>(content: C) -> Cow<'a, [u8]> {
 1044|  35.3k|    match content.into() {
 1045|  35.3k|        Cow::Borrowed(s) => Cow::Borrowed(s.as_bytes()),
 1046|      0|        Cow::Owned(s) => Cow::Owned(s.into_bytes()),
 1047|       |    }
 1048|  35.3k|}
_RNvMs4_NtCsfk1XolJ15f9_9quick_xml6eventsNtB5_8BytesEnd4wrapCs6NQ0qd6wXH9_8oxrdfxml:
  596|  17.6k|    pub(crate) fn wrap(name: Cow<'a, [u8]>) -> Self {
  597|  17.6k|        BytesEnd { name }
  598|  17.6k|    }
_RNvMNtCsfk1XolJ15f9_9quick_xml6eventsNtB2_10BytesStart4wrapB4_:
   79|   113k|    pub(crate) fn wrap(content: &'a [u8], name_len: usize) -> Self {
   80|   113k|        BytesStart {
   81|   113k|            buf: Cow::Borrowed(content),
   82|   113k|            name_len,
   83|   113k|        }
   84|   113k|    }
_RINvMNtCsfk1XolJ15f9_9quick_xml6eventsNtB3_10BytesStart12from_contentNtNtCsjp9TdQkU1Un_5alloc6string6StringEB5_:
  108|  3.64k|    pub fn from_content<C: Into<Cow<'a, str>>>(content: C, name_len: usize) -> Self {
  109|  3.64k|        BytesStart {
  110|  3.64k|            buf: str_cow_to_bytes(content),
  111|  3.64k|            name_len,
  112|  3.64k|        }
  113|  3.64k|    }
_RNvMs_NtCsfk1XolJ15f9_9quick_xml6eventsNtB4_10BytesStart10attributes:
  261|   201k|    pub fn attributes(&self) -> Attributes {
  262|   201k|        Attributes::wrap(&self.buf, self.name_len, false)
  263|   201k|    }
_RINvMs_NtCsfk1XolJ15f9_9quick_xml6eventsNtB5_10BytesStart17try_get_attributeReEB7_:
  278|  6.57k|    pub fn try_get_attribute<N: AsRef<[u8]> + Sized>(
  279|  6.57k|        &'a self,
  280|  6.57k|        attr_name: N,
  281|  6.57k|    ) -> Result<Option<Attribute<'a>>> {
  282|  10.6k|        for a in self.attributes().with_checks(false) {
  283|  10.6k|            let a = a?;
  284|  9.96k|            if a.key.as_ref() == attr_name.as_ref() {
  285|  5.80k|                return Ok(Some(a));
  286|  4.15k|            }
  287|       |        }
  288|    112|        Ok(None)
  289|  6.57k|    }
_RNvXs1_NtCsfk1XolJ15f9_9quick_xml6eventsNtB5_10BytesStartNtNtNtCsaXZRpaJvnVB_4core3ops5deref5Deref5deref:
  303|  41.7k|    fn deref(&self) -> &[u8] {
  304|  41.7k|        &self.buf
  305|  41.7k|    }
_RNvMs2_NtCsfk1XolJ15f9_9quick_xml6eventsNtB5_9BytesDecl3new:
  342|  3.64k|    pub fn new(
  343|  3.64k|        version: &str,
  344|  3.64k|        encoding: Option<&str>,
  345|  3.64k|        standalone: Option<&str>,
  346|  3.64k|    ) -> BytesDecl<'static> {
  347|       |        // Compute length of the buffer based on supplied attributes
  348|       |        // ' encoding=""'   => 12
  349|  3.64k|        let encoding_attr_len = if let Some(xs) = encoding {
  350|  3.64k|            12 + xs.len()
  351|       |        } else {
  352|      0|            0
  353|       |        };
  354|       |        // ' standalone=""' => 14
  355|  3.64k|        let standalone_attr_len = if let Some(xs) = standalone {
  356|      0|            14 + xs.len()
  357|       |        } else {
  358|  3.64k|            0
  359|       |        };
  360|       |        // 'xml version=""' => 14
  361|  3.64k|        let mut buf = String::with_capacity(14 + encoding_attr_len + standalone_attr_len);
  362|  3.64k|
  363|  3.64k|        buf.push_str("xml version=\"");
  364|  3.64k|        buf.push_str(version);
  365|       |
  366|  3.64k|        if let Some(encoding_val) = encoding {
  367|  3.64k|            buf.push_str("\" encoding=\"");
  368|  3.64k|            buf.push_str(encoding_val);
  369|  3.64k|        }
  370|       |
  371|  3.64k|        if let Some(standalone_val) = standalone {
  372|      0|            buf.push_str("\" standalone=\"");
  373|      0|            buf.push_str(standalone_val);
  374|  3.64k|        }
  375|  3.64k|        buf.push('"');
  376|  3.64k|
  377|  3.64k|        BytesDecl {
  378|  3.64k|            content: BytesStart::from_content(buf, 3),
  379|  3.64k|        }
  380|  3.64k|    }
_RNvMs2_NtCsfk1XolJ15f9_9quick_xml6eventsNtB5_9BytesDecl10from_start:
  383|  6.57k|    pub fn from_start(start: BytesStart<'a>) -> Self {
  384|  6.57k|        Self { content: start }
  385|  6.57k|    }
_RNvMs2_NtCsfk1XolJ15f9_9quick_xml6eventsNtB5_9BytesDecl8encoding:
  484|  6.57k|    pub fn encoding(&self) -> Option<Result<Cow<[u8]>>> {
  485|  6.57k|        self.content
  486|  6.57k|            .try_get_attribute("encoding")
  487|  6.57k|            .map(|a| a.map(|a| a.value))
  488|  6.57k|            .transpose()
  489|  6.57k|    }
_RNCNvMs2_NtCsfk1XolJ15f9_9quick_xml6eventsNtB7_9BytesDecl8encoding0B9_:
  487|  5.91k|            .map(|a| a.map(|a| a.value))
_RNCNCNvMs2_NtCsfk1XolJ15f9_9quick_xml6eventsNtB9_9BytesDecl8encoding00Bb_:
  487|  5.80k|            .map(|a| a.map(|a| a.value))
_RNvXs3_NtCsfk1XolJ15f9_9quick_xml6eventsNtB5_9BytesDeclNtNtNtCsaXZRpaJvnVB_4core3ops5deref5Deref5deref:
  565|  3.64k|    fn deref(&self) -> &[u8] {
  566|  3.64k|        &self.content
  567|  3.64k|    }
_RNvMs4_NtCsfk1XolJ15f9_9quick_xml6eventsNtB5_8BytesEnd4wrapB7_:
  596|  33.4k|    pub(crate) fn wrap(name: Cow<'a, [u8]>) -> Self {
  597|  33.4k|        BytesEnd { name }
  598|  33.4k|    }
_RNvXs6_NtCsfk1XolJ15f9_9quick_xml6eventsNtB5_8BytesEndNtNtNtCsaXZRpaJvnVB_4core3ops5deref5Deref5deref:
  652|  24.2k|    fn deref(&self) -> &[u8] {
  653|  24.2k|        &self.name
  654|  24.2k|    }
_RINvMs7_NtCsfk1XolJ15f9_9quick_xml6eventsNtB6_9BytesText4wrapINtNtCsjp9TdQkU1Un_5alloc6borrow3CowShEEB8_:
  684|  6.59k|    pub(crate) fn wrap<C: Into<Cow<'a, [u8]>>>(content: C, decoder: Decoder) -> Self {
  685|  6.59k|        Self {
  686|  6.59k|            content: content.into(),
  687|  6.59k|            decoder,
  688|  6.59k|        }
  689|  6.59k|    }
_RINvMs7_NtCsfk1XolJ15f9_9quick_xml6eventsNtB6_9BytesText4wrapRShEB8_:
  684|   128k|    pub(crate) fn wrap<C: Into<Cow<'a, [u8]>>>(content: C, decoder: Decoder) -> Self {
  685|   128k|        Self {
  686|   128k|            content: content.into(),
  687|   128k|            decoder,
  688|   128k|        }
  689|   128k|    }
_RNvXs9_NtCsfk1XolJ15f9_9quick_xml6eventsNtB5_9BytesTextNtNtNtCsaXZRpaJvnVB_4core3ops5deref5Deref5deref:
  789|  75.6k|    fn deref(&self) -> &[u8] {
  790|  75.6k|        &self.content
  791|  75.6k|    }
_RNvXsf_NtCsfk1XolJ15f9_9quick_xml6eventsNtB5_5EventINtNtCsaXZRpaJvnVB_4core7convert5AsRefBC_E6as_ref:
 1035|  72.5k|    fn as_ref(&self) -> &Event<'a> {
 1036|  72.5k|        self
 1037|  72.5k|    }
_RINvNtCsfk1XolJ15f9_9quick_xml6events16str_cow_to_bytesNtNtCsjp9TdQkU1Un_5alloc6string6StringEB4_:
 1043|  3.64k|fn str_cow_to_bytes<'a, C: Into<Cow<'a, str>>>(content: C) -> Cow<'a, [u8]> {
 1044|  3.64k|    match content.into() {
 1045|      0|        Cow::Borrowed(s) => Cow::Borrowed(s.as_bytes()),
 1046|  3.64k|        Cow::Owned(s) => Cow::Owned(s.into_bytes()),
 1047|       |    }
 1048|  3.64k|}

_RNvMsf_NtCsfk1XolJ15f9_9quick_xml4nameNtB5_17NamespaceResolver7resolveCseFzqD1pb09d_7rdf_xml:
  564|   135k|    pub fn resolve<'n>(
  565|   135k|        &self,
  566|   135k|        name: QName<'n>,
  567|   135k|        use_default: bool,
  568|   135k|    ) -> (ResolveResult, LocalName<'n>) {
  569|   135k|        let (local_name, prefix) = name.decompose();
  570|   135k|        (self.resolve_prefix(prefix, use_default), local_name)
  571|   135k|    }
_RNvXs0_NtCsfk1XolJ15f9_9quick_xml4nameNtB5_5QNameINtNtCsaXZRpaJvnVB_4core7convert5AsRefShE6as_refCseFzqD1pb09d_7rdf_xml:
  124|  62.3k|    fn as_ref(&self) -> &[u8] {
  125|  62.3k|        self.0
  126|  62.3k|    }
_RNvXs3_NtCsfk1XolJ15f9_9quick_xml4nameNtB5_9LocalNameINtNtCsaXZRpaJvnVB_4core7convert5AsRefShE6as_refCseFzqD1pb09d_7rdf_xml:
  154|   249k|    fn as_ref(&self) -> &[u8] {
  155|   249k|        self.0
  156|   249k|    }
_RNvXsa_NtCsfk1XolJ15f9_9quick_xml4nameNtB5_9NamespaceINtNtCsaXZRpaJvnVB_4core7convert5AsRefShE6as_refCseFzqD1pb09d_7rdf_xml:
  270|   249k|    fn as_ref(&self) -> &[u8] {
  271|   249k|        self.0
  272|   249k|    }
_RNvXs0_NtCsfk1XolJ15f9_9quick_xml4nameNtB5_5QNameINtNtCsaXZRpaJvnVB_4core7convert5AsRefShE6as_refCs6NQ0qd6wXH9_8oxrdfxml:
  124|  37.8k|    fn as_ref(&self) -> &[u8] {
  125|  37.8k|        self.0
  126|  37.8k|    }
_RNvMNtCsfk1XolJ15f9_9quick_xml4nameNtB2_5QName9decompose:
   67|   135k|    pub fn decompose(&self) -> (LocalName<'a>, Option<Prefix<'a>>) {
   68|   135k|        match self.index() {
   69|  62.0k|            None => (LocalName(self.0), None),
   70|  73.1k|            Some(i) => (LocalName(&self.0[i + 1..]), Some(Prefix(&self.0[..i]))),
   71|       |        }
   72|   135k|    }
_RNvMNtCsfk1XolJ15f9_9quick_xml4nameNtB2_5QName20as_namespace_binding:
   98|  42.1k|    pub fn as_namespace_binding(&self) -> Option<PrefixDeclaration<'a>> {
   99|  42.1k|        if self.0.starts_with(b"xmlns") {
  100|  13.1k|            return match self.0.get(5) {
  101|  6.27k|                None => Some(PrefixDeclaration::Default),
  102|  6.50k|                Some(&b':') => Some(PrefixDeclaration::Named(&self.0[6..])),
  103|    330|                _ => None,
  104|       |            };
  105|  29.0k|        }
  106|  29.0k|        None
  107|  42.1k|    }
_RNvMNtCsfk1XolJ15f9_9quick_xml4nameNtB2_5QName5index:
  111|   135k|    fn index(&self) -> Option<usize> {
  112|   135k|        memchr(b':', self.0)
  113|   135k|    }
_RNvXs0_NtCsfk1XolJ15f9_9quick_xml4nameNtB5_5QNameINtNtCsaXZRpaJvnVB_4core7convert5AsRefShE6as_refB7_:
  124|  9.96k|    fn as_ref(&self) -> &[u8] {
  125|  9.96k|        self.0
  126|  9.96k|    }
_RNvMs5_NtCsfk1XolJ15f9_9quick_xml4nameNtB5_6Prefix10into_inner:
  191|  16.8k|    pub fn into_inner(self) -> &'a [u8] {
  192|  16.8k|        self.0
  193|  16.8k|    }
_RNvMs8_NtCsfk1XolJ15f9_9quick_xml4nameNtB5_9Namespace10into_inner:
  256|  14.5k|    pub fn into_inner(self) -> &'a [u8] {
  257|  14.5k|        self.0
  258|  14.5k|    }
_RNvMsd_NtCsfk1XolJ15f9_9quick_xml4nameNtB5_14NamespaceEntry6prefixB7_:
  367|   164k|    fn prefix<'b>(&self, ns_buffer: &'b [u8]) -> Option<Prefix<'b>> {
  368|   164k|        if self.prefix_len == 0 {
  369|  56.7k|            None
  370|       |        } else {
  371|   107k|            Some(Prefix(&ns_buffer[self.start..self.start + self.prefix_len]))
  372|       |        }
  373|   164k|    }
_RNvMsd_NtCsfk1XolJ15f9_9quick_xml4nameNtB5_14NamespaceEntry9namespaceB7_:
  380|   124k|    fn namespace<'ns>(&self, buffer: &'ns [u8]) -> ResolveResult<'ns> {
  381|   124k|        if self.value_len == 0 {
  382|    207|            ResolveResult::Unbound
  383|       |        } else {
  384|   124k|            let start = self.start + self.prefix_len;
  385|   124k|            ResolveResult::Bound(Namespace(&buffer[start..start + self.value_len]))
  386|       |        }
  387|   124k|    }
_RNvXse_NtCsfk1XolJ15f9_9quick_xml4nameNtB5_17NamespaceResolverNtNtCsaXZRpaJvnVB_4core7default7Default7default:
  431|  7.29k|    fn default() -> Self {
  432|  7.29k|        let mut buffer = Vec::new();
  433|  7.29k|        let mut bindings = Vec::new();
  434|  21.8k|        for ent in &[RESERVED_NAMESPACE_XML, RESERVED_NAMESPACE_XMLNS] {
  435|  14.5k|            let prefix = ent.0.into_inner();
  436|  14.5k|            let uri = ent.1.into_inner();
  437|  14.5k|            bindings.push(NamespaceEntry {
  438|  14.5k|                start: buffer.len(),
  439|  14.5k|                prefix_len: prefix.len(),
  440|  14.5k|                value_len: uri.len(),
  441|  14.5k|                level: 0,
  442|  14.5k|            });
  443|  14.5k|            buffer.extend(prefix);
  444|  14.5k|            buffer.extend(uri);
  445|  14.5k|        }
  446|       |
  447|  7.29k|        Self {
  448|  7.29k|            buffer,
  449|  7.29k|            bindings,
  450|  7.29k|            nesting_level: 0,
  451|  7.29k|        }
  452|  7.29k|    }
_RNvMsf_NtCsfk1XolJ15f9_9quick_xml4nameNtB5_17NamespaceResolver4push:
  460|   107k|    pub fn push(&mut self, start: &BytesStart) -> Result<()> {
  461|   107k|        self.nesting_level += 1;
  462|   107k|        let level = self.nesting_level;
  463|       |        // adds new namespaces for attributes starting with 'xmlns:' and for the 'xmlns'
  464|       |        // (default namespace) attribute.
  465|   107k|        for a in start.attributes().with_checks(false) {
  466|  48.1k|            if let Ok(Attribute { key: k, value: v }) = a {
  467|  42.1k|                match k.as_namespace_binding() {
  468|  6.27k|                    Some(PrefixDeclaration::Default) => {
  469|  6.27k|                        let start = self.buffer.len();
  470|  6.27k|                        self.buffer.extend_from_slice(&v);
  471|  6.27k|                        self.bindings.push(NamespaceEntry {
  472|  6.27k|                            start,
  473|  6.27k|                            prefix_len: 0,
  474|  6.27k|                            value_len: v.len(),
  475|  6.27k|                            level,
  476|  6.27k|                        });
  477|  6.27k|                    }
  478|  6.50k|                    Some(PrefixDeclaration::Named(b"xml")) => {
  479|    106|                        if Namespace(&v) != RESERVED_NAMESPACE_XML.1 {
  480|       |                            // error, `xml` prefix explicitly set to different value
  481|     72|                            return Err(Error::InvalidPrefixBind {
  482|     72|                                prefix: b"xml".to_vec(),
  483|     72|                                namespace: v.to_vec(),
  484|     72|                            });
  485|     34|                        }
  486|       |                        // don't add another NamespaceEntry for the `xml` namespace prefix
  487|       |                    }
  488|  2.48k|                    Some(PrefixDeclaration::Named(b"xmlns")) => {
  489|       |                        // error, `xmlns` prefix explicitly set
  490|     67|                        return Err(Error::InvalidPrefixBind {
  491|     67|                            prefix: b"xmlns".to_vec(),
  492|     67|                            namespace: v.to_vec(),
  493|     67|                        });
  494|       |                    }
  495|  6.33k|                    Some(PrefixDeclaration::Named(prefix)) => {
  496|  6.33k|                        let ns = Namespace(&v);
  497|  6.33k|
  498|  6.33k|                        if ns == RESERVED_NAMESPACE_XML.1 || ns == RESERVED_NAMESPACE_XMLNS.1 {
  499|       |                            // error, non-`xml` prefix set to xml uri
  500|       |                            // error, non-`xmlns` prefix set to xmlns uri
  501|     98|                            return Err(Error::InvalidPrefixBind {
  502|     98|                                prefix: prefix.to_vec(),
  503|     98|                                namespace: v.to_vec(),
  504|     98|                            });
  505|  6.23k|                        }
  506|  6.23k|
  507|  6.23k|                        let start = self.buffer.len();
  508|  6.23k|                        self.buffer.extend_from_slice(prefix);
  509|  6.23k|                        self.buffer.extend_from_slice(&v);
  510|  6.23k|                        self.bindings.push(NamespaceEntry {
  511|  6.23k|                            start,
  512|  6.23k|                            prefix_len: prefix.len(),
  513|  6.23k|                            value_len: v.len(),
  514|  6.23k|                            level,
  515|  6.23k|                        });
  516|       |                    }
  517|  29.3k|                    None => {}
  518|       |                }
  519|       |            } else {
  520|  6.01k|                break;
  521|       |            }
  522|       |        }
  523|   106k|        Ok(())
  524|   107k|    }
_RNvMsf_NtCsfk1XolJ15f9_9quick_xml4nameNtB5_17NamespaceResolver3pop:
  530|  51.4k|    pub fn pop(&mut self) {
  531|  51.4k|        self.nesting_level -= 1;
  532|  51.4k|        let current_level = self.nesting_level;
  533|  51.4k|        // from the back (most deeply nested scope), look for the first scope that is still valid
  534|  51.4k|        match self.bindings.iter().rposition(|n| n.level <= current_level) {
  535|       |            // none of the namespaces are valid, remove all of them
  536|      0|            None => {
  537|      0|                self.buffer.clear();
  538|      0|                self.bindings.clear();
  539|      0|            }
  540|       |            // drop all namespaces past the last valid namespace
  541|  51.4k|            Some(last_valid_pos) => {
  542|  51.4k|                if let Some(len) = self.bindings.get(last_valid_pos + 1).map(|n| n.start) {
  543|  10.0k|                    self.buffer.truncate(len);
  544|  10.0k|                    self.bindings.truncate(last_valid_pos + 1);
  545|  41.3k|                }
  546|       |            }
  547|       |        }
  548|  51.4k|    }
_RNCNvMsf_NtCsfk1XolJ15f9_9quick_xml4nameNtB7_17NamespaceResolver3pop0B9_:
  534|  61.5k|        match self.bindings.iter().rposition(|n| n.level <= current_level) {
_RNCNvMsf_NtCsfk1XolJ15f9_9quick_xml4nameNtB7_17NamespaceResolver3pops_0B9_:
  542|  10.0k|                if let Some(len) = self.bindings.get(last_valid_pos + 1).map(|n| n.start) {
_RNvMsf_NtCsfk1XolJ15f9_9quick_xml4nameNtB5_17NamespaceResolver14resolve_prefix:
  588|   135k|    fn resolve_prefix(&self, prefix: Option<Prefix>, use_default: bool) -> ResolveResult {
  589|   135k|        self.bindings
  590|   135k|            .iter()
  591|   135k|            // Find the last defined binding that corresponds to the given prefix
  592|   135k|            .rev()
  593|   135k|            .find_map(|n| match (n.prefix(&self.buffer), prefix) {
  594|       |                // This is default namespace definition and name has no explicit prefix
  595|       |                (None, None) if use_default => Some(n.namespace(&self.buffer)),
  596|       |                (None, None) => Some(ResolveResult::Unbound),
  597|       |
  598|       |                // One part has prefix but other is not -> skip
  599|       |                (None, Some(_)) => None,
  600|       |                (Some(_), None) => None,
  601|       |
  602|       |                // Prefixes does not match -> skip
  603|       |                (Some(definition), Some(usage)) if definition != usage => None,
  604|       |
  605|       |                // Prefixes the same, entry defines binding reset (corresponds to `xmlns:p=""`)
  606|       |                _ if n.value_len == 0 => Some(Self::maybe_unknown(prefix)),
  607|       |                // Prefixes the same, returns corresponding namespace
  608|       |                _ => Some(n.namespace(&self.buffer)),
  609|   135k|            })
  610|   135k|            .unwrap_or_else(|| Self::maybe_unknown(prefix))
  611|   135k|    }
_RNCNvMsf_NtCsfk1XolJ15f9_9quick_xml4nameNtB7_17NamespaceResolver14resolve_prefix0B9_:
  593|   164k|            .find_map(|n| match (n.prefix(&self.buffer), prefix) {
  594|       |                // This is default namespace definition and name has no explicit prefix
  595|  53.9k|                (None, None) if use_default => Some(n.namespace(&self.buffer)),
  596|     79|                (None, None) => Some(ResolveResult::Unbound),
  597|       |
  598|       |                // One part has prefix but other is not -> skip
  599|  2.67k|                (None, Some(_)) => None,
  600|  22.2k|                (Some(_), None) => None,
  601|       |
  602|       |                // Prefixes does not match -> skip
  603|  85.4k|                (Some(definition), Some(usage)) if definition != usage => None,
  604|       |
  605|       |                // Prefixes the same, entry defines binding reset (corresponds to `xmlns:p=""`)
  606|  70.9k|                _ if n.value_len == 0 => Some(Self::maybe_unknown(prefix)),
  607|       |                // Prefixes the same, returns corresponding namespace
  608|  70.9k|                _ => Some(n.namespace(&self.buffer)),
  609|   164k|            })
_RNCNvMsf_NtCsfk1XolJ15f9_9quick_xml4nameNtB7_17NamespaceResolver14resolve_prefixs_0B9_:
  610|  10.1k|            .unwrap_or_else(|| Self::maybe_unknown(prefix))
_RNvMsf_NtCsfk1XolJ15f9_9quick_xml4nameNtB5_17NamespaceResolver13maybe_unknownB7_:
  614|  10.2k|    fn maybe_unknown(prefix: Option<Prefix>) -> ResolveResult<'static> {
  615|  10.2k|        match prefix {
  616|  2.21k|            Some(p) => ResolveResult::Unknown(p.into_inner().to_vec()),
  617|  8.01k|            None => ResolveResult::Unbound,
  618|       |        }
  619|  10.2k|    }
_RNvXsB_NtCsfk1XolJ15f9_9quick_xml4nameNtB5_6PrefixNtNtCsaXZRpaJvnVB_4core3cmp9PartialEq2eqB7_:
  185|  85.4k|#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
_RNvXsU_NtCsfk1XolJ15f9_9quick_xml4nameNtB5_9NamespaceNtNtCsaXZRpaJvnVB_4core3cmp9PartialEq2eqB7_:
  227|  12.7k|#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]

_RNvXNtNtCsfk1XolJ15f9_9quick_xml6reader15buffered_readerINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCsjp9TdQkU1Un_5alloc3vec3VechEE12read_elementCseFzqD1pb09d_7rdf_xml:
  154|   107k|        $($async)? fn read_element $(<$lf>)? (
  155|   107k|            &mut self,
  156|   107k|            buf: &'b mut Vec<u8>,
  157|   107k|            position: &mut usize,
  158|   107k|        ) -> Result<Option<&'b [u8]>> {
  159|   107k|            let mut state = ReadElementState::Elem;
  160|   107k|            let mut read = 0;
  161|   107k|
  162|   107k|            let start = buf.len();
  163|       |            loop {
  164|   109k|                match self $(.$reader)? .fill_buf() $(.$await)? {
  165|   109k|                    Ok(n) if n.is_empty() => break,
  166|   107k|                    Ok(available) => {
  167|   107k|                        if let Some((consumed, used)) = state.change(available) {
  168|   105k|                            buf.extend_from_slice(consumed);
  169|   105k|
  170|   105k|                            self $(.$reader)? .consume(used);
  171|   105k|                            read += used;
  172|   105k|
  173|   105k|                            // Position now just after the `>` symbol
  174|   105k|                            *position += read;
  175|   105k|                            break;
  176|  2.07k|                        } else {
  177|  2.07k|                            // The `>` symbol not yet found, continue reading
  178|  2.07k|                            buf.extend_from_slice(available);
  179|  2.07k|
  180|  2.07k|                            let used = available.len();
  181|  2.07k|                            self $(.$reader)? .consume(used);
  182|  2.07k|                            read += used;
  183|  2.07k|                        }
  184|       |                    }
  185|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  186|      0|                    Err(e) => {
  187|      0|                        *position += read;
  188|      0|                        return Err(Error::Io(e.into()));
  189|       |                    }
  190|       |                };
  191|       |            }
  192|       |
  193|   107k|            if read == 0 {
  194|      0|                Ok(None)
  195|       |            } else {
  196|   107k|                Ok(Some(&buf[start..]))
  197|       |            }
  198|   107k|        }
_RNvXNtNtCsfk1XolJ15f9_9quick_xml6reader15buffered_readerINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCsjp9TdQkU1Un_5alloc3vec3VechEE15remove_utf8_bomCseFzqD1pb09d_7rdf_xml:
   18|  7.29k|        $($async)? fn remove_utf8_bom(&mut self) -> Result<()> {
   19|       |            use crate::encoding::UTF8_BOM;
   20|       |
   21|       |            loop {
   22|  7.29k|                break match self $(.$reader)? .fill_buf() $(.$await)? {
   23|  7.29k|                    Ok(n) => {
   24|  7.29k|                        if n.starts_with(UTF8_BOM) {
   25|     17|                            self $(.$reader)? .consume(UTF8_BOM.len());
   26|  7.28k|                        }
   27|  7.29k|                        Ok(())
   28|       |                    },
   29|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
   30|      0|                    Err(e) => Err(Error::Io(e.into())),
   31|       |                };
   32|       |            }
   33|  7.29k|        }
_RNvXNtNtCsfk1XolJ15f9_9quick_xml6reader15buffered_readerINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCsjp9TdQkU1Un_5alloc3vec3VechEE16read_bytes_untilCseFzqD1pb09d_7rdf_xml:
   52|   174k|        $($async)? fn read_bytes_until $(<$lf>)? (
   53|   174k|            &mut self,
   54|   174k|            byte: u8,
   55|   174k|            buf: &'b mut Vec<u8>,
   56|   174k|            position: &mut usize,
   57|   174k|        ) -> Result<Option<&'b [u8]>> {
   58|   174k|            // search byte must be within the ascii range
   59|   174k|            debug_assert!(byte.is_ascii());
   60|       |
   61|   174k|            let mut read = 0;
   62|   174k|            let mut done = false;
   63|   174k|            let start = buf.len();
   64|   342k|            while !done {
   65|   168k|                let used = {
   66|   175k|                    let available = match self $(.$reader)? .fill_buf() $(.$await)? {
   67|   175k|                        Ok(n) if n.is_empty() => break,
   68|   168k|                        Ok(n) => n,
   69|      0|                        Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
   70|      0|                        Err(e) => {
   71|      0|                            *position += read;
   72|      0|                            return Err(Error::Io(e.into()));
   73|       |                        }
   74|       |                    };
   75|       |
   76|   168k|                    match memchr::memchr(byte, available) {
   77|   166k|                        Some(i) => {
   78|   166k|                            buf.extend_from_slice(&available[..i]);
   79|   166k|                            done = true;
   80|   166k|                            i + 1
   81|       |                        }
   82|       |                        None => {
   83|  1.73k|                            buf.extend_from_slice(available);
   84|  1.73k|                            available.len()
   85|       |                        }
   86|       |                    }
   87|       |                };
   88|   168k|                self $(.$reader)? .consume(used);
   89|   168k|                read += used;
   90|       |            }
   91|   174k|            *position += read;
   92|   174k|
   93|   174k|            if read == 0 {
   94|  5.56k|                Ok(None)
   95|       |            } else {
   96|   168k|                Ok(Some(&buf[start..]))
   97|       |            }
   98|   174k|        }
_RNvXNtNtCsfk1XolJ15f9_9quick_xml6reader15buffered_readerINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCsjp9TdQkU1Un_5alloc3vec3VechEE17read_bang_elementCseFzqD1pb09d_7rdf_xml:
  100|    215|        $($async)? fn read_bang_element $(<$lf>)? (
  101|    215|            &mut self,
  102|    215|            buf: &'b mut Vec<u8>,
  103|    215|            position: &mut usize,
  104|    215|        ) -> Result<Option<(BangType, &'b [u8])>> {
  105|    215|            // Peeked one bang ('!') before being called, so it's guaranteed to
  106|    215|            // start with it.
  107|    215|            let start = buf.len();
  108|    215|            let mut read = 1;
  109|    215|            buf.push(b'!');
  110|    215|            self $(.$reader)? .consume(1);
  111|       |
  112|    215|            let bang_type = BangType::new(self.peek_one() $(.$await)? ?)?;
  113|       |
  114|       |            loop {
  115|    263|                match self $(.$reader)? .fill_buf() $(.$await)? {
  116|       |                    // Note: Do not update position, so the error points to
  117|       |                    // somewhere sane rather than at the EOF
  118|    263|                    Ok(n) if n.is_empty() => return Err(bang_type.to_err()),
  119|    210|                    Ok(available) => {
  120|       |                        // We only parse from start because we don't want to consider
  121|       |                        // whatever is in the buffer before the bang element
  122|    210|                        if let Some((consumed, used)) = bang_type.parse(&buf[start..], available) {
  123|    157|                            buf.extend_from_slice(consumed);
  124|    157|
  125|    157|                            self $(.$reader)? .consume(used);
  126|    157|                            read += used;
  127|    157|
  128|    157|                            *position += read;
  129|    157|                            break;
  130|     53|                        } else {
  131|     53|                            buf.extend_from_slice(available);
  132|     53|
  133|     53|                            let used = available.len();
  134|     53|                            self $(.$reader)? .consume(used);
  135|     53|                            read += used;
  136|     53|                        }
  137|       |                    }
  138|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  139|      0|                    Err(e) => {
  140|      0|                        *position += read;
  141|      0|                        return Err(Error::Io(e.into()));
  142|       |                    }
  143|       |                }
  144|       |            }
  145|       |
  146|    157|            if read == 0 {
  147|      0|                Ok(None)
  148|       |            } else {
  149|    157|                Ok(Some((bang_type, &buf[start..])))
  150|       |            }
  151|    215|        }
_RNvXNtNtCsfk1XolJ15f9_9quick_xml6reader15buffered_readerINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCsjp9TdQkU1Un_5alloc3vec3VechEE8peek_oneCseFzqD1pb09d_7rdf_xml:
  233|   306k|        $($async)? fn peek_one(&mut self) -> Result<Option<u8>> {
  234|       |            loop {
  235|   306k|                break match self $(.$reader)? .fill_buf() $(.$await)? {
  236|   306k|                    Ok(n) if n.is_empty() => Ok(None),
  237|   299k|                    Ok(n) => Ok(Some(n[0])),
  238|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  239|      0|                    Err(e) => Err(Error::Io(e.into())),
  240|       |                };
  241|       |            }
  242|   306k|        }
_RNvXNtNtCsfk1XolJ15f9_9quick_xml6reader15buffered_readerINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCsjp9TdQkU1Un_5alloc3vec3VechEE8skip_oneCseFzqD1pb09d_7rdf_xml:
  219|   155k|        $($async)? fn skip_one(&mut self, byte: u8, position: &mut usize) -> Result<bool> {
  220|   155k|            // search byte must be within the ascii range
  221|   155k|            debug_assert!(byte.is_ascii());
  222|       |
  223|   155k|            match self.peek_one() $(.$await)? ? {
  224|   150k|                Some(b) if b == byte => {
  225|  22.9k|                    *position += 1;
  226|  22.9k|                    self $(.$reader)? .consume(1);
  227|  22.9k|                    Ok(true)
  228|       |                }
  229|   132k|                _ => Ok(false),
  230|       |            }
  231|   155k|        }

_RNvMNtNtCsfk1XolJ15f9_9quick_xml6reader9ns_readerINtB2_8NsReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE21expand_empty_elementsCseFzqD1pb09d_7rdf_xml:
   33|  7.29k|        pub fn expand_empty_elements(&mut self, val: bool) -> &mut Self {
   34|  7.29k|            self $(.$holder)? .state.expand_empty_elements = val;
   35|  7.29k|            self
   36|  7.29k|        }
_RINvMs0_NtCsfk1XolJ15f9_9quick_xml6readerINtB6_6ReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE15read_event_implQINtNtCsjp9TdQkU1Un_5alloc3vec3VechEECseFzqD1pb09d_7rdf_xml:
  645|   301k|    fn read_event_impl<'i, B>(&mut self, mut buf: B) -> Result<Event<'i>>
  646|   301k|    where
  647|   301k|        R: XmlSource<'i, B>,
  648|   301k|    {
  649|   324k|        read_event_impl!(self, buf, self.reader, read_until_open, read_until_close)
  650|   301k|    }
_RINvMs0_NtCsfk1XolJ15f9_9quick_xml6readerINtB6_6ReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE15read_until_openQINtNtCsjp9TdQkU1Un_5alloc3vec3VechEECseFzqD1pb09d_7rdf_xml:
  656|   155k|    fn read_until_open<'i, B>(&mut self, buf: B) -> Result<std::result::Result<Event<'i>, B>>
  657|   155k|    where
  658|   155k|        R: XmlSource<'i, B>,
  659|   155k|    {
  660|   155k|        read_until_open!(self, buf, self.reader, read_event_impl)
  661|   155k|    }
_RINvMs0_NtCsfk1XolJ15f9_9quick_xml6readerINtB6_6ReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE16read_until_closeQINtNtCsjp9TdQkU1Un_5alloc3vec3VechEECseFzqD1pb09d_7rdf_xml:
  665|   150k|    fn read_until_close<'i, B>(&mut self, buf: B) -> Result<Event<'i>>
  666|   150k|    where
  667|   150k|        R: XmlSource<'i, B>,
  668|   150k|    {
  669|   150k|        read_until_close!(self, buf, self.reader)
  670|   150k|    }
_RNvMNtCsfk1XolJ15f9_9quick_xml6readerINtB2_6ReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE11from_readerCseFzqD1pb09d_7rdf_xml:
  533|  7.29k|    pub fn from_reader(reader: R) -> Self {
  534|  7.29k|        Self {
  535|  7.29k|            reader,
  536|  7.29k|            state: ReaderState::default(),
  537|  7.29k|        }
  538|  7.29k|    }
_RNvMs_NtCsfk1XolJ15f9_9quick_xml6readerINtB4_6ReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE7decoderCseFzqD1pb09d_7rdf_xml:
  635|   154k|    pub fn decoder(&self) -> Decoder {
  636|   154k|        self.state.decoder()
  637|   154k|    }
_RNvMs1_NtCsfk1XolJ15f9_9quick_xml6readerNtB5_8BangType3new:
  807|    215|    fn new(byte: Option<u8>) -> Result<Self> {
  808|    215|        Ok(match byte {
  809|     17|            Some(b'[') => Self::CData,
  810|    135|            Some(b'-') => Self::Comment,
  811|     58|            Some(b'D') | Some(b'd') => Self::DocType,
  812|      3|            Some(b) => return Err(Error::UnexpectedBang(b)),
  813|      2|            None => return Err(Error::UnexpectedEof("Bang".to_string())),
  814|       |        })
  815|    215|    }
_RNvMs1_NtCsfk1XolJ15f9_9quick_xml6readerNtB5_8BangType5parse:
  824|    210|    fn parse<'b>(&self, buf: &[u8], chunk: &'b [u8]) -> Option<(&'b [u8], usize)> {
  825|  2.17k|        for i in memchr::memchr_iter(b'>', chunk) {
  826|    687|            match self {
  827|    687|                // Need to read at least 6 symbols (`!---->`) for properly finished comment
  828|    687|                // <!----> - XML comment
  829|    687|                //  012345 - i
  830|    687|                Self::Comment if buf.len() + i > 4 => {
  831|    602|                    if chunk[..i].ends_with(b"--") {
  832|       |                        // We cannot strip last `--` from the buffer because we need it in case of
  833|       |                        // check_comments enabled option. XML standard requires that comment
  834|       |                        // will not end with `--->` sequence because this is a special case of
  835|       |                        // `--` in the comment (https://www.w3.org/TR/xml11/#sec-comments)
  836|    117|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
  837|    485|                    }
  838|    485|                    // End sequence `-|->` was splitted at |
  839|    485|                    //        buf --/   \-- chunk
  840|    485|                    if i == 1 && buf.ends_with(b"-") && chunk[0] == b'-' {
  841|      0|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
  842|    485|                    }
  843|    485|                    // End sequence `--|>` was splitted at |
  844|    485|                    //         buf --/   \-- chunk
  845|    485|                    if i == 0 && buf.ends_with(b"--") {
  846|      0|                        return Some((&[], i + 1)); // +1 for `>`
  847|    485|                    }
  848|       |                }
  849|     85|                Self::Comment => {}
  850|       |                Self::CData => {
  851|    269|                    if chunk[..i].ends_with(b"]]") {
  852|      6|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
  853|    263|                    }
  854|    263|                    // End sequence `]|]>` was splitted at |
  855|    263|                    //        buf --/   \-- chunk
  856|    263|                    if i == 1 && buf.ends_with(b"]") && chunk[0] == b']' {
  857|      0|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
  858|    263|                    }
  859|    263|                    // End sequence `]]|>` was splitted at |
  860|    263|                    //         buf --/   \-- chunk
  861|    263|                    if i == 0 && buf.ends_with(b"]]") {
  862|      0|                        return Some((&[], i + 1)); // +1 for `>`
  863|    263|                    }
  864|       |                }
  865|       |                Self::DocType => {
  866|  1.22k|                    let content = &chunk[..i];
  867|  1.22k|                    let balance = memchr::memchr2_iter(b'<', b'>', content)
  868|  1.22k|                        .map(|p| if content[p] == b'<' { 1i32 } else { -1 })
  869|  1.22k|                        .sum::<i32>();
  870|  1.22k|                    if balance == 0 {
  871|     34|                        return Some((content, i + 1)); // +1 for `>`
  872|  1.18k|                    }
  873|       |                }
  874|       |            }
  875|       |        }
  876|     53|        None
  877|    210|    }
_RNvMs2_NtCsfk1XolJ15f9_9quick_xml6readerNtB5_16ReadElementState6change:
  904|   107k|    fn change<'b>(&mut self, chunk: &'b [u8]) -> Option<(&'b [u8], usize)> {
  905|   212k|        for i in memchr::memchr3_iter(b'>', b'\'', b'"', chunk) {
  906|   212k|            *self = match (*self, chunk[i]) {
  907|       |                // only allowed to match `>` while we are in state `Elem`
  908|   105k|                (Self::Elem, b'>') => return Some((&chunk[..i], i + 1)),
  909|  3.27k|                (Self::Elem, b'\'') => Self::SingleQ,
  910|  44.9k|                (Self::Elem, b'\"') => Self::DoubleQ,
  911|       |
  912|       |                // the only end_byte that gets us out if the same character
  913|  48.0k|                (Self::SingleQ, b'\'') | (Self::DoubleQ, b'"') => Self::Elem,
  914|       |
  915|       |                // all other bytes: no state change
  916|  10.7k|                _ => *self,
  917|       |            };
  918|       |        }
  919|  2.07k|        None
  920|   107k|    }
_RNvMs1_NtCsfk1XolJ15f9_9quick_xml6readerNtB5_8BangType6to_errCseFzqD1pb09d_7rdf_xml:
  879|     53|    fn to_err(&self) -> Error {
  880|     53|        let bang_str = match self {
  881|     11|            Self::CData => "CData",
  882|     18|            Self::Comment => "Comment",
  883|     24|            Self::DocType => "DOCTYPE",
  884|       |        };
  885|     53|        Error::UnexpectedEof(bang_str.to_string())
  886|     53|    }
_RNCNvMs1_NtCsfk1XolJ15f9_9quick_xml6readerNtB7_8BangType5parse0B9_:
  868|   149k|                        .map(|p| if content[p] == b'<' { 1i32 } else { -1 })
_RNvMs1_NtCsfk1XolJ15f9_9quick_xml6readerNtB5_8BangType6to_errB7_:
  879|     43|    fn to_err(&self) -> Error {
  880|     43|        let bang_str = match self {
  881|      6|            Self::CData => "CData",
  882|      3|            Self::Comment => "Comment",
  883|     34|            Self::DocType => "DOCTYPE",
  884|       |        };
  885|     43|        Error::UnexpectedEof(bang_str.to_string())
  886|     43|    }
_RNvNtCsfk1XolJ15f9_9quick_xml6reader13is_whitespaceB3_:
  925|  2.19M|pub(crate) const fn is_whitespace(b: u8) -> bool {
  926|  2.19M|    matches!(b, b' ' | b'\r' | b'\n' | b'\t')
  927|  2.19M|}

_RINvMs_NtNtCsfk1XolJ15f9_9quick_xml6reader9ns_readerINtB5_8NsReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE15read_event_implQINtNtCsjp9TdQkU1Un_5alloc3vec3VechEECseFzqD1pb09d_7rdf_xml:
   54|   301k|    fn read_event_impl<'i, B>(&mut self, buf: B) -> Result<Event<'i>>
   55|   301k|    where
   56|   301k|        R: XmlSource<'i, B>,
   57|   301k|    {
   58|   301k|        self.pop();
   59|   301k|        let event = self.reader.read_event_impl(buf);
   60|   301k|        self.process_event(event)
   61|   301k|    }
_RNvMNtNtCsfk1XolJ15f9_9quick_xml6reader9ns_readerINtB2_8NsReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE11from_readerCseFzqD1pb09d_7rdf_xml:
   36|  7.29k|    pub fn from_reader(reader: R) -> Self {
   37|  7.29k|        Self::new(Reader::from_reader(reader))
   38|  7.29k|    }
_RNvMs0_NtNtCsfk1XolJ15f9_9quick_xml6reader9ns_readerINtB5_8NsReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE15resolve_elementCseFzqD1pb09d_7rdf_xml:
  213|   106k|    pub fn resolve_element<'n>(&self, name: QName<'n>) -> (ResolveResult, LocalName<'n>) {
  214|   106k|        self.ns_resolver.resolve(name, true)
  215|   106k|    }
_RNvMs0_NtNtCsfk1XolJ15f9_9quick_xml6reader9ns_readerINtB5_8NsReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE17resolve_attributeCseFzqD1pb09d_7rdf_xml:
  284|  28.2k|    pub fn resolve_attribute<'n>(&self, name: QName<'n>) -> (ResolveResult, LocalName<'n>) {
  285|  28.2k|        self.ns_resolver.resolve(name, false)
  286|  28.2k|    }
_RNvMs1_NtNtCsfk1XolJ15f9_9quick_xml6reader9ns_readerINtB5_8NsReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE15read_event_intoCseFzqD1pb09d_7rdf_xml:
  343|   301k|    pub fn read_event_into<'b>(&mut self, buf: &'b mut Vec<u8>) -> Result<Event<'b>> {
  344|   301k|        self.read_event_impl(buf)
  345|   301k|    }
_RNvMs_NtNtCsfk1XolJ15f9_9quick_xml6reader9ns_readerINtB4_8NsReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE13process_eventCseFzqD1pb09d_7rdf_xml:
   70|   301k|    pub(super) fn process_event<'i>(&mut self, event: Result<Event<'i>>) -> Result<Event<'i>> {
   71|   301k|        match event {
   72|   107k|            Ok(Event::Start(e)) => {
   73|   107k|                self.ns_resolver.push(&e)?;
   74|   106k|                Ok(Event::Start(e))
   75|       |            }
   76|      0|            Ok(Event::Empty(e)) => {
   77|      0|                self.ns_resolver.push(&e)?;
   78|       |                // notify next `read_event_impl()` invocation that it needs to pop this
   79|       |                // namespace scope
   80|      0|                self.pending_pop = true;
   81|      0|                Ok(Event::Empty(e))
   82|       |            }
   83|  51.4k|            Ok(Event::End(e)) => {
   84|  51.4k|                // notify next `read_event_impl()` invocation that it needs to pop this
   85|  51.4k|                // namespace scope
   86|  51.4k|                self.pending_pop = true;
   87|  51.4k|                Ok(Event::End(e))
   88|       |            }
   89|   142k|            e => e,
   90|       |        }
   91|   301k|    }
_RNvMs_NtNtCsfk1XolJ15f9_9quick_xml6reader9ns_readerINtB4_8NsReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE3newCseFzqD1pb09d_7rdf_xml:
   46|  7.29k|    fn new(reader: Reader<R>) -> Self {
   47|  7.29k|        Self {
   48|  7.29k|            reader,
   49|  7.29k|            ns_resolver: NamespaceResolver::default(),
   50|  7.29k|            pending_pop: false,
   51|  7.29k|        }
   52|  7.29k|    }
_RNvMs_NtNtCsfk1XolJ15f9_9quick_xml6reader9ns_readerINtB4_8NsReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE3popCseFzqD1pb09d_7rdf_xml:
   63|   301k|    pub(super) fn pop(&mut self) {
   64|   301k|        if self.pending_pop {
   65|  51.4k|            self.ns_resolver.pop();
   66|  51.4k|            self.pending_pop = false;
   67|   249k|        }
   68|   301k|    }
_RNvXs4_NtNtCsfk1XolJ15f9_9quick_xml6reader9ns_readerINtB5_8NsReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEENtNtNtCsaXZRpaJvnVB_4core3ops5deref5Deref5derefCseFzqD1pb09d_7rdf_xml:
  827|   154k|    fn deref(&self) -> &Self::Target {
  828|   154k|        &self.reader
  829|   154k|    }

_RNvMNtNtCsfk1XolJ15f9_9quick_xml6reader5stateNtB2_11ReaderState20close_expanded_emptyCseFzqD1pb09d_7rdf_xml:
  244|  17.9k|    pub fn close_expanded_empty(&mut self) -> Result<Event<'static>> {
  245|  17.9k|        self.state = ParseState::ClosedTag;
  246|  17.9k|        let name = self
  247|  17.9k|            .opened_buffer
  248|  17.9k|            .split_off(self.opened_starts.pop().unwrap());
  249|  17.9k|        Ok(Event::End(BytesEnd::wrap(name.into())))
  250|  17.9k|    }
_RNvMNtNtCsfk1XolJ15f9_9quick_xml6reader5stateNtB2_11ReaderState9emit_text:
   68|   127k|    pub fn emit_text<'b>(&mut self, bytes: &'b [u8]) -> Result<Event<'b>> {
   69|   127k|        let mut content = bytes;
   70|   127k|
   71|   127k|        if self.trim_text_end {
   72|      0|            // Skip the ending '<'
   73|      0|            let len = bytes
   74|      0|                .iter()
   75|      0|                .rposition(|&b| !is_whitespace(b))
   76|      0|                .map_or_else(|| bytes.len(), |p| p + 1);
   77|      0|            content = &bytes[..len];
   78|   127k|        }
   79|       |
   80|   127k|        Ok(Event::Text(BytesText::wrap(content, self.decoder())))
   81|   127k|    }
_RNvMNtNtCsfk1XolJ15f9_9quick_xml6reader5stateNtB2_11ReaderState9emit_bang:
   85|    157|    pub fn emit_bang<'b>(&mut self, bang_type: BangType, buf: &'b [u8]) -> Result<Event<'b>> {
   86|    157|        let uncased_starts_with = |string: &[u8], prefix: &[u8]| {
   87|       |            string.len() >= prefix.len() && string[..prefix.len()].eq_ignore_ascii_case(prefix)
   88|       |        };
   89|       |
   90|    157|        let len = buf.len();
   91|     40|        match bang_type {
   92|    117|            BangType::Comment if buf.starts_with(b"!--") => {
   93|    114|                debug_assert!(buf.ends_with(b"--"));
   94|    114|                if self.check_comments {
   95|       |                    // search if '--' not in comments
   96|      0|                    if let Some(p) = memchr::memchr_iter(b'-', &buf[3..len - 2])
   97|      0|                        .position(|p| buf[3 + p + 1] == b'-')
   98|       |                    {
   99|      0|                        self.offset += len - p;
  100|      0|                        return Err(Error::UnexpectedToken("--".to_string()));
  101|      0|                    }
  102|    114|                }
  103|    114|                Ok(Event::Comment(BytesText::wrap(
  104|    114|                    &buf[3..len - 2],
  105|    114|                    self.decoder(),
  106|    114|                )))
  107|       |            }
  108|      6|            BangType::CData if uncased_starts_with(buf, b"![CDATA[") => {
  109|      0|                debug_assert!(buf.ends_with(b"]]"));
  110|      0|                Ok(Event::CData(BytesCData::wrap(
  111|      0|                    &buf[8..len - 2],
  112|      0|                    self.decoder(),
  113|      0|                )))
  114|       |            }
  115|     34|            BangType::DocType if uncased_starts_with(buf, b"!DOCTYPE") => {
  116|      0|                let start = buf[8..]
  117|      0|                    .iter()
  118|      0|                    .position(|b| !is_whitespace(*b))
  119|      0|                    .unwrap_or(len - 8);
  120|      0|                if start + 8 >= len {
  121|      0|                    return Err(Error::EmptyDocType);
  122|      0|                }
  123|      0|                Ok(Event::DocType(BytesText::wrap(
  124|      0|                    &buf[8 + start..],
  125|      0|                    self.decoder(),
  126|      0|                )))
  127|       |            }
  128|     43|            _ => Err(bang_type.to_err()),
  129|       |        }
  130|    157|    }
_RNCNvMNtNtCsfk1XolJ15f9_9quick_xml6reader5stateNtB4_11ReaderState9emit_bang0B8_:
   86|     40|        let uncased_starts_with = |string: &[u8], prefix: &[u8]| {
   87|     40|            string.len() >= prefix.len() && string[..prefix.len()].eq_ignore_ascii_case(prefix)
   88|     40|        };
_RNvMNtNtCsfk1XolJ15f9_9quick_xml6reader5stateNtB2_11ReaderState8emit_end:
  134|  33.5k|    pub fn emit_end<'b>(&mut self, buf: &'b [u8]) -> Result<Event<'b>> {
  135|  33.5k|        // Strip the `/` character. `content` contains data between `</` and `>`
  136|  33.5k|        let content = &buf[1..];
  137|       |        // XML standard permits whitespaces after the markup name in closing tags.
  138|       |        // Let's strip them from the buffer before comparing tag names.
  139|  33.5k|        let name = if self.trim_markup_names_in_closing_tags {
  140|  33.5k|            if let Some(pos_end_name) = content.iter().rposition(|&b| !is_whitespace(b)) {
  141|  24.2k|                &content[..pos_end_name + 1]
  142|       |            } else {
  143|  9.26k|                content
  144|       |            }
  145|       |        } else {
  146|      0|            content
  147|       |        };
  148|       |
  149|  33.5k|        let decoder = self.decoder();
  150|  33.5k|        let mismatch_err = |expected: String, found: &[u8], offset: &mut usize| {
  151|       |            *offset -= buf.len();
  152|       |            Err(Error::EndEventMismatch {
  153|       |                expected,
  154|       |                found: decoder.decode(found).unwrap_or_default().into_owned(),
  155|       |            })
  156|       |        };
  157|       |
  158|       |        // Get the index in self.opened_buffer of the name of the last opened tag
  159|  33.5k|        match self.opened_starts.pop() {
  160|  33.5k|            Some(start) => {
  161|  33.5k|                if self.check_end_names {
  162|  33.5k|                    let expected = &self.opened_buffer[start..];
  163|  33.5k|                    if name != expected {
  164|     24|                        let expected = decoder.decode(expected).unwrap_or_default().into_owned();
  165|     24|                        // #513: In order to allow error recovery we should drop content of the buffer
  166|     24|                        self.opened_buffer.truncate(start);
  167|     24|
  168|     24|                        return mismatch_err(expected, name, &mut self.offset);
  169|  33.4k|                    }
  170|      0|                }
  171|       |
  172|  33.4k|                self.opened_buffer.truncate(start);
  173|       |            }
  174|       |            None => {
  175|     44|                if self.check_end_names {
  176|     44|                    return mismatch_err("".to_string(), &buf[1..], &mut self.offset);
  177|      0|                }
  178|       |            }
  179|       |        }
  180|       |
  181|  33.4k|        Ok(Event::End(BytesEnd::wrap(name.into())))
  182|  33.5k|    }
_RNCNvMNtNtCsfk1XolJ15f9_9quick_xml6reader5stateNtB4_11ReaderState8emit_end0B8_:
  140|  25.1k|            if let Some(pos_end_name) = content.iter().rposition(|&b| !is_whitespace(b)) {
_RNCNvMNtNtCsfk1XolJ15f9_9quick_xml6reader5stateNtB4_11ReaderState8emit_ends_0B8_:
  150|     68|        let mismatch_err = |expected: String, found: &[u8], offset: &mut usize| {
  151|     68|            *offset -= buf.len();
  152|     68|            Err(Error::EndEventMismatch {
  153|     68|                expected,
  154|     68|                found: decoder.decode(found).unwrap_or_default().into_owned(),
  155|     68|            })
  156|     68|        };
_RNvMNtNtCsfk1XolJ15f9_9quick_xml6reader5stateNtB2_11ReaderState18emit_question_mark:
  186|  7.74k|    pub fn emit_question_mark<'b>(&mut self, buf: &'b [u8]) -> Result<Event<'b>> {
  187|  7.74k|        let len = buf.len();
  188|  7.74k|        if len > 2 && buf[len - 1] == b'?' {
  189|  7.67k|            if len > 5 && &buf[1..4] == b"xml" && is_whitespace(buf[4]) {
  190|  6.57k|                let event = BytesDecl::from_start(BytesStart::wrap(&buf[1..len - 1], 3));
  191|  6.57k|
  192|  6.57k|                // Try getting encoding from the declaration event
  193|  6.57k|                #[cfg(feature = "encoding")]
  194|  6.57k|                if self.encoding.can_be_refined() {
  195|  6.57k|                    if let Some(encoding) = event.encoder() {
  196|  6.57k|                        self.encoding = EncodingRef::XmlDetected(encoding);
  197|  6.57k|                    }
  198|  6.57k|                }
  199|  6.57k|
  200|  6.57k|                Ok(Event::Decl(event))
  201|       |            } else {
  202|  1.10k|                Ok(Event::PI(BytesText::wrap(&buf[1..len - 1], self.decoder())))
  203|       |            }
  204|       |        } else {
  205|     66|            self.offset -= len;
  206|     66|            Err(Error::UnexpectedEof("XmlDecl".to_string()))
  207|       |        }
  208|  7.74k|    }
_RNvMNtNtCsfk1XolJ15f9_9quick_xml6reader5stateNtB2_11ReaderState10emit_start:
  214|   107k|    pub fn emit_start<'b>(&mut self, content: &'b [u8]) -> Result<Event<'b>> {
  215|   107k|        let len = content.len();
  216|   107k|        let name_end = content
  217|   107k|            .iter()
  218|   107k|            .position(|&b| is_whitespace(b))
  219|   107k|            .unwrap_or(len);
  220|   107k|        if let Some(&b'/') = content.last() {
  221|       |            // This is self-closed tag `<something/>`
  222|  17.9k|            let name_len = if name_end < len { name_end } else { len - 1 };
  223|  17.9k|            let event = BytesStart::wrap(&content[..len - 1], name_len);
  224|  17.9k|
  225|  17.9k|            if self.expand_empty_elements {
  226|  17.9k|                self.state = ParseState::Empty;
  227|  17.9k|                self.opened_starts.push(self.opened_buffer.len());
  228|  17.9k|                self.opened_buffer.extend(&content[..name_len]);
  229|  17.9k|                Ok(Event::Start(event))
  230|       |            } else {
  231|      0|                Ok(Event::Empty(event))
  232|       |            }
  233|       |        } else {
  234|       |            // #514: Always store names event when .check_end_names == false,
  235|       |            // because checks can be temporary disabled and when they would be
  236|       |            // enabled, we should have that information
  237|  89.2k|            self.opened_starts.push(self.opened_buffer.len());
  238|  89.2k|            self.opened_buffer.extend(&content[..name_end]);
  239|  89.2k|            Ok(Event::Start(BytesStart::wrap(content, name_end)))
  240|       |        }
  241|   107k|    }
_RNCNvMNtNtCsfk1XolJ15f9_9quick_xml6reader5stateNtB4_11ReaderState10emit_start0B8_:
  218|   934k|            .position(|&b| is_whitespace(b))
_RNvMNtNtCsfk1XolJ15f9_9quick_xml6reader5stateNtB2_11ReaderState7decoder:
  261|   316k|    pub fn decoder(&self) -> Decoder {
  262|   316k|        Decoder {
  263|   316k|            #[cfg(feature = "encoding")]
  264|   316k|            encoding: self.encoding.encoding(),
  265|   316k|        }
  266|   316k|    }
_RNvXs_NtNtCsfk1XolJ15f9_9quick_xml6reader5stateNtB4_11ReaderStateNtNtCsaXZRpaJvnVB_4core7default7Default7default:
  270|  7.29k|    fn default() -> Self {
  271|  7.29k|        Self {
  272|  7.29k|            offset: 0,
  273|  7.29k|            state: ParseState::Init,
  274|  7.29k|            expand_empty_elements: false,
  275|  7.29k|            trim_text_start: false,
  276|  7.29k|            trim_text_end: false,
  277|  7.29k|            trim_markup_names_in_closing_tags: true,
  278|  7.29k|            check_end_names: true,
  279|  7.29k|            check_comments: false,
  280|  7.29k|            opened_buffer: Vec::new(),
  281|  7.29k|            opened_starts: Vec::new(),
  282|  7.29k|
  283|  7.29k|            #[cfg(feature = "encoding")]
  284|  7.29k|            encoding: EncodingRef::Implicit(UTF_8),
  285|  7.29k|        }
  286|  7.29k|    }

_RINvMs_NtCsfk1XolJ15f9_9quick_xml6writerINtB5_6WriterINtNtCsjp9TdQkU1Un_5alloc3vec3VechEE11write_eventNtNtB7_6events5EventECseFzqD1pb09d_7rdf_xml:
  193|  72.5k|    pub fn write_event<'a, E: AsRef<Event<'a>>>(&mut self, event: E) -> Result<()> {
  194|  72.5k|        let mut next_should_line_break = true;
  195|  72.5k|        let result = match *event.as_ref() {
  196|  24.2k|            Event::Start(ref e) => {
  197|  24.2k|                let result = self.write_wrapped(b"<", e, b">");
  198|  24.2k|                if let Some(i) = self.indent.as_mut() {
  199|  24.2k|                    i.grow();
  200|  24.2k|                }
  201|  24.2k|                result
  202|       |            }
  203|  24.2k|            Event::End(ref e) => {
  204|  24.2k|                if let Some(i) = self.indent.as_mut() {
  205|  24.2k|                    i.shrink();
  206|  24.2k|                }
  207|  24.2k|                self.write_wrapped(b"</", e, b">")
  208|       |            }
  209|  13.7k|            Event::Empty(ref e) => self.write_wrapped(b"<", e, b"/>"),
  210|  6.59k|            Event::Text(ref e) => {
  211|  6.59k|                next_should_line_break = false;
  212|  6.59k|                self.write(e)
  213|       |            }
  214|      0|            Event::Comment(ref e) => self.write_wrapped(b"<!--", e, b"-->"),
  215|      0|            Event::CData(ref e) => {
  216|      0|                next_should_line_break = false;
  217|      0|                self.write(b"<![CDATA[")?;
  218|      0|                self.write(e)?;
  219|      0|                self.write(b"]]>")
  220|       |            }
  221|  3.64k|            Event::Decl(ref e) => self.write_wrapped(b"<?", e, b"?>"),
  222|      0|            Event::PI(ref e) => self.write_wrapped(b"<?", e, b"?>"),
  223|      0|            Event::DocType(ref e) => self.write_wrapped(b"<!DOCTYPE ", e, b">"),
  224|      0|            Event::Eof => Ok(()),
  225|       |        };
  226|  72.5k|        if let Some(i) = self.indent.as_mut() {
  227|  72.5k|            i.should_line_break = next_should_line_break;
  228|  72.5k|        }
  229|  72.5k|        result
  230|  72.5k|    }
_RNvMNtCsfk1XolJ15f9_9quick_xml6writerINtB2_6WriterINtNtCsjp9TdQkU1Un_5alloc3vec3VechEE10into_innerCseFzqD1pb09d_7rdf_xml:
   88|  3.64k|    pub fn into_inner(self) -> W {
   89|  3.64k|        self.writer
   90|  3.64k|    }
_RNvMNtCsfk1XolJ15f9_9quick_xml6writerINtB2_6WriterINtNtCsjp9TdQkU1Un_5alloc3vec3VechEE15new_with_indentCseFzqD1pb09d_7rdf_xml:
   80|  3.64k|    pub fn new_with_indent(inner: W, indent_char: u8, indent_size: usize) -> Writer<W> {
   81|  3.64k|        Writer {
   82|  3.64k|            writer: inner,
   83|  3.64k|            indent: Some(Indentation::new(indent_char, indent_size)),
   84|  3.64k|        }
   85|  3.64k|    }
_RNvMs_NtCsfk1XolJ15f9_9quick_xml6writerINtB4_6WriterINtNtCsjp9TdQkU1Un_5alloc3vec3VechEE13write_wrappedCseFzqD1pb09d_7rdf_xml:
  239|  65.9k|    fn write_wrapped(&mut self, before: &[u8], value: &[u8], after: &[u8]) -> Result<()> {
  240|  65.9k|        if let Some(ref i) = self.indent {
  241|  65.9k|            if i.should_line_break {
  242|  55.7k|                self.writer.write_all(b"\n")?;
  243|  55.7k|                self.writer.write_all(i.current())?;
  244|  10.2k|            }
  245|      0|        }
  246|  65.9k|        self.write(before)?;
  247|  65.9k|        self.write(value)?;
  248|  65.9k|        self.write(after)?;
  249|  65.9k|        Ok(())
  250|  65.9k|    }
_RNvMs_NtCsfk1XolJ15f9_9quick_xml6writerINtB4_6WriterINtNtCsjp9TdQkU1Un_5alloc3vec3VechEE5writeCseFzqD1pb09d_7rdf_xml:
  234|   204k|    pub(crate) fn write(&mut self, value: &[u8]) -> Result<()> {
  235|   204k|        self.writer.write_all(value).map_err(Into::into)
  236|   204k|    }
_RNvMs2_NtCsfk1XolJ15f9_9quick_xml6writerNtB5_11Indentation3new:
  448|  3.64k|    pub fn new(indent_char: u8, indent_size: usize) -> Self {
  449|  3.64k|        Self {
  450|  3.64k|            should_line_break: false,
  451|  3.64k|            indent_char,
  452|  3.64k|            indent_size,
  453|  3.64k|            indents: vec![indent_char; 128],
  454|  3.64k|            current_indent_len: 0, // invariant - needs to remain less than indents.len()
  455|  3.64k|        }
  456|  3.64k|    }
_RNvMs2_NtCsfk1XolJ15f9_9quick_xml6writerNtB5_11Indentation4grow:
  459|  24.2k|    pub fn grow(&mut self) {
  460|  24.2k|        self.current_indent_len += self.indent_size;
  461|  24.2k|        if self.current_indent_len > self.indents.len() {
  462|      0|            self.indents
  463|      0|                .resize(self.current_indent_len, self.indent_char);
  464|  24.2k|        }
  465|  24.2k|    }
_RNvMs2_NtCsfk1XolJ15f9_9quick_xml6writerNtB5_11Indentation6shrink:
  468|  24.2k|    pub fn shrink(&mut self) {
  469|  24.2k|        self.current_indent_len = self.current_indent_len.saturating_sub(self.indent_size);
  470|  24.2k|    }
_RNvMs2_NtCsfk1XolJ15f9_9quick_xml6writerNtB5_11Indentation7current:
  473|  55.7k|    pub fn current(&self) -> &[u8] {
  474|  55.7k|        &self.indents[..self.current_indent_len]
  475|  55.7k|    }

_RINvXs2_NtNtCs7TWeHCaEud_4rand13distributions7integerNtB8_8StandardINtNtB8_12distribution12DistributionoE6sampleNtNtNtBa_4rngs6thread9ThreadRngECseFzqD1pb09d_7rdf_xml:
   51|  33.9k|    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u128 {
   52|  33.9k|        // Use LE; we explicitly generate one value before the next.
   53|  33.9k|        let x = u128::from(rng.next_u64());
   54|  33.9k|        let y = u128::from(rng.next_u64());
   55|  33.9k|        (y << 64) | x
   56|  33.9k|    }

_RINvCs7TWeHCaEud_4rand6randomoECseFzqD1pb09d_7rdf_xml:
  183|  33.9k|pub fn random<T>() -> T
  184|  33.9k|where Standard: Distribution<T> {
  185|  33.9k|    thread_rng().gen()
  186|  33.9k|}

_RINvYNtNtNtCs7TWeHCaEud_4rand4rngs6thread9ThreadRngNtNtB9_3rng3Rng3genoECseFzqD1pb09d_7rdf_xml:
   93|  33.9k|    fn gen<T>(&mut self) -> T
   94|  33.9k|    where Standard: Distribution<T> {
   95|  33.9k|        Standard.sample(self)
   96|  33.9k|    }

_RNvXs_NtNtNtCs7TWeHCaEud_4rand4rngs7adapter9reseedingINtB4_12ReseedingRngNtNtCsddBejCGwUKp_11rand_chacha6chacha12ChaCha12CoreNtNtCsaK7gPiXiUtz_9rand_core2os5OsRngENtB23_7RngCore8next_u64CseFzqD1pb09d_7rdf_xml:
  124|  67.9k|    fn next_u64(&mut self) -> u64 {
  125|  67.9k|        self.0.next_u64()
  126|  67.9k|    }
_RNvMNtNtNtCs7TWeHCaEud_4rand4rngs7adapter9reseedingINtB2_12ReseedingRngNtNtCsddBejCGwUKp_11rand_chacha6chacha12ChaCha12CoreNtNtCsaK7gPiXiUtz_9rand_core2os5OsRngE3newB8_:
  101|      1|    pub fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  102|      1|        ReseedingRng(BlockRng::new(ReseedingCore::new(rng, threshold, reseeder)))
  103|      1|    }
_RNvXs2_NtNtNtCs7TWeHCaEud_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCsddBejCGwUKp_11rand_chacha6chacha12ChaCha12CoreNtNtCsaK7gPiXiUtz_9rand_core2os5OsRngENtNtB25_5block12BlockRngCore8generateBb_:
  173|  2.12k|    fn generate(&mut self, results: &mut Self::Results) {
  174|  2.12k|        let global_fork_counter = fork::get_fork_counter();
  175|  2.12k|        if self.bytes_until_reseed <= 0 || self.is_forked(global_fork_counter) {
  176|       |            // We get better performance by not calling only `reseed` here
  177|       |            // and continuing with the rest of the function, but by directly
  178|       |            // returning from a non-inlined function.
  179|      8|            return self.reseed_and_generate(results, global_fork_counter);
  180|  2.11k|        }
  181|  2.11k|        let num_bytes = results.as_ref().len() * size_of::<Self::Item>();
  182|  2.11k|        self.bytes_until_reseed -= num_bytes as i64;
  183|  2.11k|        self.inner.generate(results);
  184|  2.12k|    }
_RNvMs3_NtNtNtCs7TWeHCaEud_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCsddBejCGwUKp_11rand_chacha6chacha12ChaCha12CoreNtNtCsaK7gPiXiUtz_9rand_core2os5OsRngE3newBb_:
  193|      1|    fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  194|      1|        use ::core::i64::MAX;
  195|      1|        fork::register_fork_handler();
  196|       |
  197|       |        // Because generating more values than `i64::MAX` takes centuries on
  198|       |        // current hardware, we just clamp to that value.
  199|       |        // Also we set a threshold of 0, which indicates no limit, to that
  200|       |        // value.
  201|      1|        let threshold = if threshold == 0 {
  202|      0|            MAX
  203|      1|        } else if threshold <= MAX as u64 {
  204|      1|            threshold as i64
  205|       |        } else {
  206|      0|            MAX
  207|       |        };
  208|       |
  209|      1|        ReseedingCore {
  210|      1|            inner: rng,
  211|      1|            reseeder,
  212|      1|            threshold: threshold as i64,
  213|      1|            bytes_until_reseed: threshold as i64,
  214|      1|            fork_counter: 0,
  215|      1|        }
  216|      1|    }
_RNvMs3_NtNtNtCs7TWeHCaEud_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCsddBejCGwUKp_11rand_chacha6chacha12ChaCha12CoreNtNtCsaK7gPiXiUtz_9rand_core2os5OsRngE6reseedBb_:
  219|      8|    fn reseed(&mut self) -> Result<(), Error> {
  220|      8|        R::from_rng(&mut self.reseeder).map(|result| {
  221|       |            self.bytes_until_reseed = self.threshold;
  222|       |            self.inner = result
  223|      8|        })
  224|      8|    }
_RNCNvMs3_NtNtNtCs7TWeHCaEud_4rand4rngs7adapter9reseedingINtB7_13ReseedingCoreNtNtCsddBejCGwUKp_11rand_chacha6chacha12ChaCha12CoreNtNtCsaK7gPiXiUtz_9rand_core2os5OsRngE6reseed0Bd_:
  220|      8|        R::from_rng(&mut self.reseeder).map(|result| {
  221|      8|            self.bytes_until_reseed = self.threshold;
  222|      8|            self.inner = result
  223|      8|        })
_RNvMs3_NtNtNtCs7TWeHCaEud_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCsddBejCGwUKp_11rand_chacha6chacha12ChaCha12CoreNtNtCsaK7gPiXiUtz_9rand_core2os5OsRngE9is_forkedBb_:
  226|  2.12k|    fn is_forked(&self, global_fork_counter: usize) -> bool {
  227|  2.12k|        // In theory, on 32-bit platforms, it is possible for
  228|  2.12k|        // `global_fork_counter` to wrap around after ~4e9 forks.
  229|  2.12k|        //
  230|  2.12k|        // This check will detect a fork in the normal case where
  231|  2.12k|        // `fork_counter < global_fork_counter`, and also when the difference
  232|  2.12k|        // between both is greater than `isize::MAX` (wrapped around).
  233|  2.12k|        //
  234|  2.12k|        // It will still fail to detect a fork if there have been more than
  235|  2.12k|        // `isize::MAX` forks, without any reseed in between. Seems unlikely
  236|  2.12k|        // enough.
  237|  2.12k|        (self.fork_counter.wrapping_sub(global_fork_counter) as isize) < 0
  238|  2.12k|    }
_RNvMs3_NtNtNtCs7TWeHCaEud_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCsddBejCGwUKp_11rand_chacha6chacha12ChaCha12CoreNtNtCsaK7gPiXiUtz_9rand_core2os5OsRngE19reseed_and_generateBb_:
  241|      8|    fn reseed_and_generate(
  242|      8|        &mut self, results: &mut <Self as BlockRngCore>::Results, global_fork_counter: usize,
  243|      8|    ) {
  244|      8|        #![allow(clippy::if_same_then_else)] // false positive
  245|      8|        if self.is_forked(global_fork_counter) {
  246|      0|            info!("Fork detected, reseeding RNG");
  247|      8|        } else {
  248|      8|            trace!("Reseeding RNG (periodic reseed)");
  249|      8|        }
  250|       |
  251|      8|        let num_bytes = results.as_ref().len() * size_of::<<R as BlockRngCore>::Item>();
  252|       |
  253|      8|        if let Err(e) = self.reseed() {
  254|      0|            warn!("Reseeding RNG failed: {}", e);
  255|      0|            let _ = e;
  256|      8|        }
  257|      8|        self.fork_counter = global_fork_counter;
  258|      8|
  259|      8|        self.bytes_until_reseed = self.threshold - num_bytes as i64;
  260|      8|        self.inner.generate(results);
  261|      8|    }
_RNvNtNtNtNtCs7TWeHCaEud_4rand4rngs7adapter9reseeding4fork16get_fork_counter:
  307|  2.12k|    pub fn get_fork_counter() -> usize {
  308|  2.12k|        RESEEDING_RNG_FORK_COUNTER.load(Ordering::Relaxed)
  309|  2.12k|    }
_RNvNtNtNtNtCs7TWeHCaEud_4rand4rngs7adapter9reseeding4fork21register_fork_handler:
  317|      1|    pub fn register_fork_handler() {
  318|      1|        static REGISTER: Once = Once::new();
  319|      1|        REGISTER.call_once(|| {
  320|       |            // Bump the counter before and after forking (see #1169):
  321|       |            let ret = unsafe { libc::pthread_atfork(
  322|       |                Some(fork_handler),
  323|       |                Some(fork_handler),
  324|       |                Some(fork_handler),
  325|       |            ) };
  326|       |            if ret != 0 {
  327|       |                panic!("libc::pthread_atfork failed with code {}", ret);
  328|       |            }
  329|      1|        });
  330|      1|    }
_RNCNvNtNtNtNtCs7TWeHCaEud_4rand4rngs7adapter9reseeding4fork21register_fork_handler0Bb_:
  319|      1|        REGISTER.call_once(|| {
  320|      1|            // Bump the counter before and after forking (see #1169):
  321|      1|            let ret = unsafe { libc::pthread_atfork(
  322|      1|                Some(fork_handler),
  323|      1|                Some(fork_handler),
  324|      1|                Some(fork_handler),
  325|      1|            ) };
  326|      1|            if ret != 0 {
  327|      0|                panic!("libc::pthread_atfork failed with code {}", ret);
  328|      1|            }
  329|      1|        });

_RNvXs_NtNtCs7TWeHCaEud_4rand4rngs6threadNtB4_9ThreadRngNtCsaK7gPiXiUtz_9rand_core7RngCore8next_u64:
  109|  67.9k|    fn next_u64(&mut self) -> u64 {
  110|  67.9k|        // SAFETY: We must make sure to stop using `rng` before anyone else
  111|  67.9k|        // creates another mutable reference
  112|  67.9k|        let rng = unsafe { &mut *self.rng.get() };
  113|  67.9k|        rng.next_u64()
  114|  67.9k|    }
_RNvNtNtCs7TWeHCaEud_4rand4rngs6thread10thread_rng:
   88|  33.9k|pub fn thread_rng() -> ThreadRng {
   89|  33.9k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
   90|  33.9k|    ThreadRng { rng }
   91|  33.9k|}
_RNCNvNtNtCs7TWeHCaEud_4rand4rngs6thread10thread_rng0B7_:
   89|  33.9k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
_RNCNvNvNtNtCs7TWeHCaEud_4rand4rngs6thread14THREAD_RNG_KEY7___getit0B9_:
   67|      1|thread_local!(
   68|      1|    // We require Rc<..> to avoid premature freeing when thread_rng is used
   69|      1|    // within thread-local destructors. See #968.
   70|      1|    static THREAD_RNG_KEY: Rc<UnsafeCell<ReseedingRng<Core, OsRng>>> = {
   71|      1|        let r = Core::from_rng(OsRng).unwrap_or_else(|err|
   72|      1|                panic!("could not initialize thread_rng: {}", err));
   73|      1|        let rng = ReseedingRng::new(r,
   74|      1|                                    THREAD_RNG_RESEED_THRESHOLD,
   75|      1|                                    OsRng);
   76|      1|        Rc::new(UnsafeCell::new(rng))
   77|      1|    }
   78|      1|);

_RNvXsm_NtCsddBejCGwUKp_11rand_chacha6chachaNtB5_12ChaCha12CoreNtNtCsaK7gPiXiUtz_9rand_core5block12BlockRngCore8generateCs7TWeHCaEud_4rand:
   89|  2.12k|            fn generate(&mut self, r: &mut Self::Results) {
   90|  2.12k|                // Fill slice of words by writing to equivalent slice of bytes, then fixing endianness.
   91|  2.12k|                self.state.refill4($rounds, unsafe {
   92|  2.12k|                    &mut *(&mut *r as *mut Array64<u32> as *mut [u8; 256])
   93|  2.12k|                });
   94|   135k|                for x in r.as_mut() {
   95|   135k|                    *x = x.to_le();
   96|   135k|                }
   97|  2.12k|            }
_RNvXsn_NtCsddBejCGwUKp_11rand_chacha6chachaNtB5_12ChaCha12CoreNtCsaK7gPiXiUtz_9rand_core11SeedableRng9from_seedCs7TWeHCaEud_4rand:
  103|      9|            fn from_seed(seed: Self::Seed) -> Self {
  104|      9|                $ChaChaXCore { state: ChaCha::new(&seed, &[0u8; 8]) }
  105|      9|            }
_RNvXs_NtCsddBejCGwUKp_11rand_chacha6chachaINtB4_7Array64mEINtNtCsaXZRpaJvnVB_4core7convert5AsRefSmE6as_refB6_:
   46|   140k|    fn as_ref(&self) -> &[T] {
   47|   140k|        &self.0
   48|   140k|    }
_RNvXs0_NtCsddBejCGwUKp_11rand_chacha6chachaINtB5_7Array64mEINtNtCsaXZRpaJvnVB_4core7convert5AsMutSmE6as_mutB7_:
   51|  2.12k|    fn as_mut(&mut self) -> &mut [T] {
   52|  2.12k|        &mut self.0
   53|  2.12k|    }
_RNvXNtCsddBejCGwUKp_11rand_chacha6chachaINtB2_7Array64mENtNtCsaXZRpaJvnVB_4core7default7Default7defaultB4_:
   32|      1|    fn default() -> Self {
   33|      1|        Self([
   34|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   35|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   36|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   37|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   38|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   39|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   40|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   41|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   42|      1|        ])
   43|      1|    }

_RNvMNtCsddBejCGwUKp_11rand_chacha4gutsNtB2_6ChaCha3new:
   72|      9|    pub fn new(key: &[u8; 32], nonce: &[u8]) -> Self {
   73|      9|        init_chacha(key, nonce)
   74|      9|    }
_RNvMNtCsddBejCGwUKp_11rand_chacha4gutsNtB2_6ChaCha7refill4:
   84|  2.12k|    pub fn refill4(&mut self, drounds: u32, out: &mut [u8; BUFSZ]) {
   85|  2.12k|        refill_wide(self, drounds, out)
   86|  2.12k|    }
_RINvNtCsddBejCGwUKp_11rand_chacha4guts5roundINtNtCsbwVAzcVgG9f_10ppv_lite864soft2x2INtNtNtNtBL_6x86_644sse24avx212u32x4x2_avx2NtB1q_4NoNIENtB1o_2G0EEB4_:
   43|  25.4k|pub(crate) fn round<V: ArithOps + BitOps32>(mut x: State<V>) -> State<V> {
   44|  25.4k|    x.a += x.b;
   45|  25.4k|    x.d = (x.d ^ x.a).rotate_each_word_right16();
   46|  25.4k|    x.c += x.d;
   47|  25.4k|    x.b = (x.b ^ x.c).rotate_each_word_right20();
   48|  25.4k|    x.a += x.b;
   49|  25.4k|    x.d = (x.d ^ x.a).rotate_each_word_right24();
   50|  25.4k|    x.c += x.d;
   51|  25.4k|    x.b = (x.b ^ x.c).rotate_each_word_right25();
   52|  25.4k|    x
   53|  25.4k|}
_RINvNtCsddBejCGwUKp_11rand_chacha4guts11diagonalizeINtNtCsbwVAzcVgG9f_10ppv_lite864soft2x2INtNtNtNtBS_6x86_644sse24avx212u32x4x2_avx2NtB1x_4NoNIENtB1v_2G0EEB4_:
   56|  12.7k|pub(crate) fn diagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   57|  12.7k|    x.b = x.b.shuffle_lane_words3012();
   58|  12.7k|    x.c = x.c.shuffle_lane_words2301();
   59|  12.7k|    x.d = x.d.shuffle_lane_words1230();
   60|  12.7k|    x
   61|  12.7k|}
_RINvNtCsddBejCGwUKp_11rand_chacha4guts13undiagonalizeINtNtCsbwVAzcVgG9f_10ppv_lite864soft2x2INtNtNtNtBU_6x86_644sse24avx212u32x4x2_avx2NtB1z_4NoNIENtB1x_2G0EEB4_:
   63|  12.7k|pub(crate) fn undiagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   64|  12.7k|    x.b = x.b.shuffle_lane_words1230();
   65|  12.7k|    x.c = x.c.shuffle_lane_words2301();
   66|  12.7k|    x.d = x.d.shuffle_lane_words3012();
   67|  12.7k|    x
   68|  12.7k|}
_RINvMNtCsddBejCGwUKp_11rand_chacha4gutsNtB3_6ChaCha5pos64INtNtCsbwVAzcVgG9f_10ppv_lite866x86_6411Avx2MachineNtBW_4NoNIEEB5_:
   77|  4.24k|    fn pos64<M: Machine>(&self, m: M) -> u64 {
   78|  4.24k|        let d: M::u32x4 = m.unpack(self.d);
   79|  4.24k|        ((d.extract(1) as u64) << 32) | d.extract(0) as u64
   80|  4.24k|    }
_RINvNtCsddBejCGwUKp_11rand_chacha4guts16refill_wide_implINtNtCsbwVAzcVgG9f_10ppv_lite866x86_6411Avx2MachineNtBV_4NoNIEEB4_:
  116|  2.12k|fn refill_wide_impl<Mach: Machine>(
  117|  2.12k|    m: Mach, state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ],
  118|  2.12k|) {
  119|  2.12k|    let k = m.vec([0x6170_7865, 0x3320_646e, 0x7962_2d32, 0x6b20_6574]);
  120|  2.12k|    let mut pos = state.pos64(m);
  121|  2.12k|    let d0: Mach::u32x4 = m.unpack(state.d);
  122|  2.12k|    pos = pos.wrapping_add(1);
  123|  2.12k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  124|  2.12k|    pos = pos.wrapping_add(1);
  125|  2.12k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  126|  2.12k|    pos = pos.wrapping_add(1);
  127|  2.12k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  128|  2.12k|
  129|  2.12k|    let b = m.unpack(state.b);
  130|  2.12k|    let c = m.unpack(state.c);
  131|  2.12k|    let mut x = State {
  132|  2.12k|        a: Mach::u32x4x4::from_lanes([k, k, k, k]),
  133|  2.12k|        b: Mach::u32x4x4::from_lanes([b, b, b, b]),
  134|  2.12k|        c: Mach::u32x4x4::from_lanes([c, c, c, c]),
  135|  2.12k|        d: m.unpack(Mach::u32x4x4::from_lanes([d0, d1, d2, d3]).into()),
  136|  2.12k|    };
  137|  12.7k|    for _ in 0..drounds {
  138|  12.7k|        x = round(x);
  139|  12.7k|        x = undiagonalize(round(diagonalize(x)));
  140|  12.7k|    }
  141|  2.12k|    let mut pos = state.pos64(m);
  142|  2.12k|    let d0: Mach::u32x4 = m.unpack(state.d);
  143|  2.12k|    pos = pos.wrapping_add(1);
  144|  2.12k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  145|  2.12k|    pos = pos.wrapping_add(1);
  146|  2.12k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  147|  2.12k|    pos = pos.wrapping_add(1);
  148|  2.12k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  149|  2.12k|    pos = pos.wrapping_add(1);
  150|  2.12k|    let d4 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  151|  2.12k|
  152|  2.12k|    let (a, b, c, d) = (
  153|  2.12k|        x.a.to_lanes(),
  154|  2.12k|        x.b.to_lanes(),
  155|  2.12k|        x.c.to_lanes(),
  156|  2.12k|        x.d.to_lanes(),
  157|  2.12k|    );
  158|  2.12k|    let sb = m.unpack(state.b);
  159|  2.12k|    let sc = m.unpack(state.c);
  160|  2.12k|    let sd = [m.unpack(state.d), d1, d2, d3];
  161|  2.12k|    state.d = d4.into();
  162|  2.12k|    let mut words = out.chunks_exact_mut(16);
  163|  8.49k|    for ((((&a, &b), &c), &d), &sd) in a.iter().zip(&b).zip(&c).zip(&d).zip(&sd) {
  164|  8.49k|        (a + k).write_le(words.next().unwrap());
  165|  8.49k|        (b + sb).write_le(words.next().unwrap());
  166|  8.49k|        (c + sc).write_le(words.next().unwrap());
  167|  8.49k|        (d + sd).write_le(words.next().unwrap());
  168|  8.49k|    }
  169|  2.12k|}
_RNvNtCsddBejCGwUKp_11rand_chacha4guts10read_u32le:
  229|     18|fn read_u32le(xs: &[u8]) -> u32 {
  230|     18|    assert_eq!(xs.len(), 4);
  231|     18|    u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24)
  232|     18|}
_RINvNvNtCsddBejCGwUKp_11rand_chacha4guts11refill_wide7fn_implINtNtCsbwVAzcVgG9f_10ppv_lite866x86_6411Avx2MachineNtB10_4NoNIEEB6_:
  172|  2.12k|    fn refill_wide(state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ]) {
  173|  2.12k|        refill_wide_impl(m, state, drounds, out);
  174|  2.12k|    }
_RINvNvNtCsddBejCGwUKp_11rand_chacha4guts11init_chacha7fn_implINtNtCsbwVAzcVgG9f_10ppv_lite866x86_6410SseMachineNtB10_5YesS3NtB10_5YesS4NtB10_4NoNIEEB6_:
  235|      9|    fn init_chacha(key: &[u8; 32], nonce: &[u8]) -> ChaCha {
  236|      9|        let ctr_nonce = [
  237|       |            0,
  238|      9|            if nonce.len() == 12 {
  239|      0|                read_u32le(&nonce[0..4])
  240|       |            } else {
  241|      9|                0
  242|       |            },
  243|      9|            read_u32le(&nonce[nonce.len() - 8..nonce.len() - 4]),
  244|      9|            read_u32le(&nonce[nonce.len() - 4..]),
  245|      9|        ];
  246|      9|        let key0: Mach::u32x4 = m.read_le(&key[..16]);
  247|      9|        let key1: Mach::u32x4 = m.read_le(&key[16..]);
  248|      9|        ChaCha {
  249|      9|            b: key0.into(),
  250|      9|            c: key1.into(),
  251|      9|            d: ctr_nonce.into(),
  252|      9|        }

_RNCNvXs0_NtCsaK7gPiXiUtz_9rand_core5blockINtB7_8BlockRngINtNtNtNtCs7TWeHCaEud_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCsddBejCGwUKp_11rand_chacha6chacha12ChaCha12CoreNtNtB9_2os5OsRngEENtB9_7RngCore8next_u640CseFzqD1pb09d_7rdf_xml:
  198|  67.9k|        let read_u64 = |results: &[u32], index| {
  199|  67.9k|            let data = &results[index..=index + 1];
  200|  67.9k|            u64::from(data[1]) << 32 | u64::from(data[0])
  201|  67.9k|        };
_RNvXs0_NtCsaK7gPiXiUtz_9rand_core5blockINtB5_8BlockRngINtNtNtNtCs7TWeHCaEud_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCsddBejCGwUKp_11rand_chacha6chacha12ChaCha12CoreNtNtB7_2os5OsRngEENtB7_7RngCore8next_u64CseFzqD1pb09d_7rdf_xml:
  197|  67.9k|    fn next_u64(&mut self) -> u64 {
  198|  67.9k|        let read_u64 = |results: &[u32], index| {
  199|       |            let data = &results[index..=index + 1];
  200|       |            u64::from(data[1]) << 32 | u64::from(data[0])
  201|       |        };
  202|       |
  203|  67.9k|        let len = self.results.as_ref().len();
  204|  67.9k|
  205|  67.9k|        let index = self.index;
  206|  67.9k|        if index < len - 1 {
  207|  65.7k|            self.index += 2;
  208|  65.7k|            // Read an u64 from the current index
  209|  65.7k|            read_u64(self.results.as_ref(), index)
  210|  2.12k|        } else if index >= len {
  211|  2.12k|            self.generate_and_set(2);
  212|  2.12k|            read_u64(self.results.as_ref(), 0)
  213|       |        } else {
  214|      0|            let x = u64::from(self.results.as_ref()[len - 1]);
  215|      0|            self.generate_and_set(1);
  216|      0|            let y = u64::from(self.results.as_ref()[0]);
  217|      0|            (y << 32) | x
  218|       |        }
  219|  67.9k|    }
_RNvMs_NtCsaK7gPiXiUtz_9rand_core5blockINtB4_8BlockRngINtNtNtNtCs7TWeHCaEud_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCsddBejCGwUKp_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE16generate_and_setBY_:
  174|  2.12k|    pub fn generate_and_set(&mut self, index: usize) {
  175|  2.12k|        assert!(index < self.results.as_ref().len());
  176|  2.12k|        self.core.generate(&mut self.results);
  177|  2.12k|        self.index = index;
  178|  2.12k|    }
_RNvMs_NtCsaK7gPiXiUtz_9rand_core5blockINtB4_8BlockRngINtNtNtNtCs7TWeHCaEud_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCsddBejCGwUKp_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE3newBY_:
  145|      1|    pub fn new(core: R) -> BlockRng<R> {
  146|      1|        let results_empty = R::Results::default();
  147|      1|        BlockRng {
  148|      1|            core,
  149|      1|            index: results_empty.as_ref().len(),
  150|      1|            results: results_empty,
  151|      1|        }
  152|      1|    }

_RINvYNtNtCsddBejCGwUKp_11rand_chacha6chacha12ChaCha12CoreNtCsaK7gPiXiUtz_9rand_core11SeedableRng8from_rngNtNtBV_2os5OsRngECs7TWeHCaEud_4rand:
  390|      1|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|      1|        let mut seed = Self::Seed::default();
  392|      1|        rng.try_fill_bytes(seed.as_mut())?;
  393|      1|        Ok(Self::from_seed(seed))
  394|      1|    }
_RINvYNtNtCsddBejCGwUKp_11rand_chacha6chacha12ChaCha12CoreNtCsaK7gPiXiUtz_9rand_core11SeedableRng8from_rngQNtNtBV_2os5OsRngECs7TWeHCaEud_4rand:
  390|      8|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|      8|        let mut seed = Self::Seed::default();
  392|      8|        rng.try_fill_bytes(seed.as_mut())?;
  393|      8|        Ok(Self::from_seed(seed))
  394|      8|    }
_RNvXs_CsaK7gPiXiUtz_9rand_coreQNtNtB4_2os5OsRngNtB4_7RngCore14try_fill_bytesCs7TWeHCaEud_4rand:
  441|      8|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
  442|      8|        (**self).try_fill_bytes(dest)
  443|      8|    }

_RNvXs_NtCsaK7gPiXiUtz_9rand_core2osNtB4_5OsRngNtB6_7RngCore14try_fill_bytes:
   67|      9|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
   68|      9|        getrandom(dest)?;
   69|      9|        Ok(())
   70|      9|    }

_RNvNvNtNtCs7TWeHCaEud_4rand4rngs6thread14THREAD_RNG_KEY6___initB7_:
   82|      1|            fn __init() -> $t { $init }
_RNvNvNtNtCs7TWeHCaEud_4rand4rngs6thread14THREAD_RNG_KEY7___getitB7_:
   85|  33.9k|            unsafe fn __getit(
   86|  33.9k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   87|  33.9k|            ) -> $crate::option::Option<&'static $t> {
   88|  33.9k|                #[thread_local]
   89|  33.9k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   90|  33.9k|                    $crate::thread::local_impl::Key::<$t>::new();
   91|  33.9k|
   92|  33.9k|                unsafe {
   93|  33.9k|                    __KEY.get(move || {
   94|       |                        if let $crate::option::Option::Some(init) = init {
   95|       |                            if let $crate::option::Option::Some(value) = init.take() {
   96|       |                                return value;
   97|       |                            } else if $crate::cfg!(debug_assertions) {
   98|       |                                $crate::unreachable!("missing default value");
   99|       |                            }
  100|       |                        }
  101|       |                        __init()
  102|  33.9k|                    })
  103|  33.9k|                }
  104|  33.9k|            }

_RNvMNtCsal5YaZOfl0H_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCseFzqD1pb09d_7rdf_xml:
   88|  39.5k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|  39.5k|        BlankNodeRef(match &self.0 {
   90|      0|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|  39.5k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|  39.5k|                id: *id,
   93|  39.5k|                str: str.as_str(),
   94|  39.5k|            },
   95|       |        })
   96|  39.5k|    }
_RNvMs1_NtCsal5YaZOfl0H_5oxrdf10blank_nodeNtB5_12BlankNodeRef10into_ownedCseFzqD1pb09d_7rdf_xml:
  204|  20.3k|    pub fn into_owned(self) -> BlankNode {
  205|  20.3k|        BlankNode(match self.0 {
  206|      0|            BlankNodeRefContent::Named(id) => BlankNodeContent::Named(id.to_owned()),
  207|  20.3k|            BlankNodeRefContent::Anonymous { id, .. } => BlankNodeContent::Anonymous {
  208|  20.3k|                id,
  209|  20.3k|                str: IdStr::new(id),
  210|  20.3k|            },
  211|       |        })
  212|  20.3k|    }
_RNvMs1_NtCsal5YaZOfl0H_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCseFzqD1pb09d_7rdf_xml:
  176|  14.2k|    pub const fn as_str(self) -> &'a str {
  177|  14.2k|        match self.0 {
  178|      0|            BlankNodeRefContent::Named(id) => id,
  179|  14.2k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  180|       |        }
  181|  14.2k|    }
_RNvMs7_NtCsal5YaZOfl0H_5oxrdf10blank_nodeNtB5_5IdStr3newCseFzqD1pb09d_7rdf_xml:
  255|  54.3k|    fn new(id: u128) -> Self {
  256|  54.3k|        let mut str = [0; 32];
  257|  54.3k|        write!(&mut str[..], "{id:x}").unwrap();
  258|  54.3k|        Self(str)
  259|  54.3k|    }
_RNvMs7_NtCsal5YaZOfl0H_5oxrdf10blank_nodeNtB5_5IdStr6as_strCseFzqD1pb09d_7rdf_xml:
  262|  73.4k|    fn as_str(&self) -> &str {
  263|  73.4k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  264|  73.4k|        str::from_utf8(&self.0[..len]).unwrap()
  265|  73.4k|    }
_RNvXs0_NtCsal5YaZOfl0H_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCsaXZRpaJvnVB_4core7default7Default7defaultCseFzqD1pb09d_7rdf_xml:
  109|  13.6k|    fn default() -> Self {
  110|       |        // We ensure the ID does not start with a number to be also valid with RDF/XML
  111|  33.9k|        loop {
  112|  33.9k|            let id = random();
  113|  33.9k|            let str = IdStr::new(id);
  114|  33.9k|            if matches!(str.as_str().as_bytes().first(), Some(b'a'..=b'f')) {
  115|  13.6k|                return Self(BlankNodeContent::Anonymous { id, str });
  116|  20.3k|            }
  117|       |        }
  118|  13.6k|    }
_RNvXsF_NtCsal5YaZOfl0H_5oxrdf10blank_nodeNtB5_5IdStrNtNtCsaXZRpaJvnVB_4core3cmp9PartialEq2eqCseFzqD1pb09d_7rdf_xml:
  250|  20.5k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsJ_NtCsal5YaZOfl0H_5oxrdf10blank_nodeNtB5_5IdStrNtNtCsaXZRpaJvnVB_4core5clone5Clone5cloneCseFzqD1pb09d_7rdf_xml:
  250|  52.2k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsd_NtCsal5YaZOfl0H_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCsaXZRpaJvnVB_4core3cmp9PartialEq2eqCseFzqD1pb09d_7rdf_xml:
   20|  20.5k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsf_NtCsal5YaZOfl0H_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCsaXZRpaJvnVB_4core5clone5Clone5cloneCseFzqD1pb09d_7rdf_xml:
   20|  52.2k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsi_NtCsal5YaZOfl0H_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCsaXZRpaJvnVB_4core3cmp9PartialEq2eqCseFzqD1pb09d_7rdf_xml:
   23|  20.5k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsm_NtCsal5YaZOfl0H_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCsaXZRpaJvnVB_4core5clone5Clone5cloneCseFzqD1pb09d_7rdf_xml:
   23|  52.2k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsr_NtCsal5YaZOfl0H_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCsaXZRpaJvnVB_4core3cmp9PartialEq2eqCseFzqD1pb09d_7rdf_xml:
  135|  18.9k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RNvXsx_NtCsal5YaZOfl0H_5oxrdf10blank_nodeNtB5_19BlankNodeRefContentNtNtCsaXZRpaJvnVB_4core3cmp9PartialEq2eqCseFzqD1pb09d_7rdf_xml:
  138|  18.9k|#[derive(PartialEq, Eq, Debug, Clone, Copy, Hash)]
_RINvMNtCsal5YaZOfl0H_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedNtNtCsjp9TdQkU1Un_5alloc6string6StringEB5_:
   49|  14.2k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   50|  14.2k|        let id = id.into();
   51|  14.2k|        if let Some(numerical_id) = to_integer_id(&id) {
   52|  14.2k|            Self::new_from_unique_id(numerical_id)
   53|       |        } else {
   54|      0|            Self(BlankNodeContent::Named(id))
   55|       |        }
   56|  14.2k|    }
_RNCNvMs7_NtCsal5YaZOfl0H_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  263|  2.35M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
_RNvMNtCsal5YaZOfl0H_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idB4_:
   62|  14.2k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|  14.2k|        Self(BlankNodeContent::Anonymous {
   64|  14.2k|            id,
   65|  14.2k|            str: IdStr::new(id),
   66|  14.2k|        })
   67|  14.2k|    }
_RNvMs7_NtCsal5YaZOfl0H_5oxrdf10blank_nodeNtB5_5IdStr3newB7_:
  255|  14.2k|    fn new(id: u128) -> Self {
  256|  14.2k|        let mut str = [0; 32];
  257|  14.2k|        write!(&mut str[..], "{id:x}").unwrap();
  258|  14.2k|        Self(str)
  259|  14.2k|    }
_RNvNtCsal5YaZOfl0H_5oxrdf10blank_node13to_integer_idB3_:
  328|  14.2k|fn to_integer_id(id: &str) -> Option<u128> {
  329|  14.2k|    let digits = id.as_bytes();
  330|  14.2k|    let mut value: u128 = 0;
  331|  14.2k|    if let None | Some(b'0') = digits.first() {
  332|      0|        return None; // No empty string or leading zeros
  333|  14.2k|    }
  334|   468k|    for digit in digits {
  335|   454k|        value = value.checked_mul(16)?.checked_add(
  336|   454k|            match *digit {
  337|   454k|                b'0'..=b'9' => digit - b'0',
  338|   179k|                b'a'..=b'f' => digit - b'a' + 10,
  339|      0|                _ => return None,
  340|       |            }
  341|   454k|            .into(),
  342|      0|        )?;
  343|       |    }
  344|  14.2k|    Some(value)
  345|  14.2k|}

_RNvMNtCsal5YaZOfl0H_5oxrdf7literalNtB2_7Literal6as_refCseFzqD1pb09d_7rdf_xml:
  131|  6.59k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  132|  6.59k|        LiteralRef(match &self.0 {
  133|  6.59k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  134|      0|            LiteralContent::LanguageTaggedString { value, language } => {
  135|      0|                LiteralRefContent::LanguageTaggedString { value, language }
  136|       |            }
  137|      0|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  138|      0|                value,
  139|      0|                datatype: datatype.as_ref(),
  140|      0|            },
  141|       |        })
  142|  6.59k|    }
_RNvMst_NtCsal5YaZOfl0H_5oxrdf7literalNtB5_10LiteralRef5valueCseFzqD1pb09d_7rdf_xml:
  490|  6.59k|    pub const fn value(self) -> &'a str {
  491|  6.59k|        match self.0 {
  492|  6.59k|            LiteralRefContent::String(value)
  493|      0|            | LiteralRefContent::LanguageTaggedString { value, .. }
  494|  6.59k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  495|  6.59k|        }
  496|  6.59k|    }
_RNvMst_NtCsal5YaZOfl0H_5oxrdf7literalNtB5_10LiteralRef8is_plainCseFzqD1pb09d_7rdf_xml:
  528|  6.59k|    pub const fn is_plain(self) -> bool {
  529|      0|        matches!(
  530|  6.59k|            self.0,
  531|       |            LiteralRefContent::String(_) | LiteralRefContent::LanguageTaggedString { .. }
  532|       |        )
  533|  6.59k|    }
_RNvMst_NtCsal5YaZOfl0H_5oxrdf7literalNtB5_10LiteralRef8languageCseFzqD1pb09d_7rdf_xml:
  503|  6.59k|    pub const fn language(self) -> Option<&'a str> {
  504|  6.59k|        match self.0 {
  505|      0|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  506|  6.59k|            _ => None,
  507|       |        }
  508|  6.59k|    }
_RNvXsD_NtCsal5YaZOfl0H_5oxrdf7literalNtB5_7LiteralNtNtCsaXZRpaJvnVB_4core3cmp9PartialEq2eqCseFzqD1pb09d_7rdf_xml:
   36|  6.59k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsI_NtCsal5YaZOfl0H_5oxrdf7literalNtB5_14LiteralContentNtNtCsaXZRpaJvnVB_4core3cmp9PartialEq2eqCseFzqD1pb09d_7rdf_xml:
   39|  6.59k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RINvMNtCsal5YaZOfl0H_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCsjp9TdQkU1Un_5alloc6string6StringEB5_:
   49|  13.1k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   50|  13.1k|        Self(LiteralContent::String(value.into()))
   51|  13.1k|    }

_RNvMNtCsal5YaZOfl0H_5oxrdf10named_nodeNtB2_9NamedNode6as_refCseFzqD1pb09d_7rdf_xml:
   54|  33.9k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  33.9k|        NamedNodeRef::new_unchecked(&self.iri)
   56|  33.9k|    }
_RNvMNtCsal5YaZOfl0H_5oxrdf10named_nodeNtB2_9NamedNode6as_strCseFzqD1pb09d_7rdf_xml:
   44|  27.6k|    pub fn as_str(&self) -> &str {
   45|  27.6k|        self.iri.as_str()
   46|  27.6k|    }
_RNvMs4_NtCsal5YaZOfl0H_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCseFzqD1pb09d_7rdf_xml:
  128|  33.9k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  33.9k|        Self { iri }
  130|  33.9k|    }
_RNvMs4_NtCsal5YaZOfl0H_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCseFzqD1pb09d_7rdf_xml:
  133|  34.2k|    pub const fn as_str(self) -> &'a str {
  134|  34.2k|        self.iri
  135|  34.2k|    }
_RNvXs0_NtCsal5YaZOfl0H_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCsaXZRpaJvnVB_4core3cmp9PartialEqeE2eqCseFzqD1pb09d_7rdf_xml:
   68|  27.6k|    fn eq(&self, other: &str) -> bool {
   69|  27.6k|        self.as_str() == other
   70|  27.6k|    }
_RNvXsl_NtCsal5YaZOfl0H_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCsaXZRpaJvnVB_4core3cmp9PartialEq2eqCseFzqD1pb09d_7rdf_xml:
   17|  33.9k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RINvMNtCsal5YaZOfl0H_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCsjp9TdQkU1Un_5alloc6string6StringEB5_:
   39|  75.5k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  75.5k|        Self { iri: iri.into() }
   41|  75.5k|    }
_RINvMNtCsal5YaZOfl0H_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|  13.6k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  13.6k|        Self { iri: iri.into() }
   41|  13.6k|    }
_RNvMs4_NtCsal5YaZOfl0H_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|  13.6k|    pub fn into_owned(self) -> NamedNode {
  139|  13.6k|        NamedNode::new_unchecked(self.iri)
  140|  13.6k|    }
_RNvXs6_NtCsal5YaZOfl0H_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCsaXZRpaJvnVB_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|  13.6k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|  13.6k|        node.into_owned()
  154|  13.6k|    }

_RINvMs12_NtCsal5YaZOfl0H_5oxrdf6tripleNtB7_6Triple3newNtB7_7SubjectNtNtB9_10named_node12NamedNodeRefNtB15_9NamedNodeECseFzqD1pb09d_7rdf_xml:
  729|  13.6k|    pub fn new(
  730|  13.6k|        subject: impl Into<Subject>,
  731|  13.6k|        predicate: impl Into<NamedNode>,
  732|  13.6k|        object: impl Into<Term>,
  733|  13.6k|    ) -> Self {
  734|  13.6k|        Self {
  735|  13.6k|            subject: subject.into(),
  736|  13.6k|            predicate: predicate.into(),
  737|  13.6k|            object: object.into(),
  738|  13.6k|        }
  739|  13.6k|    }
_RINvMs12_NtCsal5YaZOfl0H_5oxrdf6tripleNtB7_6Triple3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtB7_4TermECseFzqD1pb09d_7rdf_xml:
  729|  27.1k|    pub fn new(
  730|  27.1k|        subject: impl Into<Subject>,
  731|  27.1k|        predicate: impl Into<NamedNode>,
  732|  27.1k|        object: impl Into<Term>,
  733|  27.1k|    ) -> Self {
  734|  27.1k|        Self {
  735|  27.1k|            subject: subject.into(),
  736|  27.1k|            predicate: predicate.into(),
  737|  27.1k|            object: object.into(),
  738|  27.1k|        }
  739|  27.1k|    }
_RNvMs12_NtCsal5YaZOfl0H_5oxrdf6tripleNtB6_6Triple6as_refCseFzqD1pb09d_7rdf_xml:
  753|  20.3k|    pub fn as_ref(&self) -> TripleRef<'_> {
  754|  20.3k|        TripleRef {
  755|  20.3k|            subject: self.subject.as_ref(),
  756|  20.3k|            predicate: self.predicate.as_ref(),
  757|  20.3k|            object: self.object.as_ref(),
  758|  20.3k|        }
  759|  20.3k|    }
_RNvMsc_NtCsal5YaZOfl0H_5oxrdf6tripleNtB5_7Subject6as_refCseFzqD1pb09d_7rdf_xml:
  181|  39.3k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  39.3k|        match self {
  183|      0|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|  39.3k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|      0|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  39.3k|    }
_RNvMsn_NtCsal5YaZOfl0H_5oxrdf6tripleNtB5_10SubjectRef10into_ownedCseFzqD1pb09d_7rdf_xml:
  294|  20.3k|    pub fn into_owned(self) -> Subject {
  295|  20.3k|        match self {
  296|      0|            Self::NamedNode(node) => Subject::NamedNode(node.into_owned()),
  297|  20.3k|            Self::BlankNode(node) => Subject::BlankNode(node.into_owned()),
  298|       |            #[cfg(feature = "rdf-star")]
  299|      0|            Self::Triple(triple) => Subject::Triple(Box::new(triple.clone())),
  300|       |        }
  301|  20.3k|    }
_RNvMsy_NtCsal5YaZOfl0H_5oxrdf6tripleNtB5_4Term6as_refCseFzqD1pb09d_7rdf_xml:
  417|  20.3k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|  20.3k|        match self {
  419|  13.6k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|    187|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  6.59k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|      0|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|  20.3k|    }
_RNvXs16_NtCsal5YaZOfl0H_5oxrdf6tripleNtB6_9TripleRefINtNtCsaXZRpaJvnVB_4core7convert4FromRNtB6_6TripleE4fromCseFzqD1pb09d_7rdf_xml:
  844|  20.3k|    fn from(triple: &'a Triple) -> Self {
  845|  20.3k|        triple.as_ref()
  846|  20.3k|    }
_RNvXs1Q_NtCsal5YaZOfl0H_5oxrdf6tripleNtB6_7SubjectNtNtCsaXZRpaJvnVB_4core3cmp9PartialEq2eqCseFzqD1pb09d_7rdf_xml:
  155|  20.3k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1S_NtCsal5YaZOfl0H_5oxrdf6tripleNtB6_7SubjectNtNtCsaXZRpaJvnVB_4core5clone5Clone5cloneCseFzqD1pb09d_7rdf_xml:
  155|  52.2k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1X_NtCsal5YaZOfl0H_5oxrdf6tripleNtB6_10SubjectRefNtNtCsaXZRpaJvnVB_4core3cmp9PartialEq2eqCseFzqD1pb09d_7rdf_xml:
  268|  18.9k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RNvXs25_NtCsal5YaZOfl0H_5oxrdf6tripleNtB6_4TermNtNtCsaXZRpaJvnVB_4core3cmp9PartialEq2eqCseFzqD1pb09d_7rdf_xml:
  385|  20.3k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2k_NtCsal5YaZOfl0H_5oxrdf6tripleNtB6_6TripleNtNtCsaXZRpaJvnVB_4core3cmp9PartialEq2eqCseFzqD1pb09d_7rdf_xml:
  714|  20.3k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsL_NtCsal5YaZOfl0H_5oxrdf6tripleNtB5_4TermINtNtCsaXZRpaJvnVB_4core7convert4FromNtB5_7SubjectE4fromCseFzqD1pb09d_7rdf_xml:
  520|  13.9k|    fn from(node: Subject) -> Self {
  521|  13.9k|        match node {
  522|  13.6k|            Subject::NamedNode(node) => node.into(),
  523|    374|            Subject::BlankNode(node) => node.into(),
  524|       |            #[cfg(feature = "rdf-star")]
  525|      0|            Subject::Triple(triple) => Self::Triple(triple),
  526|       |        }
  527|  13.9k|    }
_RNvXse_NtCsal5YaZOfl0H_5oxrdf6tripleNtB5_7SubjectINtNtCsaXZRpaJvnVB_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromCseFzqD1pb09d_7rdf_xml:
  200|  13.6k|    fn from(node: NamedNode) -> Self {
  201|  13.6k|        Self::NamedNode(node)
  202|  13.6k|    }
_RNvXsg_NtCsal5YaZOfl0H_5oxrdf6tripleNtB5_7SubjectINtNtCsaXZRpaJvnVB_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|  27.8k|    fn from(node: BlankNode) -> Self {
  215|  27.8k|        Self::BlankNode(node)
  216|  27.8k|    }
_RNvXsA_NtCsal5YaZOfl0H_5oxrdf6tripleNtB5_4TermINtNtCsaXZRpaJvnVB_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|  27.2k|    fn from(node: NamedNode) -> Self {
  438|  27.2k|        Self::NamedNode(node)
  439|  27.2k|    }
_RNvXsC_NtCsal5YaZOfl0H_5oxrdf6tripleNtB5_4TermINtNtCsaXZRpaJvnVB_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  451|    374|    fn from(node: BlankNode) -> Self {
  452|    374|        Self::BlankNode(node)
  453|    374|    }
_RNvXsE_NtCsal5YaZOfl0H_5oxrdf6tripleNtB5_4TermINtNtCsaXZRpaJvnVB_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  465|  13.1k|    fn from(literal: Literal) -> Self {
  466|  13.1k|        Self::Literal(literal)
  467|  13.1k|    }

_RNvXs1_NtCs6NQ0qd6wXH9_8oxrdfxml5errorNtB5_10ParseErrorINtNtCsaXZRpaJvnVB_4core7convert4FromNtB5_11SyntaxErrorE4fromCseFzqD1pb09d_7rdf_xml:
   45|  41.1k|    fn from(error: SyntaxError) -> Self {
   46|  41.1k|        Self::Syntax(error)
   47|  41.1k|    }
_RNvXs3_NtCs6NQ0qd6wXH9_8oxrdfxml5errorNtB5_10ParseErrorINtNtCsaXZRpaJvnVB_4core7convert4FromNtNtCsfk1XolJ15f9_9quick_xml6errors5ErrorE4fromCseFzqD1pb09d_7rdf_xml:
   62|  70.8k|    fn from(error: quick_xml::Error) -> Self {
   63|  70.8k|        match error {
   64|      0|            quick_xml::Error::Io(error) => Self::Io(match Arc::try_unwrap(error) {
   65|      0|                Ok(error) => error,
   66|      0|                Err(error) => io::Error::new(error.kind(), error),
   67|       |            }),
   68|  70.8k|            _ => Self::Syntax(SyntaxError {
   69|  70.8k|                inner: SyntaxErrorKind::Xml(error),
   70|  70.8k|            }),
   71|       |        }
   72|  70.8k|    }
_RINvMs4_NtCs6NQ0qd6wXH9_8oxrdfxml5errorNtB6_11SyntaxError3msgNtNtCsjp9TdQkU1Un_5alloc6string6StringECseFzqD1pb09d_7rdf_xml:
  100|  17.1k|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
  101|  17.1k|        Self {
  102|  17.1k|            inner: SyntaxErrorKind::Msg { msg: msg.into() },
  103|  17.1k|        }
  104|  17.1k|    }
_RINvMs4_NtCs6NQ0qd6wXH9_8oxrdfxml5errorNtB6_11SyntaxError3msgReECseFzqD1pb09d_7rdf_xml:
  100|  10.9k|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
  101|  10.9k|        Self {
  102|  10.9k|            inner: SyntaxErrorKind::Msg { msg: msg.into() },
  103|  10.9k|        }
  104|  10.9k|    }

_RINvMNtCs6NQ0qd6wXH9_8oxrdfxml6parserNtB3_12RdfXmlParser10parse_readRShECseFzqD1pb09d_7rdf_xml:
  112|  7.29k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadRdfXmlReader<R> {
  113|  7.29k|        FromReadRdfXmlReader {
  114|  7.29k|            results: Vec::new(),
  115|  7.29k|            reader: self.parse(BufReader::new(read)),
  116|  7.29k|            reader_buffer: Vec::default(),
  117|  7.29k|        }
  118|  7.29k|    }
_RINvMNtCs6NQ0qd6wXH9_8oxrdfxml6parserNtB3_12RdfXmlParser5parseINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEECseFzqD1pb09d_7rdf_xml:
  164|  7.29k|    fn parse<T>(&self, reader: T) -> RdfXmlReader<T> {
  165|  7.29k|        let mut reader = NsReader::from_reader(reader);
  166|  7.29k|        reader.expand_empty_elements(true);
  167|  7.29k|        RdfXmlReader {
  168|  7.29k|            reader,
  169|  7.29k|            state: vec![RdfXmlState::Doc {
  170|  7.29k|                base_iri: self.base.clone(),
  171|  7.29k|            }],
  172|  7.29k|            custom_entities: HashMap::default(),
  173|  7.29k|            in_literal_depth: 0,
  174|  7.29k|            known_rdf_id: HashSet::default(),
  175|  7.29k|            is_end: false,
  176|  7.29k|            unchecked: self.unchecked,
  177|  7.29k|        }
  178|  7.29k|    }
_RNCNvMs2_NtCs6NQ0qd6wXH9_8oxrdfxml6parserINtB7_12RdfXmlReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE15resolve_ns_name0CseFzqD1pb09d_7rdf_xml:
  925|  3.04k|                Ok(unescape_with(&self.reader.decoder().decode(&value)?, |e| {
  926|  3.04k|                    self.resolve_entity(e)
  927|  3.04k|                })
_RNCNvMs2_NtCs6NQ0qd6wXH9_8oxrdfxml6parserINtB7_12RdfXmlReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE16parse_text_event0CseFzqD1pb09d_7rdf_xml:
  883|  3.18k|        let text = event.unescape_with(|e| self.resolve_entity(e))?.to_string();
_RNCNvMs2_NtCs6NQ0qd6wXH9_8oxrdfxml6parserINtB7_12RdfXmlReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE9parse_iri0CseFzqD1pb09d_7rdf_xml:
 1200|  13.0k|                .map_err(|error| SyntaxError {
 1201|  13.0k|                    inner: SyntaxErrorKind::InvalidIri {
 1202|  13.0k|                        iri: relative_iri,
 1203|  13.0k|                        error,
 1204|  13.0k|                    },
 1205|  13.0k|                })?
_RNvMs0_NtCs6NQ0qd6wXH9_8oxrdfxml6parserINtB5_20FromReadRdfXmlReaderRShE10parse_stepCseFzqD1pb09d_7rdf_xml:
  239|   301k|    fn parse_step(&mut self) -> Result<(), ParseError> {
  240|   301k|        self.reader_buffer.clear();
  241|   301k|        let event = self
  242|   301k|            .reader
  243|   301k|            .reader
  244|   301k|            .read_event_into(&mut self.reader_buffer)?;
  245|   300k|        self.reader.parse_event(event, &mut self.results)
  246|   301k|    }
_RNvMs2_NtCs6NQ0qd6wXH9_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE11new_literalCseFzqD1pb09d_7rdf_xml:
 1108|  13.1k|    fn new_literal(
 1109|  13.1k|        value: String,
 1110|  13.1k|        language: Option<String>,
 1111|  13.1k|        datatype: Option<NamedNode>,
 1112|  13.1k|    ) -> Literal {
 1113|  13.1k|        if let Some(datatype) = datatype {
 1114|      0|            Literal::new_typed_literal(value, datatype)
 1115|  13.1k|        } else if let Some(language) = language {
 1116|      0|            Literal::new_language_tagged_literal_unchecked(value, language)
 1117|       |        } else {
 1118|  13.1k|            Literal::new_simple_literal(value)
 1119|       |        }
 1120|  13.1k|    }
_RNvMs2_NtCs6NQ0qd6wXH9_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE11parse_eventCseFzqD1pb09d_7rdf_xml:
  439|   300k|    fn parse_event(
  440|   300k|        &mut self,
  441|   300k|        event: Event<'_>,
  442|   300k|        results: &mut Vec<Triple>,
  443|   300k|    ) -> Result<(), ParseError> {
  444|   300k|        match event {
  445|   106k|            Event::Start(event) => self.parse_start_event(&event, results),
  446|  51.4k|            Event::End(event) => self.parse_end_event(&event, results),
  447|       |            Event::Empty(_) => {
  448|      0|                Err(SyntaxError::msg("The expand_empty_elements option must be enabled").into())
  449|       |            }
  450|   127k|            Event::Text(event) => self.parse_text_event(&event),
  451|      0|            Event::CData(event) => self.parse_text_event(&event.escape()?),
  452|  1.21k|            Event::Comment(_) | Event::PI(_) => Ok(()),
  453|  6.57k|            Event::Decl(decl) => {
  454|  6.57k|                if let Some(encoding) = decl.encoding() {
  455|  6.46k|                    if !is_utf8(&encoding?) {
  456|  2.09k|                        return Err(SyntaxError::msg(
  457|  2.09k|                            "Only UTF-8 is supported by the RDF/XML parser",
  458|  2.09k|                        )
  459|  2.09k|                        .into());
  460|  3.71k|                    }
  461|    112|                }
  462|  3.82k|                Ok(())
  463|       |            }
  464|      0|            Event::DocType(dt) => self.parse_doctype(&dt),
  465|       |            Event::Eof => {
  466|  7.29k|                self.is_end = true;
  467|  7.29k|                Ok(())
  468|       |            }
  469|       |        }
  470|   300k|    }
_RNvMs2_NtCs6NQ0qd6wXH9_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE11resolve_iriCseFzqD1pb09d_7rdf_xml:
 1170|  13.6k|    fn resolve_iri(
 1171|  13.6k|        &self,
 1172|  13.6k|        base_iri: &Option<Iri<String>>,
 1173|  13.6k|        relative_iri: String,
 1174|  13.6k|    ) -> Result<NamedNode, SyntaxError> {
 1175|  13.6k|        if let Some(base_iri) = base_iri {
 1176|       |            Ok(NamedNode::new_unchecked(
 1177|      0|                if self.unchecked {
 1178|      0|                    base_iri.resolve_unchecked(&relative_iri)
 1179|       |                } else {
 1180|      0|                    base_iri.resolve(&relative_iri)
 1181|       |                }
 1182|      0|                .map_err(|error| SyntaxError {
 1183|       |                    inner: SyntaxErrorKind::InvalidIri {
 1184|       |                        iri: relative_iri,
 1185|       |                        error,
 1186|       |                    },
 1187|      0|                })?
 1188|      0|                .into_inner(),
 1189|       |            ))
 1190|       |        } else {
 1191|  13.6k|            self.parse_iri(relative_iri)
 1192|       |        }
 1193|  13.6k|    }
_RNvMs2_NtCs6NQ0qd6wXH9_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE14build_node_eltCseFzqD1pb09d_7rdf_xml:
  943|  27.6k|    fn build_node_elt(
  944|  27.6k|        iri: NamedNode,
  945|  27.6k|        base_iri: Option<Iri<String>>,
  946|  27.6k|        language: Option<String>,
  947|  27.6k|        id_attr: Option<NamedNode>,
  948|  27.6k|        node_id_attr: Option<BlankNode>,
  949|  27.6k|        about_attr: Option<NamedNode>,
  950|  27.6k|        type_attr: Option<NamedNode>,
  951|  27.6k|        property_attrs: Vec<(NamedNode, String)>,
  952|  27.6k|        results: &mut Vec<Triple>,
  953|  27.6k|    ) -> Result<RdfXmlState, SyntaxError> {
  954|  27.6k|        let subject = match (id_attr, node_id_attr, about_attr) {
  955|      0|            (Some(id_attr), None, None) => Subject::from(id_attr),
  956|  14.0k|            (None, Some(node_id_attr), None) => node_id_attr.into(),
  957|      0|            (None, None, Some(about_attr)) => about_attr.into(),
  958|  13.6k|            (None, None, None) => BlankNode::default().into(),
  959|       |            (Some(_), Some(_), _) => {
  960|      0|                return Err(SyntaxError::msg(
  961|      0|                    "Not both rdf:ID and rdf:nodeID could be set at the same time",
  962|      0|                ))
  963|       |            }
  964|       |            (_, Some(_), Some(_)) => {
  965|      0|                return Err(SyntaxError::msg(
  966|      0|                    "Not both rdf:nodeID and rdf:resource could be set at the same time",
  967|      0|                ))
  968|       |            }
  969|       |            (Some(_), _, Some(_)) => {
  970|      0|                return Err(SyntaxError::msg(
  971|      0|                    "Not both rdf:ID and rdf:resource could be set at the same time",
  972|      0|                ))
  973|       |            }
  974|       |        };
  975|       |
  976|  27.6k|        Self::emit_property_attrs(&subject, property_attrs, &language, results);
  977|       |
  978|  27.6k|        if let Some(type_attr) = type_attr {
  979|      0|            results.push(Triple::new(subject.clone(), rdf::TYPE, type_attr));
  980|  27.6k|        }
  981|       |
  982|  27.6k|        if iri != *RDF_DESCRIPTION {
  983|  13.6k|            results.push(Triple::new(subject.clone(), rdf::TYPE, iri));
  984|  14.0k|        }
  985|  27.6k|        Ok(RdfXmlState::NodeElt {
  986|  27.6k|            base_iri,
  987|  27.6k|            language,
  988|  27.6k|            subject,
  989|  27.6k|            li_counter: 0,
  990|  27.6k|        })
  991|  27.6k|    }
_RNvMs2_NtCs6NQ0qd6wXH9_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE14resolve_entityCseFzqD1pb09d_7rdf_xml:
 1210|  6.22k|    fn resolve_entity(&self, e: &str) -> Option<&str> {
 1211|  6.22k|        self.custom_entities.get(e).map(String::as_str)
 1212|  6.22k|    }
_RNvMs2_NtCs6NQ0qd6wXH9_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE15parse_end_eventCseFzqD1pb09d_7rdf_xml:
  858|  51.4k|    fn parse_end_event(
  859|  51.4k|        &mut self,
  860|  51.4k|        event: &BytesEnd<'_>,
  861|  51.4k|        results: &mut Vec<Triple>,
  862|  51.4k|    ) -> Result<(), ParseError> {
  863|  51.4k|        // Literal case
  864|  51.4k|        if self.in_literal_depth > 0 {
  865|      0|            if let Some(RdfXmlState::ParseTypeLiteralPropertyElt { writer, .. }) =
  866|      0|                self.state.last_mut()
  867|       |            {
  868|      0|                writer.write_event(Event::End(BytesEnd::new(
  869|      0|                    self.reader.decoder().decode(event.name().as_ref())?,
  870|      0|                )))?;
  871|      0|                self.in_literal_depth -= 1;
  872|      0|                return Ok(());
  873|      0|            }
  874|  51.4k|        }
  875|       |
  876|  51.4k|        if let Some(current_state) = self.state.pop() {
  877|  50.6k|            self.end_state(current_state, results)?;
  878|    791|        }
  879|  51.4k|        Ok(())
  880|  51.4k|    }
_RNvMs2_NtCs6NQ0qd6wXH9_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE15resolve_ns_nameCseFzqD1pb09d_7rdf_xml:
  915|   135k|    fn resolve_ns_name(
  916|   135k|        &self,
  917|   135k|        namespace: ResolveResult<'_>,
  918|   135k|        local_name: LocalName<'_>,
  919|   135k|    ) -> Result<String, ParseError> {
  920|   135k|        match namespace {
  921|   124k|            ResolveResult::Bound(ns) => {
  922|   124k|                let mut value = Vec::with_capacity(ns.as_ref().len() + local_name.as_ref().len());
  923|   124k|                value.extend_from_slice(ns.as_ref());
  924|   124k|                value.extend_from_slice(local_name.as_ref());
  925|   124k|                Ok(unescape_with(&self.reader.decoder().decode(&value)?, |e| {
  926|       |                    self.resolve_entity(e)
  927|       |                })
  928|   122k|                .map_err(quick_xml::Error::from)?
  929|   115k|                .to_string())
  930|       |            }
  931|       |            ResolveResult::Unbound => {
  932|  8.30k|                Err(SyntaxError::msg("XML namespaces are required in RDF/XML").into())
  933|       |            }
  934|  2.21k|            ResolveResult::Unknown(v) => Err(SyntaxError::msg(format!(
  935|  2.21k|                "Unknown prefix {}:",
  936|  2.21k|                self.reader.decoder().decode(&v)?
  937|       |            ))
  938|  1.44k|            .into()),
  939|       |        }
  940|   135k|    }
_RNvMs2_NtCs6NQ0qd6wXH9_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE16parse_text_eventCseFzqD1pb09d_7rdf_xml:
  882|   127k|    fn parse_text_event(&mut self, event: &BytesText<'_>) -> Result<(), ParseError> {
  883|   127k|        let text = event.unescape_with(|e| self.resolve_entity(e))?.to_string();
  884|  69.1k|        match self.state.last_mut() {
  885|  3.67k|            Some(RdfXmlState::PropertyElt { object, .. }) => {
  886|  3.67k|                if !event.iter().copied().all(is_whitespace) {
  887|  3.44k|                    *object = Some(NodeOrText::Text(text));
  888|  3.44k|                }
  889|  3.67k|                Ok(())
  890|       |            }
  891|      0|            Some(RdfXmlState::ParseTypeLiteralPropertyElt { writer, .. }) => {
  892|      0|                writer.write_event(Event::Text(BytesText::new(&text)))?;
  893|      0|                Ok(())
  894|       |            }
  895|       |            _ => {
  896|  65.4k|                if event.iter().copied().all(is_whitespace) {
  897|  55.9k|                    Ok(())
  898|       |                } else {
  899|  9.44k|                    Err(SyntaxError::msg(format!("Unexpected text event: '{text}'")).into())
  900|       |                }
  901|       |            }
  902|       |        }
  903|   127k|    }
_RNvMs2_NtCs6NQ0qd6wXH9_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE16resolve_tag_nameCseFzqD1pb09d_7rdf_xml:
  905|   106k|    fn resolve_tag_name(&self, qname: QName<'_>) -> Result<String, ParseError> {
  906|   106k|        let (namespace, local_name) = self.reader.resolve_element(qname);
  907|   106k|        self.resolve_ns_name(namespace, local_name)
  908|   106k|    }
_RNvMs2_NtCs6NQ0qd6wXH9_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE17convert_attributeCseFzqD1pb09d_7rdf_xml:
 1156|  27.8k|    fn convert_attribute(&self, attribute: &Attribute<'_>) -> Result<String, ParseError> {
 1157|  27.8k|        Ok(attribute
 1158|  27.8k|            .decode_and_unescape_value_with(&self.reader, |e| self.resolve_entity(e))?
 1159|  27.8k|            .into_owned())
 1160|  27.8k|    }
_RNvMs2_NtCs6NQ0qd6wXH9_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE17parse_start_eventCseFzqD1pb09d_7rdf_xml:
  510|   106k|    fn parse_start_event(
  511|   106k|        &mut self,
  512|   106k|        event: &BytesStart<'_>,
  513|   106k|        results: &mut Vec<Triple>,
  514|   106k|    ) -> Result<(), ParseError> {
  515|       |        #[derive(PartialEq, Eq)]
  516|       |        enum RdfXmlParseType {
  517|       |            Default,
  518|       |            Collection,
  519|       |            Literal,
  520|       |            Resource,
  521|       |            Other,
  522|       |        }
  523|       |
  524|       |        #[derive(PartialEq, Eq)]
  525|       |        enum RdfXmlNextProduction {
  526|       |            Rdf,
  527|       |            NodeElt,
  528|       |            PropertyElt { subject: Subject },
  529|       |        }
  530|       |
  531|       |        // Literal case
  532|   106k|        if let Some(RdfXmlState::ParseTypeLiteralPropertyElt { writer, .. }) = self.state.last_mut()
  533|       |        {
  534|      0|            let mut clean_event = BytesStart::new(
  535|      0|                self.reader
  536|      0|                    .decoder()
  537|      0|                    .decode(event.name().as_ref())?
  538|      0|                    .to_string(),
  539|       |            );
  540|      0|            for attr in event.attributes() {
  541|      0|                clean_event.push_attribute(attr.map_err(Error::InvalidAttr)?);
  542|       |            }
  543|      0|            writer.write_event(Event::Start(clean_event))?;
  544|      0|            self.in_literal_depth += 1;
  545|      0|            return Ok(());
  546|   106k|        }
  547|       |
  548|   106k|        let tag_name = self.resolve_tag_name(event.name())?;
  549|       |
  550|       |        // We read attributes
  551|  87.5k|        let (mut language, mut base_iri) = if let Some(current_state) = self.state.last() {
  552|  86.7k|            (
  553|  86.7k|                current_state.language().cloned(),
  554|  86.7k|                current_state.base_iri().cloned(),
  555|  86.7k|            )
  556|       |        } else {
  557|    734|            (None, None)
  558|       |        };
  559|       |
  560|  87.5k|        let mut id_attr = None;
  561|  87.5k|        let mut node_id_attr = None;
  562|  87.5k|        let mut about_attr = None;
  563|  87.5k|        let mut property_attrs = Vec::default();
  564|  87.5k|        let mut resource_attr = None;
  565|  87.5k|        let mut datatype_attr = None;
  566|  87.5k|        let mut parse_type = RdfXmlParseType::Default;
  567|  87.5k|        let mut type_attr = None;
  568|       |
  569|  87.5k|        for attribute in event.attributes() {
  570|  41.2k|            let attribute = attribute.map_err(Error::InvalidAttr)?;
  571|  39.6k|            if attribute.key.as_ref().starts_with(b"xml") {
  572|  11.3k|                if attribute.key.as_ref() == b"xml:lang" {
  573|      0|                    let tag = self.convert_attribute(&attribute)?.to_ascii_lowercase();
  574|      0|                    language = Some(if self.unchecked {
  575|      0|                        tag
  576|       |                    } else {
  577|      0|                        LanguageTag::parse(tag.to_ascii_lowercase())
  578|      0|                            .map_err(|error| SyntaxError {
  579|       |                                inner: SyntaxErrorKind::InvalidLanguageTag { tag, error },
  580|      0|                            })?
  581|      0|                            .into_inner()
  582|       |                    });
  583|  11.3k|                } else if attribute.key.as_ref() == b"xml:base" {
  584|      0|                    let iri = self.convert_attribute(&attribute)?;
  585|      0|                    base_iri = Some(
  586|      0|                        if self.unchecked {
  587|      0|                            Iri::parse_unchecked(iri.clone())
  588|       |                        } else {
  589|      0|                            Iri::parse(iri.clone())
  590|       |                        }
  591|      0|                        .map_err(|error| SyntaxError {
  592|       |                            inner: SyntaxErrorKind::InvalidIri { iri, error },
  593|      0|                        })?,
  594|       |                    )
  595|  11.3k|                } else {
  596|  11.3k|                    // We ignore other xml attributes
  597|  11.3k|                }
  598|       |            } else {
  599|  28.2k|                let attribute_url = self.resolve_attribute_name(attribute.key)?;
  600|  28.0k|                if *attribute_url == *RDF_ID {
  601|      0|                    let mut id = self.convert_attribute(&attribute)?;
  602|      0|                    if !is_nc_name(&id) {
  603|      0|                        return Err(SyntaxError::msg(format!(
  604|      0|                            "{} is not a valid rdf:ID value",
  605|      0|                            &id
  606|      0|                        ))
  607|      0|                        .into());
  608|      0|                    }
  609|      0|                    id.insert(0, '#');
  610|      0|                    id_attr = Some(id);
  611|  28.0k|                } else if *attribute_url == *RDF_BAG_ID {
  612|      0|                    let bag_id = self.convert_attribute(&attribute)?;
  613|      0|                    if !is_nc_name(&bag_id) {
  614|      0|                        return Err(SyntaxError::msg(format!(
  615|      0|                            "{} is not a valid rdf:bagID value",
  616|      0|                            &bag_id
  617|      0|                        ))
  618|      0|                        .into());
  619|      0|                    }
  620|  28.0k|                } else if *attribute_url == *RDF_NODE_ID {
  621|  14.2k|                    let id = self.convert_attribute(&attribute)?;
  622|  14.2k|                    if !is_nc_name(&id) {
  623|      0|                        return Err(SyntaxError::msg(format!(
  624|      0|                            "{} is not a valid rdf:nodeID value",
  625|      0|                            &id
  626|      0|                        ))
  627|      0|                        .into());
  628|  14.2k|                    }
  629|  14.2k|                    node_id_attr = Some(BlankNode::new_unchecked(id));
  630|  13.8k|                } else if *attribute_url == *RDF_ABOUT {
  631|      0|                    about_attr = Some(attribute);
  632|  13.8k|                } else if *attribute_url == *RDF_RESOURCE {
  633|  13.6k|                    resource_attr = Some(attribute);
  634|  13.6k|                } else if *attribute_url == *RDF_DATATYPE {
  635|      0|                    datatype_attr = Some(attribute);
  636|    213|                } else if *attribute_url == *RDF_PARSE_TYPE {
  637|      0|                    parse_type = match attribute.value.as_ref() {
  638|      0|                        b"Collection" => RdfXmlParseType::Collection,
  639|      0|                        b"Literal" => RdfXmlParseType::Literal,
  640|      0|                        b"Resource" => RdfXmlParseType::Resource,
  641|      0|                        _ => RdfXmlParseType::Other,
  642|       |                    };
  643|    213|                } else if attribute_url == rdf::TYPE.as_str() {
  644|      0|                    type_attr = Some(attribute);
  645|    213|                } else if RESERVED_RDF_ATTRIBUTES.contains(&&*attribute_url) {
  646|      0|                    return Err(SyntaxError::msg(format!(
  647|      0|                        "{} is not a valid attribute",
  648|      0|                        &attribute_url
  649|      0|                    ))
  650|      0|                    .into());
  651|       |                } else {
  652|    213|                    property_attrs.push((
  653|    213|                        self.parse_iri(attribute_url)?,
  654|      0|                        self.convert_attribute(&attribute)?,
  655|       |                    ));
  656|       |                }
  657|       |            }
  658|       |        }
  659|       |
  660|       |        // Parsing with the base URI
  661|  85.4k|        let id_attr = match id_attr {
  662|      0|            Some(iri) => {
  663|      0|                let iri = self.resolve_iri(&base_iri, iri)?;
  664|      0|                if self.known_rdf_id.contains(iri.as_str()) {
  665|      0|                    return Err(SyntaxError::msg(format!(
  666|      0|                        "{} has already been used as rdf:ID value",
  667|      0|                        &iri
  668|      0|                    ))
  669|      0|                    .into());
  670|      0|                }
  671|      0|                self.known_rdf_id.insert(iri.as_str().into());
  672|      0|                Some(iri)
  673|       |            }
  674|  85.4k|            None => None,
  675|       |        };
  676|  85.4k|        let about_attr = match about_attr {
  677|      0|            Some(attr) => Some(self.convert_iri_attribute(&base_iri, &attr)?),
  678|  85.4k|            None => None,
  679|       |        };
  680|  85.4k|        let resource_attr = match resource_attr {
  681|  13.6k|            Some(attr) => Some(self.convert_iri_attribute(&base_iri, &attr)?),
  682|  71.8k|            None => None,
  683|       |        };
  684|  85.4k|        let datatype_attr = match datatype_attr {
  685|      0|            Some(attr) => Some(self.convert_iri_attribute(&base_iri, &attr)?),
  686|  85.4k|            None => None,
  687|       |        };
  688|  85.4k|        let type_attr = match type_attr {
  689|      0|            Some(attr) => Some(self.convert_iri_attribute(&base_iri, &attr)?),
  690|  85.4k|            None => None,
  691|       |        };
  692|       |
  693|  85.4k|        let expected_production = match self.state.last() {
  694|  17.5k|            Some(RdfXmlState::Doc { .. }) => RdfXmlNextProduction::Rdf,
  695|       |            Some(
  696|       |                RdfXmlState::Rdf { .. }
  697|       |                | RdfXmlState::PropertyElt { .. }
  698|       |                | RdfXmlState::ParseTypeCollectionPropertyElt { .. },
  699|  28.7k|            ) => RdfXmlNextProduction::NodeElt,
  700|  38.6k|            Some(RdfXmlState::NodeElt { subject, .. }) => RdfXmlNextProduction::PropertyElt {
  701|  38.6k|                subject: subject.clone(),
  702|  38.6k|            },
  703|       |            Some(RdfXmlState::ParseTypeLiteralPropertyElt { .. }) => {
  704|      0|                return Err(
  705|      0|                    SyntaxError::msg("ParseTypeLiteralPropertyElt production children should never be considered as a RDF/XML content").into()
  706|      0|                );
  707|       |            }
  708|       |            None => {
  709|    576|                return Err(
  710|    576|                    SyntaxError::msg("No state in the stack: the XML is not balanced").into(),
  711|    576|                );
  712|       |            }
  713|       |        };
  714|       |
  715|  84.8k|        let new_state = match expected_production {
  716|       |            RdfXmlNextProduction::Rdf => {
  717|  17.5k|                if *tag_name == *RDF_RDF {
  718|  3.84k|                    RdfXmlState::Rdf { base_iri, language }
  719|  13.6k|                } else if RESERVED_RDF_ELEMENTS.contains(&&*tag_name) {
  720|  1.95k|                    return Err(SyntaxError::msg(format!(
  721|  1.95k|                        "Invalid node element tag name: {}",
  722|  1.95k|                        &tag_name
  723|  1.95k|                    ))
  724|  1.95k|                    .into());
  725|       |                } else {
  726|       |                    Self::build_node_elt(
  727|  11.7k|                        self.parse_iri(tag_name)?,
  728|  2.86k|                        base_iri,
  729|  2.86k|                        language,
  730|  2.86k|                        id_attr,
  731|  2.86k|                        node_id_attr,
  732|  2.86k|                        about_attr,
  733|  2.86k|                        type_attr,
  734|  2.86k|                        property_attrs,
  735|  2.86k|                        results,
  736|      0|                    )?
  737|       |                }
  738|       |            }
  739|       |            RdfXmlNextProduction::NodeElt => {
  740|  28.7k|                if RESERVED_RDF_ELEMENTS.contains(&&*tag_name) {
  741|  2.17k|                    return Err(SyntaxError::msg(format!(
  742|  2.17k|                        "Invalid property element tag name: {}",
  743|  2.17k|                        &tag_name
  744|  2.17k|                    ))
  745|  2.17k|                    .into());
  746|  26.5k|                }
  747|  26.5k|                Self::build_node_elt(
  748|  26.5k|                    self.parse_iri(tag_name)?,
  749|  24.8k|                    base_iri,
  750|  24.8k|                    language,
  751|  24.8k|                    id_attr,
  752|  24.8k|                    node_id_attr,
  753|  24.8k|                    about_attr,
  754|  24.8k|                    type_attr,
  755|  24.8k|                    property_attrs,
  756|  24.8k|                    results,
  757|      0|                )?
  758|       |            }
  759|  38.6k|            RdfXmlNextProduction::PropertyElt { subject } => {
  760|  38.6k|                let iri = if *tag_name == *RDF_LI {
  761|    233|                    let Some(RdfXmlState::NodeElt { li_counter, .. }) = self.state.last_mut()
  762|       |                    else {
  763|      0|                        return Err(SyntaxError::msg(format!(
  764|      0|                            "Invalid property element tag name: {}",
  765|      0|                            &tag_name
  766|      0|                        ))
  767|      0|                        .into());
  768|       |                    };
  769|    233|                    *li_counter += 1;
  770|    233|                    NamedNode::new_unchecked(format!(
  771|    233|                        "http://www.w3.org/1999/02/22-rdf-syntax-ns#_{li_counter}"
  772|    233|                    ))
  773|  38.4k|                } else if RESERVED_RDF_ELEMENTS.contains(&&*tag_name)
  774|  36.4k|                    || *tag_name == *RDF_DESCRIPTION
  775|       |                {
  776|  2.15k|                    return Err(SyntaxError::msg(format!(
  777|  2.15k|                        "Invalid property element tag name: {}",
  778|  2.15k|                        &tag_name
  779|  2.15k|                    ))
  780|  2.15k|                    .into());
  781|       |                } else {
  782|  36.2k|                    self.parse_iri(tag_name)?
  783|       |                };
  784|  34.2k|                match parse_type {
  785|       |                    RdfXmlParseType::Default => {
  786|  34.2k|                        if resource_attr.is_some()
  787|  20.6k|                            || node_id_attr.is_some()
  788|  20.4k|                            || !property_attrs.is_empty()
  789|       |                        {
  790|  13.7k|                            let object = match (resource_attr, node_id_attr)
  791|       |                    {
  792|  13.6k|                        (Some(resource_attr), None) => Subject::from(resource_attr),
  793|    187|                        (None, Some(node_id_attr)) => node_id_attr.into(),
  794|      0|                        (None, None) => BlankNode::default().into(),
  795|      0|                        (Some(_), Some(_)) => return Err(SyntaxError::msg("Not both rdf:resource and rdf:nodeID could be set at the same time").into())
  796|       |                    };
  797|  13.7k|                            Self::emit_property_attrs(&object, property_attrs, &language, results);
  798|  13.7k|                            if let Some(type_attr) = type_attr {
  799|      0|                                results.push(Triple::new(object.clone(), rdf::TYPE, type_attr));
  800|  13.7k|                            }
  801|  13.7k|                            RdfXmlState::PropertyElt {
  802|  13.7k|                                iri,
  803|  13.7k|                                base_iri,
  804|  13.7k|                                language,
  805|  13.7k|                                subject,
  806|  13.7k|                                object: Some(NodeOrText::Node(object)),
  807|  13.7k|                                id_attr,
  808|  13.7k|                                datatype_attr,
  809|  13.7k|                            }
  810|       |                        } else {
  811|  20.4k|                            RdfXmlState::PropertyElt {
  812|  20.4k|                                iri,
  813|  20.4k|                                base_iri,
  814|  20.4k|                                language,
  815|  20.4k|                                subject,
  816|  20.4k|                                object: None,
  817|  20.4k|                                id_attr,
  818|  20.4k|                                datatype_attr,
  819|  20.4k|                            }
  820|       |                        }
  821|       |                    }
  822|      0|                    RdfXmlParseType::Literal => RdfXmlState::ParseTypeLiteralPropertyElt {
  823|      0|                        iri,
  824|      0|                        base_iri,
  825|      0|                        language,
  826|      0|                        subject,
  827|      0|                        writer: Writer::new(Vec::default()),
  828|      0|                        id_attr,
  829|      0|                        emit: true,
  830|      0|                    },
  831|      0|                    RdfXmlParseType::Resource => Self::build_parse_type_resource_property_elt(
  832|      0|                        iri, base_iri, language, subject, id_attr, results,
  833|      0|                    ),
  834|      0|                    RdfXmlParseType::Collection => RdfXmlState::ParseTypeCollectionPropertyElt {
  835|      0|                        iri,
  836|      0|                        base_iri,
  837|      0|                        language,
  838|      0|                        subject,
  839|      0|                        objects: Vec::default(),
  840|      0|                        id_attr,
  841|      0|                    },
  842|      0|                    RdfXmlParseType::Other => RdfXmlState::ParseTypeLiteralPropertyElt {
  843|      0|                        iri,
  844|      0|                        base_iri,
  845|      0|                        language,
  846|      0|                        subject,
  847|      0|                        writer: Writer::new(Vec::default()),
  848|      0|                        id_attr,
  849|      0|                        emit: false,
  850|      0|                    },
  851|       |                }
  852|       |            }
  853|       |        };
  854|  65.7k|        self.state.push(new_state);
  855|  65.7k|        Ok(())
  856|   106k|    }
_RNvMs2_NtCs6NQ0qd6wXH9_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE19emit_property_attrsCseFzqD1pb09d_7rdf_xml:
 1137|  41.4k|    fn emit_property_attrs(
 1138|  41.4k|        subject: &Subject,
 1139|  41.4k|        literal_attributes: Vec<(NamedNode, String)>,
 1140|  41.4k|        language: &Option<String>,
 1141|  41.4k|        results: &mut Vec<Triple>,
 1142|  41.4k|    ) {
 1143|  41.4k|        for (literal_predicate, literal_value) in literal_attributes {
 1144|      0|            results.push(Triple::new(
 1145|      0|                subject.clone(),
 1146|      0|                literal_predicate,
 1147|      0|                if let Some(language) = language.clone() {
 1148|      0|                    Literal::new_language_tagged_literal_unchecked(literal_value, language)
 1149|       |                } else {
 1150|      0|                    Literal::new_simple_literal(literal_value)
 1151|       |                },
 1152|       |            ));
 1153|       |        }
 1154|  41.4k|    }
_RNvMs2_NtCs6NQ0qd6wXH9_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE21convert_iri_attributeCseFzqD1pb09d_7rdf_xml:
 1162|  13.6k|    fn convert_iri_attribute(
 1163|  13.6k|        &self,
 1164|  13.6k|        base_iri: &Option<Iri<String>>,
 1165|  13.6k|        attribute: &Attribute<'_>,
 1166|  13.6k|    ) -> Result<NamedNode, ParseError> {
 1167|  13.6k|        Ok(self.resolve_iri(base_iri, self.convert_attribute(attribute)?)?)
 1168|  13.6k|    }
_RNvMs2_NtCs6NQ0qd6wXH9_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE22resolve_attribute_nameCseFzqD1pb09d_7rdf_xml:
  910|  28.2k|    fn resolve_attribute_name(&self, qname: QName<'_>) -> Result<String, ParseError> {
  911|  28.2k|        let (namespace, local_name) = self.reader.resolve_attribute(qname);
  912|  28.2k|        self.resolve_ns_name(namespace, local_name)
  913|  28.2k|    }
_RNvMs2_NtCs6NQ0qd6wXH9_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE9end_stateCseFzqD1pb09d_7rdf_xml:
 1015|  50.6k|    fn end_state(
 1016|  50.6k|        &mut self,
 1017|  50.6k|        state: RdfXmlState,
 1018|  50.6k|        results: &mut Vec<Triple>,
 1019|  50.6k|    ) -> Result<(), SyntaxError> {
 1020|  50.6k|        match state {
 1021|       |            RdfXmlState::PropertyElt {
 1022|  27.1k|                iri,
 1023|  27.1k|                language,
 1024|  27.1k|                subject,
 1025|  27.1k|                id_attr,
 1026|  27.1k|                datatype_attr,
 1027|  27.1k|                object,
 1028|       |                ..
 1029|       |            } => {
 1030|  27.1k|                let object = match object {
 1031|  13.9k|                    Some(NodeOrText::Node(node)) => Term::from(node),
 1032|  1.20k|                    Some(NodeOrText::Text(text)) => {
 1033|  1.20k|                        Self::new_literal(text, language, datatype_attr).into()
 1034|       |                    }
 1035|  11.9k|                    None => Self::new_literal(String::new(), language, datatype_attr).into(),
 1036|       |                };
 1037|  27.1k|                let triple = Triple::new(subject, iri, object);
 1038|  27.1k|                if let Some(id_attr) = id_attr {
 1039|      0|                    Self::reify(triple.clone(), id_attr, results);
 1040|  27.1k|                }
 1041|  27.1k|                results.push(triple);
 1042|       |            }
 1043|       |            RdfXmlState::ParseTypeCollectionPropertyElt {
 1044|      0|                iri,
 1045|      0|                subject,
 1046|      0|                id_attr,
 1047|      0|                objects,
 1048|      0|                ..
 1049|      0|            } => {
 1050|      0|                let mut current_node = Subject::from(rdf::NIL);
 1051|      0|                for object in objects.into_iter().rev() {
 1052|      0|                    let subject = Subject::from(BlankNode::default());
 1053|      0|                    results.push(Triple::new(subject.clone(), rdf::FIRST, object));
 1054|      0|                    results.push(Triple::new(subject.clone(), rdf::REST, current_node));
 1055|      0|                    current_node = subject;
 1056|      0|                }
 1057|      0|                let triple = Triple::new(subject, iri, current_node);
 1058|      0|                if let Some(id_attr) = id_attr {
 1059|      0|                    Self::reify(triple.clone(), id_attr, results);
 1060|      0|                }
 1061|      0|                results.push(triple);
 1062|       |            }
 1063|       |            RdfXmlState::ParseTypeLiteralPropertyElt {
 1064|      0|                iri,
 1065|      0|                subject,
 1066|      0|                id_attr,
 1067|      0|                writer,
 1068|      0|                emit,
 1069|      0|                ..
 1070|      0|            } => {
 1071|      0|                if emit {
 1072|      0|                    let object = writer.into_inner();
 1073|      0|                    if object.is_empty() {
 1074|      0|                        return Err(SyntaxError::msg(format!(
 1075|      0|                            "No value found for rdf:XMLLiteral value of property {iri}"
 1076|      0|                        )));
 1077|      0|                    }
 1078|      0|                    let triple = Triple::new(
 1079|      0|                        subject,
 1080|      0|                        iri,
 1081|      0|                        Literal::new_typed_literal(
 1082|      0|                            str::from_utf8(&object).map_err(|_| {
 1083|       |                                SyntaxError::msg("The XML literal is not in valid UTF-8".to_owned())
 1084|      0|                            })?,
 1085|       |                            rdf::XML_LITERAL,
 1086|       |                        ),
 1087|       |                    );
 1088|      0|                    if let Some(id_attr) = id_attr {
 1089|      0|                        Self::reify(triple.clone(), id_attr, results);
 1090|      0|                    }
 1091|      0|                    results.push(triple);
 1092|      0|                }
 1093|       |            }
 1094|  19.5k|            RdfXmlState::NodeElt { subject, .. } => match self.state.last_mut() {
 1095|  4.07k|                Some(RdfXmlState::PropertyElt { object, .. }) => {
 1096|  4.07k|                    *object = Some(NodeOrText::Node(subject))
 1097|       |                }
 1098|      0|                Some(RdfXmlState::ParseTypeCollectionPropertyElt { objects, .. }) => {
 1099|      0|                    objects.push(subject)
 1100|       |                }
 1101|  15.4k|                _ => (),
 1102|       |            },
 1103|  3.95k|            _ => (),
 1104|       |        }
 1105|  50.6k|        Ok(())
 1106|  50.6k|    }
_RNvMs2_NtCs6NQ0qd6wXH9_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCs2OVHcoB0OuL_3std2io8buffered9bufreader9BufReaderRShEE9parse_iriCseFzqD1pb09d_7rdf_xml:
 1195|  88.3k|    fn parse_iri(&self, relative_iri: String) -> Result<NamedNode, SyntaxError> {
 1196|  88.3k|        Ok(NamedNode::new_unchecked(if self.unchecked {
 1197|      0|            relative_iri
 1198|       |        } else {
 1199|  88.3k|            Iri::parse(relative_iri.clone())
 1200|  88.3k|                .map_err(|error| SyntaxError {
 1201|       |                    inner: SyntaxErrorKind::InvalidIri {
 1202|       |                        iri: relative_iri,
 1203|       |                        error,
 1204|       |                    },
 1205|  88.3k|                })?
 1206|  75.3k|                .into_inner()
 1207|       |        }))
 1208|  88.3k|    }
_RNvXs_NtCs6NQ0qd6wXH9_8oxrdfxml6parserINtB4_20FromReadRdfXmlReaderRShENtNtNtNtCsaXZRpaJvnVB_4core4iter6traits8iterator8Iterator4nextCseFzqD1pb09d_7rdf_xml:
  219|   160k|    fn next(&mut self) -> Option<Self::Item> {
  220|       |        loop {
  221|   349k|            if let Some(triple) = self.results.pop() {
  222|  40.7k|                return Some(Ok(triple));
  223|   308k|            } else if self.reader.is_end {
  224|  7.29k|                return None;
  225|   301k|            }
  226|   301k|            if let Err(e) = self.parse_step() {
  227|   112k|                return Some(Err(e));
  228|   189k|            }
  229|       |        }
  230|   160k|    }
_RNvMNtCs6NQ0qd6wXH9_8oxrdfxml6parserNtB2_12RdfXmlParser3newCseFzqD1pb09d_7rdf_xml:
   63|  7.29k|    pub fn new() -> Self {
   64|  7.29k|        Self::default()
   65|  7.29k|    }
_RNvXs3_NtCs6NQ0qd6wXH9_8oxrdfxml6parserNtB5_12RdfXmlParserNtNtCsaXZRpaJvnVB_4core7default7Default7defaultCseFzqD1pb09d_7rdf_xml:
   53|  7.29k|#[derive(Default)]
_RNvMs1_NtCs6NQ0qd6wXH9_8oxrdfxml6parserNtB5_11RdfXmlState8base_iri:
  405|  86.7k|    fn base_iri(&self) -> Option<&Iri<String>> {
  406|  86.7k|        match self {
  407|  19.0k|            Self::Doc { base_iri, .. }
  408|  14.2k|            | Self::Rdf { base_iri, .. }
  409|  38.9k|            | Self::NodeElt { base_iri, .. }
  410|  14.5k|            | Self::PropertyElt { base_iri, .. }
  411|      0|            | Self::ParseTypeCollectionPropertyElt { base_iri, .. }
  412|  86.7k|            | Self::ParseTypeLiteralPropertyElt { base_iri, .. } => base_iri.as_ref(),
  413|  86.7k|        }
  414|  86.7k|    }
_RNvMs1_NtCs6NQ0qd6wXH9_8oxrdfxml6parserNtB5_11RdfXmlState8language:
  416|  86.7k|    fn language(&self) -> Option<&String> {
  417|  86.7k|        match self {
  418|  19.0k|            Self::Doc { .. } => None,
  419|  14.2k|            Self::Rdf { language, .. }
  420|  38.9k|            | Self::NodeElt { language, .. }
  421|  14.5k|            | Self::PropertyElt { language, .. }
  422|      0|            | Self::ParseTypeCollectionPropertyElt { language, .. }
  423|  67.7k|            | Self::ParseTypeLiteralPropertyElt { language, .. } => language.as_ref(),
  424|       |        }
  425|  86.7k|    }
_RNvNtCs6NQ0qd6wXH9_8oxrdfxml6parser10is_nc_name:
 1215|  14.2k|fn is_nc_name(name: &str) -> bool {
 1216|  14.2k|    // Name - (Char* ':' Char*)
 1217|  14.2k|    is_name(name) && name.chars().all(|c| c != ':')
 1218|  14.2k|}
_RNvNtCs6NQ0qd6wXH9_8oxrdfxml6parser7is_name:
 1220|  14.2k|fn is_name(name: &str) -> bool {
 1221|  14.2k|    // NameStartChar (NameChar)*
 1222|  14.2k|    let mut c = name.chars();
 1223|  14.2k|    if !c.next().map_or(false, is_name_start_char) {
 1224|      0|        return false;
 1225|  14.2k|    }
 1226|  14.2k|    c.all(is_name_char)
 1227|  14.2k|}
_RNvNtCs6NQ0qd6wXH9_8oxrdfxml6parser13is_whitespace:
 1229|   141k|fn is_whitespace(c: u8) -> bool {
 1230|   141k|    matches!(c, b' ' | b'\t' | b'\n' | b'\r')
 1231|   141k|}
_RNvNtCs6NQ0qd6wXH9_8oxrdfxml6parser7is_utf8:
 1233|  5.80k|fn is_utf8(encoding: &[u8]) -> bool {
 1234|  3.71k|    matches!(
 1235|  5.80k|        encoding.to_ascii_lowercase().as_slice(),
 1236|  5.80k|        b"unicode-1-1-utf-8"
 1237|  5.53k|            | b"unicode11utf8"
 1238|       |            | b"unicode20utf8"
 1239|  5.26k|            | b"utf-8"
 1240|  1.24k|            | b"utf8"
 1241|    853|            | b"x-unicode20utf8"
 1242|       |    )
 1243|  5.80k|}
_RNCNvNtCs6NQ0qd6wXH9_8oxrdfxml6parser10is_nc_name0B5_:
 1217|   454k|    is_name(name) && name.chars().all(|c| c != ':')

_RNvMNtCs6NQ0qd6wXH9_8oxrdfxml10serializerNtB2_16RdfXmlSerializer3newCseFzqD1pb09d_7rdf_xml:
   37|  3.64k|    pub fn new() -> Self {
   38|  3.64k|        Self
   39|  3.64k|    }
_RINvMNtCs6NQ0qd6wXH9_8oxrdfxml10serializerNtB3_16RdfXmlSerializer18serialize_to_writeINtNtCsjp9TdQkU1Un_5alloc3vec3VechEECseFzqD1pb09d_7rdf_xml:
   62|  3.64k|    pub fn serialize_to_write<W: Write>(self, write: W) -> ToWriteRdfXmlWriter<W> {
   63|  3.64k|        ToWriteRdfXmlWriter {
   64|  3.64k|            writer: Writer::new_with_indent(write, b'\t', 1),
   65|  3.64k|            inner: InnerRdfXmlWriter {
   66|  3.64k|                current_subject: None,
   67|  3.64k|            },
   68|  3.64k|        }
   69|  3.64k|    }
_RINvMs0_NtCs6NQ0qd6wXH9_8oxrdfxml10serializerNtB6_17InnerRdfXmlWriter12write_tripleRNtNtCsal5YaZOfl0H_5oxrdf6triple6TripleECseFzqD1pb09d_7rdf_xml:
  221|  20.3k|    fn write_triple<'a>(
  222|  20.3k|        &mut self,
  223|  20.3k|        t: impl Into<TripleRef<'a>>,
  224|  20.3k|        output: &mut Vec<Event<'a>>,
  225|  20.3k|    ) -> io::Result<()> {
  226|  20.3k|        if self.current_subject.is_none() {
  227|  1.45k|            Self::write_start(output);
  228|  18.9k|        }
  229|       |
  230|  20.3k|        let triple = t.into();
  231|  20.3k|        // We open a new rdf:Description if useful
  232|  20.3k|        if self.current_subject.as_ref().map(Subject::as_ref) != Some(triple.subject) {
  233|  14.0k|            if self.current_subject.is_some() {
  234|  12.5k|                output.push(Event::End(BytesEnd::new("rdf:Description")));
  235|  12.5k|            }
  236|       |
  237|  14.0k|            let mut description_open = BytesStart::new("rdf:Description");
  238|  14.0k|            match triple.subject {
  239|      0|                SubjectRef::NamedNode(node) => {
  240|      0|                    description_open.push_attribute(("rdf:about", node.as_str()))
  241|       |                }
  242|  14.0k|                SubjectRef::BlankNode(node) => {
  243|  14.0k|                    description_open.push_attribute(("rdf:nodeID", node.as_str()))
  244|       |                }
  245|       |                _ => {
  246|      0|                    return Err(io::Error::new(
  247|      0|                        io::ErrorKind::InvalidInput,
  248|      0|                        "RDF/XML only supports named or blank subject",
  249|      0|                    ))
  250|       |                }
  251|       |            }
  252|  14.0k|            output.push(Event::Start(description_open));
  253|  6.35k|        }
  254|  20.3k|        self.current_subject = Some(triple.subject.into_owned());
  255|  20.3k|
  256|  20.3k|        let (prop_prefix, prop_value) = split_iri(triple.predicate.as_str());
  257|  20.3k|        let (prop_qname, prop_xmlns) =
  258|  20.3k|            if prop_prefix == "http://www.w3.org/1999/02/22-rdf-syntax-ns#" {
  259|  13.8k|                (Cow::Owned(format!("rdf:{prop_value}")), None)
  260|  6.55k|            } else if prop_prefix == "http://www.w3.org/2000/xmlns/" {
  261|    160|                (Cow::Owned(format!("xmlns:{prop_value}")), None)
  262|  6.39k|            } else if prop_value.is_empty() {
  263|  1.58k|                (Cow::Borrowed("p:"), Some(("xmlns:p", prop_prefix)))
  264|       |            } else {
  265|  4.81k|                (Cow::Borrowed(prop_value), Some(("xmlns", prop_prefix)))
  266|       |            };
  267|  20.3k|        let mut property_open = BytesStart::new(prop_qname.clone());
  268|  20.3k|        if let Some(prop_xmlns) = prop_xmlns {
  269|  6.39k|            property_open.push_attribute(prop_xmlns);
  270|  13.9k|        }
  271|  20.3k|        let content = match triple.object {
  272|  13.6k|            TermRef::NamedNode(node) => {
  273|  13.6k|                property_open.push_attribute(("rdf:resource", node.as_str()));
  274|  13.6k|                None
  275|       |            }
  276|    187|            TermRef::BlankNode(node) => {
  277|    187|                property_open.push_attribute(("rdf:nodeID", node.as_str()));
  278|    187|                None
  279|       |            }
  280|  6.59k|            TermRef::Literal(literal) => {
  281|  6.59k|                if let Some(language) = literal.language() {
  282|      0|                    property_open.push_attribute(("xml:lang", language));
  283|  6.59k|                } else if !literal.is_plain() {
  284|      0|                    property_open.push_attribute(("rdf:datatype", literal.datatype().as_str()));
  285|  6.59k|                }
  286|  6.59k|                Some(literal.value())
  287|       |            }
  288|       |            _ => {
  289|      0|                return Err(io::Error::new(
  290|      0|                    io::ErrorKind::InvalidInput,
  291|      0|                    "RDF/XML only supports named, blank or literal object",
  292|      0|                ))
  293|       |            }
  294|       |        };
  295|  20.3k|        if let Some(content) = content {
  296|  6.59k|            output.push(Event::Start(property_open));
  297|  6.59k|            output.push(Event::Text(BytesText::new(content)));
  298|  6.59k|            output.push(Event::End(BytesEnd::new(prop_qname)));
  299|  13.7k|        } else {
  300|  13.7k|            output.push(Event::Empty(property_open));
  301|  13.7k|        }
  302|  20.3k|        Ok(())
  303|  20.3k|    }
_RINvMs_NtCs6NQ0qd6wXH9_8oxrdfxml10serializerINtB5_19ToWriteRdfXmlWriterINtNtCsjp9TdQkU1Un_5alloc3vec3VechEE12write_tripleRNtNtCsal5YaZOfl0H_5oxrdf6triple6TripleECseFzqD1pb09d_7rdf_xml:
  136|  20.3k|    pub fn write_triple<'a>(&mut self, t: impl Into<TripleRef<'a>>) -> io::Result<()> {
  137|  20.3k|        let mut buffer = Vec::new();
  138|  20.3k|        self.inner.write_triple(t, &mut buffer)?;
  139|  20.3k|        self.flush_buffer(&mut buffer)
  140|  20.3k|    }
_RNvMs_NtCs6NQ0qd6wXH9_8oxrdfxml10serializerINtB4_19ToWriteRdfXmlWriterINtNtCsjp9TdQkU1Un_5alloc3vec3VechEE12flush_bufferCseFzqD1pb09d_7rdf_xml:
  150|  24.0k|    fn flush_buffer(&mut self, buffer: &mut Vec<Event<'_>>) -> io::Result<()> {
  151|  72.5k|        for event in buffer.drain(0..) {
  152|  72.5k|            self.writer.write_event(event).map_err(map_err)?;
  153|       |        }
  154|  24.0k|        Ok(())
  155|  24.0k|    }
_RNvMs_NtCs6NQ0qd6wXH9_8oxrdfxml10serializerINtB4_19ToWriteRdfXmlWriterINtNtCsjp9TdQkU1Un_5alloc3vec3VechEE6finishCseFzqD1pb09d_7rdf_xml:
  143|  3.64k|    pub fn finish(mut self) -> io::Result<W> {
  144|  3.64k|        let mut buffer = Vec::new();
  145|  3.64k|        self.inner.finish(&mut buffer);
  146|  3.64k|        self.flush_buffer(&mut buffer)?;
  147|  3.64k|        Ok(self.writer.into_inner())
  148|  3.64k|    }
_RNvMs0_NtCs6NQ0qd6wXH9_8oxrdfxml10serializerNtB5_17InnerRdfXmlWriter11write_start:
  305|  3.64k|    fn write_start(output: &mut Vec<Event<'_>>) {
  306|  3.64k|        output.push(Event::Decl(BytesDecl::new("1.0", Some("UTF-8"), None)));
  307|  3.64k|        let mut rdf_open = BytesStart::new("rdf:RDF");
  308|  3.64k|        rdf_open.push_attribute(("xmlns:rdf", "http://www.w3.org/1999/02/22-rdf-syntax-ns#"));
  309|  3.64k|        output.push(Event::Start(rdf_open))
  310|  3.64k|    }
_RNvMs0_NtCs6NQ0qd6wXH9_8oxrdfxml10serializerNtB5_17InnerRdfXmlWriter6finish:
  312|  3.64k|    fn finish(&self, output: &mut Vec<Event<'static>>) {
  313|  3.64k|        if self.current_subject.is_some() {
  314|  1.45k|            output.push(Event::End(BytesEnd::new("rdf:Description")));
  315|  2.19k|        } else {
  316|  2.19k|            Self::write_start(output);
  317|  2.19k|        }
  318|  3.64k|        output.push(Event::End(BytesEnd::new("rdf:RDF")));
  319|  3.64k|    }
_RNvNtCs6NQ0qd6wXH9_8oxrdfxml10serializer9split_iri:
  333|  20.3k|fn split_iri(iri: &str) -> (&str, &str) {
  334|  20.3k|    if let Some(position_base) = iri.rfind(|c| !is_name_char(c) || c == ':') {
  335|  20.3k|        if let Some(position_add) = iri[position_base..].find(|c| is_name_start_char(c) && c != ':')
  336|       |        {
  337|  18.6k|            (
  338|  18.6k|                &iri[..position_base + position_add],
  339|  18.6k|                &iri[position_base + position_add..],
  340|  18.6k|            )
  341|       |        } else {
  342|  1.73k|            (iri, "")
  343|       |        }
  344|       |    } else {
  345|      0|        (iri, "")
  346|       |    }
  347|  20.3k|}
_RNCNvNtCs6NQ0qd6wXH9_8oxrdfxml10serializer9split_iri0B5_:
  334|   332k|    if let Some(position_base) = iri.rfind(|c| !is_name_char(c) || c == ':') {
_RNCNvNtCs6NQ0qd6wXH9_8oxrdfxml10serializer9split_iris_0B5_:
  335|  40.3k|        if let Some(position_add) = iri[position_base..].find(|c| is_name_start_char(c) && c != ':')

_RNvNtCs6NQ0qd6wXH9_8oxrdfxml5utils18is_name_start_char:
    1|   827k|pub fn is_name_start_char(c: char) -> bool {
    2|       |    // ":" | [A-Z] | "_" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
    3|   827k|    matches!(c,
    4|       |        ':'
    5|   505k|        | 'A'..='Z'
    6|       |        | '_'
    7|   387k|        | 'a'..='z'
    8|  3.13k|        | '\u{C0}'..='\u{D6}'
    9|  3.13k|        | '\u{D8}'..='\u{F6}'
   10|  3.13k|        | '\u{F8}'..='\u{2FF}'
   11|  3.13k|        | '\u{370}'..='\u{37D}'
   12|  2.51k|        | '\u{37F}'..='\u{1FFF}'
   13|  2.51k|        | '\u{200C}'..='\u{200D}'
   14|  2.51k|        | '\u{2070}'..='\u{218F}'
   15|  2.51k|        | '\u{2C00}'..='\u{2FEF}'
   16|  2.51k|        | '\u{3001}'..='\u{D7FF}'
   17|  2.51k|        | '\u{F900}'..='\u{FDCF}'
   18|  2.51k|        | '\u{FDF0}'..='\u{FFFD}'
   19|    571|        | '\u{10000}'..='\u{EFFFF}')
   20|   827k|}
_RNvNtCs6NQ0qd6wXH9_8oxrdfxml5utils12is_name_char:
   22|   772k|pub fn is_name_char(c: char) -> bool {
   23|   772k|    // NameStartChar | "-" | "." | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
   24|   772k|    is_name_start_char(c)
   25|   298k|        || matches!(c,  '-' | '.' | '0'..='9' | '\u{B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
   26|   772k|}


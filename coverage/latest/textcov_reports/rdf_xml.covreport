_RNvCs6YMK5QRMMgT_9getrandom16getrandom_uninitCs3pbe4n6p45A_9rand_core:
  344|      7|pub fn getrandom_uninit(dest: &mut [MaybeUninit<u8>]) -> Result<&mut [u8], Error> {
  345|      7|    if !dest.is_empty() {
  346|      7|        imp::getrandom_inner(dest)?;
  347|      0|    }
  348|       |    // SAFETY: `dest` has been fully initialized by `imp::getrandom_inner`
  349|       |    // since it returned `Ok`.
  350|      7|    Ok(unsafe { slice_assume_init_mut(dest) })
  351|      7|}
_RNvCs6YMK5QRMMgT_9getrandom9getrandomCs3pbe4n6p45A_9rand_core:
  314|      7|pub fn getrandom(dest: &mut [u8]) -> Result<(), Error> {
  315|      7|    // SAFETY: The `&mut MaybeUninit<_>` reference doesn't escape, and
  316|      7|    // `getrandom_uninit` guarantees it will never de-initialize any part of
  317|      7|    // `dest`.
  318|      7|    getrandom_uninit(unsafe { slice_as_uninit_mut(dest) })?;
  319|      7|    Ok(())
  320|      7|}

_RNvNtCs6YMK5QRMMgT_9getrandom3imp15getrandom_inner:
   17|      7|pub fn getrandom_inner(dest: &mut [MaybeUninit<u8>]) -> Result<(), Error> {
   18|      7|    // getrandom(2) was introduced in Linux 3.17
   19|      7|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   20|      7|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   21|      7|        sys_fill_exact(dest, |buf| unsafe {
   22|       |            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   23|      7|        })
   24|       |    } else {
   25|      0|        use_file::getrandom_inner(dest)
   26|       |    }
   27|      7|}
_RNCNvNtCs6YMK5QRMMgT_9getrandom3imp15getrandom_inner0B5_:
   21|      7|        sys_fill_exact(dest, |buf| unsafe {
   22|      7|            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   23|      7|        })
_RNvNtCs6YMK5QRMMgT_9getrandom3imp22is_getrandom_available:
   29|      1|fn is_getrandom_available() -> bool {
   30|      1|    let res = unsafe { getrandom(core::ptr::null_mut(), 0, libc::GRND_NONBLOCK) };
   31|      1|    if res < 0 {
   32|      0|        match last_os_error().raw_os_error() {
   33|      0|            Some(libc::ENOSYS) => false, // No kernel support
   34|      0|            Some(libc::EPERM) => false,  // Blocked by seccomp
   35|      0|            _ => true,
   36|       |        }
   37|       |    } else {
   38|      1|        true
   39|       |    }
   40|      1|}
_RNvNtCs6YMK5QRMMgT_9getrandom3imp9getrandom:
   42|      8|unsafe fn getrandom(
   43|      8|    buf: *mut libc::c_void,
   44|      8|    buflen: libc::size_t,
   45|      8|    flags: libc::c_uint,
   46|      8|) -> libc::ssize_t {
   47|      8|    libc::syscall(libc::SYS_getrandom, buf, buflen, flags) as libc::ssize_t
   48|      8|}

_RINvNtCs6YMK5QRMMgT_9getrandom4util19slice_as_uninit_muthECs3pbe4n6p45A_9rand_core:
   98|      7|pub unsafe fn slice_as_uninit_mut<T>(slice: &mut [T]) -> &mut [MaybeUninit<T>] {
   99|      7|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
  100|      7|    &mut *(slice as *mut [T] as *mut [MaybeUninit<T>])
  101|      7|}
_RINvNtCs6YMK5QRMMgT_9getrandom4util21slice_assume_init_muthECs3pbe4n6p45A_9rand_core:
   74|      7|pub unsafe fn slice_assume_init_mut<T>(slice: &mut [MaybeUninit<T>]) -> &mut [T] {
   75|      7|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   76|      7|    &mut *(slice as *mut [MaybeUninit<T>] as *mut [T])
   77|      7|}
_RINvMNtCs6YMK5QRMMgT_9getrandom4utilNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   46|      7|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   47|      7|        // Relaxed ordering is fine, as we only have a single atomic variable.
   48|      7|        let mut val = self.0.load(Relaxed);
   49|      7|        if val == Self::UNINIT {
   50|      1|            val = init();
   51|      1|            self.0.store(val, Relaxed);
   52|      6|        }
   53|      7|        val
   54|      7|    }
_RINvMs_NtCs6YMK5QRMMgT_9getrandom4utilNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   65|      7|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   66|      7|        self.0.unsync_init(|| init() as usize) != 0
   67|      7|    }
_RNCINvMs_NtCs6YMK5QRMMgT_9getrandom4utilNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   66|      1|        self.0.unsync_init(|| init() as usize) != 0

_RINvNtCs6YMK5QRMMgT_9getrandom9util_libc14sys_fill_exactNCNvNtB4_3imp15getrandom_inner0EB4_:
   67|      7|pub fn sys_fill_exact(
   68|      7|    mut buf: &mut [MaybeUninit<u8>],
   69|      7|    sys_fill: impl Fn(&mut [MaybeUninit<u8>]) -> libc::ssize_t,
   70|      7|) -> Result<(), Error> {
   71|     14|    while !buf.is_empty() {
   72|      7|        let res = sys_fill(buf);
   73|      7|        if res < 0 {
   74|      0|            let err = last_os_error();
   75|      0|            // We should try again if the call was interrupted.
   76|      0|            if err.raw_os_error() != Some(libc::EINTR) {
   77|      0|                return Err(err);
   78|      0|            }
   79|      7|        } else {
   80|      7|            // We don't check for EOF (ret = 0) as the data we are reading
   81|      7|            // should be an infinite stream of random bytes.
   82|      7|            let len = min(res as usize, buf.len());
   83|      7|            buf = &mut buf[len..];
   84|      7|        }
   85|       |    }
   86|      7|    Ok(())
   87|      7|}

rust_fuzzer_test_input:
  209|  3.44k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  3.44k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  3.44k|                }
  223|  3.44k|
  224|  3.44k|                __libfuzzer_sys_run(bytes);
  225|  3.44k|                0
  226|  3.44k|            }
_RNvNvCshwa6i4jbVTh_7rdf_xml1__19___libfuzzer_sys_run:
  241|  3.44k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|  3.44k|            }
LLVMFuzzerTestOneInput:
   58|  3.44k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  3.44k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  3.44k|    });
   63|  3.44k|
   64|  3.44k|    match test_input {
   65|  3.44k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  3.44k|}
_RNCNvCseDlmzo0ROG6_13libfuzzer_sys15test_input_wrap0B3_:
   59|  3.44k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  3.44k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  3.44k|        rust_fuzzer_test_input(data_slice)
   62|  3.44k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvMs3_NtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCsiOGkCewTsZJ_4core4iter6traits8iterator8Iterator4next0ECshwa6i4jbVTh_7rdf_xml:
 1044|   297k|    pub(crate) unsafe fn next(
 1045|   297k|        &mut self,
 1046|   297k|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|   297k|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|   297k|        let found = find_raw(self.start, self.end)?;
 1057|   124k|        let result = found.distance(self.original_start);
 1058|   124k|        self.start = found.add(1);
 1059|   124k|        Some(result)
 1060|   297k|    }
_RINvMs3_NtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs7_NtBc_6memchrNtB1e_7Memchr3NtNtNtNtCsiOGkCewTsZJ_4core4iter6traits8iterator8Iterator4next0ECshwa6i4jbVTh_7rdf_xml:
 1044|   165k|    pub(crate) unsafe fn next(
 1045|   165k|        &mut self,
 1046|   165k|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|   165k|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|   165k|        let found = find_raw(self.start, self.end)?;
 1057|   164k|        let result = found.distance(self.original_start);
 1058|   164k|        self.start = found.add(1);
 1059|   164k|        Some(result)
 1060|   165k|    }
_RINvMs3_NtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs_NtBc_6memchrNtB1d_6MemchrNtNtNtNtCsiOGkCewTsZJ_4core4iter6traits8iterator8Iterator4next0ECshwa6i4jbVTh_7rdf_xml:
 1044|  2.04k|    pub(crate) unsafe fn next(
 1045|  2.04k|        &mut self,
 1046|  2.04k|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  2.04k|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  2.04k|        let found = find_raw(self.start, self.end)?;
 1057|  1.98k|        let result = found.distance(self.original_start);
 1058|  1.98k|        self.start = found.add(1);
 1059|  1.98k|        Some(result)
 1060|  2.04k|    }
_RINvNtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECshwa6i4jbVTh_7rdf_xml:
 1125|   133k|pub(crate) unsafe fn search_slice_with_raw(
 1126|   133k|    haystack: &[u8],
 1127|   133k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|   133k|) -> Option<usize> {
 1129|   133k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|   133k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|   133k|    // a &[u8].
 1132|   133k|    let start = haystack.as_ptr();
 1133|   133k|    let end = start.add(haystack.len());
 1134|   133k|    let found = find_raw(start, end)?;
 1135|   131k|    Some(found.distance(start))
 1136|   133k|}
_RNvMs3_NtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|   274k|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|   274k|        Iter {
 1029|   274k|            original_start: haystack.as_ptr(),
 1030|   274k|            start: haystack.as_ptr(),
 1031|   274k|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|   274k|            haystack: core::marker::PhantomData,
 1033|   274k|        }
 1034|   274k|    }
_RINvMs3_NtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCsiOGkCewTsZJ_4core4iter6traits8iterator8Iterator4next0ECs57NZtjOlRkW_9quick_xml:
 1044|   193k|    pub(crate) unsafe fn next(
 1045|   193k|        &mut self,
 1046|   193k|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|   193k|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|   193k|        let found = find_raw(self.start, self.end)?;
 1057|   192k|        let result = found.distance(self.original_start);
 1058|   192k|        self.start = found.add(1);
 1059|   192k|        Some(result)
 1060|   193k|    }
_RINvNtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECs57NZtjOlRkW_9quick_xml:
 1125|   110k|pub(crate) unsafe fn search_slice_with_raw(
 1126|   110k|    haystack: &[u8],
 1127|   110k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|   110k|) -> Option<usize> {
 1129|   110k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|   110k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|   110k|    // a &[u8].
 1132|   110k|    let start = haystack.as_ptr();
 1133|   110k|    let end = start.add(haystack.len());
 1134|   110k|    let found = find_raw(start, end)?;
 1135|  63.5k|    Some(found.distance(start))
 1136|   110k|}
_RNvMNtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m128iE7needle1B8_:
  117|   346k|    pub(crate) fn needle1(&self) -> u8 {
  118|   346k|        self.s1
  119|   346k|    }
_RNvMNtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m128iE3newB8_:
  111|   246k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|   246k|        One { s1: needle, v1: V::splat(needle) }
  113|   246k|    }
_RNvMNtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m256iE3newB8_:
  111|   246k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|   246k|        One { s1: needle, v1: V::splat(needle) }
  113|   246k|    }
_RNvMNtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  9.65k|    pub(crate) unsafe fn find_raw(
  144|  9.65k|        &self,
  145|  9.65k|        start: *const u8,
  146|  9.65k|        end: *const u8,
  147|  9.65k|    ) -> Option<*const u8> {
  148|  9.65k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  9.65k|        // need to move up to using a u64 for the masks used below. Currently
  150|  9.65k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  9.65k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  9.65k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  9.65k|        let topos = V::Mask::first_offset;
  155|  9.65k|        let len = end.distance(start);
  156|  9.65k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  9.65k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  6.41k|            return Some(cur);
  167|  3.23k|        }
  168|  3.23k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  3.23k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  3.23k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  3.23k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  3.23k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  3.44k|        while cur <= end.sub(V::BYTES) {
  213|  1.32k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  1.32k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|  1.11k|                return Some(cur);
  216|    208|            }
  217|    208|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  2.12k|        if cur < end {
  224|  1.96k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  1.96k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  1.96k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  1.96k|            return self.search_chunk(cur, topos);
  228|    162|        }
  229|    162|        None
  230|  9.65k|    }
_RNvMNtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m256iE8find_rawB8_:
  143|   124k|    pub(crate) unsafe fn find_raw(
  144|   124k|        &self,
  145|   124k|        start: *const u8,
  146|   124k|        end: *const u8,
  147|   124k|    ) -> Option<*const u8> {
  148|   124k|        // If we want to support vectors bigger than 256 bits, we probably
  149|   124k|        // need to move up to using a u64 for the masks used below. Currently
  150|   124k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|   124k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|   124k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|   124k|        let topos = V::Mask::first_offset;
  155|   124k|        let len = end.distance(start);
  156|   124k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|   124k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|   107k|            return Some(cur);
  167|  17.3k|        }
  168|  17.3k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  17.3k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  17.3k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  17.3k|        if len >= Self::LOOP_SIZE {
  172|  14.4k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|  13.9k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|  13.9k|                let a = V::load_aligned(cur);
  176|  13.9k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|  13.9k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|  13.9k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|  13.9k|                let eqa = self.v1.cmpeq(a);
  180|  13.9k|                let eqb = self.v1.cmpeq(b);
  181|  13.9k|                let eqc = self.v1.cmpeq(c);
  182|  13.9k|                let eqd = self.v1.cmpeq(d);
  183|  13.9k|                let or1 = eqa.or(eqb);
  184|  13.9k|                let or2 = eqc.or(eqd);
  185|  13.9k|                let or3 = or1.or(or2);
  186|  13.9k|                if or3.movemask_will_have_non_zero() {
  187|  12.9k|                    let mask = eqa.movemask();
  188|  12.9k|                    if mask.has_non_zero() {
  189|  7.18k|                        return Some(cur.add(topos(mask)));
  190|  5.80k|                    }
  191|  5.80k|
  192|  5.80k|                    let mask = eqb.movemask();
  193|  5.80k|                    if mask.has_non_zero() {
  194|  4.22k|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|  1.58k|                    }
  196|  1.58k|
  197|  1.58k|                    let mask = eqc.movemask();
  198|  1.58k|                    if mask.has_non_zero() {
  199|  1.17k|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|    410|                    }
  201|    410|
  202|    410|                    let mask = eqd.movemask();
  203|    410|                    debug_assert!(mask.has_non_zero());
  204|    410|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|    958|                }
  206|    958|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  3.85k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  5.92k|        while cur <= end.sub(V::BYTES) {
  213|  4.36k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  4.36k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|  2.77k|                return Some(cur);
  216|  1.59k|            }
  217|  1.59k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  1.55k|        if cur < end {
  224|  1.45k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  1.45k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  1.45k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  1.45k|            return self.search_chunk(cur, topos);
  228|    105|        }
  229|    105|        None
  230|   124k|    }
_RINvMNtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  12.9k|    unsafe fn search_chunk(
  417|  12.9k|        &self,
  418|  12.9k|        cur: *const u8,
  419|  12.9k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  12.9k|    ) -> Option<*const u8> {
  421|  12.9k|        let chunk = V::load_unaligned(cur);
  422|  12.9k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  12.9k|        if mask.has_non_zero() {
  424|  8.13k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  4.79k|            None
  427|       |        }
  428|  12.9k|    }
_RINvMNtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|   130k|    unsafe fn search_chunk(
  417|   130k|        &self,
  418|   130k|        cur: *const u8,
  419|   130k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|   130k|    ) -> Option<*const u8> {
  421|   130k|        let chunk = V::load_unaligned(cur);
  422|   130k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|   130k|        if mask.has_non_zero() {
  424|   110k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  20.1k|            None
  427|       |        }
  428|   130k|    }
_RNvMs_NtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m128iE3newBa_:
  450|   491k|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|   491k|        Two {
  452|   491k|            s1: needle1,
  453|   491k|            s2: needle2,
  454|   491k|            v1: V::splat(needle1),
  455|   491k|            v2: V::splat(needle2),
  456|   491k|        }
  457|   491k|    }
_RNvMs_NtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m256iE3newBa_:
  450|   491k|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|   491k|        Two {
  452|   491k|            s1: needle1,
  453|   491k|            s2: needle2,
  454|   491k|            v1: V::splat(needle1),
  455|   491k|            v2: V::splat(needle2),
  456|   491k|        }
  457|   491k|    }
_RNvMs_NtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m128iE7needle1Ba_:
  461|   329k|    pub(crate) fn needle1(&self) -> u8 {
  462|   329k|        self.s1
  463|   329k|    }
_RNvMs_NtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m128iE7needle2Ba_:
  467|   313k|    pub(crate) fn needle2(&self) -> u8 {
  468|   313k|        self.s2
  469|   313k|    }
_RNvMs_NtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m128iE8find_rawBa_:
  493|  40.3k|    pub(crate) unsafe fn find_raw(
  494|  40.3k|        &self,
  495|  40.3k|        start: *const u8,
  496|  40.3k|        end: *const u8,
  497|  40.3k|    ) -> Option<*const u8> {
  498|  40.3k|        // If we want to support vectors bigger than 256 bits, we probably
  499|  40.3k|        // need to move up to using a u64 for the masks used below. Currently
  500|  40.3k|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|  40.3k|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|  40.3k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  40.3k|        let topos = V::Mask::first_offset;
  505|  40.3k|        let len = end.distance(start);
  506|  40.3k|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  40.3k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  22.9k|            return Some(cur);
  517|  17.3k|        }
  518|  17.3k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  17.3k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|  17.3k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  17.3k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|  17.3k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  21.6k|        while cur <= end.sub(V::BYTES) {
  551|  4.82k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  4.82k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|    517|                return Some(cur);
  554|  4.30k|            }
  555|  4.30k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|  16.8k|        if cur < end {
  562|  16.5k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|  16.5k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|  16.5k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|  16.5k|            return self.search_chunk(cur, topos);
  566|    345|        }
  567|    345|        None
  568|  40.3k|    }
_RNvMs_NtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m256iE8find_rawBa_:
  493|   343k|    pub(crate) unsafe fn find_raw(
  494|   343k|        &self,
  495|   343k|        start: *const u8,
  496|   343k|        end: *const u8,
  497|   343k|    ) -> Option<*const u8> {
  498|   343k|        // If we want to support vectors bigger than 256 bits, we probably
  499|   343k|        // need to move up to using a u64 for the masks used below. Currently
  500|   343k|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|   343k|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|   343k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   343k|        let topos = V::Mask::first_offset;
  505|   343k|        let len = end.distance(start);
  506|   343k|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   343k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   237k|            return Some(cur);
  517|   105k|        }
  518|   105k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   105k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|   105k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   105k|        if len >= Self::LOOP_SIZE {
  522|  44.5k|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|  32.2k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|  32.2k|                let a = V::load_aligned(cur);
  526|  32.2k|                let b = V::load_aligned(cur.add(V::BYTES));
  527|  32.2k|                let eqa1 = self.v1.cmpeq(a);
  528|  32.2k|                let eqb1 = self.v1.cmpeq(b);
  529|  32.2k|                let eqa2 = self.v2.cmpeq(a);
  530|  32.2k|                let eqb2 = self.v2.cmpeq(b);
  531|  32.2k|                let or1 = eqa1.or(eqb1);
  532|  32.2k|                let or2 = eqa2.or(eqb2);
  533|  32.2k|                let or3 = or1.or(or2);
  534|  32.2k|                if or3.movemask_will_have_non_zero() {
  535|  10.0k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|  10.0k|                    if mask.has_non_zero() {
  537|  6.42k|                        return Some(cur.add(topos(mask)));
  538|  3.64k|                    }
  539|  3.64k|
  540|  3.64k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|  3.64k|                    debug_assert!(mask.has_non_zero());
  542|  3.64k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|  22.2k|                }
  544|  22.2k|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|  82.9k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   122k|        while cur <= end.sub(V::BYTES) {
  551|  30.6k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  30.6k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  3.17k|                return Some(cur);
  554|  27.5k|            }
  555|  27.5k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|  92.0k|        if cur < end {
  562|  90.8k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|  90.8k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|  90.8k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|  90.8k|            return self.search_chunk(cur, topos);
  566|  1.12k|        }
  567|  1.12k|        None
  568|   343k|    }
_RINvMs_NtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  61.7k|    unsafe fn search_chunk(
  671|  61.7k|        &self,
  672|  61.7k|        cur: *const u8,
  673|  61.7k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  61.7k|    ) -> Option<*const u8> {
  675|  61.7k|        let chunk = V::load_unaligned(cur);
  676|  61.7k|        let eq1 = self.v1.cmpeq(chunk);
  677|  61.7k|        let eq2 = self.v2.cmpeq(chunk);
  678|  61.7k|        let mask = eq1.or(eq2).movemask();
  679|  61.7k|        if mask.has_non_zero() {
  680|  24.5k|            let mask1 = eq1.movemask();
  681|  24.5k|            let mask2 = eq2.movemask();
  682|  24.5k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  37.1k|            None
  685|       |        }
  686|  61.7k|    }
_RINvMs_NtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|   464k|    unsafe fn search_chunk(
  671|   464k|        &self,
  672|   464k|        cur: *const u8,
  673|   464k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|   464k|    ) -> Option<*const u8> {
  675|   464k|        let chunk = V::load_unaligned(cur);
  676|   464k|        let eq1 = self.v1.cmpeq(chunk);
  677|   464k|        let eq2 = self.v2.cmpeq(chunk);
  678|   464k|        let mask = eq1.or(eq2).movemask();
  679|   464k|        if mask.has_non_zero() {
  680|   243k|            let mask1 = eq1.movemask();
  681|   243k|            let mask2 = eq2.movemask();
  682|   243k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|   221k|            None
  685|       |        }
  686|   464k|    }
_RNvMs0_NtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m128iE3newBb_:
  710|   165k|    pub(crate) unsafe fn new(
  711|   165k|        needle1: u8,
  712|   165k|        needle2: u8,
  713|   165k|        needle3: u8,
  714|   165k|    ) -> Three<V> {
  715|   165k|        Three {
  716|   165k|            s1: needle1,
  717|   165k|            s2: needle2,
  718|   165k|            s3: needle3,
  719|   165k|            v1: V::splat(needle1),
  720|   165k|            v2: V::splat(needle2),
  721|   165k|            v3: V::splat(needle3),
  722|   165k|        }
  723|   165k|    }
_RNvMs0_NtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m256iE3newBb_:
  710|   165k|    pub(crate) unsafe fn new(
  711|   165k|        needle1: u8,
  712|   165k|        needle2: u8,
  713|   165k|        needle3: u8,
  714|   165k|    ) -> Three<V> {
  715|   165k|        Three {
  716|   165k|            s1: needle1,
  717|   165k|            s2: needle2,
  718|   165k|            s3: needle3,
  719|   165k|            v1: V::splat(needle1),
  720|   165k|            v2: V::splat(needle2),
  721|   165k|            v3: V::splat(needle3),
  722|   165k|        }
  723|   165k|    }
_RNvMs0_NtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m128iE7needle1Bb_:
  727|  13.1k|    pub(crate) fn needle1(&self) -> u8 {
  728|  13.1k|        self.s1
  729|  13.1k|    }
_RNvMs0_NtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m128iE7needle2Bb_:
  733|  9.78k|    pub(crate) fn needle2(&self) -> u8 {
  734|  9.78k|        self.s2
  735|  9.78k|    }
_RNvMs0_NtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m128iE7needle3Bb_:
  739|  9.36k|    pub(crate) fn needle3(&self) -> u8 {
  740|  9.36k|        self.s3
  741|  9.36k|    }
_RNvMs0_NtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m128iE8find_rawBb_:
  765|  2.56k|    pub(crate) unsafe fn find_raw(
  766|  2.56k|        &self,
  767|  2.56k|        start: *const u8,
  768|  2.56k|        end: *const u8,
  769|  2.56k|    ) -> Option<*const u8> {
  770|  2.56k|        // If we want to support vectors bigger than 256 bits, we probably
  771|  2.56k|        // need to move up to using a u64 for the masks used below. Currently
  772|  2.56k|        // they are 32 bits, which means we're SOL for vectors that need masks
  773|  2.56k|        // bigger than 32 bits. Overall unclear until there's a use case.
  774|  2.56k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  775|       |
  776|  2.56k|        let topos = V::Mask::first_offset;
  777|  2.56k|        let len = end.distance(start);
  778|  2.56k|        debug_assert!(
  779|      0|            len >= V::BYTES,
  780|      0|            "haystack has length {}, but must be at least {}",
  781|       |            len,
  782|       |            V::BYTES
  783|       |        );
  784|       |
  785|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  786|       |        // of the haystack prior to where aligned loads can start.
  787|  2.56k|        if let Some(cur) = self.search_chunk(start, topos) {
  788|  2.15k|            return Some(cur);
  789|    407|        }
  790|    407|        // Set `cur` to the first V-aligned pointer greater than `start`.
  791|    407|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  792|    407|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  793|    407|        if len >= Self::LOOP_SIZE {
  794|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  795|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  796|       |
  797|      0|                let a = V::load_aligned(cur);
  798|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  799|      0|                let eqa1 = self.v1.cmpeq(a);
  800|      0|                let eqb1 = self.v1.cmpeq(b);
  801|      0|                let eqa2 = self.v2.cmpeq(a);
  802|      0|                let eqb2 = self.v2.cmpeq(b);
  803|      0|                let eqa3 = self.v3.cmpeq(a);
  804|      0|                let eqb3 = self.v3.cmpeq(b);
  805|      0|                let or1 = eqa1.or(eqb1);
  806|      0|                let or2 = eqa2.or(eqb2);
  807|      0|                let or3 = eqa3.or(eqb3);
  808|      0|                let or4 = or1.or(or2);
  809|      0|                let or5 = or3.or(or4);
  810|      0|                if or5.movemask_will_have_non_zero() {
  811|      0|                    let mask = eqa1
  812|      0|                        .movemask()
  813|      0|                        .or(eqa2.movemask())
  814|      0|                        .or(eqa3.movemask());
  815|      0|                    if mask.has_non_zero() {
  816|      0|                        return Some(cur.add(topos(mask)));
  817|      0|                    }
  818|      0|
  819|      0|                    let mask = eqb1
  820|      0|                        .movemask()
  821|      0|                        .or(eqb2.movemask())
  822|      0|                        .or(eqb3.movemask());
  823|      0|                    debug_assert!(mask.has_non_zero());
  824|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  825|      0|                }
  826|      0|                cur = cur.add(Self::LOOP_SIZE);
  827|       |            }
  828|    407|        }
  829|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  830|       |        // loads here, but I believe we are guaranteed that they are aligned
  831|       |        // since `cur` is aligned.
  832|    514|        while cur <= end.sub(V::BYTES) {
  833|    165|            debug_assert!(end.distance(cur) >= V::BYTES);
  834|    165|            if let Some(cur) = self.search_chunk(cur, topos) {
  835|     58|                return Some(cur);
  836|    107|            }
  837|    107|            cur = cur.add(V::BYTES);
  838|       |        }
  839|       |        // Finally handle any remaining bytes less than the size of V. In this
  840|       |        // case, our pointer may indeed be unaligned and the load may overlap
  841|       |        // with the previous one. But that's okay since we know the previous
  842|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  843|    349|        if cur < end {
  844|    310|            debug_assert!(end.distance(cur) < V::BYTES);
  845|    310|            cur = cur.sub(V::BYTES - end.distance(cur));
  846|    310|            debug_assert_eq!(end.distance(cur), V::BYTES);
  847|    310|            return self.search_chunk(cur, topos);
  848|     39|        }
  849|     39|        None
  850|  2.56k|    }
_RNvMs0_NtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m256iE8find_rawBb_:
  765|   157k|    pub(crate) unsafe fn find_raw(
  766|   157k|        &self,
  767|   157k|        start: *const u8,
  768|   157k|        end: *const u8,
  769|   157k|    ) -> Option<*const u8> {
  770|   157k|        // If we want to support vectors bigger than 256 bits, we probably
  771|   157k|        // need to move up to using a u64 for the masks used below. Currently
  772|   157k|        // they are 32 bits, which means we're SOL for vectors that need masks
  773|   157k|        // bigger than 32 bits. Overall unclear until there's a use case.
  774|   157k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  775|       |
  776|   157k|        let topos = V::Mask::first_offset;
  777|   157k|        let len = end.distance(start);
  778|   157k|        debug_assert!(
  779|      0|            len >= V::BYTES,
  780|      0|            "haystack has length {}, but must be at least {}",
  781|       |            len,
  782|       |            V::BYTES
  783|       |        );
  784|       |
  785|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  786|       |        // of the haystack prior to where aligned loads can start.
  787|   157k|        if let Some(cur) = self.search_chunk(start, topos) {
  788|   130k|            return Some(cur);
  789|  27.6k|        }
  790|  27.6k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  791|  27.6k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  792|  27.6k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  793|  27.6k|        if len >= Self::LOOP_SIZE {
  794|  35.0k|            while cur <= end.sub(Self::LOOP_SIZE) {
  795|  34.1k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  796|       |
  797|  34.1k|                let a = V::load_aligned(cur);
  798|  34.1k|                let b = V::load_aligned(cur.add(V::BYTES));
  799|  34.1k|                let eqa1 = self.v1.cmpeq(a);
  800|  34.1k|                let eqb1 = self.v1.cmpeq(b);
  801|  34.1k|                let eqa2 = self.v2.cmpeq(a);
  802|  34.1k|                let eqb2 = self.v2.cmpeq(b);
  803|  34.1k|                let eqa3 = self.v3.cmpeq(a);
  804|  34.1k|                let eqb3 = self.v3.cmpeq(b);
  805|  34.1k|                let or1 = eqa1.or(eqb1);
  806|  34.1k|                let or2 = eqa2.or(eqb2);
  807|  34.1k|                let or3 = eqa3.or(eqb3);
  808|  34.1k|                let or4 = or1.or(or2);
  809|  34.1k|                let or5 = or3.or(or4);
  810|  34.1k|                if or5.movemask_will_have_non_zero() {
  811|  24.5k|                    let mask = eqa1
  812|  24.5k|                        .movemask()
  813|  24.5k|                        .or(eqa2.movemask())
  814|  24.5k|                        .or(eqa3.movemask());
  815|  24.5k|                    if mask.has_non_zero() {
  816|  18.1k|                        return Some(cur.add(topos(mask)));
  817|  6.33k|                    }
  818|  6.33k|
  819|  6.33k|                    let mask = eqb1
  820|  6.33k|                        .movemask()
  821|  6.33k|                        .or(eqb2.movemask())
  822|  6.33k|                        .or(eqb3.movemask());
  823|  6.33k|                    debug_assert!(mask.has_non_zero());
  824|  6.33k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  825|  9.67k|                }
  826|  9.67k|                cur = cur.add(Self::LOOP_SIZE);
  827|       |            }
  828|  2.27k|        }
  829|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  830|       |        // loads here, but I believe we are guaranteed that they are aligned
  831|       |        // since `cur` is aligned.
  832|  4.19k|        while cur <= end.sub(V::BYTES) {
  833|  2.92k|            debug_assert!(end.distance(cur) >= V::BYTES);
  834|  2.92k|            if let Some(cur) = self.search_chunk(cur, topos) {
  835|  1.85k|                return Some(cur);
  836|  1.07k|            }
  837|  1.07k|            cur = cur.add(V::BYTES);
  838|       |        }
  839|       |        // Finally handle any remaining bytes less than the size of V. In this
  840|       |        // case, our pointer may indeed be unaligned and the load may overlap
  841|       |        // with the previous one. But that's okay since we know the previous
  842|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  843|  1.26k|        if cur < end {
  844|  1.21k|            debug_assert!(end.distance(cur) < V::BYTES);
  845|  1.21k|            cur = cur.sub(V::BYTES - end.distance(cur));
  846|  1.21k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  847|  1.21k|            return self.search_chunk(cur, topos);
  848|     46|        }
  849|     46|        None
  850|   157k|    }
_RINvMs0_NtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchrINtB6_5ThreeNtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBc_6vector16SensibleMoveMaskNtB29_8MoveMask12first_offsetEBc_:
  962|  3.04k|    unsafe fn search_chunk(
  963|  3.04k|        &self,
  964|  3.04k|        cur: *const u8,
  965|  3.04k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  966|  3.04k|    ) -> Option<*const u8> {
  967|  3.04k|        let chunk = V::load_unaligned(cur);
  968|  3.04k|        let eq1 = self.v1.cmpeq(chunk);
  969|  3.04k|        let eq2 = self.v2.cmpeq(chunk);
  970|  3.04k|        let eq3 = self.v3.cmpeq(chunk);
  971|  3.04k|        let mask = eq1.or(eq2).or(eq3).movemask();
  972|  3.04k|        if mask.has_non_zero() {
  973|  2.31k|            let mask1 = eq1.movemask();
  974|  2.31k|            let mask2 = eq2.movemask();
  975|  2.31k|            let mask3 = eq3.movemask();
  976|  2.31k|            Some(cur.add(mask_to_offset(mask1.or(mask2).or(mask3))))
  977|       |        } else {
  978|    722|            None
  979|       |        }
  980|  3.04k|    }
_RINvMs0_NtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchrINtB6_5ThreeNtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBc_6vector16SensibleMoveMaskNtB29_8MoveMask12first_offsetEBc_:
  962|   162k|    unsafe fn search_chunk(
  963|   162k|        &self,
  964|   162k|        cur: *const u8,
  965|   162k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  966|   162k|    ) -> Option<*const u8> {
  967|   162k|        let chunk = V::load_unaligned(cur);
  968|   162k|        let eq1 = self.v1.cmpeq(chunk);
  969|   162k|        let eq2 = self.v2.cmpeq(chunk);
  970|   162k|        let eq3 = self.v3.cmpeq(chunk);
  971|   162k|        let mask = eq1.or(eq2).or(eq3).movemask();
  972|   162k|        if mask.has_non_zero() {
  973|   133k|            let mask1 = eq1.movemask();
  974|   133k|            let mask2 = eq2.movemask();
  975|   133k|            let mask3 = eq3.movemask();
  976|   133k|            Some(cur.add(mask_to_offset(mask1.or(mask2).or(mask3))))
  977|       |        } else {
  978|  28.8k|            None
  979|       |        }
  980|   162k|    }
_RINvNtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  84.7k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  84.7k|    start: *const u8,
 1150|  84.7k|    end: *const u8,
 1151|  84.7k|    confirm: F,
 1152|  84.7k|) -> Option<*const u8> {
 1153|  84.7k|    debug_assert!(start <= end);
 1154|  84.7k|    let mut ptr = start;
 1155|   365k|    while ptr < end {
 1156|   346k|        if confirm(*ptr) {
 1157|  66.0k|            return Some(ptr);
 1158|   280k|        }
 1159|   280k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  18.7k|    None
 1162|  84.7k|}
_RINvNtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|   104k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|   104k|    start: *const u8,
 1150|   104k|    end: *const u8,
 1151|   104k|    confirm: F,
 1152|   104k|) -> Option<*const u8> {
 1153|   104k|    debug_assert!(start <= end);
 1154|   104k|    let mut ptr = start;
 1155|   395k|    while ptr < end {
 1156|   329k|        if confirm(*ptr) {
 1157|  38.6k|            return Some(ptr);
 1158|   291k|        }
 1159|   291k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  65.8k|    None
 1162|   104k|}
_RINvNtNtNtCsbRaibMNA6f7_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs6_NtNtNtB6_6x86_644avx26memchrNtB1d_5Three8find_raw0EB8_:
 1148|  5.28k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  5.28k|    start: *const u8,
 1150|  5.28k|    end: *const u8,
 1151|  5.28k|    confirm: F,
 1152|  5.28k|) -> Option<*const u8> {
 1153|  5.28k|    debug_assert!(start <= end);
 1154|  5.28k|    let mut ptr = start;
 1155|  14.2k|    while ptr < end {
 1156|  13.1k|        if confirm(*ptr) {
 1157|  4.21k|            return Some(ptr);
 1158|  8.94k|        }
 1159|  8.94k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  1.07k|    None
 1162|  5.28k|}

_RNvMNtNtNtNtCsbRaibMNA6f7_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|   246k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|   246k|        One {
   71|   246k|            sse2: generic::One::new(needle),
   72|   246k|            avx2: generic::One::new(needle),
   73|   246k|        }
   74|   246k|    }
_RNvMNtNtNtNtCsbRaibMNA6f7_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCsbRaibMNA6f7_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|   246k|    pub unsafe fn find_raw(
  180|   246k|        &self,
  181|   246k|        start: *const u8,
  182|   246k|        end: *const u8,
  183|   246k|    ) -> Option<*const u8> {
  184|   246k|        if start >= end {
  185|  27.4k|            return None;
  186|   218k|        }
  187|   218k|        let len = end.distance(start);
  188|   218k|        if len < __m256i::BYTES {
  189|  94.4k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  84.7k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  84.7k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  9.65k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|   124k|        }
  201|   124k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|   124k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|   124k|        // enough to run on the vector routine. Pointer validity is caller's
  204|   124k|        // responsibility.
  205|   124k|        //
  206|   124k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|   124k|        // means we'd have to annotate this routine with `target_feature`.
  208|   124k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|   124k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|   124k|        // The real problem is that a routine with a `target_feature`
  211|   124k|        // annotation generally can't be inlined into caller code unless
  212|   124k|        // the caller code has the same target feature annotations. Namely,
  213|   124k|        // the common case (at time of writing) is for calling code to not
  214|   124k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|   124k|        // `target_feature` on this routine, it can be inlined which will
  216|   124k|        // handle some of the short-haystack cases above without touching the
  217|   124k|        // architecture specific code.
  218|   124k|        self.find_raw_avx2(start, end)
  219|   246k|    }
_RNCNvMNtNtNtNtCsbRaibMNA6f7_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|   346k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|   346k|                    b == self.sse2.needle1()
  194|   346k|                })
_RNvMNtNtNtNtCsbRaibMNA6f7_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  9.65k|    unsafe fn find_raw_sse2(
  337|  9.65k|        &self,
  338|  9.65k|        start: *const u8,
  339|  9.65k|        end: *const u8,
  340|  9.65k|    ) -> Option<*const u8> {
  341|  9.65k|        self.sse2.find_raw(start, end)
  342|  9.65k|    }
_RNvMNtNtNtNtCsbRaibMNA6f7_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|   124k|    unsafe fn find_raw_avx2(
  397|   124k|        &self,
  398|   124k|        start: *const u8,
  399|   124k|        end: *const u8,
  400|   124k|    ) -> Option<*const u8> {
  401|   124k|        self.avx2.find_raw(start, end)
  402|   124k|    }
_RNvMs2_NtNtNtNtCsbRaibMNA6f7_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|   491k|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|   491k|        Two {
  558|   491k|            sse2: generic::Two::new(needle1, needle2),
  559|   491k|            avx2: generic::Two::new(needle1, needle2),
  560|   491k|        }
  561|   491k|    }
_RNvMs2_NtNtNtNtCsbRaibMNA6f7_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNvMs2_NtNtNtNtCsbRaibMNA6f7_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|   491k|    pub unsafe fn find_raw(
  655|   491k|        &self,
  656|   491k|        start: *const u8,
  657|   491k|        end: *const u8,
  658|   491k|    ) -> Option<*const u8> {
  659|   491k|        if start >= end {
  660|  3.10k|            return None;
  661|   487k|        }
  662|   487k|        let len = end.distance(start);
  663|   487k|        if len < __m256i::BYTES {
  664|   144k|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|   104k|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|   104k|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|  40.3k|                self.find_raw_sse2(start, end)
  674|       |            };
  675|   343k|        }
  676|   343k|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|   343k|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|   343k|        // enough to run on the vector routine. Pointer validity is caller's
  679|   343k|        // responsibility.
  680|   343k|        //
  681|   343k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|   343k|        // means we'd have to annotate this routine with `target_feature`.
  683|   343k|        // Which is fine, because this routine is `unsafe` anyway and the
  684|   343k|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|   343k|        // The real problem is that a routine with a `target_feature`
  686|   343k|        // annotation generally can't be inlined into caller code unless
  687|   343k|        // the caller code has the same target feature annotations. Namely,
  688|   343k|        // the common case (at time of writing) is for calling code to not
  689|   343k|        // have the `avx2` target feature enabled *at compile time*. Without
  690|   343k|        // `target_feature` on this routine, it can be inlined which will
  691|   343k|        // handle some of the short-haystack cases above without touching the
  692|   343k|        // architecture specific code.
  693|   343k|        self.find_raw_avx2(start, end)
  694|   491k|    }
_RNCNvMs2_NtNtNtNtCsbRaibMNA6f7_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|   329k|                generic::fwd_byte_by_byte(start, end, |b| {
  668|   329k|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|   329k|                })
_RNvMs2_NtNtNtNtCsbRaibMNA6f7_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|  40.3k|    unsafe fn find_raw_sse2(
  765|  40.3k|        &self,
  766|  40.3k|        start: *const u8,
  767|  40.3k|        end: *const u8,
  768|  40.3k|    ) -> Option<*const u8> {
  769|  40.3k|        self.sse2.find_raw(start, end)
  770|  40.3k|    }
_RNvMs2_NtNtNtNtCsbRaibMNA6f7_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|   343k|    unsafe fn find_raw_avx2(
  805|   343k|        &self,
  806|   343k|        start: *const u8,
  807|   343k|        end: *const u8,
  808|   343k|    ) -> Option<*const u8> {
  809|   343k|        self.avx2.find_raw(start, end)
  810|   343k|    }
_RNvMs6_NtNtNtNtCsbRaibMNA6f7_6memchr4arch6x86_644avx26memchrNtB5_5Three13new_uncheckedBd_:
  935|   165k|    pub unsafe fn new_unchecked(
  936|   165k|        needle1: u8,
  937|   165k|        needle2: u8,
  938|   165k|        needle3: u8,
  939|   165k|    ) -> Three {
  940|   165k|        Three {
  941|   165k|            sse2: generic::Three::new(needle1, needle2, needle3),
  942|   165k|            avx2: generic::Three::new(needle1, needle2, needle3),
  943|   165k|        }
  944|   165k|    }
_RNvMs6_NtNtNtNtCsbRaibMNA6f7_6memchr4arch6x86_644avx26memchrNtB5_5Three12is_availableBd_:
  956|      1|    pub fn is_available() -> bool {
  957|      1|        #[cfg(not(target_feature = "sse2"))]
  958|      1|        {
  959|      1|            false
  960|      1|        }
  961|      1|        #[cfg(target_feature = "sse2")]
  962|      1|        {
  963|      1|            #[cfg(target_feature = "avx2")]
  964|      1|            {
  965|      1|                true
  966|      1|            }
  967|      1|            #[cfg(not(target_feature = "avx2"))]
  968|      1|            {
  969|      1|                #[cfg(feature = "std")]
  970|      1|                {
  971|      1|                    std::is_x86_feature_detected!("avx2")
  972|       |                }
  973|       |                #[cfg(not(feature = "std"))]
  974|       |                {
  975|       |                    false
  976|       |                }
  977|       |            }
  978|       |        }
  979|      1|    }
_RNvMs6_NtNtNtNtCsbRaibMNA6f7_6memchr4arch6x86_644avx26memchrNtB5_5Three8find_rawBd_:
 1037|   165k|    pub unsafe fn find_raw(
 1038|   165k|        &self,
 1039|   165k|        start: *const u8,
 1040|   165k|        end: *const u8,
 1041|   165k|    ) -> Option<*const u8> {
 1042|   165k|        if start >= end {
 1043|    113|            return None;
 1044|   165k|        }
 1045|   165k|        let len = end.distance(start);
 1046|   165k|        if len < __m256i::BYTES {
 1047|  7.85k|            return if len < __m128i::BYTES {
 1048|       |                // SAFETY: We require the caller to pass valid start/end
 1049|       |                // pointers.
 1050|  5.28k|                generic::fwd_byte_by_byte(start, end, |b| {
 1051|       |                    b == self.sse2.needle1()
 1052|       |                        || b == self.sse2.needle2()
 1053|       |                        || b == self.sse2.needle3()
 1054|  5.28k|                })
 1055|       |            } else {
 1056|       |                // SAFETY: We require the caller to pass valid start/end
 1057|       |                // pointers.
 1058|  2.56k|                self.find_raw_sse2(start, end)
 1059|       |            };
 1060|   157k|        }
 1061|   157k|        // SAFETY: Building a `Three` means it's safe to call both 'sse2' and
 1062|   157k|        // 'avx2' routines. Also, we've checked that our haystack is big
 1063|   157k|        // enough to run on the vector routine. Pointer validity is caller's
 1064|   157k|        // responsibility.
 1065|   157k|        //
 1066|   157k|        // Note that we could call `self.avx2.find_raw` directly here. But that
 1067|   157k|        // means we'd have to annotate this routine with `target_feature`.
 1068|   157k|        // Which is fine, because this routine is `unsafe` anyway and the
 1069|   157k|        // `target_feature` obligation is met by virtue of building a `Three`.
 1070|   157k|        // The real problem is that a routine with a `target_feature`
 1071|   157k|        // annotation generally can't be inlined into caller code unless
 1072|   157k|        // the caller code has the same target feature annotations. Namely,
 1073|   157k|        // the common case (at time of writing) is for calling code to not
 1074|   157k|        // have the `avx2` target feature enabled *at compile time*. Without
 1075|   157k|        // `target_feature` on this routine, it can be inlined which will
 1076|   157k|        // handle some of the short-haystack cases above without touching the
 1077|   157k|        // architecture specific code.
 1078|   157k|        self.find_raw_avx2(start, end)
 1079|   165k|    }
_RNCNvMs6_NtNtNtNtCsbRaibMNA6f7_6memchr4arch6x86_644avx26memchrNtB7_5Three8find_raw0Bf_:
 1050|  13.1k|                generic::fwd_byte_by_byte(start, end, |b| {
 1051|  13.1k|                    b == self.sse2.needle1()
 1052|  9.78k|                        || b == self.sse2.needle2()
 1053|  9.36k|                        || b == self.sse2.needle3()
 1054|  13.1k|                })
_RNvMs6_NtNtNtNtCsbRaibMNA6f7_6memchr4arch6x86_644avx26memchrNtB5_5Three13find_raw_sse2Bd_:
 1151|  2.56k|    unsafe fn find_raw_sse2(
 1152|  2.56k|        &self,
 1153|  2.56k|        start: *const u8,
 1154|  2.56k|        end: *const u8,
 1155|  2.56k|    ) -> Option<*const u8> {
 1156|  2.56k|        self.sse2.find_raw(start, end)
 1157|  2.56k|    }
_RNvMs6_NtNtNtNtCsbRaibMNA6f7_6memchr4arch6x86_644avx26memchrNtB5_5Three13find_raw_avx2Bd_:
 1191|   157k|    unsafe fn find_raw_avx2(
 1192|   157k|        &self,
 1193|   157k|        start: *const u8,
 1194|   157k|        end: *const u8,
 1195|   157k|    ) -> Option<*const u8> {
 1196|   157k|        self.avx2.find_raw(start, end)
 1197|   157k|    }

_RNvNtNtNtCsbRaibMNA6f7_6memchr4arch6x86_646memchr10memchr_raw:
  174|   246k|pub(crate) fn memchr_raw(
  175|   246k|    n1: u8,
  176|   246k|    start: *const u8,
  177|   246k|    end: *const u8,
  178|   246k|) -> Option<*const u8> {
  179|   246k|    // SAFETY: We provide a valid function pointer type.
  180|   246k|    unsafe_ifunc!(
  181|   246k|        One,
  182|   246k|        find_raw,
  183|   246k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|   246k|        Option<*const u8>,
  185|   246k|        start,
  186|   246k|        end,
  187|   246k|        n1
  188|   246k|    )
  189|   246k|}
_RNvNtNtNtCsbRaibMNA6f7_6memchr4arch6x86_646memchr11memchr2_raw:
  220|   491k|pub(crate) fn memchr2_raw(
  221|   491k|    n1: u8,
  222|   491k|    n2: u8,
  223|   491k|    start: *const u8,
  224|   491k|    end: *const u8,
  225|   491k|) -> Option<*const u8> {
  226|   491k|    // SAFETY: We provide a valid function pointer type.
  227|   491k|    unsafe_ifunc!(
  228|   491k|        Two,
  229|   491k|        find_raw,
  230|   491k|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|   491k|        Option<*const u8>,
  232|   491k|        start,
  233|   491k|        end,
  234|   491k|        n1,
  235|   491k|        n2
  236|   491k|    )
  237|   491k|}
_RNvNtNtNtCsbRaibMNA6f7_6memchr4arch6x86_646memchr11memchr3_raw:
  270|   165k|pub(crate) fn memchr3_raw(
  271|   165k|    n1: u8,
  272|   165k|    n2: u8,
  273|   165k|    n3: u8,
  274|   165k|    start: *const u8,
  275|   165k|    end: *const u8,
  276|   165k|) -> Option<*const u8> {
  277|   165k|    // SAFETY: We provide a valid function pointer type.
  278|   165k|    unsafe_ifunc!(
  279|   165k|        Three,
  280|   165k|        find_raw,
  281|   165k|        unsafe fn(u8, u8, u8, *const u8, *const u8) -> Option<*const u8>,
  282|   165k|        Option<*const u8>,
  283|   165k|        start,
  284|   165k|        end,
  285|   165k|        n1,
  286|   165k|        n2,
  287|   165k|        n3
  288|   165k|    )
  289|   165k|}
_RNvNvNtNtNtCsbRaibMNA6f7_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|   246k|        unsafe fn find_avx2(
   79|   246k|            $($needle: u8),+,
   80|   246k|            $hay_start: *const u8,
   81|   246k|            $hay_end: *const u8,
   82|   246k|        ) -> $retty {
   83|   246k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|   246k|            $memchrty::new_unchecked($($needle),+)
   85|   246k|                .$memchrfind($hay_start, $hay_end)
   86|   246k|        }
_RNvNvNtNtNtCsbRaibMNA6f7_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCsbRaibMNA6f7_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|   491k|        unsafe fn find_avx2(
   79|   491k|            $($needle: u8),+,
   80|   491k|            $hay_start: *const u8,
   81|   491k|            $hay_end: *const u8,
   82|   491k|        ) -> $retty {
   83|   491k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|   491k|            $memchrty::new_unchecked($($needle),+)
   85|   491k|                .$memchrfind($hay_start, $hay_end)
   86|   491k|        }
_RNvNvNtNtNtCsbRaibMNA6f7_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCsbRaibMNA6f7_6memchr4arch6x86_646memchr11memchr3_raw9find_avx2:
   78|   165k|        unsafe fn find_avx2(
   79|   165k|            $($needle: u8),+,
   80|   165k|            $hay_start: *const u8,
   81|   165k|            $hay_end: *const u8,
   82|   165k|        ) -> $retty {
   83|   165k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|   165k|            $memchrty::new_unchecked($($needle),+)
   85|   165k|                .$memchrfind($hay_start, $hay_end)
   86|   165k|        }
_RNvNvNtNtNtCsbRaibMNA6f7_6memchr4arch6x86_646memchr11memchr3_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }

_RNvXNtCsbRaibMNA6f7_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  2.34M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  2.34M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  2.34M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  2.34M|    }
_RNvXNtCsbRaibMNA6f7_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|   171k|    fn as_usize(self) -> usize {
   27|   171k|        self as usize
   28|   171k|    }

_RNvMNtCsbRaibMNA6f7_6memchr6memchrNtB2_6Memchr3newCshwa6i4jbVTh_7rdf_xml:
  300|    166|    pub fn new(needle1: u8, haystack: &'h [u8]) -> Memchr<'h> {
  301|    166|        Memchr {
  302|    166|            needle1,
  303|    166|            it: crate::arch::generic::memchr::Iter::new(haystack),
  304|    166|        }
  305|    166|    }
_RNvMs2_NtCsbRaibMNA6f7_6memchr6memchrNtB5_7Memchr23newCshwa6i4jbVTh_7rdf_xml:
  377|   185k|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|   185k|        Memchr2 {
  379|   185k|            needle1,
  380|   185k|            needle2,
  381|   185k|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|   185k|        }
  383|   185k|    }
_RNvMs6_NtCsbRaibMNA6f7_6memchr6memchrNtB5_7Memchr33newCshwa6i4jbVTh_7rdf_xml:
  446|  88.9k|    pub fn new(
  447|  88.9k|        needle1: u8,
  448|  88.9k|        needle2: u8,
  449|  88.9k|        needle3: u8,
  450|  88.9k|        haystack: &'h [u8],
  451|  88.9k|    ) -> Memchr3<'h> {
  452|  88.9k|        Memchr3 {
  453|  88.9k|            needle1,
  454|  88.9k|            needle2,
  455|  88.9k|            needle3,
  456|  88.9k|            it: crate::arch::generic::memchr::Iter::new(haystack),
  457|  88.9k|        }
  458|  88.9k|    }
_RNvNtCsbRaibMNA6f7_6memchr6memchr11memchr_iterCshwa6i4jbVTh_7rdf_xml:
  216|    166|pub fn memchr_iter<'h>(needle: u8, haystack: &'h [u8]) -> Memchr<'h> {
  217|    166|    Memchr::new(needle, haystack)
  218|    166|}
_RNvNtCsbRaibMNA6f7_6memchr6memchr12memchr2_iterCshwa6i4jbVTh_7rdf_xml:
  232|   185k|pub fn memchr2_iter<'h>(
  233|   185k|    needle1: u8,
  234|   185k|    needle2: u8,
  235|   185k|    haystack: &'h [u8],
  236|   185k|) -> Memchr2<'h> {
  237|   185k|    Memchr2::new(needle1, needle2, haystack)
  238|   185k|}
_RNvNtCsbRaibMNA6f7_6memchr6memchr12memchr3_iterCshwa6i4jbVTh_7rdf_xml:
  256|  88.9k|pub fn memchr3_iter<'h>(
  257|  88.9k|    needle1: u8,
  258|  88.9k|    needle2: u8,
  259|  88.9k|    needle3: u8,
  260|  88.9k|    haystack: &'h [u8],
  261|  88.9k|) -> Memchr3<'h> {
  262|  88.9k|    Memchr3::new(needle1, needle2, needle3, haystack)
  263|  88.9k|}
_RNvNtCsbRaibMNA6f7_6memchr6memchr6memchrCshwa6i4jbVTh_7rdf_xml:
   27|   133k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|   133k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|   133k|    // pointer between start and end.
   30|   133k|    unsafe {
   31|   133k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|   133k|        })
   34|   133k|    }
   35|   133k|}
_RNvXs3_NtCsbRaibMNA6f7_6memchr6memchrNtB5_7Memchr2NtNtNtNtCsiOGkCewTsZJ_4core4iter6traits8iterator8Iterator4nextCshwa6i4jbVTh_7rdf_xml:
  390|   297k|    fn next(&mut self) -> Option<usize> {
  391|   297k|        // SAFETY: All of our implementations of memchr ensure that any
  392|   297k|        // pointers returns will fall within the start and end bounds, and this
  393|   297k|        // upholds the safety contract of `self.it.next`.
  394|   297k|        unsafe {
  395|   297k|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|   297k|        }
  397|   297k|    }
_RNvXs7_NtCsbRaibMNA6f7_6memchr6memchrNtB5_7Memchr3NtNtNtNtCsiOGkCewTsZJ_4core4iter6traits8iterator8Iterator4nextCshwa6i4jbVTh_7rdf_xml:
  465|   165k|    fn next(&mut self) -> Option<usize> {
  466|   165k|        // SAFETY: All of our implementations of memchr ensure that any
  467|   165k|        // pointers returns will fall within the start and end bounds, and this
  468|   165k|        // upholds the safety contract of `self.it.next`.
  469|   165k|        unsafe {
  470|   165k|            self.it.next(|s, e| {
  471|       |                memchr3_raw(self.needle1, self.needle2, self.needle3, s, e)
  472|   165k|            })
  473|   165k|        }
  474|   165k|    }
_RNvXs_NtCsbRaibMNA6f7_6memchr6memchrNtB4_6MemchrNtNtNtNtCsiOGkCewTsZJ_4core4iter6traits8iterator8Iterator4nextCshwa6i4jbVTh_7rdf_xml:
  312|  2.04k|    fn next(&mut self) -> Option<usize> {
  313|  2.04k|        // SAFETY: All of our implementations of memchr ensure that any
  314|  2.04k|        // pointers returns will fall within the start and end bounds, and this
  315|  2.04k|        // upholds the safety contract of `self.it.next`.
  316|  2.04k|        unsafe {
  317|  2.04k|            // NOTE: I attempted to define an enum of previously created
  318|  2.04k|            // searchers and then switch on those here instead of just
  319|  2.04k|            // calling `memchr_raw` (or `One::new(..).find_raw(..)`). But
  320|  2.04k|            // that turned out to have a fair bit of extra overhead when
  321|  2.04k|            // searching very small haystacks.
  322|  2.04k|            self.it.next(|s, e| memchr_raw(self.needle1, s, e))
  323|  2.04k|        }
  324|  2.04k|    }
_RNCNvXs3_NtCsbRaibMNA6f7_6memchr6memchrNtB7_7Memchr2NtNtNtNtCsiOGkCewTsZJ_4core4iter6traits8iterator8Iterator4next0Cs57NZtjOlRkW_9quick_xml:
  395|   491k|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNCNvXs7_NtCsbRaibMNA6f7_6memchr6memchrNtB7_7Memchr3NtNtNtNtCsiOGkCewTsZJ_4core4iter6traits8iterator8Iterator4next0Cs57NZtjOlRkW_9quick_xml:
  470|   165k|            self.it.next(|s, e| {
  471|   165k|                memchr3_raw(self.needle1, self.needle2, self.needle3, s, e)
  472|   165k|            })
_RNCNvXs_NtCsbRaibMNA6f7_6memchr6memchrNtB6_6MemchrNtNtNtNtCsiOGkCewTsZJ_4core4iter6traits8iterator8Iterator4next0Cs57NZtjOlRkW_9quick_xml:
  322|  2.04k|            self.it.next(|s, e| memchr_raw(self.needle1, s, e))
_RNvNtCsbRaibMNA6f7_6memchr6memchr10memchr_rawCs57NZtjOlRkW_9quick_xml:
  504|  2.04k|unsafe fn memchr_raw(
  505|  2.04k|    needle: u8,
  506|  2.04k|    start: *const u8,
  507|  2.04k|    end: *const u8,
  508|  2.04k|) -> Option<*const u8> {
  509|  2.04k|    #[cfg(target_arch = "x86_64")]
  510|  2.04k|    {
  511|  2.04k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  2.04k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  2.04k|        // time. This function also handles using a fallback if neither AVX2
  514|  2.04k|        // nor SSE2 (unusual) are available.
  515|  2.04k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  2.04k|    }
  517|  2.04k|    #[cfg(target_arch = "wasm32")]
  518|  2.04k|    {
  519|  2.04k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  2.04k|    }
  521|  2.04k|    #[cfg(target_arch = "aarch64")]
  522|  2.04k|    {
  523|  2.04k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  2.04k|    }
  525|  2.04k|    #[cfg(not(any(
  526|  2.04k|        target_arch = "x86_64",
  527|  2.04k|        target_arch = "wasm32",
  528|  2.04k|        target_arch = "aarch64"
  529|  2.04k|    )))]
  530|  2.04k|    {
  531|  2.04k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  2.04k|    }
  533|  2.04k|}
_RNvNtCsbRaibMNA6f7_6memchr6memchr11memchr2_rawCs57NZtjOlRkW_9quick_xml:
  574|   491k|unsafe fn memchr2_raw(
  575|   491k|    needle1: u8,
  576|   491k|    needle2: u8,
  577|   491k|    start: *const u8,
  578|   491k|    end: *const u8,
  579|   491k|) -> Option<*const u8> {
  580|   491k|    #[cfg(target_arch = "x86_64")]
  581|   491k|    {
  582|   491k|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|   491k|    }
  584|   491k|    #[cfg(target_arch = "wasm32")]
  585|   491k|    {
  586|   491k|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|   491k|    }
  588|   491k|    #[cfg(target_arch = "aarch64")]
  589|   491k|    {
  590|   491k|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|   491k|    }
  592|   491k|    #[cfg(not(any(
  593|   491k|        target_arch = "x86_64",
  594|   491k|        target_arch = "wasm32",
  595|   491k|        target_arch = "aarch64"
  596|   491k|    )))]
  597|   491k|    {
  598|   491k|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|   491k|            .find_raw(start, end)
  600|   491k|    }
  601|   491k|}
_RNvNtCsbRaibMNA6f7_6memchr6memchr11memchr3_rawCs57NZtjOlRkW_9quick_xml:
  646|   165k|unsafe fn memchr3_raw(
  647|   165k|    needle1: u8,
  648|   165k|    needle2: u8,
  649|   165k|    needle3: u8,
  650|   165k|    start: *const u8,
  651|   165k|    end: *const u8,
  652|   165k|) -> Option<*const u8> {
  653|   165k|    #[cfg(target_arch = "x86_64")]
  654|   165k|    {
  655|   165k|        crate::arch::x86_64::memchr::memchr3_raw(
  656|   165k|            needle1, needle2, needle3, start, end,
  657|   165k|        )
  658|   165k|    }
  659|   165k|    #[cfg(target_arch = "wasm32")]
  660|   165k|    {
  661|   165k|        crate::arch::wasm32::memchr::memchr3_raw(
  662|   165k|            needle1, needle2, needle3, start, end,
  663|   165k|        )
  664|   165k|    }
  665|   165k|    #[cfg(target_arch = "aarch64")]
  666|   165k|    {
  667|   165k|        crate::arch::aarch64::memchr::memchr3_raw(
  668|   165k|            needle1, needle2, needle3, start, end,
  669|   165k|        )
  670|   165k|    }
  671|   165k|    #[cfg(not(any(
  672|   165k|        target_arch = "x86_64",
  673|   165k|        target_arch = "wasm32",
  674|   165k|        target_arch = "aarch64"
  675|   165k|    )))]
  676|   165k|    {
  677|   165k|        crate::arch::all::memchr::Three::new(needle1, needle2, needle3)
  678|   165k|            .find_raw(start, end)
  679|   165k|    }
  680|   165k|}
_RNvNtCsbRaibMNA6f7_6memchr6memchr6memchrCs57NZtjOlRkW_9quick_xml:
   27|   110k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|   110k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|   110k|    // pointer between start and end.
   30|   110k|    unsafe {
   31|   110k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|   110k|        })
   34|   110k|    }
   35|   110k|}
_RNvXs3_NtCsbRaibMNA6f7_6memchr6memchrNtB5_7Memchr2NtNtNtNtCsiOGkCewTsZJ_4core4iter6traits8iterator8Iterator4nextCs57NZtjOlRkW_9quick_xml:
  390|   193k|    fn next(&mut self) -> Option<usize> {
  391|   193k|        // SAFETY: All of our implementations of memchr ensure that any
  392|   193k|        // pointers returns will fall within the start and end bounds, and this
  393|   193k|        // upholds the safety contract of `self.it.next`.
  394|   193k|        unsafe {
  395|   193k|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|   193k|        }
  397|   193k|    }
_RNCNvNtCsbRaibMNA6f7_6memchr6memchr6memchr0B5_:
   31|   244k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|   244k|            memchr_raw(needle, start, end)
   33|   244k|        })
_RNvNtCsbRaibMNA6f7_6memchr6memchr10memchr_rawB3_:
  504|   244k|unsafe fn memchr_raw(
  505|   244k|    needle: u8,
  506|   244k|    start: *const u8,
  507|   244k|    end: *const u8,
  508|   244k|) -> Option<*const u8> {
  509|   244k|    #[cfg(target_arch = "x86_64")]
  510|   244k|    {
  511|   244k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|   244k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|   244k|        // time. This function also handles using a fallback if neither AVX2
  514|   244k|        // nor SSE2 (unusual) are available.
  515|   244k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|   244k|    }
  517|   244k|    #[cfg(target_arch = "wasm32")]
  518|   244k|    {
  519|   244k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|   244k|    }
  521|   244k|    #[cfg(target_arch = "aarch64")]
  522|   244k|    {
  523|   244k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|   244k|    }
  525|   244k|    #[cfg(not(any(
  526|   244k|        target_arch = "x86_64",
  527|   244k|        target_arch = "wasm32",
  528|   244k|        target_arch = "aarch64"
  529|   244k|    )))]
  530|   244k|    {
  531|   244k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|   244k|    }
  533|   244k|}

_RNvMNtCsbRaibMNA6f7_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  128|   569k|    fn get_for_offset(self) -> u32 {
  129|   569k|        #[cfg(target_endian = "big")]
  130|   569k|        {
  131|   569k|            self.0.swap_bytes()
  132|   569k|        }
  133|   569k|        #[cfg(target_endian = "little")]
  134|   569k|        {
  135|   569k|            self.0
  136|   569k|        }
  137|   569k|    }
_RNvXs_NtCsbRaibMNA6f7_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  148|   970k|    fn has_non_zero(self) -> bool {
  149|   970k|        self.0 != 0
  150|   970k|    }
_RNvXs_NtCsbRaibMNA6f7_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  173|   569k|    fn first_offset(self) -> usize {
  174|   569k|        // We are dealing with little endian here (and if we aren't, we swap
  175|   569k|        // the bytes so we are in practice), where the most significant byte
  176|   569k|        // is at a higher address. That means the least significant bit that
  177|   569k|        // is set corresponds to the position of our first matching byte.
  178|   569k|        // That position corresponds to the number of zeros after the least
  179|   569k|        // significant bit.
  180|   569k|        self.get_for_offset().trailing_zeros() as usize
  181|   569k|    }
_RNvXNtNtCsbRaibMNA6f7_6memchr6vector7x86sse2NtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  220|  77.6k|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  221|  77.6k|            _mm_loadu_si128(data as *const __m128i)
  222|  77.6k|        }
_RNvXNtNtCsbRaibMNA6f7_6memchr6vector7x86sse2NtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  225|   133k|        unsafe fn movemask(self) -> SensibleMoveMask {
  226|   133k|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  227|   133k|        }
_RNvXNtNtCsbRaibMNA6f7_6memchr6vector7x86sse2NtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  230|   145k|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  231|   145k|            _mm_cmpeq_epi8(self, vector2)
  232|   145k|        }
_RNvYNtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m256iNtNtCsbRaibMNA6f7_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   65|  80.4k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   66|  80.4k|        self.movemask().has_non_zero()
   67|  80.4k|    }
_RNvXNtNtCsbRaibMNA6f7_6memchr6vector7x86avx2NtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  275|  1.86M|        unsafe fn movemask(self) -> SensibleMoveMask {
  276|  1.86M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  277|  1.86M|        }
_RNvXNtNtCsbRaibMNA6f7_6memchr6vector7x86avx2NtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  270|   757k|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  271|   757k|            _mm256_loadu_si256(data as *const __m256i)
  272|   757k|        }
_RNvXNtNtCsbRaibMNA6f7_6memchr6vector7x86avx2NtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  280|  1.93M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  281|  1.93M|            _mm256_cmpeq_epi8(self, vector2)
  282|  1.93M|        }
_RNvXs_NtCsbRaibMNA6f7_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  163|   614k|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  164|   614k|        SensibleMoveMask(self.0 | other.0)
  165|   614k|    }
_RNvXNtNtCsbRaibMNA6f7_6memchr6vector7x86sse2NtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  210|  1.72M|        unsafe fn splat(byte: u8) -> __m128i {
  211|  1.72M|            _mm_set1_epi8(byte as i8)
  212|  1.72M|        }
_RNvXNtNtCsbRaibMNA6f7_6memchr6vector7x86sse2NtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m128iNtB4_6Vector2or:
  240|  67.7k|        unsafe fn or(self, vector2: Self) -> __m128i {
  241|  67.7k|            _mm_or_si128(self, vector2)
  242|  67.7k|        }
_RNvXNtNtCsbRaibMNA6f7_6memchr6vector7x86avx2NtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  260|  1.72M|        unsafe fn splat(byte: u8) -> __m256i {
  261|  1.72M|            _mm256_set1_epi8(byte as i8)
  262|  1.72M|        }
_RNvXNtNtCsbRaibMNA6f7_6memchr6vector7x86avx2NtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  265|   188k|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  266|   188k|            _mm256_load_si256(data as *const __m256i)
  267|   188k|        }
_RNvXNtNtCsbRaibMNA6f7_6memchr6vector7x86avx2NtNtNtCsiOGkCewTsZJ_4core9core_arch3x867___m256iNtB4_6Vector2or:
  290|  1.09M|        unsafe fn or(self, vector2: Self) -> __m256i {
  291|  1.09M|            _mm256_or_si256(self, vector2)
  292|  1.09M|        }

_RNvMs2_NtCse63fdZerNs0_9once_cell3impINtB5_8OnceCellNtNtCs99O0fDgeGot_5alloc6string6StringE14is_initializedCseDlmzo0ROG6_13libfuzzer_sys:
   49|  3.44k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  3.44k|        // An `Acquire` load is enough because that makes all the initialization
   51|  3.44k|        // operations visible to us, and, this being a fast path, weaker
   52|  3.44k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  3.44k|        // `SeqCst` operations on the slow path.
   54|  3.44k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  3.44k|    }

_RNvMs4_NtCse63fdZerNs0_9once_cell4syncINtB5_8OnceCellNtNtCs99O0fDgeGot_5alloc6string6StringE3getCseDlmzo0ROG6_13libfuzzer_sys:
  963|  3.44k|        pub fn get(&self) -> Option<&T> {
  964|  3.44k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  3.44k|                None
  969|       |            }
  970|  3.44k|        }

_RINvMs11_Cs6BboDKTheMj_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECs4QHopEsftxz_5oxrdf:
 1567|  13.6k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1568|  13.6k|        Err(IriParseError { kind })
 1569|  13.6k|    }
_RNCNvMs11_Cs6BboDKTheMj_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0Cs4QHopEsftxz_5oxrdf:
 1550|  4.60k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_Cs6BboDKTheMj_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0Cs4QHopEsftxz_5oxrdf:
 1551|  3.08k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMCs6BboDKTheMj_5oxiriINtB2_6IriRefNtNtCs99O0fDgeGot_5alloc6string6StringE10into_innerCs4QHopEsftxz_5oxrdf:
  191|  55.1k|    pub fn into_inner(self) -> T {
  192|  55.1k|        self.iri
  193|  55.1k|    }
_RNvMCs6BboDKTheMj_5oxiriINtB2_6IriRefNtNtCs99O0fDgeGot_5alloc6string6StringE11is_absoluteCs4QHopEsftxz_5oxrdf:
  205|  56.0k|    pub fn is_absolute(&self) -> bool {
  206|  56.0k|        self.positions.scheme_end != 0
  207|  56.0k|    }
_RNvMCs6BboDKTheMj_5oxiriINtB2_6IriRefNtNtCs99O0fDgeGot_5alloc6string6StringE5parseCs4QHopEsftxz_5oxrdf:
   58|  69.6k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  69.6k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  56.0k|        Ok(Self { iri, positions })
   61|  69.6k|    }
_RNvMs11_Cs6BboDKTheMj_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCs4QHopEsftxz_5oxrdf:
 1366|  61.5k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|  61.5k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|  1.50k|            let start_position = self.input.position;
 1370|  75.2k|            while let Some(c) = self.input.next() {
 1371|  74.3k|                self.output.push(c);
 1372|  74.3k|                if c == ']' {
 1373|    581|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|    581|                    if !UNCHECKED {
 1375|    581|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|    581|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|      0|                        }
 1378|      0|                    }
 1379|       |
 1380|      0|                    let c = self.input.next();
 1381|      0|                    return match c {
 1382|       |                        Some(':') => {
 1383|      0|                            self.output.push(':');
 1384|      0|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|      0|                            self.output_positions.authority_end = self.output.len();
 1388|      0|                            self.parse_path_start(c)
 1389|       |                        }
 1390|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|  73.7k|                }
 1393|       |            }
 1394|    928|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|   834k|            loop {
 1398|   834k|                let c = self.input.next();
 1399|   834k|                match c {
 1400|       |                    Some(':') => {
 1401|  11.3k|                        self.output.push(':');
 1402|  11.3k|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|  48.3k|                        self.output_positions.authority_end = self.output.len();
 1406|  48.3k|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|   774k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|  61.5k|    }
_RNvMs11_Cs6BboDKTheMj_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCs4QHopEsftxz_5oxrdf:
 1457|  57.2k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|  1.54M|        loop {
 1459|  1.54M|            let c = self.input.next();
 1460|  1.54M|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|   152k|                    if self.output.as_str().ends_with("/..") {
 1463|      0|                        self.remove_last_segment();
 1464|      0|                        self.remove_last_segment();
 1465|      0|                        self.output.push('/');
 1466|   152k|                    } else if self.output.as_str().ends_with("/.") {
 1467|      0|                        self.remove_last_segment();
 1468|      0|                        self.output.push('/');
 1469|   152k|                    } else if c == Some('/') {
 1470|   100k|                        self.output.push('/');
 1471|   100k|                    }
 1472|       |
 1473|   152k|                    if c == Some('?') {
 1474|  14.9k|                        self.output_positions.path_end = self.output.len();
 1475|  14.9k|                        self.output.push('?');
 1476|  14.9k|                        return self.parse_query();
 1477|   137k|                    } else if c == Some('#') {
 1478|  28.0k|                        self.output_positions.path_end = self.output.len();
 1479|  28.0k|                        self.output_positions.query_end = self.output.len();
 1480|  28.0k|                        self.output.push('#');
 1481|  28.0k|                        return self.parse_fragment();
 1482|   109k|                    } else if c.is_none() {
 1483|  8.61k|                        self.output_positions.path_end = self.output.len();
 1484|  8.61k|                        self.output_positions.query_end = self.output.len();
 1485|  8.61k|                        return Ok(());
 1486|   100k|                    }
 1487|       |                }
 1488|  1.39M|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|  57.2k|    }
_RNvMs11_Cs6BboDKTheMj_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCs4QHopEsftxz_5oxrdf:
 1414|  11.3k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|  12.2k|        loop {
 1416|  12.2k|            let c = self.input.next();
 1417|  8.75k|            match c {
 1418|  8.75k|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|  10.2k|                    self.output_positions.authority_end = self.output.len();
 1421|  10.2k|                    return self.parse_path_start(c);
 1422|       |                }
 1423|  1.03k|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|  11.3k|    }
_RNvMs11_Cs6BboDKTheMj_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCs4QHopEsftxz_5oxrdf:
 1547|  4.70k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1548|  4.70k|        let c1 = self.input.next();
 1549|  4.70k|        let c2 = self.input.next();
 1550|  4.70k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1551|  3.08k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1552|       |        {
 1553|  1.76k|            self.output.push('%');
 1554|  1.76k|            self.output.push(c1.unwrap());
 1555|  1.76k|            self.output.push(c2.unwrap());
 1556|  1.76k|            Ok(())
 1557|       |        } else {
 1558|  2.94k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1559|  2.94k|                Some('%'),
 1560|  2.94k|                c1,
 1561|  2.94k|                c2,
 1562|  2.94k|            ]))
 1563|       |        }
 1564|  4.70k|    }
_RNvMs11_Cs6BboDKTheMj_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCs4QHopEsftxz_5oxrdf:
 1493|  16.0k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|   588k|        while let Some(c) = self.input.next() {
 1495|   574k|            if c == '#' {
 1496|    487|                self.output_positions.query_end = self.output.len();
 1497|    487|                self.output.push('#');
 1498|    487|                return self.parse_fragment();
 1499|       |            } else {
 1500|   573k|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|  13.6k|        self.output_positions.query_end = self.output.len();
 1504|  13.6k|        Ok(())
 1505|  16.0k|    }
_RNvMs11_Cs6BboDKTheMj_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCs4QHopEsftxz_5oxrdf:
 1220|  67.5k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|   446k|        loop {
 1222|   446k|            let c = self.input.next();
 1223|   445k|            match c {
 1224|   445k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|   378k|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|  64.6k|                    self.output.push(':');
 1229|  64.6k|                    self.output_positions.scheme_end = self.output.len();
 1230|  64.6k|                    self.input_scheme_end = self.input.position;
 1231|  64.6k|                    return if self.input.starts_with('/') {
 1232|  63.8k|                        self.input.next();
 1233|  63.8k|                        self.output.push('/');
 1234|  63.8k|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|    830|                        self.output_positions.authority_end = self.output.len();
 1237|    830|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|  2.89k|                    self.input = ParserInput {
 1242|  2.89k|                        value: self.iri.chars(),
 1243|  2.89k|                        position: 0,
 1244|  2.89k|                    }; // reset
 1245|  2.89k|                    self.output.clear();
 1246|  2.89k|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|  67.5k|    }
_RNvMs11_Cs6BboDKTheMj_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCs4QHopEsftxz_5oxrdf:
 1507|  29.3k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|   416k|        while let Some(c) = self.input.next() {
 1509|   388k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|  28.0k|        Ok(())
 1512|  29.3k|    }
_RNvMs11_Cs6BboDKTheMj_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_relativeCs4QHopEsftxz_5oxrdf:
 1263|  4.81k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1264|  4.81k|        if let Some(base) = self.base {
 1265|      0|            match self.input.front() {
 1266|       |                None => {
 1267|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1268|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1269|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1270|      0|                    self.output_positions.path_end = base.positions.path_end;
 1271|      0|                    self.output_positions.query_end = base.positions.query_end;
 1272|      0|                    Ok(())
 1273|       |                }
 1274|       |                Some('/') => {
 1275|      0|                    self.input.next();
 1276|      0|                    self.parse_relative_slash(&base)
 1277|       |                }
 1278|       |                Some('?') => {
 1279|      0|                    self.input.next();
 1280|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1281|      0|                    self.output.push('?');
 1282|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1283|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1284|      0|                    self.output_positions.path_end = base.positions.path_end;
 1285|      0|                    self.parse_query()
 1286|       |                }
 1287|       |                Some('#') => {
 1288|      0|                    self.input.next();
 1289|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1290|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1291|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1292|      0|                    self.output_positions.path_end = base.positions.path_end;
 1293|      0|                    self.output_positions.query_end = base.positions.query_end;
 1294|      0|                    self.output.push('#');
 1295|      0|                    self.parse_fragment()
 1296|       |                }
 1297|       |                _ => {
 1298|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1299|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1300|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1301|      0|                    self.output_positions.path_end = base.positions.path_end;
 1302|      0|                    self.remove_last_segment();
 1303|      0|                    if self.output.len() > base.positions.scheme_end {
 1304|      0|                        // We have some path or authority, we keep a base '/'
 1305|      0|                        self.output.push('/');
 1306|      0|                    }
 1307|      0|                    self.parse_path()
 1308|       |                }
 1309|       |            }
 1310|       |        } else {
 1311|  4.81k|            self.output_positions.scheme_end = 0;
 1312|  4.81k|            self.input_scheme_end = 0;
 1313|  4.81k|            if self.input.starts_with('/') {
 1314|    507|                self.input.next();
 1315|    507|                self.output.push('/');
 1316|    507|                self.parse_path_or_authority()
 1317|       |            } else {
 1318|  4.30k|                self.output_positions.authority_end = 0;
 1319|  4.30k|                self.parse_path()
 1320|       |            }
 1321|       |        }
 1322|  4.81k|    }
_RNvMs11_Cs6BboDKTheMj_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCs4QHopEsftxz_5oxrdf:
 1342|  63.1k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|   868k|        loop {
 1345|   868k|            let c = self.input.next();
 1346|   868k|            match c {
 1347|       |                Some('@') => {
 1348|    542|                    self.output.push('@');
 1349|    542|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|  61.0k|                    self.input = ParserInput {
 1353|  61.0k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|  61.0k|                        position: self.input_scheme_end + 2,
 1355|  61.0k|                    };
 1356|  61.0k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|  61.0k|                    return self.parse_host();
 1358|       |                }
 1359|   806k|                Some(c) => {
 1360|   806k|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|  63.1k|    }
_RNvMs11_Cs6BboDKTheMj_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCs4QHopEsftxz_5oxrdf:
 1428|  58.6k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|  58.6k|        match c {
 1430|       |            None => {
 1431|  5.72k|                self.output_positions.path_end = self.output.len();
 1432|  5.72k|                self.output_positions.query_end = self.output.len();
 1433|  5.72k|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|  1.06k|                self.output_positions.path_end = self.output.len();
 1437|  1.06k|                self.output.push('?');
 1438|  1.06k|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|    805|                self.output_positions.path_end = self.output.len();
 1442|    805|                self.output_positions.query_end = self.output.len();
 1443|    805|                self.output.push('#');
 1444|    805|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|  51.0k|                self.output.push('/');
 1448|  51.0k|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|  58.6k|    }
_RNvMs11_Cs6BboDKTheMj_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCs4QHopEsftxz_5oxrdf:
 1212|  69.6k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|  69.6k|        match self.input.front() {
 1214|    194|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|  69.4k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|  1.92k|            _ => self.parse_relative(),
 1217|       |        }
 1218|  69.6k|    }
_RNvMs11_Cs6BboDKTheMj_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCs4QHopEsftxz_5oxrdf:
 1252|  64.3k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|  64.3k|        if self.input.starts_with('/') {
 1254|  63.1k|            self.input.next();
 1255|  63.1k|            self.output.push('/');
 1256|  63.1k|            self.parse_authority()
 1257|       |        } else {
 1258|  1.14k|            self.output_positions.authority_end = self.output.len() - 1;
 1259|  1.14k|            self.parse_path()
 1260|       |        }
 1261|  64.3k|    }
_RNvMs11_Cs6BboDKTheMj_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarCs4QHopEsftxz_5oxrdf:
 1523|  3.36M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|  3.36M|        if UNCHECKED || is_url_code_point(c) {
 1525|  3.35M|            self.output.push(c);
 1526|  3.35M|            Ok(())
 1527|  10.3k|        } else if c == '%' {
 1528|  3.99k|            self.read_echar()
 1529|       |        } else {
 1530|  6.37k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|  3.36M|    }
_RNvMs11_Cs6BboDKTheMj_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E33read_url_query_codepoint_or_echarCs4QHopEsftxz_5oxrdf:
 1535|   573k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|   573k|        if UNCHECKED || is_url_query_code_point(c) {
 1537|   571k|            self.output.push(c);
 1538|   571k|            Ok(())
 1539|  2.30k|        } else if c == '%' {
 1540|    718|            self.read_echar()
 1541|       |        } else {
 1542|  1.58k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|   573k|    }
_RNvMs11_Cs6BboDKTheMj_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCs4QHopEsftxz_5oxrdf:
 1187|  69.6k|    fn parse(
 1188|  69.6k|        iri: &'a str,
 1189|  69.6k|        base: Option<IriRef<&'a str>>,
 1190|  69.6k|        output: &'a mut O,
 1191|  69.6k|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|  69.6k|        let mut parser = Self {
 1193|  69.6k|            iri,
 1194|  69.6k|            base,
 1195|  69.6k|            input: ParserInput {
 1196|  69.6k|                value: iri.chars(),
 1197|  69.6k|                position: 0,
 1198|  69.6k|            },
 1199|  69.6k|            output,
 1200|  69.6k|            output_positions: IriElementsPositions {
 1201|  69.6k|                scheme_end: 0,
 1202|  69.6k|                authority_end: 0,
 1203|  69.6k|                path_end: 0,
 1204|  69.6k|                query_end: 0,
 1205|  69.6k|            },
 1206|  69.6k|            input_scheme_end: 0,
 1207|  69.6k|        };
 1208|  69.6k|        parser.parse_scheme_start()?;
 1209|  56.0k|        Ok(parser.output_positions)
 1210|  69.6k|    }
_RNvMsp_Cs6BboDKTheMj_5oxiriINtB5_3IriNtNtCs99O0fDgeGot_5alloc6string6StringE10into_innerCs4QHopEsftxz_5oxrdf:
  678|  55.1k|    pub fn into_inner(self) -> T {
  679|  55.1k|        self.0.into_inner()
  680|  55.1k|    }
_RNvMsp_Cs6BboDKTheMj_5oxiriINtB5_3IriNtNtCs99O0fDgeGot_5alloc6string6StringE5parseCs4QHopEsftxz_5oxrdf:
  562|  69.6k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  563|  69.6k|        IriRef::parse(iri)?.try_into()
  564|  69.6k|    }
_RNvXsV_Cs6BboDKTheMj_5oxiriINtB5_3IriNtNtCs99O0fDgeGot_5alloc6string6StringEINtNtCsiOGkCewTsZJ_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCs4QHopEsftxz_5oxrdf:
  981|  56.0k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  982|  56.0k|        if iri.is_absolute() {
  983|  55.1k|            Ok(Self(iri))
  984|       |        } else {
  985|    844|            Err(IriParseError {
  986|    844|                kind: IriParseErrorKind::NoScheme,
  987|    844|            })
  988|       |        }
  989|  56.0k|    }
_RNvCs6BboDKTheMj_5oxiri17is_url_code_pointCs4QHopEsftxz_5oxrdf:
 1573|  3.94M|fn is_url_code_point(c: char) -> bool {
 1574|  3.94M|    matches!(c,
 1575|  2.29M|        'a'..='z'
 1576|   497k|        | 'A'..='Z'
 1577|   838k|        | '0'..='9'
 1578|       |        | '!'
 1579|       |        | '$'
 1580|       |        | '&'
 1581|       |        | '\''
 1582|       |        | '('
 1583|       |        | ')'
 1584|       |        | '*'
 1585|       |        | '+'
 1586|       |        | ','
 1587|       |        | '-'
 1588|       |        | '.'
 1589|       |        | '/'
 1590|       |        | ':'
 1591|       |        | ';'
 1592|       |        | '='
 1593|       |        | '?'
 1594|       |        | '@'
 1595|       |        | '_'
 1596|       |        | '~'
 1597|  30.9k|        | '\u{A0}'..='\u{D7FF}'
 1598|  13.0k|        | '\u{F900}'..='\u{FDCF}'
 1599|  13.0k|        | '\u{FDF0}'..='\u{FFEF}'
 1600|  5.59k|        | '\u{10000}'..='\u{1FFFD}'
 1601|    660|        | '\u{20000}'..='\u{2FFFD}'
 1602|    658|        | '\u{30000}'..='\u{3FFFD}'
 1603|    658|        | '\u{40000}'..='\u{4FFFD}'
 1604|    658|        | '\u{50000}'..='\u{5FFFD}'
 1605|    651|        | '\u{60000}'..='\u{6FFFD}'
 1606|    651|        | '\u{70000}'..='\u{7FFFD}'
 1607|    651|        | '\u{80000}'..='\u{8FFFD}'
 1608|    651|        | '\u{90000}'..='\u{9FFFD}'
 1609|    651|        | '\u{A0000}'..='\u{AFFFD}'
 1610|      0|        | '\u{B0000}'..='\u{BFFFD}'
 1611|      0|        | '\u{C0000}'..='\u{CFFFD}'
 1612|      0|        | '\u{D0000}'..='\u{DFFFD}'
 1613|      0|        | '\u{E1000}'..='\u{EFFFD}'
 1614|       |    )
 1615|  3.94M|}
_RNvCs6BboDKTheMj_5oxiri23is_url_query_code_pointCs4QHopEsftxz_5oxrdf:
 1618|   573k|fn is_url_query_code_point(c: char) -> bool {
 1619|   573k|    is_url_code_point(c)
 1620|  2.36k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1621|   573k|}
_RNvMs10_Cs6BboDKTheMj_5oxiriNtB6_11ParserInput11starts_withCs4QHopEsftxz_5oxrdf:
 1169|   195k|    fn starts_with(&self, c: char) -> bool {
 1170|   195k|        self.value.as_str().starts_with(c)
 1171|   195k|    }
_RNvMs10_Cs6BboDKTheMj_5oxiriNtB6_11ParserInput4nextCs4QHopEsftxz_5oxrdf:
 1154|  4.92M|    fn next(&mut self) -> Option<char> {
 1155|  4.92M|        if let Some(head) = self.value.next() {
 1156|  4.86M|            self.position += head.len_utf8();
 1157|  4.86M|            Some(head)
 1158|       |        } else {
 1159|  63.5k|            None
 1160|       |        }
 1161|  4.92M|    }
_RNvMs10_Cs6BboDKTheMj_5oxiriNtB6_11ParserInput5frontCs4QHopEsftxz_5oxrdf:
 1164|  69.6k|    fn front(&self) -> Option<char> {
 1165|  69.6k|        self.value.clone().next()
 1166|  69.6k|    }
_RNvXs1b_Cs6BboDKTheMj_5oxiriNtB6_16VoidOutputBufferNtNtCsiOGkCewTsZJ_4core7default7Default7defaultCs4QHopEsftxz_5oxrdf:
 1078|  69.6k|#[derive(Default)]
_RNvXsY_Cs6BboDKTheMj_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCs4QHopEsftxz_5oxrdf:
 1105|   241k|    fn len(&self) -> usize {
 1106|   241k|        self.len
 1107|   241k|    }
_RNvXsY_Cs6BboDKTheMj_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCs4QHopEsftxz_5oxrdf:
 1085|  4.78M|    fn push(&mut self, c: char) {
 1086|  4.78M|        self.len += c.len_utf8();
 1087|  4.78M|    }
_RNvXsY_Cs6BboDKTheMj_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer5clearCs4QHopEsftxz_5oxrdf:
 1095|  2.89k|    fn clear(&mut self) {
 1096|  2.89k|        self.len = 0;
 1097|  2.89k|    }
_RNvXsY_Cs6BboDKTheMj_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCs4QHopEsftxz_5oxrdf:
 1110|   304k|    fn as_str(&self) -> &str {
 1111|   304k|        ""
 1112|   304k|    }
_RNvXsY_Cs6BboDKTheMj_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCs4QHopEsftxz_5oxrdf:
 1100|  61.0k|    fn truncate(&mut self, new_len: usize) {
 1101|  61.0k|        self.len = new_len;
 1102|  61.0k|    }

_RNvMNtCseEYaiX76wcq_10ppv_lite864softINtB2_2x2INtNtNtNtB4_6x86_644sse24avx212u32x4x2_avx2NtBP_4NoNIENtBN_2G0E3newCs2yNTBgp2ry1_11rand_chacha:
   13|   229k|    pub fn new(xs: [W; 2]) -> Self {
   14|   229k|        x2(xs, PhantomData)
   15|   229k|    }
_RNvXsG_NtCseEYaiX76wcq_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCsiOGkCewTsZJ_4core3ops3bit6BitXor6bitxorCs2yNTBgp2ry1_11rand_chacha:
   22|  80.5k|            fn $fn(self, rhs: Self) -> Self::Output {
   23|  80.5k|                x2::new([self.0[0].$fn(rhs.0[0]), self.0[1].$fn(rhs.0[1])])
   24|  80.5k|            }
_RNvXsM_NtCseEYaiX76wcq_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCsiOGkCewTsZJ_4core3ops5arith9AddAssign10add_assignCs2yNTBgp2ry1_11rand_chacha:
   32|  80.5k|            fn $fn_assign(&mut self, rhs: Self) {
   33|  80.5k|                (self.0[0]).$fn_assign(rhs.0[0]);
   34|  80.5k|                (self.0[1]).$fn_assign(rhs.0[1]);
   35|  80.5k|            }
_RNvXs_NtCseEYaiX76wcq_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right16Cs2yNTBgp2ry1_11rand_chacha:
   42|  20.1k|        fn $fn(self) -> Self {
   43|  20.1k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  20.1k|        }
_RNvXs_NtCseEYaiX76wcq_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right20Cs2yNTBgp2ry1_11rand_chacha:
   42|  20.1k|        fn $fn(self) -> Self {
   43|  20.1k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  20.1k|        }
_RNvXs_NtCseEYaiX76wcq_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right24Cs2yNTBgp2ry1_11rand_chacha:
   42|  20.1k|        fn $fn(self) -> Self {
   43|  20.1k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  20.1k|        }
_RNvXs_NtCseEYaiX76wcq_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right25Cs2yNTBgp2ry1_11rand_chacha:
   42|  20.1k|        fn $fn(self) -> Self {
   43|  20.1k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  20.1k|        }
_RNvXsg_NtCseEYaiX76wcq_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words1230Cs2yNTBgp2ry1_11rand_chacha:
  208|  20.1k|    fn shuffle_lane_words1230(self) -> Self {
  209|  20.1k|        Self::new([
  210|  20.1k|            self.0[0].shuffle_lane_words1230(),
  211|  20.1k|            self.0[1].shuffle_lane_words1230(),
  212|  20.1k|        ])
  213|  20.1k|    }
_RNvXsg_NtCseEYaiX76wcq_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words2301Cs2yNTBgp2ry1_11rand_chacha:
  201|  20.1k|    fn shuffle_lane_words2301(self) -> Self {
  202|  20.1k|        Self::new([
  203|  20.1k|            self.0[0].shuffle_lane_words2301(),
  204|  20.1k|            self.0[1].shuffle_lane_words2301(),
  205|  20.1k|        ])
  206|  20.1k|    }
_RNvXsg_NtCseEYaiX76wcq_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words3012Cs2yNTBgp2ry1_11rand_chacha:
  215|  20.1k|    fn shuffle_lane_words3012(self) -> Self {
  216|  20.1k|        Self::new([
  217|  20.1k|            self.0[0].shuffle_lane_words3012(),
  218|  20.1k|            self.0[1].shuffle_lane_words3012(),
  219|  20.1k|        ])
  220|  20.1k|    }

_RINvYINtNtCseEYaiX76wcq_10ppv_lite866x86_6410SseMachineNtB6_5YesS3NtB6_5YesS4NtB6_4NoNIENtNtB8_5types7Machine7read_leINtNtB6_4sse210u32x4_sse2BR_B12_B1d_EECs2yNTBgp2ry1_11rand_chacha:
  259|     14|    fn read_le<V>(self, input: &[u8]) -> V
  260|     14|    where
  261|     14|        V: StoreBytes,
  262|     14|    {
  263|     14|        unsafe { V::unsafe_read_le(input) }
  264|     14|    }
_RINvYINtNtCseEYaiX76wcq_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine3vecINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EAmj4_ECs2yNTBgp2ry1_11rand_chacha:
  251|  1.67k|    fn vec<V, A>(self, a: A) -> V
  252|  1.67k|    where
  253|  1.67k|        V: MultiLane<A>,
  254|  1.67k|    {
  255|  1.67k|        V::from_lanes(a)
  256|  1.67k|    }
_RINvYINtNtCseEYaiX76wcq_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec128_storageINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EECs2yNTBgp2ry1_11rand_chacha:
  246|  15.1k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|  15.1k|        unsafe { V::unpack(s) }
  248|  15.1k|    }
_RINvYINtNtCseEYaiX76wcq_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec512_storageINtNtB8_4soft2x2INtNtNtB6_4sse24avx212u32x4x2_avx2BS_ENtB2b_2G0EECs2yNTBgp2ry1_11rand_chacha:
  246|  1.67k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|  1.67k|        unsafe { V::unpack(s) }
  248|  1.67k|    }

_RNvXNtCseEYaiX76wcq_10ppv_lite866x86_64INtB2_10SseMachineNtB2_5YesS3NtB2_5YesS4NtB2_4NoNIENtNtB4_5types7Machine8instanceCs2yNTBgp2ry1_11rand_chacha:
   64|      7|    unsafe fn instance() -> Self {
   65|      7|        SseMachine(PhantomData)
   66|      7|    }
_RNvXs_NtCseEYaiX76wcq_10ppv_lite866x86_64INtB4_11Avx2MachineNtB4_4NoNIENtNtB6_5types7Machine8instanceCs2yNTBgp2ry1_11rand_chacha:
   92|  1.67k|    unsafe fn instance() -> Self {
   93|  1.67k|        Avx2Machine(PhantomData)
   94|  1.67k|    }
_RNvNtCs2yNTBgp2ry1_11rand_chacha4guts11refill_wide:
  250|  1.67k|        $($pub$(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  251|  1.67k|            #[inline(always)]
  252|  1.67k|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  253|  1.67k|            use std::arch::x86_64::*;
  254|  1.67k|            #[target_feature(enable = "avx2")]
  255|  1.67k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  1.67k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  1.67k|                _mm256_zeroupper();
  258|  1.67k|                ret
  259|  1.67k|            }
  260|  1.67k|            #[target_feature(enable = "avx")]
  261|  1.67k|            #[target_feature(enable = "sse4.1")]
  262|  1.67k|            #[target_feature(enable = "ssse3")]
  263|  1.67k|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  264|  1.67k|                let ret = fn_impl($crate::x86_64::AVX::instance(), $($arg),*);
  265|  1.67k|                _mm256_zeroupper();
  266|  1.67k|                ret
  267|  1.67k|            }
  268|  1.67k|            #[target_feature(enable = "sse4.1")]
  269|  1.67k|            #[target_feature(enable = "ssse3")]
  270|  1.67k|            unsafe fn impl_sse41($($arg: $argty),*) -> $ret {
  271|  1.67k|                fn_impl($crate::x86_64::SSE41::instance(), $($arg),*)
  272|  1.67k|            }
  273|  1.67k|            #[target_feature(enable = "ssse3")]
  274|  1.67k|            unsafe fn impl_ssse3($($arg: $argty),*) -> $ret {
  275|  1.67k|                fn_impl($crate::x86_64::SSSE3::instance(), $($arg),*)
  276|  1.67k|            }
  277|  1.67k|            #[target_feature(enable = "sse2")]
  278|  1.67k|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  279|  1.67k|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  280|  1.67k|            }
  281|  1.67k|            unsafe {
  282|  1.67k|                if is_x86_feature_detected!("avx2") {
  283|  1.67k|                    impl_avx2($($arg),*)
  284|      0|                } else if is_x86_feature_detected!("avx") {
  285|      0|                    impl_avx($($arg),*)
  286|      0|                } else if is_x86_feature_detected!("sse4.1") {
  287|      0|                    impl_sse41($($arg),*)
  288|      0|                } else if is_x86_feature_detected!("ssse3") {
  289|      0|                    impl_ssse3($($arg),*)
  290|      0|                } else if is_x86_feature_detected!("sse2") {
  291|      0|                    impl_sse2($($arg),*)
  292|       |                } else {
  293|      0|                    unimplemented!()
  294|       |                }
  295|       |            }
  296|  1.67k|        }
_RNvNvNtCs2yNTBgp2ry1_11rand_chacha4guts11refill_wide9impl_avx2:
  255|  1.67k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  1.67k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  1.67k|                _mm256_zeroupper();
  258|  1.67k|                ret
  259|  1.67k|            }
_RNvNtCs2yNTBgp2ry1_11rand_chacha4guts11init_chacha:
  333|      7|        $($pub $(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  334|      7|            #[inline(always)]
  335|      7|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  336|      7|            use std::arch::x86_64::*;
  337|      7|            #[target_feature(enable = "avx")]
  338|      7|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|      7|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|      7|            }
  341|      7|            #[target_feature(enable = "sse2")]
  342|      7|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  343|      7|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  344|      7|            }
  345|      7|            unsafe {
  346|      7|                if is_x86_feature_detected!("avx") {
  347|      7|                    impl_avx($($arg),*)
  348|      0|                } else if is_x86_feature_detected!("sse2") {
  349|      0|                    impl_sse2($($arg),*)
  350|       |                } else {
  351|      0|                    unimplemented!()
  352|       |                }
  353|       |            }
  354|      7|        }
_RNvNvNtCs2yNTBgp2ry1_11rand_chacha4guts11init_chacha8impl_avx:
  338|      7|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|      7|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|      7|            }
_RNvXs2_NtCseEYaiX76wcq_10ppv_lite866x86_64NtB5_14vec128_storageINtNtCsiOGkCewTsZJ_4core7convert4FromAmj4_E4from:
  130|      7|    fn from(u32x4: [u32; 4]) -> Self {
  131|      7|        vec128_storage { u32x4 }
  132|      7|    }

_RNvMNtNtNtCseEYaiX76wcq_10ppv_lite866x86_644sse24avx2INtB2_12u32x4x2_avx2NtB6_4NoNIE3newCs2yNTBgp2ry1_11rand_chacha:
 1394|   620k|        fn new(x: __m256i) -> Self {
 1395|   620k|            Self { x, ni: PhantomData }
 1396|   620k|        }
_RNvMsZ_NtNtCseEYaiX76wcq_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIE3newCs2yNTBgp2ry1_11rand_chacha:
   64|  93.9k|            fn new(x: __m128i) -> Self {
   65|  93.9k|                $vec {
   66|  93.9k|                    x,
   67|  93.9k|                    s3: PhantomData,
   68|  93.9k|                    s4: PhantomData,
   69|  93.9k|                    ni: PhantomData,
   70|  93.9k|                }
   71|  93.9k|            }
_RNvXs0_NtNtNtCseEYaiX76wcq_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types5StoreNtB9_14vec256_storageE6unpackCs2yNTBgp2ry1_11rand_chacha:
 1402|  3.35k|        unsafe fn unpack(p: vec256_storage) -> Self {
 1403|  3.35k|            Self::new(p.avx)
 1404|  3.35k|        }
_RNvXs10_NtNtCseEYaiX76wcq_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes14unsafe_read_leCs2yNTBgp2ry1_11rand_chacha:
   79|     14|            unsafe fn unsafe_read_le(input: &[u8]) -> Self {
   80|     14|                assert_eq!(input.len(), 16);
   81|     14|                Self::new(_mm_loadu_si128(input.as_ptr() as *const _))
   82|     14|            }
_RNvXs10_NtNtCseEYaiX76wcq_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes8write_leCs2yNTBgp2ry1_11rand_chacha:
   89|  26.8k|            fn write_le(self, out: &mut [u8]) {
   90|  26.8k|                assert_eq!(out.len(), 16);
   91|  26.8k|                unsafe { _mm_storeu_si128(out.as_mut_ptr() as *mut _, self.x) }
   92|  26.8k|            }
_RNvXs1R_NtNtCseEYaiX76wcq_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtNtCsiOGkCewTsZJ_4core3ops5arith3Add3addCs2yNTBgp2ry1_11rand_chacha:
   18|  26.8k|            fn $fn(self, rhs: Self) -> Self::Output {
   19|  26.8k|                Self::new(unsafe { $impl_fn(self.x, rhs.x) })
   20|  26.8k|            }
_RNvXs2_NtNtNtCseEYaiX76wcq_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E10from_lanesCs2yNTBgp2ry1_11rand_chacha:
 1439|  13.4k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 2]) -> Self {
 1440|  13.4k|            Self::new(unsafe { _mm256_setr_m128i(x[0].x, x[1].x) })
 1441|  13.4k|        }
_RNvXs2_NtNtNtCseEYaiX76wcq_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E8to_lanesCs2yNTBgp2ry1_11rand_chacha:
 1430|  13.4k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 2] {
 1431|  13.4k|            unsafe {
 1432|  13.4k|                [
 1433|  13.4k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 0)),
 1434|  13.4k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 1)),
 1435|  13.4k|                ]
 1436|  13.4k|            }
 1437|  13.4k|        }
_RNvXs6_NtNtCseEYaiX76wcq_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E10from_lanesCs2yNTBgp2ry1_11rand_chacha:
  331|  1.67k|    fn from_lanes(xs: [u32; 4]) -> Self {
  332|  1.67k|        unsafe {
  333|  1.67k|            let mut x = _mm_cvtsi64_si128((xs[0] as u64 | ((xs[1] as u64) << 32)) as i64);
  334|  1.67k|            x = _mm_insert_epi64(x, (xs[2] as u64 | ((xs[3] as u64) << 32)) as i64, 1);
  335|  1.67k|            Self::new(x)
  336|  1.67k|        }
  337|  1.67k|    }
_RNvXs6_NtNtCseEYaiX76wcq_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E8to_lanesCs2yNTBgp2ry1_11rand_chacha:
  323|  6.71k|    fn to_lanes(self) -> [u32; 4] {
  324|  6.71k|        unsafe {
  325|  6.71k|            let x = _mm_cvtsi128_si64(self.x) as u64;
  326|  6.71k|            let y = _mm_extract_epi64(self.x, 1) as u64;
  327|  6.71k|            [x as u32, (x >> 32) as u32, y as u32, (y >> 32) as u32]
  328|  6.71k|        }
  329|  6.71k|    }
_RNvXs6_NtNtNtCseEYaiX76wcq_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right16Cs2yNTBgp2ry1_11rand_chacha:
 1470|  40.2k|            fn $name(self) -> Self {
 1471|  40.2k|                Self::new(unsafe {
 1472|  40.2k|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|  40.2k|                })
 1474|  40.2k|            }
_RNvXs6_NtNtNtCseEYaiX76wcq_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right20Cs2yNTBgp2ry1_11rand_chacha:
 1480|  40.2k|            fn $name(self) -> Self {
 1481|  40.2k|                Self::new(unsafe {
 1482|  40.2k|                    _mm256_or_si256(
 1483|  40.2k|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|  40.2k|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|  40.2k|                    )
 1486|  40.2k|                })
 1487|  40.2k|            }
_RNvXs6_NtNtNtCseEYaiX76wcq_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right24Cs2yNTBgp2ry1_11rand_chacha:
 1470|  40.2k|            fn $name(self) -> Self {
 1471|  40.2k|                Self::new(unsafe {
 1472|  40.2k|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|  40.2k|                })
 1474|  40.2k|            }
_RNvXs6_NtNtNtCseEYaiX76wcq_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right25Cs2yNTBgp2ry1_11rand_chacha:
 1480|  40.2k|            fn $name(self) -> Self {
 1481|  40.2k|                Self::new(unsafe {
 1482|  40.2k|                    _mm256_or_si256(
 1483|  40.2k|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|  40.2k|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|  40.2k|                    )
 1486|  40.2k|                })
 1487|  40.2k|            }
_RNvXsX_NtNtCseEYaiX76wcq_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types5StoreNtB7_14vec128_storageE6unpackCs2yNTBgp2ry1_11rand_chacha:
   52|  15.1k|            unsafe fn unpack(x: vec128_storage) -> Self {
   53|  15.1k|                Self::new(x.sse2)
   54|  15.1k|            }
_RNvXsc_NtNtNtCseEYaiX76wcq_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words1230Cs2yNTBgp2ry1_11rand_chacha:
 1582|  40.2k|        fn shuffle_lane_words1230(self) -> Self {
 1583|  40.2k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b1001_0011) })
 1584|  40.2k|        }
_RNvXsc_NtNtNtCseEYaiX76wcq_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words2301Cs2yNTBgp2ry1_11rand_chacha:
 1586|  40.2k|        fn shuffle_lane_words2301(self) -> Self {
 1587|  40.2k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0100_1110) })
 1588|  40.2k|        }
_RNvXsc_NtNtNtCseEYaiX76wcq_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words3012Cs2yNTBgp2ry1_11rand_chacha:
 1590|  40.2k|        fn shuffle_lane_words3012(self) -> Self {
 1591|  40.2k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0011_1001) })
 1592|  40.2k|        }
_RNvXse_NtNtNtCseEYaiX76wcq_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types5StoreNtB9_14vec512_storageE6unpackCs2yNTBgp2ry1_11rand_chacha:
 1602|  1.67k|        unsafe fn unpack(p: vec512_storage) -> Self {
 1603|  1.67k|            Self::new([
 1604|  1.67k|                u32x4x2_avx2::unpack(p.avx[0]),
 1605|  1.67k|                u32x4x2_avx2::unpack(p.avx[1]),
 1606|  1.67k|            ])
 1607|  1.67k|        }
_RNvXsf_NtNtNtCseEYaiX76wcq_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E10from_lanesCs2yNTBgp2ry1_11rand_chacha:
 1617|  6.71k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 4]) -> Self {
 1618|  6.71k|            let ab = u32x4x2_avx2::from_lanes([x[0], x[1]]);
 1619|  6.71k|            let cd = u32x4x2_avx2::from_lanes([x[2], x[3]]);
 1620|  6.71k|            Self::new([ab, cd])
 1621|  6.71k|        }
_RNvXsf_NtNtNtCseEYaiX76wcq_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E8to_lanesCs2yNTBgp2ry1_11rand_chacha:
 1611|  6.71k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 4] {
 1612|  6.71k|            let [a, b] = self.0[0].to_lanes();
 1613|  6.71k|            let [c, d] = self.0[1].to_lanes();
 1614|  6.71k|            [a, b, c, d]
 1615|  6.71k|        }
_RNvXsl_NtNtCseEYaiX76wcq_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE6insertCs2yNTBgp2ry1_11rand_chacha:
  523|  23.4k|    fn insert(self, v: u32, i: u32) -> Self {
  524|  23.4k|        Self::new(unsafe {
  525|  23.4k|            match i {
  526|  11.7k|                0 => _mm_insert_epi32(self.x, v as i32, 0),
  527|  11.7k|                1 => _mm_insert_epi32(self.x, v as i32, 1),
  528|      0|                2 => _mm_insert_epi32(self.x, v as i32, 2),
  529|      0|                3 => _mm_insert_epi32(self.x, v as i32, 3),
  530|      0|                _ => unreachable!(),
  531|       |            }
  532|       |        })
  533|  23.4k|    }
_RNvXsl_NtNtCseEYaiX76wcq_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE7extractCs2yNTBgp2ry1_11rand_chacha:
  519|  6.71k|    fn extract(self, i: u32) -> u32 {
  520|  6.71k|        self.to_lanes()[i as usize]
  521|  6.71k|    }
_RNvXsq_NtNtNtCseEYaiX76wcq_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCsiOGkCewTsZJ_4core3ops5arith9AddAssign10add_assignCs2yNTBgp2ry1_11rand_chacha:
 1527|   161k|                fn $assign_fn(&mut self, rhs: Self) {
 1528|   161k|                    *self = self.$bin_fn(rhs);
 1529|   161k|                }
_RNvXsr_NtNtNtCseEYaiX76wcq_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCsiOGkCewTsZJ_4core3ops3bit6BitXor6bitxorCs2yNTBgp2ry1_11rand_chacha:
 1543|   161k|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|   161k|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|   161k|                }
_RNvXsv_NtNtNtCseEYaiX76wcq_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCsiOGkCewTsZJ_4core3ops5arith3Add3addCs2yNTBgp2ry1_11rand_chacha:
 1543|   161k|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|   161k|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|   161k|                }
_RNvXsY_NtNtCseEYaiX76wcq_10ppv_lite866x86_644sse2NtB7_14vec128_storageINtNtCsiOGkCewTsZJ_4core7convert4FromINtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEE4fromCs2yNTBgp2ry1_11rand_chacha:
   58|  1.69k|            fn from(x: $vec<S3, S4, NI>) -> Self {
   59|  1.69k|                vec128_storage { sse2: x.x }
   60|  1.69k|            }
_RNvXsj_NtNtNtCseEYaiX76wcq_10ppv_lite866x86_644sse24avx2NtB9_14vec512_storageINtNtCsiOGkCewTsZJ_4core7convert4FromINtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EE4fromCs2yNTBgp2ry1_11rand_chacha:
 1683|  1.67k|        fn from(x: u32x4x4_avx2<NI>) -> Self {
 1684|  1.67k|            Self {
 1685|  1.67k|                avx: [
 1686|  1.67k|                    vec256_storage { avx: x.0[0].x },
 1687|  1.67k|                    vec256_storage { avx: x.0[1].x },
 1688|  1.67k|                ],
 1689|  1.67k|            }
 1690|  1.67k|        }

_RNvMNtCs57NZtjOlRkW_9quick_xml8encodingNtB2_7Decoder4utf8:
   45|  3.07k|    pub(crate) fn utf8() -> Self {
   46|  3.07k|        Decoder {
   47|  3.07k|            #[cfg(feature = "encoding")]
   48|  3.07k|            encoding: UTF_8,
   49|  3.07k|        }
   50|  3.07k|    }
_RNvMs_NtCs57NZtjOlRkW_9quick_xml8encodingNtB4_7Decoder6decode:
   82|   233k|    pub fn decode<'b>(&self, bytes: &'b [u8]) -> Result<Cow<'b, str>> {
   83|       |        #[cfg(not(feature = "encoding"))]
   84|   233k|        let decoded = Ok(Cow::Borrowed(std::str::from_utf8(bytes)?));
   85|       |
   86|       |        #[cfg(feature = "encoding")]
   87|       |        let decoded = decode(bytes, self.encoding);
   88|       |
   89|   185k|        decoded
   90|   233k|    }

_RNvXs1_NtCs57NZtjOlRkW_9quick_xml6errorsNtB5_5ErrorINtNtCsiOGkCewTsZJ_4core7convert4FromNtNtB7_7escapei11EscapeErrorE4fromCshwa6i4jbVTh_7rdf_xml:
   97|  6.92k|    fn from(error: EscapeError) -> Error {
   98|  6.92k|        Error::EscapeError(error)
   99|  6.92k|    }
_RNvXs_NtCs57NZtjOlRkW_9quick_xml6errorsNtB4_5ErrorINtNtCsiOGkCewTsZJ_4core7convert4FromNtNtNtBR_3str5error9Utf8ErrorE4fromB6_:
   81|  48.6k|    fn from(error: Utf8Error) -> Error {
   82|  48.6k|        Error::NonDecodable(Some(error))
   83|  48.6k|    }
_RNvXs1_NtCs57NZtjOlRkW_9quick_xml6errorsNtB5_5ErrorINtNtCsiOGkCewTsZJ_4core7convert4FromNtNtB7_7escapei11EscapeErrorE4fromB7_:
   97|  9.14k|    fn from(error: EscapeError) -> Error {
   98|  9.14k|        Error::EscapeError(error)
   99|  9.14k|    }
_RNvXs2_NtCs57NZtjOlRkW_9quick_xml6errorsNtB5_5ErrorINtNtCsiOGkCewTsZJ_4core7convert4FromNtNtNtB7_6events10attributes9AttrErrorE4fromB7_:
  104|    657|    fn from(error: AttrError) -> Self {
  105|    657|        Error::InvalidAttr(error)
  106|    657|    }

_RINvNtCs57NZtjOlRkW_9quick_xml7escapei13unescape_withNCNvMs2_NtCs1ICs2Somm0b_8oxrdfxml6parserINtBX_12RdfXmlReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE15resolve_ns_name0ECshwa6i4jbVTh_7rdf_xml:
  162|  99.6k|pub fn unescape_with<'input, 'entity, F>(
  163|  99.6k|    raw: &'input str,
  164|  99.6k|    mut resolve_entity: F,
  165|  99.6k|) -> Result<Cow<'input, str>, EscapeError>
  166|  99.6k|where
  167|  99.6k|    // the lifetime of the output comes from a capture or is `'static`
  168|  99.6k|    F: FnMut(&str) -> Option<&'entity str>,
  169|  99.6k|{
  170|  99.6k|    let bytes = raw.as_bytes();
  171|  99.6k|    let mut unescaped = None;
  172|  99.6k|    let mut last_end = 0;
  173|  99.6k|    let mut iter = memchr2_iter(b'&', b';', bytes);
  174|   109k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
  175|  16.7k|        match iter.next() {
  176|  15.9k|            Some(end) if bytes[end] == b';' => {
  177|  15.7k|                // append valid data
  178|  15.7k|                if unescaped.is_none() {
  179|  11.1k|                    unescaped = Some(String::with_capacity(raw.len()));
  180|  11.1k|                }
  181|  15.7k|                let unescaped = unescaped.as_mut().expect("initialized");
  182|  15.7k|                unescaped.push_str(&raw[last_end..start]);
  183|  15.7k|
  184|  15.7k|                // search for character correctness
  185|  15.7k|                let pat = &raw[start + 1..end];
  186|  15.7k|                if let Some(entity) = pat.strip_prefix('#') {
  187|  10.0k|                    let codepoint = parse_number(entity, start..end)?;
  188|  7.31k|                    unescaped.push_str(codepoint.encode_utf8(&mut [0u8; 4]));
  189|  5.74k|                } else if let Some(value) = named_entity(pat) {
  190|  2.56k|                    unescaped.push_str(value);
  191|  3.18k|                } else if let Some(value) = resolve_entity(pat) {
  192|      0|                    unescaped.push_str(value);
  193|      0|                } else {
  194|  3.18k|                    return Err(EscapeError::UnrecognizedSymbol(
  195|  3.18k|                        start + 1..end,
  196|  3.18k|                        pat.to_string(),
  197|  3.18k|                    ));
  198|       |                }
  199|       |
  200|  9.87k|                last_end = end + 1;
  201|       |            }
  202|  1.03k|            _ => return Err(EscapeError::UnterminatedEntity(start..raw.len())),
  203|       |        }
  204|       |    }
  205|       |
  206|  92.7k|    if let Some(mut unescaped) = unescaped {
  207|  5.14k|        if let Some(raw) = raw.get(last_end..) {
  208|  5.14k|            unescaped.push_str(raw);
  209|  5.14k|        }
  210|  5.14k|        Ok(Cow::Owned(unescaped))
  211|       |    } else {
  212|  87.5k|        Ok(Cow::Borrowed(raw))
  213|       |    }
  214|  99.6k|}
_RINvNtCs57NZtjOlRkW_9quick_xml7escapei13unescape_withNCNvMs2_NtCs1ICs2Somm0b_8oxrdfxml6parserINtBX_12RdfXmlReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE16parse_text_event0ECshwa6i4jbVTh_7rdf_xml:
  162|  62.2k|pub fn unescape_with<'input, 'entity, F>(
  163|  62.2k|    raw: &'input str,
  164|  62.2k|    mut resolve_entity: F,
  165|  62.2k|) -> Result<Cow<'input, str>, EscapeError>
  166|  62.2k|where
  167|  62.2k|    // the lifetime of the output comes from a capture or is `'static`
  168|  62.2k|    F: FnMut(&str) -> Option<&'entity str>,
  169|  62.2k|{
  170|  62.2k|    let bytes = raw.as_bytes();
  171|  62.2k|    let mut unescaped = None;
  172|  62.2k|    let mut last_end = 0;
  173|  62.2k|    let mut iter = memchr2_iter(b'&', b';', bytes);
  174|  72.2k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
  175|  19.1k|        match iter.next() {
  176|  14.7k|            Some(end) if bytes[end] == b';' => {
  177|  11.9k|                // append valid data
  178|  11.9k|                if unescaped.is_none() {
  179|  2.58k|                    unescaped = Some(String::with_capacity(raw.len()));
  180|  9.31k|                }
  181|  11.9k|                let unescaped = unescaped.as_mut().expect("initialized");
  182|  11.9k|                unescaped.push_str(&raw[last_end..start]);
  183|  11.9k|
  184|  11.9k|                // search for character correctness
  185|  11.9k|                let pat = &raw[start + 1..end];
  186|  11.9k|                if let Some(entity) = pat.strip_prefix('#') {
  187|  1.02k|                    let codepoint = parse_number(entity, start..end)?;
  188|    607|                    unescaped.push_str(codepoint.encode_utf8(&mut [0u8; 4]));
  189|  10.8k|                } else if let Some(value) = named_entity(pat) {
  190|  9.40k|                    unescaped.push_str(value);
  191|  9.40k|                } else if let Some(value) = resolve_entity(pat) {
  192|      0|                    unescaped.push_str(value);
  193|      0|                } else {
  194|  1.47k|                    return Err(EscapeError::UnrecognizedSymbol(
  195|  1.47k|                        start + 1..end,
  196|  1.47k|                        pat.to_string(),
  197|  1.47k|                    ));
  198|       |                }
  199|       |
  200|  10.0k|                last_end = end + 1;
  201|       |            }
  202|  7.25k|            _ => return Err(EscapeError::UnterminatedEntity(start..raw.len())),
  203|       |        }
  204|       |    }
  205|       |
  206|  53.1k|    if let Some(mut unescaped) = unescaped {
  207|    691|        if let Some(raw) = raw.get(last_end..) {
  208|    691|            unescaped.push_str(raw);
  209|    691|        }
  210|    691|        Ok(Cow::Owned(unescaped))
  211|       |    } else {
  212|  52.4k|        Ok(Cow::Borrowed(raw))
  213|       |    }
  214|  62.2k|}
_RINvNtCs57NZtjOlRkW_9quick_xml7escapei13unescape_withNCNvMs2_NtCs1ICs2Somm0b_8oxrdfxml6parserINtBX_12RdfXmlReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE17convert_attribute0ECshwa6i4jbVTh_7rdf_xml:
  162|  22.0k|pub fn unescape_with<'input, 'entity, F>(
  163|  22.0k|    raw: &'input str,
  164|  22.0k|    mut resolve_entity: F,
  165|  22.0k|) -> Result<Cow<'input, str>, EscapeError>
  166|  22.0k|where
  167|  22.0k|    // the lifetime of the output comes from a capture or is `'static`
  168|  22.0k|    F: FnMut(&str) -> Option<&'entity str>,
  169|  22.0k|{
  170|  22.0k|    let bytes = raw.as_bytes();
  171|  22.0k|    let mut unescaped = None;
  172|  22.0k|    let mut last_end = 0;
  173|  22.0k|    let mut iter = memchr2_iter(b'&', b';', bytes);
  174|  41.5k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
  175|  19.5k|        match iter.next() {
  176|  19.5k|            Some(end) if bytes[end] == b';' => {
  177|  19.5k|                // append valid data
  178|  19.5k|                if unescaped.is_none() {
  179|  2.24k|                    unescaped = Some(String::with_capacity(raw.len()));
  180|  17.3k|                }
  181|  19.5k|                let unescaped = unescaped.as_mut().expect("initialized");
  182|  19.5k|                unescaped.push_str(&raw[last_end..start]);
  183|  19.5k|
  184|  19.5k|                // search for character correctness
  185|  19.5k|                let pat = &raw[start + 1..end];
  186|  19.5k|                if let Some(entity) = pat.strip_prefix('#') {
  187|      0|                    let codepoint = parse_number(entity, start..end)?;
  188|      0|                    unescaped.push_str(codepoint.encode_utf8(&mut [0u8; 4]));
  189|  19.5k|                } else if let Some(value) = named_entity(pat) {
  190|  19.5k|                    unescaped.push_str(value);
  191|  19.5k|                } else if let Some(value) = resolve_entity(pat) {
  192|      0|                    unescaped.push_str(value);
  193|      0|                } else {
  194|      0|                    return Err(EscapeError::UnrecognizedSymbol(
  195|      0|                        start + 1..end,
  196|      0|                        pat.to_string(),
  197|      0|                    ));
  198|       |                }
  199|       |
  200|  19.5k|                last_end = end + 1;
  201|       |            }
  202|      0|            _ => return Err(EscapeError::UnterminatedEntity(start..raw.len())),
  203|       |        }
  204|       |    }
  205|       |
  206|  22.0k|    if let Some(mut unescaped) = unescaped {
  207|  2.24k|        if let Some(raw) = raw.get(last_end..) {
  208|  2.24k|            unescaped.push_str(raw);
  209|  2.24k|        }
  210|  2.24k|        Ok(Cow::Owned(unescaped))
  211|       |    } else {
  212|  19.7k|        Ok(Cow::Borrowed(raw))
  213|       |    }
  214|  22.0k|}
_RNCINvNtCs57NZtjOlRkW_9quick_xml7escapei13unescape_withNCNvMs2_NtCs1ICs2Somm0b_8oxrdfxml6parserINtBZ_12RdfXmlReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE15resolve_ns_name0E0Cshwa6i4jbVTh_7rdf_xml:
  174|  30.7k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
_RNCINvNtCs57NZtjOlRkW_9quick_xml7escapei13unescape_withNCNvMs2_NtCs1ICs2Somm0b_8oxrdfxml6parserINtBZ_12RdfXmlReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE16parse_text_event0E0Cshwa6i4jbVTh_7rdf_xml:
  174|  21.0k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
_RNCINvNtCs57NZtjOlRkW_9quick_xml7escapei13unescape_withNCNvMs2_NtCs1ICs2Somm0b_8oxrdfxml6parserINtBZ_12RdfXmlReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE17convert_attribute0E0Cshwa6i4jbVTh_7rdf_xml:
  174|  22.4k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
_RNvNtCs57NZtjOlRkW_9quick_xml7escapei6escape:
   74|  31.6k|pub fn escape(raw: &str) -> Cow<str> {
   75|  31.6k|    _escape(raw, |ch| matches!(ch, b'<' | b'>' | b'&' | b'\'' | b'\"'))
   76|  31.6k|}
_RNCNvNtCs57NZtjOlRkW_9quick_xml7escapei6escape0B5_:
   75|  1.42M|    _escape(raw, |ch| matches!(ch, b'<' | b'>' | b'&' | b'\'' | b'\"'))
_RINvNtCs57NZtjOlRkW_9quick_xml7escapei7__escapeNCNvB2_6escape0EB4_:
   97|  31.6k|pub(crate) fn _escape<F: Fn(u8) -> bool>(raw: &str, escape_chars: F) -> Cow<str> {
   98|  31.6k|    let bytes = raw.as_bytes();
   99|  31.6k|    let mut escaped = None;
  100|  31.6k|    let mut iter = bytes.iter();
  101|  31.6k|    let mut pos = 0;
  102|  62.6k|    while let Some(i) = iter.position(|&b| escape_chars(b)) {
  103|  30.9k|        if escaped.is_none() {
  104|  2.98k|            escaped = Some(Vec::with_capacity(raw.len()));
  105|  28.0k|        }
  106|  30.9k|        let escaped = escaped.as_mut().expect("initialized");
  107|  30.9k|        let new_pos = pos + i;
  108|  30.9k|        escaped.extend_from_slice(&bytes[pos..new_pos]);
  109|  30.9k|        match bytes[new_pos] {
  110|      0|            b'<' => escaped.extend_from_slice(b"&lt;"),
  111|  6.85k|            b'>' => escaped.extend_from_slice(b"&gt;"),
  112|  21.7k|            b'\'' => escaped.extend_from_slice(b"&apos;"),
  113|    297|            b'&' => escaped.extend_from_slice(b"&amp;"),
  114|  2.08k|            b'"' => escaped.extend_from_slice(b"&quot;"),
  115|       |
  116|       |            // This set of escapes handles characters that should be escaped
  117|       |            // in elements of xs:lists, because those characters works as
  118|       |            // delimiters of list elements
  119|      0|            b'\t' => escaped.extend_from_slice(b"&#9;"),
  120|      0|            b'\n' => escaped.extend_from_slice(b"&#10;"),
  121|      0|            b'\r' => escaped.extend_from_slice(b"&#13;"),
  122|      0|            b' ' => escaped.extend_from_slice(b"&#32;"),
  123|      0|            _ => unreachable!(
  124|      0|                "Only '<', '>','\', '&', '\"', '\\t', '\\r', '\\n', and ' ' are escaped"
  125|      0|            ),
  126|       |        }
  127|  30.9k|        pos = new_pos + 1;
  128|       |    }
  129|       |
  130|  31.6k|    if let Some(mut escaped) = escaped {
  131|  2.98k|        if let Some(raw) = bytes.get(pos..) {
  132|  2.98k|            escaped.extend_from_slice(raw);
  133|  2.98k|        }
  134|       |        // SAFETY: we operate on UTF-8 input and search for an one byte chars only,
  135|       |        // so all slices that was put to the `escaped` is a valid UTF-8 encoded strings
  136|       |        // TODO: Can be replaced with `unsafe { String::from_utf8_unchecked() }`
  137|       |        // if unsafe code will be allowed
  138|  2.98k|        Cow::Owned(String::from_utf8(escaped).unwrap())
  139|       |    } else {
  140|  28.7k|        Cow::Borrowed(raw)
  141|       |    }
  142|  31.6k|}
_RNCINvNtCs57NZtjOlRkW_9quick_xml7escapei7__escapeNCNvB4_6escape0E0B6_:
  102|  1.42M|    while let Some(i) = iter.position(|&b| escape_chars(b)) {
_RNvNtCs57NZtjOlRkW_9quick_xml7escapei12named_entity:
  217|  36.2k|fn named_entity(name: &str) -> Option<&str> {
  218|       |    // match over strings are not allowed in const functions
  219|  36.2k|    let s = match name.as_bytes() {
  220|  36.2k|        b"lt" => "<",
  221|  6.85k|        b"gt" => ">",
  222|  28.0k|        b"amp" => "&",
  223|  26.3k|        b"apos" => "'",
  224|  2.08k|        b"quot" => "\"",
  225|  4.65k|        _ => return None,
  226|       |    };
  227|  31.5k|    Some(s)
  228|  36.2k|}
_RNvNtCs57NZtjOlRkW_9quick_xml7escapei12parse_number:
 1694|  11.0k|fn parse_number(bytes: &str, range: Range<usize>) -> Result<char, EscapeError> {
 1695|  11.0k|    let code = if let Some(hex_digits) = bytes.strip_prefix('x') {
 1696|    934|        parse_hexadecimal(hex_digits)
 1697|       |    } else {
 1698|  10.1k|        parse_decimal(bytes)
 1699|  2.32k|    }?;
 1700|  8.71k|    if code == 0 {
 1701|    595|        return Err(EscapeError::EntityWithNull(range));
 1702|  8.11k|    }
 1703|  8.11k|    match std::char::from_u32(code) {
 1704|  7.91k|        Some(c) => Ok(c),
 1705|    199|        None => Err(EscapeError::InvalidCodepoint(code)),
 1706|       |    }
 1707|  11.0k|}
_RNvNtCs57NZtjOlRkW_9quick_xml7escapei17parse_hexadecimal:
 1709|    934|fn parse_hexadecimal(bytes: &str) -> Result<u32, EscapeError> {
 1710|    934|    // maximum code is 0x10FFFF => 6 characters
 1711|    934|    if bytes.len() > 6 {
 1712|    205|        return Err(EscapeError::TooLongHexadecimal);
 1713|    729|    }
 1714|    729|    let mut code = 0;
 1715|    965|    for b in bytes.bytes() {
 1716|    965|        code <<= 4;
 1717|    965|        code += match b {
 1718|    963|            b'0'..=b'9' => b - b'0',
 1719|    825|            b'a'..=b'f' => b - b'a' + 10,
 1720|    520|            b'A'..=b'F' => b - b'A' + 10,
 1721|    453|            b => return Err(EscapeError::InvalidHexadecimal(b as char)),
 1722|       |        } as u32;
 1723|       |    }
 1724|    276|    Ok(code)
 1725|    934|}
_RNvNtCs57NZtjOlRkW_9quick_xml7escapei13parse_decimal:
 1727|  10.1k|fn parse_decimal(bytes: &str) -> Result<u32, EscapeError> {
 1728|  10.1k|    // maximum code is 0x10FFFF = 1114111 => 7 characters
 1729|  10.1k|    if bytes.len() > 7 {
 1730|    197|        return Err(EscapeError::TooLongDecimal);
 1731|  9.90k|    }
 1732|  9.90k|    let mut code = 0;
 1733|  42.3k|    for b in bytes.bytes() {
 1734|  42.3k|        code *= 10;
 1735|  42.3k|        code += match b {
 1736|  41.5k|            b'0'..=b'9' => b - b'0',
 1737|  1.47k|            b => return Err(EscapeError::InvalidDecimal(b as char)),
 1738|       |        } as u32;
 1739|       |    }
 1740|  8.43k|    Ok(code)
 1741|  10.1k|}

_RINvMNtNtCs57NZtjOlRkW_9quick_xml6events10attributesNtB3_9Attribute30decode_and_unescape_value_withINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShENCNvMs2_NtCs1ICs2Somm0b_8oxrdfxml6parserINtB2I_12RdfXmlReaderB1z_E17convert_attribute0ECshwa6i4jbVTh_7rdf_xml:
   95|  22.0k|    pub fn decode_and_unescape_value_with<'entity, B>(
   96|  22.0k|        &self,
   97|  22.0k|        reader: &Reader<B>,
   98|  22.0k|        resolve_entity: impl FnMut(&str) -> Option<&'entity str>,
   99|  22.0k|    ) -> XmlResult<Cow<'a, str>> {
  100|  22.0k|        let decoded = match &self.value {
  101|  22.0k|            Cow::Borrowed(bytes) => reader.decoder().decode(bytes)?,
  102|       |            // Convert to owned, because otherwise Cow will be bound with wrong lifetime
  103|      0|            Cow::Owned(bytes) => reader.decoder().decode(bytes)?.into_owned().into(),
  104|       |        };
  105|       |
  106|  22.0k|        match unescape_with(&decoded, resolve_entity)? {
  107|       |            // Because result is borrowed, no replacements was done and we can use original string
  108|  19.7k|            Cow::Borrowed(_) => Ok(decoded),
  109|  2.24k|            Cow::Owned(s) => Ok(s.into()),
  110|       |        }
  111|  22.0k|    }
_RNvXs4_NtNtCs57NZtjOlRkW_9quick_xml6events10attributesNtB5_10AttributesNtNtNtNtCsiOGkCewTsZJ_4core4iter6traits8iterator8Iterator4nextCshwa6i4jbVTh_7rdf_xml:
  231|  99.7k|    fn next(&mut self) -> Option<Self::Item> {
  232|  99.7k|        match self.state.next(self.bytes) {
  233|  69.5k|            None => None,
  234|  29.1k|            Some(Ok(a)) => Some(Ok(a.map(|range| &self.bytes[range]).into())),
  235|  1.04k|            Some(Err(e)) => Some(Err(e)),
  236|       |        }
  237|  99.7k|    }
_RNvXs1_NtNtCs57NZtjOlRkW_9quick_xml6events10attributesNtB5_9AttributeINtNtCsiOGkCewTsZJ_4core7convert4FromTReB1H_EE4from:
  158|  28.6k|    fn from(val: (&'a str, &'a str)) -> Attribute<'a> {
  159|  28.6k|        Attribute {
  160|  28.6k|            key: QName(val.0.as_bytes()),
  161|  28.6k|            value: match escape(val.1) {
  162|  26.2k|                Cow::Borrowed(s) => Cow::Borrowed(s.as_bytes()),
  163|  2.41k|                Cow::Owned(s) => Cow::Owned(s.into_bytes()),
  164|       |            },
  165|       |        }
  166|  28.6k|    }
_RNvXs2_NtNtCs57NZtjOlRkW_9quick_xml6events10attributesNtB5_9AttributeINtNtCsiOGkCewTsZJ_4core7convert4FromINtB5_4AttrRShEE4fromB9_:
  171|  69.2k|    fn from(attr: Attr<&'a [u8]>) -> Self {
  172|  69.2k|        Self {
  173|  69.2k|            key: attr.key(),
  174|  69.2k|            value: Cow::Borrowed(attr.value()),
  175|  69.2k|        }
  176|  69.2k|    }
_RNvMs3_NtNtCs57NZtjOlRkW_9quick_xml6events10attributesNtB5_10Attributes4wrapB9_:
  198|   165k|    pub(crate) fn wrap(buf: &'a [u8], pos: usize, html: bool) -> Self {
  199|   165k|        Self {
  200|   165k|            bytes: buf,
  201|   165k|            state: IterState::new(pos, html),
  202|   165k|        }
  203|   165k|    }
_RNvMs3_NtNtCs57NZtjOlRkW_9quick_xml6events10attributesNtB5_10Attributes11with_checks:
  221|  94.2k|    pub fn with_checks(&mut self, val: bool) -> &mut Attributes<'a> {
  222|  94.2k|        self.state.check_duplicates = val;
  223|  94.2k|        self
  224|  94.2k|    }
_RNvXs4_NtNtCs57NZtjOlRkW_9quick_xml6events10attributesNtB5_10AttributesNtNtNtNtCsiOGkCewTsZJ_4core4iter6traits8iterator8Iterator4nextB9_:
  231|   129k|    fn next(&mut self) -> Option<Self::Item> {
  232|   129k|        match self.state.next(self.bytes) {
  233|  83.2k|            None => None,
  234|  40.1k|            Some(Ok(a)) => Some(Ok(a.map(|range| &self.bytes[range]).into())),
  235|  6.18k|            Some(Err(e)) => Some(Err(e)),
  236|       |        }
  237|   129k|    }
_RNCNvXs4_NtNtCs57NZtjOlRkW_9quick_xml6events10attributesNtB7_10AttributesNtNtNtNtCsiOGkCewTsZJ_4core4iter6traits8iterator8Iterator4next0Bb_:
  234|   138k|            Some(Ok(a)) => Some(Ok(a.map(|range| &self.bytes[range]).into())),
_RINvMs8_NtNtCs57NZtjOlRkW_9quick_xml6events10attributesINtB6_4AttrINtNtNtCsiOGkCewTsZJ_4core3ops5range5RangejEE3mapRShNCNvXs4_B6_NtB6_10AttributesNtNtNtNtB19_4iter6traits8iterator8Iterator4next0EBa_:
  403|  69.2k|    pub fn map<U, F>(self, mut f: F) -> Attr<U>
  404|  69.2k|    where
  405|  69.2k|        F: FnMut(T) -> U,
  406|  69.2k|    {
  407|  69.2k|        match self {
  408|  69.1k|            Attr::DoubleQ(key, value) => Attr::DoubleQ(f(key), f(value)),
  409|    124|            Attr::SingleQ(key, value) => Attr::SingleQ(f(key), f(value)),
  410|      0|            Attr::Empty(key) => Attr::Empty(f(key)),
  411|      0|            Attr::Unquoted(key, value) => Attr::Unquoted(f(key), f(value)),
  412|       |        }
  413|  69.2k|    }
_RNvMs9_NtNtCs57NZtjOlRkW_9quick_xml6events10attributesINtB5_4AttrRShE3keyB9_:
  419|  69.2k|    pub fn key(&self) -> QName<'a> {
  420|  69.2k|        QName(match self {
  421|  69.1k|            Attr::DoubleQ(key, _) => key,
  422|    124|            Attr::SingleQ(key, _) => key,
  423|      0|            Attr::Empty(key) => key,
  424|      0|            Attr::Unquoted(key, _) => key,
  425|       |        })
  426|  69.2k|    }
_RNvMs9_NtNtCs57NZtjOlRkW_9quick_xml6events10attributesINtB5_4AttrRShE5valueB9_:
  432|  69.2k|    pub fn value(&self) -> &'a [u8] {
  433|  69.2k|        match self {
  434|  69.1k|            Attr::DoubleQ(_, value) => value,
  435|    124|            Attr::SingleQ(_, value) => value,
  436|      0|            Attr::Empty(_) => &[],
  437|      0|            Attr::Unquoted(_, value) => value,
  438|       |        }
  439|  69.2k|    }
_RNvMsc_NtNtCs57NZtjOlRkW_9quick_xml6events10attributesNtB5_9IterState3new:
  521|   165k|    pub fn new(offset: usize, html: bool) -> Self {
  522|   165k|        Self {
  523|   165k|            state: State::Next(offset),
  524|   165k|            html,
  525|   165k|            check_duplicates: true,
  526|   165k|            keys: Vec::new(),
  527|   165k|        }
  528|   165k|    }
_RNvMsc_NtNtCs57NZtjOlRkW_9quick_xml6events10attributesNtB5_9IterState7recover:
  533|   229k|    fn recover(&self, slice: &[u8]) -> Option<usize> {
  534|   229k|        match self.state {
  535|      0|            State::Done => None,
  536|   229k|            State::Next(offset) => Some(offset),
  537|      0|            State::SkipValue(offset) => self.skip_value(slice, offset),
  538|      0|            State::SkipEqValue(offset) => self.skip_eq_value(slice, offset),
  539|       |        }
  540|   229k|    }
_RNvMsc_NtNtCs57NZtjOlRkW_9quick_xml6events10attributesNtB5_9IterState20check_for_duplicatesB9_:
  603|  70.1k|    fn check_for_duplicates(
  604|  70.1k|        &mut self,
  605|  70.1k|        slice: &[u8],
  606|  70.1k|        key: Range<usize>,
  607|  70.1k|    ) -> Result<Range<usize>, AttrError> {
  608|  70.1k|        if self.check_duplicates {
  609|  29.3k|            if let Some(prev) = self
  610|  29.3k|                .keys
  611|  29.3k|                .iter()
  612|  29.3k|                .find(|r| slice[(*r).clone()] == slice[key.clone()])
  613|       |            {
  614|     34|                return Err(AttrError::Duplicated(key.start, prev.start));
  615|  29.3k|            }
  616|  29.3k|            self.keys.push(key.clone());
  617|  40.7k|        }
  618|  70.0k|        Ok(key)
  619|  70.1k|    }
_RNCNvMsc_NtNtCs57NZtjOlRkW_9quick_xml6events10attributesNtB7_9IterState20check_for_duplicates0Bb_:
  612|    474|                .find(|r| slice[(*r).clone()] == slice[key.clone()])
_RNvMsc_NtNtCs57NZtjOlRkW_9quick_xml6events10attributesNtB5_9IterState8key_onlyB9_:
  627|  6.39k|    fn key_only(&mut self, slice: &[u8], key: Range<usize>, offset: usize) -> Option<AttrResult> {
  628|  6.39k|        Some(if self.html {
  629|      0|            self.check_for_duplicates(slice, key).map(Attr::Empty)
  630|       |        } else {
  631|  6.39k|            Err(AttrError::ExpectedEq(offset))
  632|       |        })
  633|  6.39k|    }
_RNvMsc_NtNtCs57NZtjOlRkW_9quick_xml6events10attributesNtB5_9IterState8double_qB9_:
  636|  69.1k|    fn double_q(&mut self, key: Range<usize>, value: Range<usize>) -> Option<AttrResult> {
  637|  69.1k|        self.state = State::Next(value.end + 1); // +1 for `"`
  638|  69.1k|
  639|  69.1k|        Some(Ok(Attr::DoubleQ(key, value)))
  640|  69.1k|    }
_RNvMsc_NtNtCs57NZtjOlRkW_9quick_xml6events10attributesNtB5_9IterState8single_qB9_:
  643|    124|    fn single_q(&mut self, key: Range<usize>, value: Range<usize>) -> Option<AttrResult> {
  644|    124|        self.state = State::Next(value.end + 1); // +1 for `'`
  645|    124|
  646|    124|        Some(Ok(Attr::SingleQ(key, value)))
  647|    124|    }
_RNvMsc_NtNtCs57NZtjOlRkW_9quick_xml6events10attributesNtB5_9IterState4next:
  649|   229k|    pub fn next(&mut self, slice: &[u8]) -> Option<AttrResult> {
  650|   229k|        let mut iter = match self.recover(slice) {
  651|   229k|            Some(offset) => (offset..).zip(slice[offset..].iter()),
  652|      0|            None => return None,
  653|       |        };
  654|       |
  655|       |        // Index where next key started
  656|   229k|        let start_key = match iter.find(|(_, &b)| !is_whitespace(b)) {
  657|       |            // Input: `    key`
  658|       |            //             ^
  659|  76.5k|            Some((s, _)) => s,
  660|       |            // Input: `    `
  661|       |            //             ^
  662|       |            None => {
  663|       |                // Because we reach end-of-input, stop iteration on next call
  664|   152k|                self.state = State::Done;
  665|   152k|                return None;
  666|       |            }
  667|       |        };
  668|       |        // Span of a key
  669|  76.5k|        let (key, offset) = match iter.find(|(_, &b)| b == b'=' || is_whitespace(b)) {
  670|       |            // Input: `    key=`
  671|       |            //             |  ^
  672|       |            //             s  e
  673|  65.3k|            Some((e, b'=')) => (start_key..e, e),
  674|       |
  675|       |            // Input: `    key `
  676|       |            //                ^
  677|  7.45k|            Some((e, _)) => match iter.find(|(_, &b)| !is_whitespace(b)) {
  678|       |                // Input: `    key  =`
  679|       |                //             |  | ^
  680|       |                //     start_key  e
  681|  4.74k|                Some((offset, b'=')) => (start_key..e, offset),
  682|       |                // Input: `    key  x`
  683|       |                //             |  | ^
  684|       |                //     start_key  e
  685|       |                // If HTML-like attributes is allowed, this is the result, otherwise error
  686|  2.25k|                Some((offset, _)) => {
  687|  2.25k|                    // In any case, recovering is not required
  688|  2.25k|                    self.state = State::Next(offset);
  689|  2.25k|                    return self.key_only(slice, start_key..e, offset);
  690|       |                }
  691|       |                // Input: `    key  `
  692|       |                //             |  | ^
  693|       |                //     start_key  e
  694|       |                // If HTML-like attributes is allowed, this is the result, otherwise error
  695|       |                None => {
  696|       |                    // Because we reach end-of-input, stop iteration on next call
  697|    459|                    self.state = State::Done;
  698|    459|                    return self.key_only(slice, start_key..e, slice.len());
  699|       |                }
  700|       |            },
  701|       |
  702|       |            // Input: `    key`
  703|       |            //             |  ^
  704|       |            //             s  e = len()
  705|       |            // If HTML-like attributes is allowed, this is the result, otherwise error
  706|       |            None => {
  707|       |                // Because we reach end-of-input, stop iteration on next call
  708|  3.67k|                self.state = State::Done;
  709|  3.67k|                let e = slice.len();
  710|  3.67k|                return self.key_only(slice, start_key..e, e);
  711|       |            }
  712|       |        };
  713|       |
  714|  70.1k|        let key = match self.check_for_duplicates(slice, key) {
  715|     34|            Err(e) => {
  716|     34|                self.state = State::SkipEqValue(offset);
  717|     34|                return Some(Err(e));
  718|       |            }
  719|  70.0k|            Ok(key) => key,
  720|       |        };
  721|       |
  722|       |        ////////////////////////////////////////////////////////////////////////
  723|       |
  724|       |        // Gets the position of quote and quote type
  725|  70.0k|        let (start_value, quote) = match iter.find(|(_, &b)| !is_whitespace(b)) {
  726|       |            // Input: `    key  =  "`
  727|       |            //                     ^
  728|  69.2k|            Some((s, b'"')) => (s + 1, b'"'),
  729|       |            // Input: `    key  =  '`
  730|       |            //                     ^
  731|    128|            Some((s, b'\'')) => (s + 1, b'\''),
  732|       |
  733|       |            // Input: `    key  =  x`
  734|       |            //                     ^
  735|       |            // If HTML-like attributes is allowed, this is the start of the value
  736|      0|            Some((s, _)) if self.html => {
  737|       |                // We do not check validity of attribute value characters as required
  738|       |                // according to https://html.spec.whatwg.org/#unquoted. It can be done
  739|       |                // during validation phase
  740|      0|                let end = match iter.find(|(_, &b)| is_whitespace(b)) {
  741|       |                    // Input: `    key  =  value `
  742|       |                    //                     |    ^
  743|       |                    //                     s    e
  744|      0|                    Some((e, _)) => e,
  745|       |                    // Input: `    key  =  value`
  746|       |                    //                     |    ^
  747|       |                    //                     s    e = len()
  748|      0|                    None => slice.len(),
  749|       |                };
  750|      0|                self.state = State::Next(end);
  751|      0|                return Some(Ok(Attr::Unquoted(key, s..end)));
  752|       |            }
  753|       |            // Input: `    key  =  x`
  754|       |            //                     ^
  755|    525|            Some((s, _)) => {
  756|    525|                self.state = State::SkipValue(s);
  757|    525|                return Some(Err(AttrError::UnquotedValue(s)));
  758|       |            }
  759|       |
  760|       |            // Input: `    key  =  `
  761|       |            //                     ^
  762|       |            None => {
  763|       |                // Because we reach end-of-input, stop iteration on next call
  764|    174|                self.state = State::Done;
  765|    174|                return Some(Err(AttrError::ExpectedValue(slice.len())));
  766|       |            }
  767|       |        };
  768|       |
  769|  69.3k|        match iter.find(|(_, &b)| b == quote) {
  770|       |            // Input: `    key  =  "   "`
  771|       |            //                         ^
  772|  69.1k|            Some((e, b'"')) => self.double_q(key, start_value..e),
  773|       |            // Input: `    key  =  '   '`
  774|       |            //                         ^
  775|    124|            Some((e, _)) => self.single_q(key, start_value..e),
  776|       |
  777|       |            // Input: `    key  =  "   `
  778|       |            // Input: `    key  =  '   `
  779|       |            //                         ^
  780|       |            // Closing quote not found
  781|       |            None => {
  782|       |                // Because we reach end-of-input, stop iteration on next call
  783|    109|                self.state = State::Done;
  784|    109|                Some(Err(AttrError::ExpectedQuote(slice.len(), quote)))
  785|       |            }
  786|       |        }
  787|   229k|    }
_RNCNvMsc_NtNtCs57NZtjOlRkW_9quick_xml6events10attributesNtB7_9IterState4next0Bb_:
  656|   172k|        let start_key = match iter.find(|(_, &b)| !is_whitespace(b)) {
_RNCNvMsc_NtNtCs57NZtjOlRkW_9quick_xml6events10attributesNtB7_9IterState4nexts_0Bb_:
  669|   741k|        let (key, offset) = match iter.find(|(_, &b)| b == b'=' || is_whitespace(b)) {
_RNCNvMsc_NtNtCs57NZtjOlRkW_9quick_xml6events10attributesNtB7_9IterState4nexts0_0Bb_:
  677|  49.9k|            Some((e, _)) => match iter.find(|(_, &b)| !is_whitespace(b)) {
_RNCNvMsc_NtNtCs57NZtjOlRkW_9quick_xml6events10attributesNtB7_9IterState4nexts1_0Bb_:
  725|  80.3k|        let (start_value, quote) = match iter.find(|(_, &b)| !is_whitespace(b)) {
_RNCNvMsc_NtNtCs57NZtjOlRkW_9quick_xml6events10attributesNtB7_9IterState4nexts3_0Bb_:
  769|  3.23M|        match iter.find(|(_, &b)| b == quote) {

_RNvMNtCs57NZtjOlRkW_9quick_xml6eventsNtB2_10BytesStart4nameCshwa6i4jbVTh_7rdf_xml:
  170|  88.6k|    pub fn name(&self) -> QName {
  171|  88.6k|        QName(&self.buf[..self.name_len])
  172|  88.6k|    }
_RNvMs4_NtCs57NZtjOlRkW_9quick_xml6eventsNtB5_8BytesEnd4wrapCshwa6i4jbVTh_7rdf_xml:
  596|  19.8k|    pub(crate) fn wrap(name: Cow<'a, [u8]>) -> Self {
  597|  19.8k|        BytesEnd { name }
  598|  19.8k|    }
_RNvMs7_NtCs57NZtjOlRkW_9quick_xml6eventsNtB5_9BytesText3newCshwa6i4jbVTh_7rdf_xml:
  700|  3.07k|    pub fn new(content: &'a str) -> Self {
  701|  3.07k|        Self::from_escaped(escape(content))
  702|  3.07k|    }
_RINvMNtCs57NZtjOlRkW_9quick_xml6eventsNtB3_10BytesStart3newINtNtCs99O0fDgeGot_5alloc6borrow3CoweEECshwa6i4jbVTh_7rdf_xml:
   92|  13.8k|    pub fn new<C: Into<Cow<'a, str>>>(name: C) -> Self {
   93|  13.8k|        let buf = str_cow_to_bytes(name);
   94|  13.8k|        BytesStart {
   95|  13.8k|            name_len: buf.len(),
   96|  13.8k|            buf,
   97|  13.8k|        }
   98|  13.8k|    }
_RINvMs4_NtCs57NZtjOlRkW_9quick_xml6eventsNtB6_8BytesEnd3newINtNtCs99O0fDgeGot_5alloc6borrow3CoweEECshwa6i4jbVTh_7rdf_xml:
  606|  3.07k|    pub fn new<C: Into<Cow<'a, str>>>(name: C) -> Self {
  607|  3.07k|        Self::wrap(str_cow_to_bytes(name))
  608|  3.07k|    }
_RINvMs7_NtCs57NZtjOlRkW_9quick_xml6eventsNtB6_9BytesText12from_escapedINtNtCs99O0fDgeGot_5alloc6borrow3CoweEECshwa6i4jbVTh_7rdf_xml:
  693|  3.07k|    pub fn from_escaped<C: Into<Cow<'a, str>>>(content: C) -> Self {
  694|  3.07k|        Self::wrap(str_cow_to_bytes(content), Decoder::utf8())
  695|  3.07k|    }
_RINvMs7_NtCs57NZtjOlRkW_9quick_xml6eventsNtB6_9BytesText13unescape_withNCNvMs2_NtCs1ICs2Somm0b_8oxrdfxml6parserINtB1f_12RdfXmlReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE16parse_text_event0ECshwa6i4jbVTh_7rdf_xml:
  741|   106k|    pub fn unescape_with<'entity>(
  742|   106k|        &self,
  743|   106k|        resolve_entity: impl FnMut(&str) -> Option<&'entity str>,
  744|   106k|    ) -> Result<Cow<'a, str>> {
  745|   106k|        let decoded = match &self.content {
  746|   106k|            Cow::Borrowed(bytes) => self.decoder.decode(bytes)?,
  747|       |            // Convert to owned, because otherwise Cow will be bound with wrong lifetime
  748|      0|            Cow::Owned(bytes) => self.decoder.decode(bytes)?.into_owned().into(),
  749|       |        };
  750|       |
  751|  62.2k|        match unescape_with(&decoded, resolve_entity)? {
  752|       |            // Because result is borrowed, no replacements was done and we can use original string
  753|  52.4k|            Cow::Borrowed(_) => Ok(decoded),
  754|    691|            Cow::Owned(s) => Ok(s.into()),
  755|       |        }
  756|   106k|    }
_RINvNtCs57NZtjOlRkW_9quick_xml6events16str_cow_to_bytesINtNtCs99O0fDgeGot_5alloc6borrow3CoweEECshwa6i4jbVTh_7rdf_xml:
 1043|  20.0k|fn str_cow_to_bytes<'a, C: Into<Cow<'a, str>>>(content: C) -> Cow<'a, [u8]> {
 1044|  20.0k|    match content.into() {
 1045|  8.59k|        Cow::Borrowed(s) => Cow::Borrowed(s.as_bytes()),
 1046|  11.4k|        Cow::Owned(s) => Cow::Owned(s.into_bytes()),
 1047|       |    }
 1048|  20.0k|}
_RINvMNtCs57NZtjOlRkW_9quick_xml6eventsNtB3_10BytesStart3newReECs1ICs2Somm0b_8oxrdfxml:
   92|  14.6k|    pub fn new<C: Into<Cow<'a, str>>>(name: C) -> Self {
   93|  14.6k|        let buf = str_cow_to_bytes(name);
   94|  14.6k|        BytesStart {
   95|  14.6k|            name_len: buf.len(),
   96|  14.6k|            buf,
   97|  14.6k|        }
   98|  14.6k|    }
_RINvMs4_NtCs57NZtjOlRkW_9quick_xml6eventsNtB6_8BytesEnd3newReECs1ICs2Somm0b_8oxrdfxml:
  606|  14.6k|    pub fn new<C: Into<Cow<'a, str>>>(name: C) -> Self {
  607|  14.6k|        Self::wrap(str_cow_to_bytes(name))
  608|  14.6k|    }
_RINvMs_NtCs57NZtjOlRkW_9quick_xml6eventsNtB5_10BytesStart14push_attributeTReB1a_EECs1ICs2Somm0b_8oxrdfxml:
  241|  28.6k|    pub fn push_attribute<'b, A>(&mut self, attr: A)
  242|  28.6k|    where
  243|  28.6k|        A: Into<Attribute<'b>>,
  244|  28.6k|    {
  245|  28.6k|        let a = attr.into();
  246|  28.6k|        let bytes = self.buf.to_mut();
  247|  28.6k|        bytes.push(b' ');
  248|  28.6k|        bytes.extend_from_slice(a.key.as_ref());
  249|  28.6k|        bytes.extend_from_slice(b"=\"");
  250|  28.6k|        bytes.extend_from_slice(a.value.as_ref());
  251|  28.6k|        bytes.push(b'"');
  252|  28.6k|    }
_RINvNtCs57NZtjOlRkW_9quick_xml6events16str_cow_to_bytesReECs1ICs2Somm0b_8oxrdfxml:
 1043|  29.2k|fn str_cow_to_bytes<'a, C: Into<Cow<'a, str>>>(content: C) -> Cow<'a, [u8]> {
 1044|  29.2k|    match content.into() {
 1045|  29.2k|        Cow::Borrowed(s) => Cow::Borrowed(s.as_bytes()),
 1046|      0|        Cow::Owned(s) => Cow::Owned(s.into_bytes()),
 1047|       |    }
 1048|  29.2k|}
_RNvMs4_NtCs57NZtjOlRkW_9quick_xml6eventsNtB5_8BytesEnd4wrapCs1ICs2Somm0b_8oxrdfxml:
  596|  14.6k|    pub(crate) fn wrap(name: Cow<'a, [u8]>) -> Self {
  597|  14.6k|        BytesEnd { name }
  598|  14.6k|    }
_RNvMNtCs57NZtjOlRkW_9quick_xml6eventsNtB2_10BytesStart4wrapB4_:
   79|  94.2k|    pub(crate) fn wrap(content: &'a [u8], name_len: usize) -> Self {
   80|  94.2k|        BytesStart {
   81|  94.2k|            buf: Cow::Borrowed(content),
   82|  94.2k|            name_len,
   83|  94.2k|        }
   84|  94.2k|    }
_RINvMNtCs57NZtjOlRkW_9quick_xml6eventsNtB3_10BytesStart12from_contentNtNtCs99O0fDgeGot_5alloc6string6StringEB5_:
  108|  3.44k|    pub fn from_content<C: Into<Cow<'a, str>>>(content: C, name_len: usize) -> Self {
  109|  3.44k|        BytesStart {
  110|  3.44k|            buf: str_cow_to_bytes(content),
  111|  3.44k|            name_len,
  112|  3.44k|        }
  113|  3.44k|    }
_RNvMs_NtCs57NZtjOlRkW_9quick_xml6eventsNtB4_10BytesStart10attributes:
  261|   165k|    pub fn attributes(&self) -> Attributes {
  262|   165k|        Attributes::wrap(&self.buf, self.name_len, false)
  263|   165k|    }
_RINvMs_NtCs57NZtjOlRkW_9quick_xml6eventsNtB5_10BytesStart17try_get_attributeReEB7_:
  278|  5.39k|    pub fn try_get_attribute<N: AsRef<[u8]> + Sized>(
  279|  5.39k|        &'a self,
  280|  5.39k|        attr_name: N,
  281|  5.39k|    ) -> Result<Option<Attribute<'a>>> {
  282|  9.27k|        for a in self.attributes().with_checks(false) {
  283|  9.27k|            let a = a?;
  284|  8.62k|            if a.key.as_ref() == attr_name.as_ref() {
  285|  4.64k|                return Ok(Some(a));
  286|  3.97k|            }
  287|       |        }
  288|     97|        Ok(None)
  289|  5.39k|    }
_RNvXs1_NtCs57NZtjOlRkW_9quick_xml6eventsNtB5_10BytesStartNtNtNtCsiOGkCewTsZJ_4core3ops5deref5Deref5deref:
  303|  31.9k|    fn deref(&self) -> &[u8] {
  304|  31.9k|        &self.buf
  305|  31.9k|    }
_RNvMs2_NtCs57NZtjOlRkW_9quick_xml6eventsNtB5_9BytesDecl3new:
  342|  3.44k|    pub fn new(
  343|  3.44k|        version: &str,
  344|  3.44k|        encoding: Option<&str>,
  345|  3.44k|        standalone: Option<&str>,
  346|  3.44k|    ) -> BytesDecl<'static> {
  347|       |        // Compute length of the buffer based on supplied attributes
  348|       |        // ' encoding=""'   => 12
  349|  3.44k|        let encoding_attr_len = if let Some(xs) = encoding {
  350|  3.44k|            12 + xs.len()
  351|       |        } else {
  352|      0|            0
  353|       |        };
  354|       |        // ' standalone=""' => 14
  355|  3.44k|        let standalone_attr_len = if let Some(xs) = standalone {
  356|      0|            14 + xs.len()
  357|       |        } else {
  358|  3.44k|            0
  359|       |        };
  360|       |        // 'xml version=""' => 14
  361|  3.44k|        let mut buf = String::with_capacity(14 + encoding_attr_len + standalone_attr_len);
  362|  3.44k|
  363|  3.44k|        buf.push_str("xml version=\"");
  364|  3.44k|        buf.push_str(version);
  365|       |
  366|  3.44k|        if let Some(encoding_val) = encoding {
  367|  3.44k|            buf.push_str("\" encoding=\"");
  368|  3.44k|            buf.push_str(encoding_val);
  369|  3.44k|        }
  370|       |
  371|  3.44k|        if let Some(standalone_val) = standalone {
  372|      0|            buf.push_str("\" standalone=\"");
  373|      0|            buf.push_str(standalone_val);
  374|  3.44k|        }
  375|  3.44k|        buf.push('"');
  376|  3.44k|
  377|  3.44k|        BytesDecl {
  378|  3.44k|            content: BytesStart::from_content(buf, 3),
  379|  3.44k|        }
  380|  3.44k|    }
_RNvMs2_NtCs57NZtjOlRkW_9quick_xml6eventsNtB5_9BytesDecl10from_start:
  383|  5.39k|    pub fn from_start(start: BytesStart<'a>) -> Self {
  384|  5.39k|        Self { content: start }
  385|  5.39k|    }
_RNvMs2_NtCs57NZtjOlRkW_9quick_xml6eventsNtB5_9BytesDecl8encoding:
  484|  5.39k|    pub fn encoding(&self) -> Option<Result<Cow<[u8]>>> {
  485|  5.39k|        self.content
  486|  5.39k|            .try_get_attribute("encoding")
  487|  5.39k|            .map(|a| a.map(|a| a.value))
  488|  5.39k|            .transpose()
  489|  5.39k|    }
_RNCNvMs2_NtCs57NZtjOlRkW_9quick_xml6eventsNtB7_9BytesDecl8encoding0B9_:
  487|  4.74k|            .map(|a| a.map(|a| a.value))
_RNCNCNvMs2_NtCs57NZtjOlRkW_9quick_xml6eventsNtB9_9BytesDecl8encoding00Bb_:
  487|  4.64k|            .map(|a| a.map(|a| a.value))
_RNvXs3_NtCs57NZtjOlRkW_9quick_xml6eventsNtB5_9BytesDeclNtNtNtCsiOGkCewTsZJ_4core3ops5deref5Deref5deref:
  565|  3.44k|    fn deref(&self) -> &[u8] {
  566|  3.44k|        &self.content
  567|  3.44k|    }
_RNvMs4_NtCs57NZtjOlRkW_9quick_xml6eventsNtB5_8BytesEnd4wrapB7_:
  596|  19.9k|    pub(crate) fn wrap(name: Cow<'a, [u8]>) -> Self {
  597|  19.9k|        BytesEnd { name }
  598|  19.9k|    }
_RNvXs6_NtCs57NZtjOlRkW_9quick_xml6eventsNtB5_8BytesEndNtNtNtCsiOGkCewTsZJ_4core3ops5deref5Deref5deref:
  652|  17.7k|    fn deref(&self) -> &[u8] {
  653|  17.7k|        &self.name
  654|  17.7k|    }
_RINvMs7_NtCs57NZtjOlRkW_9quick_xml6eventsNtB6_9BytesText4wrapINtNtCs99O0fDgeGot_5alloc6borrow3CowShEEB8_:
  684|  3.07k|    pub(crate) fn wrap<C: Into<Cow<'a, [u8]>>>(content: C, decoder: Decoder) -> Self {
  685|  3.07k|        Self {
  686|  3.07k|            content: content.into(),
  687|  3.07k|            decoder,
  688|  3.07k|        }
  689|  3.07k|    }
_RINvMs7_NtCs57NZtjOlRkW_9quick_xml6eventsNtB6_9BytesText4wrapRShEB8_:
  684|   108k|    pub(crate) fn wrap<C: Into<Cow<'a, [u8]>>>(content: C, decoder: Decoder) -> Self {
  685|   108k|        Self {
  686|   108k|            content: content.into(),
  687|   108k|            decoder,
  688|   108k|        }
  689|   108k|    }
_RNvXs9_NtCs57NZtjOlRkW_9quick_xml6eventsNtB5_9BytesTextNtNtNtCsiOGkCewTsZJ_4core3ops5deref5Deref5deref:
  789|  56.1k|    fn deref(&self) -> &[u8] {
  790|  56.1k|        &self.content
  791|  56.1k|    }
_RNvXsf_NtCs57NZtjOlRkW_9quick_xml6eventsNtB5_5EventINtNtCsiOGkCewTsZJ_4core7convert5AsRefBC_E6as_ref:
 1035|  52.7k|    fn as_ref(&self) -> &Event<'a> {
 1036|  52.7k|        self
 1037|  52.7k|    }
_RINvNtCs57NZtjOlRkW_9quick_xml6events16str_cow_to_bytesNtNtCs99O0fDgeGot_5alloc6string6StringEB4_:
 1043|  3.44k|fn str_cow_to_bytes<'a, C: Into<Cow<'a, str>>>(content: C) -> Cow<'a, [u8]> {
 1044|  3.44k|    match content.into() {
 1045|      0|        Cow::Borrowed(s) => Cow::Borrowed(s.as_bytes()),
 1046|  3.44k|        Cow::Owned(s) => Cow::Owned(s.into_bytes()),
 1047|       |    }
 1048|  3.44k|}

_RNvMsf_NtCs57NZtjOlRkW_9quick_xml4nameNtB5_17NamespaceResolver7resolveCshwa6i4jbVTh_7rdf_xml:
  564|   110k|    pub fn resolve<'n>(
  565|   110k|        &self,
  566|   110k|        name: QName<'n>,
  567|   110k|        use_default: bool,
  568|   110k|    ) -> (ResolveResult, LocalName<'n>) {
  569|   110k|        let (local_name, prefix) = name.decompose();
  570|   110k|        (self.resolve_prefix(prefix, use_default), local_name)
  571|   110k|    }
_RNvXs0_NtCs57NZtjOlRkW_9quick_xml4nameNtB5_5QNameINtNtCsiOGkCewTsZJ_4core7convert5AsRefShE6as_refCshwa6i4jbVTh_7rdf_xml:
  124|  43.1k|    fn as_ref(&self) -> &[u8] {
  125|  43.1k|        self.0
  126|  43.1k|    }
_RNvXs3_NtCs57NZtjOlRkW_9quick_xml4nameNtB5_9LocalNameINtNtCsiOGkCewTsZJ_4core7convert5AsRefShE6as_refCshwa6i4jbVTh_7rdf_xml:
  154|   204k|    fn as_ref(&self) -> &[u8] {
  155|   204k|        self.0
  156|   204k|    }
_RNvXsa_NtCs57NZtjOlRkW_9quick_xml4nameNtB5_9NamespaceINtNtCsiOGkCewTsZJ_4core7convert5AsRefShE6as_refCshwa6i4jbVTh_7rdf_xml:
  270|   204k|    fn as_ref(&self) -> &[u8] {
  271|   204k|        self.0
  272|   204k|    }
_RNvXs0_NtCs57NZtjOlRkW_9quick_xml4nameNtB5_5QNameINtNtCsiOGkCewTsZJ_4core7convert5AsRefShE6as_refCs1ICs2Somm0b_8oxrdfxml:
  124|  28.6k|    fn as_ref(&self) -> &[u8] {
  125|  28.6k|        self.0
  126|  28.6k|    }
_RNvMNtCs57NZtjOlRkW_9quick_xml4nameNtB2_5QName9decompose:
   67|   110k|    pub fn decompose(&self) -> (LocalName<'a>, Option<Prefix<'a>>) {
   68|   110k|        match self.index() {
   69|  47.2k|            None => (LocalName(self.0), None),
   70|  63.5k|            Some(i) => (LocalName(&self.0[i + 1..]), Some(Prefix(&self.0[..i]))),
   71|       |        }
   72|   110k|    }
_RNvMNtCs57NZtjOlRkW_9quick_xml4nameNtB2_5QName20as_namespace_binding:
   98|  31.5k|    pub fn as_namespace_binding(&self) -> Option<PrefixDeclaration<'a>> {
   99|  31.5k|        if self.0.starts_with(b"xmlns") {
  100|  8.78k|            return match self.0.get(5) {
  101|  3.22k|                None => Some(PrefixDeclaration::Default),
  102|  5.44k|                Some(&b':') => Some(PrefixDeclaration::Named(&self.0[6..])),
  103|    116|                _ => None,
  104|       |            };
  105|  22.7k|        }
  106|  22.7k|        None
  107|  31.5k|    }
_RNvMNtCs57NZtjOlRkW_9quick_xml4nameNtB2_5QName5index:
  111|   110k|    fn index(&self) -> Option<usize> {
  112|   110k|        memchr(b':', self.0)
  113|   110k|    }
_RNvXs0_NtCs57NZtjOlRkW_9quick_xml4nameNtB5_5QNameINtNtCsiOGkCewTsZJ_4core7convert5AsRefShE6as_refB7_:
  124|  8.62k|    fn as_ref(&self) -> &[u8] {
  125|  8.62k|        self.0
  126|  8.62k|    }
_RNvMs5_NtCs57NZtjOlRkW_9quick_xml4nameNtB5_6Prefix10into_inner:
  191|  16.1k|    pub fn into_inner(self) -> &'a [u8] {
  192|  16.1k|        self.0
  193|  16.1k|    }
_RNvMs8_NtCs57NZtjOlRkW_9quick_xml4nameNtB5_9Namespace10into_inner:
  256|  13.7k|    pub fn into_inner(self) -> &'a [u8] {
  257|  13.7k|        self.0
  258|  13.7k|    }
_RNvMsd_NtCs57NZtjOlRkW_9quick_xml4nameNtB5_14NamespaceEntry6prefixB7_:
  367|   133k|    fn prefix<'b>(&self, ns_buffer: &'b [u8]) -> Option<Prefix<'b>> {
  368|   133k|        if self.prefix_len == 0 {
  369|  44.2k|            None
  370|       |        } else {
  371|  89.0k|            Some(Prefix(&ns_buffer[self.start..self.start + self.prefix_len]))
  372|       |        }
  373|   133k|    }
_RNvMsd_NtCs57NZtjOlRkW_9quick_xml4nameNtB5_14NamespaceEntry9namespaceB7_:
  380|   102k|    fn namespace<'ns>(&self, buffer: &'ns [u8]) -> ResolveResult<'ns> {
  381|   102k|        if self.value_len == 0 {
  382|    205|            ResolveResult::Unbound
  383|       |        } else {
  384|   102k|            let start = self.start + self.prefix_len;
  385|   102k|            ResolveResult::Bound(Namespace(&buffer[start..start + self.value_len]))
  386|       |        }
  387|   102k|    }
_RNvXse_NtCs57NZtjOlRkW_9quick_xml4nameNtB5_17NamespaceResolverNtNtCsiOGkCewTsZJ_4core7default7Default7default:
  431|  6.89k|    fn default() -> Self {
  432|  6.89k|        let mut buffer = Vec::new();
  433|  6.89k|        let mut bindings = Vec::new();
  434|  20.6k|        for ent in &[RESERVED_NAMESPACE_XML, RESERVED_NAMESPACE_XMLNS] {
  435|  13.7k|            let prefix = ent.0.into_inner();
  436|  13.7k|            let uri = ent.1.into_inner();
  437|  13.7k|            bindings.push(NamespaceEntry {
  438|  13.7k|                start: buffer.len(),
  439|  13.7k|                prefix_len: prefix.len(),
  440|  13.7k|                value_len: uri.len(),
  441|  13.7k|                level: 0,
  442|  13.7k|            });
  443|  13.7k|            buffer.extend(prefix);
  444|  13.7k|            buffer.extend(uri);
  445|  13.7k|        }
  446|       |
  447|  6.89k|        Self {
  448|  6.89k|            buffer,
  449|  6.89k|            bindings,
  450|  6.89k|            nesting_level: 0,
  451|  6.89k|        }
  452|  6.89k|    }
_RNvMsf_NtCs57NZtjOlRkW_9quick_xml4nameNtB5_17NamespaceResolver4push:
  460|  88.8k|    pub fn push(&mut self, start: &BytesStart) -> Result<()> {
  461|  88.8k|        self.nesting_level += 1;
  462|  88.8k|        let level = self.nesting_level;
  463|       |        // adds new namespaces for attributes starting with 'xmlns:' and for the 'xmlns'
  464|       |        // (default namespace) attribute.
  465|  88.8k|        for a in start.attributes().with_checks(false) {
  466|  37.0k|            if let Ok(Attribute { key: k, value: v }) = a {
  467|  31.5k|                match k.as_namespace_binding() {
  468|  3.22k|                    Some(PrefixDeclaration::Default) => {
  469|  3.22k|                        let start = self.buffer.len();
  470|  3.22k|                        self.buffer.extend_from_slice(&v);
  471|  3.22k|                        self.bindings.push(NamespaceEntry {
  472|  3.22k|                            start,
  473|  3.22k|                            prefix_len: 0,
  474|  3.22k|                            value_len: v.len(),
  475|  3.22k|                            level,
  476|  3.22k|                        });
  477|  3.22k|                    }
  478|  5.44k|                    Some(PrefixDeclaration::Named(b"xml")) => {
  479|    117|                        if Namespace(&v) != RESERVED_NAMESPACE_XML.1 {
  480|       |                            // error, `xml` prefix explicitly set to different value
  481|     83|                            return Err(Error::InvalidPrefixBind {
  482|     83|                                prefix: b"xml".to_vec(),
  483|     83|                                namespace: v.to_vec(),
  484|     83|                            });
  485|     34|                        }
  486|       |                        // don't add another NamespaceEntry for the `xml` namespace prefix
  487|       |                    }
  488|  1.60k|                    Some(PrefixDeclaration::Named(b"xmlns")) => {
  489|       |                        // error, `xmlns` prefix explicitly set
  490|     67|                        return Err(Error::InvalidPrefixBind {
  491|     67|                            prefix: b"xmlns".to_vec(),
  492|     67|                            namespace: v.to_vec(),
  493|     67|                        });
  494|       |                    }
  495|  5.26k|                    Some(PrefixDeclaration::Named(prefix)) => {
  496|  5.26k|                        let ns = Namespace(&v);
  497|  5.26k|
  498|  5.26k|                        if ns == RESERVED_NAMESPACE_XML.1 || ns == RESERVED_NAMESPACE_XMLNS.1 {
  499|       |                            // error, non-`xml` prefix set to xml uri
  500|       |                            // error, non-`xmlns` prefix set to xmlns uri
  501|     69|                            return Err(Error::InvalidPrefixBind {
  502|     69|                                prefix: prefix.to_vec(),
  503|     69|                                namespace: v.to_vec(),
  504|     69|                            });
  505|  5.19k|                        }
  506|  5.19k|
  507|  5.19k|                        let start = self.buffer.len();
  508|  5.19k|                        self.buffer.extend_from_slice(prefix);
  509|  5.19k|                        self.buffer.extend_from_slice(&v);
  510|  5.19k|                        self.bindings.push(NamespaceEntry {
  511|  5.19k|                            start,
  512|  5.19k|                            prefix_len: prefix.len(),
  513|  5.19k|                            value_len: v.len(),
  514|  5.19k|                            level,
  515|  5.19k|                        });
  516|       |                    }
  517|  22.8k|                    None => {}
  518|       |                }
  519|       |            } else {
  520|  5.53k|                break;
  521|       |            }
  522|       |        }
  523|  88.6k|        Ok(())
  524|  88.8k|    }
_RNvMsf_NtCs57NZtjOlRkW_9quick_xml4nameNtB5_17NamespaceResolver3pop:
  530|  36.8k|    pub fn pop(&mut self) {
  531|  36.8k|        self.nesting_level -= 1;
  532|  36.8k|        let current_level = self.nesting_level;
  533|  36.8k|        // from the back (most deeply nested scope), look for the first scope that is still valid
  534|  36.8k|        match self.bindings.iter().rposition(|n| n.level <= current_level) {
  535|       |            // none of the namespaces are valid, remove all of them
  536|      0|            None => {
  537|      0|                self.buffer.clear();
  538|      0|                self.bindings.clear();
  539|      0|            }
  540|       |            // drop all namespaces past the last valid namespace
  541|  36.8k|            Some(last_valid_pos) => {
  542|  36.8k|                if let Some(len) = self.bindings.get(last_valid_pos + 1).map(|n| n.start) {
  543|  6.65k|                    self.buffer.truncate(len);
  544|  6.65k|                    self.bindings.truncate(last_valid_pos + 1);
  545|  30.1k|                }
  546|       |            }
  547|       |        }
  548|  36.8k|    }
_RNCNvMsf_NtCs57NZtjOlRkW_9quick_xml4nameNtB7_17NamespaceResolver3pop0B9_:
  534|  43.4k|        match self.bindings.iter().rposition(|n| n.level <= current_level) {
_RNCNvMsf_NtCs57NZtjOlRkW_9quick_xml4nameNtB7_17NamespaceResolver3pops_0B9_:
  542|  6.65k|                if let Some(len) = self.bindings.get(last_valid_pos + 1).map(|n| n.start) {
_RNvMsf_NtCs57NZtjOlRkW_9quick_xml4nameNtB5_17NamespaceResolver14resolve_prefix:
  588|   110k|    fn resolve_prefix(&self, prefix: Option<Prefix>, use_default: bool) -> ResolveResult {
  589|   110k|        self.bindings
  590|   110k|            .iter()
  591|   110k|            // Find the last defined binding that corresponds to the given prefix
  592|   110k|            .rev()
  593|   110k|            .find_map(|n| match (n.prefix(&self.buffer), prefix) {
  594|       |                // This is default namespace definition and name has no explicit prefix
  595|       |                (None, None) if use_default => Some(n.namespace(&self.buffer)),
  596|       |                (None, None) => Some(ResolveResult::Unbound),
  597|       |
  598|       |                // One part has prefix but other is not -> skip
  599|       |                (None, Some(_)) => None,
  600|       |                (Some(_), None) => None,
  601|       |
  602|       |                // Prefixes does not match -> skip
  603|       |                (Some(definition), Some(usage)) if definition != usage => None,
  604|       |
  605|       |                // Prefixes the same, entry defines binding reset (corresponds to `xmlns:p=""`)
  606|       |                _ if n.value_len == 0 => Some(Self::maybe_unknown(prefix)),
  607|       |                // Prefixes the same, returns corresponding namespace
  608|       |                _ => Some(n.namespace(&self.buffer)),
  609|   110k|            })
  610|   110k|            .unwrap_or_else(|| Self::maybe_unknown(prefix))
  611|   110k|    }
_RNCNvMsf_NtCs57NZtjOlRkW_9quick_xml4nameNtB7_17NamespaceResolver14resolve_prefix0B9_:
  593|   133k|            .find_map(|n| match (n.prefix(&self.buffer), prefix) {
  594|       |                // This is default namespace definition and name has no explicit prefix
  595|  41.2k|                (None, None) if use_default => Some(n.namespace(&self.buffer)),
  596|     82|                (None, None) => Some(ResolveResult::Unbound),
  597|       |
  598|       |                // One part has prefix but other is not -> skip
  599|  2.90k|                (None, Some(_)) => None,
  600|  15.0k|                (Some(_), None) => None,
  601|       |
  602|       |                // Prefixes does not match -> skip
  603|  74.0k|                (Some(definition), Some(usage)) if definition != usage => None,
  604|       |
  605|       |                // Prefixes the same, entry defines binding reset (corresponds to `xmlns:p=""`)
  606|  61.2k|                _ if n.value_len == 0 => Some(Self::maybe_unknown(prefix)),
  607|       |                // Prefixes the same, returns corresponding namespace
  608|  61.2k|                _ => Some(n.namespace(&self.buffer)),
  609|   133k|            })
_RNCNvMsf_NtCs57NZtjOlRkW_9quick_xml4nameNtB7_17NamespaceResolver14resolve_prefixs_0B9_:
  610|  8.20k|            .unwrap_or_else(|| Self::maybe_unknown(prefix))
_RNvMsf_NtCs57NZtjOlRkW_9quick_xml4nameNtB5_17NamespaceResolver13maybe_unknownB7_:
  614|  8.20k|    fn maybe_unknown(prefix: Option<Prefix>) -> ResolveResult<'static> {
  615|  8.20k|        match prefix {
  616|  2.37k|            Some(p) => ResolveResult::Unknown(p.into_inner().to_vec()),
  617|  5.83k|            None => ResolveResult::Unbound,
  618|       |        }
  619|  8.20k|    }
_RNvXsB_NtCs57NZtjOlRkW_9quick_xml4nameNtB5_6PrefixNtNtCsiOGkCewTsZJ_4core3cmp9PartialEq2eqB7_:
  185|  74.0k|#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
_RNvXsU_NtCs57NZtjOlRkW_9quick_xml4nameNtB5_9NamespaceNtNtCsiOGkCewTsZJ_4core3cmp9PartialEq2eqB7_:
  227|  10.6k|#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]

_RNvXNtNtCs57NZtjOlRkW_9quick_xml6reader15buffered_readerINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCs99O0fDgeGot_5alloc3vec3VechEE12read_elementCshwa6i4jbVTh_7rdf_xml:
  154|  88.8k|        $($async)? fn read_element $(<$lf>)? (
  155|  88.8k|            &mut self,
  156|  88.8k|            buf: &'b mut Vec<u8>,
  157|  88.8k|            position: &mut usize,
  158|  88.8k|        ) -> Result<Option<&'b [u8]>> {
  159|  88.8k|            let mut state = ReadElementState::Elem;
  160|  88.8k|            let mut read = 0;
  161|  88.8k|
  162|  88.8k|            let start = buf.len();
  163|       |            loop {
  164|  90.5k|                match self $(.$reader)? .fill_buf() $(.$await)? {
  165|  90.5k|                    Ok(n) if n.is_empty() => break,
  166|  88.9k|                    Ok(available) => {
  167|  88.9k|                        if let Some((consumed, used)) = state.change(available) {
  168|  87.3k|                            buf.extend_from_slice(consumed);
  169|  87.3k|
  170|  87.3k|                            self $(.$reader)? .consume(used);
  171|  87.3k|                            read += used;
  172|  87.3k|
  173|  87.3k|                            // Position now just after the `>` symbol
  174|  87.3k|                            *position += read;
  175|  87.3k|                            break;
  176|  1.66k|                        } else {
  177|  1.66k|                            // The `>` symbol not yet found, continue reading
  178|  1.66k|                            buf.extend_from_slice(available);
  179|  1.66k|
  180|  1.66k|                            let used = available.len();
  181|  1.66k|                            self $(.$reader)? .consume(used);
  182|  1.66k|                            read += used;
  183|  1.66k|                        }
  184|       |                    }
  185|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  186|      0|                    Err(e) => {
  187|      0|                        *position += read;
  188|      0|                        return Err(Error::Io(e.into()));
  189|       |                    }
  190|       |                };
  191|       |            }
  192|       |
  193|  88.8k|            if read == 0 {
  194|      0|                Ok(None)
  195|       |            } else {
  196|  88.8k|                Ok(Some(&buf[start..]))
  197|       |            }
  198|  88.8k|        }
_RNvXNtNtCs57NZtjOlRkW_9quick_xml6reader15buffered_readerINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCs99O0fDgeGot_5alloc3vec3VechEE15remove_utf8_bomCshwa6i4jbVTh_7rdf_xml:
   18|  6.89k|        $($async)? fn remove_utf8_bom(&mut self) -> Result<()> {
   19|       |            use crate::encoding::UTF8_BOM;
   20|       |
   21|       |            loop {
   22|  6.89k|                break match self $(.$reader)? .fill_buf() $(.$await)? {
   23|  6.89k|                    Ok(n) => {
   24|  6.89k|                        if n.starts_with(UTF8_BOM) {
   25|     27|                            self $(.$reader)? .consume(UTF8_BOM.len());
   26|  6.86k|                        }
   27|  6.89k|                        Ok(())
   28|       |                    },
   29|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
   30|      0|                    Err(e) => Err(Error::Io(e.into())),
   31|       |                };
   32|       |            }
   33|  6.89k|        }
_RNvXNtNtCs57NZtjOlRkW_9quick_xml6reader15buffered_readerINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCs99O0fDgeGot_5alloc3vec3VechEE16read_bytes_untilCshwa6i4jbVTh_7rdf_xml:
   52|   138k|        $($async)? fn read_bytes_until $(<$lf>)? (
   53|   138k|            &mut self,
   54|   138k|            byte: u8,
   55|   138k|            buf: &'b mut Vec<u8>,
   56|   138k|            position: &mut usize,
   57|   138k|        ) -> Result<Option<&'b [u8]>> {
   58|   138k|            // search byte must be within the ascii range
   59|   138k|            debug_assert!(byte.is_ascii());
   60|       |
   61|   138k|            let mut read = 0;
   62|   138k|            let mut done = false;
   63|   138k|            let start = buf.len();
   64|   272k|            while !done {
   65|   133k|                let used = {
   66|   140k|                    let available = match self $(.$reader)? .fill_buf() $(.$await)? {
   67|   140k|                        Ok(n) if n.is_empty() => break,
   68|   133k|                        Ok(n) => n,
   69|      0|                        Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
   70|      0|                        Err(e) => {
   71|      0|                            *position += read;
   72|      0|                            return Err(Error::Io(e.into()));
   73|       |                        }
   74|       |                    };
   75|       |
   76|   133k|                    match memchr::memchr(byte, available) {
   77|   131k|                        Some(i) => {
   78|   131k|                            buf.extend_from_slice(&available[..i]);
   79|   131k|                            done = true;
   80|   131k|                            i + 1
   81|       |                        }
   82|       |                        None => {
   83|  1.70k|                            buf.extend_from_slice(available);
   84|  1.70k|                            available.len()
   85|       |                        }
   86|       |                    }
   87|       |                };
   88|   133k|                self $(.$reader)? .consume(used);
   89|   133k|                read += used;
   90|       |            }
   91|   138k|            *position += read;
   92|   138k|
   93|   138k|            if read == 0 {
   94|  5.15k|                Ok(None)
   95|       |            } else {
   96|   133k|                Ok(Some(&buf[start..]))
   97|       |            }
   98|   138k|        }
_RNvXNtNtCs57NZtjOlRkW_9quick_xml6reader15buffered_readerINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCs99O0fDgeGot_5alloc3vec3VechEE17read_bang_elementCshwa6i4jbVTh_7rdf_xml:
  100|    171|        $($async)? fn read_bang_element $(<$lf>)? (
  101|    171|            &mut self,
  102|    171|            buf: &'b mut Vec<u8>,
  103|    171|            position: &mut usize,
  104|    171|        ) -> Result<Option<(BangType, &'b [u8])>> {
  105|    171|            // Peeked one bang ('!') before being called, so it's guaranteed to
  106|    171|            // start with it.
  107|    171|            let start = buf.len();
  108|    171|            let mut read = 1;
  109|    171|            buf.push(b'!');
  110|    171|            self $(.$reader)? .consume(1);
  111|       |
  112|    171|            let bang_type = BangType::new(self.peek_one() $(.$await)? ?)?;
  113|       |
  114|       |            loop {
  115|    222|                match self $(.$reader)? .fill_buf() $(.$await)? {
  116|       |                    // Note: Do not update position, so the error points to
  117|       |                    // somewhere sane rather than at the EOF
  118|    222|                    Ok(n) if n.is_empty() => return Err(bang_type.to_err()),
  119|    166|                    Ok(available) => {
  120|       |                        // We only parse from start because we don't want to consider
  121|       |                        // whatever is in the buffer before the bang element
  122|    166|                        if let Some((consumed, used)) = bang_type.parse(&buf[start..], available) {
  123|    110|                            buf.extend_from_slice(consumed);
  124|    110|
  125|    110|                            self $(.$reader)? .consume(used);
  126|    110|                            read += used;
  127|    110|
  128|    110|                            *position += read;
  129|    110|                            break;
  130|     56|                        } else {
  131|     56|                            buf.extend_from_slice(available);
  132|     56|
  133|     56|                            let used = available.len();
  134|     56|                            self $(.$reader)? .consume(used);
  135|     56|                            read += used;
  136|     56|                        }
  137|       |                    }
  138|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  139|      0|                    Err(e) => {
  140|      0|                        *position += read;
  141|      0|                        return Err(Error::Io(e.into()));
  142|       |                    }
  143|       |                }
  144|       |            }
  145|       |
  146|    110|            if read == 0 {
  147|      0|                Ok(None)
  148|       |            } else {
  149|    110|                Ok(Some((bang_type, &buf[start..])))
  150|       |            }
  151|    171|        }
_RNvXNtNtCs57NZtjOlRkW_9quick_xml6reader15buffered_readerINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCs99O0fDgeGot_5alloc3vec3VechEE8peek_oneCshwa6i4jbVTh_7rdf_xml:
  233|   239k|        $($async)? fn peek_one(&mut self) -> Result<Option<u8>> {
  234|       |            loop {
  235|   239k|                break match self $(.$reader)? .fill_buf() $(.$await)? {
  236|   239k|                    Ok(n) if n.is_empty() => Ok(None),
  237|   232k|                    Ok(n) => Ok(Some(n[0])),
  238|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  239|      0|                    Err(e) => Err(Error::Io(e.into())),
  240|       |                };
  241|       |            }
  242|   239k|        }
_RNvXNtNtCs57NZtjOlRkW_9quick_xml6reader15buffered_readerINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCs99O0fDgeGot_5alloc3vec3VechEE8skip_oneCshwa6i4jbVTh_7rdf_xml:
  219|   122k|        $($async)? fn skip_one(&mut self, byte: u8, position: &mut usize) -> Result<bool> {
  220|   122k|            // search byte must be within the ascii range
  221|   122k|            debug_assert!(byte.is_ascii());
  222|       |
  223|   122k|            match self.peek_one() $(.$await)? ? {
  224|   117k|                Some(b) if b == byte => {
  225|  10.0k|                    *position += 1;
  226|  10.0k|                    self $(.$reader)? .consume(1);
  227|  10.0k|                    Ok(true)
  228|       |                }
  229|   112k|                _ => Ok(false),
  230|       |            }
  231|   122k|        }

_RINvMs0_NtCs57NZtjOlRkW_9quick_xml6readerINtB6_6ReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE15read_event_implQINtNtCs99O0fDgeGot_5alloc3vec3VechEECshwa6i4jbVTh_7rdf_xml:
  645|   246k|    fn read_event_impl<'i, B>(&mut self, mut buf: B) -> Result<Event<'i>>
  646|   246k|    where
  647|   246k|        R: XmlSource<'i, B>,
  648|   246k|    {
  649|   256k|        read_event_impl!(self, buf, self.reader, read_until_open, read_until_close)
  650|   246k|    }
_RINvMs0_NtCs57NZtjOlRkW_9quick_xml6readerINtB6_6ReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE15read_until_openQINtNtCs99O0fDgeGot_5alloc3vec3VechEECshwa6i4jbVTh_7rdf_xml:
  656|   122k|    fn read_until_open<'i, B>(&mut self, buf: B) -> Result<std::result::Result<Event<'i>, B>>
  657|   122k|    where
  658|   122k|        R: XmlSource<'i, B>,
  659|   122k|    {
  660|   122k|        read_until_open!(self, buf, self.reader, read_event_impl)
  661|   122k|    }
_RINvMs0_NtCs57NZtjOlRkW_9quick_xml6readerINtB6_6ReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE16read_until_closeQINtNtCs99O0fDgeGot_5alloc3vec3VechEECshwa6i4jbVTh_7rdf_xml:
  665|   117k|    fn read_until_close<'i, B>(&mut self, buf: B) -> Result<Event<'i>>
  666|   117k|    where
  667|   117k|        R: XmlSource<'i, B>,
  668|   117k|    {
  669|   117k|        read_until_close!(self, buf, self.reader)
  670|   117k|    }
_RNvMNtCs57NZtjOlRkW_9quick_xml6readerINtB2_6ReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE11from_readerCshwa6i4jbVTh_7rdf_xml:
  533|  6.89k|    pub fn from_reader(reader: R) -> Self {
  534|  6.89k|        Self {
  535|  6.89k|            reader,
  536|  6.89k|            state: ReaderState::default(),
  537|  6.89k|        }
  538|  6.89k|    }
_RNvMs_NtCs57NZtjOlRkW_9quick_xml6readerINtB4_6ReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE7decoderCshwa6i4jbVTh_7rdf_xml:
  635|   126k|    pub fn decoder(&self) -> Decoder {
  636|   126k|        self.state.decoder()
  637|   126k|    }
_RNvMs1_NtCs57NZtjOlRkW_9quick_xml6readerNtB5_8BangType3new:
  807|    171|    fn new(byte: Option<u8>) -> Result<Self> {
  808|    171|        Ok(match byte {
  809|     16|            Some(b'[') => Self::CData,
  810|     90|            Some(b'-') => Self::Comment,
  811|     60|            Some(b'D') | Some(b'd') => Self::DocType,
  812|      3|            Some(b) => return Err(Error::UnexpectedBang(b)),
  813|      2|            None => return Err(Error::UnexpectedEof("Bang".to_string())),
  814|       |        })
  815|    171|    }
_RNvMs1_NtCs57NZtjOlRkW_9quick_xml6readerNtB5_8BangType5parse:
  824|    166|    fn parse<'b>(&self, buf: &[u8], chunk: &'b [u8]) -> Option<(&'b [u8], usize)> {
  825|  1.98k|        for i in memchr::memchr_iter(b'>', chunk) {
  826|    331|            match self {
  827|    331|                // Need to read at least 6 symbols (`!---->`) for properly finished comment
  828|    331|                // <!----> - XML comment
  829|    331|                //  012345 - i
  830|    331|                Self::Comment if buf.len() + i > 4 => {
  831|    305|                    if chunk[..i].ends_with(b"--") {
  832|       |                        // We cannot strip last `--` from the buffer because we need it in case of
  833|       |                        // check_comments enabled option. XML standard requires that comment
  834|       |                        // will not end with `--->` sequence because this is a special case of
  835|       |                        // `--` in the comment (https://www.w3.org/TR/xml11/#sec-comments)
  836|     76|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
  837|    229|                    }
  838|    229|                    // End sequence `-|->` was splitted at |
  839|    229|                    //        buf --/   \-- chunk
  840|    229|                    if i == 1 && buf.ends_with(b"-") && chunk[0] == b'-' {
  841|      0|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
  842|    229|                    }
  843|    229|                    // End sequence `--|>` was splitted at |
  844|    229|                    //         buf --/   \-- chunk
  845|    229|                    if i == 0 && buf.ends_with(b"--") {
  846|      0|                        return Some((&[], i + 1)); // +1 for `>`
  847|    229|                    }
  848|       |                }
  849|     26|                Self::Comment => {}
  850|       |                Self::CData => {
  851|    305|                    if chunk[..i].ends_with(b"]]") {
  852|      3|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
  853|    302|                    }
  854|    302|                    // End sequence `]|]>` was splitted at |
  855|    302|                    //        buf --/   \-- chunk
  856|    302|                    if i == 1 && buf.ends_with(b"]") && chunk[0] == b']' {
  857|      0|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
  858|    302|                    }
  859|    302|                    // End sequence `]]|>` was splitted at |
  860|    302|                    //         buf --/   \-- chunk
  861|    302|                    if i == 0 && buf.ends_with(b"]]") {
  862|      0|                        return Some((&[], i + 1)); // +1 for `>`
  863|    302|                    }
  864|       |                }
  865|       |                Self::DocType => {
  866|  1.35k|                    let content = &chunk[..i];
  867|  1.35k|                    let balance = memchr::memchr2_iter(b'<', b'>', content)
  868|  1.35k|                        .map(|p| if content[p] == b'<' { 1i32 } else { -1 })
  869|  1.35k|                        .sum::<i32>();
  870|  1.35k|                    if balance == 0 {
  871|     31|                        return Some((content, i + 1)); // +1 for `>`
  872|  1.32k|                    }
  873|       |                }
  874|       |            }
  875|       |        }
  876|     56|        None
  877|    166|    }
_RNvMs2_NtCs57NZtjOlRkW_9quick_xml6readerNtB5_16ReadElementState6change:
  904|  88.9k|    fn change<'b>(&mut self, chunk: &'b [u8]) -> Option<(&'b [u8], usize)> {
  905|   164k|        for i in memchr::memchr3_iter(b'>', b'\'', b'"', chunk) {
  906|   164k|            *self = match (*self, chunk[i]) {
  907|       |                // only allowed to match `>` while we are in state `Elem`
  908|  87.3k|                (Self::Elem, b'>') => return Some((&chunk[..i], i + 1)),
  909|  3.19k|                (Self::Elem, b'\'') => Self::SingleQ,
  910|  34.2k|                (Self::Elem, b'\"') => Self::DoubleQ,
  911|       |
  912|       |                // the only end_byte that gets us out if the same character
  913|  37.2k|                (Self::SingleQ, b'\'') | (Self::DoubleQ, b'"') => Self::Elem,
  914|       |
  915|       |                // all other bytes: no state change
  916|  2.32k|                _ => *self,
  917|       |            };
  918|       |        }
  919|  1.66k|        None
  920|  88.9k|    }
_RNvMNtNtCs57NZtjOlRkW_9quick_xml6reader9ns_readerINtB2_8NsReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE21expand_empty_elementsCshwa6i4jbVTh_7rdf_xml:
   33|  6.89k|        pub fn expand_empty_elements(&mut self, val: bool) -> &mut Self {
   34|  6.89k|            self $(.$holder)? .state.expand_empty_elements = val;
   35|  6.89k|            self
   36|  6.89k|        }
_RNvMs1_NtCs57NZtjOlRkW_9quick_xml6readerNtB5_8BangType6to_errCshwa6i4jbVTh_7rdf_xml:
  879|     56|    fn to_err(&self) -> Error {
  880|     56|        let bang_str = match self {
  881|     13|            Self::CData => "CData",
  882|     14|            Self::Comment => "Comment",
  883|     29|            Self::DocType => "DOCTYPE",
  884|       |        };
  885|     56|        Error::UnexpectedEof(bang_str.to_string())
  886|     56|    }
_RNCNvMs1_NtCs57NZtjOlRkW_9quick_xml6readerNtB7_8BangType5parse0B9_:
  868|   192k|                        .map(|p| if content[p] == b'<' { 1i32 } else { -1 })
_RNvMs1_NtCs57NZtjOlRkW_9quick_xml6readerNtB5_8BangType6to_errB7_:
  879|     36|    fn to_err(&self) -> Error {
  880|     36|        let bang_str = match self {
  881|      3|            Self::CData => "CData",
  882|      2|            Self::Comment => "Comment",
  883|     31|            Self::DocType => "DOCTYPE",
  884|       |        };
  885|     36|        Error::UnexpectedEof(bang_str.to_string())
  886|     36|    }
_RNvNtCs57NZtjOlRkW_9quick_xml6reader13is_whitespaceB3_:
  925|  1.78M|pub(crate) const fn is_whitespace(b: u8) -> bool {
  926|  1.78M|    matches!(b, b' ' | b'\r' | b'\n' | b'\t')
  927|  1.78M|}

_RINvMs_NtNtCs57NZtjOlRkW_9quick_xml6reader9ns_readerINtB5_8NsReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE15read_event_implQINtNtCs99O0fDgeGot_5alloc3vec3VechEECshwa6i4jbVTh_7rdf_xml:
   54|   246k|    fn read_event_impl<'i, B>(&mut self, buf: B) -> Result<Event<'i>>
   55|   246k|    where
   56|   246k|        R: XmlSource<'i, B>,
   57|   246k|    {
   58|   246k|        self.pop();
   59|   246k|        let event = self.reader.read_event_impl(buf);
   60|   246k|        self.process_event(event)
   61|   246k|    }
_RNvMNtNtCs57NZtjOlRkW_9quick_xml6reader9ns_readerINtB2_8NsReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE11from_readerCshwa6i4jbVTh_7rdf_xml:
   36|  6.89k|    pub fn from_reader(reader: R) -> Self {
   37|  6.89k|        Self::new(Reader::from_reader(reader))
   38|  6.89k|    }
_RNvMs0_NtNtCs57NZtjOlRkW_9quick_xml6reader9ns_readerINtB5_8NsReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE15resolve_elementCshwa6i4jbVTh_7rdf_xml:
  213|  88.6k|    pub fn resolve_element<'n>(&self, name: QName<'n>) -> (ResolveResult, LocalName<'n>) {
  214|  88.6k|        self.ns_resolver.resolve(name, true)
  215|  88.6k|    }
_RNvMs0_NtNtCs57NZtjOlRkW_9quick_xml6reader9ns_readerINtB5_8NsReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE17resolve_attributeCshwa6i4jbVTh_7rdf_xml:
  284|  22.1k|    pub fn resolve_attribute<'n>(&self, name: QName<'n>) -> (ResolveResult, LocalName<'n>) {
  285|  22.1k|        self.ns_resolver.resolve(name, false)
  286|  22.1k|    }
_RNvMs1_NtNtCs57NZtjOlRkW_9quick_xml6reader9ns_readerINtB5_8NsReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE15read_event_intoCshwa6i4jbVTh_7rdf_xml:
  343|   246k|    pub fn read_event_into<'b>(&mut self, buf: &'b mut Vec<u8>) -> Result<Event<'b>> {
  344|   246k|        self.read_event_impl(buf)
  345|   246k|    }
_RNvMs_NtNtCs57NZtjOlRkW_9quick_xml6reader9ns_readerINtB4_8NsReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE13process_eventCshwa6i4jbVTh_7rdf_xml:
   70|   246k|    pub(super) fn process_event<'i>(&mut self, event: Result<Event<'i>>) -> Result<Event<'i>> {
   71|   246k|        match event {
   72|  88.8k|            Ok(Event::Start(e)) => {
   73|  88.8k|                self.ns_resolver.push(&e)?;
   74|  88.6k|                Ok(Event::Start(e))
   75|       |            }
   76|      0|            Ok(Event::Empty(e)) => {
   77|      0|                self.ns_resolver.push(&e)?;
   78|       |                // notify next `read_event_impl()` invocation that it needs to pop this
   79|       |                // namespace scope
   80|      0|                self.pending_pop = true;
   81|      0|                Ok(Event::Empty(e))
   82|       |            }
   83|  36.8k|            Ok(Event::End(e)) => {
   84|  36.8k|                // notify next `read_event_impl()` invocation that it needs to pop this
   85|  36.8k|                // namespace scope
   86|  36.8k|                self.pending_pop = true;
   87|  36.8k|                Ok(Event::End(e))
   88|       |            }
   89|   120k|            e => e,
   90|       |        }
   91|   246k|    }
_RNvMs_NtNtCs57NZtjOlRkW_9quick_xml6reader9ns_readerINtB4_8NsReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE3newCshwa6i4jbVTh_7rdf_xml:
   46|  6.89k|    fn new(reader: Reader<R>) -> Self {
   47|  6.89k|        Self {
   48|  6.89k|            reader,
   49|  6.89k|            ns_resolver: NamespaceResolver::default(),
   50|  6.89k|            pending_pop: false,
   51|  6.89k|        }
   52|  6.89k|    }
_RNvMs_NtNtCs57NZtjOlRkW_9quick_xml6reader9ns_readerINtB4_8NsReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE3popCshwa6i4jbVTh_7rdf_xml:
   63|   246k|    pub(super) fn pop(&mut self) {
   64|   246k|        if self.pending_pop {
   65|  36.8k|            self.ns_resolver.pop();
   66|  36.8k|            self.pending_pop = false;
   67|   209k|        }
   68|   246k|    }
_RNvXs4_NtNtCs57NZtjOlRkW_9quick_xml6reader9ns_readerINtB5_8NsReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEENtNtNtCsiOGkCewTsZJ_4core3ops5deref5Deref5derefCshwa6i4jbVTh_7rdf_xml:
  827|   126k|    fn deref(&self) -> &Self::Target {
  828|   126k|        &self.reader
  829|   126k|    }

_RNvMNtNtCs57NZtjOlRkW_9quick_xml6reader5stateNtB2_11ReaderState20close_expanded_emptyCshwa6i4jbVTh_7rdf_xml:
  244|  16.8k|    pub fn close_expanded_empty(&mut self) -> Result<Event<'static>> {
  245|  16.8k|        self.state = ParseState::ClosedTag;
  246|  16.8k|        let name = self
  247|  16.8k|            .opened_buffer
  248|  16.8k|            .split_off(self.opened_starts.pop().unwrap());
  249|  16.8k|        Ok(Event::End(BytesEnd::wrap(name.into())))
  250|  16.8k|    }
_RNvMNtNtCs57NZtjOlRkW_9quick_xml6reader5stateNtB2_11ReaderState9emit_text:
   68|   106k|    pub fn emit_text<'b>(&mut self, bytes: &'b [u8]) -> Result<Event<'b>> {
   69|   106k|        let mut content = bytes;
   70|   106k|
   71|   106k|        if self.trim_text_end {
   72|      0|            // Skip the ending '<'
   73|      0|            let len = bytes
   74|      0|                .iter()
   75|      0|                .rposition(|&b| !is_whitespace(b))
   76|      0|                .map_or_else(|| bytes.len(), |p| p + 1);
   77|      0|            content = &bytes[..len];
   78|   106k|        }
   79|       |
   80|   106k|        Ok(Event::Text(BytesText::wrap(content, self.decoder())))
   81|   106k|    }
_RNvMNtNtCs57NZtjOlRkW_9quick_xml6reader5stateNtB2_11ReaderState9emit_bang:
   85|    110|    pub fn emit_bang<'b>(&mut self, bang_type: BangType, buf: &'b [u8]) -> Result<Event<'b>> {
   86|    110|        let uncased_starts_with = |string: &[u8], prefix: &[u8]| {
   87|       |            string.len() >= prefix.len() && string[..prefix.len()].eq_ignore_ascii_case(prefix)
   88|       |        };
   89|       |
   90|    110|        let len = buf.len();
   91|     34|        match bang_type {
   92|     76|            BangType::Comment if buf.starts_with(b"!--") => {
   93|     74|                debug_assert!(buf.ends_with(b"--"));
   94|     74|                if self.check_comments {
   95|       |                    // search if '--' not in comments
   96|      0|                    if let Some(p) = memchr::memchr_iter(b'-', &buf[3..len - 2])
   97|      0|                        .position(|p| buf[3 + p + 1] == b'-')
   98|       |                    {
   99|      0|                        self.offset += len - p;
  100|      0|                        return Err(Error::UnexpectedToken("--".to_string()));
  101|      0|                    }
  102|     74|                }
  103|     74|                Ok(Event::Comment(BytesText::wrap(
  104|     74|                    &buf[3..len - 2],
  105|     74|                    self.decoder(),
  106|     74|                )))
  107|       |            }
  108|      3|            BangType::CData if uncased_starts_with(buf, b"![CDATA[") => {
  109|      0|                debug_assert!(buf.ends_with(b"]]"));
  110|      0|                Ok(Event::CData(BytesCData::wrap(
  111|      0|                    &buf[8..len - 2],
  112|      0|                    self.decoder(),
  113|      0|                )))
  114|       |            }
  115|     31|            BangType::DocType if uncased_starts_with(buf, b"!DOCTYPE") => {
  116|      0|                let start = buf[8..]
  117|      0|                    .iter()
  118|      0|                    .position(|b| !is_whitespace(*b))
  119|      0|                    .unwrap_or(len - 8);
  120|      0|                if start + 8 >= len {
  121|      0|                    return Err(Error::EmptyDocType);
  122|      0|                }
  123|      0|                Ok(Event::DocType(BytesText::wrap(
  124|      0|                    &buf[8 + start..],
  125|      0|                    self.decoder(),
  126|      0|                )))
  127|       |            }
  128|     36|            _ => Err(bang_type.to_err()),
  129|       |        }
  130|    110|    }
_RNCNvMNtNtCs57NZtjOlRkW_9quick_xml6reader5stateNtB4_11ReaderState9emit_bang0B8_:
   86|     34|        let uncased_starts_with = |string: &[u8], prefix: &[u8]| {
   87|     34|            string.len() >= prefix.len() && string[..prefix.len()].eq_ignore_ascii_case(prefix)
   88|     34|        };
_RNvMNtNtCs57NZtjOlRkW_9quick_xml6reader5stateNtB2_11ReaderState8emit_end:
  134|  20.0k|    pub fn emit_end<'b>(&mut self, buf: &'b [u8]) -> Result<Event<'b>> {
  135|  20.0k|        // Strip the `/` character. `content` contains data between `</` and `>`
  136|  20.0k|        let content = &buf[1..];
  137|       |        // XML standard permits whitespaces after the markup name in closing tags.
  138|       |        // Let's strip them from the buffer before comparing tag names.
  139|  20.0k|        let name = if self.trim_markup_names_in_closing_tags {
  140|  20.0k|            if let Some(pos_end_name) = content.iter().rposition(|&b| !is_whitespace(b)) {
  141|  17.7k|                &content[..pos_end_name + 1]
  142|       |            } else {
  143|  2.31k|                content
  144|       |            }
  145|       |        } else {
  146|      0|            content
  147|       |        };
  148|       |
  149|  20.0k|        let decoder = self.decoder();
  150|  20.0k|        let mismatch_err = |expected: String, found: &[u8], offset: &mut usize| {
  151|       |            *offset -= buf.len();
  152|       |            Err(Error::EndEventMismatch {
  153|       |                expected,
  154|       |                found: decoder.decode(found).unwrap_or_default().into_owned(),
  155|       |            })
  156|       |        };
  157|       |
  158|       |        // Get the index in self.opened_buffer of the name of the last opened tag
  159|  20.0k|        match self.opened_starts.pop() {
  160|  20.0k|            Some(start) => {
  161|  20.0k|                if self.check_end_names {
  162|  20.0k|                    let expected = &self.opened_buffer[start..];
  163|  20.0k|                    if name != expected {
  164|      9|                        let expected = decoder.decode(expected).unwrap_or_default().into_owned();
  165|      9|                        // #513: In order to allow error recovery we should drop content of the buffer
  166|      9|                        self.opened_buffer.truncate(start);
  167|      9|
  168|      9|                        return mismatch_err(expected, name, &mut self.offset);
  169|  19.9k|                    }
  170|      0|                }
  171|       |
  172|  19.9k|                self.opened_buffer.truncate(start);
  173|       |            }
  174|       |            None => {
  175|     42|                if self.check_end_names {
  176|     42|                    return mismatch_err("".to_string(), &buf[1..], &mut self.offset);
  177|      0|                }
  178|       |            }
  179|       |        }
  180|       |
  181|  19.9k|        Ok(Event::End(BytesEnd::wrap(name.into())))
  182|  20.0k|    }
_RNCNvMNtNtCs57NZtjOlRkW_9quick_xml6reader5stateNtB4_11ReaderState8emit_end0B8_:
  140|  18.5k|            if let Some(pos_end_name) = content.iter().rposition(|&b| !is_whitespace(b)) {
_RNCNvMNtNtCs57NZtjOlRkW_9quick_xml6reader5stateNtB4_11ReaderState8emit_ends_0B8_:
  150|     51|        let mismatch_err = |expected: String, found: &[u8], offset: &mut usize| {
  151|     51|            *offset -= buf.len();
  152|     51|            Err(Error::EndEventMismatch {
  153|     51|                expected,
  154|     51|                found: decoder.decode(found).unwrap_or_default().into_owned(),
  155|     51|            })
  156|     51|        };
_RNvMNtNtCs57NZtjOlRkW_9quick_xml6reader5stateNtB2_11ReaderState18emit_question_mark:
  186|  6.45k|    pub fn emit_question_mark<'b>(&mut self, buf: &'b [u8]) -> Result<Event<'b>> {
  187|  6.45k|        let len = buf.len();
  188|  6.45k|        if len > 2 && buf[len - 1] == b'?' {
  189|  6.38k|            if len > 5 && &buf[1..4] == b"xml" && is_whitespace(buf[4]) {
  190|  5.39k|                let event = BytesDecl::from_start(BytesStart::wrap(&buf[1..len - 1], 3));
  191|  5.39k|
  192|  5.39k|                // Try getting encoding from the declaration event
  193|  5.39k|                #[cfg(feature = "encoding")]
  194|  5.39k|                if self.encoding.can_be_refined() {
  195|  5.39k|                    if let Some(encoding) = event.encoder() {
  196|  5.39k|                        self.encoding = EncodingRef::XmlDetected(encoding);
  197|  5.39k|                    }
  198|  5.39k|                }
  199|  5.39k|
  200|  5.39k|                Ok(Event::Decl(event))
  201|       |            } else {
  202|    991|                Ok(Event::PI(BytesText::wrap(&buf[1..len - 1], self.decoder())))
  203|       |            }
  204|       |        } else {
  205|     62|            self.offset -= len;
  206|     62|            Err(Error::UnexpectedEof("XmlDecl".to_string()))
  207|       |        }
  208|  6.45k|    }
_RNvMNtNtCs57NZtjOlRkW_9quick_xml6reader5stateNtB2_11ReaderState10emit_start:
  214|  88.8k|    pub fn emit_start<'b>(&mut self, content: &'b [u8]) -> Result<Event<'b>> {
  215|  88.8k|        let len = content.len();
  216|  88.8k|        let name_end = content
  217|  88.8k|            .iter()
  218|  88.8k|            .position(|&b| is_whitespace(b))
  219|  88.8k|            .unwrap_or(len);
  220|  88.8k|        if let Some(&b'/') = content.last() {
  221|       |            // This is self-closed tag `<something/>`
  222|  16.8k|            let name_len = if name_end < len { name_end } else { len - 1 };
  223|  16.8k|            let event = BytesStart::wrap(&content[..len - 1], name_len);
  224|  16.8k|
  225|  16.8k|            if self.expand_empty_elements {
  226|  16.8k|                self.state = ParseState::Empty;
  227|  16.8k|                self.opened_starts.push(self.opened_buffer.len());
  228|  16.8k|                self.opened_buffer.extend(&content[..name_len]);
  229|  16.8k|                Ok(Event::Start(event))
  230|       |            } else {
  231|      0|                Ok(Event::Empty(event))
  232|       |            }
  233|       |        } else {
  234|       |            // #514: Always store names event when .check_end_names == false,
  235|       |            // because checks can be temporary disabled and when they would be
  236|       |            // enabled, we should have that information
  237|  72.0k|            self.opened_starts.push(self.opened_buffer.len());
  238|  72.0k|            self.opened_buffer.extend(&content[..name_end]);
  239|  72.0k|            Ok(Event::Start(BytesStart::wrap(content, name_end)))
  240|       |        }
  241|  88.8k|    }
_RNCNvMNtNtCs57NZtjOlRkW_9quick_xml6reader5stateNtB4_11ReaderState10emit_start0B8_:
  218|   780k|            .position(|&b| is_whitespace(b))
_RNvMNtNtCs57NZtjOlRkW_9quick_xml6reader5stateNtB2_11ReaderState7decoder:
  261|   254k|    pub fn decoder(&self) -> Decoder {
  262|   254k|        Decoder {
  263|   254k|            #[cfg(feature = "encoding")]
  264|   254k|            encoding: self.encoding.encoding(),
  265|   254k|        }
  266|   254k|    }
_RNvXs_NtNtCs57NZtjOlRkW_9quick_xml6reader5stateNtB4_11ReaderStateNtNtCsiOGkCewTsZJ_4core7default7Default7default:
  270|  6.89k|    fn default() -> Self {
  271|  6.89k|        Self {
  272|  6.89k|            offset: 0,
  273|  6.89k|            state: ParseState::Init,
  274|  6.89k|            expand_empty_elements: false,
  275|  6.89k|            trim_text_start: false,
  276|  6.89k|            trim_text_end: false,
  277|  6.89k|            trim_markup_names_in_closing_tags: true,
  278|  6.89k|            check_end_names: true,
  279|  6.89k|            check_comments: false,
  280|  6.89k|            opened_buffer: Vec::new(),
  281|  6.89k|            opened_starts: Vec::new(),
  282|  6.89k|
  283|  6.89k|            #[cfg(feature = "encoding")]
  284|  6.89k|            encoding: EncodingRef::Implicit(UTF_8),
  285|  6.89k|        }
  286|  6.89k|    }

_RINvMs_NtCs57NZtjOlRkW_9quick_xml6writerINtB5_6WriterINtNtCs99O0fDgeGot_5alloc3vec3VechEE11write_eventNtNtB7_6events5EventECshwa6i4jbVTh_7rdf_xml:
  193|  52.7k|    pub fn write_event<'a, E: AsRef<Event<'a>>>(&mut self, event: E) -> Result<()> {
  194|  52.7k|        let mut next_should_line_break = true;
  195|  52.7k|        let result = match *event.as_ref() {
  196|  17.7k|            Event::Start(ref e) => {
  197|  17.7k|                let result = self.write_wrapped(b"<", e, b">");
  198|  17.7k|                if let Some(i) = self.indent.as_mut() {
  199|  17.7k|                    i.grow();
  200|  17.7k|                }
  201|  17.7k|                result
  202|       |            }
  203|  17.7k|            Event::End(ref e) => {
  204|  17.7k|                if let Some(i) = self.indent.as_mut() {
  205|  17.7k|                    i.shrink();
  206|  17.7k|                }
  207|  17.7k|                self.write_wrapped(b"</", e, b">")
  208|       |            }
  209|  10.8k|            Event::Empty(ref e) => self.write_wrapped(b"<", e, b"/>"),
  210|  3.07k|            Event::Text(ref e) => {
  211|  3.07k|                next_should_line_break = false;
  212|  3.07k|                self.write(e)
  213|       |            }
  214|      0|            Event::Comment(ref e) => self.write_wrapped(b"<!--", e, b"-->"),
  215|      0|            Event::CData(ref e) => {
  216|      0|                next_should_line_break = false;
  217|      0|                self.write(b"<![CDATA[")?;
  218|      0|                self.write(e)?;
  219|      0|                self.write(b"]]>")
  220|       |            }
  221|  3.44k|            Event::Decl(ref e) => self.write_wrapped(b"<?", e, b"?>"),
  222|      0|            Event::PI(ref e) => self.write_wrapped(b"<?", e, b"?>"),
  223|      0|            Event::DocType(ref e) => self.write_wrapped(b"<!DOCTYPE ", e, b">"),
  224|      0|            Event::Eof => Ok(()),
  225|       |        };
  226|  52.7k|        if let Some(i) = self.indent.as_mut() {
  227|  52.7k|            i.should_line_break = next_should_line_break;
  228|  52.7k|        }
  229|  52.7k|        result
  230|  52.7k|    }
_RNvMNtCs57NZtjOlRkW_9quick_xml6writerINtB2_6WriterINtNtCs99O0fDgeGot_5alloc3vec3VechEE10into_innerCshwa6i4jbVTh_7rdf_xml:
   88|  3.44k|    pub fn into_inner(self) -> W {
   89|  3.44k|        self.writer
   90|  3.44k|    }
_RNvMNtCs57NZtjOlRkW_9quick_xml6writerINtB2_6WriterINtNtCs99O0fDgeGot_5alloc3vec3VechEE15new_with_indentCshwa6i4jbVTh_7rdf_xml:
   80|  3.44k|    pub fn new_with_indent(inner: W, indent_char: u8, indent_size: usize) -> Writer<W> {
   81|  3.44k|        Writer {
   82|  3.44k|            writer: inner,
   83|  3.44k|            indent: Some(Indentation::new(indent_char, indent_size)),
   84|  3.44k|        }
   85|  3.44k|    }
_RNvMs_NtCs57NZtjOlRkW_9quick_xml6writerINtB4_6WriterINtNtCs99O0fDgeGot_5alloc3vec3VechEE13write_wrappedCshwa6i4jbVTh_7rdf_xml:
  239|  49.6k|    fn write_wrapped(&mut self, before: &[u8], value: &[u8], after: &[u8]) -> Result<()> {
  240|  49.6k|        if let Some(ref i) = self.indent {
  241|  49.6k|            if i.should_line_break {
  242|  43.1k|                self.writer.write_all(b"\n")?;
  243|  43.1k|                self.writer.write_all(i.current())?;
  244|  6.51k|            }
  245|      0|        }
  246|  49.6k|        self.write(before)?;
  247|  49.6k|        self.write(value)?;
  248|  49.6k|        self.write(after)?;
  249|  49.6k|        Ok(())
  250|  49.6k|    }
_RNvMs_NtCs57NZtjOlRkW_9quick_xml6writerINtB4_6WriterINtNtCs99O0fDgeGot_5alloc3vec3VechEE5writeCshwa6i4jbVTh_7rdf_xml:
  234|   152k|    pub(crate) fn write(&mut self, value: &[u8]) -> Result<()> {
  235|   152k|        self.writer.write_all(value).map_err(Into::into)
  236|   152k|    }
_RNvMs2_NtCs57NZtjOlRkW_9quick_xml6writerNtB5_11Indentation3new:
  448|  3.44k|    pub fn new(indent_char: u8, indent_size: usize) -> Self {
  449|  3.44k|        Self {
  450|  3.44k|            should_line_break: false,
  451|  3.44k|            indent_char,
  452|  3.44k|            indent_size,
  453|  3.44k|            indents: vec![indent_char; 128],
  454|  3.44k|            current_indent_len: 0, // invariant - needs to remain less than indents.len()
  455|  3.44k|        }
  456|  3.44k|    }
_RNvMs2_NtCs57NZtjOlRkW_9quick_xml6writerNtB5_11Indentation4grow:
  459|  17.7k|    pub fn grow(&mut self) {
  460|  17.7k|        self.current_indent_len += self.indent_size;
  461|  17.7k|        if self.current_indent_len > self.indents.len() {
  462|      0|            self.indents
  463|      0|                .resize(self.current_indent_len, self.indent_char);
  464|  17.7k|        }
  465|  17.7k|    }
_RNvMs2_NtCs57NZtjOlRkW_9quick_xml6writerNtB5_11Indentation6shrink:
  468|  17.7k|    pub fn shrink(&mut self) {
  469|  17.7k|        self.current_indent_len = self.current_indent_len.saturating_sub(self.indent_size);
  470|  17.7k|    }
_RNvMs2_NtCs57NZtjOlRkW_9quick_xml6writerNtB5_11Indentation7current:
  473|  43.1k|    pub fn current(&self) -> &[u8] {
  474|  43.1k|        &self.indents[..self.current_indent_len]
  475|  43.1k|    }

_RINvXs2_NtNtCsl4BnFT4nv7q_4rand13distributions7integerNtB8_8StandardINtNtB8_12distribution12DistributionoE6sampleNtNtNtBa_4rngs6thread9ThreadRngECshwa6i4jbVTh_7rdf_xml:
   51|  26.8k|    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u128 {
   52|  26.8k|        // Use LE; we explicitly generate one value before the next.
   53|  26.8k|        let x = u128::from(rng.next_u64());
   54|  26.8k|        let y = u128::from(rng.next_u64());
   55|  26.8k|        (y << 64) | x
   56|  26.8k|    }

_RINvCsl4BnFT4nv7q_4rand6randomoECshwa6i4jbVTh_7rdf_xml:
  183|  26.8k|pub fn random<T>() -> T
  184|  26.8k|where Standard: Distribution<T> {
  185|  26.8k|    thread_rng().gen()
  186|  26.8k|}

_RINvYNtNtNtCsl4BnFT4nv7q_4rand4rngs6thread9ThreadRngNtNtB9_3rng3Rng3genoECshwa6i4jbVTh_7rdf_xml:
   93|  26.8k|    fn gen<T>(&mut self) -> T
   94|  26.8k|    where Standard: Distribution<T> {
   95|  26.8k|        Standard.sample(self)
   96|  26.8k|    }

_RNvXs_NtNtNtCsl4BnFT4nv7q_4rand4rngs7adapter9reseedingINtB4_12ReseedingRngNtNtCs2yNTBgp2ry1_11rand_chacha6chacha12ChaCha12CoreNtNtCs3pbe4n6p45A_9rand_core2os5OsRngENtB24_7RngCore8next_u64Cshwa6i4jbVTh_7rdf_xml:
  124|  53.6k|    fn next_u64(&mut self) -> u64 {
  125|  53.6k|        self.0.next_u64()
  126|  53.6k|    }
_RNvMNtNtNtCsl4BnFT4nv7q_4rand4rngs7adapter9reseedingINtB2_12ReseedingRngNtNtCs2yNTBgp2ry1_11rand_chacha6chacha12ChaCha12CoreNtNtCs3pbe4n6p45A_9rand_core2os5OsRngE3newB8_:
  101|      1|    pub fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  102|      1|        ReseedingRng(BlockRng::new(ReseedingCore::new(rng, threshold, reseeder)))
  103|      1|    }
_RNvXs2_NtNtNtCsl4BnFT4nv7q_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs2yNTBgp2ry1_11rand_chacha6chacha12ChaCha12CoreNtNtCs3pbe4n6p45A_9rand_core2os5OsRngENtNtB26_5block12BlockRngCore8generateBb_:
  173|  1.67k|    fn generate(&mut self, results: &mut Self::Results) {
  174|  1.67k|        let global_fork_counter = fork::get_fork_counter();
  175|  1.67k|        if self.bytes_until_reseed <= 0 || self.is_forked(global_fork_counter) {
  176|       |            // We get better performance by not calling only `reseed` here
  177|       |            // and continuing with the rest of the function, but by directly
  178|       |            // returning from a non-inlined function.
  179|      6|            return self.reseed_and_generate(results, global_fork_counter);
  180|  1.67k|        }
  181|  1.67k|        let num_bytes = results.as_ref().len() * size_of::<Self::Item>();
  182|  1.67k|        self.bytes_until_reseed -= num_bytes as i64;
  183|  1.67k|        self.inner.generate(results);
  184|  1.67k|    }
_RNvMs3_NtNtNtCsl4BnFT4nv7q_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs2yNTBgp2ry1_11rand_chacha6chacha12ChaCha12CoreNtNtCs3pbe4n6p45A_9rand_core2os5OsRngE3newBb_:
  193|      1|    fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  194|      1|        use ::core::i64::MAX;
  195|      1|        fork::register_fork_handler();
  196|       |
  197|       |        // Because generating more values than `i64::MAX` takes centuries on
  198|       |        // current hardware, we just clamp to that value.
  199|       |        // Also we set a threshold of 0, which indicates no limit, to that
  200|       |        // value.
  201|      1|        let threshold = if threshold == 0 {
  202|      0|            MAX
  203|      1|        } else if threshold <= MAX as u64 {
  204|      1|            threshold as i64
  205|       |        } else {
  206|      0|            MAX
  207|       |        };
  208|       |
  209|      1|        ReseedingCore {
  210|      1|            inner: rng,
  211|      1|            reseeder,
  212|      1|            threshold: threshold as i64,
  213|      1|            bytes_until_reseed: threshold as i64,
  214|      1|            fork_counter: 0,
  215|      1|        }
  216|      1|    }
_RNvMs3_NtNtNtCsl4BnFT4nv7q_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs2yNTBgp2ry1_11rand_chacha6chacha12ChaCha12CoreNtNtCs3pbe4n6p45A_9rand_core2os5OsRngE6reseedBb_:
  219|      6|    fn reseed(&mut self) -> Result<(), Error> {
  220|      6|        R::from_rng(&mut self.reseeder).map(|result| {
  221|       |            self.bytes_until_reseed = self.threshold;
  222|       |            self.inner = result
  223|      6|        })
  224|      6|    }
_RNCNvMs3_NtNtNtCsl4BnFT4nv7q_4rand4rngs7adapter9reseedingINtB7_13ReseedingCoreNtNtCs2yNTBgp2ry1_11rand_chacha6chacha12ChaCha12CoreNtNtCs3pbe4n6p45A_9rand_core2os5OsRngE6reseed0Bd_:
  220|      6|        R::from_rng(&mut self.reseeder).map(|result| {
  221|      6|            self.bytes_until_reseed = self.threshold;
  222|      6|            self.inner = result
  223|      6|        })
_RNvMs3_NtNtNtCsl4BnFT4nv7q_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs2yNTBgp2ry1_11rand_chacha6chacha12ChaCha12CoreNtNtCs3pbe4n6p45A_9rand_core2os5OsRngE9is_forkedBb_:
  226|  1.67k|    fn is_forked(&self, global_fork_counter: usize) -> bool {
  227|  1.67k|        // In theory, on 32-bit platforms, it is possible for
  228|  1.67k|        // `global_fork_counter` to wrap around after ~4e9 forks.
  229|  1.67k|        //
  230|  1.67k|        // This check will detect a fork in the normal case where
  231|  1.67k|        // `fork_counter < global_fork_counter`, and also when the difference
  232|  1.67k|        // between both is greater than `isize::MAX` (wrapped around).
  233|  1.67k|        //
  234|  1.67k|        // It will still fail to detect a fork if there have been more than
  235|  1.67k|        // `isize::MAX` forks, without any reseed in between. Seems unlikely
  236|  1.67k|        // enough.
  237|  1.67k|        (self.fork_counter.wrapping_sub(global_fork_counter) as isize) < 0
  238|  1.67k|    }
_RNvMs3_NtNtNtCsl4BnFT4nv7q_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs2yNTBgp2ry1_11rand_chacha6chacha12ChaCha12CoreNtNtCs3pbe4n6p45A_9rand_core2os5OsRngE19reseed_and_generateBb_:
  241|      6|    fn reseed_and_generate(
  242|      6|        &mut self, results: &mut <Self as BlockRngCore>::Results, global_fork_counter: usize,
  243|      6|    ) {
  244|      6|        #![allow(clippy::if_same_then_else)] // false positive
  245|      6|        if self.is_forked(global_fork_counter) {
  246|      0|            info!("Fork detected, reseeding RNG");
  247|      6|        } else {
  248|      6|            trace!("Reseeding RNG (periodic reseed)");
  249|      6|        }
  250|       |
  251|      6|        let num_bytes = results.as_ref().len() * size_of::<<R as BlockRngCore>::Item>();
  252|       |
  253|      6|        if let Err(e) = self.reseed() {
  254|      0|            warn!("Reseeding RNG failed: {}", e);
  255|      0|            let _ = e;
  256|      6|        }
  257|      6|        self.fork_counter = global_fork_counter;
  258|      6|
  259|      6|        self.bytes_until_reseed = self.threshold - num_bytes as i64;
  260|      6|        self.inner.generate(results);
  261|      6|    }
_RNvNtNtNtNtCsl4BnFT4nv7q_4rand4rngs7adapter9reseeding4fork16get_fork_counter:
  307|  1.67k|    pub fn get_fork_counter() -> usize {
  308|  1.67k|        RESEEDING_RNG_FORK_COUNTER.load(Ordering::Relaxed)
  309|  1.67k|    }
_RNvNtNtNtNtCsl4BnFT4nv7q_4rand4rngs7adapter9reseeding4fork21register_fork_handler:
  317|      1|    pub fn register_fork_handler() {
  318|      1|        static REGISTER: Once = Once::new();
  319|      1|        REGISTER.call_once(|| {
  320|       |            // Bump the counter before and after forking (see #1169):
  321|       |            let ret = unsafe { libc::pthread_atfork(
  322|       |                Some(fork_handler),
  323|       |                Some(fork_handler),
  324|       |                Some(fork_handler),
  325|       |            ) };
  326|       |            if ret != 0 {
  327|       |                panic!("libc::pthread_atfork failed with code {}", ret);
  328|       |            }
  329|      1|        });
  330|      1|    }
_RNCNvNtNtNtNtCsl4BnFT4nv7q_4rand4rngs7adapter9reseeding4fork21register_fork_handler0Bb_:
  319|      1|        REGISTER.call_once(|| {
  320|      1|            // Bump the counter before and after forking (see #1169):
  321|      1|            let ret = unsafe { libc::pthread_atfork(
  322|      1|                Some(fork_handler),
  323|      1|                Some(fork_handler),
  324|      1|                Some(fork_handler),
  325|      1|            ) };
  326|      1|            if ret != 0 {
  327|      0|                panic!("libc::pthread_atfork failed with code {}", ret);
  328|      1|            }
  329|      1|        });

_RNvXs_NtNtCsl4BnFT4nv7q_4rand4rngs6threadNtB4_9ThreadRngNtCs3pbe4n6p45A_9rand_core7RngCore8next_u64:
  109|  53.6k|    fn next_u64(&mut self) -> u64 {
  110|  53.6k|        // SAFETY: We must make sure to stop using `rng` before anyone else
  111|  53.6k|        // creates another mutable reference
  112|  53.6k|        let rng = unsafe { &mut *self.rng.get() };
  113|  53.6k|        rng.next_u64()
  114|  53.6k|    }
_RNvNtNtCsl4BnFT4nv7q_4rand4rngs6thread10thread_rng:
   88|  26.8k|pub fn thread_rng() -> ThreadRng {
   89|  26.8k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
   90|  26.8k|    ThreadRng { rng }
   91|  26.8k|}
_RNCNvNtNtCsl4BnFT4nv7q_4rand4rngs6thread10thread_rng0B7_:
   89|  26.8k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
_RNCNvNvNtNtCsl4BnFT4nv7q_4rand4rngs6thread14THREAD_RNG_KEY7___getit0B9_:
   67|      1|thread_local!(
   68|      1|    // We require Rc<..> to avoid premature freeing when thread_rng is used
   69|      1|    // within thread-local destructors. See #968.
   70|      1|    static THREAD_RNG_KEY: Rc<UnsafeCell<ReseedingRng<Core, OsRng>>> = {
   71|      1|        let r = Core::from_rng(OsRng).unwrap_or_else(|err|
   72|      1|                panic!("could not initialize thread_rng: {}", err));
   73|      1|        let rng = ReseedingRng::new(r,
   74|      1|                                    THREAD_RNG_RESEED_THRESHOLD,
   75|      1|                                    OsRng);
   76|      1|        Rc::new(UnsafeCell::new(rng))
   77|      1|    }
   78|      1|);

_RNvXsm_NtCs2yNTBgp2ry1_11rand_chacha6chachaNtB5_12ChaCha12CoreNtNtCs3pbe4n6p45A_9rand_core5block12BlockRngCore8generateCsl4BnFT4nv7q_4rand:
   89|  1.67k|            fn generate(&mut self, r: &mut Self::Results) {
   90|  1.67k|                // Fill slice of words by writing to equivalent slice of bytes, then fixing endianness.
   91|  1.67k|                self.state.refill4($rounds, unsafe {
   92|  1.67k|                    &mut *(&mut *r as *mut Array64<u32> as *mut [u8; 256])
   93|  1.67k|                });
   94|   107k|                for x in r.as_mut() {
   95|   107k|                    *x = x.to_le();
   96|   107k|                }
   97|  1.67k|            }
_RNvXsn_NtCs2yNTBgp2ry1_11rand_chacha6chachaNtB5_12ChaCha12CoreNtCs3pbe4n6p45A_9rand_core11SeedableRng9from_seedCsl4BnFT4nv7q_4rand:
  103|      7|            fn from_seed(seed: Self::Seed) -> Self {
  104|      7|                $ChaChaXCore { state: ChaCha::new(&seed, &[0u8; 8]) }
  105|      7|            }
_RNvXs_NtCs2yNTBgp2ry1_11rand_chacha6chachaINtB4_7Array64mEINtNtCsiOGkCewTsZJ_4core7convert5AsRefSmE6as_refB6_:
   46|   110k|    fn as_ref(&self) -> &[T] {
   47|   110k|        &self.0
   48|   110k|    }
_RNvXs0_NtCs2yNTBgp2ry1_11rand_chacha6chachaINtB5_7Array64mEINtNtCsiOGkCewTsZJ_4core7convert5AsMutSmE6as_mutB7_:
   51|  1.67k|    fn as_mut(&mut self) -> &mut [T] {
   52|  1.67k|        &mut self.0
   53|  1.67k|    }
_RNvXNtCs2yNTBgp2ry1_11rand_chacha6chachaINtB2_7Array64mENtNtCsiOGkCewTsZJ_4core7default7Default7defaultB4_:
   32|      1|    fn default() -> Self {
   33|      1|        Self([
   34|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   35|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   36|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   37|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   38|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   39|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   40|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   41|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   42|      1|        ])
   43|      1|    }

_RNvMNtCs2yNTBgp2ry1_11rand_chacha4gutsNtB2_6ChaCha3new:
   72|      7|    pub fn new(key: &[u8; 32], nonce: &[u8]) -> Self {
   73|      7|        init_chacha(key, nonce)
   74|      7|    }
_RNvMNtCs2yNTBgp2ry1_11rand_chacha4gutsNtB2_6ChaCha7refill4:
   84|  1.67k|    pub fn refill4(&mut self, drounds: u32, out: &mut [u8; BUFSZ]) {
   85|  1.67k|        refill_wide(self, drounds, out)
   86|  1.67k|    }
_RINvNtCs2yNTBgp2ry1_11rand_chacha4guts5roundINtNtCseEYaiX76wcq_10ppv_lite864soft2x2INtNtNtNtBL_6x86_644sse24avx212u32x4x2_avx2NtB1q_4NoNIENtB1o_2G0EEB4_:
   43|  20.1k|pub(crate) fn round<V: ArithOps + BitOps32>(mut x: State<V>) -> State<V> {
   44|  20.1k|    x.a += x.b;
   45|  20.1k|    x.d = (x.d ^ x.a).rotate_each_word_right16();
   46|  20.1k|    x.c += x.d;
   47|  20.1k|    x.b = (x.b ^ x.c).rotate_each_word_right20();
   48|  20.1k|    x.a += x.b;
   49|  20.1k|    x.d = (x.d ^ x.a).rotate_each_word_right24();
   50|  20.1k|    x.c += x.d;
   51|  20.1k|    x.b = (x.b ^ x.c).rotate_each_word_right25();
   52|  20.1k|    x
   53|  20.1k|}
_RINvNtCs2yNTBgp2ry1_11rand_chacha4guts11diagonalizeINtNtCseEYaiX76wcq_10ppv_lite864soft2x2INtNtNtNtBS_6x86_644sse24avx212u32x4x2_avx2NtB1x_4NoNIENtB1v_2G0EEB4_:
   56|  10.0k|pub(crate) fn diagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   57|  10.0k|    x.b = x.b.shuffle_lane_words3012();
   58|  10.0k|    x.c = x.c.shuffle_lane_words2301();
   59|  10.0k|    x.d = x.d.shuffle_lane_words1230();
   60|  10.0k|    x
   61|  10.0k|}
_RINvNtCs2yNTBgp2ry1_11rand_chacha4guts13undiagonalizeINtNtCseEYaiX76wcq_10ppv_lite864soft2x2INtNtNtNtBU_6x86_644sse24avx212u32x4x2_avx2NtB1z_4NoNIENtB1x_2G0EEB4_:
   63|  10.0k|pub(crate) fn undiagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   64|  10.0k|    x.b = x.b.shuffle_lane_words1230();
   65|  10.0k|    x.c = x.c.shuffle_lane_words2301();
   66|  10.0k|    x.d = x.d.shuffle_lane_words3012();
   67|  10.0k|    x
   68|  10.0k|}
_RINvMNtCs2yNTBgp2ry1_11rand_chacha4gutsNtB3_6ChaCha5pos64INtNtCseEYaiX76wcq_10ppv_lite866x86_6411Avx2MachineNtBW_4NoNIEEB5_:
   77|  3.35k|    fn pos64<M: Machine>(&self, m: M) -> u64 {
   78|  3.35k|        let d: M::u32x4 = m.unpack(self.d);
   79|  3.35k|        ((d.extract(1) as u64) << 32) | d.extract(0) as u64
   80|  3.35k|    }
_RINvNtCs2yNTBgp2ry1_11rand_chacha4guts16refill_wide_implINtNtCseEYaiX76wcq_10ppv_lite866x86_6411Avx2MachineNtBV_4NoNIEEB4_:
  116|  1.67k|fn refill_wide_impl<Mach: Machine>(
  117|  1.67k|    m: Mach, state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ],
  118|  1.67k|) {
  119|  1.67k|    let k = m.vec([0x6170_7865, 0x3320_646e, 0x7962_2d32, 0x6b20_6574]);
  120|  1.67k|    let mut pos = state.pos64(m);
  121|  1.67k|    let d0: Mach::u32x4 = m.unpack(state.d);
  122|  1.67k|    pos = pos.wrapping_add(1);
  123|  1.67k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  124|  1.67k|    pos = pos.wrapping_add(1);
  125|  1.67k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  126|  1.67k|    pos = pos.wrapping_add(1);
  127|  1.67k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  128|  1.67k|
  129|  1.67k|    let b = m.unpack(state.b);
  130|  1.67k|    let c = m.unpack(state.c);
  131|  1.67k|    let mut x = State {
  132|  1.67k|        a: Mach::u32x4x4::from_lanes([k, k, k, k]),
  133|  1.67k|        b: Mach::u32x4x4::from_lanes([b, b, b, b]),
  134|  1.67k|        c: Mach::u32x4x4::from_lanes([c, c, c, c]),
  135|  1.67k|        d: m.unpack(Mach::u32x4x4::from_lanes([d0, d1, d2, d3]).into()),
  136|  1.67k|    };
  137|  10.0k|    for _ in 0..drounds {
  138|  10.0k|        x = round(x);
  139|  10.0k|        x = undiagonalize(round(diagonalize(x)));
  140|  10.0k|    }
  141|  1.67k|    let mut pos = state.pos64(m);
  142|  1.67k|    let d0: Mach::u32x4 = m.unpack(state.d);
  143|  1.67k|    pos = pos.wrapping_add(1);
  144|  1.67k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  145|  1.67k|    pos = pos.wrapping_add(1);
  146|  1.67k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  147|  1.67k|    pos = pos.wrapping_add(1);
  148|  1.67k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  149|  1.67k|    pos = pos.wrapping_add(1);
  150|  1.67k|    let d4 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  151|  1.67k|
  152|  1.67k|    let (a, b, c, d) = (
  153|  1.67k|        x.a.to_lanes(),
  154|  1.67k|        x.b.to_lanes(),
  155|  1.67k|        x.c.to_lanes(),
  156|  1.67k|        x.d.to_lanes(),
  157|  1.67k|    );
  158|  1.67k|    let sb = m.unpack(state.b);
  159|  1.67k|    let sc = m.unpack(state.c);
  160|  1.67k|    let sd = [m.unpack(state.d), d1, d2, d3];
  161|  1.67k|    state.d = d4.into();
  162|  1.67k|    let mut words = out.chunks_exact_mut(16);
  163|  6.71k|    for ((((&a, &b), &c), &d), &sd) in a.iter().zip(&b).zip(&c).zip(&d).zip(&sd) {
  164|  6.71k|        (a + k).write_le(words.next().unwrap());
  165|  6.71k|        (b + sb).write_le(words.next().unwrap());
  166|  6.71k|        (c + sc).write_le(words.next().unwrap());
  167|  6.71k|        (d + sd).write_le(words.next().unwrap());
  168|  6.71k|    }
  169|  1.67k|}
_RNvNtCs2yNTBgp2ry1_11rand_chacha4guts10read_u32le:
  229|     14|fn read_u32le(xs: &[u8]) -> u32 {
  230|     14|    assert_eq!(xs.len(), 4);
  231|     14|    u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24)
  232|     14|}
_RINvNvNtCs2yNTBgp2ry1_11rand_chacha4guts11refill_wide7fn_implINtNtCseEYaiX76wcq_10ppv_lite866x86_6411Avx2MachineNtB10_4NoNIEEB6_:
  172|  1.67k|    fn refill_wide(state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ]) {
  173|  1.67k|        refill_wide_impl(m, state, drounds, out);
  174|  1.67k|    }
_RINvNvNtCs2yNTBgp2ry1_11rand_chacha4guts11init_chacha7fn_implINtNtCseEYaiX76wcq_10ppv_lite866x86_6410SseMachineNtB10_5YesS3NtB10_5YesS4NtB10_4NoNIEEB6_:
  235|      7|    fn init_chacha(key: &[u8; 32], nonce: &[u8]) -> ChaCha {
  236|      7|        let ctr_nonce = [
  237|       |            0,
  238|      7|            if nonce.len() == 12 {
  239|      0|                read_u32le(&nonce[0..4])
  240|       |            } else {
  241|      7|                0
  242|       |            },
  243|      7|            read_u32le(&nonce[nonce.len() - 8..nonce.len() - 4]),
  244|      7|            read_u32le(&nonce[nonce.len() - 4..]),
  245|      7|        ];
  246|      7|        let key0: Mach::u32x4 = m.read_le(&key[..16]);
  247|      7|        let key1: Mach::u32x4 = m.read_le(&key[16..]);
  248|      7|        ChaCha {
  249|      7|            b: key0.into(),
  250|      7|            c: key1.into(),
  251|      7|            d: ctr_nonce.into(),
  252|      7|        }

_RNCNvXs0_NtCs3pbe4n6p45A_9rand_core5blockINtB7_8BlockRngINtNtNtNtCsl4BnFT4nv7q_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs2yNTBgp2ry1_11rand_chacha6chacha12ChaCha12CoreNtNtB9_2os5OsRngEENtB9_7RngCore8next_u640Cshwa6i4jbVTh_7rdf_xml:
  198|  53.6k|        let read_u64 = |results: &[u32], index| {
  199|  53.6k|            let data = &results[index..=index + 1];
  200|  53.6k|            u64::from(data[1]) << 32 | u64::from(data[0])
  201|  53.6k|        };
_RNvXs0_NtCs3pbe4n6p45A_9rand_core5blockINtB5_8BlockRngINtNtNtNtCsl4BnFT4nv7q_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs2yNTBgp2ry1_11rand_chacha6chacha12ChaCha12CoreNtNtB7_2os5OsRngEENtB7_7RngCore8next_u64Cshwa6i4jbVTh_7rdf_xml:
  197|  53.6k|    fn next_u64(&mut self) -> u64 {
  198|  53.6k|        let read_u64 = |results: &[u32], index| {
  199|       |            let data = &results[index..=index + 1];
  200|       |            u64::from(data[1]) << 32 | u64::from(data[0])
  201|       |        };
  202|       |
  203|  53.6k|        let len = self.results.as_ref().len();
  204|  53.6k|
  205|  53.6k|        let index = self.index;
  206|  53.6k|        if index < len - 1 {
  207|  52.0k|            self.index += 2;
  208|  52.0k|            // Read an u64 from the current index
  209|  52.0k|            read_u64(self.results.as_ref(), index)
  210|  1.67k|        } else if index >= len {
  211|  1.67k|            self.generate_and_set(2);
  212|  1.67k|            read_u64(self.results.as_ref(), 0)
  213|       |        } else {
  214|      0|            let x = u64::from(self.results.as_ref()[len - 1]);
  215|      0|            self.generate_and_set(1);
  216|      0|            let y = u64::from(self.results.as_ref()[0]);
  217|      0|            (y << 32) | x
  218|       |        }
  219|  53.6k|    }
_RNvMs_NtCs3pbe4n6p45A_9rand_core5blockINtB4_8BlockRngINtNtNtNtCsl4BnFT4nv7q_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs2yNTBgp2ry1_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE16generate_and_setBY_:
  174|  1.67k|    pub fn generate_and_set(&mut self, index: usize) {
  175|  1.67k|        assert!(index < self.results.as_ref().len());
  176|  1.67k|        self.core.generate(&mut self.results);
  177|  1.67k|        self.index = index;
  178|  1.67k|    }
_RNvMs_NtCs3pbe4n6p45A_9rand_core5blockINtB4_8BlockRngINtNtNtNtCsl4BnFT4nv7q_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs2yNTBgp2ry1_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE3newBY_:
  145|      1|    pub fn new(core: R) -> BlockRng<R> {
  146|      1|        let results_empty = R::Results::default();
  147|      1|        BlockRng {
  148|      1|            core,
  149|      1|            index: results_empty.as_ref().len(),
  150|      1|            results: results_empty,
  151|      1|        }
  152|      1|    }

_RINvYNtNtCs2yNTBgp2ry1_11rand_chacha6chacha12ChaCha12CoreNtCs3pbe4n6p45A_9rand_core11SeedableRng8from_rngNtNtBV_2os5OsRngECsl4BnFT4nv7q_4rand:
  390|      1|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|      1|        let mut seed = Self::Seed::default();
  392|      1|        rng.try_fill_bytes(seed.as_mut())?;
  393|      1|        Ok(Self::from_seed(seed))
  394|      1|    }
_RINvYNtNtCs2yNTBgp2ry1_11rand_chacha6chacha12ChaCha12CoreNtCs3pbe4n6p45A_9rand_core11SeedableRng8from_rngQNtNtBV_2os5OsRngECsl4BnFT4nv7q_4rand:
  390|      6|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|      6|        let mut seed = Self::Seed::default();
  392|      6|        rng.try_fill_bytes(seed.as_mut())?;
  393|      6|        Ok(Self::from_seed(seed))
  394|      6|    }
_RNvXs_Cs3pbe4n6p45A_9rand_coreQNtNtB4_2os5OsRngNtB4_7RngCore14try_fill_bytesCsl4BnFT4nv7q_4rand:
  441|      6|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
  442|      6|        (**self).try_fill_bytes(dest)
  443|      6|    }

_RNvXs_NtCs3pbe4n6p45A_9rand_core2osNtB4_5OsRngNtB6_7RngCore14try_fill_bytes:
   67|      7|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
   68|      7|        getrandom(dest)?;
   69|      7|        Ok(())
   70|      7|    }

_RNvNvNtNtCsl4BnFT4nv7q_4rand4rngs6thread14THREAD_RNG_KEY6___initB7_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNtNtCsl4BnFT4nv7q_4rand4rngs6thread14THREAD_RNG_KEY7___getitB7_:
   83|  26.8k|            unsafe fn __getit(
   84|  26.8k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  26.8k|            ) -> $crate::option::Option<&'static $t> {
   86|  26.8k|                #[thread_local]
   87|  26.8k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  26.8k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  26.8k|
   90|  26.8k|                unsafe {
   91|  26.8k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  26.8k|                    })
  101|  26.8k|                }
  102|  26.8k|            }

_RNvMNtCs4QHopEsftxz_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCshwa6i4jbVTh_7rdf_xml:
   92|  26.6k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   93|  26.6k|        BlankNodeRef(match &self.0 {
   94|      0|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   95|  26.6k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   96|  26.6k|                id: *id,
   97|  26.6k|                str: str.as_str(),
   98|  26.6k|            },
   99|       |        })
  100|  26.6k|    }
_RNvMs1_NtCs4QHopEsftxz_5oxrdf10blank_nodeNtB5_12BlankNodeRef10into_ownedCshwa6i4jbVTh_7rdf_xml:
  208|  13.8k|    pub fn into_owned(self) -> BlankNode {
  209|  13.8k|        BlankNode(match self.0 {
  210|      0|            BlankNodeRefContent::Named(id) => BlankNodeContent::Named(id.to_owned()),
  211|  13.8k|            BlankNodeRefContent::Anonymous { id, .. } => BlankNodeContent::Anonymous {
  212|  13.8k|                id,
  213|  13.8k|                str: IdStr::new(id),
  214|  13.8k|            },
  215|       |        })
  216|  13.8k|    }
_RNvMs1_NtCs4QHopEsftxz_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCshwa6i4jbVTh_7rdf_xml:
  183|  11.4k|    pub const fn as_str(self) -> &'a str {
  184|  11.4k|        match self.0 {
  185|      0|            BlankNodeRefContent::Named(id) => id,
  186|  11.4k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  187|       |        }
  188|  11.4k|    }
_RNvMs7_NtCs4QHopEsftxz_5oxrdf10blank_nodeNtB5_5IdStr3newCshwa6i4jbVTh_7rdf_xml:
  259|  40.7k|    fn new(id: u128) -> Self {
  260|  40.7k|        let mut str = [0; 32];
  261|  40.7k|        write!(&mut str[..], "{id:x}").unwrap();
  262|  40.7k|        Self(str)
  263|  40.7k|    }
_RNvMs7_NtCs4QHopEsftxz_5oxrdf10blank_nodeNtB5_5IdStr6as_strCshwa6i4jbVTh_7rdf_xml:
  266|  53.4k|    fn as_str(&self) -> &str {
  267|  53.4k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  268|  53.4k|        str::from_utf8(&self.0[..len]).unwrap()
  269|  53.4k|    }
_RNvXs0_NtCs4QHopEsftxz_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCsiOGkCewTsZJ_4core7default7Default7defaultCshwa6i4jbVTh_7rdf_xml:
  113|  10.5k|    fn default() -> Self {
  114|       |        // We ensure the ID does not start with a number to be also valid with RDF/XML
  115|  26.8k|        loop {
  116|  26.8k|            let id = random();
  117|  26.8k|            let str = IdStr::new(id);
  118|  26.8k|            if matches!(str.as_str().as_bytes().first(), Some(b'a'..=b'f')) {
  119|  10.5k|                return Self(BlankNodeContent::Anonymous { id, str });
  120|  16.2k|            }
  121|       |        }
  122|  10.5k|    }
_RNvXsF_NtCs4QHopEsftxz_5oxrdf10blank_nodeNtB5_5IdStrNtNtCsiOGkCewTsZJ_4core3cmp9PartialEq2eqCshwa6i4jbVTh_7rdf_xml:
  254|  14.1k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsJ_NtCs4QHopEsftxz_5oxrdf10blank_nodeNtB5_5IdStrNtNtCsiOGkCewTsZJ_4core5clone5Clone5cloneCshwa6i4jbVTh_7rdf_xml:
  254|  37.6k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsd_NtCs4QHopEsftxz_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCsiOGkCewTsZJ_4core3cmp9PartialEq2eqCshwa6i4jbVTh_7rdf_xml:
   24|  14.1k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsf_NtCs4QHopEsftxz_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCsiOGkCewTsZJ_4core5clone5Clone5cloneCshwa6i4jbVTh_7rdf_xml:
   24|  37.6k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsi_NtCs4QHopEsftxz_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCsiOGkCewTsZJ_4core3cmp9PartialEq2eqCshwa6i4jbVTh_7rdf_xml:
   27|  14.1k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsm_NtCs4QHopEsftxz_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCsiOGkCewTsZJ_4core5clone5Clone5cloneCshwa6i4jbVTh_7rdf_xml:
   27|  37.6k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsr_NtCs4QHopEsftxz_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCsiOGkCewTsZJ_4core3cmp9PartialEq2eqCshwa6i4jbVTh_7rdf_xml:
  142|  12.4k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RNvXsx_NtCs4QHopEsftxz_5oxrdf10blank_nodeNtB5_19BlankNodeRefContentNtNtCsiOGkCewTsZJ_4core3cmp9PartialEq2eqCshwa6i4jbVTh_7rdf_xml:
  145|  12.4k|#[derive(PartialEq, Eq, Debug, Clone, Copy, Hash)]
_RNvMNtCs4QHopEsftxz_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idB4_:
   66|  11.4k|    pub fn new_from_unique_id(id: u128) -> Self {
   67|  11.4k|        Self(BlankNodeContent::Anonymous {
   68|  11.4k|            id,
   69|  11.4k|            str: IdStr::new(id),
   70|  11.4k|        })
   71|  11.4k|    }
_RNvMs7_NtCs4QHopEsftxz_5oxrdf10blank_nodeNtB5_5IdStr3newB7_:
  259|  11.4k|    fn new(id: u128) -> Self {
  260|  11.4k|        let mut str = [0; 32];
  261|  11.4k|        write!(&mut str[..], "{id:x}").unwrap();
  262|  11.4k|        Self(str)
  263|  11.4k|    }
_RNvNtCs4QHopEsftxz_5oxrdf10blank_node13to_integer_idB3_:
  332|  11.4k|fn to_integer_id(id: &str) -> Option<u128> {
  333|  11.4k|    let digits = id.as_bytes();
  334|  11.4k|    let mut value: u128 = 0;
  335|  11.4k|    if let None | Some(b'0') = digits.first() {
  336|      0|        return None; // No empty string or leading zeros
  337|  11.4k|    }
  338|   376k|    for digit in digits {
  339|   365k|        value = value.checked_mul(16)?.checked_add(
  340|   365k|            match *digit {
  341|   365k|                b'0'..=b'9' => digit - b'0',
  342|   144k|                b'a'..=b'f' => digit - b'a' + 10,
  343|      0|                _ => return None,
  344|       |            }
  345|   365k|            .into(),
  346|      0|        )?;
  347|       |    }
  348|  11.4k|    Some(value)
  349|  11.4k|}
_RINvMNtCs4QHopEsftxz_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedNtNtCs99O0fDgeGot_5alloc6string6StringEB5_:
   53|  11.4k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   54|  11.4k|        let id = id.into();
   55|  11.4k|        if let Some(numerical_id) = to_integer_id(&id) {
   56|  11.4k|            Self::new_from_unique_id(numerical_id)
   57|       |        } else {
   58|      0|            Self(BlankNodeContent::Named(id))
   59|       |        }
   60|  11.4k|    }
_RNCNvMs7_NtCs4QHopEsftxz_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  267|  1.71M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);

_RNvMNtCs4QHopEsftxz_5oxrdf7literalNtB2_7Literal6as_refCshwa6i4jbVTh_7rdf_xml:
  132|  3.07k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  133|  3.07k|        LiteralRef(match &self.0 {
  134|  3.07k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  135|      0|            LiteralContent::LanguageTaggedString { value, language } => {
  136|      0|                LiteralRefContent::LanguageTaggedString { value, language }
  137|       |            }
  138|      0|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  139|      0|                value,
  140|      0|                datatype: datatype.as_ref(),
  141|      0|            },
  142|       |        })
  143|  3.07k|    }
_RNvMst_NtCs4QHopEsftxz_5oxrdf7literalNtB5_10LiteralRef5valueCshwa6i4jbVTh_7rdf_xml:
  491|  3.07k|    pub const fn value(self) -> &'a str {
  492|  3.07k|        match self.0 {
  493|  3.07k|            LiteralRefContent::String(value)
  494|      0|            | LiteralRefContent::LanguageTaggedString { value, .. }
  495|  3.07k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  496|  3.07k|        }
  497|  3.07k|    }
_RNvMst_NtCs4QHopEsftxz_5oxrdf7literalNtB5_10LiteralRef8is_plainCshwa6i4jbVTh_7rdf_xml:
  529|  3.07k|    pub const fn is_plain(self) -> bool {
  530|      0|        matches!(
  531|  3.07k|            self.0,
  532|       |            LiteralRefContent::String(_) | LiteralRefContent::LanguageTaggedString { .. }
  533|       |        )
  534|  3.07k|    }
_RNvMst_NtCs4QHopEsftxz_5oxrdf7literalNtB5_10LiteralRef8languageCshwa6i4jbVTh_7rdf_xml:
  504|  3.07k|    pub const fn language(self) -> Option<&'a str> {
  505|  3.07k|        match self.0 {
  506|      0|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  507|  3.07k|            _ => None,
  508|       |        }
  509|  3.07k|    }
_RNvXsD_NtCs4QHopEsftxz_5oxrdf7literalNtB5_7LiteralNtNtCsiOGkCewTsZJ_4core3cmp9PartialEq2eqCshwa6i4jbVTh_7rdf_xml:
   37|  3.07k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsI_NtCs4QHopEsftxz_5oxrdf7literalNtB5_14LiteralContentNtNtCsiOGkCewTsZJ_4core3cmp9PartialEq2eqCshwa6i4jbVTh_7rdf_xml:
   40|  3.07k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RINvMNtCs4QHopEsftxz_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCs99O0fDgeGot_5alloc6string6StringEB5_:
   50|  6.14k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   51|  6.14k|        Self(LiteralContent::String(value.into()))
   52|  6.14k|    }

_RNvMNtCs4QHopEsftxz_5oxrdf10named_nodeNtB2_9NamedNode6as_refCshwa6i4jbVTh_7rdf_xml:
   54|  24.4k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  24.4k|        NamedNodeRef::new_unchecked(&self.iri)
   56|  24.4k|    }
_RNvMNtCs4QHopEsftxz_5oxrdf10named_nodeNtB2_9NamedNode6as_strCshwa6i4jbVTh_7rdf_xml:
   44|  21.7k|    pub fn as_str(&self) -> &str {
   45|  21.7k|        self.iri.as_str()
   46|  21.7k|    }
_RNvMs4_NtCs4QHopEsftxz_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCshwa6i4jbVTh_7rdf_xml:
  128|  24.4k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  24.4k|        Self { iri }
  130|  24.4k|    }
_RNvMs4_NtCs4QHopEsftxz_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCshwa6i4jbVTh_7rdf_xml:
  133|  24.4k|    pub const fn as_str(self) -> &'a str {
  134|  24.4k|        self.iri
  135|  24.4k|    }
_RNvXs0_NtCs4QHopEsftxz_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCsiOGkCewTsZJ_4core3cmp9PartialEqeE2eqCshwa6i4jbVTh_7rdf_xml:
   68|  21.7k|    fn eq(&self, other: &str) -> bool {
   69|  21.7k|        self.as_str() == other
   70|  21.7k|    }
_RNvXsl_NtCs4QHopEsftxz_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCsiOGkCewTsZJ_4core3cmp9PartialEq2eqCshwa6i4jbVTh_7rdf_xml:
   17|  24.4k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMs4_NtCs4QHopEsftxz_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|  10.5k|    pub fn into_owned(self) -> NamedNode {
  139|  10.5k|        NamedNode::new_unchecked(self.iri)
  140|  10.5k|    }
_RNvXs6_NtCs4QHopEsftxz_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCsiOGkCewTsZJ_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|  10.5k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|  10.5k|        node.into_owned()
  154|  10.5k|    }
_RINvMNtCs4QHopEsftxz_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCs99O0fDgeGot_5alloc6string6StringEB5_:
   39|  55.2k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  55.2k|        Self { iri: iri.into() }
   41|  55.2k|    }
_RINvMNtCs4QHopEsftxz_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|  10.5k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  10.5k|        Self { iri: iri.into() }
   41|  10.5k|    }

_RNvMs12_NtCs4QHopEsftxz_5oxrdf6tripleNtB6_6Triple6as_refCshwa6i4jbVTh_7rdf_xml:
  752|  13.8k|    pub fn as_ref(&self) -> TripleRef<'_> {
  753|  13.8k|        TripleRef {
  754|  13.8k|            subject: self.subject.as_ref(),
  755|  13.8k|            predicate: self.predicate.as_ref(),
  756|  13.8k|            object: self.object.as_ref(),
  757|  13.8k|        }
  758|  13.8k|    }
_RNvMsc_NtCs4QHopEsftxz_5oxrdf6tripleNtB5_7Subject6as_refCshwa6i4jbVTh_7rdf_xml:
  181|  26.3k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  26.3k|        match self {
  183|      0|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|  26.3k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|      0|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  26.3k|    }
_RNvMsn_NtCs4QHopEsftxz_5oxrdf6tripleNtB5_10SubjectRef10into_ownedCshwa6i4jbVTh_7rdf_xml:
  294|  13.8k|    pub fn into_owned(self) -> Subject {
  295|  13.8k|        match self {
  296|      0|            Self::NamedNode(node) => Subject::NamedNode(node.into_owned()),
  297|  13.8k|            Self::BlankNode(node) => Subject::BlankNode(node.into_owned()),
  298|       |            #[cfg(feature = "rdf-star")]
  299|      0|            Self::Triple(triple) => Subject::Triple(Box::new(triple.clone())),
  300|       |        }
  301|  13.8k|    }
_RNvMsy_NtCs4QHopEsftxz_5oxrdf6tripleNtB5_4Term6as_refCshwa6i4jbVTh_7rdf_xml:
  417|  13.8k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|  13.8k|        match self {
  419|  10.5k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|    250|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  3.07k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|      0|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|  13.8k|    }
_RNvXs16_NtCs4QHopEsftxz_5oxrdf6tripleNtB6_9TripleRefINtNtCsiOGkCewTsZJ_4core7convert4FromRNtB6_6TripleE4fromCshwa6i4jbVTh_7rdf_xml:
  842|  13.8k|    fn from(triple: &'a Triple) -> Self {
  843|  13.8k|        triple.as_ref()
  844|  13.8k|    }
_RNvXs1Q_NtCs4QHopEsftxz_5oxrdf6tripleNtB6_7SubjectNtNtCsiOGkCewTsZJ_4core3cmp9PartialEq2eqCshwa6i4jbVTh_7rdf_xml:
  155|  13.8k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1S_NtCs4QHopEsftxz_5oxrdf6tripleNtB6_7SubjectNtNtCsiOGkCewTsZJ_4core5clone5Clone5cloneCshwa6i4jbVTh_7rdf_xml:
  155|  37.6k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1X_NtCs4QHopEsftxz_5oxrdf6tripleNtB6_10SubjectRefNtNtCsiOGkCewTsZJ_4core3cmp9PartialEq2eqCshwa6i4jbVTh_7rdf_xml:
  268|  12.4k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RNvXs25_NtCs4QHopEsftxz_5oxrdf6tripleNtB6_4TermNtNtCsiOGkCewTsZJ_4core3cmp9PartialEq2eqCshwa6i4jbVTh_7rdf_xml:
  385|  13.8k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2k_NtCs4QHopEsftxz_5oxrdf6tripleNtB6_6TripleNtNtCsiOGkCewTsZJ_4core3cmp9PartialEq2eqCshwa6i4jbVTh_7rdf_xml:
  713|  13.8k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsL_NtCs4QHopEsftxz_5oxrdf6tripleNtB5_4TermINtNtCsiOGkCewTsZJ_4core7convert4FromNtB5_7SubjectE4fromCshwa6i4jbVTh_7rdf_xml:
  520|  11.0k|    fn from(node: Subject) -> Self {
  521|  11.0k|        match node {
  522|  10.5k|            Subject::NamedNode(node) => node.into(),
  523|    500|            Subject::BlankNode(node) => node.into(),
  524|       |            #[cfg(feature = "rdf-star")]
  525|      0|            Subject::Triple(triple) => Self::Triple(triple),
  526|       |        }
  527|  11.0k|    }
_RNvXse_NtCs4QHopEsftxz_5oxrdf6tripleNtB5_7SubjectINtNtCsiOGkCewTsZJ_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromCshwa6i4jbVTh_7rdf_xml:
  200|  10.5k|    fn from(node: NamedNode) -> Self {
  201|  10.5k|        Self::NamedNode(node)
  202|  10.5k|    }
_RINvMs12_NtCs4QHopEsftxz_5oxrdf6tripleNtB7_6Triple3newNtB7_7SubjectNtNtB9_10named_node12NamedNodeRefNtB15_9NamedNodeECshwa6i4jbVTh_7rdf_xml:
  728|  10.5k|    pub fn new(
  729|  10.5k|        subject: impl Into<Subject>,
  730|  10.5k|        predicate: impl Into<NamedNode>,
  731|  10.5k|        object: impl Into<Term>,
  732|  10.5k|    ) -> Self {
  733|  10.5k|        Self {
  734|  10.5k|            subject: subject.into(),
  735|  10.5k|            predicate: predicate.into(),
  736|  10.5k|            object: object.into(),
  737|  10.5k|        }
  738|  10.5k|    }
_RINvMs12_NtCs4QHopEsftxz_5oxrdf6tripleNtB7_6Triple3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtB7_4TermECshwa6i4jbVTh_7rdf_xml:
  728|  17.2k|    pub fn new(
  729|  17.2k|        subject: impl Into<Subject>,
  730|  17.2k|        predicate: impl Into<NamedNode>,
  731|  17.2k|        object: impl Into<Term>,
  732|  17.2k|    ) -> Self {
  733|  17.2k|        Self {
  734|  17.2k|            subject: subject.into(),
  735|  17.2k|            predicate: predicate.into(),
  736|  17.2k|            object: object.into(),
  737|  17.2k|        }
  738|  17.2k|    }
_RNvXsg_NtCs4QHopEsftxz_5oxrdf6tripleNtB5_7SubjectINtNtCsiOGkCewTsZJ_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|  22.0k|    fn from(node: BlankNode) -> Self {
  215|  22.0k|        Self::BlankNode(node)
  216|  22.0k|    }
_RNvXsA_NtCs4QHopEsftxz_5oxrdf6tripleNtB5_4TermINtNtCsiOGkCewTsZJ_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|  21.1k|    fn from(node: NamedNode) -> Self {
  438|  21.1k|        Self::NamedNode(node)
  439|  21.1k|    }
_RNvXsC_NtCs4QHopEsftxz_5oxrdf6tripleNtB5_4TermINtNtCsiOGkCewTsZJ_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  451|    500|    fn from(node: BlankNode) -> Self {
  452|    500|        Self::BlankNode(node)
  453|    500|    }
_RNvXsE_NtCs4QHopEsftxz_5oxrdf6tripleNtB5_4TermINtNtCsiOGkCewTsZJ_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  465|  6.14k|    fn from(literal: Literal) -> Self {
  466|  6.14k|        Self::Literal(literal)
  467|  6.14k|    }

_RNvXs1_NtCs1ICs2Somm0b_8oxrdfxml5errorNtB5_10ParseErrorINtNtCsiOGkCewTsZJ_4core7convert4FromNtB5_11SyntaxErrorE4fromCshwa6i4jbVTh_7rdf_xml:
   45|  36.5k|    fn from(error: SyntaxError) -> Self {
   46|  36.5k|        Self::Syntax(error)
   47|  36.5k|    }
_RNvXs3_NtCs1ICs2Somm0b_8oxrdfxml5errorNtB5_10ParseErrorINtNtCsiOGkCewTsZJ_4core7convert4FromNtNtCs57NZtjOlRkW_9quick_xml6errors5ErrorE4fromCshwa6i4jbVTh_7rdf_xml:
   62|  66.8k|    fn from(error: quick_xml::Error) -> Self {
   63|  66.8k|        match error {
   64|      0|            quick_xml::Error::Io(error) => Self::Io(match Arc::try_unwrap(error) {
   65|      0|                Ok(error) => error,
   66|      0|                Err(error) => io::Error::new(error.kind(), error),
   67|       |            }),
   68|  66.8k|            _ => Self::Syntax(SyntaxError {
   69|  66.8k|                inner: SyntaxErrorKind::Xml(error),
   70|  66.8k|            }),
   71|       |        }
   72|  66.8k|    }
_RINvMs4_NtCs1ICs2Somm0b_8oxrdfxml5errorNtB6_11SyntaxError3msgNtNtCs99O0fDgeGot_5alloc6string6StringECshwa6i4jbVTh_7rdf_xml:
  100|  14.2k|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
  101|  14.2k|        Self {
  102|  14.2k|            inner: SyntaxErrorKind::Msg { msg: msg.into() },
  103|  14.2k|        }
  104|  14.2k|    }
_RINvMs4_NtCs1ICs2Somm0b_8oxrdfxml5errorNtB6_11SyntaxError3msgReECshwa6i4jbVTh_7rdf_xml:
  100|  7.84k|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
  101|  7.84k|        Self {
  102|  7.84k|            inner: SyntaxErrorKind::Msg { msg: msg.into() },
  103|  7.84k|        }
  104|  7.84k|    }

_RINvMNtCs1ICs2Somm0b_8oxrdfxml6parserNtB3_12RdfXmlParser10parse_readRShECshwa6i4jbVTh_7rdf_xml:
  110|  6.89k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadRdfXmlReader<R> {
  111|  6.89k|        FromReadRdfXmlReader {
  112|  6.89k|            results: Vec::new(),
  113|  6.89k|            reader: self.parse(BufReader::new(read)),
  114|  6.89k|            reader_buffer: Vec::default(),
  115|  6.89k|        }
  116|  6.89k|    }
_RINvMNtCs1ICs2Somm0b_8oxrdfxml6parserNtB3_12RdfXmlParser5parseINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEECshwa6i4jbVTh_7rdf_xml:
  161|  6.89k|    fn parse<T>(&self, reader: T) -> RdfXmlReader<T> {
  162|  6.89k|        let mut reader = NsReader::from_reader(reader);
  163|  6.89k|        reader.expand_empty_elements(true);
  164|  6.89k|        RdfXmlReader {
  165|  6.89k|            reader,
  166|  6.89k|            state: vec![RdfXmlState::Doc {
  167|  6.89k|                base_iri: self.base.clone(),
  168|  6.89k|            }],
  169|  6.89k|            custom_entities: HashMap::default(),
  170|  6.89k|            in_literal_depth: 0,
  171|  6.89k|            known_rdf_id: HashSet::default(),
  172|  6.89k|            is_end: false,
  173|  6.89k|            unchecked: self.unchecked,
  174|  6.89k|        }
  175|  6.89k|    }
_RNCNvMs2_NtCs1ICs2Somm0b_8oxrdfxml6parserINtB7_12RdfXmlReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE15resolve_ns_name0Cshwa6i4jbVTh_7rdf_xml:
  920|  3.18k|                Ok(unescape_with(&self.reader.decoder().decode(&value)?, |e| {
  921|  3.18k|                    self.resolve_entity(e)
  922|  3.18k|                })
_RNCNvMs2_NtCs1ICs2Somm0b_8oxrdfxml6parserINtB7_12RdfXmlReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE16parse_text_event0Cshwa6i4jbVTh_7rdf_xml:
  878|  1.47k|        let text = event.unescape_with(|e| self.resolve_entity(e))?.to_string();
_RNCNvMs2_NtCs1ICs2Somm0b_8oxrdfxml6parserINtB7_12RdfXmlReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE9parse_iri0Cshwa6i4jbVTh_7rdf_xml:
 1195|  14.4k|                .map_err(|error| SyntaxError {
 1196|  14.4k|                    inner: SyntaxErrorKind::InvalidIri {
 1197|  14.4k|                        iri: relative_iri,
 1198|  14.4k|                        error,
 1199|  14.4k|                    },
 1200|  14.4k|                })?
_RNvMs0_NtCs1ICs2Somm0b_8oxrdfxml6parserINtB5_20FromReadRdfXmlReaderRShE10parse_stepCshwa6i4jbVTh_7rdf_xml:
  235|   246k|    fn parse_step(&mut self) -> Result<(), ParseError> {
  236|   246k|        self.reader_buffer.clear();
  237|   246k|        let event = self
  238|   246k|            .reader
  239|   246k|            .reader
  240|   246k|            .read_event_into(&mut self.reader_buffer)?;
  241|   245k|        self.reader.parse_event(event, &mut self.results)
  242|   246k|    }
_RNvMs2_NtCs1ICs2Somm0b_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE11new_literalCshwa6i4jbVTh_7rdf_xml:
 1103|  6.14k|    fn new_literal(
 1104|  6.14k|        value: String,
 1105|  6.14k|        language: Option<String>,
 1106|  6.14k|        datatype: Option<NamedNode>,
 1107|  6.14k|    ) -> Literal {
 1108|  6.14k|        if let Some(datatype) = datatype {
 1109|      0|            Literal::new_typed_literal(value, datatype)
 1110|  6.14k|        } else if let Some(language) = language {
 1111|      0|            Literal::new_language_tagged_literal_unchecked(value, language)
 1112|       |        } else {
 1113|  6.14k|            Literal::new_simple_literal(value)
 1114|       |        }
 1115|  6.14k|    }
_RNvMs2_NtCs1ICs2Somm0b_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE11parse_eventCshwa6i4jbVTh_7rdf_xml:
  434|   245k|    fn parse_event(
  435|   245k|        &mut self,
  436|   245k|        event: Event<'_>,
  437|   245k|        results: &mut Vec<Triple>,
  438|   245k|    ) -> Result<(), ParseError> {
  439|   245k|        match event {
  440|  88.6k|            Event::Start(event) => self.parse_start_event(&event, results),
  441|  36.8k|            Event::End(event) => self.parse_end_event(&event, results),
  442|       |            Event::Empty(_) => {
  443|      0|                Err(SyntaxError::msg("The expand_empty_elements option must be enabled").into())
  444|       |            }
  445|   106k|            Event::Text(event) => self.parse_text_event(&event),
  446|      0|            Event::CData(event) => self.parse_text_event(&event.escape()?),
  447|  1.06k|            Event::Comment(_) | Event::PI(_) => Ok(()),
  448|  5.39k|            Event::Decl(decl) => {
  449|  5.39k|                if let Some(encoding) = decl.encoding() {
  450|  5.30k|                    if !is_utf8(&encoding?) {
  451|  1.19k|                        return Err(SyntaxError::msg(
  452|  1.19k|                            "Only UTF-8 is supported by the RDF/XML parser",
  453|  1.19k|                        )
  454|  1.19k|                        .into());
  455|  3.44k|                    }
  456|     97|                }
  457|  3.54k|                Ok(())
  458|       |            }
  459|      0|            Event::DocType(dt) => self.parse_doctype(&dt),
  460|       |            Event::Eof => {
  461|  6.89k|                self.is_end = true;
  462|  6.89k|                Ok(())
  463|       |            }
  464|       |        }
  465|   245k|    }
_RNvMs2_NtCs1ICs2Somm0b_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE11resolve_iriCshwa6i4jbVTh_7rdf_xml:
 1165|  10.5k|    fn resolve_iri(
 1166|  10.5k|        &self,
 1167|  10.5k|        base_iri: &Option<Iri<String>>,
 1168|  10.5k|        relative_iri: String,
 1169|  10.5k|    ) -> Result<NamedNode, SyntaxError> {
 1170|  10.5k|        if let Some(base_iri) = base_iri {
 1171|       |            Ok(NamedNode::new_unchecked(
 1172|      0|                if self.unchecked {
 1173|      0|                    base_iri.resolve_unchecked(&relative_iri)
 1174|       |                } else {
 1175|      0|                    base_iri.resolve(&relative_iri)
 1176|       |                }
 1177|      0|                .map_err(|error| SyntaxError {
 1178|       |                    inner: SyntaxErrorKind::InvalidIri {
 1179|       |                        iri: relative_iri,
 1180|       |                        error,
 1181|       |                    },
 1182|      0|                })?
 1183|      0|                .into_inner(),
 1184|       |            ))
 1185|       |        } else {
 1186|  10.5k|            self.parse_iri(relative_iri)
 1187|       |        }
 1188|  10.5k|    }
_RNvMs2_NtCs1ICs2Somm0b_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE14build_node_eltCshwa6i4jbVTh_7rdf_xml:
  938|  21.7k|    fn build_node_elt(
  939|  21.7k|        iri: NamedNode,
  940|  21.7k|        base_iri: Option<Iri<String>>,
  941|  21.7k|        language: Option<String>,
  942|  21.7k|        id_attr: Option<NamedNode>,
  943|  21.7k|        node_id_attr: Option<BlankNode>,
  944|  21.7k|        about_attr: Option<NamedNode>,
  945|  21.7k|        type_attr: Option<NamedNode>,
  946|  21.7k|        property_attrs: Vec<(NamedNode, String)>,
  947|  21.7k|        results: &mut Vec<Triple>,
  948|  21.7k|    ) -> Result<RdfXmlState, SyntaxError> {
  949|  21.7k|        let subject = match (id_attr, node_id_attr, about_attr) {
  950|      0|            (Some(id_attr), None, None) => Subject::from(id_attr),
  951|  11.1k|            (None, Some(node_id_attr), None) => node_id_attr.into(),
  952|      0|            (None, None, Some(about_attr)) => about_attr.into(),
  953|  10.5k|            (None, None, None) => BlankNode::default().into(),
  954|       |            (Some(_), Some(_), _) => {
  955|      0|                return Err(SyntaxError::msg(
  956|      0|                    "Not both rdf:ID and rdf:nodeID could be set at the same time",
  957|      0|                ))
  958|       |            }
  959|       |            (_, Some(_), Some(_)) => {
  960|      0|                return Err(SyntaxError::msg(
  961|      0|                    "Not both rdf:nodeID and rdf:resource could be set at the same time",
  962|      0|                ))
  963|       |            }
  964|       |            (Some(_), _, Some(_)) => {
  965|      0|                return Err(SyntaxError::msg(
  966|      0|                    "Not both rdf:ID and rdf:resource could be set at the same time",
  967|      0|                ))
  968|       |            }
  969|       |        };
  970|       |
  971|  21.7k|        Self::emit_property_attrs(&subject, property_attrs, &language, results);
  972|       |
  973|  21.7k|        if let Some(type_attr) = type_attr {
  974|      0|            results.push(Triple::new(subject.clone(), rdf::TYPE, type_attr));
  975|  21.7k|        }
  976|       |
  977|  21.7k|        if iri != *RDF_DESCRIPTION {
  978|  10.5k|            results.push(Triple::new(subject.clone(), rdf::TYPE, iri));
  979|  11.1k|        }
  980|  21.7k|        Ok(RdfXmlState::NodeElt {
  981|  21.7k|            base_iri,
  982|  21.7k|            language,
  983|  21.7k|            subject,
  984|  21.7k|            li_counter: 0,
  985|  21.7k|        })
  986|  21.7k|    }
_RNvMs2_NtCs1ICs2Somm0b_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE14resolve_entityCshwa6i4jbVTh_7rdf_xml:
 1205|  4.65k|    fn resolve_entity(&self, e: &str) -> Option<&str> {
 1206|  4.65k|        self.custom_entities.get(e).map(String::as_str)
 1207|  4.65k|    }
_RNvMs2_NtCs1ICs2Somm0b_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE15parse_end_eventCshwa6i4jbVTh_7rdf_xml:
  853|  36.8k|    fn parse_end_event(
  854|  36.8k|        &mut self,
  855|  36.8k|        event: &BytesEnd<'_>,
  856|  36.8k|        results: &mut Vec<Triple>,
  857|  36.8k|    ) -> Result<(), ParseError> {
  858|  36.8k|        //Literal case
  859|  36.8k|        if self.in_literal_depth > 0 {
  860|      0|            if let Some(RdfXmlState::ParseTypeLiteralPropertyElt { writer, .. }) =
  861|      0|                self.state.last_mut()
  862|       |            {
  863|      0|                writer.write_event(Event::End(BytesEnd::new(
  864|      0|                    self.reader.decoder().decode(event.name().as_ref())?,
  865|      0|                )))?;
  866|      0|                self.in_literal_depth -= 1;
  867|      0|                return Ok(());
  868|      0|            }
  869|  36.8k|        }
  870|       |
  871|  36.8k|        if let Some(current_state) = self.state.pop() {
  872|  35.8k|            self.end_state(current_state, results)?;
  873|    927|        }
  874|  36.8k|        Ok(())
  875|  36.8k|    }
_RNvMs2_NtCs1ICs2Somm0b_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE15resolve_ns_nameCshwa6i4jbVTh_7rdf_xml:
  910|   110k|    fn resolve_ns_name(
  911|   110k|        &self,
  912|   110k|        namespace: ResolveResult<'_>,
  913|   110k|        local_name: LocalName<'_>,
  914|   110k|    ) -> Result<String, ParseError> {
  915|   110k|        match namespace {
  916|   102k|            ResolveResult::Bound(ns) => {
  917|   102k|                let mut value = Vec::with_capacity(ns.as_ref().len() + local_name.as_ref().len());
  918|   102k|                value.extend_from_slice(ns.as_ref());
  919|   102k|                value.extend_from_slice(local_name.as_ref());
  920|   102k|                Ok(unescape_with(&self.reader.decoder().decode(&value)?, |e| {
  921|       |                    self.resolve_entity(e)
  922|       |                })
  923|  99.6k|                .map_err(quick_xml::Error::from)?
  924|  92.7k|                .to_string())
  925|       |            }
  926|       |            ResolveResult::Unbound => {
  927|  6.11k|                Err(SyntaxError::msg("XML namespaces are required in RDF/XML").into())
  928|       |            }
  929|  2.37k|            ResolveResult::Unknown(v) => Err(SyntaxError::msg(format!(
  930|  2.37k|                "Unknown prefix {}:",
  931|  2.37k|                self.reader.decoder().decode(&v)?
  932|       |            ))
  933|  1.11k|            .into()),
  934|       |        }
  935|   110k|    }
_RNvMs2_NtCs1ICs2Somm0b_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE16parse_text_eventCshwa6i4jbVTh_7rdf_xml:
  877|   106k|    fn parse_text_event(&mut self, event: &BytesText<'_>) -> Result<(), ParseError> {
  878|   106k|        let text = event.unescape_with(|e| self.resolve_entity(e))?.to_string();
  879|  53.1k|        match self.state.last_mut() {
  880|  2.92k|            Some(RdfXmlState::PropertyElt { object, .. }) => {
  881|  2.92k|                if !event.iter().copied().all(is_whitespace) {
  882|  2.81k|                    *object = Some(NodeOrText::Text(text));
  883|  2.81k|                }
  884|  2.92k|                Ok(())
  885|       |            }
  886|      0|            Some(RdfXmlState::ParseTypeLiteralPropertyElt { writer, .. }) => {
  887|      0|                writer.write_event(Event::Text(BytesText::new(&text)))?;
  888|      0|                Ok(())
  889|       |            }
  890|       |            _ => {
  891|  50.1k|                if event.iter().copied().all(is_whitespace) {
  892|  43.3k|                    Ok(())
  893|       |                } else {
  894|  6.77k|                    Err(SyntaxError::msg(format!("Unexpected text event: '{text}'")).into())
  895|       |                }
  896|       |            }
  897|       |        }
  898|   106k|    }
_RNvMs2_NtCs1ICs2Somm0b_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE16resolve_tag_nameCshwa6i4jbVTh_7rdf_xml:
  900|  88.6k|    fn resolve_tag_name(&self, qname: QName<'_>) -> Result<String, ParseError> {
  901|  88.6k|        let (namespace, local_name) = self.reader.resolve_element(qname);
  902|  88.6k|        self.resolve_ns_name(namespace, local_name)
  903|  88.6k|    }
_RNvMs2_NtCs1ICs2Somm0b_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE17convert_attributeCshwa6i4jbVTh_7rdf_xml:
 1151|  22.0k|    fn convert_attribute(&self, attribute: &Attribute<'_>) -> Result<String, ParseError> {
 1152|  22.0k|        Ok(attribute
 1153|  22.0k|            .decode_and_unescape_value_with(&self.reader, |e| self.resolve_entity(e))?
 1154|  22.0k|            .into_owned())
 1155|  22.0k|    }
_RNvMs2_NtCs1ICs2Somm0b_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE17parse_start_eventCshwa6i4jbVTh_7rdf_xml:
  505|  88.6k|    fn parse_start_event(
  506|  88.6k|        &mut self,
  507|  88.6k|        event: &BytesStart<'_>,
  508|  88.6k|        results: &mut Vec<Triple>,
  509|  88.6k|    ) -> Result<(), ParseError> {
  510|       |        #[derive(PartialEq, Eq)]
  511|       |        enum RdfXmlParseType {
  512|       |            Default,
  513|       |            Collection,
  514|       |            Literal,
  515|       |            Resource,
  516|       |            Other,
  517|       |        }
  518|       |
  519|       |        #[derive(PartialEq, Eq)]
  520|       |        enum RdfXmlNextProduction {
  521|       |            Rdf,
  522|       |            NodeElt,
  523|       |            PropertyElt { subject: Subject },
  524|       |        }
  525|       |
  526|       |        //Literal case
  527|  88.6k|        if let Some(RdfXmlState::ParseTypeLiteralPropertyElt { writer, .. }) = self.state.last_mut()
  528|       |        {
  529|      0|            let mut clean_event = BytesStart::new(
  530|      0|                self.reader
  531|      0|                    .decoder()
  532|      0|                    .decode(event.name().as_ref())?
  533|      0|                    .to_string(),
  534|       |            );
  535|      0|            for attr in event.attributes() {
  536|      0|                clean_event.push_attribute(attr.map_err(Error::InvalidAttr)?);
  537|       |            }
  538|      0|            writer.write_event(Event::Start(clean_event))?;
  539|      0|            self.in_literal_depth += 1;
  540|      0|            return Ok(());
  541|  88.6k|        }
  542|       |
  543|  88.6k|        let tag_name = self.resolve_tag_name(event.name())?;
  544|       |
  545|       |        //We read attributes
  546|  70.7k|        let (mut language, mut base_iri) = if let Some(current_state) = self.state.last() {
  547|  70.1k|            (
  548|  70.1k|                current_state.language().cloned(),
  549|  70.1k|                current_state.base_iri().cloned(),
  550|  70.1k|            )
  551|       |        } else {
  552|    571|            (None, None)
  553|       |        };
  554|       |
  555|  70.7k|        let mut id_attr = None;
  556|  70.7k|        let mut node_id_attr = None;
  557|  70.7k|        let mut about_attr = None;
  558|  70.7k|        let mut property_attrs = Vec::default();
  559|  70.7k|        let mut resource_attr = None;
  560|  70.7k|        let mut datatype_attr = None;
  561|  70.7k|        let mut parse_type = RdfXmlParseType::Default;
  562|  70.7k|        let mut type_attr = None;
  563|       |
  564|  70.7k|        for attribute in event.attributes() {
  565|  30.1k|            let attribute = attribute.map_err(Error::InvalidAttr)?;
  566|  29.1k|            if attribute.key.as_ref().starts_with(b"xml") {
  567|  7.00k|                if attribute.key.as_ref() == b"xml:lang" {
  568|      0|                    let tag = self.convert_attribute(&attribute)?.to_ascii_lowercase();
  569|      0|                    language = Some(if self.unchecked {
  570|      0|                        tag
  571|       |                    } else {
  572|      0|                        LanguageTag::parse(tag.to_ascii_lowercase())
  573|      0|                            .map_err(|error| SyntaxError {
  574|       |                                inner: SyntaxErrorKind::InvalidLanguageTag { tag, error },
  575|      0|                            })?
  576|      0|                            .into_inner()
  577|       |                    });
  578|  7.00k|                } else if attribute.key.as_ref() == b"xml:base" {
  579|      0|                    let iri = self.convert_attribute(&attribute)?;
  580|      0|                    base_iri = Some(
  581|      0|                        if self.unchecked {
  582|      0|                            Iri::parse_unchecked(iri.clone())
  583|       |                        } else {
  584|      0|                            Iri::parse(iri.clone())
  585|       |                        }
  586|      0|                        .map_err(|error| SyntaxError {
  587|       |                            inner: SyntaxErrorKind::InvalidIri { iri, error },
  588|      0|                        })?,
  589|       |                    )
  590|  7.00k|                } else {
  591|  7.00k|                    // We ignore other xml attributes
  592|  7.00k|                }
  593|       |            } else {
  594|  22.1k|                let attribute_url = self.resolve_attribute_name(attribute.key)?;
  595|  22.0k|                if *attribute_url == *RDF_ID {
  596|      0|                    let mut id = self.convert_attribute(&attribute)?;
  597|      0|                    if !is_nc_name(&id) {
  598|      0|                        return Err(SyntaxError::msg(format!(
  599|      0|                            "{} is not a valid rdf:ID value",
  600|      0|                            &id
  601|      0|                        ))
  602|      0|                        .into());
  603|      0|                    }
  604|      0|                    id.insert(0, '#');
  605|      0|                    id_attr = Some(id);
  606|  22.0k|                } else if *attribute_url == *RDF_BAG_ID {
  607|      0|                    let bag_id = self.convert_attribute(&attribute)?;
  608|      0|                    if !is_nc_name(&bag_id) {
  609|      0|                        return Err(SyntaxError::msg(format!(
  610|      0|                            "{} is not a valid rdf:bagID value",
  611|      0|                            &bag_id
  612|      0|                        ))
  613|      0|                        .into());
  614|      0|                    }
  615|  22.0k|                } else if *attribute_url == *RDF_NODE_ID {
  616|  11.4k|                    let id = self.convert_attribute(&attribute)?;
  617|  11.4k|                    if !is_nc_name(&id) {
  618|      0|                        return Err(SyntaxError::msg(format!(
  619|      0|                            "{} is not a valid rdf:nodeID value",
  620|      0|                            &id
  621|      0|                        ))
  622|      0|                        .into());
  623|  11.4k|                    }
  624|  11.4k|                    node_id_attr = Some(BlankNode::new_unchecked(id));
  625|  10.5k|                } else if *attribute_url == *RDF_ABOUT {
  626|      0|                    about_attr = Some(attribute);
  627|  10.5k|                } else if *attribute_url == *RDF_RESOURCE {
  628|  10.5k|                    resource_attr = Some(attribute);
  629|  10.5k|                } else if *attribute_url == *RDF_DATATYPE {
  630|      0|                    datatype_attr = Some(attribute);
  631|      0|                } else if *attribute_url == *RDF_PARSE_TYPE {
  632|      0|                    parse_type = match attribute.value.as_ref() {
  633|      0|                        b"Collection" => RdfXmlParseType::Collection,
  634|      0|                        b"Literal" => RdfXmlParseType::Literal,
  635|      0|                        b"Resource" => RdfXmlParseType::Resource,
  636|      0|                        _ => RdfXmlParseType::Other,
  637|       |                    };
  638|      0|                } else if attribute_url == rdf::TYPE.as_str() {
  639|      0|                    type_attr = Some(attribute);
  640|      0|                } else if RESERVED_RDF_ATTRIBUTES.contains(&&*attribute_url) {
  641|      0|                    return Err(SyntaxError::msg(format!(
  642|      0|                        "{} is not a valid attribute",
  643|      0|                        &attribute_url
  644|      0|                    ))
  645|      0|                    .into());
  646|       |                } else {
  647|      0|                    property_attrs.push((
  648|      0|                        self.parse_iri(attribute_url)?,
  649|      0|                        self.convert_attribute(&attribute)?,
  650|       |                    ));
  651|       |                }
  652|       |            }
  653|       |        }
  654|       |
  655|       |        //Parsing with the base URI
  656|  69.5k|        let id_attr = match id_attr {
  657|      0|            Some(iri) => {
  658|      0|                let iri = self.resolve_iri(&base_iri, iri)?;
  659|      0|                if self.known_rdf_id.contains(iri.as_str()) {
  660|      0|                    return Err(SyntaxError::msg(format!(
  661|      0|                        "{} has already been used as rdf:ID value",
  662|      0|                        &iri
  663|      0|                    ))
  664|      0|                    .into());
  665|      0|                }
  666|      0|                self.known_rdf_id.insert(iri.as_str().into());
  667|      0|                Some(iri)
  668|       |            }
  669|  69.5k|            None => None,
  670|       |        };
  671|  69.5k|        let about_attr = match about_attr {
  672|      0|            Some(attr) => Some(self.convert_iri_attribute(&base_iri, &attr)?),
  673|  69.5k|            None => None,
  674|       |        };
  675|  69.5k|        let resource_attr = match resource_attr {
  676|  10.5k|            Some(attr) => Some(self.convert_iri_attribute(&base_iri, &attr)?),
  677|  58.9k|            None => None,
  678|       |        };
  679|  69.5k|        let datatype_attr = match datatype_attr {
  680|      0|            Some(attr) => Some(self.convert_iri_attribute(&base_iri, &attr)?),
  681|  69.5k|            None => None,
  682|       |        };
  683|  69.5k|        let type_attr = match type_attr {
  684|      0|            Some(attr) => Some(self.convert_iri_attribute(&base_iri, &attr)?),
  685|  69.5k|            None => None,
  686|       |        };
  687|       |
  688|  69.5k|        let expected_production = match self.state.last() {
  689|  17.9k|            Some(RdfXmlState::Doc { .. }) => RdfXmlNextProduction::Rdf,
  690|       |            Some(
  691|       |                RdfXmlState::Rdf { .. }
  692|       |                | RdfXmlState::PropertyElt { .. }
  693|       |                | RdfXmlState::ParseTypeCollectionPropertyElt { .. },
  694|  23.9k|            ) => RdfXmlNextProduction::NodeElt,
  695|  27.0k|            Some(RdfXmlState::NodeElt { subject, .. }) => RdfXmlNextProduction::PropertyElt {
  696|  27.0k|                subject: subject.clone(),
  697|  27.0k|            },
  698|       |            Some(RdfXmlState::ParseTypeLiteralPropertyElt { .. }) => {
  699|      0|                return Err(
  700|      0|                    SyntaxError::msg("ParseTypeLiteralPropertyElt production children should never be considered as a RDF/XML content").into()
  701|      0|                );
  702|       |            }
  703|       |            None => {
  704|    530|                return Err(
  705|    530|                    SyntaxError::msg("No state in the stack: the XML is not balanced").into(),
  706|    530|                );
  707|       |            }
  708|       |        };
  709|       |
  710|  69.0k|        let new_state = match expected_production {
  711|       |            RdfXmlNextProduction::Rdf => {
  712|  17.9k|                if *tag_name == *RDF_RDF {
  713|  3.51k|                    RdfXmlState::Rdf { base_iri, language }
  714|  14.4k|                } else if RESERVED_RDF_ELEMENTS.contains(&&*tag_name) {
  715|  1.99k|                    return Err(SyntaxError::msg(format!(
  716|  1.99k|                        "Invalid node element tag name: {}",
  717|  1.99k|                        &tag_name
  718|  1.99k|                    ))
  719|  1.99k|                    .into());
  720|       |                } else {
  721|       |                    Self::build_node_elt(
  722|  12.4k|                        self.parse_iri(tag_name)?,
  723|  2.59k|                        base_iri,
  724|  2.59k|                        language,
  725|  2.59k|                        id_attr,
  726|  2.59k|                        node_id_attr,
  727|  2.59k|                        about_attr,
  728|  2.59k|                        type_attr,
  729|  2.59k|                        property_attrs,
  730|  2.59k|                        results,
  731|      0|                    )?
  732|       |                }
  733|       |            }
  734|       |            RdfXmlNextProduction::NodeElt => {
  735|  23.9k|                if RESERVED_RDF_ELEMENTS.contains(&&*tag_name) {
  736|  2.34k|                    return Err(SyntaxError::msg(format!(
  737|  2.34k|                        "Invalid property element tag name: {}",
  738|  2.34k|                        &tag_name
  739|  2.34k|                    ))
  740|  2.34k|                    .into());
  741|  21.6k|                }
  742|  21.6k|                Self::build_node_elt(
  743|  21.6k|                    self.parse_iri(tag_name)?,
  744|  19.1k|                    base_iri,
  745|  19.1k|                    language,
  746|  19.1k|                    id_attr,
  747|  19.1k|                    node_id_attr,
  748|  19.1k|                    about_attr,
  749|  19.1k|                    type_attr,
  750|  19.1k|                    property_attrs,
  751|  19.1k|                    results,
  752|      0|                )?
  753|       |            }
  754|  27.0k|            RdfXmlNextProduction::PropertyElt { subject } => {
  755|  27.0k|                let iri = if *tag_name == *RDF_LI {
  756|     73|                    let Some(RdfXmlState::NodeElt { li_counter, .. }) = self.state.last_mut()
  757|       |                    else {
  758|      0|                        return Err(SyntaxError::msg(format!(
  759|      0|                            "Invalid property element tag name: {}",
  760|      0|                            &tag_name
  761|      0|                        ))
  762|      0|                        .into());
  763|       |                    };
  764|     73|                    *li_counter += 1;
  765|     73|                    NamedNode::new_unchecked(format!(
  766|     73|                        "http://www.w3.org/1999/02/22-rdf-syntax-ns#_{li_counter}"
  767|     73|                    ))
  768|  27.0k|                } else if RESERVED_RDF_ELEMENTS.contains(&&*tag_name)
  769|  25.0k|                    || *tag_name == *RDF_DESCRIPTION
  770|       |                {
  771|  2.01k|                    return Err(SyntaxError::msg(format!(
  772|  2.01k|                        "Invalid property element tag name: {}",
  773|  2.01k|                        &tag_name
  774|  2.01k|                    ))
  775|  2.01k|                    .into());
  776|       |                } else {
  777|  25.0k|                    self.parse_iri(tag_name)?
  778|       |                };
  779|  22.9k|                match parse_type {
  780|       |                    RdfXmlParseType::Default => {
  781|  22.9k|                        if resource_attr.is_some()
  782|  12.3k|                            || node_id_attr.is_some()
  783|  12.1k|                            || !property_attrs.is_empty()
  784|       |                        {
  785|  10.8k|                            let object = match (resource_attr, node_id_attr)
  786|       |                    {
  787|  10.5k|                        (Some(resource_attr), None) => Subject::from(resource_attr),
  788|    250|                        (None, Some(node_id_attr)) => node_id_attr.into(),
  789|      0|                        (None, None) => BlankNode::default().into(),
  790|      0|                        (Some(_), Some(_)) => return Err(SyntaxError::msg("Not both rdf:resource and rdf:nodeID could be set at the same time").into())
  791|       |                    };
  792|  10.8k|                            Self::emit_property_attrs(&object, property_attrs, &language, results);
  793|  10.8k|                            if let Some(type_attr) = type_attr {
  794|      0|                                results.push(Triple::new(object.clone(), rdf::TYPE, type_attr));
  795|  10.8k|                            }
  796|  10.8k|                            RdfXmlState::PropertyElt {
  797|  10.8k|                                iri,
  798|  10.8k|                                base_iri,
  799|  10.8k|                                language,
  800|  10.8k|                                subject,
  801|  10.8k|                                object: Some(NodeOrText::Node(object)),
  802|  10.8k|                                id_attr,
  803|  10.8k|                                datatype_attr,
  804|  10.8k|                            }
  805|       |                        } else {
  806|  12.1k|                            RdfXmlState::PropertyElt {
  807|  12.1k|                                iri,
  808|  12.1k|                                base_iri,
  809|  12.1k|                                language,
  810|  12.1k|                                subject,
  811|  12.1k|                                object: None,
  812|  12.1k|                                id_attr,
  813|  12.1k|                                datatype_attr,
  814|  12.1k|                            }
  815|       |                        }
  816|       |                    }
  817|      0|                    RdfXmlParseType::Literal => RdfXmlState::ParseTypeLiteralPropertyElt {
  818|      0|                        iri,
  819|      0|                        base_iri,
  820|      0|                        language,
  821|      0|                        subject,
  822|      0|                        writer: Writer::new(Vec::default()),
  823|      0|                        id_attr,
  824|      0|                        emit: true,
  825|      0|                    },
  826|      0|                    RdfXmlParseType::Resource => Self::build_parse_type_resource_property_elt(
  827|      0|                        iri, base_iri, language, subject, id_attr, results,
  828|      0|                    ),
  829|      0|                    RdfXmlParseType::Collection => RdfXmlState::ParseTypeCollectionPropertyElt {
  830|      0|                        iri,
  831|      0|                        base_iri,
  832|      0|                        language,
  833|      0|                        subject,
  834|      0|                        objects: Vec::default(),
  835|      0|                        id_attr,
  836|      0|                    },
  837|      0|                    RdfXmlParseType::Other => RdfXmlState::ParseTypeLiteralPropertyElt {
  838|      0|                        iri,
  839|      0|                        base_iri,
  840|      0|                        language,
  841|      0|                        subject,
  842|      0|                        writer: Writer::new(Vec::default()),
  843|      0|                        id_attr,
  844|      0|                        emit: false,
  845|      0|                    },
  846|       |                }
  847|       |            }
  848|       |        };
  849|  48.1k|        self.state.push(new_state);
  850|  48.1k|        Ok(())
  851|  88.6k|    }
_RNvMs2_NtCs1ICs2Somm0b_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE19emit_property_attrsCshwa6i4jbVTh_7rdf_xml:
 1132|  32.5k|    fn emit_property_attrs(
 1133|  32.5k|        subject: &Subject,
 1134|  32.5k|        literal_attributes: Vec<(NamedNode, String)>,
 1135|  32.5k|        language: &Option<String>,
 1136|  32.5k|        results: &mut Vec<Triple>,
 1137|  32.5k|    ) {
 1138|  32.5k|        for (literal_predicate, literal_value) in literal_attributes {
 1139|      0|            results.push(Triple::new(
 1140|      0|                subject.clone(),
 1141|      0|                literal_predicate,
 1142|      0|                if let Some(language) = language.clone() {
 1143|      0|                    Literal::new_language_tagged_literal_unchecked(literal_value, language)
 1144|       |                } else {
 1145|      0|                    Literal::new_simple_literal(literal_value)
 1146|       |                },
 1147|       |            ));
 1148|       |        }
 1149|  32.5k|    }
_RNvMs2_NtCs1ICs2Somm0b_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE21convert_iri_attributeCshwa6i4jbVTh_7rdf_xml:
 1157|  10.5k|    fn convert_iri_attribute(
 1158|  10.5k|        &self,
 1159|  10.5k|        base_iri: &Option<Iri<String>>,
 1160|  10.5k|        attribute: &Attribute<'_>,
 1161|  10.5k|    ) -> Result<NamedNode, ParseError> {
 1162|  10.5k|        Ok(self.resolve_iri(base_iri, self.convert_attribute(attribute)?)?)
 1163|  10.5k|    }
_RNvMs2_NtCs1ICs2Somm0b_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE22resolve_attribute_nameCshwa6i4jbVTh_7rdf_xml:
  905|  22.1k|    fn resolve_attribute_name(&self, qname: QName<'_>) -> Result<String, ParseError> {
  906|  22.1k|        let (namespace, local_name) = self.reader.resolve_attribute(qname);
  907|  22.1k|        self.resolve_ns_name(namespace, local_name)
  908|  22.1k|    }
_RNvMs2_NtCs1ICs2Somm0b_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE9end_stateCshwa6i4jbVTh_7rdf_xml:
 1010|  35.8k|    fn end_state(
 1011|  35.8k|        &mut self,
 1012|  35.8k|        state: RdfXmlState,
 1013|  35.8k|        results: &mut Vec<Triple>,
 1014|  35.8k|    ) -> Result<(), SyntaxError> {
 1015|  35.8k|        match state {
 1016|       |            RdfXmlState::PropertyElt {
 1017|  17.2k|                iri,
 1018|  17.2k|                language,
 1019|  17.2k|                subject,
 1020|  17.2k|                id_attr,
 1021|  17.2k|                datatype_attr,
 1022|  17.2k|                object,
 1023|       |                ..
 1024|       |            } => {
 1025|  17.2k|                let object = match object {
 1026|  11.0k|                    Some(NodeOrText::Node(node)) => Term::from(node),
 1027|  1.21k|                    Some(NodeOrText::Text(text)) => {
 1028|  1.21k|                        Self::new_literal(text, language, datatype_attr).into()
 1029|       |                    }
 1030|  4.92k|                    None => Self::new_literal(String::new(), language, datatype_attr).into(),
 1031|       |                };
 1032|  17.2k|                let triple = Triple::new(subject, iri, object);
 1033|  17.2k|                if let Some(id_attr) = id_attr {
 1034|      0|                    Self::reify(triple.clone(), id_attr, results);
 1035|  17.2k|                }
 1036|  17.2k|                results.push(triple);
 1037|       |            }
 1038|       |            RdfXmlState::ParseTypeCollectionPropertyElt {
 1039|      0|                iri,
 1040|      0|                subject,
 1041|      0|                id_attr,
 1042|      0|                objects,
 1043|      0|                ..
 1044|      0|            } => {
 1045|      0|                let mut current_node = Subject::from(rdf::NIL);
 1046|      0|                for object in objects.into_iter().rev() {
 1047|      0|                    let subject = Subject::from(BlankNode::default());
 1048|      0|                    results.push(Triple::new(subject.clone(), rdf::FIRST, object));
 1049|      0|                    results.push(Triple::new(subject.clone(), rdf::REST, current_node));
 1050|      0|                    current_node = subject;
 1051|      0|                }
 1052|      0|                let triple = Triple::new(subject, iri, current_node);
 1053|      0|                if let Some(id_attr) = id_attr {
 1054|      0|                    Self::reify(triple.clone(), id_attr, results);
 1055|      0|                }
 1056|      0|                results.push(triple);
 1057|       |            }
 1058|       |            RdfXmlState::ParseTypeLiteralPropertyElt {
 1059|      0|                iri,
 1060|      0|                subject,
 1061|      0|                id_attr,
 1062|      0|                writer,
 1063|      0|                emit,
 1064|      0|                ..
 1065|      0|            } => {
 1066|      0|                if emit {
 1067|      0|                    let object = writer.into_inner();
 1068|      0|                    if object.is_empty() {
 1069|      0|                        return Err(SyntaxError::msg(format!(
 1070|      0|                            "No value found for rdf:XMLLiteral value of property {iri}"
 1071|      0|                        )));
 1072|      0|                    }
 1073|      0|                    let triple = Triple::new(
 1074|      0|                        subject,
 1075|      0|                        iri,
 1076|      0|                        Literal::new_typed_literal(
 1077|      0|                            str::from_utf8(&object).map_err(|_| {
 1078|       |                                SyntaxError::msg("The XML literal is not in valid UTF-8".to_owned())
 1079|      0|                            })?,
 1080|       |                            rdf::XML_LITERAL,
 1081|       |                        ),
 1082|       |                    );
 1083|      0|                    if let Some(id_attr) = id_attr {
 1084|      0|                        Self::reify(triple.clone(), id_attr, results);
 1085|      0|                    }
 1086|      0|                    results.push(triple);
 1087|      0|                }
 1088|       |            }
 1089|  15.0k|            RdfXmlState::NodeElt { subject, .. } => match self.state.last_mut() {
 1090|  2.61k|                Some(RdfXmlState::PropertyElt { object, .. }) => {
 1091|  2.61k|                    *object = Some(NodeOrText::Node(subject))
 1092|       |                }
 1093|      0|                Some(RdfXmlState::ParseTypeCollectionPropertyElt { objects, .. }) => {
 1094|      0|                    objects.push(subject)
 1095|       |                }
 1096|  12.4k|                _ => (),
 1097|       |            },
 1098|  3.62k|            _ => (),
 1099|       |        }
 1100|  35.8k|        Ok(())
 1101|  35.8k|    }
_RNvMs2_NtCs1ICs2Somm0b_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCshogagwkBYjf_3std2io8buffered9bufreader9BufReaderRShEE9parse_iriCshwa6i4jbVTh_7rdf_xml:
 1190|  69.6k|    fn parse_iri(&self, relative_iri: String) -> Result<NamedNode, SyntaxError> {
 1191|  69.6k|        Ok(NamedNode::new_unchecked(if self.unchecked {
 1192|      0|            relative_iri
 1193|       |        } else {
 1194|  69.6k|            Iri::parse(relative_iri.clone())
 1195|  69.6k|                .map_err(|error| SyntaxError {
 1196|       |                    inner: SyntaxErrorKind::InvalidIri {
 1197|       |                        iri: relative_iri,
 1198|       |                        error,
 1199|       |                    },
 1200|  69.6k|                })?
 1201|  55.1k|                .into_inner()
 1202|       |        }))
 1203|  69.6k|    }
_RNvXs_NtCs1ICs2Somm0b_8oxrdfxml6parserINtB4_20FromReadRdfXmlReaderRShENtNtNtNtCsiOGkCewTsZJ_4core4iter6traits8iterator8Iterator4nextCshwa6i4jbVTh_7rdf_xml:
  215|   138k|    fn next(&mut self) -> Option<Result<Triple, ParseError>> {
  216|       |        loop {
  217|   280k|            if let Some(triple) = self.results.pop() {
  218|  27.7k|                return Some(Ok(triple));
  219|   253k|            } else if self.reader.is_end {
  220|  6.89k|                return None;
  221|   246k|            }
  222|   246k|            if let Err(e) = self.parse_step() {
  223|   103k|                return Some(Err(e));
  224|   142k|            }
  225|       |        }
  226|   138k|    }
_RNvMNtCs1ICs2Somm0b_8oxrdfxml6parserNtB2_12RdfXmlParser3newCshwa6i4jbVTh_7rdf_xml:
   62|  6.89k|    pub fn new() -> Self {
   63|  6.89k|        Self::default()
   64|  6.89k|    }
_RNvXs3_NtCs1ICs2Somm0b_8oxrdfxml6parserNtB5_12RdfXmlParserNtNtCsiOGkCewTsZJ_4core7default7Default7defaultCshwa6i4jbVTh_7rdf_xml:
   52|  6.89k|#[derive(Default)]
_RNvMs1_NtCs1ICs2Somm0b_8oxrdfxml6parserNtB5_11RdfXmlState8base_iri:
  400|  70.1k|    fn base_iri(&self) -> Option<&Iri<String>> {
  401|  70.1k|        match self {
  402|  18.8k|            RdfXmlState::Doc { base_iri, .. }
  403|  11.3k|            | RdfXmlState::Rdf { base_iri, .. }
  404|  27.2k|            | RdfXmlState::NodeElt { base_iri, .. }
  405|  12.6k|            | RdfXmlState::PropertyElt { base_iri, .. }
  406|      0|            | RdfXmlState::ParseTypeCollectionPropertyElt { base_iri, .. }
  407|  70.1k|            | RdfXmlState::ParseTypeLiteralPropertyElt { base_iri, .. } => base_iri.as_ref(),
  408|  70.1k|        }
  409|  70.1k|    }
_RNvMs1_NtCs1ICs2Somm0b_8oxrdfxml6parserNtB5_11RdfXmlState8language:
  411|  70.1k|    fn language(&self) -> Option<&String> {
  412|  70.1k|        match self {
  413|  18.8k|            RdfXmlState::Doc { .. } => None,
  414|  11.3k|            RdfXmlState::Rdf { language, .. }
  415|  27.2k|            | RdfXmlState::NodeElt { language, .. }
  416|  12.6k|            | RdfXmlState::PropertyElt { language, .. }
  417|      0|            | RdfXmlState::ParseTypeCollectionPropertyElt { language, .. }
  418|  51.3k|            | RdfXmlState::ParseTypeLiteralPropertyElt { language, .. } => language.as_ref(),
  419|       |        }
  420|  70.1k|    }
_RNvNtCs1ICs2Somm0b_8oxrdfxml6parser10is_nc_name:
 1210|  11.4k|fn is_nc_name(name: &str) -> bool {
 1211|  11.4k|    // Name - (Char* ':' Char*)
 1212|  11.4k|    is_name(name) && name.chars().all(|c| c != ':')
 1213|  11.4k|}
_RNvNtCs1ICs2Somm0b_8oxrdfxml6parser7is_name:
 1215|  11.4k|fn is_name(name: &str) -> bool {
 1216|  11.4k|    // NameStartChar (NameChar)*
 1217|  11.4k|    let mut c = name.chars();
 1218|  11.4k|    if !c.next().map_or(false, is_name_start_char) {
 1219|      0|        return false;
 1220|  11.4k|    }
 1221|  11.4k|    c.all(is_name_char)
 1222|  11.4k|}
_RNvNtCs1ICs2Somm0b_8oxrdfxml6parser13is_whitespace:
 1224|   106k|fn is_whitespace(c: u8) -> bool {
 1225|   106k|    matches!(c, b' ' | b'\t' | b'\n' | b'\r')
 1226|   106k|}
_RNvNtCs1ICs2Somm0b_8oxrdfxml6parser7is_utf8:
 1228|  4.64k|fn is_utf8(encoding: &[u8]) -> bool {
 1229|  3.44k|    matches!(
 1230|  4.64k|        encoding.to_ascii_lowercase().as_slice(),
 1231|  4.64k|        b"unicode-1-1-utf-8"
 1232|  4.56k|            | b"unicode11utf8"
 1233|       |            | b"unicode20utf8"
 1234|  4.49k|            | b"utf-8"
 1235|    882|            | b"utf8"
 1236|    515|            | b"x-unicode20utf8"
 1237|       |    )
 1238|  4.64k|}
_RNCNvNtCs1ICs2Somm0b_8oxrdfxml6parser10is_nc_name0B5_:
 1212|   365k|    is_name(name) && name.chars().all(|c| c != ':')

_RNvMNtCs1ICs2Somm0b_8oxrdfxml10serializerNtB2_16RdfXmlSerializer3newCshwa6i4jbVTh_7rdf_xml:
   37|  3.44k|    pub fn new() -> Self {
   38|  3.44k|        Self
   39|  3.44k|    }
_RINvMNtCs1ICs2Somm0b_8oxrdfxml10serializerNtB3_16RdfXmlSerializer18serialize_to_writeINtNtCs99O0fDgeGot_5alloc3vec3VechEECshwa6i4jbVTh_7rdf_xml:
   62|  3.44k|    pub fn serialize_to_write<W: Write>(self, write: W) -> ToWriteRdfXmlWriter<W> {
   63|  3.44k|        ToWriteRdfXmlWriter {
   64|  3.44k|            writer: Writer::new_with_indent(write, b'\t', 1),
   65|  3.44k|            inner: InnerRdfXmlWriter {
   66|  3.44k|                current_subject: None,
   67|  3.44k|            },
   68|  3.44k|        }
   69|  3.44k|    }
_RINvMs0_NtCs1ICs2Somm0b_8oxrdfxml10serializerNtB6_17InnerRdfXmlWriter12write_tripleRNtNtCs4QHopEsftxz_5oxrdf6triple6TripleECshwa6i4jbVTh_7rdf_xml:
  221|  13.8k|    fn write_triple<'a>(
  222|  13.8k|        &mut self,
  223|  13.8k|        t: impl Into<TripleRef<'a>>,
  224|  13.8k|        output: &mut Vec<Event<'a>>,
  225|  13.8k|    ) -> io::Result<()> {
  226|  13.8k|        if self.current_subject.is_none() {
  227|  1.40k|            Self::write_start(output);
  228|  12.4k|        }
  229|       |
  230|  13.8k|        let triple = t.into();
  231|  13.8k|        // We open a new rdf:Description if useful
  232|  13.8k|        if self.current_subject.as_ref().map(Subject::as_ref) != Some(triple.subject) {
  233|  11.1k|            if self.current_subject.is_some() {
  234|  9.78k|                output.push(Event::End(BytesEnd::new("rdf:Description")));
  235|  9.78k|            }
  236|       |
  237|  11.1k|            let mut description_open = BytesStart::new("rdf:Description");
  238|  11.1k|            match triple.subject {
  239|      0|                SubjectRef::NamedNode(node) => {
  240|      0|                    description_open.push_attribute(("rdf:about", node.as_str()))
  241|       |                }
  242|  11.1k|                SubjectRef::BlankNode(node) => {
  243|  11.1k|                    description_open.push_attribute(("rdf:nodeID", node.as_str()))
  244|       |                }
  245|       |                _ => {
  246|      0|                    return Err(io::Error::new(
  247|      0|                        io::ErrorKind::InvalidInput,
  248|      0|                        "RDF/XML only supports named or blank subject",
  249|      0|                    ))
  250|       |                }
  251|       |            }
  252|  11.1k|            output.push(Event::Start(description_open));
  253|  2.68k|        }
  254|  13.8k|        self.current_subject = Some(triple.subject.into_owned());
  255|  13.8k|
  256|  13.8k|        let (prop_prefix, prop_value) = split_iri(triple.predicate.as_str());
  257|  13.8k|        let (prop_qname, prop_xmlns) =
  258|  13.8k|            if prop_prefix == "http://www.w3.org/1999/02/22-rdf-syntax-ns#" {
  259|  10.6k|                (Cow::Owned(format!("rdf:{prop_value}")), None)
  260|  3.26k|            } else if prop_prefix == "http://www.w3.org/2000/xmlns/" {
  261|     99|                (Cow::Owned(format!("xmlns:{prop_value}")), None)
  262|  3.17k|            } else if prop_value.is_empty() {
  263|  1.24k|                (Cow::Borrowed("p:"), Some(("xmlns:p", prop_prefix)))
  264|       |            } else {
  265|  1.92k|                (Cow::Borrowed(prop_value), Some(("xmlns", prop_prefix)))
  266|       |            };
  267|  13.8k|        let mut property_open = BytesStart::new(prop_qname.clone());
  268|  13.8k|        if let Some(prop_xmlns) = prop_xmlns {
  269|  3.17k|            property_open.push_attribute(prop_xmlns);
  270|  10.7k|        }
  271|  13.8k|        let content = match triple.object {
  272|  10.5k|            TermRef::NamedNode(node) => {
  273|  10.5k|                property_open.push_attribute(("rdf:resource", node.as_str()));
  274|  10.5k|                None
  275|       |            }
  276|    250|            TermRef::BlankNode(node) => {
  277|    250|                property_open.push_attribute(("rdf:nodeID", node.as_str()));
  278|    250|                None
  279|       |            }
  280|  3.07k|            TermRef::Literal(literal) => {
  281|  3.07k|                if let Some(language) = literal.language() {
  282|      0|                    property_open.push_attribute(("xml:lang", language));
  283|  3.07k|                } else if !literal.is_plain() {
  284|      0|                    property_open.push_attribute(("rdf:datatype", literal.datatype().as_str()));
  285|  3.07k|                }
  286|  3.07k|                Some(literal.value())
  287|       |            }
  288|       |            _ => {
  289|      0|                return Err(io::Error::new(
  290|      0|                    io::ErrorKind::InvalidInput,
  291|      0|                    "RDF/XML only supports named, blank or literal object",
  292|      0|                ))
  293|       |            }
  294|       |        };
  295|  13.8k|        if let Some(content) = content {
  296|  3.07k|            output.push(Event::Start(property_open));
  297|  3.07k|            output.push(Event::Text(BytesText::new(content)));
  298|  3.07k|            output.push(Event::End(BytesEnd::new(prop_qname)));
  299|  10.8k|        } else {
  300|  10.8k|            output.push(Event::Empty(property_open));
  301|  10.8k|        }
  302|  13.8k|        Ok(())
  303|  13.8k|    }
_RINvMs_NtCs1ICs2Somm0b_8oxrdfxml10serializerINtB5_19ToWriteRdfXmlWriterINtNtCs99O0fDgeGot_5alloc3vec3VechEE12write_tripleRNtNtCs4QHopEsftxz_5oxrdf6triple6TripleECshwa6i4jbVTh_7rdf_xml:
  136|  13.8k|    pub fn write_triple<'a>(&mut self, t: impl Into<TripleRef<'a>>) -> io::Result<()> {
  137|  13.8k|        let mut buffer = Vec::new();
  138|  13.8k|        self.inner.write_triple(t, &mut buffer)?;
  139|  13.8k|        self.flush_buffer(&mut buffer)
  140|  13.8k|    }
_RNvMs_NtCs1ICs2Somm0b_8oxrdfxml10serializerINtB4_19ToWriteRdfXmlWriterINtNtCs99O0fDgeGot_5alloc3vec3VechEE12flush_bufferCshwa6i4jbVTh_7rdf_xml:
  150|  17.3k|    fn flush_buffer(&mut self, buffer: &mut Vec<Event<'_>>) -> io::Result<()> {
  151|  52.7k|        for event in buffer.drain(0..) {
  152|  52.7k|            self.writer.write_event(event).map_err(map_err)?;
  153|       |        }
  154|  17.3k|        Ok(())
  155|  17.3k|    }
_RNvMs_NtCs1ICs2Somm0b_8oxrdfxml10serializerINtB4_19ToWriteRdfXmlWriterINtNtCs99O0fDgeGot_5alloc3vec3VechEE6finishCshwa6i4jbVTh_7rdf_xml:
  143|  3.44k|    pub fn finish(mut self) -> io::Result<W> {
  144|  3.44k|        let mut buffer = Vec::new();
  145|  3.44k|        self.inner.finish(&mut buffer);
  146|  3.44k|        self.flush_buffer(&mut buffer)?;
  147|  3.44k|        Ok(self.writer.into_inner())
  148|  3.44k|    }
_RNvMs0_NtCs1ICs2Somm0b_8oxrdfxml10serializerNtB5_17InnerRdfXmlWriter11write_start:
  305|  3.44k|    fn write_start(output: &mut Vec<Event<'_>>) {
  306|  3.44k|        output.push(Event::Decl(BytesDecl::new("1.0", Some("UTF-8"), None)));
  307|  3.44k|        let mut rdf_open = BytesStart::new("rdf:RDF");
  308|  3.44k|        rdf_open.push_attribute(("xmlns:rdf", "http://www.w3.org/1999/02/22-rdf-syntax-ns#"));
  309|  3.44k|        output.push(Event::Start(rdf_open))
  310|  3.44k|    }
_RNvMs0_NtCs1ICs2Somm0b_8oxrdfxml10serializerNtB5_17InnerRdfXmlWriter6finish:
  312|  3.44k|    fn finish(&self, output: &mut Vec<Event<'static>>) {
  313|  3.44k|        if self.current_subject.is_some() {
  314|  1.40k|            output.push(Event::End(BytesEnd::new("rdf:Description")));
  315|  2.04k|        } else {
  316|  2.04k|            Self::write_start(output);
  317|  2.04k|        }
  318|  3.44k|        output.push(Event::End(BytesEnd::new("rdf:RDF")));
  319|  3.44k|    }
_RNvNtCs1ICs2Somm0b_8oxrdfxml10serializer9split_iri:
  333|  13.8k|fn split_iri(iri: &str) -> (&str, &str) {
  334|  13.8k|    if let Some(position_base) = iri.rfind(|c| !is_name_char(c) || c == ':') {
  335|  13.8k|        if let Some(position_add) = iri[position_base..].find(|c| is_name_start_char(c) && c != ':')
  336|       |        {
  337|  12.5k|            (
  338|  12.5k|                &iri[..position_base + position_add],
  339|  12.5k|                &iri[position_base + position_add..],
  340|  12.5k|            )
  341|       |        } else {
  342|  1.34k|            (iri, "")
  343|       |        }
  344|       |    } else {
  345|      0|        (iri, "")
  346|       |    }
  347|  13.8k|}
_RNCNvNtCs1ICs2Somm0b_8oxrdfxml10serializer9split_iri0B5_:
  334|   129k|    if let Some(position_base) = iri.rfind(|c| !is_name_char(c) || c == ':') {
_RNCNvNtCs1ICs2Somm0b_8oxrdfxml10serializer9split_iris_0B5_:
  335|  27.8k|        if let Some(position_add) = iri[position_base..].find(|c| is_name_start_char(c) && c != ':')

_RNvNtCs1ICs2Somm0b_8oxrdfxml5utils18is_name_start_char:
    1|   522k|pub fn is_name_start_char(c: char) -> bool {
    2|       |    // ":" | [A-Z] | "_" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
    3|   522k|    matches!(c,
    4|       |        ':'
    5|   269k|        | 'A'..='Z'
    6|       |        | '_'
    7|   261k|        | 'a'..='z'
    8|    878|        | '\u{C0}'..='\u{D6}'
    9|    878|        | '\u{D8}'..='\u{F6}'
   10|    878|        | '\u{F8}'..='\u{2FF}'
   11|    878|        | '\u{370}'..='\u{37D}'
   12|    766|        | '\u{37F}'..='\u{1FFF}'
   13|    765|        | '\u{200C}'..='\u{200D}'
   14|    765|        | '\u{2070}'..='\u{218F}'
   15|    765|        | '\u{2C00}'..='\u{2FEF}'
   16|    765|        | '\u{3001}'..='\u{D7FF}'
   17|    765|        | '\u{F900}'..='\u{FDCF}'
   18|    762|        | '\u{FDF0}'..='\u{FFFD}'
   19|    148|        | '\u{10000}'..='\u{EFFFF}')
   20|   522k|}
_RNvNtCs1ICs2Somm0b_8oxrdfxml5utils12is_name_char:
   22|   483k|pub fn is_name_char(c: char) -> bool {
   23|   483k|    // NameStartChar | "-" | "." | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
   24|   483k|    is_name_start_char(c)
   25|   237k|        || matches!(c,  '-' | '.' | '0'..='9' | '\u{B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
   26|   483k|}


_RINvMNtCscyMTKZcQTDt_9getrandom4lazyNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   34|    203|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   35|    203|        // Relaxed ordering is fine, as we only have a single atomic variable.
   36|    203|        let mut val = self.0.load(Relaxed);
   37|    203|        if val == Self::UNINIT {
   38|      1|            val = init();
   39|      1|            self.0.store(val, Relaxed);
   40|    202|        }
   41|    203|        val
   42|    203|    }
_RINvMs_NtCscyMTKZcQTDt_9getrandom4lazyNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   53|    203|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   54|    203|        self.0.unsync_init(|| init() as usize) != 0
   55|    203|    }
_RNCINvMs_NtCscyMTKZcQTDt_9getrandom4lazyNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   54|      1|        self.0.unsync_init(|| init() as usize) != 0

_RNvCscyMTKZcQTDt_9getrandom16getrandom_uninitCs1atBeED3HKw_9rand_core:
  396|    203|pub fn getrandom_uninit(dest: &mut [MaybeUninit<u8>]) -> Result<&mut [u8], Error> {
  397|    203|    if !dest.is_empty() {
  398|    203|        imp::getrandom_inner(dest)?;
  399|      0|    }
  400|       |    // SAFETY: `dest` has been fully initialized by `imp::getrandom_inner`
  401|       |    // since it returned `Ok`.
  402|    203|    Ok(unsafe { slice_assume_init_mut(dest) })
  403|    203|}
_RNvCscyMTKZcQTDt_9getrandom9getrandomCs1atBeED3HKw_9rand_core:
  366|    203|pub fn getrandom(dest: &mut [u8]) -> Result<(), Error> {
  367|    203|    // SAFETY: The `&mut MaybeUninit<_>` reference doesn't escape, and
  368|    203|    // `getrandom_uninit` guarantees it will never de-initialize any part of
  369|    203|    // `dest`.
  370|    203|    getrandom_uninit(unsafe { slice_as_uninit_mut(dest) })?;
  371|    203|    Ok(())
  372|    203|}

_RNvNtCscyMTKZcQTDt_9getrandom3imp15getrandom_inner:
    9|    203|pub fn getrandom_inner(dest: &mut [MaybeUninit<u8>]) -> Result<(), Error> {
   10|       |    // getrandom(2) was introduced in Linux 3.17
   11|       |    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   12|    203|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   13|    203|        sys_fill_exact(dest, getrandom_syscall)
   14|       |    } else {
   15|      0|        use_file::getrandom_inner(dest)
   16|       |    }
   17|    203|}
_RNvNtCscyMTKZcQTDt_9getrandom3imp22is_getrandom_available:
   19|      1|fn is_getrandom_available() -> bool {
   20|      1|    if getrandom_syscall(&mut []) < 0 {
   21|      0|        match last_os_error().raw_os_error() {
   22|      0|            Some(libc::ENOSYS) => false, // No kernel support
   23|       |            // The fallback on EPERM is intentionally not done on Android since this workaround
   24|       |            // seems to be needed only for specific Linux-based products that aren't based
   25|       |            // on Android. See https://github.com/rust-random/getrandom/issues/229.
   26|       |            #[cfg(target_os = "linux")]
   27|      0|            Some(libc::EPERM) => false, // Blocked by seccomp
   28|      0|            _ => true,
   29|       |        }
   30|       |    } else {
   31|      1|        true
   32|       |    }
   33|      1|}

_RINvNtCscyMTKZcQTDt_9getrandom4util19slice_as_uninit_muthECs1atBeED3HKw_9rand_core:
   32|    203|pub unsafe fn slice_as_uninit_mut<T>(slice: &mut [T]) -> &mut [MaybeUninit<T>] {
   33|    203|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   34|    203|    &mut *(slice as *mut [T] as *mut [MaybeUninit<T>])
   35|    203|}
_RINvNtCscyMTKZcQTDt_9getrandom4util21slice_assume_init_muthECs1atBeED3HKw_9rand_core:
    8|    203|pub unsafe fn slice_assume_init_mut<T>(slice: &mut [MaybeUninit<T>]) -> &mut [T] {
    9|    203|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   10|    203|    &mut *(slice as *mut [MaybeUninit<T>] as *mut [T])
   11|    203|}

_RINvNtCscyMTKZcQTDt_9getrandom9util_libc14sys_fill_exactNvB2_17getrandom_syscallEB4_:
   55|    203|pub fn sys_fill_exact(
   56|    203|    mut buf: &mut [MaybeUninit<u8>],
   57|    203|    sys_fill: impl Fn(&mut [MaybeUninit<u8>]) -> libc::ssize_t,
   58|    203|) -> Result<(), Error> {
   59|    406|    while !buf.is_empty() {
   60|    203|        let res = sys_fill(buf);
   61|    203|        match res {
   62|    203|            res if res > 0 => buf = buf.get_mut(res as usize..).ok_or(Error::UNEXPECTED)?,
   63|       |            -1 => {
   64|      0|                let err = last_os_error();
   65|      0|                // We should try again if the call was interrupted.
   66|      0|                if err.raw_os_error() != Some(libc::EINTR) {
   67|      0|                    return Err(err);
   68|      0|                }
   69|       |            }
   70|       |            // Negative return codes not equal to -1 should be impossible.
   71|       |            // EOF (ret = 0) should be impossible, as the data we are reading
   72|       |            // should be an infinite stream of random bytes.
   73|      0|            _ => return Err(Error::UNEXPECTED),
   74|       |        }
   75|       |    }
   76|    203|    Ok(())
   77|    203|}
_RNvNtCscyMTKZcQTDt_9getrandom9util_libc17getrandom_syscall:
  153|    204|pub fn getrandom_syscall(buf: &mut [MaybeUninit<u8>]) -> libc::ssize_t {
  154|    204|    unsafe {
  155|    204|        libc::syscall(
  156|    204|            libc::SYS_getrandom,
  157|    204|            buf.as_mut_ptr() as *mut libc::c_void,
  158|    204|            buf.len(),
  159|    204|            0,
  160|    204|        ) as libc::ssize_t
  161|    204|    }
  162|    204|}

rust_fuzzer_test_input:
  209|  46.1k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  46.1k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  46.1k|                }
  223|  46.1k|
  224|  46.1k|                __libfuzzer_sys_run(bytes);
  225|  46.1k|                0
  226|       |            }
_RNvNvCsmXm2WBU6hV_7rdf_xml1__19___libfuzzer_sys_run:
  241|  46.1k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|       |            }
LLVMFuzzerTestOneInput:
   58|  46.1k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  46.1k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  46.1k|    });
   63|  46.1k|
   64|  46.1k|    match test_input {
   65|  46.1k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  46.1k|}
_RNCNvCsiqeAZnF9yJF_13libfuzzer_sys15test_input_wrap0B3_:
   59|  46.1k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  46.1k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  46.1k|        rust_fuzzer_test_input(data_slice)
   62|  46.1k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvMs3_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next0ECs7S9FTsUwoO8_8oxrdfxml:
 1044|  37.8M|    pub(crate) unsafe fn next(
 1045|  37.8M|        &mut self,
 1046|  37.8M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  37.8M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  37.8M|        let found = find_raw(self.start, self.end)?;
 1057|  34.1M|        let result = found.distance(self.original_start);
 1058|  34.1M|        self.start = found.add(1);
 1059|  34.1M|        Some(result)
 1060|  37.8M|    }
_RINvMs3_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs7_NtBc_6memchrNtB1e_7Memchr3NtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next0ECs7S9FTsUwoO8_8oxrdfxml:
 1044|  5.14M|    pub(crate) unsafe fn next(
 1045|  5.14M|        &mut self,
 1046|  5.14M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  5.14M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  5.14M|        let found = find_raw(self.start, self.end)?;
 1057|  5.12M|        let result = found.distance(self.original_start);
 1058|  5.12M|        self.start = found.add(1);
 1059|  5.12M|        Some(result)
 1060|  5.14M|    }
_RINvMs3_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs_NtBc_6memchrNtB1d_6MemchrNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next0ECs7S9FTsUwoO8_8oxrdfxml:
 1044|   152k|    pub(crate) unsafe fn next(
 1045|   152k|        &mut self,
 1046|   152k|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|   152k|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|   152k|        let found = find_raw(self.start, self.end)?;
 1057|   150k|        let result = found.distance(self.original_start);
 1058|   150k|        self.start = found.add(1);
 1059|   150k|        Some(result)
 1060|   152k|    }
_RINvNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECs7S9FTsUwoO8_8oxrdfxml:
 1125|  2.76M|pub(crate) unsafe fn search_slice_with_raw(
 1126|  2.76M|    haystack: &[u8],
 1127|  2.76M|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  2.76M|) -> Option<usize> {
 1129|  2.76M|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  2.76M|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  2.76M|    // a &[u8].
 1132|  2.76M|    let start = haystack.as_ptr();
 1133|  2.76M|    let end = start.add(haystack.len());
 1134|  2.76M|    let found = find_raw(start, end)?;
 1135|  2.74M|    Some(found.distance(start))
 1136|  2.76M|}
_RNvMs3_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  6.61M|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  6.61M|        Iter {
 1029|  6.61M|            original_start: haystack.as_ptr(),
 1030|  6.61M|            start: haystack.as_ptr(),
 1031|  6.61M|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  6.61M|            haystack: core::marker::PhantomData,
 1033|  6.61M|        }
 1034|  6.61M|    }
_RINvNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECsa7QYSr9aLYT_9quick_xml:
 1125|  2.47M|pub(crate) unsafe fn search_slice_with_raw(
 1126|  2.47M|    haystack: &[u8],
 1127|  2.47M|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  2.47M|) -> Option<usize> {
 1129|  2.47M|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  2.47M|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  2.47M|    // a &[u8].
 1132|  2.47M|    let start = haystack.as_ptr();
 1133|  2.47M|    let end = start.add(haystack.len());
 1134|  2.47M|    let found = find_raw(start, end)?;
 1135|   991k|    Some(found.distance(start))
 1136|  2.47M|}
_RNvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE7needle1B8_:
  117|  5.02M|    pub(crate) fn needle1(&self) -> u8 {
  118|  5.02M|        self.s1
  119|  5.02M|    }
_RNvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE3newB8_:
  111|  5.39M|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  5.39M|        One { s1: needle, v1: V::splat(needle) }
  113|  5.39M|    }
_RNvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE8find_rawB8_:
  143|   138k|    pub(crate) unsafe fn find_raw(
  144|   138k|        &self,
  145|   138k|        start: *const u8,
  146|   138k|        end: *const u8,
  147|   138k|    ) -> Option<*const u8> {
  148|   138k|        // If we want to support vectors bigger than 256 bits, we probably
  149|   138k|        // need to move up to using a u64 for the masks used below. Currently
  150|   138k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|   138k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|   138k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|   138k|        let topos = V::Mask::first_offset;
  155|   138k|        let len = end.distance(start);
  156|   138k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|   138k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|   102k|            return Some(cur);
  167|  35.5k|        }
  168|  35.5k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  35.5k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  35.5k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  35.5k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  35.5k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  37.3k|        while cur <= end.sub(V::BYTES) {
  213|  2.51k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  2.51k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    661|                return Some(cur);
  216|  1.84k|            }
  217|  1.84k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  34.8k|        if cur < end {
  224|  29.3k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  29.3k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  29.3k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  29.3k|            return self.search_chunk(cur, topos);
  228|  5.48k|        }
  229|  5.48k|        None
  230|   138k|    }
_RINvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|   170k|    unsafe fn search_chunk(
  417|   170k|        &self,
  418|   170k|        cur: *const u8,
  419|   170k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|   170k|    ) -> Option<*const u8> {
  421|   170k|        let chunk = V::load_unaligned(cur);
  422|   170k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|   170k|        if mask.has_non_zero() {
  424|   107k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  62.3k|            None
  427|       |        }
  428|   170k|    }
_RNvMs_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE3newBa_:
  450|  37.8M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  37.8M|        Two {
  452|  37.8M|            s1: needle1,
  453|  37.8M|            s2: needle2,
  454|  37.8M|            v1: V::splat(needle1),
  455|  37.8M|            v2: V::splat(needle2),
  456|  37.8M|        }
  457|  37.8M|    }
_RNvMs_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  7.78M|    pub(crate) fn needle1(&self) -> u8 {
  462|  7.78M|        self.s1
  463|  7.78M|    }
_RNvMs_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  7.55M|    pub(crate) fn needle2(&self) -> u8 {
  468|  7.55M|        self.s2
  469|  7.55M|    }
_RNvMs_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE8find_rawBa_:
  493|   890k|    pub(crate) unsafe fn find_raw(
  494|   890k|        &self,
  495|   890k|        start: *const u8,
  496|   890k|        end: *const u8,
  497|   890k|    ) -> Option<*const u8> {
  498|   890k|        // If we want to support vectors bigger than 256 bits, we probably
  499|   890k|        // need to move up to using a u64 for the masks used below. Currently
  500|   890k|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|   890k|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|   890k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   890k|        let topos = V::Mask::first_offset;
  505|   890k|        let len = end.distance(start);
  506|   890k|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   890k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   464k|            return Some(cur);
  517|   425k|        }
  518|   425k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   425k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|   425k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   425k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   425k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   455k|        while cur <= end.sub(V::BYTES) {
  551|  31.3k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  31.3k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  1.14k|                return Some(cur);
  554|  30.2k|            }
  555|  30.2k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   424k|        if cur < end {
  562|   413k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   413k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|   413k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   413k|            return self.search_chunk(cur, topos);
  566|  10.8k|        }
  567|  10.8k|        None
  568|   890k|    }
_RINvMs_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  1.33M|    unsafe fn search_chunk(
  671|  1.33M|        &self,
  672|  1.33M|        cur: *const u8,
  673|  1.33M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  1.33M|    ) -> Option<*const u8> {
  675|  1.33M|        let chunk = V::load_unaligned(cur);
  676|  1.33M|        let eq1 = self.v1.cmpeq(chunk);
  677|  1.33M|        let eq2 = self.v2.cmpeq(chunk);
  678|  1.33M|        let mask = eq1.or(eq2).movemask();
  679|  1.33M|        if mask.has_non_zero() {
  680|   474k|            let mask1 = eq1.movemask();
  681|   474k|            let mask2 = eq2.movemask();
  682|   474k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|   860k|            None
  685|       |        }
  686|  1.33M|    }
_RNvMs0_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE3newBb_:
  710|  5.14M|    pub(crate) unsafe fn new(
  711|  5.14M|        needle1: u8,
  712|  5.14M|        needle2: u8,
  713|  5.14M|        needle3: u8,
  714|  5.14M|    ) -> Three<V> {
  715|  5.14M|        Three {
  716|  5.14M|            s1: needle1,
  717|  5.14M|            s2: needle2,
  718|  5.14M|            s3: needle3,
  719|  5.14M|            v1: V::splat(needle1),
  720|  5.14M|            v2: V::splat(needle2),
  721|  5.14M|            v3: V::splat(needle3),
  722|  5.14M|        }
  723|  5.14M|    }
_RNvMs0_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE7needle1Bb_:
  727|   700k|    pub(crate) fn needle1(&self) -> u8 {
  728|   700k|        self.s1
  729|   700k|    }
_RNvMs0_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE7needle2Bb_:
  733|   553k|    pub(crate) fn needle2(&self) -> u8 {
  734|   553k|        self.s2
  735|   553k|    }
_RNvMs0_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE7needle3Bb_:
  739|   552k|    pub(crate) fn needle3(&self) -> u8 {
  740|   552k|        self.s3
  741|   552k|    }
_RNvMs0_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE8find_rawBb_:
  765|   110k|    pub(crate) unsafe fn find_raw(
  766|   110k|        &self,
  767|   110k|        start: *const u8,
  768|   110k|        end: *const u8,
  769|   110k|    ) -> Option<*const u8> {
  770|   110k|        // If we want to support vectors bigger than 256 bits, we probably
  771|   110k|        // need to move up to using a u64 for the masks used below. Currently
  772|   110k|        // they are 32 bits, which means we're SOL for vectors that need masks
  773|   110k|        // bigger than 32 bits. Overall unclear until there's a use case.
  774|   110k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  775|       |
  776|   110k|        let topos = V::Mask::first_offset;
  777|   110k|        let len = end.distance(start);
  778|   110k|        debug_assert!(
  779|      0|            len >= V::BYTES,
  780|      0|            "haystack has length {}, but must be at least {}",
  781|       |            len,
  782|       |            V::BYTES
  783|       |        );
  784|       |
  785|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  786|       |        // of the haystack prior to where aligned loads can start.
  787|   110k|        if let Some(cur) = self.search_chunk(start, topos) {
  788|   103k|            return Some(cur);
  789|  6.40k|        }
  790|  6.40k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  791|  6.40k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  792|  6.40k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  793|  6.40k|        if len >= Self::LOOP_SIZE {
  794|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  795|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  796|       |
  797|      0|                let a = V::load_aligned(cur);
  798|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  799|      0|                let eqa1 = self.v1.cmpeq(a);
  800|      0|                let eqb1 = self.v1.cmpeq(b);
  801|      0|                let eqa2 = self.v2.cmpeq(a);
  802|      0|                let eqb2 = self.v2.cmpeq(b);
  803|      0|                let eqa3 = self.v3.cmpeq(a);
  804|      0|                let eqb3 = self.v3.cmpeq(b);
  805|      0|                let or1 = eqa1.or(eqb1);
  806|      0|                let or2 = eqa2.or(eqb2);
  807|      0|                let or3 = eqa3.or(eqb3);
  808|      0|                let or4 = or1.or(or2);
  809|      0|                let or5 = or3.or(or4);
  810|      0|                if or5.movemask_will_have_non_zero() {
  811|      0|                    let mask = eqa1
  812|      0|                        .movemask()
  813|      0|                        .or(eqa2.movemask())
  814|      0|                        .or(eqa3.movemask());
  815|      0|                    if mask.has_non_zero() {
  816|      0|                        return Some(cur.add(topos(mask)));
  817|      0|                    }
  818|      0|
  819|      0|                    let mask = eqb1
  820|      0|                        .movemask()
  821|      0|                        .or(eqb2.movemask())
  822|      0|                        .or(eqb3.movemask());
  823|      0|                    debug_assert!(mask.has_non_zero());
  824|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  825|      0|                }
  826|      0|                cur = cur.add(Self::LOOP_SIZE);
  827|       |            }
  828|  6.40k|        }
  829|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  830|       |        // loads here, but I believe we are guaranteed that they are aligned
  831|       |        // since `cur` is aligned.
  832|  7.41k|        while cur <= end.sub(V::BYTES) {
  833|  3.74k|            debug_assert!(end.distance(cur) >= V::BYTES);
  834|  3.74k|            if let Some(cur) = self.search_chunk(cur, topos) {
  835|  2.73k|                return Some(cur);
  836|  1.01k|            }
  837|  1.01k|            cur = cur.add(V::BYTES);
  838|       |        }
  839|       |        // Finally handle any remaining bytes less than the size of V. In this
  840|       |        // case, our pointer may indeed be unaligned and the load may overlap
  841|       |        // with the previous one. But that's okay since we know the previous
  842|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  843|  3.67k|        if cur < end {
  844|  3.57k|            debug_assert!(end.distance(cur) < V::BYTES);
  845|  3.57k|            cur = cur.sub(V::BYTES - end.distance(cur));
  846|  3.57k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  847|  3.57k|            return self.search_chunk(cur, topos);
  848|     94|        }
  849|     94|        None
  850|   110k|    }
_RINvMs0_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB6_5ThreeNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBc_6vector16SensibleMoveMaskNtB29_8MoveMask12first_offsetEBc_:
  962|   117k|    unsafe fn search_chunk(
  963|   117k|        &self,
  964|   117k|        cur: *const u8,
  965|   117k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  966|   117k|    ) -> Option<*const u8> {
  967|   117k|        let chunk = V::load_unaligned(cur);
  968|   117k|        let eq1 = self.v1.cmpeq(chunk);
  969|   117k|        let eq2 = self.v2.cmpeq(chunk);
  970|   117k|        let eq3 = self.v3.cmpeq(chunk);
  971|   117k|        let mask = eq1.or(eq2).or(eq3).movemask();
  972|   117k|        if mask.has_non_zero() {
  973|   108k|            let mask1 = eq1.movemask();
  974|   108k|            let mask2 = eq2.movemask();
  975|   108k|            let mask3 = eq3.movemask();
  976|   108k|            Some(cur.add(mask_to_offset(mask1.or(mask2).or(mask3))))
  977|       |        } else {
  978|  8.93k|            None
  979|       |        }
  980|   117k|    }
_RNvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iE3newB8_:
  111|  5.39M|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  5.39M|        One { s1: needle, v1: V::splat(needle) }
  113|  5.39M|    }
_RNvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  2.81M|    pub(crate) unsafe fn find_raw(
  144|  2.81M|        &self,
  145|  2.81M|        start: *const u8,
  146|  2.81M|        end: *const u8,
  147|  2.81M|    ) -> Option<*const u8> {
  148|  2.81M|        // If we want to support vectors bigger than 256 bits, we probably
  149|  2.81M|        // need to move up to using a u64 for the masks used below. Currently
  150|  2.81M|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  2.81M|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  2.81M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  2.81M|        let topos = V::Mask::first_offset;
  155|  2.81M|        let len = end.distance(start);
  156|  2.81M|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  2.81M|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  2.55M|            return Some(cur);
  167|   258k|        }
  168|   258k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|   258k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|   258k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|   258k|        if len >= Self::LOOP_SIZE {
  172|   153k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|   139k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|   139k|                let a = V::load_aligned(cur);
  176|   139k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|   139k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|   139k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|   139k|                let eqa = self.v1.cmpeq(a);
  180|   139k|                let eqb = self.v1.cmpeq(b);
  181|   139k|                let eqc = self.v1.cmpeq(c);
  182|   139k|                let eqd = self.v1.cmpeq(d);
  183|   139k|                let or1 = eqa.or(eqb);
  184|   139k|                let or2 = eqc.or(eqd);
  185|   139k|                let or3 = or1.or(or2);
  186|   139k|                if or3.movemask_will_have_non_zero() {
  187|   127k|                    let mask = eqa.movemask();
  188|   127k|                    if mask.has_non_zero() {
  189|  79.5k|                        return Some(cur.add(topos(mask)));
  190|  47.5k|                    }
  191|  47.5k|
  192|  47.5k|                    let mask = eqb.movemask();
  193|  47.5k|                    if mask.has_non_zero() {
  194|  36.3k|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|  11.2k|                    }
  196|  11.2k|
  197|  11.2k|                    let mask = eqc.movemask();
  198|  11.2k|                    if mask.has_non_zero() {
  199|  8.52k|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|  2.70k|                    }
  201|  2.70k|
  202|  2.70k|                    let mask = eqd.movemask();
  203|  2.70k|                    debug_assert!(mask.has_non_zero());
  204|  2.70k|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  12.4k|                }
  206|  12.4k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|   116k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|   176k|        while cur <= end.sub(V::BYTES) {
  213|  77.1k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  77.1k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|  32.1k|                return Some(cur);
  216|  44.9k|            }
  217|  44.9k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  98.8k|        if cur < end {
  224|  81.9k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  81.9k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  81.9k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  81.9k|            return self.search_chunk(cur, topos);
  228|  16.9k|        }
  229|  16.9k|        None
  230|  2.81M|    }
_RINvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  2.97M|    unsafe fn search_chunk(
  417|  2.97M|        &self,
  418|  2.97M|        cur: *const u8,
  419|  2.97M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  2.97M|    ) -> Option<*const u8> {
  421|  2.97M|        let chunk = V::load_unaligned(cur);
  422|  2.97M|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  2.97M|        if mask.has_non_zero() {
  424|  2.59M|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|   380k|            None
  427|       |        }
  428|  2.97M|    }
_RNvMs_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iE3newBa_:
  450|  37.8M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  37.8M|        Two {
  452|  37.8M|            s1: needle1,
  453|  37.8M|            s2: needle2,
  454|  37.8M|            v1: V::splat(needle1),
  455|  37.8M|            v2: V::splat(needle2),
  456|  37.8M|        }
  457|  37.8M|    }
_RNvMs_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iE8find_rawBa_:
  493|  34.3M|    pub(crate) unsafe fn find_raw(
  494|  34.3M|        &self,
  495|  34.3M|        start: *const u8,
  496|  34.3M|        end: *const u8,
  497|  34.3M|    ) -> Option<*const u8> {
  498|  34.3M|        // If we want to support vectors bigger than 256 bits, we probably
  499|  34.3M|        // need to move up to using a u64 for the masks used below. Currently
  500|  34.3M|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|  34.3M|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|  34.3M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  34.3M|        let topos = V::Mask::first_offset;
  505|  34.3M|        let len = end.distance(start);
  506|  34.3M|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  34.3M|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  32.4M|            return Some(cur);
  517|  1.93M|        }
  518|  1.93M|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  1.93M|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|  1.93M|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  1.93M|        if len >= Self::LOOP_SIZE {
  522|  2.54M|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|  2.24M|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|  2.24M|                let a = V::load_aligned(cur);
  526|  2.24M|                let b = V::load_aligned(cur.add(V::BYTES));
  527|  2.24M|                let eqa1 = self.v1.cmpeq(a);
  528|  2.24M|                let eqb1 = self.v1.cmpeq(b);
  529|  2.24M|                let eqa2 = self.v2.cmpeq(a);
  530|  2.24M|                let eqb2 = self.v2.cmpeq(b);
  531|  2.24M|                let or1 = eqa1.or(eqb1);
  532|  2.24M|                let or2 = eqa2.or(eqb2);
  533|  2.24M|                let or3 = or1.or(or2);
  534|  2.24M|                if or3.movemask_will_have_non_zero() {
  535|   251k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|   251k|                    if mask.has_non_zero() {
  537|   170k|                        return Some(cur.add(topos(mask)));
  538|  81.2k|                    }
  539|  81.2k|
  540|  81.2k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|  81.2k|                    debug_assert!(mask.has_non_zero());
  542|  81.2k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|  1.99M|                }
  544|  1.99M|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|  1.38M|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  2.17M|        while cur <= end.sub(V::BYTES) {
  551|   513k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   513k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  22.2k|                return Some(cur);
  554|   491k|            }
  555|   491k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|  1.66M|        if cur < end {
  562|  1.62M|            debug_assert!(end.distance(cur) < V::BYTES);
  563|  1.62M|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|  1.62M|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|  1.62M|            return self.search_chunk(cur, topos);
  566|  32.7k|        }
  567|  32.7k|        None
  568|  34.3M|    }
_RINvMs_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  36.5M|    unsafe fn search_chunk(
  671|  36.5M|        &self,
  672|  36.5M|        cur: *const u8,
  673|  36.5M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  36.5M|    ) -> Option<*const u8> {
  675|  36.5M|        let chunk = V::load_unaligned(cur);
  676|  36.5M|        let eq1 = self.v1.cmpeq(chunk);
  677|  36.5M|        let eq2 = self.v2.cmpeq(chunk);
  678|  36.5M|        let mask = eq1.or(eq2).movemask();
  679|  36.5M|        if mask.has_non_zero() {
  680|  32.6M|            let mask1 = eq1.movemask();
  681|  32.6M|            let mask2 = eq2.movemask();
  682|  32.6M|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  3.88M|            None
  685|       |        }
  686|  36.5M|    }
_RNvMs0_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iE3newBb_:
  710|  5.14M|    pub(crate) unsafe fn new(
  711|  5.14M|        needle1: u8,
  712|  5.14M|        needle2: u8,
  713|  5.14M|        needle3: u8,
  714|  5.14M|    ) -> Three<V> {
  715|  5.14M|        Three {
  716|  5.14M|            s1: needle1,
  717|  5.14M|            s2: needle2,
  718|  5.14M|            s3: needle3,
  719|  5.14M|            v1: V::splat(needle1),
  720|  5.14M|            v2: V::splat(needle2),
  721|  5.14M|            v3: V::splat(needle3),
  722|  5.14M|        }
  723|  5.14M|    }
_RNvMs0_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iE8find_rawBb_:
  765|  4.86M|    pub(crate) unsafe fn find_raw(
  766|  4.86M|        &self,
  767|  4.86M|        start: *const u8,
  768|  4.86M|        end: *const u8,
  769|  4.86M|    ) -> Option<*const u8> {
  770|  4.86M|        // If we want to support vectors bigger than 256 bits, we probably
  771|  4.86M|        // need to move up to using a u64 for the masks used below. Currently
  772|  4.86M|        // they are 32 bits, which means we're SOL for vectors that need masks
  773|  4.86M|        // bigger than 32 bits. Overall unclear until there's a use case.
  774|  4.86M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  775|       |
  776|  4.86M|        let topos = V::Mask::first_offset;
  777|  4.86M|        let len = end.distance(start);
  778|  4.86M|        debug_assert!(
  779|      0|            len >= V::BYTES,
  780|      0|            "haystack has length {}, but must be at least {}",
  781|       |            len,
  782|       |            V::BYTES
  783|       |        );
  784|       |
  785|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  786|       |        // of the haystack prior to where aligned loads can start.
  787|  4.86M|        if let Some(cur) = self.search_chunk(start, topos) {
  788|  4.05M|            return Some(cur);
  789|   809k|        }
  790|   809k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  791|   809k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  792|   809k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  793|   809k|        if len >= Self::LOOP_SIZE {
  794|  2.84M|            while cur <= end.sub(Self::LOOP_SIZE) {
  795|  2.83M|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  796|       |
  797|  2.83M|                let a = V::load_aligned(cur);
  798|  2.83M|                let b = V::load_aligned(cur.add(V::BYTES));
  799|  2.83M|                let eqa1 = self.v1.cmpeq(a);
  800|  2.83M|                let eqb1 = self.v1.cmpeq(b);
  801|  2.83M|                let eqa2 = self.v2.cmpeq(a);
  802|  2.83M|                let eqb2 = self.v2.cmpeq(b);
  803|  2.83M|                let eqa3 = self.v3.cmpeq(a);
  804|  2.83M|                let eqb3 = self.v3.cmpeq(b);
  805|  2.83M|                let or1 = eqa1.or(eqb1);
  806|  2.83M|                let or2 = eqa2.or(eqb2);
  807|  2.83M|                let or3 = eqa3.or(eqb3);
  808|  2.83M|                let or4 = or1.or(or2);
  809|  2.83M|                let or5 = or3.or(or4);
  810|  2.83M|                if or5.movemask_will_have_non_zero() {
  811|   765k|                    let mask = eqa1
  812|   765k|                        .movemask()
  813|   765k|                        .or(eqa2.movemask())
  814|   765k|                        .or(eqa3.movemask());
  815|   765k|                    if mask.has_non_zero() {
  816|   590k|                        return Some(cur.add(topos(mask)));
  817|   175k|                    }
  818|   175k|
  819|   175k|                    let mask = eqb1
  820|   175k|                        .movemask()
  821|   175k|                        .or(eqb2.movemask())
  822|   175k|                        .or(eqb3.movemask());
  823|   175k|                    debug_assert!(mask.has_non_zero());
  824|   175k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  825|  2.07M|                }
  826|  2.07M|                cur = cur.add(Self::LOOP_SIZE);
  827|       |            }
  828|  39.4k|        }
  829|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  830|       |        // loads here, but I believe we are guaranteed that they are aligned
  831|       |        // since `cur` is aligned.
  832|  55.5k|        while cur <= end.sub(V::BYTES) {
  833|  39.5k|            debug_assert!(end.distance(cur) >= V::BYTES);
  834|  39.5k|            if let Some(cur) = self.search_chunk(cur, topos) {
  835|  28.4k|                return Some(cur);
  836|  11.1k|            }
  837|  11.1k|            cur = cur.add(V::BYTES);
  838|       |        }
  839|       |        // Finally handle any remaining bytes less than the size of V. In this
  840|       |        // case, our pointer may indeed be unaligned and the load may overlap
  841|       |        // with the previous one. But that's okay since we know the previous
  842|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  843|  16.0k|        if cur < end {
  844|  16.0k|            debug_assert!(end.distance(cur) < V::BYTES);
  845|  16.0k|            cur = cur.sub(V::BYTES - end.distance(cur));
  846|  16.0k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  847|  16.0k|            return self.search_chunk(cur, topos);
  848|     24|        }
  849|     24|        None
  850|  4.86M|    }
_RINvMs0_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB6_5ThreeNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBc_6vector16SensibleMoveMaskNtB29_8MoveMask12first_offsetEBc_:
  962|  4.92M|    unsafe fn search_chunk(
  963|  4.92M|        &self,
  964|  4.92M|        cur: *const u8,
  965|  4.92M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  966|  4.92M|    ) -> Option<*const u8> {
  967|  4.92M|        let chunk = V::load_unaligned(cur);
  968|  4.92M|        let eq1 = self.v1.cmpeq(chunk);
  969|  4.92M|        let eq2 = self.v2.cmpeq(chunk);
  970|  4.92M|        let eq3 = self.v3.cmpeq(chunk);
  971|  4.92M|        let mask = eq1.or(eq2).or(eq3).movemask();
  972|  4.92M|        if mask.has_non_zero() {
  973|  4.09M|            let mask1 = eq1.movemask();
  974|  4.09M|            let mask2 = eq2.movemask();
  975|  4.09M|            let mask3 = eq3.movemask();
  976|  4.09M|            Some(cur.add(mask_to_offset(mask1.or(mask2).or(mask3))))
  977|       |        } else {
  978|   821k|            None
  979|       |        }
  980|  4.92M|    }
_RINvNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  1.40M|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  1.40M|    start: *const u8,
 1150|  1.40M|    end: *const u8,
 1151|  1.40M|    confirm: F,
 1152|  1.40M|) -> Option<*const u8> {
 1153|  1.40M|    debug_assert!(start <= end);
 1154|  1.40M|    let mut ptr = start;
 1155|  5.37M|    while ptr < end {
 1156|  5.02M|        if confirm(*ptr) {
 1157|  1.06M|            return Some(ptr);
 1158|  3.96M|        }
 1159|  3.96M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|   342k|    None
 1162|  1.40M|}
_RINvNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|  2.43M|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  2.43M|    start: *const u8,
 1150|  2.43M|    end: *const u8,
 1151|  2.43M|    confirm: F,
 1152|  2.43M|) -> Option<*const u8> {
 1153|  2.43M|    debug_assert!(start <= end);
 1154|  2.43M|    let mut ptr = start;
 1155|  9.42M|    while ptr < end {
 1156|  7.78M|        if confirm(*ptr) {
 1157|   791k|            return Some(ptr);
 1158|  6.98M|        }
 1159|  6.98M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  1.64M|    None
 1162|  2.43M|}
_RINvNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs6_NtNtNtB6_6x86_644avx26memchrNtB1d_5Three8find_raw0EB8_:
 1148|   168k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|   168k|    start: *const u8,
 1150|   168k|    end: *const u8,
 1151|   168k|    confirm: F,
 1152|   168k|) -> Option<*const u8> {
 1153|   168k|    debug_assert!(start <= end);
 1154|   168k|    let mut ptr = start;
 1155|   712k|    while ptr < end {
 1156|   700k|        if confirm(*ptr) {
 1157|   155k|            return Some(ptr);
 1158|   544k|        }
 1159|   544k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  12.8k|    None
 1162|   168k|}

_RNvMNtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  5.39M|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  5.39M|        One {
   71|  5.39M|            sse2: generic::One::new(needle),
   72|  5.39M|            avx2: generic::One::new(needle),
   73|  5.39M|        }
   74|  5.39M|    }
_RNvMNtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  5.39M|    pub unsafe fn find_raw(
  180|  5.39M|        &self,
  181|  5.39M|        start: *const u8,
  182|  5.39M|        end: *const u8,
  183|  5.39M|    ) -> Option<*const u8> {
  184|  5.39M|        if start >= end {
  185|  1.03M|            return None;
  186|  4.35M|        }
  187|  4.35M|        let len = end.distance(start);
  188|  4.35M|        if len < __m256i::BYTES {
  189|  1.54M|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  1.40M|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  1.40M|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|   138k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  2.81M|        }
  201|  2.81M|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  2.81M|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  2.81M|        // enough to run on the vector routine. Pointer validity is caller's
  204|  2.81M|        // responsibility.
  205|  2.81M|        //
  206|  2.81M|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  2.81M|        // means we'd have to annotate this routine with `target_feature`.
  208|  2.81M|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  2.81M|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  2.81M|        // The real problem is that a routine with a `target_feature`
  211|  2.81M|        // annotation generally can't be inlined into caller code unless
  212|  2.81M|        // the caller code has the same target feature annotations. Namely,
  213|  2.81M|        // the common case (at time of writing) is for calling code to not
  214|  2.81M|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  2.81M|        // `target_feature` on this routine, it can be inlined which will
  216|  2.81M|        // handle some of the short-haystack cases above without touching the
  217|  2.81M|        // architecture specific code.
  218|  2.81M|        self.find_raw_avx2(start, end)
  219|  5.39M|    }
_RNCNvMNtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|  5.02M|                generic::fwd_byte_by_byte(start, end, |b| {
  193|  5.02M|                    b == self.sse2.needle1()
  194|  5.02M|                })
_RNvMNtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|   138k|    unsafe fn find_raw_sse2(
  337|   138k|        &self,
  338|   138k|        start: *const u8,
  339|   138k|        end: *const u8,
  340|   138k|    ) -> Option<*const u8> {
  341|   138k|        self.sse2.find_raw(start, end)
  342|   138k|    }
_RNvMNtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  2.81M|    unsafe fn find_raw_avx2(
  397|  2.81M|        &self,
  398|  2.81M|        start: *const u8,
  399|  2.81M|        end: *const u8,
  400|  2.81M|    ) -> Option<*const u8> {
  401|  2.81M|        self.avx2.find_raw(start, end)
  402|  2.81M|    }
_RNvMs2_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  37.8M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  37.8M|        Two {
  558|  37.8M|            sse2: generic::Two::new(needle1, needle2),
  559|  37.8M|            avx2: generic::Two::new(needle1, needle2),
  560|  37.8M|        }
  561|  37.8M|    }
_RNvMs2_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNvMs2_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  37.8M|    pub unsafe fn find_raw(
  655|  37.8M|        &self,
  656|  37.8M|        start: *const u8,
  657|  37.8M|        end: *const u8,
  658|  37.8M|    ) -> Option<*const u8> {
  659|  37.8M|        if start >= end {
  660|   189k|            return None;
  661|  37.6M|        }
  662|  37.6M|        let len = end.distance(start);
  663|  37.6M|        if len < __m256i::BYTES {
  664|  3.32M|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  2.43M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  2.43M|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|   890k|                self.find_raw_sse2(start, end)
  674|       |            };
  675|  34.3M|        }
  676|  34.3M|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|  34.3M|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|  34.3M|        // enough to run on the vector routine. Pointer validity is caller's
  679|  34.3M|        // responsibility.
  680|  34.3M|        //
  681|  34.3M|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|  34.3M|        // means we'd have to annotate this routine with `target_feature`.
  683|  34.3M|        // Which is fine, because this routine is `unsafe` anyway and the
  684|  34.3M|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|  34.3M|        // The real problem is that a routine with a `target_feature`
  686|  34.3M|        // annotation generally can't be inlined into caller code unless
  687|  34.3M|        // the caller code has the same target feature annotations. Namely,
  688|  34.3M|        // the common case (at time of writing) is for calling code to not
  689|  34.3M|        // have the `avx2` target feature enabled *at compile time*. Without
  690|  34.3M|        // `target_feature` on this routine, it can be inlined which will
  691|  34.3M|        // handle some of the short-haystack cases above without touching the
  692|  34.3M|        // architecture specific code.
  693|  34.3M|        self.find_raw_avx2(start, end)
  694|  37.8M|    }
_RNCNvMs2_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  7.78M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  7.78M|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  7.78M|                })
_RNvMs2_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|   890k|    unsafe fn find_raw_sse2(
  765|   890k|        &self,
  766|   890k|        start: *const u8,
  767|   890k|        end: *const u8,
  768|   890k|    ) -> Option<*const u8> {
  769|   890k|        self.sse2.find_raw(start, end)
  770|   890k|    }
_RNvMs2_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|  34.3M|    unsafe fn find_raw_avx2(
  805|  34.3M|        &self,
  806|  34.3M|        start: *const u8,
  807|  34.3M|        end: *const u8,
  808|  34.3M|    ) -> Option<*const u8> {
  809|  34.3M|        self.avx2.find_raw(start, end)
  810|  34.3M|    }
_RNvMs6_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB5_5Three13new_uncheckedBd_:
  935|  5.14M|    pub unsafe fn new_unchecked(
  936|  5.14M|        needle1: u8,
  937|  5.14M|        needle2: u8,
  938|  5.14M|        needle3: u8,
  939|  5.14M|    ) -> Three {
  940|  5.14M|        Three {
  941|  5.14M|            sse2: generic::Three::new(needle1, needle2, needle3),
  942|  5.14M|            avx2: generic::Three::new(needle1, needle2, needle3),
  943|  5.14M|        }
  944|  5.14M|    }
_RNvMs6_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB5_5Three12is_availableBd_:
  956|      1|    pub fn is_available() -> bool {
  957|      1|        #[cfg(not(target_feature = "sse2"))]
  958|      1|        {
  959|      1|            false
  960|      1|        }
  961|      1|        #[cfg(target_feature = "sse2")]
  962|      1|        {
  963|      1|            #[cfg(target_feature = "avx2")]
  964|      1|            {
  965|      1|                true
  966|      1|            }
  967|      1|            #[cfg(not(target_feature = "avx2"))]
  968|      1|            {
  969|      1|                #[cfg(feature = "std")]
  970|      1|                {
  971|      1|                    std::is_x86_feature_detected!("avx2")
  972|       |                }
  973|       |                #[cfg(not(feature = "std"))]
  974|       |                {
  975|       |                    false
  976|       |                }
  977|       |            }
  978|       |        }
  979|      1|    }
_RNvMs6_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB5_5Three8find_rawBd_:
 1037|  5.14M|    pub unsafe fn find_raw(
 1038|  5.14M|        &self,
 1039|  5.14M|        start: *const u8,
 1040|  5.14M|        end: *const u8,
 1041|  5.14M|    ) -> Option<*const u8> {
 1042|  5.14M|        if start >= end {
 1043|  1.60k|            return None;
 1044|  5.14M|        }
 1045|  5.14M|        let len = end.distance(start);
 1046|  5.14M|        if len < __m256i::BYTES {
 1047|   278k|            return if len < __m128i::BYTES {
 1048|       |                // SAFETY: We require the caller to pass valid start/end
 1049|       |                // pointers.
 1050|   168k|                generic::fwd_byte_by_byte(start, end, |b| {
 1051|       |                    b == self.sse2.needle1()
 1052|       |                        || b == self.sse2.needle2()
 1053|       |                        || b == self.sse2.needle3()
 1054|   168k|                })
 1055|       |            } else {
 1056|       |                // SAFETY: We require the caller to pass valid start/end
 1057|       |                // pointers.
 1058|   110k|                self.find_raw_sse2(start, end)
 1059|       |            };
 1060|  4.86M|        }
 1061|  4.86M|        // SAFETY: Building a `Three` means it's safe to call both 'sse2' and
 1062|  4.86M|        // 'avx2' routines. Also, we've checked that our haystack is big
 1063|  4.86M|        // enough to run on the vector routine. Pointer validity is caller's
 1064|  4.86M|        // responsibility.
 1065|  4.86M|        //
 1066|  4.86M|        // Note that we could call `self.avx2.find_raw` directly here. But that
 1067|  4.86M|        // means we'd have to annotate this routine with `target_feature`.
 1068|  4.86M|        // Which is fine, because this routine is `unsafe` anyway and the
 1069|  4.86M|        // `target_feature` obligation is met by virtue of building a `Three`.
 1070|  4.86M|        // The real problem is that a routine with a `target_feature`
 1071|  4.86M|        // annotation generally can't be inlined into caller code unless
 1072|  4.86M|        // the caller code has the same target feature annotations. Namely,
 1073|  4.86M|        // the common case (at time of writing) is for calling code to not
 1074|  4.86M|        // have the `avx2` target feature enabled *at compile time*. Without
 1075|  4.86M|        // `target_feature` on this routine, it can be inlined which will
 1076|  4.86M|        // handle some of the short-haystack cases above without touching the
 1077|  4.86M|        // architecture specific code.
 1078|  4.86M|        self.find_raw_avx2(start, end)
 1079|  5.14M|    }
_RNCNvMs6_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB7_5Three8find_raw0Bf_:
 1050|   700k|                generic::fwd_byte_by_byte(start, end, |b| {
 1051|   700k|                    b == self.sse2.needle1()
 1052|   553k|                        || b == self.sse2.needle2()
 1053|   552k|                        || b == self.sse2.needle3()
 1054|   700k|                })
_RNvMs6_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB5_5Three13find_raw_sse2Bd_:
 1151|   110k|    unsafe fn find_raw_sse2(
 1152|   110k|        &self,
 1153|   110k|        start: *const u8,
 1154|   110k|        end: *const u8,
 1155|   110k|    ) -> Option<*const u8> {
 1156|   110k|        self.sse2.find_raw(start, end)
 1157|   110k|    }
_RNvMs6_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB5_5Three13find_raw_avx2Bd_:
 1191|  4.86M|    unsafe fn find_raw_avx2(
 1192|  4.86M|        &self,
 1193|  4.86M|        start: *const u8,
 1194|  4.86M|        end: *const u8,
 1195|  4.86M|    ) -> Option<*const u8> {
 1196|  4.86M|        self.avx2.find_raw(start, end)
 1197|  4.86M|    }

_RNvNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_646memchr10memchr_raw:
  174|  5.39M|pub(crate) fn memchr_raw(
  175|  5.39M|    n1: u8,
  176|  5.39M|    start: *const u8,
  177|  5.39M|    end: *const u8,
  178|  5.39M|) -> Option<*const u8> {
  179|  5.39M|    // SAFETY: We provide a valid function pointer type.
  180|  5.39M|    unsafe_ifunc!(
  181|  5.39M|        One,
  182|  5.39M|        find_raw,
  183|  5.39M|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  5.39M|        Option<*const u8>,
  185|  5.39M|        start,
  186|  5.39M|        end,
  187|  5.39M|        n1
  188|  5.39M|    )
  189|  5.39M|}
_RNvNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  37.8M|pub(crate) fn memchr2_raw(
  221|  37.8M|    n1: u8,
  222|  37.8M|    n2: u8,
  223|  37.8M|    start: *const u8,
  224|  37.8M|    end: *const u8,
  225|  37.8M|) -> Option<*const u8> {
  226|  37.8M|    // SAFETY: We provide a valid function pointer type.
  227|  37.8M|    unsafe_ifunc!(
  228|  37.8M|        Two,
  229|  37.8M|        find_raw,
  230|  37.8M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  37.8M|        Option<*const u8>,
  232|  37.8M|        start,
  233|  37.8M|        end,
  234|  37.8M|        n1,
  235|  37.8M|        n2
  236|  37.8M|    )
  237|  37.8M|}
_RNvNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_646memchr11memchr3_raw:
  270|  5.14M|pub(crate) fn memchr3_raw(
  271|  5.14M|    n1: u8,
  272|  5.14M|    n2: u8,
  273|  5.14M|    n3: u8,
  274|  5.14M|    start: *const u8,
  275|  5.14M|    end: *const u8,
  276|  5.14M|) -> Option<*const u8> {
  277|  5.14M|    // SAFETY: We provide a valid function pointer type.
  278|  5.14M|    unsafe_ifunc!(
  279|  5.14M|        Three,
  280|  5.14M|        find_raw,
  281|  5.14M|        unsafe fn(u8, u8, u8, *const u8, *const u8) -> Option<*const u8>,
  282|  5.14M|        Option<*const u8>,
  283|  5.14M|        start,
  284|  5.14M|        end,
  285|  5.14M|        n1,
  286|  5.14M|        n2,
  287|  5.14M|        n3
  288|  5.14M|    )
  289|  5.14M|}
_RNvNvNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  5.39M|        unsafe fn find_avx2(
   79|  5.39M|            $($needle: u8),+,
   80|  5.39M|            $hay_start: *const u8,
   81|  5.39M|            $hay_end: *const u8,
   82|  5.39M|        ) -> $retty {
   83|       |            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  5.39M|            $memchrty::new_unchecked($($needle),+)
   85|  5.39M|                .$memchrfind($hay_start, $hay_end)
   86|  5.39M|        }
_RNvNvNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  37.8M|        unsafe fn find_avx2(
   79|  37.8M|            $($needle: u8),+,
   80|  37.8M|            $hay_start: *const u8,
   81|  37.8M|            $hay_end: *const u8,
   82|  37.8M|        ) -> $retty {
   83|       |            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  37.8M|            $memchrty::new_unchecked($($needle),+)
   85|  37.8M|                .$memchrfind($hay_start, $hay_end)
   86|  37.8M|        }
_RNvNvNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_646memchr11memchr3_raw9find_avx2:
   78|  5.14M|        unsafe fn find_avx2(
   79|  5.14M|            $($needle: u8),+,
   80|  5.14M|            $hay_start: *const u8,
   81|  5.14M|            $hay_end: *const u8,
   82|  5.14M|        ) -> $retty {
   83|       |            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  5.14M|            $memchrty::new_unchecked($($needle),+)
   85|  5.14M|                .$memchrfind($hay_start, $hay_end)
   86|  5.14M|        }
_RNvNvNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_646memchr11memchr3_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }

_RNvXNtCsgAmdbuUjTpV_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|   135M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|   135M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|   135M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|   135M|    }
_RNvXNtCsgAmdbuUjTpV_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|  3.46M|    fn as_usize(self) -> usize {
   27|  3.46M|        self as usize
   28|  3.46M|    }

_RNvMNtCsgAmdbuUjTpV_6memchr6memchrNtB2_6Memchr3newCs7S9FTsUwoO8_8oxrdfxml:
  300|   127k|    pub fn new(needle1: u8, haystack: &'h [u8]) -> Memchr<'h> {
  301|   127k|        Memchr {
  302|   127k|            needle1,
  303|   127k|            it: crate::arch::generic::memchr::Iter::new(haystack),
  304|   127k|        }
  305|   127k|    }
_RNvMs2_NtCsgAmdbuUjTpV_6memchr6memchrNtB5_7Memchr23newCs7S9FTsUwoO8_8oxrdfxml:
  377|  3.86M|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  3.86M|        Memchr2 {
  379|  3.86M|            needle1,
  380|  3.86M|            needle2,
  381|  3.86M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  3.86M|        }
  383|  3.86M|    }
_RNvMs6_NtCsgAmdbuUjTpV_6memchr6memchrNtB5_7Memchr33newCs7S9FTsUwoO8_8oxrdfxml:
  446|  2.61M|    pub fn new(
  447|  2.61M|        needle1: u8,
  448|  2.61M|        needle2: u8,
  449|  2.61M|        needle3: u8,
  450|  2.61M|        haystack: &'h [u8],
  451|  2.61M|    ) -> Memchr3<'h> {
  452|  2.61M|        Memchr3 {
  453|  2.61M|            needle1,
  454|  2.61M|            needle2,
  455|  2.61M|            needle3,
  456|  2.61M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  457|  2.61M|        }
  458|  2.61M|    }
_RNvNtCsgAmdbuUjTpV_6memchr6memchr11memchr_iterCs7S9FTsUwoO8_8oxrdfxml:
  216|   127k|pub fn memchr_iter<'h>(needle: u8, haystack: &'h [u8]) -> Memchr<'h> {
  217|   127k|    Memchr::new(needle, haystack)
  218|   127k|}
_RNvNtCsgAmdbuUjTpV_6memchr6memchr12memchr2_iterCs7S9FTsUwoO8_8oxrdfxml:
  232|  3.86M|pub fn memchr2_iter<'h>(
  233|  3.86M|    needle1: u8,
  234|  3.86M|    needle2: u8,
  235|  3.86M|    haystack: &'h [u8],
  236|  3.86M|) -> Memchr2<'h> {
  237|  3.86M|    Memchr2::new(needle1, needle2, haystack)
  238|  3.86M|}
_RNvNtCsgAmdbuUjTpV_6memchr6memchr12memchr3_iterCs7S9FTsUwoO8_8oxrdfxml:
  256|  2.61M|pub fn memchr3_iter<'h>(
  257|  2.61M|    needle1: u8,
  258|  2.61M|    needle2: u8,
  259|  2.61M|    needle3: u8,
  260|  2.61M|    haystack: &'h [u8],
  261|  2.61M|) -> Memchr3<'h> {
  262|  2.61M|    Memchr3::new(needle1, needle2, needle3, haystack)
  263|  2.61M|}
_RNvNtCsgAmdbuUjTpV_6memchr6memchr6memchrCs7S9FTsUwoO8_8oxrdfxml:
   27|  2.76M|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  2.76M|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  2.76M|    // pointer between start and end.
   30|  2.76M|    unsafe {
   31|  2.76M|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  2.76M|        })
   34|  2.76M|    }
   35|  2.76M|}
_RNvXs3_NtCsgAmdbuUjTpV_6memchr6memchrNtB5_7Memchr2NtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4nextCs7S9FTsUwoO8_8oxrdfxml:
  390|  37.8M|    fn next(&mut self) -> Option<usize> {
  391|  37.8M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  37.8M|        // pointers returns will fall within the start and end bounds, and this
  393|  37.8M|        // upholds the safety contract of `self.it.next`.
  394|  37.8M|        unsafe {
  395|  37.8M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  37.8M|        }
  397|  37.8M|    }
_RNvXs7_NtCsgAmdbuUjTpV_6memchr6memchrNtB5_7Memchr3NtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4nextCs7S9FTsUwoO8_8oxrdfxml:
  465|  5.14M|    fn next(&mut self) -> Option<usize> {
  466|  5.14M|        // SAFETY: All of our implementations of memchr ensure that any
  467|  5.14M|        // pointers returns will fall within the start and end bounds, and this
  468|  5.14M|        // upholds the safety contract of `self.it.next`.
  469|  5.14M|        unsafe {
  470|  5.14M|            self.it.next(|s, e| {
  471|       |                memchr3_raw(self.needle1, self.needle2, self.needle3, s, e)
  472|  5.14M|            })
  473|  5.14M|        }
  474|  5.14M|    }
_RNvXs_NtCsgAmdbuUjTpV_6memchr6memchrNtB4_6MemchrNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4nextCs7S9FTsUwoO8_8oxrdfxml:
  312|   152k|    fn next(&mut self) -> Option<usize> {
  313|   152k|        // SAFETY: All of our implementations of memchr ensure that any
  314|   152k|        // pointers returns will fall within the start and end bounds, and this
  315|   152k|        // upholds the safety contract of `self.it.next`.
  316|   152k|        unsafe {
  317|   152k|            // NOTE: I attempted to define an enum of previously created
  318|   152k|            // searchers and then switch on those here instead of just
  319|   152k|            // calling `memchr_raw` (or `One::new(..).find_raw(..)`). But
  320|   152k|            // that turned out to have a fair bit of extra overhead when
  321|   152k|            // searching very small haystacks.
  322|   152k|            self.it.next(|s, e| memchr_raw(self.needle1, s, e))
  323|   152k|        }
  324|   152k|    }
_RNCNvXs3_NtCsgAmdbuUjTpV_6memchr6memchrNtB7_7Memchr2NtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next0Csa7QYSr9aLYT_9quick_xml:
  395|  37.8M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNCNvXs7_NtCsgAmdbuUjTpV_6memchr6memchrNtB7_7Memchr3NtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next0Csa7QYSr9aLYT_9quick_xml:
  470|  5.14M|            self.it.next(|s, e| {
  471|  5.14M|                memchr3_raw(self.needle1, self.needle2, self.needle3, s, e)
  472|  5.14M|            })
_RNCNvXs_NtCsgAmdbuUjTpV_6memchr6memchrNtB6_6MemchrNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next0Csa7QYSr9aLYT_9quick_xml:
  322|   152k|            self.it.next(|s, e| memchr_raw(self.needle1, s, e))
_RNvNtCsgAmdbuUjTpV_6memchr6memchr10memchr_rawCsa7QYSr9aLYT_9quick_xml:
  504|   152k|unsafe fn memchr_raw(
  505|   152k|    needle: u8,
  506|   152k|    start: *const u8,
  507|   152k|    end: *const u8,
  508|   152k|) -> Option<*const u8> {
  509|   152k|    #[cfg(target_arch = "x86_64")]
  510|   152k|    {
  511|   152k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|   152k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|   152k|        // time. This function also handles using a fallback if neither AVX2
  514|   152k|        // nor SSE2 (unusual) are available.
  515|   152k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|   152k|    }
  517|   152k|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  518|   152k|    {
  519|   152k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|   152k|    }
  521|   152k|    #[cfg(target_arch = "aarch64")]
  522|   152k|    {
  523|   152k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|   152k|    }
  525|   152k|    #[cfg(not(any(
  526|   152k|        target_arch = "x86_64",
  527|   152k|        all(target_arch = "wasm32", target_feature = "simd128"),
  528|   152k|        target_arch = "aarch64"
  529|   152k|    )))]
  530|   152k|    {
  531|   152k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|   152k|    }
  533|   152k|}
_RNvNtCsgAmdbuUjTpV_6memchr6memchr11memchr2_rawCsa7QYSr9aLYT_9quick_xml:
  574|  37.8M|unsafe fn memchr2_raw(
  575|  37.8M|    needle1: u8,
  576|  37.8M|    needle2: u8,
  577|  37.8M|    start: *const u8,
  578|  37.8M|    end: *const u8,
  579|  37.8M|) -> Option<*const u8> {
  580|  37.8M|    #[cfg(target_arch = "x86_64")]
  581|  37.8M|    {
  582|  37.8M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  37.8M|    }
  584|  37.8M|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  585|  37.8M|    {
  586|  37.8M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  37.8M|    }
  588|  37.8M|    #[cfg(target_arch = "aarch64")]
  589|  37.8M|    {
  590|  37.8M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  37.8M|    }
  592|  37.8M|    #[cfg(not(any(
  593|  37.8M|        target_arch = "x86_64",
  594|  37.8M|        all(target_arch = "wasm32", target_feature = "simd128"),
  595|  37.8M|        target_arch = "aarch64"
  596|  37.8M|    )))]
  597|  37.8M|    {
  598|  37.8M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  37.8M|            .find_raw(start, end)
  600|  37.8M|    }
  601|  37.8M|}
_RNvNtCsgAmdbuUjTpV_6memchr6memchr11memchr3_rawCsa7QYSr9aLYT_9quick_xml:
  646|  5.14M|unsafe fn memchr3_raw(
  647|  5.14M|    needle1: u8,
  648|  5.14M|    needle2: u8,
  649|  5.14M|    needle3: u8,
  650|  5.14M|    start: *const u8,
  651|  5.14M|    end: *const u8,
  652|  5.14M|) -> Option<*const u8> {
  653|  5.14M|    #[cfg(target_arch = "x86_64")]
  654|  5.14M|    {
  655|  5.14M|        crate::arch::x86_64::memchr::memchr3_raw(
  656|  5.14M|            needle1, needle2, needle3, start, end,
  657|  5.14M|        )
  658|  5.14M|    }
  659|  5.14M|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  660|  5.14M|    {
  661|  5.14M|        crate::arch::wasm32::memchr::memchr3_raw(
  662|  5.14M|            needle1, needle2, needle3, start, end,
  663|  5.14M|        )
  664|  5.14M|    }
  665|  5.14M|    #[cfg(target_arch = "aarch64")]
  666|  5.14M|    {
  667|  5.14M|        crate::arch::aarch64::memchr::memchr3_raw(
  668|  5.14M|            needle1, needle2, needle3, start, end,
  669|  5.14M|        )
  670|  5.14M|    }
  671|  5.14M|    #[cfg(not(any(
  672|  5.14M|        target_arch = "x86_64",
  673|  5.14M|        all(target_arch = "wasm32", target_feature = "simd128"),
  674|  5.14M|        target_arch = "aarch64"
  675|  5.14M|    )))]
  676|  5.14M|    {
  677|  5.14M|        crate::arch::all::memchr::Three::new(needle1, needle2, needle3)
  678|  5.14M|            .find_raw(start, end)
  679|  5.14M|    }
  680|  5.14M|}
_RNvNtCsgAmdbuUjTpV_6memchr6memchr6memchrCsa7QYSr9aLYT_9quick_xml:
   27|  2.47M|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  2.47M|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  2.47M|    // pointer between start and end.
   30|  2.47M|    unsafe {
   31|  2.47M|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  2.47M|        })
   34|  2.47M|    }
   35|  2.47M|}
_RNCNvNtCsgAmdbuUjTpV_6memchr6memchr6memchr0B5_:
   31|  5.24M|        generic::search_slice_with_raw(haystack, |start, end| {
   32|  5.24M|            memchr_raw(needle, start, end)
   33|  5.24M|        })
_RNvNtCsgAmdbuUjTpV_6memchr6memchr10memchr_rawB3_:
  504|  5.24M|unsafe fn memchr_raw(
  505|  5.24M|    needle: u8,
  506|  5.24M|    start: *const u8,
  507|  5.24M|    end: *const u8,
  508|  5.24M|) -> Option<*const u8> {
  509|  5.24M|    #[cfg(target_arch = "x86_64")]
  510|  5.24M|    {
  511|  5.24M|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  5.24M|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  5.24M|        // time. This function also handles using a fallback if neither AVX2
  514|  5.24M|        // nor SSE2 (unusual) are available.
  515|  5.24M|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  5.24M|    }
  517|  5.24M|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  518|  5.24M|    {
  519|  5.24M|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  5.24M|    }
  521|  5.24M|    #[cfg(target_arch = "aarch64")]
  522|  5.24M|    {
  523|  5.24M|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  5.24M|    }
  525|  5.24M|    #[cfg(not(any(
  526|  5.24M|        target_arch = "x86_64",
  527|  5.24M|        all(target_arch = "wasm32", target_feature = "simd128"),
  528|  5.24M|        target_arch = "aarch64"
  529|  5.24M|    )))]
  530|  5.24M|    {
  531|  5.24M|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  5.24M|    }
  533|  5.24M|}

_RNvYNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtNtCsgAmdbuUjTpV_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   63|  5.22M|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   64|  5.22M|        self.movemask().has_non_zero()
   65|  5.22M|    }
_RNvMNtCsgAmdbuUjTpV_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  126|  41.1M|    fn get_for_offset(self) -> u32 {
  127|  41.1M|        #[cfg(target_endian = "big")]
  128|  41.1M|        {
  129|  41.1M|            self.0.swap_bytes()
  130|  41.1M|        }
  131|  41.1M|        #[cfg(target_endian = "little")]
  132|  41.1M|        {
  133|  41.1M|            self.0
  134|  41.1M|        }
  135|  41.1M|    }
_RNvXs_NtCsgAmdbuUjTpV_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  146|  52.4M|    fn has_non_zero(self) -> bool {
  147|  52.4M|        self.0 != 0
  148|  52.4M|    }
_RNvXs_NtCsgAmdbuUjTpV_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  171|  41.1M|    fn first_offset(self) -> usize {
  172|  41.1M|        // We are dealing with little endian here (and if we aren't, we swap
  173|  41.1M|        // the bytes so we are in practice), where the most significant byte
  174|  41.1M|        // is at a higher address. That means the least significant bit that
  175|  41.1M|        // is set corresponds to the position of our first matching byte.
  176|  41.1M|        // That position corresponds to the number of zeros after the least
  177|  41.1M|        // significant bit.
  178|  41.1M|        self.get_for_offset().trailing_zeros() as usize
  179|  41.1M|    }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86sse2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  222|  2.89M|        unsafe fn movemask(self) -> SensibleMoveMask {
  223|  2.89M|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  224|  2.89M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86avx2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  271|   130M|        unsafe fn movemask(self) -> SensibleMoveMask {
  272|   130M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  273|   130M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86sse2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  217|  1.62M|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  218|  1.62M|            _mm_loadu_si128(data as *const __m128i)
  219|  1.62M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86sse2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  227|  3.19M|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  228|  3.19M|            _mm_cmpeq_epi8(self, vector2)
  229|  3.19M|        }
_RNvXs_NtCsgAmdbuUjTpV_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  161|  43.7M|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  162|  43.7M|        SensibleMoveMask(self.0 | other.0)
  163|  43.7M|    }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86sse2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  207|  96.6M|        unsafe fn splat(byte: u8) -> __m128i {
  208|  96.6M|            _mm_set1_epi8(byte as i8)
  209|  96.6M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86sse2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iNtB4_6Vector2or:
  237|  1.57M|        unsafe fn or(self, vector2: Self) -> __m128i {
  238|  1.57M|            _mm_or_si128(self, vector2)
  239|  1.57M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86avx2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  266|  44.4M|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  267|  44.4M|            _mm256_loadu_si256(data as *const __m256i)
  268|  44.4M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86avx2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  276|   117M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  277|   117M|            _mm256_cmpeq_epi8(self, vector2)
  278|   117M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86avx2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  256|  96.6M|        unsafe fn splat(byte: u8) -> __m256i {
  257|  96.6M|            _mm256_set1_epi8(byte as i8)
  258|  96.6M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86avx2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  261|  10.7M|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  262|  10.7M|            _mm256_load_si256(data as *const __m256i)
  263|  10.7M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86avx2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtB4_6Vector2or:
  286|  67.7M|        unsafe fn or(self, vector2: Self) -> __m256i {
  287|  67.7M|            _mm256_or_si256(self, vector2)
  288|  67.7M|        }

_RNvMs2_NtCsjdbBOGgcNBY_9once_cell3impINtB5_8OnceCellNtNtCs8f6x4lOZV33_5alloc6string6StringE14is_initializedCsiqeAZnF9yJF_13libfuzzer_sys:
   49|  46.1k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  46.1k|        // An `Acquire` load is enough because that makes all the initialization
   51|  46.1k|        // operations visible to us, and, this being a fast path, weaker
   52|  46.1k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  46.1k|        // `SeqCst` operations on the slow path.
   54|  46.1k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  46.1k|    }

_RNvMs4_NtCsjdbBOGgcNBY_9once_cell4syncINtB5_8OnceCellNtNtCs8f6x4lOZV33_5alloc6string6StringE3getCsiqeAZnF9yJF_13libfuzzer_sys:
  963|  46.1k|        pub fn get(&self) -> Option<&T> {
  964|  46.1k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  46.1k|                None
  969|       |            }
  970|  46.1k|        }

_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECs4x4bMiUCp0I_5oxrdf:
 1739|   144k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1740|   144k|        Err(IriParseError { kind })
 1741|   144k|    }
_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_10parse_path0ECs4x4bMiUCp0I_5oxrdf:
 1705|  29.1M|    fn read_url_codepoint_or_echar(
 1706|  29.1M|        &mut self,
 1707|  29.1M|        c: char,
 1708|  29.1M|        valid: impl Fn(char) -> bool,
 1709|  29.1M|    ) -> Result<(), IriParseError> {
 1710|  29.1M|        if UNCHECKED || valid(c) {
 1711|  29.1M|            self.output.push(c);
 1712|  29.1M|            Ok(())
 1713|  46.6k|        } else if c == '%' {
 1714|  18.3k|            self.read_echar()
 1715|       |        } else {
 1716|  28.3k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1717|       |        }
 1718|  29.1M|    }
_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_11parse_query0ECs4x4bMiUCp0I_5oxrdf:
 1705|   114M|    fn read_url_codepoint_or_echar(
 1706|   114M|        &mut self,
 1707|   114M|        c: char,
 1708|   114M|        valid: impl Fn(char) -> bool,
 1709|   114M|    ) -> Result<(), IriParseError> {
 1710|   114M|        if UNCHECKED || valid(c) {
 1711|   113M|            self.output.push(c);
 1712|   113M|            Ok(())
 1713|  14.2k|        } else if c == '%' {
 1714|  5.98k|            self.read_echar()
 1715|       |        } else {
 1716|  8.25k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1717|       |        }
 1718|   114M|    }
_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_14parse_fragment0ECs4x4bMiUCp0I_5oxrdf:
 1705|  25.2M|    fn read_url_codepoint_or_echar(
 1706|  25.2M|        &mut self,
 1707|  25.2M|        c: char,
 1708|  25.2M|        valid: impl Fn(char) -> bool,
 1709|  25.2M|    ) -> Result<(), IriParseError> {
 1710|  25.2M|        if UNCHECKED || valid(c) {
 1711|  25.2M|            self.output.push(c);
 1712|  25.2M|            Ok(())
 1713|  16.5k|        } else if c == '%' {
 1714|  5.89k|            self.read_echar()
 1715|       |        } else {
 1716|  10.6k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1717|       |        }
 1718|  25.2M|    }
_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_15parse_authority0ECs4x4bMiUCp0I_5oxrdf:
 1705|  19.0M|    fn read_url_codepoint_or_echar(
 1706|  19.0M|        &mut self,
 1707|  19.0M|        c: char,
 1708|  19.0M|        valid: impl Fn(char) -> bool,
 1709|  19.0M|    ) -> Result<(), IriParseError> {
 1710|  19.0M|        if UNCHECKED || valid(c) {
 1711|  19.0M|            self.output.push(c);
 1712|  19.0M|            Ok(())
 1713|  25.6k|        } else if c == '%' {
 1714|  10.5k|            self.read_echar()
 1715|       |        } else {
 1716|  15.0k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1717|       |        }
 1718|  19.0M|    }
_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_19parse_relative_path0ECs4x4bMiUCp0I_5oxrdf:
 1705|   334k|    fn read_url_codepoint_or_echar(
 1706|   334k|        &mut self,
 1707|   334k|        c: char,
 1708|   334k|        valid: impl Fn(char) -> bool,
 1709|   334k|    ) -> Result<(), IriParseError> {
 1710|   334k|        if UNCHECKED || valid(c) {
 1711|   300k|            self.output.push(c);
 1712|   300k|            Ok(())
 1713|  33.7k|        } else if c == '%' {
 1714|  6.35k|            self.read_echar()
 1715|       |        } else {
 1716|  27.3k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1717|       |        }
 1718|   334k|    }
_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNvB7_28is_iunreserved_or_sub_delimsECs4x4bMiUCp0I_5oxrdf:
 1705|  17.9M|    fn read_url_codepoint_or_echar(
 1706|  17.9M|        &mut self,
 1707|  17.9M|        c: char,
 1708|  17.9M|        valid: impl Fn(char) -> bool,
 1709|  17.9M|    ) -> Result<(), IriParseError> {
 1710|  17.9M|        if UNCHECKED || valid(c) {
 1711|  17.9M|            self.output.push(c);
 1712|  17.9M|            Ok(())
 1713|  7.97k|        } else if c == '%' {
 1714|  6.16k|            self.read_echar()
 1715|       |        } else {
 1716|  1.80k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1717|       |        }
 1718|  17.9M|    }
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10parse_path0Cs4x4bMiUCp0I_5oxrdf:
 1665|  29.1M|                Some(c) => self.read_url_codepoint_or_echar(c, |c| {
 1666|  29.1M|                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1667|  29.1M|                })?,
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0Cs4x4bMiUCp0I_5oxrdf:
 1723|  51.6k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0Cs4x4bMiUCp0I_5oxrdf:
 1724|  32.1k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E11parse_query0Cs4x4bMiUCp0I_5oxrdf:
 1679|   114M|                self.read_url_codepoint_or_echar(c, |c| {
 1680|   114M|                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?' | '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1681|  71.9M|                })?
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E14parse_fragment0Cs4x4bMiUCp0I_5oxrdf:
 1690|  25.2M|            self.read_url_codepoint_or_echar(c, |c| {
 1691|  25.2M|                is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?')
 1692|  25.2M|            })?;
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E15parse_authority0Cs4x4bMiUCp0I_5oxrdf:
 1513|  19.0M|                    self.read_url_codepoint_or_echar(c, |c| {
 1514|  19.0M|                        is_iunreserved_or_sub_delims(c) || c == ':'
 1515|  19.0M|                    })?;
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E19parse_relative_path0Cs4x4bMiUCp0I_5oxrdf:
 1472|   334k|            self.read_url_codepoint_or_echar(c, |c| is_iunreserved_or_sub_delims(c) || c == '@')?;
_RNvMCsikbtAEUxupI_5oxiriINtB2_6IriRefNtNtCs8f6x4lOZV33_5alloc6string6StringE10into_innerCs4x4bMiUCp0I_5oxrdf:
  185|  1.16M|    pub fn into_inner(self) -> T {
  186|  1.16M|        self.iri
  187|  1.16M|    }
_RNvMCsikbtAEUxupI_5oxiriINtB2_6IriRefNtNtCs8f6x4lOZV33_5alloc6string6StringE11is_absoluteCs4x4bMiUCp0I_5oxrdf:
  199|  1.19M|    pub fn is_absolute(&self) -> bool {
  200|  1.19M|        self.positions.scheme_end != 0
  201|  1.19M|    }
_RNvMCsikbtAEUxupI_5oxiriINtB2_6IriRefNtNtCs8f6x4lOZV33_5alloc6string6StringE5parseCs4x4bMiUCp0I_5oxrdf:
   58|  1.33M|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  1.33M|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  1.19M|        Ok(Self { iri, positions })
   61|  1.33M|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCs4x4bMiUCp0I_5oxrdf:
 1521|   942k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1522|   942k|        if self.input.starts_with('[') {
 1523|       |            // IP v6
 1524|  17.0k|            let start_position = self.input.position;
 1525|   264k|            while let Some(c) = self.input.next() {
 1526|   256k|                self.output.push(c);
 1527|   256k|                if c == ']' {
 1528|  8.26k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1529|  8.26k|                    if !UNCHECKED {
 1530|  8.26k|                        if ip.starts_with('v') || ip.starts_with('V') {
 1531|  4.44k|                            self.validate_ip_v_future(ip)?;
 1532|  3.82k|                        } else if let Err(error) = Ipv6Addr::from_str(ip) {
 1533|  3.82k|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1534|      0|                        }
 1535|      0|                    }
 1536|       |
 1537|      0|                    let c = self.input.next();
 1538|      0|                    return match c {
 1539|       |                        Some(':') => {
 1540|      0|                            self.output.push(':');
 1541|      0|                            self.parse_port()
 1542|       |                        }
 1543|       |                        None | Some('/') | Some('?') | Some('#') => {
 1544|      0|                            self.output_positions.authority_end = self.output.len();
 1545|      0|                            self.parse_path_start(c)
 1546|       |                        }
 1547|      0|                        Some(c) => {
 1548|      0|                            if UNCHECKED {
 1549|      0|                                self.output.push(c);
 1550|      0|                                continue;
 1551|       |                            } else {
 1552|      0|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1553|       |                            }
 1554|       |                        }
 1555|       |                    };
 1556|   247k|                }
 1557|       |            }
 1558|  8.76k|            if UNCHECKED {
 1559|       |                // We consider it's valid even if it's not finished
 1560|      0|                self.output_positions.authority_end = self.output.len();
 1561|      0|                self.parse_path_start(None)
 1562|       |            } else {
 1563|  8.76k|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1564|       |            }
 1565|       |        } else {
 1566|       |            // Other host
 1567|       |            loop {
 1568|  18.8M|                let c = self.input.next();
 1569|  18.8M|                match c {
 1570|       |                    Some(':') => {
 1571|   216k|                        self.output.push(':');
 1572|   216k|                        return self.parse_port();
 1573|       |                    }
 1574|       |                    None | Some('/') | Some('?') | Some('#') => {
 1575|   640k|                        self.output_positions.authority_end = self.output.len();
 1576|   640k|                        return self.parse_path_start(c);
 1577|       |                    }
 1578|  17.9M|                    Some(c) => self.read_url_codepoint_or_echar(c, is_iunreserved_or_sub_delims)?,
 1579|       |                }
 1580|       |            }
 1581|       |        }
 1582|   878k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCs4x4bMiUCp0I_5oxrdf:
 1634|   892k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1635|       |        loop {
 1636|  31.2M|            let c = self.input.next();
 1637|  31.2M|            match c {
 1638|       |                None | Some('/') | Some('?') | Some('#') => {
 1639|  1.74M|                    if self.output.as_str().ends_with("/..") {
 1640|      0|                        self.remove_last_segment();
 1641|      0|                        self.remove_last_segment();
 1642|      0|                        self.output.push('/');
 1643|  1.74M|                    } else if self.output.as_str().ends_with("/.") {
 1644|      0|                        self.remove_last_segment();
 1645|      0|                        self.output.push('/');
 1646|  1.74M|                    } else if c == Some('/') {
 1647|  1.19M|                        self.output.push('/');
 1648|  1.19M|                    }
 1649|       |
 1650|  2.04M|                    if c == Some('?') {
 1651|   152k|                        self.output_positions.path_end = self.output.len();
 1652|   152k|                        self.output.push('?');
 1653|   152k|                        return self.parse_query();
 1654|  1.89M|                    } else if c == Some('#') {
 1655|   143k|                        self.output_positions.path_end = self.output.len();
 1656|   143k|                        self.output_positions.query_end = self.output.len();
 1657|   143k|                        self.output.push('#');
 1658|   143k|                        return self.parse_fragment();
 1659|  1.74M|                    } else if c.is_none() {
 1660|   556k|                        self.output_positions.path_end = self.output.len();
 1661|   556k|                        self.output_positions.query_end = self.output.len();
 1662|   556k|                        return Ok(());
 1663|  1.19M|                    }
 1664|       |                }
 1665|  29.1M|                Some(c) => self.read_url_codepoint_or_echar(c, |c| {
 1666|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1667|  29.1M|                })?,
 1668|       |            }
 1669|       |        }
 1670|   892k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCs4x4bMiUCp0I_5oxrdf:
 1584|   216k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1585|       |        loop {
 1586|   314k|            let c = self.input.next();
 1587|   314k|            match c {
 1588|       |                Some('/') | Some('?') | Some('#') | None => {
 1589|   207k|                    self.output_positions.authority_end = self.output.len();
 1590|   207k|                    return self.parse_path_start(c);
 1591|       |                }
 1592|   103k|                Some(c) => {
 1593|   103k|                    if UNCHECKED || c.is_ascii_digit() {
 1594|  97.6k|                        self.output.push(c)
 1595|       |                    } else {
 1596|  5.49k|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1597|       |                    }
 1598|       |                }
 1599|       |            }
 1600|       |        }
 1601|   212k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCs4x4bMiUCp0I_5oxrdf:
 1720|  53.2k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1721|  53.2k|        let c1 = self.input.next();
 1722|  53.2k|        let c2 = self.input.next();
 1723|  53.2k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1724|  34.4k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1725|       |        {
 1726|  24.7k|            self.output.push('%');
 1727|  24.7k|            self.output.push(c1.unwrap());
 1728|  24.7k|            self.output.push(c2.unwrap());
 1729|  24.7k|            Ok(())
 1730|       |        } else {
 1731|  28.5k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1732|  28.5k|                Some('%'),
 1733|  28.5k|                c1,
 1734|  28.5k|                c2,
 1735|  28.5k|            ]))
 1736|       |        }
 1737|  53.2k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCs4x4bMiUCp0I_5oxrdf:
 1672|   213k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1673|   114M|        while let Some(c) = self.input.next() {
 1674|   114M|            if c == '#' {
 1675|  25.6k|                self.output_positions.query_end = self.output.len();
 1676|  25.6k|                self.output.push('#');
 1677|  25.6k|                return self.parse_fragment();
 1678|       |            } else {
 1679|   114M|                self.read_url_codepoint_or_echar(c, |c| {
 1680|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?' | '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1681|   114M|                })?
 1682|       |            }
 1683|       |        }
 1684|   177k|        self.output_positions.query_end = self.output.len();
 1685|   177k|        Ok(())
 1686|   213k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCs4x4bMiUCp0I_5oxrdf:
 1362|  1.29M|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1363|       |        loop {
 1364|  9.82M|            let c = self.input.next();
 1365|  9.82M|            match c {
 1366|  9.82M|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1367|  8.53M|                    self.output.push(c)
 1368|       |                }
 1369|       |                Some(':') => {
 1370|  1.25M|                    self.output.push(':');
 1371|  1.25M|                    self.output_positions.scheme_end = self.output.len();
 1372|  1.25M|                    self.input_scheme_end = self.input.position;
 1373|  1.25M|                    return if self.input.starts_with('/') {
 1374|  1.09M|                        self.input.next();
 1375|  1.09M|                        self.output.push('/');
 1376|  1.09M|                        self.parse_path_or_authority()
 1377|       |                    } else {
 1378|   158k|                        self.output_positions.authority_end = self.output.len();
 1379|   158k|                        self.parse_path()
 1380|       |                    };
 1381|       |                }
 1382|       |                _ => {
 1383|  40.3k|                    self.input = ParserInput {
 1384|  40.3k|                        value: self.iri.chars(),
 1385|  40.3k|                        position: 0,
 1386|  40.3k|                    }; // reset
 1387|  40.3k|                    self.output.clear();
 1388|  40.3k|                    return self.parse_relative();
 1389|       |                }
 1390|       |            }
 1391|       |        }
 1392|  1.29M|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCs4x4bMiUCp0I_5oxrdf:
 1688|   176k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1689|  25.4M|        while let Some(c) = self.input.next() {
 1690|  25.2M|            self.read_url_codepoint_or_echar(c, |c| {
 1691|       |                is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?')
 1692|  25.2M|            })?;
 1693|       |        }
 1694|   163k|        Ok(())
 1695|   176k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_relativeCs4x4bMiUCp0I_5oxrdf:
 1405|  79.8k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1406|  79.8k|        if let Some(base) = self.base {
 1407|      0|            match self.input.front() {
 1408|       |                None => {
 1409|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1410|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1411|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1412|      0|                    self.output_positions.path_end = base.positions.path_end;
 1413|      0|                    self.output_positions.query_end = base.positions.query_end;
 1414|      0|                    Ok(())
 1415|       |                }
 1416|       |                Some('/') => {
 1417|      0|                    self.input.next();
 1418|      0|                    self.parse_relative_slash(&base)
 1419|       |                }
 1420|       |                Some('?') => {
 1421|      0|                    self.input.next();
 1422|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1423|      0|                    self.output.push('?');
 1424|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1425|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1426|      0|                    self.output_positions.path_end = base.positions.path_end;
 1427|      0|                    self.parse_query()
 1428|       |                }
 1429|       |                Some('#') => {
 1430|      0|                    self.input.next();
 1431|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1432|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1433|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1434|      0|                    self.output_positions.path_end = base.positions.path_end;
 1435|      0|                    self.output_positions.query_end = base.positions.query_end;
 1436|      0|                    self.output.push('#');
 1437|      0|                    self.parse_fragment()
 1438|       |                }
 1439|       |                _ => {
 1440|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1441|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1442|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1443|      0|                    self.output_positions.path_end = base.positions.path_end;
 1444|      0|                    self.remove_last_segment();
 1445|      0|                    if self.output.len() > base.positions.scheme_end {
 1446|      0|                        // We have some path or authority, we keep a base '/'
 1447|      0|                        self.output.push('/');
 1448|      0|                    }
 1449|      0|                    self.parse_relative_path()
 1450|       |                }
 1451|       |            }
 1452|       |        } else {
 1453|  79.8k|            self.output_positions.scheme_end = 0;
 1454|  79.8k|            self.input_scheme_end = 0;
 1455|  79.8k|            if self.input.starts_with('/') {
 1456|  12.4k|                self.input.next();
 1457|  12.4k|                self.output.push('/');
 1458|  12.4k|                self.parse_path_or_authority()
 1459|       |            } else {
 1460|  67.4k|                self.output_positions.authority_end = 0;
 1461|  67.4k|                self.parse_relative_path()
 1462|       |            }
 1463|       |        }
 1464|  79.8k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCs4x4bMiUCp0I_5oxrdf:
 1495|   963k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1496|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1497|       |        loop {
 1498|  20.0M|            let c = self.input.next();
 1499|  20.0M|            match c {
 1500|       |                Some('@') => {
 1501|  58.7k|                    self.output.push('@');
 1502|  58.7k|                    return self.parse_host();
 1503|       |                }
 1504|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1505|   312k|                    self.input = ParserInput {
 1506|   312k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1507|   312k|                        position: self.input_scheme_end + 2,
 1508|   312k|                    };
 1509|   312k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1510|   312k|                    return self.parse_host();
 1511|       |                }
 1512|  19.0M|                Some(c) => {
 1513|  19.0M|                    self.read_url_codepoint_or_echar(c, |c| {
 1514|       |                        is_iunreserved_or_sub_delims(c) || c == ':'
 1515|  19.0M|                    })?;
 1516|       |                }
 1517|       |            }
 1518|       |        }
 1519|   392k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCs4x4bMiUCp0I_5oxrdf:
 1603|   915k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1604|   915k|        match c {
 1605|       |            None => {
 1606|   295k|                self.output_positions.path_end = self.output.len();
 1607|   295k|                self.output_positions.query_end = self.output.len();
 1608|   295k|                Ok(())
 1609|       |            }
 1610|       |            Some('?') => {
 1611|  60.4k|                self.output_positions.path_end = self.output.len();
 1612|  60.4k|                self.output.push('?');
 1613|  60.4k|                self.parse_query()
 1614|       |            }
 1615|       |            Some('#') => {
 1616|  7.22k|                self.output_positions.path_end = self.output.len();
 1617|  7.22k|                self.output_positions.query_end = self.output.len();
 1618|  7.22k|                self.output.push('#');
 1619|  7.22k|                self.parse_fragment()
 1620|       |            }
 1621|       |            Some('/') => {
 1622|   552k|                self.output.push('/');
 1623|   552k|                self.parse_path()
 1624|       |            }
 1625|      0|            Some(c) => {
 1626|      0|                self.read_url_codepoint_or_echar(c, |c| {
 1627|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1628|      0|                })?;
 1629|      0|                self.parse_path()
 1630|       |            }
 1631|       |        }
 1632|   915k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCs4x4bMiUCp0I_5oxrdf:
 1348|  1.33M|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1349|  1.33M|        match self.input.front() {
 1350|       |            Some(':') => {
 1351|  2.04k|                if UNCHECKED {
 1352|      0|                    self.parse_scheme()
 1353|       |                } else {
 1354|  2.04k|                    self.parse_error(IriParseErrorKind::NoScheme)
 1355|       |                }
 1356|       |            }
 1357|  1.33M|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1358|  39.5k|            _ => self.parse_relative(),
 1359|       |        }
 1360|  1.33M|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E19parse_relative_pathCs4x4bMiUCp0I_5oxrdf:
 1466|  67.4k|    fn parse_relative_path(&mut self) -> Result<(), IriParseError> {
 1467|   369k|        while let Some(c) = self.input.front() {
 1468|   349k|            if matches!(c, '/' | '?' | '#') {
 1469|  15.0k|                break;
 1470|   334k|            }
 1471|   334k|            self.input.next();
 1472|   334k|            self.read_url_codepoint_or_echar(c, |c| is_iunreserved_or_sub_delims(c) || c == '@')?;
 1473|       |        }
 1474|  35.3k|        self.parse_path()
 1475|  67.4k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E20validate_ip_v_futureCs4x4bMiUCp0I_5oxrdf:
 1744|  4.44k|    fn validate_ip_v_future(&self, ip: &str) -> Result<(), IriParseError> {
 1745|  4.44k|        let mut chars = ip.chars();
 1746|       |
 1747|  4.44k|        let c = chars.next().ok_or(IriParseError {
 1748|  4.44k|            kind: IriParseErrorKind::InvalidHostCharacter(']'),
 1749|  4.44k|        })?;
 1750|  4.44k|        if !matches!(c, 'v' | 'V') {
 1751|      0|            return self.parse_error(IriParseErrorKind::InvalidHostCharacter(c));
 1752|  4.44k|        };
 1753|  4.44k|
 1754|  4.44k|        let mut with_a_version = false;
 1755|  7.12k|        for c in &mut chars {
 1756|  4.95k|            if c == '.' {
 1757|      0|                break;
 1758|  4.95k|            } else if c.is_ascii_hexdigit() {
 1759|  2.67k|                with_a_version = true;
 1760|  2.67k|            } else {
 1761|  2.27k|                return self.parse_error(IriParseErrorKind::InvalidHostCharacter(c));
 1762|       |            }
 1763|       |        }
 1764|  2.16k|        if !with_a_version {
 1765|    678|            return self.parse_error(IriParseErrorKind::InvalidHostCharacter(
 1766|    678|                chars.next().unwrap_or(']'),
 1767|    678|            ));
 1768|  1.48k|        }
 1769|  1.48k|
 1770|  1.48k|        if chars.as_str().is_empty() {
 1771|  1.48k|            return self.parse_error(IriParseErrorKind::InvalidHostCharacter(']'));
 1772|      0|        };
 1773|      0|        for c in chars {
 1774|      0|            if !is_unreserved_or_sub_delims(c) && c != ':' {
 1775|      0|                return self.parse_error(IriParseErrorKind::InvalidHostCharacter(c));
 1776|      0|            }
 1777|       |        }
 1778|       |
 1779|      0|        Ok(())
 1780|  4.44k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCs4x4bMiUCp0I_5oxrdf:
 1394|  1.10M|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1395|  1.10M|        if self.input.starts_with('/') {
 1396|   963k|            self.input.next();
 1397|   963k|            self.output.push('/');
 1398|   963k|            self.parse_authority()
 1399|       |        } else {
 1400|   146k|            self.output_positions.authority_end = self.output.len() - 1;
 1401|   146k|            self.parse_path()
 1402|       |        }
 1403|  1.10M|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCs4x4bMiUCp0I_5oxrdf:
 1323|  1.33M|    fn parse(
 1324|  1.33M|        iri: &'a str,
 1325|  1.33M|        base: Option<IriRef<&'a str>>,
 1326|  1.33M|        output: &'a mut O,
 1327|  1.33M|    ) -> Result<IriElementsPositions, IriParseError> {
 1328|  1.33M|        let mut parser = Self {
 1329|  1.33M|            iri,
 1330|  1.33M|            base,
 1331|  1.33M|            input: ParserInput {
 1332|  1.33M|                value: iri.chars(),
 1333|  1.33M|                position: 0,
 1334|  1.33M|            },
 1335|  1.33M|            output,
 1336|  1.33M|            output_positions: IriElementsPositions {
 1337|  1.33M|                scheme_end: 0,
 1338|  1.33M|                authority_end: 0,
 1339|  1.33M|                path_end: 0,
 1340|  1.33M|                query_end: 0,
 1341|  1.33M|            },
 1342|  1.33M|            input_scheme_end: 0,
 1343|  1.33M|        };
 1344|  1.33M|        parser.parse_scheme_start()?;
 1345|  1.19M|        Ok(parser.output_positions)
 1346|  1.33M|    }
_RNvMsp_CsikbtAEUxupI_5oxiriINtB5_3IriNtNtCs8f6x4lOZV33_5alloc6string6StringE10into_innerCs4x4bMiUCp0I_5oxrdf:
  796|  1.16M|    pub fn into_inner(self) -> T {
  797|  1.16M|        self.0.into_inner()
  798|  1.16M|    }
_RNvMsp_CsikbtAEUxupI_5oxiriINtB5_3IriNtNtCs8f6x4lOZV33_5alloc6string6StringE5parseCs4x4bMiUCp0I_5oxrdf:
  556|  1.33M|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|  1.33M|        IriRef::parse(iri)?.try_into()
  558|  1.33M|    }
_RNvXsV_CsikbtAEUxupI_5oxiriINtB5_3IriNtNtCs8f6x4lOZV33_5alloc6string6StringEINtNtCshZc3FwCJ069_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCs4x4bMiUCp0I_5oxrdf:
 1099|  1.19M|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
 1100|  1.19M|        if iri.is_absolute() {
 1101|  1.16M|            Ok(Self(iri))
 1102|       |        } else {
 1103|  27.7k|            Err(IriParseError {
 1104|  27.7k|                kind: IriParseErrorKind::NoScheme,
 1105|  27.7k|            })
 1106|       |        }
 1107|  1.19M|    }
_RNvMs12_CsikbtAEUxupI_5oxiriNtB6_11ParserInput11starts_withCs4x4bMiUCp0I_5oxrdf:
 1305|  3.38M|    fn starts_with(&self, c: char) -> bool {
 1306|  3.38M|        self.value.as_str().starts_with(c)
 1307|  3.38M|    }
_RNvMs12_CsikbtAEUxupI_5oxiriNtB6_11ParserInput4nextCs4x4bMiUCp0I_5oxrdf:
 1290|   222M|    fn next(&mut self) -> Option<char> {
 1291|   222M|        if let Some(head) = self.value.next() {
 1292|   221M|            self.position += head.len_utf8();
 1293|   221M|            Some(head)
 1294|       |        } else {
 1295|  1.50M|            None
 1296|       |        }
 1297|   222M|    }
_RNvMs12_CsikbtAEUxupI_5oxiriNtB6_11ParserInput5frontCs4x4bMiUCp0I_5oxrdf:
 1300|  1.70M|    fn front(&self) -> Option<char> {
 1301|  1.70M|        self.value.clone().next()
 1302|  1.70M|    }
_RNvXs10_CsikbtAEUxupI_5oxiriNtB6_16VoidOutputBufferNtB6_12OutputBuffer3lenCs4x4bMiUCp0I_5oxrdf:
 1241|  4.90M|    fn len(&self) -> usize {
 1242|  4.90M|        self.len
 1243|  4.90M|    }
_RNvXs10_CsikbtAEUxupI_5oxiriNtB6_16VoidOutputBufferNtB6_12OutputBuffer4pushCs4x4bMiUCp0I_5oxrdf:
 1221|   220M|    fn push(&mut self, c: char) {
 1222|   220M|        self.len += c.len_utf8();
 1223|   220M|    }
_RNvXs10_CsikbtAEUxupI_5oxiriNtB6_16VoidOutputBufferNtB6_12OutputBuffer5clearCs4x4bMiUCp0I_5oxrdf:
 1231|  40.3k|    fn clear(&mut self) {
 1232|  40.3k|        self.len = 0;
 1233|  40.3k|    }
_RNvXs10_CsikbtAEUxupI_5oxiriNtB6_16VoidOutputBufferNtB6_12OutputBuffer6as_strCs4x4bMiUCp0I_5oxrdf:
 1246|  4.09M|    fn as_str(&self) -> &str {
 1247|  4.09M|        ""
 1248|  4.09M|    }
_RNvXs10_CsikbtAEUxupI_5oxiriNtB6_16VoidOutputBufferNtB6_12OutputBuffer8truncateCs4x4bMiUCp0I_5oxrdf:
 1236|   883k|    fn truncate(&mut self, new_len: usize) {
 1237|   883k|        self.len = new_len;
 1238|   883k|    }
_RNvXsW_CsikbtAEUxupI_5oxiriNtB5_13IriParseErrorNtNtCshZc3FwCJ069_4core3fmt7Display3fmt:
 1134|   172k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1135|   172k|        match &self.kind {
 1136|  29.8k|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
 1137|  13.2k|            IriParseErrorKind::InvalidHostCharacter(c) => {
 1138|  13.2k|                write!(f, "Invalid character '{c}' in host")
 1139|       |            }
 1140|  3.82k|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({e})"),
 1141|  5.49k|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{c}'"),
 1142|  91.5k|            IriParseErrorKind::InvalidIriCodePoint(c) => {
 1143|  91.5k|                write!(f, "Invalid IRI code point '{c}'")
 1144|       |            }
 1145|  28.5k|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
 1146|  28.5k|                f,
 1147|  28.5k|                "Invalid IRI percent encoding '{}'",
 1148|  28.5k|                cs.iter().flatten().cloned().collect::<String>()
 1149|  28.5k|            ),
 1150|       |        }
 1151|   172k|    }
_RNvCsikbtAEUxupI_5oxiri28is_iunreserved_or_sub_delims:
 1783|   205M|fn is_iunreserved_or_sub_delims(c: char) -> bool {
 1784|   205M|    matches!(c,
 1785|  54.1M|        'a'..='z'
 1786|  41.5M|        | 'A'..='Z'
 1787|  58.1M|        | '0'..='9'
 1788|       |        | '!'
 1789|       |        | '$'
 1790|       |        | '&'
 1791|       |        | '\''
 1792|       |        | '('
 1793|       |        | ')'
 1794|       |        | '*'
 1795|       |        | '+'
 1796|       |        | ','
 1797|       |        | '-'
 1798|       |        | '.'
 1799|       |        | ';'
 1800|       |        | '='
 1801|       |        | '_'
 1802|       |        | '~'
 1803|  1.54M|        | '\u{A0}'..='\u{D7FF}'
 1804|   251k|        | '\u{F900}'..='\u{FDCF}'
 1805|   249k|        | '\u{FDF0}'..='\u{FFEF}'
 1806|  95.3k|        | '\u{10000}'..='\u{1FFFD}'
 1807|  77.0k|        | '\u{20000}'..='\u{2FFFD}'
 1808|  76.9k|        | '\u{30000}'..='\u{3FFFD}'
 1809|  76.9k|        | '\u{40000}'..='\u{4FFFD}'
 1810|  76.9k|        | '\u{50000}'..='\u{5FFFD}'
 1811|  37.4k|        | '\u{60000}'..='\u{6FFFD}'
 1812|  37.4k|        | '\u{70000}'..='\u{7FFFD}'
 1813|  37.4k|        | '\u{80000}'..='\u{8FFFD}'
 1814|  37.4k|        | '\u{90000}'..='\u{9FFFD}'
 1815|  37.3k|        | '\u{A0000}'..='\u{AFFFD}'
 1816|  1.15k|        | '\u{B0000}'..='\u{BFFFD}'
 1817|  1.15k|        | '\u{C0000}'..='\u{CFFFD}'
 1818|  1.15k|        | '\u{D0000}'..='\u{DFFFD}'
 1819|  1.15k|        | '\u{E1000}'..='\u{EFFFD}'
 1820|       |    )
 1821|   149M|}

_RNvMNtCs8SgPi3dzXwZ_10ppv_lite864softINtB2_2x2INtNtNtNtB4_6x86_644sse24avx212u32x4x2_avx2NtBP_4NoNIENtBN_2G0E3newCs7a667o4NB2d_11rand_chacha:
   15|  7.08M|    pub fn new(xs: [W; 2]) -> Self {
   16|  7.08M|        x2(xs, PhantomData)
   17|  7.08M|    }
_RNvXsJ_NtCs8SgPi3dzXwZ_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCshZc3FwCJ069_4core3ops3bit6BitXor6bitxorCs7a667o4NB2d_11rand_chacha:
   24|  2.48M|            fn $fn(self, rhs: Self) -> Self::Output {
   25|  2.48M|                x2::new([self.0[0].$fn(rhs.0[0]), self.0[1].$fn(rhs.0[1])])
   26|  2.48M|            }
_RNvXsP_NtCs8SgPi3dzXwZ_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCshZc3FwCJ069_4core3ops5arith9AddAssign10add_assignCs7a667o4NB2d_11rand_chacha:
   34|  2.48M|            fn $fn_assign(&mut self, rhs: Self) {
   35|  2.48M|                (self.0[0]).$fn_assign(rhs.0[0]);
   36|  2.48M|                (self.0[1]).$fn_assign(rhs.0[1]);
   37|  2.48M|            }
_RNvXs_NtCs8SgPi3dzXwZ_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right16Cs7a667o4NB2d_11rand_chacha:
   44|   620k|        fn $fn(self) -> Self {
   45|   620k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   46|   620k|        }
_RNvXs_NtCs8SgPi3dzXwZ_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right20Cs7a667o4NB2d_11rand_chacha:
   44|   620k|        fn $fn(self) -> Self {
   45|   620k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   46|   620k|        }
_RNvXs_NtCs8SgPi3dzXwZ_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right24Cs7a667o4NB2d_11rand_chacha:
   44|   620k|        fn $fn(self) -> Self {
   45|   620k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   46|   620k|        }
_RNvXs_NtCs8SgPi3dzXwZ_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right25Cs7a667o4NB2d_11rand_chacha:
   44|   620k|        fn $fn(self) -> Self {
   45|   620k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   46|   620k|        }
_RNvXsg_NtCs8SgPi3dzXwZ_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words1230Cs7a667o4NB2d_11rand_chacha:
  210|   620k|    fn shuffle_lane_words1230(self) -> Self {
  211|   620k|        Self::new([
  212|   620k|            self.0[0].shuffle_lane_words1230(),
  213|   620k|            self.0[1].shuffle_lane_words1230(),
  214|   620k|        ])
  215|   620k|    }
_RNvXsg_NtCs8SgPi3dzXwZ_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words2301Cs7a667o4NB2d_11rand_chacha:
  203|   620k|    fn shuffle_lane_words2301(self) -> Self {
  204|   620k|        Self::new([
  205|   620k|            self.0[0].shuffle_lane_words2301(),
  206|   620k|            self.0[1].shuffle_lane_words2301(),
  207|   620k|        ])
  208|   620k|    }
_RNvXsg_NtCs8SgPi3dzXwZ_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words3012Cs7a667o4NB2d_11rand_chacha:
  217|   620k|    fn shuffle_lane_words3012(self) -> Self {
  218|   620k|        Self::new([
  219|   620k|            self.0[0].shuffle_lane_words3012(),
  220|   620k|            self.0[1].shuffle_lane_words3012(),
  221|   620k|        ])
  222|   620k|    }

_RINvYINtNtCs8SgPi3dzXwZ_10ppv_lite866x86_6410SseMachineNtB6_5YesS3NtB6_5YesS4NtB6_4NoNIENtNtB8_5types7Machine7read_leINtNtB6_4sse210u32x4_sse2BR_B12_B1d_EECs7a667o4NB2d_11rand_chacha:
  259|    406|    fn read_le<V>(self, input: &[u8]) -> V
  260|    406|    where
  261|    406|        V: StoreBytes,
  262|    406|    {
  263|    406|        unsafe { V::unsafe_read_le(input) }
  264|    406|    }
_RINvYINtNtCs8SgPi3dzXwZ_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine3vecINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EAmj4_ECs7a667o4NB2d_11rand_chacha:
  251|  51.7k|    fn vec<V, A>(self, a: A) -> V
  252|  51.7k|    where
  253|  51.7k|        V: MultiLane<A>,
  254|  51.7k|    {
  255|  51.7k|        V::from_lanes(a)
  256|  51.7k|    }
_RINvYINtNtCs8SgPi3dzXwZ_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec128_storageINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EECs7a667o4NB2d_11rand_chacha:
  246|   465k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|   465k|        unsafe { V::unpack(s) }
  248|   465k|    }
_RINvYINtNtCs8SgPi3dzXwZ_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec512_storageINtNtB8_4soft2x2INtNtNtB6_4sse24avx212u32x4x2_avx2BS_ENtB2b_2G0EECs7a667o4NB2d_11rand_chacha:
  246|  51.7k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|  51.7k|        unsafe { V::unpack(s) }
  248|  51.7k|    }

_RNvXs2_NtCs8SgPi3dzXwZ_10ppv_lite866x86_64NtB5_14vec128_storageINtNtCshZc3FwCJ069_4core7convert4FromAmj4_E4from:
  132|    203|    fn from(u32x4: [u32; 4]) -> Self {
  133|    203|        vec128_storage { u32x4 }
  134|    203|    }
_RNvXNtCs8SgPi3dzXwZ_10ppv_lite866x86_64INtB2_10SseMachineNtB2_5YesS3NtB2_5YesS4NtB2_4NoNIENtNtB4_5types7Machine8instanceCs7a667o4NB2d_11rand_chacha:
   65|    203|    unsafe fn instance() -> Self {
   66|    203|        SseMachine(PhantomData)
   67|    203|    }
_RNvXs_NtCs8SgPi3dzXwZ_10ppv_lite866x86_64INtB4_11Avx2MachineNtB4_4NoNIENtNtB6_5types7Machine8instanceCs7a667o4NB2d_11rand_chacha:
   93|  51.7k|    unsafe fn instance() -> Self {
   94|  51.7k|        Avx2Machine(PhantomData)
   95|  51.7k|    }
_RNvNtCs7a667o4NB2d_11rand_chacha4guts11refill_wide:
  252|  51.7k|        $($pub$(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  253|       |            #[inline(always)]
  254|       |            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  255|       |            use std::arch::x86_64::*;
  256|       |            #[target_feature(enable = "avx2")]
  257|       |            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  258|       |                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  259|       |                _mm256_zeroupper();
  260|       |                ret
  261|       |            }
  262|       |            #[target_feature(enable = "avx")]
  263|       |            #[target_feature(enable = "sse4.1")]
  264|       |            #[target_feature(enable = "ssse3")]
  265|       |            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  266|       |                let ret = fn_impl($crate::x86_64::AVX::instance(), $($arg),*);
  267|       |                _mm256_zeroupper();
  268|       |                ret
  269|       |            }
  270|       |            #[target_feature(enable = "sse4.1")]
  271|       |            #[target_feature(enable = "ssse3")]
  272|       |            unsafe fn impl_sse41($($arg: $argty),*) -> $ret {
  273|       |                fn_impl($crate::x86_64::SSE41::instance(), $($arg),*)
  274|       |            }
  275|       |            #[target_feature(enable = "ssse3")]
  276|       |            unsafe fn impl_ssse3($($arg: $argty),*) -> $ret {
  277|       |                fn_impl($crate::x86_64::SSSE3::instance(), $($arg),*)
  278|       |            }
  279|       |            #[target_feature(enable = "sse2")]
  280|       |            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  281|       |                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  282|       |            }
  283|       |            unsafe {
  284|  51.7k|                if is_x86_feature_detected!("avx2") {
  285|  51.7k|                    impl_avx2($($arg),*)
  286|      0|                } else if is_x86_feature_detected!("avx") {
  287|      0|                    impl_avx($($arg),*)
  288|      0|                } else if is_x86_feature_detected!("sse4.1") {
  289|      0|                    impl_sse41($($arg),*)
  290|      0|                } else if is_x86_feature_detected!("ssse3") {
  291|      0|                    impl_ssse3($($arg),*)
  292|      0|                } else if is_x86_feature_detected!("sse2") {
  293|      0|                    impl_sse2($($arg),*)
  294|       |                } else {
  295|      0|                    unimplemented!()
  296|       |                }
  297|       |            }
  298|       |        }
_RNvNvNtCs7a667o4NB2d_11rand_chacha4guts11refill_wide9impl_avx2:
  257|  51.7k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  258|  51.7k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  259|  51.7k|                _mm256_zeroupper();
  260|  51.7k|                ret
  261|  51.7k|            }
_RNvNtCs7a667o4NB2d_11rand_chacha4guts11init_chacha:
  335|    203|        $($pub $(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  336|       |            #[inline(always)]
  337|       |            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  338|       |            use std::arch::x86_64::*;
  339|       |            #[target_feature(enable = "avx")]
  340|       |            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  341|       |                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  342|       |            }
  343|       |            #[target_feature(enable = "sse2")]
  344|       |            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  345|       |                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  346|       |            }
  347|       |            unsafe {
  348|    203|                if is_x86_feature_detected!("avx") {
  349|    203|                    impl_avx($($arg),*)
  350|      0|                } else if is_x86_feature_detected!("sse2") {
  351|      0|                    impl_sse2($($arg),*)
  352|       |                } else {
  353|      0|                    unimplemented!()
  354|       |                }
  355|       |            }
  356|       |        }
_RNvNvNtCs7a667o4NB2d_11rand_chacha4guts11init_chacha8impl_avx:
  340|    203|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  341|    203|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  342|    203|            }

_RNvXsY_NtNtCs8SgPi3dzXwZ_10ppv_lite866x86_644sse2NtB7_14vec128_storageINtNtCshZc3FwCJ069_4core7convert4FromINtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEE4fromCs7a667o4NB2d_11rand_chacha:
   60|  52.1k|            fn from(x: $vec<S3, S4, NI>) -> Self {
   61|  52.1k|                vec128_storage { sse2: x.x }
   62|  52.1k|            }
_RNvXsj_NtNtNtCs8SgPi3dzXwZ_10ppv_lite866x86_644sse24avx2NtB9_14vec512_storageINtNtCshZc3FwCJ069_4core7convert4FromINtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EE4fromCs7a667o4NB2d_11rand_chacha:
 1687|  51.7k|        fn from(x: u32x4x4_avx2<NI>) -> Self {
 1688|  51.7k|            Self {
 1689|  51.7k|                avx: [
 1690|  51.7k|                    vec256_storage { avx: x.0[0].x },
 1691|  51.7k|                    vec256_storage { avx: x.0[1].x },
 1692|  51.7k|                ],
 1693|  51.7k|            }
 1694|  51.7k|        }
_RNvMNtNtNtCs8SgPi3dzXwZ_10ppv_lite866x86_644sse24avx2INtB2_12u32x4x2_avx2NtB6_4NoNIE3newCs7a667o4NB2d_11rand_chacha:
 1398|  19.1M|        fn new(x: __m256i) -> Self {
 1399|  19.1M|            Self { x, ni: PhantomData }
 1400|  19.1M|        }
_RNvMsZ_NtNtCs8SgPi3dzXwZ_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIE3newCs7a667o4NB2d_11rand_chacha:
   66|  2.89M|            fn new(x: __m128i) -> Self {
   67|  2.89M|                $vec {
   68|  2.89M|                    x,
   69|  2.89M|                    s3: PhantomData,
   70|  2.89M|                    s4: PhantomData,
   71|  2.89M|                    ni: PhantomData,
   72|  2.89M|                }
   73|  2.89M|            }
_RNvXs0_NtNtNtCs8SgPi3dzXwZ_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types5StoreNtB9_14vec256_storageE6unpackCs7a667o4NB2d_11rand_chacha:
 1406|   103k|        unsafe fn unpack(p: vec256_storage) -> Self {
 1407|   103k|            Self::new(p.avx)
 1408|   103k|        }
_RNvXs10_NtNtCs8SgPi3dzXwZ_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes14unsafe_read_leCs7a667o4NB2d_11rand_chacha:
   81|    406|            unsafe fn unsafe_read_le(input: &[u8]) -> Self {
   82|    406|                assert_eq!(input.len(), 16);
   83|    406|                Self::new(_mm_loadu_si128(input.as_ptr() as *const _))
   84|    406|            }
_RNvXs10_NtNtCs8SgPi3dzXwZ_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes8write_leCs7a667o4NB2d_11rand_chacha:
   91|   827k|            fn write_le(self, out: &mut [u8]) {
   92|   827k|                assert_eq!(out.len(), 16);
   93|   827k|                unsafe { _mm_storeu_si128(out.as_mut_ptr() as *mut _, self.x) }
   94|   827k|            }
_RNvXs20_NtNtCs8SgPi3dzXwZ_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtNtCshZc3FwCJ069_4core3ops5arith3Add3addCs7a667o4NB2d_11rand_chacha:
   19|   827k|            fn $fn(self, rhs: Self) -> Self::Output {
   20|   827k|                Self::new(unsafe { $impl_fn(self.x, rhs.x) })
   21|   827k|            }
_RNvXs2_NtNtNtCs8SgPi3dzXwZ_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E10from_lanesCs7a667o4NB2d_11rand_chacha:
 1443|   413k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 2]) -> Self {
 1444|   413k|            Self::new(unsafe { _mm256_setr_m128i(x[0].x, x[1].x) })
 1445|   413k|        }
_RNvXs2_NtNtNtCs8SgPi3dzXwZ_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E8to_lanesCs7a667o4NB2d_11rand_chacha:
 1434|   413k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 2] {
 1435|   413k|            unsafe {
 1436|   413k|                [
 1437|   413k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 0)),
 1438|   413k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 1)),
 1439|   413k|                ]
 1440|   413k|            }
 1441|   413k|        }
_RNvXs6_NtNtCs8SgPi3dzXwZ_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E10from_lanesCs7a667o4NB2d_11rand_chacha:
  333|  51.7k|    fn from_lanes(xs: [u32; 4]) -> Self {
  334|  51.7k|        unsafe {
  335|  51.7k|            let mut x = _mm_cvtsi64_si128((xs[0] as u64 | ((xs[1] as u64) << 32)) as i64);
  336|  51.7k|            x = _mm_insert_epi64(x, (xs[2] as u64 | ((xs[3] as u64) << 32)) as i64, 1);
  337|  51.7k|            Self::new(x)
  338|  51.7k|        }
  339|  51.7k|    }
_RNvXs6_NtNtCs8SgPi3dzXwZ_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E8to_lanesCs7a667o4NB2d_11rand_chacha:
  325|   206k|    fn to_lanes(self) -> [u32; 4] {
  326|   206k|        unsafe {
  327|   206k|            let x = _mm_cvtsi128_si64(self.x) as u64;
  328|   206k|            let y = _mm_extract_epi64(self.x, 1) as u64;
  329|   206k|            [x as u32, (x >> 32) as u32, y as u32, (y >> 32) as u32]
  330|   206k|        }
  331|   206k|    }
_RNvXs6_NtNtNtCs8SgPi3dzXwZ_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right16Cs7a667o4NB2d_11rand_chacha:
 1474|  1.24M|            fn $name(self) -> Self {
 1475|  1.24M|                Self::new(unsafe {
 1476|  1.24M|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1477|  1.24M|                })
 1478|  1.24M|            }
_RNvXs6_NtNtNtCs8SgPi3dzXwZ_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right20Cs7a667o4NB2d_11rand_chacha:
 1484|  1.24M|            fn $name(self) -> Self {
 1485|  1.24M|                Self::new(unsafe {
 1486|  1.24M|                    _mm256_or_si256(
 1487|  1.24M|                        _mm256_srli_epi32(self.x, $i as i32),
 1488|  1.24M|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1489|  1.24M|                    )
 1490|  1.24M|                })
 1491|  1.24M|            }
_RNvXs6_NtNtNtCs8SgPi3dzXwZ_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right24Cs7a667o4NB2d_11rand_chacha:
 1474|  1.24M|            fn $name(self) -> Self {
 1475|  1.24M|                Self::new(unsafe {
 1476|  1.24M|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1477|  1.24M|                })
 1478|  1.24M|            }
_RNvXs6_NtNtNtCs8SgPi3dzXwZ_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right25Cs7a667o4NB2d_11rand_chacha:
 1484|  1.24M|            fn $name(self) -> Self {
 1485|  1.24M|                Self::new(unsafe {
 1486|  1.24M|                    _mm256_or_si256(
 1487|  1.24M|                        _mm256_srli_epi32(self.x, $i as i32),
 1488|  1.24M|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1489|  1.24M|                    )
 1490|  1.24M|                })
 1491|  1.24M|            }
_RNvXsX_NtNtCs8SgPi3dzXwZ_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types5StoreNtB7_14vec128_storageE6unpackCs7a667o4NB2d_11rand_chacha:
   54|   465k|            unsafe fn unpack(x: vec128_storage) -> Self {
   55|   465k|                Self::new(x.sse2)
   56|   465k|            }
_RNvXsc_NtNtNtCs8SgPi3dzXwZ_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words1230Cs7a667o4NB2d_11rand_chacha:
 1586|  1.24M|        fn shuffle_lane_words1230(self) -> Self {
 1587|  1.24M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b1001_0011) })
 1588|  1.24M|        }
_RNvXsc_NtNtNtCs8SgPi3dzXwZ_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words2301Cs7a667o4NB2d_11rand_chacha:
 1590|  1.24M|        fn shuffle_lane_words2301(self) -> Self {
 1591|  1.24M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0100_1110) })
 1592|  1.24M|        }
_RNvXsc_NtNtNtCs8SgPi3dzXwZ_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words3012Cs7a667o4NB2d_11rand_chacha:
 1594|  1.24M|        fn shuffle_lane_words3012(self) -> Self {
 1595|  1.24M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0011_1001) })
 1596|  1.24M|        }
_RNvXse_NtNtNtCs8SgPi3dzXwZ_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types5StoreNtB9_14vec512_storageE6unpackCs7a667o4NB2d_11rand_chacha:
 1606|  51.7k|        unsafe fn unpack(p: vec512_storage) -> Self {
 1607|  51.7k|            Self::new([
 1608|  51.7k|                u32x4x2_avx2::unpack(p.avx[0]),
 1609|  51.7k|                u32x4x2_avx2::unpack(p.avx[1]),
 1610|  51.7k|            ])
 1611|  51.7k|        }
_RNvXsf_NtNtNtCs8SgPi3dzXwZ_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E10from_lanesCs7a667o4NB2d_11rand_chacha:
 1621|   206k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 4]) -> Self {
 1622|   206k|            let ab = u32x4x2_avx2::from_lanes([x[0], x[1]]);
 1623|   206k|            let cd = u32x4x2_avx2::from_lanes([x[2], x[3]]);
 1624|   206k|            Self::new([ab, cd])
 1625|   206k|        }
_RNvXsf_NtNtNtCs8SgPi3dzXwZ_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E8to_lanesCs7a667o4NB2d_11rand_chacha:
 1615|   206k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 4] {
 1616|   206k|            let [a, b] = self.0[0].to_lanes();
 1617|   206k|            let [c, d] = self.0[1].to_lanes();
 1618|   206k|            [a, b, c, d]
 1619|   206k|        }
_RNvXsl_NtNtCs8SgPi3dzXwZ_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE6insertCs7a667o4NB2d_11rand_chacha:
  525|   724k|    fn insert(self, v: u32, i: u32) -> Self {
  526|   724k|        Self::new(unsafe {
  527|   724k|            match i {
  528|   362k|                0 => _mm_insert_epi32(self.x, v as i32, 0),
  529|   362k|                1 => _mm_insert_epi32(self.x, v as i32, 1),
  530|      0|                2 => _mm_insert_epi32(self.x, v as i32, 2),
  531|      0|                3 => _mm_insert_epi32(self.x, v as i32, 3),
  532|      0|                _ => unreachable!(),
  533|       |            }
  534|       |        })
  535|   724k|    }
_RNvXsl_NtNtCs8SgPi3dzXwZ_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE7extractCs7a667o4NB2d_11rand_chacha:
  521|   206k|    fn extract(self, i: u32) -> u32 {
  522|   206k|        self.to_lanes()[i as usize]
  523|   206k|    }
_RNvXst_NtNtNtCs8SgPi3dzXwZ_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCshZc3FwCJ069_4core3ops5arith9AddAssign10add_assignCs7a667o4NB2d_11rand_chacha:
 1531|  4.96M|                fn $assign_fn(&mut self, rhs: Self) {
 1532|  4.96M|                    *self = self.$bin_fn(rhs);
 1533|  4.96M|                }
_RNvXsu_NtNtNtCs8SgPi3dzXwZ_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCshZc3FwCJ069_4core3ops3bit6BitXor6bitxorCs7a667o4NB2d_11rand_chacha:
 1547|  4.96M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1548|  4.96M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1549|  4.96M|                }
_RNvXsy_NtNtNtCs8SgPi3dzXwZ_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCshZc3FwCJ069_4core3ops5arith3Add3addCs7a667o4NB2d_11rand_chacha:
 1547|  4.96M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1548|  4.96M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1549|  4.96M|                }

_RNvMNtCsa7QYSr9aLYT_9quick_xml8encodingNtB2_7Decoder4utf8:
   45|  84.5k|    pub(crate) fn utf8() -> Self {
   46|  84.5k|        Decoder {
   47|  84.5k|            #[cfg(feature = "encoding")]
   48|  84.5k|            encoding: UTF_8,
   49|  84.5k|        }
   50|  84.5k|    }
_RNvMs_NtCsa7QYSr9aLYT_9quick_xml8encodingNtB4_7Decoder6decode:
   82|  4.70M|    pub fn decode<'b>(&self, bytes: &'b [u8]) -> Result<Cow<'b, str>> {
   83|       |        #[cfg(not(feature = "encoding"))]
   84|  4.70M|        let decoded = Ok(Cow::Borrowed(std::str::from_utf8(bytes)?));
   85|       |
   86|       |        #[cfg(feature = "encoding")]
   87|       |        let decoded = decode(bytes, self.encoding);
   88|       |
   89|  4.00M|        decoded
   90|  4.70M|    }
_RNvMs_NtCsa7QYSr9aLYT_9quick_xml8encodingNtB4_7Decoder10decode_cow:
  104|  2.39M|    pub(crate) fn decode_cow<'b>(&self, bytes: &Cow<'b, [u8]>) -> Result<Cow<'b, str>> {
  105|  2.39M|        match bytes {
  106|  2.39M|            Cow::Borrowed(bytes) => self.decode(bytes),
  107|       |            // Convert to owned, because otherwise Cow will be bound with wrong lifetime
  108|     73|            Cow::Owned(bytes) => Ok(self.decode(bytes)?.into_owned().into()),
  109|       |        }
  110|  2.39M|    }

_RNvXs8_NtCsa7QYSr9aLYT_9quick_xml6errorsNtB5_5ErrorINtNtCshZc3FwCJ069_4core7convert4FromNtNtB7_6escape11EscapeErrorE4fromCs7S9FTsUwoO8_8oxrdfxml:
  251|  82.9k|    fn from(error: EscapeError) -> Error {
  252|  82.9k|        Error::EscapeError(error)
  253|  82.9k|    }
_RNvXNtCsa7QYSr9aLYT_9quick_xml6errorsNtB2_11SyntaxErrorNtNtCshZc3FwCJ069_4core3fmt7Display3fmt:
   41|  21.4k|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
   42|  21.4k|        match self {
   43|     74|            Self::InvalidBangMarkup => f.write_str("unknown or missed symbol in markup"),
   44|       |            Self::UnclosedPIOrXmlDecl => {
   45|  2.06k|                f.write_str("processing instruction or xml declaration not closed: `?>` not found before end of input")
   46|       |            }
   47|       |            Self::UnclosedComment => {
   48|     64|                f.write_str("comment not closed: `-->` not found before end of input")
   49|       |            }
   50|       |            Self::UnclosedDoctype => {
   51|    186|                f.write_str("DOCTYPE not closed: `>` not found before end of input")
   52|       |            }
   53|       |            Self::UnclosedCData => {
   54|    529|                f.write_str("CDATA not closed: `]]>` not found before end of input")
   55|       |            }
   56|  18.4k|            Self::UnclosedTag => f.write_str("tag not closed: `>` not found before end of input"),
   57|       |        }
   58|  21.4k|    }
_RNvXs0_NtCsa7QYSr9aLYT_9quick_xml6errorsNtB5_14IllFormedErrorNtNtCshZc3FwCJ069_4core3fmt7Display3fmt:
  123|  20.4k|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
  124|      0|        match self {
  125|       |            Self::MissingDeclVersion(None) => {
  126|      0|                write!(f, "an XML declaration does not contain `version` attribute")
  127|       |            }
  128|      0|            Self::MissingDeclVersion(Some(attr)) => {
  129|      0|                write!(f, "an XML declaration must start with `version` attribute, but in starts with `{}`", attr)
  130|       |            }
  131|      0|            Self::MissingDoctypeName => write!(
  132|      0|                f,
  133|      0|                "`<!DOCTYPE>` declaration does not contain a name of a document type"
  134|      0|            ),
  135|      0|            Self::MissingEndTag(tag) => write!(
  136|      0|                f,
  137|      0|                "start tag not closed: `</{}>` not found before end of input",
  138|      0|                tag,
  139|      0|            ),
  140|  7.29k|            Self::UnmatchedEndTag(tag) => {
  141|  7.29k|                write!(f, "close tag `</{}>` does not match any open tag", tag)
  142|       |            }
  143|  13.1k|            Self::MismatchedEndTag { expected, found } => write!(
  144|  13.1k|                f,
  145|  13.1k|                "expected `</{}>`, but `</{}>` was found",
  146|  13.1k|                expected, found,
  147|  13.1k|            ),
  148|       |            Self::DoubleHyphenInComment => {
  149|      0|                write!(f, "forbidden string `--` was found in a comment")
  150|       |            }
  151|       |        }
  152|  20.4k|    }
_RNvXs6_NtCsa7QYSr9aLYT_9quick_xml6errorsNtB5_5ErrorINtNtCshZc3FwCJ069_4core7convert4FromNtNtNtBS_3str5error9Utf8ErrorE4fromB7_:
  235|   702k|    fn from(error: Utf8Error) -> Error {
  236|   702k|        Error::NonDecodable(Some(error))
  237|   702k|    }
_RNvXs8_NtCsa7QYSr9aLYT_9quick_xml6errorsNtB5_5ErrorINtNtCshZc3FwCJ069_4core7convert4FromNtNtB7_6escape11EscapeErrorE4fromB7_:
  251|  77.7k|    fn from(error: EscapeError) -> Error {
  252|  77.7k|        Error::EscapeError(error)
  253|  77.7k|    }
_RNvXs9_NtCsa7QYSr9aLYT_9quick_xml6errorsNtB5_5ErrorINtNtCshZc3FwCJ069_4core7convert4FromNtNtNtB7_6events10attributes9AttrErrorE4fromB7_:
  258|  12.4k|    fn from(error: AttrError) -> Self {
  259|  12.4k|        Error::InvalidAttr(error)
  260|  12.4k|    }
_RNvXsa_NtCsa7QYSr9aLYT_9quick_xml6errorsNtB5_5ErrorNtNtCshZc3FwCJ069_4core3fmt7Display3fmt:
  267|   976k|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
  268|   693k|        match self {
  269|      0|            Error::Io(e) => write!(f, "I/O error: {}", e),
  270|  21.4k|            Error::Syntax(e) => write!(f, "syntax error: {}", e),
  271|  20.4k|            Error::IllFormed(e) => write!(f, "ill-formed document: {}", e),
  272|      0|            Error::NonDecodable(None) => write!(f, "Malformed input, decoding impossible"),
  273|   693k|            Error::NonDecodable(Some(e)) => write!(f, "Malformed UTF-8 input: {}", e),
  274|  75.2k|            Error::InvalidAttr(e) => write!(f, "error while parsing attribute: {}", e),
  275|   160k|            Error::EscapeError(e) => write!(f, "{}", e),
  276|      0|            Error::UnknownPrefix(prefix) => {
  277|      0|                f.write_str("Unknown namespace prefix '")?;
  278|      0|                write_byte_string(f, prefix)?;
  279|      0|                f.write_str("'")
  280|       |            }
  281|  5.11k|            Error::InvalidPrefixBind { prefix, namespace } => {
  282|  5.11k|                f.write_str("The namespace prefix '")?;
  283|  5.11k|                write_byte_string(f, prefix)?;
  284|  5.11k|                f.write_str("' cannot be bound to '")?;
  285|  5.11k|                write_byte_string(f, namespace)?;
  286|  5.11k|                f.write_str("'")
  287|       |            }
  288|       |        }
  289|   976k|    }

_RINvNtCsa7QYSr9aLYT_9quick_xml6escape13unescape_withNCNvMs5_NtCs7S9FTsUwoO8_8oxrdfxml6parserINtBW_20InternalRdfXmlParserRShE15resolve_ns_name0EBY_:
  249|  2.07M|pub fn unescape_with<'input, 'entity, F>(
  250|  2.07M|    raw: &'input str,
  251|  2.07M|    mut resolve_entity: F,
  252|  2.07M|) -> Result<Cow<'input, str>, EscapeError>
  253|  2.07M|where
  254|  2.07M|    // the lifetime of the output comes from a capture or is `'static`
  255|  2.07M|    F: FnMut(&str) -> Option<&'entity str>,
  256|  2.07M|{
  257|  2.07M|    let bytes = raw.as_bytes();
  258|  2.07M|    let mut unescaped = None;
  259|  2.07M|    let mut last_end = 0;
  260|  2.07M|    let mut iter = memchr2_iter(b'&', b';', bytes);
  261|  18.5M|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
  262|  16.5M|        match iter.next() {
  263|  16.5M|            Some(end) if bytes[end] == b';' => {
  264|  16.5M|                // append valid data
  265|  16.5M|                if unescaped.is_none() {
  266|   309k|                    unescaped = Some(String::with_capacity(raw.len()));
  267|  16.2M|                }
  268|  16.5M|                let unescaped = unescaped.as_mut().expect("initialized");
  269|  16.5M|                unescaped.push_str(&raw[last_end..start]);
  270|  16.5M|
  271|  16.5M|                // search for character correctness
  272|  16.5M|                let pat = &raw[start + 1..end];
  273|  16.5M|                if let Some(entity) = pat.strip_prefix('#') {
  274|   130k|                    let codepoint = parse_number(entity).map_err(EscapeError::InvalidCharRef)?;
  275|  95.0k|                    unescaped.push_str(codepoint.encode_utf8(&mut [0u8; 4]));
  276|  16.3M|                } else if let Some(value) = resolve_entity(pat) {
  277|  16.3M|                    unescaped.push_str(value);
  278|  16.3M|                } else {
  279|  37.9k|                    return Err(EscapeError::UnrecognizedEntity(
  280|  37.9k|                        start + 1..end,
  281|  37.9k|                        pat.to_string(),
  282|  37.9k|                    ));
  283|       |                }
  284|       |
  285|  16.4M|                last_end = end + 1;
  286|       |            }
  287|  9.11k|            _ => return Err(EscapeError::UnterminatedEntity(start..raw.len())),
  288|       |        }
  289|       |    }
  290|       |
  291|  1.99M|    if let Some(mut unescaped) = unescaped {
  292|   235k|        if let Some(raw) = raw.get(last_end..) {
  293|   235k|            unescaped.push_str(raw);
  294|   235k|        }
  295|   235k|        Ok(Cow::Owned(unescaped))
  296|       |    } else {
  297|  1.76M|        Ok(Cow::Borrowed(raw))
  298|       |    }
  299|  2.07M|}
_RINvNtCsa7QYSr9aLYT_9quick_xml6escape13unescape_withNCNvMs5_NtCs7S9FTsUwoO8_8oxrdfxml6parserINtBW_20InternalRdfXmlParserRShE16parse_text_event0EBY_:
  249|  1.34M|pub fn unescape_with<'input, 'entity, F>(
  250|  1.34M|    raw: &'input str,
  251|  1.34M|    mut resolve_entity: F,
  252|  1.34M|) -> Result<Cow<'input, str>, EscapeError>
  253|  1.34M|where
  254|  1.34M|    // the lifetime of the output comes from a capture or is `'static`
  255|  1.34M|    F: FnMut(&str) -> Option<&'entity str>,
  256|  1.34M|{
  257|  1.34M|    let bytes = raw.as_bytes();
  258|  1.34M|    let mut unescaped = None;
  259|  1.34M|    let mut last_end = 0;
  260|  1.34M|    let mut iter = memchr2_iter(b'&', b';', bytes);
  261|  1.45M|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
  262|   178k|        match iter.next() {
  263|   154k|            Some(end) if bytes[end] == b';' => {
  264|   149k|                // append valid data
  265|   149k|                if unescaped.is_none() {
  266|  66.1k|                    unescaped = Some(String::with_capacity(raw.len()));
  267|  83.6k|                }
  268|   149k|                let unescaped = unescaped.as_mut().expect("initialized");
  269|   149k|                unescaped.push_str(&raw[last_end..start]);
  270|   149k|
  271|   149k|                // search for character correctness
  272|   149k|                let pat = &raw[start + 1..end];
  273|   149k|                if let Some(entity) = pat.strip_prefix('#') {
  274|  13.3k|                    let codepoint = parse_number(entity).map_err(EscapeError::InvalidCharRef)?;
  275|  6.90k|                    unescaped.push_str(codepoint.encode_utf8(&mut [0u8; 4]));
  276|   136k|                } else if let Some(value) = resolve_entity(pat) {
  277|   103k|                    unescaped.push_str(value);
  278|   103k|                } else {
  279|  32.8k|                    return Err(EscapeError::UnrecognizedEntity(
  280|  32.8k|                        start + 1..end,
  281|  32.8k|                        pat.to_string(),
  282|  32.8k|                    ));
  283|       |                }
  284|       |
  285|   110k|                last_end = end + 1;
  286|       |            }
  287|  28.5k|            _ => return Err(EscapeError::UnterminatedEntity(start..raw.len())),
  288|       |        }
  289|       |    }
  290|       |
  291|  1.27M|    if let Some(mut unescaped) = unescaped {
  292|  26.3k|        if let Some(raw) = raw.get(last_end..) {
  293|  26.3k|            unescaped.push_str(raw);
  294|  26.3k|        }
  295|  26.3k|        Ok(Cow::Owned(unescaped))
  296|       |    } else {
  297|  1.24M|        Ok(Cow::Borrowed(raw))
  298|       |    }
  299|  1.34M|}
_RINvNtCsa7QYSr9aLYT_9quick_xml6escape13unescape_withNCNvMs5_NtCs7S9FTsUwoO8_8oxrdfxml6parserINtBW_20InternalRdfXmlParserRShE17convert_attribute0EBY_:
  249|   444k|pub fn unescape_with<'input, 'entity, F>(
  250|   444k|    raw: &'input str,
  251|   444k|    mut resolve_entity: F,
  252|   444k|) -> Result<Cow<'input, str>, EscapeError>
  253|   444k|where
  254|   444k|    // the lifetime of the output comes from a capture or is `'static`
  255|   444k|    F: FnMut(&str) -> Option<&'entity str>,
  256|   444k|{
  257|   444k|    let bytes = raw.as_bytes();
  258|   444k|    let mut unescaped = None;
  259|   444k|    let mut last_end = 0;
  260|   444k|    let mut iter = memchr2_iter(b'&', b';', bytes);
  261|   473k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
  262|  38.1k|        match iter.next() {
  263|  36.3k|            Some(end) if bytes[end] == b';' => {
  264|  35.7k|                // append valid data
  265|  35.7k|                if unescaped.is_none() {
  266|  19.7k|                    unescaped = Some(String::with_capacity(raw.len()));
  267|  19.7k|                }
  268|  35.7k|                let unescaped = unescaped.as_mut().expect("initialized");
  269|  35.7k|                unescaped.push_str(&raw[last_end..start]);
  270|  35.7k|
  271|  35.7k|                // search for character correctness
  272|  35.7k|                let pat = &raw[start + 1..end];
  273|  35.7k|                if let Some(entity) = pat.strip_prefix('#') {
  274|  17.8k|                    let codepoint = parse_number(entity).map_err(EscapeError::InvalidCharRef)?;
  275|  17.4k|                    unescaped.push_str(codepoint.encode_utf8(&mut [0u8; 4]));
  276|  17.8k|                } else if let Some(value) = resolve_entity(pat) {
  277|  10.7k|                    unescaped.push_str(value);
  278|  10.7k|                } else {
  279|  7.14k|                    return Err(EscapeError::UnrecognizedEntity(
  280|  7.14k|                        start + 1..end,
  281|  7.14k|                        pat.to_string(),
  282|  7.14k|                    ));
  283|       |                }
  284|       |
  285|  28.1k|                last_end = end + 1;
  286|       |            }
  287|  2.43k|            _ => return Err(EscapeError::UnterminatedEntity(start..raw.len())),
  288|       |        }
  289|       |    }
  290|       |
  291|   434k|    if let Some(mut unescaped) = unescaped {
  292|  10.8k|        if let Some(raw) = raw.get(last_end..) {
  293|  10.8k|            unescaped.push_str(raw);
  294|  10.8k|        }
  295|  10.8k|        Ok(Cow::Owned(unescaped))
  296|       |    } else {
  297|   424k|        Ok(Cow::Borrowed(raw))
  298|       |    }
  299|   444k|}
_RNCINvNtCsa7QYSr9aLYT_9quick_xml6escape13unescape_withNCNvMs5_NtCs7S9FTsUwoO8_8oxrdfxml6parserINtBY_20InternalRdfXmlParserRShE15resolve_ns_name0E0B10_:
  261|  17.0M|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
_RNCINvNtCsa7QYSr9aLYT_9quick_xml6escape13unescape_withNCNvMs5_NtCs7S9FTsUwoO8_8oxrdfxml6parserINtBY_20InternalRdfXmlParserRShE16parse_text_event0E0B10_:
  261|   305k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
_RNCINvNtCsa7QYSr9aLYT_9quick_xml6escape13unescape_withNCNvMs5_NtCs7S9FTsUwoO8_8oxrdfxml6parserINtBY_20InternalRdfXmlParserRShE17convert_attribute0E0B10_:
  261|  84.7k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
_RNvXNtCsa7QYSr9aLYT_9quick_xml6escapeNtB2_17ParseCharRefErrorNtNtCshZc3FwCJ069_4core3fmt7Display3fmt:
   24|  42.6k|    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
   25|  42.6k|        match self {
   26|  6.88k|            Self::UnexpectedSign => f.write_str("unexpected number sign"),
   27|  29.0k|            Self::InvalidNumber(e) => e.fmt(f),
   28|  1.78k|            Self::InvalidCodepoint(n) => write!(f, "`{}` is not a valid codepoint", n),
   29|  4.95k|            Self::IllegalCharacter(n) => write!(f, "0x{:x} character is not permitted in XML", n),
   30|       |        }
   31|  42.6k|    }
_RNvXs0_NtCsa7QYSr9aLYT_9quick_xml6escapeNtB5_11EscapeErrorNtNtCshZc3FwCJ069_4core3fmt7Display3fmt:
   56|   160k|    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
   57|   160k|        match self {
   58|  77.9k|            EscapeError::UnrecognizedEntity(rge, res) => {
   59|  77.9k|                write!(f, "at {:?}: unrecognized entity `{}`", rge, res)
   60|       |            }
   61|  40.0k|            EscapeError::UnterminatedEntity(e) => write!(
   62|  40.0k|                f,
   63|  40.0k|                "Error while escaping character at range {:?}: Cannot find ';' after '&'",
   64|  40.0k|                e
   65|  40.0k|            ),
   66|  42.6k|            EscapeError::InvalidCharRef(e) => {
   67|  42.6k|                write!(f, "invalid character reference: {}", e)
   68|       |            }
   69|       |        }
   70|   160k|    }
_RNvNtCsa7QYSr9aLYT_9quick_xml6escape6escape:
  104|   884k|pub fn escape(raw: &str) -> Cow<str> {
  105|   884k|    _escape(raw, |ch| matches!(ch, b'<' | b'>' | b'&' | b'\'' | b'\"'))
  106|   884k|}
_RNCNvNtCsa7QYSr9aLYT_9quick_xml6escape6escape0B5_:
  105|  72.1M|    _escape(raw, |ch| matches!(ch, b'<' | b'>' | b'&' | b'\'' | b'\"'))
_RINvNtCsa7QYSr9aLYT_9quick_xml6escape7__escapeNCNvB2_6escape0EB4_:
  152|   884k|pub(crate) fn _escape<F: Fn(u8) -> bool>(raw: &str, escape_chars: F) -> Cow<str> {
  153|   884k|    let bytes = raw.as_bytes();
  154|   884k|    let mut escaped = None;
  155|   884k|    let mut iter = bytes.iter();
  156|   884k|    let mut pos = 0;
  157|  17.2M|    while let Some(i) = iter.position(|&b| escape_chars(b)) {
  158|  16.4M|        if escaped.is_none() {
  159|   169k|            escaped = Some(Vec::with_capacity(raw.len()));
  160|  16.2M|        }
  161|  16.4M|        let escaped = escaped.as_mut().expect("initialized");
  162|  16.4M|        let new_pos = pos + i;
  163|  16.4M|        escaped.extend_from_slice(&bytes[pos..new_pos]);
  164|  16.4M|        match bytes[new_pos] {
  165|  9.73k|            b'<' => escaped.extend_from_slice(b"&lt;"),
  166|  67.5k|            b'>' => escaped.extend_from_slice(b"&gt;"),
  167|  16.2M|            b'\'' => escaped.extend_from_slice(b"&apos;"),
  168|  25.2k|            b'&' => escaped.extend_from_slice(b"&amp;"),
  169|  24.1k|            b'"' => escaped.extend_from_slice(b"&quot;"),
  170|       |
  171|       |            // This set of escapes handles characters that should be escaped
  172|       |            // in elements of xs:lists, because those characters works as
  173|       |            // delimiters of list elements
  174|      0|            b'\t' => escaped.extend_from_slice(b"&#9;"),
  175|      0|            b'\n' => escaped.extend_from_slice(b"&#10;"),
  176|      0|            b'\r' => escaped.extend_from_slice(b"&#13;"),
  177|      0|            b' ' => escaped.extend_from_slice(b"&#32;"),
  178|      0|            _ => unreachable!(
  179|      0|                "Only '<', '>','\', '&', '\"', '\\t', '\\r', '\\n', and ' ' are escaped"
  180|      0|            ),
  181|       |        }
  182|  16.4M|        pos = new_pos + 1;
  183|       |    }
  184|       |
  185|   884k|    if let Some(mut escaped) = escaped {
  186|   169k|        if let Some(raw) = bytes.get(pos..) {
  187|   169k|            escaped.extend_from_slice(raw);
  188|   169k|        }
  189|       |        // SAFETY: we operate on UTF-8 input and search for an one byte chars only,
  190|       |        // so all slices that was put to the `escaped` is a valid UTF-8 encoded strings
  191|       |        // TODO: Can be replaced with `unsafe { String::from_utf8_unchecked() }`
  192|       |        // if unsafe code will be allowed
  193|   169k|        Cow::Owned(String::from_utf8(escaped).unwrap())
  194|       |    } else {
  195|   714k|        Cow::Borrowed(raw)
  196|       |    }
  197|   884k|}
_RNCINvNtCsa7QYSr9aLYT_9quick_xml6escape7__escapeNCNvB4_6escape0E0B6_:
  157|  72.1M|    while let Some(i) = iter.position(|&b| escape_chars(b)) {
_RNvNtCsa7QYSr9aLYT_9quick_xml6escape18resolve_xml_entity:
  337|  16.5M|pub const fn resolve_xml_entity(entity: &str) -> Option<&'static str> {
  338|       |    // match over strings are not allowed in const functions
  339|  16.5M|    let s = match entity.as_bytes() {
  340|  16.5M|        b"lt" => "<",
  341|  61.0k|        b"gt" => ">",
  342|  16.4M|        b"amp" => "&",
  343|  16.3M|        b"apos" => "'",
  344|  28.6k|        b"quot" => "\"",
  345|  77.9k|        _ => return None,
  346|       |    };
  347|  16.4M|    Some(s)
  348|  16.5M|}
_RNvNtCsa7QYSr9aLYT_9quick_xml6escape12parse_number:
 1819|   162k|fn parse_number(num: &str) -> Result<char, ParseCharRefError> {
 1820|   162k|    let code = if let Some(hex) = num.strip_prefix('x') {
 1821|  19.2k|        from_str_radix(hex, 16)?
 1822|       |    } else {
 1823|   142k|        from_str_radix(num, 10)?
 1824|       |    };
 1825|   126k|    if code == 0 {
 1826|  4.95k|        return Err(ParseCharRefError::IllegalCharacter(code));
 1827|   121k|    }
 1828|   121k|    match std::char::from_u32(code) {
 1829|   119k|        Some(c) => Ok(c),
 1830|  1.78k|        None => Err(ParseCharRefError::InvalidCodepoint(code)),
 1831|       |    }
 1832|   162k|}
_RNvNtCsa7QYSr9aLYT_9quick_xml6escape14from_str_radixB3_:
 1835|   162k|fn from_str_radix(src: &str, radix: u32) -> Result<u32, ParseCharRefError> {
 1836|   162k|    match src.as_bytes().first().copied() {
 1837|       |        // We should not allow sign numbers, but u32::from_str_radix will accept `+`.
 1838|       |        // We also handle `-` to be consistent in returned errors
 1839|  6.88k|        Some(b'+') | Some(b'-') => Err(ParseCharRefError::UnexpectedSign),
 1840|   155k|        _ => u32::from_str_radix(src, radix).map_err(ParseCharRefError::InvalidNumber),
 1841|       |    }
 1842|   162k|}

_RINvMNtNtCsa7QYSr9aLYT_9quick_xml6events10attributesNtB3_9Attribute30decode_and_unescape_value_withNCNvMs5_NtCs7S9FTsUwoO8_8oxrdfxml6parserINtB1H_20InternalRdfXmlParserRShE17convert_attribute0EB1J_:
   86|   452k|    pub fn decode_and_unescape_value_with<'entity>(
   87|   452k|        &self,
   88|   452k|        decoder: Decoder,
   89|   452k|        resolve_entity: impl FnMut(&str) -> Option<&'entity str>,
   90|   452k|    ) -> XmlResult<Cow<'a, str>> {
   91|   452k|        let decoded = decoder.decode_cow(&self.value)?;
   92|       |
   93|   444k|        match unescape_with(&decoded, resolve_entity)? {
   94|       |            // Because result is borrowed, no replacements was done and we can use original string
   95|   424k|            Cow::Borrowed(_) => Ok(decoded),
   96|  10.8k|            Cow::Owned(s) => Ok(s.into()),
   97|       |        }
   98|   452k|    }
_RNvXs4_NtNtCsa7QYSr9aLYT_9quick_xml6events10attributesNtB5_10AttributesNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4nextCs7S9FTsUwoO8_8oxrdfxml:
  218|  2.49M|    fn next(&mut self) -> Option<Self::Item> {
  219|  2.49M|        match self.state.next(self.bytes) {
  220|  1.46M|            None => None,
  221|   963k|            Some(Ok(a)) => Some(Ok(a.map(|range| &self.bytes[range]).into())),
  222|  62.7k|            Some(Err(e)) => Some(Err(e)),
  223|       |        }
  224|  2.49M|    }
_RNvXs1_NtNtCsa7QYSr9aLYT_9quick_xml6events10attributesNtB5_9AttributeINtNtCshZc3FwCJ069_4core7convert4FromTReB1H_EE4from:
  145|   799k|    fn from(val: (&'a str, &'a str)) -> Attribute<'a> {
  146|   799k|        Attribute {
  147|   799k|            key: QName(val.0.as_bytes()),
  148|   799k|            value: match escape(val.1) {
  149|   650k|                Cow::Borrowed(s) => Cow::Borrowed(s.as_bytes()),
  150|   148k|                Cow::Owned(s) => Cow::Owned(s.into_bytes()),
  151|       |            },
  152|       |        }
  153|   799k|    }
_RNvXs2_NtNtCsa7QYSr9aLYT_9quick_xml6events10attributesNtB5_9AttributeINtNtCshZc3FwCJ069_4core7convert4FromINtB5_4AttrRShEE4fromB9_:
  158|  2.10M|    fn from(attr: Attr<&'a [u8]>) -> Self {
  159|  2.10M|        Self {
  160|  2.10M|            key: attr.key(),
  161|  2.10M|            value: Cow::Borrowed(attr.value()),
  162|  2.10M|        }
  163|  2.10M|    }
_RNvMs3_NtNtCsa7QYSr9aLYT_9quick_xml6events10attributesNtB5_10Attributes4wrapB9_:
  185|  3.72M|    pub(crate) const fn wrap(buf: &'a [u8], pos: usize, html: bool) -> Self {
  186|  3.72M|        Self {
  187|  3.72M|            bytes: buf,
  188|  3.72M|            state: IterState::new(pos, html),
  189|  3.72M|        }
  190|  3.72M|    }
_RNvMs3_NtNtCsa7QYSr9aLYT_9quick_xml6events10attributesNtB5_10Attributes11with_checks:
  208|  2.15M|    pub fn with_checks(&mut self, val: bool) -> &mut Attributes<'a> {
  209|  2.15M|        self.state.check_duplicates = val;
  210|  2.15M|        self
  211|  2.15M|    }
_RNvXs4_NtNtCsa7QYSr9aLYT_9quick_xml6events10attributesNtB5_10AttributesNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4nextB9_:
  218|  3.21M|    fn next(&mut self) -> Option<Self::Item> {
  219|  3.21M|        match self.state.next(self.bytes) {
  220|  1.88M|            None => None,
  221|  1.14M|            Some(Ok(a)) => Some(Ok(a.map(|range| &self.bytes[range]).into())),
  222|   179k|            Some(Err(e)) => Some(Err(e)),
  223|       |        }
  224|  3.21M|    }
_RNCNvXs4_NtNtCsa7QYSr9aLYT_9quick_xml6events10attributesNtB7_10AttributesNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next0Bb_:
  221|  4.21M|            Some(Ok(a)) => Some(Ok(a.map(|range| &self.bytes[range]).into())),
_RNvXs6_NtNtCsa7QYSr9aLYT_9quick_xml6events10attributesNtB5_9AttrErrorNtNtCshZc3FwCJ069_4core3fmt7Display3fmt:
  321|  75.2k|    fn fmt(&self, f: &mut Formatter) -> fmt::Result {
  322|  75.2k|        match self {
  323|  63.2k|            Self::ExpectedEq(pos) => write!(
  324|  63.2k|                f,
  325|  63.2k|                r#"position {}: attribute key must be directly followed by `=` or space"#,
  326|  63.2k|                pos
  327|  63.2k|            ),
  328|  2.06k|            Self::ExpectedValue(pos) => write!(
  329|  2.06k|                f,
  330|  2.06k|                r#"position {}: `=` must be followed by an attribute value"#,
  331|  2.06k|                pos
  332|  2.06k|            ),
  333|  5.72k|            Self::UnquotedValue(pos) => write!(
  334|  5.72k|                f,
  335|  5.72k|                r#"position {}: attribute value must be enclosed in `"` or `'`"#,
  336|  5.72k|                pos
  337|  5.72k|            ),
  338|  3.48k|            Self::ExpectedQuote(pos, quote) => write!(
  339|  3.48k|                f,
  340|  3.48k|                r#"position {}: missing closing quote `{}` in attribute value"#,
  341|  3.48k|                pos, *quote as char
  342|  3.48k|            ),
  343|    718|            Self::Duplicated(pos1, pos2) => write!(
  344|    718|                f,
  345|    718|                r#"position {}: duplicated attribute, previous declaration at position {}"#,
  346|    718|                pos1, pos2
  347|    718|            ),
  348|       |        }
  349|  75.2k|    }
_RINvMs8_NtNtCsa7QYSr9aLYT_9quick_xml6events10attributesINtB6_4AttrINtNtNtCshZc3FwCJ069_4core3ops5range5RangejEE3mapRShNCNvXs4_B6_NtB6_10AttributesNtNtNtNtB19_4iter6traits8iterator8Iterator4next0EBa_:
  390|  2.10M|    pub fn map<U, F>(self, mut f: F) -> Attr<U>
  391|  2.10M|    where
  392|  2.10M|        F: FnMut(T) -> U,
  393|  2.10M|    {
  394|  2.10M|        match self {
  395|  2.10M|            Attr::DoubleQ(key, value) => Attr::DoubleQ(f(key), f(value)),
  396|  1.95k|            Attr::SingleQ(key, value) => Attr::SingleQ(f(key), f(value)),
  397|      0|            Attr::Empty(key) => Attr::Empty(f(key)),
  398|      0|            Attr::Unquoted(key, value) => Attr::Unquoted(f(key), f(value)),
  399|       |        }
  400|  2.10M|    }
_RNvMs9_NtNtCsa7QYSr9aLYT_9quick_xml6events10attributesINtB5_4AttrRShE3keyB9_:
  406|  2.10M|    pub const fn key(&self) -> QName<'a> {
  407|  2.10M|        QName(match self {
  408|  2.10M|            Attr::DoubleQ(key, _) => key,
  409|  1.95k|            Attr::SingleQ(key, _) => key,
  410|      0|            Attr::Empty(key) => key,
  411|      0|            Attr::Unquoted(key, _) => key,
  412|       |        })
  413|  2.10M|    }
_RNvMs9_NtNtCsa7QYSr9aLYT_9quick_xml6events10attributesINtB5_4AttrRShE5valueB9_:
  419|  2.10M|    pub const fn value(&self) -> &'a [u8] {
  420|  2.10M|        match self {
  421|  2.10M|            Attr::DoubleQ(_, value) => value,
  422|  1.95k|            Attr::SingleQ(_, value) => value,
  423|      0|            Attr::Empty(_) => &[],
  424|      0|            Attr::Unquoted(_, value) => value,
  425|       |        }
  426|  2.10M|    }
_RNvMsc_NtNtCsa7QYSr9aLYT_9quick_xml6events10attributesNtB5_9IterState3new:
  508|  3.72M|    pub const fn new(offset: usize, html: bool) -> Self {
  509|  3.72M|        Self {
  510|  3.72M|            state: State::Next(offset),
  511|  3.72M|            html,
  512|  3.72M|            check_duplicates: true,
  513|  3.72M|            keys: Vec::new(),
  514|  3.72M|        }
  515|  3.72M|    }
_RNvMsc_NtNtCsa7QYSr9aLYT_9quick_xml6events10attributesNtB5_9IterState7recover:
  520|  5.70M|    fn recover(&self, slice: &[u8]) -> Option<usize> {
  521|  5.70M|        match self.state {
  522|      0|            State::Done => None,
  523|  5.70M|            State::Next(offset) => Some(offset),
  524|      0|            State::SkipValue(offset) => self.skip_value(slice, offset),
  525|      0|            State::SkipEqValue(offset) => self.skip_eq_value(slice, offset),
  526|       |        }
  527|  5.70M|    }
_RNvMsc_NtNtCsa7QYSr9aLYT_9quick_xml6events10attributesNtB5_9IterState20check_for_duplicatesB9_:
  590|  2.13M|    fn check_for_duplicates(
  591|  2.13M|        &mut self,
  592|  2.13M|        slice: &[u8],
  593|  2.13M|        key: Range<usize>,
  594|  2.13M|    ) -> Result<Range<usize>, AttrError> {
  595|  2.13M|        if self.check_duplicates {
  596|   971k|            if let Some(prev) = self
  597|   971k|                .keys
  598|   971k|                .iter()
  599|   971k|                .find(|r| slice[(*r).clone()] == slice[key.clone()])
  600|       |            {
  601|    718|                return Err(AttrError::Duplicated(key.start, prev.start));
  602|   971k|            }
  603|   971k|            self.keys.push(key.clone());
  604|  1.16M|        }
  605|  2.13M|        Ok(key)
  606|  2.13M|    }
_RNCNvMsc_NtNtCsa7QYSr9aLYT_9quick_xml6events10attributesNtB7_9IterState20check_for_duplicates0Bb_:
  599|   384k|                .find(|r| slice[(*r).clone()] == slice[key.clone()])
_RNvMsc_NtNtCsa7QYSr9aLYT_9quick_xml6events10attributesNtB5_9IterState8key_onlyB9_:
  614|   216k|    fn key_only(&mut self, slice: &[u8], key: Range<usize>, offset: usize) -> Option<AttrResult> {
  615|   216k|        Some(if self.html {
  616|      0|            self.check_for_duplicates(slice, key).map(Attr::Empty)
  617|       |        } else {
  618|   216k|            Err(AttrError::ExpectedEq(offset))
  619|       |        })
  620|   216k|    }
_RNvMsc_NtNtCsa7QYSr9aLYT_9quick_xml6events10attributesNtB5_9IterState8double_qB9_:
  623|  2.10M|    fn double_q(&mut self, key: Range<usize>, value: Range<usize>) -> Option<AttrResult> {
  624|  2.10M|        self.state = State::Next(value.end + 1); // +1 for `"`
  625|  2.10M|
  626|  2.10M|        Some(Ok(Attr::DoubleQ(key, value)))
  627|  2.10M|    }
_RNvMsc_NtNtCsa7QYSr9aLYT_9quick_xml6events10attributesNtB5_9IterState8single_qB9_:
  630|  1.95k|    fn single_q(&mut self, key: Range<usize>, value: Range<usize>) -> Option<AttrResult> {
  631|  1.95k|        self.state = State::Next(value.end + 1); // +1 for `'`
  632|  1.95k|
  633|  1.95k|        Some(Ok(Attr::SingleQ(key, value)))
  634|  1.95k|    }
_RNvMsc_NtNtCsa7QYSr9aLYT_9quick_xml6events10attributesNtB5_9IterState4next:
  636|  5.70M|    pub fn next(&mut self, slice: &[u8]) -> Option<AttrResult> {
  637|  5.70M|        let mut iter = match self.recover(slice) {
  638|  5.70M|            Some(offset) => (offset..).zip(slice[offset..].iter()),
  639|      0|            None => return None,
  640|       |        };
  641|       |
  642|       |        // Index where next key started
  643|  5.70M|        let start_key = match iter.find(|(_, &b)| !is_whitespace(b)) {
  644|       |            // Input: `    key`
  645|       |            //             ^
  646|  2.35M|            Some((s, _)) => s,
  647|       |            // Input: `    `
  648|       |            //             ^
  649|       |            None => {
  650|       |                // Because we reach end-of-input, stop iteration on next call
  651|  3.35M|                self.state = State::Done;
  652|  3.35M|                return None;
  653|       |            }
  654|       |        };
  655|       |        // Span of a key
  656|  2.35M|        let (key, offset) = match iter.find(|(_, &b)| b == b'=' || is_whitespace(b)) {
  657|       |            // Input: `    key=`
  658|       |            //             |  ^
  659|       |            //             s  e
  660|  1.77M|            Some((e, b'=')) => (start_key..e, e),
  661|       |
  662|       |            // Input: `    key `
  663|       |            //                ^
  664|   427k|            Some((e, _)) => match iter.find(|(_, &b)| !is_whitespace(b)) {
  665|       |                // Input: `    key  =`
  666|       |                //             |  | ^
  667|       |                //     start_key  e
  668|   365k|                Some((offset, b'=')) => (start_key..e, offset),
  669|       |                // Input: `    key  x`
  670|       |                //             |  | ^
  671|       |                //     start_key  e
  672|       |                // If HTML-like attributes is allowed, this is the result, otherwise error
  673|  55.1k|                Some((offset, _)) => {
  674|  55.1k|                    // In any case, recovering is not required
  675|  55.1k|                    self.state = State::Next(offset);
  676|  55.1k|                    return self.key_only(slice, start_key..e, offset);
  677|       |                }
  678|       |                // Input: `    key  `
  679|       |                //             |  | ^
  680|       |                //     start_key  e
  681|       |                // If HTML-like attributes is allowed, this is the result, otherwise error
  682|       |                None => {
  683|       |                    // Because we reach end-of-input, stop iteration on next call
  684|  6.95k|                    self.state = State::Done;
  685|  6.95k|                    return self.key_only(slice, start_key..e, slice.len());
  686|       |                }
  687|       |            },
  688|       |
  689|       |            // Input: `    key`
  690|       |            //             |  ^
  691|       |            //             s  e = len()
  692|       |            // If HTML-like attributes is allowed, this is the result, otherwise error
  693|       |            None => {
  694|       |                // Because we reach end-of-input, stop iteration on next call
  695|   154k|                self.state = State::Done;
  696|   154k|                let e = slice.len();
  697|   154k|                return self.key_only(slice, start_key..e, e);
  698|       |            }
  699|       |        };
  700|       |
  701|  2.13M|        let key = match self.check_for_duplicates(slice, key) {
  702|    718|            Err(e) => {
  703|    718|                self.state = State::SkipEqValue(offset);
  704|    718|                return Some(Err(e));
  705|       |            }
  706|  2.13M|            Ok(key) => key,
  707|       |        };
  708|       |
  709|       |        ////////////////////////////////////////////////////////////////////////
  710|       |
  711|       |        // Gets the position of quote and quote type
  712|  2.13M|        let (start_value, quote) = match iter.find(|(_, &b)| !is_whitespace(b)) {
  713|       |            // Input: `    key  =  "`
  714|       |            //                     ^
  715|  2.11M|            Some((s, b'"')) => (s + 1, b'"'),
  716|       |            // Input: `    key  =  '`
  717|       |            //                     ^
  718|  1.95k|            Some((s, b'\'')) => (s + 1, b'\''),
  719|       |
  720|       |            // Input: `    key  =  x`
  721|       |            //                     ^
  722|       |            // If HTML-like attributes is allowed, this is the start of the value
  723|      0|            Some((s, _)) if self.html => {
  724|       |                // We do not check validity of attribute value characters as required
  725|       |                // according to https://html.spec.whatwg.org/#unquoted. It can be done
  726|       |                // during validation phase
  727|      0|                let end = match iter.find(|(_, &b)| is_whitespace(b)) {
  728|       |                    // Input: `    key  =  value `
  729|       |                    //                     |    ^
  730|       |                    //                     s    e
  731|      0|                    Some((e, _)) => e,
  732|       |                    // Input: `    key  =  value`
  733|       |                    //                     |    ^
  734|       |                    //                     s    e = len()
  735|      0|                    None => slice.len(),
  736|       |                };
  737|      0|                self.state = State::Next(end);
  738|      0|                return Some(Ok(Attr::Unquoted(key, s..end)));
  739|       |            }
  740|       |            // Input: `    key  =  x`
  741|       |            //                     ^
  742|  14.8k|            Some((s, _)) => {
  743|  14.8k|                self.state = State::SkipValue(s);
  744|  14.8k|                return Some(Err(AttrError::UnquotedValue(s)));
  745|       |            }
  746|       |
  747|       |            // Input: `    key  =  `
  748|       |            //                     ^
  749|       |            None => {
  750|       |                // Because we reach end-of-input, stop iteration on next call
  751|  4.45k|                self.state = State::Done;
  752|  4.45k|                return Some(Err(AttrError::ExpectedValue(slice.len())));
  753|       |            }
  754|       |        };
  755|       |
  756|  2.11M|        match iter.find(|(_, &b)| b == quote) {
  757|       |            // Input: `    key  =  "   "`
  758|       |            //                         ^
  759|  2.10M|            Some((e, b'"')) => self.double_q(key, start_value..e),
  760|       |            // Input: `    key  =  '   '`
  761|       |            //                         ^
  762|  1.95k|            Some((e, _)) => self.single_q(key, start_value..e),
  763|       |
  764|       |            // Input: `    key  =  "   `
  765|       |            // Input: `    key  =  '   `
  766|       |            //                         ^
  767|       |            // Closing quote not found
  768|       |            None => {
  769|       |                // Because we reach end-of-input, stop iteration on next call
  770|  6.08k|                self.state = State::Done;
  771|  6.08k|                Some(Err(AttrError::ExpectedQuote(slice.len(), quote)))
  772|       |            }
  773|       |        }
  774|  5.70M|    }
_RNCNvMsc_NtNtCsa7QYSr9aLYT_9quick_xml6events10attributesNtB7_9IterState4next0Bb_:
  643|  5.17M|        let start_key = match iter.find(|(_, &b)| !is_whitespace(b)) {
_RNCNvMsc_NtNtCsa7QYSr9aLYT_9quick_xml6events10attributesNtB7_9IterState4nexts_0Bb_:
  656|  16.9M|        let (key, offset) = match iter.find(|(_, &b)| b == b'=' || is_whitespace(b)) {
_RNCNvMsc_NtNtCsa7QYSr9aLYT_9quick_xml6events10attributesNtB7_9IterState4nexts0_0Bb_:
  664|   970k|            Some((e, _)) => match iter.find(|(_, &b)| !is_whitespace(b)) {
_RNCNvMsc_NtNtCsa7QYSr9aLYT_9quick_xml6events10attributesNtB7_9IterState4nexts1_0Bb_:
  712|  2.18M|        let (start_value, quote) = match iter.find(|(_, &b)| !is_whitespace(b)) {
_RNCNvMsc_NtNtCsa7QYSr9aLYT_9quick_xml6events10attributesNtB7_9IterState4nexts3_0Bb_:
  756|   317M|        match iter.find(|(_, &b)| b == quote) {

_RINvMNtCsa7QYSr9aLYT_9quick_xml6eventsNtB3_10BytesStart3newINtNtCs8f6x4lOZV33_5alloc6borrow3CoweEECsmXm2WBU6hV_7rdf_xml:
  115|   409k|    pub fn new<C: Into<Cow<'a, str>>>(name: C) -> Self {
  116|   409k|        let buf = str_cow_to_bytes(name);
  117|   409k|        BytesStart {
  118|   409k|            name_len: buf.len(),
  119|   409k|            buf,
  120|   409k|        }
  121|   409k|    }
_RNvMs7_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB5_9BytesText3newCsmXm2WBU6hV_7rdf_xml:
  553|  62.6k|    pub fn new(content: &'a str) -> Self {
  554|  62.6k|        Self::from_escaped(escape(content))
  555|  62.6k|    }
_RINvMNtCsa7QYSr9aLYT_9quick_xml6eventsNtB3_10BytesStart3newNtNtCs8f6x4lOZV33_5alloc6string6StringECs7S9FTsUwoO8_8oxrdfxml:
  115|  52.6k|    pub fn new<C: Into<Cow<'a, str>>>(name: C) -> Self {
  116|  52.6k|        let buf = str_cow_to_bytes(name);
  117|  52.6k|        BytesStart {
  118|  52.6k|            name_len: buf.len(),
  119|  52.6k|            buf,
  120|  52.6k|        }
  121|  52.6k|    }
_RINvMNtCsa7QYSr9aLYT_9quick_xml6eventsNtB3_10BytesStart3newReECs7S9FTsUwoO8_8oxrdfxml:
  115|  61.6k|    pub fn new<C: Into<Cow<'a, str>>>(name: C) -> Self {
  116|  61.6k|        let buf = str_cow_to_bytes(name);
  117|  61.6k|        BytesStart {
  118|  61.6k|            name_len: buf.len(),
  119|  61.6k|            buf,
  120|  61.6k|        }
  121|  61.6k|    }
_RINvMs3_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB6_8BytesEnd3newINtNtCs8f6x4lOZV33_5alloc6borrow3CoweEECs7S9FTsUwoO8_8oxrdfxml:
  423|  71.3k|    pub fn new<C: Into<Cow<'a, str>>>(name: C) -> Self {
  424|  71.3k|        Self::wrap(str_cow_to_bytes(name))
  425|  71.3k|    }
_RINvMs3_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB6_8BytesEnd3newNtNtCs8f6x4lOZV33_5alloc6string6StringECs7S9FTsUwoO8_8oxrdfxml:
  423|   332k|    pub fn new<C: Into<Cow<'a, str>>>(name: C) -> Self {
  424|   332k|        Self::wrap(str_cow_to_bytes(name))
  425|   332k|    }
_RINvMs3_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB6_8BytesEnd3newReECs7S9FTsUwoO8_8oxrdfxml:
  423|  61.6k|    pub fn new<C: Into<Cow<'a, str>>>(name: C) -> Self {
  424|  61.6k|        Self::wrap(str_cow_to_bytes(name))
  425|  61.6k|    }
_RINvMs7_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB6_9BytesText12from_escapedINtNtCs8f6x4lOZV33_5alloc6borrow3CoweEECs7S9FTsUwoO8_8oxrdfxml:
  546|  84.4k|    pub fn from_escaped<C: Into<Cow<'a, str>>>(content: C) -> Self {
  547|  84.4k|        Self::wrap(str_cow_to_bytes(content), Decoder::utf8())
  548|  84.4k|    }
_RINvMs7_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB6_9BytesText13unescape_withNCNvMs5_NtCs7S9FTsUwoO8_8oxrdfxml6parserINtB1f_20InternalRdfXmlParserRShE16parse_text_event0EB1h_:
  594|  1.93M|    pub fn unescape_with<'entity>(
  595|  1.93M|        &self,
  596|  1.93M|        resolve_entity: impl FnMut(&str) -> Option<&'entity str>,
  597|  1.93M|    ) -> Result<Cow<'a, str>> {
  598|  1.93M|        let decoded = self.decoder.decode_cow(&self.content)?;
  599|       |
  600|  1.34M|        match unescape_with(&decoded, resolve_entity)? {
  601|       |            // Because result is borrowed, no replacements was done and we can use original string
  602|  1.24M|            Cow::Borrowed(_) => Ok(decoded),
  603|  26.3k|            Cow::Owned(s) => Ok(s.into()),
  604|       |        }
  605|  1.93M|    }
_RINvMs_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB5_10BytesStart14push_attributeNtNtB5_10attributes9AttributeECs7S9FTsUwoO8_8oxrdfxml:
  265|  12.6k|    pub fn push_attribute<'b, A>(&mut self, attr: A)
  266|  12.6k|    where
  267|  12.6k|        A: Into<Attribute<'b>>,
  268|  12.6k|    {
  269|  12.6k|        self.buf.to_mut().push(b' ');
  270|  12.6k|        self.push_attr(attr.into());
  271|  12.6k|    }
_RINvMs_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB5_10BytesStart14push_attributeTReB1a_EECs7S9FTsUwoO8_8oxrdfxml:
  265|   799k|    pub fn push_attribute<'b, A>(&mut self, attr: A)
  266|   799k|    where
  267|   799k|        A: Into<Attribute<'b>>,
  268|   799k|    {
  269|   799k|        self.buf.to_mut().push(b' ');
  270|   799k|        self.push_attr(attr.into());
  271|   799k|    }
_RINvNtCsa7QYSr9aLYT_9quick_xml6events16str_cow_to_bytesINtNtCs8f6x4lOZV33_5alloc6borrow3CoweEECs7S9FTsUwoO8_8oxrdfxml:
 1386|   565k|fn str_cow_to_bytes<'a, C: Into<Cow<'a, str>>>(content: C) -> Cow<'a, [u8]> {
 1387|   565k|    match content.into() {
 1388|   514k|        Cow::Borrowed(s) => Cow::Borrowed(s.as_bytes()),
 1389|  50.6k|        Cow::Owned(s) => Cow::Owned(s.into_bytes()),
 1390|       |    }
 1391|   565k|}
_RINvNtCsa7QYSr9aLYT_9quick_xml6events16str_cow_to_bytesReECs7S9FTsUwoO8_8oxrdfxml:
 1386|   123k|fn str_cow_to_bytes<'a, C: Into<Cow<'a, str>>>(content: C) -> Cow<'a, [u8]> {
 1387|   123k|    match content.into() {
 1388|   123k|        Cow::Borrowed(s) => Cow::Borrowed(s.as_bytes()),
 1389|      0|        Cow::Owned(s) => Cow::Owned(s.into_bytes()),
 1390|       |    }
 1391|   123k|}
_RNvMNtCsa7QYSr9aLYT_9quick_xml6eventsNtB2_10BytesStart4nameCs7S9FTsUwoO8_8oxrdfxml:
  194|  2.05M|    pub fn name(&self) -> QName {
  195|  2.05M|        QName(&self.buf[..self.name_len])
  196|  2.05M|    }
_RNvMs3_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB5_8BytesEnd4nameCs7S9FTsUwoO8_8oxrdfxml:
  444|  11.2k|    pub fn name(&self) -> QName {
  445|  11.2k|        QName(&self.name)
  446|  11.2k|    }
_RNvMs3_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB5_8BytesEnd4wrapCs7S9FTsUwoO8_8oxrdfxml:
  413|   557k|    pub(crate) const fn wrap(name: Cow<'a, [u8]>) -> Self {
  414|   557k|        BytesEnd { name }
  415|   557k|    }
_RNvMs7_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB5_9BytesText3newCs7S9FTsUwoO8_8oxrdfxml:
  553|  21.8k|    pub fn new(content: &'a str) -> Self {
  554|  21.8k|        Self::from_escaped(escape(content))
  555|  21.8k|    }
_RNvMNtCsa7QYSr9aLYT_9quick_xml6eventsNtB2_10BytesStart4wrapB4_:
  102|  2.17M|    pub(crate) const fn wrap(content: &'a [u8], name_len: usize) -> Self {
  103|  2.17M|        BytesStart {
  104|  2.17M|            buf: Cow::Borrowed(content),
  105|  2.17M|            name_len,
  106|  2.17M|        }
  107|  2.17M|    }
_RINvMNtCsa7QYSr9aLYT_9quick_xml6eventsNtB3_10BytesStart12from_contentNtNtCs8f6x4lOZV33_5alloc6string6StringEB5_:
  131|  46.1k|    pub fn from_content<C: Into<Cow<'a, str>>>(content: C, name_len: usize) -> Self {
  132|  46.1k|        BytesStart {
  133|  46.1k|            buf: str_cow_to_bytes(content),
  134|  46.1k|            name_len,
  135|  46.1k|        }
  136|  46.1k|    }
_RNvMNtCsa7QYSr9aLYT_9quick_xml6eventsNtB2_10BytesStart4nameB4_:
  194|  2.05M|    pub fn name(&self) -> QName {
  195|  2.05M|        QName(&self.buf[..self.name_len])
  196|  2.05M|    }
_RNvMs_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB4_10BytesStart10attributes:
  280|  3.72M|    pub fn attributes(&self) -> Attributes {
  281|  3.72M|        Attributes::wrap(&self.buf, self.name_len, false)
  282|  3.72M|    }
_RINvMs_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB5_10BytesStart17try_get_attributeReEB7_:
  297|  98.4k|    pub fn try_get_attribute<N: AsRef<[u8]> + Sized>(
  298|  98.4k|        &'a self,
  299|  98.4k|        attr_name: N,
  300|  98.4k|    ) -> Result<Option<Attribute<'a>>> {
  301|   144k|        for a in self.attributes().with_checks(false) {
  302|   144k|            let a = a?;
  303|   131k|            if a.key.as_ref() == attr_name.as_ref() {
  304|  79.5k|                return Ok(Some(a));
  305|  52.4k|            }
  306|       |        }
  307|  6.37k|        Ok(None)
  308|  98.4k|    }
_RNvMs_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB4_10BytesStart9push_attr:
  311|   812k|    pub(crate) fn push_attr<'b>(&mut self, attr: Attribute<'b>) {
  312|   812k|        let bytes = self.buf.to_mut();
  313|   812k|        bytes.extend_from_slice(attr.key.as_ref());
  314|   812k|        bytes.extend_from_slice(b"=\"");
  315|   812k|        // FIXME: need to escape attribute content
  316|   812k|        bytes.extend_from_slice(attr.value.as_ref());
  317|   812k|        bytes.push(b'"');
  318|   812k|    }
_RNvXs1_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB5_10BytesStartNtNtNtCshZc3FwCJ069_4core3ops5deref5Deref5deref:
  342|   552k|    fn deref(&self) -> &[u8] {
  343|   552k|        &self.buf
  344|   552k|    }
_RNvMs3_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB5_8BytesEnd4wrapB7_:
  413|   525k|    pub(crate) const fn wrap(name: Cow<'a, [u8]>) -> Self {
  414|   525k|        BytesEnd { name }
  415|   525k|    }
_RNvXs5_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB5_8BytesEndNtNtNtCshZc3FwCJ069_4core3ops5deref5Deref5deref:
  469|   465k|    fn deref(&self) -> &[u8] {
  470|   465k|        &self.name
  471|   465k|    }
_RINvMs7_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB6_9BytesText4wrapINtNtCs8f6x4lOZV33_5alloc6borrow3CowShEEB8_:
  537|  84.5k|    pub(crate) fn wrap<C: Into<Cow<'a, [u8]>>>(content: C, decoder: Decoder) -> Self {
  538|  84.5k|        Self {
  539|  84.5k|            content: content.into(),
  540|  84.5k|            decoder,
  541|  84.5k|        }
  542|  84.5k|    }
_RINvMs7_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB6_9BytesText4wrapRShEB8_:
  537|  1.99M|    pub(crate) fn wrap<C: Into<Cow<'a, [u8]>>>(content: C, decoder: Decoder) -> Self {
  538|  1.99M|        Self {
  539|  1.99M|            content: content.into(),
  540|  1.99M|            decoder,
  541|  1.99M|        }
  542|  1.99M|    }
_RNvXs9_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB5_9BytesTextNtNtNtCshZc3FwCJ069_4core3ops5deref5Deref5deref:
  638|  1.41M|    fn deref(&self) -> &[u8] {
  639|  1.41M|        &self.content
  640|  1.41M|    }
_RINvMsa_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB6_10BytesCData4wrapRShEB8_:
  692|    150|    pub(crate) fn wrap<C: Into<Cow<'a, [u8]>>>(content: C, decoder: Decoder) -> Self {
  693|    150|        Self {
  694|    150|            content: content.into(),
  695|    150|            decoder,
  696|    150|        }
  697|    150|    }
_RNvMsa_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB5_10BytesCData6escape:
  746|    150|    pub fn escape(self) -> Result<BytesText<'a>> {
  747|    150|        let decoded = self.decode()?;
  748|       |        Ok(BytesText::wrap(
  749|    136|            match escape(&decoded) {
  750|       |                // Because result is borrowed, no replacements was done and we can use original content
  751|     63|                Cow::Borrowed(_) => self.content,
  752|     73|                Cow::Owned(escaped) => Cow::Owned(escaped.into_bytes()),
  753|       |            },
  754|    136|            Decoder::utf8(),
  755|       |        ))
  756|    150|    }
_RNvMsa_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB5_10BytesCData6decode:
  808|    150|    pub(crate) fn decode(&self) -> Result<Cow<'a, str>> {
  809|    150|        self.decoder.decode_cow(&self.content)
  810|    150|    }
_RNvMsd_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB5_7BytesPI4wrapB7_:
  872|  24.0k|    pub(crate) const fn wrap(content: &'a [u8], target_len: usize) -> Self {
  873|  24.0k|        Self {
  874|  24.0k|            content: BytesStart::wrap(content, target_len),
  875|  24.0k|        }
  876|  24.0k|    }
_RNvMsg_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB5_9BytesDecl3new:
 1048|  46.1k|    pub fn new(
 1049|  46.1k|        version: &str,
 1050|  46.1k|        encoding: Option<&str>,
 1051|  46.1k|        standalone: Option<&str>,
 1052|  46.1k|    ) -> BytesDecl<'static> {
 1053|       |        // Compute length of the buffer based on supplied attributes
 1054|       |        // ' encoding=""'   => 12
 1055|  46.1k|        let encoding_attr_len = if let Some(xs) = encoding {
 1056|  46.1k|            12 + xs.len()
 1057|       |        } else {
 1058|      0|            0
 1059|       |        };
 1060|       |        // ' standalone=""' => 14
 1061|  46.1k|        let standalone_attr_len = if let Some(xs) = standalone {
 1062|      0|            14 + xs.len()
 1063|       |        } else {
 1064|  46.1k|            0
 1065|       |        };
 1066|       |        // 'xml version=""' => 14
 1067|  46.1k|        let mut buf = String::with_capacity(14 + encoding_attr_len + standalone_attr_len);
 1068|  46.1k|
 1069|  46.1k|        buf.push_str("xml version=\"");
 1070|  46.1k|        buf.push_str(version);
 1071|       |
 1072|  46.1k|        if let Some(encoding_val) = encoding {
 1073|  46.1k|            buf.push_str("\" encoding=\"");
 1074|  46.1k|            buf.push_str(encoding_val);
 1075|  46.1k|        }
 1076|       |
 1077|  46.1k|        if let Some(standalone_val) = standalone {
 1078|      0|            buf.push_str("\" standalone=\"");
 1079|      0|            buf.push_str(standalone_val);
 1080|  46.1k|        }
 1081|  46.1k|        buf.push('"');
 1082|  46.1k|
 1083|  46.1k|        BytesDecl {
 1084|  46.1k|            content: BytesStart::from_content(buf, 3),
 1085|  46.1k|        }
 1086|  46.1k|    }
_RNvMsg_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB5_9BytesDecl10from_start:
 1089|  98.4k|    pub const fn from_start(start: BytesStart<'a>) -> Self {
 1090|  98.4k|        Self { content: start }
 1091|  98.4k|    }
_RNvMsg_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB5_9BytesDecl8encoding:
 1192|  98.4k|    pub fn encoding(&self) -> Option<Result<Cow<[u8]>>> {
 1193|  98.4k|        self.content
 1194|  98.4k|            .try_get_attribute("encoding")
 1195|  98.4k|            .map(|a| a.map(|a| a.value))
 1196|  98.4k|            .transpose()
 1197|  98.4k|    }
_RNCNvMsg_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB7_9BytesDecl8encoding0B9_:
 1195|  85.9k|            .map(|a| a.map(|a| a.value))
_RNCNCNvMsg_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB9_9BytesDecl8encoding00Bb_:
 1195|  79.5k|            .map(|a| a.map(|a| a.value))
_RNvXsh_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB5_9BytesDeclNtNtNtCshZc3FwCJ069_4core3ops5deref5Deref5deref:
 1273|  46.1k|    fn deref(&self) -> &[u8] {
 1274|  46.1k|        &self.content
 1275|  46.1k|    }
_RINvNtCsa7QYSr9aLYT_9quick_xml6events16str_cow_to_bytesNtNtCs8f6x4lOZV33_5alloc6string6StringEB4_:
 1386|   430k|fn str_cow_to_bytes<'a, C: Into<Cow<'a, str>>>(content: C) -> Cow<'a, [u8]> {
 1387|   430k|    match content.into() {
 1388|      0|        Cow::Borrowed(s) => Cow::Borrowed(s.as_bytes()),
 1389|   430k|        Cow::Owned(s) => Cow::Owned(s.into_bytes()),
 1390|       |    }
 1391|   430k|}

_RNvMsf_NtCsa7QYSr9aLYT_9quick_xml4nameNtB5_17NamespaceResolver7resolveCs7S9FTsUwoO8_8oxrdfxml:
  563|  2.47M|    pub fn resolve<'n>(
  564|  2.47M|        &self,
  565|  2.47M|        name: QName<'n>,
  566|  2.47M|        use_default: bool,
  567|  2.47M|    ) -> (ResolveResult, LocalName<'n>) {
  568|  2.47M|        let (local_name, prefix) = name.decompose();
  569|  2.47M|        (self.resolve_prefix(prefix, use_default), local_name)
  570|  2.47M|    }
_RNvXs0_NtCsa7QYSr9aLYT_9quick_xml4nameNtB5_5QNameINtNtCshZc3FwCJ069_4core7convert5AsRefShE6as_refCs7S9FTsUwoO8_8oxrdfxml:
  123|  1.95M|    fn as_ref(&self) -> &[u8] {
  124|  1.95M|        self.0
  125|  1.95M|    }
_RNvXs3_NtCsa7QYSr9aLYT_9quick_xml4nameNtB5_9LocalNameINtNtCshZc3FwCJ069_4core7convert5AsRefShE6as_refCs7S9FTsUwoO8_8oxrdfxml:
  153|  4.28M|    fn as_ref(&self) -> &[u8] {
  154|  4.28M|        self.0
  155|  4.28M|    }
_RNvXsa_NtCsa7QYSr9aLYT_9quick_xml4nameNtB5_9NamespaceINtNtCshZc3FwCJ069_4core7convert5AsRefShE6as_refCs7S9FTsUwoO8_8oxrdfxml:
  269|  4.28M|    fn as_ref(&self) -> &[u8] {
  270|  4.28M|        self.0
  271|  4.28M|    }
_RNvMNtCsa7QYSr9aLYT_9quick_xml4nameNtB2_5QName9decompose:
   66|  2.47M|    pub fn decompose(&self) -> (LocalName<'a>, Option<Prefix<'a>>) {
   67|  2.47M|        match self.index() {
   68|  1.48M|            None => (LocalName(self.0), None),
   69|   991k|            Some(i) => (LocalName(&self.0[i + 1..]), Some(Prefix(&self.0[..i]))),
   70|       |        }
   71|  2.47M|    }
_RNvMNtCsa7QYSr9aLYT_9quick_xml4nameNtB2_5QName20as_namespace_binding:
   97|  1.01M|    pub fn as_namespace_binding(&self) -> Option<PrefixDeclaration<'a>> {
   98|  1.01M|        if self.0.starts_with(b"xmlns") {
   99|   508k|            return match self.0.get(5) {
  100|   250k|                None => Some(PrefixDeclaration::Default),
  101|   250k|                Some(&b':') => Some(PrefixDeclaration::Named(&self.0[6..])),
  102|  7.20k|                _ => None,
  103|       |            };
  104|   505k|        }
  105|   505k|        None
  106|  1.01M|    }
_RNvMNtCsa7QYSr9aLYT_9quick_xml4nameNtB2_5QName5index:
  110|  2.47M|    fn index(&self) -> Option<usize> {
  111|  2.47M|        memchr(b':', self.0)
  112|  2.47M|    }
_RNvXs0_NtCsa7QYSr9aLYT_9quick_xml4nameNtB5_5QNameINtNtCshZc3FwCJ069_4core7convert5AsRefShE6as_refB7_:
  123|  2.99M|    fn as_ref(&self) -> &[u8] {
  124|  2.99M|        self.0
  125|  2.99M|    }
_RNvMs5_NtCsa7QYSr9aLYT_9quick_xml4nameNtB5_6Prefix10into_inner:
  190|   257k|    pub const fn into_inner(self) -> &'a [u8] {
  191|   257k|        self.0
  192|   257k|    }
_RNvMs8_NtCsa7QYSr9aLYT_9quick_xml4nameNtB5_9Namespace10into_inner:
  255|   188k|    pub const fn into_inner(self) -> &'a [u8] {
  256|   188k|        self.0
  257|   188k|    }
_RNvMsd_NtCsa7QYSr9aLYT_9quick_xml4nameNtB5_14NamespaceEntry6prefixB7_:
  366|  4.06M|    fn prefix<'b>(&self, ns_buffer: &'b [u8]) -> Option<Prefix<'b>> {
  367|  4.06M|        if self.prefix_len == 0 {
  368|  1.49M|            None
  369|       |        } else {
  370|  2.56M|            Some(Prefix(&ns_buffer[self.start..self.start + self.prefix_len]))
  371|       |        }
  372|  4.06M|    }
_RNvMsd_NtCsa7QYSr9aLYT_9quick_xml4nameNtB5_14NamespaceEntry9namespaceB7_:
  379|  2.14M|    fn namespace<'ns>(&self, buffer: &'ns [u8]) -> ResolveResult<'ns> {
  380|  2.14M|        if self.value_len == 0 {
  381|  4.34k|            ResolveResult::Unbound
  382|       |        } else {
  383|  2.14M|            let start = self.start + self.prefix_len;
  384|  2.14M|            ResolveResult::Bound(Namespace(&buffer[start..start + self.value_len]))
  385|       |        }
  386|  2.14M|    }
_RNvXse_NtCsa7QYSr9aLYT_9quick_xml4nameNtB5_17NamespaceResolverNtNtCshZc3FwCJ069_4core7default7Default7default:
  430|  94.1k|    fn default() -> Self {
  431|  94.1k|        let mut buffer = Vec::new();
  432|  94.1k|        let mut bindings = Vec::new();
  433|   282k|        for ent in &[RESERVED_NAMESPACE_XML, RESERVED_NAMESPACE_XMLNS] {
  434|   188k|            let prefix = ent.0.into_inner();
  435|   188k|            let uri = ent.1.into_inner();
  436|   188k|            bindings.push(NamespaceEntry {
  437|   188k|                start: buffer.len(),
  438|   188k|                prefix_len: prefix.len(),
  439|   188k|                value_len: uri.len(),
  440|   188k|                level: 0,
  441|   188k|            });
  442|   188k|            buffer.extend(prefix);
  443|   188k|            buffer.extend(uri);
  444|   188k|        }
  445|       |
  446|  94.1k|        Self {
  447|  94.1k|            buffer,
  448|  94.1k|            bindings,
  449|  94.1k|            nesting_level: 0,
  450|  94.1k|        }
  451|  94.1k|    }
_RNvMsf_NtCsa7QYSr9aLYT_9quick_xml4nameNtB5_17NamespaceResolver4push:
  459|  2.05M|    pub fn push(&mut self, start: &BytesStart) -> Result<()> {
  460|  2.05M|        self.nesting_level += 1;
  461|  2.05M|        let level = self.nesting_level;
  462|       |        // adds new namespaces for attributes starting with 'xmlns:' and for the 'xmlns'
  463|       |        // (default namespace) attribute.
  464|  2.05M|        for a in start.attributes().with_checks(false) {
  465|  1.18M|            if let Ok(Attribute { key: k, value: v }) = a {
  466|  1.01M|                match k.as_namespace_binding() {
  467|   250k|                    Some(PrefixDeclaration::Default) => {
  468|   250k|                        let start = self.buffer.len();
  469|   250k|                        self.buffer.extend_from_slice(&v);
  470|   250k|                        self.bindings.push(NamespaceEntry {
  471|   250k|                            start,
  472|   250k|                            prefix_len: 0,
  473|   250k|                            value_len: v.len(),
  474|   250k|                            level,
  475|   250k|                        });
  476|   250k|                    }
  477|   250k|                    Some(PrefixDeclaration::Named(b"xml")) => {
  478|  1.82k|                        if Namespace(&v) != RESERVED_NAMESPACE_XML.1 {
  479|       |                            // error, `xml` prefix explicitly set to different value
  480|  1.43k|                            return Err(Error::InvalidPrefixBind {
  481|  1.43k|                                prefix: b"xml".to_vec(),
  482|  1.43k|                                namespace: v.to_vec(),
  483|  1.43k|                            });
  484|    385|                        }
  485|       |                        // don't add another NamespaceEntry for the `xml` namespace prefix
  486|       |                    }
  487|   198k|                    Some(PrefixDeclaration::Named(b"xmlns")) => {
  488|       |                        // error, `xmlns` prefix explicitly set
  489|  2.22k|                        return Err(Error::InvalidPrefixBind {
  490|  2.22k|                            prefix: b"xmlns".to_vec(),
  491|  2.22k|                            namespace: v.to_vec(),
  492|  2.22k|                        });
  493|       |                    }
  494|   245k|                    Some(PrefixDeclaration::Named(prefix)) => {
  495|   245k|                        let ns = Namespace(&v);
  496|   245k|
  497|   245k|                        if ns == RESERVED_NAMESPACE_XML.1 || ns == RESERVED_NAMESPACE_XMLNS.1 {
  498|       |                            // error, non-`xml` prefix set to xml uri
  499|       |                            // error, non-`xmlns` prefix set to xmlns uri
  500|  1.45k|                            return Err(Error::InvalidPrefixBind {
  501|  1.45k|                                prefix: prefix.to_vec(),
  502|  1.45k|                                namespace: v.to_vec(),
  503|  1.45k|                            });
  504|   244k|                        }
  505|   244k|
  506|   244k|                        let start = self.buffer.len();
  507|   244k|                        self.buffer.extend_from_slice(prefix);
  508|   244k|                        self.buffer.extend_from_slice(&v);
  509|   244k|                        self.bindings.push(NamespaceEntry {
  510|   244k|                            start,
  511|   244k|                            prefix_len: prefix.len(),
  512|   244k|                            value_len: v.len(),
  513|   244k|                            level,
  514|   244k|                        });
  515|       |                    }
  516|   512k|                    None => {}
  517|       |                }
  518|       |            } else {
  519|   167k|                break;
  520|       |            }
  521|       |        }
  522|  2.05M|        Ok(())
  523|  2.05M|    }
_RNvMsf_NtCsa7QYSr9aLYT_9quick_xml4nameNtB5_17NamespaceResolver3pop:
  529|   617k|    pub fn pop(&mut self) {
  530|   617k|        self.nesting_level -= 1;
  531|   617k|        let current_level = self.nesting_level;
  532|   617k|        // from the back (most deeply nested scope), look for the first scope that is still valid
  533|   617k|        match self.bindings.iter().rposition(|n| n.level <= current_level) {
  534|       |            // none of the namespaces are valid, remove all of them
  535|      0|            None => {
  536|      0|                self.buffer.clear();
  537|      0|                self.bindings.clear();
  538|      0|            }
  539|       |            // drop all namespaces past the last valid namespace
  540|   617k|            Some(last_valid_pos) => {
  541|   617k|                if let Some(len) = self.bindings.get(last_valid_pos + 1).map(|n| n.start) {
  542|   435k|                    self.buffer.truncate(len);
  543|   435k|                    self.bindings.truncate(last_valid_pos + 1);
  544|   435k|                }
  545|       |            }
  546|       |        }
  547|   617k|    }
_RNCNvMsf_NtCsa7QYSr9aLYT_9quick_xml4nameNtB7_17NamespaceResolver3pop0B9_:
  533|  1.05M|        match self.bindings.iter().rposition(|n| n.level <= current_level) {
_RNCNvMsf_NtCsa7QYSr9aLYT_9quick_xml4nameNtB7_17NamespaceResolver3pops_0B9_:
  541|   435k|                if let Some(len) = self.bindings.get(last_valid_pos + 1).map(|n| n.start) {
_RNvMsf_NtCsa7QYSr9aLYT_9quick_xml4nameNtB5_17NamespaceResolver14resolve_prefix:
  587|  2.47M|    fn resolve_prefix(&self, prefix: Option<Prefix>, use_default: bool) -> ResolveResult {
  588|  2.47M|        self.bindings
  589|  2.47M|            .iter()
  590|  2.47M|            // Find the last defined binding that corresponds to the given prefix
  591|  2.47M|            .rev()
  592|  2.47M|            .find_map(|n| match (n.prefix(&self.buffer), prefix) {
  593|       |                // This is default namespace definition and name has no explicit prefix
  594|       |                (None, None) if use_default => Some(n.namespace(&self.buffer)),
  595|       |                (None, None) => Some(ResolveResult::Unbound),
  596|       |
  597|       |                // One part has prefix but other is not -> skip
  598|       |                (None, Some(_)) => None,
  599|       |                (Some(_), None) => None,
  600|       |
  601|       |                // Prefixes does not match -> skip
  602|       |                (Some(definition), Some(usage)) if definition != usage => None,
  603|       |
  604|       |                // Prefixes the same, entry defines binding reset (corresponds to `xmlns:p=""`)
  605|       |                _ if n.value_len == 0 => Some(Self::maybe_unknown(prefix)),
  606|       |                // Prefixes the same, returns corresponding namespace
  607|       |                _ => Some(n.namespace(&self.buffer)),
  608|  2.47M|            })
  609|  2.47M|            .unwrap_or_else(|| Self::maybe_unknown(prefix))
  610|  2.47M|    }
_RNCNvMsf_NtCsa7QYSr9aLYT_9quick_xml4nameNtB7_17NamespaceResolver14resolve_prefix0B9_:
  592|  4.06M|            .find_map(|n| match (n.prefix(&self.buffer), prefix) {
  593|       |                // This is default namespace definition and name has no explicit prefix
  594|  1.22M|                (None, None) if use_default => Some(n.namespace(&self.buffer)),
  595|  1.69k|                (None, None) => Some(ResolveResult::Unbound),
  596|       |
  597|       |                // One part has prefix but other is not -> skip
  598|   262k|                (None, Some(_)) => None,
  599|   844k|                (Some(_), None) => None,
  600|       |
  601|       |                // Prefixes does not match -> skip
  602|  1.72M|                (Some(definition), Some(usage)) if definition != usage => None,
  603|       |
  604|       |                // Prefixes the same, entry defines binding reset (corresponds to `xmlns:p=""`)
  605|   923k|                _ if n.value_len == 0 => Some(Self::maybe_unknown(prefix)),
  606|       |                // Prefixes the same, returns corresponding namespace
  607|   922k|                _ => Some(n.namespace(&self.buffer)),
  608|  4.06M|            })
_RNCNvMsf_NtCsa7QYSr9aLYT_9quick_xml4nameNtB7_17NamespaceResolver14resolve_prefixs_0B9_:
  609|   324k|            .unwrap_or_else(|| Self::maybe_unknown(prefix))
_RNvMsf_NtCsa7QYSr9aLYT_9quick_xml4nameNtB5_17NamespaceResolver13maybe_unknownB7_:
  613|   324k|    fn maybe_unknown(prefix: Option<Prefix>) -> ResolveResult<'static> {
  614|   324k|        match prefix {
  615|  68.9k|            Some(p) => ResolveResult::Unknown(p.into_inner().to_vec()),
  616|   255k|            None => ResolveResult::Unbound,
  617|       |        }
  618|   324k|    }

_RNvXNtNtCsa7QYSr9aLYT_9quick_xml6parser7elementNtB2_13ElementParserNtB4_6Parser4feedCs7S9FTsUwoO8_8oxrdfxml:
   57|  2.61M|    fn feed(&mut self, bytes: &[u8]) -> Option<usize> {
   58|  5.12M|        for i in memchr::memchr3_iter(b'>', b'\'', b'"', bytes) {
   59|  5.12M|            *self = match (*self, bytes[i]) {
   60|       |                // only allowed to match `>` while we are in state `Outside`
   61|  2.60M|                (Self::Outside, b'>') => return Some(i),
   62|  11.6k|                (Self::Outside, b'\'') => Self::SingleQ,
   63|  1.09M|                (Self::Outside, b'\"') => Self::DoubleQ,
   64|       |
   65|       |                // the only end_byte that gets us out if the same character
   66|  1.10M|                (Self::SingleQ, b'\'') | (Self::DoubleQ, b'"') => Self::Outside,
   67|       |
   68|       |                // all other bytes: no state change
   69|   321k|                _ => continue,
   70|       |            };
   71|       |        }
   72|  16.6k|        None
   73|  2.61M|    }
_RNvXNtNtCsa7QYSr9aLYT_9quick_xml6parser7elementNtB2_13ElementParserNtB4_6Parser9eof_errorCs7S9FTsUwoO8_8oxrdfxml:
   76|  16.6k|    fn eof_error() -> SyntaxError {
   77|  16.6k|        SyntaxError::UnclosedTag
   78|  16.6k|    }

_RNvXNtNtCsa7QYSr9aLYT_9quick_xml6parser2piNtB2_8PiParserNtB4_6Parser4feedCs7S9FTsUwoO8_8oxrdfxml:
   61|   124k|    fn feed(&mut self, bytes: &[u8]) -> Option<usize> {
   62|   142k|        for i in memchr::memchr_iter(b'>', bytes) {
   63|   142k|            match i {
   64|      0|                0 if self.0 => return Some(0),
   65|       |                // If the previous byte is `?`, then we found `?>`
   66|   142k|                i if i > 0 && bytes[i - 1] == b'?' => return Some(i),
   67|  20.1k|                _ => {}
   68|       |            }
   69|       |        }
   70|  2.02k|        self.0 = bytes.last().copied() == Some(b'?');
   71|  2.02k|        None
   72|   124k|    }
_RNvXNtNtCsa7QYSr9aLYT_9quick_xml6parser2piNtB2_8PiParserNtB4_6Parser9eof_errorCs7S9FTsUwoO8_8oxrdfxml:
   75|  2.02k|    fn eof_error() -> SyntaxError {
   76|  2.02k|        SyntaxError::UnclosedPIOrXmlDecl
   77|  2.02k|    }

_RINvXNtNtCsa7QYSr9aLYT_9quick_xml6reader15buffered_readerRShINtB5_9XmlSourceQINtNtCs8f6x4lOZV33_5alloc3vec3VechEE9read_withNtNtNtB7_6parser2pi8PiParserECs7S9FTsUwoO8_8oxrdfxml:
  105|   124k|        $($async)? fn read_with<$($lf,)? P: Parser>(
  106|   124k|            &mut self,
  107|   124k|            mut parser: P,
  108|   124k|            buf: &'b mut Vec<u8>,
  109|   124k|            position: &mut u64,
  110|   124k|        ) -> Result<&'b [u8]> {
  111|   124k|            let mut read = 0;
  112|   124k|            let start = buf.len();
  113|       |            loop {
  114|   126k|                let available = match self $(.$reader)? .fill_buf() $(.$await)? {
  115|   126k|                    Ok(n) if n.is_empty() => break,
  116|   124k|                    Ok(n) => n,
  117|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  118|      0|                    Err(e) => {
  119|      0|                        *position += read;
  120|      0|                        return Err(Error::Io(e.into()));
  121|       |                    }
  122|       |                };
  123|       |
  124|   124k|                if let Some(i) = parser.feed(available) {
  125|   122k|                    buf.extend_from_slice(&available[..i]);
  126|   122k|
  127|   122k|                    // +1 for `>` which we do not include
  128|   122k|                    self $(.$reader)? .consume(i + 1);
  129|   122k|                    read += i as u64 + 1;
  130|   122k|
  131|   122k|                    *position += read;
  132|   122k|                    return Ok(&buf[start..]);
  133|  2.02k|                }
  134|  2.02k|
  135|  2.02k|                // The `>` symbol not yet found, continue reading
  136|  2.02k|                buf.extend_from_slice(available);
  137|  2.02k|
  138|  2.02k|                let used = available.len();
  139|  2.02k|                self $(.$reader)? .consume(used);
  140|  2.02k|                read += used as u64;
  141|       |            }
  142|       |
  143|  2.02k|            *position += read;
  144|  2.02k|            Err(Error::Syntax(P::eof_error()))
  145|   124k|        }
_RINvXNtNtCsa7QYSr9aLYT_9quick_xml6reader15buffered_readerRShINtB5_9XmlSourceQINtNtCs8f6x4lOZV33_5alloc3vec3VechEE9read_withNtNtNtB7_6parser7element13ElementParserECs7S9FTsUwoO8_8oxrdfxml:
  105|  2.61M|        $($async)? fn read_with<$($lf,)? P: Parser>(
  106|  2.61M|            &mut self,
  107|  2.61M|            mut parser: P,
  108|  2.61M|            buf: &'b mut Vec<u8>,
  109|  2.61M|            position: &mut u64,
  110|  2.61M|        ) -> Result<&'b [u8]> {
  111|  2.61M|            let mut read = 0;
  112|  2.61M|            let start = buf.len();
  113|       |            loop {
  114|  2.63M|                let available = match self $(.$reader)? .fill_buf() $(.$await)? {
  115|  2.63M|                    Ok(n) if n.is_empty() => break,
  116|  2.61M|                    Ok(n) => n,
  117|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  118|      0|                    Err(e) => {
  119|      0|                        *position += read;
  120|      0|                        return Err(Error::Io(e.into()));
  121|       |                    }
  122|       |                };
  123|       |
  124|  2.61M|                if let Some(i) = parser.feed(available) {
  125|  2.60M|                    buf.extend_from_slice(&available[..i]);
  126|  2.60M|
  127|  2.60M|                    // +1 for `>` which we do not include
  128|  2.60M|                    self $(.$reader)? .consume(i + 1);
  129|  2.60M|                    read += i as u64 + 1;
  130|  2.60M|
  131|  2.60M|                    *position += read;
  132|  2.60M|                    return Ok(&buf[start..]);
  133|  16.6k|                }
  134|  16.6k|
  135|  16.6k|                // The `>` symbol not yet found, continue reading
  136|  16.6k|                buf.extend_from_slice(available);
  137|  16.6k|
  138|  16.6k|                let used = available.len();
  139|  16.6k|                self $(.$reader)? .consume(used);
  140|  16.6k|                read += used as u64;
  141|       |            }
  142|       |
  143|  16.6k|            *position += read;
  144|  16.6k|            Err(Error::Syntax(P::eof_error()))
  145|  2.61M|        }
_RNvXNtNtCsa7QYSr9aLYT_9quick_xml6reader15buffered_readerRShINtB4_9XmlSourceQINtNtCs8f6x4lOZV33_5alloc3vec3VechEE15remove_utf8_bomCs7S9FTsUwoO8_8oxrdfxml:
   19|  94.1k|        $($async)? fn remove_utf8_bom(&mut self) -> io::Result<()> {
   20|       |            use crate::encoding::UTF8_BOM;
   21|       |
   22|       |            loop {
   23|  94.1k|                break match self $(.$reader)? .fill_buf() $(.$await)? {
   24|  94.1k|                    Ok(n) => {
   25|  94.1k|                        if n.starts_with(UTF8_BOM) {
   26|    623|                            self $(.$reader)? .consume(UTF8_BOM.len());
   27|  93.5k|                        }
   28|  94.1k|                        Ok(())
   29|       |                    },
   30|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
   31|      0|                    Err(e) => Err(e),
   32|       |                };
   33|       |            }
   34|  94.1k|        }
_RNvXNtNtCsa7QYSr9aLYT_9quick_xml6reader15buffered_readerRShINtB4_9XmlSourceQINtNtCs8f6x4lOZV33_5alloc3vec3VechEE17read_bang_elementCs7S9FTsUwoO8_8oxrdfxml:
  148|  2.91k|        $($async)? fn read_bang_element $(<$lf>)? (
  149|  2.91k|            &mut self,
  150|  2.91k|            buf: &'b mut Vec<u8>,
  151|  2.91k|            position: &mut u64,
  152|  2.91k|        ) -> Result<(BangType, &'b [u8])> {
  153|  2.91k|            // Peeked one bang ('!') before being called, so it's guaranteed to
  154|  2.91k|            // start with it.
  155|  2.91k|            let start = buf.len();
  156|  2.91k|            let mut read = 1;
  157|  2.91k|            buf.push(b'!');
  158|  2.91k|            self $(.$reader)? .consume(1);
  159|       |
  160|  2.91k|            let mut bang_type = BangType::new(self.peek_one() $(.$await)? ?)?;
  161|       |
  162|       |            loop {
  163|  3.00k|                match self $(.$reader)? .fill_buf() $(.$await)? {
  164|       |                    // Note: Do not update position, so the error points to
  165|       |                    // somewhere sane rather than at the EOF
  166|  3.00k|                    Ok(n) if n.is_empty() => break,
  167|  2.83k|                    Ok(available) => {
  168|       |                        // We only parse from start because we don't want to consider
  169|       |                        // whatever is in the buffer before the bang element
  170|  2.83k|                        if let Some((consumed, used)) = bang_type.parse(&buf[start..], available) {
  171|  2.67k|                            buf.extend_from_slice(consumed);
  172|  2.67k|
  173|  2.67k|                            self $(.$reader)? .consume(used);
  174|  2.67k|                            read += used as u64;
  175|  2.67k|
  176|  2.67k|                            *position += read;
  177|  2.67k|                            return Ok((bang_type, &buf[start..]));
  178|    167|                        } else {
  179|    167|                            buf.extend_from_slice(available);
  180|    167|
  181|    167|                            let used = available.len();
  182|    167|                            self $(.$reader)? .consume(used);
  183|    167|                            read += used as u64;
  184|    167|                        }
  185|       |                    }
  186|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  187|      0|                    Err(e) => {
  188|      0|                        *position += read;
  189|      0|                        return Err(Error::Io(e.into()));
  190|       |                    }
  191|       |                }
  192|       |            }
  193|       |
  194|    167|            *position += read;
  195|    167|            Err(bang_type.to_err())
  196|  2.91k|        }
_RNvXNtNtCsa7QYSr9aLYT_9quick_xml6reader15buffered_readerRShINtB4_9XmlSourceQINtNtCs8f6x4lOZV33_5alloc3vec3VechEE8peek_oneCs7S9FTsUwoO8_8oxrdfxml:
  219|  2.75M|        $($async)? fn peek_one(&mut self) -> io::Result<Option<u8>> {
  220|       |            loop {
  221|  2.75M|                break match self $(.$reader)? .fill_buf() $(.$await)? {
  222|  2.75M|                    Ok(n) => Ok(n.first().cloned()),
  223|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  224|      0|                    Err(e) => Err(e),
  225|       |                };
  226|       |            }
  227|  2.75M|        }
_RNvXNtNtCsa7QYSr9aLYT_9quick_xml6reader15buffered_readerRShINtB4_9XmlSourceQINtNtCs8f6x4lOZV33_5alloc3vec3VechEE9read_textCs7S9FTsUwoO8_8oxrdfxml:
   54|  2.81M|        $($async)? fn read_text $(<$lf>)? (
   55|  2.81M|            &mut self,
   56|  2.81M|            buf: &'b mut Vec<u8>,
   57|  2.81M|            position: &mut u64,
   58|  2.81M|        ) -> ReadTextResult<'b, &'b mut Vec<u8>> {
   59|  2.81M|            let mut read = 0;
   60|  2.81M|            let start = buf.len();
   61|       |            loop {
   62|  2.84M|                let available = match self $(.$reader)? .fill_buf() $(.$await)? {
   63|  2.84M|                    Ok(n) if n.is_empty() => break,
   64|  2.76M|                    Ok(n) => n,
   65|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
   66|      0|                    Err(e) => {
   67|      0|                        *position += read;
   68|      0|                        return ReadTextResult::Err(e);
   69|       |                    }
   70|       |                };
   71|       |
   72|  2.76M|                match memchr::memchr(b'<', available) {
   73|       |                    // Special handling is needed only on the first iteration.
   74|       |                    // On next iterations we already read something and should emit Text event
   75|   828k|                    Some(0) if read == 0 => {
   76|   828k|                        self $(.$reader)? .consume(1);
   77|   828k|                        *position += 1;
   78|   828k|                        return ReadTextResult::Markup(buf);
   79|       |                    }
   80|  1.91M|                    Some(i) => {
   81|  1.91M|                        buf.extend_from_slice(&available[..i]);
   82|  1.91M|
   83|  1.91M|                        let used = i + 1;
   84|  1.91M|                        self $(.$reader)? .consume(used);
   85|  1.91M|                        read += used as u64;
   86|  1.91M|
   87|  1.91M|                        *position += read;
   88|  1.91M|                        return ReadTextResult::UpToMarkup(&buf[start..]);
   89|       |                    }
   90|  20.5k|                    None => {
   91|  20.5k|                        buf.extend_from_slice(available);
   92|  20.5k|
   93|  20.5k|                        let used = available.len();
   94|  20.5k|                        self $(.$reader)? .consume(used);
   95|  20.5k|                        read += used as u64;
   96|  20.5k|                    }
   97|       |                }
   98|       |            }
   99|       |
  100|  72.7k|            *position += read;
  101|  72.7k|            ReadTextResult::UpToEof(&buf[start..])
  102|  2.81M|        }

_RINvMs5_NtCsa7QYSr9aLYT_9quick_xml6readerINtB6_6ReaderRShE15read_event_implQINtNtCs8f6x4lOZV33_5alloc3vec3VechEECs7S9FTsUwoO8_8oxrdfxml:
  897|  4.87M|    fn read_event_impl<'i, B>(&mut self, mut buf: B) -> Result<Event<'i>>
  898|  4.87M|    where
  899|  4.87M|        R: XmlSource<'i, B>,
  900|  4.87M|    {
  901|  5.79M|        read_event_impl!(self, buf, self.reader, read_until_close)
  902|  4.87M|    }
_RINvMs5_NtCsa7QYSr9aLYT_9quick_xml6readerINtB6_6ReaderRShE16read_until_closeQINtNtCs8f6x4lOZV33_5alloc3vec3VechEECs7S9FTsUwoO8_8oxrdfxml:
  906|  2.74M|    fn read_until_close<'i, B>(&mut self, buf: B) -> Result<Event<'i>>
  907|  2.74M|    where
  908|  2.74M|        R: XmlSource<'i, B>,
  909|  2.74M|    {
  910|  2.74M|        read_until_close!(self, buf, self.reader)
  911|  2.74M|    }
_RNvMs6_NtCsa7QYSr9aLYT_9quick_xml6readerNtB5_8BangType3new:
 1027|  2.91k|    const fn new(byte: Option<u8>) -> Result<Self> {
 1028|  2.91k|        Ok(match byte {
 1029|    679|            Some(b'[') => Self::CData,
 1030|  1.97k|            Some(b'-') => Self::Comment,
 1031|    186|            Some(b'D') | Some(b'd') => Self::DocType(0),
 1032|     74|            _ => return Err(Error::Syntax(SyntaxError::InvalidBangMarkup)),
 1033|       |        })
 1034|  2.91k|    }
_RNvMs6_NtCsa7QYSr9aLYT_9quick_xml6readerNtB5_8BangType5parse:
 1043|  2.83k|    fn parse<'b>(&mut self, buf: &[u8], chunk: &'b [u8]) -> Option<(&'b [u8], usize)> {
 1044|  2.83k|        match self {
 1045|       |            Self::Comment => {
 1046|  6.11k|                for i in memchr::memchr_iter(b'>', chunk) {
 1047|       |                    // Need to read at least 6 symbols (`!---->`) for properly finished comment
 1048|       |                    // <!----> - XML comment
 1049|       |                    //  012345 - i
 1050|  6.11k|                    if buf.len() + i > 4 {
 1051|  4.52k|                        if chunk[..i].ends_with(b"--") {
 1052|       |                            // We cannot strip last `--` from the buffer because we need it in case of
 1053|       |                            // check_comments enabled option. XML standard requires that comment
 1054|       |                            // will not end with `--->` sequence because this is a special case of
 1055|       |                            // `--` in the comment (https://www.w3.org/TR/xml11/#sec-comments)
 1056|  1.91k|                            return Some((&chunk[..i], i + 1)); // +1 for `>`
 1057|  2.60k|                        }
 1058|  2.60k|                        // End sequence `-|->` was splitted at |
 1059|  2.60k|                        //        buf --/   \-- chunk
 1060|  2.60k|                        if i == 1 && buf.ends_with(b"-") && chunk[0] == b'-' {
 1061|      0|                            return Some((&chunk[..i], i + 1)); // +1 for `>`
 1062|  2.60k|                        }
 1063|  2.60k|                        // End sequence `--|>` was splitted at |
 1064|  2.60k|                        //         buf --/   \-- chunk
 1065|  2.60k|                        if i == 0 && buf.ends_with(b"--") {
 1066|      0|                            return Some((&[], i + 1)); // +1 for `>`
 1067|  2.60k|                        }
 1068|  1.59k|                    }
 1069|       |                }
 1070|       |            }
 1071|       |            Self::CData => {
 1072|  1.47k|                for i in memchr::memchr_iter(b'>', chunk) {
 1073|  1.47k|                    if chunk[..i].ends_with(b"]]") {
 1074|    656|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
 1075|    823|                    }
 1076|    823|                    // End sequence `]|]>` was splitted at |
 1077|    823|                    //        buf --/   \-- chunk
 1078|    823|                    if i == 1 && buf.ends_with(b"]") && chunk[0] == b']' {
 1079|      0|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
 1080|    823|                    }
 1081|    823|                    // End sequence `]]|>` was splitted at |
 1082|    823|                    //         buf --/   \-- chunk
 1083|    823|                    if i == 0 && buf.ends_with(b"]]") {
 1084|      0|                        return Some((&[], i + 1)); // +1 for `>`
 1085|    823|                    }
 1086|       |                }
 1087|       |            }
 1088|    186|            Self::DocType(ref mut balance) => {
 1089|  9.29k|                for i in memchr::memchr2_iter(b'<', b'>', chunk) {
 1090|  9.29k|                    if chunk[i] == b'<' {
 1091|  4.74k|                        *balance += 1;
 1092|  4.74k|                    } else {
 1093|  4.54k|                        if *balance == 0 {
 1094|    102|                            return Some((&chunk[..i], i + 1)); // +1 for `>`
 1095|  4.44k|                        }
 1096|  4.44k|                        *balance -= 1;
 1097|       |                    }
 1098|       |                }
 1099|       |            }
 1100|       |        }
 1101|    167|        None
 1102|  2.83k|    }
_RNvMs6_NtCsa7QYSr9aLYT_9quick_xml6readerNtB5_8BangType6to_errCs7S9FTsUwoO8_8oxrdfxml:
 1104|    167|    const fn to_err(&self) -> Error {
 1105|    167|        match self {
 1106|     23|            Self::CData => Error::Syntax(SyntaxError::UnclosedCData),
 1107|     60|            Self::Comment => Error::Syntax(SyntaxError::UnclosedComment),
 1108|     84|            Self::DocType(_) => Error::Syntax(SyntaxError::UnclosedDoctype),
 1109|       |        }
 1110|    167|    }
_RNvXs_NtCsa7QYSr9aLYT_9quick_xml6readerNtB4_6ConfigNtNtCshZc3FwCJ069_4core7default7Default7default:
  211|  94.1k|    fn default() -> Self {
  212|  94.1k|        Self {
  213|  94.1k|            allow_unmatched_ends: false,
  214|  94.1k|            check_comments: false,
  215|  94.1k|            check_end_names: true,
  216|  94.1k|            expand_empty_elements: false,
  217|  94.1k|            trim_markup_names_in_closing_tags: true,
  218|  94.1k|            trim_text_start: false,
  219|  94.1k|            trim_text_end: false,
  220|  94.1k|        }
  221|  94.1k|    }
_RNvMs3_NtCsa7QYSr9aLYT_9quick_xml6readerINtB5_6ReaderRShE11from_readerB7_:
  697|  94.1k|    pub fn from_reader(reader: R) -> Self {
  698|  94.1k|        Self {
  699|  94.1k|            reader,
  700|  94.1k|            state: ReaderState::default(),
  701|  94.1k|        }
  702|  94.1k|    }
_RNvMs3_NtCsa7QYSr9aLYT_9quick_xml6readerINtB5_6ReaderRShE10config_mutB7_:
  710|  94.1k|    pub fn config_mut(&mut self) -> &mut Config {
  711|  94.1k|        &mut self.state.config
  712|  94.1k|    }
_RNvMs4_NtCsa7QYSr9aLYT_9quick_xml6readerINtB5_6ReaderRShE7decoderB7_:
  827|  2.73M|    pub const fn decoder(&self) -> Decoder {
  828|  2.73M|        self.state.decoder()
  829|  2.73M|    }
_RNvMs6_NtCsa7QYSr9aLYT_9quick_xml6readerNtB5_8BangType6to_errB7_:
 1104|    612|    const fn to_err(&self) -> Error {
 1105|    612|        match self {
 1106|    506|            Self::CData => Error::Syntax(SyntaxError::UnclosedCData),
 1107|      4|            Self::Comment => Error::Syntax(SyntaxError::UnclosedComment),
 1108|    102|            Self::DocType(_) => Error::Syntax(SyntaxError::UnclosedDoctype),
 1109|       |        }
 1110|    612|    }

_RINvMs_NtNtCsa7QYSr9aLYT_9quick_xml6reader9ns_readerINtB5_8NsReaderRShE15read_event_implQINtNtCs8f6x4lOZV33_5alloc3vec3VechEECs7S9FTsUwoO8_8oxrdfxml:
  148|  4.87M|    fn read_event_impl<'i, B>(&mut self, buf: B) -> Result<Event<'i>>
  149|  4.87M|    where
  150|  4.87M|        R: XmlSource<'i, B>,
  151|  4.87M|    {
  152|  4.87M|        self.pop();
  153|  4.87M|        let event = self.reader.read_event_impl(buf);
  154|  4.87M|        self.process_event(event)
  155|  4.87M|    }
_RNvMNtNtCsa7QYSr9aLYT_9quick_xml6reader9ns_readerINtB2_8NsReaderRShE10config_mutCs7S9FTsUwoO8_8oxrdfxml:
   48|  94.1k|    pub fn config_mut(&mut self) -> &mut Config {
   49|  94.1k|        self.reader.config_mut()
   50|  94.1k|    }
_RNvMNtNtCsa7QYSr9aLYT_9quick_xml6reader9ns_readerINtB2_8NsReaderRShE11from_readerCs7S9FTsUwoO8_8oxrdfxml:
   36|  94.1k|    pub fn from_reader(reader: R) -> Self {
   37|  94.1k|        Self::new(Reader::from_reader(reader))
   38|  94.1k|    }
_RNvMs0_NtNtCsa7QYSr9aLYT_9quick_xml6reader9ns_readerINtB5_8NsReaderRShE15resolve_elementCs7S9FTsUwoO8_8oxrdfxml:
  307|  1.99M|    pub fn resolve_element<'n>(&self, name: QName<'n>) -> (ResolveResult, LocalName<'n>) {
  308|  1.99M|        self.ns_resolver.resolve(name, true)
  309|  1.99M|    }
_RNvMs0_NtNtCsa7QYSr9aLYT_9quick_xml6reader9ns_readerINtB5_8NsReaderRShE17resolve_attributeCs7S9FTsUwoO8_8oxrdfxml:
  377|   483k|    pub fn resolve_attribute<'n>(&self, name: QName<'n>) -> (ResolveResult, LocalName<'n>) {
  378|   483k|        self.ns_resolver.resolve(name, false)
  379|   483k|    }
_RNvMs1_NtNtCsa7QYSr9aLYT_9quick_xml6reader9ns_readerINtB5_8NsReaderRShE15read_event_intoCs7S9FTsUwoO8_8oxrdfxml:
  436|  4.87M|    pub fn read_event_into<'b>(&mut self, buf: &'b mut Vec<u8>) -> Result<Event<'b>> {
  437|  4.87M|        self.read_event_impl(buf)
  438|  4.87M|    }
_RNvMs_NtNtCsa7QYSr9aLYT_9quick_xml6reader9ns_readerINtB4_8NsReaderRShE13process_eventCs7S9FTsUwoO8_8oxrdfxml:
  164|  4.87M|    pub(super) fn process_event<'i>(&mut self, event: Result<Event<'i>>) -> Result<Event<'i>> {
  165|  4.83M|        match event {
  166|  2.05M|            Ok(Event::Start(e)) => {
  167|  2.05M|                self.ns_resolver.push(&e)?;
  168|  2.05M|                Ok(Event::Start(e))
  169|       |            }
  170|      0|            Ok(Event::Empty(e)) => {
  171|      0|                self.ns_resolver.push(&e)?;
  172|       |                // notify next `read_event_impl()` invocation that it needs to pop this
  173|       |                // namespace scope
  174|      0|                self.pending_pop = true;
  175|      0|                Ok(Event::Empty(e))
  176|       |            }
  177|   617k|            Ok(Event::End(e)) => {
  178|   617k|                // notify next `read_event_impl()` invocation that it needs to pop this
  179|   617k|                // namespace scope
  180|   617k|                self.pending_pop = true;
  181|   617k|                Ok(Event::End(e))
  182|       |            }
  183|  2.19M|            e => e,
  184|       |        }
  185|  4.87M|    }
_RNvMs_NtNtCsa7QYSr9aLYT_9quick_xml6reader9ns_readerINtB4_8NsReaderRShE3newCs7S9FTsUwoO8_8oxrdfxml:
  140|  94.1k|    fn new(reader: Reader<R>) -> Self {
  141|  94.1k|        Self {
  142|  94.1k|            reader,
  143|  94.1k|            ns_resolver: NamespaceResolver::default(),
  144|  94.1k|            pending_pop: false,
  145|  94.1k|        }
  146|  94.1k|    }
_RNvMs_NtNtCsa7QYSr9aLYT_9quick_xml6reader9ns_readerINtB4_8NsReaderRShE3popCs7S9FTsUwoO8_8oxrdfxml:
  157|  4.87M|    pub(super) fn pop(&mut self) {
  158|  4.87M|        if self.pending_pop {
  159|   617k|            self.ns_resolver.pop();
  160|   617k|            self.pending_pop = false;
  161|  4.25M|        }
  162|  4.87M|    }
_RNvXs4_NtNtCsa7QYSr9aLYT_9quick_xml6reader9ns_readerINtB5_8NsReaderRShENtNtNtCshZc3FwCJ069_4core3ops5deref5Deref5derefCs7S9FTsUwoO8_8oxrdfxml:
  920|  2.73M|    fn deref(&self) -> &Self::Target {
  921|  2.73M|        &self.reader
  922|  2.73M|    }

_RNvMNtNtCsa7QYSr9aLYT_9quick_xml6reader5stateNtB2_11ReaderState20close_expanded_emptyCs7S9FTsUwoO8_8oxrdfxml:
  307|  92.0k|    pub fn close_expanded_empty(&mut self) -> BytesEnd<'static> {
  308|  92.0k|        self.state = ParseState::InsideText;
  309|  92.0k|        let name = self
  310|  92.0k|            .opened_buffer
  311|  92.0k|            .split_off(self.opened_starts.pop().unwrap());
  312|  92.0k|        BytesEnd::wrap(name.into())
  313|  92.0k|    }
_RNvMNtNtCsa7QYSr9aLYT_9quick_xml6reader5stateNtB2_11ReaderState9emit_text:
   60|  1.99M|    pub fn emit_text<'b>(&mut self, bytes: &'b [u8]) -> BytesText<'b> {
   61|  1.99M|        let mut content = bytes;
   62|  1.99M|
   63|  1.99M|        if self.config.trim_text_end {
   64|      0|            // Skip the ending '<'
   65|      0|            let len = bytes
   66|      0|                .iter()
   67|      0|                .rposition(|&b| !is_whitespace(b))
   68|      0|                .map_or(0, |p| p + 1);
   69|      0|            content = &bytes[..len];
   70|  1.99M|        }
   71|  1.99M|        BytesText::wrap(content, self.decoder())
   72|  1.99M|    }
_RNvMNtNtCsa7QYSr9aLYT_9quick_xml6reader5stateNtB2_11ReaderState9emit_bang:
   81|  2.67k|    pub fn emit_bang<'b>(&mut self, bang_type: BangType, buf: &'b [u8]) -> Result<Event<'b>> {
   82|  2.67k|        debug_assert_eq!(
   83|      0|            buf.first(),
   84|       |            Some(&b'!'),
   85|      0|            "CDATA, comment or DOCTYPE should start from '!'"
   86|       |        );
   87|       |
   88|  2.67k|        let uncased_starts_with = |string: &[u8], prefix: &[u8]| {
   89|       |            string.len() >= prefix.len() && string[..prefix.len()].eq_ignore_ascii_case(prefix)
   90|       |        };
   91|       |
   92|  2.67k|        let len = buf.len();
   93|    656|        match bang_type {
   94|  1.91k|            BangType::Comment if buf.starts_with(b"!--") => {
   95|  1.91k|                debug_assert!(buf.ends_with(b"--"));
   96|  1.91k|                if self.config.check_comments {
   97|       |                    // search if '--' not in comments
   98|      0|                    let mut haystack = &buf[3..len - 2];
   99|      0|                    let mut off = 0;
  100|      0|                    while let Some(p) = memchr::memchr(b'-', haystack) {
  101|      0|                        off += p + 1;
  102|      0|                        // if next byte after `-` is also `-`, return an error
  103|      0|                        if buf[3 + off] == b'-' {
  104|       |                            // Explanation of the magic:
  105|       |                            //
  106|       |                            // - `self.offset`` just after `>`,
  107|       |                            // - `buf` contains `!-- con--tent --`
  108|       |                            // - `p` is counted from byte after `<!--`
  109|       |                            //
  110|       |                            // <!-- con--tent -->:
  111|       |                            //  ~~~~~~~~~~~~~~~~ : - buf
  112|       |                            //   : ===========   : - zone of search (possible values of `p`)
  113|       |                            //   : |---p         : - p is counted from | (| is 0)
  114|       |                            //   : :   :         ^ - self.offset
  115|       |                            //   ^ :   :           - self.offset - len
  116|       |                            //     ^   :           - self.offset - len + 2
  117|       |                            //         ^           - self.offset - len + 2 + p
  118|      0|                            self.last_error_offset = self.offset - len as u64 + 2 + p as u64;
  119|      0|                            return Err(Error::IllFormed(IllFormedError::DoubleHyphenInComment));
  120|      0|                        }
  121|      0|                        // Continue search after single `-` (+1 to skip it)
  122|      0|                        haystack = &haystack[p + 1..];
  123|       |                    }
  124|  1.91k|                }
  125|  1.91k|                Ok(Event::Comment(BytesText::wrap(
  126|  1.91k|                    // Cut of `!--` and `--` from start and end
  127|  1.91k|                    &buf[3..len - 2],
  128|  1.91k|                    self.decoder(),
  129|  1.91k|                )))
  130|       |            }
  131|       |            // XML requires uppercase only:
  132|       |            // https://www.w3.org/TR/xml11/#sec-cdata-sect
  133|       |            // Even HTML5 required uppercase only:
  134|       |            // https://html.spec.whatwg.org/multipage/parsing.html#markup-declaration-open-state
  135|    656|            BangType::CData if buf.starts_with(b"![CDATA[") => {
  136|    150|                debug_assert!(buf.ends_with(b"]]"));
  137|    150|                Ok(Event::CData(BytesCData::wrap(
  138|    150|                    // Cut of `![CDATA[` and `]]` from start and end
  139|    150|                    &buf[8..len - 2],
  140|    150|                    self.decoder(),
  141|    150|                )))
  142|       |            }
  143|       |            // XML requires uppercase only, but we will check that on validation stage:
  144|       |            // https://www.w3.org/TR/xml11/#sec-prolog-dtd
  145|       |            // HTML5 allows mixed case for doctype declarations:
  146|       |            // https://html.spec.whatwg.org/multipage/parsing.html#markup-declaration-open-state
  147|    102|            BangType::DocType(0) if uncased_starts_with(buf, b"!DOCTYPE") => {
  148|      0|                match buf[8..].iter().position(|&b| !is_whitespace(b)) {
  149|      0|                    Some(start) => Ok(Event::DocType(BytesText::wrap(
  150|      0|                        // Cut of `!DOCTYPE` and any number of spaces from start
  151|      0|                        &buf[8 + start..],
  152|      0|                        self.decoder(),
  153|      0|                    ))),
  154|       |                    None => {
  155|       |                        // Because we here, we at least read `<!DOCTYPE>` and offset after `>`.
  156|       |                        // We want report error at place where name is expected - this is just
  157|       |                        // before `>`
  158|      0|                        self.last_error_offset = self.offset - 1;
  159|      0|                        return Err(Error::IllFormed(IllFormedError::MissingDoctypeName));
  160|       |                    }
  161|       |                }
  162|       |            }
  163|       |            _ => {
  164|       |                // <!....>
  165|       |                //  ^^^^^ - `buf` does not contain `<` and `>`, but `self.offset` is after `>`.
  166|       |                // ^------- We report error at that position, so we need to subtract 2 and buf len
  167|    612|                self.last_error_offset = self.offset - len as u64 - 2;
  168|    612|                Err(bang_type.to_err())
  169|       |            }
  170|       |        }
  171|  2.67k|    }
_RNCNvMNtNtCsa7QYSr9aLYT_9quick_xml6reader5stateNtB4_11ReaderState9emit_bang0B8_:
   88|    102|        let uncased_starts_with = |string: &[u8], prefix: &[u8]| {
   89|    102|            string.len() >= prefix.len() && string[..prefix.len()].eq_ignore_ascii_case(prefix)
   90|    102|        };
_RNvMNtNtCsa7QYSr9aLYT_9quick_xml6reader5stateNtB2_11ReaderState8emit_end:
  177|   545k|    pub fn emit_end<'b>(&mut self, buf: &'b [u8]) -> Result<Event<'b>> {
  178|   545k|        debug_assert_eq!(
  179|      0|            buf.first(),
  180|       |            Some(&b'/'),
  181|      0|            "closing tag should start from '/'"
  182|       |        );
  183|       |
  184|       |        // Strip the `/` character. `content` contains data between `</` and `>`
  185|   545k|        let content = &buf[1..];
  186|       |        // XML standard permits whitespaces after the markup name in closing tags.
  187|       |        // Let's strip them from the buffer before comparing tag names.
  188|   545k|        let name = if self.config.trim_markup_names_in_closing_tags {
  189|   545k|            if let Some(pos_end_name) = content.iter().rposition(|&b| !is_whitespace(b)) {
  190|   469k|                &content[..pos_end_name + 1]
  191|       |            } else {
  192|  76.6k|                content
  193|       |            }
  194|       |        } else {
  195|      0|            content
  196|       |        };
  197|       |
  198|   545k|        let decoder = self.decoder();
  199|   545k|
  200|   545k|        // Get the index in self.opened_buffer of the name of the last opened tag
  201|   545k|        match self.opened_starts.pop() {
  202|   538k|            Some(start) => {
  203|   538k|                if self.config.check_end_names {
  204|   538k|                    let expected = &self.opened_buffer[start..];
  205|   538k|                    if name != expected {
  206|  13.1k|                        let expected = decoder.decode(expected).unwrap_or_default().into_owned();
  207|  13.1k|                        // #513: In order to allow error recovery we should drop content of the buffer
  208|  13.1k|                        self.opened_buffer.truncate(start);
  209|  13.1k|
  210|  13.1k|                        // Report error at start of the end tag at `<` character
  211|  13.1k|                        // -2 for `<` and `>`
  212|  13.1k|                        self.last_error_offset = self.offset - buf.len() as u64 - 2;
  213|  13.1k|                        return Err(Error::IllFormed(IllFormedError::MismatchedEndTag {
  214|  13.1k|                            expected,
  215|  13.1k|                            found: decoder.decode(name).unwrap_or_default().into_owned(),
  216|  13.1k|                        }));
  217|   525k|                    }
  218|      0|                }
  219|       |
  220|   525k|                self.opened_buffer.truncate(start);
  221|       |            }
  222|       |            None => {
  223|  7.29k|                if !self.config.allow_unmatched_ends {
  224|       |                    // Report error at start of the end tag at `<` character
  225|       |                    // -2 for `<` and `>`
  226|  7.29k|                    self.last_error_offset = self.offset - buf.len() as u64 - 2;
  227|  7.29k|                    return Err(Error::IllFormed(IllFormedError::UnmatchedEndTag(
  228|  7.29k|                        decoder.decode(name).unwrap_or_default().into_owned(),
  229|  7.29k|                    )));
  230|      0|                }
  231|       |            }
  232|       |        }
  233|       |
  234|   525k|        Ok(Event::End(BytesEnd::wrap(name.into())))
  235|   545k|    }
_RNCNvMNtNtCsa7QYSr9aLYT_9quick_xml6reader5stateNtB4_11ReaderState8emit_end0B8_:
  189|   494k|            if let Some(pos_end_name) = content.iter().rposition(|&b| !is_whitespace(b)) {
_RNvMNtNtCsa7QYSr9aLYT_9quick_xml6reader5stateNtB2_11ReaderState18emit_question_mark:
  241|   122k|    pub fn emit_question_mark<'b>(&mut self, buf: &'b [u8]) -> Result<Event<'b>> {
  242|   122k|        debug_assert!(buf.len() > 0);
  243|   122k|        debug_assert_eq!(buf[0], b'?');
  244|       |
  245|   122k|        let len = buf.len();
  246|   122k|        // We accept at least <??>
  247|   122k|        //                     ~~ - len = 2
  248|   122k|        if len > 1 && buf[len - 1] == b'?' {
  249|       |            // Cut of `?` and `?` from start and end
  250|   122k|            let content = &buf[1..len - 1];
  251|   122k|            let len = content.len();
  252|   122k|
  253|   122k|            if content.starts_with(b"xml") && (len == 3 || is_whitespace(content[3])) {
  254|  98.4k|                let event = BytesDecl::from_start(BytesStart::wrap(content, 3));
  255|  98.4k|
  256|  98.4k|                // Try getting encoding from the declaration event
  257|  98.4k|                #[cfg(feature = "encoding")]
  258|  98.4k|                if self.encoding.can_be_refined() {
  259|  98.4k|                    if let Some(encoding) = event.encoder() {
  260|  98.4k|                        self.encoding = EncodingRef::XmlDetected(encoding);
  261|  98.4k|                    }
  262|  98.4k|                }
  263|  98.4k|
  264|  98.4k|                Ok(Event::Decl(event))
  265|       |            } else {
  266|  24.0k|                Ok(Event::PI(BytesPI::wrap(content, name_len(content))))
  267|       |            }
  268|       |        } else {
  269|       |            // <?....EOF
  270|       |            //  ^^^^^ - `buf` does not contains `<`, but we want to report error at `<`,
  271|       |            //          so we move offset to it (-2 for `<` and `>`)
  272|     46|            self.last_error_offset = self.offset - len as u64 - 2;
  273|     46|            Err(Error::Syntax(SyntaxError::UnclosedPIOrXmlDecl))
  274|       |        }
  275|   122k|    }
_RNvMNtNtCsa7QYSr9aLYT_9quick_xml6reader5stateNtB2_11ReaderState10emit_start:
  281|  2.05M|    pub fn emit_start<'b>(&mut self, content: &'b [u8]) -> Event<'b> {
  282|  2.05M|        if let Some(content) = content.strip_suffix(b"/") {
  283|       |            // This is self-closed tag `<something/>`
  284|  92.0k|            let event = BytesStart::wrap(content, name_len(content));
  285|  92.0k|
  286|  92.0k|            if self.config.expand_empty_elements {
  287|  92.0k|                self.state = ParseState::InsideEmpty;
  288|  92.0k|                self.opened_starts.push(self.opened_buffer.len());
  289|  92.0k|                self.opened_buffer.extend(event.name().as_ref());
  290|  92.0k|                Event::Start(event)
  291|       |            } else {
  292|      0|                Event::Empty(event)
  293|       |            }
  294|       |        } else {
  295|  1.96M|            let event = BytesStart::wrap(content, name_len(content));
  296|  1.96M|
  297|  1.96M|            // #514: Always store names event when .check_end_names == false,
  298|  1.96M|            // because checks can be temporary disabled and when they would be
  299|  1.96M|            // enabled, we should have that information
  300|  1.96M|            self.opened_starts.push(self.opened_buffer.len());
  301|  1.96M|            self.opened_buffer.extend(event.name().as_ref());
  302|  1.96M|            Event::Start(event)
  303|       |        }
  304|  2.05M|    }
_RNvMNtNtCsa7QYSr9aLYT_9quick_xml6reader5stateNtB2_11ReaderState7decoder:
  324|  5.27M|    pub const fn decoder(&self) -> Decoder {
  325|  5.27M|        Decoder {
  326|  5.27M|            #[cfg(feature = "encoding")]
  327|  5.27M|            encoding: self.encoding.encoding(),
  328|  5.27M|        }
  329|  5.27M|    }
_RNvXs_NtNtCsa7QYSr9aLYT_9quick_xml6reader5stateNtB4_11ReaderStateNtNtCshZc3FwCJ069_4core7default7Default7default:
  333|  94.1k|    fn default() -> Self {
  334|  94.1k|        Self {
  335|  94.1k|            offset: 0,
  336|  94.1k|            last_error_offset: 0,
  337|  94.1k|            state: ParseState::Init,
  338|  94.1k|            config: Config::default(),
  339|  94.1k|            opened_buffer: Vec::new(),
  340|  94.1k|            opened_starts: Vec::new(),
  341|  94.1k|
  342|  94.1k|            #[cfg(feature = "encoding")]
  343|  94.1k|            encoding: EncodingRef::Implicit(UTF_8),
  344|  94.1k|        }
  345|  94.1k|    }

_RNvNtCsa7QYSr9aLYT_9quick_xml5utils17write_byte_string:
   32|  10.2k|pub fn write_byte_string(f: &mut Formatter, byte_string: &[u8]) -> fmt::Result {
   33|  10.2k|    write!(f, "\"")?;
   34|   127k|    for b in byte_string {
   35|   116k|        match *b {
   36|  98.0k|            32..=33 | 35..=126 => write!(f, "{}", *b as char)?,
   37|  1.88k|            34 => write!(f, "\\\"")?,
   38|  23.3k|            _ => write!(f, "{:#02X}", b)?,
   39|       |        }
   40|       |    }
   41|  10.2k|    write!(f, "\"")?;
   42|  10.2k|    Ok(())
   43|  10.2k|}
_RNvNtCsa7QYSr9aLYT_9quick_xml5utils13is_whitespaceB3_:
  278|  36.5M|pub const fn is_whitespace(b: u8) -> bool {
  279|  36.5M|    matches!(b, b' ' | b'\r' | b'\n' | b'\t')
  280|  36.5M|}
_RNvNtCsa7QYSr9aLYT_9quick_xml5utils8name_lenB3_:
  287|  2.07M|pub const fn name_len(mut bytes: &[u8]) -> usize {
  288|  2.07M|    // Note: A pattern matching based approach (instead of indexing) allows
  289|  2.07M|    // making the function const.
  290|  2.07M|    let mut len = 0;
  291|  13.7M|    while let [first, rest @ ..] = bytes {
  292|  12.4M|        if is_whitespace(*first) {
  293|   748k|            break;
  294|  11.6M|        }
  295|  11.6M|        len += 1;
  296|  11.6M|        bytes = rest;
  297|       |    }
  298|  2.07M|    len
  299|  2.07M|}

_RNvMNtCsa7QYSr9aLYT_9quick_xml6writerINtB2_6WriterINtNtCs8f6x4lOZV33_5alloc3vec3VechEE15new_with_indentCsmXm2WBU6hV_7rdf_xml:
   80|  46.1k|    pub fn new_with_indent(inner: W, indent_char: u8, indent_size: usize) -> Writer<W> {
   81|  46.1k|        Writer {
   82|  46.1k|            writer: inner,
   83|  46.1k|            indent: Some(Indentation::new(indent_char, indent_size)),
   84|  46.1k|        }
   85|  46.1k|    }
_RINvMs_NtCsa7QYSr9aLYT_9quick_xml6writerINtB5_6WriterINtNtCs8f6x4lOZV33_5alloc3vec3VechEE11write_eventNtNtB7_6events5EventECs7S9FTsUwoO8_8oxrdfxml:
  195|  1.10M|    pub fn write_event<'a, E: Into<Event<'a>>>(&mut self, event: E) -> Result<()> {
  196|  1.10M|        let mut next_should_line_break = true;
  197|  1.10M|        let result = match event.into() {
  198|   491k|            Event::Start(e) => {
  199|   491k|                let result = self.write_wrapped(b"<", &e, b">");
  200|   491k|                if let Some(i) = self.indent.as_mut() {
  201|   456k|                    i.grow();
  202|   456k|                }
  203|   491k|                result
  204|       |            }
  205|   465k|            Event::End(e) => {
  206|   465k|                if let Some(i) = self.indent.as_mut() {
  207|   456k|                    i.shrink();
  208|   456k|                }
  209|   465k|                self.write_wrapped(b"</", &e, b">")
  210|       |            }
  211|  14.8k|            Event::Empty(e) => self.write_wrapped(b"<", &e, b"/>"),
  212|  84.4k|            Event::Text(e) => {
  213|  84.4k|                next_should_line_break = false;
  214|  84.4k|                self.write(&e)
  215|       |            }
  216|      0|            Event::Comment(e) => self.write_wrapped(b"<!--", &e, b"-->"),
  217|      0|            Event::CData(e) => {
  218|      0|                next_should_line_break = false;
  219|      0|                self.write(b"<![CDATA[")?;
  220|      0|                self.write(&e)?;
  221|      0|                self.write(b"]]>")
  222|       |            }
  223|  46.1k|            Event::Decl(e) => self.write_wrapped(b"<?", &e, b"?>"),
  224|      0|            Event::PI(e) => self.write_wrapped(b"<?", &e, b"?>"),
  225|      0|            Event::DocType(e) => self.write_wrapped(b"<!DOCTYPE ", &e, b">"),
  226|      0|            Event::Eof => Ok(()),
  227|       |        };
  228|  1.10M|        if let Some(i) = self.indent.as_mut() {
  229|  1.03M|            i.should_line_break = next_should_line_break;
  230|  1.03M|        }
  231|  1.10M|        result
  232|  1.10M|    }
_RNvMNtCsa7QYSr9aLYT_9quick_xml6writerINtB2_6WriterINtNtCs8f6x4lOZV33_5alloc3vec3VechEE10into_innerCs7S9FTsUwoO8_8oxrdfxml:
   88|  46.1k|    pub fn into_inner(self) -> W {
   89|  46.1k|        self.writer
   90|  46.1k|    }
_RNvMNtCsa7QYSr9aLYT_9quick_xml6writerINtB2_6WriterINtNtCs8f6x4lOZV33_5alloc3vec3VechEE3newCs7S9FTsUwoO8_8oxrdfxml:
   72|  2.41k|    pub const fn new(inner: W) -> Writer<W> {
   73|  2.41k|        Writer {
   74|  2.41k|            writer: inner,
   75|  2.41k|            indent: None,
   76|  2.41k|        }
   77|  2.41k|    }
_RNvMs_NtCsa7QYSr9aLYT_9quick_xml6writerINtB4_6WriterINtNtCs8f6x4lOZV33_5alloc3vec3VechEE13write_wrappedCs7S9FTsUwoO8_8oxrdfxml:
  241|  1.01M|    fn write_wrapped(&mut self, before: &[u8], value: &[u8], after: &[u8]) -> Result<()> {
  242|  1.01M|        if let Some(ref i) = self.indent {
  243|   973k|            if i.should_line_break {
  244|   865k|                self.writer.write_all(b"\n")?;
  245|   865k|                self.writer.write_all(i.current())?;
  246|   108k|            }
  247|  43.5k|        }
  248|  1.01M|        self.write(before)?;
  249|  1.01M|        self.write(value)?;
  250|  1.01M|        self.write(after)?;
  251|  1.01M|        Ok(())
  252|  1.01M|    }
_RNvMs_NtCsa7QYSr9aLYT_9quick_xml6writerINtB4_6WriterINtNtCs8f6x4lOZV33_5alloc3vec3VechEE5writeCs7S9FTsUwoO8_8oxrdfxml:
  236|  3.13M|    pub(crate) fn write(&mut self, value: &[u8]) -> Result<()> {
  237|  3.13M|        self.writer.write_all(value).map_err(Into::into)
  238|  3.13M|    }
_RNvMs2_NtCsa7QYSr9aLYT_9quick_xml6writerNtB5_11Indentation3new:
  611|  46.1k|    pub fn new(indent_char: u8, indent_size: usize) -> Self {
  612|  46.1k|        Self {
  613|  46.1k|            should_line_break: false,
  614|  46.1k|            indent_char,
  615|  46.1k|            indent_size,
  616|  46.1k|            indents: vec![indent_char; 128],
  617|  46.1k|            current_indent_len: 0, // invariant - needs to remain less than indents.len()
  618|  46.1k|        }
  619|  46.1k|    }
_RNvMs2_NtCsa7QYSr9aLYT_9quick_xml6writerNtB5_11Indentation4grow:
  622|   456k|    pub fn grow(&mut self) {
  623|   456k|        self.current_indent_len += self.indent_size;
  624|   456k|        self.ensure(self.current_indent_len);
  625|   456k|    }
_RNvMs2_NtCsa7QYSr9aLYT_9quick_xml6writerNtB5_11Indentation6shrink:
  628|   456k|    pub fn shrink(&mut self) {
  629|   456k|        self.current_indent_len = self.current_indent_len.saturating_sub(self.indent_size);
  630|   456k|    }
_RNvMs2_NtCsa7QYSr9aLYT_9quick_xml6writerNtB5_11Indentation7current:
  633|   865k|    pub fn current(&self) -> &[u8] {
  634|   865k|        &self.indents[..self.current_indent_len]
  635|   865k|    }
_RNvMs2_NtCsa7QYSr9aLYT_9quick_xml6writerNtB5_11Indentation6ensure:
  644|   456k|    fn ensure(&mut self, new_len: usize) {
  645|   456k|        if self.indents.len() < new_len {
  646|      0|            self.indents.resize(new_len, self.indent_char);
  647|   456k|        }
  648|   456k|    }

_RINvXs2_NtNtCs3NXzWtX11bv_4rand13distributions7integerNtB8_8StandardINtNtB8_12distribution12DistributionoE6sampleNtNtNtBa_4rngs6thread9ThreadRngECs7S9FTsUwoO8_8oxrdfxml:
   51|   827k|    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u128 {
   52|   827k|        // Use LE; we explicitly generate one value before the next.
   53|   827k|        let x = u128::from(rng.next_u64());
   54|   827k|        let y = u128::from(rng.next_u64());
   55|   827k|        (y << 64) | x
   56|   827k|    }

_RINvCs3NXzWtX11bv_4rand6randomoECs7S9FTsUwoO8_8oxrdfxml:
  183|   827k|pub fn random<T>() -> T
  184|   827k|where Standard: Distribution<T> {
  185|   827k|    thread_rng().gen()
  186|   827k|}

_RINvYNtNtNtCs3NXzWtX11bv_4rand4rngs6thread9ThreadRngNtNtB9_3rng3Rng3genoECs7S9FTsUwoO8_8oxrdfxml:
   93|   827k|    fn gen<T>(&mut self) -> T
   94|   827k|    where Standard: Distribution<T> {
   95|   827k|        Standard.sample(self)
   96|   827k|    }

_RNvXs_NtNtNtCs3NXzWtX11bv_4rand4rngs7adapter9reseedingINtB4_12ReseedingRngNtNtCs7a667o4NB2d_11rand_chacha6chacha12ChaCha12CoreNtNtCs1atBeED3HKw_9rand_core2os5OsRngENtB24_7RngCore8next_u64Cs7S9FTsUwoO8_8oxrdfxml:
  124|  1.65M|    fn next_u64(&mut self) -> u64 {
  125|  1.65M|        self.0.next_u64()
  126|  1.65M|    }
_RNvMNtNtNtCs3NXzWtX11bv_4rand4rngs7adapter9reseedingINtB2_12ReseedingRngNtNtCs7a667o4NB2d_11rand_chacha6chacha12ChaCha12CoreNtNtCs1atBeED3HKw_9rand_core2os5OsRngE3newB8_:
  101|      1|    pub fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  102|      1|        ReseedingRng(BlockRng::new(ReseedingCore::new(rng, threshold, reseeder)))
  103|      1|    }
_RNvXs2_NtNtNtCs3NXzWtX11bv_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs7a667o4NB2d_11rand_chacha6chacha12ChaCha12CoreNtNtCs1atBeED3HKw_9rand_core2os5OsRngENtNtB26_5block12BlockRngCore8generateBb_:
  173|  51.7k|    fn generate(&mut self, results: &mut Self::Results) {
  174|  51.7k|        let global_fork_counter = fork::get_fork_counter();
  175|  51.7k|        if self.bytes_until_reseed <= 0 || self.is_forked(global_fork_counter) {
  176|       |            // We get better performance by not calling only `reseed` here
  177|       |            // and continuing with the rest of the function, but by directly
  178|       |            // returning from a non-inlined function.
  179|    202|            return self.reseed_and_generate(results, global_fork_counter);
  180|  51.5k|        }
  181|  51.5k|        let num_bytes = results.as_ref().len() * size_of::<Self::Item>();
  182|  51.5k|        self.bytes_until_reseed -= num_bytes as i64;
  183|  51.5k|        self.inner.generate(results);
  184|  51.7k|    }
_RNvMs3_NtNtNtCs3NXzWtX11bv_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs7a667o4NB2d_11rand_chacha6chacha12ChaCha12CoreNtNtCs1atBeED3HKw_9rand_core2os5OsRngE3newBb_:
  193|      1|    fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  194|       |        use ::core::i64::MAX;
  195|      1|        fork::register_fork_handler();
  196|       |
  197|       |        // Because generating more values than `i64::MAX` takes centuries on
  198|       |        // current hardware, we just clamp to that value.
  199|       |        // Also we set a threshold of 0, which indicates no limit, to that
  200|       |        // value.
  201|      1|        let threshold = if threshold == 0 {
  202|      0|            MAX
  203|      1|        } else if threshold <= MAX as u64 {
  204|      1|            threshold as i64
  205|       |        } else {
  206|      0|            MAX
  207|       |        };
  208|       |
  209|      1|        ReseedingCore {
  210|      1|            inner: rng,
  211|      1|            reseeder,
  212|      1|            threshold: threshold as i64,
  213|      1|            bytes_until_reseed: threshold as i64,
  214|      1|            fork_counter: 0,
  215|      1|        }
  216|      1|    }
_RNvMs3_NtNtNtCs3NXzWtX11bv_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs7a667o4NB2d_11rand_chacha6chacha12ChaCha12CoreNtNtCs1atBeED3HKw_9rand_core2os5OsRngE6reseedBb_:
  219|    202|    fn reseed(&mut self) -> Result<(), Error> {
  220|    202|        R::from_rng(&mut self.reseeder).map(|result| {
  221|       |            self.bytes_until_reseed = self.threshold;
  222|       |            self.inner = result
  223|    202|        })
  224|    202|    }
_RNCNvMs3_NtNtNtCs3NXzWtX11bv_4rand4rngs7adapter9reseedingINtB7_13ReseedingCoreNtNtCs7a667o4NB2d_11rand_chacha6chacha12ChaCha12CoreNtNtCs1atBeED3HKw_9rand_core2os5OsRngE6reseed0Bd_:
  220|    202|        R::from_rng(&mut self.reseeder).map(|result| {
  221|    202|            self.bytes_until_reseed = self.threshold;
  222|    202|            self.inner = result
  223|    202|        })
_RNvMs3_NtNtNtCs3NXzWtX11bv_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs7a667o4NB2d_11rand_chacha6chacha12ChaCha12CoreNtNtCs1atBeED3HKw_9rand_core2os5OsRngE9is_forkedBb_:
  226|  51.7k|    fn is_forked(&self, global_fork_counter: usize) -> bool {
  227|  51.7k|        // In theory, on 32-bit platforms, it is possible for
  228|  51.7k|        // `global_fork_counter` to wrap around after ~4e9 forks.
  229|  51.7k|        //
  230|  51.7k|        // This check will detect a fork in the normal case where
  231|  51.7k|        // `fork_counter < global_fork_counter`, and also when the difference
  232|  51.7k|        // between both is greater than `isize::MAX` (wrapped around).
  233|  51.7k|        //
  234|  51.7k|        // It will still fail to detect a fork if there have been more than
  235|  51.7k|        // `isize::MAX` forks, without any reseed in between. Seems unlikely
  236|  51.7k|        // enough.
  237|  51.7k|        (self.fork_counter.wrapping_sub(global_fork_counter) as isize) < 0
  238|  51.7k|    }
_RNvMs3_NtNtNtCs3NXzWtX11bv_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs7a667o4NB2d_11rand_chacha6chacha12ChaCha12CoreNtNtCs1atBeED3HKw_9rand_core2os5OsRngE19reseed_and_generateBb_:
  241|    202|    fn reseed_and_generate(
  242|    202|        &mut self, results: &mut <Self as BlockRngCore>::Results, global_fork_counter: usize,
  243|    202|    ) {
  244|    202|        #![allow(clippy::if_same_then_else)] // false positive
  245|    202|        if self.is_forked(global_fork_counter) {
  246|      0|            info!("Fork detected, reseeding RNG");
  247|    202|        } else {
  248|    202|            trace!("Reseeding RNG (periodic reseed)");
  249|    202|        }
  250|       |
  251|    202|        let num_bytes = results.as_ref().len() * size_of::<<R as BlockRngCore>::Item>();
  252|       |
  253|    202|        if let Err(e) = self.reseed() {
  254|      0|            warn!("Reseeding RNG failed: {}", e);
  255|      0|            let _ = e;
  256|    202|        }
  257|    202|        self.fork_counter = global_fork_counter;
  258|    202|
  259|    202|        self.bytes_until_reseed = self.threshold - num_bytes as i64;
  260|    202|        self.inner.generate(results);
  261|    202|    }
_RNvNtNtNtNtCs3NXzWtX11bv_4rand4rngs7adapter9reseeding4fork16get_fork_counter:
  307|  51.7k|    pub fn get_fork_counter() -> usize {
  308|  51.7k|        RESEEDING_RNG_FORK_COUNTER.load(Ordering::Relaxed)
  309|  51.7k|    }
_RNvNtNtNtNtCs3NXzWtX11bv_4rand4rngs7adapter9reseeding4fork21register_fork_handler:
  317|      1|    pub fn register_fork_handler() {
  318|       |        static REGISTER: Once = Once::new();
  319|      1|        REGISTER.call_once(|| {
  320|       |            // Bump the counter before and after forking (see #1169):
  321|       |            let ret = unsafe { libc::pthread_atfork(
  322|       |                Some(fork_handler),
  323|       |                Some(fork_handler),
  324|       |                Some(fork_handler),
  325|       |            ) };
  326|       |            if ret != 0 {
  327|       |                panic!("libc::pthread_atfork failed with code {}", ret);
  328|       |            }
  329|      1|        });
  330|      1|    }
_RNCNvNtNtNtNtCs3NXzWtX11bv_4rand4rngs7adapter9reseeding4fork21register_fork_handler0Bb_:
  319|      1|        REGISTER.call_once(|| {
  320|      1|            // Bump the counter before and after forking (see #1169):
  321|      1|            let ret = unsafe { libc::pthread_atfork(
  322|      1|                Some(fork_handler),
  323|      1|                Some(fork_handler),
  324|      1|                Some(fork_handler),
  325|      1|            ) };
  326|      1|            if ret != 0 {
  327|      0|                panic!("libc::pthread_atfork failed with code {}", ret);
  328|      1|            }
  329|      1|        });

_RNvXs_NtNtCs3NXzWtX11bv_4rand4rngs6threadNtB4_9ThreadRngNtCs1atBeED3HKw_9rand_core7RngCore8next_u64:
  109|  1.65M|    fn next_u64(&mut self) -> u64 {
  110|  1.65M|        // SAFETY: We must make sure to stop using `rng` before anyone else
  111|  1.65M|        // creates another mutable reference
  112|  1.65M|        let rng = unsafe { &mut *self.rng.get() };
  113|  1.65M|        rng.next_u64()
  114|  1.65M|    }
_RNvNtNtCs3NXzWtX11bv_4rand4rngs6thread10thread_rng:
   88|   827k|pub fn thread_rng() -> ThreadRng {
   89|   827k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
   90|   827k|    ThreadRng { rng }
   91|   827k|}
_RNCNvNtNtCs3NXzWtX11bv_4rand4rngs6thread10thread_rng0B7_:
   89|   827k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());

_RNvXsl_NtCs7a667o4NB2d_11rand_chacha6chachaNtB5_12ChaCha12CoreNtNtCs1atBeED3HKw_9rand_core5block12BlockRngCore8generateCs3NXzWtX11bv_4rand:
   89|  51.7k|            fn generate(&mut self, r: &mut Self::Results) {
   90|  51.7k|                // Fill slice of words by writing to equivalent slice of bytes, then fixing endianness.
   91|  51.7k|                self.state.refill4($rounds, unsafe {
   92|  51.7k|                    &mut *(&mut *r as *mut Array64<u32> as *mut [u8; 256])
   93|  51.7k|                });
   94|  3.31M|                for x in r.as_mut() {
   95|  3.31M|                    *x = x.to_le();
   96|  3.31M|                }
   97|  51.7k|            }
_RNvXsm_NtCs7a667o4NB2d_11rand_chacha6chachaNtB5_12ChaCha12CoreNtCs1atBeED3HKw_9rand_core11SeedableRng9from_seedCs3NXzWtX11bv_4rand:
  103|    203|            fn from_seed(seed: Self::Seed) -> Self {
  104|    203|                $ChaChaXCore { state: ChaCha::new(&seed, &[0u8; 8]) }
  105|    203|            }
_RNvXs_NtCs7a667o4NB2d_11rand_chacha6chachaINtB4_7Array64mEINtNtCshZc3FwCJ069_4core7convert5AsRefSmE6as_refB6_:
   46|  3.41M|    fn as_ref(&self) -> &[T] {
   47|  3.41M|        &self.0
   48|  3.41M|    }
_RNvXs0_NtCs7a667o4NB2d_11rand_chacha6chachaINtB5_7Array64mEINtNtCshZc3FwCJ069_4core7convert5AsMutSmE6as_mutB7_:
   51|  51.7k|    fn as_mut(&mut self) -> &mut [T] {
   52|  51.7k|        &mut self.0
   53|  51.7k|    }
_RNvXNtCs7a667o4NB2d_11rand_chacha6chachaINtB2_7Array64mENtNtCshZc3FwCJ069_4core7default7Default7defaultB4_:
   32|      1|    fn default() -> Self {
   33|      1|        Self([
   34|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   35|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   36|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   37|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   38|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   39|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   40|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   41|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   42|      1|        ])
   43|      1|    }

_RNvMNtCs7a667o4NB2d_11rand_chacha4gutsNtB2_6ChaCha3new:
   72|    203|    pub fn new(key: &[u8; 32], nonce: &[u8]) -> Self {
   73|    203|        init_chacha(key, nonce)
   74|    203|    }
_RNvMNtCs7a667o4NB2d_11rand_chacha4gutsNtB2_6ChaCha7refill4:
   84|  51.7k|    pub fn refill4(&mut self, drounds: u32, out: &mut [u8; BUFSZ]) {
   85|  51.7k|        refill_wide(self, drounds, out)
   86|  51.7k|    }
_RINvNtCs7a667o4NB2d_11rand_chacha4guts5roundINtNtCs8SgPi3dzXwZ_10ppv_lite864soft2x2INtNtNtNtBL_6x86_644sse24avx212u32x4x2_avx2NtB1q_4NoNIENtB1o_2G0EEB4_:
   43|   620k|pub(crate) fn round<V: ArithOps + BitOps32>(mut x: State<V>) -> State<V> {
   44|   620k|    x.a += x.b;
   45|   620k|    x.d = (x.d ^ x.a).rotate_each_word_right16();
   46|   620k|    x.c += x.d;
   47|   620k|    x.b = (x.b ^ x.c).rotate_each_word_right20();
   48|   620k|    x.a += x.b;
   49|   620k|    x.d = (x.d ^ x.a).rotate_each_word_right24();
   50|   620k|    x.c += x.d;
   51|   620k|    x.b = (x.b ^ x.c).rotate_each_word_right25();
   52|   620k|    x
   53|   620k|}
_RINvNtCs7a667o4NB2d_11rand_chacha4guts11diagonalizeINtNtCs8SgPi3dzXwZ_10ppv_lite864soft2x2INtNtNtNtBS_6x86_644sse24avx212u32x4x2_avx2NtB1x_4NoNIENtB1v_2G0EEB4_:
   56|   310k|pub(crate) fn diagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   57|   310k|    x.b = x.b.shuffle_lane_words3012();
   58|   310k|    x.c = x.c.shuffle_lane_words2301();
   59|   310k|    x.d = x.d.shuffle_lane_words1230();
   60|   310k|    x
   61|   310k|}
_RINvNtCs7a667o4NB2d_11rand_chacha4guts13undiagonalizeINtNtCs8SgPi3dzXwZ_10ppv_lite864soft2x2INtNtNtNtBU_6x86_644sse24avx212u32x4x2_avx2NtB1z_4NoNIENtB1x_2G0EEB4_:
   63|   310k|pub(crate) fn undiagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   64|   310k|    x.b = x.b.shuffle_lane_words1230();
   65|   310k|    x.c = x.c.shuffle_lane_words2301();
   66|   310k|    x.d = x.d.shuffle_lane_words3012();
   67|   310k|    x
   68|   310k|}
_RINvMNtCs7a667o4NB2d_11rand_chacha4gutsNtB3_6ChaCha5pos64INtNtCs8SgPi3dzXwZ_10ppv_lite866x86_6411Avx2MachineNtBW_4NoNIEEB5_:
   77|   103k|    fn pos64<M: Machine>(&self, m: M) -> u64 {
   78|   103k|        let d: M::u32x4 = m.unpack(self.d);
   79|   103k|        ((d.extract(1) as u64) << 32) | d.extract(0) as u64
   80|   103k|    }
_RINvNtCs7a667o4NB2d_11rand_chacha4guts16refill_wide_implINtNtCs8SgPi3dzXwZ_10ppv_lite866x86_6411Avx2MachineNtBV_4NoNIEEB4_:
  116|  51.7k|fn refill_wide_impl<Mach: Machine>(
  117|  51.7k|    m: Mach, state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ],
  118|  51.7k|) {
  119|  51.7k|    let k = m.vec([0x6170_7865, 0x3320_646e, 0x7962_2d32, 0x6b20_6574]);
  120|  51.7k|    let mut pos = state.pos64(m);
  121|  51.7k|    let d0: Mach::u32x4 = m.unpack(state.d);
  122|  51.7k|    pos = pos.wrapping_add(1);
  123|  51.7k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  124|  51.7k|    pos = pos.wrapping_add(1);
  125|  51.7k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  126|  51.7k|    pos = pos.wrapping_add(1);
  127|  51.7k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  128|  51.7k|
  129|  51.7k|    let b = m.unpack(state.b);
  130|  51.7k|    let c = m.unpack(state.c);
  131|  51.7k|    let mut x = State {
  132|  51.7k|        a: Mach::u32x4x4::from_lanes([k, k, k, k]),
  133|  51.7k|        b: Mach::u32x4x4::from_lanes([b, b, b, b]),
  134|  51.7k|        c: Mach::u32x4x4::from_lanes([c, c, c, c]),
  135|  51.7k|        d: m.unpack(Mach::u32x4x4::from_lanes([d0, d1, d2, d3]).into()),
  136|  51.7k|    };
  137|   310k|    for _ in 0..drounds {
  138|   310k|        x = round(x);
  139|   310k|        x = undiagonalize(round(diagonalize(x)));
  140|   310k|    }
  141|  51.7k|    let mut pos = state.pos64(m);
  142|  51.7k|    let d0: Mach::u32x4 = m.unpack(state.d);
  143|  51.7k|    pos = pos.wrapping_add(1);
  144|  51.7k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  145|  51.7k|    pos = pos.wrapping_add(1);
  146|  51.7k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  147|  51.7k|    pos = pos.wrapping_add(1);
  148|  51.7k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  149|  51.7k|    pos = pos.wrapping_add(1);
  150|  51.7k|    let d4 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  151|  51.7k|
  152|  51.7k|    let (a, b, c, d) = (
  153|  51.7k|        x.a.to_lanes(),
  154|  51.7k|        x.b.to_lanes(),
  155|  51.7k|        x.c.to_lanes(),
  156|  51.7k|        x.d.to_lanes(),
  157|  51.7k|    );
  158|  51.7k|    let sb = m.unpack(state.b);
  159|  51.7k|    let sc = m.unpack(state.c);
  160|  51.7k|    let sd = [m.unpack(state.d), d1, d2, d3];
  161|  51.7k|    state.d = d4.into();
  162|  51.7k|    let mut words = out.chunks_exact_mut(16);
  163|   206k|    for ((((&a, &b), &c), &d), &sd) in a.iter().zip(&b).zip(&c).zip(&d).zip(&sd) {
  164|   206k|        (a + k).write_le(words.next().unwrap());
  165|   206k|        (b + sb).write_le(words.next().unwrap());
  166|   206k|        (c + sc).write_le(words.next().unwrap());
  167|   206k|        (d + sd).write_le(words.next().unwrap());
  168|   206k|    }
  169|  51.7k|}
_RNvNtCs7a667o4NB2d_11rand_chacha4guts10read_u32le:
  229|    406|fn read_u32le(xs: &[u8]) -> u32 {
  230|    406|    assert_eq!(xs.len(), 4);
  231|    406|    u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24)
  232|    406|}
_RINvNvNtCs7a667o4NB2d_11rand_chacha4guts11refill_wide7fn_implINtNtCs8SgPi3dzXwZ_10ppv_lite866x86_6411Avx2MachineNtB10_4NoNIEEB6_:
  172|  51.7k|    fn refill_wide(state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ]) {
  173|  51.7k|        refill_wide_impl(m, state, drounds, out);
_RINvNvNtCs7a667o4NB2d_11rand_chacha4guts11init_chacha7fn_implINtNtCs8SgPi3dzXwZ_10ppv_lite866x86_6410SseMachineNtB10_5YesS3NtB10_5YesS4NtB10_4NoNIEEB6_:
  235|    203|    fn init_chacha(key: &[u8; 32], nonce: &[u8]) -> ChaCha {
  236|    203|        let ctr_nonce = [
  237|       |            0,
  238|    203|            if nonce.len() == 12 {
  239|      0|                read_u32le(&nonce[0..4])
  240|       |            } else {
  241|    203|                0
  242|       |            },
  243|    203|            read_u32le(&nonce[nonce.len() - 8..nonce.len() - 4]),
  244|    203|            read_u32le(&nonce[nonce.len() - 4..]),
  245|    203|        ];
  246|    203|        let key0: Mach::u32x4 = m.read_le(&key[..16]);
  247|    203|        let key1: Mach::u32x4 = m.read_le(&key[16..]);
  248|    203|        ChaCha {
  249|    203|            b: key0.into(),
  250|    203|            c: key1.into(),
  251|    203|            d: ctr_nonce.into(),
  252|    203|        }

_RNCNvXs0_NtCs1atBeED3HKw_9rand_core5blockINtB7_8BlockRngINtNtNtNtCs3NXzWtX11bv_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs7a667o4NB2d_11rand_chacha6chacha12ChaCha12CoreNtNtB9_2os5OsRngEENtB9_7RngCore8next_u640Cs7S9FTsUwoO8_8oxrdfxml:
  198|  1.65M|        let read_u64 = |results: &[u32], index| {
  199|  1.65M|            let data = &results[index..=index + 1];
  200|  1.65M|            u64::from(data[1]) << 32 | u64::from(data[0])
  201|  1.65M|        };
_RNvXs0_NtCs1atBeED3HKw_9rand_core5blockINtB5_8BlockRngINtNtNtNtCs3NXzWtX11bv_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs7a667o4NB2d_11rand_chacha6chacha12ChaCha12CoreNtNtB7_2os5OsRngEENtB7_7RngCore8next_u64Cs7S9FTsUwoO8_8oxrdfxml:
  197|  1.65M|    fn next_u64(&mut self) -> u64 {
  198|  1.65M|        let read_u64 = |results: &[u32], index| {
  199|       |            let data = &results[index..=index + 1];
  200|       |            u64::from(data[1]) << 32 | u64::from(data[0])
  201|       |        };
  202|       |
  203|  1.65M|        let len = self.results.as_ref().len();
  204|  1.65M|
  205|  1.65M|        let index = self.index;
  206|  1.65M|        if index < len - 1 {
  207|  1.60M|            self.index += 2;
  208|  1.60M|            // Read an u64 from the current index
  209|  1.60M|            read_u64(self.results.as_ref(), index)
  210|  51.7k|        } else if index >= len {
  211|  51.7k|            self.generate_and_set(2);
  212|  51.7k|            read_u64(self.results.as_ref(), 0)
  213|       |        } else {
  214|      0|            let x = u64::from(self.results.as_ref()[len - 1]);
  215|      0|            self.generate_and_set(1);
  216|      0|            let y = u64::from(self.results.as_ref()[0]);
  217|      0|            (y << 32) | x
  218|       |        }
  219|  1.65M|    }
_RNvMs_NtCs1atBeED3HKw_9rand_core5blockINtB4_8BlockRngINtNtNtNtCs3NXzWtX11bv_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs7a667o4NB2d_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE16generate_and_setBY_:
  174|  51.7k|    pub fn generate_and_set(&mut self, index: usize) {
  175|  51.7k|        assert!(index < self.results.as_ref().len());
  176|  51.7k|        self.core.generate(&mut self.results);
  177|  51.7k|        self.index = index;
  178|  51.7k|    }
_RNvMs_NtCs1atBeED3HKw_9rand_core5blockINtB4_8BlockRngINtNtNtNtCs3NXzWtX11bv_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs7a667o4NB2d_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE3newBY_:
  145|      1|    pub fn new(core: R) -> BlockRng<R> {
  146|      1|        let results_empty = R::Results::default();
  147|      1|        BlockRng {
  148|      1|            core,
  149|      1|            index: results_empty.as_ref().len(),
  150|      1|            results: results_empty,
  151|      1|        }
  152|      1|    }

_RINvYNtNtCs7a667o4NB2d_11rand_chacha6chacha12ChaCha12CoreNtCs1atBeED3HKw_9rand_core11SeedableRng8from_rngNtNtBV_2os5OsRngECs3NXzWtX11bv_4rand:
  390|      1|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|      1|        let mut seed = Self::Seed::default();
  392|      1|        rng.try_fill_bytes(seed.as_mut())?;
  393|      1|        Ok(Self::from_seed(seed))
  394|      1|    }
_RINvYNtNtCs7a667o4NB2d_11rand_chacha6chacha12ChaCha12CoreNtCs1atBeED3HKw_9rand_core11SeedableRng8from_rngQNtNtBV_2os5OsRngECs3NXzWtX11bv_4rand:
  390|    202|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|    202|        let mut seed = Self::Seed::default();
  392|    202|        rng.try_fill_bytes(seed.as_mut())?;
  393|    202|        Ok(Self::from_seed(seed))
  394|    202|    }
_RNvXs_Cs1atBeED3HKw_9rand_coreQNtNtB4_2os5OsRngNtB4_7RngCore14try_fill_bytesCs3NXzWtX11bv_4rand:
  441|    202|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
  442|    202|        (**self).try_fill_bytes(dest)
  443|    202|    }

_RNvXs_NtCs1atBeED3HKw_9rand_core2osNtB4_5OsRngNtB6_7RngCore14try_fill_bytes:
   67|    203|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
   68|    203|        getrandom(dest)?;
   69|    203|        Ok(())
   70|    203|    }

_RNvXNtCs4xy0Jncn10v_9thiserror7displayRNtNtCs8f6x4lOZV33_5alloc6string6StringNtB2_9AsDisplay10as_displayCs4x4bMiUCp0I_5oxrdf:
   19|   883k|    fn as_display(&'a self) -> Self::Target {
   20|   883k|        *self
   21|   883k|    }
_RNvXNtCs4xy0Jncn10v_9thiserror7displayRNtCsikbtAEUxupI_5oxiri13IriParseErrorNtB2_9AsDisplay10as_displayCs4x4bMiUCp0I_5oxrdf:
   19|   172k|    fn as_display(&'a self) -> Self::Target {
   20|   172k|        *self
   21|   172k|    }

_RNvNvNtNtCs3NXzWtX11bv_4rand4rngs6thread14THREAD_RNG_KEY6___initB7_:
   79|      1|        fn __init() -> $t {
   80|      1|            $init
   81|      1|        }
_RNCNkNvNtNtCs3NXzWtX11bv_4rand4rngs6thread14THREAD_RNG_KEY00B9_:
   90|   827k|                    |init| {
   91|   827k|                        #[thread_local]
   92|   827k|                        static VAL: LazyStorage<$t, ()> = LazyStorage::new();
   93|   827k|                        VAL.get_or_init(init, __init)
   94|   827k|                    }

_RNvCsmXm2WBU6hV_7rdf_xml5parse:
    8|  48.0k|fn parse(data: &[u8], unchecked: bool) -> (Vec<Triple>, Vec<String>) {
    9|  48.0k|    let mut triples = Vec::new();
   10|  48.0k|    let mut errors = Vec::new();
   11|  48.0k|    let mut parser = RdfXmlParser::new();
   12|  48.0k|    if unchecked {
   13|  1.90k|        parser = parser.unchecked();
   14|  46.1k|    }
   15|  2.27M|    for result in parser.for_slice(data) {
   16|  2.27M|        match result {
   17|   416k|            Ok(triple) => triples.push(triple),
   18|  1.86M|            Err(error) => errors.push(error.to_string()),
   19|       |        }
   20|       |    }
   21|  48.0k|    (triples, errors)
   22|  48.0k|}
_RNvCsmXm2WBU6hV_7rdf_xml24count_triple_blank_nodes:
   24|  6.86k|fn count_triple_blank_nodes(triple: &Triple) -> usize {
   25|  6.86k|    (match &triple.subject {
   26|  6.86k|        Subject::BlankNode(_) => 1,
   27|      0|        Subject::Triple(t) => count_triple_blank_nodes(t),
   28|      0|        _ => 0,
   29|  6.86k|    }) + (match &triple.object {
   30|    533|        Term::BlankNode(_) => 1,
   31|      0|        Term::Triple(t) => count_triple_blank_nodes(t),
   32|  6.33k|        _ => 0,
   33|       |    })
   34|  6.86k|}

_RNvMNtCs4x4bMiUCp0I_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCsmXm2WBU6hV_7rdf_xml:
   88|   804k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|   804k|        BlankNodeRef(match &self.0 {
   90|  17.9k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|   786k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|   786k|                id: *id,
   93|   786k|                str: str.as_str(),
   94|   786k|            },
   95|       |        })
   96|   804k|    }
_RNvMs1_NtCs4x4bMiUCp0I_5oxrdf10blank_nodeNtB5_12BlankNodeRef10into_ownedCsmXm2WBU6hV_7rdf_xml:
  207|   344k|    pub fn into_owned(self) -> BlankNode {
  208|   344k|        BlankNode(match self.0 {
  209|  4.45k|            BlankNodeRefContent::Named(id) => BlankNodeContent::Named(id.to_owned()),
  210|   340k|            BlankNodeRefContent::Anonymous { id, .. } => BlankNodeContent::Anonymous {
  211|   340k|                id,
  212|   340k|                str: IdStr::new(u128::from_ne_bytes(id)),
  213|   340k|            },
  214|       |        })
  215|   344k|    }
_RNvMs1_NtCs4x4bMiUCp0I_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCsmXm2WBU6hV_7rdf_xml:
  179|   354k|    pub const fn as_str(self) -> &'a str {
  180|   354k|        match self.0 {
  181|  5.59k|            BlankNodeRefContent::Named(id) => id,
  182|   348k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  183|       |        }
  184|   354k|    }
_RNvMs7_NtCs4x4bMiUCp0I_5oxrdf10blank_nodeNtB5_5IdStr3newCsmXm2WBU6hV_7rdf_xml:
  258|   340k|    fn new(id: u128) -> Self {
  259|   340k|        let mut str = [0; 32];
  260|   340k|        write!(&mut str[..], "{id:x}").unwrap();
  261|   340k|        Self(str)
  262|   340k|    }
_RNvMs7_NtCs4x4bMiUCp0I_5oxrdf10blank_nodeNtB5_5IdStr6as_strCsmXm2WBU6hV_7rdf_xml:
  265|   786k|    fn as_str(&self) -> &str {
  266|   786k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|   786k|        str::from_utf8(&self.0[..len]).unwrap()
  268|   786k|    }
_RNvMs7_NtCs4x4bMiUCp0I_5oxrdf10blank_nodeNtB5_5IdStr3newCs7S9FTsUwoO8_8oxrdfxml:
  258|   827k|    fn new(id: u128) -> Self {
  259|   827k|        let mut str = [0; 32];
  260|   827k|        write!(&mut str[..], "{id:x}").unwrap();
  261|   827k|        Self(str)
  262|   827k|    }
_RNvMs7_NtCs4x4bMiUCp0I_5oxrdf10blank_nodeNtB5_5IdStr6as_strCs7S9FTsUwoO8_8oxrdfxml:
  265|   827k|    fn as_str(&self) -> &str {
  266|   827k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|   827k|        str::from_utf8(&self.0[..len]).unwrap()
  268|   827k|    }
_RNvXs0_NtCs4x4bMiUCp0I_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCshZc3FwCJ069_4core7default7Default7defaultCs7S9FTsUwoO8_8oxrdfxml:
  109|   330k|    fn default() -> Self {
  110|       |        // We ensure the ID does not start with a number to be also valid with RDF/XML
  111|       |        loop {
  112|   827k|            let id = random();
  113|   827k|            let str = IdStr::new(id);
  114|   827k|            if matches!(str.as_str().as_bytes().first(), Some(b'a'..=b'f')) {
  115|   330k|                return Self(BlankNodeContent::Anonymous {
  116|   330k|                    id: id.to_ne_bytes(),
  117|   330k|                    str,
  118|   330k|                });
  119|   496k|            }
  120|       |        }
  121|   330k|    }
_RINvMNtCs4x4bMiUCp0I_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedNtNtCs8f6x4lOZV33_5alloc6string6StringEB5_:
   49|   370k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   50|   370k|        let id = id.into();
   51|   370k|        if let Some(numerical_id) = to_integer_id(&id) {
   52|   357k|            Self::new_from_unique_id(numerical_id)
   53|       |        } else {
   54|  12.8k|            Self(BlankNodeContent::Named(id))
   55|       |        }
   56|   370k|    }
_RNCNvMs7_NtCs4x4bMiUCp0I_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  266|  51.1M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
_RNvMNtCs4x4bMiUCp0I_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idB4_:
   62|   366k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|   366k|        Self(BlankNodeContent::Anonymous {
   64|   366k|            id: id.to_ne_bytes(),
   65|   366k|            str: IdStr::new(id),
   66|   366k|        })
   67|   366k|    }
_RNvMNtCs4x4bMiUCp0I_5oxrdf10blank_nodeNtB2_9BlankNode6as_refB4_:
   88|  10.9k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|  10.9k|        BlankNodeRef(match &self.0 {
   90|      0|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|  10.9k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|  10.9k|                id: *id,
   93|  10.9k|                str: str.as_str(),
   94|  10.9k|            },
   95|       |        })
   96|  10.9k|    }
_RNvMs1_NtCs4x4bMiUCp0I_5oxrdf10blank_nodeNtB5_12BlankNodeRef13new_uncheckedB7_:
  166|  5.47k|    pub fn new_unchecked(id: &'a str) -> Self {
  167|  5.47k|        if let Some(numerical_id) = to_integer_id(id) {
  168|  5.47k|            Self(BlankNodeRefContent::Anonymous {
  169|  5.47k|                id: numerical_id.to_ne_bytes(),
  170|  5.47k|                str: id,
  171|  5.47k|            })
  172|       |        } else {
  173|      0|            Self(BlankNodeRefContent::Named(id))
  174|       |        }
  175|  5.47k|    }
_RNvMs1_NtCs4x4bMiUCp0I_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strB7_:
  179|  17.3k|    pub const fn as_str(self) -> &'a str {
  180|  17.3k|        match self.0 {
  181|      0|            BlankNodeRefContent::Named(id) => id,
  182|  17.3k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  183|       |        }
  184|  17.3k|    }
_RNvMs1_NtCs4x4bMiUCp0I_5oxrdf10blank_nodeNtB5_12BlankNodeRef9unique_idB7_:
  199|  27.4k|    pub const fn unique_id(&self) -> Option<u128> {
  200|  27.4k|        match self.0 {
  201|      0|            BlankNodeRefContent::Named(_) => None,
  202|  27.4k|            BlankNodeRefContent::Anonymous { id, .. } => Some(u128::from_ne_bytes(id)),
  203|       |        }
  204|  27.4k|    }
_RNvMs7_NtCs4x4bMiUCp0I_5oxrdf10blank_nodeNtB5_5IdStr3newB7_:
  258|   366k|    fn new(id: u128) -> Self {
  259|   366k|        let mut str = [0; 32];
  260|   366k|        write!(&mut str[..], "{id:x}").unwrap();
  261|   366k|        Self(str)
  262|   366k|    }
_RNvMs7_NtCs4x4bMiUCp0I_5oxrdf10blank_nodeNtB5_5IdStr6as_strB7_:
  265|  10.9k|    fn as_str(&self) -> &str {
  266|  10.9k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|  10.9k|        str::from_utf8(&self.0[..len]).unwrap()
  268|  10.9k|    }
_RNvNtCs4x4bMiUCp0I_5oxrdf10blank_node13to_integer_idB3_:
  331|   376k|fn to_integer_id(id: &str) -> Option<u128> {
  332|   376k|    let digits = id.as_bytes();
  333|   376k|    let mut value: u128 = 0;
  334|   376k|    if let None | Some(b'0') = digits.first() {
  335|      0|        return None; // No empty string or leading zeros
  336|   376k|    }
  337|  11.6M|    for digit in digits {
  338|  11.2M|        value = value.checked_mul(16)?.checked_add(
  339|  11.2M|            match *digit {
  340|  11.2M|                b'0'..=b'9' => digit - b'0',
  341|  4.61M|                b'a'..=b'f' => digit - b'a' + 10,
  342|  11.5k|                _ => return None,
  343|       |            }
  344|  11.2M|            .into(),
  345|      0|        )?;
  346|       |    }
  347|   363k|    Some(value)
  348|   376k|}

_RINvMsb_NtCs4x4bMiUCp0I_5oxrdf7datasetNtB6_12GraphViewMut6insertRNtNtB8_6triple6TripleECsmXm2WBU6hV_7rdf_xml:
 1371|  10.9k|    pub fn insert<'b>(&mut self, triple: impl Into<TripleRef<'b>>) -> bool {
 1372|  10.9k|        let triple = self.encode_triple(triple.into());
 1373|  10.9k|        self.dataset.insert_encoded((
 1374|  10.9k|            triple.subject,
 1375|  10.9k|            triple.predicate,
 1376|  10.9k|            triple.object,
 1377|  10.9k|            self.graph_name.clone(),
 1378|  10.9k|        ))
 1379|  10.9k|    }
_RINvXsd_NtCs4x4bMiUCp0I_5oxrdf7datasetNtB6_12GraphViewMutINtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect6ExtendRNtNtB8_6triple6TripleE6extendINtNtNtB12_5slice4iter4IterB1N_EECsmXm2WBU6hV_7rdf_xml:
 1509|  3.48k|    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
 1510|  14.3k|        for t in iter {
 1511|  10.9k|            self.insert(t);
 1512|  10.9k|        }
 1513|  3.48k|    }
_RNvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB2_7Dataset4iter:
  169|  1.74k|    pub fn iter(&self) -> Iter<'_> {
  170|  1.74k|        let iter = self.spog.iter();
  171|  1.74k|        Iter {
  172|  1.74k|            dataset: self,
  173|  1.74k|            inner: iter,
  174|  1.74k|        }
  175|  1.74k|    }
_RNvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB2_7Dataset3len:
  350|  3.48k|    pub fn len(&self) -> usize {
  351|  3.48k|        self.gspo.len()
  352|  3.48k|    }
_RNvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB2_7Dataset14insert_encoded:
  365|  21.7k|    fn insert_encoded(
  366|  21.7k|        &mut self,
  367|  21.7k|        quad: (
  368|  21.7k|            InternedSubject,
  369|  21.7k|            InternedNamedNode,
  370|  21.7k|            InternedTerm,
  371|  21.7k|            InternedGraphName,
  372|  21.7k|        ),
  373|  21.7k|    ) -> bool {
  374|  21.7k|        let (s, p, o, g) = quad;
  375|  21.7k|        self.gspo.insert((g.clone(), s.clone(), p, o.clone()));
  376|  21.7k|        self.gpos.insert((g.clone(), p, o.clone(), s.clone()));
  377|  21.7k|        self.gosp.insert((g.clone(), o.clone(), s.clone(), p));
  378|  21.7k|        self.spog.insert((s.clone(), p, o.clone(), g.clone()));
  379|  21.7k|        self.posg.insert((p, o.clone(), s.clone(), g.clone()));
  380|  21.7k|        self.ospg.insert((o, s, p, g))
  381|  21.7k|    }
_RNvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB2_7Dataset5clear:
  411|  3.48k|    pub fn clear(&mut self) {
  412|  3.48k|        self.gspo.clear();
  413|  3.48k|        self.gpos.clear();
  414|  3.48k|        self.gosp.clear();
  415|  3.48k|        self.spog.clear();
  416|  3.48k|        self.posg.clear();
  417|  3.48k|        self.ospg.clear();
  418|  3.48k|    }
_RNvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB2_7Dataset12encoded_quad:
  437|  5.41k|    fn encoded_quad(
  438|  5.41k|        &self,
  439|  5.41k|        quad: QuadRef<'_>,
  440|  5.41k|    ) -> Option<(
  441|  5.41k|        InternedSubject,
  442|  5.41k|        InternedNamedNode,
  443|  5.41k|        InternedTerm,
  444|  5.41k|        InternedGraphName,
  445|  5.41k|    )> {
  446|  5.41k|        Some((
  447|  5.41k|            self.encoded_subject(quad.subject)?,
  448|  5.41k|            self.encoded_named_node(quad.predicate)?,
  449|  5.41k|            self.encoded_term(quad.object)?,
  450|  5.41k|            self.encoded_graph_name(quad.graph_name)?,
  451|       |        ))
  452|  5.41k|    }
_RNvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB2_7Dataset11decode_spog:
  479|  5.41k|    fn decode_spog(
  480|  5.41k|        &self,
  481|  5.41k|        quad: (
  482|  5.41k|            &InternedSubject,
  483|  5.41k|            &InternedNamedNode,
  484|  5.41k|            &InternedTerm,
  485|  5.41k|            &InternedGraphName,
  486|  5.41k|        ),
  487|  5.41k|    ) -> QuadRef<'_> {
  488|  5.41k|        QuadRef {
  489|  5.41k|            subject: quad.0.decode_from(&self.interner),
  490|  5.41k|            predicate: quad.1.decode_from(&self.interner),
  491|  5.41k|            object: quad.2.decode_from(&self.interner),
  492|  5.41k|            graph_name: quad.3.decode_from(&self.interner),
  493|  5.41k|        }
  494|  5.41k|    }
_RNvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB2_7Dataset12canonicalize:
  539|  3.48k|    pub fn canonicalize(&mut self, algorithm: CanonicalizationAlgorithm) {
  540|  3.48k|        let bnode_mapping = self.canonicalize_interned_blank_nodes(algorithm);
  541|  3.48k|        let new_quads = self.map_blank_nodes(&bnode_mapping);
  542|  3.48k|        self.clear();
  543|  14.3k|        for quad in new_quads {
  544|  10.8k|            self.insert_encoded(quad);
  545|  10.8k|        }
  546|  3.48k|    }
_RNvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB2_7Dataset33canonicalize_interned_blank_nodes:
  562|  3.48k|    fn canonicalize_interned_blank_nodes(
  563|  3.48k|        &self,
  564|  3.48k|        algorithm: CanonicalizationAlgorithm,
  565|  3.48k|    ) -> HashMap<InternedBlankNode, BlankNode> {
  566|  3.48k|        match algorithm {
  567|  3.48k|            CanonicalizationAlgorithm::Unstable => {
  568|  3.48k|                let bnodes = self.blank_nodes();
  569|  3.48k|                let quads_per_blank_node = self.quads_per_blank_nodes();
  570|  3.48k|                let (hash, partition) = self.hash_bnodes(
  571|  3.48k|                    bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
  572|  3.48k|                    &quads_per_blank_node,
  573|  3.48k|                );
  574|  3.48k|                self.distinguish(hash, &partition, &quads_per_blank_node)
  575|  3.48k|                    .into_iter()
  576|  3.48k|                    .map(|(from, to)| (from, BlankNode::new_from_unique_id(to.into())))
  577|  3.48k|                    .collect()
  578|  3.48k|            }
  579|  3.48k|        }
  580|  3.48k|    }
_RNvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB2_7Dataset11blank_nodes:
  582|  3.48k|    fn blank_nodes(&self) -> HashSet<InternedBlankNode> {
  583|  3.48k|        let mut bnodes = HashSet::new();
  584|  14.3k|        for (g, s, _, o) in &self.gspo {
  585|  10.8k|            if let InternedSubject::BlankNode(bnode) = s {
  586|  10.8k|                bnodes.insert(*bnode);
  587|  10.8k|            }
  588|       |            #[cfg(feature = "rdf-star")]
  589|  10.8k|            if let InternedSubject::Triple(triple) = s {
  590|      0|                Self::triple_blank_nodes(triple, &mut bnodes);
  591|  10.8k|            }
  592|  10.8k|            if let InternedTerm::BlankNode(bnode) = o {
  593|    102|                bnodes.insert(*bnode);
  594|  10.7k|            }
  595|       |            #[cfg(feature = "rdf-star")]
  596|  10.8k|            if let InternedTerm::Triple(triple) = o {
  597|      0|                Self::triple_blank_nodes(triple, &mut bnodes);
  598|  10.8k|            }
  599|  10.8k|            if let InternedGraphName::BlankNode(bnode) = g {
  600|      0|                bnodes.insert(*bnode);
  601|  10.8k|            }
  602|       |        }
  603|  3.48k|        bnodes
  604|  3.48k|    }
_RNvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB2_7Dataset21quads_per_blank_nodes:
  620|  3.48k|    fn quads_per_blank_nodes(&self) -> QuadsPerBlankNode {
  621|  3.48k|        let mut map: HashMap<_, Vec<_>> = HashMap::new();
  622|  14.3k|        for quad in &self.spog {
  623|  10.8k|            if let InternedSubject::BlankNode(bnode) = &quad.0 {
  624|  10.8k|                map.entry(*bnode).or_default().push(quad.clone());
  625|  10.8k|            }
  626|       |            #[cfg(feature = "rdf-star")]
  627|  10.8k|            if let InternedSubject::Triple(t) = &quad.0 {
  628|      0|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  629|  10.8k|            }
  630|  10.8k|            if let InternedTerm::BlankNode(bnode) = &quad.2 {
  631|    102|                map.entry(*bnode).or_default().push(quad.clone());
  632|  10.7k|            }
  633|       |            #[cfg(feature = "rdf-star")]
  634|  10.8k|            if let InternedTerm::Triple(t) = &quad.2 {
  635|      0|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  636|  10.8k|            }
  637|  10.8k|            if let InternedGraphName::BlankNode(bnode) = &quad.3 {
  638|      0|                map.entry(*bnode).or_default().push(quad.clone());
  639|  10.8k|            }
  640|       |        }
  641|  3.48k|        map
  642|  3.48k|    }
_RNvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB2_7Dataset11hash_bnodes:
  669|  30.8k|    fn hash_bnodes(
  670|  30.8k|        &self,
  671|  30.8k|        mut hashes: HashMap<InternedBlankNode, u64>,
  672|  30.8k|        quads_per_blank_node: &QuadsPerBlankNode,
  673|  30.8k|    ) -> (
  674|  30.8k|        HashMap<InternedBlankNode, u64>,
  675|  30.8k|        Vec<(u64, Vec<InternedBlankNode>)>,
  676|  30.8k|    ) {
  677|  30.8k|        let mut to_hash = Vec::new();
  678|  30.8k|        let mut to_do = hashes
  679|  30.8k|            .keys()
  680|  30.8k|            .map(|bnode| (*bnode, true))
  681|  30.8k|            .collect::<HashMap<_, _>>();
  682|  30.8k|        let mut partition = HashMap::<_, Vec<_>>::with_capacity(hashes.len());
  683|  30.8k|        let mut old_partition_count = usize::MAX;
  684|  92.5k|        while old_partition_count != partition.len() {
  685|  61.6k|            old_partition_count = partition.len();
  686|  61.6k|            partition.clear();
  687|  61.6k|            let mut new_hashes = hashes.clone();
  688|   226k|            for bnode in hashes.keys() {
  689|   226k|                let hash = if to_do.contains_key(bnode) {
  690|   232k|                    for (s, p, o, g) in &quads_per_blank_node[bnode] {
  691|   232k|                        to_hash.push((
  692|   232k|                            self.hash_subject(s, *bnode, &hashes),
  693|   232k|                            self.hash_named_node(*p),
  694|   232k|                            self.hash_term(o, *bnode, &hashes),
  695|   232k|                            self.hash_graph_name(g, *bnode, &hashes),
  696|   232k|                        ));
  697|   232k|                    }
  698|   226k|                    to_hash.sort_unstable();
  699|   226k|                    let hash = Self::hash_tuple((&to_hash, hashes[bnode]));
  700|   226k|                    to_hash.clear();
  701|   226k|                    if hash == hashes[bnode] {
  702|      0|                        to_do.insert(*bnode, false);
  703|   226k|                    } else {
  704|   226k|                        new_hashes.insert(*bnode, hash);
  705|   226k|                    }
  706|   226k|                    hash
  707|       |                } else {
  708|      0|                    hashes[bnode]
  709|       |                };
  710|   226k|                partition.entry(hash).or_default().push(*bnode);
  711|       |            }
  712|  61.6k|            hashes = new_hashes;
  713|       |        }
  714|  30.8k|        let mut partition: Vec<_> = partition.into_iter().collect();
  715|  30.8k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));
  716|  30.8k|        (hashes, partition)
  717|  30.8k|    }
_RNvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB2_7Dataset15hash_named_node:
  719|   232k|    fn hash_named_node(&self, node: InternedNamedNode) -> u64 {
  720|   232k|        Self::hash_tuple(node.decode_from(&self.interner))
  721|   232k|    }
_RNvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB2_7Dataset15hash_blank_node:
  723|   232k|    fn hash_blank_node(
  724|   232k|        node: InternedBlankNode,
  725|   232k|        current_blank_node: InternedBlankNode,
  726|   232k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  727|   232k|    ) -> u64 {
  728|   232k|        if node == current_blank_node {
  729|   232k|            u64::MAX
  730|       |        } else {
  731|    408|            bnodes_hash[&node]
  732|       |        }
  733|   232k|    }
_RNvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB2_7Dataset12hash_subject:
  735|   232k|    fn hash_subject(
  736|   232k|        &self,
  737|   232k|        node: &InternedSubject,
  738|   232k|        current_blank_node: InternedBlankNode,
  739|   232k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  740|   232k|    ) -> u64 {
  741|   232k|        match node {
  742|      0|            InternedSubject::NamedNode(node) => Self::hash_tuple(node.decode_from(&self.interner)),
  743|   232k|            InternedSubject::BlankNode(bnode) => {
  744|   232k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  745|       |            }
  746|       |            #[cfg(feature = "rdf-star")]
  747|      0|            InternedSubject::Triple(triple) => {
  748|      0|                self.hash_triple(triple, current_blank_node, bnodes_hash)
  749|       |            }
  750|       |        }
  751|   232k|    }
_RNvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB2_7Dataset9hash_term:
  753|   232k|    fn hash_term(
  754|   232k|        &self,
  755|   232k|        term: &InternedTerm,
  756|   232k|        current_blank_node: InternedBlankNode,
  757|   232k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  758|   232k|    ) -> u64 {
  759|   232k|        match term {
  760|   225k|            InternedTerm::NamedNode(node) => Self::hash_tuple(node.decode_from(&self.interner)),
  761|    408|            InternedTerm::BlankNode(bnode) => {
  762|    408|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  763|       |            }
  764|  5.63k|            InternedTerm::Literal(literal) => Self::hash_tuple(literal.decode_from(&self.interner)),
  765|       |            #[cfg(feature = "rdf-star")]
  766|      0|            InternedTerm::Triple(triple) => {
  767|      0|                self.hash_triple(triple, current_blank_node, bnodes_hash)
  768|       |            }
  769|       |        }
  770|   232k|    }
_RNvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB2_7Dataset15hash_graph_name:
  772|   232k|    fn hash_graph_name(
  773|   232k|        &self,
  774|   232k|        graph_name: &InternedGraphName,
  775|   232k|        current_blank_node: InternedBlankNode,
  776|   232k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  777|   232k|    ) -> u64 {
  778|   232k|        match graph_name {
  779|      0|            InternedGraphName::NamedNode(node) => {
  780|      0|                Self::hash_tuple(node.decode_from(&self.interner))
  781|       |            }
  782|      0|            InternedGraphName::BlankNode(bnode) => {
  783|      0|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  784|       |            }
  785|   232k|            InternedGraphName::DefaultGraph => 0,
  786|       |        }
  787|   232k|    }
_RNvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB2_7Dataset11distinguish:
  809|  30.8k|    fn distinguish(
  810|  30.8k|        &self,
  811|  30.8k|        hash: HashMap<InternedBlankNode, u64>,
  812|  30.8k|        partition: &[(u64, Vec<InternedBlankNode>)],
  813|  30.8k|        quads_per_blank_node: &QuadsPerBlankNode,
  814|  30.8k|    ) -> HashMap<InternedBlankNode, u64> {
  815|  30.8k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
  816|  30.8k|        if let Some(b_prime) = b_prime {
  817|  11.8k|            b_prime
  818|  11.8k|                .iter()
  819|  11.8k|                .map(|b| {
  820|       |                    let mut hash_prime = hash.clone();
  821|       |                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  822|       |                    let (hash_prime_prime, partition_prime) =
  823|       |                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  824|       |                    self.distinguish(hash_prime_prime, &partition_prime, quads_per_blank_node)
  825|  11.8k|                })
  826|  11.8k|                .reduce(|a, b| {
  827|       |                    let mut a_hashes = a.values().collect::<Vec<_>>();
  828|       |                    a_hashes.sort();
  829|       |                    let mut b_hashes = a.values().collect::<Vec<_>>();
  830|       |                    b_hashes.sort();
  831|       |                    if a_hashes <= b_hashes {
  832|       |                        a
  833|       |                    } else {
  834|       |                        b
  835|       |                    }
  836|  11.8k|                })
  837|  11.8k|                .unwrap_or_default()
  838|       |        } else {
  839|  19.0k|            hash
  840|       |        }
  841|  30.8k|    }
_RNvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB2_7Dataset15map_blank_nodes:
  844|  3.48k|    fn map_blank_nodes(
  845|  3.48k|        &mut self,
  846|  3.48k|        bnode_mapping: &HashMap<InternedBlankNode, BlankNode>,
  847|  3.48k|    ) -> Vec<(
  848|  3.48k|        InternedSubject,
  849|  3.48k|        InternedNamedNode,
  850|  3.48k|        InternedTerm,
  851|  3.48k|        InternedGraphName,
  852|  3.48k|    )> {
  853|  3.48k|        let old_quads: Vec<_> = self.spog.iter().cloned().collect();
  854|  3.48k|        old_quads
  855|  3.48k|            .into_iter()
  856|  3.48k|            .map(|(s, p, o, g)| {
  857|       |                (
  858|       |                    match s {
  859|       |                        InternedSubject::NamedNode(_) => s,
  860|       |                        InternedSubject::BlankNode(bnode) => {
  861|       |                            InternedSubject::BlankNode(InternedBlankNode::encoded_into(
  862|       |                                bnode_mapping[&bnode].as_ref(),
  863|       |                                &mut self.interner,
  864|       |                            ))
  865|       |                        }
  866|       |                        #[cfg(feature = "rdf-star")]
  867|       |                        InternedSubject::Triple(triple) => {
  868|       |                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  869|       |                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  870|       |                                &mut self.interner,
  871|       |                            )))
  872|       |                        }
  873|       |                    },
  874|       |                    p,
  875|       |                    match o {
  876|       |                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  877|       |                        InternedTerm::BlankNode(bnode) => {
  878|       |                            InternedTerm::BlankNode(InternedBlankNode::encoded_into(
  879|       |                                bnode_mapping[&bnode].as_ref(),
  880|       |                                &mut self.interner,
  881|       |                            ))
  882|       |                        }
  883|       |                        #[cfg(feature = "rdf-star")]
  884|       |                        InternedTerm::Triple(triple) => {
  885|       |                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  886|       |                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  887|       |                                &mut self.interner,
  888|       |                            )))
  889|       |                        }
  890|       |                    },
  891|       |                    match g {
  892|       |                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  893|       |                        InternedGraphName::BlankNode(bnode) => {
  894|       |                            InternedGraphName::BlankNode(InternedBlankNode::encoded_into(
  895|       |                                bnode_mapping[&bnode].as_ref(),
  896|       |                                &mut self.interner,
  897|       |                            ))
  898|       |                        }
  899|       |                    },
  900|       |                )
  901|  3.48k|            })
  902|  3.48k|            .collect()
  903|  3.48k|    }
_RNvXs_NtCs4x4bMiUCp0I_5oxrdf7datasetNtB4_7DatasetNtNtCshZc3FwCJ069_4core3cmp9PartialEq2eq:
  932|  1.74k|    fn eq(&self, other: &Self) -> bool {
  933|  1.74k|        if self.len() != other.len() {
  934|      0|            return false;
  935|  1.74k|        }
  936|  7.16k|        for q in self {
  937|  5.41k|            if !other.contains(q) {
  938|      0|                return false;
  939|  5.41k|            }
  940|       |        }
  941|  1.74k|        true
  942|  1.74k|    }
_RNvXs1_NtCs4x4bMiUCp0I_5oxrdf7datasetRNtB5_7DatasetNtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect12IntoIterator9into_iter:
  951|  1.74k|    fn into_iter(self) -> Self::IntoIter {
  952|  1.74k|        self.iter()
  953|  1.74k|    }
_RNvMsb_NtCs4x4bMiUCp0I_5oxrdf7datasetNtB5_12GraphViewMut13encode_triple:
 1395|  10.9k|    fn encode_triple(&mut self, triple: TripleRef<'_>) -> InternedTriple {
 1396|  10.9k|        InternedTriple {
 1397|  10.9k|            subject: InternedSubject::encoded_into(triple.subject, &mut self.dataset.interner),
 1398|  10.9k|            predicate: InternedNamedNode::encoded_into(
 1399|  10.9k|                triple.predicate,
 1400|  10.9k|                &mut self.dataset.interner,
 1401|  10.9k|            ),
 1402|  10.9k|            object: InternedTerm::encoded_into(triple.object, &mut self.dataset.interner),
 1403|  10.9k|        }
 1404|  10.9k|    }
_RNvXsg_NtCs4x4bMiUCp0I_5oxrdf7datasetNtB5_4IterNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next:
 1551|  7.16k|    fn next(&mut self) -> Option<Self::Item> {
 1552|  7.16k|        self.inner
 1553|  7.16k|            .next()
 1554|  7.16k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))
 1555|  7.16k|    }
_RINvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB3_7Dataset9graph_mutNtNtB5_6triple12GraphNameRefEB5_:
  157|  3.48k|    pub fn graph_mut<'a, 'b>(
  158|  3.48k|        &'a mut self,
  159|  3.48k|        graph_name: impl Into<GraphNameRef<'b>>,
  160|  3.48k|    ) -> GraphViewMut<'a> {
  161|  3.48k|        let graph_name = InternedGraphName::encoded_into(graph_name.into(), &mut self.interner);
  162|  3.48k|        GraphViewMut {
  163|  3.48k|            dataset: self,
  164|  3.48k|            graph_name,
  165|  3.48k|        }
  166|  3.48k|    }
_RINvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB3_7Dataset8containsNtNtB5_6triple7QuadRefEB5_:
  341|  5.41k|    pub fn contains<'a>(&self, quad: impl Into<QuadRef<'a>>) -> bool {
  342|  5.41k|        if let Some(q) = self.encoded_quad(quad.into()) {
  343|  5.41k|            self.spog.contains(&q)
  344|       |        } else {
  345|      0|            false
  346|       |        }
  347|  5.41k|    }
_RINvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB3_7Dataset18encoded_named_nodeNtNtB5_10named_node12NamedNodeRefEB5_:
  454|  5.41k|    pub(super) fn encoded_named_node<'a>(
  455|  5.41k|        &self,
  456|  5.41k|        node: impl Into<NamedNodeRef<'a>>,
  457|  5.41k|    ) -> Option<InternedNamedNode> {
  458|  5.41k|        InternedNamedNode::encoded_from(node.into(), &self.interner)
  459|  5.41k|    }
_RINvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB3_7Dataset15encoded_subjectNtNtB5_6triple10SubjectRefEB5_:
  461|  5.41k|    pub(super) fn encoded_subject<'a>(
  462|  5.41k|        &self,
  463|  5.41k|        node: impl Into<SubjectRef<'a>>,
  464|  5.41k|    ) -> Option<InternedSubject> {
  465|  5.41k|        InternedSubject::encoded_from(node.into(), &self.interner)
  466|  5.41k|    }
_RINvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB3_7Dataset12encoded_termNtNtB5_6triple7TermRefEB5_:
  468|  5.41k|    pub(super) fn encoded_term<'a>(&self, term: impl Into<TermRef<'a>>) -> Option<InternedTerm> {
  469|  5.41k|        InternedTerm::encoded_from(term.into(), &self.interner)
  470|  5.41k|    }
_RINvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB3_7Dataset18encoded_graph_nameNtNtB5_6triple12GraphNameRefEB5_:
  472|  5.41k|    pub(super) fn encoded_graph_name<'a>(
  473|  5.41k|        &self,
  474|  5.41k|        graph_name: impl Into<GraphNameRef<'a>>,
  475|  5.41k|    ) -> Option<InternedGraphName> {
  476|  5.41k|        InternedGraphName::encoded_from(graph_name.into(), &self.interner)
  477|  5.41k|    }
_RNCNvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB4_7Dataset33canonicalize_interned_blank_nodes0B6_:
  571|  8.66k|                    bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
_RNCNvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB4_7Dataset33canonicalize_interned_blank_nodess_0B6_:
  576|  8.66k|                    .map(|(from, to)| (from, BlankNode::new_from_unique_id(to.into())))
_RNCNvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB4_7Dataset11hash_bnodes0B6_:
  680|   113k|            .map(|bnode| (*bnode, true))
_RNCNvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB4_7Dataset11hash_bnodess_0B6_:
  715|   100k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));
_RINvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB3_7Dataset10hash_tupleNtNtB5_10named_node12NamedNodeRefEB5_:
  803|   457k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|   457k|        let mut hasher = DefaultHasher::new();
  805|   457k|        v.hash(&mut hasher);
  806|   457k|        hasher.finish()
  807|   457k|    }
_RINvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB3_7Dataset10hash_tupleNtNtB5_7literal10LiteralRefEB5_:
  803|  5.63k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|  5.63k|        let mut hasher = DefaultHasher::new();
  805|  5.63k|        v.hash(&mut hasher);
  806|  5.63k|        hasher.finish()
  807|  5.63k|    }
_RINvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB3_7Dataset10hash_tupleTRINtNtCs8f6x4lOZV33_5alloc3vec3VecTyyyyEEyEEB5_:
  803|   226k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|   226k|        let mut hasher = DefaultHasher::new();
  805|   226k|        v.hash(&mut hasher);
  806|   226k|        hasher.finish()
  807|   226k|    }
_RINvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB3_7Dataset10hash_tupleTylEEB5_:
  803|  27.3k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|  27.3k|        let mut hasher = DefaultHasher::new();
  805|  27.3k|        v.hash(&mut hasher);
  806|  27.3k|        hasher.finish()
  807|  27.3k|    }
_RNCNvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB4_7Dataset11distinguish0B6_:
  815|  97.6k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
_RNCNvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB4_7Dataset11distinguishs_0B6_:
  815|  97.6k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
_RNCNvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB4_7Dataset11distinguishs0_0B6_:
  819|  27.3k|                .map(|b| {
  820|  27.3k|                    let mut hash_prime = hash.clone();
  821|  27.3k|                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  822|  27.3k|                    let (hash_prime_prime, partition_prime) =
  823|  27.3k|                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  824|  27.3k|                    self.distinguish(hash_prime_prime, &partition_prime, quads_per_blank_node)
  825|  27.3k|                })
_RNCNvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB4_7Dataset11distinguishs1_0B6_:
  826|  15.5k|                .reduce(|a, b| {
  827|  15.5k|                    let mut a_hashes = a.values().collect::<Vec<_>>();
  828|  15.5k|                    a_hashes.sort();
  829|  15.5k|                    let mut b_hashes = a.values().collect::<Vec<_>>();
  830|  15.5k|                    b_hashes.sort();
  831|  15.5k|                    if a_hashes <= b_hashes {
  832|  15.5k|                        a
  833|       |                    } else {
  834|      0|                        b
  835|       |                    }
  836|  15.5k|                })
_RNCNvMNtCs4x4bMiUCp0I_5oxrdf7datasetNtB4_7Dataset15map_blank_nodes0B6_:
  856|  10.8k|            .map(|(s, p, o, g)| {
  857|  10.8k|                (
  858|  10.8k|                    match s {
  859|      0|                        InternedSubject::NamedNode(_) => s,
  860|  10.8k|                        InternedSubject::BlankNode(bnode) => {
  861|  10.8k|                            InternedSubject::BlankNode(InternedBlankNode::encoded_into(
  862|  10.8k|                                bnode_mapping[&bnode].as_ref(),
  863|  10.8k|                                &mut self.interner,
  864|  10.8k|                            ))
  865|       |                        }
  866|       |                        #[cfg(feature = "rdf-star")]
  867|      0|                        InternedSubject::Triple(triple) => {
  868|      0|                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  869|      0|                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  870|      0|                                &mut self.interner,
  871|      0|                            )))
  872|       |                        }
  873|       |                    },
  874|  10.8k|                    p,
  875|  10.8k|                    match o {
  876|  10.7k|                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  877|    102|                        InternedTerm::BlankNode(bnode) => {
  878|    102|                            InternedTerm::BlankNode(InternedBlankNode::encoded_into(
  879|    102|                                bnode_mapping[&bnode].as_ref(),
  880|    102|                                &mut self.interner,
  881|    102|                            ))
  882|       |                        }
  883|       |                        #[cfg(feature = "rdf-star")]
  884|      0|                        InternedTerm::Triple(triple) => {
  885|      0|                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  886|      0|                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  887|      0|                                &mut self.interner,
  888|      0|                            )))
  889|       |                        }
  890|       |                    },
  891|  10.8k|                    match g {
  892|  10.8k|                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  893|      0|                        InternedGraphName::BlankNode(bnode) => {
  894|      0|                            InternedGraphName::BlankNode(InternedBlankNode::encoded_into(
  895|      0|                                bnode_mapping[&bnode].as_ref(),
  896|      0|                                &mut self.interner,
  897|      0|                            ))
  898|       |                        }
  899|       |                    },
  900|       |                )
  901|  10.8k|            })
_RNCNvXsg_NtCs4x4bMiUCp0I_5oxrdf7datasetNtB7_4IterNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next0B9_:
 1554|  5.41k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))

_RINvXs3_NtCs4x4bMiUCp0I_5oxrdf5graphNtB6_5GraphINtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect12FromIteratorRNtNtB8_6triple6TripleE9from_iterINtNtNtBS_5slice4iter4IterB1K_EECsmXm2WBU6hV_7rdf_xml:
  248|  3.48k|    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self {
  249|  3.48k|        let mut g = Self::new();
  250|  3.48k|        g.extend(iter);
  251|  3.48k|        g
  252|  3.48k|    }
_RINvXs5_NtCs4x4bMiUCp0I_5oxrdf5graphNtB6_5GraphINtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect6ExtendRNtNtB8_6triple6TripleE6extendINtNtNtBS_5slice4iter4IterB1D_EECsmXm2WBU6hV_7rdf_xml:
  262|  3.48k|    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  263|  3.48k|        self.graph_mut().extend(iter)
  264|  3.48k|    }
_RNvMNtCs4x4bMiUCp0I_5oxrdf5graphNtB2_5Graph3new:
   63|  3.48k|    pub fn new() -> Self {
   64|  3.48k|        Self::default()
   65|  3.48k|    }
_RNvMNtCs4x4bMiUCp0I_5oxrdf5graphNtB2_5Graph9graph_mut:
   71|  3.48k|    fn graph_mut(&mut self) -> GraphViewMut<'_> {
   72|  3.48k|        self.dataset.graph_mut(GraphNameRef::DefaultGraph)
   73|  3.48k|    }
_RNvMNtCs4x4bMiUCp0I_5oxrdf5graphNtB2_5Graph12canonicalize:
  217|  3.48k|    pub fn canonicalize(&mut self, algorithm: CanonicalizationAlgorithm) {
  218|  3.48k|        self.dataset.canonicalize(algorithm)
  219|  3.48k|    }
_RNvXs_NtCs4x4bMiUCp0I_5oxrdf5graphNtB4_5GraphNtNtCshZc3FwCJ069_4core3cmp9PartialEq2eq:
  223|  1.74k|    fn eq(&self, other: &Self) -> bool {
  224|  1.74k|        self.dataset == other.dataset
  225|  1.74k|    }

_RNvMNtCs4x4bMiUCp0I_5oxrdf9interningNtB2_8Interner13get_or_intern:
   18|  21.7k|    fn get_or_intern(&mut self, value: &str) -> Key {
   19|  21.7k|        let mut hash = self.hash(value);
   20|  21.7k|        loop {
   21|  21.7k|            match self.string_for_hash.entry(hash) {
   22|  11.3k|                Entry::Vacant(e) => {
   23|  11.3k|                    e.insert(value.into());
   24|  11.3k|                    return Key(hash);
   25|       |                }
   26|  10.3k|                Entry::Occupied(e) => loop {
   27|  10.3k|                    if e.get() == value {
   28|  10.3k|                        return Key(hash);
   29|      0|                    } else if hash == u64::MAX - 1 {
   30|      0|                        hash = 0;
   31|      0|                    } else {
   32|      0|                        hash += 1;
   33|      0|                    }
   34|       |                },
   35|       |            }
   36|       |        }
   37|  21.7k|    }
_RNvMNtCs4x4bMiUCp0I_5oxrdf9interningNtB2_8Interner3get:
   39|  10.7k|    fn get(&self, value: &str) -> Option<Key> {
   40|  10.7k|        let mut hash = self.hash(value);
   41|       |        loop {
   42|  10.7k|            let v = self.string_for_hash.get(&hash)?;
   43|  10.7k|            if v == value {
   44|  10.7k|                return Some(Key(hash));
   45|      0|            } else if hash == u64::MAX - 1 {
   46|      0|                hash = 0;
   47|      0|            } else {
   48|      0|                hash += 1;
   49|      0|            }
   50|       |        }
   51|  10.7k|    }
_RNvMNtCs4x4bMiUCp0I_5oxrdf9interningNtB2_8Interner4hash:
   53|  32.5k|    fn hash(&self, value: &str) -> u64 {
   54|  32.5k|        let hash = self.hasher.hash_one(value);
   55|  32.5k|        if hash == u64::MAX {
   56|      0|            0
   57|       |        } else {
   58|  32.5k|            hash
   59|       |        }
   60|  32.5k|    }
_RNvMNtCs4x4bMiUCp0I_5oxrdf9interningNtB2_8Interner7resolve:
   62|   474k|    fn resolve(&self, key: Key) -> &str {
   63|   474k|        &self.string_for_hash[&key.0]
   64|   474k|    }
_RNvMs0_NtCs4x4bMiUCp0I_5oxrdf9interningNtB5_17InternedNamedNode12encoded_into:
   90|  19.3k|    pub fn encoded_into(named_node: NamedNodeRef<'_>, interner: &mut Interner) -> Self {
   91|  19.3k|        Self {
   92|  19.3k|            id: interner.get_or_intern(named_node.as_str()),
   93|  19.3k|        }
   94|  19.3k|    }
_RNvMs0_NtCs4x4bMiUCp0I_5oxrdf9interningNtB5_17InternedNamedNode12encoded_from:
   96|  9.63k|    pub fn encoded_from(named_node: NamedNodeRef<'_>, interner: &Interner) -> Option<Self> {
   97|  9.63k|        Some(Self {
   98|  9.63k|            id: interner.get(named_node.as_str())?,
   99|       |        })
  100|  9.63k|    }
_RNvMs0_NtCs4x4bMiUCp0I_5oxrdf9interningNtB5_17InternedNamedNode11decode_from:
  102|   467k|    pub fn decode_from(self, interner: &Interner) -> NamedNodeRef<'_> {
  103|   467k|        NamedNodeRef::new_unchecked(interner.resolve(self.id))
  104|   467k|    }
_RNvMs1_NtCs4x4bMiUCp0I_5oxrdf9interningNtB5_17InternedBlankNode12encoded_into:
  128|  21.9k|    pub fn encoded_into(blank_node: BlankNodeRef<'_>, interner: &mut Interner) -> Self {
  129|  21.9k|        if let Some(id) = blank_node.unique_id() {
  130|  21.9k|            interner
  131|  21.9k|                .string_for_blank_node_id
  132|  21.9k|                .entry(id)
  133|  21.9k|                .or_insert_with(|| blank_node.as_str().into());
  134|  21.9k|            Self::Number { id }
  135|       |        } else {
  136|      0|            Self::Other {
  137|      0|                id: interner.get_or_intern(blank_node.as_str()),
  138|      0|            }
  139|       |        }
  140|  21.9k|    }
_RNvMs1_NtCs4x4bMiUCp0I_5oxrdf9interningNtB5_17InternedBlankNode12encoded_from:
  142|  5.47k|    pub fn encoded_from(blank_node: BlankNodeRef<'_>, interner: &Interner) -> Option<Self> {
  143|  5.47k|        if let Some(id) = blank_node.unique_id() {
  144|  5.47k|            interner
  145|  5.47k|                .string_for_blank_node_id
  146|  5.47k|                .contains_key(&id)
  147|  5.47k|                .then_some(Self::Number { id })
  148|       |        } else {
  149|       |            Some(Self::Other {
  150|      0|                id: interner.get(blank_node.as_str())?,
  151|       |            })
  152|       |        }
  153|  5.47k|    }
_RNvMs1_NtCs4x4bMiUCp0I_5oxrdf9interningNtB5_17InternedBlankNode11decode_from:
  155|  5.47k|    pub fn decode_from(self, interner: &Interner) -> BlankNodeRef<'_> {
  156|  5.47k|        BlankNodeRef::new_unchecked(match self {
  157|  5.47k|            Self::Number { id } => &interner.string_for_blank_node_id[&id],
  158|      0|            Self::Other { id } => interner.resolve(id),
  159|       |        })
  160|  5.47k|    }
_RNvMs2_NtCs4x4bMiUCp0I_5oxrdf9interningNtB5_15InternedLiteral12encoded_into:
  188|  2.37k|    pub fn encoded_into(literal: LiteralRef<'_>, interner: &mut Interner) -> Self {
  189|  2.37k|        let value_id = interner.get_or_intern(literal.value());
  190|  2.37k|        if literal.is_plain() {
  191|  2.37k|            if let Some(language) = literal.language() {
  192|      0|                Self::LanguageTaggedString {
  193|      0|                    value_id,
  194|      0|                    language_id: interner.get_or_intern(language),
  195|      0|                }
  196|       |            } else {
  197|  2.37k|                Self::String { value_id }
  198|       |            }
  199|       |        } else {
  200|      0|            Self::TypedLiteral {
  201|      0|                value_id,
  202|      0|                datatype: InternedNamedNode::encoded_into(literal.datatype(), interner),
  203|      0|            }
  204|       |        }
  205|  2.37k|    }
_RNvMs2_NtCs4x4bMiUCp0I_5oxrdf9interningNtB5_15InternedLiteral12encoded_from:
  207|  1.15k|    pub fn encoded_from(literal: LiteralRef<'_>, interner: &Interner) -> Option<Self> {
  208|  1.15k|        let value_id = interner.get(literal.value())?;
  209|  1.15k|        Some(if literal.is_plain() {
  210|  1.15k|            if let Some(language) = literal.language() {
  211|       |                Self::LanguageTaggedString {
  212|      0|                    value_id,
  213|      0|                    language_id: interner.get(language)?,
  214|       |                }
  215|       |            } else {
  216|  1.15k|                Self::String { value_id }
  217|       |            }
  218|       |        } else {
  219|       |            Self::TypedLiteral {
  220|      0|                value_id,
  221|      0|                datatype: InternedNamedNode::encoded_from(literal.datatype(), interner)?,
  222|       |            }
  223|       |        })
  224|  1.15k|    }
_RNvMs2_NtCs4x4bMiUCp0I_5oxrdf9interningNtB5_15InternedLiteral11decode_from:
  226|  6.78k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> LiteralRef<'a> {
  227|  6.78k|        match self {
  228|  6.78k|            Self::String { value_id } => {
  229|  6.78k|                LiteralRef::new_simple_literal(interner.resolve(*value_id))
  230|       |            }
  231|       |            Self::LanguageTaggedString {
  232|      0|                value_id,
  233|      0|                language_id,
  234|      0|            } => LiteralRef::new_language_tagged_literal_unchecked(
  235|      0|                interner.resolve(*value_id),
  236|      0|                interner.resolve(*language_id),
  237|      0|            ),
  238|      0|            Self::TypedLiteral { value_id, datatype } => LiteralRef::new_typed_literal(
  239|      0|                interner.resolve(*value_id),
  240|      0|                datatype.decode_from(interner),
  241|      0|            ),
  242|       |        }
  243|  6.78k|    }
_RNvMs3_NtCs4x4bMiUCp0I_5oxrdf9interningNtB5_15InternedSubject12encoded_into:
  274|  10.9k|    pub fn encoded_into(node: SubjectRef<'_>, interner: &mut Interner) -> Self {
  275|  10.9k|        match node {
  276|      0|            SubjectRef::NamedNode(node) => {
  277|      0|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  278|       |            }
  279|  10.9k|            SubjectRef::BlankNode(node) => {
  280|  10.9k|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  281|       |            }
  282|       |            #[cfg(feature = "rdf-star")]
  283|      0|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  284|      0|                triple.as_ref(),
  285|      0|                interner,
  286|      0|            ))),
  287|       |        }
  288|  10.9k|    }
_RNvMs3_NtCs4x4bMiUCp0I_5oxrdf9interningNtB5_15InternedSubject12encoded_from:
  290|  5.41k|    pub fn encoded_from(node: SubjectRef<'_>, interner: &Interner) -> Option<Self> {
  291|  5.41k|        Some(match node {
  292|      0|            SubjectRef::NamedNode(node) => {
  293|      0|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  294|       |            }
  295|  5.41k|            SubjectRef::BlankNode(node) => {
  296|  5.41k|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  297|       |            }
  298|       |            #[cfg(feature = "rdf-star")]
  299|      0|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  300|      0|                triple.as_ref(),
  301|      0|                interner,
  302|      0|            )?)),
  303|       |        })
  304|  5.41k|    }
_RNvMs3_NtCs4x4bMiUCp0I_5oxrdf9interningNtB5_15InternedSubject11decode_from:
  306|  5.41k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> SubjectRef<'a> {
  307|  5.41k|        match self {
  308|      0|            Self::NamedNode(node) => SubjectRef::NamedNode(node.decode_from(interner)),
  309|  5.41k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.decode_from(interner)),
  310|       |            #[cfg(feature = "rdf-star")]
  311|      0|            Self::Triple(triple) => SubjectRef::Triple(&interner.triples[triple.as_ref()]),
  312|       |        }
  313|  5.41k|    }
_RNvMs4_NtCs4x4bMiUCp0I_5oxrdf9interningNtB5_17InternedGraphName12encoded_into:
  341|  3.48k|    pub fn encoded_into(node: GraphNameRef<'_>, interner: &mut Interner) -> Self {
  342|  3.48k|        match node {
  343|  3.48k|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  344|      0|            GraphNameRef::NamedNode(node) => {
  345|      0|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  346|       |            }
  347|      0|            GraphNameRef::BlankNode(node) => {
  348|      0|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  349|       |            }
  350|       |        }
  351|  3.48k|    }
_RNvMs4_NtCs4x4bMiUCp0I_5oxrdf9interningNtB5_17InternedGraphName12encoded_from:
  353|  5.41k|    pub fn encoded_from(node: GraphNameRef<'_>, interner: &Interner) -> Option<Self> {
  354|  5.41k|        Some(match node {
  355|  5.41k|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  356|      0|            GraphNameRef::NamedNode(node) => {
  357|      0|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  358|       |            }
  359|      0|            GraphNameRef::BlankNode(node) => {
  360|      0|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  361|       |            }
  362|       |        })
  363|  5.41k|    }
_RNvMs4_NtCs4x4bMiUCp0I_5oxrdf9interningNtB5_17InternedGraphName11decode_from:
  365|  5.41k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> GraphNameRef<'a> {
  366|  5.41k|        match self {
  367|  5.41k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  368|      0|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.decode_from(interner)),
  369|      0|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.decode_from(interner)),
  370|       |        }
  371|  5.41k|    }
_RNvMs5_NtCs4x4bMiUCp0I_5oxrdf9interningNtB5_12InternedTerm12encoded_into:
  400|  10.9k|    pub fn encoded_into(term: TermRef<'_>, interner: &mut Interner) -> Self {
  401|  10.9k|        match term {
  402|  8.42k|            TermRef::NamedNode(term) => {
  403|  8.42k|                Self::NamedNode(InternedNamedNode::encoded_into(term, interner))
  404|       |            }
  405|    102|            TermRef::BlankNode(term) => {
  406|    102|                Self::BlankNode(InternedBlankNode::encoded_into(term, interner))
  407|       |            }
  408|  2.37k|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_into(term, interner)),
  409|       |            #[cfg(feature = "rdf-star")]
  410|      0|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  411|      0|                triple.as_ref(),
  412|      0|                interner,
  413|      0|            ))),
  414|       |        }
  415|  10.9k|    }
_RNvMs5_NtCs4x4bMiUCp0I_5oxrdf9interningNtB5_12InternedTerm12encoded_from:
  417|  5.41k|    pub fn encoded_from(term: TermRef<'_>, interner: &Interner) -> Option<Self> {
  418|  5.41k|        Some(match term {
  419|  4.21k|            TermRef::NamedNode(term) => {
  420|  4.21k|                Self::NamedNode(InternedNamedNode::encoded_from(term, interner)?)
  421|       |            }
  422|     51|            TermRef::BlankNode(term) => {
  423|     51|                Self::BlankNode(InternedBlankNode::encoded_from(term, interner)?)
  424|       |            }
  425|  1.15k|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_from(term, interner)?),
  426|       |            #[cfg(feature = "rdf-star")]
  427|      0|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  428|      0|                triple.as_ref(),
  429|      0|                interner,
  430|      0|            )?)),
  431|       |        })
  432|  5.41k|    }
_RNvMs5_NtCs4x4bMiUCp0I_5oxrdf9interningNtB5_12InternedTerm11decode_from:
  434|  5.41k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> TermRef<'a> {
  435|  5.41k|        match self {
  436|  4.21k|            Self::NamedNode(term) => TermRef::NamedNode(term.decode_from(interner)),
  437|     51|            Self::BlankNode(term) => TermRef::BlankNode(term.decode_from(interner)),
  438|  1.15k|            Self::Literal(term) => TermRef::Literal(term.decode_from(interner)),
  439|       |            #[cfg(feature = "rdf-star")]
  440|      0|            Self::Triple(triple) => TermRef::Triple(&interner.triples[triple.as_ref()]),
  441|       |        }
  442|  5.41k|    }
_RNvXs7_NtCs4x4bMiUCp0I_5oxrdf9interningNtB5_21IdentityHasherBuilderNtNtCshZc3FwCJ069_4core4hash11BuildHasher12build_hasher:
  511|   510k|    fn build_hasher(&self) -> Self::Hasher {
  512|   510k|        Self::Hasher::default()
  513|   510k|    }
_RNvXs8_NtCs4x4bMiUCp0I_5oxrdf9interningNtB5_14IdentityHasherNtNtCshZc3FwCJ069_4core4hash6Hasher6finish:
  522|   510k|    fn finish(&self) -> u64 {
  523|   510k|        self.value
  524|   510k|    }
_RNvXs8_NtCs4x4bMiUCp0I_5oxrdf9interningNtB5_14IdentityHasherNtNtCshZc3FwCJ069_4core4hash6Hasher9write_u64:
  530|   510k|    fn write_u64(&mut self, i: u64) {
  531|   510k|        self.value = i
  532|   510k|    }
_RNCNvMs1_NtCs4x4bMiUCp0I_5oxrdf9interningNtB7_17InternedBlankNode12encoded_into0B9_:
  133|  17.3k|                .or_insert_with(|| blank_node.as_str().into());

_RNvMNtCs4x4bMiUCp0I_5oxrdf7literalNtB2_7Literal6as_refCsmXm2WBU6hV_7rdf_xml:
  129|  65.0k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|  65.0k|        LiteralRef(match &self.0 {
  131|  62.4k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|      0|            LiteralContent::LanguageTaggedString { value, language } => {
  133|      0|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|  2.56k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|  2.56k|                value,
  137|  2.56k|                datatype: datatype.as_ref(),
  138|  2.56k|            },
  139|       |        })
  140|  65.0k|    }
_RNvMst_NtCs4x4bMiUCp0I_5oxrdf7literalNtB5_10LiteralRef5valueCsmXm2WBU6hV_7rdf_xml:
  488|  62.6k|    pub const fn value(self) -> &'a str {
  489|  62.6k|        match self.0 {
  490|  60.0k|            LiteralRefContent::String(value)
  491|      0|            | LiteralRefContent::LanguageTaggedString { value, .. }
  492|  62.6k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  493|  62.6k|        }
  494|  62.6k|    }
_RNvMst_NtCs4x4bMiUCp0I_5oxrdf7literalNtB5_10LiteralRef8datatypeCsmXm2WBU6hV_7rdf_xml:
  513|  2.56k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  514|  2.56k|        match self.0 {
  515|      0|            LiteralRefContent::String(_) => xsd::STRING,
  516|      0|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  517|  2.56k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  518|       |        }
  519|  2.56k|    }
_RNvMst_NtCs4x4bMiUCp0I_5oxrdf7literalNtB5_10LiteralRef8is_plainCsmXm2WBU6hV_7rdf_xml:
  526|  62.6k|    pub const fn is_plain(self) -> bool {
  527|  2.56k|        matches!(
  528|  62.6k|            self.0,
  529|       |            LiteralRefContent::String(_) | LiteralRefContent::LanguageTaggedString { .. }
  530|       |        )
  531|  62.6k|    }
_RNvMst_NtCs4x4bMiUCp0I_5oxrdf7literalNtB5_10LiteralRef8languageCsmXm2WBU6hV_7rdf_xml:
  501|  62.6k|    pub const fn language(self) -> Option<&'a str> {
  502|  62.6k|        match self.0 {
  503|      0|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  504|  62.6k|            _ => None,
  505|       |        }
  506|  62.6k|    }
_RINvMNtCs4x4bMiUCp0I_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCs8f6x4lOZV33_5alloc6string6StringEB5_:
   47|   121k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|   121k|        Self(LiteralContent::String(value.into()))
   49|   121k|    }
_RINvMNtCs4x4bMiUCp0I_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCs8f6x4lOZV33_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   53|  5.44k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|  5.44k|        let value = value.into();
   55|  5.44k|        let datatype = datatype.into();
   56|  5.44k|        Self(if datatype == xsd::STRING {
   57|    313|            LiteralContent::String(value)
   58|       |        } else {
   59|  5.12k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|  5.44k|    }
_RNvMst_NtCs4x4bMiUCp0I_5oxrdf7literalNtB5_10LiteralRef18new_simple_literalB7_:
  459|  6.78k|    pub const fn new_simple_literal(value: &'a str) -> Self {
  460|  6.78k|        LiteralRef(LiteralRefContent::String(value))
  461|  6.78k|    }
_RNvMst_NtCs4x4bMiUCp0I_5oxrdf7literalNtB5_10LiteralRef5valueB7_:
  488|  3.53k|    pub const fn value(self) -> &'a str {
  489|  3.53k|        match self.0 {
  490|  3.53k|            LiteralRefContent::String(value)
  491|      0|            | LiteralRefContent::LanguageTaggedString { value, .. }
  492|  3.53k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  493|  3.53k|        }
  494|  3.53k|    }
_RNvMst_NtCs4x4bMiUCp0I_5oxrdf7literalNtB5_10LiteralRef8languageB7_:
  501|  3.53k|    pub const fn language(self) -> Option<&'a str> {
  502|  3.53k|        match self.0 {
  503|      0|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  504|  3.53k|            _ => None,
  505|       |        }
  506|  3.53k|    }
_RNvMst_NtCs4x4bMiUCp0I_5oxrdf7literalNtB5_10LiteralRef8is_plainB7_:
  526|  3.53k|    pub const fn is_plain(self) -> bool {
  527|      0|        matches!(
  528|  3.53k|            self.0,
  529|       |            LiteralRefContent::String(_) | LiteralRefContent::LanguageTaggedString { .. }
  530|       |        )
  531|  3.53k|    }

_RNvMNtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB2_9NamedNode6as_refCsmXm2WBU6hV_7rdf_xml:
   54|   780k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|   780k|        NamedNodeRef::new_unchecked(&self.iri)
   56|   780k|    }
_RNvMs4_NtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCsmXm2WBU6hV_7rdf_xml:
  138|  2.89k|    pub fn into_owned(self) -> NamedNode {
  139|  2.89k|        NamedNode::new_unchecked(self.iri)
  140|  2.89k|    }
_RNvMs4_NtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCsmXm2WBU6hV_7rdf_xml:
  128|   780k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   780k|        Self { iri }
  130|   780k|    }
_RNvMs4_NtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCsmXm2WBU6hV_7rdf_xml:
  133|  10.8k|    pub const fn as_str(self) -> &'a str {
  134|  10.8k|        self.iri
  135|  10.8k|    }
_RNvMNtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB2_9NamedNode6as_strCs7S9FTsUwoO8_8oxrdfxml:
   44|   690k|    pub fn as_str(&self) -> &str {
   45|   690k|        self.iri.as_str()
   46|   690k|    }
_RNvMs4_NtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCs7S9FTsUwoO8_8oxrdfxml:
  133|   446k|    pub const fn as_str(self) -> &'a str {
  134|   446k|        self.iri
  135|   446k|    }
_RNvXs0_NtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCshZc3FwCJ069_4core3cmp9PartialEqeE2eqCs7S9FTsUwoO8_8oxrdfxml:
   68|   690k|    fn eq(&self, other: &str) -> bool {
   69|   690k|        self.as_str() == other
   70|   690k|    }
_RNvMNtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|  5.44k|    pub fn as_str(&self) -> &str {
   45|  5.44k|        self.iri.as_str()
   46|  5.44k|    }
_RNvMs4_NtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedB7_:
  128|   467k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   467k|        Self { iri }
  130|   467k|    }
_RNvMs4_NtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|  34.4k|    pub const fn as_str(self) -> &'a str {
  134|  34.4k|        self.iri
  135|  34.4k|    }
_RNvMs4_NtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|   674k|    pub fn into_owned(self) -> NamedNode {
  139|   674k|        NamedNode::new_unchecked(self.iri)
  140|   674k|    }
_RNvXs6_NtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCshZc3FwCJ069_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|   674k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|   674k|        node.into_owned()
  154|   674k|    }
_RNvXs9_NtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCshZc3FwCJ069_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|  5.44k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|  5.44k|        self.as_str() == other.as_str()
  175|  5.44k|    }
_RINvMNtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCs8f6x4lOZV33_5alloc6string6StringEB5_:
   39|  1.18M|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  1.18M|        Self { iri: iri.into() }
   41|  1.18M|    }
_RINvMNtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|   677k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   677k|        Self { iri: iri.into() }
   41|   677k|    }

_RNvMs16_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB6_6Triple6as_refCsmXm2WBU6hV_7rdf_xml:
  837|   420k|    pub fn as_ref(&self) -> TripleRef<'_> {
  838|   420k|        TripleRef {
  839|   420k|            subject: self.subject.as_ref(),
  840|   420k|            predicate: self.predicate.as_ref(),
  841|   420k|            object: self.object.as_ref(),
  842|   420k|        }
  843|   420k|    }
_RNvMsc_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB5_7Subject6as_refCsmXm2WBU6hV_7rdf_xml:
  181|   807k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|   807k|        match self {
  183|  11.9k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|   795k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|      0|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|   807k|    }
_RNvMsn_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB5_10SubjectRef10into_ownedCsmXm2WBU6hV_7rdf_xml:
  294|   347k|    pub fn into_owned(self) -> Subject {
  295|   347k|        match self {
  296|  2.89k|            Self::NamedNode(node) => Subject::NamedNode(node.into_owned()),
  297|   344k|            Self::BlankNode(node) => Subject::BlankNode(node.into_owned()),
  298|       |            #[cfg(feature = "rdf-star")]
  299|      0|            Self::Triple(triple) => Subject::Triple(Box::new(triple.clone())),
  300|       |        }
  301|   347k|    }
_RNvMsy_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB5_4Term6as_refCsmXm2WBU6hV_7rdf_xml:
  418|   420k|    pub fn as_ref(&self) -> TermRef<'_> {
  419|   420k|        match self {
  420|   345k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  421|  9.54k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  422|  65.0k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  423|       |            #[cfg(feature = "rdf-star")]
  424|      0|            Self::Triple(triple) => TermRef::Triple(triple),
  425|       |        }
  426|   420k|    }
_RNvXs1a_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB6_9TripleRefINtNtCshZc3FwCJ069_4core7convert4FromRNtB6_6TripleE4fromCsmXm2WBU6hV_7rdf_xml:
  928|   420k|    fn from(triple: &'a Triple) -> Self {
  929|   420k|        triple.as_ref()
  930|   420k|    }
_RNvXsL_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB5_4TermINtNtCshZc3FwCJ069_4core7convert4FromNtB5_7SubjectE4fromCs7S9FTsUwoO8_8oxrdfxml:
  521|  25.3k|    fn from(node: Subject) -> Self {
  522|  25.3k|        match node {
  523|  5.90k|            Subject::NamedNode(node) => node.into(),
  524|  19.4k|            Subject::BlankNode(node) => node.into(),
  525|       |            #[cfg(feature = "rdf-star")]
  526|      0|            Subject::Triple(triple) => Self::Triple(triple),
  527|       |        }
  528|  25.3k|    }
_RNvXse_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB5_7SubjectINtNtCshZc3FwCJ069_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromCs7S9FTsUwoO8_8oxrdfxml:
  200|  6.44k|    fn from(node: NamedNode) -> Self {
  201|  6.44k|        Self::NamedNode(node)
  202|  6.44k|    }
_RINvMs16_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB7_6Triple3newNtB7_7SubjectNtNtB9_10named_node12NamedNodeRefNtB15_9NamedNodeECs7S9FTsUwoO8_8oxrdfxml:
  797|   674k|    pub fn new(
  798|   674k|        subject: impl Into<Subject>,
  799|   674k|        predicate: impl Into<NamedNode>,
  800|   674k|        object: impl Into<Term>,
  801|   674k|    ) -> Self {
  802|   674k|        Self {
  803|   674k|            subject: subject.into(),
  804|   674k|            predicate: predicate.into(),
  805|   674k|            object: object.into(),
  806|   674k|        }
  807|   674k|    }
_RINvMs16_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB7_6Triple3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtB7_4TermECs7S9FTsUwoO8_8oxrdfxml:
  797|   145k|    pub fn new(
  798|   145k|        subject: impl Into<Subject>,
  799|   145k|        predicate: impl Into<NamedNode>,
  800|   145k|        object: impl Into<Term>,
  801|   145k|    ) -> Self {
  802|   145k|        Self {
  803|   145k|            subject: subject.into(),
  804|   145k|            predicate: predicate.into(),
  805|   145k|            object: object.into(),
  806|   145k|        }
  807|   145k|    }
_RINvMs16_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB7_6Triple3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtNtB9_7literal7LiteralECs7S9FTsUwoO8_8oxrdfxml:
  797|  6.41k|    pub fn new(
  798|  6.41k|        subject: impl Into<Subject>,
  799|  6.41k|        predicate: impl Into<NamedNode>,
  800|  6.41k|        object: impl Into<Term>,
  801|  6.41k|    ) -> Self {
  802|  6.41k|        Self {
  803|  6.41k|            subject: subject.into(),
  804|  6.41k|            predicate: predicate.into(),
  805|  6.41k|            object: object.into(),
  806|  6.41k|        }
  807|  6.41k|    }
_RNvXse_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB5_7SubjectINtNtCshZc3FwCJ069_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|  5.20k|    fn from(node: NamedNode) -> Self {
  201|  5.20k|        Self::NamedNode(node)
  202|  5.20k|    }
_RNvXsg_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB5_7SubjectINtNtCshZc3FwCJ069_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|   698k|    fn from(node: BlankNode) -> Self {
  215|   698k|        Self::BlankNode(node)
  216|   698k|    }
_RNvXsA_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB5_4TermINtNtCshZc3FwCJ069_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  438|   680k|    fn from(node: NamedNode) -> Self {
  439|   680k|        Self::NamedNode(node)
  440|   680k|    }
_RNvXsC_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB5_4TermINtNtCshZc3FwCJ069_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  452|  19.4k|    fn from(node: BlankNode) -> Self {
  453|  19.4k|        Self::BlankNode(node)
  454|  19.4k|    }
_RNvXsE_NtCs4x4bMiUCp0I_5oxrdf6tripleNtB5_4TermINtNtCshZc3FwCJ069_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  466|   126k|    fn from(literal: Literal) -> Self {
  467|   126k|        Self::Literal(literal)
  468|   126k|    }

_RINvMs0_NtCs7S9FTsUwoO8_8oxrdfxml5errorNtB6_17RdfXmlSyntaxError3msgNtNtCs8f6x4lOZV33_5alloc6string6StringEB8_:
   67|   393k|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   68|   393k|        Self(SyntaxErrorKind::Msg(msg.into()))
   69|   393k|    }
_RINvMs0_NtCs7S9FTsUwoO8_8oxrdfxml5errorNtB6_17RdfXmlSyntaxError3msgReEB8_:
   67|   317k|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   68|   317k|        Self(SyntaxErrorKind::Msg(msg.into()))
   69|   317k|    }
_RNvXs_NtCs7S9FTsUwoO8_8oxrdfxml5errorNtB4_16RdfXmlParseErrorINtNtCshZc3FwCJ069_4core7convert4FromNtNtCsa7QYSr9aLYT_9quick_xml6errors5ErrorE4fromB6_:
   30|   976k|    fn from(error: quick_xml::Error) -> Self {
   31|   976k|        match error {
   32|      0|            quick_xml::Error::Io(error) => {
   33|      0|                Self::Io(Arc::try_unwrap(error).unwrap_or_else(|e| io::Error::new(e.kind(), e)))
   34|       |            }
   35|   976k|            _ => Self::Syntax(RdfXmlSyntaxError(SyntaxErrorKind::Xml(error))),
   36|       |        }
   37|   976k|    }
_RNvMs0_NtCs7S9FTsUwoO8_8oxrdfxml5errorNtB5_17RdfXmlSyntaxError11invalid_iri:
   71|   172k|    pub(crate) fn invalid_iri(iri: String, error: IriParseError) -> Self {
   72|   172k|        Self(SyntaxErrorKind::InvalidIri { iri, error })
   73|   172k|    }

_RNvMNtCs7S9FTsUwoO8_8oxrdfxml6parserNtB2_12RdfXmlParser3newCsmXm2WBU6hV_7rdf_xml:
   64|  94.1k|    pub fn new() -> Self {
   65|  94.1k|        Self::default()
   66|  94.1k|    }
_RNvMNtCs7S9FTsUwoO8_8oxrdfxml6parserNtB2_12RdfXmlParser9uncheckedCsmXm2WBU6hV_7rdf_xml:
   74|  1.90k|    pub fn unchecked(mut self) -> Self {
   75|  1.90k|        self.unchecked = true;
   76|  1.90k|        self
   77|  1.90k|    }
_RINvMNtCs7S9FTsUwoO8_8oxrdfxml6parserNtB3_12RdfXmlParser5parseRShEB5_:
  201|  94.1k|    fn parse<T>(&self, reader: T) -> InternalRdfXmlParser<T> {
  202|  94.1k|        let mut reader = NsReader::from_reader(reader);
  203|  94.1k|        reader.config_mut().expand_empty_elements = true;
  204|  94.1k|        InternalRdfXmlParser {
  205|  94.1k|            reader,
  206|  94.1k|            state: vec![RdfXmlState::Doc {
  207|  94.1k|                base_iri: self.base.clone(),
  208|  94.1k|            }],
  209|  94.1k|            custom_entities: HashMap::default(),
  210|  94.1k|            in_literal_depth: 0,
  211|  94.1k|            known_rdf_id: HashSet::default(),
  212|  94.1k|            is_end: false,
  213|  94.1k|            unchecked: self.unchecked,
  214|  94.1k|        }
  215|  94.1k|    }
_RNvMs5_NtCs7S9FTsUwoO8_8oxrdfxml6parserINtB5_20InternalRdfXmlParserRShE11parse_eventB7_:
  787|  4.82M|    fn parse_event(
  788|  4.82M|        &mut self,
  789|  4.82M|        event: Event<'_>,
  790|  4.82M|        results: &mut Vec<Triple>,
  791|  4.82M|    ) -> Result<(), RdfXmlParseError> {
  792|  4.82M|        match event {
  793|  2.05M|            Event::Start(event) => self.parse_start_event(&event, results),
  794|   617k|            Event::End(event) => self.parse_end_event(&event, results),
  795|      0|            Event::Empty(_) => Err(RdfXmlSyntaxError::msg(
  796|      0|                "The expand_empty_elements option must be enabled",
  797|      0|            )
  798|      0|            .into()),
  799|  1.93M|            Event::Text(event) => self.parse_text_event(&event),
  800|    150|            Event::CData(event) => self.parse_text_event(&event.escape()?),
  801|  25.9k|            Event::Comment(_) | Event::PI(_) => Ok(()),
  802|  98.4k|            Event::Decl(decl) => {
  803|  98.4k|                if let Some(encoding) = decl.encoding() {
  804|  92.0k|                    if !is_utf8(&encoding?) {
  805|  32.9k|                        return Err(RdfXmlSyntaxError::msg(
  806|  32.9k|                            "Only UTF-8 is supported by the RDF/XML parser",
  807|  32.9k|                        )
  808|  32.9k|                        .into());
  809|  46.5k|                    }
  810|  6.37k|                }
  811|  52.9k|                Ok(())
  812|       |            }
  813|      0|            Event::DocType(dt) => self.parse_doctype(&dt),
  814|       |            Event::Eof => {
  815|  94.1k|                self.is_end = true;
  816|  94.1k|                Ok(())
  817|       |            }
  818|       |        }
  819|  4.82M|    }
_RNvMs5_NtCs7S9FTsUwoO8_8oxrdfxml6parserINtB5_20InternalRdfXmlParserRShE17parse_start_eventB7_:
  859|  2.05M|    fn parse_start_event(
  860|  2.05M|        &mut self,
  861|  2.05M|        event: &BytesStart<'_>,
  862|  2.05M|        results: &mut Vec<Triple>,
  863|  2.05M|    ) -> Result<(), RdfXmlParseError> {
  864|       |        #[derive(PartialEq, Eq)]
  865|       |        enum RdfXmlParseType {
  866|       |            Default,
  867|       |            Collection,
  868|       |            Literal,
  869|       |            Resource,
  870|       |            Other,
  871|       |        }
  872|       |
  873|       |        #[derive(PartialEq, Eq)]
  874|       |        enum RdfXmlNextProduction {
  875|       |            Rdf,
  876|       |            NodeElt,
  877|       |            PropertyElt { subject: Subject },
  878|       |        }
  879|       |
  880|       |        // Literal case
  881|  2.05M|        if let Some(RdfXmlState::ParseTypeLiteralPropertyElt { writer, .. }) = self.state.last_mut()
  882|       |        {
  883|  52.6k|            let mut clean_event = BytesStart::new(
  884|  57.9k|                self.reader
  885|  57.9k|                    .decoder()
  886|  57.9k|                    .decode(event.name().as_ref())?
  887|  52.6k|                    .to_string(),
  888|       |            );
  889|  52.6k|            for attr in event.attributes() {
  890|  30.4k|                clean_event.push_attribute(attr.map_err(Error::InvalidAttr)?);
  891|       |            }
  892|  34.8k|            writer.write_event(Event::Start(clean_event))?;
  893|  34.8k|            self.in_literal_depth += 1;
  894|  34.8k|            return Ok(());
  895|  1.99M|        }
  896|       |
  897|  1.99M|        let tag_name = self.resolve_tag_name(event.name())?;
  898|       |
  899|       |        // We read attributes
  900|  1.52M|        let (mut language, mut base_iri) = if let Some(current_state) = self.state.last() {
  901|  1.48M|            (
  902|  1.48M|                current_state.language().cloned(),
  903|  1.48M|                current_state.base_iri().cloned(),
  904|  1.48M|            )
  905|       |        } else {
  906|  30.6k|            (None, None)
  907|       |        };
  908|       |
  909|  1.52M|        let mut id_attr = None;
  910|  1.52M|        let mut node_id_attr = None;
  911|  1.52M|        let mut about_attr = None;
  912|  1.52M|        let mut property_attrs = Vec::default();
  913|  1.52M|        let mut resource_attr = None;
  914|  1.52M|        let mut datatype_attr = None;
  915|  1.52M|        let mut parse_type = RdfXmlParseType::Default;
  916|  1.52M|        let mut type_attr = None;
  917|       |
  918|  1.52M|        for attribute in event.attributes() {
  919|   996k|            let attribute = attribute.map_err(Error::InvalidAttr)?;
  920|   951k|            if attribute.key.as_ref().starts_with(b"xml") {
  921|   468k|                if attribute.key.as_ref() == b"xml:lang" {
  922|      0|                    let tag = self.convert_attribute(&attribute)?.to_ascii_lowercase();
  923|      0|                    language = Some(if self.unchecked {
  924|      0|                        tag
  925|       |                    } else {
  926|      0|                        LanguageTag::parse(tag.to_ascii_lowercase())
  927|      0|                            .map_err(|error| RdfXmlSyntaxError::invalid_language_tag(tag, error))?
  928|      0|                            .into_inner()
  929|       |                    });
  930|   468k|                } else if attribute.key.as_ref() == b"xml:base" {
  931|      0|                    let iri = self.convert_attribute(&attribute)?;
  932|      0|                    base_iri = Some(if self.unchecked {
  933|      0|                        Iri::parse_unchecked(iri.clone())
  934|       |                    } else {
  935|      0|                        Iri::parse(iri.clone())
  936|      0|                            .map_err(|error| RdfXmlSyntaxError::invalid_iri(iri, error))?
  937|       |                    })
  938|   468k|                } else {
  939|   468k|                    // We ignore other xml attributes
  940|   468k|                }
  941|       |            } else {
  942|   483k|                let attribute_url = self.resolve_attribute_name(attribute.key)?;
  943|   476k|                if *attribute_url == *RDF_ID {
  944|  6.21k|                    let mut id = self.convert_attribute(&attribute)?;
  945|  5.51k|                    if !is_nc_name(&id) {
  946|  2.88k|                        return Err(RdfXmlSyntaxError::msg(format!(
  947|  2.88k|                            "{id} is not a valid rdf:ID value"
  948|  2.88k|                        ))
  949|  2.88k|                        .into());
  950|  2.63k|                    }
  951|  2.63k|                    id.insert(0, '#');
  952|  2.63k|                    id_attr = Some(id);
  953|   470k|                } else if *attribute_url == *RDF_BAG_ID {
  954|  11.8k|                    let bag_id = self.convert_attribute(&attribute)?;
  955|  10.1k|                    if !is_nc_name(&bag_id) {
  956|  6.51k|                        return Err(RdfXmlSyntaxError::msg(format!(
  957|  6.51k|                            "{bag_id} is not a valid rdf:bagID value"
  958|  6.51k|                        ))
  959|  6.51k|                        .into());
  960|  3.63k|                    }
  961|   458k|                } else if *attribute_url == *RDF_NODE_ID {
  962|   376k|                    let id = self.convert_attribute(&attribute)?;
  963|   374k|                    if !is_nc_name(&id) {
  964|  4.06k|                        return Err(RdfXmlSyntaxError::msg(format!(
  965|  4.06k|                            "{id} is not a valid rdf:nodeID value"
  966|  4.06k|                        ))
  967|  4.06k|                        .into());
  968|   370k|                    }
  969|   370k|                    node_id_attr = Some(BlankNode::new_unchecked(id));
  970|  81.4k|                } else if *attribute_url == *RDF_ABOUT {
  971|  10.5k|                    about_attr = Some(attribute);
  972|  70.9k|                } else if *attribute_url == *RDF_RESOURCE {
  973|  11.6k|                    resource_attr = Some(attribute);
  974|  59.2k|                } else if *attribute_url == *RDF_DATATYPE {
  975|  11.5k|                    datatype_attr = Some(attribute);
  976|  47.7k|                } else if *attribute_url == *RDF_PARSE_TYPE {
  977|  10.5k|                    parse_type = match attribute.value.as_ref() {
  978|  10.5k|                        b"Collection" => RdfXmlParseType::Collection,
  979|  9.18k|                        b"Literal" => RdfXmlParseType::Literal,
  980|  5.63k|                        b"Resource" => RdfXmlParseType::Resource,
  981|  10.5k|                        _ => RdfXmlParseType::Other,
  982|       |                    };
  983|  37.1k|                } else if attribute_url == rdf::TYPE.as_str() {
  984|  5.70k|                    type_attr = Some(attribute);
  985|  31.4k|                } else if RESERVED_RDF_ATTRIBUTES.contains(&&*attribute_url) {
  986|  4.02k|                    return Err(RdfXmlSyntaxError::msg(format!(
  987|  4.02k|                        "{attribute_url} is not a valid attribute"
  988|  4.02k|                    ))
  989|  4.02k|                    .into());
  990|       |                } else {
  991|  27.4k|                    property_attrs.push((
  992|  27.4k|                        self.parse_iri(attribute_url)?,
  993|  22.1k|                        self.convert_attribute(&attribute)?,
  994|       |                    ));
  995|       |                }
  996|       |            }
  997|       |        }
  998|       |
  999|       |        // Parsing with the base URI
 1000|  1.43M|        let id_attr = match id_attr {
 1001|  1.33k|            Some(iri) => {
 1002|  1.33k|                let iri = self.resolve_iri(&base_iri, iri)?;
 1003|      0|                if !self.unchecked {
 1004|      0|                    if self.known_rdf_id.contains(iri.as_str()) {
 1005|      0|                        return Err(RdfXmlSyntaxError::msg(format!(
 1006|      0|                            "{iri} has already been used as rdf:ID value"
 1007|      0|                        ))
 1008|      0|                        .into());
 1009|      0|                    }
 1010|      0|                    self.known_rdf_id.insert(iri.as_str().into());
 1011|      0|                }
 1012|      0|                Some(iri)
 1013|       |            }
 1014|  1.43M|            None => None,
 1015|       |        };
 1016|  1.43M|        let about_attr = match about_attr {
 1017|  9.43k|            Some(attr) => Some(self.convert_iri_attribute(&base_iri, &attr)?),
 1018|  1.42M|            None => None,
 1019|       |        };
 1020|  1.42M|        let resource_attr = match resource_attr {
 1021|  10.5k|            Some(attr) => Some(self.convert_iri_attribute(&base_iri, &attr)?),
 1022|  1.41M|            None => None,
 1023|       |        };
 1024|  1.42M|        let datatype_attr = match datatype_attr {
 1025|  10.5k|            Some(attr) => Some(self.convert_iri_attribute(&base_iri, &attr)?),
 1026|  1.41M|            None => None,
 1027|       |        };
 1028|  1.42M|        let type_attr = match type_attr {
 1029|  4.68k|            Some(attr) => Some(self.convert_iri_attribute(&base_iri, &attr)?),
 1030|  1.42M|            None => None,
 1031|       |        };
 1032|       |
 1033|  1.42M|        let expected_production = match self.state.last() {
 1034|   182k|            Some(RdfXmlState::Doc { .. }) => RdfXmlNextProduction::Rdf,
 1035|       |            Some(
 1036|       |                RdfXmlState::Rdf { .. }
 1037|       |                | RdfXmlState::PropertyElt { .. }
 1038|       |                | RdfXmlState::ParseTypeCollectionPropertyElt { .. },
 1039|   710k|            ) => RdfXmlNextProduction::NodeElt,
 1040|   507k|            Some(RdfXmlState::NodeElt { subject, .. }) => RdfXmlNextProduction::PropertyElt {
 1041|   507k|                subject: subject.clone(),
 1042|   507k|            },
 1043|       |            Some(RdfXmlState::ParseTypeLiteralPropertyElt { .. }) => {
 1044|      0|                return Err(
 1045|      0|                    RdfXmlSyntaxError::msg("ParseTypeLiteralPropertyElt production children should never be considered as a RDF/XML content").into()
 1046|      0|                );
 1047|       |            }
 1048|       |            None => {
 1049|  23.0k|                return Err(RdfXmlSyntaxError::msg(
 1050|  23.0k|                    "No state in the stack: the XML is not balanced",
 1051|  23.0k|                )
 1052|  23.0k|                .into());
 1053|       |            }
 1054|       |        };
 1055|       |
 1056|  1.40M|        let new_state = match expected_production {
 1057|       |            RdfXmlNextProduction::Rdf => {
 1058|   182k|                if *tag_name == *RDF_RDF {
 1059|  47.4k|                    RdfXmlState::Rdf { base_iri, language }
 1060|   134k|                } else if RESERVED_RDF_ELEMENTS.contains(&&*tag_name) {
 1061|  13.7k|                    return Err(RdfXmlSyntaxError::msg(format!(
 1062|  13.7k|                        "Invalid node element tag name: {tag_name}"
 1063|  13.7k|                    ))
 1064|  13.7k|                    .into());
 1065|       |                } else {
 1066|       |                    Self::build_node_elt(
 1067|   120k|                        self.parse_iri(tag_name)?,
 1068|  30.8k|                        base_iri,
 1069|  30.8k|                        language,
 1070|  30.8k|                        id_attr,
 1071|  30.8k|                        node_id_attr,
 1072|  30.8k|                        about_attr,
 1073|  30.8k|                        type_attr,
 1074|  30.8k|                        property_attrs,
 1075|  30.8k|                        results,
 1076|      0|                    )?
 1077|       |                }
 1078|       |            }
 1079|       |            RdfXmlNextProduction::NodeElt => {
 1080|   710k|                if RESERVED_RDF_ELEMENTS.contains(&&*tag_name) {
 1081|  21.7k|                    return Err(RdfXmlSyntaxError::msg(format!(
 1082|  21.7k|                        "Invalid property element tag name: {tag_name}"
 1083|  21.7k|                    ))
 1084|  21.7k|                    .into());
 1085|   688k|                }
 1086|   688k|                Self::build_node_elt(
 1087|   688k|                    self.parse_iri(tag_name)?,
 1088|   659k|                    base_iri,
 1089|   659k|                    language,
 1090|   659k|                    id_attr,
 1091|   659k|                    node_id_attr,
 1092|   659k|                    about_attr,
 1093|   659k|                    type_attr,
 1094|   659k|                    property_attrs,
 1095|   659k|                    results,
 1096|      0|                )?
 1097|       |            }
 1098|   507k|            RdfXmlNextProduction::PropertyElt { subject } => {
 1099|   507k|                let iri = if *tag_name == *RDF_LI {
 1100|  5.72k|                    let Some(RdfXmlState::NodeElt { li_counter, .. }) = self.state.last_mut()
 1101|       |                    else {
 1102|      0|                        return Err(RdfXmlSyntaxError::msg(format!(
 1103|      0|                            "Invalid property element tag name: {tag_name}"
 1104|      0|                        ))
 1105|      0|                        .into());
 1106|       |                    };
 1107|  5.72k|                    *li_counter += 1;
 1108|  5.72k|                    NamedNode::new_unchecked(format!(
 1109|  5.72k|                        "http://www.w3.org/1999/02/22-rdf-syntax-ns#_{li_counter}"
 1110|  5.72k|                    ))
 1111|   501k|                } else if RESERVED_RDF_ELEMENTS.contains(&&*tag_name)
 1112|   482k|                    || *tag_name == *RDF_DESCRIPTION
 1113|       |                {
 1114|  24.5k|                    return Err(RdfXmlSyntaxError::msg(format!(
 1115|  24.5k|                        "Invalid property element tag name: {tag_name}"
 1116|  24.5k|                    ))
 1117|  24.5k|                    .into());
 1118|       |                } else {
 1119|   477k|                    self.parse_iri(tag_name)?
 1120|       |                };
 1121|   440k|                match parse_type {
 1122|       |                    RdfXmlParseType::Default => {
 1123|   437k|                        if resource_attr.is_some()
 1124|   431k|                            || node_id_attr.is_some()
 1125|   420k|                            || !property_attrs.is_empty()
 1126|       |                        {
 1127|  20.2k|                            let object = match (resource_attr, node_id_attr)
 1128|       |                    {
 1129|  6.44k|                        (Some(resource_attr), None) => Subject::from(resource_attr),
 1130|  11.0k|                        (None, Some(node_id_attr)) => node_id_attr.into(),
 1131|  2.79k|                        (None, None) => BlankNode::default().into(),
 1132|      0|                        (Some(_), Some(_)) => return Err(RdfXmlSyntaxError::msg("Not both rdf:resource and rdf:nodeID could be set at the same time").into())
 1133|       |                    };
 1134|  20.2k|                            Self::emit_property_attrs(&object, property_attrs, &language, results);
 1135|  20.2k|                            if let Some(type_attr) = type_attr {
 1136|    270|                                results.push(Triple::new(object.clone(), rdf::TYPE, type_attr));
 1137|  19.9k|                            }
 1138|  20.2k|                            RdfXmlState::PropertyElt {
 1139|  20.2k|                                iri,
 1140|  20.2k|                                base_iri,
 1141|  20.2k|                                language,
 1142|  20.2k|                                subject,
 1143|  20.2k|                                object: Some(NodeOrText::Node(object)),
 1144|  20.2k|                                id_attr,
 1145|  20.2k|                                datatype_attr,
 1146|  20.2k|                            }
 1147|       |                        } else {
 1148|   417k|                            RdfXmlState::PropertyElt {
 1149|   417k|                                iri,
 1150|   417k|                                base_iri,
 1151|   417k|                                language,
 1152|   417k|                                subject,
 1153|   417k|                                object: None,
 1154|   417k|                                id_attr,
 1155|   417k|                                datatype_attr,
 1156|   417k|                            }
 1157|       |                        }
 1158|       |                    }
 1159|      0|                    RdfXmlParseType::Literal => RdfXmlState::ParseTypeLiteralPropertyElt {
 1160|      0|                        iri,
 1161|      0|                        base_iri,
 1162|      0|                        language,
 1163|      0|                        subject,
 1164|      0|                        writer: Writer::new(Vec::default()),
 1165|      0|                        id_attr,
 1166|      0|                        emit: true,
 1167|      0|                    },
 1168|      0|                    RdfXmlParseType::Resource => Self::build_parse_type_resource_property_elt(
 1169|      0|                        iri, base_iri, language, subject, id_attr, results,
 1170|      0|                    ),
 1171|      0|                    RdfXmlParseType::Collection => RdfXmlState::ParseTypeCollectionPropertyElt {
 1172|      0|                        iri,
 1173|      0|                        base_iri,
 1174|      0|                        language,
 1175|      0|                        subject,
 1176|      0|                        objects: Vec::default(),
 1177|      0|                        id_attr,
 1178|      0|                    },
 1179|  2.41k|                    RdfXmlParseType::Other => RdfXmlState::ParseTypeLiteralPropertyElt {
 1180|  2.41k|                        iri,
 1181|  2.41k|                        base_iri,
 1182|  2.41k|                        language,
 1183|  2.41k|                        subject,
 1184|  2.41k|                        writer: Writer::new(Vec::default()),
 1185|  2.41k|                        id_attr,
 1186|  2.41k|                        emit: false,
 1187|  2.41k|                    },
 1188|       |                }
 1189|       |            }
 1190|       |        };
 1191|  1.17M|        self.state.push(new_state);
 1192|  1.17M|        Ok(())
 1193|  2.05M|    }
_RNvMs5_NtCs7S9FTsUwoO8_8oxrdfxml6parserINtB5_20InternalRdfXmlParserRShE15parse_end_eventB7_:
 1195|   617k|    fn parse_end_event(
 1196|   617k|        &mut self,
 1197|   617k|        event: &BytesEnd<'_>,
 1198|   617k|        results: &mut Vec<Triple>,
 1199|   617k|    ) -> Result<(), RdfXmlParseError> {
 1200|   617k|        // Literal case
 1201|   617k|        if self.in_literal_depth > 0 {
 1202|  11.2k|            if let Some(RdfXmlState::ParseTypeLiteralPropertyElt { writer, .. }) =
 1203|  11.2k|                self.state.last_mut()
 1204|       |            {
 1205|  11.2k|                writer.write_event(Event::End(BytesEnd::new(
 1206|  11.2k|                    self.reader.decoder().decode(event.name().as_ref())?,
 1207|      0|                )))?;
 1208|  8.70k|                self.in_literal_depth -= 1;
 1209|  8.70k|                return Ok(());
 1210|      0|            }
 1211|   606k|        }
 1212|       |
 1213|   606k|        if let Some(current_state) = self.state.pop() {
 1214|   579k|            self.end_state(current_state, results)?;
 1215|  26.4k|        }
 1216|   606k|        Ok(())
 1217|   617k|    }
_RNvMs5_NtCs7S9FTsUwoO8_8oxrdfxml6parserINtB5_20InternalRdfXmlParserRShE16parse_text_eventB7_:
 1219|  1.93M|    fn parse_text_event(&mut self, event: &BytesText<'_>) -> Result<(), RdfXmlParseError> {
 1220|  1.93M|        let text = event.unescape_with(|e| self.resolve_entity(e))?.to_string();
 1221|  1.27M|        match self.state.last_mut() {
 1222|   121k|            Some(RdfXmlState::PropertyElt { object, .. }) => {
 1223|   121k|                if !event.iter().copied().all(is_whitespace) {
 1224|   119k|                    *object = Some(NodeOrText::Text(text));
 1225|   119k|                }
 1226|   121k|                Ok(())
 1227|       |            }
 1228|  21.8k|            Some(RdfXmlState::ParseTypeLiteralPropertyElt { writer, .. }) => {
 1229|  21.8k|                writer.write_event(Event::Text(BytesText::new(&text)))?;
 1230|  21.8k|                Ok(())
 1231|       |            }
 1232|       |            _ => {
 1233|  1.13M|                if event.iter().copied().all(is_whitespace) {
 1234|   868k|                    Ok(())
 1235|       |                } else {
 1236|   263k|                    Err(RdfXmlSyntaxError::msg(format!("Unexpected text event: '{text}'")).into())
 1237|       |                }
 1238|       |            }
 1239|       |        }
 1240|  1.93M|    }
_RNCNvMs5_NtCs7S9FTsUwoO8_8oxrdfxml6parserINtB7_20InternalRdfXmlParserRShE16parse_text_event0B9_:
 1220|   136k|        let text = event.unescape_with(|e| self.resolve_entity(e))?.to_string();
_RNvMs5_NtCs7S9FTsUwoO8_8oxrdfxml6parserINtB5_20InternalRdfXmlParserRShE16resolve_tag_nameB7_:
 1242|  1.99M|    fn resolve_tag_name(&self, qname: QName<'_>) -> Result<String, RdfXmlParseError> {
 1243|  1.99M|        let (namespace, local_name) = self.reader.resolve_element(qname);
 1244|  1.99M|        self.resolve_ns_name(namespace, local_name)
 1245|  1.99M|    }
_RNvMs5_NtCs7S9FTsUwoO8_8oxrdfxml6parserINtB5_20InternalRdfXmlParserRShE22resolve_attribute_nameB7_:
 1247|   483k|    fn resolve_attribute_name(&self, qname: QName<'_>) -> Result<String, RdfXmlParseError> {
 1248|   483k|        let (namespace, local_name) = self.reader.resolve_attribute(qname);
 1249|   483k|        self.resolve_ns_name(namespace, local_name)
 1250|   483k|    }
_RNvMs5_NtCs7S9FTsUwoO8_8oxrdfxml6parserINtB5_20InternalRdfXmlParserRShE15resolve_ns_nameB7_:
 1252|  2.47M|    fn resolve_ns_name(
 1253|  2.47M|        &self,
 1254|  2.47M|        namespace: ResolveResult<'_>,
 1255|  2.47M|        local_name: LocalName<'_>,
 1256|  2.47M|    ) -> Result<String, RdfXmlParseError> {
 1257|  2.47M|        match namespace {
 1258|  2.14M|            ResolveResult::Bound(ns) => {
 1259|  2.14M|                let mut value = Vec::with_capacity(ns.as_ref().len() + local_name.as_ref().len());
 1260|  2.14M|                value.extend_from_slice(ns.as_ref());
 1261|  2.14M|                value.extend_from_slice(local_name.as_ref());
 1262|  2.14M|                Ok(unescape_with(&self.reader.decoder().decode(&value)?, |e| {
 1263|       |                    self.resolve_entity(e)
 1264|  2.07M|                })
 1265|  2.07M|                .map_err(Error::from)?
 1266|  1.99M|                .to_string())
 1267|       |            }
 1268|       |            ResolveResult::Unbound => {
 1269|   261k|                Err(RdfXmlSyntaxError::msg("XML namespaces are required in RDF/XML").into())
 1270|       |            }
 1271|  68.9k|            ResolveResult::Unknown(v) => Err(RdfXmlSyntaxError::msg(format!(
 1272|  68.9k|                "Unknown prefix {}:",
 1273|  68.9k|                self.reader.decoder().decode(&v)?
 1274|       |            ))
 1275|  52.3k|            .into()),
 1276|       |        }
 1277|  2.47M|    }
_RNCNvMs5_NtCs7S9FTsUwoO8_8oxrdfxml6parserINtB7_20InternalRdfXmlParserRShE15resolve_ns_name0B9_:
 1262|  16.3M|                Ok(unescape_with(&self.reader.decoder().decode(&value)?, |e| {
 1263|  16.3M|                    self.resolve_entity(e)
 1264|  16.3M|                })
_RNvMs5_NtCs7S9FTsUwoO8_8oxrdfxml6parserINtB5_20InternalRdfXmlParserRShE14build_node_eltB7_:
 1280|   690k|    fn build_node_elt(
 1281|   690k|        iri: NamedNode,
 1282|   690k|        base_iri: Option<Iri<String>>,
 1283|   690k|        language: Option<String>,
 1284|   690k|        id_attr: Option<NamedNode>,
 1285|   690k|        node_id_attr: Option<BlankNode>,
 1286|   690k|        about_attr: Option<NamedNode>,
 1287|   690k|        type_attr: Option<NamedNode>,
 1288|   690k|        property_attrs: Vec<(NamedNode, String)>,
 1289|   690k|        results: &mut Vec<Triple>,
 1290|   690k|    ) -> Result<RdfXmlState, RdfXmlSyntaxError> {
 1291|   690k|        let subject = match (id_attr, node_id_attr, about_attr) {
 1292|      0|            (Some(id_attr), None, None) => Subject::from(id_attr),
 1293|   356k|            (None, Some(node_id_attr), None) => node_id_attr.into(),
 1294|  5.20k|            (None, None, Some(about_attr)) => about_attr.into(),
 1295|   328k|            (None, None, None) => BlankNode::default().into(),
 1296|       |            (Some(_), Some(_), _) => {
 1297|      0|                return Err(RdfXmlSyntaxError::msg(
 1298|      0|                    "Not both rdf:ID and rdf:nodeID could be set at the same time",
 1299|      0|                ))
 1300|       |            }
 1301|       |            (_, Some(_), Some(_)) => {
 1302|      0|                return Err(RdfXmlSyntaxError::msg(
 1303|      0|                    "Not both rdf:nodeID and rdf:resource could be set at the same time",
 1304|      0|                ))
 1305|       |            }
 1306|       |            (Some(_), _, Some(_)) => {
 1307|      0|                return Err(RdfXmlSyntaxError::msg(
 1308|      0|                    "Not both rdf:ID and rdf:resource could be set at the same time",
 1309|      0|                ))
 1310|       |            }
 1311|       |        };
 1312|       |
 1313|   690k|        Self::emit_property_attrs(&subject, property_attrs, &language, results);
 1314|       |
 1315|   690k|        if let Some(type_attr) = type_attr {
 1316|    778|            results.push(Triple::new(subject.clone(), rdf::TYPE, type_attr));
 1317|   689k|        }
 1318|       |
 1319|   690k|        if iri != *RDF_DESCRIPTION {
 1320|   673k|            results.push(Triple::new(subject.clone(), rdf::TYPE, iri));
 1321|   673k|        }
 1322|   690k|        Ok(RdfXmlState::NodeElt {
 1323|   690k|            base_iri,
 1324|   690k|            language,
 1325|   690k|            subject,
 1326|   690k|            li_counter: 0,
 1327|   690k|        })
 1328|   690k|    }
_RNvMs5_NtCs7S9FTsUwoO8_8oxrdfxml6parserINtB5_20InternalRdfXmlParserRShE9end_stateB7_:
 1352|   579k|    fn end_state(
 1353|   579k|        &mut self,
 1354|   579k|        state: RdfXmlState,
 1355|   579k|        results: &mut Vec<Triple>,
 1356|   579k|    ) -> Result<(), RdfXmlSyntaxError> {
 1357|   579k|        match state {
 1358|       |            RdfXmlState::PropertyElt {
 1359|   145k|                iri,
 1360|   145k|                language,
 1361|   145k|                subject,
 1362|   145k|                id_attr,
 1363|   145k|                datatype_attr,
 1364|   145k|                object,
 1365|       |                ..
 1366|       |            } => {
 1367|   145k|                let object = match object {
 1368|  25.3k|                    Some(NodeOrText::Node(node)) => Term::from(node),
 1369|  35.4k|                    Some(NodeOrText::Text(text)) => {
 1370|  35.4k|                        Self::new_literal(text, language, datatype_attr).into()
 1371|       |                    }
 1372|  84.6k|                    None => Self::new_literal(String::new(), language, datatype_attr).into(),
 1373|       |                };
 1374|   145k|                let triple = Triple::new(subject, iri, object);
 1375|   145k|                if let Some(id_attr) = id_attr {
 1376|      0|                    Self::reify(triple.clone(), id_attr, results);
 1377|   145k|                }
 1378|   145k|                results.push(triple);
 1379|       |            }
 1380|       |            RdfXmlState::ParseTypeCollectionPropertyElt {
 1381|      0|                iri,
 1382|      0|                subject,
 1383|      0|                id_attr,
 1384|      0|                objects,
 1385|      0|                ..
 1386|      0|            } => {
 1387|      0|                let mut current_node = Subject::from(rdf::NIL);
 1388|      0|                for object in objects.into_iter().rev() {
 1389|      0|                    let subject = Subject::from(BlankNode::default());
 1390|      0|                    results.push(Triple::new(subject.clone(), rdf::FIRST, object));
 1391|      0|                    results.push(Triple::new(subject.clone(), rdf::REST, current_node));
 1392|      0|                    current_node = subject;
 1393|      0|                }
 1394|      0|                let triple = Triple::new(subject, iri, current_node);
 1395|      0|                if let Some(id_attr) = id_attr {
 1396|      0|                    Self::reify(triple.clone(), id_attr, results);
 1397|      0|                }
 1398|      0|                results.push(triple);
 1399|       |            }
 1400|       |            RdfXmlState::ParseTypeLiteralPropertyElt {
 1401|    958|                iri,
 1402|    958|                subject,
 1403|    958|                id_attr,
 1404|    958|                writer,
 1405|    958|                emit,
 1406|    958|                ..
 1407|    958|            } => {
 1408|    958|                if emit {
 1409|      0|                    let object = writer.into_inner();
 1410|      0|                    if object.is_empty() {
 1411|      0|                        return Err(RdfXmlSyntaxError::msg(format!(
 1412|      0|                            "No value found for rdf:XMLLiteral value of property {iri}"
 1413|      0|                        )));
 1414|      0|                    }
 1415|      0|                    let triple = Triple::new(
 1416|      0|                        subject,
 1417|      0|                        iri,
 1418|      0|                        Literal::new_typed_literal(
 1419|      0|                            str::from_utf8(&object).map_err(|_| {
 1420|       |                                RdfXmlSyntaxError::msg(
 1421|       |                                    "The XML literal is not in valid UTF-8".to_owned(),
 1422|       |                                )
 1423|      0|                            })?,
 1424|       |                            rdf::XML_LITERAL,
 1425|       |                        ),
 1426|       |                    );
 1427|      0|                    if let Some(id_attr) = id_attr {
 1428|      0|                        Self::reify(triple.clone(), id_attr, results);
 1429|      0|                    }
 1430|      0|                    results.push(triple);
 1431|    958|                }
 1432|       |            }
 1433|   382k|            RdfXmlState::NodeElt { subject, .. } => match self.state.last_mut() {
 1434|  27.5k|                Some(RdfXmlState::PropertyElt { object, .. }) => {
 1435|  27.5k|                    *object = Some(NodeOrText::Node(subject))
 1436|       |                }
 1437|      0|                Some(RdfXmlState::ParseTypeCollectionPropertyElt { objects, .. }) => {
 1438|      0|                    objects.push(subject)
 1439|       |                }
 1440|   354k|                _ => (),
 1441|       |            },
 1442|  50.8k|            _ => (),
 1443|       |        }
 1444|   579k|        Ok(())
 1445|   579k|    }
_RNvMs5_NtCs7S9FTsUwoO8_8oxrdfxml6parserINtB5_20InternalRdfXmlParserRShE11new_literalB7_:
 1447|   120k|    fn new_literal(
 1448|   120k|        value: String,
 1449|   120k|        language: Option<String>,
 1450|   120k|        datatype: Option<NamedNode>,
 1451|   120k|    ) -> Literal {
 1452|   120k|        if let Some(datatype) = datatype {
 1453|  5.44k|            Literal::new_typed_literal(value, datatype)
 1454|   114k|        } else if let Some(language) = language {
 1455|      0|            Literal::new_language_tagged_literal_unchecked(value, language)
 1456|       |        } else {
 1457|   114k|            Literal::new_simple_literal(value)
 1458|       |        }
 1459|   120k|    }
_RNvMs5_NtCs7S9FTsUwoO8_8oxrdfxml6parserINtB5_20InternalRdfXmlParserRShE19emit_property_attrsB7_:
 1476|   710k|    fn emit_property_attrs(
 1477|   710k|        subject: &Subject,
 1478|   710k|        literal_attributes: Vec<(NamedNode, String)>,
 1479|   710k|        language: &Option<String>,
 1480|   710k|        results: &mut Vec<Triple>,
 1481|   710k|    ) {
 1482|   717k|        for (literal_predicate, literal_value) in literal_attributes {
 1483|  6.41k|            results.push(Triple::new(
 1484|  6.41k|                subject.clone(),
 1485|  6.41k|                literal_predicate,
 1486|  6.41k|                if let Some(language) = language.clone() {
 1487|      0|                    Literal::new_language_tagged_literal_unchecked(literal_value, language)
 1488|       |                } else {
 1489|  6.41k|                    Literal::new_simple_literal(literal_value)
 1490|       |                },
 1491|       |            ));
 1492|       |        }
 1493|   710k|    }
_RNvMs5_NtCs7S9FTsUwoO8_8oxrdfxml6parserINtB5_20InternalRdfXmlParserRShE17convert_attributeB7_:
 1495|   452k|    fn convert_attribute(&self, attribute: &Attribute<'_>) -> Result<String, RdfXmlParseError> {
 1496|   452k|        Ok(attribute
 1497|   452k|            .decode_and_unescape_value_with(self.reader.decoder(), |e| self.resolve_entity(e))?
 1498|   434k|            .into_owned())
 1499|   452k|    }
_RNCNvMs5_NtCs7S9FTsUwoO8_8oxrdfxml6parserINtB7_20InternalRdfXmlParserRShE17convert_attribute0B9_:
 1497|  17.8k|            .decode_and_unescape_value_with(self.reader.decoder(), |e| self.resolve_entity(e))?
_RNvMs5_NtCs7S9FTsUwoO8_8oxrdfxml6parserINtB5_20InternalRdfXmlParserRShE21convert_iri_attributeB7_:
 1501|  35.2k|    fn convert_iri_attribute(
 1502|  35.2k|        &self,
 1503|  35.2k|        base_iri: &Option<Iri<String>>,
 1504|  35.2k|        attribute: &Attribute<'_>,
 1505|  35.2k|    ) -> Result<NamedNode, RdfXmlParseError> {
 1506|  35.2k|        Ok(self.resolve_iri(base_iri, self.convert_attribute(attribute)?)?)
 1507|  35.2k|    }
_RNvMs5_NtCs7S9FTsUwoO8_8oxrdfxml6parserINtB5_20InternalRdfXmlParserRShE11resolve_iriB7_:
 1509|  33.2k|    fn resolve_iri(
 1510|  33.2k|        &self,
 1511|  33.2k|        base_iri: &Option<Iri<String>>,
 1512|  33.2k|        relative_iri: String,
 1513|  33.2k|    ) -> Result<NamedNode, RdfXmlSyntaxError> {
 1514|  33.2k|        if let Some(base_iri) = base_iri {
 1515|       |            Ok(NamedNode::new_unchecked(
 1516|      0|                if self.unchecked {
 1517|      0|                    base_iri.resolve_unchecked(&relative_iri)
 1518|       |                } else {
 1519|      0|                    base_iri
 1520|      0|                        .resolve(&relative_iri)
 1521|      0|                        .map_err(|error| RdfXmlSyntaxError::invalid_iri(relative_iri, error))?
 1522|       |                }
 1523|      0|                .into_inner(),
 1524|       |            ))
 1525|       |        } else {
 1526|  33.2k|            self.parse_iri(relative_iri)
 1527|       |        }
 1528|  33.2k|    }
_RNvMs5_NtCs7S9FTsUwoO8_8oxrdfxml6parserINtB5_20InternalRdfXmlParserRShE9parse_iriB7_:
 1530|  1.34M|    fn parse_iri(&self, relative_iri: String) -> Result<NamedNode, RdfXmlSyntaxError> {
 1531|  1.34M|        Ok(NamedNode::new_unchecked(if self.unchecked {
 1532|  10.0k|            relative_iri
 1533|       |        } else {
 1534|  1.33M|            Iri::parse(relative_iri.clone())
 1535|  1.33M|                .map_err(|error| RdfXmlSyntaxError::invalid_iri(relative_iri, error))?
 1536|  1.16M|                .into_inner()
 1537|       |        }))
 1538|  1.34M|    }
_RNCNvMs5_NtCs7S9FTsUwoO8_8oxrdfxml6parserINtB7_20InternalRdfXmlParserRShE9parse_iri0B9_:
 1535|   172k|                .map_err(|error| RdfXmlSyntaxError::invalid_iri(relative_iri, error))?
_RNvMs5_NtCs7S9FTsUwoO8_8oxrdfxml6parserINtB5_20InternalRdfXmlParserRShE14resolve_entityB7_:
 1540|  16.5M|    fn resolve_entity(&self, e: &str) -> Option<&str> {
 1541|  16.5M|        resolve_xml_entity(e).or_else(|| self.custom_entities.get(e).map(String::as_str))
 1542|  16.5M|    }
_RNCNvMs5_NtCs7S9FTsUwoO8_8oxrdfxml6parserINtB7_20InternalRdfXmlParserRShE14resolve_entity0B9_:
 1541|  77.9k|        resolve_xml_entity(e).or_else(|| self.custom_entities.get(e).map(String::as_str))
_RNCNvNtCs7S9FTsUwoO8_8oxrdfxml6parser10is_nc_name0B5_:
 1547|  11.3M|    is_name(name) && name.chars().all(|c| c != ':')
_RNvMNtCs7S9FTsUwoO8_8oxrdfxml6parserNtB2_12RdfXmlParser9for_slice:
  193|  94.1k|    pub fn for_slice(self, slice: &[u8]) -> SliceRdfXmlParser<'_> {
  194|  94.1k|        SliceRdfXmlParser {
  195|  94.1k|            results: Vec::new(),
  196|  94.1k|            parser: self.parse(slice),
  197|  94.1k|            reader_buffer: Vec::default(),
  198|  94.1k|        }
  199|  94.1k|    }
_RNvXs1_NtCs7S9FTsUwoO8_8oxrdfxml6parserNtB5_17SliceRdfXmlParserNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next:
  530|  2.78M|    fn next(&mut self) -> Option<Self::Item> {
  531|       |        loop {
  532|  5.79M|            if let Some(triple) = self.results.pop() {
  533|   825k|                return Some(Ok(triple));
  534|  4.96M|            } else if self.parser.is_end {
  535|  94.1k|                return None;
  536|  4.87M|            }
  537|  4.87M|            if let Err(RdfXmlParseError::Syntax(e)) = self.parse_step() {
  538|       |                // I/O errors can't happen
  539|  1.86M|                return Some(Err(e));
  540|  3.01M|            }
  541|       |        }
  542|  2.78M|    }
_RNvMs2_NtCs7S9FTsUwoO8_8oxrdfxml6parserNtB5_17SliceRdfXmlParser10parse_step:
  612|  4.87M|    fn parse_step(&mut self) -> Result<(), RdfXmlParseError> {
  613|  4.87M|        self.reader_buffer.clear();
  614|  4.87M|        let event = self
  615|  4.87M|            .parser
  616|  4.87M|            .reader
  617|  4.87M|            .read_event_into(&mut self.reader_buffer)?;
  618|  4.82M|        self.parser.parse_event(event, &mut self.results)
  619|  4.87M|    }
_RNvMs4_NtCs7S9FTsUwoO8_8oxrdfxml6parserNtB5_11RdfXmlState8base_iri:
  753|  1.48M|    fn base_iri(&self) -> Option<&Iri<String>> {
  754|  1.48M|        match self {
  755|   225k|            Self::Doc { base_iri, .. }
  756|   349k|            | Self::Rdf { base_iri, .. }
  757|   535k|            | Self::NodeElt { base_iri, .. }
  758|   379k|            | Self::PropertyElt { base_iri, .. }
  759|      0|            | Self::ParseTypeCollectionPropertyElt { base_iri, .. }
  760|  1.48M|            | Self::ParseTypeLiteralPropertyElt { base_iri, .. } => base_iri.as_ref(),
  761|  1.48M|        }
  762|  1.48M|    }
_RNvMs4_NtCs7S9FTsUwoO8_8oxrdfxml6parserNtB5_11RdfXmlState8language:
  764|  1.48M|    fn language(&self) -> Option<&String> {
  765|  1.48M|        match self {
  766|   225k|            Self::Doc { .. } => None,
  767|   349k|            Self::Rdf { language, .. }
  768|   535k|            | Self::NodeElt { language, .. }
  769|   379k|            | Self::PropertyElt { language, .. }
  770|      0|            | Self::ParseTypeCollectionPropertyElt { language, .. }
  771|  1.26M|            | Self::ParseTypeLiteralPropertyElt { language, .. } => language.as_ref(),
  772|       |        }
  773|  1.48M|    }
_RNvNtCs7S9FTsUwoO8_8oxrdfxml6parser10is_nc_name:
 1545|   390k|fn is_nc_name(name: &str) -> bool {
 1546|   390k|    // Name - (Char* ':' Char*)
 1547|   390k|    is_name(name) && name.chars().all(|c| c != ':')
 1548|   390k|}
_RNvNtCs7S9FTsUwoO8_8oxrdfxml6parser7is_name:
 1550|   390k|fn is_name(name: &str) -> bool {
 1551|   390k|    // NameStartChar (NameChar)*
 1552|   390k|    let mut c = name.chars();
 1553|   390k|    if !c.next().map_or(false, is_name_start_char) {
 1554|  5.78k|        return false;
 1555|   384k|    }
 1556|   384k|    c.all(is_name_char)
 1557|   390k|}
_RNvNtCs7S9FTsUwoO8_8oxrdfxml6parser13is_whitespace:
 1559|  2.12M|fn is_whitespace(c: u8) -> bool {
 1560|  2.12M|    matches!(c, b' ' | b'\t' | b'\n' | b'\r')
 1561|  2.12M|}
_RNvNtCs7S9FTsUwoO8_8oxrdfxml6parser7is_utf8:
 1563|  79.5k|fn is_utf8(encoding: &[u8]) -> bool {
 1564|  46.5k|    matches!(
 1565|  79.5k|        encoding.to_ascii_lowercase().as_slice(),
 1566|  79.5k|        b"unicode-1-1-utf-8"
 1567|  72.5k|            | b"unicode11utf8"
 1568|       |            | b"unicode20utf8"
 1569|  62.9k|            | b"utf-8"
 1570|  14.2k|            | b"utf8"
 1571|  12.3k|            | b"x-unicode20utf8"
 1572|       |    )
 1573|  79.5k|}

_RNvMNtCs7S9FTsUwoO8_8oxrdfxml10serializerNtB2_16RdfXmlSerializer3newCsmXm2WBU6hV_7rdf_xml:
   47|  46.1k|    pub fn new() -> Self {
   48|  46.1k|        Self {
   49|  46.1k|            prefixes: BTreeMap::new(),
   50|  46.1k|        }
   51|  46.1k|    }
_RINvMNtCs7S9FTsUwoO8_8oxrdfxml10serializerNtB3_16RdfXmlSerializer10for_writerINtNtCs8f6x4lOZV33_5alloc3vec3VechEECsmXm2WBU6hV_7rdf_xml:
   92|  46.1k|    pub fn for_writer<W: Write>(self, writer: W) -> WriterRdfXmlSerializer<W> {
   93|  46.1k|        WriterRdfXmlSerializer {
   94|  46.1k|            writer: Writer::new_with_indent(writer, b'\t', 1),
   95|  46.1k|            inner: self.inner_writer(),
   96|  46.1k|        }
   97|  46.1k|    }
_RINvMs0_NtCs7S9FTsUwoO8_8oxrdfxml10serializerNtB6_17InnerRdfXmlWriter16serialize_tripleRNtNtCs4x4bMiUCp0I_5oxrdf6triple6TripleECsmXm2WBU6hV_7rdf_xml:
  280|   409k|    fn serialize_triple<'a>(
  281|   409k|        &mut self,
  282|   409k|        t: impl Into<TripleRef<'a>>,
  283|   409k|        output: &mut Vec<Event<'a>>,
  284|   409k|    ) -> io::Result<()> {
  285|   409k|        if self.current_subject.is_none() {
  286|  22.7k|            self.write_start(output);
  287|   386k|        }
  288|       |
  289|   409k|        let triple = t.into();
  290|   409k|        // We open a new rdf:Description if useful
  291|   409k|        if self.current_subject.as_ref().map(Subject::as_ref) != Some(triple.subject) {
  292|   347k|            if self.current_subject.is_some() {
  293|   324k|                output.push(Event::End(
  294|   324k|                    self.current_resource_tag
  295|   324k|                        .take()
  296|   324k|                        .map_or_else(|| BytesEnd::new("rdf:Description"), BytesEnd::new),
  297|   324k|                ));
  298|   324k|            }
  299|   347k|            self.current_subject = Some(triple.subject.into_owned());
  300|       |
  301|   347k|            let (mut description_open, with_type_tag) = if triple.predicate == rdf::TYPE {
  302|   332k|                if let TermRef::NamedNode(t) = triple.object {
  303|   332k|                    let (prop_qname, prop_xmlns) = self.uri_to_qname_and_xmlns(t);
  304|   332k|                    let mut description_open = BytesStart::new(prop_qname.clone());
  305|   332k|                    if let Some(prop_xmlns) = prop_xmlns {
  306|   325k|                        description_open.push_attribute(prop_xmlns);
  307|   325k|                    }
  308|   332k|                    self.current_resource_tag = Some(prop_qname.into_owned());
  309|   332k|                    (description_open, true)
  310|       |                } else {
  311|    429|                    (BytesStart::new("rdf:Description"), false)
  312|       |                }
  313|       |            } else {
  314|  15.0k|                (BytesStart::new("rdf:Description"), false)
  315|       |            };
  316|   347k|            match triple.subject {
  317|  2.89k|                SubjectRef::NamedNode(node) => {
  318|  2.89k|                    description_open.push_attribute(("rdf:about", node.as_str()))
  319|       |                }
  320|   344k|                SubjectRef::BlankNode(node) => {
  321|   344k|                    description_open.push_attribute(("rdf:nodeID", node.as_str()))
  322|       |                }
  323|       |                _ => {
  324|      0|                    return Err(io::Error::new(
  325|      0|                        io::ErrorKind::InvalidInput,
  326|      0|                        "RDF/XML only supports named or blank subject",
  327|      0|                    ))
  328|       |                }
  329|       |            }
  330|   347k|            output.push(Event::Start(description_open));
  331|   347k|            if with_type_tag {
  332|   332k|                return Ok(()); // No need for a value
  333|  15.5k|            }
  334|  61.9k|        }
  335|       |
  336|  77.4k|        let (prop_qname, prop_xmlns) = self.uri_to_qname_and_xmlns(triple.predicate);
  337|  77.4k|        let mut property_open = BytesStart::new(prop_qname.clone());
  338|  77.4k|        if let Some(prop_xmlns) = prop_xmlns {
  339|  62.9k|            property_open.push_attribute(prop_xmlns);
  340|  62.9k|        }
  341|  77.4k|        let content = match triple.object {
  342|  5.36k|            TermRef::NamedNode(node) => {
  343|  5.36k|                property_open.push_attribute(("rdf:resource", node.as_str()));
  344|  5.36k|                None
  345|       |            }
  346|  9.44k|            TermRef::BlankNode(node) => {
  347|  9.44k|                property_open.push_attribute(("rdf:nodeID", node.as_str()));
  348|  9.44k|                None
  349|       |            }
  350|  62.6k|            TermRef::Literal(literal) => {
  351|  62.6k|                if let Some(language) = literal.language() {
  352|      0|                    property_open.push_attribute(("xml:lang", language));
  353|  62.6k|                } else if !literal.is_plain() {
  354|  2.56k|                    property_open.push_attribute(("rdf:datatype", literal.datatype().as_str()));
  355|  60.0k|                }
  356|  62.6k|                Some(literal.value())
  357|       |            }
  358|       |            _ => {
  359|      0|                return Err(io::Error::new(
  360|      0|                    io::ErrorKind::InvalidInput,
  361|      0|                    "RDF/XML only supports named, blank or literal object",
  362|      0|                ))
  363|       |            }
  364|       |        };
  365|  77.4k|        if let Some(content) = content {
  366|  62.6k|            output.push(Event::Start(property_open));
  367|  62.6k|            output.push(Event::Text(BytesText::new(content)));
  368|  62.6k|            output.push(Event::End(BytesEnd::new(prop_qname)));
  369|  62.6k|        } else {
  370|  14.8k|            output.push(Event::Empty(property_open));
  371|  14.8k|        }
  372|  77.4k|        Ok(())
  373|   409k|    }
_RINvMs_NtCs7S9FTsUwoO8_8oxrdfxml10serializerINtB5_22WriterRdfXmlSerializerINtNtCs8f6x4lOZV33_5alloc3vec3VechEE16serialize_tripleRNtNtCs4x4bMiUCp0I_5oxrdf6triple6TripleECsmXm2WBU6hV_7rdf_xml:
  186|   409k|    pub fn serialize_triple<'a>(&mut self, t: impl Into<TripleRef<'a>>) -> io::Result<()> {
  187|   409k|        let mut buffer = Vec::new();
  188|   409k|        self.inner.serialize_triple(t, &mut buffer)?;
  189|   409k|        self.flush_buffer(&mut buffer)
  190|   409k|    }
_RNCINvMs0_NtCs7S9FTsUwoO8_8oxrdfxml10serializerNtB8_17InnerRdfXmlWriter16serialize_tripleRNtNtCs4x4bMiUCp0I_5oxrdf6triple6TripleE0CsmXm2WBU6hV_7rdf_xml:
  296|  13.4k|                        .map_or_else(|| BytesEnd::new("rdf:Description"), BytesEnd::new),
_RNvMs_NtCs7S9FTsUwoO8_8oxrdfxml10serializerINtB4_22WriterRdfXmlSerializerINtNtCs8f6x4lOZV33_5alloc3vec3VechEE12flush_bufferCsmXm2WBU6hV_7rdf_xml:
  200|   455k|    fn flush_buffer(&mut self, buffer: &mut Vec<Event<'_>>) -> io::Result<()> {
  201|  1.03M|        for event in buffer.drain(0..) {
  202|  1.03M|            self.writer.write_event(event).map_err(map_err)?;
  203|       |        }
  204|   455k|        Ok(())
  205|   455k|    }
_RNvMs_NtCs7S9FTsUwoO8_8oxrdfxml10serializerINtB4_22WriterRdfXmlSerializerINtNtCs8f6x4lOZV33_5alloc3vec3VechEE6finishCsmXm2WBU6hV_7rdf_xml:
  193|  46.1k|    pub fn finish(mut self) -> io::Result<W> {
  194|  46.1k|        let mut buffer = Vec::new();
  195|  46.1k|        self.inner.finish(&mut buffer);
  196|  46.1k|        self.flush_buffer(&mut buffer)?;
  197|  46.1k|        Ok(self.writer.into_inner())
  198|  46.1k|    }
_RNvMNtCs7S9FTsUwoO8_8oxrdfxml10serializerNtB2_16RdfXmlSerializer12inner_writer:
  139|  46.1k|    fn inner_writer(mut self) -> InnerRdfXmlWriter {
  140|  46.1k|        self.prefixes.insert(
  141|  46.1k|            "http://www.w3.org/1999/02/22-rdf-syntax-ns#".into(),
  142|  46.1k|            "rdf".into(),
  143|  46.1k|        );
  144|  46.1k|        InnerRdfXmlWriter {
  145|  46.1k|            current_subject: None,
  146|  46.1k|            current_resource_tag: None,
  147|  46.1k|            prefixes: self.prefixes,
  148|  46.1k|        }
  149|  46.1k|    }
_RNvMs0_NtCs7S9FTsUwoO8_8oxrdfxml10serializerNtB5_17InnerRdfXmlWriter11write_start:
  375|  46.1k|    fn write_start(&self, output: &mut Vec<Event<'_>>) {
  376|  46.1k|        output.push(Event::Decl(BytesDecl::new("1.0", Some("UTF-8"), None)));
  377|  46.1k|        let mut rdf_open = BytesStart::new("rdf:RDF");
  378|  92.2k|        for (prefix_value, prefix_name) in &self.prefixes {
  379|  46.1k|            rdf_open.push_attribute((
  380|  46.1k|                format!("xmlns:{prefix_name}").as_str(),
  381|  46.1k|                prefix_value.as_str(),
  382|  46.1k|            ));
  383|  46.1k|        }
  384|  46.1k|        output.push(Event::Start(rdf_open))
  385|  46.1k|    }
_RNvMs0_NtCs7S9FTsUwoO8_8oxrdfxml10serializerNtB5_17InnerRdfXmlWriter6finish:
  387|  46.1k|    fn finish(&mut self, output: &mut Vec<Event<'static>>) {
  388|  46.1k|        if self.current_subject.is_some() {
  389|  22.7k|            output.push(Event::End(
  390|  22.7k|                self.current_resource_tag
  391|  22.7k|                    .take()
  392|  22.7k|                    .map_or_else(|| BytesEnd::new("rdf:Description"), BytesEnd::new),
  393|  22.7k|            ));
  394|  23.3k|        } else {
  395|  23.3k|            self.write_start(output);
  396|  23.3k|        }
  397|  46.1k|        output.push(Event::End(BytesEnd::new("rdf:RDF")));
  398|  46.1k|    }
_RNvMs0_NtCs7S9FTsUwoO8_8oxrdfxml10serializerNtB5_17InnerRdfXmlWriter22uri_to_qname_and_xmlns:
  400|   409k|    fn uri_to_qname_and_xmlns<'a>(
  401|   409k|        &self,
  402|   409k|        uri: NamedNodeRef<'a>,
  403|   409k|    ) -> (Cow<'a, str>, Option<(&'a str, &'a str)>) {
  404|   409k|        let (prop_prefix, prop_value) = split_iri(uri.as_str());
  405|   409k|        if let Some(prop_prefix) = self.prefixes.get(prop_prefix) {
  406|       |            (
  407|  15.6k|                if prop_prefix.is_empty() {
  408|      0|                    Cow::Borrowed(prop_value)
  409|       |                } else {
  410|  15.6k|                    Cow::Owned(format!("{prop_prefix}:{prop_value}"))
  411|       |                },
  412|  15.6k|                None,
  413|       |            )
  414|   393k|        } else if prop_prefix == "http://www.w3.org/2000/xmlns/" {
  415|  5.51k|            (Cow::Owned(format!("xmlns:{prop_value}")), None)
  416|   388k|        } else if prop_value.is_empty() {
  417|   161k|            (Cow::Borrowed("p:"), Some(("xmlns:p", prop_prefix)))
  418|       |        } else {
  419|   227k|            (Cow::Borrowed(prop_value), Some(("xmlns", prop_prefix)))
  420|       |        }
  421|   409k|    }
_RNvNtCs7S9FTsUwoO8_8oxrdfxml10serializer9split_iri:
  432|   409k|fn split_iri(iri: &str) -> (&str, &str) {
  433|   409k|    if let Some(position_base) = iri.rfind(|c| !is_name_char(c) || c == ':') {
  434|   409k|        if let Some(position_add) = iri[position_base..].find(|c| is_name_start_char(c) && c != ':')
  435|       |        {
  436|   242k|            (
  437|   242k|                &iri[..position_base + position_add],
  438|   242k|                &iri[position_base + position_add..],
  439|   242k|            )
  440|       |        } else {
  441|   166k|            (iri, "")
  442|       |        }
  443|       |    } else {
  444|      0|        (iri, "")
  445|       |    }
  446|   409k|}
_RNCNvMs0_NtCs7S9FTsUwoO8_8oxrdfxml10serializerNtB7_17InnerRdfXmlWriter6finish0B9_:
  392|  2.07k|                    .map_or_else(|| BytesEnd::new("rdf:Description"), BytesEnd::new),
_RNCNvNtCs7S9FTsUwoO8_8oxrdfxml10serializer9split_iri0B5_:
  433|  6.99M|    if let Some(position_base) = iri.rfind(|c| !is_name_char(c) || c == ':') {
_RNCNvNtCs7S9FTsUwoO8_8oxrdfxml10serializer9split_iris_0B5_:
  434|   726k|        if let Some(position_add) = iri[position_base..].find(|c| is_name_start_char(c) && c != ':')

_RNvNtCs7S9FTsUwoO8_8oxrdfxml5utils18is_name_start_char:
    1|  19.0M|pub fn is_name_start_char(c: char) -> bool {
    2|       |    // ":" | [A-Z] | "_" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
    3|  19.0M|    matches!(c,
    4|       |        ':'
    5|  11.4M|        | 'A'..='Z'
    6|       |        | '_'
    7|  9.12M|        | 'a'..='z'
    8|   360k|        | '\u{00C0}'..='\u{00D6}'
    9|   360k|        | '\u{00D8}'..='\u{00F6}'
   10|   360k|        | '\u{00F8}'..='\u{02FF}'
   11|   358k|        | '\u{0370}'..='\u{037D}'
   12|  96.5k|        | '\u{037F}'..='\u{1FFF}'
   13|  92.3k|        | '\u{200C}'..='\u{200D}'
   14|  92.3k|        | '\u{2070}'..='\u{218F}'
   15|  92.3k|        | '\u{2C00}'..='\u{2FEF}'
   16|  92.3k|        | '\u{3001}'..='\u{D7FF}'
   17|  87.2k|        | '\u{F900}'..='\u{FDCF}'
   18|  87.2k|        | '\u{FDF0}'..='\u{FFFD}'
   19|  30.5k|        | '\u{10000}'..='\u{EFFFF}')
   20|  19.0M|}
_RNvNtCs7S9FTsUwoO8_8oxrdfxml5utils12is_name_char:
   22|  17.9M|pub fn is_name_char(c: char) -> bool {
   23|  17.9M|    // NameStartChar | "-" | "." | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
   24|  17.9M|    is_name_start_char(c)
   25|  7.10M|        || matches!(c,  '-' | '.' | '0'..='9' | '\u{B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
   26|  17.9M|}


_RINvMNtCsbozbNcdD2Rq_9getrandom4lazyNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   34|    177|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   35|    177|        // Relaxed ordering is fine, as we only have a single atomic variable.
   36|    177|        let mut val = self.0.load(Relaxed);
   37|    177|        if val == Self::UNINIT {
   38|      1|            val = init();
   39|      1|            self.0.store(val, Relaxed);
   40|    176|        }
   41|    177|        val
   42|    177|    }
_RINvMs_NtCsbozbNcdD2Rq_9getrandom4lazyNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   53|    177|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   54|    177|        self.0.unsync_init(|| init() as usize) != 0
   55|    177|    }
_RNCINvMs_NtCsbozbNcdD2Rq_9getrandom4lazyNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   54|      1|        self.0.unsync_init(|| init() as usize) != 0

_RNvCsbozbNcdD2Rq_9getrandom16getrandom_uninitCsaHtvKV6mKDH_9rand_core:
  396|    177|pub fn getrandom_uninit(dest: &mut [MaybeUninit<u8>]) -> Result<&mut [u8], Error> {
  397|    177|    if !dest.is_empty() {
  398|    177|        imp::getrandom_inner(dest)?;
  399|      0|    }
  400|       |    // SAFETY: `dest` has been fully initialized by `imp::getrandom_inner`
  401|       |    // since it returned `Ok`.
  402|    177|    Ok(unsafe { slice_assume_init_mut(dest) })
  403|    177|}
_RNvCsbozbNcdD2Rq_9getrandom9getrandomCsaHtvKV6mKDH_9rand_core:
  366|    177|pub fn getrandom(dest: &mut [u8]) -> Result<(), Error> {
  367|    177|    // SAFETY: The `&mut MaybeUninit<_>` reference doesn't escape, and
  368|    177|    // `getrandom_uninit` guarantees it will never de-initialize any part of
  369|    177|    // `dest`.
  370|    177|    getrandom_uninit(unsafe { slice_as_uninit_mut(dest) })?;
  371|    177|    Ok(())
  372|    177|}

_RNvNtCsbozbNcdD2Rq_9getrandom3imp15getrandom_inner:
    9|    177|pub fn getrandom_inner(dest: &mut [MaybeUninit<u8>]) -> Result<(), Error> {
   10|    177|    // getrandom(2) was introduced in Linux 3.17
   11|    177|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   12|    177|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   13|    177|        sys_fill_exact(dest, getrandom_syscall)
   14|       |    } else {
   15|      0|        use_file::getrandom_inner(dest)
   16|       |    }
   17|    177|}
_RNvNtCsbozbNcdD2Rq_9getrandom3imp22is_getrandom_available:
   19|      1|fn is_getrandom_available() -> bool {
   20|      1|    if getrandom_syscall(&mut []) < 0 {
   21|      0|        match last_os_error().raw_os_error() {
   22|      0|            Some(libc::ENOSYS) => false, // No kernel support
   23|       |            // The fallback on EPERM is intentionally not done on Android since this workaround
   24|       |            // seems to be needed only for specific Linux-based products that aren't based
   25|       |            // on Android. See https://github.com/rust-random/getrandom/issues/229.
   26|       |            #[cfg(target_os = "linux")]
   27|      0|            Some(libc::EPERM) => false, // Blocked by seccomp
   28|      0|            _ => true,
   29|       |        }
   30|       |    } else {
   31|      1|        true
   32|       |    }
   33|      1|}

_RINvNtCsbozbNcdD2Rq_9getrandom4util19slice_as_uninit_muthECsaHtvKV6mKDH_9rand_core:
   32|    177|pub unsafe fn slice_as_uninit_mut<T>(slice: &mut [T]) -> &mut [MaybeUninit<T>] {
   33|    177|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   34|    177|    &mut *(slice as *mut [T] as *mut [MaybeUninit<T>])
   35|    177|}
_RINvNtCsbozbNcdD2Rq_9getrandom4util21slice_assume_init_muthECsaHtvKV6mKDH_9rand_core:
    8|    177|pub unsafe fn slice_assume_init_mut<T>(slice: &mut [MaybeUninit<T>]) -> &mut [T] {
    9|    177|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   10|    177|    &mut *(slice as *mut [MaybeUninit<T>] as *mut [T])
   11|    177|}

_RINvNtCsbozbNcdD2Rq_9getrandom9util_libc14sys_fill_exactNvB2_17getrandom_syscallEB4_:
   55|    177|pub fn sys_fill_exact(
   56|    177|    mut buf: &mut [MaybeUninit<u8>],
   57|    177|    sys_fill: impl Fn(&mut [MaybeUninit<u8>]) -> libc::ssize_t,
   58|    177|) -> Result<(), Error> {
   59|    354|    while !buf.is_empty() {
   60|    177|        let res = sys_fill(buf);
   61|    177|        match res {
   62|    177|            res if res > 0 => buf = buf.get_mut(res as usize..).ok_or(Error::UNEXPECTED)?,
   63|       |            -1 => {
   64|      0|                let err = last_os_error();
   65|      0|                // We should try again if the call was interrupted.
   66|      0|                if err.raw_os_error() != Some(libc::EINTR) {
   67|      0|                    return Err(err);
   68|      0|                }
   69|       |            }
   70|       |            // Negative return codes not equal to -1 should be impossible.
   71|       |            // EOF (ret = 0) should be impossible, as the data we are reading
   72|       |            // should be an infinite stream of random bytes.
   73|      0|            _ => return Err(Error::UNEXPECTED),
   74|       |        }
   75|       |    }
   76|    177|    Ok(())
   77|    177|}
_RNvNtCsbozbNcdD2Rq_9getrandom9util_libc17getrandom_syscall:
  153|    178|pub fn getrandom_syscall(buf: &mut [MaybeUninit<u8>]) -> libc::ssize_t {
  154|    178|    unsafe {
  155|    178|        libc::syscall(
  156|    178|            libc::SYS_getrandom,
  157|    178|            buf.as_mut_ptr() as *mut libc::c_void,
  158|    178|            buf.len(),
  159|    178|            0,
  160|    178|        ) as libc::ssize_t
  161|    178|    }
  162|    178|}

rust_fuzzer_test_input:
  209|  39.9k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  39.9k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  39.9k|                }
  223|  39.9k|
  224|  39.9k|                __libfuzzer_sys_run(bytes);
  225|  39.9k|                0
  226|       |            }
_RNvNvCs2kjnqOcnWhU_7rdf_xml1__19___libfuzzer_sys_run:
  241|  39.9k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|       |            }
LLVMFuzzerTestOneInput:
   58|  39.9k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  39.9k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  39.9k|    });
   63|  39.9k|
   64|  39.9k|    match test_input {
   65|  39.9k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  39.9k|}
_RNCNvCs2ANfhTmAi2D_13libfuzzer_sys15test_input_wrap0B3_:
   59|  39.9k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  39.9k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  39.9k|        rust_fuzzer_test_input(data_slice)
   62|  39.9k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvMs3_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0ECs4sYt0urF4vM_8oxrdfxml:
 1044|  37.0M|    pub(crate) unsafe fn next(
 1045|  37.0M|        &mut self,
 1046|  37.0M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  37.0M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  37.0M|        let found = find_raw(self.start, self.end)?;
 1057|  33.7M|        let result = found.distance(self.original_start);
 1058|  33.7M|        self.start = found.add(1);
 1059|  33.7M|        Some(result)
 1060|  37.0M|    }
_RINvMs3_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs7_NtBc_6memchrNtB1e_7Memchr3NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0ECs4sYt0urF4vM_8oxrdfxml:
 1044|  4.51M|    pub(crate) unsafe fn next(
 1045|  4.51M|        &mut self,
 1046|  4.51M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  4.51M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  4.51M|        let found = find_raw(self.start, self.end)?;
 1057|  4.50M|        let result = found.distance(self.original_start);
 1058|  4.50M|        self.start = found.add(1);
 1059|  4.50M|        Some(result)
 1060|  4.51M|    }
_RINvMs3_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs_NtBc_6memchrNtB1d_6MemchrNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0ECs4sYt0urF4vM_8oxrdfxml:
 1044|   132k|    pub(crate) unsafe fn next(
 1045|   132k|        &mut self,
 1046|   132k|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|   132k|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|   132k|        let found = find_raw(self.start, self.end)?;
 1057|   130k|        let result = found.distance(self.original_start);
 1058|   130k|        self.start = found.add(1);
 1059|   130k|        Some(result)
 1060|   132k|    }
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECs4sYt0urF4vM_8oxrdfxml:
 1125|  2.40M|pub(crate) unsafe fn search_slice_with_raw(
 1126|  2.40M|    haystack: &[u8],
 1127|  2.40M|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  2.40M|) -> Option<usize> {
 1129|  2.40M|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  2.40M|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  2.40M|    // a &[u8].
 1132|  2.40M|    let start = haystack.as_ptr();
 1133|  2.40M|    let end = start.add(haystack.len());
 1134|  2.40M|    let found = find_raw(start, end)?;
 1135|  2.39M|    Some(found.distance(start))
 1136|  2.40M|}
_RNvMs3_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  5.77M|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  5.77M|        Iter {
 1029|  5.77M|            original_start: haystack.as_ptr(),
 1030|  5.77M|            start: haystack.as_ptr(),
 1031|  5.77M|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  5.77M|            haystack: core::marker::PhantomData,
 1033|  5.77M|        }
 1034|  5.77M|    }
_RINvMs3_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0ECs4QWtT85WPeh_9quick_xml:
 1044|   267k|    pub(crate) unsafe fn next(
 1045|   267k|        &mut self,
 1046|   267k|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|   267k|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|   267k|        let found = find_raw(self.start, self.end)?;
 1057|   264k|        let result = found.distance(self.original_start);
 1058|   264k|        self.start = found.add(1);
 1059|   264k|        Some(result)
 1060|   267k|    }
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECs4QWtT85WPeh_9quick_xml:
 1125|  2.16M|pub(crate) unsafe fn search_slice_with_raw(
 1126|  2.16M|    haystack: &[u8],
 1127|  2.16M|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  2.16M|) -> Option<usize> {
 1129|  2.16M|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  2.16M|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  2.16M|    // a &[u8].
 1132|  2.16M|    let start = haystack.as_ptr();
 1133|  2.16M|    let end = start.add(haystack.len());
 1134|  2.16M|    let found = find_raw(start, end)?;
 1135|   864k|    Some(found.distance(start))
 1136|  2.16M|}
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle1B8_:
  117|  4.38M|    pub(crate) fn needle1(&self) -> u8 {
  118|  4.38M|        self.s1
  119|  4.38M|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE3newB8_:
  111|  4.70M|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  4.70M|        One { s1: needle, v1: V::splat(needle) }
  113|  4.70M|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE3newB8_:
  111|  4.70M|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  4.70M|        One { s1: needle, v1: V::splat(needle) }
  113|  4.70M|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE8find_rawB8_:
  143|   120k|    pub(crate) unsafe fn find_raw(
  144|   120k|        &self,
  145|   120k|        start: *const u8,
  146|   120k|        end: *const u8,
  147|   120k|    ) -> Option<*const u8> {
  148|   120k|        // If we want to support vectors bigger than 256 bits, we probably
  149|   120k|        // need to move up to using a u64 for the masks used below. Currently
  150|   120k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|   120k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|   120k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|   120k|        let topos = V::Mask::first_offset;
  155|   120k|        let len = end.distance(start);
  156|   120k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|   120k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  88.8k|            return Some(cur);
  167|  31.7k|        }
  168|  31.7k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  31.7k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  31.7k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  31.7k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  31.7k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  33.3k|        while cur <= end.sub(V::BYTES) {
  213|  2.16k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  2.16k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    572|                return Some(cur);
  216|  1.59k|            }
  217|  1.59k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  31.1k|        if cur < end {
  224|  25.9k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  25.9k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  25.9k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  25.9k|            return self.search_chunk(cur, topos);
  228|  5.20k|        }
  229|  5.20k|        None
  230|   120k|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  2.45M|    pub(crate) unsafe fn find_raw(
  144|  2.45M|        &self,
  145|  2.45M|        start: *const u8,
  146|  2.45M|        end: *const u8,
  147|  2.45M|    ) -> Option<*const u8> {
  148|  2.45M|        // If we want to support vectors bigger than 256 bits, we probably
  149|  2.45M|        // need to move up to using a u64 for the masks used below. Currently
  150|  2.45M|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  2.45M|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  2.45M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  2.45M|        let topos = V::Mask::first_offset;
  155|  2.45M|        let len = end.distance(start);
  156|  2.45M|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  2.45M|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  2.22M|            return Some(cur);
  167|   230k|        }
  168|   230k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|   230k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|   230k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|   230k|        if len >= Self::LOOP_SIZE {
  172|   131k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|   119k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|   119k|                let a = V::load_aligned(cur);
  176|   119k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|   119k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|   119k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|   119k|                let eqa = self.v1.cmpeq(a);
  180|   119k|                let eqb = self.v1.cmpeq(b);
  181|   119k|                let eqc = self.v1.cmpeq(c);
  182|   119k|                let eqd = self.v1.cmpeq(d);
  183|   119k|                let or1 = eqa.or(eqb);
  184|   119k|                let or2 = eqc.or(eqd);
  185|   119k|                let or3 = or1.or(or2);
  186|   119k|                if or3.movemask_will_have_non_zero() {
  187|   111k|                    let mask = eqa.movemask();
  188|   111k|                    if mask.has_non_zero() {
  189|  69.6k|                        return Some(cur.add(topos(mask)));
  190|  41.4k|                    }
  191|  41.4k|
  192|  41.4k|                    let mask = eqb.movemask();
  193|  41.4k|                    if mask.has_non_zero() {
  194|  31.7k|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|  9.72k|                    }
  196|  9.72k|
  197|  9.72k|                    let mask = eqc.movemask();
  198|  9.72k|                    if mask.has_non_zero() {
  199|  7.46k|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|  2.25k|                    }
  201|  2.25k|
  202|  2.25k|                    let mask = eqd.movemask();
  203|  2.25k|                    debug_assert!(mask.has_non_zero());
  204|  2.25k|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  8.60k|                }
  206|  8.60k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|   107k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|   158k|        while cur <= end.sub(V::BYTES) {
  213|  66.9k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  66.9k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|  27.8k|                return Some(cur);
  216|  39.0k|            }
  217|  39.0k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  91.4k|        if cur < end {
  224|  75.8k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  75.8k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  75.8k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  75.8k|            return self.search_chunk(cur, topos);
  228|  15.6k|        }
  229|  15.6k|        None
  230|  2.45M|    }
_RINvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|   148k|    unsafe fn search_chunk(
  417|   148k|        &self,
  418|   148k|        cur: *const u8,
  419|   148k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|   148k|    ) -> Option<*const u8> {
  421|   148k|        let chunk = V::load_unaligned(cur);
  422|   148k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|   148k|        if mask.has_non_zero() {
  424|  93.3k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  55.3k|            None
  427|       |        }
  428|   148k|    }
_RINvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  2.59M|    unsafe fn search_chunk(
  417|  2.59M|        &self,
  418|  2.59M|        cur: *const u8,
  419|  2.59M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  2.59M|    ) -> Option<*const u8> {
  421|  2.59M|        let chunk = V::load_unaligned(cur);
  422|  2.59M|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  2.59M|        if mask.has_non_zero() {
  424|  2.25M|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|   341k|            None
  427|       |        }
  428|  2.59M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE3newBa_:
  450|  37.3M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  37.3M|        Two {
  452|  37.3M|            s1: needle1,
  453|  37.3M|            s2: needle2,
  454|  37.3M|            v1: V::splat(needle1),
  455|  37.3M|            v2: V::splat(needle2),
  456|  37.3M|        }
  457|  37.3M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE3newBa_:
  450|  37.3M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  37.3M|        Two {
  452|  37.3M|            s1: needle1,
  453|  37.3M|            s2: needle2,
  454|  37.3M|            v1: V::splat(needle1),
  455|  37.3M|            v2: V::splat(needle2),
  456|  37.3M|        }
  457|  37.3M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  6.78M|    pub(crate) fn needle1(&self) -> u8 {
  462|  6.78M|        self.s1
  463|  6.78M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  6.57M|    pub(crate) fn needle2(&self) -> u8 {
  468|  6.57M|        self.s2
  469|  6.57M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE8find_rawBa_:
  493|   788k|    pub(crate) unsafe fn find_raw(
  494|   788k|        &self,
  495|   788k|        start: *const u8,
  496|   788k|        end: *const u8,
  497|   788k|    ) -> Option<*const u8> {
  498|   788k|        // If we want to support vectors bigger than 256 bits, we probably
  499|   788k|        // need to move up to using a u64 for the masks used below. Currently
  500|   788k|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|   788k|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|   788k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   788k|        let topos = V::Mask::first_offset;
  505|   788k|        let len = end.distance(start);
  506|   788k|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   788k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   432k|            return Some(cur);
  517|   356k|        }
  518|   356k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   356k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|   356k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   356k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   356k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   382k|        while cur <= end.sub(V::BYTES) {
  551|  27.2k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  27.2k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  1.40k|                return Some(cur);
  554|  25.8k|            }
  555|  25.8k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   355k|        if cur < end {
  562|   346k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   346k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|   346k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   346k|            return self.search_chunk(cur, topos);
  566|  9.10k|        }
  567|  9.10k|        None
  568|   788k|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE8find_rawBa_:
  493|  34.1M|    pub(crate) unsafe fn find_raw(
  494|  34.1M|        &self,
  495|  34.1M|        start: *const u8,
  496|  34.1M|        end: *const u8,
  497|  34.1M|    ) -> Option<*const u8> {
  498|  34.1M|        // If we want to support vectors bigger than 256 bits, we probably
  499|  34.1M|        // need to move up to using a u64 for the masks used below. Currently
  500|  34.1M|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|  34.1M|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|  34.1M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  34.1M|        let topos = V::Mask::first_offset;
  505|  34.1M|        let len = end.distance(start);
  506|  34.1M|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  34.1M|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  32.4M|            return Some(cur);
  517|  1.74M|        }
  518|  1.74M|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  1.74M|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|  1.74M|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  1.74M|        if len >= Self::LOOP_SIZE {
  522|  2.49M|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|  2.21M|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|  2.21M|                let a = V::load_aligned(cur);
  526|  2.21M|                let b = V::load_aligned(cur.add(V::BYTES));
  527|  2.21M|                let eqa1 = self.v1.cmpeq(a);
  528|  2.21M|                let eqb1 = self.v1.cmpeq(b);
  529|  2.21M|                let eqa2 = self.v2.cmpeq(a);
  530|  2.21M|                let eqb2 = self.v2.cmpeq(b);
  531|  2.21M|                let or1 = eqa1.or(eqb1);
  532|  2.21M|                let or2 = eqa2.or(eqb2);
  533|  2.21M|                let or3 = or1.or(or2);
  534|  2.21M|                if or3.movemask_will_have_non_zero() {
  535|   249k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|   249k|                    if mask.has_non_zero() {
  537|   168k|                        return Some(cur.add(topos(mask)));
  538|  81.6k|                    }
  539|  81.6k|
  540|  81.6k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|  81.6k|                    debug_assert!(mask.has_non_zero());
  542|  81.6k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|  1.96M|                }
  544|  1.96M|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|  1.21M|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  1.92M|        while cur <= end.sub(V::BYTES) {
  551|   450k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   450k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  19.1k|                return Some(cur);
  554|   431k|            }
  555|   431k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|  1.47M|        if cur < end {
  562|  1.44M|            debug_assert!(end.distance(cur) < V::BYTES);
  563|  1.44M|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|  1.44M|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|  1.44M|            return self.search_chunk(cur, topos);
  566|  30.2k|        }
  567|  30.2k|        None
  568|  34.1M|    }
_RINvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  1.16M|    unsafe fn search_chunk(
  671|  1.16M|        &self,
  672|  1.16M|        cur: *const u8,
  673|  1.16M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  1.16M|    ) -> Option<*const u8> {
  675|  1.16M|        let chunk = V::load_unaligned(cur);
  676|  1.16M|        let eq1 = self.v1.cmpeq(chunk);
  677|  1.16M|        let eq2 = self.v2.cmpeq(chunk);
  678|  1.16M|        let mask = eq1.or(eq2).movemask();
  679|  1.16M|        if mask.has_non_zero() {
  680|   441k|            let mask1 = eq1.movemask();
  681|   441k|            let mask2 = eq2.movemask();
  682|   441k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|   720k|            None
  685|       |        }
  686|  1.16M|    }
_RINvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  36.0M|    unsafe fn search_chunk(
  671|  36.0M|        &self,
  672|  36.0M|        cur: *const u8,
  673|  36.0M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  36.0M|    ) -> Option<*const u8> {
  675|  36.0M|        let chunk = V::load_unaligned(cur);
  676|  36.0M|        let eq1 = self.v1.cmpeq(chunk);
  677|  36.0M|        let eq2 = self.v2.cmpeq(chunk);
  678|  36.0M|        let mask = eq1.or(eq2).movemask();
  679|  36.0M|        if mask.has_non_zero() {
  680|  32.6M|            let mask1 = eq1.movemask();
  681|  32.6M|            let mask2 = eq2.movemask();
  682|  32.6M|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  3.46M|            None
  685|       |        }
  686|  36.0M|    }
_RNvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE3newBb_:
  710|  4.51M|    pub(crate) unsafe fn new(
  711|  4.51M|        needle1: u8,
  712|  4.51M|        needle2: u8,
  713|  4.51M|        needle3: u8,
  714|  4.51M|    ) -> Three<V> {
  715|  4.51M|        Three {
  716|  4.51M|            s1: needle1,
  717|  4.51M|            s2: needle2,
  718|  4.51M|            s3: needle3,
  719|  4.51M|            v1: V::splat(needle1),
  720|  4.51M|            v2: V::splat(needle2),
  721|  4.51M|            v3: V::splat(needle3),
  722|  4.51M|        }
  723|  4.51M|    }
_RNvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE3newBb_:
  710|  4.51M|    pub(crate) unsafe fn new(
  711|  4.51M|        needle1: u8,
  712|  4.51M|        needle2: u8,
  713|  4.51M|        needle3: u8,
  714|  4.51M|    ) -> Three<V> {
  715|  4.51M|        Three {
  716|  4.51M|            s1: needle1,
  717|  4.51M|            s2: needle2,
  718|  4.51M|            s3: needle3,
  719|  4.51M|            v1: V::splat(needle1),
  720|  4.51M|            v2: V::splat(needle2),
  721|  4.51M|            v3: V::splat(needle3),
  722|  4.51M|        }
  723|  4.51M|    }
_RNvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle1Bb_:
  727|   605k|    pub(crate) fn needle1(&self) -> u8 {
  728|   605k|        self.s1
  729|   605k|    }
_RNvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle2Bb_:
  733|   481k|    pub(crate) fn needle2(&self) -> u8 {
  734|   481k|        self.s2
  735|   481k|    }
_RNvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle3Bb_:
  739|   479k|    pub(crate) fn needle3(&self) -> u8 {
  740|   479k|        self.s3
  741|   479k|    }
_RNvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE8find_rawBb_:
  765|  94.7k|    pub(crate) unsafe fn find_raw(
  766|  94.7k|        &self,
  767|  94.7k|        start: *const u8,
  768|  94.7k|        end: *const u8,
  769|  94.7k|    ) -> Option<*const u8> {
  770|  94.7k|        // If we want to support vectors bigger than 256 bits, we probably
  771|  94.7k|        // need to move up to using a u64 for the masks used below. Currently
  772|  94.7k|        // they are 32 bits, which means we're SOL for vectors that need masks
  773|  94.7k|        // bigger than 32 bits. Overall unclear until there's a use case.
  774|  94.7k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  775|       |
  776|  94.7k|        let topos = V::Mask::first_offset;
  777|  94.7k|        let len = end.distance(start);
  778|  94.7k|        debug_assert!(
  779|      0|            len >= V::BYTES,
  780|      0|            "haystack has length {}, but must be at least {}",
  781|       |            len,
  782|       |            V::BYTES
  783|       |        );
  784|       |
  785|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  786|       |        // of the haystack prior to where aligned loads can start.
  787|  94.7k|        if let Some(cur) = self.search_chunk(start, topos) {
  788|  89.1k|            return Some(cur);
  789|  5.60k|        }
  790|  5.60k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  791|  5.60k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  792|  5.60k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  793|  5.60k|        if len >= Self::LOOP_SIZE {
  794|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  795|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  796|       |
  797|      0|                let a = V::load_aligned(cur);
  798|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  799|      0|                let eqa1 = self.v1.cmpeq(a);
  800|      0|                let eqb1 = self.v1.cmpeq(b);
  801|      0|                let eqa2 = self.v2.cmpeq(a);
  802|      0|                let eqb2 = self.v2.cmpeq(b);
  803|      0|                let eqa3 = self.v3.cmpeq(a);
  804|      0|                let eqb3 = self.v3.cmpeq(b);
  805|      0|                let or1 = eqa1.or(eqb1);
  806|      0|                let or2 = eqa2.or(eqb2);
  807|      0|                let or3 = eqa3.or(eqb3);
  808|      0|                let or4 = or1.or(or2);
  809|      0|                let or5 = or3.or(or4);
  810|      0|                if or5.movemask_will_have_non_zero() {
  811|      0|                    let mask = eqa1
  812|      0|                        .movemask()
  813|      0|                        .or(eqa2.movemask())
  814|      0|                        .or(eqa3.movemask());
  815|      0|                    if mask.has_non_zero() {
  816|      0|                        return Some(cur.add(topos(mask)));
  817|      0|                    }
  818|      0|
  819|      0|                    let mask = eqb1
  820|      0|                        .movemask()
  821|      0|                        .or(eqb2.movemask())
  822|      0|                        .or(eqb3.movemask());
  823|      0|                    debug_assert!(mask.has_non_zero());
  824|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  825|      0|                }
  826|      0|                cur = cur.add(Self::LOOP_SIZE);
  827|       |            }
  828|  5.60k|        }
  829|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  830|       |        // loads here, but I believe we are guaranteed that they are aligned
  831|       |        // since `cur` is aligned.
  832|  6.52k|        while cur <= end.sub(V::BYTES) {
  833|  3.26k|            debug_assert!(end.distance(cur) >= V::BYTES);
  834|  3.26k|            if let Some(cur) = self.search_chunk(cur, topos) {
  835|  2.34k|                return Some(cur);
  836|    922|            }
  837|    922|            cur = cur.add(V::BYTES);
  838|       |        }
  839|       |        // Finally handle any remaining bytes less than the size of V. In this
  840|       |        // case, our pointer may indeed be unaligned and the load may overlap
  841|       |        // with the previous one. But that's okay since we know the previous
  842|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  843|  3.26k|        if cur < end {
  844|  3.17k|            debug_assert!(end.distance(cur) < V::BYTES);
  845|  3.17k|            cur = cur.sub(V::BYTES - end.distance(cur));
  846|  3.17k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  847|  3.17k|            return self.search_chunk(cur, topos);
  848|     91|        }
  849|     91|        None
  850|  94.7k|    }
_RNvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE8find_rawBb_:
  765|  4.27M|    pub(crate) unsafe fn find_raw(
  766|  4.27M|        &self,
  767|  4.27M|        start: *const u8,
  768|  4.27M|        end: *const u8,
  769|  4.27M|    ) -> Option<*const u8> {
  770|  4.27M|        // If we want to support vectors bigger than 256 bits, we probably
  771|  4.27M|        // need to move up to using a u64 for the masks used below. Currently
  772|  4.27M|        // they are 32 bits, which means we're SOL for vectors that need masks
  773|  4.27M|        // bigger than 32 bits. Overall unclear until there's a use case.
  774|  4.27M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  775|       |
  776|  4.27M|        let topos = V::Mask::first_offset;
  777|  4.27M|        let len = end.distance(start);
  778|  4.27M|        debug_assert!(
  779|      0|            len >= V::BYTES,
  780|      0|            "haystack has length {}, but must be at least {}",
  781|       |            len,
  782|       |            V::BYTES
  783|       |        );
  784|       |
  785|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  786|       |        // of the haystack prior to where aligned loads can start.
  787|  4.27M|        if let Some(cur) = self.search_chunk(start, topos) {
  788|  3.55M|            return Some(cur);
  789|   724k|        }
  790|   724k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  791|   724k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  792|   724k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  793|   724k|        if len >= Self::LOOP_SIZE {
  794|  2.73M|            while cur <= end.sub(Self::LOOP_SIZE) {
  795|  2.72M|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  796|       |
  797|  2.72M|                let a = V::load_aligned(cur);
  798|  2.72M|                let b = V::load_aligned(cur.add(V::BYTES));
  799|  2.72M|                let eqa1 = self.v1.cmpeq(a);
  800|  2.72M|                let eqb1 = self.v1.cmpeq(b);
  801|  2.72M|                let eqa2 = self.v2.cmpeq(a);
  802|  2.72M|                let eqb2 = self.v2.cmpeq(b);
  803|  2.72M|                let eqa3 = self.v3.cmpeq(a);
  804|  2.72M|                let eqb3 = self.v3.cmpeq(b);
  805|  2.72M|                let or1 = eqa1.or(eqb1);
  806|  2.72M|                let or2 = eqa2.or(eqb2);
  807|  2.72M|                let or3 = eqa3.or(eqb3);
  808|  2.72M|                let or4 = or1.or(or2);
  809|  2.72M|                let or5 = or3.or(or4);
  810|  2.72M|                if or5.movemask_will_have_non_zero() {
  811|   685k|                    let mask = eqa1
  812|   685k|                        .movemask()
  813|   685k|                        .or(eqa2.movemask())
  814|   685k|                        .or(eqa3.movemask());
  815|   685k|                    if mask.has_non_zero() {
  816|   524k|                        return Some(cur.add(topos(mask)));
  817|   161k|                    }
  818|   161k|
  819|   161k|                    let mask = eqb1
  820|   161k|                        .movemask()
  821|   161k|                        .or(eqb2.movemask())
  822|   161k|                        .or(eqb3.movemask());
  823|   161k|                    debug_assert!(mask.has_non_zero());
  824|   161k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  825|  2.04M|                }
  826|  2.04M|                cur = cur.add(Self::LOOP_SIZE);
  827|       |            }
  828|  34.2k|        }
  829|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  830|       |        // loads here, but I believe we are guaranteed that they are aligned
  831|       |        // since `cur` is aligned.
  832|  48.7k|        while cur <= end.sub(V::BYTES) {
  833|  34.1k|            debug_assert!(end.distance(cur) >= V::BYTES);
  834|  34.1k|            if let Some(cur) = self.search_chunk(cur, topos) {
  835|  23.9k|                return Some(cur);
  836|  10.1k|            }
  837|  10.1k|            cur = cur.add(V::BYTES);
  838|       |        }
  839|       |        // Finally handle any remaining bytes less than the size of V. In this
  840|       |        // case, our pointer may indeed be unaligned and the load may overlap
  841|       |        // with the previous one. But that's okay since we know the previous
  842|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  843|  14.6k|        if cur < end {
  844|  14.6k|            debug_assert!(end.distance(cur) < V::BYTES);
  845|  14.6k|            cur = cur.sub(V::BYTES - end.distance(cur));
  846|  14.6k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  847|  14.6k|            return self.search_chunk(cur, topos);
  848|     20|        }
  849|     20|        None
  850|  4.27M|    }
_RINvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB6_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBc_6vector16SensibleMoveMaskNtB29_8MoveMask12first_offsetEBc_:
  962|   101k|    unsafe fn search_chunk(
  963|   101k|        &self,
  964|   101k|        cur: *const u8,
  965|   101k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  966|   101k|    ) -> Option<*const u8> {
  967|   101k|        let chunk = V::load_unaligned(cur);
  968|   101k|        let eq1 = self.v1.cmpeq(chunk);
  969|   101k|        let eq2 = self.v2.cmpeq(chunk);
  970|   101k|        let eq3 = self.v3.cmpeq(chunk);
  971|   101k|        let mask = eq1.or(eq2).or(eq3).movemask();
  972|   101k|        if mask.has_non_zero() {
  973|  93.2k|            let mask1 = eq1.movemask();
  974|  93.2k|            let mask2 = eq2.movemask();
  975|  93.2k|            let mask3 = eq3.movemask();
  976|  93.2k|            Some(cur.add(mask_to_offset(mask1.or(mask2).or(mask3))))
  977|       |        } else {
  978|  7.92k|            None
  979|       |        }
  980|   101k|    }
_RINvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB6_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBc_6vector16SensibleMoveMaskNtB29_8MoveMask12first_offsetEBc_:
  962|  4.32M|    unsafe fn search_chunk(
  963|  4.32M|        &self,
  964|  4.32M|        cur: *const u8,
  965|  4.32M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  966|  4.32M|    ) -> Option<*const u8> {
  967|  4.32M|        let chunk = V::load_unaligned(cur);
  968|  4.32M|        let eq1 = self.v1.cmpeq(chunk);
  969|  4.32M|        let eq2 = self.v2.cmpeq(chunk);
  970|  4.32M|        let eq3 = self.v3.cmpeq(chunk);
  971|  4.32M|        let mask = eq1.or(eq2).or(eq3).movemask();
  972|  4.32M|        if mask.has_non_zero() {
  973|  3.58M|            let mask1 = eq1.movemask();
  974|  3.58M|            let mask2 = eq2.movemask();
  975|  3.58M|            let mask3 = eq3.movemask();
  976|  3.58M|            Some(cur.add(mask_to_offset(mask1.or(mask2).or(mask3))))
  977|       |        } else {
  978|   735k|            None
  979|       |        }
  980|  4.32M|    }
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  1.22M|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  1.22M|    start: *const u8,
 1150|  1.22M|    end: *const u8,
 1151|  1.22M|    confirm: F,
 1152|  1.22M|) -> Option<*const u8> {
 1153|  1.22M|    debug_assert!(start <= end);
 1154|  1.22M|    let mut ptr = start;
 1155|  4.68M|    while ptr < end {
 1156|  4.38M|        if confirm(*ptr) {
 1157|   924k|            return Some(ptr);
 1158|  3.46M|        }
 1159|  3.46M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|   297k|    None
 1162|  1.22M|}
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|  2.15M|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  2.15M|    start: *const u8,
 1150|  2.15M|    end: *const u8,
 1151|  2.15M|    confirm: F,
 1152|  2.15M|) -> Option<*const u8> {
 1153|  2.15M|    debug_assert!(start <= end);
 1154|  2.15M|    let mut ptr = start;
 1155|  8.21M|    while ptr < end {
 1156|  6.78M|        if confirm(*ptr) {
 1157|   728k|            return Some(ptr);
 1158|  6.05M|        }
 1159|  6.05M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  1.43M|    None
 1162|  2.15M|}
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs6_NtNtNtB6_6x86_644avx26memchrNtB1d_5Three8find_raw0EB8_:
 1148|   144k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|   144k|    start: *const u8,
 1150|   144k|    end: *const u8,
 1151|   144k|    confirm: F,
 1152|   144k|) -> Option<*const u8> {
 1153|   144k|    debug_assert!(start <= end);
 1154|   144k|    let mut ptr = start;
 1155|   617k|    while ptr < end {
 1156|   605k|        if confirm(*ptr) {
 1157|   132k|            return Some(ptr);
 1158|   472k|        }
 1159|   472k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  11.5k|    None
 1162|   144k|}

_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  4.70M|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  4.70M|        One {
   71|  4.70M|            sse2: generic::One::new(needle),
   72|  4.70M|            avx2: generic::One::new(needle),
   73|  4.70M|        }
   74|  4.70M|    }
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  4.70M|    pub unsafe fn find_raw(
  180|  4.70M|        &self,
  181|  4.70M|        start: *const u8,
  182|  4.70M|        end: *const u8,
  183|  4.70M|    ) -> Option<*const u8> {
  184|  4.70M|        if start >= end {
  185|   907k|            return None;
  186|  3.79M|        }
  187|  3.79M|        let len = end.distance(start);
  188|  3.79M|        if len < __m256i::BYTES {
  189|  1.34M|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  1.22M|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  1.22M|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|   120k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  2.45M|        }
  201|  2.45M|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  2.45M|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  2.45M|        // enough to run on the vector routine. Pointer validity is caller's
  204|  2.45M|        // responsibility.
  205|  2.45M|        //
  206|  2.45M|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  2.45M|        // means we'd have to annotate this routine with `target_feature`.
  208|  2.45M|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  2.45M|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  2.45M|        // The real problem is that a routine with a `target_feature`
  211|  2.45M|        // annotation generally can't be inlined into caller code unless
  212|  2.45M|        // the caller code has the same target feature annotations. Namely,
  213|  2.45M|        // the common case (at time of writing) is for calling code to not
  214|  2.45M|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  2.45M|        // `target_feature` on this routine, it can be inlined which will
  216|  2.45M|        // handle some of the short-haystack cases above without touching the
  217|  2.45M|        // architecture specific code.
  218|  2.45M|        self.find_raw_avx2(start, end)
  219|  4.70M|    }
_RNCNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|  4.38M|                generic::fwd_byte_by_byte(start, end, |b| {
  193|  4.38M|                    b == self.sse2.needle1()
  194|  4.38M|                })
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|   120k|    unsafe fn find_raw_sse2(
  337|   120k|        &self,
  338|   120k|        start: *const u8,
  339|   120k|        end: *const u8,
  340|   120k|    ) -> Option<*const u8> {
  341|   120k|        self.sse2.find_raw(start, end)
  342|   120k|    }
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  2.45M|    unsafe fn find_raw_avx2(
  397|  2.45M|        &self,
  398|  2.45M|        start: *const u8,
  399|  2.45M|        end: *const u8,
  400|  2.45M|    ) -> Option<*const u8> {
  401|  2.45M|        self.avx2.find_raw(start, end)
  402|  2.45M|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  37.3M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  37.3M|        Two {
  558|  37.3M|            sse2: generic::Two::new(needle1, needle2),
  559|  37.3M|            avx2: generic::Two::new(needle1, needle2),
  560|  37.3M|        }
  561|  37.3M|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  37.3M|    pub unsafe fn find_raw(
  655|  37.3M|        &self,
  656|  37.3M|        start: *const u8,
  657|  37.3M|        end: *const u8,
  658|  37.3M|    ) -> Option<*const u8> {
  659|  37.3M|        if start >= end {
  660|   170k|            return None;
  661|  37.1M|        }
  662|  37.1M|        let len = end.distance(start);
  663|  37.1M|        if len < __m256i::BYTES {
  664|  2.94M|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  2.15M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  2.15M|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|   788k|                self.find_raw_sse2(start, end)
  674|       |            };
  675|  34.1M|        }
  676|  34.1M|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|  34.1M|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|  34.1M|        // enough to run on the vector routine. Pointer validity is caller's
  679|  34.1M|        // responsibility.
  680|  34.1M|        //
  681|  34.1M|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|  34.1M|        // means we'd have to annotate this routine with `target_feature`.
  683|  34.1M|        // Which is fine, because this routine is `unsafe` anyway and the
  684|  34.1M|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|  34.1M|        // The real problem is that a routine with a `target_feature`
  686|  34.1M|        // annotation generally can't be inlined into caller code unless
  687|  34.1M|        // the caller code has the same target feature annotations. Namely,
  688|  34.1M|        // the common case (at time of writing) is for calling code to not
  689|  34.1M|        // have the `avx2` target feature enabled *at compile time*. Without
  690|  34.1M|        // `target_feature` on this routine, it can be inlined which will
  691|  34.1M|        // handle some of the short-haystack cases above without touching the
  692|  34.1M|        // architecture specific code.
  693|  34.1M|        self.find_raw_avx2(start, end)
  694|  37.3M|    }
_RNCNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  6.78M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  6.78M|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  6.78M|                })
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|   788k|    unsafe fn find_raw_sse2(
  765|   788k|        &self,
  766|   788k|        start: *const u8,
  767|   788k|        end: *const u8,
  768|   788k|    ) -> Option<*const u8> {
  769|   788k|        self.sse2.find_raw(start, end)
  770|   788k|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|  34.1M|    unsafe fn find_raw_avx2(
  805|  34.1M|        &self,
  806|  34.1M|        start: *const u8,
  807|  34.1M|        end: *const u8,
  808|  34.1M|    ) -> Option<*const u8> {
  809|  34.1M|        self.avx2.find_raw(start, end)
  810|  34.1M|    }
_RNvMs6_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_5Three13new_uncheckedBd_:
  935|  4.51M|    pub unsafe fn new_unchecked(
  936|  4.51M|        needle1: u8,
  937|  4.51M|        needle2: u8,
  938|  4.51M|        needle3: u8,
  939|  4.51M|    ) -> Three {
  940|  4.51M|        Three {
  941|  4.51M|            sse2: generic::Three::new(needle1, needle2, needle3),
  942|  4.51M|            avx2: generic::Three::new(needle1, needle2, needle3),
  943|  4.51M|        }
  944|  4.51M|    }
_RNvMs6_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_5Three12is_availableBd_:
  956|      1|    pub fn is_available() -> bool {
  957|      1|        #[cfg(not(target_feature = "sse2"))]
  958|      1|        {
  959|      1|            false
  960|      1|        }
  961|      1|        #[cfg(target_feature = "sse2")]
  962|      1|        {
  963|      1|            #[cfg(target_feature = "avx2")]
  964|      1|            {
  965|      1|                true
  966|      1|            }
  967|      1|            #[cfg(not(target_feature = "avx2"))]
  968|      1|            {
  969|      1|                #[cfg(feature = "std")]
  970|      1|                {
  971|      1|                    std::is_x86_feature_detected!("avx2")
  972|       |                }
  973|       |                #[cfg(not(feature = "std"))]
  974|       |                {
  975|       |                    false
  976|       |                }
  977|       |            }
  978|       |        }
  979|      1|    }
_RNvMs6_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_5Three8find_rawBd_:
 1037|  4.51M|    pub unsafe fn find_raw(
 1038|  4.51M|        &self,
 1039|  4.51M|        start: *const u8,
 1040|  4.51M|        end: *const u8,
 1041|  4.51M|    ) -> Option<*const u8> {
 1042|  4.51M|        if start >= end {
 1043|  1.50k|            return None;
 1044|  4.51M|        }
 1045|  4.51M|        let len = end.distance(start);
 1046|  4.51M|        if len < __m256i::BYTES {
 1047|   239k|            return if len < __m128i::BYTES {
 1048|       |                // SAFETY: We require the caller to pass valid start/end
 1049|       |                // pointers.
 1050|   144k|                generic::fwd_byte_by_byte(start, end, |b| {
 1051|       |                    b == self.sse2.needle1()
 1052|       |                        || b == self.sse2.needle2()
 1053|       |                        || b == self.sse2.needle3()
 1054|   144k|                })
 1055|       |            } else {
 1056|       |                // SAFETY: We require the caller to pass valid start/end
 1057|       |                // pointers.
 1058|  94.7k|                self.find_raw_sse2(start, end)
 1059|       |            };
 1060|  4.27M|        }
 1061|  4.27M|        // SAFETY: Building a `Three` means it's safe to call both 'sse2' and
 1062|  4.27M|        // 'avx2' routines. Also, we've checked that our haystack is big
 1063|  4.27M|        // enough to run on the vector routine. Pointer validity is caller's
 1064|  4.27M|        // responsibility.
 1065|  4.27M|        //
 1066|  4.27M|        // Note that we could call `self.avx2.find_raw` directly here. But that
 1067|  4.27M|        // means we'd have to annotate this routine with `target_feature`.
 1068|  4.27M|        // Which is fine, because this routine is `unsafe` anyway and the
 1069|  4.27M|        // `target_feature` obligation is met by virtue of building a `Three`.
 1070|  4.27M|        // The real problem is that a routine with a `target_feature`
 1071|  4.27M|        // annotation generally can't be inlined into caller code unless
 1072|  4.27M|        // the caller code has the same target feature annotations. Namely,
 1073|  4.27M|        // the common case (at time of writing) is for calling code to not
 1074|  4.27M|        // have the `avx2` target feature enabled *at compile time*. Without
 1075|  4.27M|        // `target_feature` on this routine, it can be inlined which will
 1076|  4.27M|        // handle some of the short-haystack cases above without touching the
 1077|  4.27M|        // architecture specific code.
 1078|  4.27M|        self.find_raw_avx2(start, end)
 1079|  4.51M|    }
_RNCNvMs6_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB7_5Three8find_raw0Bf_:
 1050|   605k|                generic::fwd_byte_by_byte(start, end, |b| {
 1051|   605k|                    b == self.sse2.needle1()
 1052|   481k|                        || b == self.sse2.needle2()
 1053|   479k|                        || b == self.sse2.needle3()
 1054|   605k|                })
_RNvMs6_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_5Three13find_raw_sse2Bd_:
 1151|  94.7k|    unsafe fn find_raw_sse2(
 1152|  94.7k|        &self,
 1153|  94.7k|        start: *const u8,
 1154|  94.7k|        end: *const u8,
 1155|  94.7k|    ) -> Option<*const u8> {
 1156|  94.7k|        self.sse2.find_raw(start, end)
 1157|  94.7k|    }
_RNvMs6_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_5Three13find_raw_avx2Bd_:
 1191|  4.27M|    unsafe fn find_raw_avx2(
 1192|  4.27M|        &self,
 1193|  4.27M|        start: *const u8,
 1194|  4.27M|        end: *const u8,
 1195|  4.27M|    ) -> Option<*const u8> {
 1196|  4.27M|        self.avx2.find_raw(start, end)
 1197|  4.27M|    }

_RNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr10memchr_raw:
  174|  4.70M|pub(crate) fn memchr_raw(
  175|  4.70M|    n1: u8,
  176|  4.70M|    start: *const u8,
  177|  4.70M|    end: *const u8,
  178|  4.70M|) -> Option<*const u8> {
  179|  4.70M|    // SAFETY: We provide a valid function pointer type.
  180|  4.70M|    unsafe_ifunc!(
  181|  4.70M|        One,
  182|  4.70M|        find_raw,
  183|  4.70M|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  4.70M|        Option<*const u8>,
  185|  4.70M|        start,
  186|  4.70M|        end,
  187|  4.70M|        n1
  188|  4.70M|    )
  189|  4.70M|}
_RNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  37.3M|pub(crate) fn memchr2_raw(
  221|  37.3M|    n1: u8,
  222|  37.3M|    n2: u8,
  223|  37.3M|    start: *const u8,
  224|  37.3M|    end: *const u8,
  225|  37.3M|) -> Option<*const u8> {
  226|  37.3M|    // SAFETY: We provide a valid function pointer type.
  227|  37.3M|    unsafe_ifunc!(
  228|  37.3M|        Two,
  229|  37.3M|        find_raw,
  230|  37.3M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  37.3M|        Option<*const u8>,
  232|  37.3M|        start,
  233|  37.3M|        end,
  234|  37.3M|        n1,
  235|  37.3M|        n2
  236|  37.3M|    )
  237|  37.3M|}
_RNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr3_raw:
  270|  4.51M|pub(crate) fn memchr3_raw(
  271|  4.51M|    n1: u8,
  272|  4.51M|    n2: u8,
  273|  4.51M|    n3: u8,
  274|  4.51M|    start: *const u8,
  275|  4.51M|    end: *const u8,
  276|  4.51M|) -> Option<*const u8> {
  277|  4.51M|    // SAFETY: We provide a valid function pointer type.
  278|  4.51M|    unsafe_ifunc!(
  279|  4.51M|        Three,
  280|  4.51M|        find_raw,
  281|  4.51M|        unsafe fn(u8, u8, u8, *const u8, *const u8) -> Option<*const u8>,
  282|  4.51M|        Option<*const u8>,
  283|  4.51M|        start,
  284|  4.51M|        end,
  285|  4.51M|        n1,
  286|  4.51M|        n2,
  287|  4.51M|        n3
  288|  4.51M|    )
  289|  4.51M|}
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  4.70M|        unsafe fn find_avx2(
   79|  4.70M|            $($needle: u8),+,
   80|  4.70M|            $hay_start: *const u8,
   81|  4.70M|            $hay_end: *const u8,
   82|  4.70M|        ) -> $retty {
   83|  4.70M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  4.70M|            $memchrty::new_unchecked($($needle),+)
   85|  4.70M|                .$memchrfind($hay_start, $hay_end)
   86|  4.70M|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  37.3M|        unsafe fn find_avx2(
   79|  37.3M|            $($needle: u8),+,
   80|  37.3M|            $hay_start: *const u8,
   81|  37.3M|            $hay_end: *const u8,
   82|  37.3M|        ) -> $retty {
   83|  37.3M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  37.3M|            $memchrty::new_unchecked($($needle),+)
   85|  37.3M|                .$memchrfind($hay_start, $hay_end)
   86|  37.3M|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr3_raw9find_avx2:
   78|  4.51M|        unsafe fn find_avx2(
   79|  4.51M|            $($needle: u8),+,
   80|  4.51M|            $hay_start: *const u8,
   81|  4.51M|            $hay_end: *const u8,
   82|  4.51M|        ) -> $retty {
   83|  4.51M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  4.51M|            $memchrty::new_unchecked($($needle),+)
   85|  4.51M|                .$memchrfind($hay_start, $hay_end)
   86|  4.51M|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr3_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }

_RNvXNtCseJq1f3D7C0A_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|   131M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|   131M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|   131M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|   131M|    }
_RNvXNtCseJq1f3D7C0A_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|  3.09M|    fn as_usize(self) -> usize {
   27|  3.09M|        self as usize
   28|  3.09M|    }

_RNvMNtCseJq1f3D7C0A_6memchr6memchrNtB2_6Memchr3newCs4sYt0urF4vM_8oxrdfxml:
  300|   108k|    pub fn new(needle1: u8, haystack: &'h [u8]) -> Memchr<'h> {
  301|   108k|        Memchr {
  302|   108k|            needle1,
  303|   108k|            it: crate::arch::generic::memchr::Iter::new(haystack),
  304|   108k|        }
  305|   108k|    }
_RNvMs2_NtCseJq1f3D7C0A_6memchr6memchrNtB5_7Memchr23newCs4sYt0urF4vM_8oxrdfxml:
  377|  3.38M|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  3.38M|        Memchr2 {
  379|  3.38M|            needle1,
  380|  3.38M|            needle2,
  381|  3.38M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  3.38M|        }
  383|  3.38M|    }
_RNvMs6_NtCseJq1f3D7C0A_6memchr6memchrNtB5_7Memchr33newCs4sYt0urF4vM_8oxrdfxml:
  446|  2.28M|    pub fn new(
  447|  2.28M|        needle1: u8,
  448|  2.28M|        needle2: u8,
  449|  2.28M|        needle3: u8,
  450|  2.28M|        haystack: &'h [u8],
  451|  2.28M|    ) -> Memchr3<'h> {
  452|  2.28M|        Memchr3 {
  453|  2.28M|            needle1,
  454|  2.28M|            needle2,
  455|  2.28M|            needle3,
  456|  2.28M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  457|  2.28M|        }
  458|  2.28M|    }
_RNvNtCseJq1f3D7C0A_6memchr6memchr11memchr_iterCs4sYt0urF4vM_8oxrdfxml:
  216|   108k|pub fn memchr_iter<'h>(needle: u8, haystack: &'h [u8]) -> Memchr<'h> {
  217|   108k|    Memchr::new(needle, haystack)
  218|   108k|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr12memchr2_iterCs4sYt0urF4vM_8oxrdfxml:
  232|  3.38M|pub fn memchr2_iter<'h>(
  233|  3.38M|    needle1: u8,
  234|  3.38M|    needle2: u8,
  235|  3.38M|    haystack: &'h [u8],
  236|  3.38M|) -> Memchr2<'h> {
  237|  3.38M|    Memchr2::new(needle1, needle2, haystack)
  238|  3.38M|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr12memchr3_iterCs4sYt0urF4vM_8oxrdfxml:
  256|  2.28M|pub fn memchr3_iter<'h>(
  257|  2.28M|    needle1: u8,
  258|  2.28M|    needle2: u8,
  259|  2.28M|    needle3: u8,
  260|  2.28M|    haystack: &'h [u8],
  261|  2.28M|) -> Memchr3<'h> {
  262|  2.28M|    Memchr3::new(needle1, needle2, needle3, haystack)
  263|  2.28M|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr6memchrCs4sYt0urF4vM_8oxrdfxml:
   27|  2.40M|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  2.40M|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  2.40M|    // pointer between start and end.
   30|  2.40M|    unsafe {
   31|  2.40M|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  2.40M|        })
   34|  2.40M|    }
   35|  2.40M|}
_RNvXs3_NtCseJq1f3D7C0A_6memchr6memchrNtB5_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCs4sYt0urF4vM_8oxrdfxml:
  390|  37.0M|    fn next(&mut self) -> Option<usize> {
  391|  37.0M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  37.0M|        // pointers returns will fall within the start and end bounds, and this
  393|  37.0M|        // upholds the safety contract of `self.it.next`.
  394|  37.0M|        unsafe {
  395|  37.0M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  37.0M|        }
  397|  37.0M|    }
_RNvXs7_NtCseJq1f3D7C0A_6memchr6memchrNtB5_7Memchr3NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCs4sYt0urF4vM_8oxrdfxml:
  465|  4.51M|    fn next(&mut self) -> Option<usize> {
  466|  4.51M|        // SAFETY: All of our implementations of memchr ensure that any
  467|  4.51M|        // pointers returns will fall within the start and end bounds, and this
  468|  4.51M|        // upholds the safety contract of `self.it.next`.
  469|  4.51M|        unsafe {
  470|  4.51M|            self.it.next(|s, e| {
  471|       |                memchr3_raw(self.needle1, self.needle2, self.needle3, s, e)
  472|  4.51M|            })
  473|  4.51M|        }
  474|  4.51M|    }
_RNvXs_NtCseJq1f3D7C0A_6memchr6memchrNtB4_6MemchrNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCs4sYt0urF4vM_8oxrdfxml:
  312|   132k|    fn next(&mut self) -> Option<usize> {
  313|   132k|        // SAFETY: All of our implementations of memchr ensure that any
  314|   132k|        // pointers returns will fall within the start and end bounds, and this
  315|   132k|        // upholds the safety contract of `self.it.next`.
  316|   132k|        unsafe {
  317|   132k|            // NOTE: I attempted to define an enum of previously created
  318|   132k|            // searchers and then switch on those here instead of just
  319|   132k|            // calling `memchr_raw` (or `One::new(..).find_raw(..)`). But
  320|   132k|            // that turned out to have a fair bit of extra overhead when
  321|   132k|            // searching very small haystacks.
  322|   132k|            self.it.next(|s, e| memchr_raw(self.needle1, s, e))
  323|   132k|        }
  324|   132k|    }
_RNCNvXs3_NtCseJq1f3D7C0A_6memchr6memchrNtB7_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0Cs4QWtT85WPeh_9quick_xml:
  395|  37.3M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNCNvXs7_NtCseJq1f3D7C0A_6memchr6memchrNtB7_7Memchr3NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0Cs4QWtT85WPeh_9quick_xml:
  470|  4.51M|            self.it.next(|s, e| {
  471|  4.51M|                memchr3_raw(self.needle1, self.needle2, self.needle3, s, e)
  472|  4.51M|            })
_RNCNvXs_NtCseJq1f3D7C0A_6memchr6memchrNtB6_6MemchrNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0Cs4QWtT85WPeh_9quick_xml:
  322|   132k|            self.it.next(|s, e| memchr_raw(self.needle1, s, e))
_RNvNtCseJq1f3D7C0A_6memchr6memchr10memchr_rawCs4QWtT85WPeh_9quick_xml:
  504|   132k|unsafe fn memchr_raw(
  505|   132k|    needle: u8,
  506|   132k|    start: *const u8,
  507|   132k|    end: *const u8,
  508|   132k|) -> Option<*const u8> {
  509|   132k|    #[cfg(target_arch = "x86_64")]
  510|   132k|    {
  511|   132k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|   132k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|   132k|        // time. This function also handles using a fallback if neither AVX2
  514|   132k|        // nor SSE2 (unusual) are available.
  515|   132k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|   132k|    }
  517|   132k|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  518|   132k|    {
  519|   132k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|   132k|    }
  521|   132k|    #[cfg(target_arch = "aarch64")]
  522|   132k|    {
  523|   132k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|   132k|    }
  525|   132k|    #[cfg(not(any(
  526|   132k|        target_arch = "x86_64",
  527|   132k|        all(target_arch = "wasm32", target_feature = "simd128"),
  528|   132k|        target_arch = "aarch64"
  529|   132k|    )))]
  530|   132k|    {
  531|   132k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|   132k|    }
  533|   132k|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr11memchr2_rawCs4QWtT85WPeh_9quick_xml:
  574|  37.3M|unsafe fn memchr2_raw(
  575|  37.3M|    needle1: u8,
  576|  37.3M|    needle2: u8,
  577|  37.3M|    start: *const u8,
  578|  37.3M|    end: *const u8,
  579|  37.3M|) -> Option<*const u8> {
  580|  37.3M|    #[cfg(target_arch = "x86_64")]
  581|  37.3M|    {
  582|  37.3M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  37.3M|    }
  584|  37.3M|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  585|  37.3M|    {
  586|  37.3M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  37.3M|    }
  588|  37.3M|    #[cfg(target_arch = "aarch64")]
  589|  37.3M|    {
  590|  37.3M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  37.3M|    }
  592|  37.3M|    #[cfg(not(any(
  593|  37.3M|        target_arch = "x86_64",
  594|  37.3M|        all(target_arch = "wasm32", target_feature = "simd128"),
  595|  37.3M|        target_arch = "aarch64"
  596|  37.3M|    )))]
  597|  37.3M|    {
  598|  37.3M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  37.3M|            .find_raw(start, end)
  600|  37.3M|    }
  601|  37.3M|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr11memchr3_rawCs4QWtT85WPeh_9quick_xml:
  646|  4.51M|unsafe fn memchr3_raw(
  647|  4.51M|    needle1: u8,
  648|  4.51M|    needle2: u8,
  649|  4.51M|    needle3: u8,
  650|  4.51M|    start: *const u8,
  651|  4.51M|    end: *const u8,
  652|  4.51M|) -> Option<*const u8> {
  653|  4.51M|    #[cfg(target_arch = "x86_64")]
  654|  4.51M|    {
  655|  4.51M|        crate::arch::x86_64::memchr::memchr3_raw(
  656|  4.51M|            needle1, needle2, needle3, start, end,
  657|  4.51M|        )
  658|  4.51M|    }
  659|  4.51M|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  660|  4.51M|    {
  661|  4.51M|        crate::arch::wasm32::memchr::memchr3_raw(
  662|  4.51M|            needle1, needle2, needle3, start, end,
  663|  4.51M|        )
  664|  4.51M|    }
  665|  4.51M|    #[cfg(target_arch = "aarch64")]
  666|  4.51M|    {
  667|  4.51M|        crate::arch::aarch64::memchr::memchr3_raw(
  668|  4.51M|            needle1, needle2, needle3, start, end,
  669|  4.51M|        )
  670|  4.51M|    }
  671|  4.51M|    #[cfg(not(any(
  672|  4.51M|        target_arch = "x86_64",
  673|  4.51M|        all(target_arch = "wasm32", target_feature = "simd128"),
  674|  4.51M|        target_arch = "aarch64"
  675|  4.51M|    )))]
  676|  4.51M|    {
  677|  4.51M|        crate::arch::all::memchr::Three::new(needle1, needle2, needle3)
  678|  4.51M|            .find_raw(start, end)
  679|  4.51M|    }
  680|  4.51M|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr6memchrCs4QWtT85WPeh_9quick_xml:
   27|  2.16M|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  2.16M|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  2.16M|    // pointer between start and end.
   30|  2.16M|    unsafe {
   31|  2.16M|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  2.16M|        })
   34|  2.16M|    }
   35|  2.16M|}
_RNvXs3_NtCseJq1f3D7C0A_6memchr6memchrNtB5_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCs4QWtT85WPeh_9quick_xml:
  390|   267k|    fn next(&mut self) -> Option<usize> {
  391|   267k|        // SAFETY: All of our implementations of memchr ensure that any
  392|   267k|        // pointers returns will fall within the start and end bounds, and this
  393|   267k|        // upholds the safety contract of `self.it.next`.
  394|   267k|        unsafe {
  395|   267k|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|   267k|        }
  397|   267k|    }
_RNCNvNtCseJq1f3D7C0A_6memchr6memchr6memchr0B5_:
   31|  4.57M|        generic::search_slice_with_raw(haystack, |start, end| {
   32|  4.57M|            memchr_raw(needle, start, end)
   33|  4.57M|        })
_RNvNtCseJq1f3D7C0A_6memchr6memchr10memchr_rawB3_:
  504|  4.57M|unsafe fn memchr_raw(
  505|  4.57M|    needle: u8,
  506|  4.57M|    start: *const u8,
  507|  4.57M|    end: *const u8,
  508|  4.57M|) -> Option<*const u8> {
  509|  4.57M|    #[cfg(target_arch = "x86_64")]
  510|  4.57M|    {
  511|  4.57M|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  4.57M|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  4.57M|        // time. This function also handles using a fallback if neither AVX2
  514|  4.57M|        // nor SSE2 (unusual) are available.
  515|  4.57M|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  4.57M|    }
  517|  4.57M|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  518|  4.57M|    {
  519|  4.57M|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  4.57M|    }
  521|  4.57M|    #[cfg(target_arch = "aarch64")]
  522|  4.57M|    {
  523|  4.57M|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  4.57M|    }
  525|  4.57M|    #[cfg(not(any(
  526|  4.57M|        target_arch = "x86_64",
  527|  4.57M|        all(target_arch = "wasm32", target_feature = "simd128"),
  528|  4.57M|        target_arch = "aarch64"
  529|  4.57M|    )))]
  530|  4.57M|    {
  531|  4.57M|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  4.57M|    }
  533|  4.57M|}

_RNvMNtCseJq1f3D7C0A_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  126|  40.1M|    fn get_for_offset(self) -> u32 {
  127|  40.1M|        #[cfg(target_endian = "big")]
  128|  40.1M|        {
  129|  40.1M|            self.0.swap_bytes()
  130|  40.1M|        }
  131|  40.1M|        #[cfg(target_endian = "little")]
  132|  40.1M|        {
  133|  40.1M|            self.0
  134|  40.1M|        }
  135|  40.1M|    }
_RNvXs_NtCseJq1f3D7C0A_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  171|  40.1M|    fn first_offset(self) -> usize {
  172|  40.1M|        // We are dealing with little endian here (and if we aren't, we swap
  173|  40.1M|        // the bytes so we are in practice), where the most significant byte
  174|  40.1M|        // is at a higher address. That means the least significant bit that
  175|  40.1M|        // is set corresponds to the position of our first matching byte.
  176|  40.1M|        // That position corresponds to the number of zeros after the least
  177|  40.1M|        // significant bit.
  178|  40.1M|        self.get_for_offset().trailing_zeros() as usize
  179|  40.1M|    }
_RNvXs_NtCseJq1f3D7C0A_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  146|  50.5M|    fn has_non_zero(self) -> bool {
  147|  50.5M|        self.0 != 0
  148|  50.5M|    }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  217|  1.41M|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  218|  1.41M|            _mm_loadu_si128(data as *const __m128i)
  219|  1.41M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  222|  2.57M|        unsafe fn movemask(self) -> SensibleMoveMask {
  223|  2.57M|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  224|  2.57M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  227|  2.77M|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  228|  2.77M|            _mm_cmpeq_epi8(self, vector2)
  229|  2.77M|        }
_RNvYNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtNtCseJq1f3D7C0A_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   63|  5.06M|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   64|  5.06M|        self.movemask().has_non_zero()
   65|  5.06M|    }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  266|  43.0M|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  267|  43.0M|            _mm256_loadu_si256(data as *const __m256i)
  268|  43.0M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  271|   127M|        unsafe fn movemask(self) -> SensibleMoveMask {
  272|   127M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  273|   127M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  276|   113M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  277|   113M|            _mm256_cmpeq_epi8(self, vector2)
  278|   113M|        }
_RNvXs_NtCseJq1f3D7C0A_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  161|  42.4M|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  162|  42.4M|        SensibleMoveMask(self.0 | other.0)
  163|  42.4M|    }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  207|  92.8M|        unsafe fn splat(byte: u8) -> __m128i {
  208|  92.8M|            _mm_set1_epi8(byte as i8)
  209|  92.8M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector2or:
  237|  1.36M|        unsafe fn or(self, vector2: Self) -> __m128i {
  238|  1.36M|            _mm_or_si128(self, vector2)
  239|  1.36M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  256|  92.8M|        unsafe fn splat(byte: u8) -> __m256i {
  257|  92.8M|            _mm256_set1_epi8(byte as i8)
  258|  92.8M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  261|  10.3M|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  262|  10.3M|            _mm256_load_si256(data as *const __m256i)
  263|  10.3M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector2or:
  286|  65.3M|        unsafe fn or(self, vector2: Self) -> __m256i {
  287|  65.3M|            _mm256_or_si256(self, vector2)
  288|  65.3M|        }

_RNvMs2_NtCskvfXHrT6OsD_9once_cell3impINtB5_8OnceCellNtNtCs3OstG5Tqy1X_5alloc6string6StringE14is_initializedCs2ANfhTmAi2D_13libfuzzer_sys:
   49|  39.9k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  39.9k|        // An `Acquire` load is enough because that makes all the initialization
   51|  39.9k|        // operations visible to us, and, this being a fast path, weaker
   52|  39.9k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  39.9k|        // `SeqCst` operations on the slow path.
   54|  39.9k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  39.9k|    }

_RNvMs4_NtCskvfXHrT6OsD_9once_cell4syncINtB5_8OnceCellNtNtCs3OstG5Tqy1X_5alloc6string6StringE3getCs2ANfhTmAi2D_13libfuzzer_sys:
  963|  39.9k|        pub fn get(&self) -> Option<&T> {
  964|  39.9k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  39.9k|                None
  969|       |            }
  970|  39.9k|        }

_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECs1JxAZnM7jd_5oxrdf:
 1590|   125k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1591|   125k|        Err(IriParseError { kind })
 1592|   125k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_10parse_path0ECs1JxAZnM7jd_5oxrdf:
 1556|  26.0M|    fn read_url_codepoint_or_echar(
 1557|  26.0M|        &mut self,
 1558|  26.0M|        c: char,
 1559|  26.0M|        valid: impl Fn(char) -> bool,
 1560|  26.0M|    ) -> Result<(), IriParseError> {
 1561|  26.0M|        if UNCHECKED || valid(c) {
 1562|  26.0M|            self.output.push(c);
 1563|  26.0M|            Ok(())
 1564|  39.7k|        } else if c == '%' {
 1565|  14.1k|            self.read_echar()
 1566|       |        } else {
 1567|  25.6k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|  26.0M|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_11parse_query0ECs1JxAZnM7jd_5oxrdf:
 1556|   113M|    fn read_url_codepoint_or_echar(
 1557|   113M|        &mut self,
 1558|   113M|        c: char,
 1559|   113M|        valid: impl Fn(char) -> bool,
 1560|   113M|    ) -> Result<(), IriParseError> {
 1561|   113M|        if UNCHECKED || valid(c) {
 1562|   113M|            self.output.push(c);
 1563|   113M|            Ok(())
 1564|  12.0k|        } else if c == '%' {
 1565|  4.82k|            self.read_echar()
 1566|       |        } else {
 1567|  7.24k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   113M|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_14parse_fragment0ECs1JxAZnM7jd_5oxrdf:
 1556|  25.0M|    fn read_url_codepoint_or_echar(
 1557|  25.0M|        &mut self,
 1558|  25.0M|        c: char,
 1559|  25.0M|        valid: impl Fn(char) -> bool,
 1560|  25.0M|    ) -> Result<(), IriParseError> {
 1561|  25.0M|        if UNCHECKED || valid(c) {
 1562|  24.9M|            self.output.push(c);
 1563|  24.9M|            Ok(())
 1564|  14.9k|        } else if c == '%' {
 1565|  5.34k|            self.read_echar()
 1566|       |        } else {
 1567|  9.57k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|  25.0M|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_15parse_authority0ECs1JxAZnM7jd_5oxrdf:
 1556|  16.9M|    fn read_url_codepoint_or_echar(
 1557|  16.9M|        &mut self,
 1558|  16.9M|        c: char,
 1559|  16.9M|        valid: impl Fn(char) -> bool,
 1560|  16.9M|    ) -> Result<(), IriParseError> {
 1561|  16.9M|        if UNCHECKED || valid(c) {
 1562|  16.9M|            self.output.push(c);
 1563|  16.9M|            Ok(())
 1564|  20.1k|        } else if c == '%' {
 1565|  7.45k|            self.read_echar()
 1566|       |        } else {
 1567|  12.7k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|  16.9M|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_19parse_relative_path0ECs1JxAZnM7jd_5oxrdf:
 1556|   291k|    fn read_url_codepoint_or_echar(
 1557|   291k|        &mut self,
 1558|   291k|        c: char,
 1559|   291k|        valid: impl Fn(char) -> bool,
 1560|   291k|    ) -> Result<(), IriParseError> {
 1561|   291k|        if UNCHECKED || valid(c) {
 1562|   262k|            self.output.push(c);
 1563|   262k|            Ok(())
 1564|  28.8k|        } else if c == '%' {
 1565|  4.75k|            self.read_echar()
 1566|       |        } else {
 1567|  24.0k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   291k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNvB7_28is_iunreserved_or_sub_delimsECs1JxAZnM7jd_5oxrdf:
 1556|  16.0M|    fn read_url_codepoint_or_echar(
 1557|  16.0M|        &mut self,
 1558|  16.0M|        c: char,
 1559|  16.0M|        valid: impl Fn(char) -> bool,
 1560|  16.0M|    ) -> Result<(), IriParseError> {
 1561|  16.0M|        if UNCHECKED || valid(c) {
 1562|  16.0M|            self.output.push(c);
 1563|  16.0M|            Ok(())
 1564|  4.93k|        } else if c == '%' {
 1565|  3.26k|            self.read_echar()
 1566|       |        } else {
 1567|  1.66k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|  16.0M|    }
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10parse_path0Cs1JxAZnM7jd_5oxrdf:
 1516|  26.0M|                Some(c) => self.read_url_codepoint_or_echar(c, |c| {
 1517|  26.0M|                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1518|  26.0M|                })?,
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0Cs1JxAZnM7jd_5oxrdf:
 1574|  38.3k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0Cs1JxAZnM7jd_5oxrdf:
 1575|  19.6k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E11parse_query0Cs1JxAZnM7jd_5oxrdf:
 1530|   113M|                self.read_url_codepoint_or_echar(c, |c| {
 1531|   113M|                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?' | '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1532|   113M|                })?
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E14parse_fragment0Cs1JxAZnM7jd_5oxrdf:
 1541|  25.0M|            self.read_url_codepoint_or_echar(c, |c| {
 1542|  25.0M|                is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?')
 1543|  25.0M|            })?;
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E15parse_authority0Cs1JxAZnM7jd_5oxrdf:
 1364|  16.9M|                    self.read_url_codepoint_or_echar(c, |c| {
 1365|  16.9M|                        is_iunreserved_or_sub_delims(c) || c == ':'
 1366|  16.9M|                    })?;
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E19parse_relative_path0Cs1JxAZnM7jd_5oxrdf:
 1323|   291k|            self.read_url_codepoint_or_echar(c, |c| is_iunreserved_or_sub_delims(c) || c == '@')?;
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE10into_innerCs1JxAZnM7jd_5oxrdf:
  185|  1.01M|    pub fn into_inner(self) -> T {
  186|  1.01M|        self.iri
  187|  1.01M|    }
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE11is_absoluteCs1JxAZnM7jd_5oxrdf:
  199|  1.03M|    pub fn is_absolute(&self) -> bool {
  200|  1.03M|        self.positions.scheme_end != 0
  201|  1.03M|    }
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE5parseCs1JxAZnM7jd_5oxrdf:
   58|  1.16M|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  1.16M|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  1.03M|        Ok(Self { iri, positions })
   61|  1.16M|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCs1JxAZnM7jd_5oxrdf:
 1372|   819k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1373|   819k|        if self.input.starts_with('[') {
 1374|       |            // IP v6
 1375|  10.9k|            let start_position = self.input.position;
 1376|   207k|            while let Some(c) = self.input.next() {
 1377|   199k|                self.output.push(c);
 1378|   199k|                if c == ']' {
 1379|  3.03k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1380|  3.03k|                    if !UNCHECKED {
 1381|  3.03k|                        if ip.starts_with('v') || ip.starts_with('V') {
 1382|      0|                            self.validate_ip_v_future(ip)?;
 1383|  3.03k|                        } else if let Err(error) = Ipv6Addr::from_str(ip) {
 1384|  3.03k|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1385|      0|                        }
 1386|      0|                    }
 1387|       |
 1388|      0|                    let c = self.input.next();
 1389|      0|                    return match c {
 1390|       |                        Some(':') => {
 1391|      0|                            self.output.push(':');
 1392|      0|                            self.parse_port()
 1393|       |                        }
 1394|       |                        None | Some('/') | Some('?') | Some('#') => {
 1395|      0|                            self.output_positions.authority_end = self.output.len();
 1396|      0|                            self.parse_path_start(c)
 1397|       |                        }
 1398|      0|                        Some(c) => {
 1399|      0|                            if UNCHECKED {
 1400|      0|                                self.output.push(c);
 1401|      0|                                continue;
 1402|       |                            } else {
 1403|      0|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1404|       |                            }
 1405|       |                        }
 1406|       |                    };
 1407|   196k|                }
 1408|       |            }
 1409|  7.90k|            if UNCHECKED {
 1410|       |                // We consider it's valid even if it's not finished
 1411|      0|                self.output_positions.authority_end = self.output.len();
 1412|      0|                self.parse_path_start(None)
 1413|       |            } else {
 1414|  7.90k|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1415|       |            }
 1416|       |        } else {
 1417|       |            // Other host
 1418|  16.8M|            loop {
 1419|  16.8M|                let c = self.input.next();
 1420|  16.8M|                match c {
 1421|       |                    Some(':') => {
 1422|   181k|                        self.output.push(':');
 1423|   181k|                        return self.parse_port();
 1424|       |                    }
 1425|       |                    None | Some('/') | Some('?') | Some('#') => {
 1426|   623k|                        self.output_positions.authority_end = self.output.len();
 1427|   623k|                        return self.parse_path_start(c);
 1428|       |                    }
 1429|  16.0M|                    Some(c) => self.read_url_codepoint_or_echar(c, is_iunreserved_or_sub_delims)?,
 1430|       |                }
 1431|       |            }
 1432|       |        }
 1433|   819k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCs1JxAZnM7jd_5oxrdf:
 1485|   794k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1486|  27.9M|        loop {
 1487|  27.9M|            let c = self.input.next();
 1488|  27.9M|            match c {
 1489|       |                None | Some('/') | Some('?') | Some('#') => {
 1490|  1.84M|                    if self.output.as_str().ends_with("/..") {
 1491|      0|                        self.remove_last_segment();
 1492|      0|                        self.remove_last_segment();
 1493|      0|                        self.output.push('/');
 1494|  1.84M|                    } else if self.output.as_str().ends_with("/.") {
 1495|      0|                        self.remove_last_segment();
 1496|      0|                        self.output.push('/');
 1497|  1.84M|                    } else if c == Some('/') {
 1498|  1.08M|                        self.output.push('/');
 1499|  1.08M|                    }
 1500|       |
 1501|  1.84M|                    if c == Some('?') {
 1502|   143k|                        self.output_positions.path_end = self.output.len();
 1503|   143k|                        self.output.push('?');
 1504|   143k|                        return self.parse_query();
 1505|  1.70M|                    } else if c == Some('#') {
 1506|   120k|                        self.output_positions.path_end = self.output.len();
 1507|   120k|                        self.output_positions.query_end = self.output.len();
 1508|   120k|                        self.output.push('#');
 1509|   120k|                        return self.parse_fragment();
 1510|  1.58M|                    } else if c.is_none() {
 1511|   494k|                        self.output_positions.path_end = self.output.len();
 1512|   494k|                        self.output_positions.query_end = self.output.len();
 1513|   494k|                        return Ok(());
 1514|  1.08M|                    }
 1515|       |                }
 1516|  26.0M|                Some(c) => self.read_url_codepoint_or_echar(c, |c| {
 1517|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1518|  26.0M|                })?,
 1519|       |            }
 1520|       |        }
 1521|   794k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCs1JxAZnM7jd_5oxrdf:
 1435|   181k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1436|   249k|        loop {
 1437|   249k|            let c = self.input.next();
 1438|   249k|            match c {
 1439|       |                Some('/') | Some('?') | Some('#') | None => {
 1440|   176k|                    self.output_positions.authority_end = self.output.len();
 1441|   176k|                    return self.parse_path_start(c);
 1442|       |                }
 1443|  72.8k|                Some(c) => {
 1444|  72.8k|                    if UNCHECKED || c.is_ascii_digit() {
 1445|  68.0k|                        self.output.push(c)
 1446|       |                    } else {
 1447|  4.75k|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1448|       |                    }
 1449|       |                }
 1450|       |            }
 1451|       |        }
 1452|   181k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCs1JxAZnM7jd_5oxrdf:
 1571|  39.8k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1572|  39.8k|        let c1 = self.input.next();
 1573|  39.8k|        let c2 = self.input.next();
 1574|  39.8k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1575|  21.7k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1576|       |        {
 1577|  13.0k|            self.output.push('%');
 1578|  13.0k|            self.output.push(c1.unwrap());
 1579|  13.0k|            self.output.push(c2.unwrap());
 1580|  13.0k|            Ok(())
 1581|       |        } else {
 1582|  26.7k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1583|  26.7k|                Some('%'),
 1584|  26.7k|                c1,
 1585|  26.7k|                c2,
 1586|  26.7k|            ]))
 1587|       |        }
 1588|  39.8k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCs1JxAZnM7jd_5oxrdf:
 1523|   199k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1524|   113M|        while let Some(c) = self.input.next() {
 1525|   113M|            if c == '#' {
 1526|  24.8k|                self.output_positions.query_end = self.output.len();
 1527|  24.8k|                self.output.push('#');
 1528|  24.8k|                return self.parse_fragment();
 1529|       |            } else {
 1530|   113M|                self.read_url_codepoint_or_echar(c, |c| {
 1531|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?' | '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1532|   113M|                })?
 1533|       |            }
 1534|       |        }
 1535|   165k|        self.output_positions.query_end = self.output.len();
 1536|   165k|        Ok(())
 1537|   199k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCs1JxAZnM7jd_5oxrdf:
 1213|  1.12M|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|  8.56M|        loop {
 1215|  8.56M|            let c = self.input.next();
 1216|  8.56M|            match c {
 1217|  8.56M|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|  7.44M|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|  1.09M|                    self.output.push(':');
 1222|  1.09M|                    self.output_positions.scheme_end = self.output.len();
 1223|  1.09M|                    self.input_scheme_end = self.input.position;
 1224|  1.09M|                    return if self.input.starts_with('/') {
 1225|   958k|                        self.input.next();
 1226|   958k|                        self.output.push('/');
 1227|   958k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|   135k|                        self.output_positions.authority_end = self.output.len();
 1230|   135k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|  34.4k|                    self.input = ParserInput {
 1235|  34.4k|                        value: self.iri.chars(),
 1236|  34.4k|                        position: 0,
 1237|  34.4k|                    }; // reset
 1238|  34.4k|                    self.output.clear();
 1239|  34.4k|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|  1.12M|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCs1JxAZnM7jd_5oxrdf:
 1539|   151k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1540|  25.1M|        while let Some(c) = self.input.next() {
 1541|  25.0M|            self.read_url_codepoint_or_echar(c, |c| {
 1542|       |                is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?')
 1543|  25.0M|            })?;
 1544|       |        }
 1545|   138k|        Ok(())
 1546|   151k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_relativeCs1JxAZnM7jd_5oxrdf:
 1256|  68.4k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1257|  68.4k|        if let Some(base) = self.base {
 1258|      0|            match self.input.front() {
 1259|       |                None => {
 1260|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1261|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1262|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1263|      0|                    self.output_positions.path_end = base.positions.path_end;
 1264|      0|                    self.output_positions.query_end = base.positions.query_end;
 1265|      0|                    Ok(())
 1266|       |                }
 1267|       |                Some('/') => {
 1268|      0|                    self.input.next();
 1269|      0|                    self.parse_relative_slash(&base)
 1270|       |                }
 1271|       |                Some('?') => {
 1272|      0|                    self.input.next();
 1273|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1274|      0|                    self.output.push('?');
 1275|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1276|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1277|      0|                    self.output_positions.path_end = base.positions.path_end;
 1278|      0|                    self.parse_query()
 1279|       |                }
 1280|       |                Some('#') => {
 1281|      0|                    self.input.next();
 1282|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1283|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1284|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1285|      0|                    self.output_positions.path_end = base.positions.path_end;
 1286|      0|                    self.output_positions.query_end = base.positions.query_end;
 1287|      0|                    self.output.push('#');
 1288|      0|                    self.parse_fragment()
 1289|       |                }
 1290|       |                _ => {
 1291|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1292|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1293|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1294|      0|                    self.output_positions.path_end = base.positions.path_end;
 1295|      0|                    self.remove_last_segment();
 1296|      0|                    if self.output.len() > base.positions.scheme_end {
 1297|      0|                        // We have some path or authority, we keep a base '/'
 1298|      0|                        self.output.push('/');
 1299|      0|                    }
 1300|      0|                    self.parse_relative_path()
 1301|       |                }
 1302|       |            }
 1303|       |        } else {
 1304|  68.4k|            self.output_positions.scheme_end = 0;
 1305|  68.4k|            self.input_scheme_end = 0;
 1306|  68.4k|            if self.input.starts_with('/') {
 1307|  9.41k|                self.input.next();
 1308|  9.41k|                self.output.push('/');
 1309|  9.41k|                self.parse_path_or_authority()
 1310|       |            } else {
 1311|  59.0k|                self.output_positions.authority_end = 0;
 1312|  59.0k|                self.parse_relative_path()
 1313|       |            }
 1314|       |        }
 1315|  68.4k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCs1JxAZnM7jd_5oxrdf:
 1346|   837k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1347|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1348|  17.8M|        loop {
 1349|  17.8M|            let c = self.input.next();
 1350|  17.8M|            match c {
 1351|       |                Some('@') => {
 1352|  56.4k|                    self.output.push('@');
 1353|  56.4k|                    return self.parse_host();
 1354|       |                }
 1355|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1356|   763k|                    self.input = ParserInput {
 1357|   763k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1358|   763k|                        position: self.input_scheme_end + 2,
 1359|   763k|                    };
 1360|   763k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1361|   763k|                    return self.parse_host();
 1362|       |                }
 1363|  16.9M|                Some(c) => {
 1364|  16.9M|                    self.read_url_codepoint_or_echar(c, |c| {
 1365|       |                        is_iunreserved_or_sub_delims(c) || c == ':'
 1366|  16.9M|                    })?;
 1367|       |                }
 1368|       |            }
 1369|       |        }
 1370|   837k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCs1JxAZnM7jd_5oxrdf:
 1454|   799k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1455|   799k|        match c {
 1456|       |            None => {
 1457|   239k|                self.output_positions.path_end = self.output.len();
 1458|   239k|                self.output_positions.query_end = self.output.len();
 1459|   239k|                Ok(())
 1460|       |            }
 1461|       |            Some('?') => {
 1462|  55.5k|                self.output_positions.path_end = self.output.len();
 1463|  55.5k|                self.output.push('?');
 1464|  55.5k|                self.parse_query()
 1465|       |            }
 1466|       |            Some('#') => {
 1467|  6.19k|                self.output_positions.path_end = self.output.len();
 1468|  6.19k|                self.output_positions.query_end = self.output.len();
 1469|  6.19k|                self.output.push('#');
 1470|  6.19k|                self.parse_fragment()
 1471|       |            }
 1472|       |            Some('/') => {
 1473|   498k|                self.output.push('/');
 1474|   498k|                self.parse_path()
 1475|       |            }
 1476|      0|            Some(c) => {
 1477|      0|                self.read_url_codepoint_or_echar(c, |c| {
 1478|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1479|      0|                })?;
 1480|      0|                self.parse_path()
 1481|       |            }
 1482|       |        }
 1483|   799k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCs1JxAZnM7jd_5oxrdf:
 1199|  1.16M|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|  1.16M|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|  2.04k|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|  2.04k|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|  1.16M|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|  33.9k|            _ => self.parse_relative(),
 1210|       |        }
 1211|  1.16M|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E19parse_relative_pathCs1JxAZnM7jd_5oxrdf:
 1317|  59.0k|    fn parse_relative_path(&mut self) -> Result<(), IriParseError> {
 1318|   322k|        while let Some(c) = self.input.front() {
 1319|   303k|            if matches!(c, '/' | '?' | '#') {
 1320|  11.7k|                break;
 1321|   291k|            }
 1322|   291k|            self.input.next();
 1323|   291k|            self.read_url_codepoint_or_echar(c, |c| is_iunreserved_or_sub_delims(c) || c == '@')?;
 1324|       |        }
 1325|  30.9k|        self.parse_path()
 1326|  59.0k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCs1JxAZnM7jd_5oxrdf:
 1245|   967k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|   967k|        if self.input.starts_with('/') {
 1247|   837k|            self.input.next();
 1248|   837k|            self.output.push('/');
 1249|   837k|            self.parse_authority()
 1250|       |        } else {
 1251|   129k|            self.output_positions.authority_end = self.output.len() - 1;
 1252|   129k|            self.parse_path()
 1253|       |        }
 1254|   967k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCs1JxAZnM7jd_5oxrdf:
 1174|  1.16M|    fn parse(
 1175|  1.16M|        iri: &'a str,
 1176|  1.16M|        base: Option<IriRef<&'a str>>,
 1177|  1.16M|        output: &'a mut O,
 1178|  1.16M|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|  1.16M|        let mut parser = Self {
 1180|  1.16M|            iri,
 1181|  1.16M|            base,
 1182|  1.16M|            input: ParserInput {
 1183|  1.16M|                value: iri.chars(),
 1184|  1.16M|                position: 0,
 1185|  1.16M|            },
 1186|  1.16M|            output,
 1187|  1.16M|            output_positions: IriElementsPositions {
 1188|  1.16M|                scheme_end: 0,
 1189|  1.16M|                authority_end: 0,
 1190|  1.16M|                path_end: 0,
 1191|  1.16M|                query_end: 0,
 1192|  1.16M|            },
 1193|  1.16M|            input_scheme_end: 0,
 1194|  1.16M|        };
 1195|  1.16M|        parser.parse_scheme_start()?;
 1196|  1.03M|        Ok(parser.output_positions)
 1197|  1.16M|    }
_RNvMsp_Cs8SDT0Q3242W_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE10into_innerCs1JxAZnM7jd_5oxrdf:
  665|  1.01M|    pub fn into_inner(self) -> T {
  666|  1.01M|        self.0.into_inner()
  667|  1.01M|    }
_RNvMsp_Cs8SDT0Q3242W_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE5parseCs1JxAZnM7jd_5oxrdf:
  556|  1.16M|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|  1.16M|        IriRef::parse(iri)?.try_into()
  558|  1.16M|    }
_RNvXsV_Cs8SDT0Q3242W_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringEINtNtCscdEvteftVc2_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCs1JxAZnM7jd_5oxrdf:
  968|  1.03M|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  969|  1.03M|        if iri.is_absolute() {
  970|  1.01M|            Ok(Self(iri))
  971|       |        } else {
  972|  23.1k|            Err(IriParseError {
  973|  23.1k|                kind: IriParseErrorKind::NoScheme,
  974|  23.1k|            })
  975|       |        }
  976|  1.03M|    }
_RNvMs10_Cs8SDT0Q3242W_5oxiriNtB6_11ParserInput11starts_withCs1JxAZnM7jd_5oxrdf:
 1156|  2.94M|    fn starts_with(&self, c: char) -> bool {
 1157|  2.94M|        self.value.as_str().starts_with(c)
 1158|  2.94M|    }
_RNvMs10_Cs8SDT0Q3242W_5oxiriNtB6_11ParserInput4nextCs1JxAZnM7jd_5oxrdf:
 1141|   212M|    fn next(&mut self) -> Option<char> {
 1142|   212M|        if let Some(head) = self.value.next() {
 1143|   211M|            self.position += head.len_utf8();
 1144|   211M|            Some(head)
 1145|       |        } else {
 1146|  1.29M|            None
 1147|       |        }
 1148|   212M|    }
_RNvMs10_Cs8SDT0Q3242W_5oxiriNtB6_11ParserInput5frontCs1JxAZnM7jd_5oxrdf:
 1151|  1.48M|    fn front(&self) -> Option<char> {
 1152|  1.48M|        self.value.clone().next()
 1153|  1.48M|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCs1JxAZnM7jd_5oxrdf:
 1092|  4.27M|    fn len(&self) -> usize {
 1093|  4.27M|        self.len
 1094|  4.27M|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCs1JxAZnM7jd_5oxrdf:
 1072|   210M|    fn push(&mut self, c: char) {
 1073|   210M|        self.len += c.len_utf8();
 1074|   210M|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer5clearCs1JxAZnM7jd_5oxrdf:
 1082|  34.4k|    fn clear(&mut self) {
 1083|  34.4k|        self.len = 0;
 1084|  34.4k|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCs1JxAZnM7jd_5oxrdf:
 1097|  3.68M|    fn as_str(&self) -> &str {
 1098|  3.68M|        ""
 1099|  3.68M|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCs1JxAZnM7jd_5oxrdf:
 1087|   763k|    fn truncate(&mut self, new_len: usize) {
 1088|   763k|        self.len = new_len;
 1089|   763k|    }
_RNvXsW_Cs8SDT0Q3242W_5oxiriNtB5_13IriParseErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
 1003|   148k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1004|   148k|        match &self.kind {
 1005|  25.2k|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
 1006|  7.90k|            IriParseErrorKind::InvalidHostCharacter(c) => {
 1007|  7.90k|                write!(f, "Invalid character '{c}' in host")
 1008|       |            }
 1009|  3.03k|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({e})"),
 1010|  4.75k|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{c}'"),
 1011|  80.9k|            IriParseErrorKind::InvalidIriCodePoint(c) => {
 1012|  80.9k|                write!(f, "Invalid IRI code point '{c}'")
 1013|       |            }
 1014|  26.7k|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
 1015|  26.7k|                f,
 1016|  26.7k|                "Invalid IRI percent encoding '{}'",
 1017|  26.7k|                cs.iter().flatten().cloned().collect::<String>()
 1018|  26.7k|            ),
 1019|       |        }
 1020|   148k|    }
_RNvCs8SDT0Q3242W_5oxiri28is_iunreserved_or_sub_delims:
 1634|   198M|fn is_iunreserved_or_sub_delims(c: char) -> bool {
 1635|   198M|    matches!(c,
 1636|  50.0M|        'a'..='z'
 1637|  39.4M|        | 'A'..='Z'
 1638|  57.2M|        | '0'..='9'
 1639|       |        | '!'
 1640|       |        | '$'
 1641|       |        | '&'
 1642|       |        | '\''
 1643|       |        | '('
 1644|       |        | ')'
 1645|       |        | '*'
 1646|       |        | '+'
 1647|       |        | ','
 1648|       |        | '-'
 1649|       |        | '.'
 1650|       |        | ';'
 1651|       |        | '='
 1652|       |        | '_'
 1653|       |        | '~'
 1654|  1.42M|        | '\u{A0}'..='\u{D7FF}'
 1655|   217k|        | '\u{F900}'..='\u{FDCF}'
 1656|   215k|        | '\u{FDF0}'..='\u{FFEF}'
 1657|  85.4k|        | '\u{10000}'..='\u{1FFFD}'
 1658|  68.4k|        | '\u{20000}'..='\u{2FFFD}'
 1659|  68.3k|        | '\u{30000}'..='\u{3FFFD}'
 1660|  68.3k|        | '\u{40000}'..='\u{4FFFD}'
 1661|  68.3k|        | '\u{50000}'..='\u{5FFFD}'
 1662|  34.9k|        | '\u{60000}'..='\u{6FFFD}'
 1663|  34.9k|        | '\u{70000}'..='\u{7FFFD}'
 1664|  34.9k|        | '\u{80000}'..='\u{8FFFD}'
 1665|  34.9k|        | '\u{90000}'..='\u{9FFFD}'
 1666|  34.9k|        | '\u{A0000}'..='\u{AFFFD}'
 1667|  1.14k|        | '\u{B0000}'..='\u{BFFFD}'
 1668|  1.14k|        | '\u{C0000}'..='\u{CFFFD}'
 1669|  1.14k|        | '\u{D0000}'..='\u{DFFFD}'
 1670|  1.14k|        | '\u{E1000}'..='\u{EFFFD}'
 1671|       |    )
 1672|   198M|}

_RNvMNtCscXEpi1jYvvk_10ppv_lite864softINtB2_2x2INtNtNtNtB4_6x86_644sse24avx212u32x4x2_avx2NtBP_4NoNIENtBN_2G0E3newCs9UY6Ucr4wbE_11rand_chacha:
   15|  6.19M|    pub fn new(xs: [W; 2]) -> Self {
   16|  6.19M|        x2(xs, PhantomData)
   17|  6.19M|    }
_RNvXsJ_NtCscXEpi1jYvvk_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCscdEvteftVc2_4core3ops3bit6BitXor6bitxorCs9UY6Ucr4wbE_11rand_chacha:
   24|  2.16M|            fn $fn(self, rhs: Self) -> Self::Output {
   25|  2.16M|                x2::new([self.0[0].$fn(rhs.0[0]), self.0[1].$fn(rhs.0[1])])
   26|  2.16M|            }
_RNvXsP_NtCscXEpi1jYvvk_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCscdEvteftVc2_4core3ops5arith9AddAssign10add_assignCs9UY6Ucr4wbE_11rand_chacha:
   34|  2.16M|            fn $fn_assign(&mut self, rhs: Self) {
   35|  2.16M|                (self.0[0]).$fn_assign(rhs.0[0]);
   36|  2.16M|                (self.0[1]).$fn_assign(rhs.0[1]);
   37|  2.16M|            }
_RNvXs_NtCscXEpi1jYvvk_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right16Cs9UY6Ucr4wbE_11rand_chacha:
   44|   542k|        fn $fn(self) -> Self {
   45|   542k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   46|   542k|        }
_RNvXs_NtCscXEpi1jYvvk_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right20Cs9UY6Ucr4wbE_11rand_chacha:
   44|   542k|        fn $fn(self) -> Self {
   45|   542k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   46|   542k|        }
_RNvXs_NtCscXEpi1jYvvk_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right24Cs9UY6Ucr4wbE_11rand_chacha:
   44|   542k|        fn $fn(self) -> Self {
   45|   542k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   46|   542k|        }
_RNvXs_NtCscXEpi1jYvvk_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right25Cs9UY6Ucr4wbE_11rand_chacha:
   44|   542k|        fn $fn(self) -> Self {
   45|   542k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   46|   542k|        }
_RNvXsg_NtCscXEpi1jYvvk_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words1230Cs9UY6Ucr4wbE_11rand_chacha:
  210|   542k|    fn shuffle_lane_words1230(self) -> Self {
  211|   542k|        Self::new([
  212|   542k|            self.0[0].shuffle_lane_words1230(),
  213|   542k|            self.0[1].shuffle_lane_words1230(),
  214|   542k|        ])
  215|   542k|    }
_RNvXsg_NtCscXEpi1jYvvk_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words2301Cs9UY6Ucr4wbE_11rand_chacha:
  203|   542k|    fn shuffle_lane_words2301(self) -> Self {
  204|   542k|        Self::new([
  205|   542k|            self.0[0].shuffle_lane_words2301(),
  206|   542k|            self.0[1].shuffle_lane_words2301(),
  207|   542k|        ])
  208|   542k|    }
_RNvXsg_NtCscXEpi1jYvvk_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words3012Cs9UY6Ucr4wbE_11rand_chacha:
  217|   542k|    fn shuffle_lane_words3012(self) -> Self {
  218|   542k|        Self::new([
  219|   542k|            self.0[0].shuffle_lane_words3012(),
  220|   542k|            self.0[1].shuffle_lane_words3012(),
  221|   542k|        ])
  222|   542k|    }

_RINvYINtNtCscXEpi1jYvvk_10ppv_lite866x86_6410SseMachineNtB6_5YesS3NtB6_5YesS4NtB6_4NoNIENtNtB8_5types7Machine7read_leINtNtB6_4sse210u32x4_sse2BR_B12_B1d_EECs9UY6Ucr4wbE_11rand_chacha:
  259|    354|    fn read_le<V>(self, input: &[u8]) -> V
  260|    354|    where
  261|    354|        V: StoreBytes,
  262|    354|    {
  263|    354|        unsafe { V::unsafe_read_le(input) }
  264|    354|    }
_RINvYINtNtCscXEpi1jYvvk_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine3vecINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EAmj4_ECs9UY6Ucr4wbE_11rand_chacha:
  251|  45.2k|    fn vec<V, A>(self, a: A) -> V
  252|  45.2k|    where
  253|  45.2k|        V: MultiLane<A>,
  254|  45.2k|    {
  255|  45.2k|        V::from_lanes(a)
  256|  45.2k|    }
_RINvYINtNtCscXEpi1jYvvk_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec128_storageINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EECs9UY6Ucr4wbE_11rand_chacha:
  246|   406k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|   406k|        unsafe { V::unpack(s) }
  248|   406k|    }
_RINvYINtNtCscXEpi1jYvvk_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec512_storageINtNtB8_4soft2x2INtNtNtB6_4sse24avx212u32x4x2_avx2BS_ENtB2b_2G0EECs9UY6Ucr4wbE_11rand_chacha:
  246|  45.2k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|  45.2k|        unsafe { V::unpack(s) }
  248|  45.2k|    }

_RNvXNtCscXEpi1jYvvk_10ppv_lite866x86_64INtB2_10SseMachineNtB2_5YesS3NtB2_5YesS4NtB2_4NoNIENtNtB4_5types7Machine8instanceCs9UY6Ucr4wbE_11rand_chacha:
   65|    177|    unsafe fn instance() -> Self {
   66|    177|        SseMachine(PhantomData)
   67|    177|    }
_RNvXs_NtCscXEpi1jYvvk_10ppv_lite866x86_64INtB4_11Avx2MachineNtB4_4NoNIENtNtB6_5types7Machine8instanceCs9UY6Ucr4wbE_11rand_chacha:
   93|  45.2k|    unsafe fn instance() -> Self {
   94|  45.2k|        Avx2Machine(PhantomData)
   95|  45.2k|    }
_RNvNtCs9UY6Ucr4wbE_11rand_chacha4guts11refill_wide:
  252|  45.2k|        $($pub$(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  253|  45.2k|            #[inline(always)]
  254|  45.2k|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  255|  45.2k|            use std::arch::x86_64::*;
  256|  45.2k|            #[target_feature(enable = "avx2")]
  257|  45.2k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  258|  45.2k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  259|  45.2k|                _mm256_zeroupper();
  260|  45.2k|                ret
  261|  45.2k|            }
  262|  45.2k|            #[target_feature(enable = "avx")]
  263|  45.2k|            #[target_feature(enable = "sse4.1")]
  264|  45.2k|            #[target_feature(enable = "ssse3")]
  265|  45.2k|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  266|  45.2k|                let ret = fn_impl($crate::x86_64::AVX::instance(), $($arg),*);
  267|  45.2k|                _mm256_zeroupper();
  268|  45.2k|                ret
  269|  45.2k|            }
  270|  45.2k|            #[target_feature(enable = "sse4.1")]
  271|  45.2k|            #[target_feature(enable = "ssse3")]
  272|  45.2k|            unsafe fn impl_sse41($($arg: $argty),*) -> $ret {
  273|  45.2k|                fn_impl($crate::x86_64::SSE41::instance(), $($arg),*)
  274|  45.2k|            }
  275|  45.2k|            #[target_feature(enable = "ssse3")]
  276|  45.2k|            unsafe fn impl_ssse3($($arg: $argty),*) -> $ret {
  277|  45.2k|                fn_impl($crate::x86_64::SSSE3::instance(), $($arg),*)
  278|  45.2k|            }
  279|  45.2k|            #[target_feature(enable = "sse2")]
  280|  45.2k|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  281|  45.2k|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  282|  45.2k|            }
  283|  45.2k|            unsafe {
  284|  45.2k|                if is_x86_feature_detected!("avx2") {
  285|  45.2k|                    impl_avx2($($arg),*)
  286|      0|                } else if is_x86_feature_detected!("avx") {
  287|      0|                    impl_avx($($arg),*)
  288|      0|                } else if is_x86_feature_detected!("sse4.1") {
  289|      0|                    impl_sse41($($arg),*)
  290|      0|                } else if is_x86_feature_detected!("ssse3") {
  291|      0|                    impl_ssse3($($arg),*)
  292|      0|                } else if is_x86_feature_detected!("sse2") {
  293|      0|                    impl_sse2($($arg),*)
  294|       |                } else {
  295|      0|                    unimplemented!()
  296|       |                }
  297|       |            }
  298|       |        }
_RNvNvNtCs9UY6Ucr4wbE_11rand_chacha4guts11refill_wide9impl_avx2:
  257|  45.2k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  258|  45.2k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  259|  45.2k|                _mm256_zeroupper();
  260|  45.2k|                ret
  261|  45.2k|            }
_RNvNtCs9UY6Ucr4wbE_11rand_chacha4guts11init_chacha:
  335|    177|        $($pub $(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  336|    177|            #[inline(always)]
  337|    177|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  338|    177|            use std::arch::x86_64::*;
  339|    177|            #[target_feature(enable = "avx")]
  340|    177|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  341|    177|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  342|    177|            }
  343|    177|            #[target_feature(enable = "sse2")]
  344|    177|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  345|    177|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  346|    177|            }
  347|    177|            unsafe {
  348|    177|                if is_x86_feature_detected!("avx") {
  349|    177|                    impl_avx($($arg),*)
  350|      0|                } else if is_x86_feature_detected!("sse2") {
  351|      0|                    impl_sse2($($arg),*)
  352|       |                } else {
  353|      0|                    unimplemented!()
  354|       |                }
  355|       |            }
  356|       |        }
_RNvNvNtCs9UY6Ucr4wbE_11rand_chacha4guts11init_chacha8impl_avx:
  340|    177|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  341|    177|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  342|    177|            }
_RNvXs2_NtCscXEpi1jYvvk_10ppv_lite866x86_64NtB5_14vec128_storageINtNtCscdEvteftVc2_4core7convert4FromAmj4_E4from:
  132|    177|    fn from(u32x4: [u32; 4]) -> Self {
  133|    177|        vec128_storage { u32x4 }
  134|    177|    }

_RNvMNtNtNtCscXEpi1jYvvk_10ppv_lite866x86_644sse24avx2INtB2_12u32x4x2_avx2NtB6_4NoNIE3newCs9UY6Ucr4wbE_11rand_chacha:
 1398|  16.7M|        fn new(x: __m256i) -> Self {
 1399|  16.7M|            Self { x, ni: PhantomData }
 1400|  16.7M|        }
_RNvMsZ_NtNtCscXEpi1jYvvk_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIE3newCs9UY6Ucr4wbE_11rand_chacha:
   66|  2.53M|            fn new(x: __m128i) -> Self {
   67|  2.53M|                $vec {
   68|  2.53M|                    x,
   69|  2.53M|                    s3: PhantomData,
   70|  2.53M|                    s4: PhantomData,
   71|  2.53M|                    ni: PhantomData,
   72|  2.53M|                }
   73|  2.53M|            }
_RNvXs0_NtNtNtCscXEpi1jYvvk_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types5StoreNtB9_14vec256_storageE6unpackCs9UY6Ucr4wbE_11rand_chacha:
 1406|  90.4k|        unsafe fn unpack(p: vec256_storage) -> Self {
 1407|  90.4k|            Self::new(p.avx)
 1408|  90.4k|        }
_RNvXs10_NtNtCscXEpi1jYvvk_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes14unsafe_read_leCs9UY6Ucr4wbE_11rand_chacha:
   81|    354|            unsafe fn unsafe_read_le(input: &[u8]) -> Self {
   82|    354|                assert_eq!(input.len(), 16);
   83|    354|                Self::new(_mm_loadu_si128(input.as_ptr() as *const _))
   84|    354|            }
_RNvXs10_NtNtCscXEpi1jYvvk_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes8write_leCs9UY6Ucr4wbE_11rand_chacha:
   91|   723k|            fn write_le(self, out: &mut [u8]) {
   92|   723k|                assert_eq!(out.len(), 16);
   93|   723k|                unsafe { _mm_storeu_si128(out.as_mut_ptr() as *mut _, self.x) }
   94|   723k|            }
_RNvXs20_NtNtCscXEpi1jYvvk_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtNtCscdEvteftVc2_4core3ops5arith3Add3addCs9UY6Ucr4wbE_11rand_chacha:
   19|   723k|            fn $fn(self, rhs: Self) -> Self::Output {
   20|   723k|                Self::new(unsafe { $impl_fn(self.x, rhs.x) })
   21|   723k|            }
_RNvXs2_NtNtNtCscXEpi1jYvvk_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E10from_lanesCs9UY6Ucr4wbE_11rand_chacha:
 1443|   361k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 2]) -> Self {
 1444|   361k|            Self::new(unsafe { _mm256_setr_m128i(x[0].x, x[1].x) })
 1445|   361k|        }
_RNvXs2_NtNtNtCscXEpi1jYvvk_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E8to_lanesCs9UY6Ucr4wbE_11rand_chacha:
 1434|   361k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 2] {
 1435|   361k|            unsafe {
 1436|   361k|                [
 1437|   361k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 0)),
 1438|   361k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 1)),
 1439|   361k|                ]
 1440|   361k|            }
 1441|   361k|        }
_RNvXs6_NtNtCscXEpi1jYvvk_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E10from_lanesCs9UY6Ucr4wbE_11rand_chacha:
  333|  45.2k|    fn from_lanes(xs: [u32; 4]) -> Self {
  334|  45.2k|        unsafe {
  335|  45.2k|            let mut x = _mm_cvtsi64_si128((xs[0] as u64 | ((xs[1] as u64) << 32)) as i64);
  336|  45.2k|            x = _mm_insert_epi64(x, (xs[2] as u64 | ((xs[3] as u64) << 32)) as i64, 1);
  337|  45.2k|            Self::new(x)
  338|  45.2k|        }
  339|  45.2k|    }
_RNvXs6_NtNtCscXEpi1jYvvk_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E8to_lanesCs9UY6Ucr4wbE_11rand_chacha:
  325|   180k|    fn to_lanes(self) -> [u32; 4] {
  326|   180k|        unsafe {
  327|   180k|            let x = _mm_cvtsi128_si64(self.x) as u64;
  328|   180k|            let y = _mm_extract_epi64(self.x, 1) as u64;
  329|   180k|            [x as u32, (x >> 32) as u32, y as u32, (y >> 32) as u32]
  330|   180k|        }
  331|   180k|    }
_RNvXs6_NtNtNtCscXEpi1jYvvk_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right16Cs9UY6Ucr4wbE_11rand_chacha:
 1474|  1.08M|            fn $name(self) -> Self {
 1475|  1.08M|                Self::new(unsafe {
 1476|  1.08M|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1477|  1.08M|                })
 1478|  1.08M|            }
_RNvXs6_NtNtNtCscXEpi1jYvvk_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right20Cs9UY6Ucr4wbE_11rand_chacha:
 1484|  1.08M|            fn $name(self) -> Self {
 1485|  1.08M|                Self::new(unsafe {
 1486|  1.08M|                    _mm256_or_si256(
 1487|  1.08M|                        _mm256_srli_epi32(self.x, $i as i32),
 1488|  1.08M|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1489|  1.08M|                    )
 1490|  1.08M|                })
 1491|  1.08M|            }
_RNvXs6_NtNtNtCscXEpi1jYvvk_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right24Cs9UY6Ucr4wbE_11rand_chacha:
 1474|  1.08M|            fn $name(self) -> Self {
 1475|  1.08M|                Self::new(unsafe {
 1476|  1.08M|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1477|  1.08M|                })
 1478|  1.08M|            }
_RNvXs6_NtNtNtCscXEpi1jYvvk_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right25Cs9UY6Ucr4wbE_11rand_chacha:
 1484|  1.08M|            fn $name(self) -> Self {
 1485|  1.08M|                Self::new(unsafe {
 1486|  1.08M|                    _mm256_or_si256(
 1487|  1.08M|                        _mm256_srli_epi32(self.x, $i as i32),
 1488|  1.08M|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1489|  1.08M|                    )
 1490|  1.08M|                })
 1491|  1.08M|            }
_RNvXsX_NtNtCscXEpi1jYvvk_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types5StoreNtB7_14vec128_storageE6unpackCs9UY6Ucr4wbE_11rand_chacha:
   54|   406k|            unsafe fn unpack(x: vec128_storage) -> Self {
   55|   406k|                Self::new(x.sse2)
   56|   406k|            }
_RNvXsc_NtNtNtCscXEpi1jYvvk_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words1230Cs9UY6Ucr4wbE_11rand_chacha:
 1586|  1.08M|        fn shuffle_lane_words1230(self) -> Self {
 1587|  1.08M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b1001_0011) })
 1588|  1.08M|        }
_RNvXsc_NtNtNtCscXEpi1jYvvk_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words2301Cs9UY6Ucr4wbE_11rand_chacha:
 1590|  1.08M|        fn shuffle_lane_words2301(self) -> Self {
 1591|  1.08M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0100_1110) })
 1592|  1.08M|        }
_RNvXsc_NtNtNtCscXEpi1jYvvk_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words3012Cs9UY6Ucr4wbE_11rand_chacha:
 1594|  1.08M|        fn shuffle_lane_words3012(self) -> Self {
 1595|  1.08M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0011_1001) })
 1596|  1.08M|        }
_RNvXse_NtNtNtCscXEpi1jYvvk_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types5StoreNtB9_14vec512_storageE6unpackCs9UY6Ucr4wbE_11rand_chacha:
 1606|  45.2k|        unsafe fn unpack(p: vec512_storage) -> Self {
 1607|  45.2k|            Self::new([
 1608|  45.2k|                u32x4x2_avx2::unpack(p.avx[0]),
 1609|  45.2k|                u32x4x2_avx2::unpack(p.avx[1]),
 1610|  45.2k|            ])
 1611|  45.2k|        }
_RNvXsf_NtNtNtCscXEpi1jYvvk_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E10from_lanesCs9UY6Ucr4wbE_11rand_chacha:
 1621|   180k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 4]) -> Self {
 1622|   180k|            let ab = u32x4x2_avx2::from_lanes([x[0], x[1]]);
 1623|   180k|            let cd = u32x4x2_avx2::from_lanes([x[2], x[3]]);
 1624|   180k|            Self::new([ab, cd])
 1625|   180k|        }
_RNvXsf_NtNtNtCscXEpi1jYvvk_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E8to_lanesCs9UY6Ucr4wbE_11rand_chacha:
 1615|   180k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 4] {
 1616|   180k|            let [a, b] = self.0[0].to_lanes();
 1617|   180k|            let [c, d] = self.0[1].to_lanes();
 1618|   180k|            [a, b, c, d]
 1619|   180k|        }
_RNvXsl_NtNtCscXEpi1jYvvk_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE6insertCs9UY6Ucr4wbE_11rand_chacha:
  525|   632k|    fn insert(self, v: u32, i: u32) -> Self {
  526|   632k|        Self::new(unsafe {
  527|   632k|            match i {
  528|   316k|                0 => _mm_insert_epi32(self.x, v as i32, 0),
  529|   316k|                1 => _mm_insert_epi32(self.x, v as i32, 1),
  530|      0|                2 => _mm_insert_epi32(self.x, v as i32, 2),
  531|      0|                3 => _mm_insert_epi32(self.x, v as i32, 3),
  532|      0|                _ => unreachable!(),
  533|       |            }
  534|       |        })
  535|   632k|    }
_RNvXsl_NtNtCscXEpi1jYvvk_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE7extractCs9UY6Ucr4wbE_11rand_chacha:
  521|   180k|    fn extract(self, i: u32) -> u32 {
  522|   180k|        self.to_lanes()[i as usize]
  523|   180k|    }
_RNvXst_NtNtNtCscXEpi1jYvvk_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCscdEvteftVc2_4core3ops5arith9AddAssign10add_assignCs9UY6Ucr4wbE_11rand_chacha:
 1531|  4.33M|                fn $assign_fn(&mut self, rhs: Self) {
 1532|  4.33M|                    *self = self.$bin_fn(rhs);
 1533|  4.33M|                }
_RNvXsu_NtNtNtCscXEpi1jYvvk_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCscdEvteftVc2_4core3ops3bit6BitXor6bitxorCs9UY6Ucr4wbE_11rand_chacha:
 1547|  4.33M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1548|  4.33M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1549|  4.33M|                }
_RNvXsy_NtNtNtCscXEpi1jYvvk_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCscdEvteftVc2_4core3ops5arith3Add3addCs9UY6Ucr4wbE_11rand_chacha:
 1547|  4.33M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1548|  4.33M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1549|  4.33M|                }
_RNvXsY_NtNtCscXEpi1jYvvk_10ppv_lite866x86_644sse2NtB7_14vec128_storageINtNtCscdEvteftVc2_4core7convert4FromINtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEE4fromCs9UY6Ucr4wbE_11rand_chacha:
   60|  45.5k|            fn from(x: $vec<S3, S4, NI>) -> Self {
   61|  45.5k|                vec128_storage { sse2: x.x }
   62|  45.5k|            }
_RNvXsj_NtNtNtCscXEpi1jYvvk_10ppv_lite866x86_644sse24avx2NtB9_14vec512_storageINtNtCscdEvteftVc2_4core7convert4FromINtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EE4fromCs9UY6Ucr4wbE_11rand_chacha:
 1687|  45.2k|        fn from(x: u32x4x4_avx2<NI>) -> Self {
 1688|  45.2k|            Self {
 1689|  45.2k|                avx: [
 1690|  45.2k|                    vec256_storage { avx: x.0[0].x },
 1691|  45.2k|                    vec256_storage { avx: x.0[1].x },
 1692|  45.2k|                ],
 1693|  45.2k|            }
 1694|  45.2k|        }

_RNvMNtCs4QWtT85WPeh_9quick_xml8encodingNtB2_7Decoder4utf8:
   45|  72.5k|    pub(crate) fn utf8() -> Self {
   46|  72.5k|        Decoder {
   47|  72.5k|            #[cfg(feature = "encoding")]
   48|  72.5k|            encoding: UTF_8,
   49|  72.5k|        }
   50|  72.5k|    }
_RNvMs_NtCs4QWtT85WPeh_9quick_xml8encodingNtB4_7Decoder6decode:
   82|  4.11M|    pub fn decode<'b>(&self, bytes: &'b [u8]) -> Result<Cow<'b, str>> {
   83|       |        #[cfg(not(feature = "encoding"))]
   84|  4.11M|        let decoded = Ok(Cow::Borrowed(std::str::from_utf8(bytes)?));
   85|       |
   86|       |        #[cfg(feature = "encoding")]
   87|       |        let decoded = decode(bytes, self.encoding);
   88|       |
   89|  3.50M|        decoded
   90|  4.11M|    }
_RNvMs_NtCs4QWtT85WPeh_9quick_xml8encodingNtB4_7Decoder10decode_cow:
  104|  2.09M|    pub(crate) fn decode_cow<'b>(&self, bytes: &Cow<'b, [u8]>) -> Result<Cow<'b, str>> {
  105|  2.09M|        match bytes {
  106|  2.09M|            Cow::Borrowed(bytes) => self.decode(bytes),
  107|       |            // Convert to owned, because otherwise Cow will be bound with wrong lifetime
  108|      0|            Cow::Owned(bytes) => Ok(self.decode(bytes)?.into_owned().into()),
  109|       |        }
  110|  2.09M|    }

_RNvXs8_NtCs4QWtT85WPeh_9quick_xml6errorsNtB5_5ErrorINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_6escape11EscapeErrorE4fromCs4sYt0urF4vM_8oxrdfxml:
  251|  73.4k|    fn from(error: EscapeError) -> Error {
  252|  73.4k|        Error::EscapeError(error)
  253|  73.4k|    }
_RNvXNtCs4QWtT85WPeh_9quick_xml6errorsNtB2_11SyntaxErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
   41|  19.3k|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
   42|  19.3k|        match self {
   43|     62|            Self::InvalidBangMarkup => f.write_str("unknown or missed symbol in markup"),
   44|       |            Self::UnclosedPIOrXmlDecl => {
   45|  1.81k|                f.write_str("processing instruction or xml declaration not closed: `?>` not found before end of input")
   46|       |            }
   47|       |            Self::UnclosedComment => {
   48|     55|                f.write_str("comment not closed: `-->` not found before end of input")
   49|       |            }
   50|       |            Self::UnclosedDoctype => {
   51|    137|                f.write_str("DOCTYPE not closed: `>` not found before end of input")
   52|       |            }
   53|       |            Self::UnclosedCData => {
   54|    523|                f.write_str("CDATA not closed: `]]>` not found before end of input")
   55|       |            }
   56|  16.7k|            Self::UnclosedTag => f.write_str("tag not closed: `>` not found before end of input"),
   57|       |        }
   58|  19.3k|    }
_RNvXs0_NtCs4QWtT85WPeh_9quick_xml6errorsNtB5_14IllFormedErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
  123|  16.1k|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
  124|      0|        match self {
  125|       |            Self::MissingDeclVersion(None) => {
  126|      0|                write!(f, "an XML declaration does not contain `version` attribute")
  127|       |            }
  128|      0|            Self::MissingDeclVersion(Some(attr)) => {
  129|      0|                write!(f, "an XML declaration must start with `version` attribute, but in starts with `{}`", attr)
  130|       |            }
  131|      0|            Self::MissingDoctypeName => write!(
  132|      0|                f,
  133|      0|                "`<!DOCTYPE>` declaration does not contain a name of a document type"
  134|      0|            ),
  135|      0|            Self::MissingEndTag(tag) => write!(
  136|      0|                f,
  137|      0|                "start tag not closed: `</{}>` not found before end of input",
  138|      0|                tag,
  139|      0|            ),
  140|  6.04k|            Self::UnmatchedEndTag(tag) => {
  141|  6.04k|                write!(f, "close tag `</{}>` does not match any open tag", tag)
  142|       |            }
  143|  10.1k|            Self::MismatchedEndTag { expected, found } => write!(
  144|  10.1k|                f,
  145|  10.1k|                "expected `</{}>`, but `</{}>` was found",
  146|  10.1k|                expected, found,
  147|  10.1k|            ),
  148|       |            Self::DoubleHyphenInComment => {
  149|      0|                write!(f, "forbidden string `--` was found in a comment")
  150|       |            }
  151|       |        }
  152|  16.1k|    }
_RNvXs6_NtCs4QWtT85WPeh_9quick_xml6errorsNtB5_5ErrorINtNtCscdEvteftVc2_4core7convert4FromNtNtNtBS_3str5error9Utf8ErrorE4fromB7_:
  235|   613k|    fn from(error: Utf8Error) -> Error {
  236|   613k|        Error::NonDecodable(Some(error))
  237|   613k|    }
_RNvXs8_NtCs4QWtT85WPeh_9quick_xml6errorsNtB5_5ErrorINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_6escape11EscapeErrorE4fromB7_:
  251|  68.5k|    fn from(error: EscapeError) -> Error {
  252|  68.5k|        Error::EscapeError(error)
  253|  68.5k|    }
_RNvXs9_NtCs4QWtT85WPeh_9quick_xml6errorsNtB5_5ErrorINtNtCscdEvteftVc2_4core7convert4FromNtNtNtB7_6events10attributes9AttrErrorE4fromB7_:
  258|  10.0k|    fn from(error: AttrError) -> Self {
  259|  10.0k|        Error::InvalidAttr(error)
  260|  10.0k|    }
_RNvXsa_NtCs4QWtT85WPeh_9quick_xml6errorsNtB5_5ErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
  267|   854k|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
  268|   605k|        match self {
  269|      0|            Error::Io(e) => write!(f, "I/O error: {}", e),
  270|  19.3k|            Error::Syntax(e) => write!(f, "syntax error: {}", e),
  271|  16.1k|            Error::IllFormed(e) => write!(f, "ill-formed document: {}", e),
  272|      0|            Error::NonDecodable(None) => write!(f, "Malformed input, decoding impossible"),
  273|   605k|            Error::NonDecodable(Some(e)) => write!(f, "Malformed UTF-8 input: {}", e),
  274|  66.4k|            Error::InvalidAttr(e) => write!(f, "error while parsing attribute: {}", e),
  275|   142k|            Error::EscapeError(e) => write!(f, "{}", e),
  276|      0|            Error::UnknownPrefix(prefix) => {
  277|      0|                f.write_str("Unknown namespace prefix '")?;
  278|      0|                write_byte_string(f, prefix)?;
  279|      0|                f.write_str("'")
  280|       |            }
  281|  4.36k|            Error::InvalidPrefixBind { prefix, namespace } => {
  282|  4.36k|                f.write_str("The namespace prefix '")?;
  283|  4.36k|                write_byte_string(f, prefix)?;
  284|  4.36k|                f.write_str("' cannot be bound to '")?;
  285|  4.36k|                write_byte_string(f, namespace)?;
  286|  4.36k|                f.write_str("'")
  287|       |            }
  288|       |        }
  289|   854k|    }

_RINvNtCs4QWtT85WPeh_9quick_xml6escape13unescape_withNCNvMs5_NtCs4sYt0urF4vM_8oxrdfxml6parserINtBW_12RdfXmlReaderRShE15resolve_ns_name0EBY_:
  249|  1.81M|pub fn unescape_with<'input, 'entity, F>(
  250|  1.81M|    raw: &'input str,
  251|  1.81M|    mut resolve_entity: F,
  252|  1.81M|) -> Result<Cow<'input, str>, EscapeError>
  253|  1.81M|where
  254|  1.81M|    // the lifetime of the output comes from a capture or is `'static`
  255|  1.81M|    F: FnMut(&str) -> Option<&'entity str>,
  256|  1.81M|{
  257|  1.81M|    let bytes = raw.as_bytes();
  258|  1.81M|    let mut unescaped = None;
  259|  1.81M|    let mut last_end = 0;
  260|  1.81M|    let mut iter = memchr2_iter(b'&', b';', bytes);
  261|  18.1M|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
  262|  16.4M|        match iter.next() {
  263|  16.4M|            Some(end) if bytes[end] == b';' => {
  264|  16.4M|                // append valid data
  265|  16.4M|                if unescaped.is_none() {
  266|   279k|                    unescaped = Some(String::with_capacity(raw.len()));
  267|  16.1M|                }
  268|  16.4M|                let unescaped = unescaped.as_mut().expect("initialized");
  269|  16.4M|                unescaped.push_str(&raw[last_end..start]);
  270|  16.4M|
  271|  16.4M|                // search for character correctness
  272|  16.4M|                let pat = &raw[start + 1..end];
  273|  16.4M|                if let Some(entity) = pat.strip_prefix('#') {
  274|   120k|                    let codepoint = parse_number(entity).map_err(EscapeError::InvalidCharRef)?;
  275|  86.7k|                    unescaped.push_str(codepoint.encode_utf8(&mut [0u8; 4]));
  276|  16.2M|                } else if let Some(value) = resolve_entity(pat) {
  277|  16.2M|                    unescaped.push_str(value);
  278|  16.2M|                } else {
  279|  32.1k|                    return Err(EscapeError::UnrecognizedEntity(
  280|  32.1k|                        start + 1..end,
  281|  32.1k|                        pat.to_string(),
  282|  32.1k|                    ));
  283|       |                }
  284|       |
  285|  16.3M|                last_end = end + 1;
  286|       |            }
  287|  7.70k|            _ => return Err(EscapeError::UnterminatedEntity(start..raw.len())),
  288|       |        }
  289|       |    }
  290|       |
  291|  1.74M|    if let Some(mut unescaped) = unescaped {
  292|   213k|        if let Some(raw) = raw.get(last_end..) {
  293|   213k|            unescaped.push_str(raw);
  294|   213k|        }
  295|   213k|        Ok(Cow::Owned(unescaped))
  296|       |    } else {
  297|  1.53M|        Ok(Cow::Borrowed(raw))
  298|       |    }
  299|  1.81M|}
_RINvNtCs4QWtT85WPeh_9quick_xml6escape13unescape_withNCNvMs5_NtCs4sYt0urF4vM_8oxrdfxml6parserINtBW_12RdfXmlReaderRShE16parse_text_event0EBY_:
  249|  1.17M|pub fn unescape_with<'input, 'entity, F>(
  250|  1.17M|    raw: &'input str,
  251|  1.17M|    mut resolve_entity: F,
  252|  1.17M|) -> Result<Cow<'input, str>, EscapeError>
  253|  1.17M|where
  254|  1.17M|    // the lifetime of the output comes from a capture or is `'static`
  255|  1.17M|    F: FnMut(&str) -> Option<&'entity str>,
  256|  1.17M|{
  257|  1.17M|    let bytes = raw.as_bytes();
  258|  1.17M|    let mut unescaped = None;
  259|  1.17M|    let mut last_end = 0;
  260|  1.17M|    let mut iter = memchr2_iter(b'&', b';', bytes);
  261|  1.27M|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
  262|   155k|        match iter.next() {
  263|   134k|            Some(end) if bytes[end] == b';' => {
  264|   130k|                // append valid data
  265|   130k|                if unescaped.is_none() {
  266|  58.8k|                    unescaped = Some(String::with_capacity(raw.len()));
  267|  71.3k|                }
  268|   130k|                let unescaped = unescaped.as_mut().expect("initialized");
  269|   130k|                unescaped.push_str(&raw[last_end..start]);
  270|   130k|
  271|   130k|                // search for character correctness
  272|   130k|                let pat = &raw[start + 1..end];
  273|   130k|                if let Some(entity) = pat.strip_prefix('#') {
  274|  11.5k|                    let codepoint = parse_number(entity).map_err(EscapeError::InvalidCharRef)?;
  275|  6.14k|                    unescaped.push_str(codepoint.encode_utf8(&mut [0u8; 4]));
  276|   118k|                } else if let Some(value) = resolve_entity(pat) {
  277|  89.6k|                    unescaped.push_str(value);
  278|  89.6k|                } else {
  279|  28.9k|                    return Err(EscapeError::UnrecognizedEntity(
  280|  28.9k|                        start + 1..end,
  281|  28.9k|                        pat.to_string(),
  282|  28.9k|                    ));
  283|       |                }
  284|       |
  285|  95.7k|                last_end = end + 1;
  286|       |            }
  287|  25.4k|            _ => return Err(EscapeError::UnterminatedEntity(start..raw.len())),
  288|       |        }
  289|       |    }
  290|       |
  291|  1.11M|    if let Some(mut unescaped) = unescaped {
  292|  24.0k|        if let Some(raw) = raw.get(last_end..) {
  293|  24.0k|            unescaped.push_str(raw);
  294|  24.0k|        }
  295|  24.0k|        Ok(Cow::Owned(unescaped))
  296|       |    } else {
  297|  1.09M|        Ok(Cow::Borrowed(raw))
  298|       |    }
  299|  1.17M|}
_RINvNtCs4QWtT85WPeh_9quick_xml6escape13unescape_withNCNvMs5_NtCs4sYt0urF4vM_8oxrdfxml6parserINtBW_12RdfXmlReaderRShE17convert_attribute0EBY_:
  249|   389k|pub fn unescape_with<'input, 'entity, F>(
  250|   389k|    raw: &'input str,
  251|   389k|    mut resolve_entity: F,
  252|   389k|) -> Result<Cow<'input, str>, EscapeError>
  253|   389k|where
  254|   389k|    // the lifetime of the output comes from a capture or is `'static`
  255|   389k|    F: FnMut(&str) -> Option<&'entity str>,
  256|   389k|{
  257|   389k|    let bytes = raw.as_bytes();
  258|   389k|    let mut unescaped = None;
  259|   389k|    let mut last_end = 0;
  260|   389k|    let mut iter = memchr2_iter(b'&', b';', bytes);
  261|   414k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
  262|  33.2k|        match iter.next() {
  263|  31.6k|            Some(end) if bytes[end] == b';' => {
  264|  31.1k|                // append valid data
  265|  31.1k|                if unescaped.is_none() {
  266|  17.3k|                    unescaped = Some(String::with_capacity(raw.len()));
  267|  17.3k|                }
  268|  31.1k|                let unescaped = unescaped.as_mut().expect("initialized");
  269|  31.1k|                unescaped.push_str(&raw[last_end..start]);
  270|  31.1k|
  271|  31.1k|                // search for character correctness
  272|  31.1k|                let pat = &raw[start + 1..end];
  273|  31.1k|                if let Some(entity) = pat.strip_prefix('#') {
  274|  15.1k|                    let codepoint = parse_number(entity).map_err(EscapeError::InvalidCharRef)?;
  275|  14.8k|                    unescaped.push_str(codepoint.encode_utf8(&mut [0u8; 4]));
  276|  15.9k|                } else if let Some(value) = resolve_entity(pat) {
  277|  9.58k|                    unescaped.push_str(value);
  278|  9.58k|                } else {
  279|  6.34k|                    return Err(EscapeError::UnrecognizedEntity(
  280|  6.34k|                        start + 1..end,
  281|  6.34k|                        pat.to_string(),
  282|  6.34k|                    ));
  283|       |                }
  284|       |
  285|  24.4k|                last_end = end + 1;
  286|       |            }
  287|  2.09k|            _ => return Err(EscapeError::UnterminatedEntity(start..raw.len())),
  288|       |        }
  289|       |    }
  290|       |
  291|   380k|    if let Some(mut unescaped) = unescaped {
  292|  9.53k|        if let Some(raw) = raw.get(last_end..) {
  293|  9.53k|            unescaped.push_str(raw);
  294|  9.53k|        }
  295|  9.53k|        Ok(Cow::Owned(unescaped))
  296|       |    } else {
  297|   371k|        Ok(Cow::Borrowed(raw))
  298|       |    }
  299|   389k|}
_RNCINvNtCs4QWtT85WPeh_9quick_xml6escape13unescape_withNCNvMs5_NtCs4sYt0urF4vM_8oxrdfxml6parserINtBY_12RdfXmlReaderRShE15resolve_ns_name0E0B10_:
  261|  16.8M|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
_RNCINvNtCs4QWtT85WPeh_9quick_xml6escape13unescape_withNCNvMs5_NtCs4sYt0urF4vM_8oxrdfxml6parserINtBY_12RdfXmlReaderRShE16parse_text_event0E0B10_:
  261|   269k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
_RNCINvNtCs4QWtT85WPeh_9quick_xml6escape13unescape_withNCNvMs5_NtCs4sYt0urF4vM_8oxrdfxml6parserINtBY_12RdfXmlReaderRShE17convert_attribute0E0B10_:
  261|  73.8k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
_RNvXNtCs4QWtT85WPeh_9quick_xml6escapeNtB2_17ParseCharRefErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
   24|  39.3k|    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
   25|  39.3k|        match self {
   26|  5.15k|            Self::UnexpectedSign => f.write_str("unexpected number sign"),
   27|  27.7k|            Self::InvalidNumber(e) => e.fmt(f),
   28|  1.63k|            Self::InvalidCodepoint(n) => write!(f, "`{}` is not a valid codepoint", n),
   29|  4.77k|            Self::IllegalCharacter(n) => write!(f, "0x{:x} character is not permitted in XML", n),
   30|       |        }
   31|  39.3k|    }
_RNvXs0_NtCs4QWtT85WPeh_9quick_xml6escapeNtB5_11EscapeErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
   56|   142k|    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
   57|   142k|        match self {
   58|  67.4k|            EscapeError::UnrecognizedEntity(rge, res) => {
   59|  67.4k|                write!(f, "at {:?}: unrecognized entity `{}`", rge, res)
   60|       |            }
   61|  35.2k|            EscapeError::UnterminatedEntity(e) => write!(
   62|  35.2k|                f,
   63|  35.2k|                "Error while escaping character at range {:?}: Cannot find ';' after '&'",
   64|  35.2k|                e
   65|  35.2k|            ),
   66|  39.3k|            EscapeError::InvalidCharRef(e) => {
   67|  39.3k|                write!(f, "invalid character reference: {}", e)
   68|       |            }
   69|       |        }
   70|   142k|    }
_RNvNtCs4QWtT85WPeh_9quick_xml6escape6escape:
  104|   769k|pub fn escape(raw: &str) -> Cow<str> {
  105|   769k|    _escape(raw, |ch| matches!(ch, b'<' | b'>' | b'&' | b'\'' | b'\"'))
  106|   769k|}
_RNCNvNtCs4QWtT85WPeh_9quick_xml6escape6escape0B5_:
  105|  68.9M|    _escape(raw, |ch| matches!(ch, b'<' | b'>' | b'&' | b'\'' | b'\"'))
_RINvNtCs4QWtT85WPeh_9quick_xml6escape7__escapeNCNvB2_6escape0EB4_:
  152|   769k|pub(crate) fn _escape<F: Fn(u8) -> bool>(raw: &str, escape_chars: F) -> Cow<str> {
  153|   769k|    let bytes = raw.as_bytes();
  154|   769k|    let mut escaped = None;
  155|   769k|    let mut iter = bytes.iter();
  156|   769k|    let mut pos = 0;
  157|  17.0M|    while let Some(i) = iter.position(|&b| escape_chars(b)) {
  158|  16.2M|        if escaped.is_none() {
  159|   152k|            escaped = Some(Vec::with_capacity(raw.len()));
  160|  16.1M|        }
  161|  16.2M|        let escaped = escaped.as_mut().expect("initialized");
  162|  16.2M|        let new_pos = pos + i;
  163|  16.2M|        escaped.extend_from_slice(&bytes[pos..new_pos]);
  164|  16.2M|        match bytes[new_pos] {
  165|  8.94k|            b'<' => escaped.extend_from_slice(b"&lt;"),
  166|  57.8k|            b'>' => escaped.extend_from_slice(b"&gt;"),
  167|  16.1M|            b'\'' => escaped.extend_from_slice(b"&apos;"),
  168|  23.5k|            b'&' => escaped.extend_from_slice(b"&amp;"),
  169|  21.2k|            b'"' => escaped.extend_from_slice(b"&quot;"),
  170|       |
  171|       |            // This set of escapes handles characters that should be escaped
  172|       |            // in elements of xs:lists, because those characters works as
  173|       |            // delimiters of list elements
  174|      0|            b'\t' => escaped.extend_from_slice(b"&#9;"),
  175|      0|            b'\n' => escaped.extend_from_slice(b"&#10;"),
  176|      0|            b'\r' => escaped.extend_from_slice(b"&#13;"),
  177|      0|            b' ' => escaped.extend_from_slice(b"&#32;"),
  178|      0|            _ => unreachable!(
  179|      0|                "Only '<', '>','\', '&', '\"', '\\t', '\\r', '\\n', and ' ' are escaped"
  180|      0|            ),
  181|       |        }
  182|  16.2M|        pos = new_pos + 1;
  183|       |    }
  184|       |
  185|   769k|    if let Some(mut escaped) = escaped {
  186|   152k|        if let Some(raw) = bytes.get(pos..) {
  187|   152k|            escaped.extend_from_slice(raw);
  188|   152k|        }
  189|       |        // SAFETY: we operate on UTF-8 input and search for an one byte chars only,
  190|       |        // so all slices that was put to the `escaped` is a valid UTF-8 encoded strings
  191|       |        // TODO: Can be replaced with `unsafe { String::from_utf8_unchecked() }`
  192|       |        // if unsafe code will be allowed
  193|   152k|        Cow::Owned(String::from_utf8(escaped).unwrap())
  194|       |    } else {
  195|   617k|        Cow::Borrowed(raw)
  196|       |    }
  197|   769k|}
_RNCINvNtCs4QWtT85WPeh_9quick_xml6escape7__escapeNCNvB4_6escape0E0B6_:
  157|  68.9M|    while let Some(i) = iter.position(|&b| escape_chars(b)) {
_RNvNtCs4QWtT85WPeh_9quick_xml6escape18resolve_xml_entity:
  337|  16.4M|pub const fn resolve_xml_entity(entity: &str) -> Option<&'static str> {
  338|       |    // match over strings are not allowed in const functions
  339|  16.4M|    let s = match entity.as_bytes() {
  340|  16.4M|        b"lt" => "<",
  341|  51.8k|        b"gt" => ">",
  342|  16.3M|        b"amp" => "&",
  343|  16.2M|        b"apos" => "'",
  344|  25.3k|        b"quot" => "\"",
  345|  67.4k|        _ => return None,
  346|       |    };
  347|  16.3M|    Some(s)
  348|  16.4M|}
_RNvNtCs4QWtT85WPeh_9quick_xml6escape12parse_number:
 1819|   147k|fn parse_number(num: &str) -> Result<char, ParseCharRefError> {
 1820|   147k|    let code = if let Some(hex) = num.strip_prefix('x') {
 1821|  17.2k|        from_str_radix(hex, 16)?
 1822|       |    } else {
 1823|   129k|        from_str_radix(num, 10)?
 1824|       |    };
 1825|   114k|    if code == 0 {
 1826|  4.77k|        return Err(ParseCharRefError::IllegalCharacter(code));
 1827|   109k|    }
 1828|   109k|    match std::char::from_u32(code) {
 1829|   107k|        Some(c) => Ok(c),
 1830|  1.63k|        None => Err(ParseCharRefError::InvalidCodepoint(code)),
 1831|       |    }
 1832|   147k|}
_RNvNtCs4QWtT85WPeh_9quick_xml6escape14from_str_radixB3_:
 1835|   147k|fn from_str_radix(src: &str, radix: u32) -> Result<u32, ParseCharRefError> {
 1836|   147k|    match src.as_bytes().first().copied() {
 1837|       |        // We should not allow sign numbers, but u32::from_str_radix will accept `+`.
 1838|       |        // We also handle `-` to be consistent in returned errors
 1839|  5.15k|        Some(b'+') | Some(b'-') => Err(ParseCharRefError::UnexpectedSign),
 1840|   141k|        _ => u32::from_str_radix(src, radix).map_err(ParseCharRefError::InvalidNumber),
 1841|       |    }
 1842|   147k|}

_RINvMNtNtCs4QWtT85WPeh_9quick_xml6events10attributesNtB3_9Attribute30decode_and_unescape_value_withNCNvMs5_NtCs4sYt0urF4vM_8oxrdfxml6parserINtB1H_12RdfXmlReaderRShE17convert_attribute0EB1J_:
   86|   396k|    pub fn decode_and_unescape_value_with<'entity>(
   87|   396k|        &self,
   88|   396k|        decoder: Decoder,
   89|   396k|        resolve_entity: impl FnMut(&str) -> Option<&'entity str>,
   90|   396k|    ) -> XmlResult<Cow<'a, str>> {
   91|   396k|        let decoded = decoder.decode_cow(&self.value)?;
   92|       |
   93|   389k|        match unescape_with(&decoded, resolve_entity)? {
   94|       |            // Because result is borrowed, no replacements was done and we can use original string
   95|   371k|            Cow::Borrowed(_) => Ok(decoded),
   96|  9.53k|            Cow::Owned(s) => Ok(s.into()),
   97|       |        }
   98|   396k|    }
_RNvXs4_NtNtCs4QWtT85WPeh_9quick_xml6events10attributesNtB5_10AttributesNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCs4sYt0urF4vM_8oxrdfxml:
  218|  2.17M|    fn next(&mut self) -> Option<Self::Item> {
  219|  2.17M|        match self.state.next(self.bytes) {
  220|  1.27M|            None => None,
  221|   841k|            Some(Ok(a)) => Some(Ok(a.map(|range| &self.bytes[range]).into())),
  222|  56.3k|            Some(Err(e)) => Some(Err(e)),
  223|       |        }
  224|  2.17M|    }
_RNvXs1_NtNtCs4QWtT85WPeh_9quick_xml6events10attributesNtB5_9AttributeINtNtCscdEvteftVc2_4core7convert4FromTReB1H_EE4from:
  145|   697k|    fn from(val: (&'a str, &'a str)) -> Attribute<'a> {
  146|   697k|        Attribute {
  147|   697k|            key: QName(val.0.as_bytes()),
  148|   697k|            value: match escape(val.1) {
  149|   563k|                Cow::Borrowed(s) => Cow::Borrowed(s.as_bytes()),
  150|   133k|                Cow::Owned(s) => Cow::Owned(s.into_bytes()),
  151|       |            },
  152|       |        }
  153|   697k|    }
_RNvXs2_NtNtCs4QWtT85WPeh_9quick_xml6events10attributesNtB5_9AttributeINtNtCscdEvteftVc2_4core7convert4FromINtB5_4AttrRShEE4fromB9_:
  158|  1.84M|    fn from(attr: Attr<&'a [u8]>) -> Self {
  159|  1.84M|        Self {
  160|  1.84M|            key: attr.key(),
  161|  1.84M|            value: Cow::Borrowed(attr.value()),
  162|  1.84M|        }
  163|  1.84M|    }
_RNvMs3_NtNtCs4QWtT85WPeh_9quick_xml6events10attributesNtB5_10Attributes4wrapB9_:
  185|  3.25M|    pub(crate) const fn wrap(buf: &'a [u8], pos: usize, html: bool) -> Self {
  186|  3.25M|        Self {
  187|  3.25M|            bytes: buf,
  188|  3.25M|            state: IterState::new(pos, html),
  189|  3.25M|        }
  190|  3.25M|    }
_RNvMs3_NtNtCs4QWtT85WPeh_9quick_xml6events10attributesNtB5_10Attributes11with_checks:
  208|  1.88M|    pub fn with_checks(&mut self, val: bool) -> &mut Attributes<'a> {
  209|  1.88M|        self.state.check_duplicates = val;
  210|  1.88M|        self
  211|  1.88M|    }
_RNvXs4_NtNtCs4QWtT85WPeh_9quick_xml6events10attributesNtB5_10AttributesNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextB9_:
  218|  2.80M|    fn next(&mut self) -> Option<Self::Item> {
  219|  2.80M|        match self.state.next(self.bytes) {
  220|  1.65M|            None => None,
  221|   999k|            Some(Ok(a)) => Some(Ok(a.map(|range| &self.bytes[range]).into())),
  222|   158k|            Some(Err(e)) => Some(Err(e)),
  223|       |        }
  224|  2.80M|    }
_RNCNvXs4_NtNtCs4QWtT85WPeh_9quick_xml6events10attributesNtB7_10AttributesNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0Bb_:
  221|  3.68M|            Some(Ok(a)) => Some(Ok(a.map(|range| &self.bytes[range]).into())),
_RNvXs6_NtNtCs4QWtT85WPeh_9quick_xml6events10attributesNtB5_9AttrErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
  321|  66.4k|    fn fmt(&self, f: &mut Formatter) -> fmt::Result {
  322|  66.4k|        match self {
  323|  56.7k|            Self::ExpectedEq(pos) => write!(
  324|  56.7k|                f,
  325|  56.7k|                r#"position {}: attribute key must be directly followed by `=` or space"#,
  326|  56.7k|                pos
  327|  56.7k|            ),
  328|  1.82k|            Self::ExpectedValue(pos) => write!(
  329|  1.82k|                f,
  330|  1.82k|                r#"position {}: `=` must be followed by an attribute value"#,
  331|  1.82k|                pos
  332|  1.82k|            ),
  333|  4.86k|            Self::UnquotedValue(pos) => write!(
  334|  4.86k|                f,
  335|  4.86k|                r#"position {}: attribute value must be enclosed in `"` or `'`"#,
  336|  4.86k|                pos
  337|  4.86k|            ),
  338|  2.29k|            Self::ExpectedQuote(pos, quote) => write!(
  339|  2.29k|                f,
  340|  2.29k|                r#"position {}: missing closing quote `{}` in attribute value"#,
  341|  2.29k|                pos, *quote as char
  342|  2.29k|            ),
  343|    699|            Self::Duplicated(pos1, pos2) => write!(
  344|    699|                f,
  345|    699|                r#"position {}: duplicated attribute, previous declaration at position {}"#,
  346|    699|                pos1, pos2
  347|    699|            ),
  348|       |        }
  349|  66.4k|    }
_RINvMs8_NtNtCs4QWtT85WPeh_9quick_xml6events10attributesINtB6_4AttrINtNtNtCscdEvteftVc2_4core3ops5range5RangejEE3mapRShNCNvXs4_B6_NtB6_10AttributesNtNtNtNtB19_4iter6traits8iterator8Iterator4next0EBa_:
  390|  1.84M|    pub fn map<U, F>(self, mut f: F) -> Attr<U>
  391|  1.84M|    where
  392|  1.84M|        F: FnMut(T) -> U,
  393|  1.84M|    {
  394|  1.84M|        match self {
  395|  1.83M|            Attr::DoubleQ(key, value) => Attr::DoubleQ(f(key), f(value)),
  396|  1.70k|            Attr::SingleQ(key, value) => Attr::SingleQ(f(key), f(value)),
  397|      0|            Attr::Empty(key) => Attr::Empty(f(key)),
  398|      0|            Attr::Unquoted(key, value) => Attr::Unquoted(f(key), f(value)),
  399|       |        }
  400|  1.84M|    }
_RNvMs9_NtNtCs4QWtT85WPeh_9quick_xml6events10attributesINtB5_4AttrRShE3keyB9_:
  406|  1.84M|    pub const fn key(&self) -> QName<'a> {
  407|  1.84M|        QName(match self {
  408|  1.83M|            Attr::DoubleQ(key, _) => key,
  409|  1.70k|            Attr::SingleQ(key, _) => key,
  410|      0|            Attr::Empty(key) => key,
  411|      0|            Attr::Unquoted(key, _) => key,
  412|       |        })
  413|  1.84M|    }
_RNvMs9_NtNtCs4QWtT85WPeh_9quick_xml6events10attributesINtB5_4AttrRShE5valueB9_:
  419|  1.84M|    pub const fn value(&self) -> &'a [u8] {
  420|  1.84M|        match self {
  421|  1.83M|            Attr::DoubleQ(_, value) => value,
  422|  1.70k|            Attr::SingleQ(_, value) => value,
  423|      0|            Attr::Empty(_) => &[],
  424|      0|            Attr::Unquoted(_, value) => value,
  425|       |        }
  426|  1.84M|    }
_RNvMsc_NtNtCs4QWtT85WPeh_9quick_xml6events10attributesNtB5_9IterState3new:
  508|  3.25M|    pub const fn new(offset: usize, html: bool) -> Self {
  509|  3.25M|        Self {
  510|  3.25M|            state: State::Next(offset),
  511|  3.25M|            html,
  512|  3.25M|            check_duplicates: true,
  513|  3.25M|            keys: Vec::new(),
  514|  3.25M|        }
  515|  3.25M|    }
_RNvMsc_NtNtCs4QWtT85WPeh_9quick_xml6events10attributesNtB5_9IterState7recover:
  520|  4.98M|    fn recover(&self, slice: &[u8]) -> Option<usize> {
  521|  4.98M|        match self.state {
  522|      0|            State::Done => None,
  523|  4.98M|            State::Next(offset) => Some(offset),
  524|      0|            State::SkipValue(offset) => self.skip_value(slice, offset),
  525|      0|            State::SkipEqValue(offset) => self.skip_eq_value(slice, offset),
  526|       |        }
  527|  4.98M|    }
_RNvMsc_NtNtCs4QWtT85WPeh_9quick_xml6events10attributesNtB5_9IterState20check_for_duplicatesB9_:
  590|  1.86M|    fn check_for_duplicates(
  591|  1.86M|        &mut self,
  592|  1.86M|        slice: &[u8],
  593|  1.86M|        key: Range<usize>,
  594|  1.86M|    ) -> Result<Range<usize>, AttrError> {
  595|  1.86M|        if self.check_duplicates {
  596|   848k|            if let Some(prev) = self
  597|   848k|                .keys
  598|   848k|                .iter()
  599|   848k|                .find(|r| slice[(*r).clone()] == slice[key.clone()])
  600|       |            {
  601|    699|                return Err(AttrError::Duplicated(key.start, prev.start));
  602|   847k|            }
  603|   847k|            self.keys.push(key.clone());
  604|  1.01M|        }
  605|  1.86M|        Ok(key)
  606|  1.86M|    }
_RNCNvMsc_NtNtCs4QWtT85WPeh_9quick_xml6events10attributesNtB7_9IterState20check_for_duplicates0Bb_:
  599|   335k|                .find(|r| slice[(*r).clone()] == slice[key.clone()])
_RNvMsc_NtNtCs4QWtT85WPeh_9quick_xml6events10attributesNtB5_9IterState8key_onlyB9_:
  614|   193k|    fn key_only(&mut self, slice: &[u8], key: Range<usize>, offset: usize) -> Option<AttrResult> {
  615|   193k|        Some(if self.html {
  616|      0|            self.check_for_duplicates(slice, key).map(Attr::Empty)
  617|       |        } else {
  618|   193k|            Err(AttrError::ExpectedEq(offset))
  619|       |        })
  620|   193k|    }
_RNvMsc_NtNtCs4QWtT85WPeh_9quick_xml6events10attributesNtB5_9IterState8double_qB9_:
  623|  1.83M|    fn double_q(&mut self, key: Range<usize>, value: Range<usize>) -> Option<AttrResult> {
  624|  1.83M|        self.state = State::Next(value.end + 1); // +1 for `"`
  625|  1.83M|
  626|  1.83M|        Some(Ok(Attr::DoubleQ(key, value)))
  627|  1.83M|    }
_RNvMsc_NtNtCs4QWtT85WPeh_9quick_xml6events10attributesNtB5_9IterState8single_qB9_:
  630|  1.70k|    fn single_q(&mut self, key: Range<usize>, value: Range<usize>) -> Option<AttrResult> {
  631|  1.70k|        self.state = State::Next(value.end + 1); // +1 for `'`
  632|  1.70k|
  633|  1.70k|        Some(Ok(Attr::SingleQ(key, value)))
  634|  1.70k|    }
_RNvMsc_NtNtCs4QWtT85WPeh_9quick_xml6events10attributesNtB5_9IterState4next:
  636|  4.98M|    pub fn next(&mut self, slice: &[u8]) -> Option<AttrResult> {
  637|  4.98M|        let mut iter = match self.recover(slice) {
  638|  4.98M|            Some(offset) => (offset..).zip(slice[offset..].iter()),
  639|      0|            None => return None,
  640|       |        };
  641|       |
  642|       |        // Index where next key started
  643|  4.98M|        let start_key = match iter.find(|(_, &b)| !is_whitespace(b)) {
  644|       |            // Input: `    key`
  645|       |            //             ^
  646|  2.05M|            Some((s, _)) => s,
  647|       |            // Input: `    `
  648|       |            //             ^
  649|       |            None => {
  650|       |                // Because we reach end-of-input, stop iteration on next call
  651|  2.92M|                self.state = State::Done;
  652|  2.92M|                return None;
  653|       |            }
  654|       |        };
  655|       |        // Span of a key
  656|  2.05M|        let (key, offset) = match iter.find(|(_, &b)| b == b'=' || is_whitespace(b)) {
  657|       |            // Input: `    key=`
  658|       |            //             |  ^
  659|       |            //             s  e
  660|  1.54M|            Some((e, b'=')) => (start_key..e, e),
  661|       |
  662|       |            // Input: `    key `
  663|       |            //                ^
  664|   377k|            Some((e, _)) => match iter.find(|(_, &b)| !is_whitespace(b)) {
  665|       |                // Input: `    key  =`
  666|       |                //             |  | ^
  667|       |                //     start_key  e
  668|   322k|                Some((offset, b'=')) => (start_key..e, offset),
  669|       |                // Input: `    key  x`
  670|       |                //             |  | ^
  671|       |                //     start_key  e
  672|       |                // If HTML-like attributes is allowed, this is the result, otherwise error
  673|  49.5k|                Some((offset, _)) => {
  674|  49.5k|                    // In any case, recovering is not required
  675|  49.5k|                    self.state = State::Next(offset);
  676|  49.5k|                    return self.key_only(slice, start_key..e, offset);
  677|       |                }
  678|       |                // Input: `    key  `
  679|       |                //             |  | ^
  680|       |                //     start_key  e
  681|       |                // If HTML-like attributes is allowed, this is the result, otherwise error
  682|       |                None => {
  683|       |                    // Because we reach end-of-input, stop iteration on next call
  684|  5.97k|                    self.state = State::Done;
  685|  5.97k|                    return self.key_only(slice, start_key..e, slice.len());
  686|       |                }
  687|       |            },
  688|       |
  689|       |            // Input: `    key`
  690|       |            //             |  ^
  691|       |            //             s  e = len()
  692|       |            // If HTML-like attributes is allowed, this is the result, otherwise error
  693|       |            None => {
  694|       |                // Because we reach end-of-input, stop iteration on next call
  695|   137k|                self.state = State::Done;
  696|   137k|                let e = slice.len();
  697|   137k|                return self.key_only(slice, start_key..e, e);
  698|       |            }
  699|       |        };
  700|       |
  701|  1.86M|        let key = match self.check_for_duplicates(slice, key) {
  702|    699|            Err(e) => {
  703|    699|                self.state = State::SkipEqValue(offset);
  704|    699|                return Some(Err(e));
  705|       |            }
  706|  1.86M|            Ok(key) => key,
  707|       |        };
  708|       |
  709|       |        ////////////////////////////////////////////////////////////////////////
  710|       |
  711|       |        // Gets the position of quote and quote type
  712|  1.86M|        let (start_value, quote) = match iter.find(|(_, &b)| !is_whitespace(b)) {
  713|       |            // Input: `    key  =  "`
  714|       |            //                     ^
  715|  1.84M|            Some((s, b'"')) => (s + 1, b'"'),
  716|       |            // Input: `    key  =  '`
  717|       |            //                     ^
  718|  1.70k|            Some((s, b'\'')) => (s + 1, b'\''),
  719|       |
  720|       |            // Input: `    key  =  x`
  721|       |            //                     ^
  722|       |            // If HTML-like attributes is allowed, this is the start of the value
  723|      0|            Some((s, _)) if self.html => {
  724|       |                // We do not check validity of attribute value characters as required
  725|       |                // according to https://html.spec.whatwg.org/#unquoted. It can be done
  726|       |                // during validation phase
  727|      0|                let end = match iter.find(|(_, &b)| is_whitespace(b)) {
  728|       |                    // Input: `    key  =  value `
  729|       |                    //                     |    ^
  730|       |                    //                     s    e
  731|      0|                    Some((e, _)) => e,
  732|       |                    // Input: `    key  =  value`
  733|       |                    //                     |    ^
  734|       |                    //                     s    e = len()
  735|      0|                    None => slice.len(),
  736|       |                };
  737|      0|                self.state = State::Next(end);
  738|      0|                return Some(Ok(Attr::Unquoted(key, s..end)));
  739|       |            }
  740|       |            // Input: `    key  =  x`
  741|       |            //                     ^
  742|  12.6k|            Some((s, _)) => {
  743|  12.6k|                self.state = State::SkipValue(s);
  744|  12.6k|                return Some(Err(AttrError::UnquotedValue(s)));
  745|       |            }
  746|       |
  747|       |            // Input: `    key  =  `
  748|       |            //                     ^
  749|       |            None => {
  750|       |                // Because we reach end-of-input, stop iteration on next call
  751|  3.94k|                self.state = State::Done;
  752|  3.94k|                return Some(Err(AttrError::ExpectedValue(slice.len())));
  753|       |            }
  754|       |        };
  755|       |
  756|  1.84M|        match iter.find(|(_, &b)| b == quote) {
  757|       |            // Input: `    key  =  "   "`
  758|       |            //                         ^
  759|  1.83M|            Some((e, b'"')) => self.double_q(key, start_value..e),
  760|       |            // Input: `    key  =  '   '`
  761|       |            //                         ^
  762|  1.70k|            Some((e, _)) => self.single_q(key, start_value..e),
  763|       |
  764|       |            // Input: `    key  =  "   `
  765|       |            // Input: `    key  =  '   `
  766|       |            //                         ^
  767|       |            // Closing quote not found
  768|       |            None => {
  769|       |                // Because we reach end-of-input, stop iteration on next call
  770|  4.59k|                self.state = State::Done;
  771|  4.59k|                Some(Err(AttrError::ExpectedQuote(slice.len(), quote)))
  772|       |            }
  773|       |        }
  774|  4.98M|    }
_RNCNvMsc_NtNtCs4QWtT85WPeh_9quick_xml6events10attributesNtB7_9IterState4next0Bb_:
  643|  4.53M|        let start_key = match iter.find(|(_, &b)| !is_whitespace(b)) {
_RNCNvMsc_NtNtCs4QWtT85WPeh_9quick_xml6events10attributesNtB7_9IterState4nexts_0Bb_:
  656|  14.7M|        let (key, offset) = match iter.find(|(_, &b)| b == b'=' || is_whitespace(b)) {
_RNCNvMsc_NtNtCs4QWtT85WPeh_9quick_xml6events10attributesNtB7_9IterState4nexts0_0Bb_:
  664|   856k|            Some((e, _)) => match iter.find(|(_, &b)| !is_whitespace(b)) {
_RNCNvMsc_NtNtCs4QWtT85WPeh_9quick_xml6events10attributesNtB7_9IterState4nexts1_0Bb_:
  712|  1.90M|        let (start_value, quote) = match iter.find(|(_, &b)| !is_whitespace(b)) {
_RNCNvMsc_NtNtCs4QWtT85WPeh_9quick_xml6events10attributesNtB7_9IterState4nexts3_0Bb_:
  756|   308M|        match iter.find(|(_, &b)| b == quote) {

_RINvMNtCs4QWtT85WPeh_9quick_xml6eventsNtB3_10BytesStart3newINtNtCs3OstG5Tqy1X_5alloc6borrow3CoweEECs2kjnqOcnWhU_7rdf_xml:
  115|   356k|    pub fn new<C: Into<Cow<'a, str>>>(name: C) -> Self {
  116|   356k|        let buf = str_cow_to_bytes(name);
  117|   356k|        BytesStart {
  118|   356k|            name_len: buf.len(),
  119|   356k|            buf,
  120|   356k|        }
  121|   356k|    }
_RNvMs7_NtCs4QWtT85WPeh_9quick_xml6eventsNtB5_9BytesText3newCs2kjnqOcnWhU_7rdf_xml:
  553|  52.3k|    pub fn new(content: &'a str) -> Self {
  554|  52.3k|        Self::from_escaped(escape(content))
  555|  52.3k|    }
_RINvMNtCs4QWtT85WPeh_9quick_xml6eventsNtB3_10BytesStart3newNtNtCs3OstG5Tqy1X_5alloc6string6StringECs4sYt0urF4vM_8oxrdfxml:
  115|  47.8k|    pub fn new<C: Into<Cow<'a, str>>>(name: C) -> Self {
  116|  47.8k|        let buf = str_cow_to_bytes(name);
  117|  47.8k|        BytesStart {
  118|  47.8k|            name_len: buf.len(),
  119|  47.8k|            buf,
  120|  47.8k|        }
  121|  47.8k|    }
_RINvMNtCs4QWtT85WPeh_9quick_xml6eventsNtB3_10BytesStart3newReECs4sYt0urF4vM_8oxrdfxml:
  115|  53.3k|    pub fn new<C: Into<Cow<'a, str>>>(name: C) -> Self {
  116|  53.3k|        let buf = str_cow_to_bytes(name);
  117|  53.3k|        BytesStart {
  118|  53.3k|            name_len: buf.len(),
  119|  53.3k|            buf,
  120|  53.3k|        }
  121|  53.3k|    }
_RINvMs3_NtCs4QWtT85WPeh_9quick_xml6eventsNtB6_8BytesEnd3newINtNtCs3OstG5Tqy1X_5alloc6borrow3CoweEECs4sYt0urF4vM_8oxrdfxml:
  423|  59.8k|    pub fn new<C: Into<Cow<'a, str>>>(name: C) -> Self {
  424|  59.8k|        Self::wrap(str_cow_to_bytes(name))
  425|  59.8k|    }
_RINvMs3_NtCs4QWtT85WPeh_9quick_xml6eventsNtB6_8BytesEnd3newNtNtCs3OstG5Tqy1X_5alloc6string6StringECs4sYt0urF4vM_8oxrdfxml:
  423|   291k|    pub fn new<C: Into<Cow<'a, str>>>(name: C) -> Self {
  424|   291k|        Self::wrap(str_cow_to_bytes(name))
  425|   291k|    }
_RINvMs3_NtCs4QWtT85WPeh_9quick_xml6eventsNtB6_8BytesEnd3newReECs4sYt0urF4vM_8oxrdfxml:
  423|  53.3k|    pub fn new<C: Into<Cow<'a, str>>>(name: C) -> Self {
  424|  53.3k|        Self::wrap(str_cow_to_bytes(name))
  425|  53.3k|    }
_RINvMs7_NtCs4QWtT85WPeh_9quick_xml6eventsNtB6_9BytesText12from_escapedINtNtCs3OstG5Tqy1X_5alloc6borrow3CoweEECs4sYt0urF4vM_8oxrdfxml:
  546|  72.5k|    pub fn from_escaped<C: Into<Cow<'a, str>>>(content: C) -> Self {
  547|  72.5k|        Self::wrap(str_cow_to_bytes(content), Decoder::utf8())
  548|  72.5k|    }
_RINvMs7_NtCs4QWtT85WPeh_9quick_xml6eventsNtB6_9BytesText13unescape_withNCNvMs5_NtCs4sYt0urF4vM_8oxrdfxml6parserINtB1f_12RdfXmlReaderRShE16parse_text_event0EB1h_:
  594|  1.69M|    pub fn unescape_with<'entity>(
  595|  1.69M|        &self,
  596|  1.69M|        resolve_entity: impl FnMut(&str) -> Option<&'entity str>,
  597|  1.69M|    ) -> Result<Cow<'a, str>> {
  598|  1.69M|        let decoded = self.decoder.decode_cow(&self.content)?;
  599|       |
  600|  1.17M|        match unescape_with(&decoded, resolve_entity)? {
  601|       |            // Because result is borrowed, no replacements was done and we can use original string
  602|  1.09M|            Cow::Borrowed(_) => Ok(decoded),
  603|  24.0k|            Cow::Owned(s) => Ok(s.into()),
  604|       |        }
  605|  1.69M|    }
_RINvMs_NtCs4QWtT85WPeh_9quick_xml6eventsNtB5_10BytesStart14push_attributeNtNtB5_10attributes9AttributeECs4sYt0urF4vM_8oxrdfxml:
  265|  11.4k|    pub fn push_attribute<'b, A>(&mut self, attr: A)
  266|  11.4k|    where
  267|  11.4k|        A: Into<Attribute<'b>>,
  268|  11.4k|    {
  269|  11.4k|        self.buf.to_mut().push(b' ');
  270|  11.4k|        self.push_attr(attr.into());
  271|  11.4k|    }
_RINvMs_NtCs4QWtT85WPeh_9quick_xml6eventsNtB5_10BytesStart14push_attributeTReB1a_EECs4sYt0urF4vM_8oxrdfxml:
  265|   697k|    pub fn push_attribute<'b, A>(&mut self, attr: A)
  266|   697k|    where
  267|   697k|        A: Into<Attribute<'b>>,
  268|   697k|    {
  269|   697k|        self.buf.to_mut().push(b' ');
  270|   697k|        self.push_attr(attr.into());
  271|   697k|    }
_RINvNtCs4QWtT85WPeh_9quick_xml6events16str_cow_to_bytesINtNtCs3OstG5Tqy1X_5alloc6borrow3CoweEECs4sYt0urF4vM_8oxrdfxml:
 1386|   488k|fn str_cow_to_bytes<'a, C: Into<Cow<'a, str>>>(content: C) -> Cow<'a, [u8]> {
 1387|   488k|    match content.into() {
 1388|   443k|        Cow::Borrowed(s) => Cow::Borrowed(s.as_bytes()),
 1389|  44.6k|        Cow::Owned(s) => Cow::Owned(s.into_bytes()),
 1390|       |    }
 1391|   488k|}
_RINvNtCs4QWtT85WPeh_9quick_xml6events16str_cow_to_bytesReECs4sYt0urF4vM_8oxrdfxml:
 1386|   106k|fn str_cow_to_bytes<'a, C: Into<Cow<'a, str>>>(content: C) -> Cow<'a, [u8]> {
 1387|   106k|    match content.into() {
 1388|   106k|        Cow::Borrowed(s) => Cow::Borrowed(s.as_bytes()),
 1389|      0|        Cow::Owned(s) => Cow::Owned(s.into_bytes()),
 1390|       |    }
 1391|   106k|}
_RNvMNtCs4QWtT85WPeh_9quick_xml6eventsNtB2_10BytesStart4nameCs4sYt0urF4vM_8oxrdfxml:
  194|  1.79M|    pub fn name(&self) -> QName {
  195|  1.79M|        QName(&self.buf[..self.name_len])
  196|  1.79M|    }
_RNvMs3_NtCs4QWtT85WPeh_9quick_xml6eventsNtB5_8BytesEnd4nameCs4sYt0urF4vM_8oxrdfxml:
  444|  9.86k|    pub fn name(&self) -> QName {
  445|  9.86k|        QName(&self.name)
  446|  9.86k|    }
_RNvMs3_NtCs4QWtT85WPeh_9quick_xml6eventsNtB5_8BytesEnd4wrapCs4sYt0urF4vM_8oxrdfxml:
  413|   485k|    pub(crate) const fn wrap(name: Cow<'a, [u8]>) -> Self {
  414|   485k|        BytesEnd { name }
  415|   485k|    }
_RNvMs7_NtCs4QWtT85WPeh_9quick_xml6eventsNtB5_9BytesText3newCs4sYt0urF4vM_8oxrdfxml:
  553|  20.2k|    pub fn new(content: &'a str) -> Self {
  554|  20.2k|        Self::from_escaped(escape(content))
  555|  20.2k|    }
_RNvMNtCs4QWtT85WPeh_9quick_xml6eventsNtB2_10BytesStart4wrapB4_:
  102|  1.90M|    pub(crate) const fn wrap(content: &'a [u8], name_len: usize) -> Self {
  103|  1.90M|        BytesStart {
  104|  1.90M|            buf: Cow::Borrowed(content),
  105|  1.90M|            name_len,
  106|  1.90M|        }
  107|  1.90M|    }
_RINvMNtCs4QWtT85WPeh_9quick_xml6eventsNtB3_10BytesStart12from_contentNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
  131|  39.9k|    pub fn from_content<C: Into<Cow<'a, str>>>(content: C, name_len: usize) -> Self {
  132|  39.9k|        BytesStart {
  133|  39.9k|            buf: str_cow_to_bytes(content),
  134|  39.9k|            name_len,
  135|  39.9k|        }
  136|  39.9k|    }
_RNvMNtCs4QWtT85WPeh_9quick_xml6eventsNtB2_10BytesStart4nameB4_:
  194|  1.79M|    pub fn name(&self) -> QName {
  195|  1.79M|        QName(&self.buf[..self.name_len])
  196|  1.79M|    }
_RNvMs_NtCs4QWtT85WPeh_9quick_xml6eventsNtB4_10BytesStart10attributes:
  280|  3.25M|    pub fn attributes(&self) -> Attributes {
  281|  3.25M|        Attributes::wrap(&self.buf, self.name_len, false)
  282|  3.25M|    }
_RINvMs_NtCs4QWtT85WPeh_9quick_xml6eventsNtB5_10BytesStart17try_get_attributeReEB7_:
  297|  84.4k|    pub fn try_get_attribute<N: AsRef<[u8]> + Sized>(
  298|  84.4k|        &'a self,
  299|  84.4k|        attr_name: N,
  300|  84.4k|    ) -> Result<Option<Attribute<'a>>> {
  301|   124k|        for a in self.attributes().with_checks(false) {
  302|   124k|            let a = a?;
  303|   114k|            if a.key.as_ref() == attr_name.as_ref() {
  304|  69.0k|                return Ok(Some(a));
  305|  45.6k|            }
  306|       |        }
  307|  5.38k|        Ok(None)
  308|  84.4k|    }
_RNvMs_NtCs4QWtT85WPeh_9quick_xml6eventsNtB4_10BytesStart9push_attr:
  311|   708k|    pub(crate) fn push_attr<'b>(&mut self, attr: Attribute<'b>) {
  312|   708k|        let bytes = self.buf.to_mut();
  313|   708k|        bytes.extend_from_slice(attr.key.as_ref());
  314|   708k|        bytes.extend_from_slice(b"=\"");
  315|   708k|        // FIXME: need to escape attribute content
  316|   708k|        bytes.extend_from_slice(attr.value.as_ref());
  317|   708k|        bytes.push(b'"');
  318|   708k|    }
_RNvXs1_NtCs4QWtT85WPeh_9quick_xml6eventsNtB5_10BytesStartNtNtNtCscdEvteftVc2_4core3ops5deref5Deref5deref:
  342|   480k|    fn deref(&self) -> &[u8] {
  343|   480k|        &self.buf
  344|   480k|    }
_RNvMs3_NtCs4QWtT85WPeh_9quick_xml6eventsNtB5_8BytesEnd4wrapB7_:
  413|   452k|    pub(crate) const fn wrap(name: Cow<'a, [u8]>) -> Self {
  414|   452k|        BytesEnd { name }
  415|   452k|    }
_RNvXs5_NtCs4QWtT85WPeh_9quick_xml6eventsNtB5_8BytesEndNtNtNtCscdEvteftVc2_4core3ops5deref5Deref5deref:
  469|   404k|    fn deref(&self) -> &[u8] {
  470|   404k|        &self.name
  471|   404k|    }
_RINvMs7_NtCs4QWtT85WPeh_9quick_xml6eventsNtB6_9BytesText4wrapINtNtCs3OstG5Tqy1X_5alloc6borrow3CowShEEB8_:
  537|  72.5k|    pub(crate) fn wrap<C: Into<Cow<'a, [u8]>>>(content: C, decoder: Decoder) -> Self {
  538|  72.5k|        Self {
  539|  72.5k|            content: content.into(),
  540|  72.5k|            decoder,
  541|  72.5k|        }
  542|  72.5k|    }
_RINvMs7_NtCs4QWtT85WPeh_9quick_xml6eventsNtB6_9BytesText4wrapRShEB8_:
  537|  1.74M|    pub(crate) fn wrap<C: Into<Cow<'a, [u8]>>>(content: C, decoder: Decoder) -> Self {
  538|  1.74M|        Self {
  539|  1.74M|            content: content.into(),
  540|  1.74M|            decoder,
  541|  1.74M|        }
  542|  1.74M|    }
_RNvXs9_NtCs4QWtT85WPeh_9quick_xml6eventsNtB5_9BytesTextNtNtNtCscdEvteftVc2_4core3ops5deref5Deref5deref:
  638|  1.22M|    fn deref(&self) -> &[u8] {
  639|  1.22M|        &self.content
  640|  1.22M|    }
_RNvMsd_NtCs4QWtT85WPeh_9quick_xml6eventsNtB5_7BytesPI4wrapB7_:
  872|  19.7k|    pub(crate) const fn wrap(content: &'a [u8], target_len: usize) -> Self {
  873|  19.7k|        Self {
  874|  19.7k|            content: BytesStart::wrap(content, target_len),
  875|  19.7k|        }
  876|  19.7k|    }
_RNvMsg_NtCs4QWtT85WPeh_9quick_xml6eventsNtB5_9BytesDecl3new:
 1048|  39.9k|    pub fn new(
 1049|  39.9k|        version: &str,
 1050|  39.9k|        encoding: Option<&str>,
 1051|  39.9k|        standalone: Option<&str>,
 1052|  39.9k|    ) -> BytesDecl<'static> {
 1053|       |        // Compute length of the buffer based on supplied attributes
 1054|       |        // ' encoding=""'   => 12
 1055|  39.9k|        let encoding_attr_len = if let Some(xs) = encoding {
 1056|  39.9k|            12 + xs.len()
 1057|       |        } else {
 1058|      0|            0
 1059|       |        };
 1060|       |        // ' standalone=""' => 14
 1061|  39.9k|        let standalone_attr_len = if let Some(xs) = standalone {
 1062|      0|            14 + xs.len()
 1063|       |        } else {
 1064|  39.9k|            0
 1065|       |        };
 1066|       |        // 'xml version=""' => 14
 1067|  39.9k|        let mut buf = String::with_capacity(14 + encoding_attr_len + standalone_attr_len);
 1068|  39.9k|
 1069|  39.9k|        buf.push_str("xml version=\"");
 1070|  39.9k|        buf.push_str(version);
 1071|       |
 1072|  39.9k|        if let Some(encoding_val) = encoding {
 1073|  39.9k|            buf.push_str("\" encoding=\"");
 1074|  39.9k|            buf.push_str(encoding_val);
 1075|  39.9k|        }
 1076|       |
 1077|  39.9k|        if let Some(standalone_val) = standalone {
 1078|      0|            buf.push_str("\" standalone=\"");
 1079|      0|            buf.push_str(standalone_val);
 1080|  39.9k|        }
 1081|  39.9k|        buf.push('"');
 1082|  39.9k|
 1083|  39.9k|        BytesDecl {
 1084|  39.9k|            content: BytesStart::from_content(buf, 3),
 1085|  39.9k|        }
 1086|  39.9k|    }
_RNvMsg_NtCs4QWtT85WPeh_9quick_xml6eventsNtB5_9BytesDecl10from_start:
 1089|  84.4k|    pub const fn from_start(start: BytesStart<'a>) -> Self {
 1090|  84.4k|        Self { content: start }
 1091|  84.4k|    }
_RNvMsg_NtCs4QWtT85WPeh_9quick_xml6eventsNtB5_9BytesDecl8encoding:
 1192|  84.4k|    pub fn encoding(&self) -> Option<Result<Cow<[u8]>>> {
 1193|  84.4k|        self.content
 1194|  84.4k|            .try_get_attribute("encoding")
 1195|  84.4k|            .map(|a| a.map(|a| a.value))
 1196|  84.4k|            .transpose()
 1197|  84.4k|    }
_RNCNvMsg_NtCs4QWtT85WPeh_9quick_xml6eventsNtB7_9BytesDecl8encoding0B9_:
 1195|  74.3k|            .map(|a| a.map(|a| a.value))
_RNCNCNvMsg_NtCs4QWtT85WPeh_9quick_xml6eventsNtB9_9BytesDecl8encoding00Bb_:
 1195|  69.0k|            .map(|a| a.map(|a| a.value))
_RNvXsh_NtCs4QWtT85WPeh_9quick_xml6eventsNtB5_9BytesDeclNtNtNtCscdEvteftVc2_4core3ops5deref5Deref5deref:
 1273|  39.9k|    fn deref(&self) -> &[u8] {
 1274|  39.9k|        &self.content
 1275|  39.9k|    }
_RINvNtCs4QWtT85WPeh_9quick_xml6events16str_cow_to_bytesNtNtCs3OstG5Tqy1X_5alloc6string6StringEB4_:
 1386|   378k|fn str_cow_to_bytes<'a, C: Into<Cow<'a, str>>>(content: C) -> Cow<'a, [u8]> {
 1387|   378k|    match content.into() {
 1388|      0|        Cow::Borrowed(s) => Cow::Borrowed(s.as_bytes()),
 1389|   378k|        Cow::Owned(s) => Cow::Owned(s.into_bytes()),
 1390|       |    }
 1391|   378k|}

_RNvMsf_NtCs4QWtT85WPeh_9quick_xml4nameNtB5_17NamespaceResolver7resolveCs4sYt0urF4vM_8oxrdfxml:
  563|  2.16M|    pub fn resolve<'n>(
  564|  2.16M|        &self,
  565|  2.16M|        name: QName<'n>,
  566|  2.16M|        use_default: bool,
  567|  2.16M|    ) -> (ResolveResult, LocalName<'n>) {
  568|  2.16M|        let (local_name, prefix) = name.decompose();
  569|  2.16M|        (self.resolve_prefix(prefix, use_default), local_name)
  570|  2.16M|    }
_RNvXs0_NtCs4QWtT85WPeh_9quick_xml4nameNtB5_5QNameINtNtCscdEvteftVc2_4core7convert5AsRefShE6as_refCs4sYt0urF4vM_8oxrdfxml:
  123|  1.70M|    fn as_ref(&self) -> &[u8] {
  124|  1.70M|        self.0
  125|  1.70M|    }
_RNvXs3_NtCs4QWtT85WPeh_9quick_xml4nameNtB5_9LocalNameINtNtCscdEvteftVc2_4core7convert5AsRefShE6as_refCs4sYt0urF4vM_8oxrdfxml:
  153|  3.75M|    fn as_ref(&self) -> &[u8] {
  154|  3.75M|        self.0
  155|  3.75M|    }
_RNvXsa_NtCs4QWtT85WPeh_9quick_xml4nameNtB5_9NamespaceINtNtCscdEvteftVc2_4core7convert5AsRefShE6as_refCs4sYt0urF4vM_8oxrdfxml:
  269|  3.75M|    fn as_ref(&self) -> &[u8] {
  270|  3.75M|        self.0
  271|  3.75M|    }
_RNvMNtCs4QWtT85WPeh_9quick_xml4nameNtB2_5QName9decompose:
   66|  2.16M|    pub fn decompose(&self) -> (LocalName<'a>, Option<Prefix<'a>>) {
   67|  2.16M|        match self.index() {
   68|  1.30M|            None => (LocalName(self.0), None),
   69|   864k|            Some(i) => (LocalName(&self.0[i + 1..]), Some(Prefix(&self.0[..i]))),
   70|       |        }
   71|  2.16M|    }
_RNvMNtCs4QWtT85WPeh_9quick_xml4nameNtB2_5QName20as_namespace_binding:
   97|   884k|    pub fn as_namespace_binding(&self) -> Option<PrefixDeclaration<'a>> {
   98|   884k|        if self.0.starts_with(b"xmlns") {
   99|   441k|            return match self.0.get(5) {
  100|   222k|                None => Some(PrefixDeclaration::Default),
  101|   212k|                Some(&b':') => Some(PrefixDeclaration::Named(&self.0[6..])),
  102|  6.42k|                _ => None,
  103|       |            };
  104|   443k|        }
  105|   443k|        None
  106|   884k|    }
_RNvMNtCs4QWtT85WPeh_9quick_xml4nameNtB2_5QName5index:
  110|  2.16M|    fn index(&self) -> Option<usize> {
  111|  2.16M|        memchr(b':', self.0)
  112|  2.16M|    }
_RNvXs0_NtCs4QWtT85WPeh_9quick_xml4nameNtB5_5QNameINtNtCscdEvteftVc2_4core7convert5AsRefShE6as_refB7_:
  123|  2.62M|    fn as_ref(&self) -> &[u8] {
  124|  2.62M|        self.0
  125|  2.62M|    }
_RNvMs5_NtCs4QWtT85WPeh_9quick_xml4nameNtB5_6Prefix10into_inner:
  190|   223k|    pub const fn into_inner(self) -> &'a [u8] {
  191|   223k|        self.0
  192|   223k|    }
_RNvMs8_NtCs4QWtT85WPeh_9quick_xml4nameNtB5_9Namespace10into_inner:
  255|   162k|    pub const fn into_inner(self) -> &'a [u8] {
  256|   162k|        self.0
  257|   162k|    }
_RNvMsd_NtCs4QWtT85WPeh_9quick_xml4nameNtB5_14NamespaceEntry6prefixB7_:
  366|  3.55M|    fn prefix<'b>(&self, ns_buffer: &'b [u8]) -> Option<Prefix<'b>> {
  367|  3.55M|        if self.prefix_len == 0 {
  368|  1.31M|            None
  369|       |        } else {
  370|  2.24M|            Some(Prefix(&ns_buffer[self.start..self.start + self.prefix_len]))
  371|       |        }
  372|  3.55M|    }
_RNvMsd_NtCs4QWtT85WPeh_9quick_xml4nameNtB5_14NamespaceEntry9namespaceB7_:
  379|  1.87M|    fn namespace<'ns>(&self, buffer: &'ns [u8]) -> ResolveResult<'ns> {
  380|  1.87M|        if self.value_len == 0 {
  381|  3.96k|            ResolveResult::Unbound
  382|       |        } else {
  383|  1.87M|            let start = self.start + self.prefix_len;
  384|  1.87M|            ResolveResult::Bound(Namespace(&buffer[start..start + self.value_len]))
  385|       |        }
  386|  1.87M|    }
_RNvXse_NtCs4QWtT85WPeh_9quick_xml4nameNtB5_17NamespaceResolverNtNtCscdEvteftVc2_4core7default7Default7default:
  430|  81.2k|    fn default() -> Self {
  431|  81.2k|        let mut buffer = Vec::new();
  432|  81.2k|        let mut bindings = Vec::new();
  433|   243k|        for ent in &[RESERVED_NAMESPACE_XML, RESERVED_NAMESPACE_XMLNS] {
  434|   162k|            let prefix = ent.0.into_inner();
  435|   162k|            let uri = ent.1.into_inner();
  436|   162k|            bindings.push(NamespaceEntry {
  437|   162k|                start: buffer.len(),
  438|   162k|                prefix_len: prefix.len(),
  439|   162k|                value_len: uri.len(),
  440|   162k|                level: 0,
  441|   162k|            });
  442|   162k|            buffer.extend(prefix);
  443|   162k|            buffer.extend(uri);
  444|   162k|        }
  445|       |
  446|  81.2k|        Self {
  447|  81.2k|            buffer,
  448|  81.2k|            bindings,
  449|  81.2k|            nesting_level: 0,
  450|  81.2k|        }
  451|  81.2k|    }
_RNvMsf_NtCs4QWtT85WPeh_9quick_xml4nameNtB5_17NamespaceResolver4push:
  459|  1.79M|    pub fn push(&mut self, start: &BytesStart) -> Result<()> {
  460|  1.79M|        self.nesting_level += 1;
  461|  1.79M|        let level = self.nesting_level;
  462|       |        // adds new namespaces for attributes starting with 'xmlns:' and for the 'xmlns'
  463|       |        // (default namespace) attribute.
  464|  1.79M|        for a in start.attributes().with_checks(false) {
  465|  1.03M|            if let Ok(Attribute { key: k, value: v }) = a {
  466|   884k|                match k.as_namespace_binding() {
  467|   222k|                    Some(PrefixDeclaration::Default) => {
  468|   222k|                        let start = self.buffer.len();
  469|   222k|                        self.buffer.extend_from_slice(&v);
  470|   222k|                        self.bindings.push(NamespaceEntry {
  471|   222k|                            start,
  472|   222k|                            prefix_len: 0,
  473|   222k|                            value_len: v.len(),
  474|   222k|                            level,
  475|   222k|                        });
  476|   222k|                    }
  477|   212k|                    Some(PrefixDeclaration::Named(b"xml")) => {
  478|  1.56k|                        if Namespace(&v) != RESERVED_NAMESPACE_XML.1 {
  479|       |                            // error, `xml` prefix explicitly set to different value
  480|  1.28k|                            return Err(Error::InvalidPrefixBind {
  481|  1.28k|                                prefix: b"xml".to_vec(),
  482|  1.28k|                                namespace: v.to_vec(),
  483|  1.28k|                            });
  484|    277|                        }
  485|       |                        // don't add another NamespaceEntry for the `xml` namespace prefix
  486|       |                    }
  487|   167k|                    Some(PrefixDeclaration::Named(b"xmlns")) => {
  488|       |                        // error, `xmlns` prefix explicitly set
  489|  1.90k|                        return Err(Error::InvalidPrefixBind {
  490|  1.90k|                            prefix: b"xmlns".to_vec(),
  491|  1.90k|                            namespace: v.to_vec(),
  492|  1.90k|                        });
  493|       |                    }
  494|   208k|                    Some(PrefixDeclaration::Named(prefix)) => {
  495|   208k|                        let ns = Namespace(&v);
  496|   208k|
  497|   208k|                        if ns == RESERVED_NAMESPACE_XML.1 || ns == RESERVED_NAMESPACE_XMLNS.1 {
  498|       |                            // error, non-`xml` prefix set to xml uri
  499|       |                            // error, non-`xmlns` prefix set to xmlns uri
  500|  1.18k|                            return Err(Error::InvalidPrefixBind {
  501|  1.18k|                                prefix: prefix.to_vec(),
  502|  1.18k|                                namespace: v.to_vec(),
  503|  1.18k|                            });
  504|   207k|                        }
  505|   207k|
  506|   207k|                        let start = self.buffer.len();
  507|   207k|                        self.buffer.extend_from_slice(prefix);
  508|   207k|                        self.buffer.extend_from_slice(&v);
  509|   207k|                        self.bindings.push(NamespaceEntry {
  510|   207k|                            start,
  511|   207k|                            prefix_len: prefix.len(),
  512|   207k|                            value_len: v.len(),
  513|   207k|                            level,
  514|   207k|                        });
  515|       |                    }
  516|   449k|                    None => {}
  517|       |                }
  518|       |            } else {
  519|   148k|                break;
  520|       |            }
  521|       |        }
  522|  1.79M|        Ok(())
  523|  1.79M|    }
_RNvMsf_NtCs4QWtT85WPeh_9quick_xml4nameNtB5_17NamespaceResolver3pop:
  529|   534k|    pub fn pop(&mut self) {
  530|   534k|        self.nesting_level -= 1;
  531|   534k|        let current_level = self.nesting_level;
  532|   534k|        // from the back (most deeply nested scope), look for the first scope that is still valid
  533|   534k|        match self.bindings.iter().rposition(|n| n.level <= current_level) {
  534|       |            // none of the namespaces are valid, remove all of them
  535|      0|            None => {
  536|      0|                self.buffer.clear();
  537|      0|                self.bindings.clear();
  538|      0|            }
  539|       |            // drop all namespaces past the last valid namespace
  540|   534k|            Some(last_valid_pos) => {
  541|   534k|                if let Some(len) = self.bindings.get(last_valid_pos + 1).map(|n| n.start) {
  542|   378k|                    self.buffer.truncate(len);
  543|   378k|                    self.bindings.truncate(last_valid_pos + 1);
  544|   378k|                }
  545|       |            }
  546|       |        }
  547|   534k|    }
_RNCNvMsf_NtCs4QWtT85WPeh_9quick_xml4nameNtB7_17NamespaceResolver3pop0B9_:
  533|   912k|        match self.bindings.iter().rposition(|n| n.level <= current_level) {
_RNCNvMsf_NtCs4QWtT85WPeh_9quick_xml4nameNtB7_17NamespaceResolver3pops_0B9_:
  541|   378k|                if let Some(len) = self.bindings.get(last_valid_pos + 1).map(|n| n.start) {
_RNvMsf_NtCs4QWtT85WPeh_9quick_xml4nameNtB5_17NamespaceResolver14resolve_prefix:
  587|  2.16M|    fn resolve_prefix(&self, prefix: Option<Prefix>, use_default: bool) -> ResolveResult {
  588|  2.16M|        self.bindings
  589|  2.16M|            .iter()
  590|  2.16M|            // Find the last defined binding that corresponds to the given prefix
  591|  2.16M|            .rev()
  592|  2.16M|            .find_map(|n| match (n.prefix(&self.buffer), prefix) {
  593|       |                // This is default namespace definition and name has no explicit prefix
  594|       |                (None, None) if use_default => Some(n.namespace(&self.buffer)),
  595|       |                (None, None) => Some(ResolveResult::Unbound),
  596|       |
  597|       |                // One part has prefix but other is not -> skip
  598|       |                (None, Some(_)) => None,
  599|       |                (Some(_), None) => None,
  600|       |
  601|       |                // Prefixes does not match -> skip
  602|       |                (Some(definition), Some(usage)) if definition != usage => None,
  603|       |
  604|       |                // Prefixes the same, entry defines binding reset (corresponds to `xmlns:p=""`)
  605|       |                _ if n.value_len == 0 => Some(Self::maybe_unknown(prefix)),
  606|       |                // Prefixes the same, returns corresponding namespace
  607|       |                _ => Some(n.namespace(&self.buffer)),
  608|  2.16M|            })
  609|  2.16M|            .unwrap_or_else(|| Self::maybe_unknown(prefix))
  610|  2.16M|    }
_RNCNvMsf_NtCs4QWtT85WPeh_9quick_xml4nameNtB7_17NamespaceResolver14resolve_prefix0B9_:
  592|  3.55M|            .find_map(|n| match (n.prefix(&self.buffer), prefix) {
  593|       |                // This is default namespace definition and name has no explicit prefix
  594|  1.07M|                (None, None) if use_default => Some(n.namespace(&self.buffer)),
  595|  1.54k|                (None, None) => Some(ResolveResult::Unbound),
  596|       |
  597|       |                // One part has prefix but other is not -> skip
  598|   234k|                (None, Some(_)) => None,
  599|   739k|                (Some(_), None) => None,
  600|       |
  601|       |                // Prefixes does not match -> skip
  602|  1.50M|                (Some(definition), Some(usage)) if definition != usage => None,
  603|       |
  604|       |                // Prefixes the same, entry defines binding reset (corresponds to `xmlns:p=""`)
  605|   804k|                _ if n.value_len == 0 => Some(Self::maybe_unknown(prefix)),
  606|       |                // Prefixes the same, returns corresponding namespace
  607|   803k|                _ => Some(n.namespace(&self.buffer)),
  608|  3.55M|            })
_RNCNvMsf_NtCs4QWtT85WPeh_9quick_xml4nameNtB7_17NamespaceResolver14resolve_prefixs_0B9_:
  609|   283k|            .unwrap_or_else(|| Self::maybe_unknown(prefix))
_RNvMsf_NtCs4QWtT85WPeh_9quick_xml4nameNtB5_17NamespaceResolver13maybe_unknownB7_:
  613|   283k|    fn maybe_unknown(prefix: Option<Prefix>) -> ResolveResult<'static> {
  614|   283k|        match prefix {
  615|  60.8k|            Some(p) => ResolveResult::Unknown(p.into_inner().to_vec()),
  616|   222k|            None => ResolveResult::Unbound,
  617|       |        }
  618|   283k|    }

_RNvXNtNtCs4QWtT85WPeh_9quick_xml6parser7elementNtB2_13ElementParserNtB4_6Parser4feedCs4sYt0urF4vM_8oxrdfxml:
   57|  2.28M|    fn feed(&mut self, bytes: &[u8]) -> Option<usize> {
   58|  4.50M|        for i in memchr::memchr3_iter(b'>', b'\'', b'"', bytes) {
   59|  4.50M|            *self = match (*self, bytes[i]) {
   60|       |                // only allowed to match `>` while we are in state `Outside`
   61|  2.26M|                (Self::Outside, b'>') => return Some(i),
   62|  10.1k|                (Self::Outside, b'\'') => Self::SingleQ,
   63|   956k|                (Self::Outside, b'\"') => Self::DoubleQ,
   64|       |
   65|       |                // the only end_byte that gets us out if the same character
   66|   963k|                (Self::SingleQ, b'\'') | (Self::DoubleQ, b'"') => Self::Outside,
   67|       |
   68|       |                // all other bytes: no state change
   69|   303k|                _ => continue,
   70|       |            };
   71|       |        }
   72|  15.2k|        None
   73|  2.28M|    }
_RNvXNtNtCs4QWtT85WPeh_9quick_xml6parser7elementNtB2_13ElementParserNtB4_6Parser9eof_errorCs4sYt0urF4vM_8oxrdfxml:
   76|  15.2k|    fn eof_error() -> SyntaxError {
   77|  15.2k|        SyntaxError::UnclosedTag
   78|  15.2k|    }

_RNvXNtNtCs4QWtT85WPeh_9quick_xml6parser2piNtB2_8PiParserNtB4_6Parser4feedCs4sYt0urF4vM_8oxrdfxml:
   61|   106k|    fn feed(&mut self, bytes: &[u8]) -> Option<usize> {
   62|   120k|        for i in memchr::memchr_iter(b'>', bytes) {
   63|   120k|            match i {
   64|      0|                0 if self.0 => return Some(0),
   65|       |                // If the previous byte is `?`, then we found `?>`
   66|   120k|                i if i > 0 && bytes[i - 1] == b'?' => return Some(i),
   67|  16.6k|                _ => {}
   68|       |            }
   69|       |        }
   70|  1.77k|        self.0 = bytes.last().copied() == Some(b'?');
   71|  1.77k|        None
   72|   106k|    }
_RNvXNtNtCs4QWtT85WPeh_9quick_xml6parser2piNtB2_8PiParserNtB4_6Parser9eof_errorCs4sYt0urF4vM_8oxrdfxml:
   75|  1.77k|    fn eof_error() -> SyntaxError {
   76|  1.77k|        SyntaxError::UnclosedPIOrXmlDecl
   77|  1.77k|    }

_RINvXNtNtCs4QWtT85WPeh_9quick_xml6reader15buffered_readerRShINtB5_9XmlSourceQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE9read_withNtNtNtB7_6parser2pi8PiParserECs4sYt0urF4vM_8oxrdfxml:
  105|   106k|        $($async)? fn read_with<$($lf,)? P: Parser>(
  106|   106k|            &mut self,
  107|   106k|            mut parser: P,
  108|   106k|            buf: &'b mut Vec<u8>,
  109|   106k|            position: &mut u64,
  110|   106k|        ) -> Result<&'b [u8]> {
  111|   106k|            let mut read = 0;
  112|   106k|            let start = buf.len();
  113|       |            loop {
  114|   107k|                let available = match self $(.$reader)? .fill_buf() $(.$await)? {
  115|   107k|                    Ok(n) if n.is_empty() => break,
  116|   106k|                    Ok(n) => n,
  117|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  118|      0|                    Err(e) => {
  119|      0|                        *position += read;
  120|      0|                        return Err(Error::Io(e.into()));
  121|       |                    }
  122|       |                };
  123|       |
  124|   106k|                if let Some(i) = parser.feed(available) {
  125|   104k|                    buf.extend_from_slice(&available[..i]);
  126|   104k|
  127|   104k|                    // +1 for `>` which we do not include
  128|   104k|                    self $(.$reader)? .consume(i + 1);
  129|   104k|                    read += i as u64 + 1;
  130|   104k|
  131|   104k|                    *position += read;
  132|   104k|                    return Ok(&buf[start..]);
  133|  1.77k|                }
  134|  1.77k|
  135|  1.77k|                // The `>` symbol not yet found, continue reading
  136|  1.77k|                buf.extend_from_slice(available);
  137|  1.77k|
  138|  1.77k|                let used = available.len();
  139|  1.77k|                self $(.$reader)? .consume(used);
  140|  1.77k|                read += used as u64;
  141|       |            }
  142|       |
  143|  1.77k|            *position += read;
  144|  1.77k|            Err(Error::Syntax(P::eof_error()))
  145|   106k|        }
_RINvXNtNtCs4QWtT85WPeh_9quick_xml6reader15buffered_readerRShINtB5_9XmlSourceQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE9read_withNtNtNtB7_6parser7element13ElementParserECs4sYt0urF4vM_8oxrdfxml:
  105|  2.28M|        $($async)? fn read_with<$($lf,)? P: Parser>(
  106|  2.28M|            &mut self,
  107|  2.28M|            mut parser: P,
  108|  2.28M|            buf: &'b mut Vec<u8>,
  109|  2.28M|            position: &mut u64,
  110|  2.28M|        ) -> Result<&'b [u8]> {
  111|  2.28M|            let mut read = 0;
  112|  2.28M|            let start = buf.len();
  113|       |            loop {
  114|  2.29M|                let available = match self $(.$reader)? .fill_buf() $(.$await)? {
  115|  2.29M|                    Ok(n) if n.is_empty() => break,
  116|  2.28M|                    Ok(n) => n,
  117|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  118|      0|                    Err(e) => {
  119|      0|                        *position += read;
  120|      0|                        return Err(Error::Io(e.into()));
  121|       |                    }
  122|       |                };
  123|       |
  124|  2.28M|                if let Some(i) = parser.feed(available) {
  125|  2.26M|                    buf.extend_from_slice(&available[..i]);
  126|  2.26M|
  127|  2.26M|                    // +1 for `>` which we do not include
  128|  2.26M|                    self $(.$reader)? .consume(i + 1);
  129|  2.26M|                    read += i as u64 + 1;
  130|  2.26M|
  131|  2.26M|                    *position += read;
  132|  2.26M|                    return Ok(&buf[start..]);
  133|  15.2k|                }
  134|  15.2k|
  135|  15.2k|                // The `>` symbol not yet found, continue reading
  136|  15.2k|                buf.extend_from_slice(available);
  137|  15.2k|
  138|  15.2k|                let used = available.len();
  139|  15.2k|                self $(.$reader)? .consume(used);
  140|  15.2k|                read += used as u64;
  141|       |            }
  142|       |
  143|  15.2k|            *position += read;
  144|  15.2k|            Err(Error::Syntax(P::eof_error()))
  145|  2.28M|        }
_RNvXNtNtCs4QWtT85WPeh_9quick_xml6reader15buffered_readerRShINtB4_9XmlSourceQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE15remove_utf8_bomCs4sYt0urF4vM_8oxrdfxml:
   19|  81.2k|        $($async)? fn remove_utf8_bom(&mut self) -> io::Result<()> {
   20|       |            use crate::encoding::UTF8_BOM;
   21|       |
   22|       |            loop {
   23|  81.2k|                break match self $(.$reader)? .fill_buf() $(.$await)? {
   24|  81.2k|                    Ok(n) => {
   25|  81.2k|                        if n.starts_with(UTF8_BOM) {
   26|    516|                            self $(.$reader)? .consume(UTF8_BOM.len());
   27|  80.7k|                        }
   28|  81.2k|                        Ok(())
   29|       |                    },
   30|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
   31|      0|                    Err(e) => Err(e),
   32|       |                };
   33|       |            }
   34|  81.2k|        }
_RNvXNtNtCs4QWtT85WPeh_9quick_xml6reader15buffered_readerRShINtB4_9XmlSourceQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE17read_bang_elementCs4sYt0urF4vM_8oxrdfxml:
  148|  2.55k|        $($async)? fn read_bang_element $(<$lf>)? (
  149|  2.55k|            &mut self,
  150|  2.55k|            buf: &'b mut Vec<u8>,
  151|  2.55k|            position: &mut u64,
  152|  2.55k|        ) -> Result<(BangType, &'b [u8])> {
  153|  2.55k|            // Peeked one bang ('!') before being called, so it's guaranteed to
  154|  2.55k|            // start with it.
  155|  2.55k|            let start = buf.len();
  156|  2.55k|            let mut read = 1;
  157|  2.55k|            buf.push(b'!');
  158|  2.55k|            self $(.$reader)? .consume(1);
  159|       |
  160|  2.55k|            let bang_type = BangType::new(self.peek_one() $(.$await)? ?)?;
  161|       |
  162|       |            loop {
  163|  2.62k|                match self $(.$reader)? .fill_buf() $(.$await)? {
  164|       |                    // Note: Do not update position, so the error points to
  165|       |                    // somewhere sane rather than at the EOF
  166|  2.62k|                    Ok(n) if n.is_empty() => break,
  167|  2.49k|                    Ok(available) => {
  168|       |                        // We only parse from start because we don't want to consider
  169|       |                        // whatever is in the buffer before the bang element
  170|  2.49k|                        if let Some((consumed, used)) = bang_type.parse(&buf[start..], available) {
  171|  2.35k|                            buf.extend_from_slice(consumed);
  172|  2.35k|
  173|  2.35k|                            self $(.$reader)? .consume(used);
  174|  2.35k|                            read += used as u64;
  175|  2.35k|
  176|  2.35k|                            *position += read;
  177|  2.35k|                            return Ok((bang_type, &buf[start..]));
  178|    134|                        } else {
  179|    134|                            buf.extend_from_slice(available);
  180|    134|
  181|    134|                            let used = available.len();
  182|    134|                            self $(.$reader)? .consume(used);
  183|    134|                            read += used as u64;
  184|    134|                        }
  185|       |                    }
  186|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  187|      0|                    Err(e) => {
  188|      0|                        *position += read;
  189|      0|                        return Err(Error::Io(e.into()));
  190|       |                    }
  191|       |                }
  192|       |            }
  193|       |
  194|    134|            *position += read;
  195|    134|            Err(bang_type.to_err())
  196|  2.55k|        }
_RNvXNtNtCs4QWtT85WPeh_9quick_xml6reader15buffered_readerRShINtB4_9XmlSourceQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE8peek_oneCs4sYt0urF4vM_8oxrdfxml:
  219|  2.39M|        $($async)? fn peek_one(&mut self) -> io::Result<Option<u8>> {
  220|       |            loop {
  221|  2.39M|                break match self $(.$reader)? .fill_buf() $(.$await)? {
  222|  2.39M|                    Ok(n) => Ok(n.first().cloned()),
  223|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  224|      0|                    Err(e) => Err(e),
  225|       |                };
  226|       |            }
  227|  2.39M|        }
_RNvXNtNtCs4QWtT85WPeh_9quick_xml6reader15buffered_readerRShINtB4_9XmlSourceQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE9read_textCs4sYt0urF4vM_8oxrdfxml:
   54|  2.45M|        $($async)? fn read_text $(<$lf>)? (
   55|  2.45M|            &mut self,
   56|  2.45M|            buf: &'b mut Vec<u8>,
   57|  2.45M|            position: &mut u64,
   58|  2.45M|        ) -> ReadTextResult<'b, &'b mut Vec<u8>> {
   59|  2.45M|            let mut read = 0;
   60|  2.45M|            let start = buf.len();
   61|       |            loop {
   62|  2.47M|                let available = match self $(.$reader)? .fill_buf() $(.$await)? {
   63|  2.47M|                    Ok(n) if n.is_empty() => break,
   64|  2.40M|                    Ok(n) => n,
   65|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
   66|      0|                    Err(e) => {
   67|      0|                        *position += read;
   68|      0|                        return ReadTextResult::Err(e);
   69|       |                    }
   70|       |                };
   71|       |
   72|  2.40M|                match memchr::memchr(b'<', available) {
   73|       |                    // Special handling is needed only on the first iteration.
   74|       |                    // On next iterations we already read something and should emit Text event
   75|   714k|                    Some(0) if read == 0 => {
   76|   714k|                        self $(.$reader)? .consume(1);
   77|   714k|                        *position += 1;
   78|   714k|                        return ReadTextResult::Markup(buf);
   79|       |                    }
   80|  1.67M|                    Some(i) => {
   81|  1.67M|                        buf.extend_from_slice(&available[..i]);
   82|  1.67M|
   83|  1.67M|                        let used = i + 1;
   84|  1.67M|                        self $(.$reader)? .consume(used);
   85|  1.67M|                        read += used as u64;
   86|  1.67M|
   87|  1.67M|                        *position += read;
   88|  1.67M|                        return ReadTextResult::UpToMarkup(&buf[start..]);
   89|       |                    }
   90|  17.1k|                    None => {
   91|  17.1k|                        buf.extend_from_slice(available);
   92|  17.1k|
   93|  17.1k|                        let used = available.len();
   94|  17.1k|                        self $(.$reader)? .consume(used);
   95|  17.1k|                        read += used as u64;
   96|  17.1k|                    }
   97|       |                }
   98|       |            }
   99|       |
  100|  61.9k|            *position += read;
  101|  61.9k|            ReadTextResult::UpToEof(&buf[start..])
  102|  2.45M|        }

_RINvMs5_NtCs4QWtT85WPeh_9quick_xml6readerINtB6_6ReaderRShE15read_event_implQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECs4sYt0urF4vM_8oxrdfxml:
  897|  4.24M|    fn read_event_impl<'i, B>(&mut self, mut buf: B) -> Result<Event<'i>>
  898|  4.24M|    where
  899|  4.24M|        R: XmlSource<'i, B>,
  900|  4.24M|    {
  901|  5.04M|        read_event_impl!(self, buf, self.reader, read_until_close)
  902|  4.24M|    }
_RINvMs5_NtCs4QWtT85WPeh_9quick_xml6readerINtB6_6ReaderRShE16read_until_closeQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECs4sYt0urF4vM_8oxrdfxml:
  906|  2.39M|    fn read_until_close<'i, B>(&mut self, buf: B) -> Result<Event<'i>>
  907|  2.39M|    where
  908|  2.39M|        R: XmlSource<'i, B>,
  909|  2.39M|    {
  910|  2.39M|        read_until_close!(self, buf, self.reader)
  911|  2.39M|    }
_RNvMs6_NtCs4QWtT85WPeh_9quick_xml6readerNtB5_8BangType3new:
 1027|  2.55k|    const fn new(byte: Option<u8>) -> Result<Self> {
 1028|  2.55k|        Ok(match byte {
 1029|    523|            Some(b'[') => Self::CData,
 1030|  1.83k|            Some(b'-') => Self::Comment,
 1031|    137|            Some(b'D') | Some(b'd') => Self::DocType,
 1032|     62|            _ => return Err(Error::Syntax(SyntaxError::InvalidBangMarkup)),
 1033|       |        })
 1034|  2.55k|    }
_RNvMs6_NtCs4QWtT85WPeh_9quick_xml6readerNtB5_8BangType5parse:
 1043|  2.49k|    fn parse<'b>(&self, buf: &[u8], chunk: &'b [u8]) -> Option<(&'b [u8], usize)> {
 1044|  2.49k|        match self {
 1045|       |            Self::Comment => {
 1046|  5.38k|                for i in memchr::memchr_iter(b'>', chunk) {
 1047|       |                    // Need to read at least 6 symbols (`!---->`) for properly finished comment
 1048|       |                    // <!----> - XML comment
 1049|       |                    //  012345 - i
 1050|  5.38k|                    if buf.len() + i > 4 {
 1051|  4.05k|                        if chunk[..i].ends_with(b"--") {
 1052|       |                            // We cannot strip last `--` from the buffer because we need it in case of
 1053|       |                            // check_comments enabled option. XML standard requires that comment
 1054|       |                            // will not end with `--->` sequence because this is a special case of
 1055|       |                            // `--` in the comment (https://www.w3.org/TR/xml11/#sec-comments)
 1056|  1.78k|                            return Some((&chunk[..i], i + 1)); // +1 for `>`
 1057|  2.27k|                        }
 1058|  2.27k|                        // End sequence `-|->` was splitted at |
 1059|  2.27k|                        //        buf --/   \-- chunk
 1060|  2.27k|                        if i == 1 && buf.ends_with(b"-") && chunk[0] == b'-' {
 1061|      0|                            return Some((&chunk[..i], i + 1)); // +1 for `>`
 1062|  2.27k|                        }
 1063|  2.27k|                        // End sequence `--|>` was splitted at |
 1064|  2.27k|                        //         buf --/   \-- chunk
 1065|  2.27k|                        if i == 0 && buf.ends_with(b"--") {
 1066|      0|                            return Some((&[], i + 1)); // +1 for `>`
 1067|  2.27k|                        }
 1068|  1.33k|                    }
 1069|       |                }
 1070|       |            }
 1071|       |            Self::CData => {
 1072|  1.08k|                for i in memchr::memchr_iter(b'>', chunk) {
 1073|  1.08k|                    if chunk[..i].ends_with(b"]]") {
 1074|    506|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
 1075|    583|                    }
 1076|    583|                    // End sequence `]|]>` was splitted at |
 1077|    583|                    //        buf --/   \-- chunk
 1078|    583|                    if i == 1 && buf.ends_with(b"]") && chunk[0] == b']' {
 1079|      0|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
 1080|    583|                    }
 1081|    583|                    // End sequence `]]|>` was splitted at |
 1082|    583|                    //         buf --/   \-- chunk
 1083|    583|                    if i == 0 && buf.ends_with(b"]]") {
 1084|      0|                        return Some((&[], i + 1)); // +1 for `>`
 1085|    583|                    }
 1086|       |                }
 1087|       |            }
 1088|       |            Self::DocType => {
 1089|  3.01k|                for i in memchr::memchr_iter(b'>', chunk) {
 1090|  3.01k|                    let content = &chunk[..i];
 1091|  3.01k|                    let balance = memchr::memchr2_iter(b'<', b'>', content)
 1092|  3.01k|                        .map(|p| if content[p] == b'<' { 1i32 } else { -1 })
 1093|  3.01k|                        .sum::<i32>();
 1094|  3.01k|                    if balance == 0 {
 1095|     71|                        return Some((content, i + 1)); // +1 for `>`
 1096|  2.94k|                    }
 1097|       |                }
 1098|       |            }
 1099|       |        }
 1100|    134|        None
 1101|  2.49k|    }
_RNvMs6_NtCs4QWtT85WPeh_9quick_xml6readerNtB5_8BangType6to_errCs4sYt0urF4vM_8oxrdfxml:
 1103|    134|    const fn to_err(&self) -> Error {
 1104|    134|        match self {
 1105|     17|            Self::CData => Error::Syntax(SyntaxError::UnclosedCData),
 1106|     51|            Self::Comment => Error::Syntax(SyntaxError::UnclosedComment),
 1107|     66|            Self::DocType => Error::Syntax(SyntaxError::UnclosedDoctype),
 1108|       |        }
 1109|    134|    }
_RNvXs_NtCs4QWtT85WPeh_9quick_xml6readerNtB4_6ConfigNtNtCscdEvteftVc2_4core7default7Default7default:
  211|  81.2k|    fn default() -> Self {
  212|  81.2k|        Self {
  213|  81.2k|            allow_unmatched_ends: false,
  214|  81.2k|            check_comments: false,
  215|  81.2k|            check_end_names: true,
  216|  81.2k|            expand_empty_elements: false,
  217|  81.2k|            trim_markup_names_in_closing_tags: true,
  218|  81.2k|            trim_text_start: false,
  219|  81.2k|            trim_text_end: false,
  220|  81.2k|        }
  221|  81.2k|    }
_RNvMs3_NtCs4QWtT85WPeh_9quick_xml6readerINtB5_6ReaderRShE11from_readerB7_:
  697|  81.2k|    pub fn from_reader(reader: R) -> Self {
  698|  81.2k|        Self {
  699|  81.2k|            reader,
  700|  81.2k|            state: ReaderState::default(),
  701|  81.2k|        }
  702|  81.2k|    }
_RNvMs3_NtCs4QWtT85WPeh_9quick_xml6readerINtB5_6ReaderRShE10config_mutB7_:
  710|  81.2k|    pub fn config_mut(&mut self) -> &mut Config {
  711|  81.2k|        &mut self.state.config
  712|  81.2k|    }
_RNvMs4_NtCs4QWtT85WPeh_9quick_xml6readerINtB5_6ReaderRShE7decoderB7_:
  827|  2.39M|    pub const fn decoder(&self) -> Decoder {
  828|  2.39M|        self.state.decoder()
  829|  2.39M|    }
_RNCNvMs6_NtCs4QWtT85WPeh_9quick_xml6readerNtB7_8BangType5parse0B9_:
 1092|   264k|                        .map(|p| if content[p] == b'<' { 1i32 } else { -1 })
_RNvMs6_NtCs4QWtT85WPeh_9quick_xml6readerNtB5_8BangType6to_errB7_:
 1103|    581|    const fn to_err(&self) -> Error {
 1104|    581|        match self {
 1105|    506|            Self::CData => Error::Syntax(SyntaxError::UnclosedCData),
 1106|      4|            Self::Comment => Error::Syntax(SyntaxError::UnclosedComment),
 1107|     71|            Self::DocType => Error::Syntax(SyntaxError::UnclosedDoctype),
 1108|       |        }
 1109|    581|    }

_RINvMs_NtNtCs4QWtT85WPeh_9quick_xml6reader9ns_readerINtB5_8NsReaderRShE15read_event_implQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECs4sYt0urF4vM_8oxrdfxml:
  148|  4.24M|    fn read_event_impl<'i, B>(&mut self, buf: B) -> Result<Event<'i>>
  149|  4.24M|    where
  150|  4.24M|        R: XmlSource<'i, B>,
  151|  4.24M|    {
  152|  4.24M|        self.pop();
  153|  4.24M|        let event = self.reader.read_event_impl(buf);
  154|  4.24M|        self.process_event(event)
  155|  4.24M|    }
_RNvMNtNtCs4QWtT85WPeh_9quick_xml6reader9ns_readerINtB2_8NsReaderRShE10config_mutCs4sYt0urF4vM_8oxrdfxml:
   48|  81.2k|    pub fn config_mut(&mut self) -> &mut Config {
   49|  81.2k|        self.reader.config_mut()
   50|  81.2k|    }
_RNvMNtNtCs4QWtT85WPeh_9quick_xml6reader9ns_readerINtB2_8NsReaderRShE11from_readerCs4sYt0urF4vM_8oxrdfxml:
   36|  81.2k|    pub fn from_reader(reader: R) -> Self {
   37|  81.2k|        Self::new(Reader::from_reader(reader))
   38|  81.2k|    }
_RNvMs0_NtNtCs4QWtT85WPeh_9quick_xml6reader9ns_readerINtB5_8NsReaderRShE15resolve_elementCs4sYt0urF4vM_8oxrdfxml:
  307|  1.74M|    pub fn resolve_element<'n>(&self, name: QName<'n>) -> (ResolveResult, LocalName<'n>) {
  308|  1.74M|        self.ns_resolver.resolve(name, true)
  309|  1.74M|    }
_RNvMs0_NtNtCs4QWtT85WPeh_9quick_xml6reader9ns_readerINtB5_8NsReaderRShE17resolve_attributeCs4sYt0urF4vM_8oxrdfxml:
  377|   423k|    pub fn resolve_attribute<'n>(&self, name: QName<'n>) -> (ResolveResult, LocalName<'n>) {
  378|   423k|        self.ns_resolver.resolve(name, false)
  379|   423k|    }
_RNvMs1_NtNtCs4QWtT85WPeh_9quick_xml6reader9ns_readerINtB5_8NsReaderRShE15read_event_intoCs4sYt0urF4vM_8oxrdfxml:
  436|  4.24M|    pub fn read_event_into<'b>(&mut self, buf: &'b mut Vec<u8>) -> Result<Event<'b>> {
  437|  4.24M|        self.read_event_impl(buf)
  438|  4.24M|    }
_RNvMs_NtNtCs4QWtT85WPeh_9quick_xml6reader9ns_readerINtB4_8NsReaderRShE13process_eventCs4sYt0urF4vM_8oxrdfxml:
  164|  4.24M|    pub(super) fn process_event<'i>(&mut self, event: Result<Event<'i>>) -> Result<Event<'i>> {
  165|  4.21M|        match event {
  166|  1.79M|            Ok(Event::Start(e)) => {
  167|  1.79M|                self.ns_resolver.push(&e)?;
  168|  1.79M|                Ok(Event::Start(e))
  169|       |            }
  170|      0|            Ok(Event::Empty(e)) => {
  171|      0|                self.ns_resolver.push(&e)?;
  172|       |                // notify next `read_event_impl()` invocation that it needs to pop this
  173|       |                // namespace scope
  174|      0|                self.pending_pop = true;
  175|      0|                Ok(Event::Empty(e))
  176|       |            }
  177|   534k|            Ok(Event::End(e)) => {
  178|   534k|                // notify next `read_event_impl()` invocation that it needs to pop this
  179|   534k|                // namespace scope
  180|   534k|                self.pending_pop = true;
  181|   534k|                Ok(Event::End(e))
  182|       |            }
  183|  1.91M|            e => e,
  184|       |        }
  185|  4.24M|    }
_RNvMs_NtNtCs4QWtT85WPeh_9quick_xml6reader9ns_readerINtB4_8NsReaderRShE3newCs4sYt0urF4vM_8oxrdfxml:
  140|  81.2k|    fn new(reader: Reader<R>) -> Self {
  141|  81.2k|        Self {
  142|  81.2k|            reader,
  143|  81.2k|            ns_resolver: NamespaceResolver::default(),
  144|  81.2k|            pending_pop: false,
  145|  81.2k|        }
  146|  81.2k|    }
_RNvMs_NtNtCs4QWtT85WPeh_9quick_xml6reader9ns_readerINtB4_8NsReaderRShE3popCs4sYt0urF4vM_8oxrdfxml:
  157|  4.24M|    pub(super) fn pop(&mut self) {
  158|  4.24M|        if self.pending_pop {
  159|   534k|            self.ns_resolver.pop();
  160|   534k|            self.pending_pop = false;
  161|  3.71M|        }
  162|  4.24M|    }
_RNvXs4_NtNtCs4QWtT85WPeh_9quick_xml6reader9ns_readerINtB5_8NsReaderRShENtNtNtCscdEvteftVc2_4core3ops5deref5Deref5derefCs4sYt0urF4vM_8oxrdfxml:
  920|  2.39M|    fn deref(&self) -> &Self::Target {
  921|  2.39M|        &self.reader
  922|  2.39M|    }

_RNvMNtNtCs4QWtT85WPeh_9quick_xml6reader5stateNtB2_11ReaderState20close_expanded_emptyCs4sYt0urF4vM_8oxrdfxml:
  307|  81.5k|    pub fn close_expanded_empty(&mut self) -> BytesEnd<'static> {
  308|  81.5k|        self.state = ParseState::InsideText;
  309|  81.5k|        let name = self
  310|  81.5k|            .opened_buffer
  311|  81.5k|            .split_off(self.opened_starts.pop().unwrap());
  312|  81.5k|        BytesEnd::wrap(name.into())
  313|  81.5k|    }
_RNvMNtNtCs4QWtT85WPeh_9quick_xml6reader5stateNtB2_11ReaderState9emit_text:
   60|  1.73M|    pub fn emit_text<'b>(&mut self, bytes: &'b [u8]) -> BytesText<'b> {
   61|  1.73M|        let mut content = bytes;
   62|  1.73M|
   63|  1.73M|        if self.config.trim_text_end {
   64|      0|            // Skip the ending '<'
   65|      0|            let len = bytes
   66|      0|                .iter()
   67|      0|                .rposition(|&b| !is_whitespace(b))
   68|      0|                .map_or(0, |p| p + 1);
   69|      0|            content = &bytes[..len];
   70|  1.73M|        }
   71|  1.73M|        BytesText::wrap(content, self.decoder())
   72|  1.73M|    }
_RNvMNtNtCs4QWtT85WPeh_9quick_xml6reader5stateNtB2_11ReaderState9emit_bang:
   81|  2.35k|    pub fn emit_bang<'b>(&mut self, bang_type: BangType, buf: &'b [u8]) -> Result<Event<'b>> {
   82|  2.35k|        debug_assert_eq!(
   83|      0|            buf.first(),
   84|       |            Some(&b'!'),
   85|      0|            "CDATA, comment or DOCTYPE should start from '!'"
   86|       |        );
   87|       |
   88|  2.35k|        let uncased_starts_with = |string: &[u8], prefix: &[u8]| {
   89|       |            string.len() >= prefix.len() && string[..prefix.len()].eq_ignore_ascii_case(prefix)
   90|       |        };
   91|       |
   92|  2.35k|        let len = buf.len();
   93|    577|        match bang_type {
   94|  1.78k|            BangType::Comment if buf.starts_with(b"!--") => {
   95|  1.77k|                debug_assert!(buf.ends_with(b"--"));
   96|  1.77k|                if self.config.check_comments {
   97|       |                    // search if '--' not in comments
   98|      0|                    let mut haystack = &buf[3..len - 2];
   99|      0|                    let mut off = 0;
  100|      0|                    while let Some(p) = memchr::memchr(b'-', haystack) {
  101|      0|                        off += p + 1;
  102|      0|                        // if next byte after `-` is also `-`, return an error
  103|      0|                        if buf[3 + off] == b'-' {
  104|       |                            // Explanation of the magic:
  105|       |                            //
  106|       |                            // - `self.offset`` just after `>`,
  107|       |                            // - `buf` contains `!-- con--tent --`
  108|       |                            // - `p` is counted from byte after `<!--`
  109|       |                            //
  110|       |                            // <!-- con--tent -->:
  111|       |                            //  ~~~~~~~~~~~~~~~~ : - buf
  112|       |                            //   : ===========   : - zone of search (possible values of `p`)
  113|       |                            //   : |---p         : - p is counted from | (| is 0)
  114|       |                            //   : :   :         ^ - self.offset
  115|       |                            //   ^ :   :           - self.offset - len
  116|       |                            //     ^   :           - self.offset - len + 2
  117|       |                            //         ^           - self.offset - len + 2 + p
  118|      0|                            self.last_error_offset = self.offset - len as u64 + 2 + p as u64;
  119|      0|                            return Err(Error::IllFormed(IllFormedError::DoubleHyphenInComment));
  120|      0|                        }
  121|      0|                        // Continue search after single `-` (+1 to skip it)
  122|      0|                        haystack = &haystack[p + 1..];
  123|       |                    }
  124|  1.77k|                }
  125|  1.77k|                Ok(Event::Comment(BytesText::wrap(
  126|  1.77k|                    // Cut of `!--` and `--` from start and end
  127|  1.77k|                    &buf[3..len - 2],
  128|  1.77k|                    self.decoder(),
  129|  1.77k|                )))
  130|       |            }
  131|       |            // XML requires uppercase only:
  132|       |            // https://www.w3.org/TR/xml11/#sec-cdata-sect
  133|       |            // Even HTML5 required uppercase only:
  134|       |            // https://html.spec.whatwg.org/multipage/parsing.html#markup-declaration-open-state
  135|    506|            BangType::CData if buf.starts_with(b"![CDATA[") => {
  136|      0|                debug_assert!(buf.ends_with(b"]]"));
  137|      0|                Ok(Event::CData(BytesCData::wrap(
  138|      0|                    // Cut of `![CDATA[` and `]]` from start and end
  139|      0|                    &buf[8..len - 2],
  140|      0|                    self.decoder(),
  141|      0|                )))
  142|       |            }
  143|       |            // XML requires uppercase only, but we will check that on validation stage:
  144|       |            // https://www.w3.org/TR/xml11/#sec-prolog-dtd
  145|       |            // HTML5 allows mixed case for doctype declarations:
  146|       |            // https://html.spec.whatwg.org/multipage/parsing.html#markup-declaration-open-state
  147|     71|            BangType::DocType if uncased_starts_with(buf, b"!DOCTYPE") => {
  148|      0|                match buf[8..].iter().position(|&b| !is_whitespace(b)) {
  149|      0|                    Some(start) => Ok(Event::DocType(BytesText::wrap(
  150|      0|                        // Cut of `!DOCTYPE` and any number of spaces from start
  151|      0|                        &buf[8 + start..],
  152|      0|                        self.decoder(),
  153|      0|                    ))),
  154|       |                    None => {
  155|       |                        // Because we here, we at least read `<!DOCTYPE>` and offset after `>`.
  156|       |                        // We want report error at place where name is expected - this is just
  157|       |                        // before `>`
  158|      0|                        self.last_error_offset = self.offset - 1;
  159|      0|                        return Err(Error::IllFormed(IllFormedError::MissingDoctypeName));
  160|       |                    }
  161|       |                }
  162|       |            }
  163|       |            _ => {
  164|       |                // <!....>
  165|       |                //  ^^^^^ - `buf` does not contain `<` and `>`, but `self.offset` is after `>`.
  166|       |                // ^------- We report error at that position, so we need to subtract 2 and buf len
  167|    581|                self.last_error_offset = self.offset - len as u64 - 2;
  168|    581|                Err(bang_type.to_err())
  169|       |            }
  170|       |        }
  171|  2.35k|    }
_RNCNvMNtNtCs4QWtT85WPeh_9quick_xml6reader5stateNtB4_11ReaderState9emit_bang0B8_:
   88|     71|        let uncased_starts_with = |string: &[u8], prefix: &[u8]| {
   89|     71|            string.len() >= prefix.len() && string[..prefix.len()].eq_ignore_ascii_case(prefix)
   90|     71|        };
_RNvMNtNtCs4QWtT85WPeh_9quick_xml6reader5stateNtB2_11ReaderState8emit_end:
  177|   468k|    pub fn emit_end<'b>(&mut self, buf: &'b [u8]) -> Result<Event<'b>> {
  178|   468k|        debug_assert_eq!(
  179|      0|            buf.first(),
  180|       |            Some(&b'/'),
  181|      0|            "closing tag should start from '/'"
  182|       |        );
  183|       |
  184|       |        // Strip the `/` character. `content` contains data between `</` and `>`
  185|   468k|        let content = &buf[1..];
  186|       |        // XML standard permits whitespaces after the markup name in closing tags.
  187|       |        // Let's strip them from the buffer before comparing tag names.
  188|   468k|        let name = if self.config.trim_markup_names_in_closing_tags {
  189|   468k|            if let Some(pos_end_name) = content.iter().rposition(|&b| !is_whitespace(b)) {
  190|   406k|                &content[..pos_end_name + 1]
  191|       |            } else {
  192|  61.9k|                content
  193|       |            }
  194|       |        } else {
  195|      0|            content
  196|       |        };
  197|       |
  198|   468k|        let decoder = self.decoder();
  199|   468k|
  200|   468k|        // Get the index in self.opened_buffer of the name of the last opened tag
  201|   468k|        match self.opened_starts.pop() {
  202|   462k|            Some(start) => {
  203|   462k|                if self.config.check_end_names {
  204|   462k|                    let expected = &self.opened_buffer[start..];
  205|   462k|                    if name != expected {
  206|  10.1k|                        let expected = decoder.decode(expected).unwrap_or_default().into_owned();
  207|  10.1k|                        // #513: In order to allow error recovery we should drop content of the buffer
  208|  10.1k|                        self.opened_buffer.truncate(start);
  209|  10.1k|
  210|  10.1k|                        // Report error at start of the end tag at `<` character
  211|  10.1k|                        // -2 for `<` and `>`
  212|  10.1k|                        self.last_error_offset = self.offset - buf.len() as u64 - 2;
  213|  10.1k|                        return Err(Error::IllFormed(IllFormedError::MismatchedEndTag {
  214|  10.1k|                            expected,
  215|  10.1k|                            found: decoder.decode(name).unwrap_or_default().into_owned(),
  216|  10.1k|                        }));
  217|   452k|                    }
  218|      0|                }
  219|       |
  220|   452k|                self.opened_buffer.truncate(start);
  221|       |            }
  222|       |            None => {
  223|  6.04k|                if !self.config.allow_unmatched_ends {
  224|       |                    // Report error at start of the end tag at `<` character
  225|       |                    // -2 for `<` and `>`
  226|  6.04k|                    self.last_error_offset = self.offset - buf.len() as u64 - 2;
  227|  6.04k|                    return Err(Error::IllFormed(IllFormedError::UnmatchedEndTag(
  228|  6.04k|                        decoder.decode(name).unwrap_or_default().into_owned(),
  229|  6.04k|                    )));
  230|      0|                }
  231|       |            }
  232|       |        }
  233|       |
  234|   452k|        Ok(Event::End(BytesEnd::wrap(name.into())))
  235|   468k|    }
_RNCNvMNtNtCs4QWtT85WPeh_9quick_xml6reader5stateNtB4_11ReaderState8emit_end0B8_:
  189|   425k|            if let Some(pos_end_name) = content.iter().rposition(|&b| !is_whitespace(b)) {
_RNvMNtNtCs4QWtT85WPeh_9quick_xml6reader5stateNtB2_11ReaderState18emit_question_mark:
  241|   104k|    pub fn emit_question_mark<'b>(&mut self, buf: &'b [u8]) -> Result<Event<'b>> {
  242|   104k|        debug_assert!(buf.len() > 0);
  243|   104k|        debug_assert_eq!(buf[0], b'?');
  244|       |
  245|   104k|        let len = buf.len();
  246|   104k|        // We accept at least <??>
  247|   104k|        //                     ~~ - len = 2
  248|   104k|        if len > 1 && buf[len - 1] == b'?' {
  249|       |            // Cut of `?` and `?` from start and end
  250|   104k|            let content = &buf[1..len - 1];
  251|   104k|            let len = content.len();
  252|   104k|
  253|   104k|            if content.starts_with(b"xml") && (len == 3 || is_whitespace(content[3])) {
  254|  84.4k|                let event = BytesDecl::from_start(BytesStart::wrap(content, 3));
  255|  84.4k|
  256|  84.4k|                // Try getting encoding from the declaration event
  257|  84.4k|                #[cfg(feature = "encoding")]
  258|  84.4k|                if self.encoding.can_be_refined() {
  259|  84.4k|                    if let Some(encoding) = event.encoder() {
  260|  84.4k|                        self.encoding = EncodingRef::XmlDetected(encoding);
  261|  84.4k|                    }
  262|  84.4k|                }
  263|  84.4k|
  264|  84.4k|                Ok(Event::Decl(event))
  265|       |            } else {
  266|  19.7k|                Ok(Event::PI(BytesPI::wrap(content, name_len(content))))
  267|       |            }
  268|       |        } else {
  269|       |            // <?....EOF
  270|       |            //  ^^^^^ - `buf` does not contains `<`, but we want to report error at `<`,
  271|       |            //          so we move offset to it (-2 for `<` and `>`)
  272|     39|            self.last_error_offset = self.offset - len as u64 - 2;
  273|     39|            Err(Error::Syntax(SyntaxError::UnclosedPIOrXmlDecl))
  274|       |        }
  275|   104k|    }
_RNvMNtNtCs4QWtT85WPeh_9quick_xml6reader5stateNtB2_11ReaderState10emit_start:
  281|  1.79M|    pub fn emit_start<'b>(&mut self, content: &'b [u8]) -> Event<'b> {
  282|  1.79M|        if let Some(content) = content.strip_suffix(b"/") {
  283|       |            // This is self-closed tag `<something/>`
  284|  81.5k|            let event = BytesStart::wrap(content, name_len(content));
  285|  81.5k|
  286|  81.5k|            if self.config.expand_empty_elements {
  287|  81.5k|                self.state = ParseState::InsideEmpty;
  288|  81.5k|                self.opened_starts.push(self.opened_buffer.len());
  289|  81.5k|                self.opened_buffer.extend(event.name().as_ref());
  290|  81.5k|                Event::Start(event)
  291|       |            } else {
  292|      0|                Event::Empty(event)
  293|       |            }
  294|       |        } else {
  295|  1.71M|            let event = BytesStart::wrap(content, name_len(content));
  296|  1.71M|
  297|  1.71M|            // #514: Always store names event when .check_end_names == false,
  298|  1.71M|            // because checks can be temporary disabled and when they would be
  299|  1.71M|            // enabled, we should have that information
  300|  1.71M|            self.opened_starts.push(self.opened_buffer.len());
  301|  1.71M|            self.opened_buffer.extend(event.name().as_ref());
  302|  1.71M|            Event::Start(event)
  303|       |        }
  304|  1.79M|    }
_RNvMNtNtCs4QWtT85WPeh_9quick_xml6reader5stateNtB2_11ReaderState7decoder:
  324|  4.60M|    pub const fn decoder(&self) -> Decoder {
  325|  4.60M|        Decoder {
  326|  4.60M|            #[cfg(feature = "encoding")]
  327|  4.60M|            encoding: self.encoding.encoding(),
  328|  4.60M|        }
  329|  4.60M|    }
_RNvXs_NtNtCs4QWtT85WPeh_9quick_xml6reader5stateNtB4_11ReaderStateNtNtCscdEvteftVc2_4core7default7Default7default:
  333|  81.2k|    fn default() -> Self {
  334|  81.2k|        Self {
  335|  81.2k|            offset: 0,
  336|  81.2k|            last_error_offset: 0,
  337|  81.2k|            state: ParseState::Init,
  338|  81.2k|            config: Config::default(),
  339|  81.2k|            opened_buffer: Vec::new(),
  340|  81.2k|            opened_starts: Vec::new(),
  341|  81.2k|
  342|  81.2k|            #[cfg(feature = "encoding")]
  343|  81.2k|            encoding: EncodingRef::Implicit(UTF_8),
  344|  81.2k|        }
  345|  81.2k|    }

_RNvNtCs4QWtT85WPeh_9quick_xml5utils17write_byte_string:
   32|  8.73k|pub fn write_byte_string(f: &mut Formatter, byte_string: &[u8]) -> fmt::Result {
   33|  8.73k|    write!(f, "\"")?;
   34|   103k|    for b in byte_string {
   35|  94.7k|        match *b {
   36|  79.4k|            32..=33 | 35..=126 => write!(f, "{}", *b as char)?,
   37|    837|            34 => write!(f, "\\\"")?,
   38|  19.0k|            _ => write!(f, "{:#02X}", b)?,
   39|       |        }
   40|       |    }
   41|  8.73k|    write!(f, "\"")?;
   42|  8.73k|    Ok(())
   43|  8.73k|}
_RNvNtCs4QWtT85WPeh_9quick_xml5utils13is_whitespaceB3_:
  278|  31.8M|pub const fn is_whitespace(b: u8) -> bool {
  279|  31.8M|    matches!(b, b' ' | b'\r' | b'\n' | b'\t')
  280|  31.8M|}
_RNvNtCs4QWtT85WPeh_9quick_xml5utils8name_lenB3_:
  287|  1.81M|pub const fn name_len(mut bytes: &[u8]) -> usize {
  288|  1.81M|    // Note: A pattern matching based approach (instead of indexing) allows
  289|  1.81M|    // making the function const.
  290|  1.81M|    let mut len = 0;
  291|  11.9M|    while let [first, rest @ ..] = bytes {
  292|  10.8M|        if is_whitespace(*first) {
  293|   652k|            break;
  294|  10.1M|        }
  295|  10.1M|        len += 1;
  296|  10.1M|        bytes = rest;
  297|       |    }
  298|  1.81M|    len
  299|  1.81M|}

_RNvMNtCs4QWtT85WPeh_9quick_xml6writerINtB2_6WriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE15new_with_indentCs2kjnqOcnWhU_7rdf_xml:
   80|  39.9k|    pub fn new_with_indent(inner: W, indent_char: u8, indent_size: usize) -> Writer<W> {
   81|  39.9k|        Writer {
   82|  39.9k|            writer: inner,
   83|  39.9k|            indent: Some(Indentation::new(indent_char, indent_size)),
   84|  39.9k|        }
   85|  39.9k|    }
_RINvMs_NtCs4QWtT85WPeh_9quick_xml6writerINtB5_6WriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE11write_eventNtNtB7_6events5EventECs4sYt0urF4vM_8oxrdfxml:
  195|   957k|    pub fn write_event<'a, E: Into<Event<'a>>>(&mut self, event: E) -> Result<()> {
  196|   957k|        let mut next_should_line_break = true;
  197|   957k|        let result = match event.into() {
  198|   428k|            Event::Start(e) => {
  199|   428k|                let result = self.write_wrapped(b"<", &e, b">");
  200|   428k|                if let Some(i) = self.indent.as_mut() {
  201|   396k|                    i.grow();
  202|   396k|                }
  203|   428k|                result
  204|       |            }
  205|   404k|            Event::End(e) => {
  206|   404k|                if let Some(i) = self.indent.as_mut() {
  207|   396k|                    i.shrink();
  208|   396k|                }
  209|   404k|                self.write_wrapped(b"</", &e, b">")
  210|       |            }
  211|  12.5k|            Event::Empty(e) => self.write_wrapped(b"<", &e, b"/>"),
  212|  72.5k|            Event::Text(e) => {
  213|  72.5k|                next_should_line_break = false;
  214|  72.5k|                self.write(&e)
  215|       |            }
  216|      0|            Event::Comment(e) => self.write_wrapped(b"<!--", &e, b"-->"),
  217|      0|            Event::CData(e) => {
  218|      0|                next_should_line_break = false;
  219|      0|                self.write(b"<![CDATA[")?;
  220|      0|                self.write(&e)?;
  221|      0|                self.write(b"]]>")
  222|       |            }
  223|  39.9k|            Event::Decl(e) => self.write_wrapped(b"<?", &e, b"?>"),
  224|      0|            Event::PI(e) => self.write_wrapped(b"<?", &e, b"?>"),
  225|      0|            Event::DocType(e) => self.write_wrapped(b"<!DOCTYPE ", &e, b">"),
  226|      0|            Event::Eof => Ok(()),
  227|       |        };
  228|   957k|        if let Some(i) = self.indent.as_mut() {
  229|   898k|            i.should_line_break = next_should_line_break;
  230|   898k|        }
  231|   957k|        result
  232|   957k|    }
_RNvMNtCs4QWtT85WPeh_9quick_xml6writerINtB2_6WriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE10into_innerCs4sYt0urF4vM_8oxrdfxml:
   88|  39.9k|    pub fn into_inner(self) -> W {
   89|  39.9k|        self.writer
   90|  39.9k|    }
_RNvMNtCs4QWtT85WPeh_9quick_xml6writerINtB2_6WriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE3newCs4sYt0urF4vM_8oxrdfxml:
   72|  2.10k|    pub const fn new(inner: W) -> Writer<W> {
   73|  2.10k|        Writer {
   74|  2.10k|            writer: inner,
   75|  2.10k|            indent: None,
   76|  2.10k|        }
   77|  2.10k|    }
_RNvMs_NtCs4QWtT85WPeh_9quick_xml6writerINtB4_6WriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE13write_wrappedCs4sYt0urF4vM_8oxrdfxml:
  241|   885k|    fn write_wrapped(&mut self, before: &[u8], value: &[u8], after: &[u8]) -> Result<()> {
  242|   885k|        if let Some(ref i) = self.indent {
  243|   846k|            if i.should_line_break {
  244|   753k|                self.writer.write_all(b"\n")?;
  245|   753k|                self.writer.write_all(i.current())?;
  246|  92.2k|            }
  247|  38.9k|        }
  248|   885k|        self.write(before)?;
  249|   885k|        self.write(value)?;
  250|   885k|        self.write(after)?;
  251|   885k|        Ok(())
  252|   885k|    }
_RNvMs_NtCs4QWtT85WPeh_9quick_xml6writerINtB4_6WriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE5writeCs4sYt0urF4vM_8oxrdfxml:
  236|  2.72M|    pub(crate) fn write(&mut self, value: &[u8]) -> Result<()> {
  237|  2.72M|        self.writer.write_all(value).map_err(Into::into)
  238|  2.72M|    }
_RNvMs2_NtCs4QWtT85WPeh_9quick_xml6writerNtB5_11Indentation3new:
  611|  39.9k|    pub fn new(indent_char: u8, indent_size: usize) -> Self {
  612|  39.9k|        Self {
  613|  39.9k|            should_line_break: false,
  614|  39.9k|            indent_char,
  615|  39.9k|            indent_size,
  616|  39.9k|            indents: vec![indent_char; 128],
  617|  39.9k|            current_indent_len: 0, // invariant - needs to remain less than indents.len()
  618|  39.9k|        }
  619|  39.9k|    }
_RNvMs2_NtCs4QWtT85WPeh_9quick_xml6writerNtB5_11Indentation4grow:
  622|   396k|    pub fn grow(&mut self) {
  623|   396k|        self.current_indent_len += self.indent_size;
  624|   396k|        self.ensure(self.current_indent_len);
  625|   396k|    }
_RNvMs2_NtCs4QWtT85WPeh_9quick_xml6writerNtB5_11Indentation6shrink:
  628|   396k|    pub fn shrink(&mut self) {
  629|   396k|        self.current_indent_len = self.current_indent_len.saturating_sub(self.indent_size);
  630|   396k|    }
_RNvMs2_NtCs4QWtT85WPeh_9quick_xml6writerNtB5_11Indentation7current:
  633|   753k|    pub fn current(&self) -> &[u8] {
  634|   753k|        &self.indents[..self.current_indent_len]
  635|   753k|    }
_RNvMs2_NtCs4QWtT85WPeh_9quick_xml6writerNtB5_11Indentation6ensure:
  644|   396k|    fn ensure(&mut self, new_len: usize) {
  645|   396k|        if self.indents.len() < new_len {
  646|      0|            self.indents.resize(new_len, self.indent_char);
  647|   396k|        }
  648|   396k|    }

_RINvXs2_NtNtCscp4ngNs6yIk_4rand13distributions7integerNtB8_8StandardINtNtB8_12distribution12DistributionoE6sampleNtNtNtBa_4rngs6thread9ThreadRngECs4sYt0urF4vM_8oxrdfxml:
   51|   723k|    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u128 {
   52|   723k|        // Use LE; we explicitly generate one value before the next.
   53|   723k|        let x = u128::from(rng.next_u64());
   54|   723k|        let y = u128::from(rng.next_u64());
   55|   723k|        (y << 64) | x
   56|   723k|    }

_RINvCscp4ngNs6yIk_4rand6randomoECs4sYt0urF4vM_8oxrdfxml:
  183|   723k|pub fn random<T>() -> T
  184|   723k|where Standard: Distribution<T> {
  185|   723k|    thread_rng().gen()
  186|   723k|}

_RINvYNtNtNtCscp4ngNs6yIk_4rand4rngs6thread9ThreadRngNtNtB9_3rng3Rng3genoECs4sYt0urF4vM_8oxrdfxml:
   93|   723k|    fn gen<T>(&mut self) -> T
   94|   723k|    where Standard: Distribution<T> {
   95|   723k|        Standard.sample(self)
   96|   723k|    }

_RNvXs_NtNtNtCscp4ngNs6yIk_4rand4rngs7adapter9reseedingINtB4_12ReseedingRngNtNtCs9UY6Ucr4wbE_11rand_chacha6chacha12ChaCha12CoreNtNtCsaHtvKV6mKDH_9rand_core2os5OsRngENtB24_7RngCore8next_u64Cs4sYt0urF4vM_8oxrdfxml:
  124|  1.44M|    fn next_u64(&mut self) -> u64 {
  125|  1.44M|        self.0.next_u64()
  126|  1.44M|    }
_RNvMNtNtNtCscp4ngNs6yIk_4rand4rngs7adapter9reseedingINtB2_12ReseedingRngNtNtCs9UY6Ucr4wbE_11rand_chacha6chacha12ChaCha12CoreNtNtCsaHtvKV6mKDH_9rand_core2os5OsRngE3newB8_:
  101|      1|    pub fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  102|      1|        ReseedingRng(BlockRng::new(ReseedingCore::new(rng, threshold, reseeder)))
  103|      1|    }
_RNvXs2_NtNtNtCscp4ngNs6yIk_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs9UY6Ucr4wbE_11rand_chacha6chacha12ChaCha12CoreNtNtCsaHtvKV6mKDH_9rand_core2os5OsRngENtNtB26_5block12BlockRngCore8generateBb_:
  173|  45.2k|    fn generate(&mut self, results: &mut Self::Results) {
  174|  45.2k|        let global_fork_counter = fork::get_fork_counter();
  175|  45.2k|        if self.bytes_until_reseed <= 0 || self.is_forked(global_fork_counter) {
  176|       |            // We get better performance by not calling only `reseed` here
  177|       |            // and continuing with the rest of the function, but by directly
  178|       |            // returning from a non-inlined function.
  179|    176|            return self.reseed_and_generate(results, global_fork_counter);
  180|  45.0k|        }
  181|  45.0k|        let num_bytes = results.as_ref().len() * size_of::<Self::Item>();
  182|  45.0k|        self.bytes_until_reseed -= num_bytes as i64;
  183|  45.0k|        self.inner.generate(results);
  184|  45.2k|    }
_RNvMs3_NtNtNtCscp4ngNs6yIk_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs9UY6Ucr4wbE_11rand_chacha6chacha12ChaCha12CoreNtNtCsaHtvKV6mKDH_9rand_core2os5OsRngE3newBb_:
  193|      1|    fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  194|      1|        use ::core::i64::MAX;
  195|      1|        fork::register_fork_handler();
  196|       |
  197|       |        // Because generating more values than `i64::MAX` takes centuries on
  198|       |        // current hardware, we just clamp to that value.
  199|       |        // Also we set a threshold of 0, which indicates no limit, to that
  200|       |        // value.
  201|      1|        let threshold = if threshold == 0 {
  202|      0|            MAX
  203|      1|        } else if threshold <= MAX as u64 {
  204|      1|            threshold as i64
  205|       |        } else {
  206|      0|            MAX
  207|       |        };
  208|       |
  209|      1|        ReseedingCore {
  210|      1|            inner: rng,
  211|      1|            reseeder,
  212|      1|            threshold: threshold as i64,
  213|      1|            bytes_until_reseed: threshold as i64,
  214|      1|            fork_counter: 0,
  215|      1|        }
  216|      1|    }
_RNvMs3_NtNtNtCscp4ngNs6yIk_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs9UY6Ucr4wbE_11rand_chacha6chacha12ChaCha12CoreNtNtCsaHtvKV6mKDH_9rand_core2os5OsRngE6reseedBb_:
  219|    176|    fn reseed(&mut self) -> Result<(), Error> {
  220|    176|        R::from_rng(&mut self.reseeder).map(|result| {
  221|       |            self.bytes_until_reseed = self.threshold;
  222|       |            self.inner = result
  223|    176|        })
  224|    176|    }
_RNCNvMs3_NtNtNtCscp4ngNs6yIk_4rand4rngs7adapter9reseedingINtB7_13ReseedingCoreNtNtCs9UY6Ucr4wbE_11rand_chacha6chacha12ChaCha12CoreNtNtCsaHtvKV6mKDH_9rand_core2os5OsRngE6reseed0Bd_:
  220|    176|        R::from_rng(&mut self.reseeder).map(|result| {
  221|    176|            self.bytes_until_reseed = self.threshold;
  222|    176|            self.inner = result
  223|    176|        })
_RNvMs3_NtNtNtCscp4ngNs6yIk_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs9UY6Ucr4wbE_11rand_chacha6chacha12ChaCha12CoreNtNtCsaHtvKV6mKDH_9rand_core2os5OsRngE9is_forkedBb_:
  226|  45.2k|    fn is_forked(&self, global_fork_counter: usize) -> bool {
  227|  45.2k|        // In theory, on 32-bit platforms, it is possible for
  228|  45.2k|        // `global_fork_counter` to wrap around after ~4e9 forks.
  229|  45.2k|        //
  230|  45.2k|        // This check will detect a fork in the normal case where
  231|  45.2k|        // `fork_counter < global_fork_counter`, and also when the difference
  232|  45.2k|        // between both is greater than `isize::MAX` (wrapped around).
  233|  45.2k|        //
  234|  45.2k|        // It will still fail to detect a fork if there have been more than
  235|  45.2k|        // `isize::MAX` forks, without any reseed in between. Seems unlikely
  236|  45.2k|        // enough.
  237|  45.2k|        (self.fork_counter.wrapping_sub(global_fork_counter) as isize) < 0
  238|  45.2k|    }
_RNvMs3_NtNtNtCscp4ngNs6yIk_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs9UY6Ucr4wbE_11rand_chacha6chacha12ChaCha12CoreNtNtCsaHtvKV6mKDH_9rand_core2os5OsRngE19reseed_and_generateBb_:
  241|    176|    fn reseed_and_generate(
  242|    176|        &mut self, results: &mut <Self as BlockRngCore>::Results, global_fork_counter: usize,
  243|    176|    ) {
  244|    176|        #![allow(clippy::if_same_then_else)] // false positive
  245|    176|        if self.is_forked(global_fork_counter) {
  246|      0|            info!("Fork detected, reseeding RNG");
  247|    176|        } else {
  248|    176|            trace!("Reseeding RNG (periodic reseed)");
  249|    176|        }
  250|       |
  251|    176|        let num_bytes = results.as_ref().len() * size_of::<<R as BlockRngCore>::Item>();
  252|       |
  253|    176|        if let Err(e) = self.reseed() {
  254|      0|            warn!("Reseeding RNG failed: {}", e);
  255|      0|            let _ = e;
  256|    176|        }
  257|    176|        self.fork_counter = global_fork_counter;
  258|    176|
  259|    176|        self.bytes_until_reseed = self.threshold - num_bytes as i64;
  260|    176|        self.inner.generate(results);
  261|    176|    }
_RNvNtNtNtNtCscp4ngNs6yIk_4rand4rngs7adapter9reseeding4fork16get_fork_counter:
  307|  45.2k|    pub fn get_fork_counter() -> usize {
  308|  45.2k|        RESEEDING_RNG_FORK_COUNTER.load(Ordering::Relaxed)
  309|  45.2k|    }
_RNvNtNtNtNtCscp4ngNs6yIk_4rand4rngs7adapter9reseeding4fork21register_fork_handler:
  317|      1|    pub fn register_fork_handler() {
  318|      1|        static REGISTER: Once = Once::new();
  319|      1|        REGISTER.call_once(|| {
  320|       |            // Bump the counter before and after forking (see #1169):
  321|       |            let ret = unsafe { libc::pthread_atfork(
  322|       |                Some(fork_handler),
  323|       |                Some(fork_handler),
  324|       |                Some(fork_handler),
  325|       |            ) };
  326|       |            if ret != 0 {
  327|       |                panic!("libc::pthread_atfork failed with code {}", ret);
  328|       |            }
  329|      1|        });
  330|      1|    }
_RNCNvNtNtNtNtCscp4ngNs6yIk_4rand4rngs7adapter9reseeding4fork21register_fork_handler0Bb_:
  319|      1|        REGISTER.call_once(|| {
  320|      1|            // Bump the counter before and after forking (see #1169):
  321|      1|            let ret = unsafe { libc::pthread_atfork(
  322|      1|                Some(fork_handler),
  323|      1|                Some(fork_handler),
  324|      1|                Some(fork_handler),
  325|      1|            ) };
  326|      1|            if ret != 0 {
  327|      0|                panic!("libc::pthread_atfork failed with code {}", ret);
  328|      1|            }
  329|      1|        });

_RNvXs_NtNtCscp4ngNs6yIk_4rand4rngs6threadNtB4_9ThreadRngNtCsaHtvKV6mKDH_9rand_core7RngCore8next_u64:
  109|  1.44M|    fn next_u64(&mut self) -> u64 {
  110|  1.44M|        // SAFETY: We must make sure to stop using `rng` before anyone else
  111|  1.44M|        // creates another mutable reference
  112|  1.44M|        let rng = unsafe { &mut *self.rng.get() };
  113|  1.44M|        rng.next_u64()
  114|  1.44M|    }
_RNvNtNtCscp4ngNs6yIk_4rand4rngs6thread10thread_rng:
   88|   723k|pub fn thread_rng() -> ThreadRng {
   89|   723k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
   90|   723k|    ThreadRng { rng }
   91|   723k|}
_RNCNvNtNtCscp4ngNs6yIk_4rand4rngs6thread10thread_rng0B7_:
   89|   723k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());

_RNvXsl_NtCs9UY6Ucr4wbE_11rand_chacha6chachaNtB5_12ChaCha12CoreNtNtCsaHtvKV6mKDH_9rand_core5block12BlockRngCore8generateCscp4ngNs6yIk_4rand:
   89|  45.2k|            fn generate(&mut self, r: &mut Self::Results) {
   90|  45.2k|                // Fill slice of words by writing to equivalent slice of bytes, then fixing endianness.
   91|  45.2k|                self.state.refill4($rounds, unsafe {
   92|  45.2k|                    &mut *(&mut *r as *mut Array64<u32> as *mut [u8; 256])
   93|  45.2k|                });
   94|  2.89M|                for x in r.as_mut() {
   95|  2.89M|                    *x = x.to_le();
   96|  2.89M|                }
   97|  45.2k|            }
_RNvXsm_NtCs9UY6Ucr4wbE_11rand_chacha6chachaNtB5_12ChaCha12CoreNtCsaHtvKV6mKDH_9rand_core11SeedableRng9from_seedCscp4ngNs6yIk_4rand:
  103|    177|            fn from_seed(seed: Self::Seed) -> Self {
  104|    177|                $ChaChaXCore { state: ChaCha::new(&seed, &[0u8; 8]) }
  105|    177|            }
_RNvXs_NtCs9UY6Ucr4wbE_11rand_chacha6chachaINtB4_7Array64mEINtNtCscdEvteftVc2_4core7convert5AsRefSmE6as_refB6_:
   46|  2.98M|    fn as_ref(&self) -> &[T] {
   47|  2.98M|        &self.0
   48|  2.98M|    }
_RNvXs0_NtCs9UY6Ucr4wbE_11rand_chacha6chachaINtB5_7Array64mEINtNtCscdEvteftVc2_4core7convert5AsMutSmE6as_mutB7_:
   51|  45.2k|    fn as_mut(&mut self) -> &mut [T] {
   52|  45.2k|        &mut self.0
   53|  45.2k|    }
_RNvXNtCs9UY6Ucr4wbE_11rand_chacha6chachaINtB2_7Array64mENtNtCscdEvteftVc2_4core7default7Default7defaultB4_:
   32|      1|    fn default() -> Self {
   33|      1|        Self([
   34|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   35|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   36|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   37|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   38|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   39|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   40|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   41|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   42|      1|        ])
   43|      1|    }

_RNvMNtCs9UY6Ucr4wbE_11rand_chacha4gutsNtB2_6ChaCha3new:
   72|    177|    pub fn new(key: &[u8; 32], nonce: &[u8]) -> Self {
   73|    177|        init_chacha(key, nonce)
   74|    177|    }
_RNvMNtCs9UY6Ucr4wbE_11rand_chacha4gutsNtB2_6ChaCha7refill4:
   84|  45.2k|    pub fn refill4(&mut self, drounds: u32, out: &mut [u8; BUFSZ]) {
   85|  45.2k|        refill_wide(self, drounds, out)
   86|  45.2k|    }
_RINvNtCs9UY6Ucr4wbE_11rand_chacha4guts5roundINtNtCscXEpi1jYvvk_10ppv_lite864soft2x2INtNtNtNtBL_6x86_644sse24avx212u32x4x2_avx2NtB1q_4NoNIENtB1o_2G0EEB4_:
   43|   542k|pub(crate) fn round<V: ArithOps + BitOps32>(mut x: State<V>) -> State<V> {
   44|   542k|    x.a += x.b;
   45|   542k|    x.d = (x.d ^ x.a).rotate_each_word_right16();
   46|   542k|    x.c += x.d;
   47|   542k|    x.b = (x.b ^ x.c).rotate_each_word_right20();
   48|   542k|    x.a += x.b;
   49|   542k|    x.d = (x.d ^ x.a).rotate_each_word_right24();
   50|   542k|    x.c += x.d;
   51|   542k|    x.b = (x.b ^ x.c).rotate_each_word_right25();
   52|   542k|    x
   53|   542k|}
_RINvNtCs9UY6Ucr4wbE_11rand_chacha4guts11diagonalizeINtNtCscXEpi1jYvvk_10ppv_lite864soft2x2INtNtNtNtBS_6x86_644sse24avx212u32x4x2_avx2NtB1x_4NoNIENtB1v_2G0EEB4_:
   56|   271k|pub(crate) fn diagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   57|   271k|    x.b = x.b.shuffle_lane_words3012();
   58|   271k|    x.c = x.c.shuffle_lane_words2301();
   59|   271k|    x.d = x.d.shuffle_lane_words1230();
   60|   271k|    x
   61|   271k|}
_RINvNtCs9UY6Ucr4wbE_11rand_chacha4guts13undiagonalizeINtNtCscXEpi1jYvvk_10ppv_lite864soft2x2INtNtNtNtBU_6x86_644sse24avx212u32x4x2_avx2NtB1z_4NoNIENtB1x_2G0EEB4_:
   63|   271k|pub(crate) fn undiagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   64|   271k|    x.b = x.b.shuffle_lane_words1230();
   65|   271k|    x.c = x.c.shuffle_lane_words2301();
   66|   271k|    x.d = x.d.shuffle_lane_words3012();
   67|   271k|    x
   68|   271k|}
_RINvMNtCs9UY6Ucr4wbE_11rand_chacha4gutsNtB3_6ChaCha5pos64INtNtCscXEpi1jYvvk_10ppv_lite866x86_6411Avx2MachineNtBW_4NoNIEEB5_:
   77|  90.4k|    fn pos64<M: Machine>(&self, m: M) -> u64 {
   78|  90.4k|        let d: M::u32x4 = m.unpack(self.d);
   79|  90.4k|        ((d.extract(1) as u64) << 32) | d.extract(0) as u64
   80|  90.4k|    }
_RINvNtCs9UY6Ucr4wbE_11rand_chacha4guts16refill_wide_implINtNtCscXEpi1jYvvk_10ppv_lite866x86_6411Avx2MachineNtBV_4NoNIEEB4_:
  116|  45.2k|fn refill_wide_impl<Mach: Machine>(
  117|  45.2k|    m: Mach, state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ],
  118|  45.2k|) {
  119|  45.2k|    let k = m.vec([0x6170_7865, 0x3320_646e, 0x7962_2d32, 0x6b20_6574]);
  120|  45.2k|    let mut pos = state.pos64(m);
  121|  45.2k|    let d0: Mach::u32x4 = m.unpack(state.d);
  122|  45.2k|    pos = pos.wrapping_add(1);
  123|  45.2k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  124|  45.2k|    pos = pos.wrapping_add(1);
  125|  45.2k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  126|  45.2k|    pos = pos.wrapping_add(1);
  127|  45.2k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  128|  45.2k|
  129|  45.2k|    let b = m.unpack(state.b);
  130|  45.2k|    let c = m.unpack(state.c);
  131|  45.2k|    let mut x = State {
  132|  45.2k|        a: Mach::u32x4x4::from_lanes([k, k, k, k]),
  133|  45.2k|        b: Mach::u32x4x4::from_lanes([b, b, b, b]),
  134|  45.2k|        c: Mach::u32x4x4::from_lanes([c, c, c, c]),
  135|  45.2k|        d: m.unpack(Mach::u32x4x4::from_lanes([d0, d1, d2, d3]).into()),
  136|  45.2k|    };
  137|   271k|    for _ in 0..drounds {
  138|   271k|        x = round(x);
  139|   271k|        x = undiagonalize(round(diagonalize(x)));
  140|   271k|    }
  141|  45.2k|    let mut pos = state.pos64(m);
  142|  45.2k|    let d0: Mach::u32x4 = m.unpack(state.d);
  143|  45.2k|    pos = pos.wrapping_add(1);
  144|  45.2k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  145|  45.2k|    pos = pos.wrapping_add(1);
  146|  45.2k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  147|  45.2k|    pos = pos.wrapping_add(1);
  148|  45.2k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  149|  45.2k|    pos = pos.wrapping_add(1);
  150|  45.2k|    let d4 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  151|  45.2k|
  152|  45.2k|    let (a, b, c, d) = (
  153|  45.2k|        x.a.to_lanes(),
  154|  45.2k|        x.b.to_lanes(),
  155|  45.2k|        x.c.to_lanes(),
  156|  45.2k|        x.d.to_lanes(),
  157|  45.2k|    );
  158|  45.2k|    let sb = m.unpack(state.b);
  159|  45.2k|    let sc = m.unpack(state.c);
  160|  45.2k|    let sd = [m.unpack(state.d), d1, d2, d3];
  161|  45.2k|    state.d = d4.into();
  162|  45.2k|    let mut words = out.chunks_exact_mut(16);
  163|   180k|    for ((((&a, &b), &c), &d), &sd) in a.iter().zip(&b).zip(&c).zip(&d).zip(&sd) {
  164|   180k|        (a + k).write_le(words.next().unwrap());
  165|   180k|        (b + sb).write_le(words.next().unwrap());
  166|   180k|        (c + sc).write_le(words.next().unwrap());
  167|   180k|        (d + sd).write_le(words.next().unwrap());
  168|   180k|    }
  169|  45.2k|}
_RNvNtCs9UY6Ucr4wbE_11rand_chacha4guts10read_u32le:
  229|    354|fn read_u32le(xs: &[u8]) -> u32 {
  230|    354|    assert_eq!(xs.len(), 4);
  231|    354|    u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24)
  232|    354|}
_RINvNvNtCs9UY6Ucr4wbE_11rand_chacha4guts11refill_wide7fn_implINtNtCscXEpi1jYvvk_10ppv_lite866x86_6411Avx2MachineNtB10_4NoNIEEB6_:
  172|  45.2k|    fn refill_wide(state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ]) {
  173|  45.2k|        refill_wide_impl(m, state, drounds, out);
  174|  45.2k|    }
_RINvNvNtCs9UY6Ucr4wbE_11rand_chacha4guts11init_chacha7fn_implINtNtCscXEpi1jYvvk_10ppv_lite866x86_6410SseMachineNtB10_5YesS3NtB10_5YesS4NtB10_4NoNIEEB6_:
  235|    177|    fn init_chacha(key: &[u8; 32], nonce: &[u8]) -> ChaCha {
  236|    177|        let ctr_nonce = [
  237|       |            0,
  238|    177|            if nonce.len() == 12 {
  239|      0|                read_u32le(&nonce[0..4])
  240|       |            } else {
  241|    177|                0
  242|       |            },
  243|    177|            read_u32le(&nonce[nonce.len() - 8..nonce.len() - 4]),
  244|    177|            read_u32le(&nonce[nonce.len() - 4..]),
  245|    177|        ];
  246|    177|        let key0: Mach::u32x4 = m.read_le(&key[..16]);
  247|    177|        let key1: Mach::u32x4 = m.read_le(&key[16..]);
  248|    177|        ChaCha {
  249|    177|            b: key0.into(),
  250|    177|            c: key1.into(),
  251|    177|            d: ctr_nonce.into(),
  252|    177|        }

_RNCNvXs0_NtCsaHtvKV6mKDH_9rand_core5blockINtB7_8BlockRngINtNtNtNtCscp4ngNs6yIk_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs9UY6Ucr4wbE_11rand_chacha6chacha12ChaCha12CoreNtNtB9_2os5OsRngEENtB9_7RngCore8next_u640Cs4sYt0urF4vM_8oxrdfxml:
  198|  1.44M|        let read_u64 = |results: &[u32], index| {
  199|  1.44M|            let data = &results[index..=index + 1];
  200|  1.44M|            u64::from(data[1]) << 32 | u64::from(data[0])
  201|  1.44M|        };
_RNvXs0_NtCsaHtvKV6mKDH_9rand_core5blockINtB5_8BlockRngINtNtNtNtCscp4ngNs6yIk_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs9UY6Ucr4wbE_11rand_chacha6chacha12ChaCha12CoreNtNtB7_2os5OsRngEENtB7_7RngCore8next_u64Cs4sYt0urF4vM_8oxrdfxml:
  197|  1.44M|    fn next_u64(&mut self) -> u64 {
  198|  1.44M|        let read_u64 = |results: &[u32], index| {
  199|       |            let data = &results[index..=index + 1];
  200|       |            u64::from(data[1]) << 32 | u64::from(data[0])
  201|       |        };
  202|       |
  203|  1.44M|        let len = self.results.as_ref().len();
  204|  1.44M|
  205|  1.44M|        let index = self.index;
  206|  1.44M|        if index < len - 1 {
  207|  1.40M|            self.index += 2;
  208|  1.40M|            // Read an u64 from the current index
  209|  1.40M|            read_u64(self.results.as_ref(), index)
  210|  45.2k|        } else if index >= len {
  211|  45.2k|            self.generate_and_set(2);
  212|  45.2k|            read_u64(self.results.as_ref(), 0)
  213|       |        } else {
  214|      0|            let x = u64::from(self.results.as_ref()[len - 1]);
  215|      0|            self.generate_and_set(1);
  216|      0|            let y = u64::from(self.results.as_ref()[0]);
  217|      0|            (y << 32) | x
  218|       |        }
  219|  1.44M|    }
_RNvMs_NtCsaHtvKV6mKDH_9rand_core5blockINtB4_8BlockRngINtNtNtNtCscp4ngNs6yIk_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs9UY6Ucr4wbE_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE16generate_and_setBY_:
  174|  45.2k|    pub fn generate_and_set(&mut self, index: usize) {
  175|  45.2k|        assert!(index < self.results.as_ref().len());
  176|  45.2k|        self.core.generate(&mut self.results);
  177|  45.2k|        self.index = index;
  178|  45.2k|    }
_RNvMs_NtCsaHtvKV6mKDH_9rand_core5blockINtB4_8BlockRngINtNtNtNtCscp4ngNs6yIk_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs9UY6Ucr4wbE_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE3newBY_:
  145|      1|    pub fn new(core: R) -> BlockRng<R> {
  146|      1|        let results_empty = R::Results::default();
  147|      1|        BlockRng {
  148|      1|            core,
  149|      1|            index: results_empty.as_ref().len(),
  150|      1|            results: results_empty,
  151|      1|        }
  152|      1|    }

_RINvYNtNtCs9UY6Ucr4wbE_11rand_chacha6chacha12ChaCha12CoreNtCsaHtvKV6mKDH_9rand_core11SeedableRng8from_rngNtNtBV_2os5OsRngECscp4ngNs6yIk_4rand:
  390|      1|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|      1|        let mut seed = Self::Seed::default();
  392|      1|        rng.try_fill_bytes(seed.as_mut())?;
  393|      1|        Ok(Self::from_seed(seed))
  394|      1|    }
_RINvYNtNtCs9UY6Ucr4wbE_11rand_chacha6chacha12ChaCha12CoreNtCsaHtvKV6mKDH_9rand_core11SeedableRng8from_rngQNtNtBV_2os5OsRngECscp4ngNs6yIk_4rand:
  390|    176|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|    176|        let mut seed = Self::Seed::default();
  392|    176|        rng.try_fill_bytes(seed.as_mut())?;
  393|    176|        Ok(Self::from_seed(seed))
  394|    176|    }
_RNvXs_CsaHtvKV6mKDH_9rand_coreQNtNtB4_2os5OsRngNtB4_7RngCore14try_fill_bytesCscp4ngNs6yIk_4rand:
  441|    176|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
  442|    176|        (**self).try_fill_bytes(dest)
  443|    176|    }

_RNvXs_NtCsaHtvKV6mKDH_9rand_core2osNtB4_5OsRngNtB6_7RngCore14try_fill_bytes:
   67|    177|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
   68|    177|        getrandom(dest)?;
   69|    177|        Ok(())
   70|    177|    }

_RNvXNtCs5bAalg3UUEX_9thiserror7displayRNtNtCs3OstG5Tqy1X_5alloc6string6StringNtB2_9AsDisplay10as_displayCs1JxAZnM7jd_5oxrdf:
   19|   773k|    fn as_display(&'a self) -> Self::Target {
   20|   773k|        *self
   21|   773k|    }
_RNvXNtCs5bAalg3UUEX_9thiserror7displayRNtCs8SDT0Q3242W_5oxiri13IriParseErrorNtB2_9AsDisplay10as_displayCs1JxAZnM7jd_5oxrdf:
   19|   148k|    fn as_display(&'a self) -> Self::Target {
   20|   148k|        *self
   21|   148k|    }

_RNvNvNtNtCscp4ngNs6yIk_4rand4rngs6thread14THREAD_RNG_KEY6___initB7_:
   82|      1|            fn __init() -> $t { $init }
_RNvNvNtNtCscp4ngNs6yIk_4rand4rngs6thread14THREAD_RNG_KEY7___getitB7_:
   85|   723k|            unsafe fn __getit(
   86|   723k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   87|   723k|            ) -> $crate::option::Option<&'static $t> {
   88|   723k|                #[thread_local]
   89|   723k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   90|   723k|                    $crate::thread::local_impl::Key::<$t>::new();
   91|   723k|
   92|   723k|                unsafe {
   93|   723k|                    __KEY.get(move || {
   94|       |                        if let $crate::option::Option::Some(init) = init {
   95|       |                            if let $crate::option::Option::Some(value) = init.take() {
   96|       |                                return value;
   97|       |                            } else if $crate::cfg!(debug_assertions) {
   98|       |                                $crate::unreachable!("missing default value");
   99|       |                            }
  100|       |                        }
  101|       |                        __init()
  102|   723k|                    })
  103|   723k|                }
  104|   723k|            }
_RNCNvNvNtNtCscp4ngNs6yIk_4rand4rngs6thread14THREAD_RNG_KEY7___getit0B9_:
   93|      1|                    __KEY.get(move || {
   94|      1|                        if let $crate::option::Option::Some(init) = init {
   95|      0|                            if let $crate::option::Option::Some(value) = init.take() {
   96|      0|                                return value;
   97|      0|                            } else if $crate::cfg!(debug_assertions) {
   98|      0|                                $crate::unreachable!("missing default value");
   99|      0|                            }
  100|      1|                        }
  101|      1|                        __init()
  102|       |                    })

_RNvCs2kjnqOcnWhU_7rdf_xml5parse:
    8|  41.3k|fn parse(data: &[u8], unchecked: bool) -> (Vec<Triple>, Vec<String>) {
    9|  41.3k|    let mut triples = Vec::new();
   10|  41.3k|    let mut errors = Vec::new();
   11|  41.3k|    let mut parser = RdfXmlParser::new();
   12|  41.3k|    if unchecked {
   13|  1.41k|        parser = parser.unchecked();
   14|  39.9k|    }
   15|  1.98M|    for result in parser.parse_slice(data) {
   16|  1.98M|        match result {
   17|   360k|            Ok(triple) => triples.push(triple),
   18|  1.62M|            Err(error) => errors.push(error.to_string()),
   19|       |        }
   20|       |    }
   21|  41.3k|    (triples, errors)
   22|  41.3k|}
_RNvCs2kjnqOcnWhU_7rdf_xml24count_triple_blank_nodes:
   24|  4.82k|fn count_triple_blank_nodes(triple: &Triple) -> usize {
   25|  4.82k|    (match &triple.subject {
   26|  4.82k|        Subject::BlankNode(_) => 1,
   27|      0|        Subject::Triple(t) => count_triple_blank_nodes(t),
   28|      0|        _ => 0,
   29|  4.82k|    }) + (match &triple.object {
   30|    310|        Term::BlankNode(_) => 1,
   31|      0|        Term::Triple(t) => count_triple_blank_nodes(t),
   32|  4.51k|        _ => 0,
   33|       |    })
   34|  4.82k|}

_RNvMNtCs1JxAZnM7jd_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCs2kjnqOcnWhU_7rdf_xml:
   88|   699k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|   699k|        BlankNodeRef(match &self.0 {
   90|  16.1k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|   683k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|   683k|                id: *id,
   93|   683k|                str: str.as_str(),
   94|   683k|            },
   95|       |        })
   96|   699k|    }
_RNvMs1_NtCs1JxAZnM7jd_5oxrdf10blank_nodeNtB5_12BlankNodeRef10into_ownedCs2kjnqOcnWhU_7rdf_xml:
  207|   302k|    pub fn into_owned(self) -> BlankNode {
  208|   302k|        BlankNode(match self.0 {
  209|  3.91k|            BlankNodeRefContent::Named(id) => BlankNodeContent::Named(id.to_owned()),
  210|   298k|            BlankNodeRefContent::Anonymous { id, .. } => BlankNodeContent::Anonymous {
  211|   298k|                id,
  212|   298k|                str: IdStr::new(u128::from_ne_bytes(id)),
  213|   298k|            },
  214|       |        })
  215|   302k|    }
_RNvMs1_NtCs1JxAZnM7jd_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCs2kjnqOcnWhU_7rdf_xml:
  179|   310k|    pub const fn as_str(self) -> &'a str {
  180|   310k|        match self.0 {
  181|  4.90k|            BlankNodeRefContent::Named(id) => id,
  182|   305k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  183|       |        }
  184|   310k|    }
_RNvMs7_NtCs1JxAZnM7jd_5oxrdf10blank_nodeNtB5_5IdStr3newCs2kjnqOcnWhU_7rdf_xml:
  258|   298k|    fn new(id: u128) -> Self {
  259|   298k|        let mut str = [0; 32];
  260|   298k|        write!(&mut str[..], "{id:x}").unwrap();
  261|   298k|        Self(str)
  262|   298k|    }
_RNvMs7_NtCs1JxAZnM7jd_5oxrdf10blank_nodeNtB5_5IdStr6as_strCs2kjnqOcnWhU_7rdf_xml:
  265|   683k|    fn as_str(&self) -> &str {
  266|   683k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|   683k|        str::from_utf8(&self.0[..len]).unwrap()
  268|   683k|    }
_RNvMs7_NtCs1JxAZnM7jd_5oxrdf10blank_nodeNtB5_5IdStr3newCs4sYt0urF4vM_8oxrdfxml:
  258|   723k|    fn new(id: u128) -> Self {
  259|   723k|        let mut str = [0; 32];
  260|   723k|        write!(&mut str[..], "{id:x}").unwrap();
  261|   723k|        Self(str)
  262|   723k|    }
_RNvMs7_NtCs1JxAZnM7jd_5oxrdf10blank_nodeNtB5_5IdStr6as_strCs4sYt0urF4vM_8oxrdfxml:
  265|   723k|    fn as_str(&self) -> &str {
  266|   723k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|   723k|        str::from_utf8(&self.0[..len]).unwrap()
  268|   723k|    }
_RNvXs0_NtCs1JxAZnM7jd_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCscdEvteftVc2_4core7default7Default7defaultCs4sYt0urF4vM_8oxrdfxml:
  109|   289k|    fn default() -> Self {
  110|       |        // We ensure the ID does not start with a number to be also valid with RDF/XML
  111|   723k|        loop {
  112|   723k|            let id = random();
  113|   723k|            let str = IdStr::new(id);
  114|   723k|            if matches!(str.as_str().as_bytes().first(), Some(b'a'..=b'f')) {
  115|   289k|                return Self(BlankNodeContent::Anonymous {
  116|   289k|                    id: id.to_ne_bytes(),
  117|   289k|                    str,
  118|   289k|                });
  119|   433k|            }
  120|       |        }
  121|   289k|    }
_RINvMNtCs1JxAZnM7jd_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   49|   324k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   50|   324k|        let id = id.into();
   51|   324k|        if let Some(numerical_id) = to_integer_id(&id) {
   52|   312k|            Self::new_from_unique_id(numerical_id)
   53|       |        } else {
   54|  11.4k|            Self(BlankNodeContent::Named(id))
   55|       |        }
   56|   324k|    }
_RNCNvMs7_NtCs1JxAZnM7jd_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  266|  44.6M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
_RNvMNtCs1JxAZnM7jd_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idB4_:
   62|   319k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|   319k|        Self(BlankNodeContent::Anonymous {
   64|   319k|            id: id.to_ne_bytes(),
   65|   319k|            str: IdStr::new(id),
   66|   319k|        })
   67|   319k|    }
_RNvMNtCs1JxAZnM7jd_5oxrdf10blank_nodeNtB2_9BlankNode6as_refB4_:
   88|  8.02k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|  8.02k|        BlankNodeRef(match &self.0 {
   90|      0|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|  8.02k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|  8.02k|                id: *id,
   93|  8.02k|                str: str.as_str(),
   94|  8.02k|            },
   95|       |        })
   96|  8.02k|    }
_RNvMs1_NtCs1JxAZnM7jd_5oxrdf10blank_nodeNtB5_12BlankNodeRef13new_uncheckedB7_:
  166|  4.01k|    pub fn new_unchecked(id: &'a str) -> Self {
  167|  4.01k|        if let Some(numerical_id) = to_integer_id(id) {
  168|  4.01k|            Self(BlankNodeRefContent::Anonymous {
  169|  4.01k|                id: numerical_id.to_ne_bytes(),
  170|  4.01k|                str: id,
  171|  4.01k|            })
  172|       |        } else {
  173|      0|            Self(BlankNodeRefContent::Named(id))
  174|       |        }
  175|  4.01k|    }
_RNvMs1_NtCs1JxAZnM7jd_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strB7_:
  179|  12.7k|    pub const fn as_str(self) -> &'a str {
  180|  12.7k|        match self.0 {
  181|      0|            BlankNodeRefContent::Named(id) => id,
  182|  12.7k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  183|       |        }
  184|  12.7k|    }
_RNvMs1_NtCs1JxAZnM7jd_5oxrdf10blank_nodeNtB5_12BlankNodeRef9unique_idB7_:
  199|  20.1k|    pub const fn unique_id(&self) -> Option<u128> {
  200|  20.1k|        match self.0 {
  201|      0|            BlankNodeRefContent::Named(_) => None,
  202|  20.1k|            BlankNodeRefContent::Anonymous { id, .. } => Some(u128::from_ne_bytes(id)),
  203|       |        }
  204|  20.1k|    }
_RNvMs7_NtCs1JxAZnM7jd_5oxrdf10blank_nodeNtB5_5IdStr3newB7_:
  258|   319k|    fn new(id: u128) -> Self {
  259|   319k|        let mut str = [0; 32];
  260|   319k|        write!(&mut str[..], "{id:x}").unwrap();
  261|   319k|        Self(str)
  262|   319k|    }
_RNvMs7_NtCs1JxAZnM7jd_5oxrdf10blank_nodeNtB5_5IdStr6as_strB7_:
  265|  8.02k|    fn as_str(&self) -> &str {
  266|  8.02k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|  8.02k|        str::from_utf8(&self.0[..len]).unwrap()
  268|  8.02k|    }
_RNvNtCs1JxAZnM7jd_5oxrdf10blank_node13to_integer_idB3_:
  331|   328k|fn to_integer_id(id: &str) -> Option<u128> {
  332|   328k|    let digits = id.as_bytes();
  333|   328k|    let mut value: u128 = 0;
  334|   328k|    if let None | Some(b'0') = digits.first() {
  335|      0|        return None; // No empty string or leading zeros
  336|   328k|    }
  337|  10.1M|    for digit in digits {
  338|  9.86M|        value = value.checked_mul(16)?.checked_add(
  339|  9.86M|            match *digit {
  340|  9.86M|                b'0'..=b'9' => digit - b'0',
  341|  4.03M|                b'a'..=b'f' => digit - b'a' + 10,
  342|  10.2k|                _ => return None,
  343|       |            }
  344|  9.85M|            .into(),
  345|      0|        )?;
  346|       |    }
  347|   316k|    Some(value)
  348|   328k|}

_RINvMsb_NtCs1JxAZnM7jd_5oxrdf7datasetNtB6_12GraphViewMut6insertRNtNtB8_6triple6TripleECs2kjnqOcnWhU_7rdf_xml:
 1371|  7.99k|    pub fn insert<'b>(&mut self, triple: impl Into<TripleRef<'b>>) -> bool {
 1372|  7.99k|        let triple = self.encode_triple(triple.into());
 1373|  7.99k|        self.dataset.insert_encoded((
 1374|  7.99k|            triple.subject,
 1375|  7.99k|            triple.predicate,
 1376|  7.99k|            triple.object,
 1377|  7.99k|            self.graph_name.clone(),
 1378|  7.99k|        ))
 1379|  7.99k|    }
_RINvXsd_NtCs1JxAZnM7jd_5oxrdf7datasetNtB6_12GraphViewMutINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendRNtNtB8_6triple6TripleE6extendINtNtNtB11_5slice4iter4IterB1M_EECs2kjnqOcnWhU_7rdf_xml:
 1509|  2.56k|    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
 1510|  10.5k|        for t in iter {
 1511|  7.99k|            self.insert(t);
 1512|  7.99k|        }
 1513|  2.56k|    }
_RNvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB2_7Dataset4iter:
  169|  1.28k|    pub fn iter(&self) -> Iter<'_> {
  170|  1.28k|        let iter = self.spog.iter();
  171|  1.28k|        Iter {
  172|  1.28k|            dataset: self,
  173|  1.28k|            inner: iter,
  174|  1.28k|        }
  175|  1.28k|    }
_RNvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB2_7Dataset3len:
  350|  2.56k|    pub fn len(&self) -> usize {
  351|  2.56k|        self.gspo.len()
  352|  2.56k|    }
_RNvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB2_7Dataset14insert_encoded:
  365|  15.9k|    fn insert_encoded(
  366|  15.9k|        &mut self,
  367|  15.9k|        quad: (
  368|  15.9k|            InternedSubject,
  369|  15.9k|            InternedNamedNode,
  370|  15.9k|            InternedTerm,
  371|  15.9k|            InternedGraphName,
  372|  15.9k|        ),
  373|  15.9k|    ) -> bool {
  374|  15.9k|        let (s, p, o, g) = quad;
  375|  15.9k|        self.gspo.insert((g.clone(), s.clone(), p, o.clone()));
  376|  15.9k|        self.gpos.insert((g.clone(), p, o.clone(), s.clone()));
  377|  15.9k|        self.gosp.insert((g.clone(), o.clone(), s.clone(), p));
  378|  15.9k|        self.spog.insert((s.clone(), p, o.clone(), g.clone()));
  379|  15.9k|        self.posg.insert((p, o.clone(), s.clone(), g.clone()));
  380|  15.9k|        self.ospg.insert((o, s, p, g))
  381|  15.9k|    }
_RNvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB2_7Dataset5clear:
  411|  2.56k|    pub fn clear(&mut self) {
  412|  2.56k|        self.gspo.clear();
  413|  2.56k|        self.gpos.clear();
  414|  2.56k|        self.gosp.clear();
  415|  2.56k|        self.spog.clear();
  416|  2.56k|        self.posg.clear();
  417|  2.56k|        self.ospg.clear();
  418|  2.56k|    }
_RNvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB2_7Dataset12encoded_quad:
  437|  3.96k|    fn encoded_quad(
  438|  3.96k|        &self,
  439|  3.96k|        quad: QuadRef<'_>,
  440|  3.96k|    ) -> Option<(
  441|  3.96k|        InternedSubject,
  442|  3.96k|        InternedNamedNode,
  443|  3.96k|        InternedTerm,
  444|  3.96k|        InternedGraphName,
  445|  3.96k|    )> {
  446|  3.96k|        Some((
  447|  3.96k|            self.encoded_subject(quad.subject)?,
  448|  3.96k|            self.encoded_named_node(quad.predicate)?,
  449|  3.96k|            self.encoded_term(quad.object)?,
  450|  3.96k|            self.encoded_graph_name(quad.graph_name)?,
  451|       |        ))
  452|  3.96k|    }
_RNvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB2_7Dataset11decode_spog:
  479|  3.96k|    fn decode_spog(
  480|  3.96k|        &self,
  481|  3.96k|        quad: (
  482|  3.96k|            &InternedSubject,
  483|  3.96k|            &InternedNamedNode,
  484|  3.96k|            &InternedTerm,
  485|  3.96k|            &InternedGraphName,
  486|  3.96k|        ),
  487|  3.96k|    ) -> QuadRef<'_> {
  488|  3.96k|        QuadRef {
  489|  3.96k|            subject: quad.0.decode_from(&self.interner),
  490|  3.96k|            predicate: quad.1.decode_from(&self.interner),
  491|  3.96k|            object: quad.2.decode_from(&self.interner),
  492|  3.96k|            graph_name: quad.3.decode_from(&self.interner),
  493|  3.96k|        }
  494|  3.96k|    }
_RNvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB2_7Dataset12canonicalize:
  539|  2.56k|    pub fn canonicalize(&mut self, algorithm: CanonicalizationAlgorithm) {
  540|  2.56k|        let bnode_mapping = self.canonicalize_interned_blank_nodes(algorithm);
  541|  2.56k|        let new_quads = self.map_blank_nodes(&bnode_mapping);
  542|  2.56k|        self.clear();
  543|  10.4k|        for quad in new_quads {
  544|  7.93k|            self.insert_encoded(quad);
  545|  7.93k|        }
  546|  2.56k|    }
_RNvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB2_7Dataset33canonicalize_interned_blank_nodes:
  562|  2.56k|    fn canonicalize_interned_blank_nodes(
  563|  2.56k|        &self,
  564|  2.56k|        algorithm: CanonicalizationAlgorithm,
  565|  2.56k|    ) -> HashMap<InternedBlankNode, BlankNode> {
  566|  2.56k|        match algorithm {
  567|  2.56k|            CanonicalizationAlgorithm::Unstable => {
  568|  2.56k|                let bnodes = self.blank_nodes();
  569|  2.56k|                let quads_per_blank_node = self.quads_per_blank_nodes();
  570|  2.56k|                let (hash, partition) = self.hash_bnodes(
  571|  2.56k|                    bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
  572|  2.56k|                    &quads_per_blank_node,
  573|  2.56k|                );
  574|  2.56k|                self.distinguish(hash, &partition, &quads_per_blank_node)
  575|  2.56k|                    .into_iter()
  576|  2.56k|                    .map(|(from, to)| (from, BlankNode::new_from_unique_id(to.into())))
  577|  2.56k|                    .collect()
  578|  2.56k|            }
  579|  2.56k|        }
  580|  2.56k|    }
_RNvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB2_7Dataset11blank_nodes:
  582|  2.56k|    fn blank_nodes(&self) -> HashSet<InternedBlankNode> {
  583|  2.56k|        let mut bnodes = HashSet::new();
  584|  10.4k|        for (g, s, _, o) in &self.gspo {
  585|  7.93k|            if let InternedSubject::BlankNode(bnode) = s {
  586|  7.93k|                bnodes.insert(*bnode);
  587|  7.93k|            }
  588|       |            #[cfg(feature = "rdf-star")]
  589|  7.93k|            if let InternedSubject::Triple(triple) = s {
  590|      0|                Self::triple_blank_nodes(triple, &mut bnodes);
  591|  7.93k|            }
  592|  7.93k|            if let InternedTerm::BlankNode(bnode) = o {
  593|     88|                bnodes.insert(*bnode);
  594|  7.84k|            }
  595|       |            #[cfg(feature = "rdf-star")]
  596|  7.93k|            if let InternedTerm::Triple(triple) = o {
  597|      0|                Self::triple_blank_nodes(triple, &mut bnodes);
  598|  7.93k|            }
  599|  7.93k|            if let InternedGraphName::BlankNode(bnode) = g {
  600|      0|                bnodes.insert(*bnode);
  601|  7.93k|            }
  602|       |        }
  603|  2.56k|        bnodes
  604|  2.56k|    }
_RNvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB2_7Dataset21quads_per_blank_nodes:
  620|  2.56k|    fn quads_per_blank_nodes(&self) -> QuadsPerBlankNode {
  621|  2.56k|        let mut map: HashMap<_, Vec<_>> = HashMap::new();
  622|  10.4k|        for quad in &self.spog {
  623|  7.93k|            if let InternedSubject::BlankNode(bnode) = &quad.0 {
  624|  7.93k|                map.entry(*bnode).or_default().push(quad.clone());
  625|  7.93k|            }
  626|       |            #[cfg(feature = "rdf-star")]
  627|  7.93k|            if let InternedSubject::Triple(t) = &quad.0 {
  628|      0|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  629|  7.93k|            }
  630|  7.93k|            if let InternedTerm::BlankNode(bnode) = &quad.2 {
  631|     88|                map.entry(*bnode).or_default().push(quad.clone());
  632|  7.84k|            }
  633|       |            #[cfg(feature = "rdf-star")]
  634|  7.93k|            if let InternedTerm::Triple(t) = &quad.2 {
  635|      0|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  636|  7.93k|            }
  637|  7.93k|            if let InternedGraphName::BlankNode(bnode) = &quad.3 {
  638|      0|                map.entry(*bnode).or_default().push(quad.clone());
  639|  7.93k|            }
  640|       |        }
  641|  2.56k|        map
  642|  2.56k|    }
_RNvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB2_7Dataset11hash_bnodes:
  669|  22.9k|    fn hash_bnodes(
  670|  22.9k|        &self,
  671|  22.9k|        mut hashes: HashMap<InternedBlankNode, u64>,
  672|  22.9k|        quads_per_blank_node: &QuadsPerBlankNode,
  673|  22.9k|    ) -> (
  674|  22.9k|        HashMap<InternedBlankNode, u64>,
  675|  22.9k|        Vec<(u64, Vec<InternedBlankNode>)>,
  676|  22.9k|    ) {
  677|  22.9k|        let mut to_hash = Vec::new();
  678|  22.9k|        let mut to_do = hashes
  679|  22.9k|            .keys()
  680|  22.9k|            .map(|bnode| (*bnode, true))
  681|  22.9k|            .collect::<HashMap<_, _>>();
  682|  22.9k|        let mut partition = HashMap::<_, Vec<_>>::with_capacity(hashes.len());
  683|  22.9k|        let mut old_partition_count = usize::MAX;
  684|  68.7k|        while old_partition_count != partition.len() {
  685|  45.8k|            old_partition_count = partition.len();
  686|  45.8k|            partition.clear();
  687|  45.8k|            let mut new_hashes = hashes.clone();
  688|   168k|            for bnode in hashes.keys() {
  689|   168k|                let hash = if to_do.contains_key(bnode) {
  690|   172k|                    for (s, p, o, g) in &quads_per_blank_node[bnode] {
  691|   172k|                        to_hash.push((
  692|   172k|                            self.hash_subject(s, *bnode, &hashes),
  693|   172k|                            self.hash_named_node(*p),
  694|   172k|                            self.hash_term(o, *bnode, &hashes),
  695|   172k|                            self.hash_graph_name(g, *bnode, &hashes),
  696|   172k|                        ));
  697|   172k|                    }
  698|   168k|                    to_hash.sort_unstable();
  699|   168k|                    let hash = Self::hash_tuple((&to_hash, hashes[bnode]));
  700|   168k|                    to_hash.clear();
  701|   168k|                    if hash == hashes[bnode] {
  702|      0|                        to_do.insert(*bnode, false);
  703|   168k|                    } else {
  704|   168k|                        new_hashes.insert(*bnode, hash);
  705|   168k|                    }
  706|   168k|                    hash
  707|       |                } else {
  708|      0|                    hashes[bnode]
  709|       |                };
  710|   168k|                partition.entry(hash).or_default().push(*bnode);
  711|       |            }
  712|  45.8k|            hashes = new_hashes;
  713|       |        }
  714|  22.9k|        let mut partition: Vec<_> = partition.into_iter().collect();
  715|  22.9k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));
  716|  22.9k|        (hashes, partition)
  717|  22.9k|    }
_RNvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB2_7Dataset15hash_named_node:
  719|   172k|    fn hash_named_node(&self, node: InternedNamedNode) -> u64 {
  720|   172k|        Self::hash_tuple(node.decode_from(&self.interner))
  721|   172k|    }
_RNvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB2_7Dataset15hash_blank_node:
  723|   173k|    fn hash_blank_node(
  724|   173k|        node: InternedBlankNode,
  725|   173k|        current_blank_node: InternedBlankNode,
  726|   173k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  727|   173k|    ) -> u64 {
  728|   173k|        if node == current_blank_node {
  729|   172k|            u64::MAX
  730|       |        } else {
  731|    352|            bnodes_hash[&node]
  732|       |        }
  733|   173k|    }
_RNvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB2_7Dataset12hash_subject:
  735|   172k|    fn hash_subject(
  736|   172k|        &self,
  737|   172k|        node: &InternedSubject,
  738|   172k|        current_blank_node: InternedBlankNode,
  739|   172k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  740|   172k|    ) -> u64 {
  741|   172k|        match node {
  742|      0|            InternedSubject::NamedNode(node) => Self::hash_tuple(node.decode_from(&self.interner)),
  743|   172k|            InternedSubject::BlankNode(bnode) => {
  744|   172k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  745|       |            }
  746|       |            #[cfg(feature = "rdf-star")]
  747|      0|            InternedSubject::Triple(triple) => {
  748|      0|                self.hash_triple(triple, current_blank_node, bnodes_hash)
  749|       |            }
  750|       |        }
  751|   172k|    }
_RNvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB2_7Dataset9hash_term:
  753|   172k|    fn hash_term(
  754|   172k|        &self,
  755|   172k|        term: &InternedTerm,
  756|   172k|        current_blank_node: InternedBlankNode,
  757|   172k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  758|   172k|    ) -> u64 {
  759|   172k|        match term {
  760|   168k|            InternedTerm::NamedNode(node) => Self::hash_tuple(node.decode_from(&self.interner)),
  761|    352|            InternedTerm::BlankNode(bnode) => {
  762|    352|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  763|       |            }
  764|  4.01k|            InternedTerm::Literal(literal) => Self::hash_tuple(literal.decode_from(&self.interner)),
  765|       |            #[cfg(feature = "rdf-star")]
  766|      0|            InternedTerm::Triple(triple) => {
  767|      0|                self.hash_triple(triple, current_blank_node, bnodes_hash)
  768|       |            }
  769|       |        }
  770|   172k|    }
_RNvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB2_7Dataset15hash_graph_name:
  772|   172k|    fn hash_graph_name(
  773|   172k|        &self,
  774|   172k|        graph_name: &InternedGraphName,
  775|   172k|        current_blank_node: InternedBlankNode,
  776|   172k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  777|   172k|    ) -> u64 {
  778|   172k|        match graph_name {
  779|      0|            InternedGraphName::NamedNode(node) => {
  780|      0|                Self::hash_tuple(node.decode_from(&self.interner))
  781|       |            }
  782|      0|            InternedGraphName::BlankNode(bnode) => {
  783|      0|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  784|       |            }
  785|   172k|            InternedGraphName::DefaultGraph => 0,
  786|       |        }
  787|   172k|    }
_RNvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB2_7Dataset11distinguish:
  809|  22.9k|    fn distinguish(
  810|  22.9k|        &self,
  811|  22.9k|        hash: HashMap<InternedBlankNode, u64>,
  812|  22.9k|        partition: &[(u64, Vec<InternedBlankNode>)],
  813|  22.9k|        quads_per_blank_node: &QuadsPerBlankNode,
  814|  22.9k|    ) -> HashMap<InternedBlankNode, u64> {
  815|  22.9k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
  816|  22.9k|        if let Some(b_prime) = b_prime {
  817|  8.79k|            b_prime
  818|  8.79k|                .iter()
  819|  8.79k|                .map(|b| {
  820|       |                    let mut hash_prime = hash.clone();
  821|       |                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  822|       |                    let (hash_prime_prime, partition_prime) =
  823|       |                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  824|       |                    self.distinguish(hash_prime_prime, &partition_prime, quads_per_blank_node)
  825|  8.79k|                })
  826|  8.79k|                .reduce(|a, b| {
  827|       |                    let mut a_hashes = a.values().collect::<Vec<_>>();
  828|       |                    a_hashes.sort();
  829|       |                    let mut b_hashes = a.values().collect::<Vec<_>>();
  830|       |                    b_hashes.sort();
  831|       |                    if a_hashes <= b_hashes {
  832|       |                        a
  833|       |                    } else {
  834|       |                        b
  835|       |                    }
  836|  8.79k|                })
  837|  8.79k|                .unwrap_or_default()
  838|       |        } else {
  839|  14.1k|            hash
  840|       |        }
  841|  22.9k|    }
_RNvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB2_7Dataset15map_blank_nodes:
  844|  2.56k|    fn map_blank_nodes(
  845|  2.56k|        &mut self,
  846|  2.56k|        bnode_mapping: &HashMap<InternedBlankNode, BlankNode>,
  847|  2.56k|    ) -> Vec<(
  848|  2.56k|        InternedSubject,
  849|  2.56k|        InternedNamedNode,
  850|  2.56k|        InternedTerm,
  851|  2.56k|        InternedGraphName,
  852|  2.56k|    )> {
  853|  2.56k|        let old_quads: Vec<_> = self.spog.iter().cloned().collect();
  854|  2.56k|        old_quads
  855|  2.56k|            .into_iter()
  856|  2.56k|            .map(|(s, p, o, g)| {
  857|       |                (
  858|       |                    match s {
  859|       |                        InternedSubject::NamedNode(_) => s,
  860|       |                        InternedSubject::BlankNode(bnode) => {
  861|       |                            InternedSubject::BlankNode(InternedBlankNode::encoded_into(
  862|       |                                bnode_mapping[&bnode].as_ref(),
  863|       |                                &mut self.interner,
  864|       |                            ))
  865|       |                        }
  866|       |                        #[cfg(feature = "rdf-star")]
  867|       |                        InternedSubject::Triple(triple) => {
  868|       |                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  869|       |                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  870|       |                                &mut self.interner,
  871|       |                            )))
  872|       |                        }
  873|       |                    },
  874|       |                    p,
  875|       |                    match o {
  876|       |                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  877|       |                        InternedTerm::BlankNode(bnode) => {
  878|       |                            InternedTerm::BlankNode(InternedBlankNode::encoded_into(
  879|       |                                bnode_mapping[&bnode].as_ref(),
  880|       |                                &mut self.interner,
  881|       |                            ))
  882|       |                        }
  883|       |                        #[cfg(feature = "rdf-star")]
  884|       |                        InternedTerm::Triple(triple) => {
  885|       |                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  886|       |                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  887|       |                                &mut self.interner,
  888|       |                            )))
  889|       |                        }
  890|       |                    },
  891|       |                    match g {
  892|       |                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  893|       |                        InternedGraphName::BlankNode(bnode) => {
  894|       |                            InternedGraphName::BlankNode(InternedBlankNode::encoded_into(
  895|       |                                bnode_mapping[&bnode].as_ref(),
  896|       |                                &mut self.interner,
  897|       |                            ))
  898|       |                        }
  899|       |                    },
  900|       |                )
  901|  2.56k|            })
  902|  2.56k|            .collect()
  903|  2.56k|    }
_RNvXs_NtCs1JxAZnM7jd_5oxrdf7datasetNtB4_7DatasetNtNtCscdEvteftVc2_4core3cmp9PartialEq2eq:
  932|  1.28k|    fn eq(&self, other: &Self) -> bool {
  933|  1.28k|        if self.len() != other.len() {
  934|      0|            return false;
  935|  1.28k|        }
  936|  5.24k|        for q in self {
  937|  3.96k|            if !other.contains(q) {
  938|      0|                return false;
  939|  3.96k|            }
  940|       |        }
  941|  1.28k|        true
  942|  1.28k|    }
_RNvXs1_NtCs1JxAZnM7jd_5oxrdf7datasetRNtB5_7DatasetNtNtNtNtCscdEvteftVc2_4core4iter6traits7collect12IntoIterator9into_iter:
  951|  1.28k|    fn into_iter(self) -> Self::IntoIter {
  952|  1.28k|        self.iter()
  953|  1.28k|    }
_RNvMsb_NtCs1JxAZnM7jd_5oxrdf7datasetNtB5_12GraphViewMut13encode_triple:
 1395|  7.99k|    fn encode_triple(&mut self, triple: TripleRef<'_>) -> InternedTriple {
 1396|  7.99k|        InternedTriple {
 1397|  7.99k|            subject: InternedSubject::encoded_into(triple.subject, &mut self.dataset.interner),
 1398|  7.99k|            predicate: InternedNamedNode::encoded_into(
 1399|  7.99k|                triple.predicate,
 1400|  7.99k|                &mut self.dataset.interner,
 1401|  7.99k|            ),
 1402|  7.99k|            object: InternedTerm::encoded_into(triple.object, &mut self.dataset.interner),
 1403|  7.99k|        }
 1404|  7.99k|    }
_RNvXsg_NtCs1JxAZnM7jd_5oxrdf7datasetNtB5_4IterNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next:
 1551|  5.24k|    fn next(&mut self) -> Option<Self::Item> {
 1552|  5.24k|        self.inner
 1553|  5.24k|            .next()
 1554|  5.24k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))
 1555|  5.24k|    }
_RINvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB3_7Dataset9graph_mutNtNtB5_6triple12GraphNameRefEB5_:
  157|  2.56k|    pub fn graph_mut<'a, 'b>(
  158|  2.56k|        &'a mut self,
  159|  2.56k|        graph_name: impl Into<GraphNameRef<'b>>,
  160|  2.56k|    ) -> GraphViewMut<'a> {
  161|  2.56k|        let graph_name = InternedGraphName::encoded_into(graph_name.into(), &mut self.interner);
  162|  2.56k|        GraphViewMut {
  163|  2.56k|            dataset: self,
  164|  2.56k|            graph_name,
  165|  2.56k|        }
  166|  2.56k|    }
_RINvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB3_7Dataset8containsNtNtB5_6triple7QuadRefEB5_:
  341|  3.96k|    pub fn contains<'a>(&self, quad: impl Into<QuadRef<'a>>) -> bool {
  342|  3.96k|        if let Some(q) = self.encoded_quad(quad.into()) {
  343|  3.96k|            self.spog.contains(&q)
  344|       |        } else {
  345|      0|            false
  346|       |        }
  347|  3.96k|    }
_RINvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB3_7Dataset18encoded_named_nodeNtNtB5_10named_node12NamedNodeRefEB5_:
  454|  3.96k|    pub(super) fn encoded_named_node<'a>(
  455|  3.96k|        &self,
  456|  3.96k|        node: impl Into<NamedNodeRef<'a>>,
  457|  3.96k|    ) -> Option<InternedNamedNode> {
  458|  3.96k|        InternedNamedNode::encoded_from(node.into(), &self.interner)
  459|  3.96k|    }
_RINvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB3_7Dataset15encoded_subjectNtNtB5_6triple10SubjectRefEB5_:
  461|  3.96k|    pub(super) fn encoded_subject<'a>(
  462|  3.96k|        &self,
  463|  3.96k|        node: impl Into<SubjectRef<'a>>,
  464|  3.96k|    ) -> Option<InternedSubject> {
  465|  3.96k|        InternedSubject::encoded_from(node.into(), &self.interner)
  466|  3.96k|    }
_RINvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB3_7Dataset12encoded_termNtNtB5_6triple7TermRefEB5_:
  468|  3.96k|    pub(super) fn encoded_term<'a>(&self, term: impl Into<TermRef<'a>>) -> Option<InternedTerm> {
  469|  3.96k|        InternedTerm::encoded_from(term.into(), &self.interner)
  470|  3.96k|    }
_RINvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB3_7Dataset18encoded_graph_nameNtNtB5_6triple12GraphNameRefEB5_:
  472|  3.96k|    pub(super) fn encoded_graph_name<'a>(
  473|  3.96k|        &self,
  474|  3.96k|        graph_name: impl Into<GraphNameRef<'a>>,
  475|  3.96k|    ) -> Option<InternedGraphName> {
  476|  3.96k|        InternedGraphName::encoded_from(graph_name.into(), &self.interner)
  477|  3.96k|    }
_RNCNvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB4_7Dataset33canonicalize_interned_blank_nodes0B6_:
  571|  6.35k|                    bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
_RNCNvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB4_7Dataset33canonicalize_interned_blank_nodess_0B6_:
  576|  6.35k|                    .map(|(from, to)| (from, BlankNode::new_from_unique_id(to.into())))
_RNCNvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB4_7Dataset11hash_bnodes0B6_:
  680|  84.4k|            .map(|bnode| (*bnode, true))
_RNCNvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB4_7Dataset11hash_bnodess_0B6_:
  715|  75.2k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));
_RINvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB3_7Dataset10hash_tupleNtNtB5_10named_node12NamedNodeRefEB5_:
  803|   341k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|   341k|        let mut hasher = DefaultHasher::new();
  805|   341k|        v.hash(&mut hasher);
  806|   341k|        hasher.finish()
  807|   341k|    }
_RINvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB3_7Dataset10hash_tupleNtNtB5_7literal10LiteralRefEB5_:
  803|  4.01k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|  4.01k|        let mut hasher = DefaultHasher::new();
  805|  4.01k|        v.hash(&mut hasher);
  806|  4.01k|        hasher.finish()
  807|  4.01k|    }
_RINvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB3_7Dataset10hash_tupleTRINtNtCs3OstG5Tqy1X_5alloc3vec3VecTyyyyEEyEEB5_:
  803|   168k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|   168k|        let mut hasher = DefaultHasher::new();
  805|   168k|        v.hash(&mut hasher);
  806|   168k|        hasher.finish()
  807|   168k|    }
_RINvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB3_7Dataset10hash_tupleTylEEB5_:
  803|  20.3k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|  20.3k|        let mut hasher = DefaultHasher::new();
  805|  20.3k|        v.hash(&mut hasher);
  806|  20.3k|        hasher.finish()
  807|  20.3k|    }
_RNCNvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB4_7Dataset11distinguish0B6_:
  815|  72.8k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
_RNCNvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB4_7Dataset11distinguishs_0B6_:
  815|  72.8k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
_RNCNvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB4_7Dataset11distinguishs0_0B6_:
  819|  20.3k|                .map(|b| {
  820|  20.3k|                    let mut hash_prime = hash.clone();
  821|  20.3k|                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  822|  20.3k|                    let (hash_prime_prime, partition_prime) =
  823|  20.3k|                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  824|  20.3k|                    self.distinguish(hash_prime_prime, &partition_prime, quads_per_blank_node)
  825|  20.3k|                })
_RNCNvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB4_7Dataset11distinguishs1_0B6_:
  826|  11.5k|                .reduce(|a, b| {
  827|  11.5k|                    let mut a_hashes = a.values().collect::<Vec<_>>();
  828|  11.5k|                    a_hashes.sort();
  829|  11.5k|                    let mut b_hashes = a.values().collect::<Vec<_>>();
  830|  11.5k|                    b_hashes.sort();
  831|  11.5k|                    if a_hashes <= b_hashes {
  832|  11.5k|                        a
  833|       |                    } else {
  834|      0|                        b
  835|       |                    }
  836|  11.5k|                })
_RNCNvMNtCs1JxAZnM7jd_5oxrdf7datasetNtB4_7Dataset15map_blank_nodes0B6_:
  856|  7.93k|            .map(|(s, p, o, g)| {
  857|  7.93k|                (
  858|  7.93k|                    match s {
  859|      0|                        InternedSubject::NamedNode(_) => s,
  860|  7.93k|                        InternedSubject::BlankNode(bnode) => {
  861|  7.93k|                            InternedSubject::BlankNode(InternedBlankNode::encoded_into(
  862|  7.93k|                                bnode_mapping[&bnode].as_ref(),
  863|  7.93k|                                &mut self.interner,
  864|  7.93k|                            ))
  865|       |                        }
  866|       |                        #[cfg(feature = "rdf-star")]
  867|      0|                        InternedSubject::Triple(triple) => {
  868|      0|                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  869|      0|                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  870|      0|                                &mut self.interner,
  871|      0|                            )))
  872|       |                        }
  873|       |                    },
  874|  7.93k|                    p,
  875|  7.93k|                    match o {
  876|  7.84k|                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  877|     88|                        InternedTerm::BlankNode(bnode) => {
  878|     88|                            InternedTerm::BlankNode(InternedBlankNode::encoded_into(
  879|     88|                                bnode_mapping[&bnode].as_ref(),
  880|     88|                                &mut self.interner,
  881|     88|                            ))
  882|       |                        }
  883|       |                        #[cfg(feature = "rdf-star")]
  884|      0|                        InternedTerm::Triple(triple) => {
  885|      0|                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  886|      0|                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  887|      0|                                &mut self.interner,
  888|      0|                            )))
  889|       |                        }
  890|       |                    },
  891|  7.93k|                    match g {
  892|  7.93k|                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  893|      0|                        InternedGraphName::BlankNode(bnode) => {
  894|      0|                            InternedGraphName::BlankNode(InternedBlankNode::encoded_into(
  895|      0|                                bnode_mapping[&bnode].as_ref(),
  896|      0|                                &mut self.interner,
  897|      0|                            ))
  898|       |                        }
  899|       |                    },
  900|       |                )
  901|  7.93k|            })
_RNCNvXsg_NtCs1JxAZnM7jd_5oxrdf7datasetNtB7_4IterNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0B9_:
 1554|  3.96k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))

_RINvXs3_NtCs1JxAZnM7jd_5oxrdf5graphNtB6_5GraphINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect12FromIteratorRNtNtB8_6triple6TripleE9from_iterINtNtNtBR_5slice4iter4IterB1J_EECs2kjnqOcnWhU_7rdf_xml:
  248|  2.56k|    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self {
  249|  2.56k|        let mut g = Self::new();
  250|  2.56k|        g.extend(iter);
  251|  2.56k|        g
  252|  2.56k|    }
_RINvXs5_NtCs1JxAZnM7jd_5oxrdf5graphNtB6_5GraphINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendRNtNtB8_6triple6TripleE6extendINtNtNtBR_5slice4iter4IterB1C_EECs2kjnqOcnWhU_7rdf_xml:
  262|  2.56k|    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  263|  2.56k|        self.graph_mut().extend(iter)
  264|  2.56k|    }
_RNvMNtCs1JxAZnM7jd_5oxrdf5graphNtB2_5Graph3new:
   63|  2.56k|    pub fn new() -> Self {
   64|  2.56k|        Self::default()
   65|  2.56k|    }
_RNvMNtCs1JxAZnM7jd_5oxrdf5graphNtB2_5Graph9graph_mut:
   71|  2.56k|    fn graph_mut(&mut self) -> GraphViewMut<'_> {
   72|  2.56k|        self.dataset.graph_mut(GraphNameRef::DefaultGraph)
   73|  2.56k|    }
_RNvMNtCs1JxAZnM7jd_5oxrdf5graphNtB2_5Graph12canonicalize:
  217|  2.56k|    pub fn canonicalize(&mut self, algorithm: CanonicalizationAlgorithm) {
  218|  2.56k|        self.dataset.canonicalize(algorithm)
  219|  2.56k|    }
_RNvXs_NtCs1JxAZnM7jd_5oxrdf5graphNtB4_5GraphNtNtCscdEvteftVc2_4core3cmp9PartialEq2eq:
  223|  1.28k|    fn eq(&self, other: &Self) -> bool {
  224|  1.28k|        self.dataset == other.dataset
  225|  1.28k|    }

_RNCNvMs1_NtCs1JxAZnM7jd_5oxrdf9interningNtB7_17InternedBlankNode12encoded_into0B9_:
  133|  12.7k|                .or_insert_with(|| blank_node.as_str().into());
_RNvMNtCs1JxAZnM7jd_5oxrdf9interningNtB2_8Interner13get_or_intern:
   18|  15.9k|    fn get_or_intern(&mut self, value: &str) -> Key {
   19|  15.9k|        let mut hash = self.hash(value);
   20|  15.9k|        loop {
   21|  15.9k|            match self.string_for_hash.entry(hash) {
   22|  8.26k|                Entry::Vacant(e) => {
   23|  8.26k|                    e.insert(value.into());
   24|  8.26k|                    return Key(hash);
   25|       |                }
   26|  7.64k|                Entry::Occupied(e) => loop {
   27|  7.64k|                    if e.get() == value {
   28|  7.64k|                        return Key(hash);
   29|      0|                    } else if hash == u64::MAX - 1 {
   30|      0|                        hash = 0;
   31|      0|                    } else {
   32|      0|                        hash += 1;
   33|      0|                    }
   34|       |                },
   35|       |            }
   36|       |        }
   37|  15.9k|    }
_RNvMNtCs1JxAZnM7jd_5oxrdf9interningNtB2_8Interner3get:
   39|  7.88k|    fn get(&self, value: &str) -> Option<Key> {
   40|  7.88k|        let mut hash = self.hash(value);
   41|       |        loop {
   42|  7.88k|            let v = self.string_for_hash.get(&hash)?;
   43|  7.88k|            if v == value {
   44|  7.88k|                return Some(Key(hash));
   45|      0|            } else if hash == u64::MAX - 1 {
   46|      0|                hash = 0;
   47|      0|            } else {
   48|      0|                hash += 1;
   49|      0|            }
   50|       |        }
   51|  7.88k|    }
_RNvMNtCs1JxAZnM7jd_5oxrdf9interningNtB2_8Interner4hash:
   53|  23.7k|    fn hash(&self, value: &str) -> u64 {
   54|  23.7k|        let hash = self.hasher.hash_one(value);
   55|  23.7k|        if hash == u64::MAX {
   56|      0|            0
   57|       |        } else {
   58|  23.7k|            hash
   59|       |        }
   60|  23.7k|    }
_RNvMNtCs1JxAZnM7jd_5oxrdf9interningNtB2_8Interner7resolve:
   62|   353k|    fn resolve(&self, key: Key) -> &str {
   63|   353k|        &self.string_for_hash[&key.0]
   64|   353k|    }
_RNvMs0_NtCs1JxAZnM7jd_5oxrdf9interningNtB5_17InternedNamedNode12encoded_into:
   90|  14.2k|    pub fn encoded_into(named_node: NamedNodeRef<'_>, interner: &mut Interner) -> Self {
   91|  14.2k|        Self {
   92|  14.2k|            id: interner.get_or_intern(named_node.as_str()),
   93|  14.2k|        }
   94|  14.2k|    }
_RNvMs0_NtCs1JxAZnM7jd_5oxrdf9interningNtB5_17InternedNamedNode12encoded_from:
   96|  7.07k|    pub fn encoded_from(named_node: NamedNodeRef<'_>, interner: &Interner) -> Option<Self> {
   97|  7.07k|        Some(Self {
   98|  7.07k|            id: interner.get(named_node.as_str())?,
   99|       |        })
  100|  7.07k|    }
_RNvMs0_NtCs1JxAZnM7jd_5oxrdf9interningNtB5_17InternedNamedNode11decode_from:
  102|   348k|    pub fn decode_from(self, interner: &Interner) -> NamedNodeRef<'_> {
  103|   348k|        NamedNodeRef::new_unchecked(interner.resolve(self.id))
  104|   348k|    }
_RNvMs1_NtCs1JxAZnM7jd_5oxrdf9interningNtB5_17InternedBlankNode12encoded_into:
  128|  16.1k|    pub fn encoded_into(blank_node: BlankNodeRef<'_>, interner: &mut Interner) -> Self {
  129|  16.1k|        if let Some(id) = blank_node.unique_id() {
  130|  16.1k|            interner
  131|  16.1k|                .string_for_blank_node_id
  132|  16.1k|                .entry(id)
  133|  16.1k|                .or_insert_with(|| blank_node.as_str().into());
  134|  16.1k|            Self::Number { id }
  135|       |        } else {
  136|      0|            Self::Other {
  137|      0|                id: interner.get_or_intern(blank_node.as_str()),
  138|      0|            }
  139|       |        }
  140|  16.1k|    }
_RNvMs1_NtCs1JxAZnM7jd_5oxrdf9interningNtB5_17InternedBlankNode12encoded_from:
  142|  4.01k|    pub fn encoded_from(blank_node: BlankNodeRef<'_>, interner: &Interner) -> Option<Self> {
  143|  4.01k|        if let Some(id) = blank_node.unique_id() {
  144|  4.01k|            interner
  145|  4.01k|                .string_for_blank_node_id
  146|  4.01k|                .contains_key(&id)
  147|  4.01k|                .then_some(Self::Number { id })
  148|       |        } else {
  149|       |            Some(Self::Other {
  150|      0|                id: interner.get(blank_node.as_str())?,
  151|       |            })
  152|       |        }
  153|  4.01k|    }
_RNvMs1_NtCs1JxAZnM7jd_5oxrdf9interningNtB5_17InternedBlankNode11decode_from:
  155|  4.01k|    pub fn decode_from(self, interner: &Interner) -> BlankNodeRef<'_> {
  156|  4.01k|        BlankNodeRef::new_unchecked(match self {
  157|  4.01k|            Self::Number { id } => &interner.string_for_blank_node_id[&id],
  158|      0|            Self::Other { id } => interner.resolve(id),
  159|       |        })
  160|  4.01k|    }
_RNvMs2_NtCs1JxAZnM7jd_5oxrdf9interningNtB5_15InternedLiteral12encoded_into:
  188|  1.68k|    pub fn encoded_into(literal: LiteralRef<'_>, interner: &mut Interner) -> Self {
  189|  1.68k|        let value_id = interner.get_or_intern(literal.value());
  190|  1.68k|        if literal.is_plain() {
  191|  1.68k|            if let Some(language) = literal.language() {
  192|      0|                Self::LanguageTaggedString {
  193|      0|                    value_id,
  194|      0|                    language_id: interner.get_or_intern(language),
  195|      0|                }
  196|       |            } else {
  197|  1.68k|                Self::String { value_id }
  198|       |            }
  199|       |        } else {
  200|      0|            Self::TypedLiteral {
  201|      0|                value_id,
  202|      0|                datatype: InternedNamedNode::encoded_into(literal.datatype(), interner),
  203|      0|            }
  204|       |        }
  205|  1.68k|    }
_RNvMs2_NtCs1JxAZnM7jd_5oxrdf9interningNtB5_15InternedLiteral12encoded_from:
  207|    813|    pub fn encoded_from(literal: LiteralRef<'_>, interner: &Interner) -> Option<Self> {
  208|    813|        let value_id = interner.get(literal.value())?;
  209|    813|        Some(if literal.is_plain() {
  210|    813|            if let Some(language) = literal.language() {
  211|       |                Self::LanguageTaggedString {
  212|      0|                    value_id,
  213|      0|                    language_id: interner.get(language)?,
  214|       |                }
  215|       |            } else {
  216|    813|                Self::String { value_id }
  217|       |            }
  218|       |        } else {
  219|       |            Self::TypedLiteral {
  220|      0|                value_id,
  221|      0|                datatype: InternedNamedNode::encoded_from(literal.datatype(), interner)?,
  222|       |            }
  223|       |        })
  224|    813|    }
_RNvMs2_NtCs1JxAZnM7jd_5oxrdf9interningNtB5_15InternedLiteral11decode_from:
  226|  4.82k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> LiteralRef<'a> {
  227|  4.82k|        match self {
  228|  4.82k|            Self::String { value_id } => {
  229|  4.82k|                LiteralRef::new_simple_literal(interner.resolve(*value_id))
  230|       |            }
  231|       |            Self::LanguageTaggedString {
  232|      0|                value_id,
  233|      0|                language_id,
  234|      0|            } => LiteralRef::new_language_tagged_literal_unchecked(
  235|      0|                interner.resolve(*value_id),
  236|      0|                interner.resolve(*language_id),
  237|      0|            ),
  238|      0|            Self::TypedLiteral { value_id, datatype } => LiteralRef::new_typed_literal(
  239|      0|                interner.resolve(*value_id),
  240|      0|                datatype.decode_from(interner),
  241|      0|            ),
  242|       |        }
  243|  4.82k|    }
_RNvMs3_NtCs1JxAZnM7jd_5oxrdf9interningNtB5_15InternedSubject12encoded_into:
  274|  7.99k|    pub fn encoded_into(node: SubjectRef<'_>, interner: &mut Interner) -> Self {
  275|  7.99k|        match node {
  276|      0|            SubjectRef::NamedNode(node) => {
  277|      0|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  278|       |            }
  279|  7.99k|            SubjectRef::BlankNode(node) => {
  280|  7.99k|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  281|       |            }
  282|       |            #[cfg(feature = "rdf-star")]
  283|      0|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  284|      0|                triple.as_ref(),
  285|      0|                interner,
  286|      0|            ))),
  287|       |        }
  288|  7.99k|    }
_RNvMs3_NtCs1JxAZnM7jd_5oxrdf9interningNtB5_15InternedSubject12encoded_from:
  290|  3.96k|    pub fn encoded_from(node: SubjectRef<'_>, interner: &Interner) -> Option<Self> {
  291|  3.96k|        Some(match node {
  292|      0|            SubjectRef::NamedNode(node) => {
  293|      0|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  294|       |            }
  295|  3.96k|            SubjectRef::BlankNode(node) => {
  296|  3.96k|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  297|       |            }
  298|       |            #[cfg(feature = "rdf-star")]
  299|      0|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  300|      0|                triple.as_ref(),
  301|      0|                interner,
  302|      0|            )?)),
  303|       |        })
  304|  3.96k|    }
_RNvMs3_NtCs1JxAZnM7jd_5oxrdf9interningNtB5_15InternedSubject11decode_from:
  306|  3.96k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> SubjectRef<'a> {
  307|  3.96k|        match self {
  308|      0|            Self::NamedNode(node) => SubjectRef::NamedNode(node.decode_from(interner)),
  309|  3.96k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.decode_from(interner)),
  310|       |            #[cfg(feature = "rdf-star")]
  311|      0|            Self::Triple(triple) => SubjectRef::Triple(&interner.triples[triple.as_ref()]),
  312|       |        }
  313|  3.96k|    }
_RNvMs4_NtCs1JxAZnM7jd_5oxrdf9interningNtB5_17InternedGraphName12encoded_into:
  341|  2.56k|    pub fn encoded_into(node: GraphNameRef<'_>, interner: &mut Interner) -> Self {
  342|  2.56k|        match node {
  343|  2.56k|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  344|      0|            GraphNameRef::NamedNode(node) => {
  345|      0|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  346|       |            }
  347|      0|            GraphNameRef::BlankNode(node) => {
  348|      0|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  349|       |            }
  350|       |        }
  351|  2.56k|    }
_RNvMs4_NtCs1JxAZnM7jd_5oxrdf9interningNtB5_17InternedGraphName12encoded_from:
  353|  3.96k|    pub fn encoded_from(node: GraphNameRef<'_>, interner: &Interner) -> Option<Self> {
  354|  3.96k|        Some(match node {
  355|  3.96k|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  356|      0|            GraphNameRef::NamedNode(node) => {
  357|      0|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  358|       |            }
  359|      0|            GraphNameRef::BlankNode(node) => {
  360|      0|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  361|       |            }
  362|       |        })
  363|  3.96k|    }
_RNvMs4_NtCs1JxAZnM7jd_5oxrdf9interningNtB5_17InternedGraphName11decode_from:
  365|  3.96k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> GraphNameRef<'a> {
  366|  3.96k|        match self {
  367|  3.96k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  368|      0|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.decode_from(interner)),
  369|      0|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.decode_from(interner)),
  370|       |        }
  371|  3.96k|    }
_RNvMs5_NtCs1JxAZnM7jd_5oxrdf9interningNtB5_12InternedTerm12encoded_into:
  400|  7.99k|    pub fn encoded_into(term: TermRef<'_>, interner: &mut Interner) -> Self {
  401|  7.99k|        match term {
  402|  6.21k|            TermRef::NamedNode(term) => {
  403|  6.21k|                Self::NamedNode(InternedNamedNode::encoded_into(term, interner))
  404|       |            }
  405|     88|            TermRef::BlankNode(term) => {
  406|     88|                Self::BlankNode(InternedBlankNode::encoded_into(term, interner))
  407|       |            }
  408|  1.68k|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_into(term, interner)),
  409|       |            #[cfg(feature = "rdf-star")]
  410|      0|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  411|      0|                triple.as_ref(),
  412|      0|                interner,
  413|      0|            ))),
  414|       |        }
  415|  7.99k|    }
_RNvMs5_NtCs1JxAZnM7jd_5oxrdf9interningNtB5_12InternedTerm12encoded_from:
  417|  3.96k|    pub fn encoded_from(term: TermRef<'_>, interner: &Interner) -> Option<Self> {
  418|  3.96k|        Some(match term {
  419|  3.10k|            TermRef::NamedNode(term) => {
  420|  3.10k|                Self::NamedNode(InternedNamedNode::encoded_from(term, interner)?)
  421|       |            }
  422|     44|            TermRef::BlankNode(term) => {
  423|     44|                Self::BlankNode(InternedBlankNode::encoded_from(term, interner)?)
  424|       |            }
  425|    813|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_from(term, interner)?),
  426|       |            #[cfg(feature = "rdf-star")]
  427|      0|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  428|      0|                triple.as_ref(),
  429|      0|                interner,
  430|      0|            )?)),
  431|       |        })
  432|  3.96k|    }
_RNvMs5_NtCs1JxAZnM7jd_5oxrdf9interningNtB5_12InternedTerm11decode_from:
  434|  3.96k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> TermRef<'a> {
  435|  3.96k|        match self {
  436|  3.10k|            Self::NamedNode(term) => TermRef::NamedNode(term.decode_from(interner)),
  437|     44|            Self::BlankNode(term) => TermRef::BlankNode(term.decode_from(interner)),
  438|    813|            Self::Literal(term) => TermRef::Literal(term.decode_from(interner)),
  439|       |            #[cfg(feature = "rdf-star")]
  440|      0|            Self::Triple(triple) => TermRef::Triple(&interner.triples[triple.as_ref()]),
  441|       |        }
  442|  3.96k|    }
_RNvXs7_NtCs1JxAZnM7jd_5oxrdf9interningNtB5_21IdentityHasherBuilderNtNtCscdEvteftVc2_4core4hash11BuildHasher12build_hasher:
  511|   380k|    fn build_hasher(&self) -> Self::Hasher {
  512|   380k|        Self::Hasher::default()
  513|   380k|    }
_RNvXs8_NtCs1JxAZnM7jd_5oxrdf9interningNtB5_14IdentityHasherNtNtCscdEvteftVc2_4core4hash6Hasher6finish:
  522|   380k|    fn finish(&self) -> u64 {
  523|   380k|        self.value
  524|   380k|    }
_RNvXs8_NtCs1JxAZnM7jd_5oxrdf9interningNtB5_14IdentityHasherNtNtCscdEvteftVc2_4core4hash6Hasher9write_u64:
  530|   380k|    fn write_u64(&mut self, i: u64) {
  531|   380k|        self.value = i
  532|   380k|    }

_RNvMNtCs1JxAZnM7jd_5oxrdf7literalNtB2_7Literal6as_refCs2kjnqOcnWhU_7rdf_xml:
  129|  53.9k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|  53.9k|        LiteralRef(match &self.0 {
  131|  51.6k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|      0|            LiteralContent::LanguageTaggedString { value, language } => {
  133|      0|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|  2.35k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|  2.35k|                value,
  137|  2.35k|                datatype: datatype.as_ref(),
  138|  2.35k|            },
  139|       |        })
  140|  53.9k|    }
_RNvMst_NtCs1JxAZnM7jd_5oxrdf7literalNtB5_10LiteralRef5valueCs2kjnqOcnWhU_7rdf_xml:
  488|  52.3k|    pub const fn value(self) -> &'a str {
  489|  52.3k|        match self.0 {
  490|  49.9k|            LiteralRefContent::String(value)
  491|      0|            | LiteralRefContent::LanguageTaggedString { value, .. }
  492|  52.3k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  493|  52.3k|        }
  494|  52.3k|    }
_RNvMst_NtCs1JxAZnM7jd_5oxrdf7literalNtB5_10LiteralRef8datatypeCs2kjnqOcnWhU_7rdf_xml:
  513|  2.35k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  514|  2.35k|        match self.0 {
  515|      0|            LiteralRefContent::String(_) => xsd::STRING,
  516|      0|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  517|  2.35k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  518|       |        }
  519|  2.35k|    }
_RNvMst_NtCs1JxAZnM7jd_5oxrdf7literalNtB5_10LiteralRef8is_plainCs2kjnqOcnWhU_7rdf_xml:
  526|  52.3k|    pub const fn is_plain(self) -> bool {
  527|  2.35k|        matches!(
  528|  52.3k|            self.0,
  529|       |            LiteralRefContent::String(_) | LiteralRefContent::LanguageTaggedString { .. }
  530|       |        )
  531|  52.3k|    }
_RNvMst_NtCs1JxAZnM7jd_5oxrdf7literalNtB5_10LiteralRef8languageCs2kjnqOcnWhU_7rdf_xml:
  501|  52.3k|    pub const fn language(self) -> Option<&'a str> {
  502|  52.3k|        match self.0 {
  503|      0|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  504|  52.3k|            _ => None,
  505|       |        }
  506|  52.3k|    }
_RINvMNtCs1JxAZnM7jd_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   47|   100k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|   100k|        Self(LiteralContent::String(value.into()))
   49|   100k|    }
_RINvMNtCs1JxAZnM7jd_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   53|  4.97k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|  4.97k|        let value = value.into();
   55|  4.97k|        let datatype = datatype.into();
   56|  4.97k|        Self(if datatype == xsd::STRING {
   57|    254|            LiteralContent::String(value)
   58|       |        } else {
   59|  4.71k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|  4.97k|    }
_RNvMst_NtCs1JxAZnM7jd_5oxrdf7literalNtB5_10LiteralRef18new_simple_literalB7_:
  459|  4.82k|    pub const fn new_simple_literal(value: &'a str) -> Self {
  460|  4.82k|        LiteralRef(LiteralRefContent::String(value))
  461|  4.82k|    }
_RNvMst_NtCs1JxAZnM7jd_5oxrdf7literalNtB5_10LiteralRef5valueB7_:
  488|  2.50k|    pub const fn value(self) -> &'a str {
  489|  2.50k|        match self.0 {
  490|  2.50k|            LiteralRefContent::String(value)
  491|      0|            | LiteralRefContent::LanguageTaggedString { value, .. }
  492|  2.50k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  493|  2.50k|        }
  494|  2.50k|    }
_RNvMst_NtCs1JxAZnM7jd_5oxrdf7literalNtB5_10LiteralRef8languageB7_:
  501|  2.50k|    pub const fn language(self) -> Option<&'a str> {
  502|  2.50k|        match self.0 {
  503|      0|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  504|  2.50k|            _ => None,
  505|       |        }
  506|  2.50k|    }
_RNvMst_NtCs1JxAZnM7jd_5oxrdf7literalNtB5_10LiteralRef8is_plainB7_:
  526|  2.50k|    pub const fn is_plain(self) -> bool {
  527|      0|        matches!(
  528|  2.50k|            self.0,
  529|       |            LiteralRefContent::String(_) | LiteralRefContent::LanguageTaggedString { .. }
  530|       |        )
  531|  2.50k|    }

_RNvMNtCs1JxAZnM7jd_5oxrdf10named_nodeNtB2_9NamedNode6as_refCs2kjnqOcnWhU_7rdf_xml:
   54|   677k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|   677k|        NamedNodeRef::new_unchecked(&self.iri)
   56|   677k|    }
_RNvMs4_NtCs1JxAZnM7jd_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCs2kjnqOcnWhU_7rdf_xml:
  138|  2.49k|    pub fn into_owned(self) -> NamedNode {
  139|  2.49k|        NamedNode::new_unchecked(self.iri)
  140|  2.49k|    }
_RNvMs4_NtCs1JxAZnM7jd_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCs2kjnqOcnWhU_7rdf_xml:
  128|   677k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   677k|        Self { iri }
  130|   677k|    }
_RNvMs4_NtCs1JxAZnM7jd_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCs2kjnqOcnWhU_7rdf_xml:
  133|  9.33k|    pub const fn as_str(self) -> &'a str {
  134|  9.33k|        self.iri
  135|  9.33k|    }
_RNvMNtCs1JxAZnM7jd_5oxrdf10named_nodeNtB2_9NamedNode6as_strCs4sYt0urF4vM_8oxrdfxml:
   44|   604k|    pub fn as_str(&self) -> &str {
   45|   604k|        self.iri.as_str()
   46|   604k|    }
_RNvMs4_NtCs1JxAZnM7jd_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCs4sYt0urF4vM_8oxrdfxml:
  133|   388k|    pub const fn as_str(self) -> &'a str {
  134|   388k|        self.iri
  135|   388k|    }
_RNvXs0_NtCs1JxAZnM7jd_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCscdEvteftVc2_4core3cmp9PartialEqeE2eqCs4sYt0urF4vM_8oxrdfxml:
   68|   604k|    fn eq(&self, other: &str) -> bool {
   69|   604k|        self.as_str() == other
   70|   604k|    }
_RNvMNtCs1JxAZnM7jd_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|  4.97k|    pub fn as_str(&self) -> &str {
   45|  4.97k|        self.iri.as_str()
   46|  4.97k|    }
_RNvMs4_NtCs1JxAZnM7jd_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedB7_:
  128|   348k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   348k|        Self { iri }
  130|   348k|    }
_RNvMs4_NtCs1JxAZnM7jd_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|  26.2k|    pub const fn as_str(self) -> &'a str {
  134|  26.2k|        self.iri
  135|  26.2k|    }
_RNvMs4_NtCs1JxAZnM7jd_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|   589k|    pub fn into_owned(self) -> NamedNode {
  139|   589k|        NamedNode::new_unchecked(self.iri)
  140|   589k|    }
_RNvXs6_NtCs1JxAZnM7jd_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCscdEvteftVc2_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|   589k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|   589k|        node.into_owned()
  154|   589k|    }
_RNvXs9_NtCs1JxAZnM7jd_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCscdEvteftVc2_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|  4.97k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|  4.97k|        self.as_str() == other.as_str()
  175|  4.97k|    }
_RINvMNtCs1JxAZnM7jd_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   39|  1.02M|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  1.02M|        Self { iri: iri.into() }
   41|  1.02M|    }
_RINvMNtCs1JxAZnM7jd_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|   592k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   592k|        Self { iri: iri.into() }
   41|   592k|    }

_RNvMs16_NtCs1JxAZnM7jd_5oxrdf6tripleNtB6_6Triple6as_refCs2kjnqOcnWhU_7rdf_xml:
  835|   364k|    pub fn as_ref(&self) -> TripleRef<'_> {
  836|   364k|        TripleRef {
  837|   364k|            subject: self.subject.as_ref(),
  838|   364k|            predicate: self.predicate.as_ref(),
  839|   364k|            object: self.object.as_ref(),
  840|   364k|        }
  841|   364k|    }
_RNvMsc_NtCs1JxAZnM7jd_5oxrdf6tripleNtB5_7Subject6as_refCs2kjnqOcnWhU_7rdf_xml:
  181|   700k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|   700k|        match self {
  183|  9.18k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|   691k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|      0|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|   700k|    }
_RNvMsn_NtCs1JxAZnM7jd_5oxrdf6tripleNtB5_10SubjectRef10into_ownedCs2kjnqOcnWhU_7rdf_xml:
  294|   304k|    pub fn into_owned(self) -> Subject {
  295|   304k|        match self {
  296|  2.49k|            Self::NamedNode(node) => Subject::NamedNode(node.into_owned()),
  297|   302k|            Self::BlankNode(node) => Subject::BlankNode(node.into_owned()),
  298|       |            #[cfg(feature = "rdf-star")]
  299|      0|            Self::Triple(triple) => Subject::Triple(Box::new(triple.clone())),
  300|       |        }
  301|   304k|    }
_RNvMsy_NtCs1JxAZnM7jd_5oxrdf6tripleNtB5_4Term6as_refCs2kjnqOcnWhU_7rdf_xml:
  417|   364k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|   364k|        match self {
  419|   301k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|  8.19k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  53.9k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|      0|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|   364k|    }
_RNvXs1a_NtCs1JxAZnM7jd_5oxrdf6tripleNtB6_9TripleRefINtNtCscdEvteftVc2_4core7convert4FromRNtB6_6TripleE4fromCs2kjnqOcnWhU_7rdf_xml:
  926|   364k|    fn from(triple: &'a Triple) -> Self {
  927|   364k|        triple.as_ref()
  928|   364k|    }
_RNvXsL_NtCs1JxAZnM7jd_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtB5_7SubjectE4fromCs4sYt0urF4vM_8oxrdfxml:
  520|  21.4k|    fn from(node: Subject) -> Self {
  521|  21.4k|        match node {
  522|  4.93k|            Subject::NamedNode(node) => node.into(),
  523|  16.5k|            Subject::BlankNode(node) => node.into(),
  524|       |            #[cfg(feature = "rdf-star")]
  525|      0|            Subject::Triple(triple) => Self::Triple(triple),
  526|       |        }
  527|  21.4k|    }
_RNvXse_NtCs1JxAZnM7jd_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromCs4sYt0urF4vM_8oxrdfxml:
  200|  5.27k|    fn from(node: NamedNode) -> Self {
  201|  5.27k|        Self::NamedNode(node)
  202|  5.27k|    }
_RINvMs16_NtCs1JxAZnM7jd_5oxrdf6tripleNtB7_6Triple3newNtB7_7SubjectNtNtB9_10named_node12NamedNodeRefNtB14_9NamedNodeECs4sYt0urF4vM_8oxrdfxml:
  795|   589k|    pub fn new(
  796|   589k|        subject: impl Into<Subject>,
  797|   589k|        predicate: impl Into<NamedNode>,
  798|   589k|        object: impl Into<Term>,
  799|   589k|    ) -> Self {
  800|   589k|        Self {
  801|   589k|            subject: subject.into(),
  802|   589k|            predicate: predicate.into(),
  803|   589k|            object: object.into(),
  804|   589k|        }
  805|   589k|    }
_RINvMs16_NtCs1JxAZnM7jd_5oxrdf6tripleNtB7_6Triple3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtB7_4TermECs4sYt0urF4vM_8oxrdfxml:
  795|   121k|    pub fn new(
  796|   121k|        subject: impl Into<Subject>,
  797|   121k|        predicate: impl Into<NamedNode>,
  798|   121k|        object: impl Into<Term>,
  799|   121k|    ) -> Self {
  800|   121k|        Self {
  801|   121k|            subject: subject.into(),
  802|   121k|            predicate: predicate.into(),
  803|   121k|            object: object.into(),
  804|   121k|        }
  805|   121k|    }
_RINvMs16_NtCs1JxAZnM7jd_5oxrdf6tripleNtB7_6Triple3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtNtB9_7literal7LiteralECs4sYt0urF4vM_8oxrdfxml:
  795|  5.52k|    pub fn new(
  796|  5.52k|        subject: impl Into<Subject>,
  797|  5.52k|        predicate: impl Into<NamedNode>,
  798|  5.52k|        object: impl Into<Term>,
  799|  5.52k|    ) -> Self {
  800|  5.52k|        Self {
  801|  5.52k|            subject: subject.into(),
  802|  5.52k|            predicate: predicate.into(),
  803|  5.52k|            object: object.into(),
  804|  5.52k|        }
  805|  5.52k|    }
_RNvXse_NtCs1JxAZnM7jd_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|  4.47k|    fn from(node: NamedNode) -> Self {
  201|  4.47k|        Self::NamedNode(node)
  202|  4.47k|    }
_RNvXsg_NtCs1JxAZnM7jd_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|   611k|    fn from(node: BlankNode) -> Self {
  215|   611k|        Self::BlankNode(node)
  216|   611k|    }
_RNvXsA_NtCs1JxAZnM7jd_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|   594k|    fn from(node: NamedNode) -> Self {
  438|   594k|        Self::NamedNode(node)
  439|   594k|    }
_RNvXsC_NtCs1JxAZnM7jd_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  451|  16.5k|    fn from(node: BlankNode) -> Self {
  452|  16.5k|        Self::BlankNode(node)
  453|  16.5k|    }
_RNvXsE_NtCs1JxAZnM7jd_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  465|   105k|    fn from(literal: Literal) -> Self {
  466|   105k|        Self::Literal(literal)
  467|   105k|    }

_RNvXs_NtCs4sYt0urF4vM_8oxrdfxml5errorNtB4_16RdfXmlParseErrorINtNtCscdEvteftVc2_4core7convert4FromNtNtCs4QWtT85WPeh_9quick_xml6errors5ErrorE4fromB6_:
   30|   854k|    fn from(error: quick_xml::Error) -> Self {
   31|   854k|        match error {
   32|      0|            quick_xml::Error::Io(error) => {
   33|      0|                Self::Io(Arc::try_unwrap(error).unwrap_or_else(|e| io::Error::new(e.kind(), e)))
   34|       |            }
   35|   854k|            _ => Self::Syntax(RdfXmlSyntaxError(SyntaxErrorKind::Xml(error))),
   36|       |        }
   37|   854k|    }
_RNvXs6_NtCs4sYt0urF4vM_8oxrdfxml5errorNtB5_16RdfXmlParseErrorINtNtCscdEvteftVc2_4core7convert4FromNtB5_17RdfXmlSyntaxErrorE4from:
    7|   773k|#[derive(Debug, thiserror::Error)]
_RNvXs9_NtCs4sYt0urF4vM_8oxrdfxml5errorNtB5_17RdfXmlSyntaxErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
   41|  1.62M|#[derive(Debug, thiserror::Error)]
_RNvXsd_NtCs4sYt0urF4vM_8oxrdfxml5errorNtB5_15SyntaxErrorKindNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
   45|  1.62M|#[derive(Debug, thiserror::Error)]
_RINvMs0_NtCs4sYt0urF4vM_8oxrdfxml5errorNtB6_17RdfXmlSyntaxError3msgNtNtCs3OstG5Tqy1X_5alloc6string6StringEB8_:
   68|   347k|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   69|   347k|        Self(SyntaxErrorKind::Msg(msg.into()))
   70|   347k|    }
_RINvMs0_NtCs4sYt0urF4vM_8oxrdfxml5errorNtB6_17RdfXmlSyntaxError3msgReEB8_:
   68|   277k|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   69|   277k|        Self(SyntaxErrorKind::Msg(msg.into()))
   70|   277k|    }

_RNvMNtCs4sYt0urF4vM_8oxrdfxml6parserNtB2_12RdfXmlParser3newCs2kjnqOcnWhU_7rdf_xml:
   64|  81.2k|    pub fn new() -> Self {
   65|  81.2k|        Self::default()
   66|  81.2k|    }
_RNvMNtCs4sYt0urF4vM_8oxrdfxml6parserNtB2_12RdfXmlParser9uncheckedCs2kjnqOcnWhU_7rdf_xml:
   74|  1.41k|    pub fn unchecked(mut self) -> Self {
   75|  1.41k|        self.unchecked = true;
   76|  1.41k|        self
   77|  1.41k|    }
_RINvMNtCs4sYt0urF4vM_8oxrdfxml6parserNtB3_12RdfXmlParser5parseRShEB5_:
  201|  81.2k|    fn parse<T>(&self, reader: T) -> RdfXmlReader<T> {
  202|  81.2k|        let mut reader = NsReader::from_reader(reader);
  203|  81.2k|        reader.config_mut().expand_empty_elements = true;
  204|  81.2k|        RdfXmlReader {
  205|  81.2k|            reader,
  206|  81.2k|            state: vec![RdfXmlState::Doc {
  207|  81.2k|                base_iri: self.base.clone(),
  208|  81.2k|            }],
  209|  81.2k|            custom_entities: HashMap::default(),
  210|  81.2k|            in_literal_depth: 0,
  211|  81.2k|            known_rdf_id: HashSet::default(),
  212|  81.2k|            is_end: false,
  213|  81.2k|            unchecked: self.unchecked,
  214|  81.2k|        }
  215|  81.2k|    }
_RNvMs5_NtCs4sYt0urF4vM_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE11parse_eventB7_:
  781|  4.20M|    fn parse_event(
  782|  4.20M|        &mut self,
  783|  4.20M|        event: Event<'_>,
  784|  4.20M|        results: &mut Vec<Triple>,
  785|  4.20M|    ) -> Result<(), RdfXmlParseError> {
  786|  4.20M|        match event {
  787|  1.79M|            Event::Start(event) => self.parse_start_event(&event, results),
  788|   534k|            Event::End(event) => self.parse_end_event(&event, results),
  789|      0|            Event::Empty(_) => Err(RdfXmlSyntaxError::msg(
  790|      0|                "The expand_empty_elements option must be enabled",
  791|      0|            )
  792|      0|            .into()),
  793|  1.69M|            Event::Text(event) => self.parse_text_event(&event),
  794|      0|            Event::CData(event) => self.parse_text_event(&event.escape()?),
  795|  21.5k|            Event::Comment(_) | Event::PI(_) => Ok(()),
  796|  84.4k|            Event::Decl(decl) => {
  797|  84.4k|                if let Some(encoding) = decl.encoding() {
  798|  79.0k|                    if !is_utf8(&encoding?) {
  799|  28.6k|                        return Err(RdfXmlSyntaxError::msg(
  800|  28.6k|                            "Only UTF-8 is supported by the RDF/XML parser",
  801|  28.6k|                        )
  802|  28.6k|                        .into());
  803|  40.3k|                    }
  804|  5.38k|                }
  805|  45.7k|                Ok(())
  806|       |            }
  807|      0|            Event::DocType(dt) => self.parse_doctype(&dt),
  808|       |            Event::Eof => {
  809|  81.2k|                self.is_end = true;
  810|  81.2k|                Ok(())
  811|       |            }
  812|       |        }
  813|  4.20M|    }
_RNvMs5_NtCs4sYt0urF4vM_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE17parse_start_eventB7_:
  853|  1.79M|    fn parse_start_event(
  854|  1.79M|        &mut self,
  855|  1.79M|        event: &BytesStart<'_>,
  856|  1.79M|        results: &mut Vec<Triple>,
  857|  1.79M|    ) -> Result<(), RdfXmlParseError> {
  858|       |        #[derive(PartialEq, Eq)]
  859|       |        enum RdfXmlParseType {
  860|       |            Default,
  861|       |            Collection,
  862|       |            Literal,
  863|       |            Resource,
  864|       |            Other,
  865|       |        }
  866|       |
  867|       |        #[derive(PartialEq, Eq)]
  868|       |        enum RdfXmlNextProduction {
  869|       |            Rdf,
  870|       |            NodeElt,
  871|       |            PropertyElt { subject: Subject },
  872|       |        }
  873|       |
  874|       |        // Literal case
  875|  1.79M|        if let Some(RdfXmlState::ParseTypeLiteralPropertyElt { writer, .. }) = self.state.last_mut()
  876|       |        {
  877|  47.8k|            let mut clean_event = BytesStart::new(
  878|  52.7k|                self.reader
  879|  52.7k|                    .decoder()
  880|  52.7k|                    .decode(event.name().as_ref())?
  881|  47.8k|                    .to_string(),
  882|       |            );
  883|  47.8k|            for attr in event.attributes() {
  884|  27.8k|                clean_event.push_attribute(attr.map_err(Error::InvalidAttr)?);
  885|       |            }
  886|  31.4k|            writer.write_event(Event::Start(clean_event))?;
  887|  31.4k|            self.in_literal_depth += 1;
  888|  31.4k|            return Ok(());
  889|  1.74M|        }
  890|       |
  891|  1.74M|        let tag_name = self.resolve_tag_name(event.name())?;
  892|       |
  893|       |        // We read attributes
  894|  1.32M|        let (mut language, mut base_iri) = if let Some(current_state) = self.state.last() {
  895|  1.29M|            (
  896|  1.29M|                current_state.language().cloned(),
  897|  1.29M|                current_state.base_iri().cloned(),
  898|  1.29M|            )
  899|       |        } else {
  900|  27.1k|            (None, None)
  901|       |        };
  902|       |
  903|  1.32M|        let mut id_attr = None;
  904|  1.32M|        let mut node_id_attr = None;
  905|  1.32M|        let mut about_attr = None;
  906|  1.32M|        let mut property_attrs = Vec::default();
  907|  1.32M|        let mut resource_attr = None;
  908|  1.32M|        let mut datatype_attr = None;
  909|  1.32M|        let mut parse_type = RdfXmlParseType::Default;
  910|  1.32M|        let mut type_attr = None;
  911|       |
  912|  1.32M|        for attribute in event.attributes() {
  913|   869k|            let attribute = attribute.map_err(Error::InvalidAttr)?;
  914|   829k|            if attribute.key.as_ref().starts_with(b"xml") {
  915|   406k|                if attribute.key.as_ref() == b"xml:lang" {
  916|      0|                    let tag = self.convert_attribute(&attribute)?.to_ascii_lowercase();
  917|      0|                    language = Some(if self.unchecked {
  918|      0|                        tag
  919|       |                    } else {
  920|      0|                        LanguageTag::parse(tag.to_ascii_lowercase())
  921|      0|                            .map_err(|error| {
  922|       |                                RdfXmlSyntaxError(SyntaxErrorKind::InvalidLanguageTag {
  923|       |                                    tag,
  924|       |                                    error,
  925|       |                                })
  926|      0|                            })?
  927|      0|                            .into_inner()
  928|       |                    });
  929|   406k|                } else if attribute.key.as_ref() == b"xml:base" {
  930|      0|                    let iri = self.convert_attribute(&attribute)?;
  931|      0|                    base_iri = Some(if self.unchecked {
  932|      0|                        Iri::parse_unchecked(iri.clone())
  933|       |                    } else {
  934|      0|                        Iri::parse(iri.clone()).map_err(|error| {
  935|       |                            RdfXmlSyntaxError(SyntaxErrorKind::InvalidIri { iri, error })
  936|      0|                        })?
  937|       |                    })
  938|   406k|                } else {
  939|   406k|                    // We ignore other xml attributes
  940|   406k|                }
  941|       |            } else {
  942|   423k|                let attribute_url = self.resolve_attribute_name(attribute.key)?;
  943|   417k|                if *attribute_url == *RDF_ID {
  944|  5.65k|                    let mut id = self.convert_attribute(&attribute)?;
  945|  5.03k|                    if !is_nc_name(&id) {
  946|  2.65k|                        return Err(RdfXmlSyntaxError::msg(format!(
  947|  2.65k|                            "{id} is not a valid rdf:ID value"
  948|  2.65k|                        ))
  949|  2.65k|                        .into());
  950|  2.37k|                    }
  951|  2.37k|                    id.insert(0, '#');
  952|  2.37k|                    id_attr = Some(id);
  953|   412k|                } else if *attribute_url == *RDF_BAG_ID {
  954|  10.6k|                    let bag_id = self.convert_attribute(&attribute)?;
  955|  9.02k|                    if !is_nc_name(&bag_id) {
  956|  5.81k|                        return Err(RdfXmlSyntaxError::msg(format!(
  957|  5.81k|                            "{bag_id} is not a valid rdf:bagID value"
  958|  5.81k|                        ))
  959|  5.81k|                        .into());
  960|  3.20k|                    }
  961|   401k|                } else if *attribute_url == *RDF_NODE_ID {
  962|   330k|                    let id = self.convert_attribute(&attribute)?;
  963|   328k|                    if !is_nc_name(&id) {
  964|  3.75k|                        return Err(RdfXmlSyntaxError::msg(format!(
  965|  3.75k|                            "{id} is not a valid rdf:nodeID value"
  966|  3.75k|                        ))
  967|  3.75k|                        .into());
  968|   324k|                    }
  969|   324k|                    node_id_attr = Some(BlankNode::new_unchecked(id));
  970|  71.4k|                } else if *attribute_url == *RDF_ABOUT {
  971|  9.24k|                    about_attr = Some(attribute);
  972|  62.1k|                } else if *attribute_url == *RDF_RESOURCE {
  973|  9.69k|                    resource_attr = Some(attribute);
  974|  52.4k|                } else if *attribute_url == *RDF_DATATYPE {
  975|  10.4k|                    datatype_attr = Some(attribute);
  976|  42.0k|                } else if *attribute_url == *RDF_PARSE_TYPE {
  977|  9.51k|                    parse_type = match attribute.value.as_ref() {
  978|  9.51k|                        b"Collection" => RdfXmlParseType::Collection,
  979|  8.28k|                        b"Literal" => RdfXmlParseType::Literal,
  980|  5.11k|                        b"Resource" => RdfXmlParseType::Resource,
  981|  9.51k|                        _ => RdfXmlParseType::Other,
  982|       |                    };
  983|  32.5k|                } else if attribute_url == rdf::TYPE.as_str() {
  984|  5.10k|                    type_attr = Some(attribute);
  985|  27.4k|                } else if RESERVED_RDF_ATTRIBUTES.contains(&&*attribute_url) {
  986|  3.63k|                    return Err(RdfXmlSyntaxError::msg(format!(
  987|  3.63k|                        "{attribute_url} is not a valid attribute"
  988|  3.63k|                    ))
  989|  3.63k|                    .into());
  990|       |                } else {
  991|  23.8k|                    property_attrs.push((
  992|  23.8k|                        self.parse_iri(attribute_url)?,
  993|  19.0k|                        self.convert_attribute(&attribute)?,
  994|       |                    ));
  995|       |                }
  996|       |            }
  997|       |        }
  998|       |
  999|       |        // Parsing with the base URI
 1000|  1.24M|        let id_attr = match id_attr {
 1001|  1.22k|            Some(iri) => {
 1002|  1.22k|                let iri = self.resolve_iri(&base_iri, iri)?;
 1003|      0|                if !self.unchecked {
 1004|      0|                    if self.known_rdf_id.contains(iri.as_str()) {
 1005|      0|                        return Err(RdfXmlSyntaxError::msg(format!(
 1006|      0|                            "{iri} has already been used as rdf:ID value"
 1007|      0|                        ))
 1008|      0|                        .into());
 1009|      0|                    }
 1010|      0|                    self.known_rdf_id.insert(iri.as_str().into());
 1011|      0|                }
 1012|      0|                Some(iri)
 1013|       |            }
 1014|  1.24M|            None => None,
 1015|       |        };
 1016|  1.24M|        let about_attr = match about_attr {
 1017|  8.20k|            Some(attr) => Some(self.convert_iri_attribute(&base_iri, &attr)?),
 1018|  1.23M|            None => None,
 1019|       |        };
 1020|  1.24M|        let resource_attr = match resource_attr {
 1021|  8.76k|            Some(attr) => Some(self.convert_iri_attribute(&base_iri, &attr)?),
 1022|  1.23M|            None => None,
 1023|       |        };
 1024|  1.24M|        let datatype_attr = match datatype_attr {
 1025|  9.54k|            Some(attr) => Some(self.convert_iri_attribute(&base_iri, &attr)?),
 1026|  1.23M|            None => None,
 1027|       |        };
 1028|  1.24M|        let type_attr = match type_attr {
 1029|  4.29k|            Some(attr) => Some(self.convert_iri_attribute(&base_iri, &attr)?),
 1030|  1.23M|            None => None,
 1031|       |        };
 1032|       |
 1033|  1.23M|        let expected_production = match self.state.last() {
 1034|   157k|            Some(RdfXmlState::Doc { .. }) => RdfXmlNextProduction::Rdf,
 1035|       |            Some(
 1036|       |                RdfXmlState::Rdf { .. }
 1037|       |                | RdfXmlState::PropertyElt { .. }
 1038|       |                | RdfXmlState::ParseTypeCollectionPropertyElt { .. },
 1039|   622k|            ) => RdfXmlNextProduction::NodeElt,
 1040|   438k|            Some(RdfXmlState::NodeElt { subject, .. }) => RdfXmlNextProduction::PropertyElt {
 1041|   438k|                subject: subject.clone(),
 1042|   438k|            },
 1043|       |            Some(RdfXmlState::ParseTypeLiteralPropertyElt { .. }) => {
 1044|      0|                return Err(
 1045|      0|                    RdfXmlSyntaxError::msg("ParseTypeLiteralPropertyElt production children should never be considered as a RDF/XML content").into()
 1046|      0|                );
 1047|       |            }
 1048|       |            None => {
 1049|  20.4k|                return Err(RdfXmlSyntaxError::msg(
 1050|  20.4k|                    "No state in the stack: the XML is not balanced",
 1051|  20.4k|                )
 1052|  20.4k|                .into());
 1053|       |            }
 1054|       |        };
 1055|       |
 1056|  1.21M|        let new_state = match expected_production {
 1057|       |            RdfXmlNextProduction::Rdf => {
 1058|   157k|                if *tag_name == *RDF_RDF {
 1059|  41.1k|                    RdfXmlState::Rdf { base_iri, language }
 1060|   116k|                } else if RESERVED_RDF_ELEMENTS.contains(&&*tag_name) {
 1061|  13.1k|                    return Err(RdfXmlSyntaxError::msg(format!(
 1062|  13.1k|                        "Invalid node element tag name: {tag_name}"
 1063|  13.1k|                    ))
 1064|  13.1k|                    .into());
 1065|       |                } else {
 1066|       |                    Self::build_node_elt(
 1067|   103k|                        self.parse_iri(tag_name)?,
 1068|  26.4k|                        base_iri,
 1069|  26.4k|                        language,
 1070|  26.4k|                        id_attr,
 1071|  26.4k|                        node_id_attr,
 1072|  26.4k|                        about_attr,
 1073|  26.4k|                        type_attr,
 1074|  26.4k|                        property_attrs,
 1075|  26.4k|                        results,
 1076|      0|                    )?
 1077|       |                }
 1078|       |            }
 1079|       |            RdfXmlNextProduction::NodeElt => {
 1080|   622k|                if RESERVED_RDF_ELEMENTS.contains(&&*tag_name) {
 1081|  19.3k|                    return Err(RdfXmlSyntaxError::msg(format!(
 1082|  19.3k|                        "Invalid property element tag name: {tag_name}"
 1083|  19.3k|                    ))
 1084|  19.3k|                    .into());
 1085|   602k|                }
 1086|   602k|                Self::build_node_elt(
 1087|   602k|                    self.parse_iri(tag_name)?,
 1088|   577k|                    base_iri,
 1089|   577k|                    language,
 1090|   577k|                    id_attr,
 1091|   577k|                    node_id_attr,
 1092|   577k|                    about_attr,
 1093|   577k|                    type_attr,
 1094|   577k|                    property_attrs,
 1095|   577k|                    results,
 1096|      0|                )?
 1097|       |            }
 1098|   438k|            RdfXmlNextProduction::PropertyElt { subject } => {
 1099|   438k|                let iri = if *tag_name == *RDF_LI {
 1100|  4.78k|                    let Some(RdfXmlState::NodeElt { li_counter, .. }) = self.state.last_mut()
 1101|       |                    else {
 1102|      0|                        return Err(RdfXmlSyntaxError::msg(format!(
 1103|      0|                            "Invalid property element tag name: {tag_name}"
 1104|      0|                        ))
 1105|      0|                        .into());
 1106|       |                    };
 1107|  4.78k|                    *li_counter += 1;
 1108|  4.78k|                    NamedNode::new_unchecked(format!(
 1109|  4.78k|                        "http://www.w3.org/1999/02/22-rdf-syntax-ns#_{li_counter}"
 1110|  4.78k|                    ))
 1111|   434k|                } else if RESERVED_RDF_ELEMENTS.contains(&&*tag_name)
 1112|   417k|                    || *tag_name == *RDF_DESCRIPTION
 1113|       |                {
 1114|  21.7k|                    return Err(RdfXmlSyntaxError::msg(format!(
 1115|  21.7k|                        "Invalid property element tag name: {tag_name}"
 1116|  21.7k|                    ))
 1117|  21.7k|                    .into());
 1118|       |                } else {
 1119|   412k|                    self.parse_iri(tag_name)?
 1120|       |                };
 1121|   379k|                match parse_type {
 1122|       |                    RdfXmlParseType::Default => {
 1123|   377k|                        if resource_attr.is_some()
 1124|   372k|                            || node_id_attr.is_some()
 1125|   363k|                            || !property_attrs.is_empty()
 1126|       |                        {
 1127|  17.0k|                            let object = match (resource_attr, node_id_attr)
 1128|       |                    {
 1129|  5.27k|                        (Some(resource_attr), None) => Subject::from(resource_attr),
 1130|  9.41k|                        (None, Some(node_id_attr)) => node_id_attr.into(),
 1131|  2.40k|                        (None, None) => BlankNode::default().into(),
 1132|      0|                        (Some(_), Some(_)) => return Err(RdfXmlSyntaxError::msg("Not both rdf:resource and rdf:nodeID could be set at the same time").into())
 1133|       |                    };
 1134|  17.0k|                            Self::emit_property_attrs(&object, property_attrs, &language, results);
 1135|  17.0k|                            if let Some(type_attr) = type_attr {
 1136|    254|                                results.push(Triple::new(object.clone(), rdf::TYPE, type_attr));
 1137|  16.8k|                            }
 1138|  17.0k|                            RdfXmlState::PropertyElt {
 1139|  17.0k|                                iri,
 1140|  17.0k|                                base_iri,
 1141|  17.0k|                                language,
 1142|  17.0k|                                subject,
 1143|  17.0k|                                object: Some(NodeOrText::Node(object)),
 1144|  17.0k|                                id_attr,
 1145|  17.0k|                                datatype_attr,
 1146|  17.0k|                            }
 1147|       |                        } else {
 1148|   360k|                            RdfXmlState::PropertyElt {
 1149|   360k|                                iri,
 1150|   360k|                                base_iri,
 1151|   360k|                                language,
 1152|   360k|                                subject,
 1153|   360k|                                object: None,
 1154|   360k|                                id_attr,
 1155|   360k|                                datatype_attr,
 1156|   360k|                            }
 1157|       |                        }
 1158|       |                    }
 1159|      0|                    RdfXmlParseType::Literal => RdfXmlState::ParseTypeLiteralPropertyElt {
 1160|      0|                        iri,
 1161|      0|                        base_iri,
 1162|      0|                        language,
 1163|      0|                        subject,
 1164|      0|                        writer: Writer::new(Vec::default()),
 1165|      0|                        id_attr,
 1166|      0|                        emit: true,
 1167|      0|                    },
 1168|      0|                    RdfXmlParseType::Resource => Self::build_parse_type_resource_property_elt(
 1169|      0|                        iri, base_iri, language, subject, id_attr, results,
 1170|      0|                    ),
 1171|      0|                    RdfXmlParseType::Collection => RdfXmlState::ParseTypeCollectionPropertyElt {
 1172|      0|                        iri,
 1173|      0|                        base_iri,
 1174|      0|                        language,
 1175|      0|                        subject,
 1176|      0|                        objects: Vec::default(),
 1177|      0|                        id_attr,
 1178|      0|                    },
 1179|  2.10k|                    RdfXmlParseType::Other => RdfXmlState::ParseTypeLiteralPropertyElt {
 1180|  2.10k|                        iri,
 1181|  2.10k|                        base_iri,
 1182|  2.10k|                        language,
 1183|  2.10k|                        subject,
 1184|  2.10k|                        writer: Writer::new(Vec::default()),
 1185|  2.10k|                        id_attr,
 1186|  2.10k|                        emit: false,
 1187|  2.10k|                    },
 1188|       |                }
 1189|       |            }
 1190|       |        };
 1191|  1.02M|        self.state.push(new_state);
 1192|  1.02M|        Ok(())
 1193|  1.79M|    }
_RNvMs5_NtCs4sYt0urF4vM_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE15parse_end_eventB7_:
 1195|   534k|    fn parse_end_event(
 1196|   534k|        &mut self,
 1197|   534k|        event: &BytesEnd<'_>,
 1198|   534k|        results: &mut Vec<Triple>,
 1199|   534k|    ) -> Result<(), RdfXmlParseError> {
 1200|   534k|        // Literal case
 1201|   534k|        if self.in_literal_depth > 0 {
 1202|  9.86k|            if let Some(RdfXmlState::ParseTypeLiteralPropertyElt { writer, .. }) =
 1203|  9.86k|                self.state.last_mut()
 1204|       |            {
 1205|  9.86k|                writer.write_event(Event::End(BytesEnd::new(
 1206|  9.86k|                    self.reader.decoder().decode(event.name().as_ref())?,
 1207|      0|                )))?;
 1208|  7.56k|                self.in_literal_depth -= 1;
 1209|  7.56k|                return Ok(());
 1210|      0|            }
 1211|   524k|        }
 1212|       |
 1213|   524k|        if let Some(current_state) = self.state.pop() {
 1214|   500k|            self.end_state(current_state, results)?;
 1215|  23.2k|        }
 1216|   524k|        Ok(())
 1217|   534k|    }
_RNvMs5_NtCs4sYt0urF4vM_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE16parse_text_eventB7_:
 1219|  1.69M|    fn parse_text_event(&mut self, event: &BytesText<'_>) -> Result<(), RdfXmlParseError> {
 1220|  1.69M|        let text = event.unescape_with(|e| self.resolve_entity(e))?.to_string();
 1221|  1.11M|        match self.state.last_mut() {
 1222|   107k|            Some(RdfXmlState::PropertyElt { object, .. }) => {
 1223|   107k|                if !event.iter().copied().all(is_whitespace) {
 1224|   105k|                    *object = Some(NodeOrText::Text(text));
 1225|   105k|                }
 1226|   107k|                Ok(())
 1227|       |            }
 1228|  20.2k|            Some(RdfXmlState::ParseTypeLiteralPropertyElt { writer, .. }) => {
 1229|  20.2k|                writer.write_event(Event::Text(BytesText::new(&text)))?;
 1230|  20.2k|                Ok(())
 1231|       |            }
 1232|       |            _ => {
 1233|   987k|                if event.iter().copied().all(is_whitespace) {
 1234|   756k|                    Ok(())
 1235|       |                } else {
 1236|   230k|                    Err(RdfXmlSyntaxError::msg(format!("Unexpected text event: '{text}'")).into())
 1237|       |                }
 1238|       |            }
 1239|       |        }
 1240|  1.69M|    }
_RNCNvMs5_NtCs4sYt0urF4vM_8oxrdfxml6parserINtB7_12RdfXmlReaderRShE16parse_text_event0B9_:
 1220|   118k|        let text = event.unescape_with(|e| self.resolve_entity(e))?.to_string();
_RNvMs5_NtCs4sYt0urF4vM_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE16resolve_tag_nameB7_:
 1242|  1.74M|    fn resolve_tag_name(&self, qname: QName<'_>) -> Result<String, RdfXmlParseError> {
 1243|  1.74M|        let (namespace, local_name) = self.reader.resolve_element(qname);
 1244|  1.74M|        self.resolve_ns_name(namespace, local_name)
 1245|  1.74M|    }
_RNvMs5_NtCs4sYt0urF4vM_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE22resolve_attribute_nameB7_:
 1247|   423k|    fn resolve_attribute_name(&self, qname: QName<'_>) -> Result<String, RdfXmlParseError> {
 1248|   423k|        let (namespace, local_name) = self.reader.resolve_attribute(qname);
 1249|   423k|        self.resolve_ns_name(namespace, local_name)
 1250|   423k|    }
_RNvMs5_NtCs4sYt0urF4vM_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE15resolve_ns_nameB7_:
 1252|  2.16M|    fn resolve_ns_name(
 1253|  2.16M|        &self,
 1254|  2.16M|        namespace: ResolveResult<'_>,
 1255|  2.16M|        local_name: LocalName<'_>,
 1256|  2.16M|    ) -> Result<String, RdfXmlParseError> {
 1257|  2.16M|        match namespace {
 1258|  1.87M|            ResolveResult::Bound(ns) => {
 1259|  1.87M|                let mut value = Vec::with_capacity(ns.as_ref().len() + local_name.as_ref().len());
 1260|  1.87M|                value.extend_from_slice(ns.as_ref());
 1261|  1.87M|                value.extend_from_slice(local_name.as_ref());
 1262|  1.87M|                Ok(unescape_with(&self.reader.decoder().decode(&value)?, |e| {
 1263|       |                    self.resolve_entity(e)
 1264|       |                })
 1265|  1.81M|                .map_err(Error::from)?
 1266|  1.74M|                .to_string())
 1267|       |            }
 1268|       |            ResolveResult::Unbound => {
 1269|   228k|                Err(RdfXmlSyntaxError::msg("XML namespaces are required in RDF/XML").into())
 1270|       |            }
 1271|  60.8k|            ResolveResult::Unknown(v) => Err(RdfXmlSyntaxError::msg(format!(
 1272|  60.8k|                "Unknown prefix {}:",
 1273|  60.8k|                self.reader.decoder().decode(&v)?
 1274|       |            ))
 1275|  46.3k|            .into()),
 1276|       |        }
 1277|  2.16M|    }
_RNCNvMs5_NtCs4sYt0urF4vM_8oxrdfxml6parserINtB7_12RdfXmlReaderRShE15resolve_ns_name0B9_:
 1262|  16.2M|                Ok(unescape_with(&self.reader.decoder().decode(&value)?, |e| {
 1263|  16.2M|                    self.resolve_entity(e)
 1264|  16.2M|                })
_RNvMs5_NtCs4sYt0urF4vM_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE14build_node_eltB7_:
 1280|   604k|    fn build_node_elt(
 1281|   604k|        iri: NamedNode,
 1282|   604k|        base_iri: Option<Iri<String>>,
 1283|   604k|        language: Option<String>,
 1284|   604k|        id_attr: Option<NamedNode>,
 1285|   604k|        node_id_attr: Option<BlankNode>,
 1286|   604k|        about_attr: Option<NamedNode>,
 1287|   604k|        type_attr: Option<NamedNode>,
 1288|   604k|        property_attrs: Vec<(NamedNode, String)>,
 1289|   604k|        results: &mut Vec<Triple>,
 1290|   604k|    ) -> Result<RdfXmlState, RdfXmlSyntaxError> {
 1291|   604k|        let subject = match (id_attr, node_id_attr, about_attr) {
 1292|      0|            (Some(id_attr), None, None) => Subject::from(id_attr),
 1293|   312k|            (None, Some(node_id_attr), None) => node_id_attr.into(),
 1294|  4.47k|            (None, None, Some(about_attr)) => about_attr.into(),
 1295|   287k|            (None, None, None) => BlankNode::default().into(),
 1296|       |            (Some(_), Some(_), _) => {
 1297|      0|                return Err(RdfXmlSyntaxError::msg(
 1298|      0|                    "Not both rdf:ID and rdf:nodeID could be set at the same time",
 1299|      0|                ))
 1300|       |            }
 1301|       |            (_, Some(_), Some(_)) => {
 1302|      0|                return Err(RdfXmlSyntaxError::msg(
 1303|      0|                    "Not both rdf:nodeID and rdf:resource could be set at the same time",
 1304|      0|                ))
 1305|       |            }
 1306|       |            (Some(_), _, Some(_)) => {
 1307|      0|                return Err(RdfXmlSyntaxError::msg(
 1308|      0|                    "Not both rdf:ID and rdf:resource could be set at the same time",
 1309|      0|                ))
 1310|       |            }
 1311|       |        };
 1312|       |
 1313|   604k|        Self::emit_property_attrs(&subject, property_attrs, &language, results);
 1314|       |
 1315|   604k|        if let Some(type_attr) = type_attr {
 1316|    713|            results.push(Triple::new(subject.clone(), rdf::TYPE, type_attr));
 1317|   603k|        }
 1318|       |
 1319|   604k|        if iri != *RDF_DESCRIPTION {
 1320|   588k|            results.push(Triple::new(subject.clone(), rdf::TYPE, iri));
 1321|   588k|        }
 1322|   604k|        Ok(RdfXmlState::NodeElt {
 1323|   604k|            base_iri,
 1324|   604k|            language,
 1325|   604k|            subject,
 1326|   604k|            li_counter: 0,
 1327|   604k|        })
 1328|   604k|    }
_RNvMs5_NtCs4sYt0urF4vM_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE9end_stateB7_:
 1352|   500k|    fn end_state(
 1353|   500k|        &mut self,
 1354|   500k|        state: RdfXmlState,
 1355|   500k|        results: &mut Vec<Triple>,
 1356|   500k|    ) -> Result<(), RdfXmlSyntaxError> {
 1357|   500k|        match state {
 1358|       |            RdfXmlState::PropertyElt {
 1359|   121k|                iri,
 1360|   121k|                language,
 1361|   121k|                subject,
 1362|   121k|                id_attr,
 1363|   121k|                datatype_attr,
 1364|   121k|                object,
 1365|       |                ..
 1366|       |            } => {
 1367|   121k|                let object = match object {
 1368|  21.4k|                    Some(NodeOrText::Node(node)) => Term::from(node),
 1369|  31.6k|                    Some(NodeOrText::Text(text)) => {
 1370|  31.6k|                        Self::new_literal(text, language, datatype_attr).into()
 1371|       |                    }
 1372|  68.2k|                    None => Self::new_literal(String::new(), language, datatype_attr).into(),
 1373|       |                };
 1374|   121k|                let triple = Triple::new(subject, iri, object);
 1375|   121k|                if let Some(id_attr) = id_attr {
 1376|      0|                    Self::reify(triple.clone(), id_attr, results);
 1377|   121k|                }
 1378|   121k|                results.push(triple);
 1379|       |            }
 1380|       |            RdfXmlState::ParseTypeCollectionPropertyElt {
 1381|      0|                iri,
 1382|      0|                subject,
 1383|      0|                id_attr,
 1384|      0|                objects,
 1385|      0|                ..
 1386|      0|            } => {
 1387|      0|                let mut current_node = Subject::from(rdf::NIL);
 1388|      0|                for object in objects.into_iter().rev() {
 1389|      0|                    let subject = Subject::from(BlankNode::default());
 1390|      0|                    results.push(Triple::new(subject.clone(), rdf::FIRST, object));
 1391|      0|                    results.push(Triple::new(subject.clone(), rdf::REST, current_node));
 1392|      0|                    current_node = subject;
 1393|      0|                }
 1394|      0|                let triple = Triple::new(subject, iri, current_node);
 1395|      0|                if let Some(id_attr) = id_attr {
 1396|      0|                    Self::reify(triple.clone(), id_attr, results);
 1397|      0|                }
 1398|      0|                results.push(triple);
 1399|       |            }
 1400|       |            RdfXmlState::ParseTypeLiteralPropertyElt {
 1401|    793|                iri,
 1402|    793|                subject,
 1403|    793|                id_attr,
 1404|    793|                writer,
 1405|    793|                emit,
 1406|    793|                ..
 1407|    793|            } => {
 1408|    793|                if emit {
 1409|      0|                    let object = writer.into_inner();
 1410|      0|                    if object.is_empty() {
 1411|      0|                        return Err(RdfXmlSyntaxError::msg(format!(
 1412|      0|                            "No value found for rdf:XMLLiteral value of property {iri}"
 1413|      0|                        )));
 1414|      0|                    }
 1415|      0|                    let triple = Triple::new(
 1416|      0|                        subject,
 1417|      0|                        iri,
 1418|      0|                        Literal::new_typed_literal(
 1419|      0|                            str::from_utf8(&object).map_err(|_| {
 1420|       |                                RdfXmlSyntaxError::msg(
 1421|       |                                    "The XML literal is not in valid UTF-8".to_owned(),
 1422|       |                                )
 1423|      0|                            })?,
 1424|       |                            rdf::XML_LITERAL,
 1425|       |                        ),
 1426|       |                    );
 1427|      0|                    if let Some(id_attr) = id_attr {
 1428|      0|                        Self::reify(triple.clone(), id_attr, results);
 1429|      0|                    }
 1430|      0|                    results.push(triple);
 1431|    793|                }
 1432|       |            }
 1433|   334k|            RdfXmlState::NodeElt { subject, .. } => match self.state.last_mut() {
 1434|  23.7k|                Some(RdfXmlState::PropertyElt { object, .. }) => {
 1435|  23.7k|                    *object = Some(NodeOrText::Node(subject))
 1436|       |                }
 1437|      0|                Some(RdfXmlState::ParseTypeCollectionPropertyElt { objects, .. }) => {
 1438|      0|                    objects.push(subject)
 1439|       |                }
 1440|   310k|                _ => (),
 1441|       |            },
 1442|  44.1k|            _ => (),
 1443|       |        }
 1444|   500k|        Ok(())
 1445|   500k|    }
_RNvMs5_NtCs4sYt0urF4vM_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE11new_literalB7_:
 1447|  99.9k|    fn new_literal(
 1448|  99.9k|        value: String,
 1449|  99.9k|        language: Option<String>,
 1450|  99.9k|        datatype: Option<NamedNode>,
 1451|  99.9k|    ) -> Literal {
 1452|  99.9k|        if let Some(datatype) = datatype {
 1453|  4.97k|            Literal::new_typed_literal(value, datatype)
 1454|  94.9k|        } else if let Some(language) = language {
 1455|      0|            Literal::new_language_tagged_literal_unchecked(value, language)
 1456|       |        } else {
 1457|  94.9k|            Literal::new_simple_literal(value)
 1458|       |        }
 1459|  99.9k|    }
_RNvMs5_NtCs4sYt0urF4vM_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE19emit_property_attrsB7_:
 1476|   621k|    fn emit_property_attrs(
 1477|   621k|        subject: &Subject,
 1478|   621k|        literal_attributes: Vec<(NamedNode, String)>,
 1479|   621k|        language: &Option<String>,
 1480|   621k|        results: &mut Vec<Triple>,
 1481|   621k|    ) {
 1482|   626k|        for (literal_predicate, literal_value) in literal_attributes {
 1483|  5.52k|            results.push(Triple::new(
 1484|  5.52k|                subject.clone(),
 1485|  5.52k|                literal_predicate,
 1486|  5.52k|                if let Some(language) = language.clone() {
 1487|      0|                    Literal::new_language_tagged_literal_unchecked(literal_value, language)
 1488|       |                } else {
 1489|  5.52k|                    Literal::new_simple_literal(literal_value)
 1490|       |                },
 1491|       |            ));
 1492|       |        }
 1493|   621k|    }
_RNvMs5_NtCs4sYt0urF4vM_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE17convert_attributeB7_:
 1495|   396k|    fn convert_attribute(&self, attribute: &Attribute<'_>) -> Result<String, RdfXmlParseError> {
 1496|   396k|        Ok(attribute
 1497|   396k|            .decode_and_unescape_value_with(self.reader.decoder(), |e| self.resolve_entity(e))?
 1498|   380k|            .into_owned())
 1499|   396k|    }
_RNCNvMs5_NtCs4sYt0urF4vM_8oxrdfxml6parserINtB7_12RdfXmlReaderRShE17convert_attribute0B9_:
 1497|  15.9k|            .decode_and_unescape_value_with(self.reader.decoder(), |e| self.resolve_entity(e))?
_RNvMs5_NtCs4sYt0urF4vM_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE21convert_iri_attributeB7_:
 1501|  30.8k|    fn convert_iri_attribute(
 1502|  30.8k|        &self,
 1503|  30.8k|        base_iri: &Option<Iri<String>>,
 1504|  30.8k|        attribute: &Attribute<'_>,
 1505|  30.8k|    ) -> Result<NamedNode, RdfXmlParseError> {
 1506|  30.8k|        Ok(self.resolve_iri(base_iri, self.convert_attribute(attribute)?)?)
 1507|  30.8k|    }
_RNvMs5_NtCs4sYt0urF4vM_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE11resolve_iriB7_:
 1509|  29.1k|    fn resolve_iri(
 1510|  29.1k|        &self,
 1511|  29.1k|        base_iri: &Option<Iri<String>>,
 1512|  29.1k|        relative_iri: String,
 1513|  29.1k|    ) -> Result<NamedNode, RdfXmlSyntaxError> {
 1514|  29.1k|        if let Some(base_iri) = base_iri {
 1515|       |            Ok(NamedNode::new_unchecked(
 1516|      0|                if self.unchecked {
 1517|      0|                    base_iri.resolve_unchecked(&relative_iri)
 1518|       |                } else {
 1519|      0|                    base_iri.resolve(&relative_iri).map_err(|error| {
 1520|       |                        RdfXmlSyntaxError(SyntaxErrorKind::InvalidIri {
 1521|       |                            iri: relative_iri,
 1522|       |                            error,
 1523|       |                        })
 1524|      0|                    })?
 1525|       |                }
 1526|      0|                .into_inner(),
 1527|       |            ))
 1528|       |        } else {
 1529|  29.1k|            self.parse_iri(relative_iri)
 1530|       |        }
 1531|  29.1k|    }
_RNvMs5_NtCs4sYt0urF4vM_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE9parse_iriB7_:
 1533|  1.17M|    fn parse_iri(&self, relative_iri: String) -> Result<NamedNode, RdfXmlSyntaxError> {
 1534|  1.17M|        Ok(NamedNode::new_unchecked(if self.unchecked {
 1535|  7.06k|            relative_iri
 1536|       |        } else {
 1537|  1.16M|            Iri::parse(relative_iri.clone())
 1538|  1.16M|                .map_err(|error| {
 1539|       |                    RdfXmlSyntaxError(SyntaxErrorKind::InvalidIri {
 1540|       |                        iri: relative_iri,
 1541|       |                        error,
 1542|       |                    })
 1543|  1.16M|                })?
 1544|  1.01M|                .into_inner()
 1545|       |        }))
 1546|  1.17M|    }
_RNCNvMs5_NtCs4sYt0urF4vM_8oxrdfxml6parserINtB7_12RdfXmlReaderRShE9parse_iri0B9_:
 1538|   148k|                .map_err(|error| {
 1539|   148k|                    RdfXmlSyntaxError(SyntaxErrorKind::InvalidIri {
 1540|   148k|                        iri: relative_iri,
 1541|   148k|                        error,
 1542|   148k|                    })
 1543|   148k|                })?
_RNvMs5_NtCs4sYt0urF4vM_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE14resolve_entityB7_:
 1548|  16.4M|    fn resolve_entity(&self, e: &str) -> Option<&str> {
 1549|  16.4M|        resolve_xml_entity(e).or_else(|| self.custom_entities.get(e).map(String::as_str))
 1550|  16.4M|    }
_RNCNvMs5_NtCs4sYt0urF4vM_8oxrdfxml6parserINtB7_12RdfXmlReaderRShE14resolve_entity0B9_:
 1549|  67.4k|        resolve_xml_entity(e).or_else(|| self.custom_entities.get(e).map(String::as_str))
_RNCNvNtCs4sYt0urF4vM_8oxrdfxml6parser10is_nc_name0B5_:
 1555|  9.92M|    is_name(name) && name.chars().all(|c| c != ':')
_RNvMNtCs4sYt0urF4vM_8oxrdfxml6parserNtB2_12RdfXmlParser11parse_slice:
  193|  81.2k|    pub fn parse_slice(self, slice: &[u8]) -> FromSliceRdfXmlReader<'_> {
  194|  81.2k|        FromSliceRdfXmlReader {
  195|  81.2k|            results: Vec::new(),
  196|  81.2k|            reader: self.parse(slice),
  197|  81.2k|            reader_buffer: Vec::default(),
  198|  81.2k|        }
  199|  81.2k|    }
_RNvXs1_NtCs4sYt0urF4vM_8oxrdfxml6parserNtB5_21FromSliceRdfXmlReaderNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next:
  524|  2.42M|    fn next(&mut self) -> Option<Self::Item> {
  525|       |        loop {
  526|  5.04M|            if let Some(triple) = self.results.pop() {
  527|   716k|                return Some(Ok(triple));
  528|  4.32M|            } else if self.reader.is_end {
  529|  81.2k|                return None;
  530|  4.24M|            }
  531|  4.24M|            if let Err(RdfXmlParseError::Syntax(e)) = self.parse_step() {
  532|       |                // I/O errors can't happen
  533|  1.62M|                return Some(Err(e));
  534|  2.62M|            }
  535|       |        }
  536|  2.42M|    }
_RNvMs2_NtCs4sYt0urF4vM_8oxrdfxml6parserNtB5_21FromSliceRdfXmlReader10parse_step:
  606|  4.24M|    fn parse_step(&mut self) -> Result<(), RdfXmlParseError> {
  607|  4.24M|        self.reader_buffer.clear();
  608|  4.24M|        let event = self
  609|  4.24M|            .reader
  610|  4.24M|            .reader
  611|  4.24M|            .read_event_into(&mut self.reader_buffer)?;
  612|  4.20M|        self.reader.parse_event(event, &mut self.results)
  613|  4.24M|    }
_RNvMs4_NtCs4sYt0urF4vM_8oxrdfxml6parserNtB5_11RdfXmlState8base_iri:
  747|  1.29M|    fn base_iri(&self) -> Option<&Iri<String>> {
  748|  1.29M|        match self {
  749|   195k|            Self::Doc { base_iri, .. }
  750|   305k|            | Self::Rdf { base_iri, .. }
  751|   464k|            | Self::NodeElt { base_iri, .. }
  752|   332k|            | Self::PropertyElt { base_iri, .. }
  753|      0|            | Self::ParseTypeCollectionPropertyElt { base_iri, .. }
  754|  1.29M|            | Self::ParseTypeLiteralPropertyElt { base_iri, .. } => base_iri.as_ref(),
  755|  1.29M|        }
  756|  1.29M|    }
_RNvMs4_NtCs4sYt0urF4vM_8oxrdfxml6parserNtB5_11RdfXmlState8language:
  758|  1.29M|    fn language(&self) -> Option<&String> {
  759|  1.29M|        match self {
  760|   195k|            Self::Doc { .. } => None,
  761|   305k|            Self::Rdf { language, .. }
  762|   464k|            | Self::NodeElt { language, .. }
  763|   332k|            | Self::PropertyElt { language, .. }
  764|      0|            | Self::ParseTypeCollectionPropertyElt { language, .. }
  765|  1.10M|            | Self::ParseTypeLiteralPropertyElt { language, .. } => language.as_ref(),
  766|       |        }
  767|  1.29M|    }
_RNvNtCs4sYt0urF4vM_8oxrdfxml6parser10is_nc_name:
 1553|   342k|fn is_nc_name(name: &str) -> bool {
 1554|   342k|    // Name - (Char* ':' Char*)
 1555|   342k|    is_name(name) && name.chars().all(|c| c != ':')
 1556|   342k|}
_RNvNtCs4sYt0urF4vM_8oxrdfxml6parser7is_name:
 1558|   342k|fn is_name(name: &str) -> bool {
 1559|   342k|    // NameStartChar (NameChar)*
 1560|   342k|    let mut c = name.chars();
 1561|   342k|    if !c.next().map_or(false, is_name_start_char) {
 1562|  5.26k|        return false;
 1563|   336k|    }
 1564|   336k|    c.all(is_name_char)
 1565|   342k|}
_RNvNtCs4sYt0urF4vM_8oxrdfxml6parser13is_whitespace:
 1567|  1.85M|fn is_whitespace(c: u8) -> bool {
 1568|  1.85M|    matches!(c, b' ' | b'\t' | b'\n' | b'\r')
 1569|  1.85M|}
_RNvNtCs4sYt0urF4vM_8oxrdfxml6parser7is_utf8:
 1571|  69.0k|fn is_utf8(encoding: &[u8]) -> bool {
 1572|  40.3k|    matches!(
 1573|  69.0k|        encoding.to_ascii_lowercase().as_slice(),
 1574|  69.0k|        b"unicode-1-1-utf-8"
 1575|  62.7k|            | b"unicode11utf8"
 1576|       |            | b"unicode20utf8"
 1577|  54.4k|            | b"utf-8"
 1578|  12.2k|            | b"utf8"
 1579|  10.5k|            | b"x-unicode20utf8"
 1580|       |    )
 1581|  69.0k|}

_RINvMNtCs4sYt0urF4vM_8oxrdfxml10serializerNtB3_16RdfXmlSerializer18serialize_to_writeINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECs2kjnqOcnWhU_7rdf_xml:
   92|  39.9k|    pub fn serialize_to_write<W: Write>(self, write: W) -> ToWriteRdfXmlWriter<W> {
   93|  39.9k|        ToWriteRdfXmlWriter {
   94|  39.9k|            writer: Writer::new_with_indent(write, b'\t', 1),
   95|  39.9k|            inner: self.inner_writer(),
   96|  39.9k|        }
   97|  39.9k|    }
_RINvMs0_NtCs4sYt0urF4vM_8oxrdfxml10serializerNtB6_17InnerRdfXmlWriter12write_tripleRNtNtCs1JxAZnM7jd_5oxrdf6triple6TripleECs2kjnqOcnWhU_7rdf_xml:
  276|   356k|    fn write_triple<'a>(
  277|   356k|        &mut self,
  278|   356k|        t: impl Into<TripleRef<'a>>,
  279|   356k|        output: &mut Vec<Event<'a>>,
  280|   356k|    ) -> io::Result<()> {
  281|   356k|        if self.current_subject.is_none() {
  282|  19.7k|            self.write_start(output);
  283|   336k|        }
  284|       |
  285|   356k|        let triple = t.into();
  286|   356k|        // We open a new rdf:Description if useful
  287|   356k|        if self.current_subject.as_ref().map(Subject::as_ref) != Some(triple.subject) {
  288|   304k|            if self.current_subject.is_some() {
  289|   284k|                output.push(Event::End(
  290|   284k|                    self.current_resource_tag
  291|   284k|                        .take()
  292|   284k|                        .map_or_else(|| BytesEnd::new("rdf:Description"), BytesEnd::new),
  293|   284k|                ));
  294|   284k|            }
  295|   304k|            self.current_subject = Some(triple.subject.into_owned());
  296|       |
  297|   304k|            let (mut description_open, with_type_tag) = if triple.predicate == rdf::TYPE {
  298|   291k|                if let TermRef::NamedNode(t) = triple.object {
  299|   291k|                    let (prop_qname, prop_xmlns) = self.uri_to_qname_and_xmlns(t);
  300|   291k|                    let mut description_open = BytesStart::new(prop_qname.clone());
  301|   291k|                    if let Some(prop_xmlns) = prop_xmlns {
  302|   285k|                        description_open.push_attribute(prop_xmlns);
  303|   285k|                    }
  304|   291k|                    self.current_resource_tag = Some(prop_qname.into_owned());
  305|   291k|                    (description_open, true)
  306|       |                } else {
  307|    388|                    (BytesStart::new("rdf:Description"), false)
  308|       |                }
  309|       |            } else {
  310|  13.0k|                (BytesStart::new("rdf:Description"), false)
  311|       |            };
  312|   304k|            match triple.subject {
  313|  2.49k|                SubjectRef::NamedNode(node) => {
  314|  2.49k|                    description_open.push_attribute(("rdf:about", node.as_str()))
  315|       |                }
  316|   302k|                SubjectRef::BlankNode(node) => {
  317|   302k|                    description_open.push_attribute(("rdf:nodeID", node.as_str()))
  318|       |                }
  319|       |                _ => {
  320|      0|                    return Err(io::Error::new(
  321|      0|                        io::ErrorKind::InvalidInput,
  322|      0|                        "RDF/XML only supports named or blank subject",
  323|      0|                    ))
  324|       |                }
  325|       |            }
  326|   304k|            output.push(Event::Start(description_open));
  327|   304k|            if with_type_tag {
  328|   291k|                return Ok(()); // No need for a value
  329|  13.4k|            }
  330|  51.4k|        }
  331|       |
  332|  64.8k|        let (prop_qname, prop_xmlns) = self.uri_to_qname_and_xmlns(triple.predicate);
  333|  64.8k|        let mut property_open = BytesStart::new(prop_qname.clone());
  334|  64.8k|        if let Some(prop_xmlns) = prop_xmlns {
  335|  52.5k|            property_open.push_attribute(prop_xmlns);
  336|  52.5k|        }
  337|  64.8k|        let content = match triple.object {
  338|  4.48k|            TermRef::NamedNode(node) => {
  339|  4.48k|                property_open.push_attribute(("rdf:resource", node.as_str()));
  340|  4.48k|                None
  341|       |            }
  342|  8.10k|            TermRef::BlankNode(node) => {
  343|  8.10k|                property_open.push_attribute(("rdf:nodeID", node.as_str()));
  344|  8.10k|                None
  345|       |            }
  346|  52.3k|            TermRef::Literal(literal) => {
  347|  52.3k|                if let Some(language) = literal.language() {
  348|      0|                    property_open.push_attribute(("xml:lang", language));
  349|  52.3k|                } else if !literal.is_plain() {
  350|  2.35k|                    property_open.push_attribute(("rdf:datatype", literal.datatype().as_str()));
  351|  49.9k|                }
  352|  52.3k|                Some(literal.value())
  353|       |            }
  354|       |            _ => {
  355|      0|                return Err(io::Error::new(
  356|      0|                    io::ErrorKind::InvalidInput,
  357|      0|                    "RDF/XML only supports named, blank or literal object",
  358|      0|                ))
  359|       |            }
  360|       |        };
  361|  64.8k|        if let Some(content) = content {
  362|  52.3k|            output.push(Event::Start(property_open));
  363|  52.3k|            output.push(Event::Text(BytesText::new(content)));
  364|  52.3k|            output.push(Event::End(BytesEnd::new(prop_qname)));
  365|  52.3k|        } else {
  366|  12.5k|            output.push(Event::Empty(property_open));
  367|  12.5k|        }
  368|  64.8k|        Ok(())
  369|   356k|    }
_RINvMs_NtCs4sYt0urF4vM_8oxrdfxml10serializerINtB5_19ToWriteRdfXmlWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE12write_tripleRNtNtCs1JxAZnM7jd_5oxrdf6triple6TripleECs2kjnqOcnWhU_7rdf_xml:
  184|   356k|    pub fn write_triple<'a>(&mut self, t: impl Into<TripleRef<'a>>) -> io::Result<()> {
  185|   356k|        let mut buffer = Vec::new();
  186|   356k|        self.inner.write_triple(t, &mut buffer)?;
  187|   356k|        self.flush_buffer(&mut buffer)
  188|   356k|    }
_RNCINvMs0_NtCs4sYt0urF4vM_8oxrdfxml10serializerNtB8_17InnerRdfXmlWriter12write_tripleRNtNtCs1JxAZnM7jd_5oxrdf6triple6TripleE0Cs2kjnqOcnWhU_7rdf_xml:
  292|  11.6k|                        .map_or_else(|| BytesEnd::new("rdf:Description"), BytesEnd::new),
_RNvMs_NtCs4sYt0urF4vM_8oxrdfxml10serializerINtB4_19ToWriteRdfXmlWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE12flush_bufferCs2kjnqOcnWhU_7rdf_xml:
  198|   395k|    fn flush_buffer(&mut self, buffer: &mut Vec<Event<'_>>) -> io::Result<()> {
  199|   898k|        for event in buffer.drain(0..) {
  200|   898k|            self.writer.write_event(event).map_err(map_err)?;
  201|       |        }
  202|   395k|        Ok(())
  203|   395k|    }
_RNvMs_NtCs4sYt0urF4vM_8oxrdfxml10serializerINtB4_19ToWriteRdfXmlWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE6finishCs2kjnqOcnWhU_7rdf_xml:
  191|  39.9k|    pub fn finish(mut self) -> io::Result<W> {
  192|  39.9k|        let mut buffer = Vec::new();
  193|  39.9k|        self.inner.finish(&mut buffer);
  194|  39.9k|        self.flush_buffer(&mut buffer)?;
  195|  39.9k|        Ok(self.writer.into_inner())
  196|  39.9k|    }
_RNvMNtCs4sYt0urF4vM_8oxrdfxml10serializerNtB2_16RdfXmlSerializer3newCs2kjnqOcnWhU_7rdf_xml:
   47|  39.9k|    pub fn new() -> Self {
   48|  39.9k|        Self {
   49|  39.9k|            prefixes: BTreeMap::new(),
   50|  39.9k|        }
   51|  39.9k|    }
_RNCNvMs0_NtCs4sYt0urF4vM_8oxrdfxml10serializerNtB7_17InnerRdfXmlWriter6finish0B9_:
  388|  1.74k|                    .map_or_else(|| BytesEnd::new("rdf:Description"), BytesEnd::new),
_RNCNvNtCs4sYt0urF4vM_8oxrdfxml10serializer9split_iri0B5_:
  429|  5.99M|    if let Some(position_base) = iri.rfind(|c| !is_name_char(c) || c == ':') {
_RNCNvNtCs4sYt0urF4vM_8oxrdfxml10serializer9split_iris_0B5_:
  430|   630k|        if let Some(position_add) = iri[position_base..].find(|c| is_name_start_char(c) && c != ':')
_RNvMNtCs4sYt0urF4vM_8oxrdfxml10serializerNtB2_16RdfXmlSerializer12inner_writer:
  139|  39.9k|    fn inner_writer(mut self) -> InnerRdfXmlWriter {
  140|  39.9k|        self.prefixes.insert(
  141|  39.9k|            "http://www.w3.org/1999/02/22-rdf-syntax-ns#".into(),
  142|  39.9k|            "rdf".into(),
  143|  39.9k|        );
  144|  39.9k|        InnerRdfXmlWriter {
  145|  39.9k|            current_subject: None,
  146|  39.9k|            current_resource_tag: None,
  147|  39.9k|            prefixes: self.prefixes,
  148|  39.9k|        }
  149|  39.9k|    }
_RNvMs0_NtCs4sYt0urF4vM_8oxrdfxml10serializerNtB5_17InnerRdfXmlWriter11write_start:
  371|  39.9k|    fn write_start(&self, output: &mut Vec<Event<'_>>) {
  372|  39.9k|        output.push(Event::Decl(BytesDecl::new("1.0", Some("UTF-8"), None)));
  373|  39.9k|        let mut rdf_open = BytesStart::new("rdf:RDF");
  374|  79.8k|        for (prefix_value, prefix_name) in &self.prefixes {
  375|  39.9k|            rdf_open.push_attribute((
  376|  39.9k|                format!("xmlns:{prefix_name}").as_str(),
  377|  39.9k|                prefix_value.as_str(),
  378|  39.9k|            ));
  379|  39.9k|        }
  380|  39.9k|        output.push(Event::Start(rdf_open))
  381|  39.9k|    }
_RNvMs0_NtCs4sYt0urF4vM_8oxrdfxml10serializerNtB5_17InnerRdfXmlWriter6finish:
  383|  39.9k|    fn finish(&mut self, output: &mut Vec<Event<'static>>) {
  384|  39.9k|        if self.current_subject.is_some() {
  385|  19.7k|            output.push(Event::End(
  386|  19.7k|                self.current_resource_tag
  387|  19.7k|                    .take()
  388|  19.7k|                    .map_or_else(|| BytesEnd::new("rdf:Description"), BytesEnd::new),
  389|  19.7k|            ));
  390|  20.1k|        } else {
  391|  20.1k|            self.write_start(output);
  392|  20.1k|        }
  393|  39.9k|        output.push(Event::End(BytesEnd::new("rdf:RDF")));
  394|  39.9k|    }
_RNvMs0_NtCs4sYt0urF4vM_8oxrdfxml10serializerNtB5_17InnerRdfXmlWriter22uri_to_qname_and_xmlns:
  396|   356k|    fn uri_to_qname_and_xmlns<'a>(
  397|   356k|        &self,
  398|   356k|        uri: NamedNodeRef<'a>,
  399|   356k|    ) -> (Cow<'a, str>, Option<(&'a str, &'a str)>) {
  400|   356k|        let (prop_prefix, prop_value) = split_iri(uri.as_str());
  401|   356k|        if let Some(prop_prefix) = self.prefixes.get(prop_prefix) {
  402|       |            (
  403|  13.2k|                if prop_prefix.is_empty() {
  404|      0|                    Cow::Borrowed(prop_value)
  405|       |                } else {
  406|  13.2k|                    Cow::Owned(format!("{prop_prefix}:{prop_value}"))
  407|       |                },
  408|  13.2k|                None,
  409|       |            )
  410|   342k|        } else if prop_prefix == "http://www.w3.org/2000/xmlns/" {
  411|  5.07k|            (Cow::Owned(format!("xmlns:{prop_value}")), None)
  412|   337k|        } else if prop_value.is_empty() {
  413|   135k|            (Cow::Borrowed("p:"), Some(("xmlns:p", prop_prefix)))
  414|       |        } else {
  415|   202k|            (Cow::Borrowed(prop_value), Some(("xmlns", prop_prefix)))
  416|       |        }
  417|   356k|    }
_RNvNtCs4sYt0urF4vM_8oxrdfxml10serializer9split_iri:
  428|   356k|fn split_iri(iri: &str) -> (&str, &str) {
  429|   356k|    if let Some(position_base) = iri.rfind(|c| !is_name_char(c) || c == ':') {
  430|   356k|        if let Some(position_add) = iri[position_base..].find(|c| is_name_start_char(c) && c != ':')
  431|       |        {
  432|   216k|            (
  433|   216k|                &iri[..position_base + position_add],
  434|   216k|                &iri[position_base + position_add..],
  435|   216k|            )
  436|       |        } else {
  437|   139k|            (iri, "")
  438|       |        }
  439|       |    } else {
  440|      0|        (iri, "")
  441|       |    }
  442|   356k|}

_RNvNtCs4sYt0urF4vM_8oxrdfxml5utils18is_name_start_char:
    1|  16.5M|pub fn is_name_start_char(c: char) -> bool {
    2|       |    // ":" | [A-Z] | "_" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
    3|  16.5M|    matches!(c,
    4|       |        ':'
    5|  9.86M|        | 'A'..='Z'
    6|       |        | '_'
    7|  8.05M|        | 'a'..='z'
    8|   332k|        | '\u{00C0}'..='\u{00D6}'
    9|   331k|        | '\u{00D8}'..='\u{00F6}'
   10|   331k|        | '\u{00F8}'..='\u{02FF}'
   11|   330k|        | '\u{0370}'..='\u{037D}'
   12|  85.7k|        | '\u{037F}'..='\u{1FFF}'
   13|  81.9k|        | '\u{200C}'..='\u{200D}'
   14|  81.9k|        | '\u{2070}'..='\u{218F}'
   15|  81.9k|        | '\u{2C00}'..='\u{2FEF}'
   16|  81.9k|        | '\u{3001}'..='\u{D7FF}'
   17|  77.4k|        | '\u{F900}'..='\u{FDCF}'
   18|  77.4k|        | '\u{FDF0}'..='\u{FFFD}'
   19|  27.1k|        | '\u{10000}'..='\u{EFFFF}')
   20|  16.5M|}
_RNvNtCs4sYt0urF4vM_8oxrdfxml5utils12is_name_char:
   22|  15.6M|pub fn is_name_char(c: char) -> bool {
   23|  15.6M|    // NameStartChar | "-" | "." | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
   24|  15.6M|    is_name_start_char(c)
   25|  6.22M|        || matches!(c,  '-' | '.' | '0'..='9' | '\u{B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
   26|  15.6M|}















































_RNvCsa0b4RSFSw2P_7rdf_xml5parse:
    8|  39.1k|fn parse(data: &[u8], unchecked: bool) -> (Vec<Triple>, Vec<String>) {
    9|  39.1k|    let mut triples = Vec::new();
   10|  39.1k|    let mut errors = Vec::new();
   11|  39.1k|    let mut parser = RdfXmlParser::new();
   12|  39.1k|    if unchecked {
   13|  1.28k|        parser = parser.unchecked();
   14|  37.8k|    }
   15|  1.90M|    for result in parser.parse_slice(data) {
   16|  1.90M|        match result {
   17|   344k|            Ok(triple) => triples.push(triple),
   18|  1.55M|            Err(error) => errors.push(error.to_string()),
   19|       |        }
   20|       |    }
   21|  39.1k|    (triples, errors)
   22|  39.1k|}
_RNvCsa0b4RSFSw2P_7rdf_xml24count_triple_blank_nodes:
   24|  4.21k|fn count_triple_blank_nodes(triple: &Triple) -> usize {
   25|  4.21k|    (match &triple.subject {
   26|  4.21k|        Subject::BlankNode(_) => 1,
   27|      0|        Subject::Triple(t) => count_triple_blank_nodes(t),
   28|      0|        _ => 0,
   29|  4.21k|    }) + (match &triple.object {
   30|    226|        Term::BlankNode(_) => 1,
   31|      0|        Term::Triple(t) => count_triple_blank_nodes(t),
   32|  3.99k|        _ => 0,
   33|       |    })
   34|  4.21k|}

_RNvMNtCskZUKzdIRemu_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCsa0b4RSFSw2P_7rdf_xml:
   88|   667k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|   667k|        BlankNodeRef(match &self.0 {
   90|  15.5k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|   652k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|   652k|                id: *id,
   93|   652k|                str: str.as_str(),
   94|   652k|            },
   95|       |        })
   96|   667k|    }
_RNvMs1_NtCskZUKzdIRemu_5oxrdf10blank_nodeNtB5_12BlankNodeRef10into_ownedCsa0b4RSFSw2P_7rdf_xml:
  207|   289k|    pub fn into_owned(self) -> BlankNode {
  208|   289k|        BlankNode(match self.0 {
  209|  3.75k|            BlankNodeRefContent::Named(id) => BlankNodeContent::Named(id.to_owned()),
  210|   285k|            BlankNodeRefContent::Anonymous { id, .. } => BlankNodeContent::Anonymous {
  211|   285k|                id,
  212|   285k|                str: IdStr::new(u128::from_ne_bytes(id)),
  213|   285k|            },
  214|       |        })
  215|   289k|    }
_RNvMs1_NtCskZUKzdIRemu_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCsa0b4RSFSw2P_7rdf_xml:
  179|   297k|    pub const fn as_str(self) -> &'a str {
  180|   297k|        match self.0 {
  181|  4.69k|            BlankNodeRefContent::Named(id) => id,
  182|   292k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  183|       |        }
  184|   297k|    }
_RNvMs7_NtCskZUKzdIRemu_5oxrdf10blank_nodeNtB5_5IdStr3newCsa0b4RSFSw2P_7rdf_xml:
  258|   285k|    fn new(id: u128) -> Self {
  259|   285k|        let mut str = [0; 32];
  260|   285k|        write!(&mut str[..], "{id:x}").unwrap();
  261|   285k|        Self(str)
  262|   285k|    }
_RNvMs7_NtCskZUKzdIRemu_5oxrdf10blank_nodeNtB5_5IdStr6as_strCsa0b4RSFSw2P_7rdf_xml:
  265|   652k|    fn as_str(&self) -> &str {
  266|   652k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|   652k|        str::from_utf8(&self.0[..len]).unwrap()
  268|   652k|    }
_RNvMs7_NtCskZUKzdIRemu_5oxrdf10blank_nodeNtB5_5IdStr3newCseesEdg7HnAe_8oxrdfxml:
  258|   693k|    fn new(id: u128) -> Self {
  259|   693k|        let mut str = [0; 32];
  260|   693k|        write!(&mut str[..], "{id:x}").unwrap();
  261|   693k|        Self(str)
  262|   693k|    }
_RNvMs7_NtCskZUKzdIRemu_5oxrdf10blank_nodeNtB5_5IdStr6as_strCseesEdg7HnAe_8oxrdfxml:
  265|   693k|    fn as_str(&self) -> &str {
  266|   693k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|   693k|        str::from_utf8(&self.0[..len]).unwrap()
  268|   693k|    }
_RNvXs0_NtCskZUKzdIRemu_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCscdEvteftVc2_4core7default7Default7defaultCseesEdg7HnAe_8oxrdfxml:
  109|   277k|    fn default() -> Self {
  110|       |        // We ensure the ID does not start with a number to be also valid with RDF/XML
  111|   693k|        loop {
  112|   693k|            let id = random();
  113|   693k|            let str = IdStr::new(id);
  114|   693k|            if matches!(str.as_str().as_bytes().first(), Some(b'a'..=b'f')) {
  115|   277k|                return Self(BlankNodeContent::Anonymous {
  116|   277k|                    id: id.to_ne_bytes(),
  117|   277k|                    str,
  118|   277k|                });
  119|   416k|            }
  120|       |        }
  121|   277k|    }
_RINvMNtCskZUKzdIRemu_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   49|   310k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   50|   310k|        let id = id.into();
   51|   310k|        if let Some(numerical_id) = to_integer_id(&id) {
   52|   299k|            Self::new_from_unique_id(numerical_id)
   53|       |        } else {
   54|  10.9k|            Self(BlankNodeContent::Named(id))
   55|       |        }
   56|   310k|    }
_RNCNvMs7_NtCskZUKzdIRemu_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  266|  42.7M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
_RNvMNtCskZUKzdIRemu_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idB4_:
   62|   305k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|   305k|        Self(BlankNodeContent::Anonymous {
   64|   305k|            id: id.to_ne_bytes(),
   65|   305k|            str: IdStr::new(id),
   66|   305k|        })
   67|   305k|    }
_RNvMNtCskZUKzdIRemu_5oxrdf10blank_nodeNtB2_9BlankNode6as_refB4_:
   88|  7.24k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|  7.24k|        BlankNodeRef(match &self.0 {
   90|      0|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|  7.24k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|  7.24k|                id: *id,
   93|  7.24k|                str: str.as_str(),
   94|  7.24k|            },
   95|       |        })
   96|  7.24k|    }
_RNvMs1_NtCskZUKzdIRemu_5oxrdf10blank_nodeNtB5_12BlankNodeRef13new_uncheckedB7_:
  166|  3.62k|    pub fn new_unchecked(id: &'a str) -> Self {
  167|  3.62k|        if let Some(numerical_id) = to_integer_id(id) {
  168|  3.62k|            Self(BlankNodeRefContent::Anonymous {
  169|  3.62k|                id: numerical_id.to_ne_bytes(),
  170|  3.62k|                str: id,
  171|  3.62k|            })
  172|       |        } else {
  173|      0|            Self(BlankNodeRefContent::Named(id))
  174|       |        }
  175|  3.62k|    }
_RNvMs1_NtCskZUKzdIRemu_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strB7_:
  179|  11.5k|    pub const fn as_str(self) -> &'a str {
  180|  11.5k|        match self.0 {
  181|      0|            BlankNodeRefContent::Named(id) => id,
  182|  11.5k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  183|       |        }
  184|  11.5k|    }
_RNvMs1_NtCskZUKzdIRemu_5oxrdf10blank_nodeNtB5_12BlankNodeRef9unique_idB7_:
  199|  18.1k|    pub const fn unique_id(&self) -> Option<u128> {
  200|  18.1k|        match self.0 {
  201|      0|            BlankNodeRefContent::Named(_) => None,
  202|  18.1k|            BlankNodeRefContent::Anonymous { id, .. } => Some(u128::from_ne_bytes(id)),
  203|       |        }
  204|  18.1k|    }
_RNvMs7_NtCskZUKzdIRemu_5oxrdf10blank_nodeNtB5_5IdStr3newB7_:
  258|   305k|    fn new(id: u128) -> Self {
  259|   305k|        let mut str = [0; 32];
  260|   305k|        write!(&mut str[..], "{id:x}").unwrap();
  261|   305k|        Self(str)
  262|   305k|    }
_RNvMs7_NtCskZUKzdIRemu_5oxrdf10blank_nodeNtB5_5IdStr6as_strB7_:
  265|  7.24k|    fn as_str(&self) -> &str {
  266|  7.24k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|  7.24k|        str::from_utf8(&self.0[..len]).unwrap()
  268|  7.24k|    }
_RNvNtCskZUKzdIRemu_5oxrdf10blank_node13to_integer_idB3_:
  331|   314k|fn to_integer_id(id: &str) -> Option<u128> {
  332|   314k|    let digits = id.as_bytes();
  333|   314k|    let mut value: u128 = 0;
  334|   314k|    if let None | Some(b'0') = digits.first() {
  335|      0|        return None; // No empty string or leading zeros
  336|   314k|    }
  337|  9.76M|    for digit in digits {
  338|  9.45M|        value = value.checked_mul(16)?.checked_add(
  339|  9.45M|            match *digit {
  340|  9.45M|                b'0'..=b'9' => digit - b'0',
  341|  3.86M|                b'a'..=b'f' => digit - b'a' + 10,
  342|  9.83k|                _ => return None,
  343|       |            }
  344|  9.44M|            .into(),
  345|      0|        )?;
  346|       |    }
  347|   303k|    Some(value)
  348|   314k|}

_RINvMsb_NtCskZUKzdIRemu_5oxrdf7datasetNtB6_12GraphViewMut6insertRNtNtB8_6triple6TripleECsa0b4RSFSw2P_7rdf_xml:
 1371|  7.21k|    pub fn insert<'b>(&mut self, triple: impl Into<TripleRef<'b>>) -> bool {
 1372|  7.21k|        let triple = self.encode_triple(triple.into());
 1373|  7.21k|        self.dataset.insert_encoded((
 1374|  7.21k|            triple.subject,
 1375|  7.21k|            triple.predicate,
 1376|  7.21k|            triple.object,
 1377|  7.21k|            self.graph_name.clone(),
 1378|  7.21k|        ))
 1379|  7.21k|    }
_RINvXsd_NtCskZUKzdIRemu_5oxrdf7datasetNtB6_12GraphViewMutINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendRNtNtB8_6triple6TripleE6extendINtNtNtB12_5slice4iter4IterB1N_EECsa0b4RSFSw2P_7rdf_xml:
 1509|  2.32k|    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
 1510|  9.53k|        for t in iter {
 1511|  7.21k|            self.insert(t);
 1512|  7.21k|        }
 1513|  2.32k|    }
_RNvMNtCskZUKzdIRemu_5oxrdf7datasetNtB2_7Dataset4iter:
  169|  1.16k|    pub fn iter(&self) -> Iter<'_> {
  170|  1.16k|        let iter = self.spog.iter();
  171|  1.16k|        Iter {
  172|  1.16k|            dataset: self,
  173|  1.16k|            inner: iter,
  174|  1.16k|        }
  175|  1.16k|    }
_RNvMNtCskZUKzdIRemu_5oxrdf7datasetNtB2_7Dataset3len:
  350|  2.32k|    pub fn len(&self) -> usize {
  351|  2.32k|        self.gspo.len()
  352|  2.32k|    }
_RNvMNtCskZUKzdIRemu_5oxrdf7datasetNtB2_7Dataset14insert_encoded:
  365|  14.3k|    fn insert_encoded(
  366|  14.3k|        &mut self,
  367|  14.3k|        quad: (
  368|  14.3k|            InternedSubject,
  369|  14.3k|            InternedNamedNode,
  370|  14.3k|            InternedTerm,
  371|  14.3k|            InternedGraphName,
  372|  14.3k|        ),
  373|  14.3k|    ) -> bool {
  374|  14.3k|        let (s, p, o, g) = quad;
  375|  14.3k|        self.gspo.insert((g.clone(), s.clone(), p, o.clone()));
  376|  14.3k|        self.gpos.insert((g.clone(), p, o.clone(), s.clone()));
  377|  14.3k|        self.gosp.insert((g.clone(), o.clone(), s.clone(), p));
  378|  14.3k|        self.spog.insert((s.clone(), p, o.clone(), g.clone()));
  379|  14.3k|        self.posg.insert((p, o.clone(), s.clone(), g.clone()));
  380|  14.3k|        self.ospg.insert((o, s, p, g))
  381|  14.3k|    }
_RNvMNtCskZUKzdIRemu_5oxrdf7datasetNtB2_7Dataset5clear:
  411|  2.32k|    pub fn clear(&mut self) {
  412|  2.32k|        self.gspo.clear();
  413|  2.32k|        self.gpos.clear();
  414|  2.32k|        self.gosp.clear();
  415|  2.32k|        self.spog.clear();
  416|  2.32k|        self.posg.clear();
  417|  2.32k|        self.ospg.clear();
  418|  2.32k|    }
_RNvMNtCskZUKzdIRemu_5oxrdf7datasetNtB2_7Dataset12encoded_quad:
  437|  3.58k|    fn encoded_quad(
  438|  3.58k|        &self,
  439|  3.58k|        quad: QuadRef<'_>,
  440|  3.58k|    ) -> Option<(
  441|  3.58k|        InternedSubject,
  442|  3.58k|        InternedNamedNode,
  443|  3.58k|        InternedTerm,
  444|  3.58k|        InternedGraphName,
  445|  3.58k|    )> {
  446|  3.58k|        Some((
  447|  3.58k|            self.encoded_subject(quad.subject)?,
  448|  3.58k|            self.encoded_named_node(quad.predicate)?,
  449|  3.58k|            self.encoded_term(quad.object)?,
  450|  3.58k|            self.encoded_graph_name(quad.graph_name)?,
  451|       |        ))
  452|  3.58k|    }
_RNvMNtCskZUKzdIRemu_5oxrdf7datasetNtB2_7Dataset11decode_spog:
  479|  3.58k|    fn decode_spog(
  480|  3.58k|        &self,
  481|  3.58k|        quad: (
  482|  3.58k|            &InternedSubject,
  483|  3.58k|            &InternedNamedNode,
  484|  3.58k|            &InternedTerm,
  485|  3.58k|            &InternedGraphName,
  486|  3.58k|        ),
  487|  3.58k|    ) -> QuadRef<'_> {
  488|  3.58k|        QuadRef {
  489|  3.58k|            subject: quad.0.decode_from(&self.interner),
  490|  3.58k|            predicate: quad.1.decode_from(&self.interner),
  491|  3.58k|            object: quad.2.decode_from(&self.interner),
  492|  3.58k|            graph_name: quad.3.decode_from(&self.interner),
  493|  3.58k|        }
  494|  3.58k|    }
_RNvMNtCskZUKzdIRemu_5oxrdf7datasetNtB2_7Dataset12canonicalize:
  539|  2.32k|    pub fn canonicalize(&mut self, algorithm: CanonicalizationAlgorithm) {
  540|  2.32k|        let bnode_mapping = self.canonicalize_interned_blank_nodes(algorithm);
  541|  2.32k|        let new_quads = self.map_blank_nodes(&bnode_mapping);
  542|  2.32k|        self.clear();
  543|  9.48k|        for quad in new_quads {
  544|  7.16k|            self.insert_encoded(quad);
  545|  7.16k|        }
  546|  2.32k|    }
_RNvMNtCskZUKzdIRemu_5oxrdf7datasetNtB2_7Dataset33canonicalize_interned_blank_nodes:
  562|  2.32k|    fn canonicalize_interned_blank_nodes(
  563|  2.32k|        &self,
  564|  2.32k|        algorithm: CanonicalizationAlgorithm,
  565|  2.32k|    ) -> HashMap<InternedBlankNode, BlankNode> {
  566|  2.32k|        match algorithm {
  567|  2.32k|            CanonicalizationAlgorithm::Unstable => {
  568|  2.32k|                let bnodes = self.blank_nodes();
  569|  2.32k|                let quads_per_blank_node = self.quads_per_blank_nodes();
  570|  2.32k|                let (hash, partition) = self.hash_bnodes(
  571|  2.32k|                    bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
  572|  2.32k|                    &quads_per_blank_node,
  573|  2.32k|                );
  574|  2.32k|                self.distinguish(hash, &partition, &quads_per_blank_node)
  575|  2.32k|                    .into_iter()
  576|  2.32k|                    .map(|(from, to)| (from, BlankNode::new_from_unique_id(to.into())))
  577|  2.32k|                    .collect()
  578|  2.32k|            }
  579|  2.32k|        }
  580|  2.32k|    }
_RNvMNtCskZUKzdIRemu_5oxrdf7datasetNtB2_7Dataset11blank_nodes:
  582|  2.32k|    fn blank_nodes(&self) -> HashSet<InternedBlankNode> {
  583|  2.32k|        let mut bnodes = HashSet::new();
  584|  9.48k|        for (g, s, _, o) in &self.gspo {
  585|  7.16k|            if let InternedSubject::BlankNode(bnode) = s {
  586|  7.16k|                bnodes.insert(*bnode);
  587|  7.16k|            }
  588|       |            #[cfg(feature = "rdf-star")]
  589|  7.16k|            if let InternedSubject::Triple(triple) = s {
  590|      0|                Self::triple_blank_nodes(triple, &mut bnodes);
  591|  7.16k|            }
  592|  7.16k|            if let InternedTerm::BlankNode(bnode) = o {
  593|     84|                bnodes.insert(*bnode);
  594|  7.07k|            }
  595|       |            #[cfg(feature = "rdf-star")]
  596|  7.16k|            if let InternedTerm::Triple(triple) = o {
  597|      0|                Self::triple_blank_nodes(triple, &mut bnodes);
  598|  7.16k|            }
  599|  7.16k|            if let InternedGraphName::BlankNode(bnode) = g {
  600|      0|                bnodes.insert(*bnode);
  601|  7.16k|            }
  602|       |        }
  603|  2.32k|        bnodes
  604|  2.32k|    }
_RNvMNtCskZUKzdIRemu_5oxrdf7datasetNtB2_7Dataset21quads_per_blank_nodes:
  620|  2.32k|    fn quads_per_blank_nodes(&self) -> QuadsPerBlankNode {
  621|  2.32k|        let mut map: HashMap<_, Vec<_>> = HashMap::new();
  622|  9.48k|        for quad in &self.spog {
  623|  7.16k|            if let InternedSubject::BlankNode(bnode) = &quad.0 {
  624|  7.16k|                map.entry(*bnode).or_default().push(quad.clone());
  625|  7.16k|            }
  626|       |            #[cfg(feature = "rdf-star")]
  627|  7.16k|            if let InternedSubject::Triple(t) = &quad.0 {
  628|      0|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  629|  7.16k|            }
  630|  7.16k|            if let InternedTerm::BlankNode(bnode) = &quad.2 {
  631|     84|                map.entry(*bnode).or_default().push(quad.clone());
  632|  7.07k|            }
  633|       |            #[cfg(feature = "rdf-star")]
  634|  7.16k|            if let InternedTerm::Triple(t) = &quad.2 {
  635|      0|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  636|  7.16k|            }
  637|  7.16k|            if let InternedGraphName::BlankNode(bnode) = &quad.3 {
  638|      0|                map.entry(*bnode).or_default().push(quad.clone());
  639|  7.16k|            }
  640|       |        }
  641|  2.32k|        map
  642|  2.32k|    }
_RNvMNtCskZUKzdIRemu_5oxrdf7datasetNtB2_7Dataset11hash_bnodes:
  669|  20.7k|    fn hash_bnodes(
  670|  20.7k|        &self,
  671|  20.7k|        mut hashes: HashMap<InternedBlankNode, u64>,
  672|  20.7k|        quads_per_blank_node: &QuadsPerBlankNode,
  673|  20.7k|    ) -> (
  674|  20.7k|        HashMap<InternedBlankNode, u64>,
  675|  20.7k|        Vec<(u64, Vec<InternedBlankNode>)>,
  676|  20.7k|    ) {
  677|  20.7k|        let mut to_hash = Vec::new();
  678|  20.7k|        let mut to_do = hashes
  679|  20.7k|            .keys()
  680|  20.7k|            .map(|bnode| (*bnode, true))
  681|  20.7k|            .collect::<HashMap<_, _>>();
  682|  20.7k|        let mut partition = HashMap::<_, Vec<_>>::with_capacity(hashes.len());
  683|  20.7k|        let mut old_partition_count = usize::MAX;
  684|  62.1k|        while old_partition_count != partition.len() {
  685|  41.4k|            old_partition_count = partition.len();
  686|  41.4k|            partition.clear();
  687|  41.4k|            let mut new_hashes = hashes.clone();
  688|   152k|            for bnode in hashes.keys() {
  689|   152k|                let hash = if to_do.contains_key(bnode) {
  690|   156k|                    for (s, p, o, g) in &quads_per_blank_node[bnode] {
  691|   156k|                        to_hash.push((
  692|   156k|                            self.hash_subject(s, *bnode, &hashes),
  693|   156k|                            self.hash_named_node(*p),
  694|   156k|                            self.hash_term(o, *bnode, &hashes),
  695|   156k|                            self.hash_graph_name(g, *bnode, &hashes),
  696|   156k|                        ));
  697|   156k|                    }
  698|   152k|                    to_hash.sort_unstable();
  699|   152k|                    let hash = Self::hash_tuple((&to_hash, hashes[bnode]));
  700|   152k|                    to_hash.clear();
  701|   152k|                    if hash == hashes[bnode] {
  702|      0|                        to_do.insert(*bnode, false);
  703|   152k|                    } else {
  704|   152k|                        new_hashes.insert(*bnode, hash);
  705|   152k|                    }
  706|   152k|                    hash
  707|       |                } else {
  708|      0|                    hashes[bnode]
  709|       |                };
  710|   152k|                partition.entry(hash).or_default().push(*bnode);
  711|       |            }
  712|  41.4k|            hashes = new_hashes;
  713|       |        }
  714|  20.7k|        let mut partition: Vec<_> = partition.into_iter().collect();
  715|  20.7k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));
  716|  20.7k|        (hashes, partition)
  717|  20.7k|    }
_RNvMNtCskZUKzdIRemu_5oxrdf7datasetNtB2_7Dataset15hash_named_node:
  719|   156k|    fn hash_named_node(&self, node: InternedNamedNode) -> u64 {
  720|   156k|        Self::hash_tuple(node.decode_from(&self.interner))
  721|   156k|    }
_RNvMNtCskZUKzdIRemu_5oxrdf7datasetNtB2_7Dataset15hash_blank_node:
  723|   156k|    fn hash_blank_node(
  724|   156k|        node: InternedBlankNode,
  725|   156k|        current_blank_node: InternedBlankNode,
  726|   156k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  727|   156k|    ) -> u64 {
  728|   156k|        if node == current_blank_node {
  729|   156k|            u64::MAX
  730|       |        } else {
  731|    336|            bnodes_hash[&node]
  732|       |        }
  733|   156k|    }
_RNvMNtCskZUKzdIRemu_5oxrdf7datasetNtB2_7Dataset12hash_subject:
  735|   156k|    fn hash_subject(
  736|   156k|        &self,
  737|   156k|        node: &InternedSubject,
  738|   156k|        current_blank_node: InternedBlankNode,
  739|   156k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  740|   156k|    ) -> u64 {
  741|   156k|        match node {
  742|      0|            InternedSubject::NamedNode(node) => Self::hash_tuple(node.decode_from(&self.interner)),
  743|   156k|            InternedSubject::BlankNode(bnode) => {
  744|   156k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  745|       |            }
  746|       |            #[cfg(feature = "rdf-star")]
  747|      0|            InternedSubject::Triple(triple) => {
  748|      0|                self.hash_triple(triple, current_blank_node, bnodes_hash)
  749|       |            }
  750|       |        }
  751|   156k|    }
_RNvMNtCskZUKzdIRemu_5oxrdf7datasetNtB2_7Dataset9hash_term:
  753|   156k|    fn hash_term(
  754|   156k|        &self,
  755|   156k|        term: &InternedTerm,
  756|   156k|        current_blank_node: InternedBlankNode,
  757|   156k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  758|   156k|    ) -> u64 {
  759|   156k|        match term {
  760|   152k|            InternedTerm::NamedNode(node) => Self::hash_tuple(node.decode_from(&self.interner)),
  761|    336|            InternedTerm::BlankNode(bnode) => {
  762|    336|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  763|       |            }
  764|  3.52k|            InternedTerm::Literal(literal) => Self::hash_tuple(literal.decode_from(&self.interner)),
  765|       |            #[cfg(feature = "rdf-star")]
  766|      0|            InternedTerm::Triple(triple) => {
  767|      0|                self.hash_triple(triple, current_blank_node, bnodes_hash)
  768|       |            }
  769|       |        }
  770|   156k|    }
_RNvMNtCskZUKzdIRemu_5oxrdf7datasetNtB2_7Dataset15hash_graph_name:
  772|   156k|    fn hash_graph_name(
  773|   156k|        &self,
  774|   156k|        graph_name: &InternedGraphName,
  775|   156k|        current_blank_node: InternedBlankNode,
  776|   156k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  777|   156k|    ) -> u64 {
  778|   156k|        match graph_name {
  779|      0|            InternedGraphName::NamedNode(node) => {
  780|      0|                Self::hash_tuple(node.decode_from(&self.interner))
  781|       |            }
  782|      0|            InternedGraphName::BlankNode(bnode) => {
  783|      0|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  784|       |            }
  785|   156k|            InternedGraphName::DefaultGraph => 0,
  786|       |        }
  787|   156k|    }
_RNvMNtCskZUKzdIRemu_5oxrdf7datasetNtB2_7Dataset11distinguish:
  809|  20.7k|    fn distinguish(
  810|  20.7k|        &self,
  811|  20.7k|        hash: HashMap<InternedBlankNode, u64>,
  812|  20.7k|        partition: &[(u64, Vec<InternedBlankNode>)],
  813|  20.7k|        quads_per_blank_node: &QuadsPerBlankNode,
  814|  20.7k|    ) -> HashMap<InternedBlankNode, u64> {
  815|  20.7k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
  816|  20.7k|        if let Some(b_prime) = b_prime {
  817|  7.95k|            b_prime
  818|  7.95k|                .iter()
  819|  7.95k|                .map(|b| {
  820|       |                    let mut hash_prime = hash.clone();
  821|       |                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  822|       |                    let (hash_prime_prime, partition_prime) =
  823|       |                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  824|       |                    self.distinguish(hash_prime_prime, &partition_prime, quads_per_blank_node)
  825|  7.95k|                })
  826|  7.95k|                .reduce(|a, b| {
  827|       |                    let mut a_hashes = a.values().collect::<Vec<_>>();
  828|       |                    a_hashes.sort();
  829|       |                    let mut b_hashes = a.values().collect::<Vec<_>>();
  830|       |                    b_hashes.sort();
  831|       |                    if a_hashes <= b_hashes {
  832|       |                        a
  833|       |                    } else {
  834|       |                        b
  835|       |                    }
  836|  7.95k|                })
  837|  7.95k|                .unwrap_or_default()
  838|       |        } else {
  839|  12.7k|            hash
  840|       |        }
  841|  20.7k|    }
_RNvMNtCskZUKzdIRemu_5oxrdf7datasetNtB2_7Dataset15map_blank_nodes:
  844|  2.32k|    fn map_blank_nodes(
  845|  2.32k|        &mut self,
  846|  2.32k|        bnode_mapping: &HashMap<InternedBlankNode, BlankNode>,
  847|  2.32k|    ) -> Vec<(
  848|  2.32k|        InternedSubject,
  849|  2.32k|        InternedNamedNode,
  850|  2.32k|        InternedTerm,
  851|  2.32k|        InternedGraphName,
  852|  2.32k|    )> {
  853|  2.32k|        let old_quads: Vec<_> = self.spog.iter().cloned().collect();
  854|  2.32k|        old_quads
  855|  2.32k|            .into_iter()
  856|  2.32k|            .map(|(s, p, o, g)| {
  857|       |                (
  858|       |                    match s {
  859|       |                        InternedSubject::NamedNode(_) => s,
  860|       |                        InternedSubject::BlankNode(bnode) => {
  861|       |                            InternedSubject::BlankNode(InternedBlankNode::encoded_into(
  862|       |                                bnode_mapping[&bnode].as_ref(),
  863|       |                                &mut self.interner,
  864|       |                            ))
  865|       |                        }
  866|       |                        #[cfg(feature = "rdf-star")]
  867|       |                        InternedSubject::Triple(triple) => {
  868|       |                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  869|       |                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  870|       |                                &mut self.interner,
  871|       |                            )))
  872|       |                        }
  873|       |                    },
  874|       |                    p,
  875|       |                    match o {
  876|       |                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  877|       |                        InternedTerm::BlankNode(bnode) => {
  878|       |                            InternedTerm::BlankNode(InternedBlankNode::encoded_into(
  879|       |                                bnode_mapping[&bnode].as_ref(),
  880|       |                                &mut self.interner,
  881|       |                            ))
  882|       |                        }
  883|       |                        #[cfg(feature = "rdf-star")]
  884|       |                        InternedTerm::Triple(triple) => {
  885|       |                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  886|       |                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  887|       |                                &mut self.interner,
  888|       |                            )))
  889|       |                        }
  890|       |                    },
  891|       |                    match g {
  892|       |                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  893|       |                        InternedGraphName::BlankNode(bnode) => {
  894|       |                            InternedGraphName::BlankNode(InternedBlankNode::encoded_into(
  895|       |                                bnode_mapping[&bnode].as_ref(),
  896|       |                                &mut self.interner,
  897|       |                            ))
  898|       |                        }
  899|       |                    },
  900|       |                )
  901|  2.32k|            })
  902|  2.32k|            .collect()
  903|  2.32k|    }
_RNvXs_NtCskZUKzdIRemu_5oxrdf7datasetNtB4_7DatasetNtNtCscdEvteftVc2_4core3cmp9PartialEq2eq:
  932|  1.16k|    fn eq(&self, other: &Self) -> bool {
  933|  1.16k|        if self.len() != other.len() {
  934|      0|            return false;
  935|  1.16k|        }
  936|  4.74k|        for q in self {
  937|  3.58k|            if !other.contains(q) {
  938|      0|                return false;
  939|  3.58k|            }
  940|       |        }
  941|  1.16k|        true
  942|  1.16k|    }
_RNvXs1_NtCskZUKzdIRemu_5oxrdf7datasetRNtB5_7DatasetNtNtNtNtCscdEvteftVc2_4core4iter6traits7collect12IntoIterator9into_iter:
  951|  1.16k|    fn into_iter(self) -> Self::IntoIter {
  952|  1.16k|        self.iter()
  953|  1.16k|    }
_RNvMsb_NtCskZUKzdIRemu_5oxrdf7datasetNtB5_12GraphViewMut13encode_triple:
 1395|  7.21k|    fn encode_triple(&mut self, triple: TripleRef<'_>) -> InternedTriple {
 1396|  7.21k|        InternedTriple {
 1397|  7.21k|            subject: InternedSubject::encoded_into(triple.subject, &mut self.dataset.interner),
 1398|  7.21k|            predicate: InternedNamedNode::encoded_into(
 1399|  7.21k|                triple.predicate,
 1400|  7.21k|                &mut self.dataset.interner,
 1401|  7.21k|            ),
 1402|  7.21k|            object: InternedTerm::encoded_into(triple.object, &mut self.dataset.interner),
 1403|  7.21k|        }
 1404|  7.21k|    }
_RNvXsg_NtCskZUKzdIRemu_5oxrdf7datasetNtB5_4IterNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next:
 1551|  4.74k|    fn next(&mut self) -> Option<Self::Item> {
 1552|  4.74k|        self.inner
 1553|  4.74k|            .next()
 1554|  4.74k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))
 1555|  4.74k|    }
_RINvMNtCskZUKzdIRemu_5oxrdf7datasetNtB3_7Dataset9graph_mutNtNtB5_6triple12GraphNameRefEB5_:
  157|  2.32k|    pub fn graph_mut<'a, 'b>(
  158|  2.32k|        &'a mut self,
  159|  2.32k|        graph_name: impl Into<GraphNameRef<'b>>,
  160|  2.32k|    ) -> GraphViewMut<'a> {
  161|  2.32k|        let graph_name = InternedGraphName::encoded_into(graph_name.into(), &mut self.interner);
  162|  2.32k|        GraphViewMut {
  163|  2.32k|            dataset: self,
  164|  2.32k|            graph_name,
  165|  2.32k|        }
  166|  2.32k|    }
_RINvMNtCskZUKzdIRemu_5oxrdf7datasetNtB3_7Dataset8containsNtNtB5_6triple7QuadRefEB5_:
  341|  3.58k|    pub fn contains<'a>(&self, quad: impl Into<QuadRef<'a>>) -> bool {
  342|  3.58k|        if let Some(q) = self.encoded_quad(quad.into()) {
  343|  3.58k|            self.spog.contains(&q)
  344|       |        } else {
  345|      0|            false
  346|       |        }
  347|  3.58k|    }
_RINvMNtCskZUKzdIRemu_5oxrdf7datasetNtB3_7Dataset18encoded_named_nodeNtNtB5_10named_node12NamedNodeRefEB5_:
  454|  3.58k|    pub(super) fn encoded_named_node<'a>(
  455|  3.58k|        &self,
  456|  3.58k|        node: impl Into<NamedNodeRef<'a>>,
  457|  3.58k|    ) -> Option<InternedNamedNode> {
  458|  3.58k|        InternedNamedNode::encoded_from(node.into(), &self.interner)
  459|  3.58k|    }
_RINvMNtCskZUKzdIRemu_5oxrdf7datasetNtB3_7Dataset15encoded_subjectNtNtB5_6triple10SubjectRefEB5_:
  461|  3.58k|    pub(super) fn encoded_subject<'a>(
  462|  3.58k|        &self,
  463|  3.58k|        node: impl Into<SubjectRef<'a>>,
  464|  3.58k|    ) -> Option<InternedSubject> {
  465|  3.58k|        InternedSubject::encoded_from(node.into(), &self.interner)
  466|  3.58k|    }
_RINvMNtCskZUKzdIRemu_5oxrdf7datasetNtB3_7Dataset12encoded_termNtNtB5_6triple7TermRefEB5_:
  468|  3.58k|    pub(super) fn encoded_term<'a>(&self, term: impl Into<TermRef<'a>>) -> Option<InternedTerm> {
  469|  3.58k|        InternedTerm::encoded_from(term.into(), &self.interner)
  470|  3.58k|    }
_RINvMNtCskZUKzdIRemu_5oxrdf7datasetNtB3_7Dataset18encoded_graph_nameNtNtB5_6triple12GraphNameRefEB5_:
  472|  3.58k|    pub(super) fn encoded_graph_name<'a>(
  473|  3.58k|        &self,
  474|  3.58k|        graph_name: impl Into<GraphNameRef<'a>>,
  475|  3.58k|    ) -> Option<InternedGraphName> {
  476|  3.58k|        InternedGraphName::encoded_from(graph_name.into(), &self.interner)
  477|  3.58k|    }
_RNCNvMNtCskZUKzdIRemu_5oxrdf7datasetNtB4_7Dataset33canonicalize_interned_blank_nodes0B6_:
  571|  5.75k|                    bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
_RNCNvMNtCskZUKzdIRemu_5oxrdf7datasetNtB4_7Dataset33canonicalize_interned_blank_nodess_0B6_:
  576|  5.75k|                    .map(|(from, to)| (from, BlankNode::new_from_unique_id(to.into())))
_RNCNvMNtCskZUKzdIRemu_5oxrdf7datasetNtB4_7Dataset11hash_bnodes0B6_:
  680|  76.3k|            .map(|bnode| (*bnode, true))
_RNCNvMNtCskZUKzdIRemu_5oxrdf7datasetNtB4_7Dataset11hash_bnodess_0B6_:
  715|  67.8k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));
_RINvMNtCskZUKzdIRemu_5oxrdf7datasetNtB3_7Dataset10hash_tupleNtNtB5_10named_node12NamedNodeRefEB5_:
  803|   308k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|   308k|        let mut hasher = DefaultHasher::new();
  805|   308k|        v.hash(&mut hasher);
  806|   308k|        hasher.finish()
  807|   308k|    }
_RINvMNtCskZUKzdIRemu_5oxrdf7datasetNtB3_7Dataset10hash_tupleNtNtB5_7literal10LiteralRefEB5_:
  803|  3.52k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|  3.52k|        let mut hasher = DefaultHasher::new();
  805|  3.52k|        v.hash(&mut hasher);
  806|  3.52k|        hasher.finish()
  807|  3.52k|    }
_RINvMNtCskZUKzdIRemu_5oxrdf7datasetNtB3_7Dataset10hash_tupleTRINtNtCs3OstG5Tqy1X_5alloc3vec3VecTyyyyEEyEEB5_:
  803|   152k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|   152k|        let mut hasher = DefaultHasher::new();
  805|   152k|        v.hash(&mut hasher);
  806|   152k|        hasher.finish()
  807|   152k|    }
_RINvMNtCskZUKzdIRemu_5oxrdf7datasetNtB3_7Dataset10hash_tupleTylEEB5_:
  803|  18.4k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|  18.4k|        let mut hasher = DefaultHasher::new();
  805|  18.4k|        v.hash(&mut hasher);
  806|  18.4k|        hasher.finish()
  807|  18.4k|    }
_RNCNvMNtCskZUKzdIRemu_5oxrdf7datasetNtB4_7Dataset11distinguish0B6_:
  815|  65.7k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
_RNCNvMNtCskZUKzdIRemu_5oxrdf7datasetNtB4_7Dataset11distinguishs_0B6_:
  815|  65.7k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
_RNCNvMNtCskZUKzdIRemu_5oxrdf7datasetNtB4_7Dataset11distinguishs0_0B6_:
  819|  18.4k|                .map(|b| {
  820|  18.4k|                    let mut hash_prime = hash.clone();
  821|  18.4k|                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  822|  18.4k|                    let (hash_prime_prime, partition_prime) =
  823|  18.4k|                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  824|  18.4k|                    self.distinguish(hash_prime_prime, &partition_prime, quads_per_blank_node)
  825|  18.4k|                })
_RNCNvMNtCskZUKzdIRemu_5oxrdf7datasetNtB4_7Dataset11distinguishs1_0B6_:
  826|  10.4k|                .reduce(|a, b| {
  827|  10.4k|                    let mut a_hashes = a.values().collect::<Vec<_>>();
  828|  10.4k|                    a_hashes.sort();
  829|  10.4k|                    let mut b_hashes = a.values().collect::<Vec<_>>();
  830|  10.4k|                    b_hashes.sort();
  831|  10.4k|                    if a_hashes <= b_hashes {
  832|  10.4k|                        a
  833|       |                    } else {
  834|      0|                        b
  835|       |                    }
  836|  10.4k|                })
_RNCNvMNtCskZUKzdIRemu_5oxrdf7datasetNtB4_7Dataset15map_blank_nodes0B6_:
  856|  7.16k|            .map(|(s, p, o, g)| {
  857|  7.16k|                (
  858|  7.16k|                    match s {
  859|      0|                        InternedSubject::NamedNode(_) => s,
  860|  7.16k|                        InternedSubject::BlankNode(bnode) => {
  861|  7.16k|                            InternedSubject::BlankNode(InternedBlankNode::encoded_into(
  862|  7.16k|                                bnode_mapping[&bnode].as_ref(),
  863|  7.16k|                                &mut self.interner,
  864|  7.16k|                            ))
  865|       |                        }
  866|       |                        #[cfg(feature = "rdf-star")]
  867|      0|                        InternedSubject::Triple(triple) => {
  868|      0|                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  869|      0|                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  870|      0|                                &mut self.interner,
  871|      0|                            )))
  872|       |                        }
  873|       |                    },
  874|  7.16k|                    p,
  875|  7.16k|                    match o {
  876|  7.07k|                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  877|     84|                        InternedTerm::BlankNode(bnode) => {
  878|     84|                            InternedTerm::BlankNode(InternedBlankNode::encoded_into(
  879|     84|                                bnode_mapping[&bnode].as_ref(),
  880|     84|                                &mut self.interner,
  881|     84|                            ))
  882|       |                        }
  883|       |                        #[cfg(feature = "rdf-star")]
  884|      0|                        InternedTerm::Triple(triple) => {
  885|      0|                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  886|      0|                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  887|      0|                                &mut self.interner,
  888|      0|                            )))
  889|       |                        }
  890|       |                    },
  891|  7.16k|                    match g {
  892|  7.16k|                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  893|      0|                        InternedGraphName::BlankNode(bnode) => {
  894|      0|                            InternedGraphName::BlankNode(InternedBlankNode::encoded_into(
  895|      0|                                bnode_mapping[&bnode].as_ref(),
  896|      0|                                &mut self.interner,
  897|      0|                            ))
  898|       |                        }
  899|       |                    },
  900|       |                )
  901|  7.16k|            })
_RNCNvXsg_NtCskZUKzdIRemu_5oxrdf7datasetNtB7_4IterNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0B9_:
 1554|  3.58k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))

_RINvXs3_NtCskZUKzdIRemu_5oxrdf5graphNtB6_5GraphINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect12FromIteratorRNtNtB8_6triple6TripleE9from_iterINtNtNtBS_5slice4iter4IterB1K_EECsa0b4RSFSw2P_7rdf_xml:
  248|  2.32k|    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self {
  249|  2.32k|        let mut g = Self::new();
  250|  2.32k|        g.extend(iter);
  251|  2.32k|        g
  252|  2.32k|    }
_RINvXs5_NtCskZUKzdIRemu_5oxrdf5graphNtB6_5GraphINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendRNtNtB8_6triple6TripleE6extendINtNtNtBS_5slice4iter4IterB1D_EECsa0b4RSFSw2P_7rdf_xml:
  262|  2.32k|    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  263|  2.32k|        self.graph_mut().extend(iter)
  264|  2.32k|    }
_RNvMNtCskZUKzdIRemu_5oxrdf5graphNtB2_5Graph3new:
   63|  2.32k|    pub fn new() -> Self {
   64|  2.32k|        Self::default()
   65|  2.32k|    }
_RNvMNtCskZUKzdIRemu_5oxrdf5graphNtB2_5Graph9graph_mut:
   71|  2.32k|    fn graph_mut(&mut self) -> GraphViewMut<'_> {
   72|  2.32k|        self.dataset.graph_mut(GraphNameRef::DefaultGraph)
   73|  2.32k|    }
_RNvMNtCskZUKzdIRemu_5oxrdf5graphNtB2_5Graph12canonicalize:
  217|  2.32k|    pub fn canonicalize(&mut self, algorithm: CanonicalizationAlgorithm) {
  218|  2.32k|        self.dataset.canonicalize(algorithm)
  219|  2.32k|    }
_RNvXs_NtCskZUKzdIRemu_5oxrdf5graphNtB4_5GraphNtNtCscdEvteftVc2_4core3cmp9PartialEq2eq:
  223|  1.16k|    fn eq(&self, other: &Self) -> bool {
  224|  1.16k|        self.dataset == other.dataset
  225|  1.16k|    }

_RNCNvMs1_NtCskZUKzdIRemu_5oxrdf9interningNtB7_17InternedBlankNode12encoded_into0B9_:
  133|  11.5k|                .or_insert_with(|| blank_node.as_str().into());
_RNvMNtCskZUKzdIRemu_5oxrdf9interningNtB2_8Interner13get_or_intern:
   18|  14.3k|    fn get_or_intern(&mut self, value: &str) -> Key {
   19|  14.3k|        let mut hash = self.hash(value);
   20|  14.3k|        loop {
   21|  14.3k|            match self.string_for_hash.entry(hash) {
   22|  7.44k|                Entry::Vacant(e) => {
   23|  7.44k|                    e.insert(value.into());
   24|  7.44k|                    return Key(hash);
   25|       |                }
   26|  6.90k|                Entry::Occupied(e) => loop {
   27|  6.90k|                    if e.get() == value {
   28|  6.90k|                        return Key(hash);
   29|      0|                    } else if hash == u64::MAX - 1 {
   30|      0|                        hash = 0;
   31|      0|                    } else {
   32|      0|                        hash += 1;
   33|      0|                    }
   34|       |                },
   35|       |            }
   36|       |        }
   37|  14.3k|    }
_RNvMNtCskZUKzdIRemu_5oxrdf9interningNtB2_8Interner3get:
   39|  7.11k|    fn get(&self, value: &str) -> Option<Key> {
   40|  7.11k|        let mut hash = self.hash(value);
   41|       |        loop {
   42|  7.11k|            let v = self.string_for_hash.get(&hash)?;
   43|  7.11k|            if v == value {
   44|  7.11k|                return Some(Key(hash));
   45|      0|            } else if hash == u64::MAX - 1 {
   46|      0|                hash = 0;
   47|      0|            } else {
   48|      0|                hash += 1;
   49|      0|            }
   50|       |        }
   51|  7.11k|    }
_RNvMNtCskZUKzdIRemu_5oxrdf9interningNtB2_8Interner4hash:
   53|  21.4k|    fn hash(&self, value: &str) -> u64 {
   54|  21.4k|        let hash = self.hasher.hash_one(value);
   55|  21.4k|        if hash == u64::MAX {
   56|      0|            0
   57|       |        } else {
   58|  21.4k|            hash
   59|       |        }
   60|  21.4k|    }
_RNvMNtCskZUKzdIRemu_5oxrdf9interningNtB2_8Interner7resolve:
   62|   319k|    fn resolve(&self, key: Key) -> &str {
   63|   319k|        &self.string_for_hash[&key.0]
   64|   319k|    }
_RNvMs0_NtCskZUKzdIRemu_5oxrdf9interningNtB5_17InternedNamedNode12encoded_into:
   90|  12.8k|    pub fn encoded_into(named_node: NamedNodeRef<'_>, interner: &mut Interner) -> Self {
   91|  12.8k|        Self {
   92|  12.8k|            id: interner.get_or_intern(named_node.as_str()),
   93|  12.8k|        }
   94|  12.8k|    }
_RNvMs0_NtCskZUKzdIRemu_5oxrdf9interningNtB5_17InternedNamedNode12encoded_from:
   96|  6.40k|    pub fn encoded_from(named_node: NamedNodeRef<'_>, interner: &Interner) -> Option<Self> {
   97|  6.40k|        Some(Self {
   98|  6.40k|            id: interner.get(named_node.as_str())?,
   99|       |        })
  100|  6.40k|    }
_RNvMs0_NtCskZUKzdIRemu_5oxrdf9interningNtB5_17InternedNamedNode11decode_from:
  102|   315k|    pub fn decode_from(self, interner: &Interner) -> NamedNodeRef<'_> {
  103|   315k|        NamedNodeRef::new_unchecked(interner.resolve(self.id))
  104|   315k|    }
_RNvMs1_NtCskZUKzdIRemu_5oxrdf9interningNtB5_17InternedBlankNode12encoded_into:
  128|  14.5k|    pub fn encoded_into(blank_node: BlankNodeRef<'_>, interner: &mut Interner) -> Self {
  129|  14.5k|        if let Some(id) = blank_node.unique_id() {
  130|  14.5k|            interner
  131|  14.5k|                .string_for_blank_node_id
  132|  14.5k|                .entry(id)
  133|  14.5k|                .or_insert_with(|| blank_node.as_str().into());
  134|  14.5k|            Self::Number { id }
  135|       |        } else {
  136|      0|            Self::Other {
  137|      0|                id: interner.get_or_intern(blank_node.as_str()),
  138|      0|            }
  139|       |        }
  140|  14.5k|    }
_RNvMs1_NtCskZUKzdIRemu_5oxrdf9interningNtB5_17InternedBlankNode12encoded_from:
  142|  3.62k|    pub fn encoded_from(blank_node: BlankNodeRef<'_>, interner: &Interner) -> Option<Self> {
  143|  3.62k|        if let Some(id) = blank_node.unique_id() {
  144|  3.62k|            interner
  145|  3.62k|                .string_for_blank_node_id
  146|  3.62k|                .contains_key(&id)
  147|  3.62k|                .then_some(Self::Number { id })
  148|       |        } else {
  149|       |            Some(Self::Other {
  150|      0|                id: interner.get(blank_node.as_str())?,
  151|       |            })
  152|       |        }
  153|  3.62k|    }
_RNvMs1_NtCskZUKzdIRemu_5oxrdf9interningNtB5_17InternedBlankNode11decode_from:
  155|  3.62k|    pub fn decode_from(self, interner: &Interner) -> BlankNodeRef<'_> {
  156|  3.62k|        BlankNodeRef::new_unchecked(match self {
  157|  3.62k|            Self::Number { id } => &interner.string_for_blank_node_id[&id],
  158|      0|            Self::Other { id } => interner.resolve(id),
  159|       |        })
  160|  3.62k|    }
_RNvMs2_NtCskZUKzdIRemu_5oxrdf9interningNtB5_15InternedLiteral12encoded_into:
  188|  1.49k|    pub fn encoded_into(literal: LiteralRef<'_>, interner: &mut Interner) -> Self {
  189|  1.49k|        let value_id = interner.get_or_intern(literal.value());
  190|  1.49k|        if literal.is_plain() {
  191|  1.49k|            if let Some(language) = literal.language() {
  192|      0|                Self::LanguageTaggedString {
  193|      0|                    value_id,
  194|      0|                    language_id: interner.get_or_intern(language),
  195|      0|                }
  196|       |            } else {
  197|  1.49k|                Self::String { value_id }
  198|       |            }
  199|       |        } else {
  200|      0|            Self::TypedLiteral {
  201|      0|                value_id,
  202|      0|                datatype: InternedNamedNode::encoded_into(literal.datatype(), interner),
  203|      0|            }
  204|       |        }
  205|  1.49k|    }
_RNvMs2_NtCskZUKzdIRemu_5oxrdf9interningNtB5_15InternedLiteral12encoded_from:
  207|    718|    pub fn encoded_from(literal: LiteralRef<'_>, interner: &Interner) -> Option<Self> {
  208|    718|        let value_id = interner.get(literal.value())?;
  209|    718|        Some(if literal.is_plain() {
  210|    718|            if let Some(language) = literal.language() {
  211|       |                Self::LanguageTaggedString {
  212|      0|                    value_id,
  213|      0|                    language_id: interner.get(language)?,
  214|       |                }
  215|       |            } else {
  216|    718|                Self::String { value_id }
  217|       |            }
  218|       |        } else {
  219|       |            Self::TypedLiteral {
  220|      0|                value_id,
  221|      0|                datatype: InternedNamedNode::encoded_from(literal.datatype(), interner)?,
  222|       |            }
  223|       |        })
  224|    718|    }
_RNvMs2_NtCskZUKzdIRemu_5oxrdf9interningNtB5_15InternedLiteral11decode_from:
  226|  4.23k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> LiteralRef<'a> {
  227|  4.23k|        match self {
  228|  4.23k|            Self::String { value_id } => {
  229|  4.23k|                LiteralRef::new_simple_literal(interner.resolve(*value_id))
  230|       |            }
  231|       |            Self::LanguageTaggedString {
  232|      0|                value_id,
  233|      0|                language_id,
  234|      0|            } => LiteralRef::new_language_tagged_literal_unchecked(
  235|      0|                interner.resolve(*value_id),
  236|      0|                interner.resolve(*language_id),
  237|      0|            ),
  238|      0|            Self::TypedLiteral { value_id, datatype } => LiteralRef::new_typed_literal(
  239|      0|                interner.resolve(*value_id),
  240|      0|                datatype.decode_from(interner),
  241|      0|            ),
  242|       |        }
  243|  4.23k|    }
_RNvMs3_NtCskZUKzdIRemu_5oxrdf9interningNtB5_15InternedSubject12encoded_into:
  274|  7.21k|    pub fn encoded_into(node: SubjectRef<'_>, interner: &mut Interner) -> Self {
  275|  7.21k|        match node {
  276|      0|            SubjectRef::NamedNode(node) => {
  277|      0|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  278|       |            }
  279|  7.21k|            SubjectRef::BlankNode(node) => {
  280|  7.21k|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  281|       |            }
  282|       |            #[cfg(feature = "rdf-star")]
  283|      0|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  284|      0|                triple.as_ref(),
  285|      0|                interner,
  286|      0|            ))),
  287|       |        }
  288|  7.21k|    }
_RNvMs3_NtCskZUKzdIRemu_5oxrdf9interningNtB5_15InternedSubject12encoded_from:
  290|  3.58k|    pub fn encoded_from(node: SubjectRef<'_>, interner: &Interner) -> Option<Self> {
  291|  3.58k|        Some(match node {
  292|      0|            SubjectRef::NamedNode(node) => {
  293|      0|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  294|       |            }
  295|  3.58k|            SubjectRef::BlankNode(node) => {
  296|  3.58k|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  297|       |            }
  298|       |            #[cfg(feature = "rdf-star")]
  299|      0|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  300|      0|                triple.as_ref(),
  301|      0|                interner,
  302|      0|            )?)),
  303|       |        })
  304|  3.58k|    }
_RNvMs3_NtCskZUKzdIRemu_5oxrdf9interningNtB5_15InternedSubject11decode_from:
  306|  3.58k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> SubjectRef<'a> {
  307|  3.58k|        match self {
  308|      0|            Self::NamedNode(node) => SubjectRef::NamedNode(node.decode_from(interner)),
  309|  3.58k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.decode_from(interner)),
  310|       |            #[cfg(feature = "rdf-star")]
  311|      0|            Self::Triple(triple) => SubjectRef::Triple(&interner.triples[triple.as_ref()]),
  312|       |        }
  313|  3.58k|    }
_RNvMs4_NtCskZUKzdIRemu_5oxrdf9interningNtB5_17InternedGraphName12encoded_into:
  341|  2.32k|    pub fn encoded_into(node: GraphNameRef<'_>, interner: &mut Interner) -> Self {
  342|  2.32k|        match node {
  343|  2.32k|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  344|      0|            GraphNameRef::NamedNode(node) => {
  345|      0|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  346|       |            }
  347|      0|            GraphNameRef::BlankNode(node) => {
  348|      0|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  349|       |            }
  350|       |        }
  351|  2.32k|    }
_RNvMs4_NtCskZUKzdIRemu_5oxrdf9interningNtB5_17InternedGraphName12encoded_from:
  353|  3.58k|    pub fn encoded_from(node: GraphNameRef<'_>, interner: &Interner) -> Option<Self> {
  354|  3.58k|        Some(match node {
  355|  3.58k|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  356|      0|            GraphNameRef::NamedNode(node) => {
  357|      0|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  358|       |            }
  359|      0|            GraphNameRef::BlankNode(node) => {
  360|      0|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  361|       |            }
  362|       |        })
  363|  3.58k|    }
_RNvMs4_NtCskZUKzdIRemu_5oxrdf9interningNtB5_17InternedGraphName11decode_from:
  365|  3.58k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> GraphNameRef<'a> {
  366|  3.58k|        match self {
  367|  3.58k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  368|      0|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.decode_from(interner)),
  369|      0|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.decode_from(interner)),
  370|       |        }
  371|  3.58k|    }
_RNvMs5_NtCskZUKzdIRemu_5oxrdf9interningNtB5_12InternedTerm12encoded_into:
  400|  7.21k|    pub fn encoded_into(term: TermRef<'_>, interner: &mut Interner) -> Self {
  401|  7.21k|        match term {
  402|  5.64k|            TermRef::NamedNode(term) => {
  403|  5.64k|                Self::NamedNode(InternedNamedNode::encoded_into(term, interner))
  404|       |            }
  405|     84|            TermRef::BlankNode(term) => {
  406|     84|                Self::BlankNode(InternedBlankNode::encoded_into(term, interner))
  407|       |            }
  408|  1.49k|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_into(term, interner)),
  409|       |            #[cfg(feature = "rdf-star")]
  410|      0|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  411|      0|                triple.as_ref(),
  412|      0|                interner,
  413|      0|            ))),
  414|       |        }
  415|  7.21k|    }
_RNvMs5_NtCskZUKzdIRemu_5oxrdf9interningNtB5_12InternedTerm12encoded_from:
  417|  3.58k|    pub fn encoded_from(term: TermRef<'_>, interner: &Interner) -> Option<Self> {
  418|  3.58k|        Some(match term {
  419|  2.82k|            TermRef::NamedNode(term) => {
  420|  2.82k|                Self::NamedNode(InternedNamedNode::encoded_from(term, interner)?)
  421|       |            }
  422|     42|            TermRef::BlankNode(term) => {
  423|     42|                Self::BlankNode(InternedBlankNode::encoded_from(term, interner)?)
  424|       |            }
  425|    718|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_from(term, interner)?),
  426|       |            #[cfg(feature = "rdf-star")]
  427|      0|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  428|      0|                triple.as_ref(),
  429|      0|                interner,
  430|      0|            )?)),
  431|       |        })
  432|  3.58k|    }
_RNvMs5_NtCskZUKzdIRemu_5oxrdf9interningNtB5_12InternedTerm11decode_from:
  434|  3.58k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> TermRef<'a> {
  435|  3.58k|        match self {
  436|  2.82k|            Self::NamedNode(term) => TermRef::NamedNode(term.decode_from(interner)),
  437|     42|            Self::BlankNode(term) => TermRef::BlankNode(term.decode_from(interner)),
  438|    718|            Self::Literal(term) => TermRef::Literal(term.decode_from(interner)),
  439|       |            #[cfg(feature = "rdf-star")]
  440|      0|            Self::Triple(triple) => TermRef::Triple(&interner.triples[triple.as_ref()]),
  441|       |        }
  442|  3.58k|    }
_RNvXs7_NtCskZUKzdIRemu_5oxrdf9interningNtB5_21IdentityHasherBuilderNtNtCscdEvteftVc2_4core4hash11BuildHasher12build_hasher:
  511|   343k|    fn build_hasher(&self) -> Self::Hasher {
  512|   343k|        Self::Hasher::default()
  513|   343k|    }
_RNvXs8_NtCskZUKzdIRemu_5oxrdf9interningNtB5_14IdentityHasherNtNtCscdEvteftVc2_4core4hash6Hasher6finish:
  522|   343k|    fn finish(&self) -> u64 {
  523|   343k|        self.value
  524|   343k|    }
_RNvXs8_NtCskZUKzdIRemu_5oxrdf9interningNtB5_14IdentityHasherNtNtCscdEvteftVc2_4core4hash6Hasher9write_u64:
  530|   343k|    fn write_u64(&mut self, i: u64) {
  531|   343k|        self.value = i
  532|   343k|    }

_RNvMNtCskZUKzdIRemu_5oxrdf7literalNtB2_7Literal6as_refCsa0b4RSFSw2P_7rdf_xml:
  129|  50.4k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|  50.4k|        LiteralRef(match &self.0 {
  131|  48.2k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|      0|            LiteralContent::LanguageTaggedString { value, language } => {
  133|      0|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|  2.21k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|  2.21k|                value,
  137|  2.21k|                datatype: datatype.as_ref(),
  138|  2.21k|            },
  139|       |        })
  140|  50.4k|    }
_RNvMst_NtCskZUKzdIRemu_5oxrdf7literalNtB5_10LiteralRef5valueCsa0b4RSFSw2P_7rdf_xml:
  488|  48.9k|    pub const fn value(self) -> &'a str {
  489|  48.9k|        match self.0 {
  490|  46.7k|            LiteralRefContent::String(value)
  491|      0|            | LiteralRefContent::LanguageTaggedString { value, .. }
  492|  48.9k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  493|  48.9k|        }
  494|  48.9k|    }
_RNvMst_NtCskZUKzdIRemu_5oxrdf7literalNtB5_10LiteralRef8datatypeCsa0b4RSFSw2P_7rdf_xml:
  513|  2.21k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  514|  2.21k|        match self.0 {
  515|      0|            LiteralRefContent::String(_) => xsd::STRING,
  516|      0|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  517|  2.21k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  518|       |        }
  519|  2.21k|    }
_RNvMst_NtCskZUKzdIRemu_5oxrdf7literalNtB5_10LiteralRef8is_plainCsa0b4RSFSw2P_7rdf_xml:
  526|  48.9k|    pub const fn is_plain(self) -> bool {
  527|  2.21k|        matches!(
  528|  48.9k|            self.0,
  529|       |            LiteralRefContent::String(_) | LiteralRefContent::LanguageTaggedString { .. }
  530|       |        )
  531|  48.9k|    }
_RNvMst_NtCskZUKzdIRemu_5oxrdf7literalNtB5_10LiteralRef8languageCsa0b4RSFSw2P_7rdf_xml:
  501|  48.9k|    pub const fn language(self) -> Option<&'a str> {
  502|  48.9k|        match self.0 {
  503|      0|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  504|  48.9k|            _ => None,
  505|       |        }
  506|  48.9k|    }
_RINvMNtCskZUKzdIRemu_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   47|  93.9k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|  93.9k|        Self(LiteralContent::String(value.into()))
   49|  93.9k|    }
_RINvMNtCskZUKzdIRemu_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   53|  4.65k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|  4.65k|        let value = value.into();
   55|  4.65k|        let datatype = datatype.into();
   56|  4.65k|        Self(if datatype == xsd::STRING {
   57|    214|            LiteralContent::String(value)
   58|       |        } else {
   59|  4.43k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|  4.65k|    }
_RNvMst_NtCskZUKzdIRemu_5oxrdf7literalNtB5_10LiteralRef18new_simple_literalB7_:
  459|  4.23k|    pub const fn new_simple_literal(value: &'a str) -> Self {
  460|  4.23k|        LiteralRef(LiteralRefContent::String(value))
  461|  4.23k|    }
_RNvMst_NtCskZUKzdIRemu_5oxrdf7literalNtB5_10LiteralRef5valueB7_:
  488|  2.20k|    pub const fn value(self) -> &'a str {
  489|  2.20k|        match self.0 {
  490|  2.20k|            LiteralRefContent::String(value)
  491|      0|            | LiteralRefContent::LanguageTaggedString { value, .. }
  492|  2.20k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  493|  2.20k|        }
  494|  2.20k|    }
_RNvMst_NtCskZUKzdIRemu_5oxrdf7literalNtB5_10LiteralRef8languageB7_:
  501|  2.20k|    pub const fn language(self) -> Option<&'a str> {
  502|  2.20k|        match self.0 {
  503|      0|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  504|  2.20k|            _ => None,
  505|       |        }
  506|  2.20k|    }
_RNvMst_NtCskZUKzdIRemu_5oxrdf7literalNtB5_10LiteralRef8is_plainB7_:
  526|  2.20k|    pub const fn is_plain(self) -> bool {
  527|      0|        matches!(
  528|  2.20k|            self.0,
  529|       |            LiteralRefContent::String(_) | LiteralRefContent::LanguageTaggedString { .. }
  530|       |        )
  531|  2.20k|    }

_RNvMNtCskZUKzdIRemu_5oxrdf10named_nodeNtB2_9NamedNode6as_refCsa0b4RSFSw2P_7rdf_xml:
   54|   647k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|   647k|        NamedNodeRef::new_unchecked(&self.iri)
   56|   647k|    }
_RNvMs4_NtCskZUKzdIRemu_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCsa0b4RSFSw2P_7rdf_xml:
  138|  2.37k|    pub fn into_owned(self) -> NamedNode {
  139|  2.37k|        NamedNode::new_unchecked(self.iri)
  140|  2.37k|    }
_RNvMs4_NtCskZUKzdIRemu_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCsa0b4RSFSw2P_7rdf_xml:
  128|   647k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   647k|        Self { iri }
  130|   647k|    }
_RNvMs4_NtCskZUKzdIRemu_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCsa0b4RSFSw2P_7rdf_xml:
  133|  8.79k|    pub const fn as_str(self) -> &'a str {
  134|  8.79k|        self.iri
  135|  8.79k|    }
_RNvMNtCskZUKzdIRemu_5oxrdf10named_nodeNtB2_9NamedNode6as_strCseesEdg7HnAe_8oxrdfxml:
   44|   579k|    pub fn as_str(&self) -> &str {
   45|   579k|        self.iri.as_str()
   46|   579k|    }
_RNvMs4_NtCskZUKzdIRemu_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCseesEdg7HnAe_8oxrdfxml:
  133|   371k|    pub const fn as_str(self) -> &'a str {
  134|   371k|        self.iri
  135|   371k|    }
_RNvXs0_NtCskZUKzdIRemu_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCscdEvteftVc2_4core3cmp9PartialEqeE2eqCseesEdg7HnAe_8oxrdfxml:
   68|   579k|    fn eq(&self, other: &str) -> bool {
   69|   579k|        self.as_str() == other
   70|   579k|    }
_RINvMNtCskZUKzdIRemu_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   39|   982k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   982k|        Self { iri: iri.into() }
   41|   982k|    }
_RINvMNtCskZUKzdIRemu_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|   567k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   567k|        Self { iri: iri.into() }
   41|   567k|    }
_RNvMNtCskZUKzdIRemu_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|  4.65k|    pub fn as_str(&self) -> &str {
   45|  4.65k|        self.iri.as_str()
   46|  4.65k|    }
_RNvMs4_NtCskZUKzdIRemu_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedB7_:
  128|   315k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   315k|        Self { iri }
  130|   315k|    }
_RNvMs4_NtCskZUKzdIRemu_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|  23.9k|    pub const fn as_str(self) -> &'a str {
  134|  23.9k|        self.iri
  135|  23.9k|    }
_RNvMs4_NtCskZUKzdIRemu_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|   565k|    pub fn into_owned(self) -> NamedNode {
  139|   565k|        NamedNode::new_unchecked(self.iri)
  140|   565k|    }
_RNvXs6_NtCskZUKzdIRemu_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCscdEvteftVc2_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|   565k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|   565k|        node.into_owned()
  154|   565k|    }
_RNvXs9_NtCskZUKzdIRemu_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCscdEvteftVc2_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|  4.65k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|  4.65k|        self.as_str() == other.as_str()
  175|  4.65k|    }

_RNvMs16_NtCskZUKzdIRemu_5oxrdf6tripleNtB6_6Triple6as_refCsa0b4RSFSw2P_7rdf_xml:
  835|   347k|    pub fn as_ref(&self) -> TripleRef<'_> {
  836|   347k|        TripleRef {
  837|   347k|            subject: self.subject.as_ref(),
  838|   347k|            predicate: self.predicate.as_ref(),
  839|   347k|            object: self.object.as_ref(),
  840|   347k|        }
  841|   347k|    }
_RNvMsc_NtCskZUKzdIRemu_5oxrdf6tripleNtB5_7Subject6as_refCsa0b4RSFSw2P_7rdf_xml:
  181|   668k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|   668k|        match self {
  183|  8.71k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|   659k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|      0|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|   668k|    }
_RNvMsn_NtCskZUKzdIRemu_5oxrdf6tripleNtB5_10SubjectRef10into_ownedCsa0b4RSFSw2P_7rdf_xml:
  294|   292k|    pub fn into_owned(self) -> Subject {
  295|   292k|        match self {
  296|  2.37k|            Self::NamedNode(node) => Subject::NamedNode(node.into_owned()),
  297|   289k|            Self::BlankNode(node) => Subject::BlankNode(node.into_owned()),
  298|       |            #[cfg(feature = "rdf-star")]
  299|      0|            Self::Triple(triple) => Subject::Triple(Box::new(triple.clone())),
  300|       |        }
  301|   292k|    }
_RNvMsy_NtCskZUKzdIRemu_5oxrdf6tripleNtB5_4Term6as_refCsa0b4RSFSw2P_7rdf_xml:
  417|   347k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|   347k|        match self {
  419|   289k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|  7.81k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  50.4k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|      0|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|   347k|    }
_RNvXs1a_NtCskZUKzdIRemu_5oxrdf6tripleNtB6_9TripleRefINtNtCscdEvteftVc2_4core7convert4FromRNtB6_6TripleE4fromCsa0b4RSFSw2P_7rdf_xml:
  926|   347k|    fn from(triple: &'a Triple) -> Self {
  927|   347k|        triple.as_ref()
  928|   347k|    }
_RNvXsL_NtCskZUKzdIRemu_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtB5_7SubjectE4fromCseesEdg7HnAe_8oxrdfxml:
  520|  20.3k|    fn from(node: Subject) -> Self {
  521|  20.3k|        match node {
  522|  4.63k|            Subject::NamedNode(node) => node.into(),
  523|  15.6k|            Subject::BlankNode(node) => node.into(),
  524|       |            #[cfg(feature = "rdf-star")]
  525|      0|            Subject::Triple(triple) => Self::Triple(triple),
  526|       |        }
  527|  20.3k|    }
_RNvXse_NtCskZUKzdIRemu_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromCseesEdg7HnAe_8oxrdfxml:
  200|  4.99k|    fn from(node: NamedNode) -> Self {
  201|  4.99k|        Self::NamedNode(node)
  202|  4.99k|    }
_RINvMs16_NtCskZUKzdIRemu_5oxrdf6tripleNtB7_6Triple3newNtB7_7SubjectNtNtB9_10named_node12NamedNodeRefNtB15_9NamedNodeECseesEdg7HnAe_8oxrdfxml:
  795|   565k|    pub fn new(
  796|   565k|        subject: impl Into<Subject>,
  797|   565k|        predicate: impl Into<NamedNode>,
  798|   565k|        object: impl Into<Term>,
  799|   565k|    ) -> Self {
  800|   565k|        Self {
  801|   565k|            subject: subject.into(),
  802|   565k|            predicate: predicate.into(),
  803|   565k|            object: object.into(),
  804|   565k|        }
  805|   565k|    }
_RINvMs16_NtCskZUKzdIRemu_5oxrdf6tripleNtB7_6Triple3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtB7_4TermECseesEdg7HnAe_8oxrdfxml:
  795|   113k|    pub fn new(
  796|   113k|        subject: impl Into<Subject>,
  797|   113k|        predicate: impl Into<NamedNode>,
  798|   113k|        object: impl Into<Term>,
  799|   113k|    ) -> Self {
  800|   113k|        Self {
  801|   113k|            subject: subject.into(),
  802|   113k|            predicate: predicate.into(),
  803|   113k|            object: object.into(),
  804|   113k|        }
  805|   113k|    }
_RINvMs16_NtCskZUKzdIRemu_5oxrdf6tripleNtB7_6Triple3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtNtB9_7literal7LiteralECseesEdg7HnAe_8oxrdfxml:
  795|  5.18k|    pub fn new(
  796|  5.18k|        subject: impl Into<Subject>,
  797|  5.18k|        predicate: impl Into<NamedNode>,
  798|  5.18k|        object: impl Into<Term>,
  799|  5.18k|    ) -> Self {
  800|  5.18k|        Self {
  801|  5.18k|            subject: subject.into(),
  802|  5.18k|            predicate: predicate.into(),
  803|  5.18k|            object: object.into(),
  804|  5.18k|        }
  805|  5.18k|    }
_RNvXse_NtCskZUKzdIRemu_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|  4.27k|    fn from(node: NamedNode) -> Self {
  201|  4.27k|        Self::NamedNode(node)
  202|  4.27k|    }
_RNvXsg_NtCskZUKzdIRemu_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|   585k|    fn from(node: BlankNode) -> Self {
  215|   585k|        Self::BlankNode(node)
  216|   585k|    }
_RNvXsA_NtCskZUKzdIRemu_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|   570k|    fn from(node: NamedNode) -> Self {
  438|   570k|        Self::NamedNode(node)
  439|   570k|    }
_RNvXsC_NtCskZUKzdIRemu_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  451|  15.6k|    fn from(node: BlankNode) -> Self {
  452|  15.6k|        Self::BlankNode(node)
  453|  15.6k|    }
_RNvXsE_NtCskZUKzdIRemu_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  465|  98.6k|    fn from(literal: Literal) -> Self {
  466|  98.6k|        Self::Literal(literal)
  467|  98.6k|    }

_RNvXs_NtCseesEdg7HnAe_8oxrdfxml5errorNtB4_16RdfXmlParseErrorINtNtCscdEvteftVc2_4core7convert4FromNtNtCs4QWtT85WPeh_9quick_xml6errors5ErrorE4fromB6_:
   30|   817k|    fn from(error: quick_xml::Error) -> Self {
   31|   817k|        match error {
   32|      0|            quick_xml::Error::Io(error) => {
   33|      0|                Self::Io(Arc::try_unwrap(error).unwrap_or_else(|e| io::Error::new(e.kind(), e)))
   34|       |            }
   35|   817k|            _ => Self::Syntax(RdfXmlSyntaxError(SyntaxErrorKind::Xml(error))),
   36|       |        }
   37|   817k|    }
_RNvXs6_NtCseesEdg7HnAe_8oxrdfxml5errorNtB5_16RdfXmlParseErrorINtNtCscdEvteftVc2_4core7convert4FromNtB5_17RdfXmlSyntaxErrorE4from:
    7|   739k|#[derive(Debug, thiserror::Error)]
_RNvXs9_NtCseesEdg7HnAe_8oxrdfxml5errorNtB5_17RdfXmlSyntaxErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
   41|  1.55M|#[derive(Debug, thiserror::Error)]
_RNvXsd_NtCseesEdg7HnAe_8oxrdfxml5errorNtB5_15SyntaxErrorKindNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
   45|  1.55M|#[derive(Debug, thiserror::Error)]
_RINvMs0_NtCseesEdg7HnAe_8oxrdfxml5errorNtB6_17RdfXmlSyntaxError3msgNtNtCs3OstG5Tqy1X_5alloc6string6StringEB8_:
   68|   332k|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   69|   332k|        Self(SyntaxErrorKind::Msg(msg.into()))
   70|   332k|    }
_RINvMs0_NtCseesEdg7HnAe_8oxrdfxml5errorNtB6_17RdfXmlSyntaxError3msgReEB8_:
   68|   266k|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   69|   266k|        Self(SyntaxErrorKind::Msg(msg.into()))
   70|   266k|    }

_RNvMNtCseesEdg7HnAe_8oxrdfxml6parserNtB2_12RdfXmlParser3newCsa0b4RSFSw2P_7rdf_xml:
   64|  77.0k|    pub fn new() -> Self {
   65|  77.0k|        Self::default()
   66|  77.0k|    }
_RNvMNtCseesEdg7HnAe_8oxrdfxml6parserNtB2_12RdfXmlParser9uncheckedCsa0b4RSFSw2P_7rdf_xml:
   74|  1.28k|    pub fn unchecked(mut self) -> Self {
   75|  1.28k|        self.unchecked = true;
   76|  1.28k|        self
   77|  1.28k|    }
_RNvMNtCseesEdg7HnAe_8oxrdfxml6parserNtB2_12RdfXmlParser11parse_slice:
  193|  77.0k|    pub fn parse_slice(self, slice: &[u8]) -> FromSliceRdfXmlReader<'_> {
  194|  77.0k|        FromSliceRdfXmlReader {
  195|  77.0k|            results: Vec::new(),
  196|  77.0k|            reader: self.parse(slice),
  197|  77.0k|            reader_buffer: Vec::default(),
  198|  77.0k|        }
  199|  77.0k|    }
_RNvXs1_NtCseesEdg7HnAe_8oxrdfxml6parserNtB5_21FromSliceRdfXmlReaderNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next:
  524|  2.31M|    fn next(&mut self) -> Option<Self::Item> {
  525|       |        loop {
  526|  4.81M|            if let Some(triple) = self.results.pop() {
  527|   684k|                return Some(Ok(triple));
  528|  4.13M|            } else if self.reader.is_end {
  529|  77.0k|                return None;
  530|  4.05M|            }
  531|  4.05M|            if let Err(RdfXmlParseError::Syntax(e)) = self.parse_step() {
  532|       |                // I/O errors can't happen
  533|  1.55M|                return Some(Err(e));
  534|  2.50M|            }
  535|       |        }
  536|  2.31M|    }
_RNvMs2_NtCseesEdg7HnAe_8oxrdfxml6parserNtB5_21FromSliceRdfXmlReader10parse_step:
  606|  4.05M|    fn parse_step(&mut self) -> Result<(), RdfXmlParseError> {
  607|  4.05M|        self.reader_buffer.clear();
  608|  4.05M|        let event = self
  609|  4.05M|            .reader
  610|  4.05M|            .reader
  611|  4.05M|            .read_event_into(&mut self.reader_buffer)?;
  612|  4.02M|        self.reader.parse_event(event, &mut self.results)
  613|  4.05M|    }
_RNvMs4_NtCseesEdg7HnAe_8oxrdfxml6parserNtB5_11RdfXmlState8base_iri:
  747|  1.24M|    fn base_iri(&self) -> Option<&Iri<String>> {
  748|  1.24M|        match self {
  749|   186k|            Self::Doc { base_iri, .. }
  750|   293k|            | Self::Rdf { base_iri, .. }
  751|   442k|            | Self::NodeElt { base_iri, .. }
  752|   318k|            | Self::PropertyElt { base_iri, .. }
  753|      0|            | Self::ParseTypeCollectionPropertyElt { base_iri, .. }
  754|  1.24M|            | Self::ParseTypeLiteralPropertyElt { base_iri, .. } => base_iri.as_ref(),
  755|  1.24M|        }
  756|  1.24M|    }
_RNvMs4_NtCseesEdg7HnAe_8oxrdfxml6parserNtB5_11RdfXmlState8language:
  758|  1.24M|    fn language(&self) -> Option<&String> {
  759|  1.24M|        match self {
  760|   186k|            Self::Doc { .. } => None,
  761|   293k|            Self::Rdf { language, .. }
  762|   442k|            | Self::NodeElt { language, .. }
  763|   318k|            | Self::PropertyElt { language, .. }
  764|      0|            | Self::ParseTypeCollectionPropertyElt { language, .. }
  765|  1.05M|            | Self::ParseTypeLiteralPropertyElt { language, .. } => language.as_ref(),
  766|       |        }
  767|  1.24M|    }
_RNvNtCseesEdg7HnAe_8oxrdfxml6parser10is_nc_name:
 1553|   327k|fn is_nc_name(name: &str) -> bool {
 1554|   327k|    // Name - (Char* ':' Char*)
 1555|   327k|    is_name(name) && name.chars().all(|c| c != ':')
 1556|   327k|}
_RNvNtCseesEdg7HnAe_8oxrdfxml6parser7is_name:
 1558|   327k|fn is_name(name: &str) -> bool {
 1559|   327k|    // NameStartChar (NameChar)*
 1560|   327k|    let mut c = name.chars();
 1561|   327k|    if !c.next().map_or(false, is_name_start_char) {
 1562|  5.05k|        return false;
 1563|   322k|    }
 1564|   322k|    c.all(is_name_char)
 1565|   327k|}
_RNvNtCseesEdg7HnAe_8oxrdfxml6parser13is_whitespace:
 1567|  1.77M|fn is_whitespace(c: u8) -> bool {
 1568|  1.77M|    matches!(c, b' ' | b'\t' | b'\n' | b'\r')
 1569|  1.77M|}
_RNvNtCseesEdg7HnAe_8oxrdfxml6parser7is_utf8:
 1571|  65.8k|fn is_utf8(encoding: &[u8]) -> bool {
 1572|  38.2k|    matches!(
 1573|  65.8k|        encoding.to_ascii_lowercase().as_slice(),
 1574|  65.8k|        b"unicode-1-1-utf-8"
 1575|  59.7k|            | b"unicode11utf8"
 1576|       |            | b"unicode20utf8"
 1577|  51.8k|            | b"utf-8"
 1578|  11.7k|            | b"utf8"
 1579|  10.0k|            | b"x-unicode20utf8"
 1580|       |    )
 1581|  65.8k|}
_RINvMNtCseesEdg7HnAe_8oxrdfxml6parserNtB3_12RdfXmlParser5parseRShEB5_:
  201|  77.0k|    fn parse<T>(&self, reader: T) -> RdfXmlReader<T> {
  202|  77.0k|        let mut reader = NsReader::from_reader(reader);
  203|  77.0k|        reader.config_mut().expand_empty_elements = true;
  204|  77.0k|        RdfXmlReader {
  205|  77.0k|            reader,
  206|  77.0k|            state: vec![RdfXmlState::Doc {
  207|  77.0k|                base_iri: self.base.clone(),
  208|  77.0k|            }],
  209|  77.0k|            custom_entities: HashMap::default(),
  210|  77.0k|            in_literal_depth: 0,
  211|  77.0k|            known_rdf_id: HashSet::default(),
  212|  77.0k|            is_end: false,
  213|  77.0k|            unchecked: self.unchecked,
  214|  77.0k|        }
  215|  77.0k|    }
_RNvMs5_NtCseesEdg7HnAe_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE11parse_eventB7_:
  781|  4.02M|    fn parse_event(
  782|  4.02M|        &mut self,
  783|  4.02M|        event: Event<'_>,
  784|  4.02M|        results: &mut Vec<Triple>,
  785|  4.02M|    ) -> Result<(), RdfXmlParseError> {
  786|  4.02M|        match event {
  787|  1.71M|            Event::Start(event) => self.parse_start_event(&event, results),
  788|   508k|            Event::End(event) => self.parse_end_event(&event, results),
  789|      0|            Event::Empty(_) => Err(RdfXmlSyntaxError::msg(
  790|      0|                "The expand_empty_elements option must be enabled",
  791|      0|            )
  792|      0|            .into()),
  793|  1.61M|            Event::Text(event) => self.parse_text_event(&event),
  794|      0|            Event::CData(event) => self.parse_text_event(&event.escape()?),
  795|  19.2k|            Event::Comment(_) | Event::PI(_) => Ok(()),
  796|  80.3k|            Event::Decl(decl) => {
  797|  80.3k|                if let Some(encoding) = decl.encoding() {
  798|  75.4k|                    if !is_utf8(&encoding?) {
  799|  27.5k|                        return Err(RdfXmlSyntaxError::msg(
  800|  27.5k|                            "Only UTF-8 is supported by the RDF/XML parser",
  801|  27.5k|                        )
  802|  27.5k|                        .into());
  803|  38.2k|                    }
  804|  4.88k|                }
  805|  43.1k|                Ok(())
  806|       |            }
  807|      0|            Event::DocType(dt) => self.parse_doctype(&dt),
  808|       |            Event::Eof => {
  809|  77.0k|                self.is_end = true;
  810|  77.0k|                Ok(())
  811|       |            }
  812|       |        }
  813|  4.02M|    }
_RNvMs5_NtCseesEdg7HnAe_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE17parse_start_eventB7_:
  853|  1.71M|    fn parse_start_event(
  854|  1.71M|        &mut self,
  855|  1.71M|        event: &BytesStart<'_>,
  856|  1.71M|        results: &mut Vec<Triple>,
  857|  1.71M|    ) -> Result<(), RdfXmlParseError> {
  858|       |        #[derive(PartialEq, Eq)]
  859|       |        enum RdfXmlParseType {
  860|       |            Default,
  861|       |            Collection,
  862|       |            Literal,
  863|       |            Resource,
  864|       |            Other,
  865|       |        }
  866|       |
  867|       |        #[derive(PartialEq, Eq)]
  868|       |        enum RdfXmlNextProduction {
  869|       |            Rdf,
  870|       |            NodeElt,
  871|       |            PropertyElt { subject: Subject },
  872|       |        }
  873|       |
  874|       |        // Literal case
  875|  1.71M|        if let Some(RdfXmlState::ParseTypeLiteralPropertyElt { writer, .. }) = self.state.last_mut()
  876|       |        {
  877|  45.8k|            let mut clean_event = BytesStart::new(
  878|  50.5k|                self.reader
  879|  50.5k|                    .decoder()
  880|  50.5k|                    .decode(event.name().as_ref())?
  881|  45.8k|                    .to_string(),
  882|       |            );
  883|  45.8k|            for attr in event.attributes() {
  884|  26.6k|                clean_event.push_attribute(attr.map_err(Error::InvalidAttr)?);
  885|       |            }
  886|  30.1k|            writer.write_event(Event::Start(clean_event))?;
  887|  30.1k|            self.in_literal_depth += 1;
  888|  30.1k|            return Ok(());
  889|  1.66M|        }
  890|       |
  891|  1.66M|        let tag_name = self.resolve_tag_name(event.name())?;
  892|       |
  893|       |        // We read attributes
  894|  1.26M|        let (mut language, mut base_iri) = if let Some(current_state) = self.state.last() {
  895|  1.24M|            (
  896|  1.24M|                current_state.language().cloned(),
  897|  1.24M|                current_state.base_iri().cloned(),
  898|  1.24M|            )
  899|       |        } else {
  900|  25.9k|            (None, None)
  901|       |        };
  902|       |
  903|  1.26M|        let mut id_attr = None;
  904|  1.26M|        let mut node_id_attr = None;
  905|  1.26M|        let mut about_attr = None;
  906|  1.26M|        let mut property_attrs = Vec::default();
  907|  1.26M|        let mut resource_attr = None;
  908|  1.26M|        let mut datatype_attr = None;
  909|  1.26M|        let mut parse_type = RdfXmlParseType::Default;
  910|  1.26M|        let mut type_attr = None;
  911|       |
  912|  1.26M|        for attribute in event.attributes() {
  913|   832k|            let attribute = attribute.map_err(Error::InvalidAttr)?;
  914|   793k|            if attribute.key.as_ref().starts_with(b"xml") {
  915|   388k|                if attribute.key.as_ref() == b"xml:lang" {
  916|      0|                    let tag = self.convert_attribute(&attribute)?.to_ascii_lowercase();
  917|      0|                    language = Some(if self.unchecked {
  918|      0|                        tag
  919|       |                    } else {
  920|      0|                        LanguageTag::parse(tag.to_ascii_lowercase())
  921|      0|                            .map_err(|error| {
  922|       |                                RdfXmlSyntaxError(SyntaxErrorKind::InvalidLanguageTag {
  923|       |                                    tag,
  924|       |                                    error,
  925|       |                                })
  926|      0|                            })?
  927|      0|                            .into_inner()
  928|       |                    });
  929|   388k|                } else if attribute.key.as_ref() == b"xml:base" {
  930|      0|                    let iri = self.convert_attribute(&attribute)?;
  931|      0|                    base_iri = Some(if self.unchecked {
  932|      0|                        Iri::parse_unchecked(iri.clone())
  933|       |                    } else {
  934|      0|                        Iri::parse(iri.clone()).map_err(|error| {
  935|       |                            RdfXmlSyntaxError(SyntaxErrorKind::InvalidIri { iri, error })
  936|      0|                        })?
  937|       |                    })
  938|   388k|                } else {
  939|   388k|                    // We ignore other xml attributes
  940|   388k|                }
  941|       |            } else {
  942|   405k|                let attribute_url = self.resolve_attribute_name(attribute.key)?;
  943|   400k|                if *attribute_url == *RDF_ID {
  944|  5.38k|                    let mut id = self.convert_attribute(&attribute)?;
  945|  4.78k|                    if !is_nc_name(&id) {
  946|  2.49k|                        return Err(RdfXmlSyntaxError::msg(format!(
  947|  2.49k|                            "{id} is not a valid rdf:ID value"
  948|  2.49k|                        ))
  949|  2.49k|                        .into());
  950|  2.29k|                    }
  951|  2.29k|                    id.insert(0, '#');
  952|  2.29k|                    id_attr = Some(id);
  953|   394k|                } else if *attribute_url == *RDF_BAG_ID {
  954|  10.1k|                    let bag_id = self.convert_attribute(&attribute)?;
  955|  8.55k|                    if !is_nc_name(&bag_id) {
  956|  5.54k|                        return Err(RdfXmlSyntaxError::msg(format!(
  957|  5.54k|                            "{bag_id} is not a valid rdf:bagID value"
  958|  5.54k|                        ))
  959|  5.54k|                        .into());
  960|  3.00k|                    }
  961|   384k|                } else if *attribute_url == *RDF_NODE_ID {
  962|   316k|                    let id = self.convert_attribute(&attribute)?;
  963|   314k|                    if !is_nc_name(&id) {
  964|  3.68k|                        return Err(RdfXmlSyntaxError::msg(format!(
  965|  3.68k|                            "{id} is not a valid rdf:nodeID value"
  966|  3.68k|                        ))
  967|  3.68k|                        .into());
  968|   310k|                    }
  969|   310k|                    node_id_attr = Some(BlankNode::new_unchecked(id));
  970|  68.2k|                } else if *attribute_url == *RDF_ABOUT {
  971|  8.89k|                    about_attr = Some(attribute);
  972|  59.3k|                } else if *attribute_url == *RDF_RESOURCE {
  973|  9.27k|                    resource_attr = Some(attribute);
  974|  50.0k|                } else if *attribute_url == *RDF_DATATYPE {
  975|  9.75k|                    datatype_attr = Some(attribute);
  976|  40.3k|                } else if *attribute_url == *RDF_PARSE_TYPE {
  977|  9.17k|                    parse_type = match attribute.value.as_ref() {
  978|  9.17k|                        b"Collection" => RdfXmlParseType::Collection,
  979|  8.02k|                        b"Literal" => RdfXmlParseType::Literal,
  980|  4.94k|                        b"Resource" => RdfXmlParseType::Resource,
  981|  9.17k|                        _ => RdfXmlParseType::Other,
  982|       |                    };
  983|  31.1k|                } else if attribute_url == rdf::TYPE.as_str() {
  984|  4.92k|                    type_attr = Some(attribute);
  985|  26.2k|                } else if RESERVED_RDF_ATTRIBUTES.contains(&&*attribute_url) {
  986|  3.57k|                    return Err(RdfXmlSyntaxError::msg(format!(
  987|  3.57k|                        "{attribute_url} is not a valid attribute"
  988|  3.57k|                    ))
  989|  3.57k|                    .into());
  990|       |                } else {
  991|  22.6k|                    property_attrs.push((
  992|  22.6k|                        self.parse_iri(attribute_url)?,
  993|  18.0k|                        self.convert_attribute(&attribute)?,
  994|       |                    ));
  995|       |                }
  996|       |            }
  997|       |        }
  998|       |
  999|       |        // Parsing with the base URI
 1000|  1.19M|        let id_attr = match id_attr {
 1001|  1.16k|            Some(iri) => {
 1002|  1.16k|                let iri = self.resolve_iri(&base_iri, iri)?;
 1003|      0|                if !self.unchecked {
 1004|      0|                    if self.known_rdf_id.contains(iri.as_str()) {
 1005|      0|                        return Err(RdfXmlSyntaxError::msg(format!(
 1006|      0|                            "{iri} has already been used as rdf:ID value"
 1007|      0|                        ))
 1008|      0|                        .into());
 1009|      0|                    }
 1010|      0|                    self.known_rdf_id.insert(iri.as_str().into());
 1011|      0|                }
 1012|      0|                Some(iri)
 1013|       |            }
 1014|  1.18M|            None => None,
 1015|       |        };
 1016|  1.18M|        let about_attr = match about_attr {
 1017|  7.87k|            Some(attr) => Some(self.convert_iri_attribute(&base_iri, &attr)?),
 1018|  1.18M|            None => None,
 1019|       |        };
 1020|  1.18M|        let resource_attr = match resource_attr {
 1021|  8.35k|            Some(attr) => Some(self.convert_iri_attribute(&base_iri, &attr)?),
 1022|  1.18M|            None => None,
 1023|       |        };
 1024|  1.18M|        let datatype_attr = match datatype_attr {
 1025|  8.96k|            Some(attr) => Some(self.convert_iri_attribute(&base_iri, &attr)?),
 1026|  1.17M|            None => None,
 1027|       |        };
 1028|  1.18M|        let type_attr = match type_attr {
 1029|  4.15k|            Some(attr) => Some(self.convert_iri_attribute(&base_iri, &attr)?),
 1030|  1.18M|            None => None,
 1031|       |        };
 1032|       |
 1033|  1.18M|        let expected_production = match self.state.last() {
 1034|   150k|            Some(RdfXmlState::Doc { .. }) => RdfXmlNextProduction::Rdf,
 1035|       |            Some(
 1036|       |                RdfXmlState::Rdf { .. }
 1037|       |                | RdfXmlState::PropertyElt { .. }
 1038|       |                | RdfXmlState::ParseTypeCollectionPropertyElt { .. },
 1039|   596k|            ) => RdfXmlNextProduction::NodeElt,
 1040|   417k|            Some(RdfXmlState::NodeElt { subject, .. }) => RdfXmlNextProduction::PropertyElt {
 1041|   417k|                subject: subject.clone(),
 1042|   417k|            },
 1043|       |            Some(RdfXmlState::ParseTypeLiteralPropertyElt { .. }) => {
 1044|      0|                return Err(
 1045|      0|                    RdfXmlSyntaxError::msg("ParseTypeLiteralPropertyElt production children should never be considered as a RDF/XML content").into()
 1046|      0|                );
 1047|       |            }
 1048|       |            None => {
 1049|  19.5k|                return Err(RdfXmlSyntaxError::msg(
 1050|  19.5k|                    "No state in the stack: the XML is not balanced",
 1051|  19.5k|                )
 1052|  19.5k|                .into());
 1053|       |            }
 1054|       |        };
 1055|       |
 1056|  1.16M|        let new_state = match expected_production {
 1057|       |            RdfXmlNextProduction::Rdf => {
 1058|   150k|                if *tag_name == *RDF_RDF {
 1059|  39.1k|                    RdfXmlState::Rdf { base_iri, language }
 1060|   110k|                } else if RESERVED_RDF_ELEMENTS.contains(&&*tag_name) {
 1061|  12.7k|                    return Err(RdfXmlSyntaxError::msg(format!(
 1062|  12.7k|                        "Invalid node element tag name: {tag_name}"
 1063|  12.7k|                    ))
 1064|  12.7k|                    .into());
 1065|       |                } else {
 1066|       |                    Self::build_node_elt(
 1067|  98.2k|                        self.parse_iri(tag_name)?,
 1068|  24.9k|                        base_iri,
 1069|  24.9k|                        language,
 1070|  24.9k|                        id_attr,
 1071|  24.9k|                        node_id_attr,
 1072|  24.9k|                        about_attr,
 1073|  24.9k|                        type_attr,
 1074|  24.9k|                        property_attrs,
 1075|  24.9k|                        results,
 1076|      0|                    )?
 1077|       |                }
 1078|       |            }
 1079|       |            RdfXmlNextProduction::NodeElt => {
 1080|   596k|                if RESERVED_RDF_ELEMENTS.contains(&&*tag_name) {
 1081|  18.2k|                    return Err(RdfXmlSyntaxError::msg(format!(
 1082|  18.2k|                        "Invalid property element tag name: {tag_name}"
 1083|  18.2k|                    ))
 1084|  18.2k|                    .into());
 1085|   577k|                }
 1086|   577k|                Self::build_node_elt(
 1087|   577k|                    self.parse_iri(tag_name)?,
 1088|   554k|                    base_iri,
 1089|   554k|                    language,
 1090|   554k|                    id_attr,
 1091|   554k|                    node_id_attr,
 1092|   554k|                    about_attr,
 1093|   554k|                    type_attr,
 1094|   554k|                    property_attrs,
 1095|   554k|                    results,
 1096|      0|                )?
 1097|       |            }
 1098|   417k|            RdfXmlNextProduction::PropertyElt { subject } => {
 1099|   417k|                let iri = if *tag_name == *RDF_LI {
 1100|  4.44k|                    let Some(RdfXmlState::NodeElt { li_counter, .. }) = self.state.last_mut()
 1101|       |                    else {
 1102|      0|                        return Err(RdfXmlSyntaxError::msg(format!(
 1103|      0|                            "Invalid property element tag name: {tag_name}"
 1104|      0|                        ))
 1105|      0|                        .into());
 1106|       |                    };
 1107|  4.44k|                    *li_counter += 1;
 1108|  4.44k|                    NamedNode::new_unchecked(format!(
 1109|  4.44k|                        "http://www.w3.org/1999/02/22-rdf-syntax-ns#_{li_counter}"
 1110|  4.44k|                    ))
 1111|   413k|                } else if RESERVED_RDF_ELEMENTS.contains(&&*tag_name)
 1112|   396k|                    || *tag_name == *RDF_DESCRIPTION
 1113|       |                {
 1114|  21.1k|                    return Err(RdfXmlSyntaxError::msg(format!(
 1115|  21.1k|                        "Invalid property element tag name: {tag_name}"
 1116|  21.1k|                    ))
 1117|  21.1k|                    .into());
 1118|       |                } else {
 1119|   392k|                    self.parse_iri(tag_name)?
 1120|       |                };
 1121|   361k|                match parse_type {
 1122|       |                    RdfXmlParseType::Default => {
 1123|   359k|                        if resource_attr.is_some()
 1124|   354k|                            || node_id_attr.is_some()
 1125|   345k|                            || !property_attrs.is_empty()
 1126|       |                        {
 1127|  16.2k|                            let object = match (resource_attr, node_id_attr)
 1128|       |                    {
 1129|  4.99k|                        (Some(resource_attr), None) => Subject::from(resource_attr),
 1130|  8.94k|                        (None, Some(node_id_attr)) => node_id_attr.into(),
 1131|  2.27k|                        (None, None) => BlankNode::default().into(),
 1132|      0|                        (Some(_), Some(_)) => return Err(RdfXmlSyntaxError::msg("Not both rdf:resource and rdf:nodeID could be set at the same time").into())
 1133|       |                    };
 1134|  16.2k|                            Self::emit_property_attrs(&object, property_attrs, &language, results);
 1135|  16.2k|                            if let Some(type_attr) = type_attr {
 1136|    232|                                results.push(Triple::new(object.clone(), rdf::TYPE, type_attr));
 1137|  15.9k|                            }
 1138|  16.2k|                            RdfXmlState::PropertyElt {
 1139|  16.2k|                                iri,
 1140|  16.2k|                                base_iri,
 1141|  16.2k|                                language,
 1142|  16.2k|                                subject,
 1143|  16.2k|                                object: Some(NodeOrText::Node(object)),
 1144|  16.2k|                                id_attr,
 1145|  16.2k|                                datatype_attr,
 1146|  16.2k|                            }
 1147|       |                        } else {
 1148|   343k|                            RdfXmlState::PropertyElt {
 1149|   343k|                                iri,
 1150|   343k|                                base_iri,
 1151|   343k|                                language,
 1152|   343k|                                subject,
 1153|   343k|                                object: None,
 1154|   343k|                                id_attr,
 1155|   343k|                                datatype_attr,
 1156|   343k|                            }
 1157|       |                        }
 1158|       |                    }
 1159|      0|                    RdfXmlParseType::Literal => RdfXmlState::ParseTypeLiteralPropertyElt {
 1160|      0|                        iri,
 1161|      0|                        base_iri,
 1162|      0|                        language,
 1163|      0|                        subject,
 1164|      0|                        writer: Writer::new(Vec::default()),
 1165|      0|                        id_attr,
 1166|      0|                        emit: true,
 1167|      0|                    },
 1168|      0|                    RdfXmlParseType::Resource => Self::build_parse_type_resource_property_elt(
 1169|      0|                        iri, base_iri, language, subject, id_attr, results,
 1170|      0|                    ),
 1171|      0|                    RdfXmlParseType::Collection => RdfXmlState::ParseTypeCollectionPropertyElt {
 1172|      0|                        iri,
 1173|      0|                        base_iri,
 1174|      0|                        language,
 1175|      0|                        subject,
 1176|      0|                        objects: Vec::default(),
 1177|      0|                        id_attr,
 1178|      0|                    },
 1179|  2.00k|                    RdfXmlParseType::Other => RdfXmlState::ParseTypeLiteralPropertyElt {
 1180|  2.00k|                        iri,
 1181|  2.00k|                        base_iri,
 1182|  2.00k|                        language,
 1183|  2.00k|                        subject,
 1184|  2.00k|                        writer: Writer::new(Vec::default()),
 1185|  2.00k|                        id_attr,
 1186|  2.00k|                        emit: false,
 1187|  2.00k|                    },
 1188|       |                }
 1189|       |            }
 1190|       |        };
 1191|   980k|        self.state.push(new_state);
 1192|   980k|        Ok(())
 1193|  1.71M|    }
_RNvMs5_NtCseesEdg7HnAe_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE15parse_end_eventB7_:
 1195|   508k|    fn parse_end_event(
 1196|   508k|        &mut self,
 1197|   508k|        event: &BytesEnd<'_>,
 1198|   508k|        results: &mut Vec<Triple>,
 1199|   508k|    ) -> Result<(), RdfXmlParseError> {
 1200|   508k|        // Literal case
 1201|   508k|        if self.in_literal_depth > 0 {
 1202|  9.51k|            if let Some(RdfXmlState::ParseTypeLiteralPropertyElt { writer, .. }) =
 1203|  9.51k|                self.state.last_mut()
 1204|       |            {
 1205|  9.51k|                writer.write_event(Event::End(BytesEnd::new(
 1206|  9.51k|                    self.reader.decoder().decode(event.name().as_ref())?,
 1207|      0|                )))?;
 1208|  7.29k|                self.in_literal_depth -= 1;
 1209|  7.29k|                return Ok(());
 1210|      0|            }
 1211|   499k|        }
 1212|       |
 1213|   499k|        if let Some(current_state) = self.state.pop() {
 1214|   476k|            self.end_state(current_state, results)?;
 1215|  22.3k|        }
 1216|   499k|        Ok(())
 1217|   508k|    }
_RNvMs5_NtCseesEdg7HnAe_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE16parse_text_eventB7_:
 1219|  1.61M|    fn parse_text_event(&mut self, event: &BytesText<'_>) -> Result<(), RdfXmlParseError> {
 1220|  1.61M|        let text = event.unescape_with(|e| self.resolve_entity(e))?.to_string();
 1221|  1.06M|        match self.state.last_mut() {
 1222|   102k|            Some(RdfXmlState::PropertyElt { object, .. }) => {
 1223|   102k|                if !event.iter().copied().all(is_whitespace) {
 1224|   100k|                    *object = Some(NodeOrText::Text(text));
 1225|   100k|                }
 1226|   102k|                Ok(())
 1227|       |            }
 1228|  19.4k|            Some(RdfXmlState::ParseTypeLiteralPropertyElt { writer, .. }) => {
 1229|  19.4k|                writer.write_event(Event::Text(BytesText::new(&text)))?;
 1230|  19.4k|                Ok(())
 1231|       |            }
 1232|       |            _ => {
 1233|   944k|                if event.iter().copied().all(is_whitespace) {
 1234|   723k|                    Ok(())
 1235|       |                } else {
 1236|   220k|                    Err(RdfXmlSyntaxError::msg(format!("Unexpected text event: '{text}'")).into())
 1237|       |                }
 1238|       |            }
 1239|       |        }
 1240|  1.61M|    }
_RNCNvMs5_NtCseesEdg7HnAe_8oxrdfxml6parserINtB7_12RdfXmlReaderRShE16parse_text_event0B9_:
 1220|   110k|        let text = event.unescape_with(|e| self.resolve_entity(e))?.to_string();
_RNvMs5_NtCseesEdg7HnAe_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE16resolve_tag_nameB7_:
 1242|  1.66M|    fn resolve_tag_name(&self, qname: QName<'_>) -> Result<String, RdfXmlParseError> {
 1243|  1.66M|        let (namespace, local_name) = self.reader.resolve_element(qname);
 1244|  1.66M|        self.resolve_ns_name(namespace, local_name)
 1245|  1.66M|    }
_RNvMs5_NtCseesEdg7HnAe_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE22resolve_attribute_nameB7_:
 1247|   405k|    fn resolve_attribute_name(&self, qname: QName<'_>) -> Result<String, RdfXmlParseError> {
 1248|   405k|        let (namespace, local_name) = self.reader.resolve_attribute(qname);
 1249|   405k|        self.resolve_ns_name(namespace, local_name)
 1250|   405k|    }
_RNvMs5_NtCseesEdg7HnAe_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE15resolve_ns_nameB7_:
 1252|  2.07M|    fn resolve_ns_name(
 1253|  2.07M|        &self,
 1254|  2.07M|        namespace: ResolveResult<'_>,
 1255|  2.07M|        local_name: LocalName<'_>,
 1256|  2.07M|    ) -> Result<String, RdfXmlParseError> {
 1257|  2.07M|        match namespace {
 1258|  1.79M|            ResolveResult::Bound(ns) => {
 1259|  1.79M|                let mut value = Vec::with_capacity(ns.as_ref().len() + local_name.as_ref().len());
 1260|  1.79M|                value.extend_from_slice(ns.as_ref());
 1261|  1.79M|                value.extend_from_slice(local_name.as_ref());
 1262|  1.79M|                Ok(unescape_with(&self.reader.decoder().decode(&value)?, |e| {
 1263|       |                    self.resolve_entity(e)
 1264|       |                })
 1265|  1.73M|                .map_err(Error::from)?
 1266|  1.66M|                .to_string())
 1267|       |            }
 1268|       |            ResolveResult::Unbound => {
 1269|   219k|                Err(RdfXmlSyntaxError::msg("XML namespaces are required in RDF/XML").into())
 1270|       |            }
 1271|  58.3k|            ResolveResult::Unknown(v) => Err(RdfXmlSyntaxError::msg(format!(
 1272|  58.3k|                "Unknown prefix {}:",
 1273|  58.3k|                self.reader.decoder().decode(&v)?
 1274|       |            ))
 1275|  44.4k|            .into()),
 1276|       |        }
 1277|  2.07M|    }
_RNCNvMs5_NtCseesEdg7HnAe_8oxrdfxml6parserINtB7_12RdfXmlReaderRShE15resolve_ns_name0B9_:
 1262|  16.2M|                Ok(unescape_with(&self.reader.decoder().decode(&value)?, |e| {
 1263|  16.2M|                    self.resolve_entity(e)
 1264|  16.2M|                })
_RNvMs5_NtCseesEdg7HnAe_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE14build_node_eltB7_:
 1280|   579k|    fn build_node_elt(
 1281|   579k|        iri: NamedNode,
 1282|   579k|        base_iri: Option<Iri<String>>,
 1283|   579k|        language: Option<String>,
 1284|   579k|        id_attr: Option<NamedNode>,
 1285|   579k|        node_id_attr: Option<BlankNode>,
 1286|   579k|        about_attr: Option<NamedNode>,
 1287|   579k|        type_attr: Option<NamedNode>,
 1288|   579k|        property_attrs: Vec<(NamedNode, String)>,
 1289|   579k|        results: &mut Vec<Triple>,
 1290|   579k|    ) -> Result<RdfXmlState, RdfXmlSyntaxError> {
 1291|   579k|        let subject = match (id_attr, node_id_attr, about_attr) {
 1292|      0|            (Some(id_attr), None, None) => Subject::from(id_attr),
 1293|   299k|            (None, Some(node_id_attr), None) => node_id_attr.into(),
 1294|  4.27k|            (None, None, Some(about_attr)) => about_attr.into(),
 1295|   275k|            (None, None, None) => BlankNode::default().into(),
 1296|       |            (Some(_), Some(_), _) => {
 1297|      0|                return Err(RdfXmlSyntaxError::msg(
 1298|      0|                    "Not both rdf:ID and rdf:nodeID could be set at the same time",
 1299|      0|                ))
 1300|       |            }
 1301|       |            (_, Some(_), Some(_)) => {
 1302|      0|                return Err(RdfXmlSyntaxError::msg(
 1303|      0|                    "Not both rdf:nodeID and rdf:resource could be set at the same time",
 1304|      0|                ))
 1305|       |            }
 1306|       |            (Some(_), _, Some(_)) => {
 1307|      0|                return Err(RdfXmlSyntaxError::msg(
 1308|      0|                    "Not both rdf:ID and rdf:resource could be set at the same time",
 1309|      0|                ))
 1310|       |            }
 1311|       |        };
 1312|       |
 1313|   579k|        Self::emit_property_attrs(&subject, property_attrs, &language, results);
 1314|       |
 1315|   579k|        if let Some(type_attr) = type_attr {
 1316|    688|            results.push(Triple::new(subject.clone(), rdf::TYPE, type_attr));
 1317|   578k|        }
 1318|       |
 1319|   579k|        if iri != *RDF_DESCRIPTION {
 1320|   564k|            results.push(Triple::new(subject.clone(), rdf::TYPE, iri));
 1321|   564k|        }
 1322|   579k|        Ok(RdfXmlState::NodeElt {
 1323|   579k|            base_iri,
 1324|   579k|            language,
 1325|   579k|            subject,
 1326|   579k|            li_counter: 0,
 1327|   579k|        })
 1328|   579k|    }
_RNvMs5_NtCseesEdg7HnAe_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE9end_stateB7_:
 1352|   476k|    fn end_state(
 1353|   476k|        &mut self,
 1354|   476k|        state: RdfXmlState,
 1355|   476k|        results: &mut Vec<Triple>,
 1356|   476k|    ) -> Result<(), RdfXmlSyntaxError> {
 1357|   476k|        match state {
 1358|       |            RdfXmlState::PropertyElt {
 1359|   113k|                iri,
 1360|   113k|                language,
 1361|   113k|                subject,
 1362|   113k|                id_attr,
 1363|   113k|                datatype_attr,
 1364|   113k|                object,
 1365|       |                ..
 1366|       |            } => {
 1367|   113k|                let object = match object {
 1368|  20.3k|                    Some(NodeOrText::Node(node)) => Term::from(node),
 1369|  29.7k|                    Some(NodeOrText::Text(text)) => {
 1370|  29.7k|                        Self::new_literal(text, language, datatype_attr).into()
 1371|       |                    }
 1372|  63.6k|                    None => Self::new_literal(String::new(), language, datatype_attr).into(),
 1373|       |                };
 1374|   113k|                let triple = Triple::new(subject, iri, object);
 1375|   113k|                if let Some(id_attr) = id_attr {
 1376|      0|                    Self::reify(triple.clone(), id_attr, results);
 1377|   113k|                }
 1378|   113k|                results.push(triple);
 1379|       |            }
 1380|       |            RdfXmlState::ParseTypeCollectionPropertyElt {
 1381|      0|                iri,
 1382|      0|                subject,
 1383|      0|                id_attr,
 1384|      0|                objects,
 1385|      0|                ..
 1386|      0|            } => {
 1387|      0|                let mut current_node = Subject::from(rdf::NIL);
 1388|      0|                for object in objects.into_iter().rev() {
 1389|      0|                    let subject = Subject::from(BlankNode::default());
 1390|      0|                    results.push(Triple::new(subject.clone(), rdf::FIRST, object));
 1391|      0|                    results.push(Triple::new(subject.clone(), rdf::REST, current_node));
 1392|      0|                    current_node = subject;
 1393|      0|                }
 1394|      0|                let triple = Triple::new(subject, iri, current_node);
 1395|      0|                if let Some(id_attr) = id_attr {
 1396|      0|                    Self::reify(triple.clone(), id_attr, results);
 1397|      0|                }
 1398|      0|                results.push(triple);
 1399|       |            }
 1400|       |            RdfXmlState::ParseTypeLiteralPropertyElt {
 1401|    757|                iri,
 1402|    757|                subject,
 1403|    757|                id_attr,
 1404|    757|                writer,
 1405|    757|                emit,
 1406|    757|                ..
 1407|    757|            } => {
 1408|    757|                if emit {
 1409|      0|                    let object = writer.into_inner();
 1410|      0|                    if object.is_empty() {
 1411|      0|                        return Err(RdfXmlSyntaxError::msg(format!(
 1412|      0|                            "No value found for rdf:XMLLiteral value of property {iri}"
 1413|      0|                        )));
 1414|      0|                    }
 1415|      0|                    let triple = Triple::new(
 1416|      0|                        subject,
 1417|      0|                        iri,
 1418|      0|                        Literal::new_typed_literal(
 1419|      0|                            str::from_utf8(&object).map_err(|_| {
 1420|       |                                RdfXmlSyntaxError::msg(
 1421|       |                                    "The XML literal is not in valid UTF-8".to_owned(),
 1422|       |                                )
 1423|      0|                            })?,
 1424|       |                            rdf::XML_LITERAL,
 1425|       |                        ),
 1426|       |                    );
 1427|      0|                    if let Some(id_attr) = id_attr {
 1428|      0|                        Self::reify(triple.clone(), id_attr, results);
 1429|      0|                    }
 1430|      0|                    results.push(triple);
 1431|    757|                }
 1432|       |            }
 1433|   320k|            RdfXmlState::NodeElt { subject, .. } => match self.state.last_mut() {
 1434|  22.6k|                Some(RdfXmlState::PropertyElt { object, .. }) => {
 1435|  22.6k|                    *object = Some(NodeOrText::Node(subject))
 1436|       |                }
 1437|      0|                Some(RdfXmlState::ParseTypeCollectionPropertyElt { objects, .. }) => {
 1438|      0|                    objects.push(subject)
 1439|       |                }
 1440|   297k|                _ => (),
 1441|       |            },
 1442|  41.8k|            _ => (),
 1443|       |        }
 1444|   476k|        Ok(())
 1445|   476k|    }
_RNvMs5_NtCseesEdg7HnAe_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE11new_literalB7_:
 1447|  93.4k|    fn new_literal(
 1448|  93.4k|        value: String,
 1449|  93.4k|        language: Option<String>,
 1450|  93.4k|        datatype: Option<NamedNode>,
 1451|  93.4k|    ) -> Literal {
 1452|  93.4k|        if let Some(datatype) = datatype {
 1453|  4.65k|            Literal::new_typed_literal(value, datatype)
 1454|  88.7k|        } else if let Some(language) = language {
 1455|      0|            Literal::new_language_tagged_literal_unchecked(value, language)
 1456|       |        } else {
 1457|  88.7k|            Literal::new_simple_literal(value)
 1458|       |        }
 1459|  93.4k|    }
_RNvMs5_NtCseesEdg7HnAe_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE19emit_property_attrsB7_:
 1476|   595k|    fn emit_property_attrs(
 1477|   595k|        subject: &Subject,
 1478|   595k|        literal_attributes: Vec<(NamedNode, String)>,
 1479|   595k|        language: &Option<String>,
 1480|   595k|        results: &mut Vec<Triple>,
 1481|   595k|    ) {
 1482|   600k|        for (literal_predicate, literal_value) in literal_attributes {
 1483|  5.18k|            results.push(Triple::new(
 1484|  5.18k|                subject.clone(),
 1485|  5.18k|                literal_predicate,
 1486|  5.18k|                if let Some(language) = language.clone() {
 1487|      0|                    Literal::new_language_tagged_literal_unchecked(literal_value, language)
 1488|       |                } else {
 1489|  5.18k|                    Literal::new_simple_literal(literal_value)
 1490|       |                },
 1491|       |            ));
 1492|       |        }
 1493|   595k|    }
_RNvMs5_NtCseesEdg7HnAe_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE17convert_attributeB7_:
 1495|   379k|    fn convert_attribute(&self, attribute: &Attribute<'_>) -> Result<String, RdfXmlParseError> {
 1496|   379k|        Ok(attribute
 1497|   379k|            .decode_and_unescape_value_with(self.reader.decoder(), |e| self.resolve_entity(e))?
 1498|   364k|            .into_owned())
 1499|   379k|    }
_RNCNvMs5_NtCseesEdg7HnAe_8oxrdfxml6parserINtB7_12RdfXmlReaderRShE17convert_attribute0B9_:
 1497|  15.2k|            .decode_and_unescape_value_with(self.reader.decoder(), |e| self.resolve_entity(e))?
_RNvMs5_NtCseesEdg7HnAe_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE21convert_iri_attributeB7_:
 1501|  29.3k|    fn convert_iri_attribute(
 1502|  29.3k|        &self,
 1503|  29.3k|        base_iri: &Option<Iri<String>>,
 1504|  29.3k|        attribute: &Attribute<'_>,
 1505|  29.3k|    ) -> Result<NamedNode, RdfXmlParseError> {
 1506|  29.3k|        Ok(self.resolve_iri(base_iri, self.convert_attribute(attribute)?)?)
 1507|  29.3k|    }
_RNvMs5_NtCseesEdg7HnAe_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE11resolve_iriB7_:
 1509|  27.7k|    fn resolve_iri(
 1510|  27.7k|        &self,
 1511|  27.7k|        base_iri: &Option<Iri<String>>,
 1512|  27.7k|        relative_iri: String,
 1513|  27.7k|    ) -> Result<NamedNode, RdfXmlSyntaxError> {
 1514|  27.7k|        if let Some(base_iri) = base_iri {
 1515|       |            Ok(NamedNode::new_unchecked(
 1516|      0|                if self.unchecked {
 1517|      0|                    base_iri.resolve_unchecked(&relative_iri)
 1518|       |                } else {
 1519|      0|                    base_iri.resolve(&relative_iri).map_err(|error| {
 1520|       |                        RdfXmlSyntaxError(SyntaxErrorKind::InvalidIri {
 1521|       |                            iri: relative_iri,
 1522|       |                            error,
 1523|       |                        })
 1524|      0|                    })?
 1525|       |                }
 1526|      0|                .into_inner(),
 1527|       |            ))
 1528|       |        } else {
 1529|  27.7k|            self.parse_iri(relative_iri)
 1530|       |        }
 1531|  27.7k|    }
_RNvMs5_NtCseesEdg7HnAe_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE9parse_iriB7_:
 1533|  1.11M|    fn parse_iri(&self, relative_iri: String) -> Result<NamedNode, RdfXmlSyntaxError> {
 1534|  1.11M|        Ok(NamedNode::new_unchecked(if self.unchecked {
 1535|  6.21k|            relative_iri
 1536|       |        } else {
 1537|  1.11M|            Iri::parse(relative_iri.clone())
 1538|  1.11M|                .map_err(|error| {
 1539|       |                    RdfXmlSyntaxError(SyntaxErrorKind::InvalidIri {
 1540|       |                        iri: relative_iri,
 1541|       |                        error,
 1542|       |                    })
 1543|  1.11M|                })?
 1544|   971k|                .into_inner()
 1545|       |        }))
 1546|  1.11M|    }
_RNCNvMs5_NtCseesEdg7HnAe_8oxrdfxml6parserINtB7_12RdfXmlReaderRShE9parse_iri0B9_:
 1538|   140k|                .map_err(|error| {
 1539|   140k|                    RdfXmlSyntaxError(SyntaxErrorKind::InvalidIri {
 1540|   140k|                        iri: relative_iri,
 1541|   140k|                        error,
 1542|   140k|                    })
 1543|   140k|                })?
_RNvMs5_NtCseesEdg7HnAe_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE14resolve_entityB7_:
 1548|  16.3M|    fn resolve_entity(&self, e: &str) -> Option<&str> {
 1549|  16.3M|        resolve_xml_entity(e).or_else(|| self.custom_entities.get(e).map(String::as_str))
 1550|  16.3M|    }
_RNCNvMs5_NtCseesEdg7HnAe_8oxrdfxml6parserINtB7_12RdfXmlReaderRShE14resolve_entity0B9_:
 1549|  65.1k|        resolve_xml_entity(e).or_else(|| self.custom_entities.get(e).map(String::as_str))
_RNCNvNtCseesEdg7HnAe_8oxrdfxml6parser10is_nc_name0B5_:
 1555|  9.51M|    is_name(name) && name.chars().all(|c| c != ':')

_RINvMNtCseesEdg7HnAe_8oxrdfxml10serializerNtB3_16RdfXmlSerializer18serialize_to_writeINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECsa0b4RSFSw2P_7rdf_xml:
   92|  37.8k|    pub fn serialize_to_write<W: Write>(self, write: W) -> ToWriteRdfXmlWriter<W> {
   93|  37.8k|        ToWriteRdfXmlWriter {
   94|  37.8k|            writer: Writer::new_with_indent(write, b'\t', 1),
   95|  37.8k|            inner: self.inner_writer(),
   96|  37.8k|        }
   97|  37.8k|    }
_RINvMs0_NtCseesEdg7HnAe_8oxrdfxml10serializerNtB6_17InnerRdfXmlWriter12write_tripleRNtNtCskZUKzdIRemu_5oxrdf6triple6TripleECsa0b4RSFSw2P_7rdf_xml:
  276|   340k|    fn write_triple<'a>(
  277|   340k|        &mut self,
  278|   340k|        t: impl Into<TripleRef<'a>>,
  279|   340k|        output: &mut Vec<Event<'a>>,
  280|   340k|    ) -> io::Result<()> {
  281|   340k|        if self.current_subject.is_none() {
  282|  18.7k|            self.write_start(output);
  283|   321k|        }
  284|       |
  285|   340k|        let triple = t.into();
  286|   340k|        // We open a new rdf:Description if useful
  287|   340k|        if self.current_subject.as_ref().map(Subject::as_ref) != Some(triple.subject) {
  288|   292k|            if self.current_subject.is_some() {
  289|   273k|                output.push(Event::End(
  290|   273k|                    self.current_resource_tag
  291|   273k|                        .take()
  292|   273k|                        .map_or_else(|| BytesEnd::new("rdf:Description"), BytesEnd::new),
  293|   273k|                ));
  294|   273k|            }
  295|   292k|            self.current_subject = Some(triple.subject.into_owned());
  296|       |
  297|   292k|            let (mut description_open, with_type_tag) = if triple.predicate == rdf::TYPE {
  298|   279k|                if let TermRef::NamedNode(t) = triple.object {
  299|   279k|                    let (prop_qname, prop_xmlns) = self.uri_to_qname_and_xmlns(t);
  300|   279k|                    let mut description_open = BytesStart::new(prop_qname.clone());
  301|   279k|                    if let Some(prop_xmlns) = prop_xmlns {
  302|   273k|                        description_open.push_attribute(prop_xmlns);
  303|   273k|                    }
  304|   279k|                    self.current_resource_tag = Some(prop_qname.into_owned());
  305|   279k|                    (description_open, true)
  306|       |                } else {
  307|    350|                    (BytesStart::new("rdf:Description"), false)
  308|       |                }
  309|       |            } else {
  310|  12.4k|                (BytesStart::new("rdf:Description"), false)
  311|       |            };
  312|   292k|            match triple.subject {
  313|  2.37k|                SubjectRef::NamedNode(node) => {
  314|  2.37k|                    description_open.push_attribute(("rdf:about", node.as_str()))
  315|       |                }
  316|   289k|                SubjectRef::BlankNode(node) => {
  317|   289k|                    description_open.push_attribute(("rdf:nodeID", node.as_str()))
  318|       |                }
  319|       |                _ => {
  320|      0|                    return Err(io::Error::new(
  321|      0|                        io::ErrorKind::InvalidInput,
  322|      0|                        "RDF/XML only supports named or blank subject",
  323|      0|                    ))
  324|       |                }
  325|       |            }
  326|   292k|            output.push(Event::Start(description_open));
  327|   292k|            if with_type_tag {
  328|   279k|                return Ok(()); // No need for a value
  329|  12.8k|            }
  330|  48.0k|        }
  331|       |
  332|  60.8k|        let (prop_qname, prop_xmlns) = self.uri_to_qname_and_xmlns(triple.predicate);
  333|  60.8k|        let mut property_open = BytesStart::new(prop_qname.clone());
  334|  60.8k|        if let Some(prop_xmlns) = prop_xmlns {
  335|  49.3k|            property_open.push_attribute(prop_xmlns);
  336|  49.3k|        }
  337|  60.8k|        let content = match triple.object {
  338|  4.20k|            TermRef::NamedNode(node) => {
  339|  4.20k|                property_open.push_attribute(("rdf:resource", node.as_str()));
  340|  4.20k|                None
  341|       |            }
  342|  7.73k|            TermRef::BlankNode(node) => {
  343|  7.73k|                property_open.push_attribute(("rdf:nodeID", node.as_str()));
  344|  7.73k|                None
  345|       |            }
  346|  48.9k|            TermRef::Literal(literal) => {
  347|  48.9k|                if let Some(language) = literal.language() {
  348|      0|                    property_open.push_attribute(("xml:lang", language));
  349|  48.9k|                } else if !literal.is_plain() {
  350|  2.21k|                    property_open.push_attribute(("rdf:datatype", literal.datatype().as_str()));
  351|  46.7k|                }
  352|  48.9k|                Some(literal.value())
  353|       |            }
  354|       |            _ => {
  355|      0|                return Err(io::Error::new(
  356|      0|                    io::ErrorKind::InvalidInput,
  357|      0|                    "RDF/XML only supports named, blank or literal object",
  358|      0|                ))
  359|       |            }
  360|       |        };
  361|  60.8k|        if let Some(content) = content {
  362|  48.9k|            output.push(Event::Start(property_open));
  363|  48.9k|            output.push(Event::Text(BytesText::new(content)));
  364|  48.9k|            output.push(Event::End(BytesEnd::new(prop_qname)));
  365|  48.9k|        } else {
  366|  11.9k|            output.push(Event::Empty(property_open));
  367|  11.9k|        }
  368|  60.8k|        Ok(())
  369|   340k|    }
_RINvMs_NtCseesEdg7HnAe_8oxrdfxml10serializerINtB5_19ToWriteRdfXmlWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE12write_tripleRNtNtCskZUKzdIRemu_5oxrdf6triple6TripleECsa0b4RSFSw2P_7rdf_xml:
  184|   340k|    pub fn write_triple<'a>(&mut self, t: impl Into<TripleRef<'a>>) -> io::Result<()> {
  185|   340k|        let mut buffer = Vec::new();
  186|   340k|        self.inner.write_triple(t, &mut buffer)?;
  187|   340k|        self.flush_buffer(&mut buffer)
  188|   340k|    }
_RNCINvMs0_NtCseesEdg7HnAe_8oxrdfxml10serializerNtB8_17InnerRdfXmlWriter12write_tripleRNtNtCskZUKzdIRemu_5oxrdf6triple6TripleE0Csa0b4RSFSw2P_7rdf_xml:
  292|  11.1k|                        .map_or_else(|| BytesEnd::new("rdf:Description"), BytesEnd::new),
_RNvMs_NtCseesEdg7HnAe_8oxrdfxml10serializerINtB4_19ToWriteRdfXmlWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE12flush_bufferCsa0b4RSFSw2P_7rdf_xml:
  198|   378k|    fn flush_buffer(&mut self, buffer: &mut Vec<Event<'_>>) -> io::Result<()> {
  199|   856k|        for event in buffer.drain(0..) {
  200|   856k|            self.writer.write_event(event).map_err(map_err)?;
  201|       |        }
  202|   378k|        Ok(())
  203|   378k|    }
_RNvMs_NtCseesEdg7HnAe_8oxrdfxml10serializerINtB4_19ToWriteRdfXmlWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE6finishCsa0b4RSFSw2P_7rdf_xml:
  191|  37.8k|    pub fn finish(mut self) -> io::Result<W> {
  192|  37.8k|        let mut buffer = Vec::new();
  193|  37.8k|        self.inner.finish(&mut buffer);
  194|  37.8k|        self.flush_buffer(&mut buffer)?;
  195|  37.8k|        Ok(self.writer.into_inner())
  196|  37.8k|    }
_RNvMNtCseesEdg7HnAe_8oxrdfxml10serializerNtB2_16RdfXmlSerializer3newCsa0b4RSFSw2P_7rdf_xml:
   47|  37.8k|    pub fn new() -> Self {
   48|  37.8k|        Self {
   49|  37.8k|            prefixes: BTreeMap::new(),
   50|  37.8k|        }
   51|  37.8k|    }
_RNvMNtCseesEdg7HnAe_8oxrdfxml10serializerNtB2_16RdfXmlSerializer12inner_writer:
  139|  37.8k|    fn inner_writer(mut self) -> InnerRdfXmlWriter {
  140|  37.8k|        self.prefixes.insert(
  141|  37.8k|            "http://www.w3.org/1999/02/22-rdf-syntax-ns#".into(),
  142|  37.8k|            "rdf".into(),
  143|  37.8k|        );
  144|  37.8k|        InnerRdfXmlWriter {
  145|  37.8k|            current_subject: None,
  146|  37.8k|            current_resource_tag: None,
  147|  37.8k|            prefixes: self.prefixes,
  148|  37.8k|        }
  149|  37.8k|    }
_RNvMs0_NtCseesEdg7HnAe_8oxrdfxml10serializerNtB5_17InnerRdfXmlWriter11write_start:
  371|  37.8k|    fn write_start(&self, output: &mut Vec<Event<'_>>) {
  372|  37.8k|        output.push(Event::Decl(BytesDecl::new("1.0", Some("UTF-8"), None)));
  373|  37.8k|        let mut rdf_open = BytesStart::new("rdf:RDF");
  374|  75.7k|        for (prefix_value, prefix_name) in &self.prefixes {
  375|  37.8k|            rdf_open.push_attribute((
  376|  37.8k|                format!("xmlns:{prefix_name}").as_str(),
  377|  37.8k|                prefix_value.as_str(),
  378|  37.8k|            ));
  379|  37.8k|        }
  380|  37.8k|        output.push(Event::Start(rdf_open))
  381|  37.8k|    }
_RNvMs0_NtCseesEdg7HnAe_8oxrdfxml10serializerNtB5_17InnerRdfXmlWriter6finish:
  383|  37.8k|    fn finish(&mut self, output: &mut Vec<Event<'static>>) {
  384|  37.8k|        if self.current_subject.is_some() {
  385|  18.7k|            output.push(Event::End(
  386|  18.7k|                self.current_resource_tag
  387|  18.7k|                    .take()
  388|  18.7k|                    .map_or_else(|| BytesEnd::new("rdf:Description"), BytesEnd::new),
  389|  18.7k|            ));
  390|  19.1k|        } else {
  391|  19.1k|            self.write_start(output);
  392|  19.1k|        }
  393|  37.8k|        output.push(Event::End(BytesEnd::new("rdf:RDF")));
  394|  37.8k|    }
_RNvMs0_NtCseesEdg7HnAe_8oxrdfxml10serializerNtB5_17InnerRdfXmlWriter22uri_to_qname_and_xmlns:
  396|   340k|    fn uri_to_qname_and_xmlns<'a>(
  397|   340k|        &self,
  398|   340k|        uri: NamedNodeRef<'a>,
  399|   340k|    ) -> (Cow<'a, str>, Option<(&'a str, &'a str)>) {
  400|   340k|        let (prop_prefix, prop_value) = split_iri(uri.as_str());
  401|   340k|        if let Some(prop_prefix) = self.prefixes.get(prop_prefix) {
  402|       |            (
  403|  12.3k|                if prop_prefix.is_empty() {
  404|      0|                    Cow::Borrowed(prop_value)
  405|       |                } else {
  406|  12.3k|                    Cow::Owned(format!("{prop_prefix}:{prop_value}"))
  407|       |                },
  408|  12.3k|                None,
  409|       |            )
  410|   327k|        } else if prop_prefix == "http://www.w3.org/2000/xmlns/" {
  411|  4.94k|            (Cow::Owned(format!("xmlns:{prop_value}")), None)
  412|   322k|        } else if prop_value.is_empty() {
  413|   127k|            (Cow::Borrowed("p:"), Some(("xmlns:p", prop_prefix)))
  414|       |        } else {
  415|   195k|            (Cow::Borrowed(prop_value), Some(("xmlns", prop_prefix)))
  416|       |        }
  417|   340k|    }
_RNvNtCseesEdg7HnAe_8oxrdfxml10serializer9split_iri:
  428|   340k|fn split_iri(iri: &str) -> (&str, &str) {
  429|   340k|    if let Some(position_base) = iri.rfind(|c| !is_name_char(c) || c == ':') {
  430|   340k|        if let Some(position_add) = iri[position_base..].find(|c| is_name_start_char(c) && c != ':')
  431|       |        {
  432|   208k|            (
  433|   208k|                &iri[..position_base + position_add],
  434|   208k|                &iri[position_base + position_add..],
  435|   208k|            )
  436|       |        } else {
  437|   132k|            (iri, "")
  438|       |        }
  439|       |    } else {
  440|      0|        (iri, "")
  441|       |    }
  442|   340k|}
_RNCNvMs0_NtCseesEdg7HnAe_8oxrdfxml10serializerNtB7_17InnerRdfXmlWriter6finish0B9_:
  388|  1.63k|                    .map_or_else(|| BytesEnd::new("rdf:Description"), BytesEnd::new),
_RNCNvNtCseesEdg7HnAe_8oxrdfxml10serializer9split_iri0B5_:
  429|  5.74M|    if let Some(position_base) = iri.rfind(|c| !is_name_char(c) || c == ':') {
_RNCNvNtCseesEdg7HnAe_8oxrdfxml10serializer9split_iris_0B5_:
  430|   602k|        if let Some(position_add) = iri[position_base..].find(|c| is_name_start_char(c) && c != ':')

_RNvNtCseesEdg7HnAe_8oxrdfxml5utils18is_name_start_char:
    1|  15.8M|pub fn is_name_start_char(c: char) -> bool {
    2|       |    // ":" | [A-Z] | "_" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
    3|  15.8M|    matches!(c,
    4|       |        ':'
    5|  9.45M|        | 'A'..='Z'
    6|       |        | '_'
    7|  7.74M|        | 'a'..='z'
    8|   324k|        | '\u{00C0}'..='\u{00D6}'
    9|   324k|        | '\u{00D8}'..='\u{00F6}'
   10|   324k|        | '\u{00F8}'..='\u{02FF}'
   11|   323k|        | '\u{0370}'..='\u{037D}'
   12|  82.4k|        | '\u{037F}'..='\u{1FFF}'
   13|  78.7k|        | '\u{200C}'..='\u{200D}'
   14|  78.7k|        | '\u{2070}'..='\u{218F}'
   15|  78.7k|        | '\u{2C00}'..='\u{2FEF}'
   16|  78.7k|        | '\u{3001}'..='\u{D7FF}'
   17|  74.4k|        | '\u{F900}'..='\u{FDCF}'
   18|  74.4k|        | '\u{FDF0}'..='\u{FFFD}'
   19|  26.3k|        | '\u{10000}'..='\u{EFFFF}')
   20|  15.8M|}
_RNvNtCseesEdg7HnAe_8oxrdfxml5utils12is_name_char:
   22|  14.9M|pub fn is_name_char(c: char) -> bool {
   23|  14.9M|    // NameStartChar | "-" | "." | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
   24|  14.9M|    is_name_start_char(c)
   25|  5.97M|        || matches!(c,  '-' | '.' | '0'..='9' | '\u{B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
   26|  14.9M|}


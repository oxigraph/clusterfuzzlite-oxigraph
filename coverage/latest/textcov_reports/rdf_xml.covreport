_RNCINvMs_NtCsbLbhiJQWKQj_9getrandom4lazyNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   54|      1|        self.0.unsync_init(|| init() as usize) != 0
_RINvMNtCsbLbhiJQWKQj_9getrandom4lazyNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   34|    115|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   35|    115|        // Relaxed ordering is fine, as we only have a single atomic variable.
   36|    115|        let mut val = self.0.load(Relaxed);
   37|    115|        if val == Self::UNINIT {
   38|      1|            val = init();
   39|      1|            self.0.store(val, Relaxed);
   40|    114|        }
   41|    115|        val
   42|    115|    }
_RINvMs_NtCsbLbhiJQWKQj_9getrandom4lazyNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   53|    115|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   54|    115|        self.0.unsync_init(|| init() as usize) != 0
   55|    115|    }

_RNvCsbLbhiJQWKQj_9getrandom9getrandomCsdaO7UuI6Wbo_9rand_core:
  366|    115|pub fn getrandom(dest: &mut [u8]) -> Result<(), Error> {
  367|    115|    // SAFETY: The `&mut MaybeUninit<_>` reference doesn't escape, and
  368|    115|    // `getrandom_uninit` guarantees it will never de-initialize any part of
  369|    115|    // `dest`.
  370|    115|    getrandom_uninit(unsafe { slice_as_uninit_mut(dest) })?;
  371|    115|    Ok(())
  372|    115|}
_RNvCsbLbhiJQWKQj_9getrandom16getrandom_uninitCsdaO7UuI6Wbo_9rand_core:
  396|    115|pub fn getrandom_uninit(dest: &mut [MaybeUninit<u8>]) -> Result<&mut [u8], Error> {
  397|    115|    if !dest.is_empty() {
  398|    115|        imp::getrandom_inner(dest)?;
  399|      0|    }
  400|       |    // SAFETY: `dest` has been fully initialized by `imp::getrandom_inner`
  401|       |    // since it returned `Ok`.
  402|    115|    Ok(unsafe { slice_assume_init_mut(dest) })
  403|    115|}

_RNvNtCsbLbhiJQWKQj_9getrandom3imp22is_getrandom_available:
   19|      1|fn is_getrandom_available() -> bool {
   20|      1|    if getrandom_syscall(&mut []) < 0 {
   21|      0|        match last_os_error().raw_os_error() {
   22|      0|            Some(libc::ENOSYS) => false, // No kernel support
   23|       |            // The fallback on EPERM is intentionally not done on Android since this workaround
   24|       |            // seems to be needed only for specific Linux-based products that aren't based
   25|       |            // on Android. See https://github.com/rust-random/getrandom/issues/229.
   26|       |            #[cfg(target_os = "linux")]
   27|      0|            Some(libc::EPERM) => false, // Blocked by seccomp
   28|      0|            _ => true,
   29|       |        }
   30|       |    } else {
   31|      1|        true
   32|       |    }
   33|      1|}
_RNvNtCsbLbhiJQWKQj_9getrandom3imp15getrandom_inner:
    9|    115|pub fn getrandom_inner(dest: &mut [MaybeUninit<u8>]) -> Result<(), Error> {
   10|    115|    // getrandom(2) was introduced in Linux 3.17
   11|    115|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   12|    115|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   13|    115|        sys_fill_exact(dest, getrandom_syscall)
   14|       |    } else {
   15|      0|        use_file::getrandom_inner(dest)
   16|       |    }
   17|    115|}

_RINvNtCsbLbhiJQWKQj_9getrandom4util19slice_as_uninit_muthECsdaO7UuI6Wbo_9rand_core:
   32|    115|pub unsafe fn slice_as_uninit_mut<T>(slice: &mut [T]) -> &mut [MaybeUninit<T>] {
   33|    115|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   34|    115|    &mut *(slice as *mut [T] as *mut [MaybeUninit<T>])
   35|    115|}
_RINvNtCsbLbhiJQWKQj_9getrandom4util21slice_assume_init_muthECsdaO7UuI6Wbo_9rand_core:
    8|    115|pub unsafe fn slice_assume_init_mut<T>(slice: &mut [MaybeUninit<T>]) -> &mut [T] {
    9|    115|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   10|    115|    &mut *(slice as *mut [MaybeUninit<T>] as *mut [T])
   11|    115|}

_RNvNtCsbLbhiJQWKQj_9getrandom9util_libc17getrandom_syscall:
  153|    116|pub fn getrandom_syscall(buf: &mut [MaybeUninit<u8>]) -> libc::ssize_t {
  154|    116|    unsafe {
  155|    116|        libc::syscall(
  156|    116|            libc::SYS_getrandom,
  157|    116|            buf.as_mut_ptr() as *mut libc::c_void,
  158|    116|            buf.len(),
  159|    116|            0,
  160|    116|        ) as libc::ssize_t
  161|    116|    }
  162|    116|}
_RINvNtCsbLbhiJQWKQj_9getrandom9util_libc14sys_fill_exactNvB2_17getrandom_syscallEB4_:
   55|    115|pub fn sys_fill_exact(
   56|    115|    mut buf: &mut [MaybeUninit<u8>],
   57|    115|    sys_fill: impl Fn(&mut [MaybeUninit<u8>]) -> libc::ssize_t,
   58|    115|) -> Result<(), Error> {
   59|    230|    while !buf.is_empty() {
   60|    115|        let res = sys_fill(buf);
   61|    115|        match res {
   62|    115|            res if res > 0 => buf = buf.get_mut(res as usize..).ok_or(Error::UNEXPECTED)?,
   63|       |            -1 => {
   64|      0|                let err = last_os_error();
   65|      0|                // We should try again if the call was interrupted.
   66|      0|                if err.raw_os_error() != Some(libc::EINTR) {
   67|      0|                    return Err(err);
   68|      0|                }
   69|       |            }
   70|       |            // Negative return codes not equal to -1 should be impossible.
   71|       |            // EOF (ret = 0) should be impossible, as the data we are reading
   72|       |            // should be an infinite stream of random bytes.
   73|      0|            _ => return Err(Error::UNEXPECTED),
   74|       |        }
   75|       |    }
   76|    115|    Ok(())
   77|    115|}

rust_fuzzer_test_input:
  209|  20.4k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  20.4k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  20.4k|                }
  223|  20.4k|
  224|  20.4k|                __libfuzzer_sys_run(bytes);
  225|  20.4k|                0
  226|  20.4k|            }
_RNvNvCsi53KuwE5jZG_7rdf_xml1__19___libfuzzer_sys_run:
  241|  20.4k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|  20.4k|            }
LLVMFuzzerTestOneInput:
   58|  20.4k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  20.4k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  20.4k|    });
   63|  20.4k|
   64|  20.4k|    match test_input {
   65|  20.4k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  20.4k|}
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}
_RNCNvCsg5zPnAtaUqZ_13libfuzzer_sys15test_input_wrap0B3_:
   59|  20.4k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  20.4k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  20.4k|        rust_fuzzer_test_input(data_slice)
   62|  20.4k|    });

_RINvNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECsi53KuwE5jZG_7rdf_xml:
 1125|  1.35M|pub(crate) unsafe fn search_slice_with_raw(
 1126|  1.35M|    haystack: &[u8],
 1127|  1.35M|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  1.35M|) -> Option<usize> {
 1129|  1.35M|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  1.35M|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  1.35M|    // a &[u8].
 1132|  1.35M|    let start = haystack.as_ptr();
 1133|  1.35M|    let end = start.add(haystack.len());
 1134|  1.35M|    let found = find_raw(start, end)?;
 1135|  1.33M|    Some(found.distance(start))
 1136|  1.35M|}
_RNvMs3_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  3.23M|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  3.23M|        Iter {
 1029|  3.23M|            original_start: haystack.as_ptr(),
 1030|  3.23M|            start: haystack.as_ptr(),
 1031|  3.23M|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  3.23M|            haystack: core::marker::PhantomData,
 1033|  3.23M|        }
 1034|  3.23M|    }
_RINvMs3_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs_NtBc_6memchrNtB1d_6MemchrNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0ECsi53KuwE5jZG_7rdf_xml:
 1044|  11.0k|    pub(crate) unsafe fn next(
 1045|  11.0k|        &mut self,
 1046|  11.0k|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  11.0k|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  11.0k|        let found = find_raw(self.start, self.end)?;
 1057|  10.9k|        let result = found.distance(self.original_start);
 1058|  10.9k|        self.start = found.add(1);
 1059|  10.9k|        Some(result)
 1060|  11.0k|    }
_RINvMs3_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0ECsi53KuwE5jZG_7rdf_xml:
 1044|  33.3M|    pub(crate) unsafe fn next(
 1045|  33.3M|        &mut self,
 1046|  33.3M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  33.3M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  33.3M|        let found = find_raw(self.start, self.end)?;
 1057|  31.3M|        let result = found.distance(self.original_start);
 1058|  31.3M|        self.start = found.add(1);
 1059|  31.3M|        Some(result)
 1060|  33.3M|    }
_RINvMs3_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs7_NtBc_6memchrNtB1e_7Memchr3NtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0ECsi53KuwE5jZG_7rdf_xml:
 1044|  2.52M|    pub(crate) unsafe fn next(
 1045|  2.52M|        &mut self,
 1046|  2.52M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  2.52M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  2.52M|        let found = find_raw(self.start, self.end)?;
 1057|  2.50M|        let result = found.distance(self.original_start);
 1058|  2.50M|        self.start = found.add(1);
 1059|  2.50M|        Some(result)
 1060|  2.52M|    }
_RINvMs3_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0ECsdBczmAo6fNM_9quick_xml:
 1044|   139k|    pub(crate) unsafe fn next(
 1045|   139k|        &mut self,
 1046|   139k|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|   139k|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|   139k|        let found = find_raw(self.start, self.end)?;
 1057|   138k|        let result = found.distance(self.original_start);
 1058|   138k|        self.start = found.add(1);
 1059|   138k|        Some(result)
 1060|   139k|    }
_RINvNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECsdBczmAo6fNM_9quick_xml:
 1125|  1.34M|pub(crate) unsafe fn search_slice_with_raw(
 1126|  1.34M|    haystack: &[u8],
 1127|  1.34M|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  1.34M|) -> Option<usize> {
 1129|  1.34M|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  1.34M|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  1.34M|    // a &[u8].
 1132|  1.34M|    let start = haystack.as_ptr();
 1133|  1.34M|    let end = start.add(haystack.len());
 1134|  1.34M|    let found = find_raw(start, end)?;
 1135|   528k|    Some(found.distance(start))
 1136|  1.34M|}
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE7needle1B8_:
  117|  2.84M|    pub(crate) fn needle1(&self) -> u8 {
  118|  2.84M|        self.s1
  119|  2.84M|    }
_RINvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  1.43M|    unsafe fn search_chunk(
  417|  1.43M|        &self,
  418|  1.43M|        cur: *const u8,
  419|  1.43M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  1.43M|    ) -> Option<*const u8> {
  421|  1.43M|        let chunk = V::load_unaligned(cur);
  422|  1.43M|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  1.43M|        if mask.has_non_zero() {
  424|  1.13M|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|   297k|            None
  427|       |        }
  428|  1.43M|    }
_RINvMs0_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB6_5ThreeNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBc_6vector16SensibleMoveMaskNtB29_8MoveMask12first_offsetEBc_:
  962|  58.9k|    unsafe fn search_chunk(
  963|  58.9k|        &self,
  964|  58.9k|        cur: *const u8,
  965|  58.9k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  966|  58.9k|    ) -> Option<*const u8> {
  967|  58.9k|        let chunk = V::load_unaligned(cur);
  968|  58.9k|        let eq1 = self.v1.cmpeq(chunk);
  969|  58.9k|        let eq2 = self.v2.cmpeq(chunk);
  970|  58.9k|        let eq3 = self.v3.cmpeq(chunk);
  971|  58.9k|        let mask = eq1.or(eq2).or(eq3).movemask();
  972|  58.9k|        if mask.has_non_zero() {
  973|  47.0k|            let mask1 = eq1.movemask();
  974|  47.0k|            let mask2 = eq2.movemask();
  975|  47.0k|            let mask3 = eq3.movemask();
  976|  47.0k|            Some(cur.add(mask_to_offset(mask1.or(mask2).or(mask3))))
  977|       |        } else {
  978|  11.9k|            None
  979|       |        }
  980|  58.9k|    }
_RINvNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs6_NtNtNtB6_6x86_644avx26memchrNtB1d_5Three8find_raw0EB8_:
 1148|  49.0k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  49.0k|    start: *const u8,
 1150|  49.0k|    end: *const u8,
 1151|  49.0k|    confirm: F,
 1152|  49.0k|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  49.0k|    let mut ptr = start;
 1155|   125k|    while ptr < end {
 1156|   117k|        if confirm(*ptr) {
 1157|  41.2k|            return Some(ptr);
 1158|  76.3k|        }
 1159|  76.3k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  7.79k|    None
 1162|  49.0k|}
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE3newB8_:
  111|  2.70M|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  2.70M|        One { s1: needle, v1: V::splat(needle) }
  113|  2.70M|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  3.89M|    pub(crate) fn needle2(&self) -> u8 {
  468|  3.89M|        self.s2
  469|  3.89M|    }
_RINvMs0_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB6_5ThreeNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBc_6vector16SensibleMoveMaskNtB29_8MoveMask12first_offsetEBc_:
  962|  2.45M|    unsafe fn search_chunk(
  963|  2.45M|        &self,
  964|  2.45M|        cur: *const u8,
  965|  2.45M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  966|  2.45M|    ) -> Option<*const u8> {
  967|  2.45M|        let chunk = V::load_unaligned(cur);
  968|  2.45M|        let eq1 = self.v1.cmpeq(chunk);
  969|  2.45M|        let eq2 = self.v2.cmpeq(chunk);
  970|  2.45M|        let eq3 = self.v3.cmpeq(chunk);
  971|  2.45M|        let mask = eq1.or(eq2).or(eq3).movemask();
  972|  2.45M|        if mask.has_non_zero() {
  973|  2.02M|            let mask1 = eq1.movemask();
  974|  2.02M|            let mask2 = eq2.movemask();
  975|  2.02M|            let mask3 = eq3.movemask();
  976|  2.02M|            Some(cur.add(mask_to_offset(mask1.or(mask2).or(mask3))))
  977|       |        } else {
  978|   434k|            None
  979|       |        }
  980|  2.45M|    }
_RNvMs0_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE7needle2Bb_:
  733|  81.2k|    pub(crate) fn needle2(&self) -> u8 {
  734|  81.2k|        self.s2
  735|  81.2k|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE8find_rawBa_:
  493|   474k|    pub(crate) unsafe fn find_raw(
  494|   474k|        &self,
  495|   474k|        start: *const u8,
  496|   474k|        end: *const u8,
  497|   474k|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   474k|        let topos = V::Mask::first_offset;
  505|   474k|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   474k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   269k|            return Some(cur);
  517|   205k|        }
  518|   205k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   205k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   205k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   205k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   221k|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  17.1k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|    758|                return Some(cur);
  554|  16.3k|            }
  555|  16.3k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   204k|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   199k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   199k|            return self.search_chunk(cur, topos);
  566|  5.28k|        }
  567|  5.28k|        None
  568|   474k|    }
_RNvMs0_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE3newBb_:
  710|  2.52M|    pub(crate) unsafe fn new(
  711|  2.52M|        needle1: u8,
  712|  2.52M|        needle2: u8,
  713|  2.52M|        needle3: u8,
  714|  2.52M|    ) -> Three<V> {
  715|  2.52M|        Three {
  716|  2.52M|            s1: needle1,
  717|  2.52M|            s2: needle2,
  718|  2.52M|            s3: needle3,
  719|  2.52M|            v1: V::splat(needle1),
  720|  2.52M|            v2: V::splat(needle2),
  721|  2.52M|            v3: V::splat(needle3),
  722|  2.52M|        }
  723|  2.52M|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE3newBa_:
  450|  33.5M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  33.5M|        Two {
  452|  33.5M|            s1: needle1,
  453|  33.5M|            s2: needle2,
  454|  33.5M|            v1: V::splat(needle1),
  455|  33.5M|            v2: V::splat(needle2),
  456|  33.5M|        }
  457|  33.5M|    }
_RINvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  86.3k|    unsafe fn search_chunk(
  417|  86.3k|        &self,
  418|  86.3k|        cur: *const u8,
  419|  86.3k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  86.3k|    ) -> Option<*const u8> {
  421|  86.3k|        let chunk = V::load_unaligned(cur);
  422|  86.3k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  86.3k|        if mask.has_non_zero() {
  424|  45.5k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  40.7k|            None
  427|       |        }
  428|  86.3k|    }
_RNvMs0_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE8find_rawBb_:
  765|  2.42M|    pub(crate) unsafe fn find_raw(
  766|  2.42M|        &self,
  767|  2.42M|        start: *const u8,
  768|  2.42M|        end: *const u8,
  769|  2.42M|    ) -> Option<*const u8> {
  770|       |        // If we want to support vectors bigger than 256 bits, we probably
  771|       |        // need to move up to using a u64 for the masks used below. Currently
  772|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  773|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  774|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  775|       |
  776|  2.42M|        let topos = V::Mask::first_offset;
  777|  2.42M|        let len = end.distance(start);
  778|       |        debug_assert!(
  779|      0|            len >= V::BYTES,
  780|      0|            "haystack has length {}, but must be at least {}",
  781|       |            len,
  782|       |            V::BYTES
  783|       |        );
  784|       |
  785|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  786|       |        // of the haystack prior to where aligned loads can start.
  787|  2.42M|        if let Some(cur) = self.search_chunk(start, topos) {
  788|  1.99M|            return Some(cur);
  789|   425k|        }
  790|   425k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  791|   425k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  792|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  793|   425k|        if len >= Self::LOOP_SIZE {
  794|  2.29M|            while cur <= end.sub(Self::LOOP_SIZE) {
  795|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  796|       |
  797|  2.28M|                let a = V::load_aligned(cur);
  798|  2.28M|                let b = V::load_aligned(cur.add(V::BYTES));
  799|  2.28M|                let eqa1 = self.v1.cmpeq(a);
  800|  2.28M|                let eqb1 = self.v1.cmpeq(b);
  801|  2.28M|                let eqa2 = self.v2.cmpeq(a);
  802|  2.28M|                let eqb2 = self.v2.cmpeq(b);
  803|  2.28M|                let eqa3 = self.v3.cmpeq(a);
  804|  2.28M|                let eqb3 = self.v3.cmpeq(b);
  805|  2.28M|                let or1 = eqa1.or(eqb1);
  806|  2.28M|                let or2 = eqa2.or(eqb2);
  807|  2.28M|                let or3 = eqa3.or(eqb3);
  808|  2.28M|                let or4 = or1.or(or2);
  809|  2.28M|                let or5 = or3.or(or4);
  810|  2.28M|                if or5.movemask_will_have_non_zero() {
  811|   396k|                    let mask = eqa1
  812|   396k|                        .movemask()
  813|   396k|                        .or(eqa2.movemask())
  814|   396k|                        .or(eqa3.movemask());
  815|   396k|                    if mask.has_non_zero() {
  816|   300k|                        return Some(cur.add(topos(mask)));
  817|  95.8k|                    }
  818|  95.8k|
  819|  95.8k|                    let mask = eqb1
  820|  95.8k|                        .movemask()
  821|  95.8k|                        .or(eqb2.movemask())
  822|  95.8k|                        .or(eqb3.movemask());
  823|      0|                    debug_assert!(mask.has_non_zero());
  824|  95.8k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  825|  1.88M|                }
  826|  1.88M|                cur = cur.add(Self::LOOP_SIZE);
  827|       |            }
  828|  21.0k|        }
  829|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  830|       |        // loads here, but I believe we are guaranteed that they are aligned
  831|       |        // since `cur` is aligned.
  832|  36.5k|        while cur <= end.sub(V::BYTES) {
  833|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  834|  24.0k|            if let Some(cur) = self.search_chunk(cur, topos) {
  835|  16.3k|                return Some(cur);
  836|  7.77k|            }
  837|  7.77k|            cur = cur.add(V::BYTES);
  838|       |        }
  839|       |        // Finally handle any remaining bytes less than the size of V. In this
  840|       |        // case, our pointer may indeed be unaligned and the load may overlap
  841|       |        // with the previous one. But that's okay since we know the previous
  842|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  843|  12.4k|        if cur < end {
  844|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  845|  8.53k|            cur = cur.sub(V::BYTES - end.distance(cur));
  846|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  847|  8.53k|            return self.search_chunk(cur, topos);
  848|  3.92k|        }
  849|  3.92k|        None
  850|  2.42M|    }
_RINvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|   691k|    unsafe fn search_chunk(
  671|   691k|        &self,
  672|   691k|        cur: *const u8,
  673|   691k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|   691k|    ) -> Option<*const u8> {
  675|   691k|        let chunk = V::load_unaligned(cur);
  676|   691k|        let eq1 = self.v1.cmpeq(chunk);
  677|   691k|        let eq2 = self.v2.cmpeq(chunk);
  678|   691k|        let mask = eq1.or(eq2).movemask();
  679|   691k|        if mask.has_non_zero() {
  680|   275k|            let mask1 = eq1.movemask();
  681|   275k|            let mask2 = eq2.movemask();
  682|   275k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|   416k|            None
  685|       |        }
  686|   691k|    }
_RNvMs0_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE7needle3Bb_:
  739|  80.5k|    pub(crate) fn needle3(&self) -> u8 {
  740|  80.5k|        self.s3
  741|  80.5k|    }
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  65.5k|    pub(crate) unsafe fn find_raw(
  144|  65.5k|        &self,
  145|  65.5k|        start: *const u8,
  146|  65.5k|        end: *const u8,
  147|  65.5k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  65.5k|        let topos = V::Mask::first_offset;
  155|  65.5k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  65.5k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  42.0k|            return Some(cur);
  167|  23.5k|        }
  168|  23.5k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  23.5k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  23.5k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  23.5k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  27.1k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  4.66k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|  1.07k|                return Some(cur);
  216|  3.58k|            }
  217|  3.58k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  22.4k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  16.1k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  16.1k|            return self.search_chunk(cur, topos);
  228|  6.32k|        }
  229|  6.32k|        None
  230|  65.5k|    }
_RINvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  32.9M|    unsafe fn search_chunk(
  671|  32.9M|        &self,
  672|  32.9M|        cur: *const u8,
  673|  32.9M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  32.9M|    ) -> Option<*const u8> {
  675|  32.9M|        let chunk = V::load_unaligned(cur);
  676|  32.9M|        let eq1 = self.v1.cmpeq(chunk);
  677|  32.9M|        let eq2 = self.v2.cmpeq(chunk);
  678|  32.9M|        let mask = eq1.or(eq2).movemask();
  679|  32.9M|        if mask.has_non_zero() {
  680|  30.5M|            let mask1 = eq1.movemask();
  681|  30.5M|            let mask2 = eq2.movemask();
  682|  30.5M|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  2.38M|            None
  685|       |        }
  686|  32.9M|    }
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE3newB8_:
  111|  2.70M|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  2.70M|        One { s1: needle, v1: V::splat(needle) }
  113|  2.70M|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE8find_rawBa_:
  493|  31.6M|    pub(crate) unsafe fn find_raw(
  494|  31.6M|        &self,
  495|  31.6M|        start: *const u8,
  496|  31.6M|        end: *const u8,
  497|  31.6M|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  31.6M|        let topos = V::Mask::first_offset;
  505|  31.6M|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  31.6M|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  30.4M|            return Some(cur);
  517|  1.21M|        }
  518|  1.21M|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  1.21M|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  1.21M|        if len >= Self::LOOP_SIZE {
  522|  2.26M|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|  2.04M|                let a = V::load_aligned(cur);
  526|  2.04M|                let b = V::load_aligned(cur.add(V::BYTES));
  527|  2.04M|                let eqa1 = self.v1.cmpeq(a);
  528|  2.04M|                let eqb1 = self.v1.cmpeq(b);
  529|  2.04M|                let eqa2 = self.v2.cmpeq(a);
  530|  2.04M|                let eqb2 = self.v2.cmpeq(b);
  531|  2.04M|                let or1 = eqa1.or(eqb1);
  532|  2.04M|                let or2 = eqa2.or(eqb2);
  533|  2.04M|                let or3 = or1.or(or2);
  534|  2.04M|                if or3.movemask_will_have_non_zero() {
  535|   229k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|   229k|                    if mask.has_non_zero() {
  537|   155k|                        return Some(cur.add(topos(mask)));
  538|  74.1k|                    }
  539|  74.1k|
  540|  74.1k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|  74.1k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|  1.81M|                }
  544|  1.81M|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   758k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  1.30M|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   335k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  15.1k|                return Some(cur);
  554|   320k|            }
  555|   320k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   965k|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   943k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   943k|            return self.search_chunk(cur, topos);
  566|  21.9k|        }
  567|  21.9k|        None
  568|  31.6M|    }
_RNvMs0_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE3newBb_:
  710|  2.52M|    pub(crate) unsafe fn new(
  711|  2.52M|        needle1: u8,
  712|  2.52M|        needle2: u8,
  713|  2.52M|        needle3: u8,
  714|  2.52M|    ) -> Three<V> {
  715|  2.52M|        Three {
  716|  2.52M|            s1: needle1,
  717|  2.52M|            s2: needle2,
  718|  2.52M|            s3: needle3,
  719|  2.52M|            v1: V::splat(needle1),
  720|  2.52M|            v2: V::splat(needle2),
  721|  2.52M|            v3: V::splat(needle3),
  722|  2.52M|        }
  723|  2.52M|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  4.01M|    pub(crate) fn needle1(&self) -> u8 {
  462|  4.01M|        self.s1
  463|  4.01M|    }
_RNvMs0_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE8find_rawBb_:
  765|  52.4k|    pub(crate) unsafe fn find_raw(
  766|  52.4k|        &self,
  767|  52.4k|        start: *const u8,
  768|  52.4k|        end: *const u8,
  769|  52.4k|    ) -> Option<*const u8> {
  770|       |        // If we want to support vectors bigger than 256 bits, we probably
  771|       |        // need to move up to using a u64 for the masks used below. Currently
  772|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  773|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  774|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  775|       |
  776|  52.4k|        let topos = V::Mask::first_offset;
  777|  52.4k|        let len = end.distance(start);
  778|       |        debug_assert!(
  779|      0|            len >= V::BYTES,
  780|      0|            "haystack has length {}, but must be at least {}",
  781|       |            len,
  782|       |            V::BYTES
  783|       |        );
  784|       |
  785|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  786|       |        // of the haystack prior to where aligned loads can start.
  787|  52.4k|        if let Some(cur) = self.search_chunk(start, topos) {
  788|  45.9k|            return Some(cur);
  789|  6.43k|        }
  790|  6.43k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  791|  6.43k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  792|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  793|  6.43k|        if len >= Self::LOOP_SIZE {
  794|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  795|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  796|       |
  797|      0|                let a = V::load_aligned(cur);
  798|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  799|      0|                let eqa1 = self.v1.cmpeq(a);
  800|      0|                let eqb1 = self.v1.cmpeq(b);
  801|      0|                let eqa2 = self.v2.cmpeq(a);
  802|      0|                let eqb2 = self.v2.cmpeq(b);
  803|      0|                let eqa3 = self.v3.cmpeq(a);
  804|      0|                let eqb3 = self.v3.cmpeq(b);
  805|      0|                let or1 = eqa1.or(eqb1);
  806|      0|                let or2 = eqa2.or(eqb2);
  807|      0|                let or3 = eqa3.or(eqb3);
  808|      0|                let or4 = or1.or(or2);
  809|      0|                let or5 = or3.or(or4);
  810|      0|                if or5.movemask_will_have_non_zero() {
  811|      0|                    let mask = eqa1
  812|      0|                        .movemask()
  813|      0|                        .or(eqa2.movemask())
  814|      0|                        .or(eqa3.movemask());
  815|      0|                    if mask.has_non_zero() {
  816|      0|                        return Some(cur.add(topos(mask)));
  817|      0|                    }
  818|      0|
  819|      0|                    let mask = eqb1
  820|      0|                        .movemask()
  821|      0|                        .or(eqb2.movemask())
  822|      0|                        .or(eqb3.movemask());
  823|      0|                    debug_assert!(mask.has_non_zero());
  824|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  825|      0|                }
  826|      0|                cur = cur.add(Self::LOOP_SIZE);
  827|       |            }
  828|  6.43k|        }
  829|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  830|       |        // loads here, but I believe we are guaranteed that they are aligned
  831|       |        // since `cur` is aligned.
  832|  11.0k|        while cur <= end.sub(V::BYTES) {
  833|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  834|  5.07k|            if let Some(cur) = self.search_chunk(cur, topos) {
  835|    462|                return Some(cur);
  836|  4.61k|            }
  837|  4.61k|            cur = cur.add(V::BYTES);
  838|       |        }
  839|       |        // Finally handle any remaining bytes less than the size of V. In this
  840|       |        // case, our pointer may indeed be unaligned and the load may overlap
  841|       |        // with the previous one. But that's okay since we know the previous
  842|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  843|  5.96k|        if cur < end {
  844|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  845|  1.46k|            cur = cur.sub(V::BYTES - end.distance(cur));
  846|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  847|  1.46k|            return self.search_chunk(cur, topos);
  848|  4.50k|        }
  849|  4.50k|        None
  850|  52.4k|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE3newBa_:
  450|  33.5M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  33.5M|        Two {
  452|  33.5M|            s1: needle1,
  453|  33.5M|            s2: needle2,
  454|  33.5M|            v1: V::splat(needle1),
  455|  33.5M|            v2: V::splat(needle2),
  456|  33.5M|        }
  457|  33.5M|    }
_RINvNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|   745k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|   745k|    start: *const u8,
 1150|   745k|    end: *const u8,
 1151|   745k|    confirm: F,
 1152|   745k|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|   745k|    let mut ptr = start;
 1155|  3.01M|    while ptr < end {
 1156|  2.84M|        if confirm(*ptr) {
 1157|   570k|            return Some(ptr);
 1158|  2.26M|        }
 1159|  2.26M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|   174k|    None
 1162|   745k|}
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  1.33M|    pub(crate) unsafe fn find_raw(
  144|  1.33M|        &self,
  145|  1.33M|        start: *const u8,
  146|  1.33M|        end: *const u8,
  147|  1.33M|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  1.33M|        let topos = V::Mask::first_offset;
  155|  1.33M|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  1.33M|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  1.11M|            return Some(cur);
  167|   211k|        }
  168|   211k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|   211k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|   211k|        if len >= Self::LOOP_SIZE {
  172|   137k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|   130k|                let a = V::load_aligned(cur);
  176|   130k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|   130k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|   130k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|   130k|                let eqa = self.v1.cmpeq(a);
  180|   130k|                let eqb = self.v1.cmpeq(b);
  181|   130k|                let eqc = self.v1.cmpeq(c);
  182|   130k|                let eqd = self.v1.cmpeq(d);
  183|   130k|                let or1 = eqa.or(eqb);
  184|   130k|                let or2 = eqc.or(eqd);
  185|   130k|                let or3 = or1.or(or2);
  186|   130k|                if or3.movemask_will_have_non_zero() {
  187|   124k|                    let mask = eqa.movemask();
  188|   124k|                    if mask.has_non_zero() {
  189|  81.0k|                        return Some(cur.add(topos(mask)));
  190|  43.2k|                    }
  191|  43.2k|
  192|  43.2k|                    let mask = eqb.movemask();
  193|  43.2k|                    if mask.has_non_zero() {
  194|  29.2k|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|  13.9k|                    }
  196|  13.9k|
  197|  13.9k|                    let mask = eqc.movemask();
  198|  13.9k|                    if mask.has_non_zero() {
  199|  8.45k|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|  5.53k|                    }
  201|  5.53k|
  202|  5.53k|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|  5.53k|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  6.62k|                }
  206|  6.62k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  79.9k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|   115k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  44.0k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|  15.0k|                return Some(cur);
  216|  28.9k|            }
  217|  28.9k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  71.7k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  59.7k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  59.7k|            return self.search_chunk(cur, topos);
  228|  12.0k|        }
  229|  12.0k|        None
  230|  1.33M|    }
_RNvMs0_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE7needle1Bb_:
  727|   117k|    pub(crate) fn needle1(&self) -> u8 {
  728|   117k|        self.s1
  729|   117k|    }
_RINvNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|  1.31M|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  1.31M|    start: *const u8,
 1150|  1.31M|    end: *const u8,
 1151|  1.31M|    confirm: F,
 1152|  1.31M|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  1.31M|    let mut ptr = start;
 1155|  4.88M|    while ptr < end {
 1156|  4.01M|        if confirm(*ptr) {
 1157|   444k|            return Some(ptr);
 1158|  3.57M|        }
 1159|  3.57M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|   866k|    None
 1162|  1.31M|}

_RNvMs6_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_5Three13new_uncheckedBd_:
  935|  2.52M|    pub unsafe fn new_unchecked(
  936|  2.52M|        needle1: u8,
  937|  2.52M|        needle2: u8,
  938|  2.52M|        needle3: u8,
  939|  2.52M|    ) -> Three {
  940|  2.52M|        Three {
  941|  2.52M|            sse2: generic::Three::new(needle1, needle2, needle3),
  942|  2.52M|            avx2: generic::Three::new(needle1, needle2, needle3),
  943|  2.52M|        }
  944|  2.52M|    }
_RNvMs6_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_5Three8find_rawBd_:
 1037|  2.52M|    pub unsafe fn find_raw(
 1038|  2.52M|        &self,
 1039|  2.52M|        start: *const u8,
 1040|  2.52M|        end: *const u8,
 1041|  2.52M|    ) -> Option<*const u8> {
 1042|  2.52M|        if start >= end {
 1043|  1.47k|            return None;
 1044|  2.52M|        }
 1045|  2.52M|        let len = end.distance(start);
 1046|  2.52M|        if len < __m256i::BYTES {
 1047|   101k|            return if len < __m128i::BYTES {
 1048|       |                // SAFETY: We require the caller to pass valid start/end
 1049|       |                // pointers.
 1050|  49.0k|                generic::fwd_byte_by_byte(start, end, |b| {
 1051|       |                    b == self.sse2.needle1()
 1052|       |                        || b == self.sse2.needle2()
 1053|       |                        || b == self.sse2.needle3()
 1054|  49.0k|                })
 1055|       |            } else {
 1056|       |                // SAFETY: We require the caller to pass valid start/end
 1057|       |                // pointers.
 1058|  52.4k|                self.find_raw_sse2(start, end)
 1059|       |            };
 1060|  2.42M|        }
 1061|  2.42M|        // SAFETY: Building a `Three` means it's safe to call both 'sse2' and
 1062|  2.42M|        // 'avx2' routines. Also, we've checked that our haystack is big
 1063|  2.42M|        // enough to run on the vector routine. Pointer validity is caller's
 1064|  2.42M|        // responsibility.
 1065|  2.42M|        //
 1066|  2.42M|        // Note that we could call `self.avx2.find_raw` directly here. But that
 1067|  2.42M|        // means we'd have to annotate this routine with `target_feature`.
 1068|  2.42M|        // Which is fine, because this routine is `unsafe` anyway and the
 1069|  2.42M|        // `target_feature` obligation is met by virtue of building a `Three`.
 1070|  2.42M|        // The real problem is that a routine with a `target_feature`
 1071|  2.42M|        // annotation generally can't be inlined into caller code unless
 1072|  2.42M|        // the caller code has the same target feature annotations. Namely,
 1073|  2.42M|        // the common case (at time of writing) is for calling code to not
 1074|  2.42M|        // have the `avx2` target feature enabled *at compile time*. Without
 1075|  2.42M|        // `target_feature` on this routine, it can be inlined which will
 1076|  2.42M|        // handle some of the short-haystack cases above without touching the
 1077|  2.42M|        // architecture specific code.
 1078|  2.42M|        self.find_raw_avx2(start, end)
 1079|  2.52M|    }
_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNvMs6_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_5Three13find_raw_avx2Bd_:
 1191|  2.42M|    unsafe fn find_raw_avx2(
 1192|  2.42M|        &self,
 1193|  2.42M|        start: *const u8,
 1194|  2.42M|        end: *const u8,
 1195|  2.42M|    ) -> Option<*const u8> {
 1196|  2.42M|        self.avx2.find_raw(start, end)
 1197|  2.42M|    }
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  1.33M|    unsafe fn find_raw_avx2(
  397|  1.33M|        &self,
  398|  1.33M|        start: *const u8,
  399|  1.33M|        end: *const u8,
  400|  1.33M|    ) -> Option<*const u8> {
  401|  1.33M|        self.avx2.find_raw(start, end)
  402|  1.33M|    }
_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  33.5M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  33.5M|        Two {
  558|  33.5M|            sse2: generic::Two::new(needle1, needle2),
  559|  33.5M|            avx2: generic::Two::new(needle1, needle2),
  560|  33.5M|        }
  561|  33.5M|    }
_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  33.5M|    pub unsafe fn find_raw(
  655|  33.5M|        &self,
  656|  33.5M|        start: *const u8,
  657|  33.5M|        end: *const u8,
  658|  33.5M|    ) -> Option<*const u8> {
  659|  33.5M|        if start >= end {
  660|   105k|            return None;
  661|  33.4M|        }
  662|  33.4M|        let len = end.distance(start);
  663|  33.4M|        if len < __m256i::BYTES {
  664|  1.78M|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  1.31M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  1.31M|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|   474k|                self.find_raw_sse2(start, end)
  674|       |            };
  675|  31.6M|        }
  676|  31.6M|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|  31.6M|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|  31.6M|        // enough to run on the vector routine. Pointer validity is caller's
  679|  31.6M|        // responsibility.
  680|  31.6M|        //
  681|  31.6M|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|  31.6M|        // means we'd have to annotate this routine with `target_feature`.
  683|  31.6M|        // Which is fine, because this routine is `unsafe` anyway and the
  684|  31.6M|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|  31.6M|        // The real problem is that a routine with a `target_feature`
  686|  31.6M|        // annotation generally can't be inlined into caller code unless
  687|  31.6M|        // the caller code has the same target feature annotations. Namely,
  688|  31.6M|        // the common case (at time of writing) is for calling code to not
  689|  31.6M|        // have the `avx2` target feature enabled *at compile time*. Without
  690|  31.6M|        // `target_feature` on this routine, it can be inlined which will
  691|  31.6M|        // handle some of the short-haystack cases above without touching the
  692|  31.6M|        // architecture specific code.
  693|  31.6M|        self.find_raw_avx2(start, end)
  694|  33.5M|    }
_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|  31.6M|    unsafe fn find_raw_avx2(
  805|  31.6M|        &self,
  806|  31.6M|        start: *const u8,
  807|  31.6M|        end: *const u8,
  808|  31.6M|    ) -> Option<*const u8> {
  809|  31.6M|        self.avx2.find_raw(start, end)
  810|  31.6M|    }
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  2.70M|    pub unsafe fn find_raw(
  180|  2.70M|        &self,
  181|  2.70M|        start: *const u8,
  182|  2.70M|        end: *const u8,
  183|  2.70M|    ) -> Option<*const u8> {
  184|  2.70M|        if start >= end {
  185|   561k|            return None;
  186|  2.14M|        }
  187|  2.14M|        let len = end.distance(start);
  188|  2.14M|        if len < __m256i::BYTES {
  189|   811k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|   745k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|   745k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  65.5k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  1.33M|        }
  201|  1.33M|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  1.33M|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  1.33M|        // enough to run on the vector routine. Pointer validity is caller's
  204|  1.33M|        // responsibility.
  205|  1.33M|        //
  206|  1.33M|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  1.33M|        // means we'd have to annotate this routine with `target_feature`.
  208|  1.33M|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  1.33M|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  1.33M|        // The real problem is that a routine with a `target_feature`
  211|  1.33M|        // annotation generally can't be inlined into caller code unless
  212|  1.33M|        // the caller code has the same target feature annotations. Namely,
  213|  1.33M|        // the common case (at time of writing) is for calling code to not
  214|  1.33M|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  1.33M|        // `target_feature` on this routine, it can be inlined which will
  216|  1.33M|        // handle some of the short-haystack cases above without touching the
  217|  1.33M|        // architecture specific code.
  218|  1.33M|        self.find_raw_avx2(start, end)
  219|  2.70M|    }
_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|   474k|    unsafe fn find_raw_sse2(
  765|   474k|        &self,
  766|   474k|        start: *const u8,
  767|   474k|        end: *const u8,
  768|   474k|    ) -> Option<*const u8> {
  769|   474k|        self.sse2.find_raw(start, end)
  770|   474k|    }
_RNCNvMs6_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB7_5Three8find_raw0Bf_:
 1050|   117k|                generic::fwd_byte_by_byte(start, end, |b| {
 1051|   117k|                    b == self.sse2.needle1()
 1052|  81.2k|                        || b == self.sse2.needle2()
 1053|  80.5k|                        || b == self.sse2.needle3()
 1054|   117k|                })
_RNvMs6_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_5Three12is_availableBd_:
  956|      1|    pub fn is_available() -> bool {
  957|      1|        #[cfg(not(target_feature = "sse2"))]
  958|      1|        {
  959|      1|            false
  960|      1|        }
  961|      1|        #[cfg(target_feature = "sse2")]
  962|      1|        {
  963|      1|            #[cfg(target_feature = "avx2")]
  964|      1|            {
  965|      1|                true
  966|      1|            }
  967|      1|            #[cfg(not(target_feature = "avx2"))]
  968|      1|            {
  969|      1|                #[cfg(feature = "std")]
  970|      1|                {
  971|      1|                    std::is_x86_feature_detected!("avx2")
  972|       |                }
  973|       |                #[cfg(not(feature = "std"))]
  974|       |                {
  975|       |                    false
  976|       |                }
  977|       |            }
  978|       |        }
  979|      1|    }
_RNvMs6_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_5Three13find_raw_sse2Bd_:
 1151|  52.4k|    unsafe fn find_raw_sse2(
 1152|  52.4k|        &self,
 1153|  52.4k|        start: *const u8,
 1154|  52.4k|        end: *const u8,
 1155|  52.4k|    ) -> Option<*const u8> {
 1156|  52.4k|        self.sse2.find_raw(start, end)
 1157|  52.4k|    }
_RNCNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  4.01M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  4.01M|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  4.01M|                })
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  65.5k|    unsafe fn find_raw_sse2(
  337|  65.5k|        &self,
  338|  65.5k|        start: *const u8,
  339|  65.5k|        end: *const u8,
  340|  65.5k|    ) -> Option<*const u8> {
  341|  65.5k|        self.sse2.find_raw(start, end)
  342|  65.5k|    }
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  2.70M|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  2.70M|        One {
   71|  2.70M|            sse2: generic::One::new(needle),
   72|  2.70M|            avx2: generic::One::new(needle),
   73|  2.70M|        }
   74|  2.70M|    }
_RNCNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|  2.84M|                generic::fwd_byte_by_byte(start, end, |b| {
  193|  2.84M|                    b == self.sse2.needle1()
  194|  2.84M|                })

_RNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr10memchr_raw:
  174|  2.70M|pub(crate) fn memchr_raw(
  175|  2.70M|    n1: u8,
  176|  2.70M|    start: *const u8,
  177|  2.70M|    end: *const u8,
  178|  2.70M|) -> Option<*const u8> {
  179|  2.70M|    // SAFETY: We provide a valid function pointer type.
  180|  2.70M|    unsafe_ifunc!(
  181|  2.70M|        One,
  182|  2.70M|        find_raw,
  183|  2.70M|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  2.70M|        Option<*const u8>,
  185|  2.70M|        start,
  186|  2.70M|        end,
  187|  2.70M|        n1
  188|  2.70M|    )
  189|  2.70M|}
_RNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr11memchr3_raw:
  270|  2.52M|pub(crate) fn memchr3_raw(
  271|  2.52M|    n1: u8,
  272|  2.52M|    n2: u8,
  273|  2.52M|    n3: u8,
  274|  2.52M|    start: *const u8,
  275|  2.52M|    end: *const u8,
  276|  2.52M|) -> Option<*const u8> {
  277|  2.52M|    // SAFETY: We provide a valid function pointer type.
  278|  2.52M|    unsafe_ifunc!(
  279|  2.52M|        Three,
  280|  2.52M|        find_raw,
  281|  2.52M|        unsafe fn(u8, u8, u8, *const u8, *const u8) -> Option<*const u8>,
  282|  2.52M|        Option<*const u8>,
  283|  2.52M|        start,
  284|  2.52M|        end,
  285|  2.52M|        n1,
  286|  2.52M|        n2,
  287|  2.52M|        n3
  288|  2.52M|    )
  289|  2.52M|}
_RNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  33.5M|pub(crate) fn memchr2_raw(
  221|  33.5M|    n1: u8,
  222|  33.5M|    n2: u8,
  223|  33.5M|    start: *const u8,
  224|  33.5M|    end: *const u8,
  225|  33.5M|) -> Option<*const u8> {
  226|  33.5M|    // SAFETY: We provide a valid function pointer type.
  227|  33.5M|    unsafe_ifunc!(
  228|  33.5M|        Two,
  229|  33.5M|        find_raw,
  230|  33.5M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  33.5M|        Option<*const u8>,
  232|  33.5M|        start,
  233|  33.5M|        end,
  234|  33.5M|        n1,
  235|  33.5M|        n2
  236|  33.5M|    )
  237|  33.5M|}
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  33.5M|        unsafe fn find_avx2(
   79|  33.5M|            $($needle: u8),+,
   80|  33.5M|            $hay_start: *const u8,
   81|  33.5M|            $hay_end: *const u8,
   82|  33.5M|        ) -> $retty {
   83|  33.5M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  33.5M|            $memchrty::new_unchecked($($needle),+)
   85|  33.5M|                .$memchrfind($hay_start, $hay_end)
   86|  33.5M|        }
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  2.70M|        unsafe fn find_avx2(
   79|  2.70M|            $($needle: u8),+,
   80|  2.70M|            $hay_start: *const u8,
   81|  2.70M|            $hay_end: *const u8,
   82|  2.70M|        ) -> $retty {
   83|  2.70M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  2.70M|            $memchrty::new_unchecked($($needle),+)
   85|  2.70M|                .$memchrfind($hay_start, $hay_end)
   86|  2.70M|        }
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr11memchr3_raw9find_avx2:
   78|  2.52M|        unsafe fn find_avx2(
   79|  2.52M|            $($needle: u8),+,
   80|  2.52M|            $hay_start: *const u8,
   81|  2.52M|            $hay_end: *const u8,
   82|  2.52M|        ) -> $retty {
   83|  2.52M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  2.52M|            $memchrty::new_unchecked($($needle),+)
   85|  2.52M|                .$memchrfind($hay_start, $hay_end)
   86|  2.52M|        }
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr11memchr3_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }

_RNvXNtCsezyNti1ZN2c_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|   111M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|   111M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|   111M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|   111M|    }
_RNvXNtCsezyNti1ZN2c_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|  2.08M|    fn as_usize(self) -> usize {
   27|  2.08M|        self as usize
   28|  2.08M|    }

_RNvXs7_NtCsezyNti1ZN2c_6memchr6memchrNtB5_7Memchr3NtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCsi53KuwE5jZG_7rdf_xml:
  465|  2.52M|    fn next(&mut self) -> Option<usize> {
  466|  2.52M|        // SAFETY: All of our implementations of memchr ensure that any
  467|  2.52M|        // pointers returns will fall within the start and end bounds, and this
  468|  2.52M|        // upholds the safety contract of `self.it.next`.
  469|  2.52M|        unsafe {
  470|  2.52M|            self.it.next(|s, e| {
  471|       |                memchr3_raw(self.needle1, self.needle2, self.needle3, s, e)
  472|  2.52M|            })
  473|  2.52M|        }
  474|  2.52M|    }
_RNvNtCsezyNti1ZN2c_6memchr6memchr12memchr2_iterCsi53KuwE5jZG_7rdf_xml:
  232|  2.11M|pub fn memchr2_iter<'h>(
  233|  2.11M|    needle1: u8,
  234|  2.11M|    needle2: u8,
  235|  2.11M|    haystack: &'h [u8],
  236|  2.11M|) -> Memchr2<'h> {
  237|  2.11M|    Memchr2::new(needle1, needle2, haystack)
  238|  2.11M|}
_RNvXs3_NtCsezyNti1ZN2c_6memchr6memchrNtB5_7Memchr2NtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCsi53KuwE5jZG_7rdf_xml:
  390|  33.3M|    fn next(&mut self) -> Option<usize> {
  391|  33.3M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  33.3M|        // pointers returns will fall within the start and end bounds, and this
  393|  33.3M|        // upholds the safety contract of `self.it.next`.
  394|  33.3M|        unsafe {
  395|  33.3M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  33.3M|        }
  397|  33.3M|    }
_RNvMNtCsezyNti1ZN2c_6memchr6memchrNtB2_6Memchr3newCsi53KuwE5jZG_7rdf_xml:
  300|  5.65k|    pub fn new(needle1: u8, haystack: &'h [u8]) -> Memchr<'h> {
  301|  5.65k|        Memchr {
  302|  5.65k|            needle1,
  303|  5.65k|            it: crate::arch::generic::memchr::Iter::new(haystack),
  304|  5.65k|        }
  305|  5.65k|    }
_RNvNtCsezyNti1ZN2c_6memchr6memchr6memchrCsi53KuwE5jZG_7rdf_xml:
   27|  1.35M|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  1.35M|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  1.35M|    // pointer between start and end.
   30|  1.35M|    unsafe {
   31|  1.35M|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  1.35M|        })
   34|  1.35M|    }
   35|  1.35M|}
_RNvNtCsezyNti1ZN2c_6memchr6memchr11memchr_iterCsi53KuwE5jZG_7rdf_xml:
  216|  5.65k|pub fn memchr_iter<'h>(needle: u8, haystack: &'h [u8]) -> Memchr<'h> {
  217|  5.65k|    Memchr::new(needle, haystack)
  218|  5.65k|}
_RNvNtCsezyNti1ZN2c_6memchr6memchr12memchr3_iterCsi53KuwE5jZG_7rdf_xml:
  256|  1.11M|pub fn memchr3_iter<'h>(
  257|  1.11M|    needle1: u8,
  258|  1.11M|    needle2: u8,
  259|  1.11M|    needle3: u8,
  260|  1.11M|    haystack: &'h [u8],
  261|  1.11M|) -> Memchr3<'h> {
  262|  1.11M|    Memchr3::new(needle1, needle2, needle3, haystack)
  263|  1.11M|}
_RNvXs_NtCsezyNti1ZN2c_6memchr6memchrNtB4_6MemchrNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCsi53KuwE5jZG_7rdf_xml:
  312|  11.0k|    fn next(&mut self) -> Option<usize> {
  313|  11.0k|        // SAFETY: All of our implementations of memchr ensure that any
  314|  11.0k|        // pointers returns will fall within the start and end bounds, and this
  315|  11.0k|        // upholds the safety contract of `self.it.next`.
  316|  11.0k|        unsafe {
  317|  11.0k|            // NOTE: I attempted to define an enum of previously created
  318|  11.0k|            // searchers and then switch on those here instead of just
  319|  11.0k|            // calling `memchr_raw` (or `One::new(..).find_raw(..)`). But
  320|  11.0k|            // that turned out to have a fair bit of extra overhead when
  321|  11.0k|            // searching very small haystacks.
  322|  11.0k|            self.it.next(|s, e| memchr_raw(self.needle1, s, e))
  323|  11.0k|        }
  324|  11.0k|    }
_RNvMs6_NtCsezyNti1ZN2c_6memchr6memchrNtB5_7Memchr33newCsi53KuwE5jZG_7rdf_xml:
  446|  1.11M|    pub fn new(
  447|  1.11M|        needle1: u8,
  448|  1.11M|        needle2: u8,
  449|  1.11M|        needle3: u8,
  450|  1.11M|        haystack: &'h [u8],
  451|  1.11M|    ) -> Memchr3<'h> {
  452|  1.11M|        Memchr3 {
  453|  1.11M|            needle1,
  454|  1.11M|            needle2,
  455|  1.11M|            needle3,
  456|  1.11M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  457|  1.11M|        }
  458|  1.11M|    }
_RNvMs2_NtCsezyNti1ZN2c_6memchr6memchrNtB5_7Memchr23newCsi53KuwE5jZG_7rdf_xml:
  377|  2.11M|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  2.11M|        Memchr2 {
  379|  2.11M|            needle1,
  380|  2.11M|            needle2,
  381|  2.11M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  2.11M|        }
  383|  2.11M|    }
_RNvNtCsezyNti1ZN2c_6memchr6memchr11memchr2_rawCsdBczmAo6fNM_9quick_xml:
  574|  33.5M|unsafe fn memchr2_raw(
  575|  33.5M|    needle1: u8,
  576|  33.5M|    needle2: u8,
  577|  33.5M|    start: *const u8,
  578|  33.5M|    end: *const u8,
  579|  33.5M|) -> Option<*const u8> {
  580|  33.5M|    #[cfg(target_arch = "x86_64")]
  581|  33.5M|    {
  582|  33.5M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  33.5M|    }
  584|  33.5M|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  585|  33.5M|    {
  586|  33.5M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  33.5M|    }
  588|  33.5M|    #[cfg(target_arch = "aarch64")]
  589|  33.5M|    {
  590|  33.5M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  33.5M|    }
  592|  33.5M|    #[cfg(not(any(
  593|  33.5M|        target_arch = "x86_64",
  594|  33.5M|        all(target_arch = "wasm32", target_feature = "simd128"),
  595|  33.5M|        target_arch = "aarch64"
  596|  33.5M|    )))]
  597|  33.5M|    {
  598|  33.5M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  33.5M|            .find_raw(start, end)
  600|  33.5M|    }
  601|  33.5M|}
_RNvNtCsezyNti1ZN2c_6memchr6memchr6memchrCsdBczmAo6fNM_9quick_xml:
   27|  1.34M|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  1.34M|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  1.34M|    // pointer between start and end.
   30|  1.34M|    unsafe {
   31|  1.34M|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  1.34M|        })
   34|  1.34M|    }
   35|  1.34M|}
_RNvNtCsezyNti1ZN2c_6memchr6memchr10memchr_rawCsdBczmAo6fNM_9quick_xml:
  504|  11.0k|unsafe fn memchr_raw(
  505|  11.0k|    needle: u8,
  506|  11.0k|    start: *const u8,
  507|  11.0k|    end: *const u8,
  508|  11.0k|) -> Option<*const u8> {
  509|  11.0k|    #[cfg(target_arch = "x86_64")]
  510|  11.0k|    {
  511|  11.0k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  11.0k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  11.0k|        // time. This function also handles using a fallback if neither AVX2
  514|  11.0k|        // nor SSE2 (unusual) are available.
  515|  11.0k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  11.0k|    }
  517|  11.0k|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  518|  11.0k|    {
  519|  11.0k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  11.0k|    }
  521|  11.0k|    #[cfg(target_arch = "aarch64")]
  522|  11.0k|    {
  523|  11.0k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  11.0k|    }
  525|  11.0k|    #[cfg(not(any(
  526|  11.0k|        target_arch = "x86_64",
  527|  11.0k|        all(target_arch = "wasm32", target_feature = "simd128"),
  528|  11.0k|        target_arch = "aarch64"
  529|  11.0k|    )))]
  530|  11.0k|    {
  531|  11.0k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  11.0k|    }
  533|  11.0k|}
_RNCNvXs7_NtCsezyNti1ZN2c_6memchr6memchrNtB7_7Memchr3NtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0CsdBczmAo6fNM_9quick_xml:
  470|  2.52M|            self.it.next(|s, e| {
  471|  2.52M|                memchr3_raw(self.needle1, self.needle2, self.needle3, s, e)
  472|  2.52M|            })
_RNCNvXs_NtCsezyNti1ZN2c_6memchr6memchrNtB6_6MemchrNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0CsdBczmAo6fNM_9quick_xml:
  322|  11.0k|            self.it.next(|s, e| memchr_raw(self.needle1, s, e))
_RNvNtCsezyNti1ZN2c_6memchr6memchr11memchr3_rawCsdBczmAo6fNM_9quick_xml:
  646|  2.52M|unsafe fn memchr3_raw(
  647|  2.52M|    needle1: u8,
  648|  2.52M|    needle2: u8,
  649|  2.52M|    needle3: u8,
  650|  2.52M|    start: *const u8,
  651|  2.52M|    end: *const u8,
  652|  2.52M|) -> Option<*const u8> {
  653|  2.52M|    #[cfg(target_arch = "x86_64")]
  654|  2.52M|    {
  655|  2.52M|        crate::arch::x86_64::memchr::memchr3_raw(
  656|  2.52M|            needle1, needle2, needle3, start, end,
  657|  2.52M|        )
  658|  2.52M|    }
  659|  2.52M|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  660|  2.52M|    {
  661|  2.52M|        crate::arch::wasm32::memchr::memchr3_raw(
  662|  2.52M|            needle1, needle2, needle3, start, end,
  663|  2.52M|        )
  664|  2.52M|    }
  665|  2.52M|    #[cfg(target_arch = "aarch64")]
  666|  2.52M|    {
  667|  2.52M|        crate::arch::aarch64::memchr::memchr3_raw(
  668|  2.52M|            needle1, needle2, needle3, start, end,
  669|  2.52M|        )
  670|  2.52M|    }
  671|  2.52M|    #[cfg(not(any(
  672|  2.52M|        target_arch = "x86_64",
  673|  2.52M|        all(target_arch = "wasm32", target_feature = "simd128"),
  674|  2.52M|        target_arch = "aarch64"
  675|  2.52M|    )))]
  676|  2.52M|    {
  677|  2.52M|        crate::arch::all::memchr::Three::new(needle1, needle2, needle3)
  678|  2.52M|            .find_raw(start, end)
  679|  2.52M|    }
  680|  2.52M|}
_RNCNvXs3_NtCsezyNti1ZN2c_6memchr6memchrNtB7_7Memchr2NtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0CsdBczmAo6fNM_9quick_xml:
  395|  33.5M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNvXs3_NtCsezyNti1ZN2c_6memchr6memchrNtB5_7Memchr2NtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCsdBczmAo6fNM_9quick_xml:
  390|   139k|    fn next(&mut self) -> Option<usize> {
  391|   139k|        // SAFETY: All of our implementations of memchr ensure that any
  392|   139k|        // pointers returns will fall within the start and end bounds, and this
  393|   139k|        // upholds the safety contract of `self.it.next`.
  394|   139k|        unsafe {
  395|   139k|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|   139k|        }
  397|   139k|    }
_RNCNvNtCsezyNti1ZN2c_6memchr6memchr6memchr0B5_:
   31|  2.69M|        generic::search_slice_with_raw(haystack, |start, end| {
   32|  2.69M|            memchr_raw(needle, start, end)
   33|  2.69M|        })
_RNvNtCsezyNti1ZN2c_6memchr6memchr10memchr_rawB3_:
  504|  2.69M|unsafe fn memchr_raw(
  505|  2.69M|    needle: u8,
  506|  2.69M|    start: *const u8,
  507|  2.69M|    end: *const u8,
  508|  2.69M|) -> Option<*const u8> {
  509|  2.69M|    #[cfg(target_arch = "x86_64")]
  510|  2.69M|    {
  511|  2.69M|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  2.69M|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  2.69M|        // time. This function also handles using a fallback if neither AVX2
  514|  2.69M|        // nor SSE2 (unusual) are available.
  515|  2.69M|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  2.69M|    }
  517|  2.69M|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  518|  2.69M|    {
  519|  2.69M|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  2.69M|    }
  521|  2.69M|    #[cfg(target_arch = "aarch64")]
  522|  2.69M|    {
  523|  2.69M|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  2.69M|    }
  525|  2.69M|    #[cfg(not(any(
  526|  2.69M|        target_arch = "x86_64",
  527|  2.69M|        all(target_arch = "wasm32", target_feature = "simd128"),
  528|  2.69M|        target_arch = "aarch64"
  529|  2.69M|    )))]
  530|  2.69M|    {
  531|  2.69M|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  2.69M|    }
  533|  2.69M|}

_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  220|   836k|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  221|   836k|            _mm_loadu_si128(data as *const __m128i)
  222|   836k|        }
_RNvXs_NtCsezyNti1ZN2c_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  173|  34.8M|    fn first_offset(self) -> usize {
  174|  34.8M|        // We are dealing with little endian here (and if we aren't, we swap
  175|  34.8M|        // the bytes so we are in practice), where the most significant byte
  176|  34.8M|        // is at a higher address. That means the least significant bit that
  177|  34.8M|        // is set corresponds to the position of our first matching byte.
  178|  34.8M|        // That position corresponds to the number of zeros after the least
  179|  34.8M|        // significant bit.
  180|  34.8M|        self.get_for_offset().trailing_zeros() as usize
  181|  34.8M|    }
_RNvMNtCsezyNti1ZN2c_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  128|  34.8M|    fn get_for_offset(self) -> u32 {
  129|  34.8M|        #[cfg(target_endian = "big")]
  130|  34.8M|        {
  131|  34.8M|            self.0.swap_bytes()
  132|  34.8M|        }
  133|  34.8M|        #[cfg(target_endian = "little")]
  134|  34.8M|        {
  135|  34.8M|            self.0
  136|  34.8M|        }
  137|  34.8M|    }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  225|  1.52M|        unsafe fn movemask(self) -> SensibleMoveMask {
  226|  1.52M|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  227|  1.52M|        }
_RNvXs_NtCsezyNti1ZN2c_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  148|  42.9M|    fn has_non_zero(self) -> bool {
  149|  42.9M|        self.0 != 0
  150|  42.9M|    }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  230|  1.64M|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  231|  1.64M|            _mm_cmpeq_epi8(self, vector2)
  232|  1.64M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  275|   110M|        unsafe fn movemask(self) -> SensibleMoveMask {
  276|   110M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  277|   110M|        }
_RNvYNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtNtCsezyNti1ZN2c_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   65|  4.46M|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   66|  4.46M|        self.movemask().has_non_zero()
   67|  4.46M|    }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  270|  36.8M|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  271|  36.8M|            _mm256_loadu_si256(data as *const __m256i)
  272|  36.8M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  280|  97.0M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  281|  97.0M|            _mm256_cmpeq_epi8(self, vector2)
  282|  97.0M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  210|  77.3M|        unsafe fn splat(byte: u8) -> __m128i {
  211|  77.3M|            _mm_set1_epi8(byte as i8)
  212|  77.3M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector2or:
  240|   808k|        unsafe fn or(self, vector2: Self) -> __m128i {
  241|   808k|            _mm_or_si128(self, vector2)
  242|   808k|        }
_RNvXs_NtCsezyNti1ZN2c_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  163|  36.2M|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  164|  36.2M|        SensibleMoveMask(self.0 | other.0)
  165|  36.2M|    }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  265|  9.19M|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  266|  9.19M|            _mm256_load_si256(data as *const __m256i)
  267|  9.19M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  260|  77.3M|        unsafe fn splat(byte: u8) -> __m256i {
  261|  77.3M|            _mm256_set1_epi8(byte as i8)
  262|  77.3M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector2or:
  290|  55.7M|        unsafe fn or(self, vector2: Self) -> __m256i {
  291|  55.7M|            _mm256_or_si256(self, vector2)
  292|  55.7M|        }

_RNvMs2_NtCs4LeKDsHh25A_9once_cell3impINtB5_8OnceCellNtNtCsjOdcKtOMjJI_5alloc6string6StringE14is_initializedCsg5zPnAtaUqZ_13libfuzzer_sys:
   49|  20.4k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  20.4k|        // An `Acquire` load is enough because that makes all the initialization
   51|  20.4k|        // operations visible to us, and, this being a fast path, weaker
   52|  20.4k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  20.4k|        // `SeqCst` operations on the slow path.
   54|  20.4k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  20.4k|    }

_RNvMs4_NtCs4LeKDsHh25A_9once_cell4syncINtB5_8OnceCellNtNtCsjOdcKtOMjJI_5alloc6string6StringE3getCsg5zPnAtaUqZ_13libfuzzer_sys:
  963|  20.4k|        pub fn get(&self) -> Option<&T> {
  964|  20.4k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  20.4k|                None
  969|       |            }
  970|  20.4k|        }

_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E33read_url_query_codepoint_or_echarCs8JH8FkI8tas_5oxrdf:
 1546|   107M|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1547|   107M|        if UNCHECKED || is_url_query_code_point(c) {
 1548|   107M|            self.output.push(c);
 1549|   107M|            Ok(())
 1550|  9.03k|        } else if c == '%' {
 1551|  3.54k|            self.read_echar()
 1552|       |        } else {
 1553|  5.49k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1554|       |        }
 1555|   107M|    }
_RNCNvMs11_CsbOXESBDtkxG_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0Cs8JH8FkI8tas_5oxrdf:
 1561|  24.7k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCs8JH8FkI8tas_5oxrdf:
 1199|   738k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|   738k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|    725|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|    725|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|   737k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|  20.4k|            _ => self.parse_relative(),
 1210|       |        }
 1211|   738k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCs8JH8FkI8tas_5oxrdf:
 1359|   527k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1360|   527k|        if self.input.starts_with('[') {
 1361|       |            // IP v6
 1362|  3.98k|            let start_position = self.input.position;
 1363|  84.7k|            while let Some(c) = self.input.next() {
 1364|  82.5k|                self.output.push(c);
 1365|  82.5k|                if c == ']' {
 1366|  1.81k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1367|  1.81k|                    if !UNCHECKED {
 1368|  1.81k|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1369|  1.81k|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1370|      0|                        }
 1371|      0|                    }
 1372|       |
 1373|      0|                    let c = self.input.next();
 1374|      0|                    return match c {
 1375|       |                        Some(':') => {
 1376|      0|                            self.output.push(':');
 1377|      0|                            self.parse_port()
 1378|       |                        }
 1379|       |                        None | Some('/') | Some('?') | Some('#') => {
 1380|      0|                            self.output_positions.authority_end = self.output.len();
 1381|      0|                            self.parse_path_start(c)
 1382|       |                        }
 1383|      0|                        Some(c) => {
 1384|      0|                            if UNCHECKED {
 1385|      0|                                self.output.push(c);
 1386|      0|                                continue;
 1387|       |                            } else {
 1388|      0|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1389|       |                            }
 1390|       |                        }
 1391|       |                    };
 1392|  80.7k|                }
 1393|       |            }
 1394|  2.17k|            if UNCHECKED {
 1395|       |                // We consider it's valid even if it's not finished
 1396|      0|                self.output_positions.authority_end = self.output.len();
 1397|      0|                self.parse_path_start(None)
 1398|       |            } else {
 1399|  2.17k|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1400|       |            }
 1401|       |        } else {
 1402|       |            // Other host
 1403|  12.1M|            loop {
 1404|  12.1M|                let c = self.input.next();
 1405|  12.1M|                match c {
 1406|       |                    Some(':') => {
 1407|   130k|                        self.output.push(':');
 1408|   130k|                        return self.parse_port();
 1409|       |                    }
 1410|       |                    None | Some('/') | Some('?') | Some('#') => {
 1411|   389k|                        self.output_positions.authority_end = self.output.len();
 1412|   389k|                        return self.parse_path_start(c);
 1413|       |                    }
 1414|  11.5M|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1415|       |                }
 1416|       |            }
 1417|       |        }
 1418|   527k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE11is_absoluteCs8JH8FkI8tas_5oxrdf:
  199|   666k|    pub fn is_absolute(&self) -> bool {
  200|   666k|        self.positions.scheme_end != 0
  201|   666k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_relativeCs8JH8FkI8tas_5oxrdf:
 1256|  38.7k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1257|  38.7k|        if let Some(base) = self.base {
 1258|      0|            match self.input.front() {
 1259|       |                None => {
 1260|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1261|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1262|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1263|      0|                    self.output_positions.path_end = base.positions.path_end;
 1264|      0|                    self.output_positions.query_end = base.positions.query_end;
 1265|      0|                    Ok(())
 1266|       |                }
 1267|       |                Some('/') => {
 1268|      0|                    self.input.next();
 1269|      0|                    self.parse_relative_slash(&base)
 1270|       |                }
 1271|       |                Some('?') => {
 1272|      0|                    self.input.next();
 1273|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1274|      0|                    self.output.push('?');
 1275|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1276|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1277|      0|                    self.output_positions.path_end = base.positions.path_end;
 1278|      0|                    self.parse_query()
 1279|       |                }
 1280|       |                Some('#') => {
 1281|      0|                    self.input.next();
 1282|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1283|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1284|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1285|      0|                    self.output_positions.path_end = base.positions.path_end;
 1286|      0|                    self.output_positions.query_end = base.positions.query_end;
 1287|      0|                    self.output.push('#');
 1288|      0|                    self.parse_fragment()
 1289|       |                }
 1290|       |                _ => {
 1291|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1292|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1293|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1294|      0|                    self.output_positions.path_end = base.positions.path_end;
 1295|      0|                    self.remove_last_segment();
 1296|      0|                    if self.output.len() > base.positions.scheme_end {
 1297|      0|                        // We have some path or authority, we keep a base '/'
 1298|      0|                        self.output.push('/');
 1299|      0|                    }
 1300|      0|                    self.parse_path()
 1301|       |                }
 1302|       |            }
 1303|       |        } else {
 1304|  38.7k|            self.output_positions.scheme_end = 0;
 1305|  38.7k|            self.input_scheme_end = 0;
 1306|  38.7k|            if self.input.starts_with('/') {
 1307|  3.61k|                self.input.next();
 1308|  3.61k|                self.output.push('/');
 1309|  3.61k|                self.parse_path_or_authority()
 1310|       |            } else {
 1311|  35.1k|                self.output_positions.authority_end = 0;
 1312|  35.1k|                self.parse_path()
 1313|       |            }
 1314|       |        }
 1315|  38.7k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCs8JH8FkI8tas_5oxrdf:
 1468|   534k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1469|  21.0M|        loop {
 1470|  21.0M|            let c = self.input.next();
 1471|  21.0M|            match c {
 1472|       |                None | Some('/') | Some('?') | Some('#') => {
 1473|  1.22M|                    if self.output.as_str().ends_with("/..") {
 1474|      0|                        self.remove_last_segment();
 1475|      0|                        self.remove_last_segment();
 1476|      0|                        self.output.push('/');
 1477|  1.22M|                    } else if self.output.as_str().ends_with("/.") {
 1478|      0|                        self.remove_last_segment();
 1479|      0|                        self.output.push('/');
 1480|  1.22M|                    } else if c == Some('/') {
 1481|   724k|                        self.output.push('/');
 1482|   724k|                    }
 1483|       |
 1484|  1.22M|                    if c == Some('?') {
 1485|   117k|                        self.output_positions.path_end = self.output.len();
 1486|   117k|                        self.output.push('?');
 1487|   117k|                        return self.parse_query();
 1488|  1.10M|                    } else if c == Some('#') {
 1489|  72.3k|                        self.output_positions.path_end = self.output.len();
 1490|  72.3k|                        self.output_positions.query_end = self.output.len();
 1491|  72.3k|                        self.output.push('#');
 1492|  72.3k|                        return self.parse_fragment();
 1493|  1.03M|                    } else if c.is_none() {
 1494|   309k|                        self.output_positions.path_end = self.output.len();
 1495|   309k|                        self.output_positions.query_end = self.output.len();
 1496|   309k|                        return Ok(());
 1497|   724k|                    }
 1498|       |                }
 1499|  19.8M|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1500|       |            }
 1501|       |        }
 1502|   534k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCs8JH8FkI8tas_5oxrdf:
 1245|   628k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|   628k|        if self.input.starts_with('/') {
 1247|   539k|            self.input.next();
 1248|   539k|            self.output.push('/');
 1249|   539k|            self.parse_authority()
 1250|       |        } else {
 1251|  89.0k|            self.output_positions.authority_end = self.output.len() - 1;
 1252|  89.0k|            self.parse_path()
 1253|       |        }
 1254|   628k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE10into_innerCs8JH8FkI8tas_5oxrdf:
  185|   650k|    pub fn into_inner(self) -> T {
  186|   650k|        self.iri
  187|   650k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE5parseCs8JH8FkI8tas_5oxrdf:
   58|   738k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|   738k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|   666k|        Ok(Self { iri, positions })
   61|   738k|    }
_RINvMs11_CsbOXESBDtkxG_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECs8JH8FkI8tas_5oxrdf:
 1578|  72.8k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1579|  72.8k|        Err(IriParseError { kind })
 1580|  72.8k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCs8JH8FkI8tas_5oxrdf:
 1558|  25.6k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1559|  25.6k|        let c1 = self.input.next();
 1560|  25.6k|        let c2 = self.input.next();
 1561|  25.6k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1562|  11.2k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1563|       |        {
 1564|  7.44k|            self.output.push('%');
 1565|  7.44k|            self.output.push(c1.unwrap());
 1566|  7.44k|            self.output.push(c2.unwrap());
 1567|  7.44k|            Ok(())
 1568|       |        } else {
 1569|  18.2k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1570|  18.2k|                Some('%'),
 1571|  18.2k|                c1,
 1572|  18.2k|                c2,
 1573|  18.2k|            ]))
 1574|       |        }
 1575|  25.6k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCs8JH8FkI8tas_5oxrdf:
 1174|   738k|    fn parse(
 1175|   738k|        iri: &'a str,
 1176|   738k|        base: Option<IriRef<&'a str>>,
 1177|   738k|        output: &'a mut O,
 1178|   738k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|   738k|        let mut parser = Self {
 1180|   738k|            iri,
 1181|   738k|            base,
 1182|   738k|            input: ParserInput {
 1183|   738k|                value: iri.chars(),
 1184|   738k|                position: 0,
 1185|   738k|            },
 1186|   738k|            output,
 1187|   738k|            output_positions: IriElementsPositions {
 1188|   738k|                scheme_end: 0,
 1189|   738k|                authority_end: 0,
 1190|   738k|                path_end: 0,
 1191|   738k|                query_end: 0,
 1192|   738k|            },
 1193|   738k|            input_scheme_end: 0,
 1194|   738k|        };
 1195|   738k|        parser.parse_scheme_start()?;
 1196|   666k|        Ok(parser.output_positions)
 1197|   738k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCs8JH8FkI8tas_5oxrdf:
 1335|   539k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1336|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1337|  12.7M|        loop {
 1338|  12.7M|            let c = self.input.next();
 1339|  12.7M|            match c {
 1340|       |                Some('@') => {
 1341|  34.3k|                    self.output.push('@');
 1342|  34.3k|                    return self.parse_host();
 1343|       |                }
 1344|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1345|   492k|                    self.input = ParserInput {
 1346|   492k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1347|   492k|                        position: self.input_scheme_end + 2,
 1348|   492k|                    };
 1349|   492k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1350|   492k|                    return self.parse_host();
 1351|       |                }
 1352|  12.2M|                Some(c) => {
 1353|  12.2M|                    self.read_url_codepoint_or_echar(c)?;
 1354|       |                }
 1355|       |            }
 1356|       |        }
 1357|   539k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE10into_innerCs8JH8FkI8tas_5oxrdf:
  665|   650k|    pub fn into_inner(self) -> T {
  666|   650k|        self.0.into_inner()
  667|   650k|    }
_RNCNvMs11_CsbOXESBDtkxG_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0Cs8JH8FkI8tas_5oxrdf:
 1562|  10.3k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCs8JH8FkI8tas_5oxrdf:
 1420|   130k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1421|   163k|        loop {
 1422|   163k|            let c = self.input.next();
 1423|   163k|            match c {
 1424|       |                Some('/') | Some('?') | Some('#') | None => {
 1425|   127k|                    self.output_positions.authority_end = self.output.len();
 1426|   127k|                    return self.parse_path_start(c);
 1427|       |                }
 1428|  35.8k|                Some(c) => {
 1429|  35.8k|                    if UNCHECKED || c.is_ascii_digit() {
 1430|  32.5k|                        self.output.push(c)
 1431|       |                    } else {
 1432|  3.27k|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1433|       |                    }
 1434|       |                }
 1435|       |            }
 1436|       |        }
 1437|   130k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarCs8JH8FkI8tas_5oxrdf:
 1534|  66.3M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1535|  66.3M|        if UNCHECKED || is_url_code_point(c) {
 1536|  66.2M|            self.output.push(c);
 1537|  66.2M|            Ok(())
 1538|  63.2k|        } else if c == '%' {
 1539|  22.1k|            self.read_echar()
 1540|       |        } else {
 1541|  41.1k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1542|       |        }
 1543|  66.3M|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCs8JH8FkI8tas_5oxrdf:
 1439|   516k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1440|   516k|        match c {
 1441|       |            None => {
 1442|   141k|                self.output_positions.path_end = self.output.len();
 1443|   141k|                self.output_positions.query_end = self.output.len();
 1444|   141k|                Ok(())
 1445|       |            }
 1446|       |            Some('?') => {
 1447|  36.7k|                self.output_positions.path_end = self.output.len();
 1448|  36.7k|                self.output.push('?');
 1449|  36.7k|                self.parse_query()
 1450|       |            }
 1451|       |            Some('#') => {
 1452|  2.74k|                self.output_positions.path_end = self.output.len();
 1453|  2.74k|                self.output_positions.query_end = self.output.len();
 1454|  2.74k|                self.output.push('#');
 1455|  2.74k|                self.parse_fragment()
 1456|       |            }
 1457|       |            Some('/') => {
 1458|   335k|                self.output.push('/');
 1459|   335k|                self.parse_path()
 1460|       |            }
 1461|      0|            Some(c) => {
 1462|      0|                self.read_url_codepoint_or_echar(c)?;
 1463|      0|                self.parse_path()
 1464|       |            }
 1465|       |        }
 1466|   516k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE5parseCs8JH8FkI8tas_5oxrdf:
  556|   738k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|   738k|        IriRef::parse(iri)?.try_into()
  558|   738k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCs8JH8FkI8tas_5oxrdf:
 1504|   154k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1505|   107M|        while let Some(c) = self.input.next() {
 1506|   107M|            if c == '#' {
 1507|  18.5k|                self.output_positions.query_end = self.output.len();
 1508|  18.5k|                self.output.push('#');
 1509|  18.5k|                return self.parse_fragment();
 1510|       |            } else {
 1511|   107M|                self.read_url_query_codepoint_or_echar(c)?
 1512|       |            }
 1513|       |        }
 1514|   128k|        self.output_positions.query_end = self.output.len();
 1515|   128k|        Ok(())
 1516|   154k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCs8JH8FkI8tas_5oxrdf:
 1518|  93.6k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1519|  22.8M|        while let Some(c) = self.input.next() {
 1520|  22.7M|            self.read_url_codepoint_or_echar(c)?
 1521|       |        }
 1522|  86.4k|        Ok(())
 1523|  93.6k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCs8JH8FkI8tas_5oxrdf:
 1213|   717k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|  5.53M|        loop {
 1215|  5.53M|            let c = self.input.next();
 1216|  5.53M|            match c {
 1217|  5.53M|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|  4.82M|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|   699k|                    self.output.push(':');
 1222|   699k|                    self.output_positions.scheme_end = self.output.len();
 1223|   699k|                    self.input_scheme_end = self.input.position;
 1224|   699k|                    return if self.input.starts_with('/') {
 1225|   624k|                        self.input.next();
 1226|   624k|                        self.output.push('/');
 1227|   624k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  74.7k|                        self.output_positions.authority_end = self.output.len();
 1230|  74.7k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|  18.3k|                    self.input = ParserInput {
 1235|  18.3k|                        value: self.iri.chars(),
 1236|  18.3k|                        position: 0,
 1237|  18.3k|                    }; // reset
 1238|  18.3k|                    self.output.clear();
 1239|  18.3k|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|   717k|    }
_RNvXsV_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringEINtNtCs9nhK3FOW46N_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCs8JH8FkI8tas_5oxrdf:
  968|   666k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  969|   666k|        if iri.is_absolute() {
  970|   650k|            Ok(Self(iri))
  971|       |        } else {
  972|  15.3k|            Err(IriParseError {
  973|  15.3k|                kind: IriParseErrorKind::NoScheme,
  974|  15.3k|            })
  975|       |        }
  976|   666k|    }
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput11starts_withCs8JH8FkI8tas_5oxrdf:
 1156|  1.89M|    fn starts_with(&self, c: char) -> bool {
 1157|  1.89M|        self.value.as_str().starts_with(c)
 1158|  1.89M|    }
_RNvXs1b_CsbOXESBDtkxG_5oxiriNtB6_16VoidOutputBufferNtNtCs9nhK3FOW46N_4core7default7Default7defaultCs8JH8FkI8tas_5oxrdf:
 1065|   738k|#[derive(Default)]
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCs8JH8FkI8tas_5oxrdf:
 1092|  2.73M|    fn len(&self) -> usize {
 1093|  2.73M|        self.len
 1094|  2.73M|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCs8JH8FkI8tas_5oxrdf:
 1072|   181M|    fn push(&mut self, c: char) {
 1073|   181M|        self.len += c.len_utf8();
 1074|   181M|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCs8JH8FkI8tas_5oxrdf:
 1097|  2.44M|    fn as_str(&self) -> &str {
 1098|  2.44M|        ""
 1099|  2.44M|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer5clearCs8JH8FkI8tas_5oxrdf:
 1082|  18.3k|    fn clear(&mut self) {
 1083|  18.3k|        self.len = 0;
 1084|  18.3k|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCs8JH8FkI8tas_5oxrdf:
 1087|   492k|    fn truncate(&mut self, new_len: usize) {
 1088|   492k|        self.len = new_len;
 1089|   492k|    }
_RNvCsbOXESBDtkxG_5oxiri17is_url_code_pointCs8JH8FkI8tas_5oxrdf:
 1584|   173M|fn is_url_code_point(c: char) -> bool {
 1585|   173M|    matches!(c,
 1586|  39.4M|        'a'..='z'
 1587|  34.2M|        | 'A'..='Z'
 1588|  52.0M|        | '0'..='9'
 1589|       |        | '!'
 1590|       |        | '$'
 1591|       |        | '&'
 1592|       |        | '\''
 1593|       |        | '('
 1594|       |        | ')'
 1595|       |        | '*'
 1596|       |        | '+'
 1597|       |        | ','
 1598|       |        | '-'
 1599|       |        | '.'
 1600|       |        | '/'
 1601|       |        | ':'
 1602|       |        | ';'
 1603|       |        | '='
 1604|       |        | '?'
 1605|       |        | '@'
 1606|       |        | '_'
 1607|       |        | '~'
 1608|  1.12M|        | '\u{A0}'..='\u{D7FF}'
 1609|   125k|        | '\u{F900}'..='\u{FDCF}'
 1610|   124k|        | '\u{FDF0}'..='\u{FFEF}'
 1611|  49.2k|        | '\u{10000}'..='\u{1FFFD}'
 1612|  39.2k|        | '\u{20000}'..='\u{2FFFD}'
 1613|  39.1k|        | '\u{30000}'..='\u{3FFFD}'
 1614|  39.1k|        | '\u{40000}'..='\u{4FFFD}'
 1615|  39.1k|        | '\u{50000}'..='\u{5FFFD}'
 1616|  18.4k|        | '\u{60000}'..='\u{6FFFD}'
 1617|  18.4k|        | '\u{70000}'..='\u{7FFFD}'
 1618|  18.4k|        | '\u{80000}'..='\u{8FFFD}'
 1619|  18.4k|        | '\u{90000}'..='\u{9FFFD}'
 1620|  18.4k|        | '\u{A0000}'..='\u{AFFFD}'
 1621|  1.09k|        | '\u{B0000}'..='\u{BFFFD}'
 1622|  1.09k|        | '\u{C0000}'..='\u{CFFFD}'
 1623|  1.09k|        | '\u{D0000}'..='\u{DFFFD}'
 1624|  1.09k|        | '\u{E1000}'..='\u{EFFFD}'
 1625|       |    )
 1626|   173M|}
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput4nextCs8JH8FkI8tas_5oxrdf:
 1141|   183M|    fn next(&mut self) -> Option<char> {
 1142|   183M|        if let Some(head) = self.value.next() {
 1143|   182M|            self.position += head.len_utf8();
 1144|   182M|            Some(head)
 1145|       |        } else {
 1146|   815k|            None
 1147|       |        }
 1148|   183M|    }
_RNvCsbOXESBDtkxG_5oxiri23is_url_query_code_pointCs8JH8FkI8tas_5oxrdf:
 1629|   107M|fn is_url_query_code_point(c: char) -> bool {
 1630|   107M|    is_url_code_point(c)
 1631|  10.6k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1632|   107M|}
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput5frontCs8JH8FkI8tas_5oxrdf:
 1151|   738k|    fn front(&self) -> Option<char> {
 1152|   738k|        self.value.clone().next()
 1153|   738k|    }

_RNvXsG_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCs9nhK3FOW46N_4core3ops3bit6BitXor6bitxorCslWipVVScnoQ_11rand_chacha:
   22|  1.40M|            fn $fn(self, rhs: Self) -> Self::Output {
   23|  1.40M|                x2::new([self.0[0].$fn(rhs.0[0]), self.0[1].$fn(rhs.0[1])])
   24|  1.40M|            }
_RNvXsg_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words2301CslWipVVScnoQ_11rand_chacha:
  201|   351k|    fn shuffle_lane_words2301(self) -> Self {
  202|   351k|        Self::new([
  203|   351k|            self.0[0].shuffle_lane_words2301(),
  204|   351k|            self.0[1].shuffle_lane_words2301(),
  205|   351k|        ])
  206|   351k|    }
_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right16CslWipVVScnoQ_11rand_chacha:
   42|   351k|        fn $fn(self) -> Self {
   43|   351k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   351k|        }
_RNvMNtCsf8HyAzZvOrI_10ppv_lite864softINtB2_2x2INtNtNtNtB4_6x86_644sse24avx212u32x4x2_avx2NtBP_4NoNIENtBN_2G0E3newCslWipVVScnoQ_11rand_chacha:
   13|  4.00M|    pub fn new(xs: [W; 2]) -> Self {
   14|  4.00M|        x2(xs, PhantomData)
   15|  4.00M|    }
_RNvXsM_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCs9nhK3FOW46N_4core3ops5arith9AddAssign10add_assignCslWipVVScnoQ_11rand_chacha:
   32|  1.40M|            fn $fn_assign(&mut self, rhs: Self) {
   33|  1.40M|                (self.0[0]).$fn_assign(rhs.0[0]);
   34|  1.40M|                (self.0[1]).$fn_assign(rhs.0[1]);
   35|  1.40M|            }
_RNvXsg_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words1230CslWipVVScnoQ_11rand_chacha:
  208|   351k|    fn shuffle_lane_words1230(self) -> Self {
  209|   351k|        Self::new([
  210|   351k|            self.0[0].shuffle_lane_words1230(),
  211|   351k|            self.0[1].shuffle_lane_words1230(),
  212|   351k|        ])
  213|   351k|    }
_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right24CslWipVVScnoQ_11rand_chacha:
   42|   351k|        fn $fn(self) -> Self {
   43|   351k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   351k|        }
_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right25CslWipVVScnoQ_11rand_chacha:
   42|   351k|        fn $fn(self) -> Self {
   43|   351k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   351k|        }
_RNvXsg_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words3012CslWipVVScnoQ_11rand_chacha:
  215|   351k|    fn shuffle_lane_words3012(self) -> Self {
  216|   351k|        Self::new([
  217|   351k|            self.0[0].shuffle_lane_words3012(),
  218|   351k|            self.0[1].shuffle_lane_words3012(),
  219|   351k|        ])
  220|   351k|    }
_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right20CslWipVVScnoQ_11rand_chacha:
   42|   351k|        fn $fn(self) -> Self {
   43|   351k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   351k|        }

_RINvYINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine3vecINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EAmj4_ECslWipVVScnoQ_11rand_chacha:
  251|  29.2k|    fn vec<V, A>(self, a: A) -> V
  252|  29.2k|    where
  253|  29.2k|        V: MultiLane<A>,
  254|  29.2k|    {
  255|  29.2k|        V::from_lanes(a)
  256|  29.2k|    }
_RINvYINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec128_storageINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EECslWipVVScnoQ_11rand_chacha:
  246|   263k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|   263k|        unsafe { V::unpack(s) }
  248|   263k|    }
_RINvYINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6410SseMachineNtB6_5YesS3NtB6_5YesS4NtB6_4NoNIENtNtB8_5types7Machine7read_leINtNtB6_4sse210u32x4_sse2BR_B12_B1d_EECslWipVVScnoQ_11rand_chacha:
  259|    230|    fn read_le<V>(self, input: &[u8]) -> V
  260|    230|    where
  261|    230|        V: StoreBytes,
  262|    230|    {
  263|    230|        unsafe { V::unsafe_read_le(input) }
  264|    230|    }
_RINvYINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec512_storageINtNtB8_4soft2x2INtNtNtB6_4sse24avx212u32x4x2_avx2BS_ENtB2b_2G0EECslWipVVScnoQ_11rand_chacha:
  246|  29.2k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|  29.2k|        unsafe { V::unpack(s) }
  248|  29.2k|    }

_RNvXNtCsf8HyAzZvOrI_10ppv_lite866x86_64INtB2_10SseMachineNtB2_5YesS3NtB2_5YesS4NtB2_4NoNIENtNtB4_5types7Machine8instanceCslWipVVScnoQ_11rand_chacha:
   64|    115|    unsafe fn instance() -> Self {
   65|    115|        SseMachine(PhantomData)
   66|    115|    }
_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite866x86_64INtB4_11Avx2MachineNtB4_4NoNIENtNtB6_5types7Machine8instanceCslWipVVScnoQ_11rand_chacha:
   92|  29.2k|    unsafe fn instance() -> Self {
   93|  29.2k|        Avx2Machine(PhantomData)
   94|  29.2k|    }
_RNvNtCslWipVVScnoQ_11rand_chacha4guts11init_chacha:
  333|    115|        $($pub $(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  334|    115|            #[inline(always)]
  335|    115|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  336|    115|            use std::arch::x86_64::*;
  337|    115|            #[target_feature(enable = "avx")]
  338|    115|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|    115|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|    115|            }
  341|    115|            #[target_feature(enable = "sse2")]
  342|    115|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  343|    115|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  344|    115|            }
  345|    115|            unsafe {
  346|    115|                if is_x86_feature_detected!("avx") {
  347|    115|                    impl_avx($($arg),*)
  348|      0|                } else if is_x86_feature_detected!("sse2") {
  349|      0|                    impl_sse2($($arg),*)
  350|       |                } else {
  351|      0|                    unimplemented!()
  352|       |                }
  353|       |            }
  354|    115|        }
_RNvNtCslWipVVScnoQ_11rand_chacha4guts11refill_wide:
  250|  29.2k|        $($pub$(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  251|  29.2k|            #[inline(always)]
  252|  29.2k|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  253|  29.2k|            use std::arch::x86_64::*;
  254|  29.2k|            #[target_feature(enable = "avx2")]
  255|  29.2k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  29.2k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  29.2k|                _mm256_zeroupper();
  258|  29.2k|                ret
  259|  29.2k|            }
  260|  29.2k|            #[target_feature(enable = "avx")]
  261|  29.2k|            #[target_feature(enable = "sse4.1")]
  262|  29.2k|            #[target_feature(enable = "ssse3")]
  263|  29.2k|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  264|  29.2k|                let ret = fn_impl($crate::x86_64::AVX::instance(), $($arg),*);
  265|  29.2k|                _mm256_zeroupper();
  266|  29.2k|                ret
  267|  29.2k|            }
  268|  29.2k|            #[target_feature(enable = "sse4.1")]
  269|  29.2k|            #[target_feature(enable = "ssse3")]
  270|  29.2k|            unsafe fn impl_sse41($($arg: $argty),*) -> $ret {
  271|  29.2k|                fn_impl($crate::x86_64::SSE41::instance(), $($arg),*)
  272|  29.2k|            }
  273|  29.2k|            #[target_feature(enable = "ssse3")]
  274|  29.2k|            unsafe fn impl_ssse3($($arg: $argty),*) -> $ret {
  275|  29.2k|                fn_impl($crate::x86_64::SSSE3::instance(), $($arg),*)
  276|  29.2k|            }
  277|  29.2k|            #[target_feature(enable = "sse2")]
  278|  29.2k|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  279|  29.2k|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  280|  29.2k|            }
  281|  29.2k|            unsafe {
  282|  29.2k|                if is_x86_feature_detected!("avx2") {
  283|  29.2k|                    impl_avx2($($arg),*)
  284|      0|                } else if is_x86_feature_detected!("avx") {
  285|      0|                    impl_avx($($arg),*)
  286|      0|                } else if is_x86_feature_detected!("sse4.1") {
  287|      0|                    impl_sse41($($arg),*)
  288|      0|                } else if is_x86_feature_detected!("ssse3") {
  289|      0|                    impl_ssse3($($arg),*)
  290|      0|                } else if is_x86_feature_detected!("sse2") {
  291|      0|                    impl_sse2($($arg),*)
  292|       |                } else {
  293|      0|                    unimplemented!()
  294|       |                }
  295|       |            }
  296|  29.2k|        }
_RNvNvNtCslWipVVScnoQ_11rand_chacha4guts11refill_wide9impl_avx2:
  255|  29.2k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  29.2k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  29.2k|                _mm256_zeroupper();
  258|  29.2k|                ret
  259|  29.2k|            }
_RNvNvNtCslWipVVScnoQ_11rand_chacha4guts11init_chacha8impl_avx:
  338|    115|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|    115|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|    115|            }
_RNvXs2_NtCsf8HyAzZvOrI_10ppv_lite866x86_64NtB5_14vec128_storageINtNtCs9nhK3FOW46N_4core7convert4FromAmj4_E4from:
  130|    115|    fn from(u32x4: [u32; 4]) -> Self {
  131|    115|        vec128_storage { u32x4 }
  132|    115|    }

_RNvXs10_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes14unsafe_read_leCslWipVVScnoQ_11rand_chacha:
   79|    230|            unsafe fn unsafe_read_le(input: &[u8]) -> Self {
   80|    230|                assert_eq!(input.len(), 16);
   81|    230|                Self::new(_mm_loadu_si128(input.as_ptr() as *const _))
   82|    230|            }
_RNvXsf_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E8to_lanesCslWipVVScnoQ_11rand_chacha:
 1611|   117k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 4] {
 1612|   117k|            let [a, b] = self.0[0].to_lanes();
 1613|   117k|            let [c, d] = self.0[1].to_lanes();
 1614|   117k|            [a, b, c, d]
 1615|   117k|        }
_RNvMsZ_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIE3newCslWipVVScnoQ_11rand_chacha:
   64|  1.63M|            fn new(x: __m128i) -> Self {
   65|  1.63M|                $vec {
   66|  1.63M|                    x,
   67|  1.63M|                    s3: PhantomData,
   68|  1.63M|                    s4: PhantomData,
   69|  1.63M|                    ni: PhantomData,
   70|  1.63M|                }
   71|  1.63M|            }
_RNvXs0_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types5StoreNtB9_14vec256_storageE6unpackCslWipVVScnoQ_11rand_chacha:
 1402|  58.5k|        unsafe fn unpack(p: vec256_storage) -> Self {
 1403|  58.5k|            Self::new(p.avx)
 1404|  58.5k|        }
_RNvXs2_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E10from_lanesCslWipVVScnoQ_11rand_chacha:
 1439|   234k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 2]) -> Self {
 1440|   234k|            Self::new(unsafe { _mm256_setr_m128i(x[0].x, x[1].x) })
 1441|   234k|        }
_RNvXsc_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words3012CslWipVVScnoQ_11rand_chacha:
 1590|   702k|        fn shuffle_lane_words3012(self) -> Self {
 1591|   702k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0011_1001) })
 1592|   702k|        }
_RNvXsl_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE7extractCslWipVVScnoQ_11rand_chacha:
  519|   117k|    fn extract(self, i: u32) -> u32 {
  520|   117k|        self.to_lanes()[i as usize]
  521|   117k|    }
_RNvXsX_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types5StoreNtB7_14vec128_storageE6unpackCslWipVVScnoQ_11rand_chacha:
   52|   263k|            unsafe fn unpack(x: vec128_storage) -> Self {
   53|   263k|                Self::new(x.sse2)
   54|   263k|            }
_RNvXs6_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right24CslWipVVScnoQ_11rand_chacha:
 1470|   702k|            fn $name(self) -> Self {
 1471|   702k|                Self::new(unsafe {
 1472|   702k|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|   702k|                })
 1474|   702k|            }
_RNvXsc_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words2301CslWipVVScnoQ_11rand_chacha:
 1586|   702k|        fn shuffle_lane_words2301(self) -> Self {
 1587|   702k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0100_1110) })
 1588|   702k|        }
_RNvXsr_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs9nhK3FOW46N_4core3ops3bit6BitXor6bitxorCslWipVVScnoQ_11rand_chacha:
 1543|  2.80M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  2.80M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  2.80M|                }
_RNvXs10_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes8write_leCslWipVVScnoQ_11rand_chacha:
   89|   468k|            fn write_le(self, out: &mut [u8]) {
   90|   468k|                assert_eq!(out.len(), 16);
   91|   468k|                unsafe { _mm_storeu_si128(out.as_mut_ptr() as *mut _, self.x) }
   92|   468k|            }
_RNvXsv_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs9nhK3FOW46N_4core3ops5arith3Add3addCslWipVVScnoQ_11rand_chacha:
 1543|  2.80M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  2.80M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  2.80M|                }
_RNvXsq_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs9nhK3FOW46N_4core3ops5arith9AddAssign10add_assignCslWipVVScnoQ_11rand_chacha:
 1527|  2.80M|                fn $assign_fn(&mut self, rhs: Self) {
 1528|  2.80M|                    *self = self.$bin_fn(rhs);
 1529|  2.80M|                }
_RNvXs2_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E8to_lanesCslWipVVScnoQ_11rand_chacha:
 1430|   234k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 2] {
 1431|   234k|            unsafe {
 1432|   234k|                [
 1433|   234k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 0)),
 1434|   234k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 1)),
 1435|   234k|                ]
 1436|   234k|            }
 1437|   234k|        }
_RNvXs6_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E10from_lanesCslWipVVScnoQ_11rand_chacha:
  331|  29.2k|    fn from_lanes(xs: [u32; 4]) -> Self {
  332|  29.2k|        unsafe {
  333|  29.2k|            let mut x = _mm_cvtsi64_si128((xs[0] as u64 | ((xs[1] as u64) << 32)) as i64);
  334|  29.2k|            x = _mm_insert_epi64(x, (xs[2] as u64 | ((xs[3] as u64) << 32)) as i64, 1);
  335|  29.2k|            Self::new(x)
  336|  29.2k|        }
  337|  29.2k|    }
_RNvXs1R_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtNtCs9nhK3FOW46N_4core3ops5arith3Add3addCslWipVVScnoQ_11rand_chacha:
   18|   468k|            fn $fn(self, rhs: Self) -> Self::Output {
   19|   468k|                Self::new(unsafe { $impl_fn(self.x, rhs.x) })
   20|   468k|            }
_RNvXsl_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE6insertCslWipVVScnoQ_11rand_chacha:
  523|   409k|    fn insert(self, v: u32, i: u32) -> Self {
  524|   409k|        Self::new(unsafe {
  525|   409k|            match i {
  526|   204k|                0 => _mm_insert_epi32(self.x, v as i32, 0),
  527|   204k|                1 => _mm_insert_epi32(self.x, v as i32, 1),
  528|      0|                2 => _mm_insert_epi32(self.x, v as i32, 2),
  529|      0|                3 => _mm_insert_epi32(self.x, v as i32, 3),
  530|      0|                _ => unreachable!(),
  531|       |            }
  532|       |        })
  533|   409k|    }
_RNvXs6_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right25CslWipVVScnoQ_11rand_chacha:
 1480|   702k|            fn $name(self) -> Self {
 1481|   702k|                Self::new(unsafe {
 1482|   702k|                    _mm256_or_si256(
 1483|   702k|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|   702k|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|   702k|                    )
 1486|   702k|                })
 1487|   702k|            }
_RNvXs6_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right16CslWipVVScnoQ_11rand_chacha:
 1470|   702k|            fn $name(self) -> Self {
 1471|   702k|                Self::new(unsafe {
 1472|   702k|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|   702k|                })
 1474|   702k|            }
_RNvXs6_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right20CslWipVVScnoQ_11rand_chacha:
 1480|   702k|            fn $name(self) -> Self {
 1481|   702k|                Self::new(unsafe {
 1482|   702k|                    _mm256_or_si256(
 1483|   702k|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|   702k|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|   702k|                    )
 1486|   702k|                })
 1487|   702k|            }
_RNvXsc_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words1230CslWipVVScnoQ_11rand_chacha:
 1582|   702k|        fn shuffle_lane_words1230(self) -> Self {
 1583|   702k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b1001_0011) })
 1584|   702k|        }
_RNvXse_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types5StoreNtB9_14vec512_storageE6unpackCslWipVVScnoQ_11rand_chacha:
 1602|  29.2k|        unsafe fn unpack(p: vec512_storage) -> Self {
 1603|  29.2k|            Self::new([
 1604|  29.2k|                u32x4x2_avx2::unpack(p.avx[0]),
 1605|  29.2k|                u32x4x2_avx2::unpack(p.avx[1]),
 1606|  29.2k|            ])
 1607|  29.2k|        }
_RNvXsf_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E10from_lanesCslWipVVScnoQ_11rand_chacha:
 1617|   117k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 4]) -> Self {
 1618|   117k|            let ab = u32x4x2_avx2::from_lanes([x[0], x[1]]);
 1619|   117k|            let cd = u32x4x2_avx2::from_lanes([x[2], x[3]]);
 1620|   117k|            Self::new([ab, cd])
 1621|   117k|        }
_RNvMNtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB2_12u32x4x2_avx2NtB6_4NoNIE3newCslWipVVScnoQ_11rand_chacha:
 1394|  10.8M|        fn new(x: __m256i) -> Self {
 1395|  10.8M|            Self { x, ni: PhantomData }
 1396|  10.8M|        }
_RNvXs6_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E8to_lanesCslWipVVScnoQ_11rand_chacha:
  323|   117k|    fn to_lanes(self) -> [u32; 4] {
  324|   117k|        unsafe {
  325|   117k|            let x = _mm_cvtsi128_si64(self.x) as u64;
  326|   117k|            let y = _mm_extract_epi64(self.x, 1) as u64;
  327|   117k|            [x as u32, (x >> 32) as u32, y as u32, (y >> 32) as u32]
  328|   117k|        }
  329|   117k|    }
_RNvXsY_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2NtB7_14vec128_storageINtNtCs9nhK3FOW46N_4core7convert4FromINtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEE4fromCslWipVVScnoQ_11rand_chacha:
   58|  29.4k|            fn from(x: $vec<S3, S4, NI>) -> Self {
   59|  29.4k|                vec128_storage { sse2: x.x }
   60|  29.4k|            }
_RNvXsj_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2NtB9_14vec512_storageINtNtCs9nhK3FOW46N_4core7convert4FromINtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EE4fromCslWipVVScnoQ_11rand_chacha:
 1683|  29.2k|        fn from(x: u32x4x4_avx2<NI>) -> Self {
 1684|  29.2k|            Self {
 1685|  29.2k|                avx: [
 1686|  29.2k|                    vec256_storage { avx: x.0[0].x },
 1687|  29.2k|                    vec256_storage { avx: x.0[1].x },
 1688|  29.2k|                ],
 1689|  29.2k|            }
 1690|  29.2k|        }

_RNvMNtCsdBczmAo6fNM_9quick_xml8encodingNtB2_7Decoder4utf8:
   45|  46.4k|    pub(crate) fn utf8() -> Self {
   46|  46.4k|        Decoder {
   47|  46.4k|            #[cfg(feature = "encoding")]
   48|  46.4k|            encoding: UTF_8,
   49|  46.4k|        }
   50|  46.4k|    }
_RNvMs_NtCsdBczmAo6fNM_9quick_xml8encodingNtB4_7Decoder6decode:
   82|  2.53M|    pub fn decode<'b>(&self, bytes: &'b [u8]) -> Result<Cow<'b, str>> {
   83|       |        #[cfg(not(feature = "encoding"))]
   84|  2.53M|        let decoded = Ok(Cow::Borrowed(std::str::from_utf8(bytes)?));
   85|       |
   86|       |        #[cfg(feature = "encoding")]
   87|       |        let decoded = decode(bytes, self.encoding);
   88|       |
   89|  2.17M|        decoded
   90|  2.53M|    }

_RNvXs1_NtCsdBczmAo6fNM_9quick_xml6errorsNtB5_5ErrorINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_7escapei11EscapeErrorE4fromCsi53KuwE5jZG_7rdf_xml:
   97|  40.8k|    fn from(error: EscapeError) -> Error {
   98|  40.8k|        Error::EscapeError(error)
   99|  40.8k|    }
_RNvXs1_NtCsdBczmAo6fNM_9quick_xml6errorsNtB5_5ErrorINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_7escapei11EscapeErrorE4fromB7_:
   97|  39.1k|    fn from(error: EscapeError) -> Error {
   98|  39.1k|        Error::EscapeError(error)
   99|  39.1k|    }
_RNvXs_NtCsdBczmAo6fNM_9quick_xml6errorsNtB4_5ErrorINtNtCs9nhK3FOW46N_4core7convert4FromNtNtNtBR_3str5error9Utf8ErrorE4fromB6_:
   81|   361k|    fn from(error: Utf8Error) -> Error {
   82|   361k|        Error::NonDecodable(Some(error))
   83|   361k|    }
_RNvXs2_NtCsdBczmAo6fNM_9quick_xml6errorsNtB5_5ErrorINtNtCs9nhK3FOW46N_4core7convert4FromNtNtNtB7_6events10attributes9AttrErrorE4fromB7_:
  104|  4.04k|    fn from(error: AttrError) -> Self {
  105|  4.04k|        Error::InvalidAttr(error)
  106|  4.04k|    }

_RNCINvNtCsdBczmAo6fNM_9quick_xml7escapei13unescape_withNCNvMs2_NtCs2FOzy0wGkcs_8oxrdfxml6parserINtBZ_12RdfXmlReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE16parse_text_event0E0Csi53KuwE5jZG_7rdf_xml:
  174|   170k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
_RNCINvNtCsdBczmAo6fNM_9quick_xml7escapei13unescape_withNCNvMs2_NtCs2FOzy0wGkcs_8oxrdfxml6parserINtBZ_12RdfXmlReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE17convert_attribute0E0Csi53KuwE5jZG_7rdf_xml:
  174|  54.7k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
_RINvNtCsdBczmAo6fNM_9quick_xml7escapei13unescape_withNCNvMs2_NtCs2FOzy0wGkcs_8oxrdfxml6parserINtBX_12RdfXmlReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE16parse_text_event0ECsi53KuwE5jZG_7rdf_xml:
  162|   721k|pub fn unescape_with<'input, 'entity, F>(
  163|   721k|    raw: &'input str,
  164|   721k|    mut resolve_entity: F,
  165|   721k|) -> Result<Cow<'input, str>, EscapeError>
  166|   721k|where
  167|   721k|    // the lifetime of the output comes from a capture or is `'static`
  168|   721k|    F: FnMut(&str) -> Option<&'entity str>,
  169|   721k|{
  170|   721k|    let bytes = raw.as_bytes();
  171|   721k|    let mut unescaped = None;
  172|   721k|    let mut last_end = 0;
  173|   721k|    let mut iter = memchr2_iter(b'&', b';', bytes);
  174|   778k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
  175|  90.8k|        match iter.next() {
  176|  79.7k|            Some(end) if bytes[end] == b';' => {
  177|  77.0k|                // append valid data
  178|  77.0k|                if unescaped.is_none() {
  179|  37.5k|                    unescaped = Some(String::with_capacity(raw.len()));
  180|  39.4k|                }
  181|  77.0k|                let unescaped = unescaped.as_mut().expect("initialized");
  182|  77.0k|                unescaped.push_str(&raw[last_end..start]);
  183|  77.0k|
  184|  77.0k|                // search for character correctness
  185|  77.0k|                let pat = &raw[start + 1..end];
  186|  77.0k|                if let Some(entity) = pat.strip_prefix('#') {
  187|  7.36k|                    let codepoint = parse_number(entity, start..end)?;
  188|  4.66k|                    unescaped.push_str(codepoint.encode_utf8(&mut [0u8; 4]));
  189|  69.6k|                } else if let Some(value) = named_entity(pat) {
  190|  52.3k|                    unescaped.push_str(value);
  191|  52.3k|                } else if let Some(value) = resolve_entity(pat) {
  192|      0|                    unescaped.push_str(value);
  193|      0|                } else {
  194|  17.3k|                    return Err(EscapeError::UnrecognizedSymbol(
  195|  17.3k|                        start + 1..end,
  196|  17.3k|                        pat.to_string(),
  197|  17.3k|                    ));
  198|       |                }
  199|       |
  200|  56.9k|                last_end = end + 1;
  201|       |            }
  202|  13.8k|            _ => return Err(EscapeError::UnterminatedEntity(start..raw.len())),
  203|       |        }
  204|       |    }
  205|       |
  206|   687k|    if let Some(mut unescaped) = unescaped {
  207|  17.2k|        if let Some(raw) = raw.get(last_end..) {
  208|  17.2k|            unescaped.push_str(raw);
  209|  17.2k|        }
  210|  17.2k|        Ok(Cow::Owned(unescaped))
  211|       |    } else {
  212|   670k|        Ok(Cow::Borrowed(raw))
  213|       |    }
  214|   721k|}
_RINvNtCsdBczmAo6fNM_9quick_xml7escapei13unescape_withNCNvMs2_NtCs2FOzy0wGkcs_8oxrdfxml6parserINtBX_12RdfXmlReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE15resolve_ns_name0ECsi53KuwE5jZG_7rdf_xml:
  162|  1.13M|pub fn unescape_with<'input, 'entity, F>(
  163|  1.13M|    raw: &'input str,
  164|  1.13M|    mut resolve_entity: F,
  165|  1.13M|) -> Result<Cow<'input, str>, EscapeError>
  166|  1.13M|where
  167|  1.13M|    // the lifetime of the output comes from a capture or is `'static`
  168|  1.13M|    F: FnMut(&str) -> Option<&'entity str>,
  169|  1.13M|{
  170|  1.13M|    let bytes = raw.as_bytes();
  171|  1.13M|    let mut unescaped = None;
  172|  1.13M|    let mut last_end = 0;
  173|  1.13M|    let mut iter = memchr2_iter(b'&', b';', bytes);
  174|  16.4M|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
  175|  15.3M|        match iter.next() {
  176|  15.3M|            Some(end) if bytes[end] == b';' => {
  177|  15.3M|                // append valid data
  178|  15.3M|                if unescaped.is_none() {
  179|   185k|                    unescaped = Some(String::with_capacity(raw.len()));
  180|  15.1M|                }
  181|  15.3M|                let unescaped = unescaped.as_mut().expect("initialized");
  182|  15.3M|                unescaped.push_str(&raw[last_end..start]);
  183|  15.3M|
  184|  15.3M|                // search for character correctness
  185|  15.3M|                let pat = &raw[start + 1..end];
  186|  15.3M|                if let Some(entity) = pat.strip_prefix('#') {
  187|  71.6k|                    let codepoint = parse_number(entity, start..end)?;
  188|  53.8k|                    unescaped.push_str(codepoint.encode_utf8(&mut [0u8; 4]));
  189|  15.2M|                } else if let Some(value) = named_entity(pat) {
  190|  15.2M|                    unescaped.push_str(value);
  191|  15.2M|                } else if let Some(value) = resolve_entity(pat) {
  192|      0|                    unescaped.push_str(value);
  193|      0|                } else {
  194|  19.4k|                    return Err(EscapeError::UnrecognizedSymbol(
  195|  19.4k|                        start + 1..end,
  196|  19.4k|                        pat.to_string(),
  197|  19.4k|                    ));
  198|       |                }
  199|       |
  200|  15.3M|                last_end = end + 1;
  201|       |            }
  202|  3.63k|            _ => return Err(EscapeError::UnterminatedEntity(start..raw.len())),
  203|       |        }
  204|       |    }
  205|       |
  206|  1.09M|    if let Some(mut unescaped) = unescaped {
  207|   147k|        if let Some(raw) = raw.get(last_end..) {
  208|   147k|            unescaped.push_str(raw);
  209|   147k|        }
  210|   147k|        Ok(Cow::Owned(unescaped))
  211|       |    } else {
  212|   949k|        Ok(Cow::Borrowed(raw))
  213|       |    }
  214|  1.13M|}
_RINvNtCsdBczmAo6fNM_9quick_xml7escapei13unescape_withNCNvMs2_NtCs2FOzy0wGkcs_8oxrdfxml6parserINtBX_12RdfXmlReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE17convert_attribute0ECsi53KuwE5jZG_7rdf_xml:
  162|   250k|pub fn unescape_with<'input, 'entity, F>(
  163|   250k|    raw: &'input str,
  164|   250k|    mut resolve_entity: F,
  165|   250k|) -> Result<Cow<'input, str>, EscapeError>
  166|   250k|where
  167|   250k|    // the lifetime of the output comes from a capture or is `'static`
  168|   250k|    F: FnMut(&str) -> Option<&'entity str>,
  169|   250k|{
  170|   250k|    let bytes = raw.as_bytes();
  171|   250k|    let mut unescaped = None;
  172|   250k|    let mut last_end = 0;
  173|   250k|    let mut iter = memchr2_iter(b'&', b';', bytes);
  174|   266k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
  175|  20.9k|        match iter.next() {
  176|  19.8k|            Some(end) if bytes[end] == b';' => {
  177|  19.4k|                // append valid data
  178|  19.4k|                if unescaped.is_none() {
  179|  10.4k|                    unescaped = Some(String::with_capacity(raw.len()));
  180|  10.4k|                }
  181|  19.4k|                let unescaped = unescaped.as_mut().expect("initialized");
  182|  19.4k|                unescaped.push_str(&raw[last_end..start]);
  183|  19.4k|
  184|  19.4k|                // search for character correctness
  185|  19.4k|                let pat = &raw[start + 1..end];
  186|  19.4k|                if let Some(entity) = pat.strip_prefix('#') {
  187|  9.28k|                    let codepoint = parse_number(entity, start..end)?;
  188|  9.04k|                    unescaped.push_str(codepoint.encode_utf8(&mut [0u8; 4]));
  189|  10.2k|                } else if let Some(value) = named_entity(pat) {
  190|  6.62k|                    unescaped.push_str(value);
  191|  6.62k|                } else if let Some(value) = resolve_entity(pat) {
  192|      0|                    unescaped.push_str(value);
  193|      0|                } else {
  194|  3.57k|                    return Err(EscapeError::UnrecognizedSymbol(
  195|  3.57k|                        start + 1..end,
  196|  3.57k|                        pat.to_string(),
  197|  3.57k|                    ));
  198|       |                }
  199|       |
  200|  15.6k|                last_end = end + 1;
  201|       |            }
  202|  1.44k|            _ => return Err(EscapeError::UnterminatedEntity(start..raw.len())),
  203|       |        }
  204|       |    }
  205|       |
  206|   245k|    if let Some(mut unescaped) = unescaped {
  207|  5.92k|        if let Some(raw) = raw.get(last_end..) {
  208|  5.92k|            unescaped.push_str(raw);
  209|  5.92k|        }
  210|  5.92k|        Ok(Cow::Owned(unescaped))
  211|       |    } else {
  212|   239k|        Ok(Cow::Borrowed(raw))
  213|       |    }
  214|   250k|}
_RNCINvNtCsdBczmAo6fNM_9quick_xml7escapei13unescape_withNCNvMs2_NtCs2FOzy0wGkcs_8oxrdfxml6parserINtBZ_12RdfXmlReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE15resolve_ns_name0E0Csi53KuwE5jZG_7rdf_xml:
  174|  15.6M|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
_RNvNtCsdBczmAo6fNM_9quick_xml7escapei6escape:
   74|   488k|pub fn escape(raw: &str) -> Cow<str> {
   75|   488k|    _escape(raw, |ch| matches!(ch, b'<' | b'>' | b'&' | b'\'' | b'\"'))
   76|   488k|}
_RNvNtCsdBczmAo6fNM_9quick_xml7escapei12parse_number:
 1694|  88.2k|fn parse_number(bytes: &str, range: Range<usize>) -> Result<char, EscapeError> {
 1695|  88.2k|    let code = if let Some(hex_digits) = bytes.strip_prefix('x') {
 1696|  7.58k|        parse_hexadecimal(hex_digits)
 1697|       |    } else {
 1698|  80.7k|        parse_decimal(bytes)
 1699|  14.1k|    }?;
 1700|  74.1k|    if code == 0 {
 1701|  5.39k|        return Err(EscapeError::EntityWithNull(range));
 1702|  68.7k|    }
 1703|  68.7k|    match std::char::from_u32(code) {
 1704|  67.5k|        Some(c) => Ok(c),
 1705|  1.20k|        None => Err(EscapeError::InvalidCodepoint(code)),
 1706|       |    }
 1707|  88.2k|}
_RNvNtCsdBczmAo6fNM_9quick_xml7escapei13parse_decimal:
 1727|  80.7k|fn parse_decimal(bytes: &str) -> Result<u32, EscapeError> {
 1728|  80.7k|    // maximum code is 0x10FFFF = 1114111 => 7 characters
 1729|  80.7k|    if bytes.len() > 7 {
 1730|  1.10k|        return Err(EscapeError::TooLongDecimal);
 1731|  79.6k|    }
 1732|  79.6k|    let mut code = 0;
 1733|   358k|    for b in bytes.bytes() {
 1734|   358k|        code *= 10;
 1735|   358k|        code += match b {
 1736|   354k|            b'0'..=b'9' => b - b'0',
 1737|  8.25k|            b => return Err(EscapeError::InvalidDecimal(b as char)),
 1738|       |        } as u32;
 1739|       |    }
 1740|  71.3k|    Ok(code)
 1741|  80.7k|}
_RNCINvNtCsdBczmAo6fNM_9quick_xml7escapei7__escapeNCNvB4_6escape0E0B6_:
  102|  58.4M|    while let Some(i) = iter.position(|&b| escape_chars(b)) {
_RNvNtCsdBczmAo6fNM_9quick_xml7escapei17parse_hexadecimal:
 1709|  7.58k|fn parse_hexadecimal(bytes: &str) -> Result<u32, EscapeError> {
 1710|  7.58k|    // maximum code is 0x10FFFF => 6 characters
 1711|  7.58k|    if bytes.len() > 6 {
 1712|  1.87k|        return Err(EscapeError::TooLongHexadecimal);
 1713|  5.71k|    }
 1714|  5.71k|    let mut code = 0;
 1715|  8.19k|    for b in bytes.bytes() {
 1716|  8.19k|        code <<= 4;
 1717|  8.19k|        code += match b {
 1718|  8.17k|            b'0'..=b'9' => b - b'0',
 1719|  5.39k|            b'a'..=b'f' => b - b'a' + 10,
 1720|  4.26k|            b'A'..=b'F' => b - b'A' + 10,
 1721|  2.87k|            b => return Err(EscapeError::InvalidHexadecimal(b as char)),
 1722|       |        } as u32;
 1723|       |    }
 1724|  2.83k|    Ok(code)
 1725|  7.58k|}
_RINvNtCsdBczmAo6fNM_9quick_xml7escapei7__escapeNCNvB2_6escape0EB4_:
   97|   488k|pub(crate) fn _escape<F: Fn(u8) -> bool>(raw: &str, escape_chars: F) -> Cow<str> {
   98|   488k|    let bytes = raw.as_bytes();
   99|   488k|    let mut escaped = None;
  100|   488k|    let mut iter = bytes.iter();
  101|   488k|    let mut pos = 0;
  102|  15.7M|    while let Some(i) = iter.position(|&b| escape_chars(b)) {
  103|  15.2M|        if escaped.is_none() {
  104|   112k|            escaped = Some(Vec::with_capacity(raw.len()));
  105|  15.1M|        }
  106|  15.2M|        let escaped = escaped.as_mut().expect("initialized");
  107|  15.2M|        let new_pos = pos + i;
  108|  15.2M|        escaped.extend_from_slice(&bytes[pos..new_pos]);
  109|  15.2M|        match bytes[new_pos] {
  110|  5.54k|            b'<' => escaped.extend_from_slice(b"&lt;"),
  111|  30.7k|            b'>' => escaped.extend_from_slice(b"&gt;"),
  112|  15.2M|            b'\'' => escaped.extend_from_slice(b"&apos;"),
  113|  16.8k|            b'&' => escaped.extend_from_slice(b"&amp;"),
  114|  9.29k|            b'"' => escaped.extend_from_slice(b"&quot;"),
  115|       |
  116|       |            // This set of escapes handles characters that should be escaped
  117|       |            // in elements of xs:lists, because those characters works as
  118|       |            // delimiters of list elements
  119|      0|            b'\t' => escaped.extend_from_slice(b"&#9;"),
  120|      0|            b'\n' => escaped.extend_from_slice(b"&#10;"),
  121|      0|            b'\r' => escaped.extend_from_slice(b"&#13;"),
  122|      0|            b' ' => escaped.extend_from_slice(b"&#32;"),
  123|      0|            _ => unreachable!(
  124|      0|                "Only '<', '>','\', '&', '\"', '\\t', '\\r', '\\n', and ' ' are escaped"
  125|      0|            ),
  126|       |        }
  127|  15.2M|        pos = new_pos + 1;
  128|       |    }
  129|       |
  130|   488k|    if let Some(mut escaped) = escaped {
  131|   112k|        if let Some(raw) = bytes.get(pos..) {
  132|   112k|            escaped.extend_from_slice(raw);
  133|   112k|        }
  134|       |        // SAFETY: we operate on UTF-8 input and search for an one byte chars only,
  135|       |        // so all slices that was put to the `escaped` is a valid UTF-8 encoded strings
  136|       |        // TODO: Can be replaced with `unsafe { String::from_utf8_unchecked() }`
  137|       |        // if unsafe code will be allowed
  138|   112k|        Cow::Owned(String::from_utf8(escaped).unwrap())
  139|       |    } else {
  140|   376k|        Cow::Borrowed(raw)
  141|       |    }
  142|   488k|}
_RNCNvNtCsdBczmAo6fNM_9quick_xml7escapei6escape0B5_:
   75|  58.4M|    _escape(raw, |ch| matches!(ch, b'<' | b'>' | b'&' | b'\'' | b'\"'))
_RNvNtCsdBczmAo6fNM_9quick_xml7escapei12named_entity:
  217|  15.3M|fn named_entity(name: &str) -> Option<&str> {
  218|       |    // match over strings are not allowed in const functions
  219|  15.3M|    let s = match name.as_bytes() {
  220|  15.3M|        b"lt" => "<",
  221|  27.7k|        b"gt" => ">",
  222|  15.3M|        b"amp" => "&",
  223|  15.2M|        b"apos" => "'",
  224|  14.9k|        b"quot" => "\"",
  225|  40.3k|        _ => return None,
  226|       |    };
  227|  15.3M|    Some(s)
  228|  15.3M|}

_RINvMNtNtCsdBczmAo6fNM_9quick_xml6events10attributesNtB3_9Attribute30decode_and_unescape_value_withINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShENCNvMs2_NtCs2FOzy0wGkcs_8oxrdfxml6parserINtB2I_12RdfXmlReaderB1z_E17convert_attribute0ECsi53KuwE5jZG_7rdf_xml:
   95|   254k|    pub fn decode_and_unescape_value_with<'entity, B>(
   96|   254k|        &self,
   97|   254k|        reader: &Reader<B>,
   98|   254k|        resolve_entity: impl FnMut(&str) -> Option<&'entity str>,
   99|   254k|    ) -> XmlResult<Cow<'a, str>> {
  100|   254k|        let decoded = match &self.value {
  101|   254k|            Cow::Borrowed(bytes) => reader.decoder().decode(bytes)?,
  102|       |            // Convert to owned, because otherwise Cow will be bound with wrong lifetime
  103|      0|            Cow::Owned(bytes) => reader.decoder().decode(bytes)?.into_owned().into(),
  104|       |        };
  105|       |
  106|   250k|        match unescape_with(&decoded, resolve_entity)? {
  107|       |            // Because result is borrowed, no replacements was done and we can use original string
  108|   239k|            Cow::Borrowed(_) => Ok(decoded),
  109|  5.92k|            Cow::Owned(s) => Ok(s.into()),
  110|       |        }
  111|   254k|    }
_RNvXs4_NtNtCsdBczmAo6fNM_9quick_xml6events10attributesNtB5_10AttributesNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCsi53KuwE5jZG_7rdf_xml:
  231|  1.36M|    fn next(&mut self) -> Option<Self::Item> {
  232|  1.36M|        match self.state.next(self.bytes) {
  233|   798k|            None => None,
  234|   531k|            Some(Ok(a)) => Some(Ok(a.map(|range| &self.bytes[range]).into())),
  235|  36.8k|            Some(Err(e)) => Some(Err(e)),
  236|       |        }
  237|  1.36M|    }
_RNCNvMsc_NtNtCsdBczmAo6fNM_9quick_xml6events10attributesNtB7_9IterState4nexts0_0Bb_:
  677|   520k|            Some((e, _)) => match iter.find(|(_, &b)| !is_whitespace(b)) {
_RNvMs9_NtNtCsdBczmAo6fNM_9quick_xml6events10attributesINtB5_4AttrRShE3keyB9_:
  419|  1.14M|    pub fn key(&self) -> QName<'a> {
  420|  1.14M|        QName(match self {
  421|  1.14M|            Attr::DoubleQ(key, _) => key,
  422|  1.01k|            Attr::SingleQ(key, _) => key,
  423|      0|            Attr::Empty(key) => key,
  424|      0|            Attr::Unquoted(key, _) => key,
  425|       |        })
  426|  1.14M|    }
_RNvXs4_NtNtCsdBczmAo6fNM_9quick_xml6events10attributesNtB5_10AttributesNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextB9_:
  231|  1.72M|    fn next(&mut self) -> Option<Self::Item> {
  232|  1.72M|        match self.state.next(self.bytes) {
  233|  1.01M|            None => None,
  234|   617k|            Some(Ok(a)) => Some(Ok(a.map(|range| &self.bytes[range]).into())),
  235|  97.3k|            Some(Err(e)) => Some(Err(e)),
  236|       |        }
  237|  1.72M|    }
_RNvMsc_NtNtCsdBczmAo6fNM_9quick_xml6events10attributesNtB5_9IterState7recover:
  533|  3.09M|    fn recover(&self, slice: &[u8]) -> Option<usize> {
  534|  3.09M|        match self.state {
  535|      0|            State::Done => None,
  536|  3.09M|            State::Next(offset) => Some(offset),
  537|      0|            State::SkipValue(offset) => self.skip_value(slice, offset),
  538|      0|            State::SkipEqValue(offset) => self.skip_eq_value(slice, offset),
  539|       |        }
  540|  3.09M|    }
_RNvXs2_NtNtCsdBczmAo6fNM_9quick_xml6events10attributesNtB5_9AttributeINtNtCs9nhK3FOW46N_4core7convert4FromINtB5_4AttrRShEE4fromB9_:
  171|  1.14M|    fn from(attr: Attr<&'a [u8]>) -> Self {
  172|  1.14M|        Self {
  173|  1.14M|            key: attr.key(),
  174|  1.14M|            value: Cow::Borrowed(attr.value()),
  175|  1.14M|        }
  176|  1.14M|    }
_RNvMs3_NtNtCsdBczmAo6fNM_9quick_xml6events10attributesNtB5_10Attributes11with_checks:
  221|  1.14M|    pub fn with_checks(&mut self, val: bool) -> &mut Attributes<'a> {
  222|  1.14M|        self.state.check_duplicates = val;
  223|  1.14M|        self
  224|  1.14M|    }
_RNvXs1_NtNtCsdBczmAo6fNM_9quick_xml6events10attributesNtB5_9AttributeINtNtCs9nhK3FOW46N_4core7convert4FromTReB1H_EE4from:
  158|   441k|    fn from(val: (&'a str, &'a str)) -> Attribute<'a> {
  159|   441k|        Attribute {
  160|   441k|            key: QName(val.0.as_bytes()),
  161|   441k|            value: match escape(val.1) {
  162|   343k|                Cow::Borrowed(s) => Cow::Borrowed(s.as_bytes()),
  163|  98.2k|                Cow::Owned(s) => Cow::Owned(s.into_bytes()),
  164|       |            },
  165|       |        }
  166|   441k|    }
_RNvMs3_NtNtCsdBczmAo6fNM_9quick_xml6events10attributesNtB5_10Attributes4wrapB9_:
  198|  2.00M|    pub(crate) fn wrap(buf: &'a [u8], pos: usize, html: bool) -> Self {
  199|  2.00M|        Self {
  200|  2.00M|            bytes: buf,
  201|  2.00M|            state: IterState::new(pos, html),
  202|  2.00M|        }
  203|  2.00M|    }
_RNvMsc_NtNtCsdBczmAo6fNM_9quick_xml6events10attributesNtB5_9IterState3new:
  521|  2.00M|    pub fn new(offset: usize, html: bool) -> Self {
  522|  2.00M|        Self {
  523|  2.00M|            state: State::Next(offset),
  524|  2.00M|            html,
  525|  2.00M|            check_duplicates: true,
  526|  2.00M|            keys: Vec::new(),
  527|  2.00M|        }
  528|  2.00M|    }
_RNvMsc_NtNtCsdBczmAo6fNM_9quick_xml6events10attributesNtB5_9IterState20check_for_duplicatesB9_:
  603|  1.16M|    fn check_for_duplicates(
  604|  1.16M|        &mut self,
  605|  1.16M|        slice: &[u8],
  606|  1.16M|        key: Range<usize>,
  607|  1.16M|    ) -> Result<Range<usize>, AttrError> {
  608|  1.16M|        if self.check_duplicates {
  609|   535k|            if let Some(prev) = self
  610|   535k|                .keys
  611|   535k|                .iter()
  612|   535k|                .find(|r| slice[(*r).clone()] == slice[key.clone()])
  613|       |            {
  614|    451|                return Err(AttrError::Duplicated(key.start, prev.start));
  615|   535k|            }
  616|   535k|            self.keys.push(key.clone());
  617|   625k|        }
  618|  1.16M|        Ok(key)
  619|  1.16M|    }
_RNCNvMsc_NtNtCsdBczmAo6fNM_9quick_xml6events10attributesNtB7_9IterState20check_for_duplicates0Bb_:
  612|   216k|                .find(|r| slice[(*r).clone()] == slice[key.clone()])
_RNCNvMsc_NtNtCsdBczmAo6fNM_9quick_xml6events10attributesNtB7_9IterState4nexts1_0Bb_:
  725|  1.17M|        let (start_value, quote) = match iter.find(|(_, &b)| !is_whitespace(b)) {
_RNvMsc_NtNtCsdBczmAo6fNM_9quick_xml6events10attributesNtB5_9IterState8single_qB9_:
  643|  1.01k|    fn single_q(&mut self, key: Range<usize>, value: Range<usize>) -> Option<AttrResult> {
  644|  1.01k|        self.state = State::Next(value.end + 1); // +1 for `'`
  645|  1.01k|
  646|  1.01k|        Some(Ok(Attr::SingleQ(key, value)))
  647|  1.01k|    }
_RNvMsc_NtNtCsdBczmAo6fNM_9quick_xml6events10attributesNtB5_9IterState4next:
  649|  3.09M|    pub fn next(&mut self, slice: &[u8]) -> Option<AttrResult> {
  650|  3.09M|        let mut iter = match self.recover(slice) {
  651|  3.09M|            Some(offset) => (offset..).zip(slice[offset..].iter()),
  652|      0|            None => return None,
  653|       |        };
  654|       |
  655|       |        // Index where next key started
  656|  3.09M|        let start_key = match iter.find(|(_, &b)| !is_whitespace(b)) {
  657|       |            // Input: `    key`
  658|       |            //             ^
  659|  1.28M|            Some((s, _)) => s,
  660|       |            // Input: `    `
  661|       |            //             ^
  662|       |            None => {
  663|       |                // Because we reach end-of-input, stop iteration on next call
  664|  1.80M|                self.state = State::Done;
  665|  1.80M|                return None;
  666|       |            }
  667|       |        };
  668|       |        // Span of a key
  669|  1.28M|        let (key, offset) = match iter.find(|(_, &b)| b == b'=' || is_whitespace(b)) {
  670|       |            // Input: `    key=`
  671|       |            //             |  ^
  672|       |            //             s  e
  673|   957k|            Some((e, b'=')) => (start_key..e, e),
  674|       |
  675|       |            // Input: `    key `
  676|       |            //                ^
  677|   236k|            Some((e, _)) => match iter.find(|(_, &b)| !is_whitespace(b)) {
  678|       |                // Input: `    key  =`
  679|       |                //             |  | ^
  680|       |                //     start_key  e
  681|   203k|                Some((offset, b'=')) => (start_key..e, offset),
  682|       |                // Input: `    key  x`
  683|       |                //             |  | ^
  684|       |                //     start_key  e
  685|       |                // If HTML-like attributes is allowed, this is the result, otherwise error
  686|  30.2k|                Some((offset, _)) => {
  687|  30.2k|                    // In any case, recovering is not required
  688|  30.2k|                    self.state = State::Next(offset);
  689|  30.2k|                    return self.key_only(slice, start_key..e, offset);
  690|       |                }
  691|       |                // Input: `    key  `
  692|       |                //             |  | ^
  693|       |                //     start_key  e
  694|       |                // If HTML-like attributes is allowed, this is the result, otherwise error
  695|       |                None => {
  696|       |                    // Because we reach end-of-input, stop iteration on next call
  697|  3.23k|                    self.state = State::Done;
  698|  3.23k|                    return self.key_only(slice, start_key..e, slice.len());
  699|       |                }
  700|       |            },
  701|       |
  702|       |            // Input: `    key`
  703|       |            //             |  ^
  704|       |            //             s  e = len()
  705|       |            // If HTML-like attributes is allowed, this is the result, otherwise error
  706|       |            None => {
  707|       |                // Because we reach end-of-input, stop iteration on next call
  708|  88.4k|                self.state = State::Done;
  709|  88.4k|                let e = slice.len();
  710|  88.4k|                return self.key_only(slice, start_key..e, e);
  711|       |            }
  712|       |        };
  713|       |
  714|  1.16M|        let key = match self.check_for_duplicates(slice, key) {
  715|    451|            Err(e) => {
  716|    451|                self.state = State::SkipEqValue(offset);
  717|    451|                return Some(Err(e));
  718|       |            }
  719|  1.16M|            Ok(key) => key,
  720|       |        };
  721|       |
  722|       |        ////////////////////////////////////////////////////////////////////////
  723|       |
  724|       |        // Gets the position of quote and quote type
  725|  1.16M|        let (start_value, quote) = match iter.find(|(_, &b)| !is_whitespace(b)) {
  726|       |            // Input: `    key  =  "`
  727|       |            //                     ^
  728|  1.15M|            Some((s, b'"')) => (s + 1, b'"'),
  729|       |            // Input: `    key  =  '`
  730|       |            //                     ^
  731|  1.01k|            Some((s, b'\'')) => (s + 1, b'\''),
  732|       |
  733|       |            // Input: `    key  =  x`
  734|       |            //                     ^
  735|       |            // If HTML-like attributes is allowed, this is the start of the value
  736|      0|            Some((s, _)) if self.html => {
  737|       |                // We do not check validity of attribute value characters as required
  738|       |                // according to https://html.spec.whatwg.org/#unquoted. It can be done
  739|       |                // during validation phase
  740|      0|                let end = match iter.find(|(_, &b)| is_whitespace(b)) {
  741|       |                    // Input: `    key  =  value `
  742|       |                    //                     |    ^
  743|       |                    //                     s    e
  744|      0|                    Some((e, _)) => e,
  745|       |                    // Input: `    key  =  value`
  746|       |                    //                     |    ^
  747|       |                    //                     s    e = len()
  748|      0|                    None => slice.len(),
  749|       |                };
  750|      0|                self.state = State::Next(end);
  751|      0|                return Some(Ok(Attr::Unquoted(key, s..end)));
  752|       |            }
  753|       |            // Input: `    key  =  x`
  754|       |            //                     ^
  755|  6.30k|            Some((s, _)) => {
  756|  6.30k|                self.state = State::SkipValue(s);
  757|  6.30k|                return Some(Err(AttrError::UnquotedValue(s)));
  758|       |            }
  759|       |
  760|       |            // Input: `    key  =  `
  761|       |            //                     ^
  762|       |            None => {
  763|       |                // Because we reach end-of-input, stop iteration on next call
  764|  2.31k|                self.state = State::Done;
  765|  2.31k|                return Some(Err(AttrError::ExpectedValue(slice.len())));
  766|       |            }
  767|       |        };
  768|       |
  769|  1.15M|        match iter.find(|(_, &b)| b == quote) {
  770|       |            // Input: `    key  =  "   "`
  771|       |            //                         ^
  772|  1.14M|            Some((e, b'"')) => self.double_q(key, start_value..e),
  773|       |            // Input: `    key  =  '   '`
  774|       |            //                         ^
  775|  1.01k|            Some((e, _)) => self.single_q(key, start_value..e),
  776|       |
  777|       |            // Input: `    key  =  "   `
  778|       |            // Input: `    key  =  '   `
  779|       |            //                         ^
  780|       |            // Closing quote not found
  781|       |            None => {
  782|       |                // Because we reach end-of-input, stop iteration on next call
  783|  3.20k|                self.state = State::Done;
  784|  3.20k|                Some(Err(AttrError::ExpectedQuote(slice.len(), quote)))
  785|       |            }
  786|       |        }
  787|  3.09M|    }
_RNCNvMsc_NtNtCsdBczmAo6fNM_9quick_xml6events10attributesNtB7_9IterState4next0Bb_:
  656|  2.82M|        let start_key = match iter.find(|(_, &b)| !is_whitespace(b)) {
_RNCNvMsc_NtNtCsdBczmAo6fNM_9quick_xml6events10attributesNtB7_9IterState4nexts3_0Bb_:
  769|   274M|        match iter.find(|(_, &b)| b == quote) {
_RNCNvXs4_NtNtCsdBczmAo6fNM_9quick_xml6events10attributesNtB7_10AttributesNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0Bb_:
  234|  2.29M|            Some(Ok(a)) => Some(Ok(a.map(|range| &self.bytes[range]).into())),
_RNvMsc_NtNtCsdBczmAo6fNM_9quick_xml6events10attributesNtB5_9IterState8double_qB9_:
  636|  1.14M|    fn double_q(&mut self, key: Range<usize>, value: Range<usize>) -> Option<AttrResult> {
  637|  1.14M|        self.state = State::Next(value.end + 1); // +1 for `"`
  638|  1.14M|
  639|  1.14M|        Some(Ok(Attr::DoubleQ(key, value)))
  640|  1.14M|    }
_RNvMs9_NtNtCsdBczmAo6fNM_9quick_xml6events10attributesINtB5_4AttrRShE5valueB9_:
  432|  1.14M|    pub fn value(&self) -> &'a [u8] {
  433|  1.14M|        match self {
  434|  1.14M|            Attr::DoubleQ(_, value) => value,
  435|  1.01k|            Attr::SingleQ(_, value) => value,
  436|      0|            Attr::Empty(_) => &[],
  437|      0|            Attr::Unquoted(_, value) => value,
  438|       |        }
  439|  1.14M|    }
_RNCNvMsc_NtNtCsdBczmAo6fNM_9quick_xml6events10attributesNtB7_9IterState4nexts_0Bb_:
  669|  9.14M|        let (key, offset) = match iter.find(|(_, &b)| b == b'=' || is_whitespace(b)) {
_RNvMsc_NtNtCsdBczmAo6fNM_9quick_xml6events10attributesNtB5_9IterState8key_onlyB9_:
  627|   121k|    fn key_only(&mut self, slice: &[u8], key: Range<usize>, offset: usize) -> Option<AttrResult> {
  628|   121k|        Some(if self.html {
  629|      0|            self.check_for_duplicates(slice, key).map(Attr::Empty)
  630|       |        } else {
  631|   121k|            Err(AttrError::ExpectedEq(offset))
  632|       |        })
  633|   121k|    }
_RINvMs8_NtNtCsdBczmAo6fNM_9quick_xml6events10attributesINtB6_4AttrINtNtNtCs9nhK3FOW46N_4core3ops5range5RangejEE3mapRShNCNvXs4_B6_NtB6_10AttributesNtNtNtNtB19_4iter6traits8iterator8Iterator4next0EBa_:
  403|  1.14M|    pub fn map<U, F>(self, mut f: F) -> Attr<U>
  404|  1.14M|    where
  405|  1.14M|        F: FnMut(T) -> U,
  406|  1.14M|    {
  407|  1.14M|        match self {
  408|  1.14M|            Attr::DoubleQ(key, value) => Attr::DoubleQ(f(key), f(value)),
  409|  1.01k|            Attr::SingleQ(key, value) => Attr::SingleQ(f(key), f(value)),
  410|      0|            Attr::Empty(key) => Attr::Empty(f(key)),
  411|      0|            Attr::Unquoted(key, value) => Attr::Unquoted(f(key), f(value)),
  412|       |        }
  413|  1.14M|    }

_RINvMs4_NtCsdBczmAo6fNM_9quick_xml6eventsNtB6_8BytesEnd3newINtNtCsjOdcKtOMjJI_5alloc6borrow3CoweEECsi53KuwE5jZG_7rdf_xml:
  606|  33.0k|    pub fn new<C: Into<Cow<'a, str>>>(name: C) -> Self {
  607|  33.0k|        Self::wrap(str_cow_to_bytes(name))
  608|  33.0k|    }
_RINvMNtCsdBczmAo6fNM_9quick_xml6eventsNtB3_10BytesStart3newINtNtCsjOdcKtOMjJI_5alloc6borrow3CoweEECsi53KuwE5jZG_7rdf_xml:
   92|   225k|    pub fn new<C: Into<Cow<'a, str>>>(name: C) -> Self {
   93|   225k|        let buf = str_cow_to_bytes(name);
   94|   225k|        BytesStart {
   95|   225k|            name_len: buf.len(),
   96|   225k|            buf,
   97|   225k|        }
   98|   225k|    }
_RINvMs7_NtCsdBczmAo6fNM_9quick_xml6eventsNtB6_9BytesText12from_escapedINtNtCsjOdcKtOMjJI_5alloc6borrow3CoweEECsi53KuwE5jZG_7rdf_xml:
  693|  42.8k|    pub fn from_escaped<C: Into<Cow<'a, str>>>(content: C) -> Self {
  694|  42.8k|        Self::wrap(str_cow_to_bytes(content), Decoder::utf8())
  695|  42.8k|    }
_RINvMs7_NtCsdBczmAo6fNM_9quick_xml6eventsNtB6_9BytesText13unescape_withNCNvMs2_NtCs2FOzy0wGkcs_8oxrdfxml6parserINtB1f_12RdfXmlReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE16parse_text_event0ECsi53KuwE5jZG_7rdf_xml:
  741|  1.02M|    pub fn unescape_with<'entity>(
  742|  1.02M|        &self,
  743|  1.02M|        resolve_entity: impl FnMut(&str) -> Option<&'entity str>,
  744|  1.02M|    ) -> Result<Cow<'a, str>> {
  745|  1.02M|        let decoded = match &self.content {
  746|  1.02M|            Cow::Borrowed(bytes) => self.decoder.decode(bytes)?,
  747|       |            // Convert to owned, because otherwise Cow will be bound with wrong lifetime
  748|  2.19k|            Cow::Owned(bytes) => self.decoder.decode(bytes)?.into_owned().into(),
  749|       |        };
  750|       |
  751|   721k|        match unescape_with(&decoded, resolve_entity)? {
  752|       |            // Because result is borrowed, no replacements was done and we can use original string
  753|   670k|            Cow::Borrowed(_) => Ok(decoded),
  754|  17.2k|            Cow::Owned(s) => Ok(s.into()),
  755|       |        }
  756|  1.02M|    }
_RINvMs_NtCsdBczmAo6fNM_9quick_xml6eventsNtB5_10BytesStart14push_attributeNtNtB5_10attributes9AttributeECsi53KuwE5jZG_7rdf_xml:
  241|  7.66k|    pub fn push_attribute<'b, A>(&mut self, attr: A)
  242|  7.66k|    where
  243|  7.66k|        A: Into<Attribute<'b>>,
  244|  7.66k|    {
  245|  7.66k|        let a = attr.into();
  246|  7.66k|        let bytes = self.buf.to_mut();
  247|  7.66k|        bytes.push(b' ');
  248|  7.66k|        bytes.extend_from_slice(a.key.as_ref());
  249|  7.66k|        bytes.extend_from_slice(b"=\"");
  250|  7.66k|        bytes.extend_from_slice(a.value.as_ref());
  251|  7.66k|        bytes.push(b'"');
  252|  7.66k|    }
_RINvNtCsdBczmAo6fNM_9quick_xml6events16str_cow_to_bytesINtNtCsjOdcKtOMjJI_5alloc6borrow3CoweEECsi53KuwE5jZG_7rdf_xml:
 1043|   301k|fn str_cow_to_bytes<'a, C: Into<Cow<'a, str>>>(content: C) -> Cow<'a, [u8]> {
 1044|   301k|    match content.into() {
 1045|   277k|        Cow::Borrowed(s) => Cow::Borrowed(s.as_bytes()),
 1046|  24.6k|        Cow::Owned(s) => Cow::Owned(s.into_bytes()),
 1047|       |    }
 1048|   301k|}
_RINvMNtCsdBczmAo6fNM_9quick_xml6eventsNtB3_10BytesStart3newNtNtCsjOdcKtOMjJI_5alloc6string6StringECsi53KuwE5jZG_7rdf_xml:
   92|  31.2k|    pub fn new<C: Into<Cow<'a, str>>>(name: C) -> Self {
   93|  31.2k|        let buf = str_cow_to_bytes(name);
   94|  31.2k|        BytesStart {
   95|  31.2k|            name_len: buf.len(),
   96|  31.2k|            buf,
   97|  31.2k|        }
   98|  31.2k|    }
_RNvMNtCsdBczmAo6fNM_9quick_xml6eventsNtB2_10BytesStart4nameCsi53KuwE5jZG_7rdf_xml:
  170|  1.10M|    pub fn name(&self) -> QName {
  171|  1.10M|        QName(&self.buf[..self.name_len])
  172|  1.10M|    }
_RNvMs4_NtCsdBczmAo6fNM_9quick_xml6eventsNtB5_8BytesEnd4nameCsi53KuwE5jZG_7rdf_xml:
  627|  5.11k|    pub fn name(&self) -> QName {
  628|  5.11k|        QName(&self.name)
  629|  5.11k|    }
_RNvMs4_NtCsdBczmAo6fNM_9quick_xml6eventsNtB5_8BytesEnd4wrapCsi53KuwE5jZG_7rdf_xml:
  596|  74.9k|    pub(crate) fn wrap(name: Cow<'a, [u8]>) -> Self {
  597|  74.9k|        BytesEnd { name }
  598|  74.9k|    }
_RNvMs7_NtCsdBczmAo6fNM_9quick_xml6eventsNtB5_9BytesText3newCsi53KuwE5jZG_7rdf_xml:
  700|  42.8k|    pub fn new(content: &'a str) -> Self {
  701|  42.8k|        Self::from_escaped(escape(content))
  702|  42.8k|    }
_RINvMs4_NtCsdBczmAo6fNM_9quick_xml6eventsNtB6_8BytesEnd3newReECs2FOzy0wGkcs_8oxrdfxml:
  606|  27.4k|    pub fn new<C: Into<Cow<'a, str>>>(name: C) -> Self {
  607|  27.4k|        Self::wrap(str_cow_to_bytes(name))
  608|  27.4k|    }
_RINvMNtCsdBczmAo6fNM_9quick_xml6eventsNtB3_10BytesStart3newReECs2FOzy0wGkcs_8oxrdfxml:
   92|  27.4k|    pub fn new<C: Into<Cow<'a, str>>>(name: C) -> Self {
   93|  27.4k|        let buf = str_cow_to_bytes(name);
   94|  27.4k|        BytesStart {
   95|  27.4k|            name_len: buf.len(),
   96|  27.4k|            buf,
   97|  27.4k|        }
   98|  27.4k|    }
_RINvMs4_NtCsdBczmAo6fNM_9quick_xml6eventsNtB6_8BytesEnd3newNtNtCsjOdcKtOMjJI_5alloc6string6StringECs2FOzy0wGkcs_8oxrdfxml:
  606|   189k|    pub fn new<C: Into<Cow<'a, str>>>(name: C) -> Self {
  607|   189k|        Self::wrap(str_cow_to_bytes(name))
  608|   189k|    }
_RINvMs_NtCsdBczmAo6fNM_9quick_xml6eventsNtB5_10BytesStart14push_attributeTReB1a_EECs2FOzy0wGkcs_8oxrdfxml:
  241|   441k|    pub fn push_attribute<'b, A>(&mut self, attr: A)
  242|   441k|    where
  243|   441k|        A: Into<Attribute<'b>>,
  244|   441k|    {
  245|   441k|        let a = attr.into();
  246|   441k|        let bytes = self.buf.to_mut();
  247|   441k|        bytes.push(b' ');
  248|   441k|        bytes.extend_from_slice(a.key.as_ref());
  249|   441k|        bytes.extend_from_slice(b"=\"");
  250|   441k|        bytes.extend_from_slice(a.value.as_ref());
  251|   441k|        bytes.push(b'"');
  252|   441k|    }
_RINvNtCsdBczmAo6fNM_9quick_xml6events16str_cow_to_bytesReECs2FOzy0wGkcs_8oxrdfxml:
 1043|  54.8k|fn str_cow_to_bytes<'a, C: Into<Cow<'a, str>>>(content: C) -> Cow<'a, [u8]> {
 1044|  54.8k|    match content.into() {
 1045|  54.8k|        Cow::Borrowed(s) => Cow::Borrowed(s.as_bytes()),
 1046|      0|        Cow::Owned(s) => Cow::Owned(s.into_bytes()),
 1047|       |    }
 1048|  54.8k|}
_RNvMs4_NtCsdBczmAo6fNM_9quick_xml6eventsNtB5_8BytesEnd4wrapCs2FOzy0wGkcs_8oxrdfxml:
  596|   217k|    pub(crate) fn wrap(name: Cow<'a, [u8]>) -> Self {
  597|   217k|        BytesEnd { name }
  598|   217k|    }
_RNvXsf_NtCsdBczmAo6fNM_9quick_xml6eventsNtB5_5EventINtNtCs9nhK3FOW46N_4core7convert5AsRefBC_E6as_ref:
 1035|   586k|    fn as_ref(&self) -> &Event<'a> {
 1036|   586k|        self
 1037|   586k|    }
_RNCNvMs2_NtCsdBczmAo6fNM_9quick_xml6eventsNtB7_9BytesDecl8encoding0B9_:
  487|  38.2k|            .map(|a| a.map(|a| a.value))
_RINvNtCsdBczmAo6fNM_9quick_xml6events16str_cow_to_bytesNtNtCsjOdcKtOMjJI_5alloc6string6StringEB4_:
 1043|   241k|fn str_cow_to_bytes<'a, C: Into<Cow<'a, str>>>(content: C) -> Cow<'a, [u8]> {
 1044|   241k|    match content.into() {
 1045|      0|        Cow::Borrowed(s) => Cow::Borrowed(s.as_bytes()),
 1046|   241k|        Cow::Owned(s) => Cow::Owned(s.into_bytes()),
 1047|       |    }
 1048|   241k|}
_RNvMsa_NtCsdBczmAo6fNM_9quick_xml6eventsNtB5_10BytesCData6escape:
  877|  4.23k|    pub fn escape(self) -> Result<BytesText<'a>> {
  878|  4.23k|        let decoded = self.decode()?;
  879|       |        Ok(BytesText::wrap(
  880|  3.62k|            match escape(&decoded) {
  881|       |                // Because result is borrowed, no replacements was done and we can use original content
  882|  1.43k|                Cow::Borrowed(_) => self.content,
  883|  2.19k|                Cow::Owned(escaped) => Cow::Owned(escaped.into_bytes()),
  884|       |            },
  885|  3.62k|            Decoder::utf8(),
  886|       |        ))
  887|  4.23k|    }
_RINvMNtCsdBczmAo6fNM_9quick_xml6eventsNtB3_10BytesStart12from_contentNtNtCsjOdcKtOMjJI_5alloc6string6StringEB5_:
  108|  20.4k|    pub fn from_content<C: Into<Cow<'a, str>>>(content: C, name_len: usize) -> Self {
  109|  20.4k|        BytesStart {
  110|  20.4k|            buf: str_cow_to_bytes(content),
  111|  20.4k|            name_len,
  112|  20.4k|        }
  113|  20.4k|    }
_RNCNCNvMs2_NtCsdBczmAo6fNM_9quick_xml6eventsNtB9_9BytesDecl8encoding00Bb_:
  487|  37.3k|            .map(|a| a.map(|a| a.value))
_RNvMsa_NtCsdBczmAo6fNM_9quick_xml6eventsNtB5_10BytesCData6decode:
  915|  4.23k|    pub(crate) fn decode(&self) -> Result<Cow<'a, str>> {
  916|  4.23k|        Ok(match &self.content {
  917|  4.23k|            Cow::Borrowed(bytes) => self.decoder.decode(bytes)?,
  918|       |            // Convert to owned, because otherwise Cow will be bound with wrong lifetime
  919|      0|            Cow::Owned(bytes) => self.decoder.decode(bytes)?.into_owned().into(),
  920|       |        })
  921|  4.23k|    }
_RNvMs2_NtCsdBczmAo6fNM_9quick_xml6eventsNtB5_9BytesDecl10from_start:
  383|  42.2k|    pub fn from_start(start: BytesStart<'a>) -> Self {
  384|  42.2k|        Self { content: start }
  385|  42.2k|    }
_RINvMsa_NtCsdBczmAo6fNM_9quick_xml6eventsNtB6_10BytesCData4wrapRShEB8_:
  823|  4.23k|    pub(crate) fn wrap<C: Into<Cow<'a, [u8]>>>(content: C, decoder: Decoder) -> Self {
  824|  4.23k|        Self {
  825|  4.23k|            content: content.into(),
  826|  4.23k|            decoder,
  827|  4.23k|        }
  828|  4.23k|    }
_RNvXs3_NtCsdBczmAo6fNM_9quick_xml6eventsNtB5_9BytesDeclNtNtNtCs9nhK3FOW46N_4core3ops5deref5Deref5deref:
  565|  20.4k|    fn deref(&self) -> &[u8] {
  566|  20.4k|        &self.content
  567|  20.4k|    }
_RNvMs4_NtCsdBczmAo6fNM_9quick_xml6eventsNtB5_8BytesEnd4wrapB7_:
  596|   275k|    pub(crate) fn wrap(name: Cow<'a, [u8]>) -> Self {
  597|   275k|        BytesEnd { name }
  598|   275k|    }
_RNvXs1_NtCsdBczmAo6fNM_9quick_xml6eventsNtB5_10BytesStartNtNtNtCs9nhK3FOW46N_4core3ops5deref5Deref5deref:
  303|   293k|    fn deref(&self) -> &[u8] {
  304|   293k|        &self.buf
  305|   293k|    }
_RNvMs2_NtCsdBczmAo6fNM_9quick_xml6eventsNtB5_9BytesDecl8encoding:
  484|  42.2k|    pub fn encoding(&self) -> Option<Result<Cow<[u8]>>> {
  485|  42.2k|        self.content
  486|  42.2k|            .try_get_attribute("encoding")
  487|  42.2k|            .map(|a| a.map(|a| a.value))
  488|  42.2k|            .transpose()
  489|  42.2k|    }
_RINvMs_NtCsdBczmAo6fNM_9quick_xml6eventsNtB5_10BytesStart17try_get_attributeReEB7_:
  278|  42.2k|    pub fn try_get_attribute<N: AsRef<[u8]> + Sized>(
  279|  42.2k|        &'a self,
  280|  42.2k|        attr_name: N,
  281|  42.2k|    ) -> Result<Option<Attribute<'a>>> {
  282|  63.7k|        for a in self.attributes().with_checks(false) {
  283|  63.7k|            let a = a?;
  284|  59.6k|            if a.key.as_ref() == attr_name.as_ref() {
  285|  37.3k|                return Ok(Some(a));
  286|  22.2k|            }
  287|       |        }
  288|    833|        Ok(None)
  289|  42.2k|    }
_RNvMs2_NtCsdBczmAo6fNM_9quick_xml6eventsNtB5_9BytesDecl3new:
  342|  20.4k|    pub fn new(
  343|  20.4k|        version: &str,
  344|  20.4k|        encoding: Option<&str>,
  345|  20.4k|        standalone: Option<&str>,
  346|  20.4k|    ) -> BytesDecl<'static> {
  347|       |        // Compute length of the buffer based on supplied attributes
  348|       |        // ' encoding=""'   => 12
  349|  20.4k|        let encoding_attr_len = if let Some(xs) = encoding {
  350|  20.4k|            12 + xs.len()
  351|       |        } else {
  352|      0|            0
  353|       |        };
  354|       |        // ' standalone=""' => 14
  355|  20.4k|        let standalone_attr_len = if let Some(xs) = standalone {
  356|      0|            14 + xs.len()
  357|       |        } else {
  358|  20.4k|            0
  359|       |        };
  360|       |        // 'xml version=""' => 14
  361|  20.4k|        let mut buf = String::with_capacity(14 + encoding_attr_len + standalone_attr_len);
  362|  20.4k|
  363|  20.4k|        buf.push_str("xml version=\"");
  364|  20.4k|        buf.push_str(version);
  365|       |
  366|  20.4k|        if let Some(encoding_val) = encoding {
  367|  20.4k|            buf.push_str("\" encoding=\"");
  368|  20.4k|            buf.push_str(encoding_val);
  369|  20.4k|        }
  370|       |
  371|  20.4k|        if let Some(standalone_val) = standalone {
  372|      0|            buf.push_str("\" standalone=\"");
  373|      0|            buf.push_str(standalone_val);
  374|  20.4k|        }
  375|  20.4k|        buf.push('"');
  376|  20.4k|
  377|  20.4k|        BytesDecl {
  378|  20.4k|            content: BytesStart::from_content(buf, 3),
  379|  20.4k|        }
  380|  20.4k|    }
_RNvMNtCsdBczmAo6fNM_9quick_xml6eventsNtB2_10BytesStart4wrapB4_:
   79|  1.14M|    pub(crate) fn wrap(content: &'a [u8], name_len: usize) -> Self {
   80|  1.14M|        BytesStart {
   81|  1.14M|            buf: Cow::Borrowed(content),
   82|  1.14M|            name_len,
   83|  1.14M|        }
   84|  1.14M|    }
_RINvMs7_NtCsdBczmAo6fNM_9quick_xml6eventsNtB6_9BytesText4wrapRShEB8_:
  684|  1.03M|    pub(crate) fn wrap<C: Into<Cow<'a, [u8]>>>(content: C, decoder: Decoder) -> Self {
  685|  1.03M|        Self {
  686|  1.03M|            content: content.into(),
  687|  1.03M|            decoder,
  688|  1.03M|        }
  689|  1.03M|    }
_RINvMs7_NtCsdBczmAo6fNM_9quick_xml6eventsNtB6_9BytesText4wrapINtNtCsjOdcKtOMjJI_5alloc6borrow3CowShEEB8_:
  684|  46.4k|    pub(crate) fn wrap<C: Into<Cow<'a, [u8]>>>(content: C, decoder: Decoder) -> Self {
  685|  46.4k|        Self {
  686|  46.4k|            content: content.into(),
  687|  46.4k|            decoder,
  688|  46.4k|        }
  689|  46.4k|    }
_RNvXs9_NtCsdBczmAo6fNM_9quick_xml6eventsNtB5_9BytesTextNtNtNtCs9nhK3FOW46N_4core3ops5deref5Deref5deref:
  789|   716k|    fn deref(&self) -> &[u8] {
  790|   716k|        &self.content
  791|   716k|    }
_RNvMs_NtCsdBczmAo6fNM_9quick_xml6eventsNtB4_10BytesStart10attributes:
  261|  2.00M|    pub fn attributes(&self) -> Attributes {
  262|  2.00M|        Attributes::wrap(&self.buf, self.name_len, false)
  263|  2.00M|    }
_RNvXs6_NtCsdBczmAo6fNM_9quick_xml6eventsNtB5_8BytesEndNtNtNtCs9nhK3FOW46N_4core3ops5deref5Deref5deref:
  652|   250k|    fn deref(&self) -> &[u8] {
  653|   250k|        &self.name
  654|   250k|    }

_RNvMsf_NtCsdBczmAo6fNM_9quick_xml4nameNtB5_17NamespaceResolver7resolveCsi53KuwE5jZG_7rdf_xml:
  564|  1.34M|    pub fn resolve<'n>(
  565|  1.34M|        &self,
  566|  1.34M|        name: QName<'n>,
  567|  1.34M|        use_default: bool,
  568|  1.34M|    ) -> (ResolveResult, LocalName<'n>) {
  569|  1.34M|        let (local_name, prefix) = name.decompose();
  570|  1.34M|        (self.resolve_prefix(prefix, use_default), local_name)
  571|  1.34M|    }
_RNvXs0_NtCsdBczmAo6fNM_9quick_xml4nameNtB5_5QNameINtNtCs9nhK3FOW46N_4core7convert5AsRefShE6as_refCsi53KuwE5jZG_7rdf_xml:
  124|  1.07M|    fn as_ref(&self) -> &[u8] {
  125|  1.07M|        self.0
  126|  1.07M|    }
_RNvXs3_NtCsdBczmAo6fNM_9quick_xml4nameNtB5_9LocalNameINtNtCs9nhK3FOW46N_4core7convert5AsRefShE6as_refCsi53KuwE5jZG_7rdf_xml:
  154|  2.35M|    fn as_ref(&self) -> &[u8] {
  155|  2.35M|        self.0
  156|  2.35M|    }
_RNvXsa_NtCsdBczmAo6fNM_9quick_xml4nameNtB5_9NamespaceINtNtCs9nhK3FOW46N_4core7convert5AsRefShE6as_refCsi53KuwE5jZG_7rdf_xml:
  270|  2.35M|    fn as_ref(&self) -> &[u8] {
  271|  2.35M|        self.0
  272|  2.35M|    }
_RNvXs0_NtCsdBczmAo6fNM_9quick_xml4nameNtB5_5QNameINtNtCs9nhK3FOW46N_4core7convert5AsRefShE6as_refCs2FOzy0wGkcs_8oxrdfxml:
  124|   441k|    fn as_ref(&self) -> &[u8] {
  125|   441k|        self.0
  126|   441k|    }
_RNvMsf_NtCsdBczmAo6fNM_9quick_xml4nameNtB5_17NamespaceResolver4push:
  460|  1.10M|    pub fn push(&mut self, start: &BytesStart) -> Result<()> {
  461|  1.10M|        self.nesting_level += 1;
  462|  1.10M|        let level = self.nesting_level;
  463|       |        // adds new namespaces for attributes starting with 'xmlns:' and for the 'xmlns'
  464|       |        // (default namespace) attribute.
  465|  1.10M|        for a in start.attributes().with_checks(false) {
  466|   650k|            if let Ok(Attribute { key: k, value: v }) = a {
  467|   557k|                match k.as_namespace_binding() {
  468|   149k|                    Some(PrefixDeclaration::Default) => {
  469|   149k|                        let start = self.buffer.len();
  470|   149k|                        self.buffer.extend_from_slice(&v);
  471|   149k|                        self.bindings.push(NamespaceEntry {
  472|   149k|                            start,
  473|   149k|                            prefix_len: 0,
  474|   149k|                            value_len: v.len(),
  475|   149k|                            level,
  476|   149k|                        });
  477|   149k|                    }
  478|   118k|                    Some(PrefixDeclaration::Named(b"xml")) => {
  479|    715|                        if Namespace(&v) != RESERVED_NAMESPACE_XML.1 {
  480|       |                            // error, `xml` prefix explicitly set to different value
  481|    591|                            return Err(Error::InvalidPrefixBind {
  482|    591|                                prefix: b"xml".to_vec(),
  483|    591|                                namespace: v.to_vec(),
  484|    591|                            });
  485|    124|                        }
  486|       |                        // don't add another NamespaceEntry for the `xml` namespace prefix
  487|       |                    }
  488|  95.5k|                    Some(PrefixDeclaration::Named(b"xmlns")) => {
  489|       |                        // error, `xmlns` prefix explicitly set
  490|    764|                        return Err(Error::InvalidPrefixBind {
  491|    764|                            prefix: b"xmlns".to_vec(),
  492|    764|                            namespace: v.to_vec(),
  493|    764|                        });
  494|       |                    }
  495|   117k|                    Some(PrefixDeclaration::Named(prefix)) => {
  496|   117k|                        let ns = Namespace(&v);
  497|   117k|
  498|   117k|                        if ns == RESERVED_NAMESPACE_XML.1 || ns == RESERVED_NAMESPACE_XMLNS.1 {
  499|       |                            // error, non-`xml` prefix set to xml uri
  500|       |                            // error, non-`xmlns` prefix set to xmlns uri
  501|    416|                            return Err(Error::InvalidPrefixBind {
  502|    416|                                prefix: prefix.to_vec(),
  503|    416|                                namespace: v.to_vec(),
  504|    416|                            });
  505|   116k|                        }
  506|   116k|
  507|   116k|                        let start = self.buffer.len();
  508|   116k|                        self.buffer.extend_from_slice(prefix);
  509|   116k|                        self.buffer.extend_from_slice(&v);
  510|   116k|                        self.bindings.push(NamespaceEntry {
  511|   116k|                            start,
  512|   116k|                            prefix_len: prefix.len(),
  513|   116k|                            value_len: v.len(),
  514|   116k|                            level,
  515|   116k|                        });
  516|       |                    }
  517|   289k|                    None => {}
  518|       |                }
  519|       |            } else {
  520|  93.2k|                break;
  521|       |            }
  522|       |        }
  523|  1.10M|        Ok(())
  524|  1.10M|    }
_RNvMsd_NtCsdBczmAo6fNM_9quick_xml4nameNtB5_14NamespaceEntry9namespaceB7_:
  380|  1.17M|    fn namespace<'ns>(&self, buffer: &'ns [u8]) -> ResolveResult<'ns> {
  381|  1.17M|        if self.value_len == 0 {
  382|  1.63k|            ResolveResult::Unbound
  383|       |        } else {
  384|  1.17M|            let start = self.start + self.prefix_len;
  385|  1.17M|            ResolveResult::Bound(Namespace(&buffer[start..start + self.value_len]))
  386|       |        }
  387|  1.17M|    }
_RNvMNtCsdBczmAo6fNM_9quick_xml4nameNtB2_5QName9decompose:
   67|  1.34M|    pub fn decompose(&self) -> (LocalName<'a>, Option<Prefix<'a>>) {
   68|  1.34M|        match self.index() {
   69|   811k|            None => (LocalName(self.0), None),
   70|   528k|            Some(i) => (LocalName(&self.0[i + 1..]), Some(Prefix(&self.0[..i]))),
   71|       |        }
   72|  1.34M|    }
_RNvMs5_NtCsdBczmAo6fNM_9quick_xml4nameNtB5_6Prefix10into_inner:
  191|   118k|    pub fn into_inner(self) -> &'a [u8] {
  192|   118k|        self.0
  193|   118k|    }
_RNCNvMsf_NtCsdBczmAo6fNM_9quick_xml4nameNtB7_17NamespaceResolver14resolve_prefix0B9_:
  593|  2.19M|            .find_map(|n| match (n.prefix(&self.buffer), prefix) {
  594|       |                // This is default namespace definition and name has no explicit prefix
  595|   685k|                (None, None) if use_default => Some(n.namespace(&self.buffer)),
  596|    768|                (None, None) => Some(ResolveResult::Unbound),
  597|       |
  598|       |                // One part has prefix but other is not -> skip
  599|   158k|                (None, Some(_)) => None,
  600|   429k|                (Some(_), None) => None,
  601|       |
  602|       |                // Prefixes does not match -> skip
  603|   923k|                (Some(definition), Some(usage)) if definition != usage => None,
  604|       |
  605|       |                // Prefixes the same, entry defines binding reset (corresponds to `xmlns:p=""`)
  606|   491k|                _ if n.value_len == 0 => Some(Self::maybe_unknown(prefix)),
  607|       |                // Prefixes the same, returns corresponding namespace
  608|   491k|                _ => Some(n.namespace(&self.buffer)),
  609|  2.19M|            })
_RNCNvMsf_NtCsdBczmAo6fNM_9quick_xml4nameNtB7_17NamespaceResolver14resolve_prefixs_0B9_:
  610|   162k|            .unwrap_or_else(|| Self::maybe_unknown(prefix))
_RNvXs0_NtCsdBczmAo6fNM_9quick_xml4nameNtB5_5QNameINtNtCs9nhK3FOW46N_4core7convert5AsRefShE6as_refB7_:
  124|  59.6k|    fn as_ref(&self) -> &[u8] {
  125|  59.6k|        self.0
  126|  59.6k|    }
_RNvMsf_NtCsdBczmAo6fNM_9quick_xml4nameNtB5_17NamespaceResolver3pop:
  530|   317k|    pub fn pop(&mut self) {
  531|   317k|        self.nesting_level -= 1;
  532|   317k|        let current_level = self.nesting_level;
  533|   317k|        // from the back (most deeply nested scope), look for the first scope that is still valid
  534|   317k|        match self.bindings.iter().rposition(|n| n.level <= current_level) {
  535|       |            // none of the namespaces are valid, remove all of them
  536|      0|            None => {
  537|      0|                self.buffer.clear();
  538|      0|                self.bindings.clear();
  539|      0|            }
  540|       |            // drop all namespaces past the last valid namespace
  541|   317k|            Some(last_valid_pos) => {
  542|   317k|                if let Some(len) = self.bindings.get(last_valid_pos + 1).map(|n| n.start) {
  543|   237k|                    self.buffer.truncate(len);
  544|   237k|                    self.bindings.truncate(last_valid_pos + 1);
  545|   237k|                }
  546|       |            }
  547|       |        }
  548|   317k|    }
_RNvMsf_NtCsdBczmAo6fNM_9quick_xml4nameNtB5_17NamespaceResolver14resolve_prefix:
  588|  1.34M|    fn resolve_prefix(&self, prefix: Option<Prefix>, use_default: bool) -> ResolveResult {
  589|  1.34M|        self.bindings
  590|  1.34M|            .iter()
  591|  1.34M|            // Find the last defined binding that corresponds to the given prefix
  592|  1.34M|            .rev()
  593|  1.34M|            .find_map(|n| match (n.prefix(&self.buffer), prefix) {
  594|       |                // This is default namespace definition and name has no explicit prefix
  595|       |                (None, None) if use_default => Some(n.namespace(&self.buffer)),
  596|       |                (None, None) => Some(ResolveResult::Unbound),
  597|       |
  598|       |                // One part has prefix but other is not -> skip
  599|       |                (None, Some(_)) => None,
  600|       |                (Some(_), None) => None,
  601|       |
  602|       |                // Prefixes does not match -> skip
  603|       |                (Some(definition), Some(usage)) if definition != usage => None,
  604|       |
  605|       |                // Prefixes the same, entry defines binding reset (corresponds to `xmlns:p=""`)
  606|       |                _ if n.value_len == 0 => Some(Self::maybe_unknown(prefix)),
  607|       |                // Prefixes the same, returns corresponding namespace
  608|       |                _ => Some(n.namespace(&self.buffer)),
  609|  1.34M|            })
  610|  1.34M|            .unwrap_or_else(|| Self::maybe_unknown(prefix))
  611|  1.34M|    }
_RNvMNtCsdBczmAo6fNM_9quick_xml4nameNtB2_5QName20as_namespace_binding:
   98|   557k|    pub fn as_namespace_binding(&self) -> Option<PrefixDeclaration<'a>> {
   99|   557k|        if self.0.starts_with(b"xmlns") {
  100|   271k|            return match self.0.get(5) {
  101|   149k|                None => Some(PrefixDeclaration::Default),
  102|   118k|                Some(&b':') => Some(PrefixDeclaration::Named(&self.0[6..])),
  103|  3.72k|                _ => None,
  104|       |            };
  105|   285k|        }
  106|   285k|        None
  107|   557k|    }
_RNvXsU_NtCsdBczmAo6fNM_9quick_xml4nameNtB5_9NamespaceNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB7_:
  227|   234k|#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
_RNvXsB_NtCsdBczmAo6fNM_9quick_xml4nameNtB5_6PrefixNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB7_:
  185|   923k|#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
_RNvXse_NtCsdBczmAo6fNM_9quick_xml4nameNtB5_17NamespaceResolverNtNtCs9nhK3FOW46N_4core7default7Default7default:
  431|  40.8k|    fn default() -> Self {
  432|  40.8k|        let mut buffer = Vec::new();
  433|  40.8k|        let mut bindings = Vec::new();
  434|   122k|        for ent in &[RESERVED_NAMESPACE_XML, RESERVED_NAMESPACE_XMLNS] {
  435|  81.7k|            let prefix = ent.0.into_inner();
  436|  81.7k|            let uri = ent.1.into_inner();
  437|  81.7k|            bindings.push(NamespaceEntry {
  438|  81.7k|                start: buffer.len(),
  439|  81.7k|                prefix_len: prefix.len(),
  440|  81.7k|                value_len: uri.len(),
  441|  81.7k|                level: 0,
  442|  81.7k|            });
  443|  81.7k|            buffer.extend(prefix);
  444|  81.7k|            buffer.extend(uri);
  445|  81.7k|        }
  446|       |
  447|  40.8k|        Self {
  448|  40.8k|            buffer,
  449|  40.8k|            bindings,
  450|  40.8k|            nesting_level: 0,
  451|  40.8k|        }
  452|  40.8k|    }
_RNvMsf_NtCsdBczmAo6fNM_9quick_xml4nameNtB5_17NamespaceResolver13maybe_unknownB7_:
  614|   162k|    fn maybe_unknown(prefix: Option<Prefix>) -> ResolveResult<'static> {
  615|   162k|        match prefix {
  616|  37.0k|            Some(p) => ResolveResult::Unknown(p.into_inner().to_vec()),
  617|   125k|            None => ResolveResult::Unbound,
  618|       |        }
  619|   162k|    }
_RNvMs8_NtCsdBczmAo6fNM_9quick_xml4nameNtB5_9Namespace10into_inner:
  256|  81.7k|    pub fn into_inner(self) -> &'a [u8] {
  257|  81.7k|        self.0
  258|  81.7k|    }
_RNvMsd_NtCsdBczmAo6fNM_9quick_xml4nameNtB5_14NamespaceEntry6prefixB7_:
  367|  2.19M|    fn prefix<'b>(&self, ns_buffer: &'b [u8]) -> Option<Prefix<'b>> {
  368|  2.19M|        if self.prefix_len == 0 {
  369|   844k|            None
  370|       |        } else {
  371|  1.35M|            Some(Prefix(&ns_buffer[self.start..self.start + self.prefix_len]))
  372|       |        }
  373|  2.19M|    }
_RNCNvMsf_NtCsdBczmAo6fNM_9quick_xml4nameNtB7_17NamespaceResolver3pop0B9_:
  534|   554k|        match self.bindings.iter().rposition(|n| n.level <= current_level) {
_RNCNvMsf_NtCsdBczmAo6fNM_9quick_xml4nameNtB7_17NamespaceResolver3pops_0B9_:
  542|   237k|                if let Some(len) = self.bindings.get(last_valid_pos + 1).map(|n| n.start) {
_RNvMNtCsdBczmAo6fNM_9quick_xml4nameNtB2_5QName5index:
  111|  1.34M|    fn index(&self) -> Option<usize> {
  112|  1.34M|        memchr(b':', self.0)
  113|  1.34M|    }

_RNvXNtNtCsdBczmAo6fNM_9quick_xml6reader15buffered_readerINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE15remove_utf8_bomCsi53KuwE5jZG_7rdf_xml:
   18|  40.8k|        $($async)? fn remove_utf8_bom(&mut self) -> Result<()> {
   19|       |            use crate::encoding::UTF8_BOM;
   20|       |
   21|  40.8k|            loop {
   22|  40.8k|                break match self $(.$reader)? .fill_buf() $(.$await)? {
   23|  40.8k|                    Ok(n) => {
   24|  40.8k|                        if n.starts_with(UTF8_BOM) {
   25|    231|                            self $(.$reader)? .consume(UTF8_BOM.len());
   26|  40.6k|                        }
   27|  40.8k|                        Ok(())
   28|       |                    },
   29|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
   30|      0|                    Err(e) => Err(Error::Io(e.into())),
   31|       |                };
   32|       |            }
   33|  40.8k|        }
_RNvXNtNtCsdBczmAo6fNM_9quick_xml6reader15buffered_readerINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE8skip_oneCsi53KuwE5jZG_7rdf_xml:
  219|  1.47M|        $($async)? fn skip_one(&mut self, byte: u8, position: &mut usize) -> Result<bool> {
  220|       |            // search byte must be within the ascii range
  221|      0|            debug_assert!(byte.is_ascii());
  222|       |
  223|  1.47M|            match self.peek_one() $(.$await)? ? {
  224|  1.44M|                Some(b) if b == byte => {
  225|   418k|                    *position += 1;
  226|   418k|                    self $(.$reader)? .consume(1);
  227|   418k|                    Ok(true)
  228|       |                }
  229|  1.05M|                _ => Ok(false),
  230|       |            }
  231|  1.47M|        }
_RNvXNtNtCsdBczmAo6fNM_9quick_xml6reader15buffered_readerINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE16read_bytes_untilCsi53KuwE5jZG_7rdf_xml:
   52|  1.37M|        $($async)? fn read_bytes_until $(<$lf>)? (
   53|  1.37M|            &mut self,
   54|  1.37M|            byte: u8,
   55|  1.37M|            buf: &'b mut Vec<u8>,
   56|  1.37M|            position: &mut usize,
   57|  1.37M|        ) -> Result<Option<&'b [u8]>> {
   58|       |            // search byte must be within the ascii range
   59|      0|            debug_assert!(byte.is_ascii());
   60|       |
   61|  1.37M|            let mut read = 0;
   62|  1.37M|            let mut done = false;
   63|  1.37M|            let start = buf.len();
   64|  2.73M|            while !done {
   65|  1.35M|                let used = {
   66|  1.39M|                    let available = match self $(.$reader)? .fill_buf() $(.$await)? {
   67|  1.39M|                        Ok(n) if n.is_empty() => break,
   68|  1.35M|                        Ok(n) => n,
   69|      0|                        Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
   70|      0|                        Err(e) => {
   71|      0|                            *position += read;
   72|      0|                            return Err(Error::Io(e.into()));
   73|       |                        }
   74|       |                    };
   75|       |
   76|  1.35M|                    match memchr::memchr(byte, available) {
   77|  1.33M|                        Some(i) => {
   78|  1.33M|                            buf.extend_from_slice(&available[..i]);
   79|  1.33M|                            done = true;
   80|  1.33M|                            i + 1
   81|       |                        }
   82|       |                        None => {
   83|  13.6k|                            buf.extend_from_slice(available);
   84|  13.6k|                            available.len()
   85|       |                        }
   86|       |                    }
   87|       |                };
   88|  1.35M|                self $(.$reader)? .consume(used);
   89|  1.35M|                read += used;
   90|       |            }
   91|  1.37M|            *position += read;
   92|  1.37M|
   93|  1.37M|            if read == 0 {
   94|  30.8k|                Ok(None)
   95|       |            } else {
   96|  1.34M|                Ok(Some(&buf[start..]))
   97|       |            }
   98|  1.37M|        }
_RNvXNtNtCsdBczmAo6fNM_9quick_xml6reader15buffered_readerINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE8peek_oneCsi53KuwE5jZG_7rdf_xml:
  233|  2.92M|        $($async)? fn peek_one(&mut self) -> Result<Option<u8>> {
  234|  2.92M|            loop {
  235|  2.92M|                break match self $(.$reader)? .fill_buf() $(.$await)? {
  236|  2.92M|                    Ok(n) if n.is_empty() => Ok(None),
  237|  2.88M|                    Ok(n) => Ok(Some(n[0])),
  238|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  239|      0|                    Err(e) => Err(Error::Io(e.into())),
  240|       |                };
  241|       |            }
  242|  2.92M|        }
_RNvXNtNtCsdBczmAo6fNM_9quick_xml6reader15buffered_readerINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE17read_bang_elementCsi53KuwE5jZG_7rdf_xml:
  100|  5.66k|        $($async)? fn read_bang_element $(<$lf>)? (
  101|  5.66k|            &mut self,
  102|  5.66k|            buf: &'b mut Vec<u8>,
  103|  5.66k|            position: &mut usize,
  104|  5.66k|        ) -> Result<Option<(BangType, &'b [u8])>> {
  105|  5.66k|            // Peeked one bang ('!') before being called, so it's guaranteed to
  106|  5.66k|            // start with it.
  107|  5.66k|            let start = buf.len();
  108|  5.66k|            let mut read = 1;
  109|  5.66k|            buf.push(b'!');
  110|  5.66k|            self $(.$reader)? .consume(1);
  111|       |
  112|  5.66k|            let bang_type = BangType::new(self.peek_one() $(.$await)? ?)?;
  113|       |
  114|  5.77k|            loop {
  115|  5.77k|                match self $(.$reader)? .fill_buf() $(.$await)? {
  116|       |                    // Note: Do not update position, so the error points to
  117|       |                    // somewhere sane rather than at the EOF
  118|  5.77k|                    Ok(n) if n.is_empty() => return Err(bang_type.to_err()),
  119|  5.65k|                    Ok(available) => {
  120|       |                        // We only parse from start because we don't want to consider
  121|       |                        // whatever is in the buffer before the bang element
  122|  5.65k|                        if let Some((consumed, used)) = bang_type.parse(&buf[start..], available) {
  123|  5.53k|                            buf.extend_from_slice(consumed);
  124|  5.53k|
  125|  5.53k|                            self $(.$reader)? .consume(used);
  126|  5.53k|                            read += used;
  127|  5.53k|
  128|  5.53k|                            *position += read;
  129|  5.53k|                            break;
  130|    120|                        } else {
  131|    120|                            buf.extend_from_slice(available);
  132|    120|
  133|    120|                            let used = available.len();
  134|    120|                            self $(.$reader)? .consume(used);
  135|    120|                            read += used;
  136|    120|                        }
  137|       |                    }
  138|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  139|      0|                    Err(e) => {
  140|      0|                        *position += read;
  141|      0|                        return Err(Error::Io(e.into()));
  142|       |                    }
  143|       |                }
  144|       |            }
  145|       |
  146|  5.53k|            if read == 0 {
  147|      0|                Ok(None)
  148|       |            } else {
  149|  5.53k|                Ok(Some((bang_type, &buf[start..])))
  150|       |            }
  151|  5.66k|        }
_RNvXNtNtCsdBczmAo6fNM_9quick_xml6reader15buffered_readerINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE12read_elementCsi53KuwE5jZG_7rdf_xml:
  154|  1.10M|        $($async)? fn read_element $(<$lf>)? (
  155|  1.10M|            &mut self,
  156|  1.10M|            buf: &'b mut Vec<u8>,
  157|  1.10M|            position: &mut usize,
  158|  1.10M|        ) -> Result<Option<&'b [u8]>> {
  159|  1.10M|            let mut state = ReadElementState::Elem;
  160|  1.10M|            let mut read = 0;
  161|  1.10M|
  162|  1.10M|            let start = buf.len();
  163|       |            loop {
  164|  1.12M|                match self $(.$reader)? .fill_buf() $(.$await)? {
  165|  1.12M|                    Ok(n) if n.is_empty() => break,
  166|  1.11M|                    Ok(available) => {
  167|  1.11M|                        if let Some((consumed, used)) = state.change(available) {
  168|  1.09M|                            buf.extend_from_slice(consumed);
  169|  1.09M|
  170|  1.09M|                            self $(.$reader)? .consume(used);
  171|  1.09M|                            read += used;
  172|  1.09M|
  173|  1.09M|                            // Position now just after the `>` symbol
  174|  1.09M|                            *position += read;
  175|  1.09M|                            break;
  176|  19.8k|                        } else {
  177|  19.8k|                            // The `>` symbol not yet found, continue reading
  178|  19.8k|                            buf.extend_from_slice(available);
  179|  19.8k|
  180|  19.8k|                            let used = available.len();
  181|  19.8k|                            self $(.$reader)? .consume(used);
  182|  19.8k|                            read += used;
  183|  19.8k|                        }
  184|       |                    }
  185|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  186|      0|                    Err(e) => {
  187|      0|                        *position += read;
  188|      0|                        return Err(Error::Io(e.into()));
  189|       |                    }
  190|       |                };
  191|       |            }
  192|       |
  193|  1.10M|            if read == 0 {
  194|      0|                Ok(None)
  195|       |            } else {
  196|  1.10M|                Ok(Some(&buf[start..]))
  197|       |            }
  198|  1.10M|        }

_RNvMs1_NtCsdBczmAo6fNM_9quick_xml6readerNtB5_8BangType3new:
  807|  5.66k|    fn new(byte: Option<u8>) -> Result<Self> {
  808|  5.66k|        Ok(match byte {
  809|  4.29k|            Some(b'[') => Self::CData,
  810|  1.29k|            Some(b'-') => Self::Comment,
  811|     63|            Some(b'D') | Some(b'd') => Self::DocType,
  812|      7|            Some(b) => return Err(Error::UnexpectedBang(b)),
  813|      3|            None => return Err(Error::UnexpectedEof("Bang".to_string())),
  814|       |        })
  815|  5.66k|    }
_RNvMs2_NtCsdBczmAo6fNM_9quick_xml6readerNtB5_16ReadElementState6change:
  904|  1.11M|    fn change<'b>(&mut self, chunk: &'b [u8]) -> Option<(&'b [u8], usize)> {
  905|  2.50M|        for i in memchr::memchr3_iter(b'>', b'\'', b'"', chunk) {
  906|  2.50M|            *self = match (*self, chunk[i]) {
  907|       |                // only allowed to match `>` while we are in state `Elem`
  908|  1.09M|                (Self::Elem, b'>') => return Some((&chunk[..i], i + 1)),
  909|  5.35k|                (Self::Elem, b'\'') => Self::SingleQ,
  910|   592k|                (Self::Elem, b'\"') => Self::DoubleQ,
  911|       |
  912|       |                // the only end_byte that gets us out if the same character
  913|   595k|                (Self::SingleQ, b'\'') | (Self::DoubleQ, b'"') => Self::Elem,
  914|       |
  915|       |                // all other bytes: no state change
  916|   216k|                _ => *self,
  917|       |            };
  918|       |        }
  919|  19.8k|        None
  920|  1.11M|    }
_RNvMs1_NtCsdBczmAo6fNM_9quick_xml6readerNtB5_8BangType5parse:
  824|  5.65k|    fn parse<'b>(&self, buf: &[u8], chunk: &'b [u8]) -> Option<(&'b [u8], usize)> {
  825|  10.9k|        for i in memchr::memchr_iter(b'>', chunk) {
  826|  3.93k|            match self {
  827|  3.93k|                // Need to read at least 6 symbols (`!---->`) for properly finished comment
  828|  3.93k|                // <!----> - XML comment
  829|  3.93k|                //  012345 - i
  830|  3.93k|                Self::Comment if buf.len() + i > 4 => {
  831|  2.94k|                    if chunk[..i].ends_with(b"--") {
  832|       |                        // We cannot strip last `--` from the buffer because we need it in case of
  833|       |                        // check_comments enabled option. XML standard requires that comment
  834|       |                        // will not end with `--->` sequence because this is a special case of
  835|       |                        // `--` in the comment (https://www.w3.org/TR/xml11/#sec-comments)
  836|  1.26k|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
  837|  1.68k|                    }
  838|  1.68k|                    // End sequence `-|->` was splitted at |
  839|  1.68k|                    //        buf --/   \-- chunk
  840|  1.68k|                    if i == 1 && buf.ends_with(b"-") && chunk[0] == b'-' {
  841|      0|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
  842|  1.68k|                    }
  843|  1.68k|                    // End sequence `--|>` was splitted at |
  844|  1.68k|                    //         buf --/   \-- chunk
  845|  1.68k|                    if i == 0 && buf.ends_with(b"--") {
  846|      0|                        return Some((&[], i + 1)); // +1 for `>`
  847|  1.68k|                    }
  848|       |                }
  849|    986|                Self::Comment => {}
  850|       |                Self::CData => {
  851|  5.62k|                    if chunk[..i].ends_with(b"]]") {
  852|  4.24k|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
  853|  1.37k|                    }
  854|  1.37k|                    // End sequence `]|]>` was splitted at |
  855|  1.37k|                    //        buf --/   \-- chunk
  856|  1.37k|                    if i == 1 && buf.ends_with(b"]") && chunk[0] == b']' {
  857|      0|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
  858|  1.37k|                    }
  859|  1.37k|                    // End sequence `]]|>` was splitted at |
  860|  1.37k|                    //         buf --/   \-- chunk
  861|  1.37k|                    if i == 0 && buf.ends_with(b"]]") {
  862|      0|                        return Some((&[], i + 1)); // +1 for `>`
  863|  1.37k|                    }
  864|       |                }
  865|       |                Self::DocType => {
  866|  1.40k|                    let content = &chunk[..i];
  867|  1.40k|                    let balance = memchr::memchr2_iter(b'<', b'>', content)
  868|  1.40k|                        .map(|p| if content[p] == b'<' { 1i32 } else { -1 })
  869|  1.40k|                        .sum::<i32>();
  870|  1.40k|                    if balance == 0 {
  871|     31|                        return Some((content, i + 1)); // +1 for `>`
  872|  1.37k|                    }
  873|       |                }
  874|       |            }
  875|       |        }
  876|    120|        None
  877|  5.65k|    }
_RNvMs_NtCsdBczmAo6fNM_9quick_xml6readerINtB4_6ReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE7decoderCsi53KuwE5jZG_7rdf_xml:
  635|  1.50M|    pub fn decoder(&self) -> Decoder {
  636|  1.50M|        self.state.decoder()
  637|  1.50M|    }
_RINvMs0_NtCsdBczmAo6fNM_9quick_xml6readerINtB6_6ReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE15read_until_openQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEECsi53KuwE5jZG_7rdf_xml:
  656|  1.47M|    fn read_until_open<'i, B>(&mut self, buf: B) -> Result<std::result::Result<Event<'i>, B>>
  657|  1.47M|    where
  658|  1.47M|        R: XmlSource<'i, B>,
  659|  1.47M|    {
  660|  1.47M|        read_until_open!(self, buf, self.reader, read_event_impl)
  661|  1.47M|    }
_RINvMs0_NtCsdBczmAo6fNM_9quick_xml6readerINtB6_6ReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE15read_event_implQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEECsi53KuwE5jZG_7rdf_xml:
  645|  2.54M|    fn read_event_impl<'i, B>(&mut self, mut buf: B) -> Result<Event<'i>>
  646|  2.54M|    where
  647|  2.54M|        R: XmlSource<'i, B>,
  648|  2.54M|    {
  649|  2.95M|        read_event_impl!(self, buf, self.reader, read_until_open, read_until_close)
  650|  2.54M|    }
_RINvMs0_NtCsdBczmAo6fNM_9quick_xml6readerINtB6_6ReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE16read_until_closeQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEECsi53KuwE5jZG_7rdf_xml:
  665|  1.44M|    fn read_until_close<'i, B>(&mut self, buf: B) -> Result<Event<'i>>
  666|  1.44M|    where
  667|  1.44M|        R: XmlSource<'i, B>,
  668|  1.44M|    {
  669|  1.44M|        read_until_close!(self, buf, self.reader)
  670|  1.44M|    }
_RNvMNtCsdBczmAo6fNM_9quick_xml6readerINtB2_6ReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE11from_readerCsi53KuwE5jZG_7rdf_xml:
  533|  40.8k|    pub fn from_reader(reader: R) -> Self {
  534|  40.8k|        Self {
  535|  40.8k|            reader,
  536|  40.8k|            state: ReaderState::default(),
  537|  40.8k|        }
  538|  40.8k|    }
_RNvMs1_NtCsdBczmAo6fNM_9quick_xml6readerNtB5_8BangType6to_errCsi53KuwE5jZG_7rdf_xml:
  879|    120|    fn to_err(&self) -> Error {
  880|    120|        let bang_str = match self {
  881|     52|            Self::CData => "CData",
  882|     36|            Self::Comment => "Comment",
  883|     32|            Self::DocType => "DOCTYPE",
  884|       |        };
  885|    120|        Error::UnexpectedEof(bang_str.to_string())
  886|    120|    }
_RNvMNtNtCsdBczmAo6fNM_9quick_xml6reader9ns_readerINtB2_8NsReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE21expand_empty_elementsCsi53KuwE5jZG_7rdf_xml:
   33|  40.8k|        pub fn expand_empty_elements(&mut self, val: bool) -> &mut Self {
   34|  40.8k|            self $(.$holder)? .state.expand_empty_elements = val;
   35|  40.8k|            self
   36|  40.8k|        }
_RNvNtCsdBczmAo6fNM_9quick_xml6reader13is_whitespaceB3_:
  925|  20.0M|pub(crate) const fn is_whitespace(b: u8) -> bool {
  926|  20.0M|    matches!(b, b' ' | b'\r' | b'\n' | b'\t')
  927|  20.0M|}
_RNCNvMs1_NtCsdBczmAo6fNM_9quick_xml6readerNtB7_8BangType5parse0B9_:
  868|   138k|                        .map(|p| if content[p] == b'<' { 1i32 } else { -1 })
_RNvMs1_NtCsdBczmAo6fNM_9quick_xml6readerNtB5_8BangType6to_errB7_:
  879|     47|    fn to_err(&self) -> Error {
  880|     47|        let bang_str = match self {
  881|     13|            Self::CData => "CData",
  882|      3|            Self::Comment => "Comment",
  883|     31|            Self::DocType => "DOCTYPE",
  884|       |        };
  885|     47|        Error::UnexpectedEof(bang_str.to_string())
  886|     47|    }

_RNvMs_NtNtCsdBczmAo6fNM_9quick_xml6reader9ns_readerINtB4_8NsReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE13process_eventCsi53KuwE5jZG_7rdf_xml:
   70|  2.54M|    pub(super) fn process_event<'i>(&mut self, event: Result<Event<'i>>) -> Result<Event<'i>> {
   71|  2.53M|        match event {
   72|  1.10M|            Ok(Event::Start(e)) => {
   73|  1.10M|                self.ns_resolver.push(&e)?;
   74|  1.10M|                Ok(Event::Start(e))
   75|       |            }
   76|      0|            Ok(Event::Empty(e)) => {
   77|      0|                self.ns_resolver.push(&e)?;
   78|       |                // notify next `read_event_impl()` invocation that it needs to pop this
   79|       |                // namespace scope
   80|      0|                self.pending_pop = true;
   81|      0|                Ok(Event::Empty(e))
   82|       |            }
   83|   317k|            Ok(Event::End(e)) => {
   84|   317k|                // notify next `read_event_impl()` invocation that it needs to pop this
   85|   317k|                // namespace scope
   86|   317k|                self.pending_pop = true;
   87|   317k|                Ok(Event::End(e))
   88|       |            }
   89|  1.11M|            e => e,
   90|       |        }
   91|  2.54M|    }
_RNvMs_NtNtCsdBczmAo6fNM_9quick_xml6reader9ns_readerINtB4_8NsReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE3newCsi53KuwE5jZG_7rdf_xml:
   46|  40.8k|    fn new(reader: Reader<R>) -> Self {
   47|  40.8k|        Self {
   48|  40.8k|            reader,
   49|  40.8k|            ns_resolver: NamespaceResolver::default(),
   50|  40.8k|            pending_pop: false,
   51|  40.8k|        }
   52|  40.8k|    }
_RNvMs_NtNtCsdBczmAo6fNM_9quick_xml6reader9ns_readerINtB4_8NsReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE3popCsi53KuwE5jZG_7rdf_xml:
   63|  2.54M|    pub(super) fn pop(&mut self) {
   64|  2.54M|        if self.pending_pop {
   65|   317k|            self.ns_resolver.pop();
   66|   317k|            self.pending_pop = false;
   67|  2.22M|        }
   68|  2.54M|    }
_RNvMs0_NtNtCsdBczmAo6fNM_9quick_xml6reader9ns_readerINtB5_8NsReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE17resolve_attributeCsi53KuwE5jZG_7rdf_xml:
  284|   271k|    pub fn resolve_attribute<'n>(&self, name: QName<'n>) -> (ResolveResult, LocalName<'n>) {
  285|   271k|        self.ns_resolver.resolve(name, false)
  286|   271k|    }
_RINvMs_NtNtCsdBczmAo6fNM_9quick_xml6reader9ns_readerINtB5_8NsReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE15read_event_implQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEECsi53KuwE5jZG_7rdf_xml:
   54|  2.54M|    fn read_event_impl<'i, B>(&mut self, buf: B) -> Result<Event<'i>>
   55|  2.54M|    where
   56|  2.54M|        R: XmlSource<'i, B>,
   57|  2.54M|    {
   58|  2.54M|        self.pop();
   59|  2.54M|        let event = self.reader.read_event_impl(buf);
   60|  2.54M|        self.process_event(event)
   61|  2.54M|    }
_RNvXs4_NtNtCsdBczmAo6fNM_9quick_xml6reader9ns_readerINtB5_8NsReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEENtNtNtCs9nhK3FOW46N_4core3ops5deref5Deref5derefCsi53KuwE5jZG_7rdf_xml:
  827|  1.50M|    fn deref(&self) -> &Self::Target {
  828|  1.50M|        &self.reader
  829|  1.50M|    }
_RNvMNtNtCsdBczmAo6fNM_9quick_xml6reader9ns_readerINtB2_8NsReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE11from_readerCsi53KuwE5jZG_7rdf_xml:
   36|  40.8k|    pub fn from_reader(reader: R) -> Self {
   37|  40.8k|        Self::new(Reader::from_reader(reader))
   38|  40.8k|    }
_RNvMs0_NtNtCsdBczmAo6fNM_9quick_xml6reader9ns_readerINtB5_8NsReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE15resolve_elementCsi53KuwE5jZG_7rdf_xml:
  213|  1.06M|    pub fn resolve_element<'n>(&self, name: QName<'n>) -> (ResolveResult, LocalName<'n>) {
  214|  1.06M|        self.ns_resolver.resolve(name, true)
  215|  1.06M|    }
_RNvMs1_NtNtCsdBczmAo6fNM_9quick_xml6reader9ns_readerINtB5_8NsReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE15read_event_intoCsi53KuwE5jZG_7rdf_xml:
  343|  2.54M|    pub fn read_event_into<'b>(&mut self, buf: &'b mut Vec<u8>) -> Result<Event<'b>> {
  344|  2.54M|        self.read_event_impl(buf)
  345|  2.54M|    }

_RNvMNtNtCsdBczmAo6fNM_9quick_xml6reader5stateNtB2_11ReaderState20close_expanded_emptyCsi53KuwE5jZG_7rdf_xml:
  244|  41.8k|    pub fn close_expanded_empty(&mut self) -> Result<Event<'static>> {
  245|  41.8k|        self.state = ParseState::ClosedTag;
  246|  41.8k|        let name = self
  247|  41.8k|            .opened_buffer
  248|  41.8k|            .split_off(self.opened_starts.pop().unwrap());
  249|  41.8k|        Ok(Event::End(BytesEnd::wrap(name.into())))
  250|  41.8k|    }
_RNvMNtNtCsdBczmAo6fNM_9quick_xml6reader5stateNtB2_11ReaderState18emit_question_mark:
  186|  47.5k|    pub fn emit_question_mark<'b>(&mut self, buf: &'b [u8]) -> Result<Event<'b>> {
  187|  47.5k|        let len = buf.len();
  188|  47.5k|        if len > 2 && buf[len - 1] == b'?' {
  189|  47.0k|            if len > 5 && &buf[1..4] == b"xml" && is_whitespace(buf[4]) {
  190|  42.2k|                let event = BytesDecl::from_start(BytesStart::wrap(&buf[1..len - 1], 3));
  191|  42.2k|
  192|  42.2k|                // Try getting encoding from the declaration event
  193|  42.2k|                #[cfg(feature = "encoding")]
  194|  42.2k|                if self.encoding.can_be_refined() {
  195|  42.2k|                    if let Some(encoding) = event.encoder() {
  196|  42.2k|                        self.encoding = EncodingRef::XmlDetected(encoding);
  197|  42.2k|                    }
  198|  42.2k|                }
  199|  42.2k|
  200|  42.2k|                Ok(Event::Decl(event))
  201|       |            } else {
  202|  4.80k|                Ok(Event::PI(BytesText::wrap(&buf[1..len - 1], self.decoder())))
  203|       |            }
  204|       |        } else {
  205|    471|            self.offset -= len;
  206|    471|            Err(Error::UnexpectedEof("XmlDecl".to_string()))
  207|       |        }
  208|  47.5k|    }
_RNvMNtNtCsdBczmAo6fNM_9quick_xml6reader5stateNtB2_11ReaderState7decoder:
  261|  2.81M|    pub fn decoder(&self) -> Decoder {
  262|  2.81M|        Decoder {
  263|  2.81M|            #[cfg(feature = "encoding")]
  264|  2.81M|            encoding: self.encoding.encoding(),
  265|  2.81M|        }
  266|  2.81M|    }
_RNvMNtNtCsdBczmAo6fNM_9quick_xml6reader5stateNtB2_11ReaderState9emit_text:
   68|  1.02M|    pub fn emit_text<'b>(&mut self, bytes: &'b [u8]) -> Result<Event<'b>> {
   69|  1.02M|        let mut content = bytes;
   70|  1.02M|
   71|  1.02M|        if self.trim_text_end {
   72|      0|            // Skip the ending '<'
   73|      0|            let len = bytes
   74|      0|                .iter()
   75|      0|                .rposition(|&b| !is_whitespace(b))
   76|      0|                .map_or_else(|| bytes.len(), |p| p + 1);
   77|      0|            content = &bytes[..len];
   78|  1.02M|        }
   79|       |
   80|  1.02M|        Ok(Event::Text(BytesText::wrap(content, self.decoder())))
   81|  1.02M|    }
_RNCNvMNtNtCsdBczmAo6fNM_9quick_xml6reader5stateNtB4_11ReaderState9emit_bang0B8_:
   86|  4.27k|        let uncased_starts_with = |string: &[u8], prefix: &[u8]| {
   87|  4.27k|            string.len() >= prefix.len() && string[..prefix.len()].eq_ignore_ascii_case(prefix)
   88|  4.27k|        };
_RNCNvMNtNtCsdBczmAo6fNM_9quick_xml6reader5stateNtB4_11ReaderState8emit_ends_0B8_:
  150|    347|        let mismatch_err = |expected: String, found: &[u8], offset: &mut usize| {
  151|    347|            *offset -= buf.len();
  152|    347|            Err(Error::EndEventMismatch {
  153|    347|                expected,
  154|    347|                found: decoder.decode(found).unwrap_or_default().into_owned(),
  155|    347|            })
  156|    347|        };
_RNCNvMNtNtCsdBczmAo6fNM_9quick_xml6reader5stateNtB4_11ReaderState8emit_end0B8_:
  140|   247k|            if let Some(pos_end_name) = content.iter().rposition(|&b| !is_whitespace(b)) {
_RNvMNtNtCsdBczmAo6fNM_9quick_xml6reader5stateNtB2_11ReaderState9emit_bang:
   85|  5.53k|    pub fn emit_bang<'b>(&mut self, bang_type: BangType, buf: &'b [u8]) -> Result<Event<'b>> {
   86|  5.53k|        let uncased_starts_with = |string: &[u8], prefix: &[u8]| {
   87|       |            string.len() >= prefix.len() && string[..prefix.len()].eq_ignore_ascii_case(prefix)
   88|       |        };
   89|       |
   90|  5.53k|        let len = buf.len();
   91|  4.27k|        match bang_type {
   92|  1.26k|            BangType::Comment if buf.starts_with(b"!--") => {
   93|      0|                debug_assert!(buf.ends_with(b"--"));
   94|  1.25k|                if self.check_comments {
   95|       |                    // search if '--' not in comments
   96|      0|                    if let Some(p) = memchr::memchr_iter(b'-', &buf[3..len - 2])
   97|      0|                        .position(|p| buf[3 + p + 1] == b'-')
   98|       |                    {
   99|      0|                        self.offset += len - p;
  100|      0|                        return Err(Error::UnexpectedToken("--".to_string()));
  101|      0|                    }
  102|  1.25k|                }
  103|  1.25k|                Ok(Event::Comment(BytesText::wrap(
  104|  1.25k|                    &buf[3..len - 2],
  105|  1.25k|                    self.decoder(),
  106|  1.25k|                )))
  107|       |            }
  108|  4.24k|            BangType::CData if uncased_starts_with(buf, b"![CDATA[") => {
  109|      0|                debug_assert!(buf.ends_with(b"]]"));
  110|  4.23k|                Ok(Event::CData(BytesCData::wrap(
  111|  4.23k|                    &buf[8..len - 2],
  112|  4.23k|                    self.decoder(),
  113|  4.23k|                )))
  114|       |            }
  115|     31|            BangType::DocType if uncased_starts_with(buf, b"!DOCTYPE") => {
  116|      0|                let start = buf[8..]
  117|      0|                    .iter()
  118|      0|                    .position(|b| !is_whitespace(*b))
  119|      0|                    .unwrap_or(len - 8);
  120|      0|                if start + 8 >= len {
  121|      0|                    return Err(Error::EmptyDocType);
  122|      0|                }
  123|      0|                Ok(Event::DocType(BytesText::wrap(
  124|      0|                    &buf[8 + start..],
  125|      0|                    self.decoder(),
  126|      0|                )))
  127|       |            }
  128|     47|            _ => Err(bang_type.to_err()),
  129|       |        }
  130|  5.53k|    }
_RNCNvMNtNtCsdBczmAo6fNM_9quick_xml6reader5stateNtB4_11ReaderState10emit_start0B8_:
  218|  7.04M|            .position(|&b| is_whitespace(b))
_RNvMNtNtCsdBczmAo6fNM_9quick_xml6reader5stateNtB2_11ReaderState8emit_end:
  134|   275k|    pub fn emit_end<'b>(&mut self, buf: &'b [u8]) -> Result<Event<'b>> {
  135|   275k|        // Strip the `/` character. `content` contains data between `</` and `>`
  136|   275k|        let content = &buf[1..];
  137|       |        // XML standard permits whitespaces after the markup name in closing tags.
  138|       |        // Let's strip them from the buffer before comparing tag names.
  139|   275k|        let name = if self.trim_markup_names_in_closing_tags {
  140|   275k|            if let Some(pos_end_name) = content.iter().rposition(|&b| !is_whitespace(b)) {
  141|   246k|                &content[..pos_end_name + 1]
  142|       |            } else {
  143|  28.8k|                content
  144|       |            }
  145|       |        } else {
  146|      0|            content
  147|       |        };
  148|       |
  149|   275k|        let decoder = self.decoder();
  150|   275k|        let mismatch_err = |expected: String, found: &[u8], offset: &mut usize| {
  151|       |            *offset -= buf.len();
  152|       |            Err(Error::EndEventMismatch {
  153|       |                expected,
  154|       |                found: decoder.decode(found).unwrap_or_default().into_owned(),
  155|       |            })
  156|       |        };
  157|       |
  158|       |        // Get the index in self.opened_buffer of the name of the last opened tag
  159|   275k|        match self.opened_starts.pop() {
  160|   275k|            Some(start) => {
  161|   275k|                if self.check_end_names {
  162|   275k|                    let expected = &self.opened_buffer[start..];
  163|   275k|                    if name != expected {
  164|    289|                        let expected = decoder.decode(expected).unwrap_or_default().into_owned();
  165|    289|                        // #513: In order to allow error recovery we should drop content of the buffer
  166|    289|                        self.opened_buffer.truncate(start);
  167|    289|
  168|    289|                        return mismatch_err(expected, name, &mut self.offset);
  169|   275k|                    }
  170|      0|                }
  171|       |
  172|   275k|                self.opened_buffer.truncate(start);
  173|       |            }
  174|       |            None => {
  175|     58|                if self.check_end_names {
  176|     58|                    return mismatch_err("".to_string(), &buf[1..], &mut self.offset);
  177|      0|                }
  178|       |            }
  179|       |        }
  180|       |
  181|   275k|        Ok(Event::End(BytesEnd::wrap(name.into())))
  182|   275k|    }
_RNvMNtNtCsdBczmAo6fNM_9quick_xml6reader5stateNtB2_11ReaderState10emit_start:
  214|  1.10M|    pub fn emit_start<'b>(&mut self, content: &'b [u8]) -> Result<Event<'b>> {
  215|  1.10M|        let len = content.len();
  216|  1.10M|        let name_end = content
  217|  1.10M|            .iter()
  218|  1.10M|            .position(|&b| is_whitespace(b))
  219|  1.10M|            .unwrap_or(len);
  220|  1.10M|        if let Some(&b'/') = content.last() {
  221|       |            // This is self-closed tag `<something/>`
  222|  41.8k|            let name_len = if name_end < len { name_end } else { len - 1 };
  223|  41.8k|            let event = BytesStart::wrap(&content[..len - 1], name_len);
  224|  41.8k|
  225|  41.8k|            if self.expand_empty_elements {
  226|  41.8k|                self.state = ParseState::Empty;
  227|  41.8k|                self.opened_starts.push(self.opened_buffer.len());
  228|  41.8k|                self.opened_buffer.extend(&content[..name_len]);
  229|  41.8k|                Ok(Event::Start(event))
  230|       |            } else {
  231|      0|                Ok(Event::Empty(event))
  232|       |            }
  233|       |        } else {
  234|       |            // #514: Always store names event when .check_end_names == false,
  235|       |            // because checks can be temporary disabled and when they would be
  236|       |            // enabled, we should have that information
  237|  1.06M|            self.opened_starts.push(self.opened_buffer.len());
  238|  1.06M|            self.opened_buffer.extend(&content[..name_end]);
  239|  1.06M|            Ok(Event::Start(BytesStart::wrap(content, name_end)))
  240|       |        }
  241|  1.10M|    }
_RNvXs_NtNtCsdBczmAo6fNM_9quick_xml6reader5stateNtB4_11ReaderStateNtNtCs9nhK3FOW46N_4core7default7Default7default:
  270|  40.8k|    fn default() -> Self {
  271|  40.8k|        Self {
  272|  40.8k|            offset: 0,
  273|  40.8k|            state: ParseState::Init,
  274|  40.8k|            expand_empty_elements: false,
  275|  40.8k|            trim_text_start: false,
  276|  40.8k|            trim_text_end: false,
  277|  40.8k|            trim_markup_names_in_closing_tags: true,
  278|  40.8k|            check_end_names: true,
  279|  40.8k|            check_comments: false,
  280|  40.8k|            opened_buffer: Vec::new(),
  281|  40.8k|            opened_starts: Vec::new(),
  282|  40.8k|
  283|  40.8k|            #[cfg(feature = "encoding")]
  284|  40.8k|            encoding: EncodingRef::Implicit(UTF_8),
  285|  40.8k|        }
  286|  40.8k|    }

_RINvMs_NtCsdBczmAo6fNM_9quick_xml6writerINtB5_6WriterINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE11write_eventNtNtB7_6events5EventECsi53KuwE5jZG_7rdf_xml:
  193|   586k|    pub fn write_event<'a, E: AsRef<Event<'a>>>(&mut self, event: E) -> Result<()> {
  194|   586k|        let mut next_should_line_break = true;
  195|   586k|        let result = match *event.as_ref() {
  196|   266k|            Event::Start(ref e) => {
  197|   266k|                let result = self.write_wrapped(b"<", e, b">");
  198|   266k|                if let Some(i) = self.indent.as_mut() {
  199|   246k|                    i.grow();
  200|   246k|                }
  201|   266k|                result
  202|       |            }
  203|   250k|            Event::End(ref e) => {
  204|   250k|                if let Some(i) = self.indent.as_mut() {
  205|   246k|                    i.shrink();
  206|   246k|                }
  207|   250k|                self.write_wrapped(b"</", e, b">")
  208|       |            }
  209|  6.69k|            Event::Empty(ref e) => self.write_wrapped(b"<", e, b"/>"),
  210|  42.8k|            Event::Text(ref e) => {
  211|  42.8k|                next_should_line_break = false;
  212|  42.8k|                self.write(e)
  213|       |            }
  214|      0|            Event::Comment(ref e) => self.write_wrapped(b"<!--", e, b"-->"),
  215|      0|            Event::CData(ref e) => {
  216|      0|                next_should_line_break = false;
  217|      0|                self.write(b"<![CDATA[")?;
  218|      0|                self.write(e)?;
  219|      0|                self.write(b"]]>")
  220|       |            }
  221|  20.4k|            Event::Decl(ref e) => self.write_wrapped(b"<?", e, b"?>"),
  222|      0|            Event::PI(ref e) => self.write_wrapped(b"<?", e, b"?>"),
  223|      0|            Event::DocType(ref e) => self.write_wrapped(b"<!DOCTYPE ", e, b">"),
  224|      0|            Event::Eof => Ok(()),
  225|       |        };
  226|   586k|        if let Some(i) = self.indent.as_mut() {
  227|   549k|            i.should_line_break = next_should_line_break;
  228|   549k|        }
  229|   586k|        result
  230|   586k|    }
_RNvMNtCsdBczmAo6fNM_9quick_xml6writerINtB2_6WriterINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE10into_innerCsi53KuwE5jZG_7rdf_xml:
   88|  20.4k|    pub fn into_inner(self) -> W {
   89|  20.4k|        self.writer
   90|  20.4k|    }
_RNvMNtCsdBczmAo6fNM_9quick_xml6writerINtB2_6WriterINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE3newCsi53KuwE5jZG_7rdf_xml:
   72|  1.36k|    pub fn new(inner: W) -> Writer<W> {
   73|  1.36k|        Writer {
   74|  1.36k|            writer: inner,
   75|  1.36k|            indent: None,
   76|  1.36k|        }
   77|  1.36k|    }
_RNvMs_NtCsdBczmAo6fNM_9quick_xml6writerINtB4_6WriterINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE5writeCsi53KuwE5jZG_7rdf_xml:
  234|  1.67M|    pub(crate) fn write(&mut self, value: &[u8]) -> Result<()> {
  235|  1.67M|        self.writer.write_all(value).map_err(Into::into)
  236|  1.67M|    }
_RNvMs_NtCsdBczmAo6fNM_9quick_xml6writerINtB4_6WriterINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE13write_wrappedCsi53KuwE5jZG_7rdf_xml:
  239|   543k|    fn write_wrapped(&mut self, before: &[u8], value: &[u8], after: &[u8]) -> Result<()> {
  240|   543k|        if let Some(ref i) = self.indent {
  241|   520k|            if i.should_line_break {
  242|   470k|                self.writer.write_all(b"\n")?;
  243|   470k|                self.writer.write_all(i.current())?;
  244|  49.6k|            }
  245|  23.6k|        }
  246|   543k|        self.write(before)?;
  247|   543k|        self.write(value)?;
  248|   543k|        self.write(after)?;
  249|   543k|        Ok(())
  250|   543k|    }
_RNvMNtCsdBczmAo6fNM_9quick_xml6writerINtB2_6WriterINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE15new_with_indentCsi53KuwE5jZG_7rdf_xml:
   80|  20.4k|    pub fn new_with_indent(inner: W, indent_char: u8, indent_size: usize) -> Writer<W> {
   81|  20.4k|        Writer {
   82|  20.4k|            writer: inner,
   83|  20.4k|            indent: Some(Indentation::new(indent_char, indent_size)),
   84|  20.4k|        }
   85|  20.4k|    }
_RNvMs2_NtCsdBczmAo6fNM_9quick_xml6writerNtB5_11Indentation6shrink:
  468|   246k|    pub fn shrink(&mut self) {
  469|   246k|        self.current_indent_len = self.current_indent_len.saturating_sub(self.indent_size);
  470|   246k|    }
_RNvMs2_NtCsdBczmAo6fNM_9quick_xml6writerNtB5_11Indentation3new:
  448|  20.4k|    pub fn new(indent_char: u8, indent_size: usize) -> Self {
  449|  20.4k|        Self {
  450|  20.4k|            should_line_break: false,
  451|  20.4k|            indent_char,
  452|  20.4k|            indent_size,
  453|  20.4k|            indents: vec![indent_char; 128],
  454|  20.4k|            current_indent_len: 0, // invariant - needs to remain less than indents.len()
  455|  20.4k|        }
  456|  20.4k|    }
_RNvMs2_NtCsdBczmAo6fNM_9quick_xml6writerNtB5_11Indentation4grow:
  459|   246k|    pub fn grow(&mut self) {
  460|   246k|        self.current_indent_len += self.indent_size;
  461|   246k|        if self.current_indent_len > self.indents.len() {
  462|      0|            self.indents
  463|      0|                .resize(self.current_indent_len, self.indent_char);
  464|   246k|        }
  465|   246k|    }
_RNvMs2_NtCsdBczmAo6fNM_9quick_xml6writerNtB5_11Indentation7current:
  473|   470k|    pub fn current(&self) -> &[u8] {
  474|   470k|        &self.indents[..self.current_indent_len]
  475|   470k|    }

_RINvXs2_NtNtCs4mFqzrpYUXA_4rand13distributions7integerNtB8_8StandardINtNtB8_12distribution12DistributionoE6sampleNtNtNtBa_4rngs6thread9ThreadRngECsi53KuwE5jZG_7rdf_xml:
   51|   468k|    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u128 {
   52|   468k|        // Use LE; we explicitly generate one value before the next.
   53|   468k|        let x = u128::from(rng.next_u64());
   54|   468k|        let y = u128::from(rng.next_u64());
   55|   468k|        (y << 64) | x
   56|   468k|    }

_RINvCs4mFqzrpYUXA_4rand6randomoECsi53KuwE5jZG_7rdf_xml:
  183|   468k|pub fn random<T>() -> T
  184|   468k|where Standard: Distribution<T> {
  185|   468k|    thread_rng().gen()
  186|   468k|}

_RINvYNtNtNtCs4mFqzrpYUXA_4rand4rngs6thread9ThreadRngNtNtB9_3rng3Rng3genoECsi53KuwE5jZG_7rdf_xml:
   93|   468k|    fn gen<T>(&mut self) -> T
   94|   468k|    where Standard: Distribution<T> {
   95|   468k|        Standard.sample(self)
   96|   468k|    }

_RNvXs_NtNtNtCs4mFqzrpYUXA_4rand4rngs7adapter9reseedingINtB4_12ReseedingRngNtNtCslWipVVScnoQ_11rand_chacha6chacha12ChaCha12CoreNtNtCsdaO7UuI6Wbo_9rand_core2os5OsRngENtB24_7RngCore8next_u64Csi53KuwE5jZG_7rdf_xml:
  124|   936k|    fn next_u64(&mut self) -> u64 {
  125|   936k|        self.0.next_u64()
  126|   936k|    }
_RNvNtNtNtNtCs4mFqzrpYUXA_4rand4rngs7adapter9reseeding4fork16get_fork_counter:
  307|  29.2k|    pub fn get_fork_counter() -> usize {
  308|  29.2k|        RESEEDING_RNG_FORK_COUNTER.load(Ordering::Relaxed)
  309|  29.2k|    }
_RNCNvNtNtNtNtCs4mFqzrpYUXA_4rand4rngs7adapter9reseeding4fork21register_fork_handler0Bb_:
  319|      1|        REGISTER.call_once(|| {
  320|      1|            // Bump the counter before and after forking (see #1169):
  321|      1|            let ret = unsafe { libc::pthread_atfork(
  322|      1|                Some(fork_handler),
  323|      1|                Some(fork_handler),
  324|      1|                Some(fork_handler),
  325|      1|            ) };
  326|      1|            if ret != 0 {
  327|      0|                panic!("libc::pthread_atfork failed with code {}", ret);
  328|      1|            }
  329|      1|        });
_RNvNtNtNtNtCs4mFqzrpYUXA_4rand4rngs7adapter9reseeding4fork21register_fork_handler:
  317|      1|    pub fn register_fork_handler() {
  318|      1|        static REGISTER: Once = Once::new();
  319|      1|        REGISTER.call_once(|| {
  320|       |            // Bump the counter before and after forking (see #1169):
  321|       |            let ret = unsafe { libc::pthread_atfork(
  322|       |                Some(fork_handler),
  323|       |                Some(fork_handler),
  324|       |                Some(fork_handler),
  325|       |            ) };
  326|       |            if ret != 0 {
  327|       |                panic!("libc::pthread_atfork failed with code {}", ret);
  328|       |            }
  329|      1|        });
  330|      1|    }
_RNvXs2_NtNtNtCs4mFqzrpYUXA_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCslWipVVScnoQ_11rand_chacha6chacha12ChaCha12CoreNtNtCsdaO7UuI6Wbo_9rand_core2os5OsRngENtNtB26_5block12BlockRngCore8generateBb_:
  173|  29.2k|    fn generate(&mut self, results: &mut Self::Results) {
  174|  29.2k|        let global_fork_counter = fork::get_fork_counter();
  175|  29.2k|        if self.bytes_until_reseed <= 0 || self.is_forked(global_fork_counter) {
  176|       |            // We get better performance by not calling only `reseed` here
  177|       |            // and continuing with the rest of the function, but by directly
  178|       |            // returning from a non-inlined function.
  179|    114|            return self.reseed_and_generate(results, global_fork_counter);
  180|  29.1k|        }
  181|  29.1k|        let num_bytes = results.as_ref().len() * size_of::<Self::Item>();
  182|  29.1k|        self.bytes_until_reseed -= num_bytes as i64;
  183|  29.1k|        self.inner.generate(results);
  184|  29.2k|    }
_RNvMs3_NtNtNtCs4mFqzrpYUXA_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCslWipVVScnoQ_11rand_chacha6chacha12ChaCha12CoreNtNtCsdaO7UuI6Wbo_9rand_core2os5OsRngE9is_forkedBb_:
  226|  29.2k|    fn is_forked(&self, global_fork_counter: usize) -> bool {
  227|  29.2k|        // In theory, on 32-bit platforms, it is possible for
  228|  29.2k|        // `global_fork_counter` to wrap around after ~4e9 forks.
  229|  29.2k|        //
  230|  29.2k|        // This check will detect a fork in the normal case where
  231|  29.2k|        // `fork_counter < global_fork_counter`, and also when the difference
  232|  29.2k|        // between both is greater than `isize::MAX` (wrapped around).
  233|  29.2k|        //
  234|  29.2k|        // It will still fail to detect a fork if there have been more than
  235|  29.2k|        // `isize::MAX` forks, without any reseed in between. Seems unlikely
  236|  29.2k|        // enough.
  237|  29.2k|        (self.fork_counter.wrapping_sub(global_fork_counter) as isize) < 0
  238|  29.2k|    }
_RNvMs3_NtNtNtCs4mFqzrpYUXA_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCslWipVVScnoQ_11rand_chacha6chacha12ChaCha12CoreNtNtCsdaO7UuI6Wbo_9rand_core2os5OsRngE19reseed_and_generateBb_:
  241|    114|    fn reseed_and_generate(
  242|    114|        &mut self, results: &mut <Self as BlockRngCore>::Results, global_fork_counter: usize,
  243|    114|    ) {
  244|    114|        #![allow(clippy::if_same_then_else)] // false positive
  245|    114|        if self.is_forked(global_fork_counter) {
  246|      0|            info!("Fork detected, reseeding RNG");
  247|    114|        } else {
  248|    114|            trace!("Reseeding RNG (periodic reseed)");
  249|    114|        }
  250|       |
  251|    114|        let num_bytes = results.as_ref().len() * size_of::<<R as BlockRngCore>::Item>();
  252|       |
  253|    114|        if let Err(e) = self.reseed() {
  254|      0|            warn!("Reseeding RNG failed: {}", e);
  255|      0|            let _ = e;
  256|    114|        }
  257|    114|        self.fork_counter = global_fork_counter;
  258|    114|
  259|    114|        self.bytes_until_reseed = self.threshold - num_bytes as i64;
  260|    114|        self.inner.generate(results);
  261|    114|    }
_RNCNvMs3_NtNtNtCs4mFqzrpYUXA_4rand4rngs7adapter9reseedingINtB7_13ReseedingCoreNtNtCslWipVVScnoQ_11rand_chacha6chacha12ChaCha12CoreNtNtCsdaO7UuI6Wbo_9rand_core2os5OsRngE6reseed0Bd_:
  220|    114|        R::from_rng(&mut self.reseeder).map(|result| {
  221|    114|            self.bytes_until_reseed = self.threshold;
  222|    114|            self.inner = result
  223|    114|        })
_RNvMs3_NtNtNtCs4mFqzrpYUXA_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCslWipVVScnoQ_11rand_chacha6chacha12ChaCha12CoreNtNtCsdaO7UuI6Wbo_9rand_core2os5OsRngE3newBb_:
  193|      1|    fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  194|      1|        use ::core::i64::MAX;
  195|      1|        fork::register_fork_handler();
  196|       |
  197|       |        // Because generating more values than `i64::MAX` takes centuries on
  198|       |        // current hardware, we just clamp to that value.
  199|       |        // Also we set a threshold of 0, which indicates no limit, to that
  200|       |        // value.
  201|      1|        let threshold = if threshold == 0 {
  202|      0|            MAX
  203|      1|        } else if threshold <= MAX as u64 {
  204|      1|            threshold as i64
  205|       |        } else {
  206|      0|            MAX
  207|       |        };
  208|       |
  209|      1|        ReseedingCore {
  210|      1|            inner: rng,
  211|      1|            reseeder,
  212|      1|            threshold: threshold as i64,
  213|      1|            bytes_until_reseed: threshold as i64,
  214|      1|            fork_counter: 0,
  215|      1|        }
  216|      1|    }
_RNvMs3_NtNtNtCs4mFqzrpYUXA_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCslWipVVScnoQ_11rand_chacha6chacha12ChaCha12CoreNtNtCsdaO7UuI6Wbo_9rand_core2os5OsRngE6reseedBb_:
  219|    114|    fn reseed(&mut self) -> Result<(), Error> {
  220|    114|        R::from_rng(&mut self.reseeder).map(|result| {
  221|       |            self.bytes_until_reseed = self.threshold;
  222|       |            self.inner = result
  223|    114|        })
  224|    114|    }
_RNvMNtNtNtCs4mFqzrpYUXA_4rand4rngs7adapter9reseedingINtB2_12ReseedingRngNtNtCslWipVVScnoQ_11rand_chacha6chacha12ChaCha12CoreNtNtCsdaO7UuI6Wbo_9rand_core2os5OsRngE3newB8_:
  101|      1|    pub fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  102|      1|        ReseedingRng(BlockRng::new(ReseedingCore::new(rng, threshold, reseeder)))
  103|      1|    }

_RNvXs_NtNtCs4mFqzrpYUXA_4rand4rngs6threadNtB4_9ThreadRngNtCsdaO7UuI6Wbo_9rand_core7RngCore8next_u64:
  109|   936k|    fn next_u64(&mut self) -> u64 {
  110|   936k|        // SAFETY: We must make sure to stop using `rng` before anyone else
  111|   936k|        // creates another mutable reference
  112|   936k|        let rng = unsafe { &mut *self.rng.get() };
  113|   936k|        rng.next_u64()
  114|   936k|    }
_RNCNvNvNtNtCs4mFqzrpYUXA_4rand4rngs6thread14THREAD_RNG_KEY7___getit0B9_:
   67|      1|thread_local!(
   68|      1|    // We require Rc<..> to avoid premature freeing when thread_rng is used
   69|      1|    // within thread-local destructors. See #968.
   70|      1|    static THREAD_RNG_KEY: Rc<UnsafeCell<ReseedingRng<Core, OsRng>>> = {
   71|      1|        let r = Core::from_rng(OsRng).unwrap_or_else(|err|
   72|      1|                panic!("could not initialize thread_rng: {}", err));
   73|      1|        let rng = ReseedingRng::new(r,
   74|      1|                                    THREAD_RNG_RESEED_THRESHOLD,
   75|      1|                                    OsRng);
   76|      1|        Rc::new(UnsafeCell::new(rng))
   77|      1|    }
   78|      1|);
_RNvNtNtCs4mFqzrpYUXA_4rand4rngs6thread10thread_rng:
   88|   468k|pub fn thread_rng() -> ThreadRng {
   89|   468k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
   90|   468k|    ThreadRng { rng }
   91|   468k|}
_RNCNvNtNtCs4mFqzrpYUXA_4rand4rngs6thread10thread_rng0B7_:
   89|   468k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());

_RNvXsm_NtCslWipVVScnoQ_11rand_chacha6chachaNtB5_12ChaCha12CoreNtNtCsdaO7UuI6Wbo_9rand_core5block12BlockRngCore8generateCs4mFqzrpYUXA_4rand:
   89|  29.2k|            fn generate(&mut self, r: &mut Self::Results) {
   90|  29.2k|                // Fill slice of words by writing to equivalent slice of bytes, then fixing endianness.
   91|  29.2k|                self.state.refill4($rounds, unsafe {
   92|  29.2k|                    &mut *(&mut *r as *mut Array64<u32> as *mut [u8; 256])
   93|  29.2k|                });
   94|  1.87M|                for x in r.as_mut() {
   95|  1.87M|                    *x = x.to_le();
   96|  1.87M|                }
   97|  29.2k|            }
_RNvXsn_NtCslWipVVScnoQ_11rand_chacha6chachaNtB5_12ChaCha12CoreNtCsdaO7UuI6Wbo_9rand_core11SeedableRng9from_seedCs4mFqzrpYUXA_4rand:
  103|    115|            fn from_seed(seed: Self::Seed) -> Self {
  104|    115|                $ChaChaXCore { state: ChaCha::new(&seed, &[0u8; 8]) }
  105|    115|            }
_RNvXs_NtCslWipVVScnoQ_11rand_chacha6chachaINtB4_7Array64mEINtNtCs9nhK3FOW46N_4core7convert5AsRefSmE6as_refB6_:
   46|  1.93M|    fn as_ref(&self) -> &[T] {
   47|  1.93M|        &self.0
   48|  1.93M|    }
_RNvXs0_NtCslWipVVScnoQ_11rand_chacha6chachaINtB5_7Array64mEINtNtCs9nhK3FOW46N_4core7convert5AsMutSmE6as_mutB7_:
   51|  29.2k|    fn as_mut(&mut self) -> &mut [T] {
   52|  29.2k|        &mut self.0
   53|  29.2k|    }
_RNvXNtCslWipVVScnoQ_11rand_chacha6chachaINtB2_7Array64mENtNtCs9nhK3FOW46N_4core7default7Default7defaultB4_:
   32|      1|    fn default() -> Self {
   33|      1|        Self([
   34|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   35|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   36|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   37|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   38|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   39|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   40|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   41|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   42|      1|        ])
   43|      1|    }

_RNvMNtCslWipVVScnoQ_11rand_chacha4gutsNtB2_6ChaCha7refill4:
   84|  29.2k|    pub fn refill4(&mut self, drounds: u32, out: &mut [u8; BUFSZ]) {
   85|  29.2k|        refill_wide(self, drounds, out)
   86|  29.2k|    }
_RNvMNtCslWipVVScnoQ_11rand_chacha4gutsNtB2_6ChaCha3new:
   72|    115|    pub fn new(key: &[u8; 32], nonce: &[u8]) -> Self {
   73|    115|        init_chacha(key, nonce)
   74|    115|    }
_RINvNtCslWipVVScnoQ_11rand_chacha4guts16refill_wide_implINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtBV_4NoNIEEB4_:
  116|  29.2k|fn refill_wide_impl<Mach: Machine>(
  117|  29.2k|    m: Mach, state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ],
  118|  29.2k|) {
  119|  29.2k|    let k = m.vec([0x6170_7865, 0x3320_646e, 0x7962_2d32, 0x6b20_6574]);
  120|  29.2k|    let mut pos = state.pos64(m);
  121|  29.2k|    let d0: Mach::u32x4 = m.unpack(state.d);
  122|  29.2k|    pos = pos.wrapping_add(1);
  123|  29.2k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  124|  29.2k|    pos = pos.wrapping_add(1);
  125|  29.2k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  126|  29.2k|    pos = pos.wrapping_add(1);
  127|  29.2k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  128|  29.2k|
  129|  29.2k|    let b = m.unpack(state.b);
  130|  29.2k|    let c = m.unpack(state.c);
  131|  29.2k|    let mut x = State {
  132|  29.2k|        a: Mach::u32x4x4::from_lanes([k, k, k, k]),
  133|  29.2k|        b: Mach::u32x4x4::from_lanes([b, b, b, b]),
  134|  29.2k|        c: Mach::u32x4x4::from_lanes([c, c, c, c]),
  135|  29.2k|        d: m.unpack(Mach::u32x4x4::from_lanes([d0, d1, d2, d3]).into()),
  136|  29.2k|    };
  137|   175k|    for _ in 0..drounds {
  138|   175k|        x = round(x);
  139|   175k|        x = undiagonalize(round(diagonalize(x)));
  140|   175k|    }
  141|  29.2k|    let mut pos = state.pos64(m);
  142|  29.2k|    let d0: Mach::u32x4 = m.unpack(state.d);
  143|  29.2k|    pos = pos.wrapping_add(1);
  144|  29.2k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  145|  29.2k|    pos = pos.wrapping_add(1);
  146|  29.2k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  147|  29.2k|    pos = pos.wrapping_add(1);
  148|  29.2k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  149|  29.2k|    pos = pos.wrapping_add(1);
  150|  29.2k|    let d4 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  151|  29.2k|
  152|  29.2k|    let (a, b, c, d) = (
  153|  29.2k|        x.a.to_lanes(),
  154|  29.2k|        x.b.to_lanes(),
  155|  29.2k|        x.c.to_lanes(),
  156|  29.2k|        x.d.to_lanes(),
  157|  29.2k|    );
  158|  29.2k|    let sb = m.unpack(state.b);
  159|  29.2k|    let sc = m.unpack(state.c);
  160|  29.2k|    let sd = [m.unpack(state.d), d1, d2, d3];
  161|  29.2k|    state.d = d4.into();
  162|  29.2k|    let mut words = out.chunks_exact_mut(16);
  163|   117k|    for ((((&a, &b), &c), &d), &sd) in a.iter().zip(&b).zip(&c).zip(&d).zip(&sd) {
  164|   117k|        (a + k).write_le(words.next().unwrap());
  165|   117k|        (b + sb).write_le(words.next().unwrap());
  166|   117k|        (c + sc).write_le(words.next().unwrap());
  167|   117k|        (d + sd).write_le(words.next().unwrap());
  168|   117k|    }
  169|  29.2k|}
_RINvMNtCslWipVVScnoQ_11rand_chacha4gutsNtB3_6ChaCha5pos64INtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtBW_4NoNIEEB5_:
   77|  58.5k|    fn pos64<M: Machine>(&self, m: M) -> u64 {
   78|  58.5k|        let d: M::u32x4 = m.unpack(self.d);
   79|  58.5k|        ((d.extract(1) as u64) << 32) | d.extract(0) as u64
   80|  58.5k|    }
_RINvNvNtCslWipVVScnoQ_11rand_chacha4guts11refill_wide7fn_implINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtB10_4NoNIEEB6_:
  172|  29.2k|    fn refill_wide(state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ]) {
  173|  29.2k|        refill_wide_impl(m, state, drounds, out);
  174|  29.2k|    }
_RINvNtCslWipVVScnoQ_11rand_chacha4guts5roundINtNtCsf8HyAzZvOrI_10ppv_lite864soft2x2INtNtNtNtBL_6x86_644sse24avx212u32x4x2_avx2NtB1q_4NoNIENtB1o_2G0EEB4_:
   43|   351k|pub(crate) fn round<V: ArithOps + BitOps32>(mut x: State<V>) -> State<V> {
   44|   351k|    x.a += x.b;
   45|   351k|    x.d = (x.d ^ x.a).rotate_each_word_right16();
   46|   351k|    x.c += x.d;
   47|   351k|    x.b = (x.b ^ x.c).rotate_each_word_right20();
   48|   351k|    x.a += x.b;
   49|   351k|    x.d = (x.d ^ x.a).rotate_each_word_right24();
   50|   351k|    x.c += x.d;
   51|   351k|    x.b = (x.b ^ x.c).rotate_each_word_right25();
   52|   351k|    x
   53|   351k|}
_RINvNtCslWipVVScnoQ_11rand_chacha4guts13undiagonalizeINtNtCsf8HyAzZvOrI_10ppv_lite864soft2x2INtNtNtNtBU_6x86_644sse24avx212u32x4x2_avx2NtB1z_4NoNIENtB1x_2G0EEB4_:
   63|   175k|pub(crate) fn undiagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   64|   175k|    x.b = x.b.shuffle_lane_words1230();
   65|   175k|    x.c = x.c.shuffle_lane_words2301();
   66|   175k|    x.d = x.d.shuffle_lane_words3012();
   67|   175k|    x
   68|   175k|}
_RNvNtCslWipVVScnoQ_11rand_chacha4guts10read_u32le:
  229|    230|fn read_u32le(xs: &[u8]) -> u32 {
  230|    230|    assert_eq!(xs.len(), 4);
  231|    230|    u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24)
  232|    230|}
_RINvNtCslWipVVScnoQ_11rand_chacha4guts11diagonalizeINtNtCsf8HyAzZvOrI_10ppv_lite864soft2x2INtNtNtNtBS_6x86_644sse24avx212u32x4x2_avx2NtB1x_4NoNIENtB1v_2G0EEB4_:
   56|   175k|pub(crate) fn diagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   57|   175k|    x.b = x.b.shuffle_lane_words3012();
   58|   175k|    x.c = x.c.shuffle_lane_words2301();
   59|   175k|    x.d = x.d.shuffle_lane_words1230();
   60|   175k|    x
   61|   175k|}
_RINvNvNtCslWipVVScnoQ_11rand_chacha4guts11init_chacha7fn_implINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6410SseMachineNtB10_5YesS3NtB10_5YesS4NtB10_4NoNIEEB6_:
  235|    115|    fn init_chacha(key: &[u8; 32], nonce: &[u8]) -> ChaCha {
  236|    115|        let ctr_nonce = [
  237|       |            0,
  238|    115|            if nonce.len() == 12 {
  239|      0|                read_u32le(&nonce[0..4])
  240|       |            } else {
  241|    115|                0
  242|       |            },
  243|    115|            read_u32le(&nonce[nonce.len() - 8..nonce.len() - 4]),
  244|    115|            read_u32le(&nonce[nonce.len() - 4..]),
  245|    115|        ];
  246|    115|        let key0: Mach::u32x4 = m.read_le(&key[..16]);
  247|    115|        let key1: Mach::u32x4 = m.read_le(&key[16..]);
  248|    115|        ChaCha {
  249|    115|            b: key0.into(),
  250|    115|            c: key1.into(),
  251|    115|            d: ctr_nonce.into(),
  252|    115|        }

_RNvXs0_NtCsdaO7UuI6Wbo_9rand_core5blockINtB5_8BlockRngINtNtNtNtCs4mFqzrpYUXA_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCslWipVVScnoQ_11rand_chacha6chacha12ChaCha12CoreNtNtB7_2os5OsRngEENtB7_7RngCore8next_u64Csi53KuwE5jZG_7rdf_xml:
  197|   936k|    fn next_u64(&mut self) -> u64 {
  198|   936k|        let read_u64 = |results: &[u32], index| {
  199|       |            let data = &results[index..=index + 1];
  200|       |            u64::from(data[1]) << 32 | u64::from(data[0])
  201|       |        };
  202|       |
  203|   936k|        let len = self.results.as_ref().len();
  204|   936k|
  205|   936k|        let index = self.index;
  206|   936k|        if index < len - 1 {
  207|   907k|            self.index += 2;
  208|   907k|            // Read an u64 from the current index
  209|   907k|            read_u64(self.results.as_ref(), index)
  210|  29.2k|        } else if index >= len {
  211|  29.2k|            self.generate_and_set(2);
  212|  29.2k|            read_u64(self.results.as_ref(), 0)
  213|       |        } else {
  214|      0|            let x = u64::from(self.results.as_ref()[len - 1]);
  215|      0|            self.generate_and_set(1);
  216|      0|            let y = u64::from(self.results.as_ref()[0]);
  217|      0|            (y << 32) | x
  218|       |        }
  219|   936k|    }
_RNCNvXs0_NtCsdaO7UuI6Wbo_9rand_core5blockINtB7_8BlockRngINtNtNtNtCs4mFqzrpYUXA_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCslWipVVScnoQ_11rand_chacha6chacha12ChaCha12CoreNtNtB9_2os5OsRngEENtB9_7RngCore8next_u640Csi53KuwE5jZG_7rdf_xml:
  198|   936k|        let read_u64 = |results: &[u32], index| {
  199|   936k|            let data = &results[index..=index + 1];
  200|   936k|            u64::from(data[1]) << 32 | u64::from(data[0])
  201|   936k|        };
_RNvMs_NtCsdaO7UuI6Wbo_9rand_core5blockINtB4_8BlockRngINtNtNtNtCs4mFqzrpYUXA_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCslWipVVScnoQ_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE3newBY_:
  145|      1|    pub fn new(core: R) -> BlockRng<R> {
  146|      1|        let results_empty = R::Results::default();
  147|      1|        BlockRng {
  148|      1|            core,
  149|      1|            index: results_empty.as_ref().len(),
  150|      1|            results: results_empty,
  151|      1|        }
  152|      1|    }
_RNvMs_NtCsdaO7UuI6Wbo_9rand_core5blockINtB4_8BlockRngINtNtNtNtCs4mFqzrpYUXA_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCslWipVVScnoQ_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE16generate_and_setBY_:
  174|  29.2k|    pub fn generate_and_set(&mut self, index: usize) {
  175|  29.2k|        assert!(index < self.results.as_ref().len());
  176|  29.2k|        self.core.generate(&mut self.results);
  177|  29.2k|        self.index = index;
  178|  29.2k|    }

_RNvXs_CsdaO7UuI6Wbo_9rand_coreQNtNtB4_2os5OsRngNtB4_7RngCore14try_fill_bytesCs4mFqzrpYUXA_4rand:
  441|    114|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
  442|    114|        (**self).try_fill_bytes(dest)
  443|    114|    }
_RINvYNtNtCslWipVVScnoQ_11rand_chacha6chacha12ChaCha12CoreNtCsdaO7UuI6Wbo_9rand_core11SeedableRng8from_rngQNtNtBV_2os5OsRngECs4mFqzrpYUXA_4rand:
  390|    114|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|    114|        let mut seed = Self::Seed::default();
  392|    114|        rng.try_fill_bytes(seed.as_mut())?;
  393|    114|        Ok(Self::from_seed(seed))
  394|    114|    }
_RINvYNtNtCslWipVVScnoQ_11rand_chacha6chacha12ChaCha12CoreNtCsdaO7UuI6Wbo_9rand_core11SeedableRng8from_rngNtNtBV_2os5OsRngECs4mFqzrpYUXA_4rand:
  390|      1|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|      1|        let mut seed = Self::Seed::default();
  392|      1|        rng.try_fill_bytes(seed.as_mut())?;
  393|      1|        Ok(Self::from_seed(seed))
  394|      1|    }

_RNvXs_NtCsdaO7UuI6Wbo_9rand_core2osNtB4_5OsRngNtB6_7RngCore14try_fill_bytes:
   67|    115|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
   68|    115|        getrandom(dest)?;
   69|    115|        Ok(())
   70|    115|    }

_RNvNvNtNtCs4mFqzrpYUXA_4rand4rngs6thread14THREAD_RNG_KEY7___getitB7_:
   83|   468k|            unsafe fn __getit(
   84|   468k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|   468k|            ) -> $crate::option::Option<&'static $t> {
   86|   468k|                #[thread_local]
   87|   468k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|   468k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|   468k|
   90|   468k|                unsafe {
   91|   468k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|   468k|                    })
  101|   468k|                }
  102|   468k|            }
_RNvNvNtNtCs4mFqzrpYUXA_4rand4rngs6thread14THREAD_RNG_KEY6___initB7_:
   80|      1|            fn __init() -> $t { $init }

_RNvMs7_NtCs8JH8FkI8tas_5oxrdf10blank_nodeNtB5_5IdStr3newCsi53KuwE5jZG_7rdf_xml:
  258|   660k|    fn new(id: u128) -> Self {
  259|   660k|        let mut str = [0; 32];
  260|   660k|        write!(&mut str[..], "{id:x}").unwrap();
  261|   660k|        Self(str)
  262|   660k|    }
_RNvXsg_NtCs8JH8FkI8tas_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsi53KuwE5jZG_7rdf_xml:
   23|   226k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMs7_NtCs8JH8FkI8tas_5oxrdf10blank_nodeNtB5_5IdStr6as_strCsi53KuwE5jZG_7rdf_xml:
  265|   894k|    fn as_str(&self) -> &str {
  266|   894k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|   894k|        str::from_utf8(&self.0[..len]).unwrap()
  268|   894k|    }
_RNvXsd_NtCs8JH8FkI8tas_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsi53KuwE5jZG_7rdf_xml:
   20|   646k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsk_NtCs8JH8FkI8tas_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsi53KuwE5jZG_7rdf_xml:
   23|   646k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMs1_NtCs8JH8FkI8tas_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCsi53KuwE5jZG_7rdf_xml:
  179|   199k|    pub const fn as_str(self) -> &'a str {
  180|   199k|        match self.0 {
  181|  3.50k|            BlankNodeRefContent::Named(id) => id,
  182|   195k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  183|       |        }
  184|   199k|    }
_RNvXsH_NtCs8JH8FkI8tas_5oxrdf10blank_nodeNtB5_5IdStrNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsi53KuwE5jZG_7rdf_xml:
  253|   630k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsv_NtCs8JH8FkI8tas_5oxrdf10blank_nodeNtB5_19BlankNodeRefContentNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsi53KuwE5jZG_7rdf_xml:
  141|   210k|#[derive(PartialEq, Eq, Debug, Clone, Copy, Hash)]
_RNvXsD_NtCs8JH8FkI8tas_5oxrdf10blank_nodeNtB5_5IdStrNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsi53KuwE5jZG_7rdf_xml:
  253|   220k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXs0_NtCs8JH8FkI8tas_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs9nhK3FOW46N_4core7default7Default7defaultCsi53KuwE5jZG_7rdf_xml:
  109|   186k|    fn default() -> Self {
  110|       |        // We ensure the ID does not start with a number to be also valid with RDF/XML
  111|   468k|        loop {
  112|   468k|            let id = random();
  113|   468k|            let str = IdStr::new(id);
  114|   468k|            if matches!(str.as_str().as_bytes().first(), Some(b'a'..=b'f')) {
  115|   186k|                return Self(BlankNodeContent::Anonymous {
  116|   186k|                    id: id.to_ne_bytes(),
  117|   186k|                    str,
  118|   186k|                });
  119|   281k|            }
  120|       |        }
  121|   186k|    }
_RNvXsp_NtCs8JH8FkI8tas_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsi53KuwE5jZG_7rdf_xml:
  138|   210k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RNvMNtCs8JH8FkI8tas_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCsi53KuwE5jZG_7rdf_xml:
   88|   438k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|   438k|        BlankNodeRef(match &self.0 {
   90|  11.5k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|   426k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|   426k|                id: *id,
   93|   426k|                str: str.as_str(),
   94|   426k|            },
   95|       |        })
   96|   438k|    }
_RNvMs1_NtCs8JH8FkI8tas_5oxrdf10blank_nodeNtB5_12BlankNodeRef10into_ownedCsi53KuwE5jZG_7rdf_xml:
  207|   195k|    pub fn into_owned(self) -> BlankNode {
  208|   195k|        BlankNode(match self.0 {
  209|  2.87k|            BlankNodeRefContent::Named(id) => BlankNodeContent::Named(id.to_owned()),
  210|   192k|            BlankNodeRefContent::Anonymous { id, .. } => BlankNodeContent::Anonymous {
  211|   192k|                id,
  212|   192k|                str: IdStr::new(u128::from_ne_bytes(id)),
  213|   192k|            },
  214|       |        })
  215|   195k|    }
_RNvXsb_NtCs8JH8FkI8tas_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsi53KuwE5jZG_7rdf_xml:
   20|   226k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RINvMNtCs8JH8FkI8tas_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedNtNtCsjOdcKtOMjJI_5alloc6string6StringEB5_:
   49|   207k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   50|   207k|        let id = id.into();
   51|   207k|        if let Some(numerical_id) = to_integer_id(&id) {
   52|   199k|            Self::new_from_unique_id(numerical_id)
   53|       |        } else {
   54|  8.58k|            Self(BlankNodeContent::Named(id))
   55|       |        }
   56|   207k|    }
_RNCNvMs7_NtCs8JH8FkI8tas_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  266|  28.4M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
_RNvMNtCs8JH8FkI8tas_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idB4_:
   62|   199k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|   199k|        Self(BlankNodeContent::Anonymous {
   64|   199k|            id: id.to_ne_bytes(),
   65|   199k|            str: IdStr::new(id),
   66|   199k|        })
   67|   199k|    }
_RNvMs7_NtCs8JH8FkI8tas_5oxrdf10blank_nodeNtB5_5IdStr3newB7_:
  258|   199k|    fn new(id: u128) -> Self {
  259|   199k|        let mut str = [0; 32];
  260|   199k|        write!(&mut str[..], "{id:x}").unwrap();
  261|   199k|        Self(str)
  262|   199k|    }
_RNvNtCs8JH8FkI8tas_5oxrdf10blank_node13to_integer_idB3_:
  331|   207k|fn to_integer_id(id: &str) -> Option<u128> {
  332|   207k|    let digits = id.as_bytes();
  333|   207k|    let mut value: u128 = 0;
  334|   207k|    if let None | Some(b'0') = digits.first() {
  335|      0|        return None; // No empty string or leading zeros
  336|   207k|    }
  337|  6.49M|    for digit in digits {
  338|  6.30M|        value = value.checked_mul(16)?.checked_add(
  339|  6.29M|            match *digit {
  340|  6.29M|                b'0'..=b'9' => digit - b'0',
  341|  2.55M|                b'a'..=b'f' => digit - b'a' + 10,
  342|  7.65k|                _ => return None,
  343|       |            }
  344|  6.29M|            .into(),
  345|      0|        )?;
  346|       |    }
  347|   199k|    Some(value)
  348|   207k|}

_RNvMNtCs8JH8FkI8tas_5oxrdf7literalNtB2_7Literal6as_refCsi53KuwE5jZG_7rdf_xml:
  129|  29.1k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|  29.1k|        LiteralRef(match &self.0 {
  131|  27.6k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|      0|            LiteralContent::LanguageTaggedString { value, language } => {
  133|      0|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|  1.58k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|  1.58k|                value,
  137|  1.58k|                datatype: datatype.as_ref(),
  138|  1.58k|            },
  139|       |        })
  140|  29.1k|    }
_RNvXsD_NtCs8JH8FkI8tas_5oxrdf7literalNtB5_7LiteralNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsi53KuwE5jZG_7rdf_xml:
   34|  29.1k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMst_NtCs8JH8FkI8tas_5oxrdf7literalNtB5_10LiteralRef5valueCsi53KuwE5jZG_7rdf_xml:
  488|  29.1k|    pub const fn value(self) -> &'a str {
  489|  29.1k|        match self.0 {
  490|  27.6k|            LiteralRefContent::String(value)
  491|      0|            | LiteralRefContent::LanguageTaggedString { value, .. }
  492|  29.1k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  493|  29.1k|        }
  494|  29.1k|    }
_RNvMst_NtCs8JH8FkI8tas_5oxrdf7literalNtB5_10LiteralRef8languageCsi53KuwE5jZG_7rdf_xml:
  501|  29.1k|    pub const fn language(self) -> Option<&'a str> {
  502|  29.1k|        match self.0 {
  503|      0|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  504|  29.1k|            _ => None,
  505|       |        }
  506|  29.1k|    }
_RNvMst_NtCs8JH8FkI8tas_5oxrdf7literalNtB5_10LiteralRef8datatypeCsi53KuwE5jZG_7rdf_xml:
  513|  1.58k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  514|  1.58k|        match self.0 {
  515|      0|            LiteralRefContent::String(_) => xsd::STRING,
  516|      0|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  517|  1.58k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  518|       |        }
  519|  1.58k|    }
_RNvXsI_NtCs8JH8FkI8tas_5oxrdf7literalNtB5_14LiteralContentNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsi53KuwE5jZG_7rdf_xml:
   37|  29.1k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMst_NtCs8JH8FkI8tas_5oxrdf7literalNtB5_10LiteralRef8is_plainCsi53KuwE5jZG_7rdf_xml:
  526|  29.1k|    pub const fn is_plain(self) -> bool {
  527|  1.58k|        matches!(
  528|  29.1k|            self.0,
  529|       |            LiteralRefContent::String(_) | LiteralRefContent::LanguageTaggedString { .. }
  530|       |        )
  531|  29.1k|    }
_RINvMNtCs8JH8FkI8tas_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCsjOdcKtOMjJI_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   53|  3.16k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|  3.16k|        let value = value.into();
   55|  3.16k|        let datatype = datatype.into();
   56|  3.16k|        Self(if datatype == xsd::STRING {
   57|      0|            LiteralContent::String(value)
   58|       |        } else {
   59|  3.16k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|  3.16k|    }
_RINvMNtCs8JH8FkI8tas_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCsjOdcKtOMjJI_5alloc6string6StringEB5_:
   47|  55.2k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|  55.2k|        Self(LiteralContent::String(value.into()))
   49|  55.2k|    }

_RNvXsu_NtCs8JH8FkI8tas_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsi53KuwE5jZG_7rdf_xml:
  106|   199k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMs4_NtCs8JH8FkI8tas_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCsi53KuwE5jZG_7rdf_xml:
  128|   426k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   426k|        Self { iri }
  130|   426k|    }
_RNvMs4_NtCs8JH8FkI8tas_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCsi53KuwE5jZG_7rdf_xml:
  133|  25.2k|    pub const fn as_str(self) -> &'a str {
  134|  25.2k|        self.iri
  135|  25.2k|    }
_RNvXsp_NtCs8JH8FkI8tas_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsi53KuwE5jZG_7rdf_xml:
   17|  11.7k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMNtCs8JH8FkI8tas_5oxrdf10named_nodeNtB2_9NamedNode6as_strCsi53KuwE5jZG_7rdf_xml:
   44|   389k|    pub fn as_str(&self) -> &str {
   45|   389k|        self.iri.as_str()
   46|   389k|    }
_RNvXs0_NtCs8JH8FkI8tas_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs9nhK3FOW46N_4core3cmp9PartialEqeE2eqCsi53KuwE5jZG_7rdf_xml:
   68|   389k|    fn eq(&self, other: &str) -> bool {
   69|   389k|        self.as_str() == other
   70|   389k|    }
_RNvMs4_NtCs8JH8FkI8tas_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCsi53KuwE5jZG_7rdf_xml:
  138|  1.64k|    pub fn into_owned(self) -> NamedNode {
  139|  1.64k|        NamedNode::new_unchecked(self.iri)
  140|  1.64k|    }
_RNvMNtCs8JH8FkI8tas_5oxrdf10named_nodeNtB2_9NamedNode6as_refCsi53KuwE5jZG_7rdf_xml:
   54|   426k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|   426k|        NamedNodeRef::new_unchecked(&self.iri)
   56|   426k|    }
_RNvXsl_NtCs8JH8FkI8tas_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsi53KuwE5jZG_7rdf_xml:
   17|   423k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMs4_NtCs8JH8FkI8tas_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCs2FOzy0wGkcs_8oxrdfxml:
  133|   225k|    pub const fn as_str(self) -> &'a str {
  134|   225k|        self.iri
  135|   225k|    }
_RINvMNtCs8JH8FkI8tas_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|   383k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   383k|        Self { iri: iri.into() }
   41|   383k|    }
_RINvMNtCs8JH8FkI8tas_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCsjOdcKtOMjJI_5alloc6string6StringEB5_:
   39|   653k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   653k|        Self { iri: iri.into() }
   41|   653k|    }
_RNvMs4_NtCs8JH8FkI8tas_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|  3.16k|    pub const fn as_str(self) -> &'a str {
  134|  3.16k|        self.iri
  135|  3.16k|    }
_RNvMs4_NtCs8JH8FkI8tas_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|   381k|    pub fn into_owned(self) -> NamedNode {
  139|   381k|        NamedNode::new_unchecked(self.iri)
  140|   381k|    }
_RNvXs9_NtCs8JH8FkI8tas_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs9nhK3FOW46N_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|  3.16k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|  3.16k|        self.as_str() == other.as_str()
  175|  3.16k|    }
_RNvMNtCs8JH8FkI8tas_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|  3.16k|    pub fn as_str(&self) -> &str {
   45|  3.16k|        self.iri.as_str()
   46|  3.16k|    }
_RNvXs6_NtCs8JH8FkI8tas_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|   381k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|   381k|        node.into_owned()
  154|   381k|    }

_RNvXsL_NtCs8JH8FkI8tas_5oxrdf6tripleNtB5_4TermINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_7SubjectE4fromCsi53KuwE5jZG_7rdf_xml:
  520|  11.2k|    fn from(node: Subject) -> Self {
  521|  11.2k|        match node {
  522|  2.70k|            Subject::NamedNode(node) => node.into(),
  523|  8.55k|            Subject::BlankNode(node) => node.into(),
  524|       |            #[cfg(feature = "rdf-star")]
  525|      0|            Subject::Triple(triple) => Self::Triple(triple),
  526|       |        }
  527|  11.2k|    }
_RNvXs1a_NtCs8JH8FkI8tas_5oxrdf6tripleNtB6_9TripleRefINtNtCs9nhK3FOW46N_4core7convert4FromRNtB6_6TripleE4fromCsi53KuwE5jZG_7rdf_xml:
  926|   225k|    fn from(triple: &'a Triple) -> Self {
  927|   225k|        triple.as_ref()
  928|   225k|    }
_RNvMsy_NtCs8JH8FkI8tas_5oxrdf6tripleNtB5_4Term6as_refCsi53KuwE5jZG_7rdf_xml:
  417|   225k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|   225k|        match self {
  419|   192k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|  4.27k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  29.1k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|      0|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|   225k|    }
_RNvMs16_NtCs8JH8FkI8tas_5oxrdf6tripleNtB6_6Triple6as_refCsi53KuwE5jZG_7rdf_xml:
  835|   225k|    pub fn as_ref(&self) -> TripleRef<'_> {
  836|   225k|        TripleRef {
  837|   225k|            subject: self.subject.as_ref(),
  838|   225k|            predicate: self.predicate.as_ref(),
  839|   225k|            object: self.object.as_ref(),
  840|   225k|        }
  841|   225k|    }
_RNvMsn_NtCs8JH8FkI8tas_5oxrdf6tripleNtB5_10SubjectRef10into_ownedCsi53KuwE5jZG_7rdf_xml:
  294|   196k|    pub fn into_owned(self) -> Subject {
  295|   196k|        match self {
  296|  1.64k|            Self::NamedNode(node) => Subject::NamedNode(node.into_owned()),
  297|   195k|            Self::BlankNode(node) => Subject::BlankNode(node.into_owned()),
  298|       |            #[cfg(feature = "rdf-star")]
  299|      0|            Self::Triple(triple) => Subject::Triple(Box::new(triple.clone())),
  300|       |        }
  301|   196k|    }
_RNvXs2p_NtCs8JH8FkI8tas_5oxrdf6tripleNtB6_6TripleNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsi53KuwE5jZG_7rdf_xml:
  780|   225k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXse_NtCs8JH8FkI8tas_5oxrdf6tripleNtB5_7SubjectINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromCsi53KuwE5jZG_7rdf_xml:
  200|  2.85k|    fn from(node: NamedNode) -> Self {
  201|  2.85k|        Self::NamedNode(node)
  202|  2.85k|    }
_RNvXs1V_NtCs8JH8FkI8tas_5oxrdf6tripleNtB6_7SubjectNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsi53KuwE5jZG_7rdf_xml:
  155|   225k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMsc_NtCs8JH8FkI8tas_5oxrdf6tripleNtB5_7Subject6as_refCsi53KuwE5jZG_7rdf_xml:
  181|   440k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|   440k|        match self {
  183|  6.53k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|   433k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|      0|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|   440k|    }
_RNvXs1X_NtCs8JH8FkI8tas_5oxrdf6tripleNtB6_7SubjectNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsi53KuwE5jZG_7rdf_xml:
  155|   658k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs22_NtCs8JH8FkI8tas_5oxrdf6tripleNtB6_10SubjectRefNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsi53KuwE5jZG_7rdf_xml:
  268|   214k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RNvXs2a_NtCs8JH8FkI8tas_5oxrdf6tripleNtB6_4TermNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsi53KuwE5jZG_7rdf_xml:
  385|   225k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RINvMs16_NtCs8JH8FkI8tas_5oxrdf6tripleNtB7_6Triple3newNtB7_7SubjectNtNtB9_10named_node12NamedNodeRefNtB15_9NamedNodeECsi53KuwE5jZG_7rdf_xml:
  795|   381k|    pub fn new(
  796|   381k|        subject: impl Into<Subject>,
  797|   381k|        predicate: impl Into<NamedNode>,
  798|   381k|        object: impl Into<Term>,
  799|   381k|    ) -> Self {
  800|   381k|        Self {
  801|   381k|            subject: subject.into(),
  802|   381k|            predicate: predicate.into(),
  803|   381k|            object: object.into(),
  804|   381k|        }
  805|   381k|    }
_RINvMs16_NtCs8JH8FkI8tas_5oxrdf6tripleNtB7_6Triple3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtNtB9_7literal7LiteralECsi53KuwE5jZG_7rdf_xml:
  795|  2.79k|    pub fn new(
  796|  2.79k|        subject: impl Into<Subject>,
  797|  2.79k|        predicate: impl Into<NamedNode>,
  798|  2.79k|        object: impl Into<Term>,
  799|  2.79k|    ) -> Self {
  800|  2.79k|        Self {
  801|  2.79k|            subject: subject.into(),
  802|  2.79k|            predicate: predicate.into(),
  803|  2.79k|            object: object.into(),
  804|  2.79k|        }
  805|  2.79k|    }
_RINvMs16_NtCs8JH8FkI8tas_5oxrdf6tripleNtB7_6Triple3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtB7_4TermECsi53KuwE5jZG_7rdf_xml:
  795|  66.8k|    pub fn new(
  796|  66.8k|        subject: impl Into<Subject>,
  797|  66.8k|        predicate: impl Into<NamedNode>,
  798|  66.8k|        object: impl Into<Term>,
  799|  66.8k|    ) -> Self {
  800|  66.8k|        Self {
  801|  66.8k|            subject: subject.into(),
  802|  66.8k|            predicate: predicate.into(),
  803|  66.8k|            object: object.into(),
  804|  66.8k|        }
  805|  66.8k|    }
_RNvXsC_NtCs8JH8FkI8tas_5oxrdf6tripleNtB5_4TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  451|  8.55k|    fn from(node: BlankNode) -> Self {
  452|  8.55k|        Self::BlankNode(node)
  453|  8.55k|    }
_RNvXsA_NtCs8JH8FkI8tas_5oxrdf6tripleNtB5_4TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|   384k|    fn from(node: NamedNode) -> Self {
  438|   384k|        Self::NamedNode(node)
  439|   384k|    }
_RNvXse_NtCs8JH8FkI8tas_5oxrdf6tripleNtB5_7SubjectINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|  3.09k|    fn from(node: NamedNode) -> Self {
  201|  3.09k|        Self::NamedNode(node)
  202|  3.09k|    }
_RNvXsg_NtCs8JH8FkI8tas_5oxrdf6tripleNtB5_7SubjectINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|   392k|    fn from(node: BlankNode) -> Self {
  215|   392k|        Self::BlankNode(node)
  216|   392k|    }
_RNvXsE_NtCs8JH8FkI8tas_5oxrdf6tripleNtB5_4TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  465|  58.3k|    fn from(literal: Literal) -> Self {
  466|  58.3k|        Self::Literal(literal)
  467|  58.3k|    }

_RINvMs0_NtCs2FOzy0wGkcs_8oxrdfxml5errorNtB6_17RdfXmlSyntaxError3msgNtNtCsjOdcKtOMjJI_5alloc6string6StringECsi53KuwE5jZG_7rdf_xml:
   68|   211k|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   69|   211k|        Self(SyntaxErrorKind::Msg(msg.into()))
   70|   211k|    }
_RINvMs0_NtCs2FOzy0wGkcs_8oxrdfxml5errorNtB6_17RdfXmlSyntaxError3msgReECsi53KuwE5jZG_7rdf_xml:
   68|   152k|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   69|   152k|        Self(SyntaxErrorKind::Msg(msg.into()))
   70|   152k|    }
_RNvXs_NtCs2FOzy0wGkcs_8oxrdfxml5errorNtB4_16RdfXmlParseErrorINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsdBczmAo6fNM_9quick_xml6errors5ErrorE4fromCsi53KuwE5jZG_7rdf_xml:
   30|   484k|    fn from(error: quick_xml::Error) -> Self {
   31|   484k|        match error {
   32|      0|            quick_xml::Error::Io(error) => {
   33|      0|                Self::Io(Arc::try_unwrap(error).unwrap_or_else(|e| io::Error::new(e.kind(), e)))
   34|       |            }
   35|   484k|            _ => Self::Syntax(RdfXmlSyntaxError(SyntaxErrorKind::Xml(error))),
   36|       |        }
   37|   484k|    }
_RNvXs6_NtCs2FOzy0wGkcs_8oxrdfxml5errorNtB5_16RdfXmlParseErrorINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_17RdfXmlSyntaxErrorE4from:
    7|   452k|#[derive(Debug, thiserror::Error)]

_RNvMNtCs2FOzy0wGkcs_8oxrdfxml6parserNtB2_12RdfXmlParser3newCsi53KuwE5jZG_7rdf_xml:
   63|  40.8k|    pub fn new() -> Self {
   64|  40.8k|        Self::default()
   65|  40.8k|    }
_RNvXs3_NtCs2FOzy0wGkcs_8oxrdfxml6parserNtB5_12RdfXmlParserNtNtCs9nhK3FOW46N_4core7default7Default7defaultCsi53KuwE5jZG_7rdf_xml:
   53|  40.8k|#[derive(Default)]
_RNvMs2_NtCs2FOzy0wGkcs_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE17convert_attributeCsi53KuwE5jZG_7rdf_xml:
 1153|   254k|    fn convert_attribute(&self, attribute: &Attribute<'_>) -> Result<String, RdfXmlParseError> {
 1154|   254k|        Ok(attribute
 1155|   254k|            .decode_and_unescape_value_with(&self.reader, |e| self.resolve_entity(e))?
 1156|   245k|            .into_owned())
 1157|   254k|    }
_RNCNvMs2_NtCs2FOzy0wGkcs_8oxrdfxml6parserINtB7_12RdfXmlReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE15resolve_ns_name0Csi53KuwE5jZG_7rdf_xml:
  920|  19.4k|                Ok(unescape_with(&self.reader.decoder().decode(&value)?, |e| {
  921|  19.4k|                    self.resolve_entity(e)
  922|  19.4k|                })
_RNvMs2_NtCs2FOzy0wGkcs_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE14resolve_entityCsi53KuwE5jZG_7rdf_xml:
 1206|  40.3k|    fn resolve_entity(&self, e: &str) -> Option<&str> {
 1207|  40.3k|        self.custom_entities.get(e).map(String::as_str)
 1208|  40.3k|    }
_RNvMs2_NtCs2FOzy0wGkcs_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE11new_literalCsi53KuwE5jZG_7rdf_xml:
 1105|  55.5k|    fn new_literal(
 1106|  55.5k|        value: String,
 1107|  55.5k|        language: Option<String>,
 1108|  55.5k|        datatype: Option<NamedNode>,
 1109|  55.5k|    ) -> Literal {
 1110|  55.5k|        if let Some(datatype) = datatype {
 1111|  3.16k|            Literal::new_typed_literal(value, datatype)
 1112|  52.4k|        } else if let Some(language) = language {
 1113|      0|            Literal::new_language_tagged_literal_unchecked(value, language)
 1114|       |        } else {
 1115|  52.4k|            Literal::new_simple_literal(value)
 1116|       |        }
 1117|  55.5k|    }
_RNvMs2_NtCs2FOzy0wGkcs_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE11parse_eventCsi53KuwE5jZG_7rdf_xml:
  439|  2.53M|    fn parse_event(
  440|  2.53M|        &mut self,
  441|  2.53M|        event: Event<'_>,
  442|  2.53M|        results: &mut Vec<Triple>,
  443|  2.53M|    ) -> Result<(), RdfXmlParseError> {
  444|  2.53M|        match event {
  445|  1.10M|            Event::Start(event) => self.parse_start_event(&event, results),
  446|   317k|            Event::End(event) => self.parse_end_event(&event, results),
  447|      0|            Event::Empty(_) => Err(RdfXmlSyntaxError::msg(
  448|      0|                "The expand_empty_elements option must be enabled",
  449|      0|            )
  450|      0|            .into()),
  451|  1.02M|            Event::Text(event) => self.parse_text_event(&event),
  452|  4.23k|            Event::CData(event) => self.parse_text_event(&event.escape()?),
  453|  6.06k|            Event::Comment(_) | Event::PI(_) => Ok(()),
  454|  42.2k|            Event::Decl(decl) => {
  455|  42.2k|                if let Some(encoding) = decl.encoding() {
  456|  41.4k|                    if !is_utf8(&encoding?) {
  457|  16.6k|                        return Err(RdfXmlSyntaxError::msg(
  458|  16.6k|                            "Only UTF-8 is supported by the RDF/XML parser",
  459|  16.6k|                        )
  460|  16.6k|                        .into());
  461|  20.7k|                    }
  462|    833|                }
  463|  21.5k|                Ok(())
  464|       |            }
  465|      0|            Event::DocType(dt) => self.parse_doctype(&dt),
  466|       |            Event::Eof => {
  467|  40.8k|                self.is_end = true;
  468|  40.8k|                Ok(())
  469|       |            }
  470|       |        }
  471|  2.53M|    }
_RNvMs2_NtCs2FOzy0wGkcs_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE15resolve_ns_nameCsi53KuwE5jZG_7rdf_xml:
  910|  1.34M|    fn resolve_ns_name(
  911|  1.34M|        &self,
  912|  1.34M|        namespace: ResolveResult<'_>,
  913|  1.34M|        local_name: LocalName<'_>,
  914|  1.34M|    ) -> Result<String, RdfXmlParseError> {
  915|  1.34M|        match namespace {
  916|  1.17M|            ResolveResult::Bound(ns) => {
  917|  1.17M|                let mut value = Vec::with_capacity(ns.as_ref().len() + local_name.as_ref().len());
  918|  1.17M|                value.extend_from_slice(ns.as_ref());
  919|  1.17M|                value.extend_from_slice(local_name.as_ref());
  920|  1.17M|                Ok(unescape_with(&self.reader.decoder().decode(&value)?, |e| {
  921|       |                    self.resolve_entity(e)
  922|       |                })
  923|  1.13M|                .map_err(Error::from)?
  924|  1.09M|                .to_string())
  925|       |            }
  926|       |            ResolveResult::Unbound => {
  927|   128k|                Err(RdfXmlSyntaxError::msg("XML namespaces are required in RDF/XML").into())
  928|       |            }
  929|  37.0k|            ResolveResult::Unknown(v) => Err(RdfXmlSyntaxError::msg(format!(
  930|  37.0k|                "Unknown prefix {}:",
  931|  37.0k|                self.reader.decoder().decode(&v)?
  932|       |            ))
  933|  28.7k|            .into()),
  934|       |        }
  935|  1.34M|    }
_RNCNvMs2_NtCs2FOzy0wGkcs_8oxrdfxml6parserINtB7_12RdfXmlReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE9parse_iri0Csi53KuwE5jZG_7rdf_xml:
 1196|  88.1k|                .map_err(|error| {
 1197|  88.1k|                    RdfXmlSyntaxError(SyntaxErrorKind::InvalidIri {
 1198|  88.1k|                        iri: relative_iri,
 1199|  88.1k|                        error,
 1200|  88.1k|                    })
 1201|  88.1k|                })?
_RNCNvMs2_NtCs2FOzy0wGkcs_8oxrdfxml6parserINtB7_12RdfXmlReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE16parse_text_event0Csi53KuwE5jZG_7rdf_xml:
  878|  17.3k|        let text = event.unescape_with(|e| self.resolve_entity(e))?.to_string();
_RNvMs0_NtCs2FOzy0wGkcs_8oxrdfxml6parserINtB5_20FromReadRdfXmlReaderRShE10parse_stepCsi53KuwE5jZG_7rdf_xml:
  239|  2.54M|    fn parse_step(&mut self) -> Result<(), RdfXmlParseError> {
  240|  2.54M|        self.reader_buffer.clear();
  241|  2.54M|        let event = self
  242|  2.54M|            .reader
  243|  2.54M|            .reader
  244|  2.54M|            .read_event_into(&mut self.reader_buffer)?;
  245|  2.53M|        self.reader.parse_event(event, &mut self.results)
  246|  2.54M|    }
_RINvMNtCs2FOzy0wGkcs_8oxrdfxml6parserNtB3_12RdfXmlParser10parse_readRShECsi53KuwE5jZG_7rdf_xml:
  112|  40.8k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadRdfXmlReader<R> {
  113|  40.8k|        FromReadRdfXmlReader {
  114|  40.8k|            results: Vec::new(),
  115|  40.8k|            reader: self.parse(BufReader::new(read)),
  116|  40.8k|            reader_buffer: Vec::default(),
  117|  40.8k|        }
  118|  40.8k|    }
_RNvXs_NtCs2FOzy0wGkcs_8oxrdfxml6parserINtB4_20FromReadRdfXmlReaderRShENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCsi53KuwE5jZG_7rdf_xml:
  219|  1.42M|    fn next(&mut self) -> Option<Self::Item> {
  220|       |        loop {
  221|  3.03M|            if let Some(triple) = self.results.pop() {
  222|   451k|                return Some(Ok(triple));
  223|  2.58M|            } else if self.reader.is_end {
  224|  40.8k|                return None;
  225|  2.54M|            }
  226|  2.54M|            if let Err(e) = self.parse_step() {
  227|   936k|                return Some(Err(e));
  228|  1.60M|            }
  229|       |        }
  230|  1.42M|    }
_RINvMNtCs2FOzy0wGkcs_8oxrdfxml6parserNtB3_12RdfXmlParser5parseINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEECsi53KuwE5jZG_7rdf_xml:
  164|  40.8k|    fn parse<T>(&self, reader: T) -> RdfXmlReader<T> {
  165|  40.8k|        let mut reader = NsReader::from_reader(reader);
  166|  40.8k|        reader.expand_empty_elements(true);
  167|  40.8k|        RdfXmlReader {
  168|  40.8k|            reader,
  169|  40.8k|            state: vec![RdfXmlState::Doc {
  170|  40.8k|                base_iri: self.base.clone(),
  171|  40.8k|            }],
  172|  40.8k|            custom_entities: HashMap::default(),
  173|  40.8k|            in_literal_depth: 0,
  174|  40.8k|            known_rdf_id: HashSet::default(),
  175|  40.8k|            is_end: false,
  176|  40.8k|            unchecked: self.unchecked,
  177|  40.8k|        }
  178|  40.8k|    }
_RNvMs2_NtCs2FOzy0wGkcs_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE22resolve_attribute_nameCsi53KuwE5jZG_7rdf_xml:
  905|   271k|    fn resolve_attribute_name(&self, qname: QName<'_>) -> Result<String, RdfXmlParseError> {
  906|   271k|        let (namespace, local_name) = self.reader.resolve_attribute(qname);
  907|   271k|        self.resolve_ns_name(namespace, local_name)
  908|   271k|    }
_RNvMs2_NtCs2FOzy0wGkcs_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE11resolve_iriCsi53KuwE5jZG_7rdf_xml:
 1167|  19.2k|    fn resolve_iri(
 1168|  19.2k|        &self,
 1169|  19.2k|        base_iri: &Option<Iri<String>>,
 1170|  19.2k|        relative_iri: String,
 1171|  19.2k|    ) -> Result<NamedNode, RdfXmlSyntaxError> {
 1172|  19.2k|        if let Some(base_iri) = base_iri {
 1173|       |            Ok(NamedNode::new_unchecked(
 1174|      0|                if self.unchecked {
 1175|      0|                    base_iri.resolve_unchecked(&relative_iri)
 1176|       |                } else {
 1177|      0|                    base_iri.resolve(&relative_iri).map_err(|error| {
 1178|       |                        RdfXmlSyntaxError(SyntaxErrorKind::InvalidIri {
 1179|       |                            iri: relative_iri,
 1180|       |                            error,
 1181|       |                        })
 1182|      0|                    })?
 1183|       |                }
 1184|      0|                .into_inner(),
 1185|       |            ))
 1186|       |        } else {
 1187|  19.2k|            self.parse_iri(relative_iri)
 1188|       |        }
 1189|  19.2k|    }
_RNvMs2_NtCs2FOzy0wGkcs_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE16parse_text_eventCsi53KuwE5jZG_7rdf_xml:
  877|  1.02M|    fn parse_text_event(&mut self, event: &BytesText<'_>) -> Result<(), RdfXmlParseError> {
  878|  1.02M|        let text = event.unescape_with(|e| self.resolve_entity(e))?.to_string();
  879|   687k|        match self.state.last_mut() {
  880|  66.6k|            Some(RdfXmlState::PropertyElt { object, .. }) => {
  881|  66.6k|                if !event.iter().copied().all(is_whitespace) {
  882|  64.7k|                    *object = Some(NodeOrText::Text(text));
  883|  64.7k|                }
  884|  66.6k|                Ok(())
  885|       |            }
  886|  13.6k|            Some(RdfXmlState::ParseTypeLiteralPropertyElt { writer, .. }) => {
  887|  13.6k|                writer.write_event(Event::Text(BytesText::new(&text)))?;
  888|  13.6k|                Ok(())
  889|       |            }
  890|       |            _ => {
  891|   606k|                if event.iter().copied().all(is_whitespace) {
  892|   472k|                    Ok(())
  893|       |                } else {
  894|   134k|                    Err(RdfXmlSyntaxError::msg(format!("Unexpected text event: '{text}'")).into())
  895|       |                }
  896|       |            }
  897|       |        }
  898|  1.02M|    }
_RNvMs2_NtCs2FOzy0wGkcs_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE14build_node_eltCsi53KuwE5jZG_7rdf_xml:
  938|   389k|    fn build_node_elt(
  939|   389k|        iri: NamedNode,
  940|   389k|        base_iri: Option<Iri<String>>,
  941|   389k|        language: Option<String>,
  942|   389k|        id_attr: Option<NamedNode>,
  943|   389k|        node_id_attr: Option<BlankNode>,
  944|   389k|        about_attr: Option<NamedNode>,
  945|   389k|        type_attr: Option<NamedNode>,
  946|   389k|        property_attrs: Vec<(NamedNode, String)>,
  947|   389k|        results: &mut Vec<Triple>,
  948|   389k|    ) -> Result<RdfXmlState, RdfXmlSyntaxError> {
  949|   389k|        let subject = match (id_attr, node_id_attr, about_attr) {
  950|      0|            (Some(id_attr), None, None) => Subject::from(id_attr),
  951|   200k|            (None, Some(node_id_attr), None) => node_id_attr.into(),
  952|  3.09k|            (None, None, Some(about_attr)) => about_attr.into(),
  953|   185k|            (None, None, None) => BlankNode::default().into(),
  954|       |            (Some(_), Some(_), _) => {
  955|      0|                return Err(RdfXmlSyntaxError::msg(
  956|      0|                    "Not both rdf:ID and rdf:nodeID could be set at the same time",
  957|      0|                ))
  958|       |            }
  959|       |            (_, Some(_), Some(_)) => {
  960|      0|                return Err(RdfXmlSyntaxError::msg(
  961|      0|                    "Not both rdf:nodeID and rdf:resource could be set at the same time",
  962|      0|                ))
  963|       |            }
  964|       |            (Some(_), _, Some(_)) => {
  965|      0|                return Err(RdfXmlSyntaxError::msg(
  966|      0|                    "Not both rdf:ID and rdf:resource could be set at the same time",
  967|      0|                ))
  968|       |            }
  969|       |        };
  970|       |
  971|   389k|        Self::emit_property_attrs(&subject, property_attrs, &language, results);
  972|       |
  973|   389k|        if let Some(type_attr) = type_attr {
  974|    542|            results.push(Triple::new(subject.clone(), rdf::TYPE, type_attr));
  975|   388k|        }
  976|       |
  977|   389k|        if iri != *RDF_DESCRIPTION {
  978|   381k|            results.push(Triple::new(subject.clone(), rdf::TYPE, iri));
  979|   381k|        }
  980|   389k|        Ok(RdfXmlState::NodeElt {
  981|   389k|            base_iri,
  982|   389k|            language,
  983|   389k|            subject,
  984|   389k|            li_counter: 0,
  985|   389k|        })
  986|   389k|    }
_RNvMs2_NtCs2FOzy0wGkcs_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE17parse_start_eventCsi53KuwE5jZG_7rdf_xml:
  511|  1.10M|    fn parse_start_event(
  512|  1.10M|        &mut self,
  513|  1.10M|        event: &BytesStart<'_>,
  514|  1.10M|        results: &mut Vec<Triple>,
  515|  1.10M|    ) -> Result<(), RdfXmlParseError> {
  516|       |        #[derive(PartialEq, Eq)]
  517|       |        enum RdfXmlParseType {
  518|       |            Default,
  519|       |            Collection,
  520|       |            Literal,
  521|       |            Resource,
  522|       |            Other,
  523|       |        }
  524|       |
  525|       |        #[derive(PartialEq, Eq)]
  526|       |        enum RdfXmlNextProduction {
  527|       |            Rdf,
  528|       |            NodeElt,
  529|       |            PropertyElt { subject: Subject },
  530|       |        }
  531|       |
  532|       |        // Literal case
  533|  1.10M|        if let Some(RdfXmlState::ParseTypeLiteralPropertyElt { writer, .. }) = self.state.last_mut()
  534|       |        {
  535|  31.2k|            let mut clean_event = BytesStart::new(
  536|  34.4k|                self.reader
  537|  34.4k|                    .decoder()
  538|  34.4k|                    .decode(event.name().as_ref())?
  539|  31.2k|                    .to_string(),
  540|       |            );
  541|  31.2k|            for attr in event.attributes() {
  542|  19.1k|                clean_event.push_attribute(attr.map_err(Error::InvalidAttr)?);
  543|       |            }
  544|  19.7k|            writer.write_event(Event::Start(clean_event))?;
  545|  19.7k|            self.in_literal_depth += 1;
  546|  19.7k|            return Ok(());
  547|  1.06M|        }
  548|       |
  549|  1.06M|        let tag_name = self.resolve_tag_name(event.name())?;
  550|       |
  551|       |        // We read attributes
  552|   829k|        let (mut language, mut base_iri) = if let Some(current_state) = self.state.last() {
  553|   818k|            (
  554|   818k|                current_state.language().cloned(),
  555|   818k|                current_state.base_iri().cloned(),
  556|   818k|            )
  557|       |        } else {
  558|  10.7k|            (None, None)
  559|       |        };
  560|       |
  561|   829k|        let mut id_attr = None;
  562|   829k|        let mut node_id_attr = None;
  563|   829k|        let mut about_attr = None;
  564|   829k|        let mut property_attrs = Vec::default();
  565|   829k|        let mut resource_attr = None;
  566|   829k|        let mut datatype_attr = None;
  567|   829k|        let mut parse_type = RdfXmlParseType::Default;
  568|   829k|        let mut type_attr = None;
  569|       |
  570|   829k|        for attribute in event.attributes() {
  571|   549k|            let attribute = attribute.map_err(Error::InvalidAttr)?;
  572|   523k|            if attribute.key.as_ref().starts_with(b"xml") {
  573|   252k|                if attribute.key.as_ref() == b"xml:lang" {
  574|      0|                    let tag = self.convert_attribute(&attribute)?.to_ascii_lowercase();
  575|      0|                    language = Some(if self.unchecked {
  576|      0|                        tag
  577|       |                    } else {
  578|      0|                        LanguageTag::parse(tag.to_ascii_lowercase())
  579|      0|                            .map_err(|error| {
  580|       |                                RdfXmlSyntaxError(SyntaxErrorKind::InvalidLanguageTag {
  581|       |                                    tag,
  582|       |                                    error,
  583|       |                                })
  584|      0|                            })?
  585|      0|                            .into_inner()
  586|       |                    });
  587|   252k|                } else if attribute.key.as_ref() == b"xml:base" {
  588|      0|                    let iri = self.convert_attribute(&attribute)?;
  589|      0|                    base_iri = Some(if self.unchecked {
  590|      0|                        Iri::parse_unchecked(iri.clone())
  591|       |                    } else {
  592|      0|                        Iri::parse(iri.clone()).map_err(|error| {
  593|       |                            RdfXmlSyntaxError(SyntaxErrorKind::InvalidIri { iri, error })
  594|      0|                        })?
  595|       |                    })
  596|   252k|                } else {
  597|   252k|                    // We ignore other xml attributes
  598|   252k|                }
  599|       |            } else {
  600|   271k|                let attribute_url = self.resolve_attribute_name(attribute.key)?;
  601|   268k|                if *attribute_url == *RDF_ID {
  602|  4.27k|                    let mut id = self.convert_attribute(&attribute)?;
  603|  3.75k|                    if !is_nc_name(&id) {
  604|  1.91k|                        return Err(RdfXmlSyntaxError::msg(format!(
  605|  1.91k|                            "{id} is not a valid rdf:ID value"
  606|  1.91k|                        ))
  607|  1.91k|                        .into());
  608|  1.83k|                    }
  609|  1.83k|                    id.insert(0, '#');
  610|  1.83k|                    id_attr = Some(id);
  611|   264k|                } else if *attribute_url == *RDF_BAG_ID {
  612|  7.54k|                    let bag_id = self.convert_attribute(&attribute)?;
  613|  6.31k|                    if !is_nc_name(&bag_id) {
  614|  4.14k|                        return Err(RdfXmlSyntaxError::msg(format!(
  615|  4.14k|                            "{bag_id} is not a valid rdf:bagID value"
  616|  4.14k|                        ))
  617|  4.14k|                        .into());
  618|  2.17k|                    }
  619|   256k|                } else if *attribute_url == *RDF_NODE_ID {
  620|   211k|                    let id = self.convert_attribute(&attribute)?;
  621|   210k|                    if !is_nc_name(&id) {
  622|  2.84k|                        return Err(RdfXmlSyntaxError::msg(format!(
  623|  2.84k|                            "{id} is not a valid rdf:nodeID value"
  624|  2.84k|                        ))
  625|  2.84k|                        .into());
  626|   207k|                    }
  627|   207k|                    node_id_attr = Some(BlankNode::new_unchecked(id));
  628|  44.9k|                } else if *attribute_url == *RDF_ABOUT {
  629|  6.42k|                    about_attr = Some(attribute);
  630|  38.4k|                } else if *attribute_url == *RDF_RESOURCE {
  631|  5.61k|                    resource_attr = Some(attribute);
  632|  32.8k|                } else if *attribute_url == *RDF_DATATYPE {
  633|  6.95k|                    datatype_attr = Some(attribute);
  634|  25.9k|                } else if *attribute_url == *RDF_PARSE_TYPE {
  635|  6.30k|                    parse_type = match attribute.value.as_ref() {
  636|  6.30k|                        b"Collection" => RdfXmlParseType::Collection,
  637|  5.55k|                        b"Literal" => RdfXmlParseType::Literal,
  638|  3.37k|                        b"Resource" => RdfXmlParseType::Resource,
  639|  6.30k|                        _ => RdfXmlParseType::Other,
  640|       |                    };
  641|  19.6k|                } else if attribute_url == rdf::TYPE.as_str() {
  642|  3.60k|                    type_attr = Some(attribute);
  643|  16.0k|                } else if RESERVED_RDF_ATTRIBUTES.contains(&&*attribute_url) {
  644|  2.56k|                    return Err(RdfXmlSyntaxError::msg(format!(
  645|  2.56k|                        "{attribute_url} is not a valid attribute"
  646|  2.56k|                    ))
  647|  2.56k|                    .into());
  648|       |                } else {
  649|  13.4k|                    property_attrs.push((
  650|  13.4k|                        self.parse_iri(attribute_url)?,
  651|  10.7k|                        self.convert_attribute(&attribute)?,
  652|       |                    ));
  653|       |                }
  654|       |            }
  655|       |        }
  656|       |
  657|       |        // Parsing with the base URI
  658|   778k|        let id_attr = match id_attr {
  659|    961|            Some(iri) => {
  660|    961|                let iri = self.resolve_iri(&base_iri, iri)?;
  661|      0|                if !self.unchecked {
  662|      0|                    if self.known_rdf_id.contains(iri.as_str()) {
  663|      0|                        return Err(RdfXmlSyntaxError::msg(format!(
  664|      0|                            "{iri} has already been used as rdf:ID value"
  665|      0|                        ))
  666|      0|                        .into());
  667|      0|                    }
  668|      0|                    self.known_rdf_id.insert(iri.as_str().into());
  669|      0|                }
  670|      0|                Some(iri)
  671|       |            }
  672|   777k|            None => None,
  673|       |        };
  674|   777k|        let about_attr = match about_attr {
  675|  5.69k|            Some(attr) => Some(self.convert_iri_attribute(&base_iri, &attr)?),
  676|   772k|            None => None,
  677|       |        };
  678|   777k|        let resource_attr = match resource_attr {
  679|  5.04k|            Some(attr) => Some(self.convert_iri_attribute(&base_iri, &attr)?),
  680|   771k|            None => None,
  681|       |        };
  682|   775k|        let datatype_attr = match datatype_attr {
  683|  6.39k|            Some(attr) => Some(self.convert_iri_attribute(&base_iri, &attr)?),
  684|   769k|            None => None,
  685|       |        };
  686|   774k|        let type_attr = match type_attr {
  687|  3.06k|            Some(attr) => Some(self.convert_iri_attribute(&base_iri, &attr)?),
  688|   771k|            None => None,
  689|       |        };
  690|       |
  691|   773k|        let expected_production = match self.state.last() {
  692|  90.7k|            Some(RdfXmlState::Doc { .. }) => RdfXmlNextProduction::Rdf,
  693|       |            Some(
  694|       |                RdfXmlState::Rdf { .. }
  695|       |                | RdfXmlState::PropertyElt { .. }
  696|       |                | RdfXmlState::ParseTypeCollectionPropertyElt { .. },
  697|   402k|            ) => RdfXmlNextProduction::NodeElt,
  698|   273k|            Some(RdfXmlState::NodeElt { subject, .. }) => RdfXmlNextProduction::PropertyElt {
  699|   273k|                subject: subject.clone(),
  700|   273k|            },
  701|       |            Some(RdfXmlState::ParseTypeLiteralPropertyElt { .. }) => {
  702|      0|                return Err(
  703|      0|                    RdfXmlSyntaxError::msg("ParseTypeLiteralPropertyElt production children should never be considered as a RDF/XML content").into()
  704|      0|                );
  705|       |            }
  706|       |            None => {
  707|  7.24k|                return Err(RdfXmlSyntaxError::msg(
  708|  7.24k|                    "No state in the stack: the XML is not balanced",
  709|  7.24k|                )
  710|  7.24k|                .into());
  711|       |            }
  712|       |        };
  713|       |
  714|   766k|        let new_state = match expected_production {
  715|       |            RdfXmlNextProduction::Rdf => {
  716|  90.7k|                if *tag_name == *RDF_RDF {
  717|  21.2k|                    RdfXmlState::Rdf { base_iri, language }
  718|  69.4k|                } else if RESERVED_RDF_ELEMENTS.contains(&&*tag_name) {
  719|  9.89k|                    return Err(RdfXmlSyntaxError::msg(format!(
  720|  9.89k|                        "Invalid node element tag name: {tag_name}"
  721|  9.89k|                    ))
  722|  9.89k|                    .into());
  723|       |                } else {
  724|       |                    Self::build_node_elt(
  725|  59.5k|                        self.parse_iri(tag_name)?,
  726|  13.7k|                        base_iri,
  727|  13.7k|                        language,
  728|  13.7k|                        id_attr,
  729|  13.7k|                        node_id_attr,
  730|  13.7k|                        about_attr,
  731|  13.7k|                        type_attr,
  732|  13.7k|                        property_attrs,
  733|  13.7k|                        results,
  734|      0|                    )?
  735|       |                }
  736|       |            }
  737|       |            RdfXmlNextProduction::NodeElt => {
  738|   402k|                if RESERVED_RDF_ELEMENTS.contains(&&*tag_name) {
  739|  12.9k|                    return Err(RdfXmlSyntaxError::msg(format!(
  740|  12.9k|                        "Invalid property element tag name: {tag_name}"
  741|  12.9k|                    ))
  742|  12.9k|                    .into());
  743|   389k|                }
  744|   389k|                Self::build_node_elt(
  745|   389k|                    self.parse_iri(tag_name)?,
  746|   375k|                    base_iri,
  747|   375k|                    language,
  748|   375k|                    id_attr,
  749|   375k|                    node_id_attr,
  750|   375k|                    about_attr,
  751|   375k|                    type_attr,
  752|   375k|                    property_attrs,
  753|   375k|                    results,
  754|      0|                )?
  755|       |            }
  756|   273k|            RdfXmlNextProduction::PropertyElt { subject } => {
  757|   273k|                let iri = if *tag_name == *RDF_LI {
  758|  2.19k|                    let Some(RdfXmlState::NodeElt { li_counter, .. }) = self.state.last_mut()
  759|       |                    else {
  760|      0|                        return Err(RdfXmlSyntaxError::msg(format!(
  761|      0|                            "Invalid property element tag name: {tag_name}"
  762|      0|                        ))
  763|      0|                        .into());
  764|       |                    };
  765|  2.19k|                    *li_counter += 1;
  766|  2.19k|                    NamedNode::new_unchecked(format!(
  767|  2.19k|                        "http://www.w3.org/1999/02/22-rdf-syntax-ns#_{li_counter}"
  768|  2.19k|                    ))
  769|   271k|                } else if RESERVED_RDF_ELEMENTS.contains(&&*tag_name)
  770|   260k|                    || *tag_name == *RDF_DESCRIPTION
  771|       |                {
  772|  14.0k|                    return Err(RdfXmlSyntaxError::msg(format!(
  773|  14.0k|                        "Invalid property element tag name: {tag_name}"
  774|  14.0k|                    ))
  775|  14.0k|                    .into());
  776|       |                } else {
  777|   257k|                    self.parse_iri(tag_name)?
  778|       |                };
  779|   236k|                match parse_type {
  780|       |                    RdfXmlParseType::Default => {
  781|   235k|                        if resource_attr.is_some()
  782|   232k|                            || node_id_attr.is_some()
  783|   227k|                            || !property_attrs.is_empty()
  784|       |                        {
  785|  9.18k|                            let object = match (resource_attr, node_id_attr)
  786|       |                    {
  787|  2.85k|                        (Some(resource_attr), None) => Subject::from(resource_attr),
  788|  5.05k|                        (None, Some(node_id_attr)) => node_id_attr.into(),
  789|  1.28k|                        (None, None) => BlankNode::default().into(),
  790|      0|                        (Some(_), Some(_)) => return Err(RdfXmlSyntaxError::msg("Not both rdf:resource and rdf:nodeID could be set at the same time").into())
  791|       |                    };
  792|  9.18k|                            Self::emit_property_attrs(&object, property_attrs, &language, results);
  793|  9.18k|                            if let Some(type_attr) = type_attr {
  794|    182|                                results.push(Triple::new(object.clone(), rdf::TYPE, type_attr));
  795|  9.00k|                            }
  796|  9.18k|                            RdfXmlState::PropertyElt {
  797|  9.18k|                                iri,
  798|  9.18k|                                base_iri,
  799|  9.18k|                                language,
  800|  9.18k|                                subject,
  801|  9.18k|                                object: Some(NodeOrText::Node(object)),
  802|  9.18k|                                id_attr,
  803|  9.18k|                                datatype_attr,
  804|  9.18k|                            }
  805|       |                        } else {
  806|   226k|                            RdfXmlState::PropertyElt {
  807|   226k|                                iri,
  808|   226k|                                base_iri,
  809|   226k|                                language,
  810|   226k|                                subject,
  811|   226k|                                object: None,
  812|   226k|                                id_attr,
  813|   226k|                                datatype_attr,
  814|   226k|                            }
  815|       |                        }
  816|       |                    }
  817|      0|                    RdfXmlParseType::Literal => RdfXmlState::ParseTypeLiteralPropertyElt {
  818|      0|                        iri,
  819|      0|                        base_iri,
  820|      0|                        language,
  821|      0|                        subject,
  822|      0|                        writer: Writer::new(Vec::default()),
  823|      0|                        id_attr,
  824|      0|                        emit: true,
  825|      0|                    },
  826|      0|                    RdfXmlParseType::Resource => Self::build_parse_type_resource_property_elt(
  827|      0|                        iri, base_iri, language, subject, id_attr, results,
  828|      0|                    ),
  829|      0|                    RdfXmlParseType::Collection => RdfXmlState::ParseTypeCollectionPropertyElt {
  830|      0|                        iri,
  831|      0|                        base_iri,
  832|      0|                        language,
  833|      0|                        subject,
  834|      0|                        objects: Vec::default(),
  835|      0|                        id_attr,
  836|      0|                    },
  837|  1.36k|                    RdfXmlParseType::Other => RdfXmlState::ParseTypeLiteralPropertyElt {
  838|  1.36k|                        iri,
  839|  1.36k|                        base_iri,
  840|  1.36k|                        language,
  841|  1.36k|                        subject,
  842|  1.36k|                        writer: Writer::new(Vec::default()),
  843|  1.36k|                        id_attr,
  844|  1.36k|                        emit: false,
  845|  1.36k|                    },
  846|       |                }
  847|       |            }
  848|       |        };
  849|   647k|        self.state.push(new_state);
  850|   647k|        Ok(())
  851|  1.10M|    }
_RNvMs2_NtCs2FOzy0wGkcs_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE16resolve_tag_nameCsi53KuwE5jZG_7rdf_xml:
  900|  1.06M|    fn resolve_tag_name(&self, qname: QName<'_>) -> Result<String, RdfXmlParseError> {
  901|  1.06M|        let (namespace, local_name) = self.reader.resolve_element(qname);
  902|  1.06M|        self.resolve_ns_name(namespace, local_name)
  903|  1.06M|    }
_RNvMs2_NtCs2FOzy0wGkcs_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE19emit_property_attrsCsi53KuwE5jZG_7rdf_xml:
 1134|   398k|    fn emit_property_attrs(
 1135|   398k|        subject: &Subject,
 1136|   398k|        literal_attributes: Vec<(NamedNode, String)>,
 1137|   398k|        language: &Option<String>,
 1138|   398k|        results: &mut Vec<Triple>,
 1139|   398k|    ) {
 1140|   401k|        for (literal_predicate, literal_value) in literal_attributes {
 1141|  2.79k|            results.push(Triple::new(
 1142|  2.79k|                subject.clone(),
 1143|  2.79k|                literal_predicate,
 1144|  2.79k|                if let Some(language) = language.clone() {
 1145|      0|                    Literal::new_language_tagged_literal_unchecked(literal_value, language)
 1146|       |                } else {
 1147|  2.79k|                    Literal::new_simple_literal(literal_value)
 1148|       |                },
 1149|       |            ));
 1150|       |        }
 1151|   398k|    }
_RNvMs2_NtCs2FOzy0wGkcs_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE9end_stateCsi53KuwE5jZG_7rdf_xml:
 1010|   303k|    fn end_state(
 1011|   303k|        &mut self,
 1012|   303k|        state: RdfXmlState,
 1013|   303k|        results: &mut Vec<Triple>,
 1014|   303k|    ) -> Result<(), RdfXmlSyntaxError> {
 1015|   303k|        match state {
 1016|       |            RdfXmlState::PropertyElt {
 1017|  66.8k|                iri,
 1018|  66.8k|                language,
 1019|  66.8k|                subject,
 1020|  66.8k|                id_attr,
 1021|  66.8k|                datatype_attr,
 1022|  66.8k|                object,
 1023|       |                ..
 1024|       |            } => {
 1025|  66.8k|                let object = match object {
 1026|  11.2k|                    Some(NodeOrText::Node(node)) => Term::from(node),
 1027|  17.8k|                    Some(NodeOrText::Text(text)) => {
 1028|  17.8k|                        Self::new_literal(text, language, datatype_attr).into()
 1029|       |                    }
 1030|  37.7k|                    None => Self::new_literal(String::new(), language, datatype_attr).into(),
 1031|       |                };
 1032|  66.8k|                let triple = Triple::new(subject, iri, object);
 1033|  66.8k|                if let Some(id_attr) = id_attr {
 1034|      0|                    Self::reify(triple.clone(), id_attr, results);
 1035|  66.8k|                }
 1036|  66.8k|                results.push(triple);
 1037|       |            }
 1038|       |            RdfXmlState::ParseTypeCollectionPropertyElt {
 1039|      0|                iri,
 1040|      0|                subject,
 1041|      0|                id_attr,
 1042|      0|                objects,
 1043|      0|                ..
 1044|      0|            } => {
 1045|      0|                let mut current_node = Subject::from(rdf::NIL);
 1046|      0|                for object in objects.into_iter().rev() {
 1047|      0|                    let subject = Subject::from(BlankNode::default());
 1048|      0|                    results.push(Triple::new(subject.clone(), rdf::FIRST, object));
 1049|      0|                    results.push(Triple::new(subject.clone(), rdf::REST, current_node));
 1050|      0|                    current_node = subject;
 1051|      0|                }
 1052|      0|                let triple = Triple::new(subject, iri, current_node);
 1053|      0|                if let Some(id_attr) = id_attr {
 1054|      0|                    Self::reify(triple.clone(), id_attr, results);
 1055|      0|                }
 1056|      0|                results.push(triple);
 1057|       |            }
 1058|       |            RdfXmlState::ParseTypeLiteralPropertyElt {
 1059|    487|                iri,
 1060|    487|                subject,
 1061|    487|                id_attr,
 1062|    487|                writer,
 1063|    487|                emit,
 1064|    487|                ..
 1065|    487|            } => {
 1066|    487|                if emit {
 1067|      0|                    let object = writer.into_inner();
 1068|      0|                    if object.is_empty() {
 1069|      0|                        return Err(RdfXmlSyntaxError::msg(format!(
 1070|      0|                            "No value found for rdf:XMLLiteral value of property {iri}"
 1071|      0|                        )));
 1072|      0|                    }
 1073|      0|                    let triple = Triple::new(
 1074|      0|                        subject,
 1075|      0|                        iri,
 1076|      0|                        Literal::new_typed_literal(
 1077|      0|                            str::from_utf8(&object).map_err(|_| {
 1078|       |                                RdfXmlSyntaxError::msg(
 1079|       |                                    "The XML literal is not in valid UTF-8".to_owned(),
 1080|       |                                )
 1081|      0|                            })?,
 1082|       |                            rdf::XML_LITERAL,
 1083|       |                        ),
 1084|       |                    );
 1085|      0|                    if let Some(id_attr) = id_attr {
 1086|      0|                        Self::reify(triple.clone(), id_attr, results);
 1087|      0|                    }
 1088|      0|                    results.push(triple);
 1089|    487|                }
 1090|       |            }
 1091|   213k|            RdfXmlState::NodeElt { subject, .. } => match self.state.last_mut() {
 1092|  13.6k|                Some(RdfXmlState::PropertyElt { object, .. }) => {
 1093|  13.6k|                    *object = Some(NodeOrText::Node(subject))
 1094|       |                }
 1095|      0|                Some(RdfXmlState::ParseTypeCollectionPropertyElt { objects, .. }) => {
 1096|      0|                    objects.push(subject)
 1097|       |                }
 1098|   199k|                _ => (),
 1099|       |            },
 1100|  22.4k|            _ => (),
 1101|       |        }
 1102|   303k|        Ok(())
 1103|   303k|    }
_RNvMs2_NtCs2FOzy0wGkcs_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE9parse_iriCsi53KuwE5jZG_7rdf_xml:
 1191|   738k|    fn parse_iri(&self, relative_iri: String) -> Result<NamedNode, RdfXmlSyntaxError> {
 1192|   738k|        Ok(NamedNode::new_unchecked(if self.unchecked {
 1193|      0|            relative_iri
 1194|       |        } else {
 1195|   738k|            Iri::parse(relative_iri.clone())
 1196|   738k|                .map_err(|error| {
 1197|       |                    RdfXmlSyntaxError(SyntaxErrorKind::InvalidIri {
 1198|       |                        iri: relative_iri,
 1199|       |                        error,
 1200|       |                    })
 1201|   738k|                })?
 1202|   650k|                .into_inner()
 1203|       |        }))
 1204|   738k|    }
_RNvMs2_NtCs2FOzy0wGkcs_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE21convert_iri_attributeCsi53KuwE5jZG_7rdf_xml:
 1159|  20.1k|    fn convert_iri_attribute(
 1160|  20.1k|        &self,
 1161|  20.1k|        base_iri: &Option<Iri<String>>,
 1162|  20.1k|        attribute: &Attribute<'_>,
 1163|  20.1k|    ) -> Result<NamedNode, RdfXmlParseError> {
 1164|  20.1k|        Ok(self.resolve_iri(base_iri, self.convert_attribute(attribute)?)?)
 1165|  20.1k|    }
_RNCNvMs2_NtCs2FOzy0wGkcs_8oxrdfxml6parserINtB7_12RdfXmlReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE17convert_attribute0Csi53KuwE5jZG_7rdf_xml:
 1155|  3.57k|            .decode_and_unescape_value_with(&self.reader, |e| self.resolve_entity(e))?
_RNvMs2_NtCs2FOzy0wGkcs_8oxrdfxml6parserINtB5_12RdfXmlReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE15parse_end_eventCsi53KuwE5jZG_7rdf_xml:
  853|   317k|    fn parse_end_event(
  854|   317k|        &mut self,
  855|   317k|        event: &BytesEnd<'_>,
  856|   317k|        results: &mut Vec<Triple>,
  857|   317k|    ) -> Result<(), RdfXmlParseError> {
  858|   317k|        // Literal case
  859|   317k|        if self.in_literal_depth > 0 {
  860|  5.11k|            if let Some(RdfXmlState::ParseTypeLiteralPropertyElt { writer, .. }) =
  861|  5.11k|                self.state.last_mut()
  862|       |            {
  863|  5.11k|                writer.write_event(Event::End(BytesEnd::new(
  864|  5.11k|                    self.reader.decoder().decode(event.name().as_ref())?,
  865|      0|                )))?;
  866|  3.86k|                self.in_literal_depth -= 1;
  867|  3.86k|                return Ok(());
  868|      0|            }
  869|   311k|        }
  870|       |
  871|   311k|        if let Some(current_state) = self.state.pop() {
  872|   303k|            self.end_state(current_state, results)?;
  873|  8.81k|        }
  874|   311k|        Ok(())
  875|   317k|    }
_RNvNtCs2FOzy0wGkcs_8oxrdfxml6parser7is_utf8:
 1229|  37.3k|fn is_utf8(encoding: &[u8]) -> bool {
 1230|  20.7k|    matches!(
 1231|  37.3k|        encoding.to_ascii_lowercase().as_slice(),
 1232|  37.3k|        b"unicode-1-1-utf-8"
 1233|  32.8k|            | b"unicode11utf8"
 1234|       |            | b"unicode20utf8"
 1235|  28.4k|            | b"utf-8"
 1236|  6.66k|            | b"utf8"
 1237|  5.50k|            | b"x-unicode20utf8"
 1238|       |    )
 1239|  37.3k|}
_RNvMs1_NtCs2FOzy0wGkcs_8oxrdfxml6parserNtB5_11RdfXmlState8language:
  416|   818k|    fn language(&self) -> Option<&String> {
  417|   818k|        match self {
  418|   113k|            Self::Doc { .. } => None,
  419|   197k|            Self::Rdf { language, .. }
  420|   290k|            | Self::NodeElt { language, .. }
  421|   216k|            | Self::PropertyElt { language, .. }
  422|      0|            | Self::ParseTypeCollectionPropertyElt { language, .. }
  423|   704k|            | Self::ParseTypeLiteralPropertyElt { language, .. } => language.as_ref(),
  424|       |        }
  425|   818k|    }
_RNvNtCs2FOzy0wGkcs_8oxrdfxml6parser10is_nc_name:
 1211|   220k|fn is_nc_name(name: &str) -> bool {
 1212|   220k|    // Name - (Char* ':' Char*)
 1213|   220k|    is_name(name) && name.chars().all(|c| c != ':')
 1214|   220k|}
_RNvNtCs2FOzy0wGkcs_8oxrdfxml6parser7is_name:
 1216|   220k|fn is_name(name: &str) -> bool {
 1217|   220k|    // NameStartChar (NameChar)*
 1218|   220k|    let mut c = name.chars();
 1219|   220k|    if !c.next().map_or(false, is_name_start_char) {
 1220|  3.63k|        return false;
 1221|   217k|    }
 1222|   217k|    c.all(is_name_char)
 1223|   220k|}
_RNvNtCs2FOzy0wGkcs_8oxrdfxml6parser13is_whitespace:
 1225|  1.14M|fn is_whitespace(c: u8) -> bool {
 1226|  1.14M|    matches!(c, b' ' | b'\t' | b'\n' | b'\r')
 1227|  1.14M|}
_RNvMs1_NtCs2FOzy0wGkcs_8oxrdfxml6parserNtB5_11RdfXmlState8base_iri:
  405|   818k|    fn base_iri(&self) -> Option<&Iri<String>> {
  406|   818k|        match self {
  407|   113k|            Self::Doc { base_iri, .. }
  408|   197k|            | Self::Rdf { base_iri, .. }
  409|   290k|            | Self::NodeElt { base_iri, .. }
  410|   216k|            | Self::PropertyElt { base_iri, .. }
  411|      0|            | Self::ParseTypeCollectionPropertyElt { base_iri, .. }
  412|   818k|            | Self::ParseTypeLiteralPropertyElt { base_iri, .. } => base_iri.as_ref(),
  413|   818k|        }
  414|   818k|    }
_RNCNvNtCs2FOzy0wGkcs_8oxrdfxml6parser10is_nc_name0B5_:
 1213|  6.38M|    is_name(name) && name.chars().all(|c| c != ':')

_RINvMNtCs2FOzy0wGkcs_8oxrdfxml10serializerNtB3_16RdfXmlSerializer18serialize_to_writeINtNtCsjOdcKtOMjJI_5alloc3vec3VechEECsi53KuwE5jZG_7rdf_xml:
   92|  20.4k|    pub fn serialize_to_write<W: Write>(self, write: W) -> ToWriteRdfXmlWriter<W> {
   93|  20.4k|        ToWriteRdfXmlWriter {
   94|  20.4k|            writer: Writer::new_with_indent(write, b'\t', 1),
   95|  20.4k|            inner: self.inner_writer(),
   96|  20.4k|        }
   97|  20.4k|    }
_RNCINvMs0_NtCs2FOzy0wGkcs_8oxrdfxml10serializerNtB8_17InnerRdfXmlWriter12write_tripleRNtNtCs8JH8FkI8tas_5oxrdf6triple6TripleE0Csi53KuwE5jZG_7rdf_xml:
  292|  6.07k|                        .map_or_else(|| BytesEnd::new("rdf:Description"), BytesEnd::new),
_RNvMs_NtCs2FOzy0wGkcs_8oxrdfxml10serializerINtB4_19ToWriteRdfXmlWriterINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE12flush_bufferCsi53KuwE5jZG_7rdf_xml:
  198|   246k|    fn flush_buffer(&mut self, buffer: &mut Vec<Event<'_>>) -> io::Result<()> {
  199|   549k|        for event in buffer.drain(0..) {
  200|   549k|            self.writer.write_event(event).map_err(map_err)?;
  201|       |        }
  202|   246k|        Ok(())
  203|   246k|    }
_RINvMs0_NtCs2FOzy0wGkcs_8oxrdfxml10serializerNtB6_17InnerRdfXmlWriter12write_tripleRNtNtCs8JH8FkI8tas_5oxrdf6triple6TripleECsi53KuwE5jZG_7rdf_xml:
  276|   225k|    fn write_triple<'a>(
  277|   225k|        &mut self,
  278|   225k|        t: impl Into<TripleRef<'a>>,
  279|   225k|        output: &mut Vec<Event<'a>>,
  280|   225k|    ) -> io::Result<()> {
  281|   225k|        if self.current_subject.is_none() {
  282|  11.1k|            self.write_start(output);
  283|   214k|        }
  284|       |
  285|   225k|        let triple = t.into();
  286|   225k|        // We open a new rdf:Description if useful
  287|   225k|        if self.current_subject.as_ref().map(Subject::as_ref) != Some(triple.subject) {
  288|   196k|            if self.current_subject.is_some() {
  289|   185k|                output.push(Event::End(
  290|   185k|                    self.current_resource_tag
  291|   185k|                        .take()
  292|   185k|                        .map_or_else(|| BytesEnd::new("rdf:Description"), BytesEnd::new),
  293|   185k|                ));
  294|   185k|            }
  295|   196k|            self.current_subject = Some(triple.subject.into_owned());
  296|       |
  297|   196k|            let (mut description_open, with_type_tag) = if triple.predicate == rdf::TYPE {
  298|   189k|                if let TermRef::NamedNode(t) = triple.object {
  299|   189k|                    let (prop_qname, prop_xmlns) = self.uri_to_qname_and_xmlns(t);
  300|   189k|                    let mut description_open = BytesStart::new(prop_qname.clone());
  301|   189k|                    if let Some(prop_xmlns) = prop_xmlns {
  302|   186k|                        description_open.push_attribute(prop_xmlns);
  303|   186k|                    }
  304|   189k|                    self.current_resource_tag = Some(prop_qname.into_owned());
  305|   189k|                    (description_open, true)
  306|       |                } else {
  307|    119|                    (BytesStart::new("rdf:Description"), false)
  308|       |                }
  309|       |            } else {
  310|  6.85k|                (BytesStart::new("rdf:Description"), false)
  311|       |            };
  312|   196k|            match triple.subject {
  313|  1.64k|                SubjectRef::NamedNode(node) => {
  314|  1.64k|                    description_open.push_attribute(("rdf:about", node.as_str()))
  315|       |                }
  316|   195k|                SubjectRef::BlankNode(node) => {
  317|   195k|                    description_open.push_attribute(("rdf:nodeID", node.as_str()))
  318|       |                }
  319|       |                _ => {
  320|      0|                    return Err(io::Error::new(
  321|      0|                        io::ErrorKind::InvalidInput,
  322|      0|                        "RDF/XML only supports named or blank subject",
  323|      0|                    ))
  324|       |                }
  325|       |            }
  326|   196k|            output.push(Event::Start(description_open));
  327|   196k|            if with_type_tag {
  328|   189k|                return Ok(()); // No need for a value
  329|  6.97k|            }
  330|  28.9k|        }
  331|       |
  332|  35.8k|        let (prop_qname, prop_xmlns) = self.uri_to_qname_and_xmlns(triple.predicate);
  333|  35.8k|        let mut property_open = BytesStart::new(prop_qname.clone());
  334|  35.8k|        if let Some(prop_xmlns) = prop_xmlns {
  335|  29.7k|            property_open.push_attribute(prop_xmlns);
  336|  29.7k|        }
  337|  35.8k|        let content = match triple.object {
  338|  2.42k|            TermRef::NamedNode(node) => {
  339|  2.42k|                property_open.push_attribute(("rdf:resource", node.as_str()));
  340|  2.42k|                None
  341|       |            }
  342|  4.27k|            TermRef::BlankNode(node) => {
  343|  4.27k|                property_open.push_attribute(("rdf:nodeID", node.as_str()));
  344|  4.27k|                None
  345|       |            }
  346|  29.1k|            TermRef::Literal(literal) => {
  347|  29.1k|                if let Some(language) = literal.language() {
  348|      0|                    property_open.push_attribute(("xml:lang", language));
  349|  29.1k|                } else if !literal.is_plain() {
  350|  1.58k|                    property_open.push_attribute(("rdf:datatype", literal.datatype().as_str()));
  351|  27.6k|                }
  352|  29.1k|                Some(literal.value())
  353|       |            }
  354|       |            _ => {
  355|      0|                return Err(io::Error::new(
  356|      0|                    io::ErrorKind::InvalidInput,
  357|      0|                    "RDF/XML only supports named, blank or literal object",
  358|      0|                ))
  359|       |            }
  360|       |        };
  361|  35.8k|        if let Some(content) = content {
  362|  29.1k|            output.push(Event::Start(property_open));
  363|  29.1k|            output.push(Event::Text(BytesText::new(content)));
  364|  29.1k|            output.push(Event::End(BytesEnd::new(prop_qname)));
  365|  29.1k|        } else {
  366|  6.69k|            output.push(Event::Empty(property_open));
  367|  6.69k|        }
  368|  35.8k|        Ok(())
  369|   225k|    }
_RNvMs_NtCs2FOzy0wGkcs_8oxrdfxml10serializerINtB4_19ToWriteRdfXmlWriterINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE6finishCsi53KuwE5jZG_7rdf_xml:
  191|  20.4k|    pub fn finish(mut self) -> io::Result<W> {
  192|  20.4k|        let mut buffer = Vec::new();
  193|  20.4k|        self.inner.finish(&mut buffer);
  194|  20.4k|        self.flush_buffer(&mut buffer)?;
  195|  20.4k|        Ok(self.writer.into_inner())
  196|  20.4k|    }
_RINvMs_NtCs2FOzy0wGkcs_8oxrdfxml10serializerINtB5_19ToWriteRdfXmlWriterINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE12write_tripleRNtNtCs8JH8FkI8tas_5oxrdf6triple6TripleECsi53KuwE5jZG_7rdf_xml:
  184|   225k|    pub fn write_triple<'a>(&mut self, t: impl Into<TripleRef<'a>>) -> io::Result<()> {
  185|   225k|        let mut buffer = Vec::new();
  186|   225k|        self.inner.write_triple(t, &mut buffer)?;
  187|   225k|        self.flush_buffer(&mut buffer)
  188|   225k|    }
_RNvMNtCs2FOzy0wGkcs_8oxrdfxml10serializerNtB2_16RdfXmlSerializer3newCsi53KuwE5jZG_7rdf_xml:
   47|  20.4k|    pub fn new() -> Self {
   48|  20.4k|        Self {
   49|  20.4k|            prefixes: BTreeMap::new(),
   50|  20.4k|        }
   51|  20.4k|    }
_RNvNtCs2FOzy0wGkcs_8oxrdfxml10serializer9split_iri:
  428|   225k|fn split_iri(iri: &str) -> (&str, &str) {
  429|   225k|    if let Some(position_base) = iri.rfind(|c| !is_name_char(c) || c == ':') {
  430|   225k|        if let Some(position_add) = iri[position_base..].find(|c| is_name_start_char(c) && c != ':')
  431|       |        {
  432|   146k|            (
  433|   146k|                &iri[..position_base + position_add],
  434|   146k|                &iri[position_base + position_add..],
  435|   146k|            )
  436|       |        } else {
  437|  79.1k|            (iri, "")
  438|       |        }
  439|       |    } else {
  440|      0|        (iri, "")
  441|       |    }
  442|   225k|}
_RNvMNtCs2FOzy0wGkcs_8oxrdfxml10serializerNtB2_16RdfXmlSerializer12inner_writer:
  139|  20.4k|    fn inner_writer(mut self) -> InnerRdfXmlWriter {
  140|  20.4k|        self.prefixes.insert(
  141|  20.4k|            "http://www.w3.org/1999/02/22-rdf-syntax-ns#".into(),
  142|  20.4k|            "rdf".into(),
  143|  20.4k|        );
  144|  20.4k|        InnerRdfXmlWriter {
  145|  20.4k|            current_subject: None,
  146|  20.4k|            current_resource_tag: None,
  147|  20.4k|            prefixes: self.prefixes,
  148|  20.4k|        }
  149|  20.4k|    }
_RNvMs0_NtCs2FOzy0wGkcs_8oxrdfxml10serializerNtB5_17InnerRdfXmlWriter22uri_to_qname_and_xmlns:
  396|   225k|    fn uri_to_qname_and_xmlns<'a>(
  397|   225k|        &self,
  398|   225k|        uri: NamedNodeRef<'a>,
  399|   225k|    ) -> (Cow<'a, str>, Option<(&'a str, &'a str)>) {
  400|   225k|        let (prop_prefix, prop_value) = split_iri(uri.as_str());
  401|   225k|        if let Some(prop_prefix) = self.prefixes.get(prop_prefix) {
  402|       |            (
  403|  6.72k|                if prop_prefix.is_empty() {
  404|      0|                    Cow::Borrowed(prop_value)
  405|       |                } else {
  406|  6.72k|                    Cow::Owned(format!("{prop_prefix}:{prop_value}"))
  407|       |                },
  408|  6.72k|                None,
  409|       |            )
  410|   219k|        } else if prop_prefix == "http://www.w3.org/2000/xmlns/" {
  411|  2.63k|            (Cow::Owned(format!("xmlns:{prop_value}")), None)
  412|   216k|        } else if prop_value.is_empty() {
  413|  76.6k|            (Cow::Borrowed("p:"), Some(("xmlns:p", prop_prefix)))
  414|       |        } else {
  415|   139k|            (Cow::Borrowed(prop_value), Some(("xmlns", prop_prefix)))
  416|       |        }
  417|   225k|    }
_RNvMs0_NtCs2FOzy0wGkcs_8oxrdfxml10serializerNtB5_17InnerRdfXmlWriter6finish:
  383|  20.4k|    fn finish(&mut self, output: &mut Vec<Event<'static>>) {
  384|  20.4k|        if self.current_subject.is_some() {
  385|  11.1k|            output.push(Event::End(
  386|  11.1k|                self.current_resource_tag
  387|  11.1k|                    .take()
  388|  11.1k|                    .map_or_else(|| BytesEnd::new("rdf:Description"), BytesEnd::new),
  389|  11.1k|            ));
  390|  11.1k|        } else {
  391|  9.30k|            self.write_start(output);
  392|  9.30k|        }
  393|  20.4k|        output.push(Event::End(BytesEnd::new("rdf:RDF")));
  394|  20.4k|    }
_RNvMs0_NtCs2FOzy0wGkcs_8oxrdfxml10serializerNtB5_17InnerRdfXmlWriter11write_start:
  371|  20.4k|    fn write_start(&self, output: &mut Vec<Event<'_>>) {
  372|  20.4k|        output.push(Event::Decl(BytesDecl::new("1.0", Some("UTF-8"), None)));
  373|  20.4k|        let mut rdf_open = BytesStart::new("rdf:RDF");
  374|  40.8k|        for (prefix_value, prefix_name) in &self.prefixes {
  375|  20.4k|            rdf_open.push_attribute((
  376|  20.4k|                format!("xmlns:{prefix_name}").as_str(),
  377|  20.4k|                prefix_value.as_str(),
  378|  20.4k|            ));
  379|  20.4k|        }
  380|  20.4k|        output.push(Event::Start(rdf_open))
  381|  20.4k|    }
_RNCNvMs0_NtCs2FOzy0wGkcs_8oxrdfxml10serializerNtB7_17InnerRdfXmlWriter6finish0B9_:
  388|    895|                    .map_or_else(|| BytesEnd::new("rdf:Description"), BytesEnd::new),
_RNCNvNtCs2FOzy0wGkcs_8oxrdfxml10serializer9split_iri0B5_:
  429|  4.23M|    if let Some(position_base) = iri.rfind(|c| !is_name_char(c) || c == ':') {
_RNCNvNtCs2FOzy0wGkcs_8oxrdfxml10serializer9split_iris_0B5_:
  430|   405k|        if let Some(position_add) = iri[position_base..].find(|c| is_name_start_char(c) && c != ':')

_RNvNtCs2FOzy0wGkcs_8oxrdfxml5utils12is_name_char:
   22|  10.4M|pub fn is_name_char(c: char) -> bool {
   23|  10.4M|    // NameStartChar | "-" | "." | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
   24|  10.4M|    is_name_start_char(c)
   25|  4.01M|        || matches!(c,  '-' | '.' | '0'..='9' | '\u{B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
   26|  10.4M|}
_RNvNtCs2FOzy0wGkcs_8oxrdfxml5utils18is_name_start_char:
    1|  11.0M|pub fn is_name_start_char(c: char) -> bool {
    2|       |    // ":" | [A-Z] | "_" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
    3|  11.0M|    matches!(c,
    4|       |        ':'
    5|  6.73M|        | 'A'..='Z'
    6|       |        | '_'
    7|  5.55M|        | 'a'..='z'
    8|   255k|        | '\u{00C0}'..='\u{00D6}'
    9|   255k|        | '\u{00D8}'..='\u{00F6}'
   10|   255k|        | '\u{00F8}'..='\u{02FF}'
   11|   254k|        | '\u{0370}'..='\u{037D}'
   12|  54.8k|        | '\u{037F}'..='\u{1FFF}'
   13|  52.0k|        | '\u{200C}'..='\u{200D}'
   14|  52.0k|        | '\u{2070}'..='\u{218F}'
   15|  52.0k|        | '\u{2C00}'..='\u{2FEF}'
   16|  52.0k|        | '\u{3001}'..='\u{D7FF}'
   17|  49.3k|        | '\u{F900}'..='\u{FDCF}'
   18|  49.3k|        | '\u{FDF0}'..='\u{FFFD}'
   19|  15.4k|        | '\u{10000}'..='\u{EFFFF}')
   20|  11.0M|}


_RINvMNtCs8REU2L9j67q_9getrandom4lazyNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   34|    142|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   35|    142|        // Relaxed ordering is fine, as we only have a single atomic variable.
   36|    142|        let mut val = self.0.load(Relaxed);
   37|    142|        if val == Self::UNINIT {
   38|      1|            val = init();
   39|      1|            self.0.store(val, Relaxed);
   40|    141|        }
   41|    142|        val
   42|    142|    }
_RINvMs_NtCs8REU2L9j67q_9getrandom4lazyNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   53|    142|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   54|    142|        self.0.unsync_init(|| init() as usize) != 0
   55|    142|    }
_RNCINvMs_NtCs8REU2L9j67q_9getrandom4lazyNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   54|      1|        self.0.unsync_init(|| init() as usize) != 0

_RNvCs8REU2L9j67q_9getrandom16getrandom_uninitCs8qzC7aBl1xk_9rand_core:
  396|    142|pub fn getrandom_uninit(dest: &mut [MaybeUninit<u8>]) -> Result<&mut [u8], Error> {
  397|    142|    if !dest.is_empty() {
  398|    142|        imp::getrandom_inner(dest)?;
  399|      0|    }
  400|       |    // SAFETY: `dest` has been fully initialized by `imp::getrandom_inner`
  401|       |    // since it returned `Ok`.
  402|    142|    Ok(unsafe { slice_assume_init_mut(dest) })
  403|    142|}
_RNvCs8REU2L9j67q_9getrandom9getrandomCs8qzC7aBl1xk_9rand_core:
  366|    142|pub fn getrandom(dest: &mut [u8]) -> Result<(), Error> {
  367|    142|    // SAFETY: The `&mut MaybeUninit<_>` reference doesn't escape, and
  368|    142|    // `getrandom_uninit` guarantees it will never de-initialize any part of
  369|    142|    // `dest`.
  370|    142|    getrandom_uninit(unsafe { slice_as_uninit_mut(dest) })?;
  371|    142|    Ok(())
  372|    142|}

_RNvNtCs8REU2L9j67q_9getrandom3imp15getrandom_inner:
    9|    142|pub fn getrandom_inner(dest: &mut [MaybeUninit<u8>]) -> Result<(), Error> {
   10|    142|    // getrandom(2) was introduced in Linux 3.17
   11|    142|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   12|    142|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   13|    142|        sys_fill_exact(dest, getrandom_syscall)
   14|       |    } else {
   15|      0|        use_file::getrandom_inner(dest)
   16|       |    }
   17|    142|}
_RNvNtCs8REU2L9j67q_9getrandom3imp22is_getrandom_available:
   19|      1|fn is_getrandom_available() -> bool {
   20|      1|    if getrandom_syscall(&mut []) < 0 {
   21|      0|        match last_os_error().raw_os_error() {
   22|      0|            Some(libc::ENOSYS) => false, // No kernel support
   23|       |            // The fallback on EPERM is intentionally not done on Android since this workaround
   24|       |            // seems to be needed only for specific Linux-based products that aren't based
   25|       |            // on Android. See https://github.com/rust-random/getrandom/issues/229.
   26|       |            #[cfg(target_os = "linux")]
   27|      0|            Some(libc::EPERM) => false, // Blocked by seccomp
   28|      0|            _ => true,
   29|       |        }
   30|       |    } else {
   31|      1|        true
   32|       |    }
   33|      1|}

_RINvNtCs8REU2L9j67q_9getrandom4util19slice_as_uninit_muthECs8qzC7aBl1xk_9rand_core:
   32|    142|pub unsafe fn slice_as_uninit_mut<T>(slice: &mut [T]) -> &mut [MaybeUninit<T>] {
   33|    142|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   34|    142|    &mut *(slice as *mut [T] as *mut [MaybeUninit<T>])
   35|    142|}
_RINvNtCs8REU2L9j67q_9getrandom4util21slice_assume_init_muthECs8qzC7aBl1xk_9rand_core:
    8|    142|pub unsafe fn slice_assume_init_mut<T>(slice: &mut [MaybeUninit<T>]) -> &mut [T] {
    9|    142|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   10|    142|    &mut *(slice as *mut [MaybeUninit<T>] as *mut [T])
   11|    142|}

_RINvNtCs8REU2L9j67q_9getrandom9util_libc14sys_fill_exactNvB2_17getrandom_syscallEB4_:
   55|    142|pub fn sys_fill_exact(
   56|    142|    mut buf: &mut [MaybeUninit<u8>],
   57|    142|    sys_fill: impl Fn(&mut [MaybeUninit<u8>]) -> libc::ssize_t,
   58|    142|) -> Result<(), Error> {
   59|    284|    while !buf.is_empty() {
   60|    142|        let res = sys_fill(buf);
   61|    142|        match res {
   62|    142|            res if res > 0 => buf = buf.get_mut(res as usize..).ok_or(Error::UNEXPECTED)?,
   63|       |            -1 => {
   64|      0|                let err = last_os_error();
   65|      0|                // We should try again if the call was interrupted.
   66|      0|                if err.raw_os_error() != Some(libc::EINTR) {
   67|      0|                    return Err(err);
   68|      0|                }
   69|       |            }
   70|       |            // Negative return codes not equal to -1 should be impossible.
   71|       |            // EOF (ret = 0) should be impossible, as the data we are reading
   72|       |            // should be an infinite stream of random bytes.
   73|      0|            _ => return Err(Error::UNEXPECTED),
   74|       |        }
   75|       |    }
   76|    142|    Ok(())
   77|    142|}
_RNvNtCs8REU2L9j67q_9getrandom9util_libc17getrandom_syscall:
  153|    143|pub fn getrandom_syscall(buf: &mut [MaybeUninit<u8>]) -> libc::ssize_t {
  154|    143|    unsafe {
  155|    143|        libc::syscall(
  156|    143|            libc::SYS_getrandom,
  157|    143|            buf.as_mut_ptr() as *mut libc::c_void,
  158|    143|            buf.len(),
  159|    143|            0,
  160|    143|        ) as libc::ssize_t
  161|    143|    }
  162|    143|}

rust_fuzzer_test_input:
  209|  28.9k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  28.9k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  28.9k|                }
  223|  28.9k|
  224|  28.9k|                __libfuzzer_sys_run(bytes);
  225|  28.9k|                0
  226|       |            }
_RNvNvCsXnvbX6AWbe_7rdf_xml1__19___libfuzzer_sys_run:
  241|  28.9k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|       |            }
LLVMFuzzerTestOneInput:
   58|  28.9k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  28.9k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  28.9k|    });
   63|  28.9k|
   64|  28.9k|    match test_input {
   65|  28.9k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  28.9k|}
_RNCNvCsfJW8UfT50Vi_13libfuzzer_sys15test_input_wrap0B3_:
   59|  28.9k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  28.9k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  28.9k|        rust_fuzzer_test_input(data_slice)
   62|  28.9k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvMs3_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0ECs5iIAVsTbYw4_8oxrdfxml:
 1044|  35.8M|    pub(crate) unsafe fn next(
 1045|  35.8M|        &mut self,
 1046|  35.8M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  35.8M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  35.8M|        let found = find_raw(self.start, self.end)?;
 1057|  33.2M|        let result = found.distance(self.original_start);
 1058|  33.2M|        self.start = found.add(1);
 1059|  33.2M|        Some(result)
 1060|  35.8M|    }
_RINvMs3_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs7_NtBc_6memchrNtB1e_7Memchr3NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0ECs5iIAVsTbYw4_8oxrdfxml:
 1044|  3.20M|    pub(crate) unsafe fn next(
 1045|  3.20M|        &mut self,
 1046|  3.20M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  3.20M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  3.20M|        let found = find_raw(self.start, self.end)?;
 1057|  3.18M|        let result = found.distance(self.original_start);
 1058|  3.18M|        self.start = found.add(1);
 1059|  3.18M|        Some(result)
 1060|  3.20M|    }
_RINvMs3_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs_NtBc_6memchrNtB1d_6MemchrNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0ECs5iIAVsTbYw4_8oxrdfxml:
 1044|  93.5k|    pub(crate) unsafe fn next(
 1045|  93.5k|        &mut self,
 1046|  93.5k|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  93.5k|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  93.5k|        let found = find_raw(self.start, self.end)?;
 1057|  92.1k|        let result = found.distance(self.original_start);
 1058|  92.1k|        self.start = found.add(1);
 1059|  92.1k|        Some(result)
 1060|  93.5k|    }
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECs5iIAVsTbYw4_8oxrdfxml:
 1125|  2.23M|pub(crate) unsafe fn search_slice_with_raw(
 1126|  2.23M|    haystack: &[u8],
 1127|  2.23M|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  2.23M|) -> Option<usize> {
 1129|  2.23M|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  2.23M|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  2.23M|    // a &[u8].
 1132|  2.23M|    let start = haystack.as_ptr();
 1133|  2.23M|    let end = start.add(haystack.len());
 1134|  2.23M|    let found = find_raw(start, end)?;
 1135|  2.22M|    Some(found.distance(start))
 1136|  2.23M|}
_RNvMs3_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  4.17M|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  4.17M|        Iter {
 1029|  4.17M|            original_start: haystack.as_ptr(),
 1030|  4.17M|            start: haystack.as_ptr(),
 1031|  4.17M|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  4.17M|            haystack: core::marker::PhantomData,
 1033|  4.17M|        }
 1034|  4.17M|    }
_RINvMs3_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0ECsjWx60dGvTf3_9quick_xml:
 1044|   188k|    pub(crate) unsafe fn next(
 1045|   188k|        &mut self,
 1046|   188k|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|   188k|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|   188k|        let found = find_raw(self.start, self.end)?;
 1057|   186k|        let result = found.distance(self.original_start);
 1058|   186k|        self.start = found.add(1);
 1059|   186k|        Some(result)
 1060|   188k|    }
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECsjWx60dGvTf3_9quick_xml:
 1125|  1.70M|pub(crate) unsafe fn search_slice_with_raw(
 1126|  1.70M|    haystack: &[u8],
 1127|  1.70M|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  1.70M|) -> Option<usize> {
 1129|  1.70M|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  1.70M|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  1.70M|    // a &[u8].
 1132|  1.70M|    let start = haystack.as_ptr();
 1133|  1.70M|    let end = start.add(haystack.len());
 1134|  1.70M|    let found = find_raw(start, end)?;
 1135|   672k|    Some(found.distance(start))
 1136|  1.70M|}
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle1B8_:
  117|  3.69M|    pub(crate) fn needle1(&self) -> u8 {
  118|  3.69M|        self.s1
  119|  3.69M|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE3newB8_:
  111|  4.03M|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  4.03M|        One { s1: needle, v1: V::splat(needle) }
  113|  4.03M|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE3newB8_:
  111|  4.03M|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  4.03M|        One { s1: needle, v1: V::splat(needle) }
  113|  4.03M|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  99.8k|    pub(crate) unsafe fn find_raw(
  144|  99.8k|        &self,
  145|  99.8k|        start: *const u8,
  146|  99.8k|        end: *const u8,
  147|  99.8k|    ) -> Option<*const u8> {
  148|  99.8k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  99.8k|        // need to move up to using a u64 for the masks used below. Currently
  150|  99.8k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  99.8k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  99.8k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  99.8k|        let topos = V::Mask::first_offset;
  155|  99.8k|        let len = end.distance(start);
  156|  99.8k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  99.8k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  72.8k|            return Some(cur);
  167|  27.0k|        }
  168|  27.0k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  27.0k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  27.0k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  27.0k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  27.0k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  28.1k|        while cur <= end.sub(V::BYTES) {
  213|  2.58k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  2.58k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|  1.43k|                return Some(cur);
  216|  1.15k|            }
  217|  1.15k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  25.5k|        if cur < end {
  224|  21.0k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  21.0k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  21.0k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  21.0k|            return self.search_chunk(cur, topos);
  228|  4.54k|        }
  229|  4.54k|        None
  230|  99.8k|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  2.23M|    pub(crate) unsafe fn find_raw(
  144|  2.23M|        &self,
  145|  2.23M|        start: *const u8,
  146|  2.23M|        end: *const u8,
  147|  2.23M|    ) -> Option<*const u8> {
  148|  2.23M|        // If we want to support vectors bigger than 256 bits, we probably
  149|  2.23M|        // need to move up to using a u64 for the masks used below. Currently
  150|  2.23M|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  2.23M|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  2.23M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  2.23M|        let topos = V::Mask::first_offset;
  155|  2.23M|        let len = end.distance(start);
  156|  2.23M|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  2.23M|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  1.98M|            return Some(cur);
  167|   258k|        }
  168|   258k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|   258k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|   258k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|   258k|        if len >= Self::LOOP_SIZE {
  172|   173k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|   165k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|   165k|                let a = V::load_aligned(cur);
  176|   165k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|   165k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|   165k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|   165k|                let eqa = self.v1.cmpeq(a);
  180|   165k|                let eqb = self.v1.cmpeq(b);
  181|   165k|                let eqc = self.v1.cmpeq(c);
  182|   165k|                let eqd = self.v1.cmpeq(d);
  183|   165k|                let or1 = eqa.or(eqb);
  184|   165k|                let or2 = eqc.or(eqd);
  185|   165k|                let or3 = or1.or(or2);
  186|   165k|                if or3.movemask_will_have_non_zero() {
  187|   157k|                    let mask = eqa.movemask();
  188|   157k|                    if mask.has_non_zero() {
  189|   102k|                        return Some(cur.add(topos(mask)));
  190|  55.0k|                    }
  191|  55.0k|
  192|  55.0k|                    let mask = eqb.movemask();
  193|  55.0k|                    if mask.has_non_zero() {
  194|  38.0k|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|  17.0k|                    }
  196|  17.0k|
  197|  17.0k|                    let mask = eqc.movemask();
  198|  17.0k|                    if mask.has_non_zero() {
  199|  10.4k|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|  6.57k|                    }
  201|  6.57k|
  202|  6.57k|                    let mask = eqd.movemask();
  203|  6.57k|                    debug_assert!(mask.has_non_zero());
  204|  6.57k|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  8.39k|                }
  206|  8.39k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  92.6k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|   132k|        while cur <= end.sub(V::BYTES) {
  213|  51.8k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  51.8k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|  20.4k|                return Some(cur);
  216|  31.4k|            }
  217|  31.4k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  80.4k|        if cur < end {
  224|  65.1k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  65.1k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  65.1k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  65.1k|            return self.search_chunk(cur, topos);
  228|  15.2k|        }
  229|  15.2k|        None
  230|  2.23M|    }
_RINvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|   123k|    unsafe fn search_chunk(
  417|   123k|        &self,
  418|   123k|        cur: *const u8,
  419|   123k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|   123k|    ) -> Option<*const u8> {
  421|   123k|        let chunk = V::load_unaligned(cur);
  422|   123k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|   123k|        if mask.has_non_zero() {
  424|  77.6k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  45.8k|            None
  427|       |        }
  428|   123k|    }
_RINvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  2.35M|    unsafe fn search_chunk(
  417|  2.35M|        &self,
  418|  2.35M|        cur: *const u8,
  419|  2.35M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  2.35M|    ) -> Option<*const u8> {
  421|  2.35M|        let chunk = V::load_unaligned(cur);
  422|  2.35M|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  2.35M|        if mask.has_non_zero() {
  424|  2.00M|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|   350k|            None
  427|       |        }
  428|  2.35M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE3newBa_:
  450|  36.0M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  36.0M|        Two {
  452|  36.0M|            s1: needle1,
  453|  36.0M|            s2: needle2,
  454|  36.0M|            v1: V::splat(needle1),
  455|  36.0M|            v2: V::splat(needle2),
  456|  36.0M|        }
  457|  36.0M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE3newBa_:
  450|  36.0M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  36.0M|        Two {
  452|  36.0M|            s1: needle1,
  453|  36.0M|            s2: needle2,
  454|  36.0M|            v1: V::splat(needle1),
  455|  36.0M|            v2: V::splat(needle2),
  456|  36.0M|        }
  457|  36.0M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  5.22M|    pub(crate) fn needle1(&self) -> u8 {
  462|  5.22M|        self.s1
  463|  5.22M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  5.06M|    pub(crate) fn needle2(&self) -> u8 {
  468|  5.06M|        self.s2
  469|  5.06M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE8find_rawBa_:
  493|   605k|    pub(crate) unsafe fn find_raw(
  494|   605k|        &self,
  495|   605k|        start: *const u8,
  496|   605k|        end: *const u8,
  497|   605k|    ) -> Option<*const u8> {
  498|   605k|        // If we want to support vectors bigger than 256 bits, we probably
  499|   605k|        // need to move up to using a u64 for the masks used below. Currently
  500|   605k|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|   605k|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|   605k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   605k|        let topos = V::Mask::first_offset;
  505|   605k|        let len = end.distance(start);
  506|   605k|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   605k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   337k|            return Some(cur);
  517|   268k|        }
  518|   268k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   268k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|   268k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   268k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   268k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   289k|        while cur <= end.sub(V::BYTES) {
  551|  21.5k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  21.5k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|    889|                return Some(cur);
  554|  20.6k|            }
  555|  20.6k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   267k|        if cur < end {
  562|   261k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   261k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|   261k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   261k|            return self.search_chunk(cur, topos);
  566|  6.54k|        }
  567|  6.54k|        None
  568|   605k|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE8find_rawBa_:
  493|  33.5M|    pub(crate) unsafe fn find_raw(
  494|  33.5M|        &self,
  495|  33.5M|        start: *const u8,
  496|  33.5M|        end: *const u8,
  497|  33.5M|    ) -> Option<*const u8> {
  498|  33.5M|        // If we want to support vectors bigger than 256 bits, we probably
  499|  33.5M|        // need to move up to using a u64 for the masks used below. Currently
  500|  33.5M|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|  33.5M|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|  33.5M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  33.5M|        let topos = V::Mask::first_offset;
  505|  33.5M|        let len = end.distance(start);
  506|  33.5M|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  33.5M|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  32.1M|            return Some(cur);
  517|  1.45M|        }
  518|  1.45M|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  1.45M|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|  1.45M|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  1.45M|        if len >= Self::LOOP_SIZE {
  522|  2.41M|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|  2.17M|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|  2.17M|                let a = V::load_aligned(cur);
  526|  2.17M|                let b = V::load_aligned(cur.add(V::BYTES));
  527|  2.17M|                let eqa1 = self.v1.cmpeq(a);
  528|  2.17M|                let eqb1 = self.v1.cmpeq(b);
  529|  2.17M|                let eqa2 = self.v2.cmpeq(a);
  530|  2.17M|                let eqb2 = self.v2.cmpeq(b);
  531|  2.17M|                let or1 = eqa1.or(eqb1);
  532|  2.17M|                let or2 = eqa2.or(eqb2);
  533|  2.17M|                let or3 = or1.or(or2);
  534|  2.17M|                if or3.movemask_will_have_non_zero() {
  535|   244k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|   244k|                    if mask.has_non_zero() {
  537|   166k|                        return Some(cur.add(topos(mask)));
  538|  77.8k|                    }
  539|  77.8k|
  540|  77.8k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|  77.8k|                    debug_assert!(mask.has_non_zero());
  542|  77.8k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|  1.92M|                }
  544|  1.92M|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   963k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  1.56M|        while cur <= end.sub(V::BYTES) {
  551|   368k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   368k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  17.1k|                return Some(cur);
  554|   351k|            }
  555|   351k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|  1.19M|        if cur < end {
  562|  1.16M|            debug_assert!(end.distance(cur) < V::BYTES);
  563|  1.16M|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|  1.16M|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|  1.16M|            return self.search_chunk(cur, topos);
  566|  24.9k|        }
  567|  24.9k|        None
  568|  33.5M|    }
_RINvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|   888k|    unsafe fn search_chunk(
  671|   888k|        &self,
  672|   888k|        cur: *const u8,
  673|   888k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|   888k|    ) -> Option<*const u8> {
  675|   888k|        let chunk = V::load_unaligned(cur);
  676|   888k|        let eq1 = self.v1.cmpeq(chunk);
  677|   888k|        let eq2 = self.v2.cmpeq(chunk);
  678|   888k|        let mask = eq1.or(eq2).movemask();
  679|   888k|        if mask.has_non_zero() {
  680|   344k|            let mask1 = eq1.movemask();
  681|   344k|            let mask2 = eq2.movemask();
  682|   344k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|   543k|            None
  685|       |        }
  686|   888k|    }
_RINvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  35.1M|    unsafe fn search_chunk(
  671|  35.1M|        &self,
  672|  35.1M|        cur: *const u8,
  673|  35.1M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  35.1M|    ) -> Option<*const u8> {
  675|  35.1M|        let chunk = V::load_unaligned(cur);
  676|  35.1M|        let eq1 = self.v1.cmpeq(chunk);
  677|  35.1M|        let eq2 = self.v2.cmpeq(chunk);
  678|  35.1M|        let mask = eq1.or(eq2).movemask();
  679|  35.1M|        if mask.has_non_zero() {
  680|  32.2M|            let mask1 = eq1.movemask();
  681|  32.2M|            let mask2 = eq2.movemask();
  682|  32.2M|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  2.85M|            None
  685|       |        }
  686|  35.1M|    }
_RNvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE3newBb_:
  710|  3.20M|    pub(crate) unsafe fn new(
  711|  3.20M|        needle1: u8,
  712|  3.20M|        needle2: u8,
  713|  3.20M|        needle3: u8,
  714|  3.20M|    ) -> Three<V> {
  715|  3.20M|        Three {
  716|  3.20M|            s1: needle1,
  717|  3.20M|            s2: needle2,
  718|  3.20M|            s3: needle3,
  719|  3.20M|            v1: V::splat(needle1),
  720|  3.20M|            v2: V::splat(needle2),
  721|  3.20M|            v3: V::splat(needle3),
  722|  3.20M|        }
  723|  3.20M|    }
_RNvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE3newBb_:
  710|  3.20M|    pub(crate) unsafe fn new(
  711|  3.20M|        needle1: u8,
  712|  3.20M|        needle2: u8,
  713|  3.20M|        needle3: u8,
  714|  3.20M|    ) -> Three<V> {
  715|  3.20M|        Three {
  716|  3.20M|            s1: needle1,
  717|  3.20M|            s2: needle2,
  718|  3.20M|            s3: needle3,
  719|  3.20M|            v1: V::splat(needle1),
  720|  3.20M|            v2: V::splat(needle2),
  721|  3.20M|            v3: V::splat(needle3),
  722|  3.20M|        }
  723|  3.20M|    }
_RNvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle1Bb_:
  727|   144k|    pub(crate) fn needle1(&self) -> u8 {
  728|   144k|        self.s1
  729|   144k|    }
_RNvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle2Bb_:
  733|  93.7k|    pub(crate) fn needle2(&self) -> u8 {
  734|  93.7k|        self.s2
  735|  93.7k|    }
_RNvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle3Bb_:
  739|  92.7k|    pub(crate) fn needle3(&self) -> u8 {
  740|  92.7k|        self.s3
  741|  92.7k|    }
_RNvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE8find_rawBb_:
  765|  60.3k|    pub(crate) unsafe fn find_raw(
  766|  60.3k|        &self,
  767|  60.3k|        start: *const u8,
  768|  60.3k|        end: *const u8,
  769|  60.3k|    ) -> Option<*const u8> {
  770|  60.3k|        // If we want to support vectors bigger than 256 bits, we probably
  771|  60.3k|        // need to move up to using a u64 for the masks used below. Currently
  772|  60.3k|        // they are 32 bits, which means we're SOL for vectors that need masks
  773|  60.3k|        // bigger than 32 bits. Overall unclear until there's a use case.
  774|  60.3k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  775|       |
  776|  60.3k|        let topos = V::Mask::first_offset;
  777|  60.3k|        let len = end.distance(start);
  778|  60.3k|        debug_assert!(
  779|      0|            len >= V::BYTES,
  780|      0|            "haystack has length {}, but must be at least {}",
  781|       |            len,
  782|       |            V::BYTES
  783|       |        );
  784|       |
  785|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  786|       |        // of the haystack prior to where aligned loads can start.
  787|  60.3k|        if let Some(cur) = self.search_chunk(start, topos) {
  788|  57.6k|            return Some(cur);
  789|  2.72k|        }
  790|  2.72k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  791|  2.72k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  792|  2.72k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  793|  2.72k|        if len >= Self::LOOP_SIZE {
  794|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  795|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  796|       |
  797|      0|                let a = V::load_aligned(cur);
  798|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  799|      0|                let eqa1 = self.v1.cmpeq(a);
  800|      0|                let eqb1 = self.v1.cmpeq(b);
  801|      0|                let eqa2 = self.v2.cmpeq(a);
  802|      0|                let eqb2 = self.v2.cmpeq(b);
  803|      0|                let eqa3 = self.v3.cmpeq(a);
  804|      0|                let eqb3 = self.v3.cmpeq(b);
  805|      0|                let or1 = eqa1.or(eqb1);
  806|      0|                let or2 = eqa2.or(eqb2);
  807|      0|                let or3 = eqa3.or(eqb3);
  808|      0|                let or4 = or1.or(or2);
  809|      0|                let or5 = or3.or(or4);
  810|      0|                if or5.movemask_will_have_non_zero() {
  811|      0|                    let mask = eqa1
  812|      0|                        .movemask()
  813|      0|                        .or(eqa2.movemask())
  814|      0|                        .or(eqa3.movemask());
  815|      0|                    if mask.has_non_zero() {
  816|      0|                        return Some(cur.add(topos(mask)));
  817|      0|                    }
  818|      0|
  819|      0|                    let mask = eqb1
  820|      0|                        .movemask()
  821|      0|                        .or(eqb2.movemask())
  822|      0|                        .or(eqb3.movemask());
  823|      0|                    debug_assert!(mask.has_non_zero());
  824|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  825|      0|                }
  826|      0|                cur = cur.add(Self::LOOP_SIZE);
  827|       |            }
  828|  2.72k|        }
  829|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  830|       |        // loads here, but I believe we are guaranteed that they are aligned
  831|       |        // since `cur` is aligned.
  832|  3.39k|        while cur <= end.sub(V::BYTES) {
  833|  1.26k|            debug_assert!(end.distance(cur) >= V::BYTES);
  834|  1.26k|            if let Some(cur) = self.search_chunk(cur, topos) {
  835|    599|                return Some(cur);
  836|    666|            }
  837|    666|            cur = cur.add(V::BYTES);
  838|       |        }
  839|       |        // Finally handle any remaining bytes less than the size of V. In this
  840|       |        // case, our pointer may indeed be unaligned and the load may overlap
  841|       |        // with the previous one. But that's okay since we know the previous
  842|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  843|  2.12k|        if cur < end {
  844|  2.04k|            debug_assert!(end.distance(cur) < V::BYTES);
  845|  2.04k|            cur = cur.sub(V::BYTES - end.distance(cur));
  846|  2.04k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  847|  2.04k|            return self.search_chunk(cur, topos);
  848|     78|        }
  849|     78|        None
  850|  60.3k|    }
_RNvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE8find_rawBb_:
  765|  3.07M|    pub(crate) unsafe fn find_raw(
  766|  3.07M|        &self,
  767|  3.07M|        start: *const u8,
  768|  3.07M|        end: *const u8,
  769|  3.07M|    ) -> Option<*const u8> {
  770|  3.07M|        // If we want to support vectors bigger than 256 bits, we probably
  771|  3.07M|        // need to move up to using a u64 for the masks used below. Currently
  772|  3.07M|        // they are 32 bits, which means we're SOL for vectors that need masks
  773|  3.07M|        // bigger than 32 bits. Overall unclear until there's a use case.
  774|  3.07M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  775|       |
  776|  3.07M|        let topos = V::Mask::first_offset;
  777|  3.07M|        let len = end.distance(start);
  778|  3.07M|        debug_assert!(
  779|      0|            len >= V::BYTES,
  780|      0|            "haystack has length {}, but must be at least {}",
  781|       |            len,
  782|       |            V::BYTES
  783|       |        );
  784|       |
  785|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  786|       |        // of the haystack prior to where aligned loads can start.
  787|  3.07M|        if let Some(cur) = self.search_chunk(start, topos) {
  788|  2.55M|            return Some(cur);
  789|   523k|        }
  790|   523k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  791|   523k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  792|   523k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  793|   523k|        if len >= Self::LOOP_SIZE {
  794|  2.49M|            while cur <= end.sub(Self::LOOP_SIZE) {
  795|  2.49M|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  796|       |
  797|  2.49M|                let a = V::load_aligned(cur);
  798|  2.49M|                let b = V::load_aligned(cur.add(V::BYTES));
  799|  2.49M|                let eqa1 = self.v1.cmpeq(a);
  800|  2.49M|                let eqb1 = self.v1.cmpeq(b);
  801|  2.49M|                let eqa2 = self.v2.cmpeq(a);
  802|  2.49M|                let eqb2 = self.v2.cmpeq(b);
  803|  2.49M|                let eqa3 = self.v3.cmpeq(a);
  804|  2.49M|                let eqb3 = self.v3.cmpeq(b);
  805|  2.49M|                let or1 = eqa1.or(eqb1);
  806|  2.49M|                let or2 = eqa2.or(eqb2);
  807|  2.49M|                let or3 = eqa3.or(eqb3);
  808|  2.49M|                let or4 = or1.or(or2);
  809|  2.49M|                let or5 = or3.or(or4);
  810|  2.49M|                if or5.movemask_will_have_non_zero() {
  811|   496k|                    let mask = eqa1
  812|   496k|                        .movemask()
  813|   496k|                        .or(eqa2.movemask())
  814|   496k|                        .or(eqa3.movemask());
  815|   496k|                    if mask.has_non_zero() {
  816|   379k|                        return Some(cur.add(topos(mask)));
  817|   116k|                    }
  818|   116k|
  819|   116k|                    let mask = eqb1
  820|   116k|                        .movemask()
  821|   116k|                        .or(eqb2.movemask())
  822|   116k|                        .or(eqb3.movemask());
  823|   116k|                    debug_assert!(mask.has_non_zero());
  824|   116k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  825|  1.99M|                }
  826|  1.99M|                cur = cur.add(Self::LOOP_SIZE);
  827|       |            }
  828|  24.1k|        }
  829|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  830|       |        // loads here, but I believe we are guaranteed that they are aligned
  831|       |        // since `cur` is aligned.
  832|  35.0k|        while cur <= end.sub(V::BYTES) {
  833|  24.3k|            debug_assert!(end.distance(cur) >= V::BYTES);
  834|  24.3k|            if let Some(cur) = self.search_chunk(cur, topos) {
  835|  16.3k|                return Some(cur);
  836|  8.00k|            }
  837|  8.00k|            cur = cur.add(V::BYTES);
  838|       |        }
  839|       |        // Finally handle any remaining bytes less than the size of V. In this
  840|       |        // case, our pointer may indeed be unaligned and the load may overlap
  841|       |        // with the previous one. But that's okay since we know the previous
  842|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  843|  10.7k|        if cur < end {
  844|  10.7k|            debug_assert!(end.distance(cur) < V::BYTES);
  845|  10.7k|            cur = cur.sub(V::BYTES - end.distance(cur));
  846|  10.7k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  847|  10.7k|            return self.search_chunk(cur, topos);
  848|     14|        }
  849|     14|        None
  850|  3.07M|    }
_RINvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB6_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBc_6vector16SensibleMoveMaskNtB29_8MoveMask12first_offsetEBc_:
  962|  63.6k|    unsafe fn search_chunk(
  963|  63.6k|        &self,
  964|  63.6k|        cur: *const u8,
  965|  63.6k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  966|  63.6k|    ) -> Option<*const u8> {
  967|  63.6k|        let chunk = V::load_unaligned(cur);
  968|  63.6k|        let eq1 = self.v1.cmpeq(chunk);
  969|  63.6k|        let eq2 = self.v2.cmpeq(chunk);
  970|  63.6k|        let eq3 = self.v3.cmpeq(chunk);
  971|  63.6k|        let mask = eq1.or(eq2).or(eq3).movemask();
  972|  63.6k|        if mask.has_non_zero() {
  973|  59.1k|            let mask1 = eq1.movemask();
  974|  59.1k|            let mask2 = eq2.movemask();
  975|  59.1k|            let mask3 = eq3.movemask();
  976|  59.1k|            Some(cur.add(mask_to_offset(mask1.or(mask2).or(mask3))))
  977|       |        } else {
  978|  4.54k|            None
  979|       |        }
  980|  63.6k|    }
_RINvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB6_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBc_6vector16SensibleMoveMaskNtB29_8MoveMask12first_offsetEBc_:
  962|  3.10M|    unsafe fn search_chunk(
  963|  3.10M|        &self,
  964|  3.10M|        cur: *const u8,
  965|  3.10M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  966|  3.10M|    ) -> Option<*const u8> {
  967|  3.10M|        let chunk = V::load_unaligned(cur);
  968|  3.10M|        let eq1 = self.v1.cmpeq(chunk);
  969|  3.10M|        let eq2 = self.v2.cmpeq(chunk);
  970|  3.10M|        let eq3 = self.v3.cmpeq(chunk);
  971|  3.10M|        let mask = eq1.or(eq2).or(eq3).movemask();
  972|  3.10M|        if mask.has_non_zero() {
  973|  2.57M|            let mask1 = eq1.movemask();
  974|  2.57M|            let mask2 = eq2.movemask();
  975|  2.57M|            let mask3 = eq3.movemask();
  976|  2.57M|            Some(cur.add(mask_to_offset(mask1.or(mask2).or(mask3))))
  977|       |        } else {
  978|   531k|            None
  979|       |        }
  980|  3.10M|    }
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|   979k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|   979k|    start: *const u8,
 1150|   979k|    end: *const u8,
 1151|   979k|    confirm: F,
 1152|   979k|) -> Option<*const u8> {
 1153|   979k|    debug_assert!(start <= end);
 1154|   979k|    let mut ptr = start;
 1155|  3.91M|    while ptr < end {
 1156|  3.69M|        if confirm(*ptr) {
 1157|   751k|            return Some(ptr);
 1158|  2.94M|        }
 1159|  2.94M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|   227k|    None
 1162|   979k|}
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|  1.68M|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  1.68M|    start: *const u8,
 1150|  1.68M|    end: *const u8,
 1151|  1.68M|    confirm: F,
 1152|  1.68M|) -> Option<*const u8> {
 1153|  1.68M|    debug_assert!(start <= end);
 1154|  1.68M|    let mut ptr = start;
 1155|  6.34M|    while ptr < end {
 1156|  5.22M|        if confirm(*ptr) {
 1157|   570k|            return Some(ptr);
 1158|  4.65M|        }
 1159|  4.65M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  1.11M|    None
 1162|  1.68M|}
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs6_NtNtNtB6_6x86_644avx26memchrNtB1d_5Three8find_raw0EB8_:
 1148|  65.3k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  65.3k|    start: *const u8,
 1150|  65.3k|    end: *const u8,
 1151|  65.3k|    confirm: F,
 1152|  65.3k|) -> Option<*const u8> {
 1153|  65.3k|    debug_assert!(start <= end);
 1154|  65.3k|    let mut ptr = start;
 1155|   153k|    while ptr < end {
 1156|   144k|        if confirm(*ptr) {
 1157|  56.6k|            return Some(ptr);
 1158|  87.6k|        }
 1159|  87.6k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  8.73k|    None
 1162|  65.3k|}

_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  4.03M|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  4.03M|        One {
   71|  4.03M|            sse2: generic::One::new(needle),
   72|  4.03M|            avx2: generic::One::new(needle),
   73|  4.03M|        }
   74|  4.03M|    }
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  4.03M|    pub unsafe fn find_raw(
  180|  4.03M|        &self,
  181|  4.03M|        start: *const u8,
  182|  4.03M|        end: *const u8,
  183|  4.03M|    ) -> Option<*const u8> {
  184|  4.03M|        if start >= end {
  185|   719k|            return None;
  186|  3.31M|        }
  187|  3.31M|        let len = end.distance(start);
  188|  3.31M|        if len < __m256i::BYTES {
  189|  1.07M|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|   979k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|   979k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  99.8k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  2.23M|        }
  201|  2.23M|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  2.23M|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  2.23M|        // enough to run on the vector routine. Pointer validity is caller's
  204|  2.23M|        // responsibility.
  205|  2.23M|        //
  206|  2.23M|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  2.23M|        // means we'd have to annotate this routine with `target_feature`.
  208|  2.23M|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  2.23M|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  2.23M|        // The real problem is that a routine with a `target_feature`
  211|  2.23M|        // annotation generally can't be inlined into caller code unless
  212|  2.23M|        // the caller code has the same target feature annotations. Namely,
  213|  2.23M|        // the common case (at time of writing) is for calling code to not
  214|  2.23M|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  2.23M|        // `target_feature` on this routine, it can be inlined which will
  216|  2.23M|        // handle some of the short-haystack cases above without touching the
  217|  2.23M|        // architecture specific code.
  218|  2.23M|        self.find_raw_avx2(start, end)
  219|  4.03M|    }
_RNCNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|  3.69M|                generic::fwd_byte_by_byte(start, end, |b| {
  193|  3.69M|                    b == self.sse2.needle1()
  194|  3.69M|                })
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  99.8k|    unsafe fn find_raw_sse2(
  337|  99.8k|        &self,
  338|  99.8k|        start: *const u8,
  339|  99.8k|        end: *const u8,
  340|  99.8k|    ) -> Option<*const u8> {
  341|  99.8k|        self.sse2.find_raw(start, end)
  342|  99.8k|    }
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  2.23M|    unsafe fn find_raw_avx2(
  397|  2.23M|        &self,
  398|  2.23M|        start: *const u8,
  399|  2.23M|        end: *const u8,
  400|  2.23M|    ) -> Option<*const u8> {
  401|  2.23M|        self.avx2.find_raw(start, end)
  402|  2.23M|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  36.0M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  36.0M|        Two {
  558|  36.0M|            sse2: generic::Two::new(needle1, needle2),
  559|  36.0M|            avx2: generic::Two::new(needle1, needle2),
  560|  36.0M|        }
  561|  36.0M|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  36.0M|    pub unsafe fn find_raw(
  655|  36.0M|        &self,
  656|  36.0M|        start: *const u8,
  657|  36.0M|        end: *const u8,
  658|  36.0M|    ) -> Option<*const u8> {
  659|  36.0M|        if start >= end {
  660|   134k|            return None;
  661|  35.8M|        }
  662|  35.8M|        let len = end.distance(start);
  663|  35.8M|        if len < __m256i::BYTES {
  664|  2.29M|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  1.68M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  1.68M|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|   605k|                self.find_raw_sse2(start, end)
  674|       |            };
  675|  33.5M|        }
  676|  33.5M|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|  33.5M|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|  33.5M|        // enough to run on the vector routine. Pointer validity is caller's
  679|  33.5M|        // responsibility.
  680|  33.5M|        //
  681|  33.5M|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|  33.5M|        // means we'd have to annotate this routine with `target_feature`.
  683|  33.5M|        // Which is fine, because this routine is `unsafe` anyway and the
  684|  33.5M|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|  33.5M|        // The real problem is that a routine with a `target_feature`
  686|  33.5M|        // annotation generally can't be inlined into caller code unless
  687|  33.5M|        // the caller code has the same target feature annotations. Namely,
  688|  33.5M|        // the common case (at time of writing) is for calling code to not
  689|  33.5M|        // have the `avx2` target feature enabled *at compile time*. Without
  690|  33.5M|        // `target_feature` on this routine, it can be inlined which will
  691|  33.5M|        // handle some of the short-haystack cases above without touching the
  692|  33.5M|        // architecture specific code.
  693|  33.5M|        self.find_raw_avx2(start, end)
  694|  36.0M|    }
_RNCNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  5.22M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  5.22M|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  5.22M|                })
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|   605k|    unsafe fn find_raw_sse2(
  765|   605k|        &self,
  766|   605k|        start: *const u8,
  767|   605k|        end: *const u8,
  768|   605k|    ) -> Option<*const u8> {
  769|   605k|        self.sse2.find_raw(start, end)
  770|   605k|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|  33.5M|    unsafe fn find_raw_avx2(
  805|  33.5M|        &self,
  806|  33.5M|        start: *const u8,
  807|  33.5M|        end: *const u8,
  808|  33.5M|    ) -> Option<*const u8> {
  809|  33.5M|        self.avx2.find_raw(start, end)
  810|  33.5M|    }
_RNvMs6_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_5Three13new_uncheckedBd_:
  935|  3.20M|    pub unsafe fn new_unchecked(
  936|  3.20M|        needle1: u8,
  937|  3.20M|        needle2: u8,
  938|  3.20M|        needle3: u8,
  939|  3.20M|    ) -> Three {
  940|  3.20M|        Three {
  941|  3.20M|            sse2: generic::Three::new(needle1, needle2, needle3),
  942|  3.20M|            avx2: generic::Three::new(needle1, needle2, needle3),
  943|  3.20M|        }
  944|  3.20M|    }
_RNvMs6_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_5Three12is_availableBd_:
  956|      1|    pub fn is_available() -> bool {
  957|      1|        #[cfg(not(target_feature = "sse2"))]
  958|      1|        {
  959|      1|            false
  960|      1|        }
  961|      1|        #[cfg(target_feature = "sse2")]
  962|      1|        {
  963|      1|            #[cfg(target_feature = "avx2")]
  964|      1|            {
  965|      1|                true
  966|      1|            }
  967|      1|            #[cfg(not(target_feature = "avx2"))]
  968|      1|            {
  969|      1|                #[cfg(feature = "std")]
  970|      1|                {
  971|      1|                    std::is_x86_feature_detected!("avx2")
  972|       |                }
  973|       |                #[cfg(not(feature = "std"))]
  974|       |                {
  975|       |                    false
  976|       |                }
  977|       |            }
  978|       |        }
  979|      1|    }
_RNvMs6_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_5Three8find_rawBd_:
 1037|  3.20M|    pub unsafe fn find_raw(
 1038|  3.20M|        &self,
 1039|  3.20M|        start: *const u8,
 1040|  3.20M|        end: *const u8,
 1041|  3.20M|    ) -> Option<*const u8> {
 1042|  3.20M|        if start >= end {
 1043|  1.29k|            return None;
 1044|  3.19M|        }
 1045|  3.19M|        let len = end.distance(start);
 1046|  3.19M|        if len < __m256i::BYTES {
 1047|   125k|            return if len < __m128i::BYTES {
 1048|       |                // SAFETY: We require the caller to pass valid start/end
 1049|       |                // pointers.
 1050|  65.3k|                generic::fwd_byte_by_byte(start, end, |b| {
 1051|       |                    b == self.sse2.needle1()
 1052|       |                        || b == self.sse2.needle2()
 1053|       |                        || b == self.sse2.needle3()
 1054|  65.3k|                })
 1055|       |            } else {
 1056|       |                // SAFETY: We require the caller to pass valid start/end
 1057|       |                // pointers.
 1058|  60.3k|                self.find_raw_sse2(start, end)
 1059|       |            };
 1060|  3.07M|        }
 1061|  3.07M|        // SAFETY: Building a `Three` means it's safe to call both 'sse2' and
 1062|  3.07M|        // 'avx2' routines. Also, we've checked that our haystack is big
 1063|  3.07M|        // enough to run on the vector routine. Pointer validity is caller's
 1064|  3.07M|        // responsibility.
 1065|  3.07M|        //
 1066|  3.07M|        // Note that we could call `self.avx2.find_raw` directly here. But that
 1067|  3.07M|        // means we'd have to annotate this routine with `target_feature`.
 1068|  3.07M|        // Which is fine, because this routine is `unsafe` anyway and the
 1069|  3.07M|        // `target_feature` obligation is met by virtue of building a `Three`.
 1070|  3.07M|        // The real problem is that a routine with a `target_feature`
 1071|  3.07M|        // annotation generally can't be inlined into caller code unless
 1072|  3.07M|        // the caller code has the same target feature annotations. Namely,
 1073|  3.07M|        // the common case (at time of writing) is for calling code to not
 1074|  3.07M|        // have the `avx2` target feature enabled *at compile time*. Without
 1075|  3.07M|        // `target_feature` on this routine, it can be inlined which will
 1076|  3.07M|        // handle some of the short-haystack cases above without touching the
 1077|  3.07M|        // architecture specific code.
 1078|  3.07M|        self.find_raw_avx2(start, end)
 1079|  3.20M|    }
_RNCNvMs6_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB7_5Three8find_raw0Bf_:
 1050|   144k|                generic::fwd_byte_by_byte(start, end, |b| {
 1051|   144k|                    b == self.sse2.needle1()
 1052|  93.7k|                        || b == self.sse2.needle2()
 1053|  92.7k|                        || b == self.sse2.needle3()
 1054|   144k|                })
_RNvMs6_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_5Three13find_raw_sse2Bd_:
 1151|  60.3k|    unsafe fn find_raw_sse2(
 1152|  60.3k|        &self,
 1153|  60.3k|        start: *const u8,
 1154|  60.3k|        end: *const u8,
 1155|  60.3k|    ) -> Option<*const u8> {
 1156|  60.3k|        self.sse2.find_raw(start, end)
 1157|  60.3k|    }
_RNvMs6_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_5Three13find_raw_avx2Bd_:
 1191|  3.07M|    unsafe fn find_raw_avx2(
 1192|  3.07M|        &self,
 1193|  3.07M|        start: *const u8,
 1194|  3.07M|        end: *const u8,
 1195|  3.07M|    ) -> Option<*const u8> {
 1196|  3.07M|        self.avx2.find_raw(start, end)
 1197|  3.07M|    }

_RNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr10memchr_raw:
  174|  4.03M|pub(crate) fn memchr_raw(
  175|  4.03M|    n1: u8,
  176|  4.03M|    start: *const u8,
  177|  4.03M|    end: *const u8,
  178|  4.03M|) -> Option<*const u8> {
  179|  4.03M|    // SAFETY: We provide a valid function pointer type.
  180|  4.03M|    unsafe_ifunc!(
  181|  4.03M|        One,
  182|  4.03M|        find_raw,
  183|  4.03M|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  4.03M|        Option<*const u8>,
  185|  4.03M|        start,
  186|  4.03M|        end,
  187|  4.03M|        n1
  188|  4.03M|    )
  189|  4.03M|}
_RNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  36.0M|pub(crate) fn memchr2_raw(
  221|  36.0M|    n1: u8,
  222|  36.0M|    n2: u8,
  223|  36.0M|    start: *const u8,
  224|  36.0M|    end: *const u8,
  225|  36.0M|) -> Option<*const u8> {
  226|  36.0M|    // SAFETY: We provide a valid function pointer type.
  227|  36.0M|    unsafe_ifunc!(
  228|  36.0M|        Two,
  229|  36.0M|        find_raw,
  230|  36.0M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  36.0M|        Option<*const u8>,
  232|  36.0M|        start,
  233|  36.0M|        end,
  234|  36.0M|        n1,
  235|  36.0M|        n2
  236|  36.0M|    )
  237|  36.0M|}
_RNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr3_raw:
  270|  3.20M|pub(crate) fn memchr3_raw(
  271|  3.20M|    n1: u8,
  272|  3.20M|    n2: u8,
  273|  3.20M|    n3: u8,
  274|  3.20M|    start: *const u8,
  275|  3.20M|    end: *const u8,
  276|  3.20M|) -> Option<*const u8> {
  277|  3.20M|    // SAFETY: We provide a valid function pointer type.
  278|  3.20M|    unsafe_ifunc!(
  279|  3.20M|        Three,
  280|  3.20M|        find_raw,
  281|  3.20M|        unsafe fn(u8, u8, u8, *const u8, *const u8) -> Option<*const u8>,
  282|  3.20M|        Option<*const u8>,
  283|  3.20M|        start,
  284|  3.20M|        end,
  285|  3.20M|        n1,
  286|  3.20M|        n2,
  287|  3.20M|        n3
  288|  3.20M|    )
  289|  3.20M|}
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  4.03M|        unsafe fn find_avx2(
   79|  4.03M|            $($needle: u8),+,
   80|  4.03M|            $hay_start: *const u8,
   81|  4.03M|            $hay_end: *const u8,
   82|  4.03M|        ) -> $retty {
   83|  4.03M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  4.03M|            $memchrty::new_unchecked($($needle),+)
   85|  4.03M|                .$memchrfind($hay_start, $hay_end)
   86|  4.03M|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  36.0M|        unsafe fn find_avx2(
   79|  36.0M|            $($needle: u8),+,
   80|  36.0M|            $hay_start: *const u8,
   81|  36.0M|            $hay_end: *const u8,
   82|  36.0M|        ) -> $retty {
   83|  36.0M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  36.0M|            $memchrty::new_unchecked($($needle),+)
   85|  36.0M|                .$memchrfind($hay_start, $hay_end)
   86|  36.0M|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr3_raw9find_avx2:
   78|  3.20M|        unsafe fn find_avx2(
   79|  3.20M|            $($needle: u8),+,
   80|  3.20M|            $hay_start: *const u8,
   81|  3.20M|            $hay_end: *const u8,
   82|  3.20M|        ) -> $retty {
   83|  3.20M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  3.20M|            $memchrty::new_unchecked($($needle),+)
   85|  3.20M|                .$memchrfind($hay_start, $hay_end)
   86|  3.20M|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr3_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }

_RNvXNtCseJq1f3D7C0A_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|   123M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|   123M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|   123M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|   123M|    }
_RNvXNtCseJq1f3D7C0A_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|  2.53M|    fn as_usize(self) -> usize {
   27|  2.53M|        self as usize
   28|  2.53M|    }

_RNvMNtCseJq1f3D7C0A_6memchr6memchrNtB2_6Memchr3newCs5iIAVsTbYw4_8oxrdfxml:
  300|  78.7k|    pub fn new(needle1: u8, haystack: &'h [u8]) -> Memchr<'h> {
  301|  78.7k|        Memchr {
  302|  78.7k|            needle1,
  303|  78.7k|            it: crate::arch::generic::memchr::Iter::new(haystack),
  304|  78.7k|        }
  305|  78.7k|    }
_RNvMs2_NtCseJq1f3D7C0A_6memchr6memchrNtB5_7Memchr23newCs5iIAVsTbYw4_8oxrdfxml:
  377|  2.67M|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  2.67M|        Memchr2 {
  379|  2.67M|            needle1,
  380|  2.67M|            needle2,
  381|  2.67M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  2.67M|        }
  383|  2.67M|    }
_RNvMs6_NtCseJq1f3D7C0A_6memchr6memchrNtB5_7Memchr33newCs5iIAVsTbYw4_8oxrdfxml:
  446|  1.42M|    pub fn new(
  447|  1.42M|        needle1: u8,
  448|  1.42M|        needle2: u8,
  449|  1.42M|        needle3: u8,
  450|  1.42M|        haystack: &'h [u8],
  451|  1.42M|    ) -> Memchr3<'h> {
  452|  1.42M|        Memchr3 {
  453|  1.42M|            needle1,
  454|  1.42M|            needle2,
  455|  1.42M|            needle3,
  456|  1.42M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  457|  1.42M|        }
  458|  1.42M|    }
_RNvNtCseJq1f3D7C0A_6memchr6memchr11memchr_iterCs5iIAVsTbYw4_8oxrdfxml:
  216|  78.7k|pub fn memchr_iter<'h>(needle: u8, haystack: &'h [u8]) -> Memchr<'h> {
  217|  78.7k|    Memchr::new(needle, haystack)
  218|  78.7k|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr12memchr2_iterCs5iIAVsTbYw4_8oxrdfxml:
  232|  2.67M|pub fn memchr2_iter<'h>(
  233|  2.67M|    needle1: u8,
  234|  2.67M|    needle2: u8,
  235|  2.67M|    haystack: &'h [u8],
  236|  2.67M|) -> Memchr2<'h> {
  237|  2.67M|    Memchr2::new(needle1, needle2, haystack)
  238|  2.67M|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr12memchr3_iterCs5iIAVsTbYw4_8oxrdfxml:
  256|  1.42M|pub fn memchr3_iter<'h>(
  257|  1.42M|    needle1: u8,
  258|  1.42M|    needle2: u8,
  259|  1.42M|    needle3: u8,
  260|  1.42M|    haystack: &'h [u8],
  261|  1.42M|) -> Memchr3<'h> {
  262|  1.42M|    Memchr3::new(needle1, needle2, needle3, haystack)
  263|  1.42M|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr6memchrCs5iIAVsTbYw4_8oxrdfxml:
   27|  2.23M|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  2.23M|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  2.23M|    // pointer between start and end.
   30|  2.23M|    unsafe {
   31|  2.23M|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  2.23M|        })
   34|  2.23M|    }
   35|  2.23M|}
_RNvXs3_NtCseJq1f3D7C0A_6memchr6memchrNtB5_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCs5iIAVsTbYw4_8oxrdfxml:
  390|  35.8M|    fn next(&mut self) -> Option<usize> {
  391|  35.8M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  35.8M|        // pointers returns will fall within the start and end bounds, and this
  393|  35.8M|        // upholds the safety contract of `self.it.next`.
  394|  35.8M|        unsafe {
  395|  35.8M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  35.8M|        }
  397|  35.8M|    }
_RNvXs7_NtCseJq1f3D7C0A_6memchr6memchrNtB5_7Memchr3NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCs5iIAVsTbYw4_8oxrdfxml:
  465|  3.20M|    fn next(&mut self) -> Option<usize> {
  466|  3.20M|        // SAFETY: All of our implementations of memchr ensure that any
  467|  3.20M|        // pointers returns will fall within the start and end bounds, and this
  468|  3.20M|        // upholds the safety contract of `self.it.next`.
  469|  3.20M|        unsafe {
  470|  3.20M|            self.it.next(|s, e| {
  471|       |                memchr3_raw(self.needle1, self.needle2, self.needle3, s, e)
  472|  3.20M|            })
  473|  3.20M|        }
  474|  3.20M|    }
_RNvXs_NtCseJq1f3D7C0A_6memchr6memchrNtB4_6MemchrNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCs5iIAVsTbYw4_8oxrdfxml:
  312|  93.5k|    fn next(&mut self) -> Option<usize> {
  313|  93.5k|        // SAFETY: All of our implementations of memchr ensure that any
  314|  93.5k|        // pointers returns will fall within the start and end bounds, and this
  315|  93.5k|        // upholds the safety contract of `self.it.next`.
  316|  93.5k|        unsafe {
  317|  93.5k|            // NOTE: I attempted to define an enum of previously created
  318|  93.5k|            // searchers and then switch on those here instead of just
  319|  93.5k|            // calling `memchr_raw` (or `One::new(..).find_raw(..)`). But
  320|  93.5k|            // that turned out to have a fair bit of extra overhead when
  321|  93.5k|            // searching very small haystacks.
  322|  93.5k|            self.it.next(|s, e| memchr_raw(self.needle1, s, e))
  323|  93.5k|        }
  324|  93.5k|    }
_RNCNvXs3_NtCseJq1f3D7C0A_6memchr6memchrNtB7_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0CsjWx60dGvTf3_9quick_xml:
  395|  36.0M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNCNvXs7_NtCseJq1f3D7C0A_6memchr6memchrNtB7_7Memchr3NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0CsjWx60dGvTf3_9quick_xml:
  470|  3.20M|            self.it.next(|s, e| {
  471|  3.20M|                memchr3_raw(self.needle1, self.needle2, self.needle3, s, e)
  472|  3.20M|            })
_RNCNvXs_NtCseJq1f3D7C0A_6memchr6memchrNtB6_6MemchrNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0CsjWx60dGvTf3_9quick_xml:
  322|  93.5k|            self.it.next(|s, e| memchr_raw(self.needle1, s, e))
_RNvNtCseJq1f3D7C0A_6memchr6memchr10memchr_rawCsjWx60dGvTf3_9quick_xml:
  504|  93.5k|unsafe fn memchr_raw(
  505|  93.5k|    needle: u8,
  506|  93.5k|    start: *const u8,
  507|  93.5k|    end: *const u8,
  508|  93.5k|) -> Option<*const u8> {
  509|  93.5k|    #[cfg(target_arch = "x86_64")]
  510|  93.5k|    {
  511|  93.5k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  93.5k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  93.5k|        // time. This function also handles using a fallback if neither AVX2
  514|  93.5k|        // nor SSE2 (unusual) are available.
  515|  93.5k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  93.5k|    }
  517|  93.5k|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  518|  93.5k|    {
  519|  93.5k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  93.5k|    }
  521|  93.5k|    #[cfg(target_arch = "aarch64")]
  522|  93.5k|    {
  523|  93.5k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  93.5k|    }
  525|  93.5k|    #[cfg(not(any(
  526|  93.5k|        target_arch = "x86_64",
  527|  93.5k|        all(target_arch = "wasm32", target_feature = "simd128"),
  528|  93.5k|        target_arch = "aarch64"
  529|  93.5k|    )))]
  530|  93.5k|    {
  531|  93.5k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  93.5k|    }
  533|  93.5k|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr11memchr2_rawCsjWx60dGvTf3_9quick_xml:
  574|  36.0M|unsafe fn memchr2_raw(
  575|  36.0M|    needle1: u8,
  576|  36.0M|    needle2: u8,
  577|  36.0M|    start: *const u8,
  578|  36.0M|    end: *const u8,
  579|  36.0M|) -> Option<*const u8> {
  580|  36.0M|    #[cfg(target_arch = "x86_64")]
  581|  36.0M|    {
  582|  36.0M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  36.0M|    }
  584|  36.0M|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  585|  36.0M|    {
  586|  36.0M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  36.0M|    }
  588|  36.0M|    #[cfg(target_arch = "aarch64")]
  589|  36.0M|    {
  590|  36.0M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  36.0M|    }
  592|  36.0M|    #[cfg(not(any(
  593|  36.0M|        target_arch = "x86_64",
  594|  36.0M|        all(target_arch = "wasm32", target_feature = "simd128"),
  595|  36.0M|        target_arch = "aarch64"
  596|  36.0M|    )))]
  597|  36.0M|    {
  598|  36.0M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  36.0M|            .find_raw(start, end)
  600|  36.0M|    }
  601|  36.0M|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr11memchr3_rawCsjWx60dGvTf3_9quick_xml:
  646|  3.20M|unsafe fn memchr3_raw(
  647|  3.20M|    needle1: u8,
  648|  3.20M|    needle2: u8,
  649|  3.20M|    needle3: u8,
  650|  3.20M|    start: *const u8,
  651|  3.20M|    end: *const u8,
  652|  3.20M|) -> Option<*const u8> {
  653|  3.20M|    #[cfg(target_arch = "x86_64")]
  654|  3.20M|    {
  655|  3.20M|        crate::arch::x86_64::memchr::memchr3_raw(
  656|  3.20M|            needle1, needle2, needle3, start, end,
  657|  3.20M|        )
  658|  3.20M|    }
  659|  3.20M|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  660|  3.20M|    {
  661|  3.20M|        crate::arch::wasm32::memchr::memchr3_raw(
  662|  3.20M|            needle1, needle2, needle3, start, end,
  663|  3.20M|        )
  664|  3.20M|    }
  665|  3.20M|    #[cfg(target_arch = "aarch64")]
  666|  3.20M|    {
  667|  3.20M|        crate::arch::aarch64::memchr::memchr3_raw(
  668|  3.20M|            needle1, needle2, needle3, start, end,
  669|  3.20M|        )
  670|  3.20M|    }
  671|  3.20M|    #[cfg(not(any(
  672|  3.20M|        target_arch = "x86_64",
  673|  3.20M|        all(target_arch = "wasm32", target_feature = "simd128"),
  674|  3.20M|        target_arch = "aarch64"
  675|  3.20M|    )))]
  676|  3.20M|    {
  677|  3.20M|        crate::arch::all::memchr::Three::new(needle1, needle2, needle3)
  678|  3.20M|            .find_raw(start, end)
  679|  3.20M|    }
  680|  3.20M|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr6memchrCsjWx60dGvTf3_9quick_xml:
   27|  1.70M|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  1.70M|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  1.70M|    // pointer between start and end.
   30|  1.70M|    unsafe {
   31|  1.70M|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  1.70M|        })
   34|  1.70M|    }
   35|  1.70M|}
_RNvXs3_NtCseJq1f3D7C0A_6memchr6memchrNtB5_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCsjWx60dGvTf3_9quick_xml:
  390|   188k|    fn next(&mut self) -> Option<usize> {
  391|   188k|        // SAFETY: All of our implementations of memchr ensure that any
  392|   188k|        // pointers returns will fall within the start and end bounds, and this
  393|   188k|        // upholds the safety contract of `self.it.next`.
  394|   188k|        unsafe {
  395|   188k|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|   188k|        }
  397|   188k|    }
_RNCNvNtCseJq1f3D7C0A_6memchr6memchr6memchr0B5_:
   31|  3.94M|        generic::search_slice_with_raw(haystack, |start, end| {
   32|  3.94M|            memchr_raw(needle, start, end)
   33|  3.94M|        })
_RNvNtCseJq1f3D7C0A_6memchr6memchr10memchr_rawB3_:
  504|  3.94M|unsafe fn memchr_raw(
  505|  3.94M|    needle: u8,
  506|  3.94M|    start: *const u8,
  507|  3.94M|    end: *const u8,
  508|  3.94M|) -> Option<*const u8> {
  509|  3.94M|    #[cfg(target_arch = "x86_64")]
  510|  3.94M|    {
  511|  3.94M|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  3.94M|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  3.94M|        // time. This function also handles using a fallback if neither AVX2
  514|  3.94M|        // nor SSE2 (unusual) are available.
  515|  3.94M|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  3.94M|    }
  517|  3.94M|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  518|  3.94M|    {
  519|  3.94M|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  3.94M|    }
  521|  3.94M|    #[cfg(target_arch = "aarch64")]
  522|  3.94M|    {
  523|  3.94M|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  3.94M|    }
  525|  3.94M|    #[cfg(not(any(
  526|  3.94M|        target_arch = "x86_64",
  527|  3.94M|        all(target_arch = "wasm32", target_feature = "simd128"),
  528|  3.94M|        target_arch = "aarch64"
  529|  3.94M|    )))]
  530|  3.94M|    {
  531|  3.94M|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  3.94M|    }
  533|  3.94M|}

_RNvMNtCseJq1f3D7C0A_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  126|  38.2M|    fn get_for_offset(self) -> u32 {
  127|  38.2M|        #[cfg(target_endian = "big")]
  128|  38.2M|        {
  129|  38.2M|            self.0.swap_bytes()
  130|  38.2M|        }
  131|  38.2M|        #[cfg(target_endian = "little")]
  132|  38.2M|        {
  133|  38.2M|            self.0
  134|  38.2M|        }
  135|  38.2M|    }
_RNvXs_NtCseJq1f3D7C0A_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  171|  38.2M|    fn first_offset(self) -> usize {
  172|  38.2M|        // We are dealing with little endian here (and if we aren't, we swap
  173|  38.2M|        // the bytes so we are in practice), where the most significant byte
  174|  38.2M|        // is at a higher address. That means the least significant bit that
  175|  38.2M|        // is set corresponds to the position of our first matching byte.
  176|  38.2M|        // That position corresponds to the number of zeros after the least
  177|  38.2M|        // significant bit.
  178|  38.2M|        self.get_for_offset().trailing_zeros() as usize
  179|  38.2M|    }
_RNvXs_NtCseJq1f3D7C0A_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  146|  47.4M|    fn has_non_zero(self) -> bool {
  147|  47.4M|        self.0 != 0
  148|  47.4M|    }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  217|  1.07M|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  218|  1.07M|            _mm_loadu_si128(data as *const __m128i)
  219|  1.07M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  222|  1.94M|        unsafe fn movemask(self) -> SensibleMoveMask {
  223|  1.94M|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  224|  1.94M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  227|  2.09M|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  228|  2.09M|            _mm_cmpeq_epi8(self, vector2)
  229|  2.09M|        }
_RNvYNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtNtCseJq1f3D7C0A_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   63|  4.83M|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   64|  4.83M|        self.movemask().has_non_zero()
   65|  4.83M|    }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  266|  40.5M|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  267|  40.5M|            _mm256_loadu_si256(data as *const __m256i)
  268|  40.5M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  271|   120M|        unsafe fn movemask(self) -> SensibleMoveMask {
  272|   120M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  273|   120M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  276|   106M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  277|   106M|            _mm256_cmpeq_epi8(self, vector2)
  278|   106M|        }
_RNvXs_NtCseJq1f3D7C0A_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  161|  39.4M|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  162|  39.4M|        SensibleMoveMask(self.0 | other.0)
  163|  39.4M|    }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  207|  85.6M|        unsafe fn splat(byte: u8) -> __m128i {
  208|  85.6M|            _mm_set1_epi8(byte as i8)
  209|  85.6M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector2or:
  237|  1.01M|        unsafe fn or(self, vector2: Self) -> __m128i {
  238|  1.01M|            _mm_or_si128(self, vector2)
  239|  1.01M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  256|  85.6M|        unsafe fn splat(byte: u8) -> __m256i {
  257|  85.6M|            _mm256_set1_epi8(byte as i8)
  258|  85.6M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  261|  9.99M|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  262|  9.99M|            _mm256_load_si256(data as *const __m256i)
  263|  9.99M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector2or:
  286|  60.8M|        unsafe fn or(self, vector2: Self) -> __m256i {
  287|  60.8M|            _mm256_or_si256(self, vector2)
  288|  60.8M|        }

_RNvMs2_NtCskvfXHrT6OsD_9once_cell3impINtB5_8OnceCellNtNtCs3OstG5Tqy1X_5alloc6string6StringE14is_initializedCsfJW8UfT50Vi_13libfuzzer_sys:
   49|  28.9k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  28.9k|        // An `Acquire` load is enough because that makes all the initialization
   51|  28.9k|        // operations visible to us, and, this being a fast path, weaker
   52|  28.9k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  28.9k|        // `SeqCst` operations on the slow path.
   54|  28.9k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  28.9k|    }

_RNvMs4_NtCskvfXHrT6OsD_9once_cell4syncINtB5_8OnceCellNtNtCs3OstG5Tqy1X_5alloc6string6StringE3getCsfJW8UfT50Vi_13libfuzzer_sys:
  963|  28.9k|        pub fn get(&self) -> Option<&T> {
  964|  28.9k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  28.9k|                None
  969|       |            }
  970|  28.9k|        }

_RINvMs11_Csa9OvQYE6bC8_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECsjHb8aGRHKzq_5oxrdf:
 1578|  96.3k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1579|  96.3k|        Err(IriParseError { kind })
 1580|  96.3k|    }
_RNCNvMs11_Csa9OvQYE6bC8_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0CsjHb8aGRHKzq_5oxrdf:
 1561|  32.7k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_Csa9OvQYE6bC8_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0CsjHb8aGRHKzq_5oxrdf:
 1562|  15.3k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMCsa9OvQYE6bC8_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE10into_innerCsjHb8aGRHKzq_5oxrdf:
  185|   809k|    pub fn into_inner(self) -> T {
  186|   809k|        self.iri
  187|   809k|    }
_RNvMCsa9OvQYE6bC8_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE11is_absoluteCsjHb8aGRHKzq_5oxrdf:
  199|   830k|    pub fn is_absolute(&self) -> bool {
  200|   830k|        self.positions.scheme_end != 0
  201|   830k|    }
_RNvMCsa9OvQYE6bC8_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE5parseCsjHb8aGRHKzq_5oxrdf:
   58|   926k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|   926k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|   830k|        Ok(Self { iri, positions })
   61|   926k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCsjHb8aGRHKzq_5oxrdf:
 1359|   653k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1360|   653k|        if self.input.starts_with('[') {
 1361|       |            // IP v6
 1362|  6.99k|            let start_position = self.input.position;
 1363|   169k|            while let Some(c) = self.input.next() {
 1364|   164k|                self.output.push(c);
 1365|   164k|                if c == ']' {
 1366|  2.10k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1367|  2.10k|                    if !UNCHECKED {
 1368|  2.10k|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1369|  2.10k|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1370|      0|                        }
 1371|      0|                    }
 1372|       |
 1373|      0|                    let c = self.input.next();
 1374|      0|                    return match c {
 1375|       |                        Some(':') => {
 1376|      0|                            self.output.push(':');
 1377|      0|                            self.parse_port()
 1378|       |                        }
 1379|       |                        None | Some('/') | Some('?') | Some('#') => {
 1380|      0|                            self.output_positions.authority_end = self.output.len();
 1381|      0|                            self.parse_path_start(c)
 1382|       |                        }
 1383|      0|                        Some(c) => {
 1384|      0|                            if UNCHECKED {
 1385|      0|                                self.output.push(c);
 1386|      0|                                continue;
 1387|       |                            } else {
 1388|      0|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1389|       |                            }
 1390|       |                        }
 1391|       |                    };
 1392|   162k|                }
 1393|       |            }
 1394|  4.89k|            if UNCHECKED {
 1395|       |                // We consider it's valid even if it's not finished
 1396|      0|                self.output_positions.authority_end = self.output.len();
 1397|      0|                self.parse_path_start(None)
 1398|       |            } else {
 1399|  4.89k|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1400|       |            }
 1401|       |        } else {
 1402|       |            // Other host
 1403|  14.2M|            loop {
 1404|  14.2M|                let c = self.input.next();
 1405|  14.2M|                match c {
 1406|       |                    Some(':') => {
 1407|   154k|                        self.output.push(':');
 1408|   154k|                        return self.parse_port();
 1409|       |                    }
 1410|       |                    None | Some('/') | Some('?') | Some('#') => {
 1411|   488k|                        self.output_positions.authority_end = self.output.len();
 1412|   488k|                        return self.parse_path_start(c);
 1413|       |                    }
 1414|  13.5M|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1415|       |                }
 1416|       |            }
 1417|       |        }
 1418|   653k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCsjHb8aGRHKzq_5oxrdf:
 1468|   665k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1469|  24.1M|        loop {
 1470|  24.1M|            let c = self.input.next();
 1471|  24.1M|            match c {
 1472|       |                None | Some('/') | Some('?') | Some('#') => {
 1473|  1.50M|                    if self.output.as_str().ends_with("/..") {
 1474|      0|                        self.remove_last_segment();
 1475|      0|                        self.remove_last_segment();
 1476|      0|                        self.output.push('/');
 1477|  1.50M|                    } else if self.output.as_str().ends_with("/.") {
 1478|      0|                        self.remove_last_segment();
 1479|      0|                        self.output.push('/');
 1480|  1.50M|                    } else if c == Some('/') {
 1481|   890k|                        self.output.push('/');
 1482|   890k|                    }
 1483|       |
 1484|  1.50M|                    if c == Some('?') {
 1485|   132k|                        self.output_positions.path_end = self.output.len();
 1486|   132k|                        self.output.push('?');
 1487|   132k|                        return self.parse_query();
 1488|  1.37M|                    } else if c == Some('#') {
 1489|  93.8k|                        self.output_positions.path_end = self.output.len();
 1490|  93.8k|                        self.output_positions.query_end = self.output.len();
 1491|  93.8k|                        self.output.push('#');
 1492|  93.8k|                        return self.parse_fragment();
 1493|  1.28M|                    } else if c.is_none() {
 1494|   391k|                        self.output_positions.path_end = self.output.len();
 1495|   391k|                        self.output_positions.query_end = self.output.len();
 1496|   391k|                        return Ok(());
 1497|   890k|                    }
 1498|       |                }
 1499|  22.6M|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1500|       |            }
 1501|       |        }
 1502|   665k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCsjHb8aGRHKzq_5oxrdf:
 1420|   154k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1421|   201k|        loop {
 1422|   201k|            let c = self.input.next();
 1423|   201k|            match c {
 1424|       |                Some('/') | Some('?') | Some('#') | None => {
 1425|   150k|                    self.output_positions.authority_end = self.output.len();
 1426|   150k|                    return self.parse_path_start(c);
 1427|       |                }
 1428|  50.8k|                Some(c) => {
 1429|  50.8k|                    if UNCHECKED || c.is_ascii_digit() {
 1430|  47.1k|                        self.output.push(c)
 1431|       |                    } else {
 1432|  3.73k|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1433|       |                    }
 1434|       |                }
 1435|       |            }
 1436|       |        }
 1437|   154k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCsjHb8aGRHKzq_5oxrdf:
 1558|  33.9k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1559|  33.9k|        let c1 = self.input.next();
 1560|  33.9k|        let c2 = self.input.next();
 1561|  33.9k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1562|  17.2k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1563|       |        {
 1564|  10.2k|            self.output.push('%');
 1565|  10.2k|            self.output.push(c1.unwrap());
 1566|  10.2k|            self.output.push(c2.unwrap());
 1567|  10.2k|            Ok(())
 1568|       |        } else {
 1569|  23.6k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1570|  23.6k|                Some('%'),
 1571|  23.6k|                c1,
 1572|  23.6k|                c2,
 1573|  23.6k|            ]))
 1574|       |        }
 1575|  33.9k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCsjHb8aGRHKzq_5oxrdf:
 1504|   178k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1505|   113M|        while let Some(c) = self.input.next() {
 1506|   113M|            if c == '#' {
 1507|  21.7k|                self.output_positions.query_end = self.output.len();
 1508|  21.7k|                self.output.push('#');
 1509|  21.7k|                return self.parse_fragment();
 1510|       |            } else {
 1511|   113M|                self.read_url_query_codepoint_or_echar(c)?
 1512|       |            }
 1513|       |        }
 1514|   148k|        self.output_positions.query_end = self.output.len();
 1515|   148k|        Ok(())
 1516|   178k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCsjHb8aGRHKzq_5oxrdf:
 1213|   899k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|  6.97M|        loop {
 1215|  6.97M|            let c = self.input.next();
 1216|  6.97M|            match c {
 1217|  6.97M|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|  6.07M|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|   872k|                    self.output.push(':');
 1222|   872k|                    self.output_positions.scheme_end = self.output.len();
 1223|   872k|                    self.input_scheme_end = self.input.position;
 1224|   872k|                    return if self.input.starts_with('/') {
 1225|   769k|                        self.input.next();
 1226|   769k|                        self.output.push('/');
 1227|   769k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|   103k|                        self.output_positions.authority_end = self.output.len();
 1230|   103k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|  27.1k|                    self.input = ParserInput {
 1235|  27.1k|                        value: self.iri.chars(),
 1236|  27.1k|                        position: 0,
 1237|  27.1k|                    }; // reset
 1238|  27.1k|                    self.output.clear();
 1239|  27.1k|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|   899k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCsjHb8aGRHKzq_5oxrdf:
 1518|   119k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1519|  24.3M|        while let Some(c) = self.input.next() {
 1520|  24.2M|            self.read_url_codepoint_or_echar(c)?
 1521|       |        }
 1522|   109k|        Ok(())
 1523|   119k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_relativeCsjHb8aGRHKzq_5oxrdf:
 1256|  53.0k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1257|  53.0k|        if let Some(base) = self.base {
 1258|      0|            match self.input.front() {
 1259|       |                None => {
 1260|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1261|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1262|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1263|      0|                    self.output_positions.path_end = base.positions.path_end;
 1264|      0|                    self.output_positions.query_end = base.positions.query_end;
 1265|      0|                    Ok(())
 1266|       |                }
 1267|       |                Some('/') => {
 1268|      0|                    self.input.next();
 1269|      0|                    self.parse_relative_slash(&base)
 1270|       |                }
 1271|       |                Some('?') => {
 1272|      0|                    self.input.next();
 1273|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1274|      0|                    self.output.push('?');
 1275|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1276|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1277|      0|                    self.output_positions.path_end = base.positions.path_end;
 1278|      0|                    self.parse_query()
 1279|       |                }
 1280|       |                Some('#') => {
 1281|      0|                    self.input.next();
 1282|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1283|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1284|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1285|      0|                    self.output_positions.path_end = base.positions.path_end;
 1286|      0|                    self.output_positions.query_end = base.positions.query_end;
 1287|      0|                    self.output.push('#');
 1288|      0|                    self.parse_fragment()
 1289|       |                }
 1290|       |                _ => {
 1291|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1292|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1293|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1294|      0|                    self.output_positions.path_end = base.positions.path_end;
 1295|      0|                    self.remove_last_segment();
 1296|      0|                    if self.output.len() > base.positions.scheme_end {
 1297|      0|                        // We have some path or authority, we keep a base '/'
 1298|      0|                        self.output.push('/');
 1299|      0|                    }
 1300|      0|                    self.parse_path()
 1301|       |                }
 1302|       |            }
 1303|       |        } else {
 1304|  53.0k|            self.output_positions.scheme_end = 0;
 1305|  53.0k|            self.input_scheme_end = 0;
 1306|  53.0k|            if self.input.starts_with('/') {
 1307|  5.03k|                self.input.next();
 1308|  5.03k|                self.output.push('/');
 1309|  5.03k|                self.parse_path_or_authority()
 1310|       |            } else {
 1311|  48.0k|                self.output_positions.authority_end = 0;
 1312|  48.0k|                self.parse_path()
 1313|       |            }
 1314|       |        }
 1315|  53.0k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCsjHb8aGRHKzq_5oxrdf:
 1335|   668k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1336|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1337|  14.9M|        loop {
 1338|  14.9M|            let c = self.input.next();
 1339|  14.9M|            match c {
 1340|       |                Some('@') => {
 1341|  45.0k|                    self.output.push('@');
 1342|  45.0k|                    return self.parse_host();
 1343|       |                }
 1344|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1345|   608k|                    self.input = ParserInput {
 1346|   608k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1347|   608k|                        position: self.input_scheme_end + 2,
 1348|   608k|                    };
 1349|   608k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1350|   608k|                    return self.parse_host();
 1351|       |                }
 1352|  14.3M|                Some(c) => {
 1353|  14.3M|                    self.read_url_codepoint_or_echar(c)?;
 1354|       |                }
 1355|       |            }
 1356|       |        }
 1357|   668k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCsjHb8aGRHKzq_5oxrdf:
 1439|   639k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1440|   639k|        match c {
 1441|       |            None => {
 1442|   180k|                self.output_positions.path_end = self.output.len();
 1443|   180k|                self.output_positions.query_end = self.output.len();
 1444|   180k|                Ok(())
 1445|       |            }
 1446|       |            Some('?') => {
 1447|  45.9k|                self.output_positions.path_end = self.output.len();
 1448|  45.9k|                self.output.push('?');
 1449|  45.9k|                self.parse_query()
 1450|       |            }
 1451|       |            Some('#') => {
 1452|  4.33k|                self.output_positions.path_end = self.output.len();
 1453|  4.33k|                self.output_positions.query_end = self.output.len();
 1454|  4.33k|                self.output.push('#');
 1455|  4.33k|                self.parse_fragment()
 1456|       |            }
 1457|       |            Some('/') => {
 1458|   408k|                self.output.push('/');
 1459|   408k|                self.parse_path()
 1460|       |            }
 1461|      0|            Some(c) => {
 1462|      0|                self.read_url_codepoint_or_echar(c)?;
 1463|      0|                self.parse_path()
 1464|       |            }
 1465|       |        }
 1466|   639k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCsjHb8aGRHKzq_5oxrdf:
 1199|   926k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|   926k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|  1.32k|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|  1.32k|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|   925k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|  25.9k|            _ => self.parse_relative(),
 1210|       |        }
 1211|   926k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCsjHb8aGRHKzq_5oxrdf:
 1245|   774k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|   774k|        if self.input.starts_with('/') {
 1247|   668k|            self.input.next();
 1248|   668k|            self.output.push('/');
 1249|   668k|            self.parse_authority()
 1250|       |        } else {
 1251|   106k|            self.output_positions.authority_end = self.output.len() - 1;
 1252|   106k|            self.parse_path()
 1253|       |        }
 1254|   774k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarCsjHb8aGRHKzq_5oxrdf:
 1534|  74.7M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1535|  74.7M|        if UNCHECKED || is_url_code_point(c) {
 1536|  74.6M|            self.output.push(c);
 1537|  74.6M|            Ok(())
 1538|  83.5k|        } else if c == '%' {
 1539|  29.9k|            self.read_echar()
 1540|       |        } else {
 1541|  53.5k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1542|       |        }
 1543|  74.7M|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E33read_url_query_codepoint_or_echarCsjHb8aGRHKzq_5oxrdf:
 1546|   113M|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1547|   113M|        if UNCHECKED || is_url_query_code_point(c) {
 1548|   113M|            self.output.push(c);
 1549|   113M|            Ok(())
 1550|  10.9k|        } else if c == '%' {
 1551|  3.94k|            self.read_echar()
 1552|       |        } else {
 1553|  7.05k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1554|       |        }
 1555|   113M|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCsjHb8aGRHKzq_5oxrdf:
 1174|   926k|    fn parse(
 1175|   926k|        iri: &'a str,
 1176|   926k|        base: Option<IriRef<&'a str>>,
 1177|   926k|        output: &'a mut O,
 1178|   926k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|   926k|        let mut parser = Self {
 1180|   926k|            iri,
 1181|   926k|            base,
 1182|   926k|            input: ParserInput {
 1183|   926k|                value: iri.chars(),
 1184|   926k|                position: 0,
 1185|   926k|            },
 1186|   926k|            output,
 1187|   926k|            output_positions: IriElementsPositions {
 1188|   926k|                scheme_end: 0,
 1189|   926k|                authority_end: 0,
 1190|   926k|                path_end: 0,
 1191|   926k|                query_end: 0,
 1192|   926k|            },
 1193|   926k|            input_scheme_end: 0,
 1194|   926k|        };
 1195|   926k|        parser.parse_scheme_start()?;
 1196|   830k|        Ok(parser.output_positions)
 1197|   926k|    }
_RNvMsp_Csa9OvQYE6bC8_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE10into_innerCsjHb8aGRHKzq_5oxrdf:
  665|   809k|    pub fn into_inner(self) -> T {
  666|   809k|        self.0.into_inner()
  667|   809k|    }
_RNvMsp_Csa9OvQYE6bC8_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE5parseCsjHb8aGRHKzq_5oxrdf:
  556|   926k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|   926k|        IriRef::parse(iri)?.try_into()
  558|   926k|    }
_RNvXsV_Csa9OvQYE6bC8_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringEINtNtCscdEvteftVc2_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsjHb8aGRHKzq_5oxrdf:
  968|   830k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  969|   830k|        if iri.is_absolute() {
  970|   809k|            Ok(Self(iri))
  971|       |        } else {
  972|  21.3k|            Err(IriParseError {
  973|  21.3k|                kind: IriParseErrorKind::NoScheme,
  974|  21.3k|            })
  975|       |        }
  976|   830k|    }
_RNvCsa9OvQYE6bC8_5oxiri17is_url_code_pointCsjHb8aGRHKzq_5oxrdf:
 1584|   188M|fn is_url_code_point(c: char) -> bool {
 1585|   188M|    matches!(c,
 1586|  44.5M|        'a'..='z'
 1587|  37.1M|        | 'A'..='Z'
 1588|  55.7M|        | '0'..='9'
 1589|       |        | '!'
 1590|       |        | '$'
 1591|       |        | '&'
 1592|       |        | '\''
 1593|       |        | '('
 1594|       |        | ')'
 1595|       |        | '*'
 1596|       |        | '+'
 1597|       |        | ','
 1598|       |        | '-'
 1599|       |        | '.'
 1600|       |        | '/'
 1601|       |        | ':'
 1602|       |        | ';'
 1603|       |        | '='
 1604|       |        | '?'
 1605|       |        | '@'
 1606|       |        | '_'
 1607|       |        | '~'
 1608|  1.27M|        | '\u{A0}'..='\u{D7FF}'
 1609|   164k|        | '\u{F900}'..='\u{FDCF}'
 1610|   163k|        | '\u{FDF0}'..='\u{FFEF}'
 1611|  67.9k|        | '\u{10000}'..='\u{1FFFD}'
 1612|  52.5k|        | '\u{20000}'..='\u{2FFFD}'
 1613|  52.5k|        | '\u{30000}'..='\u{3FFFD}'
 1614|  52.5k|        | '\u{40000}'..='\u{4FFFD}'
 1615|  52.5k|        | '\u{50000}'..='\u{5FFFD}'
 1616|  28.5k|        | '\u{60000}'..='\u{6FFFD}'
 1617|  28.5k|        | '\u{70000}'..='\u{7FFFD}'
 1618|  28.5k|        | '\u{80000}'..='\u{8FFFD}'
 1619|  28.5k|        | '\u{90000}'..='\u{9FFFD}'
 1620|  28.5k|        | '\u{A0000}'..='\u{AFFFD}'
 1621|  1.14k|        | '\u{B0000}'..='\u{BFFFD}'
 1622|  1.14k|        | '\u{C0000}'..='\u{CFFFD}'
 1623|  1.14k|        | '\u{D0000}'..='\u{DFFFD}'
 1624|  1.14k|        | '\u{E1000}'..='\u{EFFFD}'
 1625|       |    )
 1626|   188M|}
_RNvCsa9OvQYE6bC8_5oxiri23is_url_query_code_pointCsjHb8aGRHKzq_5oxrdf:
 1629|   113M|fn is_url_query_code_point(c: char) -> bool {
 1630|   113M|    is_url_code_point(c)
 1631|  13.2k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1632|   113M|}
_RNvMs10_Csa9OvQYE6bC8_5oxiriNtB6_11ParserInput11starts_withCsjHb8aGRHKzq_5oxrdf:
 1156|  2.35M|    fn starts_with(&self, c: char) -> bool {
 1157|  2.35M|        self.value.as_str().starts_with(c)
 1158|  2.35M|    }
_RNvMs10_Csa9OvQYE6bC8_5oxiriNtB6_11ParserInput4nextCsjHb8aGRHKzq_5oxrdf:
 1141|   199M|    fn next(&mut self) -> Option<char> {
 1142|   199M|        if let Some(head) = self.value.next() {
 1143|   198M|            self.position += head.len_utf8();
 1144|   198M|            Some(head)
 1145|       |        } else {
 1146|  1.02M|            None
 1147|       |        }
 1148|   199M|    }
_RNvMs10_Csa9OvQYE6bC8_5oxiriNtB6_11ParserInput5frontCsjHb8aGRHKzq_5oxrdf:
 1151|   926k|    fn front(&self) -> Option<char> {
 1152|   926k|        self.value.clone().next()
 1153|   926k|    }
_RNvXsY_Csa9OvQYE6bC8_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCsjHb8aGRHKzq_5oxrdf:
 1092|  3.41M|    fn len(&self) -> usize {
 1093|  3.41M|        self.len
 1094|  3.41M|    }
_RNvXsY_Csa9OvQYE6bC8_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsjHb8aGRHKzq_5oxrdf:
 1072|   198M|    fn push(&mut self, c: char) {
 1073|   198M|        self.len += c.len_utf8();
 1074|   198M|    }
_RNvXsY_Csa9OvQYE6bC8_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer5clearCsjHb8aGRHKzq_5oxrdf:
 1082|  27.1k|    fn clear(&mut self) {
 1083|  27.1k|        self.len = 0;
 1084|  27.1k|    }
_RNvXsY_Csa9OvQYE6bC8_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCsjHb8aGRHKzq_5oxrdf:
 1097|  3.01M|    fn as_str(&self) -> &str {
 1098|  3.01M|        ""
 1099|  3.01M|    }
_RNvXsY_Csa9OvQYE6bC8_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCsjHb8aGRHKzq_5oxrdf:
 1087|   608k|    fn truncate(&mut self, new_len: usize) {
 1088|   608k|        self.len = new_len;
 1089|   608k|    }
_RNvXsW_Csa9OvQYE6bC8_5oxiriNtB5_13IriParseErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
 1003|   117k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1004|   117k|        match &self.kind {
 1005|  22.6k|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
 1006|  4.89k|            IriParseErrorKind::InvalidHostCharacter(c) => {
 1007|  4.89k|                write!(f, "Invalid character '{c}' in host")
 1008|       |            }
 1009|  2.10k|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({e})"),
 1010|  3.73k|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{c}'"),
 1011|  60.6k|            IriParseErrorKind::InvalidIriCodePoint(c) => {
 1012|  60.6k|                write!(f, "Invalid IRI code point '{c}'")
 1013|       |            }
 1014|  23.6k|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
 1015|  23.6k|                f,
 1016|  23.6k|                "Invalid IRI percent encoding '{}'",
 1017|  23.6k|                cs.iter().flatten().cloned().collect::<String>()
 1018|  23.6k|            ),
 1019|       |        }
 1020|   117k|    }

_RNvMNtCseaCfzRqAQoh_10ppv_lite864softINtB2_2x2INtNtNtNtB4_6x86_644sse24avx212u32x4x2_avx2NtBP_4NoNIENtBN_2G0E3newCsjhTDs2LGHe5_11rand_chacha:
   13|  4.95M|    pub fn new(xs: [W; 2]) -> Self {
   14|  4.95M|        x2(xs, PhantomData)
   15|  4.95M|    }
_RNvXsG_NtCseaCfzRqAQoh_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCscdEvteftVc2_4core3ops3bit6BitXor6bitxorCsjhTDs2LGHe5_11rand_chacha:
   22|  1.73M|            fn $fn(self, rhs: Self) -> Self::Output {
   23|  1.73M|                x2::new([self.0[0].$fn(rhs.0[0]), self.0[1].$fn(rhs.0[1])])
   24|  1.73M|            }
_RNvXsM_NtCseaCfzRqAQoh_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCscdEvteftVc2_4core3ops5arith9AddAssign10add_assignCsjhTDs2LGHe5_11rand_chacha:
   32|  1.73M|            fn $fn_assign(&mut self, rhs: Self) {
   33|  1.73M|                (self.0[0]).$fn_assign(rhs.0[0]);
   34|  1.73M|                (self.0[1]).$fn_assign(rhs.0[1]);
   35|  1.73M|            }
_RNvXs_NtCseaCfzRqAQoh_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right16CsjhTDs2LGHe5_11rand_chacha:
   42|   434k|        fn $fn(self) -> Self {
   43|   434k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   434k|        }
_RNvXs_NtCseaCfzRqAQoh_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right20CsjhTDs2LGHe5_11rand_chacha:
   42|   434k|        fn $fn(self) -> Self {
   43|   434k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   434k|        }
_RNvXs_NtCseaCfzRqAQoh_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right24CsjhTDs2LGHe5_11rand_chacha:
   42|   434k|        fn $fn(self) -> Self {
   43|   434k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   434k|        }
_RNvXs_NtCseaCfzRqAQoh_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right25CsjhTDs2LGHe5_11rand_chacha:
   42|   434k|        fn $fn(self) -> Self {
   43|   434k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   434k|        }
_RNvXsg_NtCseaCfzRqAQoh_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words1230CsjhTDs2LGHe5_11rand_chacha:
  208|   434k|    fn shuffle_lane_words1230(self) -> Self {
  209|   434k|        Self::new([
  210|   434k|            self.0[0].shuffle_lane_words1230(),
  211|   434k|            self.0[1].shuffle_lane_words1230(),
  212|   434k|        ])
  213|   434k|    }
_RNvXsg_NtCseaCfzRqAQoh_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words2301CsjhTDs2LGHe5_11rand_chacha:
  201|   434k|    fn shuffle_lane_words2301(self) -> Self {
  202|   434k|        Self::new([
  203|   434k|            self.0[0].shuffle_lane_words2301(),
  204|   434k|            self.0[1].shuffle_lane_words2301(),
  205|   434k|        ])
  206|   434k|    }
_RNvXsg_NtCseaCfzRqAQoh_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words3012CsjhTDs2LGHe5_11rand_chacha:
  215|   434k|    fn shuffle_lane_words3012(self) -> Self {
  216|   434k|        Self::new([
  217|   434k|            self.0[0].shuffle_lane_words3012(),
  218|   434k|            self.0[1].shuffle_lane_words3012(),
  219|   434k|        ])
  220|   434k|    }

_RINvYINtNtCseaCfzRqAQoh_10ppv_lite866x86_6410SseMachineNtB6_5YesS3NtB6_5YesS4NtB6_4NoNIENtNtB8_5types7Machine7read_leINtNtB6_4sse210u32x4_sse2BR_B12_B1d_EECsjhTDs2LGHe5_11rand_chacha:
  259|    284|    fn read_le<V>(self, input: &[u8]) -> V
  260|    284|    where
  261|    284|        V: StoreBytes,
  262|    284|    {
  263|    284|        unsafe { V::unsafe_read_le(input) }
  264|    284|    }
_RINvYINtNtCseaCfzRqAQoh_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine3vecINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EAmj4_ECsjhTDs2LGHe5_11rand_chacha:
  251|  36.1k|    fn vec<V, A>(self, a: A) -> V
  252|  36.1k|    where
  253|  36.1k|        V: MultiLane<A>,
  254|  36.1k|    {
  255|  36.1k|        V::from_lanes(a)
  256|  36.1k|    }
_RINvYINtNtCseaCfzRqAQoh_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec128_storageINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EECsjhTDs2LGHe5_11rand_chacha:
  246|   325k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|   325k|        unsafe { V::unpack(s) }
  248|   325k|    }
_RINvYINtNtCseaCfzRqAQoh_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec512_storageINtNtB8_4soft2x2INtNtNtB6_4sse24avx212u32x4x2_avx2BS_ENtB2b_2G0EECsjhTDs2LGHe5_11rand_chacha:
  246|  36.1k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|  36.1k|        unsafe { V::unpack(s) }
  248|  36.1k|    }

_RNvXNtCseaCfzRqAQoh_10ppv_lite866x86_64INtB2_10SseMachineNtB2_5YesS3NtB2_5YesS4NtB2_4NoNIENtNtB4_5types7Machine8instanceCsjhTDs2LGHe5_11rand_chacha:
   64|    142|    unsafe fn instance() -> Self {
   65|    142|        SseMachine(PhantomData)
   66|    142|    }
_RNvXs_NtCseaCfzRqAQoh_10ppv_lite866x86_64INtB4_11Avx2MachineNtB4_4NoNIENtNtB6_5types7Machine8instanceCsjhTDs2LGHe5_11rand_chacha:
   92|  36.1k|    unsafe fn instance() -> Self {
   93|  36.1k|        Avx2Machine(PhantomData)
   94|  36.1k|    }
_RNvNtCsjhTDs2LGHe5_11rand_chacha4guts11refill_wide:
  250|  36.1k|        $($pub$(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  251|  36.1k|            #[inline(always)]
  252|  36.1k|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  253|  36.1k|            use std::arch::x86_64::*;
  254|  36.1k|            #[target_feature(enable = "avx2")]
  255|  36.1k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  36.1k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  36.1k|                _mm256_zeroupper();
  258|  36.1k|                ret
  259|  36.1k|            }
  260|  36.1k|            #[target_feature(enable = "avx")]
  261|  36.1k|            #[target_feature(enable = "sse4.1")]
  262|  36.1k|            #[target_feature(enable = "ssse3")]
  263|  36.1k|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  264|  36.1k|                let ret = fn_impl($crate::x86_64::AVX::instance(), $($arg),*);
  265|  36.1k|                _mm256_zeroupper();
  266|  36.1k|                ret
  267|  36.1k|            }
  268|  36.1k|            #[target_feature(enable = "sse4.1")]
  269|  36.1k|            #[target_feature(enable = "ssse3")]
  270|  36.1k|            unsafe fn impl_sse41($($arg: $argty),*) -> $ret {
  271|  36.1k|                fn_impl($crate::x86_64::SSE41::instance(), $($arg),*)
  272|  36.1k|            }
  273|  36.1k|            #[target_feature(enable = "ssse3")]
  274|  36.1k|            unsafe fn impl_ssse3($($arg: $argty),*) -> $ret {
  275|  36.1k|                fn_impl($crate::x86_64::SSSE3::instance(), $($arg),*)
  276|  36.1k|            }
  277|  36.1k|            #[target_feature(enable = "sse2")]
  278|  36.1k|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  279|  36.1k|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  280|  36.1k|            }
  281|  36.1k|            unsafe {
  282|  36.1k|                if is_x86_feature_detected!("avx2") {
  283|  36.1k|                    impl_avx2($($arg),*)
  284|      0|                } else if is_x86_feature_detected!("avx") {
  285|      0|                    impl_avx($($arg),*)
  286|      0|                } else if is_x86_feature_detected!("sse4.1") {
  287|      0|                    impl_sse41($($arg),*)
  288|      0|                } else if is_x86_feature_detected!("ssse3") {
  289|      0|                    impl_ssse3($($arg),*)
  290|      0|                } else if is_x86_feature_detected!("sse2") {
  291|      0|                    impl_sse2($($arg),*)
  292|       |                } else {
  293|      0|                    unimplemented!()
  294|       |                }
  295|       |            }
  296|       |        }
_RNvNvNtCsjhTDs2LGHe5_11rand_chacha4guts11refill_wide9impl_avx2:
  255|  36.1k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  36.1k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  36.1k|                _mm256_zeroupper();
  258|  36.1k|                ret
  259|  36.1k|            }
_RNvNtCsjhTDs2LGHe5_11rand_chacha4guts11init_chacha:
  333|    142|        $($pub $(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  334|    142|            #[inline(always)]
  335|    142|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  336|    142|            use std::arch::x86_64::*;
  337|    142|            #[target_feature(enable = "avx")]
  338|    142|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|    142|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|    142|            }
  341|    142|            #[target_feature(enable = "sse2")]
  342|    142|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  343|    142|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  344|    142|            }
  345|    142|            unsafe {
  346|    142|                if is_x86_feature_detected!("avx") {
  347|    142|                    impl_avx($($arg),*)
  348|      0|                } else if is_x86_feature_detected!("sse2") {
  349|      0|                    impl_sse2($($arg),*)
  350|       |                } else {
  351|      0|                    unimplemented!()
  352|       |                }
  353|       |            }
  354|       |        }
_RNvNvNtCsjhTDs2LGHe5_11rand_chacha4guts11init_chacha8impl_avx:
  338|    142|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|    142|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|    142|            }
_RNvXs2_NtCseaCfzRqAQoh_10ppv_lite866x86_64NtB5_14vec128_storageINtNtCscdEvteftVc2_4core7convert4FromAmj4_E4from:
  130|    142|    fn from(u32x4: [u32; 4]) -> Self {
  131|    142|        vec128_storage { u32x4 }
  132|    142|    }

_RNvMNtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtB2_12u32x4x2_avx2NtB6_4NoNIE3newCsjhTDs2LGHe5_11rand_chacha:
 1394|  13.3M|        fn new(x: __m256i) -> Self {
 1395|  13.3M|            Self { x, ni: PhantomData }
 1396|  13.3M|        }
_RNvMsZ_NtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIE3newCsjhTDs2LGHe5_11rand_chacha:
   64|  2.02M|            fn new(x: __m128i) -> Self {
   65|  2.02M|                $vec {
   66|  2.02M|                    x,
   67|  2.02M|                    s3: PhantomData,
   68|  2.02M|                    s4: PhantomData,
   69|  2.02M|                    ni: PhantomData,
   70|  2.02M|                }
   71|  2.02M|            }
_RNvXs0_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types5StoreNtB9_14vec256_storageE6unpackCsjhTDs2LGHe5_11rand_chacha:
 1402|  72.3k|        unsafe fn unpack(p: vec256_storage) -> Self {
 1403|  72.3k|            Self::new(p.avx)
 1404|  72.3k|        }
_RNvXs10_NtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes14unsafe_read_leCsjhTDs2LGHe5_11rand_chacha:
   79|    284|            unsafe fn unsafe_read_le(input: &[u8]) -> Self {
   80|    284|                assert_eq!(input.len(), 16);
   81|    284|                Self::new(_mm_loadu_si128(input.as_ptr() as *const _))
   82|    284|            }
_RNvXs10_NtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes8write_leCsjhTDs2LGHe5_11rand_chacha:
   89|   578k|            fn write_le(self, out: &mut [u8]) {
   90|   578k|                assert_eq!(out.len(), 16);
   91|   578k|                unsafe { _mm_storeu_si128(out.as_mut_ptr() as *mut _, self.x) }
   92|   578k|            }
_RNvXs1R_NtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtNtCscdEvteftVc2_4core3ops5arith3Add3addCsjhTDs2LGHe5_11rand_chacha:
   18|   578k|            fn $fn(self, rhs: Self) -> Self::Output {
   19|   578k|                Self::new(unsafe { $impl_fn(self.x, rhs.x) })
   20|   578k|            }
_RNvXs2_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E10from_lanesCsjhTDs2LGHe5_11rand_chacha:
 1439|   289k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 2]) -> Self {
 1440|   289k|            Self::new(unsafe { _mm256_setr_m128i(x[0].x, x[1].x) })
 1441|   289k|        }
_RNvXs2_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E8to_lanesCsjhTDs2LGHe5_11rand_chacha:
 1430|   289k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 2] {
 1431|   289k|            unsafe {
 1432|   289k|                [
 1433|   289k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 0)),
 1434|   289k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 1)),
 1435|   289k|                ]
 1436|   289k|            }
 1437|   289k|        }
_RNvXs6_NtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E10from_lanesCsjhTDs2LGHe5_11rand_chacha:
  331|  36.1k|    fn from_lanes(xs: [u32; 4]) -> Self {
  332|  36.1k|        unsafe {
  333|  36.1k|            let mut x = _mm_cvtsi64_si128((xs[0] as u64 | ((xs[1] as u64) << 32)) as i64);
  334|  36.1k|            x = _mm_insert_epi64(x, (xs[2] as u64 | ((xs[3] as u64) << 32)) as i64, 1);
  335|  36.1k|            Self::new(x)
  336|  36.1k|        }
  337|  36.1k|    }
_RNvXs6_NtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E8to_lanesCsjhTDs2LGHe5_11rand_chacha:
  323|   144k|    fn to_lanes(self) -> [u32; 4] {
  324|   144k|        unsafe {
  325|   144k|            let x = _mm_cvtsi128_si64(self.x) as u64;
  326|   144k|            let y = _mm_extract_epi64(self.x, 1) as u64;
  327|   144k|            [x as u32, (x >> 32) as u32, y as u32, (y >> 32) as u32]
  328|   144k|        }
  329|   144k|    }
_RNvXs6_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right16CsjhTDs2LGHe5_11rand_chacha:
 1470|   868k|            fn $name(self) -> Self {
 1471|   868k|                Self::new(unsafe {
 1472|   868k|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|   868k|                })
 1474|   868k|            }
_RNvXs6_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right20CsjhTDs2LGHe5_11rand_chacha:
 1480|   868k|            fn $name(self) -> Self {
 1481|   868k|                Self::new(unsafe {
 1482|   868k|                    _mm256_or_si256(
 1483|   868k|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|   868k|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|   868k|                    )
 1486|   868k|                })
 1487|   868k|            }
_RNvXs6_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right24CsjhTDs2LGHe5_11rand_chacha:
 1470|   868k|            fn $name(self) -> Self {
 1471|   868k|                Self::new(unsafe {
 1472|   868k|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|   868k|                })
 1474|   868k|            }
_RNvXs6_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right25CsjhTDs2LGHe5_11rand_chacha:
 1480|   868k|            fn $name(self) -> Self {
 1481|   868k|                Self::new(unsafe {
 1482|   868k|                    _mm256_or_si256(
 1483|   868k|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|   868k|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|   868k|                    )
 1486|   868k|                })
 1487|   868k|            }
_RNvXsX_NtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types5StoreNtB7_14vec128_storageE6unpackCsjhTDs2LGHe5_11rand_chacha:
   52|   325k|            unsafe fn unpack(x: vec128_storage) -> Self {
   53|   325k|                Self::new(x.sse2)
   54|   325k|            }
_RNvXsc_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words1230CsjhTDs2LGHe5_11rand_chacha:
 1582|   868k|        fn shuffle_lane_words1230(self) -> Self {
 1583|   868k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b1001_0011) })
 1584|   868k|        }
_RNvXsc_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words2301CsjhTDs2LGHe5_11rand_chacha:
 1586|   868k|        fn shuffle_lane_words2301(self) -> Self {
 1587|   868k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0100_1110) })
 1588|   868k|        }
_RNvXsc_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words3012CsjhTDs2LGHe5_11rand_chacha:
 1590|   868k|        fn shuffle_lane_words3012(self) -> Self {
 1591|   868k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0011_1001) })
 1592|   868k|        }
_RNvXse_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types5StoreNtB9_14vec512_storageE6unpackCsjhTDs2LGHe5_11rand_chacha:
 1602|  36.1k|        unsafe fn unpack(p: vec512_storage) -> Self {
 1603|  36.1k|            Self::new([
 1604|  36.1k|                u32x4x2_avx2::unpack(p.avx[0]),
 1605|  36.1k|                u32x4x2_avx2::unpack(p.avx[1]),
 1606|  36.1k|            ])
 1607|  36.1k|        }
_RNvXsf_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E10from_lanesCsjhTDs2LGHe5_11rand_chacha:
 1617|   144k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 4]) -> Self {
 1618|   144k|            let ab = u32x4x2_avx2::from_lanes([x[0], x[1]]);
 1619|   144k|            let cd = u32x4x2_avx2::from_lanes([x[2], x[3]]);
 1620|   144k|            Self::new([ab, cd])
 1621|   144k|        }
_RNvXsf_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E8to_lanesCsjhTDs2LGHe5_11rand_chacha:
 1611|   144k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 4] {
 1612|   144k|            let [a, b] = self.0[0].to_lanes();
 1613|   144k|            let [c, d] = self.0[1].to_lanes();
 1614|   144k|            [a, b, c, d]
 1615|   144k|        }
_RNvXsl_NtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE6insertCsjhTDs2LGHe5_11rand_chacha:
  523|   506k|    fn insert(self, v: u32, i: u32) -> Self {
  524|   506k|        Self::new(unsafe {
  525|   506k|            match i {
  526|   253k|                0 => _mm_insert_epi32(self.x, v as i32, 0),
  527|   253k|                1 => _mm_insert_epi32(self.x, v as i32, 1),
  528|      0|                2 => _mm_insert_epi32(self.x, v as i32, 2),
  529|      0|                3 => _mm_insert_epi32(self.x, v as i32, 3),
  530|      0|                _ => unreachable!(),
  531|       |            }
  532|       |        })
  533|   506k|    }
_RNvXsl_NtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE7extractCsjhTDs2LGHe5_11rand_chacha:
  519|   144k|    fn extract(self, i: u32) -> u32 {
  520|   144k|        self.to_lanes()[i as usize]
  521|   144k|    }
_RNvXsq_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCscdEvteftVc2_4core3ops5arith9AddAssign10add_assignCsjhTDs2LGHe5_11rand_chacha:
 1527|  3.47M|                fn $assign_fn(&mut self, rhs: Self) {
 1528|  3.47M|                    *self = self.$bin_fn(rhs);
 1529|  3.47M|                }
_RNvXsr_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCscdEvteftVc2_4core3ops3bit6BitXor6bitxorCsjhTDs2LGHe5_11rand_chacha:
 1543|  3.47M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  3.47M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  3.47M|                }
_RNvXsv_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCscdEvteftVc2_4core3ops5arith3Add3addCsjhTDs2LGHe5_11rand_chacha:
 1543|  3.47M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  3.47M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  3.47M|                }
_RNvXsY_NtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse2NtB7_14vec128_storageINtNtCscdEvteftVc2_4core7convert4FromINtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEE4fromCsjhTDs2LGHe5_11rand_chacha:
   58|  36.4k|            fn from(x: $vec<S3, S4, NI>) -> Self {
   59|  36.4k|                vec128_storage { sse2: x.x }
   60|  36.4k|            }
_RNvXsj_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2NtB9_14vec512_storageINtNtCscdEvteftVc2_4core7convert4FromINtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EE4fromCsjhTDs2LGHe5_11rand_chacha:
 1683|  36.1k|        fn from(x: u32x4x4_avx2<NI>) -> Self {
 1684|  36.1k|            Self {
 1685|  36.1k|                avx: [
 1686|  36.1k|                    vec256_storage { avx: x.0[0].x },
 1687|  36.1k|                    vec256_storage { avx: x.0[1].x },
 1688|  36.1k|                ],
 1689|  36.1k|            }
 1690|  36.1k|        }

_RNvMNtCsjWx60dGvTf3_9quick_xml8encodingNtB2_7Decoder4utf8:
   45|  59.2k|    pub(crate) fn utf8() -> Self {
   46|  59.2k|        Decoder {
   47|  59.2k|            #[cfg(feature = "encoding")]
   48|  59.2k|            encoding: UTF_8,
   49|  59.2k|        }
   50|  59.2k|    }
_RNvMs_NtCsjWx60dGvTf3_9quick_xml8encodingNtB4_7Decoder6decode:
   82|  3.24M|    pub fn decode<'b>(&self, bytes: &'b [u8]) -> Result<Cow<'b, str>> {
   83|       |        #[cfg(not(feature = "encoding"))]
   84|  3.24M|        let decoded = Ok(Cow::Borrowed(std::str::from_utf8(bytes)?));
   85|       |
   86|       |        #[cfg(feature = "encoding")]
   87|       |        let decoded = decode(bytes, self.encoding);
   88|       |
   89|  2.76M|        decoded
   90|  3.24M|    }

_RNvXs8_NtCsjWx60dGvTf3_9quick_xml6errorsNtB5_5ErrorINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_6escape11EscapeErrorE4fromCs5iIAVsTbYw4_8oxrdfxml:
  251|  56.9k|    fn from(error: EscapeError) -> Error {
  252|  56.9k|        Error::EscapeError(error)
  253|  56.9k|    }
_RNvXNtCsjWx60dGvTf3_9quick_xml6errorsNtB2_11SyntaxErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
   41|  14.6k|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
   42|  14.6k|        match self {
   43|     36|            Self::InvalidBangMarkup => f.write_str("unknown or missed symbol in markup"),
   44|       |            Self::UnclosedPIOrXmlDecl => {
   45|  1.22k|                f.write_str("processing instruction or xml declaration not closed: `?>` not found before end of input")
   46|       |            }
   47|       |            Self::UnclosedComment => {
   48|     41|                f.write_str("comment not closed: `-->` not found before end of input")
   49|       |            }
   50|       |            Self::UnclosedDoctype => {
   51|     91|                f.write_str("DOCTYPE not closed: `>` not found before end of input")
   52|       |            }
   53|       |            Self::UnclosedCData => {
   54|     68|                f.write_str("CDATA not closed: `]]>` not found before end of input")
   55|       |            }
   56|  13.1k|            Self::UnclosedTag => f.write_str("tag not closed: `>` not found before end of input"),
   57|       |        }
   58|  14.6k|    }
_RNvXs0_NtCsjWx60dGvTf3_9quick_xml6errorsNtB5_14IllFormedErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
  123|  7.10k|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
  124|      0|        match self {
  125|       |            Self::MissingDeclVersion(None) => {
  126|      0|                write!(f, "an XML declaration does not contain `version` attribute")
  127|       |            }
  128|      0|            Self::MissingDeclVersion(Some(attr)) => {
  129|      0|                write!(f, "an XML declaration must start with `version` attribute, but in starts with `{}`", attr)
  130|       |            }
  131|      0|            Self::MissingDoctypeName => write!(
  132|      0|                f,
  133|      0|                "`<!DOCTYPE>` declaration does not contain a name of a document type"
  134|      0|            ),
  135|      0|            Self::MissingEndTag(tag) => write!(
  136|      0|                f,
  137|      0|                "start tag not closed: `</{}>` not found before end of input",
  138|      0|                tag,
  139|      0|            ),
  140|  2.83k|            Self::UnmatchedEndTag(tag) => {
  141|  2.83k|                write!(f, "close tag `</{}>` does not match any open tag", tag)
  142|       |            }
  143|  4.26k|            Self::MismatchedEndTag { expected, found } => write!(
  144|  4.26k|                f,
  145|  4.26k|                "expected `</{}>`, but `</{}>` was found",
  146|  4.26k|                expected, found,
  147|  4.26k|            ),
  148|       |            Self::DoubleHyphenInComment => {
  149|      0|                write!(f, "forbidden string `--` was found in a comment")
  150|       |            }
  151|       |        }
  152|  7.10k|    }
_RNvXs6_NtCsjWx60dGvTf3_9quick_xml6errorsNtB5_5ErrorINtNtCscdEvteftVc2_4core7convert4FromNtNtNtBS_3str5error9Utf8ErrorE4fromB7_:
  235|   479k|    fn from(error: Utf8Error) -> Error {
  236|   479k|        Error::NonDecodable(Some(error))
  237|   479k|    }
_RNvXs8_NtCsjWx60dGvTf3_9quick_xml6errorsNtB5_5ErrorINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_6escape11EscapeErrorE4fromB7_:
  251|  51.8k|    fn from(error: EscapeError) -> Error {
  252|  51.8k|        Error::EscapeError(error)
  253|  51.8k|    }
_RNvXs9_NtCsjWx60dGvTf3_9quick_xml6errorsNtB5_5ErrorINtNtCscdEvteftVc2_4core7convert4FromNtNtNtB7_6events10attributes9AttrErrorE4fromB7_:
  258|  7.13k|    fn from(error: AttrError) -> Self {
  259|  7.13k|        Error::InvalidAttr(error)
  260|  7.13k|    }
_RNvXsa_NtCsjWx60dGvTf3_9quick_xml6errorsNtB5_5ErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
  267|   661k|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
  268|   476k|        match self {
  269|      0|            Error::Io(e) => write!(f, "I/O error: {}", e),
  270|  14.6k|            Error::Syntax(e) => write!(f, "syntax error: {}", e),
  271|  7.10k|            Error::IllFormed(e) => write!(f, "ill-formed document: {}", e),
  272|      0|            Error::NonDecodable(None) => write!(f, "Malformed input, decoding impossible"),
  273|   476k|            Error::NonDecodable(Some(e)) => write!(f, "Malformed UTF-8 input: {}", e),
  274|  51.7k|            Error::InvalidAttr(e) => write!(f, "error while parsing attribute: {}", e),
  275|   108k|            Error::EscapeError(e) => write!(f, "{}", e),
  276|      0|            Error::UnknownPrefix(prefix) => {
  277|      0|                f.write_str("Unknown namespace prefix '")?;
  278|      0|                write_byte_string(f, prefix)?;
  279|      0|                f.write_str("'")
  280|       |            }
  281|  2.97k|            Error::InvalidPrefixBind { prefix, namespace } => {
  282|  2.97k|                f.write_str("The namespace prefix '")?;
  283|  2.97k|                write_byte_string(f, prefix)?;
  284|  2.97k|                f.write_str("' cannot be bound to '")?;
  285|  2.97k|                write_byte_string(f, namespace)?;
  286|  2.97k|                f.write_str("'")
  287|       |            }
  288|       |        }
  289|   661k|    }

_RINvNtCsjWx60dGvTf3_9quick_xml6escape13unescape_withNCNvMs5_NtCs5iIAVsTbYw4_8oxrdfxml6parserINtBW_12RdfXmlReaderRShE15resolve_ns_name0EBY_:
  229|  1.43M|pub fn unescape_with<'input, 'entity, F>(
  230|  1.43M|    raw: &'input str,
  231|  1.43M|    mut resolve_entity: F,
  232|  1.43M|) -> Result<Cow<'input, str>, EscapeError>
  233|  1.43M|where
  234|  1.43M|    // the lifetime of the output comes from a capture or is `'static`
  235|  1.43M|    F: FnMut(&str) -> Option<&'entity str>,
  236|  1.43M|{
  237|  1.43M|    let bytes = raw.as_bytes();
  238|  1.43M|    let mut unescaped = None;
  239|  1.43M|    let mut last_end = 0;
  240|  1.43M|    let mut iter = memchr2_iter(b'&', b';', bytes);
  241|  17.6M|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
  242|  16.2M|        match iter.next() {
  243|  16.2M|            Some(end) if bytes[end] == b';' => {
  244|  16.2M|                // append valid data
  245|  16.2M|                if unescaped.is_none() {
  246|   230k|                    unescaped = Some(String::with_capacity(raw.len()));
  247|  16.0M|                }
  248|  16.2M|                let unescaped = unescaped.as_mut().expect("initialized");
  249|  16.2M|                unescaped.push_str(&raw[last_end..start]);
  250|  16.2M|
  251|  16.2M|                // search for character correctness
  252|  16.2M|                let pat = &raw[start + 1..end];
  253|  16.2M|                if let Some(entity) = pat.strip_prefix('#') {
  254|  94.5k|                    let codepoint = parse_number(entity, start..end)?;
  255|  70.0k|                    unescaped.push_str(codepoint.encode_utf8(&mut [0u8; 4]));
  256|  16.1M|                } else if let Some(value) = resolve_entity(pat) {
  257|  16.1M|                    unescaped.push_str(value);
  258|  16.1M|                } else {
  259|  26.3k|                    return Err(EscapeError::UnrecognizedSymbol(
  260|  26.3k|                        start + 1..end,
  261|  26.3k|                        pat.to_string(),
  262|  26.3k|                    ));
  263|       |                }
  264|       |
  265|  16.1M|                last_end = end + 1;
  266|       |            }
  267|  6.08k|            _ => return Err(EscapeError::UnterminatedEntity(start..raw.len())),
  268|       |        }
  269|       |    }
  270|       |
  271|  1.38M|    if let Some(mut unescaped) = unescaped {
  272|   179k|        if let Some(raw) = raw.get(last_end..) {
  273|   179k|            unescaped.push_str(raw);
  274|   179k|        }
  275|   179k|        Ok(Cow::Owned(unescaped))
  276|       |    } else {
  277|  1.20M|        Ok(Cow::Borrowed(raw))
  278|       |    }
  279|  1.43M|}
_RINvNtCsjWx60dGvTf3_9quick_xml6escape13unescape_withNCNvMs5_NtCs5iIAVsTbYw4_8oxrdfxml6parserINtBW_12RdfXmlReaderRShE16parse_text_event0EBY_:
  229|   921k|pub fn unescape_with<'input, 'entity, F>(
  230|   921k|    raw: &'input str,
  231|   921k|    mut resolve_entity: F,
  232|   921k|) -> Result<Cow<'input, str>, EscapeError>
  233|   921k|where
  234|   921k|    // the lifetime of the output comes from a capture or is `'static`
  235|   921k|    F: FnMut(&str) -> Option<&'entity str>,
  236|   921k|{
  237|   921k|    let bytes = raw.as_bytes();
  238|   921k|    let mut unescaped = None;
  239|   921k|    let mut last_end = 0;
  240|   921k|    let mut iter = memchr2_iter(b'&', b';', bytes);
  241|   991k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
  242|   114k|        match iter.next() {
  243|  99.1k|            Some(end) if bytes[end] == b';' => {
  244|  95.8k|                // append valid data
  245|  95.8k|                if unescaped.is_none() {
  246|  47.3k|                    unescaped = Some(String::with_capacity(raw.len()));
  247|  48.5k|                }
  248|  95.8k|                let unescaped = unescaped.as_mut().expect("initialized");
  249|  95.8k|                unescaped.push_str(&raw[last_end..start]);
  250|  95.8k|
  251|  95.8k|                // search for character correctness
  252|  95.8k|                let pat = &raw[start + 1..end];
  253|  95.8k|                if let Some(entity) = pat.strip_prefix('#') {
  254|  8.58k|                    let codepoint = parse_number(entity, start..end)?;
  255|  5.20k|                    unescaped.push_str(codepoint.encode_utf8(&mut [0u8; 4]));
  256|  87.2k|                } else if let Some(value) = resolve_entity(pat) {
  257|  64.2k|                    unescaped.push_str(value);
  258|  64.2k|                } else {
  259|  22.9k|                    return Err(EscapeError::UnrecognizedSymbol(
  260|  22.9k|                        start + 1..end,
  261|  22.9k|                        pat.to_string(),
  262|  22.9k|                    ));
  263|       |                }
  264|       |
  265|  69.4k|                last_end = end + 1;
  266|       |            }
  267|  18.7k|            _ => return Err(EscapeError::UnterminatedEntity(start..raw.len())),
  268|       |        }
  269|       |    }
  270|       |
  271|   876k|    if let Some(mut unescaped) = unescaped {
  272|  20.6k|        if let Some(raw) = raw.get(last_end..) {
  273|  20.6k|            unescaped.push_str(raw);
  274|  20.6k|        }
  275|  20.6k|        Ok(Cow::Owned(unescaped))
  276|       |    } else {
  277|   856k|        Ok(Cow::Borrowed(raw))
  278|       |    }
  279|   921k|}
_RINvNtCsjWx60dGvTf3_9quick_xml6escape13unescape_withNCNvMs5_NtCs5iIAVsTbYw4_8oxrdfxml6parserINtBW_12RdfXmlReaderRShE17convert_attribute0EBY_:
  229|   309k|pub fn unescape_with<'input, 'entity, F>(
  230|   309k|    raw: &'input str,
  231|   309k|    mut resolve_entity: F,
  232|   309k|) -> Result<Cow<'input, str>, EscapeError>
  233|   309k|where
  234|   309k|    // the lifetime of the output comes from a capture or is `'static`
  235|   309k|    F: FnMut(&str) -> Option<&'entity str>,
  236|   309k|{
  237|   309k|    let bytes = raw.as_bytes();
  238|   309k|    let mut unescaped = None;
  239|   309k|    let mut last_end = 0;
  240|   309k|    let mut iter = memchr2_iter(b'&', b';', bytes);
  241|   326k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
  242|  23.7k|        match iter.next() {
  243|  22.4k|            Some(end) if bytes[end] == b';' => {
  244|  22.0k|                // append valid data
  245|  22.0k|                if unescaped.is_none() {
  246|  13.0k|                    unescaped = Some(String::with_capacity(raw.len()));
  247|  13.0k|                }
  248|  22.0k|                let unescaped = unescaped.as_mut().expect("initialized");
  249|  22.0k|                unescaped.push_str(&raw[last_end..start]);
  250|  22.0k|
  251|  22.0k|                // search for character correctness
  252|  22.0k|                let pat = &raw[start + 1..end];
  253|  22.0k|                if let Some(entity) = pat.strip_prefix('#') {
  254|  10.1k|                    let codepoint = parse_number(entity, start..end)?;
  255|  9.86k|                    unescaped.push_str(codepoint.encode_utf8(&mut [0u8; 4]));
  256|  11.8k|                } else if let Some(value) = resolve_entity(pat) {
  257|  7.16k|                    unescaped.push_str(value);
  258|  7.16k|                } else {
  259|  4.68k|                    return Err(EscapeError::UnrecognizedSymbol(
  260|  4.68k|                        start + 1..end,
  261|  4.68k|                        pat.to_string(),
  262|  4.68k|                    ));
  263|       |                }
  264|       |
  265|  17.0k|                last_end = end + 1;
  266|       |            }
  267|  1.72k|            _ => return Err(EscapeError::UnterminatedEntity(start..raw.len())),
  268|       |        }
  269|       |    }
  270|       |
  271|   303k|    if let Some(mut unescaped) = unescaped {
  272|  7.12k|        if let Some(raw) = raw.get(last_end..) {
  273|  7.12k|            unescaped.push_str(raw);
  274|  7.12k|        }
  275|  7.12k|        Ok(Cow::Owned(unescaped))
  276|       |    } else {
  277|   296k|        Ok(Cow::Borrowed(raw))
  278|       |    }
  279|   309k|}
_RNCINvNtCsjWx60dGvTf3_9quick_xml6escape13unescape_withNCNvMs5_NtCs5iIAVsTbYw4_8oxrdfxml6parserINtBY_12RdfXmlReaderRShE15resolve_ns_name0E0B10_:
  241|  16.6M|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
_RNCINvNtCsjWx60dGvTf3_9quick_xml6escape13unescape_withNCNvMs5_NtCs5iIAVsTbYw4_8oxrdfxml6parserINtBY_12RdfXmlReaderRShE16parse_text_event0E0B10_:
  241|   209k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
_RNCINvNtCsjWx60dGvTf3_9quick_xml6escape13unescape_withNCNvMs5_NtCs5iIAVsTbYw4_8oxrdfxml6parserINtBY_12RdfXmlReaderRShE17convert_attribute0E0B10_:
  241|  54.3k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
_RNvXNtCsjWx60dGvTf3_9quick_xml6escapeNtB2_11EscapeErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
   32|   108k|    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
   33|   108k|        match self {
   34|  6.33k|            EscapeError::EntityWithNull(e) => write!(
   35|  6.33k|                f,
   36|  6.33k|                "Error while escaping character at range {:?}: Null character entity not allowed",
   37|  6.33k|                e
   38|  6.33k|            ),
   39|  54.0k|            EscapeError::UnrecognizedSymbol(rge, res) => write!(
   40|  54.0k|                f,
   41|  54.0k|                "Error while escaping character at range {:?}: Unrecognized escape symbol: {:?}",
   42|  54.0k|                rge, res
   43|  54.0k|            ),
   44|  26.5k|            EscapeError::UnterminatedEntity(e) => write!(
   45|  26.5k|                f,
   46|  26.5k|                "Error while escaping character at range {:?}: Cannot find ';' after '&'",
   47|  26.5k|                e
   48|  26.5k|            ),
   49|  2.20k|            EscapeError::TooLongHexadecimal => write!(f, "Cannot convert hexadecimal to utf8"),
   50|  3.61k|            EscapeError::InvalidHexadecimal(e) => {
   51|  3.61k|                write!(f, "'{}' is not a valid hexadecimal character", e)
   52|       |            }
   53|  1.91k|            EscapeError::TooLongDecimal => write!(f, "Cannot convert decimal to utf8"),
   54|  12.7k|            EscapeError::InvalidDecimal(e) => write!(f, "'{}' is not a valid decimal character", e),
   55|  1.37k|            EscapeError::InvalidCodepoint(n) => write!(f, "'{}' is not a valid codepoint", n),
   56|       |        }
   57|   108k|    }
_RNvNtCsjWx60dGvTf3_9quick_xml6escape6escape:
   84|   612k|pub fn escape(raw: &str) -> Cow<str> {
   85|   612k|    _escape(raw, |ch| matches!(ch, b'<' | b'>' | b'&' | b'\'' | b'\"'))
   86|   612k|}
_RNCNvNtCsjWx60dGvTf3_9quick_xml6escape6escape0B5_:
   85|  64.3M|    _escape(raw, |ch| matches!(ch, b'<' | b'>' | b'&' | b'\'' | b'\"'))
_RINvNtCsjWx60dGvTf3_9quick_xml6escape7__escapeNCNvB2_6escape0EB4_:
  132|   612k|pub(crate) fn _escape<F: Fn(u8) -> bool>(raw: &str, escape_chars: F) -> Cow<str> {
  133|   612k|    let bytes = raw.as_bytes();
  134|   612k|    let mut escaped = None;
  135|   612k|    let mut iter = bytes.iter();
  136|   612k|    let mut pos = 0;
  137|  16.7M|    while let Some(i) = iter.position(|&b| escape_chars(b)) {
  138|  16.1M|        if escaped.is_none() {
  139|   130k|            escaped = Some(Vec::with_capacity(raw.len()));
  140|  16.0M|        }
  141|  16.1M|        let escaped = escaped.as_mut().expect("initialized");
  142|  16.1M|        let new_pos = pos + i;
  143|  16.1M|        escaped.extend_from_slice(&bytes[pos..new_pos]);
  144|  16.1M|        match bytes[new_pos] {
  145|  6.90k|            b'<' => escaped.extend_from_slice(b"&lt;"),
  146|  37.0k|            b'>' => escaped.extend_from_slice(b"&gt;"),
  147|  16.0M|            b'\'' => escaped.extend_from_slice(b"&apos;"),
  148|  20.3k|            b'&' => escaped.extend_from_slice(b"&amp;"),
  149|  12.7k|            b'"' => escaped.extend_from_slice(b"&quot;"),
  150|       |
  151|       |            // This set of escapes handles characters that should be escaped
  152|       |            // in elements of xs:lists, because those characters works as
  153|       |            // delimiters of list elements
  154|      0|            b'\t' => escaped.extend_from_slice(b"&#9;"),
  155|      0|            b'\n' => escaped.extend_from_slice(b"&#10;"),
  156|      0|            b'\r' => escaped.extend_from_slice(b"&#13;"),
  157|      0|            b' ' => escaped.extend_from_slice(b"&#32;"),
  158|      0|            _ => unreachable!(
  159|      0|                "Only '<', '>','\', '&', '\"', '\\t', '\\r', '\\n', and ' ' are escaped"
  160|      0|            ),
  161|       |        }
  162|  16.1M|        pos = new_pos + 1;
  163|       |    }
  164|       |
  165|   612k|    if let Some(mut escaped) = escaped {
  166|   130k|        if let Some(raw) = bytes.get(pos..) {
  167|   130k|            escaped.extend_from_slice(raw);
  168|   130k|        }
  169|       |        // SAFETY: we operate on UTF-8 input and search for an one byte chars only,
  170|       |        // so all slices that was put to the `escaped` is a valid UTF-8 encoded strings
  171|       |        // TODO: Can be replaced with `unsafe { String::from_utf8_unchecked() }`
  172|       |        // if unsafe code will be allowed
  173|   130k|        Cow::Owned(String::from_utf8(escaped).unwrap())
  174|       |    } else {
  175|   482k|        Cow::Borrowed(raw)
  176|       |    }
  177|   612k|}
_RNCINvNtCsjWx60dGvTf3_9quick_xml6escape7__escapeNCNvB4_6escape0E0B6_:
  137|  64.3M|    while let Some(i) = iter.position(|&b| escape_chars(b)) {
_RNvNtCsjWx60dGvTf3_9quick_xml6escape18resolve_xml_entity:
  317|  16.2M|pub const fn resolve_xml_entity(entity: &str) -> Option<&'static str> {
  318|       |    // match over strings are not allowed in const functions
  319|  16.2M|    let s = match entity.as_bytes() {
  320|  16.2M|        b"lt" => "<",
  321|  33.0k|        b"gt" => ">",
  322|  16.1M|        b"amp" => "&",
  323|  16.1M|        b"apos" => "'",
  324|  19.5k|        b"quot" => "\"",
  325|  54.0k|        _ => return None,
  326|       |    };
  327|  16.1M|    Some(s)
  328|  16.2M|}
_RNvNtCsjWx60dGvTf3_9quick_xml6escape12parse_number:
 1799|   113k|fn parse_number(bytes: &str, range: Range<usize>) -> Result<char, EscapeError> {
 1800|   113k|    let code = if let Some(hex_digits) = bytes.strip_prefix('x') {
 1801|  9.83k|        parse_hexadecimal(hex_digits)
 1802|       |    } else {
 1803|   103k|        parse_decimal(bytes)
 1804|  20.5k|    }?;
 1805|  92.8k|    if code == 0 {
 1806|  6.33k|        return Err(EscapeError::EntityWithNull(range));
 1807|  86.4k|    }
 1808|  86.4k|    match std::char::from_u32(code) {
 1809|  85.0k|        Some(c) => Ok(c),
 1810|  1.37k|        None => Err(EscapeError::InvalidCodepoint(code)),
 1811|       |    }
 1812|   113k|}
_RNvNtCsjWx60dGvTf3_9quick_xml6escape17parse_hexadecimal:
 1814|  9.83k|fn parse_hexadecimal(bytes: &str) -> Result<u32, EscapeError> {
 1815|  9.83k|    // maximum code is 0x10FFFF => 6 characters
 1816|  9.83k|    if bytes.len() > 6 {
 1817|  2.20k|        return Err(EscapeError::TooLongHexadecimal);
 1818|  7.63k|    }
 1819|  7.63k|    let mut code = 0;
 1820|  11.3k|    for b in bytes.bytes() {
 1821|  11.3k|        code <<= 4;
 1822|  11.3k|        code += match b {
 1823|  11.3k|            b'0'..=b'9' => b - b'0',
 1824|  6.77k|            b'a'..=b'f' => b - b'a' + 10,
 1825|  5.29k|            b'A'..=b'F' => b - b'A' + 10,
 1826|  3.61k|            b => return Err(EscapeError::InvalidHexadecimal(b as char)),
 1827|       |        } as u32;
 1828|       |    }
 1829|  4.02k|    Ok(code)
 1830|  9.83k|}
_RNvNtCsjWx60dGvTf3_9quick_xml6escape13parse_decimal:
 1832|   103k|fn parse_decimal(bytes: &str) -> Result<u32, EscapeError> {
 1833|   103k|    // maximum code is 0x10FFFF = 1114111 => 7 characters
 1834|   103k|    if bytes.len() > 7 {
 1835|  1.91k|        return Err(EscapeError::TooLongDecimal);
 1836|   101k|    }
 1837|   101k|    let mut code = 0;
 1838|   464k|    for b in bytes.bytes() {
 1839|   464k|        code *= 10;
 1840|   464k|        code += match b {
 1841|   460k|            b'0'..=b'9' => b - b'0',
 1842|  12.7k|            b => return Err(EscapeError::InvalidDecimal(b as char)),
 1843|       |        } as u32;
 1844|       |    }
 1845|  88.7k|    Ok(code)
 1846|   103k|}

_RNvXs4_NtNtCsjWx60dGvTf3_9quick_xml6events10attributesNtB5_10AttributesNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCs5iIAVsTbYw4_8oxrdfxml:
  231|  1.72M|    fn next(&mut self) -> Option<Self::Item> {
  232|  1.72M|        match self.state.next(self.bytes) {
  233|  1.01M|            None => None,
  234|   665k|            Some(Ok(a)) => Some(Ok(a.map(|range| &self.bytes[range]).into())),
  235|  44.5k|            Some(Err(e)) => Some(Err(e)),
  236|       |        }
  237|  1.72M|    }
_RINvMNtNtCsjWx60dGvTf3_9quick_xml6events10attributesNtB3_9Attribute30decode_and_unescape_value_withRShNCNvMs5_NtCs5iIAVsTbYw4_8oxrdfxml6parserINtB1K_12RdfXmlReaderB1z_E17convert_attribute0EB1M_:
   95|   315k|    pub fn decode_and_unescape_value_with<'entity, B>(
   96|   315k|        &self,
   97|   315k|        reader: &Reader<B>,
   98|   315k|        resolve_entity: impl FnMut(&str) -> Option<&'entity str>,
   99|   315k|    ) -> XmlResult<Cow<'a, str>> {
  100|   315k|        let decoded = match &self.value {
  101|   315k|            Cow::Borrowed(bytes) => reader.decoder().decode(bytes)?,
  102|       |            // Convert to owned, because otherwise Cow will be bound with wrong lifetime
  103|      0|            Cow::Owned(bytes) => reader.decoder().decode(bytes)?.into_owned().into(),
  104|       |        };
  105|       |
  106|   309k|        match unescape_with(&decoded, resolve_entity)? {
  107|       |            // Because result is borrowed, no replacements was done and we can use original string
  108|   296k|            Cow::Borrowed(_) => Ok(decoded),
  109|  7.12k|            Cow::Owned(s) => Ok(s.into()),
  110|       |        }
  111|   315k|    }
_RNvXs1_NtNtCsjWx60dGvTf3_9quick_xml6events10attributesNtB5_9AttributeINtNtCscdEvteftVc2_4core7convert4FromTReB1H_EE4from:
  158|   553k|    fn from(val: (&'a str, &'a str)) -> Attribute<'a> {
  159|   553k|        Attribute {
  160|   553k|            key: QName(val.0.as_bytes()),
  161|   553k|            value: match escape(val.1) {
  162|   439k|                Cow::Borrowed(s) => Cow::Borrowed(s.as_bytes()),
  163|   114k|                Cow::Owned(s) => Cow::Owned(s.into_bytes()),
  164|       |            },
  165|       |        }
  166|   553k|    }
_RNvXs2_NtNtCsjWx60dGvTf3_9quick_xml6events10attributesNtB5_9AttributeINtNtCscdEvteftVc2_4core7convert4FromINtB5_4AttrRShEE4fromB9_:
  171|  1.44M|    fn from(attr: Attr<&'a [u8]>) -> Self {
  172|  1.44M|        Self {
  173|  1.44M|            key: attr.key(),
  174|  1.44M|            value: Cow::Borrowed(attr.value()),
  175|  1.44M|        }
  176|  1.44M|    }
_RNvMs3_NtNtCsjWx60dGvTf3_9quick_xml6events10attributesNtB5_10Attributes4wrapB9_:
  198|  2.56M|    pub(crate) const fn wrap(buf: &'a [u8], pos: usize, html: bool) -> Self {
  199|  2.56M|        Self {
  200|  2.56M|            bytes: buf,
  201|  2.56M|            state: IterState::new(pos, html),
  202|  2.56M|        }
  203|  2.56M|    }
_RNvMs3_NtNtCsjWx60dGvTf3_9quick_xml6events10attributesNtB5_10Attributes11with_checks:
  221|  1.47M|    pub fn with_checks(&mut self, val: bool) -> &mut Attributes<'a> {
  222|  1.47M|        self.state.check_duplicates = val;
  223|  1.47M|        self
  224|  1.47M|    }
_RNvXs4_NtNtCsjWx60dGvTf3_9quick_xml6events10attributesNtB5_10AttributesNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextB9_:
  231|  2.20M|    fn next(&mut self) -> Option<Self::Item> {
  232|  2.20M|        match self.state.next(self.bytes) {
  233|  1.29M|            None => None,
  234|   782k|            Some(Ok(a)) => Some(Ok(a.map(|range| &self.bytes[range]).into())),
  235|   123k|            Some(Err(e)) => Some(Err(e)),
  236|       |        }
  237|  2.20M|    }
_RNCNvXs4_NtNtCsjWx60dGvTf3_9quick_xml6events10attributesNtB7_10AttributesNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0Bb_:
  234|  2.89M|            Some(Ok(a)) => Some(Ok(a.map(|range| &self.bytes[range]).into())),
_RNvXs6_NtNtCsjWx60dGvTf3_9quick_xml6events10attributesNtB5_9AttrErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
  334|  51.7k|    fn fmt(&self, f: &mut Formatter) -> fmt::Result {
  335|  51.7k|        match self {
  336|  44.6k|            Self::ExpectedEq(pos) => write!(
  337|  44.6k|                f,
  338|  44.6k|                r#"position {}: attribute key must be directly followed by `=` or space"#,
  339|  44.6k|                pos
  340|  44.6k|            ),
  341|  1.38k|            Self::ExpectedValue(pos) => write!(
  342|  1.38k|                f,
  343|  1.38k|                r#"position {}: `=` must be followed by an attribute value"#,
  344|  1.38k|                pos
  345|  1.38k|            ),
  346|  3.36k|            Self::UnquotedValue(pos) => write!(
  347|  3.36k|                f,
  348|  3.36k|                r#"position {}: attribute value must be enclosed in `"` or `'`"#,
  349|  3.36k|                pos
  350|  3.36k|            ),
  351|  1.74k|            Self::ExpectedQuote(pos, quote) => write!(
  352|  1.74k|                f,
  353|  1.74k|                r#"position {}: missing closing quote `{}` in attribute value"#,
  354|  1.74k|                pos, *quote as char
  355|  1.74k|            ),
  356|    617|            Self::Duplicated(pos1, pos2) => write!(
  357|    617|                f,
  358|    617|                r#"position {}: duplicated attribute, previous declaration at position {}"#,
  359|    617|                pos1, pos2
  360|    617|            ),
  361|       |        }
  362|  51.7k|    }
_RINvMs8_NtNtCsjWx60dGvTf3_9quick_xml6events10attributesINtB6_4AttrINtNtNtCscdEvteftVc2_4core3ops5range5RangejEE3mapRShNCNvXs4_B6_NtB6_10AttributesNtNtNtNtB19_4iter6traits8iterator8Iterator4next0EBa_:
  403|  1.44M|    pub fn map<U, F>(self, mut f: F) -> Attr<U>
  404|  1.44M|    where
  405|  1.44M|        F: FnMut(T) -> U,
  406|  1.44M|    {
  407|  1.44M|        match self {
  408|  1.44M|            Attr::DoubleQ(key, value) => Attr::DoubleQ(f(key), f(value)),
  409|  1.32k|            Attr::SingleQ(key, value) => Attr::SingleQ(f(key), f(value)),
  410|      0|            Attr::Empty(key) => Attr::Empty(f(key)),
  411|      0|            Attr::Unquoted(key, value) => Attr::Unquoted(f(key), f(value)),
  412|       |        }
  413|  1.44M|    }
_RNvMs9_NtNtCsjWx60dGvTf3_9quick_xml6events10attributesINtB5_4AttrRShE3keyB9_:
  419|  1.44M|    pub const fn key(&self) -> QName<'a> {
  420|  1.44M|        QName(match self {
  421|  1.44M|            Attr::DoubleQ(key, _) => key,
  422|  1.32k|            Attr::SingleQ(key, _) => key,
  423|      0|            Attr::Empty(key) => key,
  424|      0|            Attr::Unquoted(key, _) => key,
  425|       |        })
  426|  1.44M|    }
_RNvMs9_NtNtCsjWx60dGvTf3_9quick_xml6events10attributesINtB5_4AttrRShE5valueB9_:
  432|  1.44M|    pub const fn value(&self) -> &'a [u8] {
  433|  1.44M|        match self {
  434|  1.44M|            Attr::DoubleQ(_, value) => value,
  435|  1.32k|            Attr::SingleQ(_, value) => value,
  436|      0|            Attr::Empty(_) => &[],
  437|      0|            Attr::Unquoted(_, value) => value,
  438|       |        }
  439|  1.44M|    }
_RNvMsc_NtNtCsjWx60dGvTf3_9quick_xml6events10attributesNtB5_9IterState3new:
  521|  2.56M|    pub const fn new(offset: usize, html: bool) -> Self {
  522|  2.56M|        Self {
  523|  2.56M|            state: State::Next(offset),
  524|  2.56M|            html,
  525|  2.56M|            check_duplicates: true,
  526|  2.56M|            keys: Vec::new(),
  527|  2.56M|        }
  528|  2.56M|    }
_RNvMsc_NtNtCsjWx60dGvTf3_9quick_xml6events10attributesNtB5_9IterState7recover:
  533|  3.92M|    fn recover(&self, slice: &[u8]) -> Option<usize> {
  534|  3.92M|        match self.state {
  535|      0|            State::Done => None,
  536|  3.92M|            State::Next(offset) => Some(offset),
  537|      0|            State::SkipValue(offset) => self.skip_value(slice, offset),
  538|      0|            State::SkipEqValue(offset) => self.skip_eq_value(slice, offset),
  539|       |        }
  540|  3.92M|    }
_RNvMsc_NtNtCsjWx60dGvTf3_9quick_xml6events10attributesNtB5_9IterState20check_for_duplicatesB9_:
  603|  1.46M|    fn check_for_duplicates(
  604|  1.46M|        &mut self,
  605|  1.46M|        slice: &[u8],
  606|  1.46M|        key: Range<usize>,
  607|  1.46M|    ) -> Result<Range<usize>, AttrError> {
  608|  1.46M|        if self.check_duplicates {
  609|   670k|            if let Some(prev) = self
  610|   670k|                .keys
  611|   670k|                .iter()
  612|   670k|                .find(|r| slice[(*r).clone()] == slice[key.clone()])
  613|       |            {
  614|    617|                return Err(AttrError::Duplicated(key.start, prev.start));
  615|   669k|            }
  616|   669k|            self.keys.push(key.clone());
  617|   793k|        }
  618|  1.46M|        Ok(key)
  619|  1.46M|    }
_RNCNvMsc_NtNtCsjWx60dGvTf3_9quick_xml6events10attributesNtB7_9IterState20check_for_duplicates0Bb_:
  612|   268k|                .find(|r| slice[(*r).clone()] == slice[key.clone()])
_RNvMsc_NtNtCsjWx60dGvTf3_9quick_xml6events10attributesNtB5_9IterState8key_onlyB9_:
  627|   152k|    fn key_only(&mut self, slice: &[u8], key: Range<usize>, offset: usize) -> Option<AttrResult> {
  628|   152k|        Some(if self.html {
  629|      0|            self.check_for_duplicates(slice, key).map(Attr::Empty)
  630|       |        } else {
  631|   152k|            Err(AttrError::ExpectedEq(offset))
  632|       |        })
  633|   152k|    }
_RNvMsc_NtNtCsjWx60dGvTf3_9quick_xml6events10attributesNtB5_9IterState8double_qB9_:
  636|  1.44M|    fn double_q(&mut self, key: Range<usize>, value: Range<usize>) -> Option<AttrResult> {
  637|  1.44M|        self.state = State::Next(value.end + 1); // +1 for `"`
  638|  1.44M|
  639|  1.44M|        Some(Ok(Attr::DoubleQ(key, value)))
  640|  1.44M|    }
_RNvMsc_NtNtCsjWx60dGvTf3_9quick_xml6events10attributesNtB5_9IterState8single_qB9_:
  643|  1.32k|    fn single_q(&mut self, key: Range<usize>, value: Range<usize>) -> Option<AttrResult> {
  644|  1.32k|        self.state = State::Next(value.end + 1); // +1 for `'`
  645|  1.32k|
  646|  1.32k|        Some(Ok(Attr::SingleQ(key, value)))
  647|  1.32k|    }
_RNvMsc_NtNtCsjWx60dGvTf3_9quick_xml6events10attributesNtB5_9IterState4next:
  649|  3.92M|    pub fn next(&mut self, slice: &[u8]) -> Option<AttrResult> {
  650|  3.92M|        let mut iter = match self.recover(slice) {
  651|  3.92M|            Some(offset) => (offset..).zip(slice[offset..].iter()),
  652|      0|            None => return None,
  653|       |        };
  654|       |
  655|       |        // Index where next key started
  656|  3.92M|        let start_key = match iter.find(|(_, &b)| !is_whitespace(b)) {
  657|       |            // Input: `    key`
  658|       |            //             ^
  659|  1.61M|            Some((s, _)) => s,
  660|       |            // Input: `    `
  661|       |            //             ^
  662|       |            None => {
  663|       |                // Because we reach end-of-input, stop iteration on next call
  664|  2.30M|                self.state = State::Done;
  665|  2.30M|                return None;
  666|       |            }
  667|       |        };
  668|       |        // Span of a key
  669|  1.61M|        let (key, offset) = match iter.find(|(_, &b)| b == b'=' || is_whitespace(b)) {
  670|       |            // Input: `    key=`
  671|       |            //             |  ^
  672|       |            //             s  e
  673|  1.21M|            Some((e, b'=')) => (start_key..e, e),
  674|       |
  675|       |            // Input: `    key `
  676|       |            //                ^
  677|   295k|            Some((e, _)) => match iter.find(|(_, &b)| !is_whitespace(b)) {
  678|       |                // Input: `    key  =`
  679|       |                //             |  | ^
  680|       |                //     start_key  e
  681|   252k|                Some((offset, b'=')) => (start_key..e, offset),
  682|       |                // Input: `    key  x`
  683|       |                //             |  | ^
  684|       |                //     start_key  e
  685|       |                // If HTML-like attributes is allowed, this is the result, otherwise error
  686|  38.9k|                Some((offset, _)) => {
  687|  38.9k|                    // In any case, recovering is not required
  688|  38.9k|                    self.state = State::Next(offset);
  689|  38.9k|                    return self.key_only(slice, start_key..e, offset);
  690|       |                }
  691|       |                // Input: `    key  `
  692|       |                //             |  | ^
  693|       |                //     start_key  e
  694|       |                // If HTML-like attributes is allowed, this is the result, otherwise error
  695|       |                None => {
  696|       |                    // Because we reach end-of-input, stop iteration on next call
  697|  4.36k|                    self.state = State::Done;
  698|  4.36k|                    return self.key_only(slice, start_key..e, slice.len());
  699|       |                }
  700|       |            },
  701|       |
  702|       |            // Input: `    key`
  703|       |            //             |  ^
  704|       |            //             s  e = len()
  705|       |            // If HTML-like attributes is allowed, this is the result, otherwise error
  706|       |            None => {
  707|       |                // Because we reach end-of-input, stop iteration on next call
  708|   108k|                self.state = State::Done;
  709|   108k|                let e = slice.len();
  710|   108k|                return self.key_only(slice, start_key..e, e);
  711|       |            }
  712|       |        };
  713|       |
  714|  1.46M|        let key = match self.check_for_duplicates(slice, key) {
  715|    617|            Err(e) => {
  716|    617|                self.state = State::SkipEqValue(offset);
  717|    617|                return Some(Err(e));
  718|       |            }
  719|  1.46M|            Ok(key) => key,
  720|       |        };
  721|       |
  722|       |        ////////////////////////////////////////////////////////////////////////
  723|       |
  724|       |        // Gets the position of quote and quote type
  725|  1.46M|        let (start_value, quote) = match iter.find(|(_, &b)| !is_whitespace(b)) {
  726|       |            // Input: `    key  =  "`
  727|       |            //                     ^
  728|  1.45M|            Some((s, b'"')) => (s + 1, b'"'),
  729|       |            // Input: `    key  =  '`
  730|       |            //                     ^
  731|  1.32k|            Some((s, b'\'')) => (s + 1, b'\''),
  732|       |
  733|       |            // Input: `    key  =  x`
  734|       |            //                     ^
  735|       |            // If HTML-like attributes is allowed, this is the start of the value
  736|      0|            Some((s, _)) if self.html => {
  737|       |                // We do not check validity of attribute value characters as required
  738|       |                // according to https://html.spec.whatwg.org/#unquoted. It can be done
  739|       |                // during validation phase
  740|      0|                let end = match iter.find(|(_, &b)| is_whitespace(b)) {
  741|       |                    // Input: `    key  =  value `
  742|       |                    //                     |    ^
  743|       |                    //                     s    e
  744|      0|                    Some((e, _)) => e,
  745|       |                    // Input: `    key  =  value`
  746|       |                    //                     |    ^
  747|       |                    //                     s    e = len()
  748|      0|                    None => slice.len(),
  749|       |                };
  750|      0|                self.state = State::Next(end);
  751|      0|                return Some(Ok(Attr::Unquoted(key, s..end)));
  752|       |            }
  753|       |            // Input: `    key  =  x`
  754|       |            //                     ^
  755|  9.08k|            Some((s, _)) => {
  756|  9.08k|                self.state = State::SkipValue(s);
  757|  9.08k|                return Some(Err(AttrError::UnquotedValue(s)));
  758|       |            }
  759|       |
  760|       |            // Input: `    key  =  `
  761|       |            //                     ^
  762|       |            None => {
  763|       |                // Because we reach end-of-input, stop iteration on next call
  764|  3.01k|                self.state = State::Done;
  765|  3.01k|                return Some(Err(AttrError::ExpectedValue(slice.len())));
  766|       |            }
  767|       |        };
  768|       |
  769|  1.45M|        match iter.find(|(_, &b)| b == quote) {
  770|       |            // Input: `    key  =  "   "`
  771|       |            //                         ^
  772|  1.44M|            Some((e, b'"')) => self.double_q(key, start_value..e),
  773|       |            // Input: `    key  =  '   '`
  774|       |            //                         ^
  775|  1.32k|            Some((e, _)) => self.single_q(key, start_value..e),
  776|       |
  777|       |            // Input: `    key  =  "   `
  778|       |            // Input: `    key  =  '   `
  779|       |            //                         ^
  780|       |            // Closing quote not found
  781|       |            None => {
  782|       |                // Because we reach end-of-input, stop iteration on next call
  783|  3.54k|                self.state = State::Done;
  784|  3.54k|                Some(Err(AttrError::ExpectedQuote(slice.len(), quote)))
  785|       |            }
  786|       |        }
  787|  3.92M|    }
_RNCNvMsc_NtNtCsjWx60dGvTf3_9quick_xml6events10attributesNtB7_9IterState4next0Bb_:
  656|  3.56M|        let start_key = match iter.find(|(_, &b)| !is_whitespace(b)) {
_RNCNvMsc_NtNtCsjWx60dGvTf3_9quick_xml6events10attributesNtB7_9IterState4nexts_0Bb_:
  669|  11.5M|        let (key, offset) = match iter.find(|(_, &b)| b == b'=' || is_whitespace(b)) {
_RNCNvMsc_NtNtCsjWx60dGvTf3_9quick_xml6events10attributesNtB7_9IterState4nexts0_0Bb_:
  677|   665k|            Some((e, _)) => match iter.find(|(_, &b)| !is_whitespace(b)) {
_RNCNvMsc_NtNtCsjWx60dGvTf3_9quick_xml6events10attributesNtB7_9IterState4nexts1_0Bb_:
  725|  1.49M|        let (start_value, quote) = match iter.find(|(_, &b)| !is_whitespace(b)) {
_RNCNvMsc_NtNtCsjWx60dGvTf3_9quick_xml6events10attributesNtB7_9IterState4nexts3_0Bb_:
  769|   296M|        match iter.find(|(_, &b)| b == quote) {

_RNvMs7_NtCsjWx60dGvTf3_9quick_xml6eventsNtB5_9BytesText3newCsXnvbX6AWbe_7rdf_xml:
  553|  38.8k|    pub fn new(content: &'a str) -> Self {
  554|  38.8k|        Self::from_escaped(escape(content))
  555|  38.8k|    }
_RINvMNtCsjWx60dGvTf3_9quick_xml6eventsNtB3_10BytesStart3newINtNtCs3OstG5Tqy1X_5alloc6borrow3CoweEECsXnvbX6AWbe_7rdf_xml:
  115|   282k|    pub fn new<C: Into<Cow<'a, str>>>(name: C) -> Self {
  116|   282k|        let buf = str_cow_to_bytes(name);
  117|   282k|        BytesStart {
  118|   282k|            name_len: buf.len(),
  119|   282k|            buf,
  120|   282k|        }
  121|   282k|    }
_RNvMNtCsjWx60dGvTf3_9quick_xml6eventsNtB2_10BytesStart4nameCs5iIAVsTbYw4_8oxrdfxml:
  194|  1.41M|    pub fn name(&self) -> QName {
  195|  1.41M|        QName(&self.buf[..self.name_len])
  196|  1.41M|    }
_RNvMs3_NtCsjWx60dGvTf3_9quick_xml6eventsNtB5_8BytesEnd4nameCs5iIAVsTbYw4_8oxrdfxml:
  444|  6.95k|    pub fn name(&self) -> QName {
  445|  6.95k|        QName(&self.name)
  446|  6.95k|    }
_RNvMs3_NtCsjWx60dGvTf3_9quick_xml6eventsNtB5_8BytesEnd4wrapCs5iIAVsTbYw4_8oxrdfxml:
  413|   376k|    pub(crate) const fn wrap(name: Cow<'a, [u8]>) -> Self {
  414|   376k|        BytesEnd { name }
  415|   376k|    }
_RNvMs7_NtCsjWx60dGvTf3_9quick_xml6eventsNtB5_9BytesText3newCs5iIAVsTbYw4_8oxrdfxml:
  553|  16.2k|    pub fn new(content: &'a str) -> Self {
  554|  16.2k|        Self::from_escaped(escape(content))
  555|  16.2k|    }
_RINvMNtCsjWx60dGvTf3_9quick_xml6eventsNtB3_10BytesStart3newNtNtCs3OstG5Tqy1X_5alloc6string6StringECs5iIAVsTbYw4_8oxrdfxml:
  115|  37.8k|    pub fn new<C: Into<Cow<'a, str>>>(name: C) -> Self {
  116|  37.8k|        let buf = str_cow_to_bytes(name);
  117|  37.8k|        BytesStart {
  118|  37.8k|            name_len: buf.len(),
  119|  37.8k|            buf,
  120|  37.8k|        }
  121|  37.8k|    }
_RINvMNtCsjWx60dGvTf3_9quick_xml6eventsNtB3_10BytesStart3newReECs5iIAVsTbYw4_8oxrdfxml:
  115|  38.4k|    pub fn new<C: Into<Cow<'a, str>>>(name: C) -> Self {
  116|  38.4k|        let buf = str_cow_to_bytes(name);
  117|  38.4k|        BytesStart {
  118|  38.4k|            name_len: buf.len(),
  119|  38.4k|            buf,
  120|  38.4k|        }
  121|  38.4k|    }
_RINvMs3_NtCsjWx60dGvTf3_9quick_xml6eventsNtB6_8BytesEnd3newINtNtCs3OstG5Tqy1X_5alloc6borrow3CoweEECs5iIAVsTbYw4_8oxrdfxml:
  423|  44.1k|    pub fn new<C: Into<Cow<'a, str>>>(name: C) -> Self {
  424|  44.1k|        Self::wrap(str_cow_to_bytes(name))
  425|  44.1k|    }
_RINvMs3_NtCsjWx60dGvTf3_9quick_xml6eventsNtB6_8BytesEnd3newNtNtCs3OstG5Tqy1X_5alloc6string6StringECs5iIAVsTbYw4_8oxrdfxml:
  423|   234k|    pub fn new<C: Into<Cow<'a, str>>>(name: C) -> Self {
  424|   234k|        Self::wrap(str_cow_to_bytes(name))
  425|   234k|    }
_RINvMs3_NtCsjWx60dGvTf3_9quick_xml6eventsNtB6_8BytesEnd3newReECs5iIAVsTbYw4_8oxrdfxml:
  423|  38.4k|    pub fn new<C: Into<Cow<'a, str>>>(name: C) -> Self {
  424|  38.4k|        Self::wrap(str_cow_to_bytes(name))
  425|  38.4k|    }
_RINvMs7_NtCsjWx60dGvTf3_9quick_xml6eventsNtB6_9BytesText12from_escapedINtNtCs3OstG5Tqy1X_5alloc6borrow3CoweEECs5iIAVsTbYw4_8oxrdfxml:
  546|  55.0k|    pub fn from_escaped<C: Into<Cow<'a, str>>>(content: C) -> Self {
  547|  55.0k|        Self::wrap(str_cow_to_bytes(content), Decoder::utf8())
  548|  55.0k|    }
_RINvMs7_NtCsjWx60dGvTf3_9quick_xml6eventsNtB6_9BytesText13unescape_withNCNvMs5_NtCs5iIAVsTbYw4_8oxrdfxml6parserINtB1f_12RdfXmlReaderRShE16parse_text_event0EB1h_:
  594|  1.32M|    pub fn unescape_with<'entity>(
  595|  1.32M|        &self,
  596|  1.32M|        resolve_entity: impl FnMut(&str) -> Option<&'entity str>,
  597|  1.32M|    ) -> Result<Cow<'a, str>> {
  598|  1.32M|        let decoded = match &self.content {
  599|  1.32M|            Cow::Borrowed(bytes) => self.decoder.decode(bytes)?,
  600|       |            // Convert to owned, because otherwise Cow will be bound with wrong lifetime
  601|  2.31k|            Cow::Owned(bytes) => self.decoder.decode(bytes)?.into_owned().into(),
  602|       |        };
  603|       |
  604|   921k|        match unescape_with(&decoded, resolve_entity)? {
  605|       |            // Because result is borrowed, no replacements was done and we can use original string
  606|   856k|            Cow::Borrowed(_) => Ok(decoded),
  607|  20.6k|            Cow::Owned(s) => Ok(s.into()),
  608|       |        }
  609|  1.32M|    }
_RINvMs_NtCsjWx60dGvTf3_9quick_xml6eventsNtB5_10BytesStart14push_attributeNtNtB5_10attributes9AttributeECs5iIAVsTbYw4_8oxrdfxml:
  265|  9.57k|    pub fn push_attribute<'b, A>(&mut self, attr: A)
  266|  9.57k|    where
  267|  9.57k|        A: Into<Attribute<'b>>,
  268|  9.57k|    {
  269|  9.57k|        self.buf.to_mut().push(b' ');
  270|  9.57k|        self.push_attr(attr.into());
  271|  9.57k|    }
_RINvMs_NtCsjWx60dGvTf3_9quick_xml6eventsNtB5_10BytesStart14push_attributeTReB1a_EECs5iIAVsTbYw4_8oxrdfxml:
  265|   553k|    pub fn push_attribute<'b, A>(&mut self, attr: A)
  266|   553k|    where
  267|   553k|        A: Into<Attribute<'b>>,
  268|   553k|    {
  269|   553k|        self.buf.to_mut().push(b' ');
  270|   553k|        self.push_attr(attr.into());
  271|   553k|    }
_RINvNtCsjWx60dGvTf3_9quick_xml6events16str_cow_to_bytesINtNtCs3OstG5Tqy1X_5alloc6borrow3CoweEECs5iIAVsTbYw4_8oxrdfxml:
 1394|   381k|fn str_cow_to_bytes<'a, C: Into<Cow<'a, str>>>(content: C) -> Cow<'a, [u8]> {
 1395|   381k|    match content.into() {
 1396|   348k|        Cow::Borrowed(s) => Cow::Borrowed(s.as_bytes()),
 1397|  32.8k|        Cow::Owned(s) => Cow::Owned(s.into_bytes()),
 1398|       |    }
 1399|   381k|}
_RINvNtCsjWx60dGvTf3_9quick_xml6events16str_cow_to_bytesReECs5iIAVsTbYw4_8oxrdfxml:
 1394|  76.9k|fn str_cow_to_bytes<'a, C: Into<Cow<'a, str>>>(content: C) -> Cow<'a, [u8]> {
 1395|  76.9k|    match content.into() {
 1396|  76.9k|        Cow::Borrowed(s) => Cow::Borrowed(s.as_bytes()),
 1397|      0|        Cow::Owned(s) => Cow::Owned(s.into_bytes()),
 1398|       |    }
 1399|  76.9k|}
_RNvMNtCsjWx60dGvTf3_9quick_xml6eventsNtB2_10BytesStart4wrapB4_:
  102|  1.48M|    pub(crate) const fn wrap(content: &'a [u8], name_len: usize) -> Self {
  103|  1.48M|        BytesStart {
  104|  1.48M|            buf: Cow::Borrowed(content),
  105|  1.48M|            name_len,
  106|  1.48M|        }
  107|  1.48M|    }
_RINvMNtCsjWx60dGvTf3_9quick_xml6eventsNtB3_10BytesStart12from_contentNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
  131|  28.9k|    pub fn from_content<C: Into<Cow<'a, str>>>(content: C, name_len: usize) -> Self {
  132|  28.9k|        BytesStart {
  133|  28.9k|            buf: str_cow_to_bytes(content),
  134|  28.9k|            name_len,
  135|  28.9k|        }
  136|  28.9k|    }
_RNvMNtCsjWx60dGvTf3_9quick_xml6eventsNtB2_10BytesStart4nameB4_:
  194|  1.41M|    pub fn name(&self) -> QName {
  195|  1.41M|        QName(&self.buf[..self.name_len])
  196|  1.41M|    }
_RNvMs_NtCsjWx60dGvTf3_9quick_xml6eventsNtB4_10BytesStart10attributes:
  280|  2.56M|    pub fn attributes(&self) -> Attributes {
  281|  2.56M|        Attributes::wrap(&self.buf, self.name_len, false)
  282|  2.56M|    }
_RINvMs_NtCsjWx60dGvTf3_9quick_xml6eventsNtB5_10BytesStart17try_get_attributeReEB7_:
  297|  60.8k|    pub fn try_get_attribute<N: AsRef<[u8]> + Sized>(
  298|  60.8k|        &'a self,
  299|  60.8k|        attr_name: N,
  300|  60.8k|    ) -> Result<Option<Attribute<'a>>> {
  301|  91.2k|        for a in self.attributes().with_checks(false) {
  302|  91.2k|            let a = a?;
  303|  84.1k|            if a.key.as_ref() == attr_name.as_ref() {
  304|  51.5k|                return Ok(Some(a));
  305|  32.5k|            }
  306|       |        }
  307|  2.17k|        Ok(None)
  308|  60.8k|    }
_RNvMs_NtCsjWx60dGvTf3_9quick_xml6eventsNtB4_10BytesStart9push_attr:
  311|   563k|    pub(crate) fn push_attr<'b>(&mut self, attr: Attribute<'b>) {
  312|   563k|        let bytes = self.buf.to_mut();
  313|   563k|        bytes.extend_from_slice(attr.key.as_ref());
  314|   563k|        bytes.extend_from_slice(b"=\"");
  315|   563k|        // FIXME: need to escape attribute content
  316|   563k|        bytes.extend_from_slice(attr.value.as_ref());
  317|   563k|        bytes.push(b'"');
  318|   563k|    }
_RNvXs1_NtCsjWx60dGvTf3_9quick_xml6eventsNtB5_10BytesStartNtNtNtCscdEvteftVc2_4core3ops5deref5Deref5deref:
  342|   374k|    fn deref(&self) -> &[u8] {
  343|   374k|        &self.buf
  344|   374k|    }
_RNvMs3_NtCsjWx60dGvTf3_9quick_xml6eventsNtB5_8BytesEnd4wrapB7_:
  413|   353k|    pub(crate) const fn wrap(name: Cow<'a, [u8]>) -> Self {
  414|   353k|        BytesEnd { name }
  415|   353k|    }
_RNvXs5_NtCsjWx60dGvTf3_9quick_xml6eventsNtB5_8BytesEndNtNtNtCscdEvteftVc2_4core3ops5deref5Deref5deref:
  469|   317k|    fn deref(&self) -> &[u8] {
  470|   317k|        &self.name
  471|   317k|    }
_RINvMs7_NtCsjWx60dGvTf3_9quick_xml6eventsNtB6_9BytesText4wrapINtNtCs3OstG5Tqy1X_5alloc6borrow3CowShEEB8_:
  537|  59.2k|    pub(crate) fn wrap<C: Into<Cow<'a, [u8]>>>(content: C, decoder: Decoder) -> Self {
  538|  59.2k|        Self {
  539|  59.2k|            content: content.into(),
  540|  59.2k|            decoder,
  541|  59.2k|        }
  542|  59.2k|    }
_RINvMs7_NtCsjWx60dGvTf3_9quick_xml6eventsNtB6_9BytesText4wrapRShEB8_:
  537|  1.35M|    pub(crate) fn wrap<C: Into<Cow<'a, [u8]>>>(content: C, decoder: Decoder) -> Self {
  538|  1.35M|        Self {
  539|  1.35M|            content: content.into(),
  540|  1.35M|            decoder,
  541|  1.35M|        }
  542|  1.35M|    }
_RNvXs9_NtCsjWx60dGvTf3_9quick_xml6eventsNtB5_9BytesTextNtNtNtCscdEvteftVc2_4core3ops5deref5Deref5deref:
  642|   959k|    fn deref(&self) -> &[u8] {
  643|   959k|        &self.content
  644|   959k|    }
_RINvMsa_NtCsjWx60dGvTf3_9quick_xml6eventsNtB6_10BytesCData4wrapRShEB8_:
  696|  4.92k|    pub(crate) fn wrap<C: Into<Cow<'a, [u8]>>>(content: C, decoder: Decoder) -> Self {
  697|  4.92k|        Self {
  698|  4.92k|            content: content.into(),
  699|  4.92k|            decoder,
  700|  4.92k|        }
  701|  4.92k|    }
_RNvMsa_NtCsjWx60dGvTf3_9quick_xml6eventsNtB5_10BytesCData6escape:
  750|  4.92k|    pub fn escape(self) -> Result<BytesText<'a>> {
  751|  4.92k|        let decoded = self.decode()?;
  752|       |        Ok(BytesText::wrap(
  753|  4.26k|            match escape(&decoded) {
  754|       |                // Because result is borrowed, no replacements was done and we can use original content
  755|  1.95k|                Cow::Borrowed(_) => self.content,
  756|  2.31k|                Cow::Owned(escaped) => Cow::Owned(escaped.into_bytes()),
  757|       |            },
  758|  4.26k|            Decoder::utf8(),
  759|       |        ))
  760|  4.92k|    }
_RNvMsa_NtCsjWx60dGvTf3_9quick_xml6eventsNtB5_10BytesCData6decode:
  812|  4.92k|    pub(crate) fn decode(&self) -> Result<Cow<'a, str>> {
  813|  4.92k|        Ok(match &self.content {
  814|  4.92k|            Cow::Borrowed(bytes) => self.decoder.decode(bytes)?,
  815|       |            // Convert to owned, because otherwise Cow will be bound with wrong lifetime
  816|      0|            Cow::Owned(bytes) => self.decoder.decode(bytes)?.into_owned().into(),
  817|       |        })
  818|  4.92k|    }
_RNvMsd_NtCsjWx60dGvTf3_9quick_xml6eventsNtB5_7BytesPI4wrapB7_:
  880|  10.0k|    pub(crate) const fn wrap(content: &'a [u8], target_len: usize) -> Self {
  881|  10.0k|        Self {
  882|  10.0k|            content: BytesStart::wrap(content, target_len),
  883|  10.0k|        }
  884|  10.0k|    }
_RNvMsg_NtCsjWx60dGvTf3_9quick_xml6eventsNtB5_9BytesDecl3new:
 1056|  28.9k|    pub fn new(
 1057|  28.9k|        version: &str,
 1058|  28.9k|        encoding: Option<&str>,
 1059|  28.9k|        standalone: Option<&str>,
 1060|  28.9k|    ) -> BytesDecl<'static> {
 1061|       |        // Compute length of the buffer based on supplied attributes
 1062|       |        // ' encoding=""'   => 12
 1063|  28.9k|        let encoding_attr_len = if let Some(xs) = encoding {
 1064|  28.9k|            12 + xs.len()
 1065|       |        } else {
 1066|      0|            0
 1067|       |        };
 1068|       |        // ' standalone=""' => 14
 1069|  28.9k|        let standalone_attr_len = if let Some(xs) = standalone {
 1070|      0|            14 + xs.len()
 1071|       |        } else {
 1072|  28.9k|            0
 1073|       |        };
 1074|       |        // 'xml version=""' => 14
 1075|  28.9k|        let mut buf = String::with_capacity(14 + encoding_attr_len + standalone_attr_len);
 1076|  28.9k|
 1077|  28.9k|        buf.push_str("xml version=\"");
 1078|  28.9k|        buf.push_str(version);
 1079|       |
 1080|  28.9k|        if let Some(encoding_val) = encoding {
 1081|  28.9k|            buf.push_str("\" encoding=\"");
 1082|  28.9k|            buf.push_str(encoding_val);
 1083|  28.9k|        }
 1084|       |
 1085|  28.9k|        if let Some(standalone_val) = standalone {
 1086|      0|            buf.push_str("\" standalone=\"");
 1087|      0|            buf.push_str(standalone_val);
 1088|  28.9k|        }
 1089|  28.9k|        buf.push('"');
 1090|  28.9k|
 1091|  28.9k|        BytesDecl {
 1092|  28.9k|            content: BytesStart::from_content(buf, 3),
 1093|  28.9k|        }
 1094|  28.9k|    }
_RNvMsg_NtCsjWx60dGvTf3_9quick_xml6eventsNtB5_9BytesDecl10from_start:
 1097|  60.8k|    pub const fn from_start(start: BytesStart<'a>) -> Self {
 1098|  60.8k|        Self { content: start }
 1099|  60.8k|    }
_RNvMsg_NtCsjWx60dGvTf3_9quick_xml6eventsNtB5_9BytesDecl8encoding:
 1200|  60.8k|    pub fn encoding(&self) -> Option<Result<Cow<[u8]>>> {
 1201|  60.8k|        self.content
 1202|  60.8k|            .try_get_attribute("encoding")
 1203|  60.8k|            .map(|a| a.map(|a| a.value))
 1204|  60.8k|            .transpose()
 1205|  60.8k|    }
_RNCNvMsg_NtCsjWx60dGvTf3_9quick_xml6eventsNtB7_9BytesDecl8encoding0B9_:
 1203|  53.7k|            .map(|a| a.map(|a| a.value))
_RNCNCNvMsg_NtCsjWx60dGvTf3_9quick_xml6eventsNtB9_9BytesDecl8encoding00Bb_:
 1203|  51.5k|            .map(|a| a.map(|a| a.value))
_RNvXsh_NtCsjWx60dGvTf3_9quick_xml6eventsNtB5_9BytesDeclNtNtNtCscdEvteftVc2_4core3ops5deref5Deref5deref:
 1281|  28.9k|    fn deref(&self) -> &[u8] {
 1282|  28.9k|        &self.content
 1283|  28.9k|    }
_RNvXsk_NtCsjWx60dGvTf3_9quick_xml6eventsNtB5_5EventINtNtCscdEvteftVc2_4core7convert5AsRefBC_E6as_ref:
 1386|   746k|    fn as_ref(&self) -> &Event<'a> {
 1387|   746k|        self
 1388|   746k|    }
_RINvNtCsjWx60dGvTf3_9quick_xml6events16str_cow_to_bytesNtNtCs3OstG5Tqy1X_5alloc6string6StringEB4_:
 1394|   301k|fn str_cow_to_bytes<'a, C: Into<Cow<'a, str>>>(content: C) -> Cow<'a, [u8]> {
 1395|   301k|    match content.into() {
 1396|      0|        Cow::Borrowed(s) => Cow::Borrowed(s.as_bytes()),
 1397|   301k|        Cow::Owned(s) => Cow::Owned(s.into_bytes()),
 1398|       |    }
 1399|   301k|}

_RNvMsf_NtCsjWx60dGvTf3_9quick_xml4nameNtB5_17NamespaceResolver7resolveCs5iIAVsTbYw4_8oxrdfxml:
  563|  1.70M|    pub fn resolve<'n>(
  564|  1.70M|        &self,
  565|  1.70M|        name: QName<'n>,
  566|  1.70M|        use_default: bool,
  567|  1.70M|    ) -> (ResolveResult, LocalName<'n>) {
  568|  1.70M|        let (local_name, prefix) = name.decompose();
  569|  1.70M|        (self.resolve_prefix(prefix, use_default), local_name)
  570|  1.70M|    }
_RNvXs0_NtCsjWx60dGvTf3_9quick_xml4nameNtB5_5QNameINtNtCscdEvteftVc2_4core7convert5AsRefShE6as_refCs5iIAVsTbYw4_8oxrdfxml:
  123|  1.34M|    fn as_ref(&self) -> &[u8] {
  124|  1.34M|        self.0
  125|  1.34M|    }
_RNvXs3_NtCsjWx60dGvTf3_9quick_xml4nameNtB5_9LocalNameINtNtCscdEvteftVc2_4core7convert5AsRefShE6as_refCs5iIAVsTbYw4_8oxrdfxml:
  153|  2.97M|    fn as_ref(&self) -> &[u8] {
  154|  2.97M|        self.0
  155|  2.97M|    }
_RNvXsa_NtCsjWx60dGvTf3_9quick_xml4nameNtB5_9NamespaceINtNtCscdEvteftVc2_4core7convert5AsRefShE6as_refCs5iIAVsTbYw4_8oxrdfxml:
  269|  2.97M|    fn as_ref(&self) -> &[u8] {
  270|  2.97M|        self.0
  271|  2.97M|    }
_RNvMNtCsjWx60dGvTf3_9quick_xml4nameNtB2_5QName9decompose:
   66|  1.70M|    pub fn decompose(&self) -> (LocalName<'a>, Option<Prefix<'a>>) {
   67|  1.70M|        match self.index() {
   68|  1.03M|            None => (LocalName(self.0), None),
   69|   672k|            Some(i) => (LocalName(&self.0[i + 1..]), Some(Prefix(&self.0[..i]))),
   70|       |        }
   71|  1.70M|    }
_RNvMNtCsjWx60dGvTf3_9quick_xml4nameNtB2_5QName20as_namespace_binding:
   97|   698k|    pub fn as_namespace_binding(&self) -> Option<PrefixDeclaration<'a>> {
   98|   698k|        if self.0.starts_with(b"xmlns") {
   99|   345k|            return match self.0.get(5) {
  100|   181k|                None => Some(PrefixDeclaration::Default),
  101|   159k|                Some(&b':') => Some(PrefixDeclaration::Named(&self.0[6..])),
  102|  4.97k|                _ => None,
  103|       |            };
  104|   352k|        }
  105|   352k|        None
  106|   698k|    }
_RNvMNtCsjWx60dGvTf3_9quick_xml4nameNtB2_5QName5index:
  110|  1.70M|    fn index(&self) -> Option<usize> {
  111|  1.70M|        memchr(b':', self.0)
  112|  1.70M|    }
_RNvXs0_NtCsjWx60dGvTf3_9quick_xml4nameNtB5_5QNameINtNtCscdEvteftVc2_4core7convert5AsRefShE6as_refB7_:
  123|  2.06M|    fn as_ref(&self) -> &[u8] {
  124|  2.06M|        self.0
  125|  2.06M|    }
_RNvMs5_NtCsjWx60dGvTf3_9quick_xml4nameNtB5_6Prefix10into_inner:
  190|   164k|    pub const fn into_inner(self) -> &'a [u8] {
  191|   164k|        self.0
  192|   164k|    }
_RNvMs8_NtCsjWx60dGvTf3_9quick_xml4nameNtB5_9Namespace10into_inner:
  255|   116k|    pub const fn into_inner(self) -> &'a [u8] {
  256|   116k|        self.0
  257|   116k|    }
_RNvMsd_NtCsjWx60dGvTf3_9quick_xml4nameNtB5_14NamespaceEntry6prefixB7_:
  366|  2.80M|    fn prefix<'b>(&self, ns_buffer: &'b [u8]) -> Option<Prefix<'b>> {
  367|  2.80M|        if self.prefix_len == 0 {
  368|  1.05M|            None
  369|       |        } else {
  370|  1.74M|            Some(Prefix(&ns_buffer[self.start..self.start + self.prefix_len]))
  371|       |        }
  372|  2.80M|    }
_RNvMsd_NtCsjWx60dGvTf3_9quick_xml4nameNtB5_14NamespaceEntry9namespaceB7_:
  379|  1.48M|    fn namespace<'ns>(&self, buffer: &'ns [u8]) -> ResolveResult<'ns> {
  380|  1.48M|        if self.value_len == 0 {
  381|  3.05k|            ResolveResult::Unbound
  382|       |        } else {
  383|  1.48M|            let start = self.start + self.prefix_len;
  384|  1.48M|            ResolveResult::Bound(Namespace(&buffer[start..start + self.value_len]))
  385|       |        }
  386|  1.48M|    }
_RNvXse_NtCsjWx60dGvTf3_9quick_xml4nameNtB5_17NamespaceResolverNtNtCscdEvteftVc2_4core7default7Default7default:
  430|  58.4k|    fn default() -> Self {
  431|  58.4k|        let mut buffer = Vec::new();
  432|  58.4k|        let mut bindings = Vec::new();
  433|   175k|        for ent in &[RESERVED_NAMESPACE_XML, RESERVED_NAMESPACE_XMLNS] {
  434|   116k|            let prefix = ent.0.into_inner();
  435|   116k|            let uri = ent.1.into_inner();
  436|   116k|            bindings.push(NamespaceEntry {
  437|   116k|                start: buffer.len(),
  438|   116k|                prefix_len: prefix.len(),
  439|   116k|                value_len: uri.len(),
  440|   116k|                level: 0,
  441|   116k|            });
  442|   116k|            buffer.extend(prefix);
  443|   116k|            buffer.extend(uri);
  444|   116k|        }
  445|       |
  446|  58.4k|        Self {
  447|  58.4k|            buffer,
  448|  58.4k|            bindings,
  449|  58.4k|            nesting_level: 0,
  450|  58.4k|        }
  451|  58.4k|    }
_RNvMsf_NtCsjWx60dGvTf3_9quick_xml4nameNtB5_17NamespaceResolver4push:
  459|  1.41M|    pub fn push(&mut self, start: &BytesStart) -> Result<()> {
  460|  1.41M|        self.nesting_level += 1;
  461|  1.41M|        let level = self.nesting_level;
  462|       |        // adds new namespaces for attributes starting with 'xmlns:' and for the 'xmlns'
  463|       |        // (default namespace) attribute.
  464|  1.41M|        for a in start.attributes().with_checks(false) {
  465|   815k|            if let Ok(Attribute { key: k, value: v }) = a {
  466|   698k|                match k.as_namespace_binding() {
  467|   181k|                    Some(PrefixDeclaration::Default) => {
  468|   181k|                        let start = self.buffer.len();
  469|   181k|                        self.buffer.extend_from_slice(&v);
  470|   181k|                        self.bindings.push(NamespaceEntry {
  471|   181k|                            start,
  472|   181k|                            prefix_len: 0,
  473|   181k|                            value_len: v.len(),
  474|   181k|                            level,
  475|   181k|                        });
  476|   181k|                    }
  477|   159k|                    Some(PrefixDeclaration::Named(b"xml")) => {
  478|    944|                        if Namespace(&v) != RESERVED_NAMESPACE_XML.1 {
  479|       |                            // error, `xml` prefix explicitly set to different value
  480|    770|                            return Err(Error::InvalidPrefixBind {
  481|    770|                                prefix: b"xml".to_vec(),
  482|    770|                                namespace: v.to_vec(),
  483|    770|                            });
  484|    174|                        }
  485|       |                        // don't add another NamespaceEntry for the `xml` namespace prefix
  486|       |                    }
  487|   127k|                    Some(PrefixDeclaration::Named(b"xmlns")) => {
  488|       |                        // error, `xmlns` prefix explicitly set
  489|  1.48k|                        return Err(Error::InvalidPrefixBind {
  490|  1.48k|                            prefix: b"xmlns".to_vec(),
  491|  1.48k|                            namespace: v.to_vec(),
  492|  1.48k|                        });
  493|       |                    }
  494|   157k|                    Some(PrefixDeclaration::Named(prefix)) => {
  495|   157k|                        let ns = Namespace(&v);
  496|   157k|
  497|   157k|                        if ns == RESERVED_NAMESPACE_XML.1 || ns == RESERVED_NAMESPACE_XMLNS.1 {
  498|       |                            // error, non-`xml` prefix set to xml uri
  499|       |                            // error, non-`xmlns` prefix set to xmlns uri
  500|    722|                            return Err(Error::InvalidPrefixBind {
  501|    722|                                prefix: prefix.to_vec(),
  502|    722|                                namespace: v.to_vec(),
  503|    722|                            });
  504|   156k|                        }
  505|   156k|
  506|   156k|                        let start = self.buffer.len();
  507|   156k|                        self.buffer.extend_from_slice(prefix);
  508|   156k|                        self.buffer.extend_from_slice(&v);
  509|   156k|                        self.bindings.push(NamespaceEntry {
  510|   156k|                            start,
  511|   156k|                            prefix_len: prefix.len(),
  512|   156k|                            value_len: v.len(),
  513|   156k|                            level,
  514|   156k|                        });
  515|       |                    }
  516|   357k|                    None => {}
  517|       |                }
  518|       |            } else {
  519|   116k|                break;
  520|       |            }
  521|       |        }
  522|  1.41M|        Ok(())
  523|  1.41M|    }
_RNvMsf_NtCsjWx60dGvTf3_9quick_xml4nameNtB5_17NamespaceResolver3pop:
  529|   412k|    pub fn pop(&mut self) {
  530|   412k|        self.nesting_level -= 1;
  531|   412k|        let current_level = self.nesting_level;
  532|   412k|        // from the back (most deeply nested scope), look for the first scope that is still valid
  533|   412k|        match self.bindings.iter().rposition(|n| n.level <= current_level) {
  534|       |            // none of the namespaces are valid, remove all of them
  535|      0|            None => {
  536|      0|                self.buffer.clear();
  537|      0|                self.bindings.clear();
  538|      0|            }
  539|       |            // drop all namespaces past the last valid namespace
  540|   412k|            Some(last_valid_pos) => {
  541|   412k|                if let Some(len) = self.bindings.get(last_valid_pos + 1).map(|n| n.start) {
  542|   298k|                    self.buffer.truncate(len);
  543|   298k|                    self.bindings.truncate(last_valid_pos + 1);
  544|   298k|                }
  545|       |            }
  546|       |        }
  547|   412k|    }
_RNCNvMsf_NtCsjWx60dGvTf3_9quick_xml4nameNtB7_17NamespaceResolver3pop0B9_:
  533|   711k|        match self.bindings.iter().rposition(|n| n.level <= current_level) {
_RNCNvMsf_NtCsjWx60dGvTf3_9quick_xml4nameNtB7_17NamespaceResolver3pops_0B9_:
  541|   298k|                if let Some(len) = self.bindings.get(last_valid_pos + 1).map(|n| n.start) {
_RNvMsf_NtCsjWx60dGvTf3_9quick_xml4nameNtB5_17NamespaceResolver14resolve_prefix:
  587|  1.70M|    fn resolve_prefix(&self, prefix: Option<Prefix>, use_default: bool) -> ResolveResult {
  588|  1.70M|        self.bindings
  589|  1.70M|            .iter()
  590|  1.70M|            // Find the last defined binding that corresponds to the given prefix
  591|  1.70M|            .rev()
  592|  1.70M|            .find_map(|n| match (n.prefix(&self.buffer), prefix) {
  593|       |                // This is default namespace definition and name has no explicit prefix
  594|       |                (None, None) if use_default => Some(n.namespace(&self.buffer)),
  595|       |                (None, None) => Some(ResolveResult::Unbound),
  596|       |
  597|       |                // One part has prefix but other is not -> skip
  598|       |                (None, Some(_)) => None,
  599|       |                (Some(_), None) => None,
  600|       |
  601|       |                // Prefixes does not match -> skip
  602|       |                (Some(definition), Some(usage)) if definition != usage => None,
  603|       |
  604|       |                // Prefixes the same, entry defines binding reset (corresponds to `xmlns:p=""`)
  605|       |                _ if n.value_len == 0 => Some(Self::maybe_unknown(prefix)),
  606|       |                // Prefixes the same, returns corresponding namespace
  607|       |                _ => Some(n.namespace(&self.buffer)),
  608|  1.70M|            })
  609|  1.70M|            .unwrap_or_else(|| Self::maybe_unknown(prefix))
  610|  1.70M|    }
_RNCNvMsf_NtCsjWx60dGvTf3_9quick_xml4nameNtB7_17NamespaceResolver14resolve_prefix0B9_:
  592|  2.80M|            .find_map(|n| match (n.prefix(&self.buffer), prefix) {
  593|       |                // This is default namespace definition and name has no explicit prefix
  594|   863k|                (None, None) if use_default => Some(n.namespace(&self.buffer)),
  595|  1.12k|                (None, None) => Some(ResolveResult::Unbound),
  596|       |
  597|       |                // One part has prefix but other is not -> skip
  598|   193k|                (None, Some(_)) => None,
  599|   574k|                (Some(_), None) => None,
  600|       |
  601|       |                // Prefixes does not match -> skip
  602|  1.17M|                (Some(definition), Some(usage)) if definition != usage => None,
  603|       |
  604|       |                // Prefixes the same, entry defines binding reset (corresponds to `xmlns:p=""`)
  605|   625k|                _ if n.value_len == 0 => Some(Self::maybe_unknown(prefix)),
  606|       |                // Prefixes the same, returns corresponding namespace
  607|   624k|                _ => Some(n.namespace(&self.buffer)),
  608|  2.80M|            })
_RNCNvMsf_NtCsjWx60dGvTf3_9quick_xml4nameNtB7_17NamespaceResolver14resolve_prefixs_0B9_:
  609|   215k|            .unwrap_or_else(|| Self::maybe_unknown(prefix))
_RNvMsf_NtCsjWx60dGvTf3_9quick_xml4nameNtB5_17NamespaceResolver13maybe_unknownB7_:
  613|   215k|    fn maybe_unknown(prefix: Option<Prefix>) -> ResolveResult<'static> {
  614|   215k|        match prefix {
  615|  47.4k|            Some(p) => ResolveResult::Unknown(p.into_inner().to_vec()),
  616|   168k|            None => ResolveResult::Unbound,
  617|       |        }
  618|   215k|    }

_RINvXNtNtCsjWx60dGvTf3_9quick_xml6reader15buffered_readerRShINtB5_9XmlSourceQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE9read_withNtNtB5_2pi8PiParserECs5iIAVsTbYw4_8oxrdfxml:
  150|  72.1k|        $($async)? fn read_with<$($lf,)? P: Parser>(
  151|  72.1k|            &mut self,
  152|  72.1k|            mut parser: P,
  153|  72.1k|            buf: &'b mut Vec<u8>,
  154|  72.1k|            position: &mut usize,
  155|  72.1k|        ) -> Result<&'b [u8]> {
  156|  72.1k|            let mut read = 0;
  157|  72.1k|            let start = buf.len();
  158|       |            loop {
  159|  73.3k|                let available = match self $(.$reader)? .fill_buf() $(.$await)? {
  160|  73.3k|                    Ok(n) if n.is_empty() => break,
  161|  72.1k|                    Ok(n) => n,
  162|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  163|      0|                    Err(e) => {
  164|      0|                        *position += read;
  165|      0|                        return Err(Error::Io(e.into()));
  166|       |                    }
  167|       |                };
  168|       |
  169|  72.1k|                if let Some(i) = parser.feed(available) {
  170|  70.9k|                    buf.extend_from_slice(&available[..i]);
  171|  70.9k|
  172|  70.9k|                    // +1 for `>` which we do not include
  173|  70.9k|                    self $(.$reader)? .consume(i + 1);
  174|  70.9k|                    read += i + 1;
  175|  70.9k|
  176|  70.9k|                    *position += read;
  177|  70.9k|                    return Ok(&buf[start..]);
  178|  1.20k|                }
  179|  1.20k|
  180|  1.20k|                // The `>` symbol not yet found, continue reading
  181|  1.20k|                buf.extend_from_slice(available);
  182|  1.20k|
  183|  1.20k|                let used = available.len();
  184|  1.20k|                self $(.$reader)? .consume(used);
  185|  1.20k|                read += used;
  186|       |            }
  187|       |
  188|  1.20k|            *position += read;
  189|  1.20k|            Err(Error::Syntax(P::eof_error()))
  190|  72.1k|        }
_RINvXNtNtCsjWx60dGvTf3_9quick_xml6reader15buffered_readerRShINtB5_9XmlSourceQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE9read_withNtNtB5_7element13ElementParserECs5iIAVsTbYw4_8oxrdfxml:
  150|  1.42M|        $($async)? fn read_with<$($lf,)? P: Parser>(
  151|  1.42M|            &mut self,
  152|  1.42M|            mut parser: P,
  153|  1.42M|            buf: &'b mut Vec<u8>,
  154|  1.42M|            position: &mut usize,
  155|  1.42M|        ) -> Result<&'b [u8]> {
  156|  1.42M|            let mut read = 0;
  157|  1.42M|            let start = buf.len();
  158|       |            loop {
  159|  1.43M|                let available = match self $(.$reader)? .fill_buf() $(.$await)? {
  160|  1.43M|                    Ok(n) if n.is_empty() => break,
  161|  1.42M|                    Ok(n) => n,
  162|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  163|      0|                    Err(e) => {
  164|      0|                        *position += read;
  165|      0|                        return Err(Error::Io(e.into()));
  166|       |                    }
  167|       |                };
  168|       |
  169|  1.42M|                if let Some(i) = parser.feed(available) {
  170|  1.41M|                    buf.extend_from_slice(&available[..i]);
  171|  1.41M|
  172|  1.41M|                    // +1 for `>` which we do not include
  173|  1.41M|                    self $(.$reader)? .consume(i + 1);
  174|  1.41M|                    read += i + 1;
  175|  1.41M|
  176|  1.41M|                    *position += read;
  177|  1.41M|                    return Ok(&buf[start..]);
  178|  11.7k|                }
  179|  11.7k|
  180|  11.7k|                // The `>` symbol not yet found, continue reading
  181|  11.7k|                buf.extend_from_slice(available);
  182|  11.7k|
  183|  11.7k|                let used = available.len();
  184|  11.7k|                self $(.$reader)? .consume(used);
  185|  11.7k|                read += used;
  186|       |            }
  187|       |
  188|  11.7k|            *position += read;
  189|  11.7k|            Err(Error::Syntax(P::eof_error()))
  190|  1.42M|        }
_RNvXNtNtCsjWx60dGvTf3_9quick_xml6reader15buffered_readerRShINtB4_9XmlSourceQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE15remove_utf8_bomCs5iIAVsTbYw4_8oxrdfxml:
   18|  58.4k|        $($async)? fn remove_utf8_bom(&mut self) -> io::Result<()> {
   19|       |            use crate::encoding::UTF8_BOM;
   20|       |
   21|       |            loop {
   22|  58.4k|                break match self $(.$reader)? .fill_buf() $(.$await)? {
   23|  58.4k|                    Ok(n) => {
   24|  58.4k|                        if n.starts_with(UTF8_BOM) {
   25|    334|                            self $(.$reader)? .consume(UTF8_BOM.len());
   26|  58.0k|                        }
   27|  58.4k|                        Ok(())
   28|       |                    },
   29|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
   30|      0|                    Err(e) => Err(e),
   31|       |                };
   32|       |            }
   33|  58.4k|        }
_RNvXNtNtCsjWx60dGvTf3_9quick_xml6reader15buffered_readerRShINtB4_9XmlSourceQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE16read_bytes_untilCs5iIAVsTbYw4_8oxrdfxml:
  102|   360k|        $($async)? fn read_bytes_until $(<$lf>)? (
  103|   360k|            &mut self,
  104|   360k|            byte: u8,
  105|   360k|            buf: &'b mut Vec<u8>,
  106|   360k|            position: &mut usize,
  107|   360k|        ) -> io::Result<(&'b [u8], bool)> {
  108|   360k|            // search byte must be within the ascii range
  109|   360k|            debug_assert!(byte.is_ascii());
  110|       |
  111|   360k|            let mut read = 0;
  112|   360k|            let start = buf.len();
  113|       |            loop {
  114|   361k|                let available = match self $(.$reader)? .fill_buf() $(.$await)? {
  115|   361k|                    Ok(n) if n.is_empty() => break,
  116|   360k|                    Ok(n) => n,
  117|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  118|      0|                    Err(e) => {
  119|      0|                        *position += read;
  120|      0|                        return Err(e);
  121|       |                    }
  122|       |                };
  123|       |
  124|   360k|                match memchr::memchr(byte, available) {
  125|   360k|                    Some(i) => {
  126|   360k|                        buf.extend_from_slice(&available[..i]);
  127|   360k|
  128|   360k|                        let used = i + 1;
  129|   360k|                        self $(.$reader)? .consume(used);
  130|   360k|                        read += used;
  131|   360k|
  132|   360k|                        *position += read;
  133|   360k|                        return Ok((&buf[start..], true));
  134|       |                    }
  135|    298|                    None => {
  136|    298|                        buf.extend_from_slice(available);
  137|    298|
  138|    298|                        let used = available.len();
  139|    298|                        self $(.$reader)? .consume(used);
  140|    298|                        read += used;
  141|    298|                    }
  142|       |                }
  143|       |            }
  144|       |
  145|    298|            *position += read;
  146|    298|            Ok((&buf[start..], false))
  147|   360k|        }
_RNvXNtNtCsjWx60dGvTf3_9quick_xml6reader15buffered_readerRShINtB4_9XmlSourceQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE17read_bang_elementCs5iIAVsTbYw4_8oxrdfxml:
  193|  6.55k|        $($async)? fn read_bang_element $(<$lf>)? (
  194|  6.55k|            &mut self,
  195|  6.55k|            buf: &'b mut Vec<u8>,
  196|  6.55k|            position: &mut usize,
  197|  6.55k|        ) -> Result<(BangType, &'b [u8])> {
  198|  6.55k|            // Peeked one bang ('!') before being called, so it's guaranteed to
  199|  6.55k|            // start with it.
  200|  6.55k|            let start = buf.len();
  201|  6.55k|            let mut read = 1;
  202|  6.55k|            buf.push(b'!');
  203|  6.55k|            self $(.$reader)? .consume(1);
  204|       |
  205|  6.55k|            let bang_type = BangType::new(self.peek_one() $(.$await)? ?)?;
  206|       |
  207|       |            loop {
  208|  6.65k|                match self $(.$reader)? .fill_buf() $(.$await)? {
  209|       |                    // Note: Do not update position, so the error points to
  210|       |                    // somewhere sane rather than at the EOF
  211|  6.65k|                    Ok(n) if n.is_empty() => break,
  212|  6.52k|                    Ok(available) => {
  213|       |                        // We only parse from start because we don't want to consider
  214|       |                        // whatever is in the buffer before the bang element
  215|  6.52k|                        if let Some((consumed, used)) = bang_type.parse(&buf[start..], available) {
  216|  6.38k|                            buf.extend_from_slice(consumed);
  217|  6.38k|
  218|  6.38k|                            self $(.$reader)? .consume(used);
  219|  6.38k|                            read += used;
  220|  6.38k|
  221|  6.38k|                            *position += read;
  222|  6.38k|                            return Ok((bang_type, &buf[start..]));
  223|    136|                        } else {
  224|    136|                            buf.extend_from_slice(available);
  225|    136|
  226|    136|                            let used = available.len();
  227|    136|                            self $(.$reader)? .consume(used);
  228|    136|                            read += used;
  229|    136|                        }
  230|       |                    }
  231|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  232|      0|                    Err(e) => {
  233|      0|                        *position += read;
  234|      0|                        return Err(Error::Io(e.into()));
  235|       |                    }
  236|       |                }
  237|       |            }
  238|       |
  239|    136|            *position += read;
  240|    136|            Err(bang_type.to_err())
  241|  6.55k|        }
_RNvXNtNtCsjWx60dGvTf3_9quick_xml6reader15buffered_readerRShINtB4_9XmlSourceQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE8peek_oneCs5iIAVsTbYw4_8oxrdfxml:
  264|  1.87M|        $($async)? fn peek_one(&mut self) -> io::Result<Option<u8>> {
  265|       |            loop {
  266|  1.87M|                break match self $(.$reader)? .fill_buf() $(.$await)? {
  267|  1.87M|                    Ok(n) => Ok(n.first().cloned()),
  268|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  269|      0|                    Err(e) => Err(e),
  270|       |                };
  271|       |            }
  272|  1.87M|        }
_RNvXNtNtCsjWx60dGvTf3_9quick_xml6reader15buffered_readerRShINtB4_9XmlSourceQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE9read_textCs5iIAVsTbYw4_8oxrdfxml:
   53|  1.90M|        $($async)? fn read_text $(<$lf>)? (
   54|  1.90M|            &mut self,
   55|  1.90M|            buf: &'b mut Vec<u8>,
   56|  1.90M|            position: &mut usize,
   57|  1.90M|        ) -> ReadTextResult<'b, &'b mut Vec<u8>> {
   58|  1.90M|            let mut read = 0;
   59|  1.90M|            let start = buf.len();
   60|       |            loop {
   61|  1.92M|                let available = match self $(.$reader)? .fill_buf() $(.$await)? {
   62|  1.92M|                    Ok(n) if n.is_empty() => break,
   63|  1.87M|                    Ok(n) => n,
   64|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
   65|      0|                    Err(e) => {
   66|      0|                        *position += read;
   67|      0|                        return ReadTextResult::Err(e);
   68|       |                    }
   69|       |                };
   70|       |
   71|  1.87M|                match memchr::memchr(b'<', available) {
   72|       |                    Some(0) => {
   73|   552k|                        self $(.$reader)? .consume(1);
   74|   552k|                        *position += 1;
   75|   552k|                        return ReadTextResult::Markup(buf);
   76|       |                    }
   77|  1.31M|                    Some(i) => {
   78|  1.31M|                        buf.extend_from_slice(&available[..i]);
   79|  1.31M|
   80|  1.31M|                        let used = i + 1;
   81|  1.31M|                        self $(.$reader)? .consume(used);
   82|  1.31M|                        read += used;
   83|  1.31M|
   84|  1.31M|                        *position += read;
   85|  1.31M|                        return ReadTextResult::UpToMarkup(&buf[start..]);
   86|       |                    }
   87|  11.8k|                    None => {
   88|  11.8k|                        buf.extend_from_slice(available);
   89|  11.8k|
   90|  11.8k|                        let used = available.len();
   91|  11.8k|                        self $(.$reader)? .consume(used);
   92|  11.8k|                        read += used;
   93|  11.8k|                    }
   94|       |                }
   95|       |            }
   96|       |
   97|  43.7k|            *position += read;
   98|  43.7k|            ReadTextResult::UpToEof(&buf[start..])
   99|  1.90M|        }

_RNvXNtNtCsjWx60dGvTf3_9quick_xml6reader7elementNtB2_13ElementParserNtB4_6Parser4feedCs5iIAVsTbYw4_8oxrdfxml:
   57|  1.42M|    fn feed(&mut self, bytes: &[u8]) -> Option<usize> {
   58|  3.18M|        for i in memchr::memchr3_iter(b'>', b'\'', b'"', bytes) {
   59|  3.18M|            *self = match (*self, bytes[i]) {
   60|       |                // only allowed to match `>` while we are in state `Outside`
   61|  1.41M|                (Self::Outside, b'>') => return Some(i),
   62|  7.38k|                (Self::Outside, b'\'') => Self::SingleQ,
   63|   753k|                (Self::Outside, b'\"') => Self::DoubleQ,
   64|       |
   65|       |                // the only end_byte that gets us out if the same character
   66|   758k|                (Self::SingleQ, b'\'') | (Self::DoubleQ, b'"') => Self::Outside,
   67|       |
   68|       |                // all other bytes: no state change
   69|   256k|                _ => continue,
   70|       |            };
   71|       |        }
   72|  11.7k|        None
   73|  1.42M|    }
_RNvXNtNtCsjWx60dGvTf3_9quick_xml6reader7elementNtB2_13ElementParserNtB4_6Parser9eof_errorCs5iIAVsTbYw4_8oxrdfxml:
   76|  11.7k|    fn eof_error() -> SyntaxError {
   77|  11.7k|        SyntaxError::UnclosedTag
   78|  11.7k|    }
_RNvXs_NtNtCsjWx60dGvTf3_9quick_xml6reader7elementNtB4_13ElementParserNtNtCscdEvteftVc2_4core7default7Default7defaultCs5iIAVsTbYw4_8oxrdfxml:
   83|  1.42M|    fn default() -> Self {
   84|  1.42M|        Self::Outside
   85|  1.42M|    }

_RINvMs2_NtCsjWx60dGvTf3_9quick_xml6readerINtB6_6ReaderRShE15read_event_implQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECs5iIAVsTbYw4_8oxrdfxml:
  715|  3.30M|    fn read_event_impl<'i, B>(&mut self, mut buf: B) -> Result<Event<'i>>
  716|  3.30M|    where
  717|  3.30M|        R: XmlSource<'i, B>,
  718|  3.30M|    {
  719|  3.91M|        read_event_impl!(self, buf, self.reader, read_until_close)
  720|  3.30M|    }
_RINvMs2_NtCsjWx60dGvTf3_9quick_xml6readerINtB6_6ReaderRShE16read_until_closeQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECs5iIAVsTbYw4_8oxrdfxml:
  724|  1.86M|    fn read_until_close<'i, B>(&mut self, buf: B) -> Result<Event<'i>>
  725|  1.86M|    where
  726|  1.86M|        R: XmlSource<'i, B>,
  727|  1.86M|    {
  728|  1.86M|        read_until_close!(self, buf, self.reader)
  729|  1.86M|    }
_RNvMs0_NtCsjWx60dGvTf3_9quick_xml6readerINtB5_6ReaderRShE10config_mutCs5iIAVsTbYw4_8oxrdfxml:
  595|  58.4k|    pub fn config_mut(&mut self) -> &mut Config {
  596|  58.4k|        &mut self.state.config
  597|  58.4k|    }
_RNvMs3_NtCsjWx60dGvTf3_9quick_xml6readerNtB5_8BangType3new:
  915|  6.55k|    const fn new(byte: Option<u8>) -> Result<Self> {
  916|  6.55k|        Ok(match byte {
  917|  4.98k|            Some(b'[') => Self::CData,
  918|  1.44k|            Some(b'-') => Self::Comment,
  919|     91|            Some(b'D') | Some(b'd') => Self::DocType,
  920|     36|            _ => return Err(Error::Syntax(SyntaxError::InvalidBangMarkup)),
  921|       |        })
  922|  6.55k|    }
_RNvMs3_NtCsjWx60dGvTf3_9quick_xml6readerNtB5_8BangType5parse:
  931|  6.52k|    fn parse<'b>(&self, buf: &[u8], chunk: &'b [u8]) -> Option<(&'b [u8], usize)> {
  932|  12.6k|        for i in memchr::memchr_iter(b'>', chunk) {
  933|  4.12k|            match self {
  934|  4.12k|                // Need to read at least 6 symbols (`!---->`) for properly finished comment
  935|  4.12k|                // <!----> - XML comment
  936|  4.12k|                //  012345 - i
  937|  4.12k|                Self::Comment if buf.len() + i > 4 => {
  938|  3.11k|                    if chunk[..i].ends_with(b"--") {
  939|       |                        // We cannot strip last `--` from the buffer because we need it in case of
  940|       |                        // check_comments enabled option. XML standard requires that comment
  941|       |                        // will not end with `--->` sequence because this is a special case of
  942|       |                        // `--` in the comment (https://www.w3.org/TR/xml11/#sec-comments)
  943|  1.40k|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
  944|  1.71k|                    }
  945|  1.71k|                    // End sequence `-|->` was splitted at |
  946|  1.71k|                    //        buf --/   \-- chunk
  947|  1.71k|                    if i == 1 && buf.ends_with(b"-") && chunk[0] == b'-' {
  948|      0|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
  949|  1.71k|                    }
  950|  1.71k|                    // End sequence `--|>` was splitted at |
  951|  1.71k|                    //         buf --/   \-- chunk
  952|  1.71k|                    if i == 0 && buf.ends_with(b"--") {
  953|      0|                        return Some((&[], i + 1)); // +1 for `>`
  954|  1.71k|                    }
  955|       |                }
  956|  1.01k|                Self::Comment => {}
  957|       |                Self::CData => {
  958|  6.54k|                    if chunk[..i].ends_with(b"]]") {
  959|  4.93k|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
  960|  1.61k|                    }
  961|  1.61k|                    // End sequence `]|]>` was splitted at |
  962|  1.61k|                    //        buf --/   \-- chunk
  963|  1.61k|                    if i == 1 && buf.ends_with(b"]") && chunk[0] == b']' {
  964|      0|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
  965|  1.61k|                    }
  966|  1.61k|                    // End sequence `]]|>` was splitted at |
  967|  1.61k|                    //         buf --/   \-- chunk
  968|  1.61k|                    if i == 0 && buf.ends_with(b"]]") {
  969|      0|                        return Some((&[], i + 1)); // +1 for `>`
  970|  1.61k|                    }
  971|       |                }
  972|       |                Self::DocType => {
  973|  1.96k|                    let content = &chunk[..i];
  974|  1.96k|                    let balance = memchr::memchr2_iter(b'<', b'>', content)
  975|  1.96k|                        .map(|p| if content[p] == b'<' { 1i32 } else { -1 })
  976|  1.96k|                        .sum::<i32>();
  977|  1.96k|                    if balance == 0 {
  978|     47|                        return Some((content, i + 1)); // +1 for `>`
  979|  1.92k|                    }
  980|       |                }
  981|       |            }
  982|       |        }
  983|    136|        None
  984|  6.52k|    }
_RNvMs3_NtCsjWx60dGvTf3_9quick_xml6readerNtB5_8BangType6to_errCs5iIAVsTbYw4_8oxrdfxml:
  986|    136|    const fn to_err(&self) -> Error {
  987|    136|        match self {
  988|     54|            Self::CData => Error::Syntax(SyntaxError::UnclosedCData),
  989|     38|            Self::Comment => Error::Syntax(SyntaxError::UnclosedComment),
  990|     44|            Self::DocType => Error::Syntax(SyntaxError::UnclosedDoctype),
  991|       |        }
  992|    136|    }
_RNvXs_NtCsjWx60dGvTf3_9quick_xml6readerNtB4_6ConfigNtNtCscdEvteftVc2_4core7default7Default7default:
  191|  58.4k|    fn default() -> Self {
  192|  58.4k|        Self {
  193|  58.4k|            check_comments: false,
  194|  58.4k|            check_end_names: true,
  195|  58.4k|            expand_empty_elements: false,
  196|  58.4k|            trim_markup_names_in_closing_tags: true,
  197|  58.4k|            trim_text_start: false,
  198|  58.4k|            trim_text_end: false,
  199|  58.4k|        }
  200|  58.4k|    }
_RNvMs0_NtCsjWx60dGvTf3_9quick_xml6readerINtB5_6ReaderRShE11from_readerB7_:
  582|  58.4k|    pub fn from_reader(reader: R) -> Self {
  583|  58.4k|        Self {
  584|  58.4k|            reader,
  585|  58.4k|            state: ReaderState::default(),
  586|  58.4k|        }
  587|  58.4k|    }
_RNvMs1_NtCsjWx60dGvTf3_9quick_xml6readerINtB5_6ReaderRShE7decoderB7_:
  705|  1.89M|    pub const fn decoder(&self) -> Decoder {
  706|  1.89M|        self.state.decoder()
  707|  1.89M|    }
_RNCNvMs3_NtCsjWx60dGvTf3_9quick_xml6readerNtB7_8BangType5parse0B9_:
  975|   186k|                        .map(|p| if content[p] == b'<' { 1i32 } else { -1 })
_RNvMs3_NtCsjWx60dGvTf3_9quick_xml6readerNtB5_8BangType6to_errB7_:
  986|     64|    const fn to_err(&self) -> Error {
  987|     64|        match self {
  988|     14|            Self::CData => Error::Syntax(SyntaxError::UnclosedCData),
  989|      3|            Self::Comment => Error::Syntax(SyntaxError::UnclosedComment),
  990|     47|            Self::DocType => Error::Syntax(SyntaxError::UnclosedDoctype),
  991|       |        }
  992|     64|    }

_RINvMs_NtNtCsjWx60dGvTf3_9quick_xml6reader9ns_readerINtB5_8NsReaderRShE15read_event_implQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECs5iIAVsTbYw4_8oxrdfxml:
  148|  3.30M|    fn read_event_impl<'i, B>(&mut self, buf: B) -> Result<Event<'i>>
  149|  3.30M|    where
  150|  3.30M|        R: XmlSource<'i, B>,
  151|  3.30M|    {
  152|  3.30M|        self.pop();
  153|  3.30M|        let event = self.reader.read_event_impl(buf);
  154|  3.30M|        self.process_event(event)
  155|  3.30M|    }
_RNvMNtNtCsjWx60dGvTf3_9quick_xml6reader9ns_readerINtB2_8NsReaderRShE10config_mutCs5iIAVsTbYw4_8oxrdfxml:
   48|  58.4k|    pub fn config_mut(&mut self) -> &mut Config {
   49|  58.4k|        self.reader.config_mut()
   50|  58.4k|    }
_RNvMNtNtCsjWx60dGvTf3_9quick_xml6reader9ns_readerINtB2_8NsReaderRShE11from_readerCs5iIAVsTbYw4_8oxrdfxml:
   36|  58.4k|    pub fn from_reader(reader: R) -> Self {
   37|  58.4k|        Self::new(Reader::from_reader(reader))
   38|  58.4k|    }
_RNvMs0_NtNtCsjWx60dGvTf3_9quick_xml6reader9ns_readerINtB5_8NsReaderRShE15resolve_elementCs5iIAVsTbYw4_8oxrdfxml:
  307|  1.36M|    pub fn resolve_element<'n>(&self, name: QName<'n>) -> (ResolveResult, LocalName<'n>) {
  308|  1.36M|        self.ns_resolver.resolve(name, true)
  309|  1.36M|    }
_RNvMs0_NtNtCsjWx60dGvTf3_9quick_xml6reader9ns_readerINtB5_8NsReaderRShE17resolve_attributeCs5iIAVsTbYw4_8oxrdfxml:
  378|   336k|    pub fn resolve_attribute<'n>(&self, name: QName<'n>) -> (ResolveResult, LocalName<'n>) {
  379|   336k|        self.ns_resolver.resolve(name, false)
  380|   336k|    }
_RNvMs1_NtNtCsjWx60dGvTf3_9quick_xml6reader9ns_readerINtB5_8NsReaderRShE15read_event_intoCs5iIAVsTbYw4_8oxrdfxml:
  437|  3.30M|    pub fn read_event_into<'b>(&mut self, buf: &'b mut Vec<u8>) -> Result<Event<'b>> {
  438|  3.30M|        self.read_event_impl(buf)
  439|  3.30M|    }
_RNvMs_NtNtCsjWx60dGvTf3_9quick_xml6reader9ns_readerINtB4_8NsReaderRShE13process_eventCs5iIAVsTbYw4_8oxrdfxml:
  164|  3.30M|    pub(super) fn process_event<'i>(&mut self, event: Result<Event<'i>>) -> Result<Event<'i>> {
  165|  3.28M|        match event {
  166|  1.41M|            Ok(Event::Start(e)) => {
  167|  1.41M|                self.ns_resolver.push(&e)?;
  168|  1.41M|                Ok(Event::Start(e))
  169|       |            }
  170|      0|            Ok(Event::Empty(e)) => {
  171|      0|                self.ns_resolver.push(&e)?;
  172|       |                // notify next `read_event_impl()` invocation that it needs to pop this
  173|       |                // namespace scope
  174|      0|                self.pending_pop = true;
  175|      0|                Ok(Event::Empty(e))
  176|       |            }
  177|   412k|            Ok(Event::End(e)) => {
  178|   412k|                // notify next `read_event_impl()` invocation that it needs to pop this
  179|   412k|                // namespace scope
  180|   412k|                self.pending_pop = true;
  181|   412k|                Ok(Event::End(e))
  182|       |            }
  183|  1.48M|            e => e,
  184|       |        }
  185|  3.30M|    }
_RNvMs_NtNtCsjWx60dGvTf3_9quick_xml6reader9ns_readerINtB4_8NsReaderRShE3newCs5iIAVsTbYw4_8oxrdfxml:
  140|  58.4k|    fn new(reader: Reader<R>) -> Self {
  141|  58.4k|        Self {
  142|  58.4k|            reader,
  143|  58.4k|            ns_resolver: NamespaceResolver::default(),
  144|  58.4k|            pending_pop: false,
  145|  58.4k|        }
  146|  58.4k|    }
_RNvMs_NtNtCsjWx60dGvTf3_9quick_xml6reader9ns_readerINtB4_8NsReaderRShE3popCs5iIAVsTbYw4_8oxrdfxml:
  157|  3.30M|    pub(super) fn pop(&mut self) {
  158|  3.30M|        if self.pending_pop {
  159|   412k|            self.ns_resolver.pop();
  160|   412k|            self.pending_pop = false;
  161|  2.89M|        }
  162|  3.30M|    }
_RNvXs4_NtNtCsjWx60dGvTf3_9quick_xml6reader9ns_readerINtB5_8NsReaderRShENtNtNtCscdEvteftVc2_4core3ops5deref5Deref5derefCs5iIAVsTbYw4_8oxrdfxml:
  921|  1.89M|    fn deref(&self) -> &Self::Target {
  922|  1.89M|        &self.reader
  923|  1.89M|    }

_RNvXNtNtCsjWx60dGvTf3_9quick_xml6reader2piNtB2_8PiParserNtB4_6Parser4feedCs5iIAVsTbYw4_8oxrdfxml:
   61|  72.1k|    fn feed(&mut self, bytes: &[u8]) -> Option<usize> {
   62|  79.5k|        for i in memchr::memchr_iter(b'>', bytes) {
   63|  79.5k|            match i {
   64|      0|                0 if self.0 => return Some(0),
   65|       |                // If the previous byte is `?`, then we found `?>`
   66|  79.5k|                i if i > 0 && bytes[i - 1] == b'?' => return Some(i),
   67|  8.57k|                _ => {}
   68|       |            }
   69|       |        }
   70|  1.20k|        self.0 = bytes.last().copied() == Some(b'?');
   71|  1.20k|        None
   72|  72.1k|    }
_RNvXNtNtCsjWx60dGvTf3_9quick_xml6reader2piNtB2_8PiParserNtB4_6Parser9eof_errorCs5iIAVsTbYw4_8oxrdfxml:
   75|  1.20k|    fn eof_error() -> SyntaxError {
   76|  1.20k|        SyntaxError::UnclosedPIOrXmlDecl
   77|  1.20k|    }

_RNvMNtNtCsjWx60dGvTf3_9quick_xml6reader5stateNtB2_11ReaderState20close_expanded_emptyCs5iIAVsTbYw4_8oxrdfxml:
  278|  58.7k|    pub fn close_expanded_empty(&mut self) -> BytesEnd<'static> {
  279|  58.7k|        self.state = ParseState::InsideText;
  280|  58.7k|        let name = self
  281|  58.7k|            .opened_buffer
  282|  58.7k|            .split_off(self.opened_starts.pop().unwrap());
  283|  58.7k|        BytesEnd::wrap(name.into())
  284|  58.7k|    }
_RNvMNtNtCsjWx60dGvTf3_9quick_xml6reader5stateNtB2_11ReaderState9emit_text:
   60|  1.35M|    pub fn emit_text<'b>(&mut self, bytes: &'b [u8]) -> BytesText<'b> {
   61|  1.35M|        let mut content = bytes;
   62|  1.35M|
   63|  1.35M|        if self.config.trim_text_end {
   64|      0|            // Skip the ending '<'
   65|      0|            let len = bytes
   66|      0|                .iter()
   67|      0|                .rposition(|&b| !is_whitespace(b))
   68|      0|                .map_or(0, |p| p + 1);
   69|      0|            content = &bytes[..len];
   70|  1.35M|        }
   71|  1.35M|        BytesText::wrap(content, self.decoder())
   72|  1.35M|    }
_RNvMNtNtCsjWx60dGvTf3_9quick_xml6reader5stateNtB2_11ReaderState9emit_bang:
   76|  6.38k|    pub fn emit_bang<'b>(&mut self, bang_type: BangType, buf: &'b [u8]) -> Result<Event<'b>> {
   77|  6.38k|        let uncased_starts_with = |string: &[u8], prefix: &[u8]| {
   78|       |            string.len() >= prefix.len() && string[..prefix.len()].eq_ignore_ascii_case(prefix)
   79|       |        };
   80|       |
   81|  6.38k|        let len = buf.len();
   82|  4.98k|        match bang_type {
   83|  1.40k|            BangType::Comment if buf.starts_with(b"!--") => {
   84|  1.40k|                debug_assert!(buf.ends_with(b"--"));
   85|  1.40k|                if self.config.check_comments {
   86|       |                    // search if '--' not in comments
   87|      0|                    let mut haystack = &buf[3..len - 2];
   88|      0|                    let mut off = 0;
   89|      0|                    while let Some(p) = memchr::memchr(b'-', haystack) {
   90|      0|                        off += p + 1;
   91|      0|                        // if next byte after `-` is also `-`, return an error
   92|      0|                        if buf[3 + off] == b'-' {
   93|       |                            // Explanation of the magic:
   94|       |                            //
   95|       |                            // - `self.offset`` just after `>`,
   96|       |                            // - `buf` contains `!-- con--tent --`
   97|       |                            // - `p` is counted from byte after `<!--`
   98|       |                            //
   99|       |                            // <!-- con--tent -->:
  100|       |                            //  ~~~~~~~~~~~~~~~~ : - buf
  101|       |                            //   : ===========   : - zone of search (possible values of `p`)
  102|       |                            //   : |---p         : - p is counted from | (| is 0)
  103|       |                            //   : :   :         ^ - self.offset
  104|       |                            //   ^ :   :           - self.offset - len
  105|       |                            //     ^   :           - self.offset - len + 2
  106|       |                            //         ^           - self.offset - len + 2 + p
  107|      0|                            self.last_error_offset = self.offset - len + 2 + p;
  108|      0|                            return Err(Error::IllFormed(IllFormedError::DoubleHyphenInComment));
  109|      0|                        }
  110|      0|                        // Continue search after single `-` (+1 to skip it)
  111|      0|                        haystack = &haystack[p + 1..];
  112|       |                    }
  113|  1.40k|                }
  114|  1.40k|                Ok(Event::Comment(BytesText::wrap(
  115|  1.40k|                    // Cut of `!--` and `--` from start and end
  116|  1.40k|                    &buf[3..len - 2],
  117|  1.40k|                    self.decoder(),
  118|  1.40k|                )))
  119|       |            }
  120|  4.93k|            BangType::CData if uncased_starts_with(buf, b"![CDATA[") => {
  121|  4.92k|                debug_assert!(buf.ends_with(b"]]"));
  122|  4.92k|                Ok(Event::CData(BytesCData::wrap(
  123|  4.92k|                    // Cut of `![CDATA[` and `]]` from start and end
  124|  4.92k|                    &buf[8..len - 2],
  125|  4.92k|                    self.decoder(),
  126|  4.92k|                )))
  127|       |            }
  128|     47|            BangType::DocType if uncased_starts_with(buf, b"!DOCTYPE") => {
  129|      0|                match buf[8..].iter().position(|&b| !is_whitespace(b)) {
  130|      0|                    Some(start) => Ok(Event::DocType(BytesText::wrap(
  131|      0|                        // Cut of `!DOCTYPE` and any number of spaces from start
  132|      0|                        &buf[8 + start..],
  133|      0|                        self.decoder(),
  134|      0|                    ))),
  135|       |                    None => {
  136|       |                        // Because we here, we at least read `<!DOCTYPE>` and offset after `>`.
  137|       |                        // We want report error at place where name is expected - this is just
  138|       |                        // before `>`
  139|      0|                        self.last_error_offset = self.offset - 1;
  140|      0|                        return Err(Error::IllFormed(IllFormedError::MissingDoctypeName));
  141|       |                    }
  142|       |                }
  143|       |            }
  144|       |            _ => {
  145|       |                // <!....>
  146|       |                //  ^^^^^ - `buf` does not contain `<` and `>`, but `self.offset` is after `>`.
  147|       |                // ^------- We report error at that position, so we need to subtract 2 and buf len
  148|     64|                self.last_error_offset = self.offset - len - 2;
  149|     64|                Err(bang_type.to_err())
  150|       |            }
  151|       |        }
  152|  6.38k|    }
_RNCNvMNtNtCsjWx60dGvTf3_9quick_xml6reader5stateNtB4_11ReaderState9emit_bang0B8_:
   77|  4.98k|        let uncased_starts_with = |string: &[u8], prefix: &[u8]| {
   78|  4.98k|            string.len() >= prefix.len() && string[..prefix.len()].eq_ignore_ascii_case(prefix)
   79|  4.98k|        };
_RNvMNtNtCsjWx60dGvTf3_9quick_xml6reader5stateNtB2_11ReaderState8emit_end:
  156|   360k|    pub fn emit_end<'b>(&mut self, buf: &'b [u8]) -> Result<Event<'b>> {
  157|   360k|        // Strip the `/` character. `content` contains data between `</` and `>`
  158|   360k|        let content = &buf[1..];
  159|       |        // XML standard permits whitespaces after the markup name in closing tags.
  160|       |        // Let's strip them from the buffer before comparing tag names.
  161|   360k|        let name = if self.config.trim_markup_names_in_closing_tags {
  162|   360k|            if let Some(pos_end_name) = content.iter().rposition(|&b| !is_whitespace(b)) {
  163|   316k|                &content[..pos_end_name + 1]
  164|       |            } else {
  165|  44.2k|                content
  166|       |            }
  167|       |        } else {
  168|      0|            content
  169|       |        };
  170|       |
  171|   360k|        let decoder = self.decoder();
  172|   360k|
  173|   360k|        // Get the index in self.opened_buffer of the name of the last opened tag
  174|   360k|        match self.opened_starts.pop() {
  175|   357k|            Some(start) => {
  176|   357k|                if self.config.check_end_names {
  177|   357k|                    let expected = &self.opened_buffer[start..];
  178|   357k|                    if name != expected {
  179|  4.26k|                        let expected = decoder.decode(expected).unwrap_or_default().into_owned();
  180|  4.26k|                        // #513: In order to allow error recovery we should drop content of the buffer
  181|  4.26k|                        self.opened_buffer.truncate(start);
  182|  4.26k|
  183|  4.26k|                        // Report error at start of the end tag at `<` character
  184|  4.26k|                        // -2 for `<` and `>`
  185|  4.26k|                        self.last_error_offset = self.offset - buf.len() - 2;
  186|  4.26k|                        return Err(Error::IllFormed(IllFormedError::MismatchedEndTag {
  187|  4.26k|                            expected,
  188|  4.26k|                            found: decoder.decode(name).unwrap_or_default().into_owned(),
  189|  4.26k|                        }));
  190|   353k|                    }
  191|      0|                }
  192|       |
  193|   353k|                self.opened_buffer.truncate(start);
  194|       |            }
  195|       |            None => {
  196|       |                // Report error at start of the end tag at `<` character
  197|       |                // -2 for `<` and `>`
  198|  2.83k|                self.last_error_offset = self.offset - buf.len() - 2;
  199|  2.83k|                return Err(Error::IllFormed(IllFormedError::UnmatchedEndTag(
  200|  2.83k|                    decoder.decode(name).unwrap_or_default().into_owned(),
  201|  2.83k|                )));
  202|       |            }
  203|       |        }
  204|       |
  205|   353k|        Ok(Event::End(BytesEnd::wrap(name.into())))
  206|   360k|    }
_RNCNvMNtNtCsjWx60dGvTf3_9quick_xml6reader5stateNtB4_11ReaderState8emit_end0B8_:
  162|   322k|            if let Some(pos_end_name) = content.iter().rposition(|&b| !is_whitespace(b)) {
_RNvMNtNtCsjWx60dGvTf3_9quick_xml6reader5stateNtB2_11ReaderState18emit_question_mark:
  212|  70.9k|    pub fn emit_question_mark<'b>(&mut self, buf: &'b [u8]) -> Result<Event<'b>> {
  213|  70.9k|        debug_assert!(buf.len() > 0);
  214|  70.9k|        debug_assert_eq!(buf[0], b'?');
  215|       |
  216|  70.9k|        let len = buf.len();
  217|  70.9k|        // We accept at least <??>
  218|  70.9k|        //                     ~~ - len = 2
  219|  70.9k|        if len > 1 && buf[len - 1] == b'?' {
  220|       |            // Cut of `?` and `?` from start and end
  221|  70.9k|            let content = &buf[1..len - 1];
  222|  70.9k|            let len = content.len();
  223|  70.9k|
  224|  70.9k|            if content.starts_with(b"xml") && (len == 3 || is_whitespace(content[3])) {
  225|  60.8k|                let event = BytesDecl::from_start(BytesStart::wrap(content, 3));
  226|  60.8k|
  227|  60.8k|                // Try getting encoding from the declaration event
  228|  60.8k|                #[cfg(feature = "encoding")]
  229|  60.8k|                if self.encoding.can_be_refined() {
  230|  60.8k|                    if let Some(encoding) = event.encoder() {
  231|  60.8k|                        self.encoding = EncodingRef::XmlDetected(encoding);
  232|  60.8k|                    }
  233|  60.8k|                }
  234|  60.8k|
  235|  60.8k|                Ok(Event::Decl(event))
  236|       |            } else {
  237|  10.0k|                Ok(Event::PI(BytesPI::wrap(content, name_len(content))))
  238|       |            }
  239|       |        } else {
  240|       |            // <?....EOF
  241|       |            //  ^^^^^ - `buf` does not contains `<`, but we want to report error at `<`,
  242|       |            //          so we move offset to it (-2 for `<` and `>`)
  243|     15|            self.last_error_offset = self.offset - len - 2;
  244|     15|            Err(Error::Syntax(SyntaxError::UnclosedPIOrXmlDecl))
  245|       |        }
  246|  70.9k|    }
_RNvMNtNtCsjWx60dGvTf3_9quick_xml6reader5stateNtB2_11ReaderState10emit_start:
  252|  1.41M|    pub fn emit_start<'b>(&mut self, content: &'b [u8]) -> Event<'b> {
  253|  1.41M|        if let Some(content) = content.strip_suffix(b"/") {
  254|       |            // This is self-closed tag `<something/>`
  255|  58.7k|            let event = BytesStart::wrap(content, name_len(content));
  256|  58.7k|
  257|  58.7k|            if self.config.expand_empty_elements {
  258|  58.7k|                self.state = ParseState::InsideEmpty;
  259|  58.7k|                self.opened_starts.push(self.opened_buffer.len());
  260|  58.7k|                self.opened_buffer.extend(event.name().as_ref());
  261|  58.7k|                Event::Start(event)
  262|       |            } else {
  263|      0|                Event::Empty(event)
  264|       |            }
  265|       |        } else {
  266|  1.35M|            let event = BytesStart::wrap(content, name_len(content));
  267|  1.35M|
  268|  1.35M|            // #514: Always store names event when .check_end_names == false,
  269|  1.35M|            // because checks can be temporary disabled and when they would be
  270|  1.35M|            // enabled, we should have that information
  271|  1.35M|            self.opened_starts.push(self.opened_buffer.len());
  272|  1.35M|            self.opened_buffer.extend(event.name().as_ref());
  273|  1.35M|            Event::Start(event)
  274|       |        }
  275|  1.41M|    }
_RNvMNtNtCsjWx60dGvTf3_9quick_xml6reader5stateNtB2_11ReaderState7decoder:
  295|  3.62M|    pub const fn decoder(&self) -> Decoder {
  296|  3.62M|        Decoder {
  297|  3.62M|            #[cfg(feature = "encoding")]
  298|  3.62M|            encoding: self.encoding.encoding(),
  299|  3.62M|        }
  300|  3.62M|    }
_RNvXs_NtNtCsjWx60dGvTf3_9quick_xml6reader5stateNtB4_11ReaderStateNtNtCscdEvteftVc2_4core7default7Default7default:
  304|  58.4k|    fn default() -> Self {
  305|  58.4k|        Self {
  306|  58.4k|            offset: 0,
  307|  58.4k|            last_error_offset: 0,
  308|  58.4k|            state: ParseState::Init,
  309|  58.4k|            config: Config::default(),
  310|  58.4k|            opened_buffer: Vec::new(),
  311|  58.4k|            opened_starts: Vec::new(),
  312|  58.4k|
  313|  58.4k|            #[cfg(feature = "encoding")]
  314|  58.4k|            encoding: EncodingRef::Implicit(UTF_8),
  315|  58.4k|        }
  316|  58.4k|    }

_RNvNtCsjWx60dGvTf3_9quick_xml5utils17write_byte_string:
   25|  5.95k|pub fn write_byte_string(f: &mut Formatter, byte_string: &[u8]) -> fmt::Result {
   26|  5.95k|    write!(f, "\"")?;
   27|  60.2k|    for b in byte_string {
   28|  54.3k|        match *b {
   29|  46.1k|            32..=33 | 35..=126 => write!(f, "{}", *b as char)?,
   30|     16|            34 => write!(f, "\\\"")?,
   31|  9.65k|            _ => write!(f, "{:#02X}", b)?,
   32|       |        }
   33|       |    }
   34|  5.95k|    write!(f, "\"")?;
   35|  5.95k|    Ok(())
   36|  5.95k|}
_RNvNtCsjWx60dGvTf3_9quick_xml5utils13is_whitespaceB3_:
  202|  25.0M|pub const fn is_whitespace(b: u8) -> bool {
  203|  25.0M|    matches!(b, b' ' | b'\r' | b'\n' | b'\t')
  204|  25.0M|}
_RNvNtCsjWx60dGvTf3_9quick_xml5utils8name_lenB3_:
  211|  1.42M|pub const fn name_len(mut bytes: &[u8]) -> usize {
  212|  1.42M|    // Note: A pattern matching based approach (instead of indexing) allows
  213|  1.42M|    // making the function const.
  214|  1.42M|    let mut len = 0;
  215|  9.46M|    while let [first, rest @ ..] = bytes {
  216|  8.55M|        if is_whitespace(*first) {
  217|   507k|            break;
  218|  8.04M|        }
  219|  8.04M|        len += 1;
  220|  8.04M|        bytes = rest;
  221|       |    }
  222|  1.42M|    len
  223|  1.42M|}

_RNvMNtCsjWx60dGvTf3_9quick_xml6writerINtB2_6WriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE15new_with_indentCsXnvbX6AWbe_7rdf_xml:
   80|  28.9k|    pub fn new_with_indent(inner: W, indent_char: u8, indent_size: usize) -> Writer<W> {
   81|  28.9k|        Writer {
   82|  28.9k|            writer: inner,
   83|  28.9k|            indent: Some(Indentation::new(indent_char, indent_size)),
   84|  28.9k|        }
   85|  28.9k|    }
_RINvMs_NtCsjWx60dGvTf3_9quick_xml6writerINtB5_6WriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE11write_eventNtNtB7_6events5EventECs5iIAVsTbYw4_8oxrdfxml:
  195|   746k|    pub fn write_event<'a, E: AsRef<Event<'a>>>(&mut self, event: E) -> Result<()> {
  196|   746k|        let mut next_should_line_break = true;
  197|   746k|        let result = match *event.as_ref() {
  198|   336k|            Event::Start(ref e) => {
  199|   336k|                let result = self.write_wrapped(b"<", e, b">");
  200|   336k|                if let Some(i) = self.indent.as_mut() {
  201|   311k|                    i.grow();
  202|   311k|                }
  203|   336k|                result
  204|       |            }
  205|   317k|            Event::End(ref e) => {
  206|   317k|                if let Some(i) = self.indent.as_mut() {
  207|   311k|                    i.shrink();
  208|   311k|                }
  209|   317k|                self.write_wrapped(b"</", e, b">")
  210|       |            }
  211|  9.00k|            Event::Empty(ref e) => self.write_wrapped(b"<", e, b"/>"),
  212|  55.0k|            Event::Text(ref e) => {
  213|  55.0k|                next_should_line_break = false;
  214|  55.0k|                self.write(e)
  215|       |            }
  216|      0|            Event::Comment(ref e) => self.write_wrapped(b"<!--", e, b"-->"),
  217|      0|            Event::CData(ref e) => {
  218|      0|                next_should_line_break = false;
  219|      0|                self.write(b"<![CDATA[")?;
  220|      0|                self.write(e)?;
  221|      0|                self.write(b"]]>")
  222|       |            }
  223|  28.9k|            Event::Decl(ref e) => self.write_wrapped(b"<?", e, b"?>"),
  224|      0|            Event::PI(ref e) => self.write_wrapped(b"<?", e, b"?>"),
  225|      0|            Event::DocType(ref e) => self.write_wrapped(b"<!DOCTYPE ", e, b">"),
  226|      0|            Event::Eof => Ok(()),
  227|       |        };
  228|   746k|        if let Some(i) = self.indent.as_mut() {
  229|   700k|            i.should_line_break = next_should_line_break;
  230|   700k|        }
  231|   746k|        result
  232|   746k|    }
_RNvMNtCsjWx60dGvTf3_9quick_xml6writerINtB2_6WriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE10into_innerCs5iIAVsTbYw4_8oxrdfxml:
   88|  28.9k|    pub fn into_inner(self) -> W {
   89|  28.9k|        self.writer
   90|  28.9k|    }
_RNvMNtCsjWx60dGvTf3_9quick_xml6writerINtB2_6WriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE3newCs5iIAVsTbYw4_8oxrdfxml:
   72|  1.65k|    pub const fn new(inner: W) -> Writer<W> {
   73|  1.65k|        Writer {
   74|  1.65k|            writer: inner,
   75|  1.65k|            indent: None,
   76|  1.65k|        }
   77|  1.65k|    }
_RNvMs_NtCsjWx60dGvTf3_9quick_xml6writerINtB4_6WriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE13write_wrappedCs5iIAVsTbYw4_8oxrdfxml:
  241|   691k|    fn write_wrapped(&mut self, before: &[u8], value: &[u8], after: &[u8]) -> Result<()> {
  242|   691k|        if let Some(ref i) = self.indent {
  243|   661k|            if i.should_line_break {
  244|   594k|                self.writer.write_all(b"\n")?;
  245|   594k|                self.writer.write_all(i.current())?;
  246|  67.7k|            }
  247|  29.7k|        }
  248|   691k|        self.write(before)?;
  249|   691k|        self.write(value)?;
  250|   691k|        self.write(after)?;
  251|   691k|        Ok(())
  252|   691k|    }
_RNvMs_NtCsjWx60dGvTf3_9quick_xml6writerINtB4_6WriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE5writeCs5iIAVsTbYw4_8oxrdfxml:
  236|  2.13M|    pub(crate) fn write(&mut self, value: &[u8]) -> Result<()> {
  237|  2.13M|        self.writer.write_all(value).map_err(Into::into)
  238|  2.13M|    }
_RNvMs2_NtCsjWx60dGvTf3_9quick_xml6writerNtB5_11Indentation3new:
  611|  28.9k|    pub fn new(indent_char: u8, indent_size: usize) -> Self {
  612|  28.9k|        Self {
  613|  28.9k|            should_line_break: false,
  614|  28.9k|            indent_char,
  615|  28.9k|            indent_size,
  616|  28.9k|            indents: vec![indent_char; 128],
  617|  28.9k|            current_indent_len: 0, // invariant - needs to remain less than indents.len()
  618|  28.9k|        }
  619|  28.9k|    }
_RNvMs2_NtCsjWx60dGvTf3_9quick_xml6writerNtB5_11Indentation4grow:
  622|   311k|    pub fn grow(&mut self) {
  623|   311k|        self.current_indent_len += self.indent_size;
  624|   311k|        self.ensure(self.current_indent_len);
  625|   311k|    }
_RNvMs2_NtCsjWx60dGvTf3_9quick_xml6writerNtB5_11Indentation6shrink:
  628|   311k|    pub fn shrink(&mut self) {
  629|   311k|        self.current_indent_len = self.current_indent_len.saturating_sub(self.indent_size);
  630|   311k|    }
_RNvMs2_NtCsjWx60dGvTf3_9quick_xml6writerNtB5_11Indentation7current:
  633|   594k|    pub fn current(&self) -> &[u8] {
  634|   594k|        &self.indents[..self.current_indent_len]
  635|   594k|    }
_RNvMs2_NtCsjWx60dGvTf3_9quick_xml6writerNtB5_11Indentation6ensure:
  644|   311k|    fn ensure(&mut self, new_len: usize) {
  645|   311k|        if self.indents.len() < new_len {
  646|      0|            self.indents.resize(new_len, self.indent_char);
  647|   311k|        }
  648|   311k|    }

_RINvXs2_NtNtCsNnZqS58YXU_4rand13distributions7integerNtB8_8StandardINtNtB8_12distribution12DistributionoE6sampleNtNtNtBa_4rngs6thread9ThreadRngECs5iIAVsTbYw4_8oxrdfxml:
   51|   578k|    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u128 {
   52|   578k|        // Use LE; we explicitly generate one value before the next.
   53|   578k|        let x = u128::from(rng.next_u64());
   54|   578k|        let y = u128::from(rng.next_u64());
   55|   578k|        (y << 64) | x
   56|   578k|    }

_RINvCsNnZqS58YXU_4rand6randomoECs5iIAVsTbYw4_8oxrdfxml:
  183|   578k|pub fn random<T>() -> T
  184|   578k|where Standard: Distribution<T> {
  185|   578k|    thread_rng().gen()
  186|   578k|}

_RINvYNtNtNtCsNnZqS58YXU_4rand4rngs6thread9ThreadRngNtNtB9_3rng3Rng3genoECs5iIAVsTbYw4_8oxrdfxml:
   93|   578k|    fn gen<T>(&mut self) -> T
   94|   578k|    where Standard: Distribution<T> {
   95|   578k|        Standard.sample(self)
   96|   578k|    }

_RNvXs_NtNtNtCsNnZqS58YXU_4rand4rngs7adapter9reseedingINtB4_12ReseedingRngNtNtCsjhTDs2LGHe5_11rand_chacha6chacha12ChaCha12CoreNtNtCs8qzC7aBl1xk_9rand_core2os5OsRngENtB23_7RngCore8next_u64Cs5iIAVsTbYw4_8oxrdfxml:
  124|  1.15M|    fn next_u64(&mut self) -> u64 {
  125|  1.15M|        self.0.next_u64()
  126|  1.15M|    }
_RNvMNtNtNtCsNnZqS58YXU_4rand4rngs7adapter9reseedingINtB2_12ReseedingRngNtNtCsjhTDs2LGHe5_11rand_chacha6chacha12ChaCha12CoreNtNtCs8qzC7aBl1xk_9rand_core2os5OsRngE3newB8_:
  101|      1|    pub fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  102|      1|        ReseedingRng(BlockRng::new(ReseedingCore::new(rng, threshold, reseeder)))
  103|      1|    }
_RNvXs2_NtNtNtCsNnZqS58YXU_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCsjhTDs2LGHe5_11rand_chacha6chacha12ChaCha12CoreNtNtCs8qzC7aBl1xk_9rand_core2os5OsRngENtNtB25_5block12BlockRngCore8generateBb_:
  173|  36.1k|    fn generate(&mut self, results: &mut Self::Results) {
  174|  36.1k|        let global_fork_counter = fork::get_fork_counter();
  175|  36.1k|        if self.bytes_until_reseed <= 0 || self.is_forked(global_fork_counter) {
  176|       |            // We get better performance by not calling only `reseed` here
  177|       |            // and continuing with the rest of the function, but by directly
  178|       |            // returning from a non-inlined function.
  179|    141|            return self.reseed_and_generate(results, global_fork_counter);
  180|  36.0k|        }
  181|  36.0k|        let num_bytes = results.as_ref().len() * size_of::<Self::Item>();
  182|  36.0k|        self.bytes_until_reseed -= num_bytes as i64;
  183|  36.0k|        self.inner.generate(results);
  184|  36.1k|    }
_RNvMs3_NtNtNtCsNnZqS58YXU_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCsjhTDs2LGHe5_11rand_chacha6chacha12ChaCha12CoreNtNtCs8qzC7aBl1xk_9rand_core2os5OsRngE3newBb_:
  193|      1|    fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  194|      1|        use ::core::i64::MAX;
  195|      1|        fork::register_fork_handler();
  196|       |
  197|       |        // Because generating more values than `i64::MAX` takes centuries on
  198|       |        // current hardware, we just clamp to that value.
  199|       |        // Also we set a threshold of 0, which indicates no limit, to that
  200|       |        // value.
  201|      1|        let threshold = if threshold == 0 {
  202|      0|            MAX
  203|      1|        } else if threshold <= MAX as u64 {
  204|      1|            threshold as i64
  205|       |        } else {
  206|      0|            MAX
  207|       |        };
  208|       |
  209|      1|        ReseedingCore {
  210|      1|            inner: rng,
  211|      1|            reseeder,
  212|      1|            threshold: threshold as i64,
  213|      1|            bytes_until_reseed: threshold as i64,
  214|      1|            fork_counter: 0,
  215|      1|        }
  216|      1|    }
_RNvMs3_NtNtNtCsNnZqS58YXU_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCsjhTDs2LGHe5_11rand_chacha6chacha12ChaCha12CoreNtNtCs8qzC7aBl1xk_9rand_core2os5OsRngE6reseedBb_:
  219|    141|    fn reseed(&mut self) -> Result<(), Error> {
  220|    141|        R::from_rng(&mut self.reseeder).map(|result| {
  221|       |            self.bytes_until_reseed = self.threshold;
  222|       |            self.inner = result
  223|    141|        })
  224|    141|    }
_RNCNvMs3_NtNtNtCsNnZqS58YXU_4rand4rngs7adapter9reseedingINtB7_13ReseedingCoreNtNtCsjhTDs2LGHe5_11rand_chacha6chacha12ChaCha12CoreNtNtCs8qzC7aBl1xk_9rand_core2os5OsRngE6reseed0Bd_:
  220|    141|        R::from_rng(&mut self.reseeder).map(|result| {
  221|    141|            self.bytes_until_reseed = self.threshold;
  222|    141|            self.inner = result
  223|    141|        })
_RNvMs3_NtNtNtCsNnZqS58YXU_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCsjhTDs2LGHe5_11rand_chacha6chacha12ChaCha12CoreNtNtCs8qzC7aBl1xk_9rand_core2os5OsRngE9is_forkedBb_:
  226|  36.1k|    fn is_forked(&self, global_fork_counter: usize) -> bool {
  227|  36.1k|        // In theory, on 32-bit platforms, it is possible for
  228|  36.1k|        // `global_fork_counter` to wrap around after ~4e9 forks.
  229|  36.1k|        //
  230|  36.1k|        // This check will detect a fork in the normal case where
  231|  36.1k|        // `fork_counter < global_fork_counter`, and also when the difference
  232|  36.1k|        // between both is greater than `isize::MAX` (wrapped around).
  233|  36.1k|        //
  234|  36.1k|        // It will still fail to detect a fork if there have been more than
  235|  36.1k|        // `isize::MAX` forks, without any reseed in between. Seems unlikely
  236|  36.1k|        // enough.
  237|  36.1k|        (self.fork_counter.wrapping_sub(global_fork_counter) as isize) < 0
  238|  36.1k|    }
_RNvMs3_NtNtNtCsNnZqS58YXU_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCsjhTDs2LGHe5_11rand_chacha6chacha12ChaCha12CoreNtNtCs8qzC7aBl1xk_9rand_core2os5OsRngE19reseed_and_generateBb_:
  241|    141|    fn reseed_and_generate(
  242|    141|        &mut self, results: &mut <Self as BlockRngCore>::Results, global_fork_counter: usize,
  243|    141|    ) {
  244|    141|        #![allow(clippy::if_same_then_else)] // false positive
  245|    141|        if self.is_forked(global_fork_counter) {
  246|      0|            info!("Fork detected, reseeding RNG");
  247|    141|        } else {
  248|    141|            trace!("Reseeding RNG (periodic reseed)");
  249|    141|        }
  250|       |
  251|    141|        let num_bytes = results.as_ref().len() * size_of::<<R as BlockRngCore>::Item>();
  252|       |
  253|    141|        if let Err(e) = self.reseed() {
  254|      0|            warn!("Reseeding RNG failed: {}", e);
  255|      0|            let _ = e;
  256|    141|        }
  257|    141|        self.fork_counter = global_fork_counter;
  258|    141|
  259|    141|        self.bytes_until_reseed = self.threshold - num_bytes as i64;
  260|    141|        self.inner.generate(results);
  261|    141|    }
_RNvNtNtNtNtCsNnZqS58YXU_4rand4rngs7adapter9reseeding4fork16get_fork_counter:
  307|  36.1k|    pub fn get_fork_counter() -> usize {
  308|  36.1k|        RESEEDING_RNG_FORK_COUNTER.load(Ordering::Relaxed)
  309|  36.1k|    }
_RNvNtNtNtNtCsNnZqS58YXU_4rand4rngs7adapter9reseeding4fork21register_fork_handler:
  317|      1|    pub fn register_fork_handler() {
  318|      1|        static REGISTER: Once = Once::new();
  319|      1|        REGISTER.call_once(|| {
  320|       |            // Bump the counter before and after forking (see #1169):
  321|       |            let ret = unsafe { libc::pthread_atfork(
  322|       |                Some(fork_handler),
  323|       |                Some(fork_handler),
  324|       |                Some(fork_handler),
  325|       |            ) };
  326|       |            if ret != 0 {
  327|       |                panic!("libc::pthread_atfork failed with code {}", ret);
  328|       |            }
  329|      1|        });
  330|      1|    }
_RNCNvNtNtNtNtCsNnZqS58YXU_4rand4rngs7adapter9reseeding4fork21register_fork_handler0Bb_:
  319|      1|        REGISTER.call_once(|| {
  320|      1|            // Bump the counter before and after forking (see #1169):
  321|      1|            let ret = unsafe { libc::pthread_atfork(
  322|      1|                Some(fork_handler),
  323|      1|                Some(fork_handler),
  324|      1|                Some(fork_handler),
  325|      1|            ) };
  326|      1|            if ret != 0 {
  327|      0|                panic!("libc::pthread_atfork failed with code {}", ret);
  328|      1|            }
  329|      1|        });

_RNvXs_NtNtCsNnZqS58YXU_4rand4rngs6threadNtB4_9ThreadRngNtCs8qzC7aBl1xk_9rand_core7RngCore8next_u64:
  109|  1.15M|    fn next_u64(&mut self) -> u64 {
  110|  1.15M|        // SAFETY: We must make sure to stop using `rng` before anyone else
  111|  1.15M|        // creates another mutable reference
  112|  1.15M|        let rng = unsafe { &mut *self.rng.get() };
  113|  1.15M|        rng.next_u64()
  114|  1.15M|    }
_RNvNtNtCsNnZqS58YXU_4rand4rngs6thread10thread_rng:
   88|   578k|pub fn thread_rng() -> ThreadRng {
   89|   578k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
   90|   578k|    ThreadRng { rng }
   91|   578k|}
_RNCNvNtNtCsNnZqS58YXU_4rand4rngs6thread10thread_rng0B7_:
   89|   578k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());

_RNvXsl_NtCsjhTDs2LGHe5_11rand_chacha6chachaNtB5_12ChaCha12CoreNtNtCs8qzC7aBl1xk_9rand_core5block12BlockRngCore8generateCsNnZqS58YXU_4rand:
   89|  36.1k|            fn generate(&mut self, r: &mut Self::Results) {
   90|  36.1k|                // Fill slice of words by writing to equivalent slice of bytes, then fixing endianness.
   91|  36.1k|                self.state.refill4($rounds, unsafe {
   92|  36.1k|                    &mut *(&mut *r as *mut Array64<u32> as *mut [u8; 256])
   93|  36.1k|                });
   94|  2.31M|                for x in r.as_mut() {
   95|  2.31M|                    *x = x.to_le();
   96|  2.31M|                }
   97|  36.1k|            }
_RNvXsm_NtCsjhTDs2LGHe5_11rand_chacha6chachaNtB5_12ChaCha12CoreNtCs8qzC7aBl1xk_9rand_core11SeedableRng9from_seedCsNnZqS58YXU_4rand:
  103|    142|            fn from_seed(seed: Self::Seed) -> Self {
  104|    142|                $ChaChaXCore { state: ChaCha::new(&seed, &[0u8; 8]) }
  105|    142|            }
_RNvXs_NtCsjhTDs2LGHe5_11rand_chacha6chachaINtB4_7Array64mEINtNtCscdEvteftVc2_4core7convert5AsRefSmE6as_refB6_:
   46|  2.38M|    fn as_ref(&self) -> &[T] {
   47|  2.38M|        &self.0
   48|  2.38M|    }
_RNvXs0_NtCsjhTDs2LGHe5_11rand_chacha6chachaINtB5_7Array64mEINtNtCscdEvteftVc2_4core7convert5AsMutSmE6as_mutB7_:
   51|  36.1k|    fn as_mut(&mut self) -> &mut [T] {
   52|  36.1k|        &mut self.0
   53|  36.1k|    }
_RNvXNtCsjhTDs2LGHe5_11rand_chacha6chachaINtB2_7Array64mENtNtCscdEvteftVc2_4core7default7Default7defaultB4_:
   32|      1|    fn default() -> Self {
   33|      1|        Self([
   34|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   35|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   36|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   37|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   38|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   39|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   40|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   41|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   42|      1|        ])
   43|      1|    }

_RNvMNtCsjhTDs2LGHe5_11rand_chacha4gutsNtB2_6ChaCha3new:
   72|    142|    pub fn new(key: &[u8; 32], nonce: &[u8]) -> Self {
   73|    142|        init_chacha(key, nonce)
   74|    142|    }
_RNvMNtCsjhTDs2LGHe5_11rand_chacha4gutsNtB2_6ChaCha7refill4:
   84|  36.1k|    pub fn refill4(&mut self, drounds: u32, out: &mut [u8; BUFSZ]) {
   85|  36.1k|        refill_wide(self, drounds, out)
   86|  36.1k|    }
_RINvNtCsjhTDs2LGHe5_11rand_chacha4guts5roundINtNtCseaCfzRqAQoh_10ppv_lite864soft2x2INtNtNtNtBL_6x86_644sse24avx212u32x4x2_avx2NtB1q_4NoNIENtB1o_2G0EEB4_:
   43|   434k|pub(crate) fn round<V: ArithOps + BitOps32>(mut x: State<V>) -> State<V> {
   44|   434k|    x.a += x.b;
   45|   434k|    x.d = (x.d ^ x.a).rotate_each_word_right16();
   46|   434k|    x.c += x.d;
   47|   434k|    x.b = (x.b ^ x.c).rotate_each_word_right20();
   48|   434k|    x.a += x.b;
   49|   434k|    x.d = (x.d ^ x.a).rotate_each_word_right24();
   50|   434k|    x.c += x.d;
   51|   434k|    x.b = (x.b ^ x.c).rotate_each_word_right25();
   52|   434k|    x
   53|   434k|}
_RINvNtCsjhTDs2LGHe5_11rand_chacha4guts11diagonalizeINtNtCseaCfzRqAQoh_10ppv_lite864soft2x2INtNtNtNtBS_6x86_644sse24avx212u32x4x2_avx2NtB1x_4NoNIENtB1v_2G0EEB4_:
   56|   217k|pub(crate) fn diagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   57|   217k|    x.b = x.b.shuffle_lane_words3012();
   58|   217k|    x.c = x.c.shuffle_lane_words2301();
   59|   217k|    x.d = x.d.shuffle_lane_words1230();
   60|   217k|    x
   61|   217k|}
_RINvNtCsjhTDs2LGHe5_11rand_chacha4guts13undiagonalizeINtNtCseaCfzRqAQoh_10ppv_lite864soft2x2INtNtNtNtBU_6x86_644sse24avx212u32x4x2_avx2NtB1z_4NoNIENtB1x_2G0EEB4_:
   63|   217k|pub(crate) fn undiagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   64|   217k|    x.b = x.b.shuffle_lane_words1230();
   65|   217k|    x.c = x.c.shuffle_lane_words2301();
   66|   217k|    x.d = x.d.shuffle_lane_words3012();
   67|   217k|    x
   68|   217k|}
_RINvMNtCsjhTDs2LGHe5_11rand_chacha4gutsNtB3_6ChaCha5pos64INtNtCseaCfzRqAQoh_10ppv_lite866x86_6411Avx2MachineNtBW_4NoNIEEB5_:
   77|  72.3k|    fn pos64<M: Machine>(&self, m: M) -> u64 {
   78|  72.3k|        let d: M::u32x4 = m.unpack(self.d);
   79|  72.3k|        ((d.extract(1) as u64) << 32) | d.extract(0) as u64
   80|  72.3k|    }
_RINvNtCsjhTDs2LGHe5_11rand_chacha4guts16refill_wide_implINtNtCseaCfzRqAQoh_10ppv_lite866x86_6411Avx2MachineNtBV_4NoNIEEB4_:
  116|  36.1k|fn refill_wide_impl<Mach: Machine>(
  117|  36.1k|    m: Mach, state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ],
  118|  36.1k|) {
  119|  36.1k|    let k = m.vec([0x6170_7865, 0x3320_646e, 0x7962_2d32, 0x6b20_6574]);
  120|  36.1k|    let mut pos = state.pos64(m);
  121|  36.1k|    let d0: Mach::u32x4 = m.unpack(state.d);
  122|  36.1k|    pos = pos.wrapping_add(1);
  123|  36.1k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  124|  36.1k|    pos = pos.wrapping_add(1);
  125|  36.1k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  126|  36.1k|    pos = pos.wrapping_add(1);
  127|  36.1k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  128|  36.1k|
  129|  36.1k|    let b = m.unpack(state.b);
  130|  36.1k|    let c = m.unpack(state.c);
  131|  36.1k|    let mut x = State {
  132|  36.1k|        a: Mach::u32x4x4::from_lanes([k, k, k, k]),
  133|  36.1k|        b: Mach::u32x4x4::from_lanes([b, b, b, b]),
  134|  36.1k|        c: Mach::u32x4x4::from_lanes([c, c, c, c]),
  135|  36.1k|        d: m.unpack(Mach::u32x4x4::from_lanes([d0, d1, d2, d3]).into()),
  136|  36.1k|    };
  137|   217k|    for _ in 0..drounds {
  138|   217k|        x = round(x);
  139|   217k|        x = undiagonalize(round(diagonalize(x)));
  140|   217k|    }
  141|  36.1k|    let mut pos = state.pos64(m);
  142|  36.1k|    let d0: Mach::u32x4 = m.unpack(state.d);
  143|  36.1k|    pos = pos.wrapping_add(1);
  144|  36.1k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  145|  36.1k|    pos = pos.wrapping_add(1);
  146|  36.1k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  147|  36.1k|    pos = pos.wrapping_add(1);
  148|  36.1k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  149|  36.1k|    pos = pos.wrapping_add(1);
  150|  36.1k|    let d4 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  151|  36.1k|
  152|  36.1k|    let (a, b, c, d) = (
  153|  36.1k|        x.a.to_lanes(),
  154|  36.1k|        x.b.to_lanes(),
  155|  36.1k|        x.c.to_lanes(),
  156|  36.1k|        x.d.to_lanes(),
  157|  36.1k|    );
  158|  36.1k|    let sb = m.unpack(state.b);
  159|  36.1k|    let sc = m.unpack(state.c);
  160|  36.1k|    let sd = [m.unpack(state.d), d1, d2, d3];
  161|  36.1k|    state.d = d4.into();
  162|  36.1k|    let mut words = out.chunks_exact_mut(16);
  163|   144k|    for ((((&a, &b), &c), &d), &sd) in a.iter().zip(&b).zip(&c).zip(&d).zip(&sd) {
  164|   144k|        (a + k).write_le(words.next().unwrap());
  165|   144k|        (b + sb).write_le(words.next().unwrap());
  166|   144k|        (c + sc).write_le(words.next().unwrap());
  167|   144k|        (d + sd).write_le(words.next().unwrap());
  168|   144k|    }
  169|  36.1k|}
_RNvNtCsjhTDs2LGHe5_11rand_chacha4guts10read_u32le:
  229|    284|fn read_u32le(xs: &[u8]) -> u32 {
  230|    284|    assert_eq!(xs.len(), 4);
  231|    284|    u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24)
  232|    284|}
_RINvNvNtCsjhTDs2LGHe5_11rand_chacha4guts11refill_wide7fn_implINtNtCseaCfzRqAQoh_10ppv_lite866x86_6411Avx2MachineNtB10_4NoNIEEB6_:
  172|  36.1k|    fn refill_wide(state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ]) {
  173|  36.1k|        refill_wide_impl(m, state, drounds, out);
  174|  36.1k|    }
_RINvNvNtCsjhTDs2LGHe5_11rand_chacha4guts11init_chacha7fn_implINtNtCseaCfzRqAQoh_10ppv_lite866x86_6410SseMachineNtB10_5YesS3NtB10_5YesS4NtB10_4NoNIEEB6_:
  235|    142|    fn init_chacha(key: &[u8; 32], nonce: &[u8]) -> ChaCha {
  236|    142|        let ctr_nonce = [
  237|       |            0,
  238|    142|            if nonce.len() == 12 {
  239|      0|                read_u32le(&nonce[0..4])
  240|       |            } else {
  241|    142|                0
  242|       |            },
  243|    142|            read_u32le(&nonce[nonce.len() - 8..nonce.len() - 4]),
  244|    142|            read_u32le(&nonce[nonce.len() - 4..]),
  245|    142|        ];
  246|    142|        let key0: Mach::u32x4 = m.read_le(&key[..16]);
  247|    142|        let key1: Mach::u32x4 = m.read_le(&key[16..]);
  248|    142|        ChaCha {
  249|    142|            b: key0.into(),
  250|    142|            c: key1.into(),
  251|    142|            d: ctr_nonce.into(),
  252|    142|        }

_RNCNvXs0_NtCs8qzC7aBl1xk_9rand_core5blockINtB7_8BlockRngINtNtNtNtCsNnZqS58YXU_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCsjhTDs2LGHe5_11rand_chacha6chacha12ChaCha12CoreNtNtB9_2os5OsRngEENtB9_7RngCore8next_u640Cs5iIAVsTbYw4_8oxrdfxml:
  198|  1.15M|        let read_u64 = |results: &[u32], index| {
  199|  1.15M|            let data = &results[index..=index + 1];
  200|  1.15M|            u64::from(data[1]) << 32 | u64::from(data[0])
  201|  1.15M|        };
_RNvXs0_NtCs8qzC7aBl1xk_9rand_core5blockINtB5_8BlockRngINtNtNtNtCsNnZqS58YXU_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCsjhTDs2LGHe5_11rand_chacha6chacha12ChaCha12CoreNtNtB7_2os5OsRngEENtB7_7RngCore8next_u64Cs5iIAVsTbYw4_8oxrdfxml:
  197|  1.15M|    fn next_u64(&mut self) -> u64 {
  198|  1.15M|        let read_u64 = |results: &[u32], index| {
  199|       |            let data = &results[index..=index + 1];
  200|       |            u64::from(data[1]) << 32 | u64::from(data[0])
  201|       |        };
  202|       |
  203|  1.15M|        let len = self.results.as_ref().len();
  204|  1.15M|
  205|  1.15M|        let index = self.index;
  206|  1.15M|        if index < len - 1 {
  207|  1.12M|            self.index += 2;
  208|  1.12M|            // Read an u64 from the current index
  209|  1.12M|            read_u64(self.results.as_ref(), index)
  210|  36.1k|        } else if index >= len {
  211|  36.1k|            self.generate_and_set(2);
  212|  36.1k|            read_u64(self.results.as_ref(), 0)
  213|       |        } else {
  214|      0|            let x = u64::from(self.results.as_ref()[len - 1]);
  215|      0|            self.generate_and_set(1);
  216|      0|            let y = u64::from(self.results.as_ref()[0]);
  217|      0|            (y << 32) | x
  218|       |        }
  219|  1.15M|    }
_RNvMs_NtCs8qzC7aBl1xk_9rand_core5blockINtB4_8BlockRngINtNtNtNtCsNnZqS58YXU_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCsjhTDs2LGHe5_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE16generate_and_setBY_:
  174|  36.1k|    pub fn generate_and_set(&mut self, index: usize) {
  175|  36.1k|        assert!(index < self.results.as_ref().len());
  176|  36.1k|        self.core.generate(&mut self.results);
  177|  36.1k|        self.index = index;
  178|  36.1k|    }
_RNvMs_NtCs8qzC7aBl1xk_9rand_core5blockINtB4_8BlockRngINtNtNtNtCsNnZqS58YXU_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCsjhTDs2LGHe5_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE3newBY_:
  145|      1|    pub fn new(core: R) -> BlockRng<R> {
  146|      1|        let results_empty = R::Results::default();
  147|      1|        BlockRng {
  148|      1|            core,
  149|      1|            index: results_empty.as_ref().len(),
  150|      1|            results: results_empty,
  151|      1|        }
  152|      1|    }

_RINvYNtNtCsjhTDs2LGHe5_11rand_chacha6chacha12ChaCha12CoreNtCs8qzC7aBl1xk_9rand_core11SeedableRng8from_rngNtNtBV_2os5OsRngECsNnZqS58YXU_4rand:
  390|      1|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|      1|        let mut seed = Self::Seed::default();
  392|      1|        rng.try_fill_bytes(seed.as_mut())?;
  393|      1|        Ok(Self::from_seed(seed))
  394|      1|    }
_RINvYNtNtCsjhTDs2LGHe5_11rand_chacha6chacha12ChaCha12CoreNtCs8qzC7aBl1xk_9rand_core11SeedableRng8from_rngQNtNtBV_2os5OsRngECsNnZqS58YXU_4rand:
  390|    141|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|    141|        let mut seed = Self::Seed::default();
  392|    141|        rng.try_fill_bytes(seed.as_mut())?;
  393|    141|        Ok(Self::from_seed(seed))
  394|    141|    }
_RNvXs_Cs8qzC7aBl1xk_9rand_coreQNtNtB4_2os5OsRngNtB4_7RngCore14try_fill_bytesCsNnZqS58YXU_4rand:
  441|    141|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
  442|    141|        (**self).try_fill_bytes(dest)
  443|    141|    }

_RNvXs_NtCs8qzC7aBl1xk_9rand_core2osNtB4_5OsRngNtB6_7RngCore14try_fill_bytes:
   67|    142|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
   68|    142|        getrandom(dest)?;
   69|    142|        Ok(())
   70|    142|    }

_RNvXNtCs18jffE8B0ng_9thiserror7displayRNtCsa9OvQYE6bC8_5oxiri13IriParseErrorNtB2_9AsDisplay10as_displayCsjHb8aGRHKzq_5oxrdf:
   19|   117k|    fn as_display(&'a self) -> Self::Target {
   20|   117k|        *self
   21|   117k|    }
_RNvXNtCs18jffE8B0ng_9thiserror7displayRNtNtCs3OstG5Tqy1X_5alloc6string6StringNtB2_9AsDisplay10as_displayCsjHb8aGRHKzq_5oxrdf:
   19|   600k|    fn as_display(&'a self) -> Self::Target {
   20|   600k|        *self
   21|   600k|    }

_RNvNvNtNtCsNnZqS58YXU_4rand4rngs6thread14THREAD_RNG_KEY6___initB7_:
   82|      1|            fn __init() -> $t { $init }
_RNvNvNtNtCsNnZqS58YXU_4rand4rngs6thread14THREAD_RNG_KEY7___getitB7_:
   85|   578k|            unsafe fn __getit(
   86|   578k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   87|   578k|            ) -> $crate::option::Option<&'static $t> {
   88|   578k|                #[thread_local]
   89|   578k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   90|   578k|                    $crate::thread::local_impl::Key::<$t>::new();
   91|   578k|
   92|   578k|                unsafe {
   93|   578k|                    __KEY.get(move || {
   94|       |                        if let $crate::option::Option::Some(init) = init {
   95|       |                            if let $crate::option::Option::Some(value) = init.take() {
   96|       |                                return value;
   97|       |                            } else if $crate::cfg!(debug_assertions) {
   98|       |                                $crate::unreachable!("missing default value");
   99|       |                            }
  100|       |                        }
  101|       |                        __init()
  102|   578k|                    })
  103|   578k|                }
  104|   578k|            }
_RNCNvNvNtNtCsNnZqS58YXU_4rand4rngs6thread14THREAD_RNG_KEY7___getit0B9_:
   93|      1|                    __KEY.get(move || {
   94|      1|                        if let $crate::option::Option::Some(init) = init {
   95|      0|                            if let $crate::option::Option::Some(value) = init.take() {
   96|      0|                                return value;
   97|      0|                            } else if $crate::cfg!(debug_assertions) {
   98|      0|                                $crate::unreachable!("missing default value");
   99|      0|                            }
  100|      1|                        }
  101|      1|                        __init()
  102|       |                    })

_RNvCsXnvbX6AWbe_7rdf_xml5parse:
    8|  29.4k|fn parse(data: &[u8], unchecked: bool) -> (Vec<Triple>, Vec<String>) {
    9|  29.4k|    let mut triples = Vec::new();
   10|  29.4k|    let mut errors = Vec::new();
   11|  29.4k|    let mut parser = RdfXmlParser::new();
   12|  29.4k|    if unchecked {
   13|    541|        parser = parser.unchecked();
   14|  28.9k|    }
   15|  1.54M|    for result in parser.parse_slice(data) {
   16|  1.54M|        match result {
   17|   284k|            Ok(triple) => triples.push(triple),
   18|  1.26M|            Err(error) => errors.push(error.to_string()),
   19|       |        }
   20|       |    }
   21|  29.4k|    (triples, errors)
   22|  29.4k|}
_RNvCsXnvbX6AWbe_7rdf_xml24count_triple_blank_nodes:
   24|  1.46k|fn count_triple_blank_nodes(triple: &Triple) -> usize {
   25|  1.46k|    (match &triple.subject {
   26|  1.46k|        Subject::BlankNode(_) => 1,
   27|      0|        Subject::Triple(t) => count_triple_blank_nodes(t),
   28|      0|        _ => 0,
   29|  1.46k|    }) + (match &triple.object {
   30|      8|        Term::BlankNode(_) => 1,
   31|      0|        Term::Triple(t) => count_triple_blank_nodes(t),
   32|  1.45k|        _ => 0,
   33|       |    })
   34|  1.46k|}

_RNvMNtCsjHb8aGRHKzq_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCsXnvbX6AWbe_7rdf_xml:
   88|   551k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|   551k|        BlankNodeRef(match &self.0 {
   90|  13.2k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|   538k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|   538k|                id: *id,
   93|   538k|                str: str.as_str(),
   94|   538k|            },
   95|       |        })
   96|   551k|    }
_RNvMs1_NtCsjHb8aGRHKzq_5oxrdf10blank_nodeNtB5_12BlankNodeRef10into_ownedCsXnvbX6AWbe_7rdf_xml:
  207|   242k|    pub fn into_owned(self) -> BlankNode {
  208|   242k|        BlankNode(match self.0 {
  209|  3.31k|            BlankNodeRefContent::Named(id) => BlankNodeContent::Named(id.to_owned()),
  210|   238k|            BlankNodeRefContent::Anonymous { id, .. } => BlankNodeContent::Anonymous {
  211|   238k|                id,
  212|   238k|                str: IdStr::new(u128::from_ne_bytes(id)),
  213|   238k|            },
  214|       |        })
  215|   242k|    }
_RNvMs1_NtCsjHb8aGRHKzq_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCsXnvbX6AWbe_7rdf_xml:
  179|   248k|    pub const fn as_str(self) -> &'a str {
  180|   248k|        match self.0 {
  181|  4.11k|            BlankNodeRefContent::Named(id) => id,
  182|   243k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  183|       |        }
  184|   248k|    }
_RNvMs7_NtCsjHb8aGRHKzq_5oxrdf10blank_nodeNtB5_5IdStr3newCsXnvbX6AWbe_7rdf_xml:
  258|   238k|    fn new(id: u128) -> Self {
  259|   238k|        let mut str = [0; 32];
  260|   238k|        write!(&mut str[..], "{id:x}").unwrap();
  261|   238k|        Self(str)
  262|   238k|    }
_RNvMs7_NtCsjHb8aGRHKzq_5oxrdf10blank_nodeNtB5_5IdStr6as_strCsXnvbX6AWbe_7rdf_xml:
  265|   538k|    fn as_str(&self) -> &str {
  266|   538k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|   538k|        str::from_utf8(&self.0[..len]).unwrap()
  268|   538k|    }
_RNvMs7_NtCsjHb8aGRHKzq_5oxrdf10blank_nodeNtB5_5IdStr3newCs5iIAVsTbYw4_8oxrdfxml:
  258|   578k|    fn new(id: u128) -> Self {
  259|   578k|        let mut str = [0; 32];
  260|   578k|        write!(&mut str[..], "{id:x}").unwrap();
  261|   578k|        Self(str)
  262|   578k|    }
_RNvMs7_NtCsjHb8aGRHKzq_5oxrdf10blank_nodeNtB5_5IdStr6as_strCs5iIAVsTbYw4_8oxrdfxml:
  265|   578k|    fn as_str(&self) -> &str {
  266|   578k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|   578k|        str::from_utf8(&self.0[..len]).unwrap()
  268|   578k|    }
_RNvXs0_NtCsjHb8aGRHKzq_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCscdEvteftVc2_4core7default7Default7defaultCs5iIAVsTbYw4_8oxrdfxml:
  109|   231k|    fn default() -> Self {
  110|       |        // We ensure the ID does not start with a number to be also valid with RDF/XML
  111|   578k|        loop {
  112|   578k|            let id = random();
  113|   578k|            let str = IdStr::new(id);
  114|   578k|            if matches!(str.as_str().as_bytes().first(), Some(b'a'..=b'f')) {
  115|   231k|                return Self(BlankNodeContent::Anonymous {
  116|   231k|                    id: id.to_ne_bytes(),
  117|   231k|                    str,
  118|   231k|                });
  119|   347k|            }
  120|       |        }
  121|   231k|    }
_RINvMNtCsjHb8aGRHKzq_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   49|   258k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   50|   258k|        let id = id.into();
   51|   258k|        if let Some(numerical_id) = to_integer_id(&id) {
   52|   249k|            Self::new_from_unique_id(numerical_id)
   53|       |        } else {
   54|  9.81k|            Self(BlankNodeContent::Named(id))
   55|       |        }
   56|   258k|    }
_RNCNvMs7_NtCsjHb8aGRHKzq_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  266|  35.4M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
_RNvMNtCsjHb8aGRHKzq_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idB4_:
   62|   251k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|   251k|        Self(BlankNodeContent::Anonymous {
   64|   251k|            id: id.to_ne_bytes(),
   65|   251k|            str: IdStr::new(id),
   66|   251k|        })
   67|   251k|    }
_RNvMNtCsjHb8aGRHKzq_5oxrdf10blank_nodeNtB2_9BlankNode6as_refB4_:
   88|  2.71k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|  2.71k|        BlankNodeRef(match &self.0 {
   90|      0|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|  2.71k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|  2.71k|                id: *id,
   93|  2.71k|                str: str.as_str(),
   94|  2.71k|            },
   95|       |        })
   96|  2.71k|    }
_RNvMs1_NtCsjHb8aGRHKzq_5oxrdf10blank_nodeNtB5_12BlankNodeRef13new_uncheckedB7_:
  166|  1.35k|    pub fn new_unchecked(id: &'a str) -> Self {
  167|  1.35k|        if let Some(numerical_id) = to_integer_id(id) {
  168|  1.35k|            Self(BlankNodeRefContent::Anonymous {
  169|  1.35k|                id: numerical_id.to_ne_bytes(),
  170|  1.35k|                str: id,
  171|  1.35k|            })
  172|       |        } else {
  173|      0|            Self(BlankNodeRefContent::Named(id))
  174|       |        }
  175|  1.35k|    }
_RNvMs1_NtCsjHb8aGRHKzq_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strB7_:
  179|  4.70k|    pub const fn as_str(self) -> &'a str {
  180|  4.70k|        match self.0 {
  181|      0|            BlankNodeRefContent::Named(id) => id,
  182|  4.70k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  183|       |        }
  184|  4.70k|    }
_RNvMs1_NtCsjHb8aGRHKzq_5oxrdf10blank_nodeNtB5_12BlankNodeRef9unique_idB7_:
  199|  6.82k|    pub const fn unique_id(&self) -> Option<u128> {
  200|  6.82k|        match self.0 {
  201|      0|            BlankNodeRefContent::Named(_) => None,
  202|  6.82k|            BlankNodeRefContent::Anonymous { id, .. } => Some(u128::from_ne_bytes(id)),
  203|       |        }
  204|  6.82k|    }
_RNvMs7_NtCsjHb8aGRHKzq_5oxrdf10blank_nodeNtB5_5IdStr3newB7_:
  258|   251k|    fn new(id: u128) -> Self {
  259|   251k|        let mut str = [0; 32];
  260|   251k|        write!(&mut str[..], "{id:x}").unwrap();
  261|   251k|        Self(str)
  262|   251k|    }
_RNvMs7_NtCsjHb8aGRHKzq_5oxrdf10blank_nodeNtB5_5IdStr6as_strB7_:
  265|  2.71k|    fn as_str(&self) -> &str {
  266|  2.71k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|  2.71k|        str::from_utf8(&self.0[..len]).unwrap()
  268|  2.71k|    }
_RNvNtCsjHb8aGRHKzq_5oxrdf10blank_node13to_integer_idB3_:
  331|   260k|fn to_integer_id(id: &str) -> Option<u128> {
  332|   260k|    let digits = id.as_bytes();
  333|   260k|    let mut value: u128 = 0;
  334|   260k|    if let None | Some(b'0') = digits.first() {
  335|      0|        return None; // No empty string or leading zeros
  336|   260k|    }
  337|  8.10M|    for digit in digits {
  338|  7.85M|        value = value.checked_mul(16)?.checked_add(
  339|  7.85M|            match *digit {
  340|  7.85M|                b'0'..=b'9' => digit - b'0',
  341|  3.20M|                b'a'..=b'f' => digit - b'a' + 10,
  342|  8.78k|                _ => return None,
  343|       |            }
  344|  7.84M|            .into(),
  345|      0|        )?;
  346|       |    }
  347|   250k|    Some(value)
  348|   260k|}

_RINvMsb_NtCsjHb8aGRHKzq_5oxrdf7datasetNtB6_12GraphViewMut6insertRNtNtB8_6triple6TripleECsXnvbX6AWbe_7rdf_xml:
 1371|  2.74k|    pub fn insert<'b>(&mut self, triple: impl Into<TripleRef<'b>>) -> bool {
 1372|  2.74k|        let triple = self.encode_triple(triple.into());
 1373|  2.74k|        self.dataset.insert_encoded((
 1374|  2.74k|            triple.subject,
 1375|  2.74k|            triple.predicate,
 1376|  2.74k|            triple.object,
 1377|  2.74k|            self.graph_name.clone(),
 1378|  2.74k|        ))
 1379|  2.74k|    }
_RINvXsd_NtCsjHb8aGRHKzq_5oxrdf7datasetNtB6_12GraphViewMutINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendRNtNtB8_6triple6TripleE6extendINtNtNtB12_5slice4iter4IterB1N_EECsXnvbX6AWbe_7rdf_xml:
 1509|    948|    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
 1510|  3.69k|        for t in iter {
 1511|  2.74k|            self.insert(t);
 1512|  2.74k|        }
 1513|    948|    }
_RNvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB2_7Dataset4iter:
  169|    474|    pub fn iter(&self) -> Iter<'_> {
  170|    474|        let iter = self.spog.iter();
  171|    474|        Iter {
  172|    474|            dataset: self,
  173|    474|            inner: iter,
  174|    474|        }
  175|    474|    }
_RNvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB2_7Dataset3len:
  350|    948|    pub fn len(&self) -> usize {
  351|    948|        self.gspo.len()
  352|    948|    }
_RNvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB2_7Dataset14insert_encoded:
  365|  5.45k|    fn insert_encoded(
  366|  5.45k|        &mut self,
  367|  5.45k|        quad: (
  368|  5.45k|            InternedSubject,
  369|  5.45k|            InternedNamedNode,
  370|  5.45k|            InternedTerm,
  371|  5.45k|            InternedGraphName,
  372|  5.45k|        ),
  373|  5.45k|    ) -> bool {
  374|  5.45k|        let (s, p, o, g) = quad;
  375|  5.45k|        self.gspo.insert((g.clone(), s.clone(), p, o.clone()));
  376|  5.45k|        self.gpos.insert((g.clone(), p, o.clone(), s.clone()));
  377|  5.45k|        self.gosp.insert((g.clone(), o.clone(), s.clone(), p));
  378|  5.45k|        self.spog.insert((s.clone(), p, o.clone(), g.clone()));
  379|  5.45k|        self.posg.insert((p, o.clone(), s.clone(), g.clone()));
  380|  5.45k|        self.ospg.insert((o, s, p, g))
  381|  5.45k|    }
_RNvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB2_7Dataset5clear:
  411|    948|    pub fn clear(&mut self) {
  412|    948|        self.gspo.clear();
  413|    948|        self.gpos.clear();
  414|    948|        self.gosp.clear();
  415|    948|        self.spog.clear();
  416|    948|        self.posg.clear();
  417|    948|        self.ospg.clear();
  418|    948|    }
_RNvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB2_7Dataset12encoded_quad:
  437|  1.35k|    fn encoded_quad(
  438|  1.35k|        &self,
  439|  1.35k|        quad: QuadRef<'_>,
  440|  1.35k|    ) -> Option<(
  441|  1.35k|        InternedSubject,
  442|  1.35k|        InternedNamedNode,
  443|  1.35k|        InternedTerm,
  444|  1.35k|        InternedGraphName,
  445|  1.35k|    )> {
  446|  1.35k|        Some((
  447|  1.35k|            self.encoded_subject(quad.subject)?,
  448|  1.35k|            self.encoded_named_node(quad.predicate)?,
  449|  1.35k|            self.encoded_term(quad.object)?,
  450|  1.35k|            self.encoded_graph_name(quad.graph_name)?,
  451|       |        ))
  452|  1.35k|    }
_RNvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB2_7Dataset11decode_spog:
  479|  1.35k|    fn decode_spog(
  480|  1.35k|        &self,
  481|  1.35k|        quad: (
  482|  1.35k|            &InternedSubject,
  483|  1.35k|            &InternedNamedNode,
  484|  1.35k|            &InternedTerm,
  485|  1.35k|            &InternedGraphName,
  486|  1.35k|        ),
  487|  1.35k|    ) -> QuadRef<'_> {
  488|  1.35k|        QuadRef {
  489|  1.35k|            subject: quad.0.decode_from(&self.interner),
  490|  1.35k|            predicate: quad.1.decode_from(&self.interner),
  491|  1.35k|            object: quad.2.decode_from(&self.interner),
  492|  1.35k|            graph_name: quad.3.decode_from(&self.interner),
  493|  1.35k|        }
  494|  1.35k|    }
_RNvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB2_7Dataset12canonicalize:
  539|    948|    pub fn canonicalize(&mut self, algorithm: CanonicalizationAlgorithm) {
  540|    948|        let bnode_mapping = self.canonicalize_interned_blank_nodes(algorithm);
  541|    948|        let new_quads = self.map_blank_nodes(&bnode_mapping);
  542|    948|        self.clear();
  543|  3.65k|        for quad in new_quads {
  544|  2.70k|            self.insert_encoded(quad);
  545|  2.70k|        }
  546|    948|    }
_RNvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB2_7Dataset33canonicalize_interned_blank_nodes:
  562|    948|    fn canonicalize_interned_blank_nodes(
  563|    948|        &self,
  564|    948|        algorithm: CanonicalizationAlgorithm,
  565|    948|    ) -> HashMap<InternedBlankNode, BlankNode> {
  566|    948|        match algorithm {
  567|    948|            CanonicalizationAlgorithm::Unstable => {
  568|    948|                let bnodes = self.blank_nodes();
  569|    948|                let quads_per_blank_node = self.quads_per_blank_nodes();
  570|    948|                let (hash, partition) = self.hash_bnodes(
  571|    948|                    bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
  572|    948|                    &quads_per_blank_node,
  573|    948|                );
  574|    948|                self.distinguish(hash, &partition, &quads_per_blank_node)
  575|    948|                    .into_iter()
  576|    948|                    .map(|(from, to)| (from, BlankNode::new_from_unique_id(to.into())))
  577|    948|                    .collect()
  578|    948|            }
  579|    948|        }
  580|    948|    }
_RNvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB2_7Dataset11blank_nodes:
  582|    948|    fn blank_nodes(&self) -> HashSet<InternedBlankNode> {
  583|    948|        let mut bnodes = HashSet::new();
  584|  3.65k|        for (g, s, _, o) in &self.gspo {
  585|  2.70k|            if let InternedSubject::BlankNode(bnode) = s {
  586|  2.70k|                bnodes.insert(*bnode);
  587|  2.70k|            }
  588|       |            #[cfg(feature = "rdf-star")]
  589|  2.70k|            if let InternedSubject::Triple(triple) = s {
  590|      0|                Self::triple_blank_nodes(triple, &mut bnodes);
  591|  2.70k|            }
  592|  2.70k|            if let InternedTerm::BlankNode(bnode) = o {
  593|      8|                bnodes.insert(*bnode);
  594|  2.69k|            }
  595|       |            #[cfg(feature = "rdf-star")]
  596|  2.70k|            if let InternedTerm::Triple(triple) = o {
  597|      0|                Self::triple_blank_nodes(triple, &mut bnodes);
  598|  2.70k|            }
  599|  2.70k|            if let InternedGraphName::BlankNode(bnode) = g {
  600|      0|                bnodes.insert(*bnode);
  601|  2.70k|            }
  602|       |        }
  603|    948|        bnodes
  604|    948|    }
_RNvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB2_7Dataset21quads_per_blank_nodes:
  620|    948|    fn quads_per_blank_nodes(&self) -> QuadsPerBlankNode {
  621|    948|        let mut map: HashMap<_, Vec<_>> = HashMap::new();
  622|  3.65k|        for quad in &self.spog {
  623|  2.70k|            if let InternedSubject::BlankNode(bnode) = &quad.0 {
  624|  2.70k|                map.entry(*bnode).or_default().push(quad.clone());
  625|  2.70k|            }
  626|       |            #[cfg(feature = "rdf-star")]
  627|  2.70k|            if let InternedSubject::Triple(t) = &quad.0 {
  628|      0|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  629|  2.70k|            }
  630|  2.70k|            if let InternedTerm::BlankNode(bnode) = &quad.2 {
  631|      8|                map.entry(*bnode).or_default().push(quad.clone());
  632|  2.69k|            }
  633|       |            #[cfg(feature = "rdf-star")]
  634|  2.70k|            if let InternedTerm::Triple(t) = &quad.2 {
  635|      0|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  636|  2.70k|            }
  637|  2.70k|            if let InternedGraphName::BlankNode(bnode) = &quad.3 {
  638|      0|                map.entry(*bnode).or_default().push(quad.clone());
  639|  2.70k|            }
  640|       |        }
  641|    948|        map
  642|    948|    }
_RNvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB2_7Dataset11hash_bnodes:
  669|  8.29k|    fn hash_bnodes(
  670|  8.29k|        &self,
  671|  8.29k|        mut hashes: HashMap<InternedBlankNode, u64>,
  672|  8.29k|        quads_per_blank_node: &QuadsPerBlankNode,
  673|  8.29k|    ) -> (
  674|  8.29k|        HashMap<InternedBlankNode, u64>,
  675|  8.29k|        Vec<(u64, Vec<InternedBlankNode>)>,
  676|  8.29k|    ) {
  677|  8.29k|        let mut to_hash = Vec::new();
  678|  8.29k|        let mut to_do = hashes
  679|  8.29k|            .keys()
  680|  8.29k|            .map(|bnode| (*bnode, true))
  681|  8.29k|            .collect::<HashMap<_, _>>();
  682|  8.29k|        let mut partition = HashMap::<_, Vec<_>>::with_capacity(hashes.len());
  683|  8.29k|        let mut old_partition_count = usize::MAX;
  684|  24.8k|        while old_partition_count != partition.len() {
  685|  16.5k|            old_partition_count = partition.len();
  686|  16.5k|            partition.clear();
  687|  16.5k|            let mut new_hashes = hashes.clone();
  688|  60.4k|            for bnode in hashes.keys() {
  689|  60.4k|                let hash = if to_do.contains_key(bnode) {
  690|  61.3k|                    for (s, p, o, g) in &quads_per_blank_node[bnode] {
  691|  61.3k|                        to_hash.push((
  692|  61.3k|                            self.hash_subject(s, *bnode, &hashes),
  693|  61.3k|                            self.hash_named_node(*p),
  694|  61.3k|                            self.hash_term(o, *bnode, &hashes),
  695|  61.3k|                            self.hash_graph_name(g, *bnode, &hashes),
  696|  61.3k|                        ));
  697|  61.3k|                    }
  698|  60.4k|                    to_hash.sort_unstable();
  699|  60.4k|                    let hash = Self::hash_tuple((&to_hash, hashes[bnode]));
  700|  60.4k|                    to_hash.clear();
  701|  60.4k|                    if hash == hashes[bnode] {
  702|      0|                        to_do.insert(*bnode, false);
  703|  60.4k|                    } else {
  704|  60.4k|                        new_hashes.insert(*bnode, hash);
  705|  60.4k|                    }
  706|  60.4k|                    hash
  707|       |                } else {
  708|      0|                    hashes[bnode]
  709|       |                };
  710|  60.4k|                partition.entry(hash).or_default().push(*bnode);
  711|       |            }
  712|  16.5k|            hashes = new_hashes;
  713|       |        }
  714|  8.29k|        let mut partition: Vec<_> = partition.into_iter().collect();
  715|  8.29k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));
  716|  8.29k|        (hashes, partition)
  717|  8.29k|    }
_RNvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB2_7Dataset15hash_named_node:
  719|  61.3k|    fn hash_named_node(&self, node: InternedNamedNode) -> u64 {
  720|  61.3k|        Self::hash_tuple(node.decode_from(&self.interner))
  721|  61.3k|    }
_RNvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB2_7Dataset15hash_blank_node:
  723|  61.3k|    fn hash_blank_node(
  724|  61.3k|        node: InternedBlankNode,
  725|  61.3k|        current_blank_node: InternedBlankNode,
  726|  61.3k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  727|  61.3k|    ) -> u64 {
  728|  61.3k|        if node == current_blank_node {
  729|  61.3k|            u64::MAX
  730|       |        } else {
  731|     32|            bnodes_hash[&node]
  732|       |        }
  733|  61.3k|    }
_RNvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB2_7Dataset12hash_subject:
  735|  61.3k|    fn hash_subject(
  736|  61.3k|        &self,
  737|  61.3k|        node: &InternedSubject,
  738|  61.3k|        current_blank_node: InternedBlankNode,
  739|  61.3k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  740|  61.3k|    ) -> u64 {
  741|  61.3k|        match node {
  742|      0|            InternedSubject::NamedNode(node) => Self::hash_tuple(node.decode_from(&self.interner)),
  743|  61.3k|            InternedSubject::BlankNode(bnode) => {
  744|  61.3k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  745|       |            }
  746|       |            #[cfg(feature = "rdf-star")]
  747|      0|            InternedSubject::Triple(triple) => {
  748|      0|                self.hash_triple(triple, current_blank_node, bnodes_hash)
  749|       |            }
  750|       |        }
  751|  61.3k|    }
_RNvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB2_7Dataset9hash_term:
  753|  61.3k|    fn hash_term(
  754|  61.3k|        &self,
  755|  61.3k|        term: &InternedTerm,
  756|  61.3k|        current_blank_node: InternedBlankNode,
  757|  61.3k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  758|  61.3k|    ) -> u64 {
  759|  61.3k|        match term {
  760|  60.4k|            InternedTerm::NamedNode(node) => Self::hash_tuple(node.decode_from(&self.interner)),
  761|     32|            InternedTerm::BlankNode(bnode) => {
  762|     32|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  763|       |            }
  764|    904|            InternedTerm::Literal(literal) => Self::hash_tuple(literal.decode_from(&self.interner)),
  765|       |            #[cfg(feature = "rdf-star")]
  766|      0|            InternedTerm::Triple(triple) => {
  767|      0|                self.hash_triple(triple, current_blank_node, bnodes_hash)
  768|       |            }
  769|       |        }
  770|  61.3k|    }
_RNvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB2_7Dataset15hash_graph_name:
  772|  61.3k|    fn hash_graph_name(
  773|  61.3k|        &self,
  774|  61.3k|        graph_name: &InternedGraphName,
  775|  61.3k|        current_blank_node: InternedBlankNode,
  776|  61.3k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  777|  61.3k|    ) -> u64 {
  778|  61.3k|        match graph_name {
  779|      0|            InternedGraphName::NamedNode(node) => {
  780|      0|                Self::hash_tuple(node.decode_from(&self.interner))
  781|       |            }
  782|      0|            InternedGraphName::BlankNode(bnode) => {
  783|      0|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  784|       |            }
  785|  61.3k|            InternedGraphName::DefaultGraph => 0,
  786|       |        }
  787|  61.3k|    }
_RNvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB2_7Dataset11distinguish:
  809|  8.29k|    fn distinguish(
  810|  8.29k|        &self,
  811|  8.29k|        hash: HashMap<InternedBlankNode, u64>,
  812|  8.29k|        partition: &[(u64, Vec<InternedBlankNode>)],
  813|  8.29k|        quads_per_blank_node: &QuadsPerBlankNode,
  814|  8.29k|    ) -> HashMap<InternedBlankNode, u64> {
  815|  8.29k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
  816|  8.29k|        if let Some(b_prime) = b_prime {
  817|  3.18k|            b_prime
  818|  3.18k|                .iter()
  819|  3.18k|                .map(|b| {
  820|       |                    let mut hash_prime = hash.clone();
  821|       |                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  822|       |                    let (hash_prime_prime, partition_prime) =
  823|       |                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  824|       |                    self.distinguish(hash_prime_prime, &partition_prime, quads_per_blank_node)
  825|  3.18k|                })
  826|  3.18k|                .reduce(|a, b| {
  827|       |                    let mut a_hashes = a.values().collect::<Vec<_>>();
  828|       |                    a_hashes.sort();
  829|       |                    let mut b_hashes = a.values().collect::<Vec<_>>();
  830|       |                    b_hashes.sort();
  831|       |                    if a_hashes <= b_hashes {
  832|       |                        a
  833|       |                    } else {
  834|       |                        b
  835|       |                    }
  836|  3.18k|                })
  837|  3.18k|                .unwrap_or_default()
  838|       |        } else {
  839|  5.11k|            hash
  840|       |        }
  841|  8.29k|    }
_RNvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB2_7Dataset15map_blank_nodes:
  844|    948|    fn map_blank_nodes(
  845|    948|        &mut self,
  846|    948|        bnode_mapping: &HashMap<InternedBlankNode, BlankNode>,
  847|    948|    ) -> Vec<(
  848|    948|        InternedSubject,
  849|    948|        InternedNamedNode,
  850|    948|        InternedTerm,
  851|    948|        InternedGraphName,
  852|    948|    )> {
  853|    948|        let old_quads: Vec<_> = self.spog.iter().cloned().collect();
  854|    948|        old_quads
  855|    948|            .into_iter()
  856|    948|            .map(|(s, p, o, g)| {
  857|       |                (
  858|       |                    match s {
  859|       |                        InternedSubject::NamedNode(_) => s,
  860|       |                        InternedSubject::BlankNode(bnode) => {
  861|       |                            InternedSubject::BlankNode(InternedBlankNode::encoded_into(
  862|       |                                bnode_mapping[&bnode].as_ref(),
  863|       |                                &mut self.interner,
  864|       |                            ))
  865|       |                        }
  866|       |                        #[cfg(feature = "rdf-star")]
  867|       |                        InternedSubject::Triple(triple) => {
  868|       |                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  869|       |                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  870|       |                                &mut self.interner,
  871|       |                            )))
  872|       |                        }
  873|       |                    },
  874|       |                    p,
  875|       |                    match o {
  876|       |                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  877|       |                        InternedTerm::BlankNode(bnode) => {
  878|       |                            InternedTerm::BlankNode(InternedBlankNode::encoded_into(
  879|       |                                bnode_mapping[&bnode].as_ref(),
  880|       |                                &mut self.interner,
  881|       |                            ))
  882|       |                        }
  883|       |                        #[cfg(feature = "rdf-star")]
  884|       |                        InternedTerm::Triple(triple) => {
  885|       |                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  886|       |                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  887|       |                                &mut self.interner,
  888|       |                            )))
  889|       |                        }
  890|       |                    },
  891|       |                    match g {
  892|       |                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  893|       |                        InternedGraphName::BlankNode(bnode) => {
  894|       |                            InternedGraphName::BlankNode(InternedBlankNode::encoded_into(
  895|       |                                bnode_mapping[&bnode].as_ref(),
  896|       |                                &mut self.interner,
  897|       |                            ))
  898|       |                        }
  899|       |                    },
  900|       |                )
  901|    948|            })
  902|    948|            .collect()
  903|    948|    }
_RNvXs_NtCsjHb8aGRHKzq_5oxrdf7datasetNtB4_7DatasetNtNtCscdEvteftVc2_4core3cmp9PartialEq2eq:
  932|    474|    fn eq(&self, other: &Self) -> bool {
  933|    474|        if self.len() != other.len() {
  934|      0|            return false;
  935|    474|        }
  936|  1.82k|        for q in self {
  937|  1.35k|            if !other.contains(q) {
  938|      0|                return false;
  939|  1.35k|            }
  940|       |        }
  941|    474|        true
  942|    474|    }
_RNvXs1_NtCsjHb8aGRHKzq_5oxrdf7datasetRNtB5_7DatasetNtNtNtNtCscdEvteftVc2_4core4iter6traits7collect12IntoIterator9into_iter:
  951|    474|    fn into_iter(self) -> Self::IntoIter {
  952|    474|        self.iter()
  953|    474|    }
_RNvMsb_NtCsjHb8aGRHKzq_5oxrdf7datasetNtB5_12GraphViewMut13encode_triple:
 1395|  2.74k|    fn encode_triple(&mut self, triple: TripleRef<'_>) -> InternedTriple {
 1396|  2.74k|        InternedTriple {
 1397|  2.74k|            subject: InternedSubject::encoded_into(triple.subject, &mut self.dataset.interner),
 1398|  2.74k|            predicate: InternedNamedNode::encoded_into(
 1399|  2.74k|                triple.predicate,
 1400|  2.74k|                &mut self.dataset.interner,
 1401|  2.74k|            ),
 1402|  2.74k|            object: InternedTerm::encoded_into(triple.object, &mut self.dataset.interner),
 1403|  2.74k|        }
 1404|  2.74k|    }
_RNvXsg_NtCsjHb8aGRHKzq_5oxrdf7datasetNtB5_4IterNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next:
 1551|  1.82k|    fn next(&mut self) -> Option<Self::Item> {
 1552|  1.82k|        self.inner
 1553|  1.82k|            .next()
 1554|  1.82k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))
 1555|  1.82k|    }
_RINvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB3_7Dataset9graph_mutNtNtB5_6triple12GraphNameRefEB5_:
  157|    948|    pub fn graph_mut<'a, 'b>(
  158|    948|        &'a mut self,
  159|    948|        graph_name: impl Into<GraphNameRef<'b>>,
  160|    948|    ) -> GraphViewMut<'a> {
  161|    948|        let graph_name = InternedGraphName::encoded_into(graph_name.into(), &mut self.interner);
  162|    948|        GraphViewMut {
  163|    948|            dataset: self,
  164|    948|            graph_name,
  165|    948|        }
  166|    948|    }
_RINvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB3_7Dataset8containsNtNtB5_6triple7QuadRefEB5_:
  341|  1.35k|    pub fn contains<'a>(&self, quad: impl Into<QuadRef<'a>>) -> bool {
  342|  1.35k|        if let Some(q) = self.encoded_quad(quad.into()) {
  343|  1.35k|            self.spog.contains(&q)
  344|       |        } else {
  345|      0|            false
  346|       |        }
  347|  1.35k|    }
_RINvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB3_7Dataset18encoded_named_nodeNtNtB5_10named_node12NamedNodeRefEB5_:
  454|  1.35k|    pub(super) fn encoded_named_node<'a>(
  455|  1.35k|        &self,
  456|  1.35k|        node: impl Into<NamedNodeRef<'a>>,
  457|  1.35k|    ) -> Option<InternedNamedNode> {
  458|  1.35k|        InternedNamedNode::encoded_from(node.into(), &self.interner)
  459|  1.35k|    }
_RINvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB3_7Dataset15encoded_subjectNtNtB5_6triple10SubjectRefEB5_:
  461|  1.35k|    pub(super) fn encoded_subject<'a>(
  462|  1.35k|        &self,
  463|  1.35k|        node: impl Into<SubjectRef<'a>>,
  464|  1.35k|    ) -> Option<InternedSubject> {
  465|  1.35k|        InternedSubject::encoded_from(node.into(), &self.interner)
  466|  1.35k|    }
_RINvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB3_7Dataset12encoded_termNtNtB5_6triple7TermRefEB5_:
  468|  1.35k|    pub(super) fn encoded_term<'a>(&self, term: impl Into<TermRef<'a>>) -> Option<InternedTerm> {
  469|  1.35k|        InternedTerm::encoded_from(term.into(), &self.interner)
  470|  1.35k|    }
_RINvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB3_7Dataset18encoded_graph_nameNtNtB5_6triple12GraphNameRefEB5_:
  472|  1.35k|    pub(super) fn encoded_graph_name<'a>(
  473|  1.35k|        &self,
  474|  1.35k|        graph_name: impl Into<GraphNameRef<'a>>,
  475|  1.35k|    ) -> Option<InternedGraphName> {
  476|  1.35k|        InternedGraphName::encoded_from(graph_name.into(), &self.interner)
  477|  1.35k|    }
_RNCNvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB4_7Dataset33canonicalize_interned_blank_nodes0B6_:
  571|  2.35k|                    bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
_RNCNvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB4_7Dataset33canonicalize_interned_blank_nodess_0B6_:
  576|  2.35k|                    .map(|(from, to)| (from, BlankNode::new_from_unique_id(to.into())))
_RNCNvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB4_7Dataset11hash_bnodes0B6_:
  680|  30.2k|            .map(|bnode| (*bnode, true))
_RNCNvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB4_7Dataset11hash_bnodess_0B6_:
  715|  26.5k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));
_RINvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB3_7Dataset10hash_tupleNtNtB5_10named_node12NamedNodeRefEB5_:
  803|   121k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|   121k|        let mut hasher = DefaultHasher::new();
  805|   121k|        v.hash(&mut hasher);
  806|   121k|        hasher.finish()
  807|   121k|    }
_RINvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB3_7Dataset10hash_tupleNtNtB5_7literal10LiteralRefEB5_:
  803|    904|    fn hash_tuple(v: impl Hash) -> u64 {
  804|    904|        let mut hasher = DefaultHasher::new();
  805|    904|        v.hash(&mut hasher);
  806|    904|        hasher.finish()
  807|    904|    }
_RINvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB3_7Dataset10hash_tupleTRINtNtCs3OstG5Tqy1X_5alloc3vec3VecTyyyyEEyEEB5_:
  803|  60.4k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|  60.4k|        let mut hasher = DefaultHasher::new();
  805|  60.4k|        v.hash(&mut hasher);
  806|  60.4k|        hasher.finish()
  807|  60.4k|    }
_RINvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB3_7Dataset10hash_tupleTylEEB5_:
  803|  7.34k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|  7.34k|        let mut hasher = DefaultHasher::new();
  805|  7.34k|        v.hash(&mut hasher);
  806|  7.34k|        hasher.finish()
  807|  7.34k|    }
_RNCNvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB4_7Dataset11distinguish0B6_:
  815|  26.0k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
_RNCNvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB4_7Dataset11distinguishs_0B6_:
  815|  26.0k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
_RNCNvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB4_7Dataset11distinguishs0_0B6_:
  819|  7.34k|                .map(|b| {
  820|  7.34k|                    let mut hash_prime = hash.clone();
  821|  7.34k|                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  822|  7.34k|                    let (hash_prime_prime, partition_prime) =
  823|  7.34k|                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  824|  7.34k|                    self.distinguish(hash_prime_prime, &partition_prime, quads_per_blank_node)
  825|  7.34k|                })
_RNCNvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB4_7Dataset11distinguishs1_0B6_:
  826|  4.16k|                .reduce(|a, b| {
  827|  4.16k|                    let mut a_hashes = a.values().collect::<Vec<_>>();
  828|  4.16k|                    a_hashes.sort();
  829|  4.16k|                    let mut b_hashes = a.values().collect::<Vec<_>>();
  830|  4.16k|                    b_hashes.sort();
  831|  4.16k|                    if a_hashes <= b_hashes {
  832|  4.16k|                        a
  833|       |                    } else {
  834|      0|                        b
  835|       |                    }
  836|  4.16k|                })
_RNCNvMNtCsjHb8aGRHKzq_5oxrdf7datasetNtB4_7Dataset15map_blank_nodes0B6_:
  856|  2.70k|            .map(|(s, p, o, g)| {
  857|  2.70k|                (
  858|  2.70k|                    match s {
  859|      0|                        InternedSubject::NamedNode(_) => s,
  860|  2.70k|                        InternedSubject::BlankNode(bnode) => {
  861|  2.70k|                            InternedSubject::BlankNode(InternedBlankNode::encoded_into(
  862|  2.70k|                                bnode_mapping[&bnode].as_ref(),
  863|  2.70k|                                &mut self.interner,
  864|  2.70k|                            ))
  865|       |                        }
  866|       |                        #[cfg(feature = "rdf-star")]
  867|      0|                        InternedSubject::Triple(triple) => {
  868|      0|                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  869|      0|                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  870|      0|                                &mut self.interner,
  871|      0|                            )))
  872|       |                        }
  873|       |                    },
  874|  2.70k|                    p,
  875|  2.70k|                    match o {
  876|  2.69k|                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  877|      8|                        InternedTerm::BlankNode(bnode) => {
  878|      8|                            InternedTerm::BlankNode(InternedBlankNode::encoded_into(
  879|      8|                                bnode_mapping[&bnode].as_ref(),
  880|      8|                                &mut self.interner,
  881|      8|                            ))
  882|       |                        }
  883|       |                        #[cfg(feature = "rdf-star")]
  884|      0|                        InternedTerm::Triple(triple) => {
  885|      0|                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  886|      0|                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  887|      0|                                &mut self.interner,
  888|      0|                            )))
  889|       |                        }
  890|       |                    },
  891|  2.70k|                    match g {
  892|  2.70k|                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  893|      0|                        InternedGraphName::BlankNode(bnode) => {
  894|      0|                            InternedGraphName::BlankNode(InternedBlankNode::encoded_into(
  895|      0|                                bnode_mapping[&bnode].as_ref(),
  896|      0|                                &mut self.interner,
  897|      0|                            ))
  898|       |                        }
  899|       |                    },
  900|       |                )
  901|  2.70k|            })
_RNCNvXsg_NtCsjHb8aGRHKzq_5oxrdf7datasetNtB7_4IterNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0B9_:
 1554|  1.35k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))

_RINvXs3_NtCsjHb8aGRHKzq_5oxrdf5graphNtB6_5GraphINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect12FromIteratorRNtNtB8_6triple6TripleE9from_iterINtNtNtBS_5slice4iter4IterB1K_EECsXnvbX6AWbe_7rdf_xml:
  248|    948|    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self {
  249|    948|        let mut g = Self::new();
  250|    948|        g.extend(iter);
  251|    948|        g
  252|    948|    }
_RINvXs5_NtCsjHb8aGRHKzq_5oxrdf5graphNtB6_5GraphINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendRNtNtB8_6triple6TripleE6extendINtNtNtBS_5slice4iter4IterB1D_EECsXnvbX6AWbe_7rdf_xml:
  262|    948|    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  263|    948|        self.graph_mut().extend(iter)
  264|    948|    }
_RNvMNtCsjHb8aGRHKzq_5oxrdf5graphNtB2_5Graph3new:
   63|    948|    pub fn new() -> Self {
   64|    948|        Self::default()
   65|    948|    }
_RNvMNtCsjHb8aGRHKzq_5oxrdf5graphNtB2_5Graph9graph_mut:
   71|    948|    fn graph_mut(&mut self) -> GraphViewMut<'_> {
   72|    948|        self.dataset.graph_mut(GraphNameRef::DefaultGraph)
   73|    948|    }
_RNvMNtCsjHb8aGRHKzq_5oxrdf5graphNtB2_5Graph12canonicalize:
  217|    948|    pub fn canonicalize(&mut self, algorithm: CanonicalizationAlgorithm) {
  218|    948|        self.dataset.canonicalize(algorithm)
  219|    948|    }
_RNvXs_NtCsjHb8aGRHKzq_5oxrdf5graphNtB4_5GraphNtNtCscdEvteftVc2_4core3cmp9PartialEq2eq:
  223|    474|    fn eq(&self, other: &Self) -> bool {
  224|    474|        self.dataset == other.dataset
  225|    474|    }

_RNvMNtCsjHb8aGRHKzq_5oxrdf9interningNtB2_8Interner13get_or_intern:
   18|  5.48k|    fn get_or_intern(&mut self, value: &str) -> Key {
   19|  5.48k|        let mut hash = self.hash(value);
   20|  5.48k|        loop {
   21|  5.48k|            match self.string_for_hash.entry(hash) {
   22|  2.85k|                Entry::Vacant(e) => {
   23|  2.85k|                    e.insert(value.into());
   24|  2.85k|                    return Key(hash);
   25|       |                }
   26|  2.62k|                Entry::Occupied(e) => loop {
   27|  2.62k|                    if e.get() == value {
   28|  2.62k|                        return Key(hash);
   29|      0|                    } else if hash == u64::MAX - 1 {
   30|      0|                        hash = 0;
   31|      0|                    } else {
   32|      0|                        hash += 1;
   33|      0|                    }
   34|       |                },
   35|       |            }
   36|       |        }
   37|  5.48k|    }
_RNvMNtCsjHb8aGRHKzq_5oxrdf9interningNtB2_8Interner3get:
   39|  2.70k|    fn get(&self, value: &str) -> Option<Key> {
   40|  2.70k|        let mut hash = self.hash(value);
   41|       |        loop {
   42|  2.70k|            let v = self.string_for_hash.get(&hash)?;
   43|  2.70k|            if v == value {
   44|  2.70k|                return Some(Key(hash));
   45|      0|            } else if hash == u64::MAX - 1 {
   46|      0|                hash = 0;
   47|      0|            } else {
   48|      0|                hash += 1;
   49|      0|            }
   50|       |        }
   51|  2.70k|    }
_RNvMNtCsjHb8aGRHKzq_5oxrdf9interningNtB2_8Interner4hash:
   53|  8.18k|    fn hash(&self, value: &str) -> u64 {
   54|  8.18k|        let hash = self.hasher.hash_one(value);
   55|  8.18k|        if hash == u64::MAX {
   56|      0|            0
   57|       |        } else {
   58|  8.18k|            hash
   59|       |        }
   60|  8.18k|    }
_RNvMNtCsjHb8aGRHKzq_5oxrdf9interningNtB2_8Interner7resolve:
   62|   125k|    fn resolve(&self, key: Key) -> &str {
   63|   125k|        &self.string_for_hash[&key.0]
   64|   125k|    }
_RNvMs0_NtCsjHb8aGRHKzq_5oxrdf9interningNtB5_17InternedNamedNode12encoded_into:
   90|  5.08k|    pub fn encoded_into(named_node: NamedNodeRef<'_>, interner: &mut Interner) -> Self {
   91|  5.08k|        Self {
   92|  5.08k|            id: interner.get_or_intern(named_node.as_str()),
   93|  5.08k|        }
   94|  5.08k|    }
_RNvMs0_NtCsjHb8aGRHKzq_5oxrdf9interningNtB5_17InternedNamedNode12encoded_from:
   96|  2.52k|    pub fn encoded_from(named_node: NamedNodeRef<'_>, interner: &Interner) -> Option<Self> {
   97|  2.52k|        Some(Self {
   98|  2.52k|            id: interner.get(named_node.as_str())?,
   99|       |        })
  100|  2.52k|    }
_RNvMs0_NtCsjHb8aGRHKzq_5oxrdf9interningNtB5_17InternedNamedNode11decode_from:
  102|   124k|    pub fn decode_from(self, interner: &Interner) -> NamedNodeRef<'_> {
  103|   124k|        NamedNodeRef::new_unchecked(interner.resolve(self.id))
  104|   124k|    }
_RNvMs1_NtCsjHb8aGRHKzq_5oxrdf9interningNtB5_17InternedBlankNode12encoded_into:
  128|  5.46k|    pub fn encoded_into(blank_node: BlankNodeRef<'_>, interner: &mut Interner) -> Self {
  129|  5.46k|        if let Some(id) = blank_node.unique_id() {
  130|  5.46k|            interner
  131|  5.46k|                .string_for_blank_node_id
  132|  5.46k|                .entry(id)
  133|  5.46k|                .or_insert_with(|| blank_node.as_str().into());
  134|  5.46k|            Self::Number { id }
  135|       |        } else {
  136|      0|            Self::Other {
  137|      0|                id: interner.get_or_intern(blank_node.as_str()),
  138|      0|            }
  139|       |        }
  140|  5.46k|    }
_RNvMs1_NtCsjHb8aGRHKzq_5oxrdf9interningNtB5_17InternedBlankNode12encoded_from:
  142|  1.35k|    pub fn encoded_from(blank_node: BlankNodeRef<'_>, interner: &Interner) -> Option<Self> {
  143|  1.35k|        if let Some(id) = blank_node.unique_id() {
  144|  1.35k|            interner
  145|  1.35k|                .string_for_blank_node_id
  146|  1.35k|                .contains_key(&id)
  147|  1.35k|                .then_some(Self::Number { id })
  148|       |        } else {
  149|       |            Some(Self::Other {
  150|      0|                id: interner.get(blank_node.as_str())?,
  151|       |            })
  152|       |        }
  153|  1.35k|    }
_RNvMs1_NtCsjHb8aGRHKzq_5oxrdf9interningNtB5_17InternedBlankNode11decode_from:
  155|  1.35k|    pub fn decode_from(self, interner: &Interner) -> BlankNodeRef<'_> {
  156|  1.35k|        BlankNodeRef::new_unchecked(match self {
  157|  1.35k|            Self::Number { id } => &interner.string_for_blank_node_id[&id],
  158|      0|            Self::Other { id } => interner.resolve(id),
  159|       |        })
  160|  1.35k|    }
_RNvMs2_NtCsjHb8aGRHKzq_5oxrdf9interningNtB5_15InternedLiteral12encoded_into:
  188|    398|    pub fn encoded_into(literal: LiteralRef<'_>, interner: &mut Interner) -> Self {
  189|    398|        let value_id = interner.get_or_intern(literal.value());
  190|    398|        if literal.is_plain() {
  191|    398|            if let Some(language) = literal.language() {
  192|      0|                Self::LanguageTaggedString {
  193|      0|                    value_id,
  194|      0|                    language_id: interner.get_or_intern(language),
  195|      0|                }
  196|       |            } else {
  197|    398|                Self::String { value_id }
  198|       |            }
  199|       |        } else {
  200|      0|            Self::TypedLiteral {
  201|      0|                value_id,
  202|      0|                datatype: InternedNamedNode::encoded_into(literal.datatype(), interner),
  203|      0|            }
  204|       |        }
  205|    398|    }
_RNvMs2_NtCsjHb8aGRHKzq_5oxrdf9interningNtB5_15InternedLiteral12encoded_from:
  207|    180|    pub fn encoded_from(literal: LiteralRef<'_>, interner: &Interner) -> Option<Self> {
  208|    180|        let value_id = interner.get(literal.value())?;
  209|    180|        Some(if literal.is_plain() {
  210|    180|            if let Some(language) = literal.language() {
  211|       |                Self::LanguageTaggedString {
  212|      0|                    value_id,
  213|      0|                    language_id: interner.get(language)?,
  214|       |                }
  215|       |            } else {
  216|    180|                Self::String { value_id }
  217|       |            }
  218|       |        } else {
  219|       |            Self::TypedLiteral {
  220|      0|                value_id,
  221|      0|                datatype: InternedNamedNode::encoded_from(literal.datatype(), interner)?,
  222|       |            }
  223|       |        })
  224|    180|    }
_RNvMs2_NtCsjHb8aGRHKzq_5oxrdf9interningNtB5_15InternedLiteral11decode_from:
  226|  1.08k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> LiteralRef<'a> {
  227|  1.08k|        match self {
  228|  1.08k|            Self::String { value_id } => {
  229|  1.08k|                LiteralRef::new_simple_literal(interner.resolve(*value_id))
  230|       |            }
  231|       |            Self::LanguageTaggedString {
  232|      0|                value_id,
  233|      0|                language_id,
  234|      0|            } => LiteralRef::new_language_tagged_literal_unchecked(
  235|      0|                interner.resolve(*value_id),
  236|      0|                interner.resolve(*language_id),
  237|      0|            ),
  238|      0|            Self::TypedLiteral { value_id, datatype } => LiteralRef::new_typed_literal(
  239|      0|                interner.resolve(*value_id),
  240|      0|                datatype.decode_from(interner),
  241|      0|            ),
  242|       |        }
  243|  1.08k|    }
_RNvMs3_NtCsjHb8aGRHKzq_5oxrdf9interningNtB5_15InternedSubject12encoded_into:
  274|  2.74k|    pub fn encoded_into(node: SubjectRef<'_>, interner: &mut Interner) -> Self {
  275|  2.74k|        match node {
  276|      0|            SubjectRef::NamedNode(node) => {
  277|      0|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  278|       |            }
  279|  2.74k|            SubjectRef::BlankNode(node) => {
  280|  2.74k|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  281|       |            }
  282|       |            #[cfg(feature = "rdf-star")]
  283|      0|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  284|      0|                triple.as_ref(),
  285|      0|                interner,
  286|      0|            ))),
  287|       |        }
  288|  2.74k|    }
_RNvMs3_NtCsjHb8aGRHKzq_5oxrdf9interningNtB5_15InternedSubject12encoded_from:
  290|  1.35k|    pub fn encoded_from(node: SubjectRef<'_>, interner: &Interner) -> Option<Self> {
  291|  1.35k|        Some(match node {
  292|      0|            SubjectRef::NamedNode(node) => {
  293|      0|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  294|       |            }
  295|  1.35k|            SubjectRef::BlankNode(node) => {
  296|  1.35k|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  297|       |            }
  298|       |            #[cfg(feature = "rdf-star")]
  299|      0|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  300|      0|                triple.as_ref(),
  301|      0|                interner,
  302|      0|            )?)),
  303|       |        })
  304|  1.35k|    }
_RNvMs3_NtCsjHb8aGRHKzq_5oxrdf9interningNtB5_15InternedSubject11decode_from:
  306|  1.35k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> SubjectRef<'a> {
  307|  1.35k|        match self {
  308|      0|            Self::NamedNode(node) => SubjectRef::NamedNode(node.decode_from(interner)),
  309|  1.35k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.decode_from(interner)),
  310|       |            #[cfg(feature = "rdf-star")]
  311|      0|            Self::Triple(triple) => SubjectRef::Triple(&interner.triples[triple.as_ref()]),
  312|       |        }
  313|  1.35k|    }
_RNvMs4_NtCsjHb8aGRHKzq_5oxrdf9interningNtB5_17InternedGraphName12encoded_into:
  341|    948|    pub fn encoded_into(node: GraphNameRef<'_>, interner: &mut Interner) -> Self {
  342|    948|        match node {
  343|    948|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  344|      0|            GraphNameRef::NamedNode(node) => {
  345|      0|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  346|       |            }
  347|      0|            GraphNameRef::BlankNode(node) => {
  348|      0|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  349|       |            }
  350|       |        }
  351|    948|    }
_RNvMs4_NtCsjHb8aGRHKzq_5oxrdf9interningNtB5_17InternedGraphName12encoded_from:
  353|  1.35k|    pub fn encoded_from(node: GraphNameRef<'_>, interner: &Interner) -> Option<Self> {
  354|  1.35k|        Some(match node {
  355|  1.35k|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  356|      0|            GraphNameRef::NamedNode(node) => {
  357|      0|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  358|       |            }
  359|      0|            GraphNameRef::BlankNode(node) => {
  360|      0|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  361|       |            }
  362|       |        })
  363|  1.35k|    }
_RNvMs4_NtCsjHb8aGRHKzq_5oxrdf9interningNtB5_17InternedGraphName11decode_from:
  365|  1.35k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> GraphNameRef<'a> {
  366|  1.35k|        match self {
  367|  1.35k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  368|      0|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.decode_from(interner)),
  369|      0|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.decode_from(interner)),
  370|       |        }
  371|  1.35k|    }
_RNvMs5_NtCsjHb8aGRHKzq_5oxrdf9interningNtB5_12InternedTerm12encoded_into:
  400|  2.74k|    pub fn encoded_into(term: TermRef<'_>, interner: &mut Interner) -> Self {
  401|  2.74k|        match term {
  402|  2.33k|            TermRef::NamedNode(term) => {
  403|  2.33k|                Self::NamedNode(InternedNamedNode::encoded_into(term, interner))
  404|       |            }
  405|      8|            TermRef::BlankNode(term) => {
  406|      8|                Self::BlankNode(InternedBlankNode::encoded_into(term, interner))
  407|       |            }
  408|    398|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_into(term, interner)),
  409|       |            #[cfg(feature = "rdf-star")]
  410|      0|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  411|      0|                triple.as_ref(),
  412|      0|                interner,
  413|      0|            ))),
  414|       |        }
  415|  2.74k|    }
_RNvMs5_NtCsjHb8aGRHKzq_5oxrdf9interningNtB5_12InternedTerm12encoded_from:
  417|  1.35k|    pub fn encoded_from(term: TermRef<'_>, interner: &Interner) -> Option<Self> {
  418|  1.35k|        Some(match term {
  419|  1.16k|            TermRef::NamedNode(term) => {
  420|  1.16k|                Self::NamedNode(InternedNamedNode::encoded_from(term, interner)?)
  421|       |            }
  422|      4|            TermRef::BlankNode(term) => {
  423|      4|                Self::BlankNode(InternedBlankNode::encoded_from(term, interner)?)
  424|       |            }
  425|    180|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_from(term, interner)?),
  426|       |            #[cfg(feature = "rdf-star")]
  427|      0|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  428|      0|                triple.as_ref(),
  429|      0|                interner,
  430|      0|            )?)),
  431|       |        })
  432|  1.35k|    }
_RNvMs5_NtCsjHb8aGRHKzq_5oxrdf9interningNtB5_12InternedTerm11decode_from:
  434|  1.35k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> TermRef<'a> {
  435|  1.35k|        match self {
  436|  1.16k|            Self::NamedNode(term) => TermRef::NamedNode(term.decode_from(interner)),
  437|      4|            Self::BlankNode(term) => TermRef::BlankNode(term.decode_from(interner)),
  438|    180|            Self::Literal(term) => TermRef::Literal(term.decode_from(interner)),
  439|       |            #[cfg(feature = "rdf-star")]
  440|      0|            Self::Triple(triple) => TermRef::Triple(&interner.triples[triple.as_ref()]),
  441|       |        }
  442|  1.35k|    }
_RNvXs7_NtCsjHb8aGRHKzq_5oxrdf9interningNtB5_21IdentityHasherBuilderNtNtCscdEvteftVc2_4core4hash11BuildHasher12build_hasher:
  511|   134k|    fn build_hasher(&self) -> Self::Hasher {
  512|   134k|        Self::Hasher::default()
  513|   134k|    }
_RNvXs8_NtCsjHb8aGRHKzq_5oxrdf9interningNtB5_14IdentityHasherNtNtCscdEvteftVc2_4core4hash6Hasher6finish:
  522|   134k|    fn finish(&self) -> u64 {
  523|   134k|        self.value
  524|   134k|    }
_RNvXs8_NtCsjHb8aGRHKzq_5oxrdf9interningNtB5_14IdentityHasherNtNtCscdEvteftVc2_4core4hash6Hasher9write_u64:
  530|   134k|    fn write_u64(&mut self, i: u64) {
  531|   134k|        self.value = i
  532|   134k|    }
_RNCNvMs1_NtCsjHb8aGRHKzq_5oxrdf9interningNtB7_17InternedBlankNode12encoded_into0B9_:
  133|  4.70k|                .or_insert_with(|| blank_node.as_str().into());

_RNvMNtCsjHb8aGRHKzq_5oxrdf7literalNtB2_7Literal6as_refCsXnvbX6AWbe_7rdf_xml:
  129|  39.2k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|  39.2k|        LiteralRef(match &self.0 {
  131|  37.2k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|      0|            LiteralContent::LanguageTaggedString { value, language } => {
  133|      0|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|  1.94k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|  1.94k|                value,
  137|  1.94k|                datatype: datatype.as_ref(),
  138|  1.94k|            },
  139|       |        })
  140|  39.2k|    }
_RNvMst_NtCsjHb8aGRHKzq_5oxrdf7literalNtB5_10LiteralRef5valueCsXnvbX6AWbe_7rdf_xml:
  488|  38.8k|    pub const fn value(self) -> &'a str {
  489|  38.8k|        match self.0 {
  490|  36.8k|            LiteralRefContent::String(value)
  491|      0|            | LiteralRefContent::LanguageTaggedString { value, .. }
  492|  38.8k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  493|  38.8k|        }
  494|  38.8k|    }
_RNvMst_NtCsjHb8aGRHKzq_5oxrdf7literalNtB5_10LiteralRef8datatypeCsXnvbX6AWbe_7rdf_xml:
  513|  1.94k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  514|  1.94k|        match self.0 {
  515|      0|            LiteralRefContent::String(_) => xsd::STRING,
  516|      0|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  517|  1.94k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  518|       |        }
  519|  1.94k|    }
_RNvMst_NtCsjHb8aGRHKzq_5oxrdf7literalNtB5_10LiteralRef8is_plainCsXnvbX6AWbe_7rdf_xml:
  526|  38.8k|    pub const fn is_plain(self) -> bool {
  527|  1.94k|        matches!(
  528|  38.8k|            self.0,
  529|       |            LiteralRefContent::String(_) | LiteralRefContent::LanguageTaggedString { .. }
  530|       |        )
  531|  38.8k|    }
_RNvMst_NtCsjHb8aGRHKzq_5oxrdf7literalNtB5_10LiteralRef8languageCsXnvbX6AWbe_7rdf_xml:
  501|  38.8k|    pub const fn language(self) -> Option<&'a str> {
  502|  38.8k|        match self.0 {
  503|      0|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  504|  38.8k|            _ => None,
  505|       |        }
  506|  38.8k|    }
_RNvMst_NtCsjHb8aGRHKzq_5oxrdf7literalNtB5_10LiteralRef18new_simple_literalB7_:
  459|  1.08k|    pub const fn new_simple_literal(value: &'a str) -> Self {
  460|  1.08k|        LiteralRef(LiteralRefContent::String(value))
  461|  1.08k|    }
_RNvMst_NtCsjHb8aGRHKzq_5oxrdf7literalNtB5_10LiteralRef5valueB7_:
  488|    578|    pub const fn value(self) -> &'a str {
  489|    578|        match self.0 {
  490|    578|            LiteralRefContent::String(value)
  491|      0|            | LiteralRefContent::LanguageTaggedString { value, .. }
  492|    578|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  493|    578|        }
  494|    578|    }
_RNvMst_NtCsjHb8aGRHKzq_5oxrdf7literalNtB5_10LiteralRef8languageB7_:
  501|    578|    pub const fn language(self) -> Option<&'a str> {
  502|    578|        match self.0 {
  503|      0|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  504|    578|            _ => None,
  505|       |        }
  506|    578|    }
_RNvMst_NtCsjHb8aGRHKzq_5oxrdf7literalNtB5_10LiteralRef8is_plainB7_:
  526|    578|    pub const fn is_plain(self) -> bool {
  527|      0|        matches!(
  528|    578|            self.0,
  529|       |            LiteralRefContent::String(_) | LiteralRefContent::LanguageTaggedString { .. }
  530|       |        )
  531|    578|    }
_RINvMNtCsjHb8aGRHKzq_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   47|  73.8k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|  73.8k|        Self(LiteralContent::String(value.into()))
   49|  73.8k|    }
_RINvMNtCsjHb8aGRHKzq_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   53|  4.00k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|  4.00k|        let value = value.into();
   55|  4.00k|        let datatype = datatype.into();
   56|  4.00k|        Self(if datatype == xsd::STRING {
   57|    106|            LiteralContent::String(value)
   58|       |        } else {
   59|  3.89k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|  4.00k|    }

_RNvMNtCsjHb8aGRHKzq_5oxrdf10named_nodeNtB2_9NamedNode6as_refCsXnvbX6AWbe_7rdf_xml:
   54|   535k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|   535k|        NamedNodeRef::new_unchecked(&self.iri)
   56|   535k|    }
_RNvMs4_NtCsjHb8aGRHKzq_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCsXnvbX6AWbe_7rdf_xml:
  138|  2.00k|    pub fn into_owned(self) -> NamedNode {
  139|  2.00k|        NamedNode::new_unchecked(self.iri)
  140|  2.00k|    }
_RNvMs4_NtCsjHb8aGRHKzq_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCsXnvbX6AWbe_7rdf_xml:
  128|   535k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   535k|        Self { iri }
  130|   535k|    }
_RNvMs4_NtCsjHb8aGRHKzq_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCsXnvbX6AWbe_7rdf_xml:
  133|  7.16k|    pub const fn as_str(self) -> &'a str {
  134|  7.16k|        self.iri
  135|  7.16k|    }
_RNvMNtCsjHb8aGRHKzq_5oxrdf10named_nodeNtB2_9NamedNode6as_strCs5iIAVsTbYw4_8oxrdfxml:
   44|   483k|    pub fn as_str(&self) -> &str {
   45|   483k|        self.iri.as_str()
   46|   483k|    }
_RNvMs4_NtCsjHb8aGRHKzq_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCs5iIAVsTbYw4_8oxrdfxml:
  133|   307k|    pub const fn as_str(self) -> &'a str {
  134|   307k|        self.iri
  135|   307k|    }
_RNvXs0_NtCsjHb8aGRHKzq_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCscdEvteftVc2_4core3cmp9PartialEqeE2eqCs5iIAVsTbYw4_8oxrdfxml:
   68|   483k|    fn eq(&self, other: &str) -> bool {
   69|   483k|        self.as_str() == other
   70|   483k|    }
_RINvMNtCsjHb8aGRHKzq_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   39|   815k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   815k|        Self { iri: iri.into() }
   41|   815k|    }
_RINvMNtCsjHb8aGRHKzq_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|   475k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   475k|        Self { iri: iri.into() }
   41|   475k|    }
_RNvMNtCsjHb8aGRHKzq_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|  4.00k|    pub fn as_str(&self) -> &str {
   45|  4.00k|        self.iri.as_str()
   46|  4.00k|    }
_RNvMs4_NtCsjHb8aGRHKzq_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedB7_:
  128|   124k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   124k|        Self { iri }
  130|   124k|    }
_RNvMs4_NtCsjHb8aGRHKzq_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|  11.6k|    pub const fn as_str(self) -> &'a str {
  134|  11.6k|        self.iri
  135|  11.6k|    }
_RNvMs4_NtCsjHb8aGRHKzq_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|   473k|    pub fn into_owned(self) -> NamedNode {
  139|   473k|        NamedNode::new_unchecked(self.iri)
  140|   473k|    }
_RNvXs6_NtCsjHb8aGRHKzq_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCscdEvteftVc2_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|   473k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|   473k|        node.into_owned()
  154|   473k|    }
_RNvXs9_NtCsjHb8aGRHKzq_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCscdEvteftVc2_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|  4.00k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|  4.00k|        self.as_str() == other.as_str()
  175|  4.00k|    }

_RNvMs16_NtCsjHb8aGRHKzq_5oxrdf6tripleNtB6_6Triple6as_refCsXnvbX6AWbe_7rdf_xml:
  835|   285k|    pub fn as_ref(&self) -> TripleRef<'_> {
  836|   285k|        TripleRef {
  837|   285k|            subject: self.subject.as_ref(),
  838|   285k|            predicate: self.predicate.as_ref(),
  839|   285k|            object: self.object.as_ref(),
  840|   285k|        }
  841|   285k|    }
_RNvMsc_NtCsjHb8aGRHKzq_5oxrdf6tripleNtB5_7Subject6as_refCsXnvbX6AWbe_7rdf_xml:
  181|   553k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|   553k|        match self {
  183|  7.76k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|   545k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|      0|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|   553k|    }
_RNvMsn_NtCsjHb8aGRHKzq_5oxrdf6tripleNtB5_10SubjectRef10into_ownedCsXnvbX6AWbe_7rdf_xml:
  294|   244k|    pub fn into_owned(self) -> Subject {
  295|   244k|        match self {
  296|  2.00k|            Self::NamedNode(node) => Subject::NamedNode(node.into_owned()),
  297|   242k|            Self::BlankNode(node) => Subject::BlankNode(node.into_owned()),
  298|       |            #[cfg(feature = "rdf-star")]
  299|      0|            Self::Triple(triple) => Subject::Triple(Box::new(triple.clone())),
  300|       |        }
  301|   244k|    }
_RNvMsy_NtCsjHb8aGRHKzq_5oxrdf6tripleNtB5_4Term6as_refCsXnvbX6AWbe_7rdf_xml:
  417|   285k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|   285k|        match self {
  419|   240k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|  5.80k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  39.2k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|      0|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|   285k|    }
_RNvXs1a_NtCsjHb8aGRHKzq_5oxrdf6tripleNtB6_9TripleRefINtNtCscdEvteftVc2_4core7convert4FromRNtB6_6TripleE4fromCsXnvbX6AWbe_7rdf_xml:
  926|   285k|    fn from(triple: &'a Triple) -> Self {
  927|   285k|        triple.as_ref()
  928|   285k|    }
_RINvMs16_NtCsjHb8aGRHKzq_5oxrdf6tripleNtB7_6Triple3newNtB7_7SubjectNtNtB9_10named_node12NamedNodeRefNtB15_9NamedNodeECs5iIAVsTbYw4_8oxrdfxml:
  795|   473k|    pub fn new(
  796|   473k|        subject: impl Into<Subject>,
  797|   473k|        predicate: impl Into<NamedNode>,
  798|   473k|        object: impl Into<Term>,
  799|   473k|    ) -> Self {
  800|   473k|        Self {
  801|   473k|            subject: subject.into(),
  802|   473k|            predicate: predicate.into(),
  803|   473k|            object: object.into(),
  804|   473k|        }
  805|   473k|    }
_RINvMs16_NtCsjHb8aGRHKzq_5oxrdf6tripleNtB7_6Triple3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtB7_4TermECs5iIAVsTbYw4_8oxrdfxml:
  795|  89.3k|    pub fn new(
  796|  89.3k|        subject: impl Into<Subject>,
  797|  89.3k|        predicate: impl Into<NamedNode>,
  798|  89.3k|        object: impl Into<Term>,
  799|  89.3k|    ) -> Self {
  800|  89.3k|        Self {
  801|  89.3k|            subject: subject.into(),
  802|  89.3k|            predicate: predicate.into(),
  803|  89.3k|            object: object.into(),
  804|  89.3k|        }
  805|  89.3k|    }
_RINvMs16_NtCsjHb8aGRHKzq_5oxrdf6tripleNtB7_6Triple3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtNtB9_7literal7LiteralECs5iIAVsTbYw4_8oxrdfxml:
  795|  3.67k|    pub fn new(
  796|  3.67k|        subject: impl Into<Subject>,
  797|  3.67k|        predicate: impl Into<NamedNode>,
  798|  3.67k|        object: impl Into<Term>,
  799|  3.67k|    ) -> Self {
  800|  3.67k|        Self {
  801|  3.67k|            subject: subject.into(),
  802|  3.67k|            predicate: predicate.into(),
  803|  3.67k|            object: object.into(),
  804|  3.67k|        }
  805|  3.67k|    }
_RNvXsL_NtCsjHb8aGRHKzq_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtB5_7SubjectE4fromCs5iIAVsTbYw4_8oxrdfxml:
  520|  15.1k|    fn from(node: Subject) -> Self {
  521|  15.1k|        match node {
  522|  3.55k|            Subject::NamedNode(node) => node.into(),
  523|  11.6k|            Subject::BlankNode(node) => node.into(),
  524|       |            #[cfg(feature = "rdf-star")]
  525|      0|            Subject::Triple(triple) => Self::Triple(triple),
  526|       |        }
  527|  15.1k|    }
_RNvXse_NtCsjHb8aGRHKzq_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromCs5iIAVsTbYw4_8oxrdfxml:
  200|  3.76k|    fn from(node: NamedNode) -> Self {
  201|  3.76k|        Self::NamedNode(node)
  202|  3.76k|    }
_RNvXse_NtCsjHb8aGRHKzq_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|  3.71k|    fn from(node: NamedNode) -> Self {
  201|  3.71k|        Self::NamedNode(node)
  202|  3.71k|    }
_RNvXsg_NtCsjHb8aGRHKzq_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|   488k|    fn from(node: BlankNode) -> Self {
  215|   488k|        Self::BlankNode(node)
  216|   488k|    }
_RNvXsA_NtCsjHb8aGRHKzq_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|   477k|    fn from(node: NamedNode) -> Self {
  438|   477k|        Self::NamedNode(node)
  439|   477k|    }
_RNvXsC_NtCsjHb8aGRHKzq_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  451|  11.6k|    fn from(node: BlankNode) -> Self {
  452|  11.6k|        Self::BlankNode(node)
  453|  11.6k|    }
_RNvXsE_NtCsjHb8aGRHKzq_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  465|  77.8k|    fn from(literal: Literal) -> Self {
  466|  77.8k|        Self::Literal(literal)
  467|  77.8k|    }

_RINvMs0_NtCs5iIAVsTbYw4_8oxrdfxml5errorNtB6_17RdfXmlSyntaxError3msgNtNtCs3OstG5Tqy1X_5alloc6string6StringEB8_:
   68|   274k|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   69|   274k|        Self(SyntaxErrorKind::Msg(msg.into()))
   70|   274k|    }
_RINvMs0_NtCs5iIAVsTbYw4_8oxrdfxml5errorNtB6_17RdfXmlSyntaxError3msgReEB8_:
   68|   208k|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   69|   208k|        Self(SyntaxErrorKind::Msg(msg.into()))
   70|   208k|    }
_RNvXs_NtCs5iIAVsTbYw4_8oxrdfxml5errorNtB4_16RdfXmlParseErrorINtNtCscdEvteftVc2_4core7convert4FromNtNtCsjWx60dGvTf3_9quick_xml6errors5ErrorE4fromB6_:
   30|   661k|    fn from(error: quick_xml::Error) -> Self {
   31|   661k|        match error {
   32|      0|            quick_xml::Error::Io(error) => {
   33|      0|                Self::Io(Arc::try_unwrap(error).unwrap_or_else(|e| io::Error::new(e.kind(), e)))
   34|       |            }
   35|   661k|            _ => Self::Syntax(RdfXmlSyntaxError(SyntaxErrorKind::Xml(error))),
   36|       |        }
   37|   661k|    }
_RNvXs6_NtCs5iIAVsTbYw4_8oxrdfxml5errorNtB5_16RdfXmlParseErrorINtNtCscdEvteftVc2_4core7convert4FromNtB5_17RdfXmlSyntaxErrorE4from:
    7|   600k|#[derive(Debug, thiserror::Error)]
_RNvXs9_NtCs5iIAVsTbYw4_8oxrdfxml5errorNtB5_17RdfXmlSyntaxErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
   41|  1.26M|#[derive(Debug, thiserror::Error)]
_RNvXsd_NtCs5iIAVsTbYw4_8oxrdfxml5errorNtB5_15SyntaxErrorKindNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
   45|  1.26M|#[derive(Debug, thiserror::Error)]

_RNvMNtCs5iIAVsTbYw4_8oxrdfxml6parserNtB2_12RdfXmlParser3newCsXnvbX6AWbe_7rdf_xml:
   64|  58.4k|    pub fn new() -> Self {
   65|  58.4k|        Self::default()
   66|  58.4k|    }
_RNvMNtCs5iIAVsTbYw4_8oxrdfxml6parserNtB2_12RdfXmlParser9uncheckedCsXnvbX6AWbe_7rdf_xml:
   74|    541|    pub fn unchecked(mut self) -> Self {
   75|    541|        self.unchecked = true;
   76|    541|        self
   77|    541|    }
_RINvMNtCs5iIAVsTbYw4_8oxrdfxml6parserNtB3_12RdfXmlParser5parseRShEB5_:
  201|  58.4k|    fn parse<T>(&self, reader: T) -> RdfXmlReader<T> {
  202|  58.4k|        let mut reader = NsReader::from_reader(reader);
  203|  58.4k|        reader.config_mut().expand_empty_elements = true;
  204|  58.4k|        RdfXmlReader {
  205|  58.4k|            reader,
  206|  58.4k|            state: vec![RdfXmlState::Doc {
  207|  58.4k|                base_iri: self.base.clone(),
  208|  58.4k|            }],
  209|  58.4k|            custom_entities: HashMap::default(),
  210|  58.4k|            in_literal_depth: 0,
  211|  58.4k|            known_rdf_id: HashSet::default(),
  212|  58.4k|            is_end: false,
  213|  58.4k|            unchecked: self.unchecked,
  214|  58.4k|        }
  215|  58.4k|    }
_RNvMs5_NtCs5iIAVsTbYw4_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE11parse_eventB7_:
  781|  3.28M|    fn parse_event(
  782|  3.28M|        &mut self,
  783|  3.28M|        event: Event<'_>,
  784|  3.28M|        results: &mut Vec<Triple>,
  785|  3.28M|    ) -> Result<(), RdfXmlParseError> {
  786|  3.28M|        match event {
  787|  1.41M|            Event::Start(event) => self.parse_start_event(&event, results),
  788|   412k|            Event::End(event) => self.parse_end_event(&event, results),
  789|      0|            Event::Empty(_) => Err(RdfXmlSyntaxError::msg(
  790|      0|                "The expand_empty_elements option must be enabled",
  791|      0|            )
  792|      0|            .into()),
  793|  1.32M|            Event::Text(event) => self.parse_text_event(&event),
  794|  4.92k|            Event::CData(event) => self.parse_text_event(&event.escape()?),
  795|  11.4k|            Event::Comment(_) | Event::PI(_) => Ok(()),
  796|  60.8k|            Event::Decl(decl) => {
  797|  60.8k|                if let Some(encoding) = decl.encoding() {
  798|  58.6k|                    if !is_utf8(&encoding?) {
  799|  22.2k|                        return Err(RdfXmlSyntaxError::msg(
  800|  22.2k|                            "Only UTF-8 is supported by the RDF/XML parser",
  801|  22.2k|                        )
  802|  22.2k|                        .into());
  803|  29.2k|                    }
  804|  2.17k|                }
  805|  31.4k|                Ok(())
  806|       |            }
  807|      0|            Event::DocType(dt) => self.parse_doctype(&dt),
  808|       |            Event::Eof => {
  809|  58.4k|                self.is_end = true;
  810|  58.4k|                Ok(())
  811|       |            }
  812|       |        }
  813|  3.28M|    }
_RNvMs5_NtCs5iIAVsTbYw4_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE17parse_start_eventB7_:
  853|  1.41M|    fn parse_start_event(
  854|  1.41M|        &mut self,
  855|  1.41M|        event: &BytesStart<'_>,
  856|  1.41M|        results: &mut Vec<Triple>,
  857|  1.41M|    ) -> Result<(), RdfXmlParseError> {
  858|       |        #[derive(PartialEq, Eq)]
  859|       |        enum RdfXmlParseType {
  860|       |            Default,
  861|       |            Collection,
  862|       |            Literal,
  863|       |            Resource,
  864|       |            Other,
  865|       |        }
  866|       |
  867|       |        #[derive(PartialEq, Eq)]
  868|       |        enum RdfXmlNextProduction {
  869|       |            Rdf,
  870|       |            NodeElt,
  871|       |            PropertyElt { subject: Subject },
  872|       |        }
  873|       |
  874|       |        // Literal case
  875|  1.41M|        if let Some(RdfXmlState::ParseTypeLiteralPropertyElt { writer, .. }) = self.state.last_mut()
  876|       |        {
  877|  37.8k|            let mut clean_event = BytesStart::new(
  878|  41.6k|                self.reader
  879|  41.6k|                    .decoder()
  880|  41.6k|                    .decode(event.name().as_ref())?
  881|  37.8k|                    .to_string(),
  882|       |            );
  883|  37.8k|            for attr in event.attributes() {
  884|  22.9k|                clean_event.push_attribute(attr.map_err(Error::InvalidAttr)?);
  885|       |            }
  886|  24.4k|            writer.write_event(Event::Start(clean_event))?;
  887|  24.4k|            self.in_literal_depth += 1;
  888|  24.4k|            return Ok(());
  889|  1.36M|        }
  890|       |
  891|  1.36M|        let tag_name = self.resolve_tag_name(event.name())?;
  892|       |
  893|       |        // We read attributes
  894|  1.04M|        let (mut language, mut base_iri) = if let Some(current_state) = self.state.last() {
  895|  1.03M|            (
  896|  1.03M|                current_state.language().cloned(),
  897|  1.03M|                current_state.base_iri().cloned(),
  898|  1.03M|            )
  899|       |        } else {
  900|  18.8k|            (None, None)
  901|       |        };
  902|       |
  903|  1.04M|        let mut id_attr = None;
  904|  1.04M|        let mut node_id_attr = None;
  905|  1.04M|        let mut about_attr = None;
  906|  1.04M|        let mut property_attrs = Vec::default();
  907|  1.04M|        let mut resource_attr = None;
  908|  1.04M|        let mut datatype_attr = None;
  909|  1.04M|        let mut parse_type = RdfXmlParseType::Default;
  910|  1.04M|        let mut type_attr = None;
  911|       |
  912|  1.04M|        for attribute in event.attributes() {
  913|   686k|            let attribute = attribute.map_err(Error::InvalidAttr)?;
  914|   655k|            if attribute.key.as_ref().starts_with(b"xml") {
  915|   319k|                if attribute.key.as_ref() == b"xml:lang" {
  916|      0|                    let tag = self.convert_attribute(&attribute)?.to_ascii_lowercase();
  917|      0|                    language = Some(if self.unchecked {
  918|      0|                        tag
  919|       |                    } else {
  920|      0|                        LanguageTag::parse(tag.to_ascii_lowercase())
  921|      0|                            .map_err(|error| {
  922|       |                                RdfXmlSyntaxError(SyntaxErrorKind::InvalidLanguageTag {
  923|       |                                    tag,
  924|       |                                    error,
  925|       |                                })
  926|      0|                            })?
  927|      0|                            .into_inner()
  928|       |                    });
  929|   319k|                } else if attribute.key.as_ref() == b"xml:base" {
  930|      0|                    let iri = self.convert_attribute(&attribute)?;
  931|      0|                    base_iri = Some(if self.unchecked {
  932|      0|                        Iri::parse_unchecked(iri.clone())
  933|       |                    } else {
  934|      0|                        Iri::parse(iri.clone()).map_err(|error| {
  935|       |                            RdfXmlSyntaxError(SyntaxErrorKind::InvalidIri { iri, error })
  936|      0|                        })?
  937|       |                    })
  938|   319k|                } else {
  939|   319k|                    // We ignore other xml attributes
  940|   319k|                }
  941|       |            } else {
  942|   336k|                let attribute_url = self.resolve_attribute_name(attribute.key)?;
  943|   332k|                if *attribute_url == *RDF_ID {
  944|  4.41k|                    let mut id = self.convert_attribute(&attribute)?;
  945|  3.87k|                    if !is_nc_name(&id) {
  946|  2.01k|                        return Err(RdfXmlSyntaxError::msg(format!(
  947|  2.01k|                            "{id} is not a valid rdf:ID value"
  948|  2.01k|                        ))
  949|  2.01k|                        .into());
  950|  1.85k|                    }
  951|  1.85k|                    id.insert(0, '#');
  952|  1.85k|                    id_attr = Some(id);
  953|   327k|                } else if *attribute_url == *RDF_BAG_ID {
  954|  8.54k|                    let bag_id = self.convert_attribute(&attribute)?;
  955|  7.13k|                    if !is_nc_name(&bag_id) {
  956|  4.72k|                        return Err(RdfXmlSyntaxError::msg(format!(
  957|  4.72k|                            "{bag_id} is not a valid rdf:bagID value"
  958|  4.72k|                        ))
  959|  4.72k|                        .into());
  960|  2.41k|                    }
  961|   319k|                } else if *attribute_url == *RDF_NODE_ID {
  962|   263k|                    let id = self.convert_attribute(&attribute)?;
  963|   262k|                    if !is_nc_name(&id) {
  964|  3.28k|                        return Err(RdfXmlSyntaxError::msg(format!(
  965|  3.28k|                            "{id} is not a valid rdf:nodeID value"
  966|  3.28k|                        ))
  967|  3.28k|                        .into());
  968|   258k|                    }
  969|   258k|                    node_id_attr = Some(BlankNode::new_unchecked(id));
  970|  55.5k|                } else if *attribute_url == *RDF_ABOUT {
  971|  7.68k|                    about_attr = Some(attribute);
  972|  47.8k|                } else if *attribute_url == *RDF_RESOURCE {
  973|  7.36k|                    resource_attr = Some(attribute);
  974|  40.4k|                } else if *attribute_url == *RDF_DATATYPE {
  975|  8.43k|                    datatype_attr = Some(attribute);
  976|  32.0k|                } else if *attribute_url == *RDF_PARSE_TYPE {
  977|  7.49k|                    parse_type = match attribute.value.as_ref() {
  978|  7.49k|                        b"Collection" => RdfXmlParseType::Collection,
  979|  6.53k|                        b"Literal" => RdfXmlParseType::Literal,
  980|  4.03k|                        b"Resource" => RdfXmlParseType::Resource,
  981|  7.49k|                        _ => RdfXmlParseType::Other,
  982|       |                    };
  983|  24.5k|                } else if attribute_url == rdf::TYPE.as_str() {
  984|  4.26k|                    type_attr = Some(attribute);
  985|  20.3k|                } else if RESERVED_RDF_ATTRIBUTES.contains(&&*attribute_url) {
  986|  2.94k|                    return Err(RdfXmlSyntaxError::msg(format!(
  987|  2.94k|                        "{attribute_url} is not a valid attribute"
  988|  2.94k|                    ))
  989|  2.94k|                    .into());
  990|       |                } else {
  991|  17.3k|                    property_attrs.push((
  992|  17.3k|                        self.parse_iri(attribute_url)?,
  993|  13.5k|                        self.convert_attribute(&attribute)?,
  994|       |                    ));
  995|       |                }
  996|       |            }
  997|       |        }
  998|       |
  999|       |        // Parsing with the base URI
 1000|   987k|        let id_attr = match id_attr {
 1001|  1.03k|            Some(iri) => {
 1002|  1.03k|                let iri = self.resolve_iri(&base_iri, iri)?;
 1003|      0|                if !self.unchecked {
 1004|      0|                    if self.known_rdf_id.contains(iri.as_str()) {
 1005|      0|                        return Err(RdfXmlSyntaxError::msg(format!(
 1006|      0|                            "{iri} has already been used as rdf:ID value"
 1007|      0|                        ))
 1008|      0|                        .into());
 1009|      0|                    }
 1010|      0|                    self.known_rdf_id.insert(iri.as_str().into());
 1011|      0|                }
 1012|      0|                Some(iri)
 1013|       |            }
 1014|   986k|            None => None,
 1015|       |        };
 1016|   986k|        let about_attr = match about_attr {
 1017|  6.81k|            Some(attr) => Some(self.convert_iri_attribute(&base_iri, &attr)?),
 1018|   979k|            None => None,
 1019|       |        };
 1020|   985k|        let resource_attr = match resource_attr {
 1021|  6.60k|            Some(attr) => Some(self.convert_iri_attribute(&base_iri, &attr)?),
 1022|   978k|            None => None,
 1023|       |        };
 1024|   983k|        let datatype_attr = match datatype_attr {
 1025|  7.77k|            Some(attr) => Some(self.convert_iri_attribute(&base_iri, &attr)?),
 1026|   975k|            None => None,
 1027|       |        };
 1028|   982k|        let type_attr = match type_attr {
 1029|  3.59k|            Some(attr) => Some(self.convert_iri_attribute(&base_iri, &attr)?),
 1030|   978k|            None => None,
 1031|       |        };
 1032|       |
 1033|   981k|        let expected_production = match self.state.last() {
 1034|   123k|            Some(RdfXmlState::Doc { .. }) => RdfXmlNextProduction::Rdf,
 1035|       |            Some(
 1036|       |                RdfXmlState::Rdf { .. }
 1037|       |                | RdfXmlState::PropertyElt { .. }
 1038|       |                | RdfXmlState::ParseTypeCollectionPropertyElt { .. },
 1039|   497k|            ) => RdfXmlNextProduction::NodeElt,
 1040|   345k|            Some(RdfXmlState::NodeElt { subject, .. }) => RdfXmlNextProduction::PropertyElt {
 1041|   345k|                subject: subject.clone(),
 1042|   345k|            },
 1043|       |            Some(RdfXmlState::ParseTypeLiteralPropertyElt { .. }) => {
 1044|      0|                return Err(
 1045|      0|                    RdfXmlSyntaxError::msg("ParseTypeLiteralPropertyElt production children should never be considered as a RDF/XML content").into()
 1046|      0|                );
 1047|       |            }
 1048|       |            None => {
 1049|  13.9k|                return Err(RdfXmlSyntaxError::msg(
 1050|  13.9k|                    "No state in the stack: the XML is not balanced",
 1051|  13.9k|                )
 1052|  13.9k|                .into());
 1053|       |            }
 1054|       |        };
 1055|       |
 1056|   967k|        let new_state = match expected_production {
 1057|       |            RdfXmlNextProduction::Rdf => {
 1058|   123k|                if *tag_name == *RDF_RDF {
 1059|  29.8k|                    RdfXmlState::Rdf { base_iri, language }
 1060|  93.4k|                } else if RESERVED_RDF_ELEMENTS.contains(&&*tag_name) {
 1061|  11.2k|                    return Err(RdfXmlSyntaxError::msg(format!(
 1062|  11.2k|                        "Invalid node element tag name: {tag_name}"
 1063|  11.2k|                    ))
 1064|  11.2k|                    .into());
 1065|       |                } else {
 1066|       |                    Self::build_node_elt(
 1067|  82.2k|                        self.parse_iri(tag_name)?,
 1068|  19.1k|                        base_iri,
 1069|  19.1k|                        language,
 1070|  19.1k|                        id_attr,
 1071|  19.1k|                        node_id_attr,
 1072|  19.1k|                        about_attr,
 1073|  19.1k|                        type_attr,
 1074|  19.1k|                        property_attrs,
 1075|  19.1k|                        results,
 1076|      0|                    )?
 1077|       |                }
 1078|       |            }
 1079|       |            RdfXmlNextProduction::NodeElt => {
 1080|   497k|                if RESERVED_RDF_ELEMENTS.contains(&&*tag_name) {
 1081|  15.2k|                    return Err(RdfXmlSyntaxError::msg(format!(
 1082|  15.2k|                        "Invalid property element tag name: {tag_name}"
 1083|  15.2k|                    ))
 1084|  15.2k|                    .into());
 1085|   482k|                }
 1086|   482k|                Self::build_node_elt(
 1087|   482k|                    self.parse_iri(tag_name)?,
 1088|   464k|                    base_iri,
 1089|   464k|                    language,
 1090|   464k|                    id_attr,
 1091|   464k|                    node_id_attr,
 1092|   464k|                    about_attr,
 1093|   464k|                    type_attr,
 1094|   464k|                    property_attrs,
 1095|   464k|                    results,
 1096|      0|                )?
 1097|       |            }
 1098|   345k|            RdfXmlNextProduction::PropertyElt { subject } => {
 1099|   345k|                let iri = if *tag_name == *RDF_LI {
 1100|  3.80k|                    let Some(RdfXmlState::NodeElt { li_counter, .. }) = self.state.last_mut()
 1101|       |                    else {
 1102|      0|                        return Err(RdfXmlSyntaxError::msg(format!(
 1103|      0|                            "Invalid property element tag name: {tag_name}"
 1104|      0|                        ))
 1105|      0|                        .into());
 1106|       |                    };
 1107|  3.80k|                    *li_counter += 1;
 1108|  3.80k|                    NamedNode::new_unchecked(format!(
 1109|  3.80k|                        "http://www.w3.org/1999/02/22-rdf-syntax-ns#_{li_counter}"
 1110|  3.80k|                    ))
 1111|   342k|                } else if RESERVED_RDF_ELEMENTS.contains(&&*tag_name)
 1112|   328k|                    || *tag_name == *RDF_DESCRIPTION
 1113|       |                {
 1114|  18.6k|                    return Err(RdfXmlSyntaxError::msg(format!(
 1115|  18.6k|                        "Invalid property element tag name: {tag_name}"
 1116|  18.6k|                    ))
 1117|  18.6k|                    .into());
 1118|       |                } else {
 1119|   323k|                    self.parse_iri(tag_name)?
 1120|       |                };
 1121|   298k|                match parse_type {
 1122|       |                    RdfXmlParseType::Default => {
 1123|   296k|                        if resource_attr.is_some()
 1124|   292k|                            || node_id_attr.is_some()
 1125|   285k|                            || !property_attrs.is_empty()
 1126|       |                        {
 1127|  12.1k|                            let object = match (resource_attr, node_id_attr)
 1128|       |                    {
 1129|  3.76k|                        (Some(resource_attr), None) => Subject::from(resource_attr),
 1130|  6.79k|                        (None, Some(node_id_attr)) => node_id_attr.into(),
 1131|  1.60k|                        (None, None) => BlankNode::default().into(),
 1132|      0|                        (Some(_), Some(_)) => return Err(RdfXmlSyntaxError::msg("Not both rdf:resource and rdf:nodeID could be set at the same time").into())
 1133|       |                    };
 1134|  12.1k|                            Self::emit_property_attrs(&object, property_attrs, &language, results);
 1135|  12.1k|                            if let Some(type_attr) = type_attr {
 1136|    191|                                results.push(Triple::new(object.clone(), rdf::TYPE, type_attr));
 1137|  11.9k|                            }
 1138|  12.1k|                            RdfXmlState::PropertyElt {
 1139|  12.1k|                                iri,
 1140|  12.1k|                                base_iri,
 1141|  12.1k|                                language,
 1142|  12.1k|                                subject,
 1143|  12.1k|                                object: Some(NodeOrText::Node(object)),
 1144|  12.1k|                                id_attr,
 1145|  12.1k|                                datatype_attr,
 1146|  12.1k|                            }
 1147|       |                        } else {
 1148|   284k|                            RdfXmlState::PropertyElt {
 1149|   284k|                                iri,
 1150|   284k|                                base_iri,
 1151|   284k|                                language,
 1152|   284k|                                subject,
 1153|   284k|                                object: None,
 1154|   284k|                                id_attr,
 1155|   284k|                                datatype_attr,
 1156|   284k|                            }
 1157|       |                        }
 1158|       |                    }
 1159|      0|                    RdfXmlParseType::Literal => RdfXmlState::ParseTypeLiteralPropertyElt {
 1160|      0|                        iri,
 1161|      0|                        base_iri,
 1162|      0|                        language,
 1163|      0|                        subject,
 1164|      0|                        writer: Writer::new(Vec::default()),
 1165|      0|                        id_attr,
 1166|      0|                        emit: true,
 1167|      0|                    },
 1168|      0|                    RdfXmlParseType::Resource => Self::build_parse_type_resource_property_elt(
 1169|      0|                        iri, base_iri, language, subject, id_attr, results,
 1170|      0|                    ),
 1171|      0|                    RdfXmlParseType::Collection => RdfXmlState::ParseTypeCollectionPropertyElt {
 1172|      0|                        iri,
 1173|      0|                        base_iri,
 1174|      0|                        language,
 1175|      0|                        subject,
 1176|      0|                        objects: Vec::default(),
 1177|      0|                        id_attr,
 1178|      0|                    },
 1179|  1.65k|                    RdfXmlParseType::Other => RdfXmlState::ParseTypeLiteralPropertyElt {
 1180|  1.65k|                        iri,
 1181|  1.65k|                        base_iri,
 1182|  1.65k|                        language,
 1183|  1.65k|                        subject,
 1184|  1.65k|                        writer: Writer::new(Vec::default()),
 1185|  1.65k|                        id_attr,
 1186|  1.65k|                        emit: false,
 1187|  1.65k|                    },
 1188|       |                }
 1189|       |            }
 1190|       |        };
 1191|   811k|        self.state.push(new_state);
 1192|   811k|        Ok(())
 1193|  1.41M|    }
_RNvMs5_NtCs5iIAVsTbYw4_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE15parse_end_eventB7_:
 1195|   412k|    fn parse_end_event(
 1196|   412k|        &mut self,
 1197|   412k|        event: &BytesEnd<'_>,
 1198|   412k|        results: &mut Vec<Triple>,
 1199|   412k|    ) -> Result<(), RdfXmlParseError> {
 1200|   412k|        // Literal case
 1201|   412k|        if self.in_literal_depth > 0 {
 1202|  6.95k|            if let Some(RdfXmlState::ParseTypeLiteralPropertyElt { writer, .. }) =
 1203|  6.95k|                self.state.last_mut()
 1204|       |            {
 1205|  6.95k|                writer.write_event(Event::End(BytesEnd::new(
 1206|  6.95k|                    self.reader.decoder().decode(event.name().as_ref())?,
 1207|      0|                )))?;
 1208|  5.30k|                self.in_literal_depth -= 1;
 1209|  5.30k|                return Ok(());
 1210|      0|            }
 1211|   405k|        }
 1212|       |
 1213|   405k|        if let Some(current_state) = self.state.pop() {
 1214|   388k|            self.end_state(current_state, results)?;
 1215|  16.4k|        }
 1216|   405k|        Ok(())
 1217|   412k|    }
_RNvMs5_NtCs5iIAVsTbYw4_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE16parse_text_eventB7_:
 1219|  1.32M|    fn parse_text_event(&mut self, event: &BytesText<'_>) -> Result<(), RdfXmlParseError> {
 1220|  1.32M|        let text = event.unescape_with(|e| self.resolve_entity(e))?.to_string();
 1221|   876k|        match self.state.last_mut() {
 1222|  84.0k|            Some(RdfXmlState::PropertyElt { object, .. }) => {
 1223|  84.0k|                if !event.iter().copied().all(is_whitespace) {
 1224|  81.2k|                    *object = Some(NodeOrText::Text(text));
 1225|  81.2k|                }
 1226|  84.0k|                Ok(())
 1227|       |            }
 1228|  16.2k|            Some(RdfXmlState::ParseTypeLiteralPropertyElt { writer, .. }) => {
 1229|  16.2k|                writer.write_event(Event::Text(BytesText::new(&text)))?;
 1230|  16.2k|                Ok(())
 1231|       |            }
 1232|       |            _ => {
 1233|   776k|                if event.iter().copied().all(is_whitespace) {
 1234|   596k|                    Ok(())
 1235|       |                } else {
 1236|   179k|                    Err(RdfXmlSyntaxError::msg(format!("Unexpected text event: '{text}'")).into())
 1237|       |                }
 1238|       |            }
 1239|       |        }
 1240|  1.32M|    }
_RNCNvMs5_NtCs5iIAVsTbYw4_8oxrdfxml6parserINtB7_12RdfXmlReaderRShE16parse_text_event0B9_:
 1220|  87.2k|        let text = event.unescape_with(|e| self.resolve_entity(e))?.to_string();
_RNvMs5_NtCs5iIAVsTbYw4_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE16resolve_tag_nameB7_:
 1242|  1.36M|    fn resolve_tag_name(&self, qname: QName<'_>) -> Result<String, RdfXmlParseError> {
 1243|  1.36M|        let (namespace, local_name) = self.reader.resolve_element(qname);
 1244|  1.36M|        self.resolve_ns_name(namespace, local_name)
 1245|  1.36M|    }
_RNvMs5_NtCs5iIAVsTbYw4_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE22resolve_attribute_nameB7_:
 1247|   336k|    fn resolve_attribute_name(&self, qname: QName<'_>) -> Result<String, RdfXmlParseError> {
 1248|   336k|        let (namespace, local_name) = self.reader.resolve_attribute(qname);
 1249|   336k|        self.resolve_ns_name(namespace, local_name)
 1250|   336k|    }
_RNvMs5_NtCs5iIAVsTbYw4_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE15resolve_ns_nameB7_:
 1252|  1.70M|    fn resolve_ns_name(
 1253|  1.70M|        &self,
 1254|  1.70M|        namespace: ResolveResult<'_>,
 1255|  1.70M|        local_name: LocalName<'_>,
 1256|  1.70M|    ) -> Result<String, RdfXmlParseError> {
 1257|  1.70M|        match namespace {
 1258|  1.48M|            ResolveResult::Bound(ns) => {
 1259|  1.48M|                let mut value = Vec::with_capacity(ns.as_ref().len() + local_name.as_ref().len());
 1260|  1.48M|                value.extend_from_slice(ns.as_ref());
 1261|  1.48M|                value.extend_from_slice(local_name.as_ref());
 1262|  1.48M|                Ok(unescape_with(&self.reader.decoder().decode(&value)?, |e| {
 1263|       |                    self.resolve_entity(e)
 1264|       |                })
 1265|  1.43M|                .map_err(Error::from)?
 1266|  1.38M|                .to_string())
 1267|       |            }
 1268|       |            ResolveResult::Unbound => {
 1269|   172k|                Err(RdfXmlSyntaxError::msg("XML namespaces are required in RDF/XML").into())
 1270|       |            }
 1271|  47.4k|            ResolveResult::Unknown(v) => Err(RdfXmlSyntaxError::msg(format!(
 1272|  47.4k|                "Unknown prefix {}:",
 1273|  47.4k|                self.reader.decoder().decode(&v)?
 1274|       |            ))
 1275|  36.5k|            .into()),
 1276|       |        }
 1277|  1.70M|    }
_RNCNvMs5_NtCs5iIAVsTbYw4_8oxrdfxml6parserINtB7_12RdfXmlReaderRShE15resolve_ns_name0B9_:
 1262|  16.1M|                Ok(unescape_with(&self.reader.decoder().decode(&value)?, |e| {
 1263|  16.1M|                    self.resolve_entity(e)
 1264|  16.1M|                })
_RNvMs5_NtCs5iIAVsTbYw4_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE14build_node_eltB7_:
 1280|   483k|    fn build_node_elt(
 1281|   483k|        iri: NamedNode,
 1282|   483k|        base_iri: Option<Iri<String>>,
 1283|   483k|        language: Option<String>,
 1284|   483k|        id_attr: Option<NamedNode>,
 1285|   483k|        node_id_attr: Option<BlankNode>,
 1286|   483k|        about_attr: Option<NamedNode>,
 1287|   483k|        type_attr: Option<NamedNode>,
 1288|   483k|        property_attrs: Vec<(NamedNode, String)>,
 1289|   483k|        results: &mut Vec<Triple>,
 1290|   483k|    ) -> Result<RdfXmlState, RdfXmlSyntaxError> {
 1291|   483k|        let subject = match (id_attr, node_id_attr, about_attr) {
 1292|      0|            (Some(id_attr), None, None) => Subject::from(id_attr),
 1293|   249k|            (None, Some(node_id_attr), None) => node_id_attr.into(),
 1294|  3.71k|            (None, None, Some(about_attr)) => about_attr.into(),
 1295|   230k|            (None, None, None) => BlankNode::default().into(),
 1296|       |            (Some(_), Some(_), _) => {
 1297|      0|                return Err(RdfXmlSyntaxError::msg(
 1298|      0|                    "Not both rdf:ID and rdf:nodeID could be set at the same time",
 1299|      0|                ))
 1300|       |            }
 1301|       |            (_, Some(_), Some(_)) => {
 1302|      0|                return Err(RdfXmlSyntaxError::msg(
 1303|      0|                    "Not both rdf:nodeID and rdf:resource could be set at the same time",
 1304|      0|                ))
 1305|       |            }
 1306|       |            (Some(_), _, Some(_)) => {
 1307|      0|                return Err(RdfXmlSyntaxError::msg(
 1308|      0|                    "Not both rdf:ID and rdf:resource could be set at the same time",
 1309|      0|                ))
 1310|       |            }
 1311|       |        };
 1312|       |
 1313|   483k|        Self::emit_property_attrs(&subject, property_attrs, &language, results);
 1314|       |
 1315|   483k|        if let Some(type_attr) = type_attr {
 1316|    572|            results.push(Triple::new(subject.clone(), rdf::TYPE, type_attr));
 1317|   483k|        }
 1318|       |
 1319|   483k|        if iri != *RDF_DESCRIPTION {
 1320|   472k|            results.push(Triple::new(subject.clone(), rdf::TYPE, iri));
 1321|   472k|        }
 1322|   483k|        Ok(RdfXmlState::NodeElt {
 1323|   483k|            base_iri,
 1324|   483k|            language,
 1325|   483k|            subject,
 1326|   483k|            li_counter: 0,
 1327|   483k|        })
 1328|   483k|    }
_RNvMs5_NtCs5iIAVsTbYw4_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE9end_stateB7_:
 1352|   388k|    fn end_state(
 1353|   388k|        &mut self,
 1354|   388k|        state: RdfXmlState,
 1355|   388k|        results: &mut Vec<Triple>,
 1356|   388k|    ) -> Result<(), RdfXmlSyntaxError> {
 1357|   388k|        match state {
 1358|       |            RdfXmlState::PropertyElt {
 1359|  89.3k|                iri,
 1360|  89.3k|                language,
 1361|  89.3k|                subject,
 1362|  89.3k|                id_attr,
 1363|  89.3k|                datatype_attr,
 1364|  89.3k|                object,
 1365|       |                ..
 1366|       |            } => {
 1367|  89.3k|                let object = match object {
 1368|  15.1k|                    Some(NodeOrText::Node(node)) => Term::from(node),
 1369|  22.6k|                    Some(NodeOrText::Text(text)) => {
 1370|  22.6k|                        Self::new_literal(text, language, datatype_attr).into()
 1371|       |                    }
 1372|  51.5k|                    None => Self::new_literal(String::new(), language, datatype_attr).into(),
 1373|       |                };
 1374|  89.3k|                let triple = Triple::new(subject, iri, object);
 1375|  89.3k|                if let Some(id_attr) = id_attr {
 1376|      0|                    Self::reify(triple.clone(), id_attr, results);
 1377|  89.3k|                }
 1378|  89.3k|                results.push(triple);
 1379|       |            }
 1380|       |            RdfXmlState::ParseTypeCollectionPropertyElt {
 1381|      0|                iri,
 1382|      0|                subject,
 1383|      0|                id_attr,
 1384|      0|                objects,
 1385|      0|                ..
 1386|      0|            } => {
 1387|      0|                let mut current_node = Subject::from(rdf::NIL);
 1388|      0|                for object in objects.into_iter().rev() {
 1389|      0|                    let subject = Subject::from(BlankNode::default());
 1390|      0|                    results.push(Triple::new(subject.clone(), rdf::FIRST, object));
 1391|      0|                    results.push(Triple::new(subject.clone(), rdf::REST, current_node));
 1392|      0|                    current_node = subject;
 1393|      0|                }
 1394|      0|                let triple = Triple::new(subject, iri, current_node);
 1395|      0|                if let Some(id_attr) = id_attr {
 1396|      0|                    Self::reify(triple.clone(), id_attr, results);
 1397|      0|                }
 1398|      0|                results.push(triple);
 1399|       |            }
 1400|       |            RdfXmlState::ParseTypeLiteralPropertyElt {
 1401|    599|                iri,
 1402|    599|                subject,
 1403|    599|                id_attr,
 1404|    599|                writer,
 1405|    599|                emit,
 1406|    599|                ..
 1407|    599|            } => {
 1408|    599|                if emit {
 1409|      0|                    let object = writer.into_inner();
 1410|      0|                    if object.is_empty() {
 1411|      0|                        return Err(RdfXmlSyntaxError::msg(format!(
 1412|      0|                            "No value found for rdf:XMLLiteral value of property {iri}"
 1413|      0|                        )));
 1414|      0|                    }
 1415|      0|                    let triple = Triple::new(
 1416|      0|                        subject,
 1417|      0|                        iri,
 1418|      0|                        Literal::new_typed_literal(
 1419|      0|                            str::from_utf8(&object).map_err(|_| {
 1420|       |                                RdfXmlSyntaxError::msg(
 1421|       |                                    "The XML literal is not in valid UTF-8".to_owned(),
 1422|       |                                )
 1423|      0|                            })?,
 1424|       |                            rdf::XML_LITERAL,
 1425|       |                        ),
 1426|       |                    );
 1427|      0|                    if let Some(id_attr) = id_attr {
 1428|      0|                        Self::reify(triple.clone(), id_attr, results);
 1429|      0|                    }
 1430|      0|                    results.push(triple);
 1431|    599|                }
 1432|       |            }
 1433|   267k|            RdfXmlState::NodeElt { subject, .. } => match self.state.last_mut() {
 1434|  18.1k|                Some(RdfXmlState::PropertyElt { object, .. }) => {
 1435|  18.1k|                    *object = Some(NodeOrText::Node(subject))
 1436|       |                }
 1437|      0|                Some(RdfXmlState::ParseTypeCollectionPropertyElt { objects, .. }) => {
 1438|      0|                    objects.push(subject)
 1439|       |                }
 1440|   248k|                _ => (),
 1441|       |            },
 1442|  31.7k|            _ => (),
 1443|       |        }
 1444|   388k|        Ok(())
 1445|   388k|    }
_RNvMs5_NtCs5iIAVsTbYw4_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE11new_literalB7_:
 1447|  74.1k|    fn new_literal(
 1448|  74.1k|        value: String,
 1449|  74.1k|        language: Option<String>,
 1450|  74.1k|        datatype: Option<NamedNode>,
 1451|  74.1k|    ) -> Literal {
 1452|  74.1k|        if let Some(datatype) = datatype {
 1453|  4.00k|            Literal::new_typed_literal(value, datatype)
 1454|  70.1k|        } else if let Some(language) = language {
 1455|      0|            Literal::new_language_tagged_literal_unchecked(value, language)
 1456|       |        } else {
 1457|  70.1k|            Literal::new_simple_literal(value)
 1458|       |        }
 1459|  74.1k|    }
_RNvMs5_NtCs5iIAVsTbYw4_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE19emit_property_attrsB7_:
 1476|   495k|    fn emit_property_attrs(
 1477|   495k|        subject: &Subject,
 1478|   495k|        literal_attributes: Vec<(NamedNode, String)>,
 1479|   495k|        language: &Option<String>,
 1480|   495k|        results: &mut Vec<Triple>,
 1481|   495k|    ) {
 1482|   499k|        for (literal_predicate, literal_value) in literal_attributes {
 1483|  3.67k|            results.push(Triple::new(
 1484|  3.67k|                subject.clone(),
 1485|  3.67k|                literal_predicate,
 1486|  3.67k|                if let Some(language) = language.clone() {
 1487|      0|                    Literal::new_language_tagged_literal_unchecked(literal_value, language)
 1488|       |                } else {
 1489|  3.67k|                    Literal::new_simple_literal(literal_value)
 1490|       |                },
 1491|       |            ));
 1492|       |        }
 1493|   495k|    }
_RNvMs5_NtCs5iIAVsTbYw4_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE17convert_attributeB7_:
 1495|   315k|    fn convert_attribute(&self, attribute: &Attribute<'_>) -> Result<String, RdfXmlParseError> {
 1496|   315k|        Ok(attribute
 1497|   315k|            .decode_and_unescape_value_with(&self.reader, |e| self.resolve_entity(e))?
 1498|   303k|            .into_owned())
 1499|   315k|    }
_RNCNvMs5_NtCs5iIAVsTbYw4_8oxrdfxml6parserINtB7_12RdfXmlReaderRShE17convert_attribute0B9_:
 1497|  11.8k|            .decode_and_unescape_value_with(&self.reader, |e| self.resolve_entity(e))?
_RNvMs5_NtCs5iIAVsTbYw4_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE21convert_iri_attributeB7_:
 1501|  24.7k|    fn convert_iri_attribute(
 1502|  24.7k|        &self,
 1503|  24.7k|        base_iri: &Option<Iri<String>>,
 1504|  24.7k|        attribute: &Attribute<'_>,
 1505|  24.7k|    ) -> Result<NamedNode, RdfXmlParseError> {
 1506|  24.7k|        Ok(self.resolve_iri(base_iri, self.convert_attribute(attribute)?)?)
 1507|  24.7k|    }
_RNvMs5_NtCs5iIAVsTbYw4_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE11resolve_iriB7_:
 1509|  23.4k|    fn resolve_iri(
 1510|  23.4k|        &self,
 1511|  23.4k|        base_iri: &Option<Iri<String>>,
 1512|  23.4k|        relative_iri: String,
 1513|  23.4k|    ) -> Result<NamedNode, RdfXmlSyntaxError> {
 1514|  23.4k|        if let Some(base_iri) = base_iri {
 1515|       |            Ok(NamedNode::new_unchecked(
 1516|      0|                if self.unchecked {
 1517|      0|                    base_iri.resolve_unchecked(&relative_iri)
 1518|       |                } else {
 1519|      0|                    base_iri.resolve(&relative_iri).map_err(|error| {
 1520|       |                        RdfXmlSyntaxError(SyntaxErrorKind::InvalidIri {
 1521|       |                            iri: relative_iri,
 1522|       |                            error,
 1523|       |                        })
 1524|      0|                    })?
 1525|       |                }
 1526|      0|                .into_inner(),
 1527|       |            ))
 1528|       |        } else {
 1529|  23.4k|            self.parse_iri(relative_iri)
 1530|       |        }
 1531|  23.4k|    }
_RNvMs5_NtCs5iIAVsTbYw4_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE9parse_iriB7_:
 1533|   929k|    fn parse_iri(&self, relative_iri: String) -> Result<NamedNode, RdfXmlSyntaxError> {
 1534|   929k|        Ok(NamedNode::new_unchecked(if self.unchecked {
 1535|  2.22k|            relative_iri
 1536|       |        } else {
 1537|   926k|            Iri::parse(relative_iri.clone())
 1538|   926k|                .map_err(|error| {
 1539|       |                    RdfXmlSyntaxError(SyntaxErrorKind::InvalidIri {
 1540|       |                        iri: relative_iri,
 1541|       |                        error,
 1542|       |                    })
 1543|   926k|                })?
 1544|   809k|                .into_inner()
 1545|       |        }))
 1546|   929k|    }
_RNCNvMs5_NtCs5iIAVsTbYw4_8oxrdfxml6parserINtB7_12RdfXmlReaderRShE9parse_iri0B9_:
 1538|   117k|                .map_err(|error| {
 1539|   117k|                    RdfXmlSyntaxError(SyntaxErrorKind::InvalidIri {
 1540|   117k|                        iri: relative_iri,
 1541|   117k|                        error,
 1542|   117k|                    })
 1543|   117k|                })?
_RNvMs5_NtCs5iIAVsTbYw4_8oxrdfxml6parserINtB5_12RdfXmlReaderRShE14resolve_entityB7_:
 1548|  16.2M|    fn resolve_entity(&self, e: &str) -> Option<&str> {
 1549|  16.2M|        resolve_xml_entity(e).or_else(|| self.custom_entities.get(e).map(String::as_str))
 1550|  16.2M|    }
_RNCNvMs5_NtCs5iIAVsTbYw4_8oxrdfxml6parserINtB7_12RdfXmlReaderRShE14resolve_entity0B9_:
 1549|  54.0k|        resolve_xml_entity(e).or_else(|| self.custom_entities.get(e).map(String::as_str))
_RNCNvNtCs5iIAVsTbYw4_8oxrdfxml6parser10is_nc_name0B5_:
 1555|  7.93M|    is_name(name) && name.chars().all(|c| c != ':')
_RNvMNtCs5iIAVsTbYw4_8oxrdfxml6parserNtB2_12RdfXmlParser11parse_slice:
  193|  58.4k|    pub fn parse_slice(self, slice: &[u8]) -> FromSliceRdfXmlReader<'_> {
  194|  58.4k|        FromSliceRdfXmlReader {
  195|  58.4k|            results: Vec::new(),
  196|  58.4k|            reader: self.parse(slice),
  197|  58.4k|            reader_buffer: Vec::default(),
  198|  58.4k|        }
  199|  58.4k|    }
_RNvXs1_NtCs5iIAVsTbYw4_8oxrdfxml6parserNtB5_21FromSliceRdfXmlReaderNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next:
  524|  1.88M|    fn next(&mut self) -> Option<Self::Item> {
  525|       |        loop {
  526|  3.93M|            if let Some(triple) = self.results.pop() {
  527|   566k|                return Some(Ok(triple));
  528|  3.36M|            } else if self.reader.is_end {
  529|  58.4k|                return None;
  530|  3.30M|            }
  531|  3.30M|            if let Err(RdfXmlParseError::Syntax(e)) = self.parse_step() {
  532|       |                // I/O errors can't happen
  533|  1.26M|                return Some(Err(e));
  534|  2.04M|            }
  535|       |        }
  536|  1.88M|    }
_RNvMs2_NtCs5iIAVsTbYw4_8oxrdfxml6parserNtB5_21FromSliceRdfXmlReader10parse_step:
  606|  3.30M|    fn parse_step(&mut self) -> Result<(), RdfXmlParseError> {
  607|  3.30M|        self.reader_buffer.clear();
  608|  3.30M|        let event = self
  609|  3.30M|            .reader
  610|  3.30M|            .reader
  611|  3.30M|            .read_event_into(&mut self.reader_buffer)?;
  612|  3.28M|        self.reader.parse_event(event, &mut self.results)
  613|  3.30M|    }
_RNvMs4_NtCs5iIAVsTbYw4_8oxrdfxml6parserNtB5_11RdfXmlState8base_iri:
  747|  1.03M|    fn base_iri(&self) -> Option<&Iri<String>> {
  748|  1.03M|        match self {
  749|   151k|            Self::Doc { base_iri, .. }
  750|   245k|            | Self::Rdf { base_iri, .. }
  751|   366k|            | Self::NodeElt { base_iri, .. }
  752|   265k|            | Self::PropertyElt { base_iri, .. }
  753|      0|            | Self::ParseTypeCollectionPropertyElt { base_iri, .. }
  754|  1.03M|            | Self::ParseTypeLiteralPropertyElt { base_iri, .. } => base_iri.as_ref(),
  755|  1.03M|        }
  756|  1.03M|    }
_RNvMs4_NtCs5iIAVsTbYw4_8oxrdfxml6parserNtB5_11RdfXmlState8language:
  758|  1.03M|    fn language(&self) -> Option<&String> {
  759|  1.03M|        match self {
  760|   151k|            Self::Doc { .. } => None,
  761|   245k|            Self::Rdf { language, .. }
  762|   366k|            | Self::NodeElt { language, .. }
  763|   265k|            | Self::PropertyElt { language, .. }
  764|      0|            | Self::ParseTypeCollectionPropertyElt { language, .. }
  765|   878k|            | Self::ParseTypeLiteralPropertyElt { language, .. } => language.as_ref(),
  766|       |        }
  767|  1.03M|    }
_RNvNtCs5iIAVsTbYw4_8oxrdfxml6parser10is_nc_name:
 1553|   273k|fn is_nc_name(name: &str) -> bool {
 1554|   273k|    // Name - (Char* ':' Char*)
 1555|   273k|    is_name(name) && name.chars().all(|c| c != ':')
 1556|   273k|}
_RNvNtCs5iIAVsTbYw4_8oxrdfxml6parser7is_name:
 1558|   273k|fn is_name(name: &str) -> bool {
 1559|   273k|    // NameStartChar (NameChar)*
 1560|   273k|    let mut c = name.chars();
 1561|   273k|    if !c.next().map_or(false, is_name_start_char) {
 1562|  4.23k|        return false;
 1563|   268k|    }
 1564|   268k|    c.all(is_name_char)
 1565|   273k|}
_RNvNtCs5iIAVsTbYw4_8oxrdfxml6parser13is_whitespace:
 1567|  1.45M|fn is_whitespace(c: u8) -> bool {
 1568|  1.45M|    matches!(c, b' ' | b'\t' | b'\n' | b'\r')
 1569|  1.45M|}
_RNvNtCs5iIAVsTbYw4_8oxrdfxml6parser7is_utf8:
 1571|  51.5k|fn is_utf8(encoding: &[u8]) -> bool {
 1572|  29.2k|    matches!(
 1573|  51.5k|        encoding.to_ascii_lowercase().as_slice(),
 1574|  51.5k|        b"unicode-1-1-utf-8"
 1575|  46.2k|            | b"unicode11utf8"
 1576|       |            | b"unicode20utf8"
 1577|  40.1k|            | b"utf-8"
 1578|  9.30k|            | b"utf8"
 1579|  7.87k|            | b"x-unicode20utf8"
 1580|       |    )
 1581|  51.5k|}

_RNvMNtCs5iIAVsTbYw4_8oxrdfxml10serializerNtB2_16RdfXmlSerializer3newCsXnvbX6AWbe_7rdf_xml:
   47|  28.9k|    pub fn new() -> Self {
   48|  28.9k|        Self {
   49|  28.9k|            prefixes: BTreeMap::new(),
   50|  28.9k|        }
   51|  28.9k|    }
_RINvMNtCs5iIAVsTbYw4_8oxrdfxml10serializerNtB3_16RdfXmlSerializer18serialize_to_writeINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECsXnvbX6AWbe_7rdf_xml:
   92|  28.9k|    pub fn serialize_to_write<W: Write>(self, write: W) -> ToWriteRdfXmlWriter<W> {
   93|  28.9k|        ToWriteRdfXmlWriter {
   94|  28.9k|            writer: Writer::new_with_indent(write, b'\t', 1),
   95|  28.9k|            inner: self.inner_writer(),
   96|  28.9k|        }
   97|  28.9k|    }
_RINvMs0_NtCs5iIAVsTbYw4_8oxrdfxml10serializerNtB6_17InnerRdfXmlWriter12write_tripleRNtNtCsjHb8aGRHKzq_5oxrdf6triple6TripleECsXnvbX6AWbe_7rdf_xml:
  276|   282k|    fn write_triple<'a>(
  277|   282k|        &mut self,
  278|   282k|        t: impl Into<TripleRef<'a>>,
  279|   282k|        output: &mut Vec<Event<'a>>,
  280|   282k|    ) -> io::Result<()> {
  281|   282k|        if self.current_subject.is_none() {
  282|  14.6k|            self.write_start(output);
  283|   267k|        }
  284|       |
  285|   282k|        let triple = t.into();
  286|   282k|        // We open a new rdf:Description if useful
  287|   282k|        if self.current_subject.as_ref().map(Subject::as_ref) != Some(triple.subject) {
  288|   244k|            if self.current_subject.is_some() {
  289|   229k|                output.push(Event::End(
  290|   229k|                    self.current_resource_tag
  291|   229k|                        .take()
  292|   229k|                        .map_or_else(|| BytesEnd::new("rdf:Description"), BytesEnd::new),
  293|   229k|                ));
  294|   229k|            }
  295|   244k|            self.current_subject = Some(triple.subject.into_owned());
  296|       |
  297|   244k|            let (mut description_open, with_type_tag) = if triple.predicate == rdf::TYPE {
  298|   234k|                if let TermRef::NamedNode(t) = triple.object {
  299|   234k|                    let (prop_qname, prop_xmlns) = self.uri_to_qname_and_xmlns(t);
  300|   234k|                    let mut description_open = BytesStart::new(prop_qname.clone());
  301|   234k|                    if let Some(prop_xmlns) = prop_xmlns {
  302|   230k|                        description_open.push_attribute(prop_xmlns);
  303|   230k|                    }
  304|   234k|                    self.current_resource_tag = Some(prop_qname.into_owned());
  305|   234k|                    (description_open, true)
  306|       |                } else {
  307|    151|                    (BytesStart::new("rdf:Description"), false)
  308|       |                }
  309|       |            } else {
  310|  9.36k|                (BytesStart::new("rdf:Description"), false)
  311|       |            };
  312|   244k|            match triple.subject {
  313|  2.00k|                SubjectRef::NamedNode(node) => {
  314|  2.00k|                    description_open.push_attribute(("rdf:about", node.as_str()))
  315|       |                }
  316|   242k|                SubjectRef::BlankNode(node) => {
  317|   242k|                    description_open.push_attribute(("rdf:nodeID", node.as_str()))
  318|       |                }
  319|       |                _ => {
  320|      0|                    return Err(io::Error::new(
  321|      0|                        io::ErrorKind::InvalidInput,
  322|      0|                        "RDF/XML only supports named or blank subject",
  323|      0|                    ))
  324|       |                }
  325|       |            }
  326|   244k|            output.push(Event::Start(description_open));
  327|   244k|            if with_type_tag {
  328|   234k|                return Ok(()); // No need for a value
  329|  9.51k|            }
  330|  38.2k|        }
  331|       |
  332|  47.8k|        let (prop_qname, prop_xmlns) = self.uri_to_qname_and_xmlns(triple.predicate);
  333|  47.8k|        let mut property_open = BytesStart::new(prop_qname.clone());
  334|  47.8k|        if let Some(prop_xmlns) = prop_xmlns {
  335|  38.8k|            property_open.push_attribute(prop_xmlns);
  336|  38.8k|        }
  337|  47.8k|        let content = match triple.object {
  338|  3.20k|            TermRef::NamedNode(node) => {
  339|  3.20k|                property_open.push_attribute(("rdf:resource", node.as_str()));
  340|  3.20k|                None
  341|       |            }
  342|  5.80k|            TermRef::BlankNode(node) => {
  343|  5.80k|                property_open.push_attribute(("rdf:nodeID", node.as_str()));
  344|  5.80k|                None
  345|       |            }
  346|  38.8k|            TermRef::Literal(literal) => {
  347|  38.8k|                if let Some(language) = literal.language() {
  348|      0|                    property_open.push_attribute(("xml:lang", language));
  349|  38.8k|                } else if !literal.is_plain() {
  350|  1.94k|                    property_open.push_attribute(("rdf:datatype", literal.datatype().as_str()));
  351|  36.8k|                }
  352|  38.8k|                Some(literal.value())
  353|       |            }
  354|       |            _ => {
  355|      0|                return Err(io::Error::new(
  356|      0|                    io::ErrorKind::InvalidInput,
  357|      0|                    "RDF/XML only supports named, blank or literal object",
  358|      0|                ))
  359|       |            }
  360|       |        };
  361|  47.8k|        if let Some(content) = content {
  362|  38.8k|            output.push(Event::Start(property_open));
  363|  38.8k|            output.push(Event::Text(BytesText::new(content)));
  364|  38.8k|            output.push(Event::End(BytesEnd::new(prop_qname)));
  365|  38.8k|        } else {
  366|  9.00k|            output.push(Event::Empty(property_open));
  367|  9.00k|        }
  368|  47.8k|        Ok(())
  369|   282k|    }
_RINvMs_NtCs5iIAVsTbYw4_8oxrdfxml10serializerINtB5_19ToWriteRdfXmlWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE12write_tripleRNtNtCsjHb8aGRHKzq_5oxrdf6triple6TripleECsXnvbX6AWbe_7rdf_xml:
  184|   282k|    pub fn write_triple<'a>(&mut self, t: impl Into<TripleRef<'a>>) -> io::Result<()> {
  185|   282k|        let mut buffer = Vec::new();
  186|   282k|        self.inner.write_triple(t, &mut buffer)?;
  187|   282k|        self.flush_buffer(&mut buffer)
  188|   282k|    }
_RNCINvMs0_NtCs5iIAVsTbYw4_8oxrdfxml10serializerNtB8_17InnerRdfXmlWriter12write_tripleRNtNtCsjHb8aGRHKzq_5oxrdf6triple6TripleE0CsXnvbX6AWbe_7rdf_xml:
  292|  8.34k|                        .map_or_else(|| BytesEnd::new("rdf:Description"), BytesEnd::new),
_RNvMs_NtCs5iIAVsTbYw4_8oxrdfxml10serializerINtB4_19ToWriteRdfXmlWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE12flush_bufferCsXnvbX6AWbe_7rdf_xml:
  198|   311k|    fn flush_buffer(&mut self, buffer: &mut Vec<Event<'_>>) -> io::Result<()> {
  199|   700k|        for event in buffer.drain(0..) {
  200|   700k|            self.writer.write_event(event).map_err(map_err)?;
  201|       |        }
  202|   311k|        Ok(())
  203|   311k|    }
_RNvMs_NtCs5iIAVsTbYw4_8oxrdfxml10serializerINtB4_19ToWriteRdfXmlWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE6finishCsXnvbX6AWbe_7rdf_xml:
  191|  28.9k|    pub fn finish(mut self) -> io::Result<W> {
  192|  28.9k|        let mut buffer = Vec::new();
  193|  28.9k|        self.inner.finish(&mut buffer);
  194|  28.9k|        self.flush_buffer(&mut buffer)?;
  195|  28.9k|        Ok(self.writer.into_inner())
  196|  28.9k|    }
_RNCNvMs0_NtCs5iIAVsTbYw4_8oxrdfxml10serializerNtB7_17InnerRdfXmlWriter6finish0B9_:
  388|  1.17k|                    .map_or_else(|| BytesEnd::new("rdf:Description"), BytesEnd::new),
_RNCNvNtCs5iIAVsTbYw4_8oxrdfxml10serializer9split_iri0B5_:
  429|  4.89M|    if let Some(position_base) = iri.rfind(|c| !is_name_char(c) || c == ':') {
_RNCNvNtCs5iIAVsTbYw4_8oxrdfxml10serializer9split_iris_0B5_:
  430|   502k|        if let Some(position_add) = iri[position_base..].find(|c| is_name_start_char(c) && c != ':')
_RNvMNtCs5iIAVsTbYw4_8oxrdfxml10serializerNtB2_16RdfXmlSerializer12inner_writer:
  139|  28.9k|    fn inner_writer(mut self) -> InnerRdfXmlWriter {
  140|  28.9k|        self.prefixes.insert(
  141|  28.9k|            "http://www.w3.org/1999/02/22-rdf-syntax-ns#".into(),
  142|  28.9k|            "rdf".into(),
  143|  28.9k|        );
  144|  28.9k|        InnerRdfXmlWriter {
  145|  28.9k|            current_subject: None,
  146|  28.9k|            current_resource_tag: None,
  147|  28.9k|            prefixes: self.prefixes,
  148|  28.9k|        }
  149|  28.9k|    }
_RNvMs0_NtCs5iIAVsTbYw4_8oxrdfxml10serializerNtB5_17InnerRdfXmlWriter11write_start:
  371|  28.9k|    fn write_start(&self, output: &mut Vec<Event<'_>>) {
  372|  28.9k|        output.push(Event::Decl(BytesDecl::new("1.0", Some("UTF-8"), None)));
  373|  28.9k|        let mut rdf_open = BytesStart::new("rdf:RDF");
  374|  57.8k|        for (prefix_value, prefix_name) in &self.prefixes {
  375|  28.9k|            rdf_open.push_attribute((
  376|  28.9k|                format!("xmlns:{prefix_name}").as_str(),
  377|  28.9k|                prefix_value.as_str(),
  378|  28.9k|            ));
  379|  28.9k|        }
  380|  28.9k|        output.push(Event::Start(rdf_open))
  381|  28.9k|    }
_RNvMs0_NtCs5iIAVsTbYw4_8oxrdfxml10serializerNtB5_17InnerRdfXmlWriter6finish:
  383|  28.9k|    fn finish(&mut self, output: &mut Vec<Event<'static>>) {
  384|  28.9k|        if self.current_subject.is_some() {
  385|  14.6k|            output.push(Event::End(
  386|  14.6k|                self.current_resource_tag
  387|  14.6k|                    .take()
  388|  14.6k|                    .map_or_else(|| BytesEnd::new("rdf:Description"), BytesEnd::new),
  389|  14.6k|            ));
  390|  14.6k|        } else {
  391|  14.2k|            self.write_start(output);
  392|  14.2k|        }
  393|  28.9k|        output.push(Event::End(BytesEnd::new("rdf:RDF")));
  394|  28.9k|    }
_RNvMs0_NtCs5iIAVsTbYw4_8oxrdfxml10serializerNtB5_17InnerRdfXmlWriter22uri_to_qname_and_xmlns:
  396|   282k|    fn uri_to_qname_and_xmlns<'a>(
  397|   282k|        &self,
  398|   282k|        uri: NamedNodeRef<'a>,
  399|   282k|    ) -> (Cow<'a, str>, Option<(&'a str, &'a str)>) {
  400|   282k|        let (prop_prefix, prop_value) = split_iri(uri.as_str());
  401|   282k|        if let Some(prop_prefix) = self.prefixes.get(prop_prefix) {
  402|       |            (
  403|  9.62k|                if prop_prefix.is_empty() {
  404|      0|                    Cow::Borrowed(prop_value)
  405|       |                } else {
  406|  9.62k|                    Cow::Owned(format!("{prop_prefix}:{prop_value}"))
  407|       |                },
  408|  9.62k|                None,
  409|       |            )
  410|   272k|        } else if prop_prefix == "http://www.w3.org/2000/xmlns/" {
  411|  3.40k|            (Cow::Owned(format!("xmlns:{prop_value}")), None)
  412|   269k|        } else if prop_value.is_empty() {
  413|   102k|            (Cow::Borrowed("p:"), Some(("xmlns:p", prop_prefix)))
  414|       |        } else {
  415|   167k|            (Cow::Borrowed(prop_value), Some(("xmlns", prop_prefix)))
  416|       |        }
  417|   282k|    }
_RNvNtCs5iIAVsTbYw4_8oxrdfxml10serializer9split_iri:
  428|   282k|fn split_iri(iri: &str) -> (&str, &str) {
  429|   282k|    if let Some(position_base) = iri.rfind(|c| !is_name_char(c) || c == ':') {
  430|   282k|        if let Some(position_add) = iri[position_base..].find(|c| is_name_start_char(c) && c != ':')
  431|       |        {
  432|   177k|            (
  433|   177k|                &iri[..position_base + position_add],
  434|   177k|                &iri[position_base + position_add..],
  435|   177k|            )
  436|       |        } else {
  437|   105k|            (iri, "")
  438|       |        }
  439|       |    } else {
  440|      0|        (iri, "")
  441|       |    }
  442|   282k|}

_RNvNtCs5iIAVsTbYw4_8oxrdfxml5utils18is_name_start_char:
    1|  13.3M|pub fn is_name_start_char(c: char) -> bool {
    2|       |    // ":" | [A-Z] | "_" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
    3|  13.3M|    matches!(c,
    4|       |        ':'
    5|  7.99M|        | 'A'..='Z'
    6|       |        | '_'
    7|  6.61M|        | 'a'..='z'
    8|   290k|        | '\u{00C0}'..='\u{00D6}'
    9|   290k|        | '\u{00D8}'..='\u{00F6}'
   10|   290k|        | '\u{00F8}'..='\u{02FF}'
   11|   289k|        | '\u{0370}'..='\u{037D}'
   12|  66.9k|        | '\u{037F}'..='\u{1FFF}'
   13|  63.8k|        | '\u{200C}'..='\u{200D}'
   14|  63.8k|        | '\u{2070}'..='\u{218F}'
   15|  63.8k|        | '\u{2C00}'..='\u{2FEF}'
   16|  63.8k|        | '\u{3001}'..='\u{D7FF}'
   17|  60.3k|        | '\u{F900}'..='\u{FDCF}'
   18|  60.3k|        | '\u{FDF0}'..='\u{FFFD}'
   19|  20.6k|        | '\u{10000}'..='\u{EFFFF}')
   20|  13.3M|}
_RNvNtCs5iIAVsTbYw4_8oxrdfxml5utils12is_name_char:
   22|  12.5M|pub fn is_name_char(c: char) -> bool {
   23|  12.5M|    // NameStartChar | "-" | "." | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
   24|  12.5M|    is_name_start_char(c)
   25|  4.97M|        || matches!(c,  '-' | '.' | '0'..='9' | '\u{B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
   26|  12.5M|}


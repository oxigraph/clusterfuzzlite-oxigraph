_RNvCsicuAMuMse2k_9getrandom16getrandom_uninitCsbT0BH6pPOpx_9rand_core:
  344|    289|pub fn getrandom_uninit(dest: &mut [MaybeUninit<u8>]) -> Result<&mut [u8], Error> {
  345|    289|    if !dest.is_empty() {
  346|    289|        imp::getrandom_inner(dest)?;
  347|      0|    }
  348|       |    // SAFETY: `dest` has been fully initialized by `imp::getrandom_inner`
  349|       |    // since it returned `Ok`.
  350|    289|    Ok(unsafe { slice_assume_init_mut(dest) })
  351|    289|}
_RNvCsicuAMuMse2k_9getrandom9getrandomCsbT0BH6pPOpx_9rand_core:
  314|    289|pub fn getrandom(dest: &mut [u8]) -> Result<(), Error> {
  315|    289|    // SAFETY: The `&mut MaybeUninit<_>` reference doesn't escape, and
  316|    289|    // `getrandom_uninit` guarantees it will never de-initialize any part of
  317|    289|    // `dest`.
  318|    289|    getrandom_uninit(unsafe { slice_as_uninit_mut(dest) })?;
  319|    289|    Ok(())
  320|    289|}

_RNvNtCsicuAMuMse2k_9getrandom3imp9getrandom:
   42|    290|unsafe fn getrandom(
   43|    290|    buf: *mut libc::c_void,
   44|    290|    buflen: libc::size_t,
   45|    290|    flags: libc::c_uint,
   46|    290|) -> libc::ssize_t {
   47|    290|    libc::syscall(libc::SYS_getrandom, buf, buflen, flags) as libc::ssize_t
   48|    290|}
_RNCNvNtCsicuAMuMse2k_9getrandom3imp15getrandom_inner0B5_:
   21|    289|        sys_fill_exact(dest, |buf| unsafe {
   22|    289|            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   23|    289|        })
_RNvNtCsicuAMuMse2k_9getrandom3imp22is_getrandom_available:
   29|      1|fn is_getrandom_available() -> bool {
   30|      1|    let res = unsafe { getrandom(core::ptr::null_mut(), 0, libc::GRND_NONBLOCK) };
   31|      1|    if res < 0 {
   32|      0|        match last_os_error().raw_os_error() {
   33|      0|            Some(libc::ENOSYS) => false, // No kernel support
   34|      0|            Some(libc::EPERM) => false,  // Blocked by seccomp
   35|      0|            _ => true,
   36|       |        }
   37|       |    } else {
   38|      1|        true
   39|       |    }
   40|      1|}
_RNvNtCsicuAMuMse2k_9getrandom3imp15getrandom_inner:
   17|    289|pub fn getrandom_inner(dest: &mut [MaybeUninit<u8>]) -> Result<(), Error> {
   18|    289|    // getrandom(2) was introduced in Linux 3.17
   19|    289|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   20|    289|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   21|    289|        sys_fill_exact(dest, |buf| unsafe {
   22|       |            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   23|    289|        })
   24|       |    } else {
   25|      0|        use_file::getrandom_inner(dest)
   26|       |    }
   27|    289|}

_RINvNtCsicuAMuMse2k_9getrandom4util21slice_assume_init_muthECsbT0BH6pPOpx_9rand_core:
   74|    289|pub unsafe fn slice_assume_init_mut<T>(slice: &mut [MaybeUninit<T>]) -> &mut [T] {
   75|    289|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   76|    289|    &mut *(slice as *mut [MaybeUninit<T>] as *mut [T])
   77|    289|}
_RINvNtCsicuAMuMse2k_9getrandom4util19slice_as_uninit_muthECsbT0BH6pPOpx_9rand_core:
   98|    289|pub unsafe fn slice_as_uninit_mut<T>(slice: &mut [T]) -> &mut [MaybeUninit<T>] {
   99|    289|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
  100|    289|    &mut *(slice as *mut [T] as *mut [MaybeUninit<T>])
  101|    289|}
_RNCINvMs_NtCsicuAMuMse2k_9getrandom4utilNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   66|      1|        self.0.unsync_init(|| init() as usize) != 0
_RINvMNtCsicuAMuMse2k_9getrandom4utilNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   46|    289|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   47|    289|        // Relaxed ordering is fine, as we only have a single atomic variable.
   48|    289|        let mut val = self.0.load(Relaxed);
   49|    289|        if val == Self::UNINIT {
   50|      1|            val = init();
   51|      1|            self.0.store(val, Relaxed);
   52|    288|        }
   53|    289|        val
   54|    289|    }
_RINvMs_NtCsicuAMuMse2k_9getrandom4utilNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   65|    289|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   66|    289|        self.0.unsync_init(|| init() as usize) != 0
   67|    289|    }

_RINvNtCsicuAMuMse2k_9getrandom9util_libc14sys_fill_exactNCNvNtB4_3imp15getrandom_inner0EB4_:
   67|    289|pub fn sys_fill_exact(
   68|    289|    mut buf: &mut [MaybeUninit<u8>],
   69|    289|    sys_fill: impl Fn(&mut [MaybeUninit<u8>]) -> libc::ssize_t,
   70|    289|) -> Result<(), Error> {
   71|    578|    while !buf.is_empty() {
   72|    289|        let res = sys_fill(buf);
   73|    289|        if res < 0 {
   74|      0|            let err = last_os_error();
   75|      0|            // We should try again if the call was interrupted.
   76|      0|            if err.raw_os_error() != Some(libc::EINTR) {
   77|      0|                return Err(err);
   78|      0|            }
   79|    289|        } else {
   80|    289|            // We don't check for EOF (ret = 0) as the data we are reading
   81|    289|            // should be an infinite stream of random bytes.
   82|    289|            let len = min(res as usize, buf.len());
   83|    289|            buf = &mut buf[len..];
   84|    289|        }
   85|       |    }
   86|    289|    Ok(())
   87|    289|}

_RNvNvCs8B1jHDnA03z_4trig1__19___libfuzzer_sys_run:
  241|  22.6k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|  22.6k|            }
rust_fuzzer_test_input:
  209|  22.6k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  22.6k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  22.6k|                }
  223|  22.6k|
  224|  22.6k|                __libfuzzer_sys_run(bytes);
  225|  22.6k|                0
  226|  22.6k|            }
LLVMFuzzerTestOneInput:
   58|  22.6k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  22.6k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  22.6k|    });
   63|  22.6k|
   64|  22.6k|    match test_input {
   65|  22.6k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  22.6k|}
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}
_RNCNvCs6YwqOVjEKi8_13libfuzzer_sys15test_input_wrap0B3_:
   59|  22.6k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  22.6k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  22.6k|        rust_fuzzer_test_input(data_slice)
   62|  22.6k|    });

_RINvNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECs4WjTcpTVJQo_5oxttl:
 1125|  59.6k|pub(crate) unsafe fn search_slice_with_raw(
 1126|  59.6k|    haystack: &[u8],
 1127|  59.6k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  59.6k|) -> Option<usize> {
 1129|  59.6k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  59.6k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  59.6k|    // a &[u8].
 1132|  59.6k|    let start = haystack.as_ptr();
 1133|  59.6k|    let end = start.add(haystack.len());
 1134|  59.6k|    let found = find_raw(start, end)?;
 1135|  2.83k|    Some(found.distance(start))
 1136|  59.6k|}
_RINvMs3_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4next0ECs4WjTcpTVJQo_5oxttl:
 1044|  16.9M|    pub(crate) unsafe fn next(
 1045|  16.9M|        &mut self,
 1046|  16.9M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  16.9M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  16.9M|        let found = find_raw(self.start, self.end)?;
 1057|  43.5k|        let result = found.distance(self.original_start);
 1058|  43.5k|        self.start = found.add(1);
 1059|  43.5k|        Some(result)
 1060|  16.9M|    }
_RINvNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr7memchr20ECs4WjTcpTVJQo_5oxttl:
 1125|  2.05M|pub(crate) unsafe fn search_slice_with_raw(
 1126|  2.05M|    haystack: &[u8],
 1127|  2.05M|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  2.05M|) -> Option<usize> {
 1129|  2.05M|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  2.05M|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  2.05M|    // a &[u8].
 1132|  2.05M|    let start = haystack.as_ptr();
 1133|  2.05M|    let end = start.add(haystack.len());
 1134|  2.05M|    let found = find_raw(start, end)?;
 1135|  1.59M|    Some(found.distance(start))
 1136|  2.05M|}
_RNvMs3_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  16.9M|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  16.9M|        Iter {
 1029|  16.9M|            original_start: haystack.as_ptr(),
 1030|  16.9M|            start: haystack.as_ptr(),
 1031|  16.9M|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  16.9M|            haystack: core::marker::PhantomData,
 1033|  16.9M|        }
 1034|  16.9M|    }
_RNvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE7needle1B8_:
  117|  92.3k|    pub(crate) fn needle1(&self) -> u8 {
  118|  92.3k|        self.s1
  119|  92.3k|    }
_RINvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|   649k|    unsafe fn search_chunk(
  671|   649k|        &self,
  672|   649k|        cur: *const u8,
  673|   649k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|   649k|    ) -> Option<*const u8> {
  675|   649k|        let chunk = V::load_unaligned(cur);
  676|   649k|        let eq1 = self.v1.cmpeq(chunk);
  677|   649k|        let eq2 = self.v2.cmpeq(chunk);
  678|   649k|        let mask = eq1.or(eq2).movemask();
  679|   649k|        if mask.has_non_zero() {
  680|   118k|            let mask1 = eq1.movemask();
  681|   118k|            let mask2 = eq2.movemask();
  682|   118k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|   531k|            None
  685|       |        }
  686|   649k|    }
_RINvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  3.68M|    unsafe fn search_chunk(
  671|  3.68M|        &self,
  672|  3.68M|        cur: *const u8,
  673|  3.68M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  3.68M|    ) -> Option<*const u8> {
  675|  3.68M|        let chunk = V::load_unaligned(cur);
  676|  3.68M|        let eq1 = self.v1.cmpeq(chunk);
  677|  3.68M|        let eq2 = self.v2.cmpeq(chunk);
  678|  3.68M|        let mask = eq1.or(eq2).movemask();
  679|  3.68M|        if mask.has_non_zero() {
  680|   999k|            let mask1 = eq1.movemask();
  681|   999k|            let mask2 = eq2.movemask();
  682|   999k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  2.69M|            None
  685|       |        }
  686|  3.68M|    }
_RNvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  10.5k|    pub(crate) unsafe fn find_raw(
  144|  10.5k|        &self,
  145|  10.5k|        start: *const u8,
  146|  10.5k|        end: *const u8,
  147|  10.5k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  10.5k|        let topos = V::Mask::first_offset;
  155|  10.5k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  10.5k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|    221|            return Some(cur);
  167|  10.3k|        }
  168|  10.3k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  10.3k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  10.3k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  10.3k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  14.7k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  4.40k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|     64|                return Some(cur);
  216|  4.33k|            }
  217|  4.33k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  10.3k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  8.85k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  8.85k|            return self.search_chunk(cur, topos);
  228|  1.45k|        }
  229|  1.45k|        None
  230|  10.5k|    }
_RINvNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  16.5k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  16.5k|    start: *const u8,
 1150|  16.5k|    end: *const u8,
 1151|  16.5k|    confirm: F,
 1152|  16.5k|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  16.5k|    let mut ptr = start;
 1155|   108k|    while ptr < end {
 1156|  92.3k|        if confirm(*ptr) {
 1157|    354|            return Some(ptr);
 1158|  91.9k|        }
 1159|  91.9k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  16.1k|    None
 1162|  16.5k|}
_RNvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  19.6M|    pub(crate) fn needle1(&self) -> u8 {
  462|  19.6M|        self.s1
  463|  19.6M|    }
_RINvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  23.8k|    unsafe fn search_chunk(
  417|  23.8k|        &self,
  418|  23.8k|        cur: *const u8,
  419|  23.8k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  23.8k|    ) -> Option<*const u8> {
  421|  23.8k|        let chunk = V::load_unaligned(cur);
  422|  23.8k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  23.8k|        if mask.has_non_zero() {
  424|    324|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  23.5k|            None
  427|       |        }
  428|  23.8k|    }
_RNvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE3newB8_:
  111|  59.6k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  59.6k|        One { s1: needle, v1: V::splat(needle) }
  113|  59.6k|    }
_RNvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  19.5M|    pub(crate) fn needle2(&self) -> u8 {
  468|  19.5M|        self.s2
  469|  19.5M|    }
_RNvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iE3newB8_:
  111|  59.6k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  59.6k|        One { s1: needle, v1: V::splat(needle) }
  113|  59.6k|    }
_RNvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iE8find_rawBa_:
  493|  2.34M|    pub(crate) unsafe fn find_raw(
  494|  2.34M|        &self,
  495|  2.34M|        start: *const u8,
  496|  2.34M|        end: *const u8,
  497|  2.34M|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  2.34M|        let topos = V::Mask::first_offset;
  505|  2.34M|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  2.34M|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   965k|            return Some(cur);
  517|  1.38M|        }
  518|  1.38M|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  1.38M|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  1.38M|        if len >= Self::LOOP_SIZE {
  522|   747k|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|   588k|                let a = V::load_aligned(cur);
  526|   588k|                let b = V::load_aligned(cur.add(V::BYTES));
  527|   588k|                let eqa1 = self.v1.cmpeq(a);
  528|   588k|                let eqb1 = self.v1.cmpeq(b);
  529|   588k|                let eqa2 = self.v2.cmpeq(a);
  530|   588k|                let eqb2 = self.v2.cmpeq(b);
  531|   588k|                let or1 = eqa1.or(eqb1);
  532|   588k|                let or2 = eqa2.or(eqb2);
  533|   588k|                let or3 = or1.or(or2);
  534|   588k|                if or3.movemask_will_have_non_zero() {
  535|   336k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|   336k|                    if mask.has_non_zero() {
  537|   171k|                        return Some(cur.add(topos(mask)));
  538|   164k|                    }
  539|   164k|
  540|   164k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|   164k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|   252k|                }
  544|   252k|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   888k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  1.37M|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   336k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  13.4k|                return Some(cur);
  554|   323k|            }
  555|   323k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|  1.03M|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|  1.00M|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|  1.00M|            return self.search_chunk(cur, topos);
  566|  31.0k|        }
  567|  31.0k|        None
  568|  2.34M|    }
_RINvNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|  12.4M|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  12.4M|    start: *const u8,
 1150|  12.4M|    end: *const u8,
 1151|  12.4M|    confirm: F,
 1152|  12.4M|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  12.4M|    let mut ptr = start;
 1155|  31.8M|    while ptr < end {
 1156|  19.6M|        if confirm(*ptr) {
 1157|   188k|            return Some(ptr);
 1158|  19.4M|        }
 1159|  19.4M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  12.2M|    None
 1162|  12.4M|}
_RNvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE8find_rawBa_:
  493|   344k|    pub(crate) unsafe fn find_raw(
  494|   344k|        &self,
  495|   344k|        start: *const u8,
  496|   344k|        end: *const u8,
  497|   344k|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   344k|        let topos = V::Mask::first_offset;
  505|   344k|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   344k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   105k|            return Some(cur);
  517|   239k|        }
  518|   239k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   239k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   239k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   239k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   322k|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  87.3k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  3.92k|                return Some(cur);
  554|  83.4k|            }
  555|  83.4k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   235k|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   218k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   218k|            return self.search_chunk(cur, topos);
  566|  16.8k|        }
  567|  16.8k|        None
  568|   344k|    }
_RNvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iE3newBa_:
  450|  19.0M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  19.0M|        Two {
  452|  19.0M|            s1: needle1,
  453|  19.0M|            s2: needle2,
  454|  19.0M|            v1: V::splat(needle1),
  455|  19.0M|            v2: V::splat(needle2),
  456|  19.0M|        }
  457|  19.0M|    }
_RNvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  28.1k|    pub(crate) unsafe fn find_raw(
  144|  28.1k|        &self,
  145|  28.1k|        start: *const u8,
  146|  28.1k|        end: *const u8,
  147|  28.1k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  28.1k|        let topos = V::Mask::first_offset;
  155|  28.1k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  28.1k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|    866|            return Some(cur);
  167|  27.2k|        }
  168|  27.2k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  27.2k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  27.2k|        if len >= Self::LOOP_SIZE {
  172|  19.1k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|  10.0k|                let a = V::load_aligned(cur);
  176|  10.0k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|  10.0k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|  10.0k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|  10.0k|                let eqa = self.v1.cmpeq(a);
  180|  10.0k|                let eqb = self.v1.cmpeq(b);
  181|  10.0k|                let eqc = self.v1.cmpeq(c);
  182|  10.0k|                let eqd = self.v1.cmpeq(d);
  183|  10.0k|                let or1 = eqa.or(eqb);
  184|  10.0k|                let or2 = eqc.or(eqd);
  185|  10.0k|                let or3 = or1.or(or2);
  186|  10.0k|                if or3.movemask_will_have_non_zero() {
  187|    669|                    let mask = eqa.movemask();
  188|    669|                    if mask.has_non_zero() {
  189|    164|                        return Some(cur.add(topos(mask)));
  190|    505|                    }
  191|    505|
  192|    505|                    let mask = eqb.movemask();
  193|    505|                    if mask.has_non_zero() {
  194|    206|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|    299|                    }
  196|    299|
  197|    299|                    let mask = eqc.movemask();
  198|    299|                    if mask.has_non_zero() {
  199|    160|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|    139|                    }
  201|    139|
  202|    139|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|    139|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  9.34k|                }
  206|  9.34k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  17.5k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  58.9k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  32.6k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    295|                return Some(cur);
  216|  32.4k|            }
  217|  32.4k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  26.2k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  25.2k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  25.2k|            return self.search_chunk(cur, topos);
  228|  1.06k|        }
  229|  1.06k|        None
  230|  28.1k|    }
_RNvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE3newBa_:
  450|  19.0M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  19.0M|        Two {
  452|  19.0M|            s1: needle1,
  453|  19.0M|            s2: needle2,
  454|  19.0M|            v1: V::splat(needle1),
  455|  19.0M|            v2: V::splat(needle2),
  456|  19.0M|        }
  457|  19.0M|    }
_RINvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  86.0k|    unsafe fn search_chunk(
  417|  86.0k|        &self,
  418|  86.0k|        cur: *const u8,
  419|  86.0k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  86.0k|    ) -> Option<*const u8> {
  421|  86.0k|        let chunk = V::load_unaligned(cur);
  422|  86.0k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  86.0k|        if mask.has_non_zero() {
  424|  1.48k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  84.5k|            None
  427|       |        }
  428|  86.0k|    }

_RNCNvMs2_NtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  19.6M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  19.6M|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  19.6M|                })
_RNvMs2_NtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNCNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|  92.3k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|  92.3k|                    b == self.sse2.needle1()
  194|  92.3k|                })
_RNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  28.1k|    unsafe fn find_raw_avx2(
  397|  28.1k|        &self,
  398|  28.1k|        start: *const u8,
  399|  28.1k|        end: *const u8,
  400|  28.1k|    ) -> Option<*const u8> {
  401|  28.1k|        self.avx2.find_raw(start, end)
  402|  28.1k|    }
_RNvMs2_NtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  19.0M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  19.0M|        Two {
  558|  19.0M|            sse2: generic::Two::new(needle1, needle2),
  559|  19.0M|            avx2: generic::Two::new(needle1, needle2),
  560|  19.0M|        }
  561|  19.0M|    }
_RNvMs2_NtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  19.0M|    pub unsafe fn find_raw(
  655|  19.0M|        &self,
  656|  19.0M|        start: *const u8,
  657|  19.0M|        end: *const u8,
  658|  19.0M|    ) -> Option<*const u8> {
  659|  19.0M|        if start >= end {
  660|  3.90M|            return None;
  661|  15.1M|        }
  662|  15.1M|        let len = end.distance(start);
  663|  15.1M|        if len < __m256i::BYTES {
  664|  12.7M|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  12.4M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  12.4M|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|   344k|                self.find_raw_sse2(start, end)
  674|       |            };
  675|  2.34M|        }
  676|  2.34M|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|  2.34M|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|  2.34M|        // enough to run on the vector routine. Pointer validity is caller's
  679|  2.34M|        // responsibility.
  680|  2.34M|        //
  681|  2.34M|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|  2.34M|        // means we'd have to annotate this routine with `target_feature`.
  683|  2.34M|        // Which is fine, because this routine is `unsafe` anyway and the
  684|  2.34M|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|  2.34M|        // The real problem is that a routine with a `target_feature`
  686|  2.34M|        // annotation generally can't be inlined into caller code unless
  687|  2.34M|        // the caller code has the same target feature annotations. Namely,
  688|  2.34M|        // the common case (at time of writing) is for calling code to not
  689|  2.34M|        // have the `avx2` target feature enabled *at compile time*. Without
  690|  2.34M|        // `target_feature` on this routine, it can be inlined which will
  691|  2.34M|        // handle some of the short-haystack cases above without touching the
  692|  2.34M|        // architecture specific code.
  693|  2.34M|        self.find_raw_avx2(start, end)
  694|  19.0M|    }
_RNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  59.6k|    pub unsafe fn find_raw(
  180|  59.6k|        &self,
  181|  59.6k|        start: *const u8,
  182|  59.6k|        end: *const u8,
  183|  59.6k|    ) -> Option<*const u8> {
  184|  59.6k|        if start >= end {
  185|  4.39k|            return None;
  186|  55.2k|        }
  187|  55.2k|        let len = end.distance(start);
  188|  55.2k|        if len < __m256i::BYTES {
  189|  27.1k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  16.5k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  16.5k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  10.5k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  28.1k|        }
  201|  28.1k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  28.1k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  28.1k|        // enough to run on the vector routine. Pointer validity is caller's
  204|  28.1k|        // responsibility.
  205|  28.1k|        //
  206|  28.1k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  28.1k|        // means we'd have to annotate this routine with `target_feature`.
  208|  28.1k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  28.1k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  28.1k|        // The real problem is that a routine with a `target_feature`
  211|  28.1k|        // annotation generally can't be inlined into caller code unless
  212|  28.1k|        // the caller code has the same target feature annotations. Namely,
  213|  28.1k|        // the common case (at time of writing) is for calling code to not
  214|  28.1k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  28.1k|        // `target_feature` on this routine, it can be inlined which will
  216|  28.1k|        // handle some of the short-haystack cases above without touching the
  217|  28.1k|        // architecture specific code.
  218|  28.1k|        self.find_raw_avx2(start, end)
  219|  59.6k|    }
_RNvMs2_NtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|   344k|    unsafe fn find_raw_sse2(
  765|   344k|        &self,
  766|   344k|        start: *const u8,
  767|   344k|        end: *const u8,
  768|   344k|    ) -> Option<*const u8> {
  769|   344k|        self.sse2.find_raw(start, end)
  770|   344k|    }
_RNvMs2_NtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|  2.34M|    unsafe fn find_raw_avx2(
  805|  2.34M|        &self,
  806|  2.34M|        start: *const u8,
  807|  2.34M|        end: *const u8,
  808|  2.34M|    ) -> Option<*const u8> {
  809|  2.34M|        self.avx2.find_raw(start, end)
  810|  2.34M|    }
_RNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  10.5k|    unsafe fn find_raw_sse2(
  337|  10.5k|        &self,
  338|  10.5k|        start: *const u8,
  339|  10.5k|        end: *const u8,
  340|  10.5k|    ) -> Option<*const u8> {
  341|  10.5k|        self.sse2.find_raw(start, end)
  342|  10.5k|    }
_RNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  59.6k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  59.6k|        One {
   71|  59.6k|            sse2: generic::One::new(needle),
   72|  59.6k|            avx2: generic::One::new(needle),
   73|  59.6k|        }
   74|  59.6k|    }

_RNvNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  19.0M|pub(crate) fn memchr2_raw(
  221|  19.0M|    n1: u8,
  222|  19.0M|    n2: u8,
  223|  19.0M|    start: *const u8,
  224|  19.0M|    end: *const u8,
  225|  19.0M|) -> Option<*const u8> {
  226|  19.0M|    // SAFETY: We provide a valid function pointer type.
  227|  19.0M|    unsafe_ifunc!(
  228|  19.0M|        Two,
  229|  19.0M|        find_raw,
  230|  19.0M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  19.0M|        Option<*const u8>,
  232|  19.0M|        start,
  233|  19.0M|        end,
  234|  19.0M|        n1,
  235|  19.0M|        n2
  236|  19.0M|    )
  237|  19.0M|}
_RNvNvNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  19.0M|        unsafe fn find_avx2(
   79|  19.0M|            $($needle: u8),+,
   80|  19.0M|            $hay_start: *const u8,
   81|  19.0M|            $hay_end: *const u8,
   82|  19.0M|        ) -> $retty {
   83|  19.0M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  19.0M|            $memchrty::new_unchecked($($needle),+)
   85|  19.0M|                .$memchrfind($hay_start, $hay_end)
   86|  19.0M|        }
_RNvNvNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  59.6k|        unsafe fn find_avx2(
   79|  59.6k|            $($needle: u8),+,
   80|  59.6k|            $hay_start: *const u8,
   81|  59.6k|            $hay_end: *const u8,
   82|  59.6k|        ) -> $retty {
   83|  59.6k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  59.6k|            $memchrty::new_unchecked($($needle),+)
   85|  59.6k|                .$memchrfind($hay_start, $hay_end)
   86|  59.6k|        }
_RNvNvNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_646memchr10memchr_raw:
  174|  59.6k|pub(crate) fn memchr_raw(
  175|  59.6k|    n1: u8,
  176|  59.6k|    start: *const u8,
  177|  59.6k|    end: *const u8,
  178|  59.6k|) -> Option<*const u8> {
  179|  59.6k|    // SAFETY: We provide a valid function pointer type.
  180|  59.6k|    unsafe_ifunc!(
  181|  59.6k|        One,
  182|  59.6k|        find_raw,
  183|  59.6k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  59.6k|        Option<*const u8>,
  185|  59.6k|        start,
  186|  59.6k|        end,
  187|  59.6k|        n1
  188|  59.6k|    )
  189|  59.6k|}

_RNvXNtCs8oHv9mjUfNq_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  20.7M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  20.7M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  20.7M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  20.7M|    }
_RNvXNtCs8oHv9mjUfNq_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|  1.66M|    fn as_usize(self) -> usize {
   27|  1.66M|        self as usize
   28|  1.66M|    }

_RNCNvXs3_NtCs8oHv9mjUfNq_6memchr6memchrNtB7_7Memchr2NtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4next0Cs4WjTcpTVJQo_5oxttl:
  395|  16.9M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNCNvNtCs8oHv9mjUfNq_6memchr6memchr7memchr20Cs4WjTcpTVJQo_5oxttl:
   96|  2.05M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|  2.05M|            memchr2_raw(needle1, needle2, start, end)
   98|  2.05M|        })
_RNvXs3_NtCs8oHv9mjUfNq_6memchr6memchrNtB5_7Memchr2NtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4nextCs4WjTcpTVJQo_5oxttl:
  390|  16.9M|    fn next(&mut self) -> Option<usize> {
  391|  16.9M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  16.9M|        // pointers returns will fall within the start and end bounds, and this
  393|  16.9M|        // upholds the safety contract of `self.it.next`.
  394|  16.9M|        unsafe {
  395|  16.9M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  16.9M|        }
  397|  16.9M|    }
_RNvNtCs8oHv9mjUfNq_6memchr6memchr6memchrCs4WjTcpTVJQo_5oxttl:
   27|  59.6k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  59.6k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  59.6k|    // pointer between start and end.
   30|  59.6k|    unsafe {
   31|  59.6k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  59.6k|        })
   34|  59.6k|    }
   35|  59.6k|}
_RNvNtCs8oHv9mjUfNq_6memchr6memchr12memchr2_iterCs4WjTcpTVJQo_5oxttl:
  232|  16.9M|pub fn memchr2_iter<'h>(
  233|  16.9M|    needle1: u8,
  234|  16.9M|    needle2: u8,
  235|  16.9M|    haystack: &'h [u8],
  236|  16.9M|) -> Memchr2<'h> {
  237|  16.9M|    Memchr2::new(needle1, needle2, haystack)
  238|  16.9M|}
_RNvMs2_NtCs8oHv9mjUfNq_6memchr6memchrNtB5_7Memchr23newCs4WjTcpTVJQo_5oxttl:
  377|  16.9M|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  16.9M|        Memchr2 {
  379|  16.9M|            needle1,
  380|  16.9M|            needle2,
  381|  16.9M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  16.9M|        }
  383|  16.9M|    }
_RNvNtCs8oHv9mjUfNq_6memchr6memchr7memchr2Cs4WjTcpTVJQo_5oxttl:
   92|  2.05M|pub fn memchr2(needle1: u8, needle2: u8, haystack: &[u8]) -> Option<usize> {
   93|  2.05M|    // SAFETY: memchr2_raw, when a match is found, always returns a valid
   94|  2.05M|    // pointer between start and end.
   95|  2.05M|    unsafe {
   96|  2.05M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|       |            memchr2_raw(needle1, needle2, start, end)
   98|  2.05M|        })
   99|  2.05M|    }
  100|  2.05M|}
_RNvNtCs8oHv9mjUfNq_6memchr6memchr11memchr2_rawCs4WjTcpTVJQo_5oxttl:
  574|  19.0M|unsafe fn memchr2_raw(
  575|  19.0M|    needle1: u8,
  576|  19.0M|    needle2: u8,
  577|  19.0M|    start: *const u8,
  578|  19.0M|    end: *const u8,
  579|  19.0M|) -> Option<*const u8> {
  580|  19.0M|    #[cfg(target_arch = "x86_64")]
  581|  19.0M|    {
  582|  19.0M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  19.0M|    }
  584|  19.0M|    #[cfg(target_arch = "wasm32")]
  585|  19.0M|    {
  586|  19.0M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  19.0M|    }
  588|  19.0M|    #[cfg(target_arch = "aarch64")]
  589|  19.0M|    {
  590|  19.0M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  19.0M|    }
  592|  19.0M|    #[cfg(not(any(
  593|  19.0M|        target_arch = "x86_64",
  594|  19.0M|        target_arch = "wasm32",
  595|  19.0M|        target_arch = "aarch64"
  596|  19.0M|    )))]
  597|  19.0M|    {
  598|  19.0M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  19.0M|            .find_raw(start, end)
  600|  19.0M|    }
  601|  19.0M|}
_RNvNtCs8oHv9mjUfNq_6memchr6memchr10memchr_rawB3_:
  504|  59.6k|unsafe fn memchr_raw(
  505|  59.6k|    needle: u8,
  506|  59.6k|    start: *const u8,
  507|  59.6k|    end: *const u8,
  508|  59.6k|) -> Option<*const u8> {
  509|  59.6k|    #[cfg(target_arch = "x86_64")]
  510|  59.6k|    {
  511|  59.6k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  59.6k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  59.6k|        // time. This function also handles using a fallback if neither AVX2
  514|  59.6k|        // nor SSE2 (unusual) are available.
  515|  59.6k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  59.6k|    }
  517|  59.6k|    #[cfg(target_arch = "wasm32")]
  518|  59.6k|    {
  519|  59.6k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  59.6k|    }
  521|  59.6k|    #[cfg(target_arch = "aarch64")]
  522|  59.6k|    {
  523|  59.6k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  59.6k|    }
  525|  59.6k|    #[cfg(not(any(
  526|  59.6k|        target_arch = "x86_64",
  527|  59.6k|        target_arch = "wasm32",
  528|  59.6k|        target_arch = "aarch64"
  529|  59.6k|    )))]
  530|  59.6k|    {
  531|  59.6k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  59.6k|    }
  533|  59.6k|}
_RNCNvNtCs8oHv9mjUfNq_6memchr6memchr6memchr0B5_:
   31|  59.6k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|  59.6k|            memchr_raw(needle, start, end)
   33|  59.6k|        })

_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86sse2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  225|   910k|        unsafe fn movemask(self) -> SensibleMoveMask {
  226|   910k|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  227|   910k|        }
_RNvXs_NtCs8oHv9mjUfNq_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  148|  5.38M|    fn has_non_zero(self) -> bool {
  149|  5.38M|        self.0 != 0
  150|  5.38M|    }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  275|  7.37M|        unsafe fn movemask(self) -> SensibleMoveMask {
  276|  7.37M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  277|  7.37M|        }
_RNvXs_NtCs8oHv9mjUfNq_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  173|  1.45M|    fn first_offset(self) -> usize {
  174|  1.45M|        // We are dealing with little endian here (and if we aren't, we swap
  175|  1.45M|        // the bytes so we are in practice), where the most significant byte
  176|  1.45M|        // is at a higher address. That means the least significant bit that
  177|  1.45M|        // is set corresponds to the position of our first matching byte.
  178|  1.45M|        // That position corresponds to the number of zeros after the least
  179|  1.45M|        // significant bit.
  180|  1.45M|        self.get_for_offset().trailing_zeros() as usize
  181|  1.45M|    }
_RNvYNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtNtCs8oHv9mjUfNq_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   65|   598k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   66|   598k|        self.movemask().has_non_zero()
   67|   598k|    }
_RNvMNtCs8oHv9mjUfNq_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  128|  1.45M|    fn get_for_offset(self) -> u32 {
  129|  1.45M|        #[cfg(target_endian = "big")]
  130|  1.45M|        {
  131|  1.45M|            self.0.swap_bytes()
  132|  1.45M|        }
  133|  1.45M|        #[cfg(target_endian = "little")]
  134|  1.45M|        {
  135|  1.45M|            self.0
  136|  1.45M|        }
  137|  1.45M|    }
_RNvXs_NtCs8oHv9mjUfNq_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  163|  1.61M|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  164|  1.61M|        SensibleMoveMask(self.0 | other.0)
  165|  1.61M|    }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86sse2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  230|  1.32M|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  231|  1.32M|            _mm_cmpeq_epi8(self, vector2)
  232|  1.32M|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  265|  1.21M|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  266|  1.21M|            _mm256_load_si256(data as *const __m256i)
  267|  1.21M|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector2or:
  290|  5.48M|        unsafe fn or(self, vector2: Self) -> __m256i {
  291|  5.48M|            _mm256_or_si256(self, vector2)
  292|  5.48M|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  280|  9.85M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  281|  9.85M|            _mm256_cmpeq_epi8(self, vector2)
  282|  9.85M|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86sse2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  220|   673k|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  221|   673k|            _mm_loadu_si128(data as *const __m128i)
  222|   673k|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86sse2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  210|  38.0M|        unsafe fn splat(byte: u8) -> __m128i {
  211|  38.0M|            _mm_set1_epi8(byte as i8)
  212|  38.0M|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86sse2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iNtB4_6Vector2or:
  240|   649k|        unsafe fn or(self, vector2: Self) -> __m128i {
  241|   649k|            _mm_or_si128(self, vector2)
  242|   649k|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  270|  3.77M|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  271|  3.77M|            _mm256_loadu_si256(data as *const __m256i)
  272|  3.77M|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  260|  38.0M|        unsafe fn splat(byte: u8) -> __m256i {
  261|  38.0M|            _mm256_set1_epi8(byte as i8)
  262|  38.0M|        }

_RNvMs2_NtCsfr4O1C3G5Ja_9once_cell3impINtB5_8OnceCellNtNtCsdBW21Yiwikk_5alloc6string6StringE14is_initializedCs6YwqOVjEKi8_13libfuzzer_sys:
   49|  22.6k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  22.6k|        // An `Acquire` load is enough because that makes all the initialization
   51|  22.6k|        // operations visible to us, and, this being a fast path, weaker
   52|  22.6k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  22.6k|        // `SeqCst` operations on the slow path.
   54|  22.6k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  22.6k|    }

_RNvMs4_NtCsfr4O1C3G5Ja_9once_cell4syncINtB5_8OnceCellNtNtCsdBW21Yiwikk_5alloc6string6StringE3getCs6YwqOVjEKi8_13libfuzzer_sys:
  963|  22.6k|        pub fn get(&self) -> Option<&T> {
  964|  22.6k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  22.6k|                None
  969|       |            }
  970|  22.6k|        }

_RNvMCsebFzSuz8Vhk_10oxilangtagINtB2_11LanguageTagReE10into_innerCs4WjTcpTVJQo_5oxttl:
   54|  25.6k|    pub fn into_inner(self) -> T {
   55|  25.6k|        self.tag
   56|  25.6k|    }
_RNvMCsebFzSuz8Vhk_10oxilangtagINtB2_11LanguageTagReE5parseCs4WjTcpTVJQo_5oxttl:
   41|  36.2k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   42|  36.2k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   43|  25.6k|        Ok(Self { tag, positions })
   44|  36.2k|    }
_RNvXsE_CsebFzSuz8Vhk_10oxilangtagNtB5_16VoidOutputBufferNtNtCsl2lhD68vXAd_4core7default7Default7defaultCs4WjTcpTVJQo_5oxttl:
  547|  36.2k|#[derive(Default)]
_RINvCsebFzSuz8Vhk_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECsbrE1BkJ52QU_5oxrdf:
  621|  28.3k|fn parse_langtag(
  622|  28.3k|    input: &str,
  623|  28.3k|    output: &mut impl OutputBuffer,
  624|  28.3k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  625|  28.3k|    #[derive(PartialEq, Eq)]
  626|  28.3k|    enum State {
  627|  28.3k|        Start,
  628|  28.3k|        AfterLanguage,
  629|  28.3k|        AfterExtLang,
  630|  28.3k|        AfterScript,
  631|  28.3k|        AfterRegion,
  632|  28.3k|        InExtension { expected: bool },
  633|  28.3k|        InPrivateUse { expected: bool },
  634|  28.3k|    }
  635|  28.3k|
  636|  28.3k|    let mut state = State::Start;
  637|  28.3k|    let mut language_end = 0;
  638|  28.3k|    let mut extlang_end = 0;
  639|  28.3k|    let mut script_end = 0;
  640|  28.3k|    let mut region_end = 0;
  641|  28.3k|    let mut variant_end = 0;
  642|  28.3k|    let mut extension_end = 0;
  643|  28.3k|    let mut extlangs_count = 0;
  644|  50.3k|    for (subtag, end) in SubTagIterator::new(input) {
  645|  50.3k|        if subtag.is_empty() {
  646|      0|            return Err(LanguageTagParseError {
  647|      0|                kind: TagParseErrorKind::EmptySubtag,
  648|      0|            });
  649|  50.3k|        }
  650|  50.3k|        if subtag.len() > 8 {
  651|    916|            return Err(LanguageTagParseError {
  652|    916|                kind: TagParseErrorKind::SubtagTooLong,
  653|    916|            });
  654|  49.4k|        }
  655|  49.4k|        if state == State::Start {
  656|       |            // Primary language
  657|  27.4k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  658|  6.47k|                return Err(LanguageTagParseError {
  659|  6.47k|                    kind: TagParseErrorKind::InvalidLanguage,
  660|  6.47k|                });
  661|  20.9k|            }
  662|  20.9k|            language_end = end;
  663|  20.9k|            output.extend(to_lowercase(subtag));
  664|  20.9k|            if subtag.len() < 4 {
  665|  13.3k|                // extlangs are only allowed for short language tags
  666|  13.3k|                state = State::AfterLanguage;
  667|  13.3k|            } else {
  668|  7.66k|                state = State::AfterExtLang;
  669|  7.66k|            }
  670|  21.9k|        } else if let State::InPrivateUse { .. } = state {
  671|    590|            if !is_alphanumeric(subtag) {
  672|      0|                return Err(LanguageTagParseError {
  673|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  674|      0|                });
  675|    590|            }
  676|    590|            output.push('-');
  677|    590|            output.extend(to_lowercase(subtag));
  678|    590|            state = State::InPrivateUse { expected: false };
  679|  21.3k|        } else if subtag == "x" || subtag == "X" {
  680|       |            // We make sure extension is found
  681|    756|            if let State::InExtension { expected: true } = state {
  682|     44|                return Err(LanguageTagParseError {
  683|     44|                    kind: TagParseErrorKind::EmptyExtension,
  684|     44|                });
  685|    712|            }
  686|    712|            output.push('-');
  687|    712|            output.push('x');
  688|    712|            state = State::InPrivateUse { expected: true };
  689|  20.5k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  690|       |            // We make sure extension is found
  691|  5.20k|            if let State::InExtension { expected: true } = state {
  692|    768|                return Err(LanguageTagParseError {
  693|    768|                    kind: TagParseErrorKind::EmptyExtension,
  694|    768|                });
  695|  4.44k|            }
  696|  4.44k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  697|  4.44k|            output.push('-');
  698|  4.44k|            output.push(extension_tag);
  699|  4.44k|            state = State::InExtension { expected: true };
  700|  15.3k|        } else if let State::InExtension { .. } = state {
  701|  5.88k|            if !is_alphanumeric(subtag) {
  702|      0|                return Err(LanguageTagParseError {
  703|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  704|      0|                });
  705|  5.88k|            }
  706|  5.88k|            extension_end = end;
  707|  5.88k|            output.push('-');
  708|  5.88k|            output.extend(to_lowercase(subtag));
  709|  5.88k|            state = State::InExtension { expected: false };
  710|  9.50k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  711|  1.32k|            extlangs_count += 1;
  712|  1.32k|            if extlangs_count > 3 {
  713|      0|                return Err(LanguageTagParseError {
  714|      0|                    kind: TagParseErrorKind::TooManyExtlangs,
  715|      0|                });
  716|  1.32k|            }
  717|  1.32k|            // valid extlangs
  718|  1.32k|            extlang_end = end;
  719|  1.32k|            output.push('-');
  720|  1.32k|            output.extend(to_lowercase(subtag));
  721|  8.17k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  722|  6.07k|            && subtag.len() == 4
  723|  1.19k|            && is_alphabetic(subtag)
  724|  1.19k|        {
  725|  1.19k|            // Script
  726|  1.19k|            script_end = end;
  727|  1.19k|            output.push('-');
  728|  1.19k|            output.extend(to_uppercase_first(subtag));
  729|  1.19k|            state = State::AfterScript;
  730|  6.98k|        } else if (state == State::AfterLanguage
  731|  3.13k|            || state == State::AfterExtLang
  732|  2.10k|            || state == State::AfterScript)
  733|  5.39k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  734|  2.58k|                || subtag.len() == 3 && is_numeric(subtag))
  735|  2.81k|        {
  736|  2.81k|            // Region
  737|  2.81k|            region_end = end;
  738|  2.81k|            output.push('-');
  739|  2.81k|            output.extend(to_uppercase(subtag));
  740|  2.81k|            state = State::AfterRegion;
  741|  4.17k|        } else if (state == State::AfterLanguage
  742|  2.45k|            || state == State::AfterExtLang
  743|  2.09k|            || state == State::AfterScript
  744|  1.58k|            || state == State::AfterRegion)
  745|  4.17k|            && is_alphanumeric(subtag)
  746|  4.17k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  747|  1.48k|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  748|  2.69k|        {
  749|  2.69k|            // Variant
  750|  2.69k|            variant_end = end;
  751|  2.69k|            output.push('-');
  752|  2.69k|            output.extend(to_lowercase(subtag));
  753|  2.69k|            state = State::AfterRegion;
  754|  2.69k|        } else {
  755|  1.48k|            return Err(LanguageTagParseError {
  756|  1.48k|                kind: TagParseErrorKind::InvalidSubtag,
  757|  1.48k|            });
  758|       |        }
  759|       |    }
  760|       |
  761|       |    //We make sure we are in a correct final state
  762|  18.6k|    if let State::InExtension { expected: true } = state {
  763|    696|        return Err(LanguageTagParseError {
  764|    696|            kind: TagParseErrorKind::EmptyExtension,
  765|    696|        });
  766|  17.9k|    }
  767|  17.9k|    if let State::InPrivateUse { expected: true } = state {
  768|    222|        return Err(LanguageTagParseError {
  769|    222|            kind: TagParseErrorKind::EmptyPrivateUse,
  770|    222|        });
  771|  17.7k|    }
  772|  17.7k|
  773|  17.7k|    //We make sure we have not skipped anyone
  774|  17.7k|    if extlang_end < language_end {
  775|  16.4k|        extlang_end = language_end;
  776|  16.4k|    }
  777|  17.7k|    if script_end < extlang_end {
  778|  17.0k|        script_end = extlang_end;
  779|  17.0k|    }
  780|  17.7k|    if region_end < script_end {
  781|  15.6k|        region_end = script_end;
  782|  15.6k|    }
  783|  17.7k|    if variant_end < region_end {
  784|  15.0k|        variant_end = region_end;
  785|  15.0k|    }
  786|  17.7k|    if extension_end < variant_end {
  787|  14.9k|        extension_end = variant_end;
  788|  14.9k|    }
  789|       |
  790|  17.7k|    Ok(TagElementsPositions {
  791|  17.7k|        language_end,
  792|  17.7k|        extlang_end,
  793|  17.7k|        script_end,
  794|  17.7k|        region_end,
  795|  17.7k|        variant_end,
  796|  17.7k|        extension_end,
  797|  17.7k|    })
  798|  28.3k|}
_RINvXsr_CsebFzSuz8Vhk_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECsbrE1BkJ52QU_5oxrdf:
  560|  7.93k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsebFzSuz8Vhk_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECsbrE1BkJ52QU_5oxrdf:
  560|  31.4k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvCsebFzSuz8Vhk_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECsbrE1BkJ52QU_5oxrdf:
  576|  36.2k|fn parse_language_tag(
  577|  36.2k|    input: &str,
  578|  36.2k|    output: &mut impl OutputBuffer,
  579|  36.2k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  580|       |    //grandfathered tags
  581|  36.2k|    if let Some(tag) = GRANDFATHEREDS
  582|  36.2k|        .iter()
  583|  36.2k|        .find(|record| record.eq_ignore_ascii_case(input))
  584|       |    {
  585|      0|        output.push_str(tag);
  586|      0|        Ok(TagElementsPositions {
  587|      0|            language_end: tag.len(),
  588|      0|            extlang_end: tag.len(),
  589|      0|            script_end: tag.len(),
  590|      0|            region_end: tag.len(),
  591|      0|            variant_end: tag.len(),
  592|      0|            extension_end: tag.len(),
  593|      0|        })
  594|  36.2k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  595|       |        // private use
  596|  7.93k|        if !is_alphanumeric_or_dash(input) {
  597|      0|            Err(LanguageTagParseError {
  598|      0|                kind: TagParseErrorKind::ForbiddenChar,
  599|      0|            })
  600|  7.93k|        } else if input.len() == 2 {
  601|      0|            Err(LanguageTagParseError {
  602|      0|                kind: TagParseErrorKind::EmptyPrivateUse,
  603|      0|            })
  604|       |        } else {
  605|  7.93k|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  606|  7.93k|            Ok(TagElementsPositions {
  607|  7.93k|                language_end: input.len(),
  608|  7.93k|                extlang_end: input.len(),
  609|  7.93k|                script_end: input.len(),
  610|  7.93k|                region_end: input.len(),
  611|  7.93k|                variant_end: input.len(),
  612|  7.93k|                extension_end: input.len(),
  613|  7.93k|            })
  614|       |        }
  615|       |    } else {
  616|  28.3k|        parse_langtag(input, output)
  617|       |    }
  618|  36.2k|}
_RINvXsr_CsebFzSuz8Vhk_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECsbrE1BkJ52QU_5oxrdf:
  560|  2.81k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsebFzSuz8Vhk_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECsbrE1BkJ52QU_5oxrdf:
  560|  1.19k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCsebFzSuz8Vhk_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0CsbrE1BkJ52QU_5oxrdf:
  583|   942k|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvCsebFzSuz8Vhk_10oxilangtag23is_alphanumeric_or_dashCsbrE1BkJ52QU_5oxrdf:
  875|  7.93k|fn is_alphanumeric_or_dash(s: &str) -> bool {
  876|  7.93k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  877|  7.93k|}
_RNvXsw_CsebFzSuz8Vhk_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4nextCsbrE1BkJ52QU_5oxrdf:
  851|  68.9k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  852|  68.9k|        let tag = self.split.next()?;
  853|  50.3k|        let tag_end = self.position + tag.len();
  854|  50.3k|        self.position = tag_end + 1;
  855|  50.3k|        Some((tag, tag_end))
  856|  68.9k|    }
_RNvCsebFzSuz8Vhk_10oxilangtag12to_lowercaseCsbrE1BkJ52QU_5oxrdf:
  892|  31.4k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  893|  31.4k|    s.chars().map(|c| c.to_ascii_lowercase())
  894|  31.4k|}
_RNvCsebFzSuz8Vhk_10oxilangtag10is_numericCsbrE1BkJ52QU_5oxrdf:
  865|  1.41k|fn is_numeric(s: &str) -> bool {
  866|  1.41k|    s.chars().all(|x| x.is_ascii_digit())
  867|  1.41k|}
_RNvCsebFzSuz8Vhk_10oxilangtag12to_uppercaseCsbrE1BkJ52QU_5oxrdf:
  880|  2.81k|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  881|  2.81k|    s.chars().map(|c| c.to_ascii_uppercase())
  882|  2.81k|}
_RNvMsv_CsebFzSuz8Vhk_10oxilangtagNtB5_14SubTagIterator3newCsbrE1BkJ52QU_5oxrdf:
  839|  28.3k|    fn new(input: &'a str) -> Self {
  840|  28.3k|        Self {
  841|  28.3k|            split: input.split('-'),
  842|  28.3k|            position: 0,
  843|  28.3k|        }
  844|  28.3k|    }
_RNvXs_NvCsebFzSuz8Vhk_10oxilangtag13parse_langtagNtB4_5StateNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCsbrE1BkJ52QU_5oxrdf:
  625|  93.0k|    #[derive(PartialEq, Eq)]
_RNvCsebFzSuz8Vhk_10oxilangtag15is_alphanumericCsbrE1BkJ52QU_5oxrdf:
  870|  15.8k|fn is_alphanumeric(s: &str) -> bool {
  871|  15.8k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  872|  15.8k|}
_RNvCsebFzSuz8Vhk_10oxilangtag18to_uppercase_firstCsbrE1BkJ52QU_5oxrdf:
  886|  1.19k|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  887|  1.19k|    let mut chars = s.chars();
  888|  1.19k|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  889|  1.19k|}
_RNvXsq_CsebFzSuz8Vhk_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsbrE1BkJ52QU_5oxrdf:
  552|  24.8k|    fn push(&mut self, _: char) {}
_RNvCsebFzSuz8Vhk_10oxilangtag13is_alphabeticCsbrE1BkJ52QU_5oxrdf:
  860|  29.0k|fn is_alphabetic(s: &str) -> bool {
  861|  29.0k|    s.chars().all(|x| x.is_ascii_alphabetic())
  862|  29.0k|}
_RNCNvCsebFzSuz8Vhk_10oxilangtag15is_alphanumeric0B3_:
  871|  47.9k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNvXso_CsebFzSuz8Vhk_10oxilangtagNtB5_21LanguageTagParseErrorNtNtCsl2lhD68vXAd_4core3fmt7Display3fmt:
  482|  10.6k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  483|  10.6k|        match self.kind {
  484|       |            TagParseErrorKind::EmptyExtension => {
  485|  1.50k|                write!(f, "If an extension subtag is present, it must not be empty")
  486|       |            }
  487|       |            TagParseErrorKind::EmptyPrivateUse => {
  488|    222|                write!(f, "If the `x` subtag is present, it must not be empty")
  489|       |            }
  490|       |            TagParseErrorKind::ForbiddenChar => {
  491|      0|                write!(f, "The langtag contains a char not allowed")
  492|       |            }
  493|  1.48k|            TagParseErrorKind::InvalidSubtag => write!(
  494|  1.48k|                f,
  495|  1.48k|                "A subtag fails to parse, it does not match any other subtags"
  496|  1.48k|            ),
  497|  6.47k|            TagParseErrorKind::InvalidLanguage => write!(f, "The given language subtag is invalid"),
  498|       |            TagParseErrorKind::SubtagTooLong => {
  499|    916|                write!(f, "A subtag may be eight characters in length at maximum")
  500|       |            }
  501|      0|            TagParseErrorKind::EmptySubtag => write!(f, "A subtag should not be empty"),
  502|       |            TagParseErrorKind::TooManyExtlangs => {
  503|      0|                write!(f, "At maximum three extlangs are allowed")
  504|       |            }
  505|       |        }
  506|  10.6k|    }
_RNCNvCsebFzSuz8Vhk_10oxilangtag13is_alphabetic0B3_:
  861|  89.5k|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCsebFzSuz8Vhk_10oxilangtag23is_alphanumeric_or_dash0B3_:
  876|   257k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
_RNCNvCsebFzSuz8Vhk_10oxilangtag10is_numeric0B3_:
  866|  1.41k|    s.chars().all(|x| x.is_ascii_digit())

_RNvXsZ_Cs72NQLJxIjgJ_5oxiriNtNtCsdBW21Yiwikk_5alloc6string6StringNtB5_12OutputBuffer8push_strCs4WjTcpTVJQo_5oxttl:
 1012|   306k|    fn push_str(&mut self, s: &str) {
 1013|   306k|        self.push_str(s);
 1014|   306k|    }
_RNvXsZ_Cs72NQLJxIjgJ_5oxiriNtNtCsdBW21Yiwikk_5alloc6string6StringNtB5_12OutputBuffer8truncateCs4WjTcpTVJQo_5oxttl:
 1022|   290k|    fn truncate(&mut self, new_len: usize) {
 1023|   290k|        self.truncate(new_len);
 1024|   290k|    }
_RNvXsZ_Cs72NQLJxIjgJ_5oxiriNtNtCsdBW21Yiwikk_5alloc6string6StringNtB5_12OutputBuffer3lenCs4WjTcpTVJQo_5oxttl:
 1027|   607k|    fn len(&self) -> usize {
 1028|   607k|        self.len()
 1029|   607k|    }
_RNvXsZ_Cs72NQLJxIjgJ_5oxiriNtNtCsdBW21Yiwikk_5alloc6string6StringNtB5_12OutputBuffer6as_strCs4WjTcpTVJQo_5oxttl:
 1032|   847k|    fn as_str(&self) -> &str {
 1033|   847k|        self.as_str()
 1034|   847k|    }
_RNvXsZ_Cs72NQLJxIjgJ_5oxiriNtNtCsdBW21Yiwikk_5alloc6string6StringNtB5_12OutputBuffer4pushCs4WjTcpTVJQo_5oxttl:
 1007|  2.24M|    fn push(&mut self, c: char) {
 1008|  2.24M|        self.push(c);
 1009|  2.24M|    }
_RNvXsZ_Cs72NQLJxIjgJ_5oxiriNtNtCsdBW21Yiwikk_5alloc6string6StringNtB5_12OutputBuffer5clearCs4WjTcpTVJQo_5oxttl:
 1017|  29.1k|    fn clear(&mut self) {
 1018|  29.1k|        self.clear();
 1019|  29.1k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE16parse_path_startCs4WjTcpTVJQo_5oxttl:
 1315|  7.77k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1316|  7.77k|        match c {
 1317|       |            None => {
 1318|  2.80k|                self.output_positions.path_end = self.output.len();
 1319|  2.80k|                self.output_positions.query_end = self.output.len();
 1320|  2.80k|                Ok(())
 1321|       |            }
 1322|       |            Some('?') => {
 1323|    544|                self.output_positions.path_end = self.output.len();
 1324|    544|                self.output.push('?');
 1325|    544|                self.parse_query()
 1326|       |            }
 1327|       |            Some('#') => {
 1328|    184|                self.output_positions.path_end = self.output.len();
 1329|    184|                self.output_positions.query_end = self.output.len();
 1330|    184|                self.output.push('#');
 1331|    184|                self.parse_fragment()
 1332|       |            }
 1333|       |            Some('/') => {
 1334|  4.24k|                self.output.push('/');
 1335|  4.24k|                self.parse_path()
 1336|       |            }
 1337|      0|            Some(c) => {
 1338|      0|                self.read_url_codepoint_or_echar(c)?;
 1339|      0|                self.parse_path()
 1340|       |            }
 1341|       |        }
 1342|  7.77k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE33read_url_query_codepoint_or_echarCs4WjTcpTVJQo_5oxttl:
 1422|   169k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1423|   169k|        if c == '%' {
 1424|  2.11k|            self.read_echar()
 1425|   167k|        } else if is_url_query_code_point(c) {
 1426|   160k|            self.output.push(c);
 1427|   160k|            Ok(())
 1428|       |        } else {
 1429|  6.81k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1430|       |        }
 1431|   169k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE20parse_relative_slashCs4WjTcpTVJQo_5oxttl:
 1213|   232k|    fn parse_relative_slash(&mut self, base: &IriRef<&'a str>) -> Result<(), IriParseError> {
 1214|   232k|        if self.input.starts_with('/') {
 1215|  7.73k|            self.input.next();
 1216|  7.73k|            self.output.push_str(&base.iri[..base.positions.scheme_end]);
 1217|  7.73k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1218|  7.73k|            self.output.push('/');
 1219|  7.73k|            self.output.push('/');
 1220|  7.73k|            self.parse_authority()
 1221|       |        } else {
 1222|   224k|            self.output
 1223|   224k|                .push_str(&base.iri[..base.positions.authority_end]);
 1224|   224k|            self.output.push('/');
 1225|   224k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1226|   224k|            self.output_positions.authority_end = base.positions.authority_end;
 1227|   224k|            self.parse_path()
 1228|       |        }
 1229|   232k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE11parse_queryCs4WjTcpTVJQo_5oxttl:
 1380|  10.1k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1381|   171k|        while let Some(c) = self.input.next() {
 1382|   170k|            if c == '#' {
 1383|    528|                self.output_positions.query_end = self.output.len();
 1384|    528|                self.output.push('#');
 1385|    528|                return self.parse_fragment();
 1386|       |            } else {
 1387|   169k|                self.read_url_query_codepoint_or_echar(c)?
 1388|       |            }
 1389|       |        }
 1390|  1.71k|        self.output_positions.query_end = self.output.len();
 1391|  1.71k|        Ok(())
 1392|  10.1k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE18parse_scheme_startCs4WjTcpTVJQo_5oxttl:
 1101|   319k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1102|   319k|        match self.input.front() {
 1103|    234|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1104|   309k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1105|   276k|            _ => self.parse_relative(),
 1106|       |        }
 1107|   319k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE10parse_hostCs4WjTcpTVJQo_5oxttl:
 1255|  8.64k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1256|  8.64k|        if self.input.starts_with('[') {
 1257|       |            // IP v6
 1258|    132|            let start_position = self.input.position;
 1259|  4.58k|            while let Some(c) = self.input.next() {
 1260|  4.45k|                self.output.push(c);
 1261|  4.45k|                if c == ']' {
 1262|      0|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1263|      0|                    if let Err(error) = Ipv6Addr::from_str(ip) {
 1264|      0|                        return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1265|      0|                    }
 1266|      0|
 1267|      0|                    let c = self.input.next();
 1268|      0|                    return match c {
 1269|       |                        Some(':') => {
 1270|      0|                            self.output.push(':');
 1271|      0|                            self.parse_port()
 1272|       |                        }
 1273|       |                        None | Some('/') | Some('?') | Some('#') => {
 1274|      0|                            self.output_positions.authority_end = self.output.len();
 1275|      0|                            self.parse_path_start(c)
 1276|       |                        }
 1277|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1278|       |                    };
 1279|  4.45k|                }
 1280|       |            }
 1281|    132|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1282|       |        } else {
 1283|       |            // Other host
 1284|   162k|            loop {
 1285|   162k|                let c = self.input.next();
 1286|   162k|                match c {
 1287|       |                    Some(':') => {
 1288|  4.33k|                        self.output.push(':');
 1289|  4.33k|                        return self.parse_port();
 1290|       |                    }
 1291|       |                    None | Some('/') | Some('?') | Some('#') => {
 1292|  3.77k|                        self.output_positions.authority_end = self.output.len();
 1293|  3.77k|                        return self.parse_path_start(c);
 1294|       |                    }
 1295|   154k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1296|       |                }
 1297|       |            }
 1298|       |        }
 1299|  8.64k|    }
_RNvMCs72NQLJxIjgJ_5oxiriINtB2_6IriRefNtNtCsdBW21Yiwikk_5alloc6string6StringE7resolveCs4WjTcpTVJQo_5oxttl:
   71|   319k|    pub fn resolve(&self, iri: &str) -> Result<IriRef<String>, IriParseError> {
   72|   319k|        let mut target_buffer = String::with_capacity(self.iri.len() + iri.len());
   73|   319k|        let positions = IriParser::parse(iri, Some(self.as_ref()), &mut target_buffer)?;
   74|   267k|        Ok(IriRef {
   75|   267k|            iri: target_buffer,
   76|   267k|            positions,
   77|   267k|        })
   78|   319k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE12parse_schemeCs4WjTcpTVJQo_5oxttl:
 1109|  42.7k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1110|   265k|        loop {
 1111|   265k|            let c = self.input.next();
 1112|   260k|            match c {
 1113|   260k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1114|   222k|                    self.output.push(c)
 1115|       |                }
 1116|       |                Some(':') => {
 1117|  13.5k|                    self.output.push(':');
 1118|  13.5k|                    self.output_positions.scheme_end = self.output.len();
 1119|  13.5k|                    self.input_scheme_end = self.input.position;
 1120|  13.5k|                    return if self.input.starts_with('/') {
 1121|  9.86k|                        self.input.next();
 1122|  9.86k|                        self.output.push('/');
 1123|  9.86k|                        self.parse_path_or_authority()
 1124|       |                    } else {
 1125|  3.72k|                        self.output_positions.authority_end = self.output.len();
 1126|  3.72k|                        self.parse_path()
 1127|       |                    };
 1128|       |                }
 1129|       |                _ => {
 1130|  29.1k|                    self.input = ParserInput {
 1131|  29.1k|                        value: self.iri.chars(),
 1132|  29.1k|                        position: 0,
 1133|  29.1k|                    }; // reset
 1134|  29.1k|                    self.output.clear();
 1135|  29.1k|                    return self.parse_relative();
 1136|       |                }
 1137|       |            }
 1138|       |        }
 1139|  42.7k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE10parse_portCs4WjTcpTVJQo_5oxttl:
 1301|  4.33k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1302|  6.95k|        loop {
 1303|  6.95k|            let c = self.input.next();
 1304|  6.65k|            match c {
 1305|  6.65k|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1306|       |                Some('/') | Some('?') | Some('#') | None => {
 1307|  4.00k|                    self.output_positions.authority_end = self.output.len();
 1308|  4.00k|                    return self.parse_path_start(c);
 1309|       |                }
 1310|    328|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1311|       |            }
 1312|       |        }
 1313|  4.33k|    }
_RNvMCs72NQLJxIjgJ_5oxiriINtB2_6IriRefNtNtCsdBW21Yiwikk_5alloc6string6StringE6as_refCs4WjTcpTVJQo_5oxttl:
  101|   319k|    pub fn as_ref(&self) -> IriRef<&str> {
  102|   319k|        IriRef {
  103|   319k|            iri: &self.iri,
  104|   319k|            positions: self.positions,
  105|   319k|        }
  106|   319k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE14parse_relativeCs4WjTcpTVJQo_5oxttl:
 1152|   306k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1153|   306k|        if let Some(base) = self.base {
 1154|   306k|            match self.input.front() {
 1155|       |                None => {
 1156|  9.85k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1157|  9.85k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1158|  9.85k|                    self.output_positions.authority_end = base.positions.authority_end;
 1159|  9.85k|                    self.output_positions.path_end = base.positions.path_end;
 1160|  9.85k|                    self.output_positions.query_end = base.positions.query_end;
 1161|  9.85k|                    Ok(())
 1162|       |                }
 1163|       |                Some('/') => {
 1164|   232k|                    self.input.next();
 1165|   232k|                    self.parse_relative_slash(&base)
 1166|       |                }
 1167|       |                Some('?') => {
 1168|  6.93k|                    self.input.next();
 1169|  6.93k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1170|  6.93k|                    self.output.push('?');
 1171|  6.93k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1172|  6.93k|                    self.output_positions.authority_end = base.positions.authority_end;
 1173|  6.93k|                    self.output_positions.path_end = base.positions.path_end;
 1174|  6.93k|                    self.parse_query()
 1175|       |                }
 1176|       |                Some('#') => {
 1177|  1.43k|                    self.input.next();
 1178|  1.43k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1179|  1.43k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1180|  1.43k|                    self.output_positions.authority_end = base.positions.authority_end;
 1181|  1.43k|                    self.output_positions.path_end = base.positions.path_end;
 1182|  1.43k|                    self.output_positions.query_end = base.positions.query_end;
 1183|  1.43k|                    self.output.push('#');
 1184|  1.43k|                    self.parse_fragment()
 1185|       |                }
 1186|       |                _ => {
 1187|  55.6k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1188|  55.6k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1189|  55.6k|                    self.output_positions.authority_end = base.positions.authority_end;
 1190|  55.6k|                    self.output_positions.path_end = base.positions.path_end;
 1191|  55.6k|                    self.remove_last_segment();
 1192|  55.6k|                    if self.output.len() > base.positions.scheme_end {
 1193|  55.6k|                        // We have some path or authority, we keep a base '/'
 1194|  55.6k|                        self.output.push('/');
 1195|  55.6k|                    }
 1196|  55.6k|                    self.parse_path()
 1197|       |                }
 1198|       |            }
 1199|       |        } else {
 1200|      0|            self.output_positions.scheme_end = 0;
 1201|      0|            self.input_scheme_end = 0;
 1202|      0|            if self.input.starts_with('/') {
 1203|      0|                self.input.next();
 1204|      0|                self.output.push('/');
 1205|      0|                self.parse_path_or_authority()
 1206|       |            } else {
 1207|      0|                self.output_positions.authority_end = 0;
 1208|      0|                self.parse_path()
 1209|       |            }
 1210|       |        }
 1211|   306k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE10parse_pathCs4WjTcpTVJQo_5oxttl:
 1344|   288k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1345|   985k|        loop {
 1346|   985k|            let c = self.input.next();
 1347|   985k|            match c {
 1348|       |                None | Some('/') | Some('?') | Some('#') => {
 1349|   283k|                    if self.output.as_str().ends_with("/..") {
 1350|  1.40k|                        self.remove_last_segment();
 1351|  1.40k|                        self.remove_last_segment();
 1352|  1.40k|                        self.output.push('/');
 1353|   282k|                    } else if self.output.as_str().ends_with("/.") {
 1354|   223k|                        self.remove_last_segment();
 1355|   223k|                        self.output.push('/');
 1356|   223k|                    } else if c == Some('/') {
 1357|  23.3k|                        self.output.push('/');
 1358|  35.7k|                    }
 1359|       |
 1360|   283k|                    if c == Some('?') {
 1361|  2.68k|                        self.output_positions.path_end = self.output.len();
 1362|  2.68k|                        self.output.push('?');
 1363|  2.68k|                        return self.parse_query();
 1364|   280k|                    } else if c == Some('#') {
 1365|  7.34k|                        self.output_positions.path_end = self.output.len();
 1366|  7.34k|                        self.output_positions.query_end = self.output.len();
 1367|  7.34k|                        self.output.push('#');
 1368|  7.34k|                        return self.parse_fragment();
 1369|   273k|                    } else if c == None {
 1370|   250k|                        self.output_positions.path_end = self.output.len();
 1371|   250k|                        self.output_positions.query_end = self.output.len();
 1372|   250k|                        return Ok(());
 1373|  23.3k|                    }
 1374|       |                }
 1375|   701k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1376|       |            }
 1377|       |        }
 1378|   288k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE10read_echarCs4WjTcpTVJQo_5oxttl:
 1434|  5.76k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1435|  5.76k|        let c1 = self.input.next();
 1436|  5.76k|        let c2 = self.input.next();
 1437|  5.76k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1438|  2.50k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1439|       |        {
 1440|  2.24k|            self.output.push('%');
 1441|  2.24k|            self.output.push(c1.unwrap());
 1442|  2.24k|            self.output.push(c2.unwrap());
 1443|  2.24k|            Ok(())
 1444|       |        } else {
 1445|  3.52k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1446|  3.52k|                Some('%'),
 1447|  3.52k|                c1,
 1448|  3.52k|                c2,
 1449|  3.52k|            ]))
 1450|       |        }
 1451|  5.76k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE27read_url_codepoint_or_echarCs4WjTcpTVJQo_5oxttl:
 1410|  1.28M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1411|  1.28M|        if c == '%' {
 1412|  3.65k|            self.read_echar()
 1413|  1.28M|        } else if is_url_code_point(c) {
 1414|  1.24M|            self.output.push(c);
 1415|  1.24M|            Ok(())
 1416|       |        } else {
 1417|  41.2k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1418|       |        }
 1419|  1.28M|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE5parseCs4WjTcpTVJQo_5oxttl:
 1076|   319k|    fn parse(
 1077|   319k|        iri: &'a str,
 1078|   319k|        base: Option<IriRef<&'a str>>,
 1079|   319k|        output: &'a mut O,
 1080|   319k|    ) -> Result<IriElementsPositions, IriParseError> {
 1081|   319k|        let mut parser = Self {
 1082|   319k|            iri,
 1083|   319k|            base,
 1084|   319k|            input: ParserInput {
 1085|   319k|                value: iri.chars(),
 1086|   319k|                position: 0,
 1087|   319k|            },
 1088|   319k|            output,
 1089|   319k|            output_positions: IriElementsPositions {
 1090|   319k|                scheme_end: 0,
 1091|   319k|                authority_end: 0,
 1092|   319k|                path_end: 0,
 1093|   319k|                query_end: 0,
 1094|   319k|            },
 1095|   319k|            input_scheme_end: 0,
 1096|   319k|        };
 1097|   319k|        parser.parse_scheme_start()?;
 1098|   267k|        Ok(parser.output_positions)
 1099|   319k|    }
_RNCNvMs11_Cs72NQLJxIjgJ_5oxiriINtB8_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE10read_echars_0Cs4WjTcpTVJQo_5oxttl:
 1438|  2.48k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE19remove_last_segmentCs4WjTcpTVJQo_5oxttl:
 1401|   281k|    fn remove_last_segment(&mut self) {
 1402|   281k|        let last_slash_position = self.output.as_str()[self.output_positions.authority_end..]
 1403|   281k|            .rfind('/')
 1404|   281k|            .unwrap_or(0);
 1405|   281k|        self.output
 1406|   281k|            .truncate(last_slash_position + self.output_positions.authority_end)
 1407|   281k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE23parse_path_or_authorityCs4WjTcpTVJQo_5oxttl:
 1141|  9.86k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1142|  9.86k|        if self.input.starts_with('/') {
 1143|  9.54k|            self.input.next();
 1144|  9.54k|            self.output.push('/');
 1145|  9.54k|            self.parse_authority()
 1146|       |        } else {
 1147|    326|            self.output_positions.authority_end = self.output.len() - 1;
 1148|    326|            self.parse_path()
 1149|       |        }
 1150|  9.86k|    }
_RINvMs11_Cs72NQLJxIjgJ_5oxiriINtB7_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE11parse_erroruECs4WjTcpTVJQo_5oxttl:
 1454|  52.2k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1455|  52.2k|        Err(IriParseError { kind })
 1456|  52.2k|    }
_RNvMsp_Cs72NQLJxIjgJ_5oxiriINtB5_3IriNtNtCsdBW21Yiwikk_5alloc6string6StringE7resolveCs4WjTcpTVJQo_5oxttl:
  516|   319k|    pub fn resolve(&self, iri: &str) -> Result<Iri<String>, IriParseError> {
  517|   319k|        Ok(Iri(self.0.resolve(iri)?))
  518|   319k|    }
_RNCNvMs11_Cs72NQLJxIjgJ_5oxiriINtB8_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE10read_echar0Cs4WjTcpTVJQo_5oxttl:
 1437|  5.27k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE14parse_fragmentCs4WjTcpTVJQo_5oxttl:
 1394|  9.49k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1395|  84.7k|        while let Some(c) = self.input.next() {
 1396|  81.7k|            self.read_url_codepoint_or_echar(c)?
 1397|       |        }
 1398|  2.93k|        Ok(())
 1399|  9.49k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE15parse_authorityCs4WjTcpTVJQo_5oxttl:
 1231|  17.2k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1232|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1233|   357k|        loop {
 1234|   357k|            let c = self.input.next();
 1235|   357k|            match c {
 1236|       |                Some('@') => {
 1237|    296|                    self.output.push('@');
 1238|    296|                    return self.parse_host();
 1239|       |                }
 1240|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1241|  8.34k|                    self.input = ParserInput {
 1242|  8.34k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1243|  8.34k|                        position: self.input_scheme_end + 2,
 1244|  8.34k|                    };
 1245|  8.34k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1246|  8.34k|                    return self.parse_host();
 1247|       |                }
 1248|   349k|                Some(c) => {
 1249|   349k|                    self.read_url_codepoint_or_echar(c)?;
 1250|       |                }
 1251|       |            }
 1252|       |        }
 1253|  17.2k|    }
_RNvMs10_Cs72NQLJxIjgJ_5oxiriNtB6_11ParserInput4nextCs4WjTcpTVJQo_5oxttl:
 1043|  2.31M|    fn next(&mut self) -> Option<char> {
 1044|  2.31M|        if let Some(head) = self.value.next() {
 1045|  2.05M|            self.position += head.len_utf8();
 1046|  2.05M|            Some(head)
 1047|       |        } else {
 1048|   266k|            None
 1049|       |        }
 1050|  2.31M|    }
_RNvMs10_Cs72NQLJxIjgJ_5oxiriNtB6_11ParserInput11starts_withCs4WjTcpTVJQo_5oxttl:
 1058|   264k|    fn starts_with(&self, c: char) -> bool {
 1059|   264k|        self.value.as_str().starts_with(c)
 1060|   264k|    }
_RNvMs10_Cs72NQLJxIjgJ_5oxiriNtB6_11ParserInput5frontCs4WjTcpTVJQo_5oxttl:
 1053|   625k|    fn front(&self) -> Option<char> {
 1054|   625k|        self.value.clone().next()
 1055|   625k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_pathCsbrE1BkJ52QU_5oxrdf:
 1344|   368k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1345|  7.26M|        loop {
 1346|  7.26M|            let c = self.input.next();
 1347|  7.26M|            match c {
 1348|       |                None | Some('/') | Some('?') | Some('#') => {
 1349|   944k|                    if self.output.as_str().ends_with("/..") {
 1350|      0|                        self.remove_last_segment();
 1351|      0|                        self.remove_last_segment();
 1352|      0|                        self.output.push('/');
 1353|   944k|                    } else if self.output.as_str().ends_with("/.") {
 1354|      0|                        self.remove_last_segment();
 1355|      0|                        self.output.push('/');
 1356|   944k|                    } else if c == Some('/') {
 1357|   575k|                        self.output.push('/');
 1358|   575k|                    }
 1359|       |
 1360|   944k|                    if c == Some('?') {
 1361|    266|                        self.output_positions.path_end = self.output.len();
 1362|    266|                        self.output.push('?');
 1363|    266|                        return self.parse_query();
 1364|   944k|                    } else if c == Some('#') {
 1365|   285k|                        self.output_positions.path_end = self.output.len();
 1366|   285k|                        self.output_positions.query_end = self.output.len();
 1367|   285k|                        self.output.push('#');
 1368|   285k|                        return self.parse_fragment();
 1369|   658k|                    } else if c == None {
 1370|  82.4k|                        self.output_positions.path_end = self.output.len();
 1371|  82.4k|                        self.output_positions.query_end = self.output.len();
 1372|  82.4k|                        return Ok(());
 1373|   575k|                    }
 1374|       |                }
 1375|  6.32M|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1376|       |            }
 1377|       |        }
 1378|   368k|    }
_RNvXsV_Cs72NQLJxIjgJ_5oxiriINtB5_3IriNtNtCsdBW21Yiwikk_5alloc6string6StringEINtNtCsl2lhD68vXAd_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsbrE1BkJ52QU_5oxrdf:
  871|   369k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  872|   369k|        if iri.is_absolute() {
  873|   369k|            Ok(Self(iri))
  874|       |        } else {
  875|      0|            Err(IriParseError {
  876|      0|                kind: IriParseErrorKind::NoScheme,
  877|      0|            })
  878|       |        }
  879|   369k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE18parse_scheme_startCsbrE1BkJ52QU_5oxrdf:
 1101|   369k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1102|   369k|        match self.input.front() {
 1103|      0|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1104|   369k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1105|      0|            _ => self.parse_relative(),
 1106|       |        }
 1107|   369k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_hostCsbrE1BkJ52QU_5oxrdf:
 1255|   369k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1256|   369k|        if self.input.starts_with('[') {
 1257|       |            // IP v6
 1258|      0|            let start_position = self.input.position;
 1259|      0|            while let Some(c) = self.input.next() {
 1260|      0|                self.output.push(c);
 1261|      0|                if c == ']' {
 1262|      0|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1263|      0|                    if let Err(error) = Ipv6Addr::from_str(ip) {
 1264|      0|                        return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1265|      0|                    }
 1266|      0|
 1267|      0|                    let c = self.input.next();
 1268|      0|                    return match c {
 1269|       |                        Some(':') => {
 1270|      0|                            self.output.push(':');
 1271|      0|                            self.parse_port()
 1272|       |                        }
 1273|       |                        None | Some('/') | Some('?') | Some('#') => {
 1274|      0|                            self.output_positions.authority_end = self.output.len();
 1275|      0|                            self.parse_path_start(c)
 1276|       |                        }
 1277|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1278|       |                    };
 1279|      0|                }
 1280|       |            }
 1281|      0|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1282|       |        } else {
 1283|       |            // Other host
 1284|  4.13M|            loop {
 1285|  4.13M|                let c = self.input.next();
 1286|  4.13M|                match c {
 1287|       |                    Some(':') => {
 1288|     69|                        self.output.push(':');
 1289|     69|                        return self.parse_port();
 1290|       |                    }
 1291|       |                    None | Some('/') | Some('?') | Some('#') => {
 1292|   369k|                        self.output_positions.authority_end = self.output.len();
 1293|   369k|                        return self.parse_path_start(c);
 1294|       |                    }
 1295|  3.76M|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1296|       |                }
 1297|       |            }
 1298|       |        }
 1299|   369k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE16parse_path_startCsbrE1BkJ52QU_5oxrdf:
 1315|   369k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1316|   369k|        match c {
 1317|       |            None => {
 1318|    925|                self.output_positions.path_end = self.output.len();
 1319|    925|                self.output_positions.query_end = self.output.len();
 1320|    925|                Ok(())
 1321|       |            }
 1322|       |            Some('?') => {
 1323|      1|                self.output_positions.path_end = self.output.len();
 1324|      1|                self.output.push('?');
 1325|      1|                self.parse_query()
 1326|       |            }
 1327|       |            Some('#') => {
 1328|      1|                self.output_positions.path_end = self.output.len();
 1329|      1|                self.output_positions.query_end = self.output.len();
 1330|      1|                self.output.push('#');
 1331|      1|                self.parse_fragment()
 1332|       |            }
 1333|       |            Some('/') => {
 1334|   368k|                self.output.push('/');
 1335|   368k|                self.parse_path()
 1336|       |            }
 1337|      0|            Some(c) => {
 1338|      0|                self.read_url_codepoint_or_echar(c)?;
 1339|      0|                self.parse_path()
 1340|       |            }
 1341|       |        }
 1342|   369k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE33read_url_query_codepoint_or_echarCsbrE1BkJ52QU_5oxrdf:
 1422|  2.81k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1423|  2.81k|        if c == '%' {
 1424|     22|            self.read_echar()
 1425|  2.79k|        } else if is_url_query_code_point(c) {
 1426|  2.79k|            self.output.push(c);
 1427|  2.79k|            Ok(())
 1428|       |        } else {
 1429|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1430|       |        }
 1431|  2.81k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10read_echarCsbrE1BkJ52QU_5oxrdf:
 1434|     44|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1435|     44|        let c1 = self.input.next();
 1436|     44|        let c2 = self.input.next();
 1437|     44|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1438|     44|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1439|       |        {
 1440|     44|            self.output.push('%');
 1441|     44|            self.output.push(c1.unwrap());
 1442|     44|            self.output.push(c2.unwrap());
 1443|     44|            Ok(())
 1444|       |        } else {
 1445|      0|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1446|      0|                Some('%'),
 1447|      0|                c1,
 1448|      0|                c2,
 1449|      0|            ]))
 1450|       |        }
 1451|     44|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE5parseCsbrE1BkJ52QU_5oxrdf:
 1076|   369k|    fn parse(
 1077|   369k|        iri: &'a str,
 1078|   369k|        base: Option<IriRef<&'a str>>,
 1079|   369k|        output: &'a mut O,
 1080|   369k|    ) -> Result<IriElementsPositions, IriParseError> {
 1081|   369k|        let mut parser = Self {
 1082|   369k|            iri,
 1083|   369k|            base,
 1084|   369k|            input: ParserInput {
 1085|   369k|                value: iri.chars(),
 1086|   369k|                position: 0,
 1087|   369k|            },
 1088|   369k|            output,
 1089|   369k|            output_positions: IriElementsPositions {
 1090|   369k|                scheme_end: 0,
 1091|   369k|                authority_end: 0,
 1092|   369k|                path_end: 0,
 1093|   369k|                query_end: 0,
 1094|   369k|            },
 1095|   369k|            input_scheme_end: 0,
 1096|   369k|        };
 1097|   369k|        parser.parse_scheme_start()?;
 1098|   369k|        Ok(parser.output_positions)
 1099|   369k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE14parse_fragmentCsbrE1BkJ52QU_5oxrdf:
 1394|   285k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1395|  1.62M|        while let Some(c) = self.input.next() {
 1396|  1.33M|            self.read_url_codepoint_or_echar(c)?
 1397|       |        }
 1398|   285k|        Ok(())
 1399|   285k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE12parse_schemeCsbrE1BkJ52QU_5oxrdf:
 1109|   369k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1110|  1.84M|        loop {
 1111|  1.84M|            let c = self.input.next();
 1112|  1.84M|            match c {
 1113|  1.84M|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1114|  1.47M|                    self.output.push(c)
 1115|       |                }
 1116|       |                Some(':') => {
 1117|   369k|                    self.output.push(':');
 1118|   369k|                    self.output_positions.scheme_end = self.output.len();
 1119|   369k|                    self.input_scheme_end = self.input.position;
 1120|   369k|                    return if self.input.starts_with('/') {
 1121|   369k|                        self.input.next();
 1122|   369k|                        self.output.push('/');
 1123|   369k|                        self.parse_path_or_authority()
 1124|       |                    } else {
 1125|    355|                        self.output_positions.authority_end = self.output.len();
 1126|    355|                        self.parse_path()
 1127|       |                    };
 1128|       |                }
 1129|       |                _ => {
 1130|      0|                    self.input = ParserInput {
 1131|      0|                        value: self.iri.chars(),
 1132|      0|                        position: 0,
 1133|      0|                    }; // reset
 1134|      0|                    self.output.clear();
 1135|      0|                    return self.parse_relative();
 1136|       |                }
 1137|       |            }
 1138|       |        }
 1139|   369k|    }
_RNvMsp_Cs72NQLJxIjgJ_5oxiriINtB5_3IriNtNtCsdBW21Yiwikk_5alloc6string6StringE5parseCsbrE1BkJ52QU_5oxrdf:
  501|   369k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  502|   369k|        IriRef::parse(iri)?.try_into()
  503|   369k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE23parse_path_or_authorityCsbrE1BkJ52QU_5oxrdf:
 1141|   369k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1142|   369k|        if self.input.starts_with('/') {
 1143|   369k|            self.input.next();
 1144|   369k|            self.output.push('/');
 1145|   369k|            self.parse_authority()
 1146|       |        } else {
 1147|     74|            self.output_positions.authority_end = self.output.len() - 1;
 1148|     74|            self.parse_path()
 1149|       |        }
 1150|   369k|    }
_RNvMCs72NQLJxIjgJ_5oxiriINtB2_6IriRefNtNtCsdBW21Yiwikk_5alloc6string6StringE5parseCsbrE1BkJ52QU_5oxrdf:
   55|   369k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   56|   369k|        let positions = IriParser::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   57|   369k|        Ok(Self { iri, positions })
   58|   369k|    }
_RNvMCs72NQLJxIjgJ_5oxiriINtB2_6IriRefNtNtCsdBW21Yiwikk_5alloc6string6StringE11is_absoluteCsbrE1BkJ52QU_5oxrdf:
  146|   369k|    pub fn is_absolute(&self) -> bool {
  147|   369k|        self.positions.scheme_end != 0
  148|   369k|    }
_RNCNvMs11_Cs72NQLJxIjgJ_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferE10read_echars_0CsbrE1BkJ52QU_5oxrdf:
 1438|     44|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE11parse_queryCsbrE1BkJ52QU_5oxrdf:
 1380|    267|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1381|  3.08k|        while let Some(c) = self.input.next() {
 1382|  2.83k|            if c == '#' {
 1383|     19|                self.output_positions.query_end = self.output.len();
 1384|     19|                self.output.push('#');
 1385|     19|                return self.parse_fragment();
 1386|       |            } else {
 1387|  2.81k|                self.read_url_query_codepoint_or_echar(c)?
 1388|       |            }
 1389|       |        }
 1390|    248|        self.output_positions.query_end = self.output.len();
 1391|    248|        Ok(())
 1392|    267|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE15parse_authorityCsbrE1BkJ52QU_5oxrdf:
 1231|   369k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1232|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1233|  4.13M|        loop {
 1234|  4.13M|            let c = self.input.next();
 1235|  4.13M|            match c {
 1236|       |                Some('@') => {
 1237|      1|                    self.output.push('@');
 1238|      1|                    return self.parse_host();
 1239|       |                }
 1240|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1241|   369k|                    self.input = ParserInput {
 1242|   369k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1243|   369k|                        position: self.input_scheme_end + 2,
 1244|   369k|                    };
 1245|   369k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1246|   369k|                    return self.parse_host();
 1247|       |                }
 1248|  3.76M|                Some(c) => {
 1249|  3.76M|                    self.read_url_codepoint_or_echar(c)?;
 1250|       |                }
 1251|       |            }
 1252|       |        }
 1253|   369k|    }
_RNvMsp_Cs72NQLJxIjgJ_5oxiriINtB5_3IriNtNtCsdBW21Yiwikk_5alloc6string6StringE10into_innerCsbrE1BkJ52QU_5oxrdf:
  568|   534k|    pub fn into_inner(self) -> T {
  569|   534k|        self.0.into_inner()
  570|   534k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_portCsbrE1BkJ52QU_5oxrdf:
 1301|     69|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1302|     76|        loop {
 1303|     76|            let c = self.input.next();
 1304|     70|            match c {
 1305|     70|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1306|       |                Some('/') | Some('?') | Some('#') | None => {
 1307|     69|                    self.output_positions.authority_end = self.output.len();
 1308|     69|                    return self.parse_path_start(c);
 1309|       |                }
 1310|      0|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1311|       |            }
 1312|       |        }
 1313|     69|    }
_RNvMCs72NQLJxIjgJ_5oxiriINtB2_6IriRefNtNtCsdBW21Yiwikk_5alloc6string6StringE10into_innerCsbrE1BkJ52QU_5oxrdf:
  132|   534k|    pub fn into_inner(self) -> T {
  133|   534k|        self.iri
  134|   534k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE27read_url_codepoint_or_echarCsbrE1BkJ52QU_5oxrdf:
 1410|  15.1M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1411|  15.1M|        if c == '%' {
 1412|     22|            self.read_echar()
 1413|  15.1M|        } else if is_url_code_point(c) {
 1414|  15.1M|            self.output.push(c);
 1415|  15.1M|            Ok(())
 1416|       |        } else {
 1417|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1418|       |        }
 1419|  15.1M|    }
_RNCNvMs11_Cs72NQLJxIjgJ_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferE10read_echar0CsbrE1BkJ52QU_5oxrdf:
 1437|     44|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs10_Cs72NQLJxIjgJ_5oxiriNtB6_11ParserInput5frontCsbrE1BkJ52QU_5oxrdf:
 1053|   369k|    fn front(&self) -> Option<char> {
 1054|   369k|        self.value.clone().next()
 1055|   369k|    }
_RNvMs10_Cs72NQLJxIjgJ_5oxiriNtB6_11ParserInput11starts_withCsbrE1BkJ52QU_5oxrdf:
 1058|  1.10M|    fn starts_with(&self, c: char) -> bool {
 1059|  1.10M|        self.value.as_str().starts_with(c)
 1060|  1.10M|    }
_RNvXs1b_Cs72NQLJxIjgJ_5oxiriNtB6_16VoidOutputBufferNtNtCsl2lhD68vXAd_4core7default7Default7defaultCsbrE1BkJ52QU_5oxrdf:
  968|   369k|#[derive(Default)]
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCsbrE1BkJ52QU_5oxrdf:
  990|   369k|    fn truncate(&mut self, new_len: usize) {
  991|   369k|        self.len = new_len;
  992|   369k|    }
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCsbrE1BkJ52QU_5oxrdf:
  995|  1.47M|    fn len(&self) -> usize {
  996|  1.47M|        self.len
  997|  1.47M|    }
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCsbrE1BkJ52QU_5oxrdf:
 1000|  1.88M|    fn as_str(&self) -> &str {
 1001|  1.88M|        ""
 1002|  1.88M|    }
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsbrE1BkJ52QU_5oxrdf:
  975|  19.0M|    fn push(&mut self, c: char) {
  976|  19.0M|        self.len += c.len_utf8();
  977|  19.0M|    }
_RNvMs10_Cs72NQLJxIjgJ_5oxiriNtB6_11ParserInput4nextCsbrE1BkJ52QU_5oxrdf:
 1043|  19.7M|    fn next(&mut self) -> Option<char> {
 1044|  19.7M|        if let Some(head) = self.value.next() {
 1045|  19.3M|            self.position += head.len_utf8();
 1046|  19.3M|            Some(head)
 1047|       |        } else {
 1048|   370k|            None
 1049|       |        }
 1050|  19.7M|    }
_RNvCs72NQLJxIjgJ_5oxiri17is_url_code_point:
 1459|  16.6M|fn is_url_code_point(c: char) -> bool {
 1460|  16.6M|    matches!(c,
 1461|  10.5M|        'a'..='z'
 1462|   350k|        | 'A'..='Z'
 1463|  3.14M|        | '0'..='9'
 1464|       |        | '!'
 1465|       |        | '$'
 1466|       |        | '&'
 1467|       |        | '\''
 1468|       |        | '('
 1469|       |        | ')'
 1470|       |        | '*'
 1471|       |        | '+'
 1472|       |        | ','
 1473|       |        | '-'
 1474|       |        | '.'
 1475|       |        | '/'
 1476|       |        | ':'
 1477|       |        | ';'
 1478|       |        | '='
 1479|       |        | '?'
 1480|       |        | '@'
 1481|       |        | '_'
 1482|       |        | '~'
 1483|  4.16k|        | '\u{A0}'..='\u{D7FF}'
 1484|     63|        | '\u{F900}'..='\u{FDCF}'
 1485|      0|        | '\u{FDF0}'..='\u{FFEF}'
 1486|      0|        | '\u{10000}'..='\u{1FFFD}'
 1487|      0|        | '\u{20000}'..='\u{2FFFD}'
 1488|      0|        | '\u{30000}'..='\u{3FFFD}'
 1489|      0|        | '\u{40000}'..='\u{4FFFD}'
 1490|      0|        | '\u{50000}'..='\u{5FFFD}'
 1491|      0|        | '\u{60000}'..='\u{6FFFD}'
 1492|      0|        | '\u{70000}'..='\u{7FFFD}'
 1493|      0|        | '\u{80000}'..='\u{8FFFD}'
 1494|      0|        | '\u{90000}'..='\u{9FFFD}'
 1495|      0|        | '\u{A0000}'..='\u{AFFFD}'
 1496|      0|        | '\u{B0000}'..='\u{BFFFD}'
 1497|      0|        | '\u{C0000}'..='\u{CFFFD}'
 1498|      0|        | '\u{D0000}'..='\u{DFFFD}'
 1499|      0|        | '\u{E1000}'..='\u{EFFFD}'
 1500|       |    )
 1501|  16.6M|}
_RNvXsW_Cs72NQLJxIjgJ_5oxiriNtB5_13IriParseErrorNtNtCsl2lhD68vXAd_4core3fmt7Display3fmt:
  906|  52.2k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  907|  52.2k|        match &self.kind {
  908|    234|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
  909|    132|            IriParseErrorKind::InvalidHostCharacter(c) => {
  910|    132|                write!(f, "Invalid character '{}' in host", c)
  911|       |            }
  912|      0|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({})", e),
  913|    328|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{}'", c),
  914|  48.0k|            IriParseErrorKind::InvalidIriCodePoint(c) => {
  915|  48.0k|                write!(f, "Invalid IRI code point '{}'", c)
  916|       |            }
  917|  3.52k|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
  918|  3.52k|                f,
  919|  3.52k|                "Invalid IRI percent encoding '{}'",
  920|  3.52k|                cs.iter().flatten().cloned().collect::<String>()
  921|  3.52k|            ),
  922|       |        }
  923|  52.2k|    }
_RNvCs72NQLJxIjgJ_5oxiri23is_url_query_code_point:
 1503|   170k|fn is_url_query_code_point(c: char) -> bool {
 1504|   170k|    is_url_code_point(c)
 1505|  6.89k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1506|   170k|}

_RNvXsM_NtCscqn4bkiv6Zi_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCsl2lhD68vXAd_4core3ops5arith9AddAssign10add_assignCskMJXU54EgBa_11rand_chacha:
   32|  3.54M|            fn $fn_assign(&mut self, rhs: Self) {
   33|  3.54M|                (self.0[0]).$fn_assign(rhs.0[0]);
   34|  3.54M|                (self.0[1]).$fn_assign(rhs.0[1]);
   35|  3.54M|            }
_RNvXs_NtCscqn4bkiv6Zi_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right16CskMJXU54EgBa_11rand_chacha:
   42|   885k|        fn $fn(self) -> Self {
   43|   885k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   885k|        }
_RNvXs_NtCscqn4bkiv6Zi_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right25CskMJXU54EgBa_11rand_chacha:
   42|   885k|        fn $fn(self) -> Self {
   43|   885k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   885k|        }
_RNvMNtCscqn4bkiv6Zi_10ppv_lite864softINtB2_2x2INtNtNtNtB4_6x86_644sse24avx212u32x4x2_avx2NtBP_4NoNIENtBN_2G0E3newCskMJXU54EgBa_11rand_chacha:
   13|  10.1M|    pub fn new(xs: [W; 2]) -> Self {
   14|  10.1M|        x2(xs, PhantomData)
   15|  10.1M|    }
_RNvXsg_NtCscqn4bkiv6Zi_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words2301CskMJXU54EgBa_11rand_chacha:
  201|   885k|    fn shuffle_lane_words2301(self) -> Self {
  202|   885k|        Self::new([
  203|   885k|            self.0[0].shuffle_lane_words2301(),
  204|   885k|            self.0[1].shuffle_lane_words2301(),
  205|   885k|        ])
  206|   885k|    }
_RNvXsg_NtCscqn4bkiv6Zi_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words3012CskMJXU54EgBa_11rand_chacha:
  215|   885k|    fn shuffle_lane_words3012(self) -> Self {
  216|   885k|        Self::new([
  217|   885k|            self.0[0].shuffle_lane_words3012(),
  218|   885k|            self.0[1].shuffle_lane_words3012(),
  219|   885k|        ])
  220|   885k|    }
_RNvXsg_NtCscqn4bkiv6Zi_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words1230CskMJXU54EgBa_11rand_chacha:
  208|   885k|    fn shuffle_lane_words1230(self) -> Self {
  209|   885k|        Self::new([
  210|   885k|            self.0[0].shuffle_lane_words1230(),
  211|   885k|            self.0[1].shuffle_lane_words1230(),
  212|   885k|        ])
  213|   885k|    }
_RNvXs_NtCscqn4bkiv6Zi_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right20CskMJXU54EgBa_11rand_chacha:
   42|   885k|        fn $fn(self) -> Self {
   43|   885k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   885k|        }
_RNvXs_NtCscqn4bkiv6Zi_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right24CskMJXU54EgBa_11rand_chacha:
   42|   885k|        fn $fn(self) -> Self {
   43|   885k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   885k|        }
_RNvXsG_NtCscqn4bkiv6Zi_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCsl2lhD68vXAd_4core3ops3bit6BitXor6bitxorCskMJXU54EgBa_11rand_chacha:
   22|  3.54M|            fn $fn(self, rhs: Self) -> Self::Output {
   23|  3.54M|                x2::new([self.0[0].$fn(rhs.0[0]), self.0[1].$fn(rhs.0[1])])
   24|  3.54M|            }

_RINvYINtNtCscqn4bkiv6Zi_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec128_storageINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EECskMJXU54EgBa_11rand_chacha:
  246|   664k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|   664k|        unsafe { V::unpack(s) }
  248|   664k|    }
_RINvYINtNtCscqn4bkiv6Zi_10ppv_lite866x86_6410SseMachineNtB6_5YesS3NtB6_5YesS4NtB6_4NoNIENtNtB8_5types7Machine7read_leINtNtB6_4sse210u32x4_sse2BR_B12_B1d_EECskMJXU54EgBa_11rand_chacha:
  259|    578|    fn read_le<V>(self, input: &[u8]) -> V
  260|    578|    where
  261|    578|        V: StoreBytes,
  262|    578|    {
  263|    578|        unsafe { V::unsafe_read_le(input) }
  264|    578|    }
_RINvYINtNtCscqn4bkiv6Zi_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec512_storageINtNtB8_4soft2x2INtNtNtB6_4sse24avx212u32x4x2_avx2BS_ENtB2b_2G0EECskMJXU54EgBa_11rand_chacha:
  246|  73.8k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|  73.8k|        unsafe { V::unpack(s) }
  248|  73.8k|    }
_RINvYINtNtCscqn4bkiv6Zi_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine3vecINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EAmj4_ECskMJXU54EgBa_11rand_chacha:
  251|  73.8k|    fn vec<V, A>(self, a: A) -> V
  252|  73.8k|    where
  253|  73.8k|        V: MultiLane<A>,
  254|  73.8k|    {
  255|  73.8k|        V::from_lanes(a)
  256|  73.8k|    }

_RNvXs_NtCscqn4bkiv6Zi_10ppv_lite866x86_64INtB4_11Avx2MachineNtB4_4NoNIENtNtB6_5types7Machine8instanceCskMJXU54EgBa_11rand_chacha:
   92|  73.8k|    unsafe fn instance() -> Self {
   93|  73.8k|        Avx2Machine(PhantomData)
   94|  73.8k|    }
_RNvXNtCscqn4bkiv6Zi_10ppv_lite866x86_64INtB2_10SseMachineNtB2_5YesS3NtB2_5YesS4NtB2_4NoNIENtNtB4_5types7Machine8instanceCskMJXU54EgBa_11rand_chacha:
   64|    289|    unsafe fn instance() -> Self {
   65|    289|        SseMachine(PhantomData)
   66|    289|    }
_RNvNtCskMJXU54EgBa_11rand_chacha4guts11refill_wide:
  250|  73.8k|        $($pub$(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  251|  73.8k|            #[inline(always)]
  252|  73.8k|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  253|  73.8k|            use std::arch::x86_64::*;
  254|  73.8k|            #[target_feature(enable = "avx2")]
  255|  73.8k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  73.8k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  73.8k|                _mm256_zeroupper();
  258|  73.8k|                ret
  259|  73.8k|            }
  260|  73.8k|            #[target_feature(enable = "avx")]
  261|  73.8k|            #[target_feature(enable = "sse4.1")]
  262|  73.8k|            #[target_feature(enable = "ssse3")]
  263|  73.8k|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  264|  73.8k|                let ret = fn_impl($crate::x86_64::AVX::instance(), $($arg),*);
  265|  73.8k|                _mm256_zeroupper();
  266|  73.8k|                ret
  267|  73.8k|            }
  268|  73.8k|            #[target_feature(enable = "sse4.1")]
  269|  73.8k|            #[target_feature(enable = "ssse3")]
  270|  73.8k|            unsafe fn impl_sse41($($arg: $argty),*) -> $ret {
  271|  73.8k|                fn_impl($crate::x86_64::SSE41::instance(), $($arg),*)
  272|  73.8k|            }
  273|  73.8k|            #[target_feature(enable = "ssse3")]
  274|  73.8k|            unsafe fn impl_ssse3($($arg: $argty),*) -> $ret {
  275|  73.8k|                fn_impl($crate::x86_64::SSSE3::instance(), $($arg),*)
  276|  73.8k|            }
  277|  73.8k|            #[target_feature(enable = "sse2")]
  278|  73.8k|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  279|  73.8k|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  280|  73.8k|            }
  281|  73.8k|            unsafe {
  282|  73.8k|                if is_x86_feature_detected!("avx2") {
  283|  73.8k|                    impl_avx2($($arg),*)
  284|      0|                } else if is_x86_feature_detected!("avx") {
  285|      0|                    impl_avx($($arg),*)
  286|      0|                } else if is_x86_feature_detected!("sse4.1") {
  287|      0|                    impl_sse41($($arg),*)
  288|      0|                } else if is_x86_feature_detected!("ssse3") {
  289|      0|                    impl_ssse3($($arg),*)
  290|      0|                } else if is_x86_feature_detected!("sse2") {
  291|      0|                    impl_sse2($($arg),*)
  292|       |                } else {
  293|      0|                    unimplemented!()
  294|       |                }
  295|       |            }
  296|  73.8k|        }
_RNvNvNtCskMJXU54EgBa_11rand_chacha4guts11refill_wide9impl_avx2:
  255|  73.8k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  73.8k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  73.8k|                _mm256_zeroupper();
  258|  73.8k|                ret
  259|  73.8k|            }
_RNvNvNtCskMJXU54EgBa_11rand_chacha4guts11init_chacha8impl_avx:
  338|    289|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|    289|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|    289|            }
_RNvNtCskMJXU54EgBa_11rand_chacha4guts11init_chacha:
  333|    289|        $($pub $(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  334|    289|            #[inline(always)]
  335|    289|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  336|    289|            use std::arch::x86_64::*;
  337|    289|            #[target_feature(enable = "avx")]
  338|    289|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|    289|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|    289|            }
  341|    289|            #[target_feature(enable = "sse2")]
  342|    289|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  343|    289|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  344|    289|            }
  345|    289|            unsafe {
  346|    289|                if is_x86_feature_detected!("avx") {
  347|    289|                    impl_avx($($arg),*)
  348|      0|                } else if is_x86_feature_detected!("sse2") {
  349|      0|                    impl_sse2($($arg),*)
  350|       |                } else {
  351|      0|                    unimplemented!()
  352|       |                }
  353|       |            }
  354|    289|        }
_RNvXs2_NtCscqn4bkiv6Zi_10ppv_lite866x86_64NtB5_14vec128_storageINtNtCsl2lhD68vXAd_4core7convert4FromAmj4_E4from:
  130|    289|    fn from(u32x4: [u32; 4]) -> Self {
  131|    289|        vec128_storage { u32x4 }
  132|    289|    }

_RNvXs0_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types5StoreNtB9_14vec256_storageE6unpackCskMJXU54EgBa_11rand_chacha:
 1402|   147k|        unsafe fn unpack(p: vec256_storage) -> Self {
 1403|   147k|            Self::new(p.avx)
 1404|   147k|        }
_RNvXs2_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E10from_lanesCskMJXU54EgBa_11rand_chacha:
 1439|   590k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 2]) -> Self {
 1440|   590k|            Self::new(unsafe { _mm256_setr_m128i(x[0].x, x[1].x) })
 1441|   590k|        }
_RNvXs10_NtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes14unsafe_read_leCskMJXU54EgBa_11rand_chacha:
   79|    578|            unsafe fn unsafe_read_le(input: &[u8]) -> Self {
   80|    578|                assert_eq!(input.len(), 16);
   81|    578|                Self::new(_mm_loadu_si128(input.as_ptr() as *const _))
   82|    578|            }
_RNvXs6_NtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E10from_lanesCskMJXU54EgBa_11rand_chacha:
  331|  73.8k|    fn from_lanes(xs: [u32; 4]) -> Self {
  332|  73.8k|        unsafe {
  333|  73.8k|            let mut x = _mm_cvtsi64_si128((xs[0] as u64 | ((xs[1] as u64) << 32)) as i64);
  334|  73.8k|            x = _mm_insert_epi64(x, (xs[2] as u64 | ((xs[3] as u64) << 32)) as i64, 1);
  335|  73.8k|            Self::new(x)
  336|  73.8k|        }
  337|  73.8k|    }
_RNvXsl_NtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE6insertCskMJXU54EgBa_11rand_chacha:
  523|  1.03M|    fn insert(self, v: u32, i: u32) -> Self {
  524|  1.03M|        Self::new(unsafe {
  525|  1.03M|            match i {
  526|   516k|                0 => _mm_insert_epi32(self.x, v as i32, 0),
  527|   516k|                1 => _mm_insert_epi32(self.x, v as i32, 1),
  528|      0|                2 => _mm_insert_epi32(self.x, v as i32, 2),
  529|      0|                3 => _mm_insert_epi32(self.x, v as i32, 3),
  530|      0|                _ => unreachable!(),
  531|       |            }
  532|       |        })
  533|  1.03M|    }
_RNvXs6_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right24CskMJXU54EgBa_11rand_chacha:
 1470|  1.77M|            fn $name(self) -> Self {
 1471|  1.77M|                Self::new(unsafe {
 1472|  1.77M|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|  1.77M|                })
 1474|  1.77M|            }
_RNvXsc_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words2301CskMJXU54EgBa_11rand_chacha:
 1586|  1.77M|        fn shuffle_lane_words2301(self) -> Self {
 1587|  1.77M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0100_1110) })
 1588|  1.77M|        }
_RNvMsZ_NtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIE3newCskMJXU54EgBa_11rand_chacha:
   64|  4.13M|            fn new(x: __m128i) -> Self {
   65|  4.13M|                $vec {
   66|  4.13M|                    x,
   67|  4.13M|                    s3: PhantomData,
   68|  4.13M|                    s4: PhantomData,
   69|  4.13M|                    ni: PhantomData,
   70|  4.13M|                }
   71|  4.13M|            }
_RNvXsX_NtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types5StoreNtB7_14vec128_storageE6unpackCskMJXU54EgBa_11rand_chacha:
   52|   664k|            unsafe fn unpack(x: vec128_storage) -> Self {
   53|   664k|                Self::new(x.sse2)
   54|   664k|            }
_RNvXsv_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCsl2lhD68vXAd_4core3ops5arith3Add3addCskMJXU54EgBa_11rand_chacha:
 1543|  7.08M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  7.08M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  7.08M|                }
_RNvXsf_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E8to_lanesCskMJXU54EgBa_11rand_chacha:
 1611|   295k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 4] {
 1612|   295k|            let [a, b] = self.0[0].to_lanes();
 1613|   295k|            let [c, d] = self.0[1].to_lanes();
 1614|   295k|            [a, b, c, d]
 1615|   295k|        }
_RNvXsc_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words3012CskMJXU54EgBa_11rand_chacha:
 1590|  1.77M|        fn shuffle_lane_words3012(self) -> Self {
 1591|  1.77M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0011_1001) })
 1592|  1.77M|        }
_RNvXsq_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCsl2lhD68vXAd_4core3ops5arith9AddAssign10add_assignCskMJXU54EgBa_11rand_chacha:
 1527|  7.08M|                fn $assign_fn(&mut self, rhs: Self) {
 1528|  7.08M|                    *self = self.$bin_fn(rhs);
 1529|  7.08M|                }
_RNvXs10_NtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes8write_leCskMJXU54EgBa_11rand_chacha:
   89|  1.18M|            fn write_le(self, out: &mut [u8]) {
   90|  1.18M|                assert_eq!(out.len(), 16);
   91|  1.18M|                unsafe { _mm_storeu_si128(out.as_mut_ptr() as *mut _, self.x) }
   92|  1.18M|            }
_RNvXs6_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right20CskMJXU54EgBa_11rand_chacha:
 1480|  1.77M|            fn $name(self) -> Self {
 1481|  1.77M|                Self::new(unsafe {
 1482|  1.77M|                    _mm256_or_si256(
 1483|  1.77M|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|  1.77M|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|  1.77M|                    )
 1486|  1.77M|                })
 1487|  1.77M|            }
_RNvXsc_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words1230CskMJXU54EgBa_11rand_chacha:
 1582|  1.77M|        fn shuffle_lane_words1230(self) -> Self {
 1583|  1.77M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b1001_0011) })
 1584|  1.77M|        }
_RNvXsr_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCsl2lhD68vXAd_4core3ops3bit6BitXor6bitxorCskMJXU54EgBa_11rand_chacha:
 1543|  7.08M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  7.08M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  7.08M|                }
_RNvXse_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types5StoreNtB9_14vec512_storageE6unpackCskMJXU54EgBa_11rand_chacha:
 1602|  73.8k|        unsafe fn unpack(p: vec512_storage) -> Self {
 1603|  73.8k|            Self::new([
 1604|  73.8k|                u32x4x2_avx2::unpack(p.avx[0]),
 1605|  73.8k|                u32x4x2_avx2::unpack(p.avx[1]),
 1606|  73.8k|            ])
 1607|  73.8k|        }
_RNvXsf_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E10from_lanesCskMJXU54EgBa_11rand_chacha:
 1617|   295k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 4]) -> Self {
 1618|   295k|            let ab = u32x4x2_avx2::from_lanes([x[0], x[1]]);
 1619|   295k|            let cd = u32x4x2_avx2::from_lanes([x[2], x[3]]);
 1620|   295k|            Self::new([ab, cd])
 1621|   295k|        }
_RNvMNtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB2_12u32x4x2_avx2NtB6_4NoNIE3newCskMJXU54EgBa_11rand_chacha:
 1394|  27.3M|        fn new(x: __m256i) -> Self {
 1395|  27.3M|            Self { x, ni: PhantomData }
 1396|  27.3M|        }
_RNvXs1R_NtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtNtCsl2lhD68vXAd_4core3ops5arith3Add3addCskMJXU54EgBa_11rand_chacha:
   18|  1.18M|            fn $fn(self, rhs: Self) -> Self::Output {
   19|  1.18M|                Self::new(unsafe { $impl_fn(self.x, rhs.x) })
   20|  1.18M|            }
_RNvXs6_NtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E8to_lanesCskMJXU54EgBa_11rand_chacha:
  323|   295k|    fn to_lanes(self) -> [u32; 4] {
  324|   295k|        unsafe {
  325|   295k|            let x = _mm_cvtsi128_si64(self.x) as u64;
  326|   295k|            let y = _mm_extract_epi64(self.x, 1) as u64;
  327|   295k|            [x as u32, (x >> 32) as u32, y as u32, (y >> 32) as u32]
  328|   295k|        }
  329|   295k|    }
_RNvXs2_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E8to_lanesCskMJXU54EgBa_11rand_chacha:
 1430|   590k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 2] {
 1431|   590k|            unsafe {
 1432|   590k|                [
 1433|   590k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 0)),
 1434|   590k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 1)),
 1435|   590k|                ]
 1436|   590k|            }
 1437|   590k|        }
_RNvXs6_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right25CskMJXU54EgBa_11rand_chacha:
 1480|  1.77M|            fn $name(self) -> Self {
 1481|  1.77M|                Self::new(unsafe {
 1482|  1.77M|                    _mm256_or_si256(
 1483|  1.77M|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|  1.77M|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|  1.77M|                    )
 1486|  1.77M|                })
 1487|  1.77M|            }
_RNvXsl_NtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE7extractCskMJXU54EgBa_11rand_chacha:
  519|   295k|    fn extract(self, i: u32) -> u32 {
  520|   295k|        self.to_lanes()[i as usize]
  521|   295k|    }
_RNvXs6_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right16CskMJXU54EgBa_11rand_chacha:
 1470|  1.77M|            fn $name(self) -> Self {
 1471|  1.77M|                Self::new(unsafe {
 1472|  1.77M|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|  1.77M|                })
 1474|  1.77M|            }
_RNvXsY_NtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse2NtB7_14vec128_storageINtNtCsl2lhD68vXAd_4core7convert4FromINtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEE4fromCskMJXU54EgBa_11rand_chacha:
   58|  74.3k|            fn from(x: $vec<S3, S4, NI>) -> Self {
   59|  74.3k|                vec128_storage { sse2: x.x }
   60|  74.3k|            }
_RNvXsj_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2NtB9_14vec512_storageINtNtCsl2lhD68vXAd_4core7convert4FromINtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EE4fromCskMJXU54EgBa_11rand_chacha:
 1683|  73.8k|        fn from(x: u32x4x4_avx2<NI>) -> Self {
 1684|  73.8k|            Self {
 1685|  73.8k|                avx: [
 1686|  73.8k|                    vec256_storage { avx: x.0[0].x },
 1687|  73.8k|                    vec256_storage { avx: x.0[1].x },
 1688|  73.8k|                ],
 1689|  73.8k|            }
 1690|  73.8k|        }

_RINvXs2_NtNtCsliEG8YhJqi1_4rand13distributions7integerNtB8_8StandardINtNtB8_12distribution12DistributionoE6sampleNtNtNtBa_4rngs6thread9ThreadRngECs4WjTcpTVJQo_5oxttl:
   51|  1.18M|    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u128 {
   52|  1.18M|        // Use LE; we explicitly generate one value before the next.
   53|  1.18M|        let x = u128::from(rng.next_u64());
   54|  1.18M|        let y = u128::from(rng.next_u64());
   55|  1.18M|        (y << 64) | x
   56|  1.18M|    }

_RINvCsliEG8YhJqi1_4rand6randomoECs4WjTcpTVJQo_5oxttl:
  183|  1.18M|pub fn random<T>() -> T
  184|  1.18M|where Standard: Distribution<T> {
  185|  1.18M|    thread_rng().gen()
  186|  1.18M|}

_RINvYNtNtNtCsliEG8YhJqi1_4rand4rngs6thread9ThreadRngNtNtB9_3rng3Rng3genoECs4WjTcpTVJQo_5oxttl:
   93|  1.18M|    fn gen<T>(&mut self) -> T
   94|  1.18M|    where Standard: Distribution<T> {
   95|  1.18M|        Standard.sample(self)
   96|  1.18M|    }

_RNvXs_NtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseedingINtB4_12ReseedingRngNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtCsbT0BH6pPOpx_9rand_core2os5OsRngENtB24_7RngCore8next_u64Cs4WjTcpTVJQo_5oxttl:
  124|  2.36M|    fn next_u64(&mut self) -> u64 {
  125|  2.36M|        self.0.next_u64()
  126|  2.36M|    }
_RNvMs3_NtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtCsbT0BH6pPOpx_9rand_core2os5OsRngE3newBb_:
  193|      1|    fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  194|      1|        use ::core::i64::MAX;
  195|      1|        fork::register_fork_handler();
  196|       |
  197|       |        // Because generating more values than `i64::MAX` takes centuries on
  198|       |        // current hardware, we just clamp to that value.
  199|       |        // Also we set a threshold of 0, which indicates no limit, to that
  200|       |        // value.
  201|      1|        let threshold = if threshold == 0 {
  202|      0|            MAX
  203|      1|        } else if threshold <= MAX as u64 {
  204|      1|            threshold as i64
  205|       |        } else {
  206|      0|            MAX
  207|       |        };
  208|       |
  209|      1|        ReseedingCore {
  210|      1|            inner: rng,
  211|      1|            reseeder,
  212|      1|            threshold: threshold as i64,
  213|      1|            bytes_until_reseed: threshold as i64,
  214|      1|            fork_counter: 0,
  215|      1|        }
  216|      1|    }
_RNvMs3_NtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtCsbT0BH6pPOpx_9rand_core2os5OsRngE6reseedBb_:
  219|    288|    fn reseed(&mut self) -> Result<(), Error> {
  220|    288|        R::from_rng(&mut self.reseeder).map(|result| {
  221|       |            self.bytes_until_reseed = self.threshold;
  222|       |            self.inner = result
  223|    288|        })
  224|    288|    }
_RNvMs3_NtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtCsbT0BH6pPOpx_9rand_core2os5OsRngE9is_forkedBb_:
  226|  73.8k|    fn is_forked(&self, global_fork_counter: usize) -> bool {
  227|  73.8k|        // In theory, on 32-bit platforms, it is possible for
  228|  73.8k|        // `global_fork_counter` to wrap around after ~4e9 forks.
  229|  73.8k|        //
  230|  73.8k|        // This check will detect a fork in the normal case where
  231|  73.8k|        // `fork_counter < global_fork_counter`, and also when the difference
  232|  73.8k|        // between both is greater than `isize::MAX` (wrapped around).
  233|  73.8k|        //
  234|  73.8k|        // It will still fail to detect a fork if there have been more than
  235|  73.8k|        // `isize::MAX` forks, without any reseed in between. Seems unlikely
  236|  73.8k|        // enough.
  237|  73.8k|        (self.fork_counter.wrapping_sub(global_fork_counter) as isize) < 0
  238|  73.8k|    }
_RNvMs3_NtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtCsbT0BH6pPOpx_9rand_core2os5OsRngE19reseed_and_generateBb_:
  241|    288|    fn reseed_and_generate(
  242|    288|        &mut self, results: &mut <Self as BlockRngCore>::Results, global_fork_counter: usize,
  243|    288|    ) {
  244|    288|        #![allow(clippy::if_same_then_else)] // false positive
  245|    288|        if self.is_forked(global_fork_counter) {
  246|      0|            info!("Fork detected, reseeding RNG");
  247|    288|        } else {
  248|    288|            trace!("Reseeding RNG (periodic reseed)");
  249|    288|        }
  250|       |
  251|    288|        let num_bytes = results.as_ref().len() * size_of::<<R as BlockRngCore>::Item>();
  252|       |
  253|    288|        if let Err(e) = self.reseed() {
  254|      0|            warn!("Reseeding RNG failed: {}", e);
  255|      0|            let _ = e;
  256|    288|        }
  257|    288|        self.fork_counter = global_fork_counter;
  258|    288|
  259|    288|        self.bytes_until_reseed = self.threshold - num_bytes as i64;
  260|    288|        self.inner.generate(results);
  261|    288|    }
_RNCNvMs3_NtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseedingINtB7_13ReseedingCoreNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtCsbT0BH6pPOpx_9rand_core2os5OsRngE6reseed0Bd_:
  220|    288|        R::from_rng(&mut self.reseeder).map(|result| {
  221|    288|            self.bytes_until_reseed = self.threshold;
  222|    288|            self.inner = result
  223|    288|        })
_RNvXs2_NtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtCsbT0BH6pPOpx_9rand_core2os5OsRngENtNtB26_5block12BlockRngCore8generateBb_:
  173|  73.8k|    fn generate(&mut self, results: &mut Self::Results) {
  174|  73.8k|        let global_fork_counter = fork::get_fork_counter();
  175|  73.8k|        if self.bytes_until_reseed <= 0 || self.is_forked(global_fork_counter) {
  176|       |            // We get better performance by not calling only `reseed` here
  177|       |            // and continuing with the rest of the function, but by directly
  178|       |            // returning from a non-inlined function.
  179|    288|            return self.reseed_and_generate(results, global_fork_counter);
  180|  73.5k|        }
  181|  73.5k|        let num_bytes = results.as_ref().len() * size_of::<Self::Item>();
  182|  73.5k|        self.bytes_until_reseed -= num_bytes as i64;
  183|  73.5k|        self.inner.generate(results);
  184|  73.8k|    }
_RNvMNtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseedingINtB2_12ReseedingRngNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtCsbT0BH6pPOpx_9rand_core2os5OsRngE3newB8_:
  101|      1|    pub fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  102|      1|        ReseedingRng(BlockRng::new(ReseedingCore::new(rng, threshold, reseeder)))
  103|      1|    }
_RNCNvNtNtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseeding4fork21register_fork_handler0Bb_:
  319|      1|        REGISTER.call_once(|| {
  320|      1|            // Bump the counter before and after forking (see #1169):
  321|      1|            let ret = unsafe { libc::pthread_atfork(
  322|      1|                Some(fork_handler),
  323|      1|                Some(fork_handler),
  324|      1|                Some(fork_handler),
  325|      1|            ) };
  326|      1|            if ret != 0 {
  327|      0|                panic!("libc::pthread_atfork failed with code {}", ret);
  328|      1|            }
  329|      1|        });
_RNvNtNtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseeding4fork21register_fork_handler:
  317|      1|    pub fn register_fork_handler() {
  318|      1|        static REGISTER: Once = Once::new();
  319|      1|        REGISTER.call_once(|| {
  320|       |            // Bump the counter before and after forking (see #1169):
  321|       |            let ret = unsafe { libc::pthread_atfork(
  322|       |                Some(fork_handler),
  323|       |                Some(fork_handler),
  324|       |                Some(fork_handler),
  325|       |            ) };
  326|       |            if ret != 0 {
  327|       |                panic!("libc::pthread_atfork failed with code {}", ret);
  328|       |            }
  329|      1|        });
  330|      1|    }
_RNvNtNtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseeding4fork16get_fork_counter:
  307|  73.8k|    pub fn get_fork_counter() -> usize {
  308|  73.8k|        RESEEDING_RNG_FORK_COUNTER.load(Ordering::Relaxed)
  309|  73.8k|    }

_RNvXs_NtNtCsliEG8YhJqi1_4rand4rngs6threadNtB4_9ThreadRngNtCsbT0BH6pPOpx_9rand_core7RngCore8next_u64:
  109|  2.36M|    fn next_u64(&mut self) -> u64 {
  110|  2.36M|        // SAFETY: We must make sure to stop using `rng` before anyone else
  111|  2.36M|        // creates another mutable reference
  112|  2.36M|        let rng = unsafe { &mut *self.rng.get() };
  113|  2.36M|        rng.next_u64()
  114|  2.36M|    }
_RNCNvNtNtCsliEG8YhJqi1_4rand4rngs6thread10thread_rng0B7_:
   89|  1.18M|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
_RNvNtNtCsliEG8YhJqi1_4rand4rngs6thread10thread_rng:
   88|  1.18M|pub fn thread_rng() -> ThreadRng {
   89|  1.18M|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
   90|  1.18M|    ThreadRng { rng }
   91|  1.18M|}
_RNCNvNvNtNtCsliEG8YhJqi1_4rand4rngs6thread14THREAD_RNG_KEY7___getit0B9_:
   67|      1|thread_local!(
   68|      1|    // We require Rc<..> to avoid premature freeing when thread_rng is used
   69|      1|    // within thread-local destructors. See #968.
   70|      1|    static THREAD_RNG_KEY: Rc<UnsafeCell<ReseedingRng<Core, OsRng>>> = {
   71|      1|        let r = Core::from_rng(OsRng).unwrap_or_else(|err|
   72|      1|                panic!("could not initialize thread_rng: {}", err));
   73|      1|        let rng = ReseedingRng::new(r,
   74|      1|                                    THREAD_RNG_RESEED_THRESHOLD,
   75|      1|                                    OsRng);
   76|      1|        Rc::new(UnsafeCell::new(rng))
   77|      1|    }
   78|      1|);

_RNvXsn_NtCskMJXU54EgBa_11rand_chacha6chachaNtB5_12ChaCha12CoreNtCsbT0BH6pPOpx_9rand_core11SeedableRng9from_seedCsliEG8YhJqi1_4rand:
  103|    289|            fn from_seed(seed: Self::Seed) -> Self {
  104|    289|                $ChaChaXCore { state: ChaCha::new(&seed, &[0u8; 8]) }
  105|    289|            }
_RNvXsm_NtCskMJXU54EgBa_11rand_chacha6chachaNtB5_12ChaCha12CoreNtNtCsbT0BH6pPOpx_9rand_core5block12BlockRngCore8generateCsliEG8YhJqi1_4rand:
   89|  73.8k|            fn generate(&mut self, r: &mut Self::Results) {
   90|  73.8k|                // Fill slice of words by writing to equivalent slice of bytes, then fixing endianness.
   91|  73.8k|                self.state.refill4($rounds, unsafe {
   92|  73.8k|                    &mut *(&mut *r as *mut Array64<u32> as *mut [u8; 256])
   93|  73.8k|                });
   94|  4.72M|                for x in r.as_mut() {
   95|  4.72M|                    *x = x.to_le();
   96|  4.72M|                }
   97|  73.8k|            }
_RNvXs_NtCskMJXU54EgBa_11rand_chacha6chachaINtB4_7Array64mEINtNtCsl2lhD68vXAd_4core7convert5AsRefSmE6as_refB6_:
   46|  4.87M|    fn as_ref(&self) -> &[T] {
   47|  4.87M|        &self.0
   48|  4.87M|    }
_RNvXs0_NtCskMJXU54EgBa_11rand_chacha6chachaINtB5_7Array64mEINtNtCsl2lhD68vXAd_4core7convert5AsMutSmE6as_mutB7_:
   51|  73.8k|    fn as_mut(&mut self) -> &mut [T] {
   52|  73.8k|        &mut self.0
   53|  73.8k|    }
_RNvXNtCskMJXU54EgBa_11rand_chacha6chachaINtB2_7Array64mENtNtCsl2lhD68vXAd_4core7default7Default7defaultB4_:
   32|      1|    fn default() -> Self {
   33|      1|        Self([
   34|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   35|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   36|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   37|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   38|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   39|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   40|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   41|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   42|      1|        ])
   43|      1|    }

_RNvMNtCskMJXU54EgBa_11rand_chacha4gutsNtB2_6ChaCha3new:
   72|    289|    pub fn new(key: &[u8; 32], nonce: &[u8]) -> Self {
   73|    289|        init_chacha(key, nonce)
   74|    289|    }
_RNvMNtCskMJXU54EgBa_11rand_chacha4gutsNtB2_6ChaCha7refill4:
   84|  73.8k|    pub fn refill4(&mut self, drounds: u32, out: &mut [u8; BUFSZ]) {
   85|  73.8k|        refill_wide(self, drounds, out)
   86|  73.8k|    }
_RINvNtCskMJXU54EgBa_11rand_chacha4guts16refill_wide_implINtNtCscqn4bkiv6Zi_10ppv_lite866x86_6411Avx2MachineNtBV_4NoNIEEB4_:
  116|  73.8k|fn refill_wide_impl<Mach: Machine>(
  117|  73.8k|    m: Mach, state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ],
  118|  73.8k|) {
  119|  73.8k|    let k = m.vec([0x6170_7865, 0x3320_646e, 0x7962_2d32, 0x6b20_6574]);
  120|  73.8k|    let mut pos = state.pos64(m);
  121|  73.8k|    let d0: Mach::u32x4 = m.unpack(state.d);
  122|  73.8k|    pos = pos.wrapping_add(1);
  123|  73.8k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  124|  73.8k|    pos = pos.wrapping_add(1);
  125|  73.8k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  126|  73.8k|    pos = pos.wrapping_add(1);
  127|  73.8k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  128|  73.8k|
  129|  73.8k|    let b = m.unpack(state.b);
  130|  73.8k|    let c = m.unpack(state.c);
  131|  73.8k|    let mut x = State {
  132|  73.8k|        a: Mach::u32x4x4::from_lanes([k, k, k, k]),
  133|  73.8k|        b: Mach::u32x4x4::from_lanes([b, b, b, b]),
  134|  73.8k|        c: Mach::u32x4x4::from_lanes([c, c, c, c]),
  135|  73.8k|        d: m.unpack(Mach::u32x4x4::from_lanes([d0, d1, d2, d3]).into()),
  136|  73.8k|    };
  137|   442k|    for _ in 0..drounds {
  138|   442k|        x = round(x);
  139|   442k|        x = undiagonalize(round(diagonalize(x)));
  140|   442k|    }
  141|  73.8k|    let mut pos = state.pos64(m);
  142|  73.8k|    let d0: Mach::u32x4 = m.unpack(state.d);
  143|  73.8k|    pos = pos.wrapping_add(1);
  144|  73.8k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  145|  73.8k|    pos = pos.wrapping_add(1);
  146|  73.8k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  147|  73.8k|    pos = pos.wrapping_add(1);
  148|  73.8k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  149|  73.8k|    pos = pos.wrapping_add(1);
  150|  73.8k|    let d4 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  151|  73.8k|
  152|  73.8k|    let (a, b, c, d) = (
  153|  73.8k|        x.a.to_lanes(),
  154|  73.8k|        x.b.to_lanes(),
  155|  73.8k|        x.c.to_lanes(),
  156|  73.8k|        x.d.to_lanes(),
  157|  73.8k|    );
  158|  73.8k|    let sb = m.unpack(state.b);
  159|  73.8k|    let sc = m.unpack(state.c);
  160|  73.8k|    let sd = [m.unpack(state.d), d1, d2, d3];
  161|  73.8k|    state.d = d4.into();
  162|  73.8k|    let mut words = out.chunks_exact_mut(16);
  163|   295k|    for ((((&a, &b), &c), &d), &sd) in a.iter().zip(&b).zip(&c).zip(&d).zip(&sd) {
  164|   295k|        (a + k).write_le(words.next().unwrap());
  165|   295k|        (b + sb).write_le(words.next().unwrap());
  166|   295k|        (c + sc).write_le(words.next().unwrap());
  167|   295k|        (d + sd).write_le(words.next().unwrap());
  168|   295k|    }
  169|  73.8k|}
_RNvNtCskMJXU54EgBa_11rand_chacha4guts10read_u32le:
  229|    578|fn read_u32le(xs: &[u8]) -> u32 {
  230|    578|    assert_eq!(xs.len(), 4);
  231|    578|    u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24)
  232|    578|}
_RINvMNtCskMJXU54EgBa_11rand_chacha4gutsNtB3_6ChaCha5pos64INtNtCscqn4bkiv6Zi_10ppv_lite866x86_6411Avx2MachineNtBW_4NoNIEEB5_:
   77|   147k|    fn pos64<M: Machine>(&self, m: M) -> u64 {
   78|   147k|        let d: M::u32x4 = m.unpack(self.d);
   79|   147k|        ((d.extract(1) as u64) << 32) | d.extract(0) as u64
   80|   147k|    }
_RINvNtCskMJXU54EgBa_11rand_chacha4guts11diagonalizeINtNtCscqn4bkiv6Zi_10ppv_lite864soft2x2INtNtNtNtBS_6x86_644sse24avx212u32x4x2_avx2NtB1x_4NoNIENtB1v_2G0EEB4_:
   56|   442k|pub(crate) fn diagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   57|   442k|    x.b = x.b.shuffle_lane_words3012();
   58|   442k|    x.c = x.c.shuffle_lane_words2301();
   59|   442k|    x.d = x.d.shuffle_lane_words1230();
   60|   442k|    x
   61|   442k|}
_RINvNvNtCskMJXU54EgBa_11rand_chacha4guts11refill_wide7fn_implINtNtCscqn4bkiv6Zi_10ppv_lite866x86_6411Avx2MachineNtB10_4NoNIEEB6_:
  172|  73.8k|    fn refill_wide(state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ]) {
  173|  73.8k|        refill_wide_impl(m, state, drounds, out);
  174|  73.8k|    }
_RINvNtCskMJXU54EgBa_11rand_chacha4guts13undiagonalizeINtNtCscqn4bkiv6Zi_10ppv_lite864soft2x2INtNtNtNtBU_6x86_644sse24avx212u32x4x2_avx2NtB1z_4NoNIENtB1x_2G0EEB4_:
   63|   442k|pub(crate) fn undiagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   64|   442k|    x.b = x.b.shuffle_lane_words1230();
   65|   442k|    x.c = x.c.shuffle_lane_words2301();
   66|   442k|    x.d = x.d.shuffle_lane_words3012();
   67|   442k|    x
   68|   442k|}
_RINvNvNtCskMJXU54EgBa_11rand_chacha4guts11init_chacha7fn_implINtNtCscqn4bkiv6Zi_10ppv_lite866x86_6410SseMachineNtB10_5YesS3NtB10_5YesS4NtB10_4NoNIEEB6_:
  235|    289|    fn init_chacha(key: &[u8; 32], nonce: &[u8]) -> ChaCha {
  236|    289|        let ctr_nonce = [
  237|       |            0,
  238|    289|            if nonce.len() == 12 {
  239|      0|                read_u32le(&nonce[0..4])
  240|       |            } else {
  241|    289|                0
  242|       |            },
  243|    289|            read_u32le(&nonce[nonce.len() - 8..nonce.len() - 4]),
  244|    289|            read_u32le(&nonce[nonce.len() - 4..]),
  245|    289|        ];
  246|    289|        let key0: Mach::u32x4 = m.read_le(&key[..16]);
  247|    289|        let key1: Mach::u32x4 = m.read_le(&key[16..]);
  248|    289|        ChaCha {
  249|    289|            b: key0.into(),
  250|    289|            c: key1.into(),
  251|    289|            d: ctr_nonce.into(),
  252|    289|        }
_RINvNtCskMJXU54EgBa_11rand_chacha4guts5roundINtNtCscqn4bkiv6Zi_10ppv_lite864soft2x2INtNtNtNtBL_6x86_644sse24avx212u32x4x2_avx2NtB1q_4NoNIENtB1o_2G0EEB4_:
   43|   885k|pub(crate) fn round<V: ArithOps + BitOps32>(mut x: State<V>) -> State<V> {
   44|   885k|    x.a += x.b;
   45|   885k|    x.d = (x.d ^ x.a).rotate_each_word_right16();
   46|   885k|    x.c += x.d;
   47|   885k|    x.b = (x.b ^ x.c).rotate_each_word_right20();
   48|   885k|    x.a += x.b;
   49|   885k|    x.d = (x.d ^ x.a).rotate_each_word_right24();
   50|   885k|    x.c += x.d;
   51|   885k|    x.b = (x.b ^ x.c).rotate_each_word_right25();
   52|   885k|    x
   53|   885k|}

_RNCNvXs0_NtCsbT0BH6pPOpx_9rand_core5blockINtB7_8BlockRngINtNtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtB9_2os5OsRngEENtB9_7RngCore8next_u640Cs4WjTcpTVJQo_5oxttl:
  198|  2.36M|        let read_u64 = |results: &[u32], index| {
  199|  2.36M|            let data = &results[index..=index + 1];
  200|  2.36M|            u64::from(data[1]) << 32 | u64::from(data[0])
  201|  2.36M|        };
_RNvXs0_NtCsbT0BH6pPOpx_9rand_core5blockINtB5_8BlockRngINtNtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtB7_2os5OsRngEENtB7_7RngCore8next_u64Cs4WjTcpTVJQo_5oxttl:
  197|  2.36M|    fn next_u64(&mut self) -> u64 {
  198|  2.36M|        let read_u64 = |results: &[u32], index| {
  199|       |            let data = &results[index..=index + 1];
  200|       |            u64::from(data[1]) << 32 | u64::from(data[0])
  201|       |        };
  202|       |
  203|  2.36M|        let len = self.results.as_ref().len();
  204|  2.36M|
  205|  2.36M|        let index = self.index;
  206|  2.36M|        if index < len - 1 {
  207|  2.28M|            self.index += 2;
  208|  2.28M|            // Read an u64 from the current index
  209|  2.28M|            read_u64(self.results.as_ref(), index)
  210|  73.8k|        } else if index >= len {
  211|  73.8k|            self.generate_and_set(2);
  212|  73.8k|            read_u64(self.results.as_ref(), 0)
  213|       |        } else {
  214|      0|            let x = u64::from(self.results.as_ref()[len - 1]);
  215|      0|            self.generate_and_set(1);
  216|      0|            let y = u64::from(self.results.as_ref()[0]);
  217|      0|            (y << 32) | x
  218|       |        }
  219|  2.36M|    }
_RNvMs_NtCsbT0BH6pPOpx_9rand_core5blockINtB4_8BlockRngINtNtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE3newBY_:
  145|      1|    pub fn new(core: R) -> BlockRng<R> {
  146|      1|        let results_empty = R::Results::default();
  147|      1|        BlockRng {
  148|      1|            core,
  149|      1|            index: results_empty.as_ref().len(),
  150|      1|            results: results_empty,
  151|      1|        }
  152|      1|    }
_RNvMs_NtCsbT0BH6pPOpx_9rand_core5blockINtB4_8BlockRngINtNtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE16generate_and_setBY_:
  174|  73.8k|    pub fn generate_and_set(&mut self, index: usize) {
  175|  73.8k|        assert!(index < self.results.as_ref().len());
  176|  73.8k|        self.core.generate(&mut self.results);
  177|  73.8k|        self.index = index;
  178|  73.8k|    }

_RINvYNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtCsbT0BH6pPOpx_9rand_core11SeedableRng8from_rngQNtNtBV_2os5OsRngECsliEG8YhJqi1_4rand:
  390|    288|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|    288|        let mut seed = Self::Seed::default();
  392|    288|        rng.try_fill_bytes(seed.as_mut())?;
  393|    288|        Ok(Self::from_seed(seed))
  394|    288|    }
_RINvYNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtCsbT0BH6pPOpx_9rand_core11SeedableRng8from_rngNtNtBV_2os5OsRngECsliEG8YhJqi1_4rand:
  390|      1|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|      1|        let mut seed = Self::Seed::default();
  392|      1|        rng.try_fill_bytes(seed.as_mut())?;
  393|      1|        Ok(Self::from_seed(seed))
  394|      1|    }
_RNvXs_CsbT0BH6pPOpx_9rand_coreQNtNtB4_2os5OsRngNtB4_7RngCore14try_fill_bytesCsliEG8YhJqi1_4rand:
  441|    288|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
  442|    288|        (**self).try_fill_bytes(dest)
  443|    288|    }

_RNvXs_NtCsbT0BH6pPOpx_9rand_core2osNtB4_5OsRngNtB6_7RngCore14try_fill_bytes:
   67|    289|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
   68|    289|        getrandom(dest)?;
   69|    289|        Ok(())
   70|    289|    }

_RNvNvNtNtCsliEG8YhJqi1_4rand4rngs6thread14THREAD_RNG_KEY7___getitB7_:
   83|  1.18M|            unsafe fn __getit(
   84|  1.18M|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  1.18M|            ) -> $crate::option::Option<&'static $t> {
   86|  1.18M|                #[thread_local]
   87|  1.18M|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  1.18M|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  1.18M|
   90|  1.18M|                unsafe {
   91|  1.18M|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  1.18M|                    })
  101|  1.18M|                }
  102|  1.18M|            }
_RNvNvNtNtCsliEG8YhJqi1_4rand4rngs6thread14THREAD_RNG_KEY6___initB7_:
   80|      1|            fn __init() -> $t { $init }

_RNCNvNvCs8B1jHDnA03z_4trig1__19___libfuzzer_sys_run0B5_:
   69|  12.6M|    let (quads, errors) = parse(data.split(|c| *c == 0xFF));
_RNCNvNvCs8B1jHDnA03z_4trig1__19___libfuzzer_sys_runs_0B5_:
   74|  12.6M|        .filter(|c| *c != 0xFF)
_RINvCs8B1jHDnA03z_4trig5parseARShj1_EB2_:
    7|  22.6k|fn parse<'a>(chunks: impl IntoIterator<Item = &'a [u8]>) -> (Vec<Quad>, Vec<String>) {
    8|  22.6k|    let mut quads = Vec::new();
    9|  22.6k|    let mut errors = Vec::new();
   10|  22.6k|    let mut parser = TriGParser::new()
   11|  22.6k|        .with_quoted_triples()
   12|  22.6k|        .with_base_iri("http://example.com/")
   13|  22.6k|        .unwrap()
   14|  22.6k|        .parse();
   15|  45.3k|    for chunk in chunks {
   16|  22.6k|        parser.extend_from_slice(chunk);
   17|  2.52M|        while let Some(result) = parser.read_next() {
   18|  2.50M|            match result {
   19|   308k|                Ok(quad) => quads.push(quad),
   20|  2.19M|                Err(error) => errors.push(error.to_string()),
   21|       |            }
   22|       |        }
   23|       |    }
   24|  22.6k|    parser.end();
   25|  31.9k|    while let Some(result) = parser.read_next() {
   26|  9.26k|        match result {
   27|    318|            Ok(quad) => quads.push(quad),
   28|  8.94k|            Err(error) => errors.push(error.to_string()),
   29|       |        }
   30|       |    }
   31|  22.6k|    assert!(parser.is_end());
   32|  22.6k|    (quads, errors)
   33|  22.6k|}
_RINvCs8B1jHDnA03z_4trig5parseINtNtNtCsl2lhD68vXAd_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_run0EEB2_:
    7|  22.6k|fn parse<'a>(chunks: impl IntoIterator<Item = &'a [u8]>) -> (Vec<Quad>, Vec<String>) {
    8|  22.6k|    let mut quads = Vec::new();
    9|  22.6k|    let mut errors = Vec::new();
   10|  22.6k|    let mut parser = TriGParser::new()
   11|  22.6k|        .with_quoted_triples()
   12|  22.6k|        .with_base_iri("http://example.com/")
   13|  22.6k|        .unwrap()
   14|  22.6k|        .parse();
   15|  3.20M|    for chunk in chunks {
   16|  3.18M|        parser.extend_from_slice(chunk);
   17|  5.68M|        while let Some(result) = parser.read_next() {
   18|  2.50M|            match result {
   19|   308k|                Ok(quad) => quads.push(quad),
   20|  2.19M|                Err(error) => errors.push(error.to_string()),
   21|       |            }
   22|       |        }
   23|       |    }
   24|  22.6k|    parser.end();
   25|  31.9k|    while let Some(result) = parser.read_next() {
   26|  9.26k|        match result {
   27|    318|            Ok(quad) => quads.push(quad),
   28|  8.94k|            Err(error) => errors.push(error.to_string()),
   29|       |        }
   30|       |    }
   31|  22.6k|    assert!(parser.is_end());
   32|  22.6k|    (quads, errors)
   33|  22.6k|}
_RNvCs8B1jHDnA03z_4trig22count_quad_blank_nodes:
   47|   309k|fn count_quad_blank_nodes(quad: &Quad) -> usize {
   48|   309k|    (match &quad.subject {
   49|   267k|        Subject::BlankNode(_) => 1,
   50|      0|        Subject::Triple(t) => count_triple_blank_nodes(t),
   51|  41.1k|        _ => 0,
   52|   309k|    }) + (match &quad.object {
   53|   199k|        Term::BlankNode(_) => 1,
   54|      0|        Term::Triple(t) => count_triple_blank_nodes(t),
   55|   109k|        _ => 0,
   56|   309k|    }) + usize::from(matches!(quad.graph_name, GraphName::BlankNode(_)))
   57|   309k|}
_RNvCs8B1jHDnA03z_4trig15serialize_quads:
   59|  22.6k|fn serialize_quads(quads: &[Quad]) -> Vec<u8> {
   60|  22.6k|    let mut writer = TriGSerializer::new().serialize_to_write(Vec::new());
   61|   331k|    for quad in quads {
   62|   309k|        writer.write_quad(quad).unwrap();
   63|   309k|    }
   64|  22.6k|    writer.finish().unwrap()
   65|  22.6k|}

_RNvXsd_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs8B1jHDnA03z_4trig:
   24|   467k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMs7_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_5IdStr3newCs8B1jHDnA03z_4trig:
  259|   241k|    fn new(id: u128) -> Self {
  260|   241k|        let mut str = [0; 32];
  261|   241k|        write!(&mut str[..], "{id:x}").unwrap();
  262|   241k|        Self(str)
  263|   241k|    }
_RNvXsr_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs8B1jHDnA03z_4trig:
  142|   257k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RNvMs1_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCs8B1jHDnA03z_4trig:
  183|    137|    pub const fn as_str(self) -> &'a str {
  184|    137|        match self.0 {
  185|    137|            BlankNodeRefContent::Named(id) => id,
  186|      0|            BlankNodeRefContent::Anonymous { str, .. } => str,
  187|       |        }
  188|    137|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCs8B1jHDnA03z_4trig:
   92|   752k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   93|   752k|        BlankNodeRef(match &self.0 {
   94|  2.04k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   95|   750k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   96|   750k|                id: *id,
   97|   750k|                str: str.as_str(),
   98|   750k|            },
   99|       |        })
  100|   752k|    }
_RNvXsi_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs8B1jHDnA03z_4trig:
   27|   467k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMs1_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_12BlankNodeRef10into_ownedCs8B1jHDnA03z_4trig:
  208|   241k|    pub fn into_owned(self) -> BlankNode {
  209|   241k|        BlankNode(match self.0 {
  210|    137|            BlankNodeRefContent::Named(id) => BlankNodeContent::Named(id.to_owned()),
  211|   241k|            BlankNodeRefContent::Anonymous { id, .. } => BlankNodeContent::Anonymous {
  212|   241k|                id,
  213|   241k|                str: IdStr::new(id),
  214|   241k|            },
  215|       |        })
  216|   241k|    }
_RNvXs2_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCs8B1jHDnA03z_4trig:
  221|    137|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  222|    137|        write!(f, "_:{}", self.as_str())
  223|    137|    }
_RNvXsx_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_19BlankNodeRefContentNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs8B1jHDnA03z_4trig:
  145|   257k|#[derive(PartialEq, Eq, Debug, Clone, Copy, Hash)]
_RNvXsF_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_5IdStrNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs8B1jHDnA03z_4trig:
  254|   466k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMs7_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_5IdStr6as_strCs8B1jHDnA03z_4trig:
  266|   750k|    fn as_str(&self) -> &str {
  267|   750k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  268|   750k|        str::from_utf8(&self.0[..len]).unwrap()
  269|   750k|    }
_RNvXs2_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCs4WjTcpTVJQo_5oxttl:
  221|   440k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  222|   440k|        write!(f, "_:{}", self.as_str())
  223|   440k|    }
_RNvXsm_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneCs4WjTcpTVJQo_5oxttl:
   27|  1.67M|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMs1_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCs4WjTcpTVJQo_5oxttl:
  183|   440k|    pub const fn as_str(self) -> &'a str {
  184|   440k|        match self.0 {
  185|    528|            BlankNodeRefContent::Named(id) => id,
  186|   440k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  187|       |        }
  188|   440k|    }
_RNvMs7_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_5IdStr6as_strCs4WjTcpTVJQo_5oxttl:
  266|  1.18M|    fn as_str(&self) -> &str {
  267|  1.18M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  268|  1.18M|        str::from_utf8(&self.0[..len]).unwrap()
  269|  1.18M|    }
_RNvXsf_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneCs4WjTcpTVJQo_5oxttl:
   24|  1.67M|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsJ_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_5IdStrNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneCs4WjTcpTVJQo_5oxttl:
  254|  1.66M|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvNtCsbrE1BkJ52QU_5oxrdf10blank_node13to_integer_idCs4WjTcpTVJQo_5oxttl:
  332|   444k|fn to_integer_id(id: &str) -> Option<u128> {
  333|   444k|    let digits = id.as_bytes();
  334|   444k|    let mut value: u128 = 0;
  335|   444k|    if let None | Some(b'0') = digits.first() {
  336|  1.55k|        return None; // No empty string or leading zeros
  337|   442k|    }
  338|  14.5M|    for digit in digits {
  339|  14.0M|        value = value.checked_mul(16)?.checked_add(
  340|  14.0M|            match *digit {
  341|  14.0M|                b'0'..=b'9' => digit - b'0',
  342|  5.55M|                b'a'..=b'f' => digit - b'a' + 10,
  343|  1.18k|                _ => return None,
  344|       |            }
  345|  14.0M|            .into(),
  346|      0|        )?;
  347|       |    }
  348|   441k|    Some(value)
  349|   444k|}
_RNvMNtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idCs4WjTcpTVJQo_5oxttl:
   66|   441k|    pub fn new_from_unique_id(id: u128) -> Self {
   67|   441k|        Self(BlankNodeContent::Anonymous {
   68|   441k|            id,
   69|   441k|            str: IdStr::new(id),
   70|   441k|        })
   71|   441k|    }
_RNvMs7_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_5IdStr3newCs4WjTcpTVJQo_5oxttl:
  259|  1.62M|    fn new(id: u128) -> Self {
  260|  1.62M|        let mut str = [0; 32];
  261|  1.62M|        write!(&mut str[..], "{id:x}").unwrap();
  262|  1.62M|        Self(str)
  263|  1.62M|    }
_RNvXs0_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCsl2lhD68vXAd_4core7default7Default7defaultCs4WjTcpTVJQo_5oxttl:
  113|   472k|    fn default() -> Self {
  114|       |        // We ensure the ID does not start with a number to be also valid with RDF/XML
  115|  1.18M|        loop {
  116|  1.18M|            let id = random();
  117|  1.18M|            let str = IdStr::new(id);
  118|  1.18M|            if matches!(str.as_str().as_bytes().first(), Some(b'a'..=b'f')) {
  119|   472k|                return Self(BlankNodeContent::Anonymous { id, str });
  120|   708k|            }
  121|       |        }
  122|   472k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedReECs4WjTcpTVJQo_5oxttl:
   53|   444k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   54|   444k|        let id = id.into();
   55|   444k|        if let Some(numerical_id) = to_integer_id(&id) {
   56|   441k|            Self::new_from_unique_id(numerical_id)
   57|       |        } else {
   58|  2.80k|            Self(BlankNodeContent::Named(id))
   59|       |        }
   60|   444k|    }
_RNCNvMs7_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  267|  63.3M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
_RNvMNtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idB4_:
   66|  95.2k|    pub fn new_from_unique_id(id: u128) -> Self {
   67|  95.2k|        Self(BlankNodeContent::Anonymous {
   68|  95.2k|            id,
   69|  95.2k|            str: IdStr::new(id),
   70|  95.2k|        })
   71|  95.2k|    }
_RNvMs7_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_5IdStr3newB7_:
  259|  95.2k|    fn new(id: u128) -> Self {
  260|  95.2k|        let mut str = [0; 32];
  261|  95.2k|        write!(&mut str[..], "{id:x}").unwrap();
  262|  95.2k|        Self(str)
  263|  95.2k|    }
_RNvMs7_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_5IdStr6as_strB7_:
  266|  95.2k|    fn as_str(&self) -> &str {
  267|  95.2k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  268|  95.2k|        str::from_utf8(&self.0[..len]).unwrap()
  269|  95.2k|    }
_RNvMs1_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_12BlankNodeRef13new_uncheckedB7_:
  170|  11.5k|    pub fn new_unchecked(id: &'a str) -> Self {
  171|  11.5k|        if let Some(numerical_id) = to_integer_id(id) {
  172|  11.5k|            Self(BlankNodeRefContent::Anonymous {
  173|  11.5k|                id: numerical_id,
  174|  11.5k|                str: id,
  175|  11.5k|            })
  176|       |        } else {
  177|      0|            Self(BlankNodeRefContent::Named(id))
  178|       |        }
  179|  11.5k|    }
_RNvMs1_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strB7_:
  183|  38.1k|    pub const fn as_str(self) -> &'a str {
  184|  38.1k|        match self.0 {
  185|    572|            BlankNodeRefContent::Named(id) => id,
  186|  37.5k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  187|       |        }
  188|  38.1k|    }
_RNvMs1_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_12BlankNodeRef9unique_idB7_:
  200|   129k|    pub const fn unique_id(&self) -> Option<u128> {
  201|   129k|        match self.0 {
  202|    572|            BlankNodeRefContent::Named(_) => None,
  203|   129k|            BlankNodeRefContent::Anonymous { id, .. } => Some(id),
  204|       |        }
  205|   129k|    }
_RNvNtCsbrE1BkJ52QU_5oxrdf10blank_node13to_integer_idB3_:
  332|  11.5k|fn to_integer_id(id: &str) -> Option<u128> {
  333|  11.5k|    let digits = id.as_bytes();
  334|  11.5k|    let mut value: u128 = 0;
  335|  11.5k|    if let None | Some(b'0') = digits.first() {
  336|      0|        return None; // No empty string or leading zeros
  337|  11.5k|    }
  338|   195k|    for digit in digits {
  339|   183k|        value = value.checked_mul(16)?.checked_add(
  340|   183k|            match *digit {
  341|   183k|                b'0'..=b'9' => digit - b'0',
  342|  69.2k|                b'a'..=b'f' => digit - b'a' + 10,
  343|      0|                _ => return None,
  344|       |            }
  345|   183k|            .into(),
  346|      0|        )?;
  347|       |    }
  348|  11.5k|    Some(value)
  349|  11.5k|}
_RNvMNtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB2_9BlankNode6as_refB4_:
   92|  95.2k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   93|  95.2k|        BlankNodeRef(match &self.0 {
   94|      0|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   95|  95.2k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   96|  95.2k|                id: *id,
   97|  95.2k|                str: str.as_str(),
   98|  95.2k|            },
   99|       |        })
  100|  95.2k|    }

_RINvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB3_7Dataset6insertRNtNtB5_6triple4QuadECs8B1jHDnA03z_4trig:
  360|  84.4k|    pub fn insert<'a>(&mut self, quad: impl Into<QuadRef<'a>>) -> bool {
  361|  84.4k|        let quad = self.encode_quad(quad.into());
  362|  84.4k|        self.insert_encoded(quad)
  363|  84.4k|    }
_RINvXs5_NtCsbrE1BkJ52QU_5oxrdf7datasetNtB6_7DatasetINtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect6ExtendRNtNtB8_6triple4QuadE6extendINtNtNtBW_5slice4iter4IterB1H_EECs8B1jHDnA03z_4trig:
  960|  8.12k|    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  961|  92.5k|        for t in iter {
  962|  84.4k|            self.insert(t);
  963|  84.4k|        }
  964|  8.12k|    }
_RINvXs3_NtCsbrE1BkJ52QU_5oxrdf7datasetNtB6_7DatasetINtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect12FromIteratorRNtNtB8_6triple4QuadE9from_iterINtNtNtBW_5slice4iter4IterB1O_EECs8B1jHDnA03z_4trig:
  944|  8.12k|    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self {
  945|  8.12k|        let mut g = Self::new();
  946|  8.12k|        g.extend(iter);
  947|  8.12k|        g
  948|  8.12k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset15hash_graph_name:
  745|   300k|    fn hash_graph_name(
  746|   300k|        &self,
  747|   300k|        graph_name: &InternedGraphName,
  748|   300k|        current_blank_node: InternedBlankNode,
  749|   300k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  750|   300k|    ) -> u64 {
  751|   300k|        match graph_name {
  752|  6.51k|            InternedGraphName::NamedNode(node) => {
  753|  6.51k|                Self::hash_tuple(node.decode_from(&self.interner))
  754|       |            }
  755|    760|            InternedGraphName::BlankNode(bnode) => {
  756|    760|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  757|       |            }
  758|   293k|            InternedGraphName::DefaultGraph => 0,
  759|       |        }
  760|   300k|    }
_RNvXsg_NtCsbrE1BkJ52QU_5oxrdf7datasetNtB5_4IterNtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4next:
 1530|  23.7k|    fn next(&mut self) -> Option<QuadRef<'a>> {
 1531|  23.7k|        self.inner
 1532|  23.7k|            .next()
 1533|  23.7k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))
 1534|  23.7k|    }
_RNvXs1_NtCsbrE1BkJ52QU_5oxrdf7datasetRNtB5_7DatasetNtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect12IntoIterator9into_iter:
  930|  4.06k|    fn into_iter(self) -> Iter<'a> {
  931|  4.06k|        self.iter()
  932|  4.06k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset5clear:
  411|  8.12k|    pub fn clear(&mut self) {
  412|  8.12k|        self.gspo.clear();
  413|  8.12k|        self.gpos.clear();
  414|  8.12k|        self.gosp.clear();
  415|  8.12k|        self.spog.clear();
  416|  8.12k|        self.posg.clear();
  417|  8.12k|        self.ospg.clear();
  418|  8.12k|    }
_RNvXsj_NtCsbrE1BkJ52QU_5oxrdf7datasetNtB5_7DatasetNtNtCsl2lhD68vXAd_4core7default7Default7defaultB7_:
   66|  8.12k|#[derive(Debug, Default, Clone)]
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset12canonicalize:
  541|  8.12k|    pub fn canonicalize(&mut self) {
  542|  8.12k|        let bnodes = self.blank_nodes();
  543|  8.12k|        let quads_per_blank_node = self.quads_per_blank_nodes();
  544|  8.12k|        let (hash, partition) = self.hash_bnodes(
  545|  8.12k|            bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
  546|  8.12k|            &quads_per_blank_node,
  547|  8.12k|        );
  548|  8.12k|        let new_quads = self.distinguish(&hash, &partition, &quads_per_blank_node);
  549|  8.12k|        self.clear();
  550|  47.5k|        for quad in new_quads {
  551|  39.4k|            self.insert_encoded(quad);
  552|  39.4k|        }
  553|  8.12k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset11hash_bnodes:
  642|  41.2k|    fn hash_bnodes(
  643|  41.2k|        &self,
  644|  41.2k|        mut hashes: HashMap<InternedBlankNode, u64>,
  645|  41.2k|        quads_per_blank_node: &QuadsPerBlankNode,
  646|  41.2k|    ) -> (
  647|  41.2k|        HashMap<InternedBlankNode, u64>,
  648|  41.2k|        Vec<(u64, Vec<InternedBlankNode>)>,
  649|  41.2k|    ) {
  650|  41.2k|        let mut to_hash = Vec::new();
  651|  41.2k|        let mut to_do = hashes
  652|  41.2k|            .keys()
  653|  41.2k|            .map(|bnode| (*bnode, true))
  654|  41.2k|            .collect::<HashMap<_, _>>();
  655|  41.2k|        let mut partition = HashMap::<_, Vec<_>>::with_capacity(hashes.len());
  656|  41.2k|        let mut old_partition_count = usize::MAX;
  657|   123k|        while old_partition_count != partition.len() {
  658|  82.5k|            old_partition_count = partition.len();
  659|  82.5k|            partition.clear();
  660|  82.5k|            let mut new_hashes = hashes.clone();
  661|   291k|            for bnode in hashes.keys() {
  662|   291k|                let hash = if to_do.contains_key(bnode) {
  663|   300k|                    for (s, p, o, g) in &quads_per_blank_node[bnode] {
  664|   300k|                        to_hash.push((
  665|   300k|                            self.hash_subject(s, *bnode, &hashes),
  666|   300k|                            self.hash_named_node(*p),
  667|   300k|                            self.hash_term(o, *bnode, &hashes),
  668|   300k|                            self.hash_graph_name(g, *bnode, &hashes),
  669|   300k|                        ));
  670|   300k|                    }
  671|   291k|                    to_hash.sort_unstable();
  672|   291k|                    let hash = Self::hash_tuple((&to_hash, hashes[bnode]));
  673|   291k|                    to_hash.clear();
  674|   291k|                    if hash == hashes[bnode] {
  675|      0|                        to_do.insert(*bnode, false);
  676|   291k|                    } else {
  677|   291k|                        new_hashes.insert(*bnode, hash);
  678|   291k|                    }
  679|   291k|                    hash
  680|       |                } else {
  681|      0|                    hashes[bnode]
  682|       |                };
  683|   291k|                partition.entry(hash).or_default().push(*bnode);
  684|       |            }
  685|  82.5k|            hashes = new_hashes;
  686|       |        }
  687|  41.2k|        let mut partition: Vec<_> = partition.into_iter().collect();
  688|  41.2k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));
  689|  41.2k|        (hashes, partition)
  690|  41.2k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset9hash_term:
  726|   300k|    fn hash_term(
  727|   300k|        &self,
  728|   300k|        term: &InternedTerm,
  729|   300k|        current_blank_node: InternedBlankNode,
  730|   300k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  731|   300k|    ) -> u64 {
  732|   300k|        match term {
  733|  9.21k|            InternedTerm::NamedNode(node) => Self::hash_tuple(node.decode_from(&self.interner)),
  734|  27.5k|            InternedTerm::BlankNode(bnode) => {
  735|  27.5k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  736|       |            }
  737|   264k|            InternedTerm::Literal(literal) => Self::hash_tuple(literal.decode_from(&self.interner)),
  738|       |            #[cfg(feature = "rdf-star")]
  739|      0|            InternedTerm::Triple(triple) => {
  740|      0|                self.hash_triple(triple, current_blank_node, bnodes_hash)
  741|       |            }
  742|       |        }
  743|   300k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset9gen_bnode:
  902|  95.2k|    fn gen_bnode(
  903|  95.2k|        old_bnode: InternedBlankNode,
  904|  95.2k|        hashes: &HashMap<InternedBlankNode, u64>,
  905|  95.2k|    ) -> BlankNode {
  906|  95.2k|        BlankNode::new_from_unique_id(hashes[&old_bnode].into())
  907|  95.2k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset11decode_spog:
  479|  19.7k|    fn decode_spog(
  480|  19.7k|        &self,
  481|  19.7k|        quad: (
  482|  19.7k|            &InternedSubject,
  483|  19.7k|            &InternedNamedNode,
  484|  19.7k|            &InternedTerm,
  485|  19.7k|            &InternedGraphName,
  486|  19.7k|        ),
  487|  19.7k|    ) -> QuadRef<'_> {
  488|  19.7k|        QuadRef {
  489|  19.7k|            subject: quad.0.decode_from(&self.interner),
  490|  19.7k|            predicate: quad.1.decode_from(&self.interner),
  491|  19.7k|            object: quad.2.decode_from(&self.interner),
  492|  19.7k|            graph_name: quad.3.decode_from(&self.interner),
  493|  19.7k|        }
  494|  19.7k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset21quads_per_blank_nodes:
  593|  8.12k|    fn quads_per_blank_nodes(&self) -> QuadsPerBlankNode {
  594|  8.12k|        let mut map: HashMap<_, Vec<_>> = HashMap::new();
  595|  47.5k|        for quad in &self.spog {
  596|  39.4k|            if let InternedSubject::BlankNode(bnode) = &quad.0 {
  597|  17.7k|                map.entry(*bnode).or_default().push(quad.clone());
  598|  21.7k|            }
  599|       |            #[cfg(feature = "rdf-star")]
  600|  39.4k|            if let InternedSubject::Triple(t) = &quad.0 {
  601|      0|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  602|  39.4k|            }
  603|  39.4k|            if let InternedTerm::BlankNode(bnode) = &quad.2 {
  604|  5.17k|                map.entry(*bnode).or_default().push(quad.clone());
  605|  34.2k|            }
  606|       |            #[cfg(feature = "rdf-star")]
  607|  39.4k|            if let InternedTerm::Triple(t) = &quad.2 {
  608|      0|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  609|  39.4k|            }
  610|  39.4k|            if let InternedGraphName::BlankNode(bnode) = &quad.3 {
  611|    128|                map.entry(*bnode).or_default().push(quad.clone());
  612|  39.3k|            }
  613|       |        }
  614|  8.12k|        map
  615|  8.12k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset15hash_blank_node:
  696|   323k|    fn hash_blank_node(
  697|   323k|        node: InternedBlankNode,
  698|   323k|        current_blank_node: InternedBlankNode,
  699|   323k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  700|   323k|    ) -> u64 {
  701|   323k|        if node == current_blank_node {
  702|   301k|            u64::MAX
  703|       |        } else {
  704|  22.1k|            bnodes_hash[&node]
  705|       |        }
  706|   323k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset12hash_subject:
  708|   300k|    fn hash_subject(
  709|   300k|        &self,
  710|   300k|        node: &InternedSubject,
  711|   300k|        current_blank_node: InternedBlankNode,
  712|   300k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  713|   300k|    ) -> u64 {
  714|   300k|        match node {
  715|  6.03k|            InternedSubject::NamedNode(node) => Self::hash_tuple(node.decode_from(&self.interner)),
  716|   294k|            InternedSubject::BlankNode(bnode) => {
  717|   294k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  718|       |            }
  719|       |            #[cfg(feature = "rdf-star")]
  720|      0|            InternedSubject::Triple(triple) => {
  721|      0|                self.hash_triple(triple, current_blank_node, bnodes_hash)
  722|       |            }
  723|       |        }
  724|   300k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset3len:
  350|  8.12k|    pub fn len(&self) -> usize {
  351|  8.12k|        self.gspo.len()
  352|  8.12k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset9map_bnode:
  891|  95.2k|    fn map_bnode(
  892|  95.2k|        &mut self,
  893|  95.2k|        old_bnode: InternedBlankNode,
  894|  95.2k|        hashes: &HashMap<InternedBlankNode, u64>,
  895|  95.2k|    ) -> InternedBlankNode {
  896|  95.2k|        InternedBlankNode::encoded_into(
  897|  95.2k|            Self::gen_bnode(old_bnode, hashes).as_ref(),
  898|  95.2k|            &mut self.interner,
  899|  95.2k|        )
  900|  95.2k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset15hash_named_node:
  692|   300k|    fn hash_named_node(&self, node: InternedNamedNode) -> u64 {
  693|   300k|        Self::hash_tuple(node.decode_from(&self.interner))
  694|   300k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset14insert_encoded:
  365|   123k|    fn insert_encoded(
  366|   123k|        &mut self,
  367|   123k|        quad: (
  368|   123k|            InternedSubject,
  369|   123k|            InternedNamedNode,
  370|   123k|            InternedTerm,
  371|   123k|            InternedGraphName,
  372|   123k|        ),
  373|   123k|    ) -> bool {
  374|   123k|        let (s, p, o, g) = quad;
  375|   123k|        self.gspo.insert((g.clone(), s.clone(), p, o.clone()));
  376|   123k|        self.gpos.insert((g.clone(), p, o.clone(), s.clone()));
  377|   123k|        self.gosp.insert((g.clone(), o.clone(), s.clone(), p));
  378|   123k|        self.spog.insert((s.clone(), p, o.clone(), g.clone()));
  379|   123k|        self.posg.insert((p, o.clone(), s.clone(), g.clone()));
  380|   123k|        self.ospg.insert((o, s, p, g))
  381|   123k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset3new:
  109|  8.12k|    pub fn new() -> Self {
  110|  8.12k|        Self::default()
  111|  8.12k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset11distinguish:
  782|  41.2k|    fn distinguish(
  783|  41.2k|        &mut self,
  784|  41.2k|        hash: &HashMap<InternedBlankNode, u64>,
  785|  41.2k|        partition: &[(u64, Vec<InternedBlankNode>)],
  786|  41.2k|        quads_per_blank_node: &QuadsPerBlankNode,
  787|  41.2k|    ) -> Vec<(
  788|  41.2k|        InternedSubject,
  789|  41.2k|        InternedNamedNode,
  790|  41.2k|        InternedTerm,
  791|  41.2k|        InternedGraphName,
  792|  41.2k|    )> {
  793|  41.2k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
  794|  41.2k|        if let Some(b_prime) = b_prime {
  795|  14.3k|            b_prime
  796|  14.3k|                .iter()
  797|  14.3k|                .map(|b| {
  798|       |                    let mut hash_prime = hash.clone();
  799|       |                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  800|       |                    let (hash_prime_prime, partition_prime) =
  801|       |                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  802|       |                    self.distinguish(&hash_prime_prime, &partition_prime, quads_per_blank_node)
  803|  14.3k|                })
  804|  14.3k|                .reduce(min)
  805|  14.3k|                .unwrap_or_default()
  806|       |        } else {
  807|  26.8k|            self.label(hash)
  808|       |        }
  809|  41.2k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset4iter:
  169|  4.06k|    pub fn iter(&self) -> Iter<'_> {
  170|  4.06k|        let iter = self.spog.iter();
  171|  4.06k|        Iter {
  172|  4.06k|            dataset: self,
  173|  4.06k|            inner: iter,
  174|  4.06k|        }
  175|  4.06k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset11blank_nodes:
  555|  8.12k|    fn blank_nodes(&self) -> HashSet<InternedBlankNode> {
  556|  8.12k|        let mut bnodes = HashSet::new();
  557|  47.5k|        for (g, s, _, o) in &self.gspo {
  558|  39.4k|            if let InternedSubject::BlankNode(bnode) = s {
  559|  17.7k|                bnodes.insert(*bnode);
  560|  21.7k|            }
  561|       |            #[cfg(feature = "rdf-star")]
  562|  39.4k|            if let InternedSubject::Triple(triple) = s {
  563|      0|                Self::triple_blank_nodes(triple, &mut bnodes);
  564|  39.4k|            }
  565|  39.4k|            if let InternedTerm::BlankNode(bnode) = o {
  566|  5.17k|                bnodes.insert(*bnode);
  567|  34.2k|            }
  568|       |            #[cfg(feature = "rdf-star")]
  569|  39.4k|            if let InternedTerm::Triple(triple) = o {
  570|      0|                Self::triple_blank_nodes(triple, &mut bnodes);
  571|  39.4k|            }
  572|  39.4k|            if let InternedGraphName::BlankNode(bnode) = g {
  573|    128|                bnodes.insert(*bnode);
  574|  39.3k|            }
  575|       |        }
  576|  8.12k|        bnodes
  577|  8.12k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset5label:
  812|  26.8k|    fn label(
  813|  26.8k|        &mut self,
  814|  26.8k|        hashes: &HashMap<InternedBlankNode, u64>,
  815|  26.8k|    ) -> Vec<(
  816|  26.8k|        InternedSubject,
  817|  26.8k|        InternedNamedNode,
  818|  26.8k|        InternedTerm,
  819|  26.8k|        InternedGraphName,
  820|  26.8k|    )> {
  821|  26.8k|        let old_quads: Vec<_> = self.spog.iter().cloned().collect();
  822|  26.8k|        let mut quads: Vec<_> = old_quads
  823|  26.8k|            .into_iter()
  824|  26.8k|            .map(|(s, p, o, g)| {
  825|       |                (
  826|       |                    match s {
  827|       |                        InternedSubject::NamedNode(_) => s,
  828|       |                        InternedSubject::BlankNode(bnode) => {
  829|       |                            InternedSubject::BlankNode(self.map_bnode(bnode, hashes))
  830|       |                        }
  831|       |                        #[cfg(feature = "rdf-star")]
  832|       |                        InternedSubject::Triple(triple) => {
  833|       |                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  834|       |                                self.label_triple(&triple, hashes).as_ref(),
  835|       |                                &mut self.interner,
  836|       |                            )))
  837|       |                        }
  838|       |                    },
  839|       |                    p,
  840|       |                    match o {
  841|       |                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  842|       |                        InternedTerm::BlankNode(bnode) => {
  843|       |                            InternedTerm::BlankNode(self.map_bnode(bnode, hashes))
  844|       |                        }
  845|       |                        #[cfg(feature = "rdf-star")]
  846|       |                        InternedTerm::Triple(triple) => {
  847|       |                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  848|       |                                self.label_triple(&triple, hashes).as_ref(),
  849|       |                                &mut self.interner,
  850|       |                            )))
  851|       |                        }
  852|       |                    },
  853|       |                    match g {
  854|       |                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  855|       |                        InternedGraphName::BlankNode(bnode) => {
  856|       |                            InternedGraphName::BlankNode(self.map_bnode(bnode, hashes))
  857|       |                        }
  858|       |                    },
  859|       |                )
  860|  26.8k|            })
  861|  26.8k|            .collect();
  862|  26.8k|        quads.sort_unstable();
  863|  26.8k|        quads
  864|  26.8k|    }
_RNvXs_NtCsbrE1BkJ52QU_5oxrdf7datasetNtB4_7DatasetNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eq:
  911|  4.06k|    fn eq(&self, other: &Self) -> bool {
  912|  4.06k|        if self.len() != other.len() {
  913|      0|            return false;
  914|  4.06k|        }
  915|  23.7k|        for q in self {
  916|  19.7k|            if !other.contains(q) {
  917|      0|                return false;
  918|  19.7k|            }
  919|       |        }
  920|  4.06k|        true
  921|  4.06k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset11encode_quad:
  420|  84.4k|    fn encode_quad(
  421|  84.4k|        &mut self,
  422|  84.4k|        quad: QuadRef<'_>,
  423|  84.4k|    ) -> (
  424|  84.4k|        InternedSubject,
  425|  84.4k|        InternedNamedNode,
  426|  84.4k|        InternedTerm,
  427|  84.4k|        InternedGraphName,
  428|  84.4k|    ) {
  429|  84.4k|        (
  430|  84.4k|            InternedSubject::encoded_into(quad.subject, &mut self.interner),
  431|  84.4k|            InternedNamedNode::encoded_into(quad.predicate, &mut self.interner),
  432|  84.4k|            InternedTerm::encoded_into(quad.object, &mut self.interner),
  433|  84.4k|            InternedGraphName::encoded_into(quad.graph_name, &mut self.interner),
  434|  84.4k|        )
  435|  84.4k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset12encoded_quad:
  437|  19.7k|    fn encoded_quad(
  438|  19.7k|        &self,
  439|  19.7k|        quad: QuadRef<'_>,
  440|  19.7k|    ) -> Option<(
  441|  19.7k|        InternedSubject,
  442|  19.7k|        InternedNamedNode,
  443|  19.7k|        InternedTerm,
  444|  19.7k|        InternedGraphName,
  445|  19.7k|    )> {
  446|  19.7k|        Some((
  447|  19.7k|            self.encoded_subject(quad.subject)?,
  448|  19.7k|            self.encoded_named_node(quad.predicate)?,
  449|  19.7k|            self.encoded_term(quad.object)?,
  450|  19.7k|            self.encoded_graph_name(quad.graph_name)?,
  451|       |        ))
  452|  19.7k|    }
_RNCNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB4_7Dataset11distinguishs_0B6_:
  793|   126k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
_RNCNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB4_7Dataset11hash_bnodess_0B6_:
  688|   127k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));
_RINvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB3_7Dataset10hash_tupleNtNtB5_10named_node12NamedNodeRefEB5_:
  776|   322k|    fn hash_tuple(v: impl Hash) -> u64 {
  777|   322k|        let mut hasher = DefaultHasher::new();
  778|   322k|        v.hash(&mut hasher);
  779|   322k|        hasher.finish()
  780|   322k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB3_7Dataset8containsNtNtB5_6triple7QuadRefEB5_:
  341|  19.7k|    pub fn contains<'a>(&self, quad: impl Into<QuadRef<'a>>) -> bool {
  342|  19.7k|        if let Some(q) = self.encoded_quad(quad.into()) {
  343|  19.7k|            self.spog.contains(&q)
  344|       |        } else {
  345|      0|            false
  346|       |        }
  347|  19.7k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB3_7Dataset10hash_tupleNtNtB5_7literal10LiteralRefEB5_:
  776|   264k|    fn hash_tuple(v: impl Hash) -> u64 {
  777|   264k|        let mut hasher = DefaultHasher::new();
  778|   264k|        v.hash(&mut hasher);
  779|   264k|        hasher.finish()
  780|   264k|    }
_RNCNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB4_7Dataset11distinguish0B6_:
  793|   126k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
_RNCNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB4_7Dataset11distinguishs0_0B6_:
  797|  33.1k|                .map(|b| {
  798|  33.1k|                    let mut hash_prime = hash.clone();
  799|  33.1k|                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  800|  33.1k|                    let (hash_prime_prime, partition_prime) =
  801|  33.1k|                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  802|  33.1k|                    self.distinguish(&hash_prime_prime, &partition_prime, quads_per_blank_node)
  803|  33.1k|                })
_RINvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB3_7Dataset15encoded_subjectNtNtB5_6triple10SubjectRefEB5_:
  461|  19.7k|    pub(super) fn encoded_subject<'a>(
  462|  19.7k|        &self,
  463|  19.7k|        node: impl Into<SubjectRef<'a>>,
  464|  19.7k|    ) -> Option<InternedSubject> {
  465|  19.7k|        InternedSubject::encoded_from(node.into(), &self.interner)
  466|  19.7k|    }
_RNCNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB4_7Dataset5label0B6_:
  824|   241k|            .map(|(s, p, o, g)| {
  825|   241k|                (
  826|   241k|                    match s {
  827|   153k|                        InternedSubject::NamedNode(_) => s,
  828|  88.2k|                        InternedSubject::BlankNode(bnode) => {
  829|  88.2k|                            InternedSubject::BlankNode(self.map_bnode(bnode, hashes))
  830|       |                        }
  831|       |                        #[cfg(feature = "rdf-star")]
  832|      0|                        InternedSubject::Triple(triple) => {
  833|      0|                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  834|      0|                                self.label_triple(&triple, hashes).as_ref(),
  835|      0|                                &mut self.interner,
  836|      0|                            )))
  837|       |                        }
  838|       |                    },
  839|   241k|                    p,
  840|   241k|                    match o {
  841|   234k|                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  842|  6.87k|                        InternedTerm::BlankNode(bnode) => {
  843|  6.87k|                            InternedTerm::BlankNode(self.map_bnode(bnode, hashes))
  844|       |                        }
  845|       |                        #[cfg(feature = "rdf-star")]
  846|      0|                        InternedTerm::Triple(triple) => {
  847|      0|                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  848|      0|                                self.label_triple(&triple, hashes).as_ref(),
  849|      0|                                &mut self.interner,
  850|      0|                            )))
  851|       |                        }
  852|       |                    },
  853|   241k|                    match g {
  854|   241k|                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  855|    128|                        InternedGraphName::BlankNode(bnode) => {
  856|    128|                            InternedGraphName::BlankNode(self.map_bnode(bnode, hashes))
  857|       |                        }
  858|       |                    },
  859|       |                )
  860|   241k|            })
_RINvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB3_7Dataset10hash_tupleTRINtNtCsdBW21Yiwikk_5alloc3vec3VecTyyyyEEyEEB5_:
  776|   291k|    fn hash_tuple(v: impl Hash) -> u64 {
  777|   291k|        let mut hasher = DefaultHasher::new();
  778|   291k|        v.hash(&mut hasher);
  779|   291k|        hasher.finish()
  780|   291k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB3_7Dataset18encoded_named_nodeNtNtB5_10named_node12NamedNodeRefEB5_:
  454|  19.7k|    pub(super) fn encoded_named_node<'a>(
  455|  19.7k|        &self,
  456|  19.7k|        node: impl Into<NamedNodeRef<'a>>,
  457|  19.7k|    ) -> Option<InternedNamedNode> {
  458|  19.7k|        InternedNamedNode::encoded_from(node.into(), &self.interner)
  459|  19.7k|    }
_RNCNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB4_7Dataset12canonicalize0B6_:
  545|  19.0k|            bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
_RNCNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB4_7Dataset11hash_bnodes0B6_:
  653|   145k|            .map(|bnode| (*bnode, true))
_RINvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB3_7Dataset12encoded_termNtNtB5_6triple7TermRefEB5_:
  468|  19.7k|    pub(super) fn encoded_term<'a>(&self, term: impl Into<TermRef<'a>>) -> Option<InternedTerm> {
  469|  19.7k|        InternedTerm::encoded_from(term.into(), &self.interner)
  470|  19.7k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB3_7Dataset10hash_tupleTylEEB5_:
  776|  33.1k|    fn hash_tuple(v: impl Hash) -> u64 {
  777|  33.1k|        let mut hasher = DefaultHasher::new();
  778|  33.1k|        v.hash(&mut hasher);
  779|  33.1k|        hasher.finish()
  780|  33.1k|    }
_RNCNvXsg_NtCsbrE1BkJ52QU_5oxrdf7datasetNtB7_4IterNtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4next0B9_:
 1533|  19.7k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))
_RINvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB3_7Dataset18encoded_graph_nameNtNtB5_6triple12GraphNameRefEB5_:
  472|  19.7k|    pub(super) fn encoded_graph_name<'a>(
  473|  19.7k|        &self,
  474|  19.7k|        graph_name: impl Into<GraphNameRef<'a>>,
  475|  19.7k|    ) -> Option<InternedGraphName> {
  476|  19.7k|        InternedGraphName::encoded_from(graph_name.into(), &self.interner)
  477|  19.7k|    }

_RINvXsl_NtCsbrE1BkJ52QU_5oxrdf9interningNtB6_3KeyNtNtCsl2lhD68vXAd_4core4hash4Hash4hashNtNtNtCs7HEjVFsiW5Z_3std4hash6random13DefaultHasherEB8_:
   69|  12.2k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNCNvMs1_NtCsbrE1BkJ52QU_5oxrdf9interningNtB7_17InternedBlankNode12encoded_into0B9_:
  135|  37.5k|                .or_insert_with(|| blank_node.as_str().into());
_RINvXsF_NtCsbrE1BkJ52QU_5oxrdf9interningNtB6_17InternedBlankNodeNtNtCsl2lhD68vXAd_4core4hash4Hash4hashNtNtNtCs7HEjVFsiW5Z_3std4hash6random13DefaultHasherEB8_:
  123|  1.86M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMNtCsbrE1BkJ52QU_5oxrdf9interningNtB2_8Interner3get:
   39|  63.2k|    fn get(&self, value: &str) -> Option<Key> {
   40|  63.2k|        let mut hash = self.hash(value);
   41|       |        loop {
   42|  63.2k|            let v = self.string_for_hash.get(&hash)?;
   43|  63.2k|            if v == value {
   44|  63.2k|                return Some(Key(hash));
   45|      0|            } else if hash == u64::MAX - 1 {
   46|      0|                hash = 0;
   47|      0|            } else {
   48|      0|                hash += 1;
   49|      0|            }
   50|       |        }
   51|  63.2k|    }
_RNvMs1_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedBlankNode11decode_from:
  157|  11.5k|    pub fn decode_from(self, interner: &Interner) -> BlankNodeRef<'_> {
  158|  11.5k|        BlankNodeRef::new_unchecked(match self {
  159|  11.5k|            Self::Number { id } => &interner.string_for_blank_node_id[&id],
  160|      0|            Self::Other { id } => interner.resolve(id),
  161|       |        })
  162|  11.5k|    }
_RNvMs5_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_12InternedTerm12encoded_from:
  419|  19.7k|    pub fn encoded_from(term: TermRef<'_>, interner: &Interner) -> Option<Self> {
  420|  19.7k|        Some(match term {
  421|  1.53k|            TermRef::NamedNode(term) => {
  422|  1.53k|                Self::NamedNode(InternedNamedNode::encoded_from(term, interner)?)
  423|       |            }
  424|  2.58k|            TermRef::BlankNode(term) => {
  425|  2.58k|                Self::BlankNode(InternedBlankNode::encoded_from(term, interner)?)
  426|       |            }
  427|  15.6k|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_from(term, interner)?),
  428|       |            #[cfg(feature = "rdf-star")]
  429|      0|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  430|      0|                triple.as_ref(),
  431|      0|                interner,
  432|      0|            )?)),
  433|       |        })
  434|  19.7k|    }
_RNvXs7_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_21IdentityHasherBuilderNtNtCsl2lhD68vXAd_4core4hash11BuildHasher12build_hasher:
  513|  1.31M|    fn build_hasher(&self) -> IdentityHasher {
  514|  1.31M|        IdentityHasher::default()
  515|  1.31M|    }
_RNvXsz_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedBlankNodeNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqB7_:
  123|  1.97M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedGraphName11decode_from:
  367|  19.7k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> GraphNameRef<'a> {
  368|  19.7k|        match self {
  369|  19.2k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  370|    430|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.decode_from(interner)),
  371|     64|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.decode_from(interner)),
  372|       |        }
  373|  19.7k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf9interningNtB2_8Interner13get_or_intern:
   18|   302k|    fn get_or_intern(&mut self, value: &str) -> Key {
   19|   302k|        let mut hash = self.hash(value);
   20|   302k|        loop {
   21|   302k|            match self.string_for_hash.entry(hash) {
   22|  51.8k|                Entry::Vacant(e) => {
   23|  51.8k|                    e.insert(value.into());
   24|  51.8k|                    return Key(hash);
   25|       |                }
   26|   251k|                Entry::Occupied(e) => loop {
   27|   251k|                    if e.get() == value {
   28|   251k|                        return Key(hash);
   29|      0|                    } else if hash == u64::MAX - 1 {
   30|      0|                        hash = 0;
   31|      0|                    } else {
   32|      0|                        hash += 1;
   33|      0|                    }
   34|       |                },
   35|       |            }
   36|       |        }
   37|   302k|    }
_RNvMs1_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedBlankNode12encoded_from:
  144|  11.5k|    pub fn encoded_from(blank_node: BlankNodeRef<'_>, interner: &Interner) -> Option<Self> {
  145|  11.5k|        if let Some(id) = blank_node.unique_id() {
  146|  11.5k|            interner
  147|  11.5k|                .string_for_blank_node_id
  148|  11.5k|                .contains_key(&id)
  149|  11.5k|                .then_some(Self::Number { id })
  150|       |        } else {
  151|       |            Some(Self::Other {
  152|      0|                id: interner.get(blank_node.as_str())?,
  153|       |            })
  154|       |        }
  155|  11.5k|    }
_RNvMs2_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedLiteral11decode_from:
  228|   279k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> LiteralRef<'a> {
  229|   279k|        match self {
  230|  7.03k|            Self::String { value_id } => {
  231|  7.03k|                LiteralRef::new_simple_literal(interner.resolve(*value_id))
  232|       |            }
  233|       |            Self::LanguageTaggedString {
  234|  15.6k|                value_id,
  235|  15.6k|                language_id,
  236|  15.6k|            } => LiteralRef::new_language_tagged_literal_unchecked(
  237|  15.6k|                interner.resolve(*value_id),
  238|  15.6k|                interner.resolve(*language_id),
  239|  15.6k|            ),
  240|   256k|            Self::TypedLiteral { value_id, datatype } => LiteralRef::new_typed_literal(
  241|   256k|                interner.resolve(*value_id),
  242|   256k|                datatype.decode_from(interner),
  243|   256k|            ),
  244|       |        }
  245|   279k|    }
_RNvMs5_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_12InternedTerm12encoded_into:
  402|  84.4k|    pub fn encoded_into(term: TermRef<'_>, interner: &mut Interner) -> Self {
  403|  84.4k|        match term {
  404|  7.36k|            TermRef::NamedNode(term) => {
  405|  7.36k|                Self::NamedNode(InternedNamedNode::encoded_into(term, interner))
  406|       |            }
  407|  5.17k|            TermRef::BlankNode(term) => {
  408|  5.17k|                Self::BlankNode(InternedBlankNode::encoded_into(term, interner))
  409|       |            }
  410|  71.9k|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_into(term, interner)),
  411|       |            #[cfg(feature = "rdf-star")]
  412|      0|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  413|      0|                triple.as_ref(),
  414|      0|                interner,
  415|      0|            ))),
  416|       |        }
  417|  84.4k|    }
_RNvXsU_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedSubjectNtNtCsl2lhD68vXAd_4core3cmp3Ord3cmpB7_:
  267|  1.48M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsr_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedNamedNodeNtNtCsl2lhD68vXAd_4core3cmp10PartialOrd11partial_cmpB7_:
   86|   440k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsL_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedLiteralNtNtCsl2lhD68vXAd_4core3cmp10PartialOrd11partial_cmpB7_:
  174|   102k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsX_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedSubjectNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneB7_:
  267|   884k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsh_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_3KeyNtNtCsl2lhD68vXAd_4core3cmp10PartialOrd11partial_cmpB7_:
   69|   543k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedGraphName12encoded_from:
  355|  19.7k|    pub fn encoded_from(node: GraphNameRef<'_>, interner: &Interner) -> Option<Self> {
  356|  19.7k|        Some(match node {
  357|  19.2k|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  358|    430|            GraphNameRef::NamedNode(node) => {
  359|    430|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  360|       |            }
  361|     64|            GraphNameRef::BlankNode(node) => {
  362|     64|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  363|       |            }
  364|       |        })
  365|  19.7k|    }
_RNvXs1c_NtCsbrE1BkJ52QU_5oxrdf9interningNtB6_12InternedTermNtNtCsl2lhD68vXAd_4core3cmp3Ord3cmpB8_:
  392|  1.89M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsq_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedNamedNodeNtNtCsl2lhD68vXAd_4core3cmp3Ord3cmpB7_:
   86|  3.53M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXs1f_NtCsbrE1BkJ52QU_5oxrdf9interningNtB6_12InternedTermNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneB8_:
  392|   884k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMs3_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedSubject11decode_from:
  308|  19.7k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> SubjectRef<'a> {
  309|  19.7k|        match self {
  310|  10.8k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.decode_from(interner)),
  311|  8.87k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.decode_from(interner)),
  312|       |            #[cfg(feature = "rdf-star")]
  313|      0|            Self::Triple(triple) => SubjectRef::Triple(&interner.triples[triple.as_ref()]),
  314|       |        }
  315|  19.7k|    }
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedGraphName12encoded_into:
  343|  84.4k|    pub fn encoded_into(node: GraphNameRef<'_>, interner: &mut Interner) -> Self {
  344|  84.4k|        match node {
  345|  83.3k|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  346|  1.02k|            GraphNameRef::NamedNode(node) => {
  347|  1.02k|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  348|       |            }
  349|    128|            GraphNameRef::BlankNode(node) => {
  350|    128|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  351|       |            }
  352|       |        }
  353|  84.4k|    }
_RNvMs0_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedNamedNode11decode_from:
  104|   612k|    pub fn decode_from(self, interner: &Interner) -> NamedNodeRef<'_> {
  105|   612k|        NamedNodeRef::new_unchecked(interner.resolve(self.id))
  106|   612k|    }
_RNvXs8_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_14IdentityHasherNtNtCsl2lhD68vXAd_4core4hash6Hasher9write_u64:
  532|  1.31M|    fn write_u64(&mut self, i: u64) {
  533|  1.31M|        self.value = i
  534|  1.31M|    }
_RNvMs2_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedLiteral12encoded_from:
  209|  15.6k|    pub fn encoded_from(literal: LiteralRef<'_>, interner: &Interner) -> Option<Self> {
  210|  15.6k|        let value_id = interner.get(literal.value())?;
  211|  15.6k|        Some(if literal.is_plain() {
  212|    992|            if let Some(language) = literal.language() {
  213|       |                Self::LanguageTaggedString {
  214|    470|                    value_id,
  215|    470|                    language_id: interner.get(language)?,
  216|       |                }
  217|       |            } else {
  218|    522|                Self::String { value_id }
  219|       |            }
  220|       |        } else {
  221|       |            Self::TypedLiteral {
  222|  14.6k|                value_id,
  223|  14.6k|                datatype: InternedNamedNode::encoded_from(literal.datatype(), interner)?,
  224|       |            }
  225|       |        })
  226|  15.6k|    }
_RNvMs3_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedSubject12encoded_from:
  292|  19.7k|    pub fn encoded_from(node: SubjectRef<'_>, interner: &Interner) -> Option<Self> {
  293|  19.7k|        Some(match node {
  294|  10.8k|            SubjectRef::NamedNode(node) => {
  295|  10.8k|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  296|       |            }
  297|  8.87k|            SubjectRef::BlankNode(node) => {
  298|  8.87k|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  299|       |            }
  300|       |            #[cfg(feature = "rdf-star")]
  301|      0|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  302|      0|                triple.as_ref(),
  303|      0|                interner,
  304|      0|            )?)),
  305|       |        })
  306|  19.7k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf9interningNtB2_8Interner7resolve:
   64|   907k|    fn resolve(&self, key: Key) -> &str {
   65|   907k|        &self.string_for_hash[&key.0]
   66|   907k|    }
_RNvMs0_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedNamedNode12encoded_into:
   92|   229k|    pub fn encoded_into(named_node: NamedNodeRef<'_>, interner: &mut Interner) -> Self {
   93|   229k|        Self {
   94|   229k|            id: interner.get_or_intern(named_node.as_str()),
   95|   229k|        }
   96|   229k|    }
_RNvXsB_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedBlankNodeNtNtCsl2lhD68vXAd_4core3cmp10PartialOrd11partial_cmpB7_:
  123|   102k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMs0_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedNamedNode12encoded_from:
   98|  47.1k|    pub fn encoded_from(named_node: NamedNodeRef<'_>, interner: &Interner) -> Option<Self> {
   99|  47.1k|        Some(Self {
  100|  47.1k|            id: interner.get(named_node.as_str())?,
  101|       |        })
  102|  47.1k|    }
_RNvMs1_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedBlankNode12encoded_into:
  130|   118k|    pub fn encoded_into(blank_node: BlankNodeRef<'_>, interner: &mut Interner) -> Self {
  131|   118k|        if let Some(id) = blank_node.unique_id() {
  132|   117k|            interner
  133|   117k|                .string_for_blank_node_id
  134|   117k|                .entry(id)
  135|   117k|                .or_insert_with(|| blank_node.as_str().into());
  136|   117k|            Self::Number { id }
  137|       |        } else {
  138|    572|            Self::Other {
  139|    572|                id: interner.get_or_intern(blank_node.as_str()),
  140|    572|            }
  141|       |        }
  142|   118k|    }
_RNvMs2_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedLiteral12encoded_into:
  190|  71.9k|    pub fn encoded_into(literal: LiteralRef<'_>, interner: &mut Interner) -> Self {
  191|  71.9k|        let value_id = interner.get_or_intern(literal.value());
  192|  71.9k|        if literal.is_plain() {
  193|  1.99k|            if let Some(language) = literal.language() {
  194|    940|                Self::LanguageTaggedString {
  195|    940|                    value_id,
  196|    940|                    language_id: interner.get_or_intern(language),
  197|    940|                }
  198|       |            } else {
  199|  1.05k|                Self::String { value_id }
  200|       |            }
  201|       |        } else {
  202|  69.9k|            Self::TypedLiteral {
  203|  69.9k|                value_id,
  204|  69.9k|                datatype: InternedNamedNode::encoded_into(literal.datatype(), interner),
  205|  69.9k|            }
  206|       |        }
  207|  71.9k|    }
_RNvMs3_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedSubject12encoded_into:
  276|  84.4k|    pub fn encoded_into(node: SubjectRef<'_>, interner: &mut Interner) -> Self {
  277|  84.4k|        match node {
  278|  66.7k|            SubjectRef::NamedNode(node) => {
  279|  66.7k|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  280|       |            }
  281|  17.7k|            SubjectRef::BlankNode(node) => {
  282|  17.7k|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  283|       |            }
  284|       |            #[cfg(feature = "rdf-star")]
  285|      0|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  286|      0|                triple.as_ref(),
  287|      0|                interner,
  288|      0|            ))),
  289|       |        }
  290|  84.4k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf9interningNtB2_8Interner4hash:
   53|   366k|    fn hash(&self, value: &str) -> u64 {
   54|   366k|        let mut hasher = self.hasher.build_hasher();
   55|   366k|        hasher.write(value.as_bytes());
   56|   366k|        let hash = hasher.finish();
   57|   366k|        if hash == u64::MAX {
   58|      0|            0
   59|       |        } else {
   60|   366k|            hash
   61|       |        }
   62|   366k|    }
_RNvMs5_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_12InternedTerm11decode_from:
  436|  19.7k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> TermRef<'a> {
  437|  19.7k|        match self {
  438|  1.53k|            Self::NamedNode(term) => TermRef::NamedNode(term.decode_from(interner)),
  439|  2.58k|            Self::BlankNode(term) => TermRef::BlankNode(term.decode_from(interner)),
  440|  15.6k|            Self::Literal(term) => TermRef::Literal(term.decode_from(interner)),
  441|       |            #[cfg(feature = "rdf-star")]
  442|      0|            Self::Triple(triple) => TermRef::Triple(&interner.triples[triple.as_ref()]),
  443|       |        }
  444|  19.7k|    }
_RNvXsa_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_8InternerNtNtCsl2lhD68vXAd_4core7default7Default7defaultB7_:
    7|  8.12k|#[derive(Debug, Default, Clone)]
_RNvXsg_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_3KeyNtNtCsl2lhD68vXAd_4core3cmp3Ord3cmpB7_:
   69|  5.10M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXst_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedNamedNodeNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneB7_:
   86|   940k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXs8_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_14IdentityHasherNtNtCsl2lhD68vXAd_4core4hash6Hasher6finish:
  524|  1.31M|    fn finish(&self) -> u64 {
  525|  1.31M|        self.value
  526|  1.31M|    }
_RNvXsf_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_3KeyNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqB7_:
   69|  11.5k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsK_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedLiteralNtNtCsl2lhD68vXAd_4core3cmp3Ord3cmpB7_:
  174|  1.56M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsN_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedLiteralNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneB7_:
  174|   750k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsV_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedSubjectNtNtCsl2lhD68vXAd_4core3cmp10PartialOrd11partial_cmpB7_:
  267|   385k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs14_NtCsbrE1BkJ52QU_5oxrdf9interningNtB6_17InternedGraphNameNtNtCsl2lhD68vXAd_4core3cmp10PartialOrd11partial_cmpB8_:
  335|    204|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsA_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedBlankNodeNtNtCsl2lhD68vXAd_4core3cmp3Ord3cmpB7_:
  123|   203k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsD_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedBlankNodeNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneB7_:
  123|   358k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXs1q_NtCsbrE1BkJ52QU_5oxrdf9interningNtB6_21IdentityHasherBuilderNtNtCsl2lhD68vXAd_4core7default7Default7defaultB8_:
  507|  8.12k|#[derive(Default, Clone)]
_RNvXs1s_NtCsbrE1BkJ52QU_5oxrdf9interningNtB6_14IdentityHasherNtNtCsl2lhD68vXAd_4core7default7Default7defaultB8_:
  518|  1.31M|#[derive(Default)]
_RNvXs1d_NtCsbrE1BkJ52QU_5oxrdf9interningNtB6_12InternedTermNtNtCsl2lhD68vXAd_4core3cmp10PartialOrd11partial_cmpB8_:
  392|   118k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs13_NtCsbrE1BkJ52QU_5oxrdf9interningNtB6_17InternedGraphNameNtNtCsl2lhD68vXAd_4core3cmp3Ord3cmpB8_:
  335|  1.64M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs16_NtCsbrE1BkJ52QU_5oxrdf9interningNtB6_17InternedGraphNameNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneB8_:
  335|   884k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]

_RNvMNtCsbrE1BkJ52QU_5oxrdf7literalNtB2_7Literal6as_refCs8B1jHDnA03z_4trig:
  132|   159k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  133|   159k|        LiteralRef(match &self.0 {
  134|  24.1k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  135|  2.72k|            LiteralContent::LanguageTaggedString { value, language } => {
  136|  2.72k|                LiteralRefContent::LanguageTaggedString { value, language }
  137|       |            }
  138|   132k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  139|   132k|                value,
  140|   132k|                datatype: datatype.as_ref(),
  141|   132k|            },
  142|       |        })
  143|   159k|    }
_RNvXsI_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_14LiteralContentNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs8B1jHDnA03z_4trig:
   40|  89.4k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsD_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_7LiteralNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs8B1jHDnA03z_4trig:
   37|  89.4k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsu_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_10LiteralRefNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCs4WjTcpTVJQo_5oxttl:
  568|  24.8k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  569|  24.8k|        match self.0 {
  570|  23.1k|            LiteralRefContent::String(value) => print_quoted_str(value, f),
  571|  1.78k|            LiteralRefContent::LanguageTaggedString { value, language } => {
  572|  1.78k|                print_quoted_str(value, f)?;
  573|  1.78k|                write!(f, "@{language}")
  574|       |            }
  575|      0|            LiteralRefContent::TypedLiteral { value, datatype } => {
  576|      0|                print_quoted_str(value, f)?;
  577|      0|                write!(f, "^^{datatype}")
  578|       |            }
  579|       |        }
  580|  24.8k|    }
_RNvMst_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_10LiteralRef8datatypeCs4WjTcpTVJQo_5oxttl:
  516|  87.4k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  517|  87.4k|        match self.0 {
  518|  23.1k|            LiteralRefContent::String(_) => xsd::STRING,
  519|  1.78k|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  520|  62.5k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  521|       |        }
  522|  87.4k|    }
_RNvXsF_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_7LiteralNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneCs4WjTcpTVJQo_5oxttl:
   37|   262k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMst_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_10LiteralRef5valueCs4WjTcpTVJQo_5oxttl:
  491|  87.4k|    pub const fn value(self) -> &'a str {
  492|  87.4k|        match self.0 {
  493|  23.1k|            LiteralRefContent::String(value)
  494|  1.78k|            | LiteralRefContent::LanguageTaggedString { value, .. }
  495|  87.4k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  496|  87.4k|        }
  497|  87.4k|    }
_RNvXsM_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_14LiteralContentNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneCs4WjTcpTVJQo_5oxttl:
   40|   262k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RINvMNtCsbrE1BkJ52QU_5oxrdf7literalNtB3_7Literal18new_simple_literalRNtNtCsdBW21Yiwikk_5alloc6string6StringECs4WjTcpTVJQo_5oxttl:
   50|    452|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   51|    452|        Self(LiteralContent::String(value.into()))
   52|    452|    }
_RINvXs13_NtCsbrE1BkJ52QU_5oxrdf7literalNtB7_17LiteralRefContentNtNtCsl2lhD68vXAd_4core4hash4Hash4hashNtNtNtCs7HEjVFsiW5Z_3std4hash6random13DefaultHasherEB9_:
  446|   264k|#[derive(PartialEq, Eq, Debug, Clone, Copy, Hash)]
_RINvMNtCsbrE1BkJ52QU_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   56|   187k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   57|   187k|        let value = value.into();
   58|   187k|        let datatype = datatype.into();
   59|   187k|        Self(if datatype == xsd::STRING {
   60|      0|            LiteralContent::String(value)
   61|       |        } else {
   62|   187k|            LiteralContent::TypedLiteral { value, datatype }
   63|       |        })
   64|   187k|    }
_RINvMst_NtCsbrE1BkJ52QU_5oxrdf7literalNtB6_10LiteralRef17new_typed_literalNtNtB8_10named_node12NamedNodeRefEB8_:
  468|   256k|    pub fn new_typed_literal(value: &'a str, datatype: impl Into<NamedNodeRef<'a>>) -> Self {
  469|   256k|        let datatype = datatype.into();
  470|   256k|        LiteralRef(if datatype == xsd::STRING {
  471|      0|            LiteralRefContent::String(value)
  472|       |        } else {
  473|   256k|            LiteralRefContent::TypedLiteral { value, datatype }
  474|       |        })
  475|   256k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCsdBW21Yiwikk_5alloc6string6StringB1n_EB5_:
   88|  5.35k|    pub fn new_language_tagged_literal_unchecked(
   89|  5.35k|        value: impl Into<String>,
   90|  5.35k|        language: impl Into<String>,
   91|  5.35k|    ) -> Self {
   92|  5.35k|        Self(LiteralContent::LanguageTaggedString {
   93|  5.35k|            value: value.into(),
   94|  5.35k|            language: language.into(),
   95|  5.35k|        })
   96|  5.35k|    }
_RINvNtCsbrE1BkJ52QU_5oxrdf7literal16print_quoted_strNtNtCsl2lhD68vXAd_4core3fmt9FormatterEB4_:
  619|  24.8k|pub fn print_quoted_str(string: &str, f: &mut impl Write) -> fmt::Result {
  620|  24.8k|    f.write_char('"')?;
  621|   127k|    for c in string.chars() {
  622|   127k|        match c {
  623|  2.21k|            '\u{08}' => f.write_str("\\b"),
  624|    702|            '\t' => f.write_str("\\t"),
  625|  1.00k|            '\n' => f.write_str("\\n"),
  626|    756|            '\u{0c}' => f.write_str("\\f"),
  627|    359|            '\r' => f.write_str("\\r"),
  628|  3.34k|            '"' => f.write_str("\\\""),
  629|    388|            '\\' => f.write_str("\\\\"),
  630|   119k|            '\0'..='\u{1f}' | '\u{7f}' => write!(f, "\\u{:04X}", u32::from(c)),
  631|  40.0k|            _ => f.write_char(c),
  632|      0|        }?;
  633|       |    }
  634|  24.8k|    f.write_char('"')
  635|  24.8k|}
_RINvXsV_NtCsbrE1BkJ52QU_5oxrdf7literalNtB6_10LiteralRefNtNtCsl2lhD68vXAd_4core4hash4Hash4hashNtNtNtCs7HEjVFsiW5Z_3std4hash6random13DefaultHasherEB8_:
  443|   264k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RINvMNtCsbrE1BkJ52QU_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCsdBW21Yiwikk_5alloc6string6StringEB5_:
   50|  68.8k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   51|  68.8k|        Self(LiteralContent::String(value.into()))
   52|  68.8k|    }
_RNvMst_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_10LiteralRef18new_simple_literalB7_:
  462|  7.03k|    pub const fn new_simple_literal(value: &'a str) -> Self {
  463|  7.03k|        LiteralRef(LiteralRefContent::String(value))
  464|  7.03k|    }
_RNvMst_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_10LiteralRef8is_plainB7_:
  529|  87.5k|    pub const fn is_plain(self) -> bool {
  530|  84.5k|        matches!(
  531|  87.5k|            self.0,
  532|       |            LiteralRefContent::String(_) | LiteralRefContent::LanguageTaggedString { .. }
  533|       |        )
  534|  87.5k|    }
_RNvMst_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_10LiteralRef37new_language_tagged_literal_uncheckedB7_:
  485|  15.6k|    pub const fn new_language_tagged_literal_unchecked(value: &'a str, language: &'a str) -> Self {
  486|  15.6k|        LiteralRef(LiteralRefContent::LanguageTaggedString { value, language })
  487|  15.6k|    }
_RNvMst_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_10LiteralRef5valueB7_:
  491|  87.5k|    pub const fn value(self) -> &'a str {
  492|  87.5k|        match self.0 {
  493|  1.58k|            LiteralRefContent::String(value)
  494|  1.41k|            | LiteralRefContent::LanguageTaggedString { value, .. }
  495|  87.5k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  496|  87.5k|        }
  497|  87.5k|    }
_RNvMst_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_10LiteralRef8languageB7_:
  504|  2.99k|    pub const fn language(self) -> Option<&'a str> {
  505|  2.99k|        match self.0 {
  506|  1.41k|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  507|  1.58k|            _ => None,
  508|       |        }
  509|  2.99k|    }
_RNvMst_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_10LiteralRef8datatypeB7_:
  516|  84.5k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  517|  84.5k|        match self.0 {
  518|      0|            LiteralRefContent::String(_) => xsd::STRING,
  519|      0|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  520|  84.5k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  521|       |        }
  522|  84.5k|    }

_RNvMNtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB2_9NamedNode6as_strCs8B1jHDnA03z_4trig:
   44|  55.1k|    pub fn as_str(&self) -> &str {
   45|  55.1k|        self.iri.as_str()
   46|  55.1k|    }
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCs8B1jHDnA03z_4trig:
  138|   302k|    pub fn into_owned(self) -> NamedNode {
  139|   302k|        NamedNode::new_unchecked(self.iri)
  140|   302k|    }
_RNvXs5_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCs8B1jHDnA03z_4trig:
  145|   289k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|   289k|        write!(f, "<{}>", self.as_str())
  147|   289k|    }
_RNvXsu_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs8B1jHDnA03z_4trig:
  106|  81.1k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMNtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB2_9NamedNode6as_refCs8B1jHDnA03z_4trig:
   54|   842k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|   842k|        NamedNodeRef::new_unchecked(&self.iri)
   56|   842k|    }
_RNvXsl_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs8B1jHDnA03z_4trig:
   17|   487k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs8_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRefINtNtCsl2lhD68vXAd_4core3cmp9PartialEqNtB5_9NamedNodeE2eqCs8B1jHDnA03z_4trig:
  166|  55.1k|    fn eq(&self, other: &NamedNode) -> bool {
  167|  55.1k|        self.as_str() == other.as_str()
  168|  55.1k|    }
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCs8B1jHDnA03z_4trig:
  128|   842k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   842k|        Self { iri }
  130|   842k|    }
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCs8B1jHDnA03z_4trig:
  133|   344k|    pub const fn as_str(self) -> &'a str {
  134|   344k|        self.iri
  135|   344k|    }
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCs4WjTcpTVJQo_5oxttl:
  133|  34.6k|    pub const fn as_str(self) -> &'a str {
  134|  34.6k|        self.iri
  135|  34.6k|    }
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCs4WjTcpTVJQo_5oxttl:
  138|  36.2k|    pub fn into_owned(self) -> NamedNode {
  139|  36.2k|        NamedNode::new_unchecked(self.iri)
  140|  36.2k|    }
_RNvXsp_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneCs4WjTcpTVJQo_5oxttl:
   17|  1.30M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsg_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCsl2lhD68vXAd_4core7convert4FromINtCs72NQLJxIjgJ_5oxiri3IriNtNtCsdBW21Yiwikk_5alloc6string6StringEE4fromCs4WjTcpTVJQo_5oxttl:
  222|   534k|    fn from(iri: Iri<String>) -> Self {
  223|   534k|        Self {
  224|   534k|            iri: iri.into_inner(),
  225|   534k|        }
  226|   534k|    }
_RNvXs5_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCs4WjTcpTVJQo_5oxttl:
  145|  34.6k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|  34.6k|        write!(f, "<{}>", self.as_str())
  147|  34.6k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|  1.01M|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  1.01M|        Self { iri: iri.into() }
   41|  1.01M|    }
_RINvXsA_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB6_12NamedNodeRefNtNtCsl2lhD68vXAd_4core4hash4Hash4hashNtNtNtCs7HEjVFsiW5Z_3std4hash6random13DefaultHasherEB8_:
  106|   564k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXs9_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCsl2lhD68vXAd_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|   187k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|   187k|        self.as_str() == other.as_str()
  175|   187k|    }
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedB7_:
  128|   612k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   612k|        Self { iri }
  130|   612k|    }
_RNvXs6_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCsl2lhD68vXAd_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|   673k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|   673k|        node.into_owned()
  154|   673k|    }
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|   464k|    pub const fn as_str(self) -> &'a str {
  134|   464k|        self.iri
  135|   464k|    }
_RNvXsu_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqB7_:
  106|   256k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMNtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|   187k|    pub fn as_str(&self) -> &str {
   45|   187k|        self.iri.as_str()
   46|   187k|    }
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|   673k|    pub fn into_owned(self) -> NamedNode {
  139|   673k|        NamedNode::new_unchecked(self.iri)
  140|   673k|    }

_RNvMs1g_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_12GraphNameRef16is_default_graphCs8B1jHDnA03z_4trig:
  964|   312k|    pub fn is_default_graph(&self) -> bool {
  965|   312k|        matches!(self, Self::DefaultGraph)
  966|   312k|    }
_RNvMs1g_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_12GraphNameRef10into_ownedCs8B1jHDnA03z_4trig:
  969|  1.55k|    pub fn into_owned(self) -> GraphName {
  970|  1.55k|        match self {
  971|    919|            Self::NamedNode(node) => GraphName::NamedNode(node.into_owned()),
  972|    137|            Self::BlankNode(node) => GraphName::BlankNode(node.into_owned()),
  973|    503|            Self::DefaultGraph => GraphName::DefaultGraph,
  974|       |        }
  975|  1.55k|    }
_RNvXs25_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_4TermNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs8B1jHDnA03z_4trig:
  385|   311k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1w_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_7QuadRefINtNtCsl2lhD68vXAd_4core7convert4FromRNtB6_4QuadE4fromCs8B1jHDnA03z_4trig:
 1214|   393k|    fn from(quad: &'a Quad) -> Self {
 1215|   393k|        quad.as_ref()
 1216|   393k|    }
_RNvXs2z_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_9GraphNameNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs8B1jHDnA03z_4trig:
  856|   311k|#[derive(Eq, PartialEq, Debug, Clone, Hash, Default)]
_RNvMsc_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7Subject6as_refCs8B1jHDnA03z_4trig:
  181|   693k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|   693k|        match self {
  183|   147k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|   546k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|      0|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|   693k|    }
_RNvXs1h_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_12GraphNameRefNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCs8B1jHDnA03z_4trig:
  980|  1.05k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  981|  1.05k|        match self {
  982|    919|            Self::NamedNode(node) => node.fmt(f),
  983|    137|            Self::BlankNode(node) => node.fmt(f),
  984|      0|            Self::DefaultGraph => write!(f, "DEFAULT"),
  985|       |        }
  986|  1.05k|    }
_RNvMsy_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_4Term6as_refCs8B1jHDnA03z_4trig:
  417|   393k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|   393k|        match self {
  419|  29.5k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|   204k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|   159k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|      0|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|   393k|    }
_RNvXs2Q_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_4QuadNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs8B1jHDnA03z_4trig:
 1065|   311k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMs18_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_9GraphName6as_refCs8B1jHDnA03z_4trig:
  881|  1.01M|    pub fn as_ref(&self) -> GraphNameRef<'_> {
  882|  1.01M|        match self {
  883|   139k|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.as_ref()),
  884|  1.07k|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.as_ref()),
  885|   875k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  886|       |        }
  887|  1.01M|    }
_RNvXs2H_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_12GraphNameRefNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs8B1jHDnA03z_4trig:
  944|   309k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash, Default)]
_RNvXs1Q_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_7SubjectNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs8B1jHDnA03z_4trig:
  155|   311k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMsn_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_10SubjectRef10into_ownedCs8B1jHDnA03z_4trig:
  294|   253k|    pub fn into_owned(self) -> Subject {
  295|   253k|        match self {
  296|  12.4k|            Self::NamedNode(node) => Subject::NamedNode(node.into_owned()),
  297|   241k|            Self::BlankNode(node) => Subject::BlankNode(node.into_owned()),
  298|       |            #[cfg(feature = "rdf-star")]
  299|      0|            Self::Triple(triple) => Subject::Triple(Box::new(triple.clone())),
  300|       |        }
  301|   253k|    }
_RNvMs18_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_9GraphName16is_default_graphCs8B1jHDnA03z_4trig:
  876|   312k|    pub fn is_default_graph(&self) -> bool {
  877|   312k|        self.as_ref().is_default_graph()
  878|   312k|    }
_RNvXs1X_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_10SubjectRefNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs8B1jHDnA03z_4trig:
  268|   299k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RNvMs1q_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_4Quad6as_refCs8B1jHDnA03z_4trig:
 1098|   393k|    pub fn as_ref(&self) -> QuadRef<'_> {
 1099|   393k|        QuadRef {
 1100|   393k|            subject: self.subject.as_ref(),
 1101|   393k|            predicate: self.predicate.as_ref(),
 1102|   393k|            object: self.object.as_ref(),
 1103|   393k|            graph_name: self.graph_name.as_ref(),
 1104|   393k|        }
 1105|   393k|    }
_RINvMs1q_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node12NamedNodeRefB11_NtB7_9GraphNameECs4WjTcpTVJQo_5oxttl:
 1083|  33.5k|    pub fn new(
 1084|  33.5k|        subject: impl Into<Subject>,
 1085|  33.5k|        predicate: impl Into<NamedNode>,
 1086|  33.5k|        object: impl Into<Term>,
 1087|  33.5k|        graph_name: impl Into<GraphName>,
 1088|  33.5k|    ) -> Self {
 1089|  33.5k|        Self {
 1090|  33.5k|            subject: subject.into(),
 1091|  33.5k|            predicate: predicate.into(),
 1092|  33.5k|            object: object.into(),
 1093|  33.5k|            graph_name: graph_name.into(),
 1094|  33.5k|        }
 1095|  33.5k|    }
_RINvMs1q_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node12NamedNodeRefNtNtB9_10blank_node9BlankNodeNtB7_9GraphNameECs4WjTcpTVJQo_5oxttl:
 1083|  74.1k|    pub fn new(
 1084|  74.1k|        subject: impl Into<Subject>,
 1085|  74.1k|        predicate: impl Into<NamedNode>,
 1086|  74.1k|        object: impl Into<Term>,
 1087|  74.1k|        graph_name: impl Into<GraphName>,
 1088|  74.1k|    ) -> Self {
 1089|  74.1k|        Self {
 1090|  74.1k|            subject: subject.into(),
 1091|  74.1k|            predicate: predicate.into(),
 1092|  74.1k|            object: object.into(),
 1093|  74.1k|            graph_name: graph_name.into(),
 1094|  74.1k|        }
 1095|  74.1k|    }
_RINvMs1q_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtB7_4TermNtB7_9GraphNameECs4WjTcpTVJQo_5oxttl:
 1083|   819k|    pub fn new(
 1084|   819k|        subject: impl Into<Subject>,
 1085|   819k|        predicate: impl Into<NamedNode>,
 1086|   819k|        object: impl Into<Term>,
 1087|   819k|        graph_name: impl Into<GraphName>,
 1088|   819k|    ) -> Self {
 1089|   819k|        Self {
 1090|   819k|            subject: subject.into(),
 1091|   819k|            predicate: predicate.into(),
 1092|   819k|            object: object.into(),
 1093|   819k|            graph_name: graph_name.into(),
 1094|   819k|        }
 1095|   819k|    }
_RINvMs12_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB7_6Triple3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtB7_4TermECs4WjTcpTVJQo_5oxttl:
  728|    154|    pub fn new(
  729|    154|        subject: impl Into<Subject>,
  730|    154|        predicate: impl Into<NamedNode>,
  731|    154|        object: impl Into<Term>,
  732|    154|    ) -> Self {
  733|    154|        Self {
  734|    154|            subject: subject.into(),
  735|    154|            predicate: predicate.into(),
  736|    154|            object: object.into(),
  737|    154|        }
  738|    154|    }
_RNvXs1c_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_9GraphNameINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB8_10blank_node9BlankNodeE4fromCs4WjTcpTVJQo_5oxttl:
  913|    655|    fn from(node: BlankNode) -> Self {
  914|    655|        Self::BlankNode(node)
  915|    655|    }
_RNvXs1a_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_9GraphNameINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB8_10named_node9NamedNodeE4fromCs4WjTcpTVJQo_5oxttl:
  899|  4.06k|    fn from(node: NamedNode) -> Self {
  900|  4.06k|        Self::NamedNode(node)
  901|  4.06k|    }
_RNvXs1e_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_9GraphNameINtNtCsl2lhD68vXAd_4core7convert4FromNtB6_16NamedOrBlankNodeE4fromCs4WjTcpTVJQo_5oxttl:
  927|  4.72k|    fn from(node: NamedOrBlankNode) -> Self {
  928|  4.72k|        match node {
  929|  4.06k|            NamedOrBlankNode::NamedNode(node) => node.into(),
  930|    655|            NamedOrBlankNode::BlankNode(node) => node.into(),
  931|       |        }
  932|  4.72k|    }
_RNvXs1S_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_7SubjectNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneCs4WjTcpTVJQo_5oxttl:
  155|   819k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsL_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_4TermINtNtCsl2lhD68vXAd_4core7convert4FromNtB5_7SubjectE4fromCs4WjTcpTVJQo_5oxttl:
  520|     42|    fn from(node: Subject) -> Self {
  521|     42|        match node {
  522|      0|            Subject::NamedNode(node) => node.into(),
  523|     42|            Subject::BlankNode(node) => node.into(),
  524|       |            #[cfg(feature = "rdf-star")]
  525|      0|            Subject::Triple(triple) => Self::Triple(triple),
  526|       |        }
  527|     42|    }
_RNvXsY_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7TermRefINtNtCsl2lhD68vXAd_4core7convert4FromNtB5_10SubjectRefE4fromCs4WjTcpTVJQo_5oxttl:
  666|   253k|    fn from(node: SubjectRef<'a>) -> Self {
  667|   253k|        match node {
  668|  12.4k|            SubjectRef::NamedNode(node) => node.into(),
  669|   241k|            SubjectRef::BlankNode(node) => node.into(),
  670|       |            #[cfg(feature = "rdf-star")]
  671|      0|            SubjectRef::Triple(triple) => triple.into(),
  672|       |        }
  673|   253k|    }
_RNvXsP_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7TermRefINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCs4WjTcpTVJQo_5oxttl:
  599|  12.4k|    fn from(node: NamedNodeRef<'a>) -> Self {
  600|  12.4k|        Self::NamedNode(node)
  601|  12.4k|    }
_RNvXsR_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7TermRefINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10blank_node12BlankNodeRefE4fromCs4WjTcpTVJQo_5oxttl:
  613|   241k|    fn from(node: BlankNodeRef<'a>) -> Self {
  614|   241k|        Self::BlankNode(node)
  615|   241k|    }
_RNvXsl_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7SubjectINtNtCsl2lhD68vXAd_4core7convert4FromNtB5_16NamedOrBlankNodeE4fromCs4WjTcpTVJQo_5oxttl:
  252|   293k|    fn from(node: NamedOrBlankNode) -> Self {
  253|   293k|        match node {
  254|  95.7k|            NamedOrBlankNode::NamedNode(node) => node.into(),
  255|   197k|            NamedOrBlankNode::BlankNode(node) => node.into(),
  256|       |        }
  257|   293k|    }
_RNvXs27_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_4TermNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneCs4WjTcpTVJQo_5oxttl:
  385|   819k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs0_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_16NamedOrBlankNodeINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromCs4WjTcpTVJQo_5oxttl:
   43|   129k|    fn from(node: NamedNode) -> Self {
   44|   129k|        Self::NamedNode(node)
   45|   129k|    }
_RNvXs2B_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_9GraphNameNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneCs4WjTcpTVJQo_5oxttl:
  856|   927k|#[derive(Eq, PartialEq, Debug, Clone, Hash, Default)]
_RNvXsf_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7SubjectINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCs4WjTcpTVJQo_5oxttl:
  207|    204|    fn from(node: NamedNodeRef<'_>) -> Self {
  208|    204|        node.into_owned().into()
  209|    204|    }
_RNvXsB_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_4TermINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCs4WjTcpTVJQo_5oxttl:
  444|  36.0k|    fn from(node: NamedNodeRef<'_>) -> Self {
  445|  36.0k|        node.into_owned().into()
  446|  36.0k|    }
_RNvXs2_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_16NamedOrBlankNodeINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromCs4WjTcpTVJQo_5oxttl:
   57|   198k|    fn from(node: BlankNode) -> Self {
   58|   198k|        Self::BlankNode(node)
   59|   198k|    }
_RNvXse_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7SubjectINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|  97.9k|    fn from(node: NamedNode) -> Self {
  201|  97.9k|        Self::NamedNode(node)
  202|  97.9k|    }
_RNvXsi_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7SubjectINtNtCsl2lhD68vXAd_4core7convert4FromNtB5_6TripleE4fromB7_:
  229|    154|    fn from(node: Triple) -> Self {
  230|    154|        Self::Triple(Box::new(node))
  231|    154|    }
_RNvXsg_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7SubjectINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|   765k|    fn from(node: BlankNode) -> Self {
  215|   765k|        Self::BlankNode(node)
  216|   765k|    }
_RNvXsC_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_4TermINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  451|   598k|    fn from(node: BlankNode) -> Self {
  452|   598k|        Self::BlankNode(node)
  453|   598k|    }
_RNvXsA_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_4TermINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|  66.5k|    fn from(node: NamedNode) -> Self {
  438|  66.5k|        Self::NamedNode(node)
  439|  66.5k|    }
_RNvXsE_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_4TermINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  465|   262k|    fn from(literal: Literal) -> Self {
  466|   262k|        Self::Literal(literal)
  467|   262k|    }

_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer9parse_iri0B8_:
  212|  13.9k|        let iri = String::from_utf8(iri).map_err(|e| {
  213|  13.9k|            (
  214|  13.9k|                position.clone(),
  215|  13.9k|                format!("The IRI contains invalid UTF-8 characters: {e}"),
  216|  13.9k|            )
  217|  13.9k|        })?;
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer14parse_lang_tag0B8_:
  551|  10.6k|                .map_err(|e| (position.clone(), e.to_string()))?
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_chars_0B8_:
  784|      8|        let c = char::from_u32(codepoint).ok_or_else(|| {
  785|      8|            (
  786|      8|                position..position + len +2,
  787|      8|                format!(
  788|      8|                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  789|      8|                ),
  790|      8|            )
  791|      8|        })?;
_RNCNvNtCs4WjTcpTVJQo_5oxttl5lexer13str_from_utf80B5_:
  928|  13.1k|    str::from_utf8(data).map_err(|e| {
  929|  13.1k|        (
  930|  13.1k|            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  931|  13.1k|            format!("Invalid UTF-8: {e}"),
  932|  13.1k|        )
  933|  13.1k|            .into()
  934|  13.1k|    })
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer18recognize_variable0B8_:
  325|  54.5k|            result.and_then(|(name, _)| {
  326|  54.5k|                if name.is_empty() {
  327|  43.8k|                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  328|       |                } else {
  329|  10.6k|                    Ok(N3Token::Variable(name))
  330|       |                }
  331|  54.5k|            }),
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer9parse_iris_0B8_:
  223|  52.2k|        .map_err(|e| (position, e.to_string()))?;
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer22recognize_unicode_char0B8_:
  856|  25.4k|                .map(|c| (c, bytes_needed + 1))
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer26recognize_pname_or_keyword0B8_:
  309|  81.8k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  310|  81.8k|                prefix: pn_prefix,
  311|  81.8k|                local,
  312|  81.8k|                might_be_invalid_iri,
  313|  81.8k|            }),
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_char0B8_:
  776|  3.60k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  777|  3.60k|            (
  778|  3.60k|                position..position + len + 2,
  779|  3.60k|                format!(
  780|  3.60k|                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  781|  3.60k|                ),
  782|  3.60k|            )
  783|  3.60k|        })?;
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer16recognize_string:
  556|   247k|    fn recognize_string(
  557|   247k|        data: &[u8],
  558|   247k|        delimiter: u8,
  559|   247k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  560|   247k|        // [22] 	STRING_LITERAL_QUOTE 	::= 	'"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
  561|   247k|        // [23] 	STRING_LITERAL_SINGLE_QUOTE 	::= 	"'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
  562|   247k|        let mut string = String::new();
  563|   247k|        let mut i = 1;
  564|       |        loop {
  565|   785k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  566|   698k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  567|   693k|                Ok(s) => string.push_str(s),
  568|  5.40k|                Err(e) => return Some((end, Err(e))),
  569|       |            };
  570|   693k|            i += end;
  571|   693k|            match data[i] {
  572|   693k|                c if c == delimiter => {
  573|  73.9k|                    return Some((i + 1, Ok(N3Token::String(string))));
  574|       |                }
  575|       |                b'\\' => {
  576|   619k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  577|   597k|                    i += additional + 1;
  578|   597k|                    match c {
  579|   537k|                        Ok(c) => {
  580|   537k|                            string.push(c);
  581|   537k|                        }
  582|  59.6k|                        Err(e) => {
  583|       |                            // We read until the end of string char
  584|  59.6k|                            let end = memchr(delimiter, &data[i..])?;
  585|  2.83k|                            return Some((i + end + 1, Err(e)));
  586|       |                        }
  587|       |                    }
  588|       |                }
  589|      0|                _ => unreachable!(),
  590|       |            }
  591|       |        }
  592|   247k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer20is_possible_pn_chars:
  892|  24.3M|    fn is_possible_pn_chars(c: char) -> bool {
  893|  24.3M|        Self::is_possible_pn_chars_u(c)
  894|  11.4M|            || matches!(c,
  895|  9.99M|        '-' | '0'..='9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
  896|  24.3M|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer26recognize_blank_node_label:
  477|   485k|    fn recognize_blank_node_label(
  478|   485k|        data: &[u8],
  479|   485k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  480|   485k|        // [141s] 	BLANK_NODE_LABEL 	::= 	'_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
  481|   485k|        let mut i = 2;
  482|       |        loop {
  483|  14.7M|            match Self::recognize_unicode_char(&data[i..], i)? {
  484|  14.7M|                Ok((c, consumed)) => {
  485|  14.7M|                    if (i == 2 && (Self::is_possible_pn_chars_u(c) || c.is_ascii_digit()))
  486|  14.2M|                        || (i > 2 && Self::is_possible_pn_chars(c))
  487|  14.2M|                    {
  488|  14.2M|                        // Ok
  489|  14.2M|                    } else if i > 2 && c == '.' {
  490|  3.13k|                        if data[i - 1] == b'.' {
  491|    226|                            i -= 1;
  492|    226|                            return Some((
  493|    226|                                i,
  494|    226|                                str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  495|    226|                            ));
  496|  2.90k|                        }
  497|   445k|                    } else if i == 0 {
  498|      0|                        return Some((
  499|      0|                            i,
  500|      0|                            Err((0..i, "A blank node ID should not be empty").into()),
  501|      0|                        ));
  502|   445k|                    } else if data[i - 1] == b'.' {
  503|    758|                        i -= 1;
  504|    758|                        return Some((
  505|    758|                            i,
  506|    758|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  507|    758|                        ));
  508|       |                    } else {
  509|   445k|                        return Some((
  510|   445k|                            i,
  511|   445k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  512|   445k|                        ));
  513|       |                    }
  514|  14.2M|                    i += consumed;
  515|       |                }
  516|    370|                Err(e) => return Some((e.location.end, Err(e))),
  517|       |            }
  518|       |        }
  519|   485k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer16recognize_number:
  632|   754k|    fn recognize_number(data: &[u8]) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  633|   754k|        // [19] 	INTEGER 	::= 	[+-]? [0-9]+
  634|   754k|        // [20] 	DECIMAL 	::= 	[+-]? [0-9]* '.' [0-9]+
  635|   754k|        // [21] 	DOUBLE 	::= 	[+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  636|   754k|        // [154s] 	EXPONENT 	::= 	[eE] [+-]? [0-9]+
  637|   754k|        let mut i = 0;
  638|   754k|        let c = *data.first()?;
  639|   754k|        if matches!(c, b'+' | b'-') {
  640|   137k|            i += 1;
  641|   617k|        }
  642|       |        // We read the digits before .
  643|   754k|        let mut count_before: usize = 0;
  644|       |        loop {
  645|  2.63M|            let c = *data.get(i)?;
  646|  2.45M|            if c.is_ascii_digit() {
  647|  1.87M|                i += 1;
  648|  1.87M|                count_before += 1;
  649|  1.87M|            } else {
  650|   580k|                break;
  651|       |            }
  652|       |        }
  653|       |
  654|       |        // We read the digits after .
  655|       |        #[allow(clippy::if_then_some_else_none)]
  656|   580k|        let count_after = if *data.get(i)? == b'.' {
  657|   136k|            i += 1;
  658|   136k|
  659|   136k|            let mut count_after = 0;
  660|       |            loop {
  661|   422k|                let c = *data.get(i)?;
  662|   399k|                if c.is_ascii_digit() {
  663|   286k|                    i += 1;
  664|   286k|                    count_after += 1;
  665|   286k|                } else {
  666|   113k|                    break;
  667|   113k|                }
  668|   113k|            }
  669|   113k|            Some(count_after)
  670|       |        } else {
  671|   444k|            None
  672|       |        };
  673|       |
  674|       |        // End
  675|   557k|        let c = *data.get(i)?;
  676|   557k|        if matches!(c, b'e' | b'E') {
  677|  96.9k|            i += 1;
  678|       |
  679|  96.9k|            let c = *data.get(i)?;
  680|  95.0k|            if matches!(c, b'+' | b'-') {
  681|  3.95k|                i += 1;
  682|  91.1k|            }
  683|       |
  684|  95.0k|            let mut found = false;
  685|       |            loop {
  686|   459k|                let c = *data.get(i)?;
  687|   433k|                if c.is_ascii_digit() {
  688|   363k|                    i += 1;
  689|   363k|                    found = true;
  690|   363k|                } else {
  691|  69.1k|                    break;
  692|  69.1k|                }
  693|  69.1k|            }
  694|  69.1k|            Some((
  695|  69.1k|                i,
  696|  69.1k|                if !found {
  697|  1.89k|                    Err((0..i, "A double exponent cannot be empty").into())
  698|  67.2k|                } else if count_before == 0 && count_after.unwrap_or(0) == 0 {
  699|    252|                    Err((0..i, "A double should not be empty").into())
  700|       |                } else {
  701|  66.9k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Double)
  702|       |                },
  703|       |            ))
  704|   460k|        } else if let Some(count_after) = count_after {
  705|   107k|            if count_after == 0 {
  706|       |                // We do not consume the '.' after all
  707|  74.5k|                i -= 1;
  708|  74.5k|                Some((
  709|  74.5k|                    i,
  710|  74.5k|                    if count_before == 0 {
  711|  4.13k|                        Err((0..i, "An integer should not be empty").into())
  712|       |                    } else {
  713|  70.4k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  714|       |                    },
  715|       |                ))
  716|       |            } else {
  717|  33.3k|                Some((i, str_from_utf8(&data[..i], 0..i).map(N3Token::Decimal)))
  718|       |            }
  719|       |        } else {
  720|       |            Some((
  721|   352k|                i,
  722|   352k|                if count_before == 0 {
  723|  75.7k|                    Err((0..i, "An integer should not be empty").into())
  724|       |                } else {
  725|   277k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  726|       |                },
  727|       |            ))
  728|       |        }
  729|   754k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer13recognize_iri:
  176|   953k|    fn recognize_iri(
  177|   953k|        data: &[u8],
  178|   953k|        options: &N3LexerOptions,
  179|   953k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  180|   953k|        // [18] 	IRIREF 	::= 	'<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
  181|   953k|        let mut string = Vec::new();
  182|   953k|        let mut i = 1;
  183|       |        loop {
  184|   953k|            let end = memchr2(b'>', b'\\', &data[i..])?;
  185|   675k|            string.extend_from_slice(&data[i..i + end]);
  186|   675k|            i += end;
  187|   675k|            match data[i] {
  188|       |                b'>' => {
  189|   658k|                    return Some((i + 1, Self::parse_iri(string, 0..=i, options)));
  190|       |                }
  191|       |                b'\\' => {
  192|  17.2k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, false)?;
  193|  2.75k|                    i += additional + 1;
  194|  2.75k|                    match c {
  195|      0|                        Ok(c) => {
  196|      0|                            let mut buf = [0; 4];
  197|      0|                            string.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  198|      0|                        }
  199|  2.75k|                        Err(e) => return Some((i, Err(e))),
  200|       |                    }
  201|       |                }
  202|      0|                _ => unreachable!(),
  203|       |            }
  204|       |        }
  205|   953k|    }
_RNvNtCs4WjTcpTVJQo_5oxttl5lexer18resolve_local_name:
  905|  32.5k|pub fn resolve_local_name(
  906|  32.5k|    prefix: &str,
  907|  32.5k|    local: &str,
  908|  32.5k|    might_be_invalid_iri: bool,
  909|  32.5k|    prefixes: &HashMap<String, Iri<String>>,
  910|  32.5k|) -> Result<NamedNode, String> {
  911|  32.5k|    if let Some(start) = prefixes.get(prefix) {
  912|      0|        let iri = format!("{start}{local}");
  913|      0|        if might_be_invalid_iri || start.path().is_empty() {
  914|       |            // We validate again. We always validate if the local part might be the IRI authority.
  915|      0|            if let Err(e) = Iri::parse(iri.as_str()) {
  916|      0|                return Err(format!(
  917|      0|                    "The prefixed name {prefix}:{local} builds IRI {iri} that is invalid: {e}"
  918|      0|                ));
  919|      0|            }
  920|      0|        }
  921|      0|        Ok(NamedNode::new_unchecked(iri))
  922|       |    } else {
  923|  32.5k|        Err(format!("The prefix {prefix}: has not been declared"))
  924|       |    }
  925|  32.5k|}
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer14parse_lang_tag:
  545|  36.2k|    fn parse_lang_tag(
  546|  36.2k|        lang_tag: &[u8],
  547|  36.2k|        position: Range<usize>,
  548|  36.2k|    ) -> Result<N3Token<'_>, TokenRecognizerError> {
  549|  36.2k|        Ok(N3Token::LangTag(
  550|  36.2k|            LanguageTag::parse(str_from_utf8(lang_tag, position.clone())?)
  551|  36.2k|                .map_err(|e| (position.clone(), e.to_string()))?
  552|  25.6k|                .into_inner(),
  553|       |        ))
  554|  36.2k|    }
_RNvXNtCs4WjTcpTVJQo_5oxttl5lexerNtB2_7N3LexerNtNtNtB4_7toolkit5lexer15TokenRecognizer20recognize_next_token:
   54|  12.2M|    fn recognize_next_token<'a>(
   55|  12.2M|        &mut self,
   56|  12.2M|        data: &'a [u8],
   57|  12.2M|        is_ending: bool,
   58|  12.2M|        options: &N3LexerOptions,
   59|  12.2M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
   60|  12.2M|        match *data.first()? {
   61|  1.03M|            b'<' => match *data.get(1)? {
   62|  58.2k|                b'<' => Some((2, Ok(N3Token::Punctuation("<<")))),
   63|  2.17k|                b'=' if self.mode == N3LexerMode::N3 => {
   64|      0|                    if let Some((consumed, result)) = Self::recognize_iri(data, options) {
   65|      0|                        Some(if let Ok(result) = result {
   66|      0|                            (consumed, Ok(result))
   67|       |                        } else {
   68|      0|                            (2, Ok(N3Token::Punctuation("<=")))
   69|       |                        })
   70|      0|                    } else if is_ending {
   71|      0|                        Some((2, Ok(N3Token::Punctuation("<="))))
   72|       |                    } else {
   73|      0|                        None
   74|       |                    }
   75|       |                }
   76|  8.87k|                b'-' if self.mode == N3LexerMode::N3 => {
   77|      0|                    if let Some((consumed, result)) = Self::recognize_iri(data, options) {
   78|      0|                        Some(if let Ok(result) = result {
   79|      0|                            (consumed, Ok(result))
   80|       |                        } else {
   81|      0|                            (2, Ok(N3Token::Punctuation("<-")))
   82|       |                        })
   83|      0|                    } else if is_ending {
   84|      0|                        Some((2, Ok(N3Token::Punctuation("<-"))))
   85|       |                    } else {
   86|      0|                        None
   87|       |                    }
   88|       |                }
   89|   953k|                _ => Self::recognize_iri(data, options),
   90|       |            },
   91|       |            b'>' => {
   92|   198k|                if *data.get(1)? == b'>' {
   93|   128k|                    Some((2, Ok(N3Token::Punctuation(">>"))))
   94|       |                } else {
   95|  60.6k|                    Some((1, Ok(N3Token::Punctuation(">"))))
   96|       |                }
   97|       |            }
   98|   538k|            b'_' => match data.get(1)? {
   99|   485k|                b':' => Self::recognize_blank_node_label(data),
  100|  15.0k|                c => Some((
  101|  15.0k|                    1,
  102|  15.0k|                    Err((0, format!("Unexpected character '{}'", char::from(*c))).into()),
  103|  15.0k|                )),
  104|       |            },
  105|       |            b'"' => {
  106|   116k|                if self.mode != N3LexerMode::NTriples
  107|   116k|                    && *data.get(1)? == b'"'
  108|  71.1k|                    && *data.get(2)? == b'"'
  109|       |                {
  110|  56.5k|                    Self::recognize_long_string(data, b'"')
  111|       |                } else {
  112|  52.3k|                    Self::recognize_string(data, b'"')
  113|       |                }
  114|       |            }
  115|   285k|            b'\'' if self.mode != N3LexerMode::NTriples => {
  116|   285k|                if *data.get(1)? == b'\'' && *data.get(2)? == b'\'' {
  117|  76.0k|                    Self::recognize_long_string(data, b'\'')
  118|       |                } else {
  119|   195k|                    Self::recognize_string(data, b'\'')
  120|       |                }
  121|       |            }
  122|   124k|            b'@' => Self::recognize_lang_tag(data),
  123|  1.20M|            b'.' => match data.get(1) {
  124|   267k|                Some(b'0'..=b'9') => Self::recognize_number(data),
  125|   931k|                Some(_) => Some((1, Ok(N3Token::Punctuation(".")))),
  126|   233k|                None => is_ending.then_some((1, Ok(N3Token::Punctuation(".")))),
  127|       |            },
  128|       |            b'^' => {
  129|  47.3k|                if *data.get(1)? == b'^' {
  130|  4.48k|                    Some((2, Ok(N3Token::Punctuation("^^"))))
  131|       |                } else {
  132|  38.4k|                    Some((1, Ok(N3Token::Punctuation("^"))))
  133|       |                }
  134|       |            }
  135|   906k|            b'(' => Some((1, Ok(N3Token::Punctuation("(")))),
  136|   141k|            b')' => Some((1, Ok(N3Token::Punctuation(")")))),
  137|  72.9k|            b'[' => Some((1, Ok(N3Token::Punctuation("[")))),
  138|  13.8k|            b']' => Some((1, Ok(N3Token::Punctuation("]")))),
  139|       |            b'{' => {
  140|   273k|                if *data.get(1)? == b'|' {
  141|    508|                    Some((2, Ok(N3Token::Punctuation("{|"))))
  142|       |                } else {
  143|   218k|                    Some((1, Ok(N3Token::Punctuation("{"))))
  144|       |                }
  145|       |            }
  146|  17.0k|            b'}' => Some((1, Ok(N3Token::Punctuation("}")))),
  147|  90.7k|            b',' => Some((1, Ok(N3Token::Punctuation(",")))),
  148|  77.0k|            b';' => Some((1, Ok(N3Token::Punctuation(";")))),
  149|  6.69k|            b'!' => Some((1, Ok(N3Token::Punctuation("!")))),
  150|       |            b'|' => {
  151|  16.1k|                if *data.get(1)? == b'}' {
  152|    434|                    Some((2, Ok(N3Token::Punctuation("|}"))))
  153|       |                } else {
  154|  12.2k|                    Some((1, Ok(N3Token::Punctuation("|"))))
  155|       |                }
  156|       |            }
  157|       |            b'=' => {
  158|  51.3k|                if *data.get(1)? == b'>' {
  159|    758|                    Some((2, Ok(N3Token::Punctuation("=>"))))
  160|       |                } else {
  161|  44.8k|                    Some((1, Ok(N3Token::Punctuation("="))))
  162|       |                }
  163|       |            }
  164|  3.15M|            b'0'..=b'9' | b'+' | b'-' => Self::recognize_number(data),
  165|   115k|            b'?' => Self::recognize_variable(data, is_ending),
  166|  4.82M|            _ => Self::recognize_pname_or_keyword(data, is_ending),
  167|       |        }
  168|  12.2M|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer9parse_iri:
  207|   658k|    fn parse_iri(
  208|   658k|        iri: Vec<u8>,
  209|   658k|        position: RangeInclusive<usize>,
  210|   658k|        options: &N3LexerOptions,
  211|   658k|    ) -> Result<N3Token<'static>, TokenRecognizerError> {
  212|   658k|        let iri = String::from_utf8(iri).map_err(|e| {
  213|       |            (
  214|       |                position.clone(),
  215|       |                format!("The IRI contains invalid UTF-8 characters: {e}"),
  216|       |            )
  217|   658k|        })?;
  218|   644k|        let iri = if let Some(base_iri) = options.base_iri.as_ref() {
  219|   319k|            base_iri.resolve(&iri)
  220|       |        } else {
  221|   324k|            Iri::parse(iri)
  222|       |        }
  223|   644k|        .map_err(|e| (position, e.to_string()))?;
  224|   591k|        Ok(N3Token::IriRef(iri))
  225|   658k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer18recognize_hex_char:
  766|   146k|    fn recognize_hex_char(
  767|   146k|        data: &[u8],
  768|   146k|        len: usize,
  769|   146k|        escape_char: char,
  770|   146k|        position: usize,
  771|   146k|    ) -> Result<Option<char>, TokenRecognizerError> {
  772|   146k|        if data.len() < len {
  773|  4.31k|            return Ok(None);
  774|   142k|        }
  775|   142k|        let val = str_from_utf8(&data[..len], position..position + len + 2)?;
  776|   138k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  777|       |            (
  778|       |                position..position + len + 2,
  779|       |                format!(
  780|       |                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  781|       |                ),
  782|       |            )
  783|   138k|        })?;
  784|   135k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  785|       |            (
  786|       |                position..position + len +2,
  787|       |                format!(
  788|       |                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  789|       |                ),
  790|       |            )
  791|   135k|        })?;
  792|   135k|        Ok(Some(c))
  793|   146k|    }
_RNvXs8_NtCs4WjTcpTVJQo_5oxttl5lexerNtB5_11N3LexerModeNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqB7_:
   31|   412k|#[derive(Eq, PartialEq)]
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer22is_possible_pn_chars_u:
  887|  25.1M|    fn is_possible_pn_chars_u(c: char) -> bool {
  888|  25.1M|        Self::is_possible_pn_chars_base(c) || c == '_'
  889|  25.1M|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer27recognize_optional_pn_local:
  335|   436k|    fn recognize_optional_pn_local(
  336|   436k|        data: &[u8],
  337|   436k|        is_ending: bool,
  338|   436k|    ) -> Option<(usize, Result<(Cow<'_, str>, bool), TokenRecognizerError>)> {
  339|   436k|        // [168s] 	PN_LOCAL 	::= 	(PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
  340|   436k|        let mut i = 0;
  341|   436k|        let mut buffer = None; // Buffer if there are some escaped characters
  342|   436k|        let mut position_that_is_already_in_buffer = 0;
  343|   436k|        let mut might_be_invalid_iri = false;
  344|       |        loop {
  345|  4.11M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  346|  3.86M|                match r {
  347|  3.84M|                    Ok((c, consumed)) => {
  348|  3.84M|                        if c == '%' {
  349|  28.9k|                            i += 1;
  350|  28.9k|                            let a = char::from(*data.get(i)?);
  351|  11.4k|                            i += 1;
  352|  11.4k|                            let b = char::from(*data.get(i)?);
  353|  4.88k|                            if !a.is_ascii_hexdigit() || !b.is_ascii_hexdigit() {
  354|  1.90k|                                return Some((i + 1, Err((
  355|  1.90k|                                    i - 2..=i, format!("escapes in IRIs should be % followed by two hexadecimal characters, found '%{a}{b}'")
  356|  1.90k|                                ).into())));
  357|  2.97k|                            }
  358|  2.97k|                            i += 1;
  359|  3.81M|                        } else if c == '\\' {
  360|  80.4k|                            i += 1;
  361|  80.4k|                            let a = char::from(*data.get(i)?);
  362|  7.41k|                            if matches!(
  363|  75.0k|                                a,
  364|       |                                '_' | '~'
  365|       |                                    | '.'
  366|       |                                    | '-'
  367|       |                                    | '!'
  368|       |                                    | '$'
  369|       |                                    | '&'
  370|       |                                    | '\''
  371|       |                                    | '('
  372|       |                                    | ')'
  373|       |                                    | '*'
  374|       |                                    | '+'
  375|       |                                    | ','
  376|       |                                    | ';'
  377|       |                                    | '='
  378|  67.6k|                            ) {
  379|  67.6k|                                // ok to escape
  380|  67.6k|                            } else if matches!(a, '/' | '?' | '#' | '@' | '%') {
  381|  6.81k|                                // ok to escape but requires IRI validation
  382|  6.81k|                                might_be_invalid_iri = true;
  383|  6.81k|                            } else {
  384|    602|                                return Some((i + 1, Err((
  385|    602|                                    i..=i, format!("The character that are allowed to be escaped in IRIs are _~.-!$&'()*+,;=/?#@%, found '{a}'")
  386|    602|                                ).into())));
  387|       |                            }
  388|  74.4k|                            let buffer = buffer.get_or_insert_with(String::new);
  389|  74.4k|                            // We add the missing bytes
  390|  74.4k|                            if i - position_that_is_already_in_buffer > 1 {
  391|  49.8k|                                buffer.push_str(
  392|  49.8k|                                    match str_from_utf8(
  393|  49.8k|                                        &data[position_that_is_already_in_buffer..i - 1],
  394|  49.8k|                                        position_that_is_already_in_buffer..i - 1,
  395|  49.8k|                                    ) {
  396|  49.8k|                                        Ok(data) => data,
  397|      0|                                        Err(e) => return Some((i, Err(e))),
  398|       |                                    },
  399|       |                                )
  400|  24.5k|                            }
  401|  74.4k|                            buffer.push(a);
  402|  74.4k|                            i += 1;
  403|  74.4k|                            position_that_is_already_in_buffer = i;
  404|  3.73M|                        } else if i == 0 {
  405|   290k|                            if !(Self::is_possible_pn_chars_u(c) || c == ':' || c.is_ascii_digit())
  406|       |                            {
  407|  61.0k|                                return Some((0, Ok((Cow::Borrowed(""), false))));
  408|   229k|                            }
  409|   229k|                            might_be_invalid_iri |=
  410|   229k|                                Self::is_possible_pn_chars_base_but_not_valid_iri(c) || c == ':';
  411|   229k|                            i += consumed;
  412|  3.44M|                        } else if Self::is_possible_pn_chars(c) || c == ':' || c == '.' {
  413|       |                            might_be_invalid_iri |=
  414|  3.37M|                                Self::is_possible_pn_chars_base_but_not_valid_iri(c) || c == ':';
  415|  3.37M|                            i += consumed;
  416|       |                        } else {
  417|  74.0k|                            let buffer = if let Some(mut buffer) = buffer {
  418|  5.21k|                                buffer.push_str(
  419|  5.21k|                                    match str_from_utf8(
  420|  5.21k|                                        &data[position_that_is_already_in_buffer..i],
  421|  5.21k|                                        position_that_is_already_in_buffer..i,
  422|  5.21k|                                    ) {
  423|  5.21k|                                        Ok(data) => data,
  424|      0|                                        Err(e) => return Some((i, Err(e))),
  425|       |                                    },
  426|       |                                );
  427|       |                                // We do not include the last dot
  428|  6.75k|                                while buffer.ends_with('.') {
  429|  1.54k|                                    buffer.pop();
  430|  1.54k|                                    i -= 1;
  431|  1.54k|                                }
  432|  5.21k|                                Cow::Owned(buffer)
  433|       |                            } else {
  434|  68.8k|                                let mut data = match str_from_utf8(&data[..i], 0..i) {
  435|  68.8k|                                    Ok(data) => data,
  436|      0|                                    Err(e) => return Some((i, Err(e))),
  437|       |                                };
  438|       |                                // We do not include the last dot
  439|  87.4k|                                while let Some(d) = data.strip_suffix('.') {
  440|  18.6k|                                    data = d;
  441|  18.6k|                                    i -= 1;
  442|  18.6k|                                }
  443|  68.8k|                                Cow::Borrowed(data)
  444|       |                            };
  445|  74.0k|                            return Some((i, Ok((buffer, might_be_invalid_iri))));
  446|       |                        }
  447|       |                    }
  448|  12.7k|                    Err(e) => return Some((e.location.end, Err(e))),
  449|       |                }
  450|   257k|            } else if is_ending {
  451|  1.25k|                let buffer = if let Some(mut buffer) = buffer {
  452|       |                    // We do not include the last dot
  453|    248|                    while buffer.ends_with('.') {
  454|     58|                        buffer.pop();
  455|     58|                        i -= 1;
  456|     58|                    }
  457|    190|                    Cow::Owned(buffer)
  458|       |                } else {
  459|  1.06k|                    let mut data = match str_from_utf8(&data[..i], 0..i) {
  460|  1.06k|                        Ok(data) => data,
  461|      0|                        Err(e) => return Some((i, Err(e))),
  462|       |                    };
  463|       |                    // We do not include the last dot
  464|  2.02k|                    while let Some(d) = data.strip_suffix('.') {
  465|    958|                        data = d;
  466|    958|                        i -= 1;
  467|    958|                    }
  468|  1.06k|                    Cow::Borrowed(data)
  469|       |                };
  470|  1.25k|                return Some((i, Ok((buffer, might_be_invalid_iri))));
  471|       |            } else {
  472|   255k|                return None;
  473|       |            }
  474|       |        }
  475|   436k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer21recognize_long_string:
  594|   132k|    fn recognize_long_string(
  595|   132k|        data: &[u8],
  596|   132k|        delimiter: u8,
  597|   132k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  598|   132k|        // [24] 	STRING_LITERAL_LONG_SINGLE_QUOTE 	::= 	"'''" (("'" | "''")? ([^'\] | ECHAR | UCHAR))* "'''"
  599|   132k|        // [25] 	STRING_LITERAL_LONG_QUOTE 	::= 	'"""' (('"' | '""')? ([^"\] | ECHAR | UCHAR))* '"""'
  600|   132k|        let mut string = String::new();
  601|   132k|        let mut i = 3;
  602|       |        loop {
  603|   272k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  604|   215k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  605|   211k|                Ok(s) => string.push_str(s),
  606|  4.31k|                Err(e) => return Some((end, Err(e))),
  607|       |            };
  608|   211k|            i += end;
  609|   211k|            match data[i] {
  610|   211k|                c if c == delimiter => {
  611|   151k|                    if *data.get(i + 1)? == delimiter && *data.get(i + 2)? == delimiter {
  612|  55.9k|                        return Some((i + 3, Ok(N3Token::String(string))));
  613|  84.9k|                    }
  614|  84.9k|                    i += 1;
  615|  84.9k|                    string.push(char::from(delimiter));
  616|       |                }
  617|       |                b'\\' => {
  618|  60.0k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  619|  55.9k|                    i += additional + 1;
  620|  55.9k|                    match c {
  621|  54.6k|                        Ok(c) => {
  622|  54.6k|                            string.push(c);
  623|  54.6k|                        }
  624|  1.34k|                        Err(e) => return Some((i, Err(e))),
  625|       |                    }
  626|       |                }
  627|      0|                _ => unreachable!(),
  628|       |            }
  629|       |        }
  630|   132k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer3new:
  172|  68.0k|    pub fn new(mode: N3LexerMode) -> Self {
  173|  68.0k|        Self { mode }
  174|  68.0k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer26recognize_pname_or_keyword:
  227|  4.82M|    fn recognize_pname_or_keyword(
  228|  4.82M|        data: &[u8],
  229|  4.82M|        is_ending: bool,
  230|  4.82M|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  231|  4.82M|        // [139s] 	PNAME_NS 	::= 	PN_PREFIX? ':'
  232|  4.82M|        // [140s] 	PNAME_LN 	::= 	PNAME_NS PN_LOCAL
  233|  4.82M|
  234|  4.82M|        // [167s] 	PN_PREFIX 	::= 	PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
  235|  4.82M|        let mut i = 0;
  236|       |        loop {
  237|  12.0M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  238|  11.6M|                match r {
  239|  10.2M|                    Ok((c, consumed)) => {
  240|  10.2M|                        if c == ':' {
  241|   322k|                            i += consumed;
  242|   322k|                            break;
  243|  9.90M|                        } else if i == 0 {
  244|  3.21M|                            if !Self::is_possible_pn_chars_base(c) {
  245|  2.31M|                                return Some((
  246|  2.31M|                                    consumed,
  247|  2.31M|                                    Err((
  248|  2.31M|                                        0..consumed,
  249|  2.31M|                                        format!(
  250|  2.31M|                                            "'{c}' is not allowed at the beginning of a prefix name"
  251|  2.31M|                                        ),
  252|  2.31M|                                    )
  253|  2.31M|                                        .into()),
  254|  2.31M|                                ));
  255|   902k|                            }
  256|   902k|                            i += consumed;
  257|  6.69M|                        } else if Self::is_possible_pn_chars(c) || c == '.' {
  258|  6.35M|                            i += consumed;
  259|  6.35M|                        } else {
  260|   405k|                            while data[..i].ends_with(b".") {
  261|  67.4k|                                i -= 1;
  262|  67.4k|                            }
  263|   338k|                            return Some((
  264|   338k|                                i,
  265|   338k|                                str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  266|   338k|                            ));
  267|       |                        }
  268|       |                    }
  269|  1.41M|                    Err(e) => return Some((e.location.end, Err(e))),
  270|       |                }
  271|   436k|            } else if is_ending {
  272|  8.51k|                while data[..i].ends_with(b".") {
  273|  1.88k|                    i -= 1;
  274|  1.88k|                }
  275|  6.62k|                return Some(if i == 0 {
  276|  2.74k|                    (
  277|  2.74k|                        1,
  278|  2.74k|                        Err((0..1, format!("Unexpected byte {}", data[0])).into()),
  279|  2.74k|                    )
  280|       |                } else {
  281|  3.87k|                    (
  282|  3.87k|                        i,
  283|  3.87k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  284|  3.87k|                    )
  285|       |                });
  286|       |            } else {
  287|   429k|                return None;
  288|       |            }
  289|       |        }
  290|   322k|        let pn_prefix = match str_from_utf8(&data[..i - 1], 0..i - 1) {
  291|   322k|            Ok(pn_prefix) => pn_prefix,
  292|      0|            Err(e) => return Some((i, Err(e))),
  293|       |        };
  294|   322k|        if pn_prefix.ends_with('.') {
  295|    510|            return Some((
  296|    510|                i,
  297|    510|                Err((
  298|    510|                    0..i,
  299|    510|                    format!(
  300|    510|                        "'{pn_prefix}' is not a valid prefix: prefixes are not allowed to end with '.'"),
  301|    510|                )
  302|    510|                    .into()),
  303|    510|            ));
  304|   321k|        }
  305|       |
  306|   321k|        let (consumed, pn_local_result) = Self::recognize_optional_pn_local(&data[i..], is_ending)?;
  307|  89.1k|        Some((
  308|  89.1k|            consumed + i,
  309|  89.1k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  310|       |                prefix: pn_prefix,
  311|       |                local,
  312|       |                might_be_invalid_iri,
  313|  89.1k|            }),
  314|  89.1k|        ))
  315|  4.82M|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer18recognize_lang_tag:
  521|   124k|    fn recognize_lang_tag(
  522|   124k|        data: &[u8],
  523|   124k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  524|   124k|        // [144s] 	LANGTAG 	::= 	'@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
  525|   124k|        let mut is_last_block_empty = true;
  526|   965k|        for (i, c) in data[1..].iter().enumerate() {
  527|   965k|            if c.is_ascii_alphabetic() {
  528|   816k|                is_last_block_empty = false;
  529|   816k|            } else if i == 0 {
  530|  23.2k|                return Some((
  531|  23.2k|                    1,
  532|  23.2k|                    Err((1..2, "A language code should always start with a letter").into()),
  533|  23.2k|                ));
  534|   126k|            } else if is_last_block_empty {
  535|  1.23k|                return Some((i, Self::parse_lang_tag(&data[1..i], 1..i - 1)));
  536|   124k|            } else if *c == b'-' {
  537|  89.7k|                is_last_block_empty = true;
  538|  89.7k|            } else {
  539|  35.0k|                return Some((i + 1, Self::parse_lang_tag(&data[1..=i], 1..i)));
  540|       |            }
  541|       |        }
  542|  65.0k|        None
  543|   124k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer16recognize_escape:
  731|   696k|    fn recognize_escape(
  732|   696k|        data: &[u8],
  733|   696k|        position: usize,
  734|   696k|        with_echar: bool,
  735|   696k|    ) -> Option<(usize, Result<char, TokenRecognizerError>)> {
  736|   696k|        // [26] 	UCHAR 	::= 	'\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
  737|   696k|        // [159s] 	ECHAR 	::= 	'\' [tbnrf"'\]
  738|   696k|        match *data.get(1)? {
  739|   140k|            b'u' => match Self::recognize_hex_char(&data[2..], 4, 'u', position) {
  740|   138k|                Ok(c) => Some((5, Ok(c?))),
  741|  2.45k|                Err(e) => Some((5, Err(e))),
  742|       |            },
  743|  5.83k|            b'U' => match Self::recognize_hex_char(&data[2..], 8, 'u', position) {
  744|  1.24k|                Ok(c) => Some((9, Ok(c?))),
  745|  4.58k|                Err(e) => Some((9, Err(e))),
  746|       |            },
  747|  3.00k|            b't' if with_echar => Some((1, Ok('\t'))),
  748|  4.95k|            b'b' if with_echar => Some((1, Ok('\x08'))),
  749|  4.14k|            b'n' if with_echar => Some((1, Ok('\n'))),
  750|  1.25k|            b'r' if with_echar => Some((1, Ok('\r'))),
  751|  8.96k|            b'f' if with_echar => Some((1, Ok('\x0C'))),
  752|  5.89k|            b'"' if with_echar => Some((1, Ok('"'))),
  753|  2.31k|            b'\'' if with_echar => Some((1, Ok('\''))),
  754|   426k|            b'\\' if with_echar => Some((1, Ok('\\'))),
  755|  56.6k|            c => Some((
  756|  56.6k|                1,
  757|  56.6k|                Err((
  758|  56.6k|                    position..position + 2,
  759|  56.6k|                    format!("Unexpected escape character '\\{}'", char::from(c)),
  760|  56.6k|                )
  761|  56.6k|                    .into()),
  762|  56.6k|            )), //TODO: read until end of string
  763|       |        }
  764|   696k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer22recognize_unicode_char:
  795|  30.9M|    fn recognize_unicode_char(
  796|  30.9M|        data: &[u8],
  797|  30.9M|        position: usize,
  798|  30.9M|    ) -> Option<Result<(char, usize), TokenRecognizerError>> {
  799|  30.9M|        let mut code_point: u32;
  800|  30.9M|        let bytes_needed: usize;
  801|  30.9M|        let mut lower_boundary = 0x80;
  802|  30.9M|        let mut upper_boundary = 0xBF;
  803|       |
  804|  30.9M|        let byte = *data.first()?;
  805|  30.3M|        match byte {
  806|  30.3M|            0x00..=0x7F => return Some(Ok((char::from(byte), 1))),
  807|   853k|            0xC2..=0xDF => {
  808|   541k|                bytes_needed = 1;
  809|   541k|                code_point = u32::from(byte) & 0x1F;
  810|   541k|            }
  811|   312k|            0xE0..=0xEF => {
  812|   102k|                if byte == 0xE0 {
  813|  14.0k|                    lower_boundary = 0xA0;
  814|  88.7k|                }
  815|   102k|                if byte == 0xED {
  816|  10.2k|                    upper_boundary = 0x9F;
  817|  92.5k|                }
  818|   102k|                bytes_needed = 2;
  819|   102k|                code_point = u32::from(byte) & 0xF;
  820|       |            }
  821|   210k|            0xF0..=0xF4 => {
  822|  35.8k|                if byte == 0xF0 {
  823|  5.67k|                    lower_boundary = 0x90;
  824|  30.2k|                }
  825|  35.8k|                if byte == 0xF4 {
  826|  21.5k|                    upper_boundary = 0x8F;
  827|  21.5k|                }
  828|  35.8k|                bytes_needed = 3;
  829|  35.8k|                code_point = u32::from(byte) & 0x7;
  830|       |            }
  831|       |            _ => {
  832|   928k|                return Some(Err((
  833|   928k|                    position..=position,
  834|   928k|                    "Invalid UTF-8 character encoding",
  835|   928k|                )
  836|   928k|                    .into()))
  837|       |            }
  838|       |        }
  839|       |
  840|   696k|        for i in 1..=bytes_needed {
  841|   696k|            let byte = *data.get(i)?;
  842|   539k|            if byte < lower_boundary || upper_boundary < byte {
  843|   496k|                return Some(Err((
  844|   496k|                    position..=position + i,
  845|   496k|                    "Invalid UTF-8 character encoding",
  846|   496k|                )
  847|   496k|                    .into()));
  848|  42.1k|            }
  849|  42.1k|            lower_boundary = 0x80;
  850|  42.1k|            upper_boundary = 0xBF;
  851|  42.1k|            code_point = (code_point << 6) | (u32::from(byte) & 0x3F);
  852|       |        }
  853|       |
  854|  25.4k|        Some(
  855|  25.4k|            char::from_u32(code_point)
  856|  25.4k|                .map(|c| (c, bytes_needed + 1))
  857|  25.4k|                .ok_or_else(|| {
  858|       |                    (
  859|       |                        position..=position + bytes_needed,
  860|       |                        format!("The codepoint {code_point:X} is not a valid unicode character"),
  861|       |                    )
  862|       |                        .into()
  863|  25.4k|                }),
  864|  25.4k|        )
  865|  30.9M|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer18recognize_variable:
  317|   115k|    fn recognize_variable(
  318|   115k|        data: &[u8],
  319|   115k|        is_ending: bool,
  320|   115k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  321|       |        // [36] 	QUICK_VAR_NAME 	::= 	"?" PN_LOCAL
  322|   115k|        let (consumed, result) = Self::recognize_optional_pn_local(&data[1..], is_ending)?;
  323|  62.3k|        Some((
  324|  62.3k|            consumed + 1,
  325|  62.3k|            result.and_then(|(name, _)| {
  326|       |                if name.is_empty() {
  327|       |                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  328|       |                } else {
  329|       |                    Ok(N3Token::Variable(name))
  330|       |                }
  331|  62.3k|            }),
  332|  62.3k|        ))
  333|   115k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer43is_possible_pn_chars_base_but_not_valid_iri:
  898|  3.60M|    fn is_possible_pn_chars_base_but_not_valid_iri(c: char) -> bool {
  899|  3.60M|        matches!(c, '\u{FFF0}'..='\u{FFFD}')
  900|  3.60M|            || u32::from(c) % u32::from('\u{FFFE}') == 0
  901|  3.60M|            || u32::from(c) % u32::from('\u{FFFF}') == 0
  902|  3.60M|    }
_RNvNtCs4WjTcpTVJQo_5oxttl5lexer13str_from_utf8:
  927|  2.77M|fn str_from_utf8(data: &[u8], range: Range<usize>) -> Result<&str, TokenRecognizerError> {
  928|  2.77M|    str::from_utf8(data).map_err(|e| {
  929|       |        (
  930|       |            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  931|       |            format!("Invalid UTF-8: {e}"),
  932|       |        )
  933|       |            .into()
  934|  2.77M|    })
  935|  2.77M|}
_RNvXs2_NtCs4WjTcpTVJQo_5oxttl5lexerNtB5_7N3TokenNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqB7_:
   12|  5.48M|#[derive(Debug, PartialEq, Eq)]
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer25is_possible_pn_chars_base:
  868|  28.3M|    fn is_possible_pn_chars_base(c: char) -> bool {
  869|  28.3M|        matches!(c,
  870|  14.5M|        'A'..='Z'
  871|  9.92M|        | 'a'..='z'
  872|  24.8k|        | '\u{00C0}'..='\u{00D6}'
  873|  24.8k|        | '\u{00D8}'..='\u{00F6}'
  874|  24.8k|        | '\u{00F8}'..='\u{02FF}'
  875|  22.4k|        | '\u{0370}'..='\u{037D}'
  876|  22.4k|        | '\u{037F}'..='\u{1FFF}'
  877|  2.41k|        | '\u{200C}'..='\u{200D}'
  878|  2.41k|        | '\u{2070}'..='\u{218F}'
  879|  2.41k|        | '\u{2C00}'..='\u{2FEF}'
  880|  2.41k|        | '\u{3001}'..='\u{D7FF}'
  881|    552|        | '\u{F900}'..='\u{FDCF}'
  882|    439|        | '\u{FDF0}'..='\u{FFFD}'
  883|    437|        | '\u{10000}'..='\u{EFFFF}')
  884|  28.3M|    }

_RNvXNtCs4WjTcpTVJQo_5oxttl5terseNtB2_14TriGRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer13recognize_end:
  786|  68.0k|    fn recognize_end(
  787|  68.0k|        mut self,
  788|  68.0k|        _context: &mut TriGRecognizerContext,
  789|  68.0k|        results: &mut Vec<Self::Output>,
  790|  68.0k|        errors: &mut Vec<RuleRecognizerError>,
  791|  68.0k|    ) {
  792|  68.0k|        match &*self.stack {
  793|  68.0k|            [] | [TriGState::TriGDoc] => {
  794|       |                debug_assert!(
  795|      0|                    self.cur_subject.is_empty(),
  796|      0|                    "The cur_subject stack must be empty if the state stack is empty"
  797|       |                );
  798|       |                debug_assert!(
  799|      0|                    self.cur_predicate.is_empty(),
  800|      0|                    "The cur_predicate stack must be empty if the state stack is empty"
  801|       |                );
  802|       |                debug_assert!(
  803|      0|                    self.cur_object.is_empty(),
  804|      0|                    "The cur_object stack must be empty if the state stack is empty"
  805|       |                );
  806|       |            }
  807|    452|            [.., TriGState::LiteralPossibleSuffix { value, emit: true }] => {
  808|    452|                self.cur_object
  809|    452|                    .push(Literal::new_simple_literal(value).into());
  810|    452|                self.emit_quad(results);
  811|    452|                errors.push("Triples should be followed by a dot".into())
  812|       |            }
  813|  1.05k|            _ => errors.push("Unexpected end".into()), //TODO
  814|       |        }
  815|  68.0k|    }
_RNvXNtCs4WjTcpTVJQo_5oxttl5terseNtB2_14TriGRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer14recognize_next:
   46|  7.96M|    fn recognize_next(
   47|  7.96M|        mut self,
   48|  7.96M|        token: N3Token<'_>,
   49|  7.96M|        context: &mut TriGRecognizerContext,
   50|  7.96M|        results: &mut Vec<Quad>,
   51|  7.96M|        errors: &mut Vec<RuleRecognizerError>,
   52|  7.96M|    ) -> Self {
   53|  7.96M|        if let Some(rule) = self.stack.pop() {
   54|  5.50M|            match rule {
   55|       |                // [1g] 	trigDoc 	::= 	(directive | block)*
   56|       |                // [2g] 	block 	::= 	triplesOrGraph | wrappedGraph | triples2 | "GRAPH" labelOrSubject wrappedGraph
   57|       |                // [3] 	directive 	::= 	prefixID | base | sparqlPrefix | sparqlBase
   58|       |                // [4] 	prefixID 	::= 	'@prefix' PNAME_NS IRIREF '.'
   59|       |                // [5] 	base 	::= 	'@base' IRIREF '.'
   60|       |                // [5s] 	sparqlPrefix 	::= 	"PREFIX" PNAME_NS IRIREF
   61|       |                // [6s] 	sparqlBase 	::= 	"BASE" IRIREF
   62|       |                TriGState::TriGDoc => {
   63|   714k|                    self.cur_graph = GraphName::DefaultGraph;
   64|   714k|                    self.stack.push(TriGState::TriGDoc);
   65|  28.1k|                    match token {
   66|  20.5k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("base") => {
   67|    458|                            self.stack.push(TriGState::BaseExpectIri);
   68|    458|                            self
   69|       |                        }
   70|  20.1k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("prefix") => {
   71|    194|                            self.stack.push(TriGState::PrefixExpectPrefix);
   72|    194|                            self
   73|       |                        }
   74|  4.00k|                        N3Token::LangTag("prefix") => {
   75|    758|                            self.stack.push(TriGState::ExpectDot);
   76|    758|                            self.stack.push(TriGState::PrefixExpectPrefix);
   77|    758|                            self
   78|       |                        }
   79|  3.24k|                        N3Token::LangTag("base") => {
   80|     28|                            self.stack.push(TriGState::ExpectDot);
   81|     28|                            self.stack.push(TriGState::BaseExpectIri);
   82|     28|                            self
   83|       |                        }
   84|  19.9k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("graph") && context.with_graph_name => {
   85|      0|                            self.stack.push(TriGState::WrappedGraph);
   86|      0|                            self.stack.push(TriGState::GraphName);
   87|      0|                            self
   88|       |                        }
   89|   323k|                        N3Token::Punctuation("{") if context.with_graph_name => {
   90|  8.27k|                            self.stack.push(TriGState::WrappedGraph);
   91|  8.27k|                            self.recognize_next(token, context,results, errors)
   92|       |                        }
   93|       |                        _ => {
   94|   704k|                            self.stack.push(TriGState::TriplesOrGraph);
   95|   704k|                            self.recognize_next(token, context,results, errors)
   96|       |                        }
   97|       |                    }
   98|       |                },
   99|       |                TriGState::ExpectDot => {
  100|   280k|                    self.cur_subject.pop();
  101|   280k|                    if token == N3Token::Punctuation(".") {
  102|   236k|                        self
  103|       |                    } else  {
  104|  44.6k|                        errors.push("A dot is expected at the end of statements".into());
  105|  44.6k|                        self.recognize_next(token, context,results, errors)
  106|       |                    }
  107|       |                },
  108|    458|                TriGState::BaseExpectIri => match token {
  109|     82|                    N3Token::IriRef(iri) => {
  110|     82|                        context.lexer_options.base_iri = Some(iri);
  111|     82|                        self
  112|       |                    }
  113|    376|                    _ => self.error(errors, "The BASE keyword should be followed by an IRI"),
  114|       |                },
  115|    498|                TriGState::PrefixExpectPrefix => match token {
  116|    498|                    N3Token::PrefixedName { prefix, local, .. } if local.is_empty() => {
  117|    322|                        self.stack.push(TriGState::PrefixExpectIri { name: prefix.to_owned() });
  118|    322|                        self
  119|       |                    }
  120|       |                    _ => {
  121|    384|                        self.error(errors, "The PREFIX keyword should be followed by a prefix like 'ex:'")
  122|       |                    }
  123|       |                },
  124|    288|                TriGState::PrefixExpectIri { name } => match token {
  125|      0|                    N3Token::IriRef(iri) => {
  126|      0|                        context.prefixes.insert(name, iri);
  127|      0|                        self
  128|       |                    }
  129|    288|                    _ => self.error(errors, "The PREFIX declaration should be followed by a prefix and its value as an IRI"),
  130|       |                },
  131|       |                // [3g] 	triplesOrGraph 	::= 	labelOrSubject ( wrappedGraph | predicateObjectList '.' ) | quotedTriple predicateObjectList '.'
  132|       |                // [4g] 	triples2 	::= 	blankNodePropertyList predicateObjectList? '.' | collection predicateObjectList '.'
  133|  1.81k|                TriGState::TriplesOrGraph => match token {
  134|   129k|                    N3Token::IriRef(iri) => {
  135|   129k|                        self.stack.push(TriGState::WrappedGraphOrPredicateObjectList {
  136|   129k|                            term: NamedNode::from(iri).into()
  137|   129k|                        });
  138|   129k|                        self
  139|       |                    }
  140|  29.2k|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  141|      0|                        Ok(t) => {
  142|      0|                            self.stack.push(TriGState::WrappedGraphOrPredicateObjectList {
  143|      0|                                term: t.into()
  144|      0|                            });
  145|      0|                            self
  146|       |                        },
  147|  29.2k|                        Err(e) => self.error(errors, e)
  148|       |                    }
  149|   197k|                    N3Token::BlankNodeLabel(label) => {
  150|   197k|                        self.stack.push(TriGState::WrappedGraphOrPredicateObjectList {
  151|   197k|                            term: BlankNode::new_unchecked(label).into()
  152|   197k|                        });
  153|   197k|                        self
  154|       |                    }
  155|   314k|                    N3Token::Punctuation("[") => {
  156|  22.7k|                        self.stack.push(TriGState::WrappedGraphBlankNodePropertyListCurrent);
  157|  22.7k|                        self
  158|       |                    }
  159|   292k|                    N3Token::Punctuation("(") => {
  160|  55.6k|                        self.stack.push(TriGState::ExpectDot);
  161|  55.6k|                        self.stack.push(TriGState::PredicateObjectList);
  162|  55.6k|                        self.stack.push(TriGState::SubjectCollectionBeginning);
  163|  55.6k|                        self
  164|       |                    }
  165|       |                    #[cfg(feature = "rdf-star")]
  166|   236k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  167|  1.81k|                        self.stack.push(TriGState::ExpectDot);
  168|  1.81k|                        self.stack.push(TriGState::PredicateObjectList);
  169|  1.81k|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  170|  1.81k|                        self.stack.push(TriGState::QuotedObject);
  171|  1.81k|                        self.stack.push(TriGState::Verb);
  172|  1.81k|                        self.stack.push(TriGState::QuotedSubject);
  173|  1.81k|                        self
  174|       |                    }
  175|       |                    _ => {
  176|   269k|                        self.error(errors, "TOKEN is not a valid subject or graph name")
  177|       |                    }
  178|       |                }
  179|   297k|                TriGState::WrappedGraphOrPredicateObjectList { term } => {
  180|   297k|                    if token == N3Token::Punctuation("{") && context.with_graph_name {
  181|  4.72k|                        self.cur_graph = term.into();
  182|  4.72k|                        self.stack.push(TriGState::WrappedGraph);
  183|   293k|                    } else {
  184|   293k|                        self.cur_subject.push(term.into());
  185|   293k|                        self.stack.push(TriGState::ExpectDot);
  186|   293k|                        self.stack.push(TriGState::PredicateObjectList);
  187|   293k|                    }
  188|   297k|                    self.recognize_next(token, context,results, errors)
  189|       |                }
  190|  19.4k|                TriGState::WrappedGraphBlankNodePropertyListCurrent => if token == N3Token::Punctuation("]") {
  191|  1.35k|                    self.stack.push(TriGState::WrappedGraphOrPredicateObjectList {
  192|  1.35k|                        term: BlankNode::default().into()
  193|  1.35k|                    });
  194|  1.35k|                    self
  195|       |                } else {
  196|  18.0k|                    self.cur_subject.push(BlankNode::default().into());
  197|  18.0k|                    self.stack.push(TriGState::ExpectDot);
  198|  18.0k|                    self.stack.push(TriGState::SubjectBlankNodePropertyListEnd);
  199|  18.0k|                    self.stack.push(TriGState::PredicateObjectList);
  200|  18.0k|                    self.recognize_next(token, context,results, errors)
  201|       |                }
  202|  1.61k|                TriGState::SubjectBlankNodePropertyListEnd => if token == N3Token::Punctuation("]") {
  203|     40|                    self.stack.push(TriGState::SubjectBlankNodePropertyListAfter  );
  204|     40|                    self
  205|       |                } else {
  206|  1.57k|                    errors.push("blank node property lists should end with a ']'".into());
  207|  1.57k|                    self.stack.push(TriGState::SubjectBlankNodePropertyListAfter );
  208|  1.57k|                    self.recognize_next(token, context,results, errors)
  209|       |                }
  210|  1.61k|                TriGState::SubjectBlankNodePropertyListAfter => if matches!(token, N3Token::Punctuation("." | "}")) {
  211|      6|                    self.recognize_next(token, context,results, errors)
  212|       |                } else {
  213|  1.60k|                    self.stack.push(TriGState::PredicateObjectList);
  214|  1.60k|                    self.recognize_next(token, context,results, errors)
  215|       |                }
  216|       |                TriGState::SubjectCollectionBeginning => {
  217|  53.1k|                    if let N3Token::Punctuation(")") = token {
  218|    204|                        self.cur_subject.push(rdf::NIL.into());
  219|    204|                        self
  220|       |                    } else {
  221|  52.9k|                        let root = BlankNode::default();
  222|  52.9k|                        self.cur_subject.push(root.clone().into());
  223|  52.9k|                        self.cur_subject.push(root.into());
  224|  52.9k|                        self.cur_predicate.push(rdf::FIRST.into());
  225|  52.9k|                        self.stack.push(TriGState::SubjectCollectionPossibleEnd);
  226|  52.9k|                        self.stack.push(TriGState::Object);
  227|  52.9k|                        self.recognize_next(token, context,results, errors)
  228|       |                    }
  229|       |                },
  230|       |                TriGState::SubjectCollectionPossibleEnd => {
  231|  22.9k|                    let old = self.cur_subject.pop().unwrap();
  232|  22.9k|                    self.cur_object.pop();
  233|  22.9k|                    if let N3Token::Punctuation(")") = token {
  234|    754|                        self.cur_predicate.pop();
  235|    754|                        results.push(Quad::new(
  236|    754|                            old,
  237|    754|                            rdf::REST,
  238|    754|                            rdf::NIL,
  239|    754|                            self.cur_graph.clone()
  240|    754|                        ));
  241|    754|                        self
  242|       |                    } else {
  243|  22.1k|                        let new = BlankNode::default();
  244|  22.1k|                        results.push(Quad::new(
  245|  22.1k|                            old,
  246|  22.1k|                            rdf::REST,
  247|  22.1k|                            new.clone(),
  248|  22.1k|                            self.cur_graph.clone()
  249|  22.1k|                        ));
  250|  22.1k|                        self.cur_subject.push(new.into());
  251|  22.1k|                        self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  252|  22.1k|                        self.stack.push(TriGState::Object);
  253|  22.1k|                        self.recognize_next(token, context,results, errors)
  254|       |                    }
  255|       |                }
  256|       |                // [5g] 	wrappedGraph 	::= 	'{' triplesBlock? '}'
  257|       |                // [6g] 	triplesBlock 	::= 	triples ('.' triplesBlock?)?
  258|  12.9k|                TriGState::WrappedGraph => if token == N3Token::Punctuation("{") {
  259|  12.9k|                    self.stack.push(TriGState::WrappedGraphPossibleEnd);
  260|  12.9k|                    self.stack.push(TriGState::Triples);
  261|  12.9k|                    self
  262|       |                } else {
  263|      0|                    self.error(errors, "The GRAPH keyword should be followed by a graph name and a value in '{'")
  264|       |                },
  265|       |                TriGState::WrappedGraphPossibleEnd => {
  266|  47.3k|                    self.cur_subject.pop();
  267|  47.3k|                    match token {
  268|  46.9k|                        N3Token::Punctuation("}") => {
  269|  1.36k|                            self
  270|       |                        }
  271|  45.5k|                        N3Token::Punctuation(".") => {
  272|  45.4k|                            self.stack.push(TriGState::WrappedGraphPossibleEnd);
  273|  45.4k|                            self.stack.push(TriGState::Triples);
  274|  45.4k|                            self
  275|       |                        }
  276|       |                       _ => {
  277|    512|                            errors.push("A '}' or a '.' is expected at the end of a graph block".into());
  278|    512|                            self.recognize_next(token, context,results, errors)
  279|       |                        }
  280|       |                    }
  281|       |                }
  282|       |                // [6] 	triples 	::= 	subject predicateObjectList | blankNodePropertyList predicateObjectList?
  283|       |                // [10] 	subject 	::= 	iri | BlankNode | collection | quotedTriple
  284|    156|                TriGState::Triples => match token {
  285|  8.06k|                    N3Token::Punctuation("}") => {
  286|  1.36k|                        self.recognize_next(token, context,results, errors) // Early end
  287|       |                    },
  288|  6.70k|                    N3Token::Punctuation("[") => {
  289|  1.18k|                        self.cur_subject.push(BlankNode::default().into());
  290|  1.18k|                        self.stack.push(TriGState::TriplesBlankNodePropertyListCurrent);
  291|  1.18k|                        self
  292|       |                    }
  293|  1.26k|                    N3Token::IriRef(iri) => {
  294|  1.26k|                        self.cur_subject.push(NamedNode::from(iri).into());
  295|  1.26k|                        self.stack.push(TriGState::PredicateObjectList);
  296|  1.26k|                        self
  297|       |                    }
  298|  1.34k|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  299|      0|                        Ok(t) => {
  300|      0|                            self.cur_subject.push(t.into());
  301|      0|                            self.stack.push(TriGState::PredicateObjectList);
  302|      0|                            self
  303|       |                        },
  304|  1.34k|                        Err(e) => self.error(errors, e)
  305|       |                    }
  306|  45.3k|                    N3Token::BlankNodeLabel(label) => {
  307|  45.3k|                        self.cur_subject.push(BlankNode::new_unchecked(label).into());
  308|  45.3k|                        self.stack.push(TriGState::PredicateObjectList);
  309|  45.3k|                        self
  310|       |                    }
  311|  5.52k|                    N3Token::Punctuation("(") => {
  312|  2.54k|                        self.stack.push(TriGState::PredicateObjectList);
  313|  2.54k|                        self.stack.push(TriGState::SubjectCollectionBeginning);
  314|  2.54k|                        self
  315|       |                    }
  316|       |                    #[cfg(feature = "rdf-star")]
  317|  2.98k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  318|    156|                        self.stack.push(TriGState::PredicateObjectList);
  319|    156|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  320|    156|                        self.stack.push(TriGState::QuotedObject);
  321|    156|                        self.stack.push(TriGState::Verb);
  322|    156|                        self.stack.push(TriGState::QuotedSubject);
  323|    156|                        self
  324|       |                    }
  325|       |                   _ => {
  326|  3.55k|                        self.error(errors, "TOKEN is not a valid RDF subject")
  327|       |                    }
  328|       |                },
  329|  1.16k|                TriGState::TriplesBlankNodePropertyListCurrent => if token == N3Token::Punctuation("]") {
  330|    182|                    self.stack.push(TriGState::PredicateObjectList);
  331|    182|                    self
  332|       |                } else {
  333|    984|                    self.stack.push(TriGState::SubjectBlankNodePropertyListEnd);
  334|    984|                    self.stack.push(TriGState::PredicateObjectList);
  335|    984|                    self.recognize_next(token, context,results, errors)
  336|       |                }
  337|       |                // [7g] 	labelOrSubject 	::= 	iri | BlankNode
  338|      0|                TriGState::GraphName => match token {
  339|      0|                    N3Token::IriRef(iri) => {
  340|      0|                        self.cur_graph = NamedNode::from(iri).into();
  341|      0|                        self
  342|       |                    }
  343|      0|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  344|      0|                        Ok(t) => {
  345|      0|                            self.cur_graph = t.into();
  346|      0|                            self
  347|       |                        },
  348|      0|                        Err(e) => self.error(errors, e)
  349|       |                    }
  350|      0|                    N3Token::BlankNodeLabel(label) => {
  351|      0|                        self.cur_graph = BlankNode::new_unchecked(label).into();
  352|      0|                        self
  353|       |                    }
  354|      0|                    N3Token::Punctuation("[") => {
  355|      0|                        self.stack.push(TriGState::GraphNameAnonEnd);
  356|      0|                        self
  357|       |                    }
  358|       |                   _ => {
  359|      0|                        self.error(errors, "TOKEN is not a valid graph name")
  360|       |                    }
  361|       |                }
  362|      0|                TriGState::GraphNameAnonEnd => if token == N3Token::Punctuation("]") {
  363|      0|                    self.cur_graph = BlankNode::default().into();
  364|      0|                    self
  365|       |                } else {
  366|      0|                    self.error(errors, "Anonymous blank node with a property list are not allowed as graph name")
  367|       |                }
  368|       |                // [7] 	predicateObjectList 	::= 	verb objectList (';' (verb objectList)?)*
  369|       |                TriGState::PredicateObjectList => {
  370|   362k|                    self.stack.push(TriGState::PredicateObjectListEnd);
  371|   362k|                    self.stack.push(TriGState::ObjectsList);
  372|   362k|                    self.stack.push(TriGState::Verb);
  373|   362k|                    self.recognize_next(token, context,results, errors)
  374|       |                },
  375|       |                TriGState::PredicateObjectListEnd => {
  376|   363k|                    self.cur_predicate.pop();
  377|   363k|                    if token == N3Token::Punctuation(";") {
  378|  35.0k|                        self.stack.push(TriGState::PredicateObjectListPossibleContinuation);
  379|  35.0k|                        self
  380|       |                    } else {
  381|   328k|                        self.recognize_next(token, context,results, errors)
  382|       |                    }
  383|       |                },
  384|  36.1k|                TriGState::PredicateObjectListPossibleContinuation => if token == N3Token::Punctuation(";") {
  385|  1.13k|                    self.stack.push(TriGState::PredicateObjectListPossibleContinuation);
  386|  1.13k|                    self
  387|  35.0k|                } else if matches!(token, N3Token::Punctuation("." | "}" | "]")) {
  388|    154|                    self.recognize_next(token, context,results, errors)
  389|       |                } else {
  390|  34.8k|                    self.stack.push(TriGState::PredicateObjectListEnd);
  391|  34.8k|                    self.stack.push(TriGState::ObjectsList);
  392|  34.8k|                    self.stack.push(TriGState::Verb);
  393|  34.8k|                    self.recognize_next(token, context,results, errors)
  394|       |                },
  395|       |                // [8] 	objectList 	::= 	object annotation? ( ',' object annotation? )*
  396|       |                // [30t] 	annotation 	::= 	'{|' predicateObjectList '|}'
  397|       |                TriGState::ObjectsList => {
  398|   374k|                    self.stack.push(TriGState::ObjectsListEnd);
  399|   374k|                    self.stack.push(TriGState::Object);
  400|   374k|                    self.recognize_next(token, context,results, errors)
  401|       |                }
  402|       |                TriGState::ObjectsListEnd => {
  403|   385k|                    match token {
  404|   344k|                        N3Token::Punctuation(",") => {
  405|  21.7k|                            self.cur_object.pop();
  406|  21.7k|                            self.stack.push(TriGState::ObjectsListEnd);
  407|  21.7k|                            self.stack.push(TriGState::Object);
  408|  21.7k|                            self
  409|       |                        },
  410|       |                        #[cfg(feature = "rdf-star")]
  411|   322k|                        N3Token::Punctuation("{|") => {
  412|      0|                            let triple = Triple::new(
  413|      0|                                self.cur_subject.last().unwrap().clone(),
  414|      0|                                self.cur_predicate.last().unwrap().clone(),
  415|      0|                                self.cur_object.pop().unwrap()
  416|      0|                            );
  417|      0|                            self.cur_subject.push(triple.into());
  418|      0|                            self.stack.push(TriGState::AnnotationEnd);
  419|      0|                            self.stack.push(TriGState::PredicateObjectList);
  420|      0|                            self
  421|       |                        }
  422|       |                       _ => {
  423|   363k|                            self.cur_object.pop();
  424|   363k|                            self.recognize_next(token, context,results, errors)
  425|       |                        }
  426|       |                    }
  427|       |                },
  428|       |                #[cfg(feature = "rdf-star")]
  429|       |                TriGState::AnnotationEnd => {
  430|      0|                    self.cur_subject.pop();
  431|      0|                    self.stack.push(TriGState::ObjectsListAfterAnnotation);
  432|      0|                    if token == N3Token::Punctuation("|}") {
  433|      0|                        self
  434|       |                    } else {
  435|      0|                        self.error(errors, "Annotations should end with '|}'")
  436|       |                    }
  437|       |                },
  438|       |                #[cfg(feature = "rdf-star")]
  439|      0|                TriGState::ObjectsListAfterAnnotation => if token == N3Token::Punctuation(",") {
  440|      0|                    self.stack.push(TriGState::ObjectsListEnd);
  441|      0|                    self.stack.push(TriGState::Object);
  442|      0|                    self
  443|       |                } else {
  444|      0|                    self.recognize_next(token, context,results, errors)
  445|       |                },
  446|       |                // [9] 	verb 	::= 	predicate | 'a'
  447|       |                // [11] 	predicate 	::= 	iri
  448|   398k|                TriGState::Verb => match token {
  449|  18.7k|                    N3Token::PlainKeyword("a") => {
  450|  2.62k|                        self.cur_predicate.push(rdf::TYPE.into());
  451|  2.62k|                        self
  452|       |                    }
  453|   372k|                    N3Token::IriRef(iri) => {
  454|   372k|                        self.cur_predicate.push(NamedNode::from(iri));
  455|   372k|                        self
  456|       |                    }
  457|    576|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  458|      0|                        Ok(t) => {
  459|      0|                            self.cur_predicate.push(t);
  460|      0|                            self
  461|       |                        },
  462|    576|                        Err(e) => self.error(errors, e)
  463|       |                    }
  464|       |                   _ => {
  465|  22.3k|                        self.error(errors, "TOKEN is not a valid predicate")
  466|       |                    }
  467|       |                }
  468|       |                // [12] 	object 	::= 	iri | BlankNode | collection | blankNodePropertyList | literal | quotedTriple
  469|       |                // [13] 	literal 	::= 	RDFLiteral | NumericLiteral | BooleanLiteral
  470|       |                // [14] 	blank 	::= 	BlankNode | collection
  471|       |                // [15] 	blankNodePropertyList 	::= 	'[' predicateObjectList ']'
  472|       |                // [16] 	collection 	::= 	'(' object* ')'
  473|       |                // [17] 	NumericLiteral 	::= 	INTEGER | DECIMAL | DOUBLE
  474|       |                // [128s] 	RDFLiteral 	::= 	String (LANGTAG | '^^' iri)?
  475|       |                // [133s] 	BooleanLiteral 	::= 	'true' | 'false'
  476|       |                // [18] 	String 	::= 	STRING_LITERAL_QUOTE | STRING_LITERAL_SINGLE_QUOTE | STRING_LITERAL_LONG_SINGLE_QUOTE | STRING_LITERAL_LONG_QUOTE
  477|       |                // [135s] 	iri 	::= 	IRIREF | PrefixedName
  478|       |                // [136s] 	PrefixedName 	::= 	PNAME_LN | PNAME_NS
  479|       |                // [137s] 	BlankNode 	::= 	BLANK_NODE_LABEL | ANON
  480|  4.02k|                TriGState::Object => match token {
  481|  30.5k|                    N3Token::IriRef(iri) => {
  482|  30.5k|                        self.cur_object.push(NamedNode::from(iri).into());
  483|  30.5k|                        self.emit_quad(results);
  484|  30.5k|                        self
  485|       |                    }
  486|  1.25k|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  487|      0|                        Ok(t) => {
  488|      0|                            self.cur_object.push(t.into());
  489|      0|                            self.emit_quad(results);
  490|      0|                            self
  491|       |                        },
  492|  1.25k|                        Err(e) => self.error(errors, e)
  493|       |                    }
  494|   201k|                    N3Token::BlankNodeLabel(label) => {
  495|   201k|                        self.cur_object.push(BlankNode::new_unchecked(label).into());
  496|   201k|                        self.emit_quad(results);
  497|   201k|                        self
  498|       |                    }
  499|   343k|                    N3Token::Punctuation("[") => {
  500|  3.07k|                        self.stack.push(TriGState::ObjectBlankNodePropertyListCurrent);
  501|  3.07k|                        self
  502|       |                    }
  503|   340k|                    N3Token::Punctuation("(") => {
  504|   330k|                        self.stack.push(TriGState::ObjectCollectionBeginning);
  505|   330k|                        self
  506|       |                    }
  507|  76.0k|                    N3Token::String(value) => {
  508|  76.0k|                        self.stack.push(TriGState::LiteralPossibleSuffix { value, emit: true });
  509|  76.0k|                        self
  510|       |                    }
  511|   122k|                    N3Token::Integer(v) => {
  512|   122k|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::INTEGER).into());
  513|   122k|                        self.emit_quad(results);
  514|   122k|                        self
  515|       |                    }
  516|  11.8k|                    N3Token::Decimal(v) => {
  517|  11.8k|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
  518|  11.8k|                        self.emit_quad(results);
  519|  11.8k|                        self
  520|       |                    }
  521|  52.2k|                    N3Token::Double(v) => {
  522|  52.2k|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
  523|  52.2k|                        self.emit_quad(results);
  524|  52.2k|                        self
  525|       |                    }
  526|  5.64k|                    N3Token::PlainKeyword("true") => {
  527|    504|                        self.cur_object.push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
  528|    504|                        self.emit_quad(results);
  529|    504|                        self
  530|       |                    }
  531|  5.13k|                    N3Token::PlainKeyword("false") => {
  532|    597|                        self.cur_object.push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
  533|    597|                        self.emit_quad(results);
  534|    597|                        self
  535|       |                    }
  536|       |                    #[cfg(feature = "rdf-star")]
  537|  10.1k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  538|  4.02k|                        self.stack.push(TriGState::ObjectQuotedTripleEnd { emit: true });
  539|  4.02k|                        self.stack.push(TriGState::QuotedObject);
  540|  4.02k|                        self.stack.push(TriGState::Verb);
  541|  4.02k|                        self.stack.push(TriGState::QuotedSubject);
  542|  4.02k|                        self
  543|       |                    }
  544|       |                   _ => {
  545|  11.0k|                        self.error(errors, "TOKEN is not a valid RDF object")
  546|       |                    }
  547|       |
  548|       |                }
  549|  2.19k|                TriGState::ObjectBlankNodePropertyListCurrent => if token == N3Token::Punctuation("]") {
  550|    994|                    self.cur_object.push(BlankNode::default().into());
  551|    994|                    self.emit_quad(results);
  552|    994|                    self
  553|       |                } else {
  554|  1.19k|                    self.cur_subject.push(BlankNode::default().into());
  555|  1.19k|                    self.stack.push(TriGState::ObjectBlankNodePropertyListEnd);
  556|  1.19k|                    self.stack.push(TriGState::PredicateObjectList);
  557|  1.19k|                    self.recognize_next(token, context,results, errors)
  558|       |                }
  559|    142|                TriGState::ObjectBlankNodePropertyListEnd => if token == N3Token::Punctuation("]") {
  560|     42|                    self.cur_object.push(self.cur_subject.pop().unwrap().into());
  561|     42|                    self.emit_quad(results);
  562|     42|                    self
  563|       |                } else {
  564|    100|                    self.error(errors, "blank node property lists should end with a ']'")
  565|       |                }
  566|   324k|                TriGState::ObjectCollectionBeginning => if let  N3Token::Punctuation(")") = token {
  567|  2.45k|                    self.cur_object.push(rdf::NIL.into());
  568|  2.45k|                    self.emit_quad(results);
  569|  2.45k|                    self
  570|       |                } else {
  571|   322k|                    let root = BlankNode::default();
  572|   322k|                    self.cur_object.push(root.clone().into());
  573|   322k|                    self.emit_quad(results);
  574|   322k|                    self.cur_subject.push(root.into());
  575|   322k|                    self.cur_predicate.push(rdf::FIRST.into());
  576|   322k|                    self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  577|   322k|                    self.stack.push(TriGState::Object);
  578|   322k|                    self.recognize_next(token, context,results, errors)
  579|       |                },
  580|       |                TriGState::ObjectCollectionPossibleEnd => {
  581|  84.7k|                    let old = self.cur_subject.pop().unwrap();
  582|  84.7k|                    self.cur_object.pop();
  583|  84.7k|                    if let N3Token::Punctuation(")") = token {
  584|  32.8k|                        self.cur_predicate.pop();
  585|  32.8k|                        results.push(Quad::new(old,
  586|  32.8k|                                               rdf::REST,
  587|  32.8k|                                               rdf::NIL,
  588|  32.8k|                                               self.cur_graph.clone()
  589|  32.8k|                        ));
  590|  32.8k|                        self
  591|       |                    }else {
  592|  51.9k|                        let new = BlankNode::default();
  593|  51.9k|                        results.push(Quad::new(old,
  594|  51.9k|                                               rdf::REST,
  595|  51.9k|                                               new.clone(),
  596|  51.9k|                                               self.cur_graph.clone()
  597|  51.9k|                        ));
  598|  51.9k|                        self.cur_subject.push(new.into());
  599|  51.9k|                        self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  600|  51.9k|                        self.stack.push(TriGState::Object);
  601|  51.9k|                        self.recognize_next(token, context,results, errors)
  602|       |                    }
  603|       |                }
  604|  74.2k|                TriGState::LiteralPossibleSuffix { value, emit } => {
  605|  74.2k|                    match token {
  606|  5.35k|                        N3Token::LangTag(lang) => {
  607|  5.35k|                            self.cur_object.push(Literal::new_language_tagged_literal_unchecked(value, lang.to_ascii_lowercase()).into());
  608|  5.35k|                            if emit {
  609|  5.35k|                                self.emit_quad(results);
  610|  5.35k|                            }
  611|  5.35k|                            self
  612|       |                        },
  613|  40.3k|                        N3Token::Punctuation("^^") => {
  614|     36|                            self.stack.push(TriGState::LiteralExpectDatatype { value, emit });
  615|     36|                            self
  616|       |                        }
  617|       |                        _ => {
  618|  68.8k|                            self.cur_object.push(Literal::new_simple_literal(value).into());
  619|  68.8k|                            if emit {
  620|  68.8k|                                self.emit_quad(results);
  621|  68.8k|                            }
  622|  68.8k|                            self.recognize_next(token, context,results, errors)
  623|       |                        }
  624|       |                    }
  625|       |                }
  626|     26|                TriGState::LiteralExpectDatatype { value, emit } => {
  627|     26|                    match token {
  628|      0|                        N3Token::IriRef(datatype) => {
  629|      0|                            self.cur_object.push(Literal::new_typed_literal(value, datatype).into());
  630|      0|                            if emit {
  631|      0|                                self.emit_quad(results);
  632|      0|                            }
  633|      0|                            self
  634|       |                        },
  635|      0|                        N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  636|      0|                            Ok(t) => {
  637|      0|                                self.cur_object.push(Literal::new_typed_literal(value, t).into());
  638|      0|                                if emit {
  639|      0|                                    self.emit_quad(results);
  640|      0|                                }
  641|      0|                                self
  642|       |                            },
  643|      0|                            Err(e) => self.error(errors, e)
  644|       |                        }
  645|       |                        _ => {
  646|     26|                            self.error(errors, "Expecting a datatype IRI after ^^, found TOKEN").recognize_next(token, context, results, errors)
  647|       |                        }
  648|       |                    }
  649|       |                }
  650|       |                // [27t] 	quotedTriple 	::= 	'<<' qtSubject verb qtObject '>>'
  651|       |                #[cfg(feature = "rdf-star")]
  652|       |                TriGState::SubjectQuotedTripleEnd => {
  653|    154|                    let triple = Triple::new(
  654|    154|                        self.cur_subject.pop().unwrap(),
  655|    154|                        self.cur_predicate.pop().unwrap(),
  656|    154|                        self.cur_object.pop().unwrap()
  657|    154|                    );
  658|    154|                    self.cur_subject.push(triple.into());
  659|    154|                    if token == N3Token::Punctuation(">>") {
  660|      0|                        self
  661|       |                    } else {
  662|    154|                        self.error(errors, "Expecting '>>' to close a quoted triple, found TOKEN")
  663|       |                    }
  664|       |                }
  665|       |                #[cfg(feature = "rdf-star")]
  666|      0|                TriGState::ObjectQuotedTripleEnd { emit } => {
  667|      0|                    let triple = Triple::new(
  668|      0|                        self.cur_subject.pop().unwrap(),
  669|      0|                        self.cur_predicate.pop().unwrap(),
  670|      0|                        self.cur_object.pop().unwrap()
  671|      0|                    );
  672|      0|                    self.cur_object.push(triple.into());
  673|      0|                    if emit {
  674|      0|                        self.emit_quad(results);
  675|      0|                    }
  676|      0|                    if token == N3Token::Punctuation(">>") {
  677|      0|                        self
  678|       |                    } else {
  679|      0|                        self.error(errors, "Expecting '>>' to close a quoted triple, found TOKEN")
  680|       |                    }
  681|       |                }
  682|       |                // [28t] 	qtSubject 	::= 	iri | BlankNode | quotedTriple
  683|       |                #[cfg(feature = "rdf-star")]
  684|  39.3k|                TriGState::QuotedSubject => match token {
  685|  38.2k|                    N3Token::Punctuation("[") => {
  686|    438|                        self.cur_subject.push(BlankNode::default().into());
  687|    438|                        self.stack.push(TriGState::QuotedAnonEnd);
  688|    438|                        self
  689|       |                    }
  690|    672|                    N3Token::IriRef(iri) => {
  691|    672|                        self.cur_subject.push(NamedNode::from(iri).into());
  692|    672|                        self
  693|       |                    }
  694|     90|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  695|      0|                        Ok(t) => {
  696|      0|                            self.cur_subject.push(t.into());
  697|      0|                            self
  698|       |                        },
  699|     90|                        Err(e) => self.error(errors, e)
  700|       |                    }
  701|    108|                    N3Token::BlankNodeLabel(label) => {
  702|    108|                        self.cur_subject.push(BlankNode::new_unchecked(label).into());
  703|    108|                        self
  704|       |                    }
  705|  37.8k|                    N3Token::Punctuation("<<") => {
  706|  34.0k|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  707|  34.0k|                        self.stack.push(TriGState::QuotedObject);
  708|  34.0k|                        self.stack.push(TriGState::Verb);
  709|  34.0k|                        self.stack.push(TriGState::QuotedSubject);
  710|  34.0k|                        self
  711|       |                    }
  712|  3.95k|                    _ => self.error(errors, "TOKEN is not a valid RDF quoted triple subject: TOKEN")
  713|       |                }
  714|       |                // [29t] 	qtObject 	::= 	iri | BlankNode | literal | quotedTriple
  715|       |                #[cfg(feature = "rdf-star")]
  716|    402|                TriGState::QuotedObject => match token {
  717|    196|                    N3Token::Punctuation("[") => {
  718|    158|                        self.cur_object.push(BlankNode::default().into());
  719|    158|                        self.stack.push(TriGState::QuotedAnonEnd);
  720|    158|                        self
  721|       |                    }
  722|     32|                    N3Token::IriRef(iri) => {
  723|     32|                        self.cur_object.push(NamedNode::from(iri).into());
  724|     32|                        self
  725|       |                    }
  726|     10|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  727|      0|                        Ok(t) => {
  728|      0|                            self.cur_object.push(t.into());
  729|      0|                            self
  730|       |                        },
  731|     10|                        Err(e) => self.error(errors, e)
  732|       |                    }
  733|      0|                    N3Token::BlankNodeLabel(label) => {
  734|      0|                        self.cur_object.push(BlankNode::new_unchecked(label).into());
  735|      0|                        self
  736|       |                    }
  737|      0|                    N3Token::String(value) => {
  738|      0|                        self.stack.push(TriGState::LiteralPossibleSuffix { value, emit: false });
  739|      0|                        self
  740|       |                    }
  741|     82|                    N3Token::Integer(v) => {
  742|     82|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::INTEGER).into());
  743|     82|                        self
  744|       |                    }
  745|      6|                    N3Token::Decimal(v) => {
  746|      6|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
  747|      6|                        self
  748|       |                    }
  749|     50|                    N3Token::Double(v) => {
  750|     50|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
  751|     50|                        self
  752|       |                    }
  753|     26|                    N3Token::PlainKeyword("true") => {
  754|      0|                        self.cur_object.push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
  755|      0|                        self
  756|       |                    }
  757|     26|                    N3Token::PlainKeyword("false") => {
  758|      0|                        self.cur_object.push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
  759|      0|                        self
  760|       |                    }
  761|     38|                    N3Token::Punctuation("<<") => {
  762|      4|                        self.stack.push(TriGState::ObjectQuotedTripleEnd { emit: false });
  763|      4|                        self.stack.push(TriGState::QuotedObject);
  764|      4|                        self.stack.push(TriGState::Verb);
  765|      4|                        self.stack.push(TriGState::QuotedSubject);
  766|      4|                        self
  767|       |                    }
  768|     60|                    _ => self.error(errors, "TOKEN is not a valid RDF quoted triple object")
  769|       |                }
  770|       |                #[cfg(feature = "rdf-star")]
  771|    540|                TriGState::QuotedAnonEnd => if token == N3Token::Punctuation("]") {
  772|     32|                    self
  773|       |                } else {
  774|    508|                    self.error(errors, "Anonymous blank node with a property list are not allowed in quoted triples")
  775|       |                }
  776|       |            }
  777|  2.45M|        } else if token == N3Token::Punctuation(".") || token == N3Token::Punctuation("}") {
  778|       |            //TODO: be smarter depending if we are in '{' or not
  779|   453k|            self.stack.push(TriGState::TriGDoc);
  780|   453k|            self
  781|       |        } else {
  782|  2.00M|            self
  783|       |        }
  784|  7.96M|    }
_RNvXNtCs4WjTcpTVJQo_5oxttl5terseNtB2_14TriGRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer13lexer_options:
  817|  12.2M|    fn lexer_options(context: &TriGRecognizerContext) -> &N3LexerOptions {
  818|  12.2M|        &context.lexer_options
  819|  12.2M|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5terseNtB4_14TriGRecognizer9emit_quad:
  869|   819k|    fn emit_quad(&mut self, results: &mut Vec<Quad>) {
  870|   819k|        results.push(Quad::new(
  871|   819k|            self.cur_subject.last().unwrap().clone(),
  872|   819k|            self.cur_predicate.last().unwrap().clone(),
  873|   819k|            self.cur_object.last().unwrap().clone(),
  874|   819k|            self.cur_graph.clone(),
  875|   819k|        ));
  876|   819k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5terseNtB4_14TriGRecognizer10new_parser:
  823|  68.0k|    pub fn new_parser(
  824|  68.0k|        with_graph_name: bool,
  825|  68.0k|        #[cfg(feature = "rdf-star")] with_quoted_triples: bool,
  826|  68.0k|        base_iri: Option<Iri<String>>,
  827|  68.0k|        prefixes: HashMap<String, Iri<String>>,
  828|  68.0k|    ) -> Parser<Self> {
  829|  68.0k|        Parser::new(
  830|  68.0k|            Lexer::new(
  831|  68.0k|                N3Lexer::new(N3LexerMode::Turtle),
  832|  68.0k|                MIN_BUFFER_SIZE,
  833|  68.0k|                MAX_BUFFER_SIZE,
  834|  68.0k|                true,
  835|  68.0k|                Some(b"#"),
  836|  68.0k|            ),
  837|  68.0k|            TriGRecognizer {
  838|  68.0k|                stack: vec![TriGState::TriGDoc],
  839|  68.0k|                cur_subject: Vec::new(),
  840|  68.0k|                cur_predicate: Vec::new(),
  841|  68.0k|                cur_object: Vec::new(),
  842|  68.0k|                cur_graph: GraphName::DefaultGraph,
  843|  68.0k|            },
  844|  68.0k|            TriGRecognizerContext {
  845|  68.0k|                with_graph_name,
  846|  68.0k|                #[cfg(feature = "rdf-star")]
  847|  68.0k|                with_quoted_triples,
  848|  68.0k|                prefixes,
  849|  68.0k|                lexer_options: N3LexerOptions { base_iri },
  850|  68.0k|            },
  851|  68.0k|        )
  852|  68.0k|    }
_RNvXNtCs4WjTcpTVJQo_5oxttl5terseNtB2_14TriGRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer20error_recovery_state:
   37|  4.01M|    fn error_recovery_state(mut self) -> Self {
   38|  4.01M|        self.stack.clear();
   39|  4.01M|        self.cur_subject.clear();
   40|  4.01M|        self.cur_predicate.clear();
   41|  4.01M|        self.cur_object.clear();
   42|  4.01M|        self.cur_graph = GraphName::DefaultGraph;
   43|  4.01M|        self
   44|  4.01M|    }
_RINvMs_NtCs4WjTcpTVJQo_5oxttl5terseNtB5_14TriGRecognizer5errorNtNtCsdBW21Yiwikk_5alloc6string6StringEB7_:
  855|  32.5k|    fn error(
  856|  32.5k|        mut self,
  857|  32.5k|        errors: &mut Vec<RuleRecognizerError>,
  858|  32.5k|        msg: impl Into<RuleRecognizerError>,
  859|  32.5k|    ) -> Self {
  860|  32.5k|        errors.push(msg.into());
  861|  32.5k|        self.stack.clear();
  862|  32.5k|        self.cur_subject.clear();
  863|  32.5k|        self.cur_predicate.clear();
  864|  32.5k|        self.cur_object.clear();
  865|  32.5k|        self.cur_graph = GraphName::DefaultGraph;
  866|  32.5k|        self
  867|  32.5k|    }
_RINvMs_NtCs4WjTcpTVJQo_5oxttl5terseNtB5_14TriGRecognizer5errorReEB7_:
  855|   311k|    fn error(
  856|   311k|        mut self,
  857|   311k|        errors: &mut Vec<RuleRecognizerError>,
  858|   311k|        msg: impl Into<RuleRecognizerError>,
  859|   311k|    ) -> Self {
  860|   311k|        errors.push(msg.into());
  861|   311k|        self.stack.clear();
  862|   311k|        self.cur_subject.clear();
  863|   311k|        self.cur_predicate.clear();
  864|   311k|        self.cur_object.clear();
  865|   311k|        self.cur_graph = GraphName::DefaultGraph;
  866|   311k|        self
  867|   311k|    }

_RNvXs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5errorNtB4_11SyntaxErrorNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCs8B1jHDnA03z_4trig:
   38|  4.40M|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   39|  4.40M|        if self.location.start.offset + 1 >= self.location.end.offset {
   40|  3.70M|            write!(
   41|  3.70M|                f,
   42|  3.70M|                "Parser error at line {} column {}: {}",
   43|  3.70M|                self.location.start.line + 1,
   44|  3.70M|                self.location.start.column + 1,
   45|  3.70M|                self.message
   46|  3.70M|            )
   47|   695k|        } else if self.location.start.line == self.location.end.line {
   48|   692k|            write!(
   49|   692k|                f,
   50|   692k|                "Parser error between at line {} between columns {} and column {}: {}",
   51|   692k|                self.location.start.line + 1,
   52|   692k|                self.location.start.column + 1,
   53|   692k|                self.location.end.column + 1,
   54|   692k|                self.message
   55|   692k|            )
   56|       |        } else {
   57|  3.13k|            write!(
   58|  3.13k|                f,
   59|  3.13k|                "Parser error between line {} column {} and line {} column {}: {}",
   60|  3.13k|                self.location.start.line + 1,
   61|  3.13k|                self.location.start.column + 1,
   62|  3.13k|                self.location.end.line + 1,
   63|  3.13k|                self.location.end.column + 1,
   64|  3.13k|                self.message
   65|  3.13k|            )
   66|       |        }
   67|  4.40M|    }

_RINvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB6_5LexerNtNtBa_5lexer7N3LexerE16extend_from_readRShECs8B1jHDnA03z_4trig:
  113|  56.9k|    pub fn extend_from_read(&mut self, read: &mut impl Read) -> io::Result<()> {
  114|  56.9k|        self.shrink_data();
  115|  56.9k|        if self.data.len() == self.max_buffer_size {
  116|      0|            return Err(io::Error::new(
  117|      0|                io::ErrorKind::OutOfMemory,
  118|      0|                format!(
  119|      0|                    "Reached the buffer maximal size of {}",
  120|      0|                    self.max_buffer_size
  121|      0|                ),
  122|      0|            ));
  123|  56.9k|        }
  124|  56.9k|        let min_end = min(self.data.len() + self.min_buffer_size, self.max_buffer_size);
  125|  56.9k|        let new_start = self.data.len();
  126|  56.9k|        self.data.resize(min_end, 0);
  127|  56.9k|        if self.data.len() < self.data.capacity() {
  128|  6.18k|            // We keep extending to have as much space as available without reallocation
  129|  6.18k|            self.data.resize(self.data.capacity(), 0);
  130|  50.7k|        }
  131|  56.9k|        let read = read.read(&mut self.data[new_start..])?;
  132|  56.9k|        self.data.truncate(new_start + read);
  133|  56.9k|        self.is_ending = read == 0;
  134|  56.9k|        Ok(())
  135|  56.9k|    }
_RNvXs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCsl2lhD68vXAd_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejEReEE4fromB8_:
   41|  1.42M|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  1.42M|        (*location.start()..*location.end() + 1, message).into()
   43|  1.42M|    }
_RNCNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB7_5LexerNtNtBb_5lexer7N3LexerE9read_next0Bb_:
  227|  4.00M|        Some(result.map_err(|e| SyntaxError {
  228|  4.00M|            location: self.location_from_buffer_offset_range(e.location),
  229|  4.00M|            message: e.message,
  230|  4.00M|        }))
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  397|  16.9M|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  398|  16.9M|        let mut num_of_jumps = 0;
  399|  16.9M|        let mut last_jump_pos = 0;
  400|  16.9M|        let mut previous_cr = 0;
  401|  16.9M|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  402|  43.5k|            if bytes[pos] == b'\r' {
  403|  8.47k|                previous_cr = pos;
  404|  8.47k|                num_of_jumps += 1;
  405|  8.47k|                last_jump_pos = pos + 1;
  406|  8.47k|            } else {
  407|  35.0k|                if previous_cr < pos - 1 {
  408|  30.4k|                    // We count \r\n as a single line jump
  409|  30.4k|                    num_of_jumps += 1;
  410|  30.4k|                }
  411|  35.0k|                last_jump_pos = pos + 1;
  412|       |            }
  413|       |        }
  414|  16.9M|        (num_of_jumps, last_jump_pos)
  415|  16.9M|    }
_RNvXNtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCsl2lhD68vXAd_4core7convert4FromTINtNtNtB1a_3ops5range5RangejENtNtCsdBW21Yiwikk_5alloc6string6StringEE4fromB6_:
   31|  2.48M|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|  2.48M|        Self {
   33|  2.48M|            location,
   34|  2.48M|            message: message.into(),
   35|  2.48M|        }
   36|  2.48M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE9read_nextB9_:
  166|  12.2M|    pub fn read_next(&mut self, options: &R::Options) -> Option<Result<R::Token<'_>, SyntaxError>> {
  167|  12.2M|        self.skip_whitespaces_and_comments()?;
  168|  12.2M|        self.previous_position = self.position;
  169|  12.2M|        let Some((consumed, result)) = self.parser.recognize_next_token(
  170|  12.2M|            &self.data[self.position.buffer_offset..],
  171|  12.2M|            self.is_ending,
  172|  12.2M|            options,
  173|  12.2M|        ) else {
  174|  3.34M|            return if self.is_ending {
  175|   147k|                if self.position.buffer_offset == self.data.len() {
  176|   136k|                    None // We have finished
  177|       |                } else {
  178|  11.3k|                    let (new_line_jumps, new_line_start) =
  179|  11.3k|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  180|  11.3k|                            &self.data[self.position.buffer_offset..],
  181|  11.3k|                        );
  182|  11.3k|                    if new_line_jumps > 0 {
  183|  1.95k|                        self.position.line_start_buffer_offset =
  184|  1.95k|                            self.position.buffer_offset + new_line_start;
  185|  9.39k|                    }
  186|  11.3k|                    self.position.global_offset +=
  187|  11.3k|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  188|  11.3k|                    self.position.buffer_offset = self.data.len();
  189|  11.3k|                    self.position.global_line += new_line_jumps;
  190|  11.3k|                    let new_position = TextPosition {
  191|  11.3k|                        line: self.position.global_line,
  192|  11.3k|                        column: Self::column_from_bytes(
  193|  11.3k|                            &self.data[self.position.line_start_buffer_offset..],
  194|  11.3k|                        ),
  195|  11.3k|                        offset: self.position.global_offset,
  196|  11.3k|                    };
  197|  11.3k|                    let error = SyntaxError {
  198|  11.3k|                        location: new_position..new_position,
  199|  11.3k|                        message: "Unexpected end of file".into(),
  200|  11.3k|                    };
  201|  11.3k|                    self.position.buffer_offset = self.data.len(); // We consume everything
  202|  11.3k|                    Some(Err(error))
  203|       |                }
  204|       |            } else {
  205|  3.19M|                None
  206|       |            };
  207|       |        };
  208|       |        debug_assert!(
  209|      0|            consumed > 0,
  210|      0|            "The lexer must consume at least one byte each time"
  211|       |        );
  212|       |        debug_assert!(
  213|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  214|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  215|      0|            self.data.len() - self.position.buffer_offset
  216|       |        );
  217|  8.90M|        let (new_line_jumps, new_line_start) =
  218|  8.90M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  219|  8.90M|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  220|  8.90M|            );
  221|  8.90M|        if new_line_jumps > 0 {
  222|  6.63k|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  223|  8.89M|        }
  224|  8.90M|        self.position.buffer_offset += consumed;
  225|  8.90M|        self.position.global_offset += u64::try_from(consumed).unwrap();
  226|  8.90M|        self.position.global_line += new_line_jumps;
  227|  8.90M|        Some(result.map_err(|e| SyntaxError {
  228|       |            location: self.location_from_buffer_offset_range(e.location),
  229|       |            message: e.message,
  230|  8.90M|        }))
  231|  12.2M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  297|  12.2M|    fn skip_whitespaces_and_comments(&mut self) -> Option<()> {
  298|       |        loop {
  299|  12.2M|            self.skip_whitespaces()?;
  300|       |
  301|  12.2M|            let buf = &self.data[self.position.buffer_offset..];
  302|  12.2M|            if let Some(line_comment_start) = self.line_comment_start {
  303|  12.2M|                if buf.starts_with(line_comment_start) {
  304|       |                    // Comment
  305|  44.2k|                    if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  306|  8.68k|                        let mut end_position = line_comment_start.len() + end;
  307|  8.68k|                        if buf.get(end_position).copied() == Some(b'\r') {
  308|       |                            // We look for \n for Windows line end style
  309|  5.75k|                            if let Some(c) = buf.get(end_position + 1) {
  310|  1.97k|                                if *c == b'\n' {
  311|      0|                                    end_position += 1;
  312|  1.97k|                                }
  313|  3.78k|                            } else if !self.is_ending {
  314|  3.76k|                                return None; // We need to read more
  315|     18|                            }
  316|  2.92k|                        }
  317|  4.91k|                        let comment_size = end_position + 1;
  318|  4.91k|                        self.position.buffer_offset += comment_size;
  319|  4.91k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  320|  4.91k|                        self.position.global_offset += u64::try_from(comment_size).unwrap();
  321|  4.91k|                        self.position.global_line += 1;
  322|  4.91k|                        continue;
  323|  35.5k|                    }
  324|  35.5k|                    if self.is_ending {
  325|  2.55k|                        self.position.buffer_offset = self.data.len(); // EOF
  326|  2.55k|                        return Some(());
  327|  32.9k|                    }
  328|  32.9k|                    return None; // We need more data
  329|  12.2M|                }
  330|      0|            }
  331|  12.2M|            return Some(());
  332|       |        }
  333|  12.2M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  335|  12.2M|    fn skip_whitespaces(&mut self) -> Option<()> {
  336|  12.2M|        if self.is_line_jump_whitespace {
  337|  12.2M|            let mut i = self.position.buffer_offset;
  338|  13.7M|            while let Some(c) = self.data.get(i) {
  339|  12.3M|                match c {
  340|  1.05M|                    b' ' | b'\t' => {
  341|  1.05M|                        self.position.buffer_offset += 1;
  342|  1.05M|                        self.position.global_offset += 1;
  343|  1.05M|                    }
  344|       |                    b'\r' => {
  345|       |                        // We look for \n for Windows line end style
  346|  38.9k|                        let mut increment: u8 = 1;
  347|  38.9k|                        if let Some(c) = self.data.get(i + 1) {
  348|  33.2k|                            if *c == b'\n' {
  349|     54|                                increment += 1;
  350|     54|                                i += 1;
  351|  33.1k|                            }
  352|  5.69k|                        } else if !self.is_ending {
  353|  5.46k|                            return None; // We need to read more
  354|    236|                        }
  355|  33.4k|                        self.position.buffer_offset += usize::from(increment);
  356|  33.4k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  357|  33.4k|                        self.position.global_offset += u64::from(increment);
  358|  33.4k|                        self.position.global_line += 1;
  359|       |                    }
  360|   361k|                    b'\n' => {
  361|   361k|                        self.position.buffer_offset += 1;
  362|   361k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  363|   361k|                        self.position.global_offset += 1;
  364|   361k|                        self.position.global_line += 1;
  365|   361k|                    }
  366|  10.9M|                    _ => return Some(()),
  367|       |                }
  368|  1.44M|                i += 1;
  369|       |                //TODO: SIMD
  370|       |            }
  371|       |        } else {
  372|      0|            for c in &self.data[self.position.buffer_offset..] {
  373|      0|                if matches!(c, b' ' | b'\t') {
  374|      0|                    self.position.buffer_offset += 1;
  375|      0|                    self.position.global_offset += 1;
  376|      0|                } else {
  377|      0|                    return Some(());
  378|       |                }
  379|       |                //TODO: SIMD
  380|       |            }
  381|       |        }
  382|  1.37M|        Some(())
  383|  12.2M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE33location_from_buffer_offset_rangeB9_:
  233|  4.00M|    pub fn location_from_buffer_offset_range(
  234|  4.00M|        &self,
  235|  4.00M|        offset_range: Range<usize>,
  236|  4.00M|    ) -> Range<TextPosition> {
  237|  4.00M|        let start_offset = self.previous_position.buffer_offset + offset_range.start;
  238|  4.00M|        let (start_extra_line_jumps, start_line_start) =
  239|  4.00M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  240|  4.00M|                &self.data[self.previous_position.buffer_offset..start_offset],
  241|  4.00M|            );
  242|  4.00M|        let start_line_start = if start_extra_line_jumps > 0 {
  243|  1.95k|            start_line_start + self.previous_position.buffer_offset
  244|       |        } else {
  245|  3.99M|            self.previous_position.line_start_buffer_offset
  246|       |        };
  247|  4.00M|        let end_offset = self.previous_position.buffer_offset + offset_range.end;
  248|  4.00M|        let (end_extra_line_jumps, end_line_start) =
  249|  4.00M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  250|  4.00M|                &self.data[self.previous_position.buffer_offset..end_offset],
  251|  4.00M|            );
  252|  4.00M|        let end_line_start = if end_extra_line_jumps > 0 {
  253|  5.10k|            end_line_start + self.previous_position.buffer_offset
  254|       |        } else {
  255|  3.99M|            self.previous_position.line_start_buffer_offset
  256|       |        };
  257|  4.00M|        TextPosition {
  258|  4.00M|            line: self.previous_position.global_line + start_extra_line_jumps,
  259|  4.00M|            column: Self::column_from_bytes(&self.data[start_line_start..start_offset]),
  260|  4.00M|            offset: self.previous_position.global_offset
  261|  4.00M|                + u64::try_from(offset_range.start).unwrap(),
  262|  4.00M|        }..TextPosition {
  263|  4.00M|            line: self.previous_position.global_line + end_extra_line_jumps,
  264|  4.00M|            column: Self::column_from_bytes(&self.data[end_line_start..end_offset]),
  265|  4.00M|            offset: self.previous_position.global_offset + u64::try_from(offset_range.end).unwrap(),
  266|  4.00M|        }
  267|  4.00M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE11shrink_dataB9_:
  385|  3.26M|    fn shrink_data(&mut self) {
  386|  3.26M|        if self.position.line_start_buffer_offset > 0 {
  387|  34.7k|            self.data
  388|  34.7k|                .copy_within(self.position.line_start_buffer_offset.., 0);
  389|  34.7k|            self.data
  390|  34.7k|                .truncate(self.data.len() - self.position.line_start_buffer_offset);
  391|  34.7k|            self.position.buffer_offset -= self.position.line_start_buffer_offset;
  392|  34.7k|            self.position.line_start_buffer_offset = 0;
  393|  34.7k|            self.previous_position = self.position;
  394|  3.22M|        }
  395|  3.26M|    }
_RNvXs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCsl2lhD68vXAd_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejENtNtCsdBW21Yiwikk_5alloc6string6StringEE4fromB8_:
   41|  83.7k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  83.7k|        (*location.start()..*location.end() + 1, message).into()
   43|  83.7k|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3endB9_:
  109|  45.3k|    pub fn end(&mut self) {
  110|  45.3k|        self.is_ending = true;
  111|  45.3k|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17last_token_sourceB9_:
  286|   392k|    pub fn last_token_source(&self) -> Cow<'_, str> {
  287|   392k|        String::from_utf8_lossy(
  288|   392k|            &self.data[self.previous_position.buffer_offset..self.position.buffer_offset],
  289|   392k|        )
  290|   392k|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17column_from_bytesB9_:
  417|  13.6M|    fn column_from_bytes(bytes: &[u8]) -> u64 {
  418|  13.6M|        match str::from_utf8(bytes) {
  419|  6.04M|            Ok(s) => u64::try_from(s.chars().count()).unwrap(),
  420|  7.55M|            Err(e) => {
  421|  7.55M|                if e.valid_up_to() == 0 {
  422|  2.75M|                    0
  423|       |                } else {
  424|  4.80M|                    Self::column_from_bytes(&bytes[..e.valid_up_to()])
  425|       |                }
  426|       |            }
  427|       |        }
  428|  13.6M|    }
_RNvXNtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCsl2lhD68vXAd_4core7convert4FromTINtNtNtB1a_3ops5range5RangejEReEE4fromB6_:
   31|  1.57M|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|  1.57M|        Self {
   33|  1.57M|            location,
   34|  1.57M|            message: message.into(),
   35|  1.57M|        }
   36|  1.57M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE6is_endB9_:
  292|  3.37M|    pub fn is_end(&self) -> bool {
  293|  3.37M|        self.is_ending && self.data.len() == self.position.buffer_offset
  294|  3.37M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3newB9_:
   73|  68.0k|    pub fn new(
   74|  68.0k|        parser: R,
   75|  68.0k|        min_buffer_size: usize,
   76|  68.0k|        max_buffer_size: usize,
   77|  68.0k|        is_line_jump_whitespace: bool,
   78|  68.0k|        line_comment_start: Option<&'static [u8]>,
   79|  68.0k|    ) -> Self {
   80|  68.0k|        Self {
   81|  68.0k|            parser,
   82|  68.0k|            data: Vec::new(),
   83|  68.0k|            position: Position {
   84|  68.0k|                line_start_buffer_offset: 0,
   85|  68.0k|                buffer_offset: 0,
   86|  68.0k|                global_offset: 0,
   87|  68.0k|                global_line: 0,
   88|  68.0k|            },
   89|  68.0k|            previous_position: Position {
   90|  68.0k|                line_start_buffer_offset: 0,
   91|  68.0k|                buffer_offset: 0,
   92|  68.0k|                global_offset: 0,
   93|  68.0k|                global_line: 0,
   94|  68.0k|            },
   95|  68.0k|            is_ending: false,
   96|  68.0k|            min_buffer_size,
   97|  68.0k|            max_buffer_size,
   98|  68.0k|            is_line_jump_whitespace,
   99|  68.0k|            line_comment_start,
  100|  68.0k|        }
  101|  68.0k|    }
_RNvXs0_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerNtB5_20TokenRecognizerErrorINtNtCsl2lhD68vXAd_4core7convert4FromTjNtNtCsdBW21Yiwikk_5alloc6string6StringEE4fromB9_:
   47|  15.0k|    fn from((location, message): (usize, S)) -> Self {
   48|  15.0k|        (location..=location, message).into()
   49|  15.0k|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17extend_from_sliceB9_:
  103|  3.20M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  104|  3.20M|        self.shrink_data();
  105|  3.20M|        self.data.extend_from_slice(other);
  106|  3.20M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE19last_token_locationB9_:
  269|   392k|    pub fn last_token_location(&self) -> Range<TextPosition> {
  270|   392k|        TextPosition {
  271|   392k|            line: self.previous_position.global_line,
  272|   392k|            column: Self::column_from_bytes(
  273|   392k|                &self.data[self.previous_position.line_start_buffer_offset
  274|   392k|                    ..self.previous_position.buffer_offset],
  275|   392k|            ),
  276|   392k|            offset: self.previous_position.global_offset,
  277|   392k|        }..TextPosition {
  278|   392k|            line: self.position.global_line,
  279|   392k|            column: Self::column_from_bytes(
  280|   392k|                &self.data[self.position.line_start_buffer_offset..self.position.buffer_offset],
  281|   392k|            ),
  282|   392k|            offset: self.position.global_offset,
  283|   392k|        }
  284|   392k|    }

_RINvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB5_6ParserNtNtB9_5terse14TriGRecognizerE10parse_readRShECs8B1jHDnA03z_4trig:
  123|  22.6k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadIterator<R, RR> {
  124|  22.6k|        FromReadIterator { read, parser: self }
  125|  22.6k|    }
_RNvXs0_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB5_16FromReadIteratorRShNtNtB9_5terse14TriGRecognizerENtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4nextCs8B1jHDnA03z_4trig:
  145|   331k|    fn next(&mut self) -> Option<Self::Item> {
  146|   388k|        while !self.parser.is_end() {
  147|   366k|            if let Some(result) = self.parser.read_next() {
  148|   309k|                return Some(result.map_err(ParseError::Syntax));
  149|  56.9k|            }
  150|  56.9k|            if let Err(e) = self.parser.lexer.extend_from_read(&mut self.read) {
  151|      0|                return Some(Err(e.into()));
  152|  56.9k|            }
  153|       |        }
  154|  22.6k|        None
  155|   331k|    }
_RNvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE3endB8_:
   71|  45.3k|    pub fn end(&mut self) {
   72|  45.3k|        self.lexer.end()
   73|  45.3k|    }
_RNCNvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB6_6ParserNtNtBa_5terse14TriGRecognizerE9read_next0Ba_:
   96|  4.90M|                        self.state = self.state.take().map(|state| {
   97|  4.90M|                            state.recognize_next(
   98|  4.90M|                                token,
   99|  4.90M|                                &mut self.context,
  100|  4.90M|                                &mut self.results,
  101|  4.90M|                                &mut self.errors,
  102|  4.90M|                            )
  103|  4.90M|                        });
_RNvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE6is_endB8_:
   76|   434k|    pub fn is_end(&self) -> bool {
   77|   434k|        self.state.is_none() && self.results.is_empty() && self.errors.is_empty()
   78|   434k|    }
_RNvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE9read_nextB8_:
   80|  8.64M|    pub fn read_next(&mut self) -> Option<Result<RR::Output, SyntaxError>> {
   81|       |        loop {
   82|  13.6M|            if let Some(error) = self.errors.pop() {
   83|   392k|                return Some(Err(SyntaxError {
   84|   392k|                    location: self.lexer.last_token_location(),
   85|   392k|                    message: error
   86|   392k|                        .message
   87|   392k|                        .replace("TOKEN", &self.lexer.last_token_source()),
   88|   392k|                }));
   89|  13.2M|            }
   90|  13.2M|            if let Some(result) = self.results.pop() {
   91|   927k|                return Some(Ok(result));
   92|  12.2M|            }
   93|  12.2M|            if let Some(result) = self.lexer.read_next(RR::lexer_options(&self.context)) {
   94|  8.91M|                match result {
   95|  4.90M|                    Ok(token) => {
   96|  4.90M|                        self.state = self.state.take().map(|state| {
   97|       |                            state.recognize_next(
   98|       |                                token,
   99|       |                                &mut self.context,
  100|       |                                &mut self.results,
  101|       |                                &mut self.errors,
  102|       |                            )
  103|  4.90M|                        });
  104|  4.90M|                        continue;
  105|       |                    }
  106|  4.01M|                    Err(e) => {
  107|  4.01M|                        self.state = self.state.take().map(RR::error_recovery_state);
  108|  4.01M|                        return Some(Err(e));
  109|       |                    }
  110|       |                }
  111|  3.37M|            }
  112|  3.37M|            if self.lexer.is_end() {
  113|   136k|                let Some(state) = self.state.take() else {
  114|  68.0k|                    return None;
  115|       |                };
  116|  68.0k|                state.recognize_end(&mut self.context, &mut self.results, &mut self.errors)
  117|       |            } else {
  118|  3.24M|                return None;
  119|       |            }
  120|       |        }
  121|  8.64M|    }
_RNvXNtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCsl2lhD68vXAd_4core7convert4FromNtNtCsdBW21Yiwikk_5alloc6string6StringE4fromB6_:
   39|  32.5k|    fn from(message: S) -> Self {
   40|  32.5k|        Self {
   41|  32.5k|            message: message.into(),
   42|  32.5k|        }
   43|  32.5k|    }
_RNvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE3newB8_:
   56|  68.0k|    pub fn new(lexer: Lexer<RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   57|  68.0k|        Self {
   58|  68.0k|            lexer,
   59|  68.0k|            state: Some(recognizer),
   60|  68.0k|            context,
   61|  68.0k|            results: vec![],
   62|  68.0k|            errors: vec![],
   63|  68.0k|        }
   64|  68.0k|    }
_RNvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE17extend_from_sliceB8_:
   66|  3.20M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
   67|  3.20M|        self.lexer.extend_from_slice(other)
   68|  3.20M|    }
_RNvXNtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCsl2lhD68vXAd_4core7convert4FromReE4fromB6_:
   39|   360k|    fn from(message: S) -> Self {
   40|   360k|        Self {
   41|   360k|            message: message.into(),
   42|   360k|        }
   43|   360k|    }

_RINvMs2_NtCs4WjTcpTVJQo_5oxttl4trigNtB6_14TriGSerializer18serialize_to_writeINtNtCsdBW21Yiwikk_5alloc3vec3VechEECs8B1jHDnA03z_4trig:
  482|  22.6k|    pub fn serialize_to_write<W: Write>(self, write: W) -> ToWriteTriGWriter<W> {
  483|  22.6k|        ToWriteTriGWriter {
  484|  22.6k|            write,
  485|  22.6k|            writer: self.serialize(),
  486|  22.6k|        }
  487|  22.6k|    }
_RNvMs3_NtCs4WjTcpTVJQo_5oxttl4trigINtB5_17ToWriteTriGWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE6finishCs8B1jHDnA03z_4trig:
  585|  22.6k|    pub fn finish(mut self) -> io::Result<W> {
  586|  22.6k|        self.writer.finish(&mut self.write)?;
  587|  22.6k|        Ok(self.write)
  588|  22.6k|    }
_RINvMNtCs4WjTcpTVJQo_5oxttl4trigNtB3_10TriGParser13with_base_iriReECs8B1jHDnA03z_4trig:
   59|  45.3k|    pub fn with_base_iri(mut self, base_iri: impl Into<String>) -> Result<Self, IriParseError> {
   60|  45.3k|        self.base = Some(Iri::parse(base_iri.into())?);
   61|  45.3k|        Ok(self)
   62|  45.3k|    }
_RINvMs4_NtCs4WjTcpTVJQo_5oxttl4trigNtB6_18LowLevelTriGWriter6finishQINtNtCsdBW21Yiwikk_5alloc3vec3VechEECs8B1jHDnA03z_4trig:
  745|  22.6k|    pub fn finish(&mut self, mut write: impl Write) -> io::Result<()> {
  746|  22.6k|        if self.current_subject_predicate.is_some() {
  747|  8.11k|            writeln!(write, " .")?;
  748|  14.5k|        }
  749|  22.6k|        if !self.current_graph_name.is_default_graph() {
  750|    547|            writeln!(write, "}}")?;
  751|  22.1k|        }
  752|  22.6k|        Ok(())
  753|  22.6k|    }
_RINvMNtCs4WjTcpTVJQo_5oxttl4trigNtB3_10TriGParser10parse_readRShECs8B1jHDnA03z_4trig:
  108|  22.6k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadTriGReader<R> {
  109|  22.6k|        FromReadTriGReader {
  110|  22.6k|            inner: self.parse().parser.parse_read(read),
  111|  22.6k|        }
  112|  22.6k|    }
_RINvMs4_NtCs4WjTcpTVJQo_5oxttl4trigNtB6_18LowLevelTriGWriter10write_quadRNtNtCsbrE1BkJ52QU_5oxrdf6triple4QuadQINtNtCsdBW21Yiwikk_5alloc3vec3VechEECs8B1jHDnA03z_4trig:
  668|   309k|    pub fn write_quad<'a>(
  669|   309k|        &mut self,
  670|   309k|        q: impl Into<QuadRef<'a>>,
  671|   309k|        mut write: impl Write,
  672|   309k|    ) -> io::Result<()> {
  673|   309k|        let q = q.into();
  674|   309k|        if q.graph_name == self.current_graph_name.as_ref() {
  675|   299k|            if let Some((current_subject, current_predicate)) =
  676|   307k|                self.current_subject_predicate.take()
  677|       |            {
  678|   299k|                if q.subject == current_subject.as_ref() {
  679|  55.1k|                    if q.predicate == current_predicate {
  680|  20.4k|                        self.current_subject_predicate = Some((current_subject, current_predicate));
  681|  20.4k|                        write!(write, " , {}", TurtleTerm(q.object))
  682|       |                    } else {
  683|  34.7k|                        self.current_subject_predicate =
  684|  34.7k|                            Some((current_subject, q.predicate.into_owned()));
  685|  34.7k|                        writeln!(write, " ;")?;
  686|  34.7k|                        if !self.current_graph_name.is_default_graph() {
  687|    737|                            write!(write, "\t")?;
  688|  33.9k|                        }
  689|  34.7k|                        write!(write, "\t{} {}", q.predicate, TurtleTerm(q.object))
  690|       |                    }
  691|       |                } else {
  692|   244k|                    self.current_subject_predicate =
  693|   244k|                        Some((q.subject.into_owned(), q.predicate.into_owned()));
  694|   244k|                    writeln!(write, " .")?;
  695|   244k|                    if !self.current_graph_name.is_default_graph() {
  696|  44.4k|                        write!(write, "\t")?;
  697|   200k|                    }
  698|   244k|                    write!(
  699|   244k|                        write,
  700|   244k|                        "{} {} {}",
  701|   244k|                        TurtleTerm(q.subject.into()),
  702|   244k|                        q.predicate,
  703|   244k|                        TurtleTerm(q.object)
  704|   244k|                    )
  705|       |                }
  706|       |            } else {
  707|  7.55k|                self.current_subject_predicate =
  708|  7.55k|                    Some((q.subject.into_owned(), q.predicate.into_owned()));
  709|  7.55k|                if !self.current_graph_name.is_default_graph() {
  710|      0|                    write!(write, "\t")?;
  711|  7.55k|                }
  712|  7.55k|                write!(
  713|  7.55k|                    write,
  714|  7.55k|                    "{} {} {}",
  715|  7.55k|                    TurtleTerm(q.subject.into()),
  716|  7.55k|                    q.predicate,
  717|  7.55k|                    TurtleTerm(q.object)
  718|  7.55k|                )
  719|       |            }
  720|       |        } else {
  721|  1.55k|            if self.current_subject_predicate.is_some() {
  722|    997|                writeln!(write, " .")?;
  723|    562|            }
  724|  1.55k|            if !self.current_graph_name.is_default_graph() {
  725|    509|                writeln!(write, "}}")?;
  726|  1.05k|            }
  727|  1.55k|            self.current_graph_name = q.graph_name.into_owned();
  728|  1.55k|            self.current_subject_predicate =
  729|  1.55k|                Some((q.subject.into_owned(), q.predicate.into_owned()));
  730|  1.55k|            if !self.current_graph_name.is_default_graph() {
  731|  1.05k|                writeln!(write, "{} {{", q.graph_name)?;
  732|  1.05k|                write!(write, "\t")?;
  733|    503|            }
  734|  1.55k|            write!(
  735|  1.55k|                write,
  736|  1.55k|                "{} {} {}",
  737|  1.55k|                TurtleTerm(q.subject.into()),
  738|  1.55k|                q.predicate,
  739|  1.55k|                TurtleTerm(q.object)
  740|  1.55k|            )
  741|       |        }
  742|   309k|    }
_RNvXs0_NtCs4WjTcpTVJQo_5oxttl4trigINtB5_18FromReadTriGReaderRShENtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4nextCs8B1jHDnA03z_4trig:
  262|   331k|    fn next(&mut self) -> Option<Result<Quad, ParseError>> {
  263|   331k|        self.inner.next()
  264|   331k|    }
_RINvMs3_NtCs4WjTcpTVJQo_5oxttl4trigINtB6_17ToWriteTriGWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE10write_quadRNtNtCsbrE1BkJ52QU_5oxrdf6triple4QuadECs8B1jHDnA03z_4trig:
  580|   309k|    pub fn write_quad<'a>(&mut self, q: impl Into<QuadRef<'a>>) -> io::Result<()> {
  581|   309k|        self.writer.write_quad(q, &mut self.write)
  582|   309k|    }
_RNvMs2_NtCs4WjTcpTVJQo_5oxttl4trigNtB5_14TriGSerializer3newCs8B1jHDnA03z_4trig:
  459|  22.6k|    pub fn new() -> Self {
  460|  22.6k|        Self
  461|  22.6k|    }
_RNvMNtCs4WjTcpTVJQo_5oxttl4trigNtB2_10TriGParser3newCs8B1jHDnA03z_4trig:
   54|  68.0k|    pub fn new() -> Self {
   55|  68.0k|        Self::default()
   56|  68.0k|    }
_RNvXs6_NtCs4WjTcpTVJQo_5oxttl4trigNtB5_10TriGParserNtNtCsl2lhD68vXAd_4core7default7Default7defaultCs8B1jHDnA03z_4trig:
   42|  68.0k|#[derive(Default)]
_RNvMNtCs4WjTcpTVJQo_5oxttl4trigNtB2_10TriGParser19with_quoted_triplesCs8B1jHDnA03z_4trig:
   78|  68.0k|    pub fn with_quoted_triples(mut self) -> Self {
   79|  68.0k|        self.with_quoted_triples = true;
   80|  68.0k|        self
   81|  68.0k|    }
_RNvXs5_NtCs4WjTcpTVJQo_5oxttl4trigNtB5_10TurtleTermNtNtCsl2lhD68vXAd_4core3fmt7Display3fmt:
  759|   563k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  760|   563k|        match self.0 {
  761|  34.6k|            TermRef::NamedNode(v) => write!(f, "{v}"),
  762|   440k|            TermRef::BlankNode(v) => write!(f, "{v}"),
  763|  87.4k|            TermRef::Literal(v) => {
  764|  87.4k|                let value = v.value();
  765|  87.4k|                let inline = match v.datatype() {
  766|  87.4k|                    xsd::BOOLEAN => is_turtle_boolean(value),
  767|  87.0k|                    xsd::INTEGER => is_turtle_integer(value),
  768|  46.2k|                    xsd::DECIMAL => is_turtle_decimal(value),
  769|  42.3k|                    xsd::DOUBLE => is_turtle_double(value),
  770|  24.8k|                    _ => false,
  771|       |                };
  772|  87.4k|                if inline {
  773|  62.5k|                    write!(f, "{value}")
  774|       |                } else {
  775|  24.8k|                    write!(f, "{v}")
  776|       |                }
  777|       |            }
  778|       |            #[cfg(feature = "rdf-star")]
  779|      0|            TermRef::Triple(t) => {
  780|      0|                write!(
  781|      0|                    f,
  782|      0|                    "<< {} {} {} >>",
  783|      0|                    TurtleTerm(t.subject.as_ref().into()),
  784|      0|                    t.predicate,
  785|      0|                    TurtleTerm(t.object.as_ref())
  786|      0|                )
  787|       |            }
  788|       |        }
  789|   563k|    }
_RNvNtCs4WjTcpTVJQo_5oxttl4trig17is_turtle_decimal:
  807|  3.94k|fn is_turtle_decimal(value: &str) -> bool {
  808|  3.94k|    // [20] 	DECIMAL 	::= 	[+-]? [0-9]* '.' [0-9]+
  809|  3.94k|    let mut value = value.as_bytes();
  810|  3.94k|    if let Some(v) = value.strip_prefix(b"+") {
  811|    264|        value = v;
  812|  3.68k|    } else if let Some(v) = value.strip_prefix(b"-") {
  813|    175|        value = v;
  814|  3.50k|    }
  815|  14.4k|    while value.first().map_or(false, u8::is_ascii_digit) {
  816|  10.5k|        value = &value[1..];
  817|  10.5k|    }
  818|  3.94k|    let Some(value) = value.strip_prefix(b".") else {
  819|      0|        return false;
  820|       |    };
  821|  3.94k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  822|  3.94k|}
_RNvNtCs4WjTcpTVJQo_5oxttl4trig16is_turtle_double:
  824|  17.4k|fn is_turtle_double(value: &str) -> bool {
  825|  17.4k|    // [21] 	DOUBLE 	::= 	[+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  826|  17.4k|    // [154s] 	EXPONENT 	::= 	[eE] [+-]? [0-9]+
  827|  17.4k|    let mut value = value.as_bytes();
  828|  17.4k|    if let Some(v) = value.strip_prefix(b"+") {
  829|     42|        value = v;
  830|  17.3k|    } else if let Some(v) = value.strip_prefix(b"-") {
  831|    203|        value = v;
  832|  17.1k|    }
  833|  17.4k|    let mut with_before = false;
  834|  88.3k|    while value.first().map_or(false, u8::is_ascii_digit) {
  835|  70.8k|        value = &value[1..];
  836|  70.8k|        with_before = true;
  837|  70.8k|    }
  838|  17.4k|    let mut with_after = false;
  839|  17.4k|    if let Some(v) = value.strip_prefix(b".") {
  840|    378|        value = v;
  841|  5.48k|        while value.first().map_or(false, u8::is_ascii_digit) {
  842|  5.10k|            value = &value[1..];
  843|  5.10k|            with_after = true;
  844|  5.10k|        }
  845|  17.0k|    }
  846|  17.4k|    if let Some(v) = value.strip_prefix(b"e") {
  847|    154|        value = v;
  848|  17.2k|    } else if let Some(v) = value.strip_prefix(b"E") {
  849|  17.2k|        value = v;
  850|  17.2k|    } else {
  851|      0|        return false;
  852|       |    }
  853|  17.4k|    if let Some(v) = value.strip_prefix(b"+") {
  854|     21|        value = v;
  855|  17.4k|    } else if let Some(v) = value.strip_prefix(b"-") {
  856|     43|        value = v;
  857|  17.3k|    }
  858|  17.4k|    (with_before || with_after) && !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  859|  17.4k|}
_RNvMs1_NtCs4WjTcpTVJQo_5oxttl4trigNtB5_18LowLevelTriGReader17extend_from_slice:
  380|  3.20M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  381|  3.20M|        self.parser.extend_from_slice(other)
  382|  3.20M|    }
_RNvNtCs4WjTcpTVJQo_5oxttl4trig17is_turtle_boolean:
  792|    367|fn is_turtle_boolean(value: &str) -> bool {
  793|    367|    matches!(value, "true" | "false")
  794|    367|}
_RNvMs1_NtCs4WjTcpTVJQo_5oxttl4trigNtB5_18LowLevelTriGReader3end:
  387|  45.3k|    pub fn end(&mut self) {
  388|  45.3k|        self.parser.end()
  389|  45.3k|    }
_RNvNtCs4WjTcpTVJQo_5oxttl4trig17is_turtle_integer:
  796|  40.8k|fn is_turtle_integer(value: &str) -> bool {
  797|  40.8k|    // [19] 	INTEGER 	::= 	[+-]? [0-9]+
  798|  40.8k|    let mut value = value.as_bytes();
  799|  40.8k|    if let Some(v) = value.strip_prefix(b"+") {
  800|  1.56k|        value = v;
  801|  39.2k|    } else if let Some(v) = value.strip_prefix(b"-") {
  802|    105|        value = v;
  803|  39.1k|    }
  804|  40.8k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  805|  40.8k|}
_RNvMs1_NtCs4WjTcpTVJQo_5oxttl4trigNtB5_18LowLevelTriGReader6is_end:
  392|  45.3k|    pub fn is_end(&self) -> bool {
  393|  45.3k|        self.parser.is_end()
  394|  45.3k|    }
_RNvMNtCs4WjTcpTVJQo_5oxttl4trigNtB2_10TriGParser5parse:
  189|  68.0k|    pub fn parse(self) -> LowLevelTriGReader {
  190|  68.0k|        LowLevelTriGReader {
  191|  68.0k|            parser: TriGRecognizer::new_parser(
  192|  68.0k|                true,
  193|  68.0k|                #[cfg(feature = "rdf-star")]
  194|  68.0k|                self.with_quoted_triples,
  195|  68.0k|                self.base,
  196|  68.0k|                self.prefixes,
  197|  68.0k|            ),
  198|  68.0k|        }
  199|  68.0k|    }
_RNvMs1_NtCs4WjTcpTVJQo_5oxttl4trigNtB5_18LowLevelTriGReader9read_next:
  400|  8.27M|    pub fn read_next(&mut self) -> Option<Result<Quad, SyntaxError>> {
  401|  8.27M|        self.parser.read_next()
  402|  8.27M|    }
_RNvMs2_NtCs4WjTcpTVJQo_5oxttl4trigNtB5_14TriGSerializer9serialize:
  545|  22.6k|    pub fn serialize(&self) -> LowLevelTriGWriter {
  546|  22.6k|        LowLevelTriGWriter {
  547|  22.6k|            current_graph_name: GraphName::DefaultGraph,
  548|  22.6k|            current_subject_predicate: None,
  549|  22.6k|        }
  550|  22.6k|    }


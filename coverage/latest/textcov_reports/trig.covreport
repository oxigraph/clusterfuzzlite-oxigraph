_RNvCsicuAMuMse2k_9getrandom16getrandom_uninitCsbT0BH6pPOpx_9rand_core:
  344|    137|pub fn getrandom_uninit(dest: &mut [MaybeUninit<u8>]) -> Result<&mut [u8], Error> {
  345|    137|    if !dest.is_empty() {
  346|    137|        imp::getrandom_inner(dest)?;
  347|      0|    }
  348|       |    // SAFETY: `dest` has been fully initialized by `imp::getrandom_inner`
  349|       |    // since it returned `Ok`.
  350|    137|    Ok(unsafe { slice_assume_init_mut(dest) })
  351|    137|}
_RNvCsicuAMuMse2k_9getrandom9getrandomCsbT0BH6pPOpx_9rand_core:
  314|    137|pub fn getrandom(dest: &mut [u8]) -> Result<(), Error> {
  315|    137|    // SAFETY: The `&mut MaybeUninit<_>` reference doesn't escape, and
  316|    137|    // `getrandom_uninit` guarantees it will never de-initialize any part of
  317|    137|    // `dest`.
  318|    137|    getrandom_uninit(unsafe { slice_as_uninit_mut(dest) })?;
  319|    137|    Ok(())
  320|    137|}

_RNvNtCsicuAMuMse2k_9getrandom3imp9getrandom:
   42|    138|unsafe fn getrandom(
   43|    138|    buf: *mut libc::c_void,
   44|    138|    buflen: libc::size_t,
   45|    138|    flags: libc::c_uint,
   46|    138|) -> libc::ssize_t {
   47|    138|    libc::syscall(libc::SYS_getrandom, buf, buflen, flags) as libc::ssize_t
   48|    138|}
_RNCNvNtCsicuAMuMse2k_9getrandom3imp15getrandom_inner0B5_:
   21|    137|        sys_fill_exact(dest, |buf| unsafe {
   22|    137|            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   23|    137|        })
_RNvNtCsicuAMuMse2k_9getrandom3imp22is_getrandom_available:
   29|      1|fn is_getrandom_available() -> bool {
   30|      1|    let res = unsafe { getrandom(core::ptr::null_mut(), 0, libc::GRND_NONBLOCK) };
   31|      1|    if res < 0 {
   32|      0|        match last_os_error().raw_os_error() {
   33|      0|            Some(libc::ENOSYS) => false, // No kernel support
   34|      0|            Some(libc::EPERM) => false,  // Blocked by seccomp
   35|      0|            _ => true,
   36|       |        }
   37|       |    } else {
   38|      1|        true
   39|       |    }
   40|      1|}
_RNvNtCsicuAMuMse2k_9getrandom3imp15getrandom_inner:
   17|    137|pub fn getrandom_inner(dest: &mut [MaybeUninit<u8>]) -> Result<(), Error> {
   18|    137|    // getrandom(2) was introduced in Linux 3.17
   19|    137|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   20|    137|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   21|    137|        sys_fill_exact(dest, |buf| unsafe {
   22|       |            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   23|    137|        })
   24|       |    } else {
   25|      0|        use_file::getrandom_inner(dest)
   26|       |    }
   27|    137|}

_RINvNtCsicuAMuMse2k_9getrandom4util19slice_as_uninit_muthECsbT0BH6pPOpx_9rand_core:
   98|    137|pub unsafe fn slice_as_uninit_mut<T>(slice: &mut [T]) -> &mut [MaybeUninit<T>] {
   99|    137|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
  100|    137|    &mut *(slice as *mut [T] as *mut [MaybeUninit<T>])
  101|    137|}
_RINvNtCsicuAMuMse2k_9getrandom4util21slice_assume_init_muthECsbT0BH6pPOpx_9rand_core:
   74|    137|pub unsafe fn slice_assume_init_mut<T>(slice: &mut [MaybeUninit<T>]) -> &mut [T] {
   75|    137|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   76|    137|    &mut *(slice as *mut [MaybeUninit<T>] as *mut [T])
   77|    137|}
_RNCINvMs_NtCsicuAMuMse2k_9getrandom4utilNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   66|      1|        self.0.unsync_init(|| init() as usize) != 0
_RINvMNtCsicuAMuMse2k_9getrandom4utilNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   46|    137|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   47|    137|        // Relaxed ordering is fine, as we only have a single atomic variable.
   48|    137|        let mut val = self.0.load(Relaxed);
   49|    137|        if val == Self::UNINIT {
   50|      1|            val = init();
   51|      1|            self.0.store(val, Relaxed);
   52|    136|        }
   53|    137|        val
   54|    137|    }
_RINvMs_NtCsicuAMuMse2k_9getrandom4utilNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   65|    137|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   66|    137|        self.0.unsync_init(|| init() as usize) != 0
   67|    137|    }

_RINvNtCsicuAMuMse2k_9getrandom9util_libc14sys_fill_exactNCNvNtB4_3imp15getrandom_inner0EB4_:
   67|    137|pub fn sys_fill_exact(
   68|    137|    mut buf: &mut [MaybeUninit<u8>],
   69|    137|    sys_fill: impl Fn(&mut [MaybeUninit<u8>]) -> libc::ssize_t,
   70|    137|) -> Result<(), Error> {
   71|    274|    while !buf.is_empty() {
   72|    137|        let res = sys_fill(buf);
   73|    137|        if res < 0 {
   74|      0|            let err = last_os_error();
   75|      0|            // We should try again if the call was interrupted.
   76|      0|            if err.raw_os_error() != Some(libc::EINTR) {
   77|      0|                return Err(err);
   78|      0|            }
   79|    137|        } else {
   80|    137|            // We don't check for EOF (ret = 0) as the data we are reading
   81|    137|            // should be an infinite stream of random bytes.
   82|    137|            let len = min(res as usize, buf.len());
   83|    137|            buf = &mut buf[len..];
   84|    137|        }
   85|       |    }
   86|    137|    Ok(())
   87|    137|}

_RNvNvCs9jqYw0Nmepu_4trig1__19___libfuzzer_sys_run:
  241|  12.0k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|  12.0k|            }
rust_fuzzer_test_input:
  209|  12.0k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  12.0k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  12.0k|                }
  223|  12.0k|
  224|  12.0k|                __libfuzzer_sys_run(bytes);
  225|  12.0k|                0
  226|  12.0k|            }
LLVMFuzzerTestOneInput:
   58|  12.0k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  12.0k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  12.0k|    });
   63|  12.0k|
   64|  12.0k|    match test_input {
   65|  12.0k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  12.0k|}
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}
_RNCNvCs5ixuek62Ty3_13libfuzzer_sys15test_input_wrap0B3_:
   59|  12.0k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  12.0k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  12.0k|        rust_fuzzer_test_input(data_slice)
   62|  12.0k|    });

_RINvNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECs4WjTcpTVJQo_5oxttl:
 1125|  40.8k|pub(crate) unsafe fn search_slice_with_raw(
 1126|  40.8k|    haystack: &[u8],
 1127|  40.8k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  40.8k|) -> Option<usize> {
 1129|  40.8k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  40.8k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  40.8k|    // a &[u8].
 1132|  40.8k|    let start = haystack.as_ptr();
 1133|  40.8k|    let end = start.add(haystack.len());
 1134|  40.8k|    let found = find_raw(start, end)?;
 1135|  1.54k|    Some(found.distance(start))
 1136|  40.8k|}
_RINvMs3_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4next0ECs4WjTcpTVJQo_5oxttl:
 1044|  7.91M|    pub(crate) unsafe fn next(
 1045|  7.91M|        &mut self,
 1046|  7.91M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  7.91M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  7.91M|        let found = find_raw(self.start, self.end)?;
 1057|  26.1k|        let result = found.distance(self.original_start);
 1058|  26.1k|        self.start = found.add(1);
 1059|  26.1k|        Some(result)
 1060|  7.91M|    }
_RINvNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr7memchr20ECs4WjTcpTVJQo_5oxttl:
 1125|   987k|pub(crate) unsafe fn search_slice_with_raw(
 1126|   987k|    haystack: &[u8],
 1127|   987k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|   987k|) -> Option<usize> {
 1129|   987k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|   987k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|   987k|    // a &[u8].
 1132|   987k|    let start = haystack.as_ptr();
 1133|   987k|    let end = start.add(haystack.len());
 1134|   987k|    let found = find_raw(start, end)?;
 1135|   802k|    Some(found.distance(start))
 1136|   987k|}
_RNvMs3_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  7.88M|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  7.88M|        Iter {
 1029|  7.88M|            original_start: haystack.as_ptr(),
 1030|  7.88M|            start: haystack.as_ptr(),
 1031|  7.88M|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  7.88M|            haystack: core::marker::PhantomData,
 1033|  7.88M|        }
 1034|  7.88M|    }
_RNvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE7needle1B8_:
  117|  53.7k|    pub(crate) fn needle1(&self) -> u8 {
  118|  53.7k|        self.s1
  119|  53.7k|    }
_RINvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|   269k|    unsafe fn search_chunk(
  671|   269k|        &self,
  672|   269k|        cur: *const u8,
  673|   269k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|   269k|    ) -> Option<*const u8> {
  675|   269k|        let chunk = V::load_unaligned(cur);
  676|   269k|        let eq1 = self.v1.cmpeq(chunk);
  677|   269k|        let eq2 = self.v2.cmpeq(chunk);
  678|   269k|        let mask = eq1.or(eq2).movemask();
  679|   269k|        if mask.has_non_zero() {
  680|  73.2k|            let mask1 = eq1.movemask();
  681|  73.2k|            let mask2 = eq2.movemask();
  682|  73.2k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|   196k|            None
  685|       |        }
  686|   269k|    }
_RINvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  1.66M|    unsafe fn search_chunk(
  671|  1.66M|        &self,
  672|  1.66M|        cur: *const u8,
  673|  1.66M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  1.66M|    ) -> Option<*const u8> {
  675|  1.66M|        let chunk = V::load_unaligned(cur);
  676|  1.66M|        let eq1 = self.v1.cmpeq(chunk);
  677|  1.66M|        let eq2 = self.v2.cmpeq(chunk);
  678|  1.66M|        let mask = eq1.or(eq2).movemask();
  679|  1.66M|        if mask.has_non_zero() {
  680|   502k|            let mask1 = eq1.movemask();
  681|   502k|            let mask2 = eq2.movemask();
  682|   502k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  1.16M|            None
  685|       |        }
  686|  1.66M|    }
_RNvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE3newB8_:
  111|  40.8k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  40.8k|        One { s1: needle, v1: V::splat(needle) }
  113|  40.8k|    }
_RNvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  8.38M|    pub(crate) fn needle2(&self) -> u8 {
  468|  8.38M|        self.s2
  469|  8.38M|    }
_RINvNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  10.7k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  10.7k|    start: *const u8,
 1150|  10.7k|    end: *const u8,
 1151|  10.7k|    confirm: F,
 1152|  10.7k|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  10.7k|    let mut ptr = start;
 1155|  64.3k|    while ptr < end {
 1156|  53.7k|        if confirm(*ptr) {
 1157|    169|            return Some(ptr);
 1158|  53.6k|        }
 1159|  53.6k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  10.5k|    None
 1162|  10.7k|}
_RNvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE8find_rawBa_:
  493|   153k|    pub(crate) unsafe fn find_raw(
  494|   153k|        &self,
  495|   153k|        start: *const u8,
  496|   153k|        end: *const u8,
  497|   153k|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   153k|        let topos = V::Mask::first_offset;
  505|   153k|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   153k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  66.7k|            return Some(cur);
  517|  86.9k|        }
  518|  86.9k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  86.9k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  86.9k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|  86.9k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   123k|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  38.3k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  2.13k|                return Some(cur);
  554|  36.1k|            }
  555|  36.1k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|  84.8k|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|  77.9k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|  77.9k|            return self.search_chunk(cur, topos);
  566|  6.91k|        }
  567|  6.91k|        None
  568|   153k|    }
_RNvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE3newBa_:
  450|  8.90M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  8.90M|        Two {
  452|  8.90M|            s1: needle1,
  453|  8.90M|            s2: needle2,
  454|  8.90M|            v1: V::splat(needle1),
  455|  8.90M|            v2: V::splat(needle2),
  456|  8.90M|        }
  457|  8.90M|    }
_RINvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  14.1k|    unsafe fn search_chunk(
  417|  14.1k|        &self,
  418|  14.1k|        cur: *const u8,
  419|  14.1k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  14.1k|    ) -> Option<*const u8> {
  421|  14.1k|        let chunk = V::load_unaligned(cur);
  422|  14.1k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  14.1k|        if mask.has_non_zero() {
  424|    155|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  14.0k|            None
  427|       |        }
  428|  14.1k|    }
_RNvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  6.44k|    pub(crate) unsafe fn find_raw(
  144|  6.44k|        &self,
  145|  6.44k|        start: *const u8,
  146|  6.44k|        end: *const u8,
  147|  6.44k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  6.44k|        let topos = V::Mask::first_offset;
  155|  6.44k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  6.44k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|    116|            return Some(cur);
  167|  6.32k|        }
  168|  6.32k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  6.32k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  6.32k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  6.32k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  8.92k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  2.62k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|     25|                return Some(cur);
  216|  2.59k|            }
  217|  2.59k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  6.30k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  5.10k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  5.10k|            return self.search_chunk(cur, topos);
  228|  1.19k|        }
  229|  1.19k|        None
  230|  6.44k|    }
_RNvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iE3newB8_:
  111|  40.8k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  40.8k|        One { s1: needle, v1: V::splat(needle) }
  113|  40.8k|    }
_RNvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iE8find_rawBa_:
  493|  1.08M|    pub(crate) unsafe fn find_raw(
  494|  1.08M|        &self,
  495|  1.08M|        start: *const u8,
  496|  1.08M|        end: *const u8,
  497|  1.08M|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  1.08M|        let topos = V::Mask::first_offset;
  505|  1.08M|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  1.08M|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   481k|            return Some(cur);
  517|   602k|        }
  518|   602k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   602k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   602k|        if len >= Self::LOOP_SIZE {
  522|   293k|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|   232k|                let a = V::load_aligned(cur);
  526|   232k|                let b = V::load_aligned(cur.add(V::BYTES));
  527|   232k|                let eqa1 = self.v1.cmpeq(a);
  528|   232k|                let eqb1 = self.v1.cmpeq(b);
  529|   232k|                let eqa2 = self.v2.cmpeq(a);
  530|   232k|                let eqb2 = self.v2.cmpeq(b);
  531|   232k|                let or1 = eqa1.or(eqb1);
  532|   232k|                let or2 = eqa2.or(eqb2);
  533|   232k|                let or3 = or1.or(or2);
  534|   232k|                if or3.movemask_will_have_non_zero() {
  535|   144k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|   144k|                    if mask.has_non_zero() {
  537|  74.8k|                        return Some(cur.add(topos(mask)));
  538|  69.4k|                    }
  539|  69.4k|
  540|  69.4k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|  69.4k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|  87.8k|                }
  544|  87.8k|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   396k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   593k|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   143k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  8.54k|                return Some(cur);
  554|   135k|            }
  555|   135k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   449k|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   435k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   435k|            return self.search_chunk(cur, topos);
  566|  13.9k|        }
  567|  13.9k|        None
  568|  1.08M|    }
_RINvNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|  5.70M|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  5.70M|    start: *const u8,
 1150|  5.70M|    end: *const u8,
 1151|  5.70M|    confirm: F,
 1152|  5.70M|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  5.70M|    let mut ptr = start;
 1155|  14.0M|    while ptr < end {
 1156|  8.41M|        if confirm(*ptr) {
 1157|   107k|            return Some(ptr);
 1158|  8.31M|        }
 1159|  8.31M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  5.59M|    None
 1162|  5.70M|}
_RNvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  8.41M|    pub(crate) fn needle1(&self) -> u8 {
  462|  8.41M|        self.s1
  463|  8.41M|    }
_RNvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iE3newBa_:
  450|  8.90M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  8.90M|        Two {
  452|  8.90M|            s1: needle1,
  453|  8.90M|            s2: needle2,
  454|  8.90M|            v1: V::splat(needle1),
  455|  8.90M|            v2: V::splat(needle2),
  456|  8.90M|        }
  457|  8.90M|    }
_RNvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  20.8k|    pub(crate) unsafe fn find_raw(
  144|  20.8k|        &self,
  145|  20.8k|        start: *const u8,
  146|  20.8k|        end: *const u8,
  147|  20.8k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  20.8k|        let topos = V::Mask::first_offset;
  155|  20.8k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  20.8k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|    400|            return Some(cur);
  167|  20.4k|        }
  168|  20.4k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  20.4k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  20.4k|        if len >= Self::LOOP_SIZE {
  172|  15.1k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|  8.07k|                let a = V::load_aligned(cur);
  176|  8.07k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|  8.07k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|  8.07k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|  8.07k|                let eqa = self.v1.cmpeq(a);
  180|  8.07k|                let eqb = self.v1.cmpeq(b);
  181|  8.07k|                let eqc = self.v1.cmpeq(c);
  182|  8.07k|                let eqd = self.v1.cmpeq(d);
  183|  8.07k|                let or1 = eqa.or(eqb);
  184|  8.07k|                let or2 = eqc.or(eqd);
  185|  8.07k|                let or3 = or1.or(or2);
  186|  8.07k|                if or3.movemask_will_have_non_zero() {
  187|    439|                    let mask = eqa.movemask();
  188|    439|                    if mask.has_non_zero() {
  189|     80|                        return Some(cur.add(topos(mask)));
  190|    359|                    }
  191|    359|
  192|    359|                    let mask = eqb.movemask();
  193|    359|                    if mask.has_non_zero() {
  194|    150|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|    209|                    }
  196|    209|
  197|    209|                    let mask = eqc.movemask();
  198|    209|                    if mask.has_non_zero() {
  199|    123|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|     86|                    }
  201|     86|
  202|     86|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|     86|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  7.63k|                }
  206|  7.63k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  12.8k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  44.6k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  24.8k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    206|                return Some(cur);
  216|  24.6k|            }
  217|  24.6k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  19.7k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  18.7k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  18.7k|            return self.search_chunk(cur, topos);
  228|  1.03k|        }
  229|  1.03k|        None
  230|  20.8k|    }
_RINvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  64.4k|    unsafe fn search_chunk(
  417|  64.4k|        &self,
  418|  64.4k|        cur: *const u8,
  419|  64.4k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  64.4k|    ) -> Option<*const u8> {
  421|  64.4k|        let chunk = V::load_unaligned(cur);
  422|  64.4k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  64.4k|        if mask.has_non_zero() {
  424|    777|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  63.6k|            None
  427|       |        }
  428|  64.4k|    }

_RNCNvMs2_NtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  8.41M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  8.41M|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  8.41M|                })
_RNvMs2_NtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNCNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|  53.7k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|  53.7k|                    b == self.sse2.needle1()
  194|  53.7k|                })
_RNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  20.8k|    unsafe fn find_raw_avx2(
  397|  20.8k|        &self,
  398|  20.8k|        start: *const u8,
  399|  20.8k|        end: *const u8,
  400|  20.8k|    ) -> Option<*const u8> {
  401|  20.8k|        self.avx2.find_raw(start, end)
  402|  20.8k|    }
_RNvMs2_NtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  8.90M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  8.90M|        Two {
  558|  8.90M|            sse2: generic::Two::new(needle1, needle2),
  559|  8.90M|            avx2: generic::Two::new(needle1, needle2),
  560|  8.90M|        }
  561|  8.90M|    }
_RNvMs2_NtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  8.90M|    pub unsafe fn find_raw(
  655|  8.90M|        &self,
  656|  8.90M|        start: *const u8,
  657|  8.90M|        end: *const u8,
  658|  8.90M|    ) -> Option<*const u8> {
  659|  8.90M|        if start >= end {
  660|  1.95M|            return None;
  661|  6.94M|        }
  662|  6.94M|        let len = end.distance(start);
  663|  6.94M|        if len < __m256i::BYTES {
  664|  5.85M|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  5.70M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  5.70M|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|   153k|                self.find_raw_sse2(start, end)
  674|       |            };
  675|  1.08M|        }
  676|  1.08M|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|  1.08M|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|  1.08M|        // enough to run on the vector routine. Pointer validity is caller's
  679|  1.08M|        // responsibility.
  680|  1.08M|        //
  681|  1.08M|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|  1.08M|        // means we'd have to annotate this routine with `target_feature`.
  683|  1.08M|        // Which is fine, because this routine is `unsafe` anyway and the
  684|  1.08M|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|  1.08M|        // The real problem is that a routine with a `target_feature`
  686|  1.08M|        // annotation generally can't be inlined into caller code unless
  687|  1.08M|        // the caller code has the same target feature annotations. Namely,
  688|  1.08M|        // the common case (at time of writing) is for calling code to not
  689|  1.08M|        // have the `avx2` target feature enabled *at compile time*. Without
  690|  1.08M|        // `target_feature` on this routine, it can be inlined which will
  691|  1.08M|        // handle some of the short-haystack cases above without touching the
  692|  1.08M|        // architecture specific code.
  693|  1.08M|        self.find_raw_avx2(start, end)
  694|  8.90M|    }
_RNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  40.8k|    pub unsafe fn find_raw(
  180|  40.8k|        &self,
  181|  40.8k|        start: *const u8,
  182|  40.8k|        end: *const u8,
  183|  40.8k|    ) -> Option<*const u8> {
  184|  40.8k|        if start >= end {
  185|  2.87k|            return None;
  186|  38.0k|        }
  187|  38.0k|        let len = end.distance(start);
  188|  38.0k|        if len < __m256i::BYTES {
  189|  17.2k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  10.7k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  10.7k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  6.44k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  20.8k|        }
  201|  20.8k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  20.8k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  20.8k|        // enough to run on the vector routine. Pointer validity is caller's
  204|  20.8k|        // responsibility.
  205|  20.8k|        //
  206|  20.8k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  20.8k|        // means we'd have to annotate this routine with `target_feature`.
  208|  20.8k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  20.8k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  20.8k|        // The real problem is that a routine with a `target_feature`
  211|  20.8k|        // annotation generally can't be inlined into caller code unless
  212|  20.8k|        // the caller code has the same target feature annotations. Namely,
  213|  20.8k|        // the common case (at time of writing) is for calling code to not
  214|  20.8k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  20.8k|        // `target_feature` on this routine, it can be inlined which will
  216|  20.8k|        // handle some of the short-haystack cases above without touching the
  217|  20.8k|        // architecture specific code.
  218|  20.8k|        self.find_raw_avx2(start, end)
  219|  40.8k|    }
_RNvMs2_NtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|   153k|    unsafe fn find_raw_sse2(
  765|   153k|        &self,
  766|   153k|        start: *const u8,
  767|   153k|        end: *const u8,
  768|   153k|    ) -> Option<*const u8> {
  769|   153k|        self.sse2.find_raw(start, end)
  770|   153k|    }
_RNvMs2_NtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|  1.08M|    unsafe fn find_raw_avx2(
  805|  1.08M|        &self,
  806|  1.08M|        start: *const u8,
  807|  1.08M|        end: *const u8,
  808|  1.08M|    ) -> Option<*const u8> {
  809|  1.08M|        self.avx2.find_raw(start, end)
  810|  1.08M|    }
_RNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  6.44k|    unsafe fn find_raw_sse2(
  337|  6.44k|        &self,
  338|  6.44k|        start: *const u8,
  339|  6.44k|        end: *const u8,
  340|  6.44k|    ) -> Option<*const u8> {
  341|  6.44k|        self.sse2.find_raw(start, end)
  342|  6.44k|    }
_RNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  40.8k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  40.8k|        One {
   71|  40.8k|            sse2: generic::One::new(needle),
   72|  40.8k|            avx2: generic::One::new(needle),
   73|  40.8k|        }
   74|  40.8k|    }

_RNvNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  8.90M|pub(crate) fn memchr2_raw(
  221|  8.90M|    n1: u8,
  222|  8.90M|    n2: u8,
  223|  8.90M|    start: *const u8,
  224|  8.90M|    end: *const u8,
  225|  8.90M|) -> Option<*const u8> {
  226|  8.90M|    // SAFETY: We provide a valid function pointer type.
  227|  8.90M|    unsafe_ifunc!(
  228|  8.90M|        Two,
  229|  8.90M|        find_raw,
  230|  8.90M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  8.90M|        Option<*const u8>,
  232|  8.90M|        start,
  233|  8.90M|        end,
  234|  8.90M|        n1,
  235|  8.90M|        n2
  236|  8.90M|    )
  237|  8.90M|}
_RNvNvNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  8.90M|        unsafe fn find_avx2(
   79|  8.90M|            $($needle: u8),+,
   80|  8.90M|            $hay_start: *const u8,
   81|  8.90M|            $hay_end: *const u8,
   82|  8.90M|        ) -> $retty {
   83|  8.90M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  8.90M|            $memchrty::new_unchecked($($needle),+)
   85|  8.90M|                .$memchrfind($hay_start, $hay_end)
   86|  8.90M|        }
_RNvNvNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  40.8k|        unsafe fn find_avx2(
   79|  40.8k|            $($needle: u8),+,
   80|  40.8k|            $hay_start: *const u8,
   81|  40.8k|            $hay_end: *const u8,
   82|  40.8k|        ) -> $retty {
   83|  40.8k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  40.8k|            $memchrty::new_unchecked($($needle),+)
   85|  40.8k|                .$memchrfind($hay_start, $hay_end)
   86|  40.8k|        }
_RNvNvNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_646memchr10memchr_raw:
  174|  40.8k|pub(crate) fn memchr_raw(
  175|  40.8k|    n1: u8,
  176|  40.8k|    start: *const u8,
  177|  40.8k|    end: *const u8,
  178|  40.8k|) -> Option<*const u8> {
  179|  40.8k|    // SAFETY: We provide a valid function pointer type.
  180|  40.8k|    unsafe_ifunc!(
  181|  40.8k|        One,
  182|  40.8k|        find_raw,
  183|  40.8k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  40.8k|        Option<*const u8>,
  185|  40.8k|        start,
  186|  40.8k|        end,
  187|  40.8k|        n1
  188|  40.8k|    )
  189|  40.8k|}

_RNvXNtCs8oHv9mjUfNq_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  9.61M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  9.61M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  9.61M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  9.61M|    }
_RNvXNtCs8oHv9mjUfNq_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|   716k|    fn as_usize(self) -> usize {
   27|   716k|        self as usize
   28|   716k|    }

_RNCNvXs3_NtCs8oHv9mjUfNq_6memchr6memchrNtB7_7Memchr2NtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4next0Cs4WjTcpTVJQo_5oxttl:
  395|  7.91M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNCNvNtCs8oHv9mjUfNq_6memchr6memchr7memchr20Cs4WjTcpTVJQo_5oxttl:
   96|   987k|        generic::search_slice_with_raw(haystack, |start, end| {
   97|   987k|            memchr2_raw(needle1, needle2, start, end)
   98|   987k|        })
_RNvXs3_NtCs8oHv9mjUfNq_6memchr6memchrNtB5_7Memchr2NtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4nextCs4WjTcpTVJQo_5oxttl:
  390|  7.91M|    fn next(&mut self) -> Option<usize> {
  391|  7.91M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  7.91M|        // pointers returns will fall within the start and end bounds, and this
  393|  7.91M|        // upholds the safety contract of `self.it.next`.
  394|  7.91M|        unsafe {
  395|  7.91M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  7.91M|        }
  397|  7.91M|    }
_RNvNtCs8oHv9mjUfNq_6memchr6memchr6memchrCs4WjTcpTVJQo_5oxttl:
   27|  40.8k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  40.8k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  40.8k|    // pointer between start and end.
   30|  40.8k|    unsafe {
   31|  40.8k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  40.8k|        })
   34|  40.8k|    }
   35|  40.8k|}
_RNvNtCs8oHv9mjUfNq_6memchr6memchr12memchr2_iterCs4WjTcpTVJQo_5oxttl:
  232|  7.88M|pub fn memchr2_iter<'h>(
  233|  7.88M|    needle1: u8,
  234|  7.88M|    needle2: u8,
  235|  7.88M|    haystack: &'h [u8],
  236|  7.88M|) -> Memchr2<'h> {
  237|  7.88M|    Memchr2::new(needle1, needle2, haystack)
  238|  7.88M|}
_RNvMs2_NtCs8oHv9mjUfNq_6memchr6memchrNtB5_7Memchr23newCs4WjTcpTVJQo_5oxttl:
  377|  7.88M|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  7.88M|        Memchr2 {
  379|  7.88M|            needle1,
  380|  7.88M|            needle2,
  381|  7.88M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  7.88M|        }
  383|  7.88M|    }
_RNvNtCs8oHv9mjUfNq_6memchr6memchr7memchr2Cs4WjTcpTVJQo_5oxttl:
   92|   987k|pub fn memchr2(needle1: u8, needle2: u8, haystack: &[u8]) -> Option<usize> {
   93|   987k|    // SAFETY: memchr2_raw, when a match is found, always returns a valid
   94|   987k|    // pointer between start and end.
   95|   987k|    unsafe {
   96|   987k|        generic::search_slice_with_raw(haystack, |start, end| {
   97|       |            memchr2_raw(needle1, needle2, start, end)
   98|   987k|        })
   99|   987k|    }
  100|   987k|}
_RNvNtCs8oHv9mjUfNq_6memchr6memchr11memchr2_rawCs4WjTcpTVJQo_5oxttl:
  574|  8.90M|unsafe fn memchr2_raw(
  575|  8.90M|    needle1: u8,
  576|  8.90M|    needle2: u8,
  577|  8.90M|    start: *const u8,
  578|  8.90M|    end: *const u8,
  579|  8.90M|) -> Option<*const u8> {
  580|  8.90M|    #[cfg(target_arch = "x86_64")]
  581|  8.90M|    {
  582|  8.90M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  8.90M|    }
  584|  8.90M|    #[cfg(target_arch = "wasm32")]
  585|  8.90M|    {
  586|  8.90M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  8.90M|    }
  588|  8.90M|    #[cfg(target_arch = "aarch64")]
  589|  8.90M|    {
  590|  8.90M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  8.90M|    }
  592|  8.90M|    #[cfg(not(any(
  593|  8.90M|        target_arch = "x86_64",
  594|  8.90M|        target_arch = "wasm32",
  595|  8.90M|        target_arch = "aarch64"
  596|  8.90M|    )))]
  597|  8.90M|    {
  598|  8.90M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  8.90M|            .find_raw(start, end)
  600|  8.90M|    }
  601|  8.90M|}
_RNvNtCs8oHv9mjUfNq_6memchr6memchr10memchr_rawB3_:
  504|  40.8k|unsafe fn memchr_raw(
  505|  40.8k|    needle: u8,
  506|  40.8k|    start: *const u8,
  507|  40.8k|    end: *const u8,
  508|  40.8k|) -> Option<*const u8> {
  509|  40.8k|    #[cfg(target_arch = "x86_64")]
  510|  40.8k|    {
  511|  40.8k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  40.8k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  40.8k|        // time. This function also handles using a fallback if neither AVX2
  514|  40.8k|        // nor SSE2 (unusual) are available.
  515|  40.8k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  40.8k|    }
  517|  40.8k|    #[cfg(target_arch = "wasm32")]
  518|  40.8k|    {
  519|  40.8k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  40.8k|    }
  521|  40.8k|    #[cfg(target_arch = "aarch64")]
  522|  40.8k|    {
  523|  40.8k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  40.8k|    }
  525|  40.8k|    #[cfg(not(any(
  526|  40.8k|        target_arch = "x86_64",
  527|  40.8k|        target_arch = "wasm32",
  528|  40.8k|        target_arch = "aarch64"
  529|  40.8k|    )))]
  530|  40.8k|    {
  531|  40.8k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  40.8k|    }
  533|  40.8k|}
_RNCNvNtCs8oHv9mjUfNq_6memchr6memchr6memchr0B5_:
   31|  40.8k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|  40.8k|            memchr_raw(needle, start, end)
   33|  40.8k|        })

_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86sse2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  225|   430k|        unsafe fn movemask(self) -> SensibleMoveMask {
  226|   430k|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  227|   430k|        }
_RNvXs_NtCs8oHv9mjUfNq_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  148|  2.39M|    fn has_non_zero(self) -> bool {
  149|  2.39M|        self.0 != 0
  150|  2.39M|    }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  275|  3.40M|        unsafe fn movemask(self) -> SensibleMoveMask {
  276|  3.40M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  277|  3.40M|        }
_RNvXs_NtCs8oHv9mjUfNq_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  173|   721k|    fn first_offset(self) -> usize {
  174|   721k|        // We are dealing with little endian here (and if we aren't, we swap
  175|   721k|        // the bytes so we are in practice), where the most significant byte
  176|   721k|        // is at a higher address. That means the least significant bit that
  177|   721k|        // is set corresponds to the position of our first matching byte.
  178|   721k|        // That position corresponds to the number of zeros after the least
  179|   721k|        // significant bit.
  180|   721k|        self.get_for_offset().trailing_zeros() as usize
  181|   721k|    }
_RNvYNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtNtCs8oHv9mjUfNq_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   65|   240k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   66|   240k|        self.movemask().has_non_zero()
   67|   240k|    }
_RNvMNtCs8oHv9mjUfNq_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  128|   721k|    fn get_for_offset(self) -> u32 {
  129|   721k|        #[cfg(target_endian = "big")]
  130|   721k|        {
  131|   721k|            self.0.swap_bytes()
  132|   721k|        }
  133|   721k|        #[cfg(target_endian = "little")]
  134|   721k|        {
  135|   721k|            self.0
  136|   721k|        }
  137|   721k|    }
_RNvXs_NtCs8oHv9mjUfNq_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  163|   789k|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  164|   789k|        SensibleMoveMask(self.0 | other.0)
  165|   789k|    }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86sse2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  230|   554k|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  231|   554k|            _mm_cmpeq_epi8(self, vector2)
  232|   554k|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  265|   496k|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  266|   496k|            _mm256_load_si256(data as *const __m256i)
  267|   496k|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector2or:
  290|  2.38M|        unsafe fn or(self, vector2: Self) -> __m256i {
  291|  2.38M|            _mm256_or_si256(self, vector2)
  292|  2.38M|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  280|  4.35M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  281|  4.35M|            _mm256_cmpeq_epi8(self, vector2)
  282|  4.35M|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86sse2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  220|   284k|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  221|   284k|            _mm_loadu_si128(data as *const __m128i)
  222|   284k|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86sse2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  210|  17.8M|        unsafe fn splat(byte: u8) -> __m128i {
  211|  17.8M|            _mm_set1_epi8(byte as i8)
  212|  17.8M|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86sse2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iNtB4_6Vector2or:
  240|   269k|        unsafe fn or(self, vector2: Self) -> __m128i {
  241|   269k|            _mm_or_si128(self, vector2)
  242|   269k|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  270|  1.72M|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  271|  1.72M|            _mm256_loadu_si256(data as *const __m256i)
  272|  1.72M|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  260|  17.8M|        unsafe fn splat(byte: u8) -> __m256i {
  261|  17.8M|            _mm256_set1_epi8(byte as i8)
  262|  17.8M|        }

_RNvMs2_NtCsfr4O1C3G5Ja_9once_cell3impINtB5_8OnceCellNtNtCsdBW21Yiwikk_5alloc6string6StringE14is_initializedCs5ixuek62Ty3_13libfuzzer_sys:
   49|  12.0k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  12.0k|        // An `Acquire` load is enough because that makes all the initialization
   51|  12.0k|        // operations visible to us, and, this being a fast path, weaker
   52|  12.0k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  12.0k|        // `SeqCst` operations on the slow path.
   54|  12.0k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  12.0k|    }

_RNvMs4_NtCsfr4O1C3G5Ja_9once_cell4syncINtB5_8OnceCellNtNtCsdBW21Yiwikk_5alloc6string6StringE3getCs5ixuek62Ty3_13libfuzzer_sys:
  963|  12.0k|        pub fn get(&self) -> Option<&T> {
  964|  12.0k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  12.0k|                None
  969|       |            }
  970|  12.0k|        }

_RNvMCsebFzSuz8Vhk_10oxilangtagINtB2_11LanguageTagReE10into_innerCs4WjTcpTVJQo_5oxttl:
   54|  11.1k|    pub fn into_inner(self) -> T {
   55|  11.1k|        self.tag
   56|  11.1k|    }
_RNvMCsebFzSuz8Vhk_10oxilangtagINtB2_11LanguageTagReE5parseCs4WjTcpTVJQo_5oxttl:
   41|  17.8k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   42|  17.8k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   43|  11.1k|        Ok(Self { tag, positions })
   44|  17.8k|    }
_RNvXsE_CsebFzSuz8Vhk_10oxilangtagNtB5_16VoidOutputBufferNtNtCsl2lhD68vXAd_4core7default7Default7defaultCs4WjTcpTVJQo_5oxttl:
  547|  17.8k|#[derive(Default)]
_RINvCsebFzSuz8Vhk_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECsbrE1BkJ52QU_5oxrdf:
  621|  15.5k|fn parse_langtag(
  622|  15.5k|    input: &str,
  623|  15.5k|    output: &mut impl OutputBuffer,
  624|  15.5k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  625|  15.5k|    #[derive(PartialEq, Eq)]
  626|  15.5k|    enum State {
  627|  15.5k|        Start,
  628|  15.5k|        AfterLanguage,
  629|  15.5k|        AfterExtLang,
  630|  15.5k|        AfterScript,
  631|  15.5k|        AfterRegion,
  632|  15.5k|        InExtension { expected: bool },
  633|  15.5k|        InPrivateUse { expected: bool },
  634|  15.5k|    }
  635|  15.5k|
  636|  15.5k|    let mut state = State::Start;
  637|  15.5k|    let mut language_end = 0;
  638|  15.5k|    let mut extlang_end = 0;
  639|  15.5k|    let mut script_end = 0;
  640|  15.5k|    let mut region_end = 0;
  641|  15.5k|    let mut variant_end = 0;
  642|  15.5k|    let mut extension_end = 0;
  643|  15.5k|    let mut extlangs_count = 0;
  644|  25.6k|    for (subtag, end) in SubTagIterator::new(input) {
  645|  25.6k|        if subtag.is_empty() {
  646|      0|            return Err(LanguageTagParseError {
  647|      0|                kind: TagParseErrorKind::EmptySubtag,
  648|      0|            });
  649|  25.6k|        }
  650|  25.6k|        if subtag.len() > 8 {
  651|    584|            return Err(LanguageTagParseError {
  652|    584|                kind: TagParseErrorKind::SubtagTooLong,
  653|    584|            });
  654|  25.0k|        }
  655|  25.0k|        if state == State::Start {
  656|       |            // Primary language
  657|  14.9k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  658|  4.25k|                return Err(LanguageTagParseError {
  659|  4.25k|                    kind: TagParseErrorKind::InvalidLanguage,
  660|  4.25k|                });
  661|  10.7k|            }
  662|  10.7k|            language_end = end;
  663|  10.7k|            output.extend(to_lowercase(subtag));
  664|  10.7k|            if subtag.len() < 4 {
  665|  6.10k|                // extlangs are only allowed for short language tags
  666|  6.10k|                state = State::AfterLanguage;
  667|  6.10k|            } else {
  668|  4.61k|                state = State::AfterExtLang;
  669|  4.61k|            }
  670|  10.0k|        } else if let State::InPrivateUse { .. } = state {
  671|    256|            if !is_alphanumeric(subtag) {
  672|      0|                return Err(LanguageTagParseError {
  673|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  674|      0|                });
  675|    256|            }
  676|    256|            output.push('-');
  677|    256|            output.extend(to_lowercase(subtag));
  678|    256|            state = State::InPrivateUse { expected: false };
  679|  9.81k|        } else if subtag == "x" || subtag == "X" {
  680|       |            // We make sure extension is found
  681|    338|            if let State::InExtension { expected: true } = state {
  682|     16|                return Err(LanguageTagParseError {
  683|     16|                    kind: TagParseErrorKind::EmptyExtension,
  684|     16|                });
  685|    322|            }
  686|    322|            output.push('-');
  687|    322|            output.push('x');
  688|    322|            state = State::InPrivateUse { expected: true };
  689|  9.48k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  690|       |            // We make sure extension is found
  691|  2.09k|            if let State::InExtension { expected: true } = state {
  692|    412|                return Err(LanguageTagParseError {
  693|    412|                    kind: TagParseErrorKind::EmptyExtension,
  694|    412|                });
  695|  1.67k|            }
  696|  1.67k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  697|  1.67k|            output.push('-');
  698|  1.67k|            output.push(extension_tag);
  699|  1.67k|            state = State::InExtension { expected: true };
  700|  7.39k|        } else if let State::InExtension { .. } = state {
  701|  1.94k|            if !is_alphanumeric(subtag) {
  702|      0|                return Err(LanguageTagParseError {
  703|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  704|      0|                });
  705|  1.94k|            }
  706|  1.94k|            extension_end = end;
  707|  1.94k|            output.push('-');
  708|  1.94k|            output.extend(to_lowercase(subtag));
  709|  1.94k|            state = State::InExtension { expected: false };
  710|  5.44k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  711|    746|            extlangs_count += 1;
  712|    746|            if extlangs_count > 3 {
  713|      0|                return Err(LanguageTagParseError {
  714|      0|                    kind: TagParseErrorKind::TooManyExtlangs,
  715|      0|                });
  716|    746|            }
  717|    746|            // valid extlangs
  718|    746|            extlang_end = end;
  719|    746|            output.push('-');
  720|    746|            output.extend(to_lowercase(subtag));
  721|  4.69k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  722|  3.17k|            && subtag.len() == 4
  723|    630|            && is_alphabetic(subtag)
  724|    630|        {
  725|    630|            // Script
  726|    630|            script_end = end;
  727|    630|            output.push('-');
  728|    630|            output.extend(to_uppercase_first(subtag));
  729|    630|            state = State::AfterScript;
  730|  4.06k|        } else if (state == State::AfterLanguage
  731|  2.32k|            || state == State::AfterExtLang
  732|  1.51k|            || state == State::AfterScript)
  733|  2.91k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  734|  1.03k|                || subtag.len() == 3 && is_numeric(subtag))
  735|  1.88k|        {
  736|  1.88k|            // Region
  737|  1.88k|            region_end = end;
  738|  1.88k|            output.push('-');
  739|  1.88k|            output.extend(to_uppercase(subtag));
  740|  1.88k|            state = State::AfterRegion;
  741|  2.18k|        } else if (state == State::AfterLanguage
  742|  1.68k|            || state == State::AfterExtLang
  743|  1.51k|            || state == State::AfterScript
  744|  1.15k|            || state == State::AfterRegion)
  745|  2.18k|            && is_alphanumeric(subtag)
  746|  2.18k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  747|  1.04k|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  748|  1.14k|        {
  749|  1.14k|            // Variant
  750|  1.14k|            variant_end = end;
  751|  1.14k|            output.push('-');
  752|  1.14k|            output.extend(to_lowercase(subtag));
  753|  1.14k|            state = State::AfterRegion;
  754|  1.14k|        } else {
  755|  1.04k|            return Err(LanguageTagParseError {
  756|  1.04k|                kind: TagParseErrorKind::InvalidSubtag,
  757|  1.04k|            });
  758|       |        }
  759|       |    }
  760|       |
  761|       |    //We make sure we are in a correct final state
  762|  9.23k|    if let State::InExtension { expected: true } = state {
  763|    282|        return Err(LanguageTagParseError {
  764|    282|            kind: TagParseErrorKind::EmptyExtension,
  765|    282|        });
  766|  8.95k|    }
  767|  8.95k|    if let State::InPrivateUse { expected: true } = state {
  768|    126|        return Err(LanguageTagParseError {
  769|    126|            kind: TagParseErrorKind::EmptyPrivateUse,
  770|    126|        });
  771|  8.82k|    }
  772|  8.82k|
  773|  8.82k|    //We make sure we have not skipped anyone
  774|  8.82k|    if extlang_end < language_end {
  775|  8.08k|        extlang_end = language_end;
  776|  8.08k|    }
  777|  8.82k|    if script_end < extlang_end {
  778|  8.56k|        script_end = extlang_end;
  779|  8.56k|    }
  780|  8.82k|    if region_end < script_end {
  781|  7.53k|        region_end = script_end;
  782|  7.53k|    }
  783|  8.82k|    if variant_end < region_end {
  784|  7.69k|        variant_end = region_end;
  785|  7.69k|    }
  786|  8.82k|    if extension_end < variant_end {
  787|  7.90k|        extension_end = variant_end;
  788|  7.90k|    }
  789|       |
  790|  8.82k|    Ok(TagElementsPositions {
  791|  8.82k|        language_end,
  792|  8.82k|        extlang_end,
  793|  8.82k|        script_end,
  794|  8.82k|        region_end,
  795|  8.82k|        variant_end,
  796|  8.82k|        extension_end,
  797|  8.82k|    })
  798|  15.5k|}
_RINvXsr_CsebFzSuz8Vhk_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECsbrE1BkJ52QU_5oxrdf:
  560|  2.31k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsebFzSuz8Vhk_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECsbrE1BkJ52QU_5oxrdf:
  560|  14.8k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvCsebFzSuz8Vhk_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECsbrE1BkJ52QU_5oxrdf:
  576|  17.8k|fn parse_language_tag(
  577|  17.8k|    input: &str,
  578|  17.8k|    output: &mut impl OutputBuffer,
  579|  17.8k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  580|       |    //grandfathered tags
  581|  17.8k|    if let Some(tag) = GRANDFATHEREDS
  582|  17.8k|        .iter()
  583|  17.8k|        .find(|record| record.eq_ignore_ascii_case(input))
  584|       |    {
  585|      0|        output.push_str(tag);
  586|      0|        Ok(TagElementsPositions {
  587|      0|            language_end: tag.len(),
  588|      0|            extlang_end: tag.len(),
  589|      0|            script_end: tag.len(),
  590|      0|            region_end: tag.len(),
  591|      0|            variant_end: tag.len(),
  592|      0|            extension_end: tag.len(),
  593|      0|        })
  594|  17.8k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  595|       |        // private use
  596|  2.31k|        if !is_alphanumeric_or_dash(input) {
  597|      0|            Err(LanguageTagParseError {
  598|      0|                kind: TagParseErrorKind::ForbiddenChar,
  599|      0|            })
  600|  2.31k|        } else if input.len() == 2 {
  601|      0|            Err(LanguageTagParseError {
  602|      0|                kind: TagParseErrorKind::EmptyPrivateUse,
  603|      0|            })
  604|       |        } else {
  605|  2.31k|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  606|  2.31k|            Ok(TagElementsPositions {
  607|  2.31k|                language_end: input.len(),
  608|  2.31k|                extlang_end: input.len(),
  609|  2.31k|                script_end: input.len(),
  610|  2.31k|                region_end: input.len(),
  611|  2.31k|                variant_end: input.len(),
  612|  2.31k|                extension_end: input.len(),
  613|  2.31k|            })
  614|       |        }
  615|       |    } else {
  616|  15.5k|        parse_langtag(input, output)
  617|       |    }
  618|  17.8k|}
_RINvXsr_CsebFzSuz8Vhk_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECsbrE1BkJ52QU_5oxrdf:
  560|  1.88k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsebFzSuz8Vhk_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECsbrE1BkJ52QU_5oxrdf:
  560|    630|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCsebFzSuz8Vhk_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0CsbrE1BkJ52QU_5oxrdf:
  583|   464k|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvCsebFzSuz8Vhk_10oxilangtag23is_alphanumeric_or_dashCsbrE1BkJ52QU_5oxrdf:
  875|  2.31k|fn is_alphanumeric_or_dash(s: &str) -> bool {
  876|  2.31k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  877|  2.31k|}
_RNvXsw_CsebFzSuz8Vhk_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4nextCsbrE1BkJ52QU_5oxrdf:
  851|  34.8k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  852|  34.8k|        let tag = self.split.next()?;
  853|  25.6k|        let tag_end = self.position + tag.len();
  854|  25.6k|        self.position = tag_end + 1;
  855|  25.6k|        Some((tag, tag_end))
  856|  34.8k|    }
_RNvCsebFzSuz8Vhk_10oxilangtag12to_lowercaseCsbrE1BkJ52QU_5oxrdf:
  892|  14.8k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  893|  14.8k|    s.chars().map(|c| c.to_ascii_lowercase())
  894|  14.8k|}
_RNvCsebFzSuz8Vhk_10oxilangtag10is_numericCsbrE1BkJ52QU_5oxrdf:
  865|  1.02k|fn is_numeric(s: &str) -> bool {
  866|  1.02k|    s.chars().all(|x| x.is_ascii_digit())
  867|  1.02k|}
_RNvCsebFzSuz8Vhk_10oxilangtag12to_uppercaseCsbrE1BkJ52QU_5oxrdf:
  880|  1.88k|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  881|  1.88k|    s.chars().map(|c| c.to_ascii_uppercase())
  882|  1.88k|}
_RNvMsv_CsebFzSuz8Vhk_10oxilangtagNtB5_14SubTagIterator3newCsbrE1BkJ52QU_5oxrdf:
  839|  15.5k|    fn new(input: &'a str) -> Self {
  840|  15.5k|        Self {
  841|  15.5k|            split: input.split('-'),
  842|  15.5k|            position: 0,
  843|  15.5k|        }
  844|  15.5k|    }
_RNvXs_NvCsebFzSuz8Vhk_10oxilangtag13parse_langtagNtB4_5StateNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCsbrE1BkJ52QU_5oxrdf:
  625|  52.0k|    #[derive(PartialEq, Eq)]
_RNvCsebFzSuz8Vhk_10oxilangtag15is_alphanumericCsbrE1BkJ52QU_5oxrdf:
  870|  6.48k|fn is_alphanumeric(s: &str) -> bool {
  871|  6.48k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  872|  6.48k|}
_RNvCsebFzSuz8Vhk_10oxilangtag18to_uppercase_firstCsbrE1BkJ52QU_5oxrdf:
  886|    630|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  887|    630|    let mut chars = s.chars();
  888|    630|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  889|    630|}
_RNvXsq_CsebFzSuz8Vhk_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsbrE1BkJ52QU_5oxrdf:
  552|  10.6k|    fn push(&mut self, _: char) {}
_RNvCsebFzSuz8Vhk_10oxilangtag13is_alphabeticCsbrE1BkJ52QU_5oxrdf:
  860|  15.1k|fn is_alphabetic(s: &str) -> bool {
  861|  15.1k|    s.chars().all(|x| x.is_ascii_alphabetic())
  862|  15.1k|}
_RNCNvCsebFzSuz8Vhk_10oxilangtag15is_alphanumeric0B3_:
  871|  20.5k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNvXso_CsebFzSuz8Vhk_10oxilangtagNtB5_21LanguageTagParseErrorNtNtCsl2lhD68vXAd_4core3fmt7Display3fmt:
  482|  6.71k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  483|  6.71k|        match self.kind {
  484|       |            TagParseErrorKind::EmptyExtension => {
  485|    710|                write!(f, "If an extension subtag is present, it must not be empty")
  486|       |            }
  487|       |            TagParseErrorKind::EmptyPrivateUse => {
  488|    126|                write!(f, "If the `x` subtag is present, it must not be empty")
  489|       |            }
  490|       |            TagParseErrorKind::ForbiddenChar => {
  491|      0|                write!(f, "The langtag contains a char not allowed")
  492|       |            }
  493|  1.04k|            TagParseErrorKind::InvalidSubtag => write!(
  494|  1.04k|                f,
  495|  1.04k|                "A subtag fails to parse, it does not match any other subtags"
  496|  1.04k|            ),
  497|  4.25k|            TagParseErrorKind::InvalidLanguage => write!(f, "The given language subtag is invalid"),
  498|       |            TagParseErrorKind::SubtagTooLong => {
  499|    584|                write!(f, "A subtag may be eight characters in length at maximum")
  500|       |            }
  501|      0|            TagParseErrorKind::EmptySubtag => write!(f, "A subtag should not be empty"),
  502|       |            TagParseErrorKind::TooManyExtlangs => {
  503|      0|                write!(f, "At maximum three extlangs are allowed")
  504|       |            }
  505|       |        }
  506|  6.71k|    }
_RNCNvCsebFzSuz8Vhk_10oxilangtag13is_alphabetic0B3_:
  861|  48.6k|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCsebFzSuz8Vhk_10oxilangtag23is_alphanumeric_or_dash0B3_:
  876|  86.8k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
_RNCNvCsebFzSuz8Vhk_10oxilangtag10is_numeric0B3_:
  866|  1.02k|    s.chars().all(|x| x.is_ascii_digit())

_RNvXsZ_Cs72NQLJxIjgJ_5oxiriNtNtCsdBW21Yiwikk_5alloc6string6StringNtB5_12OutputBuffer8push_strCs4WjTcpTVJQo_5oxttl:
 1012|  18.4k|    fn push_str(&mut self, s: &str) {
 1013|  18.4k|        self.push_str(s);
 1014|  18.4k|    }
_RNvXsZ_Cs72NQLJxIjgJ_5oxiriNtNtCsdBW21Yiwikk_5alloc6string6StringNtB5_12OutputBuffer8truncateCs4WjTcpTVJQo_5oxttl:
 1022|  16.4k|    fn truncate(&mut self, new_len: usize) {
 1023|  16.4k|        self.truncate(new_len);
 1024|  16.4k|    }
_RNvXsZ_Cs72NQLJxIjgJ_5oxiriNtNtCsdBW21Yiwikk_5alloc6string6StringNtB5_12OutputBuffer3lenCs4WjTcpTVJQo_5oxttl:
 1027|  41.1k|    fn len(&self) -> usize {
 1028|  41.1k|        self.len()
 1029|  41.1k|    }
_RNvXsZ_Cs72NQLJxIjgJ_5oxiriNtNtCsdBW21Yiwikk_5alloc6string6StringNtB5_12OutputBuffer6as_strCs4WjTcpTVJQo_5oxttl:
 1032|  43.7k|    fn as_str(&self) -> &str {
 1033|  43.7k|        self.as_str()
 1034|  43.7k|    }
_RNvXsZ_Cs72NQLJxIjgJ_5oxiriNtNtCsdBW21Yiwikk_5alloc6string6StringNtB5_12OutputBuffer4pushCs4WjTcpTVJQo_5oxttl:
 1007|   506k|    fn push(&mut self, c: char) {
 1008|   506k|        self.push(c);
 1009|   506k|    }
_RNvXsZ_Cs72NQLJxIjgJ_5oxiriNtNtCsdBW21Yiwikk_5alloc6string6StringNtB5_12OutputBuffer5clearCs4WjTcpTVJQo_5oxttl:
 1017|  7.52k|    fn clear(&mut self) {
 1018|  7.52k|        self.clear();
 1019|  7.52k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE16parse_path_startCs4WjTcpTVJQo_5oxttl:
 1315|  2.01k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1316|  2.01k|        match c {
 1317|       |            None => {
 1318|    214|                self.output_positions.path_end = self.output.len();
 1319|    214|                self.output_positions.query_end = self.output.len();
 1320|    214|                Ok(())
 1321|       |            }
 1322|       |            Some('?') => {
 1323|    198|                self.output_positions.path_end = self.output.len();
 1324|    198|                self.output.push('?');
 1325|    198|                self.parse_query()
 1326|       |            }
 1327|       |            Some('#') => {
 1328|     54|                self.output_positions.path_end = self.output.len();
 1329|     54|                self.output_positions.query_end = self.output.len();
 1330|     54|                self.output.push('#');
 1331|     54|                self.parse_fragment()
 1332|       |            }
 1333|       |            Some('/') => {
 1334|  1.54k|                self.output.push('/');
 1335|  1.54k|                self.parse_path()
 1336|       |            }
 1337|      0|            Some(c) => {
 1338|      0|                self.read_url_codepoint_or_echar(c)?;
 1339|      0|                self.parse_path()
 1340|       |            }
 1341|       |        }
 1342|  2.01k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE33read_url_query_codepoint_or_echarCs4WjTcpTVJQo_5oxttl:
 1422|  70.3k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1423|  70.3k|        if c == '%' {
 1424|    798|            self.read_echar()
 1425|  69.5k|        } else if is_url_query_code_point(c) {
 1426|  67.4k|            self.output.push(c);
 1427|  67.4k|            Ok(())
 1428|       |        } else {
 1429|  2.12k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1430|       |        }
 1431|  70.3k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE20parse_relative_slashCs4WjTcpTVJQo_5oxttl:
 1213|  2.94k|    fn parse_relative_slash(&mut self, base: &IriRef<&'a str>) -> Result<(), IriParseError> {
 1214|  2.94k|        if self.input.starts_with('/') {
 1215|    142|            self.input.next();
 1216|    142|            self.output.push_str(&base.iri[..base.positions.scheme_end]);
 1217|    142|            self.output_positions.scheme_end = base.positions.scheme_end;
 1218|    142|            self.output.push('/');
 1219|    142|            self.output.push('/');
 1220|    142|            self.parse_authority()
 1221|       |        } else {
 1222|  2.80k|            self.output
 1223|  2.80k|                .push_str(&base.iri[..base.positions.authority_end]);
 1224|  2.80k|            self.output.push('/');
 1225|  2.80k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1226|  2.80k|            self.output_positions.authority_end = base.positions.authority_end;
 1227|  2.80k|            self.parse_path()
 1228|       |        }
 1229|  2.94k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE11parse_queryCs4WjTcpTVJQo_5oxttl:
 1380|  3.45k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1381|  71.2k|        while let Some(c) = self.input.next() {
 1382|  70.6k|            if c == '#' {
 1383|    264|                self.output_positions.query_end = self.output.len();
 1384|    264|                self.output.push('#');
 1385|    264|                return self.parse_fragment();
 1386|       |            } else {
 1387|  70.3k|                self.read_url_query_codepoint_or_echar(c)?
 1388|       |            }
 1389|       |        }
 1390|    634|        self.output_positions.query_end = self.output.len();
 1391|    634|        Ok(())
 1392|  3.45k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE18parse_scheme_startCs4WjTcpTVJQo_5oxttl:
 1101|  22.9k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1102|  22.9k|        match self.input.front() {
 1103|     58|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1104|  20.7k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1105|  10.9k|            _ => self.parse_relative(),
 1106|       |        }
 1107|  22.9k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE10parse_hostCs4WjTcpTVJQo_5oxttl:
 1255|  2.16k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1256|  2.16k|        if self.input.starts_with('[') {
 1257|       |            // IP v6
 1258|      0|            let start_position = self.input.position;
 1259|      0|            while let Some(c) = self.input.next() {
 1260|      0|                self.output.push(c);
 1261|      0|                if c == ']' {
 1262|      0|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1263|      0|                    if let Err(error) = Ipv6Addr::from_str(ip) {
 1264|      0|                        return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1265|      0|                    }
 1266|      0|
 1267|      0|                    let c = self.input.next();
 1268|      0|                    return match c {
 1269|       |                        Some(':') => {
 1270|      0|                            self.output.push(':');
 1271|      0|                            self.parse_port()
 1272|       |                        }
 1273|       |                        None | Some('/') | Some('?') | Some('#') => {
 1274|      0|                            self.output_positions.authority_end = self.output.len();
 1275|      0|                            self.parse_path_start(c)
 1276|       |                        }
 1277|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1278|       |                    };
 1279|      0|                }
 1280|       |            }
 1281|      0|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1282|       |        } else {
 1283|       |            // Other host
 1284|  56.1k|            loop {
 1285|  56.1k|                let c = self.input.next();
 1286|  56.1k|                match c {
 1287|       |                    Some(':') => {
 1288|  1.49k|                        self.output.push(':');
 1289|  1.49k|                        return self.parse_port();
 1290|       |                    }
 1291|       |                    None | Some('/') | Some('?') | Some('#') => {
 1292|    586|                        self.output_positions.authority_end = self.output.len();
 1293|    586|                        return self.parse_path_start(c);
 1294|       |                    }
 1295|  54.1k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1296|       |                }
 1297|       |            }
 1298|       |        }
 1299|  2.16k|    }
_RNvMCs72NQLJxIjgJ_5oxiriINtB2_6IriRefNtNtCsdBW21Yiwikk_5alloc6string6StringE7resolveCs4WjTcpTVJQo_5oxttl:
   71|  22.9k|    pub fn resolve(&self, iri: &str) -> Result<IriRef<String>, IriParseError> {
   72|  22.9k|        let mut target_buffer = String::with_capacity(self.iri.len() + iri.len());
   73|  22.9k|        let positions = IriParser::parse(iri, Some(self.as_ref()), &mut target_buffer)?;
   74|  10.4k|        Ok(IriRef {
   75|  10.4k|            iri: target_buffer,
   76|  10.4k|            positions,
   77|  10.4k|        })
   78|  22.9k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE12parse_schemeCs4WjTcpTVJQo_5oxttl:
 1109|  11.9k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1110|   102k|        loop {
 1111|   102k|            let c = self.input.next();
 1112|   101k|            match c {
 1113|   101k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1114|  90.4k|                    self.output.push(c)
 1115|       |                }
 1116|       |                Some(':') => {
 1117|  4.45k|                    self.output.push(':');
 1118|  4.45k|                    self.output_positions.scheme_end = self.output.len();
 1119|  4.45k|                    self.input_scheme_end = self.input.position;
 1120|  4.45k|                    return if self.input.starts_with('/') {
 1121|  3.40k|                        self.input.next();
 1122|  3.40k|                        self.output.push('/');
 1123|  3.40k|                        self.parse_path_or_authority()
 1124|       |                    } else {
 1125|  1.04k|                        self.output_positions.authority_end = self.output.len();
 1126|  1.04k|                        self.parse_path()
 1127|       |                    };
 1128|       |                }
 1129|       |                _ => {
 1130|  7.52k|                    self.input = ParserInput {
 1131|  7.52k|                        value: self.iri.chars(),
 1132|  7.52k|                        position: 0,
 1133|  7.52k|                    }; // reset
 1134|  7.52k|                    self.output.clear();
 1135|  7.52k|                    return self.parse_relative();
 1136|       |                }
 1137|       |            }
 1138|       |        }
 1139|  11.9k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE10parse_portCs4WjTcpTVJQo_5oxttl:
 1301|  1.49k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1302|  2.27k|        loop {
 1303|  2.27k|            let c = self.input.next();
 1304|  2.25k|            match c {
 1305|  2.25k|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1306|       |                Some('/') | Some('?') | Some('#') | None => {
 1307|  1.42k|                    self.output_positions.authority_end = self.output.len();
 1308|  1.42k|                    return self.parse_path_start(c);
 1309|       |                }
 1310|     66|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1311|       |            }
 1312|       |        }
 1313|  1.49k|    }
_RNvMCs72NQLJxIjgJ_5oxiriINtB2_6IriRefNtNtCsdBW21Yiwikk_5alloc6string6StringE6as_refCs4WjTcpTVJQo_5oxttl:
  101|  22.9k|    pub fn as_ref(&self) -> IriRef<&str> {
  102|  22.9k|        IriRef {
  103|  22.9k|            iri: &self.iri,
  104|  22.9k|            positions: self.positions,
  105|  22.9k|        }
  106|  22.9k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE14parse_relativeCs4WjTcpTVJQo_5oxttl:
 1152|  18.4k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1153|  18.4k|        if let Some(base) = self.base {
 1154|  18.4k|            match self.input.front() {
 1155|       |                None => {
 1156|  2.12k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1157|  2.12k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1158|  2.12k|                    self.output_positions.authority_end = base.positions.authority_end;
 1159|  2.12k|                    self.output_positions.path_end = base.positions.path_end;
 1160|  2.12k|                    self.output_positions.query_end = base.positions.query_end;
 1161|  2.12k|                    Ok(())
 1162|       |                }
 1163|       |                Some('/') => {
 1164|  2.94k|                    self.input.next();
 1165|  2.94k|                    self.parse_relative_slash(&base)
 1166|       |                }
 1167|       |                Some('?') => {
 1168|  2.02k|                    self.input.next();
 1169|  2.02k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1170|  2.02k|                    self.output.push('?');
 1171|  2.02k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1172|  2.02k|                    self.output_positions.authority_end = base.positions.authority_end;
 1173|  2.02k|                    self.output_positions.path_end = base.positions.path_end;
 1174|  2.02k|                    self.parse_query()
 1175|       |                }
 1176|       |                Some('#') => {
 1177|    988|                    self.input.next();
 1178|    988|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1179|    988|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1180|    988|                    self.output_positions.authority_end = base.positions.authority_end;
 1181|    988|                    self.output_positions.path_end = base.positions.path_end;
 1182|    988|                    self.output_positions.query_end = base.positions.query_end;
 1183|    988|                    self.output.push('#');
 1184|    988|                    self.parse_fragment()
 1185|       |                }
 1186|       |                _ => {
 1187|  10.3k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1188|  10.3k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1189|  10.3k|                    self.output_positions.authority_end = base.positions.authority_end;
 1190|  10.3k|                    self.output_positions.path_end = base.positions.path_end;
 1191|  10.3k|                    self.remove_last_segment();
 1192|  10.3k|                    if self.output.len() > base.positions.scheme_end {
 1193|  10.3k|                        // We have some path or authority, we keep a base '/'
 1194|  10.3k|                        self.output.push('/');
 1195|  10.3k|                    }
 1196|  10.3k|                    self.parse_path()
 1197|       |                }
 1198|       |            }
 1199|       |        } else {
 1200|      0|            self.output_positions.scheme_end = 0;
 1201|      0|            self.input_scheme_end = 0;
 1202|      0|            if self.input.starts_with('/') {
 1203|      0|                self.input.next();
 1204|      0|                self.output.push('/');
 1205|      0|                self.parse_path_or_authority()
 1206|       |            } else {
 1207|      0|                self.output_positions.authority_end = 0;
 1208|      0|                self.parse_path()
 1209|       |            }
 1210|       |        }
 1211|  18.4k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE10parse_pathCs4WjTcpTVJQo_5oxttl:
 1344|  15.8k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1345|   155k|        loop {
 1346|   155k|            let c = self.input.next();
 1347|   155k|            match c {
 1348|       |                None | Some('/') | Some('?') | Some('#') => {
 1349|  15.0k|                    if self.output.as_str().ends_with("/..") {
 1350|    688|                        self.remove_last_segment();
 1351|    688|                        self.remove_last_segment();
 1352|    688|                        self.output.push('/');
 1353|  14.3k|                    } else if self.output.as_str().ends_with("/.") {
 1354|  2.57k|                        self.remove_last_segment();
 1355|  2.57k|                        self.output.push('/');
 1356|  11.7k|                    } else if c == Some('/') {
 1357|  3.67k|                        self.output.push('/');
 1358|  8.12k|                    }
 1359|       |
 1360|  15.0k|                    if c == Some('?') {
 1361|  1.23k|                        self.output_positions.path_end = self.output.len();
 1362|  1.23k|                        self.output.push('?');
 1363|  1.23k|                        return self.parse_query();
 1364|  13.8k|                    } else if c == Some('#') {
 1365|  4.21k|                        self.output_positions.path_end = self.output.len();
 1366|  4.21k|                        self.output_positions.query_end = self.output.len();
 1367|  4.21k|                        self.output.push('#');
 1368|  4.21k|                        return self.parse_fragment();
 1369|  9.60k|                    } else if c == None {
 1370|  5.93k|                        self.output_positions.path_end = self.output.len();
 1371|  5.93k|                        self.output_positions.query_end = self.output.len();
 1372|  5.93k|                        return Ok(());
 1373|  3.67k|                    }
 1374|       |                }
 1375|   139k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1376|       |            }
 1377|       |        }
 1378|  15.8k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE10read_echarCs4WjTcpTVJQo_5oxttl:
 1434|  2.62k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1435|  2.62k|        let c1 = self.input.next();
 1436|  2.62k|        let c2 = self.input.next();
 1437|  2.62k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1438|    908|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1439|       |        {
 1440|    806|            self.output.push('%');
 1441|    806|            self.output.push(c1.unwrap());
 1442|    806|            self.output.push(c2.unwrap());
 1443|    806|            Ok(())
 1444|       |        } else {
 1445|  1.81k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1446|  1.81k|                Some('%'),
 1447|  1.81k|                c1,
 1448|  1.81k|                c2,
 1449|  1.81k|            ]))
 1450|       |        }
 1451|  2.62k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE27read_url_codepoint_or_echarCs4WjTcpTVJQo_5oxttl:
 1410|   312k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1411|   312k|        if c == '%' {
 1412|  1.82k|            self.read_echar()
 1413|   310k|        } else if is_url_code_point(c) {
 1414|   302k|            self.output.push(c);
 1415|   302k|            Ok(())
 1416|       |        } else {
 1417|  8.44k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1418|       |        }
 1419|   312k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE5parseCs4WjTcpTVJQo_5oxttl:
 1076|  22.9k|    fn parse(
 1077|  22.9k|        iri: &'a str,
 1078|  22.9k|        base: Option<IriRef<&'a str>>,
 1079|  22.9k|        output: &'a mut O,
 1080|  22.9k|    ) -> Result<IriElementsPositions, IriParseError> {
 1081|  22.9k|        let mut parser = Self {
 1082|  22.9k|            iri,
 1083|  22.9k|            base,
 1084|  22.9k|            input: ParserInput {
 1085|  22.9k|                value: iri.chars(),
 1086|  22.9k|                position: 0,
 1087|  22.9k|            },
 1088|  22.9k|            output,
 1089|  22.9k|            output_positions: IriElementsPositions {
 1090|  22.9k|                scheme_end: 0,
 1091|  22.9k|                authority_end: 0,
 1092|  22.9k|                path_end: 0,
 1093|  22.9k|                query_end: 0,
 1094|  22.9k|            },
 1095|  22.9k|            input_scheme_end: 0,
 1096|  22.9k|        };
 1097|  22.9k|        parser.parse_scheme_start()?;
 1098|  10.4k|        Ok(parser.output_positions)
 1099|  22.9k|    }
_RNCNvMs11_Cs72NQLJxIjgJ_5oxiriINtB8_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE10read_echars_0Cs4WjTcpTVJQo_5oxttl:
 1438|    892|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE19remove_last_segmentCs4WjTcpTVJQo_5oxttl:
 1401|  14.3k|    fn remove_last_segment(&mut self) {
 1402|  14.3k|        let last_slash_position = self.output.as_str()[self.output_positions.authority_end..]
 1403|  14.3k|            .rfind('/')
 1404|  14.3k|            .unwrap_or(0);
 1405|  14.3k|        self.output
 1406|  14.3k|            .truncate(last_slash_position + self.output_positions.authority_end)
 1407|  14.3k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE23parse_path_or_authorityCs4WjTcpTVJQo_5oxttl:
 1141|  3.40k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1142|  3.40k|        if self.input.starts_with('/') {
 1143|  3.33k|            self.input.next();
 1144|  3.33k|            self.output.push('/');
 1145|  3.33k|            self.parse_authority()
 1146|       |        } else {
 1147|     68|            self.output_positions.authority_end = self.output.len() - 1;
 1148|     68|            self.parse_path()
 1149|       |        }
 1150|  3.40k|    }
_RINvMs11_Cs72NQLJxIjgJ_5oxiriINtB7_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE11parse_erroruECs4WjTcpTVJQo_5oxttl:
 1454|  12.5k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1455|  12.5k|        Err(IriParseError { kind })
 1456|  12.5k|    }
_RNvMsp_Cs72NQLJxIjgJ_5oxiriINtB5_3IriNtNtCsdBW21Yiwikk_5alloc6string6StringE7resolveCs4WjTcpTVJQo_5oxttl:
  516|  22.9k|    pub fn resolve(&self, iri: &str) -> Result<Iri<String>, IriParseError> {
  517|  22.9k|        Ok(Iri(self.0.resolve(iri)?))
  518|  22.9k|    }
_RNCNvMs11_Cs72NQLJxIjgJ_5oxiriINtB8_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE10read_echar0Cs4WjTcpTVJQo_5oxttl:
 1437|  2.58k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE14parse_fragmentCs4WjTcpTVJQo_5oxttl:
 1394|  5.52k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1395|  43.2k|        while let Some(c) = self.input.next() {
 1396|  41.6k|            self.read_url_codepoint_or_echar(c)?
 1397|       |        }
 1398|  1.55k|        Ok(())
 1399|  5.52k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE15parse_authorityCs4WjTcpTVJQo_5oxttl:
 1231|  3.47k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1232|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1233|  78.9k|        loop {
 1234|  78.9k|            let c = self.input.next();
 1235|  78.9k|            match c {
 1236|       |                Some('@') => {
 1237|     50|                    self.output.push('@');
 1238|     50|                    return self.parse_host();
 1239|       |                }
 1240|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1241|  2.11k|                    self.input = ParserInput {
 1242|  2.11k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1243|  2.11k|                        position: self.input_scheme_end + 2,
 1244|  2.11k|                    };
 1245|  2.11k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1246|  2.11k|                    return self.parse_host();
 1247|       |                }
 1248|  76.7k|                Some(c) => {
 1249|  76.7k|                    self.read_url_codepoint_or_echar(c)?;
 1250|       |                }
 1251|       |            }
 1252|       |        }
 1253|  3.47k|    }
_RNvMs10_Cs72NQLJxIjgJ_5oxiriNtB6_11ParserInput4nextCs4WjTcpTVJQo_5oxttl:
 1043|   527k|    fn next(&mut self) -> Option<char> {
 1044|   527k|        if let Some(head) = self.value.next() {
 1045|   517k|            self.position += head.len_utf8();
 1046|   517k|            Some(head)
 1047|       |        } else {
 1048|  10.1k|            None
 1049|       |        }
 1050|   527k|    }
_RNvMs10_Cs72NQLJxIjgJ_5oxiriNtB6_11ParserInput11starts_withCs4WjTcpTVJQo_5oxttl:
 1058|  12.9k|    fn starts_with(&self, c: char) -> bool {
 1059|  12.9k|        self.value.as_str().starts_with(c)
 1060|  12.9k|    }
_RNvMs10_Cs72NQLJxIjgJ_5oxiriNtB6_11ParserInput5frontCs4WjTcpTVJQo_5oxttl:
 1053|  41.4k|    fn front(&self) -> Option<char> {
 1054|  41.4k|        self.value.clone().next()
 1055|  41.4k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_pathCsbrE1BkJ52QU_5oxrdf:
 1344|   148k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1345|  3.11M|        loop {
 1346|  3.11M|            let c = self.input.next();
 1347|  3.11M|            match c {
 1348|       |                None | Some('/') | Some('?') | Some('#') => {
 1349|   395k|                    if self.output.as_str().ends_with("/..") {
 1350|      0|                        self.remove_last_segment();
 1351|      0|                        self.remove_last_segment();
 1352|      0|                        self.output.push('/');
 1353|   395k|                    } else if self.output.as_str().ends_with("/.") {
 1354|      0|                        self.remove_last_segment();
 1355|      0|                        self.output.push('/');
 1356|   395k|                    } else if c == Some('/') {
 1357|   246k|                        self.output.push('/');
 1358|   246k|                    }
 1359|       |
 1360|   395k|                    if c == Some('?') {
 1361|    103|                        self.output_positions.path_end = self.output.len();
 1362|    103|                        self.output.push('?');
 1363|    103|                        return self.parse_query();
 1364|   395k|                    } else if c == Some('#') {
 1365|   123k|                        self.output_positions.path_end = self.output.len();
 1366|   123k|                        self.output_positions.query_end = self.output.len();
 1367|   123k|                        self.output.push('#');
 1368|   123k|                        return self.parse_fragment();
 1369|   271k|                    } else if c == None {
 1370|  24.9k|                        self.output_positions.path_end = self.output.len();
 1371|  24.9k|                        self.output_positions.query_end = self.output.len();
 1372|  24.9k|                        return Ok(());
 1373|   246k|                    }
 1374|       |                }
 1375|  2.71M|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1376|       |            }
 1377|       |        }
 1378|   148k|    }
_RNvXsV_Cs72NQLJxIjgJ_5oxiriINtB5_3IriNtNtCsdBW21Yiwikk_5alloc6string6StringEINtNtCsl2lhD68vXAd_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsbrE1BkJ52QU_5oxrdf:
  871|   148k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  872|   148k|        if iri.is_absolute() {
  873|   148k|            Ok(Self(iri))
  874|       |        } else {
  875|      0|            Err(IriParseError {
  876|      0|                kind: IriParseErrorKind::NoScheme,
  877|      0|            })
  878|       |        }
  879|   148k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE18parse_scheme_startCsbrE1BkJ52QU_5oxrdf:
 1101|   148k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1102|   148k|        match self.input.front() {
 1103|      0|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1104|   148k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1105|      0|            _ => self.parse_relative(),
 1106|       |        }
 1107|   148k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_hostCsbrE1BkJ52QU_5oxrdf:
 1255|   148k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1256|   148k|        if self.input.starts_with('[') {
 1257|       |            // IP v6
 1258|      0|            let start_position = self.input.position;
 1259|      0|            while let Some(c) = self.input.next() {
 1260|      0|                self.output.push(c);
 1261|      0|                if c == ']' {
 1262|      0|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1263|      0|                    if let Err(error) = Ipv6Addr::from_str(ip) {
 1264|      0|                        return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1265|      0|                    }
 1266|      0|
 1267|      0|                    let c = self.input.next();
 1268|      0|                    return match c {
 1269|       |                        Some(':') => {
 1270|      0|                            self.output.push(':');
 1271|      0|                            self.parse_port()
 1272|       |                        }
 1273|       |                        None | Some('/') | Some('?') | Some('#') => {
 1274|      0|                            self.output_positions.authority_end = self.output.len();
 1275|      0|                            self.parse_path_start(c)
 1276|       |                        }
 1277|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1278|       |                    };
 1279|      0|                }
 1280|       |            }
 1281|      0|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1282|       |        } else {
 1283|       |            // Other host
 1284|  1.65M|            loop {
 1285|  1.65M|                let c = self.input.next();
 1286|  1.65M|                match c {
 1287|       |                    Some(':') => {
 1288|      0|                        self.output.push(':');
 1289|      0|                        return self.parse_port();
 1290|       |                    }
 1291|       |                    None | Some('/') | Some('?') | Some('#') => {
 1292|   148k|                        self.output_positions.authority_end = self.output.len();
 1293|   148k|                        return self.parse_path_start(c);
 1294|       |                    }
 1295|  1.50M|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1296|       |                }
 1297|       |            }
 1298|       |        }
 1299|   148k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE16parse_path_startCsbrE1BkJ52QU_5oxrdf:
 1315|   148k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1316|   148k|        match c {
 1317|       |            None => {
 1318|     11|                self.output_positions.path_end = self.output.len();
 1319|     11|                self.output_positions.query_end = self.output.len();
 1320|     11|                Ok(())
 1321|       |            }
 1322|       |            Some('?') => {
 1323|      0|                self.output_positions.path_end = self.output.len();
 1324|      0|                self.output.push('?');
 1325|      0|                self.parse_query()
 1326|       |            }
 1327|       |            Some('#') => {
 1328|      0|                self.output_positions.path_end = self.output.len();
 1329|      0|                self.output_positions.query_end = self.output.len();
 1330|      0|                self.output.push('#');
 1331|      0|                self.parse_fragment()
 1332|       |            }
 1333|       |            Some('/') => {
 1334|   148k|                self.output.push('/');
 1335|   148k|                self.parse_path()
 1336|       |            }
 1337|      0|            Some(c) => {
 1338|      0|                self.read_url_codepoint_or_echar(c)?;
 1339|      0|                self.parse_path()
 1340|       |            }
 1341|       |        }
 1342|   148k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE33read_url_query_codepoint_or_echarCsbrE1BkJ52QU_5oxrdf:
 1422|  1.14k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1423|  1.14k|        if c == '%' {
 1424|      3|            self.read_echar()
 1425|  1.13k|        } else if is_url_query_code_point(c) {
 1426|  1.13k|            self.output.push(c);
 1427|  1.13k|            Ok(())
 1428|       |        } else {
 1429|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1430|       |        }
 1431|  1.14k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10read_echarCsbrE1BkJ52QU_5oxrdf:
 1434|      3|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1435|      3|        let c1 = self.input.next();
 1436|      3|        let c2 = self.input.next();
 1437|      3|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1438|      3|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1439|       |        {
 1440|      3|            self.output.push('%');
 1441|      3|            self.output.push(c1.unwrap());
 1442|      3|            self.output.push(c2.unwrap());
 1443|      3|            Ok(())
 1444|       |        } else {
 1445|      0|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1446|      0|                Some('%'),
 1447|      0|                c1,
 1448|      0|                c2,
 1449|      0|            ]))
 1450|       |        }
 1451|      3|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE5parseCsbrE1BkJ52QU_5oxrdf:
 1076|   148k|    fn parse(
 1077|   148k|        iri: &'a str,
 1078|   148k|        base: Option<IriRef<&'a str>>,
 1079|   148k|        output: &'a mut O,
 1080|   148k|    ) -> Result<IriElementsPositions, IriParseError> {
 1081|   148k|        let mut parser = Self {
 1082|   148k|            iri,
 1083|   148k|            base,
 1084|   148k|            input: ParserInput {
 1085|   148k|                value: iri.chars(),
 1086|   148k|                position: 0,
 1087|   148k|            },
 1088|   148k|            output,
 1089|   148k|            output_positions: IriElementsPositions {
 1090|   148k|                scheme_end: 0,
 1091|   148k|                authority_end: 0,
 1092|   148k|                path_end: 0,
 1093|   148k|                query_end: 0,
 1094|   148k|            },
 1095|   148k|            input_scheme_end: 0,
 1096|   148k|        };
 1097|   148k|        parser.parse_scheme_start()?;
 1098|   148k|        Ok(parser.output_positions)
 1099|   148k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE14parse_fragmentCsbrE1BkJ52QU_5oxrdf:
 1394|   123k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1395|   715k|        while let Some(c) = self.input.next() {
 1396|   592k|            self.read_url_codepoint_or_echar(c)?
 1397|       |        }
 1398|   123k|        Ok(())
 1399|   123k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE12parse_schemeCsbrE1BkJ52QU_5oxrdf:
 1109|   148k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1110|   742k|        loop {
 1111|   742k|            let c = self.input.next();
 1112|   742k|            match c {
 1113|   742k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1114|   593k|                    self.output.push(c)
 1115|       |                }
 1116|       |                Some(':') => {
 1117|   148k|                    self.output.push(':');
 1118|   148k|                    self.output_positions.scheme_end = self.output.len();
 1119|   148k|                    self.input_scheme_end = self.input.position;
 1120|   148k|                    return if self.input.starts_with('/') {
 1121|   148k|                        self.input.next();
 1122|   148k|                        self.output.push('/');
 1123|   148k|                        self.parse_path_or_authority()
 1124|       |                    } else {
 1125|      2|                        self.output_positions.authority_end = self.output.len();
 1126|      2|                        self.parse_path()
 1127|       |                    };
 1128|       |                }
 1129|       |                _ => {
 1130|      0|                    self.input = ParserInput {
 1131|      0|                        value: self.iri.chars(),
 1132|      0|                        position: 0,
 1133|      0|                    }; // reset
 1134|      0|                    self.output.clear();
 1135|      0|                    return self.parse_relative();
 1136|       |                }
 1137|       |            }
 1138|       |        }
 1139|   148k|    }
_RNvMsp_Cs72NQLJxIjgJ_5oxiriINtB5_3IriNtNtCsdBW21Yiwikk_5alloc6string6StringE5parseCsbrE1BkJ52QU_5oxrdf:
  501|   148k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  502|   148k|        IriRef::parse(iri)?.try_into()
  503|   148k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE23parse_path_or_authorityCsbrE1BkJ52QU_5oxrdf:
 1141|   148k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1142|   148k|        if self.input.starts_with('/') {
 1143|   148k|            self.input.next();
 1144|   148k|            self.output.push('/');
 1145|   148k|            self.parse_authority()
 1146|       |        } else {
 1147|      0|            self.output_positions.authority_end = self.output.len() - 1;
 1148|      0|            self.parse_path()
 1149|       |        }
 1150|   148k|    }
_RNvMCs72NQLJxIjgJ_5oxiriINtB2_6IriRefNtNtCsdBW21Yiwikk_5alloc6string6StringE5parseCsbrE1BkJ52QU_5oxrdf:
   55|   148k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   56|   148k|        let positions = IriParser::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   57|   148k|        Ok(Self { iri, positions })
   58|   148k|    }
_RNvMCs72NQLJxIjgJ_5oxiriINtB2_6IriRefNtNtCsdBW21Yiwikk_5alloc6string6StringE11is_absoluteCsbrE1BkJ52QU_5oxrdf:
  146|   148k|    pub fn is_absolute(&self) -> bool {
  147|   148k|        self.positions.scheme_end != 0
  148|   148k|    }
_RNCNvMs11_Cs72NQLJxIjgJ_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferE10read_echars_0CsbrE1BkJ52QU_5oxrdf:
 1438|      3|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE11parse_queryCsbrE1BkJ52QU_5oxrdf:
 1380|    103|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1381|  1.24k|        while let Some(c) = self.input.next() {
 1382|  1.14k|            if c == '#' {
 1383|      7|                self.output_positions.query_end = self.output.len();
 1384|      7|                self.output.push('#');
 1385|      7|                return self.parse_fragment();
 1386|       |            } else {
 1387|  1.14k|                self.read_url_query_codepoint_or_echar(c)?
 1388|       |            }
 1389|       |        }
 1390|     96|        self.output_positions.query_end = self.output.len();
 1391|     96|        Ok(())
 1392|    103|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE15parse_authorityCsbrE1BkJ52QU_5oxrdf:
 1231|   148k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1232|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1233|  1.65M|        loop {
 1234|  1.65M|            let c = self.input.next();
 1235|  1.65M|            match c {
 1236|       |                Some('@') => {
 1237|      0|                    self.output.push('@');
 1238|      0|                    return self.parse_host();
 1239|       |                }
 1240|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1241|   148k|                    self.input = ParserInput {
 1242|   148k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1243|   148k|                        position: self.input_scheme_end + 2,
 1244|   148k|                    };
 1245|   148k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1246|   148k|                    return self.parse_host();
 1247|       |                }
 1248|  1.50M|                Some(c) => {
 1249|  1.50M|                    self.read_url_codepoint_or_echar(c)?;
 1250|       |                }
 1251|       |            }
 1252|       |        }
 1253|   148k|    }
_RNvMsp_Cs72NQLJxIjgJ_5oxiriINtB5_3IriNtNtCsdBW21Yiwikk_5alloc6string6StringE10into_innerCsbrE1BkJ52QU_5oxrdf:
  568|   128k|    pub fn into_inner(self) -> T {
  569|   128k|        self.0.into_inner()
  570|   128k|    }
_RNvMCs72NQLJxIjgJ_5oxiriINtB2_6IriRefNtNtCsdBW21Yiwikk_5alloc6string6StringE10into_innerCsbrE1BkJ52QU_5oxrdf:
  132|   128k|    pub fn into_inner(self) -> T {
  133|   128k|        self.iri
  134|   128k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE27read_url_codepoint_or_echarCsbrE1BkJ52QU_5oxrdf:
 1410|  6.32M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1411|  6.32M|        if c == '%' {
 1412|      0|            self.read_echar()
 1413|  6.32M|        } else if is_url_code_point(c) {
 1414|  6.32M|            self.output.push(c);
 1415|  6.32M|            Ok(())
 1416|       |        } else {
 1417|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1418|       |        }
 1419|  6.32M|    }
_RNCNvMs11_Cs72NQLJxIjgJ_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferE10read_echar0CsbrE1BkJ52QU_5oxrdf:
 1437|      3|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs10_Cs72NQLJxIjgJ_5oxiriNtB6_11ParserInput5frontCsbrE1BkJ52QU_5oxrdf:
 1053|   148k|    fn front(&self) -> Option<char> {
 1054|   148k|        self.value.clone().next()
 1055|   148k|    }
_RNvMs10_Cs72NQLJxIjgJ_5oxiriNtB6_11ParserInput11starts_withCsbrE1BkJ52QU_5oxrdf:
 1058|   445k|    fn starts_with(&self, c: char) -> bool {
 1059|   445k|        self.value.as_str().starts_with(c)
 1060|   445k|    }
_RNvXs1b_Cs72NQLJxIjgJ_5oxiriNtB6_16VoidOutputBufferNtNtCsl2lhD68vXAd_4core7default7Default7defaultCsbrE1BkJ52QU_5oxrdf:
  968|   148k|#[derive(Default)]
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCsbrE1BkJ52QU_5oxrdf:
  990|   148k|    fn truncate(&mut self, new_len: usize) {
  991|   148k|        self.len = new_len;
  992|   148k|    }
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCsbrE1BkJ52QU_5oxrdf:
  995|   593k|    fn len(&self) -> usize {
  996|   593k|        self.len
  997|   593k|    }
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCsbrE1BkJ52QU_5oxrdf:
 1000|   790k|    fn as_str(&self) -> &str {
 1001|   790k|        ""
 1002|   790k|    }
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsbrE1BkJ52QU_5oxrdf:
  975|  7.88M|    fn push(&mut self, c: char) {
  976|  7.88M|        self.len += c.len_utf8();
  977|  7.88M|    }
_RNvMs10_Cs72NQLJxIjgJ_5oxiriNtB6_11ParserInput4nextCsbrE1BkJ52QU_5oxrdf:
 1043|  8.18M|    fn next(&mut self) -> Option<char> {
 1044|  8.18M|        if let Some(head) = self.value.next() {
 1045|  8.03M|            self.position += head.len_utf8();
 1046|  8.03M|            Some(head)
 1047|       |        } else {
 1048|   148k|            None
 1049|       |        }
 1050|  8.18M|    }
_RNvCs72NQLJxIjgJ_5oxiri17is_url_code_point:
 1459|  6.71M|fn is_url_code_point(c: char) -> bool {
 1460|  6.71M|    matches!(c,
 1461|  4.31M|        'a'..='z'
 1462|   101k|        | 'A'..='Z'
 1463|  1.31M|        | '0'..='9'
 1464|       |        | '!'
 1465|       |        | '$'
 1466|       |        | '&'
 1467|       |        | '\''
 1468|       |        | '('
 1469|       |        | ')'
 1470|       |        | '*'
 1471|       |        | '+'
 1472|       |        | ','
 1473|       |        | '-'
 1474|       |        | '.'
 1475|       |        | '/'
 1476|       |        | ':'
 1477|       |        | ';'
 1478|       |        | '='
 1479|       |        | '?'
 1480|       |        | '@'
 1481|       |        | '_'
 1482|       |        | '~'
 1483|  1.38k|        | '\u{A0}'..='\u{D7FF}'
 1484|      0|        | '\u{F900}'..='\u{FDCF}'
 1485|      0|        | '\u{FDF0}'..='\u{FFEF}'
 1486|      0|        | '\u{10000}'..='\u{1FFFD}'
 1487|      0|        | '\u{20000}'..='\u{2FFFD}'
 1488|      0|        | '\u{30000}'..='\u{3FFFD}'
 1489|      0|        | '\u{40000}'..='\u{4FFFD}'
 1490|      0|        | '\u{50000}'..='\u{5FFFD}'
 1491|      0|        | '\u{60000}'..='\u{6FFFD}'
 1492|      0|        | '\u{70000}'..='\u{7FFFD}'
 1493|      0|        | '\u{80000}'..='\u{8FFFD}'
 1494|      0|        | '\u{90000}'..='\u{9FFFD}'
 1495|      0|        | '\u{A0000}'..='\u{AFFFD}'
 1496|      0|        | '\u{B0000}'..='\u{BFFFD}'
 1497|      0|        | '\u{C0000}'..='\u{CFFFD}'
 1498|      0|        | '\u{D0000}'..='\u{DFFFD}'
 1499|      0|        | '\u{E1000}'..='\u{EFFFD}'
 1500|       |    )
 1501|  6.71M|}
_RNvXsW_Cs72NQLJxIjgJ_5oxiriNtB5_13IriParseErrorNtNtCsl2lhD68vXAd_4core3fmt7Display3fmt:
  906|  12.5k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  907|  12.5k|        match &self.kind {
  908|     58|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
  909|      0|            IriParseErrorKind::InvalidHostCharacter(c) => {
  910|      0|                write!(f, "Invalid character '{}' in host", c)
  911|       |            }
  912|      0|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({})", e),
  913|     66|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{}'", c),
  914|  10.5k|            IriParseErrorKind::InvalidIriCodePoint(c) => {
  915|  10.5k|                write!(f, "Invalid IRI code point '{}'", c)
  916|       |            }
  917|  1.81k|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
  918|  1.81k|                f,
  919|  1.81k|                "Invalid IRI percent encoding '{}'",
  920|  1.81k|                cs.iter().flatten().cloned().collect::<String>()
  921|  1.81k|            ),
  922|       |        }
  923|  12.5k|    }
_RNvCs72NQLJxIjgJ_5oxiri23is_url_query_code_point:
 1503|  70.7k|fn is_url_query_code_point(c: char) -> bool {
 1504|  70.7k|    is_url_code_point(c)
 1505|  2.12k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1506|  70.7k|}

_RNvXsM_NtCscqn4bkiv6Zi_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCsl2lhD68vXAd_4core3ops5arith9AddAssign10add_assignCskMJXU54EgBa_11rand_chacha:
   32|  1.68M|            fn $fn_assign(&mut self, rhs: Self) {
   33|  1.68M|                (self.0[0]).$fn_assign(rhs.0[0]);
   34|  1.68M|                (self.0[1]).$fn_assign(rhs.0[1]);
   35|  1.68M|            }
_RNvXs_NtCscqn4bkiv6Zi_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right24CskMJXU54EgBa_11rand_chacha:
   42|   420k|        fn $fn(self) -> Self {
   43|   420k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   420k|        }
_RNvXsG_NtCscqn4bkiv6Zi_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCsl2lhD68vXAd_4core3ops3bit6BitXor6bitxorCskMJXU54EgBa_11rand_chacha:
   22|  1.68M|            fn $fn(self, rhs: Self) -> Self::Output {
   23|  1.68M|                x2::new([self.0[0].$fn(rhs.0[0]), self.0[1].$fn(rhs.0[1])])
   24|  1.68M|            }
_RNvXs_NtCscqn4bkiv6Zi_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right16CskMJXU54EgBa_11rand_chacha:
   42|   420k|        fn $fn(self) -> Self {
   43|   420k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   420k|        }
_RNvMNtCscqn4bkiv6Zi_10ppv_lite864softINtB2_2x2INtNtNtNtB4_6x86_644sse24avx212u32x4x2_avx2NtBP_4NoNIENtBN_2G0E3newCskMJXU54EgBa_11rand_chacha:
   13|  4.80M|    pub fn new(xs: [W; 2]) -> Self {
   14|  4.80M|        x2(xs, PhantomData)
   15|  4.80M|    }
_RNvXsg_NtCscqn4bkiv6Zi_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words3012CskMJXU54EgBa_11rand_chacha:
  215|   420k|    fn shuffle_lane_words3012(self) -> Self {
  216|   420k|        Self::new([
  217|   420k|            self.0[0].shuffle_lane_words3012(),
  218|   420k|            self.0[1].shuffle_lane_words3012(),
  219|   420k|        ])
  220|   420k|    }
_RNvXsg_NtCscqn4bkiv6Zi_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words1230CskMJXU54EgBa_11rand_chacha:
  208|   420k|    fn shuffle_lane_words1230(self) -> Self {
  209|   420k|        Self::new([
  210|   420k|            self.0[0].shuffle_lane_words1230(),
  211|   420k|            self.0[1].shuffle_lane_words1230(),
  212|   420k|        ])
  213|   420k|    }
_RNvXs_NtCscqn4bkiv6Zi_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right20CskMJXU54EgBa_11rand_chacha:
   42|   420k|        fn $fn(self) -> Self {
   43|   420k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   420k|        }
_RNvXs_NtCscqn4bkiv6Zi_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right25CskMJXU54EgBa_11rand_chacha:
   42|   420k|        fn $fn(self) -> Self {
   43|   420k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   420k|        }
_RNvXsg_NtCscqn4bkiv6Zi_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words2301CskMJXU54EgBa_11rand_chacha:
  201|   420k|    fn shuffle_lane_words2301(self) -> Self {
  202|   420k|        Self::new([
  203|   420k|            self.0[0].shuffle_lane_words2301(),
  204|   420k|            self.0[1].shuffle_lane_words2301(),
  205|   420k|        ])
  206|   420k|    }

_RINvYINtNtCscqn4bkiv6Zi_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec512_storageINtNtB8_4soft2x2INtNtNtB6_4sse24avx212u32x4x2_avx2BS_ENtB2b_2G0EECskMJXU54EgBa_11rand_chacha:
  246|  35.0k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|  35.0k|        unsafe { V::unpack(s) }
  248|  35.0k|    }
_RINvYINtNtCscqn4bkiv6Zi_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine3vecINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EAmj4_ECskMJXU54EgBa_11rand_chacha:
  251|  35.0k|    fn vec<V, A>(self, a: A) -> V
  252|  35.0k|    where
  253|  35.0k|        V: MultiLane<A>,
  254|  35.0k|    {
  255|  35.0k|        V::from_lanes(a)
  256|  35.0k|    }
_RINvYINtNtCscqn4bkiv6Zi_10ppv_lite866x86_6410SseMachineNtB6_5YesS3NtB6_5YesS4NtB6_4NoNIENtNtB8_5types7Machine7read_leINtNtB6_4sse210u32x4_sse2BR_B12_B1d_EECskMJXU54EgBa_11rand_chacha:
  259|    274|    fn read_le<V>(self, input: &[u8]) -> V
  260|    274|    where
  261|    274|        V: StoreBytes,
  262|    274|    {
  263|    274|        unsafe { V::unsafe_read_le(input) }
  264|    274|    }
_RINvYINtNtCscqn4bkiv6Zi_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec128_storageINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EECskMJXU54EgBa_11rand_chacha:
  246|   315k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|   315k|        unsafe { V::unpack(s) }
  248|   315k|    }

_RNvNtCskMJXU54EgBa_11rand_chacha4guts11refill_wide:
  250|  35.0k|        $($pub$(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  251|  35.0k|            #[inline(always)]
  252|  35.0k|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  253|  35.0k|            use std::arch::x86_64::*;
  254|  35.0k|            #[target_feature(enable = "avx2")]
  255|  35.0k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  35.0k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  35.0k|                _mm256_zeroupper();
  258|  35.0k|                ret
  259|  35.0k|            }
  260|  35.0k|            #[target_feature(enable = "avx")]
  261|  35.0k|            #[target_feature(enable = "sse4.1")]
  262|  35.0k|            #[target_feature(enable = "ssse3")]
  263|  35.0k|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  264|  35.0k|                let ret = fn_impl($crate::x86_64::AVX::instance(), $($arg),*);
  265|  35.0k|                _mm256_zeroupper();
  266|  35.0k|                ret
  267|  35.0k|            }
  268|  35.0k|            #[target_feature(enable = "sse4.1")]
  269|  35.0k|            #[target_feature(enable = "ssse3")]
  270|  35.0k|            unsafe fn impl_sse41($($arg: $argty),*) -> $ret {
  271|  35.0k|                fn_impl($crate::x86_64::SSE41::instance(), $($arg),*)
  272|  35.0k|            }
  273|  35.0k|            #[target_feature(enable = "ssse3")]
  274|  35.0k|            unsafe fn impl_ssse3($($arg: $argty),*) -> $ret {
  275|  35.0k|                fn_impl($crate::x86_64::SSSE3::instance(), $($arg),*)
  276|  35.0k|            }
  277|  35.0k|            #[target_feature(enable = "sse2")]
  278|  35.0k|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  279|  35.0k|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  280|  35.0k|            }
  281|  35.0k|            unsafe {
  282|  35.0k|                if is_x86_feature_detected!("avx2") {
  283|  35.0k|                    impl_avx2($($arg),*)
  284|      0|                } else if is_x86_feature_detected!("avx") {
  285|      0|                    impl_avx($($arg),*)
  286|      0|                } else if is_x86_feature_detected!("sse4.1") {
  287|      0|                    impl_sse41($($arg),*)
  288|      0|                } else if is_x86_feature_detected!("ssse3") {
  289|      0|                    impl_ssse3($($arg),*)
  290|      0|                } else if is_x86_feature_detected!("sse2") {
  291|      0|                    impl_sse2($($arg),*)
  292|       |                } else {
  293|      0|                    unimplemented!()
  294|       |                }
  295|       |            }
  296|  35.0k|        }
_RNvNvNtCskMJXU54EgBa_11rand_chacha4guts11refill_wide9impl_avx2:
  255|  35.0k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  35.0k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  35.0k|                _mm256_zeroupper();
  258|  35.0k|                ret
  259|  35.0k|            }
_RNvNvNtCskMJXU54EgBa_11rand_chacha4guts11init_chacha8impl_avx:
  338|    137|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|    137|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|    137|            }
_RNvXs_NtCscqn4bkiv6Zi_10ppv_lite866x86_64INtB4_11Avx2MachineNtB4_4NoNIENtNtB6_5types7Machine8instanceCskMJXU54EgBa_11rand_chacha:
   92|  35.0k|    unsafe fn instance() -> Self {
   93|  35.0k|        Avx2Machine(PhantomData)
   94|  35.0k|    }
_RNvNtCskMJXU54EgBa_11rand_chacha4guts11init_chacha:
  333|    137|        $($pub $(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  334|    137|            #[inline(always)]
  335|    137|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  336|    137|            use std::arch::x86_64::*;
  337|    137|            #[target_feature(enable = "avx")]
  338|    137|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|    137|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|    137|            }
  341|    137|            #[target_feature(enable = "sse2")]
  342|    137|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  343|    137|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  344|    137|            }
  345|    137|            unsafe {
  346|    137|                if is_x86_feature_detected!("avx") {
  347|    137|                    impl_avx($($arg),*)
  348|      0|                } else if is_x86_feature_detected!("sse2") {
  349|      0|                    impl_sse2($($arg),*)
  350|       |                } else {
  351|      0|                    unimplemented!()
  352|       |                }
  353|       |            }
  354|    137|        }
_RNvXNtCscqn4bkiv6Zi_10ppv_lite866x86_64INtB2_10SseMachineNtB2_5YesS3NtB2_5YesS4NtB2_4NoNIENtNtB4_5types7Machine8instanceCskMJXU54EgBa_11rand_chacha:
   64|    137|    unsafe fn instance() -> Self {
   65|    137|        SseMachine(PhantomData)
   66|    137|    }
_RNvXs2_NtCscqn4bkiv6Zi_10ppv_lite866x86_64NtB5_14vec128_storageINtNtCsl2lhD68vXAd_4core7convert4FromAmj4_E4from:
  130|    137|    fn from(u32x4: [u32; 4]) -> Self {
  131|    137|        vec128_storage { u32x4 }
  132|    137|    }

_RNvXs6_NtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E8to_lanesCskMJXU54EgBa_11rand_chacha:
  323|   140k|    fn to_lanes(self) -> [u32; 4] {
  324|   140k|        unsafe {
  325|   140k|            let x = _mm_cvtsi128_si64(self.x) as u64;
  326|   140k|            let y = _mm_extract_epi64(self.x, 1) as u64;
  327|   140k|            [x as u32, (x >> 32) as u32, y as u32, (y >> 32) as u32]
  328|   140k|        }
  329|   140k|    }
_RNvXsX_NtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types5StoreNtB7_14vec128_storageE6unpackCskMJXU54EgBa_11rand_chacha:
   52|   315k|            unsafe fn unpack(x: vec128_storage) -> Self {
   53|   315k|                Self::new(x.sse2)
   54|   315k|            }
_RNvXs6_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right20CskMJXU54EgBa_11rand_chacha:
 1480|   841k|            fn $name(self) -> Self {
 1481|   841k|                Self::new(unsafe {
 1482|   841k|                    _mm256_or_si256(
 1483|   841k|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|   841k|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|   841k|                    )
 1486|   841k|                })
 1487|   841k|            }
_RNvXsc_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words1230CskMJXU54EgBa_11rand_chacha:
 1582|   841k|        fn shuffle_lane_words1230(self) -> Self {
 1583|   841k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b1001_0011) })
 1584|   841k|        }
_RNvXsr_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCsl2lhD68vXAd_4core3ops3bit6BitXor6bitxorCskMJXU54EgBa_11rand_chacha:
 1543|  3.36M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  3.36M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  3.36M|                }
_RNvXse_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types5StoreNtB9_14vec512_storageE6unpackCskMJXU54EgBa_11rand_chacha:
 1602|  35.0k|        unsafe fn unpack(p: vec512_storage) -> Self {
 1603|  35.0k|            Self::new([
 1604|  35.0k|                u32x4x2_avx2::unpack(p.avx[0]),
 1605|  35.0k|                u32x4x2_avx2::unpack(p.avx[1]),
 1606|  35.0k|            ])
 1607|  35.0k|        }
_RNvXsf_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E10from_lanesCskMJXU54EgBa_11rand_chacha:
 1617|   140k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 4]) -> Self {
 1618|   140k|            let ab = u32x4x2_avx2::from_lanes([x[0], x[1]]);
 1619|   140k|            let cd = u32x4x2_avx2::from_lanes([x[2], x[3]]);
 1620|   140k|            Self::new([ab, cd])
 1621|   140k|        }
_RNvMNtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB2_12u32x4x2_avx2NtB6_4NoNIE3newCskMJXU54EgBa_11rand_chacha:
 1394|  12.9M|        fn new(x: __m256i) -> Self {
 1395|  12.9M|            Self { x, ni: PhantomData }
 1396|  12.9M|        }
_RNvXs2_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E8to_lanesCskMJXU54EgBa_11rand_chacha:
 1430|   280k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 2] {
 1431|   280k|            unsafe {
 1432|   280k|                [
 1433|   280k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 0)),
 1434|   280k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 1)),
 1435|   280k|                ]
 1436|   280k|            }
 1437|   280k|        }
_RNvXs6_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right25CskMJXU54EgBa_11rand_chacha:
 1480|   841k|            fn $name(self) -> Self {
 1481|   841k|                Self::new(unsafe {
 1482|   841k|                    _mm256_or_si256(
 1483|   841k|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|   841k|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|   841k|                    )
 1486|   841k|                })
 1487|   841k|            }
_RNvXs6_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right16CskMJXU54EgBa_11rand_chacha:
 1470|   841k|            fn $name(self) -> Self {
 1471|   841k|                Self::new(unsafe {
 1472|   841k|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|   841k|                })
 1474|   841k|            }
_RNvMsZ_NtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIE3newCskMJXU54EgBa_11rand_chacha:
   64|  1.96M|            fn new(x: __m128i) -> Self {
   65|  1.96M|                $vec {
   66|  1.96M|                    x,
   67|  1.96M|                    s3: PhantomData,
   68|  1.96M|                    s4: PhantomData,
   69|  1.96M|                    ni: PhantomData,
   70|  1.96M|                }
   71|  1.96M|            }
_RNvXs0_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types5StoreNtB9_14vec256_storageE6unpackCskMJXU54EgBa_11rand_chacha:
 1402|  70.1k|        unsafe fn unpack(p: vec256_storage) -> Self {
 1403|  70.1k|            Self::new(p.avx)
 1404|  70.1k|        }
_RNvXs2_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E10from_lanesCskMJXU54EgBa_11rand_chacha:
 1439|   280k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 2]) -> Self {
 1440|   280k|            Self::new(unsafe { _mm256_setr_m128i(x[0].x, x[1].x) })
 1441|   280k|        }
_RNvXsl_NtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE7extractCskMJXU54EgBa_11rand_chacha:
  519|   140k|    fn extract(self, i: u32) -> u32 {
  520|   140k|        self.to_lanes()[i as usize]
  521|   140k|    }
_RNvXs6_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right24CskMJXU54EgBa_11rand_chacha:
 1470|   841k|            fn $name(self) -> Self {
 1471|   841k|                Self::new(unsafe {
 1472|   841k|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|   841k|                })
 1474|   841k|            }
_RNvXsc_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words2301CskMJXU54EgBa_11rand_chacha:
 1586|   841k|        fn shuffle_lane_words2301(self) -> Self {
 1587|   841k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0100_1110) })
 1588|   841k|        }
_RNvXs10_NtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes8write_leCskMJXU54EgBa_11rand_chacha:
   89|   560k|            fn write_le(self, out: &mut [u8]) {
   90|   560k|                assert_eq!(out.len(), 16);
   91|   560k|                unsafe { _mm_storeu_si128(out.as_mut_ptr() as *mut _, self.x) }
   92|   560k|            }
_RNvXsv_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCsl2lhD68vXAd_4core3ops5arith3Add3addCskMJXU54EgBa_11rand_chacha:
 1543|  3.36M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  3.36M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  3.36M|                }
_RNvXs10_NtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes14unsafe_read_leCskMJXU54EgBa_11rand_chacha:
   79|    274|            unsafe fn unsafe_read_le(input: &[u8]) -> Self {
   80|    274|                assert_eq!(input.len(), 16);
   81|    274|                Self::new(_mm_loadu_si128(input.as_ptr() as *const _))
   82|    274|            }
_RNvXs6_NtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E10from_lanesCskMJXU54EgBa_11rand_chacha:
  331|  35.0k|    fn from_lanes(xs: [u32; 4]) -> Self {
  332|  35.0k|        unsafe {
  333|  35.0k|            let mut x = _mm_cvtsi64_si128((xs[0] as u64 | ((xs[1] as u64) << 32)) as i64);
  334|  35.0k|            x = _mm_insert_epi64(x, (xs[2] as u64 | ((xs[3] as u64) << 32)) as i64, 1);
  335|  35.0k|            Self::new(x)
  336|  35.0k|        }
  337|  35.0k|    }
_RNvXsf_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E8to_lanesCskMJXU54EgBa_11rand_chacha:
 1611|   140k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 4] {
 1612|   140k|            let [a, b] = self.0[0].to_lanes();
 1613|   140k|            let [c, d] = self.0[1].to_lanes();
 1614|   140k|            [a, b, c, d]
 1615|   140k|        }
_RNvXsl_NtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE6insertCskMJXU54EgBa_11rand_chacha:
  523|   490k|    fn insert(self, v: u32, i: u32) -> Self {
  524|   490k|        Self::new(unsafe {
  525|   490k|            match i {
  526|   245k|                0 => _mm_insert_epi32(self.x, v as i32, 0),
  527|   245k|                1 => _mm_insert_epi32(self.x, v as i32, 1),
  528|      0|                2 => _mm_insert_epi32(self.x, v as i32, 2),
  529|      0|                3 => _mm_insert_epi32(self.x, v as i32, 3),
  530|      0|                _ => unreachable!(),
  531|       |            }
  532|       |        })
  533|   490k|    }
_RNvXs1R_NtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtNtCsl2lhD68vXAd_4core3ops5arith3Add3addCskMJXU54EgBa_11rand_chacha:
   18|   560k|            fn $fn(self, rhs: Self) -> Self::Output {
   19|   560k|                Self::new(unsafe { $impl_fn(self.x, rhs.x) })
   20|   560k|            }
_RNvXsc_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words3012CskMJXU54EgBa_11rand_chacha:
 1590|   841k|        fn shuffle_lane_words3012(self) -> Self {
 1591|   841k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0011_1001) })
 1592|   841k|        }
_RNvXsq_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCsl2lhD68vXAd_4core3ops5arith9AddAssign10add_assignCskMJXU54EgBa_11rand_chacha:
 1527|  3.36M|                fn $assign_fn(&mut self, rhs: Self) {
 1528|  3.36M|                    *self = self.$bin_fn(rhs);
 1529|  3.36M|                }
_RNvXsY_NtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse2NtB7_14vec128_storageINtNtCsl2lhD68vXAd_4core7convert4FromINtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEE4fromCskMJXU54EgBa_11rand_chacha:
   58|  35.3k|            fn from(x: $vec<S3, S4, NI>) -> Self {
   59|  35.3k|                vec128_storage { sse2: x.x }
   60|  35.3k|            }
_RNvXsj_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2NtB9_14vec512_storageINtNtCsl2lhD68vXAd_4core7convert4FromINtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EE4fromCskMJXU54EgBa_11rand_chacha:
 1683|  35.0k|        fn from(x: u32x4x4_avx2<NI>) -> Self {
 1684|  35.0k|            Self {
 1685|  35.0k|                avx: [
 1686|  35.0k|                    vec256_storage { avx: x.0[0].x },
 1687|  35.0k|                    vec256_storage { avx: x.0[1].x },
 1688|  35.0k|                ],
 1689|  35.0k|            }
 1690|  35.0k|        }

_RINvXs2_NtNtCsliEG8YhJqi1_4rand13distributions7integerNtB8_8StandardINtNtB8_12distribution12DistributionoE6sampleNtNtNtBa_4rngs6thread9ThreadRngECs4WjTcpTVJQo_5oxttl:
   51|   560k|    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u128 {
   52|   560k|        // Use LE; we explicitly generate one value before the next.
   53|   560k|        let x = u128::from(rng.next_u64());
   54|   560k|        let y = u128::from(rng.next_u64());
   55|   560k|        (y << 64) | x
   56|   560k|    }

_RINvCsliEG8YhJqi1_4rand6randomoECs4WjTcpTVJQo_5oxttl:
  183|   560k|pub fn random<T>() -> T
  184|   560k|where Standard: Distribution<T> {
  185|   560k|    thread_rng().gen()
  186|   560k|}

_RINvYNtNtNtCsliEG8YhJqi1_4rand4rngs6thread9ThreadRngNtNtB9_3rng3Rng3genoECs4WjTcpTVJQo_5oxttl:
   93|   560k|    fn gen<T>(&mut self) -> T
   94|   560k|    where Standard: Distribution<T> {
   95|   560k|        Standard.sample(self)
   96|   560k|    }

_RNvXs_NtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseedingINtB4_12ReseedingRngNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtCsbT0BH6pPOpx_9rand_core2os5OsRngENtB24_7RngCore8next_u64Cs4WjTcpTVJQo_5oxttl:
  124|  1.12M|    fn next_u64(&mut self) -> u64 {
  125|  1.12M|        self.0.next_u64()
  126|  1.12M|    }
_RNvMs3_NtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtCsbT0BH6pPOpx_9rand_core2os5OsRngE3newBb_:
  193|      1|    fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  194|      1|        use ::core::i64::MAX;
  195|      1|        fork::register_fork_handler();
  196|       |
  197|       |        // Because generating more values than `i64::MAX` takes centuries on
  198|       |        // current hardware, we just clamp to that value.
  199|       |        // Also we set a threshold of 0, which indicates no limit, to that
  200|       |        // value.
  201|      1|        let threshold = if threshold == 0 {
  202|      0|            MAX
  203|      1|        } else if threshold <= MAX as u64 {
  204|      1|            threshold as i64
  205|       |        } else {
  206|      0|            MAX
  207|       |        };
  208|       |
  209|      1|        ReseedingCore {
  210|      1|            inner: rng,
  211|      1|            reseeder,
  212|      1|            threshold: threshold as i64,
  213|      1|            bytes_until_reseed: threshold as i64,
  214|      1|            fork_counter: 0,
  215|      1|        }
  216|      1|    }
_RNvMs3_NtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtCsbT0BH6pPOpx_9rand_core2os5OsRngE6reseedBb_:
  219|    136|    fn reseed(&mut self) -> Result<(), Error> {
  220|    136|        R::from_rng(&mut self.reseeder).map(|result| {
  221|       |            self.bytes_until_reseed = self.threshold;
  222|       |            self.inner = result
  223|    136|        })
  224|    136|    }
_RNvMs3_NtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtCsbT0BH6pPOpx_9rand_core2os5OsRngE9is_forkedBb_:
  226|  35.0k|    fn is_forked(&self, global_fork_counter: usize) -> bool {
  227|  35.0k|        // In theory, on 32-bit platforms, it is possible for
  228|  35.0k|        // `global_fork_counter` to wrap around after ~4e9 forks.
  229|  35.0k|        //
  230|  35.0k|        // This check will detect a fork in the normal case where
  231|  35.0k|        // `fork_counter < global_fork_counter`, and also when the difference
  232|  35.0k|        // between both is greater than `isize::MAX` (wrapped around).
  233|  35.0k|        //
  234|  35.0k|        // It will still fail to detect a fork if there have been more than
  235|  35.0k|        // `isize::MAX` forks, without any reseed in between. Seems unlikely
  236|  35.0k|        // enough.
  237|  35.0k|        (self.fork_counter.wrapping_sub(global_fork_counter) as isize) < 0
  238|  35.0k|    }
_RNvMs3_NtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtCsbT0BH6pPOpx_9rand_core2os5OsRngE19reseed_and_generateBb_:
  241|    136|    fn reseed_and_generate(
  242|    136|        &mut self, results: &mut <Self as BlockRngCore>::Results, global_fork_counter: usize,
  243|    136|    ) {
  244|    136|        #![allow(clippy::if_same_then_else)] // false positive
  245|    136|        if self.is_forked(global_fork_counter) {
  246|      0|            info!("Fork detected, reseeding RNG");
  247|    136|        } else {
  248|    136|            trace!("Reseeding RNG (periodic reseed)");
  249|    136|        }
  250|       |
  251|    136|        let num_bytes = results.as_ref().len() * size_of::<<R as BlockRngCore>::Item>();
  252|       |
  253|    136|        if let Err(e) = self.reseed() {
  254|      0|            warn!("Reseeding RNG failed: {}", e);
  255|      0|            let _ = e;
  256|    136|        }
  257|    136|        self.fork_counter = global_fork_counter;
  258|    136|
  259|    136|        self.bytes_until_reseed = self.threshold - num_bytes as i64;
  260|    136|        self.inner.generate(results);
  261|    136|    }
_RNCNvMs3_NtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseedingINtB7_13ReseedingCoreNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtCsbT0BH6pPOpx_9rand_core2os5OsRngE6reseed0Bd_:
  220|    136|        R::from_rng(&mut self.reseeder).map(|result| {
  221|    136|            self.bytes_until_reseed = self.threshold;
  222|    136|            self.inner = result
  223|    136|        })
_RNvXs2_NtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtCsbT0BH6pPOpx_9rand_core2os5OsRngENtNtB26_5block12BlockRngCore8generateBb_:
  173|  35.0k|    fn generate(&mut self, results: &mut Self::Results) {
  174|  35.0k|        let global_fork_counter = fork::get_fork_counter();
  175|  35.0k|        if self.bytes_until_reseed <= 0 || self.is_forked(global_fork_counter) {
  176|       |            // We get better performance by not calling only `reseed` here
  177|       |            // and continuing with the rest of the function, but by directly
  178|       |            // returning from a non-inlined function.
  179|    136|            return self.reseed_and_generate(results, global_fork_counter);
  180|  34.9k|        }
  181|  34.9k|        let num_bytes = results.as_ref().len() * size_of::<Self::Item>();
  182|  34.9k|        self.bytes_until_reseed -= num_bytes as i64;
  183|  34.9k|        self.inner.generate(results);
  184|  35.0k|    }
_RNvMNtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseedingINtB2_12ReseedingRngNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtCsbT0BH6pPOpx_9rand_core2os5OsRngE3newB8_:
  101|      1|    pub fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  102|      1|        ReseedingRng(BlockRng::new(ReseedingCore::new(rng, threshold, reseeder)))
  103|      1|    }
_RNvNtNtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseeding4fork21register_fork_handler:
  317|      1|    pub fn register_fork_handler() {
  318|      1|        static REGISTER: Once = Once::new();
  319|      1|        REGISTER.call_once(|| {
  320|       |            // Bump the counter before and after forking (see #1169):
  321|       |            let ret = unsafe { libc::pthread_atfork(
  322|       |                Some(fork_handler),
  323|       |                Some(fork_handler),
  324|       |                Some(fork_handler),
  325|       |            ) };
  326|       |            if ret != 0 {
  327|       |                panic!("libc::pthread_atfork failed with code {}", ret);
  328|       |            }
  329|      1|        });
  330|      1|    }
_RNCNvNtNtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseeding4fork21register_fork_handler0Bb_:
  319|      1|        REGISTER.call_once(|| {
  320|      1|            // Bump the counter before and after forking (see #1169):
  321|      1|            let ret = unsafe { libc::pthread_atfork(
  322|      1|                Some(fork_handler),
  323|      1|                Some(fork_handler),
  324|      1|                Some(fork_handler),
  325|      1|            ) };
  326|      1|            if ret != 0 {
  327|      0|                panic!("libc::pthread_atfork failed with code {}", ret);
  328|      1|            }
  329|      1|        });
_RNvNtNtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseeding4fork16get_fork_counter:
  307|  35.0k|    pub fn get_fork_counter() -> usize {
  308|  35.0k|        RESEEDING_RNG_FORK_COUNTER.load(Ordering::Relaxed)
  309|  35.0k|    }

_RNvXs_NtNtCsliEG8YhJqi1_4rand4rngs6threadNtB4_9ThreadRngNtCsbT0BH6pPOpx_9rand_core7RngCore8next_u64:
  109|  1.12M|    fn next_u64(&mut self) -> u64 {
  110|  1.12M|        // SAFETY: We must make sure to stop using `rng` before anyone else
  111|  1.12M|        // creates another mutable reference
  112|  1.12M|        let rng = unsafe { &mut *self.rng.get() };
  113|  1.12M|        rng.next_u64()
  114|  1.12M|    }
_RNCNvNvNtNtCsliEG8YhJqi1_4rand4rngs6thread14THREAD_RNG_KEY7___getit0B9_:
   67|      1|thread_local!(
   68|      1|    // We require Rc<..> to avoid premature freeing when thread_rng is used
   69|      1|    // within thread-local destructors. See #968.
   70|      1|    static THREAD_RNG_KEY: Rc<UnsafeCell<ReseedingRng<Core, OsRng>>> = {
   71|      1|        let r = Core::from_rng(OsRng).unwrap_or_else(|err|
   72|      1|                panic!("could not initialize thread_rng: {}", err));
   73|      1|        let rng = ReseedingRng::new(r,
   74|      1|                                    THREAD_RNG_RESEED_THRESHOLD,
   75|      1|                                    OsRng);
   76|      1|        Rc::new(UnsafeCell::new(rng))
   77|      1|    }
   78|      1|);
_RNvNtNtCsliEG8YhJqi1_4rand4rngs6thread10thread_rng:
   88|   560k|pub fn thread_rng() -> ThreadRng {
   89|   560k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
   90|   560k|    ThreadRng { rng }
   91|   560k|}
_RNCNvNtNtCsliEG8YhJqi1_4rand4rngs6thread10thread_rng0B7_:
   89|   560k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());

_RNvXsn_NtCskMJXU54EgBa_11rand_chacha6chachaNtB5_12ChaCha12CoreNtCsbT0BH6pPOpx_9rand_core11SeedableRng9from_seedCsliEG8YhJqi1_4rand:
  103|    137|            fn from_seed(seed: Self::Seed) -> Self {
  104|    137|                $ChaChaXCore { state: ChaCha::new(&seed, &[0u8; 8]) }
  105|    137|            }
_RNvXsm_NtCskMJXU54EgBa_11rand_chacha6chachaNtB5_12ChaCha12CoreNtNtCsbT0BH6pPOpx_9rand_core5block12BlockRngCore8generateCsliEG8YhJqi1_4rand:
   89|  35.0k|            fn generate(&mut self, r: &mut Self::Results) {
   90|  35.0k|                // Fill slice of words by writing to equivalent slice of bytes, then fixing endianness.
   91|  35.0k|                self.state.refill4($rounds, unsafe {
   92|  35.0k|                    &mut *(&mut *r as *mut Array64<u32> as *mut [u8; 256])
   93|  35.0k|                });
   94|  2.24M|                for x in r.as_mut() {
   95|  2.24M|                    *x = x.to_le();
   96|  2.24M|                }
   97|  35.0k|            }
_RNvXs0_NtCskMJXU54EgBa_11rand_chacha6chachaINtB5_7Array64mEINtNtCsl2lhD68vXAd_4core7convert5AsMutSmE6as_mutB7_:
   51|  35.0k|    fn as_mut(&mut self) -> &mut [T] {
   52|  35.0k|        &mut self.0
   53|  35.0k|    }
_RNvXNtCskMJXU54EgBa_11rand_chacha6chachaINtB2_7Array64mENtNtCsl2lhD68vXAd_4core7default7Default7defaultB4_:
   32|      1|    fn default() -> Self {
   33|      1|        Self([
   34|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   35|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   36|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   37|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   38|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   39|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   40|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   41|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   42|      1|        ])
   43|      1|    }
_RNvXs_NtCskMJXU54EgBa_11rand_chacha6chachaINtB4_7Array64mEINtNtCsl2lhD68vXAd_4core7convert5AsRefSmE6as_refB6_:
   46|  2.31M|    fn as_ref(&self) -> &[T] {
   47|  2.31M|        &self.0
   48|  2.31M|    }

_RNvMNtCskMJXU54EgBa_11rand_chacha4gutsNtB2_6ChaCha3new:
   72|    137|    pub fn new(key: &[u8; 32], nonce: &[u8]) -> Self {
   73|    137|        init_chacha(key, nonce)
   74|    137|    }
_RNvMNtCskMJXU54EgBa_11rand_chacha4gutsNtB2_6ChaCha7refill4:
   84|  35.0k|    pub fn refill4(&mut self, drounds: u32, out: &mut [u8; BUFSZ]) {
   85|  35.0k|        refill_wide(self, drounds, out)
   86|  35.0k|    }
_RINvNvNtCskMJXU54EgBa_11rand_chacha4guts11init_chacha7fn_implINtNtCscqn4bkiv6Zi_10ppv_lite866x86_6410SseMachineNtB10_5YesS3NtB10_5YesS4NtB10_4NoNIEEB6_:
  235|    137|    fn init_chacha(key: &[u8; 32], nonce: &[u8]) -> ChaCha {
  236|    137|        let ctr_nonce = [
  237|       |            0,
  238|    137|            if nonce.len() == 12 {
  239|      0|                read_u32le(&nonce[0..4])
  240|       |            } else {
  241|    137|                0
  242|       |            },
  243|    137|            read_u32le(&nonce[nonce.len() - 8..nonce.len() - 4]),
  244|    137|            read_u32le(&nonce[nonce.len() - 4..]),
  245|    137|        ];
  246|    137|        let key0: Mach::u32x4 = m.read_le(&key[..16]);
  247|    137|        let key1: Mach::u32x4 = m.read_le(&key[16..]);
  248|    137|        ChaCha {
  249|    137|            b: key0.into(),
  250|    137|            c: key1.into(),
  251|    137|            d: ctr_nonce.into(),
  252|    137|        }
_RNvNtCskMJXU54EgBa_11rand_chacha4guts10read_u32le:
  229|    274|fn read_u32le(xs: &[u8]) -> u32 {
  230|    274|    assert_eq!(xs.len(), 4);
  231|    274|    u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24)
  232|    274|}
_RINvNtCskMJXU54EgBa_11rand_chacha4guts13undiagonalizeINtNtCscqn4bkiv6Zi_10ppv_lite864soft2x2INtNtNtNtBU_6x86_644sse24avx212u32x4x2_avx2NtB1z_4NoNIENtB1x_2G0EEB4_:
   63|   210k|pub(crate) fn undiagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   64|   210k|    x.b = x.b.shuffle_lane_words1230();
   65|   210k|    x.c = x.c.shuffle_lane_words2301();
   66|   210k|    x.d = x.d.shuffle_lane_words3012();
   67|   210k|    x
   68|   210k|}
_RINvMNtCskMJXU54EgBa_11rand_chacha4gutsNtB3_6ChaCha5pos64INtNtCscqn4bkiv6Zi_10ppv_lite866x86_6411Avx2MachineNtBW_4NoNIEEB5_:
   77|  70.1k|    fn pos64<M: Machine>(&self, m: M) -> u64 {
   78|  70.1k|        let d: M::u32x4 = m.unpack(self.d);
   79|  70.1k|        ((d.extract(1) as u64) << 32) | d.extract(0) as u64
   80|  70.1k|    }
_RINvNtCskMJXU54EgBa_11rand_chacha4guts11diagonalizeINtNtCscqn4bkiv6Zi_10ppv_lite864soft2x2INtNtNtNtBS_6x86_644sse24avx212u32x4x2_avx2NtB1x_4NoNIENtB1v_2G0EEB4_:
   56|   210k|pub(crate) fn diagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   57|   210k|    x.b = x.b.shuffle_lane_words3012();
   58|   210k|    x.c = x.c.shuffle_lane_words2301();
   59|   210k|    x.d = x.d.shuffle_lane_words1230();
   60|   210k|    x
   61|   210k|}
_RINvNvNtCskMJXU54EgBa_11rand_chacha4guts11refill_wide7fn_implINtNtCscqn4bkiv6Zi_10ppv_lite866x86_6411Avx2MachineNtB10_4NoNIEEB6_:
  172|  35.0k|    fn refill_wide(state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ]) {
  173|  35.0k|        refill_wide_impl(m, state, drounds, out);
  174|  35.0k|    }
_RINvNtCskMJXU54EgBa_11rand_chacha4guts5roundINtNtCscqn4bkiv6Zi_10ppv_lite864soft2x2INtNtNtNtBL_6x86_644sse24avx212u32x4x2_avx2NtB1q_4NoNIENtB1o_2G0EEB4_:
   43|   420k|pub(crate) fn round<V: ArithOps + BitOps32>(mut x: State<V>) -> State<V> {
   44|   420k|    x.a += x.b;
   45|   420k|    x.d = (x.d ^ x.a).rotate_each_word_right16();
   46|   420k|    x.c += x.d;
   47|   420k|    x.b = (x.b ^ x.c).rotate_each_word_right20();
   48|   420k|    x.a += x.b;
   49|   420k|    x.d = (x.d ^ x.a).rotate_each_word_right24();
   50|   420k|    x.c += x.d;
   51|   420k|    x.b = (x.b ^ x.c).rotate_each_word_right25();
   52|   420k|    x
   53|   420k|}
_RINvNtCskMJXU54EgBa_11rand_chacha4guts16refill_wide_implINtNtCscqn4bkiv6Zi_10ppv_lite866x86_6411Avx2MachineNtBV_4NoNIEEB4_:
  116|  35.0k|fn refill_wide_impl<Mach: Machine>(
  117|  35.0k|    m: Mach, state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ],
  118|  35.0k|) {
  119|  35.0k|    let k = m.vec([0x6170_7865, 0x3320_646e, 0x7962_2d32, 0x6b20_6574]);
  120|  35.0k|    let mut pos = state.pos64(m);
  121|  35.0k|    let d0: Mach::u32x4 = m.unpack(state.d);
  122|  35.0k|    pos = pos.wrapping_add(1);
  123|  35.0k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  124|  35.0k|    pos = pos.wrapping_add(1);
  125|  35.0k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  126|  35.0k|    pos = pos.wrapping_add(1);
  127|  35.0k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  128|  35.0k|
  129|  35.0k|    let b = m.unpack(state.b);
  130|  35.0k|    let c = m.unpack(state.c);
  131|  35.0k|    let mut x = State {
  132|  35.0k|        a: Mach::u32x4x4::from_lanes([k, k, k, k]),
  133|  35.0k|        b: Mach::u32x4x4::from_lanes([b, b, b, b]),
  134|  35.0k|        c: Mach::u32x4x4::from_lanes([c, c, c, c]),
  135|  35.0k|        d: m.unpack(Mach::u32x4x4::from_lanes([d0, d1, d2, d3]).into()),
  136|  35.0k|    };
  137|   210k|    for _ in 0..drounds {
  138|   210k|        x = round(x);
  139|   210k|        x = undiagonalize(round(diagonalize(x)));
  140|   210k|    }
  141|  35.0k|    let mut pos = state.pos64(m);
  142|  35.0k|    let d0: Mach::u32x4 = m.unpack(state.d);
  143|  35.0k|    pos = pos.wrapping_add(1);
  144|  35.0k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  145|  35.0k|    pos = pos.wrapping_add(1);
  146|  35.0k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  147|  35.0k|    pos = pos.wrapping_add(1);
  148|  35.0k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  149|  35.0k|    pos = pos.wrapping_add(1);
  150|  35.0k|    let d4 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  151|  35.0k|
  152|  35.0k|    let (a, b, c, d) = (
  153|  35.0k|        x.a.to_lanes(),
  154|  35.0k|        x.b.to_lanes(),
  155|  35.0k|        x.c.to_lanes(),
  156|  35.0k|        x.d.to_lanes(),
  157|  35.0k|    );
  158|  35.0k|    let sb = m.unpack(state.b);
  159|  35.0k|    let sc = m.unpack(state.c);
  160|  35.0k|    let sd = [m.unpack(state.d), d1, d2, d3];
  161|  35.0k|    state.d = d4.into();
  162|  35.0k|    let mut words = out.chunks_exact_mut(16);
  163|   140k|    for ((((&a, &b), &c), &d), &sd) in a.iter().zip(&b).zip(&c).zip(&d).zip(&sd) {
  164|   140k|        (a + k).write_le(words.next().unwrap());
  165|   140k|        (b + sb).write_le(words.next().unwrap());
  166|   140k|        (c + sc).write_le(words.next().unwrap());
  167|   140k|        (d + sd).write_le(words.next().unwrap());
  168|   140k|    }
  169|  35.0k|}

_RNCNvXs0_NtCsbT0BH6pPOpx_9rand_core5blockINtB7_8BlockRngINtNtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtB9_2os5OsRngEENtB9_7RngCore8next_u640Cs4WjTcpTVJQo_5oxttl:
  198|  1.12M|        let read_u64 = |results: &[u32], index| {
  199|  1.12M|            let data = &results[index..=index + 1];
  200|  1.12M|            u64::from(data[1]) << 32 | u64::from(data[0])
  201|  1.12M|        };
_RNvXs0_NtCsbT0BH6pPOpx_9rand_core5blockINtB5_8BlockRngINtNtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtB7_2os5OsRngEENtB7_7RngCore8next_u64Cs4WjTcpTVJQo_5oxttl:
  197|  1.12M|    fn next_u64(&mut self) -> u64 {
  198|  1.12M|        let read_u64 = |results: &[u32], index| {
  199|       |            let data = &results[index..=index + 1];
  200|       |            u64::from(data[1]) << 32 | u64::from(data[0])
  201|       |        };
  202|       |
  203|  1.12M|        let len = self.results.as_ref().len();
  204|  1.12M|
  205|  1.12M|        let index = self.index;
  206|  1.12M|        if index < len - 1 {
  207|  1.08M|            self.index += 2;
  208|  1.08M|            // Read an u64 from the current index
  209|  1.08M|            read_u64(self.results.as_ref(), index)
  210|  35.0k|        } else if index >= len {
  211|  35.0k|            self.generate_and_set(2);
  212|  35.0k|            read_u64(self.results.as_ref(), 0)
  213|       |        } else {
  214|      0|            let x = u64::from(self.results.as_ref()[len - 1]);
  215|      0|            self.generate_and_set(1);
  216|      0|            let y = u64::from(self.results.as_ref()[0]);
  217|      0|            (y << 32) | x
  218|       |        }
  219|  1.12M|    }
_RNvMs_NtCsbT0BH6pPOpx_9rand_core5blockINtB4_8BlockRngINtNtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE3newBY_:
  145|      1|    pub fn new(core: R) -> BlockRng<R> {
  146|      1|        let results_empty = R::Results::default();
  147|      1|        BlockRng {
  148|      1|            core,
  149|      1|            index: results_empty.as_ref().len(),
  150|      1|            results: results_empty,
  151|      1|        }
  152|      1|    }
_RNvMs_NtCsbT0BH6pPOpx_9rand_core5blockINtB4_8BlockRngINtNtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE16generate_and_setBY_:
  174|  35.0k|    pub fn generate_and_set(&mut self, index: usize) {
  175|  35.0k|        assert!(index < self.results.as_ref().len());
  176|  35.0k|        self.core.generate(&mut self.results);
  177|  35.0k|        self.index = index;
  178|  35.0k|    }

_RNvXs_CsbT0BH6pPOpx_9rand_coreQNtNtB4_2os5OsRngNtB4_7RngCore14try_fill_bytesCsliEG8YhJqi1_4rand:
  441|    136|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
  442|    136|        (**self).try_fill_bytes(dest)
  443|    136|    }
_RINvYNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtCsbT0BH6pPOpx_9rand_core11SeedableRng8from_rngQNtNtBV_2os5OsRngECsliEG8YhJqi1_4rand:
  390|    136|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|    136|        let mut seed = Self::Seed::default();
  392|    136|        rng.try_fill_bytes(seed.as_mut())?;
  393|    136|        Ok(Self::from_seed(seed))
  394|    136|    }
_RINvYNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtCsbT0BH6pPOpx_9rand_core11SeedableRng8from_rngNtNtBV_2os5OsRngECsliEG8YhJqi1_4rand:
  390|      1|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|      1|        let mut seed = Self::Seed::default();
  392|      1|        rng.try_fill_bytes(seed.as_mut())?;
  393|      1|        Ok(Self::from_seed(seed))
  394|      1|    }

_RNvXs_NtCsbT0BH6pPOpx_9rand_core2osNtB4_5OsRngNtB6_7RngCore14try_fill_bytes:
   67|    137|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
   68|    137|        getrandom(dest)?;
   69|    137|        Ok(())
   70|    137|    }

_RNvNvNtNtCsliEG8YhJqi1_4rand4rngs6thread14THREAD_RNG_KEY7___getitB7_:
   83|   560k|            unsafe fn __getit(
   84|   560k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|   560k|            ) -> $crate::option::Option<&'static $t> {
   86|   560k|                #[thread_local]
   87|   560k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|   560k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|   560k|
   90|   560k|                unsafe {
   91|   560k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|   560k|                    })
  101|   560k|                }
  102|   560k|            }
_RNvNvNtNtCsliEG8YhJqi1_4rand4rngs6thread14THREAD_RNG_KEY6___initB7_:
   80|      1|            fn __init() -> $t { $init }

_RNvCs9jqYw0Nmepu_4trig22count_quad_blank_nodes:
   47|   120k|fn count_quad_blank_nodes(quad: &Quad) -> usize {
   48|   120k|    (match &quad.subject {
   49|   120k|        Subject::BlankNode(_) => 1,
   50|      0|        Subject::Triple(t) => count_triple_blank_nodes(t),
   51|    514|        _ => 0,
   52|   120k|    }) + (match &quad.object {
   53|  96.1k|        Term::BlankNode(_) => 1,
   54|      0|        Term::Triple(t) => count_triple_blank_nodes(t),
   55|  24.6k|        _ => 0,
   56|   120k|    }) + usize::from(matches!(quad.graph_name, GraphName::BlankNode(_)))
   57|   120k|}
_RNvCs9jqYw0Nmepu_4trig15serialize_quads:
   59|  12.0k|fn serialize_quads(quads: &[Quad]) -> Vec<u8> {
   60|  12.0k|    let mut writer = TriGSerializer::new().serialize_to_write(Vec::new());
   61|   132k|    for quad in quads {
   62|   120k|        writer.write_quad(quad).unwrap();
   63|   120k|    }
   64|  12.0k|    writer.finish().unwrap()
   65|  12.0k|}
_RNCNvNvCs9jqYw0Nmepu_4trig1__19___libfuzzer_sys_run0B5_:
   69|  5.24M|    let (quads, errors) = parse(data.split(|c| *c == 0xFF));
_RNCNvNvCs9jqYw0Nmepu_4trig1__19___libfuzzer_sys_runs_0B5_:
   74|  5.24M|        .filter(|c| *c != 0xFF)
_RINvCs9jqYw0Nmepu_4trig5parseARShj1_EB2_:
    7|  12.0k|fn parse<'a>(chunks: impl IntoIterator<Item = &'a [u8]>) -> (Vec<Quad>, Vec<String>) {
    8|  12.0k|    let mut quads = Vec::new();
    9|  12.0k|    let mut errors = Vec::new();
   10|  12.0k|    let mut parser = TriGParser::new()
   11|  12.0k|        .with_quoted_triples()
   12|  12.0k|        .with_base_iri("http://example.com/")
   13|  12.0k|        .unwrap()
   14|  12.0k|        .parse();
   15|  24.0k|    for chunk in chunks {
   16|  12.0k|        parser.extend_from_slice(chunk);
   17|  1.19M|        while let Some(result) = parser.read_next() {
   18|  1.18M|            match result {
   19|   120k|                Ok(quad) => quads.push(quad),
   20|  1.06M|                Err(error) => errors.push(error.to_string()),
   21|       |            }
   22|       |        }
   23|       |    }
   24|  12.0k|    parser.end();
   25|  17.0k|    while let Some(result) = parser.read_next() {
   26|  5.02k|        match result {
   27|    179|            Ok(quad) => quads.push(quad),
   28|  4.84k|            Err(error) => errors.push(error.to_string()),
   29|       |        }
   30|       |    }
   31|  12.0k|    assert!(parser.is_end());
   32|  12.0k|    (quads, errors)
   33|  12.0k|}
_RINvCs9jqYw0Nmepu_4trig5parseINtNtNtCsl2lhD68vXAd_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_run0EEB2_:
    7|  12.0k|fn parse<'a>(chunks: impl IntoIterator<Item = &'a [u8]>) -> (Vec<Quad>, Vec<String>) {
    8|  12.0k|    let mut quads = Vec::new();
    9|  12.0k|    let mut errors = Vec::new();
   10|  12.0k|    let mut parser = TriGParser::new()
   11|  12.0k|        .with_quoted_triples()
   12|  12.0k|        .with_base_iri("http://example.com/")
   13|  12.0k|        .unwrap()
   14|  12.0k|        .parse();
   15|  1.48M|    for chunk in chunks {
   16|  1.47M|        parser.extend_from_slice(chunk);
   17|  2.66M|        while let Some(result) = parser.read_next() {
   18|  1.18M|            match result {
   19|   120k|                Ok(quad) => quads.push(quad),
   20|  1.06M|                Err(error) => errors.push(error.to_string()),
   21|       |            }
   22|       |        }
   23|       |    }
   24|  12.0k|    parser.end();
   25|  17.0k|    while let Some(result) = parser.read_next() {
   26|  5.02k|        match result {
   27|    179|            Ok(quad) => quads.push(quad),
   28|  4.84k|            Err(error) => errors.push(error.to_string()),
   29|       |        }
   30|       |    }
   31|  12.0k|    assert!(parser.is_end());
   32|  12.0k|    (quads, errors)
   33|  12.0k|}

_RNvXsd_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs9jqYw0Nmepu_4trig:
   24|   216k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMs7_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_5IdStr3newCs9jqYw0Nmepu_4trig:
  259|   107k|    fn new(id: u128) -> Self {
  260|   107k|        let mut str = [0; 32];
  261|   107k|        write!(&mut str[..], "{id:x}").unwrap();
  262|   107k|        Self(str)
  263|   107k|    }
_RNvXsr_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs9jqYw0Nmepu_4trig:
  142|   117k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RNvMNtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCs9jqYw0Nmepu_4trig:
   92|   341k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   93|   341k|        BlankNodeRef(match &self.0 {
   94|    215|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   95|   341k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   96|   341k|                id: *id,
   97|   341k|                str: str.as_str(),
   98|   341k|            },
   99|       |        })
  100|   341k|    }
_RNvXsi_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs9jqYw0Nmepu_4trig:
   27|   216k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMs1_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_12BlankNodeRef10into_ownedCs9jqYw0Nmepu_4trig:
  208|   107k|    pub fn into_owned(self) -> BlankNode {
  209|   107k|        BlankNode(match self.0 {
  210|      0|            BlankNodeRefContent::Named(id) => BlankNodeContent::Named(id.to_owned()),
  211|   107k|            BlankNodeRefContent::Anonymous { id, .. } => BlankNodeContent::Anonymous {
  212|   107k|                id,
  213|   107k|                str: IdStr::new(id),
  214|   107k|            },
  215|       |        })
  216|   107k|    }
_RNvXsx_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_19BlankNodeRefContentNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs9jqYw0Nmepu_4trig:
  145|   117k|#[derive(PartialEq, Eq, Debug, Clone, Copy, Hash)]
_RNvXsF_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_5IdStrNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs9jqYw0Nmepu_4trig:
  254|   216k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMs7_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_5IdStr6as_strCs9jqYw0Nmepu_4trig:
  266|   341k|    fn as_str(&self) -> &str {
  267|   341k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  268|   341k|        str::from_utf8(&self.0[..len]).unwrap()
  269|   341k|    }
_RNvXs2_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCs4WjTcpTVJQo_5oxttl:
  221|   203k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  222|   203k|        write!(f, "_:{}", self.as_str())
  223|   203k|    }
_RNvXsm_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneCs4WjTcpTVJQo_5oxttl:
   27|   794k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMs1_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCs4WjTcpTVJQo_5oxttl:
  183|   203k|    pub const fn as_str(self) -> &'a str {
  184|   203k|        match self.0 {
  185|    129|            BlankNodeRefContent::Named(id) => id,
  186|   203k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  187|       |        }
  188|   203k|    }
_RNvMs7_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_5IdStr6as_strCs4WjTcpTVJQo_5oxttl:
  266|   560k|    fn as_str(&self) -> &str {
  267|   560k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  268|   560k|        str::from_utf8(&self.0[..len]).unwrap()
  269|   560k|    }
_RNvXsf_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneCs4WjTcpTVJQo_5oxttl:
   24|   794k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsJ_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_5IdStrNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneCs4WjTcpTVJQo_5oxttl:
  254|   794k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvNtCsbrE1BkJ52QU_5oxrdf10blank_node13to_integer_idCs4WjTcpTVJQo_5oxttl:
  332|   204k|fn to_integer_id(id: &str) -> Option<u128> {
  333|   204k|    let digits = id.as_bytes();
  334|   204k|    let mut value: u128 = 0;
  335|   204k|    if let None | Some(b'0') = digits.first() {
  336|    271|        return None; // No empty string or leading zeros
  337|   204k|    }
  338|  6.70M|    for digit in digits {
  339|  6.50M|        value = value.checked_mul(16)?.checked_add(
  340|  6.50M|            match *digit {
  341|  6.50M|                b'0'..=b'9' => digit - b'0',
  342|  2.56M|                b'a'..=b'f' => digit - b'a' + 10,
  343|    332|                _ => return None,
  344|       |            }
  345|  6.50M|            .into(),
  346|      0|        )?;
  347|       |    }
  348|   203k|    Some(value)
  349|   204k|}
_RNvMNtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idCs4WjTcpTVJQo_5oxttl:
   66|   203k|    pub fn new_from_unique_id(id: u128) -> Self {
   67|   203k|        Self(BlankNodeContent::Anonymous {
   68|   203k|            id,
   69|   203k|            str: IdStr::new(id),
   70|   203k|        })
   71|   203k|    }
_RNvMs7_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_5IdStr3newCs4WjTcpTVJQo_5oxttl:
  259|   764k|    fn new(id: u128) -> Self {
  260|   764k|        let mut str = [0; 32];
  261|   764k|        write!(&mut str[..], "{id:x}").unwrap();
  262|   764k|        Self(str)
  263|   764k|    }
_RNvXs0_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCsl2lhD68vXAd_4core7default7Default7defaultCs4WjTcpTVJQo_5oxttl:
  113|   224k|    fn default() -> Self {
  114|       |        // We ensure the ID does not start with a number to be also valid with RDF/XML
  115|   560k|        loop {
  116|   560k|            let id = random();
  117|   560k|            let str = IdStr::new(id);
  118|   560k|            if matches!(str.as_str().as_bytes().first(), Some(b'a'..=b'f')) {
  119|   224k|                return Self(BlankNodeContent::Anonymous { id, str });
  120|   336k|            }
  121|       |        }
  122|   224k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedReECs4WjTcpTVJQo_5oxttl:
   53|   204k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   54|   204k|        let id = id.into();
   55|   204k|        if let Some(numerical_id) = to_integer_id(&id) {
   56|   203k|            Self::new_from_unique_id(numerical_id)
   57|       |        } else {
   58|    603|            Self(BlankNodeContent::Named(id))
   59|       |        }
   60|   204k|    }
_RNCNvMs7_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  267|  29.1M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
_RNvMNtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idB4_:
   66|  20.0k|    pub fn new_from_unique_id(id: u128) -> Self {
   67|  20.0k|        Self(BlankNodeContent::Anonymous {
   68|  20.0k|            id,
   69|  20.0k|            str: IdStr::new(id),
   70|  20.0k|        })
   71|  20.0k|    }
_RNvMs7_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_5IdStr3newB7_:
  259|  20.0k|    fn new(id: u128) -> Self {
  260|  20.0k|        let mut str = [0; 32];
  261|  20.0k|        write!(&mut str[..], "{id:x}").unwrap();
  262|  20.0k|        Self(str)
  263|  20.0k|    }
_RNvMs7_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_5IdStr6as_strB7_:
  266|  20.0k|    fn as_str(&self) -> &str {
  267|  20.0k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  268|  20.0k|        str::from_utf8(&self.0[..len]).unwrap()
  269|  20.0k|    }
_RNvMs1_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_12BlankNodeRef13new_uncheckedB7_:
  170|  3.85k|    pub fn new_unchecked(id: &'a str) -> Self {
  171|  3.85k|        if let Some(numerical_id) = to_integer_id(id) {
  172|  3.85k|            Self(BlankNodeRefContent::Anonymous {
  173|  3.85k|                id: numerical_id,
  174|  3.85k|                str: id,
  175|  3.85k|            })
  176|       |        } else {
  177|      0|            Self(BlankNodeRefContent::Named(id))
  178|       |        }
  179|  3.85k|    }
_RNvMs1_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strB7_:
  183|  11.9k|    pub const fn as_str(self) -> &'a str {
  184|  11.9k|        match self.0 {
  185|     86|            BlankNodeRefContent::Named(id) => id,
  186|  11.8k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  187|       |        }
  188|  11.9k|    }
_RNvMs1_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_12BlankNodeRef9unique_idB7_:
  200|  31.5k|    pub const fn unique_id(&self) -> Option<u128> {
  201|  31.5k|        match self.0 {
  202|     86|            BlankNodeRefContent::Named(_) => None,
  203|  31.4k|            BlankNodeRefContent::Anonymous { id, .. } => Some(id),
  204|       |        }
  205|  31.5k|    }
_RNvNtCsbrE1BkJ52QU_5oxrdf10blank_node13to_integer_idB3_:
  332|  3.85k|fn to_integer_id(id: &str) -> Option<u128> {
  333|  3.85k|    let digits = id.as_bytes();
  334|  3.85k|    let mut value: u128 = 0;
  335|  3.85k|    if let None | Some(b'0') = digits.first() {
  336|      0|        return None; // No empty string or leading zeros
  337|  3.85k|    }
  338|  65.2k|    for digit in digits {
  339|  61.4k|        value = value.checked_mul(16)?.checked_add(
  340|  61.4k|            match *digit {
  341|  61.4k|                b'0'..=b'9' => digit - b'0',
  342|  23.3k|                b'a'..=b'f' => digit - b'a' + 10,
  343|      0|                _ => return None,
  344|       |            }
  345|  61.4k|            .into(),
  346|      0|        )?;
  347|       |    }
  348|  3.85k|    Some(value)
  349|  3.85k|}
_RNvMNtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB2_9BlankNode6as_refB4_:
   92|  20.0k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   93|  20.0k|        BlankNodeRef(match &self.0 {
   94|      0|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   95|  20.0k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   96|  20.0k|                id: *id,
   97|  20.0k|                str: str.as_str(),
   98|  20.0k|            },
   99|       |        })
  100|  20.0k|    }

_RINvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB3_7Dataset6insertRNtNtB5_6triple4QuadECs9jqYw0Nmepu_4trig:
  360|  6.69k|    pub fn insert<'a>(&mut self, quad: impl Into<QuadRef<'a>>) -> bool {
  361|  6.69k|        let quad = self.encode_quad(quad.into());
  362|  6.69k|        self.insert_encoded(quad)
  363|  6.69k|    }
_RINvXs5_NtCsbrE1BkJ52QU_5oxrdf7datasetNtB6_7DatasetINtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect6ExtendRNtNtB8_6triple4QuadE6extendINtNtNtBW_5slice4iter4IterB1H_EECs9jqYw0Nmepu_4trig:
  960|  2.82k|    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  961|  9.51k|        for t in iter {
  962|  6.69k|            self.insert(t);
  963|  6.69k|        }
  964|  2.82k|    }
_RINvXs3_NtCsbrE1BkJ52QU_5oxrdf7datasetNtB6_7DatasetINtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect12FromIteratorRNtNtB8_6triple4QuadE9from_iterINtNtNtBW_5slice4iter4IterB1O_EECs9jqYw0Nmepu_4trig:
  944|  2.82k|    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self {
  945|  2.82k|        let mut g = Self::new();
  946|  2.82k|        g.extend(iter);
  947|  2.82k|        g
  948|  2.82k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset15hash_graph_name:
  745|  59.0k|    fn hash_graph_name(
  746|  59.0k|        &self,
  747|  59.0k|        graph_name: &InternedGraphName,
  748|  59.0k|        current_blank_node: InternedBlankNode,
  749|  59.0k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  750|  59.0k|    ) -> u64 {
  751|  59.0k|        match graph_name {
  752|    304|            InternedGraphName::NamedNode(node) => {
  753|    304|                Self::hash_tuple(node.decode_from(&self.interner))
  754|       |            }
  755|      0|            InternedGraphName::BlankNode(bnode) => {
  756|      0|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  757|       |            }
  758|  58.7k|            InternedGraphName::DefaultGraph => 0,
  759|       |        }
  760|  59.0k|    }
_RNvXsg_NtCsbrE1BkJ52QU_5oxrdf7datasetNtB5_4IterNtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4next:
 1530|  4.63k|    fn next(&mut self) -> Option<QuadRef<'a>> {
 1531|  4.63k|        self.inner
 1532|  4.63k|            .next()
 1533|  4.63k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))
 1534|  4.63k|    }
_RNvXs1_NtCsbrE1BkJ52QU_5oxrdf7datasetRNtB5_7DatasetNtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect12IntoIterator9into_iter:
  930|  1.41k|    fn into_iter(self) -> Iter<'a> {
  931|  1.41k|        self.iter()
  932|  1.41k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset5clear:
  411|  2.82k|    pub fn clear(&mut self) {
  412|  2.82k|        self.gspo.clear();
  413|  2.82k|        self.gpos.clear();
  414|  2.82k|        self.gosp.clear();
  415|  2.82k|        self.spog.clear();
  416|  2.82k|        self.posg.clear();
  417|  2.82k|        self.ospg.clear();
  418|  2.82k|    }
_RNvXsj_NtCsbrE1BkJ52QU_5oxrdf7datasetNtB5_7DatasetNtNtCsl2lhD68vXAd_4core7default7Default7defaultB7_:
   66|  2.82k|#[derive(Debug, Default, Clone)]
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset12canonicalize:
  541|  2.82k|    pub fn canonicalize(&mut self) {
  542|  2.82k|        let bnodes = self.blank_nodes();
  543|  2.82k|        let quads_per_blank_node = self.quads_per_blank_nodes();
  544|  2.82k|        let (hash, partition) = self.hash_bnodes(
  545|  2.82k|            bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
  546|  2.82k|            &quads_per_blank_node,
  547|  2.82k|        );
  548|  2.82k|        let new_quads = self.distinguish(&hash, &partition, &quads_per_blank_node);
  549|  2.82k|        self.clear();
  550|  9.26k|        for quad in new_quads {
  551|  6.44k|            self.insert_encoded(quad);
  552|  6.44k|        }
  553|  2.82k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset11hash_bnodes:
  642|  8.46k|    fn hash_bnodes(
  643|  8.46k|        &self,
  644|  8.46k|        mut hashes: HashMap<InternedBlankNode, u64>,
  645|  8.46k|        quads_per_blank_node: &QuadsPerBlankNode,
  646|  8.46k|    ) -> (
  647|  8.46k|        HashMap<InternedBlankNode, u64>,
  648|  8.46k|        Vec<(u64, Vec<InternedBlankNode>)>,
  649|  8.46k|    ) {
  650|  8.46k|        let mut to_hash = Vec::new();
  651|  8.46k|        let mut to_do = hashes
  652|  8.46k|            .keys()
  653|  8.46k|            .map(|bnode| (*bnode, true))
  654|  8.46k|            .collect::<HashMap<_, _>>();
  655|  8.46k|        let mut partition = HashMap::<_, Vec<_>>::with_capacity(hashes.len());
  656|  8.46k|        let mut old_partition_count = usize::MAX;
  657|  25.4k|        while old_partition_count != partition.len() {
  658|  16.9k|            old_partition_count = partition.len();
  659|  16.9k|            partition.clear();
  660|  16.9k|            let mut new_hashes = hashes.clone();
  661|  55.4k|            for bnode in hashes.keys() {
  662|  55.4k|                let hash = if to_do.contains_key(bnode) {
  663|  59.0k|                    for (s, p, o, g) in &quads_per_blank_node[bnode] {
  664|  59.0k|                        to_hash.push((
  665|  59.0k|                            self.hash_subject(s, *bnode, &hashes),
  666|  59.0k|                            self.hash_named_node(*p),
  667|  59.0k|                            self.hash_term(o, *bnode, &hashes),
  668|  59.0k|                            self.hash_graph_name(g, *bnode, &hashes),
  669|  59.0k|                        ));
  670|  59.0k|                    }
  671|  55.4k|                    to_hash.sort_unstable();
  672|  55.4k|                    let hash = Self::hash_tuple((&to_hash, hashes[bnode]));
  673|  55.4k|                    to_hash.clear();
  674|  55.4k|                    if hash == hashes[bnode] {
  675|      0|                        to_do.insert(*bnode, false);
  676|  55.4k|                    } else {
  677|  55.4k|                        new_hashes.insert(*bnode, hash);
  678|  55.4k|                    }
  679|  55.4k|                    hash
  680|       |                } else {
  681|      0|                    hashes[bnode]
  682|       |                };
  683|  55.4k|                partition.entry(hash).or_default().push(*bnode);
  684|       |            }
  685|  16.9k|            hashes = new_hashes;
  686|       |        }
  687|  8.46k|        let mut partition: Vec<_> = partition.into_iter().collect();
  688|  8.46k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));
  689|  8.46k|        (hashes, partition)
  690|  8.46k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset9hash_term:
  726|  59.0k|    fn hash_term(
  727|  59.0k|        &self,
  728|  59.0k|        term: &InternedTerm,
  729|  59.0k|        current_blank_node: InternedBlankNode,
  730|  59.0k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  731|  59.0k|    ) -> u64 {
  732|  59.0k|        match term {
  733|  1.53k|            InternedTerm::NamedNode(node) => Self::hash_tuple(node.decode_from(&self.interner)),
  734|  7.55k|            InternedTerm::BlankNode(bnode) => {
  735|  7.55k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  736|       |            }
  737|  49.9k|            InternedTerm::Literal(literal) => Self::hash_tuple(literal.decode_from(&self.interner)),
  738|       |            #[cfg(feature = "rdf-star")]
  739|      0|            InternedTerm::Triple(triple) => {
  740|      0|                self.hash_triple(triple, current_blank_node, bnodes_hash)
  741|       |            }
  742|       |        }
  743|  59.0k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset9gen_bnode:
  902|  20.0k|    fn gen_bnode(
  903|  20.0k|        old_bnode: InternedBlankNode,
  904|  20.0k|        hashes: &HashMap<InternedBlankNode, u64>,
  905|  20.0k|    ) -> BlankNode {
  906|  20.0k|        BlankNode::new_from_unique_id(hashes[&old_bnode].into())
  907|  20.0k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset11decode_spog:
  479|  3.22k|    fn decode_spog(
  480|  3.22k|        &self,
  481|  3.22k|        quad: (
  482|  3.22k|            &InternedSubject,
  483|  3.22k|            &InternedNamedNode,
  484|  3.22k|            &InternedTerm,
  485|  3.22k|            &InternedGraphName,
  486|  3.22k|        ),
  487|  3.22k|    ) -> QuadRef<'_> {
  488|  3.22k|        QuadRef {
  489|  3.22k|            subject: quad.0.decode_from(&self.interner),
  490|  3.22k|            predicate: quad.1.decode_from(&self.interner),
  491|  3.22k|            object: quad.2.decode_from(&self.interner),
  492|  3.22k|            graph_name: quad.3.decode_from(&self.interner),
  493|  3.22k|        }
  494|  3.22k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset21quads_per_blank_nodes:
  593|  2.82k|    fn quads_per_blank_nodes(&self) -> QuadsPerBlankNode {
  594|  2.82k|        let mut map: HashMap<_, Vec<_>> = HashMap::new();
  595|  9.26k|        for quad in &self.spog {
  596|  6.44k|            if let InternedSubject::BlankNode(bnode) = &quad.0 {
  597|  6.02k|                map.entry(*bnode).or_default().push(quad.clone());
  598|  6.02k|            }
  599|       |            #[cfg(feature = "rdf-star")]
  600|  6.44k|            if let InternedSubject::Triple(t) = &quad.0 {
  601|      0|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  602|  6.44k|            }
  603|  6.44k|            if let InternedTerm::BlankNode(bnode) = &quad.2 {
  604|  1.67k|                map.entry(*bnode).or_default().push(quad.clone());
  605|  4.77k|            }
  606|       |            #[cfg(feature = "rdf-star")]
  607|  6.44k|            if let InternedTerm::Triple(t) = &quad.2 {
  608|      0|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  609|  6.44k|            }
  610|  6.44k|            if let InternedGraphName::BlankNode(bnode) = &quad.3 {
  611|      0|                map.entry(*bnode).or_default().push(quad.clone());
  612|  6.44k|            }
  613|       |        }
  614|  2.82k|        map
  615|  2.82k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset15hash_blank_node:
  696|  66.6k|    fn hash_blank_node(
  697|  66.6k|        node: InternedBlankNode,
  698|  66.6k|        current_blank_node: InternedBlankNode,
  699|  66.6k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  700|  66.6k|    ) -> u64 {
  701|  66.6k|        if node == current_blank_node {
  702|  59.0k|            u64::MAX
  703|       |        } else {
  704|  7.55k|            bnodes_hash[&node]
  705|       |        }
  706|  66.6k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset12hash_subject:
  708|  59.0k|    fn hash_subject(
  709|  59.0k|        &self,
  710|  59.0k|        node: &InternedSubject,
  711|  59.0k|        current_blank_node: InternedBlankNode,
  712|  59.0k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  713|  59.0k|    ) -> u64 {
  714|  59.0k|        match node {
  715|      4|            InternedSubject::NamedNode(node) => Self::hash_tuple(node.decode_from(&self.interner)),
  716|  59.0k|            InternedSubject::BlankNode(bnode) => {
  717|  59.0k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  718|       |            }
  719|       |            #[cfg(feature = "rdf-star")]
  720|      0|            InternedSubject::Triple(triple) => {
  721|      0|                self.hash_triple(triple, current_blank_node, bnodes_hash)
  722|       |            }
  723|       |        }
  724|  59.0k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset3len:
  350|  2.82k|    pub fn len(&self) -> usize {
  351|  2.82k|        self.gspo.len()
  352|  2.82k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset9map_bnode:
  891|  20.0k|    fn map_bnode(
  892|  20.0k|        &mut self,
  893|  20.0k|        old_bnode: InternedBlankNode,
  894|  20.0k|        hashes: &HashMap<InternedBlankNode, u64>,
  895|  20.0k|    ) -> InternedBlankNode {
  896|  20.0k|        InternedBlankNode::encoded_into(
  897|  20.0k|            Self::gen_bnode(old_bnode, hashes).as_ref(),
  898|  20.0k|            &mut self.interner,
  899|  20.0k|        )
  900|  20.0k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset15hash_named_node:
  692|  59.0k|    fn hash_named_node(&self, node: InternedNamedNode) -> u64 {
  693|  59.0k|        Self::hash_tuple(node.decode_from(&self.interner))
  694|  59.0k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset14insert_encoded:
  365|  13.1k|    fn insert_encoded(
  366|  13.1k|        &mut self,
  367|  13.1k|        quad: (
  368|  13.1k|            InternedSubject,
  369|  13.1k|            InternedNamedNode,
  370|  13.1k|            InternedTerm,
  371|  13.1k|            InternedGraphName,
  372|  13.1k|        ),
  373|  13.1k|    ) -> bool {
  374|  13.1k|        let (s, p, o, g) = quad;
  375|  13.1k|        self.gspo.insert((g.clone(), s.clone(), p, o.clone()));
  376|  13.1k|        self.gpos.insert((g.clone(), p, o.clone(), s.clone()));
  377|  13.1k|        self.gosp.insert((g.clone(), o.clone(), s.clone(), p));
  378|  13.1k|        self.spog.insert((s.clone(), p, o.clone(), g.clone()));
  379|  13.1k|        self.posg.insert((p, o.clone(), s.clone(), g.clone()));
  380|  13.1k|        self.ospg.insert((o, s, p, g))
  381|  13.1k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset3new:
  109|  2.82k|    pub fn new() -> Self {
  110|  2.82k|        Self::default()
  111|  2.82k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset11distinguish:
  782|  8.46k|    fn distinguish(
  783|  8.46k|        &mut self,
  784|  8.46k|        hash: &HashMap<InternedBlankNode, u64>,
  785|  8.46k|        partition: &[(u64, Vec<InternedBlankNode>)],
  786|  8.46k|        quads_per_blank_node: &QuadsPerBlankNode,
  787|  8.46k|    ) -> Vec<(
  788|  8.46k|        InternedSubject,
  789|  8.46k|        InternedNamedNode,
  790|  8.46k|        InternedTerm,
  791|  8.46k|        InternedGraphName,
  792|  8.46k|    )> {
  793|  8.46k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
  794|  8.46k|        if let Some(b_prime) = b_prime {
  795|  2.47k|            b_prime
  796|  2.47k|                .iter()
  797|  2.47k|                .map(|b| {
  798|       |                    let mut hash_prime = hash.clone();
  799|       |                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  800|       |                    let (hash_prime_prime, partition_prime) =
  801|       |                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  802|       |                    self.distinguish(&hash_prime_prime, &partition_prime, quads_per_blank_node)
  803|  2.47k|                })
  804|  2.47k|                .reduce(min)
  805|  2.47k|                .unwrap_or_default()
  806|       |        } else {
  807|  5.99k|            self.label(hash)
  808|       |        }
  809|  8.46k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset4iter:
  169|  1.41k|    pub fn iter(&self) -> Iter<'_> {
  170|  1.41k|        let iter = self.spog.iter();
  171|  1.41k|        Iter {
  172|  1.41k|            dataset: self,
  173|  1.41k|            inner: iter,
  174|  1.41k|        }
  175|  1.41k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset11blank_nodes:
  555|  2.82k|    fn blank_nodes(&self) -> HashSet<InternedBlankNode> {
  556|  2.82k|        let mut bnodes = HashSet::new();
  557|  9.26k|        for (g, s, _, o) in &self.gspo {
  558|  6.44k|            if let InternedSubject::BlankNode(bnode) = s {
  559|  6.02k|                bnodes.insert(*bnode);
  560|  6.02k|            }
  561|       |            #[cfg(feature = "rdf-star")]
  562|  6.44k|            if let InternedSubject::Triple(triple) = s {
  563|      0|                Self::triple_blank_nodes(triple, &mut bnodes);
  564|  6.44k|            }
  565|  6.44k|            if let InternedTerm::BlankNode(bnode) = o {
  566|  1.67k|                bnodes.insert(*bnode);
  567|  4.77k|            }
  568|       |            #[cfg(feature = "rdf-star")]
  569|  6.44k|            if let InternedTerm::Triple(triple) = o {
  570|      0|                Self::triple_blank_nodes(triple, &mut bnodes);
  571|  6.44k|            }
  572|  6.44k|            if let InternedGraphName::BlankNode(bnode) = g {
  573|      0|                bnodes.insert(*bnode);
  574|  6.44k|            }
  575|       |        }
  576|  2.82k|        bnodes
  577|  2.82k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset5label:
  812|  5.99k|    fn label(
  813|  5.99k|        &mut self,
  814|  5.99k|        hashes: &HashMap<InternedBlankNode, u64>,
  815|  5.99k|    ) -> Vec<(
  816|  5.99k|        InternedSubject,
  817|  5.99k|        InternedNamedNode,
  818|  5.99k|        InternedTerm,
  819|  5.99k|        InternedGraphName,
  820|  5.99k|    )> {
  821|  5.99k|        let old_quads: Vec<_> = self.spog.iter().cloned().collect();
  822|  5.99k|        let mut quads: Vec<_> = old_quads
  823|  5.99k|            .into_iter()
  824|  5.99k|            .map(|(s, p, o, g)| {
  825|       |                (
  826|       |                    match s {
  827|       |                        InternedSubject::NamedNode(_) => s,
  828|       |                        InternedSubject::BlankNode(bnode) => {
  829|       |                            InternedSubject::BlankNode(self.map_bnode(bnode, hashes))
  830|       |                        }
  831|       |                        #[cfg(feature = "rdf-star")]
  832|       |                        InternedSubject::Triple(triple) => {
  833|       |                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  834|       |                                self.label_triple(&triple, hashes).as_ref(),
  835|       |                                &mut self.interner,
  836|       |                            )))
  837|       |                        }
  838|       |                    },
  839|       |                    p,
  840|       |                    match o {
  841|       |                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  842|       |                        InternedTerm::BlankNode(bnode) => {
  843|       |                            InternedTerm::BlankNode(self.map_bnode(bnode, hashes))
  844|       |                        }
  845|       |                        #[cfg(feature = "rdf-star")]
  846|       |                        InternedTerm::Triple(triple) => {
  847|       |                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  848|       |                                self.label_triple(&triple, hashes).as_ref(),
  849|       |                                &mut self.interner,
  850|       |                            )))
  851|       |                        }
  852|       |                    },
  853|       |                    match g {
  854|       |                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  855|       |                        InternedGraphName::BlankNode(bnode) => {
  856|       |                            InternedGraphName::BlankNode(self.map_bnode(bnode, hashes))
  857|       |                        }
  858|       |                    },
  859|       |                )
  860|  5.99k|            })
  861|  5.99k|            .collect();
  862|  5.99k|        quads.sort_unstable();
  863|  5.99k|        quads
  864|  5.99k|    }
_RNvXs_NtCsbrE1BkJ52QU_5oxrdf7datasetNtB4_7DatasetNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eq:
  911|  1.41k|    fn eq(&self, other: &Self) -> bool {
  912|  1.41k|        if self.len() != other.len() {
  913|      0|            return false;
  914|  1.41k|        }
  915|  4.63k|        for q in self {
  916|  3.22k|            if !other.contains(q) {
  917|      0|                return false;
  918|  3.22k|            }
  919|       |        }
  920|  1.41k|        true
  921|  1.41k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset11encode_quad:
  420|  6.69k|    fn encode_quad(
  421|  6.69k|        &mut self,
  422|  6.69k|        quad: QuadRef<'_>,
  423|  6.69k|    ) -> (
  424|  6.69k|        InternedSubject,
  425|  6.69k|        InternedNamedNode,
  426|  6.69k|        InternedTerm,
  427|  6.69k|        InternedGraphName,
  428|  6.69k|    ) {
  429|  6.69k|        (
  430|  6.69k|            InternedSubject::encoded_into(quad.subject, &mut self.interner),
  431|  6.69k|            InternedNamedNode::encoded_into(quad.predicate, &mut self.interner),
  432|  6.69k|            InternedTerm::encoded_into(quad.object, &mut self.interner),
  433|  6.69k|            InternedGraphName::encoded_into(quad.graph_name, &mut self.interner),
  434|  6.69k|        )
  435|  6.69k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset12encoded_quad:
  437|  3.22k|    fn encoded_quad(
  438|  3.22k|        &self,
  439|  3.22k|        quad: QuadRef<'_>,
  440|  3.22k|    ) -> Option<(
  441|  3.22k|        InternedSubject,
  442|  3.22k|        InternedNamedNode,
  443|  3.22k|        InternedTerm,
  444|  3.22k|        InternedGraphName,
  445|  3.22k|    )> {
  446|  3.22k|        Some((
  447|  3.22k|            self.encoded_subject(quad.subject)?,
  448|  3.22k|            self.encoded_named_node(quad.predicate)?,
  449|  3.22k|            self.encoded_term(quad.object)?,
  450|  3.22k|            self.encoded_graph_name(quad.graph_name)?,
  451|       |        ))
  452|  3.22k|    }
_RNCNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB4_7Dataset11distinguishs_0B6_:
  793|  24.4k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
_RNCNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB4_7Dataset11hash_bnodess_0B6_:
  688|  23.6k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));
_RINvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB3_7Dataset10hash_tupleNtNtB5_10named_node12NamedNodeRefEB5_:
  776|  60.9k|    fn hash_tuple(v: impl Hash) -> u64 {
  777|  60.9k|        let mut hasher = DefaultHasher::new();
  778|  60.9k|        v.hash(&mut hasher);
  779|  60.9k|        hasher.finish()
  780|  60.9k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB3_7Dataset8containsNtNtB5_6triple7QuadRefEB5_:
  341|  3.22k|    pub fn contains<'a>(&self, quad: impl Into<QuadRef<'a>>) -> bool {
  342|  3.22k|        if let Some(q) = self.encoded_quad(quad.into()) {
  343|  3.22k|            self.spog.contains(&q)
  344|       |        } else {
  345|      0|            false
  346|       |        }
  347|  3.22k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB3_7Dataset10hash_tupleNtNtB5_7literal10LiteralRefEB5_:
  776|  49.9k|    fn hash_tuple(v: impl Hash) -> u64 {
  777|  49.9k|        let mut hasher = DefaultHasher::new();
  778|  49.9k|        v.hash(&mut hasher);
  779|  49.9k|        hasher.finish()
  780|  49.9k|    }
_RNCNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB4_7Dataset11distinguish0B6_:
  793|  24.4k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
_RNCNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB4_7Dataset11distinguishs0_0B6_:
  797|  5.64k|                .map(|b| {
  798|  5.64k|                    let mut hash_prime = hash.clone();
  799|  5.64k|                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  800|  5.64k|                    let (hash_prime_prime, partition_prime) =
  801|  5.64k|                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  802|  5.64k|                    self.distinguish(&hash_prime_prime, &partition_prime, quads_per_blank_node)
  803|  5.64k|                })
_RINvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB3_7Dataset15encoded_subjectNtNtB5_6triple10SubjectRefEB5_:
  461|  3.22k|    pub(super) fn encoded_subject<'a>(
  462|  3.22k|        &self,
  463|  3.22k|        node: impl Into<SubjectRef<'a>>,
  464|  3.22k|    ) -> Option<InternedSubject> {
  465|  3.22k|        InternedSubject::encoded_from(node.into(), &self.interner)
  466|  3.22k|    }
_RNCNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB4_7Dataset5label0B6_:
  824|  18.8k|            .map(|(s, p, o, g)| {
  825|  18.8k|                (
  826|  18.8k|                    match s {
  827|    640|                        InternedSubject::NamedNode(_) => s,
  828|  18.2k|                        InternedSubject::BlankNode(bnode) => {
  829|  18.2k|                            InternedSubject::BlankNode(self.map_bnode(bnode, hashes))
  830|       |                        }
  831|       |                        #[cfg(feature = "rdf-star")]
  832|      0|                        InternedSubject::Triple(triple) => {
  833|      0|                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  834|      0|                                self.label_triple(&triple, hashes).as_ref(),
  835|      0|                                &mut self.interner,
  836|      0|                            )))
  837|       |                        }
  838|       |                    },
  839|  18.8k|                    p,
  840|  18.8k|                    match o {
  841|  17.0k|                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  842|  1.78k|                        InternedTerm::BlankNode(bnode) => {
  843|  1.78k|                            InternedTerm::BlankNode(self.map_bnode(bnode, hashes))
  844|       |                        }
  845|       |                        #[cfg(feature = "rdf-star")]
  846|      0|                        InternedTerm::Triple(triple) => {
  847|      0|                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  848|      0|                                self.label_triple(&triple, hashes).as_ref(),
  849|      0|                                &mut self.interner,
  850|      0|                            )))
  851|       |                        }
  852|       |                    },
  853|  18.8k|                    match g {
  854|  18.8k|                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  855|      0|                        InternedGraphName::BlankNode(bnode) => {
  856|      0|                            InternedGraphName::BlankNode(self.map_bnode(bnode, hashes))
  857|       |                        }
  858|       |                    },
  859|       |                )
  860|  18.8k|            })
_RINvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB3_7Dataset10hash_tupleTRINtNtCsdBW21Yiwikk_5alloc3vec3VecTyyyyEEyEEB5_:
  776|  55.4k|    fn hash_tuple(v: impl Hash) -> u64 {
  777|  55.4k|        let mut hasher = DefaultHasher::new();
  778|  55.4k|        v.hash(&mut hasher);
  779|  55.4k|        hasher.finish()
  780|  55.4k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB3_7Dataset18encoded_named_nodeNtNtB5_10named_node12NamedNodeRefEB5_:
  454|  3.22k|    pub(super) fn encoded_named_node<'a>(
  455|  3.22k|        &self,
  456|  3.22k|        node: impl Into<NamedNodeRef<'a>>,
  457|  3.22k|    ) -> Option<InternedNamedNode> {
  458|  3.22k|        InternedNamedNode::encoded_from(node.into(), &self.interner)
  459|  3.22k|    }
_RNCNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB4_7Dataset12canonicalize0B6_:
  545|  5.98k|            bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
_RNCNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB4_7Dataset11hash_bnodes0B6_:
  653|  27.7k|            .map(|bnode| (*bnode, true))
_RINvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB3_7Dataset12encoded_termNtNtB5_6triple7TermRefEB5_:
  468|  3.22k|    pub(super) fn encoded_term<'a>(&self, term: impl Into<TermRef<'a>>) -> Option<InternedTerm> {
  469|  3.22k|        InternedTerm::encoded_from(term.into(), &self.interner)
  470|  3.22k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB3_7Dataset10hash_tupleTylEEB5_:
  776|  5.64k|    fn hash_tuple(v: impl Hash) -> u64 {
  777|  5.64k|        let mut hasher = DefaultHasher::new();
  778|  5.64k|        v.hash(&mut hasher);
  779|  5.64k|        hasher.finish()
  780|  5.64k|    }
_RNCNvXsg_NtCsbrE1BkJ52QU_5oxrdf7datasetNtB7_4IterNtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4next0B9_:
 1533|  3.22k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))
_RINvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB3_7Dataset18encoded_graph_nameNtNtB5_6triple12GraphNameRefEB5_:
  472|  3.22k|    pub(super) fn encoded_graph_name<'a>(
  473|  3.22k|        &self,
  474|  3.22k|        graph_name: impl Into<GraphNameRef<'a>>,
  475|  3.22k|    ) -> Option<InternedGraphName> {
  476|  3.22k|        InternedGraphName::encoded_from(graph_name.into(), &self.interner)
  477|  3.22k|    }

_RINvXsl_NtCsbrE1BkJ52QU_5oxrdf9interningNtB6_3KeyNtNtCsl2lhD68vXAd_4core4hash4Hash4hashNtNtNtCs7HEjVFsiW5Z_3std4hash6random13DefaultHasherEB8_:
   69|  1.99k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNCNvMs1_NtCsbrE1BkJ52QU_5oxrdf9interningNtB7_17InternedBlankNode12encoded_into0B9_:
  135|  11.8k|                .or_insert_with(|| blank_node.as_str().into());
_RINvXsF_NtCsbrE1BkJ52QU_5oxrdf9interningNtB6_17InternedBlankNodeNtNtCsl2lhD68vXAd_4core4hash4Hash4hashNtNtNtCs7HEjVFsiW5Z_3std4hash6random13DefaultHasherEB8_:
  123|   368k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMNtCsbrE1BkJ52QU_5oxrdf9interningNtB2_8Interner3get:
   39|  7.69k|    fn get(&self, value: &str) -> Option<Key> {
   40|  7.69k|        let mut hash = self.hash(value);
   41|       |        loop {
   42|  7.69k|            let v = self.string_for_hash.get(&hash)?;
   43|  7.69k|            if v == value {
   44|  7.69k|                return Some(Key(hash));
   45|      0|            } else if hash == u64::MAX - 1 {
   46|      0|                hash = 0;
   47|      0|            } else {
   48|      0|                hash += 1;
   49|      0|            }
   50|       |        }
   51|  7.69k|    }
_RNvMs1_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedBlankNode11decode_from:
  157|  3.85k|    pub fn decode_from(self, interner: &Interner) -> BlankNodeRef<'_> {
  158|  3.85k|        BlankNodeRef::new_unchecked(match self {
  159|  3.85k|            Self::Number { id } => &interner.string_for_blank_node_id[&id],
  160|      0|            Self::Other { id } => interner.resolve(id),
  161|       |        })
  162|  3.85k|    }
_RNvMs5_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_12InternedTerm12encoded_from:
  419|  3.22k|    pub fn encoded_from(term: TermRef<'_>, interner: &Interner) -> Option<Self> {
  420|  3.22k|        Some(match term {
  421|    330|            TermRef::NamedNode(term) => {
  422|    330|                Self::NamedNode(InternedNamedNode::encoded_from(term, interner)?)
  423|       |            }
  424|    839|            TermRef::BlankNode(term) => {
  425|    839|                Self::BlankNode(InternedBlankNode::encoded_from(term, interner)?)
  426|       |            }
  427|  2.05k|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_from(term, interner)?),
  428|       |            #[cfg(feature = "rdf-star")]
  429|      0|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  430|      0|                triple.as_ref(),
  431|      0|                interner,
  432|      0|            )?)),
  433|       |        })
  434|  3.22k|    }
_RNvXs7_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_21IdentityHasherBuilderNtNtCsl2lhD68vXAd_4core4hash11BuildHasher12build_hasher:
  513|   195k|    fn build_hasher(&self) -> IdentityHasher {
  514|   195k|        IdentityHasher::default()
  515|   195k|    }
_RNvXsz_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedBlankNodeNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqB7_:
  123|   386k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedGraphName11decode_from:
  367|  3.22k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> GraphNameRef<'a> {
  368|  3.22k|        match self {
  369|  3.19k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  370|     30|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.decode_from(interner)),
  371|      0|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.decode_from(interner)),
  372|       |        }
  373|  3.22k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf9interningNtB2_8Interner13get_or_intern:
   18|  16.4k|    fn get_or_intern(&mut self, value: &str) -> Key {
   19|  16.4k|        let mut hash = self.hash(value);
   20|  16.4k|        loop {
   21|  16.4k|            match self.string_for_hash.entry(hash) {
   22|  10.0k|                Entry::Vacant(e) => {
   23|  10.0k|                    e.insert(value.into());
   24|  10.0k|                    return Key(hash);
   25|       |                }
   26|  6.44k|                Entry::Occupied(e) => loop {
   27|  6.44k|                    if e.get() == value {
   28|  6.44k|                        return Key(hash);
   29|      0|                    } else if hash == u64::MAX - 1 {
   30|      0|                        hash = 0;
   31|      0|                    } else {
   32|      0|                        hash += 1;
   33|      0|                    }
   34|       |                },
   35|       |            }
   36|       |        }
   37|  16.4k|    }
_RNvMs1_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedBlankNode12encoded_from:
  144|  3.85k|    pub fn encoded_from(blank_node: BlankNodeRef<'_>, interner: &Interner) -> Option<Self> {
  145|  3.85k|        if let Some(id) = blank_node.unique_id() {
  146|  3.85k|            interner
  147|  3.85k|                .string_for_blank_node_id
  148|  3.85k|                .contains_key(&id)
  149|  3.85k|                .then_some(Self::Number { id })
  150|       |        } else {
  151|       |            Some(Self::Other {
  152|      0|                id: interner.get(blank_node.as_str())?,
  153|       |            })
  154|       |        }
  155|  3.85k|    }
_RNvMs2_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedLiteral11decode_from:
  228|  52.0k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> LiteralRef<'a> {
  229|  52.0k|        match self {
  230|  1.03k|            Self::String { value_id } => {
  231|  1.03k|                LiteralRef::new_simple_literal(interner.resolve(*value_id))
  232|       |            }
  233|       |            Self::LanguageTaggedString {
  234|      0|                value_id,
  235|      0|                language_id,
  236|      0|            } => LiteralRef::new_language_tagged_literal_unchecked(
  237|      0|                interner.resolve(*value_id),
  238|      0|                interner.resolve(*language_id),
  239|      0|            ),
  240|  50.9k|            Self::TypedLiteral { value_id, datatype } => LiteralRef::new_typed_literal(
  241|  50.9k|                interner.resolve(*value_id),
  242|  50.9k|                datatype.decode_from(interner),
  243|  50.9k|            ),
  244|       |        }
  245|  52.0k|    }
_RNvMs5_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_12InternedTerm12encoded_into:
  402|  6.69k|    pub fn encoded_into(term: TermRef<'_>, interner: &mut Interner) -> Self {
  403|  6.69k|        match term {
  404|    660|            TermRef::NamedNode(term) => {
  405|    660|                Self::NamedNode(InternedNamedNode::encoded_into(term, interner))
  406|       |            }
  407|  1.67k|            TermRef::BlankNode(term) => {
  408|  1.67k|                Self::BlankNode(InternedBlankNode::encoded_into(term, interner))
  409|       |            }
  410|  4.35k|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_into(term, interner)),
  411|       |            #[cfg(feature = "rdf-star")]
  412|      0|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  413|      0|                triple.as_ref(),
  414|      0|                interner,
  415|      0|            ))),
  416|       |        }
  417|  6.69k|    }
_RNvXsU_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedSubjectNtNtCsl2lhD68vXAd_4core3cmp3Ord3cmpB7_:
  267|  52.4k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsr_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedNamedNodeNtNtCsl2lhD68vXAd_4core3cmp10PartialOrd11partial_cmpB7_:
   86|  1.50k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsL_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedLiteralNtNtCsl2lhD68vXAd_4core3cmp10PartialOrd11partial_cmpB7_:
  174|    186|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsX_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedSubjectNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneB7_:
  267|  92.2k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsh_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_3KeyNtNtCsl2lhD68vXAd_4core3cmp10PartialOrd11partial_cmpB7_:
   69|  1.69k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedGraphName12encoded_from:
  355|  3.22k|    pub fn encoded_from(node: GraphNameRef<'_>, interner: &Interner) -> Option<Self> {
  356|  3.22k|        Some(match node {
  357|  3.19k|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  358|     30|            GraphNameRef::NamedNode(node) => {
  359|     30|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  360|       |            }
  361|      0|            GraphNameRef::BlankNode(node) => {
  362|      0|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  363|       |            }
  364|       |        })
  365|  3.22k|    }
_RNvXs1c_NtCsbrE1BkJ52QU_5oxrdf9interningNtB6_12InternedTermNtNtCsl2lhD68vXAd_4core3cmp3Ord3cmpB8_:
  392|  54.1k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsq_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedNamedNodeNtNtCsl2lhD68vXAd_4core3cmp3Ord3cmpB7_:
   86|  75.9k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXs1f_NtCsbrE1BkJ52QU_5oxrdf9interningNtB6_12InternedTermNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneB8_:
  392|  92.2k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMs3_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedSubject11decode_from:
  308|  3.22k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> SubjectRef<'a> {
  309|  3.22k|        match self {
  310|    211|            Self::NamedNode(node) => SubjectRef::NamedNode(node.decode_from(interner)),
  311|  3.01k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.decode_from(interner)),
  312|       |            #[cfg(feature = "rdf-star")]
  313|      0|            Self::Triple(triple) => SubjectRef::Triple(&interner.triples[triple.as_ref()]),
  314|       |        }
  315|  3.22k|    }
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedGraphName12encoded_into:
  343|  6.69k|    pub fn encoded_into(node: GraphNameRef<'_>, interner: &mut Interner) -> Self {
  344|  6.69k|        match node {
  345|  6.63k|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  346|     60|            GraphNameRef::NamedNode(node) => {
  347|     60|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  348|       |            }
  349|      0|            GraphNameRef::BlankNode(node) => {
  350|      0|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  351|       |            }
  352|       |        }
  353|  6.69k|    }
_RNvMs0_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedNamedNode11decode_from:
  104|   115k|    pub fn decode_from(self, interner: &Interner) -> NamedNodeRef<'_> {
  105|   115k|        NamedNodeRef::new_unchecked(interner.resolve(self.id))
  106|   115k|    }
_RNvXs8_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_14IdentityHasherNtNtCsl2lhD68vXAd_4core4hash6Hasher9write_u64:
  532|   195k|    fn write_u64(&mut self, i: u64) {
  533|   195k|        self.value = i
  534|   195k|    }
_RNvMs2_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedLiteral12encoded_from:
  209|  2.05k|    pub fn encoded_from(literal: LiteralRef<'_>, interner: &Interner) -> Option<Self> {
  210|  2.05k|        let value_id = interner.get(literal.value())?;
  211|  2.05k|        Some(if literal.is_plain() {
  212|    206|            if let Some(language) = literal.language() {
  213|       |                Self::LanguageTaggedString {
  214|      0|                    value_id,
  215|      0|                    language_id: interner.get(language)?,
  216|       |                }
  217|       |            } else {
  218|    206|                Self::String { value_id }
  219|       |            }
  220|       |        } else {
  221|       |            Self::TypedLiteral {
  222|  1.84k|                value_id,
  223|  1.84k|                datatype: InternedNamedNode::encoded_from(literal.datatype(), interner)?,
  224|       |            }
  225|       |        })
  226|  2.05k|    }
_RNvMs3_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedSubject12encoded_from:
  292|  3.22k|    pub fn encoded_from(node: SubjectRef<'_>, interner: &Interner) -> Option<Self> {
  293|  3.22k|        Some(match node {
  294|    211|            SubjectRef::NamedNode(node) => {
  295|    211|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  296|       |            }
  297|  3.01k|            SubjectRef::BlankNode(node) => {
  298|  3.01k|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  299|       |            }
  300|       |            #[cfg(feature = "rdf-star")]
  301|      0|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  302|      0|                triple.as_ref(),
  303|      0|                interner,
  304|      0|            )?)),
  305|       |        })
  306|  3.22k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf9interningNtB2_8Interner7resolve:
   64|   167k|    fn resolve(&self, key: Key) -> &str {
   65|   167k|        &self.string_for_hash[&key.0]
   66|   167k|    }
_RNvMs0_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedNamedNode12encoded_into:
   92|  12.0k|    pub fn encoded_into(named_node: NamedNodeRef<'_>, interner: &mut Interner) -> Self {
   93|  12.0k|        Self {
   94|  12.0k|            id: interner.get_or_intern(named_node.as_str()),
   95|  12.0k|        }
   96|  12.0k|    }
_RNvXsB_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedBlankNodeNtNtCsl2lhD68vXAd_4core3cmp10PartialOrd11partial_cmpB7_:
  123|  18.6k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMs0_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedNamedNode12encoded_from:
   98|  5.64k|    pub fn encoded_from(named_node: NamedNodeRef<'_>, interner: &Interner) -> Option<Self> {
   99|  5.64k|        Some(Self {
  100|  5.64k|            id: interner.get(named_node.as_str())?,
  101|       |        })
  102|  5.64k|    }
_RNvMs1_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedBlankNode12encoded_into:
  130|  27.7k|    pub fn encoded_into(blank_node: BlankNodeRef<'_>, interner: &mut Interner) -> Self {
  131|  27.7k|        if let Some(id) = blank_node.unique_id() {
  132|  27.6k|            interner
  133|  27.6k|                .string_for_blank_node_id
  134|  27.6k|                .entry(id)
  135|  27.6k|                .or_insert_with(|| blank_node.as_str().into());
  136|  27.6k|            Self::Number { id }
  137|       |        } else {
  138|     86|            Self::Other {
  139|     86|                id: interner.get_or_intern(blank_node.as_str()),
  140|     86|            }
  141|       |        }
  142|  27.7k|    }
_RNvMs2_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedLiteral12encoded_into:
  190|  4.35k|    pub fn encoded_into(literal: LiteralRef<'_>, interner: &mut Interner) -> Self {
  191|  4.35k|        let value_id = interner.get_or_intern(literal.value());
  192|  4.35k|        if literal.is_plain() {
  193|    412|            if let Some(language) = literal.language() {
  194|      0|                Self::LanguageTaggedString {
  195|      0|                    value_id,
  196|      0|                    language_id: interner.get_or_intern(language),
  197|      0|                }
  198|       |            } else {
  199|    412|                Self::String { value_id }
  200|       |            }
  201|       |        } else {
  202|  3.94k|            Self::TypedLiteral {
  203|  3.94k|                value_id,
  204|  3.94k|                datatype: InternedNamedNode::encoded_into(literal.datatype(), interner),
  205|  3.94k|            }
  206|       |        }
  207|  4.35k|    }
_RNvMs3_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedSubject12encoded_into:
  276|  6.69k|    pub fn encoded_into(node: SubjectRef<'_>, interner: &mut Interner) -> Self {
  277|  6.69k|        match node {
  278|    664|            SubjectRef::NamedNode(node) => {
  279|    664|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  280|       |            }
  281|  6.02k|            SubjectRef::BlankNode(node) => {
  282|  6.02k|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  283|       |            }
  284|       |            #[cfg(feature = "rdf-star")]
  285|      0|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  286|      0|                triple.as_ref(),
  287|      0|                interner,
  288|      0|            ))),
  289|       |        }
  290|  6.69k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf9interningNtB2_8Interner4hash:
   53|  24.1k|    fn hash(&self, value: &str) -> u64 {
   54|  24.1k|        let mut hasher = self.hasher.build_hasher();
   55|  24.1k|        hasher.write(value.as_bytes());
   56|  24.1k|        let hash = hasher.finish();
   57|  24.1k|        if hash == u64::MAX {
   58|      0|            0
   59|       |        } else {
   60|  24.1k|            hash
   61|       |        }
   62|  24.1k|    }
_RNvMs5_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_12InternedTerm11decode_from:
  436|  3.22k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> TermRef<'a> {
  437|  3.22k|        match self {
  438|    330|            Self::NamedNode(term) => TermRef::NamedNode(term.decode_from(interner)),
  439|    839|            Self::BlankNode(term) => TermRef::BlankNode(term.decode_from(interner)),
  440|  2.05k|            Self::Literal(term) => TermRef::Literal(term.decode_from(interner)),
  441|       |            #[cfg(feature = "rdf-star")]
  442|      0|            Self::Triple(triple) => TermRef::Triple(&interner.triples[triple.as_ref()]),
  443|       |        }
  444|  3.22k|    }
_RNvXsa_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_8InternerNtNtCsl2lhD68vXAd_4core7default7Default7defaultB7_:
    7|  2.82k|#[derive(Debug, Default, Clone)]
_RNvXsg_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_3KeyNtNtCsl2lhD68vXAd_4core3cmp3Ord3cmpB7_:
   69|   117k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXst_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedNamedNodeNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneB7_:
   86|  41.4k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXs8_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_14IdentityHasherNtNtCsl2lhD68vXAd_4core4hash6Hasher6finish:
  524|   195k|    fn finish(&self) -> u64 {
  525|   195k|        self.value
  526|   195k|    }
_RNvXsf_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_3KeyNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqB7_:
   69|  1.81k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsK_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedLiteralNtNtCsl2lhD68vXAd_4core3cmp3Ord3cmpB7_:
  174|  41.3k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsN_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedLiteralNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneB7_:
  174|  62.3k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsV_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedSubjectNtNtCsl2lhD68vXAd_4core3cmp10PartialOrd11partial_cmpB7_:
  267|  19.5k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsA_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedBlankNodeNtNtCsl2lhD68vXAd_4core3cmp3Ord3cmpB7_:
  123|  47.1k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsD_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedBlankNodeNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneB7_:
  123|   108k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXs1q_NtCsbrE1BkJ52QU_5oxrdf9interningNtB6_21IdentityHasherBuilderNtNtCsl2lhD68vXAd_4core7default7Default7defaultB8_:
  507|  2.82k|#[derive(Default, Clone)]
_RNvXs1s_NtCsbrE1BkJ52QU_5oxrdf9interningNtB6_14IdentityHasherNtNtCsl2lhD68vXAd_4core7default7Default7defaultB8_:
  518|   195k|#[derive(Default)]
_RNvXs1d_NtCsbrE1BkJ52QU_5oxrdf9interningNtB6_12InternedTermNtNtCsl2lhD68vXAd_4core3cmp10PartialOrd11partial_cmpB8_:
  392|    188|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs13_NtCsbrE1BkJ52QU_5oxrdf9interningNtB6_17InternedGraphNameNtNtCsl2lhD68vXAd_4core3cmp3Ord3cmpB8_:
  335|  50.0k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs16_NtCsbrE1BkJ52QU_5oxrdf9interningNtB6_17InternedGraphNameNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneB8_:
  335|  92.2k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]

_RNvMNtCsbrE1BkJ52QU_5oxrdf7literalNtB2_7Literal6as_refCs9jqYw0Nmepu_4trig:
  132|  25.5k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  133|  25.5k|        LiteralRef(match &self.0 {
  134|  11.8k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  135|    346|            LiteralContent::LanguageTaggedString { value, language } => {
  136|    346|                LiteralRefContent::LanguageTaggedString { value, language }
  137|       |            }
  138|  13.3k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  139|  13.3k|                value,
  140|  13.3k|                datatype: datatype.as_ref(),
  141|  13.3k|            },
  142|       |        })
  143|  25.5k|    }
_RNvXsI_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_14LiteralContentNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs9jqYw0Nmepu_4trig:
   40|  21.2k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsD_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_7LiteralNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs9jqYw0Nmepu_4trig:
   37|  21.2k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsu_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_10LiteralRefNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCs4WjTcpTVJQo_5oxttl:
  568|  11.7k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  569|  11.7k|        match self.0 {
  570|  11.3k|            LiteralRefContent::String(value) => print_quoted_str(value, f),
  571|    346|            LiteralRefContent::LanguageTaggedString { value, language } => {
  572|    346|                print_quoted_str(value, f)?;
  573|    346|                write!(f, "@{language}")
  574|       |            }
  575|      0|            LiteralRefContent::TypedLiteral { value, datatype } => {
  576|      0|                print_quoted_str(value, f)?;
  577|      0|                write!(f, "^^{datatype}")
  578|       |            }
  579|       |        }
  580|  11.7k|    }
_RNvMst_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_10LiteralRef8datatypeCs4WjTcpTVJQo_5oxttl:
  516|  21.1k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  517|  21.1k|        match self.0 {
  518|  11.3k|            LiteralRefContent::String(_) => xsd::STRING,
  519|    346|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  520|  9.43k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  521|       |        }
  522|  21.1k|    }
_RNvXsF_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_7LiteralNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneCs4WjTcpTVJQo_5oxttl:
   37|  63.5k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMst_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_10LiteralRef5valueCs4WjTcpTVJQo_5oxttl:
  491|  21.1k|    pub const fn value(self) -> &'a str {
  492|  21.1k|        match self.0 {
  493|  11.3k|            LiteralRefContent::String(value)
  494|    346|            | LiteralRefContent::LanguageTaggedString { value, .. }
  495|  21.1k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  496|  21.1k|        }
  497|  21.1k|    }
_RNvXsM_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_14LiteralContentNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneCs4WjTcpTVJQo_5oxttl:
   40|  63.5k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RINvMNtCsbrE1BkJ52QU_5oxrdf7literalNtB3_7Literal18new_simple_literalRNtNtCsdBW21Yiwikk_5alloc6string6StringECs4WjTcpTVJQo_5oxttl:
   50|    294|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   51|    294|        Self(LiteralContent::String(value.into()))
   52|    294|    }
_RINvXs13_NtCsbrE1BkJ52QU_5oxrdf7literalNtB7_17LiteralRefContentNtNtCsl2lhD68vXAd_4core4hash4Hash4hashNtNtNtCs7HEjVFsiW5Z_3std4hash6random13DefaultHasherEB9_:
  446|  49.9k|#[derive(PartialEq, Eq, Debug, Clone, Copy, Hash)]
_RINvMNtCsbrE1BkJ52QU_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   56|  28.3k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   57|  28.3k|        let value = value.into();
   58|  28.3k|        let datatype = datatype.into();
   59|  28.3k|        Self(if datatype == xsd::STRING {
   60|      0|            LiteralContent::String(value)
   61|       |        } else {
   62|  28.3k|            LiteralContent::TypedLiteral { value, datatype }
   63|       |        })
   64|  28.3k|    }
_RINvMst_NtCsbrE1BkJ52QU_5oxrdf7literalNtB6_10LiteralRef17new_typed_literalNtNtB8_10named_node12NamedNodeRefEB8_:
  468|  50.9k|    pub fn new_typed_literal(value: &'a str, datatype: impl Into<NamedNodeRef<'a>>) -> Self {
  469|  50.9k|        let datatype = datatype.into();
  470|  50.9k|        LiteralRef(if datatype == xsd::STRING {
  471|      0|            LiteralRefContent::String(value)
  472|       |        } else {
  473|  50.9k|            LiteralRefContent::TypedLiteral { value, datatype }
  474|       |        })
  475|  50.9k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCsdBW21Yiwikk_5alloc6string6StringB1n_EB5_:
   88|  1.03k|    pub fn new_language_tagged_literal_unchecked(
   89|  1.03k|        value: impl Into<String>,
   90|  1.03k|        language: impl Into<String>,
   91|  1.03k|    ) -> Self {
   92|  1.03k|        Self(LiteralContent::LanguageTaggedString {
   93|  1.03k|            value: value.into(),
   94|  1.03k|            language: language.into(),
   95|  1.03k|        })
   96|  1.03k|    }
_RINvNtCsbrE1BkJ52QU_5oxrdf7literal16print_quoted_strNtNtCsl2lhD68vXAd_4core3fmt9FormatterEB4_:
  619|  11.7k|pub fn print_quoted_str(string: &str, f: &mut impl Write) -> fmt::Result {
  620|  11.7k|    f.write_char('"')?;
  621|  71.4k|    for c in string.chars() {
  622|  71.4k|        match c {
  623|  1.35k|            '\u{08}' => f.write_str("\\b"),
  624|    305|            '\t' => f.write_str("\\t"),
  625|    716|            '\n' => f.write_str("\\n"),
  626|    300|            '\u{0c}' => f.write_str("\\f"),
  627|    220|            '\r' => f.write_str("\\r"),
  628|  2.05k|            '"' => f.write_str("\\\""),
  629|    355|            '\\' => f.write_str("\\\\"),
  630|  66.1k|            '\0'..='\u{1f}' | '\u{7f}' => write!(f, "\\u{:04X}", u32::from(c)),
  631|  20.5k|            _ => f.write_char(c),
  632|      0|        }?;
  633|       |    }
  634|  11.7k|    f.write_char('"')
  635|  11.7k|}
_RINvXsV_NtCsbrE1BkJ52QU_5oxrdf7literalNtB6_10LiteralRefNtNtCsl2lhD68vXAd_4core4hash4Hash4hashNtNtNtCs7HEjVFsiW5Z_3std4hash6random13DefaultHasherEB8_:
  443|  49.9k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RINvMNtCsbrE1BkJ52QU_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCsdBW21Yiwikk_5alloc6string6StringEB5_:
   50|  33.9k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   51|  33.9k|        Self(LiteralContent::String(value.into()))
   52|  33.9k|    }
_RNvMst_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_10LiteralRef18new_simple_literalB7_:
  462|  1.03k|    pub const fn new_simple_literal(value: &'a str) -> Self {
  463|  1.03k|        LiteralRef(LiteralRefContent::String(value))
  464|  1.03k|    }
_RNvMst_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_10LiteralRef8is_plainB7_:
  529|  6.40k|    pub const fn is_plain(self) -> bool {
  530|  5.78k|        matches!(
  531|  6.40k|            self.0,
  532|       |            LiteralRefContent::String(_) | LiteralRefContent::LanguageTaggedString { .. }
  533|       |        )
  534|  6.40k|    }
_RNvMst_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_10LiteralRef5valueB7_:
  491|  6.40k|    pub const fn value(self) -> &'a str {
  492|  6.40k|        match self.0 {
  493|    618|            LiteralRefContent::String(value)
  494|      0|            | LiteralRefContent::LanguageTaggedString { value, .. }
  495|  6.40k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  496|  6.40k|        }
  497|  6.40k|    }
_RNvMst_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_10LiteralRef8languageB7_:
  504|    618|    pub const fn language(self) -> Option<&'a str> {
  505|    618|        match self.0 {
  506|      0|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  507|    618|            _ => None,
  508|       |        }
  509|    618|    }
_RNvMst_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_10LiteralRef8datatypeB7_:
  516|  5.78k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  517|  5.78k|        match self.0 {
  518|      0|            LiteralRefContent::String(_) => xsd::STRING,
  519|      0|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  520|  5.78k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  521|       |        }
  522|  5.78k|    }

_RNvMNtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB2_9NamedNode6as_strCs9jqYw0Nmepu_4trig:
   44|  12.8k|    pub fn as_str(&self) -> &str {
   45|  12.8k|        self.iri.as_str()
   46|  12.8k|    }
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCs9jqYw0Nmepu_4trig:
  138|   120k|    pub fn into_owned(self) -> NamedNode {
  139|   120k|        NamedNode::new_unchecked(self.iri)
  140|   120k|    }
_RNvXs5_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCs9jqYw0Nmepu_4trig:
  145|   120k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|   120k|        write!(f, "<{}>", self.as_str())
  147|   120k|    }
_RNvXsu_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs9jqYw0Nmepu_4trig:
  106|  7.14k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMNtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB2_9NamedNode6as_refCs9jqYw0Nmepu_4trig:
   54|   167k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|   167k|        NamedNodeRef::new_unchecked(&self.iri)
   56|   167k|    }
_RNvXsl_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs9jqYw0Nmepu_4trig:
   17|   141k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs8_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRefINtNtCsl2lhD68vXAd_4core3cmp9PartialEqNtB5_9NamedNodeE2eqCs9jqYw0Nmepu_4trig:
  166|  12.8k|    fn eq(&self, other: &NamedNode) -> bool {
  167|  12.8k|        self.as_str() == other.as_str()
  168|  12.8k|    }
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCs9jqYw0Nmepu_4trig:
  128|   167k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   167k|        Self { iri }
  130|   167k|    }
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCs9jqYw0Nmepu_4trig:
  133|   133k|    pub const fn as_str(self) -> &'a str {
  134|   133k|        self.iri
  135|   133k|    }
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCs4WjTcpTVJQo_5oxttl:
  133|  3.75k|    pub const fn as_str(self) -> &'a str {
  134|  3.75k|        self.iri
  135|  3.75k|    }
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCs4WjTcpTVJQo_5oxttl:
  138|  6.40k|    pub fn into_owned(self) -> NamedNode {
  139|  6.40k|        NamedNode::new_unchecked(self.iri)
  140|  6.40k|    }
_RNvXsp_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneCs4WjTcpTVJQo_5oxttl:
   17|   380k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsg_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCsl2lhD68vXAd_4core7convert4FromINtCs72NQLJxIjgJ_5oxiri3IriNtNtCsdBW21Yiwikk_5alloc6string6StringEE4fromCs4WjTcpTVJQo_5oxttl:
  222|   128k|    fn from(iri: Iri<String>) -> Self {
  223|   128k|        Self {
  224|   128k|            iri: iri.into_inner(),
  225|   128k|        }
  226|   128k|    }
_RNvXs5_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCs4WjTcpTVJQo_5oxttl:
  145|  3.75k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|  3.75k|        write!(f, "<{}>", self.as_str())
  147|  3.75k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|   375k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   375k|        Self { iri: iri.into() }
   41|   375k|    }
_RINvXsA_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB6_12NamedNodeRefNtNtCsl2lhD68vXAd_4core4hash4Hash4hashNtNtNtCs7HEjVFsiW5Z_3std4hash6random13DefaultHasherEB8_:
  106|   110k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXs9_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCsl2lhD68vXAd_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|  28.3k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|  28.3k|        self.as_str() == other.as_str()
  175|  28.3k|    }
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedB7_:
  128|   115k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   115k|        Self { iri }
  130|   115k|    }
_RNvXs6_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCsl2lhD68vXAd_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|   248k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|   248k|        node.into_owned()
  154|   248k|    }
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|  45.9k|    pub const fn as_str(self) -> &'a str {
  134|  45.9k|        self.iri
  135|  45.9k|    }
_RNvXsu_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqB7_:
  106|  50.9k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMNtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|  28.3k|    pub fn as_str(&self) -> &str {
   45|  28.3k|        self.iri.as_str()
   46|  28.3k|    }
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|   248k|    pub fn into_owned(self) -> NamedNode {
  139|   248k|        NamedNode::new_unchecked(self.iri)
  140|   248k|    }

_RNvMs1g_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_12GraphNameRef16is_default_graphCs9jqYw0Nmepu_4trig:
  964|   132k|    pub fn is_default_graph(&self) -> bool {
  965|   132k|        matches!(self, Self::DefaultGraph)
  966|   132k|    }
_RNvMs1g_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_12GraphNameRef10into_ownedCs9jqYw0Nmepu_4trig:
  969|    113|    pub fn into_owned(self) -> GraphName {
  970|    113|        match self {
  971|     98|            Self::NamedNode(node) => GraphName::NamedNode(node.into_owned()),
  972|      0|            Self::BlankNode(node) => GraphName::BlankNode(node.into_owned()),
  973|     15|            Self::DefaultGraph => GraphName::DefaultGraph,
  974|       |        }
  975|    113|    }
_RNvXs25_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_4TermNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs9jqYw0Nmepu_4trig:
  385|   120k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1w_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_7QuadRefINtNtCsl2lhD68vXAd_4core7convert4FromRNtB6_4QuadE4fromCs9jqYw0Nmepu_4trig:
 1214|   127k|    fn from(quad: &'a Quad) -> Self {
 1215|   127k|        quad.as_ref()
 1216|   127k|    }
_RNvXs2z_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_9GraphNameNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs9jqYw0Nmepu_4trig:
  856|   120k|#[derive(Eq, PartialEq, Debug, Clone, Hash, Default)]
_RNvMsc_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7Subject6as_refCs9jqYw0Nmepu_4trig:
  181|   245k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|   245k|        match self {
  183|  1.58k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|   243k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|      0|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|   245k|    }
_RNvXs1h_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_12GraphNameRefNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCs9jqYw0Nmepu_4trig:
  980|     98|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  981|     98|        match self {
  982|     98|            Self::NamedNode(node) => node.fmt(f),
  983|      0|            Self::BlankNode(node) => node.fmt(f),
  984|      0|            Self::DefaultGraph => write!(f, "DEFAULT"),
  985|       |        }
  986|     98|    }
_RNvMsy_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_4Term6as_refCs9jqYw0Nmepu_4trig:
  417|   127k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|   127k|        match self {
  419|  4.12k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|  97.8k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  25.5k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|      0|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|   127k|    }
_RNvXs2Q_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_4QuadNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs9jqYw0Nmepu_4trig:
 1065|   120k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMs18_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_9GraphName6as_refCs9jqYw0Nmepu_4trig:
  881|   380k|    pub fn as_ref(&self) -> GraphNameRef<'_> {
  882|   380k|        match self {
  883|  20.8k|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.as_ref()),
  884|      0|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.as_ref()),
  885|   360k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  886|       |        }
  887|   380k|    }
_RNvXs2H_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_12GraphNameRefNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs9jqYw0Nmepu_4trig:
  944|   120k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash, Default)]
_RNvXs1Q_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_7SubjectNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs9jqYw0Nmepu_4trig:
  155|   120k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMsn_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_10SubjectRef10into_ownedCs9jqYw0Nmepu_4trig:
  294|   107k|    pub fn into_owned(self) -> Subject {
  295|   107k|        match self {
  296|    290|            Self::NamedNode(node) => Subject::NamedNode(node.into_owned()),
  297|   107k|            Self::BlankNode(node) => Subject::BlankNode(node.into_owned()),
  298|       |            #[cfg(feature = "rdf-star")]
  299|      0|            Self::Triple(triple) => Subject::Triple(Box::new(triple.clone())),
  300|       |        }
  301|   107k|    }
_RNvMs18_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_9GraphName16is_default_graphCs9jqYw0Nmepu_4trig:
  876|   132k|    pub fn is_default_graph(&self) -> bool {
  877|   132k|        self.as_ref().is_default_graph()
  878|   132k|    }
_RNvXs1X_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_10SubjectRefNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs9jqYw0Nmepu_4trig:
  268|   117k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RNvMs1q_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_4Quad6as_refCs9jqYw0Nmepu_4trig:
 1098|   127k|    pub fn as_ref(&self) -> QuadRef<'_> {
 1099|   127k|        QuadRef {
 1100|   127k|            subject: self.subject.as_ref(),
 1101|   127k|            predicate: self.predicate.as_ref(),
 1102|   127k|            object: self.object.as_ref(),
 1103|   127k|            graph_name: self.graph_name.as_ref(),
 1104|   127k|        }
 1105|   127k|    }
_RINvMs1q_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node12NamedNodeRefB11_NtB7_9GraphNameECs4WjTcpTVJQo_5oxttl:
 1083|  5.54k|    pub fn new(
 1084|  5.54k|        subject: impl Into<Subject>,
 1085|  5.54k|        predicate: impl Into<NamedNode>,
 1086|  5.54k|        object: impl Into<Term>,
 1087|  5.54k|        graph_name: impl Into<GraphName>,
 1088|  5.54k|    ) -> Self {
 1089|  5.54k|        Self {
 1090|  5.54k|            subject: subject.into(),
 1091|  5.54k|            predicate: predicate.into(),
 1092|  5.54k|            object: object.into(),
 1093|  5.54k|            graph_name: graph_name.into(),
 1094|  5.54k|        }
 1095|  5.54k|    }
_RINvMs1q_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node12NamedNodeRefNtNtB9_10blank_node9BlankNodeNtB7_9GraphNameECs4WjTcpTVJQo_5oxttl:
 1083|  31.4k|    pub fn new(
 1084|  31.4k|        subject: impl Into<Subject>,
 1085|  31.4k|        predicate: impl Into<NamedNode>,
 1086|  31.4k|        object: impl Into<Term>,
 1087|  31.4k|        graph_name: impl Into<GraphName>,
 1088|  31.4k|    ) -> Self {
 1089|  31.4k|        Self {
 1090|  31.4k|            subject: subject.into(),
 1091|  31.4k|            predicate: predicate.into(),
 1092|  31.4k|            object: object.into(),
 1093|  31.4k|            graph_name: graph_name.into(),
 1094|  31.4k|        }
 1095|  31.4k|    }
_RINvMs1q_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtB7_4TermNtB7_9GraphNameECs4WjTcpTVJQo_5oxttl:
 1083|   325k|    pub fn new(
 1084|   325k|        subject: impl Into<Subject>,
 1085|   325k|        predicate: impl Into<NamedNode>,
 1086|   325k|        object: impl Into<Term>,
 1087|   325k|        graph_name: impl Into<GraphName>,
 1088|   325k|    ) -> Self {
 1089|   325k|        Self {
 1090|   325k|            subject: subject.into(),
 1091|   325k|            predicate: predicate.into(),
 1092|   325k|            object: object.into(),
 1093|   325k|            graph_name: graph_name.into(),
 1094|   325k|        }
 1095|   325k|    }
_RNvXs1c_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_9GraphNameINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB8_10blank_node9BlankNodeE4fromCs4WjTcpTVJQo_5oxttl:
  913|     54|    fn from(node: BlankNode) -> Self {
  914|     54|        Self::BlankNode(node)
  915|     54|    }
_RNvXs1a_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_9GraphNameINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB8_10named_node9NamedNodeE4fromCs4WjTcpTVJQo_5oxttl:
  899|    450|    fn from(node: NamedNode) -> Self {
  900|    450|        Self::NamedNode(node)
  901|    450|    }
_RNvXs1e_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_9GraphNameINtNtCsl2lhD68vXAd_4core7convert4FromNtB6_16NamedOrBlankNodeE4fromCs4WjTcpTVJQo_5oxttl:
  927|    504|    fn from(node: NamedOrBlankNode) -> Self {
  928|    504|        match node {
  929|    450|            NamedOrBlankNode::NamedNode(node) => node.into(),
  930|     54|            NamedOrBlankNode::BlankNode(node) => node.into(),
  931|       |        }
  932|    504|    }
_RNvXs1S_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_7SubjectNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneCs4WjTcpTVJQo_5oxttl:
  155|   325k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsY_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7TermRefINtNtCsl2lhD68vXAd_4core7convert4FromNtB5_10SubjectRefE4fromCs4WjTcpTVJQo_5oxttl:
  666|   107k|    fn from(node: SubjectRef<'a>) -> Self {
  667|   107k|        match node {
  668|    290|            SubjectRef::NamedNode(node) => node.into(),
  669|   107k|            SubjectRef::BlankNode(node) => node.into(),
  670|       |            #[cfg(feature = "rdf-star")]
  671|      0|            SubjectRef::Triple(triple) => triple.into(),
  672|       |        }
  673|   107k|    }
_RNvXsP_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7TermRefINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCs4WjTcpTVJQo_5oxttl:
  599|    290|    fn from(node: NamedNodeRef<'a>) -> Self {
  600|    290|        Self::NamedNode(node)
  601|    290|    }
_RNvXsR_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7TermRefINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10blank_node12BlankNodeRefE4fromCs4WjTcpTVJQo_5oxttl:
  613|   107k|    fn from(node: BlankNodeRef<'a>) -> Self {
  614|   107k|        Self::BlankNode(node)
  615|   107k|    }
_RNvXsl_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7SubjectINtNtCsl2lhD68vXAd_4core7convert4FromNtB5_16NamedOrBlankNodeE4fromCs4WjTcpTVJQo_5oxttl:
  252|   102k|    fn from(node: NamedOrBlankNode) -> Self {
  253|   102k|        match node {
  254|  1.61k|            NamedOrBlankNode::NamedNode(node) => node.into(),
  255|   101k|            NamedOrBlankNode::BlankNode(node) => node.into(),
  256|       |        }
  257|   102k|    }
_RNvXs27_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_4TermNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneCs4WjTcpTVJQo_5oxttl:
  385|   325k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs0_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_16NamedOrBlankNodeINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromCs4WjTcpTVJQo_5oxttl:
   43|  2.30k|    fn from(node: NamedNode) -> Self {
   44|  2.30k|        Self::NamedNode(node)
   45|  2.30k|    }
_RNvXs2B_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_9GraphNameNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneCs4WjTcpTVJQo_5oxttl:
  856|   362k|#[derive(Eq, PartialEq, Debug, Clone, Hash, Default)]
_RNvXsf_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7SubjectINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCs4WjTcpTVJQo_5oxttl:
  207|     54|    fn from(node: NamedNodeRef<'_>) -> Self {
  208|     54|        node.into_owned().into()
  209|     54|    }
_RNvXsB_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_4TermINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCs4WjTcpTVJQo_5oxttl:
  444|  6.35k|    fn from(node: NamedNodeRef<'_>) -> Self {
  445|  6.35k|        node.into_owned().into()
  446|  6.35k|    }
_RNvXs2_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_16NamedOrBlankNodeINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromCs4WjTcpTVJQo_5oxttl:
   57|   101k|    fn from(node: BlankNode) -> Self {
   58|   101k|        Self::BlankNode(node)
   59|   101k|    }
_RNvXse_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7SubjectINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|  1.71k|    fn from(node: NamedNode) -> Self {
  201|  1.71k|        Self::NamedNode(node)
  202|  1.71k|    }
_RNvXsg_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7SubjectINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|   353k|    fn from(node: BlankNode) -> Self {
  215|   353k|        Self::BlankNode(node)
  216|   353k|    }
_RNvXsC_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_4TermINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  451|   288k|    fn from(node: BlankNode) -> Self {
  452|   288k|        Self::BlankNode(node)
  453|   288k|    }
_RNvXsA_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_4TermINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|  10.3k|    fn from(node: NamedNode) -> Self {
  438|  10.3k|        Self::NamedNode(node)
  439|  10.3k|    }
_RNvXsE_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_4TermINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  465|  63.5k|    fn from(literal: Literal) -> Self {
  466|  63.5k|        Self::Literal(literal)
  467|  63.5k|    }

_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer9parse_iri0B8_:
  212|    620|        let iri = String::from_utf8(iri).map_err(|e| {
  213|    620|            (
  214|    620|                position.clone(),
  215|    620|                format!("The IRI contains invalid UTF-8 characters: {e}"),
  216|    620|            )
  217|    620|        })?;
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer14parse_lang_tag0B8_:
  551|  6.71k|                .map_err(|e| (position.clone(), e.to_string()))?
_RNCNvNtCs4WjTcpTVJQo_5oxttl5lexer13str_from_utf80B5_:
  928|  8.06k|    str::from_utf8(data).map_err(|e| {
  929|  8.06k|        (
  930|  8.06k|            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  931|  8.06k|            format!("Invalid UTF-8: {e}"),
  932|  8.06k|        )
  933|  8.06k|            .into()
  934|  8.06k|    })
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer18recognize_variable0B8_:
  325|  26.5k|            result.and_then(|(name, _)| {
  326|  26.5k|                if name.is_empty() {
  327|  21.1k|                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  328|       |                } else {
  329|  5.40k|                    Ok(N3Token::Variable(name))
  330|       |                }
  331|  26.5k|            }),
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer9parse_iris_0B8_:
  223|  12.5k|        .map_err(|e| (position, e.to_string()))?;
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer22recognize_unicode_char0B8_:
  856|  11.7k|                .map(|c| (c, bytes_needed + 1))
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer26recognize_pname_or_keyword0B8_:
  309|  13.6k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  310|  13.6k|                prefix: pn_prefix,
  311|  13.6k|                local,
  312|  13.6k|                might_be_invalid_iri,
  313|  13.6k|            }),
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_char0B8_:
  776|  2.51k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  777|  2.51k|            (
  778|  2.51k|                position..position + len + 2,
  779|  2.51k|                format!(
  780|  2.51k|                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  781|  2.51k|                ),
  782|  2.51k|            )
  783|  2.51k|        })?;
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer16recognize_string:
  556|   142k|    fn recognize_string(
  557|   142k|        data: &[u8],
  558|   142k|        delimiter: u8,
  559|   142k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  560|   142k|        // [22] 	STRING_LITERAL_QUOTE 	::= 	'"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
  561|   142k|        // [23] 	STRING_LITERAL_SINGLE_QUOTE 	::= 	"'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
  562|   142k|        let mut string = String::new();
  563|   142k|        let mut i = 1;
  564|       |        loop {
  565|   565k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  566|   514k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  567|   511k|                Ok(s) => string.push_str(s),
  568|  3.20k|                Err(e) => return Some((end, Err(e))),
  569|       |            };
  570|   511k|            i += end;
  571|   511k|            match data[i] {
  572|   511k|                c if c == delimiter => {
  573|  33.6k|                    return Some((i + 1, Ok(N3Token::String(string))));
  574|       |                }
  575|       |                b'\\' => {
  576|   477k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  577|   464k|                    i += additional + 1;
  578|   464k|                    match c {
  579|   423k|                        Ok(c) => {
  580|   423k|                            string.push(c);
  581|   423k|                        }
  582|  40.8k|                        Err(e) => {
  583|       |                            // We read until the end of string char
  584|  40.8k|                            let end = memchr(delimiter, &data[i..])?;
  585|  1.54k|                            return Some((i + end + 1, Err(e)));
  586|       |                        }
  587|       |                    }
  588|       |                }
  589|      0|                _ => unreachable!(),
  590|       |            }
  591|       |        }
  592|   142k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer20is_possible_pn_chars:
  892|  11.0M|    fn is_possible_pn_chars(c: char) -> bool {
  893|  11.0M|        Self::is_possible_pn_chars_u(c)
  894|  5.30M|            || matches!(c,
  895|  4.76M|        '-' | '0'..='9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
  896|  11.0M|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer26recognize_blank_node_label:
  477|   222k|    fn recognize_blank_node_label(
  478|   222k|        data: &[u8],
  479|   222k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  480|   222k|        // [141s] 	BLANK_NODE_LABEL 	::= 	'_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
  481|   222k|        let mut i = 2;
  482|       |        loop {
  483|  6.76M|            match Self::recognize_unicode_char(&data[i..], i)? {
  484|  6.75M|                Ok((c, consumed)) => {
  485|  6.75M|                    if (i == 2 && (Self::is_possible_pn_chars_u(c) || c.is_ascii_digit()))
  486|  6.53M|                        || (i > 2 && Self::is_possible_pn_chars(c))
  487|  6.54M|                    {
  488|  6.54M|                        // Ok
  489|  6.54M|                    } else if i > 2 && c == '.' {
  490|  1.73k|                        if data[i - 1] == b'.' {
  491|     74|                            i -= 1;
  492|     74|                            return Some((
  493|     74|                                i,
  494|     74|                                str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  495|     74|                            ));
  496|  1.66k|                        }
  497|   205k|                    } else if i == 0 {
  498|      0|                        return Some((
  499|      0|                            i,
  500|      0|                            Err((0..i, "A blank node ID should not be empty").into()),
  501|      0|                        ));
  502|   205k|                    } else if data[i - 1] == b'.' {
  503|    424|                        i -= 1;
  504|    424|                        return Some((
  505|    424|                            i,
  506|    424|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  507|    424|                        ));
  508|       |                    } else {
  509|   204k|                        return Some((
  510|   204k|                            i,
  511|   204k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  512|   204k|                        ));
  513|       |                    }
  514|  6.54M|                    i += consumed;
  515|       |                }
  516|    178|                Err(e) => return Some((e.location.end, Err(e))),
  517|       |            }
  518|       |        }
  519|   222k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer16recognize_number:
  632|   215k|    fn recognize_number(data: &[u8]) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  633|   215k|        // [19] 	INTEGER 	::= 	[+-]? [0-9]+
  634|   215k|        // [20] 	DECIMAL 	::= 	[+-]? [0-9]* '.' [0-9]+
  635|   215k|        // [21] 	DOUBLE 	::= 	[+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  636|   215k|        // [154s] 	EXPONENT 	::= 	[eE] [+-]? [0-9]+
  637|   215k|        let mut i = 0;
  638|   215k|        let c = *data.first()?;
  639|   215k|        if matches!(c, b'+' | b'-') {
  640|  58.2k|            i += 1;
  641|   157k|        }
  642|       |        // We read the digits before .
  643|   215k|        let mut count_before: usize = 0;
  644|       |        loop {
  645|   849k|            let c = *data.get(i)?;
  646|   766k|            if c.is_ascii_digit() {
  647|   634k|                i += 1;
  648|   634k|                count_before += 1;
  649|   634k|            } else {
  650|   132k|                break;
  651|       |            }
  652|       |        }
  653|       |
  654|       |        // We read the digits after .
  655|       |        #[allow(clippy::if_then_some_else_none)]
  656|   132k|        let count_after = if *data.get(i)? == b'.' {
  657|  26.3k|            i += 1;
  658|  26.3k|
  659|  26.3k|            let mut count_after = 0;
  660|       |            loop {
  661|   154k|                let c = *data.get(i)?;
  662|   142k|                if c.is_ascii_digit() {
  663|   128k|                    i += 1;
  664|   128k|                    count_after += 1;
  665|   128k|                } else {
  666|  13.5k|                    break;
  667|  13.5k|                }
  668|  13.5k|            }
  669|  13.5k|            Some(count_after)
  670|       |        } else {
  671|   106k|            None
  672|       |        };
  673|       |
  674|       |        // End
  675|   119k|        let c = *data.get(i)?;
  676|   119k|        if matches!(c, b'e' | b'E') {
  677|  24.2k|            i += 1;
  678|       |
  679|  24.2k|            let c = *data.get(i)?;
  680|  22.9k|            if matches!(c, b'+' | b'-') {
  681|  2.36k|                i += 1;
  682|  20.6k|            }
  683|       |
  684|  22.9k|            let mut found = false;
  685|       |            loop {
  686|  99.5k|                let c = *data.get(i)?;
  687|  84.1k|                if c.is_ascii_digit() {
  688|  76.5k|                    i += 1;
  689|  76.5k|                    found = true;
  690|  76.5k|                } else {
  691|  7.62k|                    break;
  692|  7.62k|                }
  693|  7.62k|            }
  694|  7.62k|            Some((
  695|  7.62k|                i,
  696|  7.62k|                if !found {
  697|    766|                    Err((0..i, "A double exponent cannot be empty").into())
  698|  6.85k|                } else if count_before == 0 && count_after.unwrap_or(0) == 0 {
  699|    120|                    Err((0..i, "A double should not be empty").into())
  700|       |                } else {
  701|  6.73k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Double)
  702|       |                },
  703|       |            ))
  704|  95.6k|        } else if let Some(count_after) = count_after {
  705|  9.53k|            if count_after == 0 {
  706|       |                // We do not consume the '.' after all
  707|  3.43k|                i -= 1;
  708|  3.43k|                Some((
  709|  3.43k|                    i,
  710|  3.43k|                    if count_before == 0 {
  711|  2.05k|                        Err((0..i, "An integer should not be empty").into())
  712|       |                    } else {
  713|  1.37k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  714|       |                    },
  715|       |                ))
  716|       |            } else {
  717|  6.10k|                Some((i, str_from_utf8(&data[..i], 0..i).map(N3Token::Decimal)))
  718|       |            }
  719|       |        } else {
  720|       |            Some((
  721|  86.0k|                i,
  722|  86.0k|                if count_before == 0 {
  723|  31.5k|                    Err((0..i, "An integer should not be empty").into())
  724|       |                } else {
  725|  54.5k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  726|       |                },
  727|       |            ))
  728|       |        }
  729|   215k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer13recognize_iri:
  176|   235k|    fn recognize_iri(
  177|   235k|        data: &[u8],
  178|   235k|        options: &N3LexerOptions,
  179|   235k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  180|   235k|        // [18] 	IRIREF 	::= 	'<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
  181|   235k|        let mut string = Vec::new();
  182|   235k|        let mut i = 1;
  183|       |        loop {
  184|   235k|            let end = memchr2(b'>', b'\\', &data[i..])?;
  185|   156k|            string.extend_from_slice(&data[i..i + end]);
  186|   156k|            i += end;
  187|   156k|            match data[i] {
  188|       |                b'>' => {
  189|   148k|                    return Some((i + 1, Self::parse_iri(string, 0..=i, options)));
  190|       |                }
  191|       |                b'\\' => {
  192|  8.09k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, false)?;
  193|  1.21k|                    i += additional + 1;
  194|  1.21k|                    match c {
  195|      0|                        Ok(c) => {
  196|      0|                            let mut buf = [0; 4];
  197|      0|                            string.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  198|      0|                        }
  199|  1.21k|                        Err(e) => return Some((i, Err(e))),
  200|       |                    }
  201|       |                }
  202|      0|                _ => unreachable!(),
  203|       |            }
  204|       |        }
  205|   235k|    }
_RNvNtCs4WjTcpTVJQo_5oxttl5lexer18resolve_local_name:
  905|  2.20k|pub fn resolve_local_name(
  906|  2.20k|    prefix: &str,
  907|  2.20k|    local: &str,
  908|  2.20k|    might_be_invalid_iri: bool,
  909|  2.20k|    prefixes: &HashMap<String, Iri<String>>,
  910|  2.20k|) -> Result<NamedNode, String> {
  911|  2.20k|    if let Some(start) = prefixes.get(prefix) {
  912|      0|        let iri = format!("{start}{local}");
  913|      0|        if might_be_invalid_iri || start.path().is_empty() {
  914|       |            // We validate again. We always validate if the local part might be the IRI authority.
  915|      0|            if let Err(e) = Iri::parse(iri.as_str()) {
  916|      0|                return Err(format!(
  917|      0|                    "The prefixed name {prefix}:{local} builds IRI {iri} that is invalid: {e}"
  918|      0|                ));
  919|      0|            }
  920|      0|        }
  921|      0|        Ok(NamedNode::new_unchecked(iri))
  922|       |    } else {
  923|  2.20k|        Err(format!("The prefix {prefix}: has not been declared"))
  924|       |    }
  925|  2.20k|}
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer14parse_lang_tag:
  545|  17.8k|    fn parse_lang_tag(
  546|  17.8k|        lang_tag: &[u8],
  547|  17.8k|        position: Range<usize>,
  548|  17.8k|    ) -> Result<N3Token<'_>, TokenRecognizerError> {
  549|  17.8k|        Ok(N3Token::LangTag(
  550|  17.8k|            LanguageTag::parse(str_from_utf8(lang_tag, position.clone())?)
  551|  17.8k|                .map_err(|e| (position.clone(), e.to_string()))?
  552|  11.1k|                .into_inner(),
  553|       |        ))
  554|  17.8k|    }
_RNvXNtCs4WjTcpTVJQo_5oxttl5lexerNtB2_7N3LexerNtNtNtB4_7toolkit5lexer15TokenRecognizer20recognize_next_token:
   54|  5.42M|    fn recognize_next_token<'a>(
   55|  5.42M|        &mut self,
   56|  5.42M|        data: &'a [u8],
   57|  5.42M|        is_ending: bool,
   58|  5.42M|        options: &N3LexerOptions,
   59|  5.42M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
   60|  5.42M|        match *data.first()? {
   61|   275k|            b'<' => match *data.get(1)? {
   62|  28.1k|                b'<' => Some((2, Ok(N3Token::Punctuation("<<")))),
   63|  1.11k|                b'=' if self.mode == N3LexerMode::N3 => {
   64|      0|                    if let Some((consumed, result)) = Self::recognize_iri(data, options) {
   65|      0|                        Some(if let Ok(result) = result {
   66|      0|                            (consumed, Ok(result))
   67|       |                        } else {
   68|      0|                            (2, Ok(N3Token::Punctuation("<=")))
   69|       |                        })
   70|      0|                    } else if is_ending {
   71|      0|                        Some((2, Ok(N3Token::Punctuation("<="))))
   72|       |                    } else {
   73|      0|                        None
   74|       |                    }
   75|       |                }
   76|  4.69k|                b'-' if self.mode == N3LexerMode::N3 => {
   77|      0|                    if let Some((consumed, result)) = Self::recognize_iri(data, options) {
   78|      0|                        Some(if let Ok(result) = result {
   79|      0|                            (consumed, Ok(result))
   80|       |                        } else {
   81|      0|                            (2, Ok(N3Token::Punctuation("<-")))
   82|       |                        })
   83|      0|                    } else if is_ending {
   84|      0|                        Some((2, Ok(N3Token::Punctuation("<-"))))
   85|       |                    } else {
   86|      0|                        None
   87|       |                    }
   88|       |                }
   89|   235k|                _ => Self::recognize_iri(data, options),
   90|       |            },
   91|       |            b'>' => {
   92|   106k|                if *data.get(1)? == b'>' {
   93|  80.0k|                    Some((2, Ok(N3Token::Punctuation(">>"))))
   94|       |                } else {
   95|  21.9k|                    Some((1, Ok(N3Token::Punctuation(">"))))
   96|       |                }
   97|       |            }
   98|   247k|            b'_' => match data.get(1)? {
   99|   222k|                b':' => Self::recognize_blank_node_label(data),
  100|  9.42k|                c => Some((
  101|  9.42k|                    1,
  102|  9.42k|                    Err((0, format!("Unexpected character '{}'", char::from(*c))).into()),
  103|  9.42k|                )),
  104|       |            },
  105|       |            b'"' => {
  106|  56.5k|                if self.mode != N3LexerMode::NTriples
  107|  56.5k|                    && *data.get(1)? == b'"'
  108|  37.8k|                    && *data.get(2)? == b'"'
  109|       |                {
  110|  29.5k|                    Self::recognize_long_string(data, b'"')
  111|       |                } else {
  112|  22.5k|                    Self::recognize_string(data, b'"')
  113|       |                }
  114|       |            }
  115|   179k|            b'\'' if self.mode != N3LexerMode::NTriples => {
  116|   179k|                if *data.get(1)? == b'\'' && *data.get(2)? == b'\'' {
  117|  49.9k|                    Self::recognize_long_string(data, b'\'')
  118|       |                } else {
  119|   119k|                    Self::recognize_string(data, b'\'')
  120|       |                }
  121|       |            }
  122|  65.4k|            b'@' => Self::recognize_lang_tag(data),
  123|   471k|            b'.' => match data.get(1) {
  124|  52.5k|                Some(b'0'..=b'9') => Self::recognize_number(data),
  125|   349k|                Some(_) => Some((1, Ok(N3Token::Punctuation(".")))),
  126|   106k|                None => is_ending.then_some((1, Ok(N3Token::Punctuation(".")))),
  127|       |            },
  128|       |            b'^' => {
  129|  24.8k|                if *data.get(1)? == b'^' {
  130|  2.31k|                    Some((2, Ok(N3Token::Punctuation("^^"))))
  131|       |                } else {
  132|  20.1k|                    Some((1, Ok(N3Token::Punctuation("^"))))
  133|       |                }
  134|       |            }
  135|   403k|            b'(' => Some((1, Ok(N3Token::Punctuation("(")))),
  136|  35.0k|            b')' => Some((1, Ok(N3Token::Punctuation(")")))),
  137|  32.0k|            b'[' => Some((1, Ok(N3Token::Punctuation("[")))),
  138|  7.08k|            b']' => Some((1, Ok(N3Token::Punctuation("]")))),
  139|       |            b'{' => {
  140|   135k|                if *data.get(1)? == b'|' {
  141|    232|                    Some((2, Ok(N3Token::Punctuation("{|"))))
  142|       |                } else {
  143|   120k|                    Some((1, Ok(N3Token::Punctuation("{"))))
  144|       |                }
  145|       |            }
  146|  8.64k|            b'}' => Some((1, Ok(N3Token::Punctuation("}")))),
  147|  13.7k|            b',' => Some((1, Ok(N3Token::Punctuation(",")))),
  148|  36.4k|            b';' => Some((1, Ok(N3Token::Punctuation(";")))),
  149|  3.68k|            b'!' => Some((1, Ok(N3Token::Punctuation("!")))),
  150|       |            b'|' => {
  151|  9.06k|                if *data.get(1)? == b'}' {
  152|    308|                    Some((2, Ok(N3Token::Punctuation("|}"))))
  153|       |                } else {
  154|  6.66k|                    Some((1, Ok(N3Token::Punctuation("|"))))
  155|       |                }
  156|       |            }
  157|       |            b'=' => {
  158|  28.2k|                if *data.get(1)? == b'>' {
  159|    524|                    Some((2, Ok(N3Token::Punctuation("=>"))))
  160|       |                } else {
  161|  23.7k|                    Some((1, Ok(N3Token::Punctuation("="))))
  162|       |                }
  163|       |            }
  164|  1.47M|            b'0'..=b'9' | b'+' | b'-' => Self::recognize_number(data),
  165|  55.5k|            b'?' => Self::recognize_variable(data, is_ending),
  166|  2.37M|            _ => Self::recognize_pname_or_keyword(data, is_ending),
  167|       |        }
  168|  5.42M|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer9parse_iri:
  207|   148k|    fn parse_iri(
  208|   148k|        iri: Vec<u8>,
  209|   148k|        position: RangeInclusive<usize>,
  210|   148k|        options: &N3LexerOptions,
  211|   148k|    ) -> Result<N3Token<'static>, TokenRecognizerError> {
  212|   148k|        let iri = String::from_utf8(iri).map_err(|e| {
  213|       |            (
  214|       |                position.clone(),
  215|       |                format!("The IRI contains invalid UTF-8 characters: {e}"),
  216|       |            )
  217|   148k|        })?;
  218|   147k|        let iri = if let Some(base_iri) = options.base_iri.as_ref() {
  219|  22.9k|            base_iri.resolve(&iri)
  220|       |        } else {
  221|   124k|            Iri::parse(iri)
  222|       |        }
  223|   147k|        .map_err(|e| (position, e.to_string()))?;
  224|   134k|        Ok(N3Token::IriRef(iri))
  225|   148k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer18recognize_hex_char:
  766|  85.3k|    fn recognize_hex_char(
  767|  85.3k|        data: &[u8],
  768|  85.3k|        len: usize,
  769|  85.3k|        escape_char: char,
  770|  85.3k|        position: usize,
  771|  85.3k|    ) -> Result<Option<char>, TokenRecognizerError> {
  772|  85.3k|        if data.len() < len {
  773|  2.22k|            return Ok(None);
  774|  83.1k|        }
  775|  83.1k|        let val = str_from_utf8(&data[..len], position..position + len + 2)?;
  776|  80.8k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  777|       |            (
  778|       |                position..position + len + 2,
  779|       |                format!(
  780|       |                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  781|       |                ),
  782|       |            )
  783|  80.8k|        })?;
  784|  78.3k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  785|       |            (
  786|       |                position..position + len +2,
  787|       |                format!(
  788|       |                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  789|       |                ),
  790|       |            )
  791|  78.3k|        })?;
  792|  78.3k|        Ok(Some(c))
  793|  85.3k|    }
_RNvXs8_NtCs4WjTcpTVJQo_5oxttl5lexerNtB5_11N3LexerModeNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqB7_:
   31|   241k|#[derive(Eq, PartialEq)]
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer22is_possible_pn_chars_u:
  887|  11.3M|    fn is_possible_pn_chars_u(c: char) -> bool {
  888|  11.3M|        Self::is_possible_pn_chars_base(c) || c == '_'
  889|  11.3M|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer27recognize_optional_pn_local:
  335|   188k|    fn recognize_optional_pn_local(
  336|   188k|        data: &[u8],
  337|   188k|        is_ending: bool,
  338|   188k|    ) -> Option<(usize, Result<(Cow<'_, str>, bool), TokenRecognizerError>)> {
  339|   188k|        // [168s] 	PN_LOCAL 	::= 	(PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
  340|   188k|        let mut i = 0;
  341|   188k|        let mut buffer = None; // Buffer if there are some escaped characters
  342|   188k|        let mut position_that_is_already_in_buffer = 0;
  343|   188k|        let mut might_be_invalid_iri = false;
  344|       |        loop {
  345|  1.59M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  346|  1.47M|                match r {
  347|  1.46M|                    Ok((c, consumed)) => {
  348|  1.46M|                        if c == '%' {
  349|  18.5k|                            i += 1;
  350|  18.5k|                            let a = char::from(*data.get(i)?);
  351|  7.72k|                            i += 1;
  352|  7.72k|                            let b = char::from(*data.get(i)?);
  353|  3.03k|                            if !a.is_ascii_hexdigit() || !b.is_ascii_hexdigit() {
  354|  1.09k|                                return Some((i + 1, Err((
  355|  1.09k|                                    i - 2..=i, format!("escapes in IRIs should be % followed by two hexadecimal characters, found '%{a}{b}'")
  356|  1.09k|                                ).into())));
  357|  1.94k|                            }
  358|  1.94k|                            i += 1;
  359|  1.44M|                        } else if c == '\\' {
  360|  28.5k|                            i += 1;
  361|  28.5k|                            let a = char::from(*data.get(i)?);
  362|  2.52k|                            if matches!(
  363|  26.3k|                                a,
  364|       |                                '_' | '~'
  365|       |                                    | '.'
  366|       |                                    | '-'
  367|       |                                    | '!'
  368|       |                                    | '$'
  369|       |                                    | '&'
  370|       |                                    | '\''
  371|       |                                    | '('
  372|       |                                    | ')'
  373|       |                                    | '*'
  374|       |                                    | '+'
  375|       |                                    | ','
  376|       |                                    | ';'
  377|       |                                    | '='
  378|  23.7k|                            ) {
  379|  23.7k|                                // ok to escape
  380|  23.7k|                            } else if matches!(a, '/' | '?' | '#' | '@' | '%') {
  381|  2.17k|                                // ok to escape but requires IRI validation
  382|  2.17k|                                might_be_invalid_iri = true;
  383|  2.17k|                            } else {
  384|    352|                                return Some((i + 1, Err((
  385|    352|                                    i..=i, format!("The character that are allowed to be escaped in IRIs are _~.-!$&'()*+,;=/?#@%, found '{a}'")
  386|    352|                                ).into())));
  387|       |                            }
  388|  25.9k|                            let buffer = buffer.get_or_insert_with(String::new);
  389|  25.9k|                            // We add the missing bytes
  390|  25.9k|                            if i - position_that_is_already_in_buffer > 1 {
  391|  19.8k|                                buffer.push_str(
  392|  19.8k|                                    match str_from_utf8(
  393|  19.8k|                                        &data[position_that_is_already_in_buffer..i - 1],
  394|  19.8k|                                        position_that_is_already_in_buffer..i - 1,
  395|  19.8k|                                    ) {
  396|  19.8k|                                        Ok(data) => data,
  397|      0|                                        Err(e) => return Some((i, Err(e))),
  398|       |                                    },
  399|       |                                )
  400|  6.06k|                            }
  401|  25.9k|                            buffer.push(a);
  402|  25.9k|                            i += 1;
  403|  25.9k|                            position_that_is_already_in_buffer = i;
  404|  1.42M|                        } else if i == 0 {
  405|   111k|                            if !(Self::is_possible_pn_chars_u(c) || c == ':' || c.is_ascii_digit())
  406|       |                            {
  407|  27.6k|                                return Some((0, Ok((Cow::Borrowed(""), false))));
  408|  83.6k|                            }
  409|  83.6k|                            might_be_invalid_iri |=
  410|  83.6k|                                Self::is_possible_pn_chars_base_but_not_valid_iri(c) || c == ':';
  411|  83.6k|                            i += consumed;
  412|  1.30M|                        } else if Self::is_possible_pn_chars(c) || c == ':' || c == '.' {
  413|       |                            might_be_invalid_iri |=
  414|  1.29M|                                Self::is_possible_pn_chars_base_but_not_valid_iri(c) || c == ':';
  415|  1.29M|                            i += consumed;
  416|       |                        } else {
  417|  11.8k|                            let buffer = if let Some(mut buffer) = buffer {
  418|  1.87k|                                buffer.push_str(
  419|  1.87k|                                    match str_from_utf8(
  420|  1.87k|                                        &data[position_that_is_already_in_buffer..i],
  421|  1.87k|                                        position_that_is_already_in_buffer..i,
  422|  1.87k|                                    ) {
  423|  1.87k|                                        Ok(data) => data,
  424|      0|                                        Err(e) => return Some((i, Err(e))),
  425|       |                                    },
  426|       |                                );
  427|       |                                // We do not include the last dot
  428|  2.40k|                                while buffer.ends_with('.') {
  429|    526|                                    buffer.pop();
  430|    526|                                    i -= 1;
  431|    526|                                }
  432|  1.87k|                                Cow::Owned(buffer)
  433|       |                            } else {
  434|  10.0k|                                let mut data = match str_from_utf8(&data[..i], 0..i) {
  435|  10.0k|                                    Ok(data) => data,
  436|      0|                                    Err(e) => return Some((i, Err(e))),
  437|       |                                };
  438|       |                                // We do not include the last dot
  439|  12.0k|                                while let Some(d) = data.strip_suffix('.') {
  440|  1.99k|                                    data = d;
  441|  1.99k|                                    i -= 1;
  442|  1.99k|                                }
  443|  10.0k|                                Cow::Borrowed(data)
  444|       |                            };
  445|  11.8k|                            return Some((i, Ok((buffer, might_be_invalid_iri))));
  446|       |                        }
  447|       |                    }
  448|  6.62k|                    Err(e) => return Some((e.location.end, Err(e))),
  449|       |                }
  450|   123k|            } else if is_ending {
  451|    640|                let buffer = if let Some(mut buffer) = buffer {
  452|       |                    // We do not include the last dot
  453|     90|                    while buffer.ends_with('.') {
  454|     30|                        buffer.pop();
  455|     30|                        i -= 1;
  456|     30|                    }
  457|     60|                    Cow::Owned(buffer)
  458|       |                } else {
  459|    580|                    let mut data = match str_from_utf8(&data[..i], 0..i) {
  460|    580|                        Ok(data) => data,
  461|      0|                        Err(e) => return Some((i, Err(e))),
  462|       |                    };
  463|       |                    // We do not include the last dot
  464|  1.10k|                    while let Some(d) = data.strip_suffix('.') {
  465|    524|                        data = d;
  466|    524|                        i -= 1;
  467|    524|                    }
  468|    580|                    Cow::Borrowed(data)
  469|       |                };
  470|    640|                return Some((i, Ok((buffer, might_be_invalid_iri))));
  471|       |            } else {
  472|   122k|                return None;
  473|       |            }
  474|       |        }
  475|   188k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer21recognize_long_string:
  594|  79.5k|    fn recognize_long_string(
  595|  79.5k|        data: &[u8],
  596|  79.5k|        delimiter: u8,
  597|  79.5k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  598|  79.5k|        // [24] 	STRING_LITERAL_LONG_SINGLE_QUOTE 	::= 	"'''" (("'" | "''")? ([^'\] | ECHAR | UCHAR))* "'''"
  599|  79.5k|        // [25] 	STRING_LITERAL_LONG_QUOTE 	::= 	'"""' (('"' | '""')? ([^"\] | ECHAR | UCHAR))* '"""'
  600|  79.5k|        let mut string = String::new();
  601|  79.5k|        let mut i = 3;
  602|       |        loop {
  603|   157k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  604|   126k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  605|   123k|                Ok(s) => string.push_str(s),
  606|  2.51k|                Err(e) => return Some((end, Err(e))),
  607|       |            };
  608|   123k|            i += end;
  609|   123k|            match data[i] {
  610|   123k|                c if c == delimiter => {
  611|  87.5k|                    if *data.get(i + 1)? == delimiter && *data.get(i + 2)? == delimiter {
  612|  34.8k|                        return Some((i + 3, Ok(N3Token::String(string))));
  613|  45.1k|                    }
  614|  45.1k|                    i += 1;
  615|  45.1k|                    string.push(char::from(delimiter));
  616|       |                }
  617|       |                b'\\' => {
  618|  36.1k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  619|  33.8k|                    i += additional + 1;
  620|  33.8k|                    match c {
  621|  32.9k|                        Ok(c) => {
  622|  32.9k|                            string.push(c);
  623|  32.9k|                        }
  624|    864|                        Err(e) => return Some((i, Err(e))),
  625|       |                    }
  626|       |                }
  627|      0|                _ => unreachable!(),
  628|       |            }
  629|       |        }
  630|  79.5k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer3new:
  172|  36.0k|    pub fn new(mode: N3LexerMode) -> Self {
  173|  36.0k|        Self { mode }
  174|  36.0k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer26recognize_pname_or_keyword:
  227|  2.37M|    fn recognize_pname_or_keyword(
  228|  2.37M|        data: &[u8],
  229|  2.37M|        is_ending: bool,
  230|  2.37M|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  231|  2.37M|        // [139s] 	PNAME_NS 	::= 	PN_PREFIX? ':'
  232|  2.37M|        // [140s] 	PNAME_LN 	::= 	PNAME_NS PN_LOCAL
  233|  2.37M|
  234|  2.37M|        // [167s] 	PN_PREFIX 	::= 	PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
  235|  2.37M|        let mut i = 0;
  236|       |        loop {
  237|  5.79M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  238|  5.59M|                match r {
  239|  4.79M|                    Ok((c, consumed)) => {
  240|  4.79M|                        if c == ':' {
  241|   133k|                            i += consumed;
  242|   133k|                            break;
  243|  4.65M|                        } else if i == 0 {
  244|  1.50M|                            if !Self::is_possible_pn_chars_base(c) {
  245|  1.08M|                                return Some((
  246|  1.08M|                                    consumed,
  247|  1.08M|                                    Err((
  248|  1.08M|                                        0..consumed,
  249|  1.08M|                                        format!(
  250|  1.08M|                                            "'{c}' is not allowed at the beginning of a prefix name"
  251|  1.08M|                                        ),
  252|  1.08M|                                    )
  253|  1.08M|                                        .into()),
  254|  1.08M|                                ));
  255|   416k|                            }
  256|   416k|                            i += consumed;
  257|  3.15M|                        } else if Self::is_possible_pn_chars(c) || c == '.' {
  258|  3.00M|                            i += consumed;
  259|  3.00M|                        } else {
  260|   169k|                            while data[..i].ends_with(b".") {
  261|  16.4k|                                i -= 1;
  262|  16.4k|                            }
  263|   153k|                            return Some((
  264|   153k|                                i,
  265|   153k|                                str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  266|   153k|                            ));
  267|       |                        }
  268|       |                    }
  269|   806k|                    Err(e) => return Some((e.location.end, Err(e))),
  270|       |                }
  271|   201k|            } else if is_ending {
  272|  4.63k|                while data[..i].ends_with(b".") {
  273|    998|                    i -= 1;
  274|    998|                }
  275|  3.64k|                return Some(if i == 0 {
  276|  1.55k|                    (
  277|  1.55k|                        1,
  278|  1.55k|                        Err((0..1, format!("Unexpected byte {}", data[0])).into()),
  279|  1.55k|                    )
  280|       |                } else {
  281|  2.08k|                    (
  282|  2.08k|                        i,
  283|  2.08k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  284|  2.08k|                    )
  285|       |                });
  286|       |            } else {
  287|   197k|                return None;
  288|       |            }
  289|       |        }
  290|   133k|        let pn_prefix = match str_from_utf8(&data[..i - 1], 0..i - 1) {
  291|   133k|            Ok(pn_prefix) => pn_prefix,
  292|      0|            Err(e) => return Some((i, Err(e))),
  293|       |        };
  294|   133k|        if pn_prefix.ends_with('.') {
  295|    120|            return Some((
  296|    120|                i,
  297|    120|                Err((
  298|    120|                    0..i,
  299|    120|                    format!(
  300|    120|                        "'{pn_prefix}' is not a valid prefix: prefixes are not allowed to end with '.'"),
  301|    120|                )
  302|    120|                    .into()),
  303|    120|            ));
  304|   133k|        }
  305|       |
  306|   133k|        let (consumed, pn_local_result) = Self::recognize_optional_pn_local(&data[i..], is_ending)?;
  307|  16.8k|        Some((
  308|  16.8k|            consumed + i,
  309|  16.8k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  310|       |                prefix: pn_prefix,
  311|       |                local,
  312|       |                might_be_invalid_iri,
  313|  16.8k|            }),
  314|  16.8k|        ))
  315|  2.37M|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer18recognize_lang_tag:
  521|  65.4k|    fn recognize_lang_tag(
  522|  65.4k|        data: &[u8],
  523|  65.4k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  524|  65.4k|        // [144s] 	LANGTAG 	::= 	'@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
  525|  65.4k|        let mut is_last_block_empty = true;
  526|   455k|        for (i, c) in data[1..].iter().enumerate() {
  527|   455k|            if c.is_ascii_alphabetic() {
  528|   377k|                is_last_block_empty = false;
  529|   377k|            } else if i == 0 {
  530|  11.9k|                return Some((
  531|  11.9k|                    1,
  532|  11.9k|                    Err((1..2, "A language code should always start with a letter").into()),
  533|  11.9k|                ));
  534|  66.0k|            } else if is_last_block_empty {
  535|    568|                return Some((i, Self::parse_lang_tag(&data[1..i], 1..i - 1)));
  536|  65.5k|            } else if *c == b'-' {
  537|  48.2k|                is_last_block_empty = true;
  538|  48.2k|            } else {
  539|  17.2k|                return Some((i + 1, Self::parse_lang_tag(&data[1..=i], 1..i)));
  540|       |            }
  541|       |        }
  542|  35.6k|        None
  543|  65.4k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer16recognize_escape:
  731|   521k|    fn recognize_escape(
  732|   521k|        data: &[u8],
  733|   521k|        position: usize,
  734|   521k|        with_echar: bool,
  735|   521k|    ) -> Option<(usize, Result<char, TokenRecognizerError>)> {
  736|   521k|        // [26] 	UCHAR 	::= 	'\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
  737|   521k|        // [159s] 	ECHAR 	::= 	'\' [tbnrf"'\]
  738|   521k|        match *data.get(1)? {
  739|  80.8k|            b'u' => match Self::recognize_hex_char(&data[2..], 4, 'u', position) {
  740|  79.5k|                Ok(c) => Some((5, Ok(c?))),
  741|  1.32k|                Err(e) => Some((5, Err(e))),
  742|       |            },
  743|  4.49k|            b'U' => match Self::recognize_hex_char(&data[2..], 8, 'u', position) {
  744|    966|                Ok(c) => Some((9, Ok(c?))),
  745|  3.53k|                Err(e) => Some((9, Err(e))),
  746|       |            },
  747|  2.26k|            b't' if with_echar => Some((1, Ok('\t'))),
  748|  2.97k|            b'b' if with_echar => Some((1, Ok('\x08'))),
  749|  3.25k|            b'n' if with_echar => Some((1, Ok('\n'))),
  750|    669|            b'r' if with_echar => Some((1, Ok('\r'))),
  751|  5.98k|            b'f' if with_echar => Some((1, Ok('\x0C'))),
  752|  3.49k|            b'"' if with_echar => Some((1, Ok('"'))),
  753|  1.48k|            b'\'' if with_echar => Some((1, Ok('\''))),
  754|   358k|            b'\\' if with_echar => Some((1, Ok('\\'))),
  755|  38.1k|            c => Some((
  756|  38.1k|                1,
  757|  38.1k|                Err((
  758|  38.1k|                    position..position + 2,
  759|  38.1k|                    format!("Unexpected escape character '\\{}'", char::from(c)),
  760|  38.1k|                )
  761|  38.1k|                    .into()),
  762|  38.1k|            )), //TODO: read until end of string
  763|       |        }
  764|   521k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer22recognize_unicode_char:
  795|  14.1M|    fn recognize_unicode_char(
  796|  14.1M|        data: &[u8],
  797|  14.1M|        position: usize,
  798|  14.1M|    ) -> Option<Result<(char, usize), TokenRecognizerError>> {
  799|  14.1M|        let mut code_point: u32;
  800|  14.1M|        let bytes_needed: usize;
  801|  14.1M|        let mut lower_boundary = 0x80;
  802|  14.1M|        let mut upper_boundary = 0xBF;
  803|       |
  804|  14.1M|        let byte = *data.first()?;
  805|  13.8M|        match byte {
  806|  13.8M|            0x00..=0x7F => return Some(Ok((char::from(byte), 1))),
  807|   431k|            0xC2..=0xDF => {
  808|   269k|                bytes_needed = 1;
  809|   269k|                code_point = u32::from(byte) & 0x1F;
  810|   269k|            }
  811|   162k|            0xE0..=0xEF => {
  812|  57.6k|                if byte == 0xE0 {
  813|  5.91k|                    lower_boundary = 0xA0;
  814|  51.6k|                }
  815|  57.6k|                if byte == 0xED {
  816|  5.60k|                    upper_boundary = 0x9F;
  817|  51.9k|                }
  818|  57.6k|                bytes_needed = 2;
  819|  57.6k|                code_point = u32::from(byte) & 0xF;
  820|       |            }
  821|   104k|            0xF0..=0xF4 => {
  822|  19.7k|                if byte == 0xF0 {
  823|  4.25k|                    lower_boundary = 0x90;
  824|  15.5k|                }
  825|  19.7k|                if byte == 0xF4 {
  826|  11.0k|                    upper_boundary = 0x8F;
  827|  11.0k|                }
  828|  19.7k|                bytes_needed = 3;
  829|  19.7k|                code_point = u32::from(byte) & 0x7;
  830|       |            }
  831|       |            _ => {
  832|   544k|                return Some(Err((
  833|   544k|                    position..=position,
  834|   544k|                    "Invalid UTF-8 character encoding",
  835|   544k|                )
  836|   544k|                    .into()))
  837|       |            }
  838|       |        }
  839|       |
  840|   357k|        for i in 1..=bytes_needed {
  841|   357k|            let byte = *data.get(i)?;
  842|   290k|            if byte < lower_boundary || upper_boundary < byte {
  843|   268k|                return Some(Err((
  844|   268k|                    position..=position + i,
  845|   268k|                    "Invalid UTF-8 character encoding",
  846|   268k|                )
  847|   268k|                    .into()));
  848|  22.3k|            }
  849|  22.3k|            lower_boundary = 0x80;
  850|  22.3k|            upper_boundary = 0xBF;
  851|  22.3k|            code_point = (code_point << 6) | (u32::from(byte) & 0x3F);
  852|       |        }
  853|       |
  854|  11.7k|        Some(
  855|  11.7k|            char::from_u32(code_point)
  856|  11.7k|                .map(|c| (c, bytes_needed + 1))
  857|  11.7k|                .ok_or_else(|| {
  858|       |                    (
  859|       |                        position..=position + bytes_needed,
  860|       |                        format!("The codepoint {code_point:X} is not a valid unicode character"),
  861|       |                    )
  862|       |                        .into()
  863|  11.7k|                }),
  864|  11.7k|        )
  865|  14.1M|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer18recognize_variable:
  317|  55.5k|    fn recognize_variable(
  318|  55.5k|        data: &[u8],
  319|  55.5k|        is_ending: bool,
  320|  55.5k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  321|       |        // [36] 	QUICK_VAR_NAME 	::= 	"?" PN_LOCAL
  322|  55.5k|        let (consumed, result) = Self::recognize_optional_pn_local(&data[1..], is_ending)?;
  323|  31.4k|        Some((
  324|  31.4k|            consumed + 1,
  325|  31.4k|            result.and_then(|(name, _)| {
  326|       |                if name.is_empty() {
  327|       |                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  328|       |                } else {
  329|       |                    Ok(N3Token::Variable(name))
  330|       |                }
  331|  31.4k|            }),
  332|  31.4k|        ))
  333|  55.5k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer43is_possible_pn_chars_base_but_not_valid_iri:
  898|  1.38M|    fn is_possible_pn_chars_base_but_not_valid_iri(c: char) -> bool {
  899|  1.38M|        matches!(c, '\u{FFF0}'..='\u{FFFD}')
  900|  1.38M|            || u32::from(c) % u32::from('\u{FFFE}') == 0
  901|  1.38M|            || u32::from(c) % u32::from('\u{FFFF}') == 0
  902|  1.38M|    }
_RNvNtCs4WjTcpTVJQo_5oxttl5lexer13str_from_utf8:
  927|  1.33M|fn str_from_utf8(data: &[u8], range: Range<usize>) -> Result<&str, TokenRecognizerError> {
  928|  1.33M|    str::from_utf8(data).map_err(|e| {
  929|       |        (
  930|       |            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  931|       |            format!("Invalid UTF-8: {e}"),
  932|       |        )
  933|       |            .into()
  934|  1.33M|    })
  935|  1.33M|}
_RNvXs2_NtCs4WjTcpTVJQo_5oxttl5lexerNtB5_7N3TokenNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqB7_:
   12|  2.16M|#[derive(Debug, PartialEq, Eq)]
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer25is_possible_pn_chars_base:
  868|  12.8M|    fn is_possible_pn_chars_base(c: char) -> bool {
  869|  12.8M|        matches!(c,
  870|  6.44M|        'A'..='Z'
  871|  4.28M|        | 'a'..='z'
  872|  11.7k|        | '\u{00C0}'..='\u{00D6}'
  873|  11.7k|        | '\u{00D8}'..='\u{00F6}'
  874|  11.7k|        | '\u{00F8}'..='\u{02FF}'
  875|  10.4k|        | '\u{0370}'..='\u{037D}'
  876|  10.4k|        | '\u{037F}'..='\u{1FFF}'
  877|  1.46k|        | '\u{200C}'..='\u{200D}'
  878|  1.46k|        | '\u{2070}'..='\u{218F}'
  879|  1.46k|        | '\u{2C00}'..='\u{2FEF}'
  880|  1.46k|        | '\u{3001}'..='\u{D7FF}'
  881|    418|        | '\u{F900}'..='\u{FDCF}'
  882|    305|        | '\u{FDF0}'..='\u{FFFD}'
  883|    303|        | '\u{10000}'..='\u{EFFFF}')
  884|  12.8M|    }

_RNvXNtCs4WjTcpTVJQo_5oxttl5terseNtB2_14TriGRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer13recognize_end:
  786|  36.0k|    fn recognize_end(
  787|  36.0k|        mut self,
  788|  36.0k|        _context: &mut TriGRecognizerContext,
  789|  36.0k|        results: &mut Vec<Self::Output>,
  790|  36.0k|        errors: &mut Vec<RuleRecognizerError>,
  791|  36.0k|    ) {
  792|  36.0k|        match &*self.stack {
  793|  36.0k|            [] | [TriGState::TriGDoc] => {
  794|       |                debug_assert!(
  795|      0|                    self.cur_subject.is_empty(),
  796|      0|                    "The cur_subject stack must be empty if the state stack is empty"
  797|       |                );
  798|       |                debug_assert!(
  799|      0|                    self.cur_predicate.is_empty(),
  800|      0|                    "The cur_predicate stack must be empty if the state stack is empty"
  801|       |                );
  802|       |                debug_assert!(
  803|      0|                    self.cur_object.is_empty(),
  804|      0|                    "The cur_object stack must be empty if the state stack is empty"
  805|       |                );
  806|       |            }
  807|    294|            [.., TriGState::LiteralPossibleSuffix { value, emit: true }] => {
  808|    294|                self.cur_object
  809|    294|                    .push(Literal::new_simple_literal(value).into());
  810|    294|                self.emit_quad(results);
  811|    294|                errors.push("Triples should be followed by a dot".into())
  812|       |            }
  813|    648|            _ => errors.push("Unexpected end".into()), //TODO
  814|       |        }
  815|  36.0k|    }
_RNvXNtCs4WjTcpTVJQo_5oxttl5terseNtB2_14TriGRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer14recognize_next:
   46|  2.95M|    fn recognize_next(
   47|  2.95M|        mut self,
   48|  2.95M|        token: N3Token<'_>,
   49|  2.95M|        context: &mut TriGRecognizerContext,
   50|  2.95M|        results: &mut Vec<Quad>,
   51|  2.95M|        errors: &mut Vec<RuleRecognizerError>,
   52|  2.95M|    ) -> Self {
   53|  2.95M|        if let Some(rule) = self.stack.pop() {
   54|  1.97M|            match rule {
   55|       |                // [1g] 	trigDoc 	::= 	(directive | block)*
   56|       |                // [2g] 	block 	::= 	triplesOrGraph | wrappedGraph | triples2 | "GRAPH" labelOrSubject wrappedGraph
   57|       |                // [3] 	directive 	::= 	prefixID | base | sparqlPrefix | sparqlBase
   58|       |                // [4] 	prefixID 	::= 	'@prefix' PNAME_NS IRIREF '.'
   59|       |                // [5] 	base 	::= 	'@base' IRIREF '.'
   60|       |                // [5s] 	sparqlPrefix 	::= 	"PREFIX" PNAME_NS IRIREF
   61|       |                // [6s] 	sparqlBase 	::= 	"BASE" IRIREF
   62|       |                TriGState::TriGDoc => {
   63|   251k|                    self.cur_graph = GraphName::DefaultGraph;
   64|   251k|                    self.stack.push(TriGState::TriGDoc);
   65|  8.44k|                    match token {
   66|  5.24k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("base") => {
   67|     72|                            self.stack.push(TriGState::BaseExpectIri);
   68|     72|                            self
   69|       |                        }
   70|  5.16k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("prefix") => {
   71|    116|                            self.stack.push(TriGState::PrefixExpectPrefix);
   72|    116|                            self
   73|       |                        }
   74|  2.30k|                        N3Token::LangTag("prefix") => {
   75|    322|                            self.stack.push(TriGState::ExpectDot);
   76|    322|                            self.stack.push(TriGState::PrefixExpectPrefix);
   77|    322|                            self
   78|       |                        }
   79|  1.97k|                        N3Token::LangTag("base") => {
   80|      6|                            self.stack.push(TriGState::ExpectDot);
   81|      6|                            self.stack.push(TriGState::BaseExpectIri);
   82|      6|                            self
   83|       |                        }
   84|  5.05k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("graph") && context.with_graph_name => {
   85|      0|                            self.stack.push(TriGState::WrappedGraph);
   86|      0|                            self.stack.push(TriGState::GraphName);
   87|      0|                            self
   88|       |                        }
   89|   137k|                        N3Token::Punctuation("{") if context.with_graph_name => {
   90|  3.38k|                            self.stack.push(TriGState::WrappedGraph);
   91|  3.38k|                            self.recognize_next(token, context,results, errors)
   92|       |                        }
   93|       |                        _ => {
   94|   247k|                            self.stack.push(TriGState::TriplesOrGraph);
   95|   247k|                            self.recognize_next(token, context,results, errors)
   96|       |                        }
   97|       |                    }
   98|       |                },
   99|       |                TriGState::ExpectDot => {
  100|   102k|                    self.cur_subject.pop();
  101|   102k|                    if token == N3Token::Punctuation(".") {
  102|   101k|                        self
  103|       |                    } else  {
  104|    724|                        errors.push("A dot is expected at the end of statements".into());
  105|    724|                        self.recognize_next(token, context,results, errors)
  106|       |                    }
  107|       |                },
  108|     72|                TriGState::BaseExpectIri => match token {
  109|     12|                    N3Token::IriRef(iri) => {
  110|     12|                        context.lexer_options.base_iri = Some(iri);
  111|     12|                        self
  112|       |                    }
  113|     60|                    _ => self.error(errors, "The BASE keyword should be followed by an IRI"),
  114|       |                },
  115|    154|                TriGState::PrefixExpectPrefix => match token {
  116|    154|                    N3Token::PrefixedName { prefix, local, .. } if local.is_empty() => {
  117|    142|                        self.stack.push(TriGState::PrefixExpectIri { name: prefix.to_owned() });
  118|    142|                        self
  119|       |                    }
  120|       |                    _ => {
  121|    108|                        self.error(errors, "The PREFIX keyword should be followed by a prefix like 'ex:'")
  122|       |                    }
  123|       |                },
  124|    138|                TriGState::PrefixExpectIri { name } => match token {
  125|      0|                    N3Token::IriRef(iri) => {
  126|      0|                        context.prefixes.insert(name, iri);
  127|      0|                        self
  128|       |                    }
  129|    138|                    _ => self.error(errors, "The PREFIX declaration should be followed by a prefix and its value as an IRI"),
  130|       |                },
  131|       |                // [3g] 	triplesOrGraph 	::= 	labelOrSubject ( wrappedGraph | predicateObjectList '.' ) | quotedTriple predicateObjectList '.'
  132|       |                // [4g] 	triples2 	::= 	blankNodePropertyList predicateObjectList? '.' | collection predicateObjectList '.'
  133|    550|                TriGState::TriplesOrGraph => match token {
  134|  2.30k|                    N3Token::IriRef(iri) => {
  135|  2.30k|                        self.stack.push(TriGState::WrappedGraphOrPredicateObjectList {
  136|  2.30k|                            term: NamedNode::from(iri).into()
  137|  2.30k|                        });
  138|  2.30k|                        self
  139|       |                    }
  140|  1.08k|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  141|      0|                        Ok(t) => {
  142|      0|                            self.stack.push(TriGState::WrappedGraphOrPredicateObjectList {
  143|      0|                                term: t.into()
  144|      0|                            });
  145|      0|                            self
  146|       |                        },
  147|  1.08k|                        Err(e) => self.error(errors, e)
  148|       |                    }
  149|   101k|                    N3Token::BlankNodeLabel(label) => {
  150|   101k|                        self.stack.push(TriGState::WrappedGraphOrPredicateObjectList {
  151|   101k|                            term: BlankNode::new_unchecked(label).into()
  152|   101k|                        });
  153|   101k|                        self
  154|       |                    }
  155|   133k|                    N3Token::Punctuation("[") => {
  156|  10.1k|                        self.stack.push(TriGState::WrappedGraphBlankNodePropertyListCurrent);
  157|  10.1k|                        self
  158|       |                    }
  159|   123k|                    N3Token::Punctuation("(") => {
  160|  23.0k|                        self.stack.push(TriGState::ExpectDot);
  161|  23.0k|                        self.stack.push(TriGState::PredicateObjectList);
  162|  23.0k|                        self.stack.push(TriGState::SubjectCollectionBeginning);
  163|  23.0k|                        self
  164|       |                    }
  165|       |                    #[cfg(feature = "rdf-star")]
  166|   100k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  167|    550|                        self.stack.push(TriGState::ExpectDot);
  168|    550|                        self.stack.push(TriGState::PredicateObjectList);
  169|    550|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  170|    550|                        self.stack.push(TriGState::QuotedObject);
  171|    550|                        self.stack.push(TriGState::Verb);
  172|    550|                        self.stack.push(TriGState::QuotedSubject);
  173|    550|                        self
  174|       |                    }
  175|       |                    _ => {
  176|   109k|                        self.error(errors, "TOKEN is not a valid subject or graph name")
  177|       |                    }
  178|       |                }
  179|   103k|                TriGState::WrappedGraphOrPredicateObjectList { term } => {
  180|   103k|                    if token == N3Token::Punctuation("{") && context.with_graph_name {
  181|    504|                        self.cur_graph = term.into();
  182|    504|                        self.stack.push(TriGState::WrappedGraph);
  183|   102k|                    } else {
  184|   102k|                        self.cur_subject.push(term.into());
  185|   102k|                        self.stack.push(TriGState::ExpectDot);
  186|   102k|                        self.stack.push(TriGState::PredicateObjectList);
  187|   102k|                    }
  188|   103k|                    self.recognize_next(token, context,results, errors)
  189|       |                }
  190|  8.25k|                TriGState::WrappedGraphBlankNodePropertyListCurrent => if token == N3Token::Punctuation("]") {
  191|    470|                    self.stack.push(TriGState::WrappedGraphOrPredicateObjectList {
  192|    470|                        term: BlankNode::default().into()
  193|    470|                    });
  194|    470|                    self
  195|       |                } else {
  196|  7.78k|                    self.cur_subject.push(BlankNode::default().into());
  197|  7.78k|                    self.stack.push(TriGState::ExpectDot);
  198|  7.78k|                    self.stack.push(TriGState::SubjectBlankNodePropertyListEnd);
  199|  7.78k|                    self.stack.push(TriGState::PredicateObjectList);
  200|  7.78k|                    self.recognize_next(token, context,results, errors)
  201|       |                }
  202|     44|                TriGState::SubjectBlankNodePropertyListEnd => if token == N3Token::Punctuation("]") {
  203|      2|                    self.stack.push(TriGState::SubjectBlankNodePropertyListAfter  );
  204|      2|                    self
  205|       |                } else {
  206|     42|                    errors.push("blank node property lists should end with a ']'".into());
  207|     42|                    self.stack.push(TriGState::SubjectBlankNodePropertyListAfter );
  208|     42|                    self.recognize_next(token, context,results, errors)
  209|       |                }
  210|     44|                TriGState::SubjectBlankNodePropertyListAfter => if matches!(token, N3Token::Punctuation("." | "}")) {
  211|      0|                    self.recognize_next(token, context,results, errors)
  212|       |                } else {
  213|     44|                    self.stack.push(TriGState::PredicateObjectList);
  214|     44|                    self.recognize_next(token, context,results, errors)
  215|       |                }
  216|       |                TriGState::SubjectCollectionBeginning => {
  217|  22.5k|                    if let N3Token::Punctuation(")") = token {
  218|     54|                        self.cur_subject.push(rdf::NIL.into());
  219|     54|                        self
  220|       |                    } else {
  221|  22.4k|                        let root = BlankNode::default();
  222|  22.4k|                        self.cur_subject.push(root.clone().into());
  223|  22.4k|                        self.cur_subject.push(root.into());
  224|  22.4k|                        self.cur_predicate.push(rdf::FIRST.into());
  225|  22.4k|                        self.stack.push(TriGState::SubjectCollectionPossibleEnd);
  226|  22.4k|                        self.stack.push(TriGState::Object);
  227|  22.4k|                        self.recognize_next(token, context,results, errors)
  228|       |                    }
  229|       |                },
  230|       |                TriGState::SubjectCollectionPossibleEnd => {
  231|  9.13k|                    let old = self.cur_subject.pop().unwrap();
  232|  9.13k|                    self.cur_object.pop();
  233|  9.13k|                    if let N3Token::Punctuation(")") = token {
  234|    228|                        self.cur_predicate.pop();
  235|    228|                        results.push(Quad::new(
  236|    228|                            old,
  237|    228|                            rdf::REST,
  238|    228|                            rdf::NIL,
  239|    228|                            self.cur_graph.clone()
  240|    228|                        ));
  241|    228|                        self
  242|       |                    } else {
  243|  8.90k|                        let new = BlankNode::default();
  244|  8.90k|                        results.push(Quad::new(
  245|  8.90k|                            old,
  246|  8.90k|                            rdf::REST,
  247|  8.90k|                            new.clone(),
  248|  8.90k|                            self.cur_graph.clone()
  249|  8.90k|                        ));
  250|  8.90k|                        self.cur_subject.push(new.into());
  251|  8.90k|                        self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  252|  8.90k|                        self.stack.push(TriGState::Object);
  253|  8.90k|                        self.recognize_next(token, context,results, errors)
  254|       |                    }
  255|       |                }
  256|       |                // [5g] 	wrappedGraph 	::= 	'{' triplesBlock? '}'
  257|       |                // [6g] 	triplesBlock 	::= 	triples ('.' triplesBlock?)?
  258|  3.89k|                TriGState::WrappedGraph => if token == N3Token::Punctuation("{") {
  259|  3.89k|                    self.stack.push(TriGState::WrappedGraphPossibleEnd);
  260|  3.89k|                    self.stack.push(TriGState::Triples);
  261|  3.89k|                    self
  262|       |                } else {
  263|      0|                    self.error(errors, "The GRAPH keyword should be followed by a graph name and a value in '{'")
  264|       |                },
  265|       |                TriGState::WrappedGraphPossibleEnd => {
  266|  7.08k|                    self.cur_subject.pop();
  267|  7.08k|                    match token {
  268|  7.08k|                        N3Token::Punctuation("}") => {
  269|    244|                            self
  270|       |                        }
  271|  6.83k|                        N3Token::Punctuation(".") => {
  272|  6.83k|                            self.stack.push(TriGState::WrappedGraphPossibleEnd);
  273|  6.83k|                            self.stack.push(TriGState::Triples);
  274|  6.83k|                            self
  275|       |                        }
  276|       |                       _ => {
  277|      0|                            errors.push("A '}' or a '.' is expected at the end of a graph block".into());
  278|      0|                            self.recognize_next(token, context,results, errors)
  279|       |                        }
  280|       |                    }
  281|       |                }
  282|       |                // [6] 	triples 	::= 	subject predicateObjectList | blankNodePropertyList predicateObjectList?
  283|       |                // [10] 	subject 	::= 	iri | BlankNode | collection | quotedTriple
  284|     64|                TriGState::Triples => match token {
  285|  2.47k|                    N3Token::Punctuation("}") => {
  286|    244|                        self.recognize_next(token, context,results, errors) // Early end
  287|       |                    },
  288|  2.23k|                    N3Token::Punctuation("[") => {
  289|    632|                        self.cur_subject.push(BlankNode::default().into());
  290|    632|                        self.stack.push(TriGState::TriplesBlankNodePropertyListCurrent);
  291|    632|                        self
  292|       |                    }
  293|     16|                    N3Token::IriRef(iri) => {
  294|     16|                        self.cur_subject.push(NamedNode::from(iri).into());
  295|     16|                        self.stack.push(TriGState::PredicateObjectList);
  296|     16|                        self
  297|       |                    }
  298|    420|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  299|      0|                        Ok(t) => {
  300|      0|                            self.cur_subject.push(t.into());
  301|      0|                            self.stack.push(TriGState::PredicateObjectList);
  302|      0|                            self
  303|       |                        },
  304|    420|                        Err(e) => self.error(errors, e)
  305|       |                    }
  306|  6.84k|                    N3Token::BlankNodeLabel(label) => {
  307|  6.84k|                        self.cur_subject.push(BlankNode::new_unchecked(label).into());
  308|  6.84k|                        self.stack.push(TriGState::PredicateObjectList);
  309|  6.84k|                        self
  310|       |                    }
  311|  1.59k|                    N3Token::Punctuation("(") => {
  312|    314|                        self.stack.push(TriGState::PredicateObjectList);
  313|    314|                        self.stack.push(TriGState::SubjectCollectionBeginning);
  314|    314|                        self
  315|       |                    }
  316|       |                    #[cfg(feature = "rdf-star")]
  317|  1.28k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  318|     64|                        self.stack.push(TriGState::PredicateObjectList);
  319|     64|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  320|     64|                        self.stack.push(TriGState::QuotedObject);
  321|     64|                        self.stack.push(TriGState::Verb);
  322|     64|                        self.stack.push(TriGState::QuotedSubject);
  323|     64|                        self
  324|       |                    }
  325|       |                   _ => {
  326|  1.57k|                        self.error(errors, "TOKEN is not a valid RDF subject")
  327|       |                    }
  328|       |                },
  329|    626|                TriGState::TriplesBlankNodePropertyListCurrent => if token == N3Token::Punctuation("]") {
  330|     60|                    self.stack.push(TriGState::PredicateObjectList);
  331|     60|                    self
  332|       |                } else {
  333|    566|                    self.stack.push(TriGState::SubjectBlankNodePropertyListEnd);
  334|    566|                    self.stack.push(TriGState::PredicateObjectList);
  335|    566|                    self.recognize_next(token, context,results, errors)
  336|       |                }
  337|       |                // [7g] 	labelOrSubject 	::= 	iri | BlankNode
  338|      0|                TriGState::GraphName => match token {
  339|      0|                    N3Token::IriRef(iri) => {
  340|      0|                        self.cur_graph = NamedNode::from(iri).into();
  341|      0|                        self
  342|       |                    }
  343|      0|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  344|      0|                        Ok(t) => {
  345|      0|                            self.cur_graph = t.into();
  346|      0|                            self
  347|       |                        },
  348|      0|                        Err(e) => self.error(errors, e)
  349|       |                    }
  350|      0|                    N3Token::BlankNodeLabel(label) => {
  351|      0|                        self.cur_graph = BlankNode::new_unchecked(label).into();
  352|      0|                        self
  353|       |                    }
  354|      0|                    N3Token::Punctuation("[") => {
  355|      0|                        self.stack.push(TriGState::GraphNameAnonEnd);
  356|      0|                        self
  357|       |                    }
  358|       |                   _ => {
  359|      0|                        self.error(errors, "TOKEN is not a valid graph name")
  360|       |                    }
  361|       |                }
  362|      0|                TriGState::GraphNameAnonEnd => if token == N3Token::Punctuation("]") {
  363|      0|                    self.cur_graph = BlankNode::default().into();
  364|      0|                    self
  365|       |                } else {
  366|      0|                    self.error(errors, "Anonymous blank node with a property list are not allowed as graph name")
  367|       |                }
  368|       |                // [7] 	predicateObjectList 	::= 	verb objectList (';' (verb objectList)?)*
  369|       |                TriGState::PredicateObjectList => {
  370|   118k|                    self.stack.push(TriGState::PredicateObjectListEnd);
  371|   118k|                    self.stack.push(TriGState::ObjectsList);
  372|   118k|                    self.stack.push(TriGState::Verb);
  373|   118k|                    self.recognize_next(token, context,results, errors)
  374|       |                },
  375|       |                TriGState::PredicateObjectListEnd => {
  376|   121k|                    self.cur_predicate.pop();
  377|   121k|                    if token == N3Token::Punctuation(";") {
  378|  12.6k|                        self.stack.push(TriGState::PredicateObjectListPossibleContinuation);
  379|  12.6k|                        self
  380|       |                    } else {
  381|   108k|                        self.recognize_next(token, context,results, errors)
  382|       |                    }
  383|       |                },
  384|  12.6k|                TriGState::PredicateObjectListPossibleContinuation => if token == N3Token::Punctuation(";") {
  385|      0|                    self.stack.push(TriGState::PredicateObjectListPossibleContinuation);
  386|      0|                    self
  387|  12.6k|                } else if matches!(token, N3Token::Punctuation("." | "}" | "]")) {
  388|      0|                    self.recognize_next(token, context,results, errors)
  389|       |                } else {
  390|  12.6k|                    self.stack.push(TriGState::PredicateObjectListEnd);
  391|  12.6k|                    self.stack.push(TriGState::ObjectsList);
  392|  12.6k|                    self.stack.push(TriGState::Verb);
  393|  12.6k|                    self.recognize_next(token, context,results, errors)
  394|       |                },
  395|       |                // [8] 	objectList 	::= 	object annotation? ( ',' object annotation? )*
  396|       |                // [30t] 	annotation 	::= 	'{|' predicateObjectList '|}'
  397|       |                TriGState::ObjectsList => {
  398|   122k|                    self.stack.push(TriGState::ObjectsListEnd);
  399|   122k|                    self.stack.push(TriGState::Object);
  400|   122k|                    self.recognize_next(token, context,results, errors)
  401|       |                }
  402|       |                TriGState::ObjectsListEnd => {
  403|   121k|                    match token {
  404|   121k|                        N3Token::Punctuation(",") => {
  405|    215|                            self.cur_object.pop();
  406|    215|                            self.stack.push(TriGState::ObjectsListEnd);
  407|    215|                            self.stack.push(TriGState::Object);
  408|    215|                            self
  409|       |                        },
  410|       |                        #[cfg(feature = "rdf-star")]
  411|   120k|                        N3Token::Punctuation("{|") => {
  412|      0|                            let triple = Triple::new(
  413|      0|                                self.cur_subject.last().unwrap().clone(),
  414|      0|                                self.cur_predicate.last().unwrap().clone(),
  415|      0|                                self.cur_object.pop().unwrap()
  416|      0|                            );
  417|      0|                            self.cur_subject.push(triple.into());
  418|      0|                            self.stack.push(TriGState::AnnotationEnd);
  419|      0|                            self.stack.push(TriGState::PredicateObjectList);
  420|      0|                            self
  421|       |                        }
  422|       |                       _ => {
  423|   121k|                            self.cur_object.pop();
  424|   121k|                            self.recognize_next(token, context,results, errors)
  425|       |                        }
  426|       |                    }
  427|       |                },
  428|       |                #[cfg(feature = "rdf-star")]
  429|       |                TriGState::AnnotationEnd => {
  430|      0|                    self.cur_subject.pop();
  431|      0|                    self.stack.push(TriGState::ObjectsListAfterAnnotation);
  432|      0|                    if token == N3Token::Punctuation("|}") {
  433|      0|                        self
  434|       |                    } else {
  435|      0|                        self.error(errors, "Annotations should end with '|}'")
  436|       |                    }
  437|       |                },
  438|       |                #[cfg(feature = "rdf-star")]
  439|      0|                TriGState::ObjectsListAfterAnnotation => if token == N3Token::Punctuation(",") {
  440|      0|                    self.stack.push(TriGState::ObjectsListEnd);
  441|      0|                    self.stack.push(TriGState::Object);
  442|      0|                    self
  443|       |                } else {
  444|      0|                    self.recognize_next(token, context,results, errors)
  445|       |                },
  446|       |                // [9] 	verb 	::= 	predicate | 'a'
  447|       |                // [11] 	predicate 	::= 	iri
  448|   131k|                TriGState::Verb => match token {
  449|  7.69k|                    N3Token::PlainKeyword("a") => {
  450|    392|                        self.cur_predicate.push(rdf::TYPE.into());
  451|    392|                        self
  452|       |                    }
  453|   121k|                    N3Token::IriRef(iri) => {
  454|   121k|                        self.cur_predicate.push(NamedNode::from(iri));
  455|   121k|                        self
  456|       |                    }
  457|    238|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  458|      0|                        Ok(t) => {
  459|      0|                            self.cur_predicate.push(t);
  460|      0|                            self
  461|       |                        },
  462|    238|                        Err(e) => self.error(errors, e)
  463|       |                    }
  464|       |                   _ => {
  465|  9.29k|                        self.error(errors, "TOKEN is not a valid predicate")
  466|       |                    }
  467|       |                }
  468|       |                // [12] 	object 	::= 	iri | BlankNode | collection | blankNodePropertyList | literal | quotedTriple
  469|       |                // [13] 	literal 	::= 	RDFLiteral | NumericLiteral | BooleanLiteral
  470|       |                // [14] 	blank 	::= 	BlankNode | collection
  471|       |                // [15] 	blankNodePropertyList 	::= 	'[' predicateObjectList ']'
  472|       |                // [16] 	collection 	::= 	'(' object* ')'
  473|       |                // [17] 	NumericLiteral 	::= 	INTEGER | DECIMAL | DOUBLE
  474|       |                // [128s] 	RDFLiteral 	::= 	String (LANGTAG | '^^' iri)?
  475|       |                // [133s] 	BooleanLiteral 	::= 	'true' | 'false'
  476|       |                // [18] 	String 	::= 	STRING_LITERAL_QUOTE | STRING_LITERAL_SINGLE_QUOTE | STRING_LITERAL_LONG_SINGLE_QUOTE | STRING_LITERAL_LONG_QUOTE
  477|       |                // [135s] 	iri 	::= 	IRIREF | PrefixedName
  478|       |                // [136s] 	PrefixedName 	::= 	PNAME_LN | PNAME_NS
  479|       |                // [137s] 	BlankNode 	::= 	BLANK_NODE_LABEL | ANON
  480|  2.27k|                TriGState::Object => match token {
  481|  4.03k|                    N3Token::IriRef(iri) => {
  482|  4.03k|                        self.cur_object.push(NamedNode::from(iri).into());
  483|  4.03k|                        self.emit_quad(results);
  484|  4.03k|                        self
  485|       |                    }
  486|    424|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  487|      0|                        Ok(t) => {
  488|      0|                            self.cur_object.push(t.into());
  489|      0|                            self.emit_quad(results);
  490|      0|                            self
  491|       |                        },
  492|    424|                        Err(e) => self.error(errors, e)
  493|       |                    }
  494|  96.4k|                    N3Token::BlankNodeLabel(label) => {
  495|  96.4k|                        self.cur_object.push(BlankNode::new_unchecked(label).into());
  496|  96.4k|                        self.emit_quad(results);
  497|  96.4k|                        self
  498|       |                    }
  499|   168k|                    N3Token::Punctuation("[") => {
  500|  1.54k|                        self.stack.push(TriGState::ObjectBlankNodePropertyListCurrent);
  501|  1.54k|                        self
  502|       |                    }
  503|   167k|                    N3Token::Punctuation("(") => {
  504|   163k|                        self.stack.push(TriGState::ObjectCollectionBeginning);
  505|   163k|                        self
  506|       |                    }
  507|  35.8k|                    N3Token::String(value) => {
  508|  35.8k|                        self.stack.push(TriGState::LiteralPossibleSuffix { value, emit: true });
  509|  35.8k|                        self
  510|       |                    }
  511|  21.0k|                    N3Token::Integer(v) => {
  512|  21.0k|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::INTEGER).into());
  513|  21.0k|                        self.emit_quad(results);
  514|  21.0k|                        self
  515|       |                    }
  516|  2.56k|                    N3Token::Decimal(v) => {
  517|  2.56k|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
  518|  2.56k|                        self.emit_quad(results);
  519|  2.56k|                        self
  520|       |                    }
  521|  4.32k|                    N3Token::Double(v) => {
  522|  4.32k|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
  523|  4.32k|                        self.emit_quad(results);
  524|  4.32k|                        self
  525|       |                    }
  526|  2.48k|                    N3Token::PlainKeyword("true") => {
  527|    129|                        self.cur_object.push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
  528|    129|                        self.emit_quad(results);
  529|    129|                        self
  530|       |                    }
  531|  2.35k|                    N3Token::PlainKeyword("false") => {
  532|    222|                        self.cur_object.push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
  533|    222|                        self.emit_quad(results);
  534|    222|                        self
  535|       |                    }
  536|       |                    #[cfg(feature = "rdf-star")]
  537|  3.36k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  538|  2.27k|                        self.stack.push(TriGState::ObjectQuotedTripleEnd { emit: true });
  539|  2.27k|                        self.stack.push(TriGState::QuotedObject);
  540|  2.27k|                        self.stack.push(TriGState::Verb);
  541|  2.27k|                        self.stack.push(TriGState::QuotedSubject);
  542|  2.27k|                        self
  543|       |                    }
  544|       |                   _ => {
  545|  3.30k|                        self.error(errors, "TOKEN is not a valid RDF object")
  546|       |                    }
  547|       |
  548|       |                }
  549|  1.04k|                TriGState::ObjectBlankNodePropertyListCurrent => if token == N3Token::Punctuation("]") {
  550|    522|                    self.cur_object.push(BlankNode::default().into());
  551|    522|                    self.emit_quad(results);
  552|    522|                    self
  553|       |                } else {
  554|    522|                    self.cur_subject.push(BlankNode::default().into());
  555|    522|                    self.stack.push(TriGState::ObjectBlankNodePropertyListEnd);
  556|    522|                    self.stack.push(TriGState::PredicateObjectList);
  557|    522|                    self.recognize_next(token, context,results, errors)
  558|       |                }
  559|     30|                TriGState::ObjectBlankNodePropertyListEnd => if token == N3Token::Punctuation("]") {
  560|      0|                    self.cur_object.push(self.cur_subject.pop().unwrap().into());
  561|      0|                    self.emit_quad(results);
  562|      0|                    self
  563|       |                } else {
  564|     30|                    self.error(errors, "blank node property lists should end with a ']'")
  565|       |                }
  566|   160k|                TriGState::ObjectCollectionBeginning => if let  N3Token::Punctuation(")") = token {
  567|    804|                    self.cur_object.push(rdf::NIL.into());
  568|    804|                    self.emit_quad(results);
  569|    804|                    self
  570|       |                } else {
  571|   160k|                    let root = BlankNode::default();
  572|   160k|                    self.cur_object.push(root.clone().into());
  573|   160k|                    self.emit_quad(results);
  574|   160k|                    self.cur_subject.push(root.into());
  575|   160k|                    self.cur_predicate.push(rdf::FIRST.into());
  576|   160k|                    self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  577|   160k|                    self.stack.push(TriGState::Object);
  578|   160k|                    self.recognize_next(token, context,results, errors)
  579|       |                },
  580|       |                TriGState::ObjectCollectionPossibleEnd => {
  581|  27.8k|                    let old = self.cur_subject.pop().unwrap();
  582|  27.8k|                    self.cur_object.pop();
  583|  27.8k|                    if let N3Token::Punctuation(")") = token {
  584|  5.31k|                        self.cur_predicate.pop();
  585|  5.31k|                        results.push(Quad::new(old,
  586|  5.31k|                                               rdf::REST,
  587|  5.31k|                                               rdf::NIL,
  588|  5.31k|                                               self.cur_graph.clone()
  589|  5.31k|                        ));
  590|  5.31k|                        self
  591|       |                    }else {
  592|  22.5k|                        let new = BlankNode::default();
  593|  22.5k|                        results.push(Quad::new(old,
  594|  22.5k|                                               rdf::REST,
  595|  22.5k|                                               new.clone(),
  596|  22.5k|                                               self.cur_graph.clone()
  597|  22.5k|                        ));
  598|  22.5k|                        self.cur_subject.push(new.into());
  599|  22.5k|                        self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  600|  22.5k|                        self.stack.push(TriGState::Object);
  601|  22.5k|                        self.recognize_next(token, context,results, errors)
  602|       |                    }
  603|       |                }
  604|  34.9k|                TriGState::LiteralPossibleSuffix { value, emit } => {
  605|  34.9k|                    match token {
  606|  1.03k|                        N3Token::LangTag(lang) => {
  607|  1.03k|                            self.cur_object.push(Literal::new_language_tagged_literal_unchecked(value, lang.to_ascii_lowercase()).into());
  608|  1.03k|                            if emit {
  609|  1.03k|                                self.emit_quad(results);
  610|  1.03k|                            }
  611|  1.03k|                            self
  612|       |                        },
  613|  18.5k|                        N3Token::Punctuation("^^") => {
  614|      4|                            self.stack.push(TriGState::LiteralExpectDatatype { value, emit });
  615|      4|                            self
  616|       |                        }
  617|       |                        _ => {
  618|  33.9k|                            self.cur_object.push(Literal::new_simple_literal(value).into());
  619|  33.9k|                            if emit {
  620|  33.9k|                                self.emit_quad(results);
  621|  33.9k|                            }
  622|  33.9k|                            self.recognize_next(token, context,results, errors)
  623|       |                        }
  624|       |                    }
  625|       |                }
  626|      4|                TriGState::LiteralExpectDatatype { value, emit } => {
  627|      4|                    match token {
  628|      0|                        N3Token::IriRef(datatype) => {
  629|      0|                            self.cur_object.push(Literal::new_typed_literal(value, datatype).into());
  630|      0|                            if emit {
  631|      0|                                self.emit_quad(results);
  632|      0|                            }
  633|      0|                            self
  634|       |                        },
  635|      0|                        N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  636|      0|                            Ok(t) => {
  637|      0|                                self.cur_object.push(Literal::new_typed_literal(value, t).into());
  638|      0|                                if emit {
  639|      0|                                    self.emit_quad(results);
  640|      0|                                }
  641|      0|                                self
  642|       |                            },
  643|      0|                            Err(e) => self.error(errors, e)
  644|       |                        }
  645|       |                        _ => {
  646|      4|                            self.error(errors, "Expecting a datatype IRI after ^^, found TOKEN").recognize_next(token, context, results, errors)
  647|       |                        }
  648|       |                    }
  649|       |                }
  650|       |                // [27t] 	quotedTriple 	::= 	'<<' qtSubject verb qtObject '>>'
  651|       |                #[cfg(feature = "rdf-star")]
  652|       |                TriGState::SubjectQuotedTripleEnd => {
  653|      0|                    let triple = Triple::new(
  654|      0|                        self.cur_subject.pop().unwrap(),
  655|      0|                        self.cur_predicate.pop().unwrap(),
  656|      0|                        self.cur_object.pop().unwrap()
  657|      0|                    );
  658|      0|                    self.cur_subject.push(triple.into());
  659|      0|                    if token == N3Token::Punctuation(">>") {
  660|      0|                        self
  661|       |                    } else {
  662|      0|                        self.error(errors, "Expecting '>>' to close a quoted triple, found TOKEN")
  663|       |                    }
  664|       |                }
  665|       |                #[cfg(feature = "rdf-star")]
  666|      0|                TriGState::ObjectQuotedTripleEnd { emit } => {
  667|      0|                    let triple = Triple::new(
  668|      0|                        self.cur_subject.pop().unwrap(),
  669|      0|                        self.cur_predicate.pop().unwrap(),
  670|      0|                        self.cur_object.pop().unwrap()
  671|      0|                    );
  672|      0|                    self.cur_object.push(triple.into());
  673|      0|                    if emit {
  674|      0|                        self.emit_quad(results);
  675|      0|                    }
  676|      0|                    if token == N3Token::Punctuation(">>") {
  677|      0|                        self
  678|       |                    } else {
  679|      0|                        self.error(errors, "Expecting '>>' to close a quoted triple, found TOKEN")
  680|       |                    }
  681|       |                }
  682|       |                // [28t] 	qtSubject 	::= 	iri | BlankNode | quotedTriple
  683|       |                #[cfg(feature = "rdf-star")]
  684|  17.1k|                TriGState::QuotedSubject => match token {
  685|  17.0k|                    N3Token::Punctuation("[") => {
  686|    198|                        self.cur_subject.push(BlankNode::default().into());
  687|    198|                        self.stack.push(TriGState::QuotedAnonEnd);
  688|    198|                        self
  689|       |                    }
  690|     28|                    N3Token::IriRef(iri) => {
  691|     28|                        self.cur_subject.push(NamedNode::from(iri).into());
  692|     28|                        self
  693|       |                    }
  694|     36|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  695|      0|                        Ok(t) => {
  696|      0|                            self.cur_subject.push(t.into());
  697|      0|                            self
  698|       |                        },
  699|     36|                        Err(e) => self.error(errors, e)
  700|       |                    }
  701|     32|                    N3Token::BlankNodeLabel(label) => {
  702|     32|                        self.cur_subject.push(BlankNode::new_unchecked(label).into());
  703|     32|                        self
  704|       |                    }
  705|  16.8k|                    N3Token::Punctuation("<<") => {
  706|  14.7k|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  707|  14.7k|                        self.stack.push(TriGState::QuotedObject);
  708|  14.7k|                        self.stack.push(TriGState::Verb);
  709|  14.7k|                        self.stack.push(TriGState::QuotedSubject);
  710|  14.7k|                        self
  711|       |                    }
  712|  2.19k|                    _ => self.error(errors, "TOKEN is not a valid RDF quoted triple subject: TOKEN")
  713|       |                }
  714|       |                // [29t] 	qtObject 	::= 	iri | BlankNode | literal | quotedTriple
  715|       |                #[cfg(feature = "rdf-star")]
  716|      0|                TriGState::QuotedObject => match token {
  717|      0|                    N3Token::Punctuation("[") => {
  718|      0|                        self.cur_object.push(BlankNode::default().into());
  719|      0|                        self.stack.push(TriGState::QuotedAnonEnd);
  720|      0|                        self
  721|       |                    }
  722|      0|                    N3Token::IriRef(iri) => {
  723|      0|                        self.cur_object.push(NamedNode::from(iri).into());
  724|      0|                        self
  725|       |                    }
  726|      0|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  727|      0|                        Ok(t) => {
  728|      0|                            self.cur_object.push(t.into());
  729|      0|                            self
  730|       |                        },
  731|      0|                        Err(e) => self.error(errors, e)
  732|       |                    }
  733|      0|                    N3Token::BlankNodeLabel(label) => {
  734|      0|                        self.cur_object.push(BlankNode::new_unchecked(label).into());
  735|      0|                        self
  736|       |                    }
  737|      0|                    N3Token::String(value) => {
  738|      0|                        self.stack.push(TriGState::LiteralPossibleSuffix { value, emit: false });
  739|      0|                        self
  740|       |                    }
  741|      0|                    N3Token::Integer(v) => {
  742|      0|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::INTEGER).into());
  743|      0|                        self
  744|       |                    }
  745|      0|                    N3Token::Decimal(v) => {
  746|      0|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
  747|      0|                        self
  748|       |                    }
  749|      0|                    N3Token::Double(v) => {
  750|      0|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
  751|      0|                        self
  752|       |                    }
  753|      0|                    N3Token::PlainKeyword("true") => {
  754|      0|                        self.cur_object.push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
  755|      0|                        self
  756|       |                    }
  757|      0|                    N3Token::PlainKeyword("false") => {
  758|      0|                        self.cur_object.push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
  759|      0|                        self
  760|       |                    }
  761|      0|                    N3Token::Punctuation("<<") => {
  762|      0|                        self.stack.push(TriGState::ObjectQuotedTripleEnd { emit: false });
  763|      0|                        self.stack.push(TriGState::QuotedObject);
  764|      0|                        self.stack.push(TriGState::Verb);
  765|      0|                        self.stack.push(TriGState::QuotedSubject);
  766|      0|                        self
  767|       |                    }
  768|      0|                    _ => self.error(errors, "TOKEN is not a valid RDF quoted triple object")
  769|       |                }
  770|       |                #[cfg(feature = "rdf-star")]
  771|    186|                TriGState::QuotedAnonEnd => if token == N3Token::Punctuation("]") {
  772|      0|                    self
  773|       |                } else {
  774|    186|                    self.error(errors, "Anonymous blank node with a property list are not allowed in quoted triples")
  775|       |                }
  776|       |            }
  777|   981k|        } else if token == N3Token::Punctuation(".") || token == N3Token::Punctuation("}") {
  778|       |            //TODO: be smarter depending if we are in '{' or not
  779|   153k|            self.stack.push(TriGState::TriGDoc);
  780|   153k|            self
  781|       |        } else {
  782|   827k|            self
  783|       |        }
  784|  2.95M|    }
_RNvXNtCs4WjTcpTVJQo_5oxttl5terseNtB2_14TriGRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer13lexer_options:
  817|  5.45M|    fn lexer_options(context: &TriGRecognizerContext) -> &N3LexerOptions {
  818|  5.45M|        &context.lexer_options
  819|  5.45M|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5terseNtB4_14TriGRecognizer9emit_quad:
  869|   325k|    fn emit_quad(&mut self, results: &mut Vec<Quad>) {
  870|   325k|        results.push(Quad::new(
  871|   325k|            self.cur_subject.last().unwrap().clone(),
  872|   325k|            self.cur_predicate.last().unwrap().clone(),
  873|   325k|            self.cur_object.last().unwrap().clone(),
  874|   325k|            self.cur_graph.clone(),
  875|   325k|        ));
  876|   325k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5terseNtB4_14TriGRecognizer10new_parser:
  823|  36.0k|    pub fn new_parser(
  824|  36.0k|        with_graph_name: bool,
  825|  36.0k|        #[cfg(feature = "rdf-star")] with_quoted_triples: bool,
  826|  36.0k|        base_iri: Option<Iri<String>>,
  827|  36.0k|        prefixes: HashMap<String, Iri<String>>,
  828|  36.0k|    ) -> Parser<Self> {
  829|  36.0k|        Parser::new(
  830|  36.0k|            Lexer::new(
  831|  36.0k|                N3Lexer::new(N3LexerMode::Turtle),
  832|  36.0k|                MIN_BUFFER_SIZE,
  833|  36.0k|                MAX_BUFFER_SIZE,
  834|  36.0k|                true,
  835|  36.0k|                Some(b"#"),
  836|  36.0k|            ),
  837|  36.0k|            TriGRecognizer {
  838|  36.0k|                stack: vec![TriGState::TriGDoc],
  839|  36.0k|                cur_subject: Vec::new(),
  840|  36.0k|                cur_predicate: Vec::new(),
  841|  36.0k|                cur_object: Vec::new(),
  842|  36.0k|                cur_graph: GraphName::DefaultGraph,
  843|  36.0k|            },
  844|  36.0k|            TriGRecognizerContext {
  845|  36.0k|                with_graph_name,
  846|  36.0k|                #[cfg(feature = "rdf-star")]
  847|  36.0k|                with_quoted_triples,
  848|  36.0k|                prefixes,
  849|  36.0k|                lexer_options: N3LexerOptions { base_iri },
  850|  36.0k|            },
  851|  36.0k|        )
  852|  36.0k|    }
_RNvXNtCs4WjTcpTVJQo_5oxttl5terseNtB2_14TriGRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer20error_recovery_state:
   37|  2.01M|    fn error_recovery_state(mut self) -> Self {
   38|  2.01M|        self.stack.clear();
   39|  2.01M|        self.cur_subject.clear();
   40|  2.01M|        self.cur_predicate.clear();
   41|  2.01M|        self.cur_object.clear();
   42|  2.01M|        self.cur_graph = GraphName::DefaultGraph;
   43|  2.01M|        self
   44|  2.01M|    }
_RINvMs_NtCs4WjTcpTVJQo_5oxttl5terseNtB5_14TriGRecognizer5errorNtNtCsdBW21Yiwikk_5alloc6string6StringEB7_:
  855|  2.20k|    fn error(
  856|  2.20k|        mut self,
  857|  2.20k|        errors: &mut Vec<RuleRecognizerError>,
  858|  2.20k|        msg: impl Into<RuleRecognizerError>,
  859|  2.20k|    ) -> Self {
  860|  2.20k|        errors.push(msg.into());
  861|  2.20k|        self.stack.clear();
  862|  2.20k|        self.cur_subject.clear();
  863|  2.20k|        self.cur_predicate.clear();
  864|  2.20k|        self.cur_object.clear();
  865|  2.20k|        self.cur_graph = GraphName::DefaultGraph;
  866|  2.20k|        self
  867|  2.20k|    }
_RINvMs_NtCs4WjTcpTVJQo_5oxttl5terseNtB5_14TriGRecognizer5errorReEB7_:
  855|   126k|    fn error(
  856|   126k|        mut self,
  857|   126k|        errors: &mut Vec<RuleRecognizerError>,
  858|   126k|        msg: impl Into<RuleRecognizerError>,
  859|   126k|    ) -> Self {
  860|   126k|        errors.push(msg.into());
  861|   126k|        self.stack.clear();
  862|   126k|        self.cur_subject.clear();
  863|   126k|        self.cur_predicate.clear();
  864|   126k|        self.cur_object.clear();
  865|   126k|        self.cur_graph = GraphName::DefaultGraph;
  866|   126k|        self
  867|   126k|    }

_RNvXs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5errorNtB4_11SyntaxErrorNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCs9jqYw0Nmepu_4trig:
   38|  2.14M|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   39|  2.14M|        if self.location.start.offset + 1 >= self.location.end.offset {
   40|  1.83M|            write!(
   41|  1.83M|                f,
   42|  1.83M|                "Parser error at line {} column {}: {}",
   43|  1.83M|                self.location.start.line + 1,
   44|  1.83M|                self.location.start.column + 1,
   45|  1.83M|                self.message
   46|  1.83M|            )
   47|   307k|        } else if self.location.start.line == self.location.end.line {
   48|   305k|            write!(
   49|   305k|                f,
   50|   305k|                "Parser error between at line {} between columns {} and column {}: {}",
   51|   305k|                self.location.start.line + 1,
   52|   305k|                self.location.start.column + 1,
   53|   305k|                self.location.end.column + 1,
   54|   305k|                self.message
   55|   305k|            )
   56|       |        } else {
   57|  1.61k|            write!(
   58|  1.61k|                f,
   59|  1.61k|                "Parser error between line {} column {} and line {} column {}: {}",
   60|  1.61k|                self.location.start.line + 1,
   61|  1.61k|                self.location.start.column + 1,
   62|  1.61k|                self.location.end.line + 1,
   63|  1.61k|                self.location.end.column + 1,
   64|  1.61k|                self.message
   65|  1.61k|            )
   66|       |        }
   67|  2.14M|    }

_RINvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB6_5LexerNtNtBa_5lexer7N3LexerE16extend_from_readRShECs9jqYw0Nmepu_4trig:
  113|  28.7k|    pub fn extend_from_read(&mut self, read: &mut impl Read) -> io::Result<()> {
  114|  28.7k|        self.shrink_data();
  115|  28.7k|        if self.data.len() == self.max_buffer_size {
  116|      0|            return Err(io::Error::new(
  117|      0|                io::ErrorKind::OutOfMemory,
  118|      0|                format!(
  119|      0|                    "Reached the buffer maximal size of {}",
  120|      0|                    self.max_buffer_size
  121|      0|                ),
  122|      0|            ));
  123|  28.7k|        }
  124|  28.7k|        let min_end = min(self.data.len() + self.min_buffer_size, self.max_buffer_size);
  125|  28.7k|        let new_start = self.data.len();
  126|  28.7k|        self.data.resize(min_end, 0);
  127|  28.7k|        if self.data.len() < self.data.capacity() {
  128|  2.83k|            // We keep extending to have as much space as available without reallocation
  129|  2.83k|            self.data.resize(self.data.capacity(), 0);
  130|  25.9k|        }
  131|  28.7k|        let read = read.read(&mut self.data[new_start..])?;
  132|  28.7k|        self.data.truncate(new_start + read);
  133|  28.7k|        self.is_ending = read == 0;
  134|  28.7k|        Ok(())
  135|  28.7k|    }
_RNvXs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCsl2lhD68vXAd_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejEReEE4fromB8_:
   41|   813k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|   813k|        (*location.start()..*location.end() + 1, message).into()
   43|   813k|    }
_RNCNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB7_5LexerNtNtBb_5lexer7N3LexerE9read_next0Bb_:
  227|  2.00M|        Some(result.map_err(|e| SyntaxError {
  228|  2.00M|            location: self.location_from_buffer_offset_range(e.location),
  229|  2.00M|            message: e.message,
  230|  2.00M|        }))
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  397|  7.88M|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  398|  7.88M|        let mut num_of_jumps = 0;
  399|  7.88M|        let mut last_jump_pos = 0;
  400|  7.88M|        let mut previous_cr = 0;
  401|  7.88M|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  402|  26.1k|            if bytes[pos] == b'\r' {
  403|  5.04k|                previous_cr = pos;
  404|  5.04k|                num_of_jumps += 1;
  405|  5.04k|                last_jump_pos = pos + 1;
  406|  5.04k|            } else {
  407|  21.0k|                if previous_cr < pos - 1 {
  408|  18.6k|                    // We count \r\n as a single line jump
  409|  18.6k|                    num_of_jumps += 1;
  410|  18.6k|                }
  411|  21.0k|                last_jump_pos = pos + 1;
  412|       |            }
  413|       |        }
  414|  7.88M|        (num_of_jumps, last_jump_pos)
  415|  7.88M|    }
_RNvXNtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCsl2lhD68vXAd_4core7convert4FromTINtNtNtB1a_3ops5range5RangejENtNtCsdBW21Yiwikk_5alloc6string6StringEE4fromB6_:
   31|  1.16M|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|  1.16M|        Self {
   33|  1.16M|            location,
   34|  1.16M|            message: message.into(),
   35|  1.16M|        }
   36|  1.16M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE9read_nextB9_:
  166|  5.45M|    pub fn read_next(&mut self, options: &R::Options) -> Option<Result<R::Token<'_>, SyntaxError>> {
  167|  5.45M|        self.skip_whitespaces_and_comments()?;
  168|  5.42M|        self.previous_position = self.position;
  169|  5.42M|        let Some((consumed, result)) = self.parser.recognize_next_token(
  170|  5.42M|            &self.data[self.position.buffer_offset..],
  171|  5.42M|            self.is_ending,
  172|  5.42M|            options,
  173|  5.42M|        ) else {
  174|  1.55M|            return if self.is_ending {
  175|  78.1k|                if self.position.buffer_offset == self.data.len() {
  176|  72.1k|                    None // We have finished
  177|       |                } else {
  178|  6.02k|                    let (new_line_jumps, new_line_start) =
  179|  6.02k|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  180|  6.02k|                            &self.data[self.position.buffer_offset..],
  181|  6.02k|                        );
  182|  6.02k|                    if new_line_jumps > 0 {
  183|  1.31k|                        self.position.line_start_buffer_offset =
  184|  1.31k|                            self.position.buffer_offset + new_line_start;
  185|  4.70k|                    }
  186|  6.02k|                    self.position.global_offset +=
  187|  6.02k|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  188|  6.02k|                    self.position.buffer_offset = self.data.len();
  189|  6.02k|                    self.position.global_line += new_line_jumps;
  190|  6.02k|                    let new_position = TextPosition {
  191|  6.02k|                        line: self.position.global_line,
  192|  6.02k|                        column: Self::column_from_bytes(
  193|  6.02k|                            &self.data[self.position.line_start_buffer_offset..],
  194|  6.02k|                        ),
  195|  6.02k|                        offset: self.position.global_offset,
  196|  6.02k|                    };
  197|  6.02k|                    let error = SyntaxError {
  198|  6.02k|                        location: new_position..new_position,
  199|  6.02k|                        message: "Unexpected end of file".into(),
  200|  6.02k|                    };
  201|  6.02k|                    self.position.buffer_offset = self.data.len(); // We consume everything
  202|  6.02k|                    Some(Err(error))
  203|       |                }
  204|       |            } else {
  205|  1.48M|                None
  206|       |            };
  207|       |        };
  208|       |        debug_assert!(
  209|      0|            consumed > 0,
  210|      0|            "The lexer must consume at least one byte each time"
  211|       |        );
  212|       |        debug_assert!(
  213|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  214|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  215|      0|            self.data.len() - self.position.buffer_offset
  216|       |        );
  217|  3.86M|        let (new_line_jumps, new_line_start) =
  218|  3.86M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  219|  3.86M|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  220|  3.86M|            );
  221|  3.86M|        if new_line_jumps > 0 {
  222|  4.04k|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  223|  3.86M|        }
  224|  3.86M|        self.position.buffer_offset += consumed;
  225|  3.86M|        self.position.global_offset += u64::try_from(consumed).unwrap();
  226|  3.86M|        self.position.global_line += new_line_jumps;
  227|  3.86M|        Some(result.map_err(|e| SyntaxError {
  228|       |            location: self.location_from_buffer_offset_range(e.location),
  229|       |            message: e.message,
  230|  3.86M|        }))
  231|  5.45M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  297|  5.45M|    fn skip_whitespaces_and_comments(&mut self) -> Option<()> {
  298|       |        loop {
  299|  5.45M|            self.skip_whitespaces()?;
  300|       |
  301|  5.45M|            let buf = &self.data[self.position.buffer_offset..];
  302|  5.45M|            if let Some(line_comment_start) = self.line_comment_start {
  303|  5.45M|                if buf.starts_with(line_comment_start) {
  304|       |                    // Comment
  305|  28.7k|                    if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  306|  5.53k|                        let mut end_position = line_comment_start.len() + end;
  307|  5.53k|                        if buf.get(end_position).copied() == Some(b'\r') {
  308|       |                            // We look for \n for Windows line end style
  309|  3.67k|                            if let Some(c) = buf.get(end_position + 1) {
  310|  1.01k|                                if *c == b'\n' {
  311|      0|                                    end_position += 1;
  312|  1.01k|                                }
  313|  2.66k|                            } else if !self.is_ending {
  314|  2.66k|                                return None; // We need to read more
  315|      4|                            }
  316|  1.85k|                        }
  317|  2.86k|                        let comment_size = end_position + 1;
  318|  2.86k|                        self.position.buffer_offset += comment_size;
  319|  2.86k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  320|  2.86k|                        self.position.global_offset += u64::try_from(comment_size).unwrap();
  321|  2.86k|                        self.position.global_line += 1;
  322|  2.86k|                        continue;
  323|  23.1k|                    }
  324|  23.1k|                    if self.is_ending {
  325|  1.71k|                        self.position.buffer_offset = self.data.len(); // EOF
  326|  1.71k|                        return Some(());
  327|  21.4k|                    }
  328|  21.4k|                    return None; // We need more data
  329|  5.42M|                }
  330|      0|            }
  331|  5.42M|            return Some(());
  332|       |        }
  333|  5.45M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  335|  5.45M|    fn skip_whitespaces(&mut self) -> Option<()> {
  336|  5.45M|        if self.is_line_jump_whitespace {
  337|  5.45M|            let mut i = self.position.buffer_offset;
  338|  6.02M|            while let Some(c) = self.data.get(i) {
  339|  5.38M|                match c {
  340|   395k|                    b' ' | b'\t' => {
  341|   395k|                        self.position.buffer_offset += 1;
  342|   395k|                        self.position.global_offset += 1;
  343|   395k|                    }
  344|       |                    b'\r' => {
  345|       |                        // We look for \n for Windows line end style
  346|  19.0k|                        let mut increment: u8 = 1;
  347|  19.0k|                        if let Some(c) = self.data.get(i + 1) {
  348|  16.6k|                            if *c == b'\n' {
  349|     48|                                increment += 1;
  350|     48|                                i += 1;
  351|  16.6k|                            }
  352|  2.36k|                        } else if !self.is_ending {
  353|  2.20k|                            return None; // We need to read more
  354|    154|                        }
  355|  16.8k|                        self.position.buffer_offset += usize::from(increment);
  356|  16.8k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  357|  16.8k|                        self.position.global_offset += u64::from(increment);
  358|  16.8k|                        self.position.global_line += 1;
  359|       |                    }
  360|   163k|                    b'\n' => {
  361|   163k|                        self.position.buffer_offset += 1;
  362|   163k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  363|   163k|                        self.position.global_offset += 1;
  364|   163k|                        self.position.global_line += 1;
  365|   163k|                    }
  366|  4.80M|                    _ => return Some(()),
  367|       |                }
  368|   575k|                i += 1;
  369|       |                //TODO: SIMD
  370|       |            }
  371|       |        } else {
  372|      0|            for c in &self.data[self.position.buffer_offset..] {
  373|      0|                if matches!(c, b' ' | b'\t') {
  374|      0|                    self.position.buffer_offset += 1;
  375|      0|                    self.position.global_offset += 1;
  376|      0|                } else {
  377|      0|                    return Some(());
  378|       |                }
  379|       |                //TODO: SIMD
  380|       |            }
  381|       |        }
  382|   647k|        Some(())
  383|  5.45M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE33location_from_buffer_offset_rangeB9_:
  233|  2.00M|    pub fn location_from_buffer_offset_range(
  234|  2.00M|        &self,
  235|  2.00M|        offset_range: Range<usize>,
  236|  2.00M|    ) -> Range<TextPosition> {
  237|  2.00M|        let start_offset = self.previous_position.buffer_offset + offset_range.start;
  238|  2.00M|        let (start_extra_line_jumps, start_line_start) =
  239|  2.00M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  240|  2.00M|                &self.data[self.previous_position.buffer_offset..start_offset],
  241|  2.00M|            );
  242|  2.00M|        let start_line_start = if start_extra_line_jumps > 0 {
  243|  1.39k|            start_line_start + self.previous_position.buffer_offset
  244|       |        } else {
  245|  2.00M|            self.previous_position.line_start_buffer_offset
  246|       |        };
  247|  2.00M|        let end_offset = self.previous_position.buffer_offset + offset_range.end;
  248|  2.00M|        let (end_extra_line_jumps, end_line_start) =
  249|  2.00M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  250|  2.00M|                &self.data[self.previous_position.buffer_offset..end_offset],
  251|  2.00M|            );
  252|  2.00M|        let end_line_start = if end_extra_line_jumps > 0 {
  253|  3.02k|            end_line_start + self.previous_position.buffer_offset
  254|       |        } else {
  255|  2.00M|            self.previous_position.line_start_buffer_offset
  256|       |        };
  257|  2.00M|        TextPosition {
  258|  2.00M|            line: self.previous_position.global_line + start_extra_line_jumps,
  259|  2.00M|            column: Self::column_from_bytes(&self.data[start_line_start..start_offset]),
  260|  2.00M|            offset: self.previous_position.global_offset
  261|  2.00M|                + u64::try_from(offset_range.start).unwrap(),
  262|  2.00M|        }..TextPosition {
  263|  2.00M|            line: self.previous_position.global_line + end_extra_line_jumps,
  264|  2.00M|            column: Self::column_from_bytes(&self.data[end_line_start..end_offset]),
  265|  2.00M|            offset: self.previous_position.global_offset + u64::try_from(offset_range.end).unwrap(),
  266|  2.00M|        }
  267|  2.00M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE11shrink_dataB9_:
  385|  1.51M|    fn shrink_data(&mut self) {
  386|  1.51M|        if self.position.line_start_buffer_offset > 0 {
  387|  17.8k|            self.data
  388|  17.8k|                .copy_within(self.position.line_start_buffer_offset.., 0);
  389|  17.8k|            self.data
  390|  17.8k|                .truncate(self.data.len() - self.position.line_start_buffer_offset);
  391|  17.8k|            self.position.buffer_offset -= self.position.line_start_buffer_offset;
  392|  17.8k|            self.position.line_start_buffer_offset = 0;
  393|  17.8k|            self.previous_position = self.position;
  394|  1.50M|        }
  395|  1.51M|    }
_RNvXs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCsl2lhD68vXAd_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejENtNtCsdBW21Yiwikk_5alloc6string6StringEE4fromB8_:
   41|  24.0k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  24.0k|        (*location.start()..*location.end() + 1, message).into()
   43|  24.0k|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3endB9_:
  109|  24.0k|    pub fn end(&mut self) {
  110|  24.0k|        self.is_ending = true;
  111|  24.0k|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17last_token_sourceB9_:
  286|   129k|    pub fn last_token_source(&self) -> Cow<'_, str> {
  287|   129k|        String::from_utf8_lossy(
  288|   129k|            &self.data[self.previous_position.buffer_offset..self.position.buffer_offset],
  289|   129k|        )
  290|   129k|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17column_from_bytesB9_:
  417|  6.27M|    fn column_from_bytes(bytes: &[u8]) -> u64 {
  418|  6.27M|        match str::from_utf8(bytes) {
  419|  2.55M|            Ok(s) => u64::try_from(s.chars().count()).unwrap(),
  420|  3.72M|            Err(e) => {
  421|  3.72M|                if e.valid_up_to() == 0 {
  422|  1.72M|                    0
  423|       |                } else {
  424|  1.99M|                    Self::column_from_bytes(&bytes[..e.valid_up_to()])
  425|       |                }
  426|       |            }
  427|       |        }
  428|  6.27M|    }
_RNvXNtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCsl2lhD68vXAd_4core7convert4FromTINtNtNtB1a_3ops5range5RangejEReEE4fromB6_:
   31|   880k|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|   880k|        Self {
   33|   880k|            location,
   34|   880k|            message: message.into(),
   35|   880k|        }
   36|   880k|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE6is_endB9_:
  292|  1.57M|    pub fn is_end(&self) -> bool {
  293|  1.57M|        self.is_ending && self.data.len() == self.position.buffer_offset
  294|  1.57M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3newB9_:
   73|  36.0k|    pub fn new(
   74|  36.0k|        parser: R,
   75|  36.0k|        min_buffer_size: usize,
   76|  36.0k|        max_buffer_size: usize,
   77|  36.0k|        is_line_jump_whitespace: bool,
   78|  36.0k|        line_comment_start: Option<&'static [u8]>,
   79|  36.0k|    ) -> Self {
   80|  36.0k|        Self {
   81|  36.0k|            parser,
   82|  36.0k|            data: Vec::new(),
   83|  36.0k|            position: Position {
   84|  36.0k|                line_start_buffer_offset: 0,
   85|  36.0k|                buffer_offset: 0,
   86|  36.0k|                global_offset: 0,
   87|  36.0k|                global_line: 0,
   88|  36.0k|            },
   89|  36.0k|            previous_position: Position {
   90|  36.0k|                line_start_buffer_offset: 0,
   91|  36.0k|                buffer_offset: 0,
   92|  36.0k|                global_offset: 0,
   93|  36.0k|                global_line: 0,
   94|  36.0k|            },
   95|  36.0k|            is_ending: false,
   96|  36.0k|            min_buffer_size,
   97|  36.0k|            max_buffer_size,
   98|  36.0k|            is_line_jump_whitespace,
   99|  36.0k|            line_comment_start,
  100|  36.0k|        }
  101|  36.0k|    }
_RNvXs0_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerNtB5_20TokenRecognizerErrorINtNtCsl2lhD68vXAd_4core7convert4FromTjNtNtCsdBW21Yiwikk_5alloc6string6StringEE4fromB9_:
   47|  9.42k|    fn from((location, message): (usize, S)) -> Self {
   48|  9.42k|        (location..=location, message).into()
   49|  9.42k|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17extend_from_sliceB9_:
  103|  1.48M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  104|  1.48M|        self.shrink_data();
  105|  1.48M|        self.data.extend_from_slice(other);
  106|  1.48M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE19last_token_locationB9_:
  269|   129k|    pub fn last_token_location(&self) -> Range<TextPosition> {
  270|   129k|        TextPosition {
  271|   129k|            line: self.previous_position.global_line,
  272|   129k|            column: Self::column_from_bytes(
  273|   129k|                &self.data[self.previous_position.line_start_buffer_offset
  274|   129k|                    ..self.previous_position.buffer_offset],
  275|   129k|            ),
  276|   129k|            offset: self.previous_position.global_offset,
  277|   129k|        }..TextPosition {
  278|   129k|            line: self.position.global_line,
  279|   129k|            column: Self::column_from_bytes(
  280|   129k|                &self.data[self.position.line_start_buffer_offset..self.position.buffer_offset],
  281|   129k|            ),
  282|   129k|            offset: self.position.global_offset,
  283|   129k|        }
  284|   129k|    }

_RINvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB5_6ParserNtNtB9_5terse14TriGRecognizerE10parse_readRShECs9jqYw0Nmepu_4trig:
  123|  12.0k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadIterator<R, RR> {
  124|  12.0k|        FromReadIterator { read, parser: self }
  125|  12.0k|    }
_RNvXs0_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB5_16FromReadIteratorRShNtNtB9_5terse14TriGRecognizerENtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4nextCs9jqYw0Nmepu_4trig:
  145|   132k|    fn next(&mut self) -> Option<Self::Item> {
  146|   161k|        while !self.parser.is_end() {
  147|   149k|            if let Some(result) = self.parser.read_next() {
  148|   120k|                return Some(result.map_err(ParseError::Syntax));
  149|  28.7k|            }
  150|  28.7k|            if let Err(e) = self.parser.lexer.extend_from_read(&mut self.read) {
  151|      0|                return Some(Err(e.into()));
  152|  28.7k|            }
  153|       |        }
  154|  12.0k|        None
  155|   132k|    }
_RNvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE3endB8_:
   71|  24.0k|    pub fn end(&mut self) {
   72|  24.0k|        self.lexer.end()
   73|  24.0k|    }
_RNCNvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB6_6ParserNtNtBa_5terse14TriGRecognizerE9read_next0Ba_:
   96|  1.85M|                        self.state = self.state.take().map(|state| {
   97|  1.85M|                            state.recognize_next(
   98|  1.85M|                                token,
   99|  1.85M|                                &mut self.context,
  100|  1.85M|                                &mut self.results,
  101|  1.85M|                                &mut self.errors,
  102|  1.85M|                            )
  103|  1.85M|                        });
_RNvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE6is_endB8_:
   76|   185k|    pub fn is_end(&self) -> bool {
   77|   185k|        self.state.is_none() && self.results.is_empty() && self.errors.is_empty()
   78|   185k|    }
_RNvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE9read_nextB8_:
   80|  4.04M|    pub fn read_next(&mut self) -> Option<Result<RR::Output, SyntaxError>> {
   81|       |        loop {
   82|  5.94M|            if let Some(error) = self.errors.pop() {
   83|   129k|                return Some(Err(SyntaxError {
   84|   129k|                    location: self.lexer.last_token_location(),
   85|   129k|                    message: error
   86|   129k|                        .message
   87|   129k|                        .replace("TOKEN", &self.lexer.last_token_source()),
   88|   129k|                }));
   89|  5.81M|            }
   90|  5.81M|            if let Some(result) = self.results.pop() {
   91|   362k|                return Some(Ok(result));
   92|  5.45M|            }
   93|  5.45M|            if let Some(result) = self.lexer.read_next(RR::lexer_options(&self.context)) {
   94|  3.87M|                match result {
   95|  1.85M|                    Ok(token) => {
   96|  1.85M|                        self.state = self.state.take().map(|state| {
   97|       |                            state.recognize_next(
   98|       |                                token,
   99|       |                                &mut self.context,
  100|       |                                &mut self.results,
  101|       |                                &mut self.errors,
  102|       |                            )
  103|  1.85M|                        });
  104|  1.85M|                        continue;
  105|       |                    }
  106|  2.01M|                    Err(e) => {
  107|  2.01M|                        self.state = self.state.take().map(RR::error_recovery_state);
  108|  2.01M|                        return Some(Err(e));
  109|       |                    }
  110|       |                }
  111|  1.57M|            }
  112|  1.57M|            if self.lexer.is_end() {
  113|  72.1k|                let Some(state) = self.state.take() else {
  114|  36.0k|                    return None;
  115|       |                };
  116|  36.0k|                state.recognize_end(&mut self.context, &mut self.results, &mut self.errors)
  117|       |            } else {
  118|  1.50M|                return None;
  119|       |            }
  120|       |        }
  121|  4.04M|    }
_RNvXNtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCsl2lhD68vXAd_4core7convert4FromNtNtCsdBW21Yiwikk_5alloc6string6StringE4fromB6_:
   39|  2.20k|    fn from(message: S) -> Self {
   40|  2.20k|        Self {
   41|  2.20k|            message: message.into(),
   42|  2.20k|        }
   43|  2.20k|    }
_RNvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE3newB8_:
   56|  36.0k|    pub fn new(lexer: Lexer<RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   57|  36.0k|        Self {
   58|  36.0k|            lexer,
   59|  36.0k|            state: Some(recognizer),
   60|  36.0k|            context,
   61|  36.0k|            results: vec![],
   62|  36.0k|            errors: vec![],
   63|  36.0k|        }
   64|  36.0k|    }
_RNvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE17extend_from_sliceB8_:
   66|  1.48M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
   67|  1.48M|        self.lexer.extend_from_slice(other)
   68|  1.48M|    }
_RNvXNtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCsl2lhD68vXAd_4core7convert4FromReE4fromB6_:
   39|   127k|    fn from(message: S) -> Self {
   40|   127k|        Self {
   41|   127k|            message: message.into(),
   42|   127k|        }
   43|   127k|    }

_RNvMs2_NtCs4WjTcpTVJQo_5oxttl4trigNtB5_14TriGSerializer3newCs9jqYw0Nmepu_4trig:
  459|  12.0k|    pub fn new() -> Self {
  460|  12.0k|        Self
  461|  12.0k|    }
_RNvMNtCs4WjTcpTVJQo_5oxttl4trigNtB2_10TriGParser3newCs9jqYw0Nmepu_4trig:
   54|  36.0k|    pub fn new() -> Self {
   55|  36.0k|        Self::default()
   56|  36.0k|    }
_RNvXs6_NtCs4WjTcpTVJQo_5oxttl4trigNtB5_10TriGParserNtNtCsl2lhD68vXAd_4core7default7Default7defaultCs9jqYw0Nmepu_4trig:
   42|  36.0k|#[derive(Default)]
_RNvMNtCs4WjTcpTVJQo_5oxttl4trigNtB2_10TriGParser19with_quoted_triplesCs9jqYw0Nmepu_4trig:
   78|  36.0k|    pub fn with_quoted_triples(mut self) -> Self {
   79|  36.0k|        self.with_quoted_triples = true;
   80|  36.0k|        self
   81|  36.0k|    }
_RINvMs2_NtCs4WjTcpTVJQo_5oxttl4trigNtB6_14TriGSerializer18serialize_to_writeINtNtCsdBW21Yiwikk_5alloc3vec3VechEECs9jqYw0Nmepu_4trig:
  482|  12.0k|    pub fn serialize_to_write<W: Write>(self, write: W) -> ToWriteTriGWriter<W> {
  483|  12.0k|        ToWriteTriGWriter {
  484|  12.0k|            write,
  485|  12.0k|            writer: self.serialize(),
  486|  12.0k|        }
  487|  12.0k|    }
_RNvMs3_NtCs4WjTcpTVJQo_5oxttl4trigINtB5_17ToWriteTriGWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE6finishCs9jqYw0Nmepu_4trig:
  585|  12.0k|    pub fn finish(mut self) -> io::Result<W> {
  586|  12.0k|        self.writer.finish(&mut self.write)?;
  587|  12.0k|        Ok(self.write)
  588|  12.0k|    }
_RINvMNtCs4WjTcpTVJQo_5oxttl4trigNtB3_10TriGParser13with_base_iriReECs9jqYw0Nmepu_4trig:
   59|  24.0k|    pub fn with_base_iri(mut self, base_iri: impl Into<String>) -> Result<Self, IriParseError> {
   60|  24.0k|        self.base = Some(Iri::parse(base_iri.into())?);
   61|  24.0k|        Ok(self)
   62|  24.0k|    }
_RINvMs4_NtCs4WjTcpTVJQo_5oxttl4trigNtB6_18LowLevelTriGWriter6finishQINtNtCsdBW21Yiwikk_5alloc3vec3VechEECs9jqYw0Nmepu_4trig:
  745|  12.0k|    pub fn finish(&mut self, mut write: impl Write) -> io::Result<()> {
  746|  12.0k|        if self.current_subject_predicate.is_some() {
  747|  3.18k|            writeln!(write, " .")?;
  748|  8.83k|        }
  749|  12.0k|        if !self.current_graph_name.is_default_graph() {
  750|     83|            writeln!(write, "}}")?;
  751|  11.9k|        }
  752|  12.0k|        Ok(())
  753|  12.0k|    }
_RINvMNtCs4WjTcpTVJQo_5oxttl4trigNtB3_10TriGParser10parse_readRShECs9jqYw0Nmepu_4trig:
  108|  12.0k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadTriGReader<R> {
  109|  12.0k|        FromReadTriGReader {
  110|  12.0k|            inner: self.parse().parser.parse_read(read),
  111|  12.0k|        }
  112|  12.0k|    }
_RINvMs4_NtCs4WjTcpTVJQo_5oxttl4trigNtB6_18LowLevelTriGWriter10write_quadRNtNtCsbrE1BkJ52QU_5oxrdf6triple4QuadQINtNtCsdBW21Yiwikk_5alloc3vec3VechEECs9jqYw0Nmepu_4trig:
  668|   120k|    pub fn write_quad<'a>(
  669|   120k|        &mut self,
  670|   120k|        q: impl Into<QuadRef<'a>>,
  671|   120k|        mut write: impl Write,
  672|   120k|    ) -> io::Result<()> {
  673|   120k|        let q = q.into();
  674|   120k|        if q.graph_name == self.current_graph_name.as_ref() {
  675|   117k|            if let Some((current_subject, current_predicate)) =
  676|   120k|                self.current_subject_predicate.take()
  677|       |            {
  678|   117k|                if q.subject == current_subject.as_ref() {
  679|  12.8k|                    if q.predicate == current_predicate {
  680|    211|                        self.current_subject_predicate = Some((current_subject, current_predicate));
  681|    211|                        write!(write, " , {}", TurtleTerm(q.object))
  682|       |                    } else {
  683|  12.6k|                        self.current_subject_predicate =
  684|  12.6k|                            Some((current_subject, q.predicate.into_owned()));
  685|  12.6k|                        writeln!(write, " ;")?;
  686|  12.6k|                        if !self.current_graph_name.is_default_graph() {
  687|     88|                            write!(write, "\t")?;
  688|  12.5k|                        }
  689|  12.6k|                        write!(write, "\t{} {}", q.predicate, TurtleTerm(q.object))
  690|       |                    }
  691|       |                } else {
  692|   104k|                    self.current_subject_predicate =
  693|   104k|                        Some((q.subject.into_owned(), q.predicate.into_owned()));
  694|   104k|                    writeln!(write, " .")?;
  695|   104k|                    if !self.current_graph_name.is_default_graph() {
  696|  6.74k|                        write!(write, "\t")?;
  697|  98.0k|                    }
  698|   104k|                    write!(
  699|   104k|                        write,
  700|   104k|                        "{} {} {}",
  701|   104k|                        TurtleTerm(q.subject.into()),
  702|   104k|                        q.predicate,
  703|   104k|                        TurtleTerm(q.object)
  704|   104k|                    )
  705|       |                }
  706|       |            } else {
  707|  3.10k|                self.current_subject_predicate =
  708|  3.10k|                    Some((q.subject.into_owned(), q.predicate.into_owned()));
  709|  3.10k|                if !self.current_graph_name.is_default_graph() {
  710|      0|                    write!(write, "\t")?;
  711|  3.10k|                }
  712|  3.10k|                write!(
  713|  3.10k|                    write,
  714|  3.10k|                    "{} {} {}",
  715|  3.10k|                    TurtleTerm(q.subject.into()),
  716|  3.10k|                    q.predicate,
  717|  3.10k|                    TurtleTerm(q.object)
  718|  3.10k|                )
  719|       |            }
  720|       |        } else {
  721|    113|            if self.current_subject_predicate.is_some() {
  722|     31|                writeln!(write, " .")?;
  723|     82|            }
  724|    113|            if !self.current_graph_name.is_default_graph() {
  725|     15|                writeln!(write, "}}")?;
  726|     98|            }
  727|    113|            self.current_graph_name = q.graph_name.into_owned();
  728|    113|            self.current_subject_predicate =
  729|    113|                Some((q.subject.into_owned(), q.predicate.into_owned()));
  730|    113|            if !self.current_graph_name.is_default_graph() {
  731|     98|                writeln!(write, "{} {{", q.graph_name)?;
  732|     98|                write!(write, "\t")?;
  733|     15|            }
  734|    113|            write!(
  735|    113|                write,
  736|    113|                "{} {} {}",
  737|    113|                TurtleTerm(q.subject.into()),
  738|    113|                q.predicate,
  739|    113|                TurtleTerm(q.object)
  740|    113|            )
  741|       |        }
  742|   120k|    }
_RNvXs0_NtCs4WjTcpTVJQo_5oxttl4trigINtB5_18FromReadTriGReaderRShENtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4nextCs9jqYw0Nmepu_4trig:
  262|   132k|    fn next(&mut self) -> Option<Result<Quad, ParseError>> {
  263|   132k|        self.inner.next()
  264|   132k|    }
_RINvMs3_NtCs4WjTcpTVJQo_5oxttl4trigINtB6_17ToWriteTriGWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE10write_quadRNtNtCsbrE1BkJ52QU_5oxrdf6triple4QuadECs9jqYw0Nmepu_4trig:
  580|   120k|    pub fn write_quad<'a>(&mut self, q: impl Into<QuadRef<'a>>) -> io::Result<()> {
  581|   120k|        self.writer.write_quad(q, &mut self.write)
  582|   120k|    }
_RNvXs5_NtCs4WjTcpTVJQo_5oxttl4trigNtB5_10TurtleTermNtNtCsl2lhD68vXAd_4core3fmt7Display3fmt:
  759|   228k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  760|   228k|        match self.0 {
  761|  3.75k|            TermRef::NamedNode(v) => write!(f, "{v}"),
  762|   203k|            TermRef::BlankNode(v) => write!(f, "{v}"),
  763|  21.1k|            TermRef::Literal(v) => {
  764|  21.1k|                let value = v.value();
  765|  21.1k|                let inline = match v.datatype() {
  766|  21.1k|                    xsd::BOOLEAN => is_turtle_boolean(value),
  767|  21.0k|                    xsd::INTEGER => is_turtle_integer(value),
  768|  14.0k|                    xsd::DECIMAL => is_turtle_decimal(value),
  769|  13.1k|                    xsd::DOUBLE => is_turtle_double(value),
  770|  11.7k|                    _ => false,
  771|       |                };
  772|  21.1k|                if inline {
  773|  9.43k|                    write!(f, "{value}")
  774|       |                } else {
  775|  11.7k|                    write!(f, "{v}")
  776|       |                }
  777|       |            }
  778|       |            #[cfg(feature = "rdf-star")]
  779|      0|            TermRef::Triple(t) => {
  780|      0|                write!(
  781|      0|                    f,
  782|      0|                    "<< {} {} {} >>",
  783|      0|                    TurtleTerm(t.subject.as_ref().into()),
  784|      0|                    t.predicate,
  785|      0|                    TurtleTerm(t.object.as_ref())
  786|      0|                )
  787|       |            }
  788|       |        }
  789|   228k|    }
_RNvNtCs4WjTcpTVJQo_5oxttl4trig17is_turtle_decimal:
  807|    856|fn is_turtle_decimal(value: &str) -> bool {
  808|    856|    // [20] 	DECIMAL 	::= 	[+-]? [0-9]* '.' [0-9]+
  809|    856|    let mut value = value.as_bytes();
  810|    856|    if let Some(v) = value.strip_prefix(b"+") {
  811|     63|        value = v;
  812|    793|    } else if let Some(v) = value.strip_prefix(b"-") {
  813|     14|        value = v;
  814|    779|    }
  815|  6.63k|    while value.first().map_or(false, u8::is_ascii_digit) {
  816|  5.77k|        value = &value[1..];
  817|  5.77k|    }
  818|    856|    let Some(value) = value.strip_prefix(b".") else {
  819|      0|        return false;
  820|       |    };
  821|    856|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  822|    856|}
_RNvNtCs4WjTcpTVJQo_5oxttl4trig16is_turtle_double:
  824|  1.44k|fn is_turtle_double(value: &str) -> bool {
  825|  1.44k|    // [21] 	DOUBLE 	::= 	[+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  826|  1.44k|    // [154s] 	EXPONENT 	::= 	[eE] [+-]? [0-9]+
  827|  1.44k|    let mut value = value.as_bytes();
  828|  1.44k|    if let Some(v) = value.strip_prefix(b"+") {
  829|     27|        value = v;
  830|  1.41k|    } else if let Some(v) = value.strip_prefix(b"-") {
  831|      1|        value = v;
  832|  1.41k|    }
  833|  1.44k|    let mut with_before = false;
  834|  16.2k|    while value.first().map_or(false, u8::is_ascii_digit) {
  835|  14.7k|        value = &value[1..];
  836|  14.7k|        with_before = true;
  837|  14.7k|    }
  838|  1.44k|    let mut with_after = false;
  839|  1.44k|    if let Some(v) = value.strip_prefix(b".") {
  840|    138|        value = v;
  841|  2.45k|        while value.first().map_or(false, u8::is_ascii_digit) {
  842|  2.31k|            value = &value[1..];
  843|  2.31k|            with_after = true;
  844|  2.31k|        }
  845|  1.30k|    }
  846|  1.44k|    if let Some(v) = value.strip_prefix(b"e") {
  847|     44|        value = v;
  848|  1.39k|    } else if let Some(v) = value.strip_prefix(b"E") {
  849|  1.39k|        value = v;
  850|  1.39k|    } else {
  851|      0|        return false;
  852|       |    }
  853|  1.44k|    if let Some(v) = value.strip_prefix(b"+") {
  854|      6|        value = v;
  855|  1.43k|    } else if let Some(v) = value.strip_prefix(b"-") {
  856|      3|        value = v;
  857|  1.43k|    }
  858|  1.44k|    (with_before || with_after) && !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  859|  1.44k|}
_RNvMs1_NtCs4WjTcpTVJQo_5oxttl4trigNtB5_18LowLevelTriGReader17extend_from_slice:
  380|  1.48M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  381|  1.48M|        self.parser.extend_from_slice(other)
  382|  1.48M|    }
_RNvNtCs4WjTcpTVJQo_5oxttl4trig17is_turtle_boolean:
  792|    117|fn is_turtle_boolean(value: &str) -> bool {
  793|    117|    matches!(value, "true" | "false")
  794|    117|}
_RNvMs1_NtCs4WjTcpTVJQo_5oxttl4trigNtB5_18LowLevelTriGReader3end:
  387|  24.0k|    pub fn end(&mut self) {
  388|  24.0k|        self.parser.end()
  389|  24.0k|    }
_RNvNtCs4WjTcpTVJQo_5oxttl4trig17is_turtle_integer:
  796|  7.02k|fn is_turtle_integer(value: &str) -> bool {
  797|  7.02k|    // [19] 	INTEGER 	::= 	[+-]? [0-9]+
  798|  7.02k|    let mut value = value.as_bytes();
  799|  7.02k|    if let Some(v) = value.strip_prefix(b"+") {
  800|    351|        value = v;
  801|  6.67k|    } else if let Some(v) = value.strip_prefix(b"-") {
  802|     68|        value = v;
  803|  6.60k|    }
  804|  7.02k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  805|  7.02k|}
_RNvMs1_NtCs4WjTcpTVJQo_5oxttl4trigNtB5_18LowLevelTriGReader6is_end:
  392|  24.0k|    pub fn is_end(&self) -> bool {
  393|  24.0k|        self.parser.is_end()
  394|  24.0k|    }
_RNvMNtCs4WjTcpTVJQo_5oxttl4trigNtB2_10TriGParser5parse:
  189|  36.0k|    pub fn parse(self) -> LowLevelTriGReader {
  190|  36.0k|        LowLevelTriGReader {
  191|  36.0k|            parser: TriGRecognizer::new_parser(
  192|  36.0k|                true,
  193|  36.0k|                #[cfg(feature = "rdf-star")]
  194|  36.0k|                self.with_quoted_triples,
  195|  36.0k|                self.base,
  196|  36.0k|                self.prefixes,
  197|  36.0k|            ),
  198|  36.0k|        }
  199|  36.0k|    }
_RNvMs1_NtCs4WjTcpTVJQo_5oxttl4trigNtB5_18LowLevelTriGReader9read_next:
  400|  3.89M|    pub fn read_next(&mut self) -> Option<Result<Quad, SyntaxError>> {
  401|  3.89M|        self.parser.read_next()
  402|  3.89M|    }
_RNvMs2_NtCs4WjTcpTVJQo_5oxttl4trigNtB5_14TriGSerializer9serialize:
  545|  12.0k|    pub fn serialize(&self) -> LowLevelTriGWriter {
  546|  12.0k|        LowLevelTriGWriter {
  547|  12.0k|            current_graph_name: GraphName::DefaultGraph,
  548|  12.0k|            current_subject_predicate: None,
  549|  12.0k|        }
  550|  12.0k|    }


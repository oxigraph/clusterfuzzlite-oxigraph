_RNvCs8nngr1K8oaO_9getrandom16getrandom_uninitCsddgTNow8fmN_9rand_core:
  344|     92|pub fn getrandom_uninit(dest: &mut [MaybeUninit<u8>]) -> Result<&mut [u8], Error> {
  345|     92|    if !dest.is_empty() {
  346|     92|        imp::getrandom_inner(dest)?;
  347|      0|    }
  348|       |    // SAFETY: `dest` has been fully initialized by `imp::getrandom_inner`
  349|       |    // since it returned `Ok`.
  350|     92|    Ok(unsafe { slice_assume_init_mut(dest) })
  351|     92|}
_RNvCs8nngr1K8oaO_9getrandom9getrandomCsddgTNow8fmN_9rand_core:
  314|     92|pub fn getrandom(dest: &mut [u8]) -> Result<(), Error> {
  315|     92|    // SAFETY: The `&mut MaybeUninit<_>` reference doesn't escape, and
  316|     92|    // `getrandom_uninit` guarantees it will never de-initialize any part of
  317|     92|    // `dest`.
  318|     92|    getrandom_uninit(unsafe { slice_as_uninit_mut(dest) })?;
  319|     92|    Ok(())
  320|     92|}

_RNvNtCs8nngr1K8oaO_9getrandom3imp15getrandom_inner:
   17|     92|pub fn getrandom_inner(dest: &mut [MaybeUninit<u8>]) -> Result<(), Error> {
   18|     92|    // getrandom(2) was introduced in Linux 3.17
   19|     92|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   20|     92|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   21|     92|        sys_fill_exact(dest, |buf| unsafe {
   22|       |            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   23|     92|        })
   24|       |    } else {
   25|      0|        use_file::getrandom_inner(dest)
   26|       |    }
   27|     92|}
_RNCNvNtCs8nngr1K8oaO_9getrandom3imp15getrandom_inner0B5_:
   21|     92|        sys_fill_exact(dest, |buf| unsafe {
   22|     92|            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   23|     92|        })
_RNvNtCs8nngr1K8oaO_9getrandom3imp22is_getrandom_available:
   29|      1|fn is_getrandom_available() -> bool {
   30|      1|    let res = unsafe { getrandom(core::ptr::null_mut(), 0, libc::GRND_NONBLOCK) };
   31|      1|    if res < 0 {
   32|      0|        match last_os_error().raw_os_error() {
   33|      0|            Some(libc::ENOSYS) => false, // No kernel support
   34|      0|            Some(libc::EPERM) => false,  // Blocked by seccomp
   35|      0|            _ => true,
   36|       |        }
   37|       |    } else {
   38|      1|        true
   39|       |    }
   40|      1|}
_RNvNtCs8nngr1K8oaO_9getrandom3imp9getrandom:
   42|     93|unsafe fn getrandom(
   43|     93|    buf: *mut libc::c_void,
   44|     93|    buflen: libc::size_t,
   45|     93|    flags: libc::c_uint,
   46|     93|) -> libc::ssize_t {
   47|     93|    libc::syscall(libc::SYS_getrandom, buf, buflen, flags) as libc::ssize_t
   48|     93|}

_RINvNtCs8nngr1K8oaO_9getrandom4util19slice_as_uninit_muthECsddgTNow8fmN_9rand_core:
   98|     92|pub unsafe fn slice_as_uninit_mut<T>(slice: &mut [T]) -> &mut [MaybeUninit<T>] {
   99|     92|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
  100|     92|    &mut *(slice as *mut [T] as *mut [MaybeUninit<T>])
  101|     92|}
_RINvNtCs8nngr1K8oaO_9getrandom4util21slice_assume_init_muthECsddgTNow8fmN_9rand_core:
   74|     92|pub unsafe fn slice_assume_init_mut<T>(slice: &mut [MaybeUninit<T>]) -> &mut [T] {
   75|     92|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   76|     92|    &mut *(slice as *mut [MaybeUninit<T>] as *mut [T])
   77|     92|}
_RINvMNtCs8nngr1K8oaO_9getrandom4utilNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   46|     92|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   47|     92|        // Relaxed ordering is fine, as we only have a single atomic variable.
   48|     92|        let mut val = self.0.load(Relaxed);
   49|     92|        if val == Self::UNINIT {
   50|      1|            val = init();
   51|      1|            self.0.store(val, Relaxed);
   52|     91|        }
   53|     92|        val
   54|     92|    }
_RINvMs_NtCs8nngr1K8oaO_9getrandom4utilNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   65|     92|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   66|     92|        self.0.unsync_init(|| init() as usize) != 0
   67|     92|    }
_RNCINvMs_NtCs8nngr1K8oaO_9getrandom4utilNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   66|      1|        self.0.unsync_init(|| init() as usize) != 0

_RINvNtCs8nngr1K8oaO_9getrandom9util_libc14sys_fill_exactNCNvNtB4_3imp15getrandom_inner0EB4_:
   67|     92|pub fn sys_fill_exact(
   68|     92|    mut buf: &mut [MaybeUninit<u8>],
   69|     92|    sys_fill: impl Fn(&mut [MaybeUninit<u8>]) -> libc::ssize_t,
   70|     92|) -> Result<(), Error> {
   71|    184|    while !buf.is_empty() {
   72|     92|        let res = sys_fill(buf);
   73|     92|        if res < 0 {
   74|      0|            let err = last_os_error();
   75|      0|            // We should try again if the call was interrupted.
   76|      0|            if err.raw_os_error() != Some(libc::EINTR) {
   77|      0|                return Err(err);
   78|      0|            }
   79|     92|        } else {
   80|     92|            // We don't check for EOF (ret = 0) as the data we are reading
   81|     92|            // should be an infinite stream of random bytes.
   82|     92|            let len = min(res as usize, buf.len());
   83|     92|            buf = &mut buf[len..];
   84|     92|        }
   85|       |    }
   86|     92|    Ok(())
   87|     92|}

rust_fuzzer_test_input:
  209|  4.67k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  4.67k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  4.67k|                }
  223|  4.67k|
  224|  4.67k|                __libfuzzer_sys_run(bytes);
  225|  4.67k|                0
  226|  4.67k|            }
_RNvNvCsa1xq2UewJGb_4trig1__19___libfuzzer_sys_run:
  241|  4.67k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|  4.67k|            }
LLVMFuzzerTestOneInput:
   58|  4.67k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  4.67k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  4.67k|    });
   63|  4.67k|
   64|  4.67k|    match test_input {
   65|  4.67k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  4.67k|}
_RNCNvCs1VO2i0pKgPs_13libfuzzer_sys15test_input_wrap0B3_:
   59|  4.67k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  4.67k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  4.67k|        rust_fuzzer_test_input(data_slice)
   62|  4.67k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvMs3_NtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCsd3ZSx5keFHB_4core4iter6traits8iterator8Iterator4next0ECs70uHazZwt5R_5oxttl:
 1044|  4.72M|    pub(crate) unsafe fn next(
 1045|  4.72M|        &mut self,
 1046|  4.72M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  4.72M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  4.72M|        let found = find_raw(self.start, self.end)?;
 1057|  14.9k|        let result = found.distance(self.original_start);
 1058|  14.9k|        self.start = found.add(1);
 1059|  14.9k|        Some(result)
 1060|  4.72M|    }
_RINvNtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECs70uHazZwt5R_5oxttl:
 1125|  15.1k|pub(crate) unsafe fn search_slice_with_raw(
 1126|  15.1k|    haystack: &[u8],
 1127|  15.1k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  15.1k|) -> Option<usize> {
 1129|  15.1k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  15.1k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  15.1k|    // a &[u8].
 1132|  15.1k|    let start = haystack.as_ptr();
 1133|  15.1k|    let end = start.add(haystack.len());
 1134|  15.1k|    let found = find_raw(start, end)?;
 1135|    987|    Some(found.distance(start))
 1136|  15.1k|}
_RINvNtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr7memchr20ECs70uHazZwt5R_5oxttl:
 1125|   580k|pub(crate) unsafe fn search_slice_with_raw(
 1126|   580k|    haystack: &[u8],
 1127|   580k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|   580k|) -> Option<usize> {
 1129|   580k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|   580k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|   580k|    // a &[u8].
 1132|   580k|    let start = haystack.as_ptr();
 1133|   580k|    let end = start.add(haystack.len());
 1134|   580k|    let found = find_raw(start, end)?;
 1135|   420k|    Some(found.distance(start))
 1136|   580k|}
_RNvMs3_NtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  4.71M|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  4.71M|        Iter {
 1029|  4.71M|            original_start: haystack.as_ptr(),
 1030|  4.71M|            start: haystack.as_ptr(),
 1031|  4.71M|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  4.71M|            haystack: core::marker::PhantomData,
 1033|  4.71M|        }
 1034|  4.71M|    }
_RNvMNtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iE7needle1B8_:
  117|  31.0k|    pub(crate) fn needle1(&self) -> u8 {
  118|  31.0k|        self.s1
  119|  31.0k|    }
_RNvMNtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iE3newB8_:
  111|  15.1k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  15.1k|        One { s1: needle, v1: V::splat(needle) }
  113|  15.1k|    }
_RNvMNtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m256iE3newB8_:
  111|  15.1k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  15.1k|        One { s1: needle, v1: V::splat(needle) }
  113|  15.1k|    }
_RNvMNtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  3.11k|    pub(crate) unsafe fn find_raw(
  144|  3.11k|        &self,
  145|  3.11k|        start: *const u8,
  146|  3.11k|        end: *const u8,
  147|  3.11k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  3.11k|        let topos = V::Mask::first_offset;
  155|  3.11k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  3.11k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|     84|            return Some(cur);
  167|  3.02k|        }
  168|  3.02k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  3.02k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  3.02k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  3.02k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  4.25k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  1.25k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|     32|                return Some(cur);
  216|  1.22k|            }
  217|  1.22k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  2.99k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  2.65k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  2.65k|            return self.search_chunk(cur, topos);
  228|    340|        }
  229|    340|        None
  230|  3.11k|    }
_RNvMNtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  6.23k|    pub(crate) unsafe fn find_raw(
  144|  6.23k|        &self,
  145|  6.23k|        start: *const u8,
  146|  6.23k|        end: *const u8,
  147|  6.23k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  6.23k|        let topos = V::Mask::first_offset;
  155|  6.23k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  6.23k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|    182|            return Some(cur);
  167|  6.05k|        }
  168|  6.05k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  6.05k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  6.05k|        if len >= Self::LOOP_SIZE {
  172|  4.70k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|  2.30k|                let a = V::load_aligned(cur);
  176|  2.30k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|  2.30k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|  2.30k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|  2.30k|                let eqa = self.v1.cmpeq(a);
  180|  2.30k|                let eqb = self.v1.cmpeq(b);
  181|  2.30k|                let eqc = self.v1.cmpeq(c);
  182|  2.30k|                let eqd = self.v1.cmpeq(d);
  183|  2.30k|                let or1 = eqa.or(eqb);
  184|  2.30k|                let or2 = eqc.or(eqd);
  185|  2.30k|                let or3 = or1.or(or2);
  186|  2.30k|                if or3.movemask_will_have_non_zero() {
  187|    190|                    let mask = eqa.movemask();
  188|    190|                    if mask.has_non_zero() {
  189|     48|                        return Some(cur.add(topos(mask)));
  190|    142|                    }
  191|    142|
  192|    142|                    let mask = eqb.movemask();
  193|    142|                    if mask.has_non_zero() {
  194|     69|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|     73|                    }
  196|     73|
  197|     73|                    let mask = eqc.movemask();
  198|     73|                    if mask.has_non_zero() {
  199|     46|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|     27|                    }
  201|     27|
  202|     27|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|     27|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  2.11k|                }
  206|  2.11k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  3.46k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  12.8k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  7.16k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    137|                return Some(cur);
  216|  7.02k|            }
  217|  7.02k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  5.72k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  5.34k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  5.34k|            return self.search_chunk(cur, topos);
  228|    382|        }
  229|    382|        None
  230|  6.23k|    }
_RINvMNtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  7.02k|    unsafe fn search_chunk(
  417|  7.02k|        &self,
  418|  7.02k|        cur: *const u8,
  419|  7.02k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  7.02k|    ) -> Option<*const u8> {
  421|  7.02k|        let chunk = V::load_unaligned(cur);
  422|  7.02k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  7.02k|        if mask.has_non_zero() {
  424|    161|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  6.86k|            None
  427|       |        }
  428|  7.02k|    }
_RINvMNtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  18.7k|    unsafe fn search_chunk(
  417|  18.7k|        &self,
  418|  18.7k|        cur: *const u8,
  419|  18.7k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  18.7k|    ) -> Option<*const u8> {
  421|  18.7k|        let chunk = V::load_unaligned(cur);
  422|  18.7k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  18.7k|        if mask.has_non_zero() {
  424|    472|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  18.2k|            None
  427|       |        }
  428|  18.7k|    }
_RNvMs_NtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iE3newBa_:
  450|  5.30M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  5.30M|        Two {
  452|  5.30M|            s1: needle1,
  453|  5.30M|            s2: needle2,
  454|  5.30M|            v1: V::splat(needle1),
  455|  5.30M|            v2: V::splat(needle2),
  456|  5.30M|        }
  457|  5.30M|    }
_RNvMs_NtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m256iE3newBa_:
  450|  5.30M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  5.30M|        Two {
  452|  5.30M|            s1: needle1,
  453|  5.30M|            s2: needle2,
  454|  5.30M|            v1: V::splat(needle1),
  455|  5.30M|            v2: V::splat(needle2),
  456|  5.30M|        }
  457|  5.30M|    }
_RNvMs_NtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  5.99M|    pub(crate) fn needle1(&self) -> u8 {
  462|  5.99M|        self.s1
  463|  5.99M|    }
_RNvMs_NtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  5.96M|    pub(crate) fn needle2(&self) -> u8 {
  468|  5.96M|        self.s2
  469|  5.96M|    }
_RNvMs_NtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iE8find_rawBa_:
  493|  98.7k|    pub(crate) unsafe fn find_raw(
  494|  98.7k|        &self,
  495|  98.7k|        start: *const u8,
  496|  98.7k|        end: *const u8,
  497|  98.7k|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  98.7k|        let topos = V::Mask::first_offset;
  505|  98.7k|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  98.7k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  27.3k|            return Some(cur);
  517|  71.3k|        }
  518|  71.3k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  71.3k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  71.3k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|  71.3k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  95.0k|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  24.7k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  1.03k|                return Some(cur);
  554|  23.7k|            }
  555|  23.7k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|  70.3k|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|  65.7k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|  65.7k|            return self.search_chunk(cur, topos);
  566|  4.63k|        }
  567|  4.63k|        None
  568|  98.7k|    }
_RNvMs_NtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m256iE8find_rawBa_:
  493|   595k|    pub(crate) unsafe fn find_raw(
  494|   595k|        &self,
  495|   595k|        start: *const u8,
  496|   595k|        end: *const u8,
  497|   595k|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   595k|        let topos = V::Mask::first_offset;
  505|   595k|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   595k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   258k|            return Some(cur);
  517|   337k|        }
  518|   337k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   337k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   337k|        if len >= Self::LOOP_SIZE {
  522|   233k|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|   180k|                let a = V::load_aligned(cur);
  526|   180k|                let b = V::load_aligned(cur.add(V::BYTES));
  527|   180k|                let eqa1 = self.v1.cmpeq(a);
  528|   180k|                let eqb1 = self.v1.cmpeq(b);
  529|   180k|                let eqa2 = self.v2.cmpeq(a);
  530|   180k|                let eqb2 = self.v2.cmpeq(b);
  531|   180k|                let or1 = eqa1.or(eqb1);
  532|   180k|                let or2 = eqa2.or(eqb2);
  533|   180k|                let or3 = or1.or(or2);
  534|   180k|                if or3.movemask_will_have_non_zero() {
  535|  77.3k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|  77.3k|                    if mask.has_non_zero() {
  537|  39.4k|                        return Some(cur.add(topos(mask)));
  538|  37.9k|                    }
  539|  37.9k|
  540|  37.9k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|  37.9k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|   103k|                }
  544|   103k|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   206k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   345k|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  88.0k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  2.64k|                return Some(cur);
  554|  85.4k|            }
  555|  85.4k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   257k|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   249k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   249k|            return self.search_chunk(cur, topos);
  566|  7.64k|        }
  567|  7.64k|        None
  568|   595k|    }
_RINvMs_NtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|   189k|    unsafe fn search_chunk(
  671|   189k|        &self,
  672|   189k|        cur: *const u8,
  673|   189k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|   189k|    ) -> Option<*const u8> {
  675|   189k|        let chunk = V::load_unaligned(cur);
  676|   189k|        let eq1 = self.v1.cmpeq(chunk);
  677|   189k|        let eq2 = self.v2.cmpeq(chunk);
  678|   189k|        let mask = eq1.or(eq2).movemask();
  679|   189k|        if mask.has_non_zero() {
  680|  30.5k|            let mask1 = eq1.movemask();
  681|  30.5k|            let mask2 = eq2.movemask();
  682|  30.5k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|   158k|            None
  685|       |        }
  686|   189k|    }
_RINvMs_NtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|   932k|    unsafe fn search_chunk(
  671|   932k|        &self,
  672|   932k|        cur: *const u8,
  673|   932k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|   932k|    ) -> Option<*const u8> {
  675|   932k|        let chunk = V::load_unaligned(cur);
  676|   932k|        let eq1 = self.v1.cmpeq(chunk);
  677|   932k|        let eq2 = self.v2.cmpeq(chunk);
  678|   932k|        let mask = eq1.or(eq2).movemask();
  679|   932k|        if mask.has_non_zero() {
  680|   264k|            let mask1 = eq1.movemask();
  681|   264k|            let mask2 = eq2.movemask();
  682|   264k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|   668k|            None
  685|       |        }
  686|   932k|    }
_RINvNtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  4.59k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  4.59k|    start: *const u8,
 1150|  4.59k|    end: *const u8,
 1151|  4.59k|    confirm: F,
 1152|  4.59k|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  4.59k|    let mut ptr = start;
 1155|  35.5k|    while ptr < end {
 1156|  31.0k|        if confirm(*ptr) {
 1157|    164|            return Some(ptr);
 1158|  30.9k|        }
 1159|  30.9k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  4.43k|    None
 1162|  4.59k|}
_RINvNtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|  3.55M|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  3.55M|    start: *const u8,
 1150|  3.55M|    end: *const u8,
 1151|  3.55M|    confirm: F,
 1152|  3.55M|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  3.55M|    let mut ptr = start;
 1155|  9.48M|    while ptr < end {
 1156|  5.99M|        if confirm(*ptr) {
 1157|  62.8k|            return Some(ptr);
 1158|  5.92M|        }
 1159|  5.92M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  3.49M|    None
 1162|  3.55M|}

_RNvMNtNtNtNtCs87YssFN4ISD_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  15.1k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  15.1k|        One {
   71|  15.1k|            sse2: generic::One::new(needle),
   72|  15.1k|            avx2: generic::One::new(needle),
   73|  15.1k|        }
   74|  15.1k|    }
_RNvMNtNtNtNtCs87YssFN4ISD_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCs87YssFN4ISD_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  15.1k|    pub unsafe fn find_raw(
  180|  15.1k|        &self,
  181|  15.1k|        start: *const u8,
  182|  15.1k|        end: *const u8,
  183|  15.1k|    ) -> Option<*const u8> {
  184|  15.1k|        if start >= end {
  185|  1.18k|            return None;
  186|  13.9k|        }
  187|  13.9k|        let len = end.distance(start);
  188|  13.9k|        if len < __m256i::BYTES {
  189|  7.70k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  4.59k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  4.59k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  3.11k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  6.23k|        }
  201|  6.23k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  6.23k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  6.23k|        // enough to run on the vector routine. Pointer validity is caller's
  204|  6.23k|        // responsibility.
  205|  6.23k|        //
  206|  6.23k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  6.23k|        // means we'd have to annotate this routine with `target_feature`.
  208|  6.23k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  6.23k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  6.23k|        // The real problem is that a routine with a `target_feature`
  211|  6.23k|        // annotation generally can't be inlined into caller code unless
  212|  6.23k|        // the caller code has the same target feature annotations. Namely,
  213|  6.23k|        // the common case (at time of writing) is for calling code to not
  214|  6.23k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  6.23k|        // `target_feature` on this routine, it can be inlined which will
  216|  6.23k|        // handle some of the short-haystack cases above without touching the
  217|  6.23k|        // architecture specific code.
  218|  6.23k|        self.find_raw_avx2(start, end)
  219|  15.1k|    }
_RNCNvMNtNtNtNtCs87YssFN4ISD_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|  31.0k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|  31.0k|                    b == self.sse2.needle1()
  194|  31.0k|                })
_RNvMNtNtNtNtCs87YssFN4ISD_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  3.11k|    unsafe fn find_raw_sse2(
  337|  3.11k|        &self,
  338|  3.11k|        start: *const u8,
  339|  3.11k|        end: *const u8,
  340|  3.11k|    ) -> Option<*const u8> {
  341|  3.11k|        self.sse2.find_raw(start, end)
  342|  3.11k|    }
_RNvMNtNtNtNtCs87YssFN4ISD_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  6.23k|    unsafe fn find_raw_avx2(
  397|  6.23k|        &self,
  398|  6.23k|        start: *const u8,
  399|  6.23k|        end: *const u8,
  400|  6.23k|    ) -> Option<*const u8> {
  401|  6.23k|        self.avx2.find_raw(start, end)
  402|  6.23k|    }
_RNvMs2_NtNtNtNtCs87YssFN4ISD_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  5.30M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  5.30M|        Two {
  558|  5.30M|            sse2: generic::Two::new(needle1, needle2),
  559|  5.30M|            avx2: generic::Two::new(needle1, needle2),
  560|  5.30M|        }
  561|  5.30M|    }
_RNvMs2_NtNtNtNtCs87YssFN4ISD_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNvMs2_NtNtNtNtCs87YssFN4ISD_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  5.30M|    pub unsafe fn find_raw(
  655|  5.30M|        &self,
  656|  5.30M|        start: *const u8,
  657|  5.30M|        end: *const u8,
  658|  5.30M|    ) -> Option<*const u8> {
  659|  5.30M|        if start >= end {
  660|  1.06M|            return None;
  661|  4.24M|        }
  662|  4.24M|        let len = end.distance(start);
  663|  4.24M|        if len < __m256i::BYTES {
  664|  3.65M|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  3.55M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  3.55M|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|  98.7k|                self.find_raw_sse2(start, end)
  674|       |            };
  675|   595k|        }
  676|   595k|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|   595k|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|   595k|        // enough to run on the vector routine. Pointer validity is caller's
  679|   595k|        // responsibility.
  680|   595k|        //
  681|   595k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|   595k|        // means we'd have to annotate this routine with `target_feature`.
  683|   595k|        // Which is fine, because this routine is `unsafe` anyway and the
  684|   595k|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|   595k|        // The real problem is that a routine with a `target_feature`
  686|   595k|        // annotation generally can't be inlined into caller code unless
  687|   595k|        // the caller code has the same target feature annotations. Namely,
  688|   595k|        // the common case (at time of writing) is for calling code to not
  689|   595k|        // have the `avx2` target feature enabled *at compile time*. Without
  690|   595k|        // `target_feature` on this routine, it can be inlined which will
  691|   595k|        // handle some of the short-haystack cases above without touching the
  692|   595k|        // architecture specific code.
  693|   595k|        self.find_raw_avx2(start, end)
  694|  5.30M|    }
_RNCNvMs2_NtNtNtNtCs87YssFN4ISD_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  5.99M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  5.99M|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  5.99M|                })
_RNvMs2_NtNtNtNtCs87YssFN4ISD_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|  98.7k|    unsafe fn find_raw_sse2(
  765|  98.7k|        &self,
  766|  98.7k|        start: *const u8,
  767|  98.7k|        end: *const u8,
  768|  98.7k|    ) -> Option<*const u8> {
  769|  98.7k|        self.sse2.find_raw(start, end)
  770|  98.7k|    }
_RNvMs2_NtNtNtNtCs87YssFN4ISD_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|   595k|    unsafe fn find_raw_avx2(
  805|   595k|        &self,
  806|   595k|        start: *const u8,
  807|   595k|        end: *const u8,
  808|   595k|    ) -> Option<*const u8> {
  809|   595k|        self.avx2.find_raw(start, end)
  810|   595k|    }

_RNvNtNtNtCs87YssFN4ISD_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  5.30M|pub(crate) fn memchr2_raw(
  221|  5.30M|    n1: u8,
  222|  5.30M|    n2: u8,
  223|  5.30M|    start: *const u8,
  224|  5.30M|    end: *const u8,
  225|  5.30M|) -> Option<*const u8> {
  226|  5.30M|    // SAFETY: We provide a valid function pointer type.
  227|  5.30M|    unsafe_ifunc!(
  228|  5.30M|        Two,
  229|  5.30M|        find_raw,
  230|  5.30M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  5.30M|        Option<*const u8>,
  232|  5.30M|        start,
  233|  5.30M|        end,
  234|  5.30M|        n1,
  235|  5.30M|        n2
  236|  5.30M|    )
  237|  5.30M|}
_RNvNtNtNtCs87YssFN4ISD_6memchr4arch6x86_646memchr10memchr_raw:
  174|  15.1k|pub(crate) fn memchr_raw(
  175|  15.1k|    n1: u8,
  176|  15.1k|    start: *const u8,
  177|  15.1k|    end: *const u8,
  178|  15.1k|) -> Option<*const u8> {
  179|  15.1k|    // SAFETY: We provide a valid function pointer type.
  180|  15.1k|    unsafe_ifunc!(
  181|  15.1k|        One,
  182|  15.1k|        find_raw,
  183|  15.1k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  15.1k|        Option<*const u8>,
  185|  15.1k|        start,
  186|  15.1k|        end,
  187|  15.1k|        n1
  188|  15.1k|    )
  189|  15.1k|}
_RNvNvNtNtNtCs87YssFN4ISD_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  15.1k|        unsafe fn find_avx2(
   79|  15.1k|            $($needle: u8),+,
   80|  15.1k|            $hay_start: *const u8,
   81|  15.1k|            $hay_end: *const u8,
   82|  15.1k|        ) -> $retty {
   83|  15.1k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  15.1k|            $memchrty::new_unchecked($($needle),+)
   85|  15.1k|                .$memchrfind($hay_start, $hay_end)
   86|  15.1k|        }
_RNvNvNtNtNtCs87YssFN4ISD_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCs87YssFN4ISD_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  5.30M|        unsafe fn find_avx2(
   79|  5.30M|            $($needle: u8),+,
   80|  5.30M|            $hay_start: *const u8,
   81|  5.30M|            $hay_end: *const u8,
   82|  5.30M|        ) -> $retty {
   83|  5.30M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  5.30M|            $memchrty::new_unchecked($($needle),+)
   85|  5.30M|                .$memchrfind($hay_start, $hay_end)
   86|  5.30M|        }
_RNvNvNtNtNtCs87YssFN4ISD_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }

_RNvXNtCs87YssFN4ISD_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  5.72M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  5.72M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  5.72M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  5.72M|    }
_RNvXNtCs87YssFN4ISD_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|   417k|    fn as_usize(self) -> usize {
   27|   417k|        self as usize
   28|   417k|    }

_RNCNvNtCs87YssFN4ISD_6memchr6memchr7memchr20Cs70uHazZwt5R_5oxttl:
   96|   580k|        generic::search_slice_with_raw(haystack, |start, end| {
   97|   580k|            memchr2_raw(needle1, needle2, start, end)
   98|   580k|        })
_RNCNvXs3_NtCs87YssFN4ISD_6memchr6memchrNtB7_7Memchr2NtNtNtNtCsd3ZSx5keFHB_4core4iter6traits8iterator8Iterator4next0Cs70uHazZwt5R_5oxttl:
  395|  4.72M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNvMs2_NtCs87YssFN4ISD_6memchr6memchrNtB5_7Memchr23newCs70uHazZwt5R_5oxttl:
  377|  4.71M|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  4.71M|        Memchr2 {
  379|  4.71M|            needle1,
  380|  4.71M|            needle2,
  381|  4.71M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  4.71M|        }
  383|  4.71M|    }
_RNvNtCs87YssFN4ISD_6memchr6memchr11memchr2_rawCs70uHazZwt5R_5oxttl:
  574|  5.30M|unsafe fn memchr2_raw(
  575|  5.30M|    needle1: u8,
  576|  5.30M|    needle2: u8,
  577|  5.30M|    start: *const u8,
  578|  5.30M|    end: *const u8,
  579|  5.30M|) -> Option<*const u8> {
  580|  5.30M|    #[cfg(target_arch = "x86_64")]
  581|  5.30M|    {
  582|  5.30M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  5.30M|    }
  584|  5.30M|    #[cfg(target_arch = "wasm32")]
  585|  5.30M|    {
  586|  5.30M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  5.30M|    }
  588|  5.30M|    #[cfg(target_arch = "aarch64")]
  589|  5.30M|    {
  590|  5.30M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  5.30M|    }
  592|  5.30M|    #[cfg(not(any(
  593|  5.30M|        target_arch = "x86_64",
  594|  5.30M|        target_arch = "wasm32",
  595|  5.30M|        target_arch = "aarch64"
  596|  5.30M|    )))]
  597|  5.30M|    {
  598|  5.30M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  5.30M|            .find_raw(start, end)
  600|  5.30M|    }
  601|  5.30M|}
_RNvNtCs87YssFN4ISD_6memchr6memchr12memchr2_iterCs70uHazZwt5R_5oxttl:
  232|  4.71M|pub fn memchr2_iter<'h>(
  233|  4.71M|    needle1: u8,
  234|  4.71M|    needle2: u8,
  235|  4.71M|    haystack: &'h [u8],
  236|  4.71M|) -> Memchr2<'h> {
  237|  4.71M|    Memchr2::new(needle1, needle2, haystack)
  238|  4.71M|}
_RNvNtCs87YssFN4ISD_6memchr6memchr6memchrCs70uHazZwt5R_5oxttl:
   27|  15.1k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  15.1k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  15.1k|    // pointer between start and end.
   30|  15.1k|    unsafe {
   31|  15.1k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  15.1k|        })
   34|  15.1k|    }
   35|  15.1k|}
_RNvNtCs87YssFN4ISD_6memchr6memchr7memchr2Cs70uHazZwt5R_5oxttl:
   92|   580k|pub fn memchr2(needle1: u8, needle2: u8, haystack: &[u8]) -> Option<usize> {
   93|   580k|    // SAFETY: memchr2_raw, when a match is found, always returns a valid
   94|   580k|    // pointer between start and end.
   95|   580k|    unsafe {
   96|   580k|        generic::search_slice_with_raw(haystack, |start, end| {
   97|       |            memchr2_raw(needle1, needle2, start, end)
   98|   580k|        })
   99|   580k|    }
  100|   580k|}
_RNvXs3_NtCs87YssFN4ISD_6memchr6memchrNtB5_7Memchr2NtNtNtNtCsd3ZSx5keFHB_4core4iter6traits8iterator8Iterator4nextCs70uHazZwt5R_5oxttl:
  390|  4.72M|    fn next(&mut self) -> Option<usize> {
  391|  4.72M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  4.72M|        // pointers returns will fall within the start and end bounds, and this
  393|  4.72M|        // upholds the safety contract of `self.it.next`.
  394|  4.72M|        unsafe {
  395|  4.72M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  4.72M|        }
  397|  4.72M|    }
_RNCNvNtCs87YssFN4ISD_6memchr6memchr6memchr0B5_:
   31|  15.1k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|  15.1k|            memchr_raw(needle, start, end)
   33|  15.1k|        })
_RNvNtCs87YssFN4ISD_6memchr6memchr10memchr_rawB3_:
  504|  15.1k|unsafe fn memchr_raw(
  505|  15.1k|    needle: u8,
  506|  15.1k|    start: *const u8,
  507|  15.1k|    end: *const u8,
  508|  15.1k|) -> Option<*const u8> {
  509|  15.1k|    #[cfg(target_arch = "x86_64")]
  510|  15.1k|    {
  511|  15.1k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  15.1k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  15.1k|        // time. This function also handles using a fallback if neither AVX2
  514|  15.1k|        // nor SSE2 (unusual) are available.
  515|  15.1k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  15.1k|    }
  517|  15.1k|    #[cfg(target_arch = "wasm32")]
  518|  15.1k|    {
  519|  15.1k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  15.1k|    }
  521|  15.1k|    #[cfg(target_arch = "aarch64")]
  522|  15.1k|    {
  523|  15.1k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  15.1k|    }
  525|  15.1k|    #[cfg(not(any(
  526|  15.1k|        target_arch = "x86_64",
  527|  15.1k|        target_arch = "wasm32",
  528|  15.1k|        target_arch = "aarch64"
  529|  15.1k|    )))]
  530|  15.1k|    {
  531|  15.1k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  15.1k|    }
  533|  15.1k|}

_RNvYNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m256iNtNtCs87YssFN4ISD_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   65|   182k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   66|   182k|        self.movemask().has_non_zero()
   67|   182k|    }
_RNvMNtCs87YssFN4ISD_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  128|   373k|    fn get_for_offset(self) -> u32 {
  129|   373k|        #[cfg(target_endian = "big")]
  130|   373k|        {
  131|   373k|            self.0.swap_bytes()
  132|   373k|        }
  133|   373k|        #[cfg(target_endian = "little")]
  134|   373k|        {
  135|   373k|            self.0
  136|   373k|        }
  137|   373k|    }
_RNvXs_NtCs87YssFN4ISD_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  148|  1.40M|    fn has_non_zero(self) -> bool {
  149|  1.40M|        self.0 != 0
  150|  1.40M|    }
_RNvXs_NtCs87YssFN4ISD_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  173|   373k|    fn first_offset(self) -> usize {
  174|   373k|        // We are dealing with little endian here (and if we aren't, we swap
  175|   373k|        // the bytes so we are in practice), where the most significant byte
  176|   373k|        // is at a higher address. That means the least significant bit that
  177|   373k|        // is set corresponds to the position of our first matching byte.
  178|   373k|        // That position corresponds to the number of zeros after the least
  179|   373k|        // significant bit.
  180|   373k|        self.get_for_offset().trailing_zeros() as usize
  181|   373k|    }
_RNvXNtNtCs87YssFN4ISD_6memchr6vector7x86sse2NtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  225|   257k|        unsafe fn movemask(self) -> SensibleMoveMask {
  226|   257k|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  227|   257k|        }
_RNvXNtNtCs87YssFN4ISD_6memchr6vector7x86avx2NtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  275|  1.89M|        unsafe fn movemask(self) -> SensibleMoveMask {
  276|  1.89M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  277|  1.89M|        }
_RNvXs_NtCs87YssFN4ISD_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  163|   410k|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  164|   410k|        SensibleMoveMask(self.0 | other.0)
  165|   410k|    }
_RNvXNtNtCs87YssFN4ISD_6memchr6vector7x86sse2NtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  210|  10.6M|        unsafe fn splat(byte: u8) -> __m128i {
  211|  10.6M|            _mm_set1_epi8(byte as i8)
  212|  10.6M|        }
_RNvXNtNtCs87YssFN4ISD_6memchr6vector7x86sse2NtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  220|   196k|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  221|   196k|            _mm_loadu_si128(data as *const __m128i)
  222|   196k|        }
_RNvXNtNtCs87YssFN4ISD_6memchr6vector7x86sse2NtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  230|   385k|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  231|   385k|            _mm_cmpeq_epi8(self, vector2)
  232|   385k|        }
_RNvXNtNtCs87YssFN4ISD_6memchr6vector7x86sse2NtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iNtB4_6Vector2or:
  240|   189k|        unsafe fn or(self, vector2: Self) -> __m128i {
  241|   189k|            _mm_or_si128(self, vector2)
  242|   189k|        }
_RNvXNtNtCs87YssFN4ISD_6memchr6vector7x86avx2NtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  260|  10.6M|        unsafe fn splat(byte: u8) -> __m256i {
  261|  10.6M|            _mm256_set1_epi8(byte as i8)
  262|  10.6M|        }
_RNvXNtNtCs87YssFN4ISD_6memchr6vector7x86avx2NtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  265|   370k|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  266|   370k|            _mm256_load_si256(data as *const __m256i)
  267|   370k|        }
_RNvXNtNtCs87YssFN4ISD_6memchr6vector7x86avx2NtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  270|   951k|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  271|   951k|            _mm256_loadu_si256(data as *const __m256i)
  272|   951k|        }
_RNvXNtNtCs87YssFN4ISD_6memchr6vector7x86avx2NtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  280|  2.61M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  281|  2.61M|            _mm256_cmpeq_epi8(self, vector2)
  282|  2.61M|        }
_RNvXNtNtCs87YssFN4ISD_6memchr6vector7x86avx2NtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m256iNtB4_6Vector2or:
  290|  1.48M|        unsafe fn or(self, vector2: Self) -> __m256i {
  291|  1.48M|            _mm256_or_si256(self, vector2)
  292|  1.48M|        }

_RNvMs2_NtCs1sMlb0BTjBE_9once_cell3impINtB5_8OnceCellNtNtCsgcnyUjfByoh_5alloc6string6StringE14is_initializedCs1VO2i0pKgPs_13libfuzzer_sys:
   49|  4.67k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  4.67k|        // An `Acquire` load is enough because that makes all the initialization
   51|  4.67k|        // operations visible to us, and, this being a fast path, weaker
   52|  4.67k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  4.67k|        // `SeqCst` operations on the slow path.
   54|  4.67k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  4.67k|    }

_RNvMs4_NtCs1sMlb0BTjBE_9once_cell4syncINtB5_8OnceCellNtNtCsgcnyUjfByoh_5alloc6string6StringE3getCs1VO2i0pKgPs_13libfuzzer_sys:
  963|  4.67k|        pub fn get(&self) -> Option<&T> {
  964|  4.67k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  4.67k|                None
  969|       |            }
  970|  4.67k|        }

_RNvMCs5s6PPgq101W_10oxilangtagINtB2_11LanguageTagReE10into_innerCs70uHazZwt5R_5oxttl:
   54|  5.87k|    pub fn into_inner(self) -> T {
   55|  5.87k|        self.tag
   56|  5.87k|    }
_RNvMCs5s6PPgq101W_10oxilangtagINtB2_11LanguageTagReE5parseCs70uHazZwt5R_5oxttl:
   41|  8.34k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   42|  8.34k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   43|  5.87k|        Ok(Self { tag, positions })
   44|  8.34k|    }
_RNvXsE_Cs5s6PPgq101W_10oxilangtagNtB5_16VoidOutputBufferNtNtCsd3ZSx5keFHB_4core7default7Default7defaultCs70uHazZwt5R_5oxttl:
  547|  8.34k|#[derive(Default)]
_RINvCs5s6PPgq101W_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECsRRItI7FBc3_5oxrdf:
  621|  6.65k|fn parse_langtag(
  622|  6.65k|    input: &str,
  623|  6.65k|    output: &mut impl OutputBuffer,
  624|  6.65k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  625|  6.65k|    #[derive(PartialEq, Eq)]
  626|  6.65k|    enum State {
  627|  6.65k|        Start,
  628|  6.65k|        AfterLanguage,
  629|  6.65k|        AfterExtLang,
  630|  6.65k|        AfterScript,
  631|  6.65k|        AfterRegion,
  632|  6.65k|        InExtension { expected: bool },
  633|  6.65k|        InPrivateUse { expected: bool },
  634|  6.65k|    }
  635|  6.65k|
  636|  6.65k|    let mut state = State::Start;
  637|  6.65k|    let mut language_end = 0;
  638|  6.65k|    let mut extlang_end = 0;
  639|  6.65k|    let mut script_end = 0;
  640|  6.65k|    let mut region_end = 0;
  641|  6.65k|    let mut variant_end = 0;
  642|  6.65k|    let mut extension_end = 0;
  643|  6.65k|    let mut extlangs_count = 0;
  644|  13.0k|    for (subtag, end) in SubTagIterator::new(input) {
  645|  13.0k|        if subtag.is_empty() {
  646|      0|            return Err(LanguageTagParseError {
  647|      0|                kind: TagParseErrorKind::EmptySubtag,
  648|      0|            });
  649|  13.0k|        }
  650|  13.0k|        if subtag.len() > 8 {
  651|    256|            return Err(LanguageTagParseError {
  652|    256|                kind: TagParseErrorKind::SubtagTooLong,
  653|    256|            });
  654|  12.8k|        }
  655|  12.8k|        if state == State::Start {
  656|       |            // Primary language
  657|  6.42k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  658|  1.42k|                return Err(LanguageTagParseError {
  659|  1.42k|                    kind: TagParseErrorKind::InvalidLanguage,
  660|  1.42k|                });
  661|  5.00k|            }
  662|  5.00k|            language_end = end;
  663|  5.00k|            output.extend(to_lowercase(subtag));
  664|  5.00k|            if subtag.len() < 4 {
  665|  3.68k|                // extlangs are only allowed for short language tags
  666|  3.68k|                state = State::AfterLanguage;
  667|  3.68k|            } else {
  668|  1.31k|                state = State::AfterExtLang;
  669|  1.31k|            }
  670|  6.40k|        } else if let State::InPrivateUse { .. } = state {
  671|    192|            if !is_alphanumeric(subtag) {
  672|      0|                return Err(LanguageTagParseError {
  673|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  674|      0|                });
  675|    192|            }
  676|    192|            output.push('-');
  677|    192|            output.extend(to_lowercase(subtag));
  678|    192|            state = State::InPrivateUse { expected: false };
  679|  6.20k|        } else if subtag == "x" || subtag == "X" {
  680|       |            // We make sure extension is found
  681|    260|            if let State::InExtension { expected: true } = state {
  682|     18|                return Err(LanguageTagParseError {
  683|     18|                    kind: TagParseErrorKind::EmptyExtension,
  684|     18|                });
  685|    242|            }
  686|    242|            output.push('-');
  687|    242|            output.push('x');
  688|    242|            state = State::InPrivateUse { expected: true };
  689|  5.94k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  690|       |            // We make sure extension is found
  691|  1.72k|            if let State::InExtension { expected: true } = state {
  692|    204|                return Err(LanguageTagParseError {
  693|    204|                    kind: TagParseErrorKind::EmptyExtension,
  694|    204|                });
  695|  1.51k|            }
  696|  1.51k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  697|  1.51k|            output.push('-');
  698|  1.51k|            output.push(extension_tag);
  699|  1.51k|            state = State::InExtension { expected: true };
  700|  4.22k|        } else if let State::InExtension { .. } = state {
  701|  2.13k|            if !is_alphanumeric(subtag) {
  702|      0|                return Err(LanguageTagParseError {
  703|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  704|      0|                });
  705|  2.13k|            }
  706|  2.13k|            extension_end = end;
  707|  2.13k|            output.push('-');
  708|  2.13k|            output.extend(to_lowercase(subtag));
  709|  2.13k|            state = State::InExtension { expected: false };
  710|  2.09k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  711|    272|            extlangs_count += 1;
  712|    272|            if extlangs_count > 3 {
  713|      0|                return Err(LanguageTagParseError {
  714|      0|                    kind: TagParseErrorKind::TooManyExtlangs,
  715|      0|                });
  716|    272|            }
  717|    272|            // valid extlangs
  718|    272|            extlang_end = end;
  719|    272|            output.push('-');
  720|    272|            output.extend(to_lowercase(subtag));
  721|  1.82k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  722|  1.51k|            && subtag.len() == 4
  723|    236|            && is_alphabetic(subtag)
  724|    236|        {
  725|    236|            // Script
  726|    236|            script_end = end;
  727|    236|            output.push('-');
  728|    236|            output.extend(to_uppercase_first(subtag));
  729|    236|            state = State::AfterScript;
  730|  1.58k|        } else if (state == State::AfterLanguage
  731|    537|            || state == State::AfterExtLang
  732|    313|            || state == State::AfterScript)
  733|  1.36k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  734|    820|                || subtag.len() == 3 && is_numeric(subtag))
  735|    548|        {
  736|    548|            // Region
  737|    548|            region_end = end;
  738|    548|            output.push('-');
  739|    548|            output.extend(to_uppercase(subtag));
  740|    548|            state = State::AfterRegion;
  741|  1.04k|        } else if (state == State::AfterLanguage
  742|    402|            || state == State::AfterExtLang
  743|    313|            || state == State::AfterScript
  744|    221|            || state == State::AfterRegion)
  745|  1.04k|            && is_alphanumeric(subtag)
  746|  1.04k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  747|    264|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  748|    777|        {
  749|    777|            // Variant
  750|    777|            variant_end = end;
  751|    777|            output.push('-');
  752|    777|            output.extend(to_lowercase(subtag));
  753|    777|            state = State::AfterRegion;
  754|    777|        } else {
  755|    264|            return Err(LanguageTagParseError {
  756|    264|                kind: TagParseErrorKind::InvalidSubtag,
  757|    264|            });
  758|       |        }
  759|       |    }
  760|       |
  761|       |    //We make sure we are in a correct final state
  762|  4.48k|    if let State::InExtension { expected: true } = state {
  763|    228|        return Err(LanguageTagParseError {
  764|    228|            kind: TagParseErrorKind::EmptyExtension,
  765|    228|        });
  766|  4.26k|    }
  767|  4.26k|    if let State::InPrivateUse { expected: true } = state {
  768|     76|        return Err(LanguageTagParseError {
  769|     76|            kind: TagParseErrorKind::EmptyPrivateUse,
  770|     76|        });
  771|  4.18k|    }
  772|  4.18k|
  773|  4.18k|    //We make sure we have not skipped anyone
  774|  4.18k|    if extlang_end < language_end {
  775|  3.91k|        extlang_end = language_end;
  776|  3.91k|    }
  777|  4.18k|    if script_end < extlang_end {
  778|  4.03k|        script_end = extlang_end;
  779|  4.03k|    }
  780|  4.18k|    if region_end < script_end {
  781|  3.74k|        region_end = script_end;
  782|  3.74k|    }
  783|  4.18k|    if variant_end < region_end {
  784|  3.41k|        variant_end = region_end;
  785|  3.41k|    }
  786|  4.18k|    if extension_end < variant_end {
  787|  3.16k|        extension_end = variant_end;
  788|  3.16k|    }
  789|       |
  790|  4.18k|    Ok(TagElementsPositions {
  791|  4.18k|        language_end,
  792|  4.18k|        extlang_end,
  793|  4.18k|        script_end,
  794|  4.18k|        region_end,
  795|  4.18k|        variant_end,
  796|  4.18k|        extension_end,
  797|  4.18k|    })
  798|  6.65k|}
_RINvCs5s6PPgq101W_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECsRRItI7FBc3_5oxrdf:
  576|  8.34k|fn parse_language_tag(
  577|  8.34k|    input: &str,
  578|  8.34k|    output: &mut impl OutputBuffer,
  579|  8.34k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  580|       |    //grandfathered tags
  581|  8.34k|    if let Some(tag) = GRANDFATHEREDS
  582|  8.34k|        .iter()
  583|  8.34k|        .find(|record| record.eq_ignore_ascii_case(input))
  584|       |    {
  585|      0|        output.push_str(tag);
  586|      0|        Ok(TagElementsPositions {
  587|      0|            language_end: tag.len(),
  588|      0|            extlang_end: tag.len(),
  589|      0|            script_end: tag.len(),
  590|      0|            region_end: tag.len(),
  591|      0|            variant_end: tag.len(),
  592|      0|            extension_end: tag.len(),
  593|      0|        })
  594|  8.34k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  595|       |        // private use
  596|  1.69k|        if !is_alphanumeric_or_dash(input) {
  597|      0|            Err(LanguageTagParseError {
  598|      0|                kind: TagParseErrorKind::ForbiddenChar,
  599|      0|            })
  600|  1.69k|        } else if input.len() == 2 {
  601|      0|            Err(LanguageTagParseError {
  602|      0|                kind: TagParseErrorKind::EmptyPrivateUse,
  603|      0|            })
  604|       |        } else {
  605|  1.69k|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  606|  1.69k|            Ok(TagElementsPositions {
  607|  1.69k|                language_end: input.len(),
  608|  1.69k|                extlang_end: input.len(),
  609|  1.69k|                script_end: input.len(),
  610|  1.69k|                region_end: input.len(),
  611|  1.69k|                variant_end: input.len(),
  612|  1.69k|                extension_end: input.len(),
  613|  1.69k|            })
  614|       |        }
  615|       |    } else {
  616|  6.65k|        parse_langtag(input, output)
  617|       |    }
  618|  8.34k|}
_RINvXsr_Cs5s6PPgq101W_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsd3ZSx5keFHB_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECsRRItI7FBc3_5oxrdf:
  560|  1.69k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Cs5s6PPgq101W_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsd3ZSx5keFHB_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECsRRItI7FBc3_5oxrdf:
  560|  8.37k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Cs5s6PPgq101W_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsd3ZSx5keFHB_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECsRRItI7FBc3_5oxrdf:
  560|    548|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Cs5s6PPgq101W_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsd3ZSx5keFHB_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECsRRItI7FBc3_5oxrdf:
  560|    236|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCs5s6PPgq101W_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0CsRRItI7FBc3_5oxrdf:
  583|   216k|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvCs5s6PPgq101W_10oxilangtag10is_numericCsRRItI7FBc3_5oxrdf:
  865|    236|fn is_numeric(s: &str) -> bool {
  866|    236|    s.chars().all(|x| x.is_ascii_digit())
  867|    236|}
_RNvCs5s6PPgq101W_10oxilangtag12to_lowercaseCsRRItI7FBc3_5oxrdf:
  892|  8.37k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  893|  8.37k|    s.chars().map(|c| c.to_ascii_lowercase())
  894|  8.37k|}
_RNvCs5s6PPgq101W_10oxilangtag12to_uppercaseCsRRItI7FBc3_5oxrdf:
  880|    548|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  881|    548|    s.chars().map(|c| c.to_ascii_uppercase())
  882|    548|}
_RNvCs5s6PPgq101W_10oxilangtag13is_alphabeticCsRRItI7FBc3_5oxrdf:
  860|  6.83k|fn is_alphabetic(s: &str) -> bool {
  861|  6.83k|    s.chars().all(|x| x.is_ascii_alphabetic())
  862|  6.83k|}
_RNvCs5s6PPgq101W_10oxilangtag15is_alphanumericCsRRItI7FBc3_5oxrdf:
  870|  5.08k|fn is_alphanumeric(s: &str) -> bool {
  871|  5.08k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  872|  5.08k|}
_RNvCs5s6PPgq101W_10oxilangtag18to_uppercase_firstCsRRItI7FBc3_5oxrdf:
  886|    236|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  887|    236|    let mut chars = s.chars();
  888|    236|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  889|    236|}
_RNvCs5s6PPgq101W_10oxilangtag23is_alphanumeric_or_dashCsRRItI7FBc3_5oxrdf:
  875|  1.69k|fn is_alphanumeric_or_dash(s: &str) -> bool {
  876|  1.69k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  877|  1.69k|}
_RNvMsv_Cs5s6PPgq101W_10oxilangtagNtB5_14SubTagIterator3newCsRRItI7FBc3_5oxrdf:
  839|  6.65k|    fn new(input: &'a str) -> Self {
  840|  6.65k|        Self {
  841|  6.65k|            split: input.split('-'),
  842|  6.65k|            position: 0,
  843|  6.65k|        }
  844|  6.65k|    }
_RNvXs_NvCs5s6PPgq101W_10oxilangtag13parse_langtagNtB4_5StateNtNtCsd3ZSx5keFHB_4core3cmp9PartialEq2eqCsRRItI7FBc3_5oxrdf:
  625|  21.7k|    #[derive(PartialEq, Eq)]
_RNvXsq_Cs5s6PPgq101W_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsRRItI7FBc3_5oxrdf:
  552|  7.67k|    fn push(&mut self, _: char) {}
_RNvXsw_Cs5s6PPgq101W_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCsd3ZSx5keFHB_4core4iter6traits8iterator8Iterator4nextCsRRItI7FBc3_5oxrdf:
  851|  17.5k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  852|  17.5k|        let tag = self.split.next()?;
  853|  13.0k|        let tag_end = self.position + tag.len();
  854|  13.0k|        self.position = tag_end + 1;
  855|  13.0k|        Some((tag, tag_end))
  856|  17.5k|    }
_RNvXso_Cs5s6PPgq101W_10oxilangtagNtB5_21LanguageTagParseErrorNtNtCsd3ZSx5keFHB_4core3fmt7Display3fmt:
  482|  2.46k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  483|  2.46k|        match self.kind {
  484|       |            TagParseErrorKind::EmptyExtension => {
  485|    450|                write!(f, "If an extension subtag is present, it must not be empty")
  486|       |            }
  487|       |            TagParseErrorKind::EmptyPrivateUse => {
  488|     76|                write!(f, "If the `x` subtag is present, it must not be empty")
  489|       |            }
  490|       |            TagParseErrorKind::ForbiddenChar => {
  491|      0|                write!(f, "The langtag contains a char not allowed")
  492|       |            }
  493|    264|            TagParseErrorKind::InvalidSubtag => write!(
  494|    264|                f,
  495|    264|                "A subtag fails to parse, it does not match any other subtags"
  496|    264|            ),
  497|  1.42k|            TagParseErrorKind::InvalidLanguage => write!(f, "The given language subtag is invalid"),
  498|       |            TagParseErrorKind::SubtagTooLong => {
  499|    256|                write!(f, "A subtag may be eight characters in length at maximum")
  500|       |            }
  501|      0|            TagParseErrorKind::EmptySubtag => write!(f, "A subtag should not be empty"),
  502|       |            TagParseErrorKind::TooManyExtlangs => {
  503|      0|                write!(f, "At maximum three extlangs are allowed")
  504|       |            }
  505|       |        }
  506|  2.46k|    }
_RNCNvCs5s6PPgq101W_10oxilangtag13is_alphabetic0B3_:
  861|  19.1k|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCs5s6PPgq101W_10oxilangtag10is_numeric0B3_:
  866|    236|    s.chars().all(|x| x.is_ascii_digit())
_RNCNvCs5s6PPgq101W_10oxilangtag15is_alphanumeric0B3_:
  871|  14.6k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNCNvCs5s6PPgq101W_10oxilangtag23is_alphanumeric_or_dash0B3_:
  876|  40.9k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')

_RNvXsZ_CsbnXcJDMqcDl_5oxiriNtNtCsgcnyUjfByoh_5alloc6string6StringNtB5_12OutputBuffer3lenCs70uHazZwt5R_5oxttl:
 1137|   306k|    fn len(&self) -> usize {
 1138|   306k|        self.len()
 1139|   306k|    }
_RNvXsZ_CsbnXcJDMqcDl_5oxiriNtNtCsgcnyUjfByoh_5alloc6string6StringNtB5_12OutputBuffer4pushCs70uHazZwt5R_5oxttl:
 1117|  1.08M|    fn push(&mut self, c: char) {
 1118|  1.08M|        self.push(c);
 1119|  1.08M|    }
_RNvXsZ_CsbnXcJDMqcDl_5oxiriNtNtCsgcnyUjfByoh_5alloc6string6StringNtB5_12OutputBuffer5clearCs70uHazZwt5R_5oxttl:
 1127|  9.67k|    fn clear(&mut self) {
 1128|  9.67k|        self.clear();
 1129|  9.67k|    }
_RNvXsZ_CsbnXcJDMqcDl_5oxiriNtNtCsgcnyUjfByoh_5alloc6string6StringNtB5_12OutputBuffer6as_strCs70uHazZwt5R_5oxttl:
 1142|   424k|    fn as_str(&self) -> &str {
 1143|   424k|        self.as_str()
 1144|   424k|    }
_RNvXsZ_CsbnXcJDMqcDl_5oxiriNtNtCsgcnyUjfByoh_5alloc6string6StringNtB5_12OutputBuffer8push_strCs70uHazZwt5R_5oxttl:
 1122|   149k|    fn push_str(&mut self, s: &str) {
 1123|   149k|        self.push_str(s);
 1124|   149k|    }
_RNvXsZ_CsbnXcJDMqcDl_5oxiriNtNtCsgcnyUjfByoh_5alloc6string6StringNtB5_12OutputBuffer8truncateCs70uHazZwt5R_5oxttl:
 1132|   142k|    fn truncate(&mut self, new_len: usize) {
 1133|   142k|        self.truncate(new_len);
 1134|   142k|    }
_RINvMs11_CsbnXcJDMqcDl_5oxiriINtB7_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb0_E11parse_erroruECs70uHazZwt5R_5oxttl:
 1567|  15.7k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1568|  15.7k|        Err(IriParseError { kind })
 1569|  15.7k|    }
_RINvMs11_CsbnXcJDMqcDl_5oxiriINtB7_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb1_E11parse_erroruECs70uHazZwt5R_5oxttl:
 1567|    764|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1568|    764|        Err(IriParseError { kind })
 1569|    764|    }
_RNCNvMs11_CsbnXcJDMqcDl_5oxiriINtB8_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb0_E10read_echar0Cs70uHazZwt5R_5oxttl:
 1550|  1.24k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_CsbnXcJDMqcDl_5oxiriINtB8_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb0_E10read_echars_0Cs70uHazZwt5R_5oxttl:
 1551|    570|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMCsbnXcJDMqcDl_5oxiriINtB2_6IriRefNtNtCsgcnyUjfByoh_5alloc6string6StringE15parse_uncheckedCs70uHazZwt5R_5oxttl:
   71|    546|    pub fn parse_unchecked(iri: T) -> Result<Self, IriParseError> {
   72|    546|        let positions = IriParser::<_, true>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   73|    546|        Ok(Self { iri, positions })
   74|    546|    }
_RNvMCsbnXcJDMqcDl_5oxiriINtB2_6IriRefNtNtCsgcnyUjfByoh_5alloc6string6StringE17resolve_uncheckedCs70uHazZwt5R_5oxttl:
  108|  52.4k|    pub fn resolve_unchecked(&self, iri: &str) -> Result<IriRef<String>, IriParseError> {
  109|  52.4k|        let mut target_buffer = String::with_capacity(self.iri.len() + iri.len());
  110|  52.4k|        let positions = IriParser::<_, true>::parse(iri, Some(self.as_ref()), &mut target_buffer)?;
  111|  51.6k|        Ok(IriRef {
  112|  51.6k|            iri: target_buffer,
  113|  51.6k|            positions,
  114|  51.6k|        })
  115|  52.4k|    }
_RNvMCsbnXcJDMqcDl_5oxiriINtB2_6IriRefNtNtCsgcnyUjfByoh_5alloc6string6StringE6as_refCs70uHazZwt5R_5oxttl:
  160|   157k|    pub fn as_ref(&self) -> IriRef<&str> {
  161|   157k|        IriRef {
  162|   157k|            iri: &self.iri,
  163|   157k|            positions: self.positions,
  164|   157k|        }
  165|   157k|    }
_RNvMCsbnXcJDMqcDl_5oxiriINtB2_6IriRefNtNtCsgcnyUjfByoh_5alloc6string6StringE7resolveCs70uHazZwt5R_5oxttl:
   89|   104k|    pub fn resolve(&self, iri: &str) -> Result<IriRef<String>, IriParseError> {
   90|   104k|        let mut target_buffer = String::with_capacity(self.iri.len() + iri.len());
   91|   104k|        let positions = IriParser::<_, false>::parse(iri, Some(self.as_ref()), &mut target_buffer)?;
   92|  89.0k|        Ok(IriRef {
   93|  89.0k|            iri: target_buffer,
   94|  89.0k|            positions,
   95|  89.0k|        })
   96|   104k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_hostCs70uHazZwt5R_5oxttl:
 1366|    546|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|    546|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|      0|            let start_position = self.input.position;
 1370|      0|            while let Some(c) = self.input.next() {
 1371|      0|                self.output.push(c);
 1372|      0|                if c == ']' {
 1373|      0|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|      0|                    if !UNCHECKED {
 1375|      0|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|      0|                        }
 1378|      0|                    }
 1379|       |
 1380|      0|                    let c = self.input.next();
 1381|      0|                    return match c {
 1382|       |                        Some(':') => {
 1383|      0|                            self.output.push(':');
 1384|      0|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|      0|                            self.output_positions.authority_end = self.output.len();
 1388|      0|                            self.parse_path_start(c)
 1389|       |                        }
 1390|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|      0|                }
 1393|       |            }
 1394|      0|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|  6.55k|            loop {
 1398|  6.55k|                let c = self.input.next();
 1399|  6.55k|                match c {
 1400|       |                    Some(':') => {
 1401|      0|                        self.output.push(':');
 1402|      0|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|    546|                        self.output_positions.authority_end = self.output.len();
 1406|    546|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|  6.00k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|    546|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_pathCs70uHazZwt5R_5oxttl:
 1457|    546|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|  5.38k|        loop {
 1459|  5.38k|            let c = self.input.next();
 1460|  5.38k|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|    628|                    if self.output.as_str().ends_with("/..") {
 1463|      0|                        self.remove_last_segment();
 1464|      0|                        self.remove_last_segment();
 1465|      0|                        self.output.push('/');
 1466|    628|                    } else if self.output.as_str().ends_with("/.") {
 1467|      0|                        self.remove_last_segment();
 1468|      0|                        self.output.push('/');
 1469|    628|                    } else if c == Some('/') {
 1470|     82|                        self.output.push('/');
 1471|    546|                    }
 1472|       |
 1473|    628|                    if c == Some('?') {
 1474|     50|                        self.output_positions.path_end = self.output.len();
 1475|     50|                        self.output.push('?');
 1476|     50|                        return self.parse_query();
 1477|    578|                    } else if c == Some('#') {
 1478|      4|                        self.output_positions.path_end = self.output.len();
 1479|      4|                        self.output_positions.query_end = self.output.len();
 1480|      4|                        self.output.push('#');
 1481|      4|                        return self.parse_fragment();
 1482|    574|                    } else if c.is_none() {
 1483|    492|                        self.output_positions.path_end = self.output.len();
 1484|    492|                        self.output_positions.query_end = self.output.len();
 1485|    492|                        return Ok(());
 1486|     82|                    }
 1487|       |                }
 1488|  4.75k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|    546|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E11parse_queryCs70uHazZwt5R_5oxttl:
 1493|     50|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|    354|        while let Some(c) = self.input.next() {
 1495|    304|            if c == '#' {
 1496|      0|                self.output_positions.query_end = self.output.len();
 1497|      0|                self.output.push('#');
 1498|      0|                return self.parse_fragment();
 1499|       |            } else {
 1500|    304|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|     50|        self.output_positions.query_end = self.output.len();
 1504|     50|        Ok(())
 1505|     50|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E12parse_schemeCs70uHazZwt5R_5oxttl:
 1220|    546|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|  2.73k|        loop {
 1222|  2.73k|            let c = self.input.next();
 1223|  2.73k|            match c {
 1224|  2.73k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|  2.18k|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|    546|                    self.output.push(':');
 1229|    546|                    self.output_positions.scheme_end = self.output.len();
 1230|    546|                    self.input_scheme_end = self.input.position;
 1231|    546|                    return if self.input.starts_with('/') {
 1232|    546|                        self.input.next();
 1233|    546|                        self.output.push('/');
 1234|    546|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|      0|                        self.output_positions.authority_end = self.output.len();
 1237|      0|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|      0|                    self.input = ParserInput {
 1242|      0|                        value: self.iri.chars(),
 1243|      0|                        position: 0,
 1244|      0|                    }; // reset
 1245|      0|                    self.output.clear();
 1246|      0|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|    546|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E14parse_fragmentCs70uHazZwt5R_5oxttl:
 1507|      4|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|     12|        while let Some(c) = self.input.next() {
 1509|      8|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|      4|        Ok(())
 1512|      4|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E15parse_authorityCs70uHazZwt5R_5oxttl:
 1342|    546|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|  6.55k|        loop {
 1345|  6.55k|            let c = self.input.next();
 1346|  6.55k|            match c {
 1347|       |                Some('@') => {
 1348|      0|                    self.output.push('@');
 1349|      0|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|    546|                    self.input = ParserInput {
 1353|    546|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|    546|                        position: self.input_scheme_end + 2,
 1355|    546|                    };
 1356|    546|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|    546|                    return self.parse_host();
 1358|       |                }
 1359|  6.00k|                Some(c) => {
 1360|  6.00k|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|    546|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E16parse_path_startCs70uHazZwt5R_5oxttl:
 1428|    546|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|    546|        match c {
 1430|       |            None => {
 1431|      0|                self.output_positions.path_end = self.output.len();
 1432|      0|                self.output_positions.query_end = self.output.len();
 1433|      0|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|      0|                self.output_positions.path_end = self.output.len();
 1437|      0|                self.output.push('?');
 1438|      0|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|      0|                self.output_positions.path_end = self.output.len();
 1442|      0|                self.output_positions.query_end = self.output.len();
 1443|      0|                self.output.push('#');
 1444|      0|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|    546|                self.output.push('/');
 1448|    546|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|    546|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E18parse_scheme_startCs70uHazZwt5R_5oxttl:
 1212|    546|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|    546|        match self.input.front() {
 1214|      0|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|    546|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|      0|            _ => self.parse_relative(),
 1217|       |        }
 1218|    546|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E23parse_path_or_authorityCs70uHazZwt5R_5oxttl:
 1252|    546|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|    546|        if self.input.starts_with('/') {
 1254|    546|            self.input.next();
 1255|    546|            self.output.push('/');
 1256|    546|            self.parse_authority()
 1257|       |        } else {
 1258|      0|            self.output_positions.authority_end = self.output.len() - 1;
 1259|      0|            self.parse_path()
 1260|       |        }
 1261|    546|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E27read_url_codepoint_or_echarCs70uHazZwt5R_5oxttl:
 1523|  16.7k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|  16.7k|        if UNCHECKED || is_url_code_point(c) {
 1525|  16.7k|            self.output.push(c);
 1526|  16.7k|            Ok(())
 1527|      0|        } else if c == '%' {
 1528|      0|            self.read_echar()
 1529|       |        } else {
 1530|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|  16.7k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E33read_url_query_codepoint_or_echarCs70uHazZwt5R_5oxttl:
 1535|    304|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|    304|        if UNCHECKED || is_url_query_code_point(c) {
 1537|    304|            self.output.push(c);
 1538|    304|            Ok(())
 1539|      0|        } else if c == '%' {
 1540|      0|            self.read_echar()
 1541|       |        } else {
 1542|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|    304|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E5parseCs70uHazZwt5R_5oxttl:
 1187|    546|    fn parse(
 1188|    546|        iri: &'a str,
 1189|    546|        base: Option<IriRef<&'a str>>,
 1190|    546|        output: &'a mut O,
 1191|    546|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|    546|        let mut parser = Self {
 1193|    546|            iri,
 1194|    546|            base,
 1195|    546|            input: ParserInput {
 1196|    546|                value: iri.chars(),
 1197|    546|                position: 0,
 1198|    546|            },
 1199|    546|            output,
 1200|    546|            output_positions: IriElementsPositions {
 1201|    546|                scheme_end: 0,
 1202|    546|                authority_end: 0,
 1203|    546|                path_end: 0,
 1204|    546|                query_end: 0,
 1205|    546|            },
 1206|    546|            input_scheme_end: 0,
 1207|    546|        };
 1208|    546|        parser.parse_scheme_start()?;
 1209|    546|        Ok(parser.output_positions)
 1210|    546|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb0_E10parse_hostCs70uHazZwt5R_5oxttl:
 1366|  3.14k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|  3.14k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|    142|            let start_position = self.input.position;
 1370|  6.30k|            while let Some(c) = self.input.next() {
 1371|  6.16k|                self.output.push(c);
 1372|  6.16k|                if c == ']' {
 1373|      2|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|      2|                    if !UNCHECKED {
 1375|      2|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|      2|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|      0|                        }
 1378|      0|                    }
 1379|       |
 1380|      0|                    let c = self.input.next();
 1381|      0|                    return match c {
 1382|       |                        Some(':') => {
 1383|      0|                            self.output.push(':');
 1384|      0|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|      0|                            self.output_positions.authority_end = self.output.len();
 1388|      0|                            self.parse_path_start(c)
 1389|       |                        }
 1390|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|  6.15k|                }
 1393|       |            }
 1394|    140|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|  48.7k|            loop {
 1398|  48.7k|                let c = self.input.next();
 1399|  48.7k|                match c {
 1400|       |                    Some(':') => {
 1401|  1.47k|                        self.output.push(':');
 1402|  1.47k|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|  1.35k|                        self.output_positions.authority_end = self.output.len();
 1406|  1.35k|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|  45.8k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|  3.14k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb0_E10parse_pathCs70uHazZwt5R_5oxttl:
 1457|  93.1k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|   289k|        loop {
 1459|   289k|            let c = self.input.next();
 1460|   289k|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|  89.5k|                    if self.output.as_str().ends_with("/..") {
 1463|    388|                        self.remove_last_segment();
 1464|    388|                        self.remove_last_segment();
 1465|    388|                        self.output.push('/');
 1466|  89.2k|                    } else if self.output.as_str().ends_with("/.") {
 1467|  72.1k|                        self.remove_last_segment();
 1468|  72.1k|                        self.output.push('/');
 1469|  72.1k|                    } else if c == Some('/') {
 1470|  5.56k|                        self.output.push('/');
 1471|  11.5k|                    }
 1472|       |
 1473|  89.5k|                    if c == Some('?') {
 1474|    722|                        self.output_positions.path_end = self.output.len();
 1475|    722|                        self.output.push('?');
 1476|    722|                        return self.parse_query();
 1477|  88.8k|                    } else if c == Some('#') {
 1478|  1.06k|                        self.output_positions.path_end = self.output.len();
 1479|  1.06k|                        self.output_positions.query_end = self.output.len();
 1480|  1.06k|                        self.output.push('#');
 1481|  1.06k|                        return self.parse_fragment();
 1482|  87.8k|                    } else if c.is_none() {
 1483|  82.1k|                        self.output_positions.path_end = self.output.len();
 1484|  82.1k|                        self.output_positions.query_end = self.output.len();
 1485|  82.1k|                        return Ok(());
 1486|  5.61k|                    }
 1487|       |                }
 1488|   200k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|  93.1k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb0_E10parse_portCs70uHazZwt5R_5oxttl:
 1414|  1.47k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|  2.54k|        loop {
 1416|  2.54k|            let c = self.input.next();
 1417|  2.24k|            match c {
 1418|  2.24k|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|  1.31k|                    self.output_positions.authority_end = self.output.len();
 1421|  1.31k|                    return self.parse_path_start(c);
 1422|       |                }
 1423|    156|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|  1.47k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb0_E10read_echarCs70uHazZwt5R_5oxttl:
 1547|  1.63k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1548|  1.63k|        let c1 = self.input.next();
 1549|  1.63k|        let c2 = self.input.next();
 1550|  1.63k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1551|    570|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1552|       |        {
 1553|    534|            self.output.push('%');
 1554|    534|            self.output.push(c1.unwrap());
 1555|    534|            self.output.push(c2.unwrap());
 1556|    534|            Ok(())
 1557|       |        } else {
 1558|  1.09k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1559|  1.09k|                Some('%'),
 1560|  1.09k|                c1,
 1561|  1.09k|                c2,
 1562|  1.09k|            ]))
 1563|       |        }
 1564|  1.63k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb0_E11parse_queryCs70uHazZwt5R_5oxttl:
 1493|  2.90k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|  34.0k|        while let Some(c) = self.input.next() {
 1495|  33.3k|            if c == '#' {
 1496|    252|                self.output_positions.query_end = self.output.len();
 1497|    252|                self.output.push('#');
 1498|    252|                return self.parse_fragment();
 1499|       |            } else {
 1500|  33.1k|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|    682|        self.output_positions.query_end = self.output.len();
 1504|    682|        Ok(())
 1505|  2.90k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb0_E12parse_schemeCs70uHazZwt5R_5oxttl:
 1220|  10.7k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|  63.6k|        loop {
 1222|  63.6k|            let c = self.input.next();
 1223|  62.5k|            match c {
 1224|  62.5k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|  52.8k|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|  4.33k|                    self.output.push(':');
 1229|  4.33k|                    self.output_positions.scheme_end = self.output.len();
 1230|  4.33k|                    self.input_scheme_end = self.input.position;
 1231|  4.33k|                    return if self.input.starts_with('/') {
 1232|  3.13k|                        self.input.next();
 1233|  3.13k|                        self.output.push('/');
 1234|  3.13k|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|  1.20k|                        self.output_positions.authority_end = self.output.len();
 1237|  1.20k|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|  6.45k|                    self.input = ParserInput {
 1242|  6.45k|                        value: self.iri.chars(),
 1243|  6.45k|                        position: 0,
 1244|  6.45k|                    }; // reset
 1245|  6.45k|                    self.output.clear();
 1246|  6.45k|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|  10.7k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb0_E14parse_fragmentCs70uHazZwt5R_5oxttl:
 1507|  1.71k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|  15.2k|        while let Some(c) = self.input.next() {
 1509|  14.6k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|    528|        Ok(())
 1512|  1.71k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb0_E14parse_relativeCs70uHazZwt5R_5oxttl:
 1263|   100k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1264|   100k|        if let Some(base) = self.base {
 1265|   100k|            match self.input.front() {
 1266|       |                None => {
 1267|  4.40k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1268|  4.40k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1269|  4.40k|                    self.output_positions.authority_end = base.positions.authority_end;
 1270|  4.40k|                    self.output_positions.path_end = base.positions.path_end;
 1271|  4.40k|                    self.output_positions.query_end = base.positions.query_end;
 1272|  4.40k|                    Ok(())
 1273|       |                }
 1274|       |                Some('/') => {
 1275|  77.0k|                    self.input.next();
 1276|  77.0k|                    self.parse_relative_slash(&base)
 1277|       |                }
 1278|       |                Some('?') => {
 1279|  2.03k|                    self.input.next();
 1280|  2.03k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1281|  2.03k|                    self.output.push('?');
 1282|  2.03k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1283|  2.03k|                    self.output_positions.authority_end = base.positions.authority_end;
 1284|  2.03k|                    self.output_positions.path_end = base.positions.path_end;
 1285|  2.03k|                    self.parse_query()
 1286|       |                }
 1287|       |                Some('#') => {
 1288|    304|                    self.input.next();
 1289|    304|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1290|    304|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1291|    304|                    self.output_positions.authority_end = base.positions.authority_end;
 1292|    304|                    self.output_positions.path_end = base.positions.path_end;
 1293|    304|                    self.output_positions.query_end = base.positions.query_end;
 1294|    304|                    self.output.push('#');
 1295|    304|                    self.parse_fragment()
 1296|       |                }
 1297|       |                _ => {
 1298|  16.1k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1299|  16.1k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1300|  16.1k|                    self.output_positions.authority_end = base.positions.authority_end;
 1301|  16.1k|                    self.output_positions.path_end = base.positions.path_end;
 1302|  16.1k|                    self.remove_last_segment();
 1303|  16.1k|                    if self.output.len() > base.positions.scheme_end {
 1304|  16.1k|                        // We have some path or authority, we keep a base '/'
 1305|  16.1k|                        self.output.push('/');
 1306|  16.1k|                    }
 1307|  16.1k|                    self.parse_path()
 1308|       |                }
 1309|       |            }
 1310|       |        } else {
 1311|      0|            self.output_positions.scheme_end = 0;
 1312|      0|            self.input_scheme_end = 0;
 1313|      0|            if self.input.starts_with('/') {
 1314|      0|                self.input.next();
 1315|      0|                self.output.push('/');
 1316|      0|                self.parse_path_or_authority()
 1317|       |            } else {
 1318|      0|                self.output_positions.authority_end = 0;
 1319|      0|                self.parse_path()
 1320|       |            }
 1321|       |        }
 1322|   100k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb0_E15parse_authorityCs70uHazZwt5R_5oxttl:
 1342|  5.65k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|   100k|        loop {
 1345|   100k|            let c = self.input.next();
 1346|   100k|            match c {
 1347|       |                Some('@') => {
 1348|    184|                    self.output.push('@');
 1349|    184|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|  2.96k|                    self.input = ParserInput {
 1353|  2.96k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|  2.96k|                        position: self.input_scheme_end + 2,
 1355|  2.96k|                    };
 1356|  2.96k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|  2.96k|                    return self.parse_host();
 1358|       |                }
 1359|  97.1k|                Some(c) => {
 1360|  97.1k|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|  5.65k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb0_E16parse_path_startCs70uHazZwt5R_5oxttl:
 1428|  2.67k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|  2.67k|        match c {
 1430|       |            None => {
 1431|  1.22k|                self.output_positions.path_end = self.output.len();
 1432|  1.22k|                self.output_positions.query_end = self.output.len();
 1433|  1.22k|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|    144|                self.output_positions.path_end = self.output.len();
 1437|    144|                self.output.push('?');
 1438|    144|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|     96|                self.output_positions.path_end = self.output.len();
 1442|     96|                self.output_positions.query_end = self.output.len();
 1443|     96|                self.output.push('#');
 1444|     96|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|  1.20k|                self.output.push('/');
 1448|  1.20k|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|  2.67k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb0_E18parse_scheme_startCs70uHazZwt5R_5oxttl:
 1212|   104k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|   104k|        match self.input.front() {
 1214|    480|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|  99.9k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|  93.5k|            _ => self.parse_relative(),
 1217|       |        }
 1218|   104k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb0_E19remove_last_segmentCs70uHazZwt5R_5oxttl:
 1514|  89.0k|    fn remove_last_segment(&mut self) {
 1515|  89.0k|        let last_slash_position = self.output.as_str()[self.output_positions.authority_end..]
 1516|  89.0k|            .rfind('/')
 1517|  89.0k|            .unwrap_or(0);
 1518|  89.0k|        self.output
 1519|  89.0k|            .truncate(last_slash_position + self.output_positions.authority_end)
 1520|  89.0k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb0_E20parse_relative_slashCs70uHazZwt5R_5oxttl:
 1324|  77.0k|    fn parse_relative_slash(&mut self, base: &IriRef<&'a str>) -> Result<(), IriParseError> {
 1325|  77.0k|        if self.input.starts_with('/') {
 1326|  2.70k|            self.input.next();
 1327|  2.70k|            self.output.push_str(&base.iri[..base.positions.scheme_end]);
 1328|  2.70k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1329|  2.70k|            self.output.push('/');
 1330|  2.70k|            self.output.push('/');
 1331|  2.70k|            self.parse_authority()
 1332|       |        } else {
 1333|  74.3k|            self.output
 1334|  74.3k|                .push_str(&base.iri[..base.positions.authority_end]);
 1335|  74.3k|            self.output.push('/');
 1336|  74.3k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1337|  74.3k|            self.output_positions.authority_end = base.positions.authority_end;
 1338|  74.3k|            self.parse_path()
 1339|       |        }
 1340|  77.0k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb0_E23parse_path_or_authorityCs70uHazZwt5R_5oxttl:
 1252|  3.13k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|  3.13k|        if self.input.starts_with('/') {
 1254|  2.94k|            self.input.next();
 1255|  2.94k|            self.output.push('/');
 1256|  2.94k|            self.parse_authority()
 1257|       |        } else {
 1258|    182|            self.output_positions.authority_end = self.output.len() - 1;
 1259|    182|            self.parse_path()
 1260|       |        }
 1261|  3.13k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb0_E27read_url_codepoint_or_echarCs70uHazZwt5R_5oxttl:
 1523|   358k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|   358k|        if UNCHECKED || is_url_code_point(c) {
 1525|   344k|            self.output.push(c);
 1526|   344k|            Ok(())
 1527|  13.3k|        } else if c == '%' {
 1528|    950|            self.read_echar()
 1529|       |        } else {
 1530|  12.3k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|   358k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb0_E33read_url_query_codepoint_or_echarCs70uHazZwt5R_5oxttl:
 1535|  33.1k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|  33.1k|        if UNCHECKED || is_url_query_code_point(c) {
 1537|  30.9k|            self.output.push(c);
 1538|  30.9k|            Ok(())
 1539|  2.19k|        } else if c == '%' {
 1540|    680|            self.read_echar()
 1541|       |        } else {
 1542|  1.51k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|  33.1k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb0_E5parseCs70uHazZwt5R_5oxttl:
 1187|   104k|    fn parse(
 1188|   104k|        iri: &'a str,
 1189|   104k|        base: Option<IriRef<&'a str>>,
 1190|   104k|        output: &'a mut O,
 1191|   104k|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|   104k|        let mut parser = Self {
 1193|   104k|            iri,
 1194|   104k|            base,
 1195|   104k|            input: ParserInput {
 1196|   104k|                value: iri.chars(),
 1197|   104k|                position: 0,
 1198|   104k|            },
 1199|   104k|            output,
 1200|   104k|            output_positions: IriElementsPositions {
 1201|   104k|                scheme_end: 0,
 1202|   104k|                authority_end: 0,
 1203|   104k|                path_end: 0,
 1204|   104k|                query_end: 0,
 1205|   104k|            },
 1206|   104k|            input_scheme_end: 0,
 1207|   104k|        };
 1208|   104k|        parser.parse_scheme_start()?;
 1209|  89.0k|        Ok(parser.output_positions)
 1210|   104k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb1_E10parse_hostCs70uHazZwt5R_5oxttl:
 1366|  2.82k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|  2.82k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|     71|            let start_position = self.input.position;
 1370|  3.15k|            while let Some(c) = self.input.next() {
 1371|  3.08k|                self.output.push(c);
 1372|  3.08k|                if c == ']' {
 1373|      1|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|      1|                    if !UNCHECKED {
 1375|      0|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|      0|                        }
 1378|      1|                    }
 1379|       |
 1380|      1|                    let c = self.input.next();
 1381|      1|                    return match c {
 1382|       |                        Some(':') => {
 1383|      0|                            self.output.push(':');
 1384|      0|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|      0|                            self.output_positions.authority_end = self.output.len();
 1388|      0|                            self.parse_path_start(c)
 1389|       |                        }
 1390|      1|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|  3.07k|                }
 1393|       |            }
 1394|     70|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|  52.9k|            loop {
 1398|  52.9k|                let c = self.input.next();
 1399|  52.9k|                match c {
 1400|       |                    Some(':') => {
 1401|  1.28k|                        self.output.push(':');
 1402|  1.28k|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|  1.46k|                        self.output_positions.authority_end = self.output.len();
 1406|  1.46k|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|  50.2k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|  2.82k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb1_E10parse_pathCs70uHazZwt5R_5oxttl:
 1457|  47.2k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|   227k|        loop {
 1459|   227k|            let c = self.input.next();
 1460|   227k|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|  54.5k|                    if self.output.as_str().ends_with("/..") {
 1463|    200|                        self.remove_last_segment();
 1464|    200|                        self.remove_last_segment();
 1465|    200|                        self.output.push('/');
 1466|  54.3k|                    } else if self.output.as_str().ends_with("/.") {
 1467|  39.6k|                        self.remove_last_segment();
 1468|  39.6k|                        self.output.push('/');
 1469|  39.6k|                    } else if c == Some('/') {
 1470|  7.30k|                        self.output.push('/');
 1471|  7.38k|                    }
 1472|       |
 1473|  54.5k|                    if c == Some('?') {
 1474|    394|                        self.output_positions.path_end = self.output.len();
 1475|    394|                        self.output.push('?');
 1476|    394|                        return self.parse_query();
 1477|  54.1k|                    } else if c == Some('#') {
 1478|    671|                        self.output_positions.path_end = self.output.len();
 1479|    671|                        self.output_positions.query_end = self.output.len();
 1480|    671|                        self.output.push('#');
 1481|    671|                        return self.parse_fragment();
 1482|  53.4k|                    } else if c.is_none() {
 1483|  46.1k|                        self.output_positions.path_end = self.output.len();
 1484|  46.1k|                        self.output_positions.query_end = self.output.len();
 1485|  46.1k|                        return Ok(());
 1486|  7.32k|                    }
 1487|       |                }
 1488|   172k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|  47.2k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb1_E10parse_portCs70uHazZwt5R_5oxttl:
 1414|  1.28k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|  2.35k|        loop {
 1416|  2.35k|            let c = self.input.next();
 1417|  2.21k|            match c {
 1418|  2.21k|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|    835|                    self.output_positions.authority_end = self.output.len();
 1421|    835|                    return self.parse_path_start(c);
 1422|       |                }
 1423|    453|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|  1.28k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb1_E11parse_queryCs70uHazZwt5R_5oxttl:
 1493|  1.50k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|  27.7k|        while let Some(c) = self.input.next() {
 1495|  26.3k|            if c == '#' {
 1496|    140|                self.output_positions.query_end = self.output.len();
 1497|    140|                self.output.push('#');
 1498|    140|                return self.parse_fragment();
 1499|       |            } else {
 1500|  26.2k|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|  1.36k|        self.output_positions.query_end = self.output.len();
 1504|  1.36k|        Ok(())
 1505|  1.50k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb1_E12parse_schemeCs70uHazZwt5R_5oxttl:
 1220|  5.39k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|  31.8k|        loop {
 1222|  31.8k|            let c = self.input.next();
 1223|  31.2k|            match c {
 1224|  31.2k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|  26.4k|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|  2.16k|                    self.output.push(':');
 1229|  2.16k|                    self.output_positions.scheme_end = self.output.len();
 1230|  2.16k|                    self.input_scheme_end = self.input.position;
 1231|  2.16k|                    return if self.input.starts_with('/') {
 1232|  1.56k|                        self.input.next();
 1233|  1.56k|                        self.output.push('/');
 1234|  1.56k|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|    603|                        self.output_positions.authority_end = self.output.len();
 1237|    603|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|  3.22k|                    self.input = ParserInput {
 1242|  3.22k|                        value: self.iri.chars(),
 1243|  3.22k|                        position: 0,
 1244|  3.22k|                    }; // reset
 1245|  3.22k|                    self.output.clear();
 1246|  3.22k|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|  5.39k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb1_E14parse_fragmentCs70uHazZwt5R_5oxttl:
 1507|  1.00k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|  17.0k|        while let Some(c) = self.input.next() {
 1509|  16.0k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|  1.00k|        Ok(())
 1512|  1.00k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb1_E14parse_relativeCs70uHazZwt5R_5oxttl:
 1263|  49.9k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1264|  49.9k|        if let Some(base) = self.base {
 1265|  49.9k|            match self.input.front() {
 1266|       |                None => {
 1267|  2.19k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1268|  2.19k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1269|  2.19k|                    self.output_positions.authority_end = base.positions.authority_end;
 1270|  2.19k|                    self.output_positions.path_end = base.positions.path_end;
 1271|  2.19k|                    self.output_positions.query_end = base.positions.query_end;
 1272|  2.19k|                    Ok(())
 1273|       |                }
 1274|       |                Some('/') => {
 1275|  38.5k|                    self.input.next();
 1276|  38.5k|                    self.parse_relative_slash(&base)
 1277|       |                }
 1278|       |                Some('?') => {
 1279|  1.01k|                    self.input.next();
 1280|  1.01k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1281|  1.01k|                    self.output.push('?');
 1282|  1.01k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1283|  1.01k|                    self.output_positions.authority_end = base.positions.authority_end;
 1284|  1.01k|                    self.output_positions.path_end = base.positions.path_end;
 1285|  1.01k|                    self.parse_query()
 1286|       |                }
 1287|       |                Some('#') => {
 1288|    149|                    self.input.next();
 1289|    149|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1290|    149|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1291|    149|                    self.output_positions.authority_end = base.positions.authority_end;
 1292|    149|                    self.output_positions.path_end = base.positions.path_end;
 1293|    149|                    self.output_positions.query_end = base.positions.query_end;
 1294|    149|                    self.output.push('#');
 1295|    149|                    self.parse_fragment()
 1296|       |                }
 1297|       |                _ => {
 1298|  8.07k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1299|  8.07k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1300|  8.07k|                    self.output_positions.authority_end = base.positions.authority_end;
 1301|  8.07k|                    self.output_positions.path_end = base.positions.path_end;
 1302|  8.07k|                    self.remove_last_segment();
 1303|  8.07k|                    if self.output.len() > base.positions.scheme_end {
 1304|  8.07k|                        // We have some path or authority, we keep a base '/'
 1305|  8.07k|                        self.output.push('/');
 1306|  8.07k|                    }
 1307|  8.07k|                    self.parse_path()
 1308|       |                }
 1309|       |            }
 1310|       |        } else {
 1311|      0|            self.output_positions.scheme_end = 0;
 1312|      0|            self.input_scheme_end = 0;
 1313|      0|            if self.input.starts_with('/') {
 1314|      0|                self.input.next();
 1315|      0|                self.output.push('/');
 1316|      0|                self.parse_path_or_authority()
 1317|       |            } else {
 1318|      0|                self.output_positions.authority_end = 0;
 1319|      0|                self.parse_path()
 1320|       |            }
 1321|       |        }
 1322|  49.9k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb1_E15parse_authorityCs70uHazZwt5R_5oxttl:
 1342|  2.82k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|  57.9k|        loop {
 1345|  57.9k|            let c = self.input.next();
 1346|  57.9k|            match c {
 1347|       |                Some('@') => {
 1348|     93|                    self.output.push('@');
 1349|     93|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|  2.73k|                    self.input = ParserInput {
 1353|  2.73k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|  2.73k|                        position: self.input_scheme_end + 2,
 1355|  2.73k|                    };
 1356|  2.73k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|  2.73k|                    return self.parse_host();
 1358|       |                }
 1359|  55.1k|                Some(c) => {
 1360|  55.1k|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|  2.82k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb1_E16parse_path_startCs70uHazZwt5R_5oxttl:
 1428|  2.30k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|  2.30k|        match c {
 1430|       |            None => {
 1431|    931|                self.output_positions.path_end = self.output.len();
 1432|    931|                self.output_positions.query_end = self.output.len();
 1433|    931|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|     87|                self.output_positions.path_end = self.output.len();
 1437|     87|                self.output.push('?');
 1438|     87|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|     48|                self.output_positions.path_end = self.output.len();
 1442|     48|                self.output_positions.query_end = self.output.len();
 1443|     48|                self.output.push('#');
 1444|     48|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|  1.23k|                self.output.push('/');
 1448|  1.23k|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|  2.30k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb1_E18parse_scheme_startCs70uHazZwt5R_5oxttl:
 1212|  52.4k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|  52.4k|        match self.input.front() {
 1214|    240|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|  49.9k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|  46.7k|            _ => self.parse_relative(),
 1217|       |        }
 1218|  52.4k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb1_E19remove_last_segmentCs70uHazZwt5R_5oxttl:
 1514|  48.1k|    fn remove_last_segment(&mut self) {
 1515|  48.1k|        let last_slash_position = self.output.as_str()[self.output_positions.authority_end..]
 1516|  48.1k|            .rfind('/')
 1517|  48.1k|            .unwrap_or(0);
 1518|  48.1k|        self.output
 1519|  48.1k|            .truncate(last_slash_position + self.output_positions.authority_end)
 1520|  48.1k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb1_E20parse_relative_slashCs70uHazZwt5R_5oxttl:
 1324|  38.5k|    fn parse_relative_slash(&mut self, base: &IriRef<&'a str>) -> Result<(), IriParseError> {
 1325|  38.5k|        if self.input.starts_with('/') {
 1326|  1.35k|            self.input.next();
 1327|  1.35k|            self.output.push_str(&base.iri[..base.positions.scheme_end]);
 1328|  1.35k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1329|  1.35k|            self.output.push('/');
 1330|  1.35k|            self.output.push('/');
 1331|  1.35k|            self.parse_authority()
 1332|       |        } else {
 1333|  37.2k|            self.output
 1334|  37.2k|                .push_str(&base.iri[..base.positions.authority_end]);
 1335|  37.2k|            self.output.push('/');
 1336|  37.2k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1337|  37.2k|            self.output_positions.authority_end = base.positions.authority_end;
 1338|  37.2k|            self.parse_path()
 1339|       |        }
 1340|  38.5k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb1_E23parse_path_or_authorityCs70uHazZwt5R_5oxttl:
 1252|  1.56k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|  1.56k|        if self.input.starts_with('/') {
 1254|  1.47k|            self.input.next();
 1255|  1.47k|            self.output.push('/');
 1256|  1.47k|            self.parse_authority()
 1257|       |        } else {
 1258|     91|            self.output_positions.authority_end = self.output.len() - 1;
 1259|     91|            self.parse_path()
 1260|       |        }
 1261|  1.56k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb1_E27read_url_codepoint_or_echarCs70uHazZwt5R_5oxttl:
 1523|   294k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|   294k|        if UNCHECKED || is_url_code_point(c) {
 1525|   294k|            self.output.push(c);
 1526|   294k|            Ok(())
 1527|      0|        } else if c == '%' {
 1528|      0|            self.read_echar()
 1529|       |        } else {
 1530|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|   294k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb1_E33read_url_query_codepoint_or_echarCs70uHazZwt5R_5oxttl:
 1535|  26.2k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|  26.2k|        if UNCHECKED || is_url_query_code_point(c) {
 1537|  26.2k|            self.output.push(c);
 1538|  26.2k|            Ok(())
 1539|      0|        } else if c == '%' {
 1540|      0|            self.read_echar()
 1541|       |        } else {
 1542|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|  26.2k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtNtCsgcnyUjfByoh_5alloc6string6StringKb1_E5parseCs70uHazZwt5R_5oxttl:
 1187|  52.4k|    fn parse(
 1188|  52.4k|        iri: &'a str,
 1189|  52.4k|        base: Option<IriRef<&'a str>>,
 1190|  52.4k|        output: &'a mut O,
 1191|  52.4k|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|  52.4k|        let mut parser = Self {
 1193|  52.4k|            iri,
 1194|  52.4k|            base,
 1195|  52.4k|            input: ParserInput {
 1196|  52.4k|                value: iri.chars(),
 1197|  52.4k|                position: 0,
 1198|  52.4k|            },
 1199|  52.4k|            output,
 1200|  52.4k|            output_positions: IriElementsPositions {
 1201|  52.4k|                scheme_end: 0,
 1202|  52.4k|                authority_end: 0,
 1203|  52.4k|                path_end: 0,
 1204|  52.4k|                query_end: 0,
 1205|  52.4k|            },
 1206|  52.4k|            input_scheme_end: 0,
 1207|  52.4k|        };
 1208|  52.4k|        parser.parse_scheme_start()?;
 1209|  51.6k|        Ok(parser.output_positions)
 1210|  52.4k|    }
_RNvMsp_CsbnXcJDMqcDl_5oxiriINtB5_3IriNtNtCsgcnyUjfByoh_5alloc6string6StringE15parse_uncheckedCs70uHazZwt5R_5oxttl:
  574|    546|    pub fn parse_unchecked(iri: T) -> Result<Self, IriParseError> {
  575|    546|        IriRef::parse_unchecked(iri)?.try_into()
  576|    546|    }
_RNvMsp_CsbnXcJDMqcDl_5oxiriINtB5_3IriNtNtCsgcnyUjfByoh_5alloc6string6StringE17resolve_uncheckedCs70uHazZwt5R_5oxttl:
  605|  52.4k|    pub fn resolve_unchecked(&self, iri: &str) -> Result<Iri<String>, IriParseError> {
  606|  52.4k|        Ok(Iri(self.0.resolve_unchecked(iri)?))
  607|  52.4k|    }
_RNvMsp_CsbnXcJDMqcDl_5oxiriINtB5_3IriNtNtCsgcnyUjfByoh_5alloc6string6StringE7resolveCs70uHazZwt5R_5oxttl:
  591|   104k|    pub fn resolve(&self, iri: &str) -> Result<Iri<String>, IriParseError> {
  592|   104k|        Ok(Iri(self.0.resolve(iri)?))
  593|   104k|    }
_RNvCsbnXcJDMqcDl_5oxiri17is_url_code_pointCs70uHazZwt5R_5oxttl:
 1573|   391k|fn is_url_code_point(c: char) -> bool {
 1574|   391k|    matches!(c,
 1575|  97.8k|        'a'..='z'
 1576|  82.7k|        | 'A'..='Z'
 1577|  77.0k|        | '0'..='9'
 1578|       |        | '!'
 1579|       |        | '$'
 1580|       |        | '&'
 1581|       |        | '\''
 1582|       |        | '('
 1583|       |        | ')'
 1584|       |        | '*'
 1585|       |        | '+'
 1586|       |        | ','
 1587|       |        | '-'
 1588|       |        | '.'
 1589|       |        | '/'
 1590|       |        | ':'
 1591|       |        | ';'
 1592|       |        | '='
 1593|       |        | '?'
 1594|       |        | '@'
 1595|       |        | '_'
 1596|       |        | '~'
 1597|  2.10k|        | '\u{A0}'..='\u{D7FF}'
 1598|     66|        | '\u{F900}'..='\u{FDCF}'
 1599|      2|        | '\u{FDF0}'..='\u{FFEF}'
 1600|      2|        | '\u{10000}'..='\u{1FFFD}'
 1601|      2|        | '\u{20000}'..='\u{2FFFD}'
 1602|      2|        | '\u{30000}'..='\u{3FFFD}'
 1603|      2|        | '\u{40000}'..='\u{4FFFD}'
 1604|      2|        | '\u{50000}'..='\u{5FFFD}'
 1605|      2|        | '\u{60000}'..='\u{6FFFD}'
 1606|      2|        | '\u{70000}'..='\u{7FFFD}'
 1607|      2|        | '\u{80000}'..='\u{8FFFD}'
 1608|      2|        | '\u{90000}'..='\u{9FFFD}'
 1609|      2|        | '\u{A0000}'..='\u{AFFFD}'
 1610|      0|        | '\u{B0000}'..='\u{BFFFD}'
 1611|      0|        | '\u{C0000}'..='\u{CFFFD}'
 1612|      0|        | '\u{D0000}'..='\u{DFFFD}'
 1613|      0|        | '\u{E1000}'..='\u{EFFFD}'
 1614|       |    )
 1615|   391k|}
_RNvCsbnXcJDMqcDl_5oxiri23is_url_query_code_pointCs70uHazZwt5R_5oxttl:
 1618|  33.1k|fn is_url_query_code_point(c: char) -> bool {
 1619|  33.1k|    is_url_code_point(c)
 1620|  2.22k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1621|  33.1k|}
_RNvMs10_CsbnXcJDMqcDl_5oxiriNtB6_11ParserInput11starts_withCs70uHazZwt5R_5oxttl:
 1169|   134k|    fn starts_with(&self, c: char) -> bool {
 1170|   134k|        self.value.as_str().starts_with(c)
 1171|   134k|    }
_RNvMs10_CsbnXcJDMqcDl_5oxiriNtB6_11ParserInput4nextCs70uHazZwt5R_5oxttl:
 1154|  1.13M|    fn next(&mut self) -> Option<char> {
 1155|  1.13M|        if let Some(head) = self.value.next() {
 1156|   999k|            self.position += head.len_utf8();
 1157|   999k|            Some(head)
 1158|       |        } else {
 1159|   139k|            None
 1160|       |        }
 1161|  1.13M|    }
_RNvMs10_CsbnXcJDMqcDl_5oxiriNtB6_11ParserInput5frontCs70uHazZwt5R_5oxttl:
 1164|   307k|    fn front(&self) -> Option<char> {
 1165|   307k|        self.value.clone().next()
 1166|   307k|    }
_RNvXs1b_CsbnXcJDMqcDl_5oxiriNtB6_16VoidOutputBufferNtNtCsd3ZSx5keFHB_4core7default7Default7defaultCs70uHazZwt5R_5oxttl:
 1078|    546|#[derive(Default)]
_RNvXsY_CsbnXcJDMqcDl_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCs70uHazZwt5R_5oxttl:
 1105|  2.18k|    fn len(&self) -> usize {
 1106|  2.18k|        self.len
 1107|  2.18k|    }
_RNvXsY_CsbnXcJDMqcDl_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCs70uHazZwt5R_5oxttl:
 1085|  21.5k|    fn push(&mut self, c: char) {
 1086|  21.5k|        self.len += c.len_utf8();
 1087|  21.5k|    }
_RNvXsY_CsbnXcJDMqcDl_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCs70uHazZwt5R_5oxttl:
 1110|  1.25k|    fn as_str(&self) -> &str {
 1111|  1.25k|        ""
 1112|  1.25k|    }
_RNvXsY_CsbnXcJDMqcDl_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCs70uHazZwt5R_5oxttl:
 1100|    546|    fn truncate(&mut self, new_len: usize) {
 1101|    546|        self.len = new_len;
 1102|    546|    }
_RNCNvMs11_CsbnXcJDMqcDl_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0CsRRItI7FBc3_5oxrdf:
 1550|     40|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_CsbnXcJDMqcDl_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0CsRRItI7FBc3_5oxrdf:
 1551|     40|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMCsbnXcJDMqcDl_5oxiriINtB2_6IriRefNtNtCsgcnyUjfByoh_5alloc6string6StringE10into_innerCsRRItI7FBc3_5oxrdf:
  191|   216k|    pub fn into_inner(self) -> T {
  192|   216k|        self.iri
  193|   216k|    }
_RNvMCsbnXcJDMqcDl_5oxiriINtB2_6IriRefNtNtCsgcnyUjfByoh_5alloc6string6StringE11is_absoluteCsRRItI7FBc3_5oxrdf:
  205|  90.7k|    pub fn is_absolute(&self) -> bool {
  206|  90.7k|        self.positions.scheme_end != 0
  207|  90.7k|    }
_RNvMCsbnXcJDMqcDl_5oxiriINtB2_6IriRefNtNtCsgcnyUjfByoh_5alloc6string6StringE5parseCsRRItI7FBc3_5oxrdf:
   58|  90.1k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  90.1k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  90.1k|        Ok(Self { iri, positions })
   61|  90.1k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCsRRItI7FBc3_5oxrdf:
 1366|  89.9k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|  89.9k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|      0|            let start_position = self.input.position;
 1370|      0|            while let Some(c) = self.input.next() {
 1371|      0|                self.output.push(c);
 1372|      0|                if c == ']' {
 1373|      0|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|      0|                    if !UNCHECKED {
 1375|      0|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|      0|                        }
 1378|      0|                    }
 1379|       |
 1380|      0|                    let c = self.input.next();
 1381|      0|                    return match c {
 1382|       |                        Some(':') => {
 1383|      0|                            self.output.push(':');
 1384|      0|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|      0|                            self.output_positions.authority_end = self.output.len();
 1388|      0|                            self.parse_path_start(c)
 1389|       |                        }
 1390|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|      0|                }
 1393|       |            }
 1394|      0|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|  1.01M|            loop {
 1398|  1.01M|                let c = self.input.next();
 1399|  1.01M|                match c {
 1400|       |                    Some(':') => {
 1401|     41|                        self.output.push(':');
 1402|     41|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|  89.9k|                        self.output_positions.authority_end = self.output.len();
 1406|  89.9k|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|   924k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|  89.9k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCsRRItI7FBc3_5oxrdf:
 1457|  89.7k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|  1.60M|        loop {
 1459|  1.60M|            let c = self.input.next();
 1460|  1.60M|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|   216k|                    if self.output.as_str().ends_with("/..") {
 1463|      0|                        self.remove_last_segment();
 1464|      0|                        self.remove_last_segment();
 1465|      0|                        self.output.push('/');
 1466|   216k|                    } else if self.output.as_str().ends_with("/.") {
 1467|      0|                        self.remove_last_segment();
 1468|      0|                        self.output.push('/');
 1469|   216k|                    } else if c == Some('/') {
 1470|   126k|                        self.output.push('/');
 1471|   126k|                    }
 1472|       |
 1473|   216k|                    if c == Some('?') {
 1474|    123|                        self.output_positions.path_end = self.output.len();
 1475|    123|                        self.output.push('?');
 1476|    123|                        return self.parse_query();
 1477|   215k|                    } else if c == Some('#') {
 1478|  62.5k|                        self.output_positions.path_end = self.output.len();
 1479|  62.5k|                        self.output_positions.query_end = self.output.len();
 1480|  62.5k|                        self.output.push('#');
 1481|  62.5k|                        return self.parse_fragment();
 1482|   153k|                    } else if c.is_none() {
 1483|  27.0k|                        self.output_positions.path_end = self.output.len();
 1484|  27.0k|                        self.output_positions.query_end = self.output.len();
 1485|  27.0k|                        return Ok(());
 1486|   126k|                    }
 1487|       |                }
 1488|  1.39M|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|  89.7k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCsRRItI7FBc3_5oxrdf:
 1414|     41|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|     68|        loop {
 1416|     68|            let c = self.input.next();
 1417|     46|            match c {
 1418|     46|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|     41|                    self.output_positions.authority_end = self.output.len();
 1421|     41|                    return self.parse_path_start(c);
 1422|       |                }
 1423|      0|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|     41|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCsRRItI7FBc3_5oxrdf:
 1547|     40|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1548|     40|        let c1 = self.input.next();
 1549|     40|        let c2 = self.input.next();
 1550|     40|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1551|     40|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1552|       |        {
 1553|     40|            self.output.push('%');
 1554|     40|            self.output.push(c1.unwrap());
 1555|     40|            self.output.push(c2.unwrap());
 1556|     40|            Ok(())
 1557|       |        } else {
 1558|      0|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1559|      0|                Some('%'),
 1560|      0|                c1,
 1561|      0|                c2,
 1562|      0|            ]))
 1563|       |        }
 1564|     40|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCsRRItI7FBc3_5oxrdf:
 1493|    124|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|  1.64k|        while let Some(c) = self.input.next() {
 1495|  1.52k|            if c == '#' {
 1496|      8|                self.output_positions.query_end = self.output.len();
 1497|      8|                self.output.push('#');
 1498|      8|                return self.parse_fragment();
 1499|       |            } else {
 1500|  1.51k|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|    116|        self.output_positions.query_end = self.output.len();
 1504|    116|        Ok(())
 1505|    124|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCsRRItI7FBc3_5oxrdf:
 1220|  90.1k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|   451k|        loop {
 1222|   451k|            let c = self.input.next();
 1223|   451k|            match c {
 1224|   451k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|   360k|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|  90.1k|                    self.output.push(':');
 1229|  90.1k|                    self.output_positions.scheme_end = self.output.len();
 1230|  90.1k|                    self.input_scheme_end = self.input.position;
 1231|  90.1k|                    return if self.input.starts_with('/') {
 1232|  90.0k|                        self.input.next();
 1233|  90.0k|                        self.output.push('/');
 1234|  90.0k|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|    126|                        self.output_positions.authority_end = self.output.len();
 1237|    126|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|      0|                    self.input = ParserInput {
 1242|      0|                        value: self.iri.chars(),
 1243|      0|                        position: 0,
 1244|      0|                    }; // reset
 1245|      0|                    self.output.clear();
 1246|      0|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|  90.1k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCsRRItI7FBc3_5oxrdf:
 1507|  62.5k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|   352k|        while let Some(c) = self.input.next() {
 1509|   290k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|  62.5k|        Ok(())
 1512|  62.5k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCsRRItI7FBc3_5oxrdf:
 1342|  89.9k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|  1.01M|        loop {
 1345|  1.01M|            let c = self.input.next();
 1346|  1.01M|            match c {
 1347|       |                Some('@') => {
 1348|      6|                    self.output.push('@');
 1349|      6|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|  89.9k|                    self.input = ParserInput {
 1353|  89.9k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|  89.9k|                        position: self.input_scheme_end + 2,
 1355|  89.9k|                    };
 1356|  89.9k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|  89.9k|                    return self.parse_host();
 1358|       |                }
 1359|   924k|                Some(c) => {
 1360|   924k|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|  89.9k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCsRRItI7FBc3_5oxrdf:
 1428|  89.9k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|  89.9k|        match c {
 1430|       |            None => {
 1431|    369|                self.output_positions.path_end = self.output.len();
 1432|    369|                self.output_positions.query_end = self.output.len();
 1433|    369|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|      1|                self.output_positions.path_end = self.output.len();
 1437|      1|                self.output.push('?');
 1438|      1|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|      4|                self.output_positions.path_end = self.output.len();
 1442|      4|                self.output_positions.query_end = self.output.len();
 1443|      4|                self.output.push('#');
 1444|      4|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|  89.6k|                self.output.push('/');
 1448|  89.6k|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|  89.9k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCsRRItI7FBc3_5oxrdf:
 1212|  90.1k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|  90.1k|        match self.input.front() {
 1214|      0|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|  90.1k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|      0|            _ => self.parse_relative(),
 1217|       |        }
 1218|  90.1k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCsRRItI7FBc3_5oxrdf:
 1252|  90.0k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|  90.0k|        if self.input.starts_with('/') {
 1254|  89.9k|            self.input.next();
 1255|  89.9k|            self.output.push('/');
 1256|  89.9k|            self.parse_authority()
 1257|       |        } else {
 1258|     54|            self.output_positions.authority_end = self.output.len() - 1;
 1259|     54|            self.parse_path()
 1260|       |        }
 1261|  90.0k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarCsRRItI7FBc3_5oxrdf:
 1523|  3.52M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|  3.52M|        if UNCHECKED || is_url_code_point(c) {
 1525|  3.52M|            self.output.push(c);
 1526|  3.52M|            Ok(())
 1527|     20|        } else if c == '%' {
 1528|     20|            self.read_echar()
 1529|       |        } else {
 1530|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|  3.52M|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E33read_url_query_codepoint_or_echarCsRRItI7FBc3_5oxrdf:
 1535|  1.51k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|  1.51k|        if UNCHECKED || is_url_query_code_point(c) {
 1537|  1.49k|            self.output.push(c);
 1538|  1.49k|            Ok(())
 1539|     20|        } else if c == '%' {
 1540|     20|            self.read_echar()
 1541|       |        } else {
 1542|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|  1.51k|    }
_RNvMs11_CsbnXcJDMqcDl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCsRRItI7FBc3_5oxrdf:
 1187|  90.1k|    fn parse(
 1188|  90.1k|        iri: &'a str,
 1189|  90.1k|        base: Option<IriRef<&'a str>>,
 1190|  90.1k|        output: &'a mut O,
 1191|  90.1k|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|  90.1k|        let mut parser = Self {
 1193|  90.1k|            iri,
 1194|  90.1k|            base,
 1195|  90.1k|            input: ParserInput {
 1196|  90.1k|                value: iri.chars(),
 1197|  90.1k|                position: 0,
 1198|  90.1k|            },
 1199|  90.1k|            output,
 1200|  90.1k|            output_positions: IriElementsPositions {
 1201|  90.1k|                scheme_end: 0,
 1202|  90.1k|                authority_end: 0,
 1203|  90.1k|                path_end: 0,
 1204|  90.1k|                query_end: 0,
 1205|  90.1k|            },
 1206|  90.1k|            input_scheme_end: 0,
 1207|  90.1k|        };
 1208|  90.1k|        parser.parse_scheme_start()?;
 1209|  90.1k|        Ok(parser.output_positions)
 1210|  90.1k|    }
_RNvMsp_CsbnXcJDMqcDl_5oxiriINtB5_3IriNtNtCsgcnyUjfByoh_5alloc6string6StringE10into_innerCsRRItI7FBc3_5oxrdf:
  678|   216k|    pub fn into_inner(self) -> T {
  679|   216k|        self.0.into_inner()
  680|   216k|    }
_RNvMsp_CsbnXcJDMqcDl_5oxiriINtB5_3IriNtNtCsgcnyUjfByoh_5alloc6string6StringE5parseCsRRItI7FBc3_5oxrdf:
  562|  90.1k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  563|  90.1k|        IriRef::parse(iri)?.try_into()
  564|  90.1k|    }
_RNvXsV_CsbnXcJDMqcDl_5oxiriINtB5_3IriNtNtCsgcnyUjfByoh_5alloc6string6StringEINtNtCsd3ZSx5keFHB_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsRRItI7FBc3_5oxrdf:
  981|  90.7k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  982|  90.7k|        if iri.is_absolute() {
  983|  90.7k|            Ok(Self(iri))
  984|       |        } else {
  985|      0|            Err(IriParseError {
  986|      0|                kind: IriParseErrorKind::NoScheme,
  987|      0|            })
  988|       |        }
  989|  90.7k|    }
_RNvCsbnXcJDMqcDl_5oxiri17is_url_code_pointCsRRItI7FBc3_5oxrdf:
 1573|  3.53M|fn is_url_code_point(c: char) -> bool {
 1574|  3.53M|    matches!(c,
 1575|  2.39M|        'a'..='z'
 1576|  5.81k|        | 'A'..='Z'
 1577|   628k|        | '0'..='9'
 1578|       |        | '!'
 1579|       |        | '$'
 1580|       |        | '&'
 1581|       |        | '\''
 1582|       |        | '('
 1583|       |        | ')'
 1584|       |        | '*'
 1585|       |        | '+'
 1586|       |        | ','
 1587|       |        | '-'
 1588|       |        | '.'
 1589|       |        | '/'
 1590|       |        | ':'
 1591|       |        | ';'
 1592|       |        | '='
 1593|       |        | '?'
 1594|       |        | '@'
 1595|       |        | '_'
 1596|       |        | '~'
 1597|    125|        | '\u{A0}'..='\u{D7FF}'
 1598|     25|        | '\u{F900}'..='\u{FDCF}'
 1599|      0|        | '\u{FDF0}'..='\u{FFEF}'
 1600|      0|        | '\u{10000}'..='\u{1FFFD}'
 1601|      0|        | '\u{20000}'..='\u{2FFFD}'
 1602|      0|        | '\u{30000}'..='\u{3FFFD}'
 1603|      0|        | '\u{40000}'..='\u{4FFFD}'
 1604|      0|        | '\u{50000}'..='\u{5FFFD}'
 1605|      0|        | '\u{60000}'..='\u{6FFFD}'
 1606|      0|        | '\u{70000}'..='\u{7FFFD}'
 1607|      0|        | '\u{80000}'..='\u{8FFFD}'
 1608|      0|        | '\u{90000}'..='\u{9FFFD}'
 1609|      0|        | '\u{A0000}'..='\u{AFFFD}'
 1610|      0|        | '\u{B0000}'..='\u{BFFFD}'
 1611|      0|        | '\u{C0000}'..='\u{CFFFD}'
 1612|      0|        | '\u{D0000}'..='\u{DFFFD}'
 1613|      0|        | '\u{E1000}'..='\u{EFFFD}'
 1614|       |    )
 1615|  3.53M|}
_RNvCsbnXcJDMqcDl_5oxiri23is_url_query_code_pointCsRRItI7FBc3_5oxrdf:
 1618|  1.51k|fn is_url_query_code_point(c: char) -> bool {
 1619|  1.51k|    is_url_code_point(c)
 1620|     21|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1621|  1.51k|}
_RNvMs10_CsbnXcJDMqcDl_5oxiriNtB6_11ParserInput11starts_withCsRRItI7FBc3_5oxrdf:
 1169|   270k|    fn starts_with(&self, c: char) -> bool {
 1170|   270k|        self.value.as_str().starts_with(c)
 1171|   270k|    }
_RNvMs10_CsbnXcJDMqcDl_5oxiriNtB6_11ParserInput4nextCsRRItI7FBc3_5oxrdf:
 1154|  4.62M|    fn next(&mut self) -> Option<char> {
 1155|  4.62M|        if let Some(head) = self.value.next() {
 1156|  4.53M|            self.position += head.len_utf8();
 1157|  4.53M|            Some(head)
 1158|       |        } else {
 1159|  90.5k|            None
 1160|       |        }
 1161|  4.62M|    }
_RNvMs10_CsbnXcJDMqcDl_5oxiriNtB6_11ParserInput5frontCsRRItI7FBc3_5oxrdf:
 1164|  90.1k|    fn front(&self) -> Option<char> {
 1165|  90.1k|        self.value.clone().next()
 1166|  90.1k|    }
_RNvXs1b_CsbnXcJDMqcDl_5oxiriNtB6_16VoidOutputBufferNtNtCsd3ZSx5keFHB_4core7default7Default7defaultCsRRItI7FBc3_5oxrdf:
 1078|  90.1k|#[derive(Default)]
_RNvXsY_CsbnXcJDMqcDl_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCsRRItI7FBc3_5oxrdf:
 1105|   360k|    fn len(&self) -> usize {
 1106|   360k|        self.len
 1107|   360k|    }
_RNvXsY_CsbnXcJDMqcDl_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsRRItI7FBc3_5oxrdf:
 1085|  4.44M|    fn push(&mut self, c: char) {
 1086|  4.44M|        self.len += c.len_utf8();
 1087|  4.44M|    }
_RNvXsY_CsbnXcJDMqcDl_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCsRRItI7FBc3_5oxrdf:
 1110|   432k|    fn as_str(&self) -> &str {
 1111|   432k|        ""
 1112|   432k|    }
_RNvXsY_CsbnXcJDMqcDl_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCsRRItI7FBc3_5oxrdf:
 1100|  89.9k|    fn truncate(&mut self, new_len: usize) {
 1101|  89.9k|        self.len = new_len;
 1102|  89.9k|    }
_RNvXsW_CsbnXcJDMqcDl_5oxiriNtB5_13IriParseErrorNtNtCsd3ZSx5keFHB_4core3fmt7Display3fmt:
 1016|  16.5k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1017|  16.5k|        match &self.kind {
 1018|    720|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
 1019|    211|            IriParseErrorKind::InvalidHostCharacter(c) => {
 1020|    211|                write!(f, "Invalid character '{c}' in host")
 1021|       |            }
 1022|      2|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({e})"),
 1023|    609|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{c}'"),
 1024|  13.9k|            IriParseErrorKind::InvalidIriCodePoint(c) => {
 1025|  13.9k|                write!(f, "Invalid IRI code point '{c}'")
 1026|       |            }
 1027|  1.09k|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
 1028|  1.09k|                f,
 1029|  1.09k|                "Invalid IRI percent encoding '{}'",
 1030|  1.09k|                cs.iter().flatten().cloned().collect::<String>()
 1031|  1.09k|            ),
 1032|       |        }
 1033|  16.5k|    }

_RNvMNtCsbWYPB0ctNjO_10ppv_lite864softINtB2_2x2INtNtNtNtB4_6x86_644sse24avx212u32x4x2_avx2NtBP_4NoNIENtBN_2G0E3newCslScL8sYkQFs_11rand_chacha:
   13|  3.20M|    pub fn new(xs: [W; 2]) -> Self {
   14|  3.20M|        x2(xs, PhantomData)
   15|  3.20M|    }
_RNvXsG_NtCsbWYPB0ctNjO_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCsd3ZSx5keFHB_4core3ops3bit6BitXor6bitxorCslScL8sYkQFs_11rand_chacha:
   22|  1.12M|            fn $fn(self, rhs: Self) -> Self::Output {
   23|  1.12M|                x2::new([self.0[0].$fn(rhs.0[0]), self.0[1].$fn(rhs.0[1])])
   24|  1.12M|            }
_RNvXsM_NtCsbWYPB0ctNjO_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCsd3ZSx5keFHB_4core3ops5arith9AddAssign10add_assignCslScL8sYkQFs_11rand_chacha:
   32|  1.12M|            fn $fn_assign(&mut self, rhs: Self) {
   33|  1.12M|                (self.0[0]).$fn_assign(rhs.0[0]);
   34|  1.12M|                (self.0[1]).$fn_assign(rhs.0[1]);
   35|  1.12M|            }
_RNvXs_NtCsbWYPB0ctNjO_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right16CslScL8sYkQFs_11rand_chacha:
   42|   280k|        fn $fn(self) -> Self {
   43|   280k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   280k|        }
_RNvXs_NtCsbWYPB0ctNjO_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right20CslScL8sYkQFs_11rand_chacha:
   42|   280k|        fn $fn(self) -> Self {
   43|   280k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   280k|        }
_RNvXs_NtCsbWYPB0ctNjO_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right24CslScL8sYkQFs_11rand_chacha:
   42|   280k|        fn $fn(self) -> Self {
   43|   280k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   280k|        }
_RNvXs_NtCsbWYPB0ctNjO_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right25CslScL8sYkQFs_11rand_chacha:
   42|   280k|        fn $fn(self) -> Self {
   43|   280k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   280k|        }
_RNvXsg_NtCsbWYPB0ctNjO_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words1230CslScL8sYkQFs_11rand_chacha:
  208|   280k|    fn shuffle_lane_words1230(self) -> Self {
  209|   280k|        Self::new([
  210|   280k|            self.0[0].shuffle_lane_words1230(),
  211|   280k|            self.0[1].shuffle_lane_words1230(),
  212|   280k|        ])
  213|   280k|    }
_RNvXsg_NtCsbWYPB0ctNjO_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words2301CslScL8sYkQFs_11rand_chacha:
  201|   280k|    fn shuffle_lane_words2301(self) -> Self {
  202|   280k|        Self::new([
  203|   280k|            self.0[0].shuffle_lane_words2301(),
  204|   280k|            self.0[1].shuffle_lane_words2301(),
  205|   280k|        ])
  206|   280k|    }
_RNvXsg_NtCsbWYPB0ctNjO_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words3012CslScL8sYkQFs_11rand_chacha:
  215|   280k|    fn shuffle_lane_words3012(self) -> Self {
  216|   280k|        Self::new([
  217|   280k|            self.0[0].shuffle_lane_words3012(),
  218|   280k|            self.0[1].shuffle_lane_words3012(),
  219|   280k|        ])
  220|   280k|    }

_RINvYINtNtCsbWYPB0ctNjO_10ppv_lite866x86_6410SseMachineNtB6_5YesS3NtB6_5YesS4NtB6_4NoNIENtNtB8_5types7Machine7read_leINtNtB6_4sse210u32x4_sse2BR_B12_B1d_EECslScL8sYkQFs_11rand_chacha:
  259|    184|    fn read_le<V>(self, input: &[u8]) -> V
  260|    184|    where
  261|    184|        V: StoreBytes,
  262|    184|    {
  263|    184|        unsafe { V::unsafe_read_le(input) }
  264|    184|    }
_RINvYINtNtCsbWYPB0ctNjO_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine3vecINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EAmj4_ECslScL8sYkQFs_11rand_chacha:
  251|  23.3k|    fn vec<V, A>(self, a: A) -> V
  252|  23.3k|    where
  253|  23.3k|        V: MultiLane<A>,
  254|  23.3k|    {
  255|  23.3k|        V::from_lanes(a)
  256|  23.3k|    }
_RINvYINtNtCsbWYPB0ctNjO_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec128_storageINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EECslScL8sYkQFs_11rand_chacha:
  246|   210k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|   210k|        unsafe { V::unpack(s) }
  248|   210k|    }
_RINvYINtNtCsbWYPB0ctNjO_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec512_storageINtNtB8_4soft2x2INtNtNtB6_4sse24avx212u32x4x2_avx2BS_ENtB2b_2G0EECslScL8sYkQFs_11rand_chacha:
  246|  23.3k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|  23.3k|        unsafe { V::unpack(s) }
  248|  23.3k|    }

_RNvXNtCsbWYPB0ctNjO_10ppv_lite866x86_64INtB2_10SseMachineNtB2_5YesS3NtB2_5YesS4NtB2_4NoNIENtNtB4_5types7Machine8instanceCslScL8sYkQFs_11rand_chacha:
   64|     92|    unsafe fn instance() -> Self {
   65|     92|        SseMachine(PhantomData)
   66|     92|    }
_RNvXs_NtCsbWYPB0ctNjO_10ppv_lite866x86_64INtB4_11Avx2MachineNtB4_4NoNIENtNtB6_5types7Machine8instanceCslScL8sYkQFs_11rand_chacha:
   92|  23.3k|    unsafe fn instance() -> Self {
   93|  23.3k|        Avx2Machine(PhantomData)
   94|  23.3k|    }
_RNvNtCslScL8sYkQFs_11rand_chacha4guts11refill_wide:
  250|  23.3k|        $($pub$(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  251|  23.3k|            #[inline(always)]
  252|  23.3k|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  253|  23.3k|            use std::arch::x86_64::*;
  254|  23.3k|            #[target_feature(enable = "avx2")]
  255|  23.3k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  23.3k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  23.3k|                _mm256_zeroupper();
  258|  23.3k|                ret
  259|  23.3k|            }
  260|  23.3k|            #[target_feature(enable = "avx")]
  261|  23.3k|            #[target_feature(enable = "sse4.1")]
  262|  23.3k|            #[target_feature(enable = "ssse3")]
  263|  23.3k|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  264|  23.3k|                let ret = fn_impl($crate::x86_64::AVX::instance(), $($arg),*);
  265|  23.3k|                _mm256_zeroupper();
  266|  23.3k|                ret
  267|  23.3k|            }
  268|  23.3k|            #[target_feature(enable = "sse4.1")]
  269|  23.3k|            #[target_feature(enable = "ssse3")]
  270|  23.3k|            unsafe fn impl_sse41($($arg: $argty),*) -> $ret {
  271|  23.3k|                fn_impl($crate::x86_64::SSE41::instance(), $($arg),*)
  272|  23.3k|            }
  273|  23.3k|            #[target_feature(enable = "ssse3")]
  274|  23.3k|            unsafe fn impl_ssse3($($arg: $argty),*) -> $ret {
  275|  23.3k|                fn_impl($crate::x86_64::SSSE3::instance(), $($arg),*)
  276|  23.3k|            }
  277|  23.3k|            #[target_feature(enable = "sse2")]
  278|  23.3k|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  279|  23.3k|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  280|  23.3k|            }
  281|  23.3k|            unsafe {
  282|  23.3k|                if is_x86_feature_detected!("avx2") {
  283|  23.3k|                    impl_avx2($($arg),*)
  284|      0|                } else if is_x86_feature_detected!("avx") {
  285|      0|                    impl_avx($($arg),*)
  286|      0|                } else if is_x86_feature_detected!("sse4.1") {
  287|      0|                    impl_sse41($($arg),*)
  288|      0|                } else if is_x86_feature_detected!("ssse3") {
  289|      0|                    impl_ssse3($($arg),*)
  290|      0|                } else if is_x86_feature_detected!("sse2") {
  291|      0|                    impl_sse2($($arg),*)
  292|       |                } else {
  293|      0|                    unimplemented!()
  294|       |                }
  295|       |            }
  296|  23.3k|        }
_RNvNvNtCslScL8sYkQFs_11rand_chacha4guts11refill_wide9impl_avx2:
  255|  23.3k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  23.3k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  23.3k|                _mm256_zeroupper();
  258|  23.3k|                ret
  259|  23.3k|            }
_RNvNtCslScL8sYkQFs_11rand_chacha4guts11init_chacha:
  333|     92|        $($pub $(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  334|     92|            #[inline(always)]
  335|     92|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  336|     92|            use std::arch::x86_64::*;
  337|     92|            #[target_feature(enable = "avx")]
  338|     92|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|     92|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|     92|            }
  341|     92|            #[target_feature(enable = "sse2")]
  342|     92|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  343|     92|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  344|     92|            }
  345|     92|            unsafe {
  346|     92|                if is_x86_feature_detected!("avx") {
  347|     92|                    impl_avx($($arg),*)
  348|      0|                } else if is_x86_feature_detected!("sse2") {
  349|      0|                    impl_sse2($($arg),*)
  350|       |                } else {
  351|      0|                    unimplemented!()
  352|       |                }
  353|       |            }
  354|     92|        }
_RNvNvNtCslScL8sYkQFs_11rand_chacha4guts11init_chacha8impl_avx:
  338|     92|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|     92|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|     92|            }
_RNvXs2_NtCsbWYPB0ctNjO_10ppv_lite866x86_64NtB5_14vec128_storageINtNtCsd3ZSx5keFHB_4core7convert4FromAmj4_E4from:
  130|     92|    fn from(u32x4: [u32; 4]) -> Self {
  131|     92|        vec128_storage { u32x4 }
  132|     92|    }

_RNvMNtNtNtCsbWYPB0ctNjO_10ppv_lite866x86_644sse24avx2INtB2_12u32x4x2_avx2NtB6_4NoNIE3newCslScL8sYkQFs_11rand_chacha:
 1394|  8.65M|        fn new(x: __m256i) -> Self {
 1395|  8.65M|            Self { x, ni: PhantomData }
 1396|  8.65M|        }
_RNvMsZ_NtNtCsbWYPB0ctNjO_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIE3newCslScL8sYkQFs_11rand_chacha:
   64|  1.31M|            fn new(x: __m128i) -> Self {
   65|  1.31M|                $vec {
   66|  1.31M|                    x,
   67|  1.31M|                    s3: PhantomData,
   68|  1.31M|                    s4: PhantomData,
   69|  1.31M|                    ni: PhantomData,
   70|  1.31M|                }
   71|  1.31M|            }
_RNvXs0_NtNtNtCsbWYPB0ctNjO_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types5StoreNtB9_14vec256_storageE6unpackCslScL8sYkQFs_11rand_chacha:
 1402|  46.7k|        unsafe fn unpack(p: vec256_storage) -> Self {
 1403|  46.7k|            Self::new(p.avx)
 1404|  46.7k|        }
_RNvXs10_NtNtCsbWYPB0ctNjO_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes14unsafe_read_leCslScL8sYkQFs_11rand_chacha:
   79|    184|            unsafe fn unsafe_read_le(input: &[u8]) -> Self {
   80|    184|                assert_eq!(input.len(), 16);
   81|    184|                Self::new(_mm_loadu_si128(input.as_ptr() as *const _))
   82|    184|            }
_RNvXs10_NtNtCsbWYPB0ctNjO_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes8write_leCslScL8sYkQFs_11rand_chacha:
   89|   374k|            fn write_le(self, out: &mut [u8]) {
   90|   374k|                assert_eq!(out.len(), 16);
   91|   374k|                unsafe { _mm_storeu_si128(out.as_mut_ptr() as *mut _, self.x) }
   92|   374k|            }
_RNvXs1R_NtNtCsbWYPB0ctNjO_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtNtCsd3ZSx5keFHB_4core3ops5arith3Add3addCslScL8sYkQFs_11rand_chacha:
   18|   374k|            fn $fn(self, rhs: Self) -> Self::Output {
   19|   374k|                Self::new(unsafe { $impl_fn(self.x, rhs.x) })
   20|   374k|            }
_RNvXs2_NtNtNtCsbWYPB0ctNjO_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E10from_lanesCslScL8sYkQFs_11rand_chacha:
 1439|   187k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 2]) -> Self {
 1440|   187k|            Self::new(unsafe { _mm256_setr_m128i(x[0].x, x[1].x) })
 1441|   187k|        }
_RNvXs2_NtNtNtCsbWYPB0ctNjO_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E8to_lanesCslScL8sYkQFs_11rand_chacha:
 1430|   187k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 2] {
 1431|   187k|            unsafe {
 1432|   187k|                [
 1433|   187k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 0)),
 1434|   187k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 1)),
 1435|   187k|                ]
 1436|   187k|            }
 1437|   187k|        }
_RNvXs6_NtNtCsbWYPB0ctNjO_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E10from_lanesCslScL8sYkQFs_11rand_chacha:
  331|  23.3k|    fn from_lanes(xs: [u32; 4]) -> Self {
  332|  23.3k|        unsafe {
  333|  23.3k|            let mut x = _mm_cvtsi64_si128((xs[0] as u64 | ((xs[1] as u64) << 32)) as i64);
  334|  23.3k|            x = _mm_insert_epi64(x, (xs[2] as u64 | ((xs[3] as u64) << 32)) as i64, 1);
  335|  23.3k|            Self::new(x)
  336|  23.3k|        }
  337|  23.3k|    }
_RNvXs6_NtNtCsbWYPB0ctNjO_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E8to_lanesCslScL8sYkQFs_11rand_chacha:
  323|  93.5k|    fn to_lanes(self) -> [u32; 4] {
  324|  93.5k|        unsafe {
  325|  93.5k|            let x = _mm_cvtsi128_si64(self.x) as u64;
  326|  93.5k|            let y = _mm_extract_epi64(self.x, 1) as u64;
  327|  93.5k|            [x as u32, (x >> 32) as u32, y as u32, (y >> 32) as u32]
  328|  93.5k|        }
  329|  93.5k|    }
_RNvXs6_NtNtNtCsbWYPB0ctNjO_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right16CslScL8sYkQFs_11rand_chacha:
 1470|   561k|            fn $name(self) -> Self {
 1471|   561k|                Self::new(unsafe {
 1472|   561k|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|   561k|                })
 1474|   561k|            }
_RNvXs6_NtNtNtCsbWYPB0ctNjO_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right20CslScL8sYkQFs_11rand_chacha:
 1480|   561k|            fn $name(self) -> Self {
 1481|   561k|                Self::new(unsafe {
 1482|   561k|                    _mm256_or_si256(
 1483|   561k|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|   561k|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|   561k|                    )
 1486|   561k|                })
 1487|   561k|            }
_RNvXs6_NtNtNtCsbWYPB0ctNjO_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right24CslScL8sYkQFs_11rand_chacha:
 1470|   561k|            fn $name(self) -> Self {
 1471|   561k|                Self::new(unsafe {
 1472|   561k|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|   561k|                })
 1474|   561k|            }
_RNvXs6_NtNtNtCsbWYPB0ctNjO_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right25CslScL8sYkQFs_11rand_chacha:
 1480|   561k|            fn $name(self) -> Self {
 1481|   561k|                Self::new(unsafe {
 1482|   561k|                    _mm256_or_si256(
 1483|   561k|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|   561k|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|   561k|                    )
 1486|   561k|                })
 1487|   561k|            }
_RNvXsX_NtNtCsbWYPB0ctNjO_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types5StoreNtB7_14vec128_storageE6unpackCslScL8sYkQFs_11rand_chacha:
   52|   210k|            unsafe fn unpack(x: vec128_storage) -> Self {
   53|   210k|                Self::new(x.sse2)
   54|   210k|            }
_RNvXsc_NtNtNtCsbWYPB0ctNjO_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words1230CslScL8sYkQFs_11rand_chacha:
 1582|   561k|        fn shuffle_lane_words1230(self) -> Self {
 1583|   561k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b1001_0011) })
 1584|   561k|        }
_RNvXsc_NtNtNtCsbWYPB0ctNjO_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words2301CslScL8sYkQFs_11rand_chacha:
 1586|   561k|        fn shuffle_lane_words2301(self) -> Self {
 1587|   561k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0100_1110) })
 1588|   561k|        }
_RNvXsc_NtNtNtCsbWYPB0ctNjO_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words3012CslScL8sYkQFs_11rand_chacha:
 1590|   561k|        fn shuffle_lane_words3012(self) -> Self {
 1591|   561k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0011_1001) })
 1592|   561k|        }
_RNvXse_NtNtNtCsbWYPB0ctNjO_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types5StoreNtB9_14vec512_storageE6unpackCslScL8sYkQFs_11rand_chacha:
 1602|  23.3k|        unsafe fn unpack(p: vec512_storage) -> Self {
 1603|  23.3k|            Self::new([
 1604|  23.3k|                u32x4x2_avx2::unpack(p.avx[0]),
 1605|  23.3k|                u32x4x2_avx2::unpack(p.avx[1]),
 1606|  23.3k|            ])
 1607|  23.3k|        }
_RNvXsf_NtNtNtCsbWYPB0ctNjO_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E10from_lanesCslScL8sYkQFs_11rand_chacha:
 1617|  93.5k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 4]) -> Self {
 1618|  93.5k|            let ab = u32x4x2_avx2::from_lanes([x[0], x[1]]);
 1619|  93.5k|            let cd = u32x4x2_avx2::from_lanes([x[2], x[3]]);
 1620|  93.5k|            Self::new([ab, cd])
 1621|  93.5k|        }
_RNvXsf_NtNtNtCsbWYPB0ctNjO_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E8to_lanesCslScL8sYkQFs_11rand_chacha:
 1611|  93.5k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 4] {
 1612|  93.5k|            let [a, b] = self.0[0].to_lanes();
 1613|  93.5k|            let [c, d] = self.0[1].to_lanes();
 1614|  93.5k|            [a, b, c, d]
 1615|  93.5k|        }
_RNvXsl_NtNtCsbWYPB0ctNjO_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE6insertCslScL8sYkQFs_11rand_chacha:
  523|   327k|    fn insert(self, v: u32, i: u32) -> Self {
  524|   327k|        Self::new(unsafe {
  525|   327k|            match i {
  526|   163k|                0 => _mm_insert_epi32(self.x, v as i32, 0),
  527|   163k|                1 => _mm_insert_epi32(self.x, v as i32, 1),
  528|      0|                2 => _mm_insert_epi32(self.x, v as i32, 2),
  529|      0|                3 => _mm_insert_epi32(self.x, v as i32, 3),
  530|      0|                _ => unreachable!(),
  531|       |            }
  532|       |        })
  533|   327k|    }
_RNvXsl_NtNtCsbWYPB0ctNjO_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE7extractCslScL8sYkQFs_11rand_chacha:
  519|  93.5k|    fn extract(self, i: u32) -> u32 {
  520|  93.5k|        self.to_lanes()[i as usize]
  521|  93.5k|    }
_RNvXsq_NtNtNtCsbWYPB0ctNjO_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCsd3ZSx5keFHB_4core3ops5arith9AddAssign10add_assignCslScL8sYkQFs_11rand_chacha:
 1527|  2.24M|                fn $assign_fn(&mut self, rhs: Self) {
 1528|  2.24M|                    *self = self.$bin_fn(rhs);
 1529|  2.24M|                }
_RNvXsr_NtNtNtCsbWYPB0ctNjO_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCsd3ZSx5keFHB_4core3ops3bit6BitXor6bitxorCslScL8sYkQFs_11rand_chacha:
 1543|  2.24M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  2.24M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  2.24M|                }
_RNvXsv_NtNtNtCsbWYPB0ctNjO_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCsd3ZSx5keFHB_4core3ops5arith3Add3addCslScL8sYkQFs_11rand_chacha:
 1543|  2.24M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  2.24M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  2.24M|                }
_RNvXsY_NtNtCsbWYPB0ctNjO_10ppv_lite866x86_644sse2NtB7_14vec128_storageINtNtCsd3ZSx5keFHB_4core7convert4FromINtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEE4fromCslScL8sYkQFs_11rand_chacha:
   58|  23.5k|            fn from(x: $vec<S3, S4, NI>) -> Self {
   59|  23.5k|                vec128_storage { sse2: x.x }
   60|  23.5k|            }
_RNvXsj_NtNtNtCsbWYPB0ctNjO_10ppv_lite866x86_644sse24avx2NtB9_14vec512_storageINtNtCsd3ZSx5keFHB_4core7convert4FromINtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EE4fromCslScL8sYkQFs_11rand_chacha:
 1683|  23.3k|        fn from(x: u32x4x4_avx2<NI>) -> Self {
 1684|  23.3k|            Self {
 1685|  23.3k|                avx: [
 1686|  23.3k|                    vec256_storage { avx: x.0[0].x },
 1687|  23.3k|                    vec256_storage { avx: x.0[1].x },
 1688|  23.3k|                ],
 1689|  23.3k|            }
 1690|  23.3k|        }

_RINvXs2_NtNtCsfy544ACLbFA_4rand13distributions7integerNtB8_8StandardINtNtB8_12distribution12DistributionoE6sampleNtNtNtBa_4rngs6thread9ThreadRngECs70uHazZwt5R_5oxttl:
   51|   374k|    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u128 {
   52|   374k|        // Use LE; we explicitly generate one value before the next.
   53|   374k|        let x = u128::from(rng.next_u64());
   54|   374k|        let y = u128::from(rng.next_u64());
   55|   374k|        (y << 64) | x
   56|   374k|    }

_RINvCsfy544ACLbFA_4rand6randomoECs70uHazZwt5R_5oxttl:
  183|   374k|pub fn random<T>() -> T
  184|   374k|where Standard: Distribution<T> {
  185|   374k|    thread_rng().gen()
  186|   374k|}

_RINvYNtNtNtCsfy544ACLbFA_4rand4rngs6thread9ThreadRngNtNtB9_3rng3Rng3genoECs70uHazZwt5R_5oxttl:
   93|   374k|    fn gen<T>(&mut self) -> T
   94|   374k|    where Standard: Distribution<T> {
   95|   374k|        Standard.sample(self)
   96|   374k|    }

_RNvXs_NtNtNtCsfy544ACLbFA_4rand4rngs7adapter9reseedingINtB4_12ReseedingRngNtNtCslScL8sYkQFs_11rand_chacha6chacha12ChaCha12CoreNtNtCsddgTNow8fmN_9rand_core2os5OsRngENtB24_7RngCore8next_u64Cs70uHazZwt5R_5oxttl:
  124|   748k|    fn next_u64(&mut self) -> u64 {
  125|   748k|        self.0.next_u64()
  126|   748k|    }
_RNvMNtNtNtCsfy544ACLbFA_4rand4rngs7adapter9reseedingINtB2_12ReseedingRngNtNtCslScL8sYkQFs_11rand_chacha6chacha12ChaCha12CoreNtNtCsddgTNow8fmN_9rand_core2os5OsRngE3newB8_:
  101|      1|    pub fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  102|      1|        ReseedingRng(BlockRng::new(ReseedingCore::new(rng, threshold, reseeder)))
  103|      1|    }
_RNvXs2_NtNtNtCsfy544ACLbFA_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCslScL8sYkQFs_11rand_chacha6chacha12ChaCha12CoreNtNtCsddgTNow8fmN_9rand_core2os5OsRngENtNtB26_5block12BlockRngCore8generateBb_:
  173|  23.3k|    fn generate(&mut self, results: &mut Self::Results) {
  174|  23.3k|        let global_fork_counter = fork::get_fork_counter();
  175|  23.3k|        if self.bytes_until_reseed <= 0 || self.is_forked(global_fork_counter) {
  176|       |            // We get better performance by not calling only `reseed` here
  177|       |            // and continuing with the rest of the function, but by directly
  178|       |            // returning from a non-inlined function.
  179|     91|            return self.reseed_and_generate(results, global_fork_counter);
  180|  23.3k|        }
  181|  23.3k|        let num_bytes = results.as_ref().len() * size_of::<Self::Item>();
  182|  23.3k|        self.bytes_until_reseed -= num_bytes as i64;
  183|  23.3k|        self.inner.generate(results);
  184|  23.3k|    }
_RNvMs3_NtNtNtCsfy544ACLbFA_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCslScL8sYkQFs_11rand_chacha6chacha12ChaCha12CoreNtNtCsddgTNow8fmN_9rand_core2os5OsRngE3newBb_:
  193|      1|    fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  194|      1|        use ::core::i64::MAX;
  195|      1|        fork::register_fork_handler();
  196|       |
  197|       |        // Because generating more values than `i64::MAX` takes centuries on
  198|       |        // current hardware, we just clamp to that value.
  199|       |        // Also we set a threshold of 0, which indicates no limit, to that
  200|       |        // value.
  201|      1|        let threshold = if threshold == 0 {
  202|      0|            MAX
  203|      1|        } else if threshold <= MAX as u64 {
  204|      1|            threshold as i64
  205|       |        } else {
  206|      0|            MAX
  207|       |        };
  208|       |
  209|      1|        ReseedingCore {
  210|      1|            inner: rng,
  211|      1|            reseeder,
  212|      1|            threshold: threshold as i64,
  213|      1|            bytes_until_reseed: threshold as i64,
  214|      1|            fork_counter: 0,
  215|      1|        }
  216|      1|    }
_RNvMs3_NtNtNtCsfy544ACLbFA_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCslScL8sYkQFs_11rand_chacha6chacha12ChaCha12CoreNtNtCsddgTNow8fmN_9rand_core2os5OsRngE6reseedBb_:
  219|     91|    fn reseed(&mut self) -> Result<(), Error> {
  220|     91|        R::from_rng(&mut self.reseeder).map(|result| {
  221|       |            self.bytes_until_reseed = self.threshold;
  222|       |            self.inner = result
  223|     91|        })
  224|     91|    }
_RNCNvMs3_NtNtNtCsfy544ACLbFA_4rand4rngs7adapter9reseedingINtB7_13ReseedingCoreNtNtCslScL8sYkQFs_11rand_chacha6chacha12ChaCha12CoreNtNtCsddgTNow8fmN_9rand_core2os5OsRngE6reseed0Bd_:
  220|     91|        R::from_rng(&mut self.reseeder).map(|result| {
  221|     91|            self.bytes_until_reseed = self.threshold;
  222|     91|            self.inner = result
  223|     91|        })
_RNvMs3_NtNtNtCsfy544ACLbFA_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCslScL8sYkQFs_11rand_chacha6chacha12ChaCha12CoreNtNtCsddgTNow8fmN_9rand_core2os5OsRngE9is_forkedBb_:
  226|  23.3k|    fn is_forked(&self, global_fork_counter: usize) -> bool {
  227|  23.3k|        // In theory, on 32-bit platforms, it is possible for
  228|  23.3k|        // `global_fork_counter` to wrap around after ~4e9 forks.
  229|  23.3k|        //
  230|  23.3k|        // This check will detect a fork in the normal case where
  231|  23.3k|        // `fork_counter < global_fork_counter`, and also when the difference
  232|  23.3k|        // between both is greater than `isize::MAX` (wrapped around).
  233|  23.3k|        //
  234|  23.3k|        // It will still fail to detect a fork if there have been more than
  235|  23.3k|        // `isize::MAX` forks, without any reseed in between. Seems unlikely
  236|  23.3k|        // enough.
  237|  23.3k|        (self.fork_counter.wrapping_sub(global_fork_counter) as isize) < 0
  238|  23.3k|    }
_RNvMs3_NtNtNtCsfy544ACLbFA_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCslScL8sYkQFs_11rand_chacha6chacha12ChaCha12CoreNtNtCsddgTNow8fmN_9rand_core2os5OsRngE19reseed_and_generateBb_:
  241|     91|    fn reseed_and_generate(
  242|     91|        &mut self, results: &mut <Self as BlockRngCore>::Results, global_fork_counter: usize,
  243|     91|    ) {
  244|     91|        #![allow(clippy::if_same_then_else)] // false positive
  245|     91|        if self.is_forked(global_fork_counter) {
  246|      0|            info!("Fork detected, reseeding RNG");
  247|     91|        } else {
  248|     91|            trace!("Reseeding RNG (periodic reseed)");
  249|     91|        }
  250|       |
  251|     91|        let num_bytes = results.as_ref().len() * size_of::<<R as BlockRngCore>::Item>();
  252|       |
  253|     91|        if let Err(e) = self.reseed() {
  254|      0|            warn!("Reseeding RNG failed: {}", e);
  255|      0|            let _ = e;
  256|     91|        }
  257|     91|        self.fork_counter = global_fork_counter;
  258|     91|
  259|     91|        self.bytes_until_reseed = self.threshold - num_bytes as i64;
  260|     91|        self.inner.generate(results);
  261|     91|    }
_RNvNtNtNtNtCsfy544ACLbFA_4rand4rngs7adapter9reseeding4fork16get_fork_counter:
  307|  23.3k|    pub fn get_fork_counter() -> usize {
  308|  23.3k|        RESEEDING_RNG_FORK_COUNTER.load(Ordering::Relaxed)
  309|  23.3k|    }
_RNvNtNtNtNtCsfy544ACLbFA_4rand4rngs7adapter9reseeding4fork21register_fork_handler:
  317|      1|    pub fn register_fork_handler() {
  318|      1|        static REGISTER: Once = Once::new();
  319|      1|        REGISTER.call_once(|| {
  320|       |            // Bump the counter before and after forking (see #1169):
  321|       |            let ret = unsafe { libc::pthread_atfork(
  322|       |                Some(fork_handler),
  323|       |                Some(fork_handler),
  324|       |                Some(fork_handler),
  325|       |            ) };
  326|       |            if ret != 0 {
  327|       |                panic!("libc::pthread_atfork failed with code {}", ret);
  328|       |            }
  329|      1|        });
  330|      1|    }
_RNCNvNtNtNtNtCsfy544ACLbFA_4rand4rngs7adapter9reseeding4fork21register_fork_handler0Bb_:
  319|      1|        REGISTER.call_once(|| {
  320|      1|            // Bump the counter before and after forking (see #1169):
  321|      1|            let ret = unsafe { libc::pthread_atfork(
  322|      1|                Some(fork_handler),
  323|      1|                Some(fork_handler),
  324|      1|                Some(fork_handler),
  325|      1|            ) };
  326|      1|            if ret != 0 {
  327|      0|                panic!("libc::pthread_atfork failed with code {}", ret);
  328|      1|            }
  329|      1|        });

_RNvXs_NtNtCsfy544ACLbFA_4rand4rngs6threadNtB4_9ThreadRngNtCsddgTNow8fmN_9rand_core7RngCore8next_u64:
  109|   748k|    fn next_u64(&mut self) -> u64 {
  110|   748k|        // SAFETY: We must make sure to stop using `rng` before anyone else
  111|   748k|        // creates another mutable reference
  112|   748k|        let rng = unsafe { &mut *self.rng.get() };
  113|   748k|        rng.next_u64()
  114|   748k|    }
_RNvNtNtCsfy544ACLbFA_4rand4rngs6thread10thread_rng:
   88|   374k|pub fn thread_rng() -> ThreadRng {
   89|   374k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
   90|   374k|    ThreadRng { rng }
   91|   374k|}
_RNCNvNtNtCsfy544ACLbFA_4rand4rngs6thread10thread_rng0B7_:
   89|   374k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
_RNCNvNvNtNtCsfy544ACLbFA_4rand4rngs6thread14THREAD_RNG_KEY7___getit0B9_:
   67|      1|thread_local!(
   68|      1|    // We require Rc<..> to avoid premature freeing when thread_rng is used
   69|      1|    // within thread-local destructors. See #968.
   70|      1|    static THREAD_RNG_KEY: Rc<UnsafeCell<ReseedingRng<Core, OsRng>>> = {
   71|      1|        let r = Core::from_rng(OsRng).unwrap_or_else(|err|
   72|      1|                panic!("could not initialize thread_rng: {}", err));
   73|      1|        let rng = ReseedingRng::new(r,
   74|      1|                                    THREAD_RNG_RESEED_THRESHOLD,
   75|      1|                                    OsRng);
   76|      1|        Rc::new(UnsafeCell::new(rng))
   77|      1|    }
   78|      1|);

_RNvXsm_NtCslScL8sYkQFs_11rand_chacha6chachaNtB5_12ChaCha12CoreNtNtCsddgTNow8fmN_9rand_core5block12BlockRngCore8generateCsfy544ACLbFA_4rand:
   89|  23.3k|            fn generate(&mut self, r: &mut Self::Results) {
   90|  23.3k|                // Fill slice of words by writing to equivalent slice of bytes, then fixing endianness.
   91|  23.3k|                self.state.refill4($rounds, unsafe {
   92|  23.3k|                    &mut *(&mut *r as *mut Array64<u32> as *mut [u8; 256])
   93|  23.3k|                });
   94|  1.49M|                for x in r.as_mut() {
   95|  1.49M|                    *x = x.to_le();
   96|  1.49M|                }
   97|  23.3k|            }
_RNvXsn_NtCslScL8sYkQFs_11rand_chacha6chachaNtB5_12ChaCha12CoreNtCsddgTNow8fmN_9rand_core11SeedableRng9from_seedCsfy544ACLbFA_4rand:
  103|     92|            fn from_seed(seed: Self::Seed) -> Self {
  104|     92|                $ChaChaXCore { state: ChaCha::new(&seed, &[0u8; 8]) }
  105|     92|            }
_RNvXs_NtCslScL8sYkQFs_11rand_chacha6chachaINtB4_7Array64mEINtNtCsd3ZSx5keFHB_4core7convert5AsRefSmE6as_refB6_:
   46|  1.54M|    fn as_ref(&self) -> &[T] {
   47|  1.54M|        &self.0
   48|  1.54M|    }
_RNvXs0_NtCslScL8sYkQFs_11rand_chacha6chachaINtB5_7Array64mEINtNtCsd3ZSx5keFHB_4core7convert5AsMutSmE6as_mutB7_:
   51|  23.3k|    fn as_mut(&mut self) -> &mut [T] {
   52|  23.3k|        &mut self.0
   53|  23.3k|    }
_RNvXNtCslScL8sYkQFs_11rand_chacha6chachaINtB2_7Array64mENtNtCsd3ZSx5keFHB_4core7default7Default7defaultB4_:
   32|      1|    fn default() -> Self {
   33|      1|        Self([
   34|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   35|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   36|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   37|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   38|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   39|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   40|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   41|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   42|      1|        ])
   43|      1|    }

_RNvMNtCslScL8sYkQFs_11rand_chacha4gutsNtB2_6ChaCha3new:
   72|     92|    pub fn new(key: &[u8; 32], nonce: &[u8]) -> Self {
   73|     92|        init_chacha(key, nonce)
   74|     92|    }
_RNvMNtCslScL8sYkQFs_11rand_chacha4gutsNtB2_6ChaCha7refill4:
   84|  23.3k|    pub fn refill4(&mut self, drounds: u32, out: &mut [u8; BUFSZ]) {
   85|  23.3k|        refill_wide(self, drounds, out)
   86|  23.3k|    }
_RINvNtCslScL8sYkQFs_11rand_chacha4guts5roundINtNtCsbWYPB0ctNjO_10ppv_lite864soft2x2INtNtNtNtBL_6x86_644sse24avx212u32x4x2_avx2NtB1q_4NoNIENtB1o_2G0EEB4_:
   43|   280k|pub(crate) fn round<V: ArithOps + BitOps32>(mut x: State<V>) -> State<V> {
   44|   280k|    x.a += x.b;
   45|   280k|    x.d = (x.d ^ x.a).rotate_each_word_right16();
   46|   280k|    x.c += x.d;
   47|   280k|    x.b = (x.b ^ x.c).rotate_each_word_right20();
   48|   280k|    x.a += x.b;
   49|   280k|    x.d = (x.d ^ x.a).rotate_each_word_right24();
   50|   280k|    x.c += x.d;
   51|   280k|    x.b = (x.b ^ x.c).rotate_each_word_right25();
   52|   280k|    x
   53|   280k|}
_RINvNtCslScL8sYkQFs_11rand_chacha4guts11diagonalizeINtNtCsbWYPB0ctNjO_10ppv_lite864soft2x2INtNtNtNtBS_6x86_644sse24avx212u32x4x2_avx2NtB1x_4NoNIENtB1v_2G0EEB4_:
   56|   140k|pub(crate) fn diagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   57|   140k|    x.b = x.b.shuffle_lane_words3012();
   58|   140k|    x.c = x.c.shuffle_lane_words2301();
   59|   140k|    x.d = x.d.shuffle_lane_words1230();
   60|   140k|    x
   61|   140k|}
_RINvNtCslScL8sYkQFs_11rand_chacha4guts13undiagonalizeINtNtCsbWYPB0ctNjO_10ppv_lite864soft2x2INtNtNtNtBU_6x86_644sse24avx212u32x4x2_avx2NtB1z_4NoNIENtB1x_2G0EEB4_:
   63|   140k|pub(crate) fn undiagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   64|   140k|    x.b = x.b.shuffle_lane_words1230();
   65|   140k|    x.c = x.c.shuffle_lane_words2301();
   66|   140k|    x.d = x.d.shuffle_lane_words3012();
   67|   140k|    x
   68|   140k|}
_RINvMNtCslScL8sYkQFs_11rand_chacha4gutsNtB3_6ChaCha5pos64INtNtCsbWYPB0ctNjO_10ppv_lite866x86_6411Avx2MachineNtBW_4NoNIEEB5_:
   77|  46.7k|    fn pos64<M: Machine>(&self, m: M) -> u64 {
   78|  46.7k|        let d: M::u32x4 = m.unpack(self.d);
   79|  46.7k|        ((d.extract(1) as u64) << 32) | d.extract(0) as u64
   80|  46.7k|    }
_RINvNtCslScL8sYkQFs_11rand_chacha4guts16refill_wide_implINtNtCsbWYPB0ctNjO_10ppv_lite866x86_6411Avx2MachineNtBV_4NoNIEEB4_:
  116|  23.3k|fn refill_wide_impl<Mach: Machine>(
  117|  23.3k|    m: Mach, state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ],
  118|  23.3k|) {
  119|  23.3k|    let k = m.vec([0x6170_7865, 0x3320_646e, 0x7962_2d32, 0x6b20_6574]);
  120|  23.3k|    let mut pos = state.pos64(m);
  121|  23.3k|    let d0: Mach::u32x4 = m.unpack(state.d);
  122|  23.3k|    pos = pos.wrapping_add(1);
  123|  23.3k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  124|  23.3k|    pos = pos.wrapping_add(1);
  125|  23.3k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  126|  23.3k|    pos = pos.wrapping_add(1);
  127|  23.3k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  128|  23.3k|
  129|  23.3k|    let b = m.unpack(state.b);
  130|  23.3k|    let c = m.unpack(state.c);
  131|  23.3k|    let mut x = State {
  132|  23.3k|        a: Mach::u32x4x4::from_lanes([k, k, k, k]),
  133|  23.3k|        b: Mach::u32x4x4::from_lanes([b, b, b, b]),
  134|  23.3k|        c: Mach::u32x4x4::from_lanes([c, c, c, c]),
  135|  23.3k|        d: m.unpack(Mach::u32x4x4::from_lanes([d0, d1, d2, d3]).into()),
  136|  23.3k|    };
  137|   140k|    for _ in 0..drounds {
  138|   140k|        x = round(x);
  139|   140k|        x = undiagonalize(round(diagonalize(x)));
  140|   140k|    }
  141|  23.3k|    let mut pos = state.pos64(m);
  142|  23.3k|    let d0: Mach::u32x4 = m.unpack(state.d);
  143|  23.3k|    pos = pos.wrapping_add(1);
  144|  23.3k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  145|  23.3k|    pos = pos.wrapping_add(1);
  146|  23.3k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  147|  23.3k|    pos = pos.wrapping_add(1);
  148|  23.3k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  149|  23.3k|    pos = pos.wrapping_add(1);
  150|  23.3k|    let d4 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  151|  23.3k|
  152|  23.3k|    let (a, b, c, d) = (
  153|  23.3k|        x.a.to_lanes(),
  154|  23.3k|        x.b.to_lanes(),
  155|  23.3k|        x.c.to_lanes(),
  156|  23.3k|        x.d.to_lanes(),
  157|  23.3k|    );
  158|  23.3k|    let sb = m.unpack(state.b);
  159|  23.3k|    let sc = m.unpack(state.c);
  160|  23.3k|    let sd = [m.unpack(state.d), d1, d2, d3];
  161|  23.3k|    state.d = d4.into();
  162|  23.3k|    let mut words = out.chunks_exact_mut(16);
  163|  93.5k|    for ((((&a, &b), &c), &d), &sd) in a.iter().zip(&b).zip(&c).zip(&d).zip(&sd) {
  164|  93.5k|        (a + k).write_le(words.next().unwrap());
  165|  93.5k|        (b + sb).write_le(words.next().unwrap());
  166|  93.5k|        (c + sc).write_le(words.next().unwrap());
  167|  93.5k|        (d + sd).write_le(words.next().unwrap());
  168|  93.5k|    }
  169|  23.3k|}
_RNvNtCslScL8sYkQFs_11rand_chacha4guts10read_u32le:
  229|    184|fn read_u32le(xs: &[u8]) -> u32 {
  230|    184|    assert_eq!(xs.len(), 4);
  231|    184|    u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24)
  232|    184|}
_RINvNvNtCslScL8sYkQFs_11rand_chacha4guts11refill_wide7fn_implINtNtCsbWYPB0ctNjO_10ppv_lite866x86_6411Avx2MachineNtB10_4NoNIEEB6_:
  172|  23.3k|    fn refill_wide(state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ]) {
  173|  23.3k|        refill_wide_impl(m, state, drounds, out);
  174|  23.3k|    }
_RINvNvNtCslScL8sYkQFs_11rand_chacha4guts11init_chacha7fn_implINtNtCsbWYPB0ctNjO_10ppv_lite866x86_6410SseMachineNtB10_5YesS3NtB10_5YesS4NtB10_4NoNIEEB6_:
  235|     92|    fn init_chacha(key: &[u8; 32], nonce: &[u8]) -> ChaCha {
  236|     92|        let ctr_nonce = [
  237|       |            0,
  238|     92|            if nonce.len() == 12 {
  239|      0|                read_u32le(&nonce[0..4])
  240|       |            } else {
  241|     92|                0
  242|       |            },
  243|     92|            read_u32le(&nonce[nonce.len() - 8..nonce.len() - 4]),
  244|     92|            read_u32le(&nonce[nonce.len() - 4..]),
  245|     92|        ];
  246|     92|        let key0: Mach::u32x4 = m.read_le(&key[..16]);
  247|     92|        let key1: Mach::u32x4 = m.read_le(&key[16..]);
  248|     92|        ChaCha {
  249|     92|            b: key0.into(),
  250|     92|            c: key1.into(),
  251|     92|            d: ctr_nonce.into(),
  252|     92|        }

_RNCNvXs0_NtCsddgTNow8fmN_9rand_core5blockINtB7_8BlockRngINtNtNtNtCsfy544ACLbFA_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCslScL8sYkQFs_11rand_chacha6chacha12ChaCha12CoreNtNtB9_2os5OsRngEENtB9_7RngCore8next_u640Cs70uHazZwt5R_5oxttl:
  198|   748k|        let read_u64 = |results: &[u32], index| {
  199|   748k|            let data = &results[index..=index + 1];
  200|   748k|            u64::from(data[1]) << 32 | u64::from(data[0])
  201|   748k|        };
_RNvXs0_NtCsddgTNow8fmN_9rand_core5blockINtB5_8BlockRngINtNtNtNtCsfy544ACLbFA_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCslScL8sYkQFs_11rand_chacha6chacha12ChaCha12CoreNtNtB7_2os5OsRngEENtB7_7RngCore8next_u64Cs70uHazZwt5R_5oxttl:
  197|   748k|    fn next_u64(&mut self) -> u64 {
  198|   748k|        let read_u64 = |results: &[u32], index| {
  199|       |            let data = &results[index..=index + 1];
  200|       |            u64::from(data[1]) << 32 | u64::from(data[0])
  201|       |        };
  202|       |
  203|   748k|        let len = self.results.as_ref().len();
  204|   748k|
  205|   748k|        let index = self.index;
  206|   748k|        if index < len - 1 {
  207|   725k|            self.index += 2;
  208|   725k|            // Read an u64 from the current index
  209|   725k|            read_u64(self.results.as_ref(), index)
  210|  23.3k|        } else if index >= len {
  211|  23.3k|            self.generate_and_set(2);
  212|  23.3k|            read_u64(self.results.as_ref(), 0)
  213|       |        } else {
  214|      0|            let x = u64::from(self.results.as_ref()[len - 1]);
  215|      0|            self.generate_and_set(1);
  216|      0|            let y = u64::from(self.results.as_ref()[0]);
  217|      0|            (y << 32) | x
  218|       |        }
  219|   748k|    }
_RNvMs_NtCsddgTNow8fmN_9rand_core5blockINtB4_8BlockRngINtNtNtNtCsfy544ACLbFA_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCslScL8sYkQFs_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE16generate_and_setBY_:
  174|  23.3k|    pub fn generate_and_set(&mut self, index: usize) {
  175|  23.3k|        assert!(index < self.results.as_ref().len());
  176|  23.3k|        self.core.generate(&mut self.results);
  177|  23.3k|        self.index = index;
  178|  23.3k|    }
_RNvMs_NtCsddgTNow8fmN_9rand_core5blockINtB4_8BlockRngINtNtNtNtCsfy544ACLbFA_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCslScL8sYkQFs_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE3newBY_:
  145|      1|    pub fn new(core: R) -> BlockRng<R> {
  146|      1|        let results_empty = R::Results::default();
  147|      1|        BlockRng {
  148|      1|            core,
  149|      1|            index: results_empty.as_ref().len(),
  150|      1|            results: results_empty,
  151|      1|        }
  152|      1|    }

_RINvYNtNtCslScL8sYkQFs_11rand_chacha6chacha12ChaCha12CoreNtCsddgTNow8fmN_9rand_core11SeedableRng8from_rngNtNtBV_2os5OsRngECsfy544ACLbFA_4rand:
  390|      1|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|      1|        let mut seed = Self::Seed::default();
  392|      1|        rng.try_fill_bytes(seed.as_mut())?;
  393|      1|        Ok(Self::from_seed(seed))
  394|      1|    }
_RINvYNtNtCslScL8sYkQFs_11rand_chacha6chacha12ChaCha12CoreNtCsddgTNow8fmN_9rand_core11SeedableRng8from_rngQNtNtBV_2os5OsRngECsfy544ACLbFA_4rand:
  390|     91|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|     91|        let mut seed = Self::Seed::default();
  392|     91|        rng.try_fill_bytes(seed.as_mut())?;
  393|     91|        Ok(Self::from_seed(seed))
  394|     91|    }
_RNvXs_CsddgTNow8fmN_9rand_coreQNtNtB4_2os5OsRngNtB4_7RngCore14try_fill_bytesCsfy544ACLbFA_4rand:
  441|     91|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
  442|     91|        (**self).try_fill_bytes(dest)
  443|     91|    }

_RNvXs_NtCsddgTNow8fmN_9rand_core2osNtB4_5OsRngNtB6_7RngCore14try_fill_bytes:
   67|     92|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
   68|     92|        getrandom(dest)?;
   69|     92|        Ok(())
   70|     92|    }

_RNvNvNtNtCsfy544ACLbFA_4rand4rngs6thread14THREAD_RNG_KEY6___initB7_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNtNtCsfy544ACLbFA_4rand4rngs6thread14THREAD_RNG_KEY7___getitB7_:
   83|   374k|            unsafe fn __getit(
   84|   374k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|   374k|            ) -> $crate::option::Option<&'static $t> {
   86|   374k|                #[thread_local]
   87|   374k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|   374k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|   374k|
   90|   374k|                unsafe {
   91|   374k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|   374k|                    })
  101|   374k|                }
  102|   374k|            }

_RNvCsa1xq2UewJGb_4trig22count_quad_blank_nodes:
   53|  71.3k|fn count_quad_blank_nodes(quad: &Quad) -> usize {
   54|  71.3k|    (match &quad.subject {
   55|  58.1k|        Subject::BlankNode(_) => 1,
   56|      0|        Subject::Triple(t) => count_triple_blank_nodes(t),
   57|  13.1k|        _ => 0,
   58|  71.3k|    }) + (match &quad.object {
   59|  42.4k|        Term::BlankNode(_) => 1,
   60|      0|        Term::Triple(t) => count_triple_blank_nodes(t),
   61|  28.8k|        _ => 0,
   62|  71.3k|    }) + usize::from(matches!(quad.graph_name, GraphName::BlankNode(_)))
   63|  71.3k|}
_RNvCsa1xq2UewJGb_4trig15serialize_quads:
   65|  4.67k|fn serialize_quads(quads: &[Quad]) -> Vec<u8> {
   66|  4.67k|    let mut writer = TriGSerializer::new().serialize_to_write(Vec::new());
   67|  76.0k|    for quad in quads {
   68|  71.3k|        writer.write_quad(quad).unwrap();
   69|  71.3k|    }
   70|  4.67k|    writer.finish().unwrap()
   71|  4.67k|}
_RINvCsa1xq2UewJGb_4trig5parseARShj1_EB2_:
    7|  4.67k|fn parse<'a>(
    8|  4.67k|    chunks: impl IntoIterator<Item = &'a [u8]>,
    9|  4.67k|    unchecked: bool,
   10|  4.67k|) -> (Vec<Quad>, Vec<String>) {
   11|  4.67k|    let mut quads = Vec::new();
   12|  4.67k|    let mut errors = Vec::new();
   13|  4.67k|    let mut parser = TriGParser::new()
   14|  4.67k|        .with_quoted_triples()
   15|  4.67k|        .with_base_iri("http://example.com/")
   16|  4.67k|        .unwrap();
   17|  4.67k|    if unchecked {
   18|      0|        parser = parser.unchecked();
   19|  4.67k|    }
   20|  4.67k|    let mut reader = parser.parse();
   21|  9.34k|    for chunk in chunks {
   22|  4.67k|        reader.extend_from_slice(chunk);
   23|   481k|        while let Some(result) = reader.read_next() {
   24|   476k|            match result {
   25|  71.2k|                Ok(quad) => quads.push(quad),
   26|   405k|                Err(error) => errors.push(error.to_string()),
   27|       |            }
   28|       |        }
   29|       |    }
   30|  4.67k|    reader.end();
   31|  6.86k|    while let Some(result) = reader.read_next() {
   32|  2.19k|        match result {
   33|    114|            Ok(quad) => quads.push(quad),
   34|  2.07k|            Err(error) => errors.push(error.to_string()),
   35|       |        }
   36|       |    }
   37|  4.67k|    assert!(reader.is_end());
   38|  4.67k|    (quads, errors)
   39|  4.67k|}
_RINvCsa1xq2UewJGb_4trig5parseINtNtNtCsd3ZSx5keFHB_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_run0EEB2_:
    7|  4.67k|fn parse<'a>(
    8|  4.67k|    chunks: impl IntoIterator<Item = &'a [u8]>,
    9|  4.67k|    unchecked: bool,
   10|  4.67k|) -> (Vec<Quad>, Vec<String>) {
   11|  4.67k|    let mut quads = Vec::new();
   12|  4.67k|    let mut errors = Vec::new();
   13|  4.67k|    let mut parser = TriGParser::new()
   14|  4.67k|        .with_quoted_triples()
   15|  4.67k|        .with_base_iri("http://example.com/")
   16|  4.67k|        .unwrap();
   17|  4.67k|    if unchecked {
   18|      0|        parser = parser.unchecked();
   19|  4.67k|    }
   20|  4.67k|    let mut reader = parser.parse();
   21|   563k|    for chunk in chunks {
   22|   558k|        reader.extend_from_slice(chunk);
   23|  1.03M|        while let Some(result) = reader.read_next() {
   24|   476k|            match result {
   25|  71.2k|                Ok(quad) => quads.push(quad),
   26|   405k|                Err(error) => errors.push(error.to_string()),
   27|       |            }
   28|       |        }
   29|       |    }
   30|  4.67k|    reader.end();
   31|  6.86k|    while let Some(result) = reader.read_next() {
   32|  2.19k|        match result {
   33|    114|            Ok(quad) => quads.push(quad),
   34|  2.07k|            Err(error) => errors.push(error.to_string()),
   35|       |        }
   36|       |    }
   37|  4.67k|    assert!(reader.is_end());
   38|  4.67k|    (quads, errors)
   39|  4.67k|}
_RINvCsa1xq2UewJGb_4trig5parseINtNtNtCsd3ZSx5keFHB_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_runs0_0EEB2_:
    7|  4.67k|fn parse<'a>(
    8|  4.67k|    chunks: impl IntoIterator<Item = &'a [u8]>,
    9|  4.67k|    unchecked: bool,
   10|  4.67k|) -> (Vec<Quad>, Vec<String>) {
   11|  4.67k|    let mut quads = Vec::new();
   12|  4.67k|    let mut errors = Vec::new();
   13|  4.67k|    let mut parser = TriGParser::new()
   14|  4.67k|        .with_quoted_triples()
   15|  4.67k|        .with_base_iri("http://example.com/")
   16|  4.67k|        .unwrap();
   17|  4.67k|    if unchecked {
   18|  4.67k|        parser = parser.unchecked();
   19|  4.67k|    }
   20|  4.67k|    let mut reader = parser.parse();
   21|   563k|    for chunk in chunks {
   22|   558k|        reader.extend_from_slice(chunk);
   23|  1.03M|        while let Some(result) = reader.read_next() {
   24|   479k|            match result {
   25|  75.9k|                Ok(quad) => quads.push(quad),
   26|   403k|                Err(error) => errors.push(error.to_string()),
   27|       |            }
   28|       |        }
   29|       |    }
   30|  4.67k|    reader.end();
   31|  6.89k|    while let Some(result) = reader.read_next() {
   32|  2.22k|        match result {
   33|    117|            Ok(quad) => quads.push(quad),
   34|  2.10k|            Err(error) => errors.push(error.to_string()),
   35|       |        }
   36|       |    }
   37|  4.67k|    assert!(reader.is_end());
   38|  4.67k|    (quads, errors)
   39|  4.67k|}
_RNCNvNvCsa1xq2UewJGb_4trig1__19___libfuzzer_sys_run0B5_:
   75|  2.52M|    let (quads, errors) = parse(data.split(|c| *c == 0xFF), false);
_RNCNvNvCsa1xq2UewJGb_4trig1__19___libfuzzer_sys_runs_0B5_:
   81|  2.52M|            .filter(|c| *c != 0xFF)
_RNCNvNvCsa1xq2UewJGb_4trig1__19___libfuzzer_sys_runs0_0B5_:
   86|  2.52M|    let (quads_unchecked, errors_unchecked) = parse(data.split(|c| *c == 0xFF), true);

_RNvMNtCsRRItI7FBc3_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCsa1xq2UewJGb_4trig:
   92|   163k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   93|   163k|        BlankNodeRef(match &self.0 {
   94|    851|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   95|   163k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   96|   163k|                id: *id,
   97|   163k|                str: str.as_str(),
   98|   163k|            },
   99|       |        })
  100|   163k|    }
_RNvMs1_NtCsRRItI7FBc3_5oxrdf10blank_nodeNtB5_12BlankNodeRef10into_ownedCsa1xq2UewJGb_4trig:
  208|  53.8k|    pub fn into_owned(self) -> BlankNode {
  209|  53.8k|        BlankNode(match self.0 {
  210|     47|            BlankNodeRefContent::Named(id) => BlankNodeContent::Named(id.to_owned()),
  211|  53.8k|            BlankNodeRefContent::Anonymous { id, .. } => BlankNodeContent::Anonymous {
  212|  53.8k|                id,
  213|  53.8k|                str: IdStr::new(id),
  214|  53.8k|            },
  215|       |        })
  216|  53.8k|    }
_RNvMs1_NtCsRRItI7FBc3_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCsa1xq2UewJGb_4trig:
  183|     52|    pub const fn as_str(self) -> &'a str {
  184|     52|        match self.0 {
  185|     47|            BlankNodeRefContent::Named(id) => id,
  186|      5|            BlankNodeRefContent::Anonymous { str, .. } => str,
  187|       |        }
  188|     52|    }
_RNvMs7_NtCsRRItI7FBc3_5oxrdf10blank_nodeNtB5_5IdStr3newCsa1xq2UewJGb_4trig:
  259|  53.8k|    fn new(id: u128) -> Self {
  260|  53.8k|        let mut str = [0; 32];
  261|  53.8k|        write!(&mut str[..], "{id:x}").unwrap();
  262|  53.8k|        Self(str)
  263|  53.8k|    }
_RNvMs7_NtCsRRItI7FBc3_5oxrdf10blank_nodeNtB5_5IdStr6as_strCsa1xq2UewJGb_4trig:
  266|   163k|    fn as_str(&self) -> &str {
  267|   163k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  268|   163k|        str::from_utf8(&self.0[..len]).unwrap()
  269|   163k|    }
_RNvXs2_NtCsRRItI7FBc3_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCsd3ZSx5keFHB_4core3fmt7Display3fmtCsa1xq2UewJGb_4trig:
  221|     52|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  222|     52|        write!(f, "_:{}", self.as_str())
  223|     52|    }
_RNvXsF_NtCsRRItI7FBc3_5oxrdf10blank_nodeNtB5_5IdStrNtNtCsd3ZSx5keFHB_4core3cmp9PartialEq2eqCsa1xq2UewJGb_4trig:
  254|   100k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsd_NtCsRRItI7FBc3_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCsd3ZSx5keFHB_4core3cmp9PartialEq2eqCsa1xq2UewJGb_4trig:
   24|   100k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsi_NtCsRRItI7FBc3_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCsd3ZSx5keFHB_4core3cmp9PartialEq2eqCsa1xq2UewJGb_4trig:
   27|   100k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsr_NtCsRRItI7FBc3_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCsd3ZSx5keFHB_4core3cmp9PartialEq2eqCsa1xq2UewJGb_4trig:
  142|  55.5k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RNvXsx_NtCsRRItI7FBc3_5oxrdf10blank_nodeNtB5_19BlankNodeRefContentNtNtCsd3ZSx5keFHB_4core3cmp9PartialEq2eqCsa1xq2UewJGb_4trig:
  145|  55.5k|#[derive(PartialEq, Eq, Debug, Clone, Copy, Hash)]
_RINvMNtCsRRItI7FBc3_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedReECs70uHazZwt5R_5oxttl:
   53|  98.0k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   54|  98.0k|        let id = id.into();
   55|  98.0k|        if let Some(numerical_id) = to_integer_id(&id) {
   56|  96.5k|            Self::new_from_unique_id(numerical_id)
   57|       |        } else {
   58|  1.47k|            Self(BlankNodeContent::Named(id))
   59|       |        }
   60|  98.0k|    }
_RNvMNtCsRRItI7FBc3_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idCs70uHazZwt5R_5oxttl:
   66|  96.5k|    pub fn new_from_unique_id(id: u128) -> Self {
   67|  96.5k|        Self(BlankNodeContent::Anonymous {
   68|  96.5k|            id,
   69|  96.5k|            str: IdStr::new(id),
   70|  96.5k|        })
   71|  96.5k|    }
_RNvMs1_NtCsRRItI7FBc3_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCs70uHazZwt5R_5oxttl:
  183|  96.2k|    pub const fn as_str(self) -> &'a str {
  184|  96.2k|        match self.0 {
  185|    168|            BlankNodeRefContent::Named(id) => id,
  186|  96.0k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  187|       |        }
  188|  96.2k|    }
_RNvMs7_NtCsRRItI7FBc3_5oxrdf10blank_nodeNtB5_5IdStr3newCs70uHazZwt5R_5oxttl:
  259|   470k|    fn new(id: u128) -> Self {
  260|   470k|        let mut str = [0; 32];
  261|   470k|        write!(&mut str[..], "{id:x}").unwrap();
  262|   470k|        Self(str)
  263|   470k|    }
_RNvMs7_NtCsRRItI7FBc3_5oxrdf10blank_nodeNtB5_5IdStr6as_strCs70uHazZwt5R_5oxttl:
  266|   374k|    fn as_str(&self) -> &str {
  267|   374k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  268|   374k|        str::from_utf8(&self.0[..len]).unwrap()
  269|   374k|    }
_RNvNtCsRRItI7FBc3_5oxrdf10blank_node13to_integer_idCs70uHazZwt5R_5oxttl:
  332|  98.0k|fn to_integer_id(id: &str) -> Option<u128> {
  333|  98.0k|    let digits = id.as_bytes();
  334|  98.0k|    let mut value: u128 = 0;
  335|  98.0k|    if let None | Some(b'0') = digits.first() {
  336|    837|        return None; // No empty string or leading zeros
  337|  97.2k|    }
  338|  3.17M|    for digit in digits {
  339|  3.07M|        value = value.checked_mul(16)?.checked_add(
  340|  3.07M|            match *digit {
  341|  3.07M|                b'0'..=b'9' => digit - b'0',
  342|  1.21M|                b'a'..=b'f' => digit - b'a' + 10,
  343|    442|                _ => return None,
  344|       |            }
  345|  3.07M|            .into(),
  346|      0|        )?;
  347|       |    }
  348|  96.5k|    Some(value)
  349|  98.0k|}
_RNvXs0_NtCsRRItI7FBc3_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCsd3ZSx5keFHB_4core7default7Default7defaultCs70uHazZwt5R_5oxttl:
  113|   149k|    fn default() -> Self {
  114|       |        // We ensure the ID does not start with a number to be also valid with RDF/XML
  115|   374k|        loop {
  116|   374k|            let id = random();
  117|   374k|            let str = IdStr::new(id);
  118|   374k|            if matches!(str.as_str().as_bytes().first(), Some(b'a'..=b'f')) {
  119|   149k|                return Self(BlankNodeContent::Anonymous { id, str });
  120|   224k|            }
  121|       |        }
  122|   149k|    }
_RNvXs2_NtCsRRItI7FBc3_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCsd3ZSx5keFHB_4core3fmt7Display3fmtCs70uHazZwt5R_5oxttl:
  221|  96.2k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  222|  96.2k|        write!(f, "_:{}", self.as_str())
  223|  96.2k|    }
_RNvXsJ_NtCsRRItI7FBc3_5oxrdf10blank_nodeNtB5_5IdStrNtNtCsd3ZSx5keFHB_4core5clone5Clone5cloneCs70uHazZwt5R_5oxttl:
  254|   480k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsf_NtCsRRItI7FBc3_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCsd3ZSx5keFHB_4core5clone5Clone5cloneCs70uHazZwt5R_5oxttl:
   24|   481k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsm_NtCsRRItI7FBc3_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCsd3ZSx5keFHB_4core5clone5Clone5cloneCs70uHazZwt5R_5oxttl:
   27|   481k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNCNvMs7_NtCsRRItI7FBc3_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  267|  17.5M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
_RNvMNtCsRRItI7FBc3_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idB4_:
   66|  19.6k|    pub fn new_from_unique_id(id: u128) -> Self {
   67|  19.6k|        Self(BlankNodeContent::Anonymous {
   68|  19.6k|            id,
   69|  19.6k|            str: IdStr::new(id),
   70|  19.6k|        })
   71|  19.6k|    }
_RNvMNtCsRRItI7FBc3_5oxrdf10blank_nodeNtB2_9BlankNode6as_refB4_:
   92|  19.6k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   93|  19.6k|        BlankNodeRef(match &self.0 {
   94|      0|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   95|  19.6k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   96|  19.6k|                id: *id,
   97|  19.6k|                str: str.as_str(),
   98|  19.6k|            },
   99|       |        })
  100|  19.6k|    }
_RNvMs1_NtCsRRItI7FBc3_5oxrdf10blank_nodeNtB5_12BlankNodeRef13new_uncheckedB7_:
  170|  2.96k|    pub fn new_unchecked(id: &'a str) -> Self {
  171|  2.96k|        if let Some(numerical_id) = to_integer_id(id) {
  172|  2.96k|            Self(BlankNodeRefContent::Anonymous {
  173|  2.96k|                id: numerical_id,
  174|  2.96k|                str: id,
  175|  2.96k|            })
  176|       |        } else {
  177|      0|            Self(BlankNodeRefContent::Named(id))
  178|       |        }
  179|  2.96k|    }
_RNvMs1_NtCsRRItI7FBc3_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strB7_:
  183|  9.85k|    pub const fn as_str(self) -> &'a str {
  184|  9.85k|        match self.0 {
  185|    164|            BlankNodeRefContent::Named(id) => id,
  186|  9.68k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  187|       |        }
  188|  9.85k|    }
_RNvMs1_NtCsRRItI7FBc3_5oxrdf10blank_nodeNtB5_12BlankNodeRef9unique_idB7_:
  200|  28.5k|    pub const fn unique_id(&self) -> Option<u128> {
  201|  28.5k|        match self.0 {
  202|    164|            BlankNodeRefContent::Named(_) => None,
  203|  28.3k|            BlankNodeRefContent::Anonymous { id, .. } => Some(id),
  204|       |        }
  205|  28.5k|    }
_RNvMs7_NtCsRRItI7FBc3_5oxrdf10blank_nodeNtB5_5IdStr3newB7_:
  259|  19.6k|    fn new(id: u128) -> Self {
  260|  19.6k|        let mut str = [0; 32];
  261|  19.6k|        write!(&mut str[..], "{id:x}").unwrap();
  262|  19.6k|        Self(str)
  263|  19.6k|    }
_RNvMs7_NtCsRRItI7FBc3_5oxrdf10blank_nodeNtB5_5IdStr6as_strB7_:
  266|  19.6k|    fn as_str(&self) -> &str {
  267|  19.6k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  268|  19.6k|        str::from_utf8(&self.0[..len]).unwrap()
  269|  19.6k|    }
_RNvNtCsRRItI7FBc3_5oxrdf10blank_node13to_integer_idB3_:
  332|  2.96k|fn to_integer_id(id: &str) -> Option<u128> {
  333|  2.96k|    let digits = id.as_bytes();
  334|  2.96k|    let mut value: u128 = 0;
  335|  2.96k|    if let None | Some(b'0') = digits.first() {
  336|      0|        return None; // No empty string or leading zeros
  337|  2.96k|    }
  338|  50.2k|    for digit in digits {
  339|  47.3k|        value = value.checked_mul(16)?.checked_add(
  340|  47.3k|            match *digit {
  341|  47.3k|                b'0'..=b'9' => digit - b'0',
  342|  17.5k|                b'a'..=b'f' => digit - b'a' + 10,
  343|      0|                _ => return None,
  344|       |            }
  345|  47.3k|            .into(),
  346|      0|        )?;
  347|       |    }
  348|  2.96k|    Some(value)
  349|  2.96k|}

_RINvMNtCsRRItI7FBc3_5oxrdf7datasetNtB3_7Dataset6insertRNtNtB5_6triple4QuadECsa1xq2UewJGb_4trig:
  360|  23.8k|    pub fn insert<'a>(&mut self, quad: impl Into<QuadRef<'a>>) -> bool {
  361|  23.8k|        let quad = self.encode_quad(quad.into());
  362|  23.8k|        self.insert_encoded(quad)
  363|  23.8k|    }
_RINvXs3_NtCsRRItI7FBc3_5oxrdf7datasetNtB6_7DatasetINtNtNtNtCsd3ZSx5keFHB_4core4iter6traits7collect12FromIteratorRNtNtB8_6triple4QuadE9from_iterINtNtNtBV_5slice4iter4IterB1N_EECsa1xq2UewJGb_4trig:
  944|  2.14k|    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self {
  945|  2.14k|        let mut g = Self::new();
  946|  2.14k|        g.extend(iter);
  947|  2.14k|        g
  948|  2.14k|    }
_RINvXs5_NtCsRRItI7FBc3_5oxrdf7datasetNtB6_7DatasetINtNtNtNtCsd3ZSx5keFHB_4core4iter6traits7collect6ExtendRNtNtB8_6triple4QuadE6extendINtNtNtBV_5slice4iter4IterB1G_EECsa1xq2UewJGb_4trig:
  960|  2.14k|    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  961|  25.9k|        for t in iter {
  962|  23.8k|            self.insert(t);
  963|  23.8k|        }
  964|  2.14k|    }
_RNvMNtCsRRItI7FBc3_5oxrdf7datasetNtB2_7Dataset3new:
  109|  2.14k|    pub fn new() -> Self {
  110|  2.14k|        Self::default()
  111|  2.14k|    }
_RNvMNtCsRRItI7FBc3_5oxrdf7datasetNtB2_7Dataset4iter:
  169|  1.07k|    pub fn iter(&self) -> Iter<'_> {
  170|  1.07k|        let iter = self.spog.iter();
  171|  1.07k|        Iter {
  172|  1.07k|            dataset: self,
  173|  1.07k|            inner: iter,
  174|  1.07k|        }
  175|  1.07k|    }
_RNvMNtCsRRItI7FBc3_5oxrdf7datasetNtB2_7Dataset3len:
  350|  2.14k|    pub fn len(&self) -> usize {
  351|  2.14k|        self.gspo.len()
  352|  2.14k|    }
_RNvMNtCsRRItI7FBc3_5oxrdf7datasetNtB2_7Dataset14insert_encoded:
  365|  36.1k|    fn insert_encoded(
  366|  36.1k|        &mut self,
  367|  36.1k|        quad: (
  368|  36.1k|            InternedSubject,
  369|  36.1k|            InternedNamedNode,
  370|  36.1k|            InternedTerm,
  371|  36.1k|            InternedGraphName,
  372|  36.1k|        ),
  373|  36.1k|    ) -> bool {
  374|  36.1k|        let (s, p, o, g) = quad;
  375|  36.1k|        self.gspo.insert((g.clone(), s.clone(), p, o.clone()));
  376|  36.1k|        self.gpos.insert((g.clone(), p, o.clone(), s.clone()));
  377|  36.1k|        self.gosp.insert((g.clone(), o.clone(), s.clone(), p));
  378|  36.1k|        self.spog.insert((s.clone(), p, o.clone(), g.clone()));
  379|  36.1k|        self.posg.insert((p, o.clone(), s.clone(), g.clone()));
  380|  36.1k|        self.ospg.insert((o, s, p, g))
  381|  36.1k|    }
_RNvMNtCsRRItI7FBc3_5oxrdf7datasetNtB2_7Dataset5clear:
  411|  2.14k|    pub fn clear(&mut self) {
  412|  2.14k|        self.gspo.clear();
  413|  2.14k|        self.gpos.clear();
  414|  2.14k|        self.gosp.clear();
  415|  2.14k|        self.spog.clear();
  416|  2.14k|        self.posg.clear();
  417|  2.14k|        self.ospg.clear();
  418|  2.14k|    }
_RNvMNtCsRRItI7FBc3_5oxrdf7datasetNtB2_7Dataset11encode_quad:
  420|  23.8k|    fn encode_quad(
  421|  23.8k|        &mut self,
  422|  23.8k|        quad: QuadRef<'_>,
  423|  23.8k|    ) -> (
  424|  23.8k|        InternedSubject,
  425|  23.8k|        InternedNamedNode,
  426|  23.8k|        InternedTerm,
  427|  23.8k|        InternedGraphName,
  428|  23.8k|    ) {
  429|  23.8k|        (
  430|  23.8k|            InternedSubject::encoded_into(quad.subject, &mut self.interner),
  431|  23.8k|            InternedNamedNode::encoded_into(quad.predicate, &mut self.interner),
  432|  23.8k|            InternedTerm::encoded_into(quad.object, &mut self.interner),
  433|  23.8k|            InternedGraphName::encoded_into(quad.graph_name, &mut self.interner),
  434|  23.8k|        )
  435|  23.8k|    }
_RNvMNtCsRRItI7FBc3_5oxrdf7datasetNtB2_7Dataset12encoded_quad:
  437|  6.17k|    fn encoded_quad(
  438|  6.17k|        &self,
  439|  6.17k|        quad: QuadRef<'_>,
  440|  6.17k|    ) -> Option<(
  441|  6.17k|        InternedSubject,
  442|  6.17k|        InternedNamedNode,
  443|  6.17k|        InternedTerm,
  444|  6.17k|        InternedGraphName,
  445|  6.17k|    )> {
  446|  6.17k|        Some((
  447|  6.17k|            self.encoded_subject(quad.subject)?,
  448|  6.17k|            self.encoded_named_node(quad.predicate)?,
  449|  6.17k|            self.encoded_term(quad.object)?,
  450|  6.17k|            self.encoded_graph_name(quad.graph_name)?,
  451|       |        ))
  452|  6.17k|    }
_RNvMNtCsRRItI7FBc3_5oxrdf7datasetNtB2_7Dataset11decode_spog:
  479|  6.17k|    fn decode_spog(
  480|  6.17k|        &self,
  481|  6.17k|        quad: (
  482|  6.17k|            &InternedSubject,
  483|  6.17k|            &InternedNamedNode,
  484|  6.17k|            &InternedTerm,
  485|  6.17k|            &InternedGraphName,
  486|  6.17k|        ),
  487|  6.17k|    ) -> QuadRef<'_> {
  488|  6.17k|        QuadRef {
  489|  6.17k|            subject: quad.0.decode_from(&self.interner),
  490|  6.17k|            predicate: quad.1.decode_from(&self.interner),
  491|  6.17k|            object: quad.2.decode_from(&self.interner),
  492|  6.17k|            graph_name: quad.3.decode_from(&self.interner),
  493|  6.17k|        }
  494|  6.17k|    }
_RNvMNtCsRRItI7FBc3_5oxrdf7datasetNtB2_7Dataset12canonicalize:
  541|  2.14k|    pub fn canonicalize(&mut self) {
  542|  2.14k|        let bnodes = self.blank_nodes();
  543|  2.14k|        let quads_per_blank_node = self.quads_per_blank_nodes();
  544|  2.14k|        let (hash, partition) = self.hash_bnodes(
  545|  2.14k|            bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
  546|  2.14k|            &quads_per_blank_node,
  547|  2.14k|        );
  548|  2.14k|        let new_quads = self.distinguish(&hash, &partition, &quads_per_blank_node);
  549|  2.14k|        self.clear();
  550|  14.4k|        for quad in new_quads {
  551|  12.3k|            self.insert_encoded(quad);
  552|  12.3k|        }
  553|  2.14k|    }
_RNvMNtCsRRItI7FBc3_5oxrdf7datasetNtB2_7Dataset11blank_nodes:
  555|  2.14k|    fn blank_nodes(&self) -> HashSet<InternedBlankNode> {
  556|  2.14k|        let mut bnodes = HashSet::new();
  557|  14.4k|        for (g, s, _, o) in &self.gspo {
  558|  12.3k|            if let InternedSubject::BlankNode(bnode) = s {
  559|  4.34k|                bnodes.insert(*bnode);
  560|  8.00k|            }
  561|       |            #[cfg(feature = "rdf-star")]
  562|  12.3k|            if let InternedSubject::Triple(triple) = s {
  563|      0|                Self::triple_blank_nodes(triple, &mut bnodes);
  564|  12.3k|            }
  565|  12.3k|            if let InternedTerm::BlankNode(bnode) = o {
  566|  1.53k|                bnodes.insert(*bnode);
  567|  10.8k|            }
  568|       |            #[cfg(feature = "rdf-star")]
  569|  12.3k|            if let InternedTerm::Triple(triple) = o {
  570|      0|                Self::triple_blank_nodes(triple, &mut bnodes);
  571|  12.3k|            }
  572|  12.3k|            if let InternedGraphName::BlankNode(bnode) = g {
  573|     56|                bnodes.insert(*bnode);
  574|  12.2k|            }
  575|       |        }
  576|  2.14k|        bnodes
  577|  2.14k|    }
_RNvMNtCsRRItI7FBc3_5oxrdf7datasetNtB2_7Dataset21quads_per_blank_nodes:
  593|  2.14k|    fn quads_per_blank_nodes(&self) -> QuadsPerBlankNode {
  594|  2.14k|        let mut map: HashMap<_, Vec<_>> = HashMap::new();
  595|  14.4k|        for quad in &self.spog {
  596|  12.3k|            if let InternedSubject::BlankNode(bnode) = &quad.0 {
  597|  4.34k|                map.entry(*bnode).or_default().push(quad.clone());
  598|  8.00k|            }
  599|       |            #[cfg(feature = "rdf-star")]
  600|  12.3k|            if let InternedSubject::Triple(t) = &quad.0 {
  601|      0|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  602|  12.3k|            }
  603|  12.3k|            if let InternedTerm::BlankNode(bnode) = &quad.2 {
  604|  1.53k|                map.entry(*bnode).or_default().push(quad.clone());
  605|  10.8k|            }
  606|       |            #[cfg(feature = "rdf-star")]
  607|  12.3k|            if let InternedTerm::Triple(t) = &quad.2 {
  608|      0|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  609|  12.3k|            }
  610|  12.3k|            if let InternedGraphName::BlankNode(bnode) = &quad.3 {
  611|     56|                map.entry(*bnode).or_default().push(quad.clone());
  612|  12.2k|            }
  613|       |        }
  614|  2.14k|        map
  615|  2.14k|    }
_RNvMNtCsRRItI7FBc3_5oxrdf7datasetNtB2_7Dataset11hash_bnodes:
  642|  8.45k|    fn hash_bnodes(
  643|  8.45k|        &self,
  644|  8.45k|        mut hashes: HashMap<InternedBlankNode, u64>,
  645|  8.45k|        quads_per_blank_node: &QuadsPerBlankNode,
  646|  8.45k|    ) -> (
  647|  8.45k|        HashMap<InternedBlankNode, u64>,
  648|  8.45k|        Vec<(u64, Vec<InternedBlankNode>)>,
  649|  8.45k|    ) {
  650|  8.45k|        let mut to_hash = Vec::new();
  651|  8.45k|        let mut to_do = hashes
  652|  8.45k|            .keys()
  653|  8.45k|            .map(|bnode| (*bnode, true))
  654|  8.45k|            .collect::<HashMap<_, _>>();
  655|  8.45k|        let mut partition = HashMap::<_, Vec<_>>::with_capacity(hashes.len());
  656|  8.45k|        let mut old_partition_count = usize::MAX;
  657|  25.3k|        while old_partition_count != partition.len() {
  658|  16.9k|            old_partition_count = partition.len();
  659|  16.9k|            partition.clear();
  660|  16.9k|            let mut new_hashes = hashes.clone();
  661|  58.1k|            for bnode in hashes.keys() {
  662|  58.1k|                let hash = if to_do.contains_key(bnode) {
  663|  60.4k|                    for (s, p, o, g) in &quads_per_blank_node[bnode] {
  664|  60.4k|                        to_hash.push((
  665|  60.4k|                            self.hash_subject(s, *bnode, &hashes),
  666|  60.4k|                            self.hash_named_node(*p),
  667|  60.4k|                            self.hash_term(o, *bnode, &hashes),
  668|  60.4k|                            self.hash_graph_name(g, *bnode, &hashes),
  669|  60.4k|                        ));
  670|  60.4k|                    }
  671|  58.1k|                    to_hash.sort_unstable();
  672|  58.1k|                    let hash = Self::hash_tuple((&to_hash, hashes[bnode]));
  673|  58.1k|                    to_hash.clear();
  674|  58.1k|                    if hash == hashes[bnode] {
  675|      0|                        to_do.insert(*bnode, false);
  676|  58.1k|                    } else {
  677|  58.1k|                        new_hashes.insert(*bnode, hash);
  678|  58.1k|                    }
  679|  58.1k|                    hash
  680|       |                } else {
  681|      0|                    hashes[bnode]
  682|       |                };
  683|  58.1k|                partition.entry(hash).or_default().push(*bnode);
  684|       |            }
  685|  16.9k|            hashes = new_hashes;
  686|       |        }
  687|  8.45k|        let mut partition: Vec<_> = partition.into_iter().collect();
  688|  8.45k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));
  689|  8.45k|        (hashes, partition)
  690|  8.45k|    }
_RNvMNtCsRRItI7FBc3_5oxrdf7datasetNtB2_7Dataset15hash_named_node:
  692|  60.4k|    fn hash_named_node(&self, node: InternedNamedNode) -> u64 {
  693|  60.4k|        Self::hash_tuple(node.decode_from(&self.interner))
  694|  60.4k|    }
_RNvMNtCsRRItI7FBc3_5oxrdf7datasetNtB2_7Dataset15hash_blank_node:
  696|  66.7k|    fn hash_blank_node(
  697|  66.7k|        node: InternedBlankNode,
  698|  66.7k|        current_blank_node: InternedBlankNode,
  699|  66.7k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  700|  66.7k|    ) -> u64 {
  701|  66.7k|        if node == current_blank_node {
  702|  60.5k|            u64::MAX
  703|       |        } else {
  704|  6.17k|            bnodes_hash[&node]
  705|       |        }
  706|  66.7k|    }
_RNvMNtCsRRItI7FBc3_5oxrdf7datasetNtB2_7Dataset12hash_subject:
  708|  60.4k|    fn hash_subject(
  709|  60.4k|        &self,
  710|  60.4k|        node: &InternedSubject,
  711|  60.4k|        current_blank_node: InternedBlankNode,
  712|  60.4k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  713|  60.4k|    ) -> u64 {
  714|  60.4k|        match node {
  715|  3.56k|            InternedSubject::NamedNode(node) => Self::hash_tuple(node.decode_from(&self.interner)),
  716|  56.9k|            InternedSubject::BlankNode(bnode) => {
  717|  56.9k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  718|       |            }
  719|       |            #[cfg(feature = "rdf-star")]
  720|      0|            InternedSubject::Triple(triple) => {
  721|      0|                self.hash_triple(triple, current_blank_node, bnodes_hash)
  722|       |            }
  723|       |        }
  724|  60.4k|    }
_RNvMNtCsRRItI7FBc3_5oxrdf7datasetNtB2_7Dataset9hash_term:
  726|  60.4k|    fn hash_term(
  727|  60.4k|        &self,
  728|  60.4k|        term: &InternedTerm,
  729|  60.4k|        current_blank_node: InternedBlankNode,
  730|  60.4k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  731|  60.4k|    ) -> u64 {
  732|  60.4k|        match term {
  733|  2.96k|            InternedTerm::NamedNode(node) => Self::hash_tuple(node.decode_from(&self.interner)),
  734|  9.52k|            InternedTerm::BlankNode(bnode) => {
  735|  9.52k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  736|       |            }
  737|  47.9k|            InternedTerm::Literal(literal) => Self::hash_tuple(literal.decode_from(&self.interner)),
  738|       |            #[cfg(feature = "rdf-star")]
  739|      0|            InternedTerm::Triple(triple) => {
  740|      0|                self.hash_triple(triple, current_blank_node, bnodes_hash)
  741|       |            }
  742|       |        }
  743|  60.4k|    }
_RNvMNtCsRRItI7FBc3_5oxrdf7datasetNtB2_7Dataset15hash_graph_name:
  745|  60.4k|    fn hash_graph_name(
  746|  60.4k|        &self,
  747|  60.4k|        graph_name: &InternedGraphName,
  748|  60.4k|        current_blank_node: InternedBlankNode,
  749|  60.4k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  750|  60.4k|    ) -> u64 {
  751|  60.4k|        match graph_name {
  752|  3.76k|            InternedGraphName::NamedNode(node) => {
  753|  3.76k|                Self::hash_tuple(node.decode_from(&self.interner))
  754|       |            }
  755|    292|            InternedGraphName::BlankNode(bnode) => {
  756|    292|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  757|       |            }
  758|  56.4k|            InternedGraphName::DefaultGraph => 0,
  759|       |        }
  760|  60.4k|    }
_RNvMNtCsRRItI7FBc3_5oxrdf7datasetNtB2_7Dataset11distinguish:
  782|  8.45k|    fn distinguish(
  783|  8.45k|        &mut self,
  784|  8.45k|        hash: &HashMap<InternedBlankNode, u64>,
  785|  8.45k|        partition: &[(u64, Vec<InternedBlankNode>)],
  786|  8.45k|        quads_per_blank_node: &QuadsPerBlankNode,
  787|  8.45k|    ) -> Vec<(
  788|  8.45k|        InternedSubject,
  789|  8.45k|        InternedNamedNode,
  790|  8.45k|        InternedTerm,
  791|  8.45k|        InternedGraphName,
  792|  8.45k|    )> {
  793|  8.45k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
  794|  8.45k|        if let Some(b_prime) = b_prime {
  795|  2.76k|            b_prime
  796|  2.76k|                .iter()
  797|  2.76k|                .map(|b| {
  798|       |                    let mut hash_prime = hash.clone();
  799|       |                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  800|       |                    let (hash_prime_prime, partition_prime) =
  801|       |                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  802|       |                    self.distinguish(&hash_prime_prime, &partition_prime, quads_per_blank_node)
  803|  2.76k|                })
  804|  2.76k|                .reduce(min)
  805|  2.76k|                .unwrap_or_default()
  806|       |        } else {
  807|  5.69k|            self.label(hash)
  808|       |        }
  809|  8.45k|    }
_RNvMNtCsRRItI7FBc3_5oxrdf7datasetNtB2_7Dataset5label:
  812|  5.69k|    fn label(
  813|  5.69k|        &mut self,
  814|  5.69k|        hashes: &HashMap<InternedBlankNode, u64>,
  815|  5.69k|    ) -> Vec<(
  816|  5.69k|        InternedSubject,
  817|  5.69k|        InternedNamedNode,
  818|  5.69k|        InternedTerm,
  819|  5.69k|        InternedGraphName,
  820|  5.69k|    )> {
  821|  5.69k|        let old_quads: Vec<_> = self.spog.iter().cloned().collect();
  822|  5.69k|        let mut quads: Vec<_> = old_quads
  823|  5.69k|            .into_iter()
  824|  5.69k|            .map(|(s, p, o, g)| {
  825|       |                (
  826|       |                    match s {
  827|       |                        InternedSubject::NamedNode(_) => s,
  828|       |                        InternedSubject::BlankNode(bnode) => {
  829|       |                            InternedSubject::BlankNode(self.map_bnode(bnode, hashes))
  830|       |                        }
  831|       |                        #[cfg(feature = "rdf-star")]
  832|       |                        InternedSubject::Triple(triple) => {
  833|       |                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  834|       |                                self.label_triple(&triple, hashes).as_ref(),
  835|       |                                &mut self.interner,
  836|       |                            )))
  837|       |                        }
  838|       |                    },
  839|       |                    p,
  840|       |                    match o {
  841|       |                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  842|       |                        InternedTerm::BlankNode(bnode) => {
  843|       |                            InternedTerm::BlankNode(self.map_bnode(bnode, hashes))
  844|       |                        }
  845|       |                        #[cfg(feature = "rdf-star")]
  846|       |                        InternedTerm::Triple(triple) => {
  847|       |                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  848|       |                                self.label_triple(&triple, hashes).as_ref(),
  849|       |                                &mut self.interner,
  850|       |                            )))
  851|       |                        }
  852|       |                    },
  853|       |                    match g {
  854|       |                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  855|       |                        InternedGraphName::BlankNode(bnode) => {
  856|       |                            InternedGraphName::BlankNode(self.map_bnode(bnode, hashes))
  857|       |                        }
  858|       |                    },
  859|       |                )
  860|  5.69k|            })
  861|  5.69k|            .collect();
  862|  5.69k|        quads.sort_unstable();
  863|  5.69k|        quads
  864|  5.69k|    }
_RNvMNtCsRRItI7FBc3_5oxrdf7datasetNtB2_7Dataset9map_bnode:
  891|  19.6k|    fn map_bnode(
  892|  19.6k|        &mut self,
  893|  19.6k|        old_bnode: InternedBlankNode,
  894|  19.6k|        hashes: &HashMap<InternedBlankNode, u64>,
  895|  19.6k|    ) -> InternedBlankNode {
  896|  19.6k|        InternedBlankNode::encoded_into(
  897|  19.6k|            Self::gen_bnode(old_bnode, hashes).as_ref(),
  898|  19.6k|            &mut self.interner,
  899|  19.6k|        )
  900|  19.6k|    }
_RNvMNtCsRRItI7FBc3_5oxrdf7datasetNtB2_7Dataset9gen_bnode:
  902|  19.6k|    fn gen_bnode(
  903|  19.6k|        old_bnode: InternedBlankNode,
  904|  19.6k|        hashes: &HashMap<InternedBlankNode, u64>,
  905|  19.6k|    ) -> BlankNode {
  906|  19.6k|        BlankNode::new_from_unique_id(hashes[&old_bnode].into())
  907|  19.6k|    }
_RNvXs_NtCsRRItI7FBc3_5oxrdf7datasetNtB4_7DatasetNtNtCsd3ZSx5keFHB_4core3cmp9PartialEq2eq:
  911|  1.07k|    fn eq(&self, other: &Self) -> bool {
  912|  1.07k|        if self.len() != other.len() {
  913|      0|            return false;
  914|  1.07k|        }
  915|  7.24k|        for q in self {
  916|  6.17k|            if !other.contains(q) {
  917|      0|                return false;
  918|  6.17k|            }
  919|       |        }
  920|  1.07k|        true
  921|  1.07k|    }
_RNvXs1_NtCsRRItI7FBc3_5oxrdf7datasetRNtB5_7DatasetNtNtNtNtCsd3ZSx5keFHB_4core4iter6traits7collect12IntoIterator9into_iter:
  930|  1.07k|    fn into_iter(self) -> Iter<'a> {
  931|  1.07k|        self.iter()
  932|  1.07k|    }
_RNvXsg_NtCsRRItI7FBc3_5oxrdf7datasetNtB5_4IterNtNtNtNtCsd3ZSx5keFHB_4core4iter6traits8iterator8Iterator4next:
 1530|  7.24k|    fn next(&mut self) -> Option<QuadRef<'a>> {
 1531|  7.24k|        self.inner
 1532|  7.24k|            .next()
 1533|  7.24k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))
 1534|  7.24k|    }
_RNvXsj_NtCsRRItI7FBc3_5oxrdf7datasetNtB5_7DatasetNtNtCsd3ZSx5keFHB_4core7default7Default7defaultB7_:
   66|  2.14k|#[derive(Debug, Default, Clone)]
_RINvMNtCsRRItI7FBc3_5oxrdf7datasetNtB3_7Dataset8containsNtNtB5_6triple7QuadRefEB5_:
  341|  6.17k|    pub fn contains<'a>(&self, quad: impl Into<QuadRef<'a>>) -> bool {
  342|  6.17k|        if let Some(q) = self.encoded_quad(quad.into()) {
  343|  6.17k|            self.spog.contains(&q)
  344|       |        } else {
  345|      0|            false
  346|       |        }
  347|  6.17k|    }
_RINvMNtCsRRItI7FBc3_5oxrdf7datasetNtB3_7Dataset18encoded_named_nodeNtNtB5_10named_node12NamedNodeRefEB5_:
  454|  6.17k|    pub(super) fn encoded_named_node<'a>(
  455|  6.17k|        &self,
  456|  6.17k|        node: impl Into<NamedNodeRef<'a>>,
  457|  6.17k|    ) -> Option<InternedNamedNode> {
  458|  6.17k|        InternedNamedNode::encoded_from(node.into(), &self.interner)
  459|  6.17k|    }
_RINvMNtCsRRItI7FBc3_5oxrdf7datasetNtB3_7Dataset15encoded_subjectNtNtB5_6triple10SubjectRefEB5_:
  461|  6.17k|    pub(super) fn encoded_subject<'a>(
  462|  6.17k|        &self,
  463|  6.17k|        node: impl Into<SubjectRef<'a>>,
  464|  6.17k|    ) -> Option<InternedSubject> {
  465|  6.17k|        InternedSubject::encoded_from(node.into(), &self.interner)
  466|  6.17k|    }
_RINvMNtCsRRItI7FBc3_5oxrdf7datasetNtB3_7Dataset12encoded_termNtNtB5_6triple7TermRefEB5_:
  468|  6.17k|    pub(super) fn encoded_term<'a>(&self, term: impl Into<TermRef<'a>>) -> Option<InternedTerm> {
  469|  6.17k|        InternedTerm::encoded_from(term.into(), &self.interner)
  470|  6.17k|    }
_RINvMNtCsRRItI7FBc3_5oxrdf7datasetNtB3_7Dataset18encoded_graph_nameNtNtB5_6triple12GraphNameRefEB5_:
  472|  6.17k|    pub(super) fn encoded_graph_name<'a>(
  473|  6.17k|        &self,
  474|  6.17k|        graph_name: impl Into<GraphNameRef<'a>>,
  475|  6.17k|    ) -> Option<InternedGraphName> {
  476|  6.17k|        InternedGraphName::encoded_from(graph_name.into(), &self.interner)
  477|  6.17k|    }
_RNCNvMNtCsRRItI7FBc3_5oxrdf7datasetNtB4_7Dataset12canonicalize0B6_:
  545|  4.90k|            bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
_RNCNvMNtCsRRItI7FBc3_5oxrdf7datasetNtB4_7Dataset11hash_bnodes0B6_:
  653|  29.0k|            .map(|bnode| (*bnode, true))
_RNCNvMNtCsRRItI7FBc3_5oxrdf7datasetNtB4_7Dataset11hash_bnodess_0B6_:
  688|  25.2k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));
_RINvMNtCsRRItI7FBc3_5oxrdf7datasetNtB3_7Dataset10hash_tupleNtNtB5_10named_node12NamedNodeRefEB5_:
  776|  70.7k|    fn hash_tuple(v: impl Hash) -> u64 {
  777|  70.7k|        let mut hasher = DefaultHasher::new();
  778|  70.7k|        v.hash(&mut hasher);
  779|  70.7k|        hasher.finish()
  780|  70.7k|    }
_RINvMNtCsRRItI7FBc3_5oxrdf7datasetNtB3_7Dataset10hash_tupleNtNtB5_7literal10LiteralRefEB5_:
  776|  47.9k|    fn hash_tuple(v: impl Hash) -> u64 {
  777|  47.9k|        let mut hasher = DefaultHasher::new();
  778|  47.9k|        v.hash(&mut hasher);
  779|  47.9k|        hasher.finish()
  780|  47.9k|    }
_RINvMNtCsRRItI7FBc3_5oxrdf7datasetNtB3_7Dataset10hash_tupleTRINtNtCsgcnyUjfByoh_5alloc3vec3VecTyyyyEEyEEB5_:
  776|  58.1k|    fn hash_tuple(v: impl Hash) -> u64 {
  777|  58.1k|        let mut hasher = DefaultHasher::new();
  778|  58.1k|        v.hash(&mut hasher);
  779|  58.1k|        hasher.finish()
  780|  58.1k|    }
_RINvMNtCsRRItI7FBc3_5oxrdf7datasetNtB3_7Dataset10hash_tupleTylEEB5_:
  776|  6.31k|    fn hash_tuple(v: impl Hash) -> u64 {
  777|  6.31k|        let mut hasher = DefaultHasher::new();
  778|  6.31k|        v.hash(&mut hasher);
  779|  6.31k|        hasher.finish()
  780|  6.31k|    }
_RNCNvMNtCsRRItI7FBc3_5oxrdf7datasetNtB4_7Dataset11distinguish0B6_:
  793|  25.4k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
_RNCNvMNtCsRRItI7FBc3_5oxrdf7datasetNtB4_7Dataset11distinguishs_0B6_:
  793|  25.4k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
_RNCNvMNtCsRRItI7FBc3_5oxrdf7datasetNtB4_7Dataset11distinguishs0_0B6_:
  797|  6.31k|                .map(|b| {
  798|  6.31k|                    let mut hash_prime = hash.clone();
  799|  6.31k|                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  800|  6.31k|                    let (hash_prime_prime, partition_prime) =
  801|  6.31k|                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  802|  6.31k|                    self.distinguish(&hash_prime_prime, &partition_prime, quads_per_blank_node)
  803|  6.31k|                })
_RNCNvMNtCsRRItI7FBc3_5oxrdf7datasetNtB4_7Dataset5label0B6_:
  824|  50.3k|            .map(|(s, p, o, g)| {
  825|  50.3k|                (
  826|  50.3k|                    match s {
  827|  33.2k|                        InternedSubject::NamedNode(_) => s,
  828|  17.1k|                        InternedSubject::BlankNode(bnode) => {
  829|  17.1k|                            InternedSubject::BlankNode(self.map_bnode(bnode, hashes))
  830|       |                        }
  831|       |                        #[cfg(feature = "rdf-star")]
  832|      0|                        InternedSubject::Triple(triple) => {
  833|      0|                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  834|      0|                                self.label_triple(&triple, hashes).as_ref(),
  835|      0|                                &mut self.interner,
  836|      0|                            )))
  837|       |                        }
  838|       |                    },
  839|  50.3k|                    p,
  840|  50.3k|                    match o {
  841|  47.8k|                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  842|  2.47k|                        InternedTerm::BlankNode(bnode) => {
  843|  2.47k|                            InternedTerm::BlankNode(self.map_bnode(bnode, hashes))
  844|       |                        }
  845|       |                        #[cfg(feature = "rdf-star")]
  846|      0|                        InternedTerm::Triple(triple) => {
  847|      0|                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  848|      0|                                self.label_triple(&triple, hashes).as_ref(),
  849|      0|                                &mut self.interner,
  850|      0|                            )))
  851|       |                        }
  852|       |                    },
  853|  50.3k|                    match g {
  854|  50.2k|                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  855|     56|                        InternedGraphName::BlankNode(bnode) => {
  856|     56|                            InternedGraphName::BlankNode(self.map_bnode(bnode, hashes))
  857|       |                        }
  858|       |                    },
  859|       |                )
  860|  50.3k|            })
_RNCNvXsg_NtCsRRItI7FBc3_5oxrdf7datasetNtB7_4IterNtNtNtNtCsd3ZSx5keFHB_4core4iter6traits8iterator8Iterator4next0B9_:
 1533|  6.17k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))

_RNvMNtCsRRItI7FBc3_5oxrdf9interningNtB2_8Interner13get_or_intern:
   18|  86.2k|    fn get_or_intern(&mut self, value: &str) -> Key {
   19|  86.2k|        let mut hash = self.hash(value);
   20|  86.2k|        loop {
   21|  86.2k|            match self.string_for_hash.entry(hash) {
   22|  16.0k|                Entry::Vacant(e) => {
   23|  16.0k|                    e.insert(value.into());
   24|  16.0k|                    return Key(hash);
   25|       |                }
   26|  70.2k|                Entry::Occupied(e) => loop {
   27|  70.2k|                    if e.get() == value {
   28|  70.2k|                        return Key(hash);
   29|      0|                    } else if hash == u64::MAX - 1 {
   30|      0|                        hash = 0;
   31|      0|                    } else {
   32|      0|                        hash += 1;
   33|      0|                    }
   34|       |                },
   35|       |            }
   36|       |        }
   37|  86.2k|    }
_RNvMNtCsRRItI7FBc3_5oxrdf9interningNtB2_8Interner3get:
   39|  20.5k|    fn get(&self, value: &str) -> Option<Key> {
   40|  20.5k|        let mut hash = self.hash(value);
   41|       |        loop {
   42|  20.5k|            let v = self.string_for_hash.get(&hash)?;
   43|  20.5k|            if v == value {
   44|  20.5k|                return Some(Key(hash));
   45|      0|            } else if hash == u64::MAX - 1 {
   46|      0|                hash = 0;
   47|      0|            } else {
   48|      0|                hash += 1;
   49|      0|            }
   50|       |        }
   51|  20.5k|    }
_RNvMNtCsRRItI7FBc3_5oxrdf9interningNtB2_8Interner4hash:
   53|   106k|    fn hash(&self, value: &str) -> u64 {
   54|   106k|        let mut hasher = self.hasher.build_hasher();
   55|   106k|        hasher.write(value.as_bytes());
   56|   106k|        let hash = hasher.finish();
   57|   106k|        if hash == u64::MAX {
   58|      0|            0
   59|       |        } else {
   60|   106k|            hash
   61|       |        }
   62|   106k|    }
_RNvMNtCsRRItI7FBc3_5oxrdf9interningNtB2_8Interner7resolve:
   64|   184k|    fn resolve(&self, key: Key) -> &str {
   65|   184k|        &self.string_for_hash[&key.0]
   66|   184k|    }
_RNvMs0_NtCsRRItI7FBc3_5oxrdf9interningNtB5_17InternedNamedNode12encoded_into:
   92|  65.5k|    pub fn encoded_into(named_node: NamedNodeRef<'_>, interner: &mut Interner) -> Self {
   93|  65.5k|        Self {
   94|  65.5k|            id: interner.get_or_intern(named_node.as_str()),
   95|  65.5k|        }
   96|  65.5k|    }
_RNvMs0_NtCsRRItI7FBc3_5oxrdf9interningNtB5_17InternedNamedNode12encoded_from:
   98|  15.5k|    pub fn encoded_from(named_node: NamedNodeRef<'_>, interner: &Interner) -> Option<Self> {
   99|  15.5k|        Some(Self {
  100|  15.5k|            id: interner.get(named_node.as_str())?,
  101|       |        })
  102|  15.5k|    }
_RNvMs0_NtCsRRItI7FBc3_5oxrdf9interningNtB5_17InternedNamedNode11decode_from:
  104|   128k|    pub fn decode_from(self, interner: &Interner) -> NamedNodeRef<'_> {
  105|   128k|        NamedNodeRef::new_unchecked(interner.resolve(self.id))
  106|   128k|    }
_RNvMs1_NtCsRRItI7FBc3_5oxrdf9interningNtB5_17InternedBlankNode12encoded_into:
  130|  25.5k|    pub fn encoded_into(blank_node: BlankNodeRef<'_>, interner: &mut Interner) -> Self {
  131|  25.5k|        if let Some(id) = blank_node.unique_id() {
  132|  25.4k|            interner
  133|  25.4k|                .string_for_blank_node_id
  134|  25.4k|                .entry(id)
  135|  25.4k|                .or_insert_with(|| blank_node.as_str().into());
  136|  25.4k|            Self::Number { id }
  137|       |        } else {
  138|    164|            Self::Other {
  139|    164|                id: interner.get_or_intern(blank_node.as_str()),
  140|    164|            }
  141|       |        }
  142|  25.5k|    }
_RNvMs1_NtCsRRItI7FBc3_5oxrdf9interningNtB5_17InternedBlankNode12encoded_from:
  144|  2.96k|    pub fn encoded_from(blank_node: BlankNodeRef<'_>, interner: &Interner) -> Option<Self> {
  145|  2.96k|        if let Some(id) = blank_node.unique_id() {
  146|  2.96k|            interner
  147|  2.96k|                .string_for_blank_node_id
  148|  2.96k|                .contains_key(&id)
  149|  2.96k|                .then_some(Self::Number { id })
  150|       |        } else {
  151|       |            Some(Self::Other {
  152|      0|                id: interner.get(blank_node.as_str())?,
  153|       |            })
  154|       |        }
  155|  2.96k|    }
_RNvMs1_NtCsRRItI7FBc3_5oxrdf9interningNtB5_17InternedBlankNode11decode_from:
  157|  2.96k|    pub fn decode_from(self, interner: &Interner) -> BlankNodeRef<'_> {
  158|  2.96k|        BlankNodeRef::new_unchecked(match self {
  159|  2.96k|            Self::Number { id } => &interner.string_for_blank_node_id[&id],
  160|      0|            Self::Other { id } => interner.resolve(id),
  161|       |        })
  162|  2.96k|    }
_RNvMs2_NtCsRRItI7FBc3_5oxrdf9interningNtB5_15InternedLiteral12encoded_into:
  190|  20.2k|    pub fn encoded_into(literal: LiteralRef<'_>, interner: &mut Interner) -> Self {
  191|  20.2k|        let value_id = interner.get_or_intern(literal.value());
  192|  20.2k|        if literal.is_plain() {
  193|    610|            if let Some(language) = literal.language() {
  194|    222|                Self::LanguageTaggedString {
  195|    222|                    value_id,
  196|    222|                    language_id: interner.get_or_intern(language),
  197|    222|                }
  198|       |            } else {
  199|    388|                Self::String { value_id }
  200|       |            }
  201|       |        } else {
  202|  19.6k|            Self::TypedLiteral {
  203|  19.6k|                value_id,
  204|  19.6k|                datatype: InternedNamedNode::encoded_into(literal.datatype(), interner),
  205|  19.6k|            }
  206|       |        }
  207|  20.2k|    }
_RNvMs2_NtCsRRItI7FBc3_5oxrdf9interningNtB5_15InternedLiteral12encoded_from:
  209|  4.88k|    pub fn encoded_from(literal: LiteralRef<'_>, interner: &Interner) -> Option<Self> {
  210|  4.88k|        let value_id = interner.get(literal.value())?;
  211|  4.88k|        Some(if literal.is_plain() {
  212|    304|            if let Some(language) = literal.language() {
  213|       |                Self::LanguageTaggedString {
  214|    111|                    value_id,
  215|    111|                    language_id: interner.get(language)?,
  216|       |                }
  217|       |            } else {
  218|    193|                Self::String { value_id }
  219|       |            }
  220|       |        } else {
  221|       |            Self::TypedLiteral {
  222|  4.58k|                value_id,
  223|  4.58k|                datatype: InternedNamedNode::encoded_from(literal.datatype(), interner)?,
  224|       |            }
  225|       |        })
  226|  4.88k|    }
_RNvMs2_NtCsRRItI7FBc3_5oxrdf9interningNtB5_15InternedLiteral11decode_from:
  228|  52.8k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> LiteralRef<'a> {
  229|  52.8k|        match self {
  230|  2.79k|            Self::String { value_id } => {
  231|  2.79k|                LiteralRef::new_simple_literal(interner.resolve(*value_id))
  232|       |            }
  233|       |            Self::LanguageTaggedString {
  234|  3.48k|                value_id,
  235|  3.48k|                language_id,
  236|  3.48k|            } => LiteralRef::new_language_tagged_literal_unchecked(
  237|  3.48k|                interner.resolve(*value_id),
  238|  3.48k|                interner.resolve(*language_id),
  239|  3.48k|            ),
  240|  46.5k|            Self::TypedLiteral { value_id, datatype } => LiteralRef::new_typed_literal(
  241|  46.5k|                interner.resolve(*value_id),
  242|  46.5k|                datatype.decode_from(interner),
  243|  46.5k|            ),
  244|       |        }
  245|  52.8k|    }
_RNvMs3_NtCsRRItI7FBc3_5oxrdf9interningNtB5_15InternedSubject12encoded_into:
  276|  23.8k|    pub fn encoded_into(node: SubjectRef<'_>, interner: &mut Interner) -> Self {
  277|  23.8k|        match node {
  278|  19.4k|            SubjectRef::NamedNode(node) => {
  279|  19.4k|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  280|       |            }
  281|  4.34k|            SubjectRef::BlankNode(node) => {
  282|  4.34k|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  283|       |            }
  284|       |            #[cfg(feature = "rdf-star")]
  285|      0|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  286|      0|                triple.as_ref(),
  287|      0|                interner,
  288|      0|            ))),
  289|       |        }
  290|  23.8k|    }
_RNvMs3_NtCsRRItI7FBc3_5oxrdf9interningNtB5_15InternedSubject12encoded_from:
  292|  6.17k|    pub fn encoded_from(node: SubjectRef<'_>, interner: &Interner) -> Option<Self> {
  293|  6.17k|        Some(match node {
  294|  4.00k|            SubjectRef::NamedNode(node) => {
  295|  4.00k|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  296|       |            }
  297|  2.17k|            SubjectRef::BlankNode(node) => {
  298|  2.17k|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  299|       |            }
  300|       |            #[cfg(feature = "rdf-star")]
  301|      0|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  302|      0|                triple.as_ref(),
  303|      0|                interner,
  304|      0|            )?)),
  305|       |        })
  306|  6.17k|    }
_RNvMs3_NtCsRRItI7FBc3_5oxrdf9interningNtB5_15InternedSubject11decode_from:
  308|  6.17k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> SubjectRef<'a> {
  309|  6.17k|        match self {
  310|  4.00k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.decode_from(interner)),
  311|  2.17k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.decode_from(interner)),
  312|       |            #[cfg(feature = "rdf-star")]
  313|      0|            Self::Triple(triple) => SubjectRef::Triple(&interner.triples[triple.as_ref()]),
  314|       |        }
  315|  6.17k|    }
_RNvMs4_NtCsRRItI7FBc3_5oxrdf9interningNtB5_17InternedGraphName12encoded_into:
  343|  23.8k|    pub fn encoded_into(node: GraphNameRef<'_>, interner: &mut Interner) -> Self {
  344|  23.8k|        match node {
  345|  23.2k|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  346|    554|            GraphNameRef::NamedNode(node) => {
  347|    554|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  348|       |            }
  349|     56|            GraphNameRef::BlankNode(node) => {
  350|     56|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  351|       |            }
  352|       |        }
  353|  23.8k|    }
_RNvMs4_NtCsRRItI7FBc3_5oxrdf9interningNtB5_17InternedGraphName12encoded_from:
  355|  6.17k|    pub fn encoded_from(node: GraphNameRef<'_>, interner: &Interner) -> Option<Self> {
  356|  6.17k|        Some(match node {
  357|  5.91k|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  358|    231|            GraphNameRef::NamedNode(node) => {
  359|    231|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  360|       |            }
  361|     28|            GraphNameRef::BlankNode(node) => {
  362|     28|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  363|       |            }
  364|       |        })
  365|  6.17k|    }
_RNvMs4_NtCsRRItI7FBc3_5oxrdf9interningNtB5_17InternedGraphName11decode_from:
  367|  6.17k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> GraphNameRef<'a> {
  368|  6.17k|        match self {
  369|  5.91k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  370|    231|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.decode_from(interner)),
  371|     28|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.decode_from(interner)),
  372|       |        }
  373|  6.17k|    }
_RNvMs5_NtCsRRItI7FBc3_5oxrdf9interningNtB5_12InternedTerm12encoded_into:
  402|  23.8k|    pub fn encoded_into(term: TermRef<'_>, interner: &mut Interner) -> Self {
  403|  23.8k|        match term {
  404|  2.00k|            TermRef::NamedNode(term) => {
  405|  2.00k|                Self::NamedNode(InternedNamedNode::encoded_into(term, interner))
  406|       |            }
  407|  1.53k|            TermRef::BlankNode(term) => {
  408|  1.53k|                Self::BlankNode(InternedBlankNode::encoded_into(term, interner))
  409|       |            }
  410|  20.2k|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_into(term, interner)),
  411|       |            #[cfg(feature = "rdf-star")]
  412|      0|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  413|      0|                triple.as_ref(),
  414|      0|                interner,
  415|      0|            ))),
  416|       |        }
  417|  23.8k|    }
_RNvMs5_NtCsRRItI7FBc3_5oxrdf9interningNtB5_12InternedTerm12encoded_from:
  419|  6.17k|    pub fn encoded_from(term: TermRef<'_>, interner: &Interner) -> Option<Self> {
  420|  6.17k|        Some(match term {
  421|    516|            TermRef::NamedNode(term) => {
  422|    516|                Self::NamedNode(InternedNamedNode::encoded_from(term, interner)?)
  423|       |            }
  424|    769|            TermRef::BlankNode(term) => {
  425|    769|                Self::BlankNode(InternedBlankNode::encoded_from(term, interner)?)
  426|       |            }
  427|  4.88k|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_from(term, interner)?),
  428|       |            #[cfg(feature = "rdf-star")]
  429|      0|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  430|      0|                triple.as_ref(),
  431|      0|                interner,
  432|      0|            )?)),
  433|       |        })
  434|  6.17k|    }
_RNvMs5_NtCsRRItI7FBc3_5oxrdf9interningNtB5_12InternedTerm11decode_from:
  436|  6.17k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> TermRef<'a> {
  437|  6.17k|        match self {
  438|    516|            Self::NamedNode(term) => TermRef::NamedNode(term.decode_from(interner)),
  439|    769|            Self::BlankNode(term) => TermRef::BlankNode(term.decode_from(interner)),
  440|  4.88k|            Self::Literal(term) => TermRef::Literal(term.decode_from(interner)),
  441|       |            #[cfg(feature = "rdf-star")]
  442|      0|            Self::Triple(triple) => TermRef::Triple(&interner.triples[triple.as_ref()]),
  443|       |        }
  444|  6.17k|    }
_RNvXs7_NtCsRRItI7FBc3_5oxrdf9interningNtB5_21IdentityHasherBuilderNtNtCsd3ZSx5keFHB_4core4hash11BuildHasher12build_hasher:
  513|   305k|    fn build_hasher(&self) -> IdentityHasher {
  514|   305k|        IdentityHasher::default()
  515|   305k|    }
_RNvXs8_NtCsRRItI7FBc3_5oxrdf9interningNtB5_14IdentityHasherNtNtCsd3ZSx5keFHB_4core4hash6Hasher6finish:
  524|   305k|    fn finish(&self) -> u64 {
  525|   305k|        self.value
  526|   305k|    }
_RNvXs8_NtCsRRItI7FBc3_5oxrdf9interningNtB5_14IdentityHasherNtNtCsd3ZSx5keFHB_4core4hash6Hasher9write_u64:
  532|   305k|    fn write_u64(&mut self, i: u64) {
  533|   305k|        self.value = i
  534|   305k|    }
_RNvXsa_NtCsRRItI7FBc3_5oxrdf9interningNtB5_8InternerNtNtCsd3ZSx5keFHB_4core7default7Default7defaultB7_:
    7|  2.14k|#[derive(Debug, Default, Clone)]
_RNvXsf_NtCsRRItI7FBc3_5oxrdf9interningNtB5_3KeyNtNtCsd3ZSx5keFHB_4core3cmp9PartialEq2eqB7_:
   69|  3.30k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsg_NtCsRRItI7FBc3_5oxrdf9interningNtB5_3KeyNtNtCsd3ZSx5keFHB_4core3cmp3Ord3cmpB7_:
   69|  1.49M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsh_NtCsRRItI7FBc3_5oxrdf9interningNtB5_3KeyNtNtCsd3ZSx5keFHB_4core3cmp10PartialOrd11partial_cmpB7_:
   69|   147k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsq_NtCsRRItI7FBc3_5oxrdf9interningNtB5_17InternedNamedNodeNtNtCsd3ZSx5keFHB_4core3cmp3Ord3cmpB7_:
   86|  1.02M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsr_NtCsRRItI7FBc3_5oxrdf9interningNtB5_17InternedNamedNodeNtNtCsd3ZSx5keFHB_4core3cmp10PartialOrd11partial_cmpB7_:
   86|   120k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXst_NtCsRRItI7FBc3_5oxrdf9interningNtB5_17InternedNamedNodeNtNtCsd3ZSx5keFHB_4core5clone5Clone5cloneB7_:
   86|   253k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsz_NtCsRRItI7FBc3_5oxrdf9interningNtB5_17InternedBlankNodeNtNtCsd3ZSx5keFHB_4core3cmp9PartialEq2eqB7_:
  123|   398k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsA_NtCsRRItI7FBc3_5oxrdf9interningNtB5_17InternedBlankNodeNtNtCsd3ZSx5keFHB_4core3cmp3Ord3cmpB7_:
  123|  43.9k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsB_NtCsRRItI7FBc3_5oxrdf9interningNtB5_17InternedBlankNodeNtNtCsd3ZSx5keFHB_4core3cmp10PartialOrd11partial_cmpB7_:
  123|  20.5k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsD_NtCsRRItI7FBc3_5oxrdf9interningNtB5_17InternedBlankNodeNtNtCsd3ZSx5keFHB_4core5clone5Clone5cloneB7_:
  123|  87.5k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsK_NtCsRRItI7FBc3_5oxrdf9interningNtB5_15InternedLiteralNtNtCsd3ZSx5keFHB_4core3cmp3Ord3cmpB7_:
  174|   466k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsL_NtCsRRItI7FBc3_5oxrdf9interningNtB5_15InternedLiteralNtNtCsd3ZSx5keFHB_4core3cmp10PartialOrd11partial_cmpB7_:
  174|  26.3k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsN_NtCsRRItI7FBc3_5oxrdf9interningNtB5_15InternedLiteralNtNtCsd3ZSx5keFHB_4core5clone5Clone5cloneB7_:
  174|   197k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsU_NtCsRRItI7FBc3_5oxrdf9interningNtB5_15InternedSubjectNtNtCsd3ZSx5keFHB_4core3cmp3Ord3cmpB7_:
  267|   431k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsV_NtCsRRItI7FBc3_5oxrdf9interningNtB5_15InternedSubjectNtNtCsd3ZSx5keFHB_4core3cmp10PartialOrd11partial_cmpB7_:
  267|  95.7k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsX_NtCsRRItI7FBc3_5oxrdf9interningNtB5_15InternedSubjectNtNtCsd3ZSx5keFHB_4core5clone5Clone5cloneB7_:
  267|   237k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs13_NtCsRRItI7FBc3_5oxrdf9interningNtB6_17InternedGraphNameNtNtCsd3ZSx5keFHB_4core3cmp3Ord3cmpB8_:
  335|   482k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs14_NtCsRRItI7FBc3_5oxrdf9interningNtB6_17InternedGraphNameNtNtCsd3ZSx5keFHB_4core3cmp10PartialOrd11partial_cmpB8_:
  335|    686|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs16_NtCsRRItI7FBc3_5oxrdf9interningNtB6_17InternedGraphNameNtNtCsd3ZSx5keFHB_4core5clone5Clone5cloneB8_:
  335|   237k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1c_NtCsRRItI7FBc3_5oxrdf9interningNtB6_12InternedTermNtNtCsd3ZSx5keFHB_4core3cmp3Ord3cmpB8_:
  392|   566k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1d_NtCsRRItI7FBc3_5oxrdf9interningNtB6_12InternedTermNtNtCsd3ZSx5keFHB_4core3cmp10PartialOrd11partial_cmpB8_:
  392|  31.4k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1f_NtCsRRItI7FBc3_5oxrdf9interningNtB6_12InternedTermNtNtCsd3ZSx5keFHB_4core5clone5Clone5cloneB8_:
  392|   237k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1q_NtCsRRItI7FBc3_5oxrdf9interningNtB6_21IdentityHasherBuilderNtNtCsd3ZSx5keFHB_4core7default7Default7defaultB8_:
  507|  2.14k|#[derive(Default, Clone)]
_RNvXs1s_NtCsRRItI7FBc3_5oxrdf9interningNtB6_14IdentityHasherNtNtCsd3ZSx5keFHB_4core7default7Default7defaultB8_:
  518|   305k|#[derive(Default)]
_RNCNvMs1_NtCsRRItI7FBc3_5oxrdf9interningNtB7_17InternedBlankNode12encoded_into0B9_:
  135|  9.68k|                .or_insert_with(|| blank_node.as_str().into());
_RINvXsl_NtCsRRItI7FBc3_5oxrdf9interningNtB6_3KeyNtNtCsd3ZSx5keFHB_4core4hash4Hash4hashNtNtNtCseSrEFui006x_3std4hash6random13DefaultHasherEB8_:
   69|  3.42k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RINvXsF_NtCsRRItI7FBc3_5oxrdf9interningNtB6_17InternedBlankNodeNtNtCsd3ZSx5keFHB_4core4hash4Hash4hashNtNtNtCseSrEFui006x_3std4hash6random13DefaultHasherEB8_:
  123|   378k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]

_RNvMNtCsRRItI7FBc3_5oxrdf7literalNtB2_7Literal6as_refCsa1xq2UewJGb_4trig:
  132|  43.4k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  133|  43.4k|        LiteralRef(match &self.0 {
  134|  3.81k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  135|    644|            LiteralContent::LanguageTaggedString { value, language } => {
  136|    644|                LiteralRefContent::LanguageTaggedString { value, language }
  137|       |            }
  138|  38.9k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  139|  38.9k|                value,
  140|  38.9k|                datatype: datatype.as_ref(),
  141|  38.9k|            },
  142|       |        })
  143|  43.4k|    }
_RNvXsD_NtCsRRItI7FBc3_5oxrdf7literalNtB5_7LiteralNtNtCsd3ZSx5keFHB_4core3cmp9PartialEq2eqCsa1xq2UewJGb_4trig:
   37|  24.2k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsI_NtCsRRItI7FBc3_5oxrdf7literalNtB5_14LiteralContentNtNtCsd3ZSx5keFHB_4core3cmp9PartialEq2eqCsa1xq2UewJGb_4trig:
   40|  24.2k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RINvMNtCsRRItI7FBc3_5oxrdf7literalNtB3_7Literal18new_simple_literalRNtNtCsgcnyUjfByoh_5alloc6string6StringECs70uHazZwt5R_5oxttl:
   50|    215|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   51|    215|        Self(LiteralContent::String(value.into()))
   52|    215|    }
_RNvMst_NtCsRRItI7FBc3_5oxrdf7literalNtB5_10LiteralRef5valueCs70uHazZwt5R_5oxttl:
  491|  23.1k|    pub const fn value(self) -> &'a str {
  492|  23.1k|        match self.0 {
  493|  3.42k|            LiteralRefContent::String(value)
  494|    422|            | LiteralRefContent::LanguageTaggedString { value, .. }
  495|  23.1k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  496|  23.1k|        }
  497|  23.1k|    }
_RNvMst_NtCsRRItI7FBc3_5oxrdf7literalNtB5_10LiteralRef8datatypeCs70uHazZwt5R_5oxttl:
  516|  23.1k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  517|  23.1k|        match self.0 {
  518|  3.42k|            LiteralRefContent::String(_) => xsd::STRING,
  519|    422|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  520|  19.2k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  521|       |        }
  522|  23.1k|    }
_RNvXsF_NtCsRRItI7FBc3_5oxrdf7literalNtB5_7LiteralNtNtCsd3ZSx5keFHB_4core5clone5Clone5cloneCs70uHazZwt5R_5oxttl:
   37|  93.3k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsM_NtCsRRItI7FBc3_5oxrdf7literalNtB5_14LiteralContentNtNtCsd3ZSx5keFHB_4core5clone5Clone5cloneCs70uHazZwt5R_5oxttl:
   40|  93.3k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsu_NtCsRRItI7FBc3_5oxrdf7literalNtB5_10LiteralRefNtNtCsd3ZSx5keFHB_4core3fmt7Display3fmtCs70uHazZwt5R_5oxttl:
  568|  3.84k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  569|  3.84k|        match self.0 {
  570|  3.42k|            LiteralRefContent::String(value) => print_quoted_str(value, f),
  571|    422|            LiteralRefContent::LanguageTaggedString { value, language } => {
  572|    422|                print_quoted_str(value, f)?;
  573|    422|                write!(f, "@{language}")
  574|       |            }
  575|      0|            LiteralRefContent::TypedLiteral { value, datatype } => {
  576|      0|                print_quoted_str(value, f)?;
  577|      0|                write!(f, "^^{datatype}")
  578|       |            }
  579|       |        }
  580|  3.84k|    }
_RINvMNtCsRRItI7FBc3_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCsgcnyUjfByoh_5alloc6string6StringEB5_:
   50|  13.5k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   51|  13.5k|        Self(LiteralContent::String(value.into()))
   52|  13.5k|    }
_RINvMNtCsRRItI7FBc3_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   56|  78.4k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   57|  78.4k|        let value = value.into();
   58|  78.4k|        let datatype = datatype.into();
   59|  78.4k|        Self(if datatype == xsd::STRING {
   60|      0|            LiteralContent::String(value)
   61|       |        } else {
   62|  78.4k|            LiteralContent::TypedLiteral { value, datatype }
   63|       |        })
   64|  78.4k|    }
_RINvMNtCsRRItI7FBc3_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCsgcnyUjfByoh_5alloc6string6StringB1m_EB5_:
   88|  1.76k|    pub fn new_language_tagged_literal_unchecked(
   89|  1.76k|        value: impl Into<String>,
   90|  1.76k|        language: impl Into<String>,
   91|  1.76k|    ) -> Self {
   92|  1.76k|        Self(LiteralContent::LanguageTaggedString {
   93|  1.76k|            value: value.into(),
   94|  1.76k|            language: language.into(),
   95|  1.76k|        })
   96|  1.76k|    }
_RINvMst_NtCsRRItI7FBc3_5oxrdf7literalNtB6_10LiteralRef17new_typed_literalNtNtB8_10named_node12NamedNodeRefEB8_:
  468|  46.5k|    pub fn new_typed_literal(value: &'a str, datatype: impl Into<NamedNodeRef<'a>>) -> Self {
  469|  46.5k|        let datatype = datatype.into();
  470|  46.5k|        LiteralRef(if datatype == xsd::STRING {
  471|      0|            LiteralRefContent::String(value)
  472|       |        } else {
  473|  46.5k|            LiteralRefContent::TypedLiteral { value, datatype }
  474|       |        })
  475|  46.5k|    }
_RINvNtCsRRItI7FBc3_5oxrdf7literal16print_quoted_strNtNtCsd3ZSx5keFHB_4core3fmt9FormatterEB4_:
  619|  3.84k|pub fn print_quoted_str(string: &str, f: &mut impl Write) -> fmt::Result {
  620|  3.84k|    f.write_char('"')?;
  621|  32.9k|    for c in string.chars() {
  622|  32.9k|        match c {
  623|    385|            '\u{08}' => f.write_str("\\b"),
  624|    273|            '\t' => f.write_str("\\t"),
  625|    326|            '\n' => f.write_str("\\n"),
  626|    104|            '\u{0c}' => f.write_str("\\f"),
  627|    133|            '\r' => f.write_str("\\r"),
  628|    779|            '"' => f.write_str("\\\""),
  629|    112|            '\\' => f.write_str("\\\\"),
  630|  30.8k|            '\0'..='\u{1f}' | '\u{7f}' => write!(f, "\\u{:04X}", u32::from(c)),
  631|  9.96k|            _ => f.write_char(c),
  632|      0|        }?;
  633|       |    }
  634|  3.84k|    f.write_char('"')
  635|  3.84k|}
_RINvXsV_NtCsRRItI7FBc3_5oxrdf7literalNtB6_10LiteralRefNtNtCsd3ZSx5keFHB_4core4hash4Hash4hashNtNtNtCseSrEFui006x_3std4hash6random13DefaultHasherEB8_:
  443|  47.9k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RINvXs13_NtCsRRItI7FBc3_5oxrdf7literalNtB7_17LiteralRefContentNtNtCsd3ZSx5keFHB_4core4hash4Hash4hashNtNtNtCseSrEFui006x_3std4hash6random13DefaultHasherEB9_:
  446|  47.9k|#[derive(PartialEq, Eq, Debug, Clone, Copy, Hash)]
_RNvMst_NtCsRRItI7FBc3_5oxrdf7literalNtB5_10LiteralRef18new_simple_literalB7_:
  462|  2.79k|    pub const fn new_simple_literal(value: &'a str) -> Self {
  463|  2.79k|        LiteralRef(LiteralRefContent::String(value))
  464|  2.79k|    }
_RNvMst_NtCsRRItI7FBc3_5oxrdf7literalNtB5_10LiteralRef37new_language_tagged_literal_uncheckedB7_:
  485|  3.48k|    pub const fn new_language_tagged_literal_unchecked(value: &'a str, language: &'a str) -> Self {
  486|  3.48k|        LiteralRef(LiteralRefContent::LanguageTaggedString { value, language })
  487|  3.48k|    }
_RNvMst_NtCsRRItI7FBc3_5oxrdf7literalNtB5_10LiteralRef5valueB7_:
  491|  25.1k|    pub const fn value(self) -> &'a str {
  492|  25.1k|        match self.0 {
  493|    581|            LiteralRefContent::String(value)
  494|    333|            | LiteralRefContent::LanguageTaggedString { value, .. }
  495|  25.1k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  496|  25.1k|        }
  497|  25.1k|    }
_RNvMst_NtCsRRItI7FBc3_5oxrdf7literalNtB5_10LiteralRef8languageB7_:
  504|    914|    pub const fn language(self) -> Option<&'a str> {
  505|    914|        match self.0 {
  506|    333|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  507|    581|            _ => None,
  508|       |        }
  509|    914|    }
_RNvMst_NtCsRRItI7FBc3_5oxrdf7literalNtB5_10LiteralRef8datatypeB7_:
  516|  24.2k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  517|  24.2k|        match self.0 {
  518|      0|            LiteralRefContent::String(_) => xsd::STRING,
  519|      0|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  520|  24.2k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  521|       |        }
  522|  24.2k|    }
_RNvMst_NtCsRRItI7FBc3_5oxrdf7literalNtB5_10LiteralRef8is_plainB7_:
  529|  25.1k|    pub const fn is_plain(self) -> bool {
  530|  24.2k|        matches!(
  531|  25.1k|            self.0,
  532|       |            LiteralRefContent::String(_) | LiteralRefContent::LanguageTaggedString { .. }
  533|       |        )
  534|  25.1k|    }
_RNvXsF_NtCsRRItI7FBc3_5oxrdf7literalNtB5_7LiteralNtNtCsd3ZSx5keFHB_4core5clone5Clone5cloneB7_:
   37|      3|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsM_NtCsRRItI7FBc3_5oxrdf7literalNtB5_14LiteralContentNtNtCsd3ZSx5keFHB_4core5clone5Clone5cloneB7_:
   40|      3|#[derive(PartialEq, Eq, Debug, Clone, Hash)]

_RNvMNtCsRRItI7FBc3_5oxrdf10named_nodeNtB2_9NamedNode6as_refCsa1xq2UewJGb_4trig:
   54|   223k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|   223k|        NamedNodeRef::new_unchecked(&self.iri)
   56|   223k|    }
_RNvMNtCsRRItI7FBc3_5oxrdf10named_nodeNtB2_9NamedNode6as_strCsa1xq2UewJGb_4trig:
   44|  12.8k|    pub fn as_str(&self) -> &str {
   45|  12.8k|        self.iri.as_str()
   46|  12.8k|    }
_RNvMs4_NtCsRRItI7FBc3_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCsa1xq2UewJGb_4trig:
  138|  70.3k|    pub fn into_owned(self) -> NamedNode {
  139|  70.3k|        NamedNode::new_unchecked(self.iri)
  140|  70.3k|    }
_RNvMs4_NtCsRRItI7FBc3_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCsa1xq2UewJGb_4trig:
  128|   223k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   223k|        Self { iri }
  130|   223k|    }
_RNvMs4_NtCsRRItI7FBc3_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCsa1xq2UewJGb_4trig:
  133|  78.5k|    pub const fn as_str(self) -> &'a str {
  134|  78.5k|        self.iri
  135|  78.5k|    }
_RNvXs5_NtCsRRItI7FBc3_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCsd3ZSx5keFHB_4core3fmt7Display3fmtCsa1xq2UewJGb_4trig:
  145|  65.7k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|  65.7k|        write!(f, "<{}>", self.as_str())
  147|  65.7k|    }
_RNvXs8_NtCsRRItI7FBc3_5oxrdf10named_nodeNtB5_12NamedNodeRefINtNtCsd3ZSx5keFHB_4core3cmp9PartialEqNtB5_9NamedNodeE2eqCsa1xq2UewJGb_4trig:
  166|  12.8k|    fn eq(&self, other: &NamedNode) -> bool {
  167|  12.8k|        self.as_str() == other.as_str()
  168|  12.8k|    }
_RNvXsl_NtCsRRItI7FBc3_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCsd3ZSx5keFHB_4core3cmp9PartialEq2eqCsa1xq2UewJGb_4trig:
   17|   125k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsu_NtCsRRItI7FBc3_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCsd3ZSx5keFHB_4core3cmp9PartialEq2eqCsa1xq2UewJGb_4trig:
  106|  22.7k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMs4_NtCsRRItI7FBc3_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCs70uHazZwt5R_5oxttl:
  138|  13.5k|    pub fn into_owned(self) -> NamedNode {
  139|  13.5k|        NamedNode::new_unchecked(self.iri)
  140|  13.5k|    }
_RNvMs4_NtCsRRItI7FBc3_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCs70uHazZwt5R_5oxttl:
  133|  10.4k|    pub const fn as_str(self) -> &'a str {
  134|  10.4k|        self.iri
  135|  10.4k|    }
_RNvXs5_NtCsRRItI7FBc3_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCsd3ZSx5keFHB_4core3fmt7Display3fmtCs70uHazZwt5R_5oxttl:
  145|  10.4k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|  10.4k|        write!(f, "<{}>", self.as_str())
  147|  10.4k|    }
_RNvXsp_NtCsRRItI7FBc3_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCsd3ZSx5keFHB_4core5clone5Clone5cloneCs70uHazZwt5R_5oxttl:
   17|   444k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMNtCsRRItI7FBc3_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|  78.4k|    pub fn as_str(&self) -> &str {
   45|  78.4k|        self.iri.as_str()
   46|  78.4k|    }
_RNvMs4_NtCsRRItI7FBc3_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedB7_:
  128|   128k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   128k|        Self { iri }
  130|   128k|    }
_RNvMs4_NtCsRRItI7FBc3_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|   159k|    pub const fn as_str(self) -> &'a str {
  134|   159k|        self.iri
  135|   159k|    }
_RNvMs4_NtCsRRItI7FBc3_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|   236k|    pub fn into_owned(self) -> NamedNode {
  139|   236k|        NamedNode::new_unchecked(self.iri)
  140|   236k|    }
_RNvXs6_NtCsRRItI7FBc3_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCsd3ZSx5keFHB_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|   236k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|   236k|        node.into_owned()
  154|   236k|    }
_RNvXs9_NtCsRRItI7FBc3_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCsd3ZSx5keFHB_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|  78.4k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|  78.4k|        self.as_str() == other.as_str()
  175|  78.4k|    }
_RNvXsp_NtCsRRItI7FBc3_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCsd3ZSx5keFHB_4core5clone5Clone5cloneB7_:
   17|      9|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsu_NtCsRRItI7FBc3_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCsd3ZSx5keFHB_4core3cmp9PartialEq2eqB7_:
  106|  46.5k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RINvMNtCsRRItI7FBc3_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCsgcnyUjfByoh_5alloc6string6StringEB5_:
   39|   185k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   185k|        Self { iri: iri.into() }
   41|   185k|    }
_RINvMNtCsRRItI7FBc3_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|   320k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   320k|        Self { iri: iri.into() }
   41|   320k|    }
_RINvXsA_NtCsRRItI7FBc3_5oxrdf10named_nodeNtB6_12NamedNodeRefNtNtCsd3ZSx5keFHB_4core4hash4Hash4hashNtNtNtCseSrEFui006x_3std4hash6random13DefaultHasherEB8_:
  106|   112k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]

_RNvMs18_NtCsRRItI7FBc3_5oxrdf6tripleNtB6_9GraphName16is_default_graphCsa1xq2UewJGb_4trig:
  876|  70.6k|    pub fn is_default_graph(&self) -> bool {
  877|  70.6k|        self.as_ref().is_default_graph()
  878|  70.6k|    }
_RNvMs18_NtCsRRItI7FBc3_5oxrdf6tripleNtB6_9GraphName6as_refCsa1xq2UewJGb_4trig:
  881|   237k|    pub fn as_ref(&self) -> GraphNameRef<'_> {
  882|   237k|        match self {
  883|  36.5k|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.as_ref()),
  884|    951|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.as_ref()),
  885|   199k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  886|       |        }
  887|   237k|    }
_RNvMs1g_NtCsRRItI7FBc3_5oxrdf6tripleNtB6_12GraphNameRef10into_ownedCsa1xq2UewJGb_4trig:
  969|    638|    pub fn into_owned(self) -> GraphName {
  970|    638|        match self {
  971|    373|            Self::NamedNode(node) => GraphName::NamedNode(node.into_owned()),
  972|     52|            Self::BlankNode(node) => GraphName::BlankNode(node.into_owned()),
  973|    213|            Self::DefaultGraph => GraphName::DefaultGraph,
  974|       |        }
  975|    638|    }
_RNvMs1g_NtCsRRItI7FBc3_5oxrdf6tripleNtB6_12GraphNameRef16is_default_graphCsa1xq2UewJGb_4trig:
  964|  70.6k|    pub fn is_default_graph(&self) -> bool {
  965|  70.6k|        matches!(self, Self::DefaultGraph)
  966|  70.6k|    }
_RNvMs1q_NtCsRRItI7FBc3_5oxrdf6tripleNtB6_4Quad6as_refCsa1xq2UewJGb_4trig:
 1098|  95.1k|    pub fn as_ref(&self) -> QuadRef<'_> {
 1099|  95.1k|        QuadRef {
 1100|  95.1k|            subject: self.subject.as_ref(),
 1101|  95.1k|            predicate: self.predicate.as_ref(),
 1102|  95.1k|            object: self.object.as_ref(),
 1103|  95.1k|            graph_name: self.graph_name.as_ref(),
 1104|  95.1k|        }
 1105|  95.1k|    }
_RNvMsc_NtCsRRItI7FBc3_5oxrdf6tripleNtB5_7Subject6as_refCsa1xq2UewJGb_4trig:
  181|   163k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|   163k|        match self {
  183|  44.9k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|   118k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|      0|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|   163k|    }
_RNvMsn_NtCsRRItI7FBc3_5oxrdf6tripleNtB5_10SubjectRef10into_ownedCsa1xq2UewJGb_4trig:
  294|  58.4k|    pub fn into_owned(self) -> Subject {
  295|  58.4k|        match self {
  296|  4.68k|            Self::NamedNode(node) => Subject::NamedNode(node.into_owned()),
  297|  53.8k|            Self::BlankNode(node) => Subject::BlankNode(node.into_owned()),
  298|       |            #[cfg(feature = "rdf-star")]
  299|      0|            Self::Triple(triple) => Subject::Triple(Box::new(triple.clone())),
  300|       |        }
  301|  58.4k|    }
_RNvMsy_NtCsRRItI7FBc3_5oxrdf6tripleNtB5_4Term6as_refCsa1xq2UewJGb_4trig:
  417|  95.1k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|  95.1k|        match self {
  419|  7.76k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|  43.9k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  43.4k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|      0|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|  95.1k|    }
_RNvXs1Q_NtCsRRItI7FBc3_5oxrdf6tripleNtB6_7SubjectNtNtCsd3ZSx5keFHB_4core3cmp9PartialEq2eqCsa1xq2UewJGb_4trig:
  155|  72.5k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1X_NtCsRRItI7FBc3_5oxrdf6tripleNtB6_10SubjectRefNtNtCsd3ZSx5keFHB_4core3cmp9PartialEq2eqCsa1xq2UewJGb_4trig:
  268|  68.7k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RNvXs1h_NtCsRRItI7FBc3_5oxrdf6tripleNtB6_12GraphNameRefNtNtCsd3ZSx5keFHB_4core3fmt7Display3fmtCsa1xq2UewJGb_4trig:
  980|    425|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  981|    425|        match self {
  982|    373|            Self::NamedNode(node) => node.fmt(f),
  983|     52|            Self::BlankNode(node) => node.fmt(f),
  984|      0|            Self::DefaultGraph => write!(f, "DEFAULT"),
  985|       |        }
  986|    425|    }
_RNvXs1w_NtCsRRItI7FBc3_5oxrdf6tripleNtB6_7QuadRefINtNtCsd3ZSx5keFHB_4core7convert4FromRNtB6_4QuadE4fromCsa1xq2UewJGb_4trig:
 1214|  95.1k|    fn from(quad: &'a Quad) -> Self {
 1215|  95.1k|        quad.as_ref()
 1216|  95.1k|    }
_RNvXs25_NtCsRRItI7FBc3_5oxrdf6tripleNtB6_4TermNtNtCsd3ZSx5keFHB_4core3cmp9PartialEq2eqCsa1xq2UewJGb_4trig:
  385|  72.5k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2H_NtCsRRItI7FBc3_5oxrdf6tripleNtB6_12GraphNameRefNtNtCsd3ZSx5keFHB_4core3cmp9PartialEq2eqCsa1xq2UewJGb_4trig:
  944|  71.3k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash, Default)]
_RNvXs2Q_NtCsRRItI7FBc3_5oxrdf6tripleNtB6_4QuadNtNtCsd3ZSx5keFHB_4core3cmp9PartialEq2eqCsa1xq2UewJGb_4trig:
 1065|  72.5k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2z_NtCsRRItI7FBc3_5oxrdf6tripleNtB6_9GraphNameNtNtCsd3ZSx5keFHB_4core3cmp9PartialEq2eqCsa1xq2UewJGb_4trig:
  856|  72.5k|#[derive(Eq, PartialEq, Debug, Clone, Hash, Default)]
_RINvMs12_NtCsRRItI7FBc3_5oxrdf6tripleNtB7_6Triple3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtB7_4TermECs70uHazZwt5R_5oxttl:
  728|    566|    pub fn new(
  729|    566|        subject: impl Into<Subject>,
  730|    566|        predicate: impl Into<NamedNode>,
  731|    566|        object: impl Into<Term>,
  732|    566|    ) -> Self {
  733|    566|        Self {
  734|    566|            subject: subject.into(),
  735|    566|            predicate: predicate.into(),
  736|    566|            object: object.into(),
  737|    566|        }
  738|    566|    }
_RINvMs1q_NtCsRRItI7FBc3_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node12NamedNodeRefB10_NtB7_9GraphNameECs70uHazZwt5R_5oxttl:
 1083|  12.2k|    pub fn new(
 1084|  12.2k|        subject: impl Into<Subject>,
 1085|  12.2k|        predicate: impl Into<NamedNode>,
 1086|  12.2k|        object: impl Into<Term>,
 1087|  12.2k|        graph_name: impl Into<GraphName>,
 1088|  12.2k|    ) -> Self {
 1089|  12.2k|        Self {
 1090|  12.2k|            subject: subject.into(),
 1091|  12.2k|            predicate: predicate.into(),
 1092|  12.2k|            object: object.into(),
 1093|  12.2k|            graph_name: graph_name.into(),
 1094|  12.2k|        }
 1095|  12.2k|    }
_RINvMs1q_NtCsRRItI7FBc3_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node12NamedNodeRefNtNtB9_10blank_node9BlankNodeNtB7_9GraphNameECs70uHazZwt5R_5oxttl:
 1083|  28.1k|    pub fn new(
 1084|  28.1k|        subject: impl Into<Subject>,
 1085|  28.1k|        predicate: impl Into<NamedNode>,
 1086|  28.1k|        object: impl Into<Term>,
 1087|  28.1k|        graph_name: impl Into<GraphName>,
 1088|  28.1k|    ) -> Self {
 1089|  28.1k|        Self {
 1090|  28.1k|            subject: subject.into(),
 1091|  28.1k|            predicate: predicate.into(),
 1092|  28.1k|            object: object.into(),
 1093|  28.1k|            graph_name: graph_name.into(),
 1094|  28.1k|        }
 1095|  28.1k|    }
_RINvMs1q_NtCsRRItI7FBc3_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtB7_4TermNtB7_9GraphNameECs70uHazZwt5R_5oxttl:
 1083|   249k|    pub fn new(
 1084|   249k|        subject: impl Into<Subject>,
 1085|   249k|        predicate: impl Into<NamedNode>,
 1086|   249k|        object: impl Into<Term>,
 1087|   249k|        graph_name: impl Into<GraphName>,
 1088|   249k|    ) -> Self {
 1089|   249k|        Self {
 1090|   249k|            subject: subject.into(),
 1091|   249k|            predicate: predicate.into(),
 1092|   249k|            object: object.into(),
 1093|   249k|            graph_name: graph_name.into(),
 1094|   249k|        }
 1095|   249k|    }
_RNvXs0_NtCsRRItI7FBc3_5oxrdf6tripleNtB5_16NamedOrBlankNodeINtNtCsd3ZSx5keFHB_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromCs70uHazZwt5R_5oxttl:
   43|  61.0k|    fn from(node: NamedNode) -> Self {
   44|  61.0k|        Self::NamedNode(node)
   45|  61.0k|    }
_RNvXs1S_NtCsRRItI7FBc3_5oxrdf6tripleNtB6_7SubjectNtNtCsd3ZSx5keFHB_4core5clone5Clone5cloneCs70uHazZwt5R_5oxttl:
  155|   249k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1a_NtCsRRItI7FBc3_5oxrdf6tripleNtB6_9GraphNameINtNtCsd3ZSx5keFHB_4core7convert4FromNtNtB8_10named_node9NamedNodeE4fromCs70uHazZwt5R_5oxttl:
  899|  2.35k|    fn from(node: NamedNode) -> Self {
  900|  2.35k|        Self::NamedNode(node)
  901|  2.35k|    }
_RNvXs1c_NtCsRRItI7FBc3_5oxrdf6tripleNtB6_9GraphNameINtNtCsd3ZSx5keFHB_4core7convert4FromNtNtB8_10blank_node9BlankNodeE4fromCs70uHazZwt5R_5oxttl:
  913|    385|    fn from(node: BlankNode) -> Self {
  914|    385|        Self::BlankNode(node)
  915|    385|    }
_RNvXs1e_NtCsRRItI7FBc3_5oxrdf6tripleNtB6_9GraphNameINtNtCsd3ZSx5keFHB_4core7convert4FromNtB6_16NamedOrBlankNodeE4fromCs70uHazZwt5R_5oxttl:
  927|  2.74k|    fn from(node: NamedOrBlankNode) -> Self {
  928|  2.74k|        match node {
  929|  2.35k|            NamedOrBlankNode::NamedNode(node) => node.into(),
  930|    385|            NamedOrBlankNode::BlankNode(node) => node.into(),
  931|       |        }
  932|  2.74k|    }
_RNvXs27_NtCsRRItI7FBc3_5oxrdf6tripleNtB6_4TermNtNtCsd3ZSx5keFHB_4core5clone5Clone5cloneCs70uHazZwt5R_5oxttl:
  385|   249k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2B_NtCsRRItI7FBc3_5oxrdf6tripleNtB6_9GraphNameNtNtCsd3ZSx5keFHB_4core5clone5Clone5cloneCs70uHazZwt5R_5oxttl:
  856|   290k|#[derive(Eq, PartialEq, Debug, Clone, Hash, Default)]
_RNvXs2_NtCsRRItI7FBc3_5oxrdf6tripleNtB5_16NamedOrBlankNodeINtNtCsd3ZSx5keFHB_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromCs70uHazZwt5R_5oxttl:
   57|  43.3k|    fn from(node: BlankNode) -> Self {
   58|  43.3k|        Self::BlankNode(node)
   59|  43.3k|    }
_RNvXsB_NtCsRRItI7FBc3_5oxrdf6tripleNtB5_4TermINtNtCsd3ZSx5keFHB_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCs70uHazZwt5R_5oxttl:
  444|  13.4k|    fn from(node: NamedNodeRef<'_>) -> Self {
  445|  13.4k|        node.into_owned().into()
  446|  13.4k|    }
_RNvXsL_NtCsRRItI7FBc3_5oxrdf6tripleNtB5_4TermINtNtCsd3ZSx5keFHB_4core7convert4FromNtB5_7SubjectE4fromCs70uHazZwt5R_5oxttl:
  520|     46|    fn from(node: Subject) -> Self {
  521|     46|        match node {
  522|      0|            Subject::NamedNode(node) => node.into(),
  523|     46|            Subject::BlankNode(node) => node.into(),
  524|       |            #[cfg(feature = "rdf-star")]
  525|      0|            Subject::Triple(triple) => Self::Triple(triple),
  526|       |        }
  527|     46|    }
_RNvXsP_NtCsRRItI7FBc3_5oxrdf6tripleNtB5_7TermRefINtNtCsd3ZSx5keFHB_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCs70uHazZwt5R_5oxttl:
  599|  4.68k|    fn from(node: NamedNodeRef<'a>) -> Self {
  600|  4.68k|        Self::NamedNode(node)
  601|  4.68k|    }
_RNvXsR_NtCsRRItI7FBc3_5oxrdf6tripleNtB5_7TermRefINtNtCsd3ZSx5keFHB_4core7convert4FromNtNtB7_10blank_node12BlankNodeRefE4fromCs70uHazZwt5R_5oxttl:
  613|  53.8k|    fn from(node: BlankNodeRef<'a>) -> Self {
  614|  53.8k|        Self::BlankNode(node)
  615|  53.8k|    }
_RNvXsY_NtCsRRItI7FBc3_5oxrdf6tripleNtB5_7TermRefINtNtCsd3ZSx5keFHB_4core7convert4FromNtB5_10SubjectRefE4fromCs70uHazZwt5R_5oxttl:
  666|  58.4k|    fn from(node: SubjectRef<'a>) -> Self {
  667|  58.4k|        match node {
  668|  4.68k|            SubjectRef::NamedNode(node) => node.into(),
  669|  53.8k|            SubjectRef::BlankNode(node) => node.into(),
  670|       |            #[cfg(feature = "rdf-star")]
  671|      0|            SubjectRef::Triple(triple) => triple.into(),
  672|       |        }
  673|  58.4k|    }
_RNvXsf_NtCsRRItI7FBc3_5oxrdf6tripleNtB5_7SubjectINtNtCsd3ZSx5keFHB_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCs70uHazZwt5R_5oxttl:
  207|     72|    fn from(node: NamedNodeRef<'_>) -> Self {
  208|     72|        node.into_owned().into()
  209|     72|    }
_RNvXsl_NtCsRRItI7FBc3_5oxrdf6tripleNtB5_7SubjectINtNtCsd3ZSx5keFHB_4core7convert4FromNtB5_16NamedOrBlankNodeE4fromCs70uHazZwt5R_5oxttl:
  252|  90.0k|    fn from(node: NamedOrBlankNode) -> Self {
  253|  90.0k|        match node {
  254|  47.3k|            NamedOrBlankNode::NamedNode(node) => node.into(),
  255|  42.6k|            NamedOrBlankNode::BlankNode(node) => node.into(),
  256|       |        }
  257|  90.0k|    }
_RNvXse_NtCsRRItI7FBc3_5oxrdf6tripleNtB5_7SubjectINtNtCsd3ZSx5keFHB_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|  49.5k|    fn from(node: NamedNode) -> Self {
  201|  49.5k|        Self::NamedNode(node)
  202|  49.5k|    }
_RNvXsg_NtCsRRItI7FBc3_5oxrdf6tripleNtB5_7SubjectINtNtCsd3ZSx5keFHB_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|   219k|    fn from(node: BlankNode) -> Self {
  215|   219k|        Self::BlankNode(node)
  216|   219k|    }
_RNvXsi_NtCsRRItI7FBc3_5oxrdf6tripleNtB5_7SubjectINtNtCsd3ZSx5keFHB_4core7convert4FromNtB5_6TripleE4fromB7_:
  229|    554|    fn from(node: Triple) -> Self {
  230|    554|        Self::Triple(Box::new(node))
  231|    554|    }
_RNvXsA_NtCsRRItI7FBc3_5oxrdf6tripleNtB5_4TermINtNtCsd3ZSx5keFHB_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|  25.7k|    fn from(node: NamedNode) -> Self {
  438|  25.7k|        Self::NamedNode(node)
  439|  25.7k|    }
_RNvXsC_NtCsRRItI7FBc3_5oxrdf6tripleNtB5_4TermINtNtCsd3ZSx5keFHB_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  451|   171k|    fn from(node: BlankNode) -> Self {
  452|   171k|        Self::BlankNode(node)
  453|   171k|    }
_RNvXsE_NtCsRRItI7FBc3_5oxrdf6tripleNtB5_4TermINtNtCsd3ZSx5keFHB_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  465|  93.9k|    fn from(literal: Literal) -> Self {
  466|  93.9k|        Self::Literal(literal)
  467|  93.9k|    }
_RNvXsG_NtCsRRItI7FBc3_5oxrdf6tripleNtB5_4TermINtNtCsd3ZSx5keFHB_4core7convert4FromNtB5_6TripleE4fromB7_:
  480|     12|    fn from(triple: Triple) -> Self {
  481|     12|        Self::Triple(Box::new(triple))
  482|     12|    }
_RNvXs1S_NtCsRRItI7FBc3_5oxrdf6tripleNtB6_7SubjectNtNtCsd3ZSx5keFHB_4core5clone5Clone5cloneB8_:
  155|      3|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs27_NtCsRRItI7FBc3_5oxrdf6tripleNtB6_4TermNtNtCsd3ZSx5keFHB_4core5clone5Clone5cloneB8_:
  385|      3|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2m_NtCsRRItI7FBc3_5oxrdf6tripleNtB6_6TripleNtNtCsd3ZSx5keFHB_4core5clone5Clone5cloneB8_:
  713|      3|#[derive(Eq, PartialEq, Debug, Clone, Hash)]

_RNvXNtCs70uHazZwt5R_5oxttl5lexerNtB2_7N3LexerNtNtNtB4_7toolkit5lexer15TokenRecognizer20recognize_next_token:
   55|  3.72M|    fn recognize_next_token<'a>(
   56|  3.72M|        &mut self,
   57|  3.72M|        data: &'a [u8],
   58|  3.72M|        is_ending: bool,
   59|  3.72M|        options: &N3LexerOptions,
   60|  3.72M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
   61|  3.72M|        match *data.first()? {
   62|   386k|            b'<' => match *data.get(1)? {
   63|  17.2k|                b'<' => Some((2, Ok(N3Token::Punctuation("<<")))),
   64|  6.46k|                b'=' if self.mode == N3LexerMode::N3 => {
   65|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   66|      0|                        Some(if let Ok(result) = result {
   67|      0|                            (consumed, Ok(result))
   68|       |                        } else {
   69|      0|                            (2, Ok(N3Token::Punctuation("<=")))
   70|       |                        })
   71|      0|                    } else if is_ending {
   72|      0|                        Some((2, Ok(N3Token::Punctuation("<="))))
   73|       |                    } else {
   74|      0|                        None
   75|       |                    }
   76|       |                }
   77|  2.81k|                b'-' if self.mode == N3LexerMode::N3 => {
   78|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   79|      0|                        Some(if let Ok(result) = result {
   80|      0|                            (consumed, Ok(result))
   81|       |                        } else {
   82|      0|                            (2, Ok(N3Token::Punctuation("<-")))
   83|       |                        })
   84|      0|                    } else if is_ending {
   85|      0|                        Some((2, Ok(N3Token::Punctuation("<-"))))
   86|       |                    } else {
   87|      0|                        None
   88|       |                    }
   89|       |                }
   90|   360k|                _ => self.recognize_iri(data, options),
   91|       |            },
   92|       |            b'>' => {
   93|  39.2k|                if *data.get(1)? == b'>' {
   94|  16.4k|                    Some((2, Ok(N3Token::Punctuation(">>"))))
   95|       |                } else {
   96|  19.0k|                    Some((1, Ok(N3Token::Punctuation(">"))))
   97|       |                }
   98|       |            }
   99|   141k|            b'_' => match data.get(1)? {
  100|   116k|                b':' => Self::recognize_blank_node_label(data),
  101|  1.90k|                c => Some((
  102|  1.90k|                    1,
  103|  1.90k|                    Err((0, format!("Unexpected character '{}'", char::from(*c))).into()),
  104|  1.90k|                )),
  105|       |            },
  106|       |            b'"' => {
  107|  35.1k|                if self.mode != N3LexerMode::NTriples
  108|  35.1k|                    && *data.get(1)? == b'"'
  109|  21.8k|                    && *data.get(2)? == b'"'
  110|       |                {
  111|  19.0k|                    Self::recognize_long_string(data, b'"')
  112|       |                } else {
  113|  14.9k|                    Self::recognize_string(data, b'"')
  114|       |                }
  115|       |            }
  116|  62.5k|            b'\'' if self.mode != N3LexerMode::NTriples => {
  117|  62.5k|                if *data.get(1)? == b'\'' && *data.get(2)? == b'\'' {
  118|  13.1k|                    Self::recognize_long_string(data, b'\'')
  119|       |                } else {
  120|  44.9k|                    Self::recognize_string(data, b'\'')
  121|       |                }
  122|       |            }
  123|  47.9k|            b'@' => self.recognize_lang_tag(data),
  124|   403k|            b'.' => match data.get(1) {
  125|   117k|                Some(b'0'..=b'9') => Self::recognize_number(data),
  126|   285k|                Some(_) => Some((1, Ok(N3Token::Punctuation(".")))),
  127|  94.9k|                None => is_ending.then_some((1, Ok(N3Token::Punctuation(".")))),
  128|       |            },
  129|       |            b'^' => {
  130|  12.5k|                if *data.get(1)? == b'^' {
  131|  1.58k|                    Some((2, Ok(N3Token::Punctuation("^^"))))
  132|       |                } else {
  133|  10.0k|                    Some((1, Ok(N3Token::Punctuation("^"))))
  134|       |                }
  135|       |            }
  136|   275k|            b'(' => Some((1, Ok(N3Token::Punctuation("(")))),
  137|  36.9k|            b')' => Some((1, Ok(N3Token::Punctuation(")")))),
  138|  20.8k|            b'[' => Some((1, Ok(N3Token::Punctuation("[")))),
  139|  3.21k|            b']' => Some((1, Ok(N3Token::Punctuation("]")))),
  140|       |            b'{' => {
  141|  88.5k|                if *data.get(1)? == b'|' {
  142|    120|                    Some((2, Ok(N3Token::Punctuation("{|"))))
  143|       |                } else {
  144|  47.9k|                    Some((1, Ok(N3Token::Punctuation("{"))))
  145|       |                }
  146|       |            }
  147|  3.04k|            b'}' => Some((1, Ok(N3Token::Punctuation("}")))),
  148|  30.3k|            b',' => Some((1, Ok(N3Token::Punctuation(",")))),
  149|  15.3k|            b';' => Some((1, Ok(N3Token::Punctuation(";")))),
  150|  2.54k|            b'!' => Some((1, Ok(N3Token::Punctuation("!")))),
  151|       |            b'|' => {
  152|  3.50k|                if *data.get(1)? == b'}' {
  153|    111|                    Some((2, Ok(N3Token::Punctuation("|}"))))
  154|       |                } else {
  155|  2.56k|                    Some((1, Ok(N3Token::Punctuation("|"))))
  156|       |                }
  157|       |            }
  158|       |            b'=' => {
  159|  13.6k|                if *data.get(1)? == b'>' {
  160|    123|                    Some((2, Ok(N3Token::Punctuation("=>"))))
  161|       |                } else {
  162|  11.4k|                    Some((1, Ok(N3Token::Punctuation("="))))
  163|       |                }
  164|       |            }
  165|   915k|            b'0'..=b'9' | b'+' | b'-' => Self::recognize_number(data),
  166|  51.9k|            b'?' => self.recognize_variable(data, is_ending),
  167|  1.35M|            _ => self.recognize_pname_or_keyword(data, is_ending),
  168|       |        }
  169|  3.72M|    }
_RNvMs_NtCs70uHazZwt5R_5oxttl5lexerNtB4_7N3Lexer3new:
  173|  18.6k|    pub fn new(mode: N3LexerMode, unchecked: bool) -> Self {
  174|  18.6k|        Self { mode, unchecked }
  175|  18.6k|    }
_RNvMs_NtCs70uHazZwt5R_5oxttl5lexerNtB4_7N3Lexer13recognize_iri:
  177|   360k|    fn recognize_iri(
  178|   360k|        &self,
  179|   360k|        data: &[u8],
  180|   360k|        options: &N3LexerOptions,
  181|   360k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  182|   360k|        // [18] 	IRIREF 	::= 	'<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
  183|   360k|        let mut string = Vec::new();
  184|   360k|        let mut i = 1;
  185|       |        loop {
  186|   360k|            let end = memchr2(b'>', b'\\', &data[i..])?;
  187|   244k|            string.extend_from_slice(&data[i..i + end]);
  188|   244k|            i += end;
  189|   244k|            match data[i] {
  190|       |                b'>' => {
  191|       |                    #[allow(clippy::range_plus_one)]
  192|   240k|                    return Some((i + 1, self.parse_iri(string, 0..i + 1, options)));
  193|       |                }
  194|       |                b'\\' => {
  195|  4.73k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, false)?;
  196|    869|                    i += additional + 1;
  197|    869|                    match c {
  198|      0|                        Ok(c) => {
  199|      0|                            let mut buf = [0; 4];
  200|      0|                            string.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  201|      0|                        }
  202|    869|                        Err(e) => return Some((i, Err(e))),
  203|       |                    }
  204|       |                }
  205|      0|                _ => unreachable!(),
  206|       |            }
  207|       |        }
  208|   360k|    }
_RNvMs_NtCs70uHazZwt5R_5oxttl5lexerNtB4_7N3Lexer9parse_iri:
  210|   240k|    fn parse_iri(
  211|   240k|        &self,
  212|   240k|        iri: Vec<u8>,
  213|   240k|        position: Range<usize>,
  214|   240k|        options: &N3LexerOptions,
  215|   240k|    ) -> Result<N3Token<'static>, TokenRecognizerError> {
  216|   240k|        let iri = string_from_utf8(iri, position.clone())?;
  217|       |        Ok(N3Token::IriRef(
  218|   233k|            if let Some(base_iri) = options.base_iri.as_ref() {
  219|   157k|                if self.unchecked {
  220|  52.4k|                    base_iri.resolve_unchecked(&iri)
  221|       |                } else {
  222|   104k|                    base_iri.resolve(&iri)
  223|       |                }
  224|   157k|                .map_err(|e| (position, e.to_string()))?
  225|   140k|                .into_inner()
  226|  76.1k|            } else if self.unchecked {
  227|      0|                iri
  228|       |            } else {
  229|  76.1k|                Iri::parse(iri)
  230|  76.1k|                    .map_err(|e| (position, e.to_string()))?
  231|  76.1k|                    .into_inner()
  232|       |            },
  233|       |        ))
  234|   240k|    }
_RNvMs_NtCs70uHazZwt5R_5oxttl5lexerNtB4_7N3Lexer26recognize_pname_or_keyword:
  236|  1.35M|    fn recognize_pname_or_keyword<'a>(
  237|  1.35M|        &self,
  238|  1.35M|        data: &'a [u8],
  239|  1.35M|        is_ending: bool,
  240|  1.35M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  241|  1.35M|        // [139s] 	PNAME_NS 	::= 	PN_PREFIX? ':'
  242|  1.35M|        // [140s] 	PNAME_LN 	::= 	PNAME_NS PN_LOCAL
  243|  1.35M|
  244|  1.35M|        // [167s] 	PN_PREFIX 	::= 	PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
  245|  1.35M|        let mut i = 0;
  246|       |        loop {
  247|  3.34M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  248|  3.17M|                match r {
  249|  2.86M|                    Ok((c, consumed)) => {
  250|  2.86M|                        if c == ':' {
  251|   100k|                            i += consumed;
  252|   100k|                            break;
  253|  2.76M|                        } else if i == 0 {
  254|   973k|                            if !Self::is_possible_pn_chars_base(c) {
  255|   681k|                                return Some((
  256|   681k|                                    consumed,
  257|   681k|                                    Err((
  258|   681k|                                        0..consumed,
  259|   681k|                                        format!(
  260|   681k|                                            "'{c}' is not allowed at the beginning of a prefix name"
  261|   681k|                                        ),
  262|   681k|                                    )
  263|   681k|                                        .into()),
  264|   681k|                                ));
  265|   291k|                            }
  266|   291k|                            i += consumed;
  267|  1.79M|                        } else if Self::is_possible_pn_chars(c) || c == '.' {
  268|  1.69M|                            i += consumed;
  269|  1.69M|                        } else {
  270|   140k|                            while data[..i].ends_with(b".") {
  271|  35.4k|                                i -= 1;
  272|  35.4k|                            }
  273|   105k|                            return Some((
  274|   105k|                                i,
  275|   105k|                                str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  276|   105k|                            ));
  277|       |                        }
  278|       |                    }
  279|   304k|                    Err(e) => return Some((e.location.end, Err(e))),
  280|       |                }
  281|   167k|            } else if is_ending {
  282|  3.12k|                while data[..i].ends_with(b".") {
  283|    953|                    i -= 1;
  284|    953|                }
  285|  2.17k|                return Some(if i == 0 {
  286|    803|                    (
  287|    803|                        1,
  288|    803|                        Err((0..1, format!("Unexpected byte {}", data[0])).into()),
  289|    803|                    )
  290|       |                } else {
  291|  1.37k|                    (
  292|  1.37k|                        i,
  293|  1.37k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  294|  1.37k|                    )
  295|       |                });
  296|       |            } else {
  297|   165k|                return None;
  298|       |            }
  299|       |        }
  300|   100k|        let pn_prefix = match str_from_utf8(&data[..i - 1], 0..i - 1) {
  301|   100k|            Ok(pn_prefix) => pn_prefix,
  302|      0|            Err(e) => return Some((i, Err(e))),
  303|       |        };
  304|   100k|        if pn_prefix.ends_with('.') {
  305|    152|            return Some((
  306|    152|                i,
  307|    152|                Err((
  308|    152|                    0..i,
  309|    152|                    format!(
  310|    152|                        "'{pn_prefix}' is not a valid prefix: prefixes are not allowed to end with '.'"),
  311|    152|                )
  312|    152|                    .into()),
  313|    152|            ));
  314|   100k|        }
  315|       |
  316|  35.3k|        let (consumed, pn_local_result) =
  317|   100k|            self.recognize_optional_pn_local(&data[i..], is_ending)?;
  318|  35.3k|        Some((
  319|  35.3k|            consumed + i,
  320|  35.3k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|       |                prefix: pn_prefix,
  322|       |                local,
  323|       |                might_be_invalid_iri,
  324|  35.3k|            }),
  325|  35.3k|        ))
  326|  1.35M|    }
_RNvMs_NtCs70uHazZwt5R_5oxttl5lexerNtB4_7N3Lexer18recognize_variable:
  328|  51.9k|    fn recognize_variable<'a>(
  329|  51.9k|        &self,
  330|  51.9k|        data: &'a [u8],
  331|  51.9k|        is_ending: bool,
  332|  51.9k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  333|       |        // [36] 	QUICK_VAR_NAME 	::= 	"?" PN_LOCAL
  334|  51.9k|        let (consumed, result) = self.recognize_optional_pn_local(&data[1..], is_ending)?;
  335|  29.2k|        Some((
  336|  29.2k|            consumed + 1,
  337|  29.2k|            result.and_then(|(name, _)| {
  338|       |                if name.is_empty() {
  339|       |                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|       |                    Ok(N3Token::Variable(name))
  342|       |                }
  343|  29.2k|            }),
  344|  29.2k|        ))
  345|  51.9k|    }
_RNvMs_NtCs70uHazZwt5R_5oxttl5lexerNtB4_7N3Lexer27recognize_optional_pn_local:
  347|   152k|    fn recognize_optional_pn_local<'a>(
  348|   152k|        &self,
  349|   152k|        data: &'a [u8],
  350|   152k|        is_ending: bool,
  351|   152k|    ) -> Option<(usize, Result<(Cow<'a, str>, bool), TokenRecognizerError>)> {
  352|   152k|        // [168s] 	PN_LOCAL 	::= 	(PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
  353|   152k|        let mut i = 0;
  354|   152k|        let mut buffer = None; // Buffer if there are some escaped characters
  355|   152k|        let mut position_that_is_already_in_buffer = 0;
  356|   152k|        let mut might_be_invalid_iri = false;
  357|       |        loop {
  358|  1.25M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  359|  1.17M|                match r {
  360|  1.17M|                    Ok((c, consumed)) => {
  361|  1.17M|                        if c == '%' {
  362|  5.35k|                            i += 1;
  363|  5.35k|                            let a = char::from(*data.get(i)?);
  364|  1.71k|                            i += 1;
  365|  1.71k|                            let b = char::from(*data.get(i)?);
  366|    989|                            if !a.is_ascii_hexdigit() || !b.is_ascii_hexdigit() {
  367|    359|                                return Some((i + 1, Err((
  368|    359|                                    i - 2..=i, format!("escapes in IRIs should be % followed by two hexadecimal characters, found '%{a}{b}'")
  369|    359|                                ).into())));
  370|    630|                            }
  371|    630|                            i += 1;
  372|  1.16M|                        } else if c == '\\' {
  373|  34.7k|                            i += 1;
  374|  34.7k|                            let a = char::from(*data.get(i)?);
  375|  32.2k|                            if self.unchecked
  376|  1.97k|                                || matches!(
  377|  15.6k|                                    a,
  378|       |                                    '_' | '~'
  379|       |                                        | '.'
  380|       |                                        | '-'
  381|       |                                        | '!'
  382|       |                                        | '$'
  383|       |                                        | '&'
  384|       |                                        | '\''
  385|       |                                        | '('
  386|       |                                        | ')'
  387|       |                                        | '*'
  388|       |                                        | '+'
  389|       |                                        | ','
  390|       |                                        | ';'
  391|       |                                        | '='
  392|       |                                )
  393|  30.2k|                            {
  394|  30.2k|                                // ok to escape
  395|  30.2k|                            } else if matches!(a, '/' | '?' | '#' | '@' | '%') {
  396|  1.61k|                                // ok to escape but requires IRI validation
  397|  1.61k|                                might_be_invalid_iri = true;
  398|  1.61k|                            } else {
  399|    360|                                return Some((i + 1, Err((
  400|    360|                                    i..=i, format!("The character that are allowed to be escaped in IRIs are _~.-!$&'()*+,;=/?#@%, found '{a}'")
  401|    360|                                ).into())));
  402|       |                            }
  403|  31.8k|                            let buffer = buffer.get_or_insert_with(String::new);
  404|  31.8k|                            // We add the missing bytes
  405|  31.8k|                            if i - position_that_is_already_in_buffer > 1 {
  406|  16.5k|                                buffer.push_str(
  407|  16.5k|                                    match str_from_utf8(
  408|  16.5k|                                        &data[position_that_is_already_in_buffer..i - 1],
  409|  16.5k|                                        position_that_is_already_in_buffer..i - 1,
  410|  16.5k|                                    ) {
  411|  16.5k|                                        Ok(data) => data,
  412|      0|                                        Err(e) => return Some((i, Err(e))),
  413|       |                                    },
  414|       |                                )
  415|  15.3k|                            }
  416|  31.8k|                            buffer.push(a);
  417|  31.8k|                            i += 1;
  418|  31.8k|                            position_that_is_already_in_buffer = i;
  419|  1.13M|                        } else if i == 0 {
  420|   106k|                            if !(Self::is_possible_pn_chars_u(c) || c == ':' || c.is_ascii_digit())
  421|       |                            {
  422|  29.1k|                                return Some((0, Ok((Cow::Borrowed(""), false))));
  423|  76.8k|                            }
  424|  76.8k|                            if !self.unchecked {
  425|       |                                might_be_invalid_iri |=
  426|  43.7k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  427|  43.7k|                                        || c == ':';
  428|  33.1k|                            }
  429|  76.8k|                            i += consumed;
  430|  1.02M|                        } else if Self::is_possible_pn_chars(c) || c == ':' || c == '.' {
  431|   996k|                            if !self.unchecked {
  432|       |                                might_be_invalid_iri |=
  433|   534k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  434|   534k|                                        || c == ':';
  435|   462k|                            }
  436|   996k|                            i += consumed;
  437|       |                        } else {
  438|  30.7k|                            let buffer = if let Some(mut buffer) = buffer {
  439|  1.86k|                                buffer.push_str(
  440|  1.86k|                                    match str_from_utf8(
  441|  1.86k|                                        &data[position_that_is_already_in_buffer..i],
  442|  1.86k|                                        position_that_is_already_in_buffer..i,
  443|  1.86k|                                    ) {
  444|  1.86k|                                        Ok(data) => data,
  445|      0|                                        Err(e) => return Some((i, Err(e))),
  446|       |                                    },
  447|       |                                );
  448|       |                                // We do not include the last dot
  449|  3.16k|                                while buffer.ends_with('.') {
  450|  1.30k|                                    buffer.pop();
  451|  1.30k|                                    i -= 1;
  452|  1.30k|                                }
  453|  1.86k|                                Cow::Owned(buffer)
  454|       |                            } else {
  455|  28.8k|                                let mut data = match str_from_utf8(&data[..i], 0..i) {
  456|  28.8k|                                    Ok(data) => data,
  457|      0|                                    Err(e) => return Some((i, Err(e))),
  458|       |                                };
  459|       |                                // We do not include the last dot
  460|  38.8k|                                while let Some(d) = data.strip_suffix('.') {
  461|  9.99k|                                    data = d;
  462|  9.99k|                                    i -= 1;
  463|  9.99k|                                }
  464|  28.8k|                                Cow::Borrowed(data)
  465|       |                            };
  466|  30.7k|                            return Some((i, Ok((buffer, might_be_invalid_iri))));
  467|       |                        }
  468|       |                    }
  469|  3.58k|                    Err(e) => return Some((e.location.end, Err(e))),
  470|       |                }
  471|  80.9k|            } else if is_ending {
  472|    486|                let buffer = if let Some(mut buffer) = buffer {
  473|       |                    // We do not include the last dot
  474|    190|                    while buffer.ends_with('.') {
  475|     31|                        buffer.pop();
  476|     31|                        i -= 1;
  477|     31|                    }
  478|    159|                    Cow::Owned(buffer)
  479|       |                } else {
  480|    327|                    let mut data = match str_from_utf8(&data[..i], 0..i) {
  481|    327|                        Ok(data) => data,
  482|      0|                        Err(e) => return Some((i, Err(e))),
  483|       |                    };
  484|       |                    // We do not include the last dot
  485|    822|                    while let Some(d) = data.strip_suffix('.') {
  486|    495|                        data = d;
  487|    495|                        i -= 1;
  488|    495|                    }
  489|    327|                    Cow::Borrowed(data)
  490|       |                };
  491|    486|                return Some((i, Ok((buffer, might_be_invalid_iri))));
  492|       |            } else {
  493|  80.4k|                return None;
  494|       |            }
  495|       |        }
  496|   152k|    }
_RNvMs_NtCs70uHazZwt5R_5oxttl5lexerNtB4_7N3Lexer26recognize_blank_node_label:
  498|   116k|    fn recognize_blank_node_label(
  499|   116k|        data: &[u8],
  500|   116k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  501|   116k|        // [141s] 	BLANK_NODE_LABEL 	::= 	'_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
  502|   116k|        let mut i = 2;
  503|       |        loop {
  504|  3.34M|            match Self::recognize_unicode_char(&data[i..], i)? {
  505|  3.32M|                Ok((c, consumed)) => {
  506|  3.32M|                    if (i == 2 && (Self::is_possible_pn_chars_u(c) || c.is_ascii_digit()))
  507|  3.22M|                        || (i > 2 && Self::is_possible_pn_chars(c))
  508|  3.22M|                    {
  509|  3.22M|                        // Ok
  510|  3.22M|                    } else if i > 2 && c == '.' {
  511|  1.25k|                        if data[i - 1] == b'.' {
  512|     66|                            i -= 1;
  513|     66|                            return Some((
  514|     66|                                i,
  515|     66|                                str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  516|     66|                            ));
  517|  1.18k|                        }
  518|  98.7k|                    } else if i == 0 {
  519|      0|                        return Some((
  520|      0|                            i,
  521|      0|                            Err((0..i, "A blank node ID should not be empty").into()),
  522|      0|                        ));
  523|  98.7k|                    } else if data[i - 1] == b'.' {
  524|    144|                        i -= 1;
  525|    144|                        return Some((
  526|    144|                            i,
  527|    144|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  528|    144|                        ));
  529|       |                    } else {
  530|  98.5k|                        return Some((
  531|  98.5k|                            i,
  532|  98.5k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  533|  98.5k|                        ));
  534|       |                    }
  535|  3.23M|                    i += consumed;
  536|       |                }
  537|     78|                Err(e) => return Some((e.location.end, Err(e))),
  538|       |            }
  539|       |        }
  540|   116k|    }
_RNvMs_NtCs70uHazZwt5R_5oxttl5lexerNtB4_7N3Lexer18recognize_lang_tag:
  542|  47.9k|    fn recognize_lang_tag<'a>(
  543|  47.9k|        &self,
  544|  47.9k|        data: &'a [u8],
  545|  47.9k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  546|  47.9k|        // [144s] 	LANGTAG 	::= 	'@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
  547|  47.9k|        let mut is_last_block_empty = true;
  548|   341k|        for (i, c) in data[1..].iter().enumerate() {
  549|   341k|            if c.is_ascii_alphabetic() {
  550|   281k|                is_last_block_empty = false;
  551|   281k|            } else if i == 0 {
  552|  6.40k|                return Some((
  553|  6.40k|                    1,
  554|  6.40k|                    Err((1..2, "A language code should always start with a letter").into()),
  555|  6.40k|                ));
  556|  53.3k|            } else if is_last_block_empty {
  557|    490|                return Some((i, self.parse_lang_tag(&data[1..i], 1..i - 1)));
  558|  52.8k|            } else if *c == b'-' {
  559|  41.0k|                is_last_block_empty = true;
  560|  41.0k|            } else {
  561|  11.8k|                return Some((i + 1, self.parse_lang_tag(&data[1..=i], 1..i)));
  562|       |            }
  563|       |        }
  564|  29.1k|        None
  565|  47.9k|    }
_RNvMs_NtCs70uHazZwt5R_5oxttl5lexerNtB4_7N3Lexer14parse_lang_tag:
  567|  12.3k|    fn parse_lang_tag<'a>(
  568|  12.3k|        &self,
  569|  12.3k|        lang_tag: &'a [u8],
  570|  12.3k|        position: Range<usize>,
  571|  12.3k|    ) -> Result<N3Token<'a>, TokenRecognizerError> {
  572|  12.3k|        let lang_tag = str_from_utf8(lang_tag, position.clone())?;
  573|  12.3k|        Ok(N3Token::LangTag(if self.unchecked {
  574|  3.97k|            lang_tag
  575|       |        } else {
  576|  8.34k|            LanguageTag::parse(lang_tag)
  577|  8.34k|                .map_err(|e| (position.clone(), e.to_string()))?
  578|  5.87k|                .into_inner()
  579|       |        }))
  580|  12.3k|    }
_RNvMs_NtCs70uHazZwt5R_5oxttl5lexerNtB4_7N3Lexer16recognize_string:
  582|  59.8k|    fn recognize_string(
  583|  59.8k|        data: &[u8],
  584|  59.8k|        delimiter: u8,
  585|  59.8k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  586|  59.8k|        // [22] 	STRING_LITERAL_QUOTE 	::= 	'"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
  587|  59.8k|        // [23] 	STRING_LITERAL_SINGLE_QUOTE 	::= 	"'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
  588|  59.8k|        let mut string = String::new();
  589|  59.8k|        let mut i = 1;
  590|       |        loop {
  591|   148k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  592|   128k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  593|   127k|                Ok(s) => string.push_str(s),
  594|    949|                Err(e) => return Some((end, Err(e))),
  595|       |            };
  596|   127k|            i += end;
  597|   127k|            match data[i] {
  598|   127k|                c if c == delimiter => {
  599|  13.8k|                    return Some((i + 1, Ok(N3Token::String(string))));
  600|       |                }
  601|       |                b'\\' => {
  602|   113k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  603|   103k|                    i += additional + 1;
  604|   103k|                    match c {
  605|  88.7k|                        Ok(c) => {
  606|  88.7k|                            string.push(c);
  607|  88.7k|                        }
  608|  15.1k|                        Err(e) => {
  609|       |                            // We read until the end of string char
  610|  15.1k|                            let end = memchr(delimiter, &data[i..])?;
  611|    987|                            return Some((i + end + 1, Err(e)));
  612|       |                        }
  613|       |                    }
  614|       |                }
  615|      0|                _ => unreachable!(),
  616|       |            }
  617|       |        }
  618|  59.8k|    }
_RNvMs_NtCs70uHazZwt5R_5oxttl5lexerNtB4_7N3Lexer21recognize_long_string:
  620|  32.1k|    fn recognize_long_string(
  621|  32.1k|        data: &[u8],
  622|  32.1k|        delimiter: u8,
  623|  32.1k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  624|  32.1k|        // [24] 	STRING_LITERAL_LONG_SINGLE_QUOTE 	::= 	"'''" (("'" | "''")? ([^'\] | ECHAR | UCHAR))* "'''"
  625|  32.1k|        // [25] 	STRING_LITERAL_LONG_QUOTE 	::= 	'"""' (('"' | '""')? ([^"\] | ECHAR | UCHAR))* '"""'
  626|  32.1k|        let mut string = String::new();
  627|  32.1k|        let mut i = 3;
  628|       |        loop {
  629|  61.9k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  630|  45.3k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  631|  44.4k|                Ok(s) => string.push_str(s),
  632|    828|                Err(e) => return Some((end, Err(e))),
  633|       |            };
  634|  44.4k|            i += end;
  635|  44.4k|            match data[i] {
  636|  44.4k|                c if c == delimiter => {
  637|  37.4k|                    if *data.get(i + 1)? == delimiter && *data.get(i + 2)? == delimiter {
  638|  12.0k|                        return Some((i + 3, Ok(N3Token::String(string))));
  639|  23.4k|                    }
  640|  23.4k|                    i += 1;
  641|  23.4k|                    string.push(char::from(delimiter));
  642|       |                }
  643|       |                b'\\' => {
  644|  7.05k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  645|  6.61k|                    i += additional + 1;
  646|  6.61k|                    match c {
  647|  6.39k|                        Ok(c) => {
  648|  6.39k|                            string.push(c);
  649|  6.39k|                        }
  650|    222|                        Err(e) => return Some((i, Err(e))),
  651|       |                    }
  652|       |                }
  653|      0|                _ => unreachable!(),
  654|       |            }
  655|       |        }
  656|  32.1k|    }
_RNvMs_NtCs70uHazZwt5R_5oxttl5lexerNtB4_7N3Lexer16recognize_number:
  658|   280k|    fn recognize_number(data: &[u8]) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  659|   280k|        // [19] 	INTEGER 	::= 	[+-]? [0-9]+
  660|   280k|        // [20] 	DECIMAL 	::= 	[+-]? [0-9]* '.' [0-9]+
  661|   280k|        // [21] 	DOUBLE 	::= 	[+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  662|   280k|        // [154s] 	EXPONENT 	::= 	[eE] [+-]? [0-9]+
  663|   280k|        let mut i = 0;
  664|   280k|        let c = *data.first()?;
  665|   280k|        if matches!(c, b'+' | b'-') {
  666|  38.4k|            i += 1;
  667|   241k|        }
  668|       |        // We read the digits before .
  669|   280k|        let mut count_before: usize = 0;
  670|       |        loop {
  671|   871k|            let c = *data.get(i)?;
  672|   824k|            if c.is_ascii_digit() {
  673|   591k|                i += 1;
  674|   591k|                count_before += 1;
  675|   591k|            } else {
  676|   233k|                break;
  677|       |            }
  678|       |        }
  679|       |
  680|       |        // We read the digits after .
  681|       |        #[allow(clippy::if_then_some_else_none)]
  682|   233k|        let count_after = if *data.get(i)? == b'.' {
  683|  66.6k|            i += 1;
  684|  66.6k|
  685|  66.6k|            let mut count_after = 0;
  686|       |            loop {
  687|   196k|                let c = *data.get(i)?;
  688|   187k|                if c.is_ascii_digit() {
  689|   129k|                    i += 1;
  690|   129k|                    count_after += 1;
  691|   129k|                } else {
  692|  57.2k|                    break;
  693|  57.2k|                }
  694|  57.2k|            }
  695|  57.2k|            Some(count_after)
  696|       |        } else {
  697|   166k|            None
  698|       |        };
  699|       |
  700|       |        // End
  701|   223k|        let c = *data.get(i)?;
  702|   223k|        if matches!(c, b'e' | b'E') {
  703|  36.8k|            i += 1;
  704|       |
  705|  36.8k|            let c = *data.get(i)?;
  706|  35.9k|            if matches!(c, b'+' | b'-') {
  707|    587|                i += 1;
  708|  35.3k|            }
  709|       |
  710|  35.9k|            let mut found = false;
  711|       |            loop {
  712|   171k|                let c = *data.get(i)?;
  713|   163k|                if c.is_ascii_digit() {
  714|   135k|                    i += 1;
  715|   135k|                    found = true;
  716|   135k|                } else {
  717|  27.8k|                    break;
  718|  27.8k|                }
  719|  27.8k|            }
  720|  27.8k|            Some((
  721|  27.8k|                i,
  722|  27.8k|                if !found {
  723|    593|                    Err((0..i, "A double exponent cannot be empty").into())
  724|  27.2k|                } else if count_before == 0 && count_after.unwrap_or(0) == 0 {
  725|    171|                    Err((0..i, "A double should not be empty").into())
  726|       |                } else {
  727|  27.0k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Double)
  728|       |                },
  729|       |            ))
  730|   186k|        } else if let Some(count_after) = count_after {
  731|  55.9k|            if count_after == 0 {
  732|       |                // We do not consume the '.' after all
  733|  35.1k|                i -= 1;
  734|  35.1k|                Some((
  735|  35.1k|                    i,
  736|  35.1k|                    if count_before == 0 {
  737|  1.70k|                        Err((0..i, "An integer should not be empty").into())
  738|       |                    } else {
  739|  33.4k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  740|       |                    },
  741|       |                ))
  742|       |            } else {
  743|  20.8k|                Some((i, str_from_utf8(&data[..i], 0..i).map(N3Token::Decimal)))
  744|       |            }
  745|       |        } else {
  746|       |            Some((
  747|   130k|                i,
  748|   130k|                if count_before == 0 {
  749|  17.7k|                    Err((0..i, "An integer should not be empty").into())
  750|       |                } else {
  751|   113k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  752|       |                },
  753|       |            ))
  754|       |        }
  755|   280k|    }
_RNvMs_NtCs70uHazZwt5R_5oxttl5lexerNtB4_7N3Lexer16recognize_escape:
  757|   125k|    fn recognize_escape(
  758|   125k|        data: &[u8],
  759|   125k|        position: usize,
  760|   125k|        with_echar: bool,
  761|   125k|    ) -> Option<(usize, Result<char, TokenRecognizerError>)> {
  762|   125k|        // [26] 	UCHAR 	::= 	'\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
  763|   125k|        // [159s] 	ECHAR 	::= 	'\' [tbnrf"'\]
  764|   125k|        match *data.get(1)? {
  765|  40.1k|            b'u' => match Self::recognize_hex_char(&data[2..], 4, 'u', position) {
  766|  39.8k|                Ok(c) => Some((5, Ok(c?))),
  767|    376|                Err(e) => Some((5, Err(e))),
  768|       |            },
  769|  1.89k|            b'U' => match Self::recognize_hex_char(&data[2..], 8, 'u', position) {
  770|    510|                Ok(c) => Some((9, Ok(c?))),
  771|  1.38k|                Err(e) => Some((9, Err(e))),
  772|       |            },
  773|    577|            b't' if with_echar => Some((1, Ok('\t'))),
  774|    738|            b'b' if with_echar => Some((1, Ok('\x08'))),
  775|  1.07k|            b'n' if with_echar => Some((1, Ok('\n'))),
  776|    451|            b'r' if with_echar => Some((1, Ok('\r'))),
  777|  1.01k|            b'f' if with_echar => Some((1, Ok('\x0C'))),
  778|    925|            b'"' if with_echar => Some((1, Ok('"'))),
  779|    787|            b'\'' if with_echar => Some((1, Ok('\''))),
  780|  50.6k|            b'\\' if with_echar => Some((1, Ok('\\'))),
  781|  14.4k|            c => Some((
  782|  14.4k|                1,
  783|  14.4k|                Err((
  784|  14.4k|                    position..position + 2,
  785|  14.4k|                    format!("Unexpected escape character '\\{}'", char::from(c)),
  786|  14.4k|                )
  787|  14.4k|                    .into()),
  788|  14.4k|            )), //TODO: read until end of string
  789|       |        }
  790|   125k|    }
_RNvMs_NtCs70uHazZwt5R_5oxttl5lexerNtB4_7N3Lexer18recognize_hex_char:
  792|  42.0k|    fn recognize_hex_char(
  793|  42.0k|        data: &[u8],
  794|  42.0k|        len: usize,
  795|  42.0k|        escape_char: char,
  796|  42.0k|        position: usize,
  797|  42.0k|    ) -> Result<Option<char>, TokenRecognizerError> {
  798|  42.0k|        if data.len() < len {
  799|  1.41k|            return Ok(None);
  800|  40.6k|        }
  801|  40.6k|        let val = str_from_utf8(&data[..len], position..position + len + 2)?;
  802|  39.8k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  803|       |            (
  804|       |                position..position + len + 2,
  805|       |                format!(
  806|       |                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  807|       |                ),
  808|       |            )
  809|  39.8k|        })?;
  810|  39.2k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  811|       |            (
  812|       |                position..position + len +2,
  813|       |                format!(
  814|       |                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  815|       |                ),
  816|       |            )
  817|  39.2k|        })?;
  818|  38.9k|        Ok(Some(c))
  819|  42.0k|    }
_RNvMs_NtCs70uHazZwt5R_5oxttl5lexerNtB4_7N3Lexer22recognize_unicode_char:
  821|  7.94M|    fn recognize_unicode_char(
  822|  7.94M|        data: &[u8],
  823|  7.94M|        position: usize,
  824|  7.94M|    ) -> Option<Result<(char, usize), TokenRecognizerError>> {
  825|  7.94M|        let mut code_point: u32;
  826|  7.94M|        let bytes_needed: usize;
  827|  7.94M|        let mut lower_boundary = 0x80;
  828|  7.94M|        let mut upper_boundary = 0xBF;
  829|       |
  830|  7.94M|        let byte = *data.first()?;
  831|  7.74M|        match byte {
  832|  7.74M|            0x00..=0x7F => return Some(Ok((char::from(byte), 1))),
  833|   226k|            0xC2..=0xDF => {
  834|   137k|                bytes_needed = 1;
  835|   137k|                code_point = u32::from(byte) & 0x1F;
  836|   137k|            }
  837|  89.0k|            0xE0..=0xEF => {
  838|  31.5k|                if byte == 0xE0 {
  839|  4.91k|                    lower_boundary = 0xA0;
  840|  26.6k|                }
  841|  31.5k|                if byte == 0xED {
  842|  3.50k|                    upper_boundary = 0x9F;
  843|  28.0k|                }
  844|  31.5k|                bytes_needed = 2;
  845|  31.5k|                code_point = u32::from(byte) & 0xF;
  846|       |            }
  847|  57.5k|            0xF0..=0xF4 => {
  848|  8.30k|                if byte == 0xF0 {
  849|  1.36k|                    lower_boundary = 0x90;
  850|  6.94k|                }
  851|  8.30k|                if byte == 0xF4 {
  852|  4.35k|                    upper_boundary = 0x8F;
  853|  4.35k|                }
  854|  8.30k|                bytes_needed = 3;
  855|  8.30k|                code_point = u32::from(byte) & 0x7;
  856|       |            }
  857|       |            _ => {
  858|   206k|                return Some(Err((
  859|   206k|                    position..=position,
  860|   206k|                    "Invalid UTF-8 character encoding",
  861|   206k|                )
  862|   206k|                    .into()))
  863|       |            }
  864|       |        }
  865|       |
  866|   182k|        for i in 1..=bytes_needed {
  867|   182k|            let byte = *data.get(i)?;
  868|   119k|            if byte < lower_boundary || upper_boundary < byte {
  869|   101k|                return Some(Err((
  870|   101k|                    position..=position + i,
  871|   101k|                    "Invalid UTF-8 character encoding",
  872|   101k|                )
  873|   101k|                    .into()));
  874|  18.1k|            }
  875|  18.1k|            lower_boundary = 0x80;
  876|  18.1k|            upper_boundary = 0xBF;
  877|  18.1k|            code_point = (code_point << 6) | (u32::from(byte) & 0x3F);
  878|       |        }
  879|       |
  880|  13.3k|        Some(
  881|  13.3k|            char::from_u32(code_point)
  882|  13.3k|                .map(|c| (c, bytes_needed + 1))
  883|  13.3k|                .ok_or_else(|| {
  884|       |                    (
  885|       |                        position..=position + bytes_needed,
  886|       |                        format!("The codepoint {code_point:X} is not a valid unicode character"),
  887|       |                    )
  888|       |                        .into()
  889|  13.3k|                }),
  890|  13.3k|        )
  891|  7.94M|    }
_RNvMs_NtCs70uHazZwt5R_5oxttl5lexerNtB4_7N3Lexer25is_possible_pn_chars_base:
  894|  7.23M|    fn is_possible_pn_chars_base(c: char) -> bool {
  895|  7.23M|        matches!(c,
  896|  3.74M|        'A'..='Z'
  897|  2.59M|        | 'a'..='z'
  898|  12.2k|        | '\u{00C0}'..='\u{00D6}'
  899|  12.2k|        | '\u{00D8}'..='\u{00F6}'
  900|  12.2k|        | '\u{00F8}'..='\u{02FF}'
  901|  11.4k|        | '\u{0370}'..='\u{037D}'
  902|  11.4k|        | '\u{037F}'..='\u{1FFF}'
  903|  1.15k|        | '\u{200C}'..='\u{200D}'
  904|  1.15k|        | '\u{2070}'..='\u{218F}'
  905|  1.15k|        | '\u{2C00}'..='\u{2FEF}'
  906|  1.15k|        | '\u{3001}'..='\u{D7FF}'
  907|    151|        | '\u{F900}'..='\u{FDCF}'
  908|    130|        | '\u{FDF0}'..='\u{FFFD}'
  909|    130|        | '\u{10000}'..='\u{EFFFF}')
  910|  7.23M|    }
_RNvMs_NtCs70uHazZwt5R_5oxttl5lexerNtB4_7N3Lexer22is_possible_pn_chars_u:
  913|  6.25M|    fn is_possible_pn_chars_u(c: char) -> bool {
  914|  6.25M|        Self::is_possible_pn_chars_base(c) || c == '_'
  915|  6.25M|    }
_RNvMs_NtCs70uHazZwt5R_5oxttl5lexerNtB4_7N3Lexer20is_possible_pn_chars:
  918|  6.04M|    fn is_possible_pn_chars(c: char) -> bool {
  919|  6.04M|        Self::is_possible_pn_chars_u(c)
  920|  2.79M|            || matches!(c,
  921|  2.26M|        '-' | '0'..='9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
  922|  6.04M|    }
_RNvMs_NtCs70uHazZwt5R_5oxttl5lexerNtB4_7N3Lexer43is_possible_pn_chars_base_but_not_valid_iri:
  924|   577k|    fn is_possible_pn_chars_base_but_not_valid_iri(c: char) -> bool {
  925|   577k|        matches!(c, '\u{FFF0}'..='\u{FFFD}')
  926|   577k|            || u32::from(c) % u32::from('\u{FFFE}') == 0
  927|   577k|            || u32::from(c) % u32::from('\u{FFFF}') == 0
  928|   577k|    }
_RNvNtCs70uHazZwt5R_5oxttl5lexer18resolve_local_name:
  931|  14.7k|pub fn resolve_local_name(
  932|  14.7k|    prefix: &str,
  933|  14.7k|    local: &str,
  934|  14.7k|    might_be_invalid_iri: bool,
  935|  14.7k|    prefixes: &HashMap<String, Iri<String>>,
  936|  14.7k|) -> Result<NamedNode, String> {
  937|  14.7k|    if let Some(start) = prefixes.get(prefix) {
  938|      0|        let iri = format!("{start}{local}");
  939|      0|        if might_be_invalid_iri || start.path().is_empty() {
  940|       |            // We validate again. We always validate if the local part might be the IRI authority.
  941|      0|            if let Err(e) = Iri::parse(iri.as_str()) {
  942|      0|                return Err(format!(
  943|      0|                    "The prefixed name {prefix}:{local} builds IRI {iri} that is invalid: {e}"
  944|      0|                ));
  945|      0|            }
  946|      0|        }
  947|      0|        Ok(NamedNode::new_unchecked(iri))
  948|       |    } else {
  949|  14.7k|        Err(format!("The prefix {prefix}: has not been declared"))
  950|       |    }
  951|  14.7k|}
_RNvNtCs70uHazZwt5R_5oxttl5lexer13str_from_utf8:
  953|   774k|fn str_from_utf8(data: &[u8], range: Range<usize>) -> Result<&str, TokenRecognizerError> {
  954|   774k|    str::from_utf8(data).map_err(|e| {
  955|       |        (
  956|       |            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  957|       |            format!("Invalid UTF-8: {e}"),
  958|       |        )
  959|       |            .into()
  960|   774k|    })
  961|   774k|}
_RNvNtCs70uHazZwt5R_5oxttl5lexer16string_from_utf8:
  963|   240k|fn string_from_utf8(data: Vec<u8>, range: Range<usize>) -> Result<String, TokenRecognizerError> {
  964|   240k|    String::from_utf8(data).map_err(|e| {
  965|       |        (
  966|       |            range.start + e.utf8_error().valid_up_to()
  967|       |                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  968|       |            format!("Invalid UTF-8: {e}"),
  969|       |        )
  970|       |            .into()
  971|   240k|    })
  972|   240k|}
_RNvXs2_NtCs70uHazZwt5R_5oxttl5lexerNtB5_7N3TokenNtNtCsd3ZSx5keFHB_4core3cmp9PartialEq2eqB7_:
   12|  1.63M|#[derive(Debug, PartialEq, Eq)]
_RNvXs8_NtCs70uHazZwt5R_5oxttl5lexerNtB5_11N3LexerModeNtNtCsd3ZSx5keFHB_4core3cmp9PartialEq2eqB7_:
   31|   106k|#[derive(Eq, PartialEq)]
_RNCNvMs_NtCs70uHazZwt5R_5oxttl5lexerNtB6_7N3Lexer9parse_iri0B8_:
  224|  16.5k|                .map_err(|e| (position, e.to_string()))?
_RNCNvMs_NtCs70uHazZwt5R_5oxttl5lexerNtB6_7N3Lexer26recognize_pname_or_keyword0B8_:
  320|  33.3k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|  33.3k|                prefix: pn_prefix,
  322|  33.3k|                local,
  323|  33.3k|                might_be_invalid_iri,
  324|  33.3k|            }),
_RNCNvMs_NtCs70uHazZwt5R_5oxttl5lexerNtB6_7N3Lexer18recognize_variable0B8_:
  337|  26.9k|            result.and_then(|(name, _)| {
  338|  26.9k|                if name.is_empty() {
  339|  24.2k|                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|  2.77k|                    Ok(N3Token::Variable(name))
  342|       |                }
  343|  26.9k|            }),
_RNCNvMs_NtCs70uHazZwt5R_5oxttl5lexerNtB6_7N3Lexer14parse_lang_tag0B8_:
  577|  2.46k|                .map_err(|e| (position.clone(), e.to_string()))?
_RNCNvMs_NtCs70uHazZwt5R_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_char0B8_:
  802|    619|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  803|    619|            (
  804|    619|                position..position + len + 2,
  805|    619|                format!(
  806|    619|                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  807|    619|                ),
  808|    619|            )
  809|    619|        })?;
_RNCNvMs_NtCs70uHazZwt5R_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_chars_0B8_:
  810|    292|        let c = char::from_u32(codepoint).ok_or_else(|| {
  811|    292|            (
  812|    292|                position..position + len +2,
  813|    292|                format!(
  814|    292|                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  815|    292|                ),
  816|    292|            )
  817|    292|        })?;
_RNCNvMs_NtCs70uHazZwt5R_5oxttl5lexerNtB6_7N3Lexer22recognize_unicode_char0B8_:
  882|  13.3k|                .map(|c| (c, bytes_needed + 1))
_RNCNvNtCs70uHazZwt5R_5oxttl5lexer13str_from_utf80B5_:
  954|  2.62k|    str::from_utf8(data).map_err(|e| {
  955|  2.62k|        (
  956|  2.62k|            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  957|  2.62k|            format!("Invalid UTF-8: {e}"),
  958|  2.62k|        )
  959|  2.62k|            .into()
  960|  2.62k|    })
_RNCNvNtCs70uHazZwt5R_5oxttl5lexer16string_from_utf80B5_:
  964|  6.73k|    String::from_utf8(data).map_err(|e| {
  965|  6.73k|        (
  966|  6.73k|            range.start + e.utf8_error().valid_up_to()
  967|  6.73k|                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  968|  6.73k|            format!("Invalid UTF-8: {e}"),
  969|  6.73k|        )
  970|  6.73k|            .into()
  971|  6.73k|    })

_RNvXNtCs70uHazZwt5R_5oxttl5terseNtB2_14TriGRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer20error_recovery_state:
   37|  1.07M|    fn error_recovery_state(mut self) -> Self {
   38|  1.07M|        self.stack.clear();
   39|  1.07M|        self.cur_subject.clear();
   40|  1.07M|        self.cur_predicate.clear();
   41|  1.07M|        self.cur_object.clear();
   42|  1.07M|        self.cur_graph = GraphName::DefaultGraph;
   43|  1.07M|        self
   44|  1.07M|    }
_RNvXNtCs70uHazZwt5R_5oxttl5terseNtB2_14TriGRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer14recognize_next:
   46|  2.43M|    fn recognize_next(
   47|  2.43M|        mut self,
   48|  2.43M|        token: N3Token<'_>,
   49|  2.43M|        context: &mut TriGRecognizerContext,
   50|  2.43M|        results: &mut Vec<Quad>,
   51|  2.43M|        errors: &mut Vec<RuleRecognizerError>,
   52|  2.43M|    ) -> Self {
   53|  2.43M|        if let Some(rule) = self.stack.pop() {
   54|  1.69M|            match rule {
   55|       |                // [1g] 	trigDoc 	::= 	(directive | block)*
   56|       |                // [2g] 	block 	::= 	triplesOrGraph | wrappedGraph | triples2 | "GRAPH" labelOrSubject wrappedGraph
   57|       |                // [3] 	directive 	::= 	prefixID | base | sparqlPrefix | sparqlBase
   58|       |                // [4] 	prefixID 	::= 	'@prefix' PNAME_NS IRIREF '.'
   59|       |                // [5] 	base 	::= 	'@base' IRIREF '.'
   60|       |                // [5s] 	sparqlPrefix 	::= 	"PREFIX" PNAME_NS IRIREF
   61|       |                // [6s] 	sparqlBase 	::= 	"BASE" IRIREF
   62|       |                TriGState::TriGDoc => {
   63|   232k|                    self.cur_graph = GraphName::DefaultGraph;
   64|   232k|                    self.stack.push(TriGState::TriGDoc);
   65|  10.7k|                    match token {
   66|  8.87k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("base") => {
   67|    797|                            self.stack.push(TriGState::BaseExpectIri);
   68|    797|                            self
   69|       |                        }
   70|  8.08k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("prefix") => {
   71|    195|                            self.stack.push(TriGState::PrefixExpectPrefix);
   72|    195|                            self
   73|       |                        }
   74|  1.15k|                        N3Token::LangTag("prefix") => {
   75|    321|                            self.stack.push(TriGState::ExpectDot);
   76|    321|                            self.stack.push(TriGState::PrefixExpectPrefix);
   77|    321|                            self
   78|       |                        }
   79|    832|                        N3Token::LangTag("base") => {
   80|     18|                            self.stack.push(TriGState::ExpectDot);
   81|     18|                            self.stack.push(TriGState::BaseExpectIri);
   82|     18|                            self
   83|       |                        }
   84|  7.88k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("graph") && context.with_graph_name => {
   85|      0|                            self.stack.push(TriGState::WrappedGraph);
   86|      0|                            self.stack.push(TriGState::GraphName);
   87|      0|                            self
   88|       |                        }
   89|  97.8k|                        N3Token::Punctuation("{") if context.with_graph_name => {
   90|  2.83k|                            self.stack.push(TriGState::WrappedGraph);
   91|  2.83k|                            self.recognize_next(token, context,results, errors)
   92|       |                        }
   93|       |                        _ => {
   94|   228k|                            self.stack.push(TriGState::TriplesOrGraph);
   95|   228k|                            self.recognize_next(token, context,results, errors)
   96|       |                        }
   97|       |                    }
   98|       |                },
   99|       |                TriGState::ExpectDot => {
  100|  82.6k|                    self.cur_subject.pop();
  101|  82.6k|                    if token == N3Token::Punctuation(".") {
  102|  58.4k|                        self
  103|       |                    } else  {
  104|  24.2k|                        errors.push("A dot is expected at the end of statements".into());
  105|  24.2k|                        self.recognize_next(token, context,results, errors)
  106|       |                    }
  107|       |                },
  108|    695|                TriGState::BaseExpectIri => match token {
  109|    546|                    N3Token::IriRef(iri) => {
  110|    546|                        match Iri::parse_unchecked(iri) {
  111|    546|                            Ok(iri) => {
  112|    546|                                context.lexer_options.base_iri = Some(iri);
  113|    546|                                self
  114|       |                            }
  115|      0|                            Err(e) => self.error(errors, format!("Invalid base IRI: {e}"))
  116|       |                        }
  117|       |                    }
  118|    149|                    _ => self.error(errors, "The BASE keyword should be followed by an IRI"),
  119|       |                },
  120|    207|                TriGState::PrefixExpectPrefix => match token {
  121|    207|                    N3Token::PrefixedName { prefix, local, .. } if local.is_empty() => {
  122|     96|                        self.stack.push(TriGState::PrefixExpectIri { name: prefix.to_owned() });
  123|     96|                        self
  124|       |                    }
  125|       |                    _ => {
  126|    274|                        self.error(errors, "The PREFIX keyword should be followed by a prefix like 'ex:'")
  127|       |                    }
  128|       |                },
  129|     75|                TriGState::PrefixExpectIri { name } => match token {
  130|      0|                    N3Token::IriRef(iri) => {
  131|      0|                        match Iri::parse_unchecked(iri) {
  132|      0|                            Ok(iri) => {
  133|      0|                                context.prefixes.insert(name, iri);
  134|      0|                                self
  135|       |                            }
  136|      0|                            Err(e) => self.error(errors, format!("Invalid prefix IRI: {e}"))
  137|       |                        }                    }
  138|     75|                    _ => self.error(errors, "The PREFIX declaration should be followed by a prefix and its value as an IRI"),
  139|       |                },
  140|       |                // [3g] 	triplesOrGraph 	::= 	labelOrSubject ( wrappedGraph | predicateObjectList '.' ) | quotedTriple predicateObjectList '.'
  141|       |                // [4g] 	triples2 	::= 	blankNodePropertyList predicateObjectList? '.' | collection predicateObjectList '.'
  142|  1.66k|                TriGState::TriplesOrGraph => match token {
  143|  61.0k|                    N3Token::IriRef(iri) => {
  144|  61.0k|                        self.stack.push(TriGState::WrappedGraphOrPredicateObjectList {
  145|  61.0k|                            term: NamedNode::new_unchecked(iri).into()
  146|  61.0k|                        });
  147|  61.0k|                        self
  148|       |                    }
  149|  13.7k|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  150|      0|                        Ok(t) => {
  151|      0|                            self.stack.push(TriGState::WrappedGraphOrPredicateObjectList {
  152|      0|                                term: t.into()
  153|      0|                            });
  154|      0|                            self
  155|       |                        },
  156|  13.7k|                        Err(e) => self.error(errors, e)
  157|       |                    }
  158|  42.7k|                    N3Token::BlankNodeLabel(label) => {
  159|  42.7k|                        self.stack.push(TriGState::WrappedGraphOrPredicateObjectList {
  160|  42.7k|                            term: BlankNode::new_unchecked(label).into()
  161|  42.7k|                        });
  162|  42.7k|                        self
  163|       |                    }
  164|  95.0k|                    N3Token::Punctuation("[") => {
  165|  5.49k|                        self.stack.push(TriGState::WrappedGraphBlankNodePropertyListCurrent);
  166|  5.49k|                        self
  167|       |                    }
  168|  89.5k|                    N3Token::Punctuation("(") => {
  169|  16.6k|                        self.stack.push(TriGState::ExpectDot);
  170|  16.6k|                        self.stack.push(TriGState::PredicateObjectList);
  171|  16.6k|                        self.stack.push(TriGState::SubjectCollectionBeginning);
  172|  16.6k|                        self
  173|       |                    }
  174|       |                    #[cfg(feature = "rdf-star")]
  175|  72.8k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  176|  1.66k|                        self.stack.push(TriGState::ExpectDot);
  177|  1.66k|                        self.stack.push(TriGState::PredicateObjectList);
  178|  1.66k|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  179|  1.66k|                        self.stack.push(TriGState::QuotedObject);
  180|  1.66k|                        self.stack.push(TriGState::Verb);
  181|  1.66k|                        self.stack.push(TriGState::QuotedSubject);
  182|  1.66k|                        self
  183|       |                    }
  184|       |                    _ => {
  185|  86.7k|                        self.error(errors, "TOKEN is not a valid subject or graph name")
  186|       |                    }
  187|       |                }
  188|  92.7k|                TriGState::WrappedGraphOrPredicateObjectList { term } => {
  189|  92.7k|                    if token == N3Token::Punctuation("{") && context.with_graph_name {
  190|  2.74k|                        self.cur_graph = term.into();
  191|  2.74k|                        self.stack.push(TriGState::WrappedGraph);
  192|  90.0k|                    } else {
  193|  90.0k|                        self.cur_subject.push(term.into());
  194|  90.0k|                        self.stack.push(TriGState::ExpectDot);
  195|  90.0k|                        self.stack.push(TriGState::PredicateObjectList);
  196|  90.0k|                    }
  197|  92.7k|                    self.recognize_next(token, context,results, errors)
  198|       |                }
  199|  4.72k|                TriGState::WrappedGraphBlankNodePropertyListCurrent => if token == N3Token::Punctuation("]") {
  200|    613|                    self.stack.push(TriGState::WrappedGraphOrPredicateObjectList {
  201|    613|                        term: BlankNode::default().into()
  202|    613|                    });
  203|    613|                    self
  204|       |                } else {
  205|  4.11k|                    self.cur_subject.push(BlankNode::default().into());
  206|  4.11k|                    self.stack.push(TriGState::ExpectDot);
  207|  4.11k|                    self.stack.push(TriGState::SubjectBlankNodePropertyListEnd);
  208|  4.11k|                    self.stack.push(TriGState::PredicateObjectList);
  209|  4.11k|                    self.recognize_next(token, context,results, errors)
  210|       |                }
  211|  1.30k|                TriGState::SubjectBlankNodePropertyListEnd => if token == N3Token::Punctuation("]") {
  212|     19|                    self.stack.push(TriGState::SubjectBlankNodePropertyListAfter  );
  213|     19|                    self
  214|       |                } else {
  215|  1.28k|                    errors.push("blank node property lists should end with a ']'".into());
  216|  1.28k|                    self.stack.push(TriGState::SubjectBlankNodePropertyListAfter );
  217|  1.28k|                    self.recognize_next(token, context,results, errors)
  218|       |                }
  219|  1.29k|                TriGState::SubjectBlankNodePropertyListAfter => if matches!(token, N3Token::Punctuation("." | "}")) {
  220|     16|                    self.recognize_next(token, context,results, errors)
  221|       |                } else {
  222|  1.28k|                    self.stack.push(TriGState::PredicateObjectList);
  223|  1.28k|                    self.recognize_next(token, context,results, errors)
  224|       |                }
  225|       |                TriGState::SubjectCollectionBeginning => {
  226|  16.0k|                    if let N3Token::Punctuation(")") = token {
  227|     72|                        self.cur_subject.push(rdf::NIL.into());
  228|     72|                        self
  229|       |                    } else {
  230|  15.9k|                        let root = BlankNode::default();
  231|  15.9k|                        self.cur_subject.push(root.clone().into());
  232|  15.9k|                        self.cur_subject.push(root.into());
  233|  15.9k|                        self.cur_predicate.push(rdf::FIRST.into());
  234|  15.9k|                        self.stack.push(TriGState::SubjectCollectionPossibleEnd);
  235|  15.9k|                        self.stack.push(TriGState::Object);
  236|  15.9k|                        self.recognize_next(token, context,results, errors)
  237|       |                    }
  238|       |                },
  239|       |                TriGState::SubjectCollectionPossibleEnd => {
  240|  6.90k|                    let old = self.cur_subject.pop().unwrap();
  241|  6.90k|                    self.cur_object.pop();
  242|  6.90k|                    if let N3Token::Punctuation(")") = token {
  243|    259|                        self.cur_predicate.pop();
  244|    259|                        results.push(Quad::new(
  245|    259|                            old,
  246|    259|                            rdf::REST,
  247|    259|                            rdf::NIL,
  248|    259|                            self.cur_graph.clone()
  249|    259|                        ));
  250|    259|                        self
  251|       |                    } else {
  252|  6.64k|                        let new = BlankNode::default();
  253|  6.64k|                        results.push(Quad::new(
  254|  6.64k|                            old,
  255|  6.64k|                            rdf::REST,
  256|  6.64k|                            new.clone(),
  257|  6.64k|                            self.cur_graph.clone()
  258|  6.64k|                        ));
  259|  6.64k|                        self.cur_subject.push(new.into());
  260|  6.64k|                        self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  261|  6.64k|                        self.stack.push(TriGState::Object);
  262|  6.64k|                        self.recognize_next(token, context,results, errors)
  263|       |                    }
  264|       |                }
  265|       |                // [5g] 	wrappedGraph 	::= 	'{' triplesBlock? '}'
  266|       |                // [6g] 	triplesBlock 	::= 	triples ('.' triplesBlock?)?
  267|  5.57k|                TriGState::WrappedGraph => if token == N3Token::Punctuation("{") {
  268|  5.57k|                    self.stack.push(TriGState::WrappedGraphPossibleEnd);
  269|  5.57k|                    self.stack.push(TriGState::Triples);
  270|  5.57k|                    self
  271|       |                } else {
  272|      0|                    self.error(errors, "The GRAPH keyword should be followed by a graph name and a value in '{'")
  273|       |                },
  274|       |                TriGState::WrappedGraphPossibleEnd => {
  275|  12.8k|                    self.cur_subject.pop();
  276|  12.8k|                    match token {
  277|  12.5k|                        N3Token::Punctuation("}") => {
  278|    512|                            self
  279|       |                        }
  280|  12.0k|                        N3Token::Punctuation(".") => {
  281|  11.8k|                            self.stack.push(TriGState::WrappedGraphPossibleEnd);
  282|  11.8k|                            self.stack.push(TriGState::Triples);
  283|  11.8k|                            self
  284|       |                        }
  285|       |                       _ => {
  286|    448|                            errors.push("A '}' or a '.' is expected at the end of a graph block".into());
  287|    448|                            self.recognize_next(token, context,results, errors)
  288|       |                        }
  289|       |                    }
  290|       |                }
  291|       |                // [6] 	triples 	::= 	subject predicateObjectList | blankNodePropertyList predicateObjectList?
  292|       |                // [10] 	subject 	::= 	iri | BlankNode | collection | quotedTriple
  293|     60|                TriGState::Triples => match token {
  294|  3.21k|                    N3Token::Punctuation("}") => {
  295|    512|                        self.recognize_next(token, context,results, errors) // Early end
  296|       |                    },
  297|  2.70k|                    N3Token::Punctuation("[") => {
  298|    249|                        self.cur_subject.push(BlankNode::default().into());
  299|    249|                        self.stack.push(TriGState::TriplesBlankNodePropertyListCurrent);
  300|    249|                        self
  301|       |                    }
  302|  1.13k|                    N3Token::IriRef(iri) => {
  303|  1.13k|                        self.cur_subject.push(NamedNode::new_unchecked(iri).into());
  304|  1.13k|                        self.stack.push(TriGState::PredicateObjectList);
  305|  1.13k|                        self
  306|       |                    }
  307|    322|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  308|      0|                        Ok(t) => {
  309|      0|                            self.cur_subject.push(t.into());
  310|      0|                            self.stack.push(TriGState::PredicateObjectList);
  311|      0|                            self
  312|       |                        },
  313|    322|                        Err(e) => self.error(errors, e)
  314|       |                    }
  315|  11.9k|                    N3Token::BlankNodeLabel(label) => {
  316|  11.9k|                        self.cur_subject.push(BlankNode::new_unchecked(label).into());
  317|  11.9k|                        self.stack.push(TriGState::PredicateObjectList);
  318|  11.9k|                        self
  319|       |                    }
  320|  2.45k|                    N3Token::Punctuation("(") => {
  321|  1.62k|                        self.stack.push(TriGState::PredicateObjectList);
  322|  1.62k|                        self.stack.push(TriGState::SubjectCollectionBeginning);
  323|  1.62k|                        self
  324|       |                    }
  325|       |                    #[cfg(feature = "rdf-star")]
  326|    830|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  327|     60|                        self.stack.push(TriGState::PredicateObjectList);
  328|     60|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  329|     60|                        self.stack.push(TriGState::QuotedObject);
  330|     60|                        self.stack.push(TriGState::Verb);
  331|     60|                        self.stack.push(TriGState::QuotedSubject);
  332|     60|                        self
  333|       |                    }
  334|       |                   _ => {
  335|    999|                        self.error(errors, "TOKEN is not a valid RDF subject")
  336|       |                    }
  337|       |                },
  338|    240|                TriGState::TriplesBlankNodePropertyListCurrent => if token == N3Token::Punctuation("]") {
  339|     84|                    self.stack.push(TriGState::PredicateObjectList);
  340|     84|                    self
  341|       |                } else {
  342|    156|                    self.stack.push(TriGState::SubjectBlankNodePropertyListEnd);
  343|    156|                    self.stack.push(TriGState::PredicateObjectList);
  344|    156|                    self.recognize_next(token, context,results, errors)
  345|       |                }
  346|       |                // [7g] 	labelOrSubject 	::= 	iri | BlankNode
  347|      0|                TriGState::GraphName => match token {
  348|      0|                    N3Token::IriRef(iri) => {
  349|      0|                        self.cur_graph = NamedNode::new_unchecked(iri).into();
  350|      0|                        self
  351|       |                    }
  352|      0|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  353|      0|                        Ok(t) => {
  354|      0|                            self.cur_graph = t.into();
  355|      0|                            self
  356|       |                        },
  357|      0|                        Err(e) => self.error(errors, e)
  358|       |                    }
  359|      0|                    N3Token::BlankNodeLabel(label) => {
  360|      0|                        self.cur_graph = BlankNode::new_unchecked(label).into();
  361|      0|                        self
  362|       |                    }
  363|      0|                    N3Token::Punctuation("[") => {
  364|      0|                        self.stack.push(TriGState::GraphNameAnonEnd);
  365|      0|                        self
  366|       |                    }
  367|       |                   _ => {
  368|      0|                        self.error(errors, "TOKEN is not a valid graph name")
  369|       |                    }
  370|       |                }
  371|      0|                TriGState::GraphNameAnonEnd => if token == N3Token::Punctuation("]") {
  372|      0|                    self.cur_graph = BlankNode::default().into();
  373|      0|                    self
  374|       |                } else {
  375|      0|                    self.error(errors, "Anonymous blank node with a property list are not allowed as graph name")
  376|       |                }
  377|       |                // [7] 	predicateObjectList 	::= 	verb objectList (';' (verb objectList)?)*
  378|       |                TriGState::PredicateObjectList => {
  379|   109k|                    self.stack.push(TriGState::PredicateObjectListEnd);
  380|   109k|                    self.stack.push(TriGState::ObjectsList);
  381|   109k|                    self.stack.push(TriGState::Verb);
  382|   109k|                    self.recognize_next(token, context,results, errors)
  383|       |                },
  384|       |                TriGState::PredicateObjectListEnd => {
  385|   103k|                    self.cur_predicate.pop();
  386|   103k|                    if token == N3Token::Punctuation(";") {
  387|  7.24k|                        self.stack.push(TriGState::PredicateObjectListPossibleContinuation);
  388|  7.24k|                        self
  389|       |                    } else {
  390|  96.3k|                        self.recognize_next(token, context,results, errors)
  391|       |                    }
  392|       |                },
  393|  8.65k|                TriGState::PredicateObjectListPossibleContinuation => if token == N3Token::Punctuation(";") {
  394|  1.43k|                    self.stack.push(TriGState::PredicateObjectListPossibleContinuation);
  395|  1.43k|                    self
  396|  7.22k|                } else if matches!(token, N3Token::Punctuation("." | "}" | "]")) {
  397|    127|                    self.recognize_next(token, context,results, errors)
  398|       |                } else {
  399|  7.09k|                    self.stack.push(TriGState::PredicateObjectListEnd);
  400|  7.09k|                    self.stack.push(TriGState::ObjectsList);
  401|  7.09k|                    self.stack.push(TriGState::Verb);
  402|  7.09k|                    self.recognize_next(token, context,results, errors)
  403|       |                },
  404|       |                // [8] 	objectList 	::= 	object annotation? ( ',' object annotation? )*
  405|       |                // [30t] 	annotation 	::= 	'{|' predicateObjectList '|}'
  406|       |                TriGState::ObjectsList => {
  407|   110k|                    self.stack.push(TriGState::ObjectsListEnd);
  408|   110k|                    self.stack.push(TriGState::Object);
  409|   110k|                    self.recognize_next(token, context,results, errors)
  410|       |                }
  411|       |                TriGState::ObjectsListEnd => {
  412|   110k|                    match token {
  413|  88.5k|                        N3Token::Punctuation(",") => {
  414|  6.63k|                            self.cur_object.pop();
  415|  6.63k|                            self.stack.push(TriGState::ObjectsListEnd);
  416|  6.63k|                            self.stack.push(TriGState::Object);
  417|  6.63k|                            self
  418|       |                        },
  419|       |                        #[cfg(feature = "rdf-star")]
  420|  81.8k|                        N3Token::Punctuation("{|") => {
  421|      0|                            let triple = Triple::new(
  422|      0|                                self.cur_subject.last().unwrap().clone(),
  423|      0|                                self.cur_predicate.last().unwrap().clone(),
  424|      0|                                self.cur_object.pop().unwrap()
  425|      0|                            );
  426|      0|                            self.cur_subject.push(triple.into());
  427|      0|                            self.stack.push(TriGState::AnnotationEnd);
  428|      0|                            self.stack.push(TriGState::PredicateObjectList);
  429|      0|                            self
  430|       |                        }
  431|       |                       _ => {
  432|   103k|                            self.cur_object.pop();
  433|   103k|                            self.recognize_next(token, context,results, errors)
  434|       |                        }
  435|       |                    }
  436|       |                },
  437|       |                #[cfg(feature = "rdf-star")]
  438|       |                TriGState::AnnotationEnd => {
  439|      0|                    self.cur_subject.pop();
  440|      0|                    self.stack.push(TriGState::ObjectsListAfterAnnotation);
  441|      0|                    if token == N3Token::Punctuation("|}") {
  442|      0|                        self
  443|       |                    } else {
  444|      0|                        self.error(errors, "Annotations should end with '|}'")
  445|       |                    }
  446|       |                },
  447|       |                #[cfg(feature = "rdf-star")]
  448|      0|                TriGState::ObjectsListAfterAnnotation => if token == N3Token::Punctuation(",") {
  449|      0|                    self.stack.push(TriGState::ObjectsListEnd);
  450|      0|                    self.stack.push(TriGState::Object);
  451|      0|                    self
  452|       |                } else {
  453|      0|                    self.recognize_next(token, context,results, errors)
  454|       |                },
  455|       |                // [9] 	verb 	::= 	predicate | 'a'
  456|       |                // [11] 	predicate 	::= 	iri
  457|   118k|                TriGState::Verb => match token {
  458|  5.26k|                    N3Token::PlainKeyword("a") => {
  459|  2.45k|                        self.cur_predicate.push(rdf::TYPE.into());
  460|  2.45k|                        self
  461|       |                    }
  462|   109k|                    N3Token::IriRef(iri) => {
  463|   109k|                        self.cur_predicate.push(NamedNode::new_unchecked(iri));
  464|   109k|                        self
  465|       |                    }
  466|    239|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  467|      0|                        Ok(t) => {
  468|      0|                            self.cur_predicate.push(t);
  469|      0|                            self
  470|       |                        },
  471|    239|                        Err(e) => self.error(errors, e)
  472|       |                    }
  473|       |                   _ => {
  474|  5.77k|                        self.error(errors, "TOKEN is not a valid predicate")
  475|       |                    }
  476|       |                }
  477|       |                // [12] 	object 	::= 	iri | BlankNode | collection | blankNodePropertyList | literal | quotedTriple
  478|       |                // [13] 	literal 	::= 	RDFLiteral | NumericLiteral | BooleanLiteral
  479|       |                // [14] 	blank 	::= 	BlankNode | collection
  480|       |                // [15] 	blankNodePropertyList 	::= 	'[' predicateObjectList ']'
  481|       |                // [16] 	collection 	::= 	'(' object* ')'
  482|       |                // [17] 	NumericLiteral 	::= 	INTEGER | DECIMAL | DOUBLE
  483|       |                // [128s] 	RDFLiteral 	::= 	String (LANGTAG | '^^' iri)?
  484|       |                // [133s] 	BooleanLiteral 	::= 	'true' | 'false'
  485|       |                // [18] 	String 	::= 	STRING_LITERAL_QUOTE | STRING_LITERAL_SINGLE_QUOTE | STRING_LITERAL_LONG_SINGLE_QUOTE | STRING_LITERAL_LONG_QUOTE
  486|       |                // [135s] 	iri 	::= 	IRIREF | PrefixedName
  487|       |                // [136s] 	PrefixedName 	::= 	PNAME_LN | PNAME_NS
  488|       |                // [137s] 	BlankNode 	::= 	BLANK_NODE_LABEL | ANON
  489|    818|                TriGState::Object => match token {
  490|  12.1k|                    N3Token::IriRef(iri) => {
  491|  12.1k|                        self.cur_object.push(NamedNode::new_unchecked(iri).into());
  492|  12.1k|                        self.emit_quad(results);
  493|  12.1k|                        self
  494|       |                    }
  495|    379|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  496|      0|                        Ok(t) => {
  497|      0|                            self.cur_object.push(t.into());
  498|      0|                            self.emit_quad(results);
  499|      0|                            self
  500|       |                        },
  501|    379|                        Err(e) => self.error(errors, e)
  502|       |                    }
  503|  43.3k|                    N3Token::BlankNodeLabel(label) => {
  504|  43.3k|                        self.cur_object.push(BlankNode::new_unchecked(label).into());
  505|  43.3k|                        self.emit_quad(results);
  506|  43.3k|                        self
  507|       |                    }
  508|   107k|                    N3Token::Punctuation("[") => {
  509|  1.55k|                        self.stack.push(TriGState::ObjectBlankNodePropertyListCurrent);
  510|  1.55k|                        self
  511|       |                    }
  512|   106k|                    N3Token::Punctuation("(") => {
  513|   102k|                        self.stack.push(TriGState::ObjectCollectionBeginning);
  514|   102k|                        self
  515|       |                    }
  516|  16.0k|                    N3Token::String(value) => {
  517|  16.0k|                        self.stack.push(TriGState::LiteralPossibleSuffix { value, emit: true });
  518|  16.0k|                        self
  519|       |                    }
  520|  50.3k|                    N3Token::Integer(v) => {
  521|  50.3k|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::INTEGER).into());
  522|  50.3k|                        self.emit_quad(results);
  523|  50.3k|                        self
  524|       |                    }
  525|  7.94k|                    N3Token::Decimal(v) => {
  526|  7.94k|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
  527|  7.94k|                        self.emit_quad(results);
  528|  7.94k|                        self
  529|       |                    }
  530|  19.1k|                    N3Token::Double(v) => {
  531|  19.1k|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
  532|  19.1k|                        self.emit_quad(results);
  533|  19.1k|                        self
  534|       |                    }
  535|  2.74k|                    N3Token::PlainKeyword("true") => {
  536|    224|                        self.cur_object.push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
  537|    224|                        self.emit_quad(results);
  538|    224|                        self
  539|       |                    }
  540|  2.51k|                    N3Token::PlainKeyword("false") => {
  541|    180|                        self.cur_object.push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
  542|    180|                        self.emit_quad(results);
  543|    180|                        self
  544|       |                    }
  545|       |                    #[cfg(feature = "rdf-star")]
  546|  4.15k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  547|    818|                        self.stack.push(TriGState::ObjectQuotedTripleEnd { emit: true });
  548|    818|                        self.stack.push(TriGState::QuotedObject);
  549|    818|                        self.stack.push(TriGState::Verb);
  550|    818|                        self.stack.push(TriGState::QuotedSubject);
  551|    818|                        self
  552|       |                    }
  553|       |                   _ => {
  554|  5.86k|                        self.error(errors, "TOKEN is not a valid RDF object")
  555|       |                    }
  556|       |
  557|       |                }
  558|  1.31k|                TriGState::ObjectBlankNodePropertyListCurrent => if token == N3Token::Punctuation("]") {
  559|    267|                    self.cur_object.push(BlankNode::default().into());
  560|    267|                    self.emit_quad(results);
  561|    267|                    self
  562|       |                } else {
  563|  1.04k|                    self.cur_subject.push(BlankNode::default().into());
  564|  1.04k|                    self.stack.push(TriGState::ObjectBlankNodePropertyListEnd);
  565|  1.04k|                    self.stack.push(TriGState::PredicateObjectList);
  566|  1.04k|                    self.recognize_next(token, context,results, errors)
  567|       |                }
  568|    201|                TriGState::ObjectBlankNodePropertyListEnd => if token == N3Token::Punctuation("]") {
  569|     46|                    self.cur_object.push(self.cur_subject.pop().unwrap().into());
  570|     46|                    self.emit_quad(results);
  571|     46|                    self
  572|       |                } else {
  573|    155|                    self.error(errors, "blank node property lists should end with a ']'")
  574|       |                }
  575|   100k|                TriGState::ObjectCollectionBeginning => if let  N3Token::Punctuation(")") = token {
  576|  1.21k|                    self.cur_object.push(rdf::NIL.into());
  577|  1.21k|                    self.emit_quad(results);
  578|  1.21k|                    self
  579|       |                } else {
  580|  99.1k|                    let root = BlankNode::default();
  581|  99.1k|                    self.cur_object.push(root.clone().into());
  582|  99.1k|                    self.emit_quad(results);
  583|  99.1k|                    self.cur_subject.push(root.into());
  584|  99.1k|                    self.cur_predicate.push(rdf::FIRST.into());
  585|  99.1k|                    self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  586|  99.1k|                    self.stack.push(TriGState::Object);
  587|  99.1k|                    self.recognize_next(token, context,results, errors)
  588|       |                },
  589|       |                TriGState::ObjectCollectionPossibleEnd => {
  590|  33.5k|                    let old = self.cur_subject.pop().unwrap();
  591|  33.5k|                    self.cur_object.pop();
  592|  33.5k|                    if let N3Token::Punctuation(")") = token {
  593|  12.0k|                        self.cur_predicate.pop();
  594|  12.0k|                        results.push(Quad::new(old,
  595|  12.0k|                                               rdf::REST,
  596|  12.0k|                                               rdf::NIL,
  597|  12.0k|                                               self.cur_graph.clone()
  598|  12.0k|                        ));
  599|  12.0k|                        self
  600|       |                    }else {
  601|  21.5k|                        let new = BlankNode::default();
  602|  21.5k|                        results.push(Quad::new(old,
  603|  21.5k|                                               rdf::REST,
  604|  21.5k|                                               new.clone(),
  605|  21.5k|                                               self.cur_graph.clone()
  606|  21.5k|                        ));
  607|  21.5k|                        self.cur_subject.push(new.into());
  608|  21.5k|                        self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  609|  21.5k|                        self.stack.push(TriGState::Object);
  610|  21.5k|                        self.recognize_next(token, context,results, errors)
  611|       |                    }
  612|       |                }
  613|  15.3k|                TriGState::LiteralPossibleSuffix { value, emit } => {
  614|  15.3k|                    match token {
  615|  1.76k|                        N3Token::LangTag(lang) => {
  616|  1.76k|                            self.cur_object.push(Literal::new_language_tagged_literal_unchecked(value, lang.to_ascii_lowercase()).into());
  617|  1.76k|                            if emit {
  618|  1.76k|                                self.emit_quad(results);
  619|  1.76k|                            }
  620|  1.76k|                            self
  621|       |                        },
  622|  7.19k|                        N3Token::Punctuation("^^") => {
  623|     21|                            self.stack.push(TriGState::LiteralExpectDatatype { value, emit });
  624|     21|                            self
  625|       |                        }
  626|       |                        _ => {
  627|  13.5k|                            self.cur_object.push(Literal::new_simple_literal(value).into());
  628|  13.5k|                            if emit {
  629|  13.5k|                                self.emit_quad(results);
  630|  13.5k|                            }
  631|  13.5k|                            self.recognize_next(token, context,results, errors)
  632|       |                        }
  633|       |                    }
  634|       |                }
  635|      9|                TriGState::LiteralExpectDatatype { value, emit } => {
  636|      9|                    match token {
  637|      0|                        N3Token::IriRef(datatype) => {
  638|      0|                            self.cur_object.push(Literal::new_typed_literal(value, NamedNode::new_unchecked(datatype)).into());
  639|      0|                            if emit {
  640|      0|                                self.emit_quad(results);
  641|      0|                            }
  642|      0|                            self
  643|       |                        },
  644|      0|                        N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  645|      0|                            Ok(t) => {
  646|      0|                                self.cur_object.push(Literal::new_typed_literal(value, t).into());
  647|      0|                                if emit {
  648|      0|                                    self.emit_quad(results);
  649|      0|                                }
  650|      0|                                self
  651|       |                            },
  652|      0|                            Err(e) => self.error(errors, e)
  653|       |                        }
  654|       |                        _ => {
  655|      9|                            self.error(errors, "Expecting a datatype IRI after ^^, found TOKEN").recognize_next(token, context, results, errors)
  656|       |                        }
  657|       |                    }
  658|       |                }
  659|       |                // [27t] 	quotedTriple 	::= 	'<<' qtSubject verb qtObject '>>'
  660|       |                #[cfg(feature = "rdf-star")]
  661|       |                TriGState::SubjectQuotedTripleEnd => {
  662|    554|                    let triple = Triple::new(
  663|    554|                        self.cur_subject.pop().unwrap(),
  664|    554|                        self.cur_predicate.pop().unwrap(),
  665|    554|                        self.cur_object.pop().unwrap()
  666|    554|                    );
  667|    554|                    self.cur_subject.push(triple.into());
  668|    554|                    if token == N3Token::Punctuation(">>") {
  669|      0|                        self
  670|       |                    } else {
  671|    554|                        self.error(errors, "Expecting '>>' to close a quoted triple, found TOKEN")
  672|       |                    }
  673|       |                }
  674|       |                #[cfg(feature = "rdf-star")]
  675|     12|                TriGState::ObjectQuotedTripleEnd { emit } => {
  676|     12|                    let triple = Triple::new(
  677|     12|                        self.cur_subject.pop().unwrap(),
  678|     12|                        self.cur_predicate.pop().unwrap(),
  679|     12|                        self.cur_object.pop().unwrap()
  680|     12|                    );
  681|     12|                    self.cur_object.push(triple.into());
  682|     12|                    if emit {
  683|      3|                        self.emit_quad(results);
  684|      9|                    }
  685|     12|                    if token == N3Token::Punctuation(">>") {
  686|      0|                        self
  687|       |                    } else {
  688|     12|                        self.error(errors, "Expecting '>>' to close a quoted triple, found TOKEN")
  689|       |                    }
  690|       |                }
  691|       |                // [28t] 	qtSubject 	::= 	iri | BlankNode | quotedTriple
  692|       |                #[cfg(feature = "rdf-star")]
  693|  13.9k|                TriGState::QuotedSubject => match token {
  694|  12.6k|                    N3Token::Punctuation("[") => {
  695|    172|                        self.cur_subject.push(BlankNode::default().into());
  696|    172|                        self.stack.push(TriGState::QuotedAnonEnd);
  697|    172|                        self
  698|       |                    }
  699|    939|                    N3Token::IriRef(iri) => {
  700|    939|                        self.cur_subject.push(NamedNode::new_unchecked(iri).into());
  701|    939|                        self
  702|       |                    }
  703|     97|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  704|      0|                        Ok(t) => {
  705|      0|                            self.cur_subject.push(t.into());
  706|      0|                            self
  707|       |                        },
  708|     97|                        Err(e) => self.error(errors, e)
  709|       |                    }
  710|     43|                    N3Token::BlankNodeLabel(label) => {
  711|     43|                        self.cur_subject.push(BlankNode::new_unchecked(label).into());
  712|     43|                        self
  713|       |                    }
  714|  12.4k|                    N3Token::Punctuation("<<") => {
  715|  11.7k|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  716|  11.7k|                        self.stack.push(TriGState::QuotedObject);
  717|  11.7k|                        self.stack.push(TriGState::Verb);
  718|  11.7k|                        self.stack.push(TriGState::QuotedSubject);
  719|  11.7k|                        self
  720|       |                    }
  721|    875|                    _ => self.error(errors, "TOKEN is not a valid RDF quoted triple subject: TOKEN")
  722|       |                }
  723|       |                // [29t] 	qtObject 	::= 	iri | BlankNode | literal | quotedTriple
  724|       |                #[cfg(feature = "rdf-star")]
  725|    911|                TriGState::QuotedObject => match token {
  726|    147|                    N3Token::Punctuation("[") => {
  727|    108|                        self.cur_object.push(BlankNode::default().into());
  728|    108|                        self.stack.push(TriGState::QuotedAnonEnd);
  729|    108|                        self
  730|       |                    }
  731|    105|                    N3Token::IriRef(iri) => {
  732|    105|                        self.cur_object.push(NamedNode::new_unchecked(iri).into());
  733|    105|                        self
  734|       |                    }
  735|     24|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  736|      0|                        Ok(t) => {
  737|      0|                            self.cur_object.push(t.into());
  738|      0|                            self
  739|       |                        },
  740|     24|                        Err(e) => self.error(errors, e)
  741|       |                    }
  742|     12|                    N3Token::BlankNodeLabel(label) => {
  743|     12|                        self.cur_object.push(BlankNode::new_unchecked(label).into());
  744|     12|                        self
  745|       |                    }
  746|      0|                    N3Token::String(value) => {
  747|      0|                        self.stack.push(TriGState::LiteralPossibleSuffix { value, emit: false });
  748|      0|                        self
  749|       |                    }
  750|    135|                    N3Token::Integer(v) => {
  751|    135|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::INTEGER).into());
  752|    135|                        self
  753|       |                    }
  754|     37|                    N3Token::Decimal(v) => {
  755|     37|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
  756|     37|                        self
  757|       |                    }
  758|    421|                    N3Token::Double(v) => {
  759|    421|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
  760|    421|                        self
  761|       |                    }
  762|     26|                    N3Token::PlainKeyword("true") => {
  763|      0|                        self.cur_object.push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
  764|      0|                        self
  765|       |                    }
  766|     26|                    N3Token::PlainKeyword("false") => {
  767|      0|                        self.cur_object.push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
  768|      0|                        self
  769|       |                    }
  770|     39|                    N3Token::Punctuation("<<") => {
  771|     17|                        self.stack.push(TriGState::ObjectQuotedTripleEnd { emit: false });
  772|     17|                        self.stack.push(TriGState::QuotedObject);
  773|     17|                        self.stack.push(TriGState::Verb);
  774|     17|                        self.stack.push(TriGState::QuotedSubject);
  775|     17|                        self
  776|       |                    }
  777|     52|                    _ => self.error(errors, "TOKEN is not a valid RDF quoted triple object")
  778|       |                }
  779|       |                #[cfg(feature = "rdf-star")]
  780|    233|                TriGState::QuotedAnonEnd => if token == N3Token::Punctuation("]") {
  781|     78|                    self
  782|       |                } else {
  783|    155|                    self.error(errors, "Anonymous blank node with a property list are not allowed in quoted triples")
  784|       |                }
  785|       |            }
  786|   740k|        } else if token == N3Token::Punctuation(".") || token == N3Token::Punctuation("}") {
  787|       |            //TODO: be smarter depending if we are in '{' or not
  788|   154k|            self.stack.push(TriGState::TriGDoc);
  789|   154k|            self
  790|       |        } else {
  791|   585k|            self
  792|       |        }
  793|  2.43M|    }
_RNvXNtCs70uHazZwt5R_5oxttl5terseNtB2_14TriGRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer13recognize_end:
  795|  18.6k|    fn recognize_end(
  796|  18.6k|        mut self,
  797|  18.6k|        _context: &mut TriGRecognizerContext,
  798|  18.6k|        results: &mut Vec<Self::Output>,
  799|  18.6k|        errors: &mut Vec<RuleRecognizerError>,
  800|  18.6k|    ) {
  801|  18.6k|        match &*self.stack {
  802|  18.6k|            [] | [TriGState::TriGDoc] => {
  803|       |                debug_assert!(
  804|      0|                    self.cur_subject.is_empty(),
  805|      0|                    "The cur_subject stack must be empty if the state stack is empty"
  806|       |                );
  807|       |                debug_assert!(
  808|      0|                    self.cur_predicate.is_empty(),
  809|      0|                    "The cur_predicate stack must be empty if the state stack is empty"
  810|       |                );
  811|       |                debug_assert!(
  812|      0|                    self.cur_object.is_empty(),
  813|      0|                    "The cur_object stack must be empty if the state stack is empty"
  814|       |                );
  815|       |            }
  816|    215|            [.., TriGState::LiteralPossibleSuffix { value, emit: true }] => {
  817|    215|                self.cur_object
  818|    215|                    .push(Literal::new_simple_literal(value).into());
  819|    215|                self.emit_quad(results);
  820|    215|                errors.push("Triples should be followed by a dot".into())
  821|       |            }
  822|    609|            _ => errors.push("Unexpected end".into()), //TODO
  823|       |        }
  824|  18.6k|    }
_RNvXNtCs70uHazZwt5R_5oxttl5terseNtB2_14TriGRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer13lexer_options:
  826|  3.73M|    fn lexer_options(context: &TriGRecognizerContext) -> &N3LexerOptions {
  827|  3.73M|        &context.lexer_options
  828|  3.73M|    }
_RNvMs_NtCs70uHazZwt5R_5oxttl5terseNtB4_14TriGRecognizer10new_parser:
  832|  18.6k|    pub fn new_parser(
  833|  18.6k|        with_graph_name: bool,
  834|  18.6k|        #[cfg(feature = "rdf-star")] with_quoted_triples: bool,
  835|  18.6k|        unchecked: bool,
  836|  18.6k|        base_iri: Option<Iri<String>>,
  837|  18.6k|        prefixes: HashMap<String, Iri<String>>,
  838|  18.6k|    ) -> Parser<Self> {
  839|  18.6k|        Parser::new(
  840|  18.6k|            Lexer::new(
  841|  18.6k|                N3Lexer::new(N3LexerMode::Turtle, unchecked),
  842|  18.6k|                MIN_BUFFER_SIZE,
  843|  18.6k|                MAX_BUFFER_SIZE,
  844|  18.6k|                true,
  845|  18.6k|                Some(b"#"),
  846|  18.6k|            ),
  847|  18.6k|            TriGRecognizer {
  848|  18.6k|                stack: vec![TriGState::TriGDoc],
  849|  18.6k|                cur_subject: Vec::new(),
  850|  18.6k|                cur_predicate: Vec::new(),
  851|  18.6k|                cur_object: Vec::new(),
  852|  18.6k|                cur_graph: GraphName::DefaultGraph,
  853|  18.6k|            },
  854|  18.6k|            TriGRecognizerContext {
  855|  18.6k|                with_graph_name,
  856|  18.6k|                #[cfg(feature = "rdf-star")]
  857|  18.6k|                with_quoted_triples,
  858|  18.6k|                prefixes,
  859|  18.6k|                lexer_options: N3LexerOptions { base_iri },
  860|  18.6k|            },
  861|  18.6k|        )
  862|  18.6k|    }
_RNvMs_NtCs70uHazZwt5R_5oxttl5terseNtB4_14TriGRecognizer9emit_quad:
  879|   249k|    fn emit_quad(&mut self, results: &mut Vec<Quad>) {
  880|   249k|        results.push(Quad::new(
  881|   249k|            self.cur_subject.last().unwrap().clone(),
  882|   249k|            self.cur_predicate.last().unwrap().clone(),
  883|   249k|            self.cur_object.last().unwrap().clone(),
  884|   249k|            self.cur_graph.clone(),
  885|   249k|        ));
  886|   249k|    }
_RINvMs_NtCs70uHazZwt5R_5oxttl5terseNtB5_14TriGRecognizer5errorNtNtCsgcnyUjfByoh_5alloc6string6StringEB7_:
  865|  14.7k|    fn error(
  866|  14.7k|        mut self,
  867|  14.7k|        errors: &mut Vec<RuleRecognizerError>,
  868|  14.7k|        msg: impl Into<RuleRecognizerError>,
  869|  14.7k|    ) -> Self {
  870|  14.7k|        errors.push(msg.into());
  871|  14.7k|        self.stack.clear();
  872|  14.7k|        self.cur_subject.clear();
  873|  14.7k|        self.cur_predicate.clear();
  874|  14.7k|        self.cur_object.clear();
  875|  14.7k|        self.cur_graph = GraphName::DefaultGraph;
  876|  14.7k|        self
  877|  14.7k|    }
_RINvMs_NtCs70uHazZwt5R_5oxttl5terseNtB5_14TriGRecognizer5errorReEB7_:
  865|   101k|    fn error(
  866|   101k|        mut self,
  867|   101k|        errors: &mut Vec<RuleRecognizerError>,
  868|   101k|        msg: impl Into<RuleRecognizerError>,
  869|   101k|    ) -> Self {
  870|   101k|        errors.push(msg.into());
  871|   101k|        self.stack.clear();
  872|   101k|        self.cur_subject.clear();
  873|   101k|        self.cur_predicate.clear();
  874|   101k|        self.cur_object.clear();
  875|   101k|        self.cur_graph = GraphName::DefaultGraph;
  876|   101k|        self
  877|   101k|    }

_RNvXs_NtNtCs70uHazZwt5R_5oxttl7toolkit5errorNtB4_11SyntaxErrorNtNtCsd3ZSx5keFHB_4core3fmt7Display3fmtCsa1xq2UewJGb_4trig:
   38|  1.22M|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   39|  1.22M|        if self.location.start.offset + 1 >= self.location.end.offset {
   40|  1.03M|            write!(
   41|  1.03M|                f,
   42|  1.03M|                "Parser error at line {} column {}: {}",
   43|  1.03M|                self.location.start.line + 1,
   44|  1.03M|                self.location.start.column + 1,
   45|  1.03M|                self.message
   46|  1.03M|            )
   47|   184k|        } else if self.location.start.line == self.location.end.line {
   48|   183k|            write!(
   49|   183k|                f,
   50|   183k|                "Parser error between at line {} between columns {} and column {}: {}",
   51|   183k|                self.location.start.line + 1,
   52|   183k|                self.location.start.column + 1,
   53|   183k|                self.location.end.column + 1,
   54|   183k|                self.message
   55|   183k|            )
   56|       |        } else {
   57|  1.18k|            write!(
   58|  1.18k|                f,
   59|  1.18k|                "Parser error between line {} column {} and line {} column {}: {}",
   60|  1.18k|                self.location.start.line + 1,
   61|  1.18k|                self.location.start.column + 1,
   62|  1.18k|                self.location.end.line + 1,
   63|  1.18k|                self.location.end.column + 1,
   64|  1.18k|                self.message
   65|  1.18k|            )
   66|       |        }
   67|  1.22M|    }

_RINvMs1_NtNtCs70uHazZwt5R_5oxttl7toolkit5lexerINtB6_5LexerNtNtBa_5lexer7N3LexerE16extend_from_readRShECsa1xq2UewJGb_4trig:
  113|  12.2k|    pub fn extend_from_read(&mut self, read: &mut impl Read) -> io::Result<()> {
  114|  12.2k|        self.shrink_data();
  115|  12.2k|        if self.data.len() == self.max_buffer_size {
  116|      0|            return Err(io::Error::new(
  117|      0|                io::ErrorKind::OutOfMemory,
  118|      0|                format!(
  119|      0|                    "Reached the buffer maximal size of {}",
  120|      0|                    self.max_buffer_size
  121|      0|                ),
  122|      0|            ));
  123|  12.2k|        }
  124|  12.2k|        let min_end = min(self.data.len() + self.min_buffer_size, self.max_buffer_size);
  125|  12.2k|        let new_start = self.data.len();
  126|  12.2k|        self.data.resize(min_end, 0);
  127|  12.2k|        if self.data.len() < self.data.capacity() {
  128|  1.36k|            // We keep extending to have as much space as available without reallocation
  129|  1.36k|            self.data.resize(self.data.capacity(), 0);
  130|  10.8k|        }
  131|  12.2k|        let read = read.read(&mut self.data[new_start..])?;
  132|  12.2k|        self.data.truncate(new_start + read);
  133|  12.2k|        self.is_ending = read == 0;
  134|  12.2k|        Ok(())
  135|  12.2k|    }
_RNvXNtNtCs70uHazZwt5R_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCsd3ZSx5keFHB_4core7convert4FromTINtNtNtB1a_3ops5range5RangejENtNtCsgcnyUjfByoh_5alloc6string6StringEE4fromB6_:
   31|   728k|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|   728k|        Self {
   33|   728k|            location,
   34|   728k|            message: message.into(),
   35|   728k|        }
   36|   728k|    }
_RNvXNtNtCs70uHazZwt5R_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCsd3ZSx5keFHB_4core7convert4FromTINtNtNtB1a_3ops5range5RangejEReEE4fromB6_:
   31|   358k|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|   358k|        Self {
   33|   358k|            location,
   34|   358k|            message: message.into(),
   35|   358k|        }
   36|   358k|    }
_RNvXs_NtNtCs70uHazZwt5R_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCsd3ZSx5keFHB_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejENtNtCsgcnyUjfByoh_5alloc6string6StringEE4fromB8_:
   41|  2.61k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  2.61k|        (*location.start()..*location.end() + 1, message).into()
   43|  2.61k|    }
_RNvXs_NtNtCs70uHazZwt5R_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCsd3ZSx5keFHB_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejEReEE4fromB8_:
   41|   308k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|   308k|        (*location.start()..*location.end() + 1, message).into()
   43|   308k|    }
_RNvXs0_NtNtCs70uHazZwt5R_5oxttl7toolkit5lexerNtB5_20TokenRecognizerErrorINtNtCsd3ZSx5keFHB_4core7convert4FromTjNtNtCsgcnyUjfByoh_5alloc6string6StringEE4fromB9_:
   47|  1.90k|    fn from((location, message): (usize, S)) -> Self {
   48|  1.90k|        (location..=location, message).into()
   49|  1.90k|    }
_RNvMs1_NtNtCs70uHazZwt5R_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3newB9_:
   73|  18.6k|    pub fn new(
   74|  18.6k|        parser: R,
   75|  18.6k|        min_buffer_size: usize,
   76|  18.6k|        max_buffer_size: usize,
   77|  18.6k|        is_line_jump_whitespace: bool,
   78|  18.6k|        line_comment_start: Option<&'static [u8]>,
   79|  18.6k|    ) -> Self {
   80|  18.6k|        Self {
   81|  18.6k|            parser,
   82|  18.6k|            data: Vec::new(),
   83|  18.6k|            position: Position {
   84|  18.6k|                line_start_buffer_offset: 0,
   85|  18.6k|                buffer_offset: 0,
   86|  18.6k|                global_offset: 0,
   87|  18.6k|                global_line: 0,
   88|  18.6k|            },
   89|  18.6k|            previous_position: Position {
   90|  18.6k|                line_start_buffer_offset: 0,
   91|  18.6k|                buffer_offset: 0,
   92|  18.6k|                global_offset: 0,
   93|  18.6k|                global_line: 0,
   94|  18.6k|            },
   95|  18.6k|            is_ending: false,
   96|  18.6k|            min_buffer_size,
   97|  18.6k|            max_buffer_size,
   98|  18.6k|            is_line_jump_whitespace,
   99|  18.6k|            line_comment_start,
  100|  18.6k|        }
  101|  18.6k|    }
_RNvMs1_NtNtCs70uHazZwt5R_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17extend_from_sliceB9_:
  103|  1.12M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  104|  1.12M|        self.shrink_data();
  105|  1.12M|        self.data.extend_from_slice(other);
  106|  1.12M|    }
_RNvMs1_NtNtCs70uHazZwt5R_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3endB9_:
  109|  14.0k|    pub fn end(&mut self) {
  110|  14.0k|        self.is_ending = true;
  111|  14.0k|    }
_RNvMs1_NtNtCs70uHazZwt5R_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE9read_nextB9_:
  166|  3.73M|    pub fn read_next(&mut self, options: &R::Options) -> Option<Result<R::Token<'_>, SyntaxError>> {
  167|  3.73M|        self.skip_whitespaces_and_comments()?;
  168|  3.72M|        self.previous_position = self.position;
  169|  3.72M|        let Some((consumed, result)) = self.parser.recognize_next_token(
  170|  3.72M|            &self.data[self.position.buffer_offset..],
  171|  3.72M|            self.is_ending,
  172|  3.72M|            options,
  173|  3.72M|        ) else {
  174|  1.15M|            return if self.is_ending {
  175|  40.7k|                if self.position.buffer_offset == self.data.len() {
  176|  37.3k|                    None // We have finished
  177|       |                } else {
  178|  3.34k|                    let (new_line_jumps, new_line_start) =
  179|  3.34k|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  180|  3.34k|                            &self.data[self.position.buffer_offset..],
  181|  3.34k|                        );
  182|  3.34k|                    if new_line_jumps > 0 {
  183|    414|                        self.position.line_start_buffer_offset =
  184|    414|                            self.position.buffer_offset + new_line_start;
  185|  2.92k|                    }
  186|  3.34k|                    self.position.global_offset +=
  187|  3.34k|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  188|  3.34k|                    self.position.buffer_offset = self.data.len();
  189|  3.34k|                    self.position.global_line += new_line_jumps;
  190|  3.34k|                    let new_position = TextPosition {
  191|  3.34k|                        line: self.position.global_line,
  192|  3.34k|                        column: Self::column_from_bytes(
  193|  3.34k|                            &self.data[self.position.line_start_buffer_offset..],
  194|  3.34k|                        ),
  195|  3.34k|                        offset: self.position.global_offset,
  196|  3.34k|                    };
  197|  3.34k|                    let error = SyntaxError {
  198|  3.34k|                        location: new_position..new_position,
  199|  3.34k|                        message: "Unexpected end of file".into(),
  200|  3.34k|                    };
  201|  3.34k|                    self.position.buffer_offset = self.data.len(); // We consume everything
  202|  3.34k|                    Some(Err(error))
  203|       |                }
  204|       |            } else {
  205|  1.11M|                None
  206|       |            };
  207|       |        };
  208|       |        debug_assert!(
  209|      0|            consumed > 0,
  210|      0|            "The lexer must consume at least one byte each time"
  211|       |        );
  212|       |        debug_assert!(
  213|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  214|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  215|      0|            self.data.len() - self.position.buffer_offset
  216|       |        );
  217|  2.56M|        let (new_line_jumps, new_line_start) =
  218|  2.56M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  219|  2.56M|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  220|  2.56M|            );
  221|  2.56M|        if new_line_jumps > 0 {
  222|  2.28k|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  223|  2.56M|        }
  224|  2.56M|        self.position.buffer_offset += consumed;
  225|  2.56M|        self.position.global_offset += u64::try_from(consumed).unwrap();
  226|  2.56M|        self.position.global_line += new_line_jumps;
  227|  2.56M|        Some(result.map_err(|e| SyntaxError {
  228|       |            location: self.location_from_buffer_offset_range(e.location),
  229|       |            message: e.message,
  230|  2.56M|        }))
  231|  3.73M|    }
_RNCNvMs1_NtNtCs70uHazZwt5R_5oxttl7toolkit5lexerINtB7_5LexerNtNtBb_5lexer7N3LexerE9read_next0Bb_:
  227|  1.07M|        Some(result.map_err(|e| SyntaxError {
  228|  1.07M|            location: self.location_from_buffer_offset_range(e.location),
  229|  1.07M|            message: e.message,
  230|  1.07M|        }))
_RNvMs1_NtNtCs70uHazZwt5R_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE33location_from_buffer_offset_rangeB9_:
  233|  1.07M|    pub fn location_from_buffer_offset_range(
  234|  1.07M|        &self,
  235|  1.07M|        offset_range: Range<usize>,
  236|  1.07M|    ) -> Range<TextPosition> {
  237|  1.07M|        let start_offset = self.previous_position.buffer_offset + offset_range.start;
  238|  1.07M|        let (start_extra_line_jumps, start_line_start) =
  239|  1.07M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  240|  1.07M|                &self.data[self.previous_position.buffer_offset..start_offset],
  241|  1.07M|            );
  242|  1.07M|        let start_line_start = if start_extra_line_jumps > 0 {
  243|    380|            start_line_start + self.previous_position.buffer_offset
  244|       |        } else {
  245|  1.07M|            self.previous_position.line_start_buffer_offset
  246|       |        };
  247|  1.07M|        let end_offset = self.previous_position.buffer_offset + offset_range.end;
  248|  1.07M|        let (end_extra_line_jumps, end_line_start) =
  249|  1.07M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  250|  1.07M|                &self.data[self.previous_position.buffer_offset..end_offset],
  251|  1.07M|            );
  252|  1.07M|        let end_line_start = if end_extra_line_jumps > 0 {
  253|  1.57k|            end_line_start + self.previous_position.buffer_offset
  254|       |        } else {
  255|  1.07M|            self.previous_position.line_start_buffer_offset
  256|       |        };
  257|  1.07M|        TextPosition {
  258|  1.07M|            line: self.previous_position.global_line + start_extra_line_jumps,
  259|  1.07M|            column: Self::column_from_bytes(&self.data[start_line_start..start_offset]),
  260|  1.07M|            offset: self.previous_position.global_offset
  261|  1.07M|                + u64::try_from(offset_range.start).unwrap(),
  262|  1.07M|        }..TextPosition {
  263|  1.07M|            line: self.previous_position.global_line + end_extra_line_jumps,
  264|  1.07M|            column: Self::column_from_bytes(&self.data[end_line_start..end_offset]),
  265|  1.07M|            offset: self.previous_position.global_offset + u64::try_from(offset_range.end).unwrap(),
  266|  1.07M|        }
  267|  1.07M|    }
_RNvMs1_NtNtCs70uHazZwt5R_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE19last_token_locationB9_:
  269|   143k|    pub fn last_token_location(&self) -> Range<TextPosition> {
  270|   143k|        TextPosition {
  271|   143k|            line: self.previous_position.global_line,
  272|   143k|            column: Self::column_from_bytes(
  273|   143k|                &self.data[self.previous_position.line_start_buffer_offset
  274|   143k|                    ..self.previous_position.buffer_offset],
  275|   143k|            ),
  276|   143k|            offset: self.previous_position.global_offset,
  277|   143k|        }..TextPosition {
  278|   143k|            line: self.position.global_line,
  279|   143k|            column: Self::column_from_bytes(
  280|   143k|                &self.data[self.position.line_start_buffer_offset..self.position.buffer_offset],
  281|   143k|            ),
  282|   143k|            offset: self.position.global_offset,
  283|   143k|        }
  284|   143k|    }
_RNvMs1_NtNtCs70uHazZwt5R_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17last_token_sourceB9_:
  286|   143k|    pub fn last_token_source(&self) -> Cow<'_, str> {
  287|   143k|        String::from_utf8_lossy(
  288|   143k|            &self.data[self.previous_position.buffer_offset..self.position.buffer_offset],
  289|   143k|        )
  290|   143k|    }
_RNvMs1_NtNtCs70uHazZwt5R_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE6is_endB9_:
  292|  1.16M|    pub fn is_end(&self) -> bool {
  293|  1.16M|        self.is_ending && self.data.len() == self.position.buffer_offset
  294|  1.16M|    }
_RNvMs1_NtNtCs70uHazZwt5R_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  297|  3.73M|    fn skip_whitespaces_and_comments(&mut self) -> Option<()> {
  298|       |        loop {
  299|  3.73M|            self.skip_whitespaces()?;
  300|       |
  301|  3.73M|            let buf = &self.data[self.position.buffer_offset..];
  302|  3.73M|            if let Some(line_comment_start) = self.line_comment_start {
  303|  3.73M|                if buf.starts_with(line_comment_start) {
  304|       |                    // Comment
  305|  9.06k|                    if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  306|  1.99k|                        let mut end_position = line_comment_start.len() + end;
  307|  1.99k|                        if buf.get(end_position).copied() == Some(b'\r') {
  308|       |                            // We look for \n for Windows line end style
  309|  1.34k|                            if let Some(c) = buf.get(end_position + 1) {
  310|    500|                                if *c == b'\n' {
  311|      0|                                    end_position += 1;
  312|    500|                                }
  313|    846|                            } else if !self.is_ending {
  314|    834|                                return None; // We need to read more
  315|     12|                            }
  316|    648|                        }
  317|  1.16k|                        let comment_size = end_position + 1;
  318|  1.16k|                        self.position.buffer_offset += comment_size;
  319|  1.16k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  320|  1.16k|                        self.position.global_offset += u64::try_from(comment_size).unwrap();
  321|  1.16k|                        self.position.global_line += 1;
  322|  1.16k|                        continue;
  323|  7.06k|                    }
  324|  7.06k|                    if self.is_ending {
  325|    440|                        self.position.buffer_offset = self.data.len(); // EOF
  326|    440|                        return Some(());
  327|  6.62k|                    }
  328|  6.62k|                    return None; // We need more data
  329|  3.72M|                }
  330|      0|            }
  331|  3.72M|            return Some(());
  332|       |        }
  333|  3.73M|    }
_RNvMs1_NtNtCs70uHazZwt5R_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  335|  3.73M|    fn skip_whitespaces(&mut self) -> Option<()> {
  336|  3.73M|        if self.is_line_jump_whitespace {
  337|  3.73M|            let mut i = self.position.buffer_offset;
  338|  4.07M|            while let Some(c) = self.data.get(i) {
  339|  3.64M|                match c {
  340|   248k|                    b' ' | b'\t' => {
  341|   248k|                        self.position.buffer_offset += 1;
  342|   248k|                        self.position.global_offset += 1;
  343|   248k|                    }
  344|       |                    b'\r' => {
  345|       |                        // We look for \n for Windows line end style
  346|  14.1k|                        let mut increment: u8 = 1;
  347|  14.1k|                        if let Some(c) = self.data.get(i + 1) {
  348|  10.1k|                            if *c == b'\n' {
  349|     18|                                increment += 1;
  350|     18|                                i += 1;
  351|  10.1k|                            }
  352|  3.96k|                        } else if !self.is_ending {
  353|  3.84k|                            return None; // We need to read more
  354|    120|                        }
  355|  10.2k|                        self.position.buffer_offset += usize::from(increment);
  356|  10.2k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  357|  10.2k|                        self.position.global_offset += u64::from(increment);
  358|  10.2k|                        self.position.global_line += 1;
  359|       |                    }
  360|  83.8k|                    b'\n' => {
  361|  83.8k|                        self.position.buffer_offset += 1;
  362|  83.8k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  363|  83.8k|                        self.position.global_offset += 1;
  364|  83.8k|                        self.position.global_line += 1;
  365|  83.8k|                    }
  366|  3.29M|                    _ => return Some(()),
  367|       |                }
  368|   342k|                i += 1;
  369|       |                //TODO: SIMD
  370|       |            }
  371|       |        } else {
  372|      0|            for c in &self.data[self.position.buffer_offset..] {
  373|      0|                if matches!(c, b' ' | b'\t') {
  374|      0|                    self.position.buffer_offset += 1;
  375|      0|                    self.position.global_offset += 1;
  376|      0|                } else {
  377|      0|                    return Some(());
  378|       |                }
  379|       |                //TODO: SIMD
  380|       |            }
  381|       |        }
  382|   430k|        Some(())
  383|  3.73M|    }
_RNvMs1_NtNtCs70uHazZwt5R_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE11shrink_dataB9_:
  385|  1.13M|    fn shrink_data(&mut self) {
  386|  1.13M|        if self.position.line_start_buffer_offset > 0 {
  387|  10.5k|            self.data
  388|  10.5k|                .copy_within(self.position.line_start_buffer_offset.., 0);
  389|  10.5k|            self.data
  390|  10.5k|                .truncate(self.data.len() - self.position.line_start_buffer_offset);
  391|  10.5k|            self.position.buffer_offset -= self.position.line_start_buffer_offset;
  392|  10.5k|            self.position.line_start_buffer_offset = 0;
  393|  10.5k|            self.previous_position = self.position;
  394|  1.12M|        }
  395|  1.13M|    }
_RNvMs1_NtNtCs70uHazZwt5R_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  397|  4.71M|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  398|  4.71M|        let mut num_of_jumps = 0;
  399|  4.71M|        let mut last_jump_pos = 0;
  400|  4.71M|        let mut previous_cr = 0;
  401|  4.71M|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  402|  14.9k|            if bytes[pos] == b'\r' {
  403|  3.84k|                previous_cr = pos;
  404|  3.84k|                num_of_jumps += 1;
  405|  3.84k|                last_jump_pos = pos + 1;
  406|  3.84k|            } else {
  407|  11.0k|                if previous_cr < pos - 1 {
  408|  8.72k|                    // We count \r\n as a single line jump
  409|  8.72k|                    num_of_jumps += 1;
  410|  8.72k|                }
  411|  11.0k|                last_jump_pos = pos + 1;
  412|       |            }
  413|       |        }
  414|  4.71M|        (num_of_jumps, last_jump_pos)
  415|  4.71M|    }
_RNvMs1_NtNtCs70uHazZwt5R_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17column_from_bytesB9_:
  417|  4.00M|    fn column_from_bytes(bytes: &[u8]) -> u64 {
  418|  4.00M|        match str::from_utf8(bytes) {
  419|  1.97M|            Ok(s) => u64::try_from(s.chars().count()).unwrap(),
  420|  2.03M|            Err(e) => {
  421|  2.03M|                if e.valid_up_to() == 0 {
  422|   466k|                    0
  423|       |                } else {
  424|  1.57M|                    Self::column_from_bytes(&bytes[..e.valid_up_to()])
  425|       |                }
  426|       |            }
  427|       |        }
  428|  4.00M|    }

_RINvMs_NtNtCs70uHazZwt5R_5oxttl7toolkit6parserINtB5_6ParserNtNtB9_5terse14TriGRecognizerE10parse_readRShECsa1xq2UewJGb_4trig:
  123|  4.67k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadIterator<R, RR> {
  124|  4.67k|        FromReadIterator { read, parser: self }
  125|  4.67k|    }
_RNvXs0_NtNtCs70uHazZwt5R_5oxttl7toolkit6parserINtB5_16FromReadIteratorRShNtNtB9_5terse14TriGRecognizerENtNtNtNtCsd3ZSx5keFHB_4core4iter6traits8iterator8Iterator4nextCsa1xq2UewJGb_4trig:
  145|  76.0k|    fn next(&mut self) -> Option<Self::Item> {
  146|  88.2k|        while !self.parser.is_end() {
  147|  83.5k|            if let Some(result) = self.parser.read_next() {
  148|  71.3k|                return Some(result.map_err(ParseError::Syntax));
  149|  12.2k|            }
  150|  12.2k|            if let Err(e) = self.parser.lexer.extend_from_read(&mut self.read) {
  151|      0|                return Some(Err(e.into()));
  152|  12.2k|            }
  153|       |        }
  154|  4.67k|        None
  155|  76.0k|    }
_RNvXNtNtCs70uHazZwt5R_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCsd3ZSx5keFHB_4core7convert4FromNtNtCsgcnyUjfByoh_5alloc6string6StringE4fromB6_:
   39|  14.7k|    fn from(message: S) -> Self {
   40|  14.7k|        Self {
   41|  14.7k|            message: message.into(),
   42|  14.7k|        }
   43|  14.7k|    }
_RNvXNtNtCs70uHazZwt5R_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCsd3ZSx5keFHB_4core7convert4FromReE4fromB6_:
   39|   128k|    fn from(message: S) -> Self {
   40|   128k|        Self {
   41|   128k|            message: message.into(),
   42|   128k|        }
   43|   128k|    }
_RNvMs_NtNtCs70uHazZwt5R_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE3newB8_:
   56|  18.6k|    pub fn new(lexer: Lexer<RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   57|  18.6k|        Self {
   58|  18.6k|            lexer,
   59|  18.6k|            state: Some(recognizer),
   60|  18.6k|            context,
   61|  18.6k|            results: vec![],
   62|  18.6k|            errors: vec![],
   63|  18.6k|        }
   64|  18.6k|    }
_RNvMs_NtNtCs70uHazZwt5R_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE17extend_from_sliceB8_:
   66|  1.12M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
   67|  1.12M|        self.lexer.extend_from_slice(other)
   68|  1.12M|    }
_RNvMs_NtNtCs70uHazZwt5R_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE3endB8_:
   71|  14.0k|    pub fn end(&mut self) {
   72|  14.0k|        self.lexer.end()
   73|  14.0k|    }
_RNvMs_NtNtCs70uHazZwt5R_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE6is_endB8_:
   76|   102k|    pub fn is_end(&self) -> bool {
   77|   102k|        self.state.is_none() && self.results.is_empty() && self.errors.is_empty()
   78|   102k|    }
_RNvMs_NtNtCs70uHazZwt5R_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE9read_nextB8_:
   80|  2.65M|    pub fn read_next(&mut self) -> Option<Result<RR::Output, SyntaxError>> {
   81|       |        loop {
   82|  4.16M|            if let Some(error) = self.errors.pop() {
   83|   143k|                return Some(Err(SyntaxError {
   84|   143k|                    location: self.lexer.last_token_location(),
   85|   143k|                    message: error
   86|   143k|                        .message
   87|   143k|                        .replace("TOKEN", &self.lexer.last_token_source()),
   88|   143k|                }));
   89|  4.02M|            }
   90|  4.02M|            if let Some(result) = self.results.pop() {
   91|   290k|                return Some(Ok(result));
   92|  3.73M|            }
   93|  3.73M|            if let Some(result) = self.lexer.read_next(RR::lexer_options(&self.context)) {
   94|  2.56M|                match result {
   95|  1.48M|                    Ok(token) => {
   96|  1.48M|                        self.state = self.state.take().map(|state| {
   97|       |                            state.recognize_next(
   98|       |                                token,
   99|       |                                &mut self.context,
  100|       |                                &mut self.results,
  101|       |                                &mut self.errors,
  102|       |                            )
  103|  1.48M|                        });
  104|  1.48M|                        continue;
  105|       |                    }
  106|  1.07M|                    Err(e) => {
  107|  1.07M|                        self.state = self.state.take().map(RR::error_recovery_state);
  108|  1.07M|                        return Some(Err(e));
  109|       |                    }
  110|       |                }
  111|  1.16M|            }
  112|  1.16M|            if self.lexer.is_end() {
  113|  37.3k|                let Some(state) = self.state.take() else {
  114|  18.6k|                    return None;
  115|       |                };
  116|  18.6k|                state.recognize_end(&mut self.context, &mut self.results, &mut self.errors)
  117|       |            } else {
  118|  1.12M|                return None;
  119|       |            }
  120|       |        }
  121|  2.65M|    }
_RNCNvMs_NtNtCs70uHazZwt5R_5oxttl7toolkit6parserINtB6_6ParserNtNtBa_5terse14TriGRecognizerE9read_next0Ba_:
   96|  1.48M|                        self.state = self.state.take().map(|state| {
   97|  1.48M|                            state.recognize_next(
   98|  1.48M|                                token,
   99|  1.48M|                                &mut self.context,
  100|  1.48M|                                &mut self.results,
  101|  1.48M|                                &mut self.errors,
  102|  1.48M|                            )
  103|  1.48M|                        });

_RNvMNtCs70uHazZwt5R_5oxttl4trigNtB2_10TriGParser19with_quoted_triplesCsa1xq2UewJGb_4trig:
   91|  18.6k|    pub fn with_quoted_triples(mut self) -> Self {
   92|  18.6k|        self.with_quoted_triples = true;
   93|  18.6k|        self
   94|  18.6k|    }
_RNvMNtCs70uHazZwt5R_5oxttl4trigNtB2_10TriGParser3newCsa1xq2UewJGb_4trig:
   56|  18.6k|    pub fn new() -> Self {
   57|  18.6k|        Self::default()
   58|  18.6k|    }
_RNvMNtCs70uHazZwt5R_5oxttl4trigNtB2_10TriGParser9uncheckedCsa1xq2UewJGb_4trig:
   66|  4.67k|    pub fn unchecked(mut self) -> Self {
   67|  4.67k|        self.unchecked = true;
   68|  4.67k|        self
   69|  4.67k|    }
_RNvMs2_NtCs70uHazZwt5R_5oxttl4trigNtB5_14TriGSerializer3newCsa1xq2UewJGb_4trig:
  473|  4.67k|    pub fn new() -> Self {
  474|  4.67k|        Self
  475|  4.67k|    }
_RNvXs6_NtCs70uHazZwt5R_5oxttl4trigNtB5_10TriGParserNtNtCsd3ZSx5keFHB_4core7default7Default7defaultCsa1xq2UewJGb_4trig:
   43|  18.6k|#[derive(Default)]
_RINvMNtCs70uHazZwt5R_5oxttl4trigNtB3_10TriGParser10parse_readRShECsa1xq2UewJGb_4trig:
  121|  4.67k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadTriGReader<R> {
  122|  4.67k|        FromReadTriGReader {
  123|  4.67k|            inner: self.parse().parser.parse_read(read),
  124|  4.67k|        }
  125|  4.67k|    }
_RINvMNtCs70uHazZwt5R_5oxttl4trigNtB3_10TriGParser13with_base_iriReECsa1xq2UewJGb_4trig:
   72|  14.0k|    pub fn with_base_iri(mut self, base_iri: impl Into<String>) -> Result<Self, IriParseError> {
   73|  14.0k|        self.base = Some(Iri::parse(base_iri.into())?);
   74|  14.0k|        Ok(self)
   75|  14.0k|    }
_RINvMs2_NtCs70uHazZwt5R_5oxttl4trigNtB6_14TriGSerializer18serialize_to_writeINtNtCsgcnyUjfByoh_5alloc3vec3VechEECsa1xq2UewJGb_4trig:
  496|  4.67k|    pub fn serialize_to_write<W: Write>(self, write: W) -> ToWriteTriGWriter<W> {
  497|  4.67k|        ToWriteTriGWriter {
  498|  4.67k|            write,
  499|  4.67k|            writer: self.serialize(),
  500|  4.67k|        }
  501|  4.67k|    }
_RINvMs3_NtCs70uHazZwt5R_5oxttl4trigINtB6_17ToWriteTriGWriterINtNtCsgcnyUjfByoh_5alloc3vec3VechEE10write_quadRNtNtCsRRItI7FBc3_5oxrdf6triple4QuadECsa1xq2UewJGb_4trig:
  594|  71.3k|    pub fn write_quad<'a>(&mut self, q: impl Into<QuadRef<'a>>) -> io::Result<()> {
  595|  71.3k|        self.writer.write_quad(q, &mut self.write)
  596|  71.3k|    }
_RINvMs4_NtCs70uHazZwt5R_5oxttl4trigNtB6_18LowLevelTriGWriter10write_quadRNtNtCsRRItI7FBc3_5oxrdf6triple4QuadQINtNtCsgcnyUjfByoh_5alloc3vec3VechEECsa1xq2UewJGb_4trig:
  682|  71.3k|    pub fn write_quad<'a>(
  683|  71.3k|        &mut self,
  684|  71.3k|        q: impl Into<QuadRef<'a>>,
  685|  71.3k|        mut write: impl Write,
  686|  71.3k|    ) -> io::Result<()> {
  687|  71.3k|        let q = q.into();
  688|  71.3k|        if q.graph_name == self.current_graph_name.as_ref() {
  689|  68.7k|            if let Some((current_subject, current_predicate)) =
  690|  70.6k|                self.current_subject_predicate.take()
  691|       |            {
  692|  68.7k|                if q.subject == current_subject.as_ref() {
  693|  12.8k|                    if q.predicate == current_predicate {
  694|  6.00k|                        self.current_subject_predicate = Some((current_subject, current_predicate));
  695|  6.00k|                        write!(write, " , {}", TurtleTerm(q.object))
  696|       |                    } else {
  697|  6.84k|                        self.current_subject_predicate =
  698|  6.84k|                            Some((current_subject, q.predicate.into_owned()));
  699|  6.84k|                        writeln!(write, " ;")?;
  700|  6.84k|                        if !self.current_graph_name.is_default_graph() {
  701|    306|                            write!(write, "\t")?;
  702|  6.54k|                        }
  703|  6.84k|                        write!(write, "\t{} {}", q.predicate, TurtleTerm(q.object))
  704|       |                    }
  705|       |                } else {
  706|  55.9k|                    self.current_subject_predicate =
  707|  55.9k|                        Some((q.subject.into_owned(), q.predicate.into_owned()));
  708|  55.9k|                    writeln!(write, " .")?;
  709|  55.9k|                    if !self.current_graph_name.is_default_graph() {
  710|  11.4k|                        write!(write, "\t")?;
  711|  44.4k|                    }
  712|  55.9k|                    write!(
  713|  55.9k|                        write,
  714|  55.9k|                        "{} {} {}",
  715|  55.9k|                        TurtleTerm(q.subject.into()),
  716|  55.9k|                        q.predicate,
  717|  55.9k|                        TurtleTerm(q.object)
  718|  55.9k|                    )
  719|       |                }
  720|       |            } else {
  721|  1.92k|                self.current_subject_predicate =
  722|  1.92k|                    Some((q.subject.into_owned(), q.predicate.into_owned()));
  723|  1.92k|                if !self.current_graph_name.is_default_graph() {
  724|      0|                    write!(write, "\t")?;
  725|  1.92k|                }
  726|  1.92k|                write!(
  727|  1.92k|                    write,
  728|  1.92k|                    "{} {} {}",
  729|  1.92k|                    TurtleTerm(q.subject.into()),
  730|  1.92k|                    q.predicate,
  731|  1.92k|                    TurtleTerm(q.object)
  732|  1.92k|                )
  733|       |            }
  734|       |        } else {
  735|    638|            if self.current_subject_predicate.is_some() {
  736|    455|                writeln!(write, " .")?;
  737|    183|            }
  738|    638|            if !self.current_graph_name.is_default_graph() {
  739|    258|                writeln!(write, "}}")?;
  740|    380|            }
  741|    638|            self.current_graph_name = q.graph_name.into_owned();
  742|    638|            self.current_subject_predicate =
  743|    638|                Some((q.subject.into_owned(), q.predicate.into_owned()));
  744|    638|            if !self.current_graph_name.is_default_graph() {
  745|    425|                writeln!(write, "{} {{", q.graph_name)?;
  746|    425|                write!(write, "\t")?;
  747|    213|            }
  748|    638|            write!(
  749|    638|                write,
  750|    638|                "{} {} {}",
  751|    638|                TurtleTerm(q.subject.into()),
  752|    638|                q.predicate,
  753|    638|                TurtleTerm(q.object)
  754|    638|            )
  755|       |        }
  756|  71.3k|    }
_RINvMs4_NtCs70uHazZwt5R_5oxttl4trigNtB6_18LowLevelTriGWriter6finishQINtNtCsgcnyUjfByoh_5alloc3vec3VechEECsa1xq2UewJGb_4trig:
  759|  4.67k|    pub fn finish(&mut self, mut write: impl Write) -> io::Result<()> {
  760|  4.67k|        if self.current_subject_predicate.is_some() {
  761|  2.11k|            writeln!(write, " .")?;
  762|  2.56k|        }
  763|  4.67k|        if !self.current_graph_name.is_default_graph() {
  764|    167|            writeln!(write, "}}")?;
  765|  4.50k|        }
  766|  4.67k|        Ok(())
  767|  4.67k|    }
_RNvMs3_NtCs70uHazZwt5R_5oxttl4trigINtB5_17ToWriteTriGWriterINtNtCsgcnyUjfByoh_5alloc3vec3VechEE6finishCsa1xq2UewJGb_4trig:
  599|  4.67k|    pub fn finish(mut self) -> io::Result<W> {
  600|  4.67k|        self.writer.finish(&mut self.write)?;
  601|  4.67k|        Ok(self.write)
  602|  4.67k|    }
_RNvXs0_NtCs70uHazZwt5R_5oxttl4trigINtB5_18FromReadTriGReaderRShENtNtNtNtCsd3ZSx5keFHB_4core4iter6traits8iterator8Iterator4nextCsa1xq2UewJGb_4trig:
  276|  76.0k|    fn next(&mut self) -> Option<Result<Quad, ParseError>> {
  277|  76.0k|        self.inner.next()
  278|  76.0k|    }
_RNvMNtCs70uHazZwt5R_5oxttl4trigNtB2_10TriGParser5parse:
  202|  18.6k|    pub fn parse(self) -> LowLevelTriGReader {
  203|  18.6k|        LowLevelTriGReader {
  204|  18.6k|            parser: TriGRecognizer::new_parser(
  205|  18.6k|                true,
  206|  18.6k|                #[cfg(feature = "rdf-star")]
  207|  18.6k|                self.with_quoted_triples,
  208|  18.6k|                self.unchecked,
  209|  18.6k|                self.base,
  210|  18.6k|                self.prefixes,
  211|  18.6k|            ),
  212|  18.6k|        }
  213|  18.6k|    }
_RNvMs1_NtCs70uHazZwt5R_5oxttl4trigNtB5_18LowLevelTriGReader17extend_from_slice:
  394|  1.12M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  395|  1.12M|        self.parser.extend_from_slice(other)
  396|  1.12M|    }
_RNvMs1_NtCs70uHazZwt5R_5oxttl4trigNtB5_18LowLevelTriGReader3end:
  401|  14.0k|    pub fn end(&mut self) {
  402|  14.0k|        self.parser.end()
  403|  14.0k|    }
_RNvMs1_NtCs70uHazZwt5R_5oxttl4trigNtB5_18LowLevelTriGReader6is_end:
  406|  14.0k|    pub fn is_end(&self) -> bool {
  407|  14.0k|        self.parser.is_end()
  408|  14.0k|    }
_RNvMs1_NtCs70uHazZwt5R_5oxttl4trigNtB5_18LowLevelTriGReader9read_next:
  414|  2.57M|    pub fn read_next(&mut self) -> Option<Result<Quad, SyntaxError>> {
  415|  2.57M|        self.parser.read_next()
  416|  2.57M|    }
_RNvMs2_NtCs70uHazZwt5R_5oxttl4trigNtB5_14TriGSerializer9serialize:
  559|  4.67k|    pub fn serialize(&self) -> LowLevelTriGWriter {
  560|  4.67k|        LowLevelTriGWriter {
  561|  4.67k|            current_graph_name: GraphName::DefaultGraph,
  562|  4.67k|            current_subject_predicate: None,
  563|  4.67k|        }
  564|  4.67k|    }
_RNvXs5_NtCs70uHazZwt5R_5oxttl4trigNtB5_10TurtleTermNtNtCsd3ZSx5keFHB_4core3fmt7Display3fmt:
  773|   129k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  774|   129k|        match self.0 {
  775|  10.4k|            TermRef::NamedNode(v) => write!(f, "{v}"),
  776|  96.2k|            TermRef::BlankNode(v) => write!(f, "{v}"),
  777|  23.1k|            TermRef::Literal(v) => {
  778|  23.1k|                let value = v.value();
  779|  23.1k|                let inline = match v.datatype() {
  780|  23.1k|                    xsd::BOOLEAN => is_turtle_boolean(value),
  781|  23.0k|                    xsd::INTEGER => is_turtle_integer(value),
  782|  10.6k|                    xsd::DECIMAL => is_turtle_decimal(value),
  783|  8.69k|                    xsd::DOUBLE => is_turtle_double(value),
  784|  3.84k|                    _ => false,
  785|       |                };
  786|  23.1k|                if inline {
  787|  19.2k|                    write!(f, "{value}")
  788|       |                } else {
  789|  3.84k|                    write!(f, "{v}")
  790|       |                }
  791|       |            }
  792|       |            #[cfg(feature = "rdf-star")]
  793|      0|            TermRef::Triple(t) => {
  794|      0|                write!(
  795|      0|                    f,
  796|      0|                    "<< {} {} {} >>",
  797|      0|                    TurtleTerm(t.subject.as_ref().into()),
  798|      0|                    t.predicate,
  799|      0|                    TurtleTerm(t.object.as_ref())
  800|      0|                )
  801|       |            }
  802|       |        }
  803|   129k|    }
_RNvNtCs70uHazZwt5R_5oxttl4trig17is_turtle_boolean:
  806|    101|fn is_turtle_boolean(value: &str) -> bool {
  807|    101|    matches!(value, "true" | "false")
  808|    101|}
_RNvNtCs70uHazZwt5R_5oxttl4trig17is_turtle_integer:
  810|  12.3k|fn is_turtle_integer(value: &str) -> bool {
  811|  12.3k|    // [19] 	INTEGER 	::= 	[+-]? [0-9]+
  812|  12.3k|    let mut value = value.as_bytes();
  813|  12.3k|    if let Some(v) = value.strip_prefix(b"+") {
  814|    775|        value = v;
  815|  11.5k|    } else if let Some(v) = value.strip_prefix(b"-") {
  816|     20|        value = v;
  817|  11.5k|    }
  818|  12.3k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  819|  12.3k|}
_RNvNtCs70uHazZwt5R_5oxttl4trig17is_turtle_decimal:
  821|  1.97k|fn is_turtle_decimal(value: &str) -> bool {
  822|  1.97k|    // [20] 	DECIMAL 	::= 	[+-]? [0-9]* '.' [0-9]+
  823|  1.97k|    let mut value = value.as_bytes();
  824|  1.97k|    if let Some(v) = value.strip_prefix(b"+") {
  825|    172|        value = v;
  826|  1.80k|    } else if let Some(v) = value.strip_prefix(b"-") {
  827|    102|        value = v;
  828|  1.70k|    }
  829|  3.86k|    while value.first().map_or(false, u8::is_ascii_digit) {
  830|  1.89k|        value = &value[1..];
  831|  1.89k|    }
  832|  1.97k|    let Some(value) = value.strip_prefix(b".") else {
  833|      0|        return false;
  834|       |    };
  835|  1.97k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  836|  1.97k|}
_RNvNtCs70uHazZwt5R_5oxttl4trig16is_turtle_double:
  838|  4.85k|fn is_turtle_double(value: &str) -> bool {
  839|  4.85k|    // [21] 	DOUBLE 	::= 	[+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  840|  4.85k|    // [154s] 	EXPONENT 	::= 	[eE] [+-]? [0-9]+
  841|  4.85k|    let mut value = value.as_bytes();
  842|  4.85k|    if let Some(v) = value.strip_prefix(b"+") {
  843|     15|        value = v;
  844|  4.83k|    } else if let Some(v) = value.strip_prefix(b"-") {
  845|     76|        value = v;
  846|  4.76k|    }
  847|  4.85k|    let mut with_before = false;
  848|  20.4k|    while value.first().map_or(false, u8::is_ascii_digit) {
  849|  15.6k|        value = &value[1..];
  850|  15.6k|        with_before = true;
  851|  15.6k|    }
  852|  4.85k|    let mut with_after = false;
  853|  4.85k|    if let Some(v) = value.strip_prefix(b".") {
  854|    122|        value = v;
  855|  1.49k|        while value.first().map_or(false, u8::is_ascii_digit) {
  856|  1.36k|            value = &value[1..];
  857|  1.36k|            with_after = true;
  858|  1.36k|        }
  859|  4.72k|    }
  860|  4.85k|    if let Some(v) = value.strip_prefix(b"e") {
  861|     59|        value = v;
  862|  4.79k|    } else if let Some(v) = value.strip_prefix(b"E") {
  863|  4.79k|        value = v;
  864|  4.79k|    } else {
  865|      0|        return false;
  866|       |    }
  867|  4.85k|    if let Some(v) = value.strip_prefix(b"+") {
  868|     12|        value = v;
  869|  4.83k|    } else if let Some(v) = value.strip_prefix(b"-") {
  870|     14|        value = v;
  871|  4.82k|    }
  872|  4.85k|    (with_before || with_after) && !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  873|  4.85k|}


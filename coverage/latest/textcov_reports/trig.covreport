_RINvMNtCsf3jNwo5uZaW_9getrandom4lazyNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   34|    105|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   35|    105|        // Relaxed ordering is fine, as we only have a single atomic variable.
   36|    105|        let mut val = self.0.load(Relaxed);
   37|    105|        if val == Self::UNINIT {
   38|      1|            val = init();
   39|      1|            self.0.store(val, Relaxed);
   40|    104|        }
   41|    105|        val
   42|    105|    }
_RINvMs_NtCsf3jNwo5uZaW_9getrandom4lazyNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   53|    105|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   54|    105|        self.0.unsync_init(|| init() as usize) != 0
   55|    105|    }
_RNCINvMs_NtCsf3jNwo5uZaW_9getrandom4lazyNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   54|      1|        self.0.unsync_init(|| init() as usize) != 0

_RNvCsf3jNwo5uZaW_9getrandom16getrandom_uninitCs1VwvFboG3Qn_9rand_core:
  345|    105|pub fn getrandom_uninit(dest: &mut [MaybeUninit<u8>]) -> Result<&mut [u8], Error> {
  346|    105|    if !dest.is_empty() {
  347|    105|        imp::getrandom_inner(dest)?;
  348|      0|    }
  349|       |    // SAFETY: `dest` has been fully initialized by `imp::getrandom_inner`
  350|       |    // since it returned `Ok`.
  351|    105|    Ok(unsafe { slice_assume_init_mut(dest) })
  352|    105|}
_RNvCsf3jNwo5uZaW_9getrandom9getrandomCs1VwvFboG3Qn_9rand_core:
  315|    105|pub fn getrandom(dest: &mut [u8]) -> Result<(), Error> {
  316|    105|    // SAFETY: The `&mut MaybeUninit<_>` reference doesn't escape, and
  317|    105|    // `getrandom_uninit` guarantees it will never de-initialize any part of
  318|    105|    // `dest`.
  319|    105|    getrandom_uninit(unsafe { slice_as_uninit_mut(dest) })?;
  320|    105|    Ok(())
  321|    105|}

_RNvNtCsf3jNwo5uZaW_9getrandom3imp15getrandom_inner:
    9|    105|pub fn getrandom_inner(dest: &mut [MaybeUninit<u8>]) -> Result<(), Error> {
   10|    105|    // getrandom(2) was introduced in Linux 3.17
   11|    105|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   12|    105|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   13|    105|        sys_fill_exact(dest, |buf| unsafe {
   14|       |            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   15|    105|        })
   16|       |    } else {
   17|      0|        use_file::getrandom_inner(dest)
   18|       |    }
   19|    105|}
_RNCNvNtCsf3jNwo5uZaW_9getrandom3imp15getrandom_inner0B5_:
   13|    105|        sys_fill_exact(dest, |buf| unsafe {
   14|    105|            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   15|    105|        })
_RNvNtCsf3jNwo5uZaW_9getrandom3imp22is_getrandom_available:
   21|      1|fn is_getrandom_available() -> bool {
   22|      1|    let res = unsafe { getrandom(core::ptr::null_mut(), 0, libc::GRND_NONBLOCK) };
   23|      1|    if res < 0 {
   24|      0|        match last_os_error().raw_os_error() {
   25|      0|            Some(libc::ENOSYS) => false, // No kernel support
   26|      0|            Some(libc::EPERM) => false,  // Blocked by seccomp
   27|      0|            _ => true,
   28|       |        }
   29|       |    } else {
   30|      1|        true
   31|       |    }
   32|      1|}
_RNvNtCsf3jNwo5uZaW_9getrandom3imp9getrandom:
   34|    106|unsafe fn getrandom(
   35|    106|    buf: *mut libc::c_void,
   36|    106|    buflen: libc::size_t,
   37|    106|    flags: libc::c_uint,
   38|    106|) -> libc::ssize_t {
   39|    106|    libc::syscall(libc::SYS_getrandom, buf, buflen, flags) as libc::ssize_t
   40|    106|}

_RINvNtCsf3jNwo5uZaW_9getrandom4util19slice_as_uninit_muthECs1VwvFboG3Qn_9rand_core:
   32|    105|pub unsafe fn slice_as_uninit_mut<T>(slice: &mut [T]) -> &mut [MaybeUninit<T>] {
   33|    105|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   34|    105|    &mut *(slice as *mut [T] as *mut [MaybeUninit<T>])
   35|    105|}
_RINvNtCsf3jNwo5uZaW_9getrandom4util21slice_assume_init_muthECs1VwvFboG3Qn_9rand_core:
    8|    105|pub unsafe fn slice_assume_init_mut<T>(slice: &mut [MaybeUninit<T>]) -> &mut [T] {
    9|    105|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   10|    105|    &mut *(slice as *mut [MaybeUninit<T>] as *mut [T])
   11|    105|}

_RINvNtCsf3jNwo5uZaW_9getrandom9util_libc14sys_fill_exactNCNvNtB4_3imp15getrandom_inner0EB4_:
   59|    105|pub fn sys_fill_exact(
   60|    105|    mut buf: &mut [MaybeUninit<u8>],
   61|    105|    sys_fill: impl Fn(&mut [MaybeUninit<u8>]) -> libc::ssize_t,
   62|    105|) -> Result<(), Error> {
   63|    210|    while !buf.is_empty() {
   64|    105|        let res = sys_fill(buf);
   65|    105|        match res {
   66|    105|            res if res > 0 => buf = buf.get_mut(res as usize..).ok_or(Error::UNEXPECTED)?,
   67|       |            -1 => {
   68|      0|                let err = last_os_error();
   69|      0|                // We should try again if the call was interrupted.
   70|      0|                if err.raw_os_error() != Some(libc::EINTR) {
   71|      0|                    return Err(err);
   72|      0|                }
   73|       |            }
   74|       |            // Negative return codes not equal to -1 should be impossible.
   75|       |            // EOF (ret = 0) should be impossible, as the data we are reading
   76|       |            // should be an infinite stream of random bytes.
   77|      0|            _ => return Err(Error::UNEXPECTED),
   78|       |        }
   79|       |    }
   80|    105|    Ok(())
   81|    105|}

rust_fuzzer_test_input:
  209|  5.73k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  5.73k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  5.73k|                }
  223|  5.73k|
  224|  5.73k|                __libfuzzer_sys_run(bytes);
  225|  5.73k|                0
  226|       |            }
_RNvNvCs3ABq5th2z32_4trig1__19___libfuzzer_sys_run:
  241|  5.73k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|       |            }
LLVMFuzzerTestOneInput:
   58|  5.73k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  5.73k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  5.73k|    });
   63|  5.73k|
   64|  5.73k|    match test_input {
   65|  5.73k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  5.73k|}
_RNCNvCsfZga41Oi5MJ_13libfuzzer_sys15test_input_wrap0B3_:
   59|  5.73k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  5.73k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  5.73k|        rust_fuzzer_test_input(data_slice)
   62|  5.73k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvMs3_NtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCsjv2Y2xFO4ua_4core4iter6traits8iterator8Iterator4next0ECscuJmoqhSOSr_5oxttl:
 1044|  6.07M|    pub(crate) unsafe fn next(
 1045|  6.07M|        &mut self,
 1046|  6.07M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  6.07M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  6.07M|        let found = find_raw(self.start, self.end)?;
 1057|  13.3k|        let result = found.distance(self.original_start);
 1058|  13.3k|        self.start = found.add(1);
 1059|  13.3k|        Some(result)
 1060|  6.07M|    }
_RINvNtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECscuJmoqhSOSr_5oxttl:
 1125|  13.5k|pub(crate) unsafe fn search_slice_with_raw(
 1126|  13.5k|    haystack: &[u8],
 1127|  13.5k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  13.5k|) -> Option<usize> {
 1129|  13.5k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  13.5k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  13.5k|    // a &[u8].
 1132|  13.5k|    let start = haystack.as_ptr();
 1133|  13.5k|    let end = start.add(haystack.len());
 1134|  13.5k|    let found = find_raw(start, end)?;
 1135|    917|    Some(found.distance(start))
 1136|  13.5k|}
_RINvNtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr7memchr20ECscuJmoqhSOSr_5oxttl:
 1125|   743k|pub(crate) unsafe fn search_slice_with_raw(
 1126|   743k|    haystack: &[u8],
 1127|   743k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|   743k|) -> Option<usize> {
 1129|   743k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|   743k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|   743k|    // a &[u8].
 1132|   743k|    let start = haystack.as_ptr();
 1133|   743k|    let end = start.add(haystack.len());
 1134|   743k|    let found = find_raw(start, end)?;
 1135|   476k|    Some(found.distance(start))
 1136|   743k|}
_RNvMs3_NtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  6.06M|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  6.06M|        Iter {
 1029|  6.06M|            original_start: haystack.as_ptr(),
 1030|  6.06M|            start: haystack.as_ptr(),
 1031|  6.06M|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  6.06M|            haystack: core::marker::PhantomData,
 1033|  6.06M|        }
 1034|  6.06M|    }
_RNvMNtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m128iE7needle1B8_:
  117|  27.3k|    pub(crate) fn needle1(&self) -> u8 {
  118|  27.3k|        self.s1
  119|  27.3k|    }
_RNvMNtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m128iE3newB8_:
  111|  13.5k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  13.5k|        One { s1: needle, v1: V::splat(needle) }
  113|  13.5k|    }
_RNvMNtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m256iE3newB8_:
  111|  13.5k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  13.5k|        One { s1: needle, v1: V::splat(needle) }
  113|  13.5k|    }
_RNvMNtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  2.80k|    pub(crate) unsafe fn find_raw(
  144|  2.80k|        &self,
  145|  2.80k|        start: *const u8,
  146|  2.80k|        end: *const u8,
  147|  2.80k|    ) -> Option<*const u8> {
  148|  2.80k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  2.80k|        // need to move up to using a u64 for the masks used below. Currently
  150|  2.80k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  2.80k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  2.80k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  2.80k|        let topos = V::Mask::first_offset;
  155|  2.80k|        let len = end.distance(start);
  156|  2.80k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  2.80k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|     94|            return Some(cur);
  167|  2.70k|        }
  168|  2.70k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  2.70k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  2.70k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  2.70k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  2.70k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  3.97k|        while cur <= end.sub(V::BYTES) {
  213|  1.30k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  1.30k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|     28|                return Some(cur);
  216|  1.27k|            }
  217|  1.27k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  2.67k|        if cur < end {
  224|  2.32k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  2.32k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  2.32k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  2.32k|            return self.search_chunk(cur, topos);
  228|    354|        }
  229|    354|        None
  230|  2.80k|    }
_RNvMNtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  5.79k|    pub(crate) unsafe fn find_raw(
  144|  5.79k|        &self,
  145|  5.79k|        start: *const u8,
  146|  5.79k|        end: *const u8,
  147|  5.79k|    ) -> Option<*const u8> {
  148|  5.79k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  5.79k|        // need to move up to using a u64 for the masks used below. Currently
  150|  5.79k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  5.79k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  5.79k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  5.79k|        let topos = V::Mask::first_offset;
  155|  5.79k|        let len = end.distance(start);
  156|  5.79k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  5.79k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|    189|            return Some(cur);
  167|  5.60k|        }
  168|  5.60k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  5.60k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  5.60k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  5.60k|        if len >= Self::LOOP_SIZE {
  172|  5.40k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|  2.86k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|  2.86k|                let a = V::load_aligned(cur);
  176|  2.86k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|  2.86k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|  2.86k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|  2.86k|                let eqa = self.v1.cmpeq(a);
  180|  2.86k|                let eqb = self.v1.cmpeq(b);
  181|  2.86k|                let eqc = self.v1.cmpeq(c);
  182|  2.86k|                let eqd = self.v1.cmpeq(d);
  183|  2.86k|                let or1 = eqa.or(eqb);
  184|  2.86k|                let or2 = eqc.or(eqd);
  185|  2.86k|                let or3 = or1.or(or2);
  186|  2.86k|                if or3.movemask_will_have_non_zero() {
  187|    189|                    let mask = eqa.movemask();
  188|    189|                    if mask.has_non_zero() {
  189|     36|                        return Some(cur.add(topos(mask)));
  190|    153|                    }
  191|    153|
  192|    153|                    let mask = eqb.movemask();
  193|    153|                    if mask.has_non_zero() {
  194|     53|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|    100|                    }
  196|    100|
  197|    100|                    let mask = eqc.movemask();
  198|    100|                    if mask.has_non_zero() {
  199|     57|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|     43|                    }
  201|     43|
  202|     43|                    let mask = eqd.movemask();
  203|     43|                    debug_assert!(mask.has_non_zero());
  204|     43|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  2.67k|                }
  206|  2.67k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  2.87k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  11.8k|        while cur <= end.sub(V::BYTES) {
  213|  6.50k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  6.50k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|     82|                return Some(cur);
  216|  6.42k|            }
  217|  6.42k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  5.33k|        if cur < end {
  224|  5.04k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  5.04k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  5.04k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  5.04k|            return self.search_chunk(cur, topos);
  228|    295|        }
  229|    295|        None
  230|  5.79k|    }
_RINvMNtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  6.42k|    unsafe fn search_chunk(
  417|  6.42k|        &self,
  418|  6.42k|        cur: *const u8,
  419|  6.42k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  6.42k|    ) -> Option<*const u8> {
  421|  6.42k|        let chunk = V::load_unaligned(cur);
  422|  6.42k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  6.42k|        if mask.has_non_zero() {
  424|    181|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  6.24k|            None
  427|       |        }
  428|  6.42k|    }
_RINvMNtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  17.3k|    unsafe fn search_chunk(
  417|  17.3k|        &self,
  418|  17.3k|        cur: *const u8,
  419|  17.3k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  17.3k|    ) -> Option<*const u8> {
  421|  17.3k|        let chunk = V::load_unaligned(cur);
  422|  17.3k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  17.3k|        if mask.has_non_zero() {
  424|    410|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  16.9k|            None
  427|       |        }
  428|  17.3k|    }
_RNvMs_NtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m128iE3newBa_:
  450|  6.81M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  6.81M|        Two {
  452|  6.81M|            s1: needle1,
  453|  6.81M|            s2: needle2,
  454|  6.81M|            v1: V::splat(needle1),
  455|  6.81M|            v2: V::splat(needle2),
  456|  6.81M|        }
  457|  6.81M|    }
_RNvMs_NtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m256iE3newBa_:
  450|  6.81M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  6.81M|        Two {
  452|  6.81M|            s1: needle1,
  453|  6.81M|            s2: needle2,
  454|  6.81M|            v1: V::splat(needle1),
  455|  6.81M|            v2: V::splat(needle2),
  456|  6.81M|        }
  457|  6.81M|    }
_RNvMs_NtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  8.07M|    pub(crate) fn needle1(&self) -> u8 {
  462|  8.07M|        self.s1
  463|  8.07M|    }
_RNvMs_NtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  8.02M|    pub(crate) fn needle2(&self) -> u8 {
  468|  8.02M|        self.s2
  469|  8.02M|    }
_RNvMs_NtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m128iE8find_rawBa_:
  493|   156k|    pub(crate) unsafe fn find_raw(
  494|   156k|        &self,
  495|   156k|        start: *const u8,
  496|   156k|        end: *const u8,
  497|   156k|    ) -> Option<*const u8> {
  498|   156k|        // If we want to support vectors bigger than 256 bits, we probably
  499|   156k|        // need to move up to using a u64 for the masks used below. Currently
  500|   156k|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|   156k|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|   156k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   156k|        let topos = V::Mask::first_offset;
  505|   156k|        let len = end.distance(start);
  506|   156k|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   156k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  34.2k|            return Some(cur);
  517|   121k|        }
  518|   121k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   121k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|   121k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   121k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   121k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   166k|        while cur <= end.sub(V::BYTES) {
  551|  45.9k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  45.9k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  1.22k|                return Some(cur);
  554|  44.7k|            }
  555|  44.7k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   120k|        if cur < end {
  562|   112k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   112k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|   112k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   112k|            return self.search_chunk(cur, topos);
  566|  8.56k|        }
  567|  8.56k|        None
  568|   156k|    }
_RNvMs_NtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m256iE8find_rawBa_:
  493|   704k|    pub(crate) unsafe fn find_raw(
  494|   704k|        &self,
  495|   704k|        start: *const u8,
  496|   704k|        end: *const u8,
  497|   704k|    ) -> Option<*const u8> {
  498|   704k|        // If we want to support vectors bigger than 256 bits, we probably
  499|   704k|        // need to move up to using a u64 for the masks used below. Currently
  500|   704k|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|   704k|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|   704k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   704k|        let topos = V::Mask::first_offset;
  505|   704k|        let len = end.distance(start);
  506|   704k|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   704k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   278k|            return Some(cur);
  517|   425k|        }
  518|   425k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   425k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|   425k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   425k|        if len >= Self::LOOP_SIZE {
  522|   378k|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|   300k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|   300k|                let a = V::load_aligned(cur);
  526|   300k|                let b = V::load_aligned(cur.add(V::BYTES));
  527|   300k|                let eqa1 = self.v1.cmpeq(a);
  528|   300k|                let eqb1 = self.v1.cmpeq(b);
  529|   300k|                let eqa2 = self.v2.cmpeq(a);
  530|   300k|                let eqb2 = self.v2.cmpeq(b);
  531|   300k|                let or1 = eqa1.or(eqb1);
  532|   300k|                let or2 = eqa2.or(eqb2);
  533|   300k|                let or3 = or1.or(or2);
  534|   300k|                if or3.movemask_will_have_non_zero() {
  535|  90.4k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|  90.4k|                    if mask.has_non_zero() {
  537|  45.3k|                        return Some(cur.add(topos(mask)));
  538|  45.1k|                    }
  539|  45.1k|
  540|  45.1k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|  45.1k|                    debug_assert!(mask.has_non_zero());
  542|  45.1k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|   210k|                }
  544|   210k|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   257k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   449k|        while cur <= end.sub(V::BYTES) {
  551|   116k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   116k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  3.16k|                return Some(cur);
  554|   113k|            }
  555|   113k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   332k|        if cur < end {
  562|   322k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   322k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|   322k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   322k|            return self.search_chunk(cur, topos);
  566|  10.1k|        }
  567|  10.1k|        None
  568|   704k|    }
_RINvMs_NtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|   314k|    unsafe fn search_chunk(
  671|   314k|        &self,
  672|   314k|        cur: *const u8,
  673|   314k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|   314k|    ) -> Option<*const u8> {
  675|   314k|        let chunk = V::load_unaligned(cur);
  676|   314k|        let eq1 = self.v1.cmpeq(chunk);
  677|   314k|        let eq2 = self.v2.cmpeq(chunk);
  678|   314k|        let mask = eq1.or(eq2).movemask();
  679|   314k|        if mask.has_non_zero() {
  680|  38.2k|            let mask1 = eq1.movemask();
  681|  38.2k|            let mask2 = eq2.movemask();
  682|  38.2k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|   275k|            None
  685|       |        }
  686|   314k|    }
_RINvMs_NtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  1.14M|    unsafe fn search_chunk(
  671|  1.14M|        &self,
  672|  1.14M|        cur: *const u8,
  673|  1.14M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  1.14M|    ) -> Option<*const u8> {
  675|  1.14M|        let chunk = V::load_unaligned(cur);
  676|  1.14M|        let eq1 = self.v1.cmpeq(chunk);
  677|  1.14M|        let eq2 = self.v2.cmpeq(chunk);
  678|  1.14M|        let mask = eq1.or(eq2).movemask();
  679|  1.14M|        if mask.has_non_zero() {
  680|   287k|            let mask1 = eq1.movemask();
  681|   287k|            let mask2 = eq2.movemask();
  682|   287k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|   855k|            None
  685|       |        }
  686|  1.14M|    }
_RINvNtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  3.91k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  3.91k|    start: *const u8,
 1150|  3.91k|    end: *const u8,
 1151|  3.91k|    confirm: F,
 1152|  3.91k|) -> Option<*const u8> {
 1153|  3.91k|    debug_assert!(start <= end);
 1154|  3.91k|    let mut ptr = start;
 1155|  31.0k|    while ptr < end {
 1156|  27.3k|        if confirm(*ptr) {
 1157|    137|            return Some(ptr);
 1158|  27.1k|        }
 1159|  27.1k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  3.77k|    None
 1162|  3.91k|}
_RINvNtNtNtCsenUNIr1NycQ_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|  4.62M|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  4.62M|    start: *const u8,
 1150|  4.62M|    end: *const u8,
 1151|  4.62M|    confirm: F,
 1152|  4.62M|) -> Option<*const u8> {
 1153|  4.62M|    debug_assert!(start <= end);
 1154|  4.62M|    let mut ptr = start;
 1155|  12.6M|    while ptr < end {
 1156|  8.07M|        if confirm(*ptr) {
 1157|  73.6k|            return Some(ptr);
 1158|  7.99M|        }
 1159|  7.99M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  4.54M|    None
 1162|  4.62M|}

_RNvMNtNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  13.5k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  13.5k|        One {
   71|  13.5k|            sse2: generic::One::new(needle),
   72|  13.5k|            avx2: generic::One::new(needle),
   73|  13.5k|        }
   74|  13.5k|    }
_RNvMNtNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  13.5k|    pub unsafe fn find_raw(
  180|  13.5k|        &self,
  181|  13.5k|        start: *const u8,
  182|  13.5k|        end: *const u8,
  183|  13.5k|    ) -> Option<*const u8> {
  184|  13.5k|        if start >= end {
  185|  1.04k|            return None;
  186|  12.5k|        }
  187|  12.5k|        let len = end.distance(start);
  188|  12.5k|        if len < __m256i::BYTES {
  189|  6.71k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  3.91k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  3.91k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  2.80k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  5.79k|        }
  201|  5.79k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  5.79k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  5.79k|        // enough to run on the vector routine. Pointer validity is caller's
  204|  5.79k|        // responsibility.
  205|  5.79k|        //
  206|  5.79k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  5.79k|        // means we'd have to annotate this routine with `target_feature`.
  208|  5.79k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  5.79k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  5.79k|        // The real problem is that a routine with a `target_feature`
  211|  5.79k|        // annotation generally can't be inlined into caller code unless
  212|  5.79k|        // the caller code has the same target feature annotations. Namely,
  213|  5.79k|        // the common case (at time of writing) is for calling code to not
  214|  5.79k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  5.79k|        // `target_feature` on this routine, it can be inlined which will
  216|  5.79k|        // handle some of the short-haystack cases above without touching the
  217|  5.79k|        // architecture specific code.
  218|  5.79k|        self.find_raw_avx2(start, end)
  219|  13.5k|    }
_RNCNvMNtNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|  27.3k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|  27.3k|                    b == self.sse2.needle1()
  194|  27.3k|                })
_RNvMNtNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  2.80k|    unsafe fn find_raw_sse2(
  337|  2.80k|        &self,
  338|  2.80k|        start: *const u8,
  339|  2.80k|        end: *const u8,
  340|  2.80k|    ) -> Option<*const u8> {
  341|  2.80k|        self.sse2.find_raw(start, end)
  342|  2.80k|    }
_RNvMNtNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  5.79k|    unsafe fn find_raw_avx2(
  397|  5.79k|        &self,
  398|  5.79k|        start: *const u8,
  399|  5.79k|        end: *const u8,
  400|  5.79k|    ) -> Option<*const u8> {
  401|  5.79k|        self.avx2.find_raw(start, end)
  402|  5.79k|    }
_RNvMs2_NtNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  6.81M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  6.81M|        Two {
  558|  6.81M|            sse2: generic::Two::new(needle1, needle2),
  559|  6.81M|            avx2: generic::Two::new(needle1, needle2),
  560|  6.81M|        }
  561|  6.81M|    }
_RNvMs2_NtNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNvMs2_NtNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  6.81M|    pub unsafe fn find_raw(
  655|  6.81M|        &self,
  656|  6.81M|        start: *const u8,
  657|  6.81M|        end: *const u8,
  658|  6.81M|    ) -> Option<*const u8> {
  659|  6.81M|        if start >= end {
  660|  1.33M|            return None;
  661|  5.48M|        }
  662|  5.48M|        let len = end.distance(start);
  663|  5.48M|        if len < __m256i::BYTES {
  664|  4.77M|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  4.62M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  4.62M|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|   156k|                self.find_raw_sse2(start, end)
  674|       |            };
  675|   704k|        }
  676|   704k|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|   704k|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|   704k|        // enough to run on the vector routine. Pointer validity is caller's
  679|   704k|        // responsibility.
  680|   704k|        //
  681|   704k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|   704k|        // means we'd have to annotate this routine with `target_feature`.
  683|   704k|        // Which is fine, because this routine is `unsafe` anyway and the
  684|   704k|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|   704k|        // The real problem is that a routine with a `target_feature`
  686|   704k|        // annotation generally can't be inlined into caller code unless
  687|   704k|        // the caller code has the same target feature annotations. Namely,
  688|   704k|        // the common case (at time of writing) is for calling code to not
  689|   704k|        // have the `avx2` target feature enabled *at compile time*. Without
  690|   704k|        // `target_feature` on this routine, it can be inlined which will
  691|   704k|        // handle some of the short-haystack cases above without touching the
  692|   704k|        // architecture specific code.
  693|   704k|        self.find_raw_avx2(start, end)
  694|  6.81M|    }
_RNCNvMs2_NtNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  8.07M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  8.07M|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  8.07M|                })
_RNvMs2_NtNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|   156k|    unsafe fn find_raw_sse2(
  765|   156k|        &self,
  766|   156k|        start: *const u8,
  767|   156k|        end: *const u8,
  768|   156k|    ) -> Option<*const u8> {
  769|   156k|        self.sse2.find_raw(start, end)
  770|   156k|    }
_RNvMs2_NtNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|   704k|    unsafe fn find_raw_avx2(
  805|   704k|        &self,
  806|   704k|        start: *const u8,
  807|   704k|        end: *const u8,
  808|   704k|    ) -> Option<*const u8> {
  809|   704k|        self.avx2.find_raw(start, end)
  810|   704k|    }

_RNvNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  6.81M|pub(crate) fn memchr2_raw(
  221|  6.81M|    n1: u8,
  222|  6.81M|    n2: u8,
  223|  6.81M|    start: *const u8,
  224|  6.81M|    end: *const u8,
  225|  6.81M|) -> Option<*const u8> {
  226|  6.81M|    // SAFETY: We provide a valid function pointer type.
  227|  6.81M|    unsafe_ifunc!(
  228|  6.81M|        Two,
  229|  6.81M|        find_raw,
  230|  6.81M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  6.81M|        Option<*const u8>,
  232|  6.81M|        start,
  233|  6.81M|        end,
  234|  6.81M|        n1,
  235|  6.81M|        n2
  236|  6.81M|    )
  237|  6.81M|}
_RNvNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_646memchr10memchr_raw:
  174|  13.5k|pub(crate) fn memchr_raw(
  175|  13.5k|    n1: u8,
  176|  13.5k|    start: *const u8,
  177|  13.5k|    end: *const u8,
  178|  13.5k|) -> Option<*const u8> {
  179|  13.5k|    // SAFETY: We provide a valid function pointer type.
  180|  13.5k|    unsafe_ifunc!(
  181|  13.5k|        One,
  182|  13.5k|        find_raw,
  183|  13.5k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  13.5k|        Option<*const u8>,
  185|  13.5k|        start,
  186|  13.5k|        end,
  187|  13.5k|        n1
  188|  13.5k|    )
  189|  13.5k|}
_RNvNvNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  13.5k|        unsafe fn find_avx2(
   79|  13.5k|            $($needle: u8),+,
   80|  13.5k|            $hay_start: *const u8,
   81|  13.5k|            $hay_end: *const u8,
   82|  13.5k|        ) -> $retty {
   83|  13.5k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  13.5k|            $memchrty::new_unchecked($($needle),+)
   85|  13.5k|                .$memchrfind($hay_start, $hay_end)
   86|  13.5k|        }
_RNvNvNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  6.81M|        unsafe fn find_avx2(
   79|  6.81M|            $($needle: u8),+,
   80|  6.81M|            $hay_start: *const u8,
   81|  6.81M|            $hay_end: *const u8,
   82|  6.81M|        ) -> $retty {
   83|  6.81M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  6.81M|            $memchrty::new_unchecked($($needle),+)
   85|  6.81M|                .$memchrfind($hay_start, $hay_end)
   86|  6.81M|        }
_RNvNvNtNtNtCsenUNIr1NycQ_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }

_RNvXNtCsenUNIr1NycQ_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  7.29M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  7.29M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  7.29M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  7.29M|    }
_RNvXNtCsenUNIr1NycQ_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|   556k|    fn as_usize(self) -> usize {
   27|   556k|        self as usize
   28|   556k|    }

_RNvMs2_NtCsenUNIr1NycQ_6memchr6memchrNtB5_7Memchr23newCscuJmoqhSOSr_5oxttl:
  377|  6.06M|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  6.06M|        Memchr2 {
  379|  6.06M|            needle1,
  380|  6.06M|            needle2,
  381|  6.06M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  6.06M|        }
  383|  6.06M|    }
_RNvNtCsenUNIr1NycQ_6memchr6memchr11memchr2_rawCscuJmoqhSOSr_5oxttl:
  574|  6.81M|unsafe fn memchr2_raw(
  575|  6.81M|    needle1: u8,
  576|  6.81M|    needle2: u8,
  577|  6.81M|    start: *const u8,
  578|  6.81M|    end: *const u8,
  579|  6.81M|) -> Option<*const u8> {
  580|  6.81M|    #[cfg(target_arch = "x86_64")]
  581|  6.81M|    {
  582|  6.81M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  6.81M|    }
  584|  6.81M|    #[cfg(target_arch = "wasm32")]
  585|  6.81M|    {
  586|  6.81M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  6.81M|    }
  588|  6.81M|    #[cfg(target_arch = "aarch64")]
  589|  6.81M|    {
  590|  6.81M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  6.81M|    }
  592|  6.81M|    #[cfg(not(any(
  593|  6.81M|        target_arch = "x86_64",
  594|  6.81M|        target_arch = "wasm32",
  595|  6.81M|        target_arch = "aarch64"
  596|  6.81M|    )))]
  597|  6.81M|    {
  598|  6.81M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  6.81M|            .find_raw(start, end)
  600|  6.81M|    }
  601|  6.81M|}
_RNvNtCsenUNIr1NycQ_6memchr6memchr12memchr2_iterCscuJmoqhSOSr_5oxttl:
  232|  6.06M|pub fn memchr2_iter<'h>(
  233|  6.06M|    needle1: u8,
  234|  6.06M|    needle2: u8,
  235|  6.06M|    haystack: &'h [u8],
  236|  6.06M|) -> Memchr2<'h> {
  237|  6.06M|    Memchr2::new(needle1, needle2, haystack)
  238|  6.06M|}
_RNvNtCsenUNIr1NycQ_6memchr6memchr6memchrCscuJmoqhSOSr_5oxttl:
   27|  13.5k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  13.5k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  13.5k|    // pointer between start and end.
   30|  13.5k|    unsafe {
   31|  13.5k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  13.5k|        })
   34|  13.5k|    }
   35|  13.5k|}
_RNvNtCsenUNIr1NycQ_6memchr6memchr7memchr2CscuJmoqhSOSr_5oxttl:
   92|   743k|pub fn memchr2(needle1: u8, needle2: u8, haystack: &[u8]) -> Option<usize> {
   93|   743k|    // SAFETY: memchr2_raw, when a match is found, always returns a valid
   94|   743k|    // pointer between start and end.
   95|   743k|    unsafe {
   96|   743k|        generic::search_slice_with_raw(haystack, |start, end| {
   97|       |            memchr2_raw(needle1, needle2, start, end)
   98|   743k|        })
   99|   743k|    }
  100|   743k|}
_RNvXs3_NtCsenUNIr1NycQ_6memchr6memchrNtB5_7Memchr2NtNtNtNtCsjv2Y2xFO4ua_4core4iter6traits8iterator8Iterator4nextCscuJmoqhSOSr_5oxttl:
  390|  6.07M|    fn next(&mut self) -> Option<usize> {
  391|  6.07M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  6.07M|        // pointers returns will fall within the start and end bounds, and this
  393|  6.07M|        // upholds the safety contract of `self.it.next`.
  394|  6.07M|        unsafe {
  395|  6.07M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  6.07M|        }
  397|  6.07M|    }
_RNCNvNtCsenUNIr1NycQ_6memchr6memchr7memchr20CscuJmoqhSOSr_5oxttl:
   96|   743k|        generic::search_slice_with_raw(haystack, |start, end| {
   97|   743k|            memchr2_raw(needle1, needle2, start, end)
   98|   743k|        })
_RNCNvXs3_NtCsenUNIr1NycQ_6memchr6memchrNtB7_7Memchr2NtNtNtNtCsjv2Y2xFO4ua_4core4iter6traits8iterator8Iterator4next0CscuJmoqhSOSr_5oxttl:
  395|  6.07M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNCNvNtCsenUNIr1NycQ_6memchr6memchr6memchr0B5_:
   31|  13.5k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|  13.5k|            memchr_raw(needle, start, end)
   33|  13.5k|        })
_RNvNtCsenUNIr1NycQ_6memchr6memchr10memchr_rawB3_:
  504|  13.5k|unsafe fn memchr_raw(
  505|  13.5k|    needle: u8,
  506|  13.5k|    start: *const u8,
  507|  13.5k|    end: *const u8,
  508|  13.5k|) -> Option<*const u8> {
  509|  13.5k|    #[cfg(target_arch = "x86_64")]
  510|  13.5k|    {
  511|  13.5k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  13.5k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  13.5k|        // time. This function also handles using a fallback if neither AVX2
  514|  13.5k|        // nor SSE2 (unusual) are available.
  515|  13.5k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  13.5k|    }
  517|  13.5k|    #[cfg(target_arch = "wasm32")]
  518|  13.5k|    {
  519|  13.5k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  13.5k|    }
  521|  13.5k|    #[cfg(target_arch = "aarch64")]
  522|  13.5k|    {
  523|  13.5k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  13.5k|    }
  525|  13.5k|    #[cfg(not(any(
  526|  13.5k|        target_arch = "x86_64",
  527|  13.5k|        target_arch = "wasm32",
  528|  13.5k|        target_arch = "aarch64"
  529|  13.5k|    )))]
  530|  13.5k|    {
  531|  13.5k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  13.5k|    }
  533|  13.5k|}

_RNvMNtCsenUNIr1NycQ_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  128|   416k|    fn get_for_offset(self) -> u32 {
  129|   416k|        #[cfg(target_endian = "big")]
  130|   416k|        {
  131|   416k|            self.0.swap_bytes()
  132|   416k|        }
  133|   416k|        #[cfg(target_endian = "little")]
  134|   416k|        {
  135|   416k|            self.0
  136|   416k|        }
  137|   416k|    }
_RNvXs_NtCsenUNIr1NycQ_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  148|  1.87M|    fn has_non_zero(self) -> bool {
  149|  1.87M|        self.0 != 0
  150|  1.87M|    }
_RNvXs_NtCsenUNIr1NycQ_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  173|   416k|    fn first_offset(self) -> usize {
  174|   416k|        // We are dealing with little endian here (and if we aren't, we swap
  175|   416k|        // the bytes so we are in practice), where the most significant byte
  176|   416k|        // is at a higher address. That means the least significant bit that
  177|   416k|        // is set corresponds to the position of our first matching byte.
  178|   416k|        // That position corresponds to the number of zeros after the least
  179|   416k|        // significant bit.
  180|   416k|        self.get_for_offset().trailing_zeros() as usize
  181|   416k|    }
_RNvXNtNtCsenUNIr1NycQ_6memchr6vector7x86sse2NtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  220|   320k|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  221|   320k|            _mm_loadu_si128(data as *const __m128i)
  222|   320k|        }
_RNvXNtNtCsenUNIr1NycQ_6memchr6vector7x86sse2NtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  225|   397k|        unsafe fn movemask(self) -> SensibleMoveMask {
  226|   397k|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  227|   397k|        }
_RNvXNtNtCsenUNIr1NycQ_6memchr6vector7x86sse2NtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  230|   634k|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  231|   634k|            _mm_cmpeq_epi8(self, vector2)
  232|   634k|        }
_RNvYNtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m256iNtNtCsenUNIr1NycQ_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   65|   303k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   66|   303k|        self.movemask().has_non_zero()
   67|   303k|    }
_RNvXNtNtCsenUNIr1NycQ_6memchr6vector7x86avx2NtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  275|  2.31M|        unsafe fn movemask(self) -> SensibleMoveMask {
  276|  2.31M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  277|  2.31M|        }
_RNvXNtNtCsenUNIr1NycQ_6memchr6vector7x86avx2NtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  270|  1.16M|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  271|  1.16M|            _mm256_loadu_si256(data as *const __m256i)
  272|  1.16M|        }
_RNvXNtNtCsenUNIr1NycQ_6memchr6vector7x86avx2NtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  280|  3.51M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  281|  3.51M|            _mm256_cmpeq_epi8(self, vector2)
  282|  3.51M|        }
_RNvXs_NtCsenUNIr1NycQ_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  163|   461k|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  164|   461k|        SensibleMoveMask(self.0 | other.0)
  165|   461k|    }
_RNvXNtNtCsenUNIr1NycQ_6memchr6vector7x86sse2NtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  210|  13.6M|        unsafe fn splat(byte: u8) -> __m128i {
  211|  13.6M|            _mm_set1_epi8(byte as i8)
  212|  13.6M|        }
_RNvXNtNtCsenUNIr1NycQ_6memchr6vector7x86sse2NtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m128iNtB4_6Vector2or:
  240|   314k|        unsafe fn or(self, vector2: Self) -> __m128i {
  241|   314k|            _mm_or_si128(self, vector2)
  242|   314k|        }
_RNvXNtNtCsenUNIr1NycQ_6memchr6vector7x86avx2NtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  260|  13.6M|        unsafe fn splat(byte: u8) -> __m256i {
  261|  13.6M|            _mm256_set1_epi8(byte as i8)
  262|  13.6M|        }
_RNvXNtNtCsenUNIr1NycQ_6memchr6vector7x86avx2NtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  265|   613k|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  266|   613k|            _mm256_load_si256(data as *const __m256i)
  267|   613k|        }
_RNvXNtNtCsenUNIr1NycQ_6memchr6vector7x86avx2NtNtNtCsjv2Y2xFO4ua_4core9core_arch3x867___m256iNtB4_6Vector2or:
  290|  2.05M|        unsafe fn or(self, vector2: Self) -> __m256i {
  291|  2.05M|            _mm256_or_si256(self, vector2)
  292|  2.05M|        }

_RNvMs2_NtCsb5PdA0LJG5h_9once_cell3impINtB5_8OnceCellNtNtCs15NWbik7Z2V_5alloc6string6StringE14is_initializedCsfZga41Oi5MJ_13libfuzzer_sys:
   49|  5.73k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  5.73k|        // An `Acquire` load is enough because that makes all the initialization
   51|  5.73k|        // operations visible to us, and, this being a fast path, weaker
   52|  5.73k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  5.73k|        // `SeqCst` operations on the slow path.
   54|  5.73k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  5.73k|    }

_RNvMs4_NtCsb5PdA0LJG5h_9once_cell4syncINtB5_8OnceCellNtNtCs15NWbik7Z2V_5alloc6string6StringE3getCsfZga41Oi5MJ_13libfuzzer_sys:
  963|  5.73k|        pub fn get(&self) -> Option<&T> {
  964|  5.73k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  5.73k|                None
  969|       |            }
  970|  5.73k|        }

_RNvMCs8Z3Sevypr4T_10oxilangtagINtB2_11LanguageTagReE10into_innerCscuJmoqhSOSr_5oxttl:
   54|  7.05k|    pub fn into_inner(self) -> T {
   55|  7.05k|        self.tag
   56|  7.05k|    }
_RNvMCs8Z3Sevypr4T_10oxilangtagINtB2_11LanguageTagReE5parseCscuJmoqhSOSr_5oxttl:
   41|  10.1k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   42|  10.1k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   43|  7.05k|        Ok(Self { tag, positions })
   44|  10.1k|    }
_RNvXsE_Cs8Z3Sevypr4T_10oxilangtagNtB5_16VoidOutputBufferNtNtCsjv2Y2xFO4ua_4core7default7Default7defaultCscuJmoqhSOSr_5oxttl:
  547|  10.1k|#[derive(Default)]
_RINvCs8Z3Sevypr4T_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECs5bua6W9iSBw_5oxrdf:
  621|  7.79k|fn parse_langtag(
  622|  7.79k|    input: &str,
  623|  7.79k|    output: &mut impl OutputBuffer,
  624|  7.79k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  625|  7.79k|    #[derive(PartialEq, Eq)]
  626|  7.79k|    enum State {
  627|  7.79k|        Start,
  628|  7.79k|        AfterLanguage,
  629|  7.79k|        AfterExtLang,
  630|  7.79k|        AfterScript,
  631|  7.79k|        AfterRegion,
  632|  7.79k|        InExtension { expected: bool },
  633|  7.79k|        InPrivateUse { expected: bool },
  634|  7.79k|    }
  635|  7.79k|
  636|  7.79k|    let mut state = State::Start;
  637|  7.79k|    let mut language_end = 0;
  638|  7.79k|    let mut extlang_end = 0;
  639|  7.79k|    let mut script_end = 0;
  640|  7.79k|    let mut region_end = 0;
  641|  7.79k|    let mut variant_end = 0;
  642|  7.79k|    let mut extension_end = 0;
  643|  7.79k|    let mut extlangs_count = 0;
  644|  14.5k|    for (subtag, end) in SubTagIterator::new(input) {
  645|  14.5k|        if subtag.is_empty() {
  646|      0|            return Err(LanguageTagParseError {
  647|      0|                kind: TagParseErrorKind::EmptySubtag,
  648|      0|            });
  649|  14.5k|        }
  650|  14.5k|        if subtag.len() > 8 {
  651|    354|            return Err(LanguageTagParseError {
  652|    354|                kind: TagParseErrorKind::SubtagTooLong,
  653|    354|            });
  654|  14.2k|        }
  655|  14.2k|        if state == State::Start {
  656|       |            // Primary language
  657|  7.47k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  658|  1.79k|                return Err(LanguageTagParseError {
  659|  1.79k|                    kind: TagParseErrorKind::InvalidLanguage,
  660|  1.79k|                });
  661|  5.67k|            }
  662|  5.67k|            language_end = end;
  663|  5.67k|            output.extend(to_lowercase(subtag));
  664|  5.67k|            if subtag.len() < 4 {
  665|  3.81k|                // extlangs are only allowed for short language tags
  666|  3.81k|                state = State::AfterLanguage;
  667|  3.81k|            } else {
  668|  1.86k|                state = State::AfterExtLang;
  669|  1.86k|            }
  670|  6.74k|        } else if let State::InPrivateUse { .. } = state {
  671|    231|            if !is_alphanumeric(subtag) {
  672|      0|                return Err(LanguageTagParseError {
  673|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  674|      0|                });
  675|    231|            }
  676|    231|            output.push('-');
  677|    231|            output.extend(to_lowercase(subtag));
  678|    231|            state = State::InPrivateUse { expected: false };
  679|  6.51k|        } else if subtag == "x" || subtag == "X" {
  680|       |            // We make sure extension is found
  681|    343|            if let State::InExtension { expected: true } = state {
  682|     48|                return Err(LanguageTagParseError {
  683|     48|                    kind: TagParseErrorKind::EmptyExtension,
  684|     48|                });
  685|    295|            }
  686|    295|            output.push('-');
  687|    295|            output.push('x');
  688|    295|            state = State::InPrivateUse { expected: true };
  689|  6.16k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  690|       |            // We make sure extension is found
  691|  1.91k|            if let State::InExtension { expected: true } = state {
  692|    226|                return Err(LanguageTagParseError {
  693|    226|                    kind: TagParseErrorKind::EmptyExtension,
  694|    226|                });
  695|  1.68k|            }
  696|  1.68k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  697|  1.68k|            output.push('-');
  698|  1.68k|            output.push(extension_tag);
  699|  1.68k|            state = State::InExtension { expected: true };
  700|  4.25k|        } else if let State::InExtension { .. } = state {
  701|  2.07k|            if !is_alphanumeric(subtag) {
  702|      0|                return Err(LanguageTagParseError {
  703|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  704|      0|                });
  705|  2.07k|            }
  706|  2.07k|            extension_end = end;
  707|  2.07k|            output.push('-');
  708|  2.07k|            output.extend(to_lowercase(subtag));
  709|  2.07k|            state = State::InExtension { expected: false };
  710|  2.17k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  711|    304|            extlangs_count += 1;
  712|    304|            if extlangs_count > 3 {
  713|      2|                return Err(LanguageTagParseError {
  714|      2|                    kind: TagParseErrorKind::TooManyExtlangs,
  715|      2|                });
  716|    302|            }
  717|    302|            // valid extlangs
  718|    302|            extlang_end = end;
  719|    302|            output.push('-');
  720|    302|            output.extend(to_lowercase(subtag));
  721|  1.86k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  722|  1.58k|            && subtag.len() == 4
  723|    211|            && is_alphabetic(subtag)
  724|    211|        {
  725|    211|            // Script
  726|    211|            script_end = end;
  727|    211|            output.push('-');
  728|    211|            output.extend(to_uppercase_first(subtag));
  729|    211|            state = State::AfterScript;
  730|  1.65k|        } else if (state == State::AfterLanguage
  731|    618|            || state == State::AfterExtLang
  732|    282|            || state == State::AfterScript)
  733|  1.47k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  734|    765|                || subtag.len() == 3 && is_numeric(subtag))
  735|    706|        {
  736|    706|            // Region
  737|    706|            region_end = end;
  738|    706|            output.push('-');
  739|    706|            output.extend(to_uppercase(subtag));
  740|    706|            state = State::AfterRegion;
  741|    952|        } else if (state == State::AfterLanguage
  742|    370|            || state == State::AfterExtLang
  743|    282|            || state == State::AfterScript
  744|    187|            || state == State::AfterRegion)
  745|    952|            && is_alphanumeric(subtag)
  746|    952|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  747|    266|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  748|    686|        {
  749|    686|            // Variant
  750|    686|            variant_end = end;
  751|    686|            output.push('-');
  752|    686|            output.extend(to_lowercase(subtag));
  753|    686|            state = State::AfterRegion;
  754|    686|        } else {
  755|    266|            return Err(LanguageTagParseError {
  756|    266|                kind: TagParseErrorKind::InvalidSubtag,
  757|    266|            });
  758|       |        }
  759|       |    }
  760|       |
  761|       |    //We make sure we are in a correct final state
  762|  5.10k|    if let State::InExtension { expected: true } = state {
  763|    352|        return Err(LanguageTagParseError {
  764|    352|            kind: TagParseErrorKind::EmptyExtension,
  765|    352|        });
  766|  4.75k|    }
  767|  4.75k|    if let State::InPrivateUse { expected: true } = state {
  768|     88|        return Err(LanguageTagParseError {
  769|     88|            kind: TagParseErrorKind::EmptyPrivateUse,
  770|     88|        });
  771|  4.66k|    }
  772|  4.66k|
  773|  4.66k|    //We make sure we have not skipped anyone
  774|  4.66k|    if extlang_end < language_end {
  775|  4.37k|        extlang_end = language_end;
  776|  4.37k|    }
  777|  4.66k|    if script_end < extlang_end {
  778|  4.54k|        script_end = extlang_end;
  779|  4.54k|    }
  780|  4.66k|    if region_end < script_end {
  781|  4.08k|        region_end = script_end;
  782|  4.08k|    }
  783|  4.66k|    if variant_end < region_end {
  784|  3.99k|        variant_end = region_end;
  785|  3.99k|    }
  786|  4.66k|    if extension_end < variant_end {
  787|  3.66k|        extension_end = variant_end;
  788|  3.66k|    }
  789|       |
  790|  4.66k|    Ok(TagElementsPositions {
  791|  4.66k|        language_end,
  792|  4.66k|        extlang_end,
  793|  4.66k|        script_end,
  794|  4.66k|        region_end,
  795|  4.66k|        variant_end,
  796|  4.66k|        extension_end,
  797|  4.66k|    })
  798|  7.79k|}
_RINvCs8Z3Sevypr4T_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECs5bua6W9iSBw_5oxrdf:
  576|  10.1k|fn parse_language_tag(
  577|  10.1k|    input: &str,
  578|  10.1k|    output: &mut impl OutputBuffer,
  579|  10.1k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  580|       |    //grandfathered tags
  581|  10.1k|    if let Some(tag) = GRANDFATHEREDS
  582|  10.1k|        .iter()
  583|  10.1k|        .find(|record| record.eq_ignore_ascii_case(input))
  584|       |    {
  585|      0|        output.push_str(tag);
  586|      0|        Ok(TagElementsPositions {
  587|      0|            language_end: tag.len(),
  588|      0|            extlang_end: tag.len(),
  589|      0|            script_end: tag.len(),
  590|      0|            region_end: tag.len(),
  591|      0|            variant_end: tag.len(),
  592|      0|            extension_end: tag.len(),
  593|      0|        })
  594|  10.1k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  595|       |        // private use
  596|  2.38k|        if !is_alphanumeric_or_dash(input) {
  597|      0|            Err(LanguageTagParseError {
  598|      0|                kind: TagParseErrorKind::ForbiddenChar,
  599|      0|            })
  600|  2.38k|        } else if input.len() == 2 {
  601|      0|            Err(LanguageTagParseError {
  602|      0|                kind: TagParseErrorKind::EmptyPrivateUse,
  603|      0|            })
  604|       |        } else {
  605|  2.38k|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  606|  2.38k|            Ok(TagElementsPositions {
  607|  2.38k|                language_end: input.len(),
  608|  2.38k|                extlang_end: input.len(),
  609|  2.38k|                script_end: input.len(),
  610|  2.38k|                region_end: input.len(),
  611|  2.38k|                variant_end: input.len(),
  612|  2.38k|                extension_end: input.len(),
  613|  2.38k|            })
  614|       |        }
  615|       |    } else {
  616|  7.79k|        parse_langtag(input, output)
  617|       |    }
  618|  10.1k|}
_RINvXsr_Cs8Z3Sevypr4T_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsjv2Y2xFO4ua_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECs5bua6W9iSBw_5oxrdf:
  560|  2.38k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Cs8Z3Sevypr4T_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsjv2Y2xFO4ua_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECs5bua6W9iSBw_5oxrdf:
  560|  8.97k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Cs8Z3Sevypr4T_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsjv2Y2xFO4ua_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECs5bua6W9iSBw_5oxrdf:
  560|    706|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Cs8Z3Sevypr4T_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsjv2Y2xFO4ua_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECs5bua6W9iSBw_5oxrdf:
  560|    211|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCs8Z3Sevypr4T_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0Cs5bua6W9iSBw_5oxrdf:
  583|   264k|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvCs8Z3Sevypr4T_10oxilangtag10is_numericCs5bua6W9iSBw_5oxrdf:
  865|    236|fn is_numeric(s: &str) -> bool {
  866|    236|    s.chars().all(|x| x.is_ascii_digit())
  867|    236|}
_RNvCs8Z3Sevypr4T_10oxilangtag12to_lowercaseCs5bua6W9iSBw_5oxrdf:
  892|  8.97k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  893|  8.97k|    s.chars().map(|c| c.to_ascii_lowercase())
  894|  8.97k|}
_RNvCs8Z3Sevypr4T_10oxilangtag12to_uppercaseCs5bua6W9iSBw_5oxrdf:
  880|    706|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  881|    706|    s.chars().map(|c| c.to_ascii_uppercase())
  882|    706|}
_RNvCs8Z3Sevypr4T_10oxilangtag13is_alphabeticCs5bua6W9iSBw_5oxrdf:
  860|  7.58k|fn is_alphabetic(s: &str) -> bool {
  861|  7.58k|    s.chars().all(|x| x.is_ascii_alphabetic())
  862|  7.58k|}
_RNvCs8Z3Sevypr4T_10oxilangtag15is_alphanumericCs5bua6W9iSBw_5oxrdf:
  870|  5.17k|fn is_alphanumeric(s: &str) -> bool {
  871|  5.17k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  872|  5.17k|}
_RNvCs8Z3Sevypr4T_10oxilangtag18to_uppercase_firstCs5bua6W9iSBw_5oxrdf:
  886|    211|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  887|    211|    let mut chars = s.chars();
  888|    211|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  889|    211|}
_RNvCs8Z3Sevypr4T_10oxilangtag23is_alphanumeric_or_dashCs5bua6W9iSBw_5oxrdf:
  875|  2.38k|fn is_alphanumeric_or_dash(s: &str) -> bool {
  876|  2.38k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  877|  2.38k|}
_RNvMsv_Cs8Z3Sevypr4T_10oxilangtagNtB5_14SubTagIterator3newCs5bua6W9iSBw_5oxrdf:
  839|  7.79k|    fn new(input: &'a str) -> Self {
  840|  7.79k|        Self {
  841|  7.79k|            split: input.split('-'),
  842|  7.79k|            position: 0,
  843|  7.79k|        }
  844|  7.79k|    }
_RNvXs_NvCs8Z3Sevypr4T_10oxilangtag13parse_langtagNtB4_5StateNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqCs5bua6W9iSBw_5oxrdf:
  625|  23.2k|    #[derive(PartialEq, Eq)]
_RNvXsq_Cs8Z3Sevypr4T_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCs5bua6W9iSBw_5oxrdf:
  552|  8.18k|    fn push(&mut self, _: char) {}
_RNvXsw_Cs8Z3Sevypr4T_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCsjv2Y2xFO4ua_4core4iter6traits8iterator8Iterator4nextCs5bua6W9iSBw_5oxrdf:
  851|  19.6k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  852|  19.6k|        let tag = self.split.next()?;
  853|  14.5k|        let tag_end = self.position + tag.len();
  854|  14.5k|        self.position = tag_end + 1;
  855|  14.5k|        Some((tag, tag_end))
  856|  19.6k|    }
_RNvXso_Cs8Z3Sevypr4T_10oxilangtagNtB5_21LanguageTagParseErrorNtNtCsjv2Y2xFO4ua_4core3fmt7Display3fmt:
  482|  3.12k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  483|  3.12k|        match self.kind {
  484|       |            TagParseErrorKind::EmptyExtension => {
  485|    626|                write!(f, "If an extension subtag is present, it must not be empty")
  486|       |            }
  487|       |            TagParseErrorKind::EmptyPrivateUse => {
  488|     88|                write!(f, "If the `x` subtag is present, it must not be empty")
  489|       |            }
  490|       |            TagParseErrorKind::ForbiddenChar => {
  491|      0|                write!(f, "The langtag contains a char not allowed")
  492|       |            }
  493|    266|            TagParseErrorKind::InvalidSubtag => write!(
  494|    266|                f,
  495|    266|                "A subtag fails to parse, it does not match any other subtags"
  496|    266|            ),
  497|  1.79k|            TagParseErrorKind::InvalidLanguage => write!(f, "The given language subtag is invalid"),
  498|       |            TagParseErrorKind::SubtagTooLong => {
  499|    354|                write!(f, "A subtag may be eight characters in length at maximum")
  500|       |            }
  501|      0|            TagParseErrorKind::EmptySubtag => write!(f, "A subtag should not be empty"),
  502|       |            TagParseErrorKind::TooManyExtlangs => {
  503|      2|                write!(f, "At maximum three extlangs are allowed")
  504|       |            }
  505|       |        }
  506|  3.12k|    }
_RNCNvCs8Z3Sevypr4T_10oxilangtag13is_alphabetic0B3_:
  861|  22.7k|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCs8Z3Sevypr4T_10oxilangtag10is_numeric0B3_:
  866|    236|    s.chars().all(|x| x.is_ascii_digit())
_RNCNvCs8Z3Sevypr4T_10oxilangtag15is_alphanumeric0B3_:
  871|  14.0k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNCNvCs8Z3Sevypr4T_10oxilangtag23is_alphanumeric_or_dash0B3_:
  876|  47.3k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')

_RNvXsZ_Csh8sWMiPH21C_5oxiriNtNtCs15NWbik7Z2V_5alloc6string6StringNtB5_12OutputBuffer3lenCscuJmoqhSOSr_5oxttl:
 1137|   438k|    fn len(&self) -> usize {
 1138|   438k|        self.len()
 1139|   438k|    }
_RNvXsZ_Csh8sWMiPH21C_5oxiriNtNtCs15NWbik7Z2V_5alloc6string6StringNtB5_12OutputBuffer4pushCscuJmoqhSOSr_5oxttl:
 1117|  1.55M|    fn push(&mut self, c: char) {
 1118|  1.55M|        self.push(c);
 1119|  1.55M|    }
_RNvXsZ_Csh8sWMiPH21C_5oxiriNtNtCs15NWbik7Z2V_5alloc6string6StringNtB5_12OutputBuffer5clearCscuJmoqhSOSr_5oxttl:
 1127|  15.2k|    fn clear(&mut self) {
 1128|  15.2k|        self.clear();
 1129|  15.2k|    }
_RNvXsZ_Csh8sWMiPH21C_5oxiriNtNtCs15NWbik7Z2V_5alloc6string6StringNtB5_12OutputBuffer6as_strCscuJmoqhSOSr_5oxttl:
 1142|   572k|    fn as_str(&self) -> &str {
 1143|   572k|        self.as_str()
 1144|   572k|    }
_RNvXsZ_Csh8sWMiPH21C_5oxiriNtNtCs15NWbik7Z2V_5alloc6string6StringNtB5_12OutputBuffer8push_strCscuJmoqhSOSr_5oxttl:
 1122|   211k|    fn push_str(&mut self, s: &str) {
 1123|   211k|        self.push_str(s);
 1124|   211k|    }
_RNvXsZ_Csh8sWMiPH21C_5oxiriNtNtCs15NWbik7Z2V_5alloc6string6StringNtB5_12OutputBuffer8truncateCscuJmoqhSOSr_5oxttl:
 1132|   190k|    fn truncate(&mut self, new_len: usize) {
 1133|   190k|        self.truncate(new_len);
 1134|   190k|    }
_RINvMs11_Csh8sWMiPH21C_5oxiriINtB7_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb0_E11parse_erroruECscuJmoqhSOSr_5oxttl:
 1567|  24.3k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1568|  24.3k|        Err(IriParseError { kind })
 1569|  24.3k|    }
_RINvMs11_Csh8sWMiPH21C_5oxiriINtB7_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb1_E11parse_erroruECscuJmoqhSOSr_5oxttl:
 1567|  1.21k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1568|  1.21k|        Err(IriParseError { kind })
 1569|  1.21k|    }
_RNCNvMs11_Csh8sWMiPH21C_5oxiriINtB8_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb0_E10read_echar0CscuJmoqhSOSr_5oxttl:
 1550|  2.95k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_Csh8sWMiPH21C_5oxiriINtB8_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb0_E10read_echars_0CscuJmoqhSOSr_5oxttl:
 1551|  2.00k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMCsh8sWMiPH21C_5oxiriINtB2_6IriRefNtNtCs15NWbik7Z2V_5alloc6string6StringE15parse_uncheckedCscuJmoqhSOSr_5oxttl:
   71|  2.67k|    pub fn parse_unchecked(iri: T) -> Result<Self, IriParseError> {
   72|  2.67k|        let positions = IriParser::<_, true>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   73|  2.67k|        Ok(Self { iri, positions })
   74|  2.67k|    }
_RNvMCsh8sWMiPH21C_5oxiriINtB2_6IriRefNtNtCs15NWbik7Z2V_5alloc6string6StringE17resolve_uncheckedCscuJmoqhSOSr_5oxttl:
  108|  75.0k|    pub fn resolve_unchecked(&self, iri: &str) -> Result<IriRef<String>, IriParseError> {
  109|  75.0k|        let mut target_buffer = String::with_capacity(self.iri.len() + iri.len());
  110|  75.0k|        let positions = IriParser::<_, true>::parse(iri, Some(self.as_ref()), &mut target_buffer)?;
  111|  73.7k|        Ok(IriRef {
  112|  73.7k|            iri: target_buffer,
  113|  73.7k|            positions,
  114|  73.7k|        })
  115|  75.0k|    }
_RNvMCsh8sWMiPH21C_5oxiriINtB2_6IriRefNtNtCs15NWbik7Z2V_5alloc6string6StringE6as_refCscuJmoqhSOSr_5oxttl:
  160|   225k|    pub fn as_ref(&self) -> IriRef<&str> {
  161|   225k|        IriRef {
  162|   225k|            iri: &self.iri,
  163|   225k|            positions: self.positions,
  164|   225k|        }
  165|   225k|    }
_RNvMCsh8sWMiPH21C_5oxiriINtB2_6IriRefNtNtCs15NWbik7Z2V_5alloc6string6StringE7resolveCscuJmoqhSOSr_5oxttl:
   89|   150k|    pub fn resolve(&self, iri: &str) -> Result<IriRef<String>, IriParseError> {
   90|   150k|        let mut target_buffer = String::with_capacity(self.iri.len() + iri.len());
   91|   150k|        let positions = IriParser::<_, false>::parse(iri, Some(self.as_ref()), &mut target_buffer)?;
   92|   125k|        Ok(IriRef {
   93|   125k|            iri: target_buffer,
   94|   125k|            positions,
   95|   125k|        })
   96|   150k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_hostCscuJmoqhSOSr_5oxttl:
 1366|  2.17k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|  2.17k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|      0|            let start_position = self.input.position;
 1370|      0|            while let Some(c) = self.input.next() {
 1371|      0|                self.output.push(c);
 1372|      0|                if c == ']' {
 1373|      0|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|      0|                    if !UNCHECKED {
 1375|      0|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|      0|                        }
 1378|      0|                    }
 1379|       |
 1380|      0|                    let c = self.input.next();
 1381|      0|                    return match c {
 1382|       |                        Some(':') => {
 1383|      0|                            self.output.push(':');
 1384|      0|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|      0|                            self.output_positions.authority_end = self.output.len();
 1388|      0|                            self.parse_path_start(c)
 1389|       |                        }
 1390|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|      0|                }
 1393|       |            }
 1394|      0|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|  20.6k|            loop {
 1398|  20.6k|                let c = self.input.next();
 1399|  20.6k|                match c {
 1400|       |                    Some(':') => {
 1401|     21|                        self.output.push(':');
 1402|     21|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|  2.15k|                        self.output_positions.authority_end = self.output.len();
 1406|  2.15k|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|  18.5k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|  2.17k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_pathCscuJmoqhSOSr_5oxttl:
 1457|  2.16k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|  26.2k|        loop {
 1459|  26.2k|            let c = self.input.next();
 1460|  26.2k|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|  2.44k|                    if self.output.as_str().ends_with("/..") {
 1463|      0|                        self.remove_last_segment();
 1464|      0|                        self.remove_last_segment();
 1465|      0|                        self.output.push('/');
 1466|  2.44k|                    } else if self.output.as_str().ends_with("/.") {
 1467|      0|                        self.remove_last_segment();
 1468|      0|                        self.output.push('/');
 1469|  2.44k|                    } else if c == Some('/') {
 1470|    274|                        self.output.push('/');
 1471|  2.16k|                    }
 1472|       |
 1473|  2.44k|                    if c == Some('?') {
 1474|    560|                        self.output_positions.path_end = self.output.len();
 1475|    560|                        self.output.push('?');
 1476|    560|                        return self.parse_query();
 1477|  1.88k|                    } else if c == Some('#') {
 1478|    278|                        self.output_positions.path_end = self.output.len();
 1479|    278|                        self.output_positions.query_end = self.output.len();
 1480|    278|                        self.output.push('#');
 1481|    278|                        return self.parse_fragment();
 1482|  1.60k|                    } else if c.is_none() {
 1483|  1.33k|                        self.output_positions.path_end = self.output.len();
 1484|  1.33k|                        self.output_positions.query_end = self.output.len();
 1485|  1.33k|                        return Ok(());
 1486|    274|                    }
 1487|       |                }
 1488|  23.7k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|  2.16k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_portCscuJmoqhSOSr_5oxttl:
 1414|     21|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|     21|        loop {
 1416|     21|            let c = self.input.next();
 1417|     21|            match c {
 1418|     21|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|     21|                    self.output_positions.authority_end = self.output.len();
 1421|     21|                    return self.parse_path_start(c);
 1422|       |                }
 1423|      0|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|     21|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E11parse_queryCscuJmoqhSOSr_5oxttl:
 1493|    620|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|  10.0k|        while let Some(c) = self.input.next() {
 1495|  9.48k|            if c == '#' {
 1496|     70|                self.output_positions.query_end = self.output.len();
 1497|     70|                self.output.push('#');
 1498|     70|                return self.parse_fragment();
 1499|       |            } else {
 1500|  9.41k|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|    550|        self.output_positions.query_end = self.output.len();
 1504|    550|        Ok(())
 1505|    620|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E12parse_schemeCscuJmoqhSOSr_5oxttl:
 1220|  2.67k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|  13.4k|        loop {
 1222|  13.4k|            let c = self.input.next();
 1223|  13.4k|            match c {
 1224|  13.4k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|  10.7k|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|  2.67k|                    self.output.push(':');
 1229|  2.67k|                    self.output_positions.scheme_end = self.output.len();
 1230|  2.67k|                    self.input_scheme_end = self.input.position;
 1231|  2.67k|                    return if self.input.starts_with('/') {
 1232|  2.25k|                        self.input.next();
 1233|  2.25k|                        self.output.push('/');
 1234|  2.25k|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|    418|                        self.output_positions.authority_end = self.output.len();
 1237|    418|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|      0|                    self.input = ParserInput {
 1242|      0|                        value: self.iri.chars(),
 1243|      0|                        position: 0,
 1244|      0|                    }; // reset
 1245|      0|                    self.output.clear();
 1246|      0|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|  2.67k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E14parse_fragmentCscuJmoqhSOSr_5oxttl:
 1507|    368|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|  4.22k|        while let Some(c) = self.input.next() {
 1509|  3.85k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|    368|        Ok(())
 1512|    368|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E15parse_authorityCscuJmoqhSOSr_5oxttl:
 1342|  2.17k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|  20.9k|        loop {
 1345|  20.9k|            let c = self.input.next();
 1346|  20.9k|            match c {
 1347|       |                Some('@') => {
 1348|     18|                    self.output.push('@');
 1349|     18|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|  2.15k|                    self.input = ParserInput {
 1353|  2.15k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|  2.15k|                        position: self.input_scheme_end + 2,
 1355|  2.15k|                    };
 1356|  2.15k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|  2.15k|                    return self.parse_host();
 1358|       |                }
 1359|  18.7k|                Some(c) => {
 1360|  18.7k|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|  2.17k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E16parse_path_startCscuJmoqhSOSr_5oxttl:
 1428|  2.17k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|  2.17k|        match c {
 1430|       |            None => {
 1431|    422|                self.output_positions.path_end = self.output.len();
 1432|    422|                self.output_positions.query_end = self.output.len();
 1433|    422|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|     60|                self.output_positions.path_end = self.output.len();
 1437|     60|                self.output.push('?');
 1438|     60|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|     20|                self.output_positions.path_end = self.output.len();
 1442|     20|                self.output_positions.query_end = self.output.len();
 1443|     20|                self.output.push('#');
 1444|     20|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|  1.66k|                self.output.push('/');
 1448|  1.66k|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|  2.17k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E18parse_scheme_startCscuJmoqhSOSr_5oxttl:
 1212|  2.67k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|  2.67k|        match self.input.front() {
 1214|      0|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|  2.67k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|      0|            _ => self.parse_relative(),
 1217|       |        }
 1218|  2.67k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E23parse_path_or_authorityCscuJmoqhSOSr_5oxttl:
 1252|  2.25k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|  2.25k|        if self.input.starts_with('/') {
 1254|  2.17k|            self.input.next();
 1255|  2.17k|            self.output.push('/');
 1256|  2.17k|            self.parse_authority()
 1257|       |        } else {
 1258|     81|            self.output_positions.authority_end = self.output.len() - 1;
 1259|     81|            self.parse_path()
 1260|       |        }
 1261|  2.25k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E27read_url_codepoint_or_echarCscuJmoqhSOSr_5oxttl:
 1523|  64.9k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|  64.9k|        if UNCHECKED || is_url_code_point(c) {
 1525|  64.9k|            self.output.push(c);
 1526|  64.9k|            Ok(())
 1527|      0|        } else if c == '%' {
 1528|      0|            self.read_echar()
 1529|       |        } else {
 1530|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|  64.9k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E33read_url_query_codepoint_or_echarCscuJmoqhSOSr_5oxttl:
 1535|  9.41k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|  9.41k|        if UNCHECKED || is_url_query_code_point(c) {
 1537|  9.41k|            self.output.push(c);
 1538|  9.41k|            Ok(())
 1539|      0|        } else if c == '%' {
 1540|      0|            self.read_echar()
 1541|       |        } else {
 1542|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|  9.41k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E5parseCscuJmoqhSOSr_5oxttl:
 1187|  2.67k|    fn parse(
 1188|  2.67k|        iri: &'a str,
 1189|  2.67k|        base: Option<IriRef<&'a str>>,
 1190|  2.67k|        output: &'a mut O,
 1191|  2.67k|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|  2.67k|        let mut parser = Self {
 1193|  2.67k|            iri,
 1194|  2.67k|            base,
 1195|  2.67k|            input: ParserInput {
 1196|  2.67k|                value: iri.chars(),
 1197|  2.67k|                position: 0,
 1198|  2.67k|            },
 1199|  2.67k|            output,
 1200|  2.67k|            output_positions: IriElementsPositions {
 1201|  2.67k|                scheme_end: 0,
 1202|  2.67k|                authority_end: 0,
 1203|  2.67k|                path_end: 0,
 1204|  2.67k|                query_end: 0,
 1205|  2.67k|            },
 1206|  2.67k|            input_scheme_end: 0,
 1207|  2.67k|        };
 1208|  2.67k|        parser.parse_scheme_start()?;
 1209|  2.67k|        Ok(parser.output_positions)
 1210|  2.67k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb0_E10parse_hostCscuJmoqhSOSr_5oxttl:
 1366|  5.23k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|  5.23k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|    988|            let start_position = self.input.position;
 1370|  38.5k|            while let Some(c) = self.input.next() {
 1371|  38.1k|                self.output.push(c);
 1372|  38.1k|                if c == ']' {
 1373|    538|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|    538|                    if !UNCHECKED {
 1375|    538|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|    538|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|      0|                        }
 1378|      0|                    }
 1379|       |
 1380|      0|                    let c = self.input.next();
 1381|      0|                    return match c {
 1382|       |                        Some(':') => {
 1383|      0|                            self.output.push(':');
 1384|      0|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|      0|                            self.output_positions.authority_end = self.output.len();
 1388|      0|                            self.parse_path_start(c)
 1389|       |                        }
 1390|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|  37.5k|                }
 1393|       |            }
 1394|    450|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|  52.5k|            loop {
 1398|  52.5k|                let c = self.input.next();
 1399|  52.5k|                match c {
 1400|       |                    Some(':') => {
 1401|  1.40k|                        self.output.push(':');
 1402|  1.40k|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|  2.63k|                        self.output_positions.authority_end = self.output.len();
 1406|  2.63k|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|  48.5k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|  5.23k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb0_E10parse_pathCscuJmoqhSOSr_5oxttl:
 1457|   127k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|   411k|        loop {
 1459|   411k|            let c = self.input.next();
 1460|   411k|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|   121k|                    if self.output.as_str().ends_with("/..") {
 1463|    532|                        self.remove_last_segment();
 1464|    532|                        self.remove_last_segment();
 1465|    532|                        self.output.push('/');
 1466|   120k|                    } else if self.output.as_str().ends_with("/.") {
 1467|  88.1k|                        self.remove_last_segment();
 1468|  88.1k|                        self.output.push('/');
 1469|  88.1k|                    } else if c == Some('/') {
 1470|  8.51k|                        self.output.push('/');
 1471|  23.9k|                    }
 1472|       |
 1473|   121k|                    if c == Some('?') {
 1474|  2.21k|                        self.output_positions.path_end = self.output.len();
 1475|  2.21k|                        self.output.push('?');
 1476|  2.21k|                        return self.parse_query();
 1477|   118k|                    } else if c == Some('#') {
 1478|  1.45k|                        self.output_positions.path_end = self.output.len();
 1479|  1.45k|                        self.output_positions.query_end = self.output.len();
 1480|  1.45k|                        self.output.push('#');
 1481|  1.45k|                        return self.parse_fragment();
 1482|   117k|                    } else if c.is_none() {
 1483|   108k|                        self.output_positions.path_end = self.output.len();
 1484|   108k|                        self.output_positions.query_end = self.output.len();
 1485|   108k|                        return Ok(());
 1486|  8.68k|                    }
 1487|       |                }
 1488|   290k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|   127k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb0_E10parse_portCscuJmoqhSOSr_5oxttl:
 1414|  1.40k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|  2.72k|        loop {
 1416|  2.72k|            let c = self.input.next();
 1417|  2.38k|            match c {
 1418|  2.38k|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|  1.21k|                    self.output_positions.authority_end = self.output.len();
 1421|  1.21k|                    return self.parse_path_start(c);
 1422|       |                }
 1423|    182|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|  1.40k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb0_E10read_echarCscuJmoqhSOSr_5oxttl:
 1547|  3.26k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1548|  3.26k|        let c1 = self.input.next();
 1549|  3.26k|        let c2 = self.input.next();
 1550|  3.26k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1551|  2.00k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1552|       |        {
 1553|  1.89k|            self.output.push('%');
 1554|  1.89k|            self.output.push(c1.unwrap());
 1555|  1.89k|            self.output.push(c2.unwrap());
 1556|  1.89k|            Ok(())
 1557|       |        } else {
 1558|  1.37k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1559|  1.37k|                Some('%'),
 1560|  1.37k|                c1,
 1561|  1.37k|                c2,
 1562|  1.37k|            ]))
 1563|       |        }
 1564|  3.26k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb0_E11parse_queryCscuJmoqhSOSr_5oxttl:
 1493|  7.32k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|  73.4k|        while let Some(c) = self.input.next() {
 1495|  69.0k|            if c == '#' {
 1496|    660|                self.output_positions.query_end = self.output.len();
 1497|    660|                self.output.push('#');
 1498|    660|                return self.parse_fragment();
 1499|       |            } else {
 1500|  68.3k|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|  4.40k|        self.output_positions.query_end = self.output.len();
 1504|  4.40k|        Ok(())
 1505|  7.32k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb0_E12parse_schemeCscuJmoqhSOSr_5oxttl:
 1220|  19.1k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|   105k|        loop {
 1222|   105k|            let c = self.input.next();
 1223|   103k|            match c {
 1224|   103k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|  86.3k|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|  8.94k|                    self.output.push(':');
 1229|  8.94k|                    self.output_positions.scheme_end = self.output.len();
 1230|  8.94k|                    self.input_scheme_end = self.input.position;
 1231|  8.94k|                    return if self.input.starts_with('/') {
 1232|  4.43k|                        self.input.next();
 1233|  4.43k|                        self.output.push('/');
 1234|  4.43k|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|  4.50k|                        self.output_positions.authority_end = self.output.len();
 1237|  4.50k|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|  10.1k|                    self.input = ParserInput {
 1242|  10.1k|                        value: self.iri.chars(),
 1243|  10.1k|                        position: 0,
 1244|  10.1k|                    }; // reset
 1245|  10.1k|                    self.output.clear();
 1246|  10.1k|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|  19.1k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb0_E14parse_fragmentCscuJmoqhSOSr_5oxttl:
 1507|  2.99k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|  21.4k|        while let Some(c) = self.input.next() {
 1509|  20.2k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|  1.26k|        Ok(())
 1512|  2.99k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb0_E14parse_relativeCscuJmoqhSOSr_5oxttl:
 1263|   140k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1264|   140k|        if let Some(base) = self.base {
 1265|   140k|            match self.input.front() {
 1266|       |                None => {
 1267|  9.24k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1268|  9.24k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1269|  9.24k|                    self.output_positions.authority_end = base.positions.authority_end;
 1270|  9.24k|                    self.output_positions.path_end = base.positions.path_end;
 1271|  9.24k|                    self.output_positions.query_end = base.positions.query_end;
 1272|  9.24k|                    Ok(())
 1273|       |                }
 1274|       |                Some('/') => {
 1275|  97.9k|                    self.input.next();
 1276|  97.9k|                    self.parse_relative_slash(&base)
 1277|       |                }
 1278|       |                Some('?') => {
 1279|  4.90k|                    self.input.next();
 1280|  4.90k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1281|  4.90k|                    self.output.push('?');
 1282|  4.90k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1283|  4.90k|                    self.output_positions.authority_end = base.positions.authority_end;
 1284|  4.90k|                    self.output_positions.path_end = base.positions.path_end;
 1285|  4.90k|                    self.parse_query()
 1286|       |                }
 1287|       |                Some('#') => {
 1288|    686|                    self.input.next();
 1289|    686|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1290|    686|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1291|    686|                    self.output_positions.authority_end = base.positions.authority_end;
 1292|    686|                    self.output_positions.path_end = base.positions.path_end;
 1293|    686|                    self.output_positions.query_end = base.positions.query_end;
 1294|    686|                    self.output.push('#');
 1295|    686|                    self.parse_fragment()
 1296|       |                }
 1297|       |                _ => {
 1298|  28.0k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1299|  28.0k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1300|  28.0k|                    self.output_positions.authority_end = base.positions.authority_end;
 1301|  28.0k|                    self.output_positions.path_end = base.positions.path_end;
 1302|  28.0k|                    self.remove_last_segment();
 1303|  28.0k|                    if self.output.len() > base.positions.scheme_end {
 1304|  27.2k|                        // We have some path or authority, we keep a base '/'
 1305|  27.2k|                        self.output.push('/');
 1306|  27.2k|                    }
 1307|  28.0k|                    self.parse_path()
 1308|       |                }
 1309|       |            }
 1310|       |        } else {
 1311|      0|            self.output_positions.scheme_end = 0;
 1312|      0|            self.input_scheme_end = 0;
 1313|      0|            if self.input.starts_with('/') {
 1314|      0|                self.input.next();
 1315|      0|                self.output.push('/');
 1316|      0|                self.parse_path_or_authority()
 1317|       |            } else {
 1318|      0|                self.output_positions.authority_end = 0;
 1319|      0|                self.parse_path()
 1320|       |            }
 1321|       |        }
 1322|   140k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb0_E15parse_authorityCscuJmoqhSOSr_5oxttl:
 1342|  9.03k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|   123k|        loop {
 1345|   123k|            let c = self.input.next();
 1346|   123k|            match c {
 1347|       |                Some('@') => {
 1348|    304|                    self.output.push('@');
 1349|    304|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|  4.92k|                    self.input = ParserInput {
 1353|  4.92k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|  4.92k|                        position: self.input_scheme_end + 2,
 1355|  4.92k|                    };
 1356|  4.92k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|  4.92k|                    return self.parse_host();
 1358|       |                }
 1359|   118k|                Some(c) => {
 1360|   118k|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|  9.03k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb0_E16parse_path_startCscuJmoqhSOSr_5oxttl:
 1428|  3.84k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|  3.84k|        match c {
 1430|       |            None => {
 1431|  2.26k|                self.output_positions.path_end = self.output.len();
 1432|  2.26k|                self.output_positions.query_end = self.output.len();
 1433|  2.26k|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|    198|                self.output_positions.path_end = self.output.len();
 1437|    198|                self.output.push('?');
 1438|    198|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|    192|                self.output_positions.path_end = self.output.len();
 1442|    192|                self.output_positions.query_end = self.output.len();
 1443|    192|                self.output.push('#');
 1444|    192|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|  1.19k|                self.output.push('/');
 1448|  1.19k|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|  3.84k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb0_E18parse_scheme_startCscuJmoqhSOSr_5oxttl:
 1212|   150k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|   150k|        match self.input.front() {
 1214|    516|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|   140k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|   130k|            _ => self.parse_relative(),
 1217|       |        }
 1218|   150k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb0_E19remove_last_segmentCscuJmoqhSOSr_5oxttl:
 1514|   117k|    fn remove_last_segment(&mut self) {
 1515|   117k|        let last_slash_position = self.output.as_str()[self.output_positions.authority_end..]
 1516|   117k|            .rfind('/')
 1517|   117k|            .unwrap_or(0);
 1518|   117k|        self.output
 1519|   117k|            .truncate(last_slash_position + self.output_positions.authority_end)
 1520|   117k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb0_E20parse_relative_slashCscuJmoqhSOSr_5oxttl:
 1324|  97.9k|    fn parse_relative_slash(&mut self, base: &IriRef<&'a str>) -> Result<(), IriParseError> {
 1325|  97.9k|        if self.input.starts_with('/') {
 1326|  4.96k|            self.input.next();
 1327|  4.96k|            self.output.push_str(&base.iri[..base.positions.scheme_end]);
 1328|  4.96k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1329|  4.96k|            self.output.push('/');
 1330|  4.96k|            self.output.push('/');
 1331|  4.96k|            self.parse_authority()
 1332|       |        } else {
 1333|  92.9k|            self.output
 1334|  92.9k|                .push_str(&base.iri[..base.positions.authority_end]);
 1335|  92.9k|            self.output.push('/');
 1336|  92.9k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1337|  92.9k|            self.output_positions.authority_end = base.positions.authority_end;
 1338|  92.9k|            self.parse_path()
 1339|       |        }
 1340|  97.9k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb0_E23parse_path_or_authorityCscuJmoqhSOSr_5oxttl:
 1252|  4.43k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|  4.43k|        if self.input.starts_with('/') {
 1254|  4.07k|            self.input.next();
 1255|  4.07k|            self.output.push('/');
 1256|  4.07k|            self.parse_authority()
 1257|       |        } else {
 1258|    368|            self.output_positions.authority_end = self.output.len() - 1;
 1259|    368|            self.parse_path()
 1260|       |        }
 1261|  4.43k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb0_E27read_url_codepoint_or_echarCscuJmoqhSOSr_5oxttl:
 1523|   477k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|   477k|        if UNCHECKED || is_url_code_point(c) {
 1525|   455k|            self.output.push(c);
 1526|   455k|            Ok(())
 1527|  21.5k|        } else if c == '%' {
 1528|  2.15k|            self.read_echar()
 1529|       |        } else {
 1530|  19.4k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|   477k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb0_E33read_url_query_codepoint_or_echarCscuJmoqhSOSr_5oxttl:
 1535|  68.3k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|  68.3k|        if UNCHECKED || is_url_query_code_point(c) {
 1537|  65.3k|            self.output.push(c);
 1538|  65.3k|            Ok(())
 1539|  2.98k|        } else if c == '%' {
 1540|  1.10k|            self.read_echar()
 1541|       |        } else {
 1542|  1.88k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|  68.3k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb0_E5parseCscuJmoqhSOSr_5oxttl:
 1187|   150k|    fn parse(
 1188|   150k|        iri: &'a str,
 1189|   150k|        base: Option<IriRef<&'a str>>,
 1190|   150k|        output: &'a mut O,
 1191|   150k|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|   150k|        let mut parser = Self {
 1193|   150k|            iri,
 1194|   150k|            base,
 1195|   150k|            input: ParserInput {
 1196|   150k|                value: iri.chars(),
 1197|   150k|                position: 0,
 1198|   150k|            },
 1199|   150k|            output,
 1200|   150k|            output_positions: IriElementsPositions {
 1201|   150k|                scheme_end: 0,
 1202|   150k|                authority_end: 0,
 1203|   150k|                path_end: 0,
 1204|   150k|                query_end: 0,
 1205|   150k|            },
 1206|   150k|            input_scheme_end: 0,
 1207|   150k|        };
 1208|   150k|        parser.parse_scheme_start()?;
 1209|   125k|        Ok(parser.output_positions)
 1210|   150k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb1_E10parse_hostCscuJmoqhSOSr_5oxttl:
 1366|  4.50k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|  4.50k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|    494|            let start_position = self.input.position;
 1370|  19.2k|            while let Some(c) = self.input.next() {
 1371|  19.0k|                self.output.push(c);
 1372|  19.0k|                if c == ']' {
 1373|    269|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|    269|                    if !UNCHECKED {
 1375|      0|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|      0|                        }
 1378|    269|                    }
 1379|       |
 1380|    269|                    let c = self.input.next();
 1381|    269|                    return match c {
 1382|       |                        Some(':') => {
 1383|     11|                            self.output.push(':');
 1384|     11|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|     80|                            self.output_positions.authority_end = self.output.len();
 1388|     80|                            self.parse_path_start(c)
 1389|       |                        }
 1390|    178|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|  18.7k|                }
 1393|       |            }
 1394|    225|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|  65.8k|            loop {
 1398|  65.8k|                let c = self.input.next();
 1399|  65.8k|                match c {
 1400|       |                    Some(':') => {
 1401|  1.44k|                        self.output.push(':');
 1402|  1.44k|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|  2.56k|                        self.output_positions.authority_end = self.output.len();
 1406|  2.56k|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|  61.8k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|  4.50k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb1_E10parse_pathCscuJmoqhSOSr_5oxttl:
 1457|  64.6k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|   310k|        loop {
 1459|   310k|            let c = self.input.next();
 1460|   310k|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|  74.8k|                    if self.output.as_str().ends_with("/..") {
 1463|    275|                        self.remove_last_segment();
 1464|    275|                        self.remove_last_segment();
 1465|    275|                        self.output.push('/');
 1466|  74.6k|                    } else if self.output.as_str().ends_with("/.") {
 1467|  48.8k|                        self.remove_last_segment();
 1468|  48.8k|                        self.output.push('/');
 1469|  48.8k|                    } else if c == Some('/') {
 1470|  10.1k|                        self.output.push('/');
 1471|  15.5k|                    }
 1472|       |
 1473|  74.8k|                    if c == Some('?') {
 1474|  1.28k|                        self.output_positions.path_end = self.output.len();
 1475|  1.28k|                        self.output.push('?');
 1476|  1.28k|                        return self.parse_query();
 1477|  73.5k|                    } else if c == Some('#') {
 1478|    924|                        self.output_positions.path_end = self.output.len();
 1479|    924|                        self.output_positions.query_end = self.output.len();
 1480|    924|                        self.output.push('#');
 1481|    924|                        return self.parse_fragment();
 1482|  72.6k|                    } else if c.is_none() {
 1483|  62.4k|                        self.output_positions.path_end = self.output.len();
 1484|  62.4k|                        self.output_positions.query_end = self.output.len();
 1485|  62.4k|                        return Ok(());
 1486|  10.2k|                    }
 1487|       |                }
 1488|   235k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|  64.6k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb1_E10parse_portCscuJmoqhSOSr_5oxttl:
 1414|  1.45k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|  2.84k|        loop {
 1416|  2.84k|            let c = self.input.next();
 1417|  2.66k|            match c {
 1418|  2.66k|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|    907|                    self.output_positions.authority_end = self.output.len();
 1421|    907|                    return self.parse_path_start(c);
 1422|       |                }
 1423|    552|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|  1.45k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb1_E11parse_queryCscuJmoqhSOSr_5oxttl:
 1493|  3.87k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|  54.4k|        while let Some(c) = self.input.next() {
 1495|  50.9k|            if c == '#' {
 1496|    366|                self.output_positions.query_end = self.output.len();
 1497|    366|                self.output.push('#');
 1498|    366|                return self.parse_fragment();
 1499|       |            } else {
 1500|  50.6k|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|  3.51k|        self.output_positions.query_end = self.output.len();
 1504|  3.51k|        Ok(())
 1505|  3.87k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb1_E12parse_schemeCscuJmoqhSOSr_5oxttl:
 1220|  9.52k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|  52.6k|        loop {
 1222|  52.6k|            let c = self.input.next();
 1223|  51.5k|            match c {
 1224|  51.5k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|  43.1k|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|  4.43k|                    self.output.push(':');
 1229|  4.43k|                    self.output_positions.scheme_end = self.output.len();
 1230|  4.43k|                    self.input_scheme_end = self.input.position;
 1231|  4.43k|                    return if self.input.starts_with('/') {
 1232|  2.20k|                        self.input.next();
 1233|  2.20k|                        self.output.push('/');
 1234|  2.20k|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|  2.22k|                        self.output_positions.authority_end = self.output.len();
 1237|  2.22k|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|  5.09k|                    self.input = ParserInput {
 1242|  5.09k|                        value: self.iri.chars(),
 1243|  5.09k|                        position: 0,
 1244|  5.09k|                    }; // reset
 1245|  5.09k|                    self.output.clear();
 1246|  5.09k|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|  9.52k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb1_E14parse_fragmentCscuJmoqhSOSr_5oxttl:
 1507|  1.67k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|  23.1k|        while let Some(c) = self.input.next() {
 1509|  21.4k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|  1.67k|        Ok(())
 1512|  1.67k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb1_E14parse_relativeCscuJmoqhSOSr_5oxttl:
 1263|  70.3k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1264|  70.3k|        if let Some(base) = self.base {
 1265|  70.3k|            match self.input.front() {
 1266|       |                None => {
 1267|  4.60k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1268|  4.60k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1269|  4.60k|                    self.output_positions.authority_end = base.positions.authority_end;
 1270|  4.60k|                    self.output_positions.path_end = base.positions.path_end;
 1271|  4.60k|                    self.output_positions.query_end = base.positions.query_end;
 1272|  4.60k|                    Ok(())
 1273|       |                }
 1274|       |                Some('/') => {
 1275|  48.9k|                    self.input.next();
 1276|  48.9k|                    self.parse_relative_slash(&base)
 1277|       |                }
 1278|       |                Some('?') => {
 1279|  2.45k|                    self.input.next();
 1280|  2.45k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1281|  2.45k|                    self.output.push('?');
 1282|  2.45k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1283|  2.45k|                    self.output_positions.authority_end = base.positions.authority_end;
 1284|  2.45k|                    self.output_positions.path_end = base.positions.path_end;
 1285|  2.45k|                    self.parse_query()
 1286|       |                }
 1287|       |                Some('#') => {
 1288|    285|                    self.input.next();
 1289|    285|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1290|    285|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1291|    285|                    self.output_positions.authority_end = base.positions.authority_end;
 1292|    285|                    self.output_positions.path_end = base.positions.path_end;
 1293|    285|                    self.output_positions.query_end = base.positions.query_end;
 1294|    285|                    self.output.push('#');
 1295|    285|                    self.parse_fragment()
 1296|       |                }
 1297|       |                _ => {
 1298|  14.0k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1299|  14.0k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1300|  14.0k|                    self.output_positions.authority_end = base.positions.authority_end;
 1301|  14.0k|                    self.output_positions.path_end = base.positions.path_end;
 1302|  14.0k|                    self.remove_last_segment();
 1303|  14.0k|                    if self.output.len() > base.positions.scheme_end {
 1304|  13.6k|                        // We have some path or authority, we keep a base '/'
 1305|  13.6k|                        self.output.push('/');
 1306|  13.6k|                    }
 1307|  14.0k|                    self.parse_path()
 1308|       |                }
 1309|       |            }
 1310|       |        } else {
 1311|      0|            self.output_positions.scheme_end = 0;
 1312|      0|            self.input_scheme_end = 0;
 1313|      0|            if self.input.starts_with('/') {
 1314|      0|                self.input.next();
 1315|      0|                self.output.push('/');
 1316|      0|                self.parse_path_or_authority()
 1317|       |            } else {
 1318|      0|                self.output_positions.authority_end = 0;
 1319|      0|                self.parse_path()
 1320|       |            }
 1321|       |        }
 1322|  70.3k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb1_E15parse_authorityCscuJmoqhSOSr_5oxttl:
 1342|  4.50k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|  72.9k|        loop {
 1345|  72.9k|            let c = self.input.next();
 1346|  72.9k|            match c {
 1347|       |                Some('@') => {
 1348|    155|                    self.output.push('@');
 1349|    155|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|  4.34k|                    self.input = ParserInput {
 1353|  4.34k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|  4.34k|                        position: self.input_scheme_end + 2,
 1355|  4.34k|                    };
 1356|  4.34k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|  4.34k|                    return self.parse_host();
 1358|       |                }
 1359|  68.4k|                Some(c) => {
 1360|  68.4k|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|  4.50k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb1_E16parse_path_startCscuJmoqhSOSr_5oxttl:
 1428|  3.54k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|  3.54k|        match c {
 1430|       |            None => {
 1431|  1.57k|                self.output_positions.path_end = self.output.len();
 1432|  1.57k|                self.output_positions.query_end = self.output.len();
 1433|  1.57k|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|    135|                self.output_positions.path_end = self.output.len();
 1437|    135|                self.output.push('?');
 1438|    135|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|    100|                self.output_positions.path_end = self.output.len();
 1442|    100|                self.output_positions.query_end = self.output.len();
 1443|    100|                self.output.push('#');
 1444|    100|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|  1.74k|                self.output.push('/');
 1448|  1.74k|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|  3.54k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb1_E18parse_scheme_startCscuJmoqhSOSr_5oxttl:
 1212|  75.0k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|  75.0k|        match self.input.front() {
 1214|    256|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|  70.1k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|  65.2k|            _ => self.parse_relative(),
 1217|       |        }
 1218|  75.0k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb1_E19remove_last_segmentCscuJmoqhSOSr_5oxttl:
 1514|  63.4k|    fn remove_last_segment(&mut self) {
 1515|  63.4k|        let last_slash_position = self.output.as_str()[self.output_positions.authority_end..]
 1516|  63.4k|            .rfind('/')
 1517|  63.4k|            .unwrap_or(0);
 1518|  63.4k|        self.output
 1519|  63.4k|            .truncate(last_slash_position + self.output_positions.authority_end)
 1520|  63.4k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb1_E20parse_relative_slashCscuJmoqhSOSr_5oxttl:
 1324|  48.9k|    fn parse_relative_slash(&mut self, base: &IriRef<&'a str>) -> Result<(), IriParseError> {
 1325|  48.9k|        if self.input.starts_with('/') {
 1326|  2.47k|            self.input.next();
 1327|  2.47k|            self.output.push_str(&base.iri[..base.positions.scheme_end]);
 1328|  2.47k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1329|  2.47k|            self.output.push('/');
 1330|  2.47k|            self.output.push('/');
 1331|  2.47k|            self.parse_authority()
 1332|       |        } else {
 1333|  46.4k|            self.output
 1334|  46.4k|                .push_str(&base.iri[..base.positions.authority_end]);
 1335|  46.4k|            self.output.push('/');
 1336|  46.4k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1337|  46.4k|            self.output_positions.authority_end = base.positions.authority_end;
 1338|  46.4k|            self.parse_path()
 1339|       |        }
 1340|  48.9k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb1_E23parse_path_or_authorityCscuJmoqhSOSr_5oxttl:
 1252|  2.20k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|  2.20k|        if self.input.starts_with('/') {
 1254|  2.02k|            self.input.next();
 1255|  2.02k|            self.output.push('/');
 1256|  2.02k|            self.parse_authority()
 1257|       |        } else {
 1258|    179|            self.output_positions.authority_end = self.output.len() - 1;
 1259|    179|            self.parse_path()
 1260|       |        }
 1261|  2.20k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb1_E27read_url_codepoint_or_echarCscuJmoqhSOSr_5oxttl:
 1523|   387k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|   387k|        if UNCHECKED || is_url_code_point(c) {
 1525|   387k|            self.output.push(c);
 1526|   387k|            Ok(())
 1527|      0|        } else if c == '%' {
 1528|      0|            self.read_echar()
 1529|       |        } else {
 1530|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|   387k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb1_E33read_url_query_codepoint_or_echarCscuJmoqhSOSr_5oxttl:
 1535|  50.6k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|  50.6k|        if UNCHECKED || is_url_query_code_point(c) {
 1537|  50.6k|            self.output.push(c);
 1538|  50.6k|            Ok(())
 1539|      0|        } else if c == '%' {
 1540|      0|            self.read_echar()
 1541|       |        } else {
 1542|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|  50.6k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtNtCs15NWbik7Z2V_5alloc6string6StringKb1_E5parseCscuJmoqhSOSr_5oxttl:
 1187|  75.0k|    fn parse(
 1188|  75.0k|        iri: &'a str,
 1189|  75.0k|        base: Option<IriRef<&'a str>>,
 1190|  75.0k|        output: &'a mut O,
 1191|  75.0k|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|  75.0k|        let mut parser = Self {
 1193|  75.0k|            iri,
 1194|  75.0k|            base,
 1195|  75.0k|            input: ParserInput {
 1196|  75.0k|                value: iri.chars(),
 1197|  75.0k|                position: 0,
 1198|  75.0k|            },
 1199|  75.0k|            output,
 1200|  75.0k|            output_positions: IriElementsPositions {
 1201|  75.0k|                scheme_end: 0,
 1202|  75.0k|                authority_end: 0,
 1203|  75.0k|                path_end: 0,
 1204|  75.0k|                query_end: 0,
 1205|  75.0k|            },
 1206|  75.0k|            input_scheme_end: 0,
 1207|  75.0k|        };
 1208|  75.0k|        parser.parse_scheme_start()?;
 1209|  73.7k|        Ok(parser.output_positions)
 1210|  75.0k|    }
_RNvMsp_Csh8sWMiPH21C_5oxiriINtB5_3IriNtNtCs15NWbik7Z2V_5alloc6string6StringE15parse_uncheckedCscuJmoqhSOSr_5oxttl:
  574|  2.67k|    pub fn parse_unchecked(iri: T) -> Result<Self, IriParseError> {
  575|  2.67k|        IriRef::parse_unchecked(iri)?.try_into()
  576|  2.67k|    }
_RNvMsp_Csh8sWMiPH21C_5oxiriINtB5_3IriNtNtCs15NWbik7Z2V_5alloc6string6StringE17resolve_uncheckedCscuJmoqhSOSr_5oxttl:
  605|  75.0k|    pub fn resolve_unchecked(&self, iri: &str) -> Result<Iri<String>, IriParseError> {
  606|  75.0k|        Ok(Iri(self.0.resolve_unchecked(iri)?))
  607|  75.0k|    }
_RNvMsp_Csh8sWMiPH21C_5oxiriINtB5_3IriNtNtCs15NWbik7Z2V_5alloc6string6StringE7resolveCscuJmoqhSOSr_5oxttl:
  591|   150k|    pub fn resolve(&self, iri: &str) -> Result<Iri<String>, IriParseError> {
  592|   150k|        Ok(Iri(self.0.resolve(iri)?))
  593|   150k|    }
_RNvCsh8sWMiPH21C_5oxiri17is_url_code_pointCscuJmoqhSOSr_5oxttl:
 1573|   545k|fn is_url_code_point(c: char) -> bool {
 1574|   545k|    matches!(c,
 1575|   109k|        'a'..='z'
 1576|   161k|        | 'A'..='Z'
 1577|   115k|        | '0'..='9'
 1578|       |        | '!'
 1579|       |        | '$'
 1580|       |        | '&'
 1581|       |        | '\''
 1582|       |        | '('
 1583|       |        | ')'
 1584|       |        | '*'
 1585|       |        | '+'
 1586|       |        | ','
 1587|       |        | '-'
 1588|       |        | '.'
 1589|       |        | '/'
 1590|       |        | ':'
 1591|       |        | ';'
 1592|       |        | '='
 1593|       |        | '?'
 1594|       |        | '@'
 1595|       |        | '_'
 1596|       |        | '~'
 1597|  6.27k|        | '\u{A0}'..='\u{D7FF}'
 1598|    766|        | '\u{F900}'..='\u{FDCF}'
 1599|    154|        | '\u{FDF0}'..='\u{FFEF}'
 1600|    154|        | '\u{10000}'..='\u{1FFFD}'
 1601|    154|        | '\u{20000}'..='\u{2FFFD}'
 1602|    134|        | '\u{30000}'..='\u{3FFFD}'
 1603|    134|        | '\u{40000}'..='\u{4FFFD}'
 1604|     96|        | '\u{50000}'..='\u{5FFFD}'
 1605|     96|        | '\u{60000}'..='\u{6FFFD}'
 1606|     96|        | '\u{70000}'..='\u{7FFFD}'
 1607|     96|        | '\u{80000}'..='\u{8FFFD}'
 1608|     96|        | '\u{90000}'..='\u{9FFFD}'
 1609|     96|        | '\u{A0000}'..='\u{AFFFD}'
 1610|      0|        | '\u{B0000}'..='\u{BFFFD}'
 1611|      0|        | '\u{C0000}'..='\u{CFFFD}'
 1612|      0|        | '\u{D0000}'..='\u{DFFFD}'
 1613|      0|        | '\u{E1000}'..='\u{EFFFD}'
 1614|       |    )
 1615|   545k|}
_RNvCsh8sWMiPH21C_5oxiri23is_url_query_code_pointCscuJmoqhSOSr_5oxttl:
 1618|  68.3k|fn is_url_query_code_point(c: char) -> bool {
 1619|  68.3k|    is_url_code_point(c)
 1620|  3.07k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1621|  68.3k|}
_RNvMs10_Csh8sWMiPH21C_5oxiriNtB6_11ParserInput11starts_withCscuJmoqhSOSr_5oxttl:
 1169|   183k|    fn starts_with(&self, c: char) -> bool {
 1170|   183k|        self.value.as_str().starts_with(c)
 1171|   183k|    }
_RNvMs10_Csh8sWMiPH21C_5oxiriNtB6_11ParserInput4nextCscuJmoqhSOSr_5oxttl:
 1154|  1.71M|    fn next(&mut self) -> Option<char> {
 1155|  1.71M|        if let Some(head) = self.value.next() {
 1156|  1.51M|            self.position += head.len_utf8();
 1157|  1.51M|            Some(head)
 1158|       |        } else {
 1159|   197k|            None
 1160|       |        }
 1161|  1.71M|    }
_RNvMs10_Csh8sWMiPH21C_5oxiriNtB6_11ParserInput5frontCscuJmoqhSOSr_5oxttl:
 1164|   439k|    fn front(&self) -> Option<char> {
 1165|   439k|        self.value.clone().next()
 1166|   439k|    }
_RNvXs1b_Csh8sWMiPH21C_5oxiriNtB6_16VoidOutputBufferNtNtCsjv2Y2xFO4ua_4core7default7Default7defaultCscuJmoqhSOSr_5oxttl:
 1078|  2.67k|#[derive(Default)]
_RNvXsY_Csh8sWMiPH21C_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCscuJmoqhSOSr_5oxttl:
 1105|  10.6k|    fn len(&self) -> usize {
 1106|  10.6k|        self.len
 1107|  10.6k|    }
_RNvXsY_Csh8sWMiPH21C_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCscuJmoqhSOSr_5oxttl:
 1085|  95.1k|    fn push(&mut self, c: char) {
 1086|  95.1k|        self.len += c.len_utf8();
 1087|  95.1k|    }
_RNvXsY_Csh8sWMiPH21C_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCscuJmoqhSOSr_5oxttl:
 1110|  4.88k|    fn as_str(&self) -> &str {
 1111|  4.88k|        ""
 1112|  4.88k|    }
_RNvXsY_Csh8sWMiPH21C_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCscuJmoqhSOSr_5oxttl:
 1100|  2.15k|    fn truncate(&mut self, new_len: usize) {
 1101|  2.15k|        self.len = new_len;
 1102|  2.15k|    }
_RNCNvMs11_Csh8sWMiPH21C_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0Cs5bua6W9iSBw_5oxrdf:
 1550|    765|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_Csh8sWMiPH21C_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0Cs5bua6W9iSBw_5oxrdf:
 1551|    765|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMCsh8sWMiPH21C_5oxiriINtB2_6IriRefNtNtCs15NWbik7Z2V_5alloc6string6StringE10into_innerCs5bua6W9iSBw_5oxrdf:
  191|   293k|    pub fn into_inner(self) -> T {
  192|   293k|        self.iri
  193|   293k|    }
_RNvMCsh8sWMiPH21C_5oxiriINtB2_6IriRefNtNtCs15NWbik7Z2V_5alloc6string6StringE11is_absoluteCs5bua6W9iSBw_5oxrdf:
  205|   113k|    pub fn is_absolute(&self) -> bool {
  206|   113k|        self.positions.scheme_end != 0
  207|   113k|    }
_RNvMCsh8sWMiPH21C_5oxiriINtB2_6IriRefNtNtCs15NWbik7Z2V_5alloc6string6StringE5parseCs5bua6W9iSBw_5oxrdf:
   58|   110k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|   110k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|   110k|        Ok(Self { iri, positions })
   61|   110k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCs5bua6W9iSBw_5oxrdf:
 1366|   109k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|   109k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|      0|            let start_position = self.input.position;
 1370|      0|            while let Some(c) = self.input.next() {
 1371|      0|                self.output.push(c);
 1372|      0|                if c == ']' {
 1373|      0|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|      0|                    if !UNCHECKED {
 1375|      0|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|      0|                        }
 1378|      0|                    }
 1379|       |
 1380|      0|                    let c = self.input.next();
 1381|      0|                    return match c {
 1382|       |                        Some(':') => {
 1383|      0|                            self.output.push(':');
 1384|      0|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|      0|                            self.output_positions.authority_end = self.output.len();
 1388|      0|                            self.parse_path_start(c)
 1389|       |                        }
 1390|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|      0|                }
 1393|       |            }
 1394|      0|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|  1.23M|            loop {
 1398|  1.23M|                let c = self.input.next();
 1399|  1.23M|                match c {
 1400|       |                    Some(':') => {
 1401|    200|                        self.output.push(':');
 1402|    200|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|   109k|                        self.output_positions.authority_end = self.output.len();
 1406|   109k|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|  1.12M|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|   109k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCs5bua6W9iSBw_5oxrdf:
 1457|   110k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|  1.89M|        loop {
 1459|  1.89M|            let c = self.input.next();
 1460|  1.89M|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|   257k|                    if self.output.as_str().ends_with("/..") {
 1463|      0|                        self.remove_last_segment();
 1464|      0|                        self.remove_last_segment();
 1465|      0|                        self.output.push('/');
 1466|   257k|                    } else if self.output.as_str().ends_with("/.") {
 1467|      0|                        self.remove_last_segment();
 1468|      0|                        self.output.push('/');
 1469|   257k|                    } else if c == Some('/') {
 1470|   147k|                        self.output.push('/');
 1471|   147k|                    }
 1472|       |
 1473|   257k|                    if c == Some('?') {
 1474|    800|                        self.output_positions.path_end = self.output.len();
 1475|    800|                        self.output.push('?');
 1476|    800|                        return self.parse_query();
 1477|   256k|                    } else if c == Some('#') {
 1478|  72.5k|                        self.output_positions.path_end = self.output.len();
 1479|  72.5k|                        self.output_positions.query_end = self.output.len();
 1480|  72.5k|                        self.output.push('#');
 1481|  72.5k|                        return self.parse_fragment();
 1482|   184k|                    } else if c.is_none() {
 1483|  36.6k|                        self.output_positions.path_end = self.output.len();
 1484|  36.6k|                        self.output_positions.query_end = self.output.len();
 1485|  36.6k|                        return Ok(());
 1486|   147k|                    }
 1487|       |                }
 1488|  1.63M|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|   110k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCs5bua6W9iSBw_5oxrdf:
 1414|    200|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|    375|        loop {
 1416|    375|            let c = self.input.next();
 1417|    331|            match c {
 1418|    331|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|    200|                    self.output_positions.authority_end = self.output.len();
 1421|    200|                    return self.parse_path_start(c);
 1422|       |                }
 1423|      0|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|    200|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCs5bua6W9iSBw_5oxrdf:
 1547|    765|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1548|    765|        let c1 = self.input.next();
 1549|    765|        let c2 = self.input.next();
 1550|    765|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1551|    765|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1552|       |        {
 1553|    765|            self.output.push('%');
 1554|    765|            self.output.push(c1.unwrap());
 1555|    765|            self.output.push(c2.unwrap());
 1556|    765|            Ok(())
 1557|       |        } else {
 1558|      0|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1559|      0|                Some('%'),
 1560|      0|                c1,
 1561|      0|                c2,
 1562|      0|            ]))
 1563|       |        }
 1564|    765|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCs5bua6W9iSBw_5oxrdf:
 1493|    813|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|  14.9k|        while let Some(c) = self.input.next() {
 1495|  14.1k|            if c == '#' {
 1496|     13|                self.output_positions.query_end = self.output.len();
 1497|     13|                self.output.push('#');
 1498|     13|                return self.parse_fragment();
 1499|       |            } else {
 1500|  14.0k|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|    800|        self.output_positions.query_end = self.output.len();
 1504|    800|        Ok(())
 1505|    813|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCs5bua6W9iSBw_5oxrdf:
 1220|   110k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|   553k|        loop {
 1222|   553k|            let c = self.input.next();
 1223|   553k|            match c {
 1224|   553k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|   442k|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|   110k|                    self.output.push(':');
 1229|   110k|                    self.output_positions.scheme_end = self.output.len();
 1230|   110k|                    self.input_scheme_end = self.input.position;
 1231|   110k|                    return if self.input.starts_with('/') {
 1232|   109k|                        self.input.next();
 1233|   109k|                        self.output.push('/');
 1234|   109k|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|    779|                        self.output_positions.authority_end = self.output.len();
 1237|    779|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|      0|                    self.input = ParserInput {
 1242|      0|                        value: self.iri.chars(),
 1243|      0|                        position: 0,
 1244|      0|                    }; // reset
 1245|      0|                    self.output.clear();
 1246|      0|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|   110k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCs5bua6W9iSBw_5oxrdf:
 1507|  72.6k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|   412k|        while let Some(c) = self.input.next() {
 1509|   339k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|  72.6k|        Ok(())
 1512|  72.6k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCs5bua6W9iSBw_5oxrdf:
 1342|   109k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|  1.23M|        loop {
 1345|  1.23M|            let c = self.input.next();
 1346|  1.23M|            match c {
 1347|       |                Some('@') => {
 1348|     30|                    self.output.push('@');
 1349|     30|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|   109k|                    self.input = ParserInput {
 1353|   109k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|   109k|                        position: self.input_scheme_end + 2,
 1355|   109k|                    };
 1356|   109k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|   109k|                    return self.parse_host();
 1358|       |                }
 1359|  1.12M|                Some(c) => {
 1360|  1.12M|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|   109k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCs5bua6W9iSBw_5oxrdf:
 1428|   109k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|   109k|        match c {
 1430|       |            None => {
 1431|    678|                self.output_positions.path_end = self.output.len();
 1432|    678|                self.output_positions.query_end = self.output.len();
 1433|    678|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|     13|                self.output_positions.path_end = self.output.len();
 1437|     13|                self.output.push('?');
 1438|     13|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|     58|                self.output_positions.path_end = self.output.len();
 1442|     58|                self.output_positions.query_end = self.output.len();
 1443|     58|                self.output.push('#');
 1444|     58|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|   108k|                self.output.push('/');
 1448|   108k|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|   109k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCs5bua6W9iSBw_5oxrdf:
 1212|   110k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|   110k|        match self.input.front() {
 1214|      0|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|   110k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|      0|            _ => self.parse_relative(),
 1217|       |        }
 1218|   110k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCs5bua6W9iSBw_5oxrdf:
 1252|   109k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|   109k|        if self.input.starts_with('/') {
 1254|   109k|            self.input.next();
 1255|   109k|            self.output.push('/');
 1256|   109k|            self.parse_authority()
 1257|       |        } else {
 1258|    657|            self.output_positions.authority_end = self.output.len() - 1;
 1259|    657|            self.parse_path()
 1260|       |        }
 1261|   109k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarCs5bua6W9iSBw_5oxrdf:
 1523|  4.22M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|  4.22M|        if UNCHECKED || is_url_code_point(c) {
 1525|  4.22M|            self.output.push(c);
 1526|  4.22M|            Ok(())
 1527|    441|        } else if c == '%' {
 1528|    441|            self.read_echar()
 1529|       |        } else {
 1530|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|  4.22M|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E33read_url_query_codepoint_or_echarCs5bua6W9iSBw_5oxrdf:
 1535|  14.0k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|  14.0k|        if UNCHECKED || is_url_query_code_point(c) {
 1537|  13.7k|            self.output.push(c);
 1538|  13.7k|            Ok(())
 1539|    324|        } else if c == '%' {
 1540|    324|            self.read_echar()
 1541|       |        } else {
 1542|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|  14.0k|    }
_RNvMs11_Csh8sWMiPH21C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCs5bua6W9iSBw_5oxrdf:
 1187|   110k|    fn parse(
 1188|   110k|        iri: &'a str,
 1189|   110k|        base: Option<IriRef<&'a str>>,
 1190|   110k|        output: &'a mut O,
 1191|   110k|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|   110k|        let mut parser = Self {
 1193|   110k|            iri,
 1194|   110k|            base,
 1195|   110k|            input: ParserInput {
 1196|   110k|                value: iri.chars(),
 1197|   110k|                position: 0,
 1198|   110k|            },
 1199|   110k|            output,
 1200|   110k|            output_positions: IriElementsPositions {
 1201|   110k|                scheme_end: 0,
 1202|   110k|                authority_end: 0,
 1203|   110k|                path_end: 0,
 1204|   110k|                query_end: 0,
 1205|   110k|            },
 1206|   110k|            input_scheme_end: 0,
 1207|   110k|        };
 1208|   110k|        parser.parse_scheme_start()?;
 1209|   110k|        Ok(parser.output_positions)
 1210|   110k|    }
_RNvMsp_Csh8sWMiPH21C_5oxiriINtB5_3IriNtNtCs15NWbik7Z2V_5alloc6string6StringE10into_innerCs5bua6W9iSBw_5oxrdf:
  678|   293k|    pub fn into_inner(self) -> T {
  679|   293k|        self.0.into_inner()
  680|   293k|    }
_RNvMsp_Csh8sWMiPH21C_5oxiriINtB5_3IriNtNtCs15NWbik7Z2V_5alloc6string6StringE5parseCs5bua6W9iSBw_5oxrdf:
  562|   110k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  563|   110k|        IriRef::parse(iri)?.try_into()
  564|   110k|    }
_RNvXsV_Csh8sWMiPH21C_5oxiriINtB5_3IriNtNtCs15NWbik7Z2V_5alloc6string6StringEINtNtCsjv2Y2xFO4ua_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCs5bua6W9iSBw_5oxrdf:
  981|   113k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  982|   113k|        if iri.is_absolute() {
  983|   113k|            Ok(Self(iri))
  984|       |        } else {
  985|      0|            Err(IriParseError {
  986|      0|                kind: IriParseErrorKind::NoScheme,
  987|      0|            })
  988|       |        }
  989|   113k|    }
_RNvCsh8sWMiPH21C_5oxiri17is_url_code_pointCs5bua6W9iSBw_5oxrdf:
 1573|  4.24M|fn is_url_code_point(c: char) -> bool {
 1574|  4.24M|    matches!(c,
 1575|  2.87M|        'a'..='z'
 1576|  30.9k|        | 'A'..='Z'
 1577|   751k|        | '0'..='9'
 1578|       |        | '!'
 1579|       |        | '$'
 1580|       |        | '&'
 1581|       |        | '\''
 1582|       |        | '('
 1583|       |        | ')'
 1584|       |        | '*'
 1585|       |        | '+'
 1586|       |        | ','
 1587|       |        | '-'
 1588|       |        | '.'
 1589|       |        | '/'
 1590|       |        | ':'
 1591|       |        | ';'
 1592|       |        | '='
 1593|       |        | '?'
 1594|       |        | '@'
 1595|       |        | '_'
 1596|       |        | '~'
 1597|  1.27k|        | '\u{A0}'..='\u{D7FF}'
 1598|    258|        | '\u{F900}'..='\u{FDCF}'
 1599|     29|        | '\u{FDF0}'..='\u{FFEF}'
 1600|     29|        | '\u{10000}'..='\u{1FFFD}'
 1601|     29|        | '\u{20000}'..='\u{2FFFD}'
 1602|     29|        | '\u{30000}'..='\u{3FFFD}'
 1603|     29|        | '\u{40000}'..='\u{4FFFD}'
 1604|     29|        | '\u{50000}'..='\u{5FFFD}'
 1605|     29|        | '\u{60000}'..='\u{6FFFD}'
 1606|     29|        | '\u{70000}'..='\u{7FFFD}'
 1607|     29|        | '\u{80000}'..='\u{8FFFD}'
 1608|     29|        | '\u{90000}'..='\u{9FFFD}'
 1609|     29|        | '\u{A0000}'..='\u{AFFFD}'
 1610|      0|        | '\u{B0000}'..='\u{BFFFD}'
 1611|      0|        | '\u{C0000}'..='\u{CFFFD}'
 1612|      0|        | '\u{D0000}'..='\u{DFFFD}'
 1613|      0|        | '\u{E1000}'..='\u{EFFFD}'
 1614|       |    )
 1615|  4.24M|}
_RNvCsh8sWMiPH21C_5oxiri23is_url_query_code_pointCs5bua6W9iSBw_5oxrdf:
 1618|  14.0k|fn is_url_query_code_point(c: char) -> bool {
 1619|  14.0k|    is_url_code_point(c)
 1620|    327|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1621|  14.0k|}
_RNvMs10_Csh8sWMiPH21C_5oxiriNtB6_11ParserInput11starts_withCs5bua6W9iSBw_5oxrdf:
 1169|   330k|    fn starts_with(&self, c: char) -> bool {
 1170|   330k|        self.value.as_str().starts_with(c)
 1171|   330k|    }
_RNvMs10_Csh8sWMiPH21C_5oxiriNtB6_11ParserInput4nextCs5bua6W9iSBw_5oxrdf:
 1154|  5.56M|    fn next(&mut self) -> Option<char> {
 1155|  5.56M|        if let Some(head) = self.value.next() {
 1156|  5.45M|            self.position += head.len_utf8();
 1157|  5.45M|            Some(head)
 1158|       |        } else {
 1159|   111k|            None
 1160|       |        }
 1161|  5.56M|    }
_RNvMs10_Csh8sWMiPH21C_5oxiriNtB6_11ParserInput5frontCs5bua6W9iSBw_5oxrdf:
 1164|   110k|    fn front(&self) -> Option<char> {
 1165|   110k|        self.value.clone().next()
 1166|   110k|    }
_RNvXs1b_Csh8sWMiPH21C_5oxiriNtB6_16VoidOutputBufferNtNtCsjv2Y2xFO4ua_4core7default7Default7defaultCs5bua6W9iSBw_5oxrdf:
 1078|   110k|#[derive(Default)]
_RNvXsY_Csh8sWMiPH21C_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCs5bua6W9iSBw_5oxrdf:
 1105|   443k|    fn len(&self) -> usize {
 1106|   443k|        self.len
 1107|   443k|    }
_RNvXsY_Csh8sWMiPH21C_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCs5bua6W9iSBw_5oxrdf:
 1085|  5.34M|    fn push(&mut self, c: char) {
 1086|  5.34M|        self.len += c.len_utf8();
 1087|  5.34M|    }
_RNvXsY_Csh8sWMiPH21C_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCs5bua6W9iSBw_5oxrdf:
 1110|   515k|    fn as_str(&self) -> &str {
 1111|   515k|        ""
 1112|   515k|    }
_RNvXsY_Csh8sWMiPH21C_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCs5bua6W9iSBw_5oxrdf:
 1100|   109k|    fn truncate(&mut self, new_len: usize) {
 1101|   109k|        self.len = new_len;
 1102|   109k|    }
_RNvXsW_Csh8sWMiPH21C_5oxiriNtB5_13IriParseErrorNtNtCsjv2Y2xFO4ua_4core3fmt7Display3fmt:
 1016|  25.5k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1017|  25.5k|        match &self.kind {
 1018|    772|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
 1019|    853|            IriParseErrorKind::InvalidHostCharacter(c) => {
 1020|    853|                write!(f, "Invalid character '{c}' in host")
 1021|       |            }
 1022|    538|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({e})"),
 1023|    734|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{c}'"),
 1024|  21.3k|            IriParseErrorKind::InvalidIriCodePoint(c) => {
 1025|  21.3k|                write!(f, "Invalid IRI code point '{c}'")
 1026|       |            }
 1027|  1.37k|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
 1028|  1.37k|                f,
 1029|  1.37k|                "Invalid IRI percent encoding '{}'",
 1030|  1.37k|                cs.iter().flatten().cloned().collect::<String>()
 1031|  1.37k|            ),
 1032|       |        }
 1033|  25.5k|    }

_RNvMNtCs3MLxXZhMri9_10ppv_lite864softINtB2_2x2INtNtNtNtB4_6x86_644sse24avx212u32x4x2_avx2NtBP_4NoNIENtBN_2G0E3newCs1K30B1NpY8V_11rand_chacha:
   13|  3.68M|    pub fn new(xs: [W; 2]) -> Self {
   14|  3.68M|        x2(xs, PhantomData)
   15|  3.68M|    }
_RNvXsG_NtCs3MLxXZhMri9_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCsjv2Y2xFO4ua_4core3ops3bit6BitXor6bitxorCs1K30B1NpY8V_11rand_chacha:
   22|  1.28M|            fn $fn(self, rhs: Self) -> Self::Output {
   23|  1.28M|                x2::new([self.0[0].$fn(rhs.0[0]), self.0[1].$fn(rhs.0[1])])
   24|  1.28M|            }
_RNvXsM_NtCs3MLxXZhMri9_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCsjv2Y2xFO4ua_4core3ops5arith9AddAssign10add_assignCs1K30B1NpY8V_11rand_chacha:
   32|  1.28M|            fn $fn_assign(&mut self, rhs: Self) {
   33|  1.28M|                (self.0[0]).$fn_assign(rhs.0[0]);
   34|  1.28M|                (self.0[1]).$fn_assign(rhs.0[1]);
   35|  1.28M|            }
_RNvXs_NtCs3MLxXZhMri9_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right16Cs1K30B1NpY8V_11rand_chacha:
   42|   322k|        fn $fn(self) -> Self {
   43|   322k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   322k|        }
_RNvXs_NtCs3MLxXZhMri9_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right20Cs1K30B1NpY8V_11rand_chacha:
   42|   322k|        fn $fn(self) -> Self {
   43|   322k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   322k|        }
_RNvXs_NtCs3MLxXZhMri9_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right24Cs1K30B1NpY8V_11rand_chacha:
   42|   322k|        fn $fn(self) -> Self {
   43|   322k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   322k|        }
_RNvXs_NtCs3MLxXZhMri9_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right25Cs1K30B1NpY8V_11rand_chacha:
   42|   322k|        fn $fn(self) -> Self {
   43|   322k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   322k|        }
_RNvXsg_NtCs3MLxXZhMri9_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words1230Cs1K30B1NpY8V_11rand_chacha:
  208|   322k|    fn shuffle_lane_words1230(self) -> Self {
  209|   322k|        Self::new([
  210|   322k|            self.0[0].shuffle_lane_words1230(),
  211|   322k|            self.0[1].shuffle_lane_words1230(),
  212|   322k|        ])
  213|   322k|    }
_RNvXsg_NtCs3MLxXZhMri9_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words2301Cs1K30B1NpY8V_11rand_chacha:
  201|   322k|    fn shuffle_lane_words2301(self) -> Self {
  202|   322k|        Self::new([
  203|   322k|            self.0[0].shuffle_lane_words2301(),
  204|   322k|            self.0[1].shuffle_lane_words2301(),
  205|   322k|        ])
  206|   322k|    }
_RNvXsg_NtCs3MLxXZhMri9_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words3012Cs1K30B1NpY8V_11rand_chacha:
  215|   322k|    fn shuffle_lane_words3012(self) -> Self {
  216|   322k|        Self::new([
  217|   322k|            self.0[0].shuffle_lane_words3012(),
  218|   322k|            self.0[1].shuffle_lane_words3012(),
  219|   322k|        ])
  220|   322k|    }

_RINvYINtNtCs3MLxXZhMri9_10ppv_lite866x86_6410SseMachineNtB6_5YesS3NtB6_5YesS4NtB6_4NoNIENtNtB8_5types7Machine7read_leINtNtB6_4sse210u32x4_sse2BR_B12_B1d_EECs1K30B1NpY8V_11rand_chacha:
  259|    210|    fn read_le<V>(self, input: &[u8]) -> V
  260|    210|    where
  261|    210|        V: StoreBytes,
  262|    210|    {
  263|    210|        unsafe { V::unsafe_read_le(input) }
  264|    210|    }
_RINvYINtNtCs3MLxXZhMri9_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine3vecINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EAmj4_ECs1K30B1NpY8V_11rand_chacha:
  251|  26.8k|    fn vec<V, A>(self, a: A) -> V
  252|  26.8k|    where
  253|  26.8k|        V: MultiLane<A>,
  254|  26.8k|    {
  255|  26.8k|        V::from_lanes(a)
  256|  26.8k|    }
_RINvYINtNtCs3MLxXZhMri9_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec128_storageINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EECs1K30B1NpY8V_11rand_chacha:
  246|   241k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|   241k|        unsafe { V::unpack(s) }
  248|   241k|    }
_RINvYINtNtCs3MLxXZhMri9_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec512_storageINtNtB8_4soft2x2INtNtNtB6_4sse24avx212u32x4x2_avx2BS_ENtB2b_2G0EECs1K30B1NpY8V_11rand_chacha:
  246|  26.8k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|  26.8k|        unsafe { V::unpack(s) }
  248|  26.8k|    }

_RNvXNtCs3MLxXZhMri9_10ppv_lite866x86_64INtB2_10SseMachineNtB2_5YesS3NtB2_5YesS4NtB2_4NoNIENtNtB4_5types7Machine8instanceCs1K30B1NpY8V_11rand_chacha:
   64|    105|    unsafe fn instance() -> Self {
   65|    105|        SseMachine(PhantomData)
   66|    105|    }
_RNvXs_NtCs3MLxXZhMri9_10ppv_lite866x86_64INtB4_11Avx2MachineNtB4_4NoNIENtNtB6_5types7Machine8instanceCs1K30B1NpY8V_11rand_chacha:
   92|  26.8k|    unsafe fn instance() -> Self {
   93|  26.8k|        Avx2Machine(PhantomData)
   94|  26.8k|    }
_RNvNtCs1K30B1NpY8V_11rand_chacha4guts11refill_wide:
  250|  26.8k|        $($pub$(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  251|  26.8k|            #[inline(always)]
  252|  26.8k|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  253|  26.8k|            use std::arch::x86_64::*;
  254|  26.8k|            #[target_feature(enable = "avx2")]
  255|  26.8k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  26.8k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  26.8k|                _mm256_zeroupper();
  258|  26.8k|                ret
  259|  26.8k|            }
  260|  26.8k|            #[target_feature(enable = "avx")]
  261|  26.8k|            #[target_feature(enable = "sse4.1")]
  262|  26.8k|            #[target_feature(enable = "ssse3")]
  263|  26.8k|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  264|  26.8k|                let ret = fn_impl($crate::x86_64::AVX::instance(), $($arg),*);
  265|  26.8k|                _mm256_zeroupper();
  266|  26.8k|                ret
  267|  26.8k|            }
  268|  26.8k|            #[target_feature(enable = "sse4.1")]
  269|  26.8k|            #[target_feature(enable = "ssse3")]
  270|  26.8k|            unsafe fn impl_sse41($($arg: $argty),*) -> $ret {
  271|  26.8k|                fn_impl($crate::x86_64::SSE41::instance(), $($arg),*)
  272|  26.8k|            }
  273|  26.8k|            #[target_feature(enable = "ssse3")]
  274|  26.8k|            unsafe fn impl_ssse3($($arg: $argty),*) -> $ret {
  275|  26.8k|                fn_impl($crate::x86_64::SSSE3::instance(), $($arg),*)
  276|  26.8k|            }
  277|  26.8k|            #[target_feature(enable = "sse2")]
  278|  26.8k|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  279|  26.8k|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  280|  26.8k|            }
  281|  26.8k|            unsafe {
  282|  26.8k|                if is_x86_feature_detected!("avx2") {
  283|  26.8k|                    impl_avx2($($arg),*)
  284|      0|                } else if is_x86_feature_detected!("avx") {
  285|      0|                    impl_avx($($arg),*)
  286|      0|                } else if is_x86_feature_detected!("sse4.1") {
  287|      0|                    impl_sse41($($arg),*)
  288|      0|                } else if is_x86_feature_detected!("ssse3") {
  289|      0|                    impl_ssse3($($arg),*)
  290|      0|                } else if is_x86_feature_detected!("sse2") {
  291|      0|                    impl_sse2($($arg),*)
  292|       |                } else {
  293|      0|                    unimplemented!()
  294|       |                }
  295|       |            }
  296|       |        }
_RNvNvNtCs1K30B1NpY8V_11rand_chacha4guts11refill_wide9impl_avx2:
  255|  26.8k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  26.8k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  26.8k|                _mm256_zeroupper();
  258|  26.8k|                ret
  259|  26.8k|            }
_RNvNtCs1K30B1NpY8V_11rand_chacha4guts11init_chacha:
  333|    105|        $($pub $(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  334|    105|            #[inline(always)]
  335|    105|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  336|    105|            use std::arch::x86_64::*;
  337|    105|            #[target_feature(enable = "avx")]
  338|    105|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|    105|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|    105|            }
  341|    105|            #[target_feature(enable = "sse2")]
  342|    105|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  343|    105|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  344|    105|            }
  345|    105|            unsafe {
  346|    105|                if is_x86_feature_detected!("avx") {
  347|    105|                    impl_avx($($arg),*)
  348|      0|                } else if is_x86_feature_detected!("sse2") {
  349|      0|                    impl_sse2($($arg),*)
  350|       |                } else {
  351|      0|                    unimplemented!()
  352|       |                }
  353|       |            }
  354|       |        }
_RNvNvNtCs1K30B1NpY8V_11rand_chacha4guts11init_chacha8impl_avx:
  338|    105|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|    105|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|    105|            }
_RNvXs2_NtCs3MLxXZhMri9_10ppv_lite866x86_64NtB5_14vec128_storageINtNtCsjv2Y2xFO4ua_4core7convert4FromAmj4_E4from:
  130|    105|    fn from(u32x4: [u32; 4]) -> Self {
  131|    105|        vec128_storage { u32x4 }
  132|    105|    }

_RNvMNtNtNtCs3MLxXZhMri9_10ppv_lite866x86_644sse24avx2INtB2_12u32x4x2_avx2NtB6_4NoNIE3newCs1K30B1NpY8V_11rand_chacha:
 1394|  9.94M|        fn new(x: __m256i) -> Self {
 1395|  9.94M|            Self { x, ni: PhantomData }
 1396|  9.94M|        }
_RNvMsZ_NtNtCs3MLxXZhMri9_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIE3newCs1K30B1NpY8V_11rand_chacha:
   64|  1.50M|            fn new(x: __m128i) -> Self {
   65|  1.50M|                $vec {
   66|  1.50M|                    x,
   67|  1.50M|                    s3: PhantomData,
   68|  1.50M|                    s4: PhantomData,
   69|  1.50M|                    ni: PhantomData,
   70|  1.50M|                }
   71|  1.50M|            }
_RNvXs0_NtNtNtCs3MLxXZhMri9_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types5StoreNtB9_14vec256_storageE6unpackCs1K30B1NpY8V_11rand_chacha:
 1402|  53.7k|        unsafe fn unpack(p: vec256_storage) -> Self {
 1403|  53.7k|            Self::new(p.avx)
 1404|  53.7k|        }
_RNvXs10_NtNtCs3MLxXZhMri9_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes14unsafe_read_leCs1K30B1NpY8V_11rand_chacha:
   79|    210|            unsafe fn unsafe_read_le(input: &[u8]) -> Self {
   80|    210|                assert_eq!(input.len(), 16);
   81|    210|                Self::new(_mm_loadu_si128(input.as_ptr() as *const _))
   82|    210|            }
_RNvXs10_NtNtCs3MLxXZhMri9_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes8write_leCs1K30B1NpY8V_11rand_chacha:
   89|   429k|            fn write_le(self, out: &mut [u8]) {
   90|   429k|                assert_eq!(out.len(), 16);
   91|   429k|                unsafe { _mm_storeu_si128(out.as_mut_ptr() as *mut _, self.x) }
   92|   429k|            }
_RNvXs1R_NtNtCs3MLxXZhMri9_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtNtCsjv2Y2xFO4ua_4core3ops5arith3Add3addCs1K30B1NpY8V_11rand_chacha:
   18|   429k|            fn $fn(self, rhs: Self) -> Self::Output {
   19|   429k|                Self::new(unsafe { $impl_fn(self.x, rhs.x) })
   20|   429k|            }
_RNvXs2_NtNtNtCs3MLxXZhMri9_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E10from_lanesCs1K30B1NpY8V_11rand_chacha:
 1439|   214k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 2]) -> Self {
 1440|   214k|            Self::new(unsafe { _mm256_setr_m128i(x[0].x, x[1].x) })
 1441|   214k|        }
_RNvXs2_NtNtNtCs3MLxXZhMri9_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E8to_lanesCs1K30B1NpY8V_11rand_chacha:
 1430|   214k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 2] {
 1431|   214k|            unsafe {
 1432|   214k|                [
 1433|   214k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 0)),
 1434|   214k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 1)),
 1435|   214k|                ]
 1436|   214k|            }
 1437|   214k|        }
_RNvXs6_NtNtCs3MLxXZhMri9_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E10from_lanesCs1K30B1NpY8V_11rand_chacha:
  331|  26.8k|    fn from_lanes(xs: [u32; 4]) -> Self {
  332|  26.8k|        unsafe {
  333|  26.8k|            let mut x = _mm_cvtsi64_si128((xs[0] as u64 | ((xs[1] as u64) << 32)) as i64);
  334|  26.8k|            x = _mm_insert_epi64(x, (xs[2] as u64 | ((xs[3] as u64) << 32)) as i64, 1);
  335|  26.8k|            Self::new(x)
  336|  26.8k|        }
  337|  26.8k|    }
_RNvXs6_NtNtCs3MLxXZhMri9_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E8to_lanesCs1K30B1NpY8V_11rand_chacha:
  323|   107k|    fn to_lanes(self) -> [u32; 4] {
  324|   107k|        unsafe {
  325|   107k|            let x = _mm_cvtsi128_si64(self.x) as u64;
  326|   107k|            let y = _mm_extract_epi64(self.x, 1) as u64;
  327|   107k|            [x as u32, (x >> 32) as u32, y as u32, (y >> 32) as u32]
  328|   107k|        }
  329|   107k|    }
_RNvXs6_NtNtNtCs3MLxXZhMri9_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right16Cs1K30B1NpY8V_11rand_chacha:
 1470|   644k|            fn $name(self) -> Self {
 1471|   644k|                Self::new(unsafe {
 1472|   644k|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|   644k|                })
 1474|   644k|            }
_RNvXs6_NtNtNtCs3MLxXZhMri9_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right20Cs1K30B1NpY8V_11rand_chacha:
 1480|   644k|            fn $name(self) -> Self {
 1481|   644k|                Self::new(unsafe {
 1482|   644k|                    _mm256_or_si256(
 1483|   644k|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|   644k|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|   644k|                    )
 1486|   644k|                })
 1487|   644k|            }
_RNvXs6_NtNtNtCs3MLxXZhMri9_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right24Cs1K30B1NpY8V_11rand_chacha:
 1470|   644k|            fn $name(self) -> Self {
 1471|   644k|                Self::new(unsafe {
 1472|   644k|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|   644k|                })
 1474|   644k|            }
_RNvXs6_NtNtNtCs3MLxXZhMri9_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right25Cs1K30B1NpY8V_11rand_chacha:
 1480|   644k|            fn $name(self) -> Self {
 1481|   644k|                Self::new(unsafe {
 1482|   644k|                    _mm256_or_si256(
 1483|   644k|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|   644k|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|   644k|                    )
 1486|   644k|                })
 1487|   644k|            }
_RNvXsX_NtNtCs3MLxXZhMri9_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types5StoreNtB7_14vec128_storageE6unpackCs1K30B1NpY8V_11rand_chacha:
   52|   241k|            unsafe fn unpack(x: vec128_storage) -> Self {
   53|   241k|                Self::new(x.sse2)
   54|   241k|            }
_RNvXsc_NtNtNtCs3MLxXZhMri9_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words1230Cs1K30B1NpY8V_11rand_chacha:
 1582|   644k|        fn shuffle_lane_words1230(self) -> Self {
 1583|   644k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b1001_0011) })
 1584|   644k|        }
_RNvXsc_NtNtNtCs3MLxXZhMri9_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words2301Cs1K30B1NpY8V_11rand_chacha:
 1586|   644k|        fn shuffle_lane_words2301(self) -> Self {
 1587|   644k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0100_1110) })
 1588|   644k|        }
_RNvXsc_NtNtNtCs3MLxXZhMri9_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words3012Cs1K30B1NpY8V_11rand_chacha:
 1590|   644k|        fn shuffle_lane_words3012(self) -> Self {
 1591|   644k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0011_1001) })
 1592|   644k|        }
_RNvXse_NtNtNtCs3MLxXZhMri9_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types5StoreNtB9_14vec512_storageE6unpackCs1K30B1NpY8V_11rand_chacha:
 1602|  26.8k|        unsafe fn unpack(p: vec512_storage) -> Self {
 1603|  26.8k|            Self::new([
 1604|  26.8k|                u32x4x2_avx2::unpack(p.avx[0]),
 1605|  26.8k|                u32x4x2_avx2::unpack(p.avx[1]),
 1606|  26.8k|            ])
 1607|  26.8k|        }
_RNvXsf_NtNtNtCs3MLxXZhMri9_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E10from_lanesCs1K30B1NpY8V_11rand_chacha:
 1617|   107k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 4]) -> Self {
 1618|   107k|            let ab = u32x4x2_avx2::from_lanes([x[0], x[1]]);
 1619|   107k|            let cd = u32x4x2_avx2::from_lanes([x[2], x[3]]);
 1620|   107k|            Self::new([ab, cd])
 1621|   107k|        }
_RNvXsf_NtNtNtCs3MLxXZhMri9_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E8to_lanesCs1K30B1NpY8V_11rand_chacha:
 1611|   107k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 4] {
 1612|   107k|            let [a, b] = self.0[0].to_lanes();
 1613|   107k|            let [c, d] = self.0[1].to_lanes();
 1614|   107k|            [a, b, c, d]
 1615|   107k|        }
_RNvXsl_NtNtCs3MLxXZhMri9_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE6insertCs1K30B1NpY8V_11rand_chacha:
  523|   376k|    fn insert(self, v: u32, i: u32) -> Self {
  524|   376k|        Self::new(unsafe {
  525|   376k|            match i {
  526|   188k|                0 => _mm_insert_epi32(self.x, v as i32, 0),
  527|   188k|                1 => _mm_insert_epi32(self.x, v as i32, 1),
  528|      0|                2 => _mm_insert_epi32(self.x, v as i32, 2),
  529|      0|                3 => _mm_insert_epi32(self.x, v as i32, 3),
  530|      0|                _ => unreachable!(),
  531|       |            }
  532|       |        })
  533|   376k|    }
_RNvXsl_NtNtCs3MLxXZhMri9_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE7extractCs1K30B1NpY8V_11rand_chacha:
  519|   107k|    fn extract(self, i: u32) -> u32 {
  520|   107k|        self.to_lanes()[i as usize]
  521|   107k|    }
_RNvXsq_NtNtNtCs3MLxXZhMri9_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCsjv2Y2xFO4ua_4core3ops5arith9AddAssign10add_assignCs1K30B1NpY8V_11rand_chacha:
 1527|  2.57M|                fn $assign_fn(&mut self, rhs: Self) {
 1528|  2.57M|                    *self = self.$bin_fn(rhs);
 1529|  2.57M|                }
_RNvXsr_NtNtNtCs3MLxXZhMri9_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCsjv2Y2xFO4ua_4core3ops3bit6BitXor6bitxorCs1K30B1NpY8V_11rand_chacha:
 1543|  2.57M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  2.57M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  2.57M|                }
_RNvXsv_NtNtNtCs3MLxXZhMri9_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCsjv2Y2xFO4ua_4core3ops5arith3Add3addCs1K30B1NpY8V_11rand_chacha:
 1543|  2.57M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  2.57M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  2.57M|                }
_RNvXsY_NtNtCs3MLxXZhMri9_10ppv_lite866x86_644sse2NtB7_14vec128_storageINtNtCsjv2Y2xFO4ua_4core7convert4FromINtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEE4fromCs1K30B1NpY8V_11rand_chacha:
   58|  27.0k|            fn from(x: $vec<S3, S4, NI>) -> Self {
   59|  27.0k|                vec128_storage { sse2: x.x }
   60|  27.0k|            }
_RNvXsj_NtNtNtCs3MLxXZhMri9_10ppv_lite866x86_644sse24avx2NtB9_14vec512_storageINtNtCsjv2Y2xFO4ua_4core7convert4FromINtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EE4fromCs1K30B1NpY8V_11rand_chacha:
 1683|  26.8k|        fn from(x: u32x4x4_avx2<NI>) -> Self {
 1684|  26.8k|            Self {
 1685|  26.8k|                avx: [
 1686|  26.8k|                    vec256_storage { avx: x.0[0].x },
 1687|  26.8k|                    vec256_storage { avx: x.0[1].x },
 1688|  26.8k|                ],
 1689|  26.8k|            }
 1690|  26.8k|        }

_RINvXs2_NtNtCsazfGk0giXwf_4rand13distributions7integerNtB8_8StandardINtNtB8_12distribution12DistributionoE6sampleNtNtNtBa_4rngs6thread9ThreadRngECscuJmoqhSOSr_5oxttl:
   51|   429k|    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u128 {
   52|   429k|        // Use LE; we explicitly generate one value before the next.
   53|   429k|        let x = u128::from(rng.next_u64());
   54|   429k|        let y = u128::from(rng.next_u64());
   55|   429k|        (y << 64) | x
   56|   429k|    }

_RINvCsazfGk0giXwf_4rand6randomoECscuJmoqhSOSr_5oxttl:
  183|   429k|pub fn random<T>() -> T
  184|   429k|where Standard: Distribution<T> {
  185|   429k|    thread_rng().gen()
  186|   429k|}

_RINvYNtNtNtCsazfGk0giXwf_4rand4rngs6thread9ThreadRngNtNtB9_3rng3Rng3genoECscuJmoqhSOSr_5oxttl:
   93|   429k|    fn gen<T>(&mut self) -> T
   94|   429k|    where Standard: Distribution<T> {
   95|   429k|        Standard.sample(self)
   96|   429k|    }

_RNvXs_NtNtNtCsazfGk0giXwf_4rand4rngs7adapter9reseedingINtB4_12ReseedingRngNtNtCs1K30B1NpY8V_11rand_chacha6chacha12ChaCha12CoreNtNtCs1VwvFboG3Qn_9rand_core2os5OsRngENtB24_7RngCore8next_u64CscuJmoqhSOSr_5oxttl:
  124|   859k|    fn next_u64(&mut self) -> u64 {
  125|   859k|        self.0.next_u64()
  126|   859k|    }
_RNvMNtNtNtCsazfGk0giXwf_4rand4rngs7adapter9reseedingINtB2_12ReseedingRngNtNtCs1K30B1NpY8V_11rand_chacha6chacha12ChaCha12CoreNtNtCs1VwvFboG3Qn_9rand_core2os5OsRngE3newB8_:
  101|      1|    pub fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  102|      1|        ReseedingRng(BlockRng::new(ReseedingCore::new(rng, threshold, reseeder)))
  103|      1|    }
_RNvXs2_NtNtNtCsazfGk0giXwf_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs1K30B1NpY8V_11rand_chacha6chacha12ChaCha12CoreNtNtCs1VwvFboG3Qn_9rand_core2os5OsRngENtNtB26_5block12BlockRngCore8generateBb_:
  173|  26.8k|    fn generate(&mut self, results: &mut Self::Results) {
  174|  26.8k|        let global_fork_counter = fork::get_fork_counter();
  175|  26.8k|        if self.bytes_until_reseed <= 0 || self.is_forked(global_fork_counter) {
  176|       |            // We get better performance by not calling only `reseed` here
  177|       |            // and continuing with the rest of the function, but by directly
  178|       |            // returning from a non-inlined function.
  179|    104|            return self.reseed_and_generate(results, global_fork_counter);
  180|  26.7k|        }
  181|  26.7k|        let num_bytes = results.as_ref().len() * size_of::<Self::Item>();
  182|  26.7k|        self.bytes_until_reseed -= num_bytes as i64;
  183|  26.7k|        self.inner.generate(results);
  184|  26.8k|    }
_RNvMs3_NtNtNtCsazfGk0giXwf_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs1K30B1NpY8V_11rand_chacha6chacha12ChaCha12CoreNtNtCs1VwvFboG3Qn_9rand_core2os5OsRngE3newBb_:
  193|      1|    fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  194|      1|        use ::core::i64::MAX;
  195|      1|        fork::register_fork_handler();
  196|       |
  197|       |        // Because generating more values than `i64::MAX` takes centuries on
  198|       |        // current hardware, we just clamp to that value.
  199|       |        // Also we set a threshold of 0, which indicates no limit, to that
  200|       |        // value.
  201|      1|        let threshold = if threshold == 0 {
  202|      0|            MAX
  203|      1|        } else if threshold <= MAX as u64 {
  204|      1|            threshold as i64
  205|       |        } else {
  206|      0|            MAX
  207|       |        };
  208|       |
  209|      1|        ReseedingCore {
  210|      1|            inner: rng,
  211|      1|            reseeder,
  212|      1|            threshold: threshold as i64,
  213|      1|            bytes_until_reseed: threshold as i64,
  214|      1|            fork_counter: 0,
  215|      1|        }
  216|      1|    }
_RNvMs3_NtNtNtCsazfGk0giXwf_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs1K30B1NpY8V_11rand_chacha6chacha12ChaCha12CoreNtNtCs1VwvFboG3Qn_9rand_core2os5OsRngE6reseedBb_:
  219|    104|    fn reseed(&mut self) -> Result<(), Error> {
  220|    104|        R::from_rng(&mut self.reseeder).map(|result| {
  221|       |            self.bytes_until_reseed = self.threshold;
  222|       |            self.inner = result
  223|    104|        })
  224|    104|    }
_RNCNvMs3_NtNtNtCsazfGk0giXwf_4rand4rngs7adapter9reseedingINtB7_13ReseedingCoreNtNtCs1K30B1NpY8V_11rand_chacha6chacha12ChaCha12CoreNtNtCs1VwvFboG3Qn_9rand_core2os5OsRngE6reseed0Bd_:
  220|    104|        R::from_rng(&mut self.reseeder).map(|result| {
  221|    104|            self.bytes_until_reseed = self.threshold;
  222|    104|            self.inner = result
  223|    104|        })
_RNvMs3_NtNtNtCsazfGk0giXwf_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs1K30B1NpY8V_11rand_chacha6chacha12ChaCha12CoreNtNtCs1VwvFboG3Qn_9rand_core2os5OsRngE9is_forkedBb_:
  226|  26.8k|    fn is_forked(&self, global_fork_counter: usize) -> bool {
  227|  26.8k|        // In theory, on 32-bit platforms, it is possible for
  228|  26.8k|        // `global_fork_counter` to wrap around after ~4e9 forks.
  229|  26.8k|        //
  230|  26.8k|        // This check will detect a fork in the normal case where
  231|  26.8k|        // `fork_counter < global_fork_counter`, and also when the difference
  232|  26.8k|        // between both is greater than `isize::MAX` (wrapped around).
  233|  26.8k|        //
  234|  26.8k|        // It will still fail to detect a fork if there have been more than
  235|  26.8k|        // `isize::MAX` forks, without any reseed in between. Seems unlikely
  236|  26.8k|        // enough.
  237|  26.8k|        (self.fork_counter.wrapping_sub(global_fork_counter) as isize) < 0
  238|  26.8k|    }
_RNvMs3_NtNtNtCsazfGk0giXwf_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs1K30B1NpY8V_11rand_chacha6chacha12ChaCha12CoreNtNtCs1VwvFboG3Qn_9rand_core2os5OsRngE19reseed_and_generateBb_:
  241|    104|    fn reseed_and_generate(
  242|    104|        &mut self, results: &mut <Self as BlockRngCore>::Results, global_fork_counter: usize,
  243|    104|    ) {
  244|    104|        #![allow(clippy::if_same_then_else)] // false positive
  245|    104|        if self.is_forked(global_fork_counter) {
  246|      0|            info!("Fork detected, reseeding RNG");
  247|    104|        } else {
  248|    104|            trace!("Reseeding RNG (periodic reseed)");
  249|    104|        }
  250|       |
  251|    104|        let num_bytes = results.as_ref().len() * size_of::<<R as BlockRngCore>::Item>();
  252|       |
  253|    104|        if let Err(e) = self.reseed() {
  254|      0|            warn!("Reseeding RNG failed: {}", e);
  255|      0|            let _ = e;
  256|    104|        }
  257|    104|        self.fork_counter = global_fork_counter;
  258|    104|
  259|    104|        self.bytes_until_reseed = self.threshold - num_bytes as i64;
  260|    104|        self.inner.generate(results);
  261|    104|    }
_RNvNtNtNtNtCsazfGk0giXwf_4rand4rngs7adapter9reseeding4fork16get_fork_counter:
  307|  26.8k|    pub fn get_fork_counter() -> usize {
  308|  26.8k|        RESEEDING_RNG_FORK_COUNTER.load(Ordering::Relaxed)
  309|  26.8k|    }
_RNvNtNtNtNtCsazfGk0giXwf_4rand4rngs7adapter9reseeding4fork21register_fork_handler:
  317|      1|    pub fn register_fork_handler() {
  318|      1|        static REGISTER: Once = Once::new();
  319|      1|        REGISTER.call_once(|| {
  320|       |            // Bump the counter before and after forking (see #1169):
  321|       |            let ret = unsafe { libc::pthread_atfork(
  322|       |                Some(fork_handler),
  323|       |                Some(fork_handler),
  324|       |                Some(fork_handler),
  325|       |            ) };
  326|       |            if ret != 0 {
  327|       |                panic!("libc::pthread_atfork failed with code {}", ret);
  328|       |            }
  329|      1|        });
  330|      1|    }
_RNCNvNtNtNtNtCsazfGk0giXwf_4rand4rngs7adapter9reseeding4fork21register_fork_handler0Bb_:
  319|      1|        REGISTER.call_once(|| {
  320|      1|            // Bump the counter before and after forking (see #1169):
  321|      1|            let ret = unsafe { libc::pthread_atfork(
  322|      1|                Some(fork_handler),
  323|      1|                Some(fork_handler),
  324|      1|                Some(fork_handler),
  325|      1|            ) };
  326|      1|            if ret != 0 {
  327|      0|                panic!("libc::pthread_atfork failed with code {}", ret);
  328|      1|            }
  329|      1|        });

_RNvXs_NtNtCsazfGk0giXwf_4rand4rngs6threadNtB4_9ThreadRngNtCs1VwvFboG3Qn_9rand_core7RngCore8next_u64:
  109|   859k|    fn next_u64(&mut self) -> u64 {
  110|   859k|        // SAFETY: We must make sure to stop using `rng` before anyone else
  111|   859k|        // creates another mutable reference
  112|   859k|        let rng = unsafe { &mut *self.rng.get() };
  113|   859k|        rng.next_u64()
  114|   859k|    }
_RNvNtNtCsazfGk0giXwf_4rand4rngs6thread10thread_rng:
   88|   429k|pub fn thread_rng() -> ThreadRng {
   89|   429k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
   90|   429k|    ThreadRng { rng }
   91|   429k|}
_RNCNvNtNtCsazfGk0giXwf_4rand4rngs6thread10thread_rng0B7_:
   89|   429k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
_RNCNvNvNtNtCsazfGk0giXwf_4rand4rngs6thread14THREAD_RNG_KEY7___getit0B9_:
   67|      1|thread_local!(
   68|      1|    // We require Rc<..> to avoid premature freeing when thread_rng is used
   69|      1|    // within thread-local destructors. See #968.
   70|      1|    static THREAD_RNG_KEY: Rc<UnsafeCell<ReseedingRng<Core, OsRng>>> = {
   71|      1|        let r = Core::from_rng(OsRng).unwrap_or_else(|err|
   72|      1|                panic!("could not initialize thread_rng: {}", err));
   73|      1|        let rng = ReseedingRng::new(r,
   74|      1|                                    THREAD_RNG_RESEED_THRESHOLD,
   75|      1|                                    OsRng);
   76|      1|        Rc::new(UnsafeCell::new(rng))
   77|      1|    }
   78|      1|);

_RNvXsm_NtCs1K30B1NpY8V_11rand_chacha6chachaNtB5_12ChaCha12CoreNtNtCs1VwvFboG3Qn_9rand_core5block12BlockRngCore8generateCsazfGk0giXwf_4rand:
   89|  26.8k|            fn generate(&mut self, r: &mut Self::Results) {
   90|  26.8k|                // Fill slice of words by writing to equivalent slice of bytes, then fixing endianness.
   91|  26.8k|                self.state.refill4($rounds, unsafe {
   92|  26.8k|                    &mut *(&mut *r as *mut Array64<u32> as *mut [u8; 256])
   93|  26.8k|                });
   94|  1.71M|                for x in r.as_mut() {
   95|  1.71M|                    *x = x.to_le();
   96|  1.71M|                }
   97|  26.8k|            }
_RNvXsn_NtCs1K30B1NpY8V_11rand_chacha6chachaNtB5_12ChaCha12CoreNtCs1VwvFboG3Qn_9rand_core11SeedableRng9from_seedCsazfGk0giXwf_4rand:
  103|    105|            fn from_seed(seed: Self::Seed) -> Self {
  104|    105|                $ChaChaXCore { state: ChaCha::new(&seed, &[0u8; 8]) }
  105|    105|            }
_RNvXs_NtCs1K30B1NpY8V_11rand_chacha6chachaINtB4_7Array64mEINtNtCsjv2Y2xFO4ua_4core7convert5AsRefSmE6as_refB6_:
   46|  1.77M|    fn as_ref(&self) -> &[T] {
   47|  1.77M|        &self.0
   48|  1.77M|    }
_RNvXs0_NtCs1K30B1NpY8V_11rand_chacha6chachaINtB5_7Array64mEINtNtCsjv2Y2xFO4ua_4core7convert5AsMutSmE6as_mutB7_:
   51|  26.8k|    fn as_mut(&mut self) -> &mut [T] {
   52|  26.8k|        &mut self.0
   53|  26.8k|    }
_RNvXNtCs1K30B1NpY8V_11rand_chacha6chachaINtB2_7Array64mENtNtCsjv2Y2xFO4ua_4core7default7Default7defaultB4_:
   32|      1|    fn default() -> Self {
   33|      1|        Self([
   34|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   35|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   36|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   37|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   38|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   39|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   40|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   41|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   42|      1|        ])
   43|      1|    }

_RNvMNtCs1K30B1NpY8V_11rand_chacha4gutsNtB2_6ChaCha3new:
   72|    105|    pub fn new(key: &[u8; 32], nonce: &[u8]) -> Self {
   73|    105|        init_chacha(key, nonce)
   74|    105|    }
_RNvMNtCs1K30B1NpY8V_11rand_chacha4gutsNtB2_6ChaCha7refill4:
   84|  26.8k|    pub fn refill4(&mut self, drounds: u32, out: &mut [u8; BUFSZ]) {
   85|  26.8k|        refill_wide(self, drounds, out)
   86|  26.8k|    }
_RINvNtCs1K30B1NpY8V_11rand_chacha4guts5roundINtNtCs3MLxXZhMri9_10ppv_lite864soft2x2INtNtNtNtBL_6x86_644sse24avx212u32x4x2_avx2NtB1q_4NoNIENtB1o_2G0EEB4_:
   43|   322k|pub(crate) fn round<V: ArithOps + BitOps32>(mut x: State<V>) -> State<V> {
   44|   322k|    x.a += x.b;
   45|   322k|    x.d = (x.d ^ x.a).rotate_each_word_right16();
   46|   322k|    x.c += x.d;
   47|   322k|    x.b = (x.b ^ x.c).rotate_each_word_right20();
   48|   322k|    x.a += x.b;
   49|   322k|    x.d = (x.d ^ x.a).rotate_each_word_right24();
   50|   322k|    x.c += x.d;
   51|   322k|    x.b = (x.b ^ x.c).rotate_each_word_right25();
   52|   322k|    x
   53|   322k|}
_RINvNtCs1K30B1NpY8V_11rand_chacha4guts11diagonalizeINtNtCs3MLxXZhMri9_10ppv_lite864soft2x2INtNtNtNtBS_6x86_644sse24avx212u32x4x2_avx2NtB1x_4NoNIENtB1v_2G0EEB4_:
   56|   161k|pub(crate) fn diagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   57|   161k|    x.b = x.b.shuffle_lane_words3012();
   58|   161k|    x.c = x.c.shuffle_lane_words2301();
   59|   161k|    x.d = x.d.shuffle_lane_words1230();
   60|   161k|    x
   61|   161k|}
_RINvNtCs1K30B1NpY8V_11rand_chacha4guts13undiagonalizeINtNtCs3MLxXZhMri9_10ppv_lite864soft2x2INtNtNtNtBU_6x86_644sse24avx212u32x4x2_avx2NtB1z_4NoNIENtB1x_2G0EEB4_:
   63|   161k|pub(crate) fn undiagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   64|   161k|    x.b = x.b.shuffle_lane_words1230();
   65|   161k|    x.c = x.c.shuffle_lane_words2301();
   66|   161k|    x.d = x.d.shuffle_lane_words3012();
   67|   161k|    x
   68|   161k|}
_RINvMNtCs1K30B1NpY8V_11rand_chacha4gutsNtB3_6ChaCha5pos64INtNtCs3MLxXZhMri9_10ppv_lite866x86_6411Avx2MachineNtBW_4NoNIEEB5_:
   77|  53.7k|    fn pos64<M: Machine>(&self, m: M) -> u64 {
   78|  53.7k|        let d: M::u32x4 = m.unpack(self.d);
   79|  53.7k|        ((d.extract(1) as u64) << 32) | d.extract(0) as u64
   80|  53.7k|    }
_RINvNtCs1K30B1NpY8V_11rand_chacha4guts16refill_wide_implINtNtCs3MLxXZhMri9_10ppv_lite866x86_6411Avx2MachineNtBV_4NoNIEEB4_:
  116|  26.8k|fn refill_wide_impl<Mach: Machine>(
  117|  26.8k|    m: Mach, state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ],
  118|  26.8k|) {
  119|  26.8k|    let k = m.vec([0x6170_7865, 0x3320_646e, 0x7962_2d32, 0x6b20_6574]);
  120|  26.8k|    let mut pos = state.pos64(m);
  121|  26.8k|    let d0: Mach::u32x4 = m.unpack(state.d);
  122|  26.8k|    pos = pos.wrapping_add(1);
  123|  26.8k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  124|  26.8k|    pos = pos.wrapping_add(1);
  125|  26.8k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  126|  26.8k|    pos = pos.wrapping_add(1);
  127|  26.8k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  128|  26.8k|
  129|  26.8k|    let b = m.unpack(state.b);
  130|  26.8k|    let c = m.unpack(state.c);
  131|  26.8k|    let mut x = State {
  132|  26.8k|        a: Mach::u32x4x4::from_lanes([k, k, k, k]),
  133|  26.8k|        b: Mach::u32x4x4::from_lanes([b, b, b, b]),
  134|  26.8k|        c: Mach::u32x4x4::from_lanes([c, c, c, c]),
  135|  26.8k|        d: m.unpack(Mach::u32x4x4::from_lanes([d0, d1, d2, d3]).into()),
  136|  26.8k|    };
  137|   161k|    for _ in 0..drounds {
  138|   161k|        x = round(x);
  139|   161k|        x = undiagonalize(round(diagonalize(x)));
  140|   161k|    }
  141|  26.8k|    let mut pos = state.pos64(m);
  142|  26.8k|    let d0: Mach::u32x4 = m.unpack(state.d);
  143|  26.8k|    pos = pos.wrapping_add(1);
  144|  26.8k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  145|  26.8k|    pos = pos.wrapping_add(1);
  146|  26.8k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  147|  26.8k|    pos = pos.wrapping_add(1);
  148|  26.8k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  149|  26.8k|    pos = pos.wrapping_add(1);
  150|  26.8k|    let d4 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  151|  26.8k|
  152|  26.8k|    let (a, b, c, d) = (
  153|  26.8k|        x.a.to_lanes(),
  154|  26.8k|        x.b.to_lanes(),
  155|  26.8k|        x.c.to_lanes(),
  156|  26.8k|        x.d.to_lanes(),
  157|  26.8k|    );
  158|  26.8k|    let sb = m.unpack(state.b);
  159|  26.8k|    let sc = m.unpack(state.c);
  160|  26.8k|    let sd = [m.unpack(state.d), d1, d2, d3];
  161|  26.8k|    state.d = d4.into();
  162|  26.8k|    let mut words = out.chunks_exact_mut(16);
  163|   107k|    for ((((&a, &b), &c), &d), &sd) in a.iter().zip(&b).zip(&c).zip(&d).zip(&sd) {
  164|   107k|        (a + k).write_le(words.next().unwrap());
  165|   107k|        (b + sb).write_le(words.next().unwrap());
  166|   107k|        (c + sc).write_le(words.next().unwrap());
  167|   107k|        (d + sd).write_le(words.next().unwrap());
  168|   107k|    }
  169|  26.8k|}
_RNvNtCs1K30B1NpY8V_11rand_chacha4guts10read_u32le:
  229|    210|fn read_u32le(xs: &[u8]) -> u32 {
  230|    210|    assert_eq!(xs.len(), 4);
  231|    210|    u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24)
  232|    210|}
_RINvNvNtCs1K30B1NpY8V_11rand_chacha4guts11refill_wide7fn_implINtNtCs3MLxXZhMri9_10ppv_lite866x86_6411Avx2MachineNtB10_4NoNIEEB6_:
  172|  26.8k|    fn refill_wide(state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ]) {
  173|  26.8k|        refill_wide_impl(m, state, drounds, out);
  174|  26.8k|    }
_RINvNvNtCs1K30B1NpY8V_11rand_chacha4guts11init_chacha7fn_implINtNtCs3MLxXZhMri9_10ppv_lite866x86_6410SseMachineNtB10_5YesS3NtB10_5YesS4NtB10_4NoNIEEB6_:
  235|    105|    fn init_chacha(key: &[u8; 32], nonce: &[u8]) -> ChaCha {
  236|    105|        let ctr_nonce = [
  237|       |            0,
  238|    105|            if nonce.len() == 12 {
  239|      0|                read_u32le(&nonce[0..4])
  240|       |            } else {
  241|    105|                0
  242|       |            },
  243|    105|            read_u32le(&nonce[nonce.len() - 8..nonce.len() - 4]),
  244|    105|            read_u32le(&nonce[nonce.len() - 4..]),
  245|    105|        ];
  246|    105|        let key0: Mach::u32x4 = m.read_le(&key[..16]);
  247|    105|        let key1: Mach::u32x4 = m.read_le(&key[16..]);
  248|    105|        ChaCha {
  249|    105|            b: key0.into(),
  250|    105|            c: key1.into(),
  251|    105|            d: ctr_nonce.into(),
  252|    105|        }

_RNCNvXs0_NtCs1VwvFboG3Qn_9rand_core5blockINtB7_8BlockRngINtNtNtNtCsazfGk0giXwf_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs1K30B1NpY8V_11rand_chacha6chacha12ChaCha12CoreNtNtB9_2os5OsRngEENtB9_7RngCore8next_u640CscuJmoqhSOSr_5oxttl:
  198|   859k|        let read_u64 = |results: &[u32], index| {
  199|   859k|            let data = &results[index..=index + 1];
  200|   859k|            u64::from(data[1]) << 32 | u64::from(data[0])
  201|   859k|        };
_RNvXs0_NtCs1VwvFboG3Qn_9rand_core5blockINtB5_8BlockRngINtNtNtNtCsazfGk0giXwf_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs1K30B1NpY8V_11rand_chacha6chacha12ChaCha12CoreNtNtB7_2os5OsRngEENtB7_7RngCore8next_u64CscuJmoqhSOSr_5oxttl:
  197|   859k|    fn next_u64(&mut self) -> u64 {
  198|   859k|        let read_u64 = |results: &[u32], index| {
  199|       |            let data = &results[index..=index + 1];
  200|       |            u64::from(data[1]) << 32 | u64::from(data[0])
  201|       |        };
  202|       |
  203|   859k|        let len = self.results.as_ref().len();
  204|   859k|
  205|   859k|        let index = self.index;
  206|   859k|        if index < len - 1 {
  207|   832k|            self.index += 2;
  208|   832k|            // Read an u64 from the current index
  209|   832k|            read_u64(self.results.as_ref(), index)
  210|  26.8k|        } else if index >= len {
  211|  26.8k|            self.generate_and_set(2);
  212|  26.8k|            read_u64(self.results.as_ref(), 0)
  213|       |        } else {
  214|      0|            let x = u64::from(self.results.as_ref()[len - 1]);
  215|      0|            self.generate_and_set(1);
  216|      0|            let y = u64::from(self.results.as_ref()[0]);
  217|      0|            (y << 32) | x
  218|       |        }
  219|   859k|    }
_RNvMs_NtCs1VwvFboG3Qn_9rand_core5blockINtB4_8BlockRngINtNtNtNtCsazfGk0giXwf_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs1K30B1NpY8V_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE16generate_and_setBY_:
  174|  26.8k|    pub fn generate_and_set(&mut self, index: usize) {
  175|  26.8k|        assert!(index < self.results.as_ref().len());
  176|  26.8k|        self.core.generate(&mut self.results);
  177|  26.8k|        self.index = index;
  178|  26.8k|    }
_RNvMs_NtCs1VwvFboG3Qn_9rand_core5blockINtB4_8BlockRngINtNtNtNtCsazfGk0giXwf_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs1K30B1NpY8V_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE3newBY_:
  145|      1|    pub fn new(core: R) -> BlockRng<R> {
  146|      1|        let results_empty = R::Results::default();
  147|      1|        BlockRng {
  148|      1|            core,
  149|      1|            index: results_empty.as_ref().len(),
  150|      1|            results: results_empty,
  151|      1|        }
  152|      1|    }

_RINvYNtNtCs1K30B1NpY8V_11rand_chacha6chacha12ChaCha12CoreNtCs1VwvFboG3Qn_9rand_core11SeedableRng8from_rngNtNtBV_2os5OsRngECsazfGk0giXwf_4rand:
  390|      1|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|      1|        let mut seed = Self::Seed::default();
  392|      1|        rng.try_fill_bytes(seed.as_mut())?;
  393|      1|        Ok(Self::from_seed(seed))
  394|      1|    }
_RINvYNtNtCs1K30B1NpY8V_11rand_chacha6chacha12ChaCha12CoreNtCs1VwvFboG3Qn_9rand_core11SeedableRng8from_rngQNtNtBV_2os5OsRngECsazfGk0giXwf_4rand:
  390|    104|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|    104|        let mut seed = Self::Seed::default();
  392|    104|        rng.try_fill_bytes(seed.as_mut())?;
  393|    104|        Ok(Self::from_seed(seed))
  394|    104|    }
_RNvXs_Cs1VwvFboG3Qn_9rand_coreQNtNtB4_2os5OsRngNtB4_7RngCore14try_fill_bytesCsazfGk0giXwf_4rand:
  441|    104|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
  442|    104|        (**self).try_fill_bytes(dest)
  443|    104|    }

_RNvXs_NtCs1VwvFboG3Qn_9rand_core2osNtB4_5OsRngNtB6_7RngCore14try_fill_bytes:
   67|    105|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
   68|    105|        getrandom(dest)?;
   69|    105|        Ok(())
   70|    105|    }

_RNvNvNtNtCsazfGk0giXwf_4rand4rngs6thread14THREAD_RNG_KEY6___initB7_:
   82|      1|            fn __init() -> $t { $init }
_RNvNvNtNtCsazfGk0giXwf_4rand4rngs6thread14THREAD_RNG_KEY7___getitB7_:
   85|   429k|            unsafe fn __getit(
   86|   429k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   87|   429k|            ) -> $crate::option::Option<&'static $t> {
   88|   429k|                #[thread_local]
   89|   429k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   90|   429k|                    $crate::thread::local_impl::Key::<$t>::new();
   91|   429k|
   92|   429k|                unsafe {
   93|   429k|                    __KEY.get(move || {
   94|       |                        if let $crate::option::Option::Some(init) = init {
   95|       |                            if let $crate::option::Option::Some(value) = init.take() {
   96|       |                                return value;
   97|       |                            } else if $crate::cfg!(debug_assertions) {
   98|       |                                $crate::unreachable!("missing default value");
   99|       |                            }
  100|       |                        }
  101|       |                        __init()
  102|   429k|                    })
  103|   429k|                }
  104|   429k|            }

_RNvCs3ABq5th2z32_4trig24count_triple_blank_nodes:
   41|    780|fn count_triple_blank_nodes(triple: &Triple) -> usize {
   42|    780|    (match &triple.subject {
   43|      8|        Subject::BlankNode(_) => 1,
   44|     66|        Subject::Triple(t) => count_triple_blank_nodes(t),
   45|    706|        _ => 0,
   46|    780|    }) + (match &triple.object {
   47|    128|        Term::BlankNode(_) => 1,
   48|      0|        Term::Triple(t) => count_triple_blank_nodes(t),
   49|    652|        _ => 0,
   50|       |    })
   51|    780|}
_RNvCs3ABq5th2z32_4trig22count_quad_blank_nodes:
   53|  84.2k|fn count_quad_blank_nodes(quad: &Quad) -> usize {
   54|  84.2k|    (match &quad.subject {
   55|  68.6k|        Subject::BlankNode(_) => 1,
   56|    278|        Subject::Triple(t) => count_triple_blank_nodes(t),
   57|  15.3k|        _ => 0,
   58|  84.2k|    }) + (match &quad.object {
   59|  48.2k|        Term::BlankNode(_) => 1,
   60|    436|        Term::Triple(t) => count_triple_blank_nodes(t),
   61|  35.5k|        _ => 0,
   62|  84.2k|    }) + usize::from(matches!(quad.graph_name, GraphName::BlankNode(_)))
   63|  84.2k|}
_RNvCs3ABq5th2z32_4trig15serialize_quads:
   65|  5.73k|fn serialize_quads(quads: &[Quad]) -> Vec<u8> {
   66|  5.73k|    let mut writer = TriGSerializer::new().serialize_to_write(Vec::new());
   67|  90.0k|    for quad in quads {
   68|  84.2k|        writer.write_quad(quad).unwrap();
   69|  84.2k|    }
   70|  5.73k|    writer.finish().unwrap()
   71|  5.73k|}
_RINvCs3ABq5th2z32_4trig5parseARShj1_EB2_:
    7|  5.73k|fn parse<'a>(
    8|  5.73k|    chunks: impl IntoIterator<Item = &'a [u8]>,
    9|  5.73k|    unchecked: bool,
   10|  5.73k|) -> (Vec<Quad>, Vec<String>) {
   11|  5.73k|    let mut quads = Vec::new();
   12|  5.73k|    let mut errors = Vec::new();
   13|  5.73k|    let mut parser = TriGParser::new()
   14|  5.73k|        .with_quoted_triples()
   15|  5.73k|        .with_base_iri("http://example.com/")
   16|  5.73k|        .unwrap();
   17|  5.73k|    if unchecked {
   18|      0|        parser = parser.unchecked();
   19|  5.73k|    }
   20|  5.73k|    let mut reader = parser.parse();
   21|  11.4k|    for chunk in chunks {
   22|  5.73k|        reader.extend_from_slice(chunk);
   23|   611k|        while let Some(result) = reader.read_next() {
   24|   605k|            match result {
   25|  84.1k|                Ok(quad) => quads.push(quad),
   26|   521k|                Err(error) => errors.push(error.to_string()),
   27|       |            }
   28|       |        }
   29|       |    }
   30|  5.73k|    reader.end();
   31|  8.56k|    while let Some(result) = reader.read_next() {
   32|  2.83k|        match result {
   33|    129|            Ok(quad) => quads.push(quad),
   34|  2.70k|            Err(error) => errors.push(error.to_string()),
   35|       |        }
   36|       |    }
   37|  5.73k|    assert!(reader.is_end());
   38|  5.73k|    (quads, errors)
   39|  5.73k|}
_RINvCs3ABq5th2z32_4trig5parseINtNtNtCsjv2Y2xFO4ua_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_run0EEB2_:
    7|  5.73k|fn parse<'a>(
    8|  5.73k|    chunks: impl IntoIterator<Item = &'a [u8]>,
    9|  5.73k|    unchecked: bool,
   10|  5.73k|) -> (Vec<Quad>, Vec<String>) {
   11|  5.73k|    let mut quads = Vec::new();
   12|  5.73k|    let mut errors = Vec::new();
   13|  5.73k|    let mut parser = TriGParser::new()
   14|  5.73k|        .with_quoted_triples()
   15|  5.73k|        .with_base_iri("http://example.com/")
   16|  5.73k|        .unwrap();
   17|  5.73k|    if unchecked {
   18|      0|        parser = parser.unchecked();
   19|  5.73k|    }
   20|  5.73k|    let mut reader = parser.parse();
   21|   727k|    for chunk in chunks {
   22|   722k|        reader.extend_from_slice(chunk);
   23|  1.32M|        while let Some(result) = reader.read_next() {
   24|   605k|            match result {
   25|  84.1k|                Ok(quad) => quads.push(quad),
   26|   521k|                Err(error) => errors.push(error.to_string()),
   27|       |            }
   28|       |        }
   29|       |    }
   30|  5.73k|    reader.end();
   31|  8.56k|    while let Some(result) = reader.read_next() {
   32|  2.83k|        match result {
   33|    129|            Ok(quad) => quads.push(quad),
   34|  2.70k|            Err(error) => errors.push(error.to_string()),
   35|       |        }
   36|       |    }
   37|  5.73k|    assert!(reader.is_end());
   38|  5.73k|    (quads, errors)
   39|  5.73k|}
_RINvCs3ABq5th2z32_4trig5parseINtNtNtCsjv2Y2xFO4ua_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_runs0_0EEB2_:
    7|  5.73k|fn parse<'a>(
    8|  5.73k|    chunks: impl IntoIterator<Item = &'a [u8]>,
    9|  5.73k|    unchecked: bool,
   10|  5.73k|) -> (Vec<Quad>, Vec<String>) {
   11|  5.73k|    let mut quads = Vec::new();
   12|  5.73k|    let mut errors = Vec::new();
   13|  5.73k|    let mut parser = TriGParser::new()
   14|  5.73k|        .with_quoted_triples()
   15|  5.73k|        .with_base_iri("http://example.com/")
   16|  5.73k|        .unwrap();
   17|  5.73k|    if unchecked {
   18|  5.73k|        parser = parser.unchecked();
   19|  5.73k|    }
   20|  5.73k|    let mut reader = parser.parse();
   21|   727k|    for chunk in chunks {
   22|   722k|        reader.extend_from_slice(chunk);
   23|  1.33M|        while let Some(result) = reader.read_next() {
   24|   608k|            match result {
   25|  90.4k|                Ok(quad) => quads.push(quad),
   26|   517k|                Err(error) => errors.push(error.to_string()),
   27|       |            }
   28|       |        }
   29|       |    }
   30|  5.73k|    reader.end();
   31|  8.63k|    while let Some(result) = reader.read_next() {
   32|  2.89k|        match result {
   33|    140|            Ok(quad) => quads.push(quad),
   34|  2.75k|            Err(error) => errors.push(error.to_string()),
   35|       |        }
   36|       |    }
   37|  5.73k|    assert!(reader.is_end());
   38|  5.73k|    (quads, errors)
   39|  5.73k|}
_RNCNvNvCs3ABq5th2z32_4trig1__19___libfuzzer_sys_run0B5_:
   75|  3.34M|    let (quads, errors) = parse(data.split(|c| *c == 0xFF), false);
_RNCNvNvCs3ABq5th2z32_4trig1__19___libfuzzer_sys_runs_0B5_:
   81|  3.34M|            .filter(|c| *c != 0xFF)
_RNCNvNvCs3ABq5th2z32_4trig1__19___libfuzzer_sys_runs0_0B5_:
   86|  3.34M|    let (quads_unchecked, errors_unchecked) = parse(data.split(|c| *c == 0xFF), true);

_RNvMNtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCs3ABq5th2z32_4trig:
   92|   203k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   93|   203k|        BlankNodeRef(match &self.0 {
   94|  5.29k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   95|   198k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   96|   198k|                id: *id,
   97|   198k|                str: str.as_str(),
   98|   198k|            },
   99|       |        })
  100|   203k|    }
_RNvMs1_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_12BlankNodeRef10into_ownedCs3ABq5th2z32_4trig:
  208|  63.6k|    pub fn into_owned(self) -> BlankNode {
  209|  63.6k|        BlankNode(match self.0 {
  210|    413|            BlankNodeRefContent::Named(id) => BlankNodeContent::Named(id.to_owned()),
  211|  63.2k|            BlankNodeRefContent::Anonymous { id, .. } => BlankNodeContent::Anonymous {
  212|  63.2k|                id,
  213|  63.2k|                str: IdStr::new(id),
  214|  63.2k|            },
  215|       |        })
  216|  63.6k|    }
_RNvMs1_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCs3ABq5th2z32_4trig:
  183|    362|    pub const fn as_str(self) -> &'a str {
  184|    362|        match self.0 {
  185|    227|            BlankNodeRefContent::Named(id) => id,
  186|    135|            BlankNodeRefContent::Anonymous { str, .. } => str,
  187|       |        }
  188|    362|    }
_RNvMs7_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_5IdStr3newCs3ABq5th2z32_4trig:
  259|  63.2k|    fn new(id: u128) -> Self {
  260|  63.2k|        let mut str = [0; 32];
  261|  63.2k|        write!(&mut str[..], "{id:x}").unwrap();
  262|  63.2k|        Self(str)
  263|  63.2k|    }
_RNvMs7_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_5IdStr6as_strCs3ABq5th2z32_4trig:
  266|   198k|    fn as_str(&self) -> &str {
  267|   198k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  268|   198k|        str::from_utf8(&self.0[..len]).unwrap()
  269|   198k|    }
_RNvXs2_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCsjv2Y2xFO4ua_4core3fmt7Display3fmtCs3ABq5th2z32_4trig:
  221|    362|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  222|    362|        write!(f, "_:{}", self.as_str())
  223|    362|    }
_RNvXsF_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_5IdStrNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqCs3ABq5th2z32_4trig:
  254|   118k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsd_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqCs3ABq5th2z32_4trig:
   24|   120k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsi_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqCs3ABq5th2z32_4trig:
   27|   120k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsr_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqCs3ABq5th2z32_4trig:
  142|  68.3k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RNvXsx_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_19BlankNodeRefContentNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqCs3ABq5th2z32_4trig:
  145|  68.3k|#[derive(PartialEq, Eq, Debug, Clone, Copy, Hash)]
_RNvMNtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idCscuJmoqhSOSr_5oxttl:
   66|   113k|    pub fn new_from_unique_id(id: u128) -> Self {
   67|   113k|        Self(BlankNodeContent::Anonymous {
   68|   113k|            id,
   69|   113k|            str: IdStr::new(id),
   70|   113k|        })
   71|   113k|    }
_RNvMNtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCscuJmoqhSOSr_5oxttl:
   92|    136|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   93|    136|        BlankNodeRef(match &self.0 {
   94|     79|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   95|     57|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   96|     57|                id: *id,
   97|     57|                str: str.as_str(),
   98|     57|            },
   99|       |        })
  100|    136|    }
_RNvMs1_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCscuJmoqhSOSr_5oxttl:
  183|   111k|    pub const fn as_str(self) -> &'a str {
  184|   111k|        match self.0 {
  185|    804|            BlankNodeRefContent::Named(id) => id,
  186|   110k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  187|       |        }
  188|   111k|    }
_RNvMs7_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_5IdStr3newCscuJmoqhSOSr_5oxttl:
  259|   542k|    fn new(id: u128) -> Self {
  260|   542k|        let mut str = [0; 32];
  261|   542k|        write!(&mut str[..], "{id:x}").unwrap();
  262|   542k|        Self(str)
  263|   542k|    }
_RNvMs7_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_5IdStr6as_strCscuJmoqhSOSr_5oxttl:
  266|   429k|    fn as_str(&self) -> &str {
  267|   429k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  268|   429k|        str::from_utf8(&self.0[..len]).unwrap()
  269|   429k|    }
_RNvNtCs5bua6W9iSBw_5oxrdf10blank_node13to_integer_idCscuJmoqhSOSr_5oxttl:
  332|   118k|fn to_integer_id(id: &str) -> Option<u128> {
  333|   118k|    let digits = id.as_bytes();
  334|   118k|    let mut value: u128 = 0;
  335|   118k|    if let None | Some(b'0') = digits.first() {
  336|  3.26k|        return None; // No empty string or leading zeros
  337|   115k|    }
  338|  3.67M|    for digit in digits {
  339|  3.56M|        value = value.checked_mul(16)?.checked_add(
  340|  3.56M|            match *digit {
  341|  3.55M|                b'0'..=b'9' => digit - b'0',
  342|  1.41M|                b'a'..=b'f' => digit - b'a' + 10,
  343|  2.24k|                _ => return None,
  344|       |            }
  345|  3.55M|            .into(),
  346|      0|        )?;
  347|       |    }
  348|   113k|    Some(value)
  349|   118k|}
_RNvXs0_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCsjv2Y2xFO4ua_4core7default7Default7defaultCscuJmoqhSOSr_5oxttl:
  113|   171k|    fn default() -> Self {
  114|       |        // We ensure the ID does not start with a number to be also valid with RDF/XML
  115|   429k|        loop {
  116|   429k|            let id = random();
  117|   429k|            let str = IdStr::new(id);
  118|   429k|            if matches!(str.as_str().as_bytes().first(), Some(b'a'..=b'f')) {
  119|   171k|                return Self(BlankNodeContent::Anonymous { id, str });
  120|   258k|            }
  121|       |        }
  122|   171k|    }
_RNvXs2_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCsjv2Y2xFO4ua_4core3fmt7Display3fmtCscuJmoqhSOSr_5oxttl:
  221|   111k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  222|   111k|        write!(f, "_:{}", self.as_str())
  223|   111k|    }
_RNvXsJ_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_5IdStrNtNtCsjv2Y2xFO4ua_4core5clone5Clone5cloneCscuJmoqhSOSr_5oxttl:
  254|   549k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsf_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCsjv2Y2xFO4ua_4core5clone5Clone5cloneCscuJmoqhSOSr_5oxttl:
   24|   556k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsm_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCsjv2Y2xFO4ua_4core5clone5Clone5cloneCscuJmoqhSOSr_5oxttl:
   27|   556k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RINvMNtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedReECscuJmoqhSOSr_5oxttl:
   53|   118k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   54|   118k|        let id = id.into();
   55|   118k|        if let Some(numerical_id) = to_integer_id(&id) {
   56|   113k|            Self::new_from_unique_id(numerical_id)
   57|       |        } else {
   58|  5.75k|            Self(BlankNodeContent::Named(id))
   59|       |        }
   60|   118k|    }
_RNCNvMs7_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  267|  20.6M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
_RNvMNtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idB4_:
   66|  34.4k|    pub fn new_from_unique_id(id: u128) -> Self {
   67|  34.4k|        Self(BlankNodeContent::Anonymous {
   68|  34.4k|            id,
   69|  34.4k|            str: IdStr::new(id),
   70|  34.4k|        })
   71|  34.4k|    }
_RNvMNtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB2_9BlankNode6as_refB4_:
   92|  34.6k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   93|  34.6k|        BlankNodeRef(match &self.0 {
   94|     78|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   95|  34.5k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   96|  34.5k|                id: *id,
   97|  34.5k|                str: str.as_str(),
   98|  34.5k|            },
   99|       |        })
  100|  34.6k|    }
_RNvMs1_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_12BlankNodeRef13new_uncheckedB7_:
  170|  4.23k|    pub fn new_unchecked(id: &'a str) -> Self {
  171|  4.23k|        if let Some(numerical_id) = to_integer_id(id) {
  172|  4.23k|            Self(BlankNodeRefContent::Anonymous {
  173|  4.23k|                id: numerical_id,
  174|  4.23k|                str: id,
  175|  4.23k|            })
  176|       |        } else {
  177|      0|            Self(BlankNodeRefContent::Named(id))
  178|       |        }
  179|  4.23k|    }
_RNvMs1_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strB7_:
  183|  14.7k|    pub const fn as_str(self) -> &'a str {
  184|  14.7k|        match self.0 {
  185|    762|            BlankNodeRefContent::Named(id) => id,
  186|  13.9k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  187|       |        }
  188|  14.7k|    }
_RNvMs1_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_12BlankNodeRef9unique_idB7_:
  200|  47.4k|    pub const fn unique_id(&self) -> Option<u128> {
  201|  47.4k|        match self.0 {
  202|    762|            BlankNodeRefContent::Named(_) => None,
  203|  46.6k|            BlankNodeRefContent::Anonymous { id, .. } => Some(id),
  204|       |        }
  205|  47.4k|    }
_RNvMs1_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_12BlankNodeRef10into_ownedB7_:
  208|    322|    pub fn into_owned(self) -> BlankNode {
  209|    322|        BlankNode(match self.0 {
  210|     78|            BlankNodeRefContent::Named(id) => BlankNodeContent::Named(id.to_owned()),
  211|    244|            BlankNodeRefContent::Anonymous { id, .. } => BlankNodeContent::Anonymous {
  212|    244|                id,
  213|    244|                str: IdStr::new(id),
  214|    244|            },
  215|       |        })
  216|    322|    }
_RNvMs7_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_5IdStr3newB7_:
  259|  34.6k|    fn new(id: u128) -> Self {
  260|  34.6k|        let mut str = [0; 32];
  261|  34.6k|        write!(&mut str[..], "{id:x}").unwrap();
  262|  34.6k|        Self(str)
  263|  34.6k|    }
_RNvMs7_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_5IdStr6as_strB7_:
  266|  34.5k|    fn as_str(&self) -> &str {
  267|  34.5k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  268|  34.5k|        str::from_utf8(&self.0[..len]).unwrap()
  269|  34.5k|    }
_RNvNtCs5bua6W9iSBw_5oxrdf10blank_node13to_integer_idB3_:
  332|  4.23k|fn to_integer_id(id: &str) -> Option<u128> {
  333|  4.23k|    let digits = id.as_bytes();
  334|  4.23k|    let mut value: u128 = 0;
  335|  4.23k|    if let None | Some(b'0') = digits.first() {
  336|      0|        return None; // No empty string or leading zeros
  337|  4.23k|    }
  338|  71.6k|    for digit in digits {
  339|  67.3k|        value = value.checked_mul(16)?.checked_add(
  340|  67.3k|            match *digit {
  341|  67.3k|                b'0'..=b'9' => digit - b'0',
  342|  25.0k|                b'a'..=b'f' => digit - b'a' + 10,
  343|      0|                _ => return None,
  344|       |            }
  345|  67.3k|            .into(),
  346|      0|        )?;
  347|       |    }
  348|  4.23k|    Some(value)
  349|  4.23k|}
_RNvXsf_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCsjv2Y2xFO4ua_4core5clone5Clone5cloneB7_:
   24|    522|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsm_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCsjv2Y2xFO4ua_4core5clone5Clone5cloneB7_:
   27|    522|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsJ_NtCs5bua6W9iSBw_5oxrdf10blank_nodeNtB5_5IdStrNtNtCsjv2Y2xFO4ua_4core5clone5Clone5cloneB7_:
  254|    207|#[derive(PartialEq, Eq, Debug, Clone, Hash)]

_RINvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB3_7Dataset6insertRNtNtB5_6triple4QuadECs3ABq5th2z32_4trig:
  360|  28.9k|    pub fn insert<'a>(&mut self, quad: impl Into<QuadRef<'a>>) -> bool {
  361|  28.9k|        let quad = self.encode_quad(quad.into());
  362|  28.9k|        self.insert_encoded(quad)
  363|  28.9k|    }
_RINvXs3_NtCs5bua6W9iSBw_5oxrdf7datasetNtB6_7DatasetINtNtNtNtCsjv2Y2xFO4ua_4core4iter6traits7collect12FromIteratorRNtNtB8_6triple4QuadE9from_iterINtNtNtBW_5slice4iter4IterB1O_EECs3ABq5th2z32_4trig:
  944|  2.99k|    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self {
  945|  2.99k|        let mut g = Self::new();
  946|  2.99k|        g.extend(iter);
  947|  2.99k|        g
  948|  2.99k|    }
_RINvXs5_NtCs5bua6W9iSBw_5oxrdf7datasetNtB6_7DatasetINtNtNtNtCsjv2Y2xFO4ua_4core4iter6traits7collect6ExtendRNtNtB8_6triple4QuadE6extendINtNtNtBW_5slice4iter4IterB1H_EECs3ABq5th2z32_4trig:
  960|  2.99k|    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  961|  31.9k|        for t in iter {
  962|  28.9k|            self.insert(t);
  963|  28.9k|        }
  964|  2.99k|    }
_RNvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB2_7Dataset3new:
  109|  2.99k|    pub fn new() -> Self {
  110|  2.99k|        Self::default()
  111|  2.99k|    }
_RNvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB2_7Dataset4iter:
  169|  1.49k|    pub fn iter(&self) -> Iter<'_> {
  170|  1.49k|        let iter = self.spog.iter();
  171|  1.49k|        Iter {
  172|  1.49k|            dataset: self,
  173|  1.49k|            inner: iter,
  174|  1.49k|        }
  175|  1.49k|    }
_RNvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB2_7Dataset3len:
  350|  2.99k|    pub fn len(&self) -> usize {
  351|  2.99k|        self.gspo.len()
  352|  2.99k|    }
_RNvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB2_7Dataset14insert_encoded:
  365|  48.0k|    fn insert_encoded(
  366|  48.0k|        &mut self,
  367|  48.0k|        quad: (
  368|  48.0k|            InternedSubject,
  369|  48.0k|            InternedNamedNode,
  370|  48.0k|            InternedTerm,
  371|  48.0k|            InternedGraphName,
  372|  48.0k|        ),
  373|  48.0k|    ) -> bool {
  374|  48.0k|        let (s, p, o, g) = quad;
  375|  48.0k|        self.gspo.insert((g.clone(), s.clone(), p, o.clone()));
  376|  48.0k|        self.gpos.insert((g.clone(), p, o.clone(), s.clone()));
  377|  48.0k|        self.gosp.insert((g.clone(), o.clone(), s.clone(), p));
  378|  48.0k|        self.spog.insert((s.clone(), p, o.clone(), g.clone()));
  379|  48.0k|        self.posg.insert((p, o.clone(), s.clone(), g.clone()));
  380|  48.0k|        self.ospg.insert((o, s, p, g))
  381|  48.0k|    }
_RNvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB2_7Dataset5clear:
  411|  2.99k|    pub fn clear(&mut self) {
  412|  2.99k|        self.gspo.clear();
  413|  2.99k|        self.gpos.clear();
  414|  2.99k|        self.gosp.clear();
  415|  2.99k|        self.spog.clear();
  416|  2.99k|        self.posg.clear();
  417|  2.99k|        self.ospg.clear();
  418|  2.99k|    }
_RNvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB2_7Dataset11encode_quad:
  420|  28.9k|    fn encode_quad(
  421|  28.9k|        &mut self,
  422|  28.9k|        quad: QuadRef<'_>,
  423|  28.9k|    ) -> (
  424|  28.9k|        InternedSubject,
  425|  28.9k|        InternedNamedNode,
  426|  28.9k|        InternedTerm,
  427|  28.9k|        InternedGraphName,
  428|  28.9k|    ) {
  429|  28.9k|        (
  430|  28.9k|            InternedSubject::encoded_into(quad.subject, &mut self.interner),
  431|  28.9k|            InternedNamedNode::encoded_into(quad.predicate, &mut self.interner),
  432|  28.9k|            InternedTerm::encoded_into(quad.object, &mut self.interner),
  433|  28.9k|            InternedGraphName::encoded_into(quad.graph_name, &mut self.interner),
  434|  28.9k|        )
  435|  28.9k|    }
_RNvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB2_7Dataset12encoded_quad:
  437|  9.53k|    fn encoded_quad(
  438|  9.53k|        &self,
  439|  9.53k|        quad: QuadRef<'_>,
  440|  9.53k|    ) -> Option<(
  441|  9.53k|        InternedSubject,
  442|  9.53k|        InternedNamedNode,
  443|  9.53k|        InternedTerm,
  444|  9.53k|        InternedGraphName,
  445|  9.53k|    )> {
  446|  9.53k|        Some((
  447|  9.53k|            self.encoded_subject(quad.subject)?,
  448|  9.53k|            self.encoded_named_node(quad.predicate)?,
  449|  9.53k|            self.encoded_term(quad.object)?,
  450|  9.53k|            self.encoded_graph_name(quad.graph_name)?,
  451|       |        ))
  452|  9.53k|    }
_RNvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB2_7Dataset11decode_spog:
  479|  9.53k|    fn decode_spog(
  480|  9.53k|        &self,
  481|  9.53k|        quad: (
  482|  9.53k|            &InternedSubject,
  483|  9.53k|            &InternedNamedNode,
  484|  9.53k|            &InternedTerm,
  485|  9.53k|            &InternedGraphName,
  486|  9.53k|        ),
  487|  9.53k|    ) -> QuadRef<'_> {
  488|  9.53k|        QuadRef {
  489|  9.53k|            subject: quad.0.decode_from(&self.interner),
  490|  9.53k|            predicate: quad.1.decode_from(&self.interner),
  491|  9.53k|            object: quad.2.decode_from(&self.interner),
  492|  9.53k|            graph_name: quad.3.decode_from(&self.interner),
  493|  9.53k|        }
  494|  9.53k|    }
_RNvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB2_7Dataset12canonicalize:
  541|  2.99k|    pub fn canonicalize(&mut self) {
  542|  2.99k|        let bnodes = self.blank_nodes();
  543|  2.99k|        let quads_per_blank_node = self.quads_per_blank_nodes();
  544|  2.99k|        let (hash, partition) = self.hash_bnodes(
  545|  2.99k|            bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
  546|  2.99k|            &quads_per_blank_node,
  547|  2.99k|        );
  548|  2.99k|        let new_quads = self.distinguish(&hash, &partition, &quads_per_blank_node);
  549|  2.99k|        self.clear();
  550|  22.0k|        for quad in new_quads {
  551|  19.0k|            self.insert_encoded(quad);
  552|  19.0k|        }
  553|  2.99k|    }
_RNvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB2_7Dataset11blank_nodes:
  555|  2.99k|    fn blank_nodes(&self) -> HashSet<InternedBlankNode> {
  556|  2.99k|        let mut bnodes = HashSet::new();
  557|  22.0k|        for (g, s, _, o) in &self.gspo {
  558|  19.0k|            if let InternedSubject::BlankNode(bnode) = s {
  559|  6.05k|                bnodes.insert(*bnode);
  560|  13.0k|            }
  561|       |            #[cfg(feature = "rdf-star")]
  562|  19.0k|            if let InternedSubject::Triple(triple) = s {
  563|    336|                Self::triple_blank_nodes(triple, &mut bnodes);
  564|  18.7k|            }
  565|  19.0k|            if let InternedTerm::BlankNode(bnode) = o {
  566|  2.15k|                bnodes.insert(*bnode);
  567|  16.9k|            }
  568|       |            #[cfg(feature = "rdf-star")]
  569|  19.0k|            if let InternedTerm::Triple(triple) = o {
  570|    634|                Self::triple_blank_nodes(triple, &mut bnodes);
  571|  18.4k|            }
  572|  19.0k|            if let InternedGraphName::BlankNode(bnode) = g {
  573|    250|                bnodes.insert(*bnode);
  574|  18.8k|            }
  575|       |        }
  576|  2.99k|        bnodes
  577|  2.99k|    }
_RNvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB2_7Dataset18triple_blank_nodes:
  580|  1.07k|    fn triple_blank_nodes(triple: &InternedTriple, bnodes: &mut HashSet<InternedBlankNode>) {
  581|  1.07k|        if let InternedSubject::BlankNode(bnode) = &triple.subject {
  582|     16|            bnodes.insert(*bnode);
  583|  1.06k|        } else if let InternedSubject::Triple(t) = &triple.subject {
  584|    106|            Self::triple_blank_nodes(t, bnodes);
  585|    954|        }
  586|  1.07k|        if let InternedTerm::BlankNode(bnode) = &triple.object {
  587|    120|            bnodes.insert(*bnode);
  588|    956|        } else if let InternedTerm::Triple(t) = &triple.object {
  589|      0|            Self::triple_blank_nodes(t, bnodes);
  590|    956|        }
  591|  1.07k|    }
_RNvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB2_7Dataset21quads_per_blank_nodes:
  593|  2.99k|    fn quads_per_blank_nodes(&self) -> QuadsPerBlankNode {
  594|  2.99k|        let mut map: HashMap<_, Vec<_>> = HashMap::new();
  595|  22.0k|        for quad in &self.spog {
  596|  19.0k|            if let InternedSubject::BlankNode(bnode) = &quad.0 {
  597|  6.05k|                map.entry(*bnode).or_default().push(quad.clone());
  598|  13.0k|            }
  599|       |            #[cfg(feature = "rdf-star")]
  600|  19.0k|            if let InternedSubject::Triple(t) = &quad.0 {
  601|    336|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  602|  18.7k|            }
  603|  19.0k|            if let InternedTerm::BlankNode(bnode) = &quad.2 {
  604|  2.15k|                map.entry(*bnode).or_default().push(quad.clone());
  605|  16.9k|            }
  606|       |            #[cfg(feature = "rdf-star")]
  607|  19.0k|            if let InternedTerm::Triple(t) = &quad.2 {
  608|    634|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  609|  18.4k|            }
  610|  19.0k|            if let InternedGraphName::BlankNode(bnode) = &quad.3 {
  611|    250|                map.entry(*bnode).or_default().push(quad.clone());
  612|  18.8k|            }
  613|       |        }
  614|  2.99k|        map
  615|  2.99k|    }
_RNvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB2_7Dataset55add_quad_with_quoted_triple_to_quad_per_blank_nodes_map:
  618|  1.07k|    fn add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(
  619|  1.07k|        quad: &(
  620|  1.07k|            InternedSubject,
  621|  1.07k|            InternedNamedNode,
  622|  1.07k|            InternedTerm,
  623|  1.07k|            InternedGraphName,
  624|  1.07k|        ),
  625|  1.07k|        triple: &InternedTriple,
  626|  1.07k|        map: &mut QuadsPerBlankNode,
  627|  1.07k|    ) {
  628|  1.07k|        if let InternedSubject::BlankNode(bnode) = &triple.subject {
  629|     16|            map.entry(*bnode).or_default().push(quad.clone());
  630|  1.06k|        }
  631|  1.07k|        if let InternedSubject::Triple(t) = &triple.subject {
  632|    106|            Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, map);
  633|    970|        }
  634|  1.07k|        if let InternedTerm::BlankNode(bnode) = &triple.object {
  635|    120|            map.entry(*bnode).or_default().push(quad.clone());
  636|    956|        }
  637|  1.07k|        if let InternedTerm::Triple(t) = &triple.object {
  638|      0|            Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, map);
  639|  1.07k|        }
  640|  1.07k|    }
_RNvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB2_7Dataset11hash_bnodes:
  642|  14.8k|    fn hash_bnodes(
  643|  14.8k|        &self,
  644|  14.8k|        mut hashes: HashMap<InternedBlankNode, u64>,
  645|  14.8k|        quads_per_blank_node: &QuadsPerBlankNode,
  646|  14.8k|    ) -> (
  647|  14.8k|        HashMap<InternedBlankNode, u64>,
  648|  14.8k|        Vec<(u64, Vec<InternedBlankNode>)>,
  649|  14.8k|    ) {
  650|  14.8k|        let mut to_hash = Vec::new();
  651|  14.8k|        let mut to_do = hashes
  652|  14.8k|            .keys()
  653|  14.8k|            .map(|bnode| (*bnode, true))
  654|  14.8k|            .collect::<HashMap<_, _>>();
  655|  14.8k|        let mut partition = HashMap::<_, Vec<_>>::with_capacity(hashes.len());
  656|  14.8k|        let mut old_partition_count = usize::MAX;
  657|  44.6k|        while old_partition_count != partition.len() {
  658|  29.7k|            old_partition_count = partition.len();
  659|  29.7k|            partition.clear();
  660|  29.7k|            let mut new_hashes = hashes.clone();
  661|   105k|            for bnode in hashes.keys() {
  662|   105k|                let hash = if to_do.contains_key(bnode) {
  663|   108k|                    for (s, p, o, g) in &quads_per_blank_node[bnode] {
  664|   108k|                        to_hash.push((
  665|   108k|                            self.hash_subject(s, *bnode, &hashes),
  666|   108k|                            self.hash_named_node(*p),
  667|   108k|                            self.hash_term(o, *bnode, &hashes),
  668|   108k|                            self.hash_graph_name(g, *bnode, &hashes),
  669|   108k|                        ));
  670|   108k|                    }
  671|   105k|                    to_hash.sort_unstable();
  672|   105k|                    let hash = Self::hash_tuple((&to_hash, hashes[bnode]));
  673|   105k|                    to_hash.clear();
  674|   105k|                    if hash == hashes[bnode] {
  675|      0|                        to_do.insert(*bnode, false);
  676|   105k|                    } else {
  677|   105k|                        new_hashes.insert(*bnode, hash);
  678|   105k|                    }
  679|   105k|                    hash
  680|       |                } else {
  681|      0|                    hashes[bnode]
  682|       |                };
  683|   105k|                partition.entry(hash).or_default().push(*bnode);
  684|       |            }
  685|  29.7k|            hashes = new_hashes;
  686|       |        }
  687|  14.8k|        let mut partition: Vec<_> = partition.into_iter().collect();
  688|  14.8k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));
  689|  14.8k|        (hashes, partition)
  690|  14.8k|    }
_RNvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB2_7Dataset15hash_named_node:
  692|   125k|    fn hash_named_node(&self, node: InternedNamedNode) -> u64 {
  693|   125k|        Self::hash_tuple(node.decode_from(&self.interner))
  694|   125k|    }
_RNvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB2_7Dataset15hash_blank_node:
  696|   117k|    fn hash_blank_node(
  697|   117k|        node: InternedBlankNode,
  698|   117k|        current_blank_node: InternedBlankNode,
  699|   117k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  700|   117k|    ) -> u64 {
  701|   117k|        if node == current_blank_node {
  702|   108k|            u64::MAX
  703|       |        } else {
  704|  8.65k|            bnodes_hash[&node]
  705|       |        }
  706|   117k|    }
_RNvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB2_7Dataset12hash_subject:
  708|   125k|    fn hash_subject(
  709|   125k|        &self,
  710|   125k|        node: &InternedSubject,
  711|   125k|        current_blank_node: InternedBlankNode,
  712|   125k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  713|   125k|    ) -> u64 {
  714|   125k|        match node {
  715|  36.9k|            InternedSubject::NamedNode(node) => Self::hash_tuple(node.decode_from(&self.interner)),
  716|  88.7k|            InternedSubject::BlankNode(bnode) => {
  717|  88.7k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  718|       |            }
  719|       |            #[cfg(feature = "rdf-star")]
  720|      0|            InternedSubject::Triple(triple) => {
  721|      0|                self.hash_triple(triple, current_blank_node, bnodes_hash)
  722|       |            }
  723|       |        }
  724|   125k|    }
_RNvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB2_7Dataset9hash_term:
  726|   125k|    fn hash_term(
  727|   125k|        &self,
  728|   125k|        term: &InternedTerm,
  729|   125k|        current_blank_node: InternedBlankNode,
  730|   125k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  731|   125k|    ) -> u64 {
  732|   125k|        match term {
  733|  6.68k|            InternedTerm::NamedNode(node) => Self::hash_tuple(node.decode_from(&self.interner)),
  734|  27.4k|            InternedTerm::BlankNode(bnode) => {
  735|  27.4k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  736|       |            }
  737|  74.5k|            InternedTerm::Literal(literal) => Self::hash_tuple(literal.decode_from(&self.interner)),
  738|       |            #[cfg(feature = "rdf-star")]
  739|  17.0k|            InternedTerm::Triple(triple) => {
  740|  17.0k|                self.hash_triple(triple, current_blank_node, bnodes_hash)
  741|       |            }
  742|       |        }
  743|   125k|    }
_RNvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB2_7Dataset15hash_graph_name:
  745|   108k|    fn hash_graph_name(
  746|   108k|        &self,
  747|   108k|        graph_name: &InternedGraphName,
  748|   108k|        current_blank_node: InternedBlankNode,
  749|   108k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  750|   108k|    ) -> u64 {
  751|   108k|        match graph_name {
  752|  12.0k|            InternedGraphName::NamedNode(node) => {
  753|  12.0k|                Self::hash_tuple(node.decode_from(&self.interner))
  754|       |            }
  755|  1.30k|            InternedGraphName::BlankNode(bnode) => {
  756|  1.30k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  757|       |            }
  758|  95.3k|            InternedGraphName::DefaultGraph => 0,
  759|       |        }
  760|   108k|    }
_RNvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB2_7Dataset11hash_triple:
  763|  17.0k|    fn hash_triple(
  764|  17.0k|        &self,
  765|  17.0k|        triple: &InternedTriple,
  766|  17.0k|        current_blank_node: InternedBlankNode,
  767|  17.0k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  768|  17.0k|    ) -> u64 {
  769|  17.0k|        Self::hash_tuple((
  770|  17.0k|            self.hash_subject(&triple.subject, current_blank_node, bnodes_hash),
  771|  17.0k|            self.hash_named_node(triple.predicate),
  772|  17.0k|            self.hash_term(&triple.object, current_blank_node, bnodes_hash),
  773|  17.0k|        ))
  774|  17.0k|    }
_RNvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB2_7Dataset11distinguish:
  782|  14.8k|    fn distinguish(
  783|  14.8k|        &mut self,
  784|  14.8k|        hash: &HashMap<InternedBlankNode, u64>,
  785|  14.8k|        partition: &[(u64, Vec<InternedBlankNode>)],
  786|  14.8k|        quads_per_blank_node: &QuadsPerBlankNode,
  787|  14.8k|    ) -> Vec<(
  788|  14.8k|        InternedSubject,
  789|  14.8k|        InternedNamedNode,
  790|  14.8k|        InternedTerm,
  791|  14.8k|        InternedGraphName,
  792|  14.8k|    )> {
  793|  14.8k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
  794|  14.8k|        if let Some(b_prime) = b_prime {
  795|  5.16k|            b_prime
  796|  5.16k|                .iter()
  797|  5.16k|                .map(|b| {
  798|       |                    let mut hash_prime = hash.clone();
  799|       |                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  800|       |                    let (hash_prime_prime, partition_prime) =
  801|       |                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  802|       |                    self.distinguish(&hash_prime_prime, &partition_prime, quads_per_blank_node)
  803|  5.16k|                })
  804|  5.16k|                .reduce(min)
  805|  5.16k|                .unwrap_or_default()
  806|       |        } else {
  807|  9.69k|            self.label(hash)
  808|       |        }
  809|  14.8k|    }
_RNvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB2_7Dataset5label:
  812|  9.69k|    fn label(
  813|  9.69k|        &mut self,
  814|  9.69k|        hashes: &HashMap<InternedBlankNode, u64>,
  815|  9.69k|    ) -> Vec<(
  816|  9.69k|        InternedSubject,
  817|  9.69k|        InternedNamedNode,
  818|  9.69k|        InternedTerm,
  819|  9.69k|        InternedGraphName,
  820|  9.69k|    )> {
  821|  9.69k|        let old_quads: Vec<_> = self.spog.iter().cloned().collect();
  822|  9.69k|        let mut quads: Vec<_> = old_quads
  823|  9.69k|            .into_iter()
  824|  9.69k|            .map(|(s, p, o, g)| {
  825|       |                (
  826|       |                    match s {
  827|       |                        InternedSubject::NamedNode(_) => s,
  828|       |                        InternedSubject::BlankNode(bnode) => {
  829|       |                            InternedSubject::BlankNode(self.map_bnode(bnode, hashes))
  830|       |                        }
  831|       |                        #[cfg(feature = "rdf-star")]
  832|       |                        InternedSubject::Triple(triple) => {
  833|       |                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  834|       |                                self.label_triple(&triple, hashes).as_ref(),
  835|       |                                &mut self.interner,
  836|       |                            )))
  837|       |                        }
  838|       |                    },
  839|       |                    p,
  840|       |                    match o {
  841|       |                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  842|       |                        InternedTerm::BlankNode(bnode) => {
  843|       |                            InternedTerm::BlankNode(self.map_bnode(bnode, hashes))
  844|       |                        }
  845|       |                        #[cfg(feature = "rdf-star")]
  846|       |                        InternedTerm::Triple(triple) => {
  847|       |                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  848|       |                                self.label_triple(&triple, hashes).as_ref(),
  849|       |                                &mut self.interner,
  850|       |                            )))
  851|       |                        }
  852|       |                    },
  853|       |                    match g {
  854|       |                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  855|       |                        InternedGraphName::BlankNode(bnode) => {
  856|       |                            InternedGraphName::BlankNode(self.map_bnode(bnode, hashes))
  857|       |                        }
  858|       |                    },
  859|       |                )
  860|  9.69k|            })
  861|  9.69k|            .collect();
  862|  9.69k|        quads.sort_unstable();
  863|  9.69k|        quads
  864|  9.69k|    }
_RNvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB2_7Dataset12label_triple:
  867|  8.92k|    fn label_triple(
  868|  8.92k|        &mut self,
  869|  8.92k|        triple: &InternedTriple,
  870|  8.92k|        hashes: &HashMap<InternedBlankNode, u64>,
  871|  8.92k|    ) -> Triple {
  872|       |        Triple {
  873|  8.92k|            subject: if let InternedSubject::BlankNode(bnode) = &triple.subject {
  874|     28|                Self::gen_bnode(*bnode, hashes).into()
  875|  8.89k|            } else if let InternedSubject::Triple(t) = &triple.subject {
  876|    754|                self.label_triple(t, hashes).into()
  877|       |            } else {
  878|  8.14k|                triple.subject.decode_from(&self.interner).into_owned()
  879|       |            },
  880|  8.92k|            predicate: triple.predicate.decode_from(&self.interner).into_owned(),
  881|  8.92k|            object: if let InternedTerm::BlankNode(bnode) = &triple.object {
  882|    158|                Self::gen_bnode(*bnode, hashes).into()
  883|  8.76k|            } else if let InternedTerm::Triple(t) = &triple.object {
  884|      0|                self.label_triple(t, hashes).into()
  885|       |            } else {
  886|  8.76k|                triple.object.decode_from(&self.interner).into_owned()
  887|       |            },
  888|       |        }
  889|  8.92k|    }
_RNvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB2_7Dataset9map_bnode:
  891|  34.2k|    fn map_bnode(
  892|  34.2k|        &mut self,
  893|  34.2k|        old_bnode: InternedBlankNode,
  894|  34.2k|        hashes: &HashMap<InternedBlankNode, u64>,
  895|  34.2k|    ) -> InternedBlankNode {
  896|  34.2k|        InternedBlankNode::encoded_into(
  897|  34.2k|            Self::gen_bnode(old_bnode, hashes).as_ref(),
  898|  34.2k|            &mut self.interner,
  899|  34.2k|        )
  900|  34.2k|    }
_RNvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB2_7Dataset9gen_bnode:
  902|  34.4k|    fn gen_bnode(
  903|  34.4k|        old_bnode: InternedBlankNode,
  904|  34.4k|        hashes: &HashMap<InternedBlankNode, u64>,
  905|  34.4k|    ) -> BlankNode {
  906|  34.4k|        BlankNode::new_from_unique_id(hashes[&old_bnode].into())
  907|  34.4k|    }
_RNvXs_NtCs5bua6W9iSBw_5oxrdf7datasetNtB4_7DatasetNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eq:
  911|  1.49k|    fn eq(&self, other: &Self) -> bool {
  912|  1.49k|        if self.len() != other.len() {
  913|      0|            return false;
  914|  1.49k|        }
  915|  11.0k|        for q in self {
  916|  9.53k|            if !other.contains(q) {
  917|      0|                return false;
  918|  9.53k|            }
  919|       |        }
  920|  1.49k|        true
  921|  1.49k|    }
_RNvXs1_NtCs5bua6W9iSBw_5oxrdf7datasetRNtB5_7DatasetNtNtNtNtCsjv2Y2xFO4ua_4core4iter6traits7collect12IntoIterator9into_iter:
  930|  1.49k|    fn into_iter(self) -> Iter<'a> {
  931|  1.49k|        self.iter()
  932|  1.49k|    }
_RNvXsg_NtCs5bua6W9iSBw_5oxrdf7datasetNtB5_4IterNtNtNtNtCsjv2Y2xFO4ua_4core4iter6traits8iterator8Iterator4next:
 1530|  11.0k|    fn next(&mut self) -> Option<QuadRef<'a>> {
 1531|  11.0k|        self.inner
 1532|  11.0k|            .next()
 1533|  11.0k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))
 1534|  11.0k|    }
_RNvXsj_NtCs5bua6W9iSBw_5oxrdf7datasetNtB5_7DatasetNtNtCsjv2Y2xFO4ua_4core7default7Default7defaultB7_:
   66|  2.99k|#[derive(Debug, Default, Clone)]
_RINvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB3_7Dataset8containsNtNtB5_6triple7QuadRefEB5_:
  341|  9.53k|    pub fn contains<'a>(&self, quad: impl Into<QuadRef<'a>>) -> bool {
  342|  9.53k|        if let Some(q) = self.encoded_quad(quad.into()) {
  343|  9.53k|            self.spog.contains(&q)
  344|       |        } else {
  345|      0|            false
  346|       |        }
  347|  9.53k|    }
_RINvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB3_7Dataset18encoded_named_nodeNtNtB5_10named_node12NamedNodeRefEB5_:
  454|  9.53k|    pub(super) fn encoded_named_node<'a>(
  455|  9.53k|        &self,
  456|  9.53k|        node: impl Into<NamedNodeRef<'a>>,
  457|  9.53k|    ) -> Option<InternedNamedNode> {
  458|  9.53k|        InternedNamedNode::encoded_from(node.into(), &self.interner)
  459|  9.53k|    }
_RINvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB3_7Dataset15encoded_subjectNtNtB5_6triple10SubjectRefEB5_:
  461|  9.53k|    pub(super) fn encoded_subject<'a>(
  462|  9.53k|        &self,
  463|  9.53k|        node: impl Into<SubjectRef<'a>>,
  464|  9.53k|    ) -> Option<InternedSubject> {
  465|  9.53k|        InternedSubject::encoded_from(node.into(), &self.interner)
  466|  9.53k|    }
_RINvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB3_7Dataset12encoded_termNtNtB5_6triple7TermRefEB5_:
  468|  9.53k|    pub(super) fn encoded_term<'a>(&self, term: impl Into<TermRef<'a>>) -> Option<InternedTerm> {
  469|  9.53k|        InternedTerm::encoded_from(term.into(), &self.interner)
  470|  9.53k|    }
_RINvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB3_7Dataset18encoded_graph_nameNtNtB5_6triple12GraphNameRefEB5_:
  472|  9.53k|    pub(super) fn encoded_graph_name<'a>(
  473|  9.53k|        &self,
  474|  9.53k|        graph_name: impl Into<GraphNameRef<'a>>,
  475|  9.53k|    ) -> Option<InternedGraphName> {
  476|  9.53k|        InternedGraphName::encoded_from(graph_name.into(), &self.interner)
  477|  9.53k|    }
_RNCNvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB4_7Dataset12canonicalize0B6_:
  545|  7.26k|            bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
_RNCNvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB4_7Dataset11hash_bnodes0B6_:
  653|  52.8k|            .map(|bnode| (*bnode, true))
_RNCNvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB4_7Dataset11hash_bnodess_0B6_:
  688|  46.7k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));
_RINvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB3_7Dataset10hash_tupleNtNtB5_10named_node12NamedNodeRefEB5_:
  776|   181k|    fn hash_tuple(v: impl Hash) -> u64 {
  777|   181k|        let mut hasher = DefaultHasher::new();
  778|   181k|        v.hash(&mut hasher);
  779|   181k|        hasher.finish()
  780|   181k|    }
_RINvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB3_7Dataset10hash_tupleNtNtB5_7literal10LiteralRefEB5_:
  776|  74.5k|    fn hash_tuple(v: impl Hash) -> u64 {
  777|  74.5k|        let mut hasher = DefaultHasher::new();
  778|  74.5k|        v.hash(&mut hasher);
  779|  74.5k|        hasher.finish()
  780|  74.5k|    }
_RINvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB3_7Dataset10hash_tupleTRINtNtCs15NWbik7Z2V_5alloc3vec3VecTyyyyEEyEEB5_:
  776|   105k|    fn hash_tuple(v: impl Hash) -> u64 {
  777|   105k|        let mut hasher = DefaultHasher::new();
  778|   105k|        v.hash(&mut hasher);
  779|   105k|        hasher.finish()
  780|   105k|    }
_RINvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB3_7Dataset10hash_tupleTylEEB5_:
  776|  11.8k|    fn hash_tuple(v: impl Hash) -> u64 {
  777|  11.8k|        let mut hasher = DefaultHasher::new();
  778|  11.8k|        v.hash(&mut hasher);
  779|  11.8k|        hasher.finish()
  780|  11.8k|    }
_RINvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB3_7Dataset10hash_tupleTyyyEEB5_:
  776|  17.0k|    fn hash_tuple(v: impl Hash) -> u64 {
  777|  17.0k|        let mut hasher = DefaultHasher::new();
  778|  17.0k|        v.hash(&mut hasher);
  779|  17.0k|        hasher.finish()
  780|  17.0k|    }
_RNCNvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB4_7Dataset11distinguish0B6_:
  793|  46.0k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
_RNCNvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB4_7Dataset11distinguishs_0B6_:
  793|  46.0k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
_RNCNvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB4_7Dataset11distinguishs0_0B6_:
  797|  11.8k|                .map(|b| {
  798|  11.8k|                    let mut hash_prime = hash.clone();
  799|  11.8k|                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  800|  11.8k|                    let (hash_prime_prime, partition_prime) =
  801|  11.8k|                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  802|  11.8k|                    self.distinguish(&hash_prime_prime, &partition_prime, quads_per_blank_node)
  803|  11.8k|                })
_RNCNvMNtCs5bua6W9iSBw_5oxrdf7datasetNtB4_7Dataset5label0B6_:
  824|   100k|            .map(|(s, p, o, g)| {
  825|   100k|                (
  826|   100k|                    match s {
  827|  70.9k|                        InternedSubject::NamedNode(_) => s,
  828|  26.4k|                        InternedSubject::BlankNode(bnode) => {
  829|  26.4k|                            InternedSubject::BlankNode(self.map_bnode(bnode, hashes))
  830|       |                        }
  831|       |                        #[cfg(feature = "rdf-star")]
  832|  3.18k|                        InternedSubject::Triple(triple) => {
  833|  3.18k|                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  834|  3.18k|                                self.label_triple(&triple, hashes).as_ref(),
  835|  3.18k|                                &mut self.interner,
  836|  3.18k|                            )))
  837|       |                        }
  838|       |                    },
  839|   100k|                    p,
  840|   100k|                    match o {
  841|  88.1k|                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  842|  7.51k|                        InternedTerm::BlankNode(bnode) => {
  843|  7.51k|                            InternedTerm::BlankNode(self.map_bnode(bnode, hashes))
  844|       |                        }
  845|       |                        #[cfg(feature = "rdf-star")]
  846|  4.99k|                        InternedTerm::Triple(triple) => {
  847|  4.99k|                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  848|  4.99k|                                self.label_triple(&triple, hashes).as_ref(),
  849|  4.99k|                                &mut self.interner,
  850|  4.99k|                            )))
  851|       |                        }
  852|       |                    },
  853|   100k|                    match g {
  854|   100k|                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  855|    268|                        InternedGraphName::BlankNode(bnode) => {
  856|    268|                            InternedGraphName::BlankNode(self.map_bnode(bnode, hashes))
  857|       |                        }
  858|       |                    },
  859|       |                )
  860|   100k|            })
_RNCNvXsg_NtCs5bua6W9iSBw_5oxrdf7datasetNtB7_4IterNtNtNtNtCsjv2Y2xFO4ua_4core4iter6traits8iterator8Iterator4next0B9_:
 1533|  9.53k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))

_RNCNvMs1_NtCs5bua6W9iSBw_5oxrdf9interningNtB7_17InternedBlankNode12encoded_into0B9_:
  135|  13.9k|                .or_insert_with(|| blank_node.as_str().into());
_RINvXsl_NtCs5bua6W9iSBw_5oxrdf9interningNtB6_3KeyNtNtCsjv2Y2xFO4ua_4core4hash4Hash4hashNtNtNtCsjm3A4zjcIt4_3std4hash6random13DefaultHasherEB8_:
   69|   104k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RINvXsv_NtCs5bua6W9iSBw_5oxrdf9interningNtB6_17InternedNamedNodeNtNtCsjv2Y2xFO4ua_4core4hash4Hash4hashNtNtNtCsjm3A4zjcIt4_3std4hash6random13DefaultHasherEB8_:
   86|  36.3k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RINvXsF_NtCs5bua6W9iSBw_5oxrdf9interningNtB6_17InternedBlankNodeNtNtCsjv2Y2xFO4ua_4core4hash4Hash4hashNtNtNtCsjm3A4zjcIt4_3std4hash6random13DefaultHasherEB8_:
  123|   679k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RINvXsP_NtCs5bua6W9iSBw_5oxrdf9interningNtB6_15InternedLiteralNtNtCsjv2Y2xFO4ua_4core4hash4Hash4hashNtNtNtCsjm3A4zjcIt4_3std4hash6random13DefaultHasherEB8_:
  174|  10.6k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RINvXsY_NtCs5bua6W9iSBw_5oxrdf9interningNtB6_15InternedSubjectNtNtCsjv2Y2xFO4ua_4core4hash4Hash4hashNtNtNtCsjm3A4zjcIt4_3std4hash6random13DefaultHasherEB8_:
  267|  12.6k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RINvXs1g_NtCs5bua6W9iSBw_5oxrdf9interningNtB7_12InternedTermNtNtCsjv2Y2xFO4ua_4core4hash4Hash4hashNtNtNtCsjm3A4zjcIt4_3std4hash6random13DefaultHasherEB9_:
  392|  12.6k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RINvXs1p_NtCs5bua6W9iSBw_5oxrdf9interningNtB7_14InternedTripleNtNtCsjv2Y2xFO4ua_4core4hash4Hash4hashNtNtNtCsjm3A4zjcIt4_3std4hash6random13DefaultHasherEB9_:
  465|  12.6k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMNtCs5bua6W9iSBw_5oxrdf9interningNtB2_8Interner13get_or_intern:
   18|   140k|    fn get_or_intern(&mut self, value: &str) -> Key {
   19|   140k|        let mut hash = self.hash(value);
   20|   140k|        loop {
   21|   140k|            match self.string_for_hash.entry(hash) {
   22|  24.8k|                Entry::Vacant(e) => {
   23|  24.8k|                    e.insert(value.into());
   24|  24.8k|                    return Key(hash);
   25|       |                }
   26|   116k|                Entry::Occupied(e) => loop {
   27|   116k|                    if e.get() == value {
   28|   116k|                        return Key(hash);
   29|      0|                    } else if hash == u64::MAX - 1 {
   30|      0|                        hash = 0;
   31|      0|                    } else {
   32|      0|                        hash += 1;
   33|      0|                    }
   34|       |                },
   35|       |            }
   36|       |        }
   37|   140k|    }
_RNvMNtCs5bua6W9iSBw_5oxrdf9interningNtB2_8Interner3get:
   39|  33.5k|    fn get(&self, value: &str) -> Option<Key> {
   40|  33.5k|        let mut hash = self.hash(value);
   41|       |        loop {
   42|  33.5k|            let v = self.string_for_hash.get(&hash)?;
   43|  33.5k|            if v == value {
   44|  33.5k|                return Some(Key(hash));
   45|      0|            } else if hash == u64::MAX - 1 {
   46|      0|                hash = 0;
   47|      0|            } else {
   48|      0|                hash += 1;
   49|      0|            }
   50|       |        }
   51|  33.5k|    }
_RNvMNtCs5bua6W9iSBw_5oxrdf9interningNtB2_8Interner4hash:
   53|   174k|    fn hash(&self, value: &str) -> u64 {
   54|   174k|        let mut hasher = self.hasher.build_hasher();
   55|   174k|        hasher.write(value.as_bytes());
   56|   174k|        let hash = hasher.finish();
   57|   174k|        if hash == u64::MAX {
   58|      0|            0
   59|       |        } else {
   60|   174k|            hash
   61|       |        }
   62|   174k|    }
_RNvMNtCs5bua6W9iSBw_5oxrdf9interningNtB2_8Interner7resolve:
   64|   389k|    fn resolve(&self, key: Key) -> &str {
   65|   389k|        &self.string_for_hash[&key.0]
   66|   389k|    }
_RNvMs0_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_17InternedNamedNode12encoded_into:
   92|   107k|    pub fn encoded_into(named_node: NamedNodeRef<'_>, interner: &mut Interner) -> Self {
   93|   107k|        Self {
   94|   107k|            id: interner.get_or_intern(named_node.as_str()),
   95|   107k|        }
   96|   107k|    }
_RNvMs0_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_17InternedNamedNode12encoded_from:
   98|  25.6k|    pub fn encoded_from(named_node: NamedNodeRef<'_>, interner: &Interner) -> Option<Self> {
   99|  25.6k|        Some(Self {
  100|  25.6k|            id: interner.get(named_node.as_str())?,
  101|       |        })
  102|  25.6k|    }
_RNvMs0_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_17InternedNamedNode11decode_from:
  104|   296k|    pub fn decode_from(self, interner: &Interner) -> NamedNodeRef<'_> {
  105|   296k|        NamedNodeRef::new_unchecked(interner.resolve(self.id))
  106|   296k|    }
_RNvMs1_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_17InternedBlankNode12encoded_into:
  130|  43.1k|    pub fn encoded_into(blank_node: BlankNodeRef<'_>, interner: &mut Interner) -> Self {
  131|  43.1k|        if let Some(id) = blank_node.unique_id() {
  132|  42.3k|            interner
  133|  42.3k|                .string_for_blank_node_id
  134|  42.3k|                .entry(id)
  135|  42.3k|                .or_insert_with(|| blank_node.as_str().into());
  136|  42.3k|            Self::Number { id }
  137|       |        } else {
  138|    762|            Self::Other {
  139|    762|                id: interner.get_or_intern(blank_node.as_str()),
  140|    762|            }
  141|       |        }
  142|  43.1k|    }
_RNvMs1_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_17InternedBlankNode12encoded_from:
  144|  4.30k|    pub fn encoded_from(blank_node: BlankNodeRef<'_>, interner: &Interner) -> Option<Self> {
  145|  4.30k|        if let Some(id) = blank_node.unique_id() {
  146|  4.30k|            interner
  147|  4.30k|                .string_for_blank_node_id
  148|  4.30k|                .contains_key(&id)
  149|  4.30k|                .then_some(Self::Number { id })
  150|       |        } else {
  151|       |            Some(Self::Other {
  152|      0|                id: interner.get(blank_node.as_str())?,
  153|       |            })
  154|       |        }
  155|  4.30k|    }
_RNvMs1_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_17InternedBlankNode11decode_from:
  157|  4.23k|    pub fn decode_from(self, interner: &Interner) -> BlankNodeRef<'_> {
  158|  4.23k|        BlankNodeRef::new_unchecked(match self {
  159|  4.23k|            Self::Number { id } => &interner.string_for_blank_node_id[&id],
  160|      0|            Self::Other { id } => interner.resolve(id),
  161|       |        })
  162|  4.23k|    }
_RNvMs2_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_15InternedLiteral12encoded_into:
  190|  32.4k|    pub fn encoded_into(literal: LiteralRef<'_>, interner: &mut Interner) -> Self {
  191|  32.4k|        let value_id = interner.get_or_intern(literal.value());
  192|  32.4k|        if literal.is_plain() {
  193|  1.01k|            if let Some(language) = literal.language() {
  194|    272|                Self::LanguageTaggedString {
  195|    272|                    value_id,
  196|    272|                    language_id: interner.get_or_intern(language),
  197|    272|                }
  198|       |            } else {
  199|    740|                Self::String { value_id }
  200|       |            }
  201|       |        } else {
  202|  31.4k|            Self::TypedLiteral {
  203|  31.4k|                value_id,
  204|  31.4k|                datatype: InternedNamedNode::encoded_into(literal.datatype(), interner),
  205|  31.4k|            }
  206|       |        }
  207|  32.4k|    }
_RNvMs2_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_15InternedLiteral12encoded_from:
  209|  7.74k|    pub fn encoded_from(literal: LiteralRef<'_>, interner: &Interner) -> Option<Self> {
  210|  7.74k|        let value_id = interner.get(literal.value())?;
  211|  7.74k|        Some(if literal.is_plain() {
  212|    492|            if let Some(language) = literal.language() {
  213|       |                Self::LanguageTaggedString {
  214|    136|                    value_id,
  215|    136|                    language_id: interner.get(language)?,
  216|       |                }
  217|       |            } else {
  218|    356|                Self::String { value_id }
  219|       |            }
  220|       |        } else {
  221|       |            Self::TypedLiteral {
  222|  7.25k|                value_id,
  223|  7.25k|                datatype: InternedNamedNode::encoded_from(literal.datatype(), interner)?,
  224|       |            }
  225|       |        })
  226|  7.74k|    }
_RNvMs2_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_15InternedLiteral11decode_from:
  228|  89.4k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> LiteralRef<'a> {
  229|  89.4k|        match self {
  230|  6.71k|            Self::String { value_id } => {
  231|  6.71k|                LiteralRef::new_simple_literal(interner.resolve(*value_id))
  232|       |            }
  233|       |            Self::LanguageTaggedString {
  234|  3.36k|                value_id,
  235|  3.36k|                language_id,
  236|  3.36k|            } => LiteralRef::new_language_tagged_literal_unchecked(
  237|  3.36k|                interner.resolve(*value_id),
  238|  3.36k|                interner.resolve(*language_id),
  239|  3.36k|            ),
  240|  79.3k|            Self::TypedLiteral { value_id, datatype } => LiteralRef::new_typed_literal(
  241|  79.3k|                interner.resolve(*value_id),
  242|  79.3k|                datatype.decode_from(interner),
  243|  79.3k|            ),
  244|       |        }
  245|  89.4k|    }
_RNvMs3_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_15InternedSubject12encoded_into:
  276|  39.1k|    pub fn encoded_into(node: SubjectRef<'_>, interner: &mut Interner) -> Self {
  277|  39.1k|        match node {
  278|  31.6k|            SubjectRef::NamedNode(node) => {
  279|  31.6k|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  280|       |            }
  281|  6.14k|            SubjectRef::BlankNode(node) => {
  282|  6.14k|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  283|       |            }
  284|       |            #[cfg(feature = "rdf-star")]
  285|  1.36k|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  286|  1.36k|                triple.as_ref(),
  287|  1.36k|                interner,
  288|  1.36k|            ))),
  289|       |        }
  290|  39.1k|    }
_RNvMs3_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_15InternedSubject12encoded_from:
  292|  10.0k|    pub fn encoded_from(node: SubjectRef<'_>, interner: &Interner) -> Option<Self> {
  293|  10.0k|        Some(match node {
  294|  6.81k|            SubjectRef::NamedNode(node) => {
  295|  6.81k|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  296|       |            }
  297|  3.03k|            SubjectRef::BlankNode(node) => {
  298|  3.03k|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  299|       |            }
  300|       |            #[cfg(feature = "rdf-star")]
  301|    221|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  302|    221|                triple.as_ref(),
  303|    221|                interner,
  304|    221|            )?)),
  305|       |        })
  306|  10.0k|    }
_RNvMs3_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_15InternedSubject11decode_from:
  308|  17.6k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> SubjectRef<'a> {
  309|  17.6k|        match self {
  310|  14.4k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.decode_from(interner)),
  311|  3.02k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.decode_from(interner)),
  312|       |            #[cfg(feature = "rdf-star")]
  313|    168|            Self::Triple(triple) => SubjectRef::Triple(&interner.triples[triple.as_ref()]),
  314|       |        }
  315|  17.6k|    }
_RNvMs4_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_17InternedGraphName12encoded_into:
  343|  28.9k|    pub fn encoded_into(node: GraphNameRef<'_>, interner: &mut Interner) -> Self {
  344|  28.9k|        match node {
  345|  27.2k|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  346|  1.50k|            GraphNameRef::NamedNode(node) => {
  347|  1.50k|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  348|       |            }
  349|    250|            GraphNameRef::BlankNode(node) => {
  350|    250|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  351|       |            }
  352|       |        }
  353|  28.9k|    }
_RNvMs4_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_17InternedGraphName12encoded_from:
  355|  9.53k|    pub fn encoded_from(node: GraphNameRef<'_>, interner: &Interner) -> Option<Self> {
  356|  9.53k|        Some(match node {
  357|  8.75k|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  358|    646|            GraphNameRef::NamedNode(node) => {
  359|    646|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  360|       |            }
  361|    125|            GraphNameRef::BlankNode(node) => {
  362|    125|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  363|       |            }
  364|       |        })
  365|  9.53k|    }
_RNvMs4_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_17InternedGraphName11decode_from:
  367|  9.53k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> GraphNameRef<'a> {
  368|  9.53k|        match self {
  369|  8.75k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  370|    646|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.decode_from(interner)),
  371|    125|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.decode_from(interner)),
  372|       |        }
  373|  9.53k|    }
_RNvMs5_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_12InternedTerm12encoded_into:
  402|  39.1k|    pub fn encoded_into(term: TermRef<'_>, interner: &mut Interner) -> Self {
  403|  39.1k|        match term {
  404|  3.63k|            TermRef::NamedNode(term) => {
  405|  3.63k|                Self::NamedNode(InternedNamedNode::encoded_into(term, interner))
  406|       |            }
  407|  2.44k|            TermRef::BlankNode(term) => {
  408|  2.44k|                Self::BlankNode(InternedBlankNode::encoded_into(term, interner))
  409|       |            }
  410|  32.4k|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_into(term, interner)),
  411|       |            #[cfg(feature = "rdf-star")]
  412|    634|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  413|    634|                triple.as_ref(),
  414|    634|                interner,
  415|    634|            ))),
  416|       |        }
  417|  39.1k|    }
_RNvMs5_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_12InternedTerm12encoded_from:
  419|  10.0k|    pub fn encoded_from(term: TermRef<'_>, interner: &Interner) -> Option<Self> {
  420|  10.0k|        Some(match term {
  421|    871|            TermRef::NamedNode(term) => {
  422|    871|                Self::NamedNode(InternedNamedNode::encoded_from(term, interner)?)
  423|       |            }
  424|  1.13k|            TermRef::BlankNode(term) => {
  425|  1.13k|                Self::BlankNode(InternedBlankNode::encoded_from(term, interner)?)
  426|       |            }
  427|  7.74k|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_from(term, interner)?),
  428|       |            #[cfg(feature = "rdf-star")]
  429|    317|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  430|    317|                triple.as_ref(),
  431|    317|                interner,
  432|    317|            )?)),
  433|       |        })
  434|  10.0k|    }
_RNvMs5_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_12InternedTerm11decode_from:
  436|  18.2k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> TermRef<'a> {
  437|  18.2k|        match self {
  438|  1.98k|            Self::NamedNode(term) => TermRef::NamedNode(term.decode_from(interner)),
  439|  1.07k|            Self::BlankNode(term) => TermRef::BlankNode(term.decode_from(interner)),
  440|  14.9k|            Self::Literal(term) => TermRef::Literal(term.decode_from(interner)),
  441|       |            #[cfg(feature = "rdf-star")]
  442|    317|            Self::Triple(triple) => TermRef::Triple(&interner.triples[triple.as_ref()]),
  443|       |        }
  444|  18.2k|    }
_RNvMs6_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_14InternedTriple12encoded_into:
  474|  10.1k|    pub fn encoded_into(triple: TripleRef<'_>, interner: &mut Interner) -> Self {
  475|  10.1k|        let interned_triple = Self {
  476|  10.1k|            subject: InternedSubject::encoded_into(triple.subject, interner),
  477|  10.1k|            predicate: InternedNamedNode::encoded_into(triple.predicate, interner),
  478|  10.1k|            object: InternedTerm::encoded_into(triple.object, interner),
  479|  10.1k|        };
  480|  10.1k|        interner
  481|  10.1k|            .triples
  482|  10.1k|            .insert(interned_triple.clone(), triple.into_owned());
  483|  10.1k|        interned_triple
  484|  10.1k|    }
_RNvMs6_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_14InternedTriple12encoded_from:
  486|    538|    pub fn encoded_from(triple: TripleRef<'_>, interner: &Interner) -> Option<Self> {
  487|    538|        let interned_triple = Self {
  488|    538|            subject: InternedSubject::encoded_from(triple.subject, interner)?,
  489|    538|            predicate: InternedNamedNode::encoded_from(triple.predicate, interner)?,
  490|    538|            object: InternedTerm::encoded_from(triple.object, interner)?,
  491|       |        };
  492|    538|        interner
  493|    538|            .triples
  494|    538|            .contains_key(&interned_triple)
  495|    538|            .then_some(interned_triple)
  496|    538|    }
_RNvXs7_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_21IdentityHasherBuilderNtNtCsjv2Y2xFO4ua_4core4hash11BuildHasher12build_hasher:
  513|   585k|    fn build_hasher(&self) -> IdentityHasher {
  514|   585k|        IdentityHasher::default()
  515|   585k|    }
_RNvXs8_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_14IdentityHasherNtNtCsjv2Y2xFO4ua_4core4hash6Hasher6finish:
  524|   585k|    fn finish(&self) -> u64 {
  525|   585k|        self.value
  526|   585k|    }
_RNvXs8_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_14IdentityHasherNtNtCsjv2Y2xFO4ua_4core4hash6Hasher9write_u64:
  532|   585k|    fn write_u64(&mut self, i: u64) {
  533|   585k|        self.value = i
  534|   585k|    }
_RNvXsa_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_8InternerNtNtCsjv2Y2xFO4ua_4core7default7Default7defaultB7_:
    7|  2.99k|#[derive(Debug, Default, Clone)]
_RNvXsf_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_3KeyNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqB7_:
   69|   102k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsg_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_3KeyNtNtCsjv2Y2xFO4ua_4core3cmp3Ord3cmpB7_:
   69|  2.08M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsh_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_3KeyNtNtCsjv2Y2xFO4ua_4core3cmp10PartialOrd11partial_cmpB7_:
   69|   359k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsp_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_17InternedNamedNodeNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqB7_:
   86|  32.7k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsq_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_17InternedNamedNodeNtNtCsjv2Y2xFO4ua_4core3cmp3Ord3cmpB7_:
   86|  1.44M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsr_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_17InternedNamedNodeNtNtCsjv2Y2xFO4ua_4core3cmp10PartialOrd11partial_cmpB7_:
   86|   291k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXst_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_17InternedNamedNodeNtNtCsjv2Y2xFO4ua_4core5clone5Clone5cloneB7_:
   86|   471k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsz_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_17InternedBlankNodeNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqB7_:
  123|   716k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsA_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_17InternedBlankNodeNtNtCsjv2Y2xFO4ua_4core3cmp3Ord3cmpB7_:
  123|  76.0k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsB_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_17InternedBlankNodeNtNtCsjv2Y2xFO4ua_4core3cmp10PartialOrd11partial_cmpB7_:
  123|  38.2k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsD_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_17InternedBlankNodeNtNtCsjv2Y2xFO4ua_4core5clone5Clone5cloneB7_:
  123|   133k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsJ_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_15InternedLiteralNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqB7_:
  174|  9.72k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsK_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_15InternedLiteralNtNtCsjv2Y2xFO4ua_4core3cmp3Ord3cmpB7_:
  174|   652k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsL_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_15InternedLiteralNtNtCsjv2Y2xFO4ua_4core3cmp10PartialOrd11partial_cmpB7_:
  174|  70.2k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsN_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_15InternedLiteralNtNtCsjv2Y2xFO4ua_4core5clone5Clone5cloneB7_:
  174|   304k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsT_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_15InternedSubjectNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqB7_:
  267|  11.2k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsU_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_15InternedSubjectNtNtCsjv2Y2xFO4ua_4core3cmp3Ord3cmpB7_:
  267|   635k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsV_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_15InternedSubjectNtNtCsjv2Y2xFO4ua_4core3cmp10PartialOrd11partial_cmpB7_:
  267|   212k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsX_NtCs5bua6W9iSBw_5oxrdf9interningNtB5_15InternedSubjectNtNtCsjv2Y2xFO4ua_4core5clone5Clone5cloneB7_:
  267|   381k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs13_NtCs5bua6W9iSBw_5oxrdf9interningNtB6_17InternedGraphNameNtNtCsjv2Y2xFO4ua_4core3cmp3Ord3cmpB8_:
  335|   682k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs14_NtCs5bua6W9iSBw_5oxrdf9interningNtB6_17InternedGraphNameNtNtCsjv2Y2xFO4ua_4core3cmp10PartialOrd11partial_cmpB8_:
  335|  4.66k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs16_NtCs5bua6W9iSBw_5oxrdf9interningNtB6_17InternedGraphNameNtNtCsjv2Y2xFO4ua_4core5clone5Clone5cloneB8_:
  335|   349k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1b_NtCs5bua6W9iSBw_5oxrdf9interningNtB6_12InternedTermNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqB8_:
  392|  11.2k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1c_NtCs5bua6W9iSBw_5oxrdf9interningNtB6_12InternedTermNtNtCsjv2Y2xFO4ua_4core3cmp3Ord3cmpB8_:
  392|   786k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1d_NtCs5bua6W9iSBw_5oxrdf9interningNtB6_12InternedTermNtNtCsjv2Y2xFO4ua_4core3cmp10PartialOrd11partial_cmpB8_:
  392|  84.6k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1f_NtCs5bua6W9iSBw_5oxrdf9interningNtB6_12InternedTermNtNtCsjv2Y2xFO4ua_4core5clone5Clone5cloneB8_:
  392|   381k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1k_NtCs5bua6W9iSBw_5oxrdf9interningNtB6_14InternedTripleNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqB8_:
  465|  11.2k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1l_NtCs5bua6W9iSBw_5oxrdf9interningNtB6_14InternedTripleNtNtCsjv2Y2xFO4ua_4core3cmp3Ord3cmpB8_:
  465|  17.3k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1m_NtCs5bua6W9iSBw_5oxrdf9interningNtB6_14InternedTripleNtNtCsjv2Y2xFO4ua_4core3cmp10PartialOrd11partial_cmpB8_:
  465|  2.41k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1o_NtCs5bua6W9iSBw_5oxrdf9interningNtB6_14InternedTripleNtNtCsjv2Y2xFO4ua_4core5clone5Clone5cloneB8_:
  465|  32.3k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1q_NtCs5bua6W9iSBw_5oxrdf9interningNtB6_21IdentityHasherBuilderNtNtCsjv2Y2xFO4ua_4core7default7Default7defaultB8_:
  507|  2.99k|#[derive(Default, Clone)]
_RNvXs1s_NtCs5bua6W9iSBw_5oxrdf9interningNtB6_14IdentityHasherNtNtCsjv2Y2xFO4ua_4core7default7Default7defaultB8_:
  518|   585k|#[derive(Default)]

_RNvMNtCs5bua6W9iSBw_5oxrdf7literalNtB2_7Literal6as_refCs3ABq5th2z32_4trig:
  132|  53.1k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  133|  53.1k|        LiteralRef(match &self.0 {
  134|  4.54k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  135|    875|            LiteralContent::LanguageTaggedString { value, language } => {
  136|    875|                LiteralRefContent::LanguageTaggedString { value, language }
  137|       |            }
  138|  47.7k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  139|  47.7k|                value,
  140|  47.7k|                datatype: datatype.as_ref(),
  141|  47.7k|            },
  142|       |        })
  143|  53.1k|    }
_RNvXsD_NtCs5bua6W9iSBw_5oxrdf7literalNtB5_7LiteralNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqCs3ABq5th2z32_4trig:
   37|  31.1k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsF_NtCs5bua6W9iSBw_5oxrdf7literalNtB5_7LiteralNtNtCsjv2Y2xFO4ua_4core5clone5Clone5cloneCs3ABq5th2z32_4trig:
   37|    278|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsI_NtCs5bua6W9iSBw_5oxrdf7literalNtB5_14LiteralContentNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqCs3ABq5th2z32_4trig:
   40|  31.1k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsM_NtCs5bua6W9iSBw_5oxrdf7literalNtB5_14LiteralContentNtNtCsjv2Y2xFO4ua_4core5clone5Clone5cloneCs3ABq5th2z32_4trig:
   40|    278|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMNtCs5bua6W9iSBw_5oxrdf7literalNtB2_7Literal6as_refCscuJmoqhSOSr_5oxttl:
  132|    559|    pub fn as_ref(&self) -> LiteralRef<'_> {
  133|    559|        LiteralRef(match &self.0 {
  134|      5|            LiteralContent::String(value) => LiteralRefContent::String(value),
  135|      0|            LiteralContent::LanguageTaggedString { value, language } => {
  136|      0|                LiteralRefContent::LanguageTaggedString { value, language }
  137|       |            }
  138|    554|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  139|    554|                value,
  140|    554|                datatype: datatype.as_ref(),
  141|    554|            },
  142|       |        })
  143|    559|    }
_RNvMst_NtCs5bua6W9iSBw_5oxrdf7literalNtB5_10LiteralRef5valueCscuJmoqhSOSr_5oxttl:
  491|  29.8k|    pub const fn value(self) -> &'a str {
  492|  29.8k|        match self.0 {
  493|  3.83k|            LiteralRefContent::String(value)
  494|    603|            | LiteralRefContent::LanguageTaggedString { value, .. }
  495|  29.8k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  496|  29.8k|        }
  497|  29.8k|    }
_RNvMst_NtCs5bua6W9iSBw_5oxrdf7literalNtB5_10LiteralRef8datatypeCscuJmoqhSOSr_5oxttl:
  516|  29.8k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  517|  29.8k|        match self.0 {
  518|  3.83k|            LiteralRefContent::String(_) => xsd::STRING,
  519|    603|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  520|  25.4k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  521|       |        }
  522|  29.8k|    }
_RNvXsF_NtCs5bua6W9iSBw_5oxrdf7literalNtB5_7LiteralNtNtCsjv2Y2xFO4ua_4core5clone5Clone5cloneCscuJmoqhSOSr_5oxttl:
   37|   118k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsM_NtCs5bua6W9iSBw_5oxrdf7literalNtB5_14LiteralContentNtNtCsjv2Y2xFO4ua_4core5clone5Clone5cloneCscuJmoqhSOSr_5oxttl:
   40|   118k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsu_NtCs5bua6W9iSBw_5oxrdf7literalNtB5_10LiteralRefNtNtCsjv2Y2xFO4ua_4core3fmt7Display3fmtCscuJmoqhSOSr_5oxttl:
  568|  4.43k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  569|  4.43k|        match self.0 {
  570|  3.83k|            LiteralRefContent::String(value) => print_quoted_str(value, f),
  571|    603|            LiteralRefContent::LanguageTaggedString { value, language } => {
  572|    603|                print_quoted_str(value, f)?;
  573|    603|                write!(f, "@{language}")
  574|       |            }
  575|      0|            LiteralRefContent::TypedLiteral { value, datatype } => {
  576|      0|                print_quoted_str(value, f)?;
  577|      0|                write!(f, "^^{datatype}")
  578|       |            }
  579|       |        }
  580|  4.43k|    }
_RINvMNtCs5bua6W9iSBw_5oxrdf7literalNtB3_7Literal18new_simple_literalRNtNtCs15NWbik7Z2V_5alloc6string6StringECscuJmoqhSOSr_5oxttl:
   50|    204|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   51|    204|        Self(LiteralContent::String(value.into()))
   52|    204|    }
_RINvMNtCs5bua6W9iSBw_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCs15NWbik7Z2V_5alloc6string6StringEB5_:
   50|  15.2k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   51|  15.2k|        Self(LiteralContent::String(value.into()))
   52|  15.2k|    }
_RINvMNtCs5bua6W9iSBw_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   56|   103k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   57|   103k|        let value = value.into();
   58|   103k|        let datatype = datatype.into();
   59|   103k|        Self(if datatype == xsd::STRING {
   60|      0|            LiteralContent::String(value)
   61|       |        } else {
   62|   103k|            LiteralContent::TypedLiteral { value, datatype }
   63|       |        })
   64|   103k|    }
_RINvMNtCs5bua6W9iSBw_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCs15NWbik7Z2V_5alloc6string6StringB1n_EB5_:
   88|  2.53k|    pub fn new_language_tagged_literal_unchecked(
   89|  2.53k|        value: impl Into<String>,
   90|  2.53k|        language: impl Into<String>,
   91|  2.53k|    ) -> Self {
   92|  2.53k|        Self(LiteralContent::LanguageTaggedString {
   93|  2.53k|            value: value.into(),
   94|  2.53k|            language: language.into(),
   95|  2.53k|        })
   96|  2.53k|    }
_RINvMst_NtCs5bua6W9iSBw_5oxrdf7literalNtB6_10LiteralRef17new_typed_literalNtNtB8_10named_node12NamedNodeRefEB8_:
  468|  79.3k|    pub fn new_typed_literal(value: &'a str, datatype: impl Into<NamedNodeRef<'a>>) -> Self {
  469|  79.3k|        let datatype = datatype.into();
  470|  79.3k|        LiteralRef(if datatype == xsd::STRING {
  471|      0|            LiteralRefContent::String(value)
  472|       |        } else {
  473|  79.3k|            LiteralRefContent::TypedLiteral { value, datatype }
  474|       |        })
  475|  79.3k|    }
_RINvNtCs5bua6W9iSBw_5oxrdf7literal16print_quoted_strNtNtCsjv2Y2xFO4ua_4core3fmt9FormatterEB4_:
  619|  4.43k|pub fn print_quoted_str(string: &str, f: &mut impl Write) -> fmt::Result {
  620|  4.43k|    f.write_char('"')?;
  621|  35.1k|    for c in string.chars() {
  622|  35.1k|        match c {
  623|    230|            '\u{08}' => f.write_str("\\b"),
  624|    200|            '\t' => f.write_str("\\t"),
  625|    310|            '\n' => f.write_str("\\n"),
  626|    216|            '\u{0c}' => f.write_str("\\f"),
  627|    371|            '\r' => f.write_str("\\r"),
  628|    916|            '"' => f.write_str("\\\""),
  629|     99|            '\\' => f.write_str("\\\\"),
  630|  32.8k|            '\0'..='\u{1f}' | '\u{7f}' => write!(f, "\\u{:04X}", u32::from(c)),
  631|  14.1k|            _ => f.write_char(c),
  632|      0|        }?;
  633|       |    }
  634|  4.43k|    f.write_char('"')
  635|  4.43k|}
_RINvXsV_NtCs5bua6W9iSBw_5oxrdf7literalNtB6_10LiteralRefNtNtCsjv2Y2xFO4ua_4core4hash4Hash4hashNtNtNtCsjm3A4zjcIt4_3std4hash6random13DefaultHasherEB8_:
  443|  74.5k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RINvXs13_NtCs5bua6W9iSBw_5oxrdf7literalNtB7_17LiteralRefContentNtNtCsjv2Y2xFO4ua_4core4hash4Hash4hashNtNtNtCsjm3A4zjcIt4_3std4hash6random13DefaultHasherEB9_:
  446|  74.5k|#[derive(PartialEq, Eq, Debug, Clone, Copy, Hash)]
_RNvMNtCs5bua6W9iSBw_5oxrdf7literalNtB2_7Literal6as_refB4_:
  132|  8.97k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  133|  8.97k|        LiteralRef(match &self.0 {
  134|     31|            LiteralContent::String(value) => LiteralRefContent::String(value),
  135|      0|            LiteralContent::LanguageTaggedString { value, language } => {
  136|      0|                LiteralRefContent::LanguageTaggedString { value, language }
  137|       |            }
  138|  8.94k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  139|  8.94k|                value,
  140|  8.94k|                datatype: datatype.as_ref(),
  141|  8.94k|            },
  142|       |        })
  143|  8.97k|    }
_RNvMst_NtCs5bua6W9iSBw_5oxrdf7literalNtB5_10LiteralRef18new_simple_literalB7_:
  462|  6.71k|    pub const fn new_simple_literal(value: &'a str) -> Self {
  463|  6.71k|        LiteralRef(LiteralRefContent::String(value))
  464|  6.71k|    }
_RNvMst_NtCs5bua6W9iSBw_5oxrdf7literalNtB5_10LiteralRef37new_language_tagged_literal_uncheckedB7_:
  485|  3.36k|    pub const fn new_language_tagged_literal_unchecked(value: &'a str, language: &'a str) -> Self {
  486|  3.36k|        LiteralRef(LiteralRefContent::LanguageTaggedString { value, language })
  487|  3.36k|    }
_RNvMst_NtCs5bua6W9iSBw_5oxrdf7literalNtB5_10LiteralRef5valueB7_:
  491|  40.1k|    pub const fn value(self) -> &'a str {
  492|  40.1k|        match self.0 {
  493|  1.09k|            LiteralRefContent::String(value)
  494|    408|            | LiteralRefContent::LanguageTaggedString { value, .. }
  495|  40.1k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  496|  40.1k|        }
  497|  40.1k|    }
_RNvMst_NtCs5bua6W9iSBw_5oxrdf7literalNtB5_10LiteralRef8languageB7_:
  504|  1.50k|    pub const fn language(self) -> Option<&'a str> {
  505|  1.50k|        match self.0 {
  506|    408|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  507|  1.09k|            _ => None,
  508|       |        }
  509|  1.50k|    }
_RNvMst_NtCs5bua6W9iSBw_5oxrdf7literalNtB5_10LiteralRef8datatypeB7_:
  516|  38.6k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  517|  38.6k|        match self.0 {
  518|      0|            LiteralRefContent::String(_) => xsd::STRING,
  519|      0|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  520|  38.6k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  521|       |        }
  522|  38.6k|    }
_RNvMst_NtCs5bua6W9iSBw_5oxrdf7literalNtB5_10LiteralRef8is_plainB7_:
  529|  40.1k|    pub const fn is_plain(self) -> bool {
  530|  38.6k|        matches!(
  531|  40.1k|            self.0,
  532|       |            LiteralRefContent::String(_) | LiteralRefContent::LanguageTaggedString { .. }
  533|       |        )
  534|  40.1k|    }
_RNvMst_NtCs5bua6W9iSBw_5oxrdf7literalNtB5_10LiteralRef10into_ownedB7_:
  537|  16.1k|    pub fn into_owned(self) -> Literal {
  538|  16.1k|        Literal(match self.0 {
  539|     42|            LiteralRefContent::String(value) => LiteralContent::String(value.to_owned()),
  540|      0|            LiteralRefContent::LanguageTaggedString { value, language } => {
  541|      0|                LiteralContent::LanguageTaggedString {
  542|      0|                    value: value.to_owned(),
  543|      0|                    language: language.to_owned(),
  544|      0|                }
  545|       |            }
  546|  16.1k|            LiteralRefContent::TypedLiteral { value, datatype } => LiteralContent::TypedLiteral {
  547|  16.1k|                value: value.to_owned(),
  548|  16.1k|                datatype: datatype.into_owned(),
  549|  16.1k|            },
  550|       |        })
  551|  16.1k|    }
_RNvXsF_NtCs5bua6W9iSBw_5oxrdf7literalNtB5_7LiteralNtNtCsjv2Y2xFO4ua_4core5clone5Clone5cloneB7_:
   37|  3.71k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsM_NtCs5bua6W9iSBw_5oxrdf7literalNtB5_14LiteralContentNtNtCsjv2Y2xFO4ua_4core5clone5Clone5cloneB7_:
   40|  3.71k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]

_RNvMNtCs5bua6W9iSBw_5oxrdf10named_nodeNtB2_9NamedNode6as_refCs3ABq5th2z32_4trig:
   54|   249k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|   249k|        NamedNodeRef::new_unchecked(&self.iri)
   56|   249k|    }
_RNvMNtCs5bua6W9iSBw_5oxrdf10named_nodeNtB2_9NamedNode6as_strCs3ABq5th2z32_4trig:
   44|  14.2k|    pub fn as_str(&self) -> &str {
   45|  14.2k|        self.iri.as_str()
   46|  14.2k|    }
_RNvMs4_NtCs5bua6W9iSBw_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCs3ABq5th2z32_4trig:
  138|  85.6k|    pub fn into_owned(self) -> NamedNode {
  139|  85.6k|        NamedNode::new_unchecked(self.iri)
  140|  85.6k|    }
_RNvMs4_NtCs5bua6W9iSBw_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCs3ABq5th2z32_4trig:
  128|   249k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   249k|        Self { iri }
  130|   249k|    }
_RNvMs4_NtCs5bua6W9iSBw_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCs3ABq5th2z32_4trig:
  133|  93.5k|    pub const fn as_str(self) -> &'a str {
  134|  93.5k|        self.iri
  135|  93.5k|    }
_RNvXs5_NtCs5bua6W9iSBw_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCsjv2Y2xFO4ua_4core3fmt7Display3fmtCs3ABq5th2z32_4trig:
  145|  79.2k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|  79.2k|        write!(f, "<{}>", self.as_str())
  147|  79.2k|    }
_RNvXs8_NtCs5bua6W9iSBw_5oxrdf10named_nodeNtB5_12NamedNodeRefINtNtCsjv2Y2xFO4ua_4core3cmp9PartialEqNtB5_9NamedNodeE2eqCs3ABq5th2z32_4trig:
  166|  14.2k|    fn eq(&self, other: &NamedNode) -> bool {
  167|  14.2k|        self.as_str() == other.as_str()
  168|  14.2k|    }
_RNvXsl_NtCs5bua6W9iSBw_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqCs3ABq5th2z32_4trig:
   17|   145k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsp_NtCs5bua6W9iSBw_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCsjv2Y2xFO4ua_4core5clone5Clone5cloneCs3ABq5th2z32_4trig:
   17|    768|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsu_NtCs5bua6W9iSBw_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqCs3ABq5th2z32_4trig:
  106|  19.8k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMNtCs5bua6W9iSBw_5oxrdf10named_nodeNtB2_9NamedNode6as_refCscuJmoqhSOSr_5oxttl:
   54|  2.13k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  2.13k|        NamedNodeRef::new_unchecked(&self.iri)
   56|  2.13k|    }
_RNvMs4_NtCs5bua6W9iSBw_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCscuJmoqhSOSr_5oxttl:
  138|  12.7k|    pub fn into_owned(self) -> NamedNode {
  139|  12.7k|        NamedNode::new_unchecked(self.iri)
  140|  12.7k|    }
_RNvMs4_NtCs5bua6W9iSBw_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCscuJmoqhSOSr_5oxttl:
  128|  2.13k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  2.13k|        Self { iri }
  130|  2.13k|    }
_RNvMs4_NtCs5bua6W9iSBw_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCscuJmoqhSOSr_5oxttl:
  133|  14.3k|    pub const fn as_str(self) -> &'a str {
  134|  14.3k|        self.iri
  135|  14.3k|    }
_RNvXs5_NtCs5bua6W9iSBw_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCsjv2Y2xFO4ua_4core3fmt7Display3fmtCscuJmoqhSOSr_5oxttl:
  145|  14.3k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|  14.3k|        write!(f, "<{}>", self.as_str())
  147|  14.3k|    }
_RNvXs_NtCs5bua6W9iSBw_5oxrdf10named_nodeNtB4_9NamedNodeNtNtCsjv2Y2xFO4ua_4core3fmt7Display3fmtCscuJmoqhSOSr_5oxttl:
   61|    780|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   62|    780|        self.as_ref().fmt(f)
   63|    780|    }
_RNvXsp_NtCs5bua6W9iSBw_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCsjv2Y2xFO4ua_4core5clone5Clone5cloneCscuJmoqhSOSr_5oxttl:
   17|   510k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMNtCs5bua6W9iSBw_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|   103k|    pub fn as_str(&self) -> &str {
   45|   103k|        self.iri.as_str()
   46|   103k|    }
_RNvMNtCs5bua6W9iSBw_5oxrdf10named_nodeNtB2_9NamedNode6as_refB4_:
   54|  30.7k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  30.7k|        NamedNodeRef::new_unchecked(&self.iri)
   56|  30.7k|    }
_RNvMs4_NtCs5bua6W9iSBw_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedB7_:
  128|   327k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   327k|        Self { iri }
  130|   327k|    }
_RNvMs4_NtCs5bua6W9iSBw_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|   236k|    pub const fn as_str(self) -> &'a str {
  134|   236k|        self.iri
  135|   236k|    }
_RNvMs4_NtCs5bua6W9iSBw_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|   335k|    pub fn into_owned(self) -> NamedNode {
  139|   335k|        NamedNode::new_unchecked(self.iri)
  140|   335k|    }
_RNvXs6_NtCs5bua6W9iSBw_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCsjv2Y2xFO4ua_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|   280k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|   280k|        node.into_owned()
  154|   280k|    }
_RNvXs9_NtCs5bua6W9iSBw_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCsjv2Y2xFO4ua_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|   103k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|   103k|        self.as_str() == other.as_str()
  175|   103k|    }
_RNvXsp_NtCs5bua6W9iSBw_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCsjv2Y2xFO4ua_4core5clone5Clone5cloneB7_:
   17|  12.9k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsu_NtCs5bua6W9iSBw_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqB7_:
  106|  79.3k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RINvMNtCs5bua6W9iSBw_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCs15NWbik7Z2V_5alloc6string6StringEB5_:
   39|   235k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   235k|        Self { iri: iri.into() }
   41|   235k|    }
_RINvMNtCs5bua6W9iSBw_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|   434k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   434k|        Self { iri: iri.into() }
   41|   434k|    }
_RINvXsA_NtCs5bua6W9iSBw_5oxrdf10named_nodeNtB6_12NamedNodeRefNtNtCsjv2Y2xFO4ua_4core4hash4Hash4hashNtNtNtCsjm3A4zjcIt4_3std4hash6random13DefaultHasherEB8_:
  106|   246k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]

_RNvMs18_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_9GraphName16is_default_graphCs3ABq5th2z32_4trig:
  876|  86.0k|    pub fn is_default_graph(&self) -> bool {
  877|  86.0k|        self.as_ref().is_default_graph()
  878|  86.0k|    }
_RNvMs18_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_9GraphName6as_refCs3ABq5th2z32_4trig:
  881|   283k|    pub fn as_ref(&self) -> GraphNameRef<'_> {
  882|   283k|        match self {
  883|  28.4k|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.as_ref()),
  884|  12.2k|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.as_ref()),
  885|   242k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  886|       |        }
  887|   283k|    }
_RNvMs1g_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_12GraphNameRef10into_ownedCs3ABq5th2z32_4trig:
  969|  1.95k|    pub fn into_owned(self) -> GraphName {
  970|  1.95k|        match self {
  971|    907|            Self::NamedNode(node) => GraphName::NamedNode(node.into_owned()),
  972|    362|            Self::BlankNode(node) => GraphName::BlankNode(node.into_owned()),
  973|    686|            Self::DefaultGraph => GraphName::DefaultGraph,
  974|       |        }
  975|  1.95k|    }
_RNvMs1g_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_12GraphNameRef16is_default_graphCs3ABq5th2z32_4trig:
  964|  86.0k|    pub fn is_default_graph(&self) -> bool {
  965|  86.0k|        matches!(self, Self::DefaultGraph)
  966|  86.0k|    }
_RNvMs1q_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_4Quad6as_refCs3ABq5th2z32_4trig:
 1098|   113k|    pub fn as_ref(&self) -> QuadRef<'_> {
 1099|   113k|        QuadRef {
 1100|   113k|            subject: self.subject.as_ref(),
 1101|   113k|            predicate: self.predicate.as_ref(),
 1102|   113k|            object: self.object.as_ref(),
 1103|   113k|            graph_name: self.graph_name.as_ref(),
 1104|   113k|        }
 1105|   113k|    }
_RNvMsc_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_7Subject6as_refCs3ABq5th2z32_4trig:
  181|   193k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|   193k|        match self {
  183|  51.3k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|   140k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|  1.00k|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|   193k|    }
_RNvMsn_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_10SubjectRef10into_ownedCs3ABq5th2z32_4trig:
  294|  70.0k|    pub fn into_owned(self) -> Subject {
  295|  70.0k|        match self {
  296|  6.43k|            Self::NamedNode(node) => Subject::NamedNode(node.into_owned()),
  297|  63.2k|            Self::BlankNode(node) => Subject::BlankNode(node.into_owned()),
  298|       |            #[cfg(feature = "rdf-star")]
  299|    278|            Self::Triple(triple) => Subject::Triple(Box::new(triple.clone())),
  300|       |        }
  301|  70.0k|    }
_RNvMsy_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_4Term6as_refCs3ABq5th2z32_4trig:
  417|   113k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|   113k|        match self {
  419|  8.61k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|  50.4k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  53.1k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|  1.07k|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|   113k|    }
_RNvXs1Q_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_7SubjectNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqCs3ABq5th2z32_4trig:
  155|  86.5k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1S_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_7SubjectNtNtCsjv2Y2xFO4ua_4core5clone5Clone5cloneCs3ABq5th2z32_4trig:
  155|    278|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1X_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_10SubjectRefNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqCs3ABq5th2z32_4trig:
  268|  79.9k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RNvXs1h_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_12GraphNameRefNtNtCsjv2Y2xFO4ua_4core3fmt7Display3fmtCs3ABq5th2z32_4trig:
  980|  1.26k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  981|  1.26k|        match self {
  982|    907|            Self::NamedNode(node) => node.fmt(f),
  983|    362|            Self::BlankNode(node) => node.fmt(f),
  984|      0|            Self::DefaultGraph => write!(f, "DEFAULT"),
  985|       |        }
  986|  1.26k|    }
_RNvXs1w_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_7QuadRefINtNtCsjv2Y2xFO4ua_4core7convert4FromRNtB6_4QuadE4fromCs3ABq5th2z32_4trig:
 1214|   113k|    fn from(quad: &'a Quad) -> Self {
 1215|   113k|        quad.as_ref()
 1216|   113k|    }
_RNvXs25_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_4TermNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqCs3ABq5th2z32_4trig:
  385|  86.4k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs27_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_4TermNtNtCsjv2Y2xFO4ua_4core5clone5Clone5cloneCs3ABq5th2z32_4trig:
  385|    278|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2H_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_12GraphNameRefNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqCs3ABq5th2z32_4trig:
  944|  84.2k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash, Default)]
_RNvXs2Q_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_4QuadNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqCs3ABq5th2z32_4trig:
 1065|  85.6k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2k_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_6TripleNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqCs3ABq5th2z32_4trig:
  713|    884|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2m_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_6TripleNtNtCsjv2Y2xFO4ua_4core5clone5Clone5cloneCs3ABq5th2z32_4trig:
  713|    278|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2z_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_9GraphNameNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqCs3ABq5th2z32_4trig:
  856|  85.6k|#[derive(Eq, PartialEq, Debug, Clone, Hash, Default)]
_RINvMs12_NtCs5bua6W9iSBw_5oxrdf6tripleNtB7_6Triple3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtB7_4TermECscuJmoqhSOSr_5oxttl:
  728|  5.10k|    pub fn new(
  729|  5.10k|        subject: impl Into<Subject>,
  730|  5.10k|        predicate: impl Into<NamedNode>,
  731|  5.10k|        object: impl Into<Term>,
  732|  5.10k|    ) -> Self {
  733|  5.10k|        Self {
  734|  5.10k|            subject: subject.into(),
  735|  5.10k|            predicate: predicate.into(),
  736|  5.10k|            object: object.into(),
  737|  5.10k|        }
  738|  5.10k|    }
_RINvMs1q_NtCs5bua6W9iSBw_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node12NamedNodeRefB11_NtB7_9GraphNameECscuJmoqhSOSr_5oxttl:
 1083|  9.71k|    pub fn new(
 1084|  9.71k|        subject: impl Into<Subject>,
 1085|  9.71k|        predicate: impl Into<NamedNode>,
 1086|  9.71k|        object: impl Into<Term>,
 1087|  9.71k|        graph_name: impl Into<GraphName>,
 1088|  9.71k|    ) -> Self {
 1089|  9.71k|        Self {
 1090|  9.71k|            subject: subject.into(),
 1091|  9.71k|            predicate: predicate.into(),
 1092|  9.71k|            object: object.into(),
 1093|  9.71k|            graph_name: graph_name.into(),
 1094|  9.71k|        }
 1095|  9.71k|    }
_RINvMs1q_NtCs5bua6W9iSBw_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node12NamedNodeRefNtNtB9_10blank_node9BlankNodeNtB7_9GraphNameECscuJmoqhSOSr_5oxttl:
 1083|  43.4k|    pub fn new(
 1084|  43.4k|        subject: impl Into<Subject>,
 1085|  43.4k|        predicate: impl Into<NamedNode>,
 1086|  43.4k|        object: impl Into<Term>,
 1087|  43.4k|        graph_name: impl Into<GraphName>,
 1088|  43.4k|    ) -> Self {
 1089|  43.4k|        Self {
 1090|  43.4k|            subject: subject.into(),
 1091|  43.4k|            predicate: predicate.into(),
 1092|  43.4k|            object: object.into(),
 1093|  43.4k|            graph_name: graph_name.into(),
 1094|  43.4k|        }
 1095|  43.4k|    }
_RINvMs1q_NtCs5bua6W9iSBw_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtB7_4TermNtB7_9GraphNameECscuJmoqhSOSr_5oxttl:
 1083|   290k|    pub fn new(
 1084|   290k|        subject: impl Into<Subject>,
 1085|   290k|        predicate: impl Into<NamedNode>,
 1086|   290k|        object: impl Into<Term>,
 1087|   290k|        graph_name: impl Into<GraphName>,
 1088|   290k|    ) -> Self {
 1089|   290k|        Self {
 1090|   290k|            subject: subject.into(),
 1091|   290k|            predicate: predicate.into(),
 1092|   290k|            object: object.into(),
 1093|   290k|            graph_name: graph_name.into(),
 1094|   290k|        }
 1095|   290k|    }
_RNvMsc_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_7Subject6as_refCscuJmoqhSOSr_5oxttl:
  181|    780|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|    780|        match self {
  183|    706|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|      8|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|     66|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|    780|    }
_RNvMsy_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_4Term6as_refCscuJmoqhSOSr_5oxttl:
  417|    780|    pub fn as_ref(&self) -> TermRef<'_> {
  418|    780|        match self {
  419|     93|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|    128|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|    559|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|      0|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|    780|    }
_RNvXs0_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_16NamedOrBlankNodeINtNtCsjv2Y2xFO4ua_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromCscuJmoqhSOSr_5oxttl:
   43|  75.4k|    fn from(node: NamedNode) -> Self {
   44|  75.4k|        Self::NamedNode(node)
   45|  75.4k|    }
_RNvXs1S_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_7SubjectNtNtCsjv2Y2xFO4ua_4core5clone5Clone5cloneCscuJmoqhSOSr_5oxttl:
  155|   291k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1a_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_9GraphNameINtNtCsjv2Y2xFO4ua_4core7convert4FromNtNtB8_10named_node9NamedNodeE4fromCscuJmoqhSOSr_5oxttl:
  899|  5.54k|    fn from(node: NamedNode) -> Self {
  900|  5.54k|        Self::NamedNode(node)
  901|  5.54k|    }
_RNvXs1c_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_9GraphNameINtNtCsjv2Y2xFO4ua_4core7convert4FromNtNtB8_10blank_node9BlankNodeE4fromCscuJmoqhSOSr_5oxttl:
  913|  1.90k|    fn from(node: BlankNode) -> Self {
  914|  1.90k|        Self::BlankNode(node)
  915|  1.90k|    }
_RNvXs1e_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_9GraphNameINtNtCsjv2Y2xFO4ua_4core7convert4FromNtB6_16NamedOrBlankNodeE4fromCscuJmoqhSOSr_5oxttl:
  927|  7.45k|    fn from(node: NamedOrBlankNode) -> Self {
  928|  7.45k|        match node {
  929|  5.54k|            NamedOrBlankNode::NamedNode(node) => node.into(),
  930|  1.90k|            NamedOrBlankNode::BlankNode(node) => node.into(),
  931|       |        }
  932|  7.45k|    }
_RNvXs27_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_4TermNtNtCsjv2Y2xFO4ua_4core5clone5Clone5cloneCscuJmoqhSOSr_5oxttl:
  385|   290k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2B_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_9GraphNameNtNtCsjv2Y2xFO4ua_4core5clone5Clone5cloneCscuJmoqhSOSr_5oxttl:
  856|   343k|#[derive(Eq, PartialEq, Debug, Clone, Hash, Default)]
_RNvXs2_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_16NamedOrBlankNodeINtNtCsjv2Y2xFO4ua_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromCscuJmoqhSOSr_5oxttl:
   57|  55.6k|    fn from(node: BlankNode) -> Self {
   58|  55.6k|        Self::BlankNode(node)
   59|  55.6k|    }
_RNvXsB_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_4TermINtNtCsjv2Y2xFO4ua_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCscuJmoqhSOSr_5oxttl:
  444|  12.5k|    fn from(node: NamedNodeRef<'_>) -> Self {
  445|  12.5k|        node.into_owned().into()
  446|  12.5k|    }
_RNvXsL_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_4TermINtNtCsjv2Y2xFO4ua_4core7convert4FromNtB5_7SubjectE4fromCscuJmoqhSOSr_5oxttl:
  520|     81|    fn from(node: Subject) -> Self {
  521|     81|        match node {
  522|      0|            Subject::NamedNode(node) => node.into(),
  523|     81|            Subject::BlankNode(node) => node.into(),
  524|       |            #[cfg(feature = "rdf-star")]
  525|      0|            Subject::Triple(triple) => Self::Triple(triple),
  526|       |        }
  527|     81|    }
_RNvXsP_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_7TermRefINtNtCsjv2Y2xFO4ua_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCscuJmoqhSOSr_5oxttl:
  599|  7.14k|    fn from(node: NamedNodeRef<'a>) -> Self {
  600|  7.14k|        Self::NamedNode(node)
  601|  7.14k|    }
_RNvXsR_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_7TermRefINtNtCsjv2Y2xFO4ua_4core7convert4FromNtNtB7_10blank_node12BlankNodeRefE4fromCscuJmoqhSOSr_5oxttl:
  613|  63.2k|    fn from(node: BlankNodeRef<'a>) -> Self {
  614|  63.2k|        Self::BlankNode(node)
  615|  63.2k|    }
_RNvXsV_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_7TermRefINtNtCsjv2Y2xFO4ua_4core7convert4FromRNtB5_6TripleE4fromCscuJmoqhSOSr_5oxttl:
  642|    344|    fn from(node: &'a Triple) -> Self {
  643|    344|        Self::Triple(node)
  644|    344|    }
_RNvXsY_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_7TermRefINtNtCsjv2Y2xFO4ua_4core7convert4FromNtB5_10SubjectRefE4fromCscuJmoqhSOSr_5oxttl:
  666|  70.7k|    fn from(node: SubjectRef<'a>) -> Self {
  667|  70.7k|        match node {
  668|  7.14k|            SubjectRef::NamedNode(node) => node.into(),
  669|  63.2k|            SubjectRef::BlankNode(node) => node.into(),
  670|       |            #[cfg(feature = "rdf-star")]
  671|    344|            SubjectRef::Triple(triple) => triple.into(),
  672|       |        }
  673|  70.7k|    }
_RNvXsf_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_7SubjectINtNtCsjv2Y2xFO4ua_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCscuJmoqhSOSr_5oxttl:
  207|    226|    fn from(node: NamedNodeRef<'_>) -> Self {
  208|    226|        node.into_owned().into()
  209|    226|    }
_RNvXsl_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_7SubjectINtNtCsjv2Y2xFO4ua_4core7convert4FromNtB5_16NamedOrBlankNodeE4fromCscuJmoqhSOSr_5oxttl:
  252|   109k|    fn from(node: NamedOrBlankNode) -> Self {
  253|   109k|        match node {
  254|  55.6k|            NamedOrBlankNode::NamedNode(node) => node.into(),
  255|  53.3k|            NamedOrBlankNode::BlankNode(node) => node.into(),
  256|       |        }
  257|   109k|    }
_RNvMsc_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_7Subject6as_refB7_:
  181|  10.7k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  10.7k|        match self {
  183|  9.72k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|     52|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|    935|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  10.7k|    }
_RNvXse_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_7SubjectINtNtCsjv2Y2xFO4ua_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|  64.0k|    fn from(node: NamedNode) -> Self {
  201|  64.0k|        Self::NamedNode(node)
  202|  64.0k|    }
_RNvXsg_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_7SubjectINtNtCsjv2Y2xFO4ua_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|   256k|    fn from(node: BlankNode) -> Self {
  215|   256k|        Self::BlankNode(node)
  216|   256k|    }
_RNvXsi_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_7SubjectINtNtCsjv2Y2xFO4ua_4core7convert4FromNtB5_6TripleE4fromB7_:
  229|  4.04k|    fn from(node: Triple) -> Self {
  230|  4.04k|        Self::Triple(Box::new(node))
  231|  4.04k|    }
_RNvMsn_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_10SubjectRef10into_ownedB7_:
  294|  18.3k|    pub fn into_owned(self) -> Subject {
  295|  18.3k|        match self {
  296|  17.3k|            Self::NamedNode(node) => Subject::NamedNode(node.into_owned()),
  297|     44|            Self::BlankNode(node) => Subject::BlankNode(node.into_owned()),
  298|       |            #[cfg(feature = "rdf-star")]
  299|    882|            Self::Triple(triple) => Subject::Triple(Box::new(triple.clone())),
  300|       |        }
  301|  18.3k|    }
_RNvMsy_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_4Term6as_refB7_:
  417|  10.7k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|  10.7k|        match self {
  419|  1.39k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|    338|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  8.97k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|      0|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|  10.7k|    }
_RNvXsA_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_4TermINtNtCsjv2Y2xFO4ua_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|  28.7k|    fn from(node: NamedNode) -> Self {
  438|  28.7k|        Self::NamedNode(node)
  439|  28.7k|    }
_RNvXsC_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_4TermINtNtCsjv2Y2xFO4ua_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  451|   196k|    fn from(node: BlankNode) -> Self {
  452|   196k|        Self::BlankNode(node)
  453|   196k|    }
_RNvXsE_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_4TermINtNtCsjv2Y2xFO4ua_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  465|   121k|    fn from(literal: Literal) -> Self {
  466|   121k|        Self::Literal(literal)
  467|   121k|    }
_RNvXsG_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_4TermINtNtCsjv2Y2xFO4ua_4core7convert4FromNtB5_6TripleE4fromB7_:
  480|  1.81k|    fn from(triple: Triple) -> Self {
  481|  1.81k|        Self::Triple(Box::new(triple))
  482|  1.81k|    }
_RNvMsN_NtCs5bua6W9iSBw_5oxrdf6tripleNtB5_7TermRef10into_ownedB7_:
  571|  18.9k|    pub fn into_owned(self) -> Term {
  572|  18.9k|        match self {
  573|  2.51k|            Self::NamedNode(node) => Term::NamedNode(node.into_owned()),
  574|    278|            Self::BlankNode(node) => Term::BlankNode(node.into_owned()),
  575|  16.1k|            Self::Literal(literal) => Term::Literal(literal.into_owned()),
  576|       |            #[cfg(feature = "rdf-star")]
  577|      0|            Self::Triple(triple) => Term::Triple(Box::new(triple.clone())),
  578|       |        }
  579|  18.9k|    }
_RNvMs12_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_6Triple6as_refB8_:
  752|  10.7k|    pub fn as_ref(&self) -> TripleRef<'_> {
  753|  10.7k|        TripleRef {
  754|  10.7k|            subject: self.subject.as_ref(),
  755|  10.7k|            predicate: self.predicate.as_ref(),
  756|  10.7k|            object: self.object.as_ref(),
  757|  10.7k|        }
  758|  10.7k|    }
_RNvMs14_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_9TripleRef10into_ownedB8_:
  824|  10.1k|    pub fn into_owned(self) -> Triple {
  825|  10.1k|        Triple {
  826|  10.1k|            subject: self.subject.into_owned(),
  827|  10.1k|            predicate: self.predicate.into_owned(),
  828|  10.1k|            object: self.object.into_owned(),
  829|  10.1k|        }
  830|  10.1k|    }
_RNvXs1S_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_7SubjectNtNtCsjv2Y2xFO4ua_4core5clone5Clone5cloneB8_:
  155|  4.59k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs27_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_4TermNtNtCsjv2Y2xFO4ua_4core5clone5Clone5cloneB8_:
  385|  4.59k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2m_NtCs5bua6W9iSBw_5oxrdf6tripleNtB6_6TripleNtNtCsjv2Y2xFO4ua_4core5clone5Clone5cloneB8_:
  713|  4.59k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]

_RNCNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB6_7N3Lexer9parse_iri0B8_:
  224|  25.5k|                .map_err(|e| (position, e.to_string()))?
_RNCNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB6_7N3Lexer26recognize_pname_or_keyword0B8_:
  320|  44.3k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|  44.3k|                prefix: pn_prefix,
  322|  44.3k|                local,
  323|  44.3k|                might_be_invalid_iri,
  324|  44.3k|            }),
_RNCNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB6_7N3Lexer18recognize_variable0B8_:
  337|  20.3k|            result.and_then(|(name, _)| {
  338|  20.3k|                if name.is_empty() {
  339|  16.8k|                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|  3.55k|                    Ok(N3Token::Variable(name))
  342|       |                }
  343|  20.3k|            }),
_RNCNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB6_7N3Lexer14parse_lang_tag0B8_:
  577|  3.12k|                .map_err(|e| (position.clone(), e.to_string()))?
_RNCNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_char0B8_:
  802|    557|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  803|    557|            (
  804|    557|                position..position + len + 2,
  805|    557|                format!(
  806|    557|                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  807|    557|                ),
  808|    557|            )
  809|    557|        })?;
_RNCNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_chars_0B8_:
  810|    260|        let c = char::from_u32(codepoint).ok_or_else(|| {
  811|    260|            (
  812|    260|                position..position + len +2,
  813|    260|                format!(
  814|    260|                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  815|    260|                ),
  816|    260|            )
  817|    260|        })?;
_RNCNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB6_7N3Lexer22recognize_unicode_char0B8_:
  882|  21.9k|                .map(|c| (c, bytes_needed + 1))
_RNCNvNtCscuJmoqhSOSr_5oxttl5lexer13str_from_utf80B5_:
  954|  2.84k|    str::from_utf8(data).map_err(|e| {
  955|  2.84k|        (
  956|  2.84k|            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  957|  2.84k|            format!("Invalid UTF-8: {e}"),
  958|  2.84k|        )
  959|  2.84k|            .into()
  960|  2.84k|    })
_RNCNvNtCscuJmoqhSOSr_5oxttl5lexer16string_from_utf80B5_:
  964|  11.8k|    String::from_utf8(data).map_err(|e| {
  965|  11.8k|        (
  966|  11.8k|            range.start + e.utf8_error().valid_up_to()
  967|  11.8k|                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  968|  11.8k|            format!("Invalid UTF-8: {e}"),
  969|  11.8k|        )
  970|  11.8k|            .into()
  971|  11.8k|    })
_RNvXNtCscuJmoqhSOSr_5oxttl5lexerNtB2_7N3LexerNtNtNtB4_7toolkit5lexer15TokenRecognizer20recognize_next_token:
   55|  4.80M|    fn recognize_next_token<'a>(
   56|  4.80M|        &mut self,
   57|  4.80M|        data: &'a [u8],
   58|  4.80M|        is_ending: bool,
   59|  4.80M|        options: &N3LexerOptions,
   60|  4.80M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
   61|  4.80M|        match *data.first()? {
   62|   596k|            b'<' => match *data.get(1)? {
   63|  39.3k|                b'<' => Some((2, Ok(N3Token::Punctuation("<<")))),
   64|  9.38k|                b'=' if self.mode == N3LexerMode::N3 => {
   65|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   66|      0|                        Some(if let Ok(result) = result {
   67|      0|                            (consumed, Ok(result))
   68|       |                        } else {
   69|      0|                            (2, Ok(N3Token::Punctuation("<=")))
   70|       |                        })
   71|      0|                    } else if is_ending {
   72|      0|                        Some((2, Ok(N3Token::Punctuation("<="))))
   73|       |                    } else {
   74|      0|                        None
   75|       |                    }
   76|       |                }
   77|  3.90k|                b'-' if self.mode == N3LexerMode::N3 => {
   78|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   79|      0|                        Some(if let Ok(result) = result {
   80|      0|                            (consumed, Ok(result))
   81|       |                        } else {
   82|      0|                            (2, Ok(N3Token::Punctuation("<-")))
   83|       |                        })
   84|      0|                    } else if is_ending {
   85|      0|                        Some((2, Ok(N3Token::Punctuation("<-"))))
   86|       |                    } else {
   87|      0|                        None
   88|       |                    }
   89|       |                }
   90|   543k|                _ => self.recognize_iri(data, options),
   91|       |            },
   92|       |            b'>' => {
   93|  55.9k|                if *data.get(1)? == b'>' {
   94|  17.8k|                    Some((2, Ok(N3Token::Punctuation(">>"))))
   95|       |                } else {
   96|  32.9k|                    Some((1, Ok(N3Token::Punctuation(">"))))
   97|       |                }
   98|       |            }
   99|   188k|            b'_' => match data.get(1)? {
  100|   151k|                b':' => Self::recognize_blank_node_label(data),
  101|  2.99k|                c => Some((
  102|  2.99k|                    1,
  103|  2.99k|                    Err((0, format!("Unexpected character '{}'", char::from(*c))).into()),
  104|  2.99k|                )),
  105|       |            },
  106|       |            b'"' => {
  107|  39.8k|                if self.mode != N3LexerMode::NTriples
  108|  39.8k|                    && *data.get(1)? == b'"'
  109|  25.0k|                    && *data.get(2)? == b'"'
  110|       |                {
  111|  21.2k|                    Self::recognize_long_string(data, b'"')
  112|       |                } else {
  113|  17.0k|                    Self::recognize_string(data, b'"')
  114|       |                }
  115|       |            }
  116|  67.0k|            b'\'' if self.mode != N3LexerMode::NTriples => {
  117|  67.0k|                if *data.get(1)? == b'\'' && *data.get(2)? == b'\'' {
  118|  12.2k|                    Self::recognize_long_string(data, b'\'')
  119|       |                } else {
  120|  50.2k|                    Self::recognize_string(data, b'\'')
  121|       |                }
  122|       |            }
  123|  50.6k|            b'@' => self.recognize_lang_tag(data),
  124|   575k|            b'.' => match data.get(1) {
  125|   156k|                Some(b'0'..=b'9') => Self::recognize_number(data),
  126|   390k|                Some(_) => Some((1, Ok(N3Token::Punctuation(".")))),
  127|   159k|                None => is_ending.then_some((1, Ok(N3Token::Punctuation(".")))),
  128|       |            },
  129|       |            b'^' => {
  130|  14.2k|                if *data.get(1)? == b'^' {
  131|  2.64k|                    Some((2, Ok(N3Token::Punctuation("^^"))))
  132|       |                } else {
  133|  10.9k|                    Some((1, Ok(N3Token::Punctuation("^"))))
  134|       |                }
  135|       |            }
  136|   331k|            b'(' => Some((1, Ok(N3Token::Punctuation("(")))),
  137|  33.4k|            b')' => Some((1, Ok(N3Token::Punctuation(")")))),
  138|  24.0k|            b'[' => Some((1, Ok(N3Token::Punctuation("[")))),
  139|  5.20k|            b']' => Some((1, Ok(N3Token::Punctuation("]")))),
  140|       |            b'{' => {
  141|   118k|                if *data.get(1)? == b'|' {
  142|  1.28k|                    Some((2, Ok(N3Token::Punctuation("{|"))))
  143|       |                } else {
  144|  61.1k|                    Some((1, Ok(N3Token::Punctuation("{"))))
  145|       |                }
  146|       |            }
  147|  3.61k|            b'}' => Some((1, Ok(N3Token::Punctuation("}")))),
  148|  31.2k|            b',' => Some((1, Ok(N3Token::Punctuation(",")))),
  149|  19.0k|            b';' => Some((1, Ok(N3Token::Punctuation(";")))),
  150|  5.05k|            b'!' => Some((1, Ok(N3Token::Punctuation("!")))),
  151|       |            b'|' => {
  152|  5.07k|                if *data.get(1)? == b'}' {
  153|     93|                    Some((2, Ok(N3Token::Punctuation("|}"))))
  154|       |                } else {
  155|  4.22k|                    Some((1, Ok(N3Token::Punctuation("|"))))
  156|       |                }
  157|       |            }
  158|       |            b'=' => {
  159|  19.1k|                if *data.get(1)? == b'>' {
  160|    183|                    Some((2, Ok(N3Token::Punctuation("=>"))))
  161|       |                } else {
  162|  18.1k|                    Some((1, Ok(N3Token::Punctuation("="))))
  163|       |                }
  164|       |            }
  165|  1.09M|            b'0'..=b'9' | b'+' | b'-' => Self::recognize_number(data),
  166|  46.7k|            b'?' => self.recognize_variable(data, is_ending),
  167|  1.74M|            _ => self.recognize_pname_or_keyword(data, is_ending),
  168|       |        }
  169|  4.80M|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer3new:
  173|  22.9k|    pub fn new(mode: N3LexerMode, unchecked: bool) -> Self {
  174|  22.9k|        Self { mode, unchecked }
  175|  22.9k|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer13recognize_iri:
  177|   543k|    fn recognize_iri(
  178|   543k|        &self,
  179|   543k|        data: &[u8],
  180|   543k|        options: &N3LexerOptions,
  181|   543k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  182|   543k|        // [18] 	IRIREF 	::= 	'<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
  183|   543k|        let mut string = Vec::new();
  184|   543k|        let mut i = 1;
  185|       |        loop {
  186|   543k|            let end = memchr2(b'>', b'\\', &data[i..])?;
  187|   337k|            string.extend_from_slice(&data[i..i + end]);
  188|   337k|            i += end;
  189|   337k|            match data[i] {
  190|       |                b'>' => {
  191|       |                    #[allow(clippy::range_plus_one)]
  192|   330k|                    return Some((i + 1, self.parse_iri(string, 0..i + 1, options)));
  193|       |                }
  194|       |                b'\\' => {
  195|  6.98k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, false)?;
  196|  1.58k|                    i += additional + 1;
  197|  1.58k|                    match c {
  198|      0|                        Ok(c) => {
  199|      0|                            let mut buf = [0; 4];
  200|      0|                            string.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  201|      0|                        }
  202|  1.58k|                        Err(e) => return Some((i, Err(e))),
  203|       |                    }
  204|       |                }
  205|      0|                _ => unreachable!(),
  206|       |            }
  207|       |        }
  208|   543k|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer9parse_iri:
  210|   330k|    fn parse_iri(
  211|   330k|        &self,
  212|   330k|        iri: Vec<u8>,
  213|   330k|        position: Range<usize>,
  214|   330k|        options: &N3LexerOptions,
  215|   330k|    ) -> Result<N3Token<'static>, TokenRecognizerError> {
  216|   330k|        let iri = string_from_utf8(iri, position.clone())?;
  217|       |        Ok(N3Token::IriRef(
  218|   318k|            if let Some(base_iri) = options.base_iri.as_ref() {
  219|   225k|                if self.unchecked {
  220|  75.0k|                    base_iri.resolve_unchecked(&iri)
  221|       |                } else {
  222|   150k|                    base_iri.resolve(&iri)
  223|       |                }
  224|   225k|                .map_err(|e| (position, e.to_string()))?
  225|   199k|                .into_inner()
  226|  93.5k|            } else if self.unchecked {
  227|      0|                iri
  228|       |            } else {
  229|  93.5k|                Iri::parse(iri)
  230|  93.5k|                    .map_err(|e| (position, e.to_string()))?
  231|  93.5k|                    .into_inner()
  232|       |            },
  233|       |        ))
  234|   330k|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer26recognize_pname_or_keyword:
  236|  1.74M|    fn recognize_pname_or_keyword<'a>(
  237|  1.74M|        &self,
  238|  1.74M|        data: &'a [u8],
  239|  1.74M|        is_ending: bool,
  240|  1.74M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  241|  1.74M|        // [139s] 	PNAME_NS 	::= 	PN_PREFIX? ':'
  242|  1.74M|        // [140s] 	PNAME_LN 	::= 	PNAME_NS PN_LOCAL
  243|  1.74M|
  244|  1.74M|        // [167s] 	PN_PREFIX 	::= 	PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
  245|  1.74M|        let mut i = 0;
  246|       |        loop {
  247|  3.89M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  248|  3.67M|                match r {
  249|  3.36M|                    Ok((c, consumed)) => {
  250|  3.36M|                        if c == ':' {
  251|   109k|                            i += consumed;
  252|   109k|                            break;
  253|  3.25M|                        } else if i == 0 {
  254|  1.32M|                            if !Self::is_possible_pn_chars_base(c) {
  255|   957k|                                return Some((
  256|   957k|                                    consumed,
  257|   957k|                                    Err((
  258|   957k|                                        0..consumed,
  259|   957k|                                        format!(
  260|   957k|                                            "'{c}' is not allowed at the beginning of a prefix name"
  261|   957k|                                        ),
  262|   957k|                                    )
  263|   957k|                                        .into()),
  264|   957k|                                ));
  265|   371k|                            }
  266|   371k|                            i += consumed;
  267|  1.92M|                        } else if Self::is_possible_pn_chars(c) || c == '.' {
  268|  1.78M|                            i += consumed;
  269|  1.78M|                        } else {
  270|   196k|                            while data[..i].ends_with(b".") {
  271|  54.3k|                                i -= 1;
  272|  54.3k|                            }
  273|   141k|                            return Some((
  274|   141k|                                i,
  275|   141k|                                str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  276|   141k|                            ));
  277|       |                        }
  278|       |                    }
  279|   314k|                    Err(e) => return Some((e.location.end, Err(e))),
  280|       |                }
  281|   216k|            } else if is_ending {
  282|  3.29k|                while data[..i].ends_with(b".") {
  283|    754|                    i -= 1;
  284|    754|                }
  285|  2.54k|                return Some(if i == 0 {
  286|    916|                    (
  287|    916|                        1,
  288|    916|                        Err((0..1, format!("Unexpected byte {}", data[0])).into()),
  289|    916|                    )
  290|       |                } else {
  291|  1.62k|                    (
  292|  1.62k|                        i,
  293|  1.62k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  294|  1.62k|                    )
  295|       |                });
  296|       |            } else {
  297|   214k|                return None;
  298|       |            }
  299|       |        }
  300|   109k|        let pn_prefix = match str_from_utf8(&data[..i - 1], 0..i - 1) {
  301|   109k|            Ok(pn_prefix) => pn_prefix,
  302|      0|            Err(e) => return Some((i, Err(e))),
  303|       |        };
  304|   109k|        if pn_prefix.ends_with('.') {
  305|    114|            return Some((
  306|    114|                i,
  307|    114|                Err((
  308|    114|                    0..i,
  309|    114|                    format!(
  310|    114|                        "'{pn_prefix}' is not a valid prefix: prefixes are not allowed to end with '.'"),
  311|    114|                )
  312|    114|                    .into()),
  313|    114|            ));
  314|   109k|        }
  315|       |
  316|  47.1k|        let (consumed, pn_local_result) =
  317|   109k|            self.recognize_optional_pn_local(&data[i..], is_ending)?;
  318|  47.1k|        Some((
  319|  47.1k|            consumed + i,
  320|  47.1k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|       |                prefix: pn_prefix,
  322|       |                local,
  323|       |                might_be_invalid_iri,
  324|  47.1k|            }),
  325|  47.1k|        ))
  326|  1.74M|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer18recognize_variable:
  328|  46.7k|    fn recognize_variable<'a>(
  329|  46.7k|        &self,
  330|  46.7k|        data: &'a [u8],
  331|  46.7k|        is_ending: bool,
  332|  46.7k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  333|       |        // [36] 	QUICK_VAR_NAME 	::= 	"?" PN_LOCAL
  334|  46.7k|        let (consumed, result) = self.recognize_optional_pn_local(&data[1..], is_ending)?;
  335|  22.7k|        Some((
  336|  22.7k|            consumed + 1,
  337|  22.7k|            result.and_then(|(name, _)| {
  338|       |                if name.is_empty() {
  339|       |                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|       |                    Ok(N3Token::Variable(name))
  342|       |                }
  343|  22.7k|            }),
  344|  22.7k|        ))
  345|  46.7k|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer27recognize_optional_pn_local:
  347|   156k|    fn recognize_optional_pn_local<'a>(
  348|   156k|        &self,
  349|   156k|        data: &'a [u8],
  350|   156k|        is_ending: bool,
  351|   156k|    ) -> Option<(usize, Result<(Cow<'a, str>, bool), TokenRecognizerError>)> {
  352|   156k|        // [168s] 	PN_LOCAL 	::= 	(PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
  353|   156k|        let mut i = 0;
  354|   156k|        let mut buffer = None; // Buffer if there are some escaped characters
  355|   156k|        let mut position_that_is_already_in_buffer = 0;
  356|   156k|        let mut might_be_invalid_iri = false;
  357|       |        loop {
  358|  1.29M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  359|  1.21M|                match r {
  360|  1.20M|                    Ok((c, consumed)) => {
  361|  1.20M|                        if c == '%' {
  362|  5.31k|                            i += 1;
  363|  5.31k|                            let a = char::from(*data.get(i)?);
  364|  1.98k|                            i += 1;
  365|  1.98k|                            let b = char::from(*data.get(i)?);
  366|  1.17k|                            if !a.is_ascii_hexdigit() || !b.is_ascii_hexdigit() {
  367|    370|                                return Some((i + 1, Err((
  368|    370|                                    i - 2..=i, format!("escapes in IRIs should be % followed by two hexadecimal characters, found '%{a}{b}'")
  369|    370|                                ).into())));
  370|    802|                            }
  371|    802|                            i += 1;
  372|  1.20M|                        } else if c == '\\' {
  373|  42.8k|                            i += 1;
  374|  42.8k|                            let a = char::from(*data.get(i)?);
  375|  40.9k|                            if self.unchecked
  376|  2.56k|                                || matches!(
  377|  19.8k|                                    a,
  378|       |                                    '_' | '~'
  379|       |                                        | '.'
  380|       |                                        | '-'
  381|       |                                        | '!'
  382|       |                                        | '$'
  383|       |                                        | '&'
  384|       |                                        | '\''
  385|       |                                        | '('
  386|       |                                        | ')'
  387|       |                                        | '*'
  388|       |                                        | '+'
  389|       |                                        | ','
  390|       |                                        | ';'
  391|       |                                        | '='
  392|       |                                )
  393|  38.3k|                            {
  394|  38.3k|                                // ok to escape
  395|  38.3k|                            } else if matches!(a, '/' | '?' | '#' | '@' | '%') {
  396|  1.53k|                                // ok to escape but requires IRI validation
  397|  1.53k|                                might_be_invalid_iri = true;
  398|  1.53k|                            } else {
  399|  1.03k|                                return Some((i + 1, Err((
  400|  1.03k|                                    i..=i, format!("The character that are allowed to be escaped in IRIs are _~.-!$&'()*+,;=/?#@%, found '{a}'")
  401|  1.03k|                                ).into())));
  402|       |                            }
  403|  39.8k|                            let buffer = buffer.get_or_insert_with(String::new);
  404|  39.8k|                            // We add the missing bytes
  405|  39.8k|                            if i - position_that_is_already_in_buffer > 1 {
  406|  24.0k|                                buffer.push_str(
  407|  24.0k|                                    match str_from_utf8(
  408|  24.0k|                                        &data[position_that_is_already_in_buffer..i - 1],
  409|  24.0k|                                        position_that_is_already_in_buffer..i - 1,
  410|  24.0k|                                    ) {
  411|  24.0k|                                        Ok(data) => data,
  412|      0|                                        Err(e) => return Some((i, Err(e))),
  413|       |                                    },
  414|       |                                )
  415|  15.8k|                            }
  416|  39.8k|                            buffer.push(a);
  417|  39.8k|                            i += 1;
  418|  39.8k|                            position_that_is_already_in_buffer = i;
  419|  1.15M|                        } else if i == 0 {
  420|   114k|                            if !(Self::is_possible_pn_chars_u(c) || c == ':' || c.is_ascii_digit())
  421|       |                            {
  422|  25.2k|                                return Some((0, Ok((Cow::Borrowed(""), false))));
  423|  89.5k|                            }
  424|  89.5k|                            if !self.unchecked {
  425|       |                                might_be_invalid_iri |=
  426|  51.2k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  427|  51.2k|                                        || c == ':';
  428|  38.3k|                            }
  429|  89.5k|                            i += consumed;
  430|  1.04M|                        } else if Self::is_possible_pn_chars(c) || c == ':' || c == '.' {
  431|  1.00M|                            if !self.unchecked {
  432|       |                                might_be_invalid_iri |=
  433|   541k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  434|   541k|                                        || c == ':';
  435|   463k|                            }
  436|  1.00M|                            i += consumed;
  437|       |                        } else {
  438|  38.8k|                            let buffer = if let Some(mut buffer) = buffer {
  439|  2.64k|                                buffer.push_str(
  440|  2.64k|                                    match str_from_utf8(
  441|  2.64k|                                        &data[position_that_is_already_in_buffer..i],
  442|  2.64k|                                        position_that_is_already_in_buffer..i,
  443|  2.64k|                                    ) {
  444|  2.64k|                                        Ok(data) => data,
  445|      0|                                        Err(e) => return Some((i, Err(e))),
  446|       |                                    },
  447|       |                                );
  448|       |                                // We do not include the last dot
  449|  3.81k|                                while buffer.ends_with('.') {
  450|  1.17k|                                    buffer.pop();
  451|  1.17k|                                    i -= 1;
  452|  1.17k|                                }
  453|  2.64k|                                Cow::Owned(buffer)
  454|       |                            } else {
  455|  36.1k|                                let mut data = match str_from_utf8(&data[..i], 0..i) {
  456|  36.1k|                                    Ok(data) => data,
  457|      0|                                    Err(e) => return Some((i, Err(e))),
  458|       |                                };
  459|       |                                // We do not include the last dot
  460|  48.2k|                                while let Some(d) = data.strip_suffix('.') {
  461|  12.0k|                                    data = d;
  462|  12.0k|                                    i -= 1;
  463|  12.0k|                                }
  464|  36.1k|                                Cow::Borrowed(data)
  465|       |                            };
  466|  38.8k|                            return Some((i, Ok((buffer, might_be_invalid_iri))));
  467|       |                        }
  468|       |                    }
  469|  3.69k|                    Err(e) => return Some((e.location.end, Err(e))),
  470|       |                }
  471|  81.0k|            } else if is_ending {
  472|    666|                let buffer = if let Some(mut buffer) = buffer {
  473|       |                    // We do not include the last dot
  474|    662|                    while buffer.ends_with('.') {
  475|    422|                        buffer.pop();
  476|    422|                        i -= 1;
  477|    422|                    }
  478|    240|                    Cow::Owned(buffer)
  479|       |                } else {
  480|    426|                    let mut data = match str_from_utf8(&data[..i], 0..i) {
  481|    426|                        Ok(data) => data,
  482|      0|                        Err(e) => return Some((i, Err(e))),
  483|       |                    };
  484|       |                    // We do not include the last dot
  485|    889|                    while let Some(d) = data.strip_suffix('.') {
  486|    463|                        data = d;
  487|    463|                        i -= 1;
  488|    463|                    }
  489|    426|                    Cow::Borrowed(data)
  490|       |                };
  491|    666|                return Some((i, Ok((buffer, might_be_invalid_iri))));
  492|       |            } else {
  493|  80.3k|                return None;
  494|       |            }
  495|       |        }
  496|   156k|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer26recognize_blank_node_label:
  498|   151k|    fn recognize_blank_node_label(
  499|   151k|        data: &[u8],
  500|   151k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  501|   151k|        // [141s] 	BLANK_NODE_LABEL 	::= 	'_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
  502|   151k|        let mut i = 2;
  503|       |        loop {
  504|  3.89M|            match Self::recognize_unicode_char(&data[i..], i)? {
  505|  3.86M|                Ok((c, consumed)) => {
  506|  3.86M|                    if (i == 2 && (Self::is_possible_pn_chars_u(c) || c.is_ascii_digit()))
  507|  3.73M|                        || (i > 2 && Self::is_possible_pn_chars(c))
  508|  3.74M|                    {
  509|  3.74M|                        // Ok
  510|  3.74M|                    } else if i > 2 && c == '.' {
  511|  2.28k|                        if data[i - 1] == b'.' {
  512|     78|                            i -= 1;
  513|     78|                            return Some((
  514|     78|                                i,
  515|     78|                                str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  516|     78|                            ));
  517|  2.20k|                        }
  518|   121k|                    } else if i == 0 {
  519|      0|                        return Some((
  520|      0|                            i,
  521|      0|                            Err((0..i, "A blank node ID should not be empty").into()),
  522|      0|                        ));
  523|   121k|                    } else if data[i - 1] == b'.' {
  524|    678|                        i -= 1;
  525|    678|                        return Some((
  526|    678|                            i,
  527|    678|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  528|    678|                        ));
  529|       |                    } else {
  530|   121k|                        return Some((
  531|   121k|                            i,
  532|   121k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  533|   121k|                        ));
  534|       |                    }
  535|  3.74M|                    i += consumed;
  536|       |                }
  537|    409|                Err(e) => return Some((e.location.end, Err(e))),
  538|       |            }
  539|       |        }
  540|   151k|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer18recognize_lang_tag:
  542|  50.6k|    fn recognize_lang_tag<'a>(
  543|  50.6k|        &self,
  544|  50.6k|        data: &'a [u8],
  545|  50.6k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  546|  50.6k|        // [144s] 	LANGTAG 	::= 	'@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
  547|  50.6k|        let mut is_last_block_empty = true;
  548|   344k|        for (i, c) in data[1..].iter().enumerate() {
  549|   344k|            if c.is_ascii_alphabetic() {
  550|   282k|                is_last_block_empty = false;
  551|   282k|            } else if i == 0 {
  552|  8.30k|                return Some((
  553|  8.30k|                    1,
  554|  8.30k|                    Err((1..2, "A language code should always start with a letter").into()),
  555|  8.30k|                ));
  556|  53.1k|            } else if is_last_block_empty {
  557|    524|                return Some((i, self.parse_lang_tag(&data[1..i], 1..i - 1)));
  558|  52.6k|            } else if *c == b'-' {
  559|  38.0k|                is_last_block_empty = true;
  560|  38.0k|            } else {
  561|  14.5k|                return Some((i + 1, self.parse_lang_tag(&data[1..=i], 1..i)));
  562|       |            }
  563|       |        }
  564|  27.2k|        None
  565|  50.6k|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer14parse_lang_tag:
  567|  15.0k|    fn parse_lang_tag<'a>(
  568|  15.0k|        &self,
  569|  15.0k|        lang_tag: &'a [u8],
  570|  15.0k|        position: Range<usize>,
  571|  15.0k|    ) -> Result<N3Token<'a>, TokenRecognizerError> {
  572|  15.0k|        let lang_tag = str_from_utf8(lang_tag, position.clone())?;
  573|  15.0k|        Ok(N3Token::LangTag(if self.unchecked {
  574|  4.91k|            lang_tag
  575|       |        } else {
  576|  10.1k|            LanguageTag::parse(lang_tag)
  577|  10.1k|                .map_err(|e| (position.clone(), e.to_string()))?
  578|  7.05k|                .into_inner()
  579|       |        }))
  580|  15.0k|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer16recognize_string:
  582|  67.2k|    fn recognize_string(
  583|  67.2k|        data: &[u8],
  584|  67.2k|        delimiter: u8,
  585|  67.2k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  586|  67.2k|        // [22] 	STRING_LITERAL_QUOTE 	::= 	'"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
  587|  67.2k|        // [23] 	STRING_LITERAL_SINGLE_QUOTE 	::= 	"'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
  588|  67.2k|        let mut string = String::new();
  589|  67.2k|        let mut i = 1;
  590|       |        loop {
  591|   125k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  592|  95.9k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  593|  94.6k|                Ok(s) => string.push_str(s),
  594|  1.28k|                Err(e) => return Some((end, Err(e))),
  595|       |            };
  596|  94.6k|            i += end;
  597|  94.6k|            match data[i] {
  598|  94.6k|                c if c == delimiter => {
  599|  16.0k|                    return Some((i + 1, Ok(N3Token::String(string))));
  600|       |                }
  601|       |                b'\\' => {
  602|  78.5k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  603|  71.8k|                    i += additional + 1;
  604|  71.8k|                    match c {
  605|  58.3k|                        Ok(c) => {
  606|  58.3k|                            string.push(c);
  607|  58.3k|                        }
  608|  13.5k|                        Err(e) => {
  609|       |                            // We read until the end of string char
  610|  13.5k|                            let end = memchr(delimiter, &data[i..])?;
  611|    917|                            return Some((i + end + 1, Err(e)));
  612|       |                        }
  613|       |                    }
  614|       |                }
  615|      0|                _ => unreachable!(),
  616|       |            }
  617|       |        }
  618|  67.2k|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer21recognize_long_string:
  620|  33.4k|    fn recognize_long_string(
  621|  33.4k|        data: &[u8],
  622|  33.4k|        delimiter: u8,
  623|  33.4k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  624|  33.4k|        // [24] 	STRING_LITERAL_LONG_SINGLE_QUOTE 	::= 	"'''" (("'" | "''")? ([^'\] | ECHAR | UCHAR))* "'''"
  625|  33.4k|        // [25] 	STRING_LITERAL_LONG_QUOTE 	::= 	'"""' (('"' | '""')? ([^"\] | ECHAR | UCHAR))* '"""'
  626|  33.4k|        let mut string = String::new();
  627|  33.4k|        let mut i = 3;
  628|       |        loop {
  629|  59.4k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  630|  40.4k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  631|  39.3k|                Ok(s) => string.push_str(s),
  632|  1.13k|                Err(e) => return Some((end, Err(e))),
  633|       |            };
  634|  39.3k|            i += end;
  635|  39.3k|            match data[i] {
  636|  39.3k|                c if c == delimiter => {
  637|  34.7k|                    if *data.get(i + 1)? == delimiter && *data.get(i + 2)? == delimiter {
  638|  10.9k|                        return Some((i + 3, Ok(N3Token::String(string))));
  639|  22.0k|                    }
  640|  22.0k|                    i += 1;
  641|  22.0k|                    string.push(char::from(delimiter));
  642|       |                }
  643|       |                b'\\' => {
  644|  4.59k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  645|  4.14k|                    i += additional + 1;
  646|  4.14k|                    match c {
  647|  3.95k|                        Ok(c) => {
  648|  3.95k|                            string.push(c);
  649|  3.95k|                        }
  650|    189|                        Err(e) => return Some((i, Err(e))),
  651|       |                    }
  652|       |                }
  653|      0|                _ => unreachable!(),
  654|       |            }
  655|       |        }
  656|  33.4k|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer16recognize_number:
  658|   351k|    fn recognize_number(data: &[u8]) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  659|   351k|        // [19] 	INTEGER 	::= 	[+-]? [0-9]+
  660|   351k|        // [20] 	DECIMAL 	::= 	[+-]? [0-9]* '.' [0-9]+
  661|   351k|        // [21] 	DOUBLE 	::= 	[+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  662|   351k|        // [154s] 	EXPONENT 	::= 	[eE] [+-]? [0-9]+
  663|   351k|        let mut i = 0;
  664|   351k|        let c = *data.first()?;
  665|   351k|        if matches!(c, b'+' | b'-') {
  666|  47.2k|            i += 1;
  667|   304k|        }
  668|       |        // We read the digits before .
  669|   351k|        let mut count_before: usize = 0;
  670|       |        loop {
  671|  1.11M|            let c = *data.get(i)?;
  672|  1.06M|            if c.is_ascii_digit() {
  673|   764k|                i += 1;
  674|   764k|                count_before += 1;
  675|   764k|            } else {
  676|   299k|                break;
  677|       |            }
  678|       |        }
  679|       |
  680|       |        // We read the digits after .
  681|       |        #[allow(clippy::if_then_some_else_none)]
  682|   299k|        let count_after = if *data.get(i)? == b'.' {
  683|  81.8k|            i += 1;
  684|  81.8k|
  685|  81.8k|            let mut count_after = 0;
  686|       |            loop {
  687|   207k|                let c = *data.get(i)?;
  688|   195k|                if c.is_ascii_digit() {
  689|   125k|                    i += 1;
  690|   125k|                    count_after += 1;
  691|   125k|                } else {
  692|  70.2k|                    break;
  693|  70.2k|                }
  694|  70.2k|            }
  695|  70.2k|            Some(count_after)
  696|       |        } else {
  697|   217k|            None
  698|       |        };
  699|       |
  700|       |        // End
  701|   288k|        let c = *data.get(i)?;
  702|   288k|        if matches!(c, b'e' | b'E') {
  703|  43.5k|            i += 1;
  704|       |
  705|  43.5k|            let c = *data.get(i)?;
  706|  43.0k|            if matches!(c, b'+' | b'-') {
  707|    713|                i += 1;
  708|  42.3k|            }
  709|       |
  710|  43.0k|            let mut found = false;
  711|       |            loop {
  712|   208k|                let c = *data.get(i)?;
  713|   202k|                if c.is_ascii_digit() {
  714|   165k|                    i += 1;
  715|   165k|                    found = true;
  716|   165k|                } else {
  717|  36.9k|                    break;
  718|  36.9k|                }
  719|  36.9k|            }
  720|  36.9k|            Some((
  721|  36.9k|                i,
  722|  36.9k|                if !found {
  723|  1.62k|                    Err((0..i, "A double exponent cannot be empty").into())
  724|  35.3k|                } else if count_before == 0 && count_after.unwrap_or(0) == 0 {
  725|     93|                    Err((0..i, "A double should not be empty").into())
  726|       |                } else {
  727|  35.2k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Double)
  728|       |                },
  729|       |            ))
  730|   244k|        } else if let Some(count_after) = count_after {
  731|  68.6k|            if count_after == 0 {
  732|       |                // We do not consume the '.' after all
  733|  45.7k|                i -= 1;
  734|  45.7k|                Some((
  735|  45.7k|                    i,
  736|  45.7k|                    if count_before == 0 {
  737|  2.54k|                        Err((0..i, "An integer should not be empty").into())
  738|       |                    } else {
  739|  43.1k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  740|       |                    },
  741|       |                ))
  742|       |            } else {
  743|  22.8k|                Some((i, str_from_utf8(&data[..i], 0..i).map(N3Token::Decimal)))
  744|       |            }
  745|       |        } else {
  746|       |            Some((
  747|   176k|                i,
  748|   176k|                if count_before == 0 {
  749|  15.6k|                    Err((0..i, "An integer should not be empty").into())
  750|       |                } else {
  751|   160k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  752|       |                },
  753|       |            ))
  754|       |        }
  755|   351k|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer16recognize_escape:
  757|  90.1k|    fn recognize_escape(
  758|  90.1k|        data: &[u8],
  759|  90.1k|        position: usize,
  760|  90.1k|        with_echar: bool,
  761|  90.1k|    ) -> Option<(usize, Result<char, TokenRecognizerError>)> {
  762|  90.1k|        // [26] 	UCHAR 	::= 	'\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
  763|  90.1k|        // [159s] 	ECHAR 	::= 	'\' [tbnrf"'\]
  764|  90.1k|        match *data.get(1)? {
  765|  31.9k|            b'u' => match Self::recognize_hex_char(&data[2..], 4, 'u', position) {
  766|  31.5k|                Ok(c) => Some((5, Ok(c?))),
  767|    341|                Err(e) => Some((5, Err(e))),
  768|       |            },
  769|  1.36k|            b'U' => match Self::recognize_hex_char(&data[2..], 8, 'u', position) {
  770|    463|                Ok(c) => Some((9, Ok(c?))),
  771|    897|                Err(e) => Some((9, Err(e))),
  772|       |            },
  773|    432|            b't' if with_echar => Some((1, Ok('\t'))),
  774|    440|            b'b' if with_echar => Some((1, Ok('\x08'))),
  775|    666|            b'n' if with_echar => Some((1, Ok('\n'))),
  776|    673|            b'r' if with_echar => Some((1, Ok('\r'))),
  777|    263|            b'f' if with_echar => Some((1, Ok('\x0C'))),
  778|  1.05k|            b'"' if with_echar => Some((1, Ok('"'))),
  779|    887|            b'\'' if with_echar => Some((1, Ok('\''))),
  780|  26.5k|            b'\\' if with_echar => Some((1, Ok('\\'))),
  781|  14.0k|            c => Some((
  782|  14.0k|                1,
  783|  14.0k|                Err((
  784|  14.0k|                    position..position + 2,
  785|  14.0k|                    format!("Unexpected escape character '\\{}'", char::from(c)),
  786|  14.0k|                )
  787|  14.0k|                    .into()),
  788|  14.0k|            )), //TODO: read until end of string
  789|       |        }
  790|  90.1k|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer18recognize_hex_char:
  792|  33.2k|    fn recognize_hex_char(
  793|  33.2k|        data: &[u8],
  794|  33.2k|        len: usize,
  795|  33.2k|        escape_char: char,
  796|  33.2k|        position: usize,
  797|  33.2k|    ) -> Result<Option<char>, TokenRecognizerError> {
  798|  33.2k|        if data.len() < len {
  799|    733|            return Ok(None);
  800|  32.5k|        }
  801|  32.5k|        let val = str_from_utf8(&data[..len], position..position + len + 2)?;
  802|  32.1k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  803|       |            (
  804|       |                position..position + len + 2,
  805|       |                format!(
  806|       |                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  807|       |                ),
  808|       |            )
  809|  32.1k|        })?;
  810|  31.5k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  811|       |            (
  812|       |                position..position + len +2,
  813|       |                format!(
  814|       |                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  815|       |                ),
  816|       |            )
  817|  31.5k|        })?;
  818|  31.3k|        Ok(Some(c))
  819|  33.2k|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer22recognize_unicode_char:
  821|  9.08M|    fn recognize_unicode_char(
  822|  9.08M|        data: &[u8],
  823|  9.08M|        position: usize,
  824|  9.08M|    ) -> Option<Result<(char, usize), TokenRecognizerError>> {
  825|  9.08M|        let mut code_point: u32;
  826|  9.08M|        let bytes_needed: usize;
  827|  9.08M|        let mut lower_boundary = 0x80;
  828|  9.08M|        let mut upper_boundary = 0xBF;
  829|       |
  830|  9.08M|        let byte = *data.first()?;
  831|  8.83M|        match byte {
  832|  8.83M|            0x00..=0x7F => return Some(Ok((char::from(byte), 1))),
  833|   261k|            0xC2..=0xDF => {
  834|   169k|                bytes_needed = 1;
  835|   169k|                code_point = u32::from(byte) & 0x1F;
  836|   169k|            }
  837|  92.2k|            0xE0..=0xEF => {
  838|  26.3k|                if byte == 0xE0 {
  839|  3.06k|                    lower_boundary = 0xA0;
  840|  23.3k|                }
  841|  26.3k|                if byte == 0xED {
  842|  1.75k|                    upper_boundary = 0x9F;
  843|  24.6k|                }
  844|  26.3k|                bytes_needed = 2;
  845|  26.3k|                code_point = u32::from(byte) & 0xF;
  846|       |            }
  847|  65.8k|            0xF0..=0xF4 => {
  848|  11.8k|                if byte == 0xF0 {
  849|  3.55k|                    lower_boundary = 0x90;
  850|  8.25k|                }
  851|  11.8k|                if byte == 0xF4 {
  852|  3.42k|                    upper_boundary = 0x8F;
  853|  8.38k|                }
  854|  11.8k|                bytes_needed = 3;
  855|  11.8k|                code_point = u32::from(byte) & 0x7;
  856|       |            }
  857|       |            _ => {
  858|   209k|                return Some(Err((
  859|   209k|                    position..=position,
  860|   209k|                    "Invalid UTF-8 character encoding",
  861|   209k|                )
  862|   209k|                    .into()))
  863|       |            }
  864|       |        }
  865|       |
  866|   214k|        for i in 1..=bytes_needed {
  867|   214k|            let byte = *data.get(i)?;
  868|   138k|            if byte < lower_boundary || upper_boundary < byte {
  869|   109k|                return Some(Err((
  870|   109k|                    position..=position + i,
  871|   109k|                    "Invalid UTF-8 character encoding",
  872|   109k|                )
  873|   109k|                    .into()));
  874|  28.8k|            }
  875|  28.8k|            lower_boundary = 0x80;
  876|  28.8k|            upper_boundary = 0xBF;
  877|  28.8k|            code_point = (code_point << 6) | (u32::from(byte) & 0x3F);
  878|       |        }
  879|       |
  880|  21.9k|        Some(
  881|  21.9k|            char::from_u32(code_point)
  882|  21.9k|                .map(|c| (c, bytes_needed + 1))
  883|  21.9k|                .ok_or_else(|| {
  884|       |                    (
  885|       |                        position..=position + bytes_needed,
  886|       |                        format!("The codepoint {code_point:X} is not a valid unicode character"),
  887|       |                    )
  888|       |                        .into()
  889|  21.9k|                }),
  890|  21.9k|        )
  891|  9.08M|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer25is_possible_pn_chars_base:
  894|  8.27M|    fn is_possible_pn_chars_base(c: char) -> bool {
  895|  8.27M|        matches!(c,
  896|  4.14M|        'A'..='Z'
  897|  2.93M|        | 'a'..='z'
  898|  21.3k|        | '\u{00C0}'..='\u{00D6}'
  899|  21.3k|        | '\u{00D8}'..='\u{00F6}'
  900|  21.3k|        | '\u{00F8}'..='\u{02FF}'
  901|  20.1k|        | '\u{0370}'..='\u{037D}'
  902|  20.1k|        | '\u{037F}'..='\u{1FFF}'
  903|  1.55k|        | '\u{200C}'..='\u{200D}'
  904|  1.55k|        | '\u{2070}'..='\u{218F}'
  905|  1.54k|        | '\u{2C00}'..='\u{2FEF}'
  906|  1.54k|        | '\u{3001}'..='\u{D7FF}'
  907|    371|        | '\u{F900}'..='\u{FDCF}'
  908|    275|        | '\u{FDF0}'..='\u{FFFD}'
  909|    272|        | '\u{10000}'..='\u{EFFFF}')
  910|  8.27M|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer22is_possible_pn_chars_u:
  913|  6.94M|    fn is_possible_pn_chars_u(c: char) -> bool {
  914|  6.94M|        Self::is_possible_pn_chars_base(c) || c == '_'
  915|  6.94M|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer20is_possible_pn_chars:
  918|  6.69M|    fn is_possible_pn_chars(c: char) -> bool {
  919|  6.69M|        Self::is_possible_pn_chars_u(c)
  920|  3.18M|            || matches!(c,
  921|  2.55M|        '-' | '0'..='9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
  922|  6.69M|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5lexerNtB4_7N3Lexer43is_possible_pn_chars_base_but_not_valid_iri:
  924|   592k|    fn is_possible_pn_chars_base_but_not_valid_iri(c: char) -> bool {
  925|   592k|        matches!(c, '\u{FFF0}'..='\u{FFFD}')
  926|   592k|            || u32::from(c) % u32::from('\u{FFFE}') == 0
  927|   592k|            || u32::from(c) % u32::from('\u{FFFF}') == 0
  928|   592k|    }
_RNvNtCscuJmoqhSOSr_5oxttl5lexer18resolve_local_name:
  931|  15.3k|pub fn resolve_local_name(
  932|  15.3k|    prefix: &str,
  933|  15.3k|    local: &str,
  934|  15.3k|    might_be_invalid_iri: bool,
  935|  15.3k|    prefixes: &HashMap<String, Iri<String>>,
  936|  15.3k|) -> Result<NamedNode, String> {
  937|  15.3k|    if let Some(start) = prefixes.get(prefix) {
  938|      0|        let iri = format!("{start}{local}");
  939|      0|        if might_be_invalid_iri || start.path().is_empty() {
  940|       |            // We validate again. We always validate if the local part might be the IRI authority.
  941|      0|            if let Err(e) = Iri::parse(iri.as_str()) {
  942|      0|                return Err(format!(
  943|      0|                    "The prefixed name {prefix}:{local} builds IRI {iri} that is invalid: {e}"
  944|      0|                ));
  945|      0|            }
  946|      0|        }
  947|      0|        Ok(NamedNode::new_unchecked(iri))
  948|       |    } else {
  949|  15.3k|        Err(format!("The prefix {prefix}: has not been declared"))
  950|       |    }
  951|  15.3k|}
_RNvNtCscuJmoqhSOSr_5oxttl5lexer13str_from_utf8:
  953|   884k|fn str_from_utf8(data: &[u8], range: Range<usize>) -> Result<&str, TokenRecognizerError> {
  954|   884k|    str::from_utf8(data).map_err(|e| {
  955|       |        (
  956|       |            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  957|       |            format!("Invalid UTF-8: {e}"),
  958|       |        )
  959|       |            .into()
  960|   884k|    })
  961|   884k|}
_RNvNtCscuJmoqhSOSr_5oxttl5lexer16string_from_utf8:
  963|   330k|fn string_from_utf8(data: Vec<u8>, range: Range<usize>) -> Result<String, TokenRecognizerError> {
  964|   330k|    String::from_utf8(data).map_err(|e| {
  965|       |        (
  966|       |            range.start + e.utf8_error().valid_up_to()
  967|       |                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  968|       |            format!("Invalid UTF-8: {e}"),
  969|       |        )
  970|       |            .into()
  971|   330k|    })
  972|   330k|}
_RNvXs2_NtCscuJmoqhSOSr_5oxttl5lexerNtB5_7N3TokenNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqB7_:
   12|  2.14M|#[derive(Debug, PartialEq, Eq)]
_RNvXs8_NtCscuJmoqhSOSr_5oxttl5lexerNtB5_11N3LexerModeNtNtCsjv2Y2xFO4ua_4core3cmp9PartialEq2eqB7_:
   31|   120k|#[derive(Eq, PartialEq)]

_RNvXNtCscuJmoqhSOSr_5oxttl5terseNtB2_14TriGRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer20error_recovery_state:
   37|  1.37M|    fn error_recovery_state(mut self) -> Self {
   38|  1.37M|        self.stack.clear();
   39|  1.37M|        self.cur_subject.clear();
   40|  1.37M|        self.cur_predicate.clear();
   41|  1.37M|        self.cur_object.clear();
   42|  1.37M|        self.cur_graph = GraphName::DefaultGraph;
   43|  1.37M|        self
   44|  1.37M|    }
_RNvXNtCscuJmoqhSOSr_5oxttl5terseNtB2_14TriGRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer14recognize_next:
   46|  3.08M|    fn recognize_next(
   47|  3.08M|        mut self,
   48|  3.08M|        token: N3Token<'_>,
   49|  3.08M|        context: &mut TriGRecognizerContext,
   50|  3.08M|        results: &mut Vec<Quad>,
   51|  3.08M|        errors: &mut Vec<RuleRecognizerError>,
   52|  3.08M|    ) -> Self {
   53|  3.08M|        if let Some(rule) = self.stack.pop() {
   54|  2.08M|            match rule {
   55|       |                // [1g] 	trigDoc 	::= 	(directive | block)*
   56|       |                // [2g] 	block 	::= 	triplesOrGraph | wrappedGraph | triples2 | "GRAPH" labelOrSubject wrappedGraph
   57|       |                // [3] 	directive 	::= 	prefixID | base | sparqlPrefix | sparqlBase
   58|       |                // [4] 	prefixID 	::= 	'@prefix' PNAME_NS IRIREF '.'
   59|       |                // [5] 	base 	::= 	'@base' IRIREF '.'
   60|       |                // [5s] 	sparqlPrefix 	::= 	"PREFIX" PNAME_NS IRIREF
   61|       |                // [6s] 	sparqlBase 	::= 	"BASE" IRIREF
   62|       |                TriGState::TriGDoc => {
   63|   306k|                    self.cur_graph = GraphName::DefaultGraph;
   64|   306k|                    self.stack.push(TriGState::TriGDoc);
   65|  14.9k|                    match token {
   66|  14.7k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("base") => {
   67|  3.46k|                            self.stack.push(TriGState::BaseExpectIri);
   68|  3.46k|                            self
   69|       |                        }
   70|  11.2k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("prefix") => {
   71|    174|                            self.stack.push(TriGState::PrefixExpectPrefix);
   72|    174|                            self
   73|       |                        }
   74|  1.14k|                        N3Token::LangTag("prefix") => {
   75|    328|                            self.stack.push(TriGState::ExpectDot);
   76|    328|                            self.stack.push(TriGState::PrefixExpectPrefix);
   77|    328|                            self
   78|       |                        }
   79|    814|                        N3Token::LangTag("base") => {
   80|     86|                            self.stack.push(TriGState::ExpectDot);
   81|     86|                            self.stack.push(TriGState::BaseExpectIri);
   82|     86|                            self
   83|       |                        }
   84|  11.1k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("graph") && context.with_graph_name => {
   85|      0|                            self.stack.push(TriGState::WrappedGraph);
   86|      0|                            self.stack.push(TriGState::GraphName);
   87|      0|                            self
   88|       |                        }
   89|   138k|                        N3Token::Punctuation("{") if context.with_graph_name => {
   90|  3.81k|                            self.stack.push(TriGState::WrappedGraph);
   91|  3.81k|                            self.recognize_next(token, context,results, errors)
   92|       |                        }
   93|       |                        _ => {
   94|   298k|                            self.stack.push(TriGState::TriplesOrGraph);
   95|   298k|                            self.recognize_next(token, context,results, errors)
   96|       |                        }
   97|       |                    }
   98|       |                },
   99|       |                TriGState::ExpectDot => {
  100|  97.4k|                    self.cur_subject.pop();
  101|  97.4k|                    if token == N3Token::Punctuation(".") {
  102|  70.8k|                        self
  103|       |                    } else  {
  104|  26.5k|                        errors.push("A dot is expected at the end of statements".into());
  105|  26.5k|                        self.recognize_next(token, context,results, errors)
  106|       |                    }
  107|       |                },
  108|  2.82k|                TriGState::BaseExpectIri => match token {
  109|  2.67k|                    N3Token::IriRef(iri) => {
  110|  2.67k|                        match Iri::parse_unchecked(iri) {
  111|  2.67k|                            Ok(iri) => {
  112|  2.67k|                                context.lexer_options.base_iri = Some(iri);
  113|  2.67k|                                self
  114|       |                            }
  115|      0|                            Err(e) => self.error(errors, format!("Invalid base IRI: {e}"))
  116|       |                        }
  117|       |                    }
  118|    156|                    _ => self.error(errors, "The BASE keyword should be followed by an IRI"),
  119|       |                },
  120|    232|                TriGState::PrefixExpectPrefix => match token {
  121|    232|                    N3Token::PrefixedName { prefix, local, .. } if local.is_empty() => {
  122|    150|                        self.stack.push(TriGState::PrefixExpectIri { name: prefix.to_owned() });
  123|    150|                        self
  124|       |                    }
  125|       |                    _ => {
  126|    224|                        self.error(errors, "The PREFIX keyword should be followed by a prefix like 'ex:'")
  127|       |                    }
  128|       |                },
  129|     73|                TriGState::PrefixExpectIri { name } => match token {
  130|      0|                    N3Token::IriRef(iri) => {
  131|      0|                        match Iri::parse_unchecked(iri) {
  132|      0|                            Ok(iri) => {
  133|      0|                                context.prefixes.insert(name, iri);
  134|      0|                                self
  135|       |                            }
  136|      0|                            Err(e) => self.error(errors, format!("Invalid prefix IRI: {e}"))
  137|       |                        }                    }
  138|     73|                    _ => self.error(errors, "The PREFIX declaration should be followed by a prefix and its value as an IRI"),
  139|       |                },
  140|       |                // [3g] 	triplesOrGraph 	::= 	labelOrSubject ( wrappedGraph | predicateObjectList '.' ) | quotedTriple predicateObjectList '.'
  141|       |                // [4g] 	triples2 	::= 	blankNodePropertyList predicateObjectList? '.' | collection predicateObjectList '.'
  142|  4.89k|                TriGState::TriplesOrGraph => match token {
  143|  75.4k|                    N3Token::IriRef(iri) => {
  144|  75.4k|                        self.stack.push(TriGState::WrappedGraphOrPredicateObjectList {
  145|  75.4k|                            term: NamedNode::new_unchecked(iri).into()
  146|  75.4k|                        });
  147|  75.4k|                        self
  148|       |                    }
  149|  13.7k|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  150|      0|                        Ok(t) => {
  151|      0|                            self.stack.push(TriGState::WrappedGraphOrPredicateObjectList {
  152|      0|                                term: t.into()
  153|      0|                            });
  154|      0|                            self
  155|       |                        },
  156|  13.7k|                        Err(e) => self.error(errors, e)
  157|       |                    }
  158|  54.7k|                    N3Token::BlankNodeLabel(label) => {
  159|  54.7k|                        self.stack.push(TriGState::WrappedGraphOrPredicateObjectList {
  160|  54.7k|                            term: BlankNode::new_unchecked(label).into()
  161|  54.7k|                        });
  162|  54.7k|                        self
  163|       |                    }
  164|   135k|                    N3Token::Punctuation("[") => {
  165|  5.58k|                        self.stack.push(TriGState::WrappedGraphBlankNodePropertyListCurrent);
  166|  5.58k|                        self
  167|       |                    }
  168|   129k|                    N3Token::Punctuation("(") => {
  169|  21.8k|                        self.stack.push(TriGState::ExpectDot);
  170|  21.8k|                        self.stack.push(TriGState::PredicateObjectList);
  171|  21.8k|                        self.stack.push(TriGState::SubjectCollectionBeginning);
  172|  21.8k|                        self
  173|       |                    }
  174|       |                    #[cfg(feature = "rdf-star")]
  175|   107k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  176|  4.89k|                        self.stack.push(TriGState::ExpectDot);
  177|  4.89k|                        self.stack.push(TriGState::PredicateObjectList);
  178|  4.89k|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  179|  4.89k|                        self.stack.push(TriGState::QuotedObject);
  180|  4.89k|                        self.stack.push(TriGState::Verb);
  181|  4.89k|                        self.stack.push(TriGState::QuotedSubject);
  182|  4.89k|                        self
  183|       |                    }
  184|       |                    _ => {
  185|   122k|                        self.error(errors, "TOKEN is not a valid subject or graph name")
  186|       |                    }
  187|       |                }
  188|   116k|                TriGState::WrappedGraphOrPredicateObjectList { term } => {
  189|   116k|                    if token == N3Token::Punctuation("{") && context.with_graph_name {
  190|  7.45k|                        self.cur_graph = term.into();
  191|  7.45k|                        self.stack.push(TriGState::WrappedGraph);
  192|   109k|                    } else {
  193|   109k|                        self.cur_subject.push(term.into());
  194|   109k|                        self.stack.push(TriGState::ExpectDot);
  195|   109k|                        self.stack.push(TriGState::PredicateObjectList);
  196|   109k|                    }
  197|   116k|                    self.recognize_next(token, context,results, errors)
  198|       |                }
  199|  5.03k|                TriGState::WrappedGraphBlankNodePropertyListCurrent => if token == N3Token::Punctuation("]") {
  200|    887|                    self.stack.push(TriGState::WrappedGraphOrPredicateObjectList {
  201|    887|                        term: BlankNode::default().into()
  202|    887|                    });
  203|    887|                    self
  204|       |                } else {
  205|  4.14k|                    self.cur_subject.push(BlankNode::default().into());
  206|  4.14k|                    self.stack.push(TriGState::ExpectDot);
  207|  4.14k|                    self.stack.push(TriGState::SubjectBlankNodePropertyListEnd);
  208|  4.14k|                    self.stack.push(TriGState::PredicateObjectList);
  209|  4.14k|                    self.recognize_next(token, context,results, errors)
  210|       |                }
  211|  1.44k|                TriGState::SubjectBlankNodePropertyListEnd => if token == N3Token::Punctuation("]") {
  212|     16|                    self.stack.push(TriGState::SubjectBlankNodePropertyListAfter  );
  213|     16|                    self
  214|       |                } else {
  215|  1.43k|                    errors.push("blank node property lists should end with a ']'".into());
  216|  1.43k|                    self.stack.push(TriGState::SubjectBlankNodePropertyListAfter );
  217|  1.43k|                    self.recognize_next(token, context,results, errors)
  218|       |                }
  219|  1.44k|                TriGState::SubjectBlankNodePropertyListAfter => if matches!(token, N3Token::Punctuation("." | "}")) {
  220|    128|                    self.recognize_next(token, context,results, errors)
  221|       |                } else {
  222|  1.31k|                    self.stack.push(TriGState::PredicateObjectList);
  223|  1.31k|                    self.recognize_next(token, context,results, errors)
  224|       |                }
  225|       |                TriGState::SubjectCollectionBeginning => {
  226|  21.2k|                    if let N3Token::Punctuation(")") = token {
  227|    226|                        self.cur_subject.push(rdf::NIL.into());
  228|    226|                        self
  229|       |                    } else {
  230|  21.0k|                        let root = BlankNode::default();
  231|  21.0k|                        self.cur_subject.push(root.clone().into());
  232|  21.0k|                        self.cur_subject.push(root.into());
  233|  21.0k|                        self.cur_predicate.push(rdf::FIRST.into());
  234|  21.0k|                        self.stack.push(TriGState::SubjectCollectionPossibleEnd);
  235|  21.0k|                        self.stack.push(TriGState::Object);
  236|  21.0k|                        self.recognize_next(token, context,results, errors)
  237|       |                    }
  238|       |                },
  239|       |                TriGState::SubjectCollectionPossibleEnd => {
  240|  8.04k|                    let old = self.cur_subject.pop().unwrap();
  241|  8.04k|                    self.cur_object.pop();
  242|  8.04k|                    if let N3Token::Punctuation(")") = token {
  243|    564|                        self.cur_predicate.pop();
  244|    564|                        results.push(Quad::new(
  245|    564|                            old,
  246|    564|                            rdf::REST,
  247|    564|                            rdf::NIL,
  248|    564|                            self.cur_graph.clone()
  249|    564|                        ));
  250|    564|                        self
  251|       |                    } else {
  252|  7.47k|                        let new = BlankNode::default();
  253|  7.47k|                        results.push(Quad::new(
  254|  7.47k|                            old,
  255|  7.47k|                            rdf::REST,
  256|  7.47k|                            new.clone(),
  257|  7.47k|                            self.cur_graph.clone()
  258|  7.47k|                        ));
  259|  7.47k|                        self.cur_subject.push(new.into());
  260|  7.47k|                        self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  261|  7.47k|                        self.stack.push(TriGState::Object);
  262|  7.47k|                        self.recognize_next(token, context,results, errors)
  263|       |                    }
  264|       |                }
  265|       |                // [5g] 	wrappedGraph 	::= 	'{' triplesBlock? '}'
  266|       |                // [6g] 	triplesBlock 	::= 	triples ('.' triplesBlock?)?
  267|  11.2k|                TriGState::WrappedGraph => if token == N3Token::Punctuation("{") {
  268|  11.2k|                    self.stack.push(TriGState::WrappedGraphPossibleEnd);
  269|  11.2k|                    self.stack.push(TriGState::Triples);
  270|  11.2k|                    self
  271|       |                } else {
  272|      0|                    self.error(errors, "The GRAPH keyword should be followed by a graph name and a value in '{'")
  273|       |                },
  274|       |                TriGState::WrappedGraphPossibleEnd => {
  275|  14.8k|                    self.cur_subject.pop();
  276|  14.8k|                    match token {
  277|  13.4k|                        N3Token::Punctuation("}") => {
  278|  1.42k|                            self
  279|       |                        }
  280|  11.9k|                        N3Token::Punctuation(".") => {
  281|  11.7k|                            self.stack.push(TriGState::WrappedGraphPossibleEnd);
  282|  11.7k|                            self.stack.push(TriGState::Triples);
  283|  11.7k|                            self
  284|       |                        }
  285|       |                       _ => {
  286|  1.72k|                            errors.push("A '}' or a '.' is expected at the end of a graph block".into());
  287|  1.72k|                            self.recognize_next(token, context,results, errors)
  288|       |                        }
  289|       |                    }
  290|       |                }
  291|       |                // [6] 	triples 	::= 	subject predicateObjectList | blankNodePropertyList predicateObjectList?
  292|       |                // [10] 	subject 	::= 	iri | BlankNode | collection | quotedTriple
  293|     86|                TriGState::Triples => match token {
  294|  6.83k|                    N3Token::Punctuation("}") => {
  295|  1.42k|                        self.recognize_next(token, context,results, errors) // Early end
  296|       |                    },
  297|  5.41k|                    N3Token::Punctuation("[") => {
  298|    247|                        self.cur_subject.push(BlankNode::default().into());
  299|    247|                        self.stack.push(TriGState::TriplesBlankNodePropertyListCurrent);
  300|    247|                        self
  301|       |                    }
  302|  2.97k|                    N3Token::IriRef(iri) => {
  303|  2.97k|                        self.cur_subject.push(NamedNode::new_unchecked(iri).into());
  304|  2.97k|                        self.stack.push(TriGState::PredicateObjectList);
  305|  2.97k|                        self
  306|       |                    }
  307|    264|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  308|      0|                        Ok(t) => {
  309|      0|                            self.cur_subject.push(t.into());
  310|      0|                            self.stack.push(TriGState::PredicateObjectList);
  311|      0|                            self
  312|       |                        },
  313|    264|                        Err(e) => self.error(errors, e)
  314|       |                    }
  315|  11.6k|                    N3Token::BlankNodeLabel(label) => {
  316|  11.6k|                        self.cur_subject.push(BlankNode::new_unchecked(label).into());
  317|  11.6k|                        self.stack.push(TriGState::PredicateObjectList);
  318|  11.6k|                        self
  319|       |                    }
  320|  5.16k|                    N3Token::Punctuation("(") => {
  321|  4.07k|                        self.stack.push(TriGState::PredicateObjectList);
  322|  4.07k|                        self.stack.push(TriGState::SubjectCollectionBeginning);
  323|  4.07k|                        self
  324|       |                    }
  325|       |                    #[cfg(feature = "rdf-star")]
  326|  1.09k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  327|     86|                        self.stack.push(TriGState::PredicateObjectList);
  328|     86|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  329|     86|                        self.stack.push(TriGState::QuotedObject);
  330|     86|                        self.stack.push(TriGState::Verb);
  331|     86|                        self.stack.push(TriGState::QuotedSubject);
  332|     86|                        self
  333|       |                    }
  334|       |                   _ => {
  335|  1.30k|                        self.error(errors, "TOKEN is not a valid RDF subject")
  336|       |                    }
  337|       |                },
  338|    234|                TriGState::TriplesBlankNodePropertyListCurrent => if token == N3Token::Punctuation("]") {
  339|     78|                    self.stack.push(TriGState::PredicateObjectList);
  340|     78|                    self
  341|       |                } else {
  342|    156|                    self.stack.push(TriGState::SubjectBlankNodePropertyListEnd);
  343|    156|                    self.stack.push(TriGState::PredicateObjectList);
  344|    156|                    self.recognize_next(token, context,results, errors)
  345|       |                }
  346|       |                // [7g] 	labelOrSubject 	::= 	iri | BlankNode
  347|      0|                TriGState::GraphName => match token {
  348|      0|                    N3Token::IriRef(iri) => {
  349|      0|                        self.cur_graph = NamedNode::new_unchecked(iri).into();
  350|      0|                        self
  351|       |                    }
  352|      0|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  353|      0|                        Ok(t) => {
  354|      0|                            self.cur_graph = t.into();
  355|      0|                            self
  356|       |                        },
  357|      0|                        Err(e) => self.error(errors, e)
  358|       |                    }
  359|      0|                    N3Token::BlankNodeLabel(label) => {
  360|      0|                        self.cur_graph = BlankNode::new_unchecked(label).into();
  361|      0|                        self
  362|       |                    }
  363|      0|                    N3Token::Punctuation("[") => {
  364|      0|                        self.stack.push(TriGState::GraphNameAnonEnd);
  365|      0|                        self
  366|       |                    }
  367|       |                   _ => {
  368|      0|                        self.error(errors, "TOKEN is not a valid graph name")
  369|       |                    }
  370|       |                }
  371|      0|                TriGState::GraphNameAnonEnd => if token == N3Token::Punctuation("]") {
  372|      0|                    self.cur_graph = BlankNode::default().into();
  373|      0|                    self
  374|       |                } else {
  375|      0|                    self.error(errors, "Anonymous blank node with a property list are not allowed as graph name")
  376|       |                }
  377|       |                // [7] 	predicateObjectList 	::= 	verb objectList (';' (verb objectList)?)*
  378|       |                TriGState::PredicateObjectList => {
  379|   132k|                    self.stack.push(TriGState::PredicateObjectListEnd);
  380|   132k|                    self.stack.push(TriGState::ObjectsList);
  381|   132k|                    self.stack.push(TriGState::Verb);
  382|   132k|                    self.recognize_next(token, context,results, errors)
  383|       |                },
  384|       |                TriGState::PredicateObjectListEnd => {
  385|   121k|                    self.cur_predicate.pop();
  386|   121k|                    if token == N3Token::Punctuation(";") {
  387|  8.95k|                        self.stack.push(TriGState::PredicateObjectListPossibleContinuation);
  388|  8.95k|                        self
  389|       |                    } else {
  390|   112k|                        self.recognize_next(token, context,results, errors)
  391|       |                    }
  392|       |                },
  393|  10.9k|                TriGState::PredicateObjectListPossibleContinuation => if token == N3Token::Punctuation(";") {
  394|  2.03k|                    self.stack.push(TriGState::PredicateObjectListPossibleContinuation);
  395|  2.03k|                    self
  396|  8.93k|                } else if matches!(token, N3Token::Punctuation("." | "}" | "]")) {
  397|    262|                    self.recognize_next(token, context,results, errors)
  398|       |                } else {
  399|  8.67k|                    self.stack.push(TriGState::PredicateObjectListEnd);
  400|  8.67k|                    self.stack.push(TriGState::ObjectsList);
  401|  8.67k|                    self.stack.push(TriGState::Verb);
  402|  8.67k|                    self.recognize_next(token, context,results, errors)
  403|       |                },
  404|       |                // [8] 	objectList 	::= 	object annotation? ( ',' object annotation? )*
  405|       |                // [30t] 	annotation 	::= 	'{|' predicateObjectList '|}'
  406|       |                TriGState::ObjectsList => {
  407|   132k|                    self.stack.push(TriGState::ObjectsListEnd);
  408|   132k|                    self.stack.push(TriGState::Object);
  409|   132k|                    self.recognize_next(token, context,results, errors)
  410|       |                }
  411|       |                TriGState::ObjectsListEnd => {
  412|   129k|                    match token {
  413|   105k|                        N3Token::Punctuation(",") => {
  414|  6.78k|                            self.cur_object.pop();
  415|  6.78k|                            self.stack.push(TriGState::ObjectsListEnd);
  416|  6.78k|                            self.stack.push(TriGState::Object);
  417|  6.78k|                            self
  418|       |                        },
  419|       |                        #[cfg(feature = "rdf-star")]
  420|  98.6k|                        N3Token::Punctuation("{|") => {
  421|  1.07k|                            let triple = Triple::new(
  422|  1.07k|                                self.cur_subject.last().unwrap().clone(),
  423|  1.07k|                                self.cur_predicate.last().unwrap().clone(),
  424|  1.07k|                                self.cur_object.pop().unwrap()
  425|  1.07k|                            );
  426|  1.07k|                            self.cur_subject.push(triple.into());
  427|  1.07k|                            self.stack.push(TriGState::AnnotationEnd);
  428|  1.07k|                            self.stack.push(TriGState::PredicateObjectList);
  429|  1.07k|                            self
  430|       |                        }
  431|       |                       _ => {
  432|   121k|                            self.cur_object.pop();
  433|   121k|                            self.recognize_next(token, context,results, errors)
  434|       |                        }
  435|       |                    }
  436|       |                },
  437|       |                #[cfg(feature = "rdf-star")]
  438|       |                TriGState::AnnotationEnd => {
  439|    486|                    self.cur_subject.pop();
  440|    486|                    self.stack.push(TriGState::ObjectsListAfterAnnotation);
  441|    486|                    if token == N3Token::Punctuation("|}") {
  442|      0|                        self
  443|       |                    } else {
  444|    486|                        self.error(errors, "Annotations should end with '|}'")
  445|       |                    }
  446|       |                },
  447|       |                #[cfg(feature = "rdf-star")]
  448|      0|                TriGState::ObjectsListAfterAnnotation => if token == N3Token::Punctuation(",") {
  449|      0|                    self.stack.push(TriGState::ObjectsListEnd);
  450|      0|                    self.stack.push(TriGState::Object);
  451|      0|                    self
  452|       |                } else {
  453|      0|                    self.recognize_next(token, context,results, errors)
  454|       |                },
  455|       |                // [9] 	verb 	::= 	predicate | 'a'
  456|       |                // [11] 	predicate 	::= 	iri
  457|   146k|                TriGState::Verb => match token {
  458|  5.54k|                    N3Token::PlainKeyword("a") => {
  459|  2.92k|                        self.cur_predicate.push(rdf::TYPE.into());
  460|  2.92k|                        self
  461|       |                    }
  462|   135k|                    N3Token::IriRef(iri) => {
  463|   135k|                        self.cur_predicate.push(NamedNode::new_unchecked(iri));
  464|   135k|                        self
  465|       |                    }
  466|    353|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  467|      0|                        Ok(t) => {
  468|      0|                            self.cur_predicate.push(t);
  469|      0|                            self
  470|       |                        },
  471|    353|                        Err(e) => self.error(errors, e)
  472|       |                    }
  473|       |                   _ => {
  474|  7.51k|                        self.error(errors, "TOKEN is not a valid predicate")
  475|       |                    }
  476|       |                }
  477|       |                // [12] 	object 	::= 	iri | BlankNode | collection | blankNodePropertyList | literal | quotedTriple
  478|       |                // [13] 	literal 	::= 	RDFLiteral | NumericLiteral | BooleanLiteral
  479|       |                // [14] 	blank 	::= 	BlankNode | collection
  480|       |                // [15] 	blankNodePropertyList 	::= 	'[' predicateObjectList ']'
  481|       |                // [16] 	collection 	::= 	'(' object* ')'
  482|       |                // [17] 	NumericLiteral 	::= 	INTEGER | DECIMAL | DOUBLE
  483|       |                // [128s] 	RDFLiteral 	::= 	String (LANGTAG | '^^' iri)?
  484|       |                // [133s] 	BooleanLiteral 	::= 	'true' | 'false'
  485|       |                // [18] 	String 	::= 	STRING_LITERAL_QUOTE | STRING_LITERAL_SINGLE_QUOTE | STRING_LITERAL_LONG_SINGLE_QUOTE | STRING_LITERAL_LONG_QUOTE
  486|       |                // [135s] 	iri 	::= 	IRIREF | PrefixedName
  487|       |                // [136s] 	PrefixedName 	::= 	PNAME_LN | PNAME_NS
  488|       |                // [137s] 	BlankNode 	::= 	BLANK_NODE_LABEL | ANON
  489|  2.94k|                TriGState::Object => match token {
  490|  15.6k|                    N3Token::IriRef(iri) => {
  491|  15.6k|                        self.cur_object.push(NamedNode::new_unchecked(iri).into());
  492|  15.6k|                        self.emit_quad(results);
  493|  15.6k|                        self
  494|       |                    }
  495|    541|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  496|      0|                        Ok(t) => {
  497|      0|                            self.cur_object.push(t.into());
  498|      0|                            self.emit_quad(results);
  499|      0|                            self
  500|       |                        },
  501|    541|                        Err(e) => self.error(errors, e)
  502|       |                    }
  503|  51.4k|                    N3Token::BlankNodeLabel(label) => {
  504|  51.4k|                        self.cur_object.push(BlankNode::new_unchecked(label).into());
  505|  51.4k|                        self.emit_quad(results);
  506|  51.4k|                        self
  507|       |                    }
  508|   113k|                    N3Token::Punctuation("[") => {
  509|  1.63k|                        self.stack.push(TriGState::ObjectBlankNodePropertyListCurrent);
  510|  1.63k|                        self
  511|       |                    }
  512|   112k|                    N3Token::Punctuation("(") => {
  513|   105k|                        self.stack.push(TriGState::ObjectCollectionBeginning);
  514|   105k|                        self
  515|       |                    }
  516|  18.6k|                    N3Token::String(value) => {
  517|  18.6k|                        self.stack.push(TriGState::LiteralPossibleSuffix { value, emit: true });
  518|  18.6k|                        self
  519|       |                    }
  520|  71.7k|                    N3Token::Integer(v) => {
  521|  71.7k|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::INTEGER).into());
  522|  71.7k|                        self.emit_quad(results);
  523|  71.7k|                        self
  524|       |                    }
  525|  6.18k|                    N3Token::Decimal(v) => {
  526|  6.18k|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
  527|  6.18k|                        self.emit_quad(results);
  528|  6.18k|                        self
  529|       |                    }
  530|  21.6k|                    N3Token::Double(v) => {
  531|  21.6k|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
  532|  21.6k|                        self.emit_quad(results);
  533|  21.6k|                        self
  534|       |                    }
  535|  3.63k|                    N3Token::PlainKeyword("true") => {
  536|    647|                        self.cur_object.push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
  537|    647|                        self.emit_quad(results);
  538|    647|                        self
  539|       |                    }
  540|  2.99k|                    N3Token::PlainKeyword("false") => {
  541|    178|                        self.cur_object.push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
  542|    178|                        self.emit_quad(results);
  543|    178|                        self
  544|       |                    }
  545|       |                    #[cfg(feature = "rdf-star")]
  546|  7.22k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  547|  2.94k|                        self.stack.push(TriGState::ObjectQuotedTripleEnd { emit: true });
  548|  2.94k|                        self.stack.push(TriGState::QuotedObject);
  549|  2.94k|                        self.stack.push(TriGState::Verb);
  550|  2.94k|                        self.stack.push(TriGState::QuotedSubject);
  551|  2.94k|                        self
  552|       |                    }
  553|       |                   _ => {
  554|  7.31k|                        self.error(errors, "TOKEN is not a valid RDF object")
  555|       |                    }
  556|       |
  557|       |                }
  558|  1.45k|                TriGState::ObjectBlankNodePropertyListCurrent => if token == N3Token::Punctuation("]") {
  559|    196|                    self.cur_object.push(BlankNode::default().into());
  560|    196|                    self.emit_quad(results);
  561|    196|                    self
  562|       |                } else {
  563|  1.26k|                    self.cur_subject.push(BlankNode::default().into());
  564|  1.26k|                    self.stack.push(TriGState::ObjectBlankNodePropertyListEnd);
  565|  1.26k|                    self.stack.push(TriGState::PredicateObjectList);
  566|  1.26k|                    self.recognize_next(token, context,results, errors)
  567|       |                }
  568|    300|                TriGState::ObjectBlankNodePropertyListEnd => if token == N3Token::Punctuation("]") {
  569|     81|                    self.cur_object.push(self.cur_subject.pop().unwrap().into());
  570|     81|                    self.emit_quad(results);
  571|     81|                    self
  572|       |                } else {
  573|    219|                    self.error(errors, "blank node property lists should end with a ']'")
  574|       |                }
  575|   102k|                TriGState::ObjectCollectionBeginning => if let  N3Token::Punctuation(")") = token {
  576|  2.79k|                    self.cur_object.push(rdf::NIL.into());
  577|  2.79k|                    self.emit_quad(results);
  578|  2.79k|                    self
  579|       |                } else {
  580|   100k|                    let root = BlankNode::default();
  581|   100k|                    self.cur_object.push(root.clone().into());
  582|   100k|                    self.emit_quad(results);
  583|   100k|                    self.cur_subject.push(root.into());
  584|   100k|                    self.cur_predicate.push(rdf::FIRST.into());
  585|   100k|                    self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  586|   100k|                    self.stack.push(TriGState::Object);
  587|   100k|                    self.recognize_next(token, context,results, errors)
  588|       |                },
  589|       |                TriGState::ObjectCollectionPossibleEnd => {
  590|  45.1k|                    let old = self.cur_subject.pop().unwrap();
  591|  45.1k|                    self.cur_object.pop();
  592|  45.1k|                    if let N3Token::Punctuation(")") = token {
  593|  9.15k|                        self.cur_predicate.pop();
  594|  9.15k|                        results.push(Quad::new(old,
  595|  9.15k|                                               rdf::REST,
  596|  9.15k|                                               rdf::NIL,
  597|  9.15k|                                               self.cur_graph.clone()
  598|  9.15k|                        ));
  599|  9.15k|                        self
  600|       |                    }else {
  601|  36.0k|                        let new = BlankNode::default();
  602|  36.0k|                        results.push(Quad::new(old,
  603|  36.0k|                                               rdf::REST,
  604|  36.0k|                                               new.clone(),
  605|  36.0k|                                               self.cur_graph.clone()
  606|  36.0k|                        ));
  607|  36.0k|                        self.cur_subject.push(new.into());
  608|  36.0k|                        self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  609|  36.0k|                        self.stack.push(TriGState::Object);
  610|  36.0k|                        self.recognize_next(token, context,results, errors)
  611|       |                    }
  612|       |                }
  613|  17.8k|                TriGState::LiteralPossibleSuffix { value, emit } => {
  614|  17.8k|                    match token {
  615|  2.53k|                        N3Token::LangTag(lang) => {
  616|  2.53k|                            self.cur_object.push(Literal::new_language_tagged_literal_unchecked(value, lang.to_ascii_lowercase()).into());
  617|  2.53k|                            if emit {
  618|  2.52k|                                self.emit_quad(results);
  619|  2.52k|                            }
  620|  2.53k|                            self
  621|       |                        },
  622|  8.21k|                        N3Token::Punctuation("^^") => {
  623|    127|                            self.stack.push(TriGState::LiteralExpectDatatype { value, emit });
  624|    127|                            self
  625|       |                        }
  626|       |                        _ => {
  627|  15.2k|                            self.cur_object.push(Literal::new_simple_literal(value).into());
  628|  15.2k|                            if emit {
  629|  15.1k|                                self.emit_quad(results);
  630|  15.1k|                            }
  631|  15.2k|                            self.recognize_next(token, context,results, errors)
  632|       |                        }
  633|       |                    }
  634|       |                }
  635|     81|                TriGState::LiteralExpectDatatype { value, emit } => {
  636|     81|                    match token {
  637|      0|                        N3Token::IriRef(datatype) => {
  638|      0|                            self.cur_object.push(Literal::new_typed_literal(value, NamedNode::new_unchecked(datatype)).into());
  639|      0|                            if emit {
  640|      0|                                self.emit_quad(results);
  641|      0|                            }
  642|      0|                            self
  643|       |                        },
  644|      0|                        N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  645|      0|                            Ok(t) => {
  646|      0|                                self.cur_object.push(Literal::new_typed_literal(value, t).into());
  647|      0|                                if emit {
  648|      0|                                    self.emit_quad(results);
  649|      0|                                }
  650|      0|                                self
  651|       |                            },
  652|      0|                            Err(e) => self.error(errors, e)
  653|       |                        }
  654|       |                        _ => {
  655|     81|                            self.error(errors, "Expecting a datatype IRI after ^^, found TOKEN").recognize_next(token, context, results, errors)
  656|       |                        }
  657|       |                    }
  658|       |                }
  659|       |                // [27t] 	quotedTriple 	::= 	'<<' qtSubject verb qtObject '>>'
  660|       |                #[cfg(feature = "rdf-star")]
  661|       |                TriGState::SubjectQuotedTripleEnd => {
  662|  2.21k|                    let triple = Triple::new(
  663|  2.21k|                        self.cur_subject.pop().unwrap(),
  664|  2.21k|                        self.cur_predicate.pop().unwrap(),
  665|  2.21k|                        self.cur_object.pop().unwrap()
  666|  2.21k|                    );
  667|  2.21k|                    self.cur_subject.push(triple.into());
  668|  2.21k|                    if token == N3Token::Punctuation(">>") {
  669|    350|                        self
  670|       |                    } else {
  671|  1.86k|                        self.error(errors, "Expecting '>>' to close a quoted triple, found TOKEN")
  672|       |                    }
  673|       |                }
  674|       |                #[cfg(feature = "rdf-star")]
  675|  1.81k|                TriGState::ObjectQuotedTripleEnd { emit } => {
  676|  1.81k|                    let triple = Triple::new(
  677|  1.81k|                        self.cur_subject.pop().unwrap(),
  678|  1.81k|                        self.cur_predicate.pop().unwrap(),
  679|  1.81k|                        self.cur_object.pop().unwrap()
  680|  1.81k|                    );
  681|  1.81k|                    self.cur_object.push(triple.into());
  682|  1.81k|                    if emit {
  683|  1.73k|                        self.emit_quad(results);
  684|  1.73k|                    }
  685|  1.81k|                    if token == N3Token::Punctuation(">>") {
  686|    457|                        self
  687|       |                    } else {
  688|  1.35k|                        self.error(errors, "Expecting '>>' to close a quoted triple, found TOKEN")
  689|       |                    }
  690|       |                }
  691|       |                // [28t] 	qtSubject 	::= 	iri | BlankNode | quotedTriple
  692|       |                #[cfg(feature = "rdf-star")]
  693|  26.4k|                TriGState::QuotedSubject => match token {
  694|  20.1k|                    N3Token::Punctuation("[") => {
  695|    206|                        self.cur_subject.push(BlankNode::default().into());
  696|    206|                        self.stack.push(TriGState::QuotedAnonEnd);
  697|    206|                        self
  698|       |                    }
  699|  5.15k|                    N3Token::IriRef(iri) => {
  700|  5.15k|                        self.cur_subject.push(NamedNode::new_unchecked(iri).into());
  701|  5.15k|                        self
  702|       |                    }
  703|    351|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  704|      0|                        Ok(t) => {
  705|      0|                            self.cur_subject.push(t.into());
  706|      0|                            self
  707|       |                        },
  708|    351|                        Err(e) => self.error(errors, e)
  709|       |                    }
  710|    410|                    N3Token::BlankNodeLabel(label) => {
  711|    410|                        self.cur_subject.push(BlankNode::new_unchecked(label).into());
  712|    410|                        self
  713|       |                    }
  714|  19.9k|                    N3Token::Punctuation("<<") => {
  715|  19.3k|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  716|  19.3k|                        self.stack.push(TriGState::QuotedObject);
  717|  19.3k|                        self.stack.push(TriGState::Verb);
  718|  19.3k|                        self.stack.push(TriGState::QuotedSubject);
  719|  19.3k|                        self
  720|       |                    }
  721|  1.05k|                    _ => self.error(errors, "TOKEN is not a valid RDF quoted triple subject: TOKEN")
  722|       |                }
  723|       |                // [29t] 	qtObject 	::= 	iri | BlankNode | literal | quotedTriple
  724|       |                #[cfg(feature = "rdf-star")]
  725|  5.15k|                TriGState::QuotedObject => match token {
  726|    513|                    N3Token::Punctuation("[") => {
  727|    127|                        self.cur_object.push(BlankNode::default().into());
  728|    127|                        self.stack.push(TriGState::QuotedAnonEnd);
  729|    127|                        self
  730|       |                    }
  731|    636|                    N3Token::IriRef(iri) => {
  732|    636|                        self.cur_object.push(NamedNode::new_unchecked(iri).into());
  733|    636|                        self
  734|       |                    }
  735|    112|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  736|      0|                        Ok(t) => {
  737|      0|                            self.cur_object.push(t.into());
  738|      0|                            self
  739|       |                        },
  740|    112|                        Err(e) => self.error(errors, e)
  741|       |                    }
  742|    556|                    N3Token::BlankNodeLabel(label) => {
  743|    556|                        self.cur_object.push(BlankNode::new_unchecked(label).into());
  744|    556|                        self
  745|       |                    }
  746|     52|                    N3Token::String(value) => {
  747|     52|                        self.stack.push(TriGState::LiteralPossibleSuffix { value, emit: false });
  748|     52|                        self
  749|       |                    }
  750|  1.05k|                    N3Token::Integer(v) => {
  751|  1.05k|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::INTEGER).into());
  752|  1.05k|                        self
  753|       |                    }
  754|     90|                    N3Token::Decimal(v) => {
  755|     90|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
  756|     90|                        self
  757|       |                    }
  758|  1.85k|                    N3Token::Double(v) => {
  759|  1.85k|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
  760|  1.85k|                        self
  761|       |                    }
  762|    160|                    N3Token::PlainKeyword("true") => {
  763|      0|                        self.cur_object.push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
  764|      0|                        self
  765|       |                    }
  766|    160|                    N3Token::PlainKeyword("false") => {
  767|     30|                        self.cur_object.push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
  768|     30|                        self
  769|       |                    }
  770|    386|                    N3Token::Punctuation("<<") => {
  771|    175|                        self.stack.push(TriGState::ObjectQuotedTripleEnd { emit: false });
  772|    175|                        self.stack.push(TriGState::QuotedObject);
  773|    175|                        self.stack.push(TriGState::Verb);
  774|    175|                        self.stack.push(TriGState::QuotedSubject);
  775|    175|                        self
  776|       |                    }
  777|    467|                    _ => self.error(errors, "TOKEN is not a valid RDF quoted triple object")
  778|       |                }
  779|       |                #[cfg(feature = "rdf-star")]
  780|    294|                TriGState::QuotedAnonEnd => if token == N3Token::Punctuation("]") {
  781|    125|                    self
  782|       |                } else {
  783|    169|                    self.error(errors, "Anonymous blank node with a property list are not allowed in quoted triples")
  784|       |                }
  785|       |            }
  786|   995k|        } else if token == N3Token::Punctuation(".") || token == N3Token::Punctuation("}") {
  787|       |            //TODO: be smarter depending if we are in '{' or not
  788|   220k|            self.stack.push(TriGState::TriGDoc);
  789|   220k|            self
  790|       |        } else {
  791|   775k|            self
  792|       |        }
  793|  3.08M|    }
_RNvXNtCscuJmoqhSOSr_5oxttl5terseNtB2_14TriGRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer13recognize_end:
  795|  22.9k|    fn recognize_end(
  796|  22.9k|        mut self,
  797|  22.9k|        _context: &mut TriGRecognizerContext,
  798|  22.9k|        results: &mut Vec<Self::Output>,
  799|  22.9k|        errors: &mut Vec<RuleRecognizerError>,
  800|  22.9k|    ) {
  801|  22.9k|        match &*self.stack {
  802|  22.9k|            [] | [TriGState::TriGDoc] => {
  803|  21.9k|                debug_assert!(
  804|      0|                    self.cur_subject.is_empty(),
  805|      0|                    "The cur_subject stack must be empty if the state stack is empty"
  806|       |                );
  807|  21.9k|                debug_assert!(
  808|      0|                    self.cur_predicate.is_empty(),
  809|      0|                    "The cur_predicate stack must be empty if the state stack is empty"
  810|       |                );
  811|  21.9k|                debug_assert!(
  812|      0|                    self.cur_object.is_empty(),
  813|      0|                    "The cur_object stack must be empty if the state stack is empty"
  814|       |                );
  815|       |            }
  816|    204|            [.., TriGState::LiteralPossibleSuffix { value, emit: true }] => {
  817|    204|                self.cur_object
  818|    204|                    .push(Literal::new_simple_literal(value).into());
  819|    204|                self.emit_quad(results);
  820|    204|                errors.push("Triples should be followed by a dot".into())
  821|       |            }
  822|    778|            _ => errors.push("Unexpected end".into()), //TODO
  823|       |        }
  824|  22.9k|    }
_RNvXNtCscuJmoqhSOSr_5oxttl5terseNtB2_14TriGRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer13lexer_options:
  826|  4.82M|    fn lexer_options(context: &TriGRecognizerContext) -> &N3LexerOptions {
  827|  4.82M|        &context.lexer_options
  828|  4.82M|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5terseNtB4_14TriGRecognizer10new_parser:
  832|  22.9k|    pub fn new_parser(
  833|  22.9k|        with_graph_name: bool,
  834|  22.9k|        #[cfg(feature = "rdf-star")] with_quoted_triples: bool,
  835|  22.9k|        unchecked: bool,
  836|  22.9k|        base_iri: Option<Iri<String>>,
  837|  22.9k|        prefixes: HashMap<String, Iri<String>>,
  838|  22.9k|    ) -> Parser<Self> {
  839|  22.9k|        Parser::new(
  840|  22.9k|            Lexer::new(
  841|  22.9k|                N3Lexer::new(N3LexerMode::Turtle, unchecked),
  842|  22.9k|                MIN_BUFFER_SIZE,
  843|  22.9k|                MAX_BUFFER_SIZE,
  844|  22.9k|                true,
  845|  22.9k|                Some(b"#"),
  846|  22.9k|            ),
  847|  22.9k|            TriGRecognizer {
  848|  22.9k|                stack: vec![TriGState::TriGDoc],
  849|  22.9k|                cur_subject: Vec::new(),
  850|  22.9k|                cur_predicate: Vec::new(),
  851|  22.9k|                cur_object: Vec::new(),
  852|  22.9k|                cur_graph: GraphName::DefaultGraph,
  853|  22.9k|            },
  854|  22.9k|            TriGRecognizerContext {
  855|  22.9k|                with_graph_name,
  856|  22.9k|                #[cfg(feature = "rdf-star")]
  857|  22.9k|                with_quoted_triples,
  858|  22.9k|                prefixes,
  859|  22.9k|                lexer_options: N3LexerOptions { base_iri },
  860|  22.9k|            },
  861|  22.9k|        )
  862|  22.9k|    }
_RNvMs_NtCscuJmoqhSOSr_5oxttl5terseNtB4_14TriGRecognizer9emit_quad:
  879|   290k|    fn emit_quad(&mut self, results: &mut Vec<Quad>) {
  880|   290k|        results.push(Quad::new(
  881|   290k|            self.cur_subject.last().unwrap().clone(),
  882|   290k|            self.cur_predicate.last().unwrap().clone(),
  883|   290k|            self.cur_object.last().unwrap().clone(),
  884|   290k|            self.cur_graph.clone(),
  885|   290k|        ));
  886|   290k|    }
_RINvMs_NtCscuJmoqhSOSr_5oxttl5terseNtB5_14TriGRecognizer5errorNtNtCs15NWbik7Z2V_5alloc6string6StringEB7_:
  865|  15.3k|    fn error(
  866|  15.3k|        mut self,
  867|  15.3k|        errors: &mut Vec<RuleRecognizerError>,
  868|  15.3k|        msg: impl Into<RuleRecognizerError>,
  869|  15.3k|    ) -> Self {
  870|  15.3k|        errors.push(msg.into());
  871|  15.3k|        self.stack.clear();
  872|  15.3k|        self.cur_subject.clear();
  873|  15.3k|        self.cur_predicate.clear();
  874|  15.3k|        self.cur_object.clear();
  875|  15.3k|        self.cur_graph = GraphName::DefaultGraph;
  876|  15.3k|        self
  877|  15.3k|    }
_RINvMs_NtCscuJmoqhSOSr_5oxttl5terseNtB5_14TriGRecognizer5errorReEB7_:
  865|   145k|    fn error(
  866|   145k|        mut self,
  867|   145k|        errors: &mut Vec<RuleRecognizerError>,
  868|   145k|        msg: impl Into<RuleRecognizerError>,
  869|   145k|    ) -> Self {
  870|   145k|        errors.push(msg.into());
  871|   145k|        self.stack.clear();
  872|   145k|        self.cur_subject.clear();
  873|   145k|        self.cur_predicate.clear();
  874|   145k|        self.cur_object.clear();
  875|   145k|        self.cur_graph = GraphName::DefaultGraph;
  876|   145k|        self
  877|   145k|    }

_RNvXs_NtNtCscuJmoqhSOSr_5oxttl7toolkit5errorNtB4_11SyntaxErrorNtNtCsjv2Y2xFO4ua_4core3fmt7Display3fmtCs3ABq5th2z32_4trig:
   38|  1.56M|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   39|  1.56M|        if self.location.start.offset + 1 >= self.location.end.offset {
   40|  1.35M|            write!(
   41|  1.35M|                f,
   42|  1.35M|                "Parser error at line {} column {}: {}",
   43|  1.35M|                self.location.start.line + 1,
   44|  1.35M|                self.location.start.column + 1,
   45|  1.35M|                self.message
   46|  1.35M|            )
   47|   215k|        } else if self.location.start.line == self.location.end.line {
   48|   214k|            write!(
   49|   214k|                f,
   50|   214k|                "Parser error between at line {} between columns {} and column {}: {}",
   51|   214k|                self.location.start.line + 1,
   52|   214k|                self.location.start.column + 1,
   53|   214k|                self.location.end.column + 1,
   54|   214k|                self.message
   55|   214k|            )
   56|       |        } else {
   57|  1.18k|            write!(
   58|  1.18k|                f,
   59|  1.18k|                "Parser error between line {} column {} and line {} column {}: {}",
   60|  1.18k|                self.location.start.line + 1,
   61|  1.18k|                self.location.start.column + 1,
   62|  1.18k|                self.location.end.line + 1,
   63|  1.18k|                self.location.end.column + 1,
   64|  1.18k|                self.message
   65|  1.18k|            )
   66|       |        }
   67|  1.56M|    }

_RINvMs1_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerINtB6_5LexerNtNtBa_5lexer7N3LexerE16extend_from_readRShECs3ABq5th2z32_4trig:
  113|  15.1k|    pub fn extend_from_read(&mut self, read: &mut impl Read) -> io::Result<()> {
  114|  15.1k|        self.shrink_data();
  115|  15.1k|        if self.data.len() == self.max_buffer_size {
  116|      0|            return Err(io::Error::new(
  117|      0|                io::ErrorKind::OutOfMemory,
  118|      0|                format!(
  119|      0|                    "Reached the buffer maximal size of {}",
  120|      0|                    self.max_buffer_size
  121|      0|                ),
  122|      0|            ));
  123|  15.1k|        }
  124|  15.1k|        let min_end = min(self.data.len() + self.min_buffer_size, self.max_buffer_size);
  125|  15.1k|        let new_start = self.data.len();
  126|  15.1k|        self.data.resize(min_end, 0);
  127|  15.1k|        if self.data.len() < self.data.capacity() {
  128|  1.50k|            // We keep extending to have as much space as available without reallocation
  129|  1.50k|            self.data.resize(self.data.capacity(), 0);
  130|  13.6k|        }
  131|  15.1k|        let read = read.read(&mut self.data[new_start..])?;
  132|  15.1k|        self.data.truncate(new_start + read);
  133|  15.1k|        self.is_ending = read == 0;
  134|  15.1k|        Ok(())
  135|  15.1k|    }
_RNvXNtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCsjv2Y2xFO4ua_4core7convert4FromTINtNtNtB1a_3ops5range5RangejENtNtCs15NWbik7Z2V_5alloc6string6StringEE4fromB6_:
   31|  1.02M|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|  1.02M|        Self {
   33|  1.02M|            location,
   34|  1.02M|            message: message.into(),
   35|  1.02M|        }
   36|  1.02M|    }
_RNvXNtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCsjv2Y2xFO4ua_4core7convert4FromTINtNtNtB1a_3ops5range5RangejEReEE4fromB6_:
   31|   363k|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|   363k|        Self {
   33|   363k|            location,
   34|   363k|            message: message.into(),
   35|   363k|        }
   36|   363k|    }
_RNvXs_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCsjv2Y2xFO4ua_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejENtNtCs15NWbik7Z2V_5alloc6string6StringEE4fromB8_:
   41|  4.40k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  4.40k|        (*location.start()..*location.end() + 1, message).into()
   43|  4.40k|    }
_RNvXs_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCsjv2Y2xFO4ua_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejEReEE4fromB8_:
   41|   318k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|   318k|        (*location.start()..*location.end() + 1, message).into()
   43|   318k|    }
_RNvXs0_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerNtB5_20TokenRecognizerErrorINtNtCsjv2Y2xFO4ua_4core7convert4FromTjNtNtCs15NWbik7Z2V_5alloc6string6StringEE4fromB9_:
   47|  2.99k|    fn from((location, message): (usize, S)) -> Self {
   48|  2.99k|        (location..=location, message).into()
   49|  2.99k|    }
_RNvMs1_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3newB9_:
   73|  22.9k|    pub fn new(
   74|  22.9k|        parser: R,
   75|  22.9k|        min_buffer_size: usize,
   76|  22.9k|        max_buffer_size: usize,
   77|  22.9k|        is_line_jump_whitespace: bool,
   78|  22.9k|        line_comment_start: Option<&'static [u8]>,
   79|  22.9k|    ) -> Self {
   80|  22.9k|        Self {
   81|  22.9k|            parser,
   82|  22.9k|            data: Vec::new(),
   83|  22.9k|            position: Position {
   84|  22.9k|                line_start_buffer_offset: 0,
   85|  22.9k|                buffer_offset: 0,
   86|  22.9k|                global_offset: 0,
   87|  22.9k|                global_line: 0,
   88|  22.9k|            },
   89|  22.9k|            previous_position: Position {
   90|  22.9k|                line_start_buffer_offset: 0,
   91|  22.9k|                buffer_offset: 0,
   92|  22.9k|                global_offset: 0,
   93|  22.9k|                global_line: 0,
   94|  22.9k|            },
   95|  22.9k|            is_ending: false,
   96|  22.9k|            min_buffer_size,
   97|  22.9k|            max_buffer_size,
   98|  22.9k|            is_line_jump_whitespace,
   99|  22.9k|            line_comment_start,
  100|  22.9k|        }
  101|  22.9k|    }
_RNvMs1_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17extend_from_sliceB9_:
  103|  1.45M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  104|  1.45M|        self.shrink_data();
  105|  1.45M|        self.data.extend_from_slice(other);
  106|  1.45M|    }
_RNvMs1_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3endB9_:
  109|  17.2k|    pub fn end(&mut self) {
  110|  17.2k|        self.is_ending = true;
  111|  17.2k|    }
_RNvMs1_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE9read_nextB9_:
  166|  4.82M|    pub fn read_next(&mut self, options: &R::Options) -> Option<Result<R::Token<'_>, SyntaxError>> {
  167|  4.82M|        self.skip_whitespaces_and_comments()?;
  168|  4.80M|        self.previous_position = self.position;
  169|  4.80M|        let Some((consumed, result)) = self.parser.recognize_next_token(
  170|  4.80M|            &self.data[self.position.buffer_offset..],
  171|  4.80M|            self.is_ending,
  172|  4.80M|            options,
  173|  4.80M|        ) else {
  174|  1.49M|            return if self.is_ending {
  175|  50.5k|                if self.position.buffer_offset == self.data.len() {
  176|  45.8k|                    None // We have finished
  177|       |                } else {
  178|  4.66k|                    let (new_line_jumps, new_line_start) =
  179|  4.66k|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  180|  4.66k|                            &self.data[self.position.buffer_offset..],
  181|  4.66k|                        );
  182|  4.66k|                    if new_line_jumps > 0 {
  183|    451|                        self.position.line_start_buffer_offset =
  184|    451|                            self.position.buffer_offset + new_line_start;
  185|  4.21k|                    }
  186|  4.66k|                    self.position.global_offset +=
  187|  4.66k|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  188|  4.66k|                    self.position.buffer_offset = self.data.len();
  189|  4.66k|                    self.position.global_line += new_line_jumps;
  190|  4.66k|                    let new_position = TextPosition {
  191|  4.66k|                        line: self.position.global_line,
  192|  4.66k|                        column: Self::column_from_bytes(
  193|  4.66k|                            &self.data[self.position.line_start_buffer_offset..],
  194|  4.66k|                        ),
  195|  4.66k|                        offset: self.position.global_offset,
  196|  4.66k|                    };
  197|  4.66k|                    let error = SyntaxError {
  198|  4.66k|                        location: new_position..new_position,
  199|  4.66k|                        message: "Unexpected end of file".into(),
  200|  4.66k|                    };
  201|  4.66k|                    self.position.buffer_offset = self.data.len(); // We consume everything
  202|  4.66k|                    Some(Err(error))
  203|       |                }
  204|       |            } else {
  205|  1.44M|                None
  206|       |            };
  207|       |        };
  208|  3.31M|        debug_assert!(
  209|      0|            consumed > 0,
  210|      0|            "The lexer must consume at least one byte each time"
  211|       |        );
  212|  3.31M|        debug_assert!(
  213|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  214|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  215|      0|            self.data.len() - self.position.buffer_offset
  216|       |        );
  217|  3.31M|        let (new_line_jumps, new_line_start) =
  218|  3.31M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  219|  3.31M|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  220|  3.31M|            );
  221|  3.31M|        if new_line_jumps > 0 {
  222|  2.96k|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  223|  3.31M|        }
  224|  3.31M|        self.position.buffer_offset += consumed;
  225|  3.31M|        self.position.global_offset += u64::try_from(consumed).unwrap();
  226|  3.31M|        self.position.global_line += new_line_jumps;
  227|  3.31M|        Some(result.map_err(|e| SyntaxError {
  228|       |            location: self.location_from_buffer_offset_range(e.location),
  229|       |            message: e.message,
  230|  3.31M|        }))
  231|  4.82M|    }
_RNCNvMs1_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerINtB7_5LexerNtNtBb_5lexer7N3LexerE9read_next0Bb_:
  227|  1.37M|        Some(result.map_err(|e| SyntaxError {
  228|  1.37M|            location: self.location_from_buffer_offset_range(e.location),
  229|  1.37M|            message: e.message,
  230|  1.37M|        }))
_RNvMs1_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE33location_from_buffer_offset_rangeB9_:
  233|  1.37M|    pub fn location_from_buffer_offset_range(
  234|  1.37M|        &self,
  235|  1.37M|        offset_range: Range<usize>,
  236|  1.37M|    ) -> Range<TextPosition> {
  237|  1.37M|        let start_offset = self.previous_position.buffer_offset + offset_range.start;
  238|  1.37M|        let (start_extra_line_jumps, start_line_start) =
  239|  1.37M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  240|  1.37M|                &self.data[self.previous_position.buffer_offset..start_offset],
  241|  1.37M|            );
  242|  1.37M|        let start_line_start = if start_extra_line_jumps > 0 {
  243|    498|            start_line_start + self.previous_position.buffer_offset
  244|       |        } else {
  245|  1.37M|            self.previous_position.line_start_buffer_offset
  246|       |        };
  247|  1.37M|        let end_offset = self.previous_position.buffer_offset + offset_range.end;
  248|  1.37M|        let (end_extra_line_jumps, end_line_start) =
  249|  1.37M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  250|  1.37M|                &self.data[self.previous_position.buffer_offset..end_offset],
  251|  1.37M|            );
  252|  1.37M|        let end_line_start = if end_extra_line_jumps > 0 {
  253|  1.65k|            end_line_start + self.previous_position.buffer_offset
  254|       |        } else {
  255|  1.37M|            self.previous_position.line_start_buffer_offset
  256|       |        };
  257|  1.37M|        TextPosition {
  258|  1.37M|            line: self.previous_position.global_line + start_extra_line_jumps,
  259|  1.37M|            column: Self::column_from_bytes(&self.data[start_line_start..start_offset]),
  260|  1.37M|            offset: self.previous_position.global_offset
  261|  1.37M|                + u64::try_from(offset_range.start).unwrap(),
  262|  1.37M|        }..TextPosition {
  263|  1.37M|            line: self.previous_position.global_line + end_extra_line_jumps,
  264|  1.37M|            column: Self::column_from_bytes(&self.data[end_line_start..end_offset]),
  265|  1.37M|            offset: self.previous_position.global_offset + u64::try_from(offset_range.end).unwrap(),
  266|  1.37M|        }
  267|  1.37M|    }
_RNvMs1_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE19last_token_locationB9_:
  269|   191k|    pub fn last_token_location(&self) -> Range<TextPosition> {
  270|   191k|        TextPosition {
  271|   191k|            line: self.previous_position.global_line,
  272|   191k|            column: Self::column_from_bytes(
  273|   191k|                &self.data[self.previous_position.line_start_buffer_offset
  274|   191k|                    ..self.previous_position.buffer_offset],
  275|   191k|            ),
  276|   191k|            offset: self.previous_position.global_offset,
  277|   191k|        }..TextPosition {
  278|   191k|            line: self.position.global_line,
  279|   191k|            column: Self::column_from_bytes(
  280|   191k|                &self.data[self.position.line_start_buffer_offset..self.position.buffer_offset],
  281|   191k|            ),
  282|   191k|            offset: self.position.global_offset,
  283|   191k|        }
  284|   191k|    }
_RNvMs1_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17last_token_sourceB9_:
  286|   191k|    pub fn last_token_source(&self) -> Cow<'_, str> {
  287|   191k|        String::from_utf8_lossy(
  288|   191k|            &self.data[self.previous_position.buffer_offset..self.position.buffer_offset],
  289|   191k|        )
  290|   191k|    }
_RNvMs1_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE6is_endB9_:
  292|  1.50M|    pub fn is_end(&self) -> bool {
  293|  1.50M|        self.is_ending && self.data.len() == self.position.buffer_offset
  294|  1.50M|    }
_RNvMs1_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  297|  4.82M|    fn skip_whitespaces_and_comments(&mut self) -> Option<()> {
  298|       |        loop {
  299|  4.82M|            self.skip_whitespaces()?;
  300|       |
  301|  4.82M|            let buf = &self.data[self.position.buffer_offset..];
  302|  4.82M|            if let Some(line_comment_start) = self.line_comment_start {
  303|  4.82M|                if buf.starts_with(line_comment_start) {
  304|       |                    // Comment
  305|  15.6k|                    if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  306|  2.31k|                        let mut end_position = line_comment_start.len() + end;
  307|  2.31k|                        if buf.get(end_position).copied() == Some(b'\r') {
  308|       |                            // We look for \n for Windows line end style
  309|  1.51k|                            if let Some(c) = buf.get(end_position + 1) {
  310|    632|                                if *c == b'\n' {
  311|      0|                                    end_position += 1;
  312|    632|                                }
  313|    880|                            } else if !self.is_ending {
  314|    854|                                return None; // We need to read more
  315|     26|                            }
  316|    802|                        }
  317|  1.46k|                        let comment_size = end_position + 1;
  318|  1.46k|                        self.position.buffer_offset += comment_size;
  319|  1.46k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  320|  1.46k|                        self.position.global_offset += u64::try_from(comment_size).unwrap();
  321|  1.46k|                        self.position.global_line += 1;
  322|  1.46k|                        continue;
  323|  13.3k|                    }
  324|  13.3k|                    if self.is_ending {
  325|    726|                        self.position.buffer_offset = self.data.len(); // EOF
  326|    726|                        return Some(());
  327|  12.6k|                    }
  328|  12.6k|                    return None; // We need more data
  329|  4.80M|                }
  330|      0|            }
  331|  4.80M|            return Some(());
  332|       |        }
  333|  4.82M|    }
_RNvMs1_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  335|  4.82M|    fn skip_whitespaces(&mut self) -> Option<()> {
  336|  4.82M|        if self.is_line_jump_whitespace {
  337|  4.82M|            let mut i = self.position.buffer_offset;
  338|  5.21M|            while let Some(c) = self.data.get(i) {
  339|  4.71M|                match c {
  340|   281k|                    b' ' | b'\t' => {
  341|   281k|                        self.position.buffer_offset += 1;
  342|   281k|                        self.position.global_offset += 1;
  343|   281k|                    }
  344|       |                    b'\r' => {
  345|       |                        // We look for \n for Windows line end style
  346|  14.8k|                        let mut increment: u8 = 1;
  347|  14.8k|                        if let Some(c) = self.data.get(i + 1) {
  348|  10.8k|                            if *c == b'\n' {
  349|     30|                                increment += 1;
  350|     30|                                i += 1;
  351|  10.8k|                            }
  352|  3.94k|                        } else if !self.is_ending {
  353|  3.82k|                            return None; // We need to read more
  354|    120|                        }
  355|  10.9k|                        self.position.buffer_offset += usize::from(increment);
  356|  10.9k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  357|  10.9k|                        self.position.global_offset += u64::from(increment);
  358|  10.9k|                        self.position.global_line += 1;
  359|       |                    }
  360|   101k|                    b'\n' => {
  361|   101k|                        self.position.buffer_offset += 1;
  362|   101k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  363|   101k|                        self.position.global_offset += 1;
  364|   101k|                        self.position.global_line += 1;
  365|   101k|                    }
  366|  4.31M|                    _ => return Some(()),
  367|       |                }
  368|   393k|                i += 1;
  369|       |                //TODO: SIMD
  370|       |            }
  371|       |        } else {
  372|      0|            for c in &self.data[self.position.buffer_offset..] {
  373|      0|                if matches!(c, b' ' | b'\t') {
  374|      0|                    self.position.buffer_offset += 1;
  375|      0|                    self.position.global_offset += 1;
  376|      0|                } else {
  377|      0|                    return Some(());
  378|       |                }
  379|       |                //TODO: SIMD
  380|       |            }
  381|       |        }
  382|   507k|        Some(())
  383|  4.82M|    }
_RNvMs1_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE11shrink_dataB9_:
  385|  1.46M|    fn shrink_data(&mut self) {
  386|  1.46M|        if self.position.line_start_buffer_offset > 0 {
  387|  13.4k|            self.data
  388|  13.4k|                .copy_within(self.position.line_start_buffer_offset.., 0);
  389|  13.4k|            self.data
  390|  13.4k|                .truncate(self.data.len() - self.position.line_start_buffer_offset);
  391|  13.4k|            self.position.buffer_offset -= self.position.line_start_buffer_offset;
  392|  13.4k|            self.position.line_start_buffer_offset = 0;
  393|  13.4k|            self.previous_position = self.position;
  394|  1.45M|        }
  395|  1.46M|    }
_RNvMs1_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  397|  6.06M|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  398|  6.06M|        let mut num_of_jumps = 0;
  399|  6.06M|        let mut last_jump_pos = 0;
  400|  6.06M|        let mut previous_cr = 0;
  401|  6.06M|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  402|  13.3k|            if bytes[pos] == b'\r' {
  403|  3.92k|                previous_cr = pos;
  404|  3.92k|                num_of_jumps += 1;
  405|  3.92k|                last_jump_pos = pos + 1;
  406|  3.92k|            } else {
  407|  9.39k|                if previous_cr < pos - 1 {
  408|  7.59k|                    // We count \r\n as a single line jump
  409|  7.59k|                    num_of_jumps += 1;
  410|  7.59k|                }
  411|  9.39k|                last_jump_pos = pos + 1;
  412|       |            }
  413|       |        }
  414|  6.06M|        (num_of_jumps, last_jump_pos)
  415|  6.06M|    }
_RNvMs1_NtNtCscuJmoqhSOSr_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17column_from_bytesB9_:
  417|  5.16M|    fn column_from_bytes(bytes: &[u8]) -> u64 {
  418|  5.16M|        match str::from_utf8(bytes) {
  419|  2.56M|            Ok(s) => u64::try_from(s.chars().count()).unwrap(),
  420|  2.60M|            Err(e) => {
  421|  2.60M|                if e.valid_up_to() == 0 {
  422|   568k|                    0
  423|       |                } else {
  424|  2.03M|                    Self::column_from_bytes(&bytes[..e.valid_up_to()])
  425|       |                }
  426|       |            }
  427|       |        }
  428|  5.16M|    }

_RINvMs_NtNtCscuJmoqhSOSr_5oxttl7toolkit6parserINtB5_6ParserNtNtB9_5terse14TriGRecognizerE10parse_readRShECs3ABq5th2z32_4trig:
  123|  5.73k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadIterator<R, RR> {
  124|  5.73k|        FromReadIterator { read, parser: self }
  125|  5.73k|    }
_RNvXs0_NtNtCscuJmoqhSOSr_5oxttl7toolkit6parserINtB5_16FromReadIteratorRShNtNtB9_5terse14TriGRecognizerENtNtNtNtCsjv2Y2xFO4ua_4core4iter6traits8iterator8Iterator4nextCs3ABq5th2z32_4trig:
  145|  90.0k|    fn next(&mut self) -> Option<Self::Item> {
  146|   105k|        while !self.parser.is_end() {
  147|  99.4k|            if let Some(result) = self.parser.read_next() {
  148|  84.2k|                return Some(result.map_err(ParseError::Syntax));
  149|  15.1k|            }
  150|  15.1k|            if let Err(e) = self.parser.lexer.extend_from_read(&mut self.read) {
  151|      0|                return Some(Err(e.into()));
  152|  15.1k|            }
  153|       |        }
  154|  5.73k|        None
  155|  90.0k|    }
_RNvXNtNtCscuJmoqhSOSr_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCsjv2Y2xFO4ua_4core7convert4FromNtNtCs15NWbik7Z2V_5alloc6string6StringE4fromB6_:
   39|  15.3k|    fn from(message: S) -> Self {
   40|  15.3k|        Self {
   41|  15.3k|            message: message.into(),
   42|  15.3k|        }
   43|  15.3k|    }
_RNvXNtNtCscuJmoqhSOSr_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCsjv2Y2xFO4ua_4core7convert4FromReE4fromB6_:
   39|   175k|    fn from(message: S) -> Self {
   40|   175k|        Self {
   41|   175k|            message: message.into(),
   42|   175k|        }
   43|   175k|    }
_RNvMs_NtNtCscuJmoqhSOSr_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE3newB8_:
   56|  22.9k|    pub fn new(lexer: Lexer<RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   57|  22.9k|        Self {
   58|  22.9k|            lexer,
   59|  22.9k|            state: Some(recognizer),
   60|  22.9k|            context,
   61|  22.9k|            results: vec![],
   62|  22.9k|            errors: vec![],
   63|  22.9k|        }
   64|  22.9k|    }
_RNvMs_NtNtCscuJmoqhSOSr_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE17extend_from_sliceB8_:
   66|  1.45M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
   67|  1.45M|        self.lexer.extend_from_slice(other)
   68|  1.45M|    }
_RNvMs_NtNtCscuJmoqhSOSr_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE3endB8_:
   71|  17.2k|    pub fn end(&mut self) {
   72|  17.2k|        self.lexer.end()
   73|  17.2k|    }
_RNvMs_NtNtCscuJmoqhSOSr_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE6is_endB8_:
   76|   122k|    pub fn is_end(&self) -> bool {
   77|   122k|        self.state.is_none() && self.results.is_empty() && self.errors.is_empty()
   78|   122k|    }
_RNvMs_NtNtCscuJmoqhSOSr_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE9read_nextB8_:
   80|  3.39M|    pub fn read_next(&mut self) -> Option<Result<RR::Output, SyntaxError>> {
   81|       |        loop {
   82|  5.35M|            if let Some(error) = self.errors.pop() {
   83|   191k|                return Some(Err(SyntaxError {
   84|   191k|                    location: self.lexer.last_token_location(),
   85|   191k|                    message: error
   86|   191k|                        .message
   87|   191k|                        .replace("TOKEN", &self.lexer.last_token_source()),
   88|   191k|                }));
   89|  5.16M|            }
   90|  5.16M|            if let Some(result) = self.results.pop() {
   91|   343k|                return Some(Ok(result));
   92|  4.82M|            }
   93|  4.82M|            if let Some(result) = self.lexer.read_next(RR::lexer_options(&self.context)) {
   94|  3.31M|                match result {
   95|  1.94M|                    Ok(token) => {
   96|  1.94M|                        self.state = self.state.take().map(|state| {
   97|       |                            state.recognize_next(
   98|       |                                token,
   99|       |                                &mut self.context,
  100|       |                                &mut self.results,
  101|       |                                &mut self.errors,
  102|       |                            )
  103|  1.94M|                        });
  104|  1.94M|                        continue;
  105|       |                    }
  106|  1.37M|                    Err(e) => {
  107|  1.37M|                        self.state = self.state.take().map(RR::error_recovery_state);
  108|  1.37M|                        return Some(Err(e));
  109|       |                    }
  110|       |                }
  111|  1.50M|            }
  112|  1.50M|            if self.lexer.is_end() {
  113|  45.8k|                let Some(state) = self.state.take() else {
  114|  22.9k|                    return None;
  115|       |                };
  116|  22.9k|                state.recognize_end(&mut self.context, &mut self.results, &mut self.errors)
  117|       |            } else {
  118|  1.45M|                return None;
  119|       |            }
  120|       |        }
  121|  3.39M|    }
_RNCNvMs_NtNtCscuJmoqhSOSr_5oxttl7toolkit6parserINtB6_6ParserNtNtBa_5terse14TriGRecognizerE9read_next0Ba_:
   96|  1.94M|                        self.state = self.state.take().map(|state| {
   97|  1.94M|                            state.recognize_next(
   98|  1.94M|                                token,
   99|  1.94M|                                &mut self.context,
  100|  1.94M|                                &mut self.results,
  101|  1.94M|                                &mut self.errors,
  102|  1.94M|                            )
  103|  1.94M|                        });

_RINvMNtCscuJmoqhSOSr_5oxttl4trigNtB3_10TriGParser10parse_readRShECs3ABq5th2z32_4trig:
  121|  5.73k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadTriGReader<R> {
  122|  5.73k|        FromReadTriGReader {
  123|  5.73k|            inner: self.parse().parser.parse_read(read),
  124|  5.73k|        }
  125|  5.73k|    }
_RINvMNtCscuJmoqhSOSr_5oxttl4trigNtB3_10TriGParser13with_base_iriReECs3ABq5th2z32_4trig:
   72|  17.2k|    pub fn with_base_iri(mut self, base_iri: impl Into<String>) -> Result<Self, IriParseError> {
   73|  17.2k|        self.base = Some(Iri::parse(base_iri.into())?);
   74|  17.2k|        Ok(self)
   75|  17.2k|    }
_RINvMs2_NtCscuJmoqhSOSr_5oxttl4trigNtB6_14TriGSerializer18serialize_to_writeINtNtCs15NWbik7Z2V_5alloc3vec3VechEECs3ABq5th2z32_4trig:
  496|  5.73k|    pub fn serialize_to_write<W: Write>(self, write: W) -> ToWriteTriGWriter<W> {
  497|  5.73k|        ToWriteTriGWriter {
  498|  5.73k|            write,
  499|  5.73k|            writer: self.serialize(),
  500|  5.73k|        }
  501|  5.73k|    }
_RINvMs3_NtCscuJmoqhSOSr_5oxttl4trigINtB6_17ToWriteTriGWriterINtNtCs15NWbik7Z2V_5alloc3vec3VechEE10write_quadRNtNtCs5bua6W9iSBw_5oxrdf6triple4QuadECs3ABq5th2z32_4trig:
  594|  84.2k|    pub fn write_quad<'a>(&mut self, q: impl Into<QuadRef<'a>>) -> io::Result<()> {
  595|  84.2k|        self.writer.write_quad(q, &mut self.write)
  596|  84.2k|    }
_RINvMs4_NtCscuJmoqhSOSr_5oxttl4trigNtB6_18LowLevelTriGWriter10write_quadRNtNtCs5bua6W9iSBw_5oxrdf6triple4QuadQINtNtCs15NWbik7Z2V_5alloc3vec3VechEECs3ABq5th2z32_4trig:
  682|  84.2k|    pub fn write_quad<'a>(
  683|  84.2k|        &mut self,
  684|  84.2k|        q: impl Into<QuadRef<'a>>,
  685|  84.2k|        mut write: impl Write,
  686|  84.2k|    ) -> io::Result<()> {
  687|  84.2k|        let q = q.into();
  688|  84.2k|        if q.graph_name == self.current_graph_name.as_ref() {
  689|  79.9k|            if let Some((current_subject, current_predicate)) =
  690|  82.3k|                self.current_subject_predicate.take()
  691|       |            {
  692|  79.9k|                if q.subject == current_subject.as_ref() {
  693|  14.2k|                    if q.predicate == current_predicate {
  694|  5.95k|                        self.current_subject_predicate = Some((current_subject, current_predicate));
  695|  5.95k|                        write!(write, " , {}", TurtleTerm(q.object))
  696|       |                    } else {
  697|  8.32k|                        self.current_subject_predicate =
  698|  8.32k|                            Some((current_subject, q.predicate.into_owned()));
  699|  8.32k|                        writeln!(write, " ;")?;
  700|  8.32k|                        if !self.current_graph_name.is_default_graph() {
  701|    942|                            write!(write, "\t")?;
  702|  7.38k|                        }
  703|  8.32k|                        write!(write, "\t{} {}", q.predicate, TurtleTerm(q.object))
  704|       |                    }
  705|       |                } else {
  706|  65.6k|                    self.current_subject_predicate =
  707|  65.6k|                        Some((q.subject.into_owned(), q.predicate.into_owned()));
  708|  65.6k|                    writeln!(write, " .")?;
  709|  65.6k|                    if !self.current_graph_name.is_default_graph() {
  710|  10.4k|                        write!(write, "\t")?;
  711|  55.2k|                    }
  712|  65.6k|                    write!(
  713|  65.6k|                        write,
  714|  65.6k|                        "{} {} {}",
  715|  65.6k|                        TurtleTerm(q.subject.into()),
  716|  65.6k|                        q.predicate,
  717|  65.6k|                        TurtleTerm(q.object)
  718|  65.6k|                    )
  719|       |                }
  720|       |            } else {
  721|  2.42k|                self.current_subject_predicate =
  722|  2.42k|                    Some((q.subject.into_owned(), q.predicate.into_owned()));
  723|  2.42k|                if !self.current_graph_name.is_default_graph() {
  724|      0|                    write!(write, "\t")?;
  725|  2.42k|                }
  726|  2.42k|                write!(
  727|  2.42k|                    write,
  728|  2.42k|                    "{} {} {}",
  729|  2.42k|                    TurtleTerm(q.subject.into()),
  730|  2.42k|                    q.predicate,
  731|  2.42k|                    TurtleTerm(q.object)
  732|  2.42k|                )
  733|       |            }
  734|       |        } else {
  735|  1.95k|            if self.current_subject_predicate.is_some() {
  736|  1.58k|                writeln!(write, " .")?;
  737|    373|            }
  738|  1.95k|            if !self.current_graph_name.is_default_graph() {
  739|    902|                writeln!(write, "}}")?;
  740|  1.05k|            }
  741|  1.95k|            self.current_graph_name = q.graph_name.into_owned();
  742|  1.95k|            self.current_subject_predicate =
  743|  1.95k|                Some((q.subject.into_owned(), q.predicate.into_owned()));
  744|  1.95k|            if !self.current_graph_name.is_default_graph() {
  745|  1.26k|                writeln!(write, "{} {{", q.graph_name)?;
  746|  1.26k|                write!(write, "\t")?;
  747|    686|            }
  748|  1.95k|            write!(
  749|  1.95k|                write,
  750|  1.95k|                "{} {} {}",
  751|  1.95k|                TurtleTerm(q.subject.into()),
  752|  1.95k|                q.predicate,
  753|  1.95k|                TurtleTerm(q.object)
  754|  1.95k|            )
  755|       |        }
  756|  84.2k|    }
_RINvMs4_NtCscuJmoqhSOSr_5oxttl4trigNtB6_18LowLevelTriGWriter6finishQINtNtCs15NWbik7Z2V_5alloc3vec3VechEECs3ABq5th2z32_4trig:
  759|  5.73k|    pub fn finish(&mut self, mut write: impl Write) -> io::Result<()> {
  760|  5.73k|        if self.current_subject_predicate.is_some() {
  761|  2.79k|            writeln!(write, " .")?;
  762|  2.94k|        }
  763|  5.73k|        if !self.current_graph_name.is_default_graph() {
  764|    367|            writeln!(write, "}}")?;
  765|  5.36k|        }
  766|  5.73k|        Ok(())
  767|  5.73k|    }
_RNvMs3_NtCscuJmoqhSOSr_5oxttl4trigINtB5_17ToWriteTriGWriterINtNtCs15NWbik7Z2V_5alloc3vec3VechEE6finishCs3ABq5th2z32_4trig:
  599|  5.73k|    pub fn finish(mut self) -> io::Result<W> {
  600|  5.73k|        self.writer.finish(&mut self.write)?;
  601|  5.73k|        Ok(self.write)
  602|  5.73k|    }
_RNvXs0_NtCscuJmoqhSOSr_5oxttl4trigINtB5_18FromReadTriGReaderRShENtNtNtNtCsjv2Y2xFO4ua_4core4iter6traits8iterator8Iterator4nextCs3ABq5th2z32_4trig:
  276|  90.0k|    fn next(&mut self) -> Option<Result<Quad, ParseError>> {
  277|  90.0k|        self.inner.next()
  278|  90.0k|    }
_RNvMNtCscuJmoqhSOSr_5oxttl4trigNtB2_10TriGParser19with_quoted_triplesCs3ABq5th2z32_4trig:
   91|  22.9k|    pub fn with_quoted_triples(mut self) -> Self {
   92|  22.9k|        self.with_quoted_triples = true;
   93|  22.9k|        self
   94|  22.9k|    }
_RNvMNtCscuJmoqhSOSr_5oxttl4trigNtB2_10TriGParser3newCs3ABq5th2z32_4trig:
   56|  22.9k|    pub fn new() -> Self {
   57|  22.9k|        Self::default()
   58|  22.9k|    }
_RNvMNtCscuJmoqhSOSr_5oxttl4trigNtB2_10TriGParser9uncheckedCs3ABq5th2z32_4trig:
   66|  5.73k|    pub fn unchecked(mut self) -> Self {
   67|  5.73k|        self.unchecked = true;
   68|  5.73k|        self
   69|  5.73k|    }
_RNvMs2_NtCscuJmoqhSOSr_5oxttl4trigNtB5_14TriGSerializer3newCs3ABq5th2z32_4trig:
  473|  5.73k|    pub fn new() -> Self {
  474|  5.73k|        Self
  475|  5.73k|    }
_RNvXs6_NtCscuJmoqhSOSr_5oxttl4trigNtB5_10TriGParserNtNtCsjv2Y2xFO4ua_4core7default7Default7defaultCs3ABq5th2z32_4trig:
   43|  22.9k|#[derive(Default)]
_RNvMNtCscuJmoqhSOSr_5oxttl4trigNtB2_10TriGParser5parse:
  202|  22.9k|    pub fn parse(self) -> LowLevelTriGReader {
  203|  22.9k|        LowLevelTriGReader {
  204|  22.9k|            parser: TriGRecognizer::new_parser(
  205|  22.9k|                true,
  206|  22.9k|                #[cfg(feature = "rdf-star")]
  207|  22.9k|                self.with_quoted_triples,
  208|  22.9k|                self.unchecked,
  209|  22.9k|                self.base,
  210|  22.9k|                self.prefixes,
  211|  22.9k|            ),
  212|  22.9k|        }
  213|  22.9k|    }
_RNvMs1_NtCscuJmoqhSOSr_5oxttl4trigNtB5_18LowLevelTriGReader17extend_from_slice:
  394|  1.45M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  395|  1.45M|        self.parser.extend_from_slice(other)
  396|  1.45M|    }
_RNvMs1_NtCscuJmoqhSOSr_5oxttl4trigNtB5_18LowLevelTriGReader3end:
  401|  17.2k|    pub fn end(&mut self) {
  402|  17.2k|        self.parser.end()
  403|  17.2k|    }
_RNvMs1_NtCscuJmoqhSOSr_5oxttl4trigNtB5_18LowLevelTriGReader6is_end:
  406|  17.2k|    pub fn is_end(&self) -> bool {
  407|  17.2k|        self.parser.is_end()
  408|  17.2k|    }
_RNvMs1_NtCscuJmoqhSOSr_5oxttl4trigNtB5_18LowLevelTriGReader9read_next:
  414|  3.29M|    pub fn read_next(&mut self) -> Option<Result<Quad, SyntaxError>> {
  415|  3.29M|        self.parser.read_next()
  416|  3.29M|    }
_RNvMs2_NtCscuJmoqhSOSr_5oxttl4trigNtB5_14TriGSerializer9serialize:
  559|  5.73k|    pub fn serialize(&self) -> LowLevelTriGWriter {
  560|  5.73k|        LowLevelTriGWriter {
  561|  5.73k|            current_graph_name: GraphName::DefaultGraph,
  562|  5.73k|            current_subject_predicate: None,
  563|  5.73k|        }
  564|  5.73k|    }
_RNvXs5_NtCscuJmoqhSOSr_5oxttl4trigNtB5_10TurtleTermNtNtCsjv2Y2xFO4ua_4core3fmt7Display3fmt:
  773|   155k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  774|   155k|        match self.0 {
  775|  13.5k|            TermRef::NamedNode(v) => write!(f, "{v}"),
  776|   111k|            TermRef::BlankNode(v) => write!(f, "{v}"),
  777|  29.8k|            TermRef::Literal(v) => {
  778|  29.8k|                let value = v.value();
  779|  29.8k|                let inline = match v.datatype() {
  780|  29.8k|                    xsd::BOOLEAN => is_turtle_boolean(value),
  781|  29.6k|                    xsd::INTEGER => is_turtle_integer(value),
  782|  11.7k|                    xsd::DECIMAL => is_turtle_decimal(value),
  783|  10.1k|                    xsd::DOUBLE => is_turtle_double(value),
  784|  4.43k|                    _ => false,
  785|       |                };
  786|  29.8k|                if inline {
  787|  25.4k|                    write!(f, "{value}")
  788|       |                } else {
  789|  4.43k|                    write!(f, "{v}")
  790|       |                }
  791|       |            }
  792|       |            #[cfg(feature = "rdf-star")]
  793|    780|            TermRef::Triple(t) => {
  794|    780|                write!(
  795|    780|                    f,
  796|    780|                    "<< {} {} {} >>",
  797|    780|                    TurtleTerm(t.subject.as_ref().into()),
  798|    780|                    t.predicate,
  799|    780|                    TurtleTerm(t.object.as_ref())
  800|    780|                )
  801|       |            }
  802|       |        }
  803|   155k|    }
_RNvNtCscuJmoqhSOSr_5oxttl4trig17is_turtle_boolean:
  806|    200|fn is_turtle_boolean(value: &str) -> bool {
  807|    200|    matches!(value, "true" | "false")
  808|    200|}
_RNvNtCscuJmoqhSOSr_5oxttl4trig17is_turtle_integer:
  810|  17.9k|fn is_turtle_integer(value: &str) -> bool {
  811|  17.9k|    // [19] 	INTEGER 	::= 	[+-]? [0-9]+
  812|  17.9k|    let mut value = value.as_bytes();
  813|  17.9k|    if let Some(v) = value.strip_prefix(b"+") {
  814|  2.98k|        value = v;
  815|  14.9k|    } else if let Some(v) = value.strip_prefix(b"-") {
  816|     25|        value = v;
  817|  14.8k|    }
  818|  17.9k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  819|  17.9k|}
_RNvNtCscuJmoqhSOSr_5oxttl4trig17is_turtle_decimal:
  821|  1.53k|fn is_turtle_decimal(value: &str) -> bool {
  822|  1.53k|    // [20] 	DECIMAL 	::= 	[+-]? [0-9]* '.' [0-9]+
  823|  1.53k|    let mut value = value.as_bytes();
  824|  1.53k|    if let Some(v) = value.strip_prefix(b"+") {
  825|     96|        value = v;
  826|  1.44k|    } else if let Some(v) = value.strip_prefix(b"-") {
  827|     63|        value = v;
  828|  1.37k|    }
  829|  2.94k|    while value.first().map_or(false, u8::is_ascii_digit) {
  830|  1.41k|        value = &value[1..];
  831|  1.41k|    }
  832|  1.53k|    let Some(value) = value.strip_prefix(b".") else {
  833|      0|        return false;
  834|       |    };
  835|  1.53k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  836|  1.53k|}
_RNvNtCscuJmoqhSOSr_5oxttl4trig16is_turtle_double:
  838|  5.76k|fn is_turtle_double(value: &str) -> bool {
  839|  5.76k|    // [21] 	DOUBLE 	::= 	[+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  840|  5.76k|    // [154s] 	EXPONENT 	::= 	[eE] [+-]? [0-9]+
  841|  5.76k|    let mut value = value.as_bytes();
  842|  5.76k|    if let Some(v) = value.strip_prefix(b"+") {
  843|     17|        value = v;
  844|  5.74k|    } else if let Some(v) = value.strip_prefix(b"-") {
  845|     57|        value = v;
  846|  5.69k|    }
  847|  5.76k|    let mut with_before = false;
  848|  24.2k|    while value.first().map_or(false, u8::is_ascii_digit) {
  849|  18.4k|        value = &value[1..];
  850|  18.4k|        with_before = true;
  851|  18.4k|    }
  852|  5.76k|    let mut with_after = false;
  853|  5.76k|    if let Some(v) = value.strip_prefix(b".") {
  854|    242|        value = v;
  855|  7.12k|        while value.first().map_or(false, u8::is_ascii_digit) {
  856|  6.87k|            value = &value[1..];
  857|  6.87k|            with_after = true;
  858|  6.87k|        }
  859|  5.52k|    }
  860|  5.76k|    if let Some(v) = value.strip_prefix(b"e") {
  861|     87|        value = v;
  862|  5.67k|    } else if let Some(v) = value.strip_prefix(b"E") {
  863|  5.67k|        value = v;
  864|  5.67k|    } else {
  865|      0|        return false;
  866|       |    }
  867|  5.76k|    if let Some(v) = value.strip_prefix(b"+") {
  868|     18|        value = v;
  869|  5.74k|    } else if let Some(v) = value.strip_prefix(b"-") {
  870|     21|        value = v;
  871|  5.72k|    }
  872|  5.76k|    (with_before || with_after) && !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  873|  5.76k|}


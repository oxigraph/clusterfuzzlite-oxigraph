






























_RNvCs2DHbc2bL5F1_4trig24count_triple_blank_nodes:
   49|  1.98M|fn count_triple_blank_nodes(triple: &Triple) -> usize {
   50|  1.98M|    (match &triple.subject {
   51|    655|        Subject::BlankNode(_) => 1,
   52|  1.89M|        Subject::Triple(t) => count_triple_blank_nodes(t),
   53|  82.0k|        _ => 0,
   54|  1.98M|    }) + (match &triple.object {
   55|  1.17k|        Term::BlankNode(_) => 1,
   56|     54|        Term::Triple(t) => count_triple_blank_nodes(t),
   57|  1.97M|        _ => 0,
   58|       |    })
   59|  1.98M|}
_RNvCs2DHbc2bL5F1_4trig22count_quad_blank_nodes:
   61|   192k|fn count_quad_blank_nodes(quad: &Quad) -> usize {
   62|   192k|    (match &quad.subject {
   63|  90.9k|        Subject::BlankNode(_) => 1,
   64|  80.7k|        Subject::Triple(t) => count_triple_blank_nodes(t),
   65|  20.4k|        _ => 0,
   66|   192k|    }) + (match &quad.object {
   67|  70.4k|        Term::BlankNode(_) => 1,
   68|  1.94k|        Term::Triple(t) => count_triple_blank_nodes(t),
   69|   119k|        _ => 0,
   70|   192k|    }) + usize::from(matches!(quad.graph_name, GraphName::BlankNode(_)))
   71|   192k|}
_RNvCs2DHbc2bL5F1_4trig15serialize_quads:
   73|  8.37k|fn serialize_quads(quads: &[Quad], prefixes: Vec<(String, String)>) -> Vec<u8> {
   74|  8.37k|    let mut serializer = TriGSerializer::new();
   75|  9.70k|    for (prefix_name, prefix_iri) in prefixes {
   76|  1.32k|        serializer = serializer.with_prefix(prefix_name, prefix_iri).unwrap();
   77|  1.32k|    }
   78|  8.37k|    let mut writer = serializer.serialize_to_write(Vec::new());
   79|   200k|    for quad in quads {
   80|   192k|        writer.write_quad(quad).unwrap();
   81|   192k|    }
   82|  8.37k|    writer.finish().unwrap()
   83|  8.37k|}
_RINvCs2DHbc2bL5F1_4trig5parseARShj1_EB2_:
    8|  8.37k|fn parse<'a>(
    9|  8.37k|    chunks: impl IntoIterator<Item = &'a [u8]>,
   10|  8.37k|    unchecked: bool,
   11|  8.37k|) -> (Vec<Quad>, Vec<String>, Vec<(String, String)>) {
   12|  8.37k|    let mut quads = Vec::new();
   13|  8.37k|    let mut errors = Vec::new();
   14|  8.37k|    let mut parser = TriGParser::new()
   15|  8.37k|        .with_quoted_triples()
   16|  8.37k|        .with_base_iri("http://example.com/")
   17|  8.37k|        .unwrap();
   18|  8.37k|    if unchecked {
   19|      0|        parser = parser.unchecked();
   20|  8.37k|    }
   21|  8.37k|    let mut reader = parser.parse();
   22|  16.7k|    for chunk in chunks {
   23|  8.37k|        reader.extend_from_slice(chunk);
   24|   848k|        while let Some(result) = reader.read_next() {
   25|   840k|            match result {
   26|   191k|                Ok(quad) => quads.push(quad),
   27|   648k|                Err(error) => errors.push(error.to_string()),
   28|       |            }
   29|       |        }
   30|       |    }
   31|  8.37k|    reader.end();
   32|  12.9k|    while let Some(result) = reader.read_next() {
   33|  4.55k|        match result {
   34|    189|            Ok(quad) => quads.push(quad),
   35|  4.36k|            Err(error) => errors.push(error.to_string()),
   36|       |        }
   37|       |    }
   38|  8.37k|    assert!(reader.is_end());
   39|  8.37k|    (
   40|  8.37k|        quads,
   41|  8.37k|        errors,
   42|  8.37k|        reader
   43|  8.37k|            .prefixes()
   44|  8.37k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
   45|  8.37k|            .collect(),
   46|  8.37k|    )
   47|  8.37k|}
_RINvCs2DHbc2bL5F1_4trig5parseINtNtNtCscdEvteftVc2_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_run0EEB2_:
    8|  8.37k|fn parse<'a>(
    9|  8.37k|    chunks: impl IntoIterator<Item = &'a [u8]>,
   10|  8.37k|    unchecked: bool,
   11|  8.37k|) -> (Vec<Quad>, Vec<String>, Vec<(String, String)>) {
   12|  8.37k|    let mut quads = Vec::new();
   13|  8.37k|    let mut errors = Vec::new();
   14|  8.37k|    let mut parser = TriGParser::new()
   15|  8.37k|        .with_quoted_triples()
   16|  8.37k|        .with_base_iri("http://example.com/")
   17|  8.37k|        .unwrap();
   18|  8.37k|    if unchecked {
   19|      0|        parser = parser.unchecked();
   20|  8.37k|    }
   21|  8.37k|    let mut reader = parser.parse();
   22|   860k|    for chunk in chunks {
   23|   851k|        reader.extend_from_slice(chunk);
   24|  1.69M|        while let Some(result) = reader.read_next() {
   25|   840k|            match result {
   26|   191k|                Ok(quad) => quads.push(quad),
   27|   648k|                Err(error) => errors.push(error.to_string()),
   28|       |            }
   29|       |        }
   30|       |    }
   31|  8.37k|    reader.end();
   32|  12.9k|    while let Some(result) = reader.read_next() {
   33|  4.55k|        match result {
   34|    189|            Ok(quad) => quads.push(quad),
   35|  4.36k|            Err(error) => errors.push(error.to_string()),
   36|       |        }
   37|       |    }
   38|  8.37k|    assert!(reader.is_end());
   39|  8.37k|    (
   40|  8.37k|        quads,
   41|  8.37k|        errors,
   42|  8.37k|        reader
   43|  8.37k|            .prefixes()
   44|  8.37k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
   45|  8.37k|            .collect(),
   46|  8.37k|    )
   47|  8.37k|}
_RINvCs2DHbc2bL5F1_4trig5parseINtNtNtCscdEvteftVc2_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_runs0_0EEB2_:
    8|  8.37k|fn parse<'a>(
    9|  8.37k|    chunks: impl IntoIterator<Item = &'a [u8]>,
   10|  8.37k|    unchecked: bool,
   11|  8.37k|) -> (Vec<Quad>, Vec<String>, Vec<(String, String)>) {
   12|  8.37k|    let mut quads = Vec::new();
   13|  8.37k|    let mut errors = Vec::new();
   14|  8.37k|    let mut parser = TriGParser::new()
   15|  8.37k|        .with_quoted_triples()
   16|  8.37k|        .with_base_iri("http://example.com/")
   17|  8.37k|        .unwrap();
   18|  8.37k|    if unchecked {
   19|  8.37k|        parser = parser.unchecked();
   20|  8.37k|    }
   21|  8.37k|    let mut reader = parser.parse();
   22|   860k|    for chunk in chunks {
   23|   851k|        reader.extend_from_slice(chunk);
   24|  1.68M|        while let Some(result) = reader.read_next() {
   25|   834k|            match result {
   26|   200k|                Ok(quad) => quads.push(quad),
   27|   633k|                Err(error) => errors.push(error.to_string()),
   28|       |            }
   29|       |        }
   30|       |    }
   31|  8.37k|    reader.end();
   32|  13.0k|    while let Some(result) = reader.read_next() {
   33|  4.67k|        match result {
   34|    208|            Ok(quad) => quads.push(quad),
   35|  4.46k|            Err(error) => errors.push(error.to_string()),
   36|       |        }
   37|       |    }
   38|  8.37k|    assert!(reader.is_end());
   39|  8.37k|    (
   40|  8.37k|        quads,
   41|  8.37k|        errors,
   42|  8.37k|        reader
   43|  8.37k|            .prefixes()
   44|  8.37k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
   45|  8.37k|            .collect(),
   46|  8.37k|    )
   47|  8.37k|}
_RNCINvCs2DHbc2bL5F1_4trig5parseARShj1_E0B4_:
   44|  1.32k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
_RNCINvCs2DHbc2bL5F1_4trig5parseINtNtNtCscdEvteftVc2_4core5slice4iter5SplithNCNvNvB4_1__19___libfuzzer_sys_run0EE0B4_:
   44|  1.32k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
_RNCINvCs2DHbc2bL5F1_4trig5parseINtNtNtCscdEvteftVc2_4core5slice4iter5SplithNCNvNvB4_1__19___libfuzzer_sys_runs0_0EE0B4_:
   44|  1.56k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
_RNCNvNvCs2DHbc2bL5F1_4trig1__19___libfuzzer_sys_run0B5_:
   87|  5.33M|    let (quads, errors, prefixes) = parse(data.split(|c| *c == 0xFF), false);
_RNCNvNvCs2DHbc2bL5F1_4trig1__19___libfuzzer_sys_runs_0B5_:
   93|  5.33M|            .filter(|c| *c != 0xFF)
_RNCNvNvCs2DHbc2bL5F1_4trig1__19___libfuzzer_sys_runs0_0B5_:
   98|  5.33M|    let (quads_unchecked, errors_unchecked, _) = parse(data.split(|c| *c == 0xFF), true);














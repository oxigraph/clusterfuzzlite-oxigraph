_RINvMNtCscERdDH3tcAN_9getrandom4lazyNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   34|    305|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   35|    305|        // Relaxed ordering is fine, as we only have a single atomic variable.
   36|    305|        let mut val = self.0.load(Relaxed);
   37|    305|        if val == Self::UNINIT {
   38|      1|            val = init();
   39|      1|            self.0.store(val, Relaxed);
   40|    304|        }
   41|    305|        val
   42|    305|    }
_RINvMs_NtCscERdDH3tcAN_9getrandom4lazyNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   53|    305|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   54|    305|        self.0.unsync_init(|| init() as usize) != 0
   55|    305|    }
_RNCINvMs_NtCscERdDH3tcAN_9getrandom4lazyNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   54|      1|        self.0.unsync_init(|| init() as usize) != 0

_RNvCscERdDH3tcAN_9getrandom16getrandom_uninitCslOyDhRs1mlx_9rand_core:
  345|    305|pub fn getrandom_uninit(dest: &mut [MaybeUninit<u8>]) -> Result<&mut [u8], Error> {
  346|    305|    if !dest.is_empty() {
  347|    305|        imp::getrandom_inner(dest)?;
  348|      0|    }
  349|       |    // SAFETY: `dest` has been fully initialized by `imp::getrandom_inner`
  350|       |    // since it returned `Ok`.
  351|    305|    Ok(unsafe { slice_assume_init_mut(dest) })
  352|    305|}
_RNvCscERdDH3tcAN_9getrandom9getrandomCslOyDhRs1mlx_9rand_core:
  315|    305|pub fn getrandom(dest: &mut [u8]) -> Result<(), Error> {
  316|    305|    // SAFETY: The `&mut MaybeUninit<_>` reference doesn't escape, and
  317|    305|    // `getrandom_uninit` guarantees it will never de-initialize any part of
  318|    305|    // `dest`.
  319|    305|    getrandom_uninit(unsafe { slice_as_uninit_mut(dest) })?;
  320|    305|    Ok(())
  321|    305|}

_RNvNtCscERdDH3tcAN_9getrandom3imp15getrandom_inner:
    9|    305|pub fn getrandom_inner(dest: &mut [MaybeUninit<u8>]) -> Result<(), Error> {
   10|    305|    // getrandom(2) was introduced in Linux 3.17
   11|    305|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   12|    305|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   13|    305|        sys_fill_exact(dest, |buf| unsafe {
   14|       |            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   15|    305|        })
   16|       |    } else {
   17|      0|        use_file::getrandom_inner(dest)
   18|       |    }
   19|    305|}
_RNCNvNtCscERdDH3tcAN_9getrandom3imp15getrandom_inner0B5_:
   13|    305|        sys_fill_exact(dest, |buf| unsafe {
   14|    305|            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   15|    305|        })
_RNvNtCscERdDH3tcAN_9getrandom3imp22is_getrandom_available:
   21|      1|fn is_getrandom_available() -> bool {
   22|      1|    let res = unsafe { getrandom(core::ptr::null_mut(), 0, libc::GRND_NONBLOCK) };
   23|      1|    if res < 0 {
   24|      0|        match last_os_error().raw_os_error() {
   25|      0|            Some(libc::ENOSYS) => false, // No kernel support
   26|      0|            Some(libc::EPERM) => false,  // Blocked by seccomp
   27|      0|            _ => true,
   28|       |        }
   29|       |    } else {
   30|      1|        true
   31|       |    }
   32|      1|}
_RNvNtCscERdDH3tcAN_9getrandom3imp9getrandom:
   34|    306|unsafe fn getrandom(
   35|    306|    buf: *mut libc::c_void,
   36|    306|    buflen: libc::size_t,
   37|    306|    flags: libc::c_uint,
   38|    306|) -> libc::ssize_t {
   39|    306|    libc::syscall(libc::SYS_getrandom, buf, buflen, flags) as libc::ssize_t
   40|    306|}

_RINvNtCscERdDH3tcAN_9getrandom4util19slice_as_uninit_muthECslOyDhRs1mlx_9rand_core:
   32|    305|pub unsafe fn slice_as_uninit_mut<T>(slice: &mut [T]) -> &mut [MaybeUninit<T>] {
   33|    305|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   34|    305|    &mut *(slice as *mut [T] as *mut [MaybeUninit<T>])
   35|    305|}
_RINvNtCscERdDH3tcAN_9getrandom4util21slice_assume_init_muthECslOyDhRs1mlx_9rand_core:
    8|    305|pub unsafe fn slice_assume_init_mut<T>(slice: &mut [MaybeUninit<T>]) -> &mut [T] {
    9|    305|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   10|    305|    &mut *(slice as *mut [MaybeUninit<T>] as *mut [T])
   11|    305|}

_RINvNtCscERdDH3tcAN_9getrandom9util_libc14sys_fill_exactNCNvNtB4_3imp15getrandom_inner0EB4_:
   59|    305|pub fn sys_fill_exact(
   60|    305|    mut buf: &mut [MaybeUninit<u8>],
   61|    305|    sys_fill: impl Fn(&mut [MaybeUninit<u8>]) -> libc::ssize_t,
   62|    305|) -> Result<(), Error> {
   63|    610|    while !buf.is_empty() {
   64|    305|        let res = sys_fill(buf);
   65|    305|        match res {
   66|    305|            res if res > 0 => buf = buf.get_mut(res as usize..).ok_or(Error::UNEXPECTED)?,
   67|       |            -1 => {
   68|      0|                let err = last_os_error();
   69|      0|                // We should try again if the call was interrupted.
   70|      0|                if err.raw_os_error() != Some(libc::EINTR) {
   71|      0|                    return Err(err);
   72|      0|                }
   73|       |            }
   74|       |            // Negative return codes not equal to -1 should be impossible.
   75|       |            // EOF (ret = 0) should be impossible, as the data we are reading
   76|       |            // should be an infinite stream of random bytes.
   77|      0|            _ => return Err(Error::UNEXPECTED),
   78|       |        }
   79|       |    }
   80|    305|    Ok(())
   81|    305|}

rust_fuzzer_test_input:
  209|  17.0k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  17.0k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  17.0k|                }
  223|  17.0k|
  224|  17.0k|                __libfuzzer_sys_run(bytes);
  225|  17.0k|                0
  226|       |            }
_RNvNvCsgNaHgHERLlN_4trig1__19___libfuzzer_sys_run:
  241|  17.0k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|       |            }
LLVMFuzzerTestOneInput:
   58|  17.0k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  17.0k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  17.0k|    });
   63|  17.0k|
   64|  17.0k|    match test_input {
   65|  17.0k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  17.0k|}
_RNCNvCs7RglK7baKIt_13libfuzzer_sys15test_input_wrap0B3_:
   59|  17.0k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  17.0k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  17.0k|        rust_fuzzer_test_input(data_slice)
   62|  17.0k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvMs3_NtNtNtCsjWXOcHgrJZQ_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCslA8OvuvDMgt_4core4iter6traits8iterator8Iterator4next0ECs2uQIyP4qcLL_5oxttl:
 1044|  30.4M|    pub(crate) unsafe fn next(
 1045|  30.4M|        &mut self,
 1046|  30.4M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  30.4M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  30.4M|        let found = find_raw(self.start, self.end)?;
 1057|   145k|        let result = found.distance(self.original_start);
 1058|   145k|        self.start = found.add(1);
 1059|   145k|        Some(result)
 1060|  30.4M|    }
_RINvNtNtNtCsjWXOcHgrJZQ_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECs2uQIyP4qcLL_5oxttl:
 1125|  40.7k|pub(crate) unsafe fn search_slice_with_raw(
 1126|  40.7k|    haystack: &[u8],
 1127|  40.7k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  40.7k|) -> Option<usize> {
 1129|  40.7k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  40.7k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  40.7k|    // a &[u8].
 1132|  40.7k|    let start = haystack.as_ptr();
 1133|  40.7k|    let end = start.add(haystack.len());
 1134|  40.7k|    let found = find_raw(start, end)?;
 1135|  13.1k|    Some(found.distance(start))
 1136|  40.7k|}
_RINvNtNtNtCsjWXOcHgrJZQ_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr7memchr20ECs2uQIyP4qcLL_5oxttl:
 1125|  3.82M|pub(crate) unsafe fn search_slice_with_raw(
 1126|  3.82M|    haystack: &[u8],
 1127|  3.82M|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  3.82M|) -> Option<usize> {
 1129|  3.82M|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  3.82M|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  3.82M|    // a &[u8].
 1132|  3.82M|    let start = haystack.as_ptr();
 1133|  3.82M|    let end = start.add(haystack.len());
 1134|  3.82M|    let found = find_raw(start, end)?;
 1135|  2.66M|    Some(found.distance(start))
 1136|  3.82M|}
_RNvMs3_NtNtNtCsjWXOcHgrJZQ_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  30.3M|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  30.3M|        Iter {
 1029|  30.3M|            original_start: haystack.as_ptr(),
 1030|  30.3M|            start: haystack.as_ptr(),
 1031|  30.3M|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  30.3M|            haystack: core::marker::PhantomData,
 1033|  30.3M|        }
 1034|  30.3M|    }
_RNvMNtNtNtCsjWXOcHgrJZQ_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCslA8OvuvDMgt_4core9core_arch3x867___m128iE7needle1B8_:
  117|  56.1k|    pub(crate) fn needle1(&self) -> u8 {
  118|  56.1k|        self.s1
  119|  56.1k|    }
_RNvMNtNtNtCsjWXOcHgrJZQ_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCslA8OvuvDMgt_4core9core_arch3x867___m128iE3newB8_:
  111|  40.7k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  40.7k|        One { s1: needle, v1: V::splat(needle) }
  113|  40.7k|    }
_RNvMNtNtNtCsjWXOcHgrJZQ_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCslA8OvuvDMgt_4core9core_arch3x867___m256iE3newB8_:
  111|  40.7k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  40.7k|        One { s1: needle, v1: V::splat(needle) }
  113|  40.7k|    }
_RNvMNtNtNtCsjWXOcHgrJZQ_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCslA8OvuvDMgt_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  6.56k|    pub(crate) unsafe fn find_raw(
  144|  6.56k|        &self,
  145|  6.56k|        start: *const u8,
  146|  6.56k|        end: *const u8,
  147|  6.56k|    ) -> Option<*const u8> {
  148|  6.56k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  6.56k|        // need to move up to using a u64 for the masks used below. Currently
  150|  6.56k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  6.56k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  6.56k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  6.56k|        let topos = V::Mask::first_offset;
  155|  6.56k|        let len = end.distance(start);
  156|  6.56k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  6.56k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|    194|            return Some(cur);
  167|  6.36k|        }
  168|  6.36k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  6.36k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  6.36k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  6.36k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  6.36k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  8.87k|        while cur <= end.sub(V::BYTES) {
  213|  2.63k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  2.63k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    126|                return Some(cur);
  216|  2.50k|            }
  217|  2.50k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  6.24k|        if cur < end {
  224|  5.81k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  5.81k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  5.81k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  5.81k|            return self.search_chunk(cur, topos);
  228|    432|        }
  229|    432|        None
  230|  6.56k|    }
_RNvMNtNtNtCsjWXOcHgrJZQ_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCslA8OvuvDMgt_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  23.0k|    pub(crate) unsafe fn find_raw(
  144|  23.0k|        &self,
  145|  23.0k|        start: *const u8,
  146|  23.0k|        end: *const u8,
  147|  23.0k|    ) -> Option<*const u8> {
  148|  23.0k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  23.0k|        // need to move up to using a u64 for the masks used below. Currently
  150|  23.0k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  23.0k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  23.0k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  23.0k|        let topos = V::Mask::first_offset;
  155|  23.0k|        let len = end.distance(start);
  156|  23.0k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  23.0k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  11.2k|            return Some(cur);
  167|  11.7k|        }
  168|  11.7k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  11.7k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  11.7k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  11.7k|        if len >= Self::LOOP_SIZE {
  172|  10.0k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|  5.17k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|  5.17k|                let a = V::load_aligned(cur);
  176|  5.17k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|  5.17k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|  5.17k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|  5.17k|                let eqa = self.v1.cmpeq(a);
  180|  5.17k|                let eqb = self.v1.cmpeq(b);
  181|  5.17k|                let eqc = self.v1.cmpeq(c);
  182|  5.17k|                let eqd = self.v1.cmpeq(d);
  183|  5.17k|                let or1 = eqa.or(eqb);
  184|  5.17k|                let or2 = eqc.or(eqd);
  185|  5.17k|                let or3 = or1.or(or2);
  186|  5.17k|                if or3.movemask_will_have_non_zero() {
  187|    589|                    let mask = eqa.movemask();
  188|    589|                    if mask.has_non_zero() {
  189|    104|                        return Some(cur.add(topos(mask)));
  190|    485|                    }
  191|    485|
  192|    485|                    let mask = eqb.movemask();
  193|    485|                    if mask.has_non_zero() {
  194|    257|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|    228|                    }
  196|    228|
  197|    228|                    let mask = eqc.movemask();
  198|    228|                    if mask.has_non_zero() {
  199|    116|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|    112|                    }
  201|    112|
  202|    112|                    let mask = eqd.movemask();
  203|    112|                    debug_assert!(mask.has_non_zero());
  204|    112|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  4.58k|                }
  206|  4.58k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  6.36k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  26.1k|        while cur <= end.sub(V::BYTES) {
  213|  15.1k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  15.1k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    232|                return Some(cur);
  216|  14.9k|            }
  217|  14.9k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  10.9k|        if cur < end {
  224|  10.3k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  10.3k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  10.3k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  10.3k|            return self.search_chunk(cur, topos);
  228|    608|        }
  229|    608|        None
  230|  23.0k|    }
_RINvMNtNtNtCsjWXOcHgrJZQ_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCslA8OvuvDMgt_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  15.0k|    unsafe fn search_chunk(
  417|  15.0k|        &self,
  418|  15.0k|        cur: *const u8,
  419|  15.0k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  15.0k|    ) -> Option<*const u8> {
  421|  15.0k|        let chunk = V::load_unaligned(cur);
  422|  15.0k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  15.0k|        if mask.has_non_zero() {
  424|    446|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  14.5k|            None
  427|       |        }
  428|  15.0k|    }
_RINvMNtNtNtCsjWXOcHgrJZQ_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCslA8OvuvDMgt_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  48.6k|    unsafe fn search_chunk(
  417|  48.6k|        &self,
  418|  48.6k|        cur: *const u8,
  419|  48.6k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  48.6k|    ) -> Option<*const u8> {
  421|  48.6k|        let chunk = V::load_unaligned(cur);
  422|  48.6k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  48.6k|        if mask.has_non_zero() {
  424|  11.7k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  36.8k|            None
  427|       |        }
  428|  48.6k|    }
_RNvMs_NtNtNtCsjWXOcHgrJZQ_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCslA8OvuvDMgt_4core9core_arch3x867___m128iE3newBa_:
  450|  34.3M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  34.3M|        Two {
  452|  34.3M|            s1: needle1,
  453|  34.3M|            s2: needle2,
  454|  34.3M|            v1: V::splat(needle1),
  455|  34.3M|            v2: V::splat(needle2),
  456|  34.3M|        }
  457|  34.3M|    }
_RNvMs_NtNtNtCsjWXOcHgrJZQ_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCslA8OvuvDMgt_4core9core_arch3x867___m256iE3newBa_:
  450|  34.3M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  34.3M|        Two {
  452|  34.3M|            s1: needle1,
  453|  34.3M|            s2: needle2,
  454|  34.3M|            v1: V::splat(needle1),
  455|  34.3M|            v2: V::splat(needle2),
  456|  34.3M|        }
  457|  34.3M|    }
_RNvMs_NtNtNtCsjWXOcHgrJZQ_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCslA8OvuvDMgt_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  45.7M|    pub(crate) fn needle1(&self) -> u8 {
  462|  45.7M|        self.s1
  463|  45.7M|    }
_RNvMs_NtNtNtCsjWXOcHgrJZQ_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCslA8OvuvDMgt_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  45.4M|    pub(crate) fn needle2(&self) -> u8 {
  468|  45.4M|        self.s2
  469|  45.4M|    }
_RNvMs_NtNtNtCsjWXOcHgrJZQ_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCslA8OvuvDMgt_4core9core_arch3x867___m128iE8find_rawBa_:
  493|  1.01M|    pub(crate) unsafe fn find_raw(
  494|  1.01M|        &self,
  495|  1.01M|        start: *const u8,
  496|  1.01M|        end: *const u8,
  497|  1.01M|    ) -> Option<*const u8> {
  498|  1.01M|        // If we want to support vectors bigger than 256 bits, we probably
  499|  1.01M|        // need to move up to using a u64 for the masks used below. Currently
  500|  1.01M|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|  1.01M|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|  1.01M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  1.01M|        let topos = V::Mask::first_offset;
  505|  1.01M|        let len = end.distance(start);
  506|  1.01M|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  1.01M|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   217k|            return Some(cur);
  517|   801k|        }
  518|   801k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   801k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|   801k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   801k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   801k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  1.09M|        while cur <= end.sub(V::BYTES) {
  551|   311k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   311k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  23.2k|                return Some(cur);
  554|   288k|            }
  555|   288k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   778k|        if cur < end {
  562|   730k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   730k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|   730k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   730k|            return self.search_chunk(cur, topos);
  566|  48.2k|        }
  567|  48.2k|        None
  568|  1.01M|    }
_RNvMs_NtNtNtCsjWXOcHgrJZQ_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCslA8OvuvDMgt_4core9core_arch3x867___m256iE8find_rawBa_:
  493|  3.30M|    pub(crate) unsafe fn find_raw(
  494|  3.30M|        &self,
  495|  3.30M|        start: *const u8,
  496|  3.30M|        end: *const u8,
  497|  3.30M|    ) -> Option<*const u8> {
  498|  3.30M|        // If we want to support vectors bigger than 256 bits, we probably
  499|  3.30M|        // need to move up to using a u64 for the masks used below. Currently
  500|  3.30M|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|  3.30M|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|  3.30M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  3.30M|        let topos = V::Mask::first_offset;
  505|  3.30M|        let len = end.distance(start);
  506|  3.30M|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  3.30M|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  1.84M|            return Some(cur);
  517|  1.45M|        }
  518|  1.45M|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  1.45M|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|  1.45M|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  1.45M|        if len >= Self::LOOP_SIZE {
  522|  1.16M|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|   884k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|   884k|                let a = V::load_aligned(cur);
  526|   884k|                let b = V::load_aligned(cur.add(V::BYTES));
  527|   884k|                let eqa1 = self.v1.cmpeq(a);
  528|   884k|                let eqb1 = self.v1.cmpeq(b);
  529|   884k|                let eqa2 = self.v2.cmpeq(a);
  530|   884k|                let eqb2 = self.v2.cmpeq(b);
  531|   884k|                let or1 = eqa1.or(eqb1);
  532|   884k|                let or2 = eqa2.or(eqb2);
  533|   884k|                let or3 = or1.or(or2);
  534|   884k|                if or3.movemask_will_have_non_zero() {
  535|   304k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|   304k|                    if mask.has_non_zero() {
  537|   155k|                        return Some(cur.add(topos(mask)));
  538|   148k|                    }
  539|   148k|
  540|   148k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|   148k|                    debug_assert!(mask.has_non_zero());
  542|   148k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|   580k|                }
  544|   580k|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   872k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  1.56M|        while cur <= end.sub(V::BYTES) {
  551|   430k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   430k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  16.0k|                return Some(cur);
  554|   414k|            }
  555|   414k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|  1.13M|        if cur < end {
  562|  1.10M|            debug_assert!(end.distance(cur) < V::BYTES);
  563|  1.10M|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|  1.10M|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|  1.10M|            return self.search_chunk(cur, topos);
  566|  33.8k|        }
  567|  33.8k|        None
  568|  3.30M|    }
_RINvMs_NtNtNtCsjWXOcHgrJZQ_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCslA8OvuvDMgt_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  2.06M|    unsafe fn search_chunk(
  671|  2.06M|        &self,
  672|  2.06M|        cur: *const u8,
  673|  2.06M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  2.06M|    ) -> Option<*const u8> {
  675|  2.06M|        let chunk = V::load_unaligned(cur);
  676|  2.06M|        let eq1 = self.v1.cmpeq(chunk);
  677|  2.06M|        let eq2 = self.v2.cmpeq(chunk);
  678|  2.06M|        let mask = eq1.or(eq2).movemask();
  679|  2.06M|        if mask.has_non_zero() {
  680|   267k|            let mask1 = eq1.movemask();
  681|   267k|            let mask2 = eq2.movemask();
  682|   267k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  1.79M|            None
  685|       |        }
  686|  2.06M|    }
_RINvMs_NtNtNtCsjWXOcHgrJZQ_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCslA8OvuvDMgt_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  4.84M|    unsafe fn search_chunk(
  671|  4.84M|        &self,
  672|  4.84M|        cur: *const u8,
  673|  4.84M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  4.84M|    ) -> Option<*const u8> {
  675|  4.84M|        let chunk = V::load_unaligned(cur);
  676|  4.84M|        let eq1 = self.v1.cmpeq(chunk);
  677|  4.84M|        let eq2 = self.v2.cmpeq(chunk);
  678|  4.84M|        let mask = eq1.or(eq2).movemask();
  679|  4.84M|        if mask.has_non_zero() {
  680|  1.89M|            let mask1 = eq1.movemask();
  681|  1.89M|            let mask2 = eq2.movemask();
  682|  1.89M|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  2.94M|            None
  685|       |        }
  686|  4.84M|    }
_RINvNtNtNtCsjWXOcHgrJZQ_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  9.21k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  9.21k|    start: *const u8,
 1150|  9.21k|    end: *const u8,
 1151|  9.21k|    confirm: F,
 1152|  9.21k|) -> Option<*const u8> {
 1153|  9.21k|    debug_assert!(start <= end);
 1154|  9.21k|    let mut ptr = start;
 1155|  65.0k|    while ptr < end {
 1156|  56.1k|        if confirm(*ptr) {
 1157|    373|            return Some(ptr);
 1158|  55.7k|        }
 1159|  55.7k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  8.84k|    None
 1162|  9.21k|}
_RINvNtNtNtCsjWXOcHgrJZQ_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|  23.3M|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  23.3M|    start: *const u8,
 1150|  23.3M|    end: *const u8,
 1151|  23.3M|    confirm: F,
 1152|  23.3M|) -> Option<*const u8> {
 1153|  23.3M|    debug_assert!(start <= end);
 1154|  23.3M|    let mut ptr = start;
 1155|  68.7M|    while ptr < end {
 1156|  45.7M|        if confirm(*ptr) {
 1157|   338k|            return Some(ptr);
 1158|  45.3M|        }
 1159|  45.3M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  23.0M|    None
 1162|  23.3M|}

_RNvMNtNtNtNtCsjWXOcHgrJZQ_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  40.7k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  40.7k|        One {
   71|  40.7k|            sse2: generic::One::new(needle),
   72|  40.7k|            avx2: generic::One::new(needle),
   73|  40.7k|        }
   74|  40.7k|    }
_RNvMNtNtNtNtCsjWXOcHgrJZQ_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCsjWXOcHgrJZQ_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  40.7k|    pub unsafe fn find_raw(
  180|  40.7k|        &self,
  181|  40.7k|        start: *const u8,
  182|  40.7k|        end: *const u8,
  183|  40.7k|    ) -> Option<*const u8> {
  184|  40.7k|        if start >= end {
  185|  1.90k|            return None;
  186|  38.8k|        }
  187|  38.8k|        let len = end.distance(start);
  188|  38.8k|        if len < __m256i::BYTES {
  189|  15.7k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  9.21k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  9.21k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  6.56k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  23.0k|        }
  201|  23.0k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  23.0k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  23.0k|        // enough to run on the vector routine. Pointer validity is caller's
  204|  23.0k|        // responsibility.
  205|  23.0k|        //
  206|  23.0k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  23.0k|        // means we'd have to annotate this routine with `target_feature`.
  208|  23.0k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  23.0k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  23.0k|        // The real problem is that a routine with a `target_feature`
  211|  23.0k|        // annotation generally can't be inlined into caller code unless
  212|  23.0k|        // the caller code has the same target feature annotations. Namely,
  213|  23.0k|        // the common case (at time of writing) is for calling code to not
  214|  23.0k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  23.0k|        // `target_feature` on this routine, it can be inlined which will
  216|  23.0k|        // handle some of the short-haystack cases above without touching the
  217|  23.0k|        // architecture specific code.
  218|  23.0k|        self.find_raw_avx2(start, end)
  219|  40.7k|    }
_RNCNvMNtNtNtNtCsjWXOcHgrJZQ_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|  56.1k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|  56.1k|                    b == self.sse2.needle1()
  194|  56.1k|                })
_RNvMNtNtNtNtCsjWXOcHgrJZQ_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  6.56k|    unsafe fn find_raw_sse2(
  337|  6.56k|        &self,
  338|  6.56k|        start: *const u8,
  339|  6.56k|        end: *const u8,
  340|  6.56k|    ) -> Option<*const u8> {
  341|  6.56k|        self.sse2.find_raw(start, end)
  342|  6.56k|    }
_RNvMNtNtNtNtCsjWXOcHgrJZQ_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  23.0k|    unsafe fn find_raw_avx2(
  397|  23.0k|        &self,
  398|  23.0k|        start: *const u8,
  399|  23.0k|        end: *const u8,
  400|  23.0k|    ) -> Option<*const u8> {
  401|  23.0k|        self.avx2.find_raw(start, end)
  402|  23.0k|    }
_RNvMs2_NtNtNtNtCsjWXOcHgrJZQ_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  34.3M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  34.3M|        Two {
  558|  34.3M|            sse2: generic::Two::new(needle1, needle2),
  559|  34.3M|            avx2: generic::Two::new(needle1, needle2),
  560|  34.3M|        }
  561|  34.3M|    }
_RNvMs2_NtNtNtNtCsjWXOcHgrJZQ_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNvMs2_NtNtNtNtCsjWXOcHgrJZQ_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  34.3M|    pub unsafe fn find_raw(
  655|  34.3M|        &self,
  656|  34.3M|        start: *const u8,
  657|  34.3M|        end: *const u8,
  658|  34.3M|    ) -> Option<*const u8> {
  659|  34.3M|        if start >= end {
  660|  6.60M|            return None;
  661|  27.7M|        }
  662|  27.7M|        let len = end.distance(start);
  663|  27.7M|        if len < __m256i::BYTES {
  664|  24.4M|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  23.3M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  23.3M|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|  1.01M|                self.find_raw_sse2(start, end)
  674|       |            };
  675|  3.30M|        }
  676|  3.30M|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|  3.30M|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|  3.30M|        // enough to run on the vector routine. Pointer validity is caller's
  679|  3.30M|        // responsibility.
  680|  3.30M|        //
  681|  3.30M|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|  3.30M|        // means we'd have to annotate this routine with `target_feature`.
  683|  3.30M|        // Which is fine, because this routine is `unsafe` anyway and the
  684|  3.30M|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|  3.30M|        // The real problem is that a routine with a `target_feature`
  686|  3.30M|        // annotation generally can't be inlined into caller code unless
  687|  3.30M|        // the caller code has the same target feature annotations. Namely,
  688|  3.30M|        // the common case (at time of writing) is for calling code to not
  689|  3.30M|        // have the `avx2` target feature enabled *at compile time*. Without
  690|  3.30M|        // `target_feature` on this routine, it can be inlined which will
  691|  3.30M|        // handle some of the short-haystack cases above without touching the
  692|  3.30M|        // architecture specific code.
  693|  3.30M|        self.find_raw_avx2(start, end)
  694|  34.3M|    }
_RNCNvMs2_NtNtNtNtCsjWXOcHgrJZQ_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  45.7M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  45.7M|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  45.7M|                })
_RNvMs2_NtNtNtNtCsjWXOcHgrJZQ_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|  1.01M|    unsafe fn find_raw_sse2(
  765|  1.01M|        &self,
  766|  1.01M|        start: *const u8,
  767|  1.01M|        end: *const u8,
  768|  1.01M|    ) -> Option<*const u8> {
  769|  1.01M|        self.sse2.find_raw(start, end)
  770|  1.01M|    }
_RNvMs2_NtNtNtNtCsjWXOcHgrJZQ_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|  3.30M|    unsafe fn find_raw_avx2(
  805|  3.30M|        &self,
  806|  3.30M|        start: *const u8,
  807|  3.30M|        end: *const u8,
  808|  3.30M|    ) -> Option<*const u8> {
  809|  3.30M|        self.avx2.find_raw(start, end)
  810|  3.30M|    }

_RNvNtNtNtCsjWXOcHgrJZQ_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  34.3M|pub(crate) fn memchr2_raw(
  221|  34.3M|    n1: u8,
  222|  34.3M|    n2: u8,
  223|  34.3M|    start: *const u8,
  224|  34.3M|    end: *const u8,
  225|  34.3M|) -> Option<*const u8> {
  226|  34.3M|    // SAFETY: We provide a valid function pointer type.
  227|  34.3M|    unsafe_ifunc!(
  228|  34.3M|        Two,
  229|  34.3M|        find_raw,
  230|  34.3M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  34.3M|        Option<*const u8>,
  232|  34.3M|        start,
  233|  34.3M|        end,
  234|  34.3M|        n1,
  235|  34.3M|        n2
  236|  34.3M|    )
  237|  34.3M|}
_RNvNtNtNtCsjWXOcHgrJZQ_6memchr4arch6x86_646memchr10memchr_raw:
  174|  40.7k|pub(crate) fn memchr_raw(
  175|  40.7k|    n1: u8,
  176|  40.7k|    start: *const u8,
  177|  40.7k|    end: *const u8,
  178|  40.7k|) -> Option<*const u8> {
  179|  40.7k|    // SAFETY: We provide a valid function pointer type.
  180|  40.7k|    unsafe_ifunc!(
  181|  40.7k|        One,
  182|  40.7k|        find_raw,
  183|  40.7k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  40.7k|        Option<*const u8>,
  185|  40.7k|        start,
  186|  40.7k|        end,
  187|  40.7k|        n1
  188|  40.7k|    )
  189|  40.7k|}
_RNvNvNtNtNtCsjWXOcHgrJZQ_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  40.7k|        unsafe fn find_avx2(
   79|  40.7k|            $($needle: u8),+,
   80|  40.7k|            $hay_start: *const u8,
   81|  40.7k|            $hay_end: *const u8,
   82|  40.7k|        ) -> $retty {
   83|  40.7k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  40.7k|            $memchrty::new_unchecked($($needle),+)
   85|  40.7k|                .$memchrfind($hay_start, $hay_end)
   86|  40.7k|        }
_RNvNvNtNtNtCsjWXOcHgrJZQ_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCsjWXOcHgrJZQ_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  34.3M|        unsafe fn find_avx2(
   79|  34.3M|            $($needle: u8),+,
   80|  34.3M|            $hay_start: *const u8,
   81|  34.3M|            $hay_end: *const u8,
   82|  34.3M|        ) -> $retty {
   83|  34.3M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  34.3M|            $memchrty::new_unchecked($($needle),+)
   85|  34.3M|                .$memchrfind($hay_start, $hay_end)
   86|  34.3M|        }
_RNvNvNtNtNtCsjWXOcHgrJZQ_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }

_RNvXNtCsjWXOcHgrJZQ_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  36.7M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  36.7M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  36.7M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  36.7M|    }
_RNvXNtCsjWXOcHgrJZQ_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|  2.27M|    fn as_usize(self) -> usize {
   27|  2.27M|        self as usize
   28|  2.27M|    }

_RNvMs2_NtCsjWXOcHgrJZQ_6memchr6memchrNtB5_7Memchr23newCs2uQIyP4qcLL_5oxttl:
  377|  30.3M|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  30.3M|        Memchr2 {
  379|  30.3M|            needle1,
  380|  30.3M|            needle2,
  381|  30.3M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  30.3M|        }
  383|  30.3M|    }
_RNvNtCsjWXOcHgrJZQ_6memchr6memchr11memchr2_rawCs2uQIyP4qcLL_5oxttl:
  574|  34.3M|unsafe fn memchr2_raw(
  575|  34.3M|    needle1: u8,
  576|  34.3M|    needle2: u8,
  577|  34.3M|    start: *const u8,
  578|  34.3M|    end: *const u8,
  579|  34.3M|) -> Option<*const u8> {
  580|  34.3M|    #[cfg(target_arch = "x86_64")]
  581|  34.3M|    {
  582|  34.3M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  34.3M|    }
  584|  34.3M|    #[cfg(target_arch = "wasm32")]
  585|  34.3M|    {
  586|  34.3M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  34.3M|    }
  588|  34.3M|    #[cfg(target_arch = "aarch64")]
  589|  34.3M|    {
  590|  34.3M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  34.3M|    }
  592|  34.3M|    #[cfg(not(any(
  593|  34.3M|        target_arch = "x86_64",
  594|  34.3M|        target_arch = "wasm32",
  595|  34.3M|        target_arch = "aarch64"
  596|  34.3M|    )))]
  597|  34.3M|    {
  598|  34.3M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  34.3M|            .find_raw(start, end)
  600|  34.3M|    }
  601|  34.3M|}
_RNvNtCsjWXOcHgrJZQ_6memchr6memchr12memchr2_iterCs2uQIyP4qcLL_5oxttl:
  232|  30.3M|pub fn memchr2_iter<'h>(
  233|  30.3M|    needle1: u8,
  234|  30.3M|    needle2: u8,
  235|  30.3M|    haystack: &'h [u8],
  236|  30.3M|) -> Memchr2<'h> {
  237|  30.3M|    Memchr2::new(needle1, needle2, haystack)
  238|  30.3M|}
_RNvNtCsjWXOcHgrJZQ_6memchr6memchr6memchrCs2uQIyP4qcLL_5oxttl:
   27|  40.7k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  40.7k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  40.7k|    // pointer between start and end.
   30|  40.7k|    unsafe {
   31|  40.7k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  40.7k|        })
   34|  40.7k|    }
   35|  40.7k|}
_RNvNtCsjWXOcHgrJZQ_6memchr6memchr7memchr2Cs2uQIyP4qcLL_5oxttl:
   92|  3.82M|pub fn memchr2(needle1: u8, needle2: u8, haystack: &[u8]) -> Option<usize> {
   93|  3.82M|    // SAFETY: memchr2_raw, when a match is found, always returns a valid
   94|  3.82M|    // pointer between start and end.
   95|  3.82M|    unsafe {
   96|  3.82M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|       |            memchr2_raw(needle1, needle2, start, end)
   98|  3.82M|        })
   99|  3.82M|    }
  100|  3.82M|}
_RNvXs3_NtCsjWXOcHgrJZQ_6memchr6memchrNtB5_7Memchr2NtNtNtNtCslA8OvuvDMgt_4core4iter6traits8iterator8Iterator4nextCs2uQIyP4qcLL_5oxttl:
  390|  30.4M|    fn next(&mut self) -> Option<usize> {
  391|  30.4M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  30.4M|        // pointers returns will fall within the start and end bounds, and this
  393|  30.4M|        // upholds the safety contract of `self.it.next`.
  394|  30.4M|        unsafe {
  395|  30.4M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  30.4M|        }
  397|  30.4M|    }
_RNCNvNtCsjWXOcHgrJZQ_6memchr6memchr7memchr20Cs2uQIyP4qcLL_5oxttl:
   96|  3.82M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|  3.82M|            memchr2_raw(needle1, needle2, start, end)
   98|  3.82M|        })
_RNCNvXs3_NtCsjWXOcHgrJZQ_6memchr6memchrNtB7_7Memchr2NtNtNtNtCslA8OvuvDMgt_4core4iter6traits8iterator8Iterator4next0Cs2uQIyP4qcLL_5oxttl:
  395|  30.4M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNCNvNtCsjWXOcHgrJZQ_6memchr6memchr6memchr0B5_:
   31|  40.7k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|  40.7k|            memchr_raw(needle, start, end)
   33|  40.7k|        })
_RNvNtCsjWXOcHgrJZQ_6memchr6memchr10memchr_rawB3_:
  504|  40.7k|unsafe fn memchr_raw(
  505|  40.7k|    needle: u8,
  506|  40.7k|    start: *const u8,
  507|  40.7k|    end: *const u8,
  508|  40.7k|) -> Option<*const u8> {
  509|  40.7k|    #[cfg(target_arch = "x86_64")]
  510|  40.7k|    {
  511|  40.7k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  40.7k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  40.7k|        // time. This function also handles using a fallback if neither AVX2
  514|  40.7k|        // nor SSE2 (unusual) are available.
  515|  40.7k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  40.7k|    }
  517|  40.7k|    #[cfg(target_arch = "wasm32")]
  518|  40.7k|    {
  519|  40.7k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  40.7k|    }
  521|  40.7k|    #[cfg(target_arch = "aarch64")]
  522|  40.7k|    {
  523|  40.7k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  40.7k|    }
  525|  40.7k|    #[cfg(not(any(
  526|  40.7k|        target_arch = "x86_64",
  527|  40.7k|        target_arch = "wasm32",
  528|  40.7k|        target_arch = "aarch64"
  529|  40.7k|    )))]
  530|  40.7k|    {
  531|  40.7k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  40.7k|    }
  533|  40.7k|}

_RNvYNtNtNtCslA8OvuvDMgt_4core9core_arch3x867___m256iNtNtCsjWXOcHgrJZQ_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   65|   890k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   66|   890k|        self.movemask().has_non_zero()
   67|   890k|    }
_RNvMNtCsjWXOcHgrJZQ_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  128|  2.48M|    fn get_for_offset(self) -> u32 {
  129|  2.48M|        #[cfg(target_endian = "big")]
  130|  2.48M|        {
  131|  2.48M|            self.0.swap_bytes()
  132|  2.48M|        }
  133|  2.48M|        #[cfg(target_endian = "little")]
  134|  2.48M|        {
  135|  2.48M|            self.0
  136|  2.48M|        }
  137|  2.48M|    }
_RNvXs_NtCsjWXOcHgrJZQ_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  148|  8.16M|    fn has_non_zero(self) -> bool {
  149|  8.16M|        self.0 != 0
  150|  8.16M|    }
_RNvXs_NtCsjWXOcHgrJZQ_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  173|  2.48M|    fn first_offset(self) -> usize {
  174|  2.48M|        // We are dealing with little endian here (and if we aren't, we swap
  175|  2.48M|        // the bytes so we are in practice), where the most significant byte
  176|  2.48M|        // is at a higher address. That means the least significant bit that
  177|  2.48M|        // is set corresponds to the position of our first matching byte.
  178|  2.48M|        // That position corresponds to the number of zeros after the least
  179|  2.48M|        // significant bit.
  180|  2.48M|        self.get_for_offset().trailing_zeros() as usize
  181|  2.48M|    }
_RNvXNtNtCsjWXOcHgrJZQ_6memchr6vector7x86sse2NtNtNtCslA8OvuvDMgt_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  220|  2.07M|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  221|  2.07M|            _mm_loadu_si128(data as *const __m128i)
  222|  2.07M|        }
_RNvXNtNtCsjWXOcHgrJZQ_6memchr6vector7x86sse2NtNtNtCslA8OvuvDMgt_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  225|  2.61M|        unsafe fn movemask(self) -> SensibleMoveMask {
  226|  2.61M|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  227|  2.61M|        }
_RNvXNtNtCsjWXOcHgrJZQ_6memchr6vector7x86sse2NtNtNtCslA8OvuvDMgt_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  230|  4.13M|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  231|  4.13M|            _mm_cmpeq_epi8(self, vector2)
  232|  4.13M|        }
_RNvXNtNtCsjWXOcHgrJZQ_6memchr6vector7x86avx2NtNtNtCslA8OvuvDMgt_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  275|  10.4M|        unsafe fn movemask(self) -> SensibleMoveMask {
  276|  10.4M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  277|  10.4M|        }
_RNvXNtNtCsjWXOcHgrJZQ_6memchr6vector7x86avx2NtNtNtCslA8OvuvDMgt_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  270|  4.89M|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  271|  4.89M|            _mm256_loadu_si256(data as *const __m256i)
  272|  4.89M|        }
_RNvXNtNtCsjWXOcHgrJZQ_6memchr6vector7x86avx2NtNtNtCslA8OvuvDMgt_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  280|  13.2M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  281|  13.2M|            _mm256_cmpeq_epi8(self, vector2)
  282|  13.2M|        }
_RNvXs_NtCsjWXOcHgrJZQ_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  163|  2.62M|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  164|  2.62M|        SensibleMoveMask(self.0 | other.0)
  165|  2.62M|    }
_RNvXNtNtCsjWXOcHgrJZQ_6memchr6vector7x86sse2NtNtNtCslA8OvuvDMgt_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  210|  68.6M|        unsafe fn splat(byte: u8) -> __m128i {
  211|  68.6M|            _mm_set1_epi8(byte as i8)
  212|  68.6M|        }
_RNvXNtNtCsjWXOcHgrJZQ_6memchr6vector7x86sse2NtNtNtCslA8OvuvDMgt_4core9core_arch3x867___m128iNtB4_6Vector2or:
  240|  2.06M|        unsafe fn or(self, vector2: Self) -> __m128i {
  241|  2.06M|            _mm_or_si128(self, vector2)
  242|  2.06M|        }
_RNvXNtNtCsjWXOcHgrJZQ_6memchr6vector7x86avx2NtNtNtCslA8OvuvDMgt_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  260|  68.6M|        unsafe fn splat(byte: u8) -> __m256i {
  261|  68.6M|            _mm256_set1_epi8(byte as i8)
  262|  68.6M|        }
_RNvXNtNtCsjWXOcHgrJZQ_6memchr6vector7x86avx2NtNtNtCslA8OvuvDMgt_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  265|  1.79M|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  266|  1.79M|            _mm256_load_si256(data as *const __m256i)
  267|  1.79M|        }
_RNvXNtNtCsjWXOcHgrJZQ_6memchr6vector7x86avx2NtNtNtCslA8OvuvDMgt_4core9core_arch3x867___m256iNtB4_6Vector2or:
  290|  7.51M|        unsafe fn or(self, vector2: Self) -> __m256i {
  291|  7.51M|            _mm256_or_si256(self, vector2)
  292|  7.51M|        }

_RNvMs2_NtCs7S0qBIVO0ko_9once_cell3impINtB5_8OnceCellNtNtCs5pYOfYKUd9L_5alloc6string6StringE14is_initializedCs7RglK7baKIt_13libfuzzer_sys:
   49|  17.0k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  17.0k|        // An `Acquire` load is enough because that makes all the initialization
   51|  17.0k|        // operations visible to us, and, this being a fast path, weaker
   52|  17.0k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  17.0k|        // `SeqCst` operations on the slow path.
   54|  17.0k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  17.0k|    }

_RNvMs4_NtCs7S0qBIVO0ko_9once_cell4syncINtB5_8OnceCellNtNtCs5pYOfYKUd9L_5alloc6string6StringE3getCs7RglK7baKIt_13libfuzzer_sys:
  963|  17.0k|        pub fn get(&self) -> Option<&T> {
  964|  17.0k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  17.0k|                None
  969|       |            }
  970|  17.0k|        }

_RNvMCsjpaiq1xEgDt_10oxilangtagINtB2_11LanguageTagReE10into_innerCs2uQIyP4qcLL_5oxttl:
   54|  31.4k|    pub fn into_inner(self) -> T {
   55|  31.4k|        self.tag
   56|  31.4k|    }
_RNvMCsjpaiq1xEgDt_10oxilangtagINtB2_11LanguageTagReE5parseCs2uQIyP4qcLL_5oxttl:
   41|  40.2k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   42|  40.2k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   43|  31.4k|        Ok(Self { tag, positions })
   44|  40.2k|    }
_RINvCsjpaiq1xEgDt_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECsgSruOWiD3Xy_5oxrdf:
  621|  32.5k|fn parse_langtag(
  622|  32.5k|    input: &str,
  623|  32.5k|    output: &mut impl OutputBuffer,
  624|  32.5k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  625|  32.5k|    #[derive(PartialEq, Eq)]
  626|  32.5k|    enum State {
  627|  32.5k|        Start,
  628|  32.5k|        AfterLanguage,
  629|  32.5k|        AfterExtLang,
  630|  32.5k|        AfterScript,
  631|  32.5k|        AfterRegion,
  632|  32.5k|        InExtension { expected: bool },
  633|  32.5k|        InPrivateUse { expected: bool },
  634|  32.5k|    }
  635|  32.5k|
  636|  32.5k|    let mut state = State::Start;
  637|  32.5k|    let mut language_end = 0;
  638|  32.5k|    let mut extlang_end = 0;
  639|  32.5k|    let mut script_end = 0;
  640|  32.5k|    let mut region_end = 0;
  641|  32.5k|    let mut variant_end = 0;
  642|  32.5k|    let mut extension_end = 0;
  643|  32.5k|    let mut extlangs_count = 0;
  644|  57.2k|    for (subtag, end) in SubTagIterator::new(input) {
  645|  57.2k|        if subtag.is_empty() {
  646|      0|            return Err(LanguageTagParseError {
  647|      0|                kind: TagParseErrorKind::EmptySubtag,
  648|      0|            });
  649|  57.2k|        }
  650|  57.2k|        if subtag.len() > 8 {
  651|  1.06k|            return Err(LanguageTagParseError {
  652|  1.06k|                kind: TagParseErrorKind::SubtagTooLong,
  653|  1.06k|            });
  654|  56.2k|        }
  655|  56.2k|        if state == State::Start {
  656|       |            // Primary language
  657|  31.5k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  658|  4.32k|                return Err(LanguageTagParseError {
  659|  4.32k|                    kind: TagParseErrorKind::InvalidLanguage,
  660|  4.32k|                });
  661|  27.2k|            }
  662|  27.2k|            language_end = end;
  663|  27.2k|            output.extend(to_lowercase(subtag));
  664|  27.2k|            if subtag.len() < 4 {
  665|  12.9k|                // extlangs are only allowed for short language tags
  666|  12.9k|                state = State::AfterLanguage;
  667|  14.2k|            } else {
  668|  14.2k|                state = State::AfterExtLang;
  669|  14.2k|            }
  670|  24.6k|        } else if let State::InPrivateUse { .. } = state {
  671|  2.09k|            if !is_alphanumeric(subtag) {
  672|      0|                return Err(LanguageTagParseError {
  673|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  674|      0|                });
  675|  2.09k|            }
  676|  2.09k|            output.push('-');
  677|  2.09k|            output.extend(to_lowercase(subtag));
  678|  2.09k|            state = State::InPrivateUse { expected: false };
  679|  22.5k|        } else if subtag == "x" || subtag == "X" {
  680|       |            // We make sure extension is found
  681|  2.48k|            if let State::InExtension { expected: true } = state {
  682|    330|                return Err(LanguageTagParseError {
  683|    330|                    kind: TagParseErrorKind::EmptyExtension,
  684|    330|                });
  685|  2.15k|            }
  686|  2.15k|            output.push('-');
  687|  2.15k|            output.push('x');
  688|  2.15k|            state = State::InPrivateUse { expected: true };
  689|  20.0k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  690|       |            // We make sure extension is found
  691|  6.48k|            if let State::InExtension { expected: true } = state {
  692|    654|                return Err(LanguageTagParseError {
  693|    654|                    kind: TagParseErrorKind::EmptyExtension,
  694|    654|                });
  695|  5.83k|            }
  696|  5.83k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  697|  5.83k|            output.push('-');
  698|  5.83k|            output.push(extension_tag);
  699|  5.83k|            state = State::InExtension { expected: true };
  700|  13.5k|        } else if let State::InExtension { .. } = state {
  701|  6.07k|            if !is_alphanumeric(subtag) {
  702|      0|                return Err(LanguageTagParseError {
  703|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  704|      0|                });
  705|  6.07k|            }
  706|  6.07k|            extension_end = end;
  707|  6.07k|            output.push('-');
  708|  6.07k|            output.extend(to_lowercase(subtag));
  709|  6.07k|            state = State::InExtension { expected: false };
  710|  7.50k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  711|  1.34k|            extlangs_count += 1;
  712|  1.34k|            if extlangs_count > 3 {
  713|    138|                return Err(LanguageTagParseError {
  714|    138|                    kind: TagParseErrorKind::TooManyExtlangs,
  715|    138|                });
  716|  1.20k|            }
  717|  1.20k|            // valid extlangs
  718|  1.20k|            extlang_end = end;
  719|  1.20k|            output.push('-');
  720|  1.20k|            output.extend(to_lowercase(subtag));
  721|  6.16k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  722|  5.70k|            && subtag.len() == 4
  723|    443|            && is_alphabetic(subtag)
  724|    443|        {
  725|    443|            // Script
  726|    443|            script_end = end;
  727|    443|            output.push('-');
  728|    443|            output.extend(to_uppercase_first(subtag));
  729|    443|            state = State::AfterScript;
  730|  5.71k|        } else if (state == State::AfterLanguage
  731|    955|            || state == State::AfterExtLang
  732|    460|            || state == State::AfterScript)
  733|  5.39k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  734|  2.00k|                || subtag.len() == 3 && is_numeric(subtag))
  735|  3.38k|        {
  736|  3.38k|            // Region
  737|  3.38k|            region_end = end;
  738|  3.38k|            output.push('-');
  739|  3.38k|            output.extend(to_uppercase(subtag));
  740|  3.38k|            state = State::AfterRegion;
  741|  3.38k|        } else if (state == State::AfterLanguage
  742|    618|            || state == State::AfterExtLang
  743|    460|            || state == State::AfterScript
  744|    329|            || state == State::AfterRegion)
  745|  2.33k|            && is_alphanumeric(subtag)
  746|  2.33k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  747|    414|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  748|  1.92k|        {
  749|  1.92k|            // Variant
  750|  1.92k|            variant_end = end;
  751|  1.92k|            output.push('-');
  752|  1.92k|            output.extend(to_lowercase(subtag));
  753|  1.92k|            state = State::AfterRegion;
  754|  1.92k|        } else {
  755|    414|            return Err(LanguageTagParseError {
  756|    414|                kind: TagParseErrorKind::InvalidSubtag,
  757|    414|            });
  758|       |        }
  759|       |    }
  760|       |
  761|       |    //We make sure we are in a correct final state
  762|  25.6k|    if let State::InExtension { expected: true } = state {
  763|  1.74k|        return Err(LanguageTagParseError {
  764|  1.74k|            kind: TagParseErrorKind::EmptyExtension,
  765|  1.74k|        });
  766|  23.9k|    }
  767|  23.9k|    if let State::InPrivateUse { expected: true } = state {
  768|    188|        return Err(LanguageTagParseError {
  769|    188|            kind: TagParseErrorKind::EmptyPrivateUse,
  770|    188|        });
  771|  23.7k|    }
  772|  23.7k|
  773|  23.7k|    //We make sure we have not skipped anyone
  774|  23.7k|    if extlang_end < language_end {
  775|  22.9k|        extlang_end = language_end;
  776|  22.9k|    }
  777|  23.7k|    if script_end < extlang_end {
  778|  23.4k|        script_end = extlang_end;
  779|  23.4k|    }
  780|  23.7k|    if region_end < script_end {
  781|  20.5k|        region_end = script_end;
  782|  20.5k|    }
  783|  23.7k|    if variant_end < region_end {
  784|  21.8k|        variant_end = region_end;
  785|  21.8k|    }
  786|  23.7k|    if extension_end < variant_end {
  787|  20.7k|        extension_end = variant_end;
  788|  20.7k|    }
  789|       |
  790|  23.7k|    Ok(TagElementsPositions {
  791|  23.7k|        language_end,
  792|  23.7k|        extlang_end,
  793|  23.7k|        script_end,
  794|  23.7k|        region_end,
  795|  23.7k|        variant_end,
  796|  23.7k|        extension_end,
  797|  23.7k|    })
  798|  32.5k|}
_RINvCsjpaiq1xEgDt_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECsgSruOWiD3Xy_5oxrdf:
  576|  40.2k|fn parse_language_tag(
  577|  40.2k|    input: &str,
  578|  40.2k|    output: &mut impl OutputBuffer,
  579|  40.2k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  580|       |    //grandfathered tags
  581|  40.2k|    if let Some(tag) = GRANDFATHEREDS
  582|  40.2k|        .iter()
  583|  40.2k|        .find(|record| record.eq_ignore_ascii_case(input))
  584|       |    {
  585|      0|        output.push_str(tag);
  586|      0|        Ok(TagElementsPositions {
  587|      0|            language_end: tag.len(),
  588|      0|            extlang_end: tag.len(),
  589|      0|            script_end: tag.len(),
  590|      0|            region_end: tag.len(),
  591|      0|            variant_end: tag.len(),
  592|      0|            extension_end: tag.len(),
  593|      0|        })
  594|  40.2k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  595|       |        // private use
  596|  7.69k|        if !is_alphanumeric_or_dash(input) {
  597|      0|            Err(LanguageTagParseError {
  598|      0|                kind: TagParseErrorKind::ForbiddenChar,
  599|      0|            })
  600|  7.69k|        } else if input.len() == 2 {
  601|      0|            Err(LanguageTagParseError {
  602|      0|                kind: TagParseErrorKind::EmptyPrivateUse,
  603|      0|            })
  604|       |        } else {
  605|  7.69k|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  606|  7.69k|            Ok(TagElementsPositions {
  607|  7.69k|                language_end: input.len(),
  608|  7.69k|                extlang_end: input.len(),
  609|  7.69k|                script_end: input.len(),
  610|  7.69k|                region_end: input.len(),
  611|  7.69k|                variant_end: input.len(),
  612|  7.69k|                extension_end: input.len(),
  613|  7.69k|            })
  614|       |        }
  615|       |    } else {
  616|  32.5k|        parse_langtag(input, output)
  617|       |    }
  618|  40.2k|}
_RINvXsr_Csjpaiq1xEgDt_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCslA8OvuvDMgt_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECsgSruOWiD3Xy_5oxrdf:
  560|  7.69k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Csjpaiq1xEgDt_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCslA8OvuvDMgt_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECsgSruOWiD3Xy_5oxrdf:
  560|  38.5k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Csjpaiq1xEgDt_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCslA8OvuvDMgt_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECsgSruOWiD3Xy_5oxrdf:
  560|  3.38k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Csjpaiq1xEgDt_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCslA8OvuvDMgt_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECsgSruOWiD3Xy_5oxrdf:
  560|    443|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCsjpaiq1xEgDt_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0CsgSruOWiD3Xy_5oxrdf:
  583|  1.04M|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvCsjpaiq1xEgDt_10oxilangtag10is_numericCsgSruOWiD3Xy_5oxrdf:
  865|    368|fn is_numeric(s: &str) -> bool {
  866|    368|    s.chars().all(|x| x.is_ascii_digit())
  867|    368|}
_RNvCsjpaiq1xEgDt_10oxilangtag12to_lowercaseCsgSruOWiD3Xy_5oxrdf:
  892|  38.5k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  893|  38.5k|    s.chars().map(|c| c.to_ascii_lowercase())
  894|  38.5k|}
_RNvCsjpaiq1xEgDt_10oxilangtag12to_uppercaseCsgSruOWiD3Xy_5oxrdf:
  880|  3.38k|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  881|  3.38k|    s.chars().map(|c| c.to_ascii_uppercase())
  882|  3.38k|}
_RNvCsjpaiq1xEgDt_10oxilangtag13is_alphabeticCsgSruOWiD3Xy_5oxrdf:
  860|  34.3k|fn is_alphabetic(s: &str) -> bool {
  861|  34.3k|    s.chars().all(|x| x.is_ascii_alphabetic())
  862|  34.3k|}
_RNvCsjpaiq1xEgDt_10oxilangtag15is_alphanumericCsgSruOWiD3Xy_5oxrdf:
  870|  16.9k|fn is_alphanumeric(s: &str) -> bool {
  871|  16.9k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  872|  16.9k|}
_RNvCsjpaiq1xEgDt_10oxilangtag18to_uppercase_firstCsgSruOWiD3Xy_5oxrdf:
  886|    443|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  887|    443|    let mut chars = s.chars();
  888|    443|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  889|    443|}
_RNvCsjpaiq1xEgDt_10oxilangtag23is_alphanumeric_or_dashCsgSruOWiD3Xy_5oxrdf:
  875|  7.69k|fn is_alphanumeric_or_dash(s: &str) -> bool {
  876|  7.69k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  877|  7.69k|}
_RNvMsv_Csjpaiq1xEgDt_10oxilangtagNtB5_14SubTagIterator3newCsgSruOWiD3Xy_5oxrdf:
  839|  32.5k|    fn new(input: &'a str) -> Self {
  840|  32.5k|        Self {
  841|  32.5k|            split: input.split('-'),
  842|  32.5k|            position: 0,
  843|  32.5k|        }
  844|  32.5k|    }
_RNvXsq_Csjpaiq1xEgDt_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsgSruOWiD3Xy_5oxrdf:
  552|  31.1k|    fn push(&mut self, _: char) {}
_RNvXsw_Csjpaiq1xEgDt_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCslA8OvuvDMgt_4core4iter6traits8iterator8Iterator4nextCsgSruOWiD3Xy_5oxrdf:
  851|  82.9k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  852|  82.9k|        let tag = self.split.next()?;
  853|  57.2k|        let tag_end = self.position + tag.len();
  854|  57.2k|        self.position = tag_end + 1;
  855|  57.2k|        Some((tag, tag_end))
  856|  82.9k|    }
_RNvXso_Csjpaiq1xEgDt_10oxilangtagNtB5_21LanguageTagParseErrorNtNtCslA8OvuvDMgt_4core3fmt7Display3fmt:
  482|  8.85k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  483|  8.85k|        match self.kind {
  484|       |            TagParseErrorKind::EmptyExtension => {
  485|  2.72k|                write!(f, "If an extension subtag is present, it must not be empty")
  486|       |            }
  487|       |            TagParseErrorKind::EmptyPrivateUse => {
  488|    188|                write!(f, "If the `x` subtag is present, it must not be empty")
  489|       |            }
  490|       |            TagParseErrorKind::ForbiddenChar => {
  491|      0|                write!(f, "The langtag contains a char not allowed")
  492|       |            }
  493|    414|            TagParseErrorKind::InvalidSubtag => write!(
  494|    414|                f,
  495|    414|                "A subtag fails to parse, it does not match any other subtags"
  496|    414|            ),
  497|  4.32k|            TagParseErrorKind::InvalidLanguage => write!(f, "The given language subtag is invalid"),
  498|       |            TagParseErrorKind::SubtagTooLong => {
  499|  1.06k|                write!(f, "A subtag may be eight characters in length at maximum")
  500|       |            }
  501|      0|            TagParseErrorKind::EmptySubtag => write!(f, "A subtag should not be empty"),
  502|       |            TagParseErrorKind::TooManyExtlangs => {
  503|    138|                write!(f, "At maximum three extlangs are allowed")
  504|       |            }
  505|       |        }
  506|  8.85k|    }
_RNCNvCsjpaiq1xEgDt_10oxilangtag13is_alphabetic0B3_:
  861|   125k|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCsjpaiq1xEgDt_10oxilangtag10is_numeric0B3_:
  866|    368|    s.chars().all(|x| x.is_ascii_digit())
_RNCNvCsjpaiq1xEgDt_10oxilangtag15is_alphanumeric0B3_:
  871|  40.9k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNCNvCsjpaiq1xEgDt_10oxilangtag23is_alphanumeric_or_dash0B3_:
  876|   109k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')

_RINvMs11_CslzvX0fW9aVw_5oxiriINtB7_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb0_E11parse_erroruECs2uQIyP4qcLL_5oxttl:
 1567|   139k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1568|   139k|        Err(IriParseError { kind })
 1569|   139k|    }
_RINvMs11_CslzvX0fW9aVw_5oxiriINtB7_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb1_E11parse_erroruECs2uQIyP4qcLL_5oxttl:
 1567|  3.52k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1568|  3.52k|        Err(IriParseError { kind })
 1569|  3.52k|    }
_RNCNvMs11_CslzvX0fW9aVw_5oxiriINtB8_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb0_E10read_echar0Cs2uQIyP4qcLL_5oxttl:
 1550|  8.12k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_CslzvX0fW9aVw_5oxiriINtB8_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb0_E10read_echars_0Cs2uQIyP4qcLL_5oxttl:
 1551|  4.64k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMCslzvX0fW9aVw_5oxiriINtB2_6IriRefNtNtCs5pYOfYKUd9L_5alloc6string6StringE15parse_uncheckedCs2uQIyP4qcLL_5oxttl:
   71|  27.7k|    pub fn parse_unchecked(iri: T) -> Result<Self, IriParseError> {
   72|  27.7k|        let positions = IriParser::<_, true>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   73|  27.7k|        Ok(Self { iri, positions })
   74|  27.7k|    }
_RNvMCslzvX0fW9aVw_5oxiriINtB2_6IriRefNtNtCs5pYOfYKUd9L_5alloc6string6StringE17resolve_uncheckedCs2uQIyP4qcLL_5oxttl:
  108|   549k|    pub fn resolve_unchecked(&self, iri: &str) -> Result<IriRef<String>, IriParseError> {
  109|   549k|        let mut target_buffer = String::with_capacity(self.iri.len() + iri.len());
  110|   549k|        let positions = IriParser::<_, true>::parse(iri, Some(self.as_ref()), &mut target_buffer)?;
  111|   546k|        Ok(IriRef {
  112|   546k|            iri: target_buffer,
  113|   546k|            positions,
  114|   546k|        })
  115|   549k|    }
_RNvMCslzvX0fW9aVw_5oxiriINtB2_6IriRefNtNtCs5pYOfYKUd9L_5alloc6string6StringE4pathCs2uQIyP4qcLL_5oxttl:
  264|  16.3k|    pub fn path(&self) -> &str {
  265|  16.3k|        &self.iri[self.positions.authority_end..self.positions.path_end]
  266|  16.3k|    }
_RNvMCslzvX0fW9aVw_5oxiriINtB2_6IriRefNtNtCs5pYOfYKUd9L_5alloc6string6StringE6as_refCs2uQIyP4qcLL_5oxttl:
  160|  1.65M|    pub fn as_ref(&self) -> IriRef<&str> {
  161|  1.65M|        IriRef {
  162|  1.65M|            iri: &self.iri,
  163|  1.65M|            positions: self.positions,
  164|  1.65M|        }
  165|  1.65M|    }
_RNvMCslzvX0fW9aVw_5oxiriINtB2_6IriRefNtNtCs5pYOfYKUd9L_5alloc6string6StringE6as_strCs2uQIyP4qcLL_5oxttl:
  177|  5.88k|    pub fn as_str(&self) -> &str {
  178|  5.88k|        &self.iri
  179|  5.88k|    }
_RNvMCslzvX0fW9aVw_5oxiriINtB2_6IriRefNtNtCs5pYOfYKUd9L_5alloc6string6StringE7resolveCs2uQIyP4qcLL_5oxttl:
   89|  1.10M|    pub fn resolve(&self, iri: &str) -> Result<IriRef<String>, IriParseError> {
   90|  1.10M|        let mut target_buffer = String::with_capacity(self.iri.len() + iri.len());
   91|  1.10M|        let positions = IriParser::<_, false>::parse(iri, Some(self.as_ref()), &mut target_buffer)?;
   92|   963k|        Ok(IriRef {
   93|   963k|            iri: target_buffer,
   94|   963k|            positions,
   95|   963k|        })
   96|  1.10M|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_hostCs2uQIyP4qcLL_5oxttl:
 1366|  22.5k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|  22.5k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|      0|            let start_position = self.input.position;
 1370|      0|            while let Some(c) = self.input.next() {
 1371|      0|                self.output.push(c);
 1372|      0|                if c == ']' {
 1373|      0|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|      0|                    if !UNCHECKED {
 1375|      0|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|      0|                        }
 1378|      0|                    }
 1379|       |
 1380|      0|                    let c = self.input.next();
 1381|      0|                    return match c {
 1382|       |                        Some(':') => {
 1383|      0|                            self.output.push(':');
 1384|      0|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|      0|                            self.output_positions.authority_end = self.output.len();
 1388|      0|                            self.parse_path_start(c)
 1389|       |                        }
 1390|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|      0|                }
 1393|       |            }
 1394|      0|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|   238k|            loop {
 1398|   238k|                let c = self.input.next();
 1399|   238k|                match c {
 1400|       |                    Some(':') => {
 1401|  2.22k|                        self.output.push(':');
 1402|  2.22k|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|  20.2k|                        self.output_positions.authority_end = self.output.len();
 1406|  20.2k|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|   215k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|  22.5k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_pathCs2uQIyP4qcLL_5oxttl:
 1457|  22.4k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|   197k|        loop {
 1459|   197k|            let c = self.input.next();
 1460|   197k|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|  25.5k|                    if self.output.as_str().ends_with("/..") {
 1463|      0|                        self.remove_last_segment();
 1464|      0|                        self.remove_last_segment();
 1465|      0|                        self.output.push('/');
 1466|  25.5k|                    } else if self.output.as_str().ends_with("/.") {
 1467|      0|                        self.remove_last_segment();
 1468|      0|                        self.output.push('/');
 1469|  25.5k|                    } else if c == Some('/') {
 1470|  3.08k|                        self.output.push('/');
 1471|  22.4k|                    }
 1472|       |
 1473|  25.5k|                    if c == Some('?') {
 1474|  3.29k|                        self.output_positions.path_end = self.output.len();
 1475|  3.29k|                        self.output.push('?');
 1476|  3.29k|                        return self.parse_query();
 1477|  22.2k|                    } else if c == Some('#') {
 1478|  1.50k|                        self.output_positions.path_end = self.output.len();
 1479|  1.50k|                        self.output_positions.query_end = self.output.len();
 1480|  1.50k|                        self.output.push('#');
 1481|  1.50k|                        return self.parse_fragment();
 1482|  20.7k|                    } else if c.is_none() {
 1483|  17.6k|                        self.output_positions.path_end = self.output.len();
 1484|  17.6k|                        self.output_positions.query_end = self.output.len();
 1485|  17.6k|                        return Ok(());
 1486|  3.08k|                    }
 1487|       |                }
 1488|   171k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|  22.4k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_portCs2uQIyP4qcLL_5oxttl:
 1414|  2.22k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|  2.96k|        loop {
 1416|  2.96k|            let c = self.input.next();
 1417|  2.17k|            match c {
 1418|  2.17k|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|  2.22k|                    self.output_positions.authority_end = self.output.len();
 1421|  2.22k|                    return self.parse_path_start(c);
 1422|       |                }
 1423|      0|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|  2.22k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E11parse_queryCs2uQIyP4qcLL_5oxttl:
 1493|  3.80k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|  54.7k|        while let Some(c) = self.input.next() {
 1495|  51.2k|            if c == '#' {
 1496|    308|                self.output_positions.query_end = self.output.len();
 1497|    308|                self.output.push('#');
 1498|    308|                return self.parse_fragment();
 1499|       |            } else {
 1500|  50.9k|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|  3.49k|        self.output_positions.query_end = self.output.len();
 1504|  3.49k|        Ok(())
 1505|  3.80k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E12parse_schemeCs2uQIyP4qcLL_5oxttl:
 1220|  27.7k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|   139k|        loop {
 1222|   139k|            let c = self.input.next();
 1223|   139k|            match c {
 1224|   139k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|   111k|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|  27.7k|                    self.output.push(':');
 1229|  27.7k|                    self.output_positions.scheme_end = self.output.len();
 1230|  27.7k|                    self.input_scheme_end = self.input.position;
 1231|  27.7k|                    return if self.input.starts_with('/') {
 1232|  23.5k|                        self.input.next();
 1233|  23.5k|                        self.output.push('/');
 1234|  23.5k|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|  4.18k|                        self.output_positions.authority_end = self.output.len();
 1237|  4.18k|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|      0|                    self.input = ParserInput {
 1242|      0|                        value: self.iri.chars(),
 1243|      0|                        position: 0,
 1244|      0|                    }; // reset
 1245|      0|                    self.output.clear();
 1246|      0|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|  27.7k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E14parse_fragmentCs2uQIyP4qcLL_5oxttl:
 1507|  2.43k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|  22.9k|        while let Some(c) = self.input.next() {
 1509|  20.5k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|  2.43k|        Ok(())
 1512|  2.43k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E15parse_authorityCs2uQIyP4qcLL_5oxttl:
 1342|  22.5k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|   241k|        loop {
 1345|   241k|            let c = self.input.next();
 1346|   241k|            match c {
 1347|       |                Some('@') => {
 1348|    101|                    self.output.push('@');
 1349|    101|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|  22.4k|                    self.input = ParserInput {
 1353|  22.4k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|  22.4k|                        position: self.input_scheme_end + 2,
 1355|  22.4k|                    };
 1356|  22.4k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|  22.4k|                    return self.parse_host();
 1358|       |                }
 1359|   218k|                Some(c) => {
 1360|   218k|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|  22.5k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E16parse_path_startCs2uQIyP4qcLL_5oxttl:
 1428|  22.5k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|  22.5k|        match c {
 1430|       |            None => {
 1431|  4.10k|                self.output_positions.path_end = self.output.len();
 1432|  4.10k|                self.output_positions.query_end = self.output.len();
 1433|  4.10k|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|    510|                self.output_positions.path_end = self.output.len();
 1437|    510|                self.output.push('?');
 1438|    510|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|    619|                self.output_positions.path_end = self.output.len();
 1442|    619|                self.output_positions.query_end = self.output.len();
 1443|    619|                self.output.push('#');
 1444|    619|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|  17.2k|                self.output.push('/');
 1448|  17.2k|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|  22.5k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E18parse_scheme_startCs2uQIyP4qcLL_5oxttl:
 1212|  27.7k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|  27.7k|        match self.input.front() {
 1214|      0|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|  27.7k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|      0|            _ => self.parse_relative(),
 1217|       |        }
 1218|  27.7k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E23parse_path_or_authorityCs2uQIyP4qcLL_5oxttl:
 1252|  23.5k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|  23.5k|        if self.input.starts_with('/') {
 1254|  22.5k|            self.input.next();
 1255|  22.5k|            self.output.push('/');
 1256|  22.5k|            self.parse_authority()
 1257|       |        } else {
 1258|  1.00k|            self.output_positions.authority_end = self.output.len() - 1;
 1259|  1.00k|            self.parse_path()
 1260|       |        }
 1261|  23.5k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E27read_url_codepoint_or_echarCs2uQIyP4qcLL_5oxttl:
 1523|   626k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|   626k|        if UNCHECKED || is_url_code_point(c) {
 1525|   626k|            self.output.push(c);
 1526|   626k|            Ok(())
 1527|      0|        } else if c == '%' {
 1528|      0|            self.read_echar()
 1529|       |        } else {
 1530|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|   626k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E33read_url_query_codepoint_or_echarCs2uQIyP4qcLL_5oxttl:
 1535|  50.9k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|  50.9k|        if UNCHECKED || is_url_query_code_point(c) {
 1537|  50.9k|            self.output.push(c);
 1538|  50.9k|            Ok(())
 1539|      0|        } else if c == '%' {
 1540|      0|            self.read_echar()
 1541|       |        } else {
 1542|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|  50.9k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E5parseCs2uQIyP4qcLL_5oxttl:
 1187|  27.7k|    fn parse(
 1188|  27.7k|        iri: &'a str,
 1189|  27.7k|        base: Option<IriRef<&'a str>>,
 1190|  27.7k|        output: &'a mut O,
 1191|  27.7k|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|  27.7k|        let mut parser = Self {
 1193|  27.7k|            iri,
 1194|  27.7k|            base,
 1195|  27.7k|            input: ParserInput {
 1196|  27.7k|                value: iri.chars(),
 1197|  27.7k|                position: 0,
 1198|  27.7k|            },
 1199|  27.7k|            output,
 1200|  27.7k|            output_positions: IriElementsPositions {
 1201|  27.7k|                scheme_end: 0,
 1202|  27.7k|                authority_end: 0,
 1203|  27.7k|                path_end: 0,
 1204|  27.7k|                query_end: 0,
 1205|  27.7k|            },
 1206|  27.7k|            input_scheme_end: 0,
 1207|  27.7k|        };
 1208|  27.7k|        parser.parse_scheme_start()?;
 1209|  27.7k|        Ok(parser.output_positions)
 1210|  27.7k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb0_E10parse_hostCs2uQIyP4qcLL_5oxttl:
 1366|  26.2k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|  26.2k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|  3.84k|            let start_position = self.input.position;
 1370|  99.8k|            while let Some(c) = self.input.next() {
 1371|  98.4k|                self.output.push(c);
 1372|  98.4k|                if c == ']' {
 1373|  2.43k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|  2.43k|                    if !UNCHECKED {
 1375|  2.43k|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|  2.43k|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|      0|                        }
 1378|      0|                    }
 1379|       |
 1380|      0|                    let c = self.input.next();
 1381|      0|                    return match c {
 1382|       |                        Some(':') => {
 1383|      0|                            self.output.push(':');
 1384|      0|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|      0|                            self.output_positions.authority_end = self.output.len();
 1388|      0|                            self.parse_path_start(c)
 1389|       |                        }
 1390|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|  96.0k|                }
 1393|       |            }
 1394|  1.40k|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|   231k|            loop {
 1398|   231k|                let c = self.input.next();
 1399|   231k|                match c {
 1400|       |                    Some(':') => {
 1401|  5.01k|                        self.output.push(':');
 1402|  5.01k|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|  16.5k|                        self.output_positions.authority_end = self.output.len();
 1406|  16.5k|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|   209k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|  26.2k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb0_E10parse_pathCs2uQIyP4qcLL_5oxttl:
 1457|   996k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|  3.13M|        loop {
 1459|  3.13M|            let c = self.input.next();
 1460|  3.13M|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|  1.09M|                    if self.output.as_str().ends_with("/..") {
 1463|  1.90k|                        self.remove_last_segment();
 1464|  1.90k|                        self.remove_last_segment();
 1465|  1.90k|                        self.output.push('/');
 1466|  1.09M|                    } else if self.output.as_str().ends_with("/.") {
 1467|   695k|                        self.remove_last_segment();
 1468|   695k|                        self.output.push('/');
 1469|   695k|                    } else if c == Some('/') {
 1470|   196k|                        self.output.push('/');
 1471|   197k|                    }
 1472|       |
 1473|  1.09M|                    if c == Some('?') {
 1474|  9.23k|                        self.output_positions.path_end = self.output.len();
 1475|  9.23k|                        self.output.push('?');
 1476|  9.23k|                        return self.parse_query();
 1477|  1.08M|                    } else if c == Some('#') {
 1478|  5.59k|                        self.output_positions.path_end = self.output.len();
 1479|  5.59k|                        self.output_positions.query_end = self.output.len();
 1480|  5.59k|                        self.output.push('#');
 1481|  5.59k|                        return self.parse_fragment();
 1482|  1.07M|                    } else if c.is_none() {
 1483|   879k|                        self.output_positions.path_end = self.output.len();
 1484|   879k|                        self.output_positions.query_end = self.output.len();
 1485|   879k|                        return Ok(());
 1486|   197k|                    }
 1487|       |                }
 1488|  2.04M|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|   996k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb0_E10parse_portCs2uQIyP4qcLL_5oxttl:
 1414|  5.01k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|  10.7k|        loop {
 1416|  10.7k|            let c = self.input.next();
 1417|  9.12k|            match c {
 1418|  9.12k|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|  4.55k|                    self.output_positions.authority_end = self.output.len();
 1421|  4.55k|                    return self.parse_path_start(c);
 1422|       |                }
 1423|    466|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|  5.01k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb0_E10read_echarCs2uQIyP4qcLL_5oxttl:
 1547|  9.38k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1548|  9.38k|        let c1 = self.input.next();
 1549|  9.38k|        let c2 = self.input.next();
 1550|  9.38k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1551|  4.64k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1552|       |        {
 1553|  4.36k|            self.output.push('%');
 1554|  4.36k|            self.output.push(c1.unwrap());
 1555|  4.36k|            self.output.push(c2.unwrap());
 1556|  4.36k|            Ok(())
 1557|       |        } else {
 1558|  5.02k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1559|  5.02k|                Some('%'),
 1560|  5.02k|                c1,
 1561|  5.02k|                c2,
 1562|  5.02k|            ]))
 1563|       |        }
 1564|  9.38k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb0_E11parse_queryCs2uQIyP4qcLL_5oxttl:
 1493|  34.8k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|   333k|        while let Some(c) = self.input.next() {
 1495|   310k|            if c == '#' {
 1496|  1.62k|                self.output_positions.query_end = self.output.len();
 1497|  1.62k|                self.output.push('#');
 1498|  1.62k|                return self.parse_fragment();
 1499|       |            } else {
 1500|   308k|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|  22.7k|        self.output_positions.query_end = self.output.len();
 1504|  22.7k|        Ok(())
 1505|  34.8k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb0_E12parse_schemeCs2uQIyP4qcLL_5oxttl:
 1220|   143k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|   551k|        loop {
 1222|   551k|            let c = self.input.next();
 1223|   530k|            match c {
 1224|   530k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|   408k|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|  40.3k|                    self.output.push(':');
 1229|  40.3k|                    self.output_positions.scheme_end = self.output.len();
 1230|  40.3k|                    self.input_scheme_end = self.input.position;
 1231|  40.3k|                    return if self.input.starts_with('/') {
 1232|  15.4k|                        self.input.next();
 1233|  15.4k|                        self.output.push('/');
 1234|  15.4k|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|  24.9k|                        self.output_positions.authority_end = self.output.len();
 1237|  24.9k|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|   102k|                    self.input = ParserInput {
 1242|   102k|                        value: self.iri.chars(),
 1243|   102k|                        position: 0,
 1244|   102k|                    }; // reset
 1245|   102k|                    self.output.clear();
 1246|   102k|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|   143k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb0_E14parse_fragmentCs2uQIyP4qcLL_5oxttl:
 1507|  11.3k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|  74.6k|        while let Some(c) = self.input.next() {
 1509|  67.7k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|  6.92k|        Ok(())
 1512|  11.3k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb0_E14parse_relativeCs2uQIyP4qcLL_5oxttl:
 1263|  1.06M|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1264|  1.06M|        if let Some(base) = self.base {
 1265|  1.06M|            match self.input.front() {
 1266|       |                None => {
 1267|  41.8k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1268|  41.8k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1269|  41.8k|                    self.output_positions.authority_end = base.positions.authority_end;
 1270|  41.8k|                    self.output_positions.path_end = base.positions.path_end;
 1271|  41.8k|                    self.output_positions.query_end = base.positions.query_end;
 1272|  41.8k|                    Ok(())
 1273|       |                }
 1274|       |                Some('/') => {
 1275|   649k|                    self.input.next();
 1276|   649k|                    self.parse_relative_slash(&base)
 1277|       |                }
 1278|       |                Some('?') => {
 1279|  22.8k|                    self.input.next();
 1280|  22.8k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1281|  22.8k|                    self.output.push('?');
 1282|  22.8k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1283|  22.8k|                    self.output_positions.authority_end = base.positions.authority_end;
 1284|  22.8k|                    self.output_positions.path_end = base.positions.path_end;
 1285|  22.8k|                    self.parse_query()
 1286|       |                }
 1287|       |                Some('#') => {
 1288|  3.62k|                    self.input.next();
 1289|  3.62k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1290|  3.62k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1291|  3.62k|                    self.output_positions.authority_end = base.positions.authority_end;
 1292|  3.62k|                    self.output_positions.path_end = base.positions.path_end;
 1293|  3.62k|                    self.output_positions.query_end = base.positions.query_end;
 1294|  3.62k|                    self.output.push('#');
 1295|  3.62k|                    self.parse_fragment()
 1296|       |                }
 1297|       |                _ => {
 1298|   344k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1299|   344k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1300|   344k|                    self.output_positions.authority_end = base.positions.authority_end;
 1301|   344k|                    self.output_positions.path_end = base.positions.path_end;
 1302|   344k|                    self.remove_last_segment();
 1303|   344k|                    if self.output.len() > base.positions.scheme_end {
 1304|   306k|                        // We have some path or authority, we keep a base '/'
 1305|   306k|                        self.output.push('/');
 1306|   306k|                    }
 1307|   344k|                    self.parse_path()
 1308|       |                }
 1309|       |            }
 1310|       |        } else {
 1311|      0|            self.output_positions.scheme_end = 0;
 1312|      0|            self.input_scheme_end = 0;
 1313|      0|            if self.input.starts_with('/') {
 1314|      0|                self.input.next();
 1315|      0|                self.output.push('/');
 1316|      0|                self.parse_path_or_authority()
 1317|       |            } else {
 1318|      0|                self.output_positions.authority_end = 0;
 1319|      0|                self.parse_path()
 1320|       |            }
 1321|       |        }
 1322|  1.06M|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb0_E15parse_authorityCs2uQIyP4qcLL_5oxttl:
 1342|  42.9k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|   506k|        loop {
 1345|   506k|            let c = self.input.next();
 1346|   506k|            match c {
 1347|       |                Some('@') => {
 1348|    898|                    self.output.push('@');
 1349|    898|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|  25.3k|                    self.input = ParserInput {
 1353|  25.3k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|  25.3k|                        position: self.input_scheme_end + 2,
 1355|  25.3k|                    };
 1356|  25.3k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|  25.3k|                    return self.parse_host();
 1358|       |                }
 1359|   480k|                Some(c) => {
 1360|   480k|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|  42.9k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb0_E16parse_path_startCs2uQIyP4qcLL_5oxttl:
 1428|  21.0k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|  21.0k|        match c {
 1430|       |            None => {
 1431|  12.5k|                self.output_positions.path_end = self.output.len();
 1432|  12.5k|                self.output_positions.query_end = self.output.len();
 1433|  12.5k|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|  2.80k|                self.output_positions.path_end = self.output.len();
 1437|  2.80k|                self.output.push('?');
 1438|  2.80k|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|    556|                self.output_positions.path_end = self.output.len();
 1442|    556|                self.output_positions.query_end = self.output.len();
 1443|    556|                self.output.push('#');
 1444|    556|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|  5.20k|                self.output.push('/');
 1448|  5.20k|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|  21.0k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb0_E18parse_scheme_startCs2uQIyP4qcLL_5oxttl:
 1212|  1.10M|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|  1.10M|        match self.input.front() {
 1214|  1.03k|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|  1.06M|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|   959k|            _ => self.parse_relative(),
 1217|       |        }
 1218|  1.10M|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb0_E19remove_last_segmentCs2uQIyP4qcLL_5oxttl:
 1514|  1.04M|    fn remove_last_segment(&mut self) {
 1515|  1.04M|        let last_slash_position = self.output.as_str()[self.output_positions.authority_end..]
 1516|  1.04M|            .rfind('/')
 1517|  1.04M|            .unwrap_or(0);
 1518|  1.04M|        self.output
 1519|  1.04M|            .truncate(last_slash_position + self.output_positions.authority_end)
 1520|  1.04M|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb0_E20parse_relative_slashCs2uQIyP4qcLL_5oxttl:
 1324|   649k|    fn parse_relative_slash(&mut self, base: &IriRef<&'a str>) -> Result<(), IriParseError> {
 1325|   649k|        if self.input.starts_with('/') {
 1326|  28.8k|            self.input.next();
 1327|  28.8k|            self.output.push_str(&base.iri[..base.positions.scheme_end]);
 1328|  28.8k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1329|  28.8k|            self.output.push('/');
 1330|  28.8k|            self.output.push('/');
 1331|  28.8k|            self.parse_authority()
 1332|       |        } else {
 1333|   620k|            self.output
 1334|   620k|                .push_str(&base.iri[..base.positions.authority_end]);
 1335|   620k|            self.output.push('/');
 1336|   620k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1337|   620k|            self.output_positions.authority_end = base.positions.authority_end;
 1338|   620k|            self.parse_path()
 1339|       |        }
 1340|   649k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb0_E23parse_path_or_authorityCs2uQIyP4qcLL_5oxttl:
 1252|  15.4k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|  15.4k|        if self.input.starts_with('/') {
 1254|  14.1k|            self.input.next();
 1255|  14.1k|            self.output.push('/');
 1256|  14.1k|            self.parse_authority()
 1257|       |        } else {
 1258|  1.29k|            self.output_positions.authority_end = self.output.len() - 1;
 1259|  1.29k|            self.parse_path()
 1260|       |        }
 1261|  15.4k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb0_E27read_url_codepoint_or_echarCs2uQIyP4qcLL_5oxttl:
 1523|  2.80M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|  2.80M|        if UNCHECKED || is_url_code_point(c) {
 1525|  2.67M|            self.output.push(c);
 1526|  2.67M|            Ok(())
 1527|   126k|        } else if c == '%' {
 1528|  6.42k|            self.read_echar()
 1529|       |        } else {
 1530|   120k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|  2.80M|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb0_E33read_url_query_codepoint_or_echarCs2uQIyP4qcLL_5oxttl:
 1535|   308k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|   308k|        if UNCHECKED || is_url_query_code_point(c) {
 1537|   296k|            self.output.push(c);
 1538|   296k|            Ok(())
 1539|  12.1k|        } else if c == '%' {
 1540|  2.95k|            self.read_echar()
 1541|       |        } else {
 1542|  9.15k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|   308k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb0_E5parseCs2uQIyP4qcLL_5oxttl:
 1187|  1.10M|    fn parse(
 1188|  1.10M|        iri: &'a str,
 1189|  1.10M|        base: Option<IriRef<&'a str>>,
 1190|  1.10M|        output: &'a mut O,
 1191|  1.10M|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|  1.10M|        let mut parser = Self {
 1193|  1.10M|            iri,
 1194|  1.10M|            base,
 1195|  1.10M|            input: ParserInput {
 1196|  1.10M|                value: iri.chars(),
 1197|  1.10M|                position: 0,
 1198|  1.10M|            },
 1199|  1.10M|            output,
 1200|  1.10M|            output_positions: IriElementsPositions {
 1201|  1.10M|                scheme_end: 0,
 1202|  1.10M|                authority_end: 0,
 1203|  1.10M|                path_end: 0,
 1204|  1.10M|                query_end: 0,
 1205|  1.10M|            },
 1206|  1.10M|            input_scheme_end: 0,
 1207|  1.10M|        };
 1208|  1.10M|        parser.parse_scheme_start()?;
 1209|   963k|        Ok(parser.output_positions)
 1210|  1.10M|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb1_E10parse_hostCs2uQIyP4qcLL_5oxttl:
 1366|  21.4k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|  21.4k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|  1.90k|            let start_position = self.input.position;
 1370|  49.8k|            while let Some(c) = self.input.next() {
 1371|  49.0k|                self.output.push(c);
 1372|  49.0k|                if c == ']' {
 1373|  1.20k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|  1.20k|                    if !UNCHECKED {
 1375|      0|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|      0|                        }
 1378|  1.20k|                    }
 1379|       |
 1380|  1.20k|                    let c = self.input.next();
 1381|  1.20k|                    return match c {
 1382|       |                        Some(':') => {
 1383|    163|                            self.output.push(':');
 1384|    163|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|    512|                            self.output_positions.authority_end = self.output.len();
 1388|    512|                            self.parse_path_start(c)
 1389|       |                        }
 1390|    529|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|  47.8k|                }
 1393|       |            }
 1394|    703|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|   284k|            loop {
 1398|   284k|                let c = self.input.next();
 1399|   284k|                match c {
 1400|       |                    Some(':') => {
 1401|  4.52k|                        self.output.push(':');
 1402|  4.52k|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|  14.9k|                        self.output_positions.authority_end = self.output.len();
 1406|  14.9k|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|   264k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|  21.4k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb1_E10parse_pathCs2uQIyP4qcLL_5oxttl:
 1457|   502k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|  2.34M|        loop {
 1459|  2.34M|            let c = self.input.next();
 1460|  2.34M|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|   641k|                    if self.output.as_str().ends_with("/..") {
 1463|    979|                        self.remove_last_segment();
 1464|    979|                        self.remove_last_segment();
 1465|    979|                        self.output.push('/');
 1466|   640k|                    } else if self.output.as_str().ends_with("/.") {
 1467|   382k|                        self.remove_last_segment();
 1468|   382k|                        self.output.push('/');
 1469|   382k|                    } else if c == Some('/') {
 1470|   138k|                        self.output.push('/');
 1471|   138k|                    }
 1472|       |
 1473|   641k|                    if c == Some('?') {
 1474|  5.40k|                        self.output_positions.path_end = self.output.len();
 1475|  5.40k|                        self.output.push('?');
 1476|  5.40k|                        return self.parse_query();
 1477|   636k|                    } else if c == Some('#') {
 1478|  3.57k|                        self.output_positions.path_end = self.output.len();
 1479|  3.57k|                        self.output_positions.query_end = self.output.len();
 1480|  3.57k|                        self.output.push('#');
 1481|  3.57k|                        return self.parse_fragment();
 1482|   632k|                    } else if c.is_none() {
 1483|   493k|                        self.output_positions.path_end = self.output.len();
 1484|   493k|                        self.output_positions.query_end = self.output.len();
 1485|   493k|                        return Ok(());
 1486|   139k|                    }
 1487|       |                }
 1488|  1.70M|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|   502k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb1_E10parse_portCs2uQIyP4qcLL_5oxttl:
 1414|  4.68k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|  9.14k|        loop {
 1416|  9.14k|            let c = self.input.next();
 1417|  8.29k|            match c {
 1418|  8.29k|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|  2.91k|                    self.output_positions.authority_end = self.output.len();
 1421|  2.91k|                    return self.parse_path_start(c);
 1422|       |                }
 1423|  1.76k|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|  4.68k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb1_E11parse_queryCs2uQIyP4qcLL_5oxttl:
 1493|  18.3k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|   237k|        while let Some(c) = self.input.next() {
 1495|   219k|            if c == '#' {
 1496|    923|                self.output_positions.query_end = self.output.len();
 1497|    923|                self.output.push('#');
 1498|    923|                return self.parse_fragment();
 1499|       |            } else {
 1500|   218k|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|  17.4k|        self.output_positions.query_end = self.output.len();
 1504|  17.4k|        Ok(())
 1505|  18.3k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb1_E12parse_schemeCs2uQIyP4qcLL_5oxttl:
 1220|  71.2k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|   274k|        loop {
 1222|   274k|            let c = self.input.next();
 1223|   264k|            match c {
 1224|   264k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|   203k|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|  19.9k|                    self.output.push(':');
 1229|  19.9k|                    self.output_positions.scheme_end = self.output.len();
 1230|  19.9k|                    self.input_scheme_end = self.input.position;
 1231|  19.9k|                    return if self.input.starts_with('/') {
 1232|  7.65k|                        self.input.next();
 1233|  7.65k|                        self.output.push('/');
 1234|  7.65k|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|  12.3k|                        self.output_positions.authority_end = self.output.len();
 1237|  12.3k|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|  51.2k|                    self.input = ParserInput {
 1242|  51.2k|                        value: self.iri.chars(),
 1243|  51.2k|                        position: 0,
 1244|  51.2k|                    }; // reset
 1245|  51.2k|                    self.output.clear();
 1246|  51.2k|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|  71.2k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb1_E14parse_fragmentCs2uQIyP4qcLL_5oxttl:
 1507|  6.57k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|  76.0k|        while let Some(c) = self.input.next() {
 1509|  69.4k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|  6.57k|        Ok(())
 1512|  6.57k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb1_E14parse_relativeCs2uQIyP4qcLL_5oxttl:
 1263|   529k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1264|   529k|        if let Some(base) = self.base {
 1265|   529k|            match self.input.front() {
 1266|       |                None => {
 1267|  20.8k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1268|  20.8k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1269|  20.8k|                    self.output_positions.authority_end = base.positions.authority_end;
 1270|  20.8k|                    self.output_positions.path_end = base.positions.path_end;
 1271|  20.8k|                    self.output_positions.query_end = base.positions.query_end;
 1272|  20.8k|                    Ok(())
 1273|       |                }
 1274|       |                Some('/') => {
 1275|   323k|                    self.input.next();
 1276|   323k|                    self.parse_relative_slash(&base)
 1277|       |                }
 1278|       |                Some('?') => {
 1279|  11.4k|                    self.input.next();
 1280|  11.4k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1281|  11.4k|                    self.output.push('?');
 1282|  11.4k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1283|  11.4k|                    self.output_positions.authority_end = base.positions.authority_end;
 1284|  11.4k|                    self.output_positions.path_end = base.positions.path_end;
 1285|  11.4k|                    self.parse_query()
 1286|       |                }
 1287|       |                Some('#') => {
 1288|  1.68k|                    self.input.next();
 1289|  1.68k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1290|  1.68k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1291|  1.68k|                    self.output_positions.authority_end = base.positions.authority_end;
 1292|  1.68k|                    self.output_positions.path_end = base.positions.path_end;
 1293|  1.68k|                    self.output_positions.query_end = base.positions.query_end;
 1294|  1.68k|                    self.output.push('#');
 1295|  1.68k|                    self.parse_fragment()
 1296|       |                }
 1297|       |                _ => {
 1298|   171k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1299|   171k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1300|   171k|                    self.output_positions.authority_end = base.positions.authority_end;
 1301|   171k|                    self.output_positions.path_end = base.positions.path_end;
 1302|   171k|                    self.remove_last_segment();
 1303|   171k|                    if self.output.len() > base.positions.scheme_end {
 1304|   152k|                        // We have some path or authority, we keep a base '/'
 1305|   152k|                        self.output.push('/');
 1306|   152k|                    }
 1307|   171k|                    self.parse_path()
 1308|       |                }
 1309|       |            }
 1310|       |        } else {
 1311|      0|            self.output_positions.scheme_end = 0;
 1312|      0|            self.input_scheme_end = 0;
 1313|      0|            if self.input.starts_with('/') {
 1314|      0|                self.input.next();
 1315|      0|                self.output.push('/');
 1316|      0|                self.parse_path_or_authority()
 1317|       |            } else {
 1318|      0|                self.output_positions.authority_end = 0;
 1319|      0|                self.parse_path()
 1320|       |            }
 1321|       |        }
 1322|   529k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb1_E15parse_authorityCs2uQIyP4qcLL_5oxttl:
 1342|  21.4k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|   306k|        loop {
 1345|   306k|            let c = self.input.next();
 1346|   306k|            match c {
 1347|       |                Some('@') => {
 1348|    458|                    self.output.push('@');
 1349|    458|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|  20.9k|                    self.input = ParserInput {
 1353|  20.9k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|  20.9k|                        position: self.input_scheme_end + 2,
 1355|  20.9k|                    };
 1356|  20.9k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|  20.9k|                    return self.parse_host();
 1358|       |                }
 1359|   285k|                Some(c) => {
 1360|   285k|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|  21.4k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb1_E16parse_path_startCs2uQIyP4qcLL_5oxttl:
 1428|  18.4k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|  18.4k|        match c {
 1430|       |            None => {
 1431|  8.29k|                self.output_positions.path_end = self.output.len();
 1432|  8.29k|                self.output_positions.query_end = self.output.len();
 1433|  8.29k|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|  1.57k|                self.output_positions.path_end = self.output.len();
 1437|  1.57k|                self.output.push('?');
 1438|  1.57k|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|    388|                self.output_positions.path_end = self.output.len();
 1442|    388|                self.output_positions.query_end = self.output.len();
 1443|    388|                self.output.push('#');
 1444|    388|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|  8.16k|                self.output.push('/');
 1448|  8.16k|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|  18.4k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb1_E18parse_scheme_startCs2uQIyP4qcLL_5oxttl:
 1212|   549k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|   549k|        match self.input.front() {
 1214|    523|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|   528k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|   478k|            _ => self.parse_relative(),
 1217|       |        }
 1218|   549k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb1_E19remove_last_segmentCs2uQIyP4qcLL_5oxttl:
 1514|   556k|    fn remove_last_segment(&mut self) {
 1515|   556k|        let last_slash_position = self.output.as_str()[self.output_positions.authority_end..]
 1516|   556k|            .rfind('/')
 1517|   556k|            .unwrap_or(0);
 1518|   556k|        self.output
 1519|   556k|            .truncate(last_slash_position + self.output_positions.authority_end)
 1520|   556k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb1_E20parse_relative_slashCs2uQIyP4qcLL_5oxttl:
 1324|   323k|    fn parse_relative_slash(&mut self, base: &IriRef<&'a str>) -> Result<(), IriParseError> {
 1325|   323k|        if self.input.starts_with('/') {
 1326|  14.4k|            self.input.next();
 1327|  14.4k|            self.output.push_str(&base.iri[..base.positions.scheme_end]);
 1328|  14.4k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1329|  14.4k|            self.output.push('/');
 1330|  14.4k|            self.output.push('/');
 1331|  14.4k|            self.parse_authority()
 1332|       |        } else {
 1333|   309k|            self.output
 1334|   309k|                .push_str(&base.iri[..base.positions.authority_end]);
 1335|   309k|            self.output.push('/');
 1336|   309k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1337|   309k|            self.output_positions.authority_end = base.positions.authority_end;
 1338|   309k|            self.parse_path()
 1339|       |        }
 1340|   323k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb1_E23parse_path_or_authorityCs2uQIyP4qcLL_5oxttl:
 1252|  7.65k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|  7.65k|        if self.input.starts_with('/') {
 1254|  7.01k|            self.input.next();
 1255|  7.01k|            self.output.push('/');
 1256|  7.01k|            self.parse_authority()
 1257|       |        } else {
 1258|    640|            self.output_positions.authority_end = self.output.len() - 1;
 1259|    640|            self.parse_path()
 1260|       |        }
 1261|  7.65k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb1_E27read_url_codepoint_or_echarCs2uQIyP4qcLL_5oxttl:
 1523|  2.32M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|  2.32M|        if UNCHECKED || is_url_code_point(c) {
 1525|  2.32M|            self.output.push(c);
 1526|  2.32M|            Ok(())
 1527|      0|        } else if c == '%' {
 1528|      0|            self.read_echar()
 1529|       |        } else {
 1530|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|  2.32M|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb1_E33read_url_query_codepoint_or_echarCs2uQIyP4qcLL_5oxttl:
 1535|   218k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|   218k|        if UNCHECKED || is_url_query_code_point(c) {
 1537|   218k|            self.output.push(c);
 1538|   218k|            Ok(())
 1539|      0|        } else if c == '%' {
 1540|      0|            self.read_echar()
 1541|       |        } else {
 1542|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|   218k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtNtCs5pYOfYKUd9L_5alloc6string6StringKb1_E5parseCs2uQIyP4qcLL_5oxttl:
 1187|   549k|    fn parse(
 1188|   549k|        iri: &'a str,
 1189|   549k|        base: Option<IriRef<&'a str>>,
 1190|   549k|        output: &'a mut O,
 1191|   549k|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|   549k|        let mut parser = Self {
 1193|   549k|            iri,
 1194|   549k|            base,
 1195|   549k|            input: ParserInput {
 1196|   549k|                value: iri.chars(),
 1197|   549k|                position: 0,
 1198|   549k|            },
 1199|   549k|            output,
 1200|   549k|            output_positions: IriElementsPositions {
 1201|   549k|                scheme_end: 0,
 1202|   549k|                authority_end: 0,
 1203|   549k|                path_end: 0,
 1204|   549k|                query_end: 0,
 1205|   549k|            },
 1206|   549k|            input_scheme_end: 0,
 1207|   549k|        };
 1208|   549k|        parser.parse_scheme_start()?;
 1209|   546k|        Ok(parser.output_positions)
 1210|   549k|    }
_RNvMsp_CslzvX0fW9aVw_5oxiriINtB5_3IriNtNtCs5pYOfYKUd9L_5alloc6string6StringE15parse_uncheckedCs2uQIyP4qcLL_5oxttl:
  574|  27.7k|    pub fn parse_unchecked(iri: T) -> Result<Self, IriParseError> {
  575|  27.7k|        IriRef::parse_unchecked(iri)?.try_into()
  576|  27.7k|    }
_RNvMsp_CslzvX0fW9aVw_5oxiriINtB5_3IriNtNtCs5pYOfYKUd9L_5alloc6string6StringE17resolve_uncheckedCs2uQIyP4qcLL_5oxttl:
  605|   549k|    pub fn resolve_unchecked(&self, iri: &str) -> Result<Iri<String>, IriParseError> {
  606|   549k|        Ok(Iri(self.0.resolve_unchecked(iri)?))
  607|   549k|    }
_RNvMsp_CslzvX0fW9aVw_5oxiriINtB5_3IriNtNtCs5pYOfYKUd9L_5alloc6string6StringE4pathCs2uQIyP4qcLL_5oxttl:
  730|  16.3k|    pub fn path(&self) -> &str {
  731|  16.3k|        self.0.path()
  732|  16.3k|    }
_RNvMsp_CslzvX0fW9aVw_5oxiriINtB5_3IriNtNtCs5pYOfYKUd9L_5alloc6string6StringE6as_strCs2uQIyP4qcLL_5oxttl:
  664|  5.88k|    pub fn as_str(&self) -> &str {
  665|  5.88k|        self.0.as_str()
  666|  5.88k|    }
_RNvMsp_CslzvX0fW9aVw_5oxiriINtB5_3IriNtNtCs5pYOfYKUd9L_5alloc6string6StringE7resolveCs2uQIyP4qcLL_5oxttl:
  591|  1.10M|    pub fn resolve(&self, iri: &str) -> Result<Iri<String>, IriParseError> {
  592|  1.10M|        Ok(Iri(self.0.resolve(iri)?))
  593|  1.10M|    }
_RNvXsL_CslzvX0fW9aVw_5oxiriINtB5_3IriNtNtCs5pYOfYKUd9L_5alloc6string6StringENtNtCslA8OvuvDMgt_4core3fmt7Display3fmtCs2uQIyP4qcLL_5oxttl:
  909|  41.1k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  910|  41.1k|        self.0.fmt(f)
  911|  41.1k|    }
_RNvXsg_CslzvX0fW9aVw_5oxiriINtB5_6IriRefNtNtCs5pYOfYKUd9L_5alloc6string6StringENtNtCslA8OvuvDMgt_4core3fmt7Display3fmtCs2uQIyP4qcLL_5oxttl:
  423|  41.1k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  424|  41.1k|        self.iri.fmt(f)
  425|  41.1k|    }
_RNvXsZ_CslzvX0fW9aVw_5oxiriNtNtCs5pYOfYKUd9L_5alloc6string6StringNtB5_12OutputBuffer3lenCs2uQIyP4qcLL_5oxttl:
 1137|  3.52M|    fn len(&self) -> usize {
 1138|  3.52M|        self.len()
 1139|  3.52M|    }
_RNvXsZ_CslzvX0fW9aVw_5oxiriNtNtCs5pYOfYKUd9L_5alloc6string6StringNtB5_12OutputBuffer4pushCs2uQIyP4qcLL_5oxttl:
 1117|  9.39M|    fn push(&mut self, c: char) {
 1118|  9.39M|        self.push(c);
 1119|  9.39M|    }
_RNvXsZ_CslzvX0fW9aVw_5oxiriNtNtCs5pYOfYKUd9L_5alloc6string6StringNtB5_12OutputBuffer5clearCs2uQIyP4qcLL_5oxttl:
 1127|   154k|    fn clear(&mut self) {
 1128|   154k|        self.clear();
 1129|   154k|    }
_RNvXsZ_CslzvX0fW9aVw_5oxiriNtNtCs5pYOfYKUd9L_5alloc6string6StringNtB5_12OutputBuffer6as_strCs2uQIyP4qcLL_5oxttl:
 1142|  5.06M|    fn as_str(&self) -> &str {
 1143|  5.06M|        self.as_str()
 1144|  5.06M|    }
_RNvXsZ_CslzvX0fW9aVw_5oxiriNtNtCs5pYOfYKUd9L_5alloc6string6StringNtB5_12OutputBuffer8push_strCs2uQIyP4qcLL_5oxttl:
 1122|  1.59M|    fn push_str(&mut self, s: &str) {
 1123|  1.59M|        self.push_str(s);
 1124|  1.59M|    }
_RNvXsZ_CslzvX0fW9aVw_5oxiriNtNtCs5pYOfYKUd9L_5alloc6string6StringNtB5_12OutputBuffer8truncateCs2uQIyP4qcLL_5oxttl:
 1132|  1.64M|    fn truncate(&mut self, new_len: usize) {
 1133|  1.64M|        self.truncate(new_len);
 1134|  1.64M|    }
_RNvCslzvX0fW9aVw_5oxiri17is_url_code_pointCs2uQIyP4qcLL_5oxttl:
 1573|  3.11M|fn is_url_code_point(c: char) -> bool {
 1574|  3.11M|    matches!(c,
 1575|   409k|        'a'..='z'
 1576|   814k|        | 'A'..='Z'
 1577|   761k|        | '0'..='9'
 1578|       |        | '!'
 1579|       |        | '$'
 1580|       |        | '&'
 1581|       |        | '\''
 1582|       |        | '('
 1583|       |        | ')'
 1584|       |        | '*'
 1585|       |        | '+'
 1586|       |        | ','
 1587|       |        | '-'
 1588|       |        | '.'
 1589|       |        | '/'
 1590|       |        | ':'
 1591|       |        | ';'
 1592|       |        | '='
 1593|       |        | '?'
 1594|       |        | '@'
 1595|       |        | '_'
 1596|       |        | '~'
 1597|  34.6k|        | '\u{A0}'..='\u{D7FF}'
 1598|  5.43k|        | '\u{F900}'..='\u{FDCF}'
 1599|  3.27k|        | '\u{FDF0}'..='\u{FFEF}'
 1600|  3.27k|        | '\u{10000}'..='\u{1FFFD}'
 1601|  3.27k|        | '\u{20000}'..='\u{2FFFD}'
 1602|  3.20k|        | '\u{30000}'..='\u{3FFFD}'
 1603|  3.20k|        | '\u{40000}'..='\u{4FFFD}'
 1604|    930|        | '\u{50000}'..='\u{5FFFD}'
 1605|    930|        | '\u{60000}'..='\u{6FFFD}'
 1606|    930|        | '\u{70000}'..='\u{7FFFD}'
 1607|    930|        | '\u{80000}'..='\u{8FFFD}'
 1608|    930|        | '\u{90000}'..='\u{9FFFD}'
 1609|    930|        | '\u{A0000}'..='\u{AFFFD}'
 1610|      4|        | '\u{B0000}'..='\u{BFFFD}'
 1611|      0|        | '\u{C0000}'..='\u{CFFFD}'
 1612|      0|        | '\u{D0000}'..='\u{DFFFD}'
 1613|      0|        | '\u{E1000}'..='\u{EFFFD}'
 1614|       |    )
 1615|  3.11M|}
_RNvCslzvX0fW9aVw_5oxiri23is_url_query_code_pointCs2uQIyP4qcLL_5oxttl:
 1618|   308k|fn is_url_query_code_point(c: char) -> bool {
 1619|   308k|    is_url_code_point(c)
 1620|  16.3k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1621|   308k|}
_RNvMs10_CslzvX0fW9aVw_5oxiriNtB6_11ParserInput11starts_withCs2uQIyP4qcLL_5oxttl:
 1169|  1.17M|    fn starts_with(&self, c: char) -> bool {
 1170|  1.17M|        self.value.as_str().starts_with(c)
 1171|  1.17M|    }
_RNvMs10_CslzvX0fW9aVw_5oxiriNtB6_11ParserInput4nextCs2uQIyP4qcLL_5oxttl:
 1154|  10.5M|    fn next(&mut self) -> Option<char> {
 1155|  10.5M|        if let Some(head) = self.value.next() {
 1156|  9.05M|            self.position += head.len_utf8();
 1157|  9.05M|            Some(head)
 1158|       |        } else {
 1159|  1.53M|            None
 1160|       |        }
 1161|  10.5M|    }
_RNvMs10_CslzvX0fW9aVw_5oxiriNtB6_11ParserInput5frontCs2uQIyP4qcLL_5oxttl:
 1164|  3.27M|    fn front(&self) -> Option<char> {
 1165|  3.27M|        self.value.clone().next()
 1166|  3.27M|    }
_RNvXsY_CslzvX0fW9aVw_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCs2uQIyP4qcLL_5oxttl:
 1105|   110k|    fn len(&self) -> usize {
 1106|   110k|        self.len
 1107|   110k|    }
_RNvXsY_CslzvX0fW9aVw_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCs2uQIyP4qcLL_5oxttl:
 1085|   893k|    fn push(&mut self, c: char) {
 1086|   893k|        self.len += c.len_utf8();
 1087|   893k|    }
_RNvXsY_CslzvX0fW9aVw_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCs2uQIyP4qcLL_5oxttl:
 1110|  51.1k|    fn as_str(&self) -> &str {
 1111|  51.1k|        ""
 1112|  51.1k|    }
_RNvXsY_CslzvX0fW9aVw_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCs2uQIyP4qcLL_5oxttl:
 1100|  22.4k|    fn truncate(&mut self, new_len: usize) {
 1101|  22.4k|        self.len = new_len;
 1102|  22.4k|    }
_RINvMs11_CslzvX0fW9aVw_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECsgSruOWiD3Xy_5oxrdf:
 1567|    544|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1568|    544|        Err(IriParseError { kind })
 1569|    544|    }
_RNCNvMs11_CslzvX0fW9aVw_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0CsgSruOWiD3Xy_5oxrdf:
 1550|  3.85k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_CslzvX0fW9aVw_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0CsgSruOWiD3Xy_5oxrdf:
 1551|  3.85k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMCslzvX0fW9aVw_5oxiriINtB2_6IriRefNtNtCs5pYOfYKUd9L_5alloc6string6StringE10into_innerCsgSruOWiD3Xy_5oxrdf:
  191|  2.07M|    pub fn into_inner(self) -> T {
  192|  2.07M|        self.iri
  193|  2.07M|    }
_RNvMCslzvX0fW9aVw_5oxiriINtB2_6IriRefNtNtCs5pYOfYKUd9L_5alloc6string6StringE11is_absoluteCsgSruOWiD3Xy_5oxrdf:
  205|   646k|    pub fn is_absolute(&self) -> bool {
  206|   646k|        self.positions.scheme_end != 0
  207|   646k|    }
_RNvMCslzvX0fW9aVw_5oxiriINtB2_6IriRefNtNtCs5pYOfYKUd9L_5alloc6string6StringE5parseCsgSruOWiD3Xy_5oxrdf:
   58|   618k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|   618k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|   618k|        Ok(Self { iri, positions })
   61|   618k|    }
_RNvMCslzvX0fW9aVw_5oxiriINtB2_6IriRefReE11is_absoluteCsgSruOWiD3Xy_5oxrdf:
  205|  25.5k|    pub fn is_absolute(&self) -> bool {
  206|  25.5k|        self.positions.scheme_end != 0
  207|  25.5k|    }
_RNvMCslzvX0fW9aVw_5oxiriINtB2_6IriRefReE5parseCsgSruOWiD3Xy_5oxrdf:
   58|  26.0k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  26.0k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  25.5k|        Ok(Self { iri, positions })
   61|  26.0k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCsgSruOWiD3Xy_5oxrdf:
 1366|   594k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|   594k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|      0|            let start_position = self.input.position;
 1370|      0|            while let Some(c) = self.input.next() {
 1371|      0|                self.output.push(c);
 1372|      0|                if c == ']' {
 1373|      0|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|      0|                    if !UNCHECKED {
 1375|      0|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|      0|                        }
 1378|      0|                    }
 1379|       |
 1380|      0|                    let c = self.input.next();
 1381|      0|                    return match c {
 1382|       |                        Some(':') => {
 1383|      0|                            self.output.push(':');
 1384|      0|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|      0|                            self.output_positions.authority_end = self.output.len();
 1388|      0|                            self.parse_path_start(c)
 1389|       |                        }
 1390|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|      0|                }
 1393|       |            }
 1394|      0|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|  6.85M|            loop {
 1398|  6.85M|                let c = self.input.next();
 1399|  6.85M|                match c {
 1400|       |                    Some(':') => {
 1401|  4.37k|                        self.output.push(':');
 1402|  4.37k|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|   590k|                        self.output_positions.authority_end = self.output.len();
 1406|   590k|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|  6.26M|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|   594k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCsgSruOWiD3Xy_5oxrdf:
 1457|   639k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|  6.25M|        loop {
 1459|  6.25M|            let c = self.input.next();
 1460|  6.25M|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|  1.21M|                    if self.output.as_str().ends_with("/..") {
 1463|      0|                        self.remove_last_segment();
 1464|      0|                        self.remove_last_segment();
 1465|      0|                        self.output.push('/');
 1466|  1.21M|                    } else if self.output.as_str().ends_with("/.") {
 1467|      0|                        self.remove_last_segment();
 1468|      0|                        self.output.push('/');
 1469|  1.21M|                    } else if c == Some('/') {
 1470|   577k|                        self.output.push('/');
 1471|   639k|                    }
 1472|       |
 1473|  1.21M|                    if c == Some('?') {
 1474|  5.21k|                        self.output_positions.path_end = self.output.len();
 1475|  5.21k|                        self.output.push('?');
 1476|  5.21k|                        return self.parse_query();
 1477|  1.21M|                    } else if c == Some('#') {
 1478|   209k|                        self.output_positions.path_end = self.output.len();
 1479|   209k|                        self.output_positions.query_end = self.output.len();
 1480|   209k|                        self.output.push('#');
 1481|   209k|                        return self.parse_fragment();
 1482|  1.00M|                    } else if c.is_none() {
 1483|   424k|                        self.output_positions.path_end = self.output.len();
 1484|   424k|                        self.output_positions.query_end = self.output.len();
 1485|   424k|                        return Ok(());
 1486|   577k|                    }
 1487|       |                }
 1488|  5.03M|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|   639k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCsgSruOWiD3Xy_5oxrdf:
 1414|  4.37k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|  7.83k|        loop {
 1416|  7.83k|            let c = self.input.next();
 1417|  7.72k|            match c {
 1418|  7.72k|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|  4.08k|                    self.output_positions.authority_end = self.output.len();
 1421|  4.08k|                    return self.parse_path_start(c);
 1422|       |                }
 1423|    292|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|  4.37k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCsgSruOWiD3Xy_5oxrdf:
 1547|  3.85k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1548|  3.85k|        let c1 = self.input.next();
 1549|  3.85k|        let c2 = self.input.next();
 1550|  3.85k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1551|  3.85k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1552|       |        {
 1553|  3.85k|            self.output.push('%');
 1554|  3.85k|            self.output.push(c1.unwrap());
 1555|  3.85k|            self.output.push(c2.unwrap());
 1556|  3.85k|            Ok(())
 1557|       |        } else {
 1558|      0|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1559|      0|                Some('%'),
 1560|      0|                c1,
 1561|      0|                c2,
 1562|      0|            ]))
 1563|       |        }
 1564|  3.85k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCsgSruOWiD3Xy_5oxrdf:
 1493|  5.86k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|  72.0k|        while let Some(c) = self.input.next() {
 1495|  66.2k|            if c == '#' {
 1496|     72|                self.output_positions.query_end = self.output.len();
 1497|     72|                self.output.push('#');
 1498|     72|                return self.parse_fragment();
 1499|       |            } else {
 1500|  66.2k|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|  5.79k|        self.output_positions.query_end = self.output.len();
 1504|  5.79k|        Ok(())
 1505|  5.86k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCsgSruOWiD3Xy_5oxrdf:
 1220|   644k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|  3.11M|        loop {
 1222|  3.11M|            let c = self.input.next();
 1223|  3.11M|            match c {
 1224|  3.11M|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|  2.46M|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|   644k|                    self.output.push(':');
 1229|   644k|                    self.output_positions.scheme_end = self.output.len();
 1230|   644k|                    self.input_scheme_end = self.input.position;
 1231|   644k|                    return if self.input.starts_with('/') {
 1232|   616k|                        self.input.next();
 1233|   616k|                        self.output.push('/');
 1234|   616k|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|  27.8k|                        self.output_positions.authority_end = self.output.len();
 1237|  27.8k|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|      0|                    self.input = ParserInput {
 1242|      0|                        value: self.iri.chars(),
 1243|      0|                        position: 0,
 1244|      0|                    }; // reset
 1245|      0|                    self.output.clear();
 1246|      0|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|   644k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCsgSruOWiD3Xy_5oxrdf:
 1507|   209k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|  1.18M|        while let Some(c) = self.input.next() {
 1509|   973k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|   209k|        Ok(())
 1512|   209k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCsgSruOWiD3Xy_5oxrdf:
 1342|   594k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|  6.86M|        loop {
 1345|  6.86M|            let c = self.input.next();
 1346|  6.86M|            match c {
 1347|       |                Some('@') => {
 1348|    201|                    self.output.push('@');
 1349|    201|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|   594k|                    self.input = ParserInput {
 1353|   594k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|   594k|                        position: self.input_scheme_end + 2,
 1355|   594k|                    };
 1356|   594k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|   594k|                    return self.parse_host();
 1358|       |                }
 1359|  6.27M|                Some(c) => {
 1360|  6.27M|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|   594k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCsgSruOWiD3Xy_5oxrdf:
 1428|   594k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|   594k|        match c {
 1430|       |            None => {
 1431|  3.81k|                self.output_positions.path_end = self.output.len();
 1432|  3.81k|                self.output_positions.query_end = self.output.len();
 1433|  3.81k|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|    648|                self.output_positions.path_end = self.output.len();
 1437|    648|                self.output.push('?');
 1438|    648|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|    345|                self.output_positions.path_end = self.output.len();
 1442|    345|                self.output_positions.query_end = self.output.len();
 1443|    345|                self.output.push('#');
 1444|    345|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|   589k|                self.output.push('/');
 1448|   589k|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|   594k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCsgSruOWiD3Xy_5oxrdf:
 1212|   644k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|   644k|        match self.input.front() {
 1214|      0|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|   644k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|      0|            _ => self.parse_relative(),
 1217|       |        }
 1218|   644k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCsgSruOWiD3Xy_5oxrdf:
 1252|   616k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|   616k|        if self.input.starts_with('/') {
 1254|   594k|            self.input.next();
 1255|   594k|            self.output.push('/');
 1256|   594k|            self.parse_authority()
 1257|       |        } else {
 1258|  21.9k|            self.output_positions.authority_end = self.output.len() - 1;
 1259|  21.9k|            self.parse_path()
 1260|       |        }
 1261|   616k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarCsgSruOWiD3Xy_5oxrdf:
 1523|  18.5M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|  18.5M|        if UNCHECKED || is_url_code_point(c) {
 1525|  18.5M|            self.output.push(c);
 1526|  18.5M|            Ok(())
 1527|  3.36k|        } else if c == '%' {
 1528|  3.10k|            self.read_echar()
 1529|       |        } else {
 1530|    252|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|  18.5M|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E33read_url_query_codepoint_or_echarCsgSruOWiD3Xy_5oxrdf:
 1535|  66.2k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|  66.2k|        if UNCHECKED || is_url_query_code_point(c) {
 1537|  65.4k|            self.output.push(c);
 1538|  65.4k|            Ok(())
 1539|    748|        } else if c == '%' {
 1540|    748|            self.read_echar()
 1541|       |        } else {
 1542|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|  66.2k|    }
_RNvMs11_CslzvX0fW9aVw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCsgSruOWiD3Xy_5oxrdf:
 1187|   644k|    fn parse(
 1188|   644k|        iri: &'a str,
 1189|   644k|        base: Option<IriRef<&'a str>>,
 1190|   644k|        output: &'a mut O,
 1191|   644k|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|   644k|        let mut parser = Self {
 1193|   644k|            iri,
 1194|   644k|            base,
 1195|   644k|            input: ParserInput {
 1196|   644k|                value: iri.chars(),
 1197|   644k|                position: 0,
 1198|   644k|            },
 1199|   644k|            output,
 1200|   644k|            output_positions: IriElementsPositions {
 1201|   644k|                scheme_end: 0,
 1202|   644k|                authority_end: 0,
 1203|   644k|                path_end: 0,
 1204|   644k|                query_end: 0,
 1205|   644k|            },
 1206|   644k|            input_scheme_end: 0,
 1207|   644k|        };
 1208|   644k|        parser.parse_scheme_start()?;
 1209|   643k|        Ok(parser.output_positions)
 1210|   644k|    }
_RNvMsp_CslzvX0fW9aVw_5oxiriINtB5_3IriNtNtCs5pYOfYKUd9L_5alloc6string6StringE10into_innerCsgSruOWiD3Xy_5oxrdf:
  678|  2.07M|    pub fn into_inner(self) -> T {
  679|  2.07M|        self.0.into_inner()
  680|  2.07M|    }
_RNvMsp_CslzvX0fW9aVw_5oxiriINtB5_3IriNtNtCs5pYOfYKUd9L_5alloc6string6StringE5parseCsgSruOWiD3Xy_5oxrdf:
  562|   618k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  563|   618k|        IriRef::parse(iri)?.try_into()
  564|   618k|    }
_RNvMsp_CslzvX0fW9aVw_5oxiriINtB5_3IriReE5parseCsgSruOWiD3Xy_5oxrdf:
  562|  26.0k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  563|  26.0k|        IriRef::parse(iri)?.try_into()
  564|  26.0k|    }
_RNvXsV_CslzvX0fW9aVw_5oxiriINtB5_3IriNtNtCs5pYOfYKUd9L_5alloc6string6StringEINtNtCslA8OvuvDMgt_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsgSruOWiD3Xy_5oxrdf:
  981|   646k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  982|   646k|        if iri.is_absolute() {
  983|   646k|            Ok(Self(iri))
  984|       |        } else {
  985|      0|            Err(IriParseError {
  986|      0|                kind: IriParseErrorKind::NoScheme,
  987|      0|            })
  988|       |        }
  989|   646k|    }
_RNvXsV_CslzvX0fW9aVw_5oxiriINtB5_3IriReEINtNtCslA8OvuvDMgt_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsgSruOWiD3Xy_5oxrdf:
  981|  25.5k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  982|  25.5k|        if iri.is_absolute() {
  983|  25.5k|            Ok(Self(iri))
  984|       |        } else {
  985|      0|            Err(IriParseError {
  986|      0|                kind: IriParseErrorKind::NoScheme,
  987|      0|            })
  988|       |        }
  989|  25.5k|    }
_RNvCslzvX0fW9aVw_5oxiri17is_url_code_pointCsgSruOWiD3Xy_5oxrdf:
 1573|  18.6M|fn is_url_code_point(c: char) -> bool {
 1574|  18.6M|    matches!(c,
 1575|  13.7M|        'a'..='z'
 1576|   173k|        | 'A'..='Z'
 1577|  2.40M|        | '0'..='9'
 1578|       |        | '!'
 1579|       |        | '$'
 1580|       |        | '&'
 1581|       |        | '\''
 1582|       |        | '('
 1583|       |        | ')'
 1584|       |        | '*'
 1585|       |        | '+'
 1586|       |        | ','
 1587|       |        | '-'
 1588|       |        | '.'
 1589|       |        | '/'
 1590|       |        | ':'
 1591|       |        | ';'
 1592|       |        | '='
 1593|       |        | '?'
 1594|       |        | '@'
 1595|       |        | '_'
 1596|       |        | '~'
 1597|  12.2k|        | '\u{A0}'..='\u{D7FF}'
 1598|  1.32k|        | '\u{F900}'..='\u{FDCF}'
 1599|    443|        | '\u{FDF0}'..='\u{FFEF}'
 1600|    443|        | '\u{10000}'..='\u{1FFFD}'
 1601|    443|        | '\u{20000}'..='\u{2FFFD}'
 1602|    443|        | '\u{30000}'..='\u{3FFFD}'
 1603|    443|        | '\u{40000}'..='\u{4FFFD}'
 1604|    306|        | '\u{50000}'..='\u{5FFFD}'
 1605|    306|        | '\u{60000}'..='\u{6FFFD}'
 1606|    306|        | '\u{70000}'..='\u{7FFFD}'
 1607|    306|        | '\u{80000}'..='\u{8FFFD}'
 1608|    306|        | '\u{90000}'..='\u{9FFFD}'
 1609|    306|        | '\u{A0000}'..='\u{AFFFD}'
 1610|      2|        | '\u{B0000}'..='\u{BFFFD}'
 1611|      0|        | '\u{C0000}'..='\u{CFFFD}'
 1612|      0|        | '\u{D0000}'..='\u{DFFFD}'
 1613|      0|        | '\u{E1000}'..='\u{EFFFD}'
 1614|       |    )
 1615|  18.6M|}
_RNvCslzvX0fW9aVw_5oxiri23is_url_query_code_pointCsgSruOWiD3Xy_5oxrdf:
 1618|  66.2k|fn is_url_query_code_point(c: char) -> bool {
 1619|  66.2k|    is_url_code_point(c)
 1620|  2.78k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1621|  66.2k|}
_RNvMs10_CslzvX0fW9aVw_5oxiriNtB6_11ParserInput11starts_withCsgSruOWiD3Xy_5oxrdf:
 1169|  1.85M|    fn starts_with(&self, c: char) -> bool {
 1170|  1.85M|        self.value.as_str().starts_with(c)
 1171|  1.85M|    }
_RNvMs10_CslzvX0fW9aVw_5oxiriNtB6_11ParserInput4nextCsgSruOWiD3Xy_5oxrdf:
 1154|  25.5M|    fn next(&mut self) -> Option<char> {
 1155|  25.5M|        if let Some(head) = self.value.next() {
 1156|  24.9M|            self.position += head.len_utf8();
 1157|  24.9M|            Some(head)
 1158|       |        } else {
 1159|   647k|            None
 1160|       |        }
 1161|  25.5M|    }
_RNvMs10_CslzvX0fW9aVw_5oxiriNtB6_11ParserInput5frontCsgSruOWiD3Xy_5oxrdf:
 1164|   644k|    fn front(&self) -> Option<char> {
 1165|   644k|        self.value.clone().next()
 1166|   644k|    }
_RNvXsY_CslzvX0fW9aVw_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCsgSruOWiD3Xy_5oxrdf:
 1105|  2.57M|    fn len(&self) -> usize {
 1106|  2.57M|        self.len
 1107|  2.57M|    }
_RNvXsY_CslzvX0fW9aVw_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsgSruOWiD3Xy_5oxrdf:
 1085|  24.3M|    fn push(&mut self, c: char) {
 1086|  24.3M|        self.len += c.len_utf8();
 1087|  24.3M|    }
_RNvXsY_CslzvX0fW9aVw_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCsgSruOWiD3Xy_5oxrdf:
 1110|  2.43M|    fn as_str(&self) -> &str {
 1111|  2.43M|        ""
 1112|  2.43M|    }
_RNvXsY_CslzvX0fW9aVw_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCsgSruOWiD3Xy_5oxrdf:
 1100|   594k|    fn truncate(&mut self, new_len: usize) {
 1101|   594k|        self.len = new_len;
 1102|   594k|    }
_RNvXsW_CslzvX0fW9aVw_5oxiriNtB5_13IriParseErrorNtNtCslA8OvuvDMgt_4core3fmt7Display3fmt:
 1016|   143k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1017|   143k|        match &self.kind {
 1018|  1.56k|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
 1019|  2.64k|            IriParseErrorKind::InvalidHostCharacter(c) => {
 1020|  2.64k|                write!(f, "Invalid character '{c}' in host")
 1021|       |            }
 1022|  2.43k|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({e})"),
 1023|  2.52k|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{c}'"),
 1024|   129k|            IriParseErrorKind::InvalidIriCodePoint(c) => {
 1025|   129k|                write!(f, "Invalid IRI code point '{c}'")
 1026|       |            }
 1027|  5.02k|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
 1028|  5.02k|                f,
 1029|  5.02k|                "Invalid IRI percent encoding '{}'",
 1030|  5.02k|                cs.iter().flatten().cloned().collect::<String>()
 1031|  5.02k|            ),
 1032|       |        }
 1033|   143k|    }

_RNvMNtCslNVBjosHlRm_10ppv_lite864softINtB2_2x2INtNtNtNtB4_6x86_644sse24avx212u32x4x2_avx2NtBP_4NoNIENtBN_2G0E3newCsaGtorKw9Zus_11rand_chacha:
   13|  10.6M|    pub fn new(xs: [W; 2]) -> Self {
   14|  10.6M|        x2(xs, PhantomData)
   15|  10.6M|    }
_RNvXsG_NtCslNVBjosHlRm_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCslA8OvuvDMgt_4core3ops3bit6BitXor6bitxorCsaGtorKw9Zus_11rand_chacha:
   22|  3.73M|            fn $fn(self, rhs: Self) -> Self::Output {
   23|  3.73M|                x2::new([self.0[0].$fn(rhs.0[0]), self.0[1].$fn(rhs.0[1])])
   24|  3.73M|            }
_RNvXsM_NtCslNVBjosHlRm_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCslA8OvuvDMgt_4core3ops5arith9AddAssign10add_assignCsaGtorKw9Zus_11rand_chacha:
   32|  3.73M|            fn $fn_assign(&mut self, rhs: Self) {
   33|  3.73M|                (self.0[0]).$fn_assign(rhs.0[0]);
   34|  3.73M|                (self.0[1]).$fn_assign(rhs.0[1]);
   35|  3.73M|            }
_RNvXs_NtCslNVBjosHlRm_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right16CsaGtorKw9Zus_11rand_chacha:
   42|   934k|        fn $fn(self) -> Self {
   43|   934k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   934k|        }
_RNvXs_NtCslNVBjosHlRm_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right20CsaGtorKw9Zus_11rand_chacha:
   42|   934k|        fn $fn(self) -> Self {
   43|   934k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   934k|        }
_RNvXs_NtCslNVBjosHlRm_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right24CsaGtorKw9Zus_11rand_chacha:
   42|   934k|        fn $fn(self) -> Self {
   43|   934k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   934k|        }
_RNvXs_NtCslNVBjosHlRm_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right25CsaGtorKw9Zus_11rand_chacha:
   42|   934k|        fn $fn(self) -> Self {
   43|   934k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   934k|        }
_RNvXsg_NtCslNVBjosHlRm_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words1230CsaGtorKw9Zus_11rand_chacha:
  208|   934k|    fn shuffle_lane_words1230(self) -> Self {
  209|   934k|        Self::new([
  210|   934k|            self.0[0].shuffle_lane_words1230(),
  211|   934k|            self.0[1].shuffle_lane_words1230(),
  212|   934k|        ])
  213|   934k|    }
_RNvXsg_NtCslNVBjosHlRm_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words2301CsaGtorKw9Zus_11rand_chacha:
  201|   934k|    fn shuffle_lane_words2301(self) -> Self {
  202|   934k|        Self::new([
  203|   934k|            self.0[0].shuffle_lane_words2301(),
  204|   934k|            self.0[1].shuffle_lane_words2301(),
  205|   934k|        ])
  206|   934k|    }
_RNvXsg_NtCslNVBjosHlRm_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words3012CsaGtorKw9Zus_11rand_chacha:
  215|   934k|    fn shuffle_lane_words3012(self) -> Self {
  216|   934k|        Self::new([
  217|   934k|            self.0[0].shuffle_lane_words3012(),
  218|   934k|            self.0[1].shuffle_lane_words3012(),
  219|   934k|        ])
  220|   934k|    }

_RINvYINtNtCslNVBjosHlRm_10ppv_lite866x86_6410SseMachineNtB6_5YesS3NtB6_5YesS4NtB6_4NoNIENtNtB8_5types7Machine7read_leINtNtB6_4sse210u32x4_sse2BR_B12_B1d_EECsaGtorKw9Zus_11rand_chacha:
  259|    610|    fn read_le<V>(self, input: &[u8]) -> V
  260|    610|    where
  261|    610|        V: StoreBytes,
  262|    610|    {
  263|    610|        unsafe { V::unsafe_read_le(input) }
  264|    610|    }
_RINvYINtNtCslNVBjosHlRm_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine3vecINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EAmj4_ECsaGtorKw9Zus_11rand_chacha:
  251|  77.8k|    fn vec<V, A>(self, a: A) -> V
  252|  77.8k|    where
  253|  77.8k|        V: MultiLane<A>,
  254|  77.8k|    {
  255|  77.8k|        V::from_lanes(a)
  256|  77.8k|    }
_RINvYINtNtCslNVBjosHlRm_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec128_storageINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EECsaGtorKw9Zus_11rand_chacha:
  246|   700k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|   700k|        unsafe { V::unpack(s) }
  248|   700k|    }
_RINvYINtNtCslNVBjosHlRm_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec512_storageINtNtB8_4soft2x2INtNtNtB6_4sse24avx212u32x4x2_avx2BS_ENtB2b_2G0EECsaGtorKw9Zus_11rand_chacha:
  246|  77.8k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|  77.8k|        unsafe { V::unpack(s) }
  248|  77.8k|    }

_RNvXNtCslNVBjosHlRm_10ppv_lite866x86_64INtB2_10SseMachineNtB2_5YesS3NtB2_5YesS4NtB2_4NoNIENtNtB4_5types7Machine8instanceCsaGtorKw9Zus_11rand_chacha:
   64|    305|    unsafe fn instance() -> Self {
   65|    305|        SseMachine(PhantomData)
   66|    305|    }
_RNvXs_NtCslNVBjosHlRm_10ppv_lite866x86_64INtB4_11Avx2MachineNtB4_4NoNIENtNtB6_5types7Machine8instanceCsaGtorKw9Zus_11rand_chacha:
   92|  77.8k|    unsafe fn instance() -> Self {
   93|  77.8k|        Avx2Machine(PhantomData)
   94|  77.8k|    }
_RNvNtCsaGtorKw9Zus_11rand_chacha4guts11refill_wide:
  250|  77.8k|        $($pub$(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  251|  77.8k|            #[inline(always)]
  252|  77.8k|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  253|  77.8k|            use std::arch::x86_64::*;
  254|  77.8k|            #[target_feature(enable = "avx2")]
  255|  77.8k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  77.8k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  77.8k|                _mm256_zeroupper();
  258|  77.8k|                ret
  259|  77.8k|            }
  260|  77.8k|            #[target_feature(enable = "avx")]
  261|  77.8k|            #[target_feature(enable = "sse4.1")]
  262|  77.8k|            #[target_feature(enable = "ssse3")]
  263|  77.8k|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  264|  77.8k|                let ret = fn_impl($crate::x86_64::AVX::instance(), $($arg),*);
  265|  77.8k|                _mm256_zeroupper();
  266|  77.8k|                ret
  267|  77.8k|            }
  268|  77.8k|            #[target_feature(enable = "sse4.1")]
  269|  77.8k|            #[target_feature(enable = "ssse3")]
  270|  77.8k|            unsafe fn impl_sse41($($arg: $argty),*) -> $ret {
  271|  77.8k|                fn_impl($crate::x86_64::SSE41::instance(), $($arg),*)
  272|  77.8k|            }
  273|  77.8k|            #[target_feature(enable = "ssse3")]
  274|  77.8k|            unsafe fn impl_ssse3($($arg: $argty),*) -> $ret {
  275|  77.8k|                fn_impl($crate::x86_64::SSSE3::instance(), $($arg),*)
  276|  77.8k|            }
  277|  77.8k|            #[target_feature(enable = "sse2")]
  278|  77.8k|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  279|  77.8k|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  280|  77.8k|            }
  281|  77.8k|            unsafe {
  282|  77.8k|                if is_x86_feature_detected!("avx2") {
  283|  77.8k|                    impl_avx2($($arg),*)
  284|      0|                } else if is_x86_feature_detected!("avx") {
  285|      0|                    impl_avx($($arg),*)
  286|      0|                } else if is_x86_feature_detected!("sse4.1") {
  287|      0|                    impl_sse41($($arg),*)
  288|      0|                } else if is_x86_feature_detected!("ssse3") {
  289|      0|                    impl_ssse3($($arg),*)
  290|      0|                } else if is_x86_feature_detected!("sse2") {
  291|      0|                    impl_sse2($($arg),*)
  292|       |                } else {
  293|      0|                    unimplemented!()
  294|       |                }
  295|       |            }
  296|       |        }
_RNvNvNtCsaGtorKw9Zus_11rand_chacha4guts11refill_wide9impl_avx2:
  255|  77.8k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  77.8k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  77.8k|                _mm256_zeroupper();
  258|  77.8k|                ret
  259|  77.8k|            }
_RNvNtCsaGtorKw9Zus_11rand_chacha4guts11init_chacha:
  333|    305|        $($pub $(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  334|    305|            #[inline(always)]
  335|    305|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  336|    305|            use std::arch::x86_64::*;
  337|    305|            #[target_feature(enable = "avx")]
  338|    305|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|    305|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|    305|            }
  341|    305|            #[target_feature(enable = "sse2")]
  342|    305|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  343|    305|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  344|    305|            }
  345|    305|            unsafe {
  346|    305|                if is_x86_feature_detected!("avx") {
  347|    305|                    impl_avx($($arg),*)
  348|      0|                } else if is_x86_feature_detected!("sse2") {
  349|      0|                    impl_sse2($($arg),*)
  350|       |                } else {
  351|      0|                    unimplemented!()
  352|       |                }
  353|       |            }
  354|       |        }
_RNvNvNtCsaGtorKw9Zus_11rand_chacha4guts11init_chacha8impl_avx:
  338|    305|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|    305|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|    305|            }
_RNvXs2_NtCslNVBjosHlRm_10ppv_lite866x86_64NtB5_14vec128_storageINtNtCslA8OvuvDMgt_4core7convert4FromAmj4_E4from:
  130|    305|    fn from(u32x4: [u32; 4]) -> Self {
  131|    305|        vec128_storage { u32x4 }
  132|    305|    }

_RNvMNtNtNtCslNVBjosHlRm_10ppv_lite866x86_644sse24avx2INtB2_12u32x4x2_avx2NtB6_4NoNIE3newCsaGtorKw9Zus_11rand_chacha:
 1394|  28.8M|        fn new(x: __m256i) -> Self {
 1395|  28.8M|            Self { x, ni: PhantomData }
 1396|  28.8M|        }
_RNvMsZ_NtNtCslNVBjosHlRm_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIE3newCsaGtorKw9Zus_11rand_chacha:
   64|  4.36M|            fn new(x: __m128i) -> Self {
   65|  4.36M|                $vec {
   66|  4.36M|                    x,
   67|  4.36M|                    s3: PhantomData,
   68|  4.36M|                    s4: PhantomData,
   69|  4.36M|                    ni: PhantomData,
   70|  4.36M|                }
   71|  4.36M|            }
_RNvXs0_NtNtNtCslNVBjosHlRm_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types5StoreNtB9_14vec256_storageE6unpackCsaGtorKw9Zus_11rand_chacha:
 1402|   155k|        unsafe fn unpack(p: vec256_storage) -> Self {
 1403|   155k|            Self::new(p.avx)
 1404|   155k|        }
_RNvXs10_NtNtCslNVBjosHlRm_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes14unsafe_read_leCsaGtorKw9Zus_11rand_chacha:
   79|    610|            unsafe fn unsafe_read_le(input: &[u8]) -> Self {
   80|    610|                assert_eq!(input.len(), 16);
   81|    610|                Self::new(_mm_loadu_si128(input.as_ptr() as *const _))
   82|    610|            }
_RNvXs10_NtNtCslNVBjosHlRm_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes8write_leCsaGtorKw9Zus_11rand_chacha:
   89|  1.24M|            fn write_le(self, out: &mut [u8]) {
   90|  1.24M|                assert_eq!(out.len(), 16);
   91|  1.24M|                unsafe { _mm_storeu_si128(out.as_mut_ptr() as *mut _, self.x) }
   92|  1.24M|            }
_RNvXs1R_NtNtCslNVBjosHlRm_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtNtCslA8OvuvDMgt_4core3ops5arith3Add3addCsaGtorKw9Zus_11rand_chacha:
   18|  1.24M|            fn $fn(self, rhs: Self) -> Self::Output {
   19|  1.24M|                Self::new(unsafe { $impl_fn(self.x, rhs.x) })
   20|  1.24M|            }
_RNvXs2_NtNtNtCslNVBjosHlRm_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E10from_lanesCsaGtorKw9Zus_11rand_chacha:
 1439|   622k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 2]) -> Self {
 1440|   622k|            Self::new(unsafe { _mm256_setr_m128i(x[0].x, x[1].x) })
 1441|   622k|        }
_RNvXs2_NtNtNtCslNVBjosHlRm_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E8to_lanesCsaGtorKw9Zus_11rand_chacha:
 1430|   622k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 2] {
 1431|   622k|            unsafe {
 1432|   622k|                [
 1433|   622k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 0)),
 1434|   622k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 1)),
 1435|   622k|                ]
 1436|   622k|            }
 1437|   622k|        }
_RNvXs6_NtNtCslNVBjosHlRm_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E10from_lanesCsaGtorKw9Zus_11rand_chacha:
  331|  77.8k|    fn from_lanes(xs: [u32; 4]) -> Self {
  332|  77.8k|        unsafe {
  333|  77.8k|            let mut x = _mm_cvtsi64_si128((xs[0] as u64 | ((xs[1] as u64) << 32)) as i64);
  334|  77.8k|            x = _mm_insert_epi64(x, (xs[2] as u64 | ((xs[3] as u64) << 32)) as i64, 1);
  335|  77.8k|            Self::new(x)
  336|  77.8k|        }
  337|  77.8k|    }
_RNvXs6_NtNtCslNVBjosHlRm_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E8to_lanesCsaGtorKw9Zus_11rand_chacha:
  323|   311k|    fn to_lanes(self) -> [u32; 4] {
  324|   311k|        unsafe {
  325|   311k|            let x = _mm_cvtsi128_si64(self.x) as u64;
  326|   311k|            let y = _mm_extract_epi64(self.x, 1) as u64;
  327|   311k|            [x as u32, (x >> 32) as u32, y as u32, (y >> 32) as u32]
  328|   311k|        }
  329|   311k|    }
_RNvXs6_NtNtNtCslNVBjosHlRm_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right16CsaGtorKw9Zus_11rand_chacha:
 1470|  1.86M|            fn $name(self) -> Self {
 1471|  1.86M|                Self::new(unsafe {
 1472|  1.86M|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|  1.86M|                })
 1474|  1.86M|            }
_RNvXs6_NtNtNtCslNVBjosHlRm_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right20CsaGtorKw9Zus_11rand_chacha:
 1480|  1.86M|            fn $name(self) -> Self {
 1481|  1.86M|                Self::new(unsafe {
 1482|  1.86M|                    _mm256_or_si256(
 1483|  1.86M|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|  1.86M|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|  1.86M|                    )
 1486|  1.86M|                })
 1487|  1.86M|            }
_RNvXs6_NtNtNtCslNVBjosHlRm_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right24CsaGtorKw9Zus_11rand_chacha:
 1470|  1.86M|            fn $name(self) -> Self {
 1471|  1.86M|                Self::new(unsafe {
 1472|  1.86M|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|  1.86M|                })
 1474|  1.86M|            }
_RNvXs6_NtNtNtCslNVBjosHlRm_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right25CsaGtorKw9Zus_11rand_chacha:
 1480|  1.86M|            fn $name(self) -> Self {
 1481|  1.86M|                Self::new(unsafe {
 1482|  1.86M|                    _mm256_or_si256(
 1483|  1.86M|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|  1.86M|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|  1.86M|                    )
 1486|  1.86M|                })
 1487|  1.86M|            }
_RNvXsX_NtNtCslNVBjosHlRm_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types5StoreNtB7_14vec128_storageE6unpackCsaGtorKw9Zus_11rand_chacha:
   52|   700k|            unsafe fn unpack(x: vec128_storage) -> Self {
   53|   700k|                Self::new(x.sse2)
   54|   700k|            }
_RNvXsc_NtNtNtCslNVBjosHlRm_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words1230CsaGtorKw9Zus_11rand_chacha:
 1582|  1.86M|        fn shuffle_lane_words1230(self) -> Self {
 1583|  1.86M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b1001_0011) })
 1584|  1.86M|        }
_RNvXsc_NtNtNtCslNVBjosHlRm_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words2301CsaGtorKw9Zus_11rand_chacha:
 1586|  1.86M|        fn shuffle_lane_words2301(self) -> Self {
 1587|  1.86M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0100_1110) })
 1588|  1.86M|        }
_RNvXsc_NtNtNtCslNVBjosHlRm_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words3012CsaGtorKw9Zus_11rand_chacha:
 1590|  1.86M|        fn shuffle_lane_words3012(self) -> Self {
 1591|  1.86M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0011_1001) })
 1592|  1.86M|        }
_RNvXse_NtNtNtCslNVBjosHlRm_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types5StoreNtB9_14vec512_storageE6unpackCsaGtorKw9Zus_11rand_chacha:
 1602|  77.8k|        unsafe fn unpack(p: vec512_storage) -> Self {
 1603|  77.8k|            Self::new([
 1604|  77.8k|                u32x4x2_avx2::unpack(p.avx[0]),
 1605|  77.8k|                u32x4x2_avx2::unpack(p.avx[1]),
 1606|  77.8k|            ])
 1607|  77.8k|        }
_RNvXsf_NtNtNtCslNVBjosHlRm_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E10from_lanesCsaGtorKw9Zus_11rand_chacha:
 1617|   311k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 4]) -> Self {
 1618|   311k|            let ab = u32x4x2_avx2::from_lanes([x[0], x[1]]);
 1619|   311k|            let cd = u32x4x2_avx2::from_lanes([x[2], x[3]]);
 1620|   311k|            Self::new([ab, cd])
 1621|   311k|        }
_RNvXsf_NtNtNtCslNVBjosHlRm_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E8to_lanesCsaGtorKw9Zus_11rand_chacha:
 1611|   311k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 4] {
 1612|   311k|            let [a, b] = self.0[0].to_lanes();
 1613|   311k|            let [c, d] = self.0[1].to_lanes();
 1614|   311k|            [a, b, c, d]
 1615|   311k|        }
_RNvXsl_NtNtCslNVBjosHlRm_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE6insertCsaGtorKw9Zus_11rand_chacha:
  523|  1.09M|    fn insert(self, v: u32, i: u32) -> Self {
  524|  1.09M|        Self::new(unsafe {
  525|  1.09M|            match i {
  526|   545k|                0 => _mm_insert_epi32(self.x, v as i32, 0),
  527|   545k|                1 => _mm_insert_epi32(self.x, v as i32, 1),
  528|      0|                2 => _mm_insert_epi32(self.x, v as i32, 2),
  529|      0|                3 => _mm_insert_epi32(self.x, v as i32, 3),
  530|      0|                _ => unreachable!(),
  531|       |            }
  532|       |        })
  533|  1.09M|    }
_RNvXsl_NtNtCslNVBjosHlRm_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE7extractCsaGtorKw9Zus_11rand_chacha:
  519|   311k|    fn extract(self, i: u32) -> u32 {
  520|   311k|        self.to_lanes()[i as usize]
  521|   311k|    }
_RNvXsq_NtNtNtCslNVBjosHlRm_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCslA8OvuvDMgt_4core3ops5arith9AddAssign10add_assignCsaGtorKw9Zus_11rand_chacha:
 1527|  7.47M|                fn $assign_fn(&mut self, rhs: Self) {
 1528|  7.47M|                    *self = self.$bin_fn(rhs);
 1529|  7.47M|                }
_RNvXsr_NtNtNtCslNVBjosHlRm_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCslA8OvuvDMgt_4core3ops3bit6BitXor6bitxorCsaGtorKw9Zus_11rand_chacha:
 1543|  7.47M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  7.47M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  7.47M|                }
_RNvXsv_NtNtNtCslNVBjosHlRm_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCslA8OvuvDMgt_4core3ops5arith3Add3addCsaGtorKw9Zus_11rand_chacha:
 1543|  7.47M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  7.47M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  7.47M|                }
_RNvXsY_NtNtCslNVBjosHlRm_10ppv_lite866x86_644sse2NtB7_14vec128_storageINtNtCslA8OvuvDMgt_4core7convert4FromINtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEE4fromCsaGtorKw9Zus_11rand_chacha:
   58|  78.4k|            fn from(x: $vec<S3, S4, NI>) -> Self {
   59|  78.4k|                vec128_storage { sse2: x.x }
   60|  78.4k|            }
_RNvXsj_NtNtNtCslNVBjosHlRm_10ppv_lite866x86_644sse24avx2NtB9_14vec512_storageINtNtCslA8OvuvDMgt_4core7convert4FromINtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EE4fromCsaGtorKw9Zus_11rand_chacha:
 1683|  77.8k|        fn from(x: u32x4x4_avx2<NI>) -> Self {
 1684|  77.8k|            Self {
 1685|  77.8k|                avx: [
 1686|  77.8k|                    vec256_storage { avx: x.0[0].x },
 1687|  77.8k|                    vec256_storage { avx: x.0[1].x },
 1688|  77.8k|                ],
 1689|  77.8k|            }
 1690|  77.8k|        }

_RINvXs2_NtNtCsb2Mz7NeVG7o_4rand13distributions7integerNtB8_8StandardINtNtB8_12distribution12DistributionoE6sampleNtNtNtBa_4rngs6thread9ThreadRngECs2uQIyP4qcLL_5oxttl:
   51|  1.24M|    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u128 {
   52|  1.24M|        // Use LE; we explicitly generate one value before the next.
   53|  1.24M|        let x = u128::from(rng.next_u64());
   54|  1.24M|        let y = u128::from(rng.next_u64());
   55|  1.24M|        (y << 64) | x
   56|  1.24M|    }

_RINvCsb2Mz7NeVG7o_4rand6randomoECs2uQIyP4qcLL_5oxttl:
  183|  1.24M|pub fn random<T>() -> T
  184|  1.24M|where Standard: Distribution<T> {
  185|  1.24M|    thread_rng().gen()
  186|  1.24M|}

_RINvYNtNtNtCsb2Mz7NeVG7o_4rand4rngs6thread9ThreadRngNtNtB9_3rng3Rng3genoECs2uQIyP4qcLL_5oxttl:
   93|  1.24M|    fn gen<T>(&mut self) -> T
   94|  1.24M|    where Standard: Distribution<T> {
   95|  1.24M|        Standard.sample(self)
   96|  1.24M|    }

_RNvXs_NtNtNtCsb2Mz7NeVG7o_4rand4rngs7adapter9reseedingINtB4_12ReseedingRngNtNtCsaGtorKw9Zus_11rand_chacha6chacha12ChaCha12CoreNtNtCslOyDhRs1mlx_9rand_core2os5OsRngENtB24_7RngCore8next_u64Cs2uQIyP4qcLL_5oxttl:
  124|  2.49M|    fn next_u64(&mut self) -> u64 {
  125|  2.49M|        self.0.next_u64()
  126|  2.49M|    }
_RNvMNtNtNtCsb2Mz7NeVG7o_4rand4rngs7adapter9reseedingINtB2_12ReseedingRngNtNtCsaGtorKw9Zus_11rand_chacha6chacha12ChaCha12CoreNtNtCslOyDhRs1mlx_9rand_core2os5OsRngE3newB8_:
  101|      1|    pub fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  102|      1|        ReseedingRng(BlockRng::new(ReseedingCore::new(rng, threshold, reseeder)))
  103|      1|    }
_RNvXs2_NtNtNtCsb2Mz7NeVG7o_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCsaGtorKw9Zus_11rand_chacha6chacha12ChaCha12CoreNtNtCslOyDhRs1mlx_9rand_core2os5OsRngENtNtB26_5block12BlockRngCore8generateBb_:
  173|  77.8k|    fn generate(&mut self, results: &mut Self::Results) {
  174|  77.8k|        let global_fork_counter = fork::get_fork_counter();
  175|  77.8k|        if self.bytes_until_reseed <= 0 || self.is_forked(global_fork_counter) {
  176|       |            // We get better performance by not calling only `reseed` here
  177|       |            // and continuing with the rest of the function, but by directly
  178|       |            // returning from a non-inlined function.
  179|    304|            return self.reseed_and_generate(results, global_fork_counter);
  180|  77.5k|        }
  181|  77.5k|        let num_bytes = results.as_ref().len() * size_of::<Self::Item>();
  182|  77.5k|        self.bytes_until_reseed -= num_bytes as i64;
  183|  77.5k|        self.inner.generate(results);
  184|  77.8k|    }
_RNvMs3_NtNtNtCsb2Mz7NeVG7o_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCsaGtorKw9Zus_11rand_chacha6chacha12ChaCha12CoreNtNtCslOyDhRs1mlx_9rand_core2os5OsRngE3newBb_:
  193|      1|    fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  194|      1|        use ::core::i64::MAX;
  195|      1|        fork::register_fork_handler();
  196|       |
  197|       |        // Because generating more values than `i64::MAX` takes centuries on
  198|       |        // current hardware, we just clamp to that value.
  199|       |        // Also we set a threshold of 0, which indicates no limit, to that
  200|       |        // value.
  201|      1|        let threshold = if threshold == 0 {
  202|      0|            MAX
  203|      1|        } else if threshold <= MAX as u64 {
  204|      1|            threshold as i64
  205|       |        } else {
  206|      0|            MAX
  207|       |        };
  208|       |
  209|      1|        ReseedingCore {
  210|      1|            inner: rng,
  211|      1|            reseeder,
  212|      1|            threshold: threshold as i64,
  213|      1|            bytes_until_reseed: threshold as i64,
  214|      1|            fork_counter: 0,
  215|      1|        }
  216|      1|    }
_RNvMs3_NtNtNtCsb2Mz7NeVG7o_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCsaGtorKw9Zus_11rand_chacha6chacha12ChaCha12CoreNtNtCslOyDhRs1mlx_9rand_core2os5OsRngE6reseedBb_:
  219|    304|    fn reseed(&mut self) -> Result<(), Error> {
  220|    304|        R::from_rng(&mut self.reseeder).map(|result| {
  221|       |            self.bytes_until_reseed = self.threshold;
  222|       |            self.inner = result
  223|    304|        })
  224|    304|    }
_RNCNvMs3_NtNtNtCsb2Mz7NeVG7o_4rand4rngs7adapter9reseedingINtB7_13ReseedingCoreNtNtCsaGtorKw9Zus_11rand_chacha6chacha12ChaCha12CoreNtNtCslOyDhRs1mlx_9rand_core2os5OsRngE6reseed0Bd_:
  220|    304|        R::from_rng(&mut self.reseeder).map(|result| {
  221|    304|            self.bytes_until_reseed = self.threshold;
  222|    304|            self.inner = result
  223|    304|        })
_RNvMs3_NtNtNtCsb2Mz7NeVG7o_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCsaGtorKw9Zus_11rand_chacha6chacha12ChaCha12CoreNtNtCslOyDhRs1mlx_9rand_core2os5OsRngE9is_forkedBb_:
  226|  77.8k|    fn is_forked(&self, global_fork_counter: usize) -> bool {
  227|  77.8k|        // In theory, on 32-bit platforms, it is possible for
  228|  77.8k|        // `global_fork_counter` to wrap around after ~4e9 forks.
  229|  77.8k|        //
  230|  77.8k|        // This check will detect a fork in the normal case where
  231|  77.8k|        // `fork_counter < global_fork_counter`, and also when the difference
  232|  77.8k|        // between both is greater than `isize::MAX` (wrapped around).
  233|  77.8k|        //
  234|  77.8k|        // It will still fail to detect a fork if there have been more than
  235|  77.8k|        // `isize::MAX` forks, without any reseed in between. Seems unlikely
  236|  77.8k|        // enough.
  237|  77.8k|        (self.fork_counter.wrapping_sub(global_fork_counter) as isize) < 0
  238|  77.8k|    }
_RNvMs3_NtNtNtCsb2Mz7NeVG7o_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCsaGtorKw9Zus_11rand_chacha6chacha12ChaCha12CoreNtNtCslOyDhRs1mlx_9rand_core2os5OsRngE19reseed_and_generateBb_:
  241|    304|    fn reseed_and_generate(
  242|    304|        &mut self, results: &mut <Self as BlockRngCore>::Results, global_fork_counter: usize,
  243|    304|    ) {
  244|    304|        #![allow(clippy::if_same_then_else)] // false positive
  245|    304|        if self.is_forked(global_fork_counter) {
  246|      0|            info!("Fork detected, reseeding RNG");
  247|    304|        } else {
  248|    304|            trace!("Reseeding RNG (periodic reseed)");
  249|    304|        }
  250|       |
  251|    304|        let num_bytes = results.as_ref().len() * size_of::<<R as BlockRngCore>::Item>();
  252|       |
  253|    304|        if let Err(e) = self.reseed() {
  254|      0|            warn!("Reseeding RNG failed: {}", e);
  255|      0|            let _ = e;
  256|    304|        }
  257|    304|        self.fork_counter = global_fork_counter;
  258|    304|
  259|    304|        self.bytes_until_reseed = self.threshold - num_bytes as i64;
  260|    304|        self.inner.generate(results);
  261|    304|    }
_RNvNtNtNtNtCsb2Mz7NeVG7o_4rand4rngs7adapter9reseeding4fork16get_fork_counter:
  307|  77.8k|    pub fn get_fork_counter() -> usize {
  308|  77.8k|        RESEEDING_RNG_FORK_COUNTER.load(Ordering::Relaxed)
  309|  77.8k|    }
_RNvNtNtNtNtCsb2Mz7NeVG7o_4rand4rngs7adapter9reseeding4fork21register_fork_handler:
  317|      1|    pub fn register_fork_handler() {
  318|      1|        static REGISTER: Once = Once::new();
  319|      1|        REGISTER.call_once(|| {
  320|       |            // Bump the counter before and after forking (see #1169):
  321|       |            let ret = unsafe { libc::pthread_atfork(
  322|       |                Some(fork_handler),
  323|       |                Some(fork_handler),
  324|       |                Some(fork_handler),
  325|       |            ) };
  326|       |            if ret != 0 {
  327|       |                panic!("libc::pthread_atfork failed with code {}", ret);
  328|       |            }
  329|      1|        });
  330|      1|    }
_RNCNvNtNtNtNtCsb2Mz7NeVG7o_4rand4rngs7adapter9reseeding4fork21register_fork_handler0Bb_:
  319|      1|        REGISTER.call_once(|| {
  320|      1|            // Bump the counter before and after forking (see #1169):
  321|      1|            let ret = unsafe { libc::pthread_atfork(
  322|      1|                Some(fork_handler),
  323|      1|                Some(fork_handler),
  324|      1|                Some(fork_handler),
  325|      1|            ) };
  326|      1|            if ret != 0 {
  327|      0|                panic!("libc::pthread_atfork failed with code {}", ret);
  328|      1|            }
  329|      1|        });

_RNvXs_NtNtCsb2Mz7NeVG7o_4rand4rngs6threadNtB4_9ThreadRngNtCslOyDhRs1mlx_9rand_core7RngCore8next_u64:
  109|  2.49M|    fn next_u64(&mut self) -> u64 {
  110|  2.49M|        // SAFETY: We must make sure to stop using `rng` before anyone else
  111|  2.49M|        // creates another mutable reference
  112|  2.49M|        let rng = unsafe { &mut *self.rng.get() };
  113|  2.49M|        rng.next_u64()
  114|  2.49M|    }
_RNvNtNtCsb2Mz7NeVG7o_4rand4rngs6thread10thread_rng:
   88|  1.24M|pub fn thread_rng() -> ThreadRng {
   89|  1.24M|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
   90|  1.24M|    ThreadRng { rng }
   91|  1.24M|}
_RNCNvNtNtCsb2Mz7NeVG7o_4rand4rngs6thread10thread_rng0B7_:
   89|  1.24M|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
_RNCNvNvNtNtCsb2Mz7NeVG7o_4rand4rngs6thread14THREAD_RNG_KEY7___getit0B9_:
   67|      1|thread_local!(
   68|      1|    // We require Rc<..> to avoid premature freeing when thread_rng is used
   69|      1|    // within thread-local destructors. See #968.
   70|      1|    static THREAD_RNG_KEY: Rc<UnsafeCell<ReseedingRng<Core, OsRng>>> = {
   71|      1|        let r = Core::from_rng(OsRng).unwrap_or_else(|err|
   72|      1|                panic!("could not initialize thread_rng: {}", err));
   73|      1|        let rng = ReseedingRng::new(r,
   74|      1|                                    THREAD_RNG_RESEED_THRESHOLD,
   75|      1|                                    OsRng);
   76|      1|        Rc::new(UnsafeCell::new(rng))
   77|      1|    }
   78|      1|);

_RNvXsl_NtCsaGtorKw9Zus_11rand_chacha6chachaNtB5_12ChaCha12CoreNtNtCslOyDhRs1mlx_9rand_core5block12BlockRngCore8generateCsb2Mz7NeVG7o_4rand:
   89|  77.8k|            fn generate(&mut self, r: &mut Self::Results) {
   90|  77.8k|                // Fill slice of words by writing to equivalent slice of bytes, then fixing endianness.
   91|  77.8k|                self.state.refill4($rounds, unsafe {
   92|  77.8k|                    &mut *(&mut *r as *mut Array64<u32> as *mut [u8; 256])
   93|  77.8k|                });
   94|  4.98M|                for x in r.as_mut() {
   95|  4.98M|                    *x = x.to_le();
   96|  4.98M|                }
   97|  77.8k|            }
_RNvXsm_NtCsaGtorKw9Zus_11rand_chacha6chachaNtB5_12ChaCha12CoreNtCslOyDhRs1mlx_9rand_core11SeedableRng9from_seedCsb2Mz7NeVG7o_4rand:
  103|    305|            fn from_seed(seed: Self::Seed) -> Self {
  104|    305|                $ChaChaXCore { state: ChaCha::new(&seed, &[0u8; 8]) }
  105|    305|            }
_RNvXs_NtCsaGtorKw9Zus_11rand_chacha6chachaINtB4_7Array64mEINtNtCslA8OvuvDMgt_4core7convert5AsRefSmE6as_refB6_:
   46|  5.13M|    fn as_ref(&self) -> &[T] {
   47|  5.13M|        &self.0
   48|  5.13M|    }
_RNvXs0_NtCsaGtorKw9Zus_11rand_chacha6chachaINtB5_7Array64mEINtNtCslA8OvuvDMgt_4core7convert5AsMutSmE6as_mutB7_:
   51|  77.8k|    fn as_mut(&mut self) -> &mut [T] {
   52|  77.8k|        &mut self.0
   53|  77.8k|    }
_RNvXNtCsaGtorKw9Zus_11rand_chacha6chachaINtB2_7Array64mENtNtCslA8OvuvDMgt_4core7default7Default7defaultB4_:
   32|      1|    fn default() -> Self {
   33|      1|        Self([
   34|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   35|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   36|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   37|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   38|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   39|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   40|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   41|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   42|      1|        ])
   43|      1|    }

_RNvMNtCsaGtorKw9Zus_11rand_chacha4gutsNtB2_6ChaCha3new:
   72|    305|    pub fn new(key: &[u8; 32], nonce: &[u8]) -> Self {
   73|    305|        init_chacha(key, nonce)
   74|    305|    }
_RNvMNtCsaGtorKw9Zus_11rand_chacha4gutsNtB2_6ChaCha7refill4:
   84|  77.8k|    pub fn refill4(&mut self, drounds: u32, out: &mut [u8; BUFSZ]) {
   85|  77.8k|        refill_wide(self, drounds, out)
   86|  77.8k|    }
_RINvNtCsaGtorKw9Zus_11rand_chacha4guts5roundINtNtCslNVBjosHlRm_10ppv_lite864soft2x2INtNtNtNtBL_6x86_644sse24avx212u32x4x2_avx2NtB1q_4NoNIENtB1o_2G0EEB4_:
   43|   934k|pub(crate) fn round<V: ArithOps + BitOps32>(mut x: State<V>) -> State<V> {
   44|   934k|    x.a += x.b;
   45|   934k|    x.d = (x.d ^ x.a).rotate_each_word_right16();
   46|   934k|    x.c += x.d;
   47|   934k|    x.b = (x.b ^ x.c).rotate_each_word_right20();
   48|   934k|    x.a += x.b;
   49|   934k|    x.d = (x.d ^ x.a).rotate_each_word_right24();
   50|   934k|    x.c += x.d;
   51|   934k|    x.b = (x.b ^ x.c).rotate_each_word_right25();
   52|   934k|    x
   53|   934k|}
_RINvNtCsaGtorKw9Zus_11rand_chacha4guts11diagonalizeINtNtCslNVBjosHlRm_10ppv_lite864soft2x2INtNtNtNtBS_6x86_644sse24avx212u32x4x2_avx2NtB1x_4NoNIENtB1v_2G0EEB4_:
   56|   467k|pub(crate) fn diagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   57|   467k|    x.b = x.b.shuffle_lane_words3012();
   58|   467k|    x.c = x.c.shuffle_lane_words2301();
   59|   467k|    x.d = x.d.shuffle_lane_words1230();
   60|   467k|    x
   61|   467k|}
_RINvNtCsaGtorKw9Zus_11rand_chacha4guts13undiagonalizeINtNtCslNVBjosHlRm_10ppv_lite864soft2x2INtNtNtNtBU_6x86_644sse24avx212u32x4x2_avx2NtB1z_4NoNIENtB1x_2G0EEB4_:
   63|   467k|pub(crate) fn undiagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   64|   467k|    x.b = x.b.shuffle_lane_words1230();
   65|   467k|    x.c = x.c.shuffle_lane_words2301();
   66|   467k|    x.d = x.d.shuffle_lane_words3012();
   67|   467k|    x
   68|   467k|}
_RINvMNtCsaGtorKw9Zus_11rand_chacha4gutsNtB3_6ChaCha5pos64INtNtCslNVBjosHlRm_10ppv_lite866x86_6411Avx2MachineNtBW_4NoNIEEB5_:
   77|   155k|    fn pos64<M: Machine>(&self, m: M) -> u64 {
   78|   155k|        let d: M::u32x4 = m.unpack(self.d);
   79|   155k|        ((d.extract(1) as u64) << 32) | d.extract(0) as u64
   80|   155k|    }
_RINvNtCsaGtorKw9Zus_11rand_chacha4guts16refill_wide_implINtNtCslNVBjosHlRm_10ppv_lite866x86_6411Avx2MachineNtBV_4NoNIEEB4_:
  116|  77.8k|fn refill_wide_impl<Mach: Machine>(
  117|  77.8k|    m: Mach, state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ],
  118|  77.8k|) {
  119|  77.8k|    let k = m.vec([0x6170_7865, 0x3320_646e, 0x7962_2d32, 0x6b20_6574]);
  120|  77.8k|    let mut pos = state.pos64(m);
  121|  77.8k|    let d0: Mach::u32x4 = m.unpack(state.d);
  122|  77.8k|    pos = pos.wrapping_add(1);
  123|  77.8k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  124|  77.8k|    pos = pos.wrapping_add(1);
  125|  77.8k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  126|  77.8k|    pos = pos.wrapping_add(1);
  127|  77.8k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  128|  77.8k|
  129|  77.8k|    let b = m.unpack(state.b);
  130|  77.8k|    let c = m.unpack(state.c);
  131|  77.8k|    let mut x = State {
  132|  77.8k|        a: Mach::u32x4x4::from_lanes([k, k, k, k]),
  133|  77.8k|        b: Mach::u32x4x4::from_lanes([b, b, b, b]),
  134|  77.8k|        c: Mach::u32x4x4::from_lanes([c, c, c, c]),
  135|  77.8k|        d: m.unpack(Mach::u32x4x4::from_lanes([d0, d1, d2, d3]).into()),
  136|  77.8k|    };
  137|   467k|    for _ in 0..drounds {
  138|   467k|        x = round(x);
  139|   467k|        x = undiagonalize(round(diagonalize(x)));
  140|   467k|    }
  141|  77.8k|    let mut pos = state.pos64(m);
  142|  77.8k|    let d0: Mach::u32x4 = m.unpack(state.d);
  143|  77.8k|    pos = pos.wrapping_add(1);
  144|  77.8k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  145|  77.8k|    pos = pos.wrapping_add(1);
  146|  77.8k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  147|  77.8k|    pos = pos.wrapping_add(1);
  148|  77.8k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  149|  77.8k|    pos = pos.wrapping_add(1);
  150|  77.8k|    let d4 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  151|  77.8k|
  152|  77.8k|    let (a, b, c, d) = (
  153|  77.8k|        x.a.to_lanes(),
  154|  77.8k|        x.b.to_lanes(),
  155|  77.8k|        x.c.to_lanes(),
  156|  77.8k|        x.d.to_lanes(),
  157|  77.8k|    );
  158|  77.8k|    let sb = m.unpack(state.b);
  159|  77.8k|    let sc = m.unpack(state.c);
  160|  77.8k|    let sd = [m.unpack(state.d), d1, d2, d3];
  161|  77.8k|    state.d = d4.into();
  162|  77.8k|    let mut words = out.chunks_exact_mut(16);
  163|   311k|    for ((((&a, &b), &c), &d), &sd) in a.iter().zip(&b).zip(&c).zip(&d).zip(&sd) {
  164|   311k|        (a + k).write_le(words.next().unwrap());
  165|   311k|        (b + sb).write_le(words.next().unwrap());
  166|   311k|        (c + sc).write_le(words.next().unwrap());
  167|   311k|        (d + sd).write_le(words.next().unwrap());
  168|   311k|    }
  169|  77.8k|}
_RNvNtCsaGtorKw9Zus_11rand_chacha4guts10read_u32le:
  229|    610|fn read_u32le(xs: &[u8]) -> u32 {
  230|    610|    assert_eq!(xs.len(), 4);
  231|    610|    u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24)
  232|    610|}
_RINvNvNtCsaGtorKw9Zus_11rand_chacha4guts11refill_wide7fn_implINtNtCslNVBjosHlRm_10ppv_lite866x86_6411Avx2MachineNtB10_4NoNIEEB6_:
  172|  77.8k|    fn refill_wide(state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ]) {
  173|  77.8k|        refill_wide_impl(m, state, drounds, out);
  174|  77.8k|    }
_RINvNvNtCsaGtorKw9Zus_11rand_chacha4guts11init_chacha7fn_implINtNtCslNVBjosHlRm_10ppv_lite866x86_6410SseMachineNtB10_5YesS3NtB10_5YesS4NtB10_4NoNIEEB6_:
  235|    305|    fn init_chacha(key: &[u8; 32], nonce: &[u8]) -> ChaCha {
  236|    305|        let ctr_nonce = [
  237|       |            0,
  238|    305|            if nonce.len() == 12 {
  239|      0|                read_u32le(&nonce[0..4])
  240|       |            } else {
  241|    305|                0
  242|       |            },
  243|    305|            read_u32le(&nonce[nonce.len() - 8..nonce.len() - 4]),
  244|    305|            read_u32le(&nonce[nonce.len() - 4..]),
  245|    305|        ];
  246|    305|        let key0: Mach::u32x4 = m.read_le(&key[..16]);
  247|    305|        let key1: Mach::u32x4 = m.read_le(&key[16..]);
  248|    305|        ChaCha {
  249|    305|            b: key0.into(),
  250|    305|            c: key1.into(),
  251|    305|            d: ctr_nonce.into(),
  252|    305|        }

_RNCNvXs0_NtCslOyDhRs1mlx_9rand_core5blockINtB7_8BlockRngINtNtNtNtCsb2Mz7NeVG7o_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCsaGtorKw9Zus_11rand_chacha6chacha12ChaCha12CoreNtNtB9_2os5OsRngEENtB9_7RngCore8next_u640Cs2uQIyP4qcLL_5oxttl:
  198|  2.49M|        let read_u64 = |results: &[u32], index| {
  199|  2.49M|            let data = &results[index..=index + 1];
  200|  2.49M|            u64::from(data[1]) << 32 | u64::from(data[0])
  201|  2.49M|        };
_RNvXs0_NtCslOyDhRs1mlx_9rand_core5blockINtB5_8BlockRngINtNtNtNtCsb2Mz7NeVG7o_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCsaGtorKw9Zus_11rand_chacha6chacha12ChaCha12CoreNtNtB7_2os5OsRngEENtB7_7RngCore8next_u64Cs2uQIyP4qcLL_5oxttl:
  197|  2.49M|    fn next_u64(&mut self) -> u64 {
  198|  2.49M|        let read_u64 = |results: &[u32], index| {
  199|       |            let data = &results[index..=index + 1];
  200|       |            u64::from(data[1]) << 32 | u64::from(data[0])
  201|       |        };
  202|       |
  203|  2.49M|        let len = self.results.as_ref().len();
  204|  2.49M|
  205|  2.49M|        let index = self.index;
  206|  2.49M|        if index < len - 1 {
  207|  2.41M|            self.index += 2;
  208|  2.41M|            // Read an u64 from the current index
  209|  2.41M|            read_u64(self.results.as_ref(), index)
  210|  77.8k|        } else if index >= len {
  211|  77.8k|            self.generate_and_set(2);
  212|  77.8k|            read_u64(self.results.as_ref(), 0)
  213|       |        } else {
  214|      0|            let x = u64::from(self.results.as_ref()[len - 1]);
  215|      0|            self.generate_and_set(1);
  216|      0|            let y = u64::from(self.results.as_ref()[0]);
  217|      0|            (y << 32) | x
  218|       |        }
  219|  2.49M|    }
_RNvMs_NtCslOyDhRs1mlx_9rand_core5blockINtB4_8BlockRngINtNtNtNtCsb2Mz7NeVG7o_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCsaGtorKw9Zus_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE16generate_and_setBY_:
  174|  77.8k|    pub fn generate_and_set(&mut self, index: usize) {
  175|  77.8k|        assert!(index < self.results.as_ref().len());
  176|  77.8k|        self.core.generate(&mut self.results);
  177|  77.8k|        self.index = index;
  178|  77.8k|    }
_RNvMs_NtCslOyDhRs1mlx_9rand_core5blockINtB4_8BlockRngINtNtNtNtCsb2Mz7NeVG7o_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCsaGtorKw9Zus_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE3newBY_:
  145|      1|    pub fn new(core: R) -> BlockRng<R> {
  146|      1|        let results_empty = R::Results::default();
  147|      1|        BlockRng {
  148|      1|            core,
  149|      1|            index: results_empty.as_ref().len(),
  150|      1|            results: results_empty,
  151|      1|        }
  152|      1|    }

_RINvYNtNtCsaGtorKw9Zus_11rand_chacha6chacha12ChaCha12CoreNtCslOyDhRs1mlx_9rand_core11SeedableRng8from_rngNtNtBV_2os5OsRngECsb2Mz7NeVG7o_4rand:
  390|      1|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|      1|        let mut seed = Self::Seed::default();
  392|      1|        rng.try_fill_bytes(seed.as_mut())?;
  393|      1|        Ok(Self::from_seed(seed))
  394|      1|    }
_RINvYNtNtCsaGtorKw9Zus_11rand_chacha6chacha12ChaCha12CoreNtCslOyDhRs1mlx_9rand_core11SeedableRng8from_rngQNtNtBV_2os5OsRngECsb2Mz7NeVG7o_4rand:
  390|    304|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|    304|        let mut seed = Self::Seed::default();
  392|    304|        rng.try_fill_bytes(seed.as_mut())?;
  393|    304|        Ok(Self::from_seed(seed))
  394|    304|    }
_RNvXs_CslOyDhRs1mlx_9rand_coreQNtNtB4_2os5OsRngNtB4_7RngCore14try_fill_bytesCsb2Mz7NeVG7o_4rand:
  441|    304|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
  442|    304|        (**self).try_fill_bytes(dest)
  443|    304|    }

_RNvXs_NtCslOyDhRs1mlx_9rand_core2osNtB4_5OsRngNtB6_7RngCore14try_fill_bytes:
   67|    305|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
   68|    305|        getrandom(dest)?;
   69|    305|        Ok(())
   70|    305|    }

_RNvNvNtNtCsb2Mz7NeVG7o_4rand4rngs6thread14THREAD_RNG_KEY6___initB7_:
   82|      1|            fn __init() -> $t { $init }
_RNvNvNtNtCsb2Mz7NeVG7o_4rand4rngs6thread14THREAD_RNG_KEY7___getitB7_:
   85|  1.24M|            unsafe fn __getit(
   86|  1.24M|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   87|  1.24M|            ) -> $crate::option::Option<&'static $t> {
   88|  1.24M|                #[thread_local]
   89|  1.24M|                static __KEY: $crate::thread::local_impl::Key<$t> =
   90|  1.24M|                    $crate::thread::local_impl::Key::<$t>::new();
   91|  1.24M|
   92|  1.24M|                unsafe {
   93|  1.24M|                    __KEY.get(move || {
   94|       |                        if let $crate::option::Option::Some(init) = init {
   95|       |                            if let $crate::option::Option::Some(value) = init.take() {
   96|       |                                return value;
   97|       |                            } else if $crate::cfg!(debug_assertions) {
   98|       |                                $crate::unreachable!("missing default value");
   99|       |                            }
  100|       |                        }
  101|       |                        __init()
  102|  1.24M|                    })
  103|  1.24M|                }
  104|  1.24M|            }

_RINvCsgNaHgHERLlN_4trig5parseARShj1_EB2_:
    7|  17.0k|fn parse<'a>(
    8|  17.0k|    chunks: impl IntoIterator<Item = &'a [u8]>,
    9|  17.0k|    unchecked: bool,
   10|  17.0k|) -> (Vec<Quad>, Vec<String>, Vec<(String, String)>) {
   11|  17.0k|    let mut quads = Vec::new();
   12|  17.0k|    let mut errors = Vec::new();
   13|  17.0k|    let mut parser = TriGParser::new()
   14|  17.0k|        .with_quoted_triples()
   15|  17.0k|        .with_base_iri("http://example.com/")
   16|  17.0k|        .unwrap();
   17|  17.0k|    if unchecked {
   18|      0|        parser = parser.unchecked();
   19|  17.0k|    }
   20|  17.0k|    let mut reader = parser.parse();
   21|  34.1k|    for chunk in chunks {
   22|  17.0k|        reader.extend_from_slice(chunk);
   23|  2.92M|        while let Some(result) = reader.read_next() {
   24|  2.90M|            match result {
   25|   345k|                Ok(quad) => quads.push(quad),
   26|  2.56M|                Err(error) => errors.push(error.to_string()),
   27|       |            }
   28|       |        }
   29|       |    }
   30|  17.0k|    reader.end();
   31|  26.4k|    while let Some(result) = reader.read_next() {
   32|  9.38k|        match result {
   33|    232|            Ok(quad) => quads.push(quad),
   34|  9.14k|            Err(error) => errors.push(error.to_string()),
   35|       |        }
   36|       |    }
   37|  17.0k|    assert!(reader.is_end());
   38|  17.0k|    (
   39|  17.0k|        quads,
   40|  17.0k|        errors,
   41|  17.0k|        reader
   42|  17.0k|            .prefixes()
   43|  17.0k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
   44|  17.0k|            .collect(),
   45|  17.0k|    )
   46|  17.0k|}
_RINvCsgNaHgHERLlN_4trig5parseINtNtNtCslA8OvuvDMgt_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_run0EEB2_:
    7|  17.0k|fn parse<'a>(
    8|  17.0k|    chunks: impl IntoIterator<Item = &'a [u8]>,
    9|  17.0k|    unchecked: bool,
   10|  17.0k|) -> (Vec<Quad>, Vec<String>, Vec<(String, String)>) {
   11|  17.0k|    let mut quads = Vec::new();
   12|  17.0k|    let mut errors = Vec::new();
   13|  17.0k|    let mut parser = TriGParser::new()
   14|  17.0k|        .with_quoted_triples()
   15|  17.0k|        .with_base_iri("http://example.com/")
   16|  17.0k|        .unwrap();
   17|  17.0k|    if unchecked {
   18|      0|        parser = parser.unchecked();
   19|  17.0k|    }
   20|  17.0k|    let mut reader = parser.parse();
   21|  3.02M|    for chunk in chunks {
   22|  3.00M|        reader.extend_from_slice(chunk);
   23|  5.91M|        while let Some(result) = reader.read_next() {
   24|  2.90M|            match result {
   25|   345k|                Ok(quad) => quads.push(quad),
   26|  2.56M|                Err(error) => errors.push(error.to_string()),
   27|       |            }
   28|       |        }
   29|       |    }
   30|  17.0k|    reader.end();
   31|  26.4k|    while let Some(result) = reader.read_next() {
   32|  9.38k|        match result {
   33|    232|            Ok(quad) => quads.push(quad),
   34|  9.14k|            Err(error) => errors.push(error.to_string()),
   35|       |        }
   36|       |    }
   37|  17.0k|    assert!(reader.is_end());
   38|  17.0k|    (
   39|  17.0k|        quads,
   40|  17.0k|        errors,
   41|  17.0k|        reader
   42|  17.0k|            .prefixes()
   43|  17.0k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
   44|  17.0k|            .collect(),
   45|  17.0k|    )
   46|  17.0k|}
_RINvCsgNaHgHERLlN_4trig5parseINtNtNtCslA8OvuvDMgt_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_runs0_0EEB2_:
    7|  17.0k|fn parse<'a>(
    8|  17.0k|    chunks: impl IntoIterator<Item = &'a [u8]>,
    9|  17.0k|    unchecked: bool,
   10|  17.0k|) -> (Vec<Quad>, Vec<String>, Vec<(String, String)>) {
   11|  17.0k|    let mut quads = Vec::new();
   12|  17.0k|    let mut errors = Vec::new();
   13|  17.0k|    let mut parser = TriGParser::new()
   14|  17.0k|        .with_quoted_triples()
   15|  17.0k|        .with_base_iri("http://example.com/")
   16|  17.0k|        .unwrap();
   17|  17.0k|    if unchecked {
   18|  17.0k|        parser = parser.unchecked();
   19|  17.0k|    }
   20|  17.0k|    let mut reader = parser.parse();
   21|  3.02M|    for chunk in chunks {
   22|  3.00M|        reader.extend_from_slice(chunk);
   23|  5.90M|        while let Some(result) = reader.read_next() {
   24|  2.89M|            match result {
   25|   377k|                Ok(quad) => quads.push(quad),
   26|  2.52M|                Err(error) => errors.push(error.to_string()),
   27|       |            }
   28|       |        }
   29|       |    }
   30|  17.0k|    reader.end();
   31|  26.5k|    while let Some(result) = reader.read_next() {
   32|  9.45k|        match result {
   33|    251|            Ok(quad) => quads.push(quad),
   34|  9.20k|            Err(error) => errors.push(error.to_string()),
   35|       |        }
   36|       |    }
   37|  17.0k|    assert!(reader.is_end());
   38|  17.0k|    (
   39|  17.0k|        quads,
   40|  17.0k|        errors,
   41|  17.0k|        reader
   42|  17.0k|            .prefixes()
   43|  17.0k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
   44|  17.0k|            .collect(),
   45|  17.0k|    )
   46|  17.0k|}
_RNCINvCsgNaHgHERLlN_4trig5parseARShj1_E0B4_:
   43|  1.94k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
_RNCINvCsgNaHgHERLlN_4trig5parseINtNtNtCslA8OvuvDMgt_4core5slice4iter5SplithNCNvNvB4_1__19___libfuzzer_sys_run0EE0B4_:
   43|  1.94k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
_RNCINvCsgNaHgHERLlN_4trig5parseINtNtNtCslA8OvuvDMgt_4core5slice4iter5SplithNCNvNvB4_1__19___libfuzzer_sys_runs0_0EE0B4_:
   43|  2.00k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
_RNCNvNvCsgNaHgHERLlN_4trig1__19___libfuzzer_sys_run0B5_:
   86|  17.2M|    let (quads, errors, prefixes) = parse(data.split(|c| *c == 0xFF), false);
_RNCNvNvCsgNaHgHERLlN_4trig1__19___libfuzzer_sys_runs_0B5_:
   92|  17.2M|            .filter(|c| *c != 0xFF)
_RNCNvNvCsgNaHgHERLlN_4trig1__19___libfuzzer_sys_runs0_0B5_:
   97|  17.2M|    let (quads_unchecked, errors_unchecked, _) = parse(data.split(|c| *c == 0xFF), true);
_RNvCsgNaHgHERLlN_4trig24count_triple_blank_nodes:
   48|   144k|fn count_triple_blank_nodes(triple: &Triple) -> usize {
   49|   144k|    (match &triple.subject {
   50|    887|        Subject::BlankNode(_) => 1,
   51|  83.8k|        Subject::Triple(t) => count_triple_blank_nodes(t),
   52|  59.6k|        _ => 0,
   53|   144k|    }) + (match &triple.object {
   54|  2.00k|        Term::BlankNode(_) => 1,
   55|      0|        Term::Triple(t) => count_triple_blank_nodes(t),
   56|   142k|        _ => 0,
   57|       |    })
   58|   144k|}
_RNvCsgNaHgHERLlN_4trig22count_quad_blank_nodes:
   60|   345k|fn count_quad_blank_nodes(quad: &Quad) -> usize {
   61|   345k|    (match &quad.subject {
   62|   194k|        Subject::BlankNode(_) => 1,
   63|  55.1k|        Subject::Triple(t) => count_triple_blank_nodes(t),
   64|  95.6k|        _ => 0,
   65|   345k|    }) + (match &quad.object {
   66|   131k|        Term::BlankNode(_) => 1,
   67|  5.33k|        Term::Triple(t) => count_triple_blank_nodes(t),
   68|   208k|        _ => 0,
   69|   345k|    }) + usize::from(matches!(quad.graph_name, GraphName::BlankNode(_)))
   70|   345k|}
_RNvCsgNaHgHERLlN_4trig15serialize_quads:
   72|  17.0k|fn serialize_quads(quads: &[Quad], prefixes: Vec<(String, String)>) -> Vec<u8> {
   73|  17.0k|    let mut serializer = TriGSerializer::new();
   74|  18.9k|    for (prefix_name, prefix_iri) in prefixes {
   75|  1.94k|        serializer = serializer.with_prefix(prefix_name, prefix_iri).unwrap();
   76|  1.94k|    }
   77|  17.0k|    let mut writer = serializer.serialize_to_write(Vec::new());
   78|   362k|    for quad in quads {
   79|   345k|        writer.write_quad(quad).unwrap();
   80|   345k|    }
   81|  17.0k|    writer.finish().unwrap()
   82|  17.0k|}

_RNvMNtCsgSruOWiD3Xy_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCsgNaHgHERLlN_4trig:
   88|   582k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|   582k|        BlankNodeRef(match &self.0 {
   90|  18.4k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|   564k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|   564k|                id: *id,
   93|   564k|                str: str.as_str(),
   94|   564k|            },
   95|       |        })
   96|   582k|    }
_RNvMs1_NtCsgSruOWiD3Xy_5oxrdf10blank_nodeNtB5_12BlankNodeRef10into_ownedCsgNaHgHERLlN_4trig:
  204|   182k|    pub fn into_owned(self) -> BlankNode {
  205|   182k|        BlankNode(match self.0 {
  206|  2.00k|            BlankNodeRefContent::Named(id) => BlankNodeContent::Named(id.to_owned()),
  207|   180k|            BlankNodeRefContent::Anonymous { id, .. } => BlankNodeContent::Anonymous {
  208|   180k|                id,
  209|   180k|                str: IdStr::new(id),
  210|   180k|            },
  211|       |        })
  212|   182k|    }
_RNvMs7_NtCsgSruOWiD3Xy_5oxrdf10blank_nodeNtB5_5IdStr3newCsgNaHgHERLlN_4trig:
  255|   180k|    fn new(id: u128) -> Self {
  256|   180k|        let mut str = [0; 32];
  257|   180k|        write!(&mut str[..], "{id:x}").unwrap();
  258|   180k|        Self(str)
  259|   180k|    }
_RNvMs7_NtCsgSruOWiD3Xy_5oxrdf10blank_nodeNtB5_5IdStr6as_strCsgNaHgHERLlN_4trig:
  262|   564k|    fn as_str(&self) -> &str {
  263|   564k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  264|   564k|        str::from_utf8(&self.0[..len]).unwrap()
  265|   564k|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idCs2uQIyP4qcLL_5oxttl:
   62|   326k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|   326k|        Self(BlankNodeContent::Anonymous {
   64|   326k|            id,
   65|   326k|            str: IdStr::new(id),
   66|   326k|        })
   67|   326k|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCs2uQIyP4qcLL_5oxttl:
   88|  2.83k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|  2.83k|        BlankNodeRef(match &self.0 {
   90|    729|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|  2.10k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|  2.10k|                id: *id,
   93|  2.10k|                str: str.as_str(),
   94|  2.10k|            },
   95|       |        })
   96|  2.83k|    }
_RNvMs1_NtCsgSruOWiD3Xy_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCs2uQIyP4qcLL_5oxttl:
  176|   316k|    pub const fn as_str(self) -> &'a str {
  177|   316k|        match self.0 {
  178|  6.01k|            BlankNodeRefContent::Named(id) => id,
  179|   310k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  180|       |        }
  181|   316k|    }
_RNvMs7_NtCsgSruOWiD3Xy_5oxrdf10blank_nodeNtB5_5IdStr3newCs2uQIyP4qcLL_5oxttl:
  255|  1.57M|    fn new(id: u128) -> Self {
  256|  1.57M|        let mut str = [0; 32];
  257|  1.57M|        write!(&mut str[..], "{id:x}").unwrap();
  258|  1.57M|        Self(str)
  259|  1.57M|    }
_RNvMs7_NtCsgSruOWiD3Xy_5oxrdf10blank_nodeNtB5_5IdStr6as_strCs2uQIyP4qcLL_5oxttl:
  262|  1.24M|    fn as_str(&self) -> &str {
  263|  1.24M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  264|  1.24M|        str::from_utf8(&self.0[..len]).unwrap()
  265|  1.24M|    }
_RNvNtCsgSruOWiD3Xy_5oxrdf10blank_node13to_integer_idCs2uQIyP4qcLL_5oxttl:
  328|   355k|fn to_integer_id(id: &str) -> Option<u128> {
  329|   355k|    let digits = id.as_bytes();
  330|   355k|    let mut value: u128 = 0;
  331|   355k|    if let None | Some(b'0') = digits.first() {
  332|  16.3k|        return None; // No empty string or leading zeros
  333|   339k|    }
  334|  10.2M|    for digit in digits {
  335|  9.94M|        value = value.checked_mul(16)?.checked_add(
  336|  9.94M|            match *digit {
  337|  9.94M|                b'0'..=b'9' => digit - b'0',
  338|  3.91M|                b'a'..=b'f' => digit - b'a' + 10,
  339|  11.2k|                _ => return None,
  340|       |            }
  341|  9.93M|            .into(),
  342|      0|        )?;
  343|       |    }
  344|   326k|    Some(value)
  345|   355k|}
_RNvXs0_NtCsgSruOWiD3Xy_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCslA8OvuvDMgt_4core7default7Default7defaultCs2uQIyP4qcLL_5oxttl:
  109|   498k|    fn default() -> Self {
  110|       |        // We ensure the ID does not start with a number to be also valid with RDF/XML
  111|  1.24M|        loop {
  112|  1.24M|            let id = random();
  113|  1.24M|            let str = IdStr::new(id);
  114|  1.24M|            if matches!(str.as_str().as_bytes().first(), Some(b'a'..=b'f')) {
  115|   498k|                return Self(BlankNodeContent::Anonymous { id, str });
  116|   747k|            }
  117|       |        }
  118|   498k|    }
_RNvXs2_NtCsgSruOWiD3Xy_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCslA8OvuvDMgt_4core3fmt7Display3fmtCs2uQIyP4qcLL_5oxttl:
  217|   316k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  218|   316k|        write!(f, "_:{}", self.as_str())
  219|   316k|    }
_RINvMNtCsgSruOWiD3Xy_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedReECs2uQIyP4qcLL_5oxttl:
   49|   355k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   50|   355k|        let id = id.into();
   51|   355k|        if let Some(numerical_id) = to_integer_id(&id) {
   52|   326k|            Self::new_from_unique_id(numerical_id)
   53|       |        } else {
   54|  28.7k|            Self(BlankNodeContent::Named(id))
   55|       |        }
   56|   355k|    }
_RNCNvMs7_NtCsgSruOWiD3Xy_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  263|  61.6M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
_RNvMNtCsgSruOWiD3Xy_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idB4_:
   62|   232k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|   232k|        Self(BlankNodeContent::Anonymous {
   64|   232k|            id,
   65|   232k|            str: IdStr::new(id),
   66|   232k|        })
   67|   232k|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf10blank_nodeNtB2_9BlankNode6as_refB4_:
   88|   234k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|   234k|        BlankNodeRef(match &self.0 {
   90|    654|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|   234k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|   234k|                id: *id,
   93|   234k|                str: str.as_str(),
   94|   234k|            },
   95|       |        })
   96|   234k|    }
_RNvMs1_NtCsgSruOWiD3Xy_5oxrdf10blank_nodeNtB5_12BlankNodeRef13new_uncheckedB7_:
  163|  18.7k|    pub fn new_unchecked(id: &'a str) -> Self {
  164|  18.7k|        if let Some(numerical_id) = to_integer_id(id) {
  165|  18.7k|            Self(BlankNodeRefContent::Anonymous {
  166|  18.7k|                id: numerical_id,
  167|  18.7k|                str: id,
  168|  18.7k|            })
  169|       |        } else {
  170|      0|            Self(BlankNodeRefContent::Named(id))
  171|       |        }
  172|  18.7k|    }
_RNvMs1_NtCsgSruOWiD3Xy_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strB7_:
  176|  70.5k|    pub const fn as_str(self) -> &'a str {
  177|  70.5k|        match self.0 {
  178|  5.13k|            BlankNodeRefContent::Named(id) => id,
  179|  65.3k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  180|       |        }
  181|  70.5k|    }
_RNvMs1_NtCsgSruOWiD3Xy_5oxrdf10blank_nodeNtB5_12BlankNodeRef9unique_idB7_:
  196|   291k|    pub const fn unique_id(&self) -> Option<u128> {
  197|   291k|        match self.0 {
  198|  5.13k|            BlankNodeRefContent::Named(_) => None,
  199|   286k|            BlankNodeRefContent::Anonymous { id, .. } => Some(id),
  200|       |        }
  201|   291k|    }
_RNvMs1_NtCsgSruOWiD3Xy_5oxrdf10blank_nodeNtB5_12BlankNodeRef10into_ownedB7_:
  204|  3.93k|    pub fn into_owned(self) -> BlankNode {
  205|  3.93k|        BlankNode(match self.0 {
  206|    654|            BlankNodeRefContent::Named(id) => BlankNodeContent::Named(id.to_owned()),
  207|  3.27k|            BlankNodeRefContent::Anonymous { id, .. } => BlankNodeContent::Anonymous {
  208|  3.27k|                id,
  209|  3.27k|                str: IdStr::new(id),
  210|  3.27k|            },
  211|       |        })
  212|  3.93k|    }
_RNvMs7_NtCsgSruOWiD3Xy_5oxrdf10blank_nodeNtB5_5IdStr3newB7_:
  255|   235k|    fn new(id: u128) -> Self {
  256|   235k|        let mut str = [0; 32];
  257|   235k|        write!(&mut str[..], "{id:x}").unwrap();
  258|   235k|        Self(str)
  259|   235k|    }
_RNvMs7_NtCsgSruOWiD3Xy_5oxrdf10blank_nodeNtB5_5IdStr6as_strB7_:
  262|   234k|    fn as_str(&self) -> &str {
  263|   234k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  264|   234k|        str::from_utf8(&self.0[..len]).unwrap()
  265|   234k|    }
_RNvNtCsgSruOWiD3Xy_5oxrdf10blank_node13to_integer_idB3_:
  328|  18.7k|fn to_integer_id(id: &str) -> Option<u128> {
  329|  18.7k|    let digits = id.as_bytes();
  330|  18.7k|    let mut value: u128 = 0;
  331|  18.7k|    if let None | Some(b'0') = digits.first() {
  332|      0|        return None; // No empty string or leading zeros
  333|  18.7k|    }
  334|   316k|    for digit in digits {
  335|   298k|        value = value.checked_mul(16)?.checked_add(
  336|   298k|            match *digit {
  337|   298k|                b'0'..=b'9' => digit - b'0',
  338|   109k|                b'a'..=b'f' => digit - b'a' + 10,
  339|      0|                _ => return None,
  340|       |            }
  341|   298k|            .into(),
  342|      0|        )?;
  343|       |    }
  344|  18.7k|    Some(value)
  345|  18.7k|}

_RINvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB3_7Dataset6insertRNtNtB5_6triple4QuadECsgNaHgHERLlN_4trig:
  361|   274k|    pub fn insert<'a>(&mut self, quad: impl Into<QuadRef<'a>>) -> bool {
  362|   274k|        let quad = self.encode_quad(quad.into());
  363|   274k|        self.insert_encoded(quad)
  364|   274k|    }
_RINvXs3_NtCsgSruOWiD3Xy_5oxrdf7datasetNtB6_7DatasetINtNtNtNtCslA8OvuvDMgt_4core4iter6traits7collect12FromIteratorRNtNtB8_6triple4QuadE9from_iterINtNtNtBW_5slice4iter4IterB1O_EECsgNaHgHERLlN_4trig:
  945|  12.7k|    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self {
  946|  12.7k|        let mut g = Self::new();
  947|  12.7k|        g.extend(iter);
  948|  12.7k|        g
  949|  12.7k|    }
_RINvXs5_NtCsgSruOWiD3Xy_5oxrdf7datasetNtB6_7DatasetINtNtNtNtCslA8OvuvDMgt_4core4iter6traits7collect6ExtendRNtNtB8_6triple4QuadE6extendINtNtNtBW_5slice4iter4IterB1H_EECsgNaHgHERLlN_4trig:
  961|  12.7k|    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  962|   286k|        for t in iter {
  963|   274k|            self.insert(t);
  964|   274k|        }
  965|  12.7k|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB2_7Dataset3new:
  110|  12.7k|    pub fn new() -> Self {
  111|  12.7k|        Self::default()
  112|  12.7k|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB2_7Dataset4iter:
  170|  6.36k|    pub fn iter(&self) -> Iter<'_> {
  171|  6.36k|        let iter = self.spog.iter();
  172|  6.36k|        Iter {
  173|  6.36k|            dataset: self,
  174|  6.36k|            inner: iter,
  175|  6.36k|        }
  176|  6.36k|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB2_7Dataset3len:
  351|  12.7k|    pub fn len(&self) -> usize {
  352|  12.7k|        self.gspo.len()
  353|  12.7k|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB2_7Dataset14insert_encoded:
  366|   484k|    fn insert_encoded(
  367|   484k|        &mut self,
  368|   484k|        quad: (
  369|   484k|            InternedSubject,
  370|   484k|            InternedNamedNode,
  371|   484k|            InternedTerm,
  372|   484k|            InternedGraphName,
  373|   484k|        ),
  374|   484k|    ) -> bool {
  375|   484k|        let (s, p, o, g) = quad;
  376|   484k|        self.gspo.insert((g.clone(), s.clone(), p, o.clone()));
  377|   484k|        self.gpos.insert((g.clone(), p, o.clone(), s.clone()));
  378|   484k|        self.gosp.insert((g.clone(), o.clone(), s.clone(), p));
  379|   484k|        self.spog.insert((s.clone(), p, o.clone(), g.clone()));
  380|   484k|        self.posg.insert((p, o.clone(), s.clone(), g.clone()));
  381|   484k|        self.ospg.insert((o, s, p, g))
  382|   484k|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB2_7Dataset5clear:
  412|  12.7k|    pub fn clear(&mut self) {
  413|  12.7k|        self.gspo.clear();
  414|  12.7k|        self.gpos.clear();
  415|  12.7k|        self.gosp.clear();
  416|  12.7k|        self.spog.clear();
  417|  12.7k|        self.posg.clear();
  418|  12.7k|        self.ospg.clear();
  419|  12.7k|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB2_7Dataset11encode_quad:
  421|   274k|    fn encode_quad(
  422|   274k|        &mut self,
  423|   274k|        quad: QuadRef<'_>,
  424|   274k|    ) -> (
  425|   274k|        InternedSubject,
  426|   274k|        InternedNamedNode,
  427|   274k|        InternedTerm,
  428|   274k|        InternedGraphName,
  429|   274k|    ) {
  430|   274k|        (
  431|   274k|            InternedSubject::encoded_into(quad.subject, &mut self.interner),
  432|   274k|            InternedNamedNode::encoded_into(quad.predicate, &mut self.interner),
  433|   274k|            InternedTerm::encoded_into(quad.object, &mut self.interner),
  434|   274k|            InternedGraphName::encoded_into(quad.graph_name, &mut self.interner),
  435|   274k|        )
  436|   274k|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB2_7Dataset12encoded_quad:
  438|   105k|    fn encoded_quad(
  439|   105k|        &self,
  440|   105k|        quad: QuadRef<'_>,
  441|   105k|    ) -> Option<(
  442|   105k|        InternedSubject,
  443|   105k|        InternedNamedNode,
  444|   105k|        InternedTerm,
  445|   105k|        InternedGraphName,
  446|   105k|    )> {
  447|   105k|        Some((
  448|   105k|            self.encoded_subject(quad.subject)?,
  449|   105k|            self.encoded_named_node(quad.predicate)?,
  450|   105k|            self.encoded_term(quad.object)?,
  451|   105k|            self.encoded_graph_name(quad.graph_name)?,
  452|       |        ))
  453|   105k|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB2_7Dataset11decode_spog:
  480|   105k|    fn decode_spog(
  481|   105k|        &self,
  482|   105k|        quad: (
  483|   105k|            &InternedSubject,
  484|   105k|            &InternedNamedNode,
  485|   105k|            &InternedTerm,
  486|   105k|            &InternedGraphName,
  487|   105k|        ),
  488|   105k|    ) -> QuadRef<'_> {
  489|   105k|        QuadRef {
  490|   105k|            subject: quad.0.decode_from(&self.interner),
  491|   105k|            predicate: quad.1.decode_from(&self.interner),
  492|   105k|            object: quad.2.decode_from(&self.interner),
  493|   105k|            graph_name: quad.3.decode_from(&self.interner),
  494|   105k|        }
  495|   105k|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB2_7Dataset12canonicalize:
  542|  12.7k|    pub fn canonicalize(&mut self) {
  543|  12.7k|        let bnodes = self.blank_nodes();
  544|  12.7k|        let quads_per_blank_node = self.quads_per_blank_nodes();
  545|  12.7k|        let (hash, partition) = self.hash_bnodes(
  546|  12.7k|            bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
  547|  12.7k|            &quads_per_blank_node,
  548|  12.7k|        );
  549|  12.7k|        let new_quads = self.distinguish(&hash, &partition, &quads_per_blank_node);
  550|  12.7k|        self.clear();
  551|   223k|        for quad in new_quads {
  552|   210k|            self.insert_encoded(quad);
  553|   210k|        }
  554|  12.7k|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB2_7Dataset11blank_nodes:
  556|  12.7k|    fn blank_nodes(&self) -> HashSet<InternedBlankNode> {
  557|  12.7k|        let mut bnodes = HashSet::new();
  558|   223k|        for (g, s, _, o) in &self.gspo {
  559|   210k|            if let InternedSubject::BlankNode(bnode) = s {
  560|  27.2k|                bnodes.insert(*bnode);
  561|   183k|            }
  562|       |            #[cfg(feature = "rdf-star")]
  563|   210k|            if let InternedSubject::Triple(triple) = s {
  564|  81.5k|                Self::triple_blank_nodes(triple, &mut bnodes);
  565|   129k|            }
  566|   210k|            if let InternedTerm::BlankNode(bnode) = o {
  567|  8.95k|                bnodes.insert(*bnode);
  568|   201k|            }
  569|       |            #[cfg(feature = "rdf-star")]
  570|   210k|            if let InternedTerm::Triple(triple) = o {
  571|  5.94k|                Self::triple_blank_nodes(triple, &mut bnodes);
  572|   204k|            }
  573|   210k|            if let InternedGraphName::BlankNode(bnode) = g {
  574|  1.27k|                bnodes.insert(*bnode);
  575|   209k|            }
  576|       |        }
  577|  12.7k|        bnodes
  578|  12.7k|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB2_7Dataset18triple_blank_nodes:
  581|   213k|    fn triple_blank_nodes(triple: &InternedTriple, bnodes: &mut HashSet<InternedBlankNode>) {
  582|   213k|        if let InternedSubject::BlankNode(bnode) = &triple.subject {
  583|    694|            bnodes.insert(*bnode);
  584|   212k|        } else if let InternedSubject::Triple(t) = &triple.subject {
  585|   125k|            Self::triple_blank_nodes(t, bnodes);
  586|   125k|        }
  587|   213k|        if let InternedTerm::BlankNode(bnode) = &triple.object {
  588|    924|            bnodes.insert(*bnode);
  589|   212k|        } else if let InternedTerm::Triple(t) = &triple.object {
  590|      0|            Self::triple_blank_nodes(t, bnodes);
  591|   212k|        }
  592|   213k|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB2_7Dataset21quads_per_blank_nodes:
  594|  12.7k|    fn quads_per_blank_nodes(&self) -> QuadsPerBlankNode {
  595|  12.7k|        let mut map: HashMap<_, Vec<_>> = HashMap::new();
  596|   223k|        for quad in &self.spog {
  597|   210k|            if let InternedSubject::BlankNode(bnode) = &quad.0 {
  598|  27.2k|                map.entry(*bnode).or_default().push(quad.clone());
  599|   183k|            }
  600|       |            #[cfg(feature = "rdf-star")]
  601|   210k|            if let InternedSubject::Triple(t) = &quad.0 {
  602|  81.5k|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  603|   129k|            }
  604|   210k|            if let InternedTerm::BlankNode(bnode) = &quad.2 {
  605|  8.95k|                map.entry(*bnode).or_default().push(quad.clone());
  606|   201k|            }
  607|       |            #[cfg(feature = "rdf-star")]
  608|   210k|            if let InternedTerm::Triple(t) = &quad.2 {
  609|  5.94k|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  610|   204k|            }
  611|   210k|            if let InternedGraphName::BlankNode(bnode) = &quad.3 {
  612|  1.27k|                map.entry(*bnode).or_default().push(quad.clone());
  613|   209k|            }
  614|       |        }
  615|  12.7k|        map
  616|  12.7k|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB2_7Dataset55add_quad_with_quoted_triple_to_quad_per_blank_nodes_map:
  619|   213k|    fn add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(
  620|   213k|        quad: &(
  621|   213k|            InternedSubject,
  622|   213k|            InternedNamedNode,
  623|   213k|            InternedTerm,
  624|   213k|            InternedGraphName,
  625|   213k|        ),
  626|   213k|        triple: &InternedTriple,
  627|   213k|        map: &mut QuadsPerBlankNode,
  628|   213k|    ) {
  629|   213k|        if let InternedSubject::BlankNode(bnode) = &triple.subject {
  630|    694|            map.entry(*bnode).or_default().push(quad.clone());
  631|   212k|        }
  632|   213k|        if let InternedSubject::Triple(t) = &triple.subject {
  633|   125k|            Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, map);
  634|   125k|        }
  635|   213k|        if let InternedTerm::BlankNode(bnode) = &triple.object {
  636|    924|            map.entry(*bnode).or_default().push(quad.clone());
  637|   212k|        }
  638|   213k|        if let InternedTerm::Triple(t) = &triple.object {
  639|      0|            Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, map);
  640|   213k|        }
  641|   213k|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB2_7Dataset11hash_bnodes:
  643|   101k|    fn hash_bnodes(
  644|   101k|        &self,
  645|   101k|        mut hashes: HashMap<InternedBlankNode, u64>,
  646|   101k|        quads_per_blank_node: &QuadsPerBlankNode,
  647|   101k|    ) -> (
  648|   101k|        HashMap<InternedBlankNode, u64>,
  649|   101k|        Vec<(u64, Vec<InternedBlankNode>)>,
  650|   101k|    ) {
  651|   101k|        let mut to_hash = Vec::new();
  652|   101k|        let mut to_do = hashes
  653|   101k|            .keys()
  654|   101k|            .map(|bnode| (*bnode, true))
  655|   101k|            .collect::<HashMap<_, _>>();
  656|   101k|        let mut partition = HashMap::<_, Vec<_>>::with_capacity(hashes.len());
  657|   101k|        let mut old_partition_count = usize::MAX;
  658|   303k|        while old_partition_count != partition.len() {
  659|   202k|            old_partition_count = partition.len();
  660|   202k|            partition.clear();
  661|   202k|            let mut new_hashes = hashes.clone();
  662|   750k|            for bnode in hashes.keys() {
  663|   750k|                let hash = if to_do.contains_key(bnode) {
  664|   761k|                    for (s, p, o, g) in &quads_per_blank_node[bnode] {
  665|   761k|                        to_hash.push((
  666|   761k|                            self.hash_subject(s, *bnode, &hashes),
  667|   761k|                            self.hash_named_node(*p),
  668|   761k|                            self.hash_term(o, *bnode, &hashes),
  669|   761k|                            self.hash_graph_name(g, *bnode, &hashes),
  670|   761k|                        ));
  671|   761k|                    }
  672|   750k|                    to_hash.sort_unstable();
  673|   750k|                    let hash = Self::hash_tuple((&to_hash, hashes[bnode]));
  674|   750k|                    to_hash.clear();
  675|   750k|                    if hash == hashes[bnode] {
  676|      0|                        to_do.insert(*bnode, false);
  677|   750k|                    } else {
  678|   750k|                        new_hashes.insert(*bnode, hash);
  679|   750k|                    }
  680|   750k|                    hash
  681|       |                } else {
  682|      0|                    hashes[bnode]
  683|       |                };
  684|   750k|                partition.entry(hash).or_default().push(*bnode);
  685|       |            }
  686|   202k|            hashes = new_hashes;
  687|       |        }
  688|   101k|        let mut partition: Vec<_> = partition.into_iter().collect();
  689|   101k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));
  690|   101k|        (hashes, partition)
  691|   101k|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB2_7Dataset15hash_named_node:
  693|   830k|    fn hash_named_node(&self, node: InternedNamedNode) -> u64 {
  694|   830k|        Self::hash_tuple(node.decode_from(&self.interner))
  695|   830k|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB2_7Dataset15hash_blank_node:
  697|   797k|    fn hash_blank_node(
  698|   797k|        node: InternedBlankNode,
  699|   797k|        current_blank_node: InternedBlankNode,
  700|   797k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  701|   797k|    ) -> u64 {
  702|   797k|        if node == current_blank_node {
  703|   761k|            u64::MAX
  704|       |        } else {
  705|  35.8k|            bnodes_hash[&node]
  706|       |        }
  707|   797k|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB2_7Dataset12hash_subject:
  709|   830k|    fn hash_subject(
  710|   830k|        &self,
  711|   830k|        node: &InternedSubject,
  712|   830k|        current_blank_node: InternedBlankNode,
  713|   830k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  714|   830k|    ) -> u64 {
  715|   830k|        match node {
  716|   218k|            InternedSubject::NamedNode(node) => Self::hash_tuple(node.decode_from(&self.interner)),
  717|   610k|            InternedSubject::BlankNode(bnode) => {
  718|   610k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  719|       |            }
  720|       |            #[cfg(feature = "rdf-star")]
  721|  1.94k|            InternedSubject::Triple(triple) => {
  722|  1.94k|                self.hash_triple(triple, current_blank_node, bnodes_hash)
  723|       |            }
  724|       |        }
  725|   830k|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB2_7Dataset9hash_term:
  727|   830k|    fn hash_term(
  728|   830k|        &self,
  729|   830k|        term: &InternedTerm,
  730|   830k|        current_blank_node: InternedBlankNode,
  731|   830k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  732|   830k|    ) -> u64 {
  733|   830k|        match term {
  734|  19.7k|            InternedTerm::NamedNode(node) => Self::hash_tuple(node.decode_from(&self.interner)),
  735|   177k|            InternedTerm::BlankNode(bnode) => {
  736|   177k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  737|       |            }
  738|   565k|            InternedTerm::Literal(literal) => Self::hash_tuple(literal.decode_from(&self.interner)),
  739|       |            #[cfg(feature = "rdf-star")]
  740|  67.6k|            InternedTerm::Triple(triple) => {
  741|  67.6k|                self.hash_triple(triple, current_blank_node, bnodes_hash)
  742|       |            }
  743|       |        }
  744|   830k|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB2_7Dataset15hash_graph_name:
  746|   761k|    fn hash_graph_name(
  747|   761k|        &self,
  748|   761k|        graph_name: &InternedGraphName,
  749|   761k|        current_blank_node: InternedBlankNode,
  750|   761k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  751|   761k|    ) -> u64 {
  752|   761k|        match graph_name {
  753|  48.2k|            InternedGraphName::NamedNode(node) => {
  754|  48.2k|                Self::hash_tuple(node.decode_from(&self.interner))
  755|       |            }
  756|  9.41k|            InternedGraphName::BlankNode(bnode) => {
  757|  9.41k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  758|       |            }
  759|   703k|            InternedGraphName::DefaultGraph => 0,
  760|       |        }
  761|   761k|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB2_7Dataset11hash_triple:
  764|  69.6k|    fn hash_triple(
  765|  69.6k|        &self,
  766|  69.6k|        triple: &InternedTriple,
  767|  69.6k|        current_blank_node: InternedBlankNode,
  768|  69.6k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  769|  69.6k|    ) -> u64 {
  770|  69.6k|        Self::hash_tuple((
  771|  69.6k|            self.hash_subject(&triple.subject, current_blank_node, bnodes_hash),
  772|  69.6k|            self.hash_named_node(triple.predicate),
  773|  69.6k|            self.hash_term(&triple.object, current_blank_node, bnodes_hash),
  774|  69.6k|        ))
  775|  69.6k|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB2_7Dataset11distinguish:
  783|   101k|    fn distinguish(
  784|   101k|        &mut self,
  785|   101k|        hash: &HashMap<InternedBlankNode, u64>,
  786|   101k|        partition: &[(u64, Vec<InternedBlankNode>)],
  787|   101k|        quads_per_blank_node: &QuadsPerBlankNode,
  788|   101k|    ) -> Vec<(
  789|   101k|        InternedSubject,
  790|   101k|        InternedNamedNode,
  791|   101k|        InternedTerm,
  792|   101k|        InternedGraphName,
  793|   101k|    )> {
  794|   101k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
  795|   101k|        if let Some(b_prime) = b_prime {
  796|  38.3k|            b_prime
  797|  38.3k|                .iter()
  798|  38.3k|                .map(|b| {
  799|       |                    let mut hash_prime = hash.clone();
  800|       |                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  801|       |                    let (hash_prime_prime, partition_prime) =
  802|       |                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  803|       |                    self.distinguish(&hash_prime_prime, &partition_prime, quads_per_blank_node)
  804|  38.3k|                })
  805|  38.3k|                .reduce(min)
  806|  38.3k|                .unwrap_or_default()
  807|       |        } else {
  808|  62.7k|            self.label(hash)
  809|       |        }
  810|   101k|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB2_7Dataset5label:
  813|  62.7k|    fn label(
  814|  62.7k|        &mut self,
  815|  62.7k|        hashes: &HashMap<InternedBlankNode, u64>,
  816|  62.7k|    ) -> Vec<(
  817|  62.7k|        InternedSubject,
  818|  62.7k|        InternedNamedNode,
  819|  62.7k|        InternedTerm,
  820|  62.7k|        InternedGraphName,
  821|  62.7k|    )> {
  822|  62.7k|        let old_quads: Vec<_> = self.spog.iter().cloned().collect();
  823|  62.7k|        let mut quads: Vec<_> = old_quads
  824|  62.7k|            .into_iter()
  825|  62.7k|            .map(|(s, p, o, g)| {
  826|       |                (
  827|       |                    match s {
  828|       |                        InternedSubject::NamedNode(_) => s,
  829|       |                        InternedSubject::BlankNode(bnode) => {
  830|       |                            InternedSubject::BlankNode(self.map_bnode(bnode, hashes))
  831|       |                        }
  832|       |                        #[cfg(feature = "rdf-star")]
  833|       |                        InternedSubject::Triple(triple) => {
  834|       |                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  835|       |                                self.label_triple(&triple, hashes).as_ref(),
  836|       |                                &mut self.interner,
  837|       |                            )))
  838|       |                        }
  839|       |                    },
  840|       |                    p,
  841|       |                    match o {
  842|       |                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  843|       |                        InternedTerm::BlankNode(bnode) => {
  844|       |                            InternedTerm::BlankNode(self.map_bnode(bnode, hashes))
  845|       |                        }
  846|       |                        #[cfg(feature = "rdf-star")]
  847|       |                        InternedTerm::Triple(triple) => {
  848|       |                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  849|       |                                self.label_triple(&triple, hashes).as_ref(),
  850|       |                                &mut self.interner,
  851|       |                            )))
  852|       |                        }
  853|       |                    },
  854|       |                    match g {
  855|       |                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  856|       |                        InternedGraphName::BlankNode(bnode) => {
  857|       |                            InternedGraphName::BlankNode(self.map_bnode(bnode, hashes))
  858|       |                        }
  859|       |                    },
  860|       |                )
  861|  62.7k|            })
  862|  62.7k|            .collect();
  863|  62.7k|        quads.sort_unstable();
  864|  62.7k|        quads
  865|  62.7k|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB2_7Dataset12label_triple:
  868|  2.10M|    fn label_triple(
  869|  2.10M|        &mut self,
  870|  2.10M|        triple: &InternedTriple,
  871|  2.10M|        hashes: &HashMap<InternedBlankNode, u64>,
  872|  2.10M|    ) -> Triple {
  873|       |        Triple {
  874|  2.10M|            subject: if let InternedSubject::BlankNode(bnode) = &triple.subject {
  875|    976|                Self::gen_bnode(*bnode, hashes).into()
  876|  2.10M|            } else if let InternedSubject::Triple(t) = &triple.subject {
  877|  1.21M|                self.label_triple(t, hashes).into()
  878|       |            } else {
  879|   881k|                triple.subject.decode_from(&self.interner).into_owned()
  880|       |            },
  881|  2.10M|            predicate: triple.predicate.decode_from(&self.interner).into_owned(),
  882|  2.10M|            object: if let InternedTerm::BlankNode(bnode) = &triple.object {
  883|  1.33k|                Self::gen_bnode(*bnode, hashes).into()
  884|  2.10M|            } else if let InternedTerm::Triple(t) = &triple.object {
  885|      0|                self.label_triple(t, hashes).into()
  886|       |            } else {
  887|  2.10M|                triple.object.decode_from(&self.interner).into_owned()
  888|       |            },
  889|       |        }
  890|  2.10M|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB2_7Dataset9map_bnode:
  892|   230k|    fn map_bnode(
  893|   230k|        &mut self,
  894|   230k|        old_bnode: InternedBlankNode,
  895|   230k|        hashes: &HashMap<InternedBlankNode, u64>,
  896|   230k|    ) -> InternedBlankNode {
  897|   230k|        InternedBlankNode::encoded_into(
  898|   230k|            Self::gen_bnode(old_bnode, hashes).as_ref(),
  899|   230k|            &mut self.interner,
  900|   230k|        )
  901|   230k|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB2_7Dataset9gen_bnode:
  903|   232k|    fn gen_bnode(
  904|   232k|        old_bnode: InternedBlankNode,
  905|   232k|        hashes: &HashMap<InternedBlankNode, u64>,
  906|   232k|    ) -> BlankNode {
  907|   232k|        BlankNode::new_from_unique_id(hashes[&old_bnode].into())
  908|   232k|    }
_RNvXs_NtCsgSruOWiD3Xy_5oxrdf7datasetNtB4_7DatasetNtNtCslA8OvuvDMgt_4core3cmp9PartialEq2eq:
  912|  6.36k|    fn eq(&self, other: &Self) -> bool {
  913|  6.36k|        if self.len() != other.len() {
  914|      0|            return false;
  915|  6.36k|        }
  916|   111k|        for q in self {
  917|   105k|            if !other.contains(q) {
  918|      0|                return false;
  919|   105k|            }
  920|       |        }
  921|  6.36k|        true
  922|  6.36k|    }
_RNvXs1_NtCsgSruOWiD3Xy_5oxrdf7datasetRNtB5_7DatasetNtNtNtNtCslA8OvuvDMgt_4core4iter6traits7collect12IntoIterator9into_iter:
  931|  6.36k|    fn into_iter(self) -> Self::IntoIter {
  932|  6.36k|        self.iter()
  933|  6.36k|    }
_RNvXsg_NtCsgSruOWiD3Xy_5oxrdf7datasetNtB5_4IterNtNtNtNtCslA8OvuvDMgt_4core4iter6traits8iterator8Iterator4next:
 1531|   111k|    fn next(&mut self) -> Option<Self::Item> {
 1532|   111k|        self.inner
 1533|   111k|            .next()
 1534|   111k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))
 1535|   111k|    }
_RINvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB3_7Dataset8containsNtNtB5_6triple7QuadRefEB5_:
  342|   105k|    pub fn contains<'a>(&self, quad: impl Into<QuadRef<'a>>) -> bool {
  343|   105k|        if let Some(q) = self.encoded_quad(quad.into()) {
  344|   105k|            self.spog.contains(&q)
  345|       |        } else {
  346|      0|            false
  347|       |        }
  348|   105k|    }
_RINvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB3_7Dataset18encoded_named_nodeNtNtB5_10named_node12NamedNodeRefEB5_:
  455|   105k|    pub(super) fn encoded_named_node<'a>(
  456|   105k|        &self,
  457|   105k|        node: impl Into<NamedNodeRef<'a>>,
  458|   105k|    ) -> Option<InternedNamedNode> {
  459|   105k|        InternedNamedNode::encoded_from(node.into(), &self.interner)
  460|   105k|    }
_RINvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB3_7Dataset15encoded_subjectNtNtB5_6triple10SubjectRefEB5_:
  462|   105k|    pub(super) fn encoded_subject<'a>(
  463|   105k|        &self,
  464|   105k|        node: impl Into<SubjectRef<'a>>,
  465|   105k|    ) -> Option<InternedSubject> {
  466|   105k|        InternedSubject::encoded_from(node.into(), &self.interner)
  467|   105k|    }
_RINvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB3_7Dataset12encoded_termNtNtB5_6triple7TermRefEB5_:
  469|   105k|    pub(super) fn encoded_term<'a>(&self, term: impl Into<TermRef<'a>>) -> Option<InternedTerm> {
  470|   105k|        InternedTerm::encoded_from(term.into(), &self.interner)
  471|   105k|    }
_RINvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB3_7Dataset18encoded_graph_nameNtNtB5_6triple12GraphNameRefEB5_:
  473|   105k|    pub(super) fn encoded_graph_name<'a>(
  474|   105k|        &self,
  475|   105k|        graph_name: impl Into<GraphNameRef<'a>>,
  476|   105k|    ) -> Option<InternedGraphName> {
  477|   105k|        InternedGraphName::encoded_from(graph_name.into(), &self.interner)
  478|   105k|    }
_RNCNvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB4_7Dataset12canonicalize0B6_:
  546|  34.8k|            bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
_RNCNvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB4_7Dataset11hash_bnodes0B6_:
  654|   375k|            .map(|bnode| (*bnode, true))
_RNCNvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB4_7Dataset11hash_bnodess_0B6_:
  689|   336k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));
_RINvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB3_7Dataset10hash_tupleNtNtB5_10named_node12NamedNodeRefEB5_:
  777|  1.11M|    fn hash_tuple(v: impl Hash) -> u64 {
  778|  1.11M|        let mut hasher = DefaultHasher::new();
  779|  1.11M|        v.hash(&mut hasher);
  780|  1.11M|        hasher.finish()
  781|  1.11M|    }
_RINvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB3_7Dataset10hash_tupleNtNtB5_7literal10LiteralRefEB5_:
  777|   565k|    fn hash_tuple(v: impl Hash) -> u64 {
  778|   565k|        let mut hasher = DefaultHasher::new();
  779|   565k|        v.hash(&mut hasher);
  780|   565k|        hasher.finish()
  781|   565k|    }
_RINvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB3_7Dataset10hash_tupleTRINtNtCs5pYOfYKUd9L_5alloc3vec3VecTyyyyEEyEEB5_:
  777|   750k|    fn hash_tuple(v: impl Hash) -> u64 {
  778|   750k|        let mut hasher = DefaultHasher::new();
  779|   750k|        v.hash(&mut hasher);
  780|   750k|        hasher.finish()
  781|   750k|    }
_RINvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB3_7Dataset10hash_tupleTylEEB5_:
  777|  88.3k|    fn hash_tuple(v: impl Hash) -> u64 {
  778|  88.3k|        let mut hasher = DefaultHasher::new();
  779|  88.3k|        v.hash(&mut hasher);
  780|  88.3k|        hasher.finish()
  781|  88.3k|    }
_RINvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB3_7Dataset10hash_tupleTyyyEEB5_:
  777|  69.6k|    fn hash_tuple(v: impl Hash) -> u64 {
  778|  69.6k|        let mut hasher = DefaultHasher::new();
  779|  69.6k|        v.hash(&mut hasher);
  780|  69.6k|        hasher.finish()
  781|  69.6k|    }
_RNCNvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB4_7Dataset11distinguish0B6_:
  794|   323k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
_RNCNvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB4_7Dataset11distinguishs_0B6_:
  794|   323k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
_RNCNvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB4_7Dataset11distinguishs0_0B6_:
  798|  88.3k|                .map(|b| {
  799|  88.3k|                    let mut hash_prime = hash.clone();
  800|  88.3k|                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  801|  88.3k|                    let (hash_prime_prime, partition_prime) =
  802|  88.3k|                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  803|  88.3k|                    self.distinguish(&hash_prime_prime, &partition_prime, quads_per_blank_node)
  804|  88.3k|                })
_RNCNvMNtCsgSruOWiD3Xy_5oxrdf7datasetNtB4_7Dataset5label0B6_:
  825|  1.82M|            .map(|(s, p, o, g)| {
  826|  1.82M|                (
  827|  1.82M|                    match s {
  828|   803k|                        InternedSubject::NamedNode(_) => s,
  829|   178k|                        InternedSubject::BlankNode(bnode) => {
  830|   178k|                            InternedSubject::BlankNode(self.map_bnode(bnode, hashes))
  831|       |                        }
  832|       |                        #[cfg(feature = "rdf-star")]
  833|   838k|                        InternedSubject::Triple(triple) => {
  834|   838k|                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  835|   838k|                                self.label_triple(&triple, hashes).as_ref(),
  836|   838k|                                &mut self.interner,
  837|   838k|                            )))
  838|       |                        }
  839|       |                    },
  840|  1.82M|                    p,
  841|  1.82M|                    match o {
  842|  1.72M|                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  843|  49.1k|                        InternedTerm::BlankNode(bnode) => {
  844|  49.1k|                            InternedTerm::BlankNode(self.map_bnode(bnode, hashes))
  845|       |                        }
  846|       |                        #[cfg(feature = "rdf-star")]
  847|  44.3k|                        InternedTerm::Triple(triple) => {
  848|  44.3k|                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  849|  44.3k|                                self.label_triple(&triple, hashes).as_ref(),
  850|  44.3k|                                &mut self.interner,
  851|  44.3k|                            )))
  852|       |                        }
  853|       |                    },
  854|  1.82M|                    match g {
  855|  1.81M|                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  856|  2.44k|                        InternedGraphName::BlankNode(bnode) => {
  857|  2.44k|                            InternedGraphName::BlankNode(self.map_bnode(bnode, hashes))
  858|       |                        }
  859|       |                    },
  860|       |                )
  861|  1.82M|            })
_RNCNvXsg_NtCsgSruOWiD3Xy_5oxrdf7datasetNtB7_4IterNtNtNtNtCslA8OvuvDMgt_4core4iter6traits8iterator8Iterator4next0B9_:
 1534|   105k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))

_RNCNvMs1_NtCsgSruOWiD3Xy_5oxrdf9interningNtB7_17InternedBlankNode12encoded_into0B9_:
  135|  65.3k|                .or_insert_with(|| blank_node.as_str().into());
_RNvMNtCsgSruOWiD3Xy_5oxrdf9interningNtB2_8Interner13get_or_intern:
   18|  8.96M|    fn get_or_intern(&mut self, value: &str) -> Key {
   19|  8.96M|        let mut hash = self.hash(value);
   20|  8.96M|        loop {
   21|  8.96M|            match self.string_for_hash.entry(hash) {
   22|   177k|                Entry::Vacant(e) => {
   23|   177k|                    e.insert(value.into());
   24|   177k|                    return Key(hash);
   25|       |                }
   26|  8.79M|                Entry::Occupied(e) => loop {
   27|  8.79M|                    if e.get() == value {
   28|  8.79M|                        return Key(hash);
   29|      0|                    } else if hash == u64::MAX - 1 {
   30|      0|                        hash = 0;
   31|      0|                    } else {
   32|      0|                        hash += 1;
   33|      0|                    }
   34|       |                },
   35|       |            }
   36|       |        }
   37|  8.96M|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf9interningNtB2_8Interner3get:
   39|   702k|    fn get(&self, value: &str) -> Option<Key> {
   40|   702k|        let mut hash = self.hash(value);
   41|       |        loop {
   42|   702k|            let v = self.string_for_hash.get(&hash)?;
   43|   702k|            if v == value {
   44|   702k|                return Some(Key(hash));
   45|      0|            } else if hash == u64::MAX - 1 {
   46|      0|                hash = 0;
   47|      0|            } else {
   48|      0|                hash += 1;
   49|      0|            }
   50|       |        }
   51|   702k|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf9interningNtB2_8Interner4hash:
   53|  9.67M|    fn hash(&self, value: &str) -> u64 {
   54|  9.67M|        let mut hasher = self.hasher.build_hasher();
   55|  9.67M|        hasher.write(value.as_bytes());
   56|  9.67M|        let hash = hasher.finish();
   57|  9.67M|        if hash == u64::MAX {
   58|      0|            0
   59|       |        } else {
   60|  9.67M|            hash
   61|       |        }
   62|  9.67M|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf9interningNtB2_8Interner7resolve:
   64|  9.71M|    fn resolve(&self, key: Key) -> &str {
   65|  9.71M|        &self.string_for_hash[&key.0]
   66|  9.71M|    }
_RNvMs0_NtCsgSruOWiD3Xy_5oxrdf9interningNtB5_17InternedNamedNode12encoded_into:
   92|  6.39M|    pub fn encoded_into(named_node: NamedNodeRef<'_>, interner: &mut Interner) -> Self {
   93|  6.39M|        Self {
   94|  6.39M|            id: interner.get_or_intern(named_node.as_str()),
   95|  6.39M|        }
   96|  6.39M|    }
_RNvMs0_NtCsgSruOWiD3Xy_5oxrdf9interningNtB5_17InternedNamedNode12encoded_from:
   98|   512k|    pub fn encoded_from(named_node: NamedNodeRef<'_>, interner: &Interner) -> Option<Self> {
   99|   512k|        Some(Self {
  100|   512k|            id: interner.get(named_node.as_str())?,
  101|       |        })
  102|   512k|    }
_RNvMs0_NtCsgSruOWiD3Xy_5oxrdf9interningNtB5_17InternedNamedNode11decode_from:
  104|  6.96M|    pub fn decode_from(self, interner: &Interner) -> NamedNodeRef<'_> {
  105|  6.96M|        NamedNodeRef::new_unchecked(interner.resolve(self.id))
  106|  6.96M|    }
_RNvMs1_NtCsgSruOWiD3Xy_5oxrdf9interningNtB5_17InternedBlankNode12encoded_into:
  130|   271k|    pub fn encoded_into(blank_node: BlankNodeRef<'_>, interner: &mut Interner) -> Self {
  131|   271k|        if let Some(id) = blank_node.unique_id() {
  132|   266k|            interner
  133|   266k|                .string_for_blank_node_id
  134|   266k|                .entry(id)
  135|   266k|                .or_insert_with(|| blank_node.as_str().into());
  136|   266k|            Self::Number { id }
  137|       |        } else {
  138|  5.13k|            Self::Other {
  139|  5.13k|                id: interner.get_or_intern(blank_node.as_str()),
  140|  5.13k|            }
  141|       |        }
  142|   271k|    }
_RNvMs1_NtCsgSruOWiD3Xy_5oxrdf9interningNtB5_17InternedBlankNode12encoded_from:
  144|  19.5k|    pub fn encoded_from(blank_node: BlankNodeRef<'_>, interner: &Interner) -> Option<Self> {
  145|  19.5k|        if let Some(id) = blank_node.unique_id() {
  146|  19.5k|            interner
  147|  19.5k|                .string_for_blank_node_id
  148|  19.5k|                .contains_key(&id)
  149|  19.5k|                .then_some(Self::Number { id })
  150|       |        } else {
  151|       |            Some(Self::Other {
  152|      0|                id: interner.get(blank_node.as_str())?,
  153|       |            })
  154|       |        }
  155|  19.5k|    }
_RNvMs1_NtCsgSruOWiD3Xy_5oxrdf9interningNtB5_17InternedBlankNode11decode_from:
  157|  18.7k|    pub fn decode_from(self, interner: &Interner) -> BlankNodeRef<'_> {
  158|  18.7k|        BlankNodeRef::new_unchecked(match self {
  159|  18.7k|            Self::Number { id } => &interner.string_for_blank_node_id[&id],
  160|      0|            Self::Other { id } => interner.resolve(id),
  161|       |        })
  162|  18.7k|    }
_RNvMs2_NtCsgSruOWiD3Xy_5oxrdf9interningNtB5_15InternedLiteral12encoded_into:
  190|  2.57M|    pub fn encoded_into(literal: LiteralRef<'_>, interner: &mut Interner) -> Self {
  191|  2.57M|        let value_id = interner.get_or_intern(literal.value());
  192|  2.57M|        if literal.is_plain() {
  193|  7.34k|            if let Some(language) = literal.language() {
  194|  1.85k|                Self::LanguageTaggedString {
  195|  1.85k|                    value_id,
  196|  1.85k|                    language_id: interner.get_or_intern(language),
  197|  1.85k|                }
  198|       |            } else {
  199|  5.48k|                Self::String { value_id }
  200|       |            }
  201|       |        } else {
  202|  2.56M|            Self::TypedLiteral {
  203|  2.56M|                value_id,
  204|  2.56M|                datatype: InternedNamedNode::encoded_into(literal.datatype(), interner),
  205|  2.56M|            }
  206|       |        }
  207|  2.57M|    }
_RNvMs2_NtCsgSruOWiD3Xy_5oxrdf9interningNtB5_15InternedLiteral12encoded_from:
  209|   188k|    pub fn encoded_from(literal: LiteralRef<'_>, interner: &Interner) -> Option<Self> {
  210|   188k|        let value_id = interner.get(literal.value())?;
  211|   188k|        Some(if literal.is_plain() {
  212|  2.35k|            if let Some(language) = literal.language() {
  213|       |                Self::LanguageTaggedString {
  214|    894|                    value_id,
  215|    894|                    language_id: interner.get(language)?,
  216|       |                }
  217|       |            } else {
  218|  1.46k|                Self::String { value_id }
  219|       |            }
  220|       |        } else {
  221|       |            Self::TypedLiteral {
  222|   186k|                value_id,
  223|   186k|                datatype: InternedNamedNode::encoded_from(literal.datatype(), interner)?,
  224|       |            }
  225|       |        })
  226|   188k|    }
_RNvMs2_NtCsgSruOWiD3Xy_5oxrdf9interningNtB5_15InternedLiteral11decode_from:
  228|  2.74M|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> LiteralRef<'a> {
  229|  2.74M|        match self {
  230|  48.7k|            Self::String { value_id } => {
  231|  48.7k|                LiteralRef::new_simple_literal(interner.resolve(*value_id))
  232|       |            }
  233|       |            Self::LanguageTaggedString {
  234|  15.0k|                value_id,
  235|  15.0k|                language_id,
  236|  15.0k|            } => LiteralRef::new_language_tagged_literal_unchecked(
  237|  15.0k|                interner.resolve(*value_id),
  238|  15.0k|                interner.resolve(*language_id),
  239|  15.0k|            ),
  240|  2.67M|            Self::TypedLiteral { value_id, datatype } => LiteralRef::new_typed_literal(
  241|  2.67M|                interner.resolve(*value_id),
  242|  2.67M|                datatype.decode_from(interner),
  243|  2.67M|            ),
  244|       |        }
  245|  2.74M|    }
_RNvMs3_NtCsgSruOWiD3Xy_5oxrdf9interningNtB5_15InternedSubject12encoded_into:
  276|  2.63M|    pub fn encoded_into(node: SubjectRef<'_>, interner: &mut Interner) -> Self {
  277|  2.63M|        match node {
  278|  1.13M|            SubjectRef::NamedNode(node) => {
  279|  1.13M|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  280|       |            }
  281|  29.0k|            SubjectRef::BlankNode(node) => {
  282|  29.0k|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  283|       |            }
  284|       |            #[cfg(feature = "rdf-star")]
  285|  1.47M|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  286|  1.47M|                triple.as_ref(),
  287|  1.47M|                interner,
  288|  1.47M|            ))),
  289|       |        }
  290|  2.63M|    }
_RNvMs3_NtCsgSruOWiD3Xy_5oxrdf9interningNtB5_15InternedSubject12encoded_from:
  292|   211k|    pub fn encoded_from(node: SubjectRef<'_>, interner: &Interner) -> Option<Self> {
  293|   211k|        Some(match node {
  294|  94.2k|            SubjectRef::NamedNode(node) => {
  295|  94.2k|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  296|       |            }
  297|  13.9k|            SubjectRef::BlankNode(node) => {
  298|  13.9k|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  299|       |            }
  300|       |            #[cfg(feature = "rdf-star")]
  301|   103k|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  302|   103k|                triple.as_ref(),
  303|   103k|                interner,
  304|   103k|            )?)),
  305|       |        })
  306|   211k|    }
_RNvMs3_NtCsgSruOWiD3Xy_5oxrdf9interningNtB5_15InternedSubject11decode_from:
  308|   987k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> SubjectRef<'a> {
  309|   987k|        match self {
  310|   932k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.decode_from(interner)),
  311|  13.6k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.decode_from(interner)),
  312|       |            #[cfg(feature = "rdf-star")]
  313|  40.7k|            Self::Triple(triple) => SubjectRef::Triple(&interner.triples[triple.as_ref()]),
  314|       |        }
  315|   987k|    }
_RNvMs4_NtCsgSruOWiD3Xy_5oxrdf9interningNtB5_17InternedGraphName12encoded_into:
  343|   274k|    pub fn encoded_into(node: GraphNameRef<'_>, interner: &mut Interner) -> Self {
  344|   274k|        match node {
  345|   261k|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  346|  11.0k|            GraphNameRef::NamedNode(node) => {
  347|  11.0k|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  348|       |            }
  349|  1.27k|            GraphNameRef::BlankNode(node) => {
  350|  1.27k|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  351|       |            }
  352|       |        }
  353|   274k|    }
_RNvMs4_NtCsgSruOWiD3Xy_5oxrdf9interningNtB5_17InternedGraphName12encoded_from:
  355|   105k|    pub fn encoded_from(node: GraphNameRef<'_>, interner: &Interner) -> Option<Self> {
  356|   105k|        Some(match node {
  357|  99.9k|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  358|  4.69k|            GraphNameRef::NamedNode(node) => {
  359|  4.69k|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  360|       |            }
  361|    636|            GraphNameRef::BlankNode(node) => {
  362|    636|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  363|       |            }
  364|       |        })
  365|   105k|    }
_RNvMs4_NtCsgSruOWiD3Xy_5oxrdf9interningNtB5_17InternedGraphName11decode_from:
  367|   105k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> GraphNameRef<'a> {
  368|   105k|        match self {
  369|  99.9k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  370|  4.69k|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.decode_from(interner)),
  371|    636|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.decode_from(interner)),
  372|       |        }
  373|   105k|    }
_RNvMs5_NtCsgSruOWiD3Xy_5oxrdf9interningNtB5_12InternedTerm12encoded_into:
  402|  2.63M|    pub fn encoded_into(term: TermRef<'_>, interner: &mut Interner) -> Self {
  403|  2.63M|        match term {
  404|  46.0k|            TermRef::NamedNode(term) => {
  405|  46.0k|                Self::NamedNode(InternedNamedNode::encoded_into(term, interner))
  406|       |            }
  407|  11.2k|            TermRef::BlankNode(term) => {
  408|  11.2k|                Self::BlankNode(InternedBlankNode::encoded_into(term, interner))
  409|       |            }
  410|  2.57M|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_into(term, interner)),
  411|       |            #[cfg(feature = "rdf-star")]
  412|  6.99k|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  413|  6.99k|                triple.as_ref(),
  414|  6.99k|                interner,
  415|  6.99k|            ))),
  416|       |        }
  417|  2.63M|    }
_RNvMs5_NtCsgSruOWiD3Xy_5oxrdf9interningNtB5_12InternedTerm12encoded_from:
  419|   211k|    pub fn encoded_from(term: TermRef<'_>, interner: &Interner) -> Option<Self> {
  420|   211k|        Some(match term {
  421|  15.4k|            TermRef::NamedNode(term) => {
  422|  15.4k|                Self::NamedNode(InternedNamedNode::encoded_from(term, interner)?)
  423|       |            }
  424|  4.94k|            TermRef::BlankNode(term) => {
  425|  4.94k|                Self::BlankNode(InternedBlankNode::encoded_from(term, interner)?)
  426|       |            }
  427|   188k|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_from(term, interner)?),
  428|       |            #[cfg(feature = "rdf-star")]
  429|  2.97k|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  430|  2.97k|                triple.as_ref(),
  431|  2.97k|                interner,
  432|  2.97k|            )?)),
  433|       |        })
  434|   211k|    }
_RNvMs5_NtCsgSruOWiD3Xy_5oxrdf9interningNtB5_12InternedTerm11decode_from:
  436|  2.20M|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> TermRef<'a> {
  437|  2.20M|        match self {
  438|  21.9k|            Self::NamedNode(term) => TermRef::NamedNode(term.decode_from(interner)),
  439|  4.47k|            Self::BlankNode(term) => TermRef::BlankNode(term.decode_from(interner)),
  440|  2.17M|            Self::Literal(term) => TermRef::Literal(term.decode_from(interner)),
  441|       |            #[cfg(feature = "rdf-star")]
  442|  2.97k|            Self::Triple(triple) => TermRef::Triple(&interner.triples[triple.as_ref()]),
  443|       |        }
  444|  2.20M|    }
_RNvMs6_NtCsgSruOWiD3Xy_5oxrdf9interningNtB5_14InternedTriple12encoded_into:
  474|  2.36M|    pub fn encoded_into(triple: TripleRef<'_>, interner: &mut Interner) -> Self {
  475|  2.36M|        let interned_triple = Self {
  476|  2.36M|            subject: InternedSubject::encoded_into(triple.subject, interner),
  477|  2.36M|            predicate: InternedNamedNode::encoded_into(triple.predicate, interner),
  478|  2.36M|            object: InternedTerm::encoded_into(triple.object, interner),
  479|  2.36M|        };
  480|  2.36M|        interner
  481|  2.36M|            .triples
  482|  2.36M|            .insert(interned_triple.clone(), triple.into_owned());
  483|  2.36M|        interned_triple
  484|  2.36M|    }
_RNvMs6_NtCsgSruOWiD3Xy_5oxrdf9interningNtB5_14InternedTriple12encoded_from:
  486|   106k|    pub fn encoded_from(triple: TripleRef<'_>, interner: &Interner) -> Option<Self> {
  487|   106k|        let interned_triple = Self {
  488|   106k|            subject: InternedSubject::encoded_from(triple.subject, interner)?,
  489|   106k|            predicate: InternedNamedNode::encoded_from(triple.predicate, interner)?,
  490|   106k|            object: InternedTerm::encoded_from(triple.object, interner)?,
  491|       |        };
  492|   106k|        interner
  493|   106k|            .triples
  494|   106k|            .contains_key(&interned_triple)
  495|   106k|            .then_some(interned_triple)
  496|   106k|    }
_RNvXs7_NtCsgSruOWiD3Xy_5oxrdf9interningNtB5_21IdentityHasherBuilderNtNtCslA8OvuvDMgt_4core4hash11BuildHasher12build_hasher:
  513|  19.5M|    fn build_hasher(&self) -> Self::Hasher {
  514|  19.5M|        Self::Hasher::default()
  515|  19.5M|    }
_RNvXs8_NtCsgSruOWiD3Xy_5oxrdf9interningNtB5_14IdentityHasherNtNtCslA8OvuvDMgt_4core4hash6Hasher6finish:
  524|  19.5M|    fn finish(&self) -> u64 {
  525|  19.5M|        self.value
  526|  19.5M|    }
_RNvXs8_NtCsgSruOWiD3Xy_5oxrdf9interningNtB5_14IdentityHasherNtNtCslA8OvuvDMgt_4core4hash6Hasher9write_u64:
  532|  19.5M|    fn write_u64(&mut self, i: u64) {
  533|  19.5M|        self.value = i
  534|  19.5M|    }

_RNvMNtCsgSruOWiD3Xy_5oxrdf7literalNtB2_7Literal6as_refCsgNaHgHERLlN_4trig:
  131|   391k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  132|   391k|        LiteralRef(match &self.0 {
  133|  10.4k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  134|  3.87k|            LiteralContent::LanguageTaggedString { value, language } => {
  135|  3.87k|                LiteralRefContent::LanguageTaggedString { value, language }
  136|       |            }
  137|   376k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  138|   376k|                value,
  139|   376k|                datatype: datatype.as_ref(),
  140|   376k|            },
  141|       |        })
  142|   391k|    }
_RINvMNtCsgSruOWiD3Xy_5oxrdf7literalNtB3_7Literal18new_simple_literalRNtNtCs5pYOfYKUd9L_5alloc6string6StringECs2uQIyP4qcLL_5oxttl:
   49|    280|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   50|    280|        Self(LiteralContent::String(value.into()))
   51|    280|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf7literalNtB2_7Literal6as_refCs2uQIyP4qcLL_5oxttl:
  131|   120k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  132|   120k|        LiteralRef(match &self.0 {
  133|    343|            LiteralContent::String(value) => LiteralRefContent::String(value),
  134|      0|            LiteralContent::LanguageTaggedString { value, language } => {
  135|      0|                LiteralRefContent::LanguageTaggedString { value, language }
  136|       |            }
  137|   120k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  138|   120k|                value,
  139|   120k|                datatype: datatype.as_ref(),
  140|   120k|            },
  141|       |        })
  142|   120k|    }
_RNvMst_NtCsgSruOWiD3Xy_5oxrdf7literalNtB5_10LiteralRef18new_simple_literalCs2uQIyP4qcLL_5oxttl:
  461|    707|    pub const fn new_simple_literal(value: &'a str) -> Self {
  462|    707|        LiteralRef(LiteralRefContent::String(value))
  463|    707|    }
_RNvMst_NtCsgSruOWiD3Xy_5oxrdf7literalNtB5_10LiteralRef5valueCs2uQIyP4qcLL_5oxttl:
  490|   287k|    pub const fn value(self) -> &'a str {
  491|   287k|        match self.0 {
  492|  8.36k|            LiteralRefContent::String(value)
  493|  2.01k|            | LiteralRefContent::LanguageTaggedString { value, .. }
  494|   287k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  495|   287k|        }
  496|   287k|    }
_RNvMst_NtCsgSruOWiD3Xy_5oxrdf7literalNtB5_10LiteralRef8datatypeCs2uQIyP4qcLL_5oxttl:
  515|   287k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  516|   287k|        match self.0 {
  517|  8.36k|            LiteralRefContent::String(_) => xsd::STRING,
  518|  2.01k|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  519|   276k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  520|       |        }
  521|   287k|    }
_RNvMst_NtCsgSruOWiD3Xy_5oxrdf7literalNtB5_10LiteralRef8is_plainCs2uQIyP4qcLL_5oxttl:
  528|  11.0k|    pub const fn is_plain(self) -> bool {
  529|    707|        matches!(
  530|  11.0k|            self.0,
  531|       |            LiteralRefContent::String(_) | LiteralRefContent::LanguageTaggedString { .. }
  532|       |        )
  533|  11.0k|    }
_RNvXsu_NtCsgSruOWiD3Xy_5oxrdf7literalNtB5_10LiteralRefNtNtCslA8OvuvDMgt_4core3fmt7Display3fmtCs2uQIyP4qcLL_5oxttl:
  567|  11.0k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  568|  11.0k|        match self.0 {
  569|  9.07k|            LiteralRefContent::String(value) => print_quoted_str(value, f),
  570|  2.01k|            LiteralRefContent::LanguageTaggedString { value, language } => {
  571|  2.01k|                print_quoted_str(value, f)?;
  572|  2.01k|                write!(f, "@{language}")
  573|       |            }
  574|      0|            LiteralRefContent::TypedLiteral { value, datatype } => {
  575|      0|                print_quoted_str(value, f)?;
  576|      0|                write!(f, "^^{datatype}")
  577|       |            }
  578|       |        }
  579|  11.0k|    }
_RINvMNtCsgSruOWiD3Xy_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCs5pYOfYKUd9L_5alloc6string6StringEB5_:
   49|  33.4k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   50|  33.4k|        Self(LiteralContent::String(value.into()))
   51|  33.4k|    }
_RINvMNtCsgSruOWiD3Xy_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCs5pYOfYKUd9L_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   55|  2.83k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   56|  2.83k|        let value = value.into();
   57|  2.83k|        let datatype = datatype.into();
   58|  2.83k|        Self(if datatype == xsd::STRING {
   59|      0|            LiteralContent::String(value)
   60|       |        } else {
   61|  2.83k|            LiteralContent::TypedLiteral { value, datatype }
   62|       |        })
   63|  2.83k|    }
_RINvMNtCsgSruOWiD3Xy_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   55|   765k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   56|   765k|        let value = value.into();
   57|   765k|        let datatype = datatype.into();
   58|   765k|        Self(if datatype == xsd::STRING {
   59|      0|            LiteralContent::String(value)
   60|       |        } else {
   61|   765k|            LiteralContent::TypedLiteral { value, datatype }
   62|       |        })
   63|   765k|    }
_RINvMNtCsgSruOWiD3Xy_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCs5pYOfYKUd9L_5alloc6string6StringB1n_EB5_:
   87|  8.34k|    pub fn new_language_tagged_literal_unchecked(
   88|  8.34k|        value: impl Into<String>,
   89|  8.34k|        language: impl Into<String>,
   90|  8.34k|    ) -> Self {
   91|  8.34k|        Self(LiteralContent::LanguageTaggedString {
   92|  8.34k|            value: value.into(),
   93|  8.34k|            language: language.into(),
   94|  8.34k|        })
   95|  8.34k|    }
_RINvMst_NtCsgSruOWiD3Xy_5oxrdf7literalNtB6_10LiteralRef17new_typed_literalNtNtB8_10named_node12NamedNodeRefEB8_:
  467|  2.67M|    pub fn new_typed_literal(value: &'a str, datatype: impl Into<NamedNodeRef<'a>>) -> Self {
  468|  2.67M|        let datatype = datatype.into();
  469|  2.67M|        LiteralRef(if datatype == xsd::STRING {
  470|      0|            LiteralRefContent::String(value)
  471|       |        } else {
  472|  2.67M|            LiteralRefContent::TypedLiteral { value, datatype }
  473|       |        })
  474|  2.67M|    }
_RINvNtCsgSruOWiD3Xy_5oxrdf7literal16print_quoted_strNtNtCslA8OvuvDMgt_4core3fmt9FormatterEB4_:
  618|  11.0k|pub fn print_quoted_str(string: &str, f: &mut impl Write) -> fmt::Result {
  619|  11.0k|    f.write_char('"')?;
  620|   138k|    for c in string.chars() {
  621|   138k|        match c {
  622|    286|            '\u{08}' => f.write_str("\\b"),
  623|    387|            '\t' => f.write_str("\\t"),
  624|    560|            '\n' => f.write_str("\\n"),
  625|    399|            '\u{0c}' => f.write_str("\\f"),
  626|    526|            '\r' => f.write_str("\\r"),
  627|  2.05k|            '"' => f.write_str("\\\""),
  628|    124|            '\\' => f.write_str("\\\\"),
  629|   133k|            '\0'..='\u{1f}' | '\u{7f}' => write!(f, "\\u{:04X}", u32::from(c)),
  630|  85.2k|            _ => f.write_char(c),
  631|      0|        }?;
  632|       |    }
  633|  11.0k|    f.write_char('"')
  634|  11.0k|}
_RNvMNtCsgSruOWiD3Xy_5oxrdf7literalNtB2_7Literal6as_refB4_:
  131|  2.45M|    pub fn as_ref(&self) -> LiteralRef<'_> {
  132|  2.45M|        LiteralRef(match &self.0 {
  133|  3.24k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  134|      0|            LiteralContent::LanguageTaggedString { value, language } => {
  135|      0|                LiteralRefContent::LanguageTaggedString { value, language }
  136|       |            }
  137|  2.44M|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  138|  2.44M|                value,
  139|  2.44M|                datatype: datatype.as_ref(),
  140|  2.44M|            },
  141|       |        })
  142|  2.45M|    }
_RNvMst_NtCsgSruOWiD3Xy_5oxrdf7literalNtB5_10LiteralRef18new_simple_literalB7_:
  461|  48.7k|    pub const fn new_simple_literal(value: &'a str) -> Self {
  462|  48.7k|        LiteralRef(LiteralRefContent::String(value))
  463|  48.7k|    }
_RNvMst_NtCsgSruOWiD3Xy_5oxrdf7literalNtB5_10LiteralRef37new_language_tagged_literal_uncheckedB7_:
  484|  15.0k|    pub const fn new_language_tagged_literal_unchecked(value: &'a str, language: &'a str) -> Self {
  485|  15.0k|        LiteralRef(LiteralRefContent::LanguageTaggedString { value, language })
  486|  15.0k|    }
_RNvMst_NtCsgSruOWiD3Xy_5oxrdf7literalNtB5_10LiteralRef5valueB7_:
  490|  2.75M|    pub const fn value(self) -> &'a str {
  491|  2.75M|        match self.0 {
  492|  6.94k|            LiteralRefContent::String(value)
  493|  2.75k|            | LiteralRefContent::LanguageTaggedString { value, .. }
  494|  2.75M|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  495|  2.75M|        }
  496|  2.75M|    }
_RNvMst_NtCsgSruOWiD3Xy_5oxrdf7literalNtB5_10LiteralRef8languageB7_:
  503|  9.69k|    pub const fn language(self) -> Option<&'a str> {
  504|  9.69k|        match self.0 {
  505|  2.75k|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  506|  6.94k|            _ => None,
  507|       |        }
  508|  9.69k|    }
_RNvMst_NtCsgSruOWiD3Xy_5oxrdf7literalNtB5_10LiteralRef8datatypeB7_:
  515|  2.75M|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  516|  2.75M|        match self.0 {
  517|      0|            LiteralRefContent::String(_) => xsd::STRING,
  518|      0|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  519|  2.75M|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  520|       |        }
  521|  2.75M|    }
_RNvMst_NtCsgSruOWiD3Xy_5oxrdf7literalNtB5_10LiteralRef8is_plainB7_:
  528|  2.75M|    pub const fn is_plain(self) -> bool {
  529|  2.75M|        matches!(
  530|  2.75M|            self.0,
  531|       |            LiteralRefContent::String(_) | LiteralRefContent::LanguageTaggedString { .. }
  532|       |        )
  533|  2.75M|    }
_RNvMst_NtCsgSruOWiD3Xy_5oxrdf7literalNtB5_10LiteralRef10into_ownedB7_:
  536|  4.43M|    pub fn into_owned(self) -> Literal {
  537|  4.43M|        Literal(match self.0 {
  538|  5.54k|            LiteralRefContent::String(value) => LiteralContent::String(value.to_owned()),
  539|      0|            LiteralRefContent::LanguageTaggedString { value, language } => {
  540|      0|                LiteralContent::LanguageTaggedString {
  541|      0|                    value: value.to_owned(),
  542|      0|                    language: language.to_owned(),
  543|      0|                }
  544|       |            }
  545|  4.43M|            LiteralRefContent::TypedLiteral { value, datatype } => LiteralContent::TypedLiteral {
  546|  4.43M|                value: value.to_owned(),
  547|  4.43M|                datatype: datatype.into_owned(),
  548|  4.43M|            },
  549|       |        })
  550|  4.43M|    }

_RNvMNtCsgSruOWiD3Xy_5oxrdf10named_nodeNtB2_9NamedNode6as_refCsgNaHgHERLlN_4trig:
   54|  1.55M|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  1.55M|        NamedNodeRef::new_unchecked(&self.iri)
   56|  1.55M|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf10named_nodeNtB2_9NamedNode6as_strCsgNaHgHERLlN_4trig:
   44|  63.8k|    pub fn as_str(&self) -> &str {
   45|  63.8k|        self.iri.as_str()
   46|  63.8k|    }
_RNvMs4_NtCsgSruOWiD3Xy_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCsgNaHgHERLlN_4trig:
  138|   371k|    pub fn into_owned(self) -> NamedNode {
  139|   371k|        NamedNode::new_unchecked(self.iri)
  140|   371k|    }
_RNvMs4_NtCsgSruOWiD3Xy_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCsgNaHgHERLlN_4trig:
  128|  1.55M|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  1.55M|        Self { iri }
  130|  1.55M|    }
_RNvMs4_NtCsgSruOWiD3Xy_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCsgNaHgHERLlN_4trig:
  133|  63.8k|    pub const fn as_str(self) -> &'a str {
  134|  63.8k|        self.iri
  135|  63.8k|    }
_RNvXs8_NtCsgSruOWiD3Xy_5oxrdf10named_nodeNtB5_12NamedNodeRefINtNtCslA8OvuvDMgt_4core3cmp9PartialEqNtB5_9NamedNodeE2eqCsgNaHgHERLlN_4trig:
  166|  63.8k|    fn eq(&self, other: &NamedNode) -> bool {
  167|  63.8k|        self.as_str() == other.as_str()
  168|  63.8k|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf10named_nodeNtB2_9NamedNode6as_refCs2uQIyP4qcLL_5oxttl:
   54|   301k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|   301k|        NamedNodeRef::new_unchecked(&self.iri)
   56|   301k|    }
_RNvMs4_NtCsgSruOWiD3Xy_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCs2uQIyP4qcLL_5oxttl:
  138|  52.6k|    pub fn into_owned(self) -> NamedNode {
  139|  52.6k|        NamedNode::new_unchecked(self.iri)
  140|  52.6k|    }
_RNvMs4_NtCsgSruOWiD3Xy_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCs2uQIyP4qcLL_5oxttl:
  128|   301k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   301k|        Self { iri }
  130|   301k|    }
_RNvMs4_NtCsgSruOWiD3Xy_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCs2uQIyP4qcLL_5oxttl:
  133|   656k|    pub const fn as_str(self) -> &'a str {
  134|   656k|        self.iri
  135|   656k|    }
_RNvXs5_NtCsgSruOWiD3Xy_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCslA8OvuvDMgt_4core3fmt7Display3fmtCs2uQIyP4qcLL_5oxttl:
  145|   563k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|   563k|        write!(f, "<{}>", self.as_str())
  147|   563k|    }
_RINvMNtCsgSruOWiD3Xy_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCs5pYOfYKUd9L_5alloc6string6StringEB5_:
   39|  1.65M|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  1.65M|        Self { iri: iri.into() }
   41|  1.65M|    }
_RINvMNtCsgSruOWiD3Xy_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|  12.5M|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  12.5M|        Self { iri: iri.into() }
   41|  12.5M|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|   768k|    pub fn as_str(&self) -> &str {
   45|   768k|        self.iri.as_str()
   46|   768k|    }
_RNvMNtCsgSruOWiD3Xy_5oxrdf10named_nodeNtB2_9NamedNode6as_refB4_:
   54|  5.96M|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  5.96M|        NamedNodeRef::new_unchecked(&self.iri)
   56|  5.96M|    }
_RNvMs4_NtCsgSruOWiD3Xy_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedB7_:
  128|  12.9M|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  12.9M|        Self { iri }
  130|  12.9M|    }
_RNvMs4_NtCsgSruOWiD3Xy_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|  7.67M|    pub const fn as_str(self) -> &'a str {
  134|  7.67M|        self.iri
  135|  7.67M|    }
_RNvMs4_NtCsgSruOWiD3Xy_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|  12.0M|    pub fn into_owned(self) -> NamedNode {
  139|  12.0M|        NamedNode::new_unchecked(self.iri)
  140|  12.0M|    }
_RNvXs6_NtCsgSruOWiD3Xy_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCslA8OvuvDMgt_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|  1.29M|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|  1.29M|        node.into_owned()
  154|  1.29M|    }
_RNvXs9_NtCsgSruOWiD3Xy_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCslA8OvuvDMgt_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|   768k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|   768k|        self.as_str() == other.as_str()
  175|   768k|    }

_RNvMs18_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB6_9GraphName16is_default_graphCsgNaHgHERLlN_4trig:
  878|   330k|    pub fn is_default_graph(&self) -> bool {
  879|   330k|        self.as_ref().is_default_graph()
  880|   330k|    }
_RNvMs18_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB6_9GraphName6as_refCsgNaHgHERLlN_4trig:
  883|  1.30M|    pub fn as_ref(&self) -> GraphNameRef<'_> {
  884|  1.30M|        match self {
  885|   152k|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.as_ref()),
  886|  34.9k|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.as_ref()),
  887|  1.12M|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  888|       |        }
  889|  1.30M|    }
_RNvMs1g_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB6_12GraphNameRef10into_ownedCsgNaHgHERLlN_4trig:
  971|  13.3k|    pub fn into_owned(self) -> GraphName {
  972|  13.3k|        match self {
  973|  6.56k|            Self::NamedNode(node) => GraphName::NamedNode(node.into_owned()),
  974|  1.95k|            Self::BlankNode(node) => GraphName::BlankNode(node.into_owned()),
  975|  4.86k|            Self::DefaultGraph => GraphName::DefaultGraph,
  976|       |        }
  977|  13.3k|    }
_RNvMs1g_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB6_12GraphNameRef16is_default_graphCsgNaHgHERLlN_4trig:
  966|   330k|    pub fn is_default_graph(&self) -> bool {
  967|   330k|        matches!(self, Self::DefaultGraph)
  968|   330k|    }
_RNvMs1q_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB6_4Quad6as_refCsgNaHgHERLlN_4trig:
 1100|   619k|    pub fn as_ref(&self) -> QuadRef<'_> {
 1101|   619k|        QuadRef {
 1102|   619k|            subject: self.subject.as_ref(),
 1103|   619k|            predicate: self.predicate.as_ref(),
 1104|   619k|            object: self.object.as_ref(),
 1105|   619k|            graph_name: self.graph_name.as_ref(),
 1106|   619k|        }
 1107|   619k|    }
_RNvMsc_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB5_7Subject6as_refCsgNaHgHERLlN_4trig:
  181|   942k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|   942k|        match self {
  183|   326k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|   407k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|   208k|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|   942k|    }
_RNvMsn_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB5_10SubjectRef10into_ownedCsgNaHgHERLlN_4trig:
  294|   281k|    pub fn into_owned(self) -> Subject {
  295|   281k|        match self {
  296|  51.7k|            Self::NamedNode(node) => Subject::NamedNode(node.into_owned()),
  297|   180k|            Self::BlankNode(node) => Subject::BlankNode(node.into_owned()),
  298|       |            #[cfg(feature = "rdf-star")]
  299|  49.5k|            Self::Triple(triple) => Subject::Triple(Box::new(triple.clone())),
  300|       |        }
  301|   281k|    }
_RNvMsy_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB5_4Term6as_refCsgNaHgHERLlN_4trig:
  417|   619k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|   619k|        match self {
  419|  75.8k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|   140k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|   391k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|  12.3k|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|   619k|    }
_RNvXs1w_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB6_7QuadRefINtNtCslA8OvuvDMgt_4core7convert4FromRNtB6_4QuadE4fromCsgNaHgHERLlN_4trig:
 1216|   619k|    fn from(quad: &'a Quad) -> Self {
 1217|   619k|        quad.as_ref()
 1218|   619k|    }
_RINvMs12_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB7_6Triple3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtB7_4TermECs2uQIyP4qcLL_5oxttl:
  729|   301k|    pub fn new(
  730|   301k|        subject: impl Into<Subject>,
  731|   301k|        predicate: impl Into<NamedNode>,
  732|   301k|        object: impl Into<Term>,
  733|   301k|    ) -> Self {
  734|   301k|        Self {
  735|   301k|            subject: subject.into(),
  736|   301k|            predicate: predicate.into(),
  737|   301k|            object: object.into(),
  738|   301k|        }
  739|   301k|    }
_RINvMs1q_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node12NamedNodeRefB11_NtB7_9GraphNameECs2uQIyP4qcLL_5oxttl:
 1085|  40.0k|    pub fn new(
 1086|  40.0k|        subject: impl Into<Subject>,
 1087|  40.0k|        predicate: impl Into<NamedNode>,
 1088|  40.0k|        object: impl Into<Term>,
 1089|  40.0k|        graph_name: impl Into<GraphName>,
 1090|  40.0k|    ) -> Self {
 1091|  40.0k|        Self {
 1092|  40.0k|            subject: subject.into(),
 1093|  40.0k|            predicate: predicate.into(),
 1094|  40.0k|            object: object.into(),
 1095|  40.0k|            graph_name: graph_name.into(),
 1096|  40.0k|        }
 1097|  40.0k|    }
_RINvMs1q_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node12NamedNodeRefNtNtB9_10blank_node9BlankNodeNtB7_9GraphNameECs2uQIyP4qcLL_5oxttl:
 1085|   114k|    pub fn new(
 1086|   114k|        subject: impl Into<Subject>,
 1087|   114k|        predicate: impl Into<NamedNode>,
 1088|   114k|        object: impl Into<Term>,
 1089|   114k|        graph_name: impl Into<GraphName>,
 1090|   114k|    ) -> Self {
 1091|   114k|        Self {
 1092|   114k|            subject: subject.into(),
 1093|   114k|            predicate: predicate.into(),
 1094|   114k|            object: object.into(),
 1095|   114k|            graph_name: graph_name.into(),
 1096|   114k|        }
 1097|   114k|    }
_RINvMs1q_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtB7_4TermNtB7_9GraphNameECs2uQIyP4qcLL_5oxttl:
 1085|  1.26M|    pub fn new(
 1086|  1.26M|        subject: impl Into<Subject>,
 1087|  1.26M|        predicate: impl Into<NamedNode>,
 1088|  1.26M|        object: impl Into<Term>,
 1089|  1.26M|        graph_name: impl Into<GraphName>,
 1090|  1.26M|    ) -> Self {
 1091|  1.26M|        Self {
 1092|  1.26M|            subject: subject.into(),
 1093|  1.26M|            predicate: predicate.into(),
 1094|  1.26M|            object: object.into(),
 1095|  1.26M|            graph_name: graph_name.into(),
 1096|  1.26M|        }
 1097|  1.26M|    }
_RNvMsc_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB5_7Subject6as_refCs2uQIyP4qcLL_5oxttl:
  181|   124k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|   124k|        match self {
  183|  54.0k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|    852|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|  70.0k|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|   124k|    }
_RNvMsy_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB5_4Term6as_refCs2uQIyP4qcLL_5oxttl:
  417|   124k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|   124k|        match self {
  419|  2.27k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|  1.98k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|   120k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|      0|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|   124k|    }
_RNvXs0_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB5_16NamedOrBlankNodeINtNtCslA8OvuvDMgt_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromCs2uQIyP4qcLL_5oxttl:
   43|   483k|    fn from(node: NamedNode) -> Self {
   44|   483k|        Self::NamedNode(node)
   45|   483k|    }
_RNvXs1a_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB6_9GraphNameINtNtCslA8OvuvDMgt_4core7convert4FromNtNtB8_10named_node9NamedNodeE4fromCs2uQIyP4qcLL_5oxttl:
  901|  40.8k|    fn from(node: NamedNode) -> Self {
  902|  40.8k|        Self::NamedNode(node)
  903|  40.8k|    }
_RNvXs1c_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB6_9GraphNameINtNtCslA8OvuvDMgt_4core7convert4FromNtNtB8_10blank_node9BlankNodeE4fromCs2uQIyP4qcLL_5oxttl:
  915|  9.71k|    fn from(node: BlankNode) -> Self {
  916|  9.71k|        Self::BlankNode(node)
  917|  9.71k|    }
_RNvXs1e_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB6_9GraphNameINtNtCslA8OvuvDMgt_4core7convert4FromNtB6_16NamedOrBlankNodeE4fromCs2uQIyP4qcLL_5oxttl:
  929|  50.5k|    fn from(node: NamedOrBlankNode) -> Self {
  930|  50.5k|        match node {
  931|  40.8k|            NamedOrBlankNode::NamedNode(node) => node.into(),
  932|  9.71k|            NamedOrBlankNode::BlankNode(node) => node.into(),
  933|       |        }
  934|  50.5k|    }
_RNvXs2_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB5_16NamedOrBlankNodeINtNtCslA8OvuvDMgt_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromCs2uQIyP4qcLL_5oxttl:
   57|   147k|    fn from(node: BlankNode) -> Self {
   58|   147k|        Self::BlankNode(node)
   59|   147k|    }
_RNvXsB_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB5_4TermINtNtCslA8OvuvDMgt_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCs2uQIyP4qcLL_5oxttl:
  444|  51.9k|    fn from(node: NamedNodeRef<'_>) -> Self {
  445|  51.9k|        node.into_owned().into()
  446|  51.9k|    }
_RNvXsL_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB5_4TermINtNtCslA8OvuvDMgt_4core7convert4FromNtB5_7SubjectE4fromCs2uQIyP4qcLL_5oxttl:
  520|    228|    fn from(node: Subject) -> Self {
  521|    228|        match node {
  522|      0|            Subject::NamedNode(node) => node.into(),
  523|    228|            Subject::BlankNode(node) => node.into(),
  524|       |            #[cfg(feature = "rdf-star")]
  525|      0|            Subject::Triple(triple) => Self::Triple(triple),
  526|       |        }
  527|    228|    }
_RNvXsP_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB5_7TermRefINtNtCslA8OvuvDMgt_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCs2uQIyP4qcLL_5oxttl:
  599|   548k|    fn from(node: NamedNodeRef<'a>) -> Self {
  600|   548k|        Self::NamedNode(node)
  601|   548k|    }
_RNvXsR_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB5_7TermRefINtNtCslA8OvuvDMgt_4core7convert4FromNtNtB7_10blank_node12BlankNodeRefE4fromCs2uQIyP4qcLL_5oxttl:
  613|   183k|    fn from(node: BlankNodeRef<'a>) -> Self {
  614|   183k|        Self::BlankNode(node)
  615|   183k|    }
_RNvXsV_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB5_7TermRefINtNtCslA8OvuvDMgt_4core7convert4FromRNtB5_6TripleE4fromCs2uQIyP4qcLL_5oxttl:
  642|   119k|    fn from(node: &'a Triple) -> Self {
  643|   119k|        Self::Triple(node)
  644|   119k|    }
_RNvXsY_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB5_7TermRefINtNtCslA8OvuvDMgt_4core7convert4FromNtB5_10SubjectRefE4fromCs2uQIyP4qcLL_5oxttl:
  666|   406k|    fn from(node: SubjectRef<'a>) -> Self {
  667|   406k|        match node {
  668|   105k|            SubjectRef::NamedNode(node) => node.into(),
  669|   181k|            SubjectRef::BlankNode(node) => node.into(),
  670|       |            #[cfg(feature = "rdf-star")]
  671|   119k|            SubjectRef::Triple(triple) => triple.into(),
  672|       |        }
  673|   406k|    }
_RNvXsf_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB5_7SubjectINtNtCslA8OvuvDMgt_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCs2uQIyP4qcLL_5oxttl:
  207|    699|    fn from(node: NamedNodeRef<'_>) -> Self {
  208|    699|        node.into_owned().into()
  209|    699|    }
_RNvXsl_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB5_7SubjectINtNtCslA8OvuvDMgt_4core7convert4FromNtB5_16NamedOrBlankNodeE4fromCs2uQIyP4qcLL_5oxttl:
  252|   490k|    fn from(node: NamedOrBlankNode) -> Self {
  253|   490k|        match node {
  254|   353k|            NamedOrBlankNode::NamedNode(node) => node.into(),
  255|   137k|            NamedOrBlankNode::BlankNode(node) => node.into(),
  256|       |        }
  257|   490k|    }
_RNvMsc_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB5_7Subject6as_refB7_:
  181|  2.46M|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  2.46M|        match self {
  183|  1.03M|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|  2.01k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|  1.43M|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  2.46M|    }
_RNvXse_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB5_7SubjectINtNtCslA8OvuvDMgt_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|   462k|    fn from(node: NamedNode) -> Self {
  201|   462k|        Self::NamedNode(node)
  202|   462k|    }
_RNvXsg_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB5_7SubjectINtNtCslA8OvuvDMgt_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|   780k|    fn from(node: BlankNode) -> Self {
  215|   780k|        Self::BlankNode(node)
  216|   780k|    }
_RNvXsi_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB5_7SubjectINtNtCslA8OvuvDMgt_4core7convert4FromNtB5_6TripleE4fromB7_:
  229|  1.49M|    fn from(node: Triple) -> Self {
  230|  1.49M|        Self::Triple(Box::new(node))
  231|  1.49M|    }
_RNvMsn_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB5_10SubjectRef10into_ownedB7_:
  294|  3.24M|    pub fn into_owned(self) -> Subject {
  295|  3.24M|        match self {
  296|  1.86M|            Self::NamedNode(node) => Subject::NamedNode(node.into_owned()),
  297|  1.67k|            Self::BlankNode(node) => Subject::BlankNode(node.into_owned()),
  298|       |            #[cfg(feature = "rdf-star")]
  299|  1.37M|            Self::Triple(triple) => Subject::Triple(Box::new(triple.clone())),
  300|       |        }
  301|  3.24M|    }
_RNvMsy_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB5_4Term6as_refB7_:
  417|  2.46M|    pub fn as_ref(&self) -> TermRef<'_> {
  418|  2.46M|        match self {
  419|  14.6k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|  2.72k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  2.45M|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|      0|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|  2.46M|    }
_RNvXsA_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB5_4TermINtNtCslA8OvuvDMgt_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|   187k|    fn from(node: NamedNode) -> Self {
  438|   187k|        Self::NamedNode(node)
  439|   187k|    }
_RNvXsC_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB5_4TermINtNtCslA8OvuvDMgt_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  451|   541k|    fn from(node: BlankNode) -> Self {
  452|   541k|        Self::BlankNode(node)
  453|   541k|    }
_RNvXsE_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB5_4TermINtNtCslA8OvuvDMgt_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  465|   810k|    fn from(literal: Literal) -> Self {
  466|   810k|        Self::Literal(literal)
  467|   810k|    }
_RNvXsG_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB5_4TermINtNtCslA8OvuvDMgt_4core7convert4FromNtB5_6TripleE4fromB7_:
  480|  20.8k|    fn from(triple: Triple) -> Self {
  481|  20.8k|        Self::Triple(Box::new(triple))
  482|  20.8k|    }
_RNvMsN_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB5_7TermRef10into_ownedB7_:
  571|  4.46M|    pub fn into_owned(self) -> Term {
  572|  4.46M|        match self {
  573|  21.1k|            Self::NamedNode(node) => Term::NamedNode(node.into_owned()),
  574|  2.26k|            Self::BlankNode(node) => Term::BlankNode(node.into_owned()),
  575|  4.43M|            Self::Literal(literal) => Term::Literal(literal.into_owned()),
  576|       |            #[cfg(feature = "rdf-star")]
  577|      0|            Self::Triple(triple) => Term::Triple(Box::new(triple.clone())),
  578|       |        }
  579|  4.46M|    }
_RNvMs12_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB6_6Triple6as_refB8_:
  753|  2.46M|    pub fn as_ref(&self) -> TripleRef<'_> {
  754|  2.46M|        TripleRef {
  755|  2.46M|            subject: self.subject.as_ref(),
  756|  2.46M|            predicate: self.predicate.as_ref(),
  757|  2.46M|            object: self.object.as_ref(),
  758|  2.46M|        }
  759|  2.46M|    }
_RNvMs14_NtCsgSruOWiD3Xy_5oxrdf6tripleNtB6_9TripleRef10into_ownedB8_:
  826|  2.36M|    pub fn into_owned(self) -> Triple {
  827|  2.36M|        Triple {
  828|  2.36M|            subject: self.subject.into_owned(),
  829|  2.36M|            predicate: self.predicate.into_owned(),
  830|  2.36M|            object: self.object.into_owned(),
  831|  2.36M|        }
  832|  2.36M|    }

_RNCNvMs_NtCs2uQIyP4qcLL_5oxttl5lexerNtB6_7N3Lexer9parse_iri0B8_:
  224|   143k|                .map_err(|e| (position, e.to_string()))?
_RNCNvMs_NtCs2uQIyP4qcLL_5oxttl5lexerNtB6_7N3Lexer26recognize_pname_or_keyword0B8_:
  319|   300k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  320|   300k|                prefix: pn_prefix,
  321|   300k|                local,
  322|   300k|                might_be_invalid_iri,
  323|   300k|            }),
_RNCNvMs_NtCs2uQIyP4qcLL_5oxttl5lexerNtB6_7N3Lexer18recognize_variable0B8_:
  336|  80.6k|            result.and_then(|(name, _)| {
  337|  80.6k|                if name.is_empty() {
  338|  67.1k|                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  339|       |                } else {
  340|  13.5k|                    Ok(N3Token::Variable(name))
  341|       |                }
  342|  80.6k|            }),
_RNCNvMs_NtCs2uQIyP4qcLL_5oxttl5lexerNtB6_7N3Lexer14parse_lang_tag0B8_:
  581|  8.85k|                .map_err(|e| (position.clone(), e.to_string()))?
_RNCNvMs_NtCs2uQIyP4qcLL_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_char0B8_:
  806|    563|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  807|    563|            (
  808|    563|                position..position + len + 2,
  809|    563|                format!(
  810|    563|                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  811|    563|                ),
  812|    563|            )
  813|    563|        })?;
_RNCNvMs_NtCs2uQIyP4qcLL_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_chars_0B8_:
  814|    397|        let c = char::from_u32(codepoint).ok_or_else(|| {
  815|    397|            (
  816|    397|                position..position + len +2,
  817|    397|                format!(
  818|    397|                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  819|    397|                ),
  820|    397|            )
  821|    397|        })?;
_RNCNvMs_NtCs2uQIyP4qcLL_5oxttl5lexerNtB6_7N3Lexer22recognize_unicode_char0B8_:
  886|  79.7k|                .map(|c| (c, bytes_needed + 1))
_RNCNvNtCs2uQIyP4qcLL_5oxttl5lexer13str_from_utf80B5_:
  958|  8.62k|    str::from_utf8(data).map_err(|e| {
  959|  8.62k|        (
  960|  8.62k|            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  961|  8.62k|            format!("Invalid UTF-8: {e}"),
  962|  8.62k|        )
  963|  8.62k|            .into()
  964|  8.62k|    })
_RNCNvNtCs2uQIyP4qcLL_5oxttl5lexer16string_from_utf80B5_:
  968|  85.7k|    String::from_utf8(data).map_err(|e| {
  969|  85.7k|        (
  970|  85.7k|            range.start + e.utf8_error().valid_up_to()
  971|  85.7k|                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  972|  85.7k|            format!("Invalid UTF-8: {e}"),
  973|  85.7k|        )
  974|  85.7k|            .into()
  975|  85.7k|    })
_RNvXNtCs2uQIyP4qcLL_5oxttl5lexerNtB2_7N3LexerNtNtNtB4_7toolkit5lexer15TokenRecognizer20recognize_next_token:
   55|  22.9M|    fn recognize_next_token<'a>(
   56|  22.9M|        &mut self,
   57|  22.9M|        data: &'a [u8],
   58|  22.9M|        is_ending: bool,
   59|  22.9M|        options: &N3LexerOptions,
   60|  22.9M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
   61|  22.9M|        match *data.first()? {
   62|  3.61M|            b'<' => match *data.get(1)? {
   63|   276k|                b'<' => Some((2, Ok(N3Token::Punctuation("<<")))),
   64|  40.1k|                b'=' if self.mode == N3LexerMode::N3 => {
   65|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   66|      0|                        Some(if let Ok(result) = result {
   67|      0|                            (consumed, Ok(result))
   68|       |                        } else {
   69|      0|                            (2, Ok(N3Token::Punctuation("<=")))
   70|       |                        })
   71|      0|                    } else if is_ending {
   72|      0|                        Some((2, Ok(N3Token::Punctuation("<="))))
   73|       |                    } else {
   74|      0|                        None
   75|       |                    }
   76|       |                }
   77|  11.8k|                b'-' if self.mode == N3LexerMode::N3 => {
   78|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   79|      0|                        Some(if let Ok(result) = result {
   80|      0|                            (consumed, Ok(result))
   81|       |                        } else {
   82|      0|                            (2, Ok(N3Token::Punctuation("<-")))
   83|       |                        })
   84|      0|                    } else if is_ending {
   85|      0|                        Some((2, Ok(N3Token::Punctuation("<-"))))
   86|       |                    } else {
   87|      0|                        None
   88|       |                    }
   89|       |                }
   90|  3.26M|                _ => self.recognize_iri(data, options),
   91|       |            },
   92|       |            b'>' => {
   93|   407k|                if *data.get(1)? == b'>' {
   94|   184k|                    Some((2, Ok(N3Token::Punctuation(">>"))))
   95|       |                } else {
   96|   198k|                    Some((1, Ok(N3Token::Punctuation(">"))))
   97|       |                }
   98|       |            }
   99|   670k|            b'_' => match data.get(1)? {
  100|   535k|                b':' => Self::recognize_blank_node_label(data),
  101|  13.4k|                c => Some((
  102|  13.4k|                    1,
  103|  13.4k|                    Err((0, format!("Unexpected character '{}'", char::from(*c))).into()),
  104|  13.4k|                )),
  105|       |            },
  106|       |            b'"' => {
  107|   110k|                if self.mode != N3LexerMode::NTriples
  108|   110k|                    && *data.get(1)? == b'"'
  109|  73.5k|                    && *data.get(2)? == b'"'
  110|       |                {
  111|  54.5k|                    Self::recognize_long_string(data, b'"')
  112|       |                } else {
  113|  44.4k|                    Self::recognize_string(data, b'"')
  114|       |                }
  115|       |            }
  116|   261k|            b'\'' if self.mode != N3LexerMode::NTriples => {
  117|   261k|                if *data.get(1)? == b'\'' && *data.get(2)? == b'\'' {
  118|  37.6k|                    Self::recognize_long_string(data, b'\'')
  119|       |                } else {
  120|   208k|                    Self::recognize_string(data, b'\'')
  121|       |                }
  122|       |            }
  123|   169k|            b'@' => self.recognize_lang_tag(data),
  124|  2.49M|            b'.' => match data.get(1) {
  125|   866k|                Some(b'0'..=b'9') => Self::recognize_number(data),
  126|  1.74M|                Some(_) => Some((1, Ok(N3Token::Punctuation(".")))),
  127|   647k|                None => is_ending.then_some((1, Ok(N3Token::Punctuation(".")))),
  128|       |            },
  129|       |            b'^' => {
  130|  47.2k|                if *data.get(1)? == b'^' {
  131|  8.93k|                    Some((2, Ok(N3Token::Punctuation("^^"))))
  132|       |                } else {
  133|  34.3k|                    Some((1, Ok(N3Token::Punctuation("^"))))
  134|       |                }
  135|       |            }
  136|  1.14M|            b'(' => Some((1, Ok(N3Token::Punctuation("(")))),
  137|   133k|            b')' => Some((1, Ok(N3Token::Punctuation(")")))),
  138|  77.8k|            b'[' => Some((1, Ok(N3Token::Punctuation("[")))),
  139|  21.2k|            b']' => Some((1, Ok(N3Token::Punctuation("]")))),
  140|       |            b'{' => {
  141|   701k|                if *data.get(1)? == b'|' {
  142|   223k|                    Some((2, Ok(N3Token::Punctuation("{|"))))
  143|       |                } else {
  144|   259k|                    Some((1, Ok(N3Token::Punctuation("{"))))
  145|       |                }
  146|       |            }
  147|  15.9k|            b'}' => Some((1, Ok(N3Token::Punctuation("}")))),
  148|   192k|            b',' => Some((1, Ok(N3Token::Punctuation(",")))),
  149|  69.4k|            b';' => Some((1, Ok(N3Token::Punctuation(";")))),
  150|  20.5k|            b'!' => Some((1, Ok(N3Token::Punctuation("!")))),
  151|       |            b'|' => {
  152|  18.2k|                if *data.get(1)? == b'}' {
  153|    620|                    Some((2, Ok(N3Token::Punctuation("|}"))))
  154|       |                } else {
  155|  15.2k|                    Some((1, Ok(N3Token::Punctuation("|"))))
  156|       |                }
  157|       |            }
  158|       |            b'=' => {
  159|  74.6k|                if *data.get(1)? == b'>' {
  160|  1.75k|                    Some((2, Ok(N3Token::Punctuation("=>"))))
  161|       |                } else {
  162|  69.9k|                    Some((1, Ok(N3Token::Punctuation("="))))
  163|       |                }
  164|       |            }
  165|  5.10M|            b'0'..=b'9' | b'+' | b'-' => Self::recognize_number(data),
  166|   150k|            b'?' => self.recognize_variable(data, is_ending),
  167|  8.06M|            _ => self.recognize_pname_or_keyword(data, is_ending),
  168|       |        }
  169|  22.9M|    }
_RNvMs_NtCs2uQIyP4qcLL_5oxttl5lexerNtB4_7N3Lexer3new:
  173|  68.2k|    pub fn new(mode: N3LexerMode, unchecked: bool) -> Self {
  174|  68.2k|        Self { mode, unchecked }
  175|  68.2k|    }
_RNvMs_NtCs2uQIyP4qcLL_5oxttl5lexerNtB4_7N3Lexer13recognize_iri:
  177|  3.26M|    fn recognize_iri(
  178|  3.26M|        &self,
  179|  3.26M|        data: &[u8],
  180|  3.26M|        options: &N3LexerOptions,
  181|  3.26M|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  182|  3.26M|        // [18] IRIREF  ::=  '<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
  183|  3.26M|        let mut string = Vec::new();
  184|  3.26M|        let mut i = 1;
  185|       |        loop {
  186|  3.26M|            let end = memchr2(b'>', b'\\', &data[i..])?;
  187|  2.34M|            string.extend_from_slice(&data[i..i + end]);
  188|  2.34M|            i += end;
  189|  2.34M|            match data[i] {
  190|       |                b'>' => {
  191|       |                    #[allow(clippy::range_plus_one)]
  192|  2.30M|                    return Some((i + 1, self.parse_iri(string, 0..i + 1, options)));
  193|       |                }
  194|       |                b'\\' => {
  195|  41.6k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, false)?;
  196|  22.6k|                    i += additional + 1;
  197|  22.6k|                    match c {
  198|  1.24k|                        Ok(c) => {
  199|  1.24k|                            let mut buf = [0; 4];
  200|  1.24k|                            string.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  201|  1.24k|                        }
  202|  21.3k|                        Err(e) => return Some((i, Err(e))),
  203|       |                    }
  204|       |                }
  205|      0|                _ => unreachable!(),
  206|       |            }
  207|       |        }
  208|  3.26M|    }
_RNvMs_NtCs2uQIyP4qcLL_5oxttl5lexerNtB4_7N3Lexer9parse_iri:
  210|  2.30M|    fn parse_iri(
  211|  2.30M|        &self,
  212|  2.30M|        iri: Vec<u8>,
  213|  2.30M|        position: Range<usize>,
  214|  2.30M|        options: &N3LexerOptions,
  215|  2.30M|    ) -> Result<N3Token<'static>, TokenRecognizerError> {
  216|  2.30M|        let iri = string_from_utf8(iri, position.clone())?;
  217|       |        Ok(N3Token::IriRef(
  218|  2.21M|            if let Some(base_iri) = options.base_iri.as_ref() {
  219|  1.65M|                if self.unchecked {
  220|   549k|                    base_iri.resolve_unchecked(&iri)
  221|       |                } else {
  222|  1.10M|                    base_iri.resolve(&iri)
  223|       |                }
  224|  1.65M|                .map_err(|e| (position, e.to_string()))?
  225|  1.51M|                .into_inner()
  226|   565k|            } else if self.unchecked {
  227|      0|                iri
  228|       |            } else {
  229|   565k|                Iri::parse(iri)
  230|   565k|                    .map_err(|e| (position, e.to_string()))?
  231|   565k|                    .into_inner()
  232|       |            },
  233|       |        ))
  234|  2.30M|    }
_RNvMs_NtCs2uQIyP4qcLL_5oxttl5lexerNtB4_7N3Lexer26recognize_pname_or_keyword:
  236|  8.06M|    fn recognize_pname_or_keyword<'a>(
  237|  8.06M|        &self,
  238|  8.06M|        data: &'a [u8],
  239|  8.06M|        is_ending: bool,
  240|  8.06M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  241|  8.06M|        // [139s]  PNAME_NS   ::=  PN_PREFIX? ':'
  242|  8.06M|        // [140s]  PNAME_LN   ::=  PNAME_NS PN_LOCAL
  243|  8.06M|        // [167s]  PN_PREFIX  ::=  PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
  244|  8.06M|        let mut i = 0;
  245|       |        loop {
  246|  15.7M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  247|  15.0M|                match r {
  248|  13.7M|                    Ok((c, consumed)) => {
  249|  13.7M|                        if c == ':' {
  250|   493k|                            i += consumed;
  251|   493k|                            break;
  252|  13.2M|                        } else if i == 0 {
  253|  6.32M|                            if !Self::is_possible_pn_chars_base(c) {
  254|  4.99M|                                return Some((
  255|  4.99M|                                    consumed,
  256|  4.99M|                                    Err((
  257|  4.99M|                                        0..consumed,
  258|  4.99M|                                        format!(
  259|  4.99M|                                            "'{c}' is not allowed at the beginning of a prefix name"
  260|  4.99M|                                        ),
  261|  4.99M|                                    )
  262|  4.99M|                                        .into()),
  263|  4.99M|                                ));
  264|  1.33M|                            }
  265|  1.33M|                            i += consumed;
  266|  6.96M|                        } else if Self::is_possible_pn_chars(c) || c == '.' {
  267|  6.38M|                            i += consumed;
  268|  6.38M|                        } else {
  269|   796k|                            while data[..i].ends_with(b".") {
  270|   220k|                                i -= 1;
  271|   220k|                            }
  272|   575k|                            return Some((
  273|   575k|                                i,
  274|   575k|                                str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  275|   575k|                            ));
  276|       |                        }
  277|       |                    }
  278|  1.27M|                    Err(e) => return Some((e.location.end, Err(e))),
  279|       |                }
  280|   726k|            } else if is_ending {
  281|  8.44k|                while data[..i].ends_with(b".") {
  282|  1.62k|                    i -= 1;
  283|  1.62k|                }
  284|  6.82k|                return Some(if i == 0 {
  285|  1.76k|                    (
  286|  1.76k|                        1,
  287|  1.76k|                        Err((0..1, format!("Unexpected byte {}", data[0])).into()),
  288|  1.76k|                    )
  289|       |                } else {
  290|  5.05k|                    (
  291|  5.05k|                        i,
  292|  5.05k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  293|  5.05k|                    )
  294|       |                });
  295|       |            } else {
  296|   719k|                return None;
  297|       |            }
  298|       |        }
  299|   493k|        let pn_prefix = match str_from_utf8(&data[..i - 1], 0..i - 1) {
  300|   493k|            Ok(pn_prefix) => pn_prefix,
  301|      0|            Err(e) => return Some((i, Err(e))),
  302|       |        };
  303|   493k|        if pn_prefix.ends_with('.') {
  304|    433|            return Some((
  305|    433|                i,
  306|    433|                Err((
  307|    433|                    0..i,
  308|    433|                    format!(
  309|    433|                        "'{pn_prefix}' is not a valid prefix: prefixes are not allowed to end with '.'"),
  310|    433|                )
  311|    433|                    .into()),
  312|    433|            ));
  313|   492k|        }
  314|       |
  315|   313k|        let (consumed, pn_local_result) =
  316|   492k|            self.recognize_optional_pn_local(&data[i..], is_ending)?;
  317|   313k|        Some((
  318|   313k|            consumed + i,
  319|   313k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  320|       |                prefix: pn_prefix,
  321|       |                local,
  322|       |                might_be_invalid_iri,
  323|   313k|            }),
  324|   313k|        ))
  325|  8.06M|    }
_RNvMs_NtCs2uQIyP4qcLL_5oxttl5lexerNtB4_7N3Lexer18recognize_variable:
  327|   150k|    fn recognize_variable<'a>(
  328|   150k|        &self,
  329|   150k|        data: &'a [u8],
  330|   150k|        is_ending: bool,
  331|   150k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  332|       |        // [36]  QUICK_VAR_NAME  ::=  "?" PN_LOCAL
  333|   150k|        let (consumed, result) = self.recognize_optional_pn_local(&data[1..], is_ending)?;
  334|  88.9k|        Some((
  335|  88.9k|            consumed + 1,
  336|  88.9k|            result.and_then(|(name, _)| {
  337|       |                if name.is_empty() {
  338|       |                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  339|       |                } else {
  340|       |                    Ok(N3Token::Variable(name))
  341|       |                }
  342|  88.9k|            }),
  343|  88.9k|        ))
  344|   150k|    }
_RNvMs_NtCs2uQIyP4qcLL_5oxttl5lexerNtB4_7N3Lexer27recognize_optional_pn_local:
  346|   643k|    fn recognize_optional_pn_local<'a>(
  347|   643k|        &self,
  348|   643k|        data: &'a [u8],
  349|   643k|        is_ending: bool,
  350|   643k|    ) -> Option<(usize, Result<(Cow<'a, str>, bool), TokenRecognizerError>)> {
  351|   643k|        // [168s]  PN_LOCAL  ::=  (PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
  352|   643k|        let mut i = 0;
  353|   643k|        let mut buffer = None; // Buffer if there are some escaped characters
  354|   643k|        let mut position_that_is_already_in_buffer = 0;
  355|   643k|        let mut might_be_invalid_iri = false;
  356|   643k|        let mut ends_with_unescaped_dot = 0;
  357|       |        loop {
  358|  3.81M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  359|  3.58M|                match r {
  360|  3.57M|                    Ok((c, consumed)) => {
  361|  3.57M|                        if c == '%' {
  362|  17.9k|                            i += 1;
  363|  17.9k|                            let a = char::from(*data.get(i)?);
  364|  10.6k|                            i += 1;
  365|  10.6k|                            let b = char::from(*data.get(i)?);
  366|  8.97k|                            if !a.is_ascii_hexdigit() || !b.is_ascii_hexdigit() {
  367|  2.20k|                                return Some((i + 1, Err((
  368|  2.20k|                                    i - 2..=i, format!("escapes in IRIs should be % followed by two hexadecimal characters, found '%{a}{b}'")
  369|  2.20k|                                ).into())));
  370|  6.77k|                            }
  371|  6.77k|                            i += 1;
  372|  6.77k|                            ends_with_unescaped_dot = 0;
  373|  3.55M|                        } else if c == '\\' {
  374|   187k|                            i += 1;
  375|   187k|                            let a = char::from(*data.get(i)?);
  376|   181k|                            if self.unchecked
  377|  50.7k|                                || matches!(
  378|   137k|                                    a,
  379|       |                                    '_' | '~'
  380|       |                                        | '.'
  381|       |                                        | '-'
  382|       |                                        | '!'
  383|       |                                        | '$'
  384|       |                                        | '&'
  385|       |                                        | '\''
  386|       |                                        | '('
  387|       |                                        | ')'
  388|       |                                        | '*'
  389|       |                                        | '+'
  390|       |                                        | ','
  391|       |                                        | ';'
  392|       |                                        | '='
  393|       |                                )
  394|   131k|                            {
  395|   131k|                                // ok to escape
  396|   131k|                            } else if matches!(a, '/' | '?' | '#' | '@' | '%') {
  397|  45.7k|                                // ok to escape but requires IRI validation
  398|  45.7k|                                might_be_invalid_iri = true;
  399|  45.7k|                            } else {
  400|  5.00k|                                return Some((i + 1, Err((
  401|  5.00k|                                    i..=i, format!("The character that are allowed to be escaped in IRIs are _~.-!$&'()*+,;=/?#@%, found '{a}'")
  402|  5.00k|                                ).into())));
  403|       |                            }
  404|   176k|                            let buffer = buffer.get_or_insert_with(String::new);
  405|   176k|                            // We add the missing bytes
  406|   176k|                            if i - position_that_is_already_in_buffer > 1 {
  407|  37.8k|                                buffer.push_str(
  408|  37.8k|                                    match str_from_utf8(
  409|  37.8k|                                        &data[position_that_is_already_in_buffer..i - 1],
  410|  37.8k|                                        position_that_is_already_in_buffer..i - 1,
  411|  37.8k|                                    ) {
  412|  37.8k|                                        Ok(data) => data,
  413|      0|                                        Err(e) => return Some((i, Err(e))),
  414|       |                                    },
  415|       |                                )
  416|   139k|                            }
  417|   176k|                            buffer.push(a);
  418|   176k|                            i += 1;
  419|   176k|                            position_that_is_already_in_buffer = i;
  420|   176k|                            ends_with_unescaped_dot = 0;
  421|  3.36M|                        } else if i == 0 {
  422|   484k|                            if !(Self::is_possible_pn_chars_u(c) || c == ':' || c.is_ascii_digit())
  423|       |                            {
  424|   125k|                                return Some((0, Ok((Cow::Borrowed(""), false))));
  425|   358k|                            }
  426|   358k|                            if !self.unchecked {
  427|       |                                might_be_invalid_iri |=
  428|   220k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  429|   220k|                                        || c == ':';
  430|   137k|                            }
  431|   358k|                            i += consumed;
  432|  2.88M|                        } else if Self::is_possible_pn_chars(c) || c == ':' {
  433|  2.25M|                            if !self.unchecked {
  434|       |                                might_be_invalid_iri |=
  435|  1.34M|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  436|  1.34M|                                        || c == ':';
  437|   905k|                            }
  438|  2.25M|                            i += consumed;
  439|  2.25M|                            ends_with_unescaped_dot = 0;
  440|   634k|                        } else if c == '.' {
  441|   381k|                            i += consumed;
  442|   381k|                            ends_with_unescaped_dot += 1;
  443|   381k|                        } else {
  444|   253k|                            let buffer = if let Some(mut buffer) = buffer {
  445|  35.1k|                                buffer.push_str(
  446|  35.1k|                                    match str_from_utf8(
  447|  35.1k|                                        &data[position_that_is_already_in_buffer..i],
  448|  35.1k|                                        position_that_is_already_in_buffer..i,
  449|  35.1k|                                    ) {
  450|  35.1k|                                        Ok(data) => data,
  451|      0|                                        Err(e) => return Some((i, Err(e))),
  452|       |                                    },
  453|       |                                );
  454|       |                                // We do not include the last dots
  455|  35.1k|                                for _ in 0..ends_with_unescaped_dot {
  456|  4.27k|                                    buffer.pop();
  457|  4.27k|                                }
  458|  35.1k|                                i -= ends_with_unescaped_dot;
  459|  35.1k|                                Cow::Owned(buffer)
  460|       |                            } else {
  461|   218k|                                let mut data = match str_from_utf8(&data[..i], 0..i) {
  462|   218k|                                    Ok(data) => data,
  463|      0|                                    Err(e) => return Some((i, Err(e))),
  464|       |                                };
  465|       |                                // We do not include the last dots
  466|   218k|                                data = &data[..data.len() - ends_with_unescaped_dot];
  467|   218k|                                i -= ends_with_unescaped_dot;
  468|   218k|                                Cow::Borrowed(data)
  469|       |                            };
  470|   253k|                            return Some((i, Ok((buffer, might_be_invalid_iri))));
  471|       |                        }
  472|       |                    }
  473|  13.7k|                    Err(e) => return Some((e.location.end, Err(e))),
  474|       |                }
  475|   229k|            } else if is_ending {
  476|  1.96k|                let buffer = if let Some(mut buffer) = buffer {
  477|       |                    // We do not include the last dot
  478|    877|                    while buffer.ends_with('.') {
  479|    468|                        buffer.pop();
  480|    468|                        i -= 1;
  481|    468|                    }
  482|    409|                    Cow::Owned(buffer)
  483|       |                } else {
  484|  1.56k|                    let mut data = match str_from_utf8(&data[..i], 0..i) {
  485|  1.56k|                        Ok(data) => data,
  486|      0|                        Err(e) => return Some((i, Err(e))),
  487|       |                    };
  488|       |                    // We do not include the last dot
  489|  2.09k|                    while let Some(d) = data.strip_suffix('.') {
  490|    536|                        data = d;
  491|    536|                        i -= 1;
  492|    536|                    }
  493|  1.56k|                    Cow::Borrowed(data)
  494|       |                };
  495|  1.96k|                return Some((i, Ok((buffer, might_be_invalid_iri))));
  496|       |            } else {
  497|   227k|                return None;
  498|       |            }
  499|       |        }
  500|   643k|    }
_RNvMs_NtCs2uQIyP4qcLL_5oxttl5lexerNtB4_7N3Lexer26recognize_blank_node_label:
  502|   535k|    fn recognize_blank_node_label(
  503|   535k|        data: &[u8],
  504|   535k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  505|   535k|        // [141s]  BLANK_NODE_LABEL  ::=  '_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
  506|   535k|        let mut i = 2;
  507|       |        loop {
  508|  11.3M|            match Self::recognize_unicode_char(&data[i..], i)? {
  509|  11.1M|                Ok((c, consumed)) => {
  510|  11.1M|                    if (i == 2 && (Self::is_possible_pn_chars_u(c) || c.is_ascii_digit()))
  511|  10.7M|                        || (i > 2 && Self::is_possible_pn_chars(c))
  512|  10.7M|                    {
  513|  10.7M|                        // Ok
  514|  10.7M|                    } else if i > 2 && c == '.' {
  515|  21.6k|                        if data[i - 1] == b'.' {
  516|    540|                            i -= 1;
  517|    540|                            return Some((
  518|    540|                                i,
  519|    540|                                str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  520|    540|                            ));
  521|  21.1k|                        }
  522|   378k|                    } else if i == 0 {
  523|      0|                        return Some((
  524|      0|                            i,
  525|      0|                            Err((0..i, "A blank node ID should not be empty").into()),
  526|      0|                        ));
  527|   378k|                    } else if data[i - 1] == b'.' {
  528|  5.19k|                        i -= 1;
  529|  5.19k|                        return Some((
  530|  5.19k|                            i,
  531|  5.19k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  532|  5.19k|                        ));
  533|       |                    } else {
  534|   373k|                        return Some((
  535|   373k|                            i,
  536|   373k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  537|   373k|                        ));
  538|       |                    }
  539|  10.8M|                    i += consumed;
  540|       |                }
  541|  1.89k|                Err(e) => return Some((e.location.end, Err(e))),
  542|       |            }
  543|       |        }
  544|   535k|    }
_RNvMs_NtCs2uQIyP4qcLL_5oxttl5lexerNtB4_7N3Lexer18recognize_lang_tag:
  546|   169k|    fn recognize_lang_tag<'a>(
  547|   169k|        &self,
  548|   169k|        data: &'a [u8],
  549|   169k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  550|   169k|        // [144s]  LANGTAG  ::=  '@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
  551|   169k|        let mut is_last_block_empty = true;
  552|   895k|        for (i, c) in data[1..].iter().enumerate() {
  553|   895k|            if c.is_ascii_alphabetic() {
  554|   711k|                is_last_block_empty = false;
  555|   711k|            } else if i == 0 {
  556|  39.5k|                return Some((
  557|  39.5k|                    1,
  558|  39.5k|                    Err((1..2, "A language code should always start with a letter").into()),
  559|  39.5k|                ));
  560|   144k|            } else if is_last_block_empty {
  561|  2.28k|                return Some((i, self.parse_lang_tag(&data[1..i], 1..i - 1)));
  562|   142k|            } else if *c == b'-' {
  563|  86.0k|                is_last_block_empty = true;
  564|  86.0k|            } else {
  565|  56.2k|                return Some((i + 1, self.parse_lang_tag(&data[1..=i], 1..i)));
  566|       |            }
  567|       |        }
  568|  71.8k|        None
  569|   169k|    }
_RNvMs_NtCs2uQIyP4qcLL_5oxttl5lexerNtB4_7N3Lexer14parse_lang_tag:
  571|  58.5k|    fn parse_lang_tag<'a>(
  572|  58.5k|        &self,
  573|  58.5k|        lang_tag: &'a [u8],
  574|  58.5k|        position: Range<usize>,
  575|  58.5k|    ) -> Result<N3Token<'a>, TokenRecognizerError> {
  576|  58.5k|        let lang_tag = str_from_utf8(lang_tag, position.clone())?;
  577|  58.5k|        Ok(N3Token::LangTag(if self.unchecked {
  578|  18.2k|            lang_tag
  579|       |        } else {
  580|  40.2k|            LanguageTag::parse(lang_tag)
  581|  40.2k|                .map_err(|e| (position.clone(), e.to_string()))?
  582|  31.4k|                .into_inner()
  583|       |        }))
  584|  58.5k|    }
_RNvMs_NtCs2uQIyP4qcLL_5oxttl5lexerNtB4_7N3Lexer16recognize_string:
  586|   252k|    fn recognize_string(
  587|   252k|        data: &[u8],
  588|   252k|        delimiter: u8,
  589|   252k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  590|   252k|        // [22]  STRING_LITERAL_QUOTE         ::=  '"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
  591|   252k|        // [23]  STRING_LITERAL_SINGLE_QUOTE  ::=  "'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
  592|   252k|        let mut string = String::new();
  593|   252k|        let mut i = 1;
  594|       |        loop {
  595|   352k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  596|   205k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  597|   201k|                Ok(s) => string.push_str(s),
  598|  4.64k|                Err(e) => return Some((end, Err(e))),
  599|       |            };
  600|   201k|            i += end;
  601|   201k|            match data[i] {
  602|   201k|                c if c == delimiter => {
  603|  47.7k|                    return Some((i + 1, Ok(N3Token::String(string))));
  604|       |                }
  605|       |                b'\\' => {
  606|   153k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  607|   140k|                    i += additional + 1;
  608|   140k|                    match c {
  609|  99.9k|                        Ok(c) => {
  610|  99.9k|                            string.push(c);
  611|  99.9k|                        }
  612|  40.7k|                        Err(e) => {
  613|       |                            // We read until the end of string char
  614|  40.7k|                            let end = memchr(delimiter, &data[i..])?;
  615|  13.1k|                            return Some((i + end + 1, Err(e)));
  616|       |                        }
  617|       |                    }
  618|       |                }
  619|      0|                _ => unreachable!(),
  620|       |            }
  621|       |        }
  622|   252k|    }
_RNvMs_NtCs2uQIyP4qcLL_5oxttl5lexerNtB4_7N3Lexer21recognize_long_string:
  624|  92.1k|    fn recognize_long_string(
  625|  92.1k|        data: &[u8],
  626|  92.1k|        delimiter: u8,
  627|  92.1k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  628|  92.1k|        // [24]  STRING_LITERAL_LONG_SINGLE_QUOTE  ::=  "'''" (("'" | "''")? ([^'\] | ECHAR | UCHAR))* "'''"
  629|  92.1k|        // [25]  STRING_LITERAL_LONG_QUOTE         ::=  '"""' (('"' | '""')? ([^"\] | ECHAR | UCHAR))* '"""'
  630|  92.1k|        let mut string = String::new();
  631|  92.1k|        let mut i = 3;
  632|       |        loop {
  633|   164k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  634|   105k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  635|   102k|                Ok(s) => string.push_str(s),
  636|  3.52k|                Err(e) => return Some((end, Err(e))),
  637|       |            };
  638|   102k|            i += end;
  639|   102k|            match data[i] {
  640|   102k|                c if c == delimiter => {
  641|  98.0k|                    if *data.get(i + 1)? == delimiter && *data.get(i + 2)? == delimiter {
  642|  26.1k|                        return Some((i + 3, Ok(N3Token::String(string))));
  643|  68.7k|                    }
  644|  68.7k|                    i += 1;
  645|  68.7k|                    string.push(char::from(delimiter));
  646|       |                }
  647|       |                b'\\' => {
  648|  4.05k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  649|  3.57k|                    i += additional + 1;
  650|  3.57k|                    match c {
  651|  3.17k|                        Ok(c) => {
  652|  3.17k|                            string.push(c);
  653|  3.17k|                        }
  654|    395|                        Err(e) => return Some((i, Err(e))),
  655|       |                    }
  656|       |                }
  657|      0|                _ => unreachable!(),
  658|       |            }
  659|       |        }
  660|  92.1k|    }
_RNvMs_NtCs2uQIyP4qcLL_5oxttl5lexerNtB4_7N3Lexer16recognize_number:
  662|  2.13M|    fn recognize_number(data: &[u8]) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  663|  2.13M|        // [19]  INTEGER    ::=  [+-]? [0-9]+
  664|  2.13M|        // [20]  DECIMAL    ::=  [+-]? [0-9]* '.' [0-9]+
  665|  2.13M|        // [21]  DOUBLE     ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  666|  2.13M|        // [154s] EXPONENT  ::=  [eE] [+-]? [0-9]+
  667|  2.13M|        let mut i = 0;
  668|  2.13M|        let c = *data.first()?;
  669|  2.13M|        if matches!(c, b'+' | b'-') {
  670|   145k|            i += 1;
  671|  1.99M|        }
  672|       |        // We read the digits before .
  673|  2.13M|        let mut count_before: usize = 0;
  674|       |        loop {
  675|  7.03M|            let c = *data.get(i)?;
  676|  6.86M|            if c.is_ascii_digit() {
  677|  4.89M|                i += 1;
  678|  4.89M|                count_before += 1;
  679|  4.89M|            } else {
  680|  1.96M|                break;
  681|       |            }
  682|       |        }
  683|       |
  684|       |        // We read the digits after .
  685|       |        #[allow(clippy::if_then_some_else_none)]
  686|  1.96M|        let count_after = if *data.get(i)? == b'.' {
  687|   440k|            i += 1;
  688|   440k|
  689|   440k|            let mut count_after = 0;
  690|       |            loop {
  691|   822k|                let c = *data.get(i)?;
  692|   774k|                if c.is_ascii_digit() {
  693|   382k|                    i += 1;
  694|   382k|                    count_after += 1;
  695|   382k|                } else {
  696|   392k|                    break;
  697|   392k|                }
  698|   392k|            }
  699|   392k|            Some(count_after)
  700|       |        } else {
  701|  1.52M|            None
  702|       |        };
  703|       |
  704|       |        // End
  705|  1.91M|        let c = *data.get(i)?;
  706|  1.91M|        if matches!(c, b'e' | b'E') {
  707|   591k|            i += 1;
  708|       |
  709|   591k|            let c = *data.get(i)?;
  710|   590k|            if matches!(c, b'+' | b'-') {
  711|  3.67k|                i += 1;
  712|   587k|            }
  713|       |
  714|   590k|            let mut found = false;
  715|       |            loop {
  716|  2.94M|                let c = *data.get(i)?;
  717|  2.91M|                if c.is_ascii_digit() {
  718|  2.35M|                    i += 1;
  719|  2.35M|                    found = true;
  720|  2.35M|                } else {
  721|   564k|                    break;
  722|   564k|                }
  723|   564k|            }
  724|   564k|            Some((
  725|   564k|                i,
  726|   564k|                if !found {
  727|  6.45k|                    Err((0..i, "A double exponent cannot be empty").into())
  728|   558k|                } else if count_before == 0 && count_after.unwrap_or(0) == 0 {
  729|    140|                    Err((0..i, "A double should not be empty").into())
  730|       |                } else {
  731|   558k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Double)
  732|       |                },
  733|       |            ))
  734|  1.32M|        } else if let Some(count_after) = count_after {
  735|   387k|            if count_after == 0 {
  736|       |                // We do not consume the '.' after all
  737|   291k|                i -= 1;
  738|   291k|                Some((
  739|   291k|                    i,
  740|   291k|                    if count_before == 0 {
  741|  19.4k|                        Err((0..i, "An integer should not be empty").into())
  742|       |                    } else {
  743|   272k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  744|       |                    },
  745|       |                ))
  746|       |            } else {
  747|  95.3k|                Some((i, str_from_utf8(&data[..i], 0..i).map(N3Token::Decimal)))
  748|       |            }
  749|       |        } else {
  750|       |            Some((
  751|   935k|                i,
  752|   935k|                if count_before == 0 {
  753|  62.1k|                    Err((0..i, "An integer should not be empty").into())
  754|       |                } else {
  755|   873k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  756|       |                },
  757|       |            ))
  758|       |        }
  759|  2.13M|    }
_RNvMs_NtCs2uQIyP4qcLL_5oxttl5lexerNtB4_7N3Lexer16recognize_escape:
  761|   199k|    fn recognize_escape(
  762|   199k|        data: &[u8],
  763|   199k|        position: usize,
  764|   199k|        with_echar: bool,
  765|   199k|    ) -> Option<(usize, Result<char, TokenRecognizerError>)> {
  766|   199k|        // [26]   UCHAR  ::=  '\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
  767|   199k|        // [159s] ECHAR  ::=  '\' [tbnrf"'\]
  768|   199k|        match *data.get(1)? {
  769|  68.8k|            b'u' => match Self::recognize_hex_char(&data[2..], 4, 'u', position) {
  770|  68.5k|                Ok(c) => Some((5, Ok(c?))),
  771|    318|                Err(e) => Some((5, Err(e))),
  772|       |            },
  773|  2.73k|            b'U' => match Self::recognize_hex_char(&data[2..], 8, 'u', position) {
  774|  1.63k|                Ok(c) => Some((9, Ok(c?))),
  775|  1.09k|                Err(e) => Some((9, Err(e))),
  776|       |            },
  777|    745|            b't' if with_echar => Some((1, Ok('\t'))),
  778|    609|            b'b' if with_echar => Some((1, Ok('\x08'))),
  779|  1.17k|            b'n' if with_echar => Some((1, Ok('\n'))),
  780|  1.14k|            b'r' if with_echar => Some((1, Ok('\r'))),
  781|    507|            b'f' if with_echar => Some((1, Ok('\x0C'))),
  782|  2.30k|            b'"' if with_echar => Some((1, Ok('"'))),
  783|  1.65k|            b'\'' if with_echar => Some((1, Ok('\''))),
  784|  28.2k|            b'\\' if with_echar => Some((1, Ok('\\'))),
  785|  61.1k|            c => Some((
  786|  61.1k|                1,
  787|  61.1k|                Err((
  788|  61.1k|                    position..position + 2,
  789|  61.1k|                    format!("Unexpected escape character '\\{}'", char::from(c)),
  790|  61.1k|                )
  791|  61.1k|                    .into()),
  792|  61.1k|            )), // TODO: read until end of string
  793|       |        }
  794|   199k|    }
_RNvMs_NtCs2uQIyP4qcLL_5oxttl5lexerNtB4_7N3Lexer18recognize_hex_char:
  796|  71.5k|    fn recognize_hex_char(
  797|  71.5k|        data: &[u8],
  798|  71.5k|        len: usize,
  799|  71.5k|        escape_char: char,
  800|  71.5k|        position: usize,
  801|  71.5k|    ) -> Result<Option<char>, TokenRecognizerError> {
  802|  71.5k|        if data.len() < len {
  803|  2.19k|            return Ok(None);
  804|  69.3k|        }
  805|  69.3k|        let val = str_from_utf8(&data[..len], position..position + len + 2)?;
  806|  68.9k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  807|       |            (
  808|       |                position..position + len + 2,
  809|       |                format!(
  810|       |                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  811|       |                ),
  812|       |            )
  813|  68.9k|        })?;
  814|  68.3k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  815|       |            (
  816|       |                position..position + len +2,
  817|       |                format!(
  818|       |                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  819|       |                ),
  820|       |            )
  821|  68.3k|        })?;
  822|  67.9k|        Ok(Some(c))
  823|  71.5k|    }
_RNvMs_NtCs2uQIyP4qcLL_5oxttl5lexerNtB4_7N3Lexer22recognize_unicode_char:
  825|  30.9M|    fn recognize_unicode_char(
  826|  30.9M|        data: &[u8],
  827|  30.9M|        position: usize,
  828|  30.9M|    ) -> Option<Result<(char, usize), TokenRecognizerError>> {
  829|  30.9M|        let mut code_point: u32;
  830|  30.9M|        let bytes_needed: usize;
  831|  30.9M|        let mut lower_boundary = 0x80;
  832|  30.9M|        let mut upper_boundary = 0xBF;
  833|       |
  834|  30.9M|        let byte = *data.first()?;
  835|  30.0M|        match byte {
  836|  30.0M|            0x00..=0x7F => return Some(Ok((char::from(byte), 1))),
  837|  1.10M|            0xC2..=0xDF => {
  838|   563k|                bytes_needed = 1;
  839|   563k|                code_point = u32::from(byte) & 0x1F;
  840|   563k|            }
  841|   538k|            0xE0..=0xEF => {
  842|   100k|                if byte == 0xE0 {
  843|  9.57k|                    lower_boundary = 0xA0;
  844|  91.0k|                }
  845|   100k|                if byte == 0xED {
  846|  6.09k|                    upper_boundary = 0x9F;
  847|  94.5k|                }
  848|   100k|                bytes_needed = 2;
  849|   100k|                code_point = u32::from(byte) & 0xF;
  850|       |            }
  851|   437k|            0xF0..=0xF4 => {
  852|  51.0k|                if byte == 0xF0 {
  853|  10.7k|                    lower_boundary = 0x90;
  854|  40.3k|                }
  855|  51.0k|                if byte == 0xF4 {
  856|  6.69k|                    upper_boundary = 0x8F;
  857|  44.3k|                }
  858|  51.0k|                bytes_needed = 3;
  859|  51.0k|                code_point = u32::from(byte) & 0x7;
  860|       |            }
  861|       |            _ => {
  862|   899k|                return Some(Err((
  863|   899k|                    position..=position,
  864|   899k|                    "Invalid UTF-8 character encoding",
  865|   899k|                )
  866|   899k|                    .into()))
  867|       |            }
  868|       |        }
  869|       |
  870|   736k|        for i in 1..=bytes_needed {
  871|   736k|            let byte = *data.get(i)?;
  872|   495k|            if byte < lower_boundary || upper_boundary < byte {
  873|   394k|                return Some(Err((
  874|   394k|                    position..=position + i,
  875|   394k|                    "Invalid UTF-8 character encoding",
  876|   394k|                )
  877|   394k|                    .into()));
  878|   100k|            }
  879|   100k|            lower_boundary = 0x80;
  880|   100k|            upper_boundary = 0xBF;
  881|   100k|            code_point = (code_point << 6) | (u32::from(byte) & 0x3F);
  882|       |        }
  883|       |
  884|  79.7k|        Some(
  885|  79.7k|            char::from_u32(code_point)
  886|  79.7k|                .map(|c| (c, bytes_needed + 1))
  887|  79.7k|                .ok_or_else(|| {
  888|       |                    (
  889|       |                        position..=position + bytes_needed,
  890|       |                        format!("The codepoint {code_point:X} is not a valid unicode character"),
  891|       |                    )
  892|       |                        .into()
  893|  79.7k|                }),
  894|  79.7k|        )
  895|  30.9M|    }
_RNvMs_NtCs2uQIyP4qcLL_5oxttl5lexerNtB4_7N3Lexer25is_possible_pn_chars_base:
  898|  28.0M|    fn is_possible_pn_chars_base(c: char) -> bool {
  899|  28.0M|        matches!(c,
  900|  12.1M|        'A'..='Z'
  901|  7.78M|        | 'a'..='z'
  902|  78.2k|        | '\u{00C0}'..='\u{00D6}'
  903|  78.2k|        | '\u{00D8}'..='\u{00F6}'
  904|  78.2k|        | '\u{00F8}'..='\u{02FF}'
  905|  72.7k|        | '\u{0370}'..='\u{037D}'
  906|  72.6k|        | '\u{037F}'..='\u{1FFF}'
  907|  7.75k|        | '\u{200C}'..='\u{200D}'
  908|  7.75k|        | '\u{2070}'..='\u{218F}'
  909|  7.74k|        | '\u{2C00}'..='\u{2FEF}'
  910|  7.74k|        | '\u{3001}'..='\u{D7FF}'
  911|  1.57k|        | '\u{F900}'..='\u{FDCF}'
  912|    760|        | '\u{FDF0}'..='\u{FFFD}'
  913|    760|        | '\u{10000}'..='\u{EFFFF}')
  914|  28.0M|    }
_RNvMs_NtCs2uQIyP4qcLL_5oxttl5lexerNtB4_7N3Lexer22is_possible_pn_chars_u:
  917|  21.7M|    pub(super) fn is_possible_pn_chars_u(c: char) -> bool {
  918|  21.7M|        Self::is_possible_pn_chars_base(c) || c == '_'
  919|  21.7M|    }
_RNvMs_NtCs2uQIyP4qcLL_5oxttl5lexerNtB4_7N3Lexer20is_possible_pn_chars:
  922|  20.7M|    pub(crate) fn is_possible_pn_chars(c: char) -> bool {
  923|  20.7M|        Self::is_possible_pn_chars_u(c)
  924|  10.8M|            || matches!(c,
  925|  8.19M|        '-' | '0'..='9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
  926|  20.7M|    }
_RNvMs_NtCs2uQIyP4qcLL_5oxttl5lexerNtB4_7N3Lexer43is_possible_pn_chars_base_but_not_valid_iri:
  928|  1.56M|    fn is_possible_pn_chars_base_but_not_valid_iri(c: char) -> bool {
  929|  1.56M|        matches!(c, '\u{FFF0}'..='\u{FFFD}')
  930|  1.56M|            || u32::from(c) % u32::from('\u{FFFE}') == 0
  931|  1.56M|            || u32::from(c) % u32::from('\u{FFFF}') == 0
  932|  1.56M|    }
_RNvNtCs2uQIyP4qcLL_5oxttl5lexer18resolve_local_name:
  935|   103k|pub fn resolve_local_name(
  936|   103k|    prefix: &str,
  937|   103k|    local: &str,
  938|   103k|    might_be_invalid_iri: bool,
  939|   103k|    prefixes: &HashMap<String, Iri<String>>,
  940|   103k|) -> Result<NamedNode, String> {
  941|   103k|    if let Some(start) = prefixes.get(prefix) {
  942|  41.1k|        let iri = format!("{start}{local}");
  943|  41.1k|        if might_be_invalid_iri || start.path().is_empty() {
  944|       |            // We validate again. We always validate if the local part might be the IRI authority.
  945|  26.0k|            if let Err(e) = Iri::parse(iri.as_str()) {
  946|    544|                return Err(format!(
  947|    544|                    "The prefixed name {prefix}:{local} builds IRI {iri} that is invalid: {e}"
  948|    544|                ));
  949|  25.5k|            }
  950|  15.0k|        }
  951|  40.5k|        Ok(NamedNode::new_unchecked(iri))
  952|       |    } else {
  953|  62.1k|        Err(format!("The prefix {prefix}: has not been declared"))
  954|       |    }
  955|   103k|}
_RNvNtCs2uQIyP4qcLL_5oxttl5lexer13str_from_utf8:
  957|  3.98M|fn str_from_utf8(data: &[u8], range: Range<usize>) -> Result<&str, TokenRecognizerError> {
  958|  3.98M|    str::from_utf8(data).map_err(|e| {
  959|       |        (
  960|       |            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  961|       |            format!("Invalid UTF-8: {e}"),
  962|       |        )
  963|       |            .into()
  964|  3.98M|    })
  965|  3.98M|}
_RNvNtCs2uQIyP4qcLL_5oxttl5lexer16string_from_utf8:
  967|  2.30M|fn string_from_utf8(data: Vec<u8>, range: Range<usize>) -> Result<String, TokenRecognizerError> {
  968|  2.30M|    String::from_utf8(data).map_err(|e| {
  969|       |        (
  970|       |            range.start + e.utf8_error().valid_up_to()
  971|       |                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  972|       |            format!("Invalid UTF-8: {e}"),
  973|       |        )
  974|       |            .into()
  975|  2.30M|    })
  976|  2.30M|}

_RNvMNtCs2uQIyP4qcLL_5oxttl5terseNtB2_21TriGRecognizerContext8prefixes:
   32|  51.1k|    pub fn prefixes(&self) -> Iter<'_, String, Iri<String>> {
   33|  51.1k|        self.prefixes.iter()
   34|  51.1k|    }
_RNvXs_NtCs2uQIyP4qcLL_5oxttl5terseNtB4_14TriGRecognizerNtNtNtB6_7toolkit6parser14RuleRecognizer20error_recovery_state:
   42|  6.80M|    fn error_recovery_state(mut self) -> Self {
   43|  6.80M|        self.stack.clear();
   44|  6.80M|        self.cur_subject.clear();
   45|  6.80M|        self.cur_predicate.clear();
   46|  6.80M|        self.cur_object.clear();
   47|  6.80M|        self.cur_graph = GraphName::DefaultGraph;
   48|  6.80M|        self
   49|  6.80M|    }
_RNvXs_NtCs2uQIyP4qcLL_5oxttl5terseNtB4_14TriGRecognizerNtNtNtB6_7toolkit6parser14RuleRecognizer14recognize_next:
   51|  15.2M|    fn recognize_next(
   52|  15.2M|        mut self,
   53|  15.2M|        token: N3Token<'_>,
   54|  15.2M|        context: &mut TriGRecognizerContext,
   55|  15.2M|        results: &mut Vec<Quad>,
   56|  15.2M|        errors: &mut Vec<RuleRecognizerError>,
   57|  15.2M|    ) -> Self {
   58|  15.2M|        if let Some(rule) = self.stack.pop() {
   59|  10.4M|            match rule {
   60|       |                // [1g] trigDoc      ::=  (directive | block)*
   61|       |                // [2g] block        ::=  triplesOrGraph | wrappedGraph | triples2 | "GRAPH" labelOrSubject wrappedGraph
   62|       |                // [3]  directive    ::=  prefixID | base | sparqlPrefix | sparqlBase
   63|       |                // [4]  prefixID     ::=  '@prefix' PNAME_NS IRIREF '.'
   64|       |                // [5]  base         ::=  '@base' IRIREF '.'
   65|       |                // [5s] sparqlPrefix ::=  "PREFIX" PNAME_NS IRIREF
   66|       |                // [6s] sparqlBase   ::=  "BASE" IRIREF
   67|       |                TriGState::TriGDoc => {
   68|  1.42M|                    self.cur_graph = GraphName::DefaultGraph;
   69|  1.42M|                    self.stack.push(TriGState::TriGDoc);
   70|  58.9k|                    match token {
   71|  62.4k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("base") => {
   72|  19.2k|                            self.stack.push(TriGState::BaseExpectIri);
   73|  19.2k|                            self
   74|       |                        }
   75|  43.2k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("prefix") => {
   76|    250|                            self.stack.push(TriGState::PrefixExpectPrefix);
   77|    250|                            self
   78|       |                        }
   79|  15.5k|                        N3Token::LangTag("prefix") => {
   80|  13.2k|                            self.stack.push(TriGState::ExpectDot);
   81|  13.2k|                            self.stack.push(TriGState::PrefixExpectPrefix);
   82|  13.2k|                            self
   83|       |                        }
   84|  2.28k|                        N3Token::LangTag("base") => {
   85|    298|                            self.stack.push(TriGState::ExpectDot);
   86|    298|                            self.stack.push(TriGState::BaseExpectIri);
   87|    298|                            self
   88|       |                        }
   89|  42.9k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("graph") && context.with_graph_name => {
   90|      0|                            self.stack.push(TriGState::WrappedGraph);
   91|      0|                            self.stack.push(TriGState::GraphName);
   92|      0|                            self
   93|       |                        }
   94|   616k|                        N3Token::Punctuation("{") if context.with_graph_name => {
   95|  15.9k|                            self.stack.push(TriGState::WrappedGraph);
   96|  15.9k|                            self.recognize_next(token, context,results, errors)
   97|       |                        }
   98|       |                        _ => {
   99|  1.37M|                            self.stack.push(TriGState::TriplesOrGraph);
  100|  1.37M|                            self.recognize_next(token, context,results, errors)
  101|       |                        }
  102|       |                    }
  103|       |                },
  104|       |                TriGState::ExpectDot => {
  105|   423k|                    self.cur_subject.pop();
  106|   423k|                    if token == N3Token::Punctuation(".") {
  107|   286k|                        self
  108|       |                    } else  {
  109|   136k|                        errors.push("A dot is expected at the end of statements".into());
  110|   136k|                        self.recognize_next(token, context,results, errors)
  111|       |                    }
  112|       |                },
  113|  16.6k|                TriGState::BaseExpectIri => match token {
  114|  16.2k|                    N3Token::IriRef(iri) => {
  115|  16.2k|                        match Iri::parse_unchecked(iri) {
  116|  16.2k|                            Ok(iri) => {
  117|  16.2k|                                context.lexer_options.base_iri = Some(iri);
  118|  16.2k|                                self
  119|       |                            }
  120|      0|                            Err(e) => self.error(errors, format!("Invalid base IRI: {e}"))
  121|       |                        }
  122|       |                    }
  123|    364|                    _ => self.error(errors, "The BASE keyword should be followed by an IRI"),
  124|       |                },
  125|  12.9k|                TriGState::PrefixExpectPrefix => match token {
  126|  12.9k|                    N3Token::PrefixedName { prefix, local, .. } if local.is_empty() => {
  127|  12.7k|                        self.stack.push(TriGState::PrefixExpectIri { name: prefix.to_owned() });
  128|  12.7k|                        self
  129|       |                    }
  130|       |                    _ => {
  131|    472|                        self.error(errors, "The PREFIX keyword should be followed by a prefix like 'ex:'")
  132|       |                    }
  133|       |                },
  134|  11.6k|                TriGState::PrefixExpectIri { name } => match token {
  135|  11.4k|                    N3Token::IriRef(iri) => {
  136|  11.4k|                        match Iri::parse_unchecked(iri) {
  137|  11.4k|                            Ok(iri) => {
  138|  11.4k|                                context.prefixes.insert(name, iri);
  139|  11.4k|                                self
  140|       |                            }
  141|      0|                            Err(e) => self.error(errors, format!("Invalid prefix IRI: {e}"))
  142|       |                        }                    }
  143|    217|                    _ => self.error(errors, "The PREFIX declaration should be followed by a prefix and its value as an IRI"),
  144|       |                },
  145|       |                // [3g]  triplesOrGraph  ::=  labelOrSubject ( wrappedGraph | predicateObjectList '.' ) | quotedTriple predicateObjectList '.'
  146|       |                // [4g]  triples2        ::=  blankNodePropertyList predicateObjectList? '.' | collection predicateObjectList '.'
  147|  63.7k|                TriGState::TriplesOrGraph => match token {
  148|   474k|                    N3Token::IriRef(iri) => {
  149|   474k|                        self.stack.push(TriGState::WrappedGraphOrPredicateObjectList {
  150|   474k|                            term: NamedNode::new_unchecked(iri).into()
  151|   474k|                        });
  152|   474k|                        self
  153|       |                    }
  154|  65.5k|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  155|  8.71k|                        Ok(t) => {
  156|  8.71k|                            self.stack.push(TriGState::WrappedGraphOrPredicateObjectList {
  157|  8.71k|                                term: t.into()
  158|  8.71k|                            });
  159|  8.71k|                            self
  160|       |                        },
  161|  56.8k|                        Err(e) => self.error(errors, e)
  162|       |                    }
  163|   145k|                    N3Token::BlankNodeLabel(label) => {
  164|   145k|                        self.stack.push(TriGState::WrappedGraphOrPredicateObjectList {
  165|   145k|                            term: BlankNode::new_unchecked(label).into()
  166|   145k|                        });
  167|   145k|                        self
  168|       |                    }
  169|   600k|                    N3Token::Punctuation("[") => {
  170|  17.0k|                        self.stack.push(TriGState::WrappedGraphBlankNodePropertyListCurrent);
  171|  17.0k|                        self
  172|       |                    }
  173|   583k|                    N3Token::Punctuation("(") => {
  174|   102k|                        self.stack.push(TriGState::ExpectDot);
  175|   102k|                        self.stack.push(TriGState::PredicateObjectList);
  176|   102k|                        self.stack.push(TriGState::SubjectCollectionBeginning);
  177|   102k|                        self
  178|       |                    }
  179|       |                    #[cfg(feature = "rdf-star")]
  180|   481k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  181|  63.7k|                        self.stack.push(TriGState::ExpectDot);
  182|  63.7k|                        self.stack.push(TriGState::PredicateObjectList);
  183|  63.7k|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  184|  63.7k|                        self.stack.push(TriGState::QuotedObject);
  185|  63.7k|                        self.stack.push(TriGState::Verb);
  186|  63.7k|                        self.stack.push(TriGState::QuotedSubject);
  187|  63.7k|                        self
  188|       |                    }
  189|       |                    _ => {
  190|   506k|                        self.error(errors, "TOKEN is not a valid subject or graph name")
  191|       |                    }
  192|       |                }
  193|   540k|                TriGState::WrappedGraphOrPredicateObjectList { term } => {
  194|   540k|                    if token == N3Token::Punctuation("{") && context.with_graph_name {
  195|  50.5k|                        self.cur_graph = term.into();
  196|  50.5k|                        self.stack.push(TriGState::WrappedGraph);
  197|   490k|                    } else {
  198|   490k|                        self.cur_subject.push(term.into());
  199|   490k|                        self.stack.push(TriGState::ExpectDot);
  200|   490k|                        self.stack.push(TriGState::PredicateObjectList);
  201|   490k|                    }
  202|   540k|                    self.recognize_next(token, context,results, errors)
  203|       |                }
  204|  15.9k|                TriGState::WrappedGraphBlankNodePropertyListCurrent => if token == N3Token::Punctuation("]") {
  205|  2.64k|                    self.stack.push(TriGState::WrappedGraphOrPredicateObjectList {
  206|  2.64k|                        term: BlankNode::default().into()
  207|  2.64k|                    });
  208|  2.64k|                    self
  209|       |                } else {
  210|  13.2k|                    self.cur_subject.push(BlankNode::default().into());
  211|  13.2k|                    self.stack.push(TriGState::ExpectDot);
  212|  13.2k|                    self.stack.push(TriGState::SubjectBlankNodePropertyListEnd);
  213|  13.2k|                    self.stack.push(TriGState::PredicateObjectList);
  214|  13.2k|                    self.recognize_next(token, context,results, errors)
  215|       |                }
  216|  6.46k|                TriGState::SubjectBlankNodePropertyListEnd => if token == N3Token::Punctuation("]") {
  217|  1.24k|                    self.stack.push(TriGState::SubjectBlankNodePropertyListAfter  );
  218|  1.24k|                    self
  219|       |                } else {
  220|  5.22k|                    errors.push("blank node property lists should end with a ']'".into());
  221|  5.22k|                    self.stack.push(TriGState::SubjectBlankNodePropertyListAfter );
  222|  5.22k|                    self.recognize_next(token, context,results, errors)
  223|       |                }
  224|  6.45k|                TriGState::SubjectBlankNodePropertyListAfter => if matches!(token, N3Token::Punctuation("." | "}")) {
  225|  2.55k|                    self.recognize_next(token, context,results, errors)
  226|       |                } else {
  227|  3.90k|                    self.stack.push(TriGState::PredicateObjectList);
  228|  3.90k|                    self.recognize_next(token, context,results, errors)
  229|       |                }
  230|       |                TriGState::SubjectCollectionBeginning => {
  231|  95.5k|                    if let N3Token::Punctuation(")") = token {
  232|    699|                        self.cur_subject.push(rdf::NIL.into());
  233|    699|                        self
  234|       |                    } else {
  235|  94.8k|                        let root = BlankNode::default();
  236|  94.8k|                        self.cur_subject.push(root.clone().into());
  237|  94.8k|                        self.cur_subject.push(root.into());
  238|  94.8k|                        self.cur_predicate.push(rdf::FIRST.into());
  239|  94.8k|                        self.stack.push(TriGState::SubjectCollectionPossibleEnd);
  240|  94.8k|                        self.stack.push(TriGState::Object);
  241|  94.8k|                        self.recognize_next(token, context,results, errors)
  242|       |                    }
  243|       |                },
  244|       |                TriGState::SubjectCollectionPossibleEnd => {
  245|  30.3k|                    let old = self.cur_subject.pop().unwrap();
  246|  30.3k|                    self.cur_object.pop();
  247|  30.3k|                    if let N3Token::Punctuation(")") = token {
  248|  1.33k|                        self.cur_predicate.pop();
  249|  1.33k|                        results.push(Quad::new(
  250|  1.33k|                            old,
  251|  1.33k|                            rdf::REST,
  252|  1.33k|                            rdf::NIL,
  253|  1.33k|                            self.cur_graph.clone()
  254|  1.33k|                        ));
  255|  1.33k|                        self
  256|       |                    } else {
  257|  29.0k|                        let new = BlankNode::default();
  258|  29.0k|                        results.push(Quad::new(
  259|  29.0k|                            old,
  260|  29.0k|                            rdf::REST,
  261|  29.0k|                            new.clone(),
  262|  29.0k|                            self.cur_graph.clone()
  263|  29.0k|                        ));
  264|  29.0k|                        self.cur_subject.push(new.into());
  265|  29.0k|                        self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  266|  29.0k|                        self.stack.push(TriGState::Object);
  267|  29.0k|                        self.recognize_next(token, context,results, errors)
  268|       |                    }
  269|       |                }
  270|       |                // [5g]  wrappedGraph  ::=  '{' triplesBlock? '}'
  271|       |                // [6g]  triplesBlock  ::=  triples ('.' triplesBlock?)?
  272|  66.5k|                TriGState::WrappedGraph => if token == N3Token::Punctuation("{") {
  273|  66.5k|                    self.stack.push(TriGState::WrappedGraphPossibleEnd);
  274|  66.5k|                    self.stack.push(TriGState::Triples);
  275|  66.5k|                    self
  276|       |                } else {
  277|      0|                    self.error(errors, "The GRAPH keyword should be followed by a graph name and a value in '{'")
  278|       |                },
  279|       |                TriGState::WrappedGraphPossibleEnd => {
  280|  77.4k|                    self.cur_subject.pop();
  281|  77.4k|                    match token {
  282|  64.4k|                        N3Token::Punctuation("}") => {
  283|  8.85k|                            self
  284|       |                        }
  285|  55.5k|                        N3Token::Punctuation(".") => {
  286|  54.0k|                            self.stack.push(TriGState::WrappedGraphPossibleEnd);
  287|  54.0k|                            self.stack.push(TriGState::Triples);
  288|  54.0k|                            self
  289|       |                        }
  290|       |                       _ => {
  291|  14.5k|                            errors.push("A '}' or a '.' is expected at the end of a graph block".into());
  292|  14.5k|                            self.recognize_next(token, context,results, errors)
  293|       |                        }
  294|       |                    }
  295|       |                }
  296|       |                // [6]  triples   ::=  subject predicateObjectList | blankNodePropertyList predicateObjectList?
  297|       |                // [10]  subject  ::=  iri | BlankNode | collection | quotedTriple
  298|    585|                TriGState::Triples => match token {
  299|  37.1k|                    N3Token::Punctuation("}") => {
  300|  8.85k|                        self.recognize_next(token, context,results, errors) // Early end
  301|       |                    },
  302|  28.3k|                    N3Token::Punctuation("[") => {
  303|  1.21k|                        self.cur_subject.push(BlankNode::default().into());
  304|  1.21k|                        self.stack.push(TriGState::TriplesBlankNodePropertyListCurrent);
  305|  1.21k|                        self
  306|       |                    }
  307|  26.8k|                    N3Token::IriRef(iri) => {
  308|  26.8k|                        self.cur_subject.push(NamedNode::new_unchecked(iri).into());
  309|  26.8k|                        self.stack.push(TriGState::PredicateObjectList);
  310|  26.8k|                        self
  311|       |                    }
  312|  1.60k|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  313|  1.01k|                        Ok(t) => {
  314|  1.01k|                            self.cur_subject.push(t.into());
  315|  1.01k|                            self.stack.push(TriGState::PredicateObjectList);
  316|  1.01k|                            self
  317|       |                        },
  318|    593|                        Err(e) => self.error(errors, e)
  319|       |                    }
  320|  49.6k|                    N3Token::BlankNodeLabel(label) => {
  321|  49.6k|                        self.cur_subject.push(BlankNode::new_unchecked(label).into());
  322|  49.6k|                        self.stack.push(TriGState::PredicateObjectList);
  323|  49.6k|                        self
  324|       |                    }
  325|  27.1k|                    N3Token::Punctuation("(") => {
  326|  21.6k|                        self.stack.push(TriGState::PredicateObjectList);
  327|  21.6k|                        self.stack.push(TriGState::SubjectCollectionBeginning);
  328|  21.6k|                        self
  329|       |                    }
  330|       |                    #[cfg(feature = "rdf-star")]
  331|  5.46k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  332|    585|                        self.stack.push(TriGState::PredicateObjectList);
  333|    585|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  334|    585|                        self.stack.push(TriGState::QuotedObject);
  335|    585|                        self.stack.push(TriGState::Verb);
  336|    585|                        self.stack.push(TriGState::QuotedSubject);
  337|    585|                        self
  338|       |                    }
  339|       |                   _ => {
  340|  6.27k|                        self.error(errors, "TOKEN is not a valid RDF subject")
  341|       |                    }
  342|       |                },
  343|  1.19k|                TriGState::TriplesBlankNodePropertyListCurrent => if token == N3Token::Punctuation("]") {
  344|    259|                    self.stack.push(TriGState::PredicateObjectList);
  345|    259|                    self
  346|       |                } else {
  347|    931|                    self.stack.push(TriGState::SubjectBlankNodePropertyListEnd);
  348|    931|                    self.stack.push(TriGState::PredicateObjectList);
  349|    931|                    self.recognize_next(token, context,results, errors)
  350|       |                }
  351|       |                // [7g]  labelOrSubject  ::=  iri | BlankNode
  352|      0|                TriGState::GraphName => match token {
  353|      0|                    N3Token::IriRef(iri) => {
  354|      0|                        self.cur_graph = NamedNode::new_unchecked(iri).into();
  355|      0|                        self
  356|       |                    }
  357|      0|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  358|      0|                        Ok(t) => {
  359|      0|                            self.cur_graph = t.into();
  360|      0|                            self
  361|       |                        },
  362|      0|                        Err(e) => self.error(errors, e)
  363|       |                    }
  364|      0|                    N3Token::BlankNodeLabel(label) => {
  365|      0|                        self.cur_graph = BlankNode::new_unchecked(label).into();
  366|      0|                        self
  367|       |                    }
  368|      0|                    N3Token::Punctuation("[") => {
  369|      0|                        self.stack.push(TriGState::GraphNameAnonEnd);
  370|      0|                        self
  371|       |                    }
  372|       |                   _ => {
  373|      0|                        self.error(errors, "TOKEN is not a valid graph name")
  374|       |                    }
  375|       |                }
  376|      0|                TriGState::GraphNameAnonEnd => if token == N3Token::Punctuation("]") {
  377|      0|                    self.cur_graph = BlankNode::default().into();
  378|      0|                    self
  379|       |                } else {
  380|      0|                    self.error(errors, "Anonymous blank node with a property list are not allowed as graph name")
  381|       |                }
  382|       |                // [7]  predicateObjectList  ::=  verb objectList (';' (verb objectList)?)*
  383|       |                TriGState::PredicateObjectList => {
  384|   787k|                    self.stack.push(TriGState::PredicateObjectListEnd);
  385|   787k|                    self.stack.push(TriGState::ObjectsList);
  386|   787k|                    self.stack.push(TriGState::Verb);
  387|   787k|                    self.recognize_next(token, context,results, errors)
  388|       |                },
  389|       |                TriGState::PredicateObjectListEnd => {
  390|   558k|                    self.cur_predicate.pop();
  391|   558k|                    if token == N3Token::Punctuation(";") {
  392|  33.2k|                        self.stack.push(TriGState::PredicateObjectListPossibleContinuation);
  393|  33.2k|                        self
  394|       |                    } else {
  395|   525k|                        self.recognize_next(token, context,results, errors)
  396|       |                    }
  397|       |                },
  398|  40.4k|                TriGState::PredicateObjectListPossibleContinuation => if token == N3Token::Punctuation(";") {
  399|  7.22k|                    self.stack.push(TriGState::PredicateObjectListPossibleContinuation);
  400|  7.22k|                    self
  401|  33.2k|                } else if matches!(token, N3Token::Punctuation("." | "}" | "]")) {
  402|    957|                    self.recognize_next(token, context,results, errors)
  403|       |                } else {
  404|  32.2k|                    self.stack.push(TriGState::PredicateObjectListEnd);
  405|  32.2k|                    self.stack.push(TriGState::ObjectsList);
  406|  32.2k|                    self.stack.push(TriGState::Verb);
  407|  32.2k|                    self.recognize_next(token, context,results, errors)
  408|       |                },
  409|       |                // [8]   objectList  ::=  object annotation? ( ',' object annotation? )*
  410|       |                // [30t] annotation  ::=  '{|' predicateObjectList '|}'
  411|       |                TriGState::ObjectsList => {
  412|   779k|                    self.stack.push(TriGState::ObjectsListEnd);
  413|   779k|                    self.stack.push(TriGState::Object);
  414|   779k|                    self.recognize_next(token, context,results, errors)
  415|       |                }
  416|       |                TriGState::ObjectsListEnd => {
  417|   773k|                    match token {
  418|   629k|                        N3Token::Punctuation(",") => {
  419|  57.9k|                            self.cur_object.pop();
  420|  57.9k|                            self.stack.push(TriGState::ObjectsListEnd);
  421|  57.9k|                            self.stack.push(TriGState::Object);
  422|  57.9k|                            self
  423|       |                        },
  424|       |                        #[cfg(feature = "rdf-star")]
  425|   571k|                        N3Token::Punctuation("{|") => {
  426|   156k|                            let triple = Triple::new(
  427|   156k|                                self.cur_subject.last().unwrap().clone(),
  428|   156k|                                self.cur_predicate.last().unwrap().clone(),
  429|   156k|                                self.cur_object.pop().unwrap()
  430|   156k|                            );
  431|   156k|                            self.cur_subject.push(triple.into());
  432|   156k|                            self.stack.push(TriGState::AnnotationEnd);
  433|   156k|                            self.stack.push(TriGState::PredicateObjectList);
  434|   156k|                            self
  435|       |                        }
  436|       |                       _ => {
  437|   558k|                            self.cur_object.pop();
  438|   558k|                            self.recognize_next(token, context,results, errors)
  439|       |                        }
  440|       |                    }
  441|       |                },
  442|       |                #[cfg(feature = "rdf-star")]
  443|       |                TriGState::AnnotationEnd => {
  444|  41.1k|                    self.cur_subject.pop();
  445|  41.1k|                    self.stack.push(TriGState::ObjectsListAfterAnnotation);
  446|  41.1k|                    if token == N3Token::Punctuation("|}") {
  447|      0|                        self
  448|       |                    } else {
  449|  41.1k|                        self.error(errors, "Annotations should end with '|}'")
  450|       |                    }
  451|       |                },
  452|       |                #[cfg(feature = "rdf-star")]
  453|      0|                TriGState::ObjectsListAfterAnnotation => if token == N3Token::Punctuation(",") {
  454|      0|                    self.stack.push(TriGState::ObjectsListEnd);
  455|      0|                    self.stack.push(TriGState::Object);
  456|      0|                    self
  457|       |                } else {
  458|      0|                    self.recognize_next(token, context,results, errors)
  459|       |                },
  460|       |                // [9]   verb       ::=  predicate | 'a'
  461|       |                // [11]  predicate  ::=  iri
  462|   972k|                TriGState::Verb => match token {
  463|  19.5k|                    N3Token::PlainKeyword("a") => {
  464|  13.6k|                        self.cur_predicate.push(rdf::TYPE.into());
  465|  13.6k|                        self
  466|       |                    }
  467|   899k|                    N3Token::IriRef(iri) => {
  468|   899k|                        self.cur_predicate.push(NamedNode::new_unchecked(iri));
  469|   899k|                        self
  470|       |                    }
  471|  22.9k|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  472|  22.1k|                        Ok(t) => {
  473|  22.1k|                            self.cur_predicate.push(t);
  474|  22.1k|                            self
  475|       |                        },
  476|    884|                        Err(e) => self.error(errors, e)
  477|       |                    }
  478|       |                   _ => {
  479|  36.7k|                        self.error(errors, "TOKEN is not a valid predicate")
  480|       |                    }
  481|       |                }
  482|       |                // [12]    object                 ::=  iri | BlankNode | collection | blankNodePropertyList | literal | quotedTriple
  483|       |                // [13]    literal                ::=  RDFLiteral | NumericLiteral | BooleanLiteral
  484|       |                // [14]    blank                  ::=  BlankNode | collection
  485|       |                // [15]    blankNodePropertyList  ::=  '[' predicateObjectList ']'
  486|       |                // [16]    collection             ::=  '(' object* ')'
  487|       |                // [17]    NumericLiteral         ::=  INTEGER | DECIMAL | DOUBLE
  488|       |                // [128s]  RDFLiteral             ::=  String (LANGTAG | '^^' iri)?
  489|       |                // [133s]  BooleanLiteral         ::=  'true' | 'false'
  490|       |                // [18]    String                 ::=  STRING_LITERAL_QUOTE | STRING_LITERAL_SINGLE_QUOTE | STRING_LITERAL_LONG_SINGLE_QUOTE | STRING_LITERAL_LONG_QUOTE
  491|       |                // [135s]  iri                    ::=  IRIREF | PrefixedName
  492|       |                // [136s]  PrefixedName           ::=  PNAME_LN | PNAME_NS
  493|       |                // [137s]  BlankNode              ::=  BLANK_NODE_LABEL | ANON
  494|  27.6k|                TriGState::Object => match token {
  495|   124k|                    N3Token::IriRef(iri) => {
  496|   124k|                        self.cur_object.push(NamedNode::new_unchecked(iri).into());
  497|   124k|                        self.emit_quad(results);
  498|   124k|                        self
  499|       |                    }
  500|  9.30k|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  501|  6.50k|                        Ok(t) => {
  502|  6.50k|                            self.cur_object.push(t.into());
  503|  6.50k|                            self.emit_quad(results);
  504|  6.50k|                            self
  505|       |                        },
  506|  2.80k|                        Err(e) => self.error(errors, e)
  507|       |                    }
  508|   149k|                    N3Token::BlankNodeLabel(label) => {
  509|   149k|                        self.cur_object.push(BlankNode::new_unchecked(label).into());
  510|   149k|                        self.emit_quad(results);
  511|   149k|                        self
  512|       |                    }
  513|   340k|                    N3Token::Punctuation("[") => {
  514|  3.67k|                        self.stack.push(TriGState::ObjectBlankNodePropertyListCurrent);
  515|  3.67k|                        self
  516|       |                    }
  517|   336k|                    N3Token::Punctuation("(") => {
  518|   287k|                        self.stack.push(TriGState::ObjectCollectionBeginning);
  519|   287k|                        self
  520|       |                    }
  521|  46.4k|                    N3Token::String(value) => {
  522|  46.4k|                        self.stack.push(TriGState::LiteralPossibleSuffix { value, emit: true });
  523|  46.4k|                        self
  524|       |                    }
  525|   316k|                    N3Token::Integer(v) => {
  526|   316k|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::INTEGER).into());
  527|   316k|                        self.emit_quad(results);
  528|   316k|                        self
  529|       |                    }
  530|  13.9k|                    N3Token::Decimal(v) => {
  531|  13.9k|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
  532|  13.9k|                        self.emit_quad(results);
  533|  13.9k|                        self
  534|       |                    }
  535|   303k|                    N3Token::Double(v) => {
  536|   303k|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
  537|   303k|                        self.emit_quad(results);
  538|   303k|                        self
  539|       |                    }
  540|  10.4k|                    N3Token::PlainKeyword("true") => {
  541|    776|                        self.cur_object.push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
  542|    776|                        self.emit_quad(results);
  543|    776|                        self
  544|       |                    }
  545|  9.64k|                    N3Token::PlainKeyword("false") => {
  546|    267|                        self.cur_object.push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
  547|    267|                        self.emit_quad(results);
  548|    267|                        self
  549|       |                    }
  550|       |                    #[cfg(feature = "rdf-star")]
  551|  49.4k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  552|  27.6k|                        self.stack.push(TriGState::ObjectQuotedTripleEnd { emit: true });
  553|  27.6k|                        self.stack.push(TriGState::QuotedObject);
  554|  27.6k|                        self.stack.push(TriGState::Verb);
  555|  27.6k|                        self.stack.push(TriGState::QuotedSubject);
  556|  27.6k|                        self
  557|       |                    }
  558|       |                   _ => {
  559|  31.8k|                        self.error(errors, "TOKEN is not a valid RDF object")
  560|       |                    }
  561|       |
  562|       |                }
  563|  3.50k|                TriGState::ObjectBlankNodePropertyListCurrent => if token == N3Token::Punctuation("]") {
  564|  1.49k|                    self.cur_object.push(BlankNode::default().into());
  565|  1.49k|                    self.emit_quad(results);
  566|  1.49k|                    self
  567|       |                } else {
  568|  2.01k|                    self.cur_subject.push(BlankNode::default().into());
  569|  2.01k|                    self.stack.push(TriGState::ObjectBlankNodePropertyListEnd);
  570|  2.01k|                    self.stack.push(TriGState::PredicateObjectList);
  571|  2.01k|                    self.recognize_next(token, context,results, errors)
  572|       |                }
  573|    551|                TriGState::ObjectBlankNodePropertyListEnd => if token == N3Token::Punctuation("]") {
  574|    228|                    self.cur_object.push(self.cur_subject.pop().unwrap().into());
  575|    228|                    self.emit_quad(results);
  576|    228|                    self
  577|       |                } else {
  578|    323|                    self.error(errors, "blank node property lists should end with a ']'")
  579|       |                }
  580|   279k|                TriGState::ObjectCollectionBeginning => if let  N3Token::Punctuation(")") = token {
  581|  11.9k|                    self.cur_object.push(rdf::NIL.into());
  582|  11.9k|                    self.emit_quad(results);
  583|  11.9k|                    self
  584|       |                } else {
  585|   267k|                    let root = BlankNode::default();
  586|   267k|                    self.cur_object.push(root.clone().into());
  587|   267k|                    self.emit_quad(results);
  588|   267k|                    self.cur_subject.push(root.into());
  589|   267k|                    self.cur_predicate.push(rdf::FIRST.into());
  590|   267k|                    self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  591|   267k|                    self.stack.push(TriGState::Object);
  592|   267k|                    self.recognize_next(token, context,results, errors)
  593|       |                },
  594|       |                TriGState::ObjectCollectionPossibleEnd => {
  595|   123k|                    let old = self.cur_subject.pop().unwrap();
  596|   123k|                    self.cur_object.pop();
  597|   123k|                    if let N3Token::Punctuation(")") = token {
  598|  38.7k|                        self.cur_predicate.pop();
  599|  38.7k|                        results.push(Quad::new(old,
  600|  38.7k|                                               rdf::REST,
  601|  38.7k|                                               rdf::NIL,
  602|  38.7k|                                               self.cur_graph.clone()
  603|  38.7k|                        ));
  604|  38.7k|                        self
  605|       |                    }else {
  606|  85.0k|                        let new = BlankNode::default();
  607|  85.0k|                        results.push(Quad::new(old,
  608|  85.0k|                                               rdf::REST,
  609|  85.0k|                                               new.clone(),
  610|  85.0k|                                               self.cur_graph.clone()
  611|  85.0k|                        ));
  612|  85.0k|                        self.cur_subject.push(new.into());
  613|  85.0k|                        self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  614|  85.0k|                        self.stack.push(TriGState::Object);
  615|  85.0k|                        self.recognize_next(token, context,results, errors)
  616|       |                    }
  617|       |                }
  618|  45.6k|                TriGState::LiteralPossibleSuffix { value, emit } => {
  619|  45.6k|                    match token {
  620|  8.34k|                        N3Token::LangTag(lang) => {
  621|  8.34k|                            self.cur_object.push(Literal::new_language_tagged_literal_unchecked(value, lang.to_ascii_lowercase()).into());
  622|  8.34k|                            if emit {
  623|  8.26k|                                self.emit_quad(results);
  624|  8.26k|                            }
  625|  8.34k|                            self
  626|       |                        },
  627|  24.6k|                        N3Token::Punctuation("^^") => {
  628|  3.85k|                            self.stack.push(TriGState::LiteralExpectDatatype { value, emit });
  629|  3.85k|                            self
  630|       |                        }
  631|       |                        _ => {
  632|  33.4k|                            self.cur_object.push(Literal::new_simple_literal(value).into());
  633|  33.4k|                            if emit {
  634|  32.0k|                                self.emit_quad(results);
  635|  32.0k|                            }
  636|  33.4k|                            self.recognize_next(token, context,results, errors)
  637|       |                        }
  638|       |                    }
  639|       |                }
  640|  3.58k|                TriGState::LiteralExpectDatatype { value, emit } => {
  641|  3.58k|                    match token {
  642|  1.89k|                        N3Token::IriRef(datatype) => {
  643|  1.89k|                            self.cur_object.push(Literal::new_typed_literal(value, NamedNode::new_unchecked(datatype)).into());
  644|  1.89k|                            if emit {
  645|  1.89k|                                self.emit_quad(results);
  646|  1.89k|                            }
  647|  1.89k|                            self
  648|       |                        },
  649|  1.37k|                        N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  650|    941|                            Ok(t) => {
  651|    941|                                self.cur_object.push(Literal::new_typed_literal(value, t).into());
  652|    941|                                if emit {
  653|    941|                                    self.emit_quad(results);
  654|    941|                                }
  655|    941|                                self
  656|       |                            },
  657|    431|                            Err(e) => self.error(errors, e)
  658|       |                        }
  659|       |                        _ => {
  660|    314|                            self.error(errors, "Expecting a datatype IRI after ^^, found TOKEN").recognize_next(token, context, results, errors)
  661|       |                        }
  662|       |                    }
  663|       |                }
  664|       |                // [27t]  quotedTriple  ::=  '<<' qtSubject verb qtObject '>>'
  665|       |                #[cfg(feature = "rdf-star")]
  666|       |                TriGState::SubjectQuotedTripleEnd => {
  667|   123k|                    let triple = Triple::new(
  668|   123k|                        self.cur_subject.pop().unwrap(),
  669|   123k|                        self.cur_predicate.pop().unwrap(),
  670|   123k|                        self.cur_object.pop().unwrap()
  671|   123k|                    );
  672|   123k|                    self.cur_subject.push(triple.into());
  673|   123k|                    if token == N3Token::Punctuation(">>") {
  674|   119k|                        self
  675|       |                    } else {
  676|  3.46k|                        self.error(errors, "Expecting '>>' to close a quoted triple, found TOKEN")
  677|       |                    }
  678|       |                }
  679|       |                #[cfg(feature = "rdf-star")]
  680|  20.8k|                TriGState::ObjectQuotedTripleEnd { emit } => {
  681|  20.8k|                    let triple = Triple::new(
  682|  20.8k|                        self.cur_subject.pop().unwrap(),
  683|  20.8k|                        self.cur_predicate.pop().unwrap(),
  684|  20.8k|                        self.cur_object.pop().unwrap()
  685|  20.8k|                    );
  686|  20.8k|                    self.cur_object.push(triple.into());
  687|  20.8k|                    if emit {
  688|  20.6k|                        self.emit_quad(results);
  689|  20.6k|                    }
  690|  20.8k|                    if token == N3Token::Punctuation(">>") {
  691|  5.49k|                        self
  692|       |                    } else {
  693|  15.3k|                        self.error(errors, "Expecting '>>' to close a quoted triple, found TOKEN")
  694|       |                    }
  695|       |                }
  696|       |                // [28t]  qtSubject  ::=  iri | BlankNode | quotedTriple
  697|       |                #[cfg(feature = "rdf-star")]
  698|   210k|                TriGState::QuotedSubject => match token {
  699|   122k|                    N3Token::Punctuation("[") => {
  700|    595|                        self.cur_subject.push(BlankNode::default().into());
  701|    595|                        self.stack.push(TriGState::QuotedAnonEnd);
  702|    595|                        self
  703|       |                    }
  704|  79.3k|                    N3Token::IriRef(iri) => {
  705|  79.3k|                        self.cur_subject.push(NamedNode::new_unchecked(iri).into());
  706|  79.3k|                        self
  707|       |                    }
  708|  2.04k|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  709|  1.17k|                        Ok(t) => {
  710|  1.17k|                            self.cur_subject.push(t.into());
  711|  1.17k|                            self
  712|       |                        },
  713|    869|                        Err(e) => self.error(errors, e)
  714|       |                    }
  715|  4.23k|                    N3Token::BlankNodeLabel(label) => {
  716|  4.23k|                        self.cur_subject.push(BlankNode::new_unchecked(label).into());
  717|  4.23k|                        self
  718|       |                    }
  719|   121k|                    N3Token::Punctuation("<<") => {
  720|   120k|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  721|   120k|                        self.stack.push(TriGState::QuotedObject);
  722|   120k|                        self.stack.push(TriGState::Verb);
  723|   120k|                        self.stack.push(TriGState::QuotedSubject);
  724|   120k|                        self
  725|       |                    }
  726|  3.72k|                    _ => self.error(errors, "TOKEN is not a valid RDF quoted triple subject: TOKEN")
  727|       |                }
  728|       |                // [29t]  qtObject  ::=  iri | BlankNode | literal | quotedTriple
  729|       |                #[cfg(feature = "rdf-star")]
  730|   149k|                TriGState::QuotedObject => match token {
  731|  3.14k|                    N3Token::Punctuation("[") => {
  732|    485|                        self.cur_object.push(BlankNode::default().into());
  733|    485|                        self.stack.push(TriGState::QuotedAnonEnd);
  734|    485|                        self
  735|       |                    }
  736|  4.87k|                    N3Token::IriRef(iri) => {
  737|  4.87k|                        self.cur_object.push(NamedNode::new_unchecked(iri).into());
  738|  4.87k|                        self
  739|       |                    }
  740|    415|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  741|    109|                        Ok(t) => {
  742|    109|                            self.cur_object.push(t.into());
  743|    109|                            self
  744|       |                        },
  745|    306|                        Err(e) => self.error(errors, e)
  746|       |                    }
  747|  6.99k|                    N3Token::BlankNodeLabel(label) => {
  748|  6.99k|                        self.cur_object.push(BlankNode::new_unchecked(label).into());
  749|  6.99k|                        self
  750|       |                    }
  751|  1.54k|                    N3Token::String(value) => {
  752|  1.54k|                        self.stack.push(TriGState::LiteralPossibleSuffix { value, emit: false });
  753|  1.54k|                        self
  754|       |                    }
  755|  6.21k|                    N3Token::Integer(v) => {
  756|  6.21k|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::INTEGER).into());
  757|  6.21k|                        self
  758|       |                    }
  759|    174|                    N3Token::Decimal(v) => {
  760|    174|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
  761|    174|                        self
  762|       |                    }
  763|   124k|                    N3Token::Double(v) => {
  764|   124k|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
  765|   124k|                        self
  766|       |                    }
  767|    702|                    N3Token::PlainKeyword("true") => {
  768|    170|                        self.cur_object.push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
  769|    170|                        self
  770|       |                    }
  771|    532|                    N3Token::PlainKeyword("false") => {
  772|    179|                        self.cur_object.push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
  773|    179|                        self
  774|       |                    }
  775|  2.66k|                    N3Token::Punctuation("<<") => {
  776|  1.94k|                        self.stack.push(TriGState::ObjectQuotedTripleEnd { emit: false });
  777|  1.94k|                        self.stack.push(TriGState::QuotedObject);
  778|  1.94k|                        self.stack.push(TriGState::Verb);
  779|  1.94k|                        self.stack.push(TriGState::QuotedSubject);
  780|  1.94k|                        self
  781|       |                    }
  782|  1.64k|                    _ => self.error(errors, "TOKEN is not a valid RDF quoted triple object")
  783|       |                }
  784|       |                #[cfg(feature = "rdf-star")]
  785|    987|                TriGState::QuotedAnonEnd => if token == N3Token::Punctuation("]") {
  786|    655|                    self
  787|       |                } else {
  788|    332|                    self.error(errors, "Anonymous blank node with a property list are not allowed in quoted triples")
  789|       |                }
  790|       |            }
  791|  4.83M|        } else if token == N3Token::Punctuation(".") || token == N3Token::Punctuation("}") {
  792|       |            // TODO: be smarter depending if we are in '{' or not
  793|  1.07M|            self.stack.push(TriGState::TriGDoc);
  794|  1.07M|            self
  795|       |        } else {
  796|  3.76M|            self
  797|       |        }
  798|  15.2M|    }
_RNvXs_NtCs2uQIyP4qcLL_5oxttl5terseNtB4_14TriGRecognizerNtNtNtB6_7toolkit6parser14RuleRecognizer13recognize_end:
  800|  68.2k|    fn recognize_end(
  801|  68.2k|        mut self,
  802|  68.2k|        _context: &mut TriGRecognizerContext,
  803|  68.2k|        results: &mut Vec<Self::Output>,
  804|  68.2k|        errors: &mut Vec<RuleRecognizerError>,
  805|  68.2k|    ) {
  806|  68.2k|        match &*self.stack {
  807|  68.2k|            [] | [TriGState::TriGDoc] => {
  808|  66.4k|                debug_assert!(
  809|      0|                    self.cur_subject.is_empty(),
  810|      0|                    "The cur_subject stack must be empty if the state stack is empty"
  811|       |                );
  812|  66.4k|                debug_assert!(
  813|      0|                    self.cur_predicate.is_empty(),
  814|      0|                    "The cur_predicate stack must be empty if the state stack is empty"
  815|       |                );
  816|  66.4k|                debug_assert!(
  817|      0|                    self.cur_object.is_empty(),
  818|      0|                    "The cur_object stack must be empty if the state stack is empty"
  819|       |                );
  820|       |            }
  821|    280|            [.., TriGState::LiteralPossibleSuffix { value, emit: true }] => {
  822|    280|                self.cur_object
  823|    280|                    .push(Literal::new_simple_literal(value).into());
  824|    280|                self.emit_quad(results);
  825|    280|                errors.push("Triples should be followed by a dot".into())
  826|       |            }
  827|  1.53k|            _ => errors.push("Unexpected end".into()), // TODO
  828|       |        }
  829|  68.2k|    }
_RNvXs_NtCs2uQIyP4qcLL_5oxttl5terseNtB4_14TriGRecognizerNtNtNtB6_7toolkit6parser14RuleRecognizer13lexer_options:
  831|  22.9M|    fn lexer_options(context: &TriGRecognizerContext) -> &N3LexerOptions {
  832|  22.9M|        &context.lexer_options
  833|  22.9M|    }
_RNvMs0_NtCs2uQIyP4qcLL_5oxttl5terseNtB5_14TriGRecognizer10new_parser:
  837|  68.2k|    pub fn new_parser(
  838|  68.2k|        with_graph_name: bool,
  839|  68.2k|        #[cfg(feature = "rdf-star")] with_quoted_triples: bool,
  840|  68.2k|        unchecked: bool,
  841|  68.2k|        base_iri: Option<Iri<String>>,
  842|  68.2k|        prefixes: HashMap<String, Iri<String>>,
  843|  68.2k|    ) -> Parser<Self> {
  844|  68.2k|        Parser::new(
  845|  68.2k|            Lexer::new(
  846|  68.2k|                N3Lexer::new(N3LexerMode::Turtle, unchecked),
  847|  68.2k|                MIN_BUFFER_SIZE,
  848|  68.2k|                MAX_BUFFER_SIZE,
  849|  68.2k|                true,
  850|  68.2k|                Some(b"#"),
  851|  68.2k|            ),
  852|  68.2k|            Self {
  853|  68.2k|                stack: vec![TriGState::TriGDoc],
  854|  68.2k|                cur_subject: Vec::new(),
  855|  68.2k|                cur_predicate: Vec::new(),
  856|  68.2k|                cur_object: Vec::new(),
  857|  68.2k|                cur_graph: GraphName::DefaultGraph,
  858|  68.2k|            },
  859|  68.2k|            TriGRecognizerContext {
  860|  68.2k|                with_graph_name,
  861|  68.2k|                #[cfg(feature = "rdf-star")]
  862|  68.2k|                with_quoted_triples,
  863|  68.2k|                prefixes,
  864|  68.2k|                lexer_options: N3LexerOptions { base_iri },
  865|  68.2k|            },
  866|  68.2k|        )
  867|  68.2k|    }
_RNvMs0_NtCs2uQIyP4qcLL_5oxttl5terseNtB5_14TriGRecognizer9emit_quad:
  884|  1.26M|    fn emit_quad(&mut self, results: &mut Vec<Quad>) {
  885|  1.26M|        results.push(Quad::new(
  886|  1.26M|            self.cur_subject.last().unwrap().clone(),
  887|  1.26M|            self.cur_predicate.last().unwrap().clone(),
  888|  1.26M|            self.cur_object.last().unwrap().clone(),
  889|  1.26M|            self.cur_graph.clone(),
  890|  1.26M|        ));
  891|  1.26M|    }
_RINvMs0_NtCs2uQIyP4qcLL_5oxttl5terseNtB6_14TriGRecognizer5errorNtNtCs5pYOfYKUd9L_5alloc6string6StringEB8_:
  870|  62.6k|    fn error(
  871|  62.6k|        mut self,
  872|  62.6k|        errors: &mut Vec<RuleRecognizerError>,
  873|  62.6k|        msg: impl Into<RuleRecognizerError>,
  874|  62.6k|    ) -> Self {
  875|  62.6k|        errors.push(msg.into());
  876|  62.6k|        self.stack.clear();
  877|  62.6k|        self.cur_subject.clear();
  878|  62.6k|        self.cur_predicate.clear();
  879|  62.6k|        self.cur_object.clear();
  880|  62.6k|        self.cur_graph = GraphName::DefaultGraph;
  881|  62.6k|        self
  882|  62.6k|    }
_RINvMs0_NtCs2uQIyP4qcLL_5oxttl5terseNtB6_14TriGRecognizer5errorReEB8_:
  870|   648k|    fn error(
  871|   648k|        mut self,
  872|   648k|        errors: &mut Vec<RuleRecognizerError>,
  873|   648k|        msg: impl Into<RuleRecognizerError>,
  874|   648k|    ) -> Self {
  875|   648k|        errors.push(msg.into());
  876|   648k|        self.stack.clear();
  877|   648k|        self.cur_subject.clear();
  878|   648k|        self.cur_predicate.clear();
  879|   648k|        self.cur_object.clear();
  880|   648k|        self.cur_graph = GraphName::DefaultGraph;
  881|   648k|        self
  882|   648k|    }

_RNvXs_NtNtCs2uQIyP4qcLL_5oxttl7toolkit5errorNtB4_11SyntaxErrorNtNtCslA8OvuvDMgt_4core3fmt7Display3fmtCsgNaHgHERLlN_4trig:
   38|  7.67M|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   39|  7.67M|        if self.location.start.offset + 1 >= self.location.end.offset {
   40|  6.68M|            write!(
   41|  6.68M|                f,
   42|  6.68M|                "Parser error at line {} column {}: {}",
   43|  6.68M|                self.location.start.line + 1,
   44|  6.68M|                self.location.start.column + 1,
   45|  6.68M|                self.message
   46|  6.68M|            )
   47|   989k|        } else if self.location.start.line == self.location.end.line {
   48|   972k|            write!(
   49|   972k|                f,
   50|   972k|                "Parser error between at line {} between columns {} and column {}: {}",
   51|   972k|                self.location.start.line + 1,
   52|   972k|                self.location.start.column + 1,
   53|   972k|                self.location.end.column + 1,
   54|   972k|                self.message
   55|   972k|            )
   56|       |        } else {
   57|  17.3k|            write!(
   58|  17.3k|                f,
   59|  17.3k|                "Parser error between line {} column {} and line {} column {}: {}",
   60|  17.3k|                self.location.start.line + 1,
   61|  17.3k|                self.location.start.column + 1,
   62|  17.3k|                self.location.end.line + 1,
   63|  17.3k|                self.location.end.column + 1,
   64|  17.3k|                self.message
   65|  17.3k|            )
   66|       |        }
   67|  7.67M|    }

_RINvMs1_NtNtCs2uQIyP4qcLL_5oxttl7toolkit5lexerINtB6_5LexerNtNtBa_5lexer7N3LexerE16extend_from_readRShECsgNaHgHERLlN_4trig:
  113|  48.5k|    pub fn extend_from_read(&mut self, read: &mut impl Read) -> io::Result<()> {
  114|  48.5k|        self.shrink_data();
  115|  48.5k|        if self.data.len() == self.max_buffer_size {
  116|      0|            return Err(io::Error::new(
  117|      0|                io::ErrorKind::OutOfMemory,
  118|      0|                format!(
  119|      0|                    "Reached the buffer maximal size of {}",
  120|      0|                    self.max_buffer_size
  121|      0|                ),
  122|      0|            ));
  123|  48.5k|        }
  124|  48.5k|        let min_end = min(self.data.len() + self.min_buffer_size, self.max_buffer_size);
  125|  48.5k|        let new_start = self.data.len();
  126|  48.5k|        self.data.resize(min_end, 0);
  127|  48.5k|        if self.data.len() < self.data.capacity() {
  128|  6.78k|            // We keep extending to have as much space as available without reallocation
  129|  6.78k|            self.data.resize(self.data.capacity(), 0);
  130|  41.7k|        }
  131|  48.5k|        let read = read.read(&mut self.data[new_start..])?;
  132|  48.5k|        self.data.truncate(new_start + read);
  133|  48.5k|        self.is_ending = read == 0;
  134|  48.5k|        Ok(())
  135|  48.5k|    }
_RNvXNtNtCs2uQIyP4qcLL_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCslA8OvuvDMgt_4core7convert4FromTINtNtNtB1a_3ops5range5RangejENtNtCs5pYOfYKUd9L_5alloc6string6StringEE4fromB6_:
   31|  5.32M|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|  5.32M|        Self {
   33|  5.32M|            location,
   34|  5.32M|            message: message.into(),
   35|  5.32M|        }
   36|  5.32M|    }
_RNvXNtNtCs2uQIyP4qcLL_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCslA8OvuvDMgt_4core7convert4FromTINtNtNtB1a_3ops5range5RangejEReEE4fromB6_:
   31|  1.48M|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|  1.48M|        Self {
   33|  1.48M|            location,
   34|  1.48M|            message: message.into(),
   35|  1.48M|        }
   36|  1.48M|    }
_RNvXs_NtNtCs2uQIyP4qcLL_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCslA8OvuvDMgt_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejENtNtCs5pYOfYKUd9L_5alloc6string6StringEE4fromB8_:
   41|  20.6k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  20.6k|        (*location.start()..*location.end() + 1, message).into()
   43|  20.6k|    }
_RNvXs_NtNtCs2uQIyP4qcLL_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCslA8OvuvDMgt_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejEReEE4fromB8_:
   41|  1.29M|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  1.29M|        (*location.start()..*location.end() + 1, message).into()
   43|  1.29M|    }
_RNvXs0_NtNtCs2uQIyP4qcLL_5oxttl7toolkit5lexerNtB5_20TokenRecognizerErrorINtNtCslA8OvuvDMgt_4core7convert4FromTjNtNtCs5pYOfYKUd9L_5alloc6string6StringEE4fromB9_:
   47|  13.4k|    fn from((location, message): (usize, S)) -> Self {
   48|  13.4k|        (location..=location, message).into()
   49|  13.4k|    }
_RNvMs1_NtNtCs2uQIyP4qcLL_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3newB9_:
   73|  68.2k|    pub fn new(
   74|  68.2k|        parser: R,
   75|  68.2k|        min_buffer_size: usize,
   76|  68.2k|        max_buffer_size: usize,
   77|  68.2k|        is_line_jump_whitespace: bool,
   78|  68.2k|        line_comment_start: Option<&'static [u8]>,
   79|  68.2k|    ) -> Self {
   80|  68.2k|        Self {
   81|  68.2k|            parser,
   82|  68.2k|            data: Vec::new(),
   83|  68.2k|            position: Position {
   84|  68.2k|                line_start_buffer_offset: 0,
   85|  68.2k|                buffer_offset: 0,
   86|  68.2k|                global_offset: 0,
   87|  68.2k|                global_line: 0,
   88|  68.2k|            },
   89|  68.2k|            previous_position: Position {
   90|  68.2k|                line_start_buffer_offset: 0,
   91|  68.2k|                buffer_offset: 0,
   92|  68.2k|                global_offset: 0,
   93|  68.2k|                global_line: 0,
   94|  68.2k|            },
   95|  68.2k|            is_ending: false,
   96|  68.2k|            min_buffer_size,
   97|  68.2k|            max_buffer_size,
   98|  68.2k|            is_line_jump_whitespace,
   99|  68.2k|            line_comment_start,
  100|  68.2k|        }
  101|  68.2k|    }
_RNvMs1_NtNtCs2uQIyP4qcLL_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17extend_from_sliceB9_:
  103|  6.03M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  104|  6.03M|        self.shrink_data();
  105|  6.03M|        self.data.extend_from_slice(other);
  106|  6.03M|    }
_RNvMs1_NtNtCs2uQIyP4qcLL_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3endB9_:
  109|  51.1k|    pub fn end(&mut self) {
  110|  51.1k|        self.is_ending = true;
  111|  51.1k|    }
_RNvMs1_NtNtCs2uQIyP4qcLL_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE9read_nextB9_:
  166|  22.9M|    pub fn read_next(&mut self, options: &R::Options) -> Option<Result<R::Token<'_>, SyntaxError>> {
  167|  22.9M|        self.skip_whitespaces_and_comments()?;
  168|  22.9M|        self.previous_position = self.position;
  169|  22.9M|        let Some((consumed, result)) = self.parser.recognize_next_token(
  170|  22.9M|            &self.data[self.position.buffer_offset..],
  171|  22.9M|            self.is_ending,
  172|  22.9M|            options,
  173|  22.9M|        ) else {
  174|  6.17M|            return if self.is_ending {
  175|   156k|                if self.position.buffer_offset == self.data.len() {
  176|   136k|                    None // We have finished
  177|       |                } else {
  178|  20.4k|                    let (new_line_jumps, new_line_start) =
  179|  20.4k|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  180|  20.4k|                            &self.data[self.position.buffer_offset..],
  181|  20.4k|                        );
  182|  20.4k|                    if new_line_jumps > 0 {
  183|  3.81k|                        self.position.line_start_buffer_offset =
  184|  3.81k|                            self.position.buffer_offset + new_line_start;
  185|  16.6k|                    }
  186|  20.4k|                    self.position.global_offset +=
  187|  20.4k|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  188|  20.4k|                    self.position.buffer_offset = self.data.len();
  189|  20.4k|                    self.position.global_line += new_line_jumps;
  190|  20.4k|                    let new_position = TextPosition {
  191|  20.4k|                        line: self.position.global_line,
  192|  20.4k|                        column: Self::column_from_bytes(
  193|  20.4k|                            &self.data[self.position.line_start_buffer_offset..],
  194|  20.4k|                        ),
  195|  20.4k|                        offset: self.position.global_offset,
  196|  20.4k|                    };
  197|  20.4k|                    let error = SyntaxError {
  198|  20.4k|                        location: new_position..new_position,
  199|  20.4k|                        message: "Unexpected end of file".into(),
  200|  20.4k|                    };
  201|  20.4k|                    self.position.buffer_offset = self.data.len(); // We consume everything
  202|  20.4k|                    Some(Err(error))
  203|       |                }
  204|       |            } else {
  205|  6.01M|                None
  206|       |            };
  207|       |        };
  208|  16.7M|        debug_assert!(
  209|      0|            consumed > 0,
  210|      0|            "The lexer must consume at least one byte each time"
  211|       |        );
  212|  16.7M|        debug_assert!(
  213|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  214|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  215|      0|            self.data.len() - self.position.buffer_offset
  216|       |        );
  217|  16.7M|        let (new_line_jumps, new_line_start) =
  218|  16.7M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  219|  16.7M|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  220|  16.7M|            );
  221|  16.7M|        if new_line_jumps > 0 {
  222|  43.9k|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  223|  16.7M|        }
  224|  16.7M|        self.position.buffer_offset += consumed;
  225|  16.7M|        self.position.global_offset += u64::try_from(consumed).unwrap();
  226|  16.7M|        self.position.global_line += new_line_jumps;
  227|  16.7M|        Some(result.map_err(|e| SyntaxError {
  228|       |            location: self.location_from_buffer_offset_range(e.location),
  229|       |            message: e.message,
  230|  16.7M|        }))
  231|  22.9M|    }
_RNCNvMs1_NtNtCs2uQIyP4qcLL_5oxttl7toolkit5lexerINtB7_5LexerNtNtBb_5lexer7N3LexerE9read_next0Bb_:
  227|  6.78M|        Some(result.map_err(|e| SyntaxError {
  228|  6.78M|            location: self.location_from_buffer_offset_range(e.location),
  229|  6.78M|            message: e.message,
  230|  6.78M|        }))
_RNvMs1_NtNtCs2uQIyP4qcLL_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE33location_from_buffer_offset_rangeB9_:
  233|  6.78M|    pub fn location_from_buffer_offset_range(
  234|  6.78M|        &self,
  235|  6.78M|        offset_range: Range<usize>,
  236|  6.78M|    ) -> Range<TextPosition> {
  237|  6.78M|        let start_offset = self.previous_position.buffer_offset + offset_range.start;
  238|  6.78M|        let (start_extra_line_jumps, start_line_start) =
  239|  6.78M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  240|  6.78M|                &self.data[self.previous_position.buffer_offset..start_offset],
  241|  6.78M|            );
  242|  6.78M|        let start_line_start = if start_extra_line_jumps > 0 {
  243|  12.6k|            start_line_start + self.previous_position.buffer_offset
  244|       |        } else {
  245|  6.77M|            self.previous_position.line_start_buffer_offset
  246|       |        };
  247|  6.78M|        let end_offset = self.previous_position.buffer_offset + offset_range.end;
  248|  6.78M|        let (end_extra_line_jumps, end_line_start) =
  249|  6.78M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  250|  6.78M|                &self.data[self.previous_position.buffer_offset..end_offset],
  251|  6.78M|            );
  252|  6.78M|        let end_line_start = if end_extra_line_jumps > 0 {
  253|  29.9k|            end_line_start + self.previous_position.buffer_offset
  254|       |        } else {
  255|  6.75M|            self.previous_position.line_start_buffer_offset
  256|       |        };
  257|  6.78M|        TextPosition {
  258|  6.78M|            line: self.previous_position.global_line + start_extra_line_jumps,
  259|  6.78M|            column: Self::column_from_bytes(&self.data[start_line_start..start_offset]),
  260|  6.78M|            offset: self.previous_position.global_offset
  261|  6.78M|                + u64::try_from(offset_range.start).unwrap(),
  262|  6.78M|        }..TextPosition {
  263|  6.78M|            line: self.previous_position.global_line + end_extra_line_jumps,
  264|  6.78M|            column: Self::column_from_bytes(&self.data[end_line_start..end_offset]),
  265|  6.78M|            offset: self.previous_position.global_offset + u64::try_from(offset_range.end).unwrap(),
  266|  6.78M|        }
  267|  6.78M|    }
_RNvMs1_NtNtCs2uQIyP4qcLL_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE19last_token_locationB9_:
  269|   869k|    pub fn last_token_location(&self) -> Range<TextPosition> {
  270|   869k|        TextPosition {
  271|   869k|            line: self.previous_position.global_line,
  272|   869k|            column: Self::column_from_bytes(
  273|   869k|                &self.data[self.previous_position.line_start_buffer_offset
  274|   869k|                    ..self.previous_position.buffer_offset],
  275|   869k|            ),
  276|   869k|            offset: self.previous_position.global_offset,
  277|   869k|        }..TextPosition {
  278|   869k|            line: self.position.global_line,
  279|   869k|            column: Self::column_from_bytes(
  280|   869k|                &self.data[self.position.line_start_buffer_offset..self.position.buffer_offset],
  281|   869k|            ),
  282|   869k|            offset: self.position.global_offset,
  283|   869k|        }
  284|   869k|    }
_RNvMs1_NtNtCs2uQIyP4qcLL_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17last_token_sourceB9_:
  286|   869k|    pub fn last_token_source(&self) -> Cow<'_, str> {
  287|   869k|        String::from_utf8_lossy(
  288|   869k|            &self.data[self.previous_position.buffer_offset..self.position.buffer_offset],
  289|   869k|        )
  290|   869k|    }
_RNvMs1_NtNtCs2uQIyP4qcLL_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE6is_endB9_:
  292|  6.20M|    pub fn is_end(&self) -> bool {
  293|  6.20M|        self.is_ending && self.data.len() == self.position.buffer_offset
  294|  6.20M|    }
_RNvMs1_NtNtCs2uQIyP4qcLL_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  297|  22.9M|    fn skip_whitespaces_and_comments(&mut self) -> Option<()> {
  298|       |        loop {
  299|  22.9M|            self.skip_whitespaces()?;
  300|       |
  301|  22.9M|            let buf = &self.data[self.position.buffer_offset..];
  302|  22.9M|            if let Some(line_comment_start) = self.line_comment_start {
  303|  22.9M|                if buf.starts_with(line_comment_start) {
  304|       |                    // Comment
  305|  39.1k|                    if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  306|  7.03k|                        let mut end_position = line_comment_start.len() + end;
  307|  7.03k|                        if buf.get(end_position).copied() == Some(b'\r') {
  308|       |                            // We look for \n for Windows line end style
  309|  4.63k|                            if let Some(c) = buf.get(end_position + 1) {
  310|  3.03k|                                if *c == b'\n' {
  311|      0|                                    end_position += 1;
  312|  3.03k|                                }
  313|  1.60k|                            } else if !self.is_ending {
  314|  1.56k|                                return None; // We need to read more
  315|     35|                            }
  316|  2.39k|                        }
  317|  5.46k|                        let comment_size = end_position + 1;
  318|  5.46k|                        self.position.buffer_offset += comment_size;
  319|  5.46k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  320|  5.46k|                        self.position.global_offset += u64::try_from(comment_size).unwrap();
  321|  5.46k|                        self.position.global_line += 1;
  322|  5.46k|                        continue;
  323|  32.1k|                    }
  324|  32.1k|                    if self.is_ending {
  325|  1.67k|                        self.position.buffer_offset = self.data.len(); // EOF
  326|  1.67k|                        return Some(());
  327|  30.4k|                    }
  328|  30.4k|                    return None; // We need more data
  329|  22.9M|                }
  330|      0|            }
  331|  22.9M|            return Some(());
  332|       |        }
  333|  22.9M|    }
_RNvMs1_NtNtCs2uQIyP4qcLL_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  335|  22.9M|    fn skip_whitespaces(&mut self) -> Option<()> {
  336|  22.9M|        if self.is_line_jump_whitespace {
  337|  22.9M|            let mut i = self.position.buffer_offset;
  338|  25.0M|            while let Some(c) = self.data.get(i) {
  339|  22.6M|                match c {
  340|  1.62M|                    b' ' | b'\t' => {
  341|  1.62M|                        self.position.buffer_offset += 1;
  342|  1.62M|                        self.position.global_offset += 1;
  343|  1.62M|                    }
  344|       |                    b'\r' => {
  345|       |                        // We look for \n for Windows line end style
  346|  58.5k|                        let mut increment: u8 = 1;
  347|  58.5k|                        if let Some(c) = self.data.get(i + 1) {
  348|  43.7k|                            if *c == b'\n' {
  349|    300|                                increment += 1;
  350|    300|                                i += 1;
  351|  43.4k|                            }
  352|  14.7k|                        } else if !self.is_ending {
  353|  14.2k|                            return None; // We need to read more
  354|    569|                        }
  355|  44.2k|                        self.position.buffer_offset += usize::from(increment);
  356|  44.2k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  357|  44.2k|                        self.position.global_offset += u64::from(increment);
  358|  44.2k|                        self.position.global_line += 1;
  359|       |                    }
  360|   406k|                    b'\n' => {
  361|   406k|                        self.position.buffer_offset += 1;
  362|   406k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  363|   406k|                        self.position.global_offset += 1;
  364|   406k|                        self.position.global_line += 1;
  365|   406k|                    }
  366|  20.5M|                    _ => return Some(()),
  367|       |                }
  368|  2.07M|                i += 1;
  369|       |                // TODO: SIMD
  370|       |            }
  371|       |        } else {
  372|      0|            for c in &self.data[self.position.buffer_offset..] {
  373|      0|                if matches!(c, b' ' | b'\t') {
  374|      0|                    self.position.buffer_offset += 1;
  375|      0|                    self.position.global_offset += 1;
  376|      0|                } else {
  377|      0|                    return Some(());
  378|       |                }
  379|       |                // TODO: SIMD
  380|       |            }
  381|       |        }
  382|  2.42M|        Some(())
  383|  22.9M|    }
_RNvMs1_NtNtCs2uQIyP4qcLL_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE11shrink_dataB9_:
  385|  6.08M|    fn shrink_data(&mut self) {
  386|  6.08M|        if self.position.line_start_buffer_offset > 0 {
  387|  75.1k|            self.data
  388|  75.1k|                .copy_within(self.position.line_start_buffer_offset.., 0);
  389|  75.1k|            self.data
  390|  75.1k|                .truncate(self.data.len() - self.position.line_start_buffer_offset);
  391|  75.1k|            self.position.buffer_offset -= self.position.line_start_buffer_offset;
  392|  75.1k|            self.position.line_start_buffer_offset = 0;
  393|  75.1k|            self.previous_position = self.position;
  394|  6.00M|        }
  395|  6.08M|    }
_RNvMs1_NtNtCs2uQIyP4qcLL_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  397|  30.3M|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  398|  30.3M|        let mut num_of_jumps = 0;
  399|  30.3M|        let mut last_jump_pos = 0;
  400|  30.3M|        let mut previous_cr = 0;
  401|  30.3M|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  402|   145k|            if bytes[pos] == b'\r' {
  403|  22.3k|                previous_cr = pos;
  404|  22.3k|                num_of_jumps += 1;
  405|  22.3k|                last_jump_pos = pos + 1;
  406|  22.3k|            } else {
  407|   123k|                if previous_cr < pos - 1 {
  408|   112k|                    // We count \r\n as a single line jump
  409|   112k|                    num_of_jumps += 1;
  410|   112k|                }
  411|   123k|                last_jump_pos = pos + 1;
  412|       |            }
  413|       |        }
  414|  30.3M|        (num_of_jumps, last_jump_pos)
  415|  30.3M|    }
_RNvMs1_NtNtCs2uQIyP4qcLL_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17column_from_bytesB9_:
  417|  25.3M|    fn column_from_bytes(bytes: &[u8]) -> u64 {
  418|  25.3M|        match str::from_utf8(bytes) {
  419|  12.1M|            Ok(s) => u64::try_from(s.chars().count()).unwrap(),
  420|  13.1M|            Err(e) => {
  421|  13.1M|                if e.valid_up_to() == 0 {
  422|  3.15M|                    0
  423|       |                } else {
  424|  10.0M|                    Self::column_from_bytes(&bytes[..e.valid_up_to()])
  425|       |                }
  426|       |            }
  427|       |        }
  428|  25.3M|    }

_RINvMs_NtNtCs2uQIyP4qcLL_5oxttl7toolkit6parserINtB5_6ParserNtNtB9_5terse14TriGRecognizerE10parse_readRShECsgNaHgHERLlN_4trig:
  124|  17.0k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadIterator<R, RR> {
  125|  17.0k|        FromReadIterator { read, parser: self }
  126|  17.0k|    }
_RNvXs0_NtNtCs2uQIyP4qcLL_5oxttl7toolkit6parserINtB5_16FromReadIteratorRShNtNtB9_5terse14TriGRecognizerENtNtNtNtCslA8OvuvDMgt_4core4iter6traits8iterator8Iterator4nextCsgNaHgHERLlN_4trig:
  146|   362k|    fn next(&mut self) -> Option<Self::Item> {
  147|   411k|        while !self.parser.is_end() {
  148|   394k|            if let Some(result) = self.parser.read_next() {
  149|   345k|                return Some(result.map_err(ParseError::Syntax));
  150|  48.5k|            }
  151|  48.5k|            if let Err(e) = self.parser.lexer.extend_from_read(&mut self.read) {
  152|      0|                return Some(Err(e.into()));
  153|  48.5k|            }
  154|       |        }
  155|  17.0k|        None
  156|   362k|    }
_RNvXNtNtCs2uQIyP4qcLL_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCslA8OvuvDMgt_4core7convert4FromNtNtCs5pYOfYKUd9L_5alloc6string6StringE4fromB6_:
   39|  62.6k|    fn from(message: S) -> Self {
   40|  62.6k|        Self {
   41|  62.6k|            message: message.into(),
   42|  62.6k|        }
   43|  62.6k|    }
_RNvXNtNtCs2uQIyP4qcLL_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCslA8OvuvDMgt_4core7convert4FromReE4fromB6_:
   39|   807k|    fn from(message: S) -> Self {
   40|   807k|        Self {
   41|   807k|            message: message.into(),
   42|   807k|        }
   43|   807k|    }
_RNvMs_NtNtCs2uQIyP4qcLL_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE3newB8_:
   56|  68.2k|    pub fn new(lexer: Lexer<RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   57|  68.2k|        Self {
   58|  68.2k|            lexer,
   59|  68.2k|            state: Some(recognizer),
   60|  68.2k|            context,
   61|  68.2k|            results: vec![],
   62|  68.2k|            errors: vec![],
   63|  68.2k|        }
   64|  68.2k|    }
_RNvMs_NtNtCs2uQIyP4qcLL_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE17extend_from_sliceB8_:
   66|  6.03M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
   67|  6.03M|        self.lexer.extend_from_slice(other)
   68|  6.03M|    }
_RNvMs_NtNtCs2uQIyP4qcLL_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE3endB8_:
   71|  51.1k|    pub fn end(&mut self) {
   72|  51.1k|        self.lexer.end()
   73|  51.1k|    }
_RNvMs_NtNtCs2uQIyP4qcLL_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE6is_endB8_:
   76|   462k|    pub fn is_end(&self) -> bool {
   77|   462k|        self.state.is_none() && self.results.is_empty() && self.errors.is_empty()
   78|   462k|    }
_RNvMs_NtNtCs2uQIyP4qcLL_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE9read_nextB8_:
   80|  15.2M|    pub fn read_next(&mut self) -> Option<Result<RR::Output, SyntaxError>> {
   81|       |        loop {
   82|  25.2M|            if let Some(error) = self.errors.pop() {
   83|   869k|                return Some(Err(SyntaxError {
   84|   869k|                    location: self.lexer.last_token_location(),
   85|   869k|                    message: error
   86|   869k|                        .message
   87|   869k|                        .replace("TOKEN", &self.lexer.last_token_source()),
   88|   869k|                }));
   89|  24.3M|            }
   90|  24.3M|            if let Some(result) = self.results.pop() {
   91|  1.41M|                return Some(Ok(result));
   92|  22.9M|            }
   93|  22.9M|            if let Some(result) = self.lexer.read_next(RR::lexer_options(&self.context)) {
   94|  16.7M|                match result {
   95|  9.96M|                    Ok(token) => {
   96|  9.96M|                        self.state = self.state.take().map(|state| {
   97|       |                            state.recognize_next(
   98|       |                                token,
   99|       |                                &mut self.context,
  100|       |                                &mut self.results,
  101|       |                                &mut self.errors,
  102|       |                            )
  103|  9.96M|                        });
  104|  9.96M|                        continue;
  105|       |                    }
  106|  6.80M|                    Err(e) => {
  107|  6.80M|                        self.state = self.state.take().map(RR::error_recovery_state);
  108|  6.80M|                        return Some(Err(e));
  109|       |                    }
  110|       |                }
  111|  6.20M|            }
  112|  6.20M|            if self.lexer.is_end() {
  113|   136k|                self.state.take()?.recognize_end(
  114|  68.2k|                    &mut self.context,
  115|  68.2k|                    &mut self.results,
  116|  68.2k|                    &mut self.errors,
  117|  68.2k|                )
  118|       |            } else {
  119|  6.06M|                return None;
  120|       |            }
  121|       |        }
  122|  15.2M|    }
_RNCNvMs_NtNtCs2uQIyP4qcLL_5oxttl7toolkit6parserINtB6_6ParserNtNtBa_5terse14TriGRecognizerE9read_next0Ba_:
   96|  9.96M|                        self.state = self.state.take().map(|state| {
   97|  9.96M|                            state.recognize_next(
   98|  9.96M|                                token,
   99|  9.96M|                                &mut self.context,
  100|  9.96M|                                &mut self.results,
  101|  9.96M|                                &mut self.errors,
  102|  9.96M|                            )
  103|  9.96M|                        });

_RINvMNtCs2uQIyP4qcLL_5oxttl4trigNtB3_10TriGParser10parse_readRShECsgNaHgHERLlN_4trig:
  128|  17.0k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadTriGReader<R> {
  129|  17.0k|        FromReadTriGReader {
  130|  17.0k|            inner: self.parse().parser.parse_read(read),
  131|  17.0k|        }
  132|  17.0k|    }
_RINvMNtCs2uQIyP4qcLL_5oxttl4trigNtB3_10TriGParser13with_base_iriReECsgNaHgHERLlN_4trig:
   78|  51.1k|    pub fn with_base_iri(mut self, base_iri: impl Into<String>) -> Result<Self, IriParseError> {
   79|  51.1k|        self.base = Some(Iri::parse(base_iri.into())?);
   80|  51.1k|        Ok(self)
   81|  51.1k|    }
_RINvMs3_NtCs2uQIyP4qcLL_5oxttl4trigNtB6_14TriGSerializer11with_prefixNtNtCs5pYOfYKUd9L_5alloc6string6StringB15_ECsgNaHgHERLlN_4trig:
  619|  1.94k|    pub fn with_prefix(
  620|  1.94k|        mut self,
  621|  1.94k|        prefix_name: impl Into<String>,
  622|  1.94k|        prefix_iri: impl Into<String>,
  623|  1.94k|    ) -> Result<Self, IriParseError> {
  624|  1.94k|        self.prefixes.insert(
  625|  1.94k|            Iri::parse(prefix_iri.into())?.into_inner(),
  626|  1.94k|            prefix_name.into(),
  627|  1.94k|        );
  628|  1.94k|        Ok(self)
  629|  1.94k|    }
_RINvMs3_NtCs2uQIyP4qcLL_5oxttl4trigNtB6_14TriGSerializer18serialize_to_writeINtNtCs5pYOfYKUd9L_5alloc3vec3VechEECsgNaHgHERLlN_4trig:
  652|  17.0k|    pub fn serialize_to_write<W: Write>(self, write: W) -> ToWriteTriGWriter<W> {
  653|  17.0k|        ToWriteTriGWriter {
  654|  17.0k|            write,
  655|  17.0k|            writer: self.serialize(),
  656|  17.0k|        }
  657|  17.0k|    }
_RINvMs4_NtCs2uQIyP4qcLL_5oxttl4trigINtB6_17ToWriteTriGWriterINtNtCs5pYOfYKUd9L_5alloc3vec3VechEE10write_quadRNtNtCsgSruOWiD3Xy_5oxrdf6triple4QuadECsgNaHgHERLlN_4trig:
  762|   345k|    pub fn write_quad<'a>(&mut self, q: impl Into<QuadRef<'a>>) -> io::Result<()> {
  763|   345k|        self.writer.write_quad(q, &mut self.write)
  764|   345k|    }
_RINvMs5_NtCs2uQIyP4qcLL_5oxttl4trigNtB6_18LowLevelTriGWriter10write_quadRNtNtCsgSruOWiD3Xy_5oxrdf6triple4QuadQINtNtCs5pYOfYKUd9L_5alloc3vec3VechEECsgNaHgHERLlN_4trig:
  861|   345k|    pub fn write_quad<'a>(
  862|   345k|        &mut self,
  863|   345k|        q: impl Into<QuadRef<'a>>,
  864|   345k|        mut write: impl Write,
  865|   345k|    ) -> io::Result<()> {
  866|   345k|        if !self.prelude_written {
  867|  11.0k|            self.prelude_written = true;
  868|  12.8k|            for (prefix_iri, prefix_name) in &self.prefixes {
  869|  1.73k|                writeln!(write, "@prefix {prefix_name}: <{prefix_iri}> .")?;
  870|       |            }
  871|   334k|        }
  872|   345k|        let q = q.into();
  873|   345k|        if q.graph_name == self.current_graph_name.as_ref() {
  874|   322k|            if let Some((current_subject, current_predicate)) =
  875|   332k|                self.current_subject_predicate.take()
  876|       |            {
  877|   322k|                if q.subject == current_subject.as_ref() {
  878|  63.8k|                    if q.predicate == current_predicate {
  879|  32.3k|                        self.current_subject_predicate = Some((current_subject, current_predicate));
  880|  32.3k|                        write!(write, " , {}", self.term(q.object))
  881|       |                    } else {
  882|  31.4k|                        self.current_subject_predicate =
  883|  31.4k|                            Some((current_subject, q.predicate.into_owned()));
  884|  31.4k|                        writeln!(write, " ;")?;
  885|  31.4k|                        if !self.current_graph_name.is_default_graph() {
  886|  3.11k|                            write!(write, "\t")?;
  887|  28.3k|                        }
  888|  31.4k|                        write!(
  889|  31.4k|                            write,
  890|  31.4k|                            "\t{} {}",
  891|  31.4k|                            self.predicate(q.predicate),
  892|  31.4k|                            self.term(q.object)
  893|  31.4k|                        )
  894|       |                    }
  895|       |                } else {
  896|   258k|                    self.current_subject_predicate =
  897|   258k|                        Some((q.subject.into_owned(), q.predicate.into_owned()));
  898|   258k|                    writeln!(write, " .")?;
  899|   258k|                    if !self.current_graph_name.is_default_graph() {
  900|  44.3k|                        write!(write, "\t")?;
  901|   214k|                    }
  902|   258k|                    write!(
  903|   258k|                        write,
  904|   258k|                        "{} {} {}",
  905|   258k|                        self.term(q.subject),
  906|   258k|                        self.predicate(q.predicate),
  907|   258k|                        self.term(q.object)
  908|   258k|                    )
  909|       |                }
  910|       |            } else {
  911|  9.40k|                self.current_subject_predicate =
  912|  9.40k|                    Some((q.subject.into_owned(), q.predicate.into_owned()));
  913|  9.40k|                if !self.current_graph_name.is_default_graph() {
  914|      0|                    write!(write, "\t")?;
  915|  9.40k|                }
  916|  9.40k|                write!(
  917|  9.40k|                    write,
  918|  9.40k|                    "{} {} {}",
  919|  9.40k|                    self.term(q.subject),
  920|  9.40k|                    self.predicate(q.predicate),
  921|  9.40k|                    self.term(q.object)
  922|  9.40k|                )
  923|       |            }
  924|       |        } else {
  925|  13.3k|            if self.current_subject_predicate.is_some() {
  926|  11.6k|                writeln!(write, " .")?;
  927|  1.69k|            }
  928|  13.3k|            if !self.current_graph_name.is_default_graph() {
  929|  6.66k|                writeln!(write, "}}")?;
  930|  6.72k|            }
  931|  13.3k|            self.current_graph_name = q.graph_name.into_owned();
  932|  13.3k|            self.current_subject_predicate =
  933|  13.3k|                Some((q.subject.into_owned(), q.predicate.into_owned()));
  934|  13.3k|            match self.current_graph_name.as_ref() {
  935|  6.56k|                GraphNameRef::NamedNode(g) => {
  936|  6.56k|                    writeln!(write, "{} {{", self.term(g))?;
  937|  6.56k|                    write!(write, "\t")?;
  938|       |                }
  939|  1.95k|                GraphNameRef::BlankNode(g) => {
  940|  1.95k|                    writeln!(write, "{} {{", self.term(g))?;
  941|  1.95k|                    write!(write, "\t")?;
  942|       |                }
  943|  4.86k|                GraphNameRef::DefaultGraph => (),
  944|       |            }
  945|       |
  946|  13.3k|            write!(
  947|  13.3k|                write,
  948|  13.3k|                "{} {} {}",
  949|  13.3k|                self.term(q.subject),
  950|  13.3k|                self.predicate(q.predicate),
  951|  13.3k|                self.term(q.object)
  952|  13.3k|            )
  953|       |        }
  954|   345k|    }
_RINvMs5_NtCs2uQIyP4qcLL_5oxttl4trigNtB6_18LowLevelTriGWriter4termNtNtCsgSruOWiD3Xy_5oxrdf10blank_node12BlankNodeRefECsgNaHgHERLlN_4trig:
  963|  1.95k|    fn term<'a>(&'a self, term: impl Into<TermRef<'a>>) -> TurtleTerm<'a> {
  964|  1.95k|        TurtleTerm {
  965|  1.95k|            term: term.into(),
  966|  1.95k|            prefixes: &self.prefixes,
  967|  1.95k|        }
  968|  1.95k|    }
_RINvMs5_NtCs2uQIyP4qcLL_5oxttl4trigNtB6_18LowLevelTriGWriter4termNtNtCsgSruOWiD3Xy_5oxrdf10named_node12NamedNodeRefECsgNaHgHERLlN_4trig:
  963|  6.56k|    fn term<'a>(&'a self, term: impl Into<TermRef<'a>>) -> TurtleTerm<'a> {
  964|  6.56k|        TurtleTerm {
  965|  6.56k|            term: term.into(),
  966|  6.56k|            prefixes: &self.prefixes,
  967|  6.56k|        }
  968|  6.56k|    }
_RINvMs5_NtCs2uQIyP4qcLL_5oxttl4trigNtB6_18LowLevelTriGWriter4termNtNtCsgSruOWiD3Xy_5oxrdf6triple10SubjectRefECsgNaHgHERLlN_4trig:
  963|   281k|    fn term<'a>(&'a self, term: impl Into<TermRef<'a>>) -> TurtleTerm<'a> {
  964|   281k|        TurtleTerm {
  965|   281k|            term: term.into(),
  966|   281k|            prefixes: &self.prefixes,
  967|   281k|        }
  968|   281k|    }
_RINvMs5_NtCs2uQIyP4qcLL_5oxttl4trigNtB6_18LowLevelTriGWriter4termNtNtCsgSruOWiD3Xy_5oxrdf6triple7TermRefECsgNaHgHERLlN_4trig:
  963|   345k|    fn term<'a>(&'a self, term: impl Into<TermRef<'a>>) -> TurtleTerm<'a> {
  964|   345k|        TurtleTerm {
  965|   345k|            term: term.into(),
  966|   345k|            prefixes: &self.prefixes,
  967|   345k|        }
  968|   345k|    }
_RINvMs5_NtCs2uQIyP4qcLL_5oxttl4trigNtB6_18LowLevelTriGWriter6finishQINtNtCs5pYOfYKUd9L_5alloc3vec3VechEECsgNaHgHERLlN_4trig:
  971|  17.0k|    pub fn finish(&mut self, mut write: impl Write) -> io::Result<()> {
  972|  17.0k|        if self.current_subject_predicate.is_some() {
  973|  11.0k|            writeln!(write, " .")?;
  974|  5.96k|        }
  975|  17.0k|        if !self.current_graph_name.is_default_graph() {
  976|  1.86k|            writeln!(write, "}}")?;
  977|  15.1k|        }
  978|  17.0k|        Ok(())
  979|  17.0k|    }
_RINvMs5_NtCs2uQIyP4qcLL_5oxttl4trigNtB6_18LowLevelTriGWriter9predicateNtNtCsgSruOWiD3Xy_5oxrdf10named_node12NamedNodeRefECsgNaHgHERLlN_4trig:
  956|   313k|    fn predicate<'a>(&'a self, named_node: impl Into<NamedNodeRef<'a>>) -> TurtlePredicate<'a> {
  957|   313k|        TurtlePredicate {
  958|   313k|            named_node: named_node.into(),
  959|   313k|            prefixes: &self.prefixes,
  960|   313k|        }
  961|   313k|    }
_RNvMs4_NtCs2uQIyP4qcLL_5oxttl4trigINtB5_17ToWriteTriGWriterINtNtCs5pYOfYKUd9L_5alloc3vec3VechEE6finishCsgNaHgHERLlN_4trig:
  767|  17.0k|    pub fn finish(mut self) -> io::Result<W> {
  768|  17.0k|        self.writer.finish(&mut self.write)?;
  769|  17.0k|        Ok(self.write)
  770|  17.0k|    }
_RNvXs0_NtCs2uQIyP4qcLL_5oxttl4trigINtB5_18FromReadTriGReaderRShENtNtNtNtCslA8OvuvDMgt_4core4iter6traits8iterator8Iterator4nextCsgNaHgHERLlN_4trig:
  319|   362k|    fn next(&mut self) -> Option<Self::Item> {
  320|   362k|        self.inner.next()
  321|   362k|    }
_RNvMNtCs2uQIyP4qcLL_5oxttl4trigNtB2_10TriGParser19with_quoted_triplesCsgNaHgHERLlN_4trig:
   97|  68.2k|    pub fn with_quoted_triples(mut self) -> Self {
   98|  68.2k|        self.with_quoted_triples = true;
   99|  68.2k|        self
  100|  68.2k|    }
_RNvMNtCs2uQIyP4qcLL_5oxttl4trigNtB2_10TriGParser3newCsgNaHgHERLlN_4trig:
   62|  68.2k|    pub fn new() -> Self {
   63|  68.2k|        Self::default()
   64|  68.2k|    }
_RNvMNtCs2uQIyP4qcLL_5oxttl4trigNtB2_10TriGParser9uncheckedCsgNaHgHERLlN_4trig:
   72|  17.0k|    pub fn unchecked(mut self) -> Self {
   73|  17.0k|        self.unchecked = true;
   74|  17.0k|        self
   75|  17.0k|    }
_RNvMs3_NtCs2uQIyP4qcLL_5oxttl4trigNtB5_14TriGSerializer3newCsgNaHgHERLlN_4trig:
  612|  17.0k|    pub fn new() -> Self {
  613|  17.0k|        Self {
  614|  17.0k|            prefixes: BTreeMap::new(),
  615|  17.0k|        }
  616|  17.0k|    }
_RNvXs2_NtCs2uQIyP4qcLL_5oxttl4trigNtB5_16TriGPrefixesIterNtNtNtNtCslA8OvuvDMgt_4core4iter6traits8iterator8Iterator4nextCsgNaHgHERLlN_4trig:
  569|  57.0k|    fn next(&mut self) -> Option<Self::Item> {
  570|  57.0k|        let (key, value) = self.inner.next()?;
  571|  5.88k|        Some((key.as_str(), value.as_str()))
  572|  57.0k|    }
_RNvXs2_NtCs2uQIyP4qcLL_5oxttl4trigNtB5_16TriGPrefixesIterNtNtNtNtCslA8OvuvDMgt_4core4iter6traits8iterator8Iterator9size_hintCsgNaHgHERLlN_4trig:
  575|  5.88k|    fn size_hint(&self) -> (usize, Option<usize>) {
  576|  5.88k|        self.inner.size_hint()
  577|  5.88k|    }
_RNvMNtCs2uQIyP4qcLL_5oxttl4trigNtB2_10TriGParser5parse:
  212|  68.2k|    pub fn parse(self) -> LowLevelTriGReader {
  213|  68.2k|        LowLevelTriGReader {
  214|  68.2k|            parser: TriGRecognizer::new_parser(
  215|  68.2k|                true,
  216|  68.2k|                #[cfg(feature = "rdf-star")]
  217|  68.2k|                self.with_quoted_triples,
  218|  68.2k|                self.unchecked,
  219|  68.2k|                self.base,
  220|  68.2k|                self.prefixes,
  221|  68.2k|            ),
  222|  68.2k|        }
  223|  68.2k|    }
_RNvMs1_NtCs2uQIyP4qcLL_5oxttl4trigNtB5_18LowLevelTriGReader17extend_from_slice:
  475|  6.03M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  476|  6.03M|        self.parser.extend_from_slice(other)
  477|  6.03M|    }
_RNvMs1_NtCs2uQIyP4qcLL_5oxttl4trigNtB5_18LowLevelTriGReader3end:
  482|  51.1k|    pub fn end(&mut self) {
  483|  51.1k|        self.parser.end()
  484|  51.1k|    }
_RNvMs1_NtCs2uQIyP4qcLL_5oxttl4trigNtB5_18LowLevelTriGReader6is_end:
  487|  51.1k|    pub fn is_end(&self) -> bool {
  488|  51.1k|        self.parser.is_end()
  489|  51.1k|    }
_RNvMs1_NtCs2uQIyP4qcLL_5oxttl4trigNtB5_18LowLevelTriGReader9read_next:
  495|  14.8M|    pub fn read_next(&mut self) -> Option<Result<Quad, SyntaxError>> {
  496|  14.8M|        self.parser.read_next()
  497|  14.8M|    }
_RNvMs1_NtCs2uQIyP4qcLL_5oxttl4trigNtB5_18LowLevelTriGReader8prefixes:
  524|  51.1k|    pub fn prefixes(&self) -> TriGPrefixesIter<'_> {
  525|  51.1k|        TriGPrefixesIter {
  526|  51.1k|            inner: self.parser.context.prefixes(),
  527|  51.1k|        }
  528|  51.1k|    }
_RNvMs3_NtCs2uQIyP4qcLL_5oxttl4trigNtB5_14TriGSerializer9serialize:
  723|  17.0k|    pub fn serialize(self) -> LowLevelTriGWriter {
  724|  17.0k|        LowLevelTriGWriter {
  725|  17.0k|            prefixes: self.prefixes,
  726|  17.0k|            prelude_written: false,
  727|  17.0k|            current_graph_name: GraphName::DefaultGraph,
  728|  17.0k|            current_subject_predicate: None,
  729|  17.0k|        }
  730|  17.0k|    }
_RNvXs6_NtCs2uQIyP4qcLL_5oxttl4trigNtB5_15TurtlePredicateNtNtCslA8OvuvDMgt_4core3fmt7Display3fmt:
  988|   313k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  989|   313k|        if self.named_node == rdf::TYPE {
  990|  2.94k|            write!(f, "a")
  991|       |        } else {
  992|   310k|            TurtleTerm {
  993|   310k|                term: self.named_node.into(),
  994|   310k|                prefixes: self.prefixes,
  995|   310k|            }
  996|   310k|            .fmt(f)
  997|       |        }
  998|   313k|    }
_RNvXs7_NtCs2uQIyP4qcLL_5oxttl4trigNtB5_10TurtleTermNtNtCslA8OvuvDMgt_4core3fmt7Display3fmt:
 1007|  1.32M|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1008|  1.32M|        match self.term {
 1009|   593k|            TermRef::NamedNode(v) => {
 1010|   656k|                for (prefix_iri, prefix_name) in self.prefixes {
 1011|  93.3k|                    if let Some(local_name) = v.as_str().strip_prefix(prefix_iri) {
 1012|  53.0k|                        if let Some(escaped_local_name) = escape_local_name(local_name) {
 1013|  30.0k|                            return write!(f, "{prefix_name}:{escaped_local_name}");
 1014|  23.0k|                        }
 1015|  40.2k|                    }
 1016|       |                }
 1017|   563k|                write!(f, "{v}")
 1018|       |            }
 1019|   316k|            TermRef::BlankNode(v) => write!(f, "{v}"),
 1020|   286k|            TermRef::Literal(v) => {
 1021|   286k|                let value = v.value();
 1022|   286k|                let inline = match v.datatype() {
 1023|   286k|                    xsd::BOOLEAN => is_turtle_boolean(value),
 1024|   286k|                    xsd::INTEGER => is_turtle_integer(value),
 1025|   208k|                    xsd::DECIMAL => is_turtle_decimal(value),
 1026|   204k|                    xsd::DOUBLE => is_turtle_double(value),
 1027|  11.0k|                    _ => false,
 1028|       |                };
 1029|   286k|                if inline {
 1030|   275k|                    write!(f, "{value}")
 1031|  11.0k|                } else if v.is_plain() {
 1032|  10.3k|                    write!(f, "{v}")
 1033|       |                } else {
 1034|    707|                    write!(
 1035|    707|                        f,
 1036|    707|                        "{}^^{}",
 1037|    707|                        LiteralRef::new_simple_literal(v.value()),
 1038|    707|                        TurtleTerm {
 1039|    707|                            term: v.datatype().into(),
 1040|    707|                            prefixes: self.prefixes
 1041|    707|                        }
 1042|    707|                    )
 1043|       |                }
 1044|       |            }
 1045|       |            #[cfg(feature = "rdf-star")]
 1046|   124k|            TermRef::Triple(t) => {
 1047|   124k|                write!(
 1048|   124k|                    f,
 1049|   124k|                    "<< {} {} {} >>",
 1050|   124k|                    TurtleTerm {
 1051|   124k|                        term: t.subject.as_ref().into(),
 1052|   124k|                        prefixes: self.prefixes
 1053|   124k|                    },
 1054|   124k|                    TurtleTerm {
 1055|   124k|                        term: t.predicate.as_ref().into(),
 1056|   124k|                        prefixes: self.prefixes
 1057|   124k|                    },
 1058|   124k|                    TurtleTerm {
 1059|   124k|                        term: t.object.as_ref(),
 1060|   124k|                        prefixes: self.prefixes
 1061|   124k|                    }
 1062|   124k|                )
 1063|       |            }
 1064|       |        }
 1065|  1.32M|    }
_RNvNtCs2uQIyP4qcLL_5oxttl4trig17is_turtle_boolean:
 1068|    254|fn is_turtle_boolean(value: &str) -> bool {
 1069|    254|    matches!(value, "true" | "false")
 1070|    254|}
_RNvNtCs2uQIyP4qcLL_5oxttl4trig17is_turtle_integer:
 1072|  77.7k|fn is_turtle_integer(value: &str) -> bool {
 1073|  77.7k|    // [19]  INTEGER  ::=  [+-]? [0-9]+
 1074|  77.7k|    let mut value = value.as_bytes();
 1075|  77.7k|    if let Some(v) = value.strip_prefix(b"+") {
 1076|  5.30k|        value = v;
 1077|  72.4k|    } else if let Some(v) = value.strip_prefix(b"-") {
 1078|     28|        value = v;
 1079|  72.4k|    }
 1080|  77.7k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
 1081|  77.7k|}
_RNvNtCs2uQIyP4qcLL_5oxttl4trig17is_turtle_decimal:
 1083|  3.48k|fn is_turtle_decimal(value: &str) -> bool {
 1084|  3.48k|    // [20]  DECIMAL  ::=  [+-]? [0-9]* '.' [0-9]+
 1085|  3.48k|    let mut value = value.as_bytes();
 1086|  3.48k|    if let Some(v) = value.strip_prefix(b"+") {
 1087|     71|        value = v;
 1088|  3.41k|    } else if let Some(v) = value.strip_prefix(b"-") {
 1089|    111|        value = v;
 1090|  3.30k|    }
 1091|  6.71k|    while value.first().map_or(false, u8::is_ascii_digit) {
 1092|  3.22k|        value = &value[1..];
 1093|  3.22k|    }
 1094|  3.48k|    let Some(value) = value.strip_prefix(b".") else {
 1095|      0|        return false;
 1096|       |    };
 1097|  3.48k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
 1098|  3.48k|}
_RNvNtCs2uQIyP4qcLL_5oxttl4trig16is_turtle_double:
 1100|   193k|fn is_turtle_double(value: &str) -> bool {
 1101|   193k|    // [21]    DOUBLE    ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
 1102|   193k|    // [154s]  EXPONENT  ::=  [eE] [+-]? [0-9]+
 1103|   193k|    let mut value = value.as_bytes();
 1104|   193k|    if let Some(v) = value.strip_prefix(b"+") {
 1105|    148|        value = v;
 1106|   193k|    } else if let Some(v) = value.strip_prefix(b"-") {
 1107|    628|        value = v;
 1108|   193k|    }
 1109|   193k|    let mut with_before = false;
 1110|   750k|    while value.first().map_or(false, u8::is_ascii_digit) {
 1111|   556k|        value = &value[1..];
 1112|   556k|        with_before = true;
 1113|   556k|    }
 1114|   193k|    let mut with_after = false;
 1115|   193k|    if let Some(v) = value.strip_prefix(b".") {
 1116|  1.05k|        value = v;
 1117|  10.8k|        while value.first().map_or(false, u8::is_ascii_digit) {
 1118|  9.76k|            value = &value[1..];
 1119|  9.76k|            with_after = true;
 1120|  9.76k|        }
 1121|   192k|    }
 1122|   193k|    if let Some(v) = value.strip_prefix(b"e") {
 1123|    449|        value = v;
 1124|   193k|    } else if let Some(v) = value.strip_prefix(b"E") {
 1125|   193k|        value = v;
 1126|   193k|    } else {
 1127|      0|        return false;
 1128|       |    }
 1129|   193k|    if let Some(v) = value.strip_prefix(b"+") {
 1130|    185|        value = v;
 1131|   193k|    } else if let Some(v) = value.strip_prefix(b"-") {
 1132|     89|        value = v;
 1133|   193k|    }
 1134|   193k|    (with_before || with_after) && !value.is_empty() && value.iter().all(u8::is_ascii_digit)
 1135|   193k|}
_RNvNtCs2uQIyP4qcLL_5oxttl4trig17escape_local_name:
 1137|  53.0k|fn escape_local_name(value: &str) -> Option<String> {
 1138|  53.0k|    // TODO: PLX
 1139|  53.0k|    // [168s] 	PN_LOCAL 	::= 	(PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
 1140|  53.0k|    let mut output = String::with_capacity(value.len());
 1141|  53.0k|    let mut chars = value.chars();
 1142|  53.0k|    let first = chars.next()?;
 1143|  30.3k|    if N3Lexer::is_possible_pn_chars_u(first) || first == ':' || first.is_ascii_digit() {
 1144|  8.15k|        output.push(first);
 1145|  22.1k|    } else if can_be_escaped_in_local_name(first) {
 1146|  22.1k|        output.push('\\');
 1147|  22.1k|        output.push(first);
 1148|  22.1k|    } else {
 1149|      0|        return None;
 1150|       |    }
 1151|       |
 1152|   192k|    while let Some(c) = chars.next() {
 1153|   162k|        if N3Lexer::is_possible_pn_chars(c) || c == ':' || (c == '.' && !chars.as_str().is_empty())
 1154|  79.2k|        {
 1155|  79.2k|            output.push(c);
 1156|  82.7k|        } else if can_be_escaped_in_local_name(c) {
 1157|  82.5k|            output.push('\\');
 1158|  82.5k|            output.push(c);
 1159|  82.5k|        } else {
 1160|    263|            return None;
 1161|       |        }
 1162|       |    }
 1163|       |
 1164|  30.0k|    Some(output)
 1165|  53.0k|}
_RNvNtCs2uQIyP4qcLL_5oxttl4trig28can_be_escaped_in_local_name:
 1167|   104k|fn can_be_escaped_in_local_name(c: char) -> bool {
 1168|    263|    matches!(
 1169|   104k|        c,
 1170|       |        '_' | '~'
 1171|       |            | '.'
 1172|       |            | '-'
 1173|       |            | '!'
 1174|       |            | '$'
 1175|       |            | '&'
 1176|       |            | '\''
 1177|       |            | '('
 1178|       |            | ')'
 1179|       |            | '*'
 1180|       |            | '+'
 1181|       |            | ','
 1182|       |            | ';'
 1183|       |            | '='
 1184|       |            | '/'
 1185|       |            | '?'
 1186|       |            | '#'
 1187|       |            | '@'
 1188|       |            | '%'
 1189|       |    )
 1190|   104k|}


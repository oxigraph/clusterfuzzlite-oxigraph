_RINvMNtCs3FiEWhjgm6A_9getrandom4lazyNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   34|    195|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   35|    195|        // Relaxed ordering is fine, as we only have a single atomic variable.
   36|    195|        let mut val = self.0.load(Relaxed);
   37|    195|        if val == Self::UNINIT {
   38|      1|            val = init();
   39|      1|            self.0.store(val, Relaxed);
   40|    194|        }
   41|    195|        val
   42|    195|    }
_RINvMs_NtCs3FiEWhjgm6A_9getrandom4lazyNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   53|    195|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   54|    195|        self.0.unsync_init(|| init() as usize) != 0
   55|    195|    }
_RNCINvMs_NtCs3FiEWhjgm6A_9getrandom4lazyNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   54|      1|        self.0.unsync_init(|| init() as usize) != 0

_RNvCs3FiEWhjgm6A_9getrandom16getrandom_uninitCslvYPMEMaoR_9rand_core:
  345|    195|pub fn getrandom_uninit(dest: &mut [MaybeUninit<u8>]) -> Result<&mut [u8], Error> {
  346|    195|    if !dest.is_empty() {
  347|    195|        imp::getrandom_inner(dest)?;
  348|      0|    }
  349|       |    // SAFETY: `dest` has been fully initialized by `imp::getrandom_inner`
  350|       |    // since it returned `Ok`.
  351|    195|    Ok(unsafe { slice_assume_init_mut(dest) })
  352|    195|}
_RNvCs3FiEWhjgm6A_9getrandom9getrandomCslvYPMEMaoR_9rand_core:
  315|    195|pub fn getrandom(dest: &mut [u8]) -> Result<(), Error> {
  316|    195|    // SAFETY: The `&mut MaybeUninit<_>` reference doesn't escape, and
  317|    195|    // `getrandom_uninit` guarantees it will never de-initialize any part of
  318|    195|    // `dest`.
  319|    195|    getrandom_uninit(unsafe { slice_as_uninit_mut(dest) })?;
  320|    195|    Ok(())
  321|    195|}

_RNvNtCs3FiEWhjgm6A_9getrandom3imp15getrandom_inner:
    9|    195|pub fn getrandom_inner(dest: &mut [MaybeUninit<u8>]) -> Result<(), Error> {
   10|    195|    // getrandom(2) was introduced in Linux 3.17
   11|    195|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   12|    195|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   13|    195|        sys_fill_exact(dest, |buf| unsafe {
   14|       |            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   15|    195|        })
   16|       |    } else {
   17|      0|        use_file::getrandom_inner(dest)
   18|       |    }
   19|    195|}
_RNCNvNtCs3FiEWhjgm6A_9getrandom3imp15getrandom_inner0B5_:
   13|    195|        sys_fill_exact(dest, |buf| unsafe {
   14|    195|            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   15|    195|        })
_RNvNtCs3FiEWhjgm6A_9getrandom3imp22is_getrandom_available:
   21|      1|fn is_getrandom_available() -> bool {
   22|      1|    let res = unsafe { getrandom(core::ptr::null_mut(), 0, libc::GRND_NONBLOCK) };
   23|      1|    if res < 0 {
   24|      0|        match last_os_error().raw_os_error() {
   25|      0|            Some(libc::ENOSYS) => false, // No kernel support
   26|      0|            Some(libc::EPERM) => false,  // Blocked by seccomp
   27|      0|            _ => true,
   28|       |        }
   29|       |    } else {
   30|      1|        true
   31|       |    }
   32|      1|}
_RNvNtCs3FiEWhjgm6A_9getrandom3imp9getrandom:
   34|    196|unsafe fn getrandom(
   35|    196|    buf: *mut libc::c_void,
   36|    196|    buflen: libc::size_t,
   37|    196|    flags: libc::c_uint,
   38|    196|) -> libc::ssize_t {
   39|    196|    libc::syscall(libc::SYS_getrandom, buf, buflen, flags) as libc::ssize_t
   40|    196|}

_RINvNtCs3FiEWhjgm6A_9getrandom4util19slice_as_uninit_muthECslvYPMEMaoR_9rand_core:
   32|    195|pub unsafe fn slice_as_uninit_mut<T>(slice: &mut [T]) -> &mut [MaybeUninit<T>] {
   33|    195|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   34|    195|    &mut *(slice as *mut [T] as *mut [MaybeUninit<T>])
   35|    195|}
_RINvNtCs3FiEWhjgm6A_9getrandom4util21slice_assume_init_muthECslvYPMEMaoR_9rand_core:
    8|    195|pub unsafe fn slice_assume_init_mut<T>(slice: &mut [MaybeUninit<T>]) -> &mut [T] {
    9|    195|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   10|    195|    &mut *(slice as *mut [MaybeUninit<T>] as *mut [T])
   11|    195|}

_RINvNtCs3FiEWhjgm6A_9getrandom9util_libc14sys_fill_exactNCNvNtB4_3imp15getrandom_inner0EB4_:
   59|    195|pub fn sys_fill_exact(
   60|    195|    mut buf: &mut [MaybeUninit<u8>],
   61|    195|    sys_fill: impl Fn(&mut [MaybeUninit<u8>]) -> libc::ssize_t,
   62|    195|) -> Result<(), Error> {
   63|    390|    while !buf.is_empty() {
   64|    195|        let res = sys_fill(buf);
   65|    195|        match res {
   66|    195|            res if res > 0 => buf = buf.get_mut(res as usize..).ok_or(Error::UNEXPECTED)?,
   67|       |            -1 => {
   68|      0|                let err = last_os_error();
   69|      0|                // We should try again if the call was interrupted.
   70|      0|                if err.raw_os_error() != Some(libc::EINTR) {
   71|      0|                    return Err(err);
   72|      0|                }
   73|       |            }
   74|       |            // Negative return codes not equal to -1 should be impossible.
   75|       |            // EOF (ret = 0) should be impossible, as the data we are reading
   76|       |            // should be an infinite stream of random bytes.
   77|      0|            _ => return Err(Error::UNEXPECTED),
   78|       |        }
   79|       |    }
   80|    195|    Ok(())
   81|    195|}

rust_fuzzer_test_input:
  209|  10.7k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  10.7k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  10.7k|                }
  223|  10.7k|
  224|  10.7k|                __libfuzzer_sys_run(bytes);
  225|  10.7k|                0
  226|       |            }
_RNvNvCsapuUTB8XoUj_4trig1__19___libfuzzer_sys_run:
  241|  10.7k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|       |            }
LLVMFuzzerTestOneInput:
   58|  10.7k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  10.7k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  10.7k|    });
   63|  10.7k|
   64|  10.7k|    match test_input {
   65|  10.7k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  10.7k|}
_RNCNvCs4FJq8jLh9xR_13libfuzzer_sys15test_input_wrap0B3_:
   59|  10.7k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  10.7k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  10.7k|        rust_fuzzer_test_input(data_slice)
   62|  10.7k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvMs3_NtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCs433v4DNuM1R_4core4iter6traits8iterator8Iterator4next0ECseXCYVcIQZ7o_5oxttl:
 1044|  15.8M|    pub(crate) unsafe fn next(
 1045|  15.8M|        &mut self,
 1046|  15.8M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  15.8M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  15.8M|        let found = find_raw(self.start, self.end)?;
 1057|  68.0k|        let result = found.distance(self.original_start);
 1058|  68.0k|        self.start = found.add(1);
 1059|  68.0k|        Some(result)
 1060|  15.8M|    }
_RINvNtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECseXCYVcIQZ7o_5oxttl:
 1125|  24.7k|pub(crate) unsafe fn search_slice_with_raw(
 1126|  24.7k|    haystack: &[u8],
 1127|  24.7k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  24.7k|) -> Option<usize> {
 1129|  24.7k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  24.7k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  24.7k|    // a &[u8].
 1132|  24.7k|    let start = haystack.as_ptr();
 1133|  24.7k|    let end = start.add(haystack.len());
 1134|  24.7k|    let found = find_raw(start, end)?;
 1135|  8.70k|    Some(found.distance(start))
 1136|  24.7k|}
_RINvNtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr7memchr20ECseXCYVcIQZ7o_5oxttl:
 1125|  2.08M|pub(crate) unsafe fn search_slice_with_raw(
 1126|  2.08M|    haystack: &[u8],
 1127|  2.08M|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  2.08M|) -> Option<usize> {
 1129|  2.08M|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  2.08M|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  2.08M|    // a &[u8].
 1132|  2.08M|    let start = haystack.as_ptr();
 1133|  2.08M|    let end = start.add(haystack.len());
 1134|  2.08M|    let found = find_raw(start, end)?;
 1135|  1.54M|    Some(found.distance(start))
 1136|  2.08M|}
_RNvMs3_NtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  15.7M|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  15.7M|        Iter {
 1029|  15.7M|            original_start: haystack.as_ptr(),
 1030|  15.7M|            start: haystack.as_ptr(),
 1031|  15.7M|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  15.7M|            haystack: core::marker::PhantomData,
 1033|  15.7M|        }
 1034|  15.7M|    }
_RNvMNtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs433v4DNuM1R_4core9core_arch3x867___m128iE7needle1B8_:
  117|  33.3k|    pub(crate) fn needle1(&self) -> u8 {
  118|  33.3k|        self.s1
  119|  33.3k|    }
_RNvMNtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs433v4DNuM1R_4core9core_arch3x867___m128iE3newB8_:
  111|  24.7k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  24.7k|        One { s1: needle, v1: V::splat(needle) }
  113|  24.7k|    }
_RNvMNtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs433v4DNuM1R_4core9core_arch3x867___m256iE3newB8_:
  111|  24.7k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  24.7k|        One { s1: needle, v1: V::splat(needle) }
  113|  24.7k|    }
_RNvMNtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs433v4DNuM1R_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  3.51k|    pub(crate) unsafe fn find_raw(
  144|  3.51k|        &self,
  145|  3.51k|        start: *const u8,
  146|  3.51k|        end: *const u8,
  147|  3.51k|    ) -> Option<*const u8> {
  148|  3.51k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  3.51k|        // need to move up to using a u64 for the masks used below. Currently
  150|  3.51k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  3.51k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  3.51k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  3.51k|        let topos = V::Mask::first_offset;
  155|  3.51k|        let len = end.distance(start);
  156|  3.51k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  3.51k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|    178|            return Some(cur);
  167|  3.34k|        }
  168|  3.34k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  3.34k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  3.34k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  3.34k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  3.34k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  4.37k|        while cur <= end.sub(V::BYTES) {
  213|  1.12k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  1.12k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|     91|                return Some(cur);
  216|  1.03k|            }
  217|  1.03k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  3.25k|        if cur < end {
  224|  2.94k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  2.94k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  2.94k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  2.94k|            return self.search_chunk(cur, topos);
  228|    306|        }
  229|    306|        None
  230|  3.51k|    }
_RNvMNtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs433v4DNuM1R_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  14.8k|    pub(crate) unsafe fn find_raw(
  144|  14.8k|        &self,
  145|  14.8k|        start: *const u8,
  146|  14.8k|        end: *const u8,
  147|  14.8k|    ) -> Option<*const u8> {
  148|  14.8k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  14.8k|        // need to move up to using a u64 for the masks used below. Currently
  150|  14.8k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  14.8k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  14.8k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  14.8k|        let topos = V::Mask::first_offset;
  155|  14.8k|        let len = end.distance(start);
  156|  14.8k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  14.8k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  7.38k|            return Some(cur);
  167|  7.43k|        }
  168|  7.43k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  7.43k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  7.43k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  7.43k|        if len >= Self::LOOP_SIZE {
  172|  5.64k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|  2.97k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|  2.97k|                let a = V::load_aligned(cur);
  176|  2.97k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|  2.97k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|  2.97k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|  2.97k|                let eqa = self.v1.cmpeq(a);
  180|  2.97k|                let eqb = self.v1.cmpeq(b);
  181|  2.97k|                let eqc = self.v1.cmpeq(c);
  182|  2.97k|                let eqd = self.v1.cmpeq(d);
  183|  2.97k|                let or1 = eqa.or(eqb);
  184|  2.97k|                let or2 = eqc.or(eqd);
  185|  2.97k|                let or3 = or1.or(or2);
  186|  2.97k|                if or3.movemask_will_have_non_zero() {
  187|    448|                    let mask = eqa.movemask();
  188|    448|                    if mask.has_non_zero() {
  189|    148|                        return Some(cur.add(topos(mask)));
  190|    300|                    }
  191|    300|
  192|    300|                    let mask = eqb.movemask();
  193|    300|                    if mask.has_non_zero() {
  194|    142|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|    158|                    }
  196|    158|
  197|    158|                    let mask = eqc.movemask();
  198|    158|                    if mask.has_non_zero() {
  199|     58|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|    100|                    }
  201|    100|
  202|    100|                    let mask = eqd.movemask();
  203|    100|                    debug_assert!(mask.has_non_zero());
  204|    100|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  2.52k|                }
  206|  2.52k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  4.30k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  15.1k|        while cur <= end.sub(V::BYTES) {
  213|  8.30k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  8.30k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    117|                return Some(cur);
  216|  8.18k|            }
  217|  8.18k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  6.86k|        if cur < end {
  224|  6.51k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  6.51k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  6.51k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  6.51k|            return self.search_chunk(cur, topos);
  228|    350|        }
  229|    350|        None
  230|  14.8k|    }
_RINvMNtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCs433v4DNuM1R_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  7.59k|    unsafe fn search_chunk(
  417|  7.59k|        &self,
  418|  7.59k|        cur: *const u8,
  419|  7.59k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  7.59k|    ) -> Option<*const u8> {
  421|  7.59k|        let chunk = V::load_unaligned(cur);
  422|  7.59k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  7.59k|        if mask.has_non_zero() {
  424|    336|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  7.25k|            None
  427|       |        }
  428|  7.59k|    }
_RINvMNtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCs433v4DNuM1R_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  29.6k|    unsafe fn search_chunk(
  417|  29.6k|        &self,
  418|  29.6k|        cur: *const u8,
  419|  29.6k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  29.6k|    ) -> Option<*const u8> {
  421|  29.6k|        let chunk = V::load_unaligned(cur);
  422|  29.6k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  29.6k|        if mask.has_non_zero() {
  424|  7.69k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  21.9k|            None
  427|       |        }
  428|  29.6k|    }
_RNvMs_NtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs433v4DNuM1R_4core9core_arch3x867___m128iE3newBa_:
  450|  17.8M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  17.8M|        Two {
  452|  17.8M|            s1: needle1,
  453|  17.8M|            s2: needle2,
  454|  17.8M|            v1: V::splat(needle1),
  455|  17.8M|            v2: V::splat(needle2),
  456|  17.8M|        }
  457|  17.8M|    }
_RNvMs_NtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs433v4DNuM1R_4core9core_arch3x867___m256iE3newBa_:
  450|  17.8M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  17.8M|        Two {
  452|  17.8M|            s1: needle1,
  453|  17.8M|            s2: needle2,
  454|  17.8M|            v1: V::splat(needle1),
  455|  17.8M|            v2: V::splat(needle2),
  456|  17.8M|        }
  457|  17.8M|    }
_RNvMs_NtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs433v4DNuM1R_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  24.6M|    pub(crate) fn needle1(&self) -> u8 {
  462|  24.6M|        self.s1
  463|  24.6M|    }
_RNvMs_NtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs433v4DNuM1R_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  24.4M|    pub(crate) fn needle2(&self) -> u8 {
  468|  24.4M|        self.s2
  469|  24.4M|    }
_RNvMs_NtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs433v4DNuM1R_4core9core_arch3x867___m128iE8find_rawBa_:
  493|   592k|    pub(crate) unsafe fn find_raw(
  494|   592k|        &self,
  495|   592k|        start: *const u8,
  496|   592k|        end: *const u8,
  497|   592k|    ) -> Option<*const u8> {
  498|   592k|        // If we want to support vectors bigger than 256 bits, we probably
  499|   592k|        // need to move up to using a u64 for the masks used below. Currently
  500|   592k|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|   592k|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|   592k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   592k|        let topos = V::Mask::first_offset;
  505|   592k|        let len = end.distance(start);
  506|   592k|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   592k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   125k|            return Some(cur);
  517|   467k|        }
  518|   467k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   467k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|   467k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   467k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   467k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   638k|        while cur <= end.sub(V::BYTES) {
  551|   181k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   181k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  11.0k|                return Some(cur);
  554|   170k|            }
  555|   170k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   456k|        if cur < end {
  562|   429k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   429k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|   429k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   429k|            return self.search_chunk(cur, topos);
  566|  27.3k|        }
  567|  27.3k|        None
  568|   592k|    }
_RNvMs_NtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs433v4DNuM1R_4core9core_arch3x867___m256iE8find_rawBa_:
  493|  1.84M|    pub(crate) unsafe fn find_raw(
  494|  1.84M|        &self,
  495|  1.84M|        start: *const u8,
  496|  1.84M|        end: *const u8,
  497|  1.84M|    ) -> Option<*const u8> {
  498|  1.84M|        // If we want to support vectors bigger than 256 bits, we probably
  499|  1.84M|        // need to move up to using a u64 for the masks used below. Currently
  500|  1.84M|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|  1.84M|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|  1.84M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  1.84M|        let topos = V::Mask::first_offset;
  505|  1.84M|        let len = end.distance(start);
  506|  1.84M|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  1.84M|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  1.09M|            return Some(cur);
  517|   748k|        }
  518|   748k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   748k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|   748k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   748k|        if len >= Self::LOOP_SIZE {
  522|   553k|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|   435k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|   435k|                let a = V::load_aligned(cur);
  526|   435k|                let b = V::load_aligned(cur.add(V::BYTES));
  527|   435k|                let eqa1 = self.v1.cmpeq(a);
  528|   435k|                let eqb1 = self.v1.cmpeq(b);
  529|   435k|                let eqa2 = self.v2.cmpeq(a);
  530|   435k|                let eqb2 = self.v2.cmpeq(b);
  531|   435k|                let or1 = eqa1.or(eqb1);
  532|   435k|                let or2 = eqa2.or(eqb2);
  533|   435k|                let or3 = or1.or(or2);
  534|   435k|                if or3.movemask_will_have_non_zero() {
  535|   159k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|   159k|                    if mask.has_non_zero() {
  537|  82.2k|                        return Some(cur.add(topos(mask)));
  538|  76.8k|                    }
  539|  76.8k|
  540|  76.8k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|  76.8k|                    debug_assert!(mask.has_non_zero());
  542|  76.8k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|   276k|                }
  544|   276k|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   471k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   783k|        while cur <= end.sub(V::BYTES) {
  551|   201k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   201k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  7.57k|                return Some(cur);
  554|   193k|            }
  555|   193k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   581k|        if cur < end {
  562|   563k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   563k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|   563k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   563k|            return self.search_chunk(cur, topos);
  566|  18.4k|        }
  567|  18.4k|        None
  568|  1.84M|    }
_RINvMs_NtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCs433v4DNuM1R_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  1.20M|    unsafe fn search_chunk(
  671|  1.20M|        &self,
  672|  1.20M|        cur: *const u8,
  673|  1.20M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  1.20M|    ) -> Option<*const u8> {
  675|  1.20M|        let chunk = V::load_unaligned(cur);
  676|  1.20M|        let eq1 = self.v1.cmpeq(chunk);
  677|  1.20M|        let eq2 = self.v2.cmpeq(chunk);
  678|  1.20M|        let mask = eq1.or(eq2).movemask();
  679|  1.20M|        if mask.has_non_zero() {
  680|   154k|            let mask1 = eq1.movemask();
  681|   154k|            let mask2 = eq2.movemask();
  682|   154k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  1.04M|            None
  685|       |        }
  686|  1.20M|    }
_RINvMs_NtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCs433v4DNuM1R_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  2.60M|    unsafe fn search_chunk(
  671|  2.60M|        &self,
  672|  2.60M|        cur: *const u8,
  673|  2.60M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  2.60M|    ) -> Option<*const u8> {
  675|  2.60M|        let chunk = V::load_unaligned(cur);
  676|  2.60M|        let eq1 = self.v1.cmpeq(chunk);
  677|  2.60M|        let eq2 = self.v2.cmpeq(chunk);
  678|  2.60M|        let mask = eq1.or(eq2).movemask();
  679|  2.60M|        if mask.has_non_zero() {
  680|  1.11M|            let mask1 = eq1.movemask();
  681|  1.11M|            let mask2 = eq2.movemask();
  682|  1.11M|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  1.49M|            None
  685|       |        }
  686|  2.60M|    }
_RINvNtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  5.13k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  5.13k|    start: *const u8,
 1150|  5.13k|    end: *const u8,
 1151|  5.13k|    confirm: F,
 1152|  5.13k|) -> Option<*const u8> {
 1153|  5.13k|    debug_assert!(start <= end);
 1154|  5.13k|    let mut ptr = start;
 1155|  38.2k|    while ptr < end {
 1156|  33.3k|        if confirm(*ptr) {
 1157|    223|            return Some(ptr);
 1158|  33.1k|        }
 1159|  33.1k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  4.91k|    None
 1162|  5.13k|}
_RINvNtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|  12.1M|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  12.1M|    start: *const u8,
 1150|  12.1M|    end: *const u8,
 1151|  12.1M|    confirm: F,
 1152|  12.1M|) -> Option<*const u8> {
 1153|  12.1M|    debug_assert!(start <= end);
 1154|  12.1M|    let mut ptr = start;
 1155|  36.6M|    while ptr < end {
 1156|  24.6M|        if confirm(*ptr) {
 1157|   189k|            return Some(ptr);
 1158|  24.4M|        }
 1159|  24.4M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  11.9M|    None
 1162|  12.1M|}

_RNvMNtNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  24.7k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  24.7k|        One {
   71|  24.7k|            sse2: generic::One::new(needle),
   72|  24.7k|            avx2: generic::One::new(needle),
   73|  24.7k|        }
   74|  24.7k|    }
_RNvMNtNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  24.7k|    pub unsafe fn find_raw(
  180|  24.7k|        &self,
  181|  24.7k|        start: *const u8,
  182|  24.7k|        end: *const u8,
  183|  24.7k|    ) -> Option<*const u8> {
  184|  24.7k|        if start >= end {
  185|  1.25k|            return None;
  186|  23.4k|        }
  187|  23.4k|        let len = end.distance(start);
  188|  23.4k|        if len < __m256i::BYTES {
  189|  8.65k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  5.13k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  5.13k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  3.51k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  14.8k|        }
  201|  14.8k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  14.8k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  14.8k|        // enough to run on the vector routine. Pointer validity is caller's
  204|  14.8k|        // responsibility.
  205|  14.8k|        //
  206|  14.8k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  14.8k|        // means we'd have to annotate this routine with `target_feature`.
  208|  14.8k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  14.8k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  14.8k|        // The real problem is that a routine with a `target_feature`
  211|  14.8k|        // annotation generally can't be inlined into caller code unless
  212|  14.8k|        // the caller code has the same target feature annotations. Namely,
  213|  14.8k|        // the common case (at time of writing) is for calling code to not
  214|  14.8k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  14.8k|        // `target_feature` on this routine, it can be inlined which will
  216|  14.8k|        // handle some of the short-haystack cases above without touching the
  217|  14.8k|        // architecture specific code.
  218|  14.8k|        self.find_raw_avx2(start, end)
  219|  24.7k|    }
_RNCNvMNtNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|  33.3k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|  33.3k|                    b == self.sse2.needle1()
  194|  33.3k|                })
_RNvMNtNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  3.51k|    unsafe fn find_raw_sse2(
  337|  3.51k|        &self,
  338|  3.51k|        start: *const u8,
  339|  3.51k|        end: *const u8,
  340|  3.51k|    ) -> Option<*const u8> {
  341|  3.51k|        self.sse2.find_raw(start, end)
  342|  3.51k|    }
_RNvMNtNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  14.8k|    unsafe fn find_raw_avx2(
  397|  14.8k|        &self,
  398|  14.8k|        start: *const u8,
  399|  14.8k|        end: *const u8,
  400|  14.8k|    ) -> Option<*const u8> {
  401|  14.8k|        self.avx2.find_raw(start, end)
  402|  14.8k|    }
_RNvMs2_NtNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  17.8M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  17.8M|        Two {
  558|  17.8M|            sse2: generic::Two::new(needle1, needle2),
  559|  17.8M|            avx2: generic::Two::new(needle1, needle2),
  560|  17.8M|        }
  561|  17.8M|    }
_RNvMs2_NtNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNvMs2_NtNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  17.8M|    pub unsafe fn find_raw(
  655|  17.8M|        &self,
  656|  17.8M|        start: *const u8,
  657|  17.8M|        end: *const u8,
  658|  17.8M|    ) -> Option<*const u8> {
  659|  17.8M|        if start >= end {
  660|  3.28M|            return None;
  661|  14.6M|        }
  662|  14.6M|        let len = end.distance(start);
  663|  14.6M|        if len < __m256i::BYTES {
  664|  12.7M|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  12.1M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  12.1M|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|   592k|                self.find_raw_sse2(start, end)
  674|       |            };
  675|  1.84M|        }
  676|  1.84M|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|  1.84M|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|  1.84M|        // enough to run on the vector routine. Pointer validity is caller's
  679|  1.84M|        // responsibility.
  680|  1.84M|        //
  681|  1.84M|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|  1.84M|        // means we'd have to annotate this routine with `target_feature`.
  683|  1.84M|        // Which is fine, because this routine is `unsafe` anyway and the
  684|  1.84M|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|  1.84M|        // The real problem is that a routine with a `target_feature`
  686|  1.84M|        // annotation generally can't be inlined into caller code unless
  687|  1.84M|        // the caller code has the same target feature annotations. Namely,
  688|  1.84M|        // the common case (at time of writing) is for calling code to not
  689|  1.84M|        // have the `avx2` target feature enabled *at compile time*. Without
  690|  1.84M|        // `target_feature` on this routine, it can be inlined which will
  691|  1.84M|        // handle some of the short-haystack cases above without touching the
  692|  1.84M|        // architecture specific code.
  693|  1.84M|        self.find_raw_avx2(start, end)
  694|  17.8M|    }
_RNCNvMs2_NtNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  24.6M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  24.6M|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  24.6M|                })
_RNvMs2_NtNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|   592k|    unsafe fn find_raw_sse2(
  765|   592k|        &self,
  766|   592k|        start: *const u8,
  767|   592k|        end: *const u8,
  768|   592k|    ) -> Option<*const u8> {
  769|   592k|        self.sse2.find_raw(start, end)
  770|   592k|    }
_RNvMs2_NtNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|  1.84M|    unsafe fn find_raw_avx2(
  805|  1.84M|        &self,
  806|  1.84M|        start: *const u8,
  807|  1.84M|        end: *const u8,
  808|  1.84M|    ) -> Option<*const u8> {
  809|  1.84M|        self.avx2.find_raw(start, end)
  810|  1.84M|    }

_RNvNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  17.8M|pub(crate) fn memchr2_raw(
  221|  17.8M|    n1: u8,
  222|  17.8M|    n2: u8,
  223|  17.8M|    start: *const u8,
  224|  17.8M|    end: *const u8,
  225|  17.8M|) -> Option<*const u8> {
  226|  17.8M|    // SAFETY: We provide a valid function pointer type.
  227|  17.8M|    unsafe_ifunc!(
  228|  17.8M|        Two,
  229|  17.8M|        find_raw,
  230|  17.8M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  17.8M|        Option<*const u8>,
  232|  17.8M|        start,
  233|  17.8M|        end,
  234|  17.8M|        n1,
  235|  17.8M|        n2
  236|  17.8M|    )
  237|  17.8M|}
_RNvNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_646memchr10memchr_raw:
  174|  24.7k|pub(crate) fn memchr_raw(
  175|  24.7k|    n1: u8,
  176|  24.7k|    start: *const u8,
  177|  24.7k|    end: *const u8,
  178|  24.7k|) -> Option<*const u8> {
  179|  24.7k|    // SAFETY: We provide a valid function pointer type.
  180|  24.7k|    unsafe_ifunc!(
  181|  24.7k|        One,
  182|  24.7k|        find_raw,
  183|  24.7k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  24.7k|        Option<*const u8>,
  185|  24.7k|        start,
  186|  24.7k|        end,
  187|  24.7k|        n1
  188|  24.7k|    )
  189|  24.7k|}
_RNvNvNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  24.7k|        unsafe fn find_avx2(
   79|  24.7k|            $($needle: u8),+,
   80|  24.7k|            $hay_start: *const u8,
   81|  24.7k|            $hay_end: *const u8,
   82|  24.7k|        ) -> $retty {
   83|  24.7k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  24.7k|            $memchrty::new_unchecked($($needle),+)
   85|  24.7k|                .$memchrfind($hay_start, $hay_end)
   86|  24.7k|        }
_RNvNvNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  17.8M|        unsafe fn find_avx2(
   79|  17.8M|            $($needle: u8),+,
   80|  17.8M|            $hay_start: *const u8,
   81|  17.8M|            $hay_end: *const u8,
   82|  17.8M|        ) -> $retty {
   83|  17.8M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  17.8M|            $memchrty::new_unchecked($($needle),+)
   85|  17.8M|                .$memchrfind($hay_start, $hay_end)
   86|  17.8M|        }
_RNvNvNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }

_RNvXNtCsbTjOP5Lz3oJ_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  19.7M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  19.7M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  19.7M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  19.7M|    }
_RNvXNtCsbTjOP5Lz3oJ_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|  1.22M|    fn as_usize(self) -> usize {
   27|  1.22M|        self as usize
   28|  1.22M|    }

_RNvMs2_NtCsbTjOP5Lz3oJ_6memchr6memchrNtB5_7Memchr23newCseXCYVcIQZ7o_5oxttl:
  377|  15.7M|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  15.7M|        Memchr2 {
  379|  15.7M|            needle1,
  380|  15.7M|            needle2,
  381|  15.7M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  15.7M|        }
  383|  15.7M|    }
_RNvNtCsbTjOP5Lz3oJ_6memchr6memchr11memchr2_rawCseXCYVcIQZ7o_5oxttl:
  574|  17.8M|unsafe fn memchr2_raw(
  575|  17.8M|    needle1: u8,
  576|  17.8M|    needle2: u8,
  577|  17.8M|    start: *const u8,
  578|  17.8M|    end: *const u8,
  579|  17.8M|) -> Option<*const u8> {
  580|  17.8M|    #[cfg(target_arch = "x86_64")]
  581|  17.8M|    {
  582|  17.8M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  17.8M|    }
  584|  17.8M|    #[cfg(target_arch = "wasm32")]
  585|  17.8M|    {
  586|  17.8M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  17.8M|    }
  588|  17.8M|    #[cfg(target_arch = "aarch64")]
  589|  17.8M|    {
  590|  17.8M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  17.8M|    }
  592|  17.8M|    #[cfg(not(any(
  593|  17.8M|        target_arch = "x86_64",
  594|  17.8M|        target_arch = "wasm32",
  595|  17.8M|        target_arch = "aarch64"
  596|  17.8M|    )))]
  597|  17.8M|    {
  598|  17.8M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  17.8M|            .find_raw(start, end)
  600|  17.8M|    }
  601|  17.8M|}
_RNvNtCsbTjOP5Lz3oJ_6memchr6memchr12memchr2_iterCseXCYVcIQZ7o_5oxttl:
  232|  15.7M|pub fn memchr2_iter<'h>(
  233|  15.7M|    needle1: u8,
  234|  15.7M|    needle2: u8,
  235|  15.7M|    haystack: &'h [u8],
  236|  15.7M|) -> Memchr2<'h> {
  237|  15.7M|    Memchr2::new(needle1, needle2, haystack)
  238|  15.7M|}
_RNvNtCsbTjOP5Lz3oJ_6memchr6memchr6memchrCseXCYVcIQZ7o_5oxttl:
   27|  24.7k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  24.7k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  24.7k|    // pointer between start and end.
   30|  24.7k|    unsafe {
   31|  24.7k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  24.7k|        })
   34|  24.7k|    }
   35|  24.7k|}
_RNvNtCsbTjOP5Lz3oJ_6memchr6memchr7memchr2CseXCYVcIQZ7o_5oxttl:
   92|  2.08M|pub fn memchr2(needle1: u8, needle2: u8, haystack: &[u8]) -> Option<usize> {
   93|  2.08M|    // SAFETY: memchr2_raw, when a match is found, always returns a valid
   94|  2.08M|    // pointer between start and end.
   95|  2.08M|    unsafe {
   96|  2.08M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|       |            memchr2_raw(needle1, needle2, start, end)
   98|  2.08M|        })
   99|  2.08M|    }
  100|  2.08M|}
_RNvXs3_NtCsbTjOP5Lz3oJ_6memchr6memchrNtB5_7Memchr2NtNtNtNtCs433v4DNuM1R_4core4iter6traits8iterator8Iterator4nextCseXCYVcIQZ7o_5oxttl:
  390|  15.8M|    fn next(&mut self) -> Option<usize> {
  391|  15.8M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  15.8M|        // pointers returns will fall within the start and end bounds, and this
  393|  15.8M|        // upholds the safety contract of `self.it.next`.
  394|  15.8M|        unsafe {
  395|  15.8M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  15.8M|        }
  397|  15.8M|    }
_RNCNvNtCsbTjOP5Lz3oJ_6memchr6memchr7memchr20CseXCYVcIQZ7o_5oxttl:
   96|  2.08M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|  2.08M|            memchr2_raw(needle1, needle2, start, end)
   98|  2.08M|        })
_RNCNvXs3_NtCsbTjOP5Lz3oJ_6memchr6memchrNtB7_7Memchr2NtNtNtNtCs433v4DNuM1R_4core4iter6traits8iterator8Iterator4next0CseXCYVcIQZ7o_5oxttl:
  395|  15.8M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNCNvNtCsbTjOP5Lz3oJ_6memchr6memchr6memchr0B5_:
   31|  24.7k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|  24.7k|            memchr_raw(needle, start, end)
   33|  24.7k|        })
_RNvNtCsbTjOP5Lz3oJ_6memchr6memchr10memchr_rawB3_:
  504|  24.7k|unsafe fn memchr_raw(
  505|  24.7k|    needle: u8,
  506|  24.7k|    start: *const u8,
  507|  24.7k|    end: *const u8,
  508|  24.7k|) -> Option<*const u8> {
  509|  24.7k|    #[cfg(target_arch = "x86_64")]
  510|  24.7k|    {
  511|  24.7k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  24.7k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  24.7k|        // time. This function also handles using a fallback if neither AVX2
  514|  24.7k|        // nor SSE2 (unusual) are available.
  515|  24.7k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  24.7k|    }
  517|  24.7k|    #[cfg(target_arch = "wasm32")]
  518|  24.7k|    {
  519|  24.7k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  24.7k|    }
  521|  24.7k|    #[cfg(target_arch = "aarch64")]
  522|  24.7k|    {
  523|  24.7k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  24.7k|    }
  525|  24.7k|    #[cfg(not(any(
  526|  24.7k|        target_arch = "x86_64",
  527|  24.7k|        target_arch = "wasm32",
  528|  24.7k|        target_arch = "aarch64"
  529|  24.7k|    )))]
  530|  24.7k|    {
  531|  24.7k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  24.7k|    }
  533|  24.7k|}

_RNvYNtNtNtCs433v4DNuM1R_4core9core_arch3x867___m256iNtNtCsbTjOP5Lz3oJ_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   65|   438k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   66|   438k|        self.movemask().has_non_zero()
   67|   438k|    }
_RNvMNtCsbTjOP5Lz3oJ_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  128|  1.43M|    fn get_for_offset(self) -> u32 {
  129|  1.43M|        #[cfg(target_endian = "big")]
  130|  1.43M|        {
  131|  1.43M|            self.0.swap_bytes()
  132|  1.43M|        }
  133|  1.43M|        #[cfg(target_endian = "little")]
  134|  1.43M|        {
  135|  1.43M|            self.0
  136|  1.43M|        }
  137|  1.43M|    }
_RNvXs_NtCsbTjOP5Lz3oJ_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  148|  4.44M|    fn has_non_zero(self) -> bool {
  149|  4.44M|        self.0 != 0
  150|  4.44M|    }
_RNvXs_NtCsbTjOP5Lz3oJ_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  173|  1.43M|    fn first_offset(self) -> usize {
  174|  1.43M|        // We are dealing with little endian here (and if we aren't, we swap
  175|  1.43M|        // the bytes so we are in practice), where the most significant byte
  176|  1.43M|        // is at a higher address. That means the least significant bit that
  177|  1.43M|        // is set corresponds to the position of our first matching byte.
  178|  1.43M|        // That position corresponds to the number of zeros after the least
  179|  1.43M|        // significant bit.
  180|  1.43M|        self.get_for_offset().trailing_zeros() as usize
  181|  1.43M|    }
_RNvXNtNtCsbTjOP5Lz3oJ_6memchr6vector7x86sse2NtNtNtCs433v4DNuM1R_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  220|  1.21M|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  221|  1.21M|            _mm_loadu_si128(data as *const __m128i)
  222|  1.21M|        }
_RNvXNtNtCsbTjOP5Lz3oJ_6memchr6vector7x86sse2NtNtNtCs433v4DNuM1R_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  225|  1.52M|        unsafe fn movemask(self) -> SensibleMoveMask {
  226|  1.52M|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  227|  1.52M|        }
_RNvXNtNtCsbTjOP5Lz3oJ_6memchr6vector7x86sse2NtNtNtCs433v4DNuM1R_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  230|  2.41M|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  231|  2.41M|            _mm_cmpeq_epi8(self, vector2)
  232|  2.41M|        }
_RNvXNtNtCsbTjOP5Lz3oJ_6memchr6vector7x86avx2NtNtNtCs433v4DNuM1R_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  275|  5.77M|        unsafe fn movemask(self) -> SensibleMoveMask {
  276|  5.77M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  277|  5.77M|        }
_RNvXNtNtCsbTjOP5Lz3oJ_6memchr6vector7x86avx2NtNtNtCs433v4DNuM1R_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  270|  2.63M|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  271|  2.63M|            _mm256_loadu_si256(data as *const __m256i)
  272|  2.63M|        }
_RNvXNtNtCsbTjOP5Lz3oJ_6memchr6vector7x86avx2NtNtNtCs433v4DNuM1R_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  280|  6.99M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  281|  6.99M|            _mm256_cmpeq_epi8(self, vector2)
  282|  6.99M|        }
_RNvXs_NtCsbTjOP5Lz3oJ_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  163|  1.50M|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  164|  1.50M|        SensibleMoveMask(self.0 | other.0)
  165|  1.50M|    }
_RNvXNtNtCsbTjOP5Lz3oJ_6memchr6vector7x86sse2NtNtNtCs433v4DNuM1R_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  210|  35.8M|        unsafe fn splat(byte: u8) -> __m128i {
  211|  35.8M|            _mm_set1_epi8(byte as i8)
  212|  35.8M|        }
_RNvXNtNtCsbTjOP5Lz3oJ_6memchr6vector7x86sse2NtNtNtCs433v4DNuM1R_4core9core_arch3x867___m128iNtB4_6Vector2or:
  240|  1.20M|        unsafe fn or(self, vector2: Self) -> __m128i {
  241|  1.20M|            _mm_or_si128(self, vector2)
  242|  1.20M|        }
_RNvXNtNtCsbTjOP5Lz3oJ_6memchr6vector7x86avx2NtNtNtCs433v4DNuM1R_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  260|  35.8M|        unsafe fn splat(byte: u8) -> __m256i {
  261|  35.8M|            _mm256_set1_epi8(byte as i8)
  262|  35.8M|        }
_RNvXNtNtCsbTjOP5Lz3oJ_6memchr6vector7x86avx2NtNtNtCs433v4DNuM1R_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  265|   883k|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  266|   883k|            _mm256_load_si256(data as *const __m256i)
  267|   883k|        }
_RNvXNtNtCsbTjOP5Lz3oJ_6memchr6vector7x86avx2NtNtNtCs433v4DNuM1R_4core9core_arch3x867___m256iNtB4_6Vector2or:
  290|  3.92M|        unsafe fn or(self, vector2: Self) -> __m256i {
  291|  3.92M|            _mm256_or_si256(self, vector2)
  292|  3.92M|        }

_RNvMs2_NtCsbAittVSyoF6_9once_cell3impINtB5_8OnceCellNtNtCs80BIJ2NAVqC_5alloc6string6StringE14is_initializedCs4FJq8jLh9xR_13libfuzzer_sys:
   49|  10.7k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  10.7k|        // An `Acquire` load is enough because that makes all the initialization
   51|  10.7k|        // operations visible to us, and, this being a fast path, weaker
   52|  10.7k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  10.7k|        // `SeqCst` operations on the slow path.
   54|  10.7k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  10.7k|    }

_RNvMs4_NtCsbAittVSyoF6_9once_cell4syncINtB5_8OnceCellNtNtCs80BIJ2NAVqC_5alloc6string6StringE3getCs4FJq8jLh9xR_13libfuzzer_sys:
  963|  10.7k|        pub fn get(&self) -> Option<&T> {
  964|  10.7k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  10.7k|                None
  969|       |            }
  970|  10.7k|        }

_RNvMCscDOLRwgDEvg_10oxilangtagINtB2_11LanguageTagReE10into_innerCseXCYVcIQZ7o_5oxttl:
   54|  21.6k|    pub fn into_inner(self) -> T {
   55|  21.6k|        self.tag
   56|  21.6k|    }
_RNvMCscDOLRwgDEvg_10oxilangtagINtB2_11LanguageTagReE5parseCseXCYVcIQZ7o_5oxttl:
   41|  26.4k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   42|  26.4k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   43|  21.6k|        Ok(Self { tag, positions })
   44|  26.4k|    }
_RINvCscDOLRwgDEvg_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECs2NsVQwDzFGg_5oxrdf:
  621|  21.2k|fn parse_langtag(
  622|  21.2k|    input: &str,
  623|  21.2k|    output: &mut impl OutputBuffer,
  624|  21.2k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  625|  21.2k|    #[derive(PartialEq, Eq)]
  626|  21.2k|    enum State {
  627|  21.2k|        Start,
  628|  21.2k|        AfterLanguage,
  629|  21.2k|        AfterExtLang,
  630|  21.2k|        AfterScript,
  631|  21.2k|        AfterRegion,
  632|  21.2k|        InExtension { expected: bool },
  633|  21.2k|        InPrivateUse { expected: bool },
  634|  21.2k|    }
  635|  21.2k|
  636|  21.2k|    let mut state = State::Start;
  637|  21.2k|    let mut language_end = 0;
  638|  21.2k|    let mut extlang_end = 0;
  639|  21.2k|    let mut script_end = 0;
  640|  21.2k|    let mut region_end = 0;
  641|  21.2k|    let mut variant_end = 0;
  642|  21.2k|    let mut extension_end = 0;
  643|  21.2k|    let mut extlangs_count = 0;
  644|  42.1k|    for (subtag, end) in SubTagIterator::new(input) {
  645|  42.1k|        if subtag.is_empty() {
  646|      0|            return Err(LanguageTagParseError {
  647|      0|                kind: TagParseErrorKind::EmptySubtag,
  648|      0|            });
  649|  42.1k|        }
  650|  42.1k|        if subtag.len() > 8 {
  651|    434|            return Err(LanguageTagParseError {
  652|    434|                kind: TagParseErrorKind::SubtagTooLong,
  653|    434|            });
  654|  41.6k|        }
  655|  41.6k|        if state == State::Start {
  656|       |            // Primary language
  657|  20.8k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  658|  2.39k|                return Err(LanguageTagParseError {
  659|  2.39k|                    kind: TagParseErrorKind::InvalidLanguage,
  660|  2.39k|                });
  661|  18.4k|            }
  662|  18.4k|            language_end = end;
  663|  18.4k|            output.extend(to_lowercase(subtag));
  664|  18.4k|            if subtag.len() < 4 {
  665|  10.6k|                // extlangs are only allowed for short language tags
  666|  10.6k|                state = State::AfterLanguage;
  667|  10.6k|            } else {
  668|  7.87k|                state = State::AfterExtLang;
  669|  7.87k|            }
  670|  20.7k|        } else if let State::InPrivateUse { .. } = state {
  671|  3.13k|            if !is_alphanumeric(subtag) {
  672|      0|                return Err(LanguageTagParseError {
  673|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  674|      0|                });
  675|  3.13k|            }
  676|  3.13k|            output.push('-');
  677|  3.13k|            output.extend(to_lowercase(subtag));
  678|  3.13k|            state = State::InPrivateUse { expected: false };
  679|  17.6k|        } else if subtag == "x" || subtag == "X" {
  680|       |            // We make sure extension is found
  681|  3.46k|            if let State::InExtension { expected: true } = state {
  682|    272|                return Err(LanguageTagParseError {
  683|    272|                    kind: TagParseErrorKind::EmptyExtension,
  684|    272|                });
  685|  3.18k|            }
  686|  3.18k|            output.push('-');
  687|  3.18k|            output.push('x');
  688|  3.18k|            state = State::InPrivateUse { expected: true };
  689|  14.2k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  690|       |            // We make sure extension is found
  691|  3.59k|            if let State::InExtension { expected: true } = state {
  692|    404|                return Err(LanguageTagParseError {
  693|    404|                    kind: TagParseErrorKind::EmptyExtension,
  694|    404|                });
  695|  3.18k|            }
  696|  3.18k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  697|  3.18k|            output.push('-');
  698|  3.18k|            output.push(extension_tag);
  699|  3.18k|            state = State::InExtension { expected: true };
  700|  10.6k|        } else if let State::InExtension { .. } = state {
  701|  3.76k|            if !is_alphanumeric(subtag) {
  702|      0|                return Err(LanguageTagParseError {
  703|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  704|      0|                });
  705|  3.76k|            }
  706|  3.76k|            extension_end = end;
  707|  3.76k|            output.push('-');
  708|  3.76k|            output.extend(to_lowercase(subtag));
  709|  3.76k|            state = State::InExtension { expected: false };
  710|  6.84k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  711|    581|            extlangs_count += 1;
  712|    581|            if extlangs_count > 3 {
  713|     30|                return Err(LanguageTagParseError {
  714|     30|                    kind: TagParseErrorKind::TooManyExtlangs,
  715|     30|                });
  716|    551|            }
  717|    551|            // valid extlangs
  718|    551|            extlang_end = end;
  719|    551|            output.push('-');
  720|    551|            output.extend(to_lowercase(subtag));
  721|  6.26k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  722|  5.89k|            && subtag.len() == 4
  723|    347|            && is_alphabetic(subtag)
  724|    347|        {
  725|    347|            // Script
  726|    347|            script_end = end;
  727|    347|            output.push('-');
  728|    347|            output.extend(to_uppercase_first(subtag));
  729|    347|            state = State::AfterScript;
  730|  5.91k|        } else if (state == State::AfterLanguage
  731|    641|            || state == State::AfterExtLang
  732|    366|            || state == State::AfterScript)
  733|  5.70k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  734|  1.40k|                || subtag.len() == 3 && is_numeric(subtag))
  735|  4.29k|        {
  736|  4.29k|            // Region
  737|  4.29k|            region_end = end;
  738|  4.29k|            output.push('-');
  739|  4.29k|            output.extend(to_uppercase(subtag));
  740|  4.29k|            state = State::AfterRegion;
  741|  4.29k|        } else if (state == State::AfterLanguage
  742|    500|            || state == State::AfterExtLang
  743|    366|            || state == State::AfterScript
  744|    217|            || state == State::AfterRegion)
  745|  1.62k|            && is_alphanumeric(subtag)
  746|  1.62k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  747|    388|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  748|  1.23k|        {
  749|  1.23k|            // Variant
  750|  1.23k|            variant_end = end;
  751|  1.23k|            output.push('-');
  752|  1.23k|            output.extend(to_lowercase(subtag));
  753|  1.23k|            state = State::AfterRegion;
  754|  1.23k|        } else {
  755|    388|            return Err(LanguageTagParseError {
  756|    388|                kind: TagParseErrorKind::InvalidSubtag,
  757|    388|            });
  758|       |        }
  759|       |    }
  760|       |
  761|       |    //We make sure we are in a correct final state
  762|  17.3k|    if let State::InExtension { expected: true } = state {
  763|    562|        return Err(LanguageTagParseError {
  764|    562|            kind: TagParseErrorKind::EmptyExtension,
  765|    562|        });
  766|  16.8k|    }
  767|  16.8k|    if let State::InPrivateUse { expected: true } = state {
  768|    276|        return Err(LanguageTagParseError {
  769|    276|            kind: TagParseErrorKind::EmptyPrivateUse,
  770|    276|        });
  771|  16.5k|    }
  772|  16.5k|
  773|  16.5k|    //We make sure we have not skipped anyone
  774|  16.5k|    if extlang_end < language_end {
  775|  16.0k|        extlang_end = language_end;
  776|  16.0k|    }
  777|  16.5k|    if script_end < extlang_end {
  778|  16.3k|        script_end = extlang_end;
  779|  16.3k|    }
  780|  16.5k|    if region_end < script_end {
  781|  12.3k|        region_end = script_end;
  782|  12.3k|    }
  783|  16.5k|    if variant_end < region_end {
  784|  15.3k|        variant_end = region_end;
  785|  15.3k|    }
  786|  16.5k|    if extension_end < variant_end {
  787|  14.6k|        extension_end = variant_end;
  788|  14.6k|    }
  789|       |
  790|  16.5k|    Ok(TagElementsPositions {
  791|  16.5k|        language_end,
  792|  16.5k|        extlang_end,
  793|  16.5k|        script_end,
  794|  16.5k|        region_end,
  795|  16.5k|        variant_end,
  796|  16.5k|        extension_end,
  797|  16.5k|    })
  798|  21.2k|}
_RINvCscDOLRwgDEvg_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECs2NsVQwDzFGg_5oxrdf:
  576|  26.4k|fn parse_language_tag(
  577|  26.4k|    input: &str,
  578|  26.4k|    output: &mut impl OutputBuffer,
  579|  26.4k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  580|       |    //grandfathered tags
  581|  26.4k|    if let Some(tag) = GRANDFATHEREDS
  582|  26.4k|        .iter()
  583|  26.4k|        .find(|record| record.eq_ignore_ascii_case(input))
  584|       |    {
  585|      0|        output.push_str(tag);
  586|      0|        Ok(TagElementsPositions {
  587|      0|            language_end: tag.len(),
  588|      0|            extlang_end: tag.len(),
  589|      0|            script_end: tag.len(),
  590|      0|            region_end: tag.len(),
  591|      0|            variant_end: tag.len(),
  592|      0|            extension_end: tag.len(),
  593|      0|        })
  594|  26.4k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  595|       |        // private use
  596|  5.13k|        if !is_alphanumeric_or_dash(input) {
  597|      0|            Err(LanguageTagParseError {
  598|      0|                kind: TagParseErrorKind::ForbiddenChar,
  599|      0|            })
  600|  5.13k|        } else if input.len() == 2 {
  601|      0|            Err(LanguageTagParseError {
  602|      0|                kind: TagParseErrorKind::EmptyPrivateUse,
  603|      0|            })
  604|       |        } else {
  605|  5.13k|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  606|  5.13k|            Ok(TagElementsPositions {
  607|  5.13k|                language_end: input.len(),
  608|  5.13k|                extlang_end: input.len(),
  609|  5.13k|                script_end: input.len(),
  610|  5.13k|                region_end: input.len(),
  611|  5.13k|                variant_end: input.len(),
  612|  5.13k|                extension_end: input.len(),
  613|  5.13k|            })
  614|       |        }
  615|       |    } else {
  616|  21.2k|        parse_langtag(input, output)
  617|       |    }
  618|  26.4k|}
_RINvXsr_CscDOLRwgDEvg_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs433v4DNuM1R_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECs2NsVQwDzFGg_5oxrdf:
  560|  5.13k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CscDOLRwgDEvg_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs433v4DNuM1R_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECs2NsVQwDzFGg_5oxrdf:
  560|  27.1k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CscDOLRwgDEvg_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs433v4DNuM1R_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECs2NsVQwDzFGg_5oxrdf:
  560|  4.29k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CscDOLRwgDEvg_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs433v4DNuM1R_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECs2NsVQwDzFGg_5oxrdf:
  560|    347|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCscDOLRwgDEvg_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0Cs2NsVQwDzFGg_5oxrdf:
  583|   687k|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvCscDOLRwgDEvg_10oxilangtag10is_numericCs2NsVQwDzFGg_5oxrdf:
  865|    362|fn is_numeric(s: &str) -> bool {
  866|    362|    s.chars().all(|x| x.is_ascii_digit())
  867|    362|}
_RNvCscDOLRwgDEvg_10oxilangtag12to_lowercaseCs2NsVQwDzFGg_5oxrdf:
  892|  27.1k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  893|  27.1k|    s.chars().map(|c| c.to_ascii_lowercase())
  894|  27.1k|}
_RNvCscDOLRwgDEvg_10oxilangtag12to_uppercaseCs2NsVQwDzFGg_5oxrdf:
  880|  4.29k|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  881|  4.29k|    s.chars().map(|c| c.to_ascii_uppercase())
  882|  4.29k|}
_RNvCscDOLRwgDEvg_10oxilangtag13is_alphabeticCs2NsVQwDzFGg_5oxrdf:
  860|  24.9k|fn is_alphabetic(s: &str) -> bool {
  861|  24.9k|    s.chars().all(|x| x.is_ascii_alphabetic())
  862|  24.9k|}
_RNvCscDOLRwgDEvg_10oxilangtag15is_alphanumericCs2NsVQwDzFGg_5oxrdf:
  870|  12.1k|fn is_alphanumeric(s: &str) -> bool {
  871|  12.1k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  872|  12.1k|}
_RNvCscDOLRwgDEvg_10oxilangtag18to_uppercase_firstCs2NsVQwDzFGg_5oxrdf:
  886|    347|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  887|    347|    let mut chars = s.chars();
  888|    347|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  889|    347|}
_RNvCscDOLRwgDEvg_10oxilangtag23is_alphanumeric_or_dashCs2NsVQwDzFGg_5oxrdf:
  875|  5.13k|fn is_alphanumeric_or_dash(s: &str) -> bool {
  876|  5.13k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  877|  5.13k|}
_RNvMsv_CscDOLRwgDEvg_10oxilangtagNtB5_14SubTagIterator3newCs2NsVQwDzFGg_5oxrdf:
  839|  21.2k|    fn new(input: &'a str) -> Self {
  840|  21.2k|        Self {
  841|  21.2k|            split: input.split('-'),
  842|  21.2k|            position: 0,
  843|  21.2k|        }
  844|  21.2k|    }
_RNvXsq_CscDOLRwgDEvg_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCs2NsVQwDzFGg_5oxrdf:
  552|  26.0k|    fn push(&mut self, _: char) {}
_RNvXsw_CscDOLRwgDEvg_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCs433v4DNuM1R_4core4iter6traits8iterator8Iterator4nextCs2NsVQwDzFGg_5oxrdf:
  851|  59.4k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  852|  59.4k|        let tag = self.split.next()?;
  853|  42.1k|        let tag_end = self.position + tag.len();
  854|  42.1k|        self.position = tag_end + 1;
  855|  42.1k|        Some((tag, tag_end))
  856|  59.4k|    }
_RNvXso_CscDOLRwgDEvg_10oxilangtagNtB5_21LanguageTagParseErrorNtNtCs433v4DNuM1R_4core3fmt7Display3fmt:
  482|  4.76k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  483|  4.76k|        match self.kind {
  484|       |            TagParseErrorKind::EmptyExtension => {
  485|  1.23k|                write!(f, "If an extension subtag is present, it must not be empty")
  486|       |            }
  487|       |            TagParseErrorKind::EmptyPrivateUse => {
  488|    276|                write!(f, "If the `x` subtag is present, it must not be empty")
  489|       |            }
  490|       |            TagParseErrorKind::ForbiddenChar => {
  491|      0|                write!(f, "The langtag contains a char not allowed")
  492|       |            }
  493|    388|            TagParseErrorKind::InvalidSubtag => write!(
  494|    388|                f,
  495|    388|                "A subtag fails to parse, it does not match any other subtags"
  496|    388|            ),
  497|  2.39k|            TagParseErrorKind::InvalidLanguage => write!(f, "The given language subtag is invalid"),
  498|       |            TagParseErrorKind::SubtagTooLong => {
  499|    434|                write!(f, "A subtag may be eight characters in length at maximum")
  500|       |            }
  501|      0|            TagParseErrorKind::EmptySubtag => write!(f, "A subtag should not be empty"),
  502|       |            TagParseErrorKind::TooManyExtlangs => {
  503|     30|                write!(f, "At maximum three extlangs are allowed")
  504|       |            }
  505|       |        }
  506|  4.76k|    }
_RNCNvCscDOLRwgDEvg_10oxilangtag13is_alphabetic0B3_:
  861|  81.6k|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCscDOLRwgDEvg_10oxilangtag10is_numeric0B3_:
  866|    362|    s.chars().all(|x| x.is_ascii_digit())
_RNCNvCscDOLRwgDEvg_10oxilangtag15is_alphanumeric0B3_:
  871|  27.5k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNCNvCscDOLRwgDEvg_10oxilangtag23is_alphanumeric_or_dash0B3_:
  876|  79.6k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')

_RINvMs11_CslEbQcIb7A5U_5oxiriINtB7_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E11parse_erroruECseXCYVcIQZ7o_5oxttl:
 1567|  73.4k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1568|  73.4k|        Err(IriParseError { kind })
 1569|  73.4k|    }
_RINvMs11_CslEbQcIb7A5U_5oxiriINtB7_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb1_E11parse_erroruECseXCYVcIQZ7o_5oxttl:
 1567|  1.66k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1568|  1.66k|        Err(IriParseError { kind })
 1569|  1.66k|    }
_RNCNvMs11_CslEbQcIb7A5U_5oxiriINtB8_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E10read_echar0CseXCYVcIQZ7o_5oxttl:
 1550|  6.03k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_CslEbQcIb7A5U_5oxiriINtB8_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E10read_echars_0CseXCYVcIQZ7o_5oxttl:
 1551|  3.33k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMCslEbQcIb7A5U_5oxiriINtB2_6IriRefNtNtCs80BIJ2NAVqC_5alloc6string6StringE15parse_uncheckedCseXCYVcIQZ7o_5oxttl:
   71|  14.9k|    pub fn parse_unchecked(iri: T) -> Result<Self, IriParseError> {
   72|  14.9k|        let positions = IriParser::<_, true>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   73|  14.9k|        Ok(Self { iri, positions })
   74|  14.9k|    }
_RNvMCslEbQcIb7A5U_5oxiriINtB2_6IriRefNtNtCs80BIJ2NAVqC_5alloc6string6StringE17resolve_uncheckedCseXCYVcIQZ7o_5oxttl:
  108|   299k|    pub fn resolve_unchecked(&self, iri: &str) -> Result<IriRef<String>, IriParseError> {
  109|   299k|        let mut target_buffer = String::with_capacity(self.iri.len() + iri.len());
  110|   299k|        let positions = IriParser::<_, true>::parse(iri, Some(self.as_ref()), &mut target_buffer)?;
  111|   297k|        Ok(IriRef {
  112|   297k|            iri: target_buffer,
  113|   297k|            positions,
  114|   297k|        })
  115|   299k|    }
_RNvMCslEbQcIb7A5U_5oxiriINtB2_6IriRefNtNtCs80BIJ2NAVqC_5alloc6string6StringE4pathCseXCYVcIQZ7o_5oxttl:
  264|  6.93k|    pub fn path(&self) -> &str {
  265|  6.93k|        &self.iri[self.positions.authority_end..self.positions.path_end]
  266|  6.93k|    }
_RNvMCslEbQcIb7A5U_5oxiriINtB2_6IriRefNtNtCs80BIJ2NAVqC_5alloc6string6StringE6as_refCseXCYVcIQZ7o_5oxttl:
  160|   899k|    pub fn as_ref(&self) -> IriRef<&str> {
  161|   899k|        IriRef {
  162|   899k|            iri: &self.iri,
  163|   899k|            positions: self.positions,
  164|   899k|        }
  165|   899k|    }
_RNvMCslEbQcIb7A5U_5oxiriINtB2_6IriRefNtNtCs80BIJ2NAVqC_5alloc6string6StringE6as_strCseXCYVcIQZ7o_5oxttl:
  177|  3.70k|    pub fn as_str(&self) -> &str {
  178|  3.70k|        &self.iri
  179|  3.70k|    }
_RNvMCslEbQcIb7A5U_5oxiriINtB2_6IriRefNtNtCs80BIJ2NAVqC_5alloc6string6StringE7resolveCseXCYVcIQZ7o_5oxttl:
   89|   599k|    pub fn resolve(&self, iri: &str) -> Result<IriRef<String>, IriParseError> {
   90|   599k|        let mut target_buffer = String::with_capacity(self.iri.len() + iri.len());
   91|   599k|        let positions = IriParser::<_, false>::parse(iri, Some(self.as_ref()), &mut target_buffer)?;
   92|   526k|        Ok(IriRef {
   93|   526k|            iri: target_buffer,
   94|   526k|            positions,
   95|   526k|        })
   96|   599k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_hostCseXCYVcIQZ7o_5oxttl:
 1366|  11.9k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|  11.9k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|     72|            let start_position = self.input.position;
 1370|    576|            while let Some(c) = self.input.next() {
 1371|    576|                self.output.push(c);
 1372|    576|                if c == ']' {
 1373|     72|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|     72|                    if !UNCHECKED {
 1375|      0|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|      0|                        }
 1378|     72|                    }
 1379|       |
 1380|     72|                    let c = self.input.next();
 1381|     72|                    return match c {
 1382|       |                        Some(':') => {
 1383|     57|                            self.output.push(':');
 1384|     57|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|     15|                            self.output_positions.authority_end = self.output.len();
 1388|     15|                            self.parse_path_start(c)
 1389|       |                        }
 1390|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|    504|                }
 1393|       |            }
 1394|      0|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|   134k|            loop {
 1398|   134k|                let c = self.input.next();
 1399|   134k|                match c {
 1400|       |                    Some(':') => {
 1401|    905|                        self.output.push(':');
 1402|    905|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|  10.9k|                        self.output_positions.authority_end = self.output.len();
 1406|  10.9k|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|   122k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|  11.9k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_pathCseXCYVcIQZ7o_5oxttl:
 1457|  11.8k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|   134k|        loop {
 1459|   134k|            let c = self.input.next();
 1460|   134k|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|  14.6k|                    if self.output.as_str().ends_with("/..") {
 1463|      0|                        self.remove_last_segment();
 1464|      0|                        self.remove_last_segment();
 1465|      0|                        self.output.push('/');
 1466|  14.6k|                    } else if self.output.as_str().ends_with("/.") {
 1467|      0|                        self.remove_last_segment();
 1468|      0|                        self.output.push('/');
 1469|  14.6k|                    } else if c == Some('/') {
 1470|  2.78k|                        self.output.push('/');
 1471|  11.8k|                    }
 1472|       |
 1473|  14.6k|                    if c == Some('?') {
 1474|  1.87k|                        self.output_positions.path_end = self.output.len();
 1475|  1.87k|                        self.output.push('?');
 1476|  1.87k|                        return self.parse_query();
 1477|  12.7k|                    } else if c == Some('#') {
 1478|    911|                        self.output_positions.path_end = self.output.len();
 1479|    911|                        self.output_positions.query_end = self.output.len();
 1480|    911|                        self.output.push('#');
 1481|    911|                        return self.parse_fragment();
 1482|  11.8k|                    } else if c.is_none() {
 1483|  9.07k|                        self.output_positions.path_end = self.output.len();
 1484|  9.07k|                        self.output_positions.query_end = self.output.len();
 1485|  9.07k|                        return Ok(());
 1486|  2.78k|                    }
 1487|       |                }
 1488|   119k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|  11.8k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_portCseXCYVcIQZ7o_5oxttl:
 1414|    962|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|  1.22k|        loop {
 1416|  1.22k|            let c = self.input.next();
 1417|    903|            match c {
 1418|    903|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|    962|                    self.output_positions.authority_end = self.output.len();
 1421|    962|                    return self.parse_path_start(c);
 1422|       |                }
 1423|      0|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|    962|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E11parse_queryCseXCYVcIQZ7o_5oxttl:
 1493|  2.17k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|  66.9k|        while let Some(c) = self.input.next() {
 1495|  65.1k|            if c == '#' {
 1496|    305|                self.output_positions.query_end = self.output.len();
 1497|    305|                self.output.push('#');
 1498|    305|                return self.parse_fragment();
 1499|       |            } else {
 1500|  64.7k|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|  1.86k|        self.output_positions.query_end = self.output.len();
 1504|  1.86k|        Ok(())
 1505|  2.17k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E12parse_schemeCseXCYVcIQZ7o_5oxttl:
 1220|  14.9k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|  75.8k|        loop {
 1222|  75.8k|            let c = self.input.next();
 1223|  75.8k|            match c {
 1224|  75.8k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|  60.8k|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|  14.9k|                    self.output.push(':');
 1229|  14.9k|                    self.output_positions.scheme_end = self.output.len();
 1230|  14.9k|                    self.input_scheme_end = self.input.position;
 1231|  14.9k|                    return if self.input.starts_with('/') {
 1232|  12.2k|                        self.input.next();
 1233|  12.2k|                        self.output.push('/');
 1234|  12.2k|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|  2.63k|                        self.output_positions.authority_end = self.output.len();
 1237|  2.63k|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|      0|                    self.input = ParserInput {
 1242|      0|                        value: self.iri.chars(),
 1243|      0|                        position: 0,
 1244|      0|                    }; // reset
 1245|      0|                    self.output.clear();
 1246|      0|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|  14.9k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E14parse_fragmentCseXCYVcIQZ7o_5oxttl:
 1507|  1.46k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|  20.6k|        while let Some(c) = self.input.next() {
 1509|  19.1k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|  1.46k|        Ok(())
 1512|  1.46k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E15parse_authorityCseXCYVcIQZ7o_5oxttl:
 1342|  11.9k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|   136k|        loop {
 1345|   136k|            let c = self.input.next();
 1346|   136k|            match c {
 1347|       |                Some('@') => {
 1348|    151|                    self.output.push('@');
 1349|    151|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|  11.7k|                    self.input = ParserInput {
 1353|  11.7k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|  11.7k|                        position: self.input_scheme_end + 2,
 1355|  11.7k|                    };
 1356|  11.7k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|  11.7k|                    return self.parse_host();
 1358|       |                }
 1359|   124k|                Some(c) => {
 1360|   124k|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|  11.9k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E16parse_path_startCseXCYVcIQZ7o_5oxttl:
 1428|  11.9k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|  11.9k|        match c {
 1430|       |            None => {
 1431|  2.51k|                self.output_positions.path_end = self.output.len();
 1432|  2.51k|                self.output_positions.query_end = self.output.len();
 1433|  2.51k|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|    301|                self.output_positions.path_end = self.output.len();
 1437|    301|                self.output.push('?');
 1438|    301|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|    247|                self.output_positions.path_end = self.output.len();
 1442|    247|                self.output_positions.query_end = self.output.len();
 1443|    247|                self.output.push('#');
 1444|    247|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|  8.84k|                self.output.push('/');
 1448|  8.84k|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|  11.9k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E18parse_scheme_startCseXCYVcIQZ7o_5oxttl:
 1212|  14.9k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|  14.9k|        match self.input.front() {
 1214|      0|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|  14.9k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|      0|            _ => self.parse_relative(),
 1217|       |        }
 1218|  14.9k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E23parse_path_or_authorityCseXCYVcIQZ7o_5oxttl:
 1252|  12.2k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|  12.2k|        if self.input.starts_with('/') {
 1254|  11.9k|            self.input.next();
 1255|  11.9k|            self.output.push('/');
 1256|  11.9k|            self.parse_authority()
 1257|       |        } else {
 1258|    381|            self.output_positions.authority_end = self.output.len() - 1;
 1259|    381|            self.parse_path()
 1260|       |        }
 1261|  12.2k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E27read_url_codepoint_or_echarCseXCYVcIQZ7o_5oxttl:
 1523|   385k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|   385k|        if UNCHECKED || is_url_code_point(c) {
 1525|   385k|            self.output.push(c);
 1526|   385k|            Ok(())
 1527|      0|        } else if c == '%' {
 1528|      0|            self.read_echar()
 1529|       |        } else {
 1530|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|   385k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E33read_url_query_codepoint_or_echarCseXCYVcIQZ7o_5oxttl:
 1535|  64.7k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|  64.7k|        if UNCHECKED || is_url_query_code_point(c) {
 1537|  64.7k|            self.output.push(c);
 1538|  64.7k|            Ok(())
 1539|      0|        } else if c == '%' {
 1540|      0|            self.read_echar()
 1541|       |        } else {
 1542|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|  64.7k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E5parseCseXCYVcIQZ7o_5oxttl:
 1187|  14.9k|    fn parse(
 1188|  14.9k|        iri: &'a str,
 1189|  14.9k|        base: Option<IriRef<&'a str>>,
 1190|  14.9k|        output: &'a mut O,
 1191|  14.9k|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|  14.9k|        let mut parser = Self {
 1193|  14.9k|            iri,
 1194|  14.9k|            base,
 1195|  14.9k|            input: ParserInput {
 1196|  14.9k|                value: iri.chars(),
 1197|  14.9k|                position: 0,
 1198|  14.9k|            },
 1199|  14.9k|            output,
 1200|  14.9k|            output_positions: IriElementsPositions {
 1201|  14.9k|                scheme_end: 0,
 1202|  14.9k|                authority_end: 0,
 1203|  14.9k|                path_end: 0,
 1204|  14.9k|                query_end: 0,
 1205|  14.9k|            },
 1206|  14.9k|            input_scheme_end: 0,
 1207|  14.9k|        };
 1208|  14.9k|        parser.parse_scheme_start()?;
 1209|  14.9k|        Ok(parser.output_positions)
 1210|  14.9k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E10parse_hostCseXCYVcIQZ7o_5oxttl:
 1366|  14.7k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|  14.7k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|  2.22k|            let start_position = self.input.position;
 1370|  42.9k|            while let Some(c) = self.input.next() {
 1371|  42.2k|                self.output.push(c);
 1372|  42.2k|                if c == ']' {
 1373|  1.53k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|  1.53k|                    if !UNCHECKED {
 1375|  1.53k|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|  1.53k|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|      0|                        }
 1378|      0|                    }
 1379|       |
 1380|      0|                    let c = self.input.next();
 1381|      0|                    return match c {
 1382|       |                        Some(':') => {
 1383|      0|                            self.output.push(':');
 1384|      0|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|      0|                            self.output_positions.authority_end = self.output.len();
 1388|      0|                            self.parse_path_start(c)
 1389|       |                        }
 1390|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|  40.6k|                }
 1393|       |            }
 1394|    688|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|   123k|            loop {
 1398|   123k|                let c = self.input.next();
 1399|   123k|                match c {
 1400|       |                    Some(':') => {
 1401|  2.49k|                        self.output.push(':');
 1402|  2.49k|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|  9.58k|                        self.output_positions.authority_end = self.output.len();
 1406|  9.58k|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|   111k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|  14.7k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E10parse_pathCseXCYVcIQZ7o_5oxttl:
 1457|   545k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|  1.77M|        loop {
 1459|  1.77M|            let c = self.input.next();
 1460|  1.77M|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|   618k|                    if self.output.as_str().ends_with("/..") {
 1463|  1.02k|                        self.remove_last_segment();
 1464|  1.02k|                        self.remove_last_segment();
 1465|  1.02k|                        self.output.push('/');
 1466|   617k|                    } else if self.output.as_str().ends_with("/.") {
 1467|   382k|                        self.remove_last_segment();
 1468|   382k|                        self.output.push('/');
 1469|   382k|                    } else if c == Some('/') {
 1470|   127k|                        self.output.push('/');
 1471|   127k|                    }
 1472|       |
 1473|   618k|                    if c == Some('?') {
 1474|  4.80k|                        self.output_positions.path_end = self.output.len();
 1475|  4.80k|                        self.output.push('?');
 1476|  4.80k|                        return self.parse_query();
 1477|   613k|                    } else if c == Some('#') {
 1478|  3.34k|                        self.output_positions.path_end = self.output.len();
 1479|  3.34k|                        self.output_positions.query_end = self.output.len();
 1480|  3.34k|                        self.output.push('#');
 1481|  3.34k|                        return self.parse_fragment();
 1482|   610k|                    } else if c.is_none() {
 1483|   482k|                        self.output_positions.path_end = self.output.len();
 1484|   482k|                        self.output_positions.query_end = self.output.len();
 1485|   482k|                        return Ok(());
 1486|   128k|                    }
 1487|       |                }
 1488|  1.15M|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|   545k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E10parse_portCseXCYVcIQZ7o_5oxttl:
 1414|  2.49k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|  4.93k|        loop {
 1416|  4.93k|            let c = self.input.next();
 1417|  4.05k|            match c {
 1418|  4.05k|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|  2.11k|                    self.output_positions.authority_end = self.output.len();
 1421|  2.11k|                    return self.parse_path_start(c);
 1422|       |                }
 1423|    378|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|  2.49k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E10read_echarCseXCYVcIQZ7o_5oxttl:
 1547|  6.63k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1548|  6.63k|        let c1 = self.input.next();
 1549|  6.63k|        let c2 = self.input.next();
 1550|  6.63k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1551|  3.33k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1552|       |        {
 1553|  3.11k|            self.output.push('%');
 1554|  3.11k|            self.output.push(c1.unwrap());
 1555|  3.11k|            self.output.push(c2.unwrap());
 1556|  3.11k|            Ok(())
 1557|       |        } else {
 1558|  3.52k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1559|  3.52k|                Some('%'),
 1560|  3.52k|                c1,
 1561|  3.52k|                c2,
 1562|  3.52k|            ]))
 1563|       |        }
 1564|  6.63k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E11parse_queryCseXCYVcIQZ7o_5oxttl:
 1493|  16.8k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|   184k|        while let Some(c) = self.input.next() {
 1495|   174k|            if c == '#' {
 1496|  1.22k|                self.output_positions.query_end = self.output.len();
 1497|  1.22k|                self.output.push('#');
 1498|  1.22k|                return self.parse_fragment();
 1499|       |            } else {
 1500|   172k|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|  10.6k|        self.output_positions.query_end = self.output.len();
 1504|  10.6k|        Ok(())
 1505|  16.8k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E12parse_schemeCseXCYVcIQZ7o_5oxttl:
 1220|  81.3k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|   319k|        loop {
 1222|   319k|            let c = self.input.next();
 1223|   308k|            match c {
 1224|   308k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|   237k|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|  21.3k|                    self.output.push(':');
 1229|  21.3k|                    self.output_positions.scheme_end = self.output.len();
 1230|  21.3k|                    self.input_scheme_end = self.input.position;
 1231|  21.3k|                    return if self.input.starts_with('/') {
 1232|  8.77k|                        self.input.next();
 1233|  8.77k|                        self.output.push('/');
 1234|  8.77k|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|  12.5k|                        self.output_positions.authority_end = self.output.len();
 1237|  12.5k|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|  59.9k|                    self.input = ParserInput {
 1242|  59.9k|                        value: self.iri.chars(),
 1243|  59.9k|                        position: 0,
 1244|  59.9k|                    }; // reset
 1245|  59.9k|                    self.output.clear();
 1246|  59.9k|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|  81.3k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E14parse_fragmentCseXCYVcIQZ7o_5oxttl:
 1507|  6.42k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|  50.1k|        while let Some(c) = self.input.next() {
 1509|  46.4k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|  3.68k|        Ok(())
 1512|  6.42k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E14parse_relativeCseXCYVcIQZ7o_5oxttl:
 1263|   578k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1264|   578k|        if let Some(base) = self.base {
 1265|   578k|            match self.input.front() {
 1266|       |                None => {
 1267|  23.0k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1268|  23.0k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1269|  23.0k|                    self.output_positions.authority_end = base.positions.authority_end;
 1270|  23.0k|                    self.output_positions.path_end = base.positions.path_end;
 1271|  23.0k|                    self.output_positions.query_end = base.positions.query_end;
 1272|  23.0k|                    Ok(())
 1273|       |                }
 1274|       |                Some('/') => {
 1275|   332k|                    self.input.next();
 1276|   332k|                    self.parse_relative_slash(&base)
 1277|       |                }
 1278|       |                Some('?') => {
 1279|  11.0k|                    self.input.next();
 1280|  11.0k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1281|  11.0k|                    self.output.push('?');
 1282|  11.0k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1283|  11.0k|                    self.output_positions.authority_end = base.positions.authority_end;
 1284|  11.0k|                    self.output_positions.path_end = base.positions.path_end;
 1285|  11.0k|                    self.parse_query()
 1286|       |                }
 1287|       |                Some('#') => {
 1288|  1.53k|                    self.input.next();
 1289|  1.53k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1290|  1.53k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1291|  1.53k|                    self.output_positions.authority_end = base.positions.authority_end;
 1292|  1.53k|                    self.output_positions.path_end = base.positions.path_end;
 1293|  1.53k|                    self.output_positions.query_end = base.positions.query_end;
 1294|  1.53k|                    self.output.push('#');
 1295|  1.53k|                    self.parse_fragment()
 1296|       |                }
 1297|       |                _ => {
 1298|   209k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1299|   209k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1300|   209k|                    self.output_positions.authority_end = base.positions.authority_end;
 1301|   209k|                    self.output_positions.path_end = base.positions.path_end;
 1302|   209k|                    self.remove_last_segment();
 1303|   209k|                    if self.output.len() > base.positions.scheme_end {
 1304|   176k|                        // We have some path or authority, we keep a base '/'
 1305|   176k|                        self.output.push('/');
 1306|   176k|                    }
 1307|   209k|                    self.parse_path()
 1308|       |                }
 1309|       |            }
 1310|       |        } else {
 1311|      0|            self.output_positions.scheme_end = 0;
 1312|      0|            self.input_scheme_end = 0;
 1313|      0|            if self.input.starts_with('/') {
 1314|      0|                self.input.next();
 1315|      0|                self.output.push('/');
 1316|      0|                self.parse_path_or_authority()
 1317|       |            } else {
 1318|      0|                self.output_positions.authority_end = 0;
 1319|      0|                self.parse_path()
 1320|       |            }
 1321|       |        }
 1322|   578k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E15parse_authorityCseXCYVcIQZ7o_5oxttl:
 1342|  21.4k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|   221k|        loop {
 1345|   221k|            let c = self.input.next();
 1346|   221k|            match c {
 1347|       |                Some('@') => {
 1348|    998|                    self.output.push('@');
 1349|    998|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|  13.8k|                    self.input = ParserInput {
 1353|  13.8k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|  13.8k|                        position: self.input_scheme_end + 2,
 1355|  13.8k|                    };
 1356|  13.8k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|  13.8k|                    return self.parse_host();
 1358|       |                }
 1359|   207k|                Some(c) => {
 1360|   207k|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|  21.4k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E16parse_path_startCseXCYVcIQZ7o_5oxttl:
 1428|  11.6k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|  11.6k|        match c {
 1430|       |            None => {
 1431|  7.09k|                self.output_positions.path_end = self.output.len();
 1432|  7.09k|                self.output_positions.query_end = self.output.len();
 1433|  7.09k|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|  1.07k|                self.output_positions.path_end = self.output.len();
 1437|  1.07k|                self.output.push('?');
 1438|  1.07k|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|    316|                self.output_positions.path_end = self.output.len();
 1442|    316|                self.output_positions.query_end = self.output.len();
 1443|    316|                self.output.push('#');
 1444|    316|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|  3.22k|                self.output.push('/');
 1448|  3.22k|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|  11.6k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E18parse_scheme_startCseXCYVcIQZ7o_5oxttl:
 1212|   599k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|   599k|        match self.input.front() {
 1214|    544|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|   576k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|   518k|            _ => self.parse_relative(),
 1217|       |        }
 1218|   599k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E19remove_last_segmentCseXCYVcIQZ7o_5oxttl:
 1514|   594k|    fn remove_last_segment(&mut self) {
 1515|   594k|        let last_slash_position = self.output.as_str()[self.output_positions.authority_end..]
 1516|   594k|            .rfind('/')
 1517|   594k|            .unwrap_or(0);
 1518|   594k|        self.output
 1519|   594k|            .truncate(last_slash_position + self.output_positions.authority_end)
 1520|   594k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E20parse_relative_slashCseXCYVcIQZ7o_5oxttl:
 1324|   332k|    fn parse_relative_slash(&mut self, base: &IriRef<&'a str>) -> Result<(), IriParseError> {
 1325|   332k|        if self.input.starts_with('/') {
 1326|  13.9k|            self.input.next();
 1327|  13.9k|            self.output.push_str(&base.iri[..base.positions.scheme_end]);
 1328|  13.9k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1329|  13.9k|            self.output.push('/');
 1330|  13.9k|            self.output.push('/');
 1331|  13.9k|            self.parse_authority()
 1332|       |        } else {
 1333|   318k|            self.output
 1334|   318k|                .push_str(&base.iri[..base.positions.authority_end]);
 1335|   318k|            self.output.push('/');
 1336|   318k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1337|   318k|            self.output_positions.authority_end = base.positions.authority_end;
 1338|   318k|            self.parse_path()
 1339|       |        }
 1340|   332k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E23parse_path_or_authorityCseXCYVcIQZ7o_5oxttl:
 1252|  8.77k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|  8.77k|        if self.input.starts_with('/') {
 1254|  7.55k|            self.input.next();
 1255|  7.55k|            self.output.push('/');
 1256|  7.55k|            self.parse_authority()
 1257|       |        } else {
 1258|  1.22k|            self.output_positions.authority_end = self.output.len() - 1;
 1259|  1.22k|            self.parse_path()
 1260|       |        }
 1261|  8.77k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E27read_url_codepoint_or_echarCseXCYVcIQZ7o_5oxttl:
 1523|  1.51M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|  1.51M|        if UNCHECKED || is_url_code_point(c) {
 1525|  1.45M|            self.output.push(c);
 1526|  1.45M|            Ok(())
 1527|  67.3k|        } else if c == '%' {
 1528|  4.98k|            self.read_echar()
 1529|       |        } else {
 1530|  62.4k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|  1.51M|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E33read_url_query_codepoint_or_echarCseXCYVcIQZ7o_5oxttl:
 1535|   172k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|   172k|        if UNCHECKED || is_url_query_code_point(c) {
 1537|   166k|            self.output.push(c);
 1538|   166k|            Ok(())
 1539|  6.05k|        } else if c == '%' {
 1540|  1.65k|            self.read_echar()
 1541|       |        } else {
 1542|  4.40k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|   172k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E5parseCseXCYVcIQZ7o_5oxttl:
 1187|   599k|    fn parse(
 1188|   599k|        iri: &'a str,
 1189|   599k|        base: Option<IriRef<&'a str>>,
 1190|   599k|        output: &'a mut O,
 1191|   599k|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|   599k|        let mut parser = Self {
 1193|   599k|            iri,
 1194|   599k|            base,
 1195|   599k|            input: ParserInput {
 1196|   599k|                value: iri.chars(),
 1197|   599k|                position: 0,
 1198|   599k|            },
 1199|   599k|            output,
 1200|   599k|            output_positions: IriElementsPositions {
 1201|   599k|                scheme_end: 0,
 1202|   599k|                authority_end: 0,
 1203|   599k|                path_end: 0,
 1204|   599k|                query_end: 0,
 1205|   599k|            },
 1206|   599k|            input_scheme_end: 0,
 1207|   599k|        };
 1208|   599k|        parser.parse_scheme_start()?;
 1209|   526k|        Ok(parser.output_positions)
 1210|   599k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb1_E10parse_hostCseXCYVcIQZ7o_5oxttl:
 1366|  10.7k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|  10.7k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|  1.11k|            let start_position = self.input.position;
 1370|  21.4k|            while let Some(c) = self.input.next() {
 1371|  21.0k|                self.output.push(c);
 1372|  21.0k|                if c == ']' {
 1373|    767|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|    767|                    if !UNCHECKED {
 1375|      0|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|      0|                        }
 1378|    767|                    }
 1379|       |
 1380|    767|                    let c = self.input.next();
 1381|    767|                    return match c {
 1382|       |                        Some(':') => {
 1383|    155|                            self.output.push(':');
 1384|    155|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|    235|                            self.output_positions.authority_end = self.output.len();
 1388|    235|                            self.parse_path_start(c)
 1389|       |                        }
 1390|    377|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|  20.3k|                }
 1393|       |            }
 1394|    344|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|   124k|            loop {
 1398|   124k|                let c = self.input.next();
 1399|   124k|                match c {
 1400|       |                    Some(':') => {
 1401|  1.99k|                        self.output.push(':');
 1402|  1.99k|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|  7.61k|                        self.output_positions.authority_end = self.output.len();
 1406|  7.61k|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|   114k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|  10.7k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb1_E10parse_pathCseXCYVcIQZ7o_5oxttl:
 1457|   274k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|  1.30M|        loop {
 1459|  1.30M|            let c = self.input.next();
 1460|  1.30M|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|   361k|                    if self.output.as_str().ends_with("/..") {
 1463|    538|                        self.remove_last_segment();
 1464|    538|                        self.remove_last_segment();
 1465|    538|                        self.output.push('/');
 1466|   360k|                    } else if self.output.as_str().ends_with("/.") {
 1467|   209k|                        self.remove_last_segment();
 1468|   209k|                        self.output.push('/');
 1469|   209k|                    } else if c == Some('/') {
 1470|  86.2k|                        self.output.push('/');
 1471|  86.2k|                    }
 1472|       |
 1473|   361k|                    if c == Some('?') {
 1474|  2.79k|                        self.output_positions.path_end = self.output.len();
 1475|  2.79k|                        self.output.push('?');
 1476|  2.79k|                        return self.parse_query();
 1477|   358k|                    } else if c == Some('#') {
 1478|  2.14k|                        self.output_positions.path_end = self.output.len();
 1479|  2.14k|                        self.output_positions.query_end = self.output.len();
 1480|  2.14k|                        self.output.push('#');
 1481|  2.14k|                        return self.parse_fragment();
 1482|   356k|                    } else if c.is_none() {
 1483|   269k|                        self.output_positions.path_end = self.output.len();
 1484|   269k|                        self.output_positions.query_end = self.output.len();
 1485|   269k|                        return Ok(());
 1486|  86.6k|                    }
 1487|       |                }
 1488|   948k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|   274k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb1_E10parse_portCseXCYVcIQZ7o_5oxttl:
 1414|  2.14k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|  4.01k|        loop {
 1416|  4.01k|            let c = self.input.next();
 1417|  3.55k|            match c {
 1418|  3.55k|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|  1.47k|                    self.output_positions.authority_end = self.output.len();
 1421|  1.47k|                    return self.parse_path_start(c);
 1422|       |                }
 1423|    672|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|  2.14k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb1_E11parse_queryCseXCYVcIQZ7o_5oxttl:
 1493|  8.91k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|   124k|        while let Some(c) = self.input.next() {
 1495|   116k|            if c == '#' {
 1496|    676|                self.output_positions.query_end = self.output.len();
 1497|    676|                self.output.push('#');
 1498|    676|                return self.parse_fragment();
 1499|       |            } else {
 1500|   115k|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|  8.24k|        self.output_positions.query_end = self.output.len();
 1504|  8.24k|        Ok(())
 1505|  8.91k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb1_E12parse_schemeCseXCYVcIQZ7o_5oxttl:
 1220|  40.4k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|   159k|        loop {
 1222|   159k|            let c = self.input.next();
 1223|   153k|            match c {
 1224|   153k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|   118k|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|  10.5k|                    self.output.push(':');
 1229|  10.5k|                    self.output_positions.scheme_end = self.output.len();
 1230|  10.5k|                    self.input_scheme_end = self.input.position;
 1231|  10.5k|                    return if self.input.starts_with('/') {
 1232|  4.36k|                        self.input.next();
 1233|  4.36k|                        self.output.push('/');
 1234|  4.36k|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|  6.22k|                        self.output_positions.authority_end = self.output.len();
 1237|  6.22k|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|  29.8k|                    self.input = ParserInput {
 1242|  29.8k|                        value: self.iri.chars(),
 1243|  29.8k|                        position: 0,
 1244|  29.8k|                    }; // reset
 1245|  29.8k|                    self.output.clear();
 1246|  29.8k|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|  40.4k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb1_E14parse_fragmentCseXCYVcIQZ7o_5oxttl:
 1507|  3.71k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|  47.9k|        while let Some(c) = self.input.next() {
 1509|  44.2k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|  3.71k|        Ok(())
 1512|  3.71k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb1_E14parse_relativeCseXCYVcIQZ7o_5oxttl:
 1263|   288k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1264|   288k|        if let Some(base) = self.base {
 1265|   288k|            match self.input.front() {
 1266|       |                None => {
 1267|  11.5k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1268|  11.5k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1269|  11.5k|                    self.output_positions.authority_end = base.positions.authority_end;
 1270|  11.5k|                    self.output_positions.path_end = base.positions.path_end;
 1271|  11.5k|                    self.output_positions.query_end = base.positions.query_end;
 1272|  11.5k|                    Ok(())
 1273|       |                }
 1274|       |                Some('/') => {
 1275|   165k|                    self.input.next();
 1276|   165k|                    self.parse_relative_slash(&base)
 1277|       |                }
 1278|       |                Some('?') => {
 1279|  5.50k|                    self.input.next();
 1280|  5.50k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1281|  5.50k|                    self.output.push('?');
 1282|  5.50k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1283|  5.50k|                    self.output_positions.authority_end = base.positions.authority_end;
 1284|  5.50k|                    self.output_positions.path_end = base.positions.path_end;
 1285|  5.50k|                    self.parse_query()
 1286|       |                }
 1287|       |                Some('#') => {
 1288|    681|                    self.input.next();
 1289|    681|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1290|    681|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1291|    681|                    self.output_positions.authority_end = base.positions.authority_end;
 1292|    681|                    self.output_positions.path_end = base.positions.path_end;
 1293|    681|                    self.output_positions.query_end = base.positions.query_end;
 1294|    681|                    self.output.push('#');
 1295|    681|                    self.parse_fragment()
 1296|       |                }
 1297|       |                _ => {
 1298|   104k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1299|   104k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1300|   104k|                    self.output_positions.authority_end = base.positions.authority_end;
 1301|   104k|                    self.output_positions.path_end = base.positions.path_end;
 1302|   104k|                    self.remove_last_segment();
 1303|   104k|                    if self.output.len() > base.positions.scheme_end {
 1304|  88.2k|                        // We have some path or authority, we keep a base '/'
 1305|  88.2k|                        self.output.push('/');
 1306|  88.2k|                    }
 1307|   104k|                    self.parse_path()
 1308|       |                }
 1309|       |            }
 1310|       |        } else {
 1311|      0|            self.output_positions.scheme_end = 0;
 1312|      0|            self.input_scheme_end = 0;
 1313|      0|            if self.input.starts_with('/') {
 1314|      0|                self.input.next();
 1315|      0|                self.output.push('/');
 1316|      0|                self.parse_path_or_authority()
 1317|       |            } else {
 1318|      0|                self.output_positions.authority_end = 0;
 1319|      0|                self.parse_path()
 1320|       |            }
 1321|       |        }
 1322|   288k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb1_E15parse_authorityCseXCYVcIQZ7o_5oxttl:
 1342|  10.7k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|   133k|        loop {
 1345|   133k|            let c = self.input.next();
 1346|   133k|            match c {
 1347|       |                Some('@') => {
 1348|    503|                    self.output.push('@');
 1349|    503|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|  10.2k|                    self.input = ParserInput {
 1353|  10.2k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|  10.2k|                        position: self.input_scheme_end + 2,
 1355|  10.2k|                    };
 1356|  10.2k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|  10.2k|                    return self.parse_host();
 1358|       |                }
 1359|   122k|                Some(c) => {
 1360|   122k|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|  10.7k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb1_E16parse_path_startCseXCYVcIQZ7o_5oxttl:
 1428|  9.31k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|  9.31k|        match c {
 1430|       |            None => {
 1431|  4.57k|                self.output_positions.path_end = self.output.len();
 1432|  4.57k|                self.output_positions.query_end = self.output.len();
 1433|  4.57k|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|    621|                self.output_positions.path_end = self.output.len();
 1437|    621|                self.output.push('?');
 1438|    621|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|    216|                self.output_positions.path_end = self.output.len();
 1442|    216|                self.output_positions.query_end = self.output.len();
 1443|    216|                self.output.push('#');
 1444|    216|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|  3.90k|                self.output.push('/');
 1448|  3.90k|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|  9.31k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb1_E18parse_scheme_startCseXCYVcIQZ7o_5oxttl:
 1212|   299k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|   299k|        match self.input.front() {
 1214|    271|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|   287k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|   258k|            _ => self.parse_relative(),
 1217|       |        }
 1218|   299k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb1_E19remove_last_segmentCseXCYVcIQZ7o_5oxttl:
 1514|   315k|    fn remove_last_segment(&mut self) {
 1515|   315k|        let last_slash_position = self.output.as_str()[self.output_positions.authority_end..]
 1516|   315k|            .rfind('/')
 1517|   315k|            .unwrap_or(0);
 1518|   315k|        self.output
 1519|   315k|            .truncate(last_slash_position + self.output_positions.authority_end)
 1520|   315k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb1_E20parse_relative_slashCseXCYVcIQZ7o_5oxttl:
 1324|   165k|    fn parse_relative_slash(&mut self, base: &IriRef<&'a str>) -> Result<(), IriParseError> {
 1325|   165k|        if self.input.starts_with('/') {
 1326|  6.95k|            self.input.next();
 1327|  6.95k|            self.output.push_str(&base.iri[..base.positions.scheme_end]);
 1328|  6.95k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1329|  6.95k|            self.output.push('/');
 1330|  6.95k|            self.output.push('/');
 1331|  6.95k|            self.parse_authority()
 1332|       |        } else {
 1333|   158k|            self.output
 1334|   158k|                .push_str(&base.iri[..base.positions.authority_end]);
 1335|   158k|            self.output.push('/');
 1336|   158k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1337|   158k|            self.output_positions.authority_end = base.positions.authority_end;
 1338|   158k|            self.parse_path()
 1339|       |        }
 1340|   165k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb1_E23parse_path_or_authorityCseXCYVcIQZ7o_5oxttl:
 1252|  4.36k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|  4.36k|        if self.input.starts_with('/') {
 1254|  3.75k|            self.input.next();
 1255|  3.75k|            self.output.push('/');
 1256|  3.75k|            self.parse_authority()
 1257|       |        } else {
 1258|    610|            self.output_positions.authority_end = self.output.len() - 1;
 1259|    610|            self.parse_path()
 1260|       |        }
 1261|  4.36k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb1_E27read_url_codepoint_or_echarCseXCYVcIQZ7o_5oxttl:
 1523|  1.22M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|  1.22M|        if UNCHECKED || is_url_code_point(c) {
 1525|  1.22M|            self.output.push(c);
 1526|  1.22M|            Ok(())
 1527|      0|        } else if c == '%' {
 1528|      0|            self.read_echar()
 1529|       |        } else {
 1530|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|  1.22M|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb1_E33read_url_query_codepoint_or_echarCseXCYVcIQZ7o_5oxttl:
 1535|   115k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|   115k|        if UNCHECKED || is_url_query_code_point(c) {
 1537|   115k|            self.output.push(c);
 1538|   115k|            Ok(())
 1539|      0|        } else if c == '%' {
 1540|      0|            self.read_echar()
 1541|       |        } else {
 1542|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|   115k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb1_E5parseCseXCYVcIQZ7o_5oxttl:
 1187|   299k|    fn parse(
 1188|   299k|        iri: &'a str,
 1189|   299k|        base: Option<IriRef<&'a str>>,
 1190|   299k|        output: &'a mut O,
 1191|   299k|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|   299k|        let mut parser = Self {
 1193|   299k|            iri,
 1194|   299k|            base,
 1195|   299k|            input: ParserInput {
 1196|   299k|                value: iri.chars(),
 1197|   299k|                position: 0,
 1198|   299k|            },
 1199|   299k|            output,
 1200|   299k|            output_positions: IriElementsPositions {
 1201|   299k|                scheme_end: 0,
 1202|   299k|                authority_end: 0,
 1203|   299k|                path_end: 0,
 1204|   299k|                query_end: 0,
 1205|   299k|            },
 1206|   299k|            input_scheme_end: 0,
 1207|   299k|        };
 1208|   299k|        parser.parse_scheme_start()?;
 1209|   297k|        Ok(parser.output_positions)
 1210|   299k|    }
_RNvMsp_CslEbQcIb7A5U_5oxiriINtB5_3IriNtNtCs80BIJ2NAVqC_5alloc6string6StringE15parse_uncheckedCseXCYVcIQZ7o_5oxttl:
  574|  14.9k|    pub fn parse_unchecked(iri: T) -> Result<Self, IriParseError> {
  575|  14.9k|        IriRef::parse_unchecked(iri)?.try_into()
  576|  14.9k|    }
_RNvMsp_CslEbQcIb7A5U_5oxiriINtB5_3IriNtNtCs80BIJ2NAVqC_5alloc6string6StringE17resolve_uncheckedCseXCYVcIQZ7o_5oxttl:
  605|   299k|    pub fn resolve_unchecked(&self, iri: &str) -> Result<Iri<String>, IriParseError> {
  606|   299k|        Ok(Iri(self.0.resolve_unchecked(iri)?))
  607|   299k|    }
_RNvMsp_CslEbQcIb7A5U_5oxiriINtB5_3IriNtNtCs80BIJ2NAVqC_5alloc6string6StringE4pathCseXCYVcIQZ7o_5oxttl:
  730|  6.93k|    pub fn path(&self) -> &str {
  731|  6.93k|        self.0.path()
  732|  6.93k|    }
_RNvMsp_CslEbQcIb7A5U_5oxiriINtB5_3IriNtNtCs80BIJ2NAVqC_5alloc6string6StringE6as_strCseXCYVcIQZ7o_5oxttl:
  664|  3.70k|    pub fn as_str(&self) -> &str {
  665|  3.70k|        self.0.as_str()
  666|  3.70k|    }
_RNvMsp_CslEbQcIb7A5U_5oxiriINtB5_3IriNtNtCs80BIJ2NAVqC_5alloc6string6StringE7resolveCseXCYVcIQZ7o_5oxttl:
  591|   599k|    pub fn resolve(&self, iri: &str) -> Result<Iri<String>, IriParseError> {
  592|   599k|        Ok(Iri(self.0.resolve(iri)?))
  593|   599k|    }
_RNvXsL_CslEbQcIb7A5U_5oxiriINtB5_3IriNtNtCs80BIJ2NAVqC_5alloc6string6StringENtNtCs433v4DNuM1R_4core3fmt7Display3fmtCseXCYVcIQZ7o_5oxttl:
  909|  19.4k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  910|  19.4k|        self.0.fmt(f)
  911|  19.4k|    }
_RNvXsg_CslEbQcIb7A5U_5oxiriINtB5_6IriRefNtNtCs80BIJ2NAVqC_5alloc6string6StringENtNtCs433v4DNuM1R_4core3fmt7Display3fmtCseXCYVcIQZ7o_5oxttl:
  423|  19.4k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  424|  19.4k|        self.iri.fmt(f)
  425|  19.4k|    }
_RNvXsZ_CslEbQcIb7A5U_5oxiriNtNtCs80BIJ2NAVqC_5alloc6string6StringNtB5_12OutputBuffer3lenCseXCYVcIQZ7o_5oxttl:
 1137|  1.95M|    fn len(&self) -> usize {
 1138|  1.95M|        self.len()
 1139|  1.95M|    }
_RNvXsZ_CslEbQcIb7A5U_5oxiriNtNtCs80BIJ2NAVqC_5alloc6string6StringNtB5_12OutputBuffer4pushCseXCYVcIQZ7o_5oxttl:
 1117|  5.09M|    fn push(&mut self, c: char) {
 1118|  5.09M|        self.push(c);
 1119|  5.09M|    }
_RNvXsZ_CslEbQcIb7A5U_5oxiriNtNtCs80BIJ2NAVqC_5alloc6string6StringNtB5_12OutputBuffer5clearCseXCYVcIQZ7o_5oxttl:
 1127|  89.8k|    fn clear(&mut self) {
 1128|  89.8k|        self.clear();
 1129|  89.8k|    }
_RNvXsZ_CslEbQcIb7A5U_5oxiriNtNtCs80BIJ2NAVqC_5alloc6string6StringNtB5_12OutputBuffer6as_strCseXCYVcIQZ7o_5oxttl:
 1142|  2.86M|    fn as_str(&self) -> &str {
 1143|  2.86M|        self.as_str()
 1144|  2.86M|    }
_RNvXsZ_CslEbQcIb7A5U_5oxiriNtNtCs80BIJ2NAVqC_5alloc6string6StringNtB5_12OutputBuffer8push_strCseXCYVcIQZ7o_5oxttl:
 1122|   866k|    fn push_str(&mut self, s: &str) {
 1123|   866k|        self.push_str(s);
 1124|   866k|    }
_RNvXsZ_CslEbQcIb7A5U_5oxiriNtNtCs80BIJ2NAVqC_5alloc6string6StringNtB5_12OutputBuffer8truncateCseXCYVcIQZ7o_5oxttl:
 1132|   934k|    fn truncate(&mut self, new_len: usize) {
 1133|   934k|        self.truncate(new_len);
 1134|   934k|    }
_RNvCslEbQcIb7A5U_5oxiri17is_url_code_pointCseXCYVcIQZ7o_5oxttl:
 1573|  1.69M|fn is_url_code_point(c: char) -> bool {
 1574|  1.69M|    matches!(c,
 1575|   250k|        'a'..='z'
 1576|   401k|        | 'A'..='Z'
 1577|   400k|        | '0'..='9'
 1578|       |        | '!'
 1579|       |        | '$'
 1580|       |        | '&'
 1581|       |        | '\''
 1582|       |        | '('
 1583|       |        | ')'
 1584|       |        | '*'
 1585|       |        | '+'
 1586|       |        | ','
 1587|       |        | '-'
 1588|       |        | '.'
 1589|       |        | '/'
 1590|       |        | ':'
 1591|       |        | ';'
 1592|       |        | '='
 1593|       |        | '?'
 1594|       |        | '@'
 1595|       |        | '_'
 1596|       |        | '~'
 1597|  19.4k|        | '\u{A0}'..='\u{D7FF}'
 1598|  3.96k|        | '\u{F900}'..='\u{FDCF}'
 1599|  3.02k|        | '\u{FDF0}'..='\u{FFEF}'
 1600|  3.02k|        | '\u{10000}'..='\u{1FFFD}'
 1601|  3.02k|        | '\u{20000}'..='\u{2FFFD}'
 1602|  2.98k|        | '\u{30000}'..='\u{3FFFD}'
 1603|  2.98k|        | '\u{40000}'..='\u{4FFFD}'
 1604|    576|        | '\u{50000}'..='\u{5FFFD}'
 1605|    576|        | '\u{60000}'..='\u{6FFFD}'
 1606|    576|        | '\u{70000}'..='\u{7FFFD}'
 1607|    576|        | '\u{80000}'..='\u{8FFFD}'
 1608|    576|        | '\u{90000}'..='\u{9FFFD}'
 1609|    576|        | '\u{A0000}'..='\u{AFFFD}'
 1610|      6|        | '\u{B0000}'..='\u{BFFFD}'
 1611|      0|        | '\u{C0000}'..='\u{CFFFD}'
 1612|      0|        | '\u{D0000}'..='\u{DFFFD}'
 1613|      0|        | '\u{E1000}'..='\u{EFFFD}'
 1614|       |    )
 1615|  1.69M|}
_RNvCslEbQcIb7A5U_5oxiri23is_url_query_code_pointCseXCYVcIQZ7o_5oxttl:
 1618|   172k|fn is_url_query_code_point(c: char) -> bool {
 1619|   172k|    is_url_code_point(c)
 1620|  8.55k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1621|   172k|}
_RNvMs10_CslEbQcIb7A5U_5oxiriNtB6_11ParserInput11starts_withCseXCYVcIQZ7o_5oxttl:
 1169|   608k|    fn starts_with(&self, c: char) -> bool {
 1170|   608k|        self.value.as_str().starts_with(c)
 1171|   608k|    }
_RNvMs10_CslEbQcIb7A5U_5oxiriNtB6_11ParserInput4nextCseXCYVcIQZ7o_5oxttl:
 1154|  5.81M|    fn next(&mut self) -> Option<char> {
 1155|  5.81M|        if let Some(head) = self.value.next() {
 1156|  4.97M|            self.position += head.len_utf8();
 1157|  4.97M|            Some(head)
 1158|       |        } else {
 1159|   836k|            None
 1160|       |        }
 1161|  5.81M|    }
_RNvMs10_CslEbQcIb7A5U_5oxiriNtB6_11ParserInput5frontCseXCYVcIQZ7o_5oxttl:
 1164|  1.78M|    fn front(&self) -> Option<char> {
 1165|  1.78M|        self.value.clone().next()
 1166|  1.78M|    }
_RNvXsY_CslEbQcIb7A5U_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCseXCYVcIQZ7o_5oxttl:
 1105|  59.7k|    fn len(&self) -> usize {
 1106|  59.7k|        self.len
 1107|  59.7k|    }
_RNvXsY_CslEbQcIb7A5U_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCseXCYVcIQZ7o_5oxttl:
 1085|   567k|    fn push(&mut self, c: char) {
 1086|   567k|        self.len += c.len_utf8();
 1087|   567k|    }
_RNvXsY_CslEbQcIb7A5U_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCseXCYVcIQZ7o_5oxttl:
 1110|  29.2k|    fn as_str(&self) -> &str {
 1111|  29.2k|        ""
 1112|  29.2k|    }
_RNvXsY_CslEbQcIb7A5U_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCseXCYVcIQZ7o_5oxttl:
 1100|  11.7k|    fn truncate(&mut self, new_len: usize) {
 1101|  11.7k|        self.len = new_len;
 1102|  11.7k|    }
_RINvMs11_CslEbQcIb7A5U_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECs2NsVQwDzFGg_5oxrdf:
 1567|  1.20k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1568|  1.20k|        Err(IriParseError { kind })
 1569|  1.20k|    }
_RNCNvMs11_CslEbQcIb7A5U_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0Cs2NsVQwDzFGg_5oxrdf:
 1550|  3.35k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_CslEbQcIb7A5U_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0Cs2NsVQwDzFGg_5oxrdf:
 1551|  3.24k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMCslEbQcIb7A5U_5oxiriINtB2_6IriRefNtNtCs80BIJ2NAVqC_5alloc6string6StringE10into_innerCs2NsVQwDzFGg_5oxrdf:
  191|  1.20M|    pub fn into_inner(self) -> T {
  192|  1.20M|        self.iri
  193|  1.20M|    }
_RNvMCslEbQcIb7A5U_5oxiriINtB2_6IriRefNtNtCs80BIJ2NAVqC_5alloc6string6StringE11is_absoluteCs2NsVQwDzFGg_5oxrdf:
  205|   429k|    pub fn is_absolute(&self) -> bool {
  206|   429k|        self.positions.scheme_end != 0
  207|   429k|    }
_RNvMCslEbQcIb7A5U_5oxiriINtB2_6IriRefNtNtCs80BIJ2NAVqC_5alloc6string6StringE5parseCs2NsVQwDzFGg_5oxrdf:
   58|   414k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|   414k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|   414k|        Ok(Self { iri, positions })
   61|   414k|    }
_RNvMCslEbQcIb7A5U_5oxiriINtB2_6IriRefReE11is_absoluteCs2NsVQwDzFGg_5oxrdf:
  205|  13.0k|    pub fn is_absolute(&self) -> bool {
  206|  13.0k|        self.positions.scheme_end != 0
  207|  13.0k|    }
_RNvMCslEbQcIb7A5U_5oxiriINtB2_6IriRefReE5parseCs2NsVQwDzFGg_5oxrdf:
   58|  14.2k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  14.2k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  13.0k|        Ok(Self { iri, positions })
   61|  14.2k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCs2NsVQwDzFGg_5oxrdf:
 1366|   373k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|   373k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|      0|            let start_position = self.input.position;
 1370|      0|            while let Some(c) = self.input.next() {
 1371|      0|                self.output.push(c);
 1372|      0|                if c == ']' {
 1373|      0|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|      0|                    if !UNCHECKED {
 1375|      0|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|      0|                        }
 1378|      0|                    }
 1379|       |
 1380|      0|                    let c = self.input.next();
 1381|      0|                    return match c {
 1382|       |                        Some(':') => {
 1383|      0|                            self.output.push(':');
 1384|      0|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|      0|                            self.output_positions.authority_end = self.output.len();
 1388|      0|                            self.parse_path_start(c)
 1389|       |                        }
 1390|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|      0|                }
 1393|       |            }
 1394|      0|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|  4.30M|            loop {
 1398|  4.30M|                let c = self.input.next();
 1399|  4.30M|                match c {
 1400|       |                    Some(':') => {
 1401|  1.79k|                        self.output.push(':');
 1402|  1.79k|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|   371k|                        self.output_positions.authority_end = self.output.len();
 1406|   371k|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|  3.93M|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|   373k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCs2NsVQwDzFGg_5oxrdf:
 1457|   424k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|  3.63M|        loop {
 1459|  3.63M|            let c = self.input.next();
 1460|  3.63M|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|   786k|                    if self.output.as_str().ends_with("/..") {
 1463|      0|                        self.remove_last_segment();
 1464|      0|                        self.remove_last_segment();
 1465|      0|                        self.output.push('/');
 1466|   786k|                    } else if self.output.as_str().ends_with("/.") {
 1467|      0|                        self.remove_last_segment();
 1468|      0|                        self.output.push('/');
 1469|   786k|                    } else if c == Some('/') {
 1470|   361k|                        self.output.push('/');
 1471|   424k|                    }
 1472|       |
 1473|   786k|                    if c == Some('?') {
 1474|  2.47k|                        self.output_positions.path_end = self.output.len();
 1475|  2.47k|                        self.output.push('?');
 1476|  2.47k|                        return self.parse_query();
 1477|   783k|                    } else if c == Some('#') {
 1478|   115k|                        self.output_positions.path_end = self.output.len();
 1479|   115k|                        self.output_positions.query_end = self.output.len();
 1480|   115k|                        self.output.push('#');
 1481|   115k|                        return self.parse_fragment();
 1482|   668k|                    } else if c.is_none() {
 1483|   306k|                        self.output_positions.path_end = self.output.len();
 1484|   306k|                        self.output_positions.query_end = self.output.len();
 1485|   306k|                        return Ok(());
 1486|   361k|                    }
 1487|       |                }
 1488|  2.84M|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|   424k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCs2NsVQwDzFGg_5oxrdf:
 1414|  1.79k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|  3.00k|        loop {
 1416|  3.00k|            let c = self.input.next();
 1417|  2.89k|            match c {
 1418|  2.89k|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|  1.28k|                    self.output_positions.authority_end = self.output.len();
 1421|  1.28k|                    return self.parse_path_start(c);
 1422|       |                }
 1423|    517|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|  1.79k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCs2NsVQwDzFGg_5oxrdf:
 1547|  3.50k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1548|  3.50k|        let c1 = self.input.next();
 1549|  3.50k|        let c2 = self.input.next();
 1550|  3.50k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1551|  3.24k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1552|       |        {
 1553|  3.24k|            self.output.push('%');
 1554|  3.24k|            self.output.push(c1.unwrap());
 1555|  3.24k|            self.output.push(c2.unwrap());
 1556|  3.24k|            Ok(())
 1557|       |        } else {
 1558|    261|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1559|    261|                Some('%'),
 1560|    261|                c1,
 1561|    261|                c2,
 1562|    261|            ]))
 1563|       |        }
 1564|  3.50k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCs2NsVQwDzFGg_5oxrdf:
 1493|  2.91k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|  58.5k|        while let Some(c) = self.input.next() {
 1495|  55.9k|            if c == '#' {
 1496|    199|                self.output_positions.query_end = self.output.len();
 1497|    199|                self.output.push('#');
 1498|    199|                return self.parse_fragment();
 1499|       |            } else {
 1500|  55.7k|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|  2.58k|        self.output_positions.query_end = self.output.len();
 1504|  2.58k|        Ok(())
 1505|  2.91k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCs2NsVQwDzFGg_5oxrdf:
 1220|   429k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|  2.01M|        loop {
 1222|  2.01M|            let c = self.input.next();
 1223|  2.01M|            match c {
 1224|  2.01M|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|  1.58M|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|   429k|                    self.output.push(':');
 1229|   429k|                    self.output_positions.scheme_end = self.output.len();
 1230|   429k|                    self.input_scheme_end = self.input.position;
 1231|   429k|                    return if self.input.starts_with('/') {
 1232|   397k|                        self.input.next();
 1233|   397k|                        self.output.push('/');
 1234|   397k|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|  31.4k|                        self.output_positions.authority_end = self.output.len();
 1237|  31.4k|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|      0|                    self.input = ParserInput {
 1242|      0|                        value: self.iri.chars(),
 1243|      0|                        position: 0,
 1244|      0|                    }; // reset
 1245|      0|                    self.output.clear();
 1246|      0|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|   429k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCs2NsVQwDzFGg_5oxrdf:
 1507|   116k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|   680k|        while let Some(c) = self.input.next() {
 1509|   564k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|   116k|        Ok(())
 1512|   116k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCs2NsVQwDzFGg_5oxrdf:
 1342|   373k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|  4.32M|        loop {
 1345|  4.32M|            let c = self.input.next();
 1346|  4.32M|            match c {
 1347|       |                Some('@') => {
 1348|    714|                    self.output.push('@');
 1349|    714|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|   372k|                    self.input = ParserInput {
 1353|   372k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|   372k|                        position: self.input_scheme_end + 2,
 1355|   372k|                    };
 1356|   372k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|   372k|                    return self.parse_host();
 1358|       |                }
 1359|  3.95M|                Some(c) => {
 1360|  3.95M|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|   373k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCs2NsVQwDzFGg_5oxrdf:
 1428|   372k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|   372k|        match c {
 1430|       |            None => {
 1431|  2.64k|                self.output_positions.path_end = self.output.len();
 1432|  2.64k|                self.output_positions.query_end = self.output.len();
 1433|  2.64k|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|    444|                self.output_positions.path_end = self.output.len();
 1437|    444|                self.output.push('?');
 1438|    444|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|    159|                self.output_positions.path_end = self.output.len();
 1442|    159|                self.output_positions.query_end = self.output.len();
 1443|    159|                self.output.push('#');
 1444|    159|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|   369k|                self.output.push('/');
 1448|   369k|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|   372k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCs2NsVQwDzFGg_5oxrdf:
 1212|   429k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|   429k|        match self.input.front() {
 1214|      0|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|   429k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|      0|            _ => self.parse_relative(),
 1217|       |        }
 1218|   429k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCs2NsVQwDzFGg_5oxrdf:
 1252|   397k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|   397k|        if self.input.starts_with('/') {
 1254|   373k|            self.input.next();
 1255|   373k|            self.output.push('/');
 1256|   373k|            self.parse_authority()
 1257|       |        } else {
 1258|  23.9k|            self.output_positions.authority_end = self.output.len() - 1;
 1259|  23.9k|            self.parse_path()
 1260|       |        }
 1261|   397k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarCs2NsVQwDzFGg_5oxrdf:
 1523|  11.2M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|  11.2M|        if UNCHECKED || is_url_code_point(c) {
 1525|  11.2M|            self.output.push(c);
 1526|  11.2M|            Ok(())
 1527|  3.27k|        } else if c == '%' {
 1528|  2.96k|            self.read_echar()
 1529|       |        } else {
 1530|    303|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|  11.2M|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E33read_url_query_codepoint_or_echarCs2NsVQwDzFGg_5oxrdf:
 1535|  55.7k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|  55.7k|        if UNCHECKED || is_url_query_code_point(c) {
 1537|  55.0k|            self.output.push(c);
 1538|  55.0k|            Ok(())
 1539|    655|        } else if c == '%' {
 1540|    535|            self.read_echar()
 1541|       |        } else {
 1542|    120|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|  55.7k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCs2NsVQwDzFGg_5oxrdf:
 1187|   429k|    fn parse(
 1188|   429k|        iri: &'a str,
 1189|   429k|        base: Option<IriRef<&'a str>>,
 1190|   429k|        output: &'a mut O,
 1191|   429k|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|   429k|        let mut parser = Self {
 1193|   429k|            iri,
 1194|   429k|            base,
 1195|   429k|            input: ParserInput {
 1196|   429k|                value: iri.chars(),
 1197|   429k|                position: 0,
 1198|   429k|            },
 1199|   429k|            output,
 1200|   429k|            output_positions: IriElementsPositions {
 1201|   429k|                scheme_end: 0,
 1202|   429k|                authority_end: 0,
 1203|   429k|                path_end: 0,
 1204|   429k|                query_end: 0,
 1205|   429k|            },
 1206|   429k|            input_scheme_end: 0,
 1207|   429k|        };
 1208|   429k|        parser.parse_scheme_start()?;
 1209|   427k|        Ok(parser.output_positions)
 1210|   429k|    }
_RNvMsp_CslEbQcIb7A5U_5oxiriINtB5_3IriNtNtCs80BIJ2NAVqC_5alloc6string6StringE10into_innerCs2NsVQwDzFGg_5oxrdf:
  678|  1.20M|    pub fn into_inner(self) -> T {
  679|  1.20M|        self.0.into_inner()
  680|  1.20M|    }
_RNvMsp_CslEbQcIb7A5U_5oxiriINtB5_3IriNtNtCs80BIJ2NAVqC_5alloc6string6StringE5parseCs2NsVQwDzFGg_5oxrdf:
  562|   414k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  563|   414k|        IriRef::parse(iri)?.try_into()
  564|   414k|    }
_RNvMsp_CslEbQcIb7A5U_5oxiriINtB5_3IriReE5parseCs2NsVQwDzFGg_5oxrdf:
  562|  14.2k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  563|  14.2k|        IriRef::parse(iri)?.try_into()
  564|  14.2k|    }
_RNvXsV_CslEbQcIb7A5U_5oxiriINtB5_3IriNtNtCs80BIJ2NAVqC_5alloc6string6StringEINtNtCs433v4DNuM1R_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCs2NsVQwDzFGg_5oxrdf:
  981|   429k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  982|   429k|        if iri.is_absolute() {
  983|   429k|            Ok(Self(iri))
  984|       |        } else {
  985|      0|            Err(IriParseError {
  986|      0|                kind: IriParseErrorKind::NoScheme,
  987|      0|            })
  988|       |        }
  989|   429k|    }
_RNvXsV_CslEbQcIb7A5U_5oxiriINtB5_3IriReEINtNtCs433v4DNuM1R_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCs2NsVQwDzFGg_5oxrdf:
  981|  13.0k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  982|  13.0k|        if iri.is_absolute() {
  983|  13.0k|            Ok(Self(iri))
  984|       |        } else {
  985|      0|            Err(IriParseError {
  986|      0|                kind: IriParseErrorKind::NoScheme,
  987|      0|            })
  988|       |        }
  989|  13.0k|    }
_RNvCslEbQcIb7A5U_5oxiri17is_url_code_pointCs2NsVQwDzFGg_5oxrdf:
 1573|  11.3M|fn is_url_code_point(c: char) -> bool {
 1574|  11.3M|    matches!(c,
 1575|  8.49M|        'a'..='z'
 1576|   109k|        | 'A'..='Z'
 1577|  1.37M|        | '0'..='9'
 1578|       |        | '!'
 1579|       |        | '$'
 1580|       |        | '&'
 1581|       |        | '\''
 1582|       |        | '('
 1583|       |        | ')'
 1584|       |        | '*'
 1585|       |        | '+'
 1586|       |        | ','
 1587|       |        | '-'
 1588|       |        | '.'
 1589|       |        | '/'
 1590|       |        | ':'
 1591|       |        | ';'
 1592|       |        | '='
 1593|       |        | '?'
 1594|       |        | '@'
 1595|       |        | '_'
 1596|       |        | '~'
 1597|  6.83k|        | '\u{A0}'..='\u{D7FF}'
 1598|    883|        | '\u{F900}'..='\u{FDCF}'
 1599|    503|        | '\u{FDF0}'..='\u{FFEF}'
 1600|    503|        | '\u{10000}'..='\u{1FFFD}'
 1601|    503|        | '\u{20000}'..='\u{2FFFD}'
 1602|    501|        | '\u{30000}'..='\u{3FFFD}'
 1603|    501|        | '\u{40000}'..='\u{4FFFD}'
 1604|    224|        | '\u{50000}'..='\u{5FFFD}'
 1605|    224|        | '\u{60000}'..='\u{6FFFD}'
 1606|    224|        | '\u{70000}'..='\u{7FFFD}'
 1607|    224|        | '\u{80000}'..='\u{8FFFD}'
 1608|    224|        | '\u{90000}'..='\u{9FFFD}'
 1609|    224|        | '\u{A0000}'..='\u{AFFFD}'
 1610|      3|        | '\u{B0000}'..='\u{BFFFD}'
 1611|      0|        | '\u{C0000}'..='\u{CFFFD}'
 1612|      0|        | '\u{D0000}'..='\u{DFFFD}'
 1613|      0|        | '\u{E1000}'..='\u{EFFFD}'
 1614|       |    )
 1615|  11.3M|}
_RNvCslEbQcIb7A5U_5oxiri23is_url_query_code_pointCs2NsVQwDzFGg_5oxrdf:
 1618|  55.7k|fn is_url_query_code_point(c: char) -> bool {
 1619|  55.7k|    is_url_code_point(c)
 1620|  1.84k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1621|  55.7k|}
_RNvMs10_CslEbQcIb7A5U_5oxiriNtB6_11ParserInput11starts_withCs2NsVQwDzFGg_5oxrdf:
 1169|  1.19M|    fn starts_with(&self, c: char) -> bool {
 1170|  1.19M|        self.value.as_str().starts_with(c)
 1171|  1.19M|    }
_RNvMs10_CslEbQcIb7A5U_5oxiriNtB6_11ParserInput4nextCs2NsVQwDzFGg_5oxrdf:
 1154|  15.7M|    fn next(&mut self) -> Option<char> {
 1155|  15.7M|        if let Some(head) = self.value.next() {
 1156|  15.3M|            self.position += head.len_utf8();
 1157|  15.3M|            Some(head)
 1158|       |        } else {
 1159|   431k|            None
 1160|       |        }
 1161|  15.7M|    }
_RNvMs10_CslEbQcIb7A5U_5oxiriNtB6_11ParserInput5frontCs2NsVQwDzFGg_5oxrdf:
 1164|   429k|    fn front(&self) -> Option<char> {
 1165|   429k|        self.value.clone().next()
 1166|   429k|    }
_RNvXsY_CslEbQcIb7A5U_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCs2NsVQwDzFGg_5oxrdf:
 1105|  1.71M|    fn len(&self) -> usize {
 1106|  1.71M|        self.len
 1107|  1.71M|    }
_RNvXsY_CslEbQcIb7A5U_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCs2NsVQwDzFGg_5oxrdf:
 1085|  14.9M|    fn push(&mut self, c: char) {
 1086|  14.9M|        self.len += c.len_utf8();
 1087|  14.9M|    }
_RNvXsY_CslEbQcIb7A5U_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCs2NsVQwDzFGg_5oxrdf:
 1110|  1.57M|    fn as_str(&self) -> &str {
 1111|  1.57M|        ""
 1112|  1.57M|    }
_RNvXsY_CslEbQcIb7A5U_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCs2NsVQwDzFGg_5oxrdf:
 1100|   372k|    fn truncate(&mut self, new_len: usize) {
 1101|   372k|        self.len = new_len;
 1102|   372k|    }
_RNvXsW_CslEbQcIb7A5U_5oxiriNtB5_13IriParseErrorNtNtCs433v4DNuM1R_4core3fmt7Display3fmt:
 1016|  76.3k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1017|  76.3k|        match &self.kind {
 1018|    815|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
 1019|  1.40k|            IriParseErrorKind::InvalidHostCharacter(c) => {
 1020|  1.40k|                write!(f, "Invalid character '{c}' in host")
 1021|       |            }
 1022|  1.53k|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({e})"),
 1023|  1.56k|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{c}'"),
 1024|  67.2k|            IriParseErrorKind::InvalidIriCodePoint(c) => {
 1025|  67.2k|                write!(f, "Invalid IRI code point '{c}'")
 1026|       |            }
 1027|  3.78k|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
 1028|  3.78k|                f,
 1029|  3.78k|                "Invalid IRI percent encoding '{}'",
 1030|  3.78k|                cs.iter().flatten().cloned().collect::<String>()
 1031|  3.78k|            ),
 1032|       |        }
 1033|  76.3k|    }

_RNvMNtCslBKszH9vZoh_10ppv_lite864softINtB2_2x2INtNtNtNtB4_6x86_644sse24avx212u32x4x2_avx2NtBP_4NoNIENtBN_2G0E3newCs55XwGWYaZj9_11rand_chacha:
   13|  6.82M|    pub fn new(xs: [W; 2]) -> Self {
   14|  6.82M|        x2(xs, PhantomData)
   15|  6.82M|    }
_RNvXsG_NtCslBKszH9vZoh_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCs433v4DNuM1R_4core3ops3bit6BitXor6bitxorCs55XwGWYaZj9_11rand_chacha:
   22|  2.38M|            fn $fn(self, rhs: Self) -> Self::Output {
   23|  2.38M|                x2::new([self.0[0].$fn(rhs.0[0]), self.0[1].$fn(rhs.0[1])])
   24|  2.38M|            }
_RNvXsM_NtCslBKszH9vZoh_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCs433v4DNuM1R_4core3ops5arith9AddAssign10add_assignCs55XwGWYaZj9_11rand_chacha:
   32|  2.38M|            fn $fn_assign(&mut self, rhs: Self) {
   33|  2.38M|                (self.0[0]).$fn_assign(rhs.0[0]);
   34|  2.38M|                (self.0[1]).$fn_assign(rhs.0[1]);
   35|  2.38M|            }
_RNvXs_NtCslBKszH9vZoh_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right16Cs55XwGWYaZj9_11rand_chacha:
   42|   597k|        fn $fn(self) -> Self {
   43|   597k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   597k|        }
_RNvXs_NtCslBKszH9vZoh_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right20Cs55XwGWYaZj9_11rand_chacha:
   42|   597k|        fn $fn(self) -> Self {
   43|   597k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   597k|        }
_RNvXs_NtCslBKszH9vZoh_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right24Cs55XwGWYaZj9_11rand_chacha:
   42|   597k|        fn $fn(self) -> Self {
   43|   597k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   597k|        }
_RNvXs_NtCslBKszH9vZoh_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right25Cs55XwGWYaZj9_11rand_chacha:
   42|   597k|        fn $fn(self) -> Self {
   43|   597k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   597k|        }
_RNvXsg_NtCslBKszH9vZoh_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words1230Cs55XwGWYaZj9_11rand_chacha:
  208|   597k|    fn shuffle_lane_words1230(self) -> Self {
  209|   597k|        Self::new([
  210|   597k|            self.0[0].shuffle_lane_words1230(),
  211|   597k|            self.0[1].shuffle_lane_words1230(),
  212|   597k|        ])
  213|   597k|    }
_RNvXsg_NtCslBKszH9vZoh_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words2301Cs55XwGWYaZj9_11rand_chacha:
  201|   597k|    fn shuffle_lane_words2301(self) -> Self {
  202|   597k|        Self::new([
  203|   597k|            self.0[0].shuffle_lane_words2301(),
  204|   597k|            self.0[1].shuffle_lane_words2301(),
  205|   597k|        ])
  206|   597k|    }
_RNvXsg_NtCslBKszH9vZoh_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words3012Cs55XwGWYaZj9_11rand_chacha:
  215|   597k|    fn shuffle_lane_words3012(self) -> Self {
  216|   597k|        Self::new([
  217|   597k|            self.0[0].shuffle_lane_words3012(),
  218|   597k|            self.0[1].shuffle_lane_words3012(),
  219|   597k|        ])
  220|   597k|    }

_RINvYINtNtCslBKszH9vZoh_10ppv_lite866x86_6410SseMachineNtB6_5YesS3NtB6_5YesS4NtB6_4NoNIENtNtB8_5types7Machine7read_leINtNtB6_4sse210u32x4_sse2BR_B12_B1d_EECs55XwGWYaZj9_11rand_chacha:
  259|    390|    fn read_le<V>(self, input: &[u8]) -> V
  260|    390|    where
  261|    390|        V: StoreBytes,
  262|    390|    {
  263|    390|        unsafe { V::unsafe_read_le(input) }
  264|    390|    }
_RINvYINtNtCslBKszH9vZoh_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine3vecINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EAmj4_ECs55XwGWYaZj9_11rand_chacha:
  251|  49.7k|    fn vec<V, A>(self, a: A) -> V
  252|  49.7k|    where
  253|  49.7k|        V: MultiLane<A>,
  254|  49.7k|    {
  255|  49.7k|        V::from_lanes(a)
  256|  49.7k|    }
_RINvYINtNtCslBKszH9vZoh_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec128_storageINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EECs55XwGWYaZj9_11rand_chacha:
  246|   448k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|   448k|        unsafe { V::unpack(s) }
  248|   448k|    }
_RINvYINtNtCslBKszH9vZoh_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec512_storageINtNtB8_4soft2x2INtNtNtB6_4sse24avx212u32x4x2_avx2BS_ENtB2b_2G0EECs55XwGWYaZj9_11rand_chacha:
  246|  49.7k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|  49.7k|        unsafe { V::unpack(s) }
  248|  49.7k|    }

_RNvXNtCslBKszH9vZoh_10ppv_lite866x86_64INtB2_10SseMachineNtB2_5YesS3NtB2_5YesS4NtB2_4NoNIENtNtB4_5types7Machine8instanceCs55XwGWYaZj9_11rand_chacha:
   64|    195|    unsafe fn instance() -> Self {
   65|    195|        SseMachine(PhantomData)
   66|    195|    }
_RNvXs_NtCslBKszH9vZoh_10ppv_lite866x86_64INtB4_11Avx2MachineNtB4_4NoNIENtNtB6_5types7Machine8instanceCs55XwGWYaZj9_11rand_chacha:
   92|  49.7k|    unsafe fn instance() -> Self {
   93|  49.7k|        Avx2Machine(PhantomData)
   94|  49.7k|    }
_RNvNtCs55XwGWYaZj9_11rand_chacha4guts11refill_wide:
  250|  49.7k|        $($pub$(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  251|  49.7k|            #[inline(always)]
  252|  49.7k|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  253|  49.7k|            use std::arch::x86_64::*;
  254|  49.7k|            #[target_feature(enable = "avx2")]
  255|  49.7k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  49.7k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  49.7k|                _mm256_zeroupper();
  258|  49.7k|                ret
  259|  49.7k|            }
  260|  49.7k|            #[target_feature(enable = "avx")]
  261|  49.7k|            #[target_feature(enable = "sse4.1")]
  262|  49.7k|            #[target_feature(enable = "ssse3")]
  263|  49.7k|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  264|  49.7k|                let ret = fn_impl($crate::x86_64::AVX::instance(), $($arg),*);
  265|  49.7k|                _mm256_zeroupper();
  266|  49.7k|                ret
  267|  49.7k|            }
  268|  49.7k|            #[target_feature(enable = "sse4.1")]
  269|  49.7k|            #[target_feature(enable = "ssse3")]
  270|  49.7k|            unsafe fn impl_sse41($($arg: $argty),*) -> $ret {
  271|  49.7k|                fn_impl($crate::x86_64::SSE41::instance(), $($arg),*)
  272|  49.7k|            }
  273|  49.7k|            #[target_feature(enable = "ssse3")]
  274|  49.7k|            unsafe fn impl_ssse3($($arg: $argty),*) -> $ret {
  275|  49.7k|                fn_impl($crate::x86_64::SSSE3::instance(), $($arg),*)
  276|  49.7k|            }
  277|  49.7k|            #[target_feature(enable = "sse2")]
  278|  49.7k|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  279|  49.7k|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  280|  49.7k|            }
  281|  49.7k|            unsafe {
  282|  49.7k|                if is_x86_feature_detected!("avx2") {
  283|  49.7k|                    impl_avx2($($arg),*)
  284|      0|                } else if is_x86_feature_detected!("avx") {
  285|      0|                    impl_avx($($arg),*)
  286|      0|                } else if is_x86_feature_detected!("sse4.1") {
  287|      0|                    impl_sse41($($arg),*)
  288|      0|                } else if is_x86_feature_detected!("ssse3") {
  289|      0|                    impl_ssse3($($arg),*)
  290|      0|                } else if is_x86_feature_detected!("sse2") {
  291|      0|                    impl_sse2($($arg),*)
  292|       |                } else {
  293|      0|                    unimplemented!()
  294|       |                }
  295|       |            }
  296|       |        }
_RNvNvNtCs55XwGWYaZj9_11rand_chacha4guts11refill_wide9impl_avx2:
  255|  49.7k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  49.7k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  49.7k|                _mm256_zeroupper();
  258|  49.7k|                ret
  259|  49.7k|            }
_RNvNtCs55XwGWYaZj9_11rand_chacha4guts11init_chacha:
  333|    195|        $($pub $(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  334|    195|            #[inline(always)]
  335|    195|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  336|    195|            use std::arch::x86_64::*;
  337|    195|            #[target_feature(enable = "avx")]
  338|    195|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|    195|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|    195|            }
  341|    195|            #[target_feature(enable = "sse2")]
  342|    195|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  343|    195|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  344|    195|            }
  345|    195|            unsafe {
  346|    195|                if is_x86_feature_detected!("avx") {
  347|    195|                    impl_avx($($arg),*)
  348|      0|                } else if is_x86_feature_detected!("sse2") {
  349|      0|                    impl_sse2($($arg),*)
  350|       |                } else {
  351|      0|                    unimplemented!()
  352|       |                }
  353|       |            }
  354|       |        }
_RNvNvNtCs55XwGWYaZj9_11rand_chacha4guts11init_chacha8impl_avx:
  338|    195|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|    195|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|    195|            }
_RNvXs2_NtCslBKszH9vZoh_10ppv_lite866x86_64NtB5_14vec128_storageINtNtCs433v4DNuM1R_4core7convert4FromAmj4_E4from:
  130|    195|    fn from(u32x4: [u32; 4]) -> Self {
  131|    195|        vec128_storage { u32x4 }
  132|    195|    }

_RNvMNtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtB2_12u32x4x2_avx2NtB6_4NoNIE3newCs55XwGWYaZj9_11rand_chacha:
 1394|  18.4M|        fn new(x: __m256i) -> Self {
 1395|  18.4M|            Self { x, ni: PhantomData }
 1396|  18.4M|        }
_RNvMsZ_NtNtCslBKszH9vZoh_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIE3newCs55XwGWYaZj9_11rand_chacha:
   64|  2.78M|            fn new(x: __m128i) -> Self {
   65|  2.78M|                $vec {
   66|  2.78M|                    x,
   67|  2.78M|                    s3: PhantomData,
   68|  2.78M|                    s4: PhantomData,
   69|  2.78M|                    ni: PhantomData,
   70|  2.78M|                }
   71|  2.78M|            }
_RNvXs0_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types5StoreNtB9_14vec256_storageE6unpackCs55XwGWYaZj9_11rand_chacha:
 1402|  99.5k|        unsafe fn unpack(p: vec256_storage) -> Self {
 1403|  99.5k|            Self::new(p.avx)
 1404|  99.5k|        }
_RNvXs10_NtNtCslBKszH9vZoh_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes14unsafe_read_leCs55XwGWYaZj9_11rand_chacha:
   79|    390|            unsafe fn unsafe_read_le(input: &[u8]) -> Self {
   80|    390|                assert_eq!(input.len(), 16);
   81|    390|                Self::new(_mm_loadu_si128(input.as_ptr() as *const _))
   82|    390|            }
_RNvXs10_NtNtCslBKszH9vZoh_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes8write_leCs55XwGWYaZj9_11rand_chacha:
   89|   796k|            fn write_le(self, out: &mut [u8]) {
   90|   796k|                assert_eq!(out.len(), 16);
   91|   796k|                unsafe { _mm_storeu_si128(out.as_mut_ptr() as *mut _, self.x) }
   92|   796k|            }
_RNvXs1R_NtNtCslBKszH9vZoh_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtNtCs433v4DNuM1R_4core3ops5arith3Add3addCs55XwGWYaZj9_11rand_chacha:
   18|   796k|            fn $fn(self, rhs: Self) -> Self::Output {
   19|   796k|                Self::new(unsafe { $impl_fn(self.x, rhs.x) })
   20|   796k|            }
_RNvXs2_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E10from_lanesCs55XwGWYaZj9_11rand_chacha:
 1439|   398k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 2]) -> Self {
 1440|   398k|            Self::new(unsafe { _mm256_setr_m128i(x[0].x, x[1].x) })
 1441|   398k|        }
_RNvXs2_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E8to_lanesCs55XwGWYaZj9_11rand_chacha:
 1430|   398k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 2] {
 1431|   398k|            unsafe {
 1432|   398k|                [
 1433|   398k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 0)),
 1434|   398k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 1)),
 1435|   398k|                ]
 1436|   398k|            }
 1437|   398k|        }
_RNvXs6_NtNtCslBKszH9vZoh_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E10from_lanesCs55XwGWYaZj9_11rand_chacha:
  331|  49.7k|    fn from_lanes(xs: [u32; 4]) -> Self {
  332|  49.7k|        unsafe {
  333|  49.7k|            let mut x = _mm_cvtsi64_si128((xs[0] as u64 | ((xs[1] as u64) << 32)) as i64);
  334|  49.7k|            x = _mm_insert_epi64(x, (xs[2] as u64 | ((xs[3] as u64) << 32)) as i64, 1);
  335|  49.7k|            Self::new(x)
  336|  49.7k|        }
  337|  49.7k|    }
_RNvXs6_NtNtCslBKszH9vZoh_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E8to_lanesCs55XwGWYaZj9_11rand_chacha:
  323|   199k|    fn to_lanes(self) -> [u32; 4] {
  324|   199k|        unsafe {
  325|   199k|            let x = _mm_cvtsi128_si64(self.x) as u64;
  326|   199k|            let y = _mm_extract_epi64(self.x, 1) as u64;
  327|   199k|            [x as u32, (x >> 32) as u32, y as u32, (y >> 32) as u32]
  328|   199k|        }
  329|   199k|    }
_RNvXs6_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right16Cs55XwGWYaZj9_11rand_chacha:
 1470|  1.19M|            fn $name(self) -> Self {
 1471|  1.19M|                Self::new(unsafe {
 1472|  1.19M|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|  1.19M|                })
 1474|  1.19M|            }
_RNvXs6_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right20Cs55XwGWYaZj9_11rand_chacha:
 1480|  1.19M|            fn $name(self) -> Self {
 1481|  1.19M|                Self::new(unsafe {
 1482|  1.19M|                    _mm256_or_si256(
 1483|  1.19M|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|  1.19M|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|  1.19M|                    )
 1486|  1.19M|                })
 1487|  1.19M|            }
_RNvXs6_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right24Cs55XwGWYaZj9_11rand_chacha:
 1470|  1.19M|            fn $name(self) -> Self {
 1471|  1.19M|                Self::new(unsafe {
 1472|  1.19M|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|  1.19M|                })
 1474|  1.19M|            }
_RNvXs6_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right25Cs55XwGWYaZj9_11rand_chacha:
 1480|  1.19M|            fn $name(self) -> Self {
 1481|  1.19M|                Self::new(unsafe {
 1482|  1.19M|                    _mm256_or_si256(
 1483|  1.19M|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|  1.19M|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|  1.19M|                    )
 1486|  1.19M|                })
 1487|  1.19M|            }
_RNvXsX_NtNtCslBKszH9vZoh_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types5StoreNtB7_14vec128_storageE6unpackCs55XwGWYaZj9_11rand_chacha:
   52|   448k|            unsafe fn unpack(x: vec128_storage) -> Self {
   53|   448k|                Self::new(x.sse2)
   54|   448k|            }
_RNvXsc_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words1230Cs55XwGWYaZj9_11rand_chacha:
 1582|  1.19M|        fn shuffle_lane_words1230(self) -> Self {
 1583|  1.19M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b1001_0011) })
 1584|  1.19M|        }
_RNvXsc_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words2301Cs55XwGWYaZj9_11rand_chacha:
 1586|  1.19M|        fn shuffle_lane_words2301(self) -> Self {
 1587|  1.19M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0100_1110) })
 1588|  1.19M|        }
_RNvXsc_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words3012Cs55XwGWYaZj9_11rand_chacha:
 1590|  1.19M|        fn shuffle_lane_words3012(self) -> Self {
 1591|  1.19M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0011_1001) })
 1592|  1.19M|        }
_RNvXse_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types5StoreNtB9_14vec512_storageE6unpackCs55XwGWYaZj9_11rand_chacha:
 1602|  49.7k|        unsafe fn unpack(p: vec512_storage) -> Self {
 1603|  49.7k|            Self::new([
 1604|  49.7k|                u32x4x2_avx2::unpack(p.avx[0]),
 1605|  49.7k|                u32x4x2_avx2::unpack(p.avx[1]),
 1606|  49.7k|            ])
 1607|  49.7k|        }
_RNvXsf_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E10from_lanesCs55XwGWYaZj9_11rand_chacha:
 1617|   199k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 4]) -> Self {
 1618|   199k|            let ab = u32x4x2_avx2::from_lanes([x[0], x[1]]);
 1619|   199k|            let cd = u32x4x2_avx2::from_lanes([x[2], x[3]]);
 1620|   199k|            Self::new([ab, cd])
 1621|   199k|        }
_RNvXsf_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E8to_lanesCs55XwGWYaZj9_11rand_chacha:
 1611|   199k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 4] {
 1612|   199k|            let [a, b] = self.0[0].to_lanes();
 1613|   199k|            let [c, d] = self.0[1].to_lanes();
 1614|   199k|            [a, b, c, d]
 1615|   199k|        }
_RNvXsl_NtNtCslBKszH9vZoh_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE6insertCs55XwGWYaZj9_11rand_chacha:
  523|   697k|    fn insert(self, v: u32, i: u32) -> Self {
  524|   697k|        Self::new(unsafe {
  525|   697k|            match i {
  526|   348k|                0 => _mm_insert_epi32(self.x, v as i32, 0),
  527|   348k|                1 => _mm_insert_epi32(self.x, v as i32, 1),
  528|      0|                2 => _mm_insert_epi32(self.x, v as i32, 2),
  529|      0|                3 => _mm_insert_epi32(self.x, v as i32, 3),
  530|      0|                _ => unreachable!(),
  531|       |            }
  532|       |        })
  533|   697k|    }
_RNvXsl_NtNtCslBKszH9vZoh_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE7extractCs55XwGWYaZj9_11rand_chacha:
  519|   199k|    fn extract(self, i: u32) -> u32 {
  520|   199k|        self.to_lanes()[i as usize]
  521|   199k|    }
_RNvXsq_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs433v4DNuM1R_4core3ops5arith9AddAssign10add_assignCs55XwGWYaZj9_11rand_chacha:
 1527|  4.77M|                fn $assign_fn(&mut self, rhs: Self) {
 1528|  4.77M|                    *self = self.$bin_fn(rhs);
 1529|  4.77M|                }
_RNvXsr_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs433v4DNuM1R_4core3ops3bit6BitXor6bitxorCs55XwGWYaZj9_11rand_chacha:
 1543|  4.77M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  4.77M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  4.77M|                }
_RNvXsv_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs433v4DNuM1R_4core3ops5arith3Add3addCs55XwGWYaZj9_11rand_chacha:
 1543|  4.77M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  4.77M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  4.77M|                }
_RNvXsY_NtNtCslBKszH9vZoh_10ppv_lite866x86_644sse2NtB7_14vec128_storageINtNtCs433v4DNuM1R_4core7convert4FromINtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEE4fromCs55XwGWYaZj9_11rand_chacha:
   58|  50.1k|            fn from(x: $vec<S3, S4, NI>) -> Self {
   59|  50.1k|                vec128_storage { sse2: x.x }
   60|  50.1k|            }
_RNvXsj_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2NtB9_14vec512_storageINtNtCs433v4DNuM1R_4core7convert4FromINtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EE4fromCs55XwGWYaZj9_11rand_chacha:
 1683|  49.7k|        fn from(x: u32x4x4_avx2<NI>) -> Self {
 1684|  49.7k|            Self {
 1685|  49.7k|                avx: [
 1686|  49.7k|                    vec256_storage { avx: x.0[0].x },
 1687|  49.7k|                    vec256_storage { avx: x.0[1].x },
 1688|  49.7k|                ],
 1689|  49.7k|            }
 1690|  49.7k|        }

_RINvXs2_NtNtCsbnstcjMfjGb_4rand13distributions7integerNtB8_8StandardINtNtB8_12distribution12DistributionoE6sampleNtNtNtBa_4rngs6thread9ThreadRngECseXCYVcIQZ7o_5oxttl:
   51|   796k|    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u128 {
   52|   796k|        // Use LE; we explicitly generate one value before the next.
   53|   796k|        let x = u128::from(rng.next_u64());
   54|   796k|        let y = u128::from(rng.next_u64());
   55|   796k|        (y << 64) | x
   56|   796k|    }

_RINvCsbnstcjMfjGb_4rand6randomoECseXCYVcIQZ7o_5oxttl:
  183|   796k|pub fn random<T>() -> T
  184|   796k|where Standard: Distribution<T> {
  185|   796k|    thread_rng().gen()
  186|   796k|}

_RINvYNtNtNtCsbnstcjMfjGb_4rand4rngs6thread9ThreadRngNtNtB9_3rng3Rng3genoECseXCYVcIQZ7o_5oxttl:
   93|   796k|    fn gen<T>(&mut self) -> T
   94|   796k|    where Standard: Distribution<T> {
   95|   796k|        Standard.sample(self)
   96|   796k|    }

_RNvXs_NtNtNtCsbnstcjMfjGb_4rand4rngs7adapter9reseedingINtB4_12ReseedingRngNtNtCs55XwGWYaZj9_11rand_chacha6chacha12ChaCha12CoreNtNtCslvYPMEMaoR_9rand_core2os5OsRngENtB24_7RngCore8next_u64CseXCYVcIQZ7o_5oxttl:
  124|  1.59M|    fn next_u64(&mut self) -> u64 {
  125|  1.59M|        self.0.next_u64()
  126|  1.59M|    }
_RNvMNtNtNtCsbnstcjMfjGb_4rand4rngs7adapter9reseedingINtB2_12ReseedingRngNtNtCs55XwGWYaZj9_11rand_chacha6chacha12ChaCha12CoreNtNtCslvYPMEMaoR_9rand_core2os5OsRngE3newB8_:
  101|      1|    pub fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  102|      1|        ReseedingRng(BlockRng::new(ReseedingCore::new(rng, threshold, reseeder)))
  103|      1|    }
_RNvXs2_NtNtNtCsbnstcjMfjGb_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs55XwGWYaZj9_11rand_chacha6chacha12ChaCha12CoreNtNtCslvYPMEMaoR_9rand_core2os5OsRngENtNtB26_5block12BlockRngCore8generateBb_:
  173|  49.7k|    fn generate(&mut self, results: &mut Self::Results) {
  174|  49.7k|        let global_fork_counter = fork::get_fork_counter();
  175|  49.7k|        if self.bytes_until_reseed <= 0 || self.is_forked(global_fork_counter) {
  176|       |            // We get better performance by not calling only `reseed` here
  177|       |            // and continuing with the rest of the function, but by directly
  178|       |            // returning from a non-inlined function.
  179|    194|            return self.reseed_and_generate(results, global_fork_counter);
  180|  49.5k|        }
  181|  49.5k|        let num_bytes = results.as_ref().len() * size_of::<Self::Item>();
  182|  49.5k|        self.bytes_until_reseed -= num_bytes as i64;
  183|  49.5k|        self.inner.generate(results);
  184|  49.7k|    }
_RNvMs3_NtNtNtCsbnstcjMfjGb_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs55XwGWYaZj9_11rand_chacha6chacha12ChaCha12CoreNtNtCslvYPMEMaoR_9rand_core2os5OsRngE3newBb_:
  193|      1|    fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  194|      1|        use ::core::i64::MAX;
  195|      1|        fork::register_fork_handler();
  196|       |
  197|       |        // Because generating more values than `i64::MAX` takes centuries on
  198|       |        // current hardware, we just clamp to that value.
  199|       |        // Also we set a threshold of 0, which indicates no limit, to that
  200|       |        // value.
  201|      1|        let threshold = if threshold == 0 {
  202|      0|            MAX
  203|      1|        } else if threshold <= MAX as u64 {
  204|      1|            threshold as i64
  205|       |        } else {
  206|      0|            MAX
  207|       |        };
  208|       |
  209|      1|        ReseedingCore {
  210|      1|            inner: rng,
  211|      1|            reseeder,
  212|      1|            threshold: threshold as i64,
  213|      1|            bytes_until_reseed: threshold as i64,
  214|      1|            fork_counter: 0,
  215|      1|        }
  216|      1|    }
_RNvMs3_NtNtNtCsbnstcjMfjGb_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs55XwGWYaZj9_11rand_chacha6chacha12ChaCha12CoreNtNtCslvYPMEMaoR_9rand_core2os5OsRngE6reseedBb_:
  219|    194|    fn reseed(&mut self) -> Result<(), Error> {
  220|    194|        R::from_rng(&mut self.reseeder).map(|result| {
  221|       |            self.bytes_until_reseed = self.threshold;
  222|       |            self.inner = result
  223|    194|        })
  224|    194|    }
_RNCNvMs3_NtNtNtCsbnstcjMfjGb_4rand4rngs7adapter9reseedingINtB7_13ReseedingCoreNtNtCs55XwGWYaZj9_11rand_chacha6chacha12ChaCha12CoreNtNtCslvYPMEMaoR_9rand_core2os5OsRngE6reseed0Bd_:
  220|    194|        R::from_rng(&mut self.reseeder).map(|result| {
  221|    194|            self.bytes_until_reseed = self.threshold;
  222|    194|            self.inner = result
  223|    194|        })
_RNvMs3_NtNtNtCsbnstcjMfjGb_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs55XwGWYaZj9_11rand_chacha6chacha12ChaCha12CoreNtNtCslvYPMEMaoR_9rand_core2os5OsRngE9is_forkedBb_:
  226|  49.7k|    fn is_forked(&self, global_fork_counter: usize) -> bool {
  227|  49.7k|        // In theory, on 32-bit platforms, it is possible for
  228|  49.7k|        // `global_fork_counter` to wrap around after ~4e9 forks.
  229|  49.7k|        //
  230|  49.7k|        // This check will detect a fork in the normal case where
  231|  49.7k|        // `fork_counter < global_fork_counter`, and also when the difference
  232|  49.7k|        // between both is greater than `isize::MAX` (wrapped around).
  233|  49.7k|        //
  234|  49.7k|        // It will still fail to detect a fork if there have been more than
  235|  49.7k|        // `isize::MAX` forks, without any reseed in between. Seems unlikely
  236|  49.7k|        // enough.
  237|  49.7k|        (self.fork_counter.wrapping_sub(global_fork_counter) as isize) < 0
  238|  49.7k|    }
_RNvMs3_NtNtNtCsbnstcjMfjGb_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs55XwGWYaZj9_11rand_chacha6chacha12ChaCha12CoreNtNtCslvYPMEMaoR_9rand_core2os5OsRngE19reseed_and_generateBb_:
  241|    194|    fn reseed_and_generate(
  242|    194|        &mut self, results: &mut <Self as BlockRngCore>::Results, global_fork_counter: usize,
  243|    194|    ) {
  244|    194|        #![allow(clippy::if_same_then_else)] // false positive
  245|    194|        if self.is_forked(global_fork_counter) {
  246|      0|            info!("Fork detected, reseeding RNG");
  247|    194|        } else {
  248|    194|            trace!("Reseeding RNG (periodic reseed)");
  249|    194|        }
  250|       |
  251|    194|        let num_bytes = results.as_ref().len() * size_of::<<R as BlockRngCore>::Item>();
  252|       |
  253|    194|        if let Err(e) = self.reseed() {
  254|      0|            warn!("Reseeding RNG failed: {}", e);
  255|      0|            let _ = e;
  256|    194|        }
  257|    194|        self.fork_counter = global_fork_counter;
  258|    194|
  259|    194|        self.bytes_until_reseed = self.threshold - num_bytes as i64;
  260|    194|        self.inner.generate(results);
  261|    194|    }
_RNvNtNtNtNtCsbnstcjMfjGb_4rand4rngs7adapter9reseeding4fork16get_fork_counter:
  307|  49.7k|    pub fn get_fork_counter() -> usize {
  308|  49.7k|        RESEEDING_RNG_FORK_COUNTER.load(Ordering::Relaxed)
  309|  49.7k|    }
_RNvNtNtNtNtCsbnstcjMfjGb_4rand4rngs7adapter9reseeding4fork21register_fork_handler:
  317|      1|    pub fn register_fork_handler() {
  318|      1|        static REGISTER: Once = Once::new();
  319|      1|        REGISTER.call_once(|| {
  320|       |            // Bump the counter before and after forking (see #1169):
  321|       |            let ret = unsafe { libc::pthread_atfork(
  322|       |                Some(fork_handler),
  323|       |                Some(fork_handler),
  324|       |                Some(fork_handler),
  325|       |            ) };
  326|       |            if ret != 0 {
  327|       |                panic!("libc::pthread_atfork failed with code {}", ret);
  328|       |            }
  329|      1|        });
  330|      1|    }
_RNCNvNtNtNtNtCsbnstcjMfjGb_4rand4rngs7adapter9reseeding4fork21register_fork_handler0Bb_:
  319|      1|        REGISTER.call_once(|| {
  320|      1|            // Bump the counter before and after forking (see #1169):
  321|      1|            let ret = unsafe { libc::pthread_atfork(
  322|      1|                Some(fork_handler),
  323|      1|                Some(fork_handler),
  324|      1|                Some(fork_handler),
  325|      1|            ) };
  326|      1|            if ret != 0 {
  327|      0|                panic!("libc::pthread_atfork failed with code {}", ret);
  328|      1|            }
  329|      1|        });

_RNvXs_NtNtCsbnstcjMfjGb_4rand4rngs6threadNtB4_9ThreadRngNtCslvYPMEMaoR_9rand_core7RngCore8next_u64:
  109|  1.59M|    fn next_u64(&mut self) -> u64 {
  110|  1.59M|        // SAFETY: We must make sure to stop using `rng` before anyone else
  111|  1.59M|        // creates another mutable reference
  112|  1.59M|        let rng = unsafe { &mut *self.rng.get() };
  113|  1.59M|        rng.next_u64()
  114|  1.59M|    }
_RNvNtNtCsbnstcjMfjGb_4rand4rngs6thread10thread_rng:
   88|   796k|pub fn thread_rng() -> ThreadRng {
   89|   796k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
   90|   796k|    ThreadRng { rng }
   91|   796k|}
_RNCNvNtNtCsbnstcjMfjGb_4rand4rngs6thread10thread_rng0B7_:
   89|   796k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());

_RNvXsl_NtCs55XwGWYaZj9_11rand_chacha6chachaNtB5_12ChaCha12CoreNtNtCslvYPMEMaoR_9rand_core5block12BlockRngCore8generateCsbnstcjMfjGb_4rand:
   89|  49.7k|            fn generate(&mut self, r: &mut Self::Results) {
   90|  49.7k|                // Fill slice of words by writing to equivalent slice of bytes, then fixing endianness.
   91|  49.7k|                self.state.refill4($rounds, unsafe {
   92|  49.7k|                    &mut *(&mut *r as *mut Array64<u32> as *mut [u8; 256])
   93|  49.7k|                });
   94|  3.18M|                for x in r.as_mut() {
   95|  3.18M|                    *x = x.to_le();
   96|  3.18M|                }
   97|  49.7k|            }
_RNvXsm_NtCs55XwGWYaZj9_11rand_chacha6chachaNtB5_12ChaCha12CoreNtCslvYPMEMaoR_9rand_core11SeedableRng9from_seedCsbnstcjMfjGb_4rand:
  103|    195|            fn from_seed(seed: Self::Seed) -> Self {
  104|    195|                $ChaChaXCore { state: ChaCha::new(&seed, &[0u8; 8]) }
  105|    195|            }
_RNvXs_NtCs55XwGWYaZj9_11rand_chacha6chachaINtB4_7Array64mEINtNtCs433v4DNuM1R_4core7convert5AsRefSmE6as_refB6_:
   46|  3.28M|    fn as_ref(&self) -> &[T] {
   47|  3.28M|        &self.0
   48|  3.28M|    }
_RNvXs0_NtCs55XwGWYaZj9_11rand_chacha6chachaINtB5_7Array64mEINtNtCs433v4DNuM1R_4core7convert5AsMutSmE6as_mutB7_:
   51|  49.7k|    fn as_mut(&mut self) -> &mut [T] {
   52|  49.7k|        &mut self.0
   53|  49.7k|    }
_RNvXNtCs55XwGWYaZj9_11rand_chacha6chachaINtB2_7Array64mENtNtCs433v4DNuM1R_4core7default7Default7defaultB4_:
   32|      1|    fn default() -> Self {
   33|      1|        Self([
   34|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   35|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   36|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   37|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   38|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   39|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   40|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   41|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   42|      1|        ])
   43|      1|    }

_RNvMNtCs55XwGWYaZj9_11rand_chacha4gutsNtB2_6ChaCha3new:
   72|    195|    pub fn new(key: &[u8; 32], nonce: &[u8]) -> Self {
   73|    195|        init_chacha(key, nonce)
   74|    195|    }
_RNvMNtCs55XwGWYaZj9_11rand_chacha4gutsNtB2_6ChaCha7refill4:
   84|  49.7k|    pub fn refill4(&mut self, drounds: u32, out: &mut [u8; BUFSZ]) {
   85|  49.7k|        refill_wide(self, drounds, out)
   86|  49.7k|    }
_RINvNtCs55XwGWYaZj9_11rand_chacha4guts5roundINtNtCslBKszH9vZoh_10ppv_lite864soft2x2INtNtNtNtBL_6x86_644sse24avx212u32x4x2_avx2NtB1q_4NoNIENtB1o_2G0EEB4_:
   43|   597k|pub(crate) fn round<V: ArithOps + BitOps32>(mut x: State<V>) -> State<V> {
   44|   597k|    x.a += x.b;
   45|   597k|    x.d = (x.d ^ x.a).rotate_each_word_right16();
   46|   597k|    x.c += x.d;
   47|   597k|    x.b = (x.b ^ x.c).rotate_each_word_right20();
   48|   597k|    x.a += x.b;
   49|   597k|    x.d = (x.d ^ x.a).rotate_each_word_right24();
   50|   597k|    x.c += x.d;
   51|   597k|    x.b = (x.b ^ x.c).rotate_each_word_right25();
   52|   597k|    x
   53|   597k|}
_RINvNtCs55XwGWYaZj9_11rand_chacha4guts11diagonalizeINtNtCslBKszH9vZoh_10ppv_lite864soft2x2INtNtNtNtBS_6x86_644sse24avx212u32x4x2_avx2NtB1x_4NoNIENtB1v_2G0EEB4_:
   56|   298k|pub(crate) fn diagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   57|   298k|    x.b = x.b.shuffle_lane_words3012();
   58|   298k|    x.c = x.c.shuffle_lane_words2301();
   59|   298k|    x.d = x.d.shuffle_lane_words1230();
   60|   298k|    x
   61|   298k|}
_RINvNtCs55XwGWYaZj9_11rand_chacha4guts13undiagonalizeINtNtCslBKszH9vZoh_10ppv_lite864soft2x2INtNtNtNtBU_6x86_644sse24avx212u32x4x2_avx2NtB1z_4NoNIENtB1x_2G0EEB4_:
   63|   298k|pub(crate) fn undiagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   64|   298k|    x.b = x.b.shuffle_lane_words1230();
   65|   298k|    x.c = x.c.shuffle_lane_words2301();
   66|   298k|    x.d = x.d.shuffle_lane_words3012();
   67|   298k|    x
   68|   298k|}
_RINvMNtCs55XwGWYaZj9_11rand_chacha4gutsNtB3_6ChaCha5pos64INtNtCslBKszH9vZoh_10ppv_lite866x86_6411Avx2MachineNtBW_4NoNIEEB5_:
   77|  99.5k|    fn pos64<M: Machine>(&self, m: M) -> u64 {
   78|  99.5k|        let d: M::u32x4 = m.unpack(self.d);
   79|  99.5k|        ((d.extract(1) as u64) << 32) | d.extract(0) as u64
   80|  99.5k|    }
_RINvNtCs55XwGWYaZj9_11rand_chacha4guts16refill_wide_implINtNtCslBKszH9vZoh_10ppv_lite866x86_6411Avx2MachineNtBV_4NoNIEEB4_:
  116|  49.7k|fn refill_wide_impl<Mach: Machine>(
  117|  49.7k|    m: Mach, state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ],
  118|  49.7k|) {
  119|  49.7k|    let k = m.vec([0x6170_7865, 0x3320_646e, 0x7962_2d32, 0x6b20_6574]);
  120|  49.7k|    let mut pos = state.pos64(m);
  121|  49.7k|    let d0: Mach::u32x4 = m.unpack(state.d);
  122|  49.7k|    pos = pos.wrapping_add(1);
  123|  49.7k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  124|  49.7k|    pos = pos.wrapping_add(1);
  125|  49.7k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  126|  49.7k|    pos = pos.wrapping_add(1);
  127|  49.7k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  128|  49.7k|
  129|  49.7k|    let b = m.unpack(state.b);
  130|  49.7k|    let c = m.unpack(state.c);
  131|  49.7k|    let mut x = State {
  132|  49.7k|        a: Mach::u32x4x4::from_lanes([k, k, k, k]),
  133|  49.7k|        b: Mach::u32x4x4::from_lanes([b, b, b, b]),
  134|  49.7k|        c: Mach::u32x4x4::from_lanes([c, c, c, c]),
  135|  49.7k|        d: m.unpack(Mach::u32x4x4::from_lanes([d0, d1, d2, d3]).into()),
  136|  49.7k|    };
  137|   298k|    for _ in 0..drounds {
  138|   298k|        x = round(x);
  139|   298k|        x = undiagonalize(round(diagonalize(x)));
  140|   298k|    }
  141|  49.7k|    let mut pos = state.pos64(m);
  142|  49.7k|    let d0: Mach::u32x4 = m.unpack(state.d);
  143|  49.7k|    pos = pos.wrapping_add(1);
  144|  49.7k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  145|  49.7k|    pos = pos.wrapping_add(1);
  146|  49.7k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  147|  49.7k|    pos = pos.wrapping_add(1);
  148|  49.7k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  149|  49.7k|    pos = pos.wrapping_add(1);
  150|  49.7k|    let d4 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  151|  49.7k|
  152|  49.7k|    let (a, b, c, d) = (
  153|  49.7k|        x.a.to_lanes(),
  154|  49.7k|        x.b.to_lanes(),
  155|  49.7k|        x.c.to_lanes(),
  156|  49.7k|        x.d.to_lanes(),
  157|  49.7k|    );
  158|  49.7k|    let sb = m.unpack(state.b);
  159|  49.7k|    let sc = m.unpack(state.c);
  160|  49.7k|    let sd = [m.unpack(state.d), d1, d2, d3];
  161|  49.7k|    state.d = d4.into();
  162|  49.7k|    let mut words = out.chunks_exact_mut(16);
  163|   199k|    for ((((&a, &b), &c), &d), &sd) in a.iter().zip(&b).zip(&c).zip(&d).zip(&sd) {
  164|   199k|        (a + k).write_le(words.next().unwrap());
  165|   199k|        (b + sb).write_le(words.next().unwrap());
  166|   199k|        (c + sc).write_le(words.next().unwrap());
  167|   199k|        (d + sd).write_le(words.next().unwrap());
  168|   199k|    }
  169|  49.7k|}
_RNvNtCs55XwGWYaZj9_11rand_chacha4guts10read_u32le:
  229|    390|fn read_u32le(xs: &[u8]) -> u32 {
  230|    390|    assert_eq!(xs.len(), 4);
  231|    390|    u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24)
  232|    390|}
_RINvNvNtCs55XwGWYaZj9_11rand_chacha4guts11refill_wide7fn_implINtNtCslBKszH9vZoh_10ppv_lite866x86_6411Avx2MachineNtB10_4NoNIEEB6_:
  172|  49.7k|    fn refill_wide(state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ]) {
  173|  49.7k|        refill_wide_impl(m, state, drounds, out);
  174|  49.7k|    }
_RINvNvNtCs55XwGWYaZj9_11rand_chacha4guts11init_chacha7fn_implINtNtCslBKszH9vZoh_10ppv_lite866x86_6410SseMachineNtB10_5YesS3NtB10_5YesS4NtB10_4NoNIEEB6_:
  235|    195|    fn init_chacha(key: &[u8; 32], nonce: &[u8]) -> ChaCha {
  236|    195|        let ctr_nonce = [
  237|       |            0,
  238|    195|            if nonce.len() == 12 {
  239|      0|                read_u32le(&nonce[0..4])
  240|       |            } else {
  241|    195|                0
  242|       |            },
  243|    195|            read_u32le(&nonce[nonce.len() - 8..nonce.len() - 4]),
  244|    195|            read_u32le(&nonce[nonce.len() - 4..]),
  245|    195|        ];
  246|    195|        let key0: Mach::u32x4 = m.read_le(&key[..16]);
  247|    195|        let key1: Mach::u32x4 = m.read_le(&key[16..]);
  248|    195|        ChaCha {
  249|    195|            b: key0.into(),
  250|    195|            c: key1.into(),
  251|    195|            d: ctr_nonce.into(),
  252|    195|        }

_RNCNvXs0_NtCslvYPMEMaoR_9rand_core5blockINtB7_8BlockRngINtNtNtNtCsbnstcjMfjGb_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs55XwGWYaZj9_11rand_chacha6chacha12ChaCha12CoreNtNtB9_2os5OsRngEENtB9_7RngCore8next_u640CseXCYVcIQZ7o_5oxttl:
  198|  1.59M|        let read_u64 = |results: &[u32], index| {
  199|  1.59M|            let data = &results[index..=index + 1];
  200|  1.59M|            u64::from(data[1]) << 32 | u64::from(data[0])
  201|  1.59M|        };
_RNvXs0_NtCslvYPMEMaoR_9rand_core5blockINtB5_8BlockRngINtNtNtNtCsbnstcjMfjGb_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs55XwGWYaZj9_11rand_chacha6chacha12ChaCha12CoreNtNtB7_2os5OsRngEENtB7_7RngCore8next_u64CseXCYVcIQZ7o_5oxttl:
  197|  1.59M|    fn next_u64(&mut self) -> u64 {
  198|  1.59M|        let read_u64 = |results: &[u32], index| {
  199|       |            let data = &results[index..=index + 1];
  200|       |            u64::from(data[1]) << 32 | u64::from(data[0])
  201|       |        };
  202|       |
  203|  1.59M|        let len = self.results.as_ref().len();
  204|  1.59M|
  205|  1.59M|        let index = self.index;
  206|  1.59M|        if index < len - 1 {
  207|  1.54M|            self.index += 2;
  208|  1.54M|            // Read an u64 from the current index
  209|  1.54M|            read_u64(self.results.as_ref(), index)
  210|  49.7k|        } else if index >= len {
  211|  49.7k|            self.generate_and_set(2);
  212|  49.7k|            read_u64(self.results.as_ref(), 0)
  213|       |        } else {
  214|      0|            let x = u64::from(self.results.as_ref()[len - 1]);
  215|      0|            self.generate_and_set(1);
  216|      0|            let y = u64::from(self.results.as_ref()[0]);
  217|      0|            (y << 32) | x
  218|       |        }
  219|  1.59M|    }
_RNvMs_NtCslvYPMEMaoR_9rand_core5blockINtB4_8BlockRngINtNtNtNtCsbnstcjMfjGb_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs55XwGWYaZj9_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE16generate_and_setBX_:
  174|  49.7k|    pub fn generate_and_set(&mut self, index: usize) {
  175|  49.7k|        assert!(index < self.results.as_ref().len());
  176|  49.7k|        self.core.generate(&mut self.results);
  177|  49.7k|        self.index = index;
  178|  49.7k|    }
_RNvMs_NtCslvYPMEMaoR_9rand_core5blockINtB4_8BlockRngINtNtNtNtCsbnstcjMfjGb_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs55XwGWYaZj9_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE3newBX_:
  145|      1|    pub fn new(core: R) -> BlockRng<R> {
  146|      1|        let results_empty = R::Results::default();
  147|      1|        BlockRng {
  148|      1|            core,
  149|      1|            index: results_empty.as_ref().len(),
  150|      1|            results: results_empty,
  151|      1|        }
  152|      1|    }

_RINvYNtNtCs55XwGWYaZj9_11rand_chacha6chacha12ChaCha12CoreNtCslvYPMEMaoR_9rand_core11SeedableRng8from_rngNtNtBV_2os5OsRngECsbnstcjMfjGb_4rand:
  390|      1|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|      1|        let mut seed = Self::Seed::default();
  392|      1|        rng.try_fill_bytes(seed.as_mut())?;
  393|      1|        Ok(Self::from_seed(seed))
  394|      1|    }
_RINvYNtNtCs55XwGWYaZj9_11rand_chacha6chacha12ChaCha12CoreNtCslvYPMEMaoR_9rand_core11SeedableRng8from_rngQNtNtBV_2os5OsRngECsbnstcjMfjGb_4rand:
  390|    194|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|    194|        let mut seed = Self::Seed::default();
  392|    194|        rng.try_fill_bytes(seed.as_mut())?;
  393|    194|        Ok(Self::from_seed(seed))
  394|    194|    }
_RNvXs_CslvYPMEMaoR_9rand_coreQNtNtB4_2os5OsRngNtB4_7RngCore14try_fill_bytesCsbnstcjMfjGb_4rand:
  441|    194|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
  442|    194|        (**self).try_fill_bytes(dest)
  443|    194|    }

_RNvXs_NtCslvYPMEMaoR_9rand_core2osNtB4_5OsRngNtB6_7RngCore14try_fill_bytes:
   67|    195|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
   68|    195|        getrandom(dest)?;
   69|    195|        Ok(())
   70|    195|    }

_RNvNvNtNtCsbnstcjMfjGb_4rand4rngs6thread14THREAD_RNG_KEY6___initB7_:
   82|      1|            fn __init() -> $t { $init }
_RNvNvNtNtCsbnstcjMfjGb_4rand4rngs6thread14THREAD_RNG_KEY7___getitB7_:
   85|   796k|            unsafe fn __getit(
   86|   796k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   87|   796k|            ) -> $crate::option::Option<&'static $t> {
   88|   796k|                #[thread_local]
   89|   796k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   90|   796k|                    $crate::thread::local_impl::Key::<$t>::new();
   91|   796k|
   92|   796k|                unsafe {
   93|   796k|                    __KEY.get(move || {
   94|       |                        if let $crate::option::Option::Some(init) = init {
   95|       |                            if let $crate::option::Option::Some(value) = init.take() {
   96|       |                                return value;
   97|       |                            } else if $crate::cfg!(debug_assertions) {
   98|       |                                $crate::unreachable!("missing default value");
   99|       |                            }
  100|       |                        }
  101|       |                        __init()
  102|   796k|                    })
  103|   796k|                }
  104|   796k|            }
_RNCNvNvNtNtCsbnstcjMfjGb_4rand4rngs6thread14THREAD_RNG_KEY7___getit0B9_:
   93|      1|                    __KEY.get(move || {
   94|      1|                        if let $crate::option::Option::Some(init) = init {
   95|      0|                            if let $crate::option::Option::Some(value) = init.take() {
   96|      0|                                return value;
   97|      0|                            } else if $crate::cfg!(debug_assertions) {
   98|      0|                                $crate::unreachable!("missing default value");
   99|      0|                            }
  100|      1|                        }
  101|      1|                        __init()
  102|       |                    })

_RNvCsapuUTB8XoUj_4trig24count_triple_blank_nodes:
   48|   135k|fn count_triple_blank_nodes(triple: &Triple) -> usize {
   49|   135k|    (match &triple.subject {
   50|    668|        Subject::BlankNode(_) => 1,
   51|  87.7k|        Subject::Triple(t) => count_triple_blank_nodes(t),
   52|  47.1k|        _ => 0,
   53|   135k|    }) + (match &triple.object {
   54|  1.33k|        Term::BlankNode(_) => 1,
   55|     93|        Term::Triple(t) => count_triple_blank_nodes(t),
   56|   134k|        _ => 0,
   57|       |    })
   58|   135k|}
_RNvCsapuUTB8XoUj_4trig22count_quad_blank_nodes:
   60|   206k|fn count_quad_blank_nodes(quad: &Quad) -> usize {
   61|   206k|    (match &quad.subject {
   62|   113k|        Subject::BlankNode(_) => 1,
   63|  44.3k|        Subject::Triple(t) => count_triple_blank_nodes(t),
   64|  49.1k|        _ => 0,
   65|   206k|    }) + (match &quad.object {
   66|  86.7k|        Term::BlankNode(_) => 1,
   67|  3.30k|        Term::Triple(t) => count_triple_blank_nodes(t),
   68|   116k|        _ => 0,
   69|   206k|    }) + usize::from(matches!(quad.graph_name, GraphName::BlankNode(_)))
   70|   206k|}
_RNvCsapuUTB8XoUj_4trig15serialize_quads:
   72|  10.7k|fn serialize_quads(quads: &[Quad], prefixes: Vec<(String, String)>) -> Vec<u8> {
   73|  10.7k|    let mut serializer = TriGSerializer::new();
   74|  11.9k|    for (prefix_name, prefix_iri) in prefixes {
   75|  1.20k|        serializer = serializer.with_prefix(prefix_name, prefix_iri).unwrap();
   76|  1.20k|    }
   77|  10.7k|    let mut writer = serializer.serialize_to_write(Vec::new());
   78|   217k|    for quad in quads {
   79|   206k|        writer.write_quad(quad).unwrap();
   80|   206k|    }
   81|  10.7k|    writer.finish().unwrap()
   82|  10.7k|}
_RINvCsapuUTB8XoUj_4trig5parseARShj1_EB2_:
    7|  10.7k|fn parse<'a>(
    8|  10.7k|    chunks: impl IntoIterator<Item = &'a [u8]>,
    9|  10.7k|    unchecked: bool,
   10|  10.7k|) -> (Vec<Quad>, Vec<String>, Vec<(String, String)>) {
   11|  10.7k|    let mut quads = Vec::new();
   12|  10.7k|    let mut errors = Vec::new();
   13|  10.7k|    let mut parser = TriGParser::new()
   14|  10.7k|        .with_quoted_triples()
   15|  10.7k|        .with_base_iri("http://example.com/")
   16|  10.7k|        .unwrap();
   17|  10.7k|    if unchecked {
   18|      0|        parser = parser.unchecked();
   19|  10.7k|    }
   20|  10.7k|    let mut reader = parser.parse();
   21|  21.4k|    for chunk in chunks {
   22|  10.7k|        reader.extend_from_slice(chunk);
   23|  1.50M|        while let Some(result) = reader.read_next() {
   24|  1.49M|            match result {
   25|   206k|                Ok(quad) => quads.push(quad),
   26|  1.28M|                Err(error) => errors.push(error.to_string()),
   27|       |            }
   28|       |        }
   29|       |    }
   30|  10.7k|    reader.end();
   31|  16.5k|    while let Some(result) = reader.read_next() {
   32|  5.78k|        match result {
   33|    197|            Ok(quad) => quads.push(quad),
   34|  5.58k|            Err(error) => errors.push(error.to_string()),
   35|       |        }
   36|       |    }
   37|  10.7k|    assert!(reader.is_end());
   38|  10.7k|    (
   39|  10.7k|        quads,
   40|  10.7k|        errors,
   41|  10.7k|        reader
   42|  10.7k|            .prefixes()
   43|  10.7k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
   44|  10.7k|            .collect(),
   45|  10.7k|    )
   46|  10.7k|}
_RINvCsapuUTB8XoUj_4trig5parseINtNtNtCs433v4DNuM1R_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_run0EEB2_:
    7|  10.7k|fn parse<'a>(
    8|  10.7k|    chunks: impl IntoIterator<Item = &'a [u8]>,
    9|  10.7k|    unchecked: bool,
   10|  10.7k|) -> (Vec<Quad>, Vec<String>, Vec<(String, String)>) {
   11|  10.7k|    let mut quads = Vec::new();
   12|  10.7k|    let mut errors = Vec::new();
   13|  10.7k|    let mut parser = TriGParser::new()
   14|  10.7k|        .with_quoted_triples()
   15|  10.7k|        .with_base_iri("http://example.com/")
   16|  10.7k|        .unwrap();
   17|  10.7k|    if unchecked {
   18|      0|        parser = parser.unchecked();
   19|  10.7k|    }
   20|  10.7k|    let mut reader = parser.parse();
   21|  1.54M|    for chunk in chunks {
   22|  1.53M|        reader.extend_from_slice(chunk);
   23|  3.03M|        while let Some(result) = reader.read_next() {
   24|  1.49M|            match result {
   25|   206k|                Ok(quad) => quads.push(quad),
   26|  1.28M|                Err(error) => errors.push(error.to_string()),
   27|       |            }
   28|       |        }
   29|       |    }
   30|  10.7k|    reader.end();
   31|  16.5k|    while let Some(result) = reader.read_next() {
   32|  5.78k|        match result {
   33|    197|            Ok(quad) => quads.push(quad),
   34|  5.58k|            Err(error) => errors.push(error.to_string()),
   35|       |        }
   36|       |    }
   37|  10.7k|    assert!(reader.is_end());
   38|  10.7k|    (
   39|  10.7k|        quads,
   40|  10.7k|        errors,
   41|  10.7k|        reader
   42|  10.7k|            .prefixes()
   43|  10.7k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
   44|  10.7k|            .collect(),
   45|  10.7k|    )
   46|  10.7k|}
_RINvCsapuUTB8XoUj_4trig5parseINtNtNtCs433v4DNuM1R_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_runs0_0EEB2_:
    7|  10.7k|fn parse<'a>(
    8|  10.7k|    chunks: impl IntoIterator<Item = &'a [u8]>,
    9|  10.7k|    unchecked: bool,
   10|  10.7k|) -> (Vec<Quad>, Vec<String>, Vec<(String, String)>) {
   11|  10.7k|    let mut quads = Vec::new();
   12|  10.7k|    let mut errors = Vec::new();
   13|  10.7k|    let mut parser = TriGParser::new()
   14|  10.7k|        .with_quoted_triples()
   15|  10.7k|        .with_base_iri("http://example.com/")
   16|  10.7k|        .unwrap();
   17|  10.7k|    if unchecked {
   18|  10.7k|        parser = parser.unchecked();
   19|  10.7k|    }
   20|  10.7k|    let mut reader = parser.parse();
   21|  1.54M|    for chunk in chunks {
   22|  1.53M|        reader.extend_from_slice(chunk);
   23|  3.02M|        while let Some(result) = reader.read_next() {
   24|  1.48M|            match result {
   25|   222k|                Ok(quad) => quads.push(quad),
   26|  1.26M|                Err(error) => errors.push(error.to_string()),
   27|       |            }
   28|       |        }
   29|       |    }
   30|  10.7k|    reader.end();
   31|  16.5k|    while let Some(result) = reader.read_next() {
   32|  5.86k|        match result {
   33|    218|            Ok(quad) => quads.push(quad),
   34|  5.64k|            Err(error) => errors.push(error.to_string()),
   35|       |        }
   36|       |    }
   37|  10.7k|    assert!(reader.is_end());
   38|  10.7k|    (
   39|  10.7k|        quads,
   40|  10.7k|        errors,
   41|  10.7k|        reader
   42|  10.7k|            .prefixes()
   43|  10.7k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
   44|  10.7k|            .collect(),
   45|  10.7k|    )
   46|  10.7k|}
_RNCINvCsapuUTB8XoUj_4trig5parseARShj1_E0B4_:
   43|  1.20k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
_RNCINvCsapuUTB8XoUj_4trig5parseINtNtNtCs433v4DNuM1R_4core5slice4iter5SplithNCNvNvB4_1__19___libfuzzer_sys_run0EE0B4_:
   43|  1.20k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
_RNCINvCsapuUTB8XoUj_4trig5parseINtNtNtCs433v4DNuM1R_4core5slice4iter5SplithNCNvNvB4_1__19___libfuzzer_sys_runs0_0EE0B4_:
   43|  1.30k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
_RNCNvNvCsapuUTB8XoUj_4trig1__19___libfuzzer_sys_run0B5_:
   86|  8.91M|    let (quads, errors, prefixes) = parse(data.split(|c| *c == 0xFF), false);
_RNCNvNvCsapuUTB8XoUj_4trig1__19___libfuzzer_sys_runs_0B5_:
   92|  8.91M|            .filter(|c| *c != 0xFF)
_RNCNvNvCsapuUTB8XoUj_4trig1__19___libfuzzer_sys_runs0_0B5_:
   97|  8.91M|    let (quads_unchecked, errors_unchecked, _) = parse(data.split(|c| *c == 0xFF), true);

_RNvMNtCs2NsVQwDzFGg_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCsapuUTB8XoUj_4trig:
   88|   352k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|   352k|        BlankNodeRef(match &self.0 {
   90|  10.6k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|   341k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|   341k|                id: *id,
   93|   341k|                str: str.as_str(),
   94|   341k|            },
   95|       |        })
   96|   352k|    }
_RNvMs1_NtCs2NsVQwDzFGg_5oxrdf10blank_nodeNtB5_12BlankNodeRef10into_ownedCsapuUTB8XoUj_4trig:
  204|   106k|    pub fn into_owned(self) -> BlankNode {
  205|   106k|        BlankNode(match self.0 {
  206|  1.09k|            BlankNodeRefContent::Named(id) => BlankNodeContent::Named(id.to_owned()),
  207|   105k|            BlankNodeRefContent::Anonymous { id, .. } => BlankNodeContent::Anonymous {
  208|   105k|                id,
  209|   105k|                str: IdStr::new(id),
  210|   105k|            },
  211|       |        })
  212|   106k|    }
_RNvMs7_NtCs2NsVQwDzFGg_5oxrdf10blank_nodeNtB5_5IdStr3newCsapuUTB8XoUj_4trig:
  255|   105k|    fn new(id: u128) -> Self {
  256|   105k|        let mut str = [0; 32];
  257|   105k|        write!(&mut str[..], "{id:x}").unwrap();
  258|   105k|        Self(str)
  259|   105k|    }
_RNvMs7_NtCs2NsVQwDzFGg_5oxrdf10blank_nodeNtB5_5IdStr6as_strCsapuUTB8XoUj_4trig:
  262|   341k|    fn as_str(&self) -> &str {
  263|   341k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  264|   341k|        str::from_utf8(&self.0[..len]).unwrap()
  265|   341k|    }
_RINvMNtCs2NsVQwDzFGg_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedReECseXCYVcIQZ7o_5oxttl:
   49|   217k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   50|   217k|        let id = id.into();
   51|   217k|        if let Some(numerical_id) = to_integer_id(&id) {
   52|   201k|            Self::new_from_unique_id(numerical_id)
   53|       |        } else {
   54|  16.0k|            Self(BlankNodeContent::Named(id))
   55|       |        }
   56|   217k|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idCseXCYVcIQZ7o_5oxttl:
   62|   201k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|   201k|        Self(BlankNodeContent::Anonymous {
   64|   201k|            id,
   65|   201k|            str: IdStr::new(id),
   66|   201k|        })
   67|   201k|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCseXCYVcIQZ7o_5oxttl:
   88|  1.91k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|  1.91k|        BlankNodeRef(match &self.0 {
   90|    445|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|  1.47k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|  1.47k|                id: *id,
   93|  1.47k|                str: str.as_str(),
   94|  1.47k|            },
   95|       |        })
   96|  1.91k|    }
_RNvMs1_NtCs2NsVQwDzFGg_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCseXCYVcIQZ7o_5oxttl:
  176|   195k|    pub const fn as_str(self) -> &'a str {
  177|   195k|        match self.0 {
  178|  3.30k|            BlankNodeRefContent::Named(id) => id,
  179|   191k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  180|       |        }
  181|   195k|    }
_RNvMs7_NtCs2NsVQwDzFGg_5oxrdf10blank_nodeNtB5_5IdStr3newCseXCYVcIQZ7o_5oxttl:
  255|   998k|    fn new(id: u128) -> Self {
  256|   998k|        let mut str = [0; 32];
  257|   998k|        write!(&mut str[..], "{id:x}").unwrap();
  258|   998k|        Self(str)
  259|   998k|    }
_RNvMs7_NtCs2NsVQwDzFGg_5oxrdf10blank_nodeNtB5_5IdStr6as_strCseXCYVcIQZ7o_5oxttl:
  262|   798k|    fn as_str(&self) -> &str {
  263|   798k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  264|   798k|        str::from_utf8(&self.0[..len]).unwrap()
  265|   798k|    }
_RNvNtCs2NsVQwDzFGg_5oxrdf10blank_node13to_integer_idCseXCYVcIQZ7o_5oxttl:
  328|   217k|fn to_integer_id(id: &str) -> Option<u128> {
  329|   217k|    let digits = id.as_bytes();
  330|   217k|    let mut value: u128 = 0;
  331|   217k|    if let None | Some(b'0') = digits.first() {
  332|  8.76k|        return None; // No empty string or leading zeros
  333|   208k|    }
  334|  6.36M|    for digit in digits {
  335|  6.16M|        value = value.checked_mul(16)?.checked_add(
  336|  6.16M|            match *digit {
  337|  6.15M|                b'0'..=b'9' => digit - b'0',
  338|  2.42M|                b'a'..=b'f' => digit - b'a' + 10,
  339|  6.50k|                _ => return None,
  340|       |            }
  341|  6.15M|            .into(),
  342|      0|        )?;
  343|       |    }
  344|   201k|    Some(value)
  345|   217k|}
_RNvXs0_NtCs2NsVQwDzFGg_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs433v4DNuM1R_4core7default7Default7defaultCseXCYVcIQZ7o_5oxttl:
  109|   317k|    fn default() -> Self {
  110|       |        // We ensure the ID does not start with a number to be also valid with RDF/XML
  111|   796k|        loop {
  112|   796k|            let id = random();
  113|   796k|            let str = IdStr::new(id);
  114|   796k|            if matches!(str.as_str().as_bytes().first(), Some(b'a'..=b'f')) {
  115|   317k|                return Self(BlankNodeContent::Anonymous { id, str });
  116|   478k|            }
  117|       |        }
  118|   317k|    }
_RNvXs2_NtCs2NsVQwDzFGg_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCs433v4DNuM1R_4core3fmt7Display3fmtCseXCYVcIQZ7o_5oxttl:
  217|   195k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  218|   195k|        write!(f, "_:{}", self.as_str())
  219|   195k|    }
_RNCNvMs7_NtCs2NsVQwDzFGg_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  263|  38.1M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
_RNvMNtCs2NsVQwDzFGg_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idB4_:
   62|   116k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|   116k|        Self(BlankNodeContent::Anonymous {
   64|   116k|            id,
   65|   116k|            str: IdStr::new(id),
   66|   116k|        })
   67|   116k|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf10blank_nodeNtB2_9BlankNode6as_refB4_:
   88|   118k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|   118k|        BlankNodeRef(match &self.0 {
   90|    422|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|   117k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|   117k|                id: *id,
   93|   117k|                str: str.as_str(),
   94|   117k|            },
   95|       |        })
   96|   118k|    }
_RNvMs1_NtCs2NsVQwDzFGg_5oxrdf10blank_nodeNtB5_12BlankNodeRef13new_uncheckedB7_:
  163|  10.7k|    pub fn new_unchecked(id: &'a str) -> Self {
  164|  10.7k|        if let Some(numerical_id) = to_integer_id(id) {
  165|  10.7k|            Self(BlankNodeRefContent::Anonymous {
  166|  10.7k|                id: numerical_id,
  167|  10.7k|                str: id,
  168|  10.7k|            })
  169|       |        } else {
  170|      0|            Self(BlankNodeRefContent::Named(id))
  171|       |        }
  172|  10.7k|    }
_RNvMs1_NtCs2NsVQwDzFGg_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strB7_:
  176|  40.1k|    pub const fn as_str(self) -> &'a str {
  177|  40.1k|        match self.0 {
  178|  2.90k|            BlankNodeRefContent::Named(id) => id,
  179|  37.1k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  180|       |        }
  181|  40.1k|    }
_RNvMs1_NtCs2NsVQwDzFGg_5oxrdf10blank_nodeNtB5_12BlankNodeRef9unique_idB7_:
  196|   150k|    pub const fn unique_id(&self) -> Option<u128> {
  197|   150k|        match self.0 {
  198|  2.90k|            BlankNodeRefContent::Named(_) => None,
  199|   147k|            BlankNodeRefContent::Anonymous { id, .. } => Some(id),
  200|       |        }
  201|   150k|    }
_RNvMs1_NtCs2NsVQwDzFGg_5oxrdf10blank_nodeNtB5_12BlankNodeRef10into_ownedB7_:
  204|  2.64k|    pub fn into_owned(self) -> BlankNode {
  205|  2.64k|        BlankNode(match self.0 {
  206|    422|            BlankNodeRefContent::Named(id) => BlankNodeContent::Named(id.to_owned()),
  207|  2.22k|            BlankNodeRefContent::Anonymous { id, .. } => BlankNodeContent::Anonymous {
  208|  2.22k|                id,
  209|  2.22k|                str: IdStr::new(id),
  210|  2.22k|            },
  211|       |        })
  212|  2.64k|    }
_RNvMs7_NtCs2NsVQwDzFGg_5oxrdf10blank_nodeNtB5_5IdStr3newB7_:
  255|   118k|    fn new(id: u128) -> Self {
  256|   118k|        let mut str = [0; 32];
  257|   118k|        write!(&mut str[..], "{id:x}").unwrap();
  258|   118k|        Self(str)
  259|   118k|    }
_RNvMs7_NtCs2NsVQwDzFGg_5oxrdf10blank_nodeNtB5_5IdStr6as_strB7_:
  262|   117k|    fn as_str(&self) -> &str {
  263|   117k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  264|   117k|        str::from_utf8(&self.0[..len]).unwrap()
  265|   117k|    }
_RNvNtCs2NsVQwDzFGg_5oxrdf10blank_node13to_integer_idB3_:
  328|  10.7k|fn to_integer_id(id: &str) -> Option<u128> {
  329|  10.7k|    let digits = id.as_bytes();
  330|  10.7k|    let mut value: u128 = 0;
  331|  10.7k|    if let None | Some(b'0') = digits.first() {
  332|      0|        return None; // No empty string or leading zeros
  333|  10.7k|    }
  334|   182k|    for digit in digits {
  335|   171k|        value = value.checked_mul(16)?.checked_add(
  336|   171k|            match *digit {
  337|   171k|                b'0'..=b'9' => digit - b'0',
  338|  62.4k|                b'a'..=b'f' => digit - b'a' + 10,
  339|      0|                _ => return None,
  340|       |            }
  341|   171k|            .into(),
  342|      0|        )?;
  343|       |    }
  344|  10.7k|    Some(value)
  345|  10.7k|}

_RINvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB3_7Dataset6insertRNtNtB5_6triple4QuadECsapuUTB8XoUj_4trig:
  361|   177k|    pub fn insert<'a>(&mut self, quad: impl Into<QuadRef<'a>>) -> bool {
  362|   177k|        let quad = self.encode_quad(quad.into());
  363|   177k|        self.insert_encoded(quad)
  364|   177k|    }
_RINvXs3_NtCs2NsVQwDzFGg_5oxrdf7datasetNtB6_7DatasetINtNtNtNtCs433v4DNuM1R_4core4iter6traits7collect12FromIteratorRNtNtB8_6triple4QuadE9from_iterINtNtNtBW_5slice4iter4IterB1O_EECsapuUTB8XoUj_4trig:
  945|  7.59k|    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self {
  946|  7.59k|        let mut g = Self::new();
  947|  7.59k|        g.extend(iter);
  948|  7.59k|        g
  949|  7.59k|    }
_RINvXs5_NtCs2NsVQwDzFGg_5oxrdf7datasetNtB6_7DatasetINtNtNtNtCs433v4DNuM1R_4core4iter6traits7collect6ExtendRNtNtB8_6triple4QuadE6extendINtNtNtBW_5slice4iter4IterB1H_EECsapuUTB8XoUj_4trig:
  961|  7.59k|    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  962|   185k|        for t in iter {
  963|   177k|            self.insert(t);
  964|   177k|        }
  965|  7.59k|    }
_RINvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB3_7Dataset8containsNtNtB5_6triple7QuadRefEB5_:
  342|  72.2k|    pub fn contains<'a>(&self, quad: impl Into<QuadRef<'a>>) -> bool {
  343|  72.2k|        if let Some(q) = self.encoded_quad(quad.into()) {
  344|  72.2k|            self.spog.contains(&q)
  345|       |        } else {
  346|      0|            false
  347|       |        }
  348|  72.2k|    }
_RINvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB3_7Dataset18encoded_named_nodeNtNtB5_10named_node12NamedNodeRefEB5_:
  455|  72.2k|    pub(super) fn encoded_named_node<'a>(
  456|  72.2k|        &self,
  457|  72.2k|        node: impl Into<NamedNodeRef<'a>>,
  458|  72.2k|    ) -> Option<InternedNamedNode> {
  459|  72.2k|        InternedNamedNode::encoded_from(node.into(), &self.interner)
  460|  72.2k|    }
_RINvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB3_7Dataset15encoded_subjectNtNtB5_6triple10SubjectRefEB5_:
  462|  72.2k|    pub(super) fn encoded_subject<'a>(
  463|  72.2k|        &self,
  464|  72.2k|        node: impl Into<SubjectRef<'a>>,
  465|  72.2k|    ) -> Option<InternedSubject> {
  466|  72.2k|        InternedSubject::encoded_from(node.into(), &self.interner)
  467|  72.2k|    }
_RINvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB3_7Dataset12encoded_termNtNtB5_6triple7TermRefEB5_:
  469|  72.2k|    pub(super) fn encoded_term<'a>(&self, term: impl Into<TermRef<'a>>) -> Option<InternedTerm> {
  470|  72.2k|        InternedTerm::encoded_from(term.into(), &self.interner)
  471|  72.2k|    }
_RINvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB3_7Dataset18encoded_graph_nameNtNtB5_6triple12GraphNameRefEB5_:
  473|  72.2k|    pub(super) fn encoded_graph_name<'a>(
  474|  72.2k|        &self,
  475|  72.2k|        graph_name: impl Into<GraphNameRef<'a>>,
  476|  72.2k|    ) -> Option<InternedGraphName> {
  477|  72.2k|        InternedGraphName::encoded_from(graph_name.into(), &self.interner)
  478|  72.2k|    }
_RNCNvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB4_7Dataset12canonicalize0B6_:
  546|  19.8k|            bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
_RNCNvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB4_7Dataset11hash_bnodes0B6_:
  654|   185k|            .map(|bnode| (*bnode, true))
_RNCNvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB4_7Dataset11hash_bnodess_0B6_:
  689|   164k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));
_RINvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB3_7Dataset10hash_tupleNtNtB5_10named_node12NamedNodeRefEB5_:
  777|   588k|    fn hash_tuple(v: impl Hash) -> u64 {
  778|   588k|        let mut hasher = DefaultHasher::new();
  779|   588k|        v.hash(&mut hasher);
  780|   588k|        hasher.finish()
  781|   588k|    }
_RINvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB3_7Dataset10hash_tupleNtNtB5_7literal10LiteralRefEB5_:
  777|   273k|    fn hash_tuple(v: impl Hash) -> u64 {
  778|   273k|        let mut hasher = DefaultHasher::new();
  779|   273k|        v.hash(&mut hasher);
  780|   273k|        hasher.finish()
  781|   273k|    }
_RINvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB3_7Dataset10hash_tupleTRINtNtCs80BIJ2NAVqC_5alloc3vec3VecTyyyyEEyEEB5_:
  777|   371k|    fn hash_tuple(v: impl Hash) -> u64 {
  778|   371k|        let mut hasher = DefaultHasher::new();
  779|   371k|        v.hash(&mut hasher);
  780|   371k|        hasher.finish()
  781|   371k|    }
_RINvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB3_7Dataset10hash_tupleTylEEB5_:
  777|  43.2k|    fn hash_tuple(v: impl Hash) -> u64 {
  778|  43.2k|        let mut hasher = DefaultHasher::new();
  779|  43.2k|        v.hash(&mut hasher);
  780|  43.2k|        hasher.finish()
  781|  43.2k|    }
_RINvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB3_7Dataset10hash_tupleTyyyEEB5_:
  777|  42.7k|    fn hash_tuple(v: impl Hash) -> u64 {
  778|  42.7k|        let mut hasher = DefaultHasher::new();
  779|  42.7k|        v.hash(&mut hasher);
  780|  42.7k|        hasher.finish()
  781|  42.7k|    }
_RNCNvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB4_7Dataset11distinguish0B6_:
  794|   160k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
_RNCNvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB4_7Dataset11distinguishs_0B6_:
  794|   160k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
_RNCNvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB4_7Dataset11distinguishs0_0B6_:
  798|  43.2k|                .map(|b| {
  799|  43.2k|                    let mut hash_prime = hash.clone();
  800|  43.2k|                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  801|  43.2k|                    let (hash_prime_prime, partition_prime) =
  802|  43.2k|                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  803|  43.2k|                    self.distinguish(&hash_prime_prime, &partition_prime, quads_per_blank_node)
  804|  43.2k|                })
_RNCNvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB4_7Dataset5label0B6_:
  825|   829k|            .map(|(s, p, o, g)| {
  826|   829k|                (
  827|   829k|                    match s {
  828|   364k|                        InternedSubject::NamedNode(_) => s,
  829|  83.4k|                        InternedSubject::BlankNode(bnode) => {
  830|  83.4k|                            InternedSubject::BlankNode(self.map_bnode(bnode, hashes))
  831|       |                        }
  832|       |                        #[cfg(feature = "rdf-star")]
  833|   381k|                        InternedSubject::Triple(triple) => {
  834|   381k|                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  835|   381k|                                self.label_triple(&triple, hashes).as_ref(),
  836|   381k|                                &mut self.interner,
  837|   381k|                            )))
  838|       |                        }
  839|       |                    },
  840|   829k|                    p,
  841|   829k|                    match o {
  842|   779k|                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  843|  26.8k|                        InternedTerm::BlankNode(bnode) => {
  844|  26.8k|                            InternedTerm::BlankNode(self.map_bnode(bnode, hashes))
  845|       |                        }
  846|       |                        #[cfg(feature = "rdf-star")]
  847|  23.3k|                        InternedTerm::Triple(triple) => {
  848|  23.3k|                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  849|  23.3k|                                self.label_triple(&triple, hashes).as_ref(),
  850|  23.3k|                                &mut self.interner,
  851|  23.3k|                            )))
  852|       |                        }
  853|       |                    },
  854|   829k|                    match g {
  855|   824k|                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  856|  4.89k|                        InternedGraphName::BlankNode(bnode) => {
  857|  4.89k|                            InternedGraphName::BlankNode(self.map_bnode(bnode, hashes))
  858|       |                        }
  859|       |                    },
  860|       |                )
  861|   829k|            })
_RNCNvXsg_NtCs2NsVQwDzFGg_5oxrdf7datasetNtB7_4IterNtNtNtNtCs433v4DNuM1R_4core4iter6traits8iterator8Iterator4next0B9_:
 1534|  72.2k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))
_RNvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB2_7Dataset3new:
  110|  7.59k|    pub fn new() -> Self {
  111|  7.59k|        Self::default()
  112|  7.59k|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB2_7Dataset4iter:
  170|  3.79k|    pub fn iter(&self) -> Iter<'_> {
  171|  3.79k|        let iter = self.spog.iter();
  172|  3.79k|        Iter {
  173|  3.79k|            dataset: self,
  174|  3.79k|            inner: iter,
  175|  3.79k|        }
  176|  3.79k|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB2_7Dataset3len:
  351|  7.59k|    pub fn len(&self) -> usize {
  352|  7.59k|        self.gspo.len()
  353|  7.59k|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB2_7Dataset14insert_encoded:
  366|   321k|    fn insert_encoded(
  367|   321k|        &mut self,
  368|   321k|        quad: (
  369|   321k|            InternedSubject,
  370|   321k|            InternedNamedNode,
  371|   321k|            InternedTerm,
  372|   321k|            InternedGraphName,
  373|   321k|        ),
  374|   321k|    ) -> bool {
  375|   321k|        let (s, p, o, g) = quad;
  376|   321k|        self.gspo.insert((g.clone(), s.clone(), p, o.clone()));
  377|   321k|        self.gpos.insert((g.clone(), p, o.clone(), s.clone()));
  378|   321k|        self.gosp.insert((g.clone(), o.clone(), s.clone(), p));
  379|   321k|        self.spog.insert((s.clone(), p, o.clone(), g.clone()));
  380|   321k|        self.posg.insert((p, o.clone(), s.clone(), g.clone()));
  381|   321k|        self.ospg.insert((o, s, p, g))
  382|   321k|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB2_7Dataset5clear:
  412|  7.59k|    pub fn clear(&mut self) {
  413|  7.59k|        self.gspo.clear();
  414|  7.59k|        self.gpos.clear();
  415|  7.59k|        self.gosp.clear();
  416|  7.59k|        self.spog.clear();
  417|  7.59k|        self.posg.clear();
  418|  7.59k|        self.ospg.clear();
  419|  7.59k|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB2_7Dataset11encode_quad:
  421|   177k|    fn encode_quad(
  422|   177k|        &mut self,
  423|   177k|        quad: QuadRef<'_>,
  424|   177k|    ) -> (
  425|   177k|        InternedSubject,
  426|   177k|        InternedNamedNode,
  427|   177k|        InternedTerm,
  428|   177k|        InternedGraphName,
  429|   177k|    ) {
  430|   177k|        (
  431|   177k|            InternedSubject::encoded_into(quad.subject, &mut self.interner),
  432|   177k|            InternedNamedNode::encoded_into(quad.predicate, &mut self.interner),
  433|   177k|            InternedTerm::encoded_into(quad.object, &mut self.interner),
  434|   177k|            InternedGraphName::encoded_into(quad.graph_name, &mut self.interner),
  435|   177k|        )
  436|   177k|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB2_7Dataset12encoded_quad:
  438|  72.2k|    fn encoded_quad(
  439|  72.2k|        &self,
  440|  72.2k|        quad: QuadRef<'_>,
  441|  72.2k|    ) -> Option<(
  442|  72.2k|        InternedSubject,
  443|  72.2k|        InternedNamedNode,
  444|  72.2k|        InternedTerm,
  445|  72.2k|        InternedGraphName,
  446|  72.2k|    )> {
  447|  72.2k|        Some((
  448|  72.2k|            self.encoded_subject(quad.subject)?,
  449|  72.2k|            self.encoded_named_node(quad.predicate)?,
  450|  72.2k|            self.encoded_term(quad.object)?,
  451|  72.2k|            self.encoded_graph_name(quad.graph_name)?,
  452|       |        ))
  453|  72.2k|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB2_7Dataset11decode_spog:
  480|  72.2k|    fn decode_spog(
  481|  72.2k|        &self,
  482|  72.2k|        quad: (
  483|  72.2k|            &InternedSubject,
  484|  72.2k|            &InternedNamedNode,
  485|  72.2k|            &InternedTerm,
  486|  72.2k|            &InternedGraphName,
  487|  72.2k|        ),
  488|  72.2k|    ) -> QuadRef<'_> {
  489|  72.2k|        QuadRef {
  490|  72.2k|            subject: quad.0.decode_from(&self.interner),
  491|  72.2k|            predicate: quad.1.decode_from(&self.interner),
  492|  72.2k|            object: quad.2.decode_from(&self.interner),
  493|  72.2k|            graph_name: quad.3.decode_from(&self.interner),
  494|  72.2k|        }
  495|  72.2k|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB2_7Dataset12canonicalize:
  542|  7.59k|    pub fn canonicalize(&mut self) {
  543|  7.59k|        let bnodes = self.blank_nodes();
  544|  7.59k|        let quads_per_blank_node = self.quads_per_blank_nodes();
  545|  7.59k|        let (hash, partition) = self.hash_bnodes(
  546|  7.59k|            bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
  547|  7.59k|            &quads_per_blank_node,
  548|  7.59k|        );
  549|  7.59k|        let new_quads = self.distinguish(&hash, &partition, &quads_per_blank_node);
  550|  7.59k|        self.clear();
  551|   152k|        for quad in new_quads {
  552|   144k|            self.insert_encoded(quad);
  553|   144k|        }
  554|  7.59k|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB2_7Dataset11blank_nodes:
  556|  7.59k|    fn blank_nodes(&self) -> HashSet<InternedBlankNode> {
  557|  7.59k|        let mut bnodes = HashSet::new();
  558|   152k|        for (g, s, _, o) in &self.gspo {
  559|   144k|            if let InternedSubject::BlankNode(bnode) = s {
  560|  15.4k|                bnodes.insert(*bnode);
  561|   128k|            }
  562|       |            #[cfg(feature = "rdf-star")]
  563|   144k|            if let InternedSubject::Triple(triple) = s {
  564|  72.5k|                Self::triple_blank_nodes(triple, &mut bnodes);
  565|  72.5k|            }
  566|   144k|            if let InternedTerm::BlankNode(bnode) = o {
  567|  4.88k|                bnodes.insert(*bnode);
  568|   139k|            }
  569|       |            #[cfg(feature = "rdf-star")]
  570|   144k|            if let InternedTerm::Triple(triple) = o {
  571|  3.32k|                Self::triple_blank_nodes(triple, &mut bnodes);
  572|   141k|            }
  573|   144k|            if let InternedGraphName::BlankNode(bnode) = g {
  574|  1.16k|                bnodes.insert(*bnode);
  575|   143k|            }
  576|       |        }
  577|  7.59k|        bnodes
  578|  7.59k|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB2_7Dataset18triple_blank_nodes:
  581|   220k|    fn triple_blank_nodes(triple: &InternedTriple, bnodes: &mut HashSet<InternedBlankNode>) {
  582|   220k|        if let InternedSubject::BlankNode(bnode) = &triple.subject {
  583|    606|            bnodes.insert(*bnode);
  584|   220k|        } else if let InternedSubject::Triple(t) = &triple.subject {
  585|   144k|            Self::triple_blank_nodes(t, bnodes);
  586|   144k|        }
  587|   220k|        if let InternedTerm::BlankNode(bnode) = &triple.object {
  588|    522|            bnodes.insert(*bnode);
  589|   220k|        } else if let InternedTerm::Triple(t) = &triple.object {
  590|    122|            Self::triple_blank_nodes(t, bnodes);
  591|   220k|        }
  592|   220k|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB2_7Dataset21quads_per_blank_nodes:
  594|  7.59k|    fn quads_per_blank_nodes(&self) -> QuadsPerBlankNode {
  595|  7.59k|        let mut map: HashMap<_, Vec<_>> = HashMap::new();
  596|   152k|        for quad in &self.spog {
  597|   144k|            if let InternedSubject::BlankNode(bnode) = &quad.0 {
  598|  15.4k|                map.entry(*bnode).or_default().push(quad.clone());
  599|   128k|            }
  600|       |            #[cfg(feature = "rdf-star")]
  601|   144k|            if let InternedSubject::Triple(t) = &quad.0 {
  602|  72.5k|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  603|  72.5k|            }
  604|   144k|            if let InternedTerm::BlankNode(bnode) = &quad.2 {
  605|  4.88k|                map.entry(*bnode).or_default().push(quad.clone());
  606|   139k|            }
  607|       |            #[cfg(feature = "rdf-star")]
  608|   144k|            if let InternedTerm::Triple(t) = &quad.2 {
  609|  3.32k|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  610|   141k|            }
  611|   144k|            if let InternedGraphName::BlankNode(bnode) = &quad.3 {
  612|  1.16k|                map.entry(*bnode).or_default().push(quad.clone());
  613|   143k|            }
  614|       |        }
  615|  7.59k|        map
  616|  7.59k|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB2_7Dataset55add_quad_with_quoted_triple_to_quad_per_blank_nodes_map:
  619|   220k|    fn add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(
  620|   220k|        quad: &(
  621|   220k|            InternedSubject,
  622|   220k|            InternedNamedNode,
  623|   220k|            InternedTerm,
  624|   220k|            InternedGraphName,
  625|   220k|        ),
  626|   220k|        triple: &InternedTriple,
  627|   220k|        map: &mut QuadsPerBlankNode,
  628|   220k|    ) {
  629|   220k|        if let InternedSubject::BlankNode(bnode) = &triple.subject {
  630|    606|            map.entry(*bnode).or_default().push(quad.clone());
  631|   220k|        }
  632|   220k|        if let InternedSubject::Triple(t) = &triple.subject {
  633|   144k|            Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, map);
  634|   144k|        }
  635|   220k|        if let InternedTerm::BlankNode(bnode) = &triple.object {
  636|    522|            map.entry(*bnode).or_default().push(quad.clone());
  637|   220k|        }
  638|   220k|        if let InternedTerm::Triple(t) = &triple.object {
  639|    122|            Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, map);
  640|   220k|        }
  641|   220k|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB2_7Dataset11hash_bnodes:
  643|  50.8k|    fn hash_bnodes(
  644|  50.8k|        &self,
  645|  50.8k|        mut hashes: HashMap<InternedBlankNode, u64>,
  646|  50.8k|        quads_per_blank_node: &QuadsPerBlankNode,
  647|  50.8k|    ) -> (
  648|  50.8k|        HashMap<InternedBlankNode, u64>,
  649|  50.8k|        Vec<(u64, Vec<InternedBlankNode>)>,
  650|  50.8k|    ) {
  651|  50.8k|        let mut to_hash = Vec::new();
  652|  50.8k|        let mut to_do = hashes
  653|  50.8k|            .keys()
  654|  50.8k|            .map(|bnode| (*bnode, true))
  655|  50.8k|            .collect::<HashMap<_, _>>();
  656|  50.8k|        let mut partition = HashMap::<_, Vec<_>>::with_capacity(hashes.len());
  657|  50.8k|        let mut old_partition_count = usize::MAX;
  658|   152k|        while old_partition_count != partition.len() {
  659|   101k|            old_partition_count = partition.len();
  660|   101k|            partition.clear();
  661|   101k|            let mut new_hashes = hashes.clone();
  662|   371k|            for bnode in hashes.keys() {
  663|   371k|                let hash = if to_do.contains_key(bnode) {
  664|   378k|                    for (s, p, o, g) in &quads_per_blank_node[bnode] {
  665|   378k|                        to_hash.push((
  666|   378k|                            self.hash_subject(s, *bnode, &hashes),
  667|   378k|                            self.hash_named_node(*p),
  668|   378k|                            self.hash_term(o, *bnode, &hashes),
  669|   378k|                            self.hash_graph_name(g, *bnode, &hashes),
  670|   378k|                        ));
  671|   378k|                    }
  672|   371k|                    to_hash.sort_unstable();
  673|   371k|                    let hash = Self::hash_tuple((&to_hash, hashes[bnode]));
  674|   371k|                    to_hash.clear();
  675|   371k|                    if hash == hashes[bnode] {
  676|      0|                        to_do.insert(*bnode, false);
  677|   371k|                    } else {
  678|   371k|                        new_hashes.insert(*bnode, hash);
  679|   371k|                    }
  680|   371k|                    hash
  681|       |                } else {
  682|      0|                    hashes[bnode]
  683|       |                };
  684|   371k|                partition.entry(hash).or_default().push(*bnode);
  685|       |            }
  686|   101k|            hashes = new_hashes;
  687|       |        }
  688|  50.8k|        let mut partition: Vec<_> = partition.into_iter().collect();
  689|  50.8k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));
  690|  50.8k|        (hashes, partition)
  691|  50.8k|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB2_7Dataset15hash_named_node:
  693|   420k|    fn hash_named_node(&self, node: InternedNamedNode) -> u64 {
  694|   420k|        Self::hash_tuple(node.decode_from(&self.interner))
  695|   420k|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB2_7Dataset15hash_blank_node:
  697|   396k|    fn hash_blank_node(
  698|   396k|        node: InternedBlankNode,
  699|   396k|        current_blank_node: InternedBlankNode,
  700|   396k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  701|   396k|    ) -> u64 {
  702|   396k|        if node == current_blank_node {
  703|   378k|            u64::MAX
  704|       |        } else {
  705|  18.4k|            bnodes_hash[&node]
  706|       |        }
  707|   396k|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB2_7Dataset12hash_subject:
  709|   420k|    fn hash_subject(
  710|   420k|        &self,
  711|   420k|        node: &InternedSubject,
  712|   420k|        current_blank_node: InternedBlankNode,
  713|   420k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  714|   420k|    ) -> u64 {
  715|   420k|        match node {
  716|   134k|            InternedSubject::NamedNode(node) => Self::hash_tuple(node.decode_from(&self.interner)),
  717|   283k|            InternedSubject::BlankNode(bnode) => {
  718|   283k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  719|       |            }
  720|       |            #[cfg(feature = "rdf-star")]
  721|  2.23k|            InternedSubject::Triple(triple) => {
  722|  2.23k|                self.hash_triple(triple, current_blank_node, bnodes_hash)
  723|       |            }
  724|       |        }
  725|   420k|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB2_7Dataset9hash_term:
  727|   420k|    fn hash_term(
  728|   420k|        &self,
  729|   420k|        term: &InternedTerm,
  730|   420k|        current_blank_node: InternedBlankNode,
  731|   420k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  732|   420k|    ) -> u64 {
  733|   420k|        match term {
  734|  11.0k|            InternedTerm::NamedNode(node) => Self::hash_tuple(node.decode_from(&self.interner)),
  735|  96.0k|            InternedTerm::BlankNode(bnode) => {
  736|  96.0k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  737|       |            }
  738|   273k|            InternedTerm::Literal(literal) => Self::hash_tuple(literal.decode_from(&self.interner)),
  739|       |            #[cfg(feature = "rdf-star")]
  740|  40.4k|            InternedTerm::Triple(triple) => {
  741|  40.4k|                self.hash_triple(triple, current_blank_node, bnodes_hash)
  742|       |            }
  743|       |        }
  744|   420k|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB2_7Dataset15hash_graph_name:
  746|   378k|    fn hash_graph_name(
  747|   378k|        &self,
  748|   378k|        graph_name: &InternedGraphName,
  749|   378k|        current_blank_node: InternedBlankNode,
  750|   378k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  751|   378k|    ) -> u64 {
  752|   378k|        match graph_name {
  753|  21.7k|            InternedGraphName::NamedNode(node) => {
  754|  21.7k|                Self::hash_tuple(node.decode_from(&self.interner))
  755|       |            }
  756|  17.1k|            InternedGraphName::BlankNode(bnode) => {
  757|  17.1k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  758|       |            }
  759|   339k|            InternedGraphName::DefaultGraph => 0,
  760|       |        }
  761|   378k|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB2_7Dataset11hash_triple:
  764|  42.7k|    fn hash_triple(
  765|  42.7k|        &self,
  766|  42.7k|        triple: &InternedTriple,
  767|  42.7k|        current_blank_node: InternedBlankNode,
  768|  42.7k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  769|  42.7k|    ) -> u64 {
  770|  42.7k|        Self::hash_tuple((
  771|  42.7k|            self.hash_subject(&triple.subject, current_blank_node, bnodes_hash),
  772|  42.7k|            self.hash_named_node(triple.predicate),
  773|  42.7k|            self.hash_term(&triple.object, current_blank_node, bnodes_hash),
  774|  42.7k|        ))
  775|  42.7k|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB2_7Dataset11distinguish:
  783|  50.8k|    fn distinguish(
  784|  50.8k|        &mut self,
  785|  50.8k|        hash: &HashMap<InternedBlankNode, u64>,
  786|  50.8k|        partition: &[(u64, Vec<InternedBlankNode>)],
  787|  50.8k|        quads_per_blank_node: &QuadsPerBlankNode,
  788|  50.8k|    ) -> Vec<(
  789|  50.8k|        InternedSubject,
  790|  50.8k|        InternedNamedNode,
  791|  50.8k|        InternedTerm,
  792|  50.8k|        InternedGraphName,
  793|  50.8k|    )> {
  794|  50.8k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
  795|  50.8k|        if let Some(b_prime) = b_prime {
  796|  18.8k|            b_prime
  797|  18.8k|                .iter()
  798|  18.8k|                .map(|b| {
  799|       |                    let mut hash_prime = hash.clone();
  800|       |                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  801|       |                    let (hash_prime_prime, partition_prime) =
  802|       |                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  803|       |                    self.distinguish(&hash_prime_prime, &partition_prime, quads_per_blank_node)
  804|  18.8k|                })
  805|  18.8k|                .reduce(min)
  806|  18.8k|                .unwrap_or_default()
  807|       |        } else {
  808|  32.0k|            self.label(hash)
  809|       |        }
  810|  50.8k|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB2_7Dataset5label:
  813|  32.0k|    fn label(
  814|  32.0k|        &mut self,
  815|  32.0k|        hashes: &HashMap<InternedBlankNode, u64>,
  816|  32.0k|    ) -> Vec<(
  817|  32.0k|        InternedSubject,
  818|  32.0k|        InternedNamedNode,
  819|  32.0k|        InternedTerm,
  820|  32.0k|        InternedGraphName,
  821|  32.0k|    )> {
  822|  32.0k|        let old_quads: Vec<_> = self.spog.iter().cloned().collect();
  823|  32.0k|        let mut quads: Vec<_> = old_quads
  824|  32.0k|            .into_iter()
  825|  32.0k|            .map(|(s, p, o, g)| {
  826|       |                (
  827|       |                    match s {
  828|       |                        InternedSubject::NamedNode(_) => s,
  829|       |                        InternedSubject::BlankNode(bnode) => {
  830|       |                            InternedSubject::BlankNode(self.map_bnode(bnode, hashes))
  831|       |                        }
  832|       |                        #[cfg(feature = "rdf-star")]
  833|       |                        InternedSubject::Triple(triple) => {
  834|       |                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  835|       |                                self.label_triple(&triple, hashes).as_ref(),
  836|       |                                &mut self.interner,
  837|       |                            )))
  838|       |                        }
  839|       |                    },
  840|       |                    p,
  841|       |                    match o {
  842|       |                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  843|       |                        InternedTerm::BlankNode(bnode) => {
  844|       |                            InternedTerm::BlankNode(self.map_bnode(bnode, hashes))
  845|       |                        }
  846|       |                        #[cfg(feature = "rdf-star")]
  847|       |                        InternedTerm::Triple(triple) => {
  848|       |                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  849|       |                                self.label_triple(&triple, hashes).as_ref(),
  850|       |                                &mut self.interner,
  851|       |                            )))
  852|       |                        }
  853|       |                    },
  854|       |                    match g {
  855|       |                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  856|       |                        InternedGraphName::BlankNode(bnode) => {
  857|       |                            InternedGraphName::BlankNode(self.map_bnode(bnode, hashes))
  858|       |                        }
  859|       |                    },
  860|       |                )
  861|  32.0k|            })
  862|  32.0k|            .collect();
  863|  32.0k|        quads.sort_unstable();
  864|  32.0k|        quads
  865|  32.0k|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB2_7Dataset12label_triple:
  868|  1.11M|    fn label_triple(
  869|  1.11M|        &mut self,
  870|  1.11M|        triple: &InternedTriple,
  871|  1.11M|        hashes: &HashMap<InternedBlankNode, u64>,
  872|  1.11M|    ) -> Triple {
  873|       |        Triple {
  874|  1.11M|            subject: if let InternedSubject::BlankNode(bnode) = &triple.subject {
  875|    786|                Self::gen_bnode(*bnode, hashes).into()
  876|  1.11M|            } else if let InternedSubject::Triple(t) = &triple.subject {
  877|   712k|                self.label_triple(t, hashes).into()
  878|       |            } else {
  879|   405k|                triple.subject.decode_from(&self.interner).into_owned()
  880|       |            },
  881|  1.11M|            predicate: triple.predicate.decode_from(&self.interner).into_owned(),
  882|  1.11M|            object: if let InternedTerm::BlankNode(bnode) = &triple.object {
  883|    724|                Self::gen_bnode(*bnode, hashes).into()
  884|  1.11M|            } else if let InternedTerm::Triple(t) = &triple.object {
  885|    926|                self.label_triple(t, hashes).into()
  886|       |            } else {
  887|  1.11M|                triple.object.decode_from(&self.interner).into_owned()
  888|       |            },
  889|       |        }
  890|  1.11M|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB2_7Dataset9map_bnode:
  892|   115k|    fn map_bnode(
  893|   115k|        &mut self,
  894|   115k|        old_bnode: InternedBlankNode,
  895|   115k|        hashes: &HashMap<InternedBlankNode, u64>,
  896|   115k|    ) -> InternedBlankNode {
  897|   115k|        InternedBlankNode::encoded_into(
  898|   115k|            Self::gen_bnode(old_bnode, hashes).as_ref(),
  899|   115k|            &mut self.interner,
  900|   115k|        )
  901|   115k|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf7datasetNtB2_7Dataset9gen_bnode:
  903|   116k|    fn gen_bnode(
  904|   116k|        old_bnode: InternedBlankNode,
  905|   116k|        hashes: &HashMap<InternedBlankNode, u64>,
  906|   116k|    ) -> BlankNode {
  907|   116k|        BlankNode::new_from_unique_id(hashes[&old_bnode].into())
  908|   116k|    }
_RNvXs_NtCs2NsVQwDzFGg_5oxrdf7datasetNtB4_7DatasetNtNtCs433v4DNuM1R_4core3cmp9PartialEq2eq:
  912|  3.79k|    fn eq(&self, other: &Self) -> bool {
  913|  3.79k|        if self.len() != other.len() {
  914|      0|            return false;
  915|  3.79k|        }
  916|  76.0k|        for q in self {
  917|  72.2k|            if !other.contains(q) {
  918|      0|                return false;
  919|  72.2k|            }
  920|       |        }
  921|  3.79k|        true
  922|  3.79k|    }
_RNvXs1_NtCs2NsVQwDzFGg_5oxrdf7datasetRNtB5_7DatasetNtNtNtNtCs433v4DNuM1R_4core4iter6traits7collect12IntoIterator9into_iter:
  931|  3.79k|    fn into_iter(self) -> Self::IntoIter {
  932|  3.79k|        self.iter()
  933|  3.79k|    }
_RNvXsg_NtCs2NsVQwDzFGg_5oxrdf7datasetNtB5_4IterNtNtNtNtCs433v4DNuM1R_4core4iter6traits8iterator8Iterator4next:
 1531|  76.0k|    fn next(&mut self) -> Option<Self::Item> {
 1532|  76.0k|        self.inner
 1533|  76.0k|            .next()
 1534|  76.0k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))
 1535|  76.0k|    }

_RNCNvMs1_NtCs2NsVQwDzFGg_5oxrdf9interningNtB7_17InternedBlankNode12encoded_into0B9_:
  135|  37.1k|                .or_insert_with(|| blank_node.as_str().into());
_RNvMNtCs2NsVQwDzFGg_5oxrdf9interningNtB2_8Interner13get_or_intern:
   18|  5.13M|    fn get_or_intern(&mut self, value: &str) -> Key {
   19|  5.13M|        let mut hash = self.hash(value);
   20|  5.13M|        loop {
   21|  5.13M|            match self.string_for_hash.entry(hash) {
   22|   104k|                Entry::Vacant(e) => {
   23|   104k|                    e.insert(value.into());
   24|   104k|                    return Key(hash);
   25|       |                }
   26|  5.03M|                Entry::Occupied(e) => loop {
   27|  5.03M|                    if e.get() == value {
   28|  5.03M|                        return Key(hash);
   29|      0|                    } else if hash == u64::MAX - 1 {
   30|      0|                        hash = 0;
   31|      0|                    } else {
   32|      0|                        hash += 1;
   33|      0|                    }
   34|       |                },
   35|       |            }
   36|       |        }
   37|  5.13M|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf9interningNtB2_8Interner3get:
   39|   594k|    fn get(&self, value: &str) -> Option<Key> {
   40|   594k|        let mut hash = self.hash(value);
   41|       |        loop {
   42|   594k|            let v = self.string_for_hash.get(&hash)?;
   43|   594k|            if v == value {
   44|   594k|                return Some(Key(hash));
   45|      0|            } else if hash == u64::MAX - 1 {
   46|      0|                hash = 0;
   47|      0|            } else {
   48|      0|                hash += 1;
   49|      0|            }
   50|       |        }
   51|   594k|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf9interningNtB2_8Interner4hash:
   53|  5.72M|    fn hash(&self, value: &str) -> u64 {
   54|  5.72M|        let mut hasher = self.hasher.build_hasher();
   55|  5.72M|        hasher.write(value.as_bytes());
   56|  5.72M|        let hash = hasher.finish();
   57|  5.72M|        if hash == u64::MAX {
   58|      0|            0
   59|       |        } else {
   60|  5.72M|            hash
   61|       |        }
   62|  5.72M|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf9interningNtB2_8Interner7resolve:
   64|  5.06M|    fn resolve(&self, key: Key) -> &str {
   65|  5.06M|        &self.string_for_hash[&key.0]
   66|  5.06M|    }
_RNvMs0_NtCs2NsVQwDzFGg_5oxrdf9interningNtB5_17InternedNamedNode12encoded_into:
   92|  3.65M|    pub fn encoded_into(named_node: NamedNodeRef<'_>, interner: &mut Interner) -> Self {
   93|  3.65M|        Self {
   94|  3.65M|            id: interner.get_or_intern(named_node.as_str()),
   95|  3.65M|        }
   96|  3.65M|    }
_RNvMs0_NtCs2NsVQwDzFGg_5oxrdf9interningNtB5_17InternedNamedNode12encoded_from:
   98|   427k|    pub fn encoded_from(named_node: NamedNodeRef<'_>, interner: &Interner) -> Option<Self> {
   99|   427k|        Some(Self {
  100|   427k|            id: interner.get(named_node.as_str())?,
  101|       |        })
  102|   427k|    }
_RNvMs0_NtCs2NsVQwDzFGg_5oxrdf9interningNtB5_17InternedNamedNode11decode_from:
  104|  3.63M|    pub fn decode_from(self, interner: &Interner) -> NamedNodeRef<'_> {
  105|  3.63M|        NamedNodeRef::new_unchecked(interner.resolve(self.id))
  106|  3.63M|    }
_RNvMs1_NtCs2NsVQwDzFGg_5oxrdf9interningNtB5_17InternedBlankNode12encoded_into:
  130|   139k|    pub fn encoded_into(blank_node: BlankNodeRef<'_>, interner: &mut Interner) -> Self {
  131|   139k|        if let Some(id) = blank_node.unique_id() {
  132|   136k|            interner
  133|   136k|                .string_for_blank_node_id
  134|   136k|                .entry(id)
  135|   136k|                .or_insert_with(|| blank_node.as_str().into());
  136|   136k|            Self::Number { id }
  137|       |        } else {
  138|  2.90k|            Self::Other {
  139|  2.90k|                id: interner.get_or_intern(blank_node.as_str()),
  140|  2.90k|            }
  141|       |        }
  142|   139k|    }
_RNvMs1_NtCs2NsVQwDzFGg_5oxrdf9interningNtB5_17InternedBlankNode12encoded_from:
  144|  11.3k|    pub fn encoded_from(blank_node: BlankNodeRef<'_>, interner: &Interner) -> Option<Self> {
  145|  11.3k|        if let Some(id) = blank_node.unique_id() {
  146|  11.3k|            interner
  147|  11.3k|                .string_for_blank_node_id
  148|  11.3k|                .contains_key(&id)
  149|  11.3k|                .then_some(Self::Number { id })
  150|       |        } else {
  151|       |            Some(Self::Other {
  152|      0|                id: interner.get(blank_node.as_str())?,
  153|       |            })
  154|       |        }
  155|  11.3k|    }
_RNvMs1_NtCs2NsVQwDzFGg_5oxrdf9interningNtB5_17InternedBlankNode11decode_from:
  157|  10.7k|    pub fn decode_from(self, interner: &Interner) -> BlankNodeRef<'_> {
  158|  10.7k|        BlankNodeRef::new_unchecked(match self {
  159|  10.7k|            Self::Number { id } => &interner.string_for_blank_node_id[&id],
  160|      0|            Self::Other { id } => interner.resolve(id),
  161|       |        })
  162|  10.7k|    }
_RNvMs2_NtCs2NsVQwDzFGg_5oxrdf9interningNtB5_15InternedLiteral12encoded_into:
  190|  1.47M|    pub fn encoded_into(literal: LiteralRef<'_>, interner: &mut Interner) -> Self {
  191|  1.47M|        let value_id = interner.get_or_intern(literal.value());
  192|  1.47M|        if literal.is_plain() {
  193|  4.46k|            if let Some(language) = literal.language() {
  194|  1.25k|                Self::LanguageTaggedString {
  195|  1.25k|                    value_id,
  196|  1.25k|                    language_id: interner.get_or_intern(language),
  197|  1.25k|                }
  198|       |            } else {
  199|  3.20k|                Self::String { value_id }
  200|       |            }
  201|       |        } else {
  202|  1.47M|            Self::TypedLiteral {
  203|  1.47M|                value_id,
  204|  1.47M|                datatype: InternedNamedNode::encoded_into(literal.datatype(), interner),
  205|  1.47M|            }
  206|       |        }
  207|  1.47M|    }
_RNvMs2_NtCs2NsVQwDzFGg_5oxrdf9interningNtB5_15InternedLiteral12encoded_from:
  209|   165k|    pub fn encoded_from(literal: LiteralRef<'_>, interner: &Interner) -> Option<Self> {
  210|   165k|        let value_id = interner.get(literal.value())?;
  211|   165k|        Some(if literal.is_plain() {
  212|  1.47k|            if let Some(language) = literal.language() {
  213|       |                Self::LanguageTaggedString {
  214|    615|                    value_id,
  215|    615|                    language_id: interner.get(language)?,
  216|       |                }
  217|       |            } else {
  218|    861|                Self::String { value_id }
  219|       |            }
  220|       |        } else {
  221|       |            Self::TypedLiteral {
  222|   164k|                value_id,
  223|   164k|                datatype: InternedNamedNode::encoded_from(literal.datatype(), interner)?,
  224|       |            }
  225|       |        })
  226|   165k|    }
_RNvMs2_NtCs2NsVQwDzFGg_5oxrdf9interningNtB5_15InternedLiteral11decode_from:
  228|  1.41M|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> LiteralRef<'a> {
  229|  1.41M|        match self {
  230|  26.5k|            Self::String { value_id } => {
  231|  26.5k|                LiteralRef::new_simple_literal(interner.resolve(*value_id))
  232|       |            }
  233|       |            Self::LanguageTaggedString {
  234|  9.55k|                value_id,
  235|  9.55k|                language_id,
  236|  9.55k|            } => LiteralRef::new_language_tagged_literal_unchecked(
  237|  9.55k|                interner.resolve(*value_id),
  238|  9.55k|                interner.resolve(*language_id),
  239|  9.55k|            ),
  240|  1.37M|            Self::TypedLiteral { value_id, datatype } => LiteralRef::new_typed_literal(
  241|  1.37M|                interner.resolve(*value_id),
  242|  1.37M|                datatype.decode_from(interner),
  243|  1.37M|            ),
  244|       |        }
  245|  1.41M|    }
_RNvMs3_NtCs2NsVQwDzFGg_5oxrdf9interningNtB5_15InternedSubject12encoded_into:
  276|  1.54M|    pub fn encoded_into(node: SubjectRef<'_>, interner: &mut Interner) -> Self {
  277|  1.54M|        match node {
  278|   570k|            SubjectRef::NamedNode(node) => {
  279|   570k|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  280|       |            }
  281|  16.9k|            SubjectRef::BlankNode(node) => {
  282|  16.9k|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  283|       |            }
  284|       |            #[cfg(feature = "rdf-star")]
  285|   960k|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  286|   960k|                triple.as_ref(),
  287|   960k|                interner,
  288|   960k|            ))),
  289|       |        }
  290|  1.54M|    }
_RNvMs3_NtCs2NsVQwDzFGg_5oxrdf9interningNtB5_15InternedSubject12encoded_from:
  292|   182k|    pub fn encoded_from(node: SubjectRef<'_>, interner: &Interner) -> Option<Self> {
  293|   182k|        Some(match node {
  294|  65.8k|            SubjectRef::NamedNode(node) => {
  295|  65.8k|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  296|       |            }
  297|  8.03k|            SubjectRef::BlankNode(node) => {
  298|  8.03k|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  299|       |            }
  300|       |            #[cfg(feature = "rdf-star")]
  301|   108k|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  302|   108k|                triple.as_ref(),
  303|   108k|                interner,
  304|   108k|            )?)),
  305|       |        })
  306|   182k|    }
_RNvMs3_NtCs2NsVQwDzFGg_5oxrdf9interningNtB5_15InternedSubject11decode_from:
  308|   477k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> SubjectRef<'a> {
  309|   477k|        match self {
  310|   433k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.decode_from(interner)),
  311|  7.73k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.decode_from(interner)),
  312|       |            #[cfg(feature = "rdf-star")]
  313|  36.2k|            Self::Triple(triple) => SubjectRef::Triple(&interner.triples[triple.as_ref()]),
  314|       |        }
  315|   477k|    }
_RNvMs4_NtCs2NsVQwDzFGg_5oxrdf9interningNtB5_17InternedGraphName12encoded_into:
  343|   177k|    pub fn encoded_into(node: GraphNameRef<'_>, interner: &mut Interner) -> Self {
  344|   177k|        match node {
  345|   170k|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  346|  6.19k|            GraphNameRef::NamedNode(node) => {
  347|  6.19k|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  348|       |            }
  349|  1.16k|            GraphNameRef::BlankNode(node) => {
  350|  1.16k|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  351|       |            }
  352|       |        }
  353|   177k|    }
_RNvMs4_NtCs2NsVQwDzFGg_5oxrdf9interningNtB5_17InternedGraphName12encoded_from:
  355|  72.2k|    pub fn encoded_from(node: GraphNameRef<'_>, interner: &Interner) -> Option<Self> {
  356|  72.2k|        Some(match node {
  357|  68.9k|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  358|  2.68k|            GraphNameRef::NamedNode(node) => {
  359|  2.68k|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  360|       |            }
  361|    581|            GraphNameRef::BlankNode(node) => {
  362|    581|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  363|       |            }
  364|       |        })
  365|  72.2k|    }
_RNvMs4_NtCs2NsVQwDzFGg_5oxrdf9interningNtB5_17InternedGraphName11decode_from:
  367|  72.2k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> GraphNameRef<'a> {
  368|  72.2k|        match self {
  369|  68.9k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  370|  2.68k|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.decode_from(interner)),
  371|    581|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.decode_from(interner)),
  372|       |        }
  373|  72.2k|    }
_RNvMs5_NtCs2NsVQwDzFGg_5oxrdf9interningNtB5_12InternedTerm12encoded_into:
  402|  1.54M|    pub fn encoded_into(term: TermRef<'_>, interner: &mut Interner) -> Self {
  403|  1.54M|        match term {
  404|  62.4k|            TermRef::NamedNode(term) => {
  405|  62.4k|                Self::NamedNode(InternedNamedNode::encoded_into(term, interner))
  406|       |            }
  407|  6.15k|            TermRef::BlankNode(term) => {
  408|  6.15k|                Self::BlankNode(InternedBlankNode::encoded_into(term, interner))
  409|       |            }
  410|  1.47M|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_into(term, interner)),
  411|       |            #[cfg(feature = "rdf-star")]
  412|  4.72k|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  413|  4.72k|                triple.as_ref(),
  414|  4.72k|                interner,
  415|  4.72k|            ))),
  416|       |        }
  417|  1.54M|    }
_RNvMs5_NtCs2NsVQwDzFGg_5oxrdf9interningNtB5_12InternedTerm12encoded_from:
  419|   182k|    pub fn encoded_from(term: TermRef<'_>, interner: &Interner) -> Option<Self> {
  420|   182k|        Some(match term {
  421|  12.4k|            TermRef::NamedNode(term) => {
  422|  12.4k|                Self::NamedNode(InternedNamedNode::encoded_from(term, interner)?)
  423|       |            }
  424|  2.70k|            TermRef::BlankNode(term) => {
  425|  2.70k|                Self::BlankNode(InternedBlankNode::encoded_from(term, interner)?)
  426|       |            }
  427|   165k|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_from(term, interner)?),
  428|       |            #[cfg(feature = "rdf-star")]
  429|  1.72k|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  430|  1.72k|                triple.as_ref(),
  431|  1.72k|                interner,
  432|  1.72k|            )?)),
  433|       |        })
  434|   182k|    }
_RNvMs5_NtCs2NsVQwDzFGg_5oxrdf9interningNtB5_12InternedTerm11decode_from:
  436|  1.18M|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> TermRef<'a> {
  437|  1.18M|        match self {
  438|  42.2k|            Self::NamedNode(term) => TermRef::NamedNode(term.decode_from(interner)),
  439|  2.44k|            Self::BlankNode(term) => TermRef::BlankNode(term.decode_from(interner)),
  440|  1.14M|            Self::Literal(term) => TermRef::Literal(term.decode_from(interner)),
  441|       |            #[cfg(feature = "rdf-star")]
  442|  1.66k|            Self::Triple(triple) => TermRef::Triple(&interner.triples[triple.as_ref()]),
  443|       |        }
  444|  1.18M|    }
_RNvMs6_NtCs2NsVQwDzFGg_5oxrdf9interningNtB5_14InternedTriple12encoded_into:
  474|  1.37M|    pub fn encoded_into(triple: TripleRef<'_>, interner: &mut Interner) -> Self {
  475|  1.37M|        let interned_triple = Self {
  476|  1.37M|            subject: InternedSubject::encoded_into(triple.subject, interner),
  477|  1.37M|            predicate: InternedNamedNode::encoded_into(triple.predicate, interner),
  478|  1.37M|            object: InternedTerm::encoded_into(triple.object, interner),
  479|  1.37M|        };
  480|  1.37M|        interner
  481|  1.37M|            .triples
  482|  1.37M|            .insert(interned_triple.clone(), triple.into_owned());
  483|  1.37M|        interned_triple
  484|  1.37M|    }
_RNvMs6_NtCs2NsVQwDzFGg_5oxrdf9interningNtB5_14InternedTriple12encoded_from:
  486|   110k|    pub fn encoded_from(triple: TripleRef<'_>, interner: &Interner) -> Option<Self> {
  487|   110k|        let interned_triple = Self {
  488|   110k|            subject: InternedSubject::encoded_from(triple.subject, interner)?,
  489|   110k|            predicate: InternedNamedNode::encoded_from(triple.predicate, interner)?,
  490|   110k|            object: InternedTerm::encoded_from(triple.object, interner)?,
  491|       |        };
  492|   110k|        interner
  493|   110k|            .triples
  494|   110k|            .contains_key(&interned_triple)
  495|   110k|            .then_some(interned_triple)
  496|   110k|    }
_RNvXs7_NtCs2NsVQwDzFGg_5oxrdf9interningNtB5_21IdentityHasherBuilderNtNtCs433v4DNuM1R_4core4hash11BuildHasher12build_hasher:
  513|  10.9M|    fn build_hasher(&self) -> Self::Hasher {
  514|  10.9M|        Self::Hasher::default()
  515|  10.9M|    }
_RNvXs8_NtCs2NsVQwDzFGg_5oxrdf9interningNtB5_14IdentityHasherNtNtCs433v4DNuM1R_4core4hash6Hasher6finish:
  524|  10.9M|    fn finish(&self) -> u64 {
  525|  10.9M|        self.value
  526|  10.9M|    }
_RNvXs8_NtCs2NsVQwDzFGg_5oxrdf9interningNtB5_14IdentityHasherNtNtCs433v4DNuM1R_4core4hash6Hasher9write_u64:
  532|  10.9M|    fn write_u64(&mut self, i: u64) {
  533|  10.9M|        self.value = i
  534|  10.9M|    }

_RNvMNtCs2NsVQwDzFGg_5oxrdf7literalNtB2_7Literal6as_refCsapuUTB8XoUj_4trig:
  131|   243k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  132|   243k|        LiteralRef(match &self.0 {
  133|  6.72k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  134|  2.57k|            LiteralContent::LanguageTaggedString { value, language } => {
  135|  2.57k|                LiteralRefContent::LanguageTaggedString { value, language }
  136|       |            }
  137|   234k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  138|   234k|                value,
  139|   234k|                datatype: datatype.as_ref(),
  140|   234k|            },
  141|       |        })
  142|   243k|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf7literalNtB2_7Literal6as_refCseXCYVcIQZ7o_5oxttl:
  131|   107k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  132|   107k|        LiteralRef(match &self.0 {
  133|    220|            LiteralContent::String(value) => LiteralRefContent::String(value),
  134|      0|            LiteralContent::LanguageTaggedString { value, language } => {
  135|      0|                LiteralRefContent::LanguageTaggedString { value, language }
  136|       |            }
  137|   107k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  138|   107k|                value,
  139|   107k|                datatype: datatype.as_ref(),
  140|   107k|            },
  141|       |        })
  142|   107k|    }
_RNvMst_NtCs2NsVQwDzFGg_5oxrdf7literalNtB5_10LiteralRef18new_simple_literalCseXCYVcIQZ7o_5oxttl:
  461|    376|    pub const fn new_simple_literal(value: &'a str) -> Self {
  462|    376|        LiteralRef(LiteralRefContent::String(value))
  463|    376|    }
_RNvMst_NtCs2NsVQwDzFGg_5oxrdf7literalNtB5_10LiteralRef5valueCseXCYVcIQZ7o_5oxttl:
  490|   204k|    pub const fn value(self) -> &'a str {
  491|   204k|        match self.0 {
  492|  5.51k|            LiteralRefContent::String(value)
  493|  1.31k|            | LiteralRefContent::LanguageTaggedString { value, .. }
  494|   204k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  495|   204k|        }
  496|   204k|    }
_RNvMst_NtCs2NsVQwDzFGg_5oxrdf7literalNtB5_10LiteralRef8datatypeCseXCYVcIQZ7o_5oxttl:
  515|   204k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  516|   204k|        match self.0 {
  517|  5.51k|            LiteralRefContent::String(_) => xsd::STRING,
  518|  1.31k|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  519|   198k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  520|       |        }
  521|   204k|    }
_RNvMst_NtCs2NsVQwDzFGg_5oxrdf7literalNtB5_10LiteralRef8is_plainCseXCYVcIQZ7o_5oxttl:
  528|  7.21k|    pub const fn is_plain(self) -> bool {
  529|    376|        matches!(
  530|  7.21k|            self.0,
  531|       |            LiteralRefContent::String(_) | LiteralRefContent::LanguageTaggedString { .. }
  532|       |        )
  533|  7.21k|    }
_RNvXsu_NtCs2NsVQwDzFGg_5oxrdf7literalNtB5_10LiteralRefNtNtCs433v4DNuM1R_4core3fmt7Display3fmtCseXCYVcIQZ7o_5oxttl:
  567|  7.21k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  568|  7.21k|        match self.0 {
  569|  5.89k|            LiteralRefContent::String(value) => print_quoted_str(value, f),
  570|  1.31k|            LiteralRefContent::LanguageTaggedString { value, language } => {
  571|  1.31k|                print_quoted_str(value, f)?;
  572|  1.31k|                write!(f, "@{language}")
  573|       |            }
  574|      0|            LiteralRefContent::TypedLiteral { value, datatype } => {
  575|      0|                print_quoted_str(value, f)?;
  576|      0|                write!(f, "^^{datatype}")
  577|       |            }
  578|       |        }
  579|  7.21k|    }
_RINvMNtCs2NsVQwDzFGg_5oxrdf7literalNtB3_7Literal18new_simple_literalRNtNtCs80BIJ2NAVqC_5alloc6string6StringECseXCYVcIQZ7o_5oxttl:
   49|    232|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   50|    232|        Self(LiteralContent::String(value.into()))
   51|    232|    }
_RINvMNtCs2NsVQwDzFGg_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCs80BIJ2NAVqC_5alloc6string6StringEB5_:
   49|  21.7k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   50|  21.7k|        Self(LiteralContent::String(value.into()))
   51|  21.7k|    }
_RINvMNtCs2NsVQwDzFGg_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCs80BIJ2NAVqC_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   55|  1.55k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   56|  1.55k|        let value = value.into();
   57|  1.55k|        let datatype = datatype.into();
   58|  1.55k|        Self(if datatype == xsd::STRING {
   59|      0|            LiteralContent::String(value)
   60|       |        } else {
   61|  1.55k|            LiteralContent::TypedLiteral { value, datatype }
   62|       |        })
   63|  1.55k|    }
_RINvMNtCs2NsVQwDzFGg_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   55|   482k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   56|   482k|        let value = value.into();
   57|   482k|        let datatype = datatype.into();
   58|   482k|        Self(if datatype == xsd::STRING {
   59|      0|            LiteralContent::String(value)
   60|       |        } else {
   61|   482k|            LiteralContent::TypedLiteral { value, datatype }
   62|       |        })
   63|   482k|    }
_RINvMNtCs2NsVQwDzFGg_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCs80BIJ2NAVqC_5alloc6string6StringB1n_EB5_:
   87|  5.44k|    pub fn new_language_tagged_literal_unchecked(
   88|  5.44k|        value: impl Into<String>,
   89|  5.44k|        language: impl Into<String>,
   90|  5.44k|    ) -> Self {
   91|  5.44k|        Self(LiteralContent::LanguageTaggedString {
   92|  5.44k|            value: value.into(),
   93|  5.44k|            language: language.into(),
   94|  5.44k|        })
   95|  5.44k|    }
_RINvMst_NtCs2NsVQwDzFGg_5oxrdf7literalNtB6_10LiteralRef17new_typed_literalNtNtB8_10named_node12NamedNodeRefEB8_:
  467|  1.37M|    pub fn new_typed_literal(value: &'a str, datatype: impl Into<NamedNodeRef<'a>>) -> Self {
  468|  1.37M|        let datatype = datatype.into();
  469|  1.37M|        LiteralRef(if datatype == xsd::STRING {
  470|      0|            LiteralRefContent::String(value)
  471|       |        } else {
  472|  1.37M|            LiteralRefContent::TypedLiteral { value, datatype }
  473|       |        })
  474|  1.37M|    }
_RINvNtCs2NsVQwDzFGg_5oxrdf7literal16print_quoted_strNtNtCs433v4DNuM1R_4core3fmt9FormatterEB4_:
  618|  7.21k|pub fn print_quoted_str(string: &str, f: &mut impl Write) -> fmt::Result {
  619|  7.21k|    f.write_char('"')?;
  620|  85.3k|    for c in string.chars() {
  621|  85.3k|        match c {
  622|    350|            '\u{08}' => f.write_str("\\b"),
  623|    216|            '\t' => f.write_str("\\t"),
  624|    341|            '\n' => f.write_str("\\n"),
  625|    316|            '\u{0c}' => f.write_str("\\f"),
  626|    232|            '\r' => f.write_str("\\r"),
  627|  1.24k|            '"' => f.write_str("\\\""),
  628|     74|            '\\' => f.write_str("\\\\"),
  629|  82.5k|            '\0'..='\u{1f}' | '\u{7f}' => write!(f, "\\u{:04X}", u32::from(c)),
  630|  51.3k|            _ => f.write_char(c),
  631|      0|        }?;
  632|       |    }
  633|  7.21k|    f.write_char('"')
  634|  7.21k|}
_RNvMNtCs2NsVQwDzFGg_5oxrdf7literalNtB2_7Literal6as_refB4_:
  131|  1.43M|    pub fn as_ref(&self) -> LiteralRef<'_> {
  132|  1.43M|        LiteralRef(match &self.0 {
  133|  1.92k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  134|      0|            LiteralContent::LanguageTaggedString { value, language } => {
  135|      0|                LiteralRefContent::LanguageTaggedString { value, language }
  136|       |            }
  137|  1.43M|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  138|  1.43M|                value,
  139|  1.43M|                datatype: datatype.as_ref(),
  140|  1.43M|            },
  141|       |        })
  142|  1.43M|    }
_RNvMst_NtCs2NsVQwDzFGg_5oxrdf7literalNtB5_10LiteralRef18new_simple_literalB7_:
  461|  26.5k|    pub const fn new_simple_literal(value: &'a str) -> Self {
  462|  26.5k|        LiteralRef(LiteralRefContent::String(value))
  463|  26.5k|    }
_RNvMst_NtCs2NsVQwDzFGg_5oxrdf7literalNtB5_10LiteralRef37new_language_tagged_literal_uncheckedB7_:
  484|  9.55k|    pub const fn new_language_tagged_literal_unchecked(value: &'a str, language: &'a str) -> Self {
  485|  9.55k|        LiteralRef(LiteralRefContent::LanguageTaggedString { value, language })
  486|  9.55k|    }
_RNvMst_NtCs2NsVQwDzFGg_5oxrdf7literalNtB5_10LiteralRef5valueB7_:
  490|  1.64M|    pub const fn value(self) -> &'a str {
  491|  1.64M|        match self.0 {
  492|  4.06k|            LiteralRefContent::String(value)
  493|  1.87k|            | LiteralRefContent::LanguageTaggedString { value, .. }
  494|  1.64M|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  495|  1.64M|        }
  496|  1.64M|    }
_RNvMst_NtCs2NsVQwDzFGg_5oxrdf7literalNtB5_10LiteralRef8languageB7_:
  503|  5.93k|    pub const fn language(self) -> Option<&'a str> {
  504|  5.93k|        match self.0 {
  505|  1.87k|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  506|  4.06k|            _ => None,
  507|       |        }
  508|  5.93k|    }
_RNvMst_NtCs2NsVQwDzFGg_5oxrdf7literalNtB5_10LiteralRef8datatypeB7_:
  515|  1.63M|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  516|  1.63M|        match self.0 {
  517|      0|            LiteralRefContent::String(_) => xsd::STRING,
  518|      0|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  519|  1.63M|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  520|       |        }
  521|  1.63M|    }
_RNvMst_NtCs2NsVQwDzFGg_5oxrdf7literalNtB5_10LiteralRef8is_plainB7_:
  528|  1.64M|    pub const fn is_plain(self) -> bool {
  529|  1.63M|        matches!(
  530|  1.64M|            self.0,
  531|       |            LiteralRefContent::String(_) | LiteralRefContent::LanguageTaggedString { .. }
  532|       |        )
  533|  1.64M|    }
_RNvMst_NtCs2NsVQwDzFGg_5oxrdf7literalNtB5_10LiteralRef10into_ownedB7_:
  536|  2.41M|    pub fn into_owned(self) -> Literal {
  537|  2.41M|        Literal(match self.0 {
  538|  3.25k|            LiteralRefContent::String(value) => LiteralContent::String(value.to_owned()),
  539|      0|            LiteralRefContent::LanguageTaggedString { value, language } => {
  540|      0|                LiteralContent::LanguageTaggedString {
  541|      0|                    value: value.to_owned(),
  542|      0|                    language: language.to_owned(),
  543|      0|                }
  544|       |            }
  545|  2.40M|            LiteralRefContent::TypedLiteral { value, datatype } => LiteralContent::TypedLiteral {
  546|  2.40M|                value: value.to_owned(),
  547|  2.40M|                datatype: datatype.into_owned(),
  548|  2.40M|            },
  549|       |        })
  550|  2.41M|    }

_RNvMNtCs2NsVQwDzFGg_5oxrdf10named_nodeNtB2_9NamedNode6as_refCsapuUTB8XoUj_4trig:
   54|   885k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|   885k|        NamedNodeRef::new_unchecked(&self.iri)
   56|   885k|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf10named_nodeNtB2_9NamedNode6as_strCsapuUTB8XoUj_4trig:
   44|  34.8k|    pub fn as_str(&self) -> &str {
   45|  34.8k|        self.iri.as_str()
   46|  34.8k|    }
_RNvMs4_NtCs2NsVQwDzFGg_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCsapuUTB8XoUj_4trig:
  138|   219k|    pub fn into_owned(self) -> NamedNode {
  139|   219k|        NamedNode::new_unchecked(self.iri)
  140|   219k|    }
_RNvMs4_NtCs2NsVQwDzFGg_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCsapuUTB8XoUj_4trig:
  128|   885k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   885k|        Self { iri }
  130|   885k|    }
_RNvMs4_NtCs2NsVQwDzFGg_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCsapuUTB8XoUj_4trig:
  133|  34.8k|    pub const fn as_str(self) -> &'a str {
  134|  34.8k|        self.iri
  135|  34.8k|    }
_RNvXs8_NtCs2NsVQwDzFGg_5oxrdf10named_nodeNtB5_12NamedNodeRefINtNtCs433v4DNuM1R_4core3cmp9PartialEqNtB5_9NamedNodeE2eqCsapuUTB8XoUj_4trig:
  166|  34.8k|    fn eq(&self, other: &NamedNode) -> bool {
  167|  34.8k|        self.as_str() == other.as_str()
  168|  34.8k|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf10named_nodeNtB2_9NamedNode6as_refCseXCYVcIQZ7o_5oxttl:
   54|   263k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|   263k|        NamedNodeRef::new_unchecked(&self.iri)
   56|   263k|    }
_RNvMs4_NtCs2NsVQwDzFGg_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCseXCYVcIQZ7o_5oxttl:
  138|  12.3k|    pub fn into_owned(self) -> NamedNode {
  139|  12.3k|        NamedNode::new_unchecked(self.iri)
  140|  12.3k|    }
_RNvMs4_NtCs2NsVQwDzFGg_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCseXCYVcIQZ7o_5oxttl:
  128|   263k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   263k|        Self { iri }
  130|   263k|    }
_RNvMs4_NtCs2NsVQwDzFGg_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCseXCYVcIQZ7o_5oxttl:
  133|   416k|    pub const fn as_str(self) -> &'a str {
  134|   416k|        self.iri
  135|   416k|    }
_RNvXs5_NtCs2NsVQwDzFGg_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCs433v4DNuM1R_4core3fmt7Display3fmtCseXCYVcIQZ7o_5oxttl:
  145|   380k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|   380k|        write!(f, "<{}>", self.as_str())
  147|   380k|    }
_RINvMNtCs2NsVQwDzFGg_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCs80BIJ2NAVqC_5alloc6string6StringEB5_:
   39|   982k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   982k|        Self { iri: iri.into() }
   41|   982k|    }
_RINvMNtCs2NsVQwDzFGg_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|  6.90M|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  6.90M|        Self { iri: iri.into() }
   41|  6.90M|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|   483k|    pub fn as_str(&self) -> &str {
   45|   483k|        self.iri.as_str()
   46|   483k|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf10named_nodeNtB2_9NamedNode6as_refB4_:
   54|  3.48M|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  3.48M|        NamedNodeRef::new_unchecked(&self.iri)
   56|  3.48M|    }
_RNvMs4_NtCs2NsVQwDzFGg_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedB7_:
  128|  7.12M|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  7.12M|        Self { iri }
  130|  7.12M|    }
_RNvMs4_NtCs2NsVQwDzFGg_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|  4.56M|    pub const fn as_str(self) -> &'a str {
  134|  4.56M|        self.iri
  135|  4.56M|    }
_RNvMs4_NtCs2NsVQwDzFGg_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|  6.67M|    pub fn into_owned(self) -> NamedNode {
  139|  6.67M|        NamedNode::new_unchecked(self.iri)
  140|  6.67M|    }
_RNvXs6_NtCs2NsVQwDzFGg_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs433v4DNuM1R_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|   804k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|   804k|        node.into_owned()
  154|   804k|    }
_RNvXs9_NtCs2NsVQwDzFGg_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs433v4DNuM1R_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|   483k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|   483k|        self.as_str() == other.as_str()
  175|   483k|    }

_RNvMs18_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB6_9GraphName16is_default_graphCsapuUTB8XoUj_4trig:
  878|   198k|    pub fn is_default_graph(&self) -> bool {
  879|   198k|        self.as_ref().is_default_graph()
  880|   198k|    }
_RNvMs18_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB6_9GraphName6as_refCsapuUTB8XoUj_4trig:
  883|   797k|    pub fn as_ref(&self) -> GraphNameRef<'_> {
  884|   797k|        match self {
  885|  53.8k|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.as_ref()),
  886|  24.0k|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.as_ref()),
  887|   719k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  888|       |        }
  889|   797k|    }
_RNvMs1g_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB6_12GraphNameRef10into_ownedCsapuUTB8XoUj_4trig:
  971|  7.36k|    pub fn into_owned(self) -> GraphName {
  972|  7.36k|        match self {
  973|  3.43k|            Self::NamedNode(node) => GraphName::NamedNode(node.into_owned()),
  974|  1.27k|            Self::BlankNode(node) => GraphName::BlankNode(node.into_owned()),
  975|  2.65k|            Self::DefaultGraph => GraphName::DefaultGraph,
  976|       |        }
  977|  7.36k|    }
_RNvMs1g_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB6_12GraphNameRef16is_default_graphCsapuUTB8XoUj_4trig:
  966|   198k|    pub fn is_default_graph(&self) -> bool {
  967|   198k|        matches!(self, Self::DefaultGraph)
  968|   198k|    }
_RNvMs1q_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB6_4Quad6as_refCsapuUTB8XoUj_4trig:
 1100|   384k|    pub fn as_ref(&self) -> QuadRef<'_> {
 1101|   384k|        QuadRef {
 1102|   384k|            subject: self.subject.as_ref(),
 1103|   384k|            predicate: self.predicate.as_ref(),
 1104|   384k|            object: self.object.as_ref(),
 1105|   384k|            graph_name: self.graph_name.as_ref(),
 1106|   384k|        }
 1107|   384k|    }
_RNvMsc_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB5_7Subject6as_refCsapuUTB8XoUj_4trig:
  181|   578k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|   578k|        match self {
  183|   171k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|   236k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|   170k|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|   578k|    }
_RNvMsn_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB5_10SubjectRef10into_ownedCsapuUTB8XoUj_4trig:
  294|   171k|    pub fn into_owned(self) -> Subject {
  295|   171k|        match self {
  296|  28.0k|            Self::NamedNode(node) => Subject::NamedNode(node.into_owned()),
  297|   105k|            Self::BlankNode(node) => Subject::BlankNode(node.into_owned()),
  298|       |            #[cfg(feature = "rdf-star")]
  299|  38.6k|            Self::Triple(triple) => Subject::Triple(Box::new(triple.clone())),
  300|       |        }
  301|   171k|    }
_RNvMsy_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB5_4Term6as_refCsapuUTB8XoUj_4trig:
  417|   384k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|   384k|        match self {
  419|  41.8k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|  91.6k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|   243k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|  6.98k|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|   384k|    }
_RNvXs1w_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB6_7QuadRefINtNtCs433v4DNuM1R_4core7convert4FromRNtB6_4QuadE4fromCsapuUTB8XoUj_4trig:
 1216|   384k|    fn from(quad: &'a Quad) -> Self {
 1217|   384k|        quad.as_ref()
 1218|   384k|    }
_RNvMsc_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB5_7Subject6as_refCseXCYVcIQZ7o_5oxttl:
  181|   111k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|   111k|        match self {
  183|  41.4k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|    644|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|  69.8k|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|   111k|    }
_RNvMsy_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB5_4Term6as_refCseXCYVcIQZ7o_5oxttl:
  417|   111k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|   111k|        match self {
  419|  3.10k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|  1.27k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|   107k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|     93|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|   111k|    }
_RNvXs0_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB5_16NamedOrBlankNodeINtNtCs433v4DNuM1R_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromCseXCYVcIQZ7o_5oxttl:
   43|   242k|    fn from(node: NamedNode) -> Self {
   44|   242k|        Self::NamedNode(node)
   45|   242k|    }
_RNvXs1a_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB6_9GraphNameINtNtCs433v4DNuM1R_4core7convert4FromNtNtB8_10named_node9NamedNodeE4fromCseXCYVcIQZ7o_5oxttl:
  901|  20.4k|    fn from(node: NamedNode) -> Self {
  902|  20.4k|        Self::NamedNode(node)
  903|  20.4k|    }
_RNvXs1c_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB6_9GraphNameINtNtCs433v4DNuM1R_4core7convert4FromNtNtB8_10blank_node9BlankNodeE4fromCseXCYVcIQZ7o_5oxttl:
  915|  6.02k|    fn from(node: BlankNode) -> Self {
  916|  6.02k|        Self::BlankNode(node)
  917|  6.02k|    }
_RNvXs1e_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB6_9GraphNameINtNtCs433v4DNuM1R_4core7convert4FromNtB6_16NamedOrBlankNodeE4fromCseXCYVcIQZ7o_5oxttl:
  929|  26.4k|    fn from(node: NamedOrBlankNode) -> Self {
  930|  26.4k|        match node {
  931|  20.4k|            NamedOrBlankNode::NamedNode(node) => node.into(),
  932|  6.02k|            NamedOrBlankNode::BlankNode(node) => node.into(),
  933|       |        }
  934|  26.4k|    }
_RNvXs2_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB5_16NamedOrBlankNodeINtNtCs433v4DNuM1R_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromCseXCYVcIQZ7o_5oxttl:
   57|  97.9k|    fn from(node: BlankNode) -> Self {
   58|  97.9k|        Self::BlankNode(node)
   59|  97.9k|    }
_RNvXsB_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB5_4TermINtNtCs433v4DNuM1R_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCseXCYVcIQZ7o_5oxttl:
  444|  12.1k|    fn from(node: NamedNodeRef<'_>) -> Self {
  445|  12.1k|        node.into_owned().into()
  446|  12.1k|    }
_RNvXsL_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB5_4TermINtNtCs433v4DNuM1R_4core7convert4FromNtB5_7SubjectE4fromCseXCYVcIQZ7o_5oxttl:
  520|    258|    fn from(node: Subject) -> Self {
  521|    258|        match node {
  522|      0|            Subject::NamedNode(node) => node.into(),
  523|    258|            Subject::BlankNode(node) => node.into(),
  524|       |            #[cfg(feature = "rdf-star")]
  525|      0|            Subject::Triple(triple) => Self::Triple(triple),
  526|       |        }
  527|    258|    }
_RNvXsP_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB5_7TermRefINtNtCs433v4DNuM1R_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCseXCYVcIQZ7o_5oxttl:
  599|   371k|    fn from(node: NamedNodeRef<'a>) -> Self {
  600|   371k|        Self::NamedNode(node)
  601|   371k|    }
_RNvXsR_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB5_7TermRefINtNtCs433v4DNuM1R_4core7convert4FromNtNtB7_10blank_node12BlankNodeRefE4fromCseXCYVcIQZ7o_5oxttl:
  613|   107k|    fn from(node: BlankNodeRef<'a>) -> Self {
  614|   107k|        Self::BlankNode(node)
  615|   107k|    }
_RNvXsV_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB5_7TermRefINtNtCs433v4DNuM1R_4core7convert4FromRNtB5_6TripleE4fromCseXCYVcIQZ7o_5oxttl:
  642|   108k|    fn from(node: &'a Triple) -> Self {
  643|   108k|        Self::Triple(node)
  644|   108k|    }
_RNvXsY_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB5_7TermRefINtNtCs433v4DNuM1R_4core7convert4FromNtB5_10SubjectRefE4fromCseXCYVcIQZ7o_5oxttl:
  666|   283k|    fn from(node: SubjectRef<'a>) -> Self {
  667|   283k|        match node {
  668|  69.4k|            SubjectRef::NamedNode(node) => node.into(),
  669|   105k|            SubjectRef::BlankNode(node) => node.into(),
  670|       |            #[cfg(feature = "rdf-star")]
  671|   108k|            SubjectRef::Triple(triple) => triple.into(),
  672|       |        }
  673|   283k|    }
_RNvXsf_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB5_7SubjectINtNtCs433v4DNuM1R_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCseXCYVcIQZ7o_5oxttl:
  207|    267|    fn from(node: NamedNodeRef<'_>) -> Self {
  208|    267|        node.into_owned().into()
  209|    267|    }
_RNvXsl_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB5_7SubjectINtNtCs433v4DNuM1R_4core7convert4FromNtB5_16NamedOrBlankNodeE4fromCseXCYVcIQZ7o_5oxttl:
  252|   270k|    fn from(node: NamedOrBlankNode) -> Self {
  253|   270k|        match node {
  254|   179k|            NamedOrBlankNode::NamedNode(node) => node.into(),
  255|  91.1k|            NamedOrBlankNode::BlankNode(node) => node.into(),
  256|       |        }
  257|   270k|    }
_RINvMs12_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB7_6Triple3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtB7_4TermECseXCYVcIQZ7o_5oxttl:
  729|   245k|    pub fn new(
  730|   245k|        subject: impl Into<Subject>,
  731|   245k|        predicate: impl Into<NamedNode>,
  732|   245k|        object: impl Into<Term>,
  733|   245k|    ) -> Self {
  734|   245k|        Self {
  735|   245k|            subject: subject.into(),
  736|   245k|            predicate: predicate.into(),
  737|   245k|            object: object.into(),
  738|   245k|        }
  739|   245k|    }
_RINvMs1q_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node12NamedNodeRefB11_NtB7_9GraphNameECseXCYVcIQZ7o_5oxttl:
 1085|  8.98k|    pub fn new(
 1086|  8.98k|        subject: impl Into<Subject>,
 1087|  8.98k|        predicate: impl Into<NamedNode>,
 1088|  8.98k|        object: impl Into<Term>,
 1089|  8.98k|        graph_name: impl Into<GraphName>,
 1090|  8.98k|    ) -> Self {
 1091|  8.98k|        Self {
 1092|  8.98k|            subject: subject.into(),
 1093|  8.98k|            predicate: predicate.into(),
 1094|  8.98k|            object: object.into(),
 1095|  8.98k|            graph_name: graph_name.into(),
 1096|  8.98k|        }
 1097|  8.98k|    }
_RINvMs1q_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node12NamedNodeRefNtNtB9_10blank_node9BlankNodeNtB7_9GraphNameECseXCYVcIQZ7o_5oxttl:
 1085|  50.0k|    pub fn new(
 1086|  50.0k|        subject: impl Into<Subject>,
 1087|  50.0k|        predicate: impl Into<NamedNode>,
 1088|  50.0k|        object: impl Into<Term>,
 1089|  50.0k|        graph_name: impl Into<GraphName>,
 1090|  50.0k|    ) -> Self {
 1091|  50.0k|        Self {
 1092|  50.0k|            subject: subject.into(),
 1093|  50.0k|            predicate: predicate.into(),
 1094|  50.0k|            object: object.into(),
 1095|  50.0k|            graph_name: graph_name.into(),
 1096|  50.0k|        }
 1097|  50.0k|    }
_RINvMs1q_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtB7_4TermNtB7_9GraphNameECseXCYVcIQZ7o_5oxttl:
 1085|   784k|    pub fn new(
 1086|   784k|        subject: impl Into<Subject>,
 1087|   784k|        predicate: impl Into<NamedNode>,
 1088|   784k|        object: impl Into<Term>,
 1089|   784k|        graph_name: impl Into<GraphName>,
 1090|   784k|    ) -> Self {
 1091|   784k|        Self {
 1092|   784k|            subject: subject.into(),
 1093|   784k|            predicate: predicate.into(),
 1094|   784k|            object: object.into(),
 1095|   784k|            graph_name: graph_name.into(),
 1096|   784k|        }
 1097|   784k|    }
_RNvMsc_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB5_7Subject6as_refB7_:
  181|  1.48M|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  1.48M|        match self {
  183|   528k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|  1.69k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|   950k|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  1.48M|    }
_RNvXse_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB5_7SubjectINtNtCs433v4DNuM1R_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|   252k|    fn from(node: NamedNode) -> Self {
  201|   252k|        Self::NamedNode(node)
  202|   252k|    }
_RNvXsg_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB5_7SubjectINtNtCs433v4DNuM1R_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|   479k|    fn from(node: BlankNode) -> Self {
  215|   479k|        Self::BlankNode(node)
  216|   479k|    }
_RNvXsi_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB5_7SubjectINtNtCs433v4DNuM1R_4core7convert4FromNtB5_6TripleE4fromB7_:
  229|   944k|    fn from(node: Triple) -> Self {
  230|   944k|        Self::Triple(Box::new(node))
  231|   944k|    }
_RNvMsn_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB5_10SubjectRef10into_ownedB7_:
  294|  1.77M|    pub fn into_owned(self) -> Subject {
  295|  1.77M|        match self {
  296|   896k|            Self::NamedNode(node) => Subject::NamedNode(node.into_owned()),
  297|  1.39k|            Self::BlankNode(node) => Subject::BlankNode(node.into_owned()),
  298|       |            #[cfg(feature = "rdf-star")]
  299|   877k|            Self::Triple(triple) => Subject::Triple(Box::new(triple.clone())),
  300|       |        }
  301|  1.77M|    }
_RNvMsy_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB5_4Term6as_refB7_:
  417|  1.48M|    pub fn as_ref(&self) -> TermRef<'_> {
  418|  1.48M|        match self {
  419|  43.0k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|  1.50k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  1.43M|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|  1.10k|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|  1.48M|    }
_RNvXsA_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB5_4TermINtNtCs433v4DNuM1R_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|  87.7k|    fn from(node: NamedNode) -> Self {
  438|  87.7k|        Self::NamedNode(node)
  439|  87.7k|    }
_RNvXsC_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB5_4TermINtNtCs433v4DNuM1R_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  451|   356k|    fn from(node: BlankNode) -> Self {
  452|   356k|        Self::BlankNode(node)
  453|   356k|    }
_RNvXsE_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB5_4TermINtNtCs433v4DNuM1R_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  465|   511k|    fn from(literal: Literal) -> Self {
  466|   511k|        Self::Literal(literal)
  467|   511k|    }
_RNvXsG_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB5_4TermINtNtCs433v4DNuM1R_4core7convert4FromNtB5_6TripleE4fromB7_:
  480|  14.5k|    fn from(triple: Triple) -> Self {
  481|  14.5k|        Self::Triple(Box::new(triple))
  482|  14.5k|    }
_RNvMsN_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB5_7TermRef10into_ownedB7_:
  571|  2.48M|    pub fn into_owned(self) -> Term {
  572|  2.48M|        match self {
  573|  72.7k|            Self::NamedNode(node) => Term::NamedNode(node.into_owned()),
  574|  1.24k|            Self::BlankNode(node) => Term::BlankNode(node.into_owned()),
  575|  2.41M|            Self::Literal(literal) => Term::Literal(literal.into_owned()),
  576|       |            #[cfg(feature = "rdf-star")]
  577|  1.04k|            Self::Triple(triple) => Term::Triple(Box::new(triple.clone())),
  578|       |        }
  579|  2.48M|    }
_RNvMs12_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB6_6Triple6as_refB8_:
  753|  1.48M|    pub fn as_ref(&self) -> TripleRef<'_> {
  754|  1.48M|        TripleRef {
  755|  1.48M|            subject: self.subject.as_ref(),
  756|  1.48M|            predicate: self.predicate.as_ref(),
  757|  1.48M|            object: self.object.as_ref(),
  758|  1.48M|        }
  759|  1.48M|    }
_RNvMs14_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB6_9TripleRef10into_ownedB8_:
  826|  1.37M|    pub fn into_owned(self) -> Triple {
  827|  1.37M|        Triple {
  828|  1.37M|            subject: self.subject.into_owned(),
  829|  1.37M|            predicate: self.predicate.into_owned(),
  830|  1.37M|            object: self.object.into_owned(),
  831|  1.37M|        }
  832|  1.37M|    }

_RNvXNtCseXCYVcIQZ7o_5oxttl5lexerNtB2_7N3LexerNtNtNtB4_7toolkit5lexer15TokenRecognizer20recognize_next_token:
   55|  12.1M|    fn recognize_next_token<'a>(
   56|  12.1M|        &mut self,
   57|  12.1M|        data: &'a [u8],
   58|  12.1M|        is_ending: bool,
   59|  12.1M|        options: &N3LexerOptions,
   60|  12.1M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
   61|  12.1M|        match *data.first()? {
   62|  1.99M|            b'<' => match *data.get(1)? {
   63|   183k|                b'<' => Some((2, Ok(N3Token::Punctuation("<<")))),
   64|  12.3k|                b'=' if self.mode == N3LexerMode::N3 => {
   65|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   66|      0|                        Some(if let Ok(result) = result {
   67|      0|                            (consumed, Ok(result))
   68|       |                        } else {
   69|      0|                            (2, Ok(N3Token::Punctuation("<=")))
   70|       |                        })
   71|      0|                    } else if is_ending {
   72|      0|                        Some((2, Ok(N3Token::Punctuation("<="))))
   73|       |                    } else {
   74|      0|                        None
   75|       |                    }
   76|       |                }
   77|  4.49k|                b'-' if self.mode == N3LexerMode::N3 => {
   78|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   79|      0|                        Some(if let Ok(result) = result {
   80|      0|                            (consumed, Ok(result))
   81|       |                        } else {
   82|      0|                            (2, Ok(N3Token::Punctuation("<-")))
   83|       |                        })
   84|      0|                    } else if is_ending {
   85|      0|                        Some((2, Ok(N3Token::Punctuation("<-"))))
   86|       |                    } else {
   87|      0|                        None
   88|       |                    }
   89|       |                }
   90|  1.77M|                _ => self.recognize_iri(data, options),
   91|       |            },
   92|       |            b'>' => {
   93|   264k|                if *data.get(1)? == b'>' {
   94|   143k|                    Some((2, Ok(N3Token::Punctuation(">>"))))
   95|       |                } else {
   96|   106k|                    Some((1, Ok(N3Token::Punctuation(">"))))
   97|       |                }
   98|       |            }
   99|   385k|            b'_' => match data.get(1)? {
  100|   304k|                b':' => Self::recognize_blank_node_label(data),
  101|  10.3k|                c => Some((
  102|  10.3k|                    1,
  103|  10.3k|                    Err((0, format!("Unexpected character '{}'", char::from(*c))).into()),
  104|  10.3k|                )),
  105|       |            },
  106|       |            b'"' => {
  107|  51.2k|                if self.mode != N3LexerMode::NTriples
  108|  51.2k|                    && *data.get(1)? == b'"'
  109|  34.5k|                    && *data.get(2)? == b'"'
  110|       |                {
  111|  24.1k|                    Self::recognize_long_string(data, b'"')
  112|       |                } else {
  113|  21.2k|                    Self::recognize_string(data, b'"')
  114|       |                }
  115|       |            }
  116|   136k|            b'\'' if self.mode != N3LexerMode::NTriples => {
  117|   136k|                if *data.get(1)? == b'\'' && *data.get(2)? == b'\'' {
  118|  24.6k|                    Self::recognize_long_string(data, b'\'')
  119|       |                } else {
  120|   101k|                    Self::recognize_string(data, b'\'')
  121|       |                }
  122|       |            }
  123|   103k|            b'@' => self.recognize_lang_tag(data),
  124|  1.26M|            b'.' => match data.get(1) {
  125|   434k|                Some(b'0'..=b'9') => Self::recognize_number(data),
  126|   903k|                Some(_) => Some((1, Ok(N3Token::Punctuation(".")))),
  127|   318k|                None => is_ending.then_some((1, Ok(N3Token::Punctuation(".")))),
  128|       |            },
  129|       |            b'^' => {
  130|  23.1k|                if *data.get(1)? == b'^' {
  131|  3.89k|                    Some((2, Ok(N3Token::Punctuation("^^"))))
  132|       |                } else {
  133|  17.7k|                    Some((1, Ok(N3Token::Punctuation("^"))))
  134|       |                }
  135|       |            }
  136|   621k|            b'(' => Some((1, Ok(N3Token::Punctuation("(")))),
  137|  39.6k|            b')' => Some((1, Ok(N3Token::Punctuation(")")))),
  138|  38.4k|            b'[' => Some((1, Ok(N3Token::Punctuation("[")))),
  139|  13.8k|            b']' => Some((1, Ok(N3Token::Punctuation("]")))),
  140|       |            b'{' => {
  141|   368k|                if *data.get(1)? == b'|' {
  142|   160k|                    Some((2, Ok(N3Token::Punctuation("{|"))))
  143|       |                } else {
  144|   113k|                    Some((1, Ok(N3Token::Punctuation("{"))))
  145|       |                }
  146|       |            }
  147|  9.56k|            b'}' => Some((1, Ok(N3Token::Punctuation("}")))),
  148|  96.3k|            b',' => Some((1, Ok(N3Token::Punctuation(",")))),
  149|  35.4k|            b';' => Some((1, Ok(N3Token::Punctuation(";")))),
  150|  15.4k|            b'!' => Some((1, Ok(N3Token::Punctuation("!")))),
  151|       |            b'|' => {
  152|  10.8k|                if *data.get(1)? == b'}' {
  153|    564|                    Some((2, Ok(N3Token::Punctuation("|}"))))
  154|       |                } else {
  155|  8.09k|                    Some((1, Ok(N3Token::Punctuation("|"))))
  156|       |                }
  157|       |            }
  158|       |            b'=' => {
  159|  41.0k|                if *data.get(1)? == b'>' {
  160|  1.34k|                    Some((2, Ok(N3Token::Punctuation("=>"))))
  161|       |                } else {
  162|  38.1k|                    Some((1, Ok(N3Token::Punctuation("="))))
  163|       |                }
  164|       |            }
  165|  2.77M|            b'0'..=b'9' | b'+' | b'-' => Self::recognize_number(data),
  166|  70.6k|            b'?' => self.recognize_variable(data, is_ending),
  167|  4.06M|            _ => self.recognize_pname_or_keyword(data, is_ending),
  168|       |        }
  169|  12.1M|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer3new:
  173|  42.8k|    pub fn new(mode: N3LexerMode, unchecked: bool) -> Self {
  174|  42.8k|        Self { mode, unchecked }
  175|  42.8k|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer13recognize_iri:
  177|  1.77M|    fn recognize_iri(
  178|  1.77M|        &self,
  179|  1.77M|        data: &[u8],
  180|  1.77M|        options: &N3LexerOptions,
  181|  1.77M|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  182|  1.77M|        // [18] IRIREF  ::=  '<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
  183|  1.77M|        let mut string = Vec::new();
  184|  1.77M|        let mut i = 1;
  185|       |        loop {
  186|  1.77M|            let end = memchr2(b'>', b'\\', &data[i..])?;
  187|  1.34M|            string.extend_from_slice(&data[i..i + end]);
  188|  1.34M|            i += end;
  189|  1.34M|            match data[i] {
  190|       |                b'>' => {
  191|       |                    #[allow(clippy::range_plus_one)]
  192|  1.32M|                    return Some((i + 1, self.parse_iri(string, 0..i + 1, options)));
  193|       |                }
  194|       |                b'\\' => {
  195|  25.2k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, false)?;
  196|  12.3k|                    i += additional + 1;
  197|  12.3k|                    match c {
  198|    809|                        Ok(c) => {
  199|    809|                            let mut buf = [0; 4];
  200|    809|                            string.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  201|    809|                        }
  202|  11.5k|                        Err(e) => return Some((i, Err(e))),
  203|       |                    }
  204|       |                }
  205|      0|                _ => unreachable!(),
  206|       |            }
  207|       |        }
  208|  1.77M|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer9parse_iri:
  210|  1.32M|    fn parse_iri(
  211|  1.32M|        &self,
  212|  1.32M|        iri: Vec<u8>,
  213|  1.32M|        position: Range<usize>,
  214|  1.32M|        options: &N3LexerOptions,
  215|  1.32M|    ) -> Result<N3Token<'static>, TokenRecognizerError> {
  216|  1.32M|        let iri = string_from_utf8(iri, position.clone())?;
  217|       |        Ok(N3Token::IriRef(
  218|  1.28M|            if let Some(base_iri) = options.base_iri.as_ref() {
  219|   899k|                if self.unchecked {
  220|   299k|                    base_iri.resolve_unchecked(&iri)
  221|       |                } else {
  222|   599k|                    base_iri.resolve(&iri)
  223|       |                }
  224|   899k|                .map_err(|e| (position, e.to_string()))?
  225|   824k|                .into_inner()
  226|   381k|            } else if self.unchecked {
  227|      0|                iri
  228|       |            } else {
  229|   381k|                Iri::parse(iri)
  230|   381k|                    .map_err(|e| (position, e.to_string()))?
  231|   381k|                    .into_inner()
  232|       |            },
  233|       |        ))
  234|  1.32M|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer26recognize_pname_or_keyword:
  236|  4.06M|    fn recognize_pname_or_keyword<'a>(
  237|  4.06M|        &self,
  238|  4.06M|        data: &'a [u8],
  239|  4.06M|        is_ending: bool,
  240|  4.06M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  241|  4.06M|        // [139s]  PNAME_NS   ::=  PN_PREFIX? ':'
  242|  4.06M|        // [140s]  PNAME_LN   ::=  PNAME_NS PN_LOCAL
  243|  4.06M|        // [167s]  PN_PREFIX  ::=  PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
  244|  4.06M|        let mut i = 0;
  245|       |        loop {
  246|  8.38M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  247|  7.99M|                match r {
  248|  7.33M|                    Ok((c, consumed)) => {
  249|  7.33M|                        if c == ':' {
  250|   238k|                            i += consumed;
  251|   238k|                            break;
  252|  7.09M|                        } else if i == 0 {
  253|  3.17M|                            if !Self::is_possible_pn_chars_base(c) {
  254|  2.47M|                                return Some((
  255|  2.47M|                                    consumed,
  256|  2.47M|                                    Err((
  257|  2.47M|                                        0..consumed,
  258|  2.47M|                                        format!(
  259|  2.47M|                                            "'{c}' is not allowed at the beginning of a prefix name"
  260|  2.47M|                                        ),
  261|  2.47M|                                    )
  262|  2.47M|                                        .into()),
  263|  2.47M|                                ));
  264|   702k|                            }
  265|   702k|                            i += consumed;
  266|  3.91M|                        } else if Self::is_possible_pn_chars(c) || c == '.' {
  267|  3.61M|                            i += consumed;
  268|  3.61M|                        } else {
  269|   410k|                            while data[..i].ends_with(b".") {
  270|   107k|                                i -= 1;
  271|   107k|                            }
  272|   303k|                            return Some((
  273|   303k|                                i,
  274|   303k|                                str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  275|   303k|                            ));
  276|       |                        }
  277|       |                    }
  278|   658k|                    Err(e) => return Some((e.location.end, Err(e))),
  279|       |                }
  280|   388k|            } else if is_ending {
  281|  5.29k|                while data[..i].ends_with(b".") {
  282|    897|                    i -= 1;
  283|    897|                }
  284|  4.39k|                return Some(if i == 0 {
  285|  1.27k|                    (
  286|  1.27k|                        1,
  287|  1.27k|                        Err((0..1, format!("Unexpected byte {}", data[0])).into()),
  288|  1.27k|                    )
  289|       |                } else {
  290|  3.11k|                    (
  291|  3.11k|                        i,
  292|  3.11k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  293|  3.11k|                    )
  294|       |                });
  295|       |            } else {
  296|   383k|                return None;
  297|       |            }
  298|       |        }
  299|   238k|        let pn_prefix = match str_from_utf8(&data[..i - 1], 0..i - 1) {
  300|   238k|            Ok(pn_prefix) => pn_prefix,
  301|      0|            Err(e) => return Some((i, Err(e))),
  302|       |        };
  303|   238k|        if pn_prefix.ends_with('.') {
  304|    349|            return Some((
  305|    349|                i,
  306|    349|                Err((
  307|    349|                    0..i,
  308|    349|                    format!(
  309|    349|                        "'{pn_prefix}' is not a valid prefix: prefixes are not allowed to end with '.'"),
  310|    349|                )
  311|    349|                    .into()),
  312|    349|            ));
  313|   237k|        }
  314|       |
  315|   156k|        let (consumed, pn_local_result) =
  316|   237k|            self.recognize_optional_pn_local(&data[i..], is_ending)?;
  317|   156k|        Some((
  318|   156k|            consumed + i,
  319|   156k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  320|       |                prefix: pn_prefix,
  321|       |                local,
  322|       |                might_be_invalid_iri,
  323|   156k|            }),
  324|   156k|        ))
  325|  4.06M|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer18recognize_variable:
  327|  70.6k|    fn recognize_variable<'a>(
  328|  70.6k|        &self,
  329|  70.6k|        data: &'a [u8],
  330|  70.6k|        is_ending: bool,
  331|  70.6k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  332|       |        // [36]  QUICK_VAR_NAME  ::=  "?" PN_LOCAL
  333|  70.6k|        let (consumed, result) = self.recognize_optional_pn_local(&data[1..], is_ending)?;
  334|  33.3k|        Some((
  335|  33.3k|            consumed + 1,
  336|  33.3k|            result.and_then(|(name, _)| {
  337|       |                if name.is_empty() {
  338|       |                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  339|       |                } else {
  340|       |                    Ok(N3Token::Variable(name))
  341|       |                }
  342|  33.3k|            }),
  343|  33.3k|        ))
  344|  70.6k|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer27recognize_optional_pn_local:
  346|   308k|    fn recognize_optional_pn_local<'a>(
  347|   308k|        &self,
  348|   308k|        data: &'a [u8],
  349|   308k|        is_ending: bool,
  350|   308k|    ) -> Option<(usize, Result<(Cow<'a, str>, bool), TokenRecognizerError>)> {
  351|   308k|        // [168s]  PN_LOCAL  ::=  (PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
  352|   308k|        let mut i = 0;
  353|   308k|        let mut buffer = None; // Buffer if there are some escaped characters
  354|   308k|        let mut position_that_is_already_in_buffer = 0;
  355|   308k|        let mut might_be_invalid_iri = false;
  356|   308k|        let mut ends_with_unescaped_dot = 0;
  357|       |        loop {
  358|  1.85M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  359|  1.74M|                match r {
  360|  1.73M|                    Ok((c, consumed)) => {
  361|  1.73M|                        if c == '%' {
  362|  7.81k|                            i += 1;
  363|  7.81k|                            let a = char::from(*data.get(i)?);
  364|  5.09k|                            i += 1;
  365|  5.09k|                            let b = char::from(*data.get(i)?);
  366|  4.39k|                            if !a.is_ascii_hexdigit() || !b.is_ascii_hexdigit() {
  367|    615|                                return Some((i + 1, Err((
  368|    615|                                    i - 2..=i, format!("escapes in IRIs should be % followed by two hexadecimal characters, found '%{a}{b}'")
  369|    615|                                ).into())));
  370|  3.77k|                            }
  371|  3.77k|                            i += 1;
  372|  3.77k|                            ends_with_unescaped_dot = 0;
  373|  1.72M|                        } else if c == '\\' {
  374|   108k|                            i += 1;
  375|   108k|                            let a = char::from(*data.get(i)?);
  376|   105k|                            if self.unchecked
  377|  30.2k|                                || matches!(
  378|  78.5k|                                    a,
  379|       |                                    '_' | '~'
  380|       |                                        | '.'
  381|       |                                        | '-'
  382|       |                                        | '!'
  383|       |                                        | '$'
  384|       |                                        | '&'
  385|       |                                        | '\''
  386|       |                                        | '('
  387|       |                                        | ')'
  388|       |                                        | '*'
  389|       |                                        | '+'
  390|       |                                        | ','
  391|       |                                        | ';'
  392|       |                                        | '='
  393|       |                                )
  394|  74.9k|                            {
  395|  74.9k|                                // ok to escape
  396|  74.9k|                            } else if matches!(a, '/' | '?' | '#' | '@' | '%') {
  397|  27.1k|                                // ok to escape but requires IRI validation
  398|  27.1k|                                might_be_invalid_iri = true;
  399|  27.1k|                            } else {
  400|  3.09k|                                return Some((i + 1, Err((
  401|  3.09k|                                    i..=i, format!("The character that are allowed to be escaped in IRIs are _~.-!$&'()*+,;=/?#@%, found '{a}'")
  402|  3.09k|                                ).into())));
  403|       |                            }
  404|   102k|                            let buffer = buffer.get_or_insert_with(String::new);
  405|   102k|                            // We add the missing bytes
  406|   102k|                            if i - position_that_is_already_in_buffer > 1 {
  407|  26.2k|                                buffer.push_str(
  408|  26.2k|                                    match str_from_utf8(
  409|  26.2k|                                        &data[position_that_is_already_in_buffer..i - 1],
  410|  26.2k|                                        position_that_is_already_in_buffer..i - 1,
  411|  26.2k|                                    ) {
  412|  26.2k|                                        Ok(data) => data,
  413|      0|                                        Err(e) => return Some((i, Err(e))),
  414|       |                                    },
  415|       |                                )
  416|  75.8k|                            }
  417|   102k|                            buffer.push(a);
  418|   102k|                            i += 1;
  419|   102k|                            position_that_is_already_in_buffer = i;
  420|   102k|                            ends_with_unescaped_dot = 0;
  421|  1.62M|                        } else if i == 0 {
  422|   229k|                            if !(Self::is_possible_pn_chars_u(c) || c == ':' || c.is_ascii_digit())
  423|       |                            {
  424|  50.6k|                                return Some((0, Ok((Cow::Borrowed(""), false))));
  425|   179k|                            }
  426|   179k|                            if !self.unchecked {
  427|       |                                might_be_invalid_iri |=
  428|   111k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  429|   111k|                                        || c == ':';
  430|  68.1k|                            }
  431|   179k|                            i += consumed;
  432|  1.39M|                        } else if Self::is_possible_pn_chars(c) || c == ':' {
  433|  1.10M|                            if !self.unchecked {
  434|       |                                might_be_invalid_iri |=
  435|   672k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  436|   672k|                                        || c == ':';
  437|   428k|                            }
  438|  1.10M|                            i += consumed;
  439|  1.10M|                            ends_with_unescaped_dot = 0;
  440|   289k|                        } else if c == '.' {
  441|   162k|                            i += consumed;
  442|   162k|                            ends_with_unescaped_dot += 1;
  443|   162k|                        } else {
  444|   127k|                            let buffer = if let Some(mut buffer) = buffer {
  445|  17.6k|                                buffer.push_str(
  446|  17.6k|                                    match str_from_utf8(
  447|  17.6k|                                        &data[position_that_is_already_in_buffer..i],
  448|  17.6k|                                        position_that_is_already_in_buffer..i,
  449|  17.6k|                                    ) {
  450|  17.6k|                                        Ok(data) => data,
  451|      0|                                        Err(e) => return Some((i, Err(e))),
  452|       |                                    },
  453|       |                                );
  454|       |                                // We do not include the last dots
  455|  17.6k|                                for _ in 0..ends_with_unescaped_dot {
  456|  3.59k|                                    buffer.pop();
  457|  3.59k|                                }
  458|  17.6k|                                i -= ends_with_unescaped_dot;
  459|  17.6k|                                Cow::Owned(buffer)
  460|       |                            } else {
  461|   110k|                                let mut data = match str_from_utf8(&data[..i], 0..i) {
  462|   110k|                                    Ok(data) => data,
  463|      0|                                    Err(e) => return Some((i, Err(e))),
  464|       |                                };
  465|       |                                // We do not include the last dots
  466|   110k|                                data = &data[..data.len() - ends_with_unescaped_dot];
  467|   110k|                                i -= ends_with_unescaped_dot;
  468|   110k|                                Cow::Borrowed(data)
  469|       |                            };
  470|   127k|                            return Some((i, Ok((buffer, might_be_invalid_iri))));
  471|       |                        }
  472|       |                    }
  473|  6.71k|                    Err(e) => return Some((e.location.end, Err(e))),
  474|       |                }
  475|   112k|            } else if is_ending {
  476|  1.29k|                let buffer = if let Some(mut buffer) = buffer {
  477|       |                    // We do not include the last dot
  478|    836|                    while buffer.ends_with('.') {
  479|    481|                        buffer.pop();
  480|    481|                        i -= 1;
  481|    481|                    }
  482|    355|                    Cow::Owned(buffer)
  483|       |                } else {
  484|    943|                    let mut data = match str_from_utf8(&data[..i], 0..i) {
  485|    943|                        Ok(data) => data,
  486|      0|                        Err(e) => return Some((i, Err(e))),
  487|       |                    };
  488|       |                    // We do not include the last dot
  489|  1.41k|                    while let Some(d) = data.strip_suffix('.') {
  490|    475|                        data = d;
  491|    475|                        i -= 1;
  492|    475|                    }
  493|    943|                    Cow::Borrowed(data)
  494|       |                };
  495|  1.29k|                return Some((i, Ok((buffer, might_be_invalid_iri))));
  496|       |            } else {
  497|   111k|                return None;
  498|       |            }
  499|       |        }
  500|   308k|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer26recognize_blank_node_label:
  502|   304k|    fn recognize_blank_node_label(
  503|   304k|        data: &[u8],
  504|   304k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  505|   304k|        // [141s]  BLANK_NODE_LABEL  ::=  '_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
  506|   304k|        let mut i = 2;
  507|       |        loop {
  508|  6.90M|            match Self::recognize_unicode_char(&data[i..], i)? {
  509|  6.82M|                Ok((c, consumed)) => {
  510|  6.82M|                    if (i == 2 && (Self::is_possible_pn_chars_u(c) || c.is_ascii_digit()))
  511|  6.56M|                        || (i > 2 && Self::is_possible_pn_chars(c))
  512|  6.58M|                    {
  513|  6.58M|                        // Ok
  514|  6.58M|                    } else if i > 2 && c == '.' {
  515|  12.1k|                        if data[i - 1] == b'.' {
  516|    234|                            i -= 1;
  517|    234|                            return Some((
  518|    234|                                i,
  519|    234|                                str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  520|    234|                            ));
  521|  11.9k|                        }
  522|   227k|                    } else if i == 0 {
  523|      0|                        return Some((
  524|      0|                            i,
  525|      0|                            Err((0..i, "A blank node ID should not be empty").into()),
  526|      0|                        ));
  527|   227k|                    } else if data[i - 1] == b'.' {
  528|  2.93k|                        i -= 1;
  529|  2.93k|                        return Some((
  530|  2.93k|                            i,
  531|  2.93k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  532|  2.93k|                        ));
  533|       |                    } else {
  534|   224k|                        return Some((
  535|   224k|                            i,
  536|   224k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  537|   224k|                        ));
  538|       |                    }
  539|  6.59M|                    i += consumed;
  540|       |                }
  541|    916|                Err(e) => return Some((e.location.end, Err(e))),
  542|       |            }
  543|       |        }
  544|   304k|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer18recognize_lang_tag:
  546|   103k|    fn recognize_lang_tag<'a>(
  547|   103k|        &self,
  548|   103k|        data: &'a [u8],
  549|   103k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  550|   103k|        // [144s]  LANGTAG  ::=  '@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
  551|   103k|        let mut is_last_block_empty = true;
  552|   625k|        for (i, c) in data[1..].iter().enumerate() {
  553|   625k|            if c.is_ascii_alphabetic() {
  554|   492k|                is_last_block_empty = false;
  555|   492k|            } else if i == 0 {
  556|  20.7k|                return Some((
  557|  20.7k|                    1,
  558|  20.7k|                    Err((1..2, "A language code should always start with a letter").into()),
  559|  20.7k|                ));
  560|   112k|            } else if is_last_block_empty {
  561|  2.49k|                return Some((i, self.parse_lang_tag(&data[1..i], 1..i - 1)));
  562|   110k|            } else if *c == b'-' {
  563|  74.0k|                is_last_block_empty = true;
  564|  74.0k|            } else {
  565|  36.0k|                return Some((i + 1, self.parse_lang_tag(&data[1..=i], 1..i)));
  566|       |            }
  567|       |        }
  568|  44.6k|        None
  569|   103k|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer14parse_lang_tag:
  571|  38.5k|    fn parse_lang_tag<'a>(
  572|  38.5k|        &self,
  573|  38.5k|        lang_tag: &'a [u8],
  574|  38.5k|        position: Range<usize>,
  575|  38.5k|    ) -> Result<N3Token<'a>, TokenRecognizerError> {
  576|  38.5k|        let lang_tag = str_from_utf8(lang_tag, position.clone())?;
  577|  38.5k|        Ok(N3Token::LangTag(if self.unchecked {
  578|  12.1k|            lang_tag
  579|       |        } else {
  580|  26.4k|            LanguageTag::parse(lang_tag)
  581|  26.4k|                .map_err(|e| (position.clone(), e.to_string()))?
  582|  21.6k|                .into_inner()
  583|       |        }))
  584|  38.5k|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer16recognize_string:
  586|   122k|    fn recognize_string(
  587|   122k|        data: &[u8],
  588|   122k|        delimiter: u8,
  589|   122k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  590|   122k|        // [22]  STRING_LITERAL_QUOTE         ::=  '"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
  591|   122k|        // [23]  STRING_LITERAL_SINGLE_QUOTE  ::=  "'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
  592|   122k|        let mut string = String::new();
  593|   122k|        let mut i = 1;
  594|       |        loop {
  595|   194k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  596|   136k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  597|   133k|                Ok(s) => string.push_str(s),
  598|  2.89k|                Err(e) => return Some((end, Err(e))),
  599|       |            };
  600|   133k|            i += end;
  601|   133k|            match data[i] {
  602|   133k|                c if c == delimiter => {
  603|  29.0k|                    return Some((i + 1, Ok(N3Token::String(string))));
  604|       |                }
  605|       |                b'\\' => {
  606|   104k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  607|  96.1k|                    i += additional + 1;
  608|  96.1k|                    match c {
  609|  71.4k|                        Ok(c) => {
  610|  71.4k|                            string.push(c);
  611|  71.4k|                        }
  612|  24.7k|                        Err(e) => {
  613|       |                            // We read until the end of string char
  614|  24.7k|                            let end = memchr(delimiter, &data[i..])?;
  615|  8.70k|                            return Some((i + end + 1, Err(e)));
  616|       |                        }
  617|       |                    }
  618|       |                }
  619|      0|                _ => unreachable!(),
  620|       |            }
  621|       |        }
  622|   122k|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer21recognize_long_string:
  624|  48.7k|    fn recognize_long_string(
  625|  48.7k|        data: &[u8],
  626|  48.7k|        delimiter: u8,
  627|  48.7k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  628|  48.7k|        // [24]  STRING_LITERAL_LONG_SINGLE_QUOTE  ::=  "'''" (("'" | "''")? ([^'\] | ECHAR | UCHAR))* "'''"
  629|  48.7k|        // [25]  STRING_LITERAL_LONG_QUOTE         ::=  '"""' (('"' | '""')? ([^"\] | ECHAR | UCHAR))* '"""'
  630|  48.7k|        let mut string = String::new();
  631|  48.7k|        let mut i = 3;
  632|       |        loop {
  633|  90.2k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  634|  61.5k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  635|  59.7k|                Ok(s) => string.push_str(s),
  636|  1.80k|                Err(e) => return Some((end, Err(e))),
  637|       |            };
  638|  59.7k|            i += end;
  639|  59.7k|            match data[i] {
  640|  59.7k|                c if c == delimiter => {
  641|  56.1k|                    if *data.get(i + 1)? == delimiter && *data.get(i + 2)? == delimiter {
  642|  15.9k|                        return Some((i + 3, Ok(N3Token::String(string))));
  643|  38.6k|                    }
  644|  38.6k|                    i += 1;
  645|  38.6k|                    string.push(char::from(delimiter));
  646|       |                }
  647|       |                b'\\' => {
  648|  3.59k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  649|  3.02k|                    i += additional + 1;
  650|  3.02k|                    match c {
  651|  2.82k|                        Ok(c) => {
  652|  2.82k|                            string.push(c);
  653|  2.82k|                        }
  654|    207|                        Err(e) => return Some((i, Err(e))),
  655|       |                    }
  656|       |                }
  657|      0|                _ => unreachable!(),
  658|       |            }
  659|       |        }
  660|  48.7k|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer16recognize_number:
  662|  1.22M|    fn recognize_number(data: &[u8]) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  663|  1.22M|        // [19]  INTEGER    ::=  [+-]? [0-9]+
  664|  1.22M|        // [20]  DECIMAL    ::=  [+-]? [0-9]* '.' [0-9]+
  665|  1.22M|        // [21]  DOUBLE     ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  666|  1.22M|        // [154s] EXPONENT  ::=  [eE] [+-]? [0-9]+
  667|  1.22M|        let mut i = 0;
  668|  1.22M|        let c = *data.first()?;
  669|  1.22M|        if matches!(c, b'+' | b'-') {
  670|  68.8k|            i += 1;
  671|  1.15M|        }
  672|       |        // We read the digits before .
  673|  1.22M|        let mut count_before: usize = 0;
  674|       |        loop {
  675|  4.09M|            let c = *data.get(i)?;
  676|  3.96M|            if c.is_ascii_digit() {
  677|  2.86M|                i += 1;
  678|  2.86M|                count_before += 1;
  679|  2.86M|            } else {
  680|  1.09M|                break;
  681|       |            }
  682|       |        }
  683|       |
  684|       |        // We read the digits after .
  685|       |        #[allow(clippy::if_then_some_else_none)]
  686|  1.09M|        let count_after = if *data.get(i)? == b'.' {
  687|   219k|            i += 1;
  688|   219k|
  689|   219k|            let mut count_after = 0;
  690|       |            loop {
  691|   378k|                let c = *data.get(i)?;
  692|   354k|                if c.is_ascii_digit() {
  693|   158k|                    i += 1;
  694|   158k|                    count_after += 1;
  695|   158k|                } else {
  696|   195k|                    break;
  697|   195k|                }
  698|   195k|            }
  699|   195k|            Some(count_after)
  700|       |        } else {
  701|   876k|            None
  702|       |        };
  703|       |
  704|       |        // End
  705|  1.07M|        let c = *data.get(i)?;
  706|  1.07M|        if matches!(c, b'e' | b'E') {
  707|   394k|            i += 1;
  708|       |
  709|   394k|            let c = *data.get(i)?;
  710|   393k|            if matches!(c, b'+' | b'-') {
  711|  1.90k|                i += 1;
  712|   391k|            }
  713|       |
  714|   393k|            let mut found = false;
  715|       |            loop {
  716|  1.94M|                let c = *data.get(i)?;
  717|  1.93M|                if c.is_ascii_digit() {
  718|  1.55M|                    i += 1;
  719|  1.55M|                    found = true;
  720|  1.55M|                } else {
  721|   381k|                    break;
  722|   381k|                }
  723|   381k|            }
  724|   381k|            Some((
  725|   381k|                i,
  726|   381k|                if !found {
  727|  3.49k|                    Err((0..i, "A double exponent cannot be empty").into())
  728|   378k|                } else if count_before == 0 && count_after.unwrap_or(0) == 0 {
  729|    108|                    Err((0..i, "A double should not be empty").into())
  730|       |                } else {
  731|   378k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Double)
  732|       |                },
  733|       |            ))
  734|   678k|        } else if let Some(count_after) = count_after {
  735|   191k|            if count_after == 0 {
  736|       |                // We do not consume the '.' after all
  737|   148k|                i -= 1;
  738|   148k|                Some((
  739|   148k|                    i,
  740|   148k|                    if count_before == 0 {
  741|  10.8k|                        Err((0..i, "An integer should not be empty").into())
  742|       |                    } else {
  743|   137k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  744|       |                    },
  745|       |                ))
  746|       |            } else {
  747|  43.4k|                Some((i, str_from_utf8(&data[..i], 0..i).map(N3Token::Decimal)))
  748|       |            }
  749|       |        } else {
  750|       |            Some((
  751|   486k|                i,
  752|   486k|                if count_before == 0 {
  753|  35.6k|                    Err((0..i, "An integer should not be empty").into())
  754|       |                } else {
  755|   450k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  756|       |                },
  757|       |            ))
  758|       |        }
  759|  1.22M|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer16recognize_escape:
  761|   133k|    fn recognize_escape(
  762|   133k|        data: &[u8],
  763|   133k|        position: usize,
  764|   133k|        with_echar: bool,
  765|   133k|    ) -> Option<(usize, Result<char, TokenRecognizerError>)> {
  766|   133k|        // [26]   UCHAR  ::=  '\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
  767|   133k|        // [159s] ECHAR  ::=  '\' [tbnrf"'\]
  768|   133k|        match *data.get(1)? {
  769|  50.4k|            b'u' => match Self::recognize_hex_char(&data[2..], 4, 'u', position) {
  770|  50.2k|                Ok(c) => Some((5, Ok(c?))),
  771|    252|                Err(e) => Some((5, Err(e))),
  772|       |            },
  773|  4.53k|            b'U' => match Self::recognize_hex_char(&data[2..], 8, 'u', position) {
  774|  3.70k|                Ok(c) => Some((9, Ok(c?))),
  775|    826|                Err(e) => Some((9, Err(e))),
  776|       |            },
  777|    557|            b't' if with_echar => Some((1, Ok('\t'))),
  778|    535|            b'b' if with_echar => Some((1, Ok('\x08'))),
  779|    721|            b'n' if with_echar => Some((1, Ok('\n'))),
  780|    544|            b'r' if with_echar => Some((1, Ok('\r'))),
  781|    386|            b'f' if with_echar => Some((1, Ok('\x0C'))),
  782|  1.63k|            b'"' if with_echar => Some((1, Ok('"'))),
  783|  1.00k|            b'\'' if with_echar => Some((1, Ok('\''))),
  784|  19.8k|            b'\\' if with_echar => Some((1, Ok('\\'))),
  785|  35.3k|            c => Some((
  786|  35.3k|                1,
  787|  35.3k|                Err((
  788|  35.3k|                    position..position + 2,
  789|  35.3k|                    format!("Unexpected escape character '\\{}'", char::from(c)),
  790|  35.3k|                )
  791|  35.3k|                    .into()),
  792|  35.3k|            )), // TODO: read until end of string
  793|       |        }
  794|   133k|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer18recognize_hex_char:
  796|  55.0k|    fn recognize_hex_char(
  797|  55.0k|        data: &[u8],
  798|  55.0k|        len: usize,
  799|  55.0k|        escape_char: char,
  800|  55.0k|        position: usize,
  801|  55.0k|    ) -> Result<Option<char>, TokenRecognizerError> {
  802|  55.0k|        if data.len() < len {
  803|  4.06k|            return Ok(None);
  804|  50.9k|        }
  805|  50.9k|        let val = str_from_utf8(&data[..len], position..position + len + 2)?;
  806|  50.5k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  807|       |            (
  808|       |                position..position + len + 2,
  809|       |                format!(
  810|       |                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  811|       |                ),
  812|       |            )
  813|  50.5k|        })?;
  814|  50.1k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  815|       |            (
  816|       |                position..position + len +2,
  817|       |                format!(
  818|       |                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  819|       |                ),
  820|       |            )
  821|  50.1k|        })?;
  822|  49.8k|        Ok(Some(c))
  823|  55.0k|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer22recognize_unicode_char:
  825|  17.1M|    fn recognize_unicode_char(
  826|  17.1M|        data: &[u8],
  827|  17.1M|        position: usize,
  828|  17.1M|    ) -> Option<Result<(char, usize), TokenRecognizerError>> {
  829|  17.1M|        let mut code_point: u32;
  830|  17.1M|        let bytes_needed: usize;
  831|  17.1M|        let mut lower_boundary = 0x80;
  832|  17.1M|        let mut upper_boundary = 0xBF;
  833|       |
  834|  17.1M|        let byte = *data.first()?;
  835|  16.6M|        match byte {
  836|  16.6M|            0x00..=0x7F => return Some(Ok((char::from(byte), 1))),
  837|   521k|            0xC2..=0xDF => {
  838|   264k|                bytes_needed = 1;
  839|   264k|                code_point = u32::from(byte) & 0x1F;
  840|   264k|            }
  841|   257k|            0xE0..=0xEF => {
  842|  52.5k|                if byte == 0xE0 {
  843|  7.53k|                    lower_boundary = 0xA0;
  844|  45.0k|                }
  845|  52.5k|                if byte == 0xED {
  846|  3.49k|                    upper_boundary = 0x9F;
  847|  49.0k|                }
  848|  52.5k|                bytes_needed = 2;
  849|  52.5k|                code_point = u32::from(byte) & 0xF;
  850|       |            }
  851|   204k|            0xF0..=0xF4 => {
  852|  27.9k|                if byte == 0xF0 {
  853|  2.56k|                    lower_boundary = 0x90;
  854|  25.3k|                }
  855|  27.9k|                if byte == 0xF4 {
  856|  3.29k|                    upper_boundary = 0x8F;
  857|  24.6k|                }
  858|  27.9k|                bytes_needed = 3;
  859|  27.9k|                code_point = u32::from(byte) & 0x7;
  860|       |            }
  861|       |            _ => {
  862|   475k|                return Some(Err((
  863|   475k|                    position..=position,
  864|   475k|                    "Invalid UTF-8 character encoding",
  865|   475k|                )
  866|   475k|                    .into()))
  867|       |            }
  868|       |        }
  869|       |
  870|   357k|        for i in 1..=bytes_needed {
  871|   357k|            let byte = *data.get(i)?;
  872|   239k|            if byte < lower_boundary || upper_boundary < byte {
  873|   190k|                return Some(Err((
  874|   190k|                    position..=position + i,
  875|   190k|                    "Invalid UTF-8 character encoding",
  876|   190k|                )
  877|   190k|                    .into()));
  878|  48.9k|            }
  879|  48.9k|            lower_boundary = 0x80;
  880|  48.9k|            upper_boundary = 0xBF;
  881|  48.9k|            code_point = (code_point << 6) | (u32::from(byte) & 0x3F);
  882|       |        }
  883|       |
  884|  37.1k|        Some(
  885|  37.1k|            char::from_u32(code_point)
  886|  37.1k|                .map(|c| (c, bytes_needed + 1))
  887|  37.1k|                .ok_or_else(|| {
  888|       |                    (
  889|       |                        position..=position + bytes_needed,
  890|       |                        format!("The codepoint {code_point:X} is not a valid unicode character"),
  891|       |                    )
  892|       |                        .into()
  893|  37.1k|                }),
  894|  37.1k|        )
  895|  17.1M|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer25is_possible_pn_chars_base:
  898|  15.6M|    fn is_possible_pn_chars_base(c: char) -> bool {
  899|  15.6M|        matches!(c,
  900|  6.59M|        'A'..='Z'
  901|  4.29M|        | 'a'..='z'
  902|  37.1k|        | '\u{00C0}'..='\u{00D6}'
  903|  37.1k|        | '\u{00D8}'..='\u{00F6}'
  904|  36.9k|        | '\u{00F8}'..='\u{02FF}'
  905|  32.6k|        | '\u{0370}'..='\u{037D}'
  906|  32.5k|        | '\u{037F}'..='\u{1FFF}'
  907|  4.58k|        | '\u{200C}'..='\u{200D}'
  908|  4.58k|        | '\u{2070}'..='\u{218F}'
  909|  4.57k|        | '\u{2C00}'..='\u{2FEF}'
  910|  4.57k|        | '\u{3001}'..='\u{D7FF}'
  911|  1.29k|        | '\u{F900}'..='\u{FDCF}'
  912|  1.00k|        | '\u{FDF0}'..='\u{FFFD}'
  913|  1.00k|        | '\u{10000}'..='\u{EFFFF}')
  914|  15.6M|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer22is_possible_pn_chars_u:
  917|  12.5M|    pub(super) fn is_possible_pn_chars_u(c: char) -> bool {
  918|  12.5M|        Self::is_possible_pn_chars_base(c) || c == '_'
  919|  12.5M|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer20is_possible_pn_chars:
  922|  11.9M|    pub(crate) fn is_possible_pn_chars(c: char) -> bool {
  923|  11.9M|        Self::is_possible_pn_chars_u(c)
  924|  6.60M|            || matches!(c,
  925|  4.84M|        '-' | '0'..='9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
  926|  11.9M|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer43is_possible_pn_chars_base_but_not_valid_iri:
  928|   783k|    fn is_possible_pn_chars_base_but_not_valid_iri(c: char) -> bool {
  929|   783k|        matches!(c, '\u{FFF0}'..='\u{FFFD}')
  930|   783k|            || u32::from(c) % u32::from('\u{FFFE}') == 0
  931|   783k|            || u32::from(c) % u32::from('\u{FFFF}') == 0
  932|   783k|    }
_RNvNtCseXCYVcIQZ7o_5oxttl5lexer18resolve_local_name:
  935|  49.9k|pub fn resolve_local_name(
  936|  49.9k|    prefix: &str,
  937|  49.9k|    local: &str,
  938|  49.9k|    might_be_invalid_iri: bool,
  939|  49.9k|    prefixes: &HashMap<String, Iri<String>>,
  940|  49.9k|) -> Result<NamedNode, String> {
  941|  49.9k|    if let Some(start) = prefixes.get(prefix) {
  942|  19.4k|        let iri = format!("{start}{local}");
  943|  19.4k|        if might_be_invalid_iri || start.path().is_empty() {
  944|       |            // We validate again. We always validate if the local part might be the IRI authority.
  945|  14.2k|            if let Err(e) = Iri::parse(iri.as_str()) {
  946|  1.20k|                return Err(format!(
  947|  1.20k|                    "The prefixed name {prefix}:{local} builds IRI {iri} that is invalid: {e}"
  948|  1.20k|                ));
  949|  13.0k|            }
  950|  5.21k|        }
  951|  18.2k|        Ok(NamedNode::new_unchecked(iri))
  952|       |    } else {
  953|  30.4k|        Err(format!("The prefix {prefix}: has not been declared"))
  954|       |    }
  955|  49.9k|}
_RNvNtCseXCYVcIQZ7o_5oxttl5lexer13str_from_utf8:
  957|  2.22M|fn str_from_utf8(data: &[u8], range: Range<usize>) -> Result<&str, TokenRecognizerError> {
  958|  2.22M|    str::from_utf8(data).map_err(|e| {
  959|       |        (
  960|       |            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  961|       |            format!("Invalid UTF-8: {e}"),
  962|       |        )
  963|       |            .into()
  964|  2.22M|    })
  965|  2.22M|}
_RNvNtCseXCYVcIQZ7o_5oxttl5lexer16string_from_utf8:
  967|  1.32M|fn string_from_utf8(data: Vec<u8>, range: Range<usize>) -> Result<String, TokenRecognizerError> {
  968|  1.32M|    String::from_utf8(data).map_err(|e| {
  969|       |        (
  970|       |            range.start + e.utf8_error().valid_up_to()
  971|       |                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  972|       |            format!("Invalid UTF-8: {e}"),
  973|       |        )
  974|       |            .into()
  975|  1.32M|    })
  976|  1.32M|}
_RNCNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB6_7N3Lexer9parse_iri0B8_:
  224|  75.1k|                .map_err(|e| (position, e.to_string()))?
_RNCNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB6_7N3Lexer26recognize_pname_or_keyword0B8_:
  319|   150k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  320|   150k|                prefix: pn_prefix,
  321|   150k|                local,
  322|   150k|                might_be_invalid_iri,
  323|   150k|            }),
_RNCNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB6_7N3Lexer18recognize_variable0B8_:
  336|  28.9k|            result.and_then(|(name, _)| {
  337|  28.9k|                if name.is_empty() {
  338|  20.9k|                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  339|       |                } else {
  340|  8.00k|                    Ok(N3Token::Variable(name))
  341|       |                }
  342|  28.9k|            }),
_RNCNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB6_7N3Lexer14parse_lang_tag0B8_:
  581|  4.76k|                .map_err(|e| (position.clone(), e.to_string()))?
_RNCNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_char0B8_:
  806|    422|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  807|    422|            (
  808|    422|                position..position + len + 2,
  809|    422|                format!(
  810|    422|                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  811|    422|                ),
  812|    422|            )
  813|    422|        })?;
_RNCNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_chars_0B8_:
  814|    307|        let c = char::from_u32(codepoint).ok_or_else(|| {
  815|    307|            (
  816|    307|                position..position + len +2,
  817|    307|                format!(
  818|    307|                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  819|    307|                ),
  820|    307|            )
  821|    307|        })?;
_RNCNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB6_7N3Lexer22recognize_unicode_char0B8_:
  886|  37.1k|                .map(|c| (c, bytes_needed + 1))
_RNCNvNtCseXCYVcIQZ7o_5oxttl5lexer13str_from_utf80B5_:
  958|  5.05k|    str::from_utf8(data).map_err(|e| {
  959|  5.05k|        (
  960|  5.05k|            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  961|  5.05k|            format!("Invalid UTF-8: {e}"),
  962|  5.05k|        )
  963|  5.05k|            .into()
  964|  5.05k|    })
_RNCNvNtCseXCYVcIQZ7o_5oxttl5lexer16string_from_utf80B5_:
  968|  40.7k|    String::from_utf8(data).map_err(|e| {
  969|  40.7k|        (
  970|  40.7k|            range.start + e.utf8_error().valid_up_to()
  971|  40.7k|                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  972|  40.7k|            format!("Invalid UTF-8: {e}"),
  973|  40.7k|        )
  974|  40.7k|            .into()
  975|  40.7k|    })

_RNvMNtCseXCYVcIQZ7o_5oxttl5terseNtB2_21TriGRecognizerContext8prefixes:
   32|  32.1k|    pub fn prefixes(&self) -> Iter<'_, String, Iri<String>> {
   33|  32.1k|        self.prefixes.iter()
   34|  32.1k|    }
_RNvXs_NtCseXCYVcIQZ7o_5oxttl5terseNtB4_14TriGRecognizerNtNtNtB6_7toolkit6parser14RuleRecognizer20error_recovery_state:
   42|  3.40M|    fn error_recovery_state(mut self) -> Self {
   43|  3.40M|        self.stack.clear();
   44|  3.40M|        self.cur_subject.clear();
   45|  3.40M|        self.cur_predicate.clear();
   46|  3.40M|        self.cur_object.clear();
   47|  3.40M|        self.cur_graph = GraphName::DefaultGraph;
   48|  3.40M|        self
   49|  3.40M|    }
_RNvXs_NtCseXCYVcIQZ7o_5oxttl5terseNtB4_14TriGRecognizerNtNtNtB6_7toolkit6parser14RuleRecognizer14recognize_next:
   51|  8.55M|    fn recognize_next(
   52|  8.55M|        mut self,
   53|  8.55M|        token: N3Token<'_>,
   54|  8.55M|        context: &mut TriGRecognizerContext,
   55|  8.55M|        results: &mut Vec<Quad>,
   56|  8.55M|        errors: &mut Vec<RuleRecognizerError>,
   57|  8.55M|    ) -> Self {
   58|  8.55M|        if let Some(rule) = self.stack.pop() {
   59|  6.14M|            match rule {
   60|       |                // [1g] trigDoc      ::=  (directive | block)*
   61|       |                // [2g] block        ::=  triplesOrGraph | wrappedGraph | triples2 | "GRAPH" labelOrSubject wrappedGraph
   62|       |                // [3]  directive    ::=  prefixID | base | sparqlPrefix | sparqlBase
   63|       |                // [4]  prefixID     ::=  '@prefix' PNAME_NS IRIREF '.'
   64|       |                // [5]  base         ::=  '@base' IRIREF '.'
   65|       |                // [5s] sparqlPrefix ::=  "PREFIX" PNAME_NS IRIREF
   66|       |                // [6s] sparqlBase   ::=  "BASE" IRIREF
   67|       |                TriGState::TriGDoc => {
   68|   755k|                    self.cur_graph = GraphName::DefaultGraph;
   69|   755k|                    self.stack.push(TriGState::TriGDoc);
   70|  30.0k|                    match token {
   71|  31.1k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("base") => {
   72|  9.73k|                            self.stack.push(TriGState::BaseExpectIri);
   73|  9.73k|                            self
   74|       |                        }
   75|  21.3k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("prefix") => {
   76|    183|                            self.stack.push(TriGState::PrefixExpectPrefix);
   77|    183|                            self
   78|       |                        }
   79|  9.14k|                        N3Token::LangTag("prefix") => {
   80|  7.97k|                            self.stack.push(TriGState::ExpectDot);
   81|  7.97k|                            self.stack.push(TriGState::PrefixExpectPrefix);
   82|  7.97k|                            self
   83|       |                        }
   84|  1.17k|                        N3Token::LangTag("base") => {
   85|    129|                            self.stack.push(TriGState::ExpectDot);
   86|    129|                            self.stack.push(TriGState::BaseExpectIri);
   87|    129|                            self
   88|       |                        }
   89|  21.2k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("graph") && context.with_graph_name => {
   90|      0|                            self.stack.push(TriGState::WrappedGraph);
   91|      0|                            self.stack.push(TriGState::GraphName);
   92|      0|                            self
   93|       |                        }
   94|   326k|                        N3Token::Punctuation("{") if context.with_graph_name => {
   95|  8.82k|                            self.stack.push(TriGState::WrappedGraph);
   96|  8.82k|                            self.recognize_next(token, context,results, errors)
   97|       |                        }
   98|       |                        _ => {
   99|   728k|                            self.stack.push(TriGState::TriplesOrGraph);
  100|   728k|                            self.recognize_next(token, context,results, errors)
  101|       |                        }
  102|       |                    }
  103|       |                },
  104|       |                TriGState::ExpectDot => {
  105|   241k|                    self.cur_subject.pop();
  106|   241k|                    if token == N3Token::Punctuation(".") {
  107|   176k|                        self
  108|       |                    } else  {
  109|  64.1k|                        errors.push("A dot is expected at the end of statements".into());
  110|  64.1k|                        self.recognize_next(token, context,results, errors)
  111|       |                    }
  112|       |                },
  113|  8.53k|                TriGState::BaseExpectIri => match token {
  114|  8.31k|                    N3Token::IriRef(iri) => {
  115|  8.31k|                        match Iri::parse_unchecked(iri) {
  116|  8.31k|                            Ok(iri) => {
  117|  8.31k|                                context.lexer_options.base_iri = Some(iri);
  118|  8.31k|                                self
  119|       |                            }
  120|      0|                            Err(e) => self.error(errors, format!("Invalid base IRI: {e}"))
  121|       |                        }
  122|       |                    }
  123|    214|                    _ => self.error(errors, "The BASE keyword should be followed by an IRI"),
  124|       |                },
  125|  7.86k|                TriGState::PrefixExpectPrefix => match token {
  126|  7.86k|                    N3Token::PrefixedName { prefix, local, .. } if local.is_empty() => {
  127|  7.70k|                        self.stack.push(TriGState::PrefixExpectIri { name: prefix.to_owned() });
  128|  7.70k|                        self
  129|       |                    }
  130|       |                    _ => {
  131|    310|                        self.error(errors, "The PREFIX keyword should be followed by a prefix like 'ex:'")
  132|       |                    }
  133|       |                },
  134|  6.68k|                TriGState::PrefixExpectIri { name } => match token {
  135|  6.60k|                    N3Token::IriRef(iri) => {
  136|  6.60k|                        match Iri::parse_unchecked(iri) {
  137|  6.60k|                            Ok(iri) => {
  138|  6.60k|                                context.prefixes.insert(name, iri);
  139|  6.60k|                                self
  140|       |                            }
  141|      0|                            Err(e) => self.error(errors, format!("Invalid prefix IRI: {e}"))
  142|       |                        }                    }
  143|     81|                    _ => self.error(errors, "The PREFIX declaration should be followed by a prefix and its value as an IRI"),
  144|       |                },
  145|       |                // [3g]  triplesOrGraph  ::=  labelOrSubject ( wrappedGraph | predicateObjectList '.' ) | quotedTriple predicateObjectList '.'
  146|       |                // [4g]  triples2        ::=  blankNodePropertyList predicateObjectList? '.' | collection predicateObjectList '.'
  147|  46.3k|                TriGState::TriplesOrGraph => match token {
  148|   238k|                    N3Token::IriRef(iri) => {
  149|   238k|                        self.stack.push(TriGState::WrappedGraphOrPredicateObjectList {
  150|   238k|                            term: NamedNode::new_unchecked(iri).into()
  151|   238k|                        });
  152|   238k|                        self
  153|       |                    }
  154|  31.0k|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  155|  3.25k|                        Ok(t) => {
  156|  3.25k|                            self.stack.push(TriGState::WrappedGraphOrPredicateObjectList {
  157|  3.25k|                                term: t.into()
  158|  3.25k|                            });
  159|  3.25k|                            self
  160|       |                        },
  161|  27.8k|                        Err(e) => self.error(errors, e)
  162|       |                    }
  163|  96.1k|                    N3Token::BlankNodeLabel(label) => {
  164|  96.1k|                        self.stack.push(TriGState::WrappedGraphOrPredicateObjectList {
  165|  96.1k|                            term: BlankNode::new_unchecked(label).into()
  166|  96.1k|                        });
  167|  96.1k|                        self
  168|       |                    }
  169|   317k|                    N3Token::Punctuation("[") => {
  170|  9.14k|                        self.stack.push(TriGState::WrappedGraphBlankNodePropertyListCurrent);
  171|  9.14k|                        self
  172|       |                    }
  173|   308k|                    N3Token::Punctuation("(") => {
  174|  55.3k|                        self.stack.push(TriGState::ExpectDot);
  175|  55.3k|                        self.stack.push(TriGState::PredicateObjectList);
  176|  55.3k|                        self.stack.push(TriGState::SubjectCollectionBeginning);
  177|  55.3k|                        self
  178|       |                    }
  179|       |                    #[cfg(feature = "rdf-star")]
  180|   253k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  181|  46.3k|                        self.stack.push(TriGState::ExpectDot);
  182|  46.3k|                        self.stack.push(TriGState::PredicateObjectList);
  183|  46.3k|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  184|  46.3k|                        self.stack.push(TriGState::QuotedObject);
  185|  46.3k|                        self.stack.push(TriGState::Verb);
  186|  46.3k|                        self.stack.push(TriGState::QuotedSubject);
  187|  46.3k|                        self
  188|       |                    }
  189|       |                    _ => {
  190|   251k|                        self.error(errors, "TOKEN is not a valid subject or graph name")
  191|       |                    }
  192|       |                }
  193|   296k|                TriGState::WrappedGraphOrPredicateObjectList { term } => {
  194|   296k|                    if token == N3Token::Punctuation("{") && context.with_graph_name {
  195|  26.4k|                        self.cur_graph = term.into();
  196|  26.4k|                        self.stack.push(TriGState::WrappedGraph);
  197|   270k|                    } else {
  198|   270k|                        self.cur_subject.push(term.into());
  199|   270k|                        self.stack.push(TriGState::ExpectDot);
  200|   270k|                        self.stack.push(TriGState::PredicateObjectList);
  201|   270k|                    }
  202|   296k|                    self.recognize_next(token, context,results, errors)
  203|       |                }
  204|  8.60k|                TriGState::WrappedGraphBlankNodePropertyListCurrent => if token == N3Token::Punctuation("]") {
  205|  1.80k|                    self.stack.push(TriGState::WrappedGraphOrPredicateObjectList {
  206|  1.80k|                        term: BlankNode::default().into()
  207|  1.80k|                    });
  208|  1.80k|                    self
  209|       |                } else {
  210|  6.79k|                    self.cur_subject.push(BlankNode::default().into());
  211|  6.79k|                    self.stack.push(TriGState::ExpectDot);
  212|  6.79k|                    self.stack.push(TriGState::SubjectBlankNodePropertyListEnd);
  213|  6.79k|                    self.stack.push(TriGState::PredicateObjectList);
  214|  6.79k|                    self.recognize_next(token, context,results, errors)
  215|       |                }
  216|  3.15k|                TriGState::SubjectBlankNodePropertyListEnd => if token == N3Token::Punctuation("]") {
  217|    766|                    self.stack.push(TriGState::SubjectBlankNodePropertyListAfter  );
  218|    766|                    self
  219|       |                } else {
  220|  2.39k|                    errors.push("blank node property lists should end with a ']'".into());
  221|  2.39k|                    self.stack.push(TriGState::SubjectBlankNodePropertyListAfter );
  222|  2.39k|                    self.recognize_next(token, context,results, errors)
  223|       |                }
  224|  3.14k|                TriGState::SubjectBlankNodePropertyListAfter => if matches!(token, N3Token::Punctuation("." | "}")) {
  225|  1.10k|                    self.recognize_next(token, context,results, errors)
  226|       |                } else {
  227|  2.04k|                    self.stack.push(TriGState::PredicateObjectList);
  228|  2.04k|                    self.recognize_next(token, context,results, errors)
  229|       |                }
  230|       |                TriGState::SubjectCollectionBeginning => {
  231|  51.6k|                    if let N3Token::Punctuation(")") = token {
  232|    267|                        self.cur_subject.push(rdf::NIL.into());
  233|    267|                        self
  234|       |                    } else {
  235|  51.3k|                        let root = BlankNode::default();
  236|  51.3k|                        self.cur_subject.push(root.clone().into());
  237|  51.3k|                        self.cur_subject.push(root.into());
  238|  51.3k|                        self.cur_predicate.push(rdf::FIRST.into());
  239|  51.3k|                        self.stack.push(TriGState::SubjectCollectionPossibleEnd);
  240|  51.3k|                        self.stack.push(TriGState::Object);
  241|  51.3k|                        self.recognize_next(token, context,results, errors)
  242|       |                    }
  243|       |                },
  244|       |                TriGState::SubjectCollectionPossibleEnd => {
  245|  17.0k|                    let old = self.cur_subject.pop().unwrap();
  246|  17.0k|                    self.cur_object.pop();
  247|  17.0k|                    if let N3Token::Punctuation(")") = token {
  248|    615|                        self.cur_predicate.pop();
  249|    615|                        results.push(Quad::new(
  250|    615|                            old,
  251|    615|                            rdf::REST,
  252|    615|                            rdf::NIL,
  253|    615|                            self.cur_graph.clone()
  254|    615|                        ));
  255|    615|                        self
  256|       |                    } else {
  257|  16.4k|                        let new = BlankNode::default();
  258|  16.4k|                        results.push(Quad::new(
  259|  16.4k|                            old,
  260|  16.4k|                            rdf::REST,
  261|  16.4k|                            new.clone(),
  262|  16.4k|                            self.cur_graph.clone()
  263|  16.4k|                        ));
  264|  16.4k|                        self.cur_subject.push(new.into());
  265|  16.4k|                        self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  266|  16.4k|                        self.stack.push(TriGState::Object);
  267|  16.4k|                        self.recognize_next(token, context,results, errors)
  268|       |                    }
  269|       |                }
  270|       |                // [5g]  wrappedGraph  ::=  '{' triplesBlock? '}'
  271|       |                // [6g]  triplesBlock  ::=  triples ('.' triplesBlock?)?
  272|  35.2k|                TriGState::WrappedGraph => if token == N3Token::Punctuation("{") {
  273|  35.2k|                    self.stack.push(TriGState::WrappedGraphPossibleEnd);
  274|  35.2k|                    self.stack.push(TriGState::Triples);
  275|  35.2k|                    self
  276|       |                } else {
  277|      0|                    self.error(errors, "The GRAPH keyword should be followed by a graph name and a value in '{'")
  278|       |                },
  279|       |                TriGState::WrappedGraphPossibleEnd => {
  280|  34.5k|                    self.cur_subject.pop();
  281|  34.5k|                    match token {
  282|  27.7k|                        N3Token::Punctuation("}") => {
  283|  4.84k|                            self
  284|       |                        }
  285|  22.8k|                        N3Token::Punctuation(".") => {
  286|  21.7k|                            self.stack.push(TriGState::WrappedGraphPossibleEnd);
  287|  21.7k|                            self.stack.push(TriGState::Triples);
  288|  21.7k|                            self
  289|       |                        }
  290|       |                       _ => {
  291|  7.91k|                            errors.push("A '}' or a '.' is expected at the end of a graph block".into());
  292|  7.91k|                            self.recognize_next(token, context,results, errors)
  293|       |                        }
  294|       |                    }
  295|       |                }
  296|       |                // [6]  triples   ::=  subject predicateObjectList | blankNodePropertyList predicateObjectList?
  297|       |                // [10]  subject  ::=  iri | BlankNode | collection | quotedTriple
  298|    810|                TriGState::Triples => match token {
  299|  20.0k|                    N3Token::Punctuation("}") => {
  300|  4.84k|                        self.recognize_next(token, context,results, errors) // Early end
  301|       |                    },
  302|  15.1k|                    N3Token::Punctuation("[") => {
  303|    379|                        self.cur_subject.push(BlankNode::default().into());
  304|    379|                        self.stack.push(TriGState::TriplesBlankNodePropertyListCurrent);
  305|    379|                        self
  306|       |                    }
  307|  14.1k|                    N3Token::IriRef(iri) => {
  308|  14.1k|                        self.cur_subject.push(NamedNode::new_unchecked(iri).into());
  309|  14.1k|                        self.stack.push(TriGState::PredicateObjectList);
  310|  14.1k|                        self
  311|       |                    }
  312|    907|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  313|    413|                        Ok(t) => {
  314|    413|                            self.cur_subject.push(t.into());
  315|    413|                            self.stack.push(TriGState::PredicateObjectList);
  316|    413|                            self
  317|       |                        },
  318|    494|                        Err(e) => self.error(errors, e)
  319|       |                    }
  320|  18.6k|                    N3Token::BlankNodeLabel(label) => {
  321|  18.6k|                        self.cur_subject.push(BlankNode::new_unchecked(label).into());
  322|  18.6k|                        self.stack.push(TriGState::PredicateObjectList);
  323|  18.6k|                        self
  324|       |                    }
  325|  14.7k|                    N3Token::Punctuation("(") => {
  326|  11.6k|                        self.stack.push(TriGState::PredicateObjectList);
  327|  11.6k|                        self.stack.push(TriGState::SubjectCollectionBeginning);
  328|  11.6k|                        self
  329|       |                    }
  330|       |                    #[cfg(feature = "rdf-star")]
  331|  3.13k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  332|    810|                        self.stack.push(TriGState::PredicateObjectList);
  333|    810|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  334|    810|                        self.stack.push(TriGState::QuotedObject);
  335|    810|                        self.stack.push(TriGState::Verb);
  336|    810|                        self.stack.push(TriGState::QuotedSubject);
  337|    810|                        self
  338|       |                    }
  339|       |                   _ => {
  340|  3.14k|                        self.error(errors, "TOKEN is not a valid RDF subject")
  341|       |                    }
  342|       |                },
  343|    364|                TriGState::TriplesBlankNodePropertyListCurrent => if token == N3Token::Punctuation("]") {
  344|    204|                    self.stack.push(TriGState::PredicateObjectList);
  345|    204|                    self
  346|       |                } else {
  347|    160|                    self.stack.push(TriGState::SubjectBlankNodePropertyListEnd);
  348|    160|                    self.stack.push(TriGState::PredicateObjectList);
  349|    160|                    self.recognize_next(token, context,results, errors)
  350|       |                }
  351|       |                // [7g]  labelOrSubject  ::=  iri | BlankNode
  352|      0|                TriGState::GraphName => match token {
  353|      0|                    N3Token::IriRef(iri) => {
  354|      0|                        self.cur_graph = NamedNode::new_unchecked(iri).into();
  355|      0|                        self
  356|       |                    }
  357|      0|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  358|      0|                        Ok(t) => {
  359|      0|                            self.cur_graph = t.into();
  360|      0|                            self
  361|       |                        },
  362|      0|                        Err(e) => self.error(errors, e)
  363|       |                    }
  364|      0|                    N3Token::BlankNodeLabel(label) => {
  365|      0|                        self.cur_graph = BlankNode::new_unchecked(label).into();
  366|      0|                        self
  367|       |                    }
  368|      0|                    N3Token::Punctuation("[") => {
  369|      0|                        self.stack.push(TriGState::GraphNameAnonEnd);
  370|      0|                        self
  371|       |                    }
  372|       |                   _ => {
  373|      0|                        self.error(errors, "TOKEN is not a valid graph name")
  374|       |                    }
  375|       |                }
  376|      0|                TriGState::GraphNameAnonEnd => if token == N3Token::Punctuation("]") {
  377|      0|                    self.cur_graph = BlankNode::default().into();
  378|      0|                    self
  379|       |                } else {
  380|      0|                    self.error(errors, "Anonymous blank node with a property list are not allowed as graph name")
  381|       |                }
  382|       |                // [7]  predicateObjectList  ::=  verb objectList (';' (verb objectList)?)*
  383|       |                TriGState::PredicateObjectList => {
  384|   470k|                    self.stack.push(TriGState::PredicateObjectListEnd);
  385|   470k|                    self.stack.push(TriGState::ObjectsList);
  386|   470k|                    self.stack.push(TriGState::Verb);
  387|   470k|                    self.recognize_next(token, context,results, errors)
  388|       |                },
  389|       |                TriGState::PredicateObjectListEnd => {
  390|   312k|                    self.cur_predicate.pop();
  391|   312k|                    if token == N3Token::Punctuation(";") {
  392|  16.7k|                        self.stack.push(TriGState::PredicateObjectListPossibleContinuation);
  393|  16.7k|                        self
  394|       |                    } else {
  395|   295k|                        self.recognize_next(token, context,results, errors)
  396|       |                    }
  397|       |                },
  398|  19.7k|                TriGState::PredicateObjectListPossibleContinuation => if token == N3Token::Punctuation(";") {
  399|  2.97k|                    self.stack.push(TriGState::PredicateObjectListPossibleContinuation);
  400|  2.97k|                    self
  401|  16.7k|                } else if matches!(token, N3Token::Punctuation("." | "}" | "]")) {
  402|    337|                    self.recognize_next(token, context,results, errors)
  403|       |                } else {
  404|  16.4k|                    self.stack.push(TriGState::PredicateObjectListEnd);
  405|  16.4k|                    self.stack.push(TriGState::ObjectsList);
  406|  16.4k|                    self.stack.push(TriGState::Verb);
  407|  16.4k|                    self.recognize_next(token, context,results, errors)
  408|       |                },
  409|       |                // [8]   objectList  ::=  object annotation? ( ',' object annotation? )*
  410|       |                // [30t] annotation  ::=  '{|' predicateObjectList '|}'
  411|       |                TriGState::ObjectsList => {
  412|   464k|                    self.stack.push(TriGState::ObjectsListEnd);
  413|   464k|                    self.stack.push(TriGState::Object);
  414|   464k|                    self.recognize_next(token, context,results, errors)
  415|       |                }
  416|       |                TriGState::ObjectsListEnd => {
  417|   474k|                    match token {
  418|   399k|                        N3Token::Punctuation(",") => {
  419|  41.4k|                            self.cur_object.pop();
  420|  41.4k|                            self.stack.push(TriGState::ObjectsListEnd);
  421|  41.4k|                            self.stack.push(TriGState::Object);
  422|  41.4k|                            self
  423|       |                        },
  424|       |                        #[cfg(feature = "rdf-star")]
  425|   357k|                        N3Token::Punctuation("{|") => {
  426|   121k|                            let triple = Triple::new(
  427|   121k|                                self.cur_subject.last().unwrap().clone(),
  428|   121k|                                self.cur_predicate.last().unwrap().clone(),
  429|   121k|                                self.cur_object.pop().unwrap()
  430|   121k|                            );
  431|   121k|                            self.cur_subject.push(triple.into());
  432|   121k|                            self.stack.push(TriGState::AnnotationEnd);
  433|   121k|                            self.stack.push(TriGState::PredicateObjectList);
  434|   121k|                            self
  435|       |                        }
  436|       |                       _ => {
  437|   312k|                            self.cur_object.pop();
  438|   312k|                            self.recognize_next(token, context,results, errors)
  439|       |                        }
  440|       |                    }
  441|       |                },
  442|       |                #[cfg(feature = "rdf-star")]
  443|       |                TriGState::AnnotationEnd => {
  444|  28.7k|                    self.cur_subject.pop();
  445|  28.7k|                    self.stack.push(TriGState::ObjectsListAfterAnnotation);
  446|  28.7k|                    if token == N3Token::Punctuation("|}") {
  447|      6|                        self
  448|       |                    } else {
  449|  28.7k|                        self.error(errors, "Annotations should end with '|}'")
  450|       |                    }
  451|       |                },
  452|       |                #[cfg(feature = "rdf-star")]
  453|      3|                TriGState::ObjectsListAfterAnnotation => if token == N3Token::Punctuation(",") {
  454|      0|                    self.stack.push(TriGState::ObjectsListEnd);
  455|      0|                    self.stack.push(TriGState::Object);
  456|      0|                    self
  457|       |                } else {
  458|      3|                    self.recognize_next(token, context,results, errors)
  459|       |                },
  460|       |                // [9]   verb       ::=  predicate | 'a'
  461|       |                // [11]  predicate  ::=  iri
  462|   617k|                TriGState::Verb => match token {
  463|  11.1k|                    N3Token::PlainKeyword("a") => {
  464|  7.27k|                        self.cur_predicate.push(rdf::TYPE.into());
  465|  7.27k|                        self
  466|       |                    }
  467|   579k|                    N3Token::IriRef(iri) => {
  468|   579k|                        self.cur_predicate.push(NamedNode::new_unchecked(iri));
  469|   579k|                        self
  470|       |                    }
  471|  10.8k|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  472|  10.0k|                        Ok(t) => {
  473|  10.0k|                            self.cur_predicate.push(t);
  474|  10.0k|                            self
  475|       |                        },
  476|    731|                        Err(e) => self.error(errors, e)
  477|       |                    }
  478|       |                   _ => {
  479|  20.2k|                        self.error(errors, "TOKEN is not a valid predicate")
  480|       |                    }
  481|       |                }
  482|       |                // [12]    object                 ::=  iri | BlankNode | collection | blankNodePropertyList | literal | quotedTriple
  483|       |                // [13]    literal                ::=  RDFLiteral | NumericLiteral | BooleanLiteral
  484|       |                // [14]    blank                  ::=  BlankNode | collection
  485|       |                // [15]    blankNodePropertyList  ::=  '[' predicateObjectList ']'
  486|       |                // [16]    collection             ::=  '(' object* ')'
  487|       |                // [17]    NumericLiteral         ::=  INTEGER | DECIMAL | DOUBLE
  488|       |                // [128s]  RDFLiteral             ::=  String (LANGTAG | '^^' iri)?
  489|       |                // [133s]  BooleanLiteral         ::=  'true' | 'false'
  490|       |                // [18]    String                 ::=  STRING_LITERAL_QUOTE | STRING_LITERAL_SINGLE_QUOTE | STRING_LITERAL_LONG_SINGLE_QUOTE | STRING_LITERAL_LONG_QUOTE
  491|       |                // [135s]  iri                    ::=  IRIREF | PrefixedName
  492|       |                // [136s]  PrefixedName           ::=  PNAME_LN | PNAME_NS
  493|       |                // [137s]  BlankNode              ::=  BLANK_NODE_LABEL | ANON
  494|  16.3k|                TriGState::Object => match token {
  495|  68.2k|                    N3Token::IriRef(iri) => {
  496|  68.2k|                        self.cur_object.push(NamedNode::new_unchecked(iri).into());
  497|  68.2k|                        self.emit_quad(results);
  498|  68.2k|                        self
  499|       |                    }
  500|  4.74k|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  501|  2.82k|                        Ok(t) => {
  502|  2.82k|                            self.cur_object.push(t.into());
  503|  2.82k|                            self.emit_quad(results);
  504|  2.82k|                            self
  505|       |                        },
  506|  1.91k|                        Err(e) => self.error(errors, e)
  507|       |                    }
  508|  96.1k|                    N3Token::BlankNodeLabel(label) => {
  509|  96.1k|                        self.cur_object.push(BlankNode::new_unchecked(label).into());
  510|  96.1k|                        self.emit_quad(results);
  511|  96.1k|                        self
  512|       |                    }
  513|   240k|                    N3Token::Punctuation("[") => {
  514|  2.59k|                        self.stack.push(TriGState::ObjectBlankNodePropertyListCurrent);
  515|  2.59k|                        self
  516|       |                    }
  517|   238k|                    N3Token::Punctuation("(") => {
  518|   211k|                        self.stack.push(TriGState::ObjectCollectionBeginning);
  519|   211k|                        self
  520|       |                    }
  521|  29.6k|                    N3Token::String(value) => {
  522|  29.6k|                        self.stack.push(TriGState::LiteralPossibleSuffix { value, emit: true });
  523|  29.6k|                        self
  524|       |                    }
  525|   156k|                    N3Token::Integer(v) => {
  526|   156k|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::INTEGER).into());
  527|   156k|                        self.emit_quad(results);
  528|   156k|                        self
  529|       |                    }
  530|  7.23k|                    N3Token::Decimal(v) => {
  531|  7.23k|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
  532|  7.23k|                        self.emit_quad(results);
  533|  7.23k|                        self
  534|       |                    }
  535|   202k|                    N3Token::Double(v) => {
  536|   202k|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
  537|   202k|                        self.emit_quad(results);
  538|   202k|                        self
  539|       |                    }
  540|  5.93k|                    N3Token::PlainKeyword("true") => {
  541|    704|                        self.cur_object.push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
  542|    704|                        self.emit_quad(results);
  543|    704|                        self
  544|       |                    }
  545|  5.23k|                    N3Token::PlainKeyword("false") => {
  546|    284|                        self.cur_object.push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
  547|    284|                        self.emit_quad(results);
  548|    284|                        self
  549|       |                    }
  550|       |                    #[cfg(feature = "rdf-star")]
  551|  27.2k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  552|  16.3k|                        self.stack.push(TriGState::ObjectQuotedTripleEnd { emit: true });
  553|  16.3k|                        self.stack.push(TriGState::QuotedObject);
  554|  16.3k|                        self.stack.push(TriGState::Verb);
  555|  16.3k|                        self.stack.push(TriGState::QuotedSubject);
  556|  16.3k|                        self
  557|       |                    }
  558|       |                   _ => {
  559|  16.0k|                        self.error(errors, "TOKEN is not a valid RDF object")
  560|       |                    }
  561|       |
  562|       |                }
  563|  2.53k|                TriGState::ObjectBlankNodePropertyListCurrent => if token == N3Token::Punctuation("]") {
  564|    970|                    self.cur_object.push(BlankNode::default().into());
  565|    970|                    self.emit_quad(results);
  566|    970|                    self
  567|       |                } else {
  568|  1.56k|                    self.cur_subject.push(BlankNode::default().into());
  569|  1.56k|                    self.stack.push(TriGState::ObjectBlankNodePropertyListEnd);
  570|  1.56k|                    self.stack.push(TriGState::PredicateObjectList);
  571|  1.56k|                    self.recognize_next(token, context,results, errors)
  572|       |                }
  573|    423|                TriGState::ObjectBlankNodePropertyListEnd => if token == N3Token::Punctuation("]") {
  574|    258|                    self.cur_object.push(self.cur_subject.pop().unwrap().into());
  575|    258|                    self.emit_quad(results);
  576|    258|                    self
  577|       |                } else {
  578|    165|                    self.error(errors, "blank node property lists should end with a ']'")
  579|       |                }
  580|   207k|                TriGState::ObjectCollectionBeginning => if let  N3Token::Punctuation(")") = token {
  581|  3.14k|                    self.cur_object.push(rdf::NIL.into());
  582|  3.14k|                    self.emit_quad(results);
  583|  3.14k|                    self
  584|       |                } else {
  585|   204k|                    let root = BlankNode::default();
  586|   204k|                    self.cur_object.push(root.clone().into());
  587|   204k|                    self.emit_quad(results);
  588|   204k|                    self.cur_subject.push(root.into());
  589|   204k|                    self.cur_predicate.push(rdf::FIRST.into());
  590|   204k|                    self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  591|   204k|                    self.stack.push(TriGState::Object);
  592|   204k|                    self.recognize_next(token, context,results, errors)
  593|       |                },
  594|       |                TriGState::ObjectCollectionPossibleEnd => {
  595|  42.0k|                    let old = self.cur_subject.pop().unwrap();
  596|  42.0k|                    self.cur_object.pop();
  597|  42.0k|                    if let N3Token::Punctuation(")") = token {
  598|  8.36k|                        self.cur_predicate.pop();
  599|  8.36k|                        results.push(Quad::new(old,
  600|  8.36k|                                               rdf::REST,
  601|  8.36k|                                               rdf::NIL,
  602|  8.36k|                                               self.cur_graph.clone()
  603|  8.36k|                        ));
  604|  8.36k|                        self
  605|       |                    }else {
  606|  33.6k|                        let new = BlankNode::default();
  607|  33.6k|                        results.push(Quad::new(old,
  608|  33.6k|                                               rdf::REST,
  609|  33.6k|                                               new.clone(),
  610|  33.6k|                                               self.cur_graph.clone()
  611|  33.6k|                        ));
  612|  33.6k|                        self.cur_subject.push(new.into());
  613|  33.6k|                        self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  614|  33.6k|                        self.stack.push(TriGState::Object);
  615|  33.6k|                        self.recognize_next(token, context,results, errors)
  616|       |                    }
  617|       |                }
  618|  29.1k|                TriGState::LiteralPossibleSuffix { value, emit } => {
  619|  29.1k|                    match token {
  620|  5.44k|                        N3Token::LangTag(lang) => {
  621|  5.44k|                            self.cur_object.push(Literal::new_language_tagged_literal_unchecked(value, lang.to_ascii_lowercase()).into());
  622|  5.44k|                            if emit {
  623|  5.40k|                                self.emit_quad(results);
  624|  5.40k|                            }
  625|  5.44k|                            self
  626|       |                        },
  627|  14.5k|                        N3Token::Punctuation("^^") => {
  628|  2.02k|                            self.stack.push(TriGState::LiteralExpectDatatype { value, emit });
  629|  2.02k|                            self
  630|       |                        }
  631|       |                        _ => {
  632|  21.7k|                            self.cur_object.push(Literal::new_simple_literal(value).into());
  633|  21.7k|                            if emit {
  634|  21.0k|                                self.emit_quad(results);
  635|  21.0k|                            }
  636|  21.7k|                            self.recognize_next(token, context,results, errors)
  637|       |                        }
  638|       |                    }
  639|       |                }
  640|  1.87k|                TriGState::LiteralExpectDatatype { value, emit } => {
  641|  1.87k|                    match token {
  642|    907|                        N3Token::IriRef(datatype) => {
  643|    907|                            self.cur_object.push(Literal::new_typed_literal(value, NamedNode::new_unchecked(datatype)).into());
  644|    907|                            if emit {
  645|    907|                                self.emit_quad(results);
  646|    907|                            }
  647|    907|                            self
  648|       |                        },
  649|    822|                        N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  650|    652|                            Ok(t) => {
  651|    652|                                self.cur_object.push(Literal::new_typed_literal(value, t).into());
  652|    652|                                if emit {
  653|    652|                                    self.emit_quad(results);
  654|    652|                                }
  655|    652|                                self
  656|       |                            },
  657|    170|                            Err(e) => self.error(errors, e)
  658|       |                        }
  659|       |                        _ => {
  660|    142|                            self.error(errors, "Expecting a datatype IRI after ^^, found TOKEN").recognize_next(token, context, results, errors)
  661|       |                        }
  662|       |                    }
  663|       |                }
  664|       |                // [27t]  quotedTriple  ::=  '<<' qtSubject verb qtObject '>>'
  665|       |                #[cfg(feature = "rdf-star")]
  666|       |                TriGState::SubjectQuotedTripleEnd => {
  667|   110k|                    let triple = Triple::new(
  668|   110k|                        self.cur_subject.pop().unwrap(),
  669|   110k|                        self.cur_predicate.pop().unwrap(),
  670|   110k|                        self.cur_object.pop().unwrap()
  671|   110k|                    );
  672|   110k|                    self.cur_subject.push(triple.into());
  673|   110k|                    if token == N3Token::Punctuation(">>") {
  674|   109k|                        self
  675|       |                    } else {
  676|  1.88k|                        self.error(errors, "Expecting '>>' to close a quoted triple, found TOKEN")
  677|       |                    }
  678|       |                }
  679|       |                #[cfg(feature = "rdf-star")]
  680|  13.6k|                TriGState::ObjectQuotedTripleEnd { emit } => {
  681|  13.6k|                    let triple = Triple::new(
  682|  13.6k|                        self.cur_subject.pop().unwrap(),
  683|  13.6k|                        self.cur_predicate.pop().unwrap(),
  684|  13.6k|                        self.cur_object.pop().unwrap()
  685|  13.6k|                    );
  686|  13.6k|                    self.cur_object.push(triple.into());
  687|  13.6k|                    if emit {
  688|  12.9k|                        self.emit_quad(results);
  689|  12.9k|                    }
  690|  13.6k|                    if token == N3Token::Punctuation(">>") {
  691|  3.83k|                        self
  692|       |                    } else {
  693|  9.83k|                        self.error(errors, "Expecting '>>' to close a quoted triple, found TOKEN")
  694|       |                    }
  695|       |                }
  696|       |                // [28t]  qtSubject  ::=  iri | BlankNode | quotedTriple
  697|       |                #[cfg(feature = "rdf-star")]
  698|   157k|                TriGState::QuotedSubject => match token {
  699|  94.2k|                    N3Token::Punctuation("[") => {
  700|    435|                        self.cur_subject.push(BlankNode::default().into());
  701|    435|                        self.stack.push(TriGState::QuotedAnonEnd);
  702|    435|                        self
  703|       |                    }
  704|  57.9k|                    N3Token::IriRef(iri) => {
  705|  57.9k|                        self.cur_subject.push(NamedNode::new_unchecked(iri).into());
  706|  57.9k|                        self
  707|       |                    }
  708|  1.36k|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  709|    968|                        Ok(t) => {
  710|    968|                            self.cur_subject.push(t.into());
  711|    968|                            self
  712|       |                        },
  713|    398|                        Err(e) => self.error(errors, e)
  714|       |                    }
  715|  2.44k|                    N3Token::BlankNodeLabel(label) => {
  716|  2.44k|                        self.cur_subject.push(BlankNode::new_unchecked(label).into());
  717|  2.44k|                        self
  718|       |                    }
  719|  93.8k|                    N3Token::Punctuation("<<") => {
  720|  92.8k|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  721|  92.8k|                        self.stack.push(TriGState::QuotedObject);
  722|  92.8k|                        self.stack.push(TriGState::Verb);
  723|  92.8k|                        self.stack.push(TriGState::QuotedSubject);
  724|  92.8k|                        self
  725|       |                    }
  726|  1.92k|                    _ => self.error(errors, "TOKEN is not a valid RDF quoted triple subject: TOKEN")
  727|       |                }
  728|       |                // [29t]  qtObject  ::=  iri | BlankNode | literal | quotedTriple
  729|       |                #[cfg(feature = "rdf-star")]
  730|   128k|                TriGState::QuotedObject => match token {
  731|  2.77k|                    N3Token::Punctuation("[") => {
  732|    185|                        self.cur_object.push(BlankNode::default().into());
  733|    185|                        self.stack.push(TriGState::QuotedAnonEnd);
  734|    185|                        self
  735|       |                    }
  736|  4.55k|                    N3Token::IriRef(iri) => {
  737|  4.55k|                        self.cur_object.push(NamedNode::new_unchecked(iri).into());
  738|  4.55k|                        self
  739|       |                    }
  740|    189|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  741|     53|                        Ok(t) => {
  742|     53|                            self.cur_object.push(t.into());
  743|     53|                            self
  744|       |                        },
  745|    136|                        Err(e) => self.error(errors, e)
  746|       |                    }
  747|  4.22k|                    N3Token::BlankNodeLabel(label) => {
  748|  4.22k|                        self.cur_object.push(BlankNode::new_unchecked(label).into());
  749|  4.22k|                        self
  750|       |                    }
  751|    734|                    N3Token::String(value) => {
  752|    734|                        self.stack.push(TriGState::LiteralPossibleSuffix { value, emit: false });
  753|    734|                        self
  754|       |                    }
  755|  6.42k|                    N3Token::Integer(v) => {
  756|  6.42k|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::INTEGER).into());
  757|  6.42k|                        self
  758|       |                    }
  759|    163|                    N3Token::Decimal(v) => {
  760|    163|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
  761|    163|                        self
  762|       |                    }
  763|   108k|                    N3Token::Double(v) => {
  764|   108k|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
  765|   108k|                        self
  766|       |                    }
  767|    481|                    N3Token::PlainKeyword("true") => {
  768|     36|                        self.cur_object.push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
  769|     36|                        self
  770|       |                    }
  771|    445|                    N3Token::PlainKeyword("false") => {
  772|    182|                        self.cur_object.push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
  773|    182|                        self
  774|       |                    }
  775|  2.59k|                    N3Token::Punctuation("<<") => {
  776|  2.15k|                        self.stack.push(TriGState::ObjectQuotedTripleEnd { emit: false });
  777|  2.15k|                        self.stack.push(TriGState::QuotedObject);
  778|  2.15k|                        self.stack.push(TriGState::Verb);
  779|  2.15k|                        self.stack.push(TriGState::QuotedSubject);
  780|  2.15k|                        self
  781|       |                    }
  782|  1.20k|                    _ => self.error(errors, "TOKEN is not a valid RDF quoted triple object")
  783|       |                }
  784|       |                #[cfg(feature = "rdf-star")]
  785|    569|                TriGState::QuotedAnonEnd => if token == N3Token::Punctuation("]") {
  786|    393|                    self
  787|       |                } else {
  788|    176|                    self.error(errors, "Anonymous blank node with a property list are not allowed in quoted triples")
  789|       |                }
  790|       |            }
  791|  2.40M|        } else if token == N3Token::Punctuation(".") || token == N3Token::Punctuation("}") {
  792|       |            // TODO: be smarter depending if we are in '{' or not
  793|   541k|            self.stack.push(TriGState::TriGDoc);
  794|   541k|            self
  795|       |        } else {
  796|  1.86M|            self
  797|       |        }
  798|  8.55M|    }
_RNvXs_NtCseXCYVcIQZ7o_5oxttl5terseNtB4_14TriGRecognizerNtNtNtB6_7toolkit6parser14RuleRecognizer13recognize_end:
  800|  42.8k|    fn recognize_end(
  801|  42.8k|        mut self,
  802|  42.8k|        _context: &mut TriGRecognizerContext,
  803|  42.8k|        results: &mut Vec<Self::Output>,
  804|  42.8k|        errors: &mut Vec<RuleRecognizerError>,
  805|  42.8k|    ) {
  806|  42.8k|        match &*self.stack {
  807|  42.8k|            [] | [TriGState::TriGDoc] => {
  808|  41.3k|                debug_assert!(
  809|      0|                    self.cur_subject.is_empty(),
  810|      0|                    "The cur_subject stack must be empty if the state stack is empty"
  811|       |                );
  812|  41.3k|                debug_assert!(
  813|      0|                    self.cur_predicate.is_empty(),
  814|      0|                    "The cur_predicate stack must be empty if the state stack is empty"
  815|       |                );
  816|  41.3k|                debug_assert!(
  817|      0|                    self.cur_object.is_empty(),
  818|      0|                    "The cur_object stack must be empty if the state stack is empty"
  819|       |                );
  820|       |            }
  821|    232|            [.., TriGState::LiteralPossibleSuffix { value, emit: true }] => {
  822|    232|                self.cur_object
  823|    232|                    .push(Literal::new_simple_literal(value).into());
  824|    232|                self.emit_quad(results);
  825|    232|                errors.push("Triples should be followed by a dot".into())
  826|       |            }
  827|  1.33k|            _ => errors.push("Unexpected end".into()), // TODO
  828|       |        }
  829|  42.8k|    }
_RNvXs_NtCseXCYVcIQZ7o_5oxttl5terseNtB4_14TriGRecognizerNtNtNtB6_7toolkit6parser14RuleRecognizer13lexer_options:
  831|  12.1M|    fn lexer_options(context: &TriGRecognizerContext) -> &N3LexerOptions {
  832|  12.1M|        &context.lexer_options
  833|  12.1M|    }
_RNvMs0_NtCseXCYVcIQZ7o_5oxttl5terseNtB5_14TriGRecognizer10new_parser:
  837|  42.8k|    pub fn new_parser(
  838|  42.8k|        with_graph_name: bool,
  839|  42.8k|        #[cfg(feature = "rdf-star")] with_quoted_triples: bool,
  840|  42.8k|        unchecked: bool,
  841|  42.8k|        base_iri: Option<Iri<String>>,
  842|  42.8k|        prefixes: HashMap<String, Iri<String>>,
  843|  42.8k|    ) -> Parser<Self> {
  844|  42.8k|        Parser::new(
  845|  42.8k|            Lexer::new(
  846|  42.8k|                N3Lexer::new(N3LexerMode::Turtle, unchecked),
  847|  42.8k|                MIN_BUFFER_SIZE,
  848|  42.8k|                MAX_BUFFER_SIZE,
  849|  42.8k|                true,
  850|  42.8k|                Some(b"#"),
  851|  42.8k|            ),
  852|  42.8k|            Self {
  853|  42.8k|                stack: vec![TriGState::TriGDoc],
  854|  42.8k|                cur_subject: Vec::new(),
  855|  42.8k|                cur_predicate: Vec::new(),
  856|  42.8k|                cur_object: Vec::new(),
  857|  42.8k|                cur_graph: GraphName::DefaultGraph,
  858|  42.8k|            },
  859|  42.8k|            TriGRecognizerContext {
  860|  42.8k|                with_graph_name,
  861|  42.8k|                #[cfg(feature = "rdf-star")]
  862|  42.8k|                with_quoted_triples,
  863|  42.8k|                prefixes,
  864|  42.8k|                lexer_options: N3LexerOptions { base_iri },
  865|  42.8k|            },
  866|  42.8k|        )
  867|  42.8k|    }
_RNvMs0_NtCseXCYVcIQZ7o_5oxttl5terseNtB5_14TriGRecognizer9emit_quad:
  884|   784k|    fn emit_quad(&mut self, results: &mut Vec<Quad>) {
  885|   784k|        results.push(Quad::new(
  886|   784k|            self.cur_subject.last().unwrap().clone(),
  887|   784k|            self.cur_predicate.last().unwrap().clone(),
  888|   784k|            self.cur_object.last().unwrap().clone(),
  889|   784k|            self.cur_graph.clone(),
  890|   784k|        ));
  891|   784k|    }
_RINvMs0_NtCseXCYVcIQZ7o_5oxttl5terseNtB6_14TriGRecognizer5errorNtNtCs80BIJ2NAVqC_5alloc6string6StringEB8_:
  870|  31.6k|    fn error(
  871|  31.6k|        mut self,
  872|  31.6k|        errors: &mut Vec<RuleRecognizerError>,
  873|  31.6k|        msg: impl Into<RuleRecognizerError>,
  874|  31.6k|    ) -> Self {
  875|  31.6k|        errors.push(msg.into());
  876|  31.6k|        self.stack.clear();
  877|  31.6k|        self.cur_subject.clear();
  878|  31.6k|        self.cur_predicate.clear();
  879|  31.6k|        self.cur_object.clear();
  880|  31.6k|        self.cur_graph = GraphName::DefaultGraph;
  881|  31.6k|        self
  882|  31.6k|    }
_RINvMs0_NtCseXCYVcIQZ7o_5oxttl5terseNtB6_14TriGRecognizer5errorReEB8_:
  870|   335k|    fn error(
  871|   335k|        mut self,
  872|   335k|        errors: &mut Vec<RuleRecognizerError>,
  873|   335k|        msg: impl Into<RuleRecognizerError>,
  874|   335k|    ) -> Self {
  875|   335k|        errors.push(msg.into());
  876|   335k|        self.stack.clear();
  877|   335k|        self.cur_subject.clear();
  878|   335k|        self.cur_predicate.clear();
  879|   335k|        self.cur_object.clear();
  880|   335k|        self.cur_graph = GraphName::DefaultGraph;
  881|   335k|        self
  882|   335k|    }

_RNvXs_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5errorNtB4_11SyntaxErrorNtNtCs433v4DNuM1R_4core3fmt7Display3fmtCsapuUTB8XoUj_4trig:
   38|  3.85M|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   39|  3.85M|        if self.location.start.offset + 1 >= self.location.end.offset {
   40|  3.35M|            write!(
   41|  3.35M|                f,
   42|  3.35M|                "Parser error at line {} column {}: {}",
   43|  3.35M|                self.location.start.line + 1,
   44|  3.35M|                self.location.start.column + 1,
   45|  3.35M|                self.message
   46|  3.35M|            )
   47|   496k|        } else if self.location.start.line == self.location.end.line {
   48|   487k|            write!(
   49|   487k|                f,
   50|   487k|                "Parser error between at line {} between columns {} and column {}: {}",
   51|   487k|                self.location.start.line + 1,
   52|   487k|                self.location.start.column + 1,
   53|   487k|                self.location.end.column + 1,
   54|   487k|                self.message
   55|   487k|            )
   56|       |        } else {
   57|  8.91k|            write!(
   58|  8.91k|                f,
   59|  8.91k|                "Parser error between line {} column {} and line {} column {}: {}",
   60|  8.91k|                self.location.start.line + 1,
   61|  8.91k|                self.location.start.column + 1,
   62|  8.91k|                self.location.end.line + 1,
   63|  8.91k|                self.location.end.column + 1,
   64|  8.91k|                self.message
   65|  8.91k|            )
   66|       |        }
   67|  3.85M|    }

_RINvMs1_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerINtB6_5LexerNtNtBa_5lexer7N3LexerE16extend_from_readRShECsapuUTB8XoUj_4trig:
  113|  30.0k|    pub fn extend_from_read(&mut self, read: &mut impl Read) -> io::Result<()> {
  114|  30.0k|        self.shrink_data();
  115|  30.0k|        if self.data.len() == self.max_buffer_size {
  116|      0|            return Err(io::Error::new(
  117|      0|                io::ErrorKind::OutOfMemory,
  118|      0|                format!(
  119|      0|                    "Reached the buffer maximal size of {}",
  120|      0|                    self.max_buffer_size
  121|      0|                ),
  122|      0|            ));
  123|  30.0k|        }
  124|  30.0k|        let min_end = min(self.data.len() + self.min_buffer_size, self.max_buffer_size);
  125|  30.0k|        let new_start = self.data.len();
  126|  30.0k|        self.data.resize(min_end, 0);
  127|  30.0k|        if self.data.len() < self.data.capacity() {
  128|  4.49k|            // We keep extending to have as much space as available without reallocation
  129|  4.49k|            self.data.resize(self.data.capacity(), 0);
  130|  25.5k|        }
  131|  30.0k|        let read = read.read(&mut self.data[new_start..])?;
  132|  30.0k|        self.data.truncate(new_start + read);
  133|  30.0k|        self.is_ending = read == 0;
  134|  30.0k|        Ok(())
  135|  30.0k|    }
_RNvXNtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCs433v4DNuM1R_4core7convert4FromTINtNtNtB1a_3ops5range5RangejENtNtCs80BIJ2NAVqC_5alloc6string6StringEE4fromB6_:
   31|  2.65M|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|  2.65M|        Self {
   33|  2.65M|            location,
   34|  2.65M|            message: message.into(),
   35|  2.65M|        }
   36|  2.65M|    }
_RNvXNtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCs433v4DNuM1R_4core7convert4FromTINtNtNtB1a_3ops5range5RangejEReEE4fromB6_:
   31|   758k|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|   758k|        Self {
   33|   758k|            location,
   34|   758k|            message: message.into(),
   35|   758k|        }
   36|   758k|    }
_RNvXs_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCs433v4DNuM1R_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejENtNtCs80BIJ2NAVqC_5alloc6string6StringEE4fromB8_:
   41|  14.0k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  14.0k|        (*location.start()..*location.end() + 1, message).into()
   43|  14.0k|    }
_RNvXs_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCs433v4DNuM1R_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejEReEE4fromB8_:
   41|   666k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|   666k|        (*location.start()..*location.end() + 1, message).into()
   43|   666k|    }
_RNvXs0_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerNtB5_20TokenRecognizerErrorINtNtCs433v4DNuM1R_4core7convert4FromTjNtNtCs80BIJ2NAVqC_5alloc6string6StringEE4fromB9_:
   47|  10.3k|    fn from((location, message): (usize, S)) -> Self {
   48|  10.3k|        (location..=location, message).into()
   49|  10.3k|    }
_RNvMs1_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3newB9_:
   73|  42.8k|    pub fn new(
   74|  42.8k|        parser: R,
   75|  42.8k|        min_buffer_size: usize,
   76|  42.8k|        max_buffer_size: usize,
   77|  42.8k|        is_line_jump_whitespace: bool,
   78|  42.8k|        line_comment_start: Option<&'static [u8]>,
   79|  42.8k|    ) -> Self {
   80|  42.8k|        Self {
   81|  42.8k|            parser,
   82|  42.8k|            data: Vec::new(),
   83|  42.8k|            position: Position {
   84|  42.8k|                line_start_buffer_offset: 0,
   85|  42.8k|                buffer_offset: 0,
   86|  42.8k|                global_offset: 0,
   87|  42.8k|                global_line: 0,
   88|  42.8k|            },
   89|  42.8k|            previous_position: Position {
   90|  42.8k|                line_start_buffer_offset: 0,
   91|  42.8k|                buffer_offset: 0,
   92|  42.8k|                global_offset: 0,
   93|  42.8k|                global_line: 0,
   94|  42.8k|            },
   95|  42.8k|            is_ending: false,
   96|  42.8k|            min_buffer_size,
   97|  42.8k|            max_buffer_size,
   98|  42.8k|            is_line_jump_whitespace,
   99|  42.8k|            line_comment_start,
  100|  42.8k|        }
  101|  42.8k|    }
_RNvMs1_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17extend_from_sliceB9_:
  103|  3.08M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  104|  3.08M|        self.shrink_data();
  105|  3.08M|        self.data.extend_from_slice(other);
  106|  3.08M|    }
_RNvMs1_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3endB9_:
  109|  32.1k|    pub fn end(&mut self) {
  110|  32.1k|        self.is_ending = true;
  111|  32.1k|    }
_RNvMs1_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE9read_nextB9_:
  166|  12.1M|    pub fn read_next(&mut self, options: &R::Options) -> Option<Result<R::Token<'_>, SyntaxError>> {
  167|  12.1M|        self.skip_whitespaces_and_comments()?;
  168|  12.1M|        self.previous_position = self.position;
  169|  12.1M|        let Some((consumed, result)) = self.parser.recognize_next_token(
  170|  12.1M|            &self.data[self.position.buffer_offset..],
  171|  12.1M|            self.is_ending,
  172|  12.1M|            options,
  173|  12.1M|        ) else {
  174|  3.17M|            return if self.is_ending {
  175|  97.3k|                if self.position.buffer_offset == self.data.len() {
  176|  85.7k|                    None // We have finished
  177|       |                } else {
  178|  11.5k|                    let (new_line_jumps, new_line_start) =
  179|  11.5k|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  180|  11.5k|                            &self.data[self.position.buffer_offset..],
  181|  11.5k|                        );
  182|  11.5k|                    if new_line_jumps > 0 {
  183|  1.52k|                        self.position.line_start_buffer_offset =
  184|  1.52k|                            self.position.buffer_offset + new_line_start;
  185|  9.99k|                    }
  186|  11.5k|                    self.position.global_offset +=
  187|  11.5k|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  188|  11.5k|                    self.position.buffer_offset = self.data.len();
  189|  11.5k|                    self.position.global_line += new_line_jumps;
  190|  11.5k|                    let new_position = TextPosition {
  191|  11.5k|                        line: self.position.global_line,
  192|  11.5k|                        column: Self::column_from_bytes(
  193|  11.5k|                            &self.data[self.position.line_start_buffer_offset..],
  194|  11.5k|                        ),
  195|  11.5k|                        offset: self.position.global_offset,
  196|  11.5k|                    };
  197|  11.5k|                    let error = SyntaxError {
  198|  11.5k|                        location: new_position..new_position,
  199|  11.5k|                        message: "Unexpected end of file".into(),
  200|  11.5k|                    };
  201|  11.5k|                    self.position.buffer_offset = self.data.len(); // We consume everything
  202|  11.5k|                    Some(Err(error))
  203|       |                }
  204|       |            } else {
  205|  3.08M|                None
  206|       |            };
  207|       |        };
  208|  8.93M|        debug_assert!(
  209|      0|            consumed > 0,
  210|      0|            "The lexer must consume at least one byte each time"
  211|       |        );
  212|  8.93M|        debug_assert!(
  213|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  214|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  215|      0|            self.data.len() - self.position.buffer_offset
  216|       |        );
  217|  8.93M|        let (new_line_jumps, new_line_start) =
  218|  8.93M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  219|  8.93M|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  220|  8.93M|            );
  221|  8.93M|        if new_line_jumps > 0 {
  222|  24.0k|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  223|  8.91M|        }
  224|  8.93M|        self.position.buffer_offset += consumed;
  225|  8.93M|        self.position.global_offset += u64::try_from(consumed).unwrap();
  226|  8.93M|        self.position.global_line += new_line_jumps;
  227|  8.93M|        Some(result.map_err(|e| SyntaxError {
  228|       |            location: self.location_from_buffer_offset_range(e.location),
  229|       |            message: e.message,
  230|  8.93M|        }))
  231|  12.1M|    }
_RNCNvMs1_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerINtB7_5LexerNtNtBb_5lexer7N3LexerE9read_next0Bb_:
  227|  3.39M|        Some(result.map_err(|e| SyntaxError {
  228|  3.39M|            location: self.location_from_buffer_offset_range(e.location),
  229|  3.39M|            message: e.message,
  230|  3.39M|        }))
_RNvMs1_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE33location_from_buffer_offset_rangeB9_:
  233|  3.39M|    pub fn location_from_buffer_offset_range(
  234|  3.39M|        &self,
  235|  3.39M|        offset_range: Range<usize>,
  236|  3.39M|    ) -> Range<TextPosition> {
  237|  3.39M|        let start_offset = self.previous_position.buffer_offset + offset_range.start;
  238|  3.39M|        let (start_extra_line_jumps, start_line_start) =
  239|  3.39M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  240|  3.39M|                &self.data[self.previous_position.buffer_offset..start_offset],
  241|  3.39M|            );
  242|  3.39M|        let start_line_start = if start_extra_line_jumps > 0 {
  243|  6.79k|            start_line_start + self.previous_position.buffer_offset
  244|       |        } else {
  245|  3.38M|            self.previous_position.line_start_buffer_offset
  246|       |        };
  247|  3.39M|        let end_offset = self.previous_position.buffer_offset + offset_range.end;
  248|  3.39M|        let (end_extra_line_jumps, end_line_start) =
  249|  3.39M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  250|  3.39M|                &self.data[self.previous_position.buffer_offset..end_offset],
  251|  3.39M|            );
  252|  3.39M|        let end_line_start = if end_extra_line_jumps > 0 {
  253|  15.6k|            end_line_start + self.previous_position.buffer_offset
  254|       |        } else {
  255|  3.38M|            self.previous_position.line_start_buffer_offset
  256|       |        };
  257|  3.39M|        TextPosition {
  258|  3.39M|            line: self.previous_position.global_line + start_extra_line_jumps,
  259|  3.39M|            column: Self::column_from_bytes(&self.data[start_line_start..start_offset]),
  260|  3.39M|            offset: self.previous_position.global_offset
  261|  3.39M|                + u64::try_from(offset_range.start).unwrap(),
  262|  3.39M|        }..TextPosition {
  263|  3.39M|            line: self.previous_position.global_line + end_extra_line_jumps,
  264|  3.39M|            column: Self::column_from_bytes(&self.data[end_line_start..end_offset]),
  265|  3.39M|            offset: self.previous_position.global_offset + u64::try_from(offset_range.end).unwrap(),
  266|  3.39M|        }
  267|  3.39M|    }
_RNvMs1_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE19last_token_locationB9_:
  269|   443k|    pub fn last_token_location(&self) -> Range<TextPosition> {
  270|   443k|        TextPosition {
  271|   443k|            line: self.previous_position.global_line,
  272|   443k|            column: Self::column_from_bytes(
  273|   443k|                &self.data[self.previous_position.line_start_buffer_offset
  274|   443k|                    ..self.previous_position.buffer_offset],
  275|   443k|            ),
  276|   443k|            offset: self.previous_position.global_offset,
  277|   443k|        }..TextPosition {
  278|   443k|            line: self.position.global_line,
  279|   443k|            column: Self::column_from_bytes(
  280|   443k|                &self.data[self.position.line_start_buffer_offset..self.position.buffer_offset],
  281|   443k|            ),
  282|   443k|            offset: self.position.global_offset,
  283|   443k|        }
  284|   443k|    }
_RNvMs1_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17last_token_sourceB9_:
  286|   443k|    pub fn last_token_source(&self) -> Cow<'_, str> {
  287|   443k|        String::from_utf8_lossy(
  288|   443k|            &self.data[self.previous_position.buffer_offset..self.position.buffer_offset],
  289|   443k|        )
  290|   443k|    }
_RNvMs1_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE6is_endB9_:
  292|  3.19M|    pub fn is_end(&self) -> bool {
  293|  3.19M|        self.is_ending && self.data.len() == self.position.buffer_offset
  294|  3.19M|    }
_RNvMs1_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  297|  12.1M|    fn skip_whitespaces_and_comments(&mut self) -> Option<()> {
  298|       |        loop {
  299|  12.1M|            self.skip_whitespaces()?;
  300|       |
  301|  12.1M|            let buf = &self.data[self.position.buffer_offset..];
  302|  12.1M|            if let Some(line_comment_start) = self.line_comment_start {
  303|  12.1M|                if buf.starts_with(line_comment_start) {
  304|       |                    // Comment
  305|  18.4k|                    if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  306|  4.06k|                        let mut end_position = line_comment_start.len() + end;
  307|  4.06k|                        if buf.get(end_position).copied() == Some(b'\r') {
  308|       |                            // We look for \n for Windows line end style
  309|  2.96k|                            if let Some(c) = buf.get(end_position + 1) {
  310|  2.11k|                                if *c == b'\n' {
  311|      0|                                    end_position += 1;
  312|  2.11k|                                }
  313|    857|                            } else if !self.is_ending {
  314|    815|                                return None; // We need to read more
  315|     42|                            }
  316|  1.09k|                        }
  317|  3.25k|                        let comment_size = end_position + 1;
  318|  3.25k|                        self.position.buffer_offset += comment_size;
  319|  3.25k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  320|  3.25k|                        self.position.global_offset += u64::try_from(comment_size).unwrap();
  321|  3.25k|                        self.position.global_line += 1;
  322|  3.25k|                        continue;
  323|  14.4k|                    }
  324|  14.4k|                    if self.is_ending {
  325|    834|                        self.position.buffer_offset = self.data.len(); // EOF
  326|    834|                        return Some(());
  327|  13.5k|                    }
  328|  13.5k|                    return None; // We need more data
  329|  12.1M|                }
  330|      0|            }
  331|  12.1M|            return Some(());
  332|       |        }
  333|  12.1M|    }
_RNvMs1_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  335|  12.1M|    fn skip_whitespaces(&mut self) -> Option<()> {
  336|  12.1M|        if self.is_line_jump_whitespace {
  337|  12.1M|            let mut i = self.position.buffer_offset;
  338|  13.5M|            while let Some(c) = self.data.get(i) {
  339|  12.2M|                match c {
  340|  1.10M|                    b' ' | b'\t' => {
  341|  1.10M|                        self.position.buffer_offset += 1;
  342|  1.10M|                        self.position.global_offset += 1;
  343|  1.10M|                    }
  344|       |                    b'\r' => {
  345|       |                        // We look for \n for Windows line end style
  346|  37.9k|                        let mut increment: u8 = 1;
  347|  37.9k|                        if let Some(c) = self.data.get(i + 1) {
  348|  27.2k|                            if *c == b'\n' {
  349|    432|                                increment += 1;
  350|    432|                                i += 1;
  351|  26.8k|                            }
  352|  10.6k|                        } else if !self.is_ending {
  353|  10.0k|                            return None; // We need to read more
  354|    595|                        }
  355|  27.8k|                        self.position.buffer_offset += usize::from(increment);
  356|  27.8k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  357|  27.8k|                        self.position.global_offset += u64::from(increment);
  358|  27.8k|                        self.position.global_line += 1;
  359|       |                    }
  360|   229k|                    b'\n' => {
  361|   229k|                        self.position.buffer_offset += 1;
  362|   229k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  363|   229k|                        self.position.global_offset += 1;
  364|   229k|                        self.position.global_line += 1;
  365|   229k|                    }
  366|  10.8M|                    _ => return Some(()),
  367|       |                }
  368|  1.36M|                i += 1;
  369|       |                // TODO: SIMD
  370|       |            }
  371|       |        } else {
  372|      0|            for c in &self.data[self.position.buffer_offset..] {
  373|      0|                if matches!(c, b' ' | b'\t') {
  374|      0|                    self.position.buffer_offset += 1;
  375|      0|                    self.position.global_offset += 1;
  376|      0|                } else {
  377|      0|                    return Some(());
  378|       |                }
  379|       |                // TODO: SIMD
  380|       |            }
  381|       |        }
  382|  1.27M|        Some(())
  383|  12.1M|    }
_RNvMs1_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE11shrink_dataB9_:
  385|  3.11M|    fn shrink_data(&mut self) {
  386|  3.11M|        if self.position.line_start_buffer_offset > 0 {
  387|  40.8k|            self.data
  388|  40.8k|                .copy_within(self.position.line_start_buffer_offset.., 0);
  389|  40.8k|            self.data
  390|  40.8k|                .truncate(self.data.len() - self.position.line_start_buffer_offset);
  391|  40.8k|            self.position.buffer_offset -= self.position.line_start_buffer_offset;
  392|  40.8k|            self.position.line_start_buffer_offset = 0;
  393|  40.8k|            self.previous_position = self.position;
  394|  3.07M|        }
  395|  3.11M|    }
_RNvMs1_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  397|  15.7M|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  398|  15.7M|        let mut num_of_jumps = 0;
  399|  15.7M|        let mut last_jump_pos = 0;
  400|  15.7M|        let mut previous_cr = 0;
  401|  15.7M|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  402|  68.0k|            if bytes[pos] == b'\r' {
  403|  9.18k|                previous_cr = pos;
  404|  9.18k|                num_of_jumps += 1;
  405|  9.18k|                last_jump_pos = pos + 1;
  406|  9.18k|            } else {
  407|  58.8k|                if previous_cr < pos - 1 {
  408|  55.1k|                    // We count \r\n as a single line jump
  409|  55.1k|                    num_of_jumps += 1;
  410|  55.1k|                }
  411|  58.8k|                last_jump_pos = pos + 1;
  412|       |            }
  413|       |        }
  414|  15.7M|        (num_of_jumps, last_jump_pos)
  415|  15.7M|    }
_RNvMs1_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17column_from_bytesB9_:
  417|  12.9M|    fn column_from_bytes(bytes: &[u8]) -> u64 {
  418|  12.9M|        match str::from_utf8(bytes) {
  419|  6.36M|            Ok(s) => u64::try_from(s.chars().count()).unwrap(),
  420|  6.59M|            Err(e) => {
  421|  6.59M|                if e.valid_up_to() == 0 {
  422|  1.32M|                    0
  423|       |                } else {
  424|  5.26M|                    Self::column_from_bytes(&bytes[..e.valid_up_to()])
  425|       |                }
  426|       |            }
  427|       |        }
  428|  12.9M|    }

_RINvMs_NtNtCseXCYVcIQZ7o_5oxttl7toolkit6parserINtB5_6ParserNtNtB9_5terse14TriGRecognizerE10parse_readRShECsapuUTB8XoUj_4trig:
  124|  10.7k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadIterator<R, RR> {
  125|  10.7k|        FromReadIterator { read, parser: self }
  126|  10.7k|    }
_RNvXs0_NtNtCseXCYVcIQZ7o_5oxttl7toolkit6parserINtB5_16FromReadIteratorRShNtNtB9_5terse14TriGRecognizerENtNtNtNtCs433v4DNuM1R_4core4iter6traits8iterator8Iterator4nextCsapuUTB8XoUj_4trig:
  146|   217k|    fn next(&mut self) -> Option<Self::Item> {
  147|   247k|        while !self.parser.is_end() {
  148|   236k|            if let Some(result) = self.parser.read_next() {
  149|   206k|                return Some(result.map_err(ParseError::Syntax));
  150|  30.0k|            }
  151|  30.0k|            if let Err(e) = self.parser.lexer.extend_from_read(&mut self.read) {
  152|      0|                return Some(Err(e.into()));
  153|  30.0k|            }
  154|       |        }
  155|  10.7k|        None
  156|   217k|    }
_RNvXNtNtCseXCYVcIQZ7o_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCs433v4DNuM1R_4core7convert4FromNtNtCs80BIJ2NAVqC_5alloc6string6StringE4fromB6_:
   39|  31.6k|    fn from(message: S) -> Self {
   40|  31.6k|        Self {
   41|  31.6k|            message: message.into(),
   42|  31.6k|        }
   43|  31.6k|    }
_RNvXNtNtCseXCYVcIQZ7o_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCs433v4DNuM1R_4core7convert4FromReE4fromB6_:
   39|   411k|    fn from(message: S) -> Self {
   40|   411k|        Self {
   41|   411k|            message: message.into(),
   42|   411k|        }
   43|   411k|    }
_RNvMs_NtNtCseXCYVcIQZ7o_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE3newB8_:
   56|  42.8k|    pub fn new(lexer: Lexer<RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   57|  42.8k|        Self {
   58|  42.8k|            lexer,
   59|  42.8k|            state: Some(recognizer),
   60|  42.8k|            context,
   61|  42.8k|            results: vec![],
   62|  42.8k|            errors: vec![],
   63|  42.8k|        }
   64|  42.8k|    }
_RNvMs_NtNtCseXCYVcIQZ7o_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE17extend_from_sliceB8_:
   66|  3.08M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
   67|  3.08M|        self.lexer.extend_from_slice(other)
   68|  3.08M|    }
_RNvMs_NtNtCseXCYVcIQZ7o_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE3endB8_:
   71|  32.1k|    pub fn end(&mut self) {
   72|  32.1k|        self.lexer.end()
   73|  32.1k|    }
_RNvMs_NtNtCseXCYVcIQZ7o_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE6is_endB8_:
   76|   279k|    pub fn is_end(&self) -> bool {
   77|   279k|        self.state.is_none() && self.results.is_empty() && self.errors.is_empty()
   78|   279k|    }
_RNvMs_NtNtCseXCYVcIQZ7o_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE9read_nextB8_:
   80|  7.84M|    pub fn read_next(&mut self) -> Option<Result<RR::Output, SyntaxError>> {
   81|       |        loop {
   82|  13.4M|            if let Some(error) = self.errors.pop() {
   83|   443k|                return Some(Err(SyntaxError {
   84|   443k|                    location: self.lexer.last_token_location(),
   85|   443k|                    message: error
   86|   443k|                        .message
   87|   443k|                        .replace("TOKEN", &self.lexer.last_token_source()),
   88|   443k|                }));
   89|  12.9M|            }
   90|  12.9M|            if let Some(result) = self.results.pop() {
   91|   843k|                return Some(Ok(result));
   92|  12.1M|            }
   93|  12.1M|            if let Some(result) = self.lexer.read_next(RR::lexer_options(&self.context)) {
   94|  8.94M|                match result {
   95|  5.53M|                    Ok(token) => {
   96|  5.53M|                        self.state = self.state.take().map(|state| {
   97|       |                            state.recognize_next(
   98|       |                                token,
   99|       |                                &mut self.context,
  100|       |                                &mut self.results,
  101|       |                                &mut self.errors,
  102|       |                            )
  103|  5.53M|                        });
  104|  5.53M|                        continue;
  105|       |                    }
  106|  3.40M|                    Err(e) => {
  107|  3.40M|                        self.state = self.state.take().map(RR::error_recovery_state);
  108|  3.40M|                        return Some(Err(e));
  109|       |                    }
  110|       |                }
  111|  3.19M|            }
  112|  3.19M|            if self.lexer.is_end() {
  113|  85.7k|                self.state.take()?.recognize_end(
  114|  42.8k|                    &mut self.context,
  115|  42.8k|                    &mut self.results,
  116|  42.8k|                    &mut self.errors,
  117|  42.8k|                )
  118|       |            } else {
  119|  3.10M|                return None;
  120|       |            }
  121|       |        }
  122|  7.84M|    }
_RNCNvMs_NtNtCseXCYVcIQZ7o_5oxttl7toolkit6parserINtB6_6ParserNtNtBa_5terse14TriGRecognizerE9read_next0Ba_:
   96|  5.53M|                        self.state = self.state.take().map(|state| {
   97|  5.53M|                            state.recognize_next(
   98|  5.53M|                                token,
   99|  5.53M|                                &mut self.context,
  100|  5.53M|                                &mut self.results,
  101|  5.53M|                                &mut self.errors,
  102|  5.53M|                            )
  103|  5.53M|                        });

_RINvMNtCseXCYVcIQZ7o_5oxttl4trigNtB3_10TriGParser10parse_readRShECsapuUTB8XoUj_4trig:
  128|  10.7k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadTriGReader<R> {
  129|  10.7k|        FromReadTriGReader {
  130|  10.7k|            inner: self.parse().parser.parse_read(read),
  131|  10.7k|        }
  132|  10.7k|    }
_RINvMNtCseXCYVcIQZ7o_5oxttl4trigNtB3_10TriGParser13with_base_iriReECsapuUTB8XoUj_4trig:
   78|  32.1k|    pub fn with_base_iri(mut self, base_iri: impl Into<String>) -> Result<Self, IriParseError> {
   79|  32.1k|        self.base = Some(Iri::parse(base_iri.into())?);
   80|  32.1k|        Ok(self)
   81|  32.1k|    }
_RINvMs3_NtCseXCYVcIQZ7o_5oxttl4trigNtB6_14TriGSerializer11with_prefixNtNtCs80BIJ2NAVqC_5alloc6string6StringB15_ECsapuUTB8XoUj_4trig:
  619|  1.20k|    pub fn with_prefix(
  620|  1.20k|        mut self,
  621|  1.20k|        prefix_name: impl Into<String>,
  622|  1.20k|        prefix_iri: impl Into<String>,
  623|  1.20k|    ) -> Result<Self, IriParseError> {
  624|  1.20k|        self.prefixes.insert(
  625|  1.20k|            Iri::parse(prefix_iri.into())?.into_inner(),
  626|  1.20k|            prefix_name.into(),
  627|  1.20k|        );
  628|  1.20k|        Ok(self)
  629|  1.20k|    }
_RINvMs3_NtCseXCYVcIQZ7o_5oxttl4trigNtB6_14TriGSerializer18serialize_to_writeINtNtCs80BIJ2NAVqC_5alloc3vec3VechEECsapuUTB8XoUj_4trig:
  652|  10.7k|    pub fn serialize_to_write<W: Write>(self, write: W) -> ToWriteTriGWriter<W> {
  653|  10.7k|        ToWriteTriGWriter {
  654|  10.7k|            write,
  655|  10.7k|            writer: self.serialize(),
  656|  10.7k|        }
  657|  10.7k|    }
_RINvMs4_NtCseXCYVcIQZ7o_5oxttl4trigINtB6_17ToWriteTriGWriterINtNtCs80BIJ2NAVqC_5alloc3vec3VechEE10write_quadRNtNtCs2NsVQwDzFGg_5oxrdf6triple4QuadECsapuUTB8XoUj_4trig:
  762|   206k|    pub fn write_quad<'a>(&mut self, q: impl Into<QuadRef<'a>>) -> io::Result<()> {
  763|   206k|        self.writer.write_quad(q, &mut self.write)
  764|   206k|    }
_RINvMs5_NtCseXCYVcIQZ7o_5oxttl4trigNtB6_18LowLevelTriGWriter10write_quadRNtNtCs2NsVQwDzFGg_5oxrdf6triple4QuadQINtNtCs80BIJ2NAVqC_5alloc3vec3VechEECsapuUTB8XoUj_4trig:
  861|   206k|    pub fn write_quad<'a>(
  862|   206k|        &mut self,
  863|   206k|        q: impl Into<QuadRef<'a>>,
  864|   206k|        mut write: impl Write,
  865|   206k|    ) -> io::Result<()> {
  866|   206k|        if !self.prelude_written {
  867|  6.45k|            self.prelude_written = true;
  868|  7.33k|            for (prefix_iri, prefix_name) in &self.prefixes {
  869|    879|                writeln!(write, "@prefix {prefix_name}: <{prefix_iri}> .")?;
  870|       |            }
  871|   200k|        }
  872|   206k|        let q = q.into();
  873|   206k|        if q.graph_name == self.current_graph_name.as_ref() {
  874|   193k|            if let Some((current_subject, current_predicate)) =
  875|   199k|                self.current_subject_predicate.take()
  876|       |            {
  877|   193k|                if q.subject == current_subject.as_ref() {
  878|  34.8k|                    if q.predicate == current_predicate {
  879|  18.7k|                        self.current_subject_predicate = Some((current_subject, current_predicate));
  880|  18.7k|                        write!(write, " , {}", self.term(q.object))
  881|       |                    } else {
  882|  16.0k|                        self.current_subject_predicate =
  883|  16.0k|                            Some((current_subject, q.predicate.into_owned()));
  884|  16.0k|                        writeln!(write, " ;")?;
  885|  16.0k|                        if !self.current_graph_name.is_default_graph() {
  886|  1.92k|                            write!(write, "\t")?;
  887|  14.1k|                        }
  888|  16.0k|                        write!(
  889|  16.0k|                            write,
  890|  16.0k|                            "\t{} {}",
  891|  16.0k|                            self.predicate(q.predicate),
  892|  16.0k|                            self.term(q.object)
  893|  16.0k|                        )
  894|       |                    }
  895|       |                } else {
  896|   159k|                    self.current_subject_predicate =
  897|   159k|                        Some((q.subject.into_owned(), q.predicate.into_owned()));
  898|   159k|                    writeln!(write, " .")?;
  899|   159k|                    if !self.current_graph_name.is_default_graph() {
  900|  15.5k|                        write!(write, "\t")?;
  901|   143k|                    }
  902|   159k|                    write!(
  903|   159k|                        write,
  904|   159k|                        "{} {} {}",
  905|   159k|                        self.term(q.subject),
  906|   159k|                        self.predicate(q.predicate),
  907|   159k|                        self.term(q.object)
  908|   159k|                    )
  909|       |                }
  910|       |            } else {
  911|  5.43k|                self.current_subject_predicate =
  912|  5.43k|                    Some((q.subject.into_owned(), q.predicate.into_owned()));
  913|  5.43k|                if !self.current_graph_name.is_default_graph() {
  914|      0|                    write!(write, "\t")?;
  915|  5.43k|                }
  916|  5.43k|                write!(
  917|  5.43k|                    write,
  918|  5.43k|                    "{} {} {}",
  919|  5.43k|                    self.term(q.subject),
  920|  5.43k|                    self.predicate(q.predicate),
  921|  5.43k|                    self.term(q.object)
  922|  5.43k|                )
  923|       |            }
  924|       |        } else {
  925|  7.36k|            if self.current_subject_predicate.is_some() {
  926|  6.34k|                writeln!(write, " .")?;
  927|  1.01k|            }
  928|  7.36k|            if !self.current_graph_name.is_default_graph() {
  929|  3.62k|                writeln!(write, "}}")?;
  930|  3.74k|            }
  931|  7.36k|            self.current_graph_name = q.graph_name.into_owned();
  932|  7.36k|            self.current_subject_predicate =
  933|  7.36k|                Some((q.subject.into_owned(), q.predicate.into_owned()));
  934|  7.36k|            match self.current_graph_name.as_ref() {
  935|  3.43k|                GraphNameRef::NamedNode(g) => {
  936|  3.43k|                    writeln!(write, "{} {{", self.term(g))?;
  937|  3.43k|                    write!(write, "\t")?;
  938|       |                }
  939|  1.27k|                GraphNameRef::BlankNode(g) => {
  940|  1.27k|                    writeln!(write, "{} {{", self.term(g))?;
  941|  1.27k|                    write!(write, "\t")?;
  942|       |                }
  943|  2.65k|                GraphNameRef::DefaultGraph => (),
  944|       |            }
  945|       |
  946|  7.36k|            write!(
  947|  7.36k|                write,
  948|  7.36k|                "{} {} {}",
  949|  7.36k|                self.term(q.subject),
  950|  7.36k|                self.predicate(q.predicate),
  951|  7.36k|                self.term(q.object)
  952|  7.36k|            )
  953|       |        }
  954|   206k|    }
_RINvMs5_NtCseXCYVcIQZ7o_5oxttl4trigNtB6_18LowLevelTriGWriter4termNtNtCs2NsVQwDzFGg_5oxrdf10blank_node12BlankNodeRefECsapuUTB8XoUj_4trig:
  963|  1.27k|    fn term<'a>(&'a self, term: impl Into<TermRef<'a>>) -> TurtleTerm<'a> {
  964|  1.27k|        TurtleTerm {
  965|  1.27k|            term: term.into(),
  966|  1.27k|            prefixes: &self.prefixes,
  967|  1.27k|        }
  968|  1.27k|    }
_RINvMs5_NtCseXCYVcIQZ7o_5oxttl4trigNtB6_18LowLevelTriGWriter4termNtNtCs2NsVQwDzFGg_5oxrdf10named_node12NamedNodeRefECsapuUTB8XoUj_4trig:
  963|  3.43k|    fn term<'a>(&'a self, term: impl Into<TermRef<'a>>) -> TurtleTerm<'a> {
  964|  3.43k|        TurtleTerm {
  965|  3.43k|            term: term.into(),
  966|  3.43k|            prefixes: &self.prefixes,
  967|  3.43k|        }
  968|  3.43k|    }
_RINvMs5_NtCseXCYVcIQZ7o_5oxttl4trigNtB6_18LowLevelTriGWriter4termNtNtCs2NsVQwDzFGg_5oxrdf6triple10SubjectRefECsapuUTB8XoUj_4trig:
  963|   171k|    fn term<'a>(&'a self, term: impl Into<TermRef<'a>>) -> TurtleTerm<'a> {
  964|   171k|        TurtleTerm {
  965|   171k|            term: term.into(),
  966|   171k|            prefixes: &self.prefixes,
  967|   171k|        }
  968|   171k|    }
_RINvMs5_NtCseXCYVcIQZ7o_5oxttl4trigNtB6_18LowLevelTriGWriter4termNtNtCs2NsVQwDzFGg_5oxrdf6triple7TermRefECsapuUTB8XoUj_4trig:
  963|   206k|    fn term<'a>(&'a self, term: impl Into<TermRef<'a>>) -> TurtleTerm<'a> {
  964|   206k|        TurtleTerm {
  965|   206k|            term: term.into(),
  966|   206k|            prefixes: &self.prefixes,
  967|   206k|        }
  968|   206k|    }
_RINvMs5_NtCseXCYVcIQZ7o_5oxttl4trigNtB6_18LowLevelTriGWriter6finishQINtNtCs80BIJ2NAVqC_5alloc3vec3VechEECsapuUTB8XoUj_4trig:
  971|  10.7k|    pub fn finish(&mut self, mut write: impl Write) -> io::Result<()> {
  972|  10.7k|        if self.current_subject_predicate.is_some() {
  973|  6.45k|            writeln!(write, " .")?;
  974|  4.26k|        }
  975|  10.7k|        if !self.current_graph_name.is_default_graph() {
  976|  1.08k|            writeln!(write, "}}")?;
  977|  9.63k|        }
  978|  10.7k|        Ok(())
  979|  10.7k|    }
_RINvMs5_NtCseXCYVcIQZ7o_5oxttl4trigNtB6_18LowLevelTriGWriter9predicateNtNtCs2NsVQwDzFGg_5oxrdf10named_node12NamedNodeRefECsapuUTB8XoUj_4trig:
  956|   187k|    fn predicate<'a>(&'a self, named_node: impl Into<NamedNodeRef<'a>>) -> TurtlePredicate<'a> {
  957|   187k|        TurtlePredicate {
  958|   187k|            named_node: named_node.into(),
  959|   187k|            prefixes: &self.prefixes,
  960|   187k|        }
  961|   187k|    }
_RNvMs4_NtCseXCYVcIQZ7o_5oxttl4trigINtB5_17ToWriteTriGWriterINtNtCs80BIJ2NAVqC_5alloc3vec3VechEE6finishCsapuUTB8XoUj_4trig:
  767|  10.7k|    pub fn finish(mut self) -> io::Result<W> {
  768|  10.7k|        self.writer.finish(&mut self.write)?;
  769|  10.7k|        Ok(self.write)
  770|  10.7k|    }
_RNvXs0_NtCseXCYVcIQZ7o_5oxttl4trigINtB5_18FromReadTriGReaderRShENtNtNtNtCs433v4DNuM1R_4core4iter6traits8iterator8Iterator4nextCsapuUTB8XoUj_4trig:
  319|   217k|    fn next(&mut self) -> Option<Self::Item> {
  320|   217k|        self.inner.next()
  321|   217k|    }
_RNvMNtCseXCYVcIQZ7o_5oxttl4trigNtB2_10TriGParser19with_quoted_triplesCsapuUTB8XoUj_4trig:
   97|  42.8k|    pub fn with_quoted_triples(mut self) -> Self {
   98|  42.8k|        self.with_quoted_triples = true;
   99|  42.8k|        self
  100|  42.8k|    }
_RNvMNtCseXCYVcIQZ7o_5oxttl4trigNtB2_10TriGParser3newCsapuUTB8XoUj_4trig:
   62|  42.8k|    pub fn new() -> Self {
   63|  42.8k|        Self::default()
   64|  42.8k|    }
_RNvMNtCseXCYVcIQZ7o_5oxttl4trigNtB2_10TriGParser9uncheckedCsapuUTB8XoUj_4trig:
   72|  10.7k|    pub fn unchecked(mut self) -> Self {
   73|  10.7k|        self.unchecked = true;
   74|  10.7k|        self
   75|  10.7k|    }
_RNvMs3_NtCseXCYVcIQZ7o_5oxttl4trigNtB5_14TriGSerializer3newCsapuUTB8XoUj_4trig:
  612|  10.7k|    pub fn new() -> Self {
  613|  10.7k|        Self {
  614|  10.7k|            prefixes: BTreeMap::new(),
  615|  10.7k|        }
  616|  10.7k|    }
_RNvXs2_NtCseXCYVcIQZ7o_5oxttl4trigNtB5_16TriGPrefixesIterNtNtNtNtCs433v4DNuM1R_4core4iter6traits8iterator8Iterator4nextCsapuUTB8XoUj_4trig:
  569|  35.8k|    fn next(&mut self) -> Option<Self::Item> {
  570|  35.8k|        let (key, value) = self.inner.next()?;
  571|  3.70k|        Some((key.as_str(), value.as_str()))
  572|  35.8k|    }
_RNvXs2_NtCseXCYVcIQZ7o_5oxttl4trigNtB5_16TriGPrefixesIterNtNtNtNtCs433v4DNuM1R_4core4iter6traits8iterator8Iterator9size_hintCsapuUTB8XoUj_4trig:
  575|  3.70k|    fn size_hint(&self) -> (usize, Option<usize>) {
  576|  3.70k|        self.inner.size_hint()
  577|  3.70k|    }
_RNvMNtCseXCYVcIQZ7o_5oxttl4trigNtB2_10TriGParser5parse:
  212|  42.8k|    pub fn parse(self) -> LowLevelTriGReader {
  213|  42.8k|        LowLevelTriGReader {
  214|  42.8k|            parser: TriGRecognizer::new_parser(
  215|  42.8k|                true,
  216|  42.8k|                #[cfg(feature = "rdf-star")]
  217|  42.8k|                self.with_quoted_triples,
  218|  42.8k|                self.unchecked,
  219|  42.8k|                self.base,
  220|  42.8k|                self.prefixes,
  221|  42.8k|            ),
  222|  42.8k|        }
  223|  42.8k|    }
_RNvMs1_NtCseXCYVcIQZ7o_5oxttl4trigNtB5_18LowLevelTriGReader17extend_from_slice:
  475|  3.08M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  476|  3.08M|        self.parser.extend_from_slice(other)
  477|  3.08M|    }
_RNvMs1_NtCseXCYVcIQZ7o_5oxttl4trigNtB5_18LowLevelTriGReader3end:
  482|  32.1k|    pub fn end(&mut self) {
  483|  32.1k|        self.parser.end()
  484|  32.1k|    }
_RNvMs1_NtCseXCYVcIQZ7o_5oxttl4trigNtB5_18LowLevelTriGReader6is_end:
  487|  32.1k|    pub fn is_end(&self) -> bool {
  488|  32.1k|        self.parser.is_end()
  489|  32.1k|    }
_RNvMs1_NtCseXCYVcIQZ7o_5oxttl4trigNtB5_18LowLevelTriGReader9read_next:
  495|  7.60M|    pub fn read_next(&mut self) -> Option<Result<Quad, SyntaxError>> {
  496|  7.60M|        self.parser.read_next()
  497|  7.60M|    }
_RNvMs1_NtCseXCYVcIQZ7o_5oxttl4trigNtB5_18LowLevelTriGReader8prefixes:
  524|  32.1k|    pub fn prefixes(&self) -> TriGPrefixesIter<'_> {
  525|  32.1k|        TriGPrefixesIter {
  526|  32.1k|            inner: self.parser.context.prefixes(),
  527|  32.1k|        }
  528|  32.1k|    }
_RNvMs3_NtCseXCYVcIQZ7o_5oxttl4trigNtB5_14TriGSerializer9serialize:
  723|  10.7k|    pub fn serialize(self) -> LowLevelTriGWriter {
  724|  10.7k|        LowLevelTriGWriter {
  725|  10.7k|            prefixes: self.prefixes,
  726|  10.7k|            prelude_written: false,
  727|  10.7k|            current_graph_name: GraphName::DefaultGraph,
  728|  10.7k|            current_subject_predicate: None,
  729|  10.7k|        }
  730|  10.7k|    }
_RNvXs6_NtCseXCYVcIQZ7o_5oxttl4trigNtB5_15TurtlePredicateNtNtCs433v4DNuM1R_4core3fmt7Display3fmt:
  988|   187k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  989|   187k|        if self.named_node == rdf::TYPE {
  990|  1.57k|            f.write_str("a")
  991|       |        } else {
  992|   186k|            TurtleTerm {
  993|   186k|                term: self.named_node.into(),
  994|   186k|                prefixes: self.prefixes,
  995|   186k|            }
  996|   186k|            .fmt(f)
  997|       |        }
  998|   187k|    }
_RNvXs7_NtCseXCYVcIQZ7o_5oxttl4trigNtB5_10TurtleTermNtNtCs433v4DNuM1R_4core3fmt7Display3fmt:
 1007|   905k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1008|   905k|        match self.term {
 1009|   394k|            TermRef::NamedNode(v) => {
 1010|   416k|                for (prefix_iri, prefix_name) in self.prefixes {
 1011|  35.7k|                    if let Some(local_name) = v.as_str().strip_prefix(prefix_iri) {
 1012|  20.3k|                        if let Some(escaped_local_name) = escape_local_name(local_name) {
 1013|  13.7k|                            return write!(f, "{prefix_name}:{escaped_local_name}");
 1014|  6.58k|                        }
 1015|  15.4k|                    }
 1016|       |                }
 1017|   380k|                write!(f, "{v}")
 1018|       |            }
 1019|   195k|            TermRef::BlankNode(v) => write!(f, "{v}"),
 1020|   204k|            TermRef::Literal(v) => {
 1021|   204k|                let value = v.value();
 1022|   204k|                let inline = match v.datatype() {
 1023|   204k|                    xsd::BOOLEAN => is_turtle_boolean(value),
 1024|   204k|                    xsd::INTEGER => is_turtle_integer(value),
 1025|   164k|                    xsd::DECIMAL => is_turtle_decimal(value),
 1026|   162k|                    xsd::DOUBLE => is_turtle_double(value),
 1027|  7.21k|                    _ => false,
 1028|       |                };
 1029|   204k|                if inline {
 1030|   197k|                    f.write_str(value)
 1031|  7.21k|                } else if v.is_plain() {
 1032|  6.83k|                    write!(f, "{v}")
 1033|       |                } else {
 1034|    376|                    write!(
 1035|    376|                        f,
 1036|    376|                        "{}^^{}",
 1037|    376|                        LiteralRef::new_simple_literal(v.value()),
 1038|    376|                        TurtleTerm {
 1039|    376|                            term: v.datatype().into(),
 1040|    376|                            prefixes: self.prefixes
 1041|    376|                        }
 1042|    376|                    )
 1043|       |                }
 1044|       |            }
 1045|       |            #[cfg(feature = "rdf-star")]
 1046|   111k|            TermRef::Triple(t) => {
 1047|   111k|                write!(
 1048|   111k|                    f,
 1049|   111k|                    "<< {} {} {} >>",
 1050|   111k|                    TurtleTerm {
 1051|   111k|                        term: t.subject.as_ref().into(),
 1052|   111k|                        prefixes: self.prefixes
 1053|   111k|                    },
 1054|   111k|                    TurtleTerm {
 1055|   111k|                        term: t.predicate.as_ref().into(),
 1056|   111k|                        prefixes: self.prefixes
 1057|   111k|                    },
 1058|   111k|                    TurtleTerm {
 1059|   111k|                        term: t.object.as_ref(),
 1060|   111k|                        prefixes: self.prefixes
 1061|   111k|                    }
 1062|   111k|                )
 1063|       |            }
 1064|       |        }
 1065|   905k|    }
_RNvNtCseXCYVcIQZ7o_5oxttl4trig17is_turtle_boolean:
 1068|    240|fn is_turtle_boolean(value: &str) -> bool {
 1069|    240|    matches!(value, "true" | "false")
 1070|    240|}
_RNvNtCseXCYVcIQZ7o_5oxttl4trig17is_turtle_integer:
 1072|  39.6k|fn is_turtle_integer(value: &str) -> bool {
 1073|  39.6k|    // [19]  INTEGER  ::=  [+-]? [0-9]+
 1074|  39.6k|    let mut value = value.as_bytes();
 1075|  39.6k|    if let Some(v) = value.strip_prefix(b"+") {
 1076|    815|        value = v;
 1077|  38.8k|    } else if let Some(v) = value.strip_prefix(b"-") {
 1078|     18|        value = v;
 1079|  38.8k|    }
 1080|  39.6k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
 1081|  39.6k|}
_RNvNtCseXCYVcIQZ7o_5oxttl4trig17is_turtle_decimal:
 1083|  1.81k|fn is_turtle_decimal(value: &str) -> bool {
 1084|  1.81k|    // [20]  DECIMAL  ::=  [+-]? [0-9]* '.' [0-9]+
 1085|  1.81k|    let mut value = value.as_bytes();
 1086|  1.81k|    if let Some(v) = value.strip_prefix(b"+") {
 1087|     78|        value = v;
 1088|  1.73k|    } else if let Some(v) = value.strip_prefix(b"-") {
 1089|     46|        value = v;
 1090|  1.69k|    }
 1091|  3.42k|    while value.first().map_or(false, u8::is_ascii_digit) {
 1092|  1.61k|        value = &value[1..];
 1093|  1.61k|    }
 1094|  1.81k|    let Some(value) = value.strip_prefix(b".") else {
 1095|      0|        return false;
 1096|       |    };
 1097|  1.81k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
 1098|  1.81k|}
_RNvNtCseXCYVcIQZ7o_5oxttl4trig16is_turtle_double:
 1100|   155k|fn is_turtle_double(value: &str) -> bool {
 1101|   155k|    // [21]    DOUBLE    ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
 1102|   155k|    // [154s]  EXPONENT  ::=  [eE] [+-]? [0-9]+
 1103|   155k|    let mut value = value.as_bytes();
 1104|   155k|    if let Some(v) = value.strip_prefix(b"+") {
 1105|    169|        value = v;
 1106|   155k|    } else if let Some(v) = value.strip_prefix(b"-") {
 1107|    303|        value = v;
 1108|   155k|    }
 1109|   155k|    let mut with_before = false;
 1110|   592k|    while value.first().map_or(false, u8::is_ascii_digit) {
 1111|   436k|        value = &value[1..];
 1112|   436k|        with_before = true;
 1113|   436k|    }
 1114|   155k|    let mut with_after = false;
 1115|   155k|    if let Some(v) = value.strip_prefix(b".") {
 1116|    713|        value = v;
 1117|  7.72k|        while value.first().map_or(false, u8::is_ascii_digit) {
 1118|  7.00k|            value = &value[1..];
 1119|  7.00k|            with_after = true;
 1120|  7.00k|        }
 1121|   154k|    }
 1122|   155k|    if let Some(v) = value.strip_prefix(b"e") {
 1123|    383|        value = v;
 1124|   155k|    } else if let Some(v) = value.strip_prefix(b"E") {
 1125|   155k|        value = v;
 1126|   155k|    } else {
 1127|      0|        return false;
 1128|       |    }
 1129|   155k|    if let Some(v) = value.strip_prefix(b"+") {
 1130|    109|        value = v;
 1131|   155k|    } else if let Some(v) = value.strip_prefix(b"-") {
 1132|     32|        value = v;
 1133|   155k|    }
 1134|   155k|    (with_before || with_after) && !value.is_empty() && value.iter().all(u8::is_ascii_digit)
 1135|   155k|}
_RNvNtCseXCYVcIQZ7o_5oxttl4trig17escape_local_name:
 1137|  20.3k|fn escape_local_name(value: &str) -> Option<String> {
 1138|  20.3k|    // TODO: PLX
 1139|  20.3k|    // [168s] 	PN_LOCAL 	::= 	(PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
 1140|  20.3k|    let mut output = String::with_capacity(value.len());
 1141|  20.3k|    let mut chars = value.chars();
 1142|  20.3k|    let first = chars.next()?;
 1143|  13.8k|    if N3Lexer::is_possible_pn_chars_u(first) || first == ':' || first.is_ascii_digit() {
 1144|  5.02k|        output.push(first);
 1145|  8.86k|    } else if can_be_escaped_in_local_name(first) {
 1146|  8.84k|        output.push('\\');
 1147|  8.84k|        output.push(first);
 1148|  8.84k|    } else {
 1149|     28|        return None;
 1150|       |    }
 1151|       |
 1152|   144k|    while let Some(c) = chars.next() {
 1153|   130k|        if N3Lexer::is_possible_pn_chars(c) || c == ':' || (c == '.' && !chars.as_str().is_empty())
 1154|  83.0k|        {
 1155|  83.0k|            output.push(c);
 1156|  83.0k|        } else if can_be_escaped_in_local_name(c) {
 1157|  47.1k|            output.push('\\');
 1158|  47.1k|            output.push(c);
 1159|  47.1k|        } else {
 1160|    152|            return None;
 1161|       |        }
 1162|       |    }
 1163|       |
 1164|  13.7k|    Some(output)
 1165|  20.3k|}
_RNvNtCseXCYVcIQZ7o_5oxttl4trig28can_be_escaped_in_local_name:
 1167|  56.1k|fn can_be_escaped_in_local_name(c: char) -> bool {
 1168|    180|    matches!(
 1169|  56.1k|        c,
 1170|       |        '_' | '~'
 1171|       |            | '.'
 1172|       |            | '-'
 1173|       |            | '!'
 1174|       |            | '$'
 1175|       |            | '&'
 1176|       |            | '\''
 1177|       |            | '('
 1178|       |            | ')'
 1179|       |            | '*'
 1180|       |            | '+'
 1181|       |            | ','
 1182|       |            | ';'
 1183|       |            | '='
 1184|       |            | '/'
 1185|       |            | '?'
 1186|       |            | '#'
 1187|       |            | '@'
 1188|       |            | '%'
 1189|       |    )
 1190|  56.1k|}


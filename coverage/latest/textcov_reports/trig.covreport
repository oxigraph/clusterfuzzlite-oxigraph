_RNvCsicuAMuMse2k_9getrandom16getrandom_uninitCsbT0BH6pPOpx_9rand_core:
  344|    228|pub fn getrandom_uninit(dest: &mut [MaybeUninit<u8>]) -> Result<&mut [u8], Error> {
  345|    228|    if !dest.is_empty() {
  346|    228|        imp::getrandom_inner(dest)?;
  347|      0|    }
  348|       |    // SAFETY: `dest` has been fully initialized by `imp::getrandom_inner`
  349|       |    // since it returned `Ok`.
  350|    228|    Ok(unsafe { slice_assume_init_mut(dest) })
  351|    228|}
_RNvCsicuAMuMse2k_9getrandom9getrandomCsbT0BH6pPOpx_9rand_core:
  314|    228|pub fn getrandom(dest: &mut [u8]) -> Result<(), Error> {
  315|    228|    // SAFETY: The `&mut MaybeUninit<_>` reference doesn't escape, and
  316|    228|    // `getrandom_uninit` guarantees it will never de-initialize any part of
  317|    228|    // `dest`.
  318|    228|    getrandom_uninit(unsafe { slice_as_uninit_mut(dest) })?;
  319|    228|    Ok(())
  320|    228|}

_RNvNtCsicuAMuMse2k_9getrandom3imp9getrandom:
   42|    229|unsafe fn getrandom(
   43|    229|    buf: *mut libc::c_void,
   44|    229|    buflen: libc::size_t,
   45|    229|    flags: libc::c_uint,
   46|    229|) -> libc::ssize_t {
   47|    229|    libc::syscall(libc::SYS_getrandom, buf, buflen, flags) as libc::ssize_t
   48|    229|}
_RNCNvNtCsicuAMuMse2k_9getrandom3imp15getrandom_inner0B5_:
   21|    228|        sys_fill_exact(dest, |buf| unsafe {
   22|    228|            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   23|    228|        })
_RNvNtCsicuAMuMse2k_9getrandom3imp22is_getrandom_available:
   29|      1|fn is_getrandom_available() -> bool {
   30|      1|    let res = unsafe { getrandom(core::ptr::null_mut(), 0, libc::GRND_NONBLOCK) };
   31|      1|    if res < 0 {
   32|      0|        match last_os_error().raw_os_error() {
   33|      0|            Some(libc::ENOSYS) => false, // No kernel support
   34|      0|            Some(libc::EPERM) => false,  // Blocked by seccomp
   35|      0|            _ => true,
   36|       |        }
   37|       |    } else {
   38|      1|        true
   39|       |    }
   40|      1|}
_RNvNtCsicuAMuMse2k_9getrandom3imp15getrandom_inner:
   17|    228|pub fn getrandom_inner(dest: &mut [MaybeUninit<u8>]) -> Result<(), Error> {
   18|    228|    // getrandom(2) was introduced in Linux 3.17
   19|    228|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   20|    228|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   21|    228|        sys_fill_exact(dest, |buf| unsafe {
   22|       |            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   23|    228|        })
   24|       |    } else {
   25|      0|        use_file::getrandom_inner(dest)
   26|       |    }
   27|    228|}

_RINvNtCsicuAMuMse2k_9getrandom4util19slice_as_uninit_muthECsbT0BH6pPOpx_9rand_core:
   98|    228|pub unsafe fn slice_as_uninit_mut<T>(slice: &mut [T]) -> &mut [MaybeUninit<T>] {
   99|    228|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
  100|    228|    &mut *(slice as *mut [T] as *mut [MaybeUninit<T>])
  101|    228|}
_RINvNtCsicuAMuMse2k_9getrandom4util21slice_assume_init_muthECsbT0BH6pPOpx_9rand_core:
   74|    228|pub unsafe fn slice_assume_init_mut<T>(slice: &mut [MaybeUninit<T>]) -> &mut [T] {
   75|    228|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   76|    228|    &mut *(slice as *mut [MaybeUninit<T>] as *mut [T])
   77|    228|}
_RNCINvMs_NtCsicuAMuMse2k_9getrandom4utilNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   66|      1|        self.0.unsync_init(|| init() as usize) != 0
_RINvMNtCsicuAMuMse2k_9getrandom4utilNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   46|    228|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   47|    228|        // Relaxed ordering is fine, as we only have a single atomic variable.
   48|    228|        let mut val = self.0.load(Relaxed);
   49|    228|        if val == Self::UNINIT {
   50|      1|            val = init();
   51|      1|            self.0.store(val, Relaxed);
   52|    227|        }
   53|    228|        val
   54|    228|    }
_RINvMs_NtCsicuAMuMse2k_9getrandom4utilNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   65|    228|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   66|    228|        self.0.unsync_init(|| init() as usize) != 0
   67|    228|    }

_RINvNtCsicuAMuMse2k_9getrandom9util_libc14sys_fill_exactNCNvNtB4_3imp15getrandom_inner0EB4_:
   67|    228|pub fn sys_fill_exact(
   68|    228|    mut buf: &mut [MaybeUninit<u8>],
   69|    228|    sys_fill: impl Fn(&mut [MaybeUninit<u8>]) -> libc::ssize_t,
   70|    228|) -> Result<(), Error> {
   71|    456|    while !buf.is_empty() {
   72|    228|        let res = sys_fill(buf);
   73|    228|        if res < 0 {
   74|      0|            let err = last_os_error();
   75|      0|            // We should try again if the call was interrupted.
   76|      0|            if err.raw_os_error() != Some(libc::EINTR) {
   77|      0|                return Err(err);
   78|      0|            }
   79|    228|        } else {
   80|    228|            // We don't check for EOF (ret = 0) as the data we are reading
   81|    228|            // should be an infinite stream of random bytes.
   82|    228|            let len = min(res as usize, buf.len());
   83|    228|            buf = &mut buf[len..];
   84|    228|        }
   85|       |    }
   86|    228|    Ok(())
   87|    228|}

_RNvNvCsgo9gpfLdqrc_4trig1__19___libfuzzer_sys_run:
  241|  18.0k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|  18.0k|            }
rust_fuzzer_test_input:
  209|  18.0k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  18.0k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  18.0k|                }
  223|  18.0k|
  224|  18.0k|                __libfuzzer_sys_run(bytes);
  225|  18.0k|                0
  226|  18.0k|            }
LLVMFuzzerTestOneInput:
   58|  18.0k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  18.0k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  18.0k|    });
   63|  18.0k|
   64|  18.0k|    match test_input {
   65|  18.0k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  18.0k|}
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}
_RNCNvCs8psSAyD4vLQ_13libfuzzer_sys15test_input_wrap0B3_:
   59|  18.0k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  18.0k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  18.0k|        rust_fuzzer_test_input(data_slice)
   62|  18.0k|    });

_RINvNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECs4WjTcpTVJQo_5oxttl:
 1125|  51.5k|pub(crate) unsafe fn search_slice_with_raw(
 1126|  51.5k|    haystack: &[u8],
 1127|  51.5k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  51.5k|) -> Option<usize> {
 1129|  51.5k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  51.5k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  51.5k|    // a &[u8].
 1132|  51.5k|    let start = haystack.as_ptr();
 1133|  51.5k|    let end = start.add(haystack.len());
 1134|  51.5k|    let found = find_raw(start, end)?;
 1135|  2.23k|    Some(found.distance(start))
 1136|  51.5k|}
_RINvMs3_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4next0ECs4WjTcpTVJQo_5oxttl:
 1044|  13.0M|    pub(crate) unsafe fn next(
 1045|  13.0M|        &mut self,
 1046|  13.0M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  13.0M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  13.0M|        let found = find_raw(self.start, self.end)?;
 1057|  36.1k|        let result = found.distance(self.original_start);
 1058|  36.1k|        self.start = found.add(1);
 1059|  36.1k|        Some(result)
 1060|  13.0M|    }
_RINvNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr7memchr20ECs4WjTcpTVJQo_5oxttl:
 1125|  1.57M|pub(crate) unsafe fn search_slice_with_raw(
 1126|  1.57M|    haystack: &[u8],
 1127|  1.57M|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  1.57M|) -> Option<usize> {
 1129|  1.57M|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  1.57M|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  1.57M|    // a &[u8].
 1132|  1.57M|    let start = haystack.as_ptr();
 1133|  1.57M|    let end = start.add(haystack.len());
 1134|  1.57M|    let found = find_raw(start, end)?;
 1135|  1.25M|    Some(found.distance(start))
 1136|  1.57M|}
_RNvMs3_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  12.9M|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  12.9M|        Iter {
 1029|  12.9M|            original_start: haystack.as_ptr(),
 1030|  12.9M|            start: haystack.as_ptr(),
 1031|  12.9M|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  12.9M|            haystack: core::marker::PhantomData,
 1033|  12.9M|        }
 1034|  12.9M|    }
_RNvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE7needle1B8_:
  117|  76.0k|    pub(crate) fn needle1(&self) -> u8 {
  118|  76.0k|        self.s1
  119|  76.0k|    }
_RNvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE3newB8_:
  111|  51.5k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  51.5k|        One { s1: needle, v1: V::splat(needle) }
  113|  51.5k|    }
_RNvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  14.5M|    pub(crate) fn needle2(&self) -> u8 {
  468|  14.5M|        self.s2
  469|  14.5M|    }
_RINvNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  13.8k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  13.8k|    start: *const u8,
 1150|  13.8k|    end: *const u8,
 1151|  13.8k|    confirm: F,
 1152|  13.8k|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  13.8k|    let mut ptr = start;
 1155|  89.6k|    while ptr < end {
 1156|  76.0k|        if confirm(*ptr) {
 1157|    262|            return Some(ptr);
 1158|  75.7k|        }
 1159|  75.7k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  13.6k|    None
 1162|  13.8k|}
_RNvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE8find_rawBa_:
  493|   257k|    pub(crate) unsafe fn find_raw(
  494|   257k|        &self,
  495|   257k|        start: *const u8,
  496|   257k|        end: *const u8,
  497|   257k|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   257k|        let topos = V::Mask::first_offset;
  505|   257k|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   257k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  89.4k|            return Some(cur);
  517|   167k|        }
  518|   167k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   167k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   167k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   167k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   228k|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  64.0k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  3.32k|                return Some(cur);
  554|  60.7k|            }
  555|  60.7k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   164k|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   152k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   152k|            return self.search_chunk(cur, topos);
  566|  12.0k|        }
  567|  12.0k|        None
  568|   257k|    }
_RNvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE3newBa_:
  450|  14.5M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  14.5M|        Two {
  452|  14.5M|            s1: needle1,
  453|  14.5M|            s2: needle2,
  454|  14.5M|            v1: V::splat(needle1),
  455|  14.5M|            v2: V::splat(needle2),
  456|  14.5M|        }
  457|  14.5M|    }
_RINvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  79.6k|    unsafe fn search_chunk(
  417|  79.6k|        &self,
  418|  79.6k|        cur: *const u8,
  419|  79.6k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  79.6k|    ) -> Option<*const u8> {
  421|  79.6k|        let chunk = V::load_unaligned(cur);
  422|  79.6k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  79.6k|        if mask.has_non_zero() {
  424|  1.17k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  78.4k|            None
  427|       |        }
  428|  79.6k|    }
_RINvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|   473k|    unsafe fn search_chunk(
  671|   473k|        &self,
  672|   473k|        cur: *const u8,
  673|   473k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|   473k|    ) -> Option<*const u8> {
  675|   473k|        let chunk = V::load_unaligned(cur);
  676|   473k|        let eq1 = self.v1.cmpeq(chunk);
  677|   473k|        let eq2 = self.v2.cmpeq(chunk);
  678|   473k|        let mask = eq1.or(eq2).movemask();
  679|   473k|        if mask.has_non_zero() {
  680|   100k|            let mask1 = eq1.movemask();
  681|   100k|            let mask2 = eq2.movemask();
  682|   100k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|   373k|            None
  685|       |        }
  686|   473k|    }
_RINvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  2.79M|    unsafe fn search_chunk(
  671|  2.79M|        &self,
  672|  2.79M|        cur: *const u8,
  673|  2.79M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  2.79M|    ) -> Option<*const u8> {
  675|  2.79M|        let chunk = V::load_unaligned(cur);
  676|  2.79M|        let eq1 = self.v1.cmpeq(chunk);
  677|  2.79M|        let eq2 = self.v2.cmpeq(chunk);
  678|  2.79M|        let mask = eq1.or(eq2).movemask();
  679|  2.79M|        if mask.has_non_zero() {
  680|   773k|            let mask1 = eq1.movemask();
  681|   773k|            let mask2 = eq2.movemask();
  682|   773k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  2.02M|            None
  685|       |        }
  686|  2.79M|    }
_RNvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  8.55k|    pub(crate) unsafe fn find_raw(
  144|  8.55k|        &self,
  145|  8.55k|        start: *const u8,
  146|  8.55k|        end: *const u8,
  147|  8.55k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  8.55k|        let topos = V::Mask::first_offset;
  155|  8.55k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  8.55k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|    174|            return Some(cur);
  167|  8.38k|        }
  168|  8.38k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  8.38k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  8.38k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  8.38k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  11.6k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  3.33k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|     44|                return Some(cur);
  216|  3.29k|            }
  217|  3.29k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  8.34k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  7.03k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  7.03k|            return self.search_chunk(cur, topos);
  228|  1.30k|        }
  229|  1.30k|        None
  230|  8.55k|    }
_RNvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iE3newB8_:
  111|  51.5k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  51.5k|        One { s1: needle, v1: V::splat(needle) }
  113|  51.5k|    }
_RNvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iE8find_rawBa_:
  493|  1.79M|    pub(crate) unsafe fn find_raw(
  494|  1.79M|        &self,
  495|  1.79M|        start: *const u8,
  496|  1.79M|        end: *const u8,
  497|  1.79M|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  1.79M|        let topos = V::Mask::first_offset;
  505|  1.79M|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  1.79M|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   745k|            return Some(cur);
  517|  1.04M|        }
  518|  1.04M|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  1.04M|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  1.04M|        if len >= Self::LOOP_SIZE {
  522|   532k|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|   423k|                let a = V::load_aligned(cur);
  526|   423k|                let b = V::load_aligned(cur.add(V::BYTES));
  527|   423k|                let eqa1 = self.v1.cmpeq(a);
  528|   423k|                let eqb1 = self.v1.cmpeq(b);
  529|   423k|                let eqa2 = self.v2.cmpeq(a);
  530|   423k|                let eqb2 = self.v2.cmpeq(b);
  531|   423k|                let or1 = eqa1.or(eqb1);
  532|   423k|                let or2 = eqa2.or(eqb2);
  533|   423k|                let or3 = or1.or(or2);
  534|   423k|                if or3.movemask_will_have_non_zero() {
  535|   256k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|   256k|                    if mask.has_non_zero() {
  537|   130k|                        return Some(cur.add(topos(mask)));
  538|   125k|                    }
  539|   125k|
  540|   125k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|   125k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|   166k|                }
  544|   166k|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   681k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  1.03M|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   251k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  11.0k|                return Some(cur);
  554|   240k|            }
  555|   240k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   779k|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   755k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   755k|            return self.search_chunk(cur, topos);
  566|  23.4k|        }
  567|  23.4k|        None
  568|  1.79M|    }
_RINvNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|  9.49M|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  9.49M|    start: *const u8,
 1150|  9.49M|    end: *const u8,
 1151|  9.49M|    confirm: F,
 1152|  9.49M|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  9.49M|    let mut ptr = start;
 1155|  23.9M|    while ptr < end {
 1156|  14.6M|        if confirm(*ptr) {
 1157|   157k|            return Some(ptr);
 1158|  14.4M|        }
 1159|  14.4M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  9.33M|    None
 1162|  9.49M|}
_RNvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  14.6M|    pub(crate) fn needle1(&self) -> u8 {
  462|  14.6M|        self.s1
  463|  14.6M|    }
_RNvMs_NtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iE3newBa_:
  450|  14.5M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  14.5M|        Two {
  452|  14.5M|            s1: needle1,
  453|  14.5M|            s2: needle2,
  454|  14.5M|            v1: V::splat(needle1),
  455|  14.5M|            v2: V::splat(needle2),
  456|  14.5M|        }
  457|  14.5M|    }
_RNvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  25.4k|    pub(crate) unsafe fn find_raw(
  144|  25.4k|        &self,
  145|  25.4k|        start: *const u8,
  146|  25.4k|        end: *const u8,
  147|  25.4k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  25.4k|        let topos = V::Mask::first_offset;
  155|  25.4k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  25.4k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|    646|            return Some(cur);
  167|  24.7k|        }
  168|  24.7k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  24.7k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  24.7k|        if len >= Self::LOOP_SIZE {
  172|  18.0k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|  9.34k|                let a = V::load_aligned(cur);
  176|  9.34k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|  9.34k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|  9.34k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|  9.34k|                let eqa = self.v1.cmpeq(a);
  180|  9.34k|                let eqb = self.v1.cmpeq(b);
  181|  9.34k|                let eqc = self.v1.cmpeq(c);
  182|  9.34k|                let eqd = self.v1.cmpeq(d);
  183|  9.34k|                let or1 = eqa.or(eqb);
  184|  9.34k|                let or2 = eqc.or(eqd);
  185|  9.34k|                let or3 = or1.or(or2);
  186|  9.34k|                if or3.movemask_will_have_non_zero() {
  187|    558|                    let mask = eqa.movemask();
  188|    558|                    if mask.has_non_zero() {
  189|    134|                        return Some(cur.add(topos(mask)));
  190|    424|                    }
  191|    424|
  192|    424|                    let mask = eqb.movemask();
  193|    424|                    if mask.has_non_zero() {
  194|    186|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|    238|                    }
  196|    238|
  197|    238|                    let mask = eqc.movemask();
  198|    238|                    if mask.has_non_zero() {
  199|    131|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|    107|                    }
  201|    107|
  202|    107|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|    107|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  8.78k|                }
  206|  8.78k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  15.4k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  54.8k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  30.9k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    264|                return Some(cur);
  216|  30.6k|            }
  217|  30.6k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  23.9k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  23.2k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  23.2k|            return self.search_chunk(cur, topos);
  228|    673|        }
  229|    673|        None
  230|  25.4k|    }
_RINvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  18.9k|    unsafe fn search_chunk(
  417|  18.9k|        &self,
  418|  18.9k|        cur: *const u8,
  419|  18.9k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  18.9k|    ) -> Option<*const u8> {
  421|  18.9k|        let chunk = V::load_unaligned(cur);
  422|  18.9k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  18.9k|        if mask.has_non_zero() {
  424|    248|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  18.6k|            None
  427|       |        }
  428|  18.9k|    }

_RNCNvMs2_NtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  14.6M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  14.6M|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  14.6M|                })
_RNvMs2_NtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNCNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|  76.0k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|  76.0k|                    b == self.sse2.needle1()
  194|  76.0k|                })
_RNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  25.4k|    unsafe fn find_raw_avx2(
  397|  25.4k|        &self,
  398|  25.4k|        start: *const u8,
  399|  25.4k|        end: *const u8,
  400|  25.4k|    ) -> Option<*const u8> {
  401|  25.4k|        self.avx2.find_raw(start, end)
  402|  25.4k|    }
_RNvMs2_NtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  14.5M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  14.5M|        Two {
  558|  14.5M|            sse2: generic::Two::new(needle1, needle2),
  559|  14.5M|            avx2: generic::Two::new(needle1, needle2),
  560|  14.5M|        }
  561|  14.5M|    }
_RNvMs2_NtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  14.5M|    pub unsafe fn find_raw(
  655|  14.5M|        &self,
  656|  14.5M|        start: *const u8,
  657|  14.5M|        end: *const u8,
  658|  14.5M|    ) -> Option<*const u8> {
  659|  14.5M|        if start >= end {
  660|  3.05M|            return None;
  661|  11.5M|        }
  662|  11.5M|        let len = end.distance(start);
  663|  11.5M|        if len < __m256i::BYTES {
  664|  9.74M|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  9.49M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  9.49M|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|   257k|                self.find_raw_sse2(start, end)
  674|       |            };
  675|  1.79M|        }
  676|  1.79M|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|  1.79M|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|  1.79M|        // enough to run on the vector routine. Pointer validity is caller's
  679|  1.79M|        // responsibility.
  680|  1.79M|        //
  681|  1.79M|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|  1.79M|        // means we'd have to annotate this routine with `target_feature`.
  683|  1.79M|        // Which is fine, because this routine is `unsafe` anyway and the
  684|  1.79M|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|  1.79M|        // The real problem is that a routine with a `target_feature`
  686|  1.79M|        // annotation generally can't be inlined into caller code unless
  687|  1.79M|        // the caller code has the same target feature annotations. Namely,
  688|  1.79M|        // the common case (at time of writing) is for calling code to not
  689|  1.79M|        // have the `avx2` target feature enabled *at compile time*. Without
  690|  1.79M|        // `target_feature` on this routine, it can be inlined which will
  691|  1.79M|        // handle some of the short-haystack cases above without touching the
  692|  1.79M|        // architecture specific code.
  693|  1.79M|        self.find_raw_avx2(start, end)
  694|  14.5M|    }
_RNvMs2_NtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|  1.79M|    unsafe fn find_raw_avx2(
  805|  1.79M|        &self,
  806|  1.79M|        start: *const u8,
  807|  1.79M|        end: *const u8,
  808|  1.79M|    ) -> Option<*const u8> {
  809|  1.79M|        self.avx2.find_raw(start, end)
  810|  1.79M|    }
_RNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  51.5k|    pub unsafe fn find_raw(
  180|  51.5k|        &self,
  181|  51.5k|        start: *const u8,
  182|  51.5k|        end: *const u8,
  183|  51.5k|    ) -> Option<*const u8> {
  184|  51.5k|        if start >= end {
  185|  3.67k|            return None;
  186|  47.8k|        }
  187|  47.8k|        let len = end.distance(start);
  188|  47.8k|        if len < __m256i::BYTES {
  189|  22.4k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  13.8k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  13.8k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  8.55k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  25.4k|        }
  201|  25.4k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  25.4k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  25.4k|        // enough to run on the vector routine. Pointer validity is caller's
  204|  25.4k|        // responsibility.
  205|  25.4k|        //
  206|  25.4k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  25.4k|        // means we'd have to annotate this routine with `target_feature`.
  208|  25.4k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  25.4k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  25.4k|        // The real problem is that a routine with a `target_feature`
  211|  25.4k|        // annotation generally can't be inlined into caller code unless
  212|  25.4k|        // the caller code has the same target feature annotations. Namely,
  213|  25.4k|        // the common case (at time of writing) is for calling code to not
  214|  25.4k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  25.4k|        // `target_feature` on this routine, it can be inlined which will
  216|  25.4k|        // handle some of the short-haystack cases above without touching the
  217|  25.4k|        // architecture specific code.
  218|  25.4k|        self.find_raw_avx2(start, end)
  219|  51.5k|    }
_RNvMs2_NtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|   257k|    unsafe fn find_raw_sse2(
  765|   257k|        &self,
  766|   257k|        start: *const u8,
  767|   257k|        end: *const u8,
  768|   257k|    ) -> Option<*const u8> {
  769|   257k|        self.sse2.find_raw(start, end)
  770|   257k|    }
_RNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  8.55k|    unsafe fn find_raw_sse2(
  337|  8.55k|        &self,
  338|  8.55k|        start: *const u8,
  339|  8.55k|        end: *const u8,
  340|  8.55k|    ) -> Option<*const u8> {
  341|  8.55k|        self.sse2.find_raw(start, end)
  342|  8.55k|    }
_RNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  51.5k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  51.5k|        One {
   71|  51.5k|            sse2: generic::One::new(needle),
   72|  51.5k|            avx2: generic::One::new(needle),
   73|  51.5k|        }
   74|  51.5k|    }

_RNvNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  14.5M|pub(crate) fn memchr2_raw(
  221|  14.5M|    n1: u8,
  222|  14.5M|    n2: u8,
  223|  14.5M|    start: *const u8,
  224|  14.5M|    end: *const u8,
  225|  14.5M|) -> Option<*const u8> {
  226|  14.5M|    // SAFETY: We provide a valid function pointer type.
  227|  14.5M|    unsafe_ifunc!(
  228|  14.5M|        Two,
  229|  14.5M|        find_raw,
  230|  14.5M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  14.5M|        Option<*const u8>,
  232|  14.5M|        start,
  233|  14.5M|        end,
  234|  14.5M|        n1,
  235|  14.5M|        n2
  236|  14.5M|    )
  237|  14.5M|}
_RNvNvNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  14.5M|        unsafe fn find_avx2(
   79|  14.5M|            $($needle: u8),+,
   80|  14.5M|            $hay_start: *const u8,
   81|  14.5M|            $hay_end: *const u8,
   82|  14.5M|        ) -> $retty {
   83|  14.5M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  14.5M|            $memchrty::new_unchecked($($needle),+)
   85|  14.5M|                .$memchrfind($hay_start, $hay_end)
   86|  14.5M|        }
_RNvNvNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  51.5k|        unsafe fn find_avx2(
   79|  51.5k|            $($needle: u8),+,
   80|  51.5k|            $hay_start: *const u8,
   81|  51.5k|            $hay_end: *const u8,
   82|  51.5k|        ) -> $retty {
   83|  51.5k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  51.5k|            $memchrty::new_unchecked($($needle),+)
   85|  51.5k|                .$memchrfind($hay_start, $hay_end)
   86|  51.5k|        }
_RNvNvNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_646memchr10memchr_raw:
  174|  51.5k|pub(crate) fn memchr_raw(
  175|  51.5k|    n1: u8,
  176|  51.5k|    start: *const u8,
  177|  51.5k|    end: *const u8,
  178|  51.5k|) -> Option<*const u8> {
  179|  51.5k|    // SAFETY: We provide a valid function pointer type.
  180|  51.5k|    unsafe_ifunc!(
  181|  51.5k|        One,
  182|  51.5k|        find_raw,
  183|  51.5k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  51.5k|        Option<*const u8>,
  185|  51.5k|        start,
  186|  51.5k|        end,
  187|  51.5k|        n1
  188|  51.5k|    )
  189|  51.5k|}

_RNvXNtCs8oHv9mjUfNq_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  15.9M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  15.9M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  15.9M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  15.9M|    }
_RNvXNtCs8oHv9mjUfNq_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|  1.24M|    fn as_usize(self) -> usize {
   27|  1.24M|        self as usize
   28|  1.24M|    }

_RNCNvXs3_NtCs8oHv9mjUfNq_6memchr6memchrNtB7_7Memchr2NtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4next0Cs4WjTcpTVJQo_5oxttl:
  395|  13.0M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNCNvNtCs8oHv9mjUfNq_6memchr6memchr7memchr20Cs4WjTcpTVJQo_5oxttl:
   96|  1.57M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|  1.57M|            memchr2_raw(needle1, needle2, start, end)
   98|  1.57M|        })
_RNvXs3_NtCs8oHv9mjUfNq_6memchr6memchrNtB5_7Memchr2NtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4nextCs4WjTcpTVJQo_5oxttl:
  390|  13.0M|    fn next(&mut self) -> Option<usize> {
  391|  13.0M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  13.0M|        // pointers returns will fall within the start and end bounds, and this
  393|  13.0M|        // upholds the safety contract of `self.it.next`.
  394|  13.0M|        unsafe {
  395|  13.0M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  13.0M|        }
  397|  13.0M|    }
_RNvNtCs8oHv9mjUfNq_6memchr6memchr6memchrCs4WjTcpTVJQo_5oxttl:
   27|  51.5k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  51.5k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  51.5k|    // pointer between start and end.
   30|  51.5k|    unsafe {
   31|  51.5k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  51.5k|        })
   34|  51.5k|    }
   35|  51.5k|}
_RNvNtCs8oHv9mjUfNq_6memchr6memchr12memchr2_iterCs4WjTcpTVJQo_5oxttl:
  232|  12.9M|pub fn memchr2_iter<'h>(
  233|  12.9M|    needle1: u8,
  234|  12.9M|    needle2: u8,
  235|  12.9M|    haystack: &'h [u8],
  236|  12.9M|) -> Memchr2<'h> {
  237|  12.9M|    Memchr2::new(needle1, needle2, haystack)
  238|  12.9M|}
_RNvMs2_NtCs8oHv9mjUfNq_6memchr6memchrNtB5_7Memchr23newCs4WjTcpTVJQo_5oxttl:
  377|  12.9M|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  12.9M|        Memchr2 {
  379|  12.9M|            needle1,
  380|  12.9M|            needle2,
  381|  12.9M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  12.9M|        }
  383|  12.9M|    }
_RNvNtCs8oHv9mjUfNq_6memchr6memchr7memchr2Cs4WjTcpTVJQo_5oxttl:
   92|  1.57M|pub fn memchr2(needle1: u8, needle2: u8, haystack: &[u8]) -> Option<usize> {
   93|  1.57M|    // SAFETY: memchr2_raw, when a match is found, always returns a valid
   94|  1.57M|    // pointer between start and end.
   95|  1.57M|    unsafe {
   96|  1.57M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|       |            memchr2_raw(needle1, needle2, start, end)
   98|  1.57M|        })
   99|  1.57M|    }
  100|  1.57M|}
_RNvNtCs8oHv9mjUfNq_6memchr6memchr11memchr2_rawCs4WjTcpTVJQo_5oxttl:
  574|  14.5M|unsafe fn memchr2_raw(
  575|  14.5M|    needle1: u8,
  576|  14.5M|    needle2: u8,
  577|  14.5M|    start: *const u8,
  578|  14.5M|    end: *const u8,
  579|  14.5M|) -> Option<*const u8> {
  580|  14.5M|    #[cfg(target_arch = "x86_64")]
  581|  14.5M|    {
  582|  14.5M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  14.5M|    }
  584|  14.5M|    #[cfg(target_arch = "wasm32")]
  585|  14.5M|    {
  586|  14.5M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  14.5M|    }
  588|  14.5M|    #[cfg(target_arch = "aarch64")]
  589|  14.5M|    {
  590|  14.5M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  14.5M|    }
  592|  14.5M|    #[cfg(not(any(
  593|  14.5M|        target_arch = "x86_64",
  594|  14.5M|        target_arch = "wasm32",
  595|  14.5M|        target_arch = "aarch64"
  596|  14.5M|    )))]
  597|  14.5M|    {
  598|  14.5M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  14.5M|            .find_raw(start, end)
  600|  14.5M|    }
  601|  14.5M|}
_RNvNtCs8oHv9mjUfNq_6memchr6memchr10memchr_rawB3_:
  504|  51.5k|unsafe fn memchr_raw(
  505|  51.5k|    needle: u8,
  506|  51.5k|    start: *const u8,
  507|  51.5k|    end: *const u8,
  508|  51.5k|) -> Option<*const u8> {
  509|  51.5k|    #[cfg(target_arch = "x86_64")]
  510|  51.5k|    {
  511|  51.5k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  51.5k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  51.5k|        // time. This function also handles using a fallback if neither AVX2
  514|  51.5k|        // nor SSE2 (unusual) are available.
  515|  51.5k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  51.5k|    }
  517|  51.5k|    #[cfg(target_arch = "wasm32")]
  518|  51.5k|    {
  519|  51.5k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  51.5k|    }
  521|  51.5k|    #[cfg(target_arch = "aarch64")]
  522|  51.5k|    {
  523|  51.5k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  51.5k|    }
  525|  51.5k|    #[cfg(not(any(
  526|  51.5k|        target_arch = "x86_64",
  527|  51.5k|        target_arch = "wasm32",
  528|  51.5k|        target_arch = "aarch64"
  529|  51.5k|    )))]
  530|  51.5k|    {
  531|  51.5k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  51.5k|    }
  533|  51.5k|}
_RNCNvNtCs8oHv9mjUfNq_6memchr6memchr6memchr0B5_:
   31|  51.5k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|  51.5k|            memchr_raw(needle, start, end)
   33|  51.5k|        })

_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86sse2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  225|   692k|        unsafe fn movemask(self) -> SensibleMoveMask {
  226|   692k|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  227|   692k|        }
_RNvXs_NtCs8oHv9mjUfNq_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  148|  4.06M|    fn has_non_zero(self) -> bool {
  149|  4.06M|        self.0 != 0
  150|  4.06M|    }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  275|  5.62M|        unsafe fn movemask(self) -> SensibleMoveMask {
  276|  5.62M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  277|  5.62M|        }
_RNvXs_NtCs8oHv9mjUfNq_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  173|  1.13M|    fn first_offset(self) -> usize {
  174|  1.13M|        // We are dealing with little endian here (and if we aren't, we swap
  175|  1.13M|        // the bytes so we are in practice), where the most significant byte
  176|  1.13M|        // is at a higher address. That means the least significant bit that
  177|  1.13M|        // is set corresponds to the position of our first matching byte.
  178|  1.13M|        // That position corresponds to the number of zeros after the least
  179|  1.13M|        // significant bit.
  180|  1.13M|        self.get_for_offset().trailing_zeros() as usize
  181|  1.13M|    }
_RNvYNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtNtCs8oHv9mjUfNq_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   65|   432k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   66|   432k|        self.movemask().has_non_zero()
   67|   432k|    }
_RNvMNtCs8oHv9mjUfNq_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  128|  1.13M|    fn get_for_offset(self) -> u32 {
  129|  1.13M|        #[cfg(target_endian = "big")]
  130|  1.13M|        {
  131|  1.13M|            self.0.swap_bytes()
  132|  1.13M|        }
  133|  1.13M|        #[cfg(target_endian = "little")]
  134|  1.13M|        {
  135|  1.13M|            self.0
  136|  1.13M|        }
  137|  1.13M|    }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86sse2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  230|   966k|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  231|   966k|            _mm_cmpeq_epi8(self, vector2)
  232|   966k|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector2or:
  290|  4.09M|        unsafe fn or(self, vector2: Self) -> __m256i {
  291|  4.09M|            _mm256_or_si256(self, vector2)
  292|  4.09M|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  265|   883k|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  266|   883k|            _mm256_load_si256(data as *const __m256i)
  267|   883k|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  280|  7.40M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  281|  7.40M|            _mm256_cmpeq_epi8(self, vector2)
  282|  7.40M|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86sse2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  220|   492k|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  221|   492k|            _mm_loadu_si128(data as *const __m128i)
  222|   492k|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86sse2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  210|  29.2M|        unsafe fn splat(byte: u8) -> __m128i {
  211|  29.2M|            _mm_set1_epi8(byte as i8)
  212|  29.2M|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86sse2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iNtB4_6Vector2or:
  240|   473k|        unsafe fn or(self, vector2: Self) -> __m128i {
  241|   473k|            _mm_or_si128(self, vector2)
  242|   473k|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  270|  2.87M|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  271|  2.87M|            _mm256_loadu_si256(data as *const __m256i)
  272|  2.87M|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  260|  29.2M|        unsafe fn splat(byte: u8) -> __m256i {
  261|  29.2M|            _mm256_set1_epi8(byte as i8)
  262|  29.2M|        }
_RNvXs_NtCs8oHv9mjUfNq_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  163|  1.25M|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  164|  1.25M|        SensibleMoveMask(self.0 | other.0)
  165|  1.25M|    }

_RNvMs2_NtCsfr4O1C3G5Ja_9once_cell3impINtB5_8OnceCellNtNtCsdBW21Yiwikk_5alloc6string6StringE14is_initializedCs8psSAyD4vLQ_13libfuzzer_sys:
   49|  18.0k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  18.0k|        // An `Acquire` load is enough because that makes all the initialization
   51|  18.0k|        // operations visible to us, and, this being a fast path, weaker
   52|  18.0k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  18.0k|        // `SeqCst` operations on the slow path.
   54|  18.0k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  18.0k|    }

_RNvMs4_NtCsfr4O1C3G5Ja_9once_cell4syncINtB5_8OnceCellNtNtCsdBW21Yiwikk_5alloc6string6StringE3getCs8psSAyD4vLQ_13libfuzzer_sys:
  963|  18.0k|        pub fn get(&self) -> Option<&T> {
  964|  18.0k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  18.0k|                None
  969|       |            }
  970|  18.0k|        }

_RNvMCsebFzSuz8Vhk_10oxilangtagINtB2_11LanguageTagReE10into_innerCs4WjTcpTVJQo_5oxttl:
   54|  18.6k|    pub fn into_inner(self) -> T {
   55|  18.6k|        self.tag
   56|  18.6k|    }
_RNvMCsebFzSuz8Vhk_10oxilangtagINtB2_11LanguageTagReE5parseCs4WjTcpTVJQo_5oxttl:
   41|  27.5k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   42|  27.5k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   43|  18.6k|        Ok(Self { tag, positions })
   44|  27.5k|    }
_RNvXsE_CsebFzSuz8Vhk_10oxilangtagNtB5_16VoidOutputBufferNtNtCsl2lhD68vXAd_4core7default7Default7defaultCs4WjTcpTVJQo_5oxttl:
  547|  27.5k|#[derive(Default)]
_RINvCsebFzSuz8Vhk_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECsbrE1BkJ52QU_5oxrdf:
  621|  22.0k|fn parse_langtag(
  622|  22.0k|    input: &str,
  623|  22.0k|    output: &mut impl OutputBuffer,
  624|  22.0k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  625|  22.0k|    #[derive(PartialEq, Eq)]
  626|  22.0k|    enum State {
  627|  22.0k|        Start,
  628|  22.0k|        AfterLanguage,
  629|  22.0k|        AfterExtLang,
  630|  22.0k|        AfterScript,
  631|  22.0k|        AfterRegion,
  632|  22.0k|        InExtension { expected: bool },
  633|  22.0k|        InPrivateUse { expected: bool },
  634|  22.0k|    }
  635|  22.0k|
  636|  22.0k|    let mut state = State::Start;
  637|  22.0k|    let mut language_end = 0;
  638|  22.0k|    let mut extlang_end = 0;
  639|  22.0k|    let mut script_end = 0;
  640|  22.0k|    let mut region_end = 0;
  641|  22.0k|    let mut variant_end = 0;
  642|  22.0k|    let mut extension_end = 0;
  643|  22.0k|    let mut extlangs_count = 0;
  644|  37.8k|    for (subtag, end) in SubTagIterator::new(input) {
  645|  37.8k|        if subtag.is_empty() {
  646|      0|            return Err(LanguageTagParseError {
  647|      0|                kind: TagParseErrorKind::EmptySubtag,
  648|      0|            });
  649|  37.8k|        }
  650|  37.8k|        if subtag.len() > 8 {
  651|    702|            return Err(LanguageTagParseError {
  652|    702|                kind: TagParseErrorKind::SubtagTooLong,
  653|    702|            });
  654|  37.1k|        }
  655|  37.1k|        if state == State::Start {
  656|       |            // Primary language
  657|  21.4k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  658|  5.54k|                return Err(LanguageTagParseError {
  659|  5.54k|                    kind: TagParseErrorKind::InvalidLanguage,
  660|  5.54k|                });
  661|  15.8k|            }
  662|  15.8k|            language_end = end;
  663|  15.8k|            output.extend(to_lowercase(subtag));
  664|  15.8k|            if subtag.len() < 4 {
  665|  9.58k|                // extlangs are only allowed for short language tags
  666|  9.58k|                state = State::AfterLanguage;
  667|  9.58k|            } else {
  668|  6.29k|                state = State::AfterExtLang;
  669|  6.29k|            }
  670|  15.7k|        } else if let State::InPrivateUse { .. } = state {
  671|    464|            if !is_alphanumeric(subtag) {
  672|      0|                return Err(LanguageTagParseError {
  673|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  674|      0|                });
  675|    464|            }
  676|    464|            output.push('-');
  677|    464|            output.extend(to_lowercase(subtag));
  678|    464|            state = State::InPrivateUse { expected: false };
  679|  15.2k|        } else if subtag == "x" || subtag == "X" {
  680|       |            // We make sure extension is found
  681|    610|            if let State::InExtension { expected: true } = state {
  682|     28|                return Err(LanguageTagParseError {
  683|     28|                    kind: TagParseErrorKind::EmptyExtension,
  684|     28|                });
  685|    582|            }
  686|    582|            output.push('-');
  687|    582|            output.push('x');
  688|    582|            state = State::InPrivateUse { expected: true };
  689|  14.6k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  690|       |            // We make sure extension is found
  691|  3.50k|            if let State::InExtension { expected: true } = state {
  692|    610|                return Err(LanguageTagParseError {
  693|    610|                    kind: TagParseErrorKind::EmptyExtension,
  694|    610|                });
  695|  2.89k|            }
  696|  2.89k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  697|  2.89k|            output.push('-');
  698|  2.89k|            output.push(extension_tag);
  699|  2.89k|            state = State::InExtension { expected: true };
  700|  11.1k|        } else if let State::InExtension { .. } = state {
  701|  3.57k|            if !is_alphanumeric(subtag) {
  702|      0|                return Err(LanguageTagParseError {
  703|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  704|      0|                });
  705|  3.57k|            }
  706|  3.57k|            extension_end = end;
  707|  3.57k|            output.push('-');
  708|  3.57k|            output.extend(to_lowercase(subtag));
  709|  3.57k|            state = State::InExtension { expected: false };
  710|  7.57k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  711|  1.19k|            extlangs_count += 1;
  712|  1.19k|            if extlangs_count > 3 {
  713|      0|                return Err(LanguageTagParseError {
  714|      0|                    kind: TagParseErrorKind::TooManyExtlangs,
  715|      0|                });
  716|  1.19k|            }
  717|  1.19k|            // valid extlangs
  718|  1.19k|            extlang_end = end;
  719|  1.19k|            output.push('-');
  720|  1.19k|            output.extend(to_lowercase(subtag));
  721|  6.38k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  722|  4.57k|            && subtag.len() == 4
  723|    911|            && is_alphabetic(subtag)
  724|    911|        {
  725|    911|            // Script
  726|    911|            script_end = end;
  727|    911|            output.push('-');
  728|    911|            output.extend(to_uppercase_first(subtag));
  729|    911|            state = State::AfterScript;
  730|  5.47k|        } else if (state == State::AfterLanguage
  731|  2.79k|            || state == State::AfterExtLang
  732|  1.80k|            || state == State::AfterScript)
  733|  4.11k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  734|  1.72k|                || subtag.len() == 3 && is_numeric(subtag))
  735|  2.39k|        {
  736|  2.39k|            // Region
  737|  2.39k|            region_end = end;
  738|  2.39k|            output.push('-');
  739|  2.39k|            output.extend(to_uppercase(subtag));
  740|  2.39k|            state = State::AfterRegion;
  741|  3.08k|        } else if (state == State::AfterLanguage
  742|  2.11k|            || state == State::AfterExtLang
  743|  1.80k|            || state == State::AfterScript
  744|  1.35k|            || state == State::AfterRegion)
  745|  3.08k|            && is_alphanumeric(subtag)
  746|  3.08k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  747|  1.32k|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  748|  1.75k|        {
  749|  1.75k|            // Variant
  750|  1.75k|            variant_end = end;
  751|  1.75k|            output.push('-');
  752|  1.75k|            output.extend(to_lowercase(subtag));
  753|  1.75k|            state = State::AfterRegion;
  754|  1.75k|        } else {
  755|  1.32k|            return Err(LanguageTagParseError {
  756|  1.32k|                kind: TagParseErrorKind::InvalidSubtag,
  757|  1.32k|            });
  758|       |        }
  759|       |    }
  760|       |
  761|       |    //We make sure we are in a correct final state
  762|  13.8k|    if let State::InExtension { expected: true } = state {
  763|    478|        return Err(LanguageTagParseError {
  764|    478|            kind: TagParseErrorKind::EmptyExtension,
  765|    478|        });
  766|  13.4k|    }
  767|  13.4k|    if let State::InPrivateUse { expected: true } = state {
  768|    200|        return Err(LanguageTagParseError {
  769|    200|            kind: TagParseErrorKind::EmptyPrivateUse,
  770|    200|        });
  771|  13.2k|    }
  772|  13.2k|
  773|  13.2k|    //We make sure we have not skipped anyone
  774|  13.2k|    if extlang_end < language_end {
  775|  12.0k|        extlang_end = language_end;
  776|  12.0k|    }
  777|  13.2k|    if script_end < extlang_end {
  778|  12.7k|        script_end = extlang_end;
  779|  12.7k|    }
  780|  13.2k|    if region_end < script_end {
  781|  11.5k|        region_end = script_end;
  782|  11.5k|    }
  783|  13.2k|    if variant_end < region_end {
  784|  11.4k|        variant_end = region_end;
  785|  11.4k|    }
  786|  13.2k|    if extension_end < variant_end {
  787|  11.5k|        extension_end = variant_end;
  788|  11.5k|    }
  789|       |
  790|  13.2k|    Ok(TagElementsPositions {
  791|  13.2k|        language_end,
  792|  13.2k|        extlang_end,
  793|  13.2k|        script_end,
  794|  13.2k|        region_end,
  795|  13.2k|        variant_end,
  796|  13.2k|        extension_end,
  797|  13.2k|    })
  798|  22.0k|}
_RINvXsr_CsebFzSuz8Vhk_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECsbrE1BkJ52QU_5oxrdf:
  560|  5.49k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsebFzSuz8Vhk_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECsbrE1BkJ52QU_5oxrdf:
  560|  22.8k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvCsebFzSuz8Vhk_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECsbrE1BkJ52QU_5oxrdf:
  576|  27.5k|fn parse_language_tag(
  577|  27.5k|    input: &str,
  578|  27.5k|    output: &mut impl OutputBuffer,
  579|  27.5k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  580|       |    //grandfathered tags
  581|  27.5k|    if let Some(tag) = GRANDFATHEREDS
  582|  27.5k|        .iter()
  583|  27.5k|        .find(|record| record.eq_ignore_ascii_case(input))
  584|       |    {
  585|      0|        output.push_str(tag);
  586|      0|        Ok(TagElementsPositions {
  587|      0|            language_end: tag.len(),
  588|      0|            extlang_end: tag.len(),
  589|      0|            script_end: tag.len(),
  590|      0|            region_end: tag.len(),
  591|      0|            variant_end: tag.len(),
  592|      0|            extension_end: tag.len(),
  593|      0|        })
  594|  27.5k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  595|       |        // private use
  596|  5.49k|        if !is_alphanumeric_or_dash(input) {
  597|      0|            Err(LanguageTagParseError {
  598|      0|                kind: TagParseErrorKind::ForbiddenChar,
  599|      0|            })
  600|  5.49k|        } else if input.len() == 2 {
  601|      0|            Err(LanguageTagParseError {
  602|      0|                kind: TagParseErrorKind::EmptyPrivateUse,
  603|      0|            })
  604|       |        } else {
  605|  5.49k|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  606|  5.49k|            Ok(TagElementsPositions {
  607|  5.49k|                language_end: input.len(),
  608|  5.49k|                extlang_end: input.len(),
  609|  5.49k|                script_end: input.len(),
  610|  5.49k|                region_end: input.len(),
  611|  5.49k|                variant_end: input.len(),
  612|  5.49k|                extension_end: input.len(),
  613|  5.49k|            })
  614|       |        }
  615|       |    } else {
  616|  22.0k|        parse_langtag(input, output)
  617|       |    }
  618|  27.5k|}
_RINvXsr_CsebFzSuz8Vhk_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECsbrE1BkJ52QU_5oxrdf:
  560|  2.39k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsebFzSuz8Vhk_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECsbrE1BkJ52QU_5oxrdf:
  560|    911|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCsebFzSuz8Vhk_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0CsbrE1BkJ52QU_5oxrdf:
  583|   717k|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvCsebFzSuz8Vhk_10oxilangtag23is_alphanumeric_or_dashCsbrE1BkJ52QU_5oxrdf:
  875|  5.49k|fn is_alphanumeric_or_dash(s: &str) -> bool {
  876|  5.49k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  877|  5.49k|}
_RNvXsw_CsebFzSuz8Vhk_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4nextCsbrE1BkJ52QU_5oxrdf:
  851|  51.7k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  852|  51.7k|        let tag = self.split.next()?;
  853|  37.8k|        let tag_end = self.position + tag.len();
  854|  37.8k|        self.position = tag_end + 1;
  855|  37.8k|        Some((tag, tag_end))
  856|  51.7k|    }
_RNvCsebFzSuz8Vhk_10oxilangtag12to_lowercaseCsbrE1BkJ52QU_5oxrdf:
  892|  22.8k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  893|  22.8k|    s.chars().map(|c| c.to_ascii_lowercase())
  894|  22.8k|}
_RNvCsebFzSuz8Vhk_10oxilangtag10is_numericCsbrE1BkJ52QU_5oxrdf:
  865|  1.28k|fn is_numeric(s: &str) -> bool {
  866|  1.28k|    s.chars().all(|x| x.is_ascii_digit())
  867|  1.28k|}
_RNvCsebFzSuz8Vhk_10oxilangtag12to_uppercaseCsbrE1BkJ52QU_5oxrdf:
  880|  2.39k|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  881|  2.39k|    s.chars().map(|c| c.to_ascii_uppercase())
  882|  2.39k|}
_RNvMsv_CsebFzSuz8Vhk_10oxilangtagNtB5_14SubTagIterator3newCsbrE1BkJ52QU_5oxrdf:
  839|  22.0k|    fn new(input: &'a str) -> Self {
  840|  22.0k|        Self {
  841|  22.0k|            split: input.split('-'),
  842|  22.0k|            position: 0,
  843|  22.0k|        }
  844|  22.0k|    }
_RNvXs_NvCsebFzSuz8Vhk_10oxilangtag13parse_langtagNtB4_5StateNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCsbrE1BkJ52QU_5oxrdf:
  625|  72.5k|    #[derive(PartialEq, Eq)]
_RNvCsebFzSuz8Vhk_10oxilangtag15is_alphanumericCsbrE1BkJ52QU_5oxrdf:
  870|  10.6k|fn is_alphanumeric(s: &str) -> bool {
  871|  10.6k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  872|  10.6k|}
_RNvCsebFzSuz8Vhk_10oxilangtag18to_uppercase_firstCsbrE1BkJ52QU_5oxrdf:
  886|    911|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  887|    911|    let mut chars = s.chars();
  888|    911|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  889|    911|}
_RNvXsq_CsebFzSuz8Vhk_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsbrE1BkJ52QU_5oxrdf:
  552|  17.2k|    fn push(&mut self, _: char) {}
_RNvCsebFzSuz8Vhk_10oxilangtag13is_alphabeticCsbrE1BkJ52QU_5oxrdf:
  860|  22.1k|fn is_alphabetic(s: &str) -> bool {
  861|  22.1k|    s.chars().all(|x| x.is_ascii_alphabetic())
  862|  22.1k|}
_RNCNvCsebFzSuz8Vhk_10oxilangtag15is_alphanumeric0B3_:
  871|  32.3k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNvXso_CsebFzSuz8Vhk_10oxilangtagNtB5_21LanguageTagParseErrorNtNtCsl2lhD68vXAd_4core3fmt7Display3fmt:
  482|  8.88k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  483|  8.88k|        match self.kind {
  484|       |            TagParseErrorKind::EmptyExtension => {
  485|  1.11k|                write!(f, "If an extension subtag is present, it must not be empty")
  486|       |            }
  487|       |            TagParseErrorKind::EmptyPrivateUse => {
  488|    200|                write!(f, "If the `x` subtag is present, it must not be empty")
  489|       |            }
  490|       |            TagParseErrorKind::ForbiddenChar => {
  491|      0|                write!(f, "The langtag contains a char not allowed")
  492|       |            }
  493|  1.32k|            TagParseErrorKind::InvalidSubtag => write!(
  494|  1.32k|                f,
  495|  1.32k|                "A subtag fails to parse, it does not match any other subtags"
  496|  1.32k|            ),
  497|  5.54k|            TagParseErrorKind::InvalidLanguage => write!(f, "The given language subtag is invalid"),
  498|       |            TagParseErrorKind::SubtagTooLong => {
  499|    702|                write!(f, "A subtag may be eight characters in length at maximum")
  500|       |            }
  501|      0|            TagParseErrorKind::EmptySubtag => write!(f, "A subtag should not be empty"),
  502|       |            TagParseErrorKind::TooManyExtlangs => {
  503|      0|                write!(f, "At maximum three extlangs are allowed")
  504|       |            }
  505|       |        }
  506|  8.88k|    }
_RNCNvCsebFzSuz8Vhk_10oxilangtag13is_alphabetic0B3_:
  861|  70.0k|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCsebFzSuz8Vhk_10oxilangtag23is_alphanumeric_or_dash0B3_:
  876|   189k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
_RNCNvCsebFzSuz8Vhk_10oxilangtag10is_numeric0B3_:
  866|  1.28k|    s.chars().all(|x| x.is_ascii_digit())

_RNvXsZ_Cs72NQLJxIjgJ_5oxiriNtNtCsdBW21Yiwikk_5alloc6string6StringNtB5_12OutputBuffer8push_strCs4WjTcpTVJQo_5oxttl:
 1012|   167k|    fn push_str(&mut self, s: &str) {
 1013|   167k|        self.push_str(s);
 1014|   167k|    }
_RNvXsZ_Cs72NQLJxIjgJ_5oxiriNtNtCsdBW21Yiwikk_5alloc6string6StringNtB5_12OutputBuffer8truncateCs4WjTcpTVJQo_5oxttl:
 1022|   157k|    fn truncate(&mut self, new_len: usize) {
 1023|   157k|        self.truncate(new_len);
 1024|   157k|    }
_RNvXsZ_Cs72NQLJxIjgJ_5oxiriNtNtCsdBW21Yiwikk_5alloc6string6StringNtB5_12OutputBuffer3lenCs4WjTcpTVJQo_5oxttl:
 1027|   332k|    fn len(&self) -> usize {
 1028|   332k|        self.len()
 1029|   332k|    }
_RNvXsZ_Cs72NQLJxIjgJ_5oxiriNtNtCsdBW21Yiwikk_5alloc6string6StringNtB5_12OutputBuffer6as_strCs4WjTcpTVJQo_5oxttl:
 1032|   459k|    fn as_str(&self) -> &str {
 1033|   459k|        self.as_str()
 1034|   459k|    }
_RNvXsZ_Cs72NQLJxIjgJ_5oxiriNtNtCsdBW21Yiwikk_5alloc6string6StringNtB5_12OutputBuffer4pushCs4WjTcpTVJQo_5oxttl:
 1007|  1.41M|    fn push(&mut self, c: char) {
 1008|  1.41M|        self.push(c);
 1009|  1.41M|    }
_RNvXsZ_Cs72NQLJxIjgJ_5oxiriNtNtCsdBW21Yiwikk_5alloc6string6StringNtB5_12OutputBuffer5clearCs4WjTcpTVJQo_5oxttl:
 1017|  18.0k|    fn clear(&mut self) {
 1018|  18.0k|        self.clear();
 1019|  18.0k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE16parse_path_startCs4WjTcpTVJQo_5oxttl:
 1315|  4.62k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1316|  4.62k|        match c {
 1317|       |            None => {
 1318|  1.08k|                self.output_positions.path_end = self.output.len();
 1319|  1.08k|                self.output_positions.query_end = self.output.len();
 1320|  1.08k|                Ok(())
 1321|       |            }
 1322|       |            Some('?') => {
 1323|    402|                self.output_positions.path_end = self.output.len();
 1324|    402|                self.output.push('?');
 1325|    402|                self.parse_query()
 1326|       |            }
 1327|       |            Some('#') => {
 1328|    144|                self.output_positions.path_end = self.output.len();
 1329|    144|                self.output_positions.query_end = self.output.len();
 1330|    144|                self.output.push('#');
 1331|    144|                self.parse_fragment()
 1332|       |            }
 1333|       |            Some('/') => {
 1334|  3.00k|                self.output.push('/');
 1335|  3.00k|                self.parse_path()
 1336|       |            }
 1337|      0|            Some(c) => {
 1338|      0|                self.read_url_codepoint_or_echar(c)?;
 1339|      0|                self.parse_path()
 1340|       |            }
 1341|       |        }
 1342|  4.62k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE33read_url_query_codepoint_or_echarCs4WjTcpTVJQo_5oxttl:
 1422|   122k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1423|   122k|        if c == '%' {
 1424|  1.55k|            self.read_echar()
 1425|   121k|        } else if is_url_query_code_point(c) {
 1426|   116k|            self.output.push(c);
 1427|   116k|            Ok(())
 1428|       |        } else {
 1429|  4.66k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1430|       |        }
 1431|   122k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE20parse_relative_slashCs4WjTcpTVJQo_5oxttl:
 1213|   122k|    fn parse_relative_slash(&mut self, base: &IriRef<&'a str>) -> Result<(), IriParseError> {
 1214|   122k|        if self.input.starts_with('/') {
 1215|  3.51k|            self.input.next();
 1216|  3.51k|            self.output.push_str(&base.iri[..base.positions.scheme_end]);
 1217|  3.51k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1218|  3.51k|            self.output.push('/');
 1219|  3.51k|            self.output.push('/');
 1220|  3.51k|            self.parse_authority()
 1221|       |        } else {
 1222|   119k|            self.output
 1223|   119k|                .push_str(&base.iri[..base.positions.authority_end]);
 1224|   119k|            self.output.push('/');
 1225|   119k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1226|   119k|            self.output_positions.authority_end = base.positions.authority_end;
 1227|   119k|            self.parse_path()
 1228|       |        }
 1229|   122k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE11parse_queryCs4WjTcpTVJQo_5oxttl:
 1380|  7.09k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1381|   124k|        while let Some(c) = self.input.next() {
 1382|   122k|            if c == '#' {
 1383|    396|                self.output_positions.query_end = self.output.len();
 1384|    396|                self.output.push('#');
 1385|    396|                return self.parse_fragment();
 1386|       |            } else {
 1387|   122k|                self.read_url_query_codepoint_or_echar(c)?
 1388|       |            }
 1389|       |        }
 1390|  1.19k|        self.output_positions.query_end = self.output.len();
 1391|  1.19k|        Ok(())
 1392|  7.09k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE18parse_scheme_startCs4WjTcpTVJQo_5oxttl:
 1101|   176k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1102|   176k|        match self.input.front() {
 1103|    138|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1104|   170k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1105|   149k|            _ => self.parse_relative(),
 1106|       |        }
 1107|   176k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE10parse_hostCs4WjTcpTVJQo_5oxttl:
 1255|  5.08k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1256|  5.08k|        if self.input.starts_with('[') {
 1257|       |            // IP v6
 1258|      4|            let start_position = self.input.position;
 1259|    132|            while let Some(c) = self.input.next() {
 1260|    128|                self.output.push(c);
 1261|    128|                if c == ']' {
 1262|      0|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1263|      0|                    if let Err(error) = Ipv6Addr::from_str(ip) {
 1264|      0|                        return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1265|      0|                    }
 1266|      0|
 1267|      0|                    let c = self.input.next();
 1268|      0|                    return match c {
 1269|       |                        Some(':') => {
 1270|      0|                            self.output.push(':');
 1271|      0|                            self.parse_port()
 1272|       |                        }
 1273|       |                        None | Some('/') | Some('?') | Some('#') => {
 1274|      0|                            self.output_positions.authority_end = self.output.len();
 1275|      0|                            self.parse_path_start(c)
 1276|       |                        }
 1277|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1278|       |                    };
 1279|    128|                }
 1280|       |            }
 1281|      4|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1282|       |        } else {
 1283|       |            // Other host
 1284|   113k|            loop {
 1285|   113k|                let c = self.input.next();
 1286|   113k|                match c {
 1287|       |                    Some(':') => {
 1288|  2.97k|                        self.output.push(':');
 1289|  2.97k|                        return self.parse_port();
 1290|       |                    }
 1291|       |                    None | Some('/') | Some('?') | Some('#') => {
 1292|  1.80k|                        self.output_positions.authority_end = self.output.len();
 1293|  1.80k|                        return self.parse_path_start(c);
 1294|       |                    }
 1295|   108k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1296|       |                }
 1297|       |            }
 1298|       |        }
 1299|  5.08k|    }
_RNvMCs72NQLJxIjgJ_5oxiriINtB2_6IriRefNtNtCsdBW21Yiwikk_5alloc6string6StringE7resolveCs4WjTcpTVJQo_5oxttl:
   71|   176k|    pub fn resolve(&self, iri: &str) -> Result<IriRef<String>, IriParseError> {
   72|   176k|        let mut target_buffer = String::with_capacity(self.iri.len() + iri.len());
   73|   176k|        let positions = IriParser::parse(iri, Some(self.as_ref()), &mut target_buffer)?;
   74|   143k|        Ok(IriRef {
   75|   143k|            iri: target_buffer,
   76|   143k|            positions,
   77|   143k|        })
   78|   176k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE12parse_schemeCs4WjTcpTVJQo_5oxttl:
 1109|  27.0k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1110|   185k|        loop {
 1111|   185k|            let c = self.input.next();
 1112|   182k|            match c {
 1113|   182k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1114|   158k|                    self.output.push(c)
 1115|       |                }
 1116|       |                Some(':') => {
 1117|  8.99k|                    self.output.push(':');
 1118|  8.99k|                    self.output_positions.scheme_end = self.output.len();
 1119|  8.99k|                    self.input_scheme_end = self.input.position;
 1120|  8.99k|                    return if self.input.starts_with('/') {
 1121|  6.89k|                        self.input.next();
 1122|  6.89k|                        self.output.push('/');
 1123|  6.89k|                        self.parse_path_or_authority()
 1124|       |                    } else {
 1125|  2.10k|                        self.output_positions.authority_end = self.output.len();
 1126|  2.10k|                        self.parse_path()
 1127|       |                    };
 1128|       |                }
 1129|       |                _ => {
 1130|  18.0k|                    self.input = ParserInput {
 1131|  18.0k|                        value: self.iri.chars(),
 1132|  18.0k|                        position: 0,
 1133|  18.0k|                    }; // reset
 1134|  18.0k|                    self.output.clear();
 1135|  18.0k|                    return self.parse_relative();
 1136|       |                }
 1137|       |            }
 1138|       |        }
 1139|  27.0k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE10parse_portCs4WjTcpTVJQo_5oxttl:
 1301|  2.97k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1302|  4.73k|        loop {
 1303|  4.73k|            let c = self.input.next();
 1304|  4.58k|            match c {
 1305|  4.58k|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1306|       |                Some('/') | Some('?') | Some('#') | None => {
 1307|  2.82k|                    self.output_positions.authority_end = self.output.len();
 1308|  2.82k|                    return self.parse_path_start(c);
 1309|       |                }
 1310|    146|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1311|       |            }
 1312|       |        }
 1313|  2.97k|    }
_RNvMCs72NQLJxIjgJ_5oxiriINtB2_6IriRefNtNtCsdBW21Yiwikk_5alloc6string6StringE6as_refCs4WjTcpTVJQo_5oxttl:
  101|   176k|    pub fn as_ref(&self) -> IriRef<&str> {
  102|   176k|        IriRef {
  103|   176k|            iri: &self.iri,
  104|   176k|            positions: self.positions,
  105|   176k|        }
  106|   176k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE14parse_relativeCs4WjTcpTVJQo_5oxttl:
 1152|   167k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1153|   167k|        if let Some(base) = self.base {
 1154|   167k|            match self.input.front() {
 1155|       |                None => {
 1156|  6.16k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1157|  6.16k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1158|  6.16k|                    self.output_positions.authority_end = base.positions.authority_end;
 1159|  6.16k|                    self.output_positions.path_end = base.positions.path_end;
 1160|  6.16k|                    self.output_positions.query_end = base.positions.query_end;
 1161|  6.16k|                    Ok(())
 1162|       |                }
 1163|       |                Some('/') => {
 1164|   122k|                    self.input.next();
 1165|   122k|                    self.parse_relative_slash(&base)
 1166|       |                }
 1167|       |                Some('?') => {
 1168|  4.77k|                    self.input.next();
 1169|  4.77k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1170|  4.77k|                    self.output.push('?');
 1171|  4.77k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1172|  4.77k|                    self.output_positions.authority_end = base.positions.authority_end;
 1173|  4.77k|                    self.output_positions.path_end = base.positions.path_end;
 1174|  4.77k|                    self.parse_query()
 1175|       |                }
 1176|       |                Some('#') => {
 1177|  1.27k|                    self.input.next();
 1178|  1.27k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1179|  1.27k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1180|  1.27k|                    self.output_positions.authority_end = base.positions.authority_end;
 1181|  1.27k|                    self.output_positions.path_end = base.positions.path_end;
 1182|  1.27k|                    self.output_positions.query_end = base.positions.query_end;
 1183|  1.27k|                    self.output.push('#');
 1184|  1.27k|                    self.parse_fragment()
 1185|       |                }
 1186|       |                _ => {
 1187|  32.7k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1188|  32.7k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1189|  32.7k|                    self.output_positions.authority_end = base.positions.authority_end;
 1190|  32.7k|                    self.output_positions.path_end = base.positions.path_end;
 1191|  32.7k|                    self.remove_last_segment();
 1192|  32.7k|                    if self.output.len() > base.positions.scheme_end {
 1193|  32.7k|                        // We have some path or authority, we keep a base '/'
 1194|  32.7k|                        self.output.push('/');
 1195|  32.7k|                    }
 1196|  32.7k|                    self.parse_path()
 1197|       |                }
 1198|       |            }
 1199|       |        } else {
 1200|      0|            self.output_positions.scheme_end = 0;
 1201|      0|            self.input_scheme_end = 0;
 1202|      0|            if self.input.starts_with('/') {
 1203|      0|                self.input.next();
 1204|      0|                self.output.push('/');
 1205|      0|                self.parse_path_or_authority()
 1206|       |            } else {
 1207|      0|                self.output_positions.authority_end = 0;
 1208|      0|                self.parse_path()
 1209|       |            }
 1210|       |        }
 1211|   167k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE10parse_pathCs4WjTcpTVJQo_5oxttl:
 1344|   157k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1345|   584k|        loop {
 1346|   584k|            let c = self.input.next();
 1347|   584k|            match c {
 1348|       |                None | Some('/') | Some('?') | Some('#') => {
 1349|   153k|                    if self.output.as_str().ends_with("/..") {
 1350|    956|                        self.remove_last_segment();
 1351|    956|                        self.remove_last_segment();
 1352|    956|                        self.output.push('/');
 1353|   152k|                    } else if self.output.as_str().ends_with("/.") {
 1354|   117k|                        self.remove_last_segment();
 1355|   117k|                        self.output.push('/');
 1356|   117k|                    } else if c == Some('/') {
 1357|  13.2k|                        self.output.push('/');
 1358|  21.7k|                    }
 1359|       |
 1360|   153k|                    if c == Some('?') {
 1361|  1.92k|                        self.output_positions.path_end = self.output.len();
 1362|  1.92k|                        self.output.push('?');
 1363|  1.92k|                        return self.parse_query();
 1364|   151k|                    } else if c == Some('#') {
 1365|  5.81k|                        self.output_positions.path_end = self.output.len();
 1366|  5.81k|                        self.output_positions.query_end = self.output.len();
 1367|  5.81k|                        self.output.push('#');
 1368|  5.81k|                        return self.parse_fragment();
 1369|   146k|                    } else if c == None {
 1370|   132k|                        self.output_positions.path_end = self.output.len();
 1371|   132k|                        self.output_positions.query_end = self.output.len();
 1372|   132k|                        return Ok(());
 1373|  13.2k|                    }
 1374|       |                }
 1375|   430k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1376|       |            }
 1377|       |        }
 1378|   157k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE10read_echarCs4WjTcpTVJQo_5oxttl:
 1434|  4.41k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1435|  4.41k|        let c1 = self.input.next();
 1436|  4.41k|        let c2 = self.input.next();
 1437|  4.41k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1438|  1.84k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1439|       |        {
 1440|  1.62k|            self.output.push('%');
 1441|  1.62k|            self.output.push(c1.unwrap());
 1442|  1.62k|            self.output.push(c2.unwrap());
 1443|  1.62k|            Ok(())
 1444|       |        } else {
 1445|  2.79k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1446|  2.79k|                Some('%'),
 1447|  2.79k|                c1,
 1448|  2.79k|                c2,
 1449|  2.79k|            ]))
 1450|       |        }
 1451|  4.41k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE27read_url_codepoint_or_echarCs4WjTcpTVJQo_5oxttl:
 1410|   829k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1411|   829k|        if c == '%' {
 1412|  2.85k|            self.read_echar()
 1413|   827k|        } else if is_url_code_point(c) {
 1414|   801k|            self.output.push(c);
 1415|   801k|            Ok(())
 1416|       |        } else {
 1417|  25.8k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1418|       |        }
 1419|   829k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE5parseCs4WjTcpTVJQo_5oxttl:
 1076|   176k|    fn parse(
 1077|   176k|        iri: &'a str,
 1078|   176k|        base: Option<IriRef<&'a str>>,
 1079|   176k|        output: &'a mut O,
 1080|   176k|    ) -> Result<IriElementsPositions, IriParseError> {
 1081|   176k|        let mut parser = Self {
 1082|   176k|            iri,
 1083|   176k|            base,
 1084|   176k|            input: ParserInput {
 1085|   176k|                value: iri.chars(),
 1086|   176k|                position: 0,
 1087|   176k|            },
 1088|   176k|            output,
 1089|   176k|            output_positions: IriElementsPositions {
 1090|   176k|                scheme_end: 0,
 1091|   176k|                authority_end: 0,
 1092|   176k|                path_end: 0,
 1093|   176k|                query_end: 0,
 1094|   176k|            },
 1095|   176k|            input_scheme_end: 0,
 1096|   176k|        };
 1097|   176k|        parser.parse_scheme_start()?;
 1098|   143k|        Ok(parser.output_positions)
 1099|   176k|    }
_RNCNvMs11_Cs72NQLJxIjgJ_5oxiriINtB8_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE10read_echars_0Cs4WjTcpTVJQo_5oxttl:
 1438|  1.82k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE19remove_last_segmentCs4WjTcpTVJQo_5oxttl:
 1401|   152k|    fn remove_last_segment(&mut self) {
 1402|   152k|        let last_slash_position = self.output.as_str()[self.output_positions.authority_end..]
 1403|   152k|            .rfind('/')
 1404|   152k|            .unwrap_or(0);
 1405|   152k|        self.output
 1406|   152k|            .truncate(last_slash_position + self.output_positions.authority_end)
 1407|   152k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE23parse_path_or_authorityCs4WjTcpTVJQo_5oxttl:
 1141|  6.89k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1142|  6.89k|        if self.input.starts_with('/') {
 1143|  6.74k|            self.input.next();
 1144|  6.74k|            self.output.push('/');
 1145|  6.74k|            self.parse_authority()
 1146|       |        } else {
 1147|    150|            self.output_positions.authority_end = self.output.len() - 1;
 1148|    150|            self.parse_path()
 1149|       |        }
 1150|  6.89k|    }
_RINvMs11_Cs72NQLJxIjgJ_5oxiriINtB7_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE11parse_erroruECs4WjTcpTVJQo_5oxttl:
 1454|  33.5k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1455|  33.5k|        Err(IriParseError { kind })
 1456|  33.5k|    }
_RNvMsp_Cs72NQLJxIjgJ_5oxiriINtB5_3IriNtNtCsdBW21Yiwikk_5alloc6string6StringE7resolveCs4WjTcpTVJQo_5oxttl:
  516|   176k|    pub fn resolve(&self, iri: &str) -> Result<Iri<String>, IriParseError> {
  517|   176k|        Ok(Iri(self.0.resolve(iri)?))
  518|   176k|    }
_RNCNvMs11_Cs72NQLJxIjgJ_5oxiriINtB8_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE10read_echar0Cs4WjTcpTVJQo_5oxttl:
 1437|  4.12k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE14parse_fragmentCs4WjTcpTVJQo_5oxttl:
 1394|  7.62k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1395|  67.8k|        while let Some(c) = self.input.next() {
 1396|  65.7k|            self.read_url_codepoint_or_echar(c)?
 1397|       |        }
 1398|  2.15k|        Ok(())
 1399|  7.62k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtNtCsdBW21Yiwikk_5alloc6string6StringE15parse_authorityCs4WjTcpTVJQo_5oxttl:
 1231|  10.2k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1232|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1233|   230k|        loop {
 1234|   230k|            let c = self.input.next();
 1235|   230k|            match c {
 1236|       |                Some('@') => {
 1237|    238|                    self.output.push('@');
 1238|    238|                    return self.parse_host();
 1239|       |                }
 1240|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1241|  4.84k|                    self.input = ParserInput {
 1242|  4.84k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1243|  4.84k|                        position: self.input_scheme_end + 2,
 1244|  4.84k|                    };
 1245|  4.84k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1246|  4.84k|                    return self.parse_host();
 1247|       |                }
 1248|   225k|                Some(c) => {
 1249|   225k|                    self.read_url_codepoint_or_echar(c)?;
 1250|       |                }
 1251|       |            }
 1252|       |        }
 1253|  10.2k|    }
_RNvMs10_Cs72NQLJxIjgJ_5oxiriNtB6_11ParserInput4nextCs4WjTcpTVJQo_5oxttl:
 1043|  1.46M|    fn next(&mut self) -> Option<char> {
 1044|  1.46M|        if let Some(head) = self.value.next() {
 1045|  1.32M|            self.position += head.len_utf8();
 1046|  1.32M|            Some(head)
 1047|       |        } else {
 1048|   142k|            None
 1049|       |        }
 1050|  1.46M|    }
_RNvMs10_Cs72NQLJxIjgJ_5oxiriNtB6_11ParserInput11starts_withCs4WjTcpTVJQo_5oxttl:
 1058|   143k|    fn starts_with(&self, c: char) -> bool {
 1059|   143k|        self.value.as_str().starts_with(c)
 1060|   143k|    }
_RNvMs10_Cs72NQLJxIjgJ_5oxiriNtB6_11ParserInput5frontCs4WjTcpTVJQo_5oxttl:
 1053|   344k|    fn front(&self) -> Option<char> {
 1054|   344k|        self.value.clone().next()
 1055|   344k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_pathCsbrE1BkJ52QU_5oxrdf:
 1344|   275k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1345|  5.57M|        loop {
 1346|  5.57M|            let c = self.input.next();
 1347|  5.57M|            match c {
 1348|       |                None | Some('/') | Some('?') | Some('#') => {
 1349|   718k|                    if self.output.as_str().ends_with("/..") {
 1350|      0|                        self.remove_last_segment();
 1351|      0|                        self.remove_last_segment();
 1352|      0|                        self.output.push('/');
 1353|   718k|                    } else if self.output.as_str().ends_with("/.") {
 1354|      0|                        self.remove_last_segment();
 1355|      0|                        self.output.push('/');
 1356|   718k|                    } else if c == Some('/') {
 1357|   442k|                        self.output.push('/');
 1358|   442k|                    }
 1359|       |
 1360|   718k|                    if c == Some('?') {
 1361|    168|                        self.output_positions.path_end = self.output.len();
 1362|    168|                        self.output.push('?');
 1363|    168|                        return self.parse_query();
 1364|   717k|                    } else if c == Some('#') {
 1365|   220k|                        self.output_positions.path_end = self.output.len();
 1366|   220k|                        self.output_positions.query_end = self.output.len();
 1367|   220k|                        self.output.push('#');
 1368|   220k|                        return self.parse_fragment();
 1369|   497k|                    } else if c == None {
 1370|  55.1k|                        self.output_positions.path_end = self.output.len();
 1371|  55.1k|                        self.output_positions.query_end = self.output.len();
 1372|  55.1k|                        return Ok(());
 1373|   442k|                    }
 1374|       |                }
 1375|  4.86M|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1376|       |            }
 1377|       |        }
 1378|   275k|    }
_RNvXsV_Cs72NQLJxIjgJ_5oxiriINtB5_3IriNtNtCsdBW21Yiwikk_5alloc6string6StringEINtNtCsl2lhD68vXAd_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsbrE1BkJ52QU_5oxrdf:
  871|   275k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  872|   275k|        if iri.is_absolute() {
  873|   275k|            Ok(Self(iri))
  874|       |        } else {
  875|      0|            Err(IriParseError {
  876|      0|                kind: IriParseErrorKind::NoScheme,
  877|      0|            })
  878|       |        }
  879|   275k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE18parse_scheme_startCsbrE1BkJ52QU_5oxrdf:
 1101|   275k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1102|   275k|        match self.input.front() {
 1103|      0|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1104|   275k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1105|      0|            _ => self.parse_relative(),
 1106|       |        }
 1107|   275k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_hostCsbrE1BkJ52QU_5oxrdf:
 1255|   275k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1256|   275k|        if self.input.starts_with('[') {
 1257|       |            // IP v6
 1258|      0|            let start_position = self.input.position;
 1259|      0|            while let Some(c) = self.input.next() {
 1260|      0|                self.output.push(c);
 1261|      0|                if c == ']' {
 1262|      0|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1263|      0|                    if let Err(error) = Ipv6Addr::from_str(ip) {
 1264|      0|                        return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1265|      0|                    }
 1266|      0|
 1267|      0|                    let c = self.input.next();
 1268|      0|                    return match c {
 1269|       |                        Some(':') => {
 1270|      0|                            self.output.push(':');
 1271|      0|                            self.parse_port()
 1272|       |                        }
 1273|       |                        None | Some('/') | Some('?') | Some('#') => {
 1274|      0|                            self.output_positions.authority_end = self.output.len();
 1275|      0|                            self.parse_path_start(c)
 1276|       |                        }
 1277|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1278|       |                    };
 1279|      0|                }
 1280|       |            }
 1281|      0|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1282|       |        } else {
 1283|       |            // Other host
 1284|  3.08M|            loop {
 1285|  3.08M|                let c = self.input.next();
 1286|  3.08M|                match c {
 1287|       |                    Some(':') => {
 1288|     16|                        self.output.push(':');
 1289|     16|                        return self.parse_port();
 1290|       |                    }
 1291|       |                    None | Some('/') | Some('?') | Some('#') => {
 1292|   275k|                        self.output_positions.authority_end = self.output.len();
 1293|   275k|                        return self.parse_path_start(c);
 1294|       |                    }
 1295|  2.81M|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1296|       |                }
 1297|       |            }
 1298|       |        }
 1299|   275k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE16parse_path_startCsbrE1BkJ52QU_5oxrdf:
 1315|   275k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1316|   275k|        match c {
 1317|       |            None => {
 1318|    264|                self.output_positions.path_end = self.output.len();
 1319|    264|                self.output_positions.query_end = self.output.len();
 1320|    264|                Ok(())
 1321|       |            }
 1322|       |            Some('?') => {
 1323|      0|                self.output_positions.path_end = self.output.len();
 1324|      0|                self.output.push('?');
 1325|      0|                self.parse_query()
 1326|       |            }
 1327|       |            Some('#') => {
 1328|      0|                self.output_positions.path_end = self.output.len();
 1329|      0|                self.output_positions.query_end = self.output.len();
 1330|      0|                self.output.push('#');
 1331|      0|                self.parse_fragment()
 1332|       |            }
 1333|       |            Some('/') => {
 1334|   275k|                self.output.push('/');
 1335|   275k|                self.parse_path()
 1336|       |            }
 1337|      0|            Some(c) => {
 1338|      0|                self.read_url_codepoint_or_echar(c)?;
 1339|      0|                self.parse_path()
 1340|       |            }
 1341|       |        }
 1342|   275k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE33read_url_query_codepoint_or_echarCsbrE1BkJ52QU_5oxrdf:
 1422|  1.90k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1423|  1.90k|        if c == '%' {
 1424|     15|            self.read_echar()
 1425|  1.89k|        } else if is_url_query_code_point(c) {
 1426|  1.89k|            self.output.push(c);
 1427|  1.89k|            Ok(())
 1428|       |        } else {
 1429|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1430|       |        }
 1431|  1.90k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10read_echarCsbrE1BkJ52QU_5oxrdf:
 1434|     19|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1435|     19|        let c1 = self.input.next();
 1436|     19|        let c2 = self.input.next();
 1437|     19|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1438|     19|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1439|       |        {
 1440|     19|            self.output.push('%');
 1441|     19|            self.output.push(c1.unwrap());
 1442|     19|            self.output.push(c2.unwrap());
 1443|     19|            Ok(())
 1444|       |        } else {
 1445|      0|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1446|      0|                Some('%'),
 1447|      0|                c1,
 1448|      0|                c2,
 1449|      0|            ]))
 1450|       |        }
 1451|     19|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE5parseCsbrE1BkJ52QU_5oxrdf:
 1076|   275k|    fn parse(
 1077|   275k|        iri: &'a str,
 1078|   275k|        base: Option<IriRef<&'a str>>,
 1079|   275k|        output: &'a mut O,
 1080|   275k|    ) -> Result<IriElementsPositions, IriParseError> {
 1081|   275k|        let mut parser = Self {
 1082|   275k|            iri,
 1083|   275k|            base,
 1084|   275k|            input: ParserInput {
 1085|   275k|                value: iri.chars(),
 1086|   275k|                position: 0,
 1087|   275k|            },
 1088|   275k|            output,
 1089|   275k|            output_positions: IriElementsPositions {
 1090|   275k|                scheme_end: 0,
 1091|   275k|                authority_end: 0,
 1092|   275k|                path_end: 0,
 1093|   275k|                query_end: 0,
 1094|   275k|            },
 1095|   275k|            input_scheme_end: 0,
 1096|   275k|        };
 1097|   275k|        parser.parse_scheme_start()?;
 1098|   275k|        Ok(parser.output_positions)
 1099|   275k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE14parse_fragmentCsbrE1BkJ52QU_5oxrdf:
 1394|   220k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1395|  1.25M|        while let Some(c) = self.input.next() {
 1396|  1.03M|            self.read_url_codepoint_or_echar(c)?
 1397|       |        }
 1398|   220k|        Ok(())
 1399|   220k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE12parse_schemeCsbrE1BkJ52QU_5oxrdf:
 1109|   275k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1110|  1.37M|        loop {
 1111|  1.37M|            let c = self.input.next();
 1112|  1.37M|            match c {
 1113|  1.37M|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1114|  1.10M|                    self.output.push(c)
 1115|       |                }
 1116|       |                Some(':') => {
 1117|   275k|                    self.output.push(':');
 1118|   275k|                    self.output_positions.scheme_end = self.output.len();
 1119|   275k|                    self.input_scheme_end = self.input.position;
 1120|   275k|                    return if self.input.starts_with('/') {
 1121|   275k|                        self.input.next();
 1122|   275k|                        self.output.push('/');
 1123|   275k|                        self.parse_path_or_authority()
 1124|       |                    } else {
 1125|     72|                        self.output_positions.authority_end = self.output.len();
 1126|     72|                        self.parse_path()
 1127|       |                    };
 1128|       |                }
 1129|       |                _ => {
 1130|      0|                    self.input = ParserInput {
 1131|      0|                        value: self.iri.chars(),
 1132|      0|                        position: 0,
 1133|      0|                    }; // reset
 1134|      0|                    self.output.clear();
 1135|      0|                    return self.parse_relative();
 1136|       |                }
 1137|       |            }
 1138|       |        }
 1139|   275k|    }
_RNvMsp_Cs72NQLJxIjgJ_5oxiriINtB5_3IriNtNtCsdBW21Yiwikk_5alloc6string6StringE5parseCsbrE1BkJ52QU_5oxrdf:
  501|   275k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  502|   275k|        IriRef::parse(iri)?.try_into()
  503|   275k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE23parse_path_or_authorityCsbrE1BkJ52QU_5oxrdf:
 1141|   275k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1142|   275k|        if self.input.starts_with('/') {
 1143|   275k|            self.input.next();
 1144|   275k|            self.output.push('/');
 1145|   275k|            self.parse_authority()
 1146|       |        } else {
 1147|     14|            self.output_positions.authority_end = self.output.len() - 1;
 1148|     14|            self.parse_path()
 1149|       |        }
 1150|   275k|    }
_RNvMCs72NQLJxIjgJ_5oxiriINtB2_6IriRefNtNtCsdBW21Yiwikk_5alloc6string6StringE5parseCsbrE1BkJ52QU_5oxrdf:
   55|   275k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   56|   275k|        let positions = IriParser::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   57|   275k|        Ok(Self { iri, positions })
   58|   275k|    }
_RNvMCs72NQLJxIjgJ_5oxiriINtB2_6IriRefNtNtCsdBW21Yiwikk_5alloc6string6StringE11is_absoluteCsbrE1BkJ52QU_5oxrdf:
  146|   275k|    pub fn is_absolute(&self) -> bool {
  147|   275k|        self.positions.scheme_end != 0
  148|   275k|    }
_RNCNvMs11_Cs72NQLJxIjgJ_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferE10read_echars_0CsbrE1BkJ52QU_5oxrdf:
 1438|     19|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE11parse_queryCsbrE1BkJ52QU_5oxrdf:
 1380|    168|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1381|  2.07k|        while let Some(c) = self.input.next() {
 1382|  1.92k|            if c == '#' {
 1383|     15|                self.output_positions.query_end = self.output.len();
 1384|     15|                self.output.push('#');
 1385|     15|                return self.parse_fragment();
 1386|       |            } else {
 1387|  1.90k|                self.read_url_query_codepoint_or_echar(c)?
 1388|       |            }
 1389|       |        }
 1390|    153|        self.output_positions.query_end = self.output.len();
 1391|    153|        Ok(())
 1392|    168|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE15parse_authorityCsbrE1BkJ52QU_5oxrdf:
 1231|   275k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1232|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1233|  3.08M|        loop {
 1234|  3.08M|            let c = self.input.next();
 1235|  3.08M|            match c {
 1236|       |                Some('@') => {
 1237|      0|                    self.output.push('@');
 1238|      0|                    return self.parse_host();
 1239|       |                }
 1240|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1241|   275k|                    self.input = ParserInput {
 1242|   275k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1243|   275k|                        position: self.input_scheme_end + 2,
 1244|   275k|                    };
 1245|   275k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1246|   275k|                    return self.parse_host();
 1247|       |                }
 1248|  2.81M|                Some(c) => {
 1249|  2.81M|                    self.read_url_codepoint_or_echar(c)?;
 1250|       |                }
 1251|       |            }
 1252|       |        }
 1253|   275k|    }
_RNvMsp_Cs72NQLJxIjgJ_5oxiriINtB5_3IriNtNtCsdBW21Yiwikk_5alloc6string6StringE10into_innerCsbrE1BkJ52QU_5oxrdf:
  568|   350k|    pub fn into_inner(self) -> T {
  569|   350k|        self.0.into_inner()
  570|   350k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_portCsbrE1BkJ52QU_5oxrdf:
 1301|     16|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1302|     16|        loop {
 1303|     16|            let c = self.input.next();
 1304|     16|            match c {
 1305|     16|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1306|       |                Some('/') | Some('?') | Some('#') | None => {
 1307|     16|                    self.output_positions.authority_end = self.output.len();
 1308|     16|                    return self.parse_path_start(c);
 1309|       |                }
 1310|      0|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1311|       |            }
 1312|       |        }
 1313|     16|    }
_RNvMCs72NQLJxIjgJ_5oxiriINtB2_6IriRefNtNtCsdBW21Yiwikk_5alloc6string6StringE10into_innerCsbrE1BkJ52QU_5oxrdf:
  132|   350k|    pub fn into_inner(self) -> T {
  133|   350k|        self.iri
  134|   350k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE27read_url_codepoint_or_echarCsbrE1BkJ52QU_5oxrdf:
 1410|  11.5M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1411|  11.5M|        if c == '%' {
 1412|      4|            self.read_echar()
 1413|  11.5M|        } else if is_url_code_point(c) {
 1414|  11.5M|            self.output.push(c);
 1415|  11.5M|            Ok(())
 1416|       |        } else {
 1417|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1418|       |        }
 1419|  11.5M|    }
_RNCNvMs11_Cs72NQLJxIjgJ_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferE10read_echar0CsbrE1BkJ52QU_5oxrdf:
 1437|     19|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs10_Cs72NQLJxIjgJ_5oxiriNtB6_11ParserInput5frontCsbrE1BkJ52QU_5oxrdf:
 1053|   275k|    fn front(&self) -> Option<char> {
 1054|   275k|        self.value.clone().next()
 1055|   275k|    }
_RNvMs10_Cs72NQLJxIjgJ_5oxiriNtB6_11ParserInput11starts_withCsbrE1BkJ52QU_5oxrdf:
 1058|   827k|    fn starts_with(&self, c: char) -> bool {
 1059|   827k|        self.value.as_str().starts_with(c)
 1060|   827k|    }
_RNvXs1b_Cs72NQLJxIjgJ_5oxiriNtB6_16VoidOutputBufferNtNtCsl2lhD68vXAd_4core7default7Default7defaultCsbrE1BkJ52QU_5oxrdf:
  968|   275k|#[derive(Default)]
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCsbrE1BkJ52QU_5oxrdf:
  990|   275k|    fn truncate(&mut self, new_len: usize) {
  991|   275k|        self.len = new_len;
  992|   275k|    }
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCsbrE1BkJ52QU_5oxrdf:
  995|  1.10M|    fn len(&self) -> usize {
  996|  1.10M|        self.len
  997|  1.10M|    }
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCsbrE1BkJ52QU_5oxrdf:
 1000|  1.43M|    fn as_str(&self) -> &str {
 1001|  1.43M|        ""
 1002|  1.43M|    }
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsbrE1BkJ52QU_5oxrdf:
  975|  14.3M|    fn push(&mut self, c: char) {
  976|  14.3M|        self.len += c.len_utf8();
  977|  14.3M|    }
_RNvMs10_Cs72NQLJxIjgJ_5oxiriNtB6_11ParserInput4nextCsbrE1BkJ52QU_5oxrdf:
 1043|  14.9M|    fn next(&mut self) -> Option<char> {
 1044|  14.9M|        if let Some(head) = self.value.next() {
 1045|  14.6M|            self.position += head.len_utf8();
 1046|  14.6M|            Some(head)
 1047|       |        } else {
 1048|   276k|            None
 1049|       |        }
 1050|  14.9M|    }
_RNvCs72NQLJxIjgJ_5oxiri17is_url_code_point:
 1459|  12.4M|fn is_url_code_point(c: char) -> bool {
 1460|  12.4M|    matches!(c,
 1461|  7.91M|        'a'..='z'
 1462|   230k|        | 'A'..='Z'
 1463|  2.38M|        | '0'..='9'
 1464|       |        | '!'
 1465|       |        | '$'
 1466|       |        | '&'
 1467|       |        | '\''
 1468|       |        | '('
 1469|       |        | ')'
 1470|       |        | '*'
 1471|       |        | '+'
 1472|       |        | ','
 1473|       |        | '-'
 1474|       |        | '.'
 1475|       |        | '/'
 1476|       |        | ':'
 1477|       |        | ';'
 1478|       |        | '='
 1479|       |        | '?'
 1480|       |        | '@'
 1481|       |        | '_'
 1482|       |        | '~'
 1483|  2.66k|        | '\u{A0}'..='\u{D7FF}'
 1484|      3|        | '\u{F900}'..='\u{FDCF}'
 1485|      0|        | '\u{FDF0}'..='\u{FFEF}'
 1486|      0|        | '\u{10000}'..='\u{1FFFD}'
 1487|      0|        | '\u{20000}'..='\u{2FFFD}'
 1488|      0|        | '\u{30000}'..='\u{3FFFD}'
 1489|      0|        | '\u{40000}'..='\u{4FFFD}'
 1490|      0|        | '\u{50000}'..='\u{5FFFD}'
 1491|      0|        | '\u{60000}'..='\u{6FFFD}'
 1492|      0|        | '\u{70000}'..='\u{7FFFD}'
 1493|      0|        | '\u{80000}'..='\u{8FFFD}'
 1494|      0|        | '\u{90000}'..='\u{9FFFD}'
 1495|      0|        | '\u{A0000}'..='\u{AFFFD}'
 1496|      0|        | '\u{B0000}'..='\u{BFFFD}'
 1497|      0|        | '\u{C0000}'..='\u{CFFFD}'
 1498|      0|        | '\u{D0000}'..='\u{DFFFD}'
 1499|      0|        | '\u{E1000}'..='\u{EFFFD}'
 1500|       |    )
 1501|  12.4M|}
_RNvXsW_Cs72NQLJxIjgJ_5oxiriNtB5_13IriParseErrorNtNtCsl2lhD68vXAd_4core3fmt7Display3fmt:
  906|  33.5k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  907|  33.5k|        match &self.kind {
  908|    138|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
  909|      4|            IriParseErrorKind::InvalidHostCharacter(c) => {
  910|      4|                write!(f, "Invalid character '{}' in host", c)
  911|       |            }
  912|      0|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({})", e),
  913|    146|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{}'", c),
  914|  30.4k|            IriParseErrorKind::InvalidIriCodePoint(c) => {
  915|  30.4k|                write!(f, "Invalid IRI code point '{}'", c)
  916|       |            }
  917|  2.79k|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
  918|  2.79k|                f,
  919|  2.79k|                "Invalid IRI percent encoding '{}'",
  920|  2.79k|                cs.iter().flatten().cloned().collect::<String>()
  921|  2.79k|            ),
  922|       |        }
  923|  33.5k|    }
_RNvCs72NQLJxIjgJ_5oxiri23is_url_query_code_point:
 1503|   122k|fn is_url_query_code_point(c: char) -> bool {
 1504|   122k|    is_url_code_point(c)
 1505|  4.68k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1506|   122k|}

_RNvXsM_NtCscqn4bkiv6Zi_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCsl2lhD68vXAd_4core3ops5arith9AddAssign10add_assignCskMJXU54EgBa_11rand_chacha:
   32|  2.79M|            fn $fn_assign(&mut self, rhs: Self) {
   33|  2.79M|                (self.0[0]).$fn_assign(rhs.0[0]);
   34|  2.79M|                (self.0[1]).$fn_assign(rhs.0[1]);
   35|  2.79M|            }
_RNvXs_NtCscqn4bkiv6Zi_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right16CskMJXU54EgBa_11rand_chacha:
   42|   699k|        fn $fn(self) -> Self {
   43|   699k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   699k|        }
_RNvXs_NtCscqn4bkiv6Zi_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right25CskMJXU54EgBa_11rand_chacha:
   42|   699k|        fn $fn(self) -> Self {
   43|   699k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   699k|        }
_RNvMNtCscqn4bkiv6Zi_10ppv_lite864softINtB2_2x2INtNtNtNtB4_6x86_644sse24avx212u32x4x2_avx2NtBP_4NoNIENtBN_2G0E3newCskMJXU54EgBa_11rand_chacha:
   13|  7.98M|    pub fn new(xs: [W; 2]) -> Self {
   14|  7.98M|        x2(xs, PhantomData)
   15|  7.98M|    }
_RNvXsg_NtCscqn4bkiv6Zi_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words2301CskMJXU54EgBa_11rand_chacha:
  201|   699k|    fn shuffle_lane_words2301(self) -> Self {
  202|   699k|        Self::new([
  203|   699k|            self.0[0].shuffle_lane_words2301(),
  204|   699k|            self.0[1].shuffle_lane_words2301(),
  205|   699k|        ])
  206|   699k|    }
_RNvXsg_NtCscqn4bkiv6Zi_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words3012CskMJXU54EgBa_11rand_chacha:
  215|   699k|    fn shuffle_lane_words3012(self) -> Self {
  216|   699k|        Self::new([
  217|   699k|            self.0[0].shuffle_lane_words3012(),
  218|   699k|            self.0[1].shuffle_lane_words3012(),
  219|   699k|        ])
  220|   699k|    }
_RNvXsg_NtCscqn4bkiv6Zi_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words1230CskMJXU54EgBa_11rand_chacha:
  208|   699k|    fn shuffle_lane_words1230(self) -> Self {
  209|   699k|        Self::new([
  210|   699k|            self.0[0].shuffle_lane_words1230(),
  211|   699k|            self.0[1].shuffle_lane_words1230(),
  212|   699k|        ])
  213|   699k|    }
_RNvXs_NtCscqn4bkiv6Zi_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right20CskMJXU54EgBa_11rand_chacha:
   42|   699k|        fn $fn(self) -> Self {
   43|   699k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   699k|        }
_RNvXs_NtCscqn4bkiv6Zi_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right24CskMJXU54EgBa_11rand_chacha:
   42|   699k|        fn $fn(self) -> Self {
   43|   699k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   699k|        }
_RNvXsG_NtCscqn4bkiv6Zi_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCsl2lhD68vXAd_4core3ops3bit6BitXor6bitxorCskMJXU54EgBa_11rand_chacha:
   22|  2.79M|            fn $fn(self, rhs: Self) -> Self::Output {
   23|  2.79M|                x2::new([self.0[0].$fn(rhs.0[0]), self.0[1].$fn(rhs.0[1])])
   24|  2.79M|            }

_RINvYINtNtCscqn4bkiv6Zi_10ppv_lite866x86_6410SseMachineNtB6_5YesS3NtB6_5YesS4NtB6_4NoNIENtNtB8_5types7Machine7read_leINtNtB6_4sse210u32x4_sse2BR_B12_B1d_EECskMJXU54EgBa_11rand_chacha:
  259|    456|    fn read_le<V>(self, input: &[u8]) -> V
  260|    456|    where
  261|    456|        V: StoreBytes,
  262|    456|    {
  263|    456|        unsafe { V::unsafe_read_le(input) }
  264|    456|    }
_RINvYINtNtCscqn4bkiv6Zi_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec128_storageINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EECskMJXU54EgBa_11rand_chacha:
  246|   524k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|   524k|        unsafe { V::unpack(s) }
  248|   524k|    }
_RINvYINtNtCscqn4bkiv6Zi_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec512_storageINtNtB8_4soft2x2INtNtNtB6_4sse24avx212u32x4x2_avx2BS_ENtB2b_2G0EECskMJXU54EgBa_11rand_chacha:
  246|  58.2k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|  58.2k|        unsafe { V::unpack(s) }
  248|  58.2k|    }
_RINvYINtNtCscqn4bkiv6Zi_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine3vecINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EAmj4_ECskMJXU54EgBa_11rand_chacha:
  251|  58.2k|    fn vec<V, A>(self, a: A) -> V
  252|  58.2k|    where
  253|  58.2k|        V: MultiLane<A>,
  254|  58.2k|    {
  255|  58.2k|        V::from_lanes(a)
  256|  58.2k|    }

_RNvXNtCscqn4bkiv6Zi_10ppv_lite866x86_64INtB2_10SseMachineNtB2_5YesS3NtB2_5YesS4NtB2_4NoNIENtNtB4_5types7Machine8instanceCskMJXU54EgBa_11rand_chacha:
   64|    228|    unsafe fn instance() -> Self {
   65|    228|        SseMachine(PhantomData)
   66|    228|    }
_RNvNtCskMJXU54EgBa_11rand_chacha4guts11refill_wide:
  250|  58.2k|        $($pub$(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  251|  58.2k|            #[inline(always)]
  252|  58.2k|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  253|  58.2k|            use std::arch::x86_64::*;
  254|  58.2k|            #[target_feature(enable = "avx2")]
  255|  58.2k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  58.2k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  58.2k|                _mm256_zeroupper();
  258|  58.2k|                ret
  259|  58.2k|            }
  260|  58.2k|            #[target_feature(enable = "avx")]
  261|  58.2k|            #[target_feature(enable = "sse4.1")]
  262|  58.2k|            #[target_feature(enable = "ssse3")]
  263|  58.2k|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  264|  58.2k|                let ret = fn_impl($crate::x86_64::AVX::instance(), $($arg),*);
  265|  58.2k|                _mm256_zeroupper();
  266|  58.2k|                ret
  267|  58.2k|            }
  268|  58.2k|            #[target_feature(enable = "sse4.1")]
  269|  58.2k|            #[target_feature(enable = "ssse3")]
  270|  58.2k|            unsafe fn impl_sse41($($arg: $argty),*) -> $ret {
  271|  58.2k|                fn_impl($crate::x86_64::SSE41::instance(), $($arg),*)
  272|  58.2k|            }
  273|  58.2k|            #[target_feature(enable = "ssse3")]
  274|  58.2k|            unsafe fn impl_ssse3($($arg: $argty),*) -> $ret {
  275|  58.2k|                fn_impl($crate::x86_64::SSSE3::instance(), $($arg),*)
  276|  58.2k|            }
  277|  58.2k|            #[target_feature(enable = "sse2")]
  278|  58.2k|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  279|  58.2k|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  280|  58.2k|            }
  281|  58.2k|            unsafe {
  282|  58.2k|                if is_x86_feature_detected!("avx2") {
  283|  58.2k|                    impl_avx2($($arg),*)
  284|      0|                } else if is_x86_feature_detected!("avx") {
  285|      0|                    impl_avx($($arg),*)
  286|      0|                } else if is_x86_feature_detected!("sse4.1") {
  287|      0|                    impl_sse41($($arg),*)
  288|      0|                } else if is_x86_feature_detected!("ssse3") {
  289|      0|                    impl_ssse3($($arg),*)
  290|      0|                } else if is_x86_feature_detected!("sse2") {
  291|      0|                    impl_sse2($($arg),*)
  292|       |                } else {
  293|      0|                    unimplemented!()
  294|       |                }
  295|       |            }
  296|  58.2k|        }
_RNvNvNtCskMJXU54EgBa_11rand_chacha4guts11refill_wide9impl_avx2:
  255|  58.2k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  58.2k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  58.2k|                _mm256_zeroupper();
  258|  58.2k|                ret
  259|  58.2k|            }
_RNvXs_NtCscqn4bkiv6Zi_10ppv_lite866x86_64INtB4_11Avx2MachineNtB4_4NoNIENtNtB6_5types7Machine8instanceCskMJXU54EgBa_11rand_chacha:
   92|  58.2k|    unsafe fn instance() -> Self {
   93|  58.2k|        Avx2Machine(PhantomData)
   94|  58.2k|    }
_RNvNvNtCskMJXU54EgBa_11rand_chacha4guts11init_chacha8impl_avx:
  338|    228|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|    228|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|    228|            }
_RNvNtCskMJXU54EgBa_11rand_chacha4guts11init_chacha:
  333|    228|        $($pub $(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  334|    228|            #[inline(always)]
  335|    228|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  336|    228|            use std::arch::x86_64::*;
  337|    228|            #[target_feature(enable = "avx")]
  338|    228|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|    228|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|    228|            }
  341|    228|            #[target_feature(enable = "sse2")]
  342|    228|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  343|    228|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  344|    228|            }
  345|    228|            unsafe {
  346|    228|                if is_x86_feature_detected!("avx") {
  347|    228|                    impl_avx($($arg),*)
  348|      0|                } else if is_x86_feature_detected!("sse2") {
  349|      0|                    impl_sse2($($arg),*)
  350|       |                } else {
  351|      0|                    unimplemented!()
  352|       |                }
  353|       |            }
  354|    228|        }
_RNvXs2_NtCscqn4bkiv6Zi_10ppv_lite866x86_64NtB5_14vec128_storageINtNtCsl2lhD68vXAd_4core7convert4FromAmj4_E4from:
  130|    228|    fn from(u32x4: [u32; 4]) -> Self {
  131|    228|        vec128_storage { u32x4 }
  132|    228|    }

_RNvXsv_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCsl2lhD68vXAd_4core3ops5arith3Add3addCskMJXU54EgBa_11rand_chacha:
 1543|  5.59M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  5.59M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  5.59M|                }
_RNvXs10_NtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes14unsafe_read_leCskMJXU54EgBa_11rand_chacha:
   79|    456|            unsafe fn unsafe_read_le(input: &[u8]) -> Self {
   80|    456|                assert_eq!(input.len(), 16);
   81|    456|                Self::new(_mm_loadu_si128(input.as_ptr() as *const _))
   82|    456|            }
_RNvXs6_NtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E10from_lanesCskMJXU54EgBa_11rand_chacha:
  331|  58.2k|    fn from_lanes(xs: [u32; 4]) -> Self {
  332|  58.2k|        unsafe {
  333|  58.2k|            let mut x = _mm_cvtsi64_si128((xs[0] as u64 | ((xs[1] as u64) << 32)) as i64);
  334|  58.2k|            x = _mm_insert_epi64(x, (xs[2] as u64 | ((xs[3] as u64) << 32)) as i64, 1);
  335|  58.2k|            Self::new(x)
  336|  58.2k|        }
  337|  58.2k|    }
_RNvXsf_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E8to_lanesCskMJXU54EgBa_11rand_chacha:
 1611|   233k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 4] {
 1612|   233k|            let [a, b] = self.0[0].to_lanes();
 1613|   233k|            let [c, d] = self.0[1].to_lanes();
 1614|   233k|            [a, b, c, d]
 1615|   233k|        }
_RNvXsl_NtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE6insertCskMJXU54EgBa_11rand_chacha:
  523|   815k|    fn insert(self, v: u32, i: u32) -> Self {
  524|   815k|        Self::new(unsafe {
  525|   815k|            match i {
  526|   407k|                0 => _mm_insert_epi32(self.x, v as i32, 0),
  527|   407k|                1 => _mm_insert_epi32(self.x, v as i32, 1),
  528|      0|                2 => _mm_insert_epi32(self.x, v as i32, 2),
  529|      0|                3 => _mm_insert_epi32(self.x, v as i32, 3),
  530|      0|                _ => unreachable!(),
  531|       |            }
  532|       |        })
  533|   815k|    }
_RNvXs6_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right16CskMJXU54EgBa_11rand_chacha:
 1470|  1.39M|            fn $name(self) -> Self {
 1471|  1.39M|                Self::new(unsafe {
 1472|  1.39M|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|  1.39M|                })
 1474|  1.39M|            }
_RNvXsc_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words3012CskMJXU54EgBa_11rand_chacha:
 1590|  1.39M|        fn shuffle_lane_words3012(self) -> Self {
 1591|  1.39M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0011_1001) })
 1592|  1.39M|        }
_RNvXsq_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCsl2lhD68vXAd_4core3ops5arith9AddAssign10add_assignCskMJXU54EgBa_11rand_chacha:
 1527|  5.59M|                fn $assign_fn(&mut self, rhs: Self) {
 1528|  5.59M|                    *self = self.$bin_fn(rhs);
 1529|  5.59M|                }
_RNvMsZ_NtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIE3newCskMJXU54EgBa_11rand_chacha:
   64|  3.26M|            fn new(x: __m128i) -> Self {
   65|  3.26M|                $vec {
   66|  3.26M|                    x,
   67|  3.26M|                    s3: PhantomData,
   68|  3.26M|                    s4: PhantomData,
   69|  3.26M|                    ni: PhantomData,
   70|  3.26M|                }
   71|  3.26M|            }
_RNvXsX_NtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types5StoreNtB7_14vec128_storageE6unpackCskMJXU54EgBa_11rand_chacha:
   52|   524k|            unsafe fn unpack(x: vec128_storage) -> Self {
   53|   524k|                Self::new(x.sse2)
   54|   524k|            }
_RNvXs0_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types5StoreNtB9_14vec256_storageE6unpackCskMJXU54EgBa_11rand_chacha:
 1402|   116k|        unsafe fn unpack(p: vec256_storage) -> Self {
 1403|   116k|            Self::new(p.avx)
 1404|   116k|        }
_RNvXs2_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E10from_lanesCskMJXU54EgBa_11rand_chacha:
 1439|   466k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 2]) -> Self {
 1440|   466k|            Self::new(unsafe { _mm256_setr_m128i(x[0].x, x[1].x) })
 1441|   466k|        }
_RNvXsr_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCsl2lhD68vXAd_4core3ops3bit6BitXor6bitxorCskMJXU54EgBa_11rand_chacha:
 1543|  5.59M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  5.59M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  5.59M|                }
_RNvXse_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types5StoreNtB9_14vec512_storageE6unpackCskMJXU54EgBa_11rand_chacha:
 1602|  58.2k|        unsafe fn unpack(p: vec512_storage) -> Self {
 1603|  58.2k|            Self::new([
 1604|  58.2k|                u32x4x2_avx2::unpack(p.avx[0]),
 1605|  58.2k|                u32x4x2_avx2::unpack(p.avx[1]),
 1606|  58.2k|            ])
 1607|  58.2k|        }
_RNvXs10_NtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes8write_leCskMJXU54EgBa_11rand_chacha:
   89|   932k|            fn write_le(self, out: &mut [u8]) {
   90|   932k|                assert_eq!(out.len(), 16);
   91|   932k|                unsafe { _mm_storeu_si128(out.as_mut_ptr() as *mut _, self.x) }
   92|   932k|            }
_RNvXs2_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E8to_lanesCskMJXU54EgBa_11rand_chacha:
 1430|   466k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 2] {
 1431|   466k|            unsafe {
 1432|   466k|                [
 1433|   466k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 0)),
 1434|   466k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 1)),
 1435|   466k|                ]
 1436|   466k|            }
 1437|   466k|        }
_RNvXs6_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right25CskMJXU54EgBa_11rand_chacha:
 1480|  1.39M|            fn $name(self) -> Self {
 1481|  1.39M|                Self::new(unsafe {
 1482|  1.39M|                    _mm256_or_si256(
 1483|  1.39M|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|  1.39M|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|  1.39M|                    )
 1486|  1.39M|                })
 1487|  1.39M|            }
_RNvXs1R_NtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtNtCsl2lhD68vXAd_4core3ops5arith3Add3addCskMJXU54EgBa_11rand_chacha:
   18|   932k|            fn $fn(self, rhs: Self) -> Self::Output {
   19|   932k|                Self::new(unsafe { $impl_fn(self.x, rhs.x) })
   20|   932k|            }
_RNvXs6_NtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E8to_lanesCskMJXU54EgBa_11rand_chacha:
  323|   233k|    fn to_lanes(self) -> [u32; 4] {
  324|   233k|        unsafe {
  325|   233k|            let x = _mm_cvtsi128_si64(self.x) as u64;
  326|   233k|            let y = _mm_extract_epi64(self.x, 1) as u64;
  327|   233k|            [x as u32, (x >> 32) as u32, y as u32, (y >> 32) as u32]
  328|   233k|        }
  329|   233k|    }
_RNvXs6_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right20CskMJXU54EgBa_11rand_chacha:
 1480|  1.39M|            fn $name(self) -> Self {
 1481|  1.39M|                Self::new(unsafe {
 1482|  1.39M|                    _mm256_or_si256(
 1483|  1.39M|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|  1.39M|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|  1.39M|                    )
 1486|  1.39M|                })
 1487|  1.39M|            }
_RNvXsc_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words1230CskMJXU54EgBa_11rand_chacha:
 1582|  1.39M|        fn shuffle_lane_words1230(self) -> Self {
 1583|  1.39M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b1001_0011) })
 1584|  1.39M|        }
_RNvXsl_NtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE7extractCskMJXU54EgBa_11rand_chacha:
  519|   233k|    fn extract(self, i: u32) -> u32 {
  520|   233k|        self.to_lanes()[i as usize]
  521|   233k|    }
_RNvXsf_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E10from_lanesCskMJXU54EgBa_11rand_chacha:
 1617|   233k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 4]) -> Self {
 1618|   233k|            let ab = u32x4x2_avx2::from_lanes([x[0], x[1]]);
 1619|   233k|            let cd = u32x4x2_avx2::from_lanes([x[2], x[3]]);
 1620|   233k|            Self::new([ab, cd])
 1621|   233k|        }
_RNvMNtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB2_12u32x4x2_avx2NtB6_4NoNIE3newCskMJXU54EgBa_11rand_chacha:
 1394|  21.5M|        fn new(x: __m256i) -> Self {
 1395|  21.5M|            Self { x, ni: PhantomData }
 1396|  21.5M|        }
_RNvXs6_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right24CskMJXU54EgBa_11rand_chacha:
 1470|  1.39M|            fn $name(self) -> Self {
 1471|  1.39M|                Self::new(unsafe {
 1472|  1.39M|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|  1.39M|                })
 1474|  1.39M|            }
_RNvXsc_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words2301CskMJXU54EgBa_11rand_chacha:
 1586|  1.39M|        fn shuffle_lane_words2301(self) -> Self {
 1587|  1.39M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0100_1110) })
 1588|  1.39M|        }
_RNvXsY_NtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse2NtB7_14vec128_storageINtNtCsl2lhD68vXAd_4core7convert4FromINtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEE4fromCskMJXU54EgBa_11rand_chacha:
   58|  58.7k|            fn from(x: $vec<S3, S4, NI>) -> Self {
   59|  58.7k|                vec128_storage { sse2: x.x }
   60|  58.7k|            }
_RNvXsj_NtNtNtCscqn4bkiv6Zi_10ppv_lite866x86_644sse24avx2NtB9_14vec512_storageINtNtCsl2lhD68vXAd_4core7convert4FromINtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EE4fromCskMJXU54EgBa_11rand_chacha:
 1683|  58.2k|        fn from(x: u32x4x4_avx2<NI>) -> Self {
 1684|  58.2k|            Self {
 1685|  58.2k|                avx: [
 1686|  58.2k|                    vec256_storage { avx: x.0[0].x },
 1687|  58.2k|                    vec256_storage { avx: x.0[1].x },
 1688|  58.2k|                ],
 1689|  58.2k|            }
 1690|  58.2k|        }

_RINvXs2_NtNtCsliEG8YhJqi1_4rand13distributions7integerNtB8_8StandardINtNtB8_12distribution12DistributionoE6sampleNtNtNtBa_4rngs6thread9ThreadRngECs4WjTcpTVJQo_5oxttl:
   51|   932k|    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u128 {
   52|   932k|        // Use LE; we explicitly generate one value before the next.
   53|   932k|        let x = u128::from(rng.next_u64());
   54|   932k|        let y = u128::from(rng.next_u64());
   55|   932k|        (y << 64) | x
   56|   932k|    }

_RINvCsliEG8YhJqi1_4rand6randomoECs4WjTcpTVJQo_5oxttl:
  183|   932k|pub fn random<T>() -> T
  184|   932k|where Standard: Distribution<T> {
  185|   932k|    thread_rng().gen()
  186|   932k|}

_RINvYNtNtNtCsliEG8YhJqi1_4rand4rngs6thread9ThreadRngNtNtB9_3rng3Rng3genoECs4WjTcpTVJQo_5oxttl:
   93|   932k|    fn gen<T>(&mut self) -> T
   94|   932k|    where Standard: Distribution<T> {
   95|   932k|        Standard.sample(self)
   96|   932k|    }

_RNvXs_NtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseedingINtB4_12ReseedingRngNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtCsbT0BH6pPOpx_9rand_core2os5OsRngENtB24_7RngCore8next_u64Cs4WjTcpTVJQo_5oxttl:
  124|  1.86M|    fn next_u64(&mut self) -> u64 {
  125|  1.86M|        self.0.next_u64()
  126|  1.86M|    }
_RNvMs3_NtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtCsbT0BH6pPOpx_9rand_core2os5OsRngE3newBb_:
  193|      1|    fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  194|      1|        use ::core::i64::MAX;
  195|      1|        fork::register_fork_handler();
  196|       |
  197|       |        // Because generating more values than `i64::MAX` takes centuries on
  198|       |        // current hardware, we just clamp to that value.
  199|       |        // Also we set a threshold of 0, which indicates no limit, to that
  200|       |        // value.
  201|      1|        let threshold = if threshold == 0 {
  202|      0|            MAX
  203|      1|        } else if threshold <= MAX as u64 {
  204|      1|            threshold as i64
  205|       |        } else {
  206|      0|            MAX
  207|       |        };
  208|       |
  209|      1|        ReseedingCore {
  210|      1|            inner: rng,
  211|      1|            reseeder,
  212|      1|            threshold: threshold as i64,
  213|      1|            bytes_until_reseed: threshold as i64,
  214|      1|            fork_counter: 0,
  215|      1|        }
  216|      1|    }
_RNvMs3_NtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtCsbT0BH6pPOpx_9rand_core2os5OsRngE6reseedBb_:
  219|    227|    fn reseed(&mut self) -> Result<(), Error> {
  220|    227|        R::from_rng(&mut self.reseeder).map(|result| {
  221|       |            self.bytes_until_reseed = self.threshold;
  222|       |            self.inner = result
  223|    227|        })
  224|    227|    }
_RNvMs3_NtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtCsbT0BH6pPOpx_9rand_core2os5OsRngE9is_forkedBb_:
  226|  58.2k|    fn is_forked(&self, global_fork_counter: usize) -> bool {
  227|  58.2k|        // In theory, on 32-bit platforms, it is possible for
  228|  58.2k|        // `global_fork_counter` to wrap around after ~4e9 forks.
  229|  58.2k|        //
  230|  58.2k|        // This check will detect a fork in the normal case where
  231|  58.2k|        // `fork_counter < global_fork_counter`, and also when the difference
  232|  58.2k|        // between both is greater than `isize::MAX` (wrapped around).
  233|  58.2k|        //
  234|  58.2k|        // It will still fail to detect a fork if there have been more than
  235|  58.2k|        // `isize::MAX` forks, without any reseed in between. Seems unlikely
  236|  58.2k|        // enough.
  237|  58.2k|        (self.fork_counter.wrapping_sub(global_fork_counter) as isize) < 0
  238|  58.2k|    }
_RNvMs3_NtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtCsbT0BH6pPOpx_9rand_core2os5OsRngE19reseed_and_generateBb_:
  241|    227|    fn reseed_and_generate(
  242|    227|        &mut self, results: &mut <Self as BlockRngCore>::Results, global_fork_counter: usize,
  243|    227|    ) {
  244|    227|        #![allow(clippy::if_same_then_else)] // false positive
  245|    227|        if self.is_forked(global_fork_counter) {
  246|      0|            info!("Fork detected, reseeding RNG");
  247|    227|        } else {
  248|    227|            trace!("Reseeding RNG (periodic reseed)");
  249|    227|        }
  250|       |
  251|    227|        let num_bytes = results.as_ref().len() * size_of::<<R as BlockRngCore>::Item>();
  252|       |
  253|    227|        if let Err(e) = self.reseed() {
  254|      0|            warn!("Reseeding RNG failed: {}", e);
  255|      0|            let _ = e;
  256|    227|        }
  257|    227|        self.fork_counter = global_fork_counter;
  258|    227|
  259|    227|        self.bytes_until_reseed = self.threshold - num_bytes as i64;
  260|    227|        self.inner.generate(results);
  261|    227|    }
_RNCNvMs3_NtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseedingINtB7_13ReseedingCoreNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtCsbT0BH6pPOpx_9rand_core2os5OsRngE6reseed0Bd_:
  220|    227|        R::from_rng(&mut self.reseeder).map(|result| {
  221|    227|            self.bytes_until_reseed = self.threshold;
  222|    227|            self.inner = result
  223|    227|        })
_RNvXs2_NtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtCsbT0BH6pPOpx_9rand_core2os5OsRngENtNtB26_5block12BlockRngCore8generateBb_:
  173|  58.2k|    fn generate(&mut self, results: &mut Self::Results) {
  174|  58.2k|        let global_fork_counter = fork::get_fork_counter();
  175|  58.2k|        if self.bytes_until_reseed <= 0 || self.is_forked(global_fork_counter) {
  176|       |            // We get better performance by not calling only `reseed` here
  177|       |            // and continuing with the rest of the function, but by directly
  178|       |            // returning from a non-inlined function.
  179|    227|            return self.reseed_and_generate(results, global_fork_counter);
  180|  58.0k|        }
  181|  58.0k|        let num_bytes = results.as_ref().len() * size_of::<Self::Item>();
  182|  58.0k|        self.bytes_until_reseed -= num_bytes as i64;
  183|  58.0k|        self.inner.generate(results);
  184|  58.2k|    }
_RNvMNtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseedingINtB2_12ReseedingRngNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtCsbT0BH6pPOpx_9rand_core2os5OsRngE3newB8_:
  101|      1|    pub fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  102|      1|        ReseedingRng(BlockRng::new(ReseedingCore::new(rng, threshold, reseeder)))
  103|      1|    }
_RNCNvNtNtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseeding4fork21register_fork_handler0Bb_:
  319|      1|        REGISTER.call_once(|| {
  320|      1|            // Bump the counter before and after forking (see #1169):
  321|      1|            let ret = unsafe { libc::pthread_atfork(
  322|      1|                Some(fork_handler),
  323|      1|                Some(fork_handler),
  324|      1|                Some(fork_handler),
  325|      1|            ) };
  326|      1|            if ret != 0 {
  327|      0|                panic!("libc::pthread_atfork failed with code {}", ret);
  328|      1|            }
  329|      1|        });
_RNvNtNtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseeding4fork21register_fork_handler:
  317|      1|    pub fn register_fork_handler() {
  318|      1|        static REGISTER: Once = Once::new();
  319|      1|        REGISTER.call_once(|| {
  320|       |            // Bump the counter before and after forking (see #1169):
  321|       |            let ret = unsafe { libc::pthread_atfork(
  322|       |                Some(fork_handler),
  323|       |                Some(fork_handler),
  324|       |                Some(fork_handler),
  325|       |            ) };
  326|       |            if ret != 0 {
  327|       |                panic!("libc::pthread_atfork failed with code {}", ret);
  328|       |            }
  329|      1|        });
  330|      1|    }
_RNvNtNtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseeding4fork16get_fork_counter:
  307|  58.2k|    pub fn get_fork_counter() -> usize {
  308|  58.2k|        RESEEDING_RNG_FORK_COUNTER.load(Ordering::Relaxed)
  309|  58.2k|    }

_RNvXs_NtNtCsliEG8YhJqi1_4rand4rngs6threadNtB4_9ThreadRngNtCsbT0BH6pPOpx_9rand_core7RngCore8next_u64:
  109|  1.86M|    fn next_u64(&mut self) -> u64 {
  110|  1.86M|        // SAFETY: We must make sure to stop using `rng` before anyone else
  111|  1.86M|        // creates another mutable reference
  112|  1.86M|        let rng = unsafe { &mut *self.rng.get() };
  113|  1.86M|        rng.next_u64()
  114|  1.86M|    }
_RNCNvNtNtCsliEG8YhJqi1_4rand4rngs6thread10thread_rng0B7_:
   89|   932k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
_RNCNvNvNtNtCsliEG8YhJqi1_4rand4rngs6thread14THREAD_RNG_KEY7___getit0B9_:
   67|      1|thread_local!(
   68|      1|    // We require Rc<..> to avoid premature freeing when thread_rng is used
   69|      1|    // within thread-local destructors. See #968.
   70|      1|    static THREAD_RNG_KEY: Rc<UnsafeCell<ReseedingRng<Core, OsRng>>> = {
   71|      1|        let r = Core::from_rng(OsRng).unwrap_or_else(|err|
   72|      1|                panic!("could not initialize thread_rng: {}", err));
   73|      1|        let rng = ReseedingRng::new(r,
   74|      1|                                    THREAD_RNG_RESEED_THRESHOLD,
   75|      1|                                    OsRng);
   76|      1|        Rc::new(UnsafeCell::new(rng))
   77|      1|    }
   78|      1|);
_RNvNtNtCsliEG8YhJqi1_4rand4rngs6thread10thread_rng:
   88|   932k|pub fn thread_rng() -> ThreadRng {
   89|   932k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
   90|   932k|    ThreadRng { rng }
   91|   932k|}

_RNvXsn_NtCskMJXU54EgBa_11rand_chacha6chachaNtB5_12ChaCha12CoreNtCsbT0BH6pPOpx_9rand_core11SeedableRng9from_seedCsliEG8YhJqi1_4rand:
  103|    228|            fn from_seed(seed: Self::Seed) -> Self {
  104|    228|                $ChaChaXCore { state: ChaCha::new(&seed, &[0u8; 8]) }
  105|    228|            }
_RNvXsm_NtCskMJXU54EgBa_11rand_chacha6chachaNtB5_12ChaCha12CoreNtNtCsbT0BH6pPOpx_9rand_core5block12BlockRngCore8generateCsliEG8YhJqi1_4rand:
   89|  58.2k|            fn generate(&mut self, r: &mut Self::Results) {
   90|  58.2k|                // Fill slice of words by writing to equivalent slice of bytes, then fixing endianness.
   91|  58.2k|                self.state.refill4($rounds, unsafe {
   92|  58.2k|                    &mut *(&mut *r as *mut Array64<u32> as *mut [u8; 256])
   93|  58.2k|                });
   94|  3.73M|                for x in r.as_mut() {
   95|  3.73M|                    *x = x.to_le();
   96|  3.73M|                }
   97|  58.2k|            }
_RNvXs_NtCskMJXU54EgBa_11rand_chacha6chachaINtB4_7Array64mEINtNtCsl2lhD68vXAd_4core7convert5AsRefSmE6as_refB6_:
   46|  3.84M|    fn as_ref(&self) -> &[T] {
   47|  3.84M|        &self.0
   48|  3.84M|    }
_RNvXs0_NtCskMJXU54EgBa_11rand_chacha6chachaINtB5_7Array64mEINtNtCsl2lhD68vXAd_4core7convert5AsMutSmE6as_mutB7_:
   51|  58.2k|    fn as_mut(&mut self) -> &mut [T] {
   52|  58.2k|        &mut self.0
   53|  58.2k|    }
_RNvXNtCskMJXU54EgBa_11rand_chacha6chachaINtB2_7Array64mENtNtCsl2lhD68vXAd_4core7default7Default7defaultB4_:
   32|      1|    fn default() -> Self {
   33|      1|        Self([
   34|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   35|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   36|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   37|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   38|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   39|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   40|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   41|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   42|      1|        ])
   43|      1|    }

_RNvMNtCskMJXU54EgBa_11rand_chacha4gutsNtB2_6ChaCha3new:
   72|    228|    pub fn new(key: &[u8; 32], nonce: &[u8]) -> Self {
   73|    228|        init_chacha(key, nonce)
   74|    228|    }
_RNvMNtCskMJXU54EgBa_11rand_chacha4gutsNtB2_6ChaCha7refill4:
   84|  58.2k|    pub fn refill4(&mut self, drounds: u32, out: &mut [u8; BUFSZ]) {
   85|  58.2k|        refill_wide(self, drounds, out)
   86|  58.2k|    }
_RINvNvNtCskMJXU54EgBa_11rand_chacha4guts11init_chacha7fn_implINtNtCscqn4bkiv6Zi_10ppv_lite866x86_6410SseMachineNtB10_5YesS3NtB10_5YesS4NtB10_4NoNIEEB6_:
  235|    228|    fn init_chacha(key: &[u8; 32], nonce: &[u8]) -> ChaCha {
  236|    228|        let ctr_nonce = [
  237|       |            0,
  238|    228|            if nonce.len() == 12 {
  239|      0|                read_u32le(&nonce[0..4])
  240|       |            } else {
  241|    228|                0
  242|       |            },
  243|    228|            read_u32le(&nonce[nonce.len() - 8..nonce.len() - 4]),
  244|    228|            read_u32le(&nonce[nonce.len() - 4..]),
  245|    228|        ];
  246|    228|        let key0: Mach::u32x4 = m.read_le(&key[..16]);
  247|    228|        let key1: Mach::u32x4 = m.read_le(&key[16..]);
  248|    228|        ChaCha {
  249|    228|            b: key0.into(),
  250|    228|            c: key1.into(),
  251|    228|            d: ctr_nonce.into(),
  252|    228|        }
_RINvNtCskMJXU54EgBa_11rand_chacha4guts16refill_wide_implINtNtCscqn4bkiv6Zi_10ppv_lite866x86_6411Avx2MachineNtBV_4NoNIEEB4_:
  116|  58.2k|fn refill_wide_impl<Mach: Machine>(
  117|  58.2k|    m: Mach, state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ],
  118|  58.2k|) {
  119|  58.2k|    let k = m.vec([0x6170_7865, 0x3320_646e, 0x7962_2d32, 0x6b20_6574]);
  120|  58.2k|    let mut pos = state.pos64(m);
  121|  58.2k|    let d0: Mach::u32x4 = m.unpack(state.d);
  122|  58.2k|    pos = pos.wrapping_add(1);
  123|  58.2k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  124|  58.2k|    pos = pos.wrapping_add(1);
  125|  58.2k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  126|  58.2k|    pos = pos.wrapping_add(1);
  127|  58.2k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  128|  58.2k|
  129|  58.2k|    let b = m.unpack(state.b);
  130|  58.2k|    let c = m.unpack(state.c);
  131|  58.2k|    let mut x = State {
  132|  58.2k|        a: Mach::u32x4x4::from_lanes([k, k, k, k]),
  133|  58.2k|        b: Mach::u32x4x4::from_lanes([b, b, b, b]),
  134|  58.2k|        c: Mach::u32x4x4::from_lanes([c, c, c, c]),
  135|  58.2k|        d: m.unpack(Mach::u32x4x4::from_lanes([d0, d1, d2, d3]).into()),
  136|  58.2k|    };
  137|   349k|    for _ in 0..drounds {
  138|   349k|        x = round(x);
  139|   349k|        x = undiagonalize(round(diagonalize(x)));
  140|   349k|    }
  141|  58.2k|    let mut pos = state.pos64(m);
  142|  58.2k|    let d0: Mach::u32x4 = m.unpack(state.d);
  143|  58.2k|    pos = pos.wrapping_add(1);
  144|  58.2k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  145|  58.2k|    pos = pos.wrapping_add(1);
  146|  58.2k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  147|  58.2k|    pos = pos.wrapping_add(1);
  148|  58.2k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  149|  58.2k|    pos = pos.wrapping_add(1);
  150|  58.2k|    let d4 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  151|  58.2k|
  152|  58.2k|    let (a, b, c, d) = (
  153|  58.2k|        x.a.to_lanes(),
  154|  58.2k|        x.b.to_lanes(),
  155|  58.2k|        x.c.to_lanes(),
  156|  58.2k|        x.d.to_lanes(),
  157|  58.2k|    );
  158|  58.2k|    let sb = m.unpack(state.b);
  159|  58.2k|    let sc = m.unpack(state.c);
  160|  58.2k|    let sd = [m.unpack(state.d), d1, d2, d3];
  161|  58.2k|    state.d = d4.into();
  162|  58.2k|    let mut words = out.chunks_exact_mut(16);
  163|   233k|    for ((((&a, &b), &c), &d), &sd) in a.iter().zip(&b).zip(&c).zip(&d).zip(&sd) {
  164|   233k|        (a + k).write_le(words.next().unwrap());
  165|   233k|        (b + sb).write_le(words.next().unwrap());
  166|   233k|        (c + sc).write_le(words.next().unwrap());
  167|   233k|        (d + sd).write_le(words.next().unwrap());
  168|   233k|    }
  169|  58.2k|}
_RNvNtCskMJXU54EgBa_11rand_chacha4guts10read_u32le:
  229|    456|fn read_u32le(xs: &[u8]) -> u32 {
  230|    456|    assert_eq!(xs.len(), 4);
  231|    456|    u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24)
  232|    456|}
_RINvMNtCskMJXU54EgBa_11rand_chacha4gutsNtB3_6ChaCha5pos64INtNtCscqn4bkiv6Zi_10ppv_lite866x86_6411Avx2MachineNtBW_4NoNIEEB5_:
   77|   116k|    fn pos64<M: Machine>(&self, m: M) -> u64 {
   78|   116k|        let d: M::u32x4 = m.unpack(self.d);
   79|   116k|        ((d.extract(1) as u64) << 32) | d.extract(0) as u64
   80|   116k|    }
_RINvNtCskMJXU54EgBa_11rand_chacha4guts11diagonalizeINtNtCscqn4bkiv6Zi_10ppv_lite864soft2x2INtNtNtNtBS_6x86_644sse24avx212u32x4x2_avx2NtB1x_4NoNIENtB1v_2G0EEB4_:
   56|   349k|pub(crate) fn diagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   57|   349k|    x.b = x.b.shuffle_lane_words3012();
   58|   349k|    x.c = x.c.shuffle_lane_words2301();
   59|   349k|    x.d = x.d.shuffle_lane_words1230();
   60|   349k|    x
   61|   349k|}
_RINvNvNtCskMJXU54EgBa_11rand_chacha4guts11refill_wide7fn_implINtNtCscqn4bkiv6Zi_10ppv_lite866x86_6411Avx2MachineNtB10_4NoNIEEB6_:
  172|  58.2k|    fn refill_wide(state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ]) {
  173|  58.2k|        refill_wide_impl(m, state, drounds, out);
  174|  58.2k|    }
_RINvNtCskMJXU54EgBa_11rand_chacha4guts13undiagonalizeINtNtCscqn4bkiv6Zi_10ppv_lite864soft2x2INtNtNtNtBU_6x86_644sse24avx212u32x4x2_avx2NtB1z_4NoNIENtB1x_2G0EEB4_:
   63|   349k|pub(crate) fn undiagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   64|   349k|    x.b = x.b.shuffle_lane_words1230();
   65|   349k|    x.c = x.c.shuffle_lane_words2301();
   66|   349k|    x.d = x.d.shuffle_lane_words3012();
   67|   349k|    x
   68|   349k|}
_RINvNtCskMJXU54EgBa_11rand_chacha4guts5roundINtNtCscqn4bkiv6Zi_10ppv_lite864soft2x2INtNtNtNtBL_6x86_644sse24avx212u32x4x2_avx2NtB1q_4NoNIENtB1o_2G0EEB4_:
   43|   699k|pub(crate) fn round<V: ArithOps + BitOps32>(mut x: State<V>) -> State<V> {
   44|   699k|    x.a += x.b;
   45|   699k|    x.d = (x.d ^ x.a).rotate_each_word_right16();
   46|   699k|    x.c += x.d;
   47|   699k|    x.b = (x.b ^ x.c).rotate_each_word_right20();
   48|   699k|    x.a += x.b;
   49|   699k|    x.d = (x.d ^ x.a).rotate_each_word_right24();
   50|   699k|    x.c += x.d;
   51|   699k|    x.b = (x.b ^ x.c).rotate_each_word_right25();
   52|   699k|    x
   53|   699k|}

_RNCNvXs0_NtCsbT0BH6pPOpx_9rand_core5blockINtB7_8BlockRngINtNtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtB9_2os5OsRngEENtB9_7RngCore8next_u640Cs4WjTcpTVJQo_5oxttl:
  198|  1.86M|        let read_u64 = |results: &[u32], index| {
  199|  1.86M|            let data = &results[index..=index + 1];
  200|  1.86M|            u64::from(data[1]) << 32 | u64::from(data[0])
  201|  1.86M|        };
_RNvXs0_NtCsbT0BH6pPOpx_9rand_core5blockINtB5_8BlockRngINtNtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtB7_2os5OsRngEENtB7_7RngCore8next_u64Cs4WjTcpTVJQo_5oxttl:
  197|  1.86M|    fn next_u64(&mut self) -> u64 {
  198|  1.86M|        let read_u64 = |results: &[u32], index| {
  199|       |            let data = &results[index..=index + 1];
  200|       |            u64::from(data[1]) << 32 | u64::from(data[0])
  201|       |        };
  202|       |
  203|  1.86M|        let len = self.results.as_ref().len();
  204|  1.86M|
  205|  1.86M|        let index = self.index;
  206|  1.86M|        if index < len - 1 {
  207|  1.80M|            self.index += 2;
  208|  1.80M|            // Read an u64 from the current index
  209|  1.80M|            read_u64(self.results.as_ref(), index)
  210|  58.2k|        } else if index >= len {
  211|  58.2k|            self.generate_and_set(2);
  212|  58.2k|            read_u64(self.results.as_ref(), 0)
  213|       |        } else {
  214|      0|            let x = u64::from(self.results.as_ref()[len - 1]);
  215|      0|            self.generate_and_set(1);
  216|      0|            let y = u64::from(self.results.as_ref()[0]);
  217|      0|            (y << 32) | x
  218|       |        }
  219|  1.86M|    }
_RNvMs_NtCsbT0BH6pPOpx_9rand_core5blockINtB4_8BlockRngINtNtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE3newBY_:
  145|      1|    pub fn new(core: R) -> BlockRng<R> {
  146|      1|        let results_empty = R::Results::default();
  147|      1|        BlockRng {
  148|      1|            core,
  149|      1|            index: results_empty.as_ref().len(),
  150|      1|            results: results_empty,
  151|      1|        }
  152|      1|    }
_RNvMs_NtCsbT0BH6pPOpx_9rand_core5blockINtB4_8BlockRngINtNtNtNtCsliEG8YhJqi1_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE16generate_and_setBY_:
  174|  58.2k|    pub fn generate_and_set(&mut self, index: usize) {
  175|  58.2k|        assert!(index < self.results.as_ref().len());
  176|  58.2k|        self.core.generate(&mut self.results);
  177|  58.2k|        self.index = index;
  178|  58.2k|    }

_RINvYNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtCsbT0BH6pPOpx_9rand_core11SeedableRng8from_rngQNtNtBV_2os5OsRngECsliEG8YhJqi1_4rand:
  390|    227|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|    227|        let mut seed = Self::Seed::default();
  392|    227|        rng.try_fill_bytes(seed.as_mut())?;
  393|    227|        Ok(Self::from_seed(seed))
  394|    227|    }
_RNvXs_CsbT0BH6pPOpx_9rand_coreQNtNtB4_2os5OsRngNtB4_7RngCore14try_fill_bytesCsliEG8YhJqi1_4rand:
  441|    227|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
  442|    227|        (**self).try_fill_bytes(dest)
  443|    227|    }
_RINvYNtNtCskMJXU54EgBa_11rand_chacha6chacha12ChaCha12CoreNtCsbT0BH6pPOpx_9rand_core11SeedableRng8from_rngNtNtBV_2os5OsRngECsliEG8YhJqi1_4rand:
  390|      1|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|      1|        let mut seed = Self::Seed::default();
  392|      1|        rng.try_fill_bytes(seed.as_mut())?;
  393|      1|        Ok(Self::from_seed(seed))
  394|      1|    }

_RNvXs_NtCsbT0BH6pPOpx_9rand_core2osNtB4_5OsRngNtB6_7RngCore14try_fill_bytes:
   67|    228|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
   68|    228|        getrandom(dest)?;
   69|    228|        Ok(())
   70|    228|    }

_RNvNvNtNtCsliEG8YhJqi1_4rand4rngs6thread14THREAD_RNG_KEY7___getitB7_:
   83|   932k|            unsafe fn __getit(
   84|   932k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|   932k|            ) -> $crate::option::Option<&'static $t> {
   86|   932k|                #[thread_local]
   87|   932k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|   932k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|   932k|
   90|   932k|                unsafe {
   91|   932k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|   932k|                    })
  101|   932k|                }
  102|   932k|            }
_RNvNvNtNtCsliEG8YhJqi1_4rand4rngs6thread14THREAD_RNG_KEY6___initB7_:
   80|      1|            fn __init() -> $t { $init }

_RNvCsgo9gpfLdqrc_4trig22count_quad_blank_nodes:
   47|   230k|fn count_quad_blank_nodes(quad: &Quad) -> usize {
   48|   230k|    (match &quad.subject {
   49|   208k|        Subject::BlankNode(_) => 1,
   50|      0|        Subject::Triple(t) => count_triple_blank_nodes(t),
   51|  21.8k|        _ => 0,
   52|   230k|    }) + (match &quad.object {
   53|   157k|        Term::BlankNode(_) => 1,
   54|      0|        Term::Triple(t) => count_triple_blank_nodes(t),
   55|  72.4k|        _ => 0,
   56|   230k|    }) + usize::from(matches!(quad.graph_name, GraphName::BlankNode(_)))
   57|   230k|}
_RNvCsgo9gpfLdqrc_4trig15serialize_quads:
   59|  18.0k|fn serialize_quads(quads: &[Quad]) -> Vec<u8> {
   60|  18.0k|    let mut writer = TriGSerializer::new().serialize_to_write(Vec::new());
   61|   248k|    for quad in quads {
   62|   230k|        writer.write_quad(quad).unwrap();
   63|   230k|    }
   64|  18.0k|    writer.finish().unwrap()
   65|  18.0k|}
_RNCNvNvCsgo9gpfLdqrc_4trig1__19___libfuzzer_sys_run0B5_:
   69|  9.34M|    let (quads, errors) = parse(data.split(|c| *c == 0xFF));
_RNCNvNvCsgo9gpfLdqrc_4trig1__19___libfuzzer_sys_runs_0B5_:
   74|  9.34M|        .filter(|c| *c != 0xFF)
_RINvCsgo9gpfLdqrc_4trig5parseARShj1_EB2_:
    7|  18.0k|fn parse<'a>(chunks: impl IntoIterator<Item = &'a [u8]>) -> (Vec<Quad>, Vec<String>) {
    8|  18.0k|    let mut quads = Vec::new();
    9|  18.0k|    let mut errors = Vec::new();
   10|  18.0k|    let mut parser = TriGParser::new()
   11|  18.0k|        .with_quoted_triples()
   12|  18.0k|        .with_base_iri("http://example.com/")
   13|  18.0k|        .unwrap()
   14|  18.0k|        .parse();
   15|  36.0k|    for chunk in chunks {
   16|  18.0k|        parser.extend_from_slice(chunk);
   17|  1.95M|        while let Some(result) = parser.read_next() {
   18|  1.93M|            match result {
   19|   230k|                Ok(quad) => quads.push(quad),
   20|  1.70M|                Err(error) => errors.push(error.to_string()),
   21|       |            }
   22|       |        }
   23|       |    }
   24|  18.0k|    parser.end();
   25|  25.4k|    while let Some(result) = parser.read_next() {
   26|  7.45k|        match result {
   27|    257|            Ok(quad) => quads.push(quad),
   28|  7.20k|            Err(error) => errors.push(error.to_string()),
   29|       |        }
   30|       |    }
   31|  18.0k|    assert!(parser.is_end());
   32|  18.0k|    (quads, errors)
   33|  18.0k|}
_RINvCsgo9gpfLdqrc_4trig5parseINtNtNtCsl2lhD68vXAd_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_run0EEB2_:
    7|  18.0k|fn parse<'a>(chunks: impl IntoIterator<Item = &'a [u8]>) -> (Vec<Quad>, Vec<String>) {
    8|  18.0k|    let mut quads = Vec::new();
    9|  18.0k|    let mut errors = Vec::new();
   10|  18.0k|    let mut parser = TriGParser::new()
   11|  18.0k|        .with_quoted_triples()
   12|  18.0k|        .with_base_iri("http://example.com/")
   13|  18.0k|        .unwrap()
   14|  18.0k|        .parse();
   15|  2.48M|    for chunk in chunks {
   16|  2.46M|        parser.extend_from_slice(chunk);
   17|  4.39M|        while let Some(result) = parser.read_next() {
   18|  1.93M|            match result {
   19|   230k|                Ok(quad) => quads.push(quad),
   20|  1.70M|                Err(error) => errors.push(error.to_string()),
   21|       |            }
   22|       |        }
   23|       |    }
   24|  18.0k|    parser.end();
   25|  25.4k|    while let Some(result) = parser.read_next() {
   26|  7.45k|        match result {
   27|    257|            Ok(quad) => quads.push(quad),
   28|  7.20k|            Err(error) => errors.push(error.to_string()),
   29|       |        }
   30|       |    }
   31|  18.0k|    assert!(parser.is_end());
   32|  18.0k|    (quads, errors)
   33|  18.0k|}

_RNvXsd_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCsgo9gpfLdqrc_4trig:
   24|   366k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMs7_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_5IdStr3newCsgo9gpfLdqrc_4trig:
  259|   187k|    fn new(id: u128) -> Self {
  260|   187k|        let mut str = [0; 32];
  261|   187k|        write!(&mut str[..], "{id:x}").unwrap();
  262|   187k|        Self(str)
  263|   187k|    }
_RNvXsr_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCsgo9gpfLdqrc_4trig:
  142|   201k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RNvMs1_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCsgo9gpfLdqrc_4trig:
  183|     25|    pub const fn as_str(self) -> &'a str {
  184|     25|        match self.0 {
  185|     25|            BlankNodeRefContent::Named(id) => id,
  186|      0|            BlankNodeRefContent::Anonymous { str, .. } => str,
  187|       |        }
  188|     25|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCsgo9gpfLdqrc_4trig:
   92|   585k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   93|   585k|        BlankNodeRef(match &self.0 {
   94|    802|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   95|   584k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   96|   584k|                id: *id,
   97|   584k|                str: str.as_str(),
   98|   584k|            },
   99|       |        })
  100|   585k|    }
_RNvXsi_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCsgo9gpfLdqrc_4trig:
   27|   366k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMs1_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_12BlankNodeRef10into_ownedCsgo9gpfLdqrc_4trig:
  208|   187k|    pub fn into_owned(self) -> BlankNode {
  209|   187k|        BlankNode(match self.0 {
  210|     25|            BlankNodeRefContent::Named(id) => BlankNodeContent::Named(id.to_owned()),
  211|   187k|            BlankNodeRefContent::Anonymous { id, .. } => BlankNodeContent::Anonymous {
  212|   187k|                id,
  213|   187k|                str: IdStr::new(id),
  214|   187k|            },
  215|       |        })
  216|   187k|    }
_RNvXs2_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCsgo9gpfLdqrc_4trig:
  221|     25|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  222|     25|        write!(f, "_:{}", self.as_str())
  223|     25|    }
_RNvXsx_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_19BlankNodeRefContentNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCsgo9gpfLdqrc_4trig:
  145|   201k|#[derive(PartialEq, Eq, Debug, Clone, Copy, Hash)]
_RNvXsF_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_5IdStrNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCsgo9gpfLdqrc_4trig:
  254|   365k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMs7_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_5IdStr6as_strCsgo9gpfLdqrc_4trig:
  266|   584k|    fn as_str(&self) -> &str {
  267|   584k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  268|   584k|        str::from_utf8(&self.0[..len]).unwrap()
  269|   584k|    }
_RNvXs2_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCs4WjTcpTVJQo_5oxttl:
  221|   344k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  222|   344k|        write!(f, "_:{}", self.as_str())
  223|   344k|    }
_RNvXsm_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneCs4WjTcpTVJQo_5oxttl:
   27|  1.31M|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMs1_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCs4WjTcpTVJQo_5oxttl:
  183|   344k|    pub const fn as_str(self) -> &'a str {
  184|   344k|        match self.0 {
  185|    319|            BlankNodeRefContent::Named(id) => id,
  186|   344k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  187|       |        }
  188|   344k|    }
_RNvMs7_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_5IdStr6as_strCs4WjTcpTVJQo_5oxttl:
  266|   932k|    fn as_str(&self) -> &str {
  267|   932k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  268|   932k|        str::from_utf8(&self.0[..len]).unwrap()
  269|   932k|    }
_RNvXsf_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneCs4WjTcpTVJQo_5oxttl:
   24|  1.31M|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsJ_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_5IdStrNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneCs4WjTcpTVJQo_5oxttl:
  254|  1.31M|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvNtCsbrE1BkJ52QU_5oxrdf10blank_node13to_integer_idCs4WjTcpTVJQo_5oxttl:
  332|   346k|fn to_integer_id(id: &str) -> Option<u128> {
  333|   346k|    let digits = id.as_bytes();
  334|   346k|    let mut value: u128 = 0;
  335|   346k|    if let None | Some(b'0') = digits.first() {
  336|    803|        return None; // No empty string or leading zeros
  337|   345k|    }
  338|  11.3M|    for digit in digits {
  339|  11.0M|        value = value.checked_mul(16)?.checked_add(
  340|  11.0M|            match *digit {
  341|  11.0M|                b'0'..=b'9' => digit - b'0',
  342|  4.34M|                b'a'..=b'f' => digit - b'a' + 10,
  343|    709|                _ => return None,
  344|       |            }
  345|  11.0M|            .into(),
  346|      0|        )?;
  347|       |    }
  348|   344k|    Some(value)
  349|   346k|}
_RNvMNtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idCs4WjTcpTVJQo_5oxttl:
   66|   344k|    pub fn new_from_unique_id(id: u128) -> Self {
   67|   344k|        Self(BlankNodeContent::Anonymous {
   68|   344k|            id,
   69|   344k|            str: IdStr::new(id),
   70|   344k|        })
   71|   344k|    }
_RNvMs7_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_5IdStr3newCs4WjTcpTVJQo_5oxttl:
  259|  1.27M|    fn new(id: u128) -> Self {
  260|  1.27M|        let mut str = [0; 32];
  261|  1.27M|        write!(&mut str[..], "{id:x}").unwrap();
  262|  1.27M|        Self(str)
  263|  1.27M|    }
_RNvXs0_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCsl2lhD68vXAd_4core7default7Default7defaultCs4WjTcpTVJQo_5oxttl:
  113|   372k|    fn default() -> Self {
  114|       |        // We ensure the ID does not start with a number to be also valid with RDF/XML
  115|   932k|        loop {
  116|   932k|            let id = random();
  117|   932k|            let str = IdStr::new(id);
  118|   932k|            if matches!(str.as_str().as_bytes().first(), Some(b'a'..=b'f')) {
  119|   372k|                return Self(BlankNodeContent::Anonymous { id, str });
  120|   559k|            }
  121|       |        }
  122|   372k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedReECs4WjTcpTVJQo_5oxttl:
   53|   346k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   54|   346k|        let id = id.into();
   55|   346k|        if let Some(numerical_id) = to_integer_id(&id) {
   56|   344k|            Self::new_from_unique_id(numerical_id)
   57|       |        } else {
   58|  1.53k|            Self(BlankNodeContent::Named(id))
   59|       |        }
   60|   346k|    }
_RNCNvMs7_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  267|  49.6M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
_RNvMNtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idB4_:
   66|  64.7k|    pub fn new_from_unique_id(id: u128) -> Self {
   67|  64.7k|        Self(BlankNodeContent::Anonymous {
   68|  64.7k|            id,
   69|  64.7k|            str: IdStr::new(id),
   70|  64.7k|        })
   71|  64.7k|    }
_RNvMs7_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_5IdStr3newB7_:
  259|  64.7k|    fn new(id: u128) -> Self {
  260|  64.7k|        let mut str = [0; 32];
  261|  64.7k|        write!(&mut str[..], "{id:x}").unwrap();
  262|  64.7k|        Self(str)
  263|  64.7k|    }
_RNvMs7_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_5IdStr6as_strB7_:
  266|  64.7k|    fn as_str(&self) -> &str {
  267|  64.7k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  268|  64.7k|        str::from_utf8(&self.0[..len]).unwrap()
  269|  64.7k|    }
_RNvMs1_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_12BlankNodeRef13new_uncheckedB7_:
  170|  7.96k|    pub fn new_unchecked(id: &'a str) -> Self {
  171|  7.96k|        if let Some(numerical_id) = to_integer_id(id) {
  172|  7.96k|            Self(BlankNodeRefContent::Anonymous {
  173|  7.96k|                id: numerical_id,
  174|  7.96k|                str: id,
  175|  7.96k|            })
  176|       |        } else {
  177|      0|            Self(BlankNodeRefContent::Named(id))
  178|       |        }
  179|  7.96k|    }
_RNvMs1_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strB7_:
  183|  25.8k|    pub const fn as_str(self) -> &'a str {
  184|  25.8k|        match self.0 {
  185|    310|            BlankNodeRefContent::Named(id) => id,
  186|  25.5k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  187|       |        }
  188|  25.8k|    }
_RNvMs1_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_12BlankNodeRef9unique_idB7_:
  200|  88.6k|    pub const fn unique_id(&self) -> Option<u128> {
  201|  88.6k|        match self.0 {
  202|    310|            BlankNodeRefContent::Named(_) => None,
  203|  88.3k|            BlankNodeRefContent::Anonymous { id, .. } => Some(id),
  204|       |        }
  205|  88.6k|    }
_RNvNtCsbrE1BkJ52QU_5oxrdf10blank_node13to_integer_idB3_:
  332|  7.96k|fn to_integer_id(id: &str) -> Option<u128> {
  333|  7.96k|    let digits = id.as_bytes();
  334|  7.96k|    let mut value: u128 = 0;
  335|  7.96k|    if let None | Some(b'0') = digits.first() {
  336|      0|        return None; // No empty string or leading zeros
  337|  7.96k|    }
  338|   134k|    for digit in digits {
  339|   126k|        value = value.checked_mul(16)?.checked_add(
  340|   126k|            match *digit {
  341|   126k|                b'0'..=b'9' => digit - b'0',
  342|  47.8k|                b'a'..=b'f' => digit - b'a' + 10,
  343|      0|                _ => return None,
  344|       |            }
  345|   126k|            .into(),
  346|      0|        )?;
  347|       |    }
  348|  7.96k|    Some(value)
  349|  7.96k|}
_RNvMNtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB2_9BlankNode6as_refB4_:
   92|  64.7k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   93|  64.7k|        BlankNodeRef(match &self.0 {
   94|      0|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   95|  64.7k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   96|  64.7k|                id: *id,
   97|  64.7k|                str: str.as_str(),
   98|  64.7k|            },
   99|       |        })
  100|  64.7k|    }

_RINvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB3_7Dataset6insertRNtNtB5_6triple4QuadECsgo9gpfLdqrc_4trig:
  360|  47.6k|    pub fn insert<'a>(&mut self, quad: impl Into<QuadRef<'a>>) -> bool {
  361|  47.6k|        let quad = self.encode_quad(quad.into());
  362|  47.6k|        self.insert_encoded(quad)
  363|  47.6k|    }
_RINvXs5_NtCsbrE1BkJ52QU_5oxrdf7datasetNtB6_7DatasetINtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect6ExtendRNtNtB8_6triple4QuadE6extendINtNtNtBW_5slice4iter4IterB1H_EECsgo9gpfLdqrc_4trig:
  960|  5.61k|    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  961|  53.3k|        for t in iter {
  962|  47.6k|            self.insert(t);
  963|  47.6k|        }
  964|  5.61k|    }
_RINvXs3_NtCsbrE1BkJ52QU_5oxrdf7datasetNtB6_7DatasetINtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect12FromIteratorRNtNtB8_6triple4QuadE9from_iterINtNtNtBW_5slice4iter4IterB1O_EECsgo9gpfLdqrc_4trig:
  944|  5.61k|    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self {
  945|  5.61k|        let mut g = Self::new();
  946|  5.61k|        g.extend(iter);
  947|  5.61k|        g
  948|  5.61k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset15hash_graph_name:
  745|   204k|    fn hash_graph_name(
  746|   204k|        &self,
  747|   204k|        graph_name: &InternedGraphName,
  748|   204k|        current_blank_node: InternedBlankNode,
  749|   204k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  750|   204k|    ) -> u64 {
  751|   204k|        match graph_name {
  752|  1.25k|            InternedGraphName::NamedNode(node) => {
  753|  1.25k|                Self::hash_tuple(node.decode_from(&self.interner))
  754|       |            }
  755|    120|            InternedGraphName::BlankNode(bnode) => {
  756|    120|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  757|       |            }
  758|   202k|            InternedGraphName::DefaultGraph => 0,
  759|       |        }
  760|   204k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset5clear:
  411|  5.61k|    pub fn clear(&mut self) {
  412|  5.61k|        self.gspo.clear();
  413|  5.61k|        self.gpos.clear();
  414|  5.61k|        self.gosp.clear();
  415|  5.61k|        self.spog.clear();
  416|  5.61k|        self.posg.clear();
  417|  5.61k|        self.ospg.clear();
  418|  5.61k|    }
_RNvXsj_NtCsbrE1BkJ52QU_5oxrdf7datasetNtB5_7DatasetNtNtCsl2lhD68vXAd_4core7default7Default7defaultB7_:
   66|  5.61k|#[derive(Debug, Default, Clone)]
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset12canonicalize:
  541|  5.61k|    pub fn canonicalize(&mut self) {
  542|  5.61k|        let bnodes = self.blank_nodes();
  543|  5.61k|        let quads_per_blank_node = self.quads_per_blank_nodes();
  544|  5.61k|        let (hash, partition) = self.hash_bnodes(
  545|  5.61k|            bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
  546|  5.61k|            &quads_per_blank_node,
  547|  5.61k|        );
  548|  5.61k|        let new_quads = self.distinguish(&hash, &partition, &quads_per_blank_node);
  549|  5.61k|        self.clear();
  550|  27.9k|        for quad in new_quads {
  551|  22.3k|            self.insert_encoded(quad);
  552|  22.3k|        }
  553|  5.61k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset11hash_bnodes:
  642|  27.8k|    fn hash_bnodes(
  643|  27.8k|        &self,
  644|  27.8k|        mut hashes: HashMap<InternedBlankNode, u64>,
  645|  27.8k|        quads_per_blank_node: &QuadsPerBlankNode,
  646|  27.8k|    ) -> (
  647|  27.8k|        HashMap<InternedBlankNode, u64>,
  648|  27.8k|        Vec<(u64, Vec<InternedBlankNode>)>,
  649|  27.8k|    ) {
  650|  27.8k|        let mut to_hash = Vec::new();
  651|  27.8k|        let mut to_do = hashes
  652|  27.8k|            .keys()
  653|  27.8k|            .map(|bnode| (*bnode, true))
  654|  27.8k|            .collect::<HashMap<_, _>>();
  655|  27.8k|        let mut partition = HashMap::<_, Vec<_>>::with_capacity(hashes.len());
  656|  27.8k|        let mut old_partition_count = usize::MAX;
  657|  83.5k|        while old_partition_count != partition.len() {
  658|  55.6k|            old_partition_count = partition.len();
  659|  55.6k|            partition.clear();
  660|  55.6k|            let mut new_hashes = hashes.clone();
  661|   197k|            for bnode in hashes.keys() {
  662|   197k|                let hash = if to_do.contains_key(bnode) {
  663|   204k|                    for (s, p, o, g) in &quads_per_blank_node[bnode] {
  664|   204k|                        to_hash.push((
  665|   204k|                            self.hash_subject(s, *bnode, &hashes),
  666|   204k|                            self.hash_named_node(*p),
  667|   204k|                            self.hash_term(o, *bnode, &hashes),
  668|   204k|                            self.hash_graph_name(g, *bnode, &hashes),
  669|   204k|                        ));
  670|   204k|                    }
  671|   197k|                    to_hash.sort_unstable();
  672|   197k|                    let hash = Self::hash_tuple((&to_hash, hashes[bnode]));
  673|   197k|                    to_hash.clear();
  674|   197k|                    if hash == hashes[bnode] {
  675|      0|                        to_do.insert(*bnode, false);
  676|   197k|                    } else {
  677|   197k|                        new_hashes.insert(*bnode, hash);
  678|   197k|                    }
  679|   197k|                    hash
  680|       |                } else {
  681|      0|                    hashes[bnode]
  682|       |                };
  683|   197k|                partition.entry(hash).or_default().push(*bnode);
  684|       |            }
  685|  55.6k|            hashes = new_hashes;
  686|       |        }
  687|  27.8k|        let mut partition: Vec<_> = partition.into_iter().collect();
  688|  27.8k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));
  689|  27.8k|        (hashes, partition)
  690|  27.8k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset9hash_term:
  726|   204k|    fn hash_term(
  727|   204k|        &self,
  728|   204k|        term: &InternedTerm,
  729|   204k|        current_blank_node: InternedBlankNode,
  730|   204k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  731|   204k|    ) -> u64 {
  732|   204k|        match term {
  733|  5.39k|            InternedTerm::NamedNode(node) => Self::hash_tuple(node.decode_from(&self.interner)),
  734|  16.0k|            InternedTerm::BlankNode(bnode) => {
  735|  16.0k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  736|       |            }
  737|   182k|            InternedTerm::Literal(literal) => Self::hash_tuple(literal.decode_from(&self.interner)),
  738|       |            #[cfg(feature = "rdf-star")]
  739|      0|            InternedTerm::Triple(triple) => {
  740|      0|                self.hash_triple(triple, current_blank_node, bnodes_hash)
  741|       |            }
  742|       |        }
  743|   204k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset11decode_spog:
  479|  11.1k|    fn decode_spog(
  480|  11.1k|        &self,
  481|  11.1k|        quad: (
  482|  11.1k|            &InternedSubject,
  483|  11.1k|            &InternedNamedNode,
  484|  11.1k|            &InternedTerm,
  485|  11.1k|            &InternedGraphName,
  486|  11.1k|        ),
  487|  11.1k|    ) -> QuadRef<'_> {
  488|  11.1k|        QuadRef {
  489|  11.1k|            subject: quad.0.decode_from(&self.interner),
  490|  11.1k|            predicate: quad.1.decode_from(&self.interner),
  491|  11.1k|            object: quad.2.decode_from(&self.interner),
  492|  11.1k|            graph_name: quad.3.decode_from(&self.interner),
  493|  11.1k|        }
  494|  11.1k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset21quads_per_blank_nodes:
  593|  5.61k|    fn quads_per_blank_nodes(&self) -> QuadsPerBlankNode {
  594|  5.61k|        let mut map: HashMap<_, Vec<_>> = HashMap::new();
  595|  27.9k|        for quad in &self.spog {
  596|  22.3k|            if let InternedSubject::BlankNode(bnode) = &quad.0 {
  597|  12.4k|                map.entry(*bnode).or_default().push(quad.clone());
  598|  12.4k|            }
  599|       |            #[cfg(feature = "rdf-star")]
  600|  22.3k|            if let InternedSubject::Triple(t) = &quad.0 {
  601|      0|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  602|  22.3k|            }
  603|  22.3k|            if let InternedTerm::BlankNode(bnode) = &quad.2 {
  604|  3.44k|                map.entry(*bnode).or_default().push(quad.clone());
  605|  18.8k|            }
  606|       |            #[cfg(feature = "rdf-star")]
  607|  22.3k|            if let InternedTerm::Triple(t) = &quad.2 {
  608|      0|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  609|  22.3k|            }
  610|  22.3k|            if let InternedGraphName::BlankNode(bnode) = &quad.3 {
  611|     20|                map.entry(*bnode).or_default().push(quad.clone());
  612|  22.2k|            }
  613|       |        }
  614|  5.61k|        map
  615|  5.61k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset15hash_blank_node:
  696|   219k|    fn hash_blank_node(
  697|   219k|        node: InternedBlankNode,
  698|   219k|        current_blank_node: InternedBlankNode,
  699|   219k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  700|   219k|    ) -> u64 {
  701|   219k|        if node == current_blank_node {
  702|   204k|            u64::MAX
  703|       |        } else {
  704|  15.3k|            bnodes_hash[&node]
  705|       |        }
  706|   219k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset9gen_bnode:
  902|  64.7k|    fn gen_bnode(
  903|  64.7k|        old_bnode: InternedBlankNode,
  904|  64.7k|        hashes: &HashMap<InternedBlankNode, u64>,
  905|  64.7k|    ) -> BlankNode {
  906|  64.7k|        BlankNode::new_from_unique_id(hashes[&old_bnode].into())
  907|  64.7k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset12hash_subject:
  708|   204k|    fn hash_subject(
  709|   204k|        &self,
  710|   204k|        node: &InternedSubject,
  711|   204k|        current_blank_node: InternedBlankNode,
  712|   204k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  713|   204k|    ) -> u64 {
  714|   204k|        match node {
  715|    816|            InternedSubject::NamedNode(node) => Self::hash_tuple(node.decode_from(&self.interner)),
  716|   203k|            InternedSubject::BlankNode(bnode) => {
  717|   203k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  718|       |            }
  719|       |            #[cfg(feature = "rdf-star")]
  720|      0|            InternedSubject::Triple(triple) => {
  721|      0|                self.hash_triple(triple, current_blank_node, bnodes_hash)
  722|       |            }
  723|       |        }
  724|   204k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset3len:
  350|  5.61k|    pub fn len(&self) -> usize {
  351|  5.61k|        self.gspo.len()
  352|  5.61k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset9map_bnode:
  891|  64.7k|    fn map_bnode(
  892|  64.7k|        &mut self,
  893|  64.7k|        old_bnode: InternedBlankNode,
  894|  64.7k|        hashes: &HashMap<InternedBlankNode, u64>,
  895|  64.7k|    ) -> InternedBlankNode {
  896|  64.7k|        InternedBlankNode::encoded_into(
  897|  64.7k|            Self::gen_bnode(old_bnode, hashes).as_ref(),
  898|  64.7k|            &mut self.interner,
  899|  64.7k|        )
  900|  64.7k|    }
_RNvXsg_NtCsbrE1BkJ52QU_5oxrdf7datasetNtB5_4IterNtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4next:
 1530|  13.9k|    fn next(&mut self) -> Option<QuadRef<'a>> {
 1531|  13.9k|        self.inner
 1532|  13.9k|            .next()
 1533|  13.9k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))
 1534|  13.9k|    }
_RNvXs1_NtCsbrE1BkJ52QU_5oxrdf7datasetRNtB5_7DatasetNtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect12IntoIterator9into_iter:
  930|  2.80k|    fn into_iter(self) -> Iter<'a> {
  931|  2.80k|        self.iter()
  932|  2.80k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset15hash_named_node:
  692|   204k|    fn hash_named_node(&self, node: InternedNamedNode) -> u64 {
  693|   204k|        Self::hash_tuple(node.decode_from(&self.interner))
  694|   204k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset14insert_encoded:
  365|  69.9k|    fn insert_encoded(
  366|  69.9k|        &mut self,
  367|  69.9k|        quad: (
  368|  69.9k|            InternedSubject,
  369|  69.9k|            InternedNamedNode,
  370|  69.9k|            InternedTerm,
  371|  69.9k|            InternedGraphName,
  372|  69.9k|        ),
  373|  69.9k|    ) -> bool {
  374|  69.9k|        let (s, p, o, g) = quad;
  375|  69.9k|        self.gspo.insert((g.clone(), s.clone(), p, o.clone()));
  376|  69.9k|        self.gpos.insert((g.clone(), p, o.clone(), s.clone()));
  377|  69.9k|        self.gosp.insert((g.clone(), o.clone(), s.clone(), p));
  378|  69.9k|        self.spog.insert((s.clone(), p, o.clone(), g.clone()));
  379|  69.9k|        self.posg.insert((p, o.clone(), s.clone(), g.clone()));
  380|  69.9k|        self.ospg.insert((o, s, p, g))
  381|  69.9k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset3new:
  109|  5.61k|    pub fn new() -> Self {
  110|  5.61k|        Self::default()
  111|  5.61k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset11distinguish:
  782|  27.8k|    fn distinguish(
  783|  27.8k|        &mut self,
  784|  27.8k|        hash: &HashMap<InternedBlankNode, u64>,
  785|  27.8k|        partition: &[(u64, Vec<InternedBlankNode>)],
  786|  27.8k|        quads_per_blank_node: &QuadsPerBlankNode,
  787|  27.8k|    ) -> Vec<(
  788|  27.8k|        InternedSubject,
  789|  27.8k|        InternedNamedNode,
  790|  27.8k|        InternedTerm,
  791|  27.8k|        InternedGraphName,
  792|  27.8k|    )> {
  793|  27.8k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
  794|  27.8k|        if let Some(b_prime) = b_prime {
  795|  9.63k|            b_prime
  796|  9.63k|                .iter()
  797|  9.63k|                .map(|b| {
  798|       |                    let mut hash_prime = hash.clone();
  799|       |                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  800|       |                    let (hash_prime_prime, partition_prime) =
  801|       |                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  802|       |                    self.distinguish(&hash_prime_prime, &partition_prime, quads_per_blank_node)
  803|  9.63k|                })
  804|  9.63k|                .reduce(min)
  805|  9.63k|                .unwrap_or_default()
  806|       |        } else {
  807|  18.2k|            self.label(hash)
  808|       |        }
  809|  27.8k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset4iter:
  169|  2.80k|    pub fn iter(&self) -> Iter<'_> {
  170|  2.80k|        let iter = self.spog.iter();
  171|  2.80k|        Iter {
  172|  2.80k|            dataset: self,
  173|  2.80k|            inner: iter,
  174|  2.80k|        }
  175|  2.80k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset11blank_nodes:
  555|  5.61k|    fn blank_nodes(&self) -> HashSet<InternedBlankNode> {
  556|  5.61k|        let mut bnodes = HashSet::new();
  557|  27.9k|        for (g, s, _, o) in &self.gspo {
  558|  22.3k|            if let InternedSubject::BlankNode(bnode) = s {
  559|  12.4k|                bnodes.insert(*bnode);
  560|  12.4k|            }
  561|       |            #[cfg(feature = "rdf-star")]
  562|  22.3k|            if let InternedSubject::Triple(triple) = s {
  563|      0|                Self::triple_blank_nodes(triple, &mut bnodes);
  564|  22.3k|            }
  565|  22.3k|            if let InternedTerm::BlankNode(bnode) = o {
  566|  3.44k|                bnodes.insert(*bnode);
  567|  18.8k|            }
  568|       |            #[cfg(feature = "rdf-star")]
  569|  22.3k|            if let InternedTerm::Triple(triple) = o {
  570|      0|                Self::triple_blank_nodes(triple, &mut bnodes);
  571|  22.3k|            }
  572|  22.3k|            if let InternedGraphName::BlankNode(bnode) = g {
  573|     20|                bnodes.insert(*bnode);
  574|  22.2k|            }
  575|       |        }
  576|  5.61k|        bnodes
  577|  5.61k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset5label:
  812|  18.2k|    fn label(
  813|  18.2k|        &mut self,
  814|  18.2k|        hashes: &HashMap<InternedBlankNode, u64>,
  815|  18.2k|    ) -> Vec<(
  816|  18.2k|        InternedSubject,
  817|  18.2k|        InternedNamedNode,
  818|  18.2k|        InternedTerm,
  819|  18.2k|        InternedGraphName,
  820|  18.2k|    )> {
  821|  18.2k|        let old_quads: Vec<_> = self.spog.iter().cloned().collect();
  822|  18.2k|        let mut quads: Vec<_> = old_quads
  823|  18.2k|            .into_iter()
  824|  18.2k|            .map(|(s, p, o, g)| {
  825|       |                (
  826|       |                    match s {
  827|       |                        InternedSubject::NamedNode(_) => s,
  828|       |                        InternedSubject::BlankNode(bnode) => {
  829|       |                            InternedSubject::BlankNode(self.map_bnode(bnode, hashes))
  830|       |                        }
  831|       |                        #[cfg(feature = "rdf-star")]
  832|       |                        InternedSubject::Triple(triple) => {
  833|       |                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  834|       |                                self.label_triple(&triple, hashes).as_ref(),
  835|       |                                &mut self.interner,
  836|       |                            )))
  837|       |                        }
  838|       |                    },
  839|       |                    p,
  840|       |                    match o {
  841|       |                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  842|       |                        InternedTerm::BlankNode(bnode) => {
  843|       |                            InternedTerm::BlankNode(self.map_bnode(bnode, hashes))
  844|       |                        }
  845|       |                        #[cfg(feature = "rdf-star")]
  846|       |                        InternedTerm::Triple(triple) => {
  847|       |                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  848|       |                                self.label_triple(&triple, hashes).as_ref(),
  849|       |                                &mut self.interner,
  850|       |                            )))
  851|       |                        }
  852|       |                    },
  853|       |                    match g {
  854|       |                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  855|       |                        InternedGraphName::BlankNode(bnode) => {
  856|       |                            InternedGraphName::BlankNode(self.map_bnode(bnode, hashes))
  857|       |                        }
  858|       |                    },
  859|       |                )
  860|  18.2k|            })
  861|  18.2k|            .collect();
  862|  18.2k|        quads.sort_unstable();
  863|  18.2k|        quads
  864|  18.2k|    }
_RNvXs_NtCsbrE1BkJ52QU_5oxrdf7datasetNtB4_7DatasetNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eq:
  911|  2.80k|    fn eq(&self, other: &Self) -> bool {
  912|  2.80k|        if self.len() != other.len() {
  913|      0|            return false;
  914|  2.80k|        }
  915|  13.9k|        for q in self {
  916|  11.1k|            if !other.contains(q) {
  917|      0|                return false;
  918|  11.1k|            }
  919|       |        }
  920|  2.80k|        true
  921|  2.80k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset11encode_quad:
  420|  47.6k|    fn encode_quad(
  421|  47.6k|        &mut self,
  422|  47.6k|        quad: QuadRef<'_>,
  423|  47.6k|    ) -> (
  424|  47.6k|        InternedSubject,
  425|  47.6k|        InternedNamedNode,
  426|  47.6k|        InternedTerm,
  427|  47.6k|        InternedGraphName,
  428|  47.6k|    ) {
  429|  47.6k|        (
  430|  47.6k|            InternedSubject::encoded_into(quad.subject, &mut self.interner),
  431|  47.6k|            InternedNamedNode::encoded_into(quad.predicate, &mut self.interner),
  432|  47.6k|            InternedTerm::encoded_into(quad.object, &mut self.interner),
  433|  47.6k|            InternedGraphName::encoded_into(quad.graph_name, &mut self.interner),
  434|  47.6k|        )
  435|  47.6k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB2_7Dataset12encoded_quad:
  437|  11.1k|    fn encoded_quad(
  438|  11.1k|        &self,
  439|  11.1k|        quad: QuadRef<'_>,
  440|  11.1k|    ) -> Option<(
  441|  11.1k|        InternedSubject,
  442|  11.1k|        InternedNamedNode,
  443|  11.1k|        InternedTerm,
  444|  11.1k|        InternedGraphName,
  445|  11.1k|    )> {
  446|  11.1k|        Some((
  447|  11.1k|            self.encoded_subject(quad.subject)?,
  448|  11.1k|            self.encoded_named_node(quad.predicate)?,
  449|  11.1k|            self.encoded_term(quad.object)?,
  450|  11.1k|            self.encoded_graph_name(quad.graph_name)?,
  451|       |        ))
  452|  11.1k|    }
_RNCNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB4_7Dataset11distinguishs_0B6_:
  793|  85.8k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
_RNCNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB4_7Dataset11hash_bnodess_0B6_:
  688|  86.7k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));
_RINvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB3_7Dataset10hash_tupleNtNtB5_10named_node12NamedNodeRefEB5_:
  776|   211k|    fn hash_tuple(v: impl Hash) -> u64 {
  777|   211k|        let mut hasher = DefaultHasher::new();
  778|   211k|        v.hash(&mut hasher);
  779|   211k|        hasher.finish()
  780|   211k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB3_7Dataset8containsNtNtB5_6triple7QuadRefEB5_:
  341|  11.1k|    pub fn contains<'a>(&self, quad: impl Into<QuadRef<'a>>) -> bool {
  342|  11.1k|        if let Some(q) = self.encoded_quad(quad.into()) {
  343|  11.1k|            self.spog.contains(&q)
  344|       |        } else {
  345|      0|            false
  346|       |        }
  347|  11.1k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB3_7Dataset10hash_tupleNtNtB5_7literal10LiteralRefEB5_:
  776|   182k|    fn hash_tuple(v: impl Hash) -> u64 {
  777|   182k|        let mut hasher = DefaultHasher::new();
  778|   182k|        v.hash(&mut hasher);
  779|   182k|        hasher.finish()
  780|   182k|    }
_RNCNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB4_7Dataset11distinguish0B6_:
  793|  85.8k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
_RNCNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB4_7Dataset11distinguishs0_0B6_:
  797|  22.2k|                .map(|b| {
  798|  22.2k|                    let mut hash_prime = hash.clone();
  799|  22.2k|                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  800|  22.2k|                    let (hash_prime_prime, partition_prime) =
  801|  22.2k|                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  802|  22.2k|                    self.distinguish(&hash_prime_prime, &partition_prime, quads_per_blank_node)
  803|  22.2k|                })
_RINvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB3_7Dataset15encoded_subjectNtNtB5_6triple10SubjectRefEB5_:
  461|  11.1k|    pub(super) fn encoded_subject<'a>(
  462|  11.1k|        &self,
  463|  11.1k|        node: impl Into<SubjectRef<'a>>,
  464|  11.1k|    ) -> Option<InternedSubject> {
  465|  11.1k|        InternedSubject::encoded_from(node.into(), &self.interner)
  466|  11.1k|    }
_RNCNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB4_7Dataset5label0B6_:
  824|   144k|            .map(|(s, p, o, g)| {
  825|   144k|                (
  826|   144k|                    match s {
  827|  83.4k|                        InternedSubject::NamedNode(_) => s,
  828|  60.9k|                        InternedSubject::BlankNode(bnode) => {
  829|  60.9k|                            InternedSubject::BlankNode(self.map_bnode(bnode, hashes))
  830|       |                        }
  831|       |                        #[cfg(feature = "rdf-star")]
  832|      0|                        InternedSubject::Triple(triple) => {
  833|      0|                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  834|      0|                                self.label_triple(&triple, hashes).as_ref(),
  835|      0|                                &mut self.interner,
  836|      0|                            )))
  837|       |                        }
  838|       |                    },
  839|   144k|                    p,
  840|   144k|                    match o {
  841|   140k|                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  842|  3.82k|                        InternedTerm::BlankNode(bnode) => {
  843|  3.82k|                            InternedTerm::BlankNode(self.map_bnode(bnode, hashes))
  844|       |                        }
  845|       |                        #[cfg(feature = "rdf-star")]
  846|      0|                        InternedTerm::Triple(triple) => {
  847|      0|                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  848|      0|                                self.label_triple(&triple, hashes).as_ref(),
  849|      0|                                &mut self.interner,
  850|      0|                            )))
  851|       |                        }
  852|       |                    },
  853|   144k|                    match g {
  854|   144k|                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  855|     20|                        InternedGraphName::BlankNode(bnode) => {
  856|     20|                            InternedGraphName::BlankNode(self.map_bnode(bnode, hashes))
  857|       |                        }
  858|       |                    },
  859|       |                )
  860|   144k|            })
_RINvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB3_7Dataset10hash_tupleTRINtNtCsdBW21Yiwikk_5alloc3vec3VecTyyyyEEyEEB5_:
  776|   197k|    fn hash_tuple(v: impl Hash) -> u64 {
  777|   197k|        let mut hasher = DefaultHasher::new();
  778|   197k|        v.hash(&mut hasher);
  779|   197k|        hasher.finish()
  780|   197k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB3_7Dataset18encoded_named_nodeNtNtB5_10named_node12NamedNodeRefEB5_:
  454|  11.1k|    pub(super) fn encoded_named_node<'a>(
  455|  11.1k|        &self,
  456|  11.1k|        node: impl Into<NamedNodeRef<'a>>,
  457|  11.1k|    ) -> Option<InternedNamedNode> {
  458|  11.1k|        InternedNamedNode::encoded_from(node.into(), &self.interner)
  459|  11.1k|    }
_RNCNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB4_7Dataset12canonicalize0B6_:
  545|  12.9k|            bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
_RNCNvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB4_7Dataset11hash_bnodes0B6_:
  653|  98.6k|            .map(|bnode| (*bnode, true))
_RINvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB3_7Dataset12encoded_termNtNtB5_6triple7TermRefEB5_:
  468|  11.1k|    pub(super) fn encoded_term<'a>(&self, term: impl Into<TermRef<'a>>) -> Option<InternedTerm> {
  469|  11.1k|        InternedTerm::encoded_from(term.into(), &self.interner)
  470|  11.1k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB3_7Dataset10hash_tupleTylEEB5_:
  776|  22.2k|    fn hash_tuple(v: impl Hash) -> u64 {
  777|  22.2k|        let mut hasher = DefaultHasher::new();
  778|  22.2k|        v.hash(&mut hasher);
  779|  22.2k|        hasher.finish()
  780|  22.2k|    }
_RNCNvXsg_NtCsbrE1BkJ52QU_5oxrdf7datasetNtB7_4IterNtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4next0B9_:
 1533|  11.1k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))
_RINvMNtCsbrE1BkJ52QU_5oxrdf7datasetNtB3_7Dataset18encoded_graph_nameNtNtB5_6triple12GraphNameRefEB5_:
  472|  11.1k|    pub(super) fn encoded_graph_name<'a>(
  473|  11.1k|        &self,
  474|  11.1k|        graph_name: impl Into<GraphNameRef<'a>>,
  475|  11.1k|    ) -> Option<InternedGraphName> {
  476|  11.1k|        InternedGraphName::encoded_from(graph_name.into(), &self.interner)
  477|  11.1k|    }

_RINvXsl_NtCsbrE1BkJ52QU_5oxrdf9interningNtB6_3KeyNtNtCsl2lhD68vXAd_4core4hash4Hash4hashNtNtNtCs7HEjVFsiW5Z_3std4hash6random13DefaultHasherEB8_:
   69|  7.29k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNCNvMs1_NtCsbrE1BkJ52QU_5oxrdf9interningNtB7_17InternedBlankNode12encoded_into0B9_:
  135|  25.5k|                .or_insert_with(|| blank_node.as_str().into());
_RINvXsF_NtCsbrE1BkJ52QU_5oxrdf9interningNtB6_17InternedBlankNodeNtNtCsl2lhD68vXAd_4core4hash4Hash4hashNtNtNtCs7HEjVFsiW5Z_3std4hash6random13DefaultHasherEB8_:
  123|  1.26M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMNtCsbrE1BkJ52QU_5oxrdf9interningNtB2_8Interner3get:
   39|  33.8k|    fn get(&self, value: &str) -> Option<Key> {
   40|  33.8k|        let mut hash = self.hash(value);
   41|       |        loop {
   42|  33.8k|            let v = self.string_for_hash.get(&hash)?;
   43|  33.8k|            if v == value {
   44|  33.8k|                return Some(Key(hash));
   45|      0|            } else if hash == u64::MAX - 1 {
   46|      0|                hash = 0;
   47|      0|            } else {
   48|      0|                hash += 1;
   49|      0|            }
   50|       |        }
   51|  33.8k|    }
_RNvMs1_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedBlankNode11decode_from:
  157|  7.96k|    pub fn decode_from(self, interner: &Interner) -> BlankNodeRef<'_> {
  158|  7.96k|        BlankNodeRef::new_unchecked(match self {
  159|  7.96k|            Self::Number { id } => &interner.string_for_blank_node_id[&id],
  160|      0|            Self::Other { id } => interner.resolve(id),
  161|       |        })
  162|  7.96k|    }
_RNvMs5_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_12InternedTerm12encoded_from:
  419|  11.1k|    pub fn encoded_from(term: TermRef<'_>, interner: &Interner) -> Option<Self> {
  420|  11.1k|        Some(match term {
  421|    899|            TermRef::NamedNode(term) => {
  422|    899|                Self::NamedNode(InternedNamedNode::encoded_from(term, interner)?)
  423|       |            }
  424|  1.72k|            TermRef::BlankNode(term) => {
  425|  1.72k|                Self::BlankNode(InternedBlankNode::encoded_from(term, interner)?)
  426|       |            }
  427|  8.53k|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_from(term, interner)?),
  428|       |            #[cfg(feature = "rdf-star")]
  429|      0|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  430|      0|                triple.as_ref(),
  431|      0|                interner,
  432|      0|            )?)),
  433|       |        })
  434|  11.1k|    }
_RNvXs7_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_21IdentityHasherBuilderNtNtCsl2lhD68vXAd_4core4hash11BuildHasher12build_hasher:
  513|   830k|    fn build_hasher(&self) -> IdentityHasher {
  514|   830k|        IdentityHasher::default()
  515|   830k|    }
_RNvXsz_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedBlankNodeNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqB7_:
  123|  1.34M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedGraphName11decode_from:
  367|  11.1k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> GraphNameRef<'a> {
  368|  11.1k|        match self {
  369|  10.9k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  370|    160|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.decode_from(interner)),
  371|     10|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.decode_from(interner)),
  372|       |        }
  373|  11.1k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf9interningNtB2_8Interner13get_or_intern:
   18|   167k|    fn get_or_intern(&mut self, value: &str) -> Key {
   19|   167k|        let mut hash = self.hash(value);
   20|   167k|        loop {
   21|   167k|            match self.string_for_hash.entry(hash) {
   22|  30.3k|                Entry::Vacant(e) => {
   23|  30.3k|                    e.insert(value.into());
   24|  30.3k|                    return Key(hash);
   25|       |                }
   26|   136k|                Entry::Occupied(e) => loop {
   27|   136k|                    if e.get() == value {
   28|   136k|                        return Key(hash);
   29|      0|                    } else if hash == u64::MAX - 1 {
   30|      0|                        hash = 0;
   31|      0|                    } else {
   32|      0|                        hash += 1;
   33|      0|                    }
   34|       |                },
   35|       |            }
   36|       |        }
   37|   167k|    }
_RNvMs1_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedBlankNode12encoded_from:
  144|  7.96k|    pub fn encoded_from(blank_node: BlankNodeRef<'_>, interner: &Interner) -> Option<Self> {
  145|  7.96k|        if let Some(id) = blank_node.unique_id() {
  146|  7.96k|            interner
  147|  7.96k|                .string_for_blank_node_id
  148|  7.96k|                .contains_key(&id)
  149|  7.96k|                .then_some(Self::Number { id })
  150|       |        } else {
  151|       |            Some(Self::Other {
  152|      0|                id: interner.get(blank_node.as_str())?,
  153|       |            })
  154|       |        }
  155|  7.96k|    }
_RNvMs2_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedLiteral11decode_from:
  228|   191k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> LiteralRef<'a> {
  229|   191k|        match self {
  230|  3.58k|            Self::String { value_id } => {
  231|  3.58k|                LiteralRef::new_simple_literal(interner.resolve(*value_id))
  232|       |            }
  233|       |            Self::LanguageTaggedString {
  234|  6.52k|                value_id,
  235|  6.52k|                language_id,
  236|  6.52k|            } => LiteralRef::new_language_tagged_literal_unchecked(
  237|  6.52k|                interner.resolve(*value_id),
  238|  6.52k|                interner.resolve(*language_id),
  239|  6.52k|            ),
  240|   180k|            Self::TypedLiteral { value_id, datatype } => LiteralRef::new_typed_literal(
  241|   180k|                interner.resolve(*value_id),
  242|   180k|                datatype.decode_from(interner),
  243|   180k|            ),
  244|       |        }
  245|   191k|    }
_RNvMs5_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_12InternedTerm12encoded_into:
  402|  47.6k|    pub fn encoded_into(term: TermRef<'_>, interner: &mut Interner) -> Self {
  403|  47.6k|        match term {
  404|  4.10k|            TermRef::NamedNode(term) => {
  405|  4.10k|                Self::NamedNode(InternedNamedNode::encoded_into(term, interner))
  406|       |            }
  407|  3.44k|            TermRef::BlankNode(term) => {
  408|  3.44k|                Self::BlankNode(InternedBlankNode::encoded_into(term, interner))
  409|       |            }
  410|  40.1k|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_into(term, interner)),
  411|       |            #[cfg(feature = "rdf-star")]
  412|      0|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  413|      0|                triple.as_ref(),
  414|      0|                interner,
  415|      0|            ))),
  416|       |        }
  417|  47.6k|    }
_RNvXsU_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedSubjectNtNtCsl2lhD68vXAd_4core3cmp3Ord3cmpB7_:
  267|   767k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsr_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedNamedNodeNtNtCsl2lhD68vXAd_4core3cmp10PartialOrd11partial_cmpB7_:
   86|   204k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsL_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedLiteralNtNtCsl2lhD68vXAd_4core3cmp10PartialOrd11partial_cmpB7_:
  174|  51.7k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsX_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedSubjectNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneB7_:
  267|   510k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsh_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_3KeyNtNtCsl2lhD68vXAd_4core3cmp10PartialOrd11partial_cmpB7_:
   69|   256k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedGraphName12encoded_from:
  355|  11.1k|    pub fn encoded_from(node: GraphNameRef<'_>, interner: &Interner) -> Option<Self> {
  356|  11.1k|        Some(match node {
  357|  10.9k|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  358|    160|            GraphNameRef::NamedNode(node) => {
  359|    160|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  360|       |            }
  361|     10|            GraphNameRef::BlankNode(node) => {
  362|     10|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  363|       |            }
  364|       |        })
  365|  11.1k|    }
_RNvXs1c_NtCsbrE1BkJ52QU_5oxrdf9interningNtB6_12InternedTermNtNtCsl2lhD68vXAd_4core3cmp3Ord3cmpB8_:
  392|   967k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsq_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedNamedNodeNtNtCsl2lhD68vXAd_4core3cmp3Ord3cmpB7_:
   86|  1.80M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXs1f_NtCsbrE1BkJ52QU_5oxrdf9interningNtB6_12InternedTermNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneB8_:
  392|   510k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMs3_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedSubject11decode_from:
  308|  11.1k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> SubjectRef<'a> {
  309|  11.1k|        match self {
  310|  4.92k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.decode_from(interner)),
  311|  6.23k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.decode_from(interner)),
  312|       |            #[cfg(feature = "rdf-star")]
  313|      0|            Self::Triple(triple) => SubjectRef::Triple(&interner.triples[triple.as_ref()]),
  314|       |        }
  315|  11.1k|    }
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedGraphName12encoded_into:
  343|  47.6k|    pub fn encoded_into(node: GraphNameRef<'_>, interner: &mut Interner) -> Self {
  344|  47.6k|        match node {
  345|  47.3k|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  346|    368|            GraphNameRef::NamedNode(node) => {
  347|    368|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  348|       |            }
  349|     20|            GraphNameRef::BlankNode(node) => {
  350|     20|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  351|       |            }
  352|       |        }
  353|  47.6k|    }
_RNvMs0_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedNamedNode11decode_from:
  104|   409k|    pub fn decode_from(self, interner: &Interner) -> NamedNodeRef<'_> {
  105|   409k|        NamedNodeRef::new_unchecked(interner.resolve(self.id))
  106|   409k|    }
_RNvXs8_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_14IdentityHasherNtNtCsl2lhD68vXAd_4core4hash6Hasher9write_u64:
  532|   830k|    fn write_u64(&mut self, i: u64) {
  533|   830k|        self.value = i
  534|   830k|    }
_RNvMs2_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedLiteral12encoded_from:
  209|  8.53k|    pub fn encoded_from(literal: LiteralRef<'_>, interner: &Interner) -> Option<Self> {
  210|  8.53k|        let value_id = interner.get(literal.value())?;
  211|  8.53k|        Some(if literal.is_plain() {
  212|    548|            if let Some(language) = literal.language() {
  213|       |                Self::LanguageTaggedString {
  214|    200|                    value_id,
  215|    200|                    language_id: interner.get(language)?,
  216|       |                }
  217|       |            } else {
  218|    348|                Self::String { value_id }
  219|       |            }
  220|       |        } else {
  221|       |            Self::TypedLiteral {
  222|  7.98k|                value_id,
  223|  7.98k|                datatype: InternedNamedNode::encoded_from(literal.datatype(), interner)?,
  224|       |            }
  225|       |        })
  226|  8.53k|    }
_RNvMs3_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedSubject12encoded_from:
  292|  11.1k|    pub fn encoded_from(node: SubjectRef<'_>, interner: &Interner) -> Option<Self> {
  293|  11.1k|        Some(match node {
  294|  4.92k|            SubjectRef::NamedNode(node) => {
  295|  4.92k|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  296|       |            }
  297|  6.23k|            SubjectRef::BlankNode(node) => {
  298|  6.23k|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  299|       |            }
  300|       |            #[cfg(feature = "rdf-star")]
  301|      0|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  302|      0|                triple.as_ref(),
  303|      0|                interner,
  304|      0|            )?)),
  305|       |        })
  306|  11.1k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf9interningNtB2_8Interner7resolve:
   64|   607k|    fn resolve(&self, key: Key) -> &str {
   65|   607k|        &self.string_for_hash[&key.0]
   66|   607k|    }
_RNvMs0_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedNamedNode12encoded_into:
   92|   126k|    pub fn encoded_into(named_node: NamedNodeRef<'_>, interner: &mut Interner) -> Self {
   93|   126k|        Self {
   94|   126k|            id: interner.get_or_intern(named_node.as_str()),
   95|   126k|        }
   96|   126k|    }
_RNvXsB_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedBlankNodeNtNtCsl2lhD68vXAd_4core3cmp10PartialOrd11partial_cmpB7_:
  123|  68.6k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMs0_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedNamedNode12encoded_from:
   98|  25.1k|    pub fn encoded_from(named_node: NamedNodeRef<'_>, interner: &Interner) -> Option<Self> {
   99|  25.1k|        Some(Self {
  100|  25.1k|            id: interner.get(named_node.as_str())?,
  101|       |        })
  102|  25.1k|    }
_RNvMs1_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedBlankNode12encoded_into:
  130|  80.6k|    pub fn encoded_into(blank_node: BlankNodeRef<'_>, interner: &mut Interner) -> Self {
  131|  80.6k|        if let Some(id) = blank_node.unique_id() {
  132|  80.3k|            interner
  133|  80.3k|                .string_for_blank_node_id
  134|  80.3k|                .entry(id)
  135|  80.3k|                .or_insert_with(|| blank_node.as_str().into());
  136|  80.3k|            Self::Number { id }
  137|       |        } else {
  138|    310|            Self::Other {
  139|    310|                id: interner.get_or_intern(blank_node.as_str()),
  140|    310|            }
  141|       |        }
  142|  80.6k|    }
_RNvMs2_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedLiteral12encoded_into:
  190|  40.1k|    pub fn encoded_into(literal: LiteralRef<'_>, interner: &mut Interner) -> Self {
  191|  40.1k|        let value_id = interner.get_or_intern(literal.value());
  192|  40.1k|        if literal.is_plain() {
  193|  1.10k|            if let Some(language) = literal.language() {
  194|    400|                Self::LanguageTaggedString {
  195|    400|                    value_id,
  196|    400|                    language_id: interner.get_or_intern(language),
  197|    400|                }
  198|       |            } else {
  199|    702|                Self::String { value_id }
  200|       |            }
  201|       |        } else {
  202|  39.0k|            Self::TypedLiteral {
  203|  39.0k|                value_id,
  204|  39.0k|                datatype: InternedNamedNode::encoded_into(literal.datatype(), interner),
  205|  39.0k|            }
  206|       |        }
  207|  40.1k|    }
_RNvMs3_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedSubject12encoded_into:
  276|  47.6k|    pub fn encoded_into(node: SubjectRef<'_>, interner: &mut Interner) -> Self {
  277|  47.6k|        match node {
  278|  35.2k|            SubjectRef::NamedNode(node) => {
  279|  35.2k|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  280|       |            }
  281|  12.4k|            SubjectRef::BlankNode(node) => {
  282|  12.4k|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  283|       |            }
  284|       |            #[cfg(feature = "rdf-star")]
  285|      0|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  286|      0|                triple.as_ref(),
  287|      0|                interner,
  288|      0|            ))),
  289|       |        }
  290|  47.6k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf9interningNtB2_8Interner4hash:
   53|   201k|    fn hash(&self, value: &str) -> u64 {
   54|   201k|        let mut hasher = self.hasher.build_hasher();
   55|   201k|        hasher.write(value.as_bytes());
   56|   201k|        let hash = hasher.finish();
   57|   201k|        if hash == u64::MAX {
   58|      0|            0
   59|       |        } else {
   60|   201k|            hash
   61|       |        }
   62|   201k|    }
_RNvMs5_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_12InternedTerm11decode_from:
  436|  11.1k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> TermRef<'a> {
  437|  11.1k|        match self {
  438|    899|            Self::NamedNode(term) => TermRef::NamedNode(term.decode_from(interner)),
  439|  1.72k|            Self::BlankNode(term) => TermRef::BlankNode(term.decode_from(interner)),
  440|  8.53k|            Self::Literal(term) => TermRef::Literal(term.decode_from(interner)),
  441|       |            #[cfg(feature = "rdf-star")]
  442|      0|            Self::Triple(triple) => TermRef::Triple(&interner.triples[triple.as_ref()]),
  443|       |        }
  444|  11.1k|    }
_RNvXsa_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_8InternerNtNtCsl2lhD68vXAd_4core7default7Default7defaultB7_:
    7|  5.61k|#[derive(Debug, Default, Clone)]
_RNvXsg_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_3KeyNtNtCsl2lhD68vXAd_4core3cmp3Ord3cmpB7_:
   69|  2.59M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXst_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedNamedNodeNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneB7_:
   86|   510k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXs8_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_14IdentityHasherNtNtCsl2lhD68vXAd_4core4hash6Hasher6finish:
  524|   830k|    fn finish(&self) -> u64 {
  525|   830k|        self.value
  526|   830k|    }
_RNvXsf_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_3KeyNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqB7_:
   69|  6.75k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsK_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedLiteralNtNtCsl2lhD68vXAd_4core3cmp3Ord3cmpB7_:
  174|   796k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsN_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedLiteralNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneB7_:
  174|   429k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsV_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_15InternedSubjectNtNtCsl2lhD68vXAd_4core3cmp10PartialOrd11partial_cmpB7_:
  267|   203k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsA_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedBlankNodeNtNtCsl2lhD68vXAd_4core3cmp3Ord3cmpB7_:
  123|   137k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsD_NtCsbrE1BkJ52QU_5oxrdf9interningNtB5_17InternedBlankNodeNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneB7_:
  123|   246k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXs1q_NtCsbrE1BkJ52QU_5oxrdf9interningNtB6_21IdentityHasherBuilderNtNtCsl2lhD68vXAd_4core7default7Default7defaultB8_:
  507|  5.61k|#[derive(Default, Clone)]
_RNvXs1s_NtCsbrE1BkJ52QU_5oxrdf9interningNtB6_14IdentityHasherNtNtCsl2lhD68vXAd_4core7default7Default7defaultB8_:
  518|   830k|#[derive(Default)]
_RNvXs1d_NtCsbrE1BkJ52QU_5oxrdf9interningNtB6_12InternedTermNtNtCsl2lhD68vXAd_4core3cmp10PartialOrd11partial_cmpB8_:
  392|  57.4k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs13_NtCsbrE1BkJ52QU_5oxrdf9interningNtB6_17InternedGraphNameNtNtCsl2lhD68vXAd_4core3cmp3Ord3cmpB8_:
  335|   845k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs16_NtCsbrE1BkJ52QU_5oxrdf9interningNtB6_17InternedGraphNameNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneB8_:
  335|   510k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]

_RNvMNtCsbrE1BkJ52QU_5oxrdf7literalNtB2_7Literal6as_refCsgo9gpfLdqrc_4trig:
  132|  98.4k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  133|  98.4k|        LiteralRef(match &self.0 {
  134|  19.6k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  135|  1.49k|            LiteralContent::LanguageTaggedString { value, language } => {
  136|  1.49k|                LiteralRefContent::LanguageTaggedString { value, language }
  137|       |            }
  138|  77.2k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  139|  77.2k|                value,
  140|  77.2k|                datatype: datatype.as_ref(),
  141|  77.2k|            },
  142|       |        })
  143|  98.4k|    }
_RNvXsI_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_14LiteralContentNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCsgo9gpfLdqrc_4trig:
   40|  59.0k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsD_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_7LiteralNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCsgo9gpfLdqrc_4trig:
   37|  59.0k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsu_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_10LiteralRefNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCs4WjTcpTVJQo_5oxttl:
  568|  20.0k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  569|  20.0k|        match self.0 {
  570|  18.9k|            LiteralRefContent::String(value) => print_quoted_str(value, f),
  571|  1.09k|            LiteralRefContent::LanguageTaggedString { value, language } => {
  572|  1.09k|                print_quoted_str(value, f)?;
  573|  1.09k|                write!(f, "@{language}")
  574|       |            }
  575|      0|            LiteralRefContent::TypedLiteral { value, datatype } => {
  576|      0|                print_quoted_str(value, f)?;
  577|      0|                write!(f, "^^{datatype}")
  578|       |            }
  579|       |        }
  580|  20.0k|    }
_RNvMst_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_10LiteralRef8datatypeCs4WjTcpTVJQo_5oxttl:
  516|  58.2k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  517|  58.2k|        match self.0 {
  518|  18.9k|            LiteralRefContent::String(_) => xsd::STRING,
  519|  1.09k|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  520|  38.1k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  521|       |        }
  522|  58.2k|    }
_RNvXsF_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_7LiteralNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneCs4WjTcpTVJQo_5oxttl:
   37|   174k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMst_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_10LiteralRef5valueCs4WjTcpTVJQo_5oxttl:
  491|  58.2k|    pub const fn value(self) -> &'a str {
  492|  58.2k|        match self.0 {
  493|  18.9k|            LiteralRefContent::String(value)
  494|  1.09k|            | LiteralRefContent::LanguageTaggedString { value, .. }
  495|  58.2k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  496|  58.2k|        }
  497|  58.2k|    }
_RNvXsM_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_14LiteralContentNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneCs4WjTcpTVJQo_5oxttl:
   40|   174k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RINvMNtCsbrE1BkJ52QU_5oxrdf7literalNtB3_7Literal18new_simple_literalRNtNtCsdBW21Yiwikk_5alloc6string6StringECs4WjTcpTVJQo_5oxttl:
   50|    394|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   51|    394|        Self(LiteralContent::String(value.into()))
   52|    394|    }
_RINvXs13_NtCsbrE1BkJ52QU_5oxrdf7literalNtB7_17LiteralRefContentNtNtCsl2lhD68vXAd_4core4hash4Hash4hashNtNtNtCs7HEjVFsiW5Z_3std4hash6random13DefaultHasherEB9_:
  446|   182k|#[derive(PartialEq, Eq, Debug, Clone, Copy, Hash)]
_RINvMNtCsbrE1BkJ52QU_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   56|   114k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   57|   114k|        let value = value.into();
   58|   114k|        let datatype = datatype.into();
   59|   114k|        Self(if datatype == xsd::STRING {
   60|      0|            LiteralContent::String(value)
   61|       |        } else {
   62|   114k|            LiteralContent::TypedLiteral { value, datatype }
   63|       |        })
   64|   114k|    }
_RINvMst_NtCsbrE1BkJ52QU_5oxrdf7literalNtB6_10LiteralRef17new_typed_literalNtNtB8_10named_node12NamedNodeRefEB8_:
  468|   180k|    pub fn new_typed_literal(value: &'a str, datatype: impl Into<NamedNodeRef<'a>>) -> Self {
  469|   180k|        let datatype = datatype.into();
  470|   180k|        LiteralRef(if datatype == xsd::STRING {
  471|      0|            LiteralRefContent::String(value)
  472|       |        } else {
  473|   180k|            LiteralRefContent::TypedLiteral { value, datatype }
  474|       |        })
  475|   180k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCsdBW21Yiwikk_5alloc6string6StringB1n_EB5_:
   88|  3.29k|    pub fn new_language_tagged_literal_unchecked(
   89|  3.29k|        value: impl Into<String>,
   90|  3.29k|        language: impl Into<String>,
   91|  3.29k|    ) -> Self {
   92|  3.29k|        Self(LiteralContent::LanguageTaggedString {
   93|  3.29k|            value: value.into(),
   94|  3.29k|            language: language.into(),
   95|  3.29k|        })
   96|  3.29k|    }
_RINvNtCsbrE1BkJ52QU_5oxrdf7literal16print_quoted_strNtNtCsl2lhD68vXAd_4core3fmt9FormatterEB4_:
  619|  20.0k|pub fn print_quoted_str(string: &str, f: &mut impl Write) -> fmt::Result {
  620|  20.0k|    f.write_char('"')?;
  621|   103k|    for c in string.chars() {
  622|   103k|        match c {
  623|  1.93k|            '\u{08}' => f.write_str("\\b"),
  624|    418|            '\t' => f.write_str("\\t"),
  625|    878|            '\n' => f.write_str("\\n"),
  626|    566|            '\u{0c}' => f.write_str("\\f"),
  627|    282|            '\r' => f.write_str("\\r"),
  628|  2.84k|            '"' => f.write_str("\\\""),
  629|    377|            '\\' => f.write_str("\\\\"),
  630|  96.4k|            '\0'..='\u{1f}' | '\u{7f}' => write!(f, "\\u{:04X}", u32::from(c)),
  631|  31.2k|            _ => f.write_char(c),
  632|      0|        }?;
  633|       |    }
  634|  20.0k|    f.write_char('"')
  635|  20.0k|}
_RINvXsV_NtCsbrE1BkJ52QU_5oxrdf7literalNtB6_10LiteralRefNtNtCsl2lhD68vXAd_4core4hash4Hash4hashNtNtNtCs7HEjVFsiW5Z_3std4hash6random13DefaultHasherEB8_:
  443|   182k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RINvMNtCsbrE1BkJ52QU_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCsdBW21Yiwikk_5alloc6string6StringEB5_:
   50|  56.5k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   51|  56.5k|        Self(LiteralContent::String(value.into()))
   52|  56.5k|    }
_RNvMst_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_10LiteralRef18new_simple_literalB7_:
  462|  3.58k|    pub const fn new_simple_literal(value: &'a str) -> Self {
  463|  3.58k|        LiteralRef(LiteralRefContent::String(value))
  464|  3.58k|    }
_RNvMst_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_10LiteralRef8is_plainB7_:
  529|  48.6k|    pub const fn is_plain(self) -> bool {
  530|  47.0k|        matches!(
  531|  48.6k|            self.0,
  532|       |            LiteralRefContent::String(_) | LiteralRefContent::LanguageTaggedString { .. }
  533|       |        )
  534|  48.6k|    }
_RNvMst_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_10LiteralRef37new_language_tagged_literal_uncheckedB7_:
  485|  6.52k|    pub const fn new_language_tagged_literal_unchecked(value: &'a str, language: &'a str) -> Self {
  486|  6.52k|        LiteralRef(LiteralRefContent::LanguageTaggedString { value, language })
  487|  6.52k|    }
_RNvMst_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_10LiteralRef5valueB7_:
  491|  48.6k|    pub const fn value(self) -> &'a str {
  492|  48.6k|        match self.0 {
  493|  1.05k|            LiteralRefContent::String(value)
  494|    600|            | LiteralRefContent::LanguageTaggedString { value, .. }
  495|  48.6k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  496|  48.6k|        }
  497|  48.6k|    }
_RNvMst_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_10LiteralRef8languageB7_:
  504|  1.65k|    pub const fn language(self) -> Option<&'a str> {
  505|  1.65k|        match self.0 {
  506|    600|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  507|  1.05k|            _ => None,
  508|       |        }
  509|  1.65k|    }
_RNvMst_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_10LiteralRef8datatypeB7_:
  516|  47.0k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  517|  47.0k|        match self.0 {
  518|      0|            LiteralRefContent::String(_) => xsd::STRING,
  519|      0|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  520|  47.0k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  521|       |        }
  522|  47.0k|    }

_RNvMNtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB2_9NamedNode6as_strCsgo9gpfLdqrc_4trig:
   44|  36.7k|    pub fn as_str(&self) -> &str {
   45|  36.7k|        self.iri.as_str()
   46|  36.7k|    }
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCsgo9gpfLdqrc_4trig:
  138|   225k|    pub fn into_owned(self) -> NamedNode {
  139|   225k|        NamedNode::new_unchecked(self.iri)
  140|   225k|    }
_RNvXs5_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCsgo9gpfLdqrc_4trig:
  145|   219k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|   219k|        write!(f, "<{}>", self.as_str())
  147|   219k|    }
_RNvXsu_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCsgo9gpfLdqrc_4trig:
  106|  49.0k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMNtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB2_9NamedNode6as_refCsgo9gpfLdqrc_4trig:
   54|   543k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|   543k|        NamedNodeRef::new_unchecked(&self.iri)
   56|   543k|    }
_RNvXsl_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCsgo9gpfLdqrc_4trig:
   17|   337k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs8_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRefINtNtCsl2lhD68vXAd_4core3cmp9PartialEqNtB5_9NamedNodeE2eqCsgo9gpfLdqrc_4trig:
  166|  36.7k|    fn eq(&self, other: &NamedNode) -> bool {
  167|  36.7k|        self.as_str() == other.as_str()
  168|  36.7k|    }
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCsgo9gpfLdqrc_4trig:
  128|   543k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   543k|        Self { iri }
  130|   543k|    }
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCsgo9gpfLdqrc_4trig:
  133|   256k|    pub const fn as_str(self) -> &'a str {
  134|   256k|        self.iri
  135|   256k|    }
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCs4WjTcpTVJQo_5oxttl:
  133|  20.5k|    pub const fn as_str(self) -> &'a str {
  134|  20.5k|        self.iri
  135|  20.5k|    }
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCs4WjTcpTVJQo_5oxttl:
  138|  23.9k|    pub fn into_owned(self) -> NamedNode {
  139|  23.9k|        NamedNode::new_unchecked(self.iri)
  140|  23.9k|    }
_RNvXsp_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneCs4WjTcpTVJQo_5oxttl:
   17|   904k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsg_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCsl2lhD68vXAd_4core7convert4FromINtCs72NQLJxIjgJ_5oxiri3IriNtNtCsdBW21Yiwikk_5alloc6string6StringEE4fromCs4WjTcpTVJQo_5oxttl:
  222|   350k|    fn from(iri: Iri<String>) -> Self {
  223|   350k|        Self {
  224|   350k|            iri: iri.into_inner(),
  225|   350k|        }
  226|   350k|    }
_RNvXs5_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCs4WjTcpTVJQo_5oxttl:
  145|  20.5k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|  20.5k|        write!(f, "<{}>", self.as_str())
  147|  20.5k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|   742k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   742k|        Self { iri: iri.into() }
   41|   742k|    }
_RINvXsA_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB6_12NamedNodeRefNtNtCsl2lhD68vXAd_4core4hash4Hash4hashNtNtNtCs7HEjVFsiW5Z_3std4hash6random13DefaultHasherEB8_:
  106|   384k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXs9_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCsl2lhD68vXAd_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|   114k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|   114k|        self.as_str() == other.as_str()
  175|   114k|    }
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedB7_:
  128|   409k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   409k|        Self { iri }
  130|   409k|    }
_RNvXs6_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCsl2lhD68vXAd_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|   492k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|   492k|        node.into_owned()
  154|   492k|    }
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|   266k|    pub const fn as_str(self) -> &'a str {
  134|   266k|        self.iri
  135|   266k|    }
_RNvXsu_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqB7_:
  106|   180k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMNtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|   114k|    pub fn as_str(&self) -> &str {
   45|   114k|        self.iri.as_str()
   46|   114k|    }
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|   492k|    pub fn into_owned(self) -> NamedNode {
  139|   492k|        NamedNode::new_unchecked(self.iri)
  140|   492k|    }

_RNvMs1g_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_12GraphNameRef16is_default_graphCsgo9gpfLdqrc_4trig:
  964|   237k|    pub fn is_default_graph(&self) -> bool {
  965|   237k|        matches!(self, Self::DefaultGraph)
  966|   237k|    }
_RNvMs1g_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_12GraphNameRef10into_ownedCsgo9gpfLdqrc_4trig:
  969|    762|    pub fn into_owned(self) -> GraphName {
  970|    762|        match self {
  971|    498|            Self::NamedNode(node) => GraphName::NamedNode(node.into_owned()),
  972|     25|            Self::BlankNode(node) => GraphName::BlankNode(node.into_owned()),
  973|    239|            Self::DefaultGraph => GraphName::DefaultGraph,
  974|       |        }
  975|    762|    }
_RNvXs25_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_4TermNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCsgo9gpfLdqrc_4trig:
  385|   231k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1w_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_7QuadRefINtNtCsl2lhD68vXAd_4core7convert4FromRNtB6_4QuadE4fromCsgo9gpfLdqrc_4trig:
 1214|   277k|    fn from(quad: &'a Quad) -> Self {
 1215|   277k|        quad.as_ref()
 1216|   277k|    }
_RNvXs2z_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_9GraphNameNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCsgo9gpfLdqrc_4trig:
  856|   231k|#[derive(Eq, PartialEq, Debug, Clone, Hash, Default)]
_RNvMsc_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7Subject6as_refCsgo9gpfLdqrc_4trig:
  181|   501k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|   501k|        match self {
  183|  77.9k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|   423k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|      0|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|   501k|    }
_RNvXs1h_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_12GraphNameRefNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCsgo9gpfLdqrc_4trig:
  980|    523|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  981|    523|        match self {
  982|    498|            Self::NamedNode(node) => node.fmt(f),
  983|     25|            Self::BlankNode(node) => node.fmt(f),
  984|      0|            Self::DefaultGraph => write!(f, "DEFAULT"),
  985|       |        }
  986|    523|    }
_RNvMsy_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_4Term6as_refCsgo9gpfLdqrc_4trig:
  417|   277k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|   277k|        match self {
  419|  18.2k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|   161k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  98.4k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|      0|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|   277k|    }
_RNvXs2Q_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_4QuadNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCsgo9gpfLdqrc_4trig:
 1065|   231k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMs18_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_9GraphName6as_refCsgo9gpfLdqrc_4trig:
  881|   745k|    pub fn as_ref(&self) -> GraphNameRef<'_> {
  882|   745k|        match self {
  883|  92.0k|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.as_ref()),
  884|    193|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.as_ref()),
  885|   653k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  886|       |        }
  887|   745k|    }
_RNvXs2H_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_12GraphNameRefNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCsgo9gpfLdqrc_4trig:
  944|   230k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash, Default)]
_RNvXs1Q_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_7SubjectNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCsgo9gpfLdqrc_4trig:
  155|   231k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMsn_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_10SubjectRef10into_ownedCsgo9gpfLdqrc_4trig:
  294|   193k|    pub fn into_owned(self) -> Subject {
  295|   193k|        match self {
  296|  6.39k|            Self::NamedNode(node) => Subject::NamedNode(node.into_owned()),
  297|   187k|            Self::BlankNode(node) => Subject::BlankNode(node.into_owned()),
  298|       |            #[cfg(feature = "rdf-star")]
  299|      0|            Self::Triple(triple) => Subject::Triple(Box::new(triple.clone())),
  300|       |        }
  301|   193k|    }
_RNvMs18_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_9GraphName16is_default_graphCsgo9gpfLdqrc_4trig:
  876|   237k|    pub fn is_default_graph(&self) -> bool {
  877|   237k|        self.as_ref().is_default_graph()
  878|   237k|    }
_RNvXs1X_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_10SubjectRefNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCsgo9gpfLdqrc_4trig:
  268|   223k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RNvMs1q_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_4Quad6as_refCsgo9gpfLdqrc_4trig:
 1098|   277k|    pub fn as_ref(&self) -> QuadRef<'_> {
 1099|   277k|        QuadRef {
 1100|   277k|            subject: self.subject.as_ref(),
 1101|   277k|            predicate: self.predicate.as_ref(),
 1102|   277k|            object: self.object.as_ref(),
 1103|   277k|            graph_name: self.graph_name.as_ref(),
 1104|   277k|        }
 1105|   277k|    }
_RINvMs1q_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node12NamedNodeRefB11_NtB7_9GraphNameECs4WjTcpTVJQo_5oxttl:
 1083|  22.1k|    pub fn new(
 1084|  22.1k|        subject: impl Into<Subject>,
 1085|  22.1k|        predicate: impl Into<NamedNode>,
 1086|  22.1k|        object: impl Into<Term>,
 1087|  22.1k|        graph_name: impl Into<GraphName>,
 1088|  22.1k|    ) -> Self {
 1089|  22.1k|        Self {
 1090|  22.1k|            subject: subject.into(),
 1091|  22.1k|            predicate: predicate.into(),
 1092|  22.1k|            object: object.into(),
 1093|  22.1k|            graph_name: graph_name.into(),
 1094|  22.1k|        }
 1095|  22.1k|    }
_RINvMs1q_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node12NamedNodeRefNtNtB9_10blank_node9BlankNodeNtB7_9GraphNameECs4WjTcpTVJQo_5oxttl:
 1083|  56.1k|    pub fn new(
 1084|  56.1k|        subject: impl Into<Subject>,
 1085|  56.1k|        predicate: impl Into<NamedNode>,
 1086|  56.1k|        object: impl Into<Term>,
 1087|  56.1k|        graph_name: impl Into<GraphName>,
 1088|  56.1k|    ) -> Self {
 1089|  56.1k|        Self {
 1090|  56.1k|            subject: subject.into(),
 1091|  56.1k|            predicate: predicate.into(),
 1092|  56.1k|            object: object.into(),
 1093|  56.1k|            graph_name: graph_name.into(),
 1094|  56.1k|        }
 1095|  56.1k|    }
_RINvMs1q_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtB7_4TermNtB7_9GraphNameECs4WjTcpTVJQo_5oxttl:
 1083|   612k|    pub fn new(
 1084|   612k|        subject: impl Into<Subject>,
 1085|   612k|        predicate: impl Into<NamedNode>,
 1086|   612k|        object: impl Into<Term>,
 1087|   612k|        graph_name: impl Into<GraphName>,
 1088|   612k|    ) -> Self {
 1089|   612k|        Self {
 1090|   612k|            subject: subject.into(),
 1091|   612k|            predicate: predicate.into(),
 1092|   612k|            object: object.into(),
 1093|   612k|            graph_name: graph_name.into(),
 1094|   612k|        }
 1095|   612k|    }
_RINvMs12_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB7_6Triple3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtB7_4TermECs4WjTcpTVJQo_5oxttl:
  728|     20|    pub fn new(
  729|     20|        subject: impl Into<Subject>,
  730|     20|        predicate: impl Into<NamedNode>,
  731|     20|        object: impl Into<Term>,
  732|     20|    ) -> Self {
  733|     20|        Self {
  734|     20|            subject: subject.into(),
  735|     20|            predicate: predicate.into(),
  736|     20|            object: object.into(),
  737|     20|        }
  738|     20|    }
_RNvXs1c_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_9GraphNameINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB8_10blank_node9BlankNodeE4fromCs4WjTcpTVJQo_5oxttl:
  913|    221|    fn from(node: BlankNode) -> Self {
  914|    221|        Self::BlankNode(node)
  915|    221|    }
_RNvXs1a_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_9GraphNameINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB8_10named_node9NamedNodeE4fromCs4WjTcpTVJQo_5oxttl:
  899|  2.20k|    fn from(node: NamedNode) -> Self {
  900|  2.20k|        Self::NamedNode(node)
  901|  2.20k|    }
_RNvXs1e_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_9GraphNameINtNtCsl2lhD68vXAd_4core7convert4FromNtB6_16NamedOrBlankNodeE4fromCs4WjTcpTVJQo_5oxttl:
  927|  2.42k|    fn from(node: NamedOrBlankNode) -> Self {
  928|  2.42k|        match node {
  929|  2.20k|            NamedOrBlankNode::NamedNode(node) => node.into(),
  930|    221|            NamedOrBlankNode::BlankNode(node) => node.into(),
  931|       |        }
  932|  2.42k|    }
_RNvXs1S_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_7SubjectNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneCs4WjTcpTVJQo_5oxttl:
  155|   612k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsL_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_4TermINtNtCsl2lhD68vXAd_4core7convert4FromNtB5_7SubjectE4fromCs4WjTcpTVJQo_5oxttl:
  520|     26|    fn from(node: Subject) -> Self {
  521|     26|        match node {
  522|      0|            Subject::NamedNode(node) => node.into(),
  523|     26|            Subject::BlankNode(node) => node.into(),
  524|       |            #[cfg(feature = "rdf-star")]
  525|      0|            Subject::Triple(triple) => Self::Triple(triple),
  526|       |        }
  527|     26|    }
_RNvXsY_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7TermRefINtNtCsl2lhD68vXAd_4core7convert4FromNtB5_10SubjectRefE4fromCs4WjTcpTVJQo_5oxttl:
  666|   193k|    fn from(node: SubjectRef<'a>) -> Self {
  667|   193k|        match node {
  668|  6.39k|            SubjectRef::NamedNode(node) => node.into(),
  669|   187k|            SubjectRef::BlankNode(node) => node.into(),
  670|       |            #[cfg(feature = "rdf-star")]
  671|      0|            SubjectRef::Triple(triple) => triple.into(),
  672|       |        }
  673|   193k|    }
_RNvXsP_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7TermRefINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCs4WjTcpTVJQo_5oxttl:
  599|  6.39k|    fn from(node: NamedNodeRef<'a>) -> Self {
  600|  6.39k|        Self::NamedNode(node)
  601|  6.39k|    }
_RNvXsR_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7TermRefINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10blank_node12BlankNodeRefE4fromCs4WjTcpTVJQo_5oxttl:
  613|   187k|    fn from(node: BlankNodeRef<'a>) -> Self {
  614|   187k|        Self::BlankNode(node)
  615|   187k|    }
_RNvXsl_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7SubjectINtNtCsl2lhD68vXAd_4core7convert4FromNtB5_16NamedOrBlankNodeE4fromCs4WjTcpTVJQo_5oxttl:
  252|   208k|    fn from(node: NamedOrBlankNode) -> Self {
  253|   208k|        match node {
  254|  50.8k|            NamedOrBlankNode::NamedNode(node) => node.into(),
  255|   158k|            NamedOrBlankNode::BlankNode(node) => node.into(),
  256|       |        }
  257|   208k|    }
_RNvXs27_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_4TermNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneCs4WjTcpTVJQo_5oxttl:
  385|   612k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs0_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_16NamedOrBlankNodeINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromCs4WjTcpTVJQo_5oxttl:
   43|  67.9k|    fn from(node: NamedNode) -> Self {
   44|  67.9k|        Self::NamedNode(node)
   45|  67.9k|    }
_RNvXs2B_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_9GraphNameNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneCs4WjTcpTVJQo_5oxttl:
  856|   690k|#[derive(Eq, PartialEq, Debug, Clone, Hash, Default)]
_RNvXsf_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7SubjectINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCs4WjTcpTVJQo_5oxttl:
  207|    116|    fn from(node: NamedNodeRef<'_>) -> Self {
  208|    116|        node.into_owned().into()
  209|    116|    }
_RNvXsB_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_4TermINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCs4WjTcpTVJQo_5oxttl:
  444|  23.8k|    fn from(node: NamedNodeRef<'_>) -> Self {
  445|  23.8k|        node.into_owned().into()
  446|  23.8k|    }
_RNvXs2_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_16NamedOrBlankNodeINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromCs4WjTcpTVJQo_5oxttl:
   57|   158k|    fn from(node: BlankNode) -> Self {
   58|   158k|        Self::BlankNode(node)
   59|   158k|    }
_RNvXse_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7SubjectINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|  51.6k|    fn from(node: NamedNode) -> Self {
  201|  51.6k|        Self::NamedNode(node)
  202|  51.6k|    }
_RNvXsi_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7SubjectINtNtCsl2lhD68vXAd_4core7convert4FromNtB5_6TripleE4fromB7_:
  229|     20|    fn from(node: Triple) -> Self {
  230|     20|        Self::Triple(Box::new(node))
  231|     20|    }
_RNvXsg_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7SubjectINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|   599k|    fn from(node: BlankNode) -> Self {
  215|   599k|        Self::BlankNode(node)
  216|   599k|    }
_RNvXsC_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_4TermINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  451|   473k|    fn from(node: BlankNode) -> Self {
  452|   473k|        Self::BlankNode(node)
  453|   473k|    }
_RNvXsA_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_4TermINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|  42.5k|    fn from(node: NamedNode) -> Self {
  438|  42.5k|        Self::NamedNode(node)
  439|  42.5k|    }
_RNvXsE_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_4TermINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  465|   174k|    fn from(literal: Literal) -> Self {
  466|   174k|        Self::Literal(literal)
  467|   174k|    }

_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer9parse_iri0B8_:
  212|  6.57k|        let iri = String::from_utf8(iri).map_err(|e| {
  213|  6.57k|            (
  214|  6.57k|                position.clone(),
  215|  6.57k|                format!("The IRI contains invalid UTF-8 characters: {e}"),
  216|  6.57k|            )
  217|  6.57k|        })?;
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer14parse_lang_tag0B8_:
  551|  8.88k|                .map_err(|e| (position.clone(), e.to_string()))?
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_chars_0B8_:
  784|      2|        let c = char::from_u32(codepoint).ok_or_else(|| {
  785|      2|            (
  786|      2|                position..position + len +2,
  787|      2|                format!(
  788|      2|                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  789|      2|                ),
  790|      2|            )
  791|      2|        })?;
_RNCNvNtCs4WjTcpTVJQo_5oxttl5lexer13str_from_utf80B5_:
  928|  10.8k|    str::from_utf8(data).map_err(|e| {
  929|  10.8k|        (
  930|  10.8k|            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  931|  10.8k|            format!("Invalid UTF-8: {e}"),
  932|  10.8k|        )
  933|  10.8k|            .into()
  934|  10.8k|    })
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer18recognize_variable0B8_:
  325|  38.8k|            result.and_then(|(name, _)| {
  326|  38.8k|                if name.is_empty() {
  327|  30.2k|                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  328|       |                } else {
  329|  8.60k|                    Ok(N3Token::Variable(name))
  330|       |                }
  331|  38.8k|            }),
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer9parse_iris_0B8_:
  223|  33.5k|        .map_err(|e| (position, e.to_string()))?;
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer22recognize_unicode_char0B8_:
  856|  19.2k|                .map(|c| (c, bytes_needed + 1))
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer26recognize_pname_or_keyword0B8_:
  309|  50.2k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  310|  50.2k|                prefix: pn_prefix,
  311|  50.2k|                local,
  312|  50.2k|                might_be_invalid_iri,
  313|  50.2k|            }),
_RNCNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_char0B8_:
  776|  3.37k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  777|  3.37k|            (
  778|  3.37k|                position..position + len + 2,
  779|  3.37k|                format!(
  780|  3.37k|                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  781|  3.37k|                ),
  782|  3.37k|            )
  783|  3.37k|        })?;
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer16recognize_string:
  556|   206k|    fn recognize_string(
  557|   206k|        data: &[u8],
  558|   206k|        delimiter: u8,
  559|   206k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  560|   206k|        // [22] 	STRING_LITERAL_QUOTE 	::= 	'"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
  561|   206k|        // [23] 	STRING_LITERAL_SINGLE_QUOTE 	::= 	"'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
  562|   206k|        let mut string = String::new();
  563|   206k|        let mut i = 1;
  564|       |        loop {
  565|   702k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  566|   630k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  567|   626k|                Ok(s) => string.push_str(s),
  568|  4.46k|                Err(e) => return Some((end, Err(e))),
  569|       |            };
  570|   626k|            i += end;
  571|   626k|            match data[i] {
  572|   626k|                c if c == delimiter => {
  573|  59.0k|                    return Some((i + 1, Ok(N3Token::String(string))));
  574|       |                }
  575|       |                b'\\' => {
  576|   567k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  577|   548k|                    i += additional + 1;
  578|   548k|                    match c {
  579|   496k|                        Ok(c) => {
  580|   496k|                            string.push(c);
  581|   496k|                        }
  582|  51.5k|                        Err(e) => {
  583|       |                            // We read until the end of string char
  584|  51.5k|                            let end = memchr(delimiter, &data[i..])?;
  585|  2.23k|                            return Some((i + end + 1, Err(e)));
  586|       |                        }
  587|       |                    }
  588|       |                }
  589|      0|                _ => unreachable!(),
  590|       |            }
  591|       |        }
  592|   206k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer20is_possible_pn_chars:
  892|  18.7M|    fn is_possible_pn_chars(c: char) -> bool {
  893|  18.7M|        Self::is_possible_pn_chars_u(c)
  894|  8.90M|            || matches!(c,
  895|  7.84M|        '-' | '0'..='9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
  896|  18.7M|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer26recognize_blank_node_label:
  477|   377k|    fn recognize_blank_node_label(
  478|   377k|        data: &[u8],
  479|   377k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  480|   377k|        // [141s] 	BLANK_NODE_LABEL 	::= 	'_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
  481|   377k|        let mut i = 2;
  482|       |        loop {
  483|  11.4M|            match Self::recognize_unicode_char(&data[i..], i)? {
  484|  11.4M|                Ok((c, consumed)) => {
  485|  11.4M|                    if (i == 2 && (Self::is_possible_pn_chars_u(c) || c.is_ascii_digit()))
  486|  11.0M|                        || (i > 2 && Self::is_possible_pn_chars(c))
  487|  11.1M|                    {
  488|  11.1M|                        // Ok
  489|  11.1M|                    } else if i > 2 && c == '.' {
  490|  2.64k|                        if data[i - 1] == b'.' {
  491|    168|                            i -= 1;
  492|    168|                            return Some((
  493|    168|                                i,
  494|    168|                                str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  495|    168|                            ));
  496|  2.47k|                        }
  497|   347k|                    } else if i == 0 {
  498|      0|                        return Some((
  499|      0|                            i,
  500|      0|                            Err((0..i, "A blank node ID should not be empty").into()),
  501|      0|                        ));
  502|   347k|                    } else if data[i - 1] == b'.' {
  503|    664|                        i -= 1;
  504|    664|                        return Some((
  505|    664|                            i,
  506|    664|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  507|    664|                        ));
  508|       |                    } else {
  509|   347k|                        return Some((
  510|   347k|                            i,
  511|   347k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  512|   347k|                        ));
  513|       |                    }
  514|  11.1M|                    i += consumed;
  515|       |                }
  516|    322|                Err(e) => return Some((e.location.end, Err(e))),
  517|       |            }
  518|       |        }
  519|   377k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer16recognize_number:
  632|   514k|    fn recognize_number(data: &[u8]) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  633|   514k|        // [19] 	INTEGER 	::= 	[+-]? [0-9]+
  634|   514k|        // [20] 	DECIMAL 	::= 	[+-]? [0-9]* '.' [0-9]+
  635|   514k|        // [21] 	DOUBLE 	::= 	[+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  636|   514k|        // [154s] 	EXPONENT 	::= 	[eE] [+-]? [0-9]+
  637|   514k|        let mut i = 0;
  638|   514k|        let c = *data.first()?;
  639|   514k|        if matches!(c, b'+' | b'-') {
  640|   105k|            i += 1;
  641|   409k|        }
  642|       |        // We read the digits before .
  643|   514k|        let mut count_before: usize = 0;
  644|       |        loop {
  645|  1.86M|            let c = *data.get(i)?;
  646|  1.72M|            if c.is_ascii_digit() {
  647|  1.34M|                i += 1;
  648|  1.34M|                count_before += 1;
  649|  1.34M|            } else {
  650|   374k|                break;
  651|       |            }
  652|       |        }
  653|       |
  654|       |        // We read the digits after .
  655|       |        #[allow(clippy::if_then_some_else_none)]
  656|   374k|        let count_after = if *data.get(i)? == b'.' {
  657|  81.4k|            i += 1;
  658|  81.4k|
  659|  81.4k|            let mut count_after = 0;
  660|       |            loop {
  661|   278k|                let c = *data.get(i)?;
  662|   261k|                if c.is_ascii_digit() {
  663|   196k|                    i += 1;
  664|   196k|                    count_after += 1;
  665|   196k|                } else {
  666|  64.3k|                    break;
  667|  64.3k|                }
  668|  64.3k|            }
  669|  64.3k|            Some(count_after)
  670|       |        } else {
  671|   293k|            None
  672|       |        };
  673|       |
  674|       |        // End
  675|   357k|        let c = *data.get(i)?;
  676|   357k|        if matches!(c, b'e' | b'E') {
  677|  65.1k|            i += 1;
  678|       |
  679|  65.1k|            let c = *data.get(i)?;
  680|  63.5k|            if matches!(c, b'+' | b'-') {
  681|  3.38k|                i += 1;
  682|  60.1k|            }
  683|       |
  684|  63.5k|            let mut found = false;
  685|       |            loop {
  686|   296k|                let c = *data.get(i)?;
  687|   274k|                if c.is_ascii_digit() {
  688|   233k|                    i += 1;
  689|   233k|                    found = true;
  690|   233k|                } else {
  691|  41.3k|                    break;
  692|  41.3k|                }
  693|  41.3k|            }
  694|  41.3k|            Some((
  695|  41.3k|                i,
  696|  41.3k|                if !found {
  697|  1.37k|                    Err((0..i, "A double exponent cannot be empty").into())
  698|  39.9k|                } else if count_before == 0 && count_after.unwrap_or(0) == 0 {
  699|    220|                    Err((0..i, "A double should not be empty").into())
  700|       |                } else {
  701|  39.7k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Double)
  702|       |                },
  703|       |            ))
  704|   292k|        } else if let Some(count_after) = count_after {
  705|  59.3k|            if count_after == 0 {
  706|       |                // We do not consume the '.' after all
  707|  39.4k|                i -= 1;
  708|  39.4k|                Some((
  709|  39.4k|                    i,
  710|  39.4k|                    if count_before == 0 {
  711|  3.05k|                        Err((0..i, "An integer should not be empty").into())
  712|       |                    } else {
  713|  36.3k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  714|       |                    },
  715|       |                ))
  716|       |            } else {
  717|  19.9k|                Some((i, str_from_utf8(&data[..i], 0..i).map(N3Token::Decimal)))
  718|       |            }
  719|       |        } else {
  720|       |            Some((
  721|   233k|                i,
  722|   233k|                if count_before == 0 {
  723|  58.4k|                    Err((0..i, "An integer should not be empty").into())
  724|       |                } else {
  725|   174k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  726|       |                },
  727|       |            ))
  728|       |        }
  729|   514k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer13recognize_iri:
  176|   615k|    fn recognize_iri(
  177|   615k|        data: &[u8],
  178|   615k|        options: &N3LexerOptions,
  179|   615k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  180|   615k|        // [18] 	IRIREF 	::= 	'<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
  181|   615k|        let mut string = Vec::new();
  182|   615k|        let mut i = 1;
  183|       |        loop {
  184|   615k|            let end = memchr2(b'>', b'\\', &data[i..])?;
  185|   437k|            string.extend_from_slice(&data[i..i + end]);
  186|   437k|            i += end;
  187|   437k|            match data[i] {
  188|       |                b'>' => {
  189|   423k|                    return Some((i + 1, Self::parse_iri(string, 0..=i, options)));
  190|       |                }
  191|       |                b'\\' => {
  192|  14.1k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, false)?;
  193|  2.07k|                    i += additional + 1;
  194|  2.07k|                    match c {
  195|      0|                        Ok(c) => {
  196|      0|                            let mut buf = [0; 4];
  197|      0|                            string.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  198|      0|                        }
  199|  2.07k|                        Err(e) => return Some((i, Err(e))),
  200|       |                    }
  201|       |                }
  202|      0|                _ => unreachable!(),
  203|       |            }
  204|       |        }
  205|   615k|    }
_RNvNtCs4WjTcpTVJQo_5oxttl5lexer18resolve_local_name:
  905|  18.4k|pub fn resolve_local_name(
  906|  18.4k|    prefix: &str,
  907|  18.4k|    local: &str,
  908|  18.4k|    might_be_invalid_iri: bool,
  909|  18.4k|    prefixes: &HashMap<String, Iri<String>>,
  910|  18.4k|) -> Result<NamedNode, String> {
  911|  18.4k|    if let Some(start) = prefixes.get(prefix) {
  912|      0|        let iri = format!("{start}{local}");
  913|      0|        if might_be_invalid_iri || start.path().is_empty() {
  914|       |            // We validate again. We always validate if the local part might be the IRI authority.
  915|      0|            if let Err(e) = Iri::parse(iri.as_str()) {
  916|      0|                return Err(format!(
  917|      0|                    "The prefixed name {prefix}:{local} builds IRI {iri} that is invalid: {e}"
  918|      0|                ));
  919|      0|            }
  920|      0|        }
  921|      0|        Ok(NamedNode::new_unchecked(iri))
  922|       |    } else {
  923|  18.4k|        Err(format!("The prefix {prefix}: has not been declared"))
  924|       |    }
  925|  18.4k|}
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer14parse_lang_tag:
  545|  27.5k|    fn parse_lang_tag(
  546|  27.5k|        lang_tag: &[u8],
  547|  27.5k|        position: Range<usize>,
  548|  27.5k|    ) -> Result<N3Token<'_>, TokenRecognizerError> {
  549|  27.5k|        Ok(N3Token::LangTag(
  550|  27.5k|            LanguageTag::parse(str_from_utf8(lang_tag, position.clone())?)
  551|  27.5k|                .map_err(|e| (position.clone(), e.to_string()))?
  552|  18.6k|                .into_inner(),
  553|       |        ))
  554|  27.5k|    }
_RNvXNtCs4WjTcpTVJQo_5oxttl5lexerNtB2_7N3LexerNtNtNtB4_7toolkit5lexer15TokenRecognizer20recognize_next_token:
   54|  9.29M|    fn recognize_next_token<'a>(
   55|  9.29M|        &mut self,
   56|  9.29M|        data: &'a [u8],
   57|  9.29M|        is_ending: bool,
   58|  9.29M|        options: &N3LexerOptions,
   59|  9.29M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
   60|  9.29M|        match *data.first()? {
   61|   678k|            b'<' => match *data.get(1)? {
   62|  44.7k|                b'<' => Some((2, Ok(N3Token::Punctuation("<<")))),
   63|  1.82k|                b'=' if self.mode == N3LexerMode::N3 => {
   64|      0|                    if let Some((consumed, result)) = Self::recognize_iri(data, options) {
   65|      0|                        Some(if let Ok(result) = result {
   66|      0|                            (consumed, Ok(result))
   67|       |                        } else {
   68|      0|                            (2, Ok(N3Token::Punctuation("<=")))
   69|       |                        })
   70|      0|                    } else if is_ending {
   71|      0|                        Some((2, Ok(N3Token::Punctuation("<="))))
   72|       |                    } else {
   73|      0|                        None
   74|       |                    }
   75|       |                }
   76|  7.01k|                b'-' if self.mode == N3LexerMode::N3 => {
   77|      0|                    if let Some((consumed, result)) = Self::recognize_iri(data, options) {
   78|      0|                        Some(if let Ok(result) = result {
   79|      0|                            (consumed, Ok(result))
   80|       |                        } else {
   81|      0|                            (2, Ok(N3Token::Punctuation("<-")))
   82|       |                        })
   83|      0|                    } else if is_ending {
   84|      0|                        Some((2, Ok(N3Token::Punctuation("<-"))))
   85|       |                    } else {
   86|      0|                        None
   87|       |                    }
   88|       |                }
   89|   615k|                _ => Self::recognize_iri(data, options),
   90|       |            },
   91|       |            b'>' => {
   92|   158k|                if *data.get(1)? == b'>' {
   93|   107k|                    Some((2, Ok(N3Token::Punctuation(">>"))))
   94|       |                } else {
   95|  43.2k|                    Some((1, Ok(N3Token::Punctuation(">"))))
   96|       |                }
   97|       |            }
   98|   418k|            b'_' => match data.get(1)? {
   99|   377k|                b':' => Self::recognize_blank_node_label(data),
  100|  12.6k|                c => Some((
  101|  12.6k|                    1,
  102|  12.6k|                    Err((0, format!("Unexpected character '{}'", char::from(*c))).into()),
  103|  12.6k|                )),
  104|       |            },
  105|       |            b'"' => {
  106|  91.3k|                if self.mode != N3LexerMode::NTriples
  107|  91.3k|                    && *data.get(1)? == b'"'
  108|  55.9k|                    && *data.get(2)? == b'"'
  109|       |                {
  110|  44.0k|                    Self::recognize_long_string(data, b'"')
  111|       |                } else {
  112|  40.7k|                    Self::recognize_string(data, b'"')
  113|       |                }
  114|       |            }
  115|   242k|            b'\'' if self.mode != N3LexerMode::NTriples => {
  116|   242k|                if *data.get(1)? == b'\'' && *data.get(2)? == b'\'' {
  117|  65.0k|                    Self::recognize_long_string(data, b'\'')
  118|       |                } else {
  119|   165k|                    Self::recognize_string(data, b'\'')
  120|       |                }
  121|       |            }
  122|  98.7k|            b'@' => Self::recognize_lang_tag(data),
  123|   877k|            b'.' => match data.get(1) {
  124|   165k|                Some(b'0'..=b'9') => Self::recognize_number(data),
  125|   670k|                Some(_) => Some((1, Ok(N3Token::Punctuation(".")))),
  126|   177k|                None => is_ending.then_some((1, Ok(N3Token::Punctuation(".")))),
  127|       |            },
  128|       |            b'^' => {
  129|  36.6k|                if *data.get(1)? == b'^' {
  130|  2.96k|                    Some((2, Ok(N3Token::Punctuation("^^"))))
  131|       |                } else {
  132|  30.4k|                    Some((1, Ok(N3Token::Punctuation("^"))))
  133|       |                }
  134|       |            }
  135|   691k|            b'(' => Some((1, Ok(N3Token::Punctuation("(")))),
  136|  95.2k|            b')' => Some((1, Ok(N3Token::Punctuation(")")))),
  137|  57.6k|            b'[' => Some((1, Ok(N3Token::Punctuation("[")))),
  138|  11.6k|            b']' => Some((1, Ok(N3Token::Punctuation("]")))),
  139|       |            b'{' => {
  140|   218k|                if *data.get(1)? == b'|' {
  141|    408|                    Some((2, Ok(N3Token::Punctuation("{|"))))
  142|       |                } else {
  143|   179k|                    Some((1, Ok(N3Token::Punctuation("{"))))
  144|       |                }
  145|       |            }
  146|  14.8k|            b'}' => Some((1, Ok(N3Token::Punctuation("}")))),
  147|  53.4k|            b',' => Some((1, Ok(N3Token::Punctuation(",")))),
  148|  60.9k|            b';' => Some((1, Ok(N3Token::Punctuation(";")))),
  149|  5.17k|            b'!' => Some((1, Ok(N3Token::Punctuation("!")))),
  150|       |            b'|' => {
  151|  13.4k|                if *data.get(1)? == b'}' {
  152|    354|                    Some((2, Ok(N3Token::Punctuation("|}"))))
  153|       |                } else {
  154|  10.0k|                    Some((1, Ok(N3Token::Punctuation("|"))))
  155|       |                }
  156|       |            }
  157|       |            b'=' => {
  158|  40.5k|                if *data.get(1)? == b'>' {
  159|    662|                    Some((2, Ok(N3Token::Punctuation("=>"))))
  160|       |                } else {
  161|  34.7k|                    Some((1, Ok(N3Token::Punctuation("="))))
  162|       |                }
  163|       |            }
  164|  2.42M|            b'0'..=b'9' | b'+' | b'-' => Self::recognize_number(data),
  165|  88.4k|            b'?' => Self::recognize_variable(data, is_ending),
  166|  3.77M|            _ => Self::recognize_pname_or_keyword(data, is_ending),
  167|       |        }
  168|  9.29M|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer9parse_iri:
  207|   423k|    fn parse_iri(
  208|   423k|        iri: Vec<u8>,
  209|   423k|        position: RangeInclusive<usize>,
  210|   423k|        options: &N3LexerOptions,
  211|   423k|    ) -> Result<N3Token<'static>, TokenRecognizerError> {
  212|   423k|        let iri = String::from_utf8(iri).map_err(|e| {
  213|       |            (
  214|       |                position.clone(),
  215|       |                format!("The IRI contains invalid UTF-8 characters: {e}"),
  216|       |            )
  217|   423k|        })?;
  218|   416k|        let iri = if let Some(base_iri) = options.base_iri.as_ref() {
  219|   176k|            base_iri.resolve(&iri)
  220|       |        } else {
  221|   239k|            Iri::parse(iri)
  222|       |        }
  223|   416k|        .map_err(|e| (position, e.to_string()))?;
  224|   383k|        Ok(N3Token::IriRef(iri))
  225|   423k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer18recognize_hex_char:
  766|   121k|    fn recognize_hex_char(
  767|   121k|        data: &[u8],
  768|   121k|        len: usize,
  769|   121k|        escape_char: char,
  770|   121k|        position: usize,
  771|   121k|    ) -> Result<Option<char>, TokenRecognizerError> {
  772|   121k|        if data.len() < len {
  773|  3.77k|            return Ok(None);
  774|   117k|        }
  775|   117k|        let val = str_from_utf8(&data[..len], position..position + len + 2)?;
  776|   114k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  777|       |            (
  778|       |                position..position + len + 2,
  779|       |                format!(
  780|       |                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  781|       |                ),
  782|       |            )
  783|   114k|        })?;
  784|   111k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  785|       |            (
  786|       |                position..position + len +2,
  787|       |                format!(
  788|       |                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  789|       |                ),
  790|       |            )
  791|   111k|        })?;
  792|   111k|        Ok(Some(c))
  793|   121k|    }
_RNvXs8_NtCs4WjTcpTVJQo_5oxttl5lexerNtB5_11N3LexerModeNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqB7_:
   31|   342k|#[derive(Eq, PartialEq)]
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer22is_possible_pn_chars_u:
  887|  19.3M|    fn is_possible_pn_chars_u(c: char) -> bool {
  888|  19.3M|        Self::is_possible_pn_chars_base(c) || c == '_'
  889|  19.3M|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer27recognize_optional_pn_local:
  335|   328k|    fn recognize_optional_pn_local(
  336|   328k|        data: &[u8],
  337|   328k|        is_ending: bool,
  338|   328k|    ) -> Option<(usize, Result<(Cow<'_, str>, bool), TokenRecognizerError>)> {
  339|   328k|        // [168s] 	PN_LOCAL 	::= 	(PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
  340|   328k|        let mut i = 0;
  341|   328k|        let mut buffer = None; // Buffer if there are some escaped characters
  342|   328k|        let mut position_that_is_already_in_buffer = 0;
  343|   328k|        let mut might_be_invalid_iri = false;
  344|       |        loop {
  345|  3.02M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  346|  2.82M|                match r {
  347|  2.81M|                    Ok((c, consumed)) => {
  348|  2.81M|                        if c == '%' {
  349|  25.0k|                            i += 1;
  350|  25.0k|                            let a = char::from(*data.get(i)?);
  351|  9.92k|                            i += 1;
  352|  9.92k|                            let b = char::from(*data.get(i)?);
  353|  4.32k|                            if !a.is_ascii_hexdigit() || !b.is_ascii_hexdigit() {
  354|  1.62k|                                return Some((i + 1, Err((
  355|  1.62k|                                    i - 2..=i, format!("escapes in IRIs should be % followed by two hexadecimal characters, found '%{a}{b}'")
  356|  1.62k|                                ).into())));
  357|  2.70k|                            }
  358|  2.70k|                            i += 1;
  359|  2.79M|                        } else if c == '\\' {
  360|  63.0k|                            i += 1;
  361|  63.0k|                            let a = char::from(*data.get(i)?);
  362|  5.39k|                            if matches!(
  363|  58.7k|                                a,
  364|       |                                '_' | '~'
  365|       |                                    | '.'
  366|       |                                    | '-'
  367|       |                                    | '!'
  368|       |                                    | '$'
  369|       |                                    | '&'
  370|       |                                    | '\''
  371|       |                                    | '('
  372|       |                                    | ')'
  373|       |                                    | '*'
  374|       |                                    | '+'
  375|       |                                    | ','
  376|       |                                    | ';'
  377|       |                                    | '='
  378|  53.3k|                            ) {
  379|  53.3k|                                // ok to escape
  380|  53.3k|                            } else if matches!(a, '/' | '?' | '#' | '@' | '%') {
  381|  4.92k|                                // ok to escape but requires IRI validation
  382|  4.92k|                                might_be_invalid_iri = true;
  383|  4.92k|                            } else {
  384|    472|                                return Some((i + 1, Err((
  385|    472|                                    i..=i, format!("The character that are allowed to be escaped in IRIs are _~.-!$&'()*+,;=/?#@%, found '{a}'")
  386|    472|                                ).into())));
  387|       |                            }
  388|  58.2k|                            let buffer = buffer.get_or_insert_with(String::new);
  389|  58.2k|                            // We add the missing bytes
  390|  58.2k|                            if i - position_that_is_already_in_buffer > 1 {
  391|  39.3k|                                buffer.push_str(
  392|  39.3k|                                    match str_from_utf8(
  393|  39.3k|                                        &data[position_that_is_already_in_buffer..i - 1],
  394|  39.3k|                                        position_that_is_already_in_buffer..i - 1,
  395|  39.3k|                                    ) {
  396|  39.3k|                                        Ok(data) => data,
  397|      0|                                        Err(e) => return Some((i, Err(e))),
  398|       |                                    },
  399|       |                                )
  400|  18.8k|                            }
  401|  58.2k|                            buffer.push(a);
  402|  58.2k|                            i += 1;
  403|  58.2k|                            position_that_is_already_in_buffer = i;
  404|  2.72M|                        } else if i == 0 {
  405|   208k|                            if !(Self::is_possible_pn_chars_u(c) || c == ':' || c.is_ascii_digit())
  406|       |                            {
  407|  42.6k|                                return Some((0, Ok((Cow::Borrowed(""), false))));
  408|   166k|                            }
  409|   166k|                            might_be_invalid_iri |=
  410|   166k|                                Self::is_possible_pn_chars_base_but_not_valid_iri(c) || c == ':';
  411|   166k|                            i += consumed;
  412|  2.51M|                        } else if Self::is_possible_pn_chars(c) || c == ':' || c == '.' {
  413|       |                            might_be_invalid_iri |=
  414|  2.47M|                                Self::is_possible_pn_chars_base_but_not_valid_iri(c) || c == ':';
  415|  2.47M|                            i += consumed;
  416|       |                        } else {
  417|  45.3k|                            let buffer = if let Some(mut buffer) = buffer {
  418|  3.91k|                                buffer.push_str(
  419|  3.91k|                                    match str_from_utf8(
  420|  3.91k|                                        &data[position_that_is_already_in_buffer..i],
  421|  3.91k|                                        position_that_is_already_in_buffer..i,
  422|  3.91k|                                    ) {
  423|  3.91k|                                        Ok(data) => data,
  424|      0|                                        Err(e) => return Some((i, Err(e))),
  425|       |                                    },
  426|       |                                );
  427|       |                                // We do not include the last dot
  428|  4.75k|                                while buffer.ends_with('.') {
  429|    844|                                    buffer.pop();
  430|    844|                                    i -= 1;
  431|    844|                                }
  432|  3.91k|                                Cow::Owned(buffer)
  433|       |                            } else {
  434|  41.4k|                                let mut data = match str_from_utf8(&data[..i], 0..i) {
  435|  41.4k|                                    Ok(data) => data,
  436|      0|                                    Err(e) => return Some((i, Err(e))),
  437|       |                                };
  438|       |                                // We do not include the last dot
  439|  52.2k|                                while let Some(d) = data.strip_suffix('.') {
  440|  10.8k|                                    data = d;
  441|  10.8k|                                    i -= 1;
  442|  10.8k|                                }
  443|  41.4k|                                Cow::Borrowed(data)
  444|       |                            };
  445|  45.3k|                            return Some((i, Ok((buffer, might_be_invalid_iri))));
  446|       |                        }
  447|       |                    }
  448|  10.1k|                    Err(e) => return Some((e.location.end, Err(e))),
  449|       |                }
  450|   203k|            } else if is_ending {
  451|  1.03k|                let buffer = if let Some(mut buffer) = buffer {
  452|       |                    // We do not include the last dot
  453|    180|                    while buffer.ends_with('.') {
  454|     48|                        buffer.pop();
  455|     48|                        i -= 1;
  456|     48|                    }
  457|    132|                    Cow::Owned(buffer)
  458|       |                } else {
  459|    906|                    let mut data = match str_from_utf8(&data[..i], 0..i) {
  460|    906|                        Ok(data) => data,
  461|      0|                        Err(e) => return Some((i, Err(e))),
  462|       |                    };
  463|       |                    // We do not include the last dot
  464|  1.73k|                    while let Some(d) = data.strip_suffix('.') {
  465|    826|                        data = d;
  466|    826|                        i -= 1;
  467|    826|                    }
  468|    906|                    Cow::Borrowed(data)
  469|       |                };
  470|  1.03k|                return Some((i, Ok((buffer, might_be_invalid_iri))));
  471|       |            } else {
  472|   202k|                return None;
  473|       |            }
  474|       |        }
  475|   328k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer21recognize_long_string:
  594|   109k|    fn recognize_long_string(
  595|   109k|        data: &[u8],
  596|   109k|        delimiter: u8,
  597|   109k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  598|   109k|        // [24] 	STRING_LITERAL_LONG_SINGLE_QUOTE 	::= 	"'''" (("'" | "''")? ([^'\] | ECHAR | UCHAR))* "'''"
  599|   109k|        // [25] 	STRING_LITERAL_LONG_QUOTE 	::= 	'"""' (('"' | '""')? ([^"\] | ECHAR | UCHAR))* '"""'
  600|   109k|        let mut string = String::new();
  601|   109k|        let mut i = 3;
  602|       |        loop {
  603|   221k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  604|   176k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  605|   172k|                Ok(s) => string.push_str(s),
  606|  3.55k|                Err(e) => return Some((end, Err(e))),
  607|       |            };
  608|   172k|            i += end;
  609|   172k|            match data[i] {
  610|   172k|                c if c == delimiter => {
  611|   125k|                    if *data.get(i + 1)? == delimiter && *data.get(i + 2)? == delimiter {
  612|  46.9k|                        return Some((i + 3, Ok(N3Token::String(string))));
  613|  69.2k|                    }
  614|  69.2k|                    i += 1;
  615|  69.2k|                    string.push(char::from(delimiter));
  616|       |                }
  617|       |                b'\\' => {
  618|  46.9k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  619|  43.8k|                    i += additional + 1;
  620|  43.8k|                    match c {
  621|  42.7k|                        Ok(c) => {
  622|  42.7k|                            string.push(c);
  623|  42.7k|                        }
  624|  1.15k|                        Err(e) => return Some((i, Err(e))),
  625|       |                    }
  626|       |                }
  627|      0|                _ => unreachable!(),
  628|       |            }
  629|       |        }
  630|   109k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer3new:
  172|  54.0k|    pub fn new(mode: N3LexerMode) -> Self {
  173|  54.0k|        Self { mode }
  174|  54.0k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer26recognize_pname_or_keyword:
  227|  3.77M|    fn recognize_pname_or_keyword(
  228|  3.77M|        data: &[u8],
  229|  3.77M|        is_ending: bool,
  230|  3.77M|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  231|  3.77M|        // [139s] 	PNAME_NS 	::= 	PN_PREFIX? ':'
  232|  3.77M|        // [140s] 	PNAME_LN 	::= 	PNAME_NS PN_LOCAL
  233|  3.77M|
  234|  3.77M|        // [167s] 	PN_PREFIX 	::= 	PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
  235|  3.77M|        let mut i = 0;
  236|       |        loop {
  237|  9.38M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  238|  9.04M|                match r {
  239|  7.89M|                    Ok((c, consumed)) => {
  240|  7.89M|                        if c == ':' {
  241|   240k|                            i += consumed;
  242|   240k|                            break;
  243|  7.64M|                        } else if i == 0 {
  244|  2.47M|                            if !Self::is_possible_pn_chars_base(c) {
  245|  1.77M|                                return Some((
  246|  1.77M|                                    consumed,
  247|  1.77M|                                    Err((
  248|  1.77M|                                        0..consumed,
  249|  1.77M|                                        format!(
  250|  1.77M|                                            "'{c}' is not allowed at the beginning of a prefix name"
  251|  1.77M|                                        ),
  252|  1.77M|                                    )
  253|  1.77M|                                        .into()),
  254|  1.77M|                                ));
  255|   696k|                            }
  256|   696k|                            i += consumed;
  257|  5.17M|                        } else if Self::is_possible_pn_chars(c) || c == '.' {
  258|  4.91M|                            i += consumed;
  259|  4.91M|                        } else {
  260|   301k|                            while data[..i].ends_with(b".") {
  261|  43.9k|                                i -= 1;
  262|  43.9k|                            }
  263|   258k|                            return Some((
  264|   258k|                                i,
  265|   258k|                                str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  266|   258k|                            ));
  267|       |                        }
  268|       |                    }
  269|  1.15M|                    Err(e) => return Some((e.location.end, Err(e))),
  270|       |                }
  271|   340k|            } else if is_ending {
  272|  6.93k|                while data[..i].ends_with(b".") {
  273|  1.62k|                    i -= 1;
  274|  1.62k|                }
  275|  5.31k|                return Some(if i == 0 {
  276|  2.26k|                    (
  277|  2.26k|                        1,
  278|  2.26k|                        Err((0..1, format!("Unexpected byte {}", data[0])).into()),
  279|  2.26k|                    )
  280|       |                } else {
  281|  3.05k|                    (
  282|  3.05k|                        i,
  283|  3.05k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  284|  3.05k|                    )
  285|       |                });
  286|       |            } else {
  287|   335k|                return None;
  288|       |            }
  289|       |        }
  290|   240k|        let pn_prefix = match str_from_utf8(&data[..i - 1], 0..i - 1) {
  291|   240k|            Ok(pn_prefix) => pn_prefix,
  292|      0|            Err(e) => return Some((i, Err(e))),
  293|       |        };
  294|   240k|        if pn_prefix.ends_with('.') {
  295|    278|            return Some((
  296|    278|                i,
  297|    278|                Err((
  298|    278|                    0..i,
  299|    278|                    format!(
  300|    278|                        "'{pn_prefix}' is not a valid prefix: prefixes are not allowed to end with '.'"),
  301|    278|                )
  302|    278|                    .into()),
  303|    278|            ));
  304|   240k|        }
  305|       |
  306|   240k|        let (consumed, pn_local_result) = Self::recognize_optional_pn_local(&data[i..], is_ending)?;
  307|  55.8k|        Some((
  308|  55.8k|            consumed + i,
  309|  55.8k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  310|       |                prefix: pn_prefix,
  311|       |                local,
  312|       |                might_be_invalid_iri,
  313|  55.8k|            }),
  314|  55.8k|        ))
  315|  3.77M|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer18recognize_lang_tag:
  521|  98.7k|    fn recognize_lang_tag(
  522|  98.7k|        data: &[u8],
  523|  98.7k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  524|  98.7k|        // [144s] 	LANGTAG 	::= 	'@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
  525|  98.7k|        let mut is_last_block_empty = true;
  526|   747k|        for (i, c) in data[1..].iter().enumerate() {
  527|   747k|            if c.is_ascii_alphabetic() {
  528|   628k|                is_last_block_empty = false;
  529|   628k|            } else if i == 0 {
  530|  19.1k|                return Some((
  531|  19.1k|                    1,
  532|  19.1k|                    Err((1..2, "A language code should always start with a letter").into()),
  533|  19.1k|                ));
  534|  99.9k|            } else if is_last_block_empty {
  535|  1.00k|                return Some((i, Self::parse_lang_tag(&data[1..i], 1..i - 1)));
  536|  98.9k|            } else if *c == b'-' {
  537|  72.3k|                is_last_block_empty = true;
  538|  72.3k|            } else {
  539|  26.5k|                return Some((i + 1, Self::parse_lang_tag(&data[1..=i], 1..i)));
  540|       |            }
  541|       |        }
  542|  52.0k|        None
  543|  98.7k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer16recognize_escape:
  731|   628k|    fn recognize_escape(
  732|   628k|        data: &[u8],
  733|   628k|        position: usize,
  734|   628k|        with_echar: bool,
  735|   628k|    ) -> Option<(usize, Result<char, TokenRecognizerError>)> {
  736|   628k|        // [26] 	UCHAR 	::= 	'\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
  737|   628k|        // [159s] 	ECHAR 	::= 	'\' [tbnrf"'\]
  738|   628k|        match *data.get(1)? {
  739|   115k|            b'u' => match Self::recognize_hex_char(&data[2..], 4, 'u', position) {
  740|   113k|                Ok(c) => Some((5, Ok(c?))),
  741|  2.20k|                Err(e) => Some((5, Err(e))),
  742|       |            },
  743|  5.21k|            b'U' => match Self::recognize_hex_char(&data[2..], 8, 'u', position) {
  744|  1.17k|                Ok(c) => Some((9, Ok(c?))),
  745|  4.04k|                Err(e) => Some((9, Err(e))),
  746|       |            },
  747|  2.61k|            b't' if with_echar => Some((1, Ok('\t'))),
  748|  4.09k|            b'b' if with_echar => Some((1, Ok('\x08'))),
  749|  3.86k|            b'n' if with_echar => Some((1, Ok('\n'))),
  750|  1.05k|            b'r' if with_echar => Some((1, Ok('\r'))),
  751|  8.14k|            b'f' if with_echar => Some((1, Ok('\x0C'))),
  752|  5.38k|            b'"' if with_echar => Some((1, Ok('"'))),
  753|  2.12k|            b'\'' if with_echar => Some((1, Ok('\''))),
  754|   401k|            b'\\' if with_echar => Some((1, Ok('\\'))),
  755|  48.5k|            c => Some((
  756|  48.5k|                1,
  757|  48.5k|                Err((
  758|  48.5k|                    position..position + 2,
  759|  48.5k|                    format!("Unexpected escape character '\\{}'", char::from(c)),
  760|  48.5k|                )
  761|  48.5k|                    .into()),
  762|  48.5k|            )), //TODO: read until end of string
  763|       |        }
  764|   628k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer22recognize_unicode_char:
  795|  23.9M|    fn recognize_unicode_char(
  796|  23.9M|        data: &[u8],
  797|  23.9M|        position: usize,
  798|  23.9M|    ) -> Option<Result<(char, usize), TokenRecognizerError>> {
  799|  23.9M|        let mut code_point: u32;
  800|  23.9M|        let bytes_needed: usize;
  801|  23.9M|        let mut lower_boundary = 0x80;
  802|  23.9M|        let mut upper_boundary = 0xBF;
  803|       |
  804|  23.9M|        let byte = *data.first()?;
  805|  23.4M|        match byte {
  806|  23.4M|            0x00..=0x7F => return Some(Ok((char::from(byte), 1))),
  807|   680k|            0xC2..=0xDF => {
  808|   428k|                bytes_needed = 1;
  809|   428k|                code_point = u32::from(byte) & 0x1F;
  810|   428k|            }
  811|   251k|            0xE0..=0xEF => {
  812|  81.5k|                if byte == 0xE0 {
  813|  10.2k|                    lower_boundary = 0xA0;
  814|  71.2k|                }
  815|  81.5k|                if byte == 0xED {
  816|  7.71k|                    upper_boundary = 0x9F;
  817|  73.8k|                }
  818|  81.5k|                bytes_needed = 2;
  819|  81.5k|                code_point = u32::from(byte) & 0xF;
  820|       |            }
  821|   170k|            0xF0..=0xF4 => {
  822|  30.6k|                if byte == 0xF0 {
  823|  4.87k|                    lower_boundary = 0x90;
  824|  25.7k|                }
  825|  30.6k|                if byte == 0xF4 {
  826|  18.4k|                    upper_boundary = 0x8F;
  827|  18.4k|                }
  828|  30.6k|                bytes_needed = 3;
  829|  30.6k|                code_point = u32::from(byte) & 0x7;
  830|       |            }
  831|       |            _ => {
  832|   768k|                return Some(Err((
  833|   768k|                    position..=position,
  834|   768k|                    "Invalid UTF-8 character encoding",
  835|   768k|                )
  836|   768k|                    .into()))
  837|       |            }
  838|       |        }
  839|       |
  840|   555k|        for i in 1..=bytes_needed {
  841|   555k|            let byte = *data.get(i)?;
  842|   433k|            if byte < lower_boundary || upper_boundary < byte {
  843|   399k|                return Some(Err((
  844|   399k|                    position..=position + i,
  845|   399k|                    "Invalid UTF-8 character encoding",
  846|   399k|                )
  847|   399k|                    .into()));
  848|  33.1k|            }
  849|  33.1k|            lower_boundary = 0x80;
  850|  33.1k|            upper_boundary = 0xBF;
  851|  33.1k|            code_point = (code_point << 6) | (u32::from(byte) & 0x3F);
  852|       |        }
  853|       |
  854|  19.2k|        Some(
  855|  19.2k|            char::from_u32(code_point)
  856|  19.2k|                .map(|c| (c, bytes_needed + 1))
  857|  19.2k|                .ok_or_else(|| {
  858|       |                    (
  859|       |                        position..=position + bytes_needed,
  860|       |                        format!("The codepoint {code_point:X} is not a valid unicode character"),
  861|       |                    )
  862|       |                        .into()
  863|  19.2k|                }),
  864|  19.2k|        )
  865|  23.9M|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer18recognize_variable:
  317|  88.4k|    fn recognize_variable(
  318|  88.4k|        data: &[u8],
  319|  88.4k|        is_ending: bool,
  320|  88.4k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  321|       |        // [36] 	QUICK_VAR_NAME 	::= 	"?" PN_LOCAL
  322|  88.4k|        let (consumed, result) = Self::recognize_optional_pn_local(&data[1..], is_ending)?;
  323|  45.5k|        Some((
  324|  45.5k|            consumed + 1,
  325|  45.5k|            result.and_then(|(name, _)| {
  326|       |                if name.is_empty() {
  327|       |                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  328|       |                } else {
  329|       |                    Ok(N3Token::Variable(name))
  330|       |                }
  331|  45.5k|            }),
  332|  45.5k|        ))
  333|  88.4k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer43is_possible_pn_chars_base_but_not_valid_iri:
  898|  2.64M|    fn is_possible_pn_chars_base_but_not_valid_iri(c: char) -> bool {
  899|  2.64M|        matches!(c, '\u{FFF0}'..='\u{FFFD}')
  900|  2.64M|            || u32::from(c) % u32::from('\u{FFFE}') == 0
  901|  2.64M|            || u32::from(c) % u32::from('\u{FFFF}') == 0
  902|  2.64M|    }
_RNvNtCs4WjTcpTVJQo_5oxttl5lexer13str_from_utf8:
  927|  2.15M|fn str_from_utf8(data: &[u8], range: Range<usize>) -> Result<&str, TokenRecognizerError> {
  928|  2.15M|    str::from_utf8(data).map_err(|e| {
  929|       |        (
  930|       |            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  931|       |            format!("Invalid UTF-8: {e}"),
  932|       |        )
  933|       |            .into()
  934|  2.15M|    })
  935|  2.15M|}
_RNvXs2_NtCs4WjTcpTVJQo_5oxttl5lexerNtB5_7N3TokenNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqB7_:
   12|  4.01M|#[derive(Debug, PartialEq, Eq)]
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5lexerNtB4_7N3Lexer25is_possible_pn_chars_base:
  868|  21.8M|    fn is_possible_pn_chars_base(c: char) -> bool {
  869|  21.8M|        matches!(c,
  870|  11.1M|        'A'..='Z'
  871|  7.58M|        | 'a'..='z'
  872|  19.1k|        | '\u{00C0}'..='\u{00D6}'
  873|  19.1k|        | '\u{00D8}'..='\u{00F6}'
  874|  19.1k|        | '\u{00F8}'..='\u{02FF}'
  875|  17.1k|        | '\u{0370}'..='\u{037D}'
  876|  17.1k|        | '\u{037F}'..='\u{1FFF}'
  877|  2.06k|        | '\u{200C}'..='\u{200D}'
  878|  2.06k|        | '\u{2070}'..='\u{218F}'
  879|  2.06k|        | '\u{2C00}'..='\u{2FEF}'
  880|  2.06k|        | '\u{3001}'..='\u{D7FF}'
  881|    492|        | '\u{F900}'..='\u{FDCF}'
  882|    379|        | '\u{FDF0}'..='\u{FFFD}'
  883|    377|        | '\u{10000}'..='\u{EFFFF}')
  884|  21.8M|    }

_RNvXNtCs4WjTcpTVJQo_5oxttl5terseNtB2_14TriGRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer13recognize_end:
  786|  54.0k|    fn recognize_end(
  787|  54.0k|        mut self,
  788|  54.0k|        _context: &mut TriGRecognizerContext,
  789|  54.0k|        results: &mut Vec<Self::Output>,
  790|  54.0k|        errors: &mut Vec<RuleRecognizerError>,
  791|  54.0k|    ) {
  792|  54.0k|        match &*self.stack {
  793|  54.0k|            [] | [TriGState::TriGDoc] => {
  794|       |                debug_assert!(
  795|      0|                    self.cur_subject.is_empty(),
  796|      0|                    "The cur_subject stack must be empty if the state stack is empty"
  797|       |                );
  798|       |                debug_assert!(
  799|      0|                    self.cur_predicate.is_empty(),
  800|      0|                    "The cur_predicate stack must be empty if the state stack is empty"
  801|       |                );
  802|       |                debug_assert!(
  803|      0|                    self.cur_object.is_empty(),
  804|      0|                    "The cur_object stack must be empty if the state stack is empty"
  805|       |                );
  806|       |            }
  807|    394|            [.., TriGState::LiteralPossibleSuffix { value, emit: true }] => {
  808|    394|                self.cur_object
  809|    394|                    .push(Literal::new_simple_literal(value).into());
  810|    394|                self.emit_quad(results);
  811|    394|                errors.push("Triples should be followed by a dot".into())
  812|       |            }
  813|    876|            _ => errors.push("Unexpected end".into()), //TODO
  814|       |        }
  815|  54.0k|    }
_RNvXNtCs4WjTcpTVJQo_5oxttl5terseNtB2_14TriGRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer14recognize_next:
   46|  5.77M|    fn recognize_next(
   47|  5.77M|        mut self,
   48|  5.77M|        token: N3Token<'_>,
   49|  5.77M|        context: &mut TriGRecognizerContext,
   50|  5.77M|        results: &mut Vec<Quad>,
   51|  5.77M|        errors: &mut Vec<RuleRecognizerError>,
   52|  5.77M|    ) -> Self {
   53|  5.77M|        if let Some(rule) = self.stack.pop() {
   54|  3.97M|            match rule {
   55|       |                // [1g] 	trigDoc 	::= 	(directive | block)*
   56|       |                // [2g] 	block 	::= 	triplesOrGraph | wrappedGraph | triples2 | "GRAPH" labelOrSubject wrappedGraph
   57|       |                // [3] 	directive 	::= 	prefixID | base | sparqlPrefix | sparqlBase
   58|       |                // [4] 	prefixID 	::= 	'@prefix' PNAME_NS IRIREF '.'
   59|       |                // [5] 	base 	::= 	'@base' IRIREF '.'
   60|       |                // [5s] 	sparqlPrefix 	::= 	"PREFIX" PNAME_NS IRIREF
   61|       |                // [6s] 	sparqlBase 	::= 	"BASE" IRIREF
   62|       |                TriGState::TriGDoc => {
   63|   506k|                    self.cur_graph = GraphName::DefaultGraph;
   64|   506k|                    self.stack.push(TriGState::TriGDoc);
   65|  19.8k|                    match token {
   66|  13.9k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("base") => {
   67|    328|                            self.stack.push(TriGState::BaseExpectIri);
   68|    328|                            self
   69|       |                        }
   70|  13.6k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("prefix") => {
   71|    162|                            self.stack.push(TriGState::PrefixExpectPrefix);
   72|    162|                            self
   73|       |                        }
   74|  3.23k|                        N3Token::LangTag("prefix") => {
   75|    436|                            self.stack.push(TriGState::ExpectDot);
   76|    436|                            self.stack.push(TriGState::PrefixExpectPrefix);
   77|    436|                            self
   78|       |                        }
   79|  2.80k|                        N3Token::LangTag("base") => {
   80|     16|                            self.stack.push(TriGState::ExpectDot);
   81|     16|                            self.stack.push(TriGState::BaseExpectIri);
   82|     16|                            self
   83|       |                        }
   84|  13.4k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("graph") && context.with_graph_name => {
   85|      0|                            self.stack.push(TriGState::WrappedGraph);
   86|      0|                            self.stack.push(TriGState::GraphName);
   87|      0|                            self
   88|       |                        }
   89|   240k|                        N3Token::Punctuation("{") if context.with_graph_name => {
   90|  6.41k|                            self.stack.push(TriGState::WrappedGraph);
   91|  6.41k|                            self.recognize_next(token, context,results, errors)
   92|       |                        }
   93|       |                        _ => {
   94|   499k|                            self.stack.push(TriGState::TriplesOrGraph);
   95|   499k|                            self.recognize_next(token, context,results, errors)
   96|       |                        }
   97|       |                    }
   98|       |                },
   99|       |                TriGState::ExpectDot => {
  100|   202k|                    self.cur_subject.pop();
  101|   202k|                    if token == N3Token::Punctuation(".") {
  102|   178k|                        self
  103|       |                    } else  {
  104|  24.3k|                        errors.push("A dot is expected at the end of statements".into());
  105|  24.3k|                        self.recognize_next(token, context,results, errors)
  106|       |                    }
  107|       |                },
  108|    322|                TriGState::BaseExpectIri => match token {
  109|     44|                    N3Token::IriRef(iri) => {
  110|     44|                        context.lexer_options.base_iri = Some(iri);
  111|     44|                        self
  112|       |                    }
  113|    278|                    _ => self.error(errors, "The BASE keyword should be followed by an IRI"),
  114|       |                },
  115|    250|                TriGState::PrefixExpectPrefix => match token {
  116|    250|                    N3Token::PrefixedName { prefix, local, .. } if local.is_empty() => {
  117|    212|                        self.stack.push(TriGState::PrefixExpectIri { name: prefix.to_owned() });
  118|    212|                        self
  119|       |                    }
  120|       |                    _ => {
  121|    180|                        self.error(errors, "The PREFIX keyword should be followed by a prefix like 'ex:'")
  122|       |                    }
  123|       |                },
  124|    194|                TriGState::PrefixExpectIri { name } => match token {
  125|      0|                    N3Token::IriRef(iri) => {
  126|      0|                        context.prefixes.insert(name, iri);
  127|      0|                        self
  128|       |                    }
  129|    194|                    _ => self.error(errors, "The PREFIX declaration should be followed by a prefix and its value as an IRI"),
  130|       |                },
  131|       |                // [3g] 	triplesOrGraph 	::= 	labelOrSubject ( wrappedGraph | predicateObjectList '.' ) | quotedTriple predicateObjectList '.'
  132|       |                // [4g] 	triples2 	::= 	blankNodePropertyList predicateObjectList? '.' | collection predicateObjectList '.'
  133|  1.06k|                TriGState::TriplesOrGraph => match token {
  134|  67.9k|                    N3Token::IriRef(iri) => {
  135|  67.9k|                        self.stack.push(TriGState::WrappedGraphOrPredicateObjectList {
  136|  67.9k|                            term: NamedNode::from(iri).into()
  137|  67.9k|                        });
  138|  67.9k|                        self
  139|       |                    }
  140|  16.2k|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  141|      0|                        Ok(t) => {
  142|      0|                            self.stack.push(TriGState::WrappedGraphOrPredicateObjectList {
  143|      0|                                term: t.into()
  144|      0|                            });
  145|      0|                            self
  146|       |                        },
  147|  16.2k|                        Err(e) => self.error(errors, e)
  148|       |                    }
  149|   157k|                    N3Token::BlankNodeLabel(label) => {
  150|   157k|                        self.stack.push(TriGState::WrappedGraphOrPredicateObjectList {
  151|   157k|                            term: BlankNode::new_unchecked(label).into()
  152|   157k|                        });
  153|   157k|                        self
  154|       |                    }
  155|   234k|                    N3Token::Punctuation("[") => {
  156|  18.3k|                        self.stack.push(TriGState::WrappedGraphBlankNodePropertyListCurrent);
  157|  18.3k|                        self
  158|       |                    }
  159|   216k|                    N3Token::Punctuation("(") => {
  160|  42.2k|                        self.stack.push(TriGState::ExpectDot);
  161|  42.2k|                        self.stack.push(TriGState::PredicateObjectList);
  162|  42.2k|                        self.stack.push(TriGState::SubjectCollectionBeginning);
  163|  42.2k|                        self
  164|       |                    }
  165|       |                    #[cfg(feature = "rdf-star")]
  166|   173k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  167|  1.06k|                        self.stack.push(TriGState::ExpectDot);
  168|  1.06k|                        self.stack.push(TriGState::PredicateObjectList);
  169|  1.06k|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  170|  1.06k|                        self.stack.push(TriGState::QuotedObject);
  171|  1.06k|                        self.stack.push(TriGState::Verb);
  172|  1.06k|                        self.stack.push(TriGState::QuotedSubject);
  173|  1.06k|                        self
  174|       |                    }
  175|       |                    _ => {
  176|   195k|                        self.error(errors, "TOKEN is not a valid subject or graph name")
  177|       |                    }
  178|       |                }
  179|   211k|                TriGState::WrappedGraphOrPredicateObjectList { term } => {
  180|   211k|                    if token == N3Token::Punctuation("{") && context.with_graph_name {
  181|  2.42k|                        self.cur_graph = term.into();
  182|  2.42k|                        self.stack.push(TriGState::WrappedGraph);
  183|   208k|                    } else {
  184|   208k|                        self.cur_subject.push(term.into());
  185|   208k|                        self.stack.push(TriGState::ExpectDot);
  186|   208k|                        self.stack.push(TriGState::PredicateObjectList);
  187|   208k|                    }
  188|   211k|                    self.recognize_next(token, context,results, errors)
  189|       |                }
  190|  15.6k|                TriGState::WrappedGraphBlankNodePropertyListCurrent => if token == N3Token::Punctuation("]") {
  191|    950|                    self.stack.push(TriGState::WrappedGraphOrPredicateObjectList {
  192|    950|                        term: BlankNode::default().into()
  193|    950|                    });
  194|    950|                    self
  195|       |                } else {
  196|  14.6k|                    self.cur_subject.push(BlankNode::default().into());
  197|  14.6k|                    self.stack.push(TriGState::ExpectDot);
  198|  14.6k|                    self.stack.push(TriGState::SubjectBlankNodePropertyListEnd);
  199|  14.6k|                    self.stack.push(TriGState::PredicateObjectList);
  200|  14.6k|                    self.recognize_next(token, context,results, errors)
  201|       |                }
  202|  1.01k|                TriGState::SubjectBlankNodePropertyListEnd => if token == N3Token::Punctuation("]") {
  203|     22|                    self.stack.push(TriGState::SubjectBlankNodePropertyListAfter  );
  204|     22|                    self
  205|       |                } else {
  206|    992|                    errors.push("blank node property lists should end with a ']'".into());
  207|    992|                    self.stack.push(TriGState::SubjectBlankNodePropertyListAfter );
  208|    992|                    self.recognize_next(token, context,results, errors)
  209|       |                }
  210|  1.01k|                TriGState::SubjectBlankNodePropertyListAfter => if matches!(token, N3Token::Punctuation("." | "}")) {
  211|      2|                    self.recognize_next(token, context,results, errors)
  212|       |                } else {
  213|  1.01k|                    self.stack.push(TriGState::PredicateObjectList);
  214|  1.01k|                    self.recognize_next(token, context,results, errors)
  215|       |                }
  216|       |                TriGState::SubjectCollectionBeginning => {
  217|  40.6k|                    if let N3Token::Punctuation(")") = token {
  218|    116|                        self.cur_subject.push(rdf::NIL.into());
  219|    116|                        self
  220|       |                    } else {
  221|  40.4k|                        let root = BlankNode::default();
  222|  40.4k|                        self.cur_subject.push(root.clone().into());
  223|  40.4k|                        self.cur_subject.push(root.into());
  224|  40.4k|                        self.cur_predicate.push(rdf::FIRST.into());
  225|  40.4k|                        self.stack.push(TriGState::SubjectCollectionPossibleEnd);
  226|  40.4k|                        self.stack.push(TriGState::Object);
  227|  40.4k|                        self.recognize_next(token, context,results, errors)
  228|       |                    }
  229|       |                },
  230|       |                TriGState::SubjectCollectionPossibleEnd => {
  231|  17.5k|                    let old = self.cur_subject.pop().unwrap();
  232|  17.5k|                    self.cur_object.pop();
  233|  17.5k|                    if let N3Token::Punctuation(")") = token {
  234|    546|                        self.cur_predicate.pop();
  235|    546|                        results.push(Quad::new(
  236|    546|                            old,
  237|    546|                            rdf::REST,
  238|    546|                            rdf::NIL,
  239|    546|                            self.cur_graph.clone()
  240|    546|                        ));
  241|    546|                        self
  242|       |                    } else {
  243|  16.9k|                        let new = BlankNode::default();
  244|  16.9k|                        results.push(Quad::new(
  245|  16.9k|                            old,
  246|  16.9k|                            rdf::REST,
  247|  16.9k|                            new.clone(),
  248|  16.9k|                            self.cur_graph.clone()
  249|  16.9k|                        ));
  250|  16.9k|                        self.cur_subject.push(new.into());
  251|  16.9k|                        self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  252|  16.9k|                        self.stack.push(TriGState::Object);
  253|  16.9k|                        self.recognize_next(token, context,results, errors)
  254|       |                    }
  255|       |                }
  256|       |                // [5g] 	wrappedGraph 	::= 	'{' triplesBlock? '}'
  257|       |                // [6g] 	triplesBlock 	::= 	triples ('.' triplesBlock?)?
  258|  8.83k|                TriGState::WrappedGraph => if token == N3Token::Punctuation("{") {
  259|  8.83k|                    self.stack.push(TriGState::WrappedGraphPossibleEnd);
  260|  8.83k|                    self.stack.push(TriGState::Triples);
  261|  8.83k|                    self
  262|       |                } else {
  263|      0|                    self.error(errors, "The GRAPH keyword should be followed by a graph name and a value in '{'")
  264|       |                },
  265|       |                TriGState::WrappedGraphPossibleEnd => {
  266|  31.0k|                    self.cur_subject.pop();
  267|  31.0k|                    match token {
  268|  30.8k|                        N3Token::Punctuation("}") => {
  269|    801|                            self
  270|       |                        }
  271|  30.0k|                        N3Token::Punctuation(".") => {
  272|  30.0k|                            self.stack.push(TriGState::WrappedGraphPossibleEnd);
  273|  30.0k|                            self.stack.push(TriGState::Triples);
  274|  30.0k|                            self
  275|       |                        }
  276|       |                       _ => {
  277|    196|                            errors.push("A '}' or a '.' is expected at the end of a graph block".into());
  278|    196|                            self.recognize_next(token, context,results, errors)
  279|       |                        }
  280|       |                    }
  281|       |                }
  282|       |                // [6] 	triples 	::= 	subject predicateObjectList | blankNodePropertyList predicateObjectList?
  283|       |                // [10] 	subject 	::= 	iri | BlankNode | collection | quotedTriple
  284|    122|                TriGState::Triples => match token {
  285|  5.55k|                    N3Token::Punctuation("}") => {
  286|    801|                        self.recognize_next(token, context,results, errors) // Early end
  287|       |                    },
  288|  4.75k|                    N3Token::Punctuation("[") => {
  289|    924|                        self.cur_subject.push(BlankNode::default().into());
  290|    924|                        self.stack.push(TriGState::TriplesBlankNodePropertyListCurrent);
  291|    924|                        self
  292|       |                    }
  293|    397|                    N3Token::IriRef(iri) => {
  294|    397|                        self.cur_subject.push(NamedNode::from(iri).into());
  295|    397|                        self.stack.push(TriGState::PredicateObjectList);
  296|    397|                        self
  297|       |                    }
  298|    980|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  299|      0|                        Ok(t) => {
  300|      0|                            self.cur_subject.push(t.into());
  301|      0|                            self.stack.push(TriGState::PredicateObjectList);
  302|      0|                            self
  303|       |                        },
  304|    980|                        Err(e) => self.error(errors, e)
  305|       |                    }
  306|  30.0k|                    N3Token::BlankNodeLabel(label) => {
  307|  30.0k|                        self.cur_subject.push(BlankNode::new_unchecked(label).into());
  308|  30.0k|                        self.stack.push(TriGState::PredicateObjectList);
  309|  30.0k|                        self
  310|       |                    }
  311|  3.83k|                    N3Token::Punctuation("(") => {
  312|  1.45k|                        self.stack.push(TriGState::PredicateObjectList);
  313|  1.45k|                        self.stack.push(TriGState::SubjectCollectionBeginning);
  314|  1.45k|                        self
  315|       |                    }
  316|       |                    #[cfg(feature = "rdf-star")]
  317|  2.37k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  318|    122|                        self.stack.push(TriGState::PredicateObjectList);
  319|    122|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  320|    122|                        self.stack.push(TriGState::QuotedObject);
  321|    122|                        self.stack.push(TriGState::Verb);
  322|    122|                        self.stack.push(TriGState::QuotedSubject);
  323|    122|                        self
  324|       |                    }
  325|       |                   _ => {
  326|  2.84k|                        self.error(errors, "TOKEN is not a valid RDF subject")
  327|       |                    }
  328|       |                },
  329|    914|                TriGState::TriplesBlankNodePropertyListCurrent => if token == N3Token::Punctuation("]") {
  330|    140|                    self.stack.push(TriGState::PredicateObjectList);
  331|    140|                    self
  332|       |                } else {
  333|    774|                    self.stack.push(TriGState::SubjectBlankNodePropertyListEnd);
  334|    774|                    self.stack.push(TriGState::PredicateObjectList);
  335|    774|                    self.recognize_next(token, context,results, errors)
  336|       |                }
  337|       |                // [7g] 	labelOrSubject 	::= 	iri | BlankNode
  338|      0|                TriGState::GraphName => match token {
  339|      0|                    N3Token::IriRef(iri) => {
  340|      0|                        self.cur_graph = NamedNode::from(iri).into();
  341|      0|                        self
  342|       |                    }
  343|      0|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  344|      0|                        Ok(t) => {
  345|      0|                            self.cur_graph = t.into();
  346|      0|                            self
  347|       |                        },
  348|      0|                        Err(e) => self.error(errors, e)
  349|       |                    }
  350|      0|                    N3Token::BlankNodeLabel(label) => {
  351|      0|                        self.cur_graph = BlankNode::new_unchecked(label).into();
  352|      0|                        self
  353|       |                    }
  354|      0|                    N3Token::Punctuation("[") => {
  355|      0|                        self.stack.push(TriGState::GraphNameAnonEnd);
  356|      0|                        self
  357|       |                    }
  358|       |                   _ => {
  359|      0|                        self.error(errors, "TOKEN is not a valid graph name")
  360|       |                    }
  361|       |                }
  362|      0|                TriGState::GraphNameAnonEnd => if token == N3Token::Punctuation("]") {
  363|      0|                    self.cur_graph = BlankNode::default().into();
  364|      0|                    self
  365|       |                } else {
  366|      0|                    self.error(errors, "Anonymous blank node with a property list are not allowed as graph name")
  367|       |                }
  368|       |                // [7] 	predicateObjectList 	::= 	verb objectList (';' (verb objectList)?)*
  369|       |                TriGState::PredicateObjectList => {
  370|   257k|                    self.stack.push(TriGState::PredicateObjectListEnd);
  371|   257k|                    self.stack.push(TriGState::ObjectsList);
  372|   257k|                    self.stack.push(TriGState::Verb);
  373|   257k|                    self.recognize_next(token, context,results, errors)
  374|       |                },
  375|       |                TriGState::PredicateObjectListEnd => {
  376|   259k|                    self.cur_predicate.pop();
  377|   259k|                    if token == N3Token::Punctuation(";") {
  378|  25.3k|                        self.stack.push(TriGState::PredicateObjectListPossibleContinuation);
  379|  25.3k|                        self
  380|       |                    } else {
  381|   234k|                        self.recognize_next(token, context,results, errors)
  382|       |                    }
  383|       |                },
  384|  25.5k|                TriGState::PredicateObjectListPossibleContinuation => if token == N3Token::Punctuation(";") {
  385|    200|                    self.stack.push(TriGState::PredicateObjectListPossibleContinuation);
  386|    200|                    self
  387|  25.3k|                } else if matches!(token, N3Token::Punctuation("." | "}" | "]")) {
  388|     42|                    self.recognize_next(token, context,results, errors)
  389|       |                } else {
  390|  25.3k|                    self.stack.push(TriGState::PredicateObjectListEnd);
  391|  25.3k|                    self.stack.push(TriGState::ObjectsList);
  392|  25.3k|                    self.stack.push(TriGState::Verb);
  393|  25.3k|                    self.recognize_next(token, context,results, errors)
  394|       |                },
  395|       |                // [8] 	objectList 	::= 	object annotation? ( ',' object annotation? )*
  396|       |                // [30t] 	annotation 	::= 	'{|' predicateObjectList '|}'
  397|       |                TriGState::ObjectsList => {
  398|   264k|                    self.stack.push(TriGState::ObjectsListEnd);
  399|   264k|                    self.stack.push(TriGState::Object);
  400|   264k|                    self.recognize_next(token, context,results, errors)
  401|       |                }
  402|       |                TriGState::ObjectsListEnd => {
  403|   271k|                    match token {
  404|   249k|                        N3Token::Punctuation(",") => {
  405|  12.0k|                            self.cur_object.pop();
  406|  12.0k|                            self.stack.push(TriGState::ObjectsListEnd);
  407|  12.0k|                            self.stack.push(TriGState::Object);
  408|  12.0k|                            self
  409|       |                        },
  410|       |                        #[cfg(feature = "rdf-star")]
  411|   237k|                        N3Token::Punctuation("{|") => {
  412|      0|                            let triple = Triple::new(
  413|      0|                                self.cur_subject.last().unwrap().clone(),
  414|      0|                                self.cur_predicate.last().unwrap().clone(),
  415|      0|                                self.cur_object.pop().unwrap()
  416|      0|                            );
  417|      0|                            self.cur_subject.push(triple.into());
  418|      0|                            self.stack.push(TriGState::AnnotationEnd);
  419|      0|                            self.stack.push(TriGState::PredicateObjectList);
  420|      0|                            self
  421|       |                        }
  422|       |                       _ => {
  423|   259k|                            self.cur_object.pop();
  424|   259k|                            self.recognize_next(token, context,results, errors)
  425|       |                        }
  426|       |                    }
  427|       |                },
  428|       |                #[cfg(feature = "rdf-star")]
  429|       |                TriGState::AnnotationEnd => {
  430|      0|                    self.cur_subject.pop();
  431|      0|                    self.stack.push(TriGState::ObjectsListAfterAnnotation);
  432|      0|                    if token == N3Token::Punctuation("|}") {
  433|      0|                        self
  434|       |                    } else {
  435|      0|                        self.error(errors, "Annotations should end with '|}'")
  436|       |                    }
  437|       |                },
  438|       |                #[cfg(feature = "rdf-star")]
  439|      0|                TriGState::ObjectsListAfterAnnotation => if token == N3Token::Punctuation(",") {
  440|      0|                    self.stack.push(TriGState::ObjectsListEnd);
  441|      0|                    self.stack.push(TriGState::Object);
  442|      0|                    self
  443|       |                } else {
  444|      0|                    self.recognize_next(token, context,results, errors)
  445|       |                },
  446|       |                // [9] 	verb 	::= 	predicate | 'a'
  447|       |                // [11] 	predicate 	::= 	iri
  448|   282k|                TriGState::Verb => match token {
  449|  14.9k|                    N3Token::PlainKeyword("a") => {
  450|  1.62k|                        self.cur_predicate.push(rdf::TYPE.into());
  451|  1.62k|                        self
  452|       |                    }
  453|   263k|                    N3Token::IriRef(iri) => {
  454|   263k|                        self.cur_predicate.push(NamedNode::from(iri));
  455|   263k|                        self
  456|       |                    }
  457|    414|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  458|      0|                        Ok(t) => {
  459|      0|                            self.cur_predicate.push(t);
  460|      0|                            self
  461|       |                        },
  462|    414|                        Err(e) => self.error(errors, e)
  463|       |                    }
  464|       |                   _ => {
  465|  17.6k|                        self.error(errors, "TOKEN is not a valid predicate")
  466|       |                    }
  467|       |                }
  468|       |                // [12] 	object 	::= 	iri | BlankNode | collection | blankNodePropertyList | literal | quotedTriple
  469|       |                // [13] 	literal 	::= 	RDFLiteral | NumericLiteral | BooleanLiteral
  470|       |                // [14] 	blank 	::= 	BlankNode | collection
  471|       |                // [15] 	blankNodePropertyList 	::= 	'[' predicateObjectList ']'
  472|       |                // [16] 	collection 	::= 	'(' object* ')'
  473|       |                // [17] 	NumericLiteral 	::= 	INTEGER | DECIMAL | DOUBLE
  474|       |                // [128s] 	RDFLiteral 	::= 	String (LANGTAG | '^^' iri)?
  475|       |                // [133s] 	BooleanLiteral 	::= 	'true' | 'false'
  476|       |                // [18] 	String 	::= 	STRING_LITERAL_QUOTE | STRING_LITERAL_SINGLE_QUOTE | STRING_LITERAL_LONG_SINGLE_QUOTE | STRING_LITERAL_LONG_QUOTE
  477|       |                // [135s] 	iri 	::= 	IRIREF | PrefixedName
  478|       |                // [136s] 	PrefixedName 	::= 	PNAME_LN | PNAME_NS
  479|       |                // [137s] 	BlankNode 	::= 	BLANK_NODE_LABEL | ANON
  480|  3.31k|                TriGState::Object => match token {
  481|  18.6k|                    N3Token::IriRef(iri) => {
  482|  18.6k|                        self.cur_object.push(NamedNode::from(iri).into());
  483|  18.6k|                        self.emit_quad(results);
  484|  18.6k|                        self
  485|       |                    }
  486|    804|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  487|      0|                        Ok(t) => {
  488|      0|                            self.cur_object.push(t.into());
  489|      0|                            self.emit_quad(results);
  490|      0|                            self
  491|       |                        },
  492|    804|                        Err(e) => self.error(errors, e)
  493|       |                    }
  494|   158k|                    N3Token::BlankNodeLabel(label) => {
  495|   158k|                        self.cur_object.push(BlankNode::new_unchecked(label).into());
  496|   158k|                        self.emit_quad(results);
  497|   158k|                        self
  498|       |                    }
  499|   273k|                    N3Token::Punctuation("[") => {
  500|  2.39k|                        self.stack.push(TriGState::ObjectBlankNodePropertyListCurrent);
  501|  2.39k|                        self
  502|       |                    }
  503|   270k|                    N3Token::Punctuation("(") => {
  504|   264k|                        self.stack.push(TriGState::ObjectCollectionBeginning);
  505|   264k|                        self
  506|       |                    }
  507|  61.2k|                    N3Token::String(value) => {
  508|  61.2k|                        self.stack.push(TriGState::LiteralPossibleSuffix { value, emit: true });
  509|  61.2k|                        self
  510|       |                    }
  511|  76.1k|                    N3Token::Integer(v) => {
  512|  76.1k|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::INTEGER).into());
  513|  76.1k|                        self.emit_quad(results);
  514|  76.1k|                        self
  515|       |                    }
  516|  6.86k|                    N3Token::Decimal(v) => {
  517|  6.86k|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
  518|  6.86k|                        self.emit_quad(results);
  519|  6.86k|                        self
  520|       |                    }
  521|  30.7k|                    N3Token::Double(v) => {
  522|  30.7k|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
  523|  30.7k|                        self.emit_quad(results);
  524|  30.7k|                        self
  525|       |                    }
  526|  4.07k|                    N3Token::PlainKeyword("true") => {
  527|    366|                        self.cur_object.push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
  528|    366|                        self.emit_quad(results);
  529|    366|                        self
  530|       |                    }
  531|  3.71k|                    N3Token::PlainKeyword("false") => {
  532|    393|                        self.cur_object.push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
  533|    393|                        self.emit_quad(results);
  534|    393|                        self
  535|       |                    }
  536|       |                    #[cfg(feature = "rdf-star")]
  537|  6.83k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  538|  3.31k|                        self.stack.push(TriGState::ObjectQuotedTripleEnd { emit: true });
  539|  3.31k|                        self.stack.push(TriGState::QuotedObject);
  540|  3.31k|                        self.stack.push(TriGState::Verb);
  541|  3.31k|                        self.stack.push(TriGState::QuotedSubject);
  542|  3.31k|                        self
  543|       |                    }
  544|       |                   _ => {
  545|  7.06k|                        self.error(errors, "TOKEN is not a valid RDF object")
  546|       |                    }
  547|       |
  548|       |                }
  549|  1.65k|                TriGState::ObjectBlankNodePropertyListCurrent => if token == N3Token::Punctuation("]") {
  550|    836|                    self.cur_object.push(BlankNode::default().into());
  551|    836|                    self.emit_quad(results);
  552|    836|                    self
  553|       |                } else {
  554|    814|                    self.cur_subject.push(BlankNode::default().into());
  555|    814|                    self.stack.push(TriGState::ObjectBlankNodePropertyListEnd);
  556|    814|                    self.stack.push(TriGState::PredicateObjectList);
  557|    814|                    self.recognize_next(token, context,results, errors)
  558|       |                }
  559|     72|                TriGState::ObjectBlankNodePropertyListEnd => if token == N3Token::Punctuation("]") {
  560|     26|                    self.cur_object.push(self.cur_subject.pop().unwrap().into());
  561|     26|                    self.emit_quad(results);
  562|     26|                    self
  563|       |                } else {
  564|     46|                    self.error(errors, "blank node property lists should end with a ']'")
  565|       |                }
  566|   259k|                TriGState::ObjectCollectionBeginning => if let  N3Token::Punctuation(")") = token {
  567|  1.72k|                    self.cur_object.push(rdf::NIL.into());
  568|  1.72k|                    self.emit_quad(results);
  569|  1.72k|                    self
  570|       |                } else {
  571|   257k|                    let root = BlankNode::default();
  572|   257k|                    self.cur_object.push(root.clone().into());
  573|   257k|                    self.emit_quad(results);
  574|   257k|                    self.cur_subject.push(root.into());
  575|   257k|                    self.cur_predicate.push(rdf::FIRST.into());
  576|   257k|                    self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  577|   257k|                    self.stack.push(TriGState::Object);
  578|   257k|                    self.recognize_next(token, context,results, errors)
  579|       |                },
  580|       |                TriGState::ObjectCollectionPossibleEnd => {
  581|  60.7k|                    let old = self.cur_subject.pop().unwrap();
  582|  60.7k|                    self.cur_object.pop();
  583|  60.7k|                    if let N3Token::Punctuation(")") = token {
  584|  21.5k|                        self.cur_predicate.pop();
  585|  21.5k|                        results.push(Quad::new(old,
  586|  21.5k|                                               rdf::REST,
  587|  21.5k|                                               rdf::NIL,
  588|  21.5k|                                               self.cur_graph.clone()
  589|  21.5k|                        ));
  590|  21.5k|                        self
  591|       |                    }else {
  592|  39.2k|                        let new = BlankNode::default();
  593|  39.2k|                        results.push(Quad::new(old,
  594|  39.2k|                                               rdf::REST,
  595|  39.2k|                                               new.clone(),
  596|  39.2k|                                               self.cur_graph.clone()
  597|  39.2k|                        ));
  598|  39.2k|                        self.cur_subject.push(new.into());
  599|  39.2k|                        self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  600|  39.2k|                        self.stack.push(TriGState::Object);
  601|  39.2k|                        self.recognize_next(token, context,results, errors)
  602|       |                    }
  603|       |                }
  604|  59.8k|                TriGState::LiteralPossibleSuffix { value, emit } => {
  605|  59.8k|                    match token {
  606|  3.29k|                        N3Token::LangTag(lang) => {
  607|  3.29k|                            self.cur_object.push(Literal::new_language_tagged_literal_unchecked(value, lang.to_ascii_lowercase()).into());
  608|  3.29k|                            if emit {
  609|  3.29k|                                self.emit_quad(results);
  610|  3.29k|                            }
  611|  3.29k|                            self
  612|       |                        },
  613|  32.6k|                        N3Token::Punctuation("^^") => {
  614|     22|                            self.stack.push(TriGState::LiteralExpectDatatype { value, emit });
  615|     22|                            self
  616|       |                        }
  617|       |                        _ => {
  618|  56.5k|                            self.cur_object.push(Literal::new_simple_literal(value).into());
  619|  56.5k|                            if emit {
  620|  56.5k|                                self.emit_quad(results);
  621|  56.5k|                            }
  622|  56.5k|                            self.recognize_next(token, context,results, errors)
  623|       |                        }
  624|       |                    }
  625|       |                }
  626|     20|                TriGState::LiteralExpectDatatype { value, emit } => {
  627|     20|                    match token {
  628|      0|                        N3Token::IriRef(datatype) => {
  629|      0|                            self.cur_object.push(Literal::new_typed_literal(value, datatype).into());
  630|      0|                            if emit {
  631|      0|                                self.emit_quad(results);
  632|      0|                            }
  633|      0|                            self
  634|       |                        },
  635|      0|                        N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  636|      0|                            Ok(t) => {
  637|      0|                                self.cur_object.push(Literal::new_typed_literal(value, t).into());
  638|      0|                                if emit {
  639|      0|                                    self.emit_quad(results);
  640|      0|                                }
  641|      0|                                self
  642|       |                            },
  643|      0|                            Err(e) => self.error(errors, e)
  644|       |                        }
  645|       |                        _ => {
  646|     20|                            self.error(errors, "Expecting a datatype IRI after ^^, found TOKEN").recognize_next(token, context, results, errors)
  647|       |                        }
  648|       |                    }
  649|       |                }
  650|       |                // [27t] 	quotedTriple 	::= 	'<<' qtSubject verb qtObject '>>'
  651|       |                #[cfg(feature = "rdf-star")]
  652|       |                TriGState::SubjectQuotedTripleEnd => {
  653|     20|                    let triple = Triple::new(
  654|     20|                        self.cur_subject.pop().unwrap(),
  655|     20|                        self.cur_predicate.pop().unwrap(),
  656|     20|                        self.cur_object.pop().unwrap()
  657|     20|                    );
  658|     20|                    self.cur_subject.push(triple.into());
  659|     20|                    if token == N3Token::Punctuation(">>") {
  660|      0|                        self
  661|       |                    } else {
  662|     20|                        self.error(errors, "Expecting '>>' to close a quoted triple, found TOKEN")
  663|       |                    }
  664|       |                }
  665|       |                #[cfg(feature = "rdf-star")]
  666|      0|                TriGState::ObjectQuotedTripleEnd { emit } => {
  667|      0|                    let triple = Triple::new(
  668|      0|                        self.cur_subject.pop().unwrap(),
  669|      0|                        self.cur_predicate.pop().unwrap(),
  670|      0|                        self.cur_object.pop().unwrap()
  671|      0|                    );
  672|      0|                    self.cur_object.push(triple.into());
  673|      0|                    if emit {
  674|      0|                        self.emit_quad(results);
  675|      0|                    }
  676|      0|                    if token == N3Token::Punctuation(">>") {
  677|      0|                        self
  678|       |                    } else {
  679|      0|                        self.error(errors, "Expecting '>>' to close a quoted triple, found TOKEN")
  680|       |                    }
  681|       |                }
  682|       |                // [28t] 	qtSubject 	::= 	iri | BlankNode | quotedTriple
  683|       |                #[cfg(feature = "rdf-star")]
  684|  28.6k|                TriGState::QuotedSubject => match token {
  685|  28.1k|                    N3Token::Punctuation("[") => {
  686|    328|                        self.cur_subject.push(BlankNode::default().into());
  687|    328|                        self.stack.push(TriGState::QuotedAnonEnd);
  688|    328|                        self
  689|       |                    }
  690|    266|                    N3Token::IriRef(iri) => {
  691|    266|                        self.cur_subject.push(NamedNode::from(iri).into());
  692|    266|                        self
  693|       |                    }
  694|     70|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  695|      0|                        Ok(t) => {
  696|      0|                            self.cur_subject.push(t.into());
  697|      0|                            self
  698|       |                        },
  699|     70|                        Err(e) => self.error(errors, e)
  700|       |                    }
  701|     64|                    N3Token::BlankNodeLabel(label) => {
  702|     64|                        self.cur_subject.push(BlankNode::new_unchecked(label).into());
  703|     64|                        self
  704|       |                    }
  705|  27.8k|                    N3Token::Punctuation("<<") => {
  706|  24.7k|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  707|  24.7k|                        self.stack.push(TriGState::QuotedObject);
  708|  24.7k|                        self.stack.push(TriGState::Verb);
  709|  24.7k|                        self.stack.push(TriGState::QuotedSubject);
  710|  24.7k|                        self
  711|       |                    }
  712|  3.18k|                    _ => self.error(errors, "TOKEN is not a valid RDF quoted triple subject: TOKEN")
  713|       |                }
  714|       |                // [29t] 	qtObject 	::= 	iri | BlankNode | literal | quotedTriple
  715|       |                #[cfg(feature = "rdf-star")]
  716|    104|                TriGState::QuotedObject => match token {
  717|     74|                    N3Token::Punctuation("[") => {
  718|     72|                        self.cur_object.push(BlankNode::default().into());
  719|     72|                        self.stack.push(TriGState::QuotedAnonEnd);
  720|     72|                        self
  721|       |                    }
  722|      0|                    N3Token::IriRef(iri) => {
  723|      0|                        self.cur_object.push(NamedNode::from(iri).into());
  724|      0|                        self
  725|       |                    }
  726|      0|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  727|      0|                        Ok(t) => {
  728|      0|                            self.cur_object.push(t.into());
  729|      0|                            self
  730|       |                        },
  731|      0|                        Err(e) => self.error(errors, e)
  732|       |                    }
  733|      0|                    N3Token::BlankNodeLabel(label) => {
  734|      0|                        self.cur_object.push(BlankNode::new_unchecked(label).into());
  735|      0|                        self
  736|       |                    }
  737|      0|                    N3Token::String(value) => {
  738|      0|                        self.stack.push(TriGState::LiteralPossibleSuffix { value, emit: false });
  739|      0|                        self
  740|       |                    }
  741|     22|                    N3Token::Integer(v) => {
  742|     22|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::INTEGER).into());
  743|     22|                        self
  744|       |                    }
  745|      0|                    N3Token::Decimal(v) => {
  746|      0|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
  747|      0|                        self
  748|       |                    }
  749|      0|                    N3Token::Double(v) => {
  750|      0|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
  751|      0|                        self
  752|       |                    }
  753|      8|                    N3Token::PlainKeyword("true") => {
  754|      0|                        self.cur_object.push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
  755|      0|                        self
  756|       |                    }
  757|      8|                    N3Token::PlainKeyword("false") => {
  758|      0|                        self.cur_object.push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
  759|      0|                        self
  760|       |                    }
  761|      2|                    N3Token::Punctuation("<<") => {
  762|      0|                        self.stack.push(TriGState::ObjectQuotedTripleEnd { emit: false });
  763|      0|                        self.stack.push(TriGState::QuotedObject);
  764|      0|                        self.stack.push(TriGState::Verb);
  765|      0|                        self.stack.push(TriGState::QuotedSubject);
  766|      0|                        self
  767|       |                    }
  768|     10|                    _ => self.error(errors, "TOKEN is not a valid RDF quoted triple object")
  769|       |                }
  770|       |                #[cfg(feature = "rdf-star")]
  771|    378|                TriGState::QuotedAnonEnd => if token == N3Token::Punctuation("]") {
  772|      0|                    self
  773|       |                } else {
  774|    378|                    self.error(errors, "Anonymous blank node with a property list are not allowed in quoted triples")
  775|       |                }
  776|       |            }
  777|  1.79M|        } else if token == N3Token::Punctuation(".") || token == N3Token::Punctuation("}") {
  778|       |            //TODO: be smarter depending if we are in '{' or not
  779|   316k|            self.stack.push(TriGState::TriGDoc);
  780|   316k|            self
  781|       |        } else {
  782|  1.48M|            self
  783|       |        }
  784|  5.77M|    }
_RNvXNtCs4WjTcpTVJQo_5oxttl5terseNtB2_14TriGRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer13lexer_options:
  817|  9.32M|    fn lexer_options(context: &TriGRecognizerContext) -> &N3LexerOptions {
  818|  9.32M|        &context.lexer_options
  819|  9.32M|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5terseNtB4_14TriGRecognizer9emit_quad:
  869|   612k|    fn emit_quad(&mut self, results: &mut Vec<Quad>) {
  870|   612k|        results.push(Quad::new(
  871|   612k|            self.cur_subject.last().unwrap().clone(),
  872|   612k|            self.cur_predicate.last().unwrap().clone(),
  873|   612k|            self.cur_object.last().unwrap().clone(),
  874|   612k|            self.cur_graph.clone(),
  875|   612k|        ));
  876|   612k|    }
_RNvMs_NtCs4WjTcpTVJQo_5oxttl5terseNtB4_14TriGRecognizer10new_parser:
  823|  54.0k|    pub fn new_parser(
  824|  54.0k|        with_graph_name: bool,
  825|  54.0k|        #[cfg(feature = "rdf-star")] with_quoted_triples: bool,
  826|  54.0k|        base_iri: Option<Iri<String>>,
  827|  54.0k|        prefixes: HashMap<String, Iri<String>>,
  828|  54.0k|    ) -> Parser<Self> {
  829|  54.0k|        Parser::new(
  830|  54.0k|            Lexer::new(
  831|  54.0k|                N3Lexer::new(N3LexerMode::Turtle),
  832|  54.0k|                MIN_BUFFER_SIZE,
  833|  54.0k|                MAX_BUFFER_SIZE,
  834|  54.0k|                true,
  835|  54.0k|                Some(b"#"),
  836|  54.0k|            ),
  837|  54.0k|            TriGRecognizer {
  838|  54.0k|                stack: vec![TriGState::TriGDoc],
  839|  54.0k|                cur_subject: Vec::new(),
  840|  54.0k|                cur_predicate: Vec::new(),
  841|  54.0k|                cur_object: Vec::new(),
  842|  54.0k|                cur_graph: GraphName::DefaultGraph,
  843|  54.0k|            },
  844|  54.0k|            TriGRecognizerContext {
  845|  54.0k|                with_graph_name,
  846|  54.0k|                #[cfg(feature = "rdf-star")]
  847|  54.0k|                with_quoted_triples,
  848|  54.0k|                prefixes,
  849|  54.0k|                lexer_options: N3LexerOptions { base_iri },
  850|  54.0k|            },
  851|  54.0k|        )
  852|  54.0k|    }
_RNvXNtCs4WjTcpTVJQo_5oxttl5terseNtB2_14TriGRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer20error_recovery_state:
   37|  3.14M|    fn error_recovery_state(mut self) -> Self {
   38|  3.14M|        self.stack.clear();
   39|  3.14M|        self.cur_subject.clear();
   40|  3.14M|        self.cur_predicate.clear();
   41|  3.14M|        self.cur_object.clear();
   42|  3.14M|        self.cur_graph = GraphName::DefaultGraph;
   43|  3.14M|        self
   44|  3.14M|    }
_RINvMs_NtCs4WjTcpTVJQo_5oxttl5terseNtB5_14TriGRecognizer5errorNtNtCsdBW21Yiwikk_5alloc6string6StringEB7_:
  855|  18.4k|    fn error(
  856|  18.4k|        mut self,
  857|  18.4k|        errors: &mut Vec<RuleRecognizerError>,
  858|  18.4k|        msg: impl Into<RuleRecognizerError>,
  859|  18.4k|    ) -> Self {
  860|  18.4k|        errors.push(msg.into());
  861|  18.4k|        self.stack.clear();
  862|  18.4k|        self.cur_subject.clear();
  863|  18.4k|        self.cur_predicate.clear();
  864|  18.4k|        self.cur_object.clear();
  865|  18.4k|        self.cur_graph = GraphName::DefaultGraph;
  866|  18.4k|        self
  867|  18.4k|    }
_RINvMs_NtCs4WjTcpTVJQo_5oxttl5terseNtB5_14TriGRecognizer5errorReEB7_:
  855|   227k|    fn error(
  856|   227k|        mut self,
  857|   227k|        errors: &mut Vec<RuleRecognizerError>,
  858|   227k|        msg: impl Into<RuleRecognizerError>,
  859|   227k|    ) -> Self {
  860|   227k|        errors.push(msg.into());
  861|   227k|        self.stack.clear();
  862|   227k|        self.cur_subject.clear();
  863|   227k|        self.cur_predicate.clear();
  864|   227k|        self.cur_object.clear();
  865|   227k|        self.cur_graph = GraphName::DefaultGraph;
  866|   227k|        self
  867|   227k|    }

_RNvXs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5errorNtB4_11SyntaxErrorNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCsgo9gpfLdqrc_4trig:
   38|  3.41M|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   39|  3.41M|        if self.location.start.offset + 1 >= self.location.end.offset {
   40|  2.89M|            write!(
   41|  2.89M|                f,
   42|  2.89M|                "Parser error at line {} column {}: {}",
   43|  2.89M|                self.location.start.line + 1,
   44|  2.89M|                self.location.start.column + 1,
   45|  2.89M|                self.message
   46|  2.89M|            )
   47|   523k|        } else if self.location.start.line == self.location.end.line {
   48|   520k|            write!(
   49|   520k|                f,
   50|   520k|                "Parser error between at line {} between columns {} and column {}: {}",
   51|   520k|                self.location.start.line + 1,
   52|   520k|                self.location.start.column + 1,
   53|   520k|                self.location.end.column + 1,
   54|   520k|                self.message
   55|   520k|            )
   56|       |        } else {
   57|  2.40k|            write!(
   58|  2.40k|                f,
   59|  2.40k|                "Parser error between line {} column {} and line {} column {}: {}",
   60|  2.40k|                self.location.start.line + 1,
   61|  2.40k|                self.location.start.column + 1,
   62|  2.40k|                self.location.end.line + 1,
   63|  2.40k|                self.location.end.column + 1,
   64|  2.40k|                self.message
   65|  2.40k|            )
   66|       |        }
   67|  3.41M|    }

_RINvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB6_5LexerNtNtBa_5lexer7N3LexerE16extend_from_readRShECsgo9gpfLdqrc_4trig:
  113|  44.5k|    pub fn extend_from_read(&mut self, read: &mut impl Read) -> io::Result<()> {
  114|  44.5k|        self.shrink_data();
  115|  44.5k|        if self.data.len() == self.max_buffer_size {
  116|      0|            return Err(io::Error::new(
  117|      0|                io::ErrorKind::OutOfMemory,
  118|      0|                format!(
  119|      0|                    "Reached the buffer maximal size of {}",
  120|      0|                    self.max_buffer_size
  121|      0|                ),
  122|      0|            ));
  123|  44.5k|        }
  124|  44.5k|        let min_end = min(self.data.len() + self.min_buffer_size, self.max_buffer_size);
  125|  44.5k|        let new_start = self.data.len();
  126|  44.5k|        self.data.resize(min_end, 0);
  127|  44.5k|        if self.data.len() < self.data.capacity() {
  128|  4.87k|            // We keep extending to have as much space as available without reallocation
  129|  4.87k|            self.data.resize(self.data.capacity(), 0);
  130|  39.6k|        }
  131|  44.5k|        let read = read.read(&mut self.data[new_start..])?;
  132|  44.5k|        self.data.truncate(new_start + read);
  133|  44.5k|        self.is_ending = read == 0;
  134|  44.5k|        Ok(())
  135|  44.5k|    }
_RNvXs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCsl2lhD68vXAd_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejEReEE4fromB8_:
   41|  1.16M|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  1.16M|        (*location.start()..*location.end() + 1, message).into()
   43|  1.16M|    }
_RNCNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB7_5LexerNtNtBb_5lexer7N3LexerE9read_next0Bb_:
  227|  3.13M|        Some(result.map_err(|e| SyntaxError {
  228|  3.13M|            location: self.location_from_buffer_offset_range(e.location),
  229|  3.13M|            message: e.message,
  230|  3.13M|        }))
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  397|  12.9M|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  398|  12.9M|        let mut num_of_jumps = 0;
  399|  12.9M|        let mut last_jump_pos = 0;
  400|  12.9M|        let mut previous_cr = 0;
  401|  12.9M|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  402|  36.1k|            if bytes[pos] == b'\r' {
  403|  6.68k|                previous_cr = pos;
  404|  6.68k|                num_of_jumps += 1;
  405|  6.68k|                last_jump_pos = pos + 1;
  406|  6.68k|            } else {
  407|  29.4k|                if previous_cr < pos - 1 {
  408|  25.9k|                    // We count \r\n as a single line jump
  409|  25.9k|                    num_of_jumps += 1;
  410|  25.9k|                }
  411|  29.4k|                last_jump_pos = pos + 1;
  412|       |            }
  413|       |        }
  414|  12.9M|        (num_of_jumps, last_jump_pos)
  415|  12.9M|    }
_RNvXNtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCsl2lhD68vXAd_4core7convert4FromTINtNtNtB1a_3ops5range5RangejENtNtCsdBW21Yiwikk_5alloc6string6StringEE4fromB6_:
   31|  1.90M|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|  1.90M|        Self {
   33|  1.90M|            location,
   34|  1.90M|            message: message.into(),
   35|  1.90M|        }
   36|  1.90M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE9read_nextB9_:
  166|  9.32M|    pub fn read_next(&mut self, options: &R::Options) -> Option<Result<R::Token<'_>, SyntaxError>> {
  167|  9.32M|        self.skip_whitespaces_and_comments()?;
  168|  9.29M|        self.previous_position = self.position;
  169|  9.29M|        let Some((consumed, result)) = self.parser.recognize_next_token(
  170|  9.29M|            &self.data[self.position.buffer_offset..],
  171|  9.29M|            self.is_ending,
  172|  9.29M|            options,
  173|  9.29M|        ) else {
  174|  2.58M|            return if self.is_ending {
  175|   117k|                if self.position.buffer_offset == self.data.len() {
  176|   108k|                    None // We have finished
  177|       |                } else {
  178|  8.96k|                    let (new_line_jumps, new_line_start) =
  179|  8.96k|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  180|  8.96k|                            &self.data[self.position.buffer_offset..],
  181|  8.96k|                        );
  182|  8.96k|                    if new_line_jumps > 0 {
  183|  1.70k|                        self.position.line_start_buffer_offset =
  184|  1.70k|                            self.position.buffer_offset + new_line_start;
  185|  7.26k|                    }
  186|  8.96k|                    self.position.global_offset +=
  187|  8.96k|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  188|  8.96k|                    self.position.buffer_offset = self.data.len();
  189|  8.96k|                    self.position.global_line += new_line_jumps;
  190|  8.96k|                    let new_position = TextPosition {
  191|  8.96k|                        line: self.position.global_line,
  192|  8.96k|                        column: Self::column_from_bytes(
  193|  8.96k|                            &self.data[self.position.line_start_buffer_offset..],
  194|  8.96k|                        ),
  195|  8.96k|                        offset: self.position.global_offset,
  196|  8.96k|                    };
  197|  8.96k|                    let error = SyntaxError {
  198|  8.96k|                        location: new_position..new_position,
  199|  8.96k|                        message: "Unexpected end of file".into(),
  200|  8.96k|                    };
  201|  8.96k|                    self.position.buffer_offset = self.data.len(); // We consume everything
  202|  8.96k|                    Some(Err(error))
  203|       |                }
  204|       |            } else {
  205|  2.47M|                None
  206|       |            };
  207|       |        };
  208|       |        debug_assert!(
  209|      0|            consumed > 0,
  210|      0|            "The lexer must consume at least one byte each time"
  211|       |        );
  212|       |        debug_assert!(
  213|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  214|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  215|      0|            self.data.len() - self.position.buffer_offset
  216|       |        );
  217|  6.70M|        let (new_line_jumps, new_line_start) =
  218|  6.70M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  219|  6.70M|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  220|  6.70M|            );
  221|  6.70M|        if new_line_jumps > 0 {
  222|  5.39k|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  223|  6.69M|        }
  224|  6.70M|        self.position.buffer_offset += consumed;
  225|  6.70M|        self.position.global_offset += u64::try_from(consumed).unwrap();
  226|  6.70M|        self.position.global_line += new_line_jumps;
  227|  6.70M|        Some(result.map_err(|e| SyntaxError {
  228|       |            location: self.location_from_buffer_offset_range(e.location),
  229|       |            message: e.message,
  230|  6.70M|        }))
  231|  9.32M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  297|  9.32M|    fn skip_whitespaces_and_comments(&mut self) -> Option<()> {
  298|       |        loop {
  299|  9.32M|            self.skip_whitespaces()?;
  300|       |
  301|  9.32M|            let buf = &self.data[self.position.buffer_offset..];
  302|  9.32M|            if let Some(line_comment_start) = self.line_comment_start {
  303|  9.32M|                if buf.starts_with(line_comment_start) {
  304|       |                    // Comment
  305|  37.3k|                    if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  306|  7.38k|                        let mut end_position = line_comment_start.len() + end;
  307|  7.38k|                        if buf.get(end_position).copied() == Some(b'\r') {
  308|       |                            // We look for \n for Windows line end style
  309|  4.91k|                            if let Some(c) = buf.get(end_position + 1) {
  310|  1.55k|                                if *c == b'\n' {
  311|      0|                                    end_position += 1;
  312|  1.55k|                                }
  313|  3.36k|                            } else if !self.is_ending {
  314|  3.35k|                                return None; // We need to read more
  315|     10|                            }
  316|  2.47k|                        }
  317|  4.03k|                        let comment_size = end_position + 1;
  318|  4.03k|                        self.position.buffer_offset += comment_size;
  319|  4.03k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  320|  4.03k|                        self.position.global_offset += u64::try_from(comment_size).unwrap();
  321|  4.03k|                        self.position.global_line += 1;
  322|  4.03k|                        continue;
  323|  29.9k|                    }
  324|  29.9k|                    if self.is_ending {
  325|  2.20k|                        self.position.buffer_offset = self.data.len(); // EOF
  326|  2.20k|                        return Some(());
  327|  27.7k|                    }
  328|  27.7k|                    return None; // We need more data
  329|  9.28M|                }
  330|      0|            }
  331|  9.28M|            return Some(());
  332|       |        }
  333|  9.32M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  335|  9.32M|    fn skip_whitespaces(&mut self) -> Option<()> {
  336|  9.32M|        if self.is_line_jump_whitespace {
  337|  9.32M|            let mut i = self.position.buffer_offset;
  338|  10.4M|            while let Some(c) = self.data.get(i) {
  339|  9.33M|                match c {
  340|   776k|                    b' ' | b'\t' => {
  341|   776k|                        self.position.buffer_offset += 1;
  342|   776k|                        self.position.global_offset += 1;
  343|   776k|                    }
  344|       |                    b'\r' => {
  345|       |                        // We look for \n for Windows line end style
  346|  31.6k|                        let mut increment: u8 = 1;
  347|  31.6k|                        if let Some(c) = self.data.get(i + 1) {
  348|  27.5k|                            if *c == b'\n' {
  349|     52|                                increment += 1;
  350|     52|                                i += 1;
  351|  27.4k|                            }
  352|  4.14k|                        } else if !self.is_ending {
  353|  3.95k|                            return None; // We need to read more
  354|    190|                        }
  355|  27.6k|                        self.position.buffer_offset += usize::from(increment);
  356|  27.6k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  357|  27.6k|                        self.position.global_offset += u64::from(increment);
  358|  27.6k|                        self.position.global_line += 1;
  359|       |                    }
  360|   279k|                    b'\n' => {
  361|   279k|                        self.position.buffer_offset += 1;
  362|   279k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  363|   279k|                        self.position.global_offset += 1;
  364|   279k|                        self.position.global_line += 1;
  365|   279k|                    }
  366|  8.24M|                    _ => return Some(()),
  367|       |                }
  368|  1.08M|                i += 1;
  369|       |                //TODO: SIMD
  370|       |            }
  371|       |        } else {
  372|      0|            for c in &self.data[self.position.buffer_offset..] {
  373|      0|                if matches!(c, b' ' | b'\t') {
  374|      0|                    self.position.buffer_offset += 1;
  375|      0|                    self.position.global_offset += 1;
  376|      0|                } else {
  377|      0|                    return Some(());
  378|       |                }
  379|       |                //TODO: SIMD
  380|       |            }
  381|       |        }
  382|  1.07M|        Some(())
  383|  9.32M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE33location_from_buffer_offset_rangeB9_:
  233|  3.13M|    pub fn location_from_buffer_offset_range(
  234|  3.13M|        &self,
  235|  3.13M|        offset_range: Range<usize>,
  236|  3.13M|    ) -> Range<TextPosition> {
  237|  3.13M|        let start_offset = self.previous_position.buffer_offset + offset_range.start;
  238|  3.13M|        let (start_extra_line_jumps, start_line_start) =
  239|  3.13M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  240|  3.13M|                &self.data[self.previous_position.buffer_offset..start_offset],
  241|  3.13M|            );
  242|  3.13M|        let start_line_start = if start_extra_line_jumps > 0 {
  243|  1.67k|            start_line_start + self.previous_position.buffer_offset
  244|       |        } else {
  245|  3.13M|            self.previous_position.line_start_buffer_offset
  246|       |        };
  247|  3.13M|        let end_offset = self.previous_position.buffer_offset + offset_range.end;
  248|  3.13M|        let (end_extra_line_jumps, end_line_start) =
  249|  3.13M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  250|  3.13M|                &self.data[self.previous_position.buffer_offset..end_offset],
  251|  3.13M|            );
  252|  3.13M|        let end_line_start = if end_extra_line_jumps > 0 {
  253|  4.10k|            end_line_start + self.previous_position.buffer_offset
  254|       |        } else {
  255|  3.13M|            self.previous_position.line_start_buffer_offset
  256|       |        };
  257|  3.13M|        TextPosition {
  258|  3.13M|            line: self.previous_position.global_line + start_extra_line_jumps,
  259|  3.13M|            column: Self::column_from_bytes(&self.data[start_line_start..start_offset]),
  260|  3.13M|            offset: self.previous_position.global_offset
  261|  3.13M|                + u64::try_from(offset_range.start).unwrap(),
  262|  3.13M|        }..TextPosition {
  263|  3.13M|            line: self.previous_position.global_line + end_extra_line_jumps,
  264|  3.13M|            column: Self::column_from_bytes(&self.data[end_line_start..end_offset]),
  265|  3.13M|            offset: self.previous_position.global_offset + u64::try_from(offset_range.end).unwrap(),
  266|  3.13M|        }
  267|  3.13M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE11shrink_dataB9_:
  385|  2.52M|    fn shrink_data(&mut self) {
  386|  2.52M|        if self.position.line_start_buffer_offset > 0 {
  387|  27.5k|            self.data
  388|  27.5k|                .copy_within(self.position.line_start_buffer_offset.., 0);
  389|  27.5k|            self.data
  390|  27.5k|                .truncate(self.data.len() - self.position.line_start_buffer_offset);
  391|  27.5k|            self.position.buffer_offset -= self.position.line_start_buffer_offset;
  392|  27.5k|            self.position.line_start_buffer_offset = 0;
  393|  27.5k|            self.previous_position = self.position;
  394|  2.49M|        }
  395|  2.52M|    }
_RNvXs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCsl2lhD68vXAd_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejENtNtCsdBW21Yiwikk_5alloc6string6StringEE4fromB8_:
   41|  54.8k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  54.8k|        (*location.start()..*location.end() + 1, message).into()
   43|  54.8k|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3endB9_:
  109|  36.0k|    pub fn end(&mut self) {
  110|  36.0k|        self.is_ending = true;
  111|  36.0k|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17last_token_sourceB9_:
  286|   273k|    pub fn last_token_source(&self) -> Cow<'_, str> {
  287|   273k|        String::from_utf8_lossy(
  288|   273k|            &self.data[self.previous_position.buffer_offset..self.position.buffer_offset],
  289|   273k|        )
  290|   273k|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17column_from_bytesB9_:
  417|  10.3M|    fn column_from_bytes(bytes: &[u8]) -> u64 {
  418|  10.3M|        match str::from_utf8(bytes) {
  419|  4.51M|            Ok(s) => u64::try_from(s.chars().count()).unwrap(),
  420|  5.87M|            Err(e) => {
  421|  5.87M|                if e.valid_up_to() == 0 {
  422|  2.31M|                    0
  423|       |                } else {
  424|  3.56M|                    Self::column_from_bytes(&bytes[..e.valid_up_to()])
  425|       |                }
  426|       |            }
  427|       |        }
  428|  10.3M|    }
_RNvXNtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCsl2lhD68vXAd_4core7convert4FromTINtNtNtB1a_3ops5range5RangejEReEE4fromB6_:
   31|  1.28M|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|  1.28M|        Self {
   33|  1.28M|            location,
   34|  1.28M|            message: message.into(),
   35|  1.28M|        }
   36|  1.28M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE6is_endB9_:
  292|  2.61M|    pub fn is_end(&self) -> bool {
  293|  2.61M|        self.is_ending && self.data.len() == self.position.buffer_offset
  294|  2.61M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3newB9_:
   73|  54.0k|    pub fn new(
   74|  54.0k|        parser: R,
   75|  54.0k|        min_buffer_size: usize,
   76|  54.0k|        max_buffer_size: usize,
   77|  54.0k|        is_line_jump_whitespace: bool,
   78|  54.0k|        line_comment_start: Option<&'static [u8]>,
   79|  54.0k|    ) -> Self {
   80|  54.0k|        Self {
   81|  54.0k|            parser,
   82|  54.0k|            data: Vec::new(),
   83|  54.0k|            position: Position {
   84|  54.0k|                line_start_buffer_offset: 0,
   85|  54.0k|                buffer_offset: 0,
   86|  54.0k|                global_offset: 0,
   87|  54.0k|                global_line: 0,
   88|  54.0k|            },
   89|  54.0k|            previous_position: Position {
   90|  54.0k|                line_start_buffer_offset: 0,
   91|  54.0k|                buffer_offset: 0,
   92|  54.0k|                global_offset: 0,
   93|  54.0k|                global_line: 0,
   94|  54.0k|            },
   95|  54.0k|            is_ending: false,
   96|  54.0k|            min_buffer_size,
   97|  54.0k|            max_buffer_size,
   98|  54.0k|            is_line_jump_whitespace,
   99|  54.0k|            line_comment_start,
  100|  54.0k|        }
  101|  54.0k|    }
_RNvXs0_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerNtB5_20TokenRecognizerErrorINtNtCsl2lhD68vXAd_4core7convert4FromTjNtNtCsdBW21Yiwikk_5alloc6string6StringEE4fromB9_:
   47|  12.6k|    fn from((location, message): (usize, S)) -> Self {
   48|  12.6k|        (location..=location, message).into()
   49|  12.6k|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17extend_from_sliceB9_:
  103|  2.48M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  104|  2.48M|        self.shrink_data();
  105|  2.48M|        self.data.extend_from_slice(other);
  106|  2.48M|    }
_RNvMs1_NtNtCs4WjTcpTVJQo_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE19last_token_locationB9_:
  269|   273k|    pub fn last_token_location(&self) -> Range<TextPosition> {
  270|   273k|        TextPosition {
  271|   273k|            line: self.previous_position.global_line,
  272|   273k|            column: Self::column_from_bytes(
  273|   273k|                &self.data[self.previous_position.line_start_buffer_offset
  274|   273k|                    ..self.previous_position.buffer_offset],
  275|   273k|            ),
  276|   273k|            offset: self.previous_position.global_offset,
  277|   273k|        }..TextPosition {
  278|   273k|            line: self.position.global_line,
  279|   273k|            column: Self::column_from_bytes(
  280|   273k|                &self.data[self.position.line_start_buffer_offset..self.position.buffer_offset],
  281|   273k|            ),
  282|   273k|            offset: self.position.global_offset,
  283|   273k|        }
  284|   273k|    }

_RINvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB5_6ParserNtNtB9_5terse14TriGRecognizerE10parse_readRShECsgo9gpfLdqrc_4trig:
  123|  18.0k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadIterator<R, RR> {
  124|  18.0k|        FromReadIterator { read, parser: self }
  125|  18.0k|    }
_RNvXs0_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB5_16FromReadIteratorRShNtNtB9_5terse14TriGRecognizerENtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4nextCsgo9gpfLdqrc_4trig:
  145|   248k|    fn next(&mut self) -> Option<Self::Item> {
  146|   292k|        while !self.parser.is_end() {
  147|   274k|            if let Some(result) = self.parser.read_next() {
  148|   230k|                return Some(result.map_err(ParseError::Syntax));
  149|  44.5k|            }
  150|  44.5k|            if let Err(e) = self.parser.lexer.extend_from_read(&mut self.read) {
  151|      0|                return Some(Err(e.into()));
  152|  44.5k|            }
  153|       |        }
  154|  18.0k|        None
  155|   248k|    }
_RNvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE3endB8_:
   71|  36.0k|    pub fn end(&mut self) {
   72|  36.0k|        self.lexer.end()
   73|  36.0k|    }
_RNCNvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB6_6ParserNtNtBa_5terse14TriGRecognizerE9read_next0Ba_:
   96|  3.56M|                        self.state = self.state.take().map(|state| {
   97|  3.56M|                            state.recognize_next(
   98|  3.56M|                                token,
   99|  3.56M|                                &mut self.context,
  100|  3.56M|                                &mut self.results,
  101|  3.56M|                                &mut self.errors,
  102|  3.56M|                            )
  103|  3.56M|                        });
_RNvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE6is_endB8_:
   76|   328k|    pub fn is_end(&self) -> bool {
   77|   328k|        self.state.is_none() && self.results.is_empty() && self.errors.is_empty()
   78|   328k|    }
_RNvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE9read_nextB8_:
   80|  6.67M|    pub fn read_next(&mut self) -> Option<Result<RR::Output, SyntaxError>> {
   81|       |        loop {
   82|  10.2M|            if let Some(error) = self.errors.pop() {
   83|   273k|                return Some(Err(SyntaxError {
   84|   273k|                    location: self.lexer.last_token_location(),
   85|   273k|                    message: error
   86|   273k|                        .message
   87|   273k|                        .replace("TOKEN", &self.lexer.last_token_source()),
   88|   273k|                }));
   89|  10.0M|            }
   90|  10.0M|            if let Some(result) = self.results.pop() {
   91|   690k|                return Some(Ok(result));
   92|  9.32M|            }
   93|  9.32M|            if let Some(result) = self.lexer.read_next(RR::lexer_options(&self.context)) {
   94|  6.70M|                match result {
   95|  3.56M|                    Ok(token) => {
   96|  3.56M|                        self.state = self.state.take().map(|state| {
   97|       |                            state.recognize_next(
   98|       |                                token,
   99|       |                                &mut self.context,
  100|       |                                &mut self.results,
  101|       |                                &mut self.errors,
  102|       |                            )
  103|  3.56M|                        });
  104|  3.56M|                        continue;
  105|       |                    }
  106|  3.14M|                    Err(e) => {
  107|  3.14M|                        self.state = self.state.take().map(RR::error_recovery_state);
  108|  3.14M|                        return Some(Err(e));
  109|       |                    }
  110|       |                }
  111|  2.61M|            }
  112|  2.61M|            if self.lexer.is_end() {
  113|   108k|                let Some(state) = self.state.take() else {
  114|  54.0k|                    return None;
  115|       |                };
  116|  54.0k|                state.recognize_end(&mut self.context, &mut self.results, &mut self.errors)
  117|       |            } else {
  118|  2.50M|                return None;
  119|       |            }
  120|       |        }
  121|  6.67M|    }
_RNvXNtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCsl2lhD68vXAd_4core7convert4FromNtNtCsdBW21Yiwikk_5alloc6string6StringE4fromB6_:
   39|  18.4k|    fn from(message: S) -> Self {
   40|  18.4k|        Self {
   41|  18.4k|            message: message.into(),
   42|  18.4k|        }
   43|  18.4k|    }
_RNvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE3newB8_:
   56|  54.0k|    pub fn new(lexer: Lexer<RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   57|  54.0k|        Self {
   58|  54.0k|            lexer,
   59|  54.0k|            state: Some(recognizer),
   60|  54.0k|            context,
   61|  54.0k|            results: vec![],
   62|  54.0k|            errors: vec![],
   63|  54.0k|        }
   64|  54.0k|    }
_RNvMs_NtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE17extend_from_sliceB8_:
   66|  2.48M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
   67|  2.48M|        self.lexer.extend_from_slice(other)
   68|  2.48M|    }
_RNvXNtNtCs4WjTcpTVJQo_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCsl2lhD68vXAd_4core7convert4FromReE4fromB6_:
   39|   254k|    fn from(message: S) -> Self {
   40|   254k|        Self {
   41|   254k|            message: message.into(),
   42|   254k|        }
   43|   254k|    }

_RNvMs2_NtCs4WjTcpTVJQo_5oxttl4trigNtB5_14TriGSerializer3newCsgo9gpfLdqrc_4trig:
  459|  18.0k|    pub fn new() -> Self {
  460|  18.0k|        Self
  461|  18.0k|    }
_RNvMNtCs4WjTcpTVJQo_5oxttl4trigNtB2_10TriGParser3newCsgo9gpfLdqrc_4trig:
   54|  54.0k|    pub fn new() -> Self {
   55|  54.0k|        Self::default()
   56|  54.0k|    }
_RNvXs6_NtCs4WjTcpTVJQo_5oxttl4trigNtB5_10TriGParserNtNtCsl2lhD68vXAd_4core7default7Default7defaultCsgo9gpfLdqrc_4trig:
   42|  54.0k|#[derive(Default)]
_RNvMNtCs4WjTcpTVJQo_5oxttl4trigNtB2_10TriGParser19with_quoted_triplesCsgo9gpfLdqrc_4trig:
   78|  54.0k|    pub fn with_quoted_triples(mut self) -> Self {
   79|  54.0k|        self.with_quoted_triples = true;
   80|  54.0k|        self
   81|  54.0k|    }
_RINvMs2_NtCs4WjTcpTVJQo_5oxttl4trigNtB6_14TriGSerializer18serialize_to_writeINtNtCsdBW21Yiwikk_5alloc3vec3VechEECsgo9gpfLdqrc_4trig:
  482|  18.0k|    pub fn serialize_to_write<W: Write>(self, write: W) -> ToWriteTriGWriter<W> {
  483|  18.0k|        ToWriteTriGWriter {
  484|  18.0k|            write,
  485|  18.0k|            writer: self.serialize(),
  486|  18.0k|        }
  487|  18.0k|    }
_RNvMs3_NtCs4WjTcpTVJQo_5oxttl4trigINtB5_17ToWriteTriGWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE6finishCsgo9gpfLdqrc_4trig:
  585|  18.0k|    pub fn finish(mut self) -> io::Result<W> {
  586|  18.0k|        self.writer.finish(&mut self.write)?;
  587|  18.0k|        Ok(self.write)
  588|  18.0k|    }
_RINvMNtCs4WjTcpTVJQo_5oxttl4trigNtB3_10TriGParser13with_base_iriReECsgo9gpfLdqrc_4trig:
   59|  36.0k|    pub fn with_base_iri(mut self, base_iri: impl Into<String>) -> Result<Self, IriParseError> {
   60|  36.0k|        self.base = Some(Iri::parse(base_iri.into())?);
   61|  36.0k|        Ok(self)
   62|  36.0k|    }
_RINvMs4_NtCs4WjTcpTVJQo_5oxttl4trigNtB6_18LowLevelTriGWriter6finishQINtNtCsdBW21Yiwikk_5alloc3vec3VechEECsgo9gpfLdqrc_4trig:
  745|  18.0k|    pub fn finish(&mut self, mut write: impl Write) -> io::Result<()> {
  746|  18.0k|        if self.current_subject_predicate.is_some() {
  747|  5.81k|            writeln!(write, " .")?;
  748|  12.2k|        }
  749|  18.0k|        if !self.current_graph_name.is_default_graph() {
  750|    283|            writeln!(write, "}}")?;
  751|  17.7k|        }
  752|  18.0k|        Ok(())
  753|  18.0k|    }
_RINvMNtCs4WjTcpTVJQo_5oxttl4trigNtB3_10TriGParser10parse_readRShECsgo9gpfLdqrc_4trig:
  108|  18.0k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadTriGReader<R> {
  109|  18.0k|        FromReadTriGReader {
  110|  18.0k|            inner: self.parse().parser.parse_read(read),
  111|  18.0k|        }
  112|  18.0k|    }
_RINvMs4_NtCs4WjTcpTVJQo_5oxttl4trigNtB6_18LowLevelTriGWriter10write_quadRNtNtCsbrE1BkJ52QU_5oxrdf6triple4QuadQINtNtCsdBW21Yiwikk_5alloc3vec3VechEECsgo9gpfLdqrc_4trig:
  668|   230k|    pub fn write_quad<'a>(
  669|   230k|        &mut self,
  670|   230k|        q: impl Into<QuadRef<'a>>,
  671|   230k|        mut write: impl Write,
  672|   230k|    ) -> io::Result<()> {
  673|   230k|        let q = q.into();
  674|   230k|        if q.graph_name == self.current_graph_name.as_ref() {
  675|   223k|            if let Some((current_subject, current_predicate)) =
  676|   229k|                self.current_subject_predicate.take()
  677|       |            {
  678|   223k|                if q.subject == current_subject.as_ref() {
  679|  36.7k|                    if q.predicate == current_predicate {
  680|  11.4k|                        self.current_subject_predicate = Some((current_subject, current_predicate));
  681|  11.4k|                        write!(write, " , {}", TurtleTerm(q.object))
  682|       |                    } else {
  683|  25.2k|                        self.current_subject_predicate =
  684|  25.2k|                            Some((current_subject, q.predicate.into_owned()));
  685|  25.2k|                        writeln!(write, " ;")?;
  686|  25.2k|                        if !self.current_graph_name.is_default_graph() {
  687|    474|                            write!(write, "\t")?;
  688|  24.8k|                        }
  689|  25.2k|                        write!(write, "\t{} {}", q.predicate, TurtleTerm(q.object))
  690|       |                    }
  691|       |                } else {
  692|   187k|                    self.current_subject_predicate =
  693|   187k|                        Some((q.subject.into_owned(), q.predicate.into_owned()));
  694|   187k|                    writeln!(write, " .")?;
  695|   187k|                    if !self.current_graph_name.is_default_graph() {
  696|  29.5k|                        write!(write, "\t")?;
  697|   157k|                    }
  698|   187k|                    write!(
  699|   187k|                        write,
  700|   187k|                        "{} {} {}",
  701|   187k|                        TurtleTerm(q.subject.into()),
  702|   187k|                        q.predicate,
  703|   187k|                        TurtleTerm(q.object)
  704|   187k|                    )
  705|       |                }
  706|       |            } else {
  707|  5.54k|                self.current_subject_predicate =
  708|  5.54k|                    Some((q.subject.into_owned(), q.predicate.into_owned()));
  709|  5.54k|                if !self.current_graph_name.is_default_graph() {
  710|      0|                    write!(write, "\t")?;
  711|  5.54k|                }
  712|  5.54k|                write!(
  713|  5.54k|                    write,
  714|  5.54k|                    "{} {} {}",
  715|  5.54k|                    TurtleTerm(q.subject.into()),
  716|  5.54k|                    q.predicate,
  717|  5.54k|                    TurtleTerm(q.object)
  718|  5.54k|                )
  719|       |            }
  720|       |        } else {
  721|    762|            if self.current_subject_predicate.is_some() {
  722|    494|                writeln!(write, " .")?;
  723|    268|            }
  724|    762|            if !self.current_graph_name.is_default_graph() {
  725|    240|                writeln!(write, "}}")?;
  726|    522|            }
  727|    762|            self.current_graph_name = q.graph_name.into_owned();
  728|    762|            self.current_subject_predicate =
  729|    762|                Some((q.subject.into_owned(), q.predicate.into_owned()));
  730|    762|            if !self.current_graph_name.is_default_graph() {
  731|    523|                writeln!(write, "{} {{", q.graph_name)?;
  732|    523|                write!(write, "\t")?;
  733|    239|            }
  734|    762|            write!(
  735|    762|                write,
  736|    762|                "{} {} {}",
  737|    762|                TurtleTerm(q.subject.into()),
  738|    762|                q.predicate,
  739|    762|                TurtleTerm(q.object)
  740|    762|            )
  741|       |        }
  742|   230k|    }
_RNvXs0_NtCs4WjTcpTVJQo_5oxttl4trigINtB5_18FromReadTriGReaderRShENtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4nextCsgo9gpfLdqrc_4trig:
  262|   248k|    fn next(&mut self) -> Option<Result<Quad, ParseError>> {
  263|   248k|        self.inner.next()
  264|   248k|    }
_RINvMs3_NtCs4WjTcpTVJQo_5oxttl4trigINtB6_17ToWriteTriGWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE10write_quadRNtNtCsbrE1BkJ52QU_5oxrdf6triple4QuadECsgo9gpfLdqrc_4trig:
  580|   230k|    pub fn write_quad<'a>(&mut self, q: impl Into<QuadRef<'a>>) -> io::Result<()> {
  581|   230k|        self.writer.write_quad(q, &mut self.write)
  582|   230k|    }
_RNvXs5_NtCs4WjTcpTVJQo_5oxttl4trigNtB5_10TurtleTermNtNtCsl2lhD68vXAd_4core3fmt7Display3fmt:
  759|   423k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  760|   423k|        match self.0 {
  761|  20.5k|            TermRef::NamedNode(v) => write!(f, "{v}"),
  762|   344k|            TermRef::BlankNode(v) => write!(f, "{v}"),
  763|  58.2k|            TermRef::Literal(v) => {
  764|  58.2k|                let value = v.value();
  765|  58.2k|                let inline = match v.datatype() {
  766|  58.2k|                    xsd::BOOLEAN => is_turtle_boolean(value),
  767|  58.0k|                    xsd::INTEGER => is_turtle_integer(value),
  768|  32.6k|                    xsd::DECIMAL => is_turtle_decimal(value),
  769|  30.3k|                    xsd::DOUBLE => is_turtle_double(value),
  770|  20.0k|                    _ => false,
  771|       |                };
  772|  58.2k|                if inline {
  773|  38.1k|                    write!(f, "{value}")
  774|       |                } else {
  775|  20.0k|                    write!(f, "{v}")
  776|       |                }
  777|       |            }
  778|       |            #[cfg(feature = "rdf-star")]
  779|      0|            TermRef::Triple(t) => {
  780|      0|                write!(
  781|      0|                    f,
  782|      0|                    "<< {} {} {} >>",
  783|      0|                    TurtleTerm(t.subject.as_ref().into()),
  784|      0|                    t.predicate,
  785|      0|                    TurtleTerm(t.object.as_ref())
  786|      0|                )
  787|       |            }
  788|       |        }
  789|   423k|    }
_RNvNtCs4WjTcpTVJQo_5oxttl4trig17is_turtle_decimal:
  807|  2.28k|fn is_turtle_decimal(value: &str) -> bool {
  808|  2.28k|    // [20] 	DECIMAL 	::= 	[+-]? [0-9]* '.' [0-9]+
  809|  2.28k|    let mut value = value.as_bytes();
  810|  2.28k|    if let Some(v) = value.strip_prefix(b"+") {
  811|    193|        value = v;
  812|  2.09k|    } else if let Some(v) = value.strip_prefix(b"-") {
  813|     91|        value = v;
  814|  2.00k|    }
  815|  10.8k|    while value.first().map_or(false, u8::is_ascii_digit) {
  816|  8.60k|        value = &value[1..];
  817|  8.60k|    }
  818|  2.28k|    let Some(value) = value.strip_prefix(b".") else {
  819|      0|        return false;
  820|       |    };
  821|  2.28k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  822|  2.28k|}
_RNvNtCs4WjTcpTVJQo_5oxttl4trig16is_turtle_double:
  824|  10.2k|fn is_turtle_double(value: &str) -> bool {
  825|  10.2k|    // [21] 	DOUBLE 	::= 	[+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  826|  10.2k|    // [154s] 	EXPONENT 	::= 	[eE] [+-]? [0-9]+
  827|  10.2k|    let mut value = value.as_bytes();
  828|  10.2k|    if let Some(v) = value.strip_prefix(b"+") {
  829|     36|        value = v;
  830|  10.2k|    } else if let Some(v) = value.strip_prefix(b"-") {
  831|     81|        value = v;
  832|  10.1k|    }
  833|  10.2k|    let mut with_before = false;
  834|  57.7k|    while value.first().map_or(false, u8::is_ascii_digit) {
  835|  47.4k|        value = &value[1..];
  836|  47.4k|        with_before = true;
  837|  47.4k|    }
  838|  10.2k|    let mut with_after = false;
  839|  10.2k|    if let Some(v) = value.strip_prefix(b".") {
  840|    285|        value = v;
  841|  4.80k|        while value.first().map_or(false, u8::is_ascii_digit) {
  842|  4.52k|            value = &value[1..];
  843|  4.52k|            with_after = true;
  844|  4.52k|        }
  845|  9.97k|    }
  846|  10.2k|    if let Some(v) = value.strip_prefix(b"e") {
  847|     94|        value = v;
  848|  10.1k|    } else if let Some(v) = value.strip_prefix(b"E") {
  849|  10.1k|        value = v;
  850|  10.1k|    } else {
  851|      0|        return false;
  852|       |    }
  853|  10.2k|    if let Some(v) = value.strip_prefix(b"+") {
  854|     19|        value = v;
  855|  10.2k|    } else if let Some(v) = value.strip_prefix(b"-") {
  856|     19|        value = v;
  857|  10.2k|    }
  858|  10.2k|    (with_before || with_after) && !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  859|  10.2k|}
_RNvMs1_NtCs4WjTcpTVJQo_5oxttl4trigNtB5_18LowLevelTriGReader17extend_from_slice:
  380|  2.48M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  381|  2.48M|        self.parser.extend_from_slice(other)
  382|  2.48M|    }
_RNvNtCs4WjTcpTVJQo_5oxttl4trig17is_turtle_boolean:
  792|    253|fn is_turtle_boolean(value: &str) -> bool {
  793|    253|    matches!(value, "true" | "false")
  794|    253|}
_RNvMs1_NtCs4WjTcpTVJQo_5oxttl4trigNtB5_18LowLevelTriGReader3end:
  387|  36.0k|    pub fn end(&mut self) {
  388|  36.0k|        self.parser.end()
  389|  36.0k|    }
_RNvNtCs4WjTcpTVJQo_5oxttl4trig17is_turtle_integer:
  796|  25.3k|fn is_turtle_integer(value: &str) -> bool {
  797|  25.3k|    // [19] 	INTEGER 	::= 	[+-]? [0-9]+
  798|  25.3k|    let mut value = value.as_bytes();
  799|  25.3k|    if let Some(v) = value.strip_prefix(b"+") {
  800|    922|        value = v;
  801|  24.4k|    } else if let Some(v) = value.strip_prefix(b"-") {
  802|     85|        value = v;
  803|  24.3k|    }
  804|  25.3k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  805|  25.3k|}
_RNvMs1_NtCs4WjTcpTVJQo_5oxttl4trigNtB5_18LowLevelTriGReader6is_end:
  392|  36.0k|    pub fn is_end(&self) -> bool {
  393|  36.0k|        self.parser.is_end()
  394|  36.0k|    }
_RNvMNtCs4WjTcpTVJQo_5oxttl4trigNtB2_10TriGParser5parse:
  189|  54.0k|    pub fn parse(self) -> LowLevelTriGReader {
  190|  54.0k|        LowLevelTriGReader {
  191|  54.0k|            parser: TriGRecognizer::new_parser(
  192|  54.0k|                true,
  193|  54.0k|                #[cfg(feature = "rdf-star")]
  194|  54.0k|                self.with_quoted_triples,
  195|  54.0k|                self.base,
  196|  54.0k|                self.prefixes,
  197|  54.0k|            ),
  198|  54.0k|        }
  199|  54.0k|    }
_RNvMs1_NtCs4WjTcpTVJQo_5oxttl4trigNtB5_18LowLevelTriGReader9read_next:
  400|  6.39M|    pub fn read_next(&mut self) -> Option<Result<Quad, SyntaxError>> {
  401|  6.39M|        self.parser.read_next()
  402|  6.39M|    }
_RNvMs2_NtCs4WjTcpTVJQo_5oxttl4trigNtB5_14TriGSerializer9serialize:
  545|  18.0k|    pub fn serialize(&self) -> LowLevelTriGWriter {
  546|  18.0k|        LowLevelTriGWriter {
  547|  18.0k|            current_graph_name: GraphName::DefaultGraph,
  548|  18.0k|            current_subject_predicate: None,
  549|  18.0k|        }
  550|  18.0k|    }


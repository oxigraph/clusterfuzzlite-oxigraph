_RINvMNtCsdchAY6UxDeR_9getrandom4lazyNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   34|    112|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   35|    112|        // Relaxed ordering is fine, as we only have a single atomic variable.
   36|    112|        let mut val = self.0.load(Relaxed);
   37|    112|        if val == Self::UNINIT {
   38|      1|            val = init();
   39|      1|            self.0.store(val, Relaxed);
   40|    111|        }
   41|    112|        val
   42|    112|    }
_RINvMs_NtCsdchAY6UxDeR_9getrandom4lazyNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   53|    112|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   54|    112|        self.0.unsync_init(|| init() as usize) != 0
   55|    112|    }
_RNCINvMs_NtCsdchAY6UxDeR_9getrandom4lazyNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   54|      1|        self.0.unsync_init(|| init() as usize) != 0

_RNvCsdchAY6UxDeR_9getrandom16getrandom_uninitCshTFxBpqDS00_9rand_core:
  345|    112|pub fn getrandom_uninit(dest: &mut [MaybeUninit<u8>]) -> Result<&mut [u8], Error> {
  346|    112|    if !dest.is_empty() {
  347|    112|        imp::getrandom_inner(dest)?;
  348|      0|    }
  349|       |    // SAFETY: `dest` has been fully initialized by `imp::getrandom_inner`
  350|       |    // since it returned `Ok`.
  351|    112|    Ok(unsafe { slice_assume_init_mut(dest) })
  352|    112|}
_RNvCsdchAY6UxDeR_9getrandom9getrandomCshTFxBpqDS00_9rand_core:
  315|    112|pub fn getrandom(dest: &mut [u8]) -> Result<(), Error> {
  316|    112|    // SAFETY: The `&mut MaybeUninit<_>` reference doesn't escape, and
  317|    112|    // `getrandom_uninit` guarantees it will never de-initialize any part of
  318|    112|    // `dest`.
  319|    112|    getrandom_uninit(unsafe { slice_as_uninit_mut(dest) })?;
  320|    112|    Ok(())
  321|    112|}

_RNvNtCsdchAY6UxDeR_9getrandom3imp15getrandom_inner:
    9|    112|pub fn getrandom_inner(dest: &mut [MaybeUninit<u8>]) -> Result<(), Error> {
   10|    112|    // getrandom(2) was introduced in Linux 3.17
   11|    112|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   12|    112|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   13|    112|        sys_fill_exact(dest, |buf| unsafe {
   14|       |            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   15|    112|        })
   16|       |    } else {
   17|      0|        use_file::getrandom_inner(dest)
   18|       |    }
   19|    112|}
_RNCNvNtCsdchAY6UxDeR_9getrandom3imp15getrandom_inner0B5_:
   13|    112|        sys_fill_exact(dest, |buf| unsafe {
   14|    112|            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   15|    112|        })
_RNvNtCsdchAY6UxDeR_9getrandom3imp22is_getrandom_available:
   21|      1|fn is_getrandom_available() -> bool {
   22|      1|    let res = unsafe { getrandom(core::ptr::null_mut(), 0, libc::GRND_NONBLOCK) };
   23|      1|    if res < 0 {
   24|      0|        match last_os_error().raw_os_error() {
   25|      0|            Some(libc::ENOSYS) => false, // No kernel support
   26|      0|            Some(libc::EPERM) => false,  // Blocked by seccomp
   27|      0|            _ => true,
   28|       |        }
   29|       |    } else {
   30|      1|        true
   31|       |    }
   32|      1|}
_RNvNtCsdchAY6UxDeR_9getrandom3imp9getrandom:
   34|    113|unsafe fn getrandom(
   35|    113|    buf: *mut libc::c_void,
   36|    113|    buflen: libc::size_t,
   37|    113|    flags: libc::c_uint,
   38|    113|) -> libc::ssize_t {
   39|    113|    libc::syscall(libc::SYS_getrandom, buf, buflen, flags) as libc::ssize_t
   40|    113|}

_RINvNtCsdchAY6UxDeR_9getrandom4util19slice_as_uninit_muthECshTFxBpqDS00_9rand_core:
   32|    112|pub unsafe fn slice_as_uninit_mut<T>(slice: &mut [T]) -> &mut [MaybeUninit<T>] {
   33|    112|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   34|    112|    &mut *(slice as *mut [T] as *mut [MaybeUninit<T>])
   35|    112|}
_RINvNtCsdchAY6UxDeR_9getrandom4util21slice_assume_init_muthECshTFxBpqDS00_9rand_core:
    8|    112|pub unsafe fn slice_assume_init_mut<T>(slice: &mut [MaybeUninit<T>]) -> &mut [T] {
    9|    112|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   10|    112|    &mut *(slice as *mut [MaybeUninit<T>] as *mut [T])
   11|    112|}

_RINvNtCsdchAY6UxDeR_9getrandom9util_libc14sys_fill_exactNCNvNtB4_3imp15getrandom_inner0EB4_:
   59|    112|pub fn sys_fill_exact(
   60|    112|    mut buf: &mut [MaybeUninit<u8>],
   61|    112|    sys_fill: impl Fn(&mut [MaybeUninit<u8>]) -> libc::ssize_t,
   62|    112|) -> Result<(), Error> {
   63|    224|    while !buf.is_empty() {
   64|    112|        let res = sys_fill(buf);
   65|    112|        match res {
   66|    112|            res if res > 0 => buf = buf.get_mut(res as usize..).ok_or(Error::UNEXPECTED)?,
   67|       |            -1 => {
   68|      0|                let err = last_os_error();
   69|      0|                // We should try again if the call was interrupted.
   70|      0|                if err.raw_os_error() != Some(libc::EINTR) {
   71|      0|                    return Err(err);
   72|      0|                }
   73|       |            }
   74|       |            // Negative return codes not equal to -1 should be impossible.
   75|       |            // EOF (ret = 0) should be impossible, as the data we are reading
   76|       |            // should be an infinite stream of random bytes.
   77|      0|            _ => return Err(Error::UNEXPECTED),
   78|       |        }
   79|       |    }
   80|    112|    Ok(())
   81|    112|}

rust_fuzzer_test_input:
  209|  6.30k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  6.30k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  6.30k|                }
  223|  6.30k|
  224|  6.30k|                __libfuzzer_sys_run(bytes);
  225|  6.30k|                0
  226|       |            }
_RNvNvCsiApsw9S2n9N_4trig1__19___libfuzzer_sys_run:
  241|  6.30k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|       |            }
LLVMFuzzerTestOneInput:
   58|  6.30k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  6.30k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  6.30k|    });
   63|  6.30k|
   64|  6.30k|    match test_input {
   65|  6.30k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  6.30k|}
_RNCNvCshufURL6W6yb_13libfuzzer_sys15test_input_wrap0B3_:
   59|  6.30k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  6.30k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  6.30k|        rust_fuzzer_test_input(data_slice)
   62|  6.30k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvMs3_NtNtNtCsyInqVJcthG_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1d_7Memchr2NtNtNtNtCsevdOxZso2fM_4core4iter6traits8iterator8Iterator4next0ECsbUpIViwkCx3_5oxttl:
 1044|  7.09M|    pub(crate) unsafe fn next(
 1045|  7.09M|        &mut self,
 1046|  7.09M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  7.09M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  7.09M|        let found = find_raw(self.start, self.end)?;
 1057|  20.3k|        let result = found.distance(self.original_start);
 1058|  20.3k|        self.start = found.add(1);
 1059|  20.3k|        Some(result)
 1060|  7.09M|    }
_RINvNtNtNtCsyInqVJcthG_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECsbUpIViwkCx3_5oxttl:
 1125|  15.4k|pub(crate) unsafe fn search_slice_with_raw(
 1126|  15.4k|    haystack: &[u8],
 1127|  15.4k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  15.4k|) -> Option<usize> {
 1129|  15.4k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  15.4k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  15.4k|    // a &[u8].
 1132|  15.4k|    let start = haystack.as_ptr();
 1133|  15.4k|    let end = start.add(haystack.len());
 1134|  15.4k|    let found = find_raw(start, end)?;
 1135|  1.34k|    Some(found.distance(start))
 1136|  15.4k|}
_RINvNtNtNtCsyInqVJcthG_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr7memchr20ECsbUpIViwkCx3_5oxttl:
 1125|   874k|pub(crate) unsafe fn search_slice_with_raw(
 1126|   874k|    haystack: &[u8],
 1127|   874k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|   874k|) -> Option<usize> {
 1129|   874k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|   874k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|   874k|    // a &[u8].
 1132|   874k|    let start = haystack.as_ptr();
 1133|   874k|    let end = start.add(haystack.len());
 1134|   874k|    let found = find_raw(start, end)?;
 1135|   568k|    Some(found.distance(start))
 1136|   874k|}
_RNvMs3_NtNtNtCsyInqVJcthG_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  7.07M|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  7.07M|        Iter {
 1029|  7.07M|            original_start: haystack.as_ptr(),
 1030|  7.07M|            start: haystack.as_ptr(),
 1031|  7.07M|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  7.07M|            haystack: core::marker::PhantomData,
 1033|  7.07M|        }
 1034|  7.07M|    }
_RNvMNtNtNtCsyInqVJcthG_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsevdOxZso2fM_4core9core_arch3x867___m128iE7needle1B8_:
  117|  27.9k|    pub(crate) fn needle1(&self) -> u8 {
  118|  27.9k|        self.s1
  119|  27.9k|    }
_RNvMNtNtNtCsyInqVJcthG_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsevdOxZso2fM_4core9core_arch3x867___m128iE3newB8_:
  111|  15.4k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  15.4k|        One { s1: needle, v1: V::splat(needle) }
  113|  15.4k|    }
_RNvMNtNtNtCsyInqVJcthG_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsevdOxZso2fM_4core9core_arch3x867___m256iE3newB8_:
  111|  15.4k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  15.4k|        One { s1: needle, v1: V::splat(needle) }
  113|  15.4k|    }
_RNvMNtNtNtCsyInqVJcthG_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsevdOxZso2fM_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  2.96k|    pub(crate) unsafe fn find_raw(
  144|  2.96k|        &self,
  145|  2.96k|        start: *const u8,
  146|  2.96k|        end: *const u8,
  147|  2.96k|    ) -> Option<*const u8> {
  148|  2.96k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  2.96k|        // need to move up to using a u64 for the masks used below. Currently
  150|  2.96k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  2.96k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  2.96k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  2.96k|        let topos = V::Mask::first_offset;
  155|  2.96k|        let len = end.distance(start);
  156|  2.96k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  2.96k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|     89|            return Some(cur);
  167|  2.87k|        }
  168|  2.87k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  2.87k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  2.87k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  2.87k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  2.87k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  3.75k|        while cur <= end.sub(V::BYTES) {
  213|    923|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|    923|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|     48|                return Some(cur);
  216|    875|            }
  217|    875|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  2.83k|        if cur < end {
  224|  2.54k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  2.54k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  2.54k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  2.54k|            return self.search_chunk(cur, topos);
  228|    284|        }
  229|    284|        None
  230|  2.96k|    }
_RNvMNtNtNtCsyInqVJcthG_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsevdOxZso2fM_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  7.01k|    pub(crate) unsafe fn find_raw(
  144|  7.01k|        &self,
  145|  7.01k|        start: *const u8,
  146|  7.01k|        end: *const u8,
  147|  7.01k|    ) -> Option<*const u8> {
  148|  7.01k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  7.01k|        // need to move up to using a u64 for the masks used below. Currently
  150|  7.01k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  7.01k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  7.01k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  7.01k|        let topos = V::Mask::first_offset;
  155|  7.01k|        let len = end.distance(start);
  156|  7.01k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  7.01k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|    556|            return Some(cur);
  167|  6.45k|        }
  168|  6.45k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  6.45k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  6.45k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  6.45k|        if len >= Self::LOOP_SIZE {
  172|  5.75k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|  3.00k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|  3.00k|                let a = V::load_aligned(cur);
  176|  3.00k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|  3.00k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|  3.00k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|  3.00k|                let eqa = self.v1.cmpeq(a);
  180|  3.00k|                let eqb = self.v1.cmpeq(b);
  181|  3.00k|                let eqc = self.v1.cmpeq(c);
  182|  3.00k|                let eqd = self.v1.cmpeq(d);
  183|  3.00k|                let or1 = eqa.or(eqb);
  184|  3.00k|                let or2 = eqc.or(eqd);
  185|  3.00k|                let or3 = or1.or(or2);
  186|  3.00k|                if or3.movemask_will_have_non_zero() {
  187|    191|                    let mask = eqa.movemask();
  188|    191|                    if mask.has_non_zero() {
  189|     34|                        return Some(cur.add(topos(mask)));
  190|    157|                    }
  191|    157|
  192|    157|                    let mask = eqb.movemask();
  193|    157|                    if mask.has_non_zero() {
  194|     69|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|     88|                    }
  196|     88|
  197|     88|                    let mask = eqc.movemask();
  198|     88|                    if mask.has_non_zero() {
  199|     50|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|     38|                    }
  201|     38|
  202|     38|                    let mask = eqd.movemask();
  203|     38|                    debug_assert!(mask.has_non_zero());
  204|     38|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  2.81k|                }
  206|  2.81k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  3.51k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  14.0k|        while cur <= end.sub(V::BYTES) {
  213|  7.91k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  7.91k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    107|                return Some(cur);
  216|  7.81k|            }
  217|  7.81k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  6.15k|        if cur < end {
  224|  5.66k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  5.66k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  5.66k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  5.66k|            return self.search_chunk(cur, topos);
  228|    499|        }
  229|    499|        None
  230|  7.01k|    }
_RINvMNtNtNtCsyInqVJcthG_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCsevdOxZso2fM_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB23_8MoveMask12first_offsetEB9_:
  416|  6.43k|    unsafe fn search_chunk(
  417|  6.43k|        &self,
  418|  6.43k|        cur: *const u8,
  419|  6.43k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  6.43k|    ) -> Option<*const u8> {
  421|  6.43k|        let chunk = V::load_unaligned(cur);
  422|  6.43k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  6.43k|        if mask.has_non_zero() {
  424|    194|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  6.24k|            None
  427|       |        }
  428|  6.43k|    }
_RINvMNtNtNtCsyInqVJcthG_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCsevdOxZso2fM_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB23_8MoveMask12first_offsetEB9_:
  416|  20.5k|    unsafe fn search_chunk(
  417|  20.5k|        &self,
  418|  20.5k|        cur: *const u8,
  419|  20.5k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  20.5k|    ) -> Option<*const u8> {
  421|  20.5k|        let chunk = V::load_unaligned(cur);
  422|  20.5k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  20.5k|        if mask.has_non_zero() {
  424|    817|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  19.7k|            None
  427|       |        }
  428|  20.5k|    }
_RNvMs_NtNtNtCsyInqVJcthG_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsevdOxZso2fM_4core9core_arch3x867___m128iE3newBa_:
  450|  7.97M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  7.97M|        Two {
  452|  7.97M|            s1: needle1,
  453|  7.97M|            s2: needle2,
  454|  7.97M|            v1: V::splat(needle1),
  455|  7.97M|            v2: V::splat(needle2),
  456|  7.97M|        }
  457|  7.97M|    }
_RNvMs_NtNtNtCsyInqVJcthG_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsevdOxZso2fM_4core9core_arch3x867___m256iE3newBa_:
  450|  7.97M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  7.97M|        Two {
  452|  7.97M|            s1: needle1,
  453|  7.97M|            s2: needle2,
  454|  7.97M|            v1: V::splat(needle1),
  455|  7.97M|            v2: V::splat(needle2),
  456|  7.97M|        }
  457|  7.97M|    }
_RNvMs_NtNtNtCsyInqVJcthG_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsevdOxZso2fM_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  9.63M|    pub(crate) fn needle1(&self) -> u8 {
  462|  9.63M|        self.s1
  463|  9.63M|    }
_RNvMs_NtNtNtCsyInqVJcthG_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsevdOxZso2fM_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  9.57M|    pub(crate) fn needle2(&self) -> u8 {
  468|  9.57M|        self.s2
  469|  9.57M|    }
_RNvMs_NtNtNtCsyInqVJcthG_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsevdOxZso2fM_4core9core_arch3x867___m128iE8find_rawBa_:
  493|   200k|    pub(crate) unsafe fn find_raw(
  494|   200k|        &self,
  495|   200k|        start: *const u8,
  496|   200k|        end: *const u8,
  497|   200k|    ) -> Option<*const u8> {
  498|   200k|        // If we want to support vectors bigger than 256 bits, we probably
  499|   200k|        // need to move up to using a u64 for the masks used below. Currently
  500|   200k|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|   200k|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|   200k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   200k|        let topos = V::Mask::first_offset;
  505|   200k|        let len = end.distance(start);
  506|   200k|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   200k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  42.6k|            return Some(cur);
  517|   157k|        }
  518|   157k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   157k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|   157k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   157k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   157k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   215k|        while cur <= end.sub(V::BYTES) {
  551|  60.2k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  60.2k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  2.19k|                return Some(cur);
  554|  58.0k|            }
  555|  58.0k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   155k|        if cur < end {
  562|   145k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   145k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|   145k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   145k|            return self.search_chunk(cur, topos);
  566|  10.0k|        }
  567|  10.0k|        None
  568|   200k|    }
_RNvMs_NtNtNtCsyInqVJcthG_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsevdOxZso2fM_4core9core_arch3x867___m256iE8find_rawBa_:
  493|   811k|    pub(crate) unsafe fn find_raw(
  494|   811k|        &self,
  495|   811k|        start: *const u8,
  496|   811k|        end: *const u8,
  497|   811k|    ) -> Option<*const u8> {
  498|   811k|        // If we want to support vectors bigger than 256 bits, we probably
  499|   811k|        // need to move up to using a u64 for the masks used below. Currently
  500|   811k|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|   811k|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|   811k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   811k|        let topos = V::Mask::first_offset;
  505|   811k|        let len = end.distance(start);
  506|   811k|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   811k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   344k|            return Some(cur);
  517|   466k|        }
  518|   466k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   466k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|   466k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   466k|        if len >= Self::LOOP_SIZE {
  522|   466k|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|   377k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|   377k|                let a = V::load_aligned(cur);
  526|   377k|                let b = V::load_aligned(cur.add(V::BYTES));
  527|   377k|                let eqa1 = self.v1.cmpeq(a);
  528|   377k|                let eqb1 = self.v1.cmpeq(b);
  529|   377k|                let eqa2 = self.v2.cmpeq(a);
  530|   377k|                let eqb2 = self.v2.cmpeq(b);
  531|   377k|                let or1 = eqa1.or(eqb1);
  532|   377k|                let or2 = eqa2.or(eqb2);
  533|   377k|                let or3 = or1.or(or2);
  534|   377k|                if or3.movemask_will_have_non_zero() {
  535|  97.0k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|  97.0k|                    if mask.has_non_zero() {
  537|  49.3k|                        return Some(cur.add(topos(mask)));
  538|  47.6k|                    }
  539|  47.6k|
  540|  47.6k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|  47.6k|                    debug_assert!(mask.has_non_zero());
  542|  47.6k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|   280k|                }
  544|   280k|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   281k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   501k|        while cur <= end.sub(V::BYTES) {
  551|   135k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   135k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  4.51k|                return Some(cur);
  554|   131k|            }
  555|   131k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   365k|        if cur < end {
  562|   353k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   353k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|   353k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   353k|            return self.search_chunk(cur, topos);
  566|  11.4k|        }
  567|  11.4k|        None
  568|   811k|    }
_RINvMs_NtNtNtCsyInqVJcthG_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCsevdOxZso2fM_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB25_8MoveMask12first_offsetEBb_:
  670|   405k|    unsafe fn search_chunk(
  671|   405k|        &self,
  672|   405k|        cur: *const u8,
  673|   405k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|   405k|    ) -> Option<*const u8> {
  675|   405k|        let chunk = V::load_unaligned(cur);
  676|   405k|        let eq1 = self.v1.cmpeq(chunk);
  677|   405k|        let eq2 = self.v2.cmpeq(chunk);
  678|   405k|        let mask = eq1.or(eq2).movemask();
  679|   405k|        if mask.has_non_zero() {
  680|  48.2k|            let mask1 = eq1.movemask();
  681|  48.2k|            let mask2 = eq2.movemask();
  682|  48.2k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|   357k|            None
  685|       |        }
  686|   405k|    }
_RINvMs_NtNtNtCsyInqVJcthG_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCsevdOxZso2fM_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB25_8MoveMask12first_offsetEBb_:
  670|  1.30M|    unsafe fn search_chunk(
  671|  1.30M|        &self,
  672|  1.30M|        cur: *const u8,
  673|  1.30M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  1.30M|    ) -> Option<*const u8> {
  675|  1.30M|        let chunk = V::load_unaligned(cur);
  676|  1.30M|        let eq1 = self.v1.cmpeq(chunk);
  677|  1.30M|        let eq2 = self.v2.cmpeq(chunk);
  678|  1.30M|        let mask = eq1.or(eq2).movemask();
  679|  1.30M|        if mask.has_non_zero() {
  680|   356k|            let mask1 = eq1.movemask();
  681|   356k|            let mask2 = eq2.movemask();
  682|   356k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|   944k|            None
  685|       |        }
  686|  1.30M|    }
_RINvNtNtNtCsyInqVJcthG_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB19_3One8find_raw0EB8_:
 1148|  4.27k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  4.27k|    start: *const u8,
 1150|  4.27k|    end: *const u8,
 1151|  4.27k|    confirm: F,
 1152|  4.27k|) -> Option<*const u8> {
 1153|  4.27k|    debug_assert!(start <= end);
 1154|  4.27k|    let mut ptr = start;
 1155|  32.0k|    while ptr < end {
 1156|  27.9k|        if confirm(*ptr) {
 1157|    143|            return Some(ptr);
 1158|  27.7k|        }
 1159|  27.7k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  4.13k|    None
 1162|  4.27k|}
_RINvNtNtNtCsyInqVJcthG_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1c_3Two8find_raw0EB8_:
 1148|  5.39M|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  5.39M|    start: *const u8,
 1150|  5.39M|    end: *const u8,
 1151|  5.39M|    confirm: F,
 1152|  5.39M|) -> Option<*const u8> {
 1153|  5.39M|    debug_assert!(start <= end);
 1154|  5.39M|    let mut ptr = start;
 1155|  14.9M|    while ptr < end {
 1156|  9.63M|        if confirm(*ptr) {
 1157|  87.3k|            return Some(ptr);
 1158|  9.55M|        }
 1159|  9.55M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  5.31M|    None
 1162|  5.39M|}

_RNvMNtNtNtNtCsyInqVJcthG_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  15.4k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  15.4k|        One {
   71|  15.4k|            sse2: generic::One::new(needle),
   72|  15.4k|            avx2: generic::One::new(needle),
   73|  15.4k|        }
   74|  15.4k|    }
_RNvMNtNtNtNtCsyInqVJcthG_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCsyInqVJcthG_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  15.4k|    pub unsafe fn find_raw(
  180|  15.4k|        &self,
  181|  15.4k|        start: *const u8,
  182|  15.4k|        end: *const u8,
  183|  15.4k|    ) -> Option<*const u8> {
  184|  15.4k|        if start >= end {
  185|  1.17k|            return None;
  186|  14.2k|        }
  187|  14.2k|        let len = end.distance(start);
  188|  14.2k|        if len < __m256i::BYTES {
  189|  7.24k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  4.27k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  4.27k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  2.96k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  7.01k|        }
  201|  7.01k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  7.01k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  7.01k|        // enough to run on the vector routine. Pointer validity is caller's
  204|  7.01k|        // responsibility.
  205|  7.01k|        //
  206|  7.01k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  7.01k|        // means we'd have to annotate this routine with `target_feature`.
  208|  7.01k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  7.01k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  7.01k|        // The real problem is that a routine with a `target_feature`
  211|  7.01k|        // annotation generally can't be inlined into caller code unless
  212|  7.01k|        // the caller code has the same target feature annotations. Namely,
  213|  7.01k|        // the common case (at time of writing) is for calling code to not
  214|  7.01k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  7.01k|        // `target_feature` on this routine, it can be inlined which will
  216|  7.01k|        // handle some of the short-haystack cases above without touching the
  217|  7.01k|        // architecture specific code.
  218|  7.01k|        self.find_raw_avx2(start, end)
  219|  15.4k|    }
_RNCNvMNtNtNtNtCsyInqVJcthG_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|  27.9k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|  27.9k|                    b == self.sse2.needle1()
  194|  27.9k|                })
_RNvMNtNtNtNtCsyInqVJcthG_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  2.96k|    unsafe fn find_raw_sse2(
  337|  2.96k|        &self,
  338|  2.96k|        start: *const u8,
  339|  2.96k|        end: *const u8,
  340|  2.96k|    ) -> Option<*const u8> {
  341|  2.96k|        self.sse2.find_raw(start, end)
  342|  2.96k|    }
_RNvMNtNtNtNtCsyInqVJcthG_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  7.01k|    unsafe fn find_raw_avx2(
  397|  7.01k|        &self,
  398|  7.01k|        start: *const u8,
  399|  7.01k|        end: *const u8,
  400|  7.01k|    ) -> Option<*const u8> {
  401|  7.01k|        self.avx2.find_raw(start, end)
  402|  7.01k|    }
_RNvMs2_NtNtNtNtCsyInqVJcthG_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  7.97M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  7.97M|        Two {
  558|  7.97M|            sse2: generic::Two::new(needle1, needle2),
  559|  7.97M|            avx2: generic::Two::new(needle1, needle2),
  560|  7.97M|        }
  561|  7.97M|    }
_RNvMs2_NtNtNtNtCsyInqVJcthG_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNvMs2_NtNtNtNtCsyInqVJcthG_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  7.97M|    pub unsafe fn find_raw(
  655|  7.97M|        &self,
  656|  7.97M|        start: *const u8,
  657|  7.97M|        end: *const u8,
  658|  7.97M|    ) -> Option<*const u8> {
  659|  7.97M|        if start >= end {
  660|  1.56M|            return None;
  661|  6.40M|        }
  662|  6.40M|        let len = end.distance(start);
  663|  6.40M|        if len < __m256i::BYTES {
  664|  5.59M|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  5.39M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  5.39M|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|   200k|                self.find_raw_sse2(start, end)
  674|       |            };
  675|   811k|        }
  676|   811k|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|   811k|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|   811k|        // enough to run on the vector routine. Pointer validity is caller's
  679|   811k|        // responsibility.
  680|   811k|        //
  681|   811k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|   811k|        // means we'd have to annotate this routine with `target_feature`.
  683|   811k|        // Which is fine, because this routine is `unsafe` anyway and the
  684|   811k|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|   811k|        // The real problem is that a routine with a `target_feature`
  686|   811k|        // annotation generally can't be inlined into caller code unless
  687|   811k|        // the caller code has the same target feature annotations. Namely,
  688|   811k|        // the common case (at time of writing) is for calling code to not
  689|   811k|        // have the `avx2` target feature enabled *at compile time*. Without
  690|   811k|        // `target_feature` on this routine, it can be inlined which will
  691|   811k|        // handle some of the short-haystack cases above without touching the
  692|   811k|        // architecture specific code.
  693|   811k|        self.find_raw_avx2(start, end)
  694|  7.97M|    }
_RNCNvMs2_NtNtNtNtCsyInqVJcthG_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  9.63M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  9.63M|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  9.63M|                })
_RNvMs2_NtNtNtNtCsyInqVJcthG_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|   200k|    unsafe fn find_raw_sse2(
  765|   200k|        &self,
  766|   200k|        start: *const u8,
  767|   200k|        end: *const u8,
  768|   200k|    ) -> Option<*const u8> {
  769|   200k|        self.sse2.find_raw(start, end)
  770|   200k|    }
_RNvMs2_NtNtNtNtCsyInqVJcthG_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|   811k|    unsafe fn find_raw_avx2(
  805|   811k|        &self,
  806|   811k|        start: *const u8,
  807|   811k|        end: *const u8,
  808|   811k|    ) -> Option<*const u8> {
  809|   811k|        self.avx2.find_raw(start, end)
  810|   811k|    }

_RNvNtNtNtCsyInqVJcthG_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  7.97M|pub(crate) fn memchr2_raw(
  221|  7.97M|    n1: u8,
  222|  7.97M|    n2: u8,
  223|  7.97M|    start: *const u8,
  224|  7.97M|    end: *const u8,
  225|  7.97M|) -> Option<*const u8> {
  226|  7.97M|    // SAFETY: We provide a valid function pointer type.
  227|  7.97M|    unsafe_ifunc!(
  228|  7.97M|        Two,
  229|  7.97M|        find_raw,
  230|  7.97M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  7.97M|        Option<*const u8>,
  232|  7.97M|        start,
  233|  7.97M|        end,
  234|  7.97M|        n1,
  235|  7.97M|        n2
  236|  7.97M|    )
  237|  7.97M|}
_RNvNvNtNtNtCsyInqVJcthG_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  15.4k|        unsafe fn find_avx2(
   79|  15.4k|            $($needle: u8),+,
   80|  15.4k|            $hay_start: *const u8,
   81|  15.4k|            $hay_end: *const u8,
   82|  15.4k|        ) -> $retty {
   83|  15.4k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  15.4k|            $memchrty::new_unchecked($($needle),+)
   85|  15.4k|                .$memchrfind($hay_start, $hay_end)
   86|  15.4k|        }
_RNvNvNtNtNtCsyInqVJcthG_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCsyInqVJcthG_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  7.97M|        unsafe fn find_avx2(
   79|  7.97M|            $($needle: u8),+,
   80|  7.97M|            $hay_start: *const u8,
   81|  7.97M|            $hay_end: *const u8,
   82|  7.97M|        ) -> $retty {
   83|  7.97M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  7.97M|            $memchrty::new_unchecked($($needle),+)
   85|  7.97M|                .$memchrfind($hay_start, $hay_end)
   86|  7.97M|        }
_RNvNvNtNtNtCsyInqVJcthG_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNtNtNtCsyInqVJcthG_6memchr4arch6x86_646memchr10memchr_raw:
  174|  15.4k|pub(crate) fn memchr_raw(
  175|  15.4k|    n1: u8,
  176|  15.4k|    start: *const u8,
  177|  15.4k|    end: *const u8,
  178|  15.4k|) -> Option<*const u8> {
  179|  15.4k|    // SAFETY: We provide a valid function pointer type.
  180|  15.4k|    unsafe_ifunc!(
  181|  15.4k|        One,
  182|  15.4k|        find_raw,
  183|  15.4k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  15.4k|        Option<*const u8>,
  185|  15.4k|        start,
  186|  15.4k|        end,
  187|  15.4k|        n1
  188|  15.4k|    )
  189|  15.4k|}

_RNvXNtCsyInqVJcthG_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  8.54M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  8.54M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  8.54M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  8.54M|    }
_RNvXNtCsyInqVJcthG_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|   633k|    fn as_usize(self) -> usize {
   27|   633k|        self as usize
   28|   633k|    }

_RNCNvNtCsyInqVJcthG_6memchr6memchr7memchr20CsbUpIViwkCx3_5oxttl:
   96|   874k|        generic::search_slice_with_raw(haystack, |start, end| {
   97|   874k|            memchr2_raw(needle1, needle2, start, end)
   98|   874k|        })
_RNCNvXs3_NtCsyInqVJcthG_6memchr6memchrNtB7_7Memchr2NtNtNtNtCsevdOxZso2fM_4core4iter6traits8iterator8Iterator4next0CsbUpIViwkCx3_5oxttl:
  395|  7.09M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNvMs2_NtCsyInqVJcthG_6memchr6memchrNtB5_7Memchr23newCsbUpIViwkCx3_5oxttl:
  377|  7.07M|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  7.07M|        Memchr2 {
  379|  7.07M|            needle1,
  380|  7.07M|            needle2,
  381|  7.07M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  7.07M|        }
  383|  7.07M|    }
_RNvNtCsyInqVJcthG_6memchr6memchr11memchr2_rawCsbUpIViwkCx3_5oxttl:
  574|  7.97M|unsafe fn memchr2_raw(
  575|  7.97M|    needle1: u8,
  576|  7.97M|    needle2: u8,
  577|  7.97M|    start: *const u8,
  578|  7.97M|    end: *const u8,
  579|  7.97M|) -> Option<*const u8> {
  580|  7.97M|    #[cfg(target_arch = "x86_64")]
  581|  7.97M|    {
  582|  7.97M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  7.97M|    }
  584|  7.97M|    #[cfg(target_arch = "wasm32")]
  585|  7.97M|    {
  586|  7.97M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  7.97M|    }
  588|  7.97M|    #[cfg(target_arch = "aarch64")]
  589|  7.97M|    {
  590|  7.97M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  7.97M|    }
  592|  7.97M|    #[cfg(not(any(
  593|  7.97M|        target_arch = "x86_64",
  594|  7.97M|        target_arch = "wasm32",
  595|  7.97M|        target_arch = "aarch64"
  596|  7.97M|    )))]
  597|  7.97M|    {
  598|  7.97M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  7.97M|            .find_raw(start, end)
  600|  7.97M|    }
  601|  7.97M|}
_RNvNtCsyInqVJcthG_6memchr6memchr12memchr2_iterCsbUpIViwkCx3_5oxttl:
  232|  7.07M|pub fn memchr2_iter<'h>(
  233|  7.07M|    needle1: u8,
  234|  7.07M|    needle2: u8,
  235|  7.07M|    haystack: &'h [u8],
  236|  7.07M|) -> Memchr2<'h> {
  237|  7.07M|    Memchr2::new(needle1, needle2, haystack)
  238|  7.07M|}
_RNvNtCsyInqVJcthG_6memchr6memchr6memchrCsbUpIViwkCx3_5oxttl:
   27|  15.4k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  15.4k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  15.4k|    // pointer between start and end.
   30|  15.4k|    unsafe {
   31|  15.4k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  15.4k|        })
   34|  15.4k|    }
   35|  15.4k|}
_RNvNtCsyInqVJcthG_6memchr6memchr7memchr2CsbUpIViwkCx3_5oxttl:
   92|   874k|pub fn memchr2(needle1: u8, needle2: u8, haystack: &[u8]) -> Option<usize> {
   93|   874k|    // SAFETY: memchr2_raw, when a match is found, always returns a valid
   94|   874k|    // pointer between start and end.
   95|   874k|    unsafe {
   96|   874k|        generic::search_slice_with_raw(haystack, |start, end| {
   97|       |            memchr2_raw(needle1, needle2, start, end)
   98|   874k|        })
   99|   874k|    }
  100|   874k|}
_RNvXs3_NtCsyInqVJcthG_6memchr6memchrNtB5_7Memchr2NtNtNtNtCsevdOxZso2fM_4core4iter6traits8iterator8Iterator4nextCsbUpIViwkCx3_5oxttl:
  390|  7.09M|    fn next(&mut self) -> Option<usize> {
  391|  7.09M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  7.09M|        // pointers returns will fall within the start and end bounds, and this
  393|  7.09M|        // upholds the safety contract of `self.it.next`.
  394|  7.09M|        unsafe {
  395|  7.09M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  7.09M|        }
  397|  7.09M|    }
_RNCNvNtCsyInqVJcthG_6memchr6memchr6memchr0B5_:
   31|  15.4k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|  15.4k|            memchr_raw(needle, start, end)
   33|  15.4k|        })
_RNvNtCsyInqVJcthG_6memchr6memchr10memchr_rawB3_:
  504|  15.4k|unsafe fn memchr_raw(
  505|  15.4k|    needle: u8,
  506|  15.4k|    start: *const u8,
  507|  15.4k|    end: *const u8,
  508|  15.4k|) -> Option<*const u8> {
  509|  15.4k|    #[cfg(target_arch = "x86_64")]
  510|  15.4k|    {
  511|  15.4k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  15.4k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  15.4k|        // time. This function also handles using a fallback if neither AVX2
  514|  15.4k|        // nor SSE2 (unusual) are available.
  515|  15.4k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  15.4k|    }
  517|  15.4k|    #[cfg(target_arch = "wasm32")]
  518|  15.4k|    {
  519|  15.4k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  15.4k|    }
  521|  15.4k|    #[cfg(target_arch = "aarch64")]
  522|  15.4k|    {
  523|  15.4k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  15.4k|    }
  525|  15.4k|    #[cfg(not(any(
  526|  15.4k|        target_arch = "x86_64",
  527|  15.4k|        target_arch = "wasm32",
  528|  15.4k|        target_arch = "aarch64"
  529|  15.4k|    )))]
  530|  15.4k|    {
  531|  15.4k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  15.4k|    }
  533|  15.4k|}

_RNvMNtCsyInqVJcthG_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  128|   503k|    fn get_for_offset(self) -> u32 {
  129|   503k|        #[cfg(target_endian = "big")]
  130|   503k|        {
  131|   503k|            self.0.swap_bytes()
  132|   503k|        }
  133|   503k|        #[cfg(target_endian = "little")]
  134|   503k|        {
  135|   503k|            self.0
  136|   503k|        }
  137|   503k|    }
_RNvXs_NtCsyInqVJcthG_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  148|  2.21M|    fn has_non_zero(self) -> bool {
  149|  2.21M|        self.0 != 0
  150|  2.21M|    }
_RNvXs_NtCsyInqVJcthG_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  173|   503k|    fn first_offset(self) -> usize {
  174|   503k|        // We are dealing with little endian here (and if we aren't, we swap
  175|   503k|        // the bytes so we are in practice), where the most significant byte
  176|   503k|        // is at a higher address. That means the least significant bit that
  177|   503k|        // is set corresponds to the position of our first matching byte.
  178|   503k|        // That position corresponds to the number of zeros after the least
  179|   503k|        // significant bit.
  180|   503k|        self.get_for_offset().trailing_zeros() as usize
  181|   503k|    }
_RNvXNtNtCsyInqVJcthG_6memchr6vector7x86sse2NtNtNtCsevdOxZso2fM_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  220|   412k|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  221|   412k|            _mm_loadu_si128(data as *const __m128i)
  222|   412k|        }
_RNvXNtNtCsyInqVJcthG_6memchr6vector7x86sse2NtNtNtCsevdOxZso2fM_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  225|   508k|        unsafe fn movemask(self) -> SensibleMoveMask {
  226|   508k|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  227|   508k|        }
_RNvXNtNtCsyInqVJcthG_6memchr6vector7x86sse2NtNtNtCsevdOxZso2fM_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  230|   818k|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  231|   818k|            _mm_cmpeq_epi8(self, vector2)
  232|   818k|        }
_RNvYNtNtNtCsevdOxZso2fM_4core9core_arch3x867___m256iNtNtCsyInqVJcthG_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   65|   380k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   66|   380k|        self.movemask().has_non_zero()
   67|   380k|    }
_RNvXNtNtCsyInqVJcthG_6memchr6vector7x86avx2NtNtNtCsevdOxZso2fM_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  275|  2.70M|        unsafe fn movemask(self) -> SensibleMoveMask {
  276|  2.70M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  277|  2.70M|        }
_RNvXNtNtCsyInqVJcthG_6memchr6vector7x86avx2NtNtNtCsevdOxZso2fM_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  270|  1.32M|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  271|  1.32M|            _mm256_loadu_si256(data as *const __m256i)
  272|  1.32M|        }
_RNvXNtNtCsyInqVJcthG_6memchr6vector7x86avx2NtNtNtCsevdOxZso2fM_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  280|  4.14M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  281|  4.14M|            _mm256_cmpeq_epi8(self, vector2)
  282|  4.14M|        }
_RNvXs_NtCsyInqVJcthG_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  163|   549k|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  164|   549k|        SensibleMoveMask(self.0 | other.0)
  165|   549k|    }
_RNvXNtNtCsyInqVJcthG_6memchr6vector7x86sse2NtNtNtCsevdOxZso2fM_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  210|  15.9M|        unsafe fn splat(byte: u8) -> __m128i {
  211|  15.9M|            _mm_set1_epi8(byte as i8)
  212|  15.9M|        }
_RNvXNtNtCsyInqVJcthG_6memchr6vector7x86sse2NtNtNtCsevdOxZso2fM_4core9core_arch3x867___m128iNtB4_6Vector2or:
  240|   405k|        unsafe fn or(self, vector2: Self) -> __m128i {
  241|   405k|            _mm_or_si128(self, vector2)
  242|   405k|        }
_RNvXNtNtCsyInqVJcthG_6memchr6vector7x86avx2NtNtNtCsevdOxZso2fM_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  260|  15.9M|        unsafe fn splat(byte: u8) -> __m256i {
  261|  15.9M|            _mm256_set1_epi8(byte as i8)
  262|  15.9M|        }
_RNvXNtNtCsyInqVJcthG_6memchr6vector7x86avx2NtNtNtCsevdOxZso2fM_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  265|   767k|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  266|   767k|            _mm256_load_si256(data as *const __m256i)
  267|   767k|        }
_RNvXNtNtCsyInqVJcthG_6memchr6vector7x86avx2NtNtNtCsevdOxZso2fM_4core9core_arch3x867___m256iNtB4_6Vector2or:
  290|  2.44M|        unsafe fn or(self, vector2: Self) -> __m256i {
  291|  2.44M|            _mm256_or_si256(self, vector2)
  292|  2.44M|        }

_RNvMs2_NtCs8qtSX9y4UP8_9once_cell3impINtB5_8OnceCellNtNtCs4msIGfPSjWU_5alloc6string6StringE14is_initializedCshufURL6W6yb_13libfuzzer_sys:
   49|  6.30k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  6.30k|        // An `Acquire` load is enough because that makes all the initialization
   51|  6.30k|        // operations visible to us, and, this being a fast path, weaker
   52|  6.30k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  6.30k|        // `SeqCst` operations on the slow path.
   54|  6.30k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  6.30k|    }

_RNvMs4_NtCs8qtSX9y4UP8_9once_cell4syncINtB5_8OnceCellNtNtCs4msIGfPSjWU_5alloc6string6StringE3getCshufURL6W6yb_13libfuzzer_sys:
  963|  6.30k|        pub fn get(&self) -> Option<&T> {
  964|  6.30k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  6.30k|                None
  969|       |            }
  970|  6.30k|        }

_RNvMCsjXnOXik1kyR_10oxilangtagINtB2_11LanguageTagReE10into_innerCsbUpIViwkCx3_5oxttl:
   54|  8.80k|    pub fn into_inner(self) -> T {
   55|  8.80k|        self.tag
   56|  8.80k|    }
_RNvMCsjXnOXik1kyR_10oxilangtagINtB2_11LanguageTagReE5parseCsbUpIViwkCx3_5oxttl:
   41|  11.7k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   42|  11.7k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   43|  8.80k|        Ok(Self { tag, positions })
   44|  11.7k|    }
_RNvXsE_CsjXnOXik1kyR_10oxilangtagNtB5_16VoidOutputBufferNtNtCsevdOxZso2fM_4core7default7Default7defaultCsbUpIViwkCx3_5oxttl:
  547|  11.7k|#[derive(Default)]
_RINvCsjXnOXik1kyR_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECsfYjWOBsMZ7D_5oxrdf:
  621|  8.92k|fn parse_langtag(
  622|  8.92k|    input: &str,
  623|  8.92k|    output: &mut impl OutputBuffer,
  624|  8.92k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  625|  8.92k|    #[derive(PartialEq, Eq)]
  626|  8.92k|    enum State {
  627|  8.92k|        Start,
  628|  8.92k|        AfterLanguage,
  629|  8.92k|        AfterExtLang,
  630|  8.92k|        AfterScript,
  631|  8.92k|        AfterRegion,
  632|  8.92k|        InExtension { expected: bool },
  633|  8.92k|        InPrivateUse { expected: bool },
  634|  8.92k|    }
  635|  8.92k|
  636|  8.92k|    let mut state = State::Start;
  637|  8.92k|    let mut language_end = 0;
  638|  8.92k|    let mut extlang_end = 0;
  639|  8.92k|    let mut script_end = 0;
  640|  8.92k|    let mut region_end = 0;
  641|  8.92k|    let mut variant_end = 0;
  642|  8.92k|    let mut extension_end = 0;
  643|  8.92k|    let mut extlangs_count = 0;
  644|  17.2k|    for (subtag, end) in SubTagIterator::new(input) {
  645|  17.2k|        if subtag.is_empty() {
  646|      0|            return Err(LanguageTagParseError {
  647|      0|                kind: TagParseErrorKind::EmptySubtag,
  648|      0|            });
  649|  17.2k|        }
  650|  17.2k|        if subtag.len() > 8 {
  651|    358|            return Err(LanguageTagParseError {
  652|    358|                kind: TagParseErrorKind::SubtagTooLong,
  653|    358|            });
  654|  16.8k|        }
  655|  16.8k|        if state == State::Start {
  656|       |            // Primary language
  657|  8.59k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  658|  1.55k|                return Err(LanguageTagParseError {
  659|  1.55k|                    kind: TagParseErrorKind::InvalidLanguage,
  660|  1.55k|                });
  661|  7.03k|            }
  662|  7.03k|            language_end = end;
  663|  7.03k|            output.extend(to_lowercase(subtag));
  664|  7.03k|            if subtag.len() < 4 {
  665|  4.66k|                // extlangs are only allowed for short language tags
  666|  4.66k|                state = State::AfterLanguage;
  667|  4.66k|            } else {
  668|  2.37k|                state = State::AfterExtLang;
  669|  2.37k|            }
  670|  8.26k|        } else if let State::InPrivateUse { .. } = state {
  671|    482|            if !is_alphanumeric(subtag) {
  672|      0|                return Err(LanguageTagParseError {
  673|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  674|      0|                });
  675|    482|            }
  676|    482|            output.push('-');
  677|    482|            output.extend(to_lowercase(subtag));
  678|    482|            state = State::InPrivateUse { expected: false };
  679|  7.77k|        } else if subtag == "x" || subtag == "X" {
  680|       |            // We make sure extension is found
  681|    636|            if let State::InExtension { expected: true } = state {
  682|    112|                return Err(LanguageTagParseError {
  683|    112|                    kind: TagParseErrorKind::EmptyExtension,
  684|    112|                });
  685|    524|            }
  686|    524|            output.push('-');
  687|    524|            output.push('x');
  688|    524|            state = State::InPrivateUse { expected: true };
  689|  7.14k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  690|       |            // We make sure extension is found
  691|  2.20k|            if let State::InExtension { expected: true } = state {
  692|    260|                return Err(LanguageTagParseError {
  693|    260|                    kind: TagParseErrorKind::EmptyExtension,
  694|    260|                });
  695|  1.94k|            }
  696|  1.94k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  697|  1.94k|            output.push('-');
  698|  1.94k|            output.push(extension_tag);
  699|  1.94k|            state = State::InExtension { expected: true };
  700|  4.93k|        } else if let State::InExtension { .. } = state {
  701|  2.41k|            if !is_alphanumeric(subtag) {
  702|      0|                return Err(LanguageTagParseError {
  703|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  704|      0|                });
  705|  2.41k|            }
  706|  2.41k|            extension_end = end;
  707|  2.41k|            output.push('-');
  708|  2.41k|            output.extend(to_lowercase(subtag));
  709|  2.41k|            state = State::InExtension { expected: false };
  710|  2.52k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  711|    335|            extlangs_count += 1;
  712|    335|            if extlangs_count > 3 {
  713|      6|                return Err(LanguageTagParseError {
  714|      6|                    kind: TagParseErrorKind::TooManyExtlangs,
  715|      6|                });
  716|    329|            }
  717|    329|            // valid extlangs
  718|    329|            extlang_end = end;
  719|    329|            output.push('-');
  720|    329|            output.extend(to_lowercase(subtag));
  721|  2.18k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  722|  1.91k|            && subtag.len() == 4
  723|    219|            && is_alphabetic(subtag)
  724|    219|        {
  725|    219|            // Script
  726|    219|            script_end = end;
  727|    219|            output.push('-');
  728|    219|            output.extend(to_uppercase_first(subtag));
  729|    219|            state = State::AfterScript;
  730|  1.96k|        } else if (state == State::AfterLanguage
  731|    526|            || state == State::AfterExtLang
  732|    274|            || state == State::AfterScript)
  733|  1.78k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  734|    887|                || subtag.len() == 3 && is_numeric(subtag))
  735|    899|        {
  736|    899|            // Region
  737|    899|            region_end = end;
  738|    899|            output.push('-');
  739|    899|            output.extend(to_uppercase(subtag));
  740|    899|            state = State::AfterRegion;
  741|  1.06k|        } else if (state == State::AfterLanguage
  742|    361|            || state == State::AfterExtLang
  743|    274|            || state == State::AfterScript
  744|    181|            || state == State::AfterRegion)
  745|  1.06k|            && is_alphanumeric(subtag)
  746|  1.06k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  747|    264|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  748|    804|        {
  749|    804|            // Variant
  750|    804|            variant_end = end;
  751|    804|            output.push('-');
  752|    804|            output.extend(to_lowercase(subtag));
  753|    804|            state = State::AfterRegion;
  754|    804|        } else {
  755|    264|            return Err(LanguageTagParseError {
  756|    264|                kind: TagParseErrorKind::InvalidSubtag,
  757|    264|            });
  758|       |        }
  759|       |    }
  760|       |
  761|       |    //We make sure we are in a correct final state
  762|  6.37k|    if let State::InExtension { expected: true } = state {
  763|    328|        return Err(LanguageTagParseError {
  764|    328|            kind: TagParseErrorKind::EmptyExtension,
  765|    328|        });
  766|  6.04k|    }
  767|  6.04k|    if let State::InPrivateUse { expected: true } = state {
  768|     76|        return Err(LanguageTagParseError {
  769|     76|            kind: TagParseErrorKind::EmptyPrivateUse,
  770|     76|        });
  771|  5.96k|    }
  772|  5.96k|
  773|  5.96k|    //We make sure we have not skipped anyone
  774|  5.96k|    if extlang_end < language_end {
  775|  5.66k|        extlang_end = language_end;
  776|  5.66k|    }
  777|  5.96k|    if script_end < extlang_end {
  778|  5.83k|        script_end = extlang_end;
  779|  5.83k|    }
  780|  5.96k|    if region_end < script_end {
  781|  5.17k|        region_end = script_end;
  782|  5.17k|    }
  783|  5.96k|    if variant_end < region_end {
  784|  5.17k|        variant_end = region_end;
  785|  5.17k|    }
  786|  5.96k|    if extension_end < variant_end {
  787|  4.77k|        extension_end = variant_end;
  788|  4.77k|    }
  789|       |
  790|  5.96k|    Ok(TagElementsPositions {
  791|  5.96k|        language_end,
  792|  5.96k|        extlang_end,
  793|  5.96k|        script_end,
  794|  5.96k|        region_end,
  795|  5.96k|        variant_end,
  796|  5.96k|        extension_end,
  797|  5.96k|    })
  798|  8.92k|}
_RINvCsjXnOXik1kyR_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECsfYjWOBsMZ7D_5oxrdf:
  576|  11.7k|fn parse_language_tag(
  577|  11.7k|    input: &str,
  578|  11.7k|    output: &mut impl OutputBuffer,
  579|  11.7k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  580|       |    //grandfathered tags
  581|  11.7k|    if let Some(tag) = GRANDFATHEREDS
  582|  11.7k|        .iter()
  583|  11.7k|        .find(|record| record.eq_ignore_ascii_case(input))
  584|       |    {
  585|      0|        output.push_str(tag);
  586|      0|        Ok(TagElementsPositions {
  587|      0|            language_end: tag.len(),
  588|      0|            extlang_end: tag.len(),
  589|      0|            script_end: tag.len(),
  590|      0|            region_end: tag.len(),
  591|      0|            variant_end: tag.len(),
  592|      0|            extension_end: tag.len(),
  593|      0|        })
  594|  11.7k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  595|       |        // private use
  596|  2.83k|        if !is_alphanumeric_or_dash(input) {
  597|      0|            Err(LanguageTagParseError {
  598|      0|                kind: TagParseErrorKind::ForbiddenChar,
  599|      0|            })
  600|  2.83k|        } else if input.len() == 2 {
  601|      0|            Err(LanguageTagParseError {
  602|      0|                kind: TagParseErrorKind::EmptyPrivateUse,
  603|      0|            })
  604|       |        } else {
  605|  2.83k|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  606|  2.83k|            Ok(TagElementsPositions {
  607|  2.83k|                language_end: input.len(),
  608|  2.83k|                extlang_end: input.len(),
  609|  2.83k|                script_end: input.len(),
  610|  2.83k|                region_end: input.len(),
  611|  2.83k|                variant_end: input.len(),
  612|  2.83k|                extension_end: input.len(),
  613|  2.83k|            })
  614|       |        }
  615|       |    } else {
  616|  8.92k|        parse_langtag(input, output)
  617|       |    }
  618|  11.7k|}
_RINvXsr_CsjXnOXik1kyR_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsevdOxZso2fM_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECsfYjWOBsMZ7D_5oxrdf:
  560|  2.83k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsjXnOXik1kyR_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsevdOxZso2fM_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECsfYjWOBsMZ7D_5oxrdf:
  560|  11.0k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsjXnOXik1kyR_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsevdOxZso2fM_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECsfYjWOBsMZ7D_5oxrdf:
  560|    899|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsjXnOXik1kyR_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsevdOxZso2fM_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECsfYjWOBsMZ7D_5oxrdf:
  560|    219|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCsjXnOXik1kyR_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0CsfYjWOBsMZ7D_5oxrdf:
  583|   305k|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvCsjXnOXik1kyR_10oxilangtag10is_numericCsfYjWOBsMZ7D_5oxrdf:
  865|    238|fn is_numeric(s: &str) -> bool {
  866|    238|    s.chars().all(|x| x.is_ascii_digit())
  867|    238|}
_RNvCsjXnOXik1kyR_10oxilangtag12to_lowercaseCsfYjWOBsMZ7D_5oxrdf:
  892|  11.0k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  893|  11.0k|    s.chars().map(|c| c.to_ascii_lowercase())
  894|  11.0k|}
_RNvCsjXnOXik1kyR_10oxilangtag12to_uppercaseCsfYjWOBsMZ7D_5oxrdf:
  880|    899|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  881|    899|    s.chars().map(|c| c.to_ascii_uppercase())
  882|    899|}
_RNvCsjXnOXik1kyR_10oxilangtag13is_alphabeticCsfYjWOBsMZ7D_5oxrdf:
  860|  9.29k|fn is_alphabetic(s: &str) -> bool {
  861|  9.29k|    s.chars().all(|x| x.is_ascii_alphabetic())
  862|  9.29k|}
_RNvCsjXnOXik1kyR_10oxilangtag15is_alphanumericCsfYjWOBsMZ7D_5oxrdf:
  870|  6.17k|fn is_alphanumeric(s: &str) -> bool {
  871|  6.17k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  872|  6.17k|}
_RNvCsjXnOXik1kyR_10oxilangtag18to_uppercase_firstCsfYjWOBsMZ7D_5oxrdf:
  886|    219|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  887|    219|    let mut chars = s.chars();
  888|    219|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  889|    219|}
_RNvCsjXnOXik1kyR_10oxilangtag23is_alphanumeric_or_dashCsfYjWOBsMZ7D_5oxrdf:
  875|  2.83k|fn is_alphanumeric_or_dash(s: &str) -> bool {
  876|  2.83k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  877|  2.83k|}
_RNvMsv_CsjXnOXik1kyR_10oxilangtagNtB5_14SubTagIterator3newCsfYjWOBsMZ7D_5oxrdf:
  839|  8.92k|    fn new(input: &'a str) -> Self {
  840|  8.92k|        Self {
  841|  8.92k|            split: input.split('-'),
  842|  8.92k|            position: 0,
  843|  8.92k|        }
  844|  8.92k|    }
_RNvXs_NvCsjXnOXik1kyR_10oxilangtag13parse_langtagNtB4_5StateNtNtCsevdOxZso2fM_4core3cmp9PartialEq2eqCsfYjWOBsMZ7D_5oxrdf:
  625|  26.8k|    #[derive(PartialEq, Eq)]
_RNvXsq_CsjXnOXik1kyR_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsfYjWOBsMZ7D_5oxrdf:
  552|  10.0k|    fn push(&mut self, _: char) {}
_RNvXsw_CsjXnOXik1kyR_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCsevdOxZso2fM_4core4iter6traits8iterator8Iterator4nextCsfYjWOBsMZ7D_5oxrdf:
  851|  23.5k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  852|  23.5k|        let tag = self.split.next()?;
  853|  17.2k|        let tag_end = self.position + tag.len();
  854|  17.2k|        self.position = tag_end + 1;
  855|  17.2k|        Some((tag, tag_end))
  856|  23.5k|    }
_RNvXso_CsjXnOXik1kyR_10oxilangtagNtB5_21LanguageTagParseErrorNtNtCsevdOxZso2fM_4core3fmt7Display3fmt:
  482|  2.96k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  483|  2.96k|        match self.kind {
  484|       |            TagParseErrorKind::EmptyExtension => {
  485|    700|                write!(f, "If an extension subtag is present, it must not be empty")
  486|       |            }
  487|       |            TagParseErrorKind::EmptyPrivateUse => {
  488|     76|                write!(f, "If the `x` subtag is present, it must not be empty")
  489|       |            }
  490|       |            TagParseErrorKind::ForbiddenChar => {
  491|      0|                write!(f, "The langtag contains a char not allowed")
  492|       |            }
  493|    264|            TagParseErrorKind::InvalidSubtag => write!(
  494|    264|                f,
  495|    264|                "A subtag fails to parse, it does not match any other subtags"
  496|    264|            ),
  497|  1.55k|            TagParseErrorKind::InvalidLanguage => write!(f, "The given language subtag is invalid"),
  498|       |            TagParseErrorKind::SubtagTooLong => {
  499|    358|                write!(f, "A subtag may be eight characters in length at maximum")
  500|       |            }
  501|      0|            TagParseErrorKind::EmptySubtag => write!(f, "A subtag should not be empty"),
  502|       |            TagParseErrorKind::TooManyExtlangs => {
  503|      6|                write!(f, "At maximum three extlangs are allowed")
  504|       |            }
  505|       |        }
  506|  2.96k|    }
_RNCNvCsjXnOXik1kyR_10oxilangtag13is_alphabetic0B3_:
  861|  28.2k|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCsjXnOXik1kyR_10oxilangtag10is_numeric0B3_:
  866|    238|    s.chars().all(|x| x.is_ascii_digit())
_RNCNvCsjXnOXik1kyR_10oxilangtag15is_alphanumeric0B3_:
  871|  16.3k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNCNvCsjXnOXik1kyR_10oxilangtag23is_alphanumeric_or_dash0B3_:
  876|  50.8k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')

_RNvXsZ_Csjq9lBaiujPk_5oxiriNtNtCs4msIGfPSjWU_5alloc6string6StringNtB5_12OutputBuffer3lenCsbUpIViwkCx3_5oxttl:
 1137|   582k|    fn len(&self) -> usize {
 1138|   582k|        self.len()
 1139|   582k|    }
_RNvXsZ_Csjq9lBaiujPk_5oxiriNtNtCs4msIGfPSjWU_5alloc6string6StringNtB5_12OutputBuffer4pushCsbUpIViwkCx3_5oxttl:
 1117|  1.93M|    fn push(&mut self, c: char) {
 1118|  1.93M|        self.push(c);
 1119|  1.93M|    }
_RNvXsZ_Csjq9lBaiujPk_5oxiriNtNtCs4msIGfPSjWU_5alloc6string6StringNtB5_12OutputBuffer5clearCsbUpIViwkCx3_5oxttl:
 1127|  23.1k|    fn clear(&mut self) {
 1128|  23.1k|        self.clear();
 1129|  23.1k|    }
_RNvXsZ_Csjq9lBaiujPk_5oxiriNtNtCs4msIGfPSjWU_5alloc6string6StringNtB5_12OutputBuffer6as_strCsbUpIViwkCx3_5oxttl:
 1142|   765k|    fn as_str(&self) -> &str {
 1143|   765k|        self.as_str()
 1144|   765k|    }
_RNvXsZ_Csjq9lBaiujPk_5oxiriNtNtCs4msIGfPSjWU_5alloc6string6StringNtB5_12OutputBuffer8push_strCsbUpIViwkCx3_5oxttl:
 1122|   271k|    fn push_str(&mut self, s: &str) {
 1123|   271k|        self.push_str(s);
 1124|   271k|    }
_RNvXsZ_Csjq9lBaiujPk_5oxiriNtNtCs4msIGfPSjWU_5alloc6string6StringNtB5_12OutputBuffer8truncateCsbUpIViwkCx3_5oxttl:
 1132|   250k|    fn truncate(&mut self, new_len: usize) {
 1133|   250k|        self.truncate(new_len);
 1134|   250k|    }
_RINvMs11_Csjq9lBaiujPk_5oxiriINtB7_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb0_E11parse_erroruECsbUpIViwkCx3_5oxttl:
 1567|  29.3k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1568|  29.3k|        Err(IriParseError { kind })
 1569|  29.3k|    }
_RINvMs11_Csjq9lBaiujPk_5oxiriINtB7_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb1_E11parse_erroruECsbUpIViwkCx3_5oxttl:
 1567|  1.18k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1568|  1.18k|        Err(IriParseError { kind })
 1569|  1.18k|    }
_RNCNvMs11_Csjq9lBaiujPk_5oxiriINtB8_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb0_E10read_echar0CsbUpIViwkCx3_5oxttl:
 1550|  3.90k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_Csjq9lBaiujPk_5oxiriINtB8_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb0_E10read_echars_0CsbUpIViwkCx3_5oxttl:
 1551|  2.84k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMCsjq9lBaiujPk_5oxiriINtB2_6IriRefNtNtCs4msIGfPSjWU_5alloc6string6StringE15parse_uncheckedCsbUpIViwkCx3_5oxttl:
   71|  4.19k|    pub fn parse_unchecked(iri: T) -> Result<Self, IriParseError> {
   72|  4.19k|        let positions = IriParser::<_, true>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   73|  4.19k|        Ok(Self { iri, positions })
   74|  4.19k|    }
_RNvMCsjq9lBaiujPk_5oxiriINtB2_6IriRefNtNtCs4msIGfPSjWU_5alloc6string6StringE17resolve_uncheckedCsbUpIViwkCx3_5oxttl:
  108|  96.2k|    pub fn resolve_unchecked(&self, iri: &str) -> Result<IriRef<String>, IriParseError> {
  109|  96.2k|        let mut target_buffer = String::with_capacity(self.iri.len() + iri.len());
  110|  96.2k|        let positions = IriParser::<_, true>::parse(iri, Some(self.as_ref()), &mut target_buffer)?;
  111|  95.0k|        Ok(IriRef {
  112|  95.0k|            iri: target_buffer,
  113|  95.0k|            positions,
  114|  95.0k|        })
  115|  96.2k|    }
_RNvMCsjq9lBaiujPk_5oxiriINtB2_6IriRefNtNtCs4msIGfPSjWU_5alloc6string6StringE4pathCsbUpIViwkCx3_5oxttl:
  264|    581|    pub fn path(&self) -> &str {
  265|    581|        &self.iri[self.positions.authority_end..self.positions.path_end]
  266|    581|    }
_RNvMCsjq9lBaiujPk_5oxiriINtB2_6IriRefNtNtCs4msIGfPSjWU_5alloc6string6StringE6as_refCsbUpIViwkCx3_5oxttl:
  160|   290k|    pub fn as_ref(&self) -> IriRef<&str> {
  161|   290k|        IriRef {
  162|   290k|            iri: &self.iri,
  163|   290k|            positions: self.positions,
  164|   290k|        }
  165|   290k|    }
_RNvMCsjq9lBaiujPk_5oxiriINtB2_6IriRefNtNtCs4msIGfPSjWU_5alloc6string6StringE7resolveCsbUpIViwkCx3_5oxttl:
   89|   193k|    pub fn resolve(&self, iri: &str) -> Result<IriRef<String>, IriParseError> {
   90|   193k|        let mut target_buffer = String::with_capacity(self.iri.len() + iri.len());
   91|   193k|        let positions = IriParser::<_, false>::parse(iri, Some(self.as_ref()), &mut target_buffer)?;
   92|   164k|        Ok(IriRef {
   93|   164k|            iri: target_buffer,
   94|   164k|            positions,
   95|   164k|        })
   96|   193k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_hostCsbUpIViwkCx3_5oxttl:
 1366|  3.48k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|  3.48k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|      0|            let start_position = self.input.position;
 1370|      0|            while let Some(c) = self.input.next() {
 1371|      0|                self.output.push(c);
 1372|      0|                if c == ']' {
 1373|      0|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|      0|                    if !UNCHECKED {
 1375|      0|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|      0|                        }
 1378|      0|                    }
 1379|       |
 1380|      0|                    let c = self.input.next();
 1381|      0|                    return match c {
 1382|       |                        Some(':') => {
 1383|      0|                            self.output.push(':');
 1384|      0|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|      0|                            self.output_positions.authority_end = self.output.len();
 1388|      0|                            self.parse_path_start(c)
 1389|       |                        }
 1390|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|      0|                }
 1393|       |            }
 1394|      0|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|  35.3k|            loop {
 1398|  35.3k|                let c = self.input.next();
 1399|  35.3k|                match c {
 1400|       |                    Some(':') => {
 1401|    252|                        self.output.push(':');
 1402|    252|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|  3.23k|                        self.output_positions.authority_end = self.output.len();
 1406|  3.23k|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|  31.8k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|  3.48k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_pathCsbUpIViwkCx3_5oxttl:
 1457|  3.26k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|  41.6k|        loop {
 1459|  41.6k|            let c = self.input.next();
 1460|  41.6k|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|  3.98k|                    if self.output.as_str().ends_with("/..") {
 1463|      0|                        self.remove_last_segment();
 1464|      0|                        self.remove_last_segment();
 1465|      0|                        self.output.push('/');
 1466|  3.98k|                    } else if self.output.as_str().ends_with("/.") {
 1467|      0|                        self.remove_last_segment();
 1468|      0|                        self.output.push('/');
 1469|  3.98k|                    } else if c == Some('/') {
 1470|    721|                        self.output.push('/');
 1471|  3.26k|                    }
 1472|       |
 1473|  3.98k|                    if c == Some('?') {
 1474|    852|                        self.output_positions.path_end = self.output.len();
 1475|    852|                        self.output.push('?');
 1476|    852|                        return self.parse_query();
 1477|  3.13k|                    } else if c == Some('#') {
 1478|    486|                        self.output_positions.path_end = self.output.len();
 1479|    486|                        self.output_positions.query_end = self.output.len();
 1480|    486|                        self.output.push('#');
 1481|    486|                        return self.parse_fragment();
 1482|  2.65k|                    } else if c.is_none() {
 1483|  1.92k|                        self.output_positions.path_end = self.output.len();
 1484|  1.92k|                        self.output_positions.query_end = self.output.len();
 1485|  1.92k|                        return Ok(());
 1486|    721|                    }
 1487|       |                }
 1488|  37.6k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|  3.26k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_portCsbUpIViwkCx3_5oxttl:
 1414|    252|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|    361|        loop {
 1416|    361|            let c = self.input.next();
 1417|    283|            match c {
 1418|    283|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|    252|                    self.output_positions.authority_end = self.output.len();
 1421|    252|                    return self.parse_path_start(c);
 1422|       |                }
 1423|      0|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|    252|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E11parse_queryCsbUpIViwkCx3_5oxttl:
 1493|    896|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|  12.8k|        while let Some(c) = self.input.next() {
 1495|  12.0k|            if c == '#' {
 1496|     90|                self.output_positions.query_end = self.output.len();
 1497|     90|                self.output.push('#');
 1498|     90|                return self.parse_fragment();
 1499|       |            } else {
 1500|  11.9k|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|    806|        self.output_positions.query_end = self.output.len();
 1504|    806|        Ok(())
 1505|    896|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E12parse_schemeCsbUpIViwkCx3_5oxttl:
 1220|  4.19k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|  23.9k|        loop {
 1222|  23.9k|            let c = self.input.next();
 1223|  23.9k|            match c {
 1224|  23.9k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|  19.7k|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|  4.19k|                    self.output.push(':');
 1229|  4.19k|                    self.output_positions.scheme_end = self.output.len();
 1230|  4.19k|                    self.input_scheme_end = self.input.position;
 1231|  4.19k|                    return if self.input.starts_with('/') {
 1232|  3.65k|                        self.input.next();
 1233|  3.65k|                        self.output.push('/');
 1234|  3.65k|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|    540|                        self.output_positions.authority_end = self.output.len();
 1237|    540|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|      0|                    self.input = ParserInput {
 1242|      0|                        value: self.iri.chars(),
 1243|      0|                        position: 0,
 1244|      0|                    }; // reset
 1245|      0|                    self.output.clear();
 1246|      0|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|  4.19k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E14parse_fragmentCsbUpIViwkCx3_5oxttl:
 1507|    661|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|  6.48k|        while let Some(c) = self.input.next() {
 1509|  5.82k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|    661|        Ok(())
 1512|    661|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E15parse_authorityCsbUpIViwkCx3_5oxttl:
 1342|  3.48k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|  36.0k|        loop {
 1345|  36.0k|            let c = self.input.next();
 1346|  36.0k|            match c {
 1347|       |                Some('@') => {
 1348|     34|                    self.output.push('@');
 1349|     34|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|  3.45k|                    self.input = ParserInput {
 1353|  3.45k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|  3.45k|                        position: self.input_scheme_end + 2,
 1355|  3.45k|                    };
 1356|  3.45k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|  3.45k|                    return self.parse_host();
 1358|       |                }
 1359|  32.5k|                Some(c) => {
 1360|  32.5k|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|  3.48k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E16parse_path_startCsbUpIViwkCx3_5oxttl:
 1428|  3.48k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|  3.48k|        match c {
 1430|       |            None => {
 1431|    800|                self.output_positions.path_end = self.output.len();
 1432|    800|                self.output_positions.query_end = self.output.len();
 1433|    800|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|     44|                self.output_positions.path_end = self.output.len();
 1437|     44|                self.output.push('?');
 1438|     44|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|     85|                self.output_positions.path_end = self.output.len();
 1442|     85|                self.output_positions.query_end = self.output.len();
 1443|     85|                self.output.push('#');
 1444|     85|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|  2.55k|                self.output.push('/');
 1448|  2.55k|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|  3.48k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E18parse_scheme_startCsbUpIViwkCx3_5oxttl:
 1212|  4.19k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|  4.19k|        match self.input.front() {
 1214|      0|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|  4.19k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|      0|            _ => self.parse_relative(),
 1217|       |        }
 1218|  4.19k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E23parse_path_or_authorityCsbUpIViwkCx3_5oxttl:
 1252|  3.65k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|  3.65k|        if self.input.starts_with('/') {
 1254|  3.48k|            self.input.next();
 1255|  3.48k|            self.output.push('/');
 1256|  3.48k|            self.parse_authority()
 1257|       |        } else {
 1258|    168|            self.output_positions.authority_end = self.output.len() - 1;
 1259|    168|            self.parse_path()
 1260|       |        }
 1261|  3.65k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E27read_url_codepoint_or_echarCsbUpIViwkCx3_5oxttl:
 1523|   107k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|   107k|        if UNCHECKED || is_url_code_point(c) {
 1525|   107k|            self.output.push(c);
 1526|   107k|            Ok(())
 1527|      0|        } else if c == '%' {
 1528|      0|            self.read_echar()
 1529|       |        } else {
 1530|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|   107k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E33read_url_query_codepoint_or_echarCsbUpIViwkCx3_5oxttl:
 1535|  11.9k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|  11.9k|        if UNCHECKED || is_url_query_code_point(c) {
 1537|  11.9k|            self.output.push(c);
 1538|  11.9k|            Ok(())
 1539|      0|        } else if c == '%' {
 1540|      0|            self.read_echar()
 1541|       |        } else {
 1542|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|  11.9k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E5parseCsbUpIViwkCx3_5oxttl:
 1187|  4.19k|    fn parse(
 1188|  4.19k|        iri: &'a str,
 1189|  4.19k|        base: Option<IriRef<&'a str>>,
 1190|  4.19k|        output: &'a mut O,
 1191|  4.19k|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|  4.19k|        let mut parser = Self {
 1193|  4.19k|            iri,
 1194|  4.19k|            base,
 1195|  4.19k|            input: ParserInput {
 1196|  4.19k|                value: iri.chars(),
 1197|  4.19k|                position: 0,
 1198|  4.19k|            },
 1199|  4.19k|            output,
 1200|  4.19k|            output_positions: IriElementsPositions {
 1201|  4.19k|                scheme_end: 0,
 1202|  4.19k|                authority_end: 0,
 1203|  4.19k|                path_end: 0,
 1204|  4.19k|                query_end: 0,
 1205|  4.19k|            },
 1206|  4.19k|            input_scheme_end: 0,
 1207|  4.19k|        };
 1208|  4.19k|        parser.parse_scheme_start()?;
 1209|  4.19k|        Ok(parser.output_positions)
 1210|  4.19k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb0_E10parse_hostCsbUpIViwkCx3_5oxttl:
 1366|  6.82k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|  6.82k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|  1.04k|            let start_position = self.input.position;
 1370|  38.5k|            while let Some(c) = self.input.next() {
 1371|  38.0k|                self.output.push(c);
 1372|  38.0k|                if c == ']' {
 1373|    508|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|    508|                    if !UNCHECKED {
 1375|    508|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|    508|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|      0|                        }
 1378|      0|                    }
 1379|       |
 1380|      0|                    let c = self.input.next();
 1381|      0|                    return match c {
 1382|       |                        Some(':') => {
 1383|      0|                            self.output.push(':');
 1384|      0|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|      0|                            self.output_positions.authority_end = self.output.len();
 1388|      0|                            self.parse_path_start(c)
 1389|       |                        }
 1390|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|  37.5k|                }
 1393|       |            }
 1394|    536|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|  69.0k|            loop {
 1398|  69.0k|                let c = self.input.next();
 1399|  69.0k|                match c {
 1400|       |                    Some(':') => {
 1401|  1.70k|                        self.output.push(':');
 1402|  1.70k|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|  3.82k|                        self.output_positions.authority_end = self.output.len();
 1406|  3.82k|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|  63.5k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|  6.82k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb0_E10parse_pathCsbUpIViwkCx3_5oxttl:
 1457|   166k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|   538k|        loop {
 1459|   538k|            let c = self.input.next();
 1460|   538k|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|   164k|                    if self.output.as_str().ends_with("/..") {
 1463|    510|                        self.remove_last_segment();
 1464|    510|                        self.remove_last_segment();
 1465|    510|                        self.output.push('/');
 1466|   163k|                    } else if self.output.as_str().ends_with("/.") {
 1467|   111k|                        self.remove_last_segment();
 1468|   111k|                        self.output.push('/');
 1469|   111k|                    } else if c == Some('/') {
 1470|  16.5k|                        self.output.push('/');
 1471|  35.4k|                    }
 1472|       |
 1473|   164k|                    if c == Some('?') {
 1474|  2.10k|                        self.output_positions.path_end = self.output.len();
 1475|  2.10k|                        self.output.push('?');
 1476|  2.10k|                        return self.parse_query();
 1477|   162k|                    } else if c == Some('#') {
 1478|  2.00k|                        self.output_positions.path_end = self.output.len();
 1479|  2.00k|                        self.output_positions.query_end = self.output.len();
 1480|  2.00k|                        self.output.push('#');
 1481|  2.00k|                        return self.parse_fragment();
 1482|   160k|                    } else if c.is_none() {
 1483|   143k|                        self.output_positions.path_end = self.output.len();
 1484|   143k|                        self.output_positions.query_end = self.output.len();
 1485|   143k|                        return Ok(());
 1486|  16.7k|                    }
 1487|       |                }
 1488|   374k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|   166k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb0_E10parse_portCsbUpIViwkCx3_5oxttl:
 1414|  1.70k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|  2.95k|        loop {
 1416|  2.95k|            let c = self.input.next();
 1417|  2.43k|            match c {
 1418|  2.43k|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|  1.45k|                    self.output_positions.authority_end = self.output.len();
 1421|  1.45k|                    return self.parse_path_start(c);
 1422|       |                }
 1423|    248|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|  1.70k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb0_E10read_echarCsbUpIViwkCx3_5oxttl:
 1547|  4.47k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1548|  4.47k|        let c1 = self.input.next();
 1549|  4.47k|        let c2 = self.input.next();
 1550|  4.47k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1551|  2.84k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1552|       |        {
 1553|  2.68k|            self.output.push('%');
 1554|  2.68k|            self.output.push(c1.unwrap());
 1555|  2.68k|            self.output.push(c2.unwrap());
 1556|  2.68k|            Ok(())
 1557|       |        } else {
 1558|  1.78k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1559|  1.78k|                Some('%'),
 1560|  1.78k|                c1,
 1561|  1.78k|                c2,
 1562|  1.78k|            ]))
 1563|       |        }
 1564|  4.47k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb0_E11parse_queryCsbUpIViwkCx3_5oxttl:
 1493|  8.11k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|  86.0k|        while let Some(c) = self.input.next() {
 1495|  81.0k|            if c == '#' {
 1496|    662|                self.output_positions.query_end = self.output.len();
 1497|    662|                self.output.push('#');
 1498|    662|                return self.parse_fragment();
 1499|       |            } else {
 1500|  80.4k|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|  4.93k|        self.output_positions.query_end = self.output.len();
 1504|  4.93k|        Ok(())
 1505|  8.11k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb0_E12parse_schemeCsbUpIViwkCx3_5oxttl:
 1220|  27.3k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|   141k|        loop {
 1222|   141k|            let c = self.input.next();
 1223|   137k|            match c {
 1224|   137k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|   113k|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|  11.8k|                    self.output.push(':');
 1229|  11.8k|                    self.output_positions.scheme_end = self.output.len();
 1230|  11.8k|                    self.input_scheme_end = self.input.position;
 1231|  11.8k|                    return if self.input.starts_with('/') {
 1232|  5.66k|                        self.input.next();
 1233|  5.66k|                        self.output.push('/');
 1234|  5.66k|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|  6.16k|                        self.output_positions.authority_end = self.output.len();
 1237|  6.16k|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|  15.4k|                    self.input = ParserInput {
 1242|  15.4k|                        value: self.iri.chars(),
 1243|  15.4k|                        position: 0,
 1244|  15.4k|                    }; // reset
 1245|  15.4k|                    self.output.clear();
 1246|  15.4k|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|  27.3k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb0_E14parse_fragmentCsbUpIViwkCx3_5oxttl:
 1507|  3.81k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|  31.0k|        while let Some(c) = self.input.next() {
 1509|  29.0k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|  2.07k|        Ok(())
 1512|  3.81k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb0_E14parse_relativeCsbUpIViwkCx3_5oxttl:
 1263|   181k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1264|   181k|        if let Some(base) = self.base {
 1265|   181k|            match self.input.front() {
 1266|       |                None => {
 1267|  11.1k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1268|  11.1k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1269|  11.1k|                    self.output_positions.authority_end = base.positions.authority_end;
 1270|  11.1k|                    self.output_positions.path_end = base.positions.path_end;
 1271|  11.1k|                    self.output_positions.query_end = base.positions.query_end;
 1272|  11.1k|                    Ok(())
 1273|       |                }
 1274|       |                Some('/') => {
 1275|   121k|                    self.input.next();
 1276|   121k|                    self.parse_relative_slash(&base)
 1277|       |                }
 1278|       |                Some('?') => {
 1279|  5.69k|                    self.input.next();
 1280|  5.69k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1281|  5.69k|                    self.output.push('?');
 1282|  5.69k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1283|  5.69k|                    self.output_positions.authority_end = base.positions.authority_end;
 1284|  5.69k|                    self.output_positions.path_end = base.positions.path_end;
 1285|  5.69k|                    self.parse_query()
 1286|       |                }
 1287|       |                Some('#') => {
 1288|    908|                    self.input.next();
 1289|    908|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1290|    908|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1291|    908|                    self.output_positions.authority_end = base.positions.authority_end;
 1292|    908|                    self.output_positions.path_end = base.positions.path_end;
 1293|    908|                    self.output_positions.query_end = base.positions.query_end;
 1294|    908|                    self.output.push('#');
 1295|    908|                    self.parse_fragment()
 1296|       |                }
 1297|       |                _ => {
 1298|  42.6k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1299|  42.6k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1300|  42.6k|                    self.output_positions.authority_end = base.positions.authority_end;
 1301|  42.6k|                    self.output_positions.path_end = base.positions.path_end;
 1302|  42.6k|                    self.remove_last_segment();
 1303|  42.6k|                    if self.output.len() > base.positions.scheme_end {
 1304|  41.1k|                        // We have some path or authority, we keep a base '/'
 1305|  41.1k|                        self.output.push('/');
 1306|  41.1k|                    }
 1307|  42.6k|                    self.parse_path()
 1308|       |                }
 1309|       |            }
 1310|       |        } else {
 1311|      0|            self.output_positions.scheme_end = 0;
 1312|      0|            self.input_scheme_end = 0;
 1313|      0|            if self.input.starts_with('/') {
 1314|      0|                self.input.next();
 1315|      0|                self.output.push('/');
 1316|      0|                self.parse_path_or_authority()
 1317|       |            } else {
 1318|      0|                self.output_positions.authority_end = 0;
 1319|      0|                self.parse_path()
 1320|       |            }
 1321|       |        }
 1322|   181k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb0_E15parse_authorityCsbUpIViwkCx3_5oxttl:
 1342|  10.8k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|   136k|        loop {
 1345|   136k|            let c = self.input.next();
 1346|   136k|            match c {
 1347|       |                Some('@') => {
 1348|    380|                    self.output.push('@');
 1349|    380|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|  6.44k|                    self.input = ParserInput {
 1353|  6.44k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|  6.44k|                        position: self.input_scheme_end + 2,
 1355|  6.44k|                    };
 1356|  6.44k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|  6.44k|                    return self.parse_host();
 1358|       |                }
 1359|   129k|                Some(c) => {
 1360|   129k|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|  10.8k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb0_E16parse_path_startCsbUpIViwkCx3_5oxttl:
 1428|  5.28k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|  5.28k|        match c {
 1430|       |            None => {
 1431|  3.31k|                self.output_positions.path_end = self.output.len();
 1432|  3.31k|                self.output_positions.query_end = self.output.len();
 1433|  3.31k|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|    320|                self.output_positions.path_end = self.output.len();
 1437|    320|                self.output.push('?');
 1438|    320|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|    238|                self.output_positions.path_end = self.output.len();
 1442|    238|                self.output_positions.query_end = self.output.len();
 1443|    238|                self.output.push('#');
 1444|    238|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|  1.41k|                self.output.push('/');
 1448|  1.41k|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|  5.28k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb0_E18parse_scheme_startCsbUpIViwkCx3_5oxttl:
 1212|   193k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|   193k|        match self.input.front() {
 1214|    458|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|   182k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|   166k|            _ => self.parse_relative(),
 1217|       |        }
 1218|   193k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb0_E19remove_last_segmentCsbUpIViwkCx3_5oxttl:
 1514|   155k|    fn remove_last_segment(&mut self) {
 1515|   155k|        let last_slash_position = self.output.as_str()[self.output_positions.authority_end..]
 1516|   155k|            .rfind('/')
 1517|   155k|            .unwrap_or(0);
 1518|   155k|        self.output
 1519|   155k|            .truncate(last_slash_position + self.output_positions.authority_end)
 1520|   155k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb0_E20parse_relative_slashCsbUpIViwkCx3_5oxttl:
 1324|   121k|    fn parse_relative_slash(&mut self, base: &IriRef<&'a str>) -> Result<(), IriParseError> {
 1325|   121k|        if self.input.starts_with('/') {
 1326|  5.73k|            self.input.next();
 1327|  5.73k|            self.output.push_str(&base.iri[..base.positions.scheme_end]);
 1328|  5.73k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1329|  5.73k|            self.output.push('/');
 1330|  5.73k|            self.output.push('/');
 1331|  5.73k|            self.parse_authority()
 1332|       |        } else {
 1333|   115k|            self.output
 1334|   115k|                .push_str(&base.iri[..base.positions.authority_end]);
 1335|   115k|            self.output.push('/');
 1336|   115k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1337|   115k|            self.output_positions.authority_end = base.positions.authority_end;
 1338|   115k|            self.parse_path()
 1339|       |        }
 1340|   121k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb0_E23parse_path_or_authorityCsbUpIViwkCx3_5oxttl:
 1252|  5.66k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|  5.66k|        if self.input.starts_with('/') {
 1254|  5.09k|            self.input.next();
 1255|  5.09k|            self.output.push('/');
 1256|  5.09k|            self.parse_authority()
 1257|       |        } else {
 1258|    578|            self.output_positions.authority_end = self.output.len() - 1;
 1259|    578|            self.parse_path()
 1260|       |        }
 1261|  5.66k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb0_E27read_url_codepoint_or_echarCsbUpIViwkCx3_5oxttl:
 1523|   596k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|   596k|        if UNCHECKED || is_url_code_point(c) {
 1525|   570k|            self.output.push(c);
 1526|   570k|            Ok(())
 1527|  26.7k|        } else if c == '%' {
 1528|  2.81k|            self.read_echar()
 1529|       |        } else {
 1530|  23.8k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|   596k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb0_E33read_url_query_codepoint_or_echarCsbUpIViwkCx3_5oxttl:
 1535|  80.4k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|  80.4k|        if UNCHECKED || is_url_query_code_point(c) {
 1537|  76.8k|            self.output.push(c);
 1538|  76.8k|            Ok(())
 1539|  3.54k|        } else if c == '%' {
 1540|  1.65k|            self.read_echar()
 1541|       |        } else {
 1542|  1.89k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|  80.4k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb0_E5parseCsbUpIViwkCx3_5oxttl:
 1187|   193k|    fn parse(
 1188|   193k|        iri: &'a str,
 1189|   193k|        base: Option<IriRef<&'a str>>,
 1190|   193k|        output: &'a mut O,
 1191|   193k|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|   193k|        let mut parser = Self {
 1193|   193k|            iri,
 1194|   193k|            base,
 1195|   193k|            input: ParserInput {
 1196|   193k|                value: iri.chars(),
 1197|   193k|                position: 0,
 1198|   193k|            },
 1199|   193k|            output,
 1200|   193k|            output_positions: IriElementsPositions {
 1201|   193k|                scheme_end: 0,
 1202|   193k|                authority_end: 0,
 1203|   193k|                path_end: 0,
 1204|   193k|                query_end: 0,
 1205|   193k|            },
 1206|   193k|            input_scheme_end: 0,
 1207|   193k|        };
 1208|   193k|        parser.parse_scheme_start()?;
 1209|   164k|        Ok(parser.output_positions)
 1210|   193k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb1_E10parse_hostCsbUpIViwkCx3_5oxttl:
 1366|  5.39k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|  5.39k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|    522|            let start_position = self.input.position;
 1370|  19.2k|            while let Some(c) = self.input.next() {
 1371|  19.0k|                self.output.push(c);
 1372|  19.0k|                if c == ']' {
 1373|    254|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|    254|                    if !UNCHECKED {
 1375|      0|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|      0|                        }
 1378|    254|                    }
 1379|       |
 1380|    254|                    let c = self.input.next();
 1381|    254|                    return match c {
 1382|       |                        Some(':') => {
 1383|     18|                            self.output.push(':');
 1384|     18|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|     71|                            self.output_positions.authority_end = self.output.len();
 1388|     71|                            self.parse_path_start(c)
 1389|       |                        }
 1390|    165|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|  18.7k|                }
 1393|       |            }
 1394|    268|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|  73.5k|            loop {
 1398|  73.5k|                let c = self.input.next();
 1399|  73.5k|                match c {
 1400|       |                    Some(':') => {
 1401|  1.52k|                        self.output.push(':');
 1402|  1.52k|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|  3.35k|                        self.output_positions.authority_end = self.output.len();
 1406|  3.35k|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|  68.6k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|  5.39k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb1_E10parse_pathCsbUpIViwkCx3_5oxttl:
 1457|  83.8k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|   402k|        loop {
 1459|   402k|            let c = self.input.next();
 1460|   402k|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|  99.5k|                    if self.output.as_str().ends_with("/..") {
 1463|    260|                        self.remove_last_segment();
 1464|    260|                        self.remove_last_segment();
 1465|    260|                        self.output.push('/');
 1466|  99.2k|                    } else if self.output.as_str().ends_with("/.") {
 1467|  61.5k|                        self.remove_last_segment();
 1468|  61.5k|                        self.output.push('/');
 1469|  61.5k|                    } else if c == Some('/') {
 1470|  15.5k|                        self.output.push('/');
 1471|  22.2k|                    }
 1472|       |
 1473|  99.5k|                    if c == Some('?') {
 1474|  1.26k|                        self.output_positions.path_end = self.output.len();
 1475|  1.26k|                        self.output.push('?');
 1476|  1.26k|                        return self.parse_query();
 1477|  98.2k|                    } else if c == Some('#') {
 1478|  1.18k|                        self.output_positions.path_end = self.output.len();
 1479|  1.18k|                        self.output_positions.query_end = self.output.len();
 1480|  1.18k|                        self.output.push('#');
 1481|  1.18k|                        return self.parse_fragment();
 1482|  97.0k|                    } else if c.is_none() {
 1483|  81.4k|                        self.output_positions.path_end = self.output.len();
 1484|  81.4k|                        self.output_positions.query_end = self.output.len();
 1485|  81.4k|                        return Ok(());
 1486|  15.6k|                    }
 1487|       |                }
 1488|   303k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|  83.8k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb1_E10parse_portCsbUpIViwkCx3_5oxttl:
 1414|  1.53k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|  2.77k|        loop {
 1416|  2.77k|            let c = self.input.next();
 1417|  2.50k|            match c {
 1418|  2.50k|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|  1.01k|                    self.output_positions.authority_end = self.output.len();
 1421|  1.01k|                    return self.parse_path_start(c);
 1422|       |                }
 1423|    520|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|  1.53k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb1_E11parse_queryCsbUpIViwkCx3_5oxttl:
 1493|  4.32k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|  61.1k|        while let Some(c) = self.input.next() {
 1495|  57.1k|            if c == '#' {
 1496|    368|                self.output_positions.query_end = self.output.len();
 1497|    368|                self.output.push('#');
 1498|    368|                return self.parse_fragment();
 1499|       |            } else {
 1500|  56.8k|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|  3.95k|        self.output_positions.query_end = self.output.len();
 1504|  3.95k|        Ok(())
 1505|  4.32k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb1_E12parse_schemeCsbUpIViwkCx3_5oxttl:
 1220|  13.5k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|  70.2k|        loop {
 1222|  70.2k|            let c = self.input.next();
 1223|  68.6k|            match c {
 1224|  68.6k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|  56.7k|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|  5.83k|                    self.output.push(':');
 1229|  5.83k|                    self.output_positions.scheme_end = self.output.len();
 1230|  5.83k|                    self.input_scheme_end = self.input.position;
 1231|  5.83k|                    return if self.input.starts_with('/') {
 1232|  2.82k|                        self.input.next();
 1233|  2.82k|                        self.output.push('/');
 1234|  2.82k|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|  3.01k|                        self.output_positions.authority_end = self.output.len();
 1237|  3.01k|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|  7.67k|                    self.input = ParserInput {
 1242|  7.67k|                        value: self.iri.chars(),
 1243|  7.67k|                        position: 0,
 1244|  7.67k|                    }; // reset
 1245|  7.67k|                    self.output.clear();
 1246|  7.67k|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|  13.5k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb1_E14parse_fragmentCsbUpIViwkCx3_5oxttl:
 1507|  2.08k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|  30.1k|        while let Some(c) = self.input.next() {
 1509|  28.0k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|  2.08k|        Ok(())
 1512|  2.08k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb1_E14parse_relativeCsbUpIViwkCx3_5oxttl:
 1263|  90.2k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1264|  90.2k|        if let Some(base) = self.base {
 1265|  90.2k|            match self.input.front() {
 1266|       |                None => {
 1267|  5.53k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1268|  5.53k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1269|  5.53k|                    self.output_positions.authority_end = base.positions.authority_end;
 1270|  5.53k|                    self.output_positions.path_end = base.positions.path_end;
 1271|  5.53k|                    self.output_positions.query_end = base.positions.query_end;
 1272|  5.53k|                    Ok(())
 1273|       |                }
 1274|       |                Some('/') => {
 1275|  60.2k|                    self.input.next();
 1276|  60.2k|                    self.parse_relative_slash(&base)
 1277|       |                }
 1278|       |                Some('?') => {
 1279|  2.84k|                    self.input.next();
 1280|  2.84k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1281|  2.84k|                    self.output.push('?');
 1282|  2.84k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1283|  2.84k|                    self.output_positions.authority_end = base.positions.authority_end;
 1284|  2.84k|                    self.output_positions.path_end = base.positions.path_end;
 1285|  2.84k|                    self.parse_query()
 1286|       |                }
 1287|       |                Some('#') => {
 1288|    402|                    self.input.next();
 1289|    402|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1290|    402|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1291|    402|                    self.output_positions.authority_end = base.positions.authority_end;
 1292|    402|                    self.output_positions.path_end = base.positions.path_end;
 1293|    402|                    self.output_positions.query_end = base.positions.query_end;
 1294|    402|                    self.output.push('#');
 1295|    402|                    self.parse_fragment()
 1296|       |                }
 1297|       |                _ => {
 1298|  21.1k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1299|  21.1k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1300|  21.1k|                    self.output_positions.authority_end = base.positions.authority_end;
 1301|  21.1k|                    self.output_positions.path_end = base.positions.path_end;
 1302|  21.1k|                    self.remove_last_segment();
 1303|  21.1k|                    if self.output.len() > base.positions.scheme_end {
 1304|  20.4k|                        // We have some path or authority, we keep a base '/'
 1305|  20.4k|                        self.output.push('/');
 1306|  20.4k|                    }
 1307|  21.1k|                    self.parse_path()
 1308|       |                }
 1309|       |            }
 1310|       |        } else {
 1311|      0|            self.output_positions.scheme_end = 0;
 1312|      0|            self.input_scheme_end = 0;
 1313|      0|            if self.input.starts_with('/') {
 1314|      0|                self.input.next();
 1315|      0|                self.output.push('/');
 1316|      0|                self.parse_path_or_authority()
 1317|       |            } else {
 1318|      0|                self.output_positions.authority_end = 0;
 1319|      0|                self.parse_path()
 1320|       |            }
 1321|       |        }
 1322|  90.2k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb1_E15parse_authorityCsbUpIViwkCx3_5oxttl:
 1342|  5.39k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|  80.3k|        loop {
 1345|  80.3k|            let c = self.input.next();
 1346|  80.3k|            match c {
 1347|       |                Some('@') => {
 1348|    194|                    self.output.push('@');
 1349|    194|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|  5.20k|                    self.input = ParserInput {
 1353|  5.20k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|  5.20k|                        position: self.input_scheme_end + 2,
 1355|  5.20k|                    };
 1356|  5.20k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|  5.20k|                    return self.parse_host();
 1358|       |                }
 1359|  74.9k|                Some(c) => {
 1360|  74.9k|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|  5.39k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb1_E16parse_path_startCsbUpIViwkCx3_5oxttl:
 1428|  4.44k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|  4.44k|        match c {
 1430|       |            None => {
 1431|  2.09k|                self.output_positions.path_end = self.output.len();
 1432|  2.09k|                self.output_positions.query_end = self.output.len();
 1433|  2.09k|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|    215|                self.output_positions.path_end = self.output.len();
 1437|    215|                self.output.push('?');
 1438|    215|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|    131|                self.output_positions.path_end = self.output.len();
 1442|    131|                self.output_positions.query_end = self.output.len();
 1443|    131|                self.output.push('#');
 1444|    131|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|  2.00k|                self.output.push('/');
 1448|  2.00k|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|  4.44k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb1_E18parse_scheme_startCsbUpIViwkCx3_5oxttl:
 1212|  96.2k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|  96.2k|        match self.input.front() {
 1214|    229|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|  90.5k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|  82.5k|            _ => self.parse_relative(),
 1217|       |        }
 1218|  96.2k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb1_E19remove_last_segmentCsbUpIViwkCx3_5oxttl:
 1514|  83.1k|    fn remove_last_segment(&mut self) {
 1515|  83.1k|        let last_slash_position = self.output.as_str()[self.output_positions.authority_end..]
 1516|  83.1k|            .rfind('/')
 1517|  83.1k|            .unwrap_or(0);
 1518|  83.1k|        self.output
 1519|  83.1k|            .truncate(last_slash_position + self.output_positions.authority_end)
 1520|  83.1k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb1_E20parse_relative_slashCsbUpIViwkCx3_5oxttl:
 1324|  60.2k|    fn parse_relative_slash(&mut self, base: &IriRef<&'a str>) -> Result<(), IriParseError> {
 1325|  60.2k|        if self.input.starts_with('/') {
 1326|  2.85k|            self.input.next();
 1327|  2.85k|            self.output.push_str(&base.iri[..base.positions.scheme_end]);
 1328|  2.85k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1329|  2.85k|            self.output.push('/');
 1330|  2.85k|            self.output.push('/');
 1331|  2.85k|            self.parse_authority()
 1332|       |        } else {
 1333|  57.4k|            self.output
 1334|  57.4k|                .push_str(&base.iri[..base.positions.authority_end]);
 1335|  57.4k|            self.output.push('/');
 1336|  57.4k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1337|  57.4k|            self.output_positions.authority_end = base.positions.authority_end;
 1338|  57.4k|            self.parse_path()
 1339|       |        }
 1340|  60.2k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb1_E23parse_path_or_authorityCsbUpIViwkCx3_5oxttl:
 1252|  2.82k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|  2.82k|        if self.input.starts_with('/') {
 1254|  2.54k|            self.input.next();
 1255|  2.54k|            self.output.push('/');
 1256|  2.54k|            self.parse_authority()
 1257|       |        } else {
 1258|    285|            self.output_positions.authority_end = self.output.len() - 1;
 1259|    285|            self.parse_path()
 1260|       |        }
 1261|  2.82k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb1_E27read_url_codepoint_or_echarCsbUpIViwkCx3_5oxttl:
 1523|   475k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|   475k|        if UNCHECKED || is_url_code_point(c) {
 1525|   475k|            self.output.push(c);
 1526|   475k|            Ok(())
 1527|      0|        } else if c == '%' {
 1528|      0|            self.read_echar()
 1529|       |        } else {
 1530|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|   475k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb1_E33read_url_query_codepoint_or_echarCsbUpIViwkCx3_5oxttl:
 1535|  56.8k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|  56.8k|        if UNCHECKED || is_url_query_code_point(c) {
 1537|  56.8k|            self.output.push(c);
 1538|  56.8k|            Ok(())
 1539|      0|        } else if c == '%' {
 1540|      0|            self.read_echar()
 1541|       |        } else {
 1542|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|  56.8k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtNtCs4msIGfPSjWU_5alloc6string6StringKb1_E5parseCsbUpIViwkCx3_5oxttl:
 1187|  96.2k|    fn parse(
 1188|  96.2k|        iri: &'a str,
 1189|  96.2k|        base: Option<IriRef<&'a str>>,
 1190|  96.2k|        output: &'a mut O,
 1191|  96.2k|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|  96.2k|        let mut parser = Self {
 1193|  96.2k|            iri,
 1194|  96.2k|            base,
 1195|  96.2k|            input: ParserInput {
 1196|  96.2k|                value: iri.chars(),
 1197|  96.2k|                position: 0,
 1198|  96.2k|            },
 1199|  96.2k|            output,
 1200|  96.2k|            output_positions: IriElementsPositions {
 1201|  96.2k|                scheme_end: 0,
 1202|  96.2k|                authority_end: 0,
 1203|  96.2k|                path_end: 0,
 1204|  96.2k|                query_end: 0,
 1205|  96.2k|            },
 1206|  96.2k|            input_scheme_end: 0,
 1207|  96.2k|        };
 1208|  96.2k|        parser.parse_scheme_start()?;
 1209|  95.0k|        Ok(parser.output_positions)
 1210|  96.2k|    }
_RNvMsp_Csjq9lBaiujPk_5oxiriINtB5_3IriNtNtCs4msIGfPSjWU_5alloc6string6StringE15parse_uncheckedCsbUpIViwkCx3_5oxttl:
  574|  4.19k|    pub fn parse_unchecked(iri: T) -> Result<Self, IriParseError> {
  575|  4.19k|        IriRef::parse_unchecked(iri)?.try_into()
  576|  4.19k|    }
_RNvMsp_Csjq9lBaiujPk_5oxiriINtB5_3IriNtNtCs4msIGfPSjWU_5alloc6string6StringE17resolve_uncheckedCsbUpIViwkCx3_5oxttl:
  605|  96.2k|    pub fn resolve_unchecked(&self, iri: &str) -> Result<Iri<String>, IriParseError> {
  606|  96.2k|        Ok(Iri(self.0.resolve_unchecked(iri)?))
  607|  96.2k|    }
_RNvMsp_Csjq9lBaiujPk_5oxiriINtB5_3IriNtNtCs4msIGfPSjWU_5alloc6string6StringE4pathCsbUpIViwkCx3_5oxttl:
  730|    581|    pub fn path(&self) -> &str {
  731|    581|        self.0.path()
  732|    581|    }
_RNvMsp_Csjq9lBaiujPk_5oxiriINtB5_3IriNtNtCs4msIGfPSjWU_5alloc6string6StringE7resolveCsbUpIViwkCx3_5oxttl:
  591|   193k|    pub fn resolve(&self, iri: &str) -> Result<Iri<String>, IriParseError> {
  592|   193k|        Ok(Iri(self.0.resolve(iri)?))
  593|   193k|    }
_RNvXsL_Csjq9lBaiujPk_5oxiriINtB5_3IriNtNtCs4msIGfPSjWU_5alloc6string6StringENtNtCsevdOxZso2fM_4core3fmt7Display3fmtCsbUpIViwkCx3_5oxttl:
  909|    667|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  910|    667|        self.0.fmt(f)
  911|    667|    }
_RNvXsg_Csjq9lBaiujPk_5oxiriINtB5_6IriRefNtNtCs4msIGfPSjWU_5alloc6string6StringENtNtCsevdOxZso2fM_4core3fmt7Display3fmtCsbUpIViwkCx3_5oxttl:
  423|    667|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  424|    667|        self.iri.fmt(f)
  425|    667|    }
_RNvCsjq9lBaiujPk_5oxiri17is_url_code_pointCsbUpIViwkCx3_5oxttl:
 1573|   677k|fn is_url_code_point(c: char) -> bool {
 1574|   677k|    matches!(c,
 1575|   136k|        'a'..='z'
 1576|   200k|        | 'A'..='Z'
 1577|   148k|        | '0'..='9'
 1578|       |        | '!'
 1579|       |        | '$'
 1580|       |        | '&'
 1581|       |        | '\''
 1582|       |        | '('
 1583|       |        | ')'
 1584|       |        | '*'
 1585|       |        | '+'
 1586|       |        | ','
 1587|       |        | '-'
 1588|       |        | '.'
 1589|       |        | '/'
 1590|       |        | ':'
 1591|       |        | ';'
 1592|       |        | '='
 1593|       |        | '?'
 1594|       |        | '@'
 1595|       |        | '_'
 1596|       |        | '~'
 1597|  8.89k|        | '\u{A0}'..='\u{D7FF}'
 1598|    986|        | '\u{F900}'..='\u{FDCF}'
 1599|    390|        | '\u{FDF0}'..='\u{FFEF}'
 1600|    390|        | '\u{10000}'..='\u{1FFFD}'
 1601|    390|        | '\u{20000}'..='\u{2FFFD}'
 1602|    362|        | '\u{30000}'..='\u{3FFFD}'
 1603|    362|        | '\u{40000}'..='\u{4FFFD}'
 1604|    168|        | '\u{50000}'..='\u{5FFFD}'
 1605|    168|        | '\u{60000}'..='\u{6FFFD}'
 1606|    168|        | '\u{70000}'..='\u{7FFFD}'
 1607|    168|        | '\u{80000}'..='\u{8FFFD}'
 1608|    168|        | '\u{90000}'..='\u{9FFFD}'
 1609|    168|        | '\u{A0000}'..='\u{AFFFD}'
 1610|      0|        | '\u{B0000}'..='\u{BFFFD}'
 1611|      0|        | '\u{C0000}'..='\u{CFFFD}'
 1612|      0|        | '\u{D0000}'..='\u{DFFFD}'
 1613|      0|        | '\u{E1000}'..='\u{EFFFD}'
 1614|       |    )
 1615|   677k|}
_RNvCsjq9lBaiujPk_5oxiri23is_url_query_code_pointCsbUpIViwkCx3_5oxttl:
 1618|  80.4k|fn is_url_query_code_point(c: char) -> bool {
 1619|  80.4k|    is_url_code_point(c)
 1620|  4.09k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1621|  80.4k|}
_RNvMs10_Csjq9lBaiujPk_5oxiriNtB6_11ParserInput11starts_withCsbUpIViwkCx3_5oxttl:
 1169|   231k|    fn starts_with(&self, c: char) -> bool {
 1170|   231k|        self.value.as_str().starts_with(c)
 1171|   231k|    }
_RNvMs10_Csjq9lBaiujPk_5oxiriNtB6_11ParserInput4nextCsbUpIViwkCx3_5oxttl:
 1154|  2.17M|    fn next(&mut self) -> Option<char> {
 1155|  2.17M|        if let Some(head) = self.value.next() {
 1156|  1.91M|            self.position += head.len_utf8();
 1157|  1.91M|            Some(head)
 1158|       |        } else {
 1159|   260k|            None
 1160|       |        }
 1161|  2.17M|    }
_RNvMs10_Csjq9lBaiujPk_5oxiriNtB6_11ParserInput5frontCsbUpIViwkCx3_5oxttl:
 1164|   566k|    fn front(&self) -> Option<char> {
 1165|   566k|        self.value.clone().next()
 1166|   566k|    }
_RNvXs1b_Csjq9lBaiujPk_5oxiriNtB6_16VoidOutputBufferNtNtCsevdOxZso2fM_4core7default7Default7defaultCsbUpIViwkCx3_5oxttl:
 1078|  4.19k|#[derive(Default)]
_RNvXsY_Csjq9lBaiujPk_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCsbUpIViwkCx3_5oxttl:
 1105|  16.7k|    fn len(&self) -> usize {
 1106|  16.7k|        self.len
 1107|  16.7k|    }
_RNvXsY_Csjq9lBaiujPk_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsbUpIViwkCx3_5oxttl:
 1085|   156k|    fn push(&mut self, c: char) {
 1086|   156k|        self.len += c.len_utf8();
 1087|   156k|    }
_RNvXsY_Csjq9lBaiujPk_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCsbUpIViwkCx3_5oxttl:
 1110|  7.97k|    fn as_str(&self) -> &str {
 1111|  7.97k|        ""
 1112|  7.97k|    }
_RNvXsY_Csjq9lBaiujPk_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCsbUpIViwkCx3_5oxttl:
 1100|  3.45k|    fn truncate(&mut self, new_len: usize) {
 1101|  3.45k|        self.len = new_len;
 1102|  3.45k|    }
_RNCNvMs11_Csjq9lBaiujPk_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0CsfYjWOBsMZ7D_5oxrdf:
 1550|  1.14k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_Csjq9lBaiujPk_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0CsfYjWOBsMZ7D_5oxrdf:
 1551|  1.14k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMCsjq9lBaiujPk_5oxiriINtB2_6IriRefNtNtCs4msIGfPSjWU_5alloc6string6StringE10into_innerCsfYjWOBsMZ7D_5oxrdf:
  191|   375k|    pub fn into_inner(self) -> T {
  192|   375k|        self.iri
  193|   375k|    }
_RNvMCsjq9lBaiujPk_5oxiriINtB2_6IriRefNtNtCs4msIGfPSjWU_5alloc6string6StringE11is_absoluteCsfYjWOBsMZ7D_5oxrdf:
  205|   138k|    pub fn is_absolute(&self) -> bool {
  206|   138k|        self.positions.scheme_end != 0
  207|   138k|    }
_RNvMCsjq9lBaiujPk_5oxiriINtB2_6IriRefNtNtCs4msIGfPSjWU_5alloc6string6StringE5parseCsfYjWOBsMZ7D_5oxrdf:
   58|   134k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|   134k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|   134k|        Ok(Self { iri, positions })
   61|   134k|    }
_RNvMCsjq9lBaiujPk_5oxiriINtB2_6IriRefReE11is_absoluteCsfYjWOBsMZ7D_5oxrdf:
  205|     86|    pub fn is_absolute(&self) -> bool {
  206|     86|        self.positions.scheme_end != 0
  207|     86|    }
_RNvMCsjq9lBaiujPk_5oxiriINtB2_6IriRefReE5parseCsfYjWOBsMZ7D_5oxrdf:
   58|     86|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|     86|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|     86|        Ok(Self { iri, positions })
   61|     86|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCsfYjWOBsMZ7D_5oxrdf:
 1366|   131k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|   131k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|      0|            let start_position = self.input.position;
 1370|      0|            while let Some(c) = self.input.next() {
 1371|      0|                self.output.push(c);
 1372|      0|                if c == ']' {
 1373|      0|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|      0|                    if !UNCHECKED {
 1375|      0|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|      0|                        }
 1378|      0|                    }
 1379|       |
 1380|      0|                    let c = self.input.next();
 1381|      0|                    return match c {
 1382|       |                        Some(':') => {
 1383|      0|                            self.output.push(':');
 1384|      0|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|      0|                            self.output_positions.authority_end = self.output.len();
 1388|      0|                            self.parse_path_start(c)
 1389|       |                        }
 1390|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|      0|                }
 1393|       |            }
 1394|      0|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|  1.48M|            loop {
 1398|  1.48M|                let c = self.input.next();
 1399|  1.48M|                match c {
 1400|       |                    Some(':') => {
 1401|    278|                        self.output.push(':');
 1402|    278|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|   131k|                        self.output_positions.authority_end = self.output.len();
 1406|   131k|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|  1.35M|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|   131k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCsfYjWOBsMZ7D_5oxrdf:
 1457|   133k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|  2.02M|        loop {
 1459|  2.02M|            let c = self.input.next();
 1460|  2.02M|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|   294k|                    if self.output.as_str().ends_with("/..") {
 1463|      0|                        self.remove_last_segment();
 1464|      0|                        self.remove_last_segment();
 1465|      0|                        self.output.push('/');
 1466|   294k|                    } else if self.output.as_str().ends_with("/.") {
 1467|      0|                        self.remove_last_segment();
 1468|      0|                        self.output.push('/');
 1469|   294k|                    } else if c == Some('/') {
 1470|   161k|                        self.output.push('/');
 1471|   161k|                    }
 1472|       |
 1473|   294k|                    if c == Some('?') {
 1474|  1.09k|                        self.output_positions.path_end = self.output.len();
 1475|  1.09k|                        self.output.push('?');
 1476|  1.09k|                        return self.parse_query();
 1477|   293k|                    } else if c == Some('#') {
 1478|  76.0k|                        self.output_positions.path_end = self.output.len();
 1479|  76.0k|                        self.output_positions.query_end = self.output.len();
 1480|  76.0k|                        self.output.push('#');
 1481|  76.0k|                        return self.parse_fragment();
 1482|   217k|                    } else if c.is_none() {
 1483|  56.3k|                        self.output_positions.path_end = self.output.len();
 1484|  56.3k|                        self.output_positions.query_end = self.output.len();
 1485|  56.3k|                        return Ok(());
 1486|   161k|                    }
 1487|       |                }
 1488|  1.73M|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|   133k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCsfYjWOBsMZ7D_5oxrdf:
 1414|    278|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|    505|        loop {
 1416|    505|            let c = self.input.next();
 1417|    466|            match c {
 1418|    466|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|    278|                    self.output_positions.authority_end = self.output.len();
 1421|    278|                    return self.parse_path_start(c);
 1422|       |                }
 1423|      0|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|    278|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCsfYjWOBsMZ7D_5oxrdf:
 1547|  1.14k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1548|  1.14k|        let c1 = self.input.next();
 1549|  1.14k|        let c2 = self.input.next();
 1550|  1.14k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1551|  1.14k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1552|       |        {
 1553|  1.14k|            self.output.push('%');
 1554|  1.14k|            self.output.push(c1.unwrap());
 1555|  1.14k|            self.output.push(c2.unwrap());
 1556|  1.14k|            Ok(())
 1557|       |        } else {
 1558|      0|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1559|      0|                Some('%'),
 1560|      0|                c1,
 1561|      0|                c2,
 1562|      0|            ]))
 1563|       |        }
 1564|  1.14k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCsfYjWOBsMZ7D_5oxrdf:
 1493|  1.17k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|  21.1k|        while let Some(c) = self.input.next() {
 1495|  19.9k|            if c == '#' {
 1496|     16|                self.output_positions.query_end = self.output.len();
 1497|     16|                self.output.push('#');
 1498|     16|                return self.parse_fragment();
 1499|       |            } else {
 1500|  19.9k|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|  1.15k|        self.output_positions.query_end = self.output.len();
 1504|  1.15k|        Ok(())
 1505|  1.17k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCsfYjWOBsMZ7D_5oxrdf:
 1220|   134k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|   679k|        loop {
 1222|   679k|            let c = self.input.next();
 1223|   679k|            match c {
 1224|   679k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|   545k|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|   134k|                    self.output.push(':');
 1229|   134k|                    self.output_positions.scheme_end = self.output.len();
 1230|   134k|                    self.input_scheme_end = self.input.position;
 1231|   134k|                    return if self.input.starts_with('/') {
 1232|   132k|                        self.input.next();
 1233|   132k|                        self.output.push('/');
 1234|   132k|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|  1.51k|                        self.output_positions.authority_end = self.output.len();
 1237|  1.51k|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|      0|                    self.input = ParserInput {
 1242|      0|                        value: self.iri.chars(),
 1243|      0|                        position: 0,
 1244|      0|                    }; // reset
 1245|      0|                    self.output.clear();
 1246|      0|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|   134k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCsfYjWOBsMZ7D_5oxrdf:
 1507|  76.1k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|   435k|        while let Some(c) = self.input.next() {
 1509|   359k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|  76.1k|        Ok(())
 1512|  76.1k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCsfYjWOBsMZ7D_5oxrdf:
 1342|   131k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|  1.48M|        loop {
 1345|  1.48M|            let c = self.input.next();
 1346|  1.48M|            match c {
 1347|       |                Some('@') => {
 1348|     65|                    self.output.push('@');
 1349|     65|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|   131k|                    self.input = ParserInput {
 1353|   131k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|   131k|                        position: self.input_scheme_end + 2,
 1355|   131k|                    };
 1356|   131k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|   131k|                    return self.parse_host();
 1358|       |                }
 1359|  1.35M|                Some(c) => {
 1360|  1.35M|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|   131k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCsfYjWOBsMZ7D_5oxrdf:
 1428|   131k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|   131k|        match c {
 1430|       |            None => {
 1431|    705|                self.output_positions.path_end = self.output.len();
 1432|    705|                self.output_positions.query_end = self.output.len();
 1433|    705|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|     81|                self.output_positions.path_end = self.output.len();
 1437|     81|                self.output.push('?');
 1438|     81|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|     78|                self.output_positions.path_end = self.output.len();
 1442|     78|                self.output_positions.query_end = self.output.len();
 1443|     78|                self.output.push('#');
 1444|     78|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|   130k|                self.output.push('/');
 1448|   130k|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|   131k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCsfYjWOBsMZ7D_5oxrdf:
 1212|   134k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|   134k|        match self.input.front() {
 1214|      0|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|   134k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|      0|            _ => self.parse_relative(),
 1217|       |        }
 1218|   134k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCsfYjWOBsMZ7D_5oxrdf:
 1252|   132k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|   132k|        if self.input.starts_with('/') {
 1254|   131k|            self.input.next();
 1255|   131k|            self.output.push('/');
 1256|   131k|            self.parse_authority()
 1257|       |        } else {
 1258|    989|            self.output_positions.authority_end = self.output.len() - 1;
 1259|    989|            self.parse_path()
 1260|       |        }
 1261|   132k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarCsfYjWOBsMZ7D_5oxrdf:
 1523|  4.79M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|  4.79M|        if UNCHECKED || is_url_code_point(c) {
 1525|  4.79M|            self.output.push(c);
 1526|  4.79M|            Ok(())
 1527|    664|        } else if c == '%' {
 1528|    664|            self.read_echar()
 1529|       |        } else {
 1530|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|  4.79M|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E33read_url_query_codepoint_or_echarCsfYjWOBsMZ7D_5oxrdf:
 1535|  19.9k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|  19.9k|        if UNCHECKED || is_url_query_code_point(c) {
 1537|  19.4k|            self.output.push(c);
 1538|  19.4k|            Ok(())
 1539|    481|        } else if c == '%' {
 1540|    481|            self.read_echar()
 1541|       |        } else {
 1542|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|  19.9k|    }
_RNvMs11_Csjq9lBaiujPk_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCsfYjWOBsMZ7D_5oxrdf:
 1187|   134k|    fn parse(
 1188|   134k|        iri: &'a str,
 1189|   134k|        base: Option<IriRef<&'a str>>,
 1190|   134k|        output: &'a mut O,
 1191|   134k|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|   134k|        let mut parser = Self {
 1193|   134k|            iri,
 1194|   134k|            base,
 1195|   134k|            input: ParserInput {
 1196|   134k|                value: iri.chars(),
 1197|   134k|                position: 0,
 1198|   134k|            },
 1199|   134k|            output,
 1200|   134k|            output_positions: IriElementsPositions {
 1201|   134k|                scheme_end: 0,
 1202|   134k|                authority_end: 0,
 1203|   134k|                path_end: 0,
 1204|   134k|                query_end: 0,
 1205|   134k|            },
 1206|   134k|            input_scheme_end: 0,
 1207|   134k|        };
 1208|   134k|        parser.parse_scheme_start()?;
 1209|   134k|        Ok(parser.output_positions)
 1210|   134k|    }
_RNvMsp_Csjq9lBaiujPk_5oxiriINtB5_3IriNtNtCs4msIGfPSjWU_5alloc6string6StringE10into_innerCsfYjWOBsMZ7D_5oxrdf:
  678|   375k|    pub fn into_inner(self) -> T {
  679|   375k|        self.0.into_inner()
  680|   375k|    }
_RNvMsp_Csjq9lBaiujPk_5oxiriINtB5_3IriNtNtCs4msIGfPSjWU_5alloc6string6StringE5parseCsfYjWOBsMZ7D_5oxrdf:
  562|   134k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  563|   134k|        IriRef::parse(iri)?.try_into()
  564|   134k|    }
_RNvMsp_Csjq9lBaiujPk_5oxiriINtB5_3IriReE5parseCsfYjWOBsMZ7D_5oxrdf:
  562|     86|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  563|     86|        IriRef::parse(iri)?.try_into()
  564|     86|    }
_RNvXsV_Csjq9lBaiujPk_5oxiriINtB5_3IriNtNtCs4msIGfPSjWU_5alloc6string6StringEINtNtCsevdOxZso2fM_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsfYjWOBsMZ7D_5oxrdf:
  981|   138k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  982|   138k|        if iri.is_absolute() {
  983|   138k|            Ok(Self(iri))
  984|       |        } else {
  985|      0|            Err(IriParseError {
  986|      0|                kind: IriParseErrorKind::NoScheme,
  987|      0|            })
  988|       |        }
  989|   138k|    }
_RNvXsV_Csjq9lBaiujPk_5oxiriINtB5_3IriReEINtNtCsevdOxZso2fM_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsfYjWOBsMZ7D_5oxrdf:
  981|     86|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  982|     86|        if iri.is_absolute() {
  983|     86|            Ok(Self(iri))
  984|       |        } else {
  985|      0|            Err(IriParseError {
  986|      0|                kind: IriParseErrorKind::NoScheme,
  987|      0|            })
  988|       |        }
  989|     86|    }
_RNvCsjq9lBaiujPk_5oxiri17is_url_code_pointCsfYjWOBsMZ7D_5oxrdf:
 1573|  4.81M|fn is_url_code_point(c: char) -> bool {
 1574|  4.81M|    matches!(c,
 1575|  3.32M|        'a'..='z'
 1576|  44.2k|        | 'A'..='Z'
 1577|   800k|        | '0'..='9'
 1578|       |        | '!'
 1579|       |        | '$'
 1580|       |        | '&'
 1581|       |        | '\''
 1582|       |        | '('
 1583|       |        | ')'
 1584|       |        | '*'
 1585|       |        | '+'
 1586|       |        | ','
 1587|       |        | '-'
 1588|       |        | '.'
 1589|       |        | '/'
 1590|       |        | ':'
 1591|       |        | ';'
 1592|       |        | '='
 1593|       |        | '?'
 1594|       |        | '@'
 1595|       |        | '_'
 1596|       |        | '~'
 1597|  2.07k|        | '\u{A0}'..='\u{D7FF}'
 1598|    284|        | '\u{F900}'..='\u{FDCF}'
 1599|     48|        | '\u{FDF0}'..='\u{FFEF}'
 1600|     48|        | '\u{10000}'..='\u{1FFFD}'
 1601|     48|        | '\u{20000}'..='\u{2FFFD}'
 1602|     48|        | '\u{30000}'..='\u{3FFFD}'
 1603|     48|        | '\u{40000}'..='\u{4FFFD}'
 1604|     48|        | '\u{50000}'..='\u{5FFFD}'
 1605|     48|        | '\u{60000}'..='\u{6FFFD}'
 1606|     48|        | '\u{70000}'..='\u{7FFFD}'
 1607|     48|        | '\u{80000}'..='\u{8FFFD}'
 1608|     48|        | '\u{90000}'..='\u{9FFFD}'
 1609|     48|        | '\u{A0000}'..='\u{AFFFD}'
 1610|      0|        | '\u{B0000}'..='\u{BFFFD}'
 1611|      0|        | '\u{C0000}'..='\u{CFFFD}'
 1612|      0|        | '\u{D0000}'..='\u{DFFFD}'
 1613|      0|        | '\u{E1000}'..='\u{EFFFD}'
 1614|       |    )
 1615|  4.81M|}
_RNvCsjq9lBaiujPk_5oxiri23is_url_query_code_pointCsfYjWOBsMZ7D_5oxrdf:
 1618|  19.9k|fn is_url_query_code_point(c: char) -> bool {
 1619|  19.9k|    is_url_code_point(c)
 1620|    743|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1621|  19.9k|}
_RNvMs10_Csjq9lBaiujPk_5oxiriNtB6_11ParserInput11starts_withCsfYjWOBsMZ7D_5oxrdf:
 1169|   399k|    fn starts_with(&self, c: char) -> bool {
 1170|   399k|        self.value.as_str().starts_with(c)
 1171|   399k|    }
_RNvMs10_Csjq9lBaiujPk_5oxiriNtB6_11ParserInput4nextCsfYjWOBsMZ7D_5oxrdf:
 1154|  6.40M|    fn next(&mut self) -> Option<char> {
 1155|  6.40M|        if let Some(head) = self.value.next() {
 1156|  6.26M|            self.position += head.len_utf8();
 1157|  6.26M|            Some(head)
 1158|       |        } else {
 1159|   135k|            None
 1160|       |        }
 1161|  6.40M|    }
_RNvMs10_Csjq9lBaiujPk_5oxiriNtB6_11ParserInput5frontCsfYjWOBsMZ7D_5oxrdf:
 1164|   134k|    fn front(&self) -> Option<char> {
 1165|   134k|        self.value.clone().next()
 1166|   134k|    }
_RNvXs1b_Csjq9lBaiujPk_5oxiriNtB6_16VoidOutputBufferNtNtCsevdOxZso2fM_4core7default7Default7defaultCsfYjWOBsMZ7D_5oxrdf:
 1078|   134k|#[derive(Default)]
_RNvXsY_Csjq9lBaiujPk_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCsfYjWOBsMZ7D_5oxrdf:
 1105|   537k|    fn len(&self) -> usize {
 1106|   537k|        self.len
 1107|   537k|    }
_RNvXsY_Csjq9lBaiujPk_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsfYjWOBsMZ7D_5oxrdf:
 1085|  6.13M|    fn push(&mut self, c: char) {
 1086|  6.13M|        self.len += c.len_utf8();
 1087|  6.13M|    }
_RNvXsY_Csjq9lBaiujPk_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCsfYjWOBsMZ7D_5oxrdf:
 1110|   589k|    fn as_str(&self) -> &str {
 1111|   589k|        ""
 1112|   589k|    }
_RNvXsY_Csjq9lBaiujPk_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCsfYjWOBsMZ7D_5oxrdf:
 1100|   131k|    fn truncate(&mut self, new_len: usize) {
 1101|   131k|        self.len = new_len;
 1102|   131k|    }
_RNvXsW_Csjq9lBaiujPk_5oxiriNtB5_13IriParseErrorNtNtCsevdOxZso2fM_4core3fmt7Display3fmt:
 1016|  30.5k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1017|  30.5k|        match &self.kind {
 1018|    687|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
 1019|    969|            IriParseErrorKind::InvalidHostCharacter(c) => {
 1020|    969|                write!(f, "Invalid character '{c}' in host")
 1021|       |            }
 1022|    508|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({e})"),
 1023|    768|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{c}'"),
 1024|  25.7k|            IriParseErrorKind::InvalidIriCodePoint(c) => {
 1025|  25.7k|                write!(f, "Invalid IRI code point '{c}'")
 1026|       |            }
 1027|  1.78k|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
 1028|  1.78k|                f,
 1029|  1.78k|                "Invalid IRI percent encoding '{}'",
 1030|  1.78k|                cs.iter().flatten().cloned().collect::<String>()
 1031|  1.78k|            ),
 1032|       |        }
 1033|  30.5k|    }

_RNvMNtCsasLfkvg7jG3_10ppv_lite864softINtB2_2x2INtNtNtNtB4_6x86_644sse24avx212u32x4x2_avx2NtBP_4NoNIENtBN_2G0E3newCskKrKnbClT9J_11rand_chacha:
   13|  3.91M|    pub fn new(xs: [W; 2]) -> Self {
   14|  3.91M|        x2(xs, PhantomData)
   15|  3.91M|    }
_RNvXsG_NtCsasLfkvg7jG3_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCsevdOxZso2fM_4core3ops3bit6BitXor6bitxorCskKrKnbClT9J_11rand_chacha:
   22|  1.37M|            fn $fn(self, rhs: Self) -> Self::Output {
   23|  1.37M|                x2::new([self.0[0].$fn(rhs.0[0]), self.0[1].$fn(rhs.0[1])])
   24|  1.37M|            }
_RNvXsM_NtCsasLfkvg7jG3_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCsevdOxZso2fM_4core3ops5arith9AddAssign10add_assignCskKrKnbClT9J_11rand_chacha:
   32|  1.37M|            fn $fn_assign(&mut self, rhs: Self) {
   33|  1.37M|                (self.0[0]).$fn_assign(rhs.0[0]);
   34|  1.37M|                (self.0[1]).$fn_assign(rhs.0[1]);
   35|  1.37M|            }
_RNvXs_NtCsasLfkvg7jG3_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right16CskKrKnbClT9J_11rand_chacha:
   42|   343k|        fn $fn(self) -> Self {
   43|   343k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   343k|        }
_RNvXs_NtCsasLfkvg7jG3_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right20CskKrKnbClT9J_11rand_chacha:
   42|   343k|        fn $fn(self) -> Self {
   43|   343k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   343k|        }
_RNvXs_NtCsasLfkvg7jG3_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right24CskKrKnbClT9J_11rand_chacha:
   42|   343k|        fn $fn(self) -> Self {
   43|   343k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   343k|        }
_RNvXs_NtCsasLfkvg7jG3_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right25CskKrKnbClT9J_11rand_chacha:
   42|   343k|        fn $fn(self) -> Self {
   43|   343k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   343k|        }
_RNvXsg_NtCsasLfkvg7jG3_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words1230CskKrKnbClT9J_11rand_chacha:
  208|   343k|    fn shuffle_lane_words1230(self) -> Self {
  209|   343k|        Self::new([
  210|   343k|            self.0[0].shuffle_lane_words1230(),
  211|   343k|            self.0[1].shuffle_lane_words1230(),
  212|   343k|        ])
  213|   343k|    }
_RNvXsg_NtCsasLfkvg7jG3_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words2301CskKrKnbClT9J_11rand_chacha:
  201|   343k|    fn shuffle_lane_words2301(self) -> Self {
  202|   343k|        Self::new([
  203|   343k|            self.0[0].shuffle_lane_words2301(),
  204|   343k|            self.0[1].shuffle_lane_words2301(),
  205|   343k|        ])
  206|   343k|    }
_RNvXsg_NtCsasLfkvg7jG3_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words3012CskKrKnbClT9J_11rand_chacha:
  215|   343k|    fn shuffle_lane_words3012(self) -> Self {
  216|   343k|        Self::new([
  217|   343k|            self.0[0].shuffle_lane_words3012(),
  218|   343k|            self.0[1].shuffle_lane_words3012(),
  219|   343k|        ])
  220|   343k|    }

_RINvYINtNtCsasLfkvg7jG3_10ppv_lite866x86_6410SseMachineNtB6_5YesS3NtB6_5YesS4NtB6_4NoNIENtNtB8_5types7Machine7read_leINtNtB6_4sse210u32x4_sse2BR_B12_B1d_EECskKrKnbClT9J_11rand_chacha:
  259|    224|    fn read_le<V>(self, input: &[u8]) -> V
  260|    224|    where
  261|    224|        V: StoreBytes,
  262|    224|    {
  263|    224|        unsafe { V::unsafe_read_le(input) }
  264|    224|    }
_RINvYINtNtCsasLfkvg7jG3_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine3vecINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EAmj4_ECskKrKnbClT9J_11rand_chacha:
  251|  28.6k|    fn vec<V, A>(self, a: A) -> V
  252|  28.6k|    where
  253|  28.6k|        V: MultiLane<A>,
  254|  28.6k|    {
  255|  28.6k|        V::from_lanes(a)
  256|  28.6k|    }
_RINvYINtNtCsasLfkvg7jG3_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec128_storageINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EECskKrKnbClT9J_11rand_chacha:
  246|   257k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|   257k|        unsafe { V::unpack(s) }
  248|   257k|    }
_RINvYINtNtCsasLfkvg7jG3_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec512_storageINtNtB8_4soft2x2INtNtNtB6_4sse24avx212u32x4x2_avx2BS_ENtB2b_2G0EECskKrKnbClT9J_11rand_chacha:
  246|  28.6k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|  28.6k|        unsafe { V::unpack(s) }
  248|  28.6k|    }

_RNvXNtCsasLfkvg7jG3_10ppv_lite866x86_64INtB2_10SseMachineNtB2_5YesS3NtB2_5YesS4NtB2_4NoNIENtNtB4_5types7Machine8instanceCskKrKnbClT9J_11rand_chacha:
   64|    112|    unsafe fn instance() -> Self {
   65|    112|        SseMachine(PhantomData)
   66|    112|    }
_RNvXs_NtCsasLfkvg7jG3_10ppv_lite866x86_64INtB4_11Avx2MachineNtB4_4NoNIENtNtB6_5types7Machine8instanceCskKrKnbClT9J_11rand_chacha:
   92|  28.6k|    unsafe fn instance() -> Self {
   93|  28.6k|        Avx2Machine(PhantomData)
   94|  28.6k|    }
_RNvNtCskKrKnbClT9J_11rand_chacha4guts11refill_wide:
  250|  28.6k|        $($pub$(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  251|  28.6k|            #[inline(always)]
  252|  28.6k|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  253|  28.6k|            use std::arch::x86_64::*;
  254|  28.6k|            #[target_feature(enable = "avx2")]
  255|  28.6k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  28.6k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  28.6k|                _mm256_zeroupper();
  258|  28.6k|                ret
  259|  28.6k|            }
  260|  28.6k|            #[target_feature(enable = "avx")]
  261|  28.6k|            #[target_feature(enable = "sse4.1")]
  262|  28.6k|            #[target_feature(enable = "ssse3")]
  263|  28.6k|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  264|  28.6k|                let ret = fn_impl($crate::x86_64::AVX::instance(), $($arg),*);
  265|  28.6k|                _mm256_zeroupper();
  266|  28.6k|                ret
  267|  28.6k|            }
  268|  28.6k|            #[target_feature(enable = "sse4.1")]
  269|  28.6k|            #[target_feature(enable = "ssse3")]
  270|  28.6k|            unsafe fn impl_sse41($($arg: $argty),*) -> $ret {
  271|  28.6k|                fn_impl($crate::x86_64::SSE41::instance(), $($arg),*)
  272|  28.6k|            }
  273|  28.6k|            #[target_feature(enable = "ssse3")]
  274|  28.6k|            unsafe fn impl_ssse3($($arg: $argty),*) -> $ret {
  275|  28.6k|                fn_impl($crate::x86_64::SSSE3::instance(), $($arg),*)
  276|  28.6k|            }
  277|  28.6k|            #[target_feature(enable = "sse2")]
  278|  28.6k|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  279|  28.6k|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  280|  28.6k|            }
  281|  28.6k|            unsafe {
  282|  28.6k|                if is_x86_feature_detected!("avx2") {
  283|  28.6k|                    impl_avx2($($arg),*)
  284|      0|                } else if is_x86_feature_detected!("avx") {
  285|      0|                    impl_avx($($arg),*)
  286|      0|                } else if is_x86_feature_detected!("sse4.1") {
  287|      0|                    impl_sse41($($arg),*)
  288|      0|                } else if is_x86_feature_detected!("ssse3") {
  289|      0|                    impl_ssse3($($arg),*)
  290|      0|                } else if is_x86_feature_detected!("sse2") {
  291|      0|                    impl_sse2($($arg),*)
  292|       |                } else {
  293|      0|                    unimplemented!()
  294|       |                }
  295|       |            }
  296|       |        }
_RNvNvNtCskKrKnbClT9J_11rand_chacha4guts11refill_wide9impl_avx2:
  255|  28.6k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  28.6k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  28.6k|                _mm256_zeroupper();
  258|  28.6k|                ret
  259|  28.6k|            }
_RNvNtCskKrKnbClT9J_11rand_chacha4guts11init_chacha:
  333|    112|        $($pub $(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  334|    112|            #[inline(always)]
  335|    112|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  336|    112|            use std::arch::x86_64::*;
  337|    112|            #[target_feature(enable = "avx")]
  338|    112|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|    112|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|    112|            }
  341|    112|            #[target_feature(enable = "sse2")]
  342|    112|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  343|    112|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  344|    112|            }
  345|    112|            unsafe {
  346|    112|                if is_x86_feature_detected!("avx") {
  347|    112|                    impl_avx($($arg),*)
  348|      0|                } else if is_x86_feature_detected!("sse2") {
  349|      0|                    impl_sse2($($arg),*)
  350|       |                } else {
  351|      0|                    unimplemented!()
  352|       |                }
  353|       |            }
  354|       |        }
_RNvNvNtCskKrKnbClT9J_11rand_chacha4guts11init_chacha8impl_avx:
  338|    112|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|    112|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|    112|            }
_RNvXs2_NtCsasLfkvg7jG3_10ppv_lite866x86_64NtB5_14vec128_storageINtNtCsevdOxZso2fM_4core7convert4FromAmj4_E4from:
  130|    112|    fn from(u32x4: [u32; 4]) -> Self {
  131|    112|        vec128_storage { u32x4 }
  132|    112|    }

_RNvMNtNtNtCsasLfkvg7jG3_10ppv_lite866x86_644sse24avx2INtB2_12u32x4x2_avx2NtB6_4NoNIE3newCskKrKnbClT9J_11rand_chacha:
 1394|  10.5M|        fn new(x: __m256i) -> Self {
 1395|  10.5M|            Self { x, ni: PhantomData }
 1396|  10.5M|        }
_RNvMsZ_NtNtCsasLfkvg7jG3_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIE3newCskKrKnbClT9J_11rand_chacha:
   64|  1.60M|            fn new(x: __m128i) -> Self {
   65|  1.60M|                $vec {
   66|  1.60M|                    x,
   67|  1.60M|                    s3: PhantomData,
   68|  1.60M|                    s4: PhantomData,
   69|  1.60M|                    ni: PhantomData,
   70|  1.60M|                }
   71|  1.60M|            }
_RNvXs0_NtNtNtCsasLfkvg7jG3_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types5StoreNtB9_14vec256_storageE6unpackCskKrKnbClT9J_11rand_chacha:
 1402|  57.2k|        unsafe fn unpack(p: vec256_storage) -> Self {
 1403|  57.2k|            Self::new(p.avx)
 1404|  57.2k|        }
_RNvXs10_NtNtCsasLfkvg7jG3_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes14unsafe_read_leCskKrKnbClT9J_11rand_chacha:
   79|    224|            unsafe fn unsafe_read_le(input: &[u8]) -> Self {
   80|    224|                assert_eq!(input.len(), 16);
   81|    224|                Self::new(_mm_loadu_si128(input.as_ptr() as *const _))
   82|    224|            }
_RNvXs10_NtNtCsasLfkvg7jG3_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes8write_leCskKrKnbClT9J_11rand_chacha:
   89|   457k|            fn write_le(self, out: &mut [u8]) {
   90|   457k|                assert_eq!(out.len(), 16);
   91|   457k|                unsafe { _mm_storeu_si128(out.as_mut_ptr() as *mut _, self.x) }
   92|   457k|            }
_RNvXs1R_NtNtCsasLfkvg7jG3_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtNtCsevdOxZso2fM_4core3ops5arith3Add3addCskKrKnbClT9J_11rand_chacha:
   18|   457k|            fn $fn(self, rhs: Self) -> Self::Output {
   19|   457k|                Self::new(unsafe { $impl_fn(self.x, rhs.x) })
   20|   457k|            }
_RNvXs2_NtNtNtCsasLfkvg7jG3_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E10from_lanesCskKrKnbClT9J_11rand_chacha:
 1439|   228k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 2]) -> Self {
 1440|   228k|            Self::new(unsafe { _mm256_setr_m128i(x[0].x, x[1].x) })
 1441|   228k|        }
_RNvXs2_NtNtNtCsasLfkvg7jG3_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E8to_lanesCskKrKnbClT9J_11rand_chacha:
 1430|   228k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 2] {
 1431|   228k|            unsafe {
 1432|   228k|                [
 1433|   228k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 0)),
 1434|   228k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 1)),
 1435|   228k|                ]
 1436|   228k|            }
 1437|   228k|        }
_RNvXs6_NtNtCsasLfkvg7jG3_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E10from_lanesCskKrKnbClT9J_11rand_chacha:
  331|  28.6k|    fn from_lanes(xs: [u32; 4]) -> Self {
  332|  28.6k|        unsafe {
  333|  28.6k|            let mut x = _mm_cvtsi64_si128((xs[0] as u64 | ((xs[1] as u64) << 32)) as i64);
  334|  28.6k|            x = _mm_insert_epi64(x, (xs[2] as u64 | ((xs[3] as u64) << 32)) as i64, 1);
  335|  28.6k|            Self::new(x)
  336|  28.6k|        }
  337|  28.6k|    }
_RNvXs6_NtNtCsasLfkvg7jG3_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E8to_lanesCskKrKnbClT9J_11rand_chacha:
  323|   114k|    fn to_lanes(self) -> [u32; 4] {
  324|   114k|        unsafe {
  325|   114k|            let x = _mm_cvtsi128_si64(self.x) as u64;
  326|   114k|            let y = _mm_extract_epi64(self.x, 1) as u64;
  327|   114k|            [x as u32, (x >> 32) as u32, y as u32, (y >> 32) as u32]
  328|   114k|        }
  329|   114k|    }
_RNvXs6_NtNtNtCsasLfkvg7jG3_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right16CskKrKnbClT9J_11rand_chacha:
 1470|   686k|            fn $name(self) -> Self {
 1471|   686k|                Self::new(unsafe {
 1472|   686k|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|   686k|                })
 1474|   686k|            }
_RNvXs6_NtNtNtCsasLfkvg7jG3_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right20CskKrKnbClT9J_11rand_chacha:
 1480|   686k|            fn $name(self) -> Self {
 1481|   686k|                Self::new(unsafe {
 1482|   686k|                    _mm256_or_si256(
 1483|   686k|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|   686k|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|   686k|                    )
 1486|   686k|                })
 1487|   686k|            }
_RNvXs6_NtNtNtCsasLfkvg7jG3_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right24CskKrKnbClT9J_11rand_chacha:
 1470|   686k|            fn $name(self) -> Self {
 1471|   686k|                Self::new(unsafe {
 1472|   686k|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|   686k|                })
 1474|   686k|            }
_RNvXs6_NtNtNtCsasLfkvg7jG3_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right25CskKrKnbClT9J_11rand_chacha:
 1480|   686k|            fn $name(self) -> Self {
 1481|   686k|                Self::new(unsafe {
 1482|   686k|                    _mm256_or_si256(
 1483|   686k|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|   686k|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|   686k|                    )
 1486|   686k|                })
 1487|   686k|            }
_RNvXsX_NtNtCsasLfkvg7jG3_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types5StoreNtB7_14vec128_storageE6unpackCskKrKnbClT9J_11rand_chacha:
   52|   257k|            unsafe fn unpack(x: vec128_storage) -> Self {
   53|   257k|                Self::new(x.sse2)
   54|   257k|            }
_RNvXsc_NtNtNtCsasLfkvg7jG3_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words1230CskKrKnbClT9J_11rand_chacha:
 1582|   686k|        fn shuffle_lane_words1230(self) -> Self {
 1583|   686k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b1001_0011) })
 1584|   686k|        }
_RNvXsc_NtNtNtCsasLfkvg7jG3_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words2301CskKrKnbClT9J_11rand_chacha:
 1586|   686k|        fn shuffle_lane_words2301(self) -> Self {
 1587|   686k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0100_1110) })
 1588|   686k|        }
_RNvXsc_NtNtNtCsasLfkvg7jG3_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words3012CskKrKnbClT9J_11rand_chacha:
 1590|   686k|        fn shuffle_lane_words3012(self) -> Self {
 1591|   686k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0011_1001) })
 1592|   686k|        }
_RNvXse_NtNtNtCsasLfkvg7jG3_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types5StoreNtB9_14vec512_storageE6unpackCskKrKnbClT9J_11rand_chacha:
 1602|  28.6k|        unsafe fn unpack(p: vec512_storage) -> Self {
 1603|  28.6k|            Self::new([
 1604|  28.6k|                u32x4x2_avx2::unpack(p.avx[0]),
 1605|  28.6k|                u32x4x2_avx2::unpack(p.avx[1]),
 1606|  28.6k|            ])
 1607|  28.6k|        }
_RNvXsf_NtNtNtCsasLfkvg7jG3_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E10from_lanesCskKrKnbClT9J_11rand_chacha:
 1617|   114k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 4]) -> Self {
 1618|   114k|            let ab = u32x4x2_avx2::from_lanes([x[0], x[1]]);
 1619|   114k|            let cd = u32x4x2_avx2::from_lanes([x[2], x[3]]);
 1620|   114k|            Self::new([ab, cd])
 1621|   114k|        }
_RNvXsf_NtNtNtCsasLfkvg7jG3_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E8to_lanesCskKrKnbClT9J_11rand_chacha:
 1611|   114k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 4] {
 1612|   114k|            let [a, b] = self.0[0].to_lanes();
 1613|   114k|            let [c, d] = self.0[1].to_lanes();
 1614|   114k|            [a, b, c, d]
 1615|   114k|        }
_RNvXsl_NtNtCsasLfkvg7jG3_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE6insertCskKrKnbClT9J_11rand_chacha:
  523|   400k|    fn insert(self, v: u32, i: u32) -> Self {
  524|   400k|        Self::new(unsafe {
  525|   400k|            match i {
  526|   200k|                0 => _mm_insert_epi32(self.x, v as i32, 0),
  527|   200k|                1 => _mm_insert_epi32(self.x, v as i32, 1),
  528|      0|                2 => _mm_insert_epi32(self.x, v as i32, 2),
  529|      0|                3 => _mm_insert_epi32(self.x, v as i32, 3),
  530|      0|                _ => unreachable!(),
  531|       |            }
  532|       |        })
  533|   400k|    }
_RNvXsl_NtNtCsasLfkvg7jG3_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE7extractCskKrKnbClT9J_11rand_chacha:
  519|   114k|    fn extract(self, i: u32) -> u32 {
  520|   114k|        self.to_lanes()[i as usize]
  521|   114k|    }
_RNvXsq_NtNtNtCsasLfkvg7jG3_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCsevdOxZso2fM_4core3ops5arith9AddAssign10add_assignCskKrKnbClT9J_11rand_chacha:
 1527|  2.74M|                fn $assign_fn(&mut self, rhs: Self) {
 1528|  2.74M|                    *self = self.$bin_fn(rhs);
 1529|  2.74M|                }
_RNvXsr_NtNtNtCsasLfkvg7jG3_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCsevdOxZso2fM_4core3ops3bit6BitXor6bitxorCskKrKnbClT9J_11rand_chacha:
 1543|  2.74M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  2.74M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  2.74M|                }
_RNvXsv_NtNtNtCsasLfkvg7jG3_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCsevdOxZso2fM_4core3ops5arith3Add3addCskKrKnbClT9J_11rand_chacha:
 1543|  2.74M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  2.74M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  2.74M|                }
_RNvXsY_NtNtCsasLfkvg7jG3_10ppv_lite866x86_644sse2NtB7_14vec128_storageINtNtCsevdOxZso2fM_4core7convert4FromINtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEE4fromCskKrKnbClT9J_11rand_chacha:
   58|  28.8k|            fn from(x: $vec<S3, S4, NI>) -> Self {
   59|  28.8k|                vec128_storage { sse2: x.x }
   60|  28.8k|            }
_RNvXsj_NtNtNtCsasLfkvg7jG3_10ppv_lite866x86_644sse24avx2NtB9_14vec512_storageINtNtCsevdOxZso2fM_4core7convert4FromINtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EE4fromCskKrKnbClT9J_11rand_chacha:
 1683|  28.6k|        fn from(x: u32x4x4_avx2<NI>) -> Self {
 1684|  28.6k|            Self {
 1685|  28.6k|                avx: [
 1686|  28.6k|                    vec256_storage { avx: x.0[0].x },
 1687|  28.6k|                    vec256_storage { avx: x.0[1].x },
 1688|  28.6k|                ],
 1689|  28.6k|            }
 1690|  28.6k|        }

_RINvXs2_NtNtCs5EwMJPS93V2_4rand13distributions7integerNtB8_8StandardINtNtB8_12distribution12DistributionoE6sampleNtNtNtBa_4rngs6thread9ThreadRngECsbUpIViwkCx3_5oxttl:
   51|   457k|    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u128 {
   52|   457k|        // Use LE; we explicitly generate one value before the next.
   53|   457k|        let x = u128::from(rng.next_u64());
   54|   457k|        let y = u128::from(rng.next_u64());
   55|   457k|        (y << 64) | x
   56|   457k|    }

_RINvCs5EwMJPS93V2_4rand6randomoECsbUpIViwkCx3_5oxttl:
  183|   457k|pub fn random<T>() -> T
  184|   457k|where Standard: Distribution<T> {
  185|   457k|    thread_rng().gen()
  186|   457k|}

_RINvYNtNtNtCs5EwMJPS93V2_4rand4rngs6thread9ThreadRngNtNtB9_3rng3Rng3genoECsbUpIViwkCx3_5oxttl:
   93|   457k|    fn gen<T>(&mut self) -> T
   94|   457k|    where Standard: Distribution<T> {
   95|   457k|        Standard.sample(self)
   96|   457k|    }

_RNvXs_NtNtNtCs5EwMJPS93V2_4rand4rngs7adapter9reseedingINtB4_12ReseedingRngNtNtCskKrKnbClT9J_11rand_chacha6chacha12ChaCha12CoreNtNtCshTFxBpqDS00_9rand_core2os5OsRngENtB24_7RngCore8next_u64CsbUpIViwkCx3_5oxttl:
  124|   915k|    fn next_u64(&mut self) -> u64 {
  125|   915k|        self.0.next_u64()
  126|   915k|    }
_RNvMNtNtNtCs5EwMJPS93V2_4rand4rngs7adapter9reseedingINtB2_12ReseedingRngNtNtCskKrKnbClT9J_11rand_chacha6chacha12ChaCha12CoreNtNtCshTFxBpqDS00_9rand_core2os5OsRngE3newB8_:
  101|      1|    pub fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  102|      1|        ReseedingRng(BlockRng::new(ReseedingCore::new(rng, threshold, reseeder)))
  103|      1|    }
_RNvXs2_NtNtNtCs5EwMJPS93V2_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCskKrKnbClT9J_11rand_chacha6chacha12ChaCha12CoreNtNtCshTFxBpqDS00_9rand_core2os5OsRngENtNtB26_5block12BlockRngCore8generateBb_:
  173|  28.6k|    fn generate(&mut self, results: &mut Self::Results) {
  174|  28.6k|        let global_fork_counter = fork::get_fork_counter();
  175|  28.6k|        if self.bytes_until_reseed <= 0 || self.is_forked(global_fork_counter) {
  176|       |            // We get better performance by not calling only `reseed` here
  177|       |            // and continuing with the rest of the function, but by directly
  178|       |            // returning from a non-inlined function.
  179|    111|            return self.reseed_and_generate(results, global_fork_counter);
  180|  28.4k|        }
  181|  28.4k|        let num_bytes = results.as_ref().len() * size_of::<Self::Item>();
  182|  28.4k|        self.bytes_until_reseed -= num_bytes as i64;
  183|  28.4k|        self.inner.generate(results);
  184|  28.6k|    }
_RNvMs3_NtNtNtCs5EwMJPS93V2_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCskKrKnbClT9J_11rand_chacha6chacha12ChaCha12CoreNtNtCshTFxBpqDS00_9rand_core2os5OsRngE3newBb_:
  193|      1|    fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  194|      1|        use ::core::i64::MAX;
  195|      1|        fork::register_fork_handler();
  196|       |
  197|       |        // Because generating more values than `i64::MAX` takes centuries on
  198|       |        // current hardware, we just clamp to that value.
  199|       |        // Also we set a threshold of 0, which indicates no limit, to that
  200|       |        // value.
  201|      1|        let threshold = if threshold == 0 {
  202|      0|            MAX
  203|      1|        } else if threshold <= MAX as u64 {
  204|      1|            threshold as i64
  205|       |        } else {
  206|      0|            MAX
  207|       |        };
  208|       |
  209|      1|        ReseedingCore {
  210|      1|            inner: rng,
  211|      1|            reseeder,
  212|      1|            threshold: threshold as i64,
  213|      1|            bytes_until_reseed: threshold as i64,
  214|      1|            fork_counter: 0,
  215|      1|        }
  216|      1|    }
_RNvMs3_NtNtNtCs5EwMJPS93V2_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCskKrKnbClT9J_11rand_chacha6chacha12ChaCha12CoreNtNtCshTFxBpqDS00_9rand_core2os5OsRngE6reseedBb_:
  219|    111|    fn reseed(&mut self) -> Result<(), Error> {
  220|    111|        R::from_rng(&mut self.reseeder).map(|result| {
  221|       |            self.bytes_until_reseed = self.threshold;
  222|       |            self.inner = result
  223|    111|        })
  224|    111|    }
_RNCNvMs3_NtNtNtCs5EwMJPS93V2_4rand4rngs7adapter9reseedingINtB7_13ReseedingCoreNtNtCskKrKnbClT9J_11rand_chacha6chacha12ChaCha12CoreNtNtCshTFxBpqDS00_9rand_core2os5OsRngE6reseed0Bd_:
  220|    111|        R::from_rng(&mut self.reseeder).map(|result| {
  221|    111|            self.bytes_until_reseed = self.threshold;
  222|    111|            self.inner = result
  223|    111|        })
_RNvMs3_NtNtNtCs5EwMJPS93V2_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCskKrKnbClT9J_11rand_chacha6chacha12ChaCha12CoreNtNtCshTFxBpqDS00_9rand_core2os5OsRngE9is_forkedBb_:
  226|  28.6k|    fn is_forked(&self, global_fork_counter: usize) -> bool {
  227|  28.6k|        // In theory, on 32-bit platforms, it is possible for
  228|  28.6k|        // `global_fork_counter` to wrap around after ~4e9 forks.
  229|  28.6k|        //
  230|  28.6k|        // This check will detect a fork in the normal case where
  231|  28.6k|        // `fork_counter < global_fork_counter`, and also when the difference
  232|  28.6k|        // between both is greater than `isize::MAX` (wrapped around).
  233|  28.6k|        //
  234|  28.6k|        // It will still fail to detect a fork if there have been more than
  235|  28.6k|        // `isize::MAX` forks, without any reseed in between. Seems unlikely
  236|  28.6k|        // enough.
  237|  28.6k|        (self.fork_counter.wrapping_sub(global_fork_counter) as isize) < 0
  238|  28.6k|    }
_RNvMs3_NtNtNtCs5EwMJPS93V2_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCskKrKnbClT9J_11rand_chacha6chacha12ChaCha12CoreNtNtCshTFxBpqDS00_9rand_core2os5OsRngE19reseed_and_generateBb_:
  241|    111|    fn reseed_and_generate(
  242|    111|        &mut self, results: &mut <Self as BlockRngCore>::Results, global_fork_counter: usize,
  243|    111|    ) {
  244|    111|        #![allow(clippy::if_same_then_else)] // false positive
  245|    111|        if self.is_forked(global_fork_counter) {
  246|      0|            info!("Fork detected, reseeding RNG");
  247|    111|        } else {
  248|    111|            trace!("Reseeding RNG (periodic reseed)");
  249|    111|        }
  250|       |
  251|    111|        let num_bytes = results.as_ref().len() * size_of::<<R as BlockRngCore>::Item>();
  252|       |
  253|    111|        if let Err(e) = self.reseed() {
  254|      0|            warn!("Reseeding RNG failed: {}", e);
  255|      0|            let _ = e;
  256|    111|        }
  257|    111|        self.fork_counter = global_fork_counter;
  258|    111|
  259|    111|        self.bytes_until_reseed = self.threshold - num_bytes as i64;
  260|    111|        self.inner.generate(results);
  261|    111|    }
_RNvNtNtNtNtCs5EwMJPS93V2_4rand4rngs7adapter9reseeding4fork16get_fork_counter:
  307|  28.6k|    pub fn get_fork_counter() -> usize {
  308|  28.6k|        RESEEDING_RNG_FORK_COUNTER.load(Ordering::Relaxed)
  309|  28.6k|    }
_RNvNtNtNtNtCs5EwMJPS93V2_4rand4rngs7adapter9reseeding4fork21register_fork_handler:
  317|      1|    pub fn register_fork_handler() {
  318|      1|        static REGISTER: Once = Once::new();
  319|      1|        REGISTER.call_once(|| {
  320|       |            // Bump the counter before and after forking (see #1169):
  321|       |            let ret = unsafe { libc::pthread_atfork(
  322|       |                Some(fork_handler),
  323|       |                Some(fork_handler),
  324|       |                Some(fork_handler),
  325|       |            ) };
  326|       |            if ret != 0 {
  327|       |                panic!("libc::pthread_atfork failed with code {}", ret);
  328|       |            }
  329|      1|        });
  330|      1|    }
_RNCNvNtNtNtNtCs5EwMJPS93V2_4rand4rngs7adapter9reseeding4fork21register_fork_handler0Bb_:
  319|      1|        REGISTER.call_once(|| {
  320|      1|            // Bump the counter before and after forking (see #1169):
  321|      1|            let ret = unsafe { libc::pthread_atfork(
  322|      1|                Some(fork_handler),
  323|      1|                Some(fork_handler),
  324|      1|                Some(fork_handler),
  325|      1|            ) };
  326|      1|            if ret != 0 {
  327|      0|                panic!("libc::pthread_atfork failed with code {}", ret);
  328|      1|            }
  329|      1|        });

_RNvXs_NtNtCs5EwMJPS93V2_4rand4rngs6threadNtB4_9ThreadRngNtCshTFxBpqDS00_9rand_core7RngCore8next_u64:
  109|   915k|    fn next_u64(&mut self) -> u64 {
  110|   915k|        // SAFETY: We must make sure to stop using `rng` before anyone else
  111|   915k|        // creates another mutable reference
  112|   915k|        let rng = unsafe { &mut *self.rng.get() };
  113|   915k|        rng.next_u64()
  114|   915k|    }
_RNvNtNtCs5EwMJPS93V2_4rand4rngs6thread10thread_rng:
   88|   457k|pub fn thread_rng() -> ThreadRng {
   89|   457k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
   90|   457k|    ThreadRng { rng }
   91|   457k|}
_RNCNvNtNtCs5EwMJPS93V2_4rand4rngs6thread10thread_rng0B7_:
   89|   457k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
_RNCNvNvNtNtCs5EwMJPS93V2_4rand4rngs6thread14THREAD_RNG_KEY7___getit0B9_:
   67|      1|thread_local!(
   68|      1|    // We require Rc<..> to avoid premature freeing when thread_rng is used
   69|      1|    // within thread-local destructors. See #968.
   70|      1|    static THREAD_RNG_KEY: Rc<UnsafeCell<ReseedingRng<Core, OsRng>>> = {
   71|      1|        let r = Core::from_rng(OsRng).unwrap_or_else(|err|
   72|      1|                panic!("could not initialize thread_rng: {}", err));
   73|      1|        let rng = ReseedingRng::new(r,
   74|      1|                                    THREAD_RNG_RESEED_THRESHOLD,
   75|      1|                                    OsRng);
   76|      1|        Rc::new(UnsafeCell::new(rng))
   77|      1|    }
   78|      1|);

_RNvXsm_NtCskKrKnbClT9J_11rand_chacha6chachaNtB5_12ChaCha12CoreNtNtCshTFxBpqDS00_9rand_core5block12BlockRngCore8generateCs5EwMJPS93V2_4rand:
   89|  28.6k|            fn generate(&mut self, r: &mut Self::Results) {
   90|  28.6k|                // Fill slice of words by writing to equivalent slice of bytes, then fixing endianness.
   91|  28.6k|                self.state.refill4($rounds, unsafe {
   92|  28.6k|                    &mut *(&mut *r as *mut Array64<u32> as *mut [u8; 256])
   93|  28.6k|                });
   94|  1.83M|                for x in r.as_mut() {
   95|  1.83M|                    *x = x.to_le();
   96|  1.83M|                }
   97|  28.6k|            }
_RNvXsn_NtCskKrKnbClT9J_11rand_chacha6chachaNtB5_12ChaCha12CoreNtCshTFxBpqDS00_9rand_core11SeedableRng9from_seedCs5EwMJPS93V2_4rand:
  103|    112|            fn from_seed(seed: Self::Seed) -> Self {
  104|    112|                $ChaChaXCore { state: ChaCha::new(&seed, &[0u8; 8]) }
  105|    112|            }
_RNvXs_NtCskKrKnbClT9J_11rand_chacha6chachaINtB4_7Array64mEINtNtCsevdOxZso2fM_4core7convert5AsRefSmE6as_refB6_:
   46|  1.88M|    fn as_ref(&self) -> &[T] {
   47|  1.88M|        &self.0
   48|  1.88M|    }
_RNvXs0_NtCskKrKnbClT9J_11rand_chacha6chachaINtB5_7Array64mEINtNtCsevdOxZso2fM_4core7convert5AsMutSmE6as_mutB7_:
   51|  28.6k|    fn as_mut(&mut self) -> &mut [T] {
   52|  28.6k|        &mut self.0
   53|  28.6k|    }
_RNvXNtCskKrKnbClT9J_11rand_chacha6chachaINtB2_7Array64mENtNtCsevdOxZso2fM_4core7default7Default7defaultB4_:
   32|      1|    fn default() -> Self {
   33|      1|        Self([
   34|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   35|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   36|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   37|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   38|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   39|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   40|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   41|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   42|      1|        ])
   43|      1|    }

_RNvMNtCskKrKnbClT9J_11rand_chacha4gutsNtB2_6ChaCha3new:
   72|    112|    pub fn new(key: &[u8; 32], nonce: &[u8]) -> Self {
   73|    112|        init_chacha(key, nonce)
   74|    112|    }
_RNvMNtCskKrKnbClT9J_11rand_chacha4gutsNtB2_6ChaCha7refill4:
   84|  28.6k|    pub fn refill4(&mut self, drounds: u32, out: &mut [u8; BUFSZ]) {
   85|  28.6k|        refill_wide(self, drounds, out)
   86|  28.6k|    }
_RINvNtCskKrKnbClT9J_11rand_chacha4guts5roundINtNtCsasLfkvg7jG3_10ppv_lite864soft2x2INtNtNtNtBL_6x86_644sse24avx212u32x4x2_avx2NtB1q_4NoNIENtB1o_2G0EEB4_:
   43|   343k|pub(crate) fn round<V: ArithOps + BitOps32>(mut x: State<V>) -> State<V> {
   44|   343k|    x.a += x.b;
   45|   343k|    x.d = (x.d ^ x.a).rotate_each_word_right16();
   46|   343k|    x.c += x.d;
   47|   343k|    x.b = (x.b ^ x.c).rotate_each_word_right20();
   48|   343k|    x.a += x.b;
   49|   343k|    x.d = (x.d ^ x.a).rotate_each_word_right24();
   50|   343k|    x.c += x.d;
   51|   343k|    x.b = (x.b ^ x.c).rotate_each_word_right25();
   52|   343k|    x
   53|   343k|}
_RINvNtCskKrKnbClT9J_11rand_chacha4guts11diagonalizeINtNtCsasLfkvg7jG3_10ppv_lite864soft2x2INtNtNtNtBS_6x86_644sse24avx212u32x4x2_avx2NtB1x_4NoNIENtB1v_2G0EEB4_:
   56|   171k|pub(crate) fn diagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   57|   171k|    x.b = x.b.shuffle_lane_words3012();
   58|   171k|    x.c = x.c.shuffle_lane_words2301();
   59|   171k|    x.d = x.d.shuffle_lane_words1230();
   60|   171k|    x
   61|   171k|}
_RINvNtCskKrKnbClT9J_11rand_chacha4guts13undiagonalizeINtNtCsasLfkvg7jG3_10ppv_lite864soft2x2INtNtNtNtBU_6x86_644sse24avx212u32x4x2_avx2NtB1z_4NoNIENtB1x_2G0EEB4_:
   63|   171k|pub(crate) fn undiagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   64|   171k|    x.b = x.b.shuffle_lane_words1230();
   65|   171k|    x.c = x.c.shuffle_lane_words2301();
   66|   171k|    x.d = x.d.shuffle_lane_words3012();
   67|   171k|    x
   68|   171k|}
_RINvMNtCskKrKnbClT9J_11rand_chacha4gutsNtB3_6ChaCha5pos64INtNtCsasLfkvg7jG3_10ppv_lite866x86_6411Avx2MachineNtBW_4NoNIEEB5_:
   77|  57.2k|    fn pos64<M: Machine>(&self, m: M) -> u64 {
   78|  57.2k|        let d: M::u32x4 = m.unpack(self.d);
   79|  57.2k|        ((d.extract(1) as u64) << 32) | d.extract(0) as u64
   80|  57.2k|    }
_RINvNtCskKrKnbClT9J_11rand_chacha4guts16refill_wide_implINtNtCsasLfkvg7jG3_10ppv_lite866x86_6411Avx2MachineNtBV_4NoNIEEB4_:
  116|  28.6k|fn refill_wide_impl<Mach: Machine>(
  117|  28.6k|    m: Mach, state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ],
  118|  28.6k|) {
  119|  28.6k|    let k = m.vec([0x6170_7865, 0x3320_646e, 0x7962_2d32, 0x6b20_6574]);
  120|  28.6k|    let mut pos = state.pos64(m);
  121|  28.6k|    let d0: Mach::u32x4 = m.unpack(state.d);
  122|  28.6k|    pos = pos.wrapping_add(1);
  123|  28.6k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  124|  28.6k|    pos = pos.wrapping_add(1);
  125|  28.6k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  126|  28.6k|    pos = pos.wrapping_add(1);
  127|  28.6k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  128|  28.6k|
  129|  28.6k|    let b = m.unpack(state.b);
  130|  28.6k|    let c = m.unpack(state.c);
  131|  28.6k|    let mut x = State {
  132|  28.6k|        a: Mach::u32x4x4::from_lanes([k, k, k, k]),
  133|  28.6k|        b: Mach::u32x4x4::from_lanes([b, b, b, b]),
  134|  28.6k|        c: Mach::u32x4x4::from_lanes([c, c, c, c]),
  135|  28.6k|        d: m.unpack(Mach::u32x4x4::from_lanes([d0, d1, d2, d3]).into()),
  136|  28.6k|    };
  137|   171k|    for _ in 0..drounds {
  138|   171k|        x = round(x);
  139|   171k|        x = undiagonalize(round(diagonalize(x)));
  140|   171k|    }
  141|  28.6k|    let mut pos = state.pos64(m);
  142|  28.6k|    let d0: Mach::u32x4 = m.unpack(state.d);
  143|  28.6k|    pos = pos.wrapping_add(1);
  144|  28.6k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  145|  28.6k|    pos = pos.wrapping_add(1);
  146|  28.6k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  147|  28.6k|    pos = pos.wrapping_add(1);
  148|  28.6k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  149|  28.6k|    pos = pos.wrapping_add(1);
  150|  28.6k|    let d4 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  151|  28.6k|
  152|  28.6k|    let (a, b, c, d) = (
  153|  28.6k|        x.a.to_lanes(),
  154|  28.6k|        x.b.to_lanes(),
  155|  28.6k|        x.c.to_lanes(),
  156|  28.6k|        x.d.to_lanes(),
  157|  28.6k|    );
  158|  28.6k|    let sb = m.unpack(state.b);
  159|  28.6k|    let sc = m.unpack(state.c);
  160|  28.6k|    let sd = [m.unpack(state.d), d1, d2, d3];
  161|  28.6k|    state.d = d4.into();
  162|  28.6k|    let mut words = out.chunks_exact_mut(16);
  163|   114k|    for ((((&a, &b), &c), &d), &sd) in a.iter().zip(&b).zip(&c).zip(&d).zip(&sd) {
  164|   114k|        (a + k).write_le(words.next().unwrap());
  165|   114k|        (b + sb).write_le(words.next().unwrap());
  166|   114k|        (c + sc).write_le(words.next().unwrap());
  167|   114k|        (d + sd).write_le(words.next().unwrap());
  168|   114k|    }
  169|  28.6k|}
_RNvNtCskKrKnbClT9J_11rand_chacha4guts10read_u32le:
  229|    224|fn read_u32le(xs: &[u8]) -> u32 {
  230|    224|    assert_eq!(xs.len(), 4);
  231|    224|    u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24)
  232|    224|}
_RINvNvNtCskKrKnbClT9J_11rand_chacha4guts11refill_wide7fn_implINtNtCsasLfkvg7jG3_10ppv_lite866x86_6411Avx2MachineNtB10_4NoNIEEB6_:
  172|  28.6k|    fn refill_wide(state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ]) {
  173|  28.6k|        refill_wide_impl(m, state, drounds, out);
  174|  28.6k|    }
_RINvNvNtCskKrKnbClT9J_11rand_chacha4guts11init_chacha7fn_implINtNtCsasLfkvg7jG3_10ppv_lite866x86_6410SseMachineNtB10_5YesS3NtB10_5YesS4NtB10_4NoNIEEB6_:
  235|    112|    fn init_chacha(key: &[u8; 32], nonce: &[u8]) -> ChaCha {
  236|    112|        let ctr_nonce = [
  237|       |            0,
  238|    112|            if nonce.len() == 12 {
  239|      0|                read_u32le(&nonce[0..4])
  240|       |            } else {
  241|    112|                0
  242|       |            },
  243|    112|            read_u32le(&nonce[nonce.len() - 8..nonce.len() - 4]),
  244|    112|            read_u32le(&nonce[nonce.len() - 4..]),
  245|    112|        ];
  246|    112|        let key0: Mach::u32x4 = m.read_le(&key[..16]);
  247|    112|        let key1: Mach::u32x4 = m.read_le(&key[16..]);
  248|    112|        ChaCha {
  249|    112|            b: key0.into(),
  250|    112|            c: key1.into(),
  251|    112|            d: ctr_nonce.into(),
  252|    112|        }

_RNCNvXs0_NtCshTFxBpqDS00_9rand_core5blockINtB7_8BlockRngINtNtNtNtCs5EwMJPS93V2_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCskKrKnbClT9J_11rand_chacha6chacha12ChaCha12CoreNtNtB9_2os5OsRngEENtB9_7RngCore8next_u640CsbUpIViwkCx3_5oxttl:
  198|   915k|        let read_u64 = |results: &[u32], index| {
  199|   915k|            let data = &results[index..=index + 1];
  200|   915k|            u64::from(data[1]) << 32 | u64::from(data[0])
  201|   915k|        };
_RNvXs0_NtCshTFxBpqDS00_9rand_core5blockINtB5_8BlockRngINtNtNtNtCs5EwMJPS93V2_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCskKrKnbClT9J_11rand_chacha6chacha12ChaCha12CoreNtNtB7_2os5OsRngEENtB7_7RngCore8next_u64CsbUpIViwkCx3_5oxttl:
  197|   915k|    fn next_u64(&mut self) -> u64 {
  198|   915k|        let read_u64 = |results: &[u32], index| {
  199|       |            let data = &results[index..=index + 1];
  200|       |            u64::from(data[1]) << 32 | u64::from(data[0])
  201|       |        };
  202|       |
  203|   915k|        let len = self.results.as_ref().len();
  204|   915k|
  205|   915k|        let index = self.index;
  206|   915k|        if index < len - 1 {
  207|   886k|            self.index += 2;
  208|   886k|            // Read an u64 from the current index
  209|   886k|            read_u64(self.results.as_ref(), index)
  210|  28.6k|        } else if index >= len {
  211|  28.6k|            self.generate_and_set(2);
  212|  28.6k|            read_u64(self.results.as_ref(), 0)
  213|       |        } else {
  214|      0|            let x = u64::from(self.results.as_ref()[len - 1]);
  215|      0|            self.generate_and_set(1);
  216|      0|            let y = u64::from(self.results.as_ref()[0]);
  217|      0|            (y << 32) | x
  218|       |        }
  219|   915k|    }
_RNvMs_NtCshTFxBpqDS00_9rand_core5blockINtB4_8BlockRngINtNtNtNtCs5EwMJPS93V2_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCskKrKnbClT9J_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE16generate_and_setBY_:
  174|  28.6k|    pub fn generate_and_set(&mut self, index: usize) {
  175|  28.6k|        assert!(index < self.results.as_ref().len());
  176|  28.6k|        self.core.generate(&mut self.results);
  177|  28.6k|        self.index = index;
  178|  28.6k|    }
_RNvMs_NtCshTFxBpqDS00_9rand_core5blockINtB4_8BlockRngINtNtNtNtCs5EwMJPS93V2_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCskKrKnbClT9J_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE3newBY_:
  145|      1|    pub fn new(core: R) -> BlockRng<R> {
  146|      1|        let results_empty = R::Results::default();
  147|      1|        BlockRng {
  148|      1|            core,
  149|      1|            index: results_empty.as_ref().len(),
  150|      1|            results: results_empty,
  151|      1|        }
  152|      1|    }

_RINvYNtNtCskKrKnbClT9J_11rand_chacha6chacha12ChaCha12CoreNtCshTFxBpqDS00_9rand_core11SeedableRng8from_rngNtNtBV_2os5OsRngECs5EwMJPS93V2_4rand:
  390|      1|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|      1|        let mut seed = Self::Seed::default();
  392|      1|        rng.try_fill_bytes(seed.as_mut())?;
  393|      1|        Ok(Self::from_seed(seed))
  394|      1|    }
_RINvYNtNtCskKrKnbClT9J_11rand_chacha6chacha12ChaCha12CoreNtCshTFxBpqDS00_9rand_core11SeedableRng8from_rngQNtNtBV_2os5OsRngECs5EwMJPS93V2_4rand:
  390|    111|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|    111|        let mut seed = Self::Seed::default();
  392|    111|        rng.try_fill_bytes(seed.as_mut())?;
  393|    111|        Ok(Self::from_seed(seed))
  394|    111|    }
_RNvXs_CshTFxBpqDS00_9rand_coreQNtNtB4_2os5OsRngNtB4_7RngCore14try_fill_bytesCs5EwMJPS93V2_4rand:
  441|    111|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
  442|    111|        (**self).try_fill_bytes(dest)
  443|    111|    }

_RNvXs_NtCshTFxBpqDS00_9rand_core2osNtB4_5OsRngNtB6_7RngCore14try_fill_bytes:
   67|    112|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
   68|    112|        getrandom(dest)?;
   69|    112|        Ok(())
   70|    112|    }

_RNvNvNtNtCs5EwMJPS93V2_4rand4rngs6thread14THREAD_RNG_KEY6___initB7_:
   82|      1|            fn __init() -> $t { $init }
_RNvNvNtNtCs5EwMJPS93V2_4rand4rngs6thread14THREAD_RNG_KEY7___getitB7_:
   85|   457k|            unsafe fn __getit(
   86|   457k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   87|   457k|            ) -> $crate::option::Option<&'static $t> {
   88|   457k|                #[thread_local]
   89|   457k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   90|   457k|                    $crate::thread::local_impl::Key::<$t>::new();
   91|   457k|
   92|   457k|                unsafe {
   93|   457k|                    __KEY.get(move || {
   94|       |                        if let $crate::option::Option::Some(init) = init {
   95|       |                            if let $crate::option::Option::Some(value) = init.take() {
   96|       |                                return value;
   97|       |                            } else if $crate::cfg!(debug_assertions) {
   98|       |                                $crate::unreachable!("missing default value");
   99|       |                            }
  100|       |                        }
  101|       |                        __init()
  102|   457k|                    })
  103|   457k|                }
  104|   457k|            }

_RNvCsiApsw9S2n9N_4trig24count_triple_blank_nodes:
   41|  7.13k|fn count_triple_blank_nodes(triple: &Triple) -> usize {
   42|  7.13k|    (match &triple.subject {
   43|    134|        Subject::BlankNode(_) => 1,
   44|  3.04k|        Subject::Triple(t) => count_triple_blank_nodes(t),
   45|  3.94k|        _ => 0,
   46|  7.13k|    }) + (match &triple.object {
   47|    415|        Term::BlankNode(_) => 1,
   48|      0|        Term::Triple(t) => count_triple_blank_nodes(t),
   49|  6.71k|        _ => 0,
   50|       |    })
   51|  7.13k|}
_RNvCsiApsw9S2n9N_4trig22count_quad_blank_nodes:
   53|  93.9k|fn count_quad_blank_nodes(quad: &Quad) -> usize {
   54|  93.9k|    (match &quad.subject {
   55|  72.4k|        Subject::BlankNode(_) => 1,
   56|  2.67k|        Subject::Triple(t) => count_triple_blank_nodes(t),
   57|  18.8k|        _ => 0,
   58|  93.9k|    }) + (match &quad.object {
   59|  50.2k|        Term::BlankNode(_) => 1,
   60|  1.40k|        Term::Triple(t) => count_triple_blank_nodes(t),
   61|  42.3k|        _ => 0,
   62|  93.9k|    }) + usize::from(matches!(quad.graph_name, GraphName::BlankNode(_)))
   63|  93.9k|}
_RNvCsiApsw9S2n9N_4trig15serialize_quads:
   65|  6.30k|fn serialize_quads(quads: &[Quad]) -> Vec<u8> {
   66|  6.30k|    let mut writer = TriGSerializer::new().serialize_to_write(Vec::new());
   67|   100k|    for quad in quads {
   68|  93.9k|        writer.write_quad(quad).unwrap();
   69|  93.9k|    }
   70|  6.30k|    writer.finish().unwrap()
   71|  6.30k|}
_RINvCsiApsw9S2n9N_4trig5parseARShj1_EB2_:
    7|  6.30k|fn parse<'a>(
    8|  6.30k|    chunks: impl IntoIterator<Item = &'a [u8]>,
    9|  6.30k|    unchecked: bool,
   10|  6.30k|) -> (Vec<Quad>, Vec<String>) {
   11|  6.30k|    let mut quads = Vec::new();
   12|  6.30k|    let mut errors = Vec::new();
   13|  6.30k|    let mut parser = TriGParser::new()
   14|  6.30k|        .with_quoted_triples()
   15|  6.30k|        .with_base_iri("http://example.com/")
   16|  6.30k|        .unwrap();
   17|  6.30k|    if unchecked {
   18|      0|        parser = parser.unchecked();
   19|  6.30k|    }
   20|  6.30k|    let mut reader = parser.parse();
   21|  12.6k|    for chunk in chunks {
   22|  6.30k|        reader.extend_from_slice(chunk);
   23|   709k|        while let Some(result) = reader.read_next() {
   24|   703k|            match result {
   25|  93.8k|                Ok(quad) => quads.push(quad),
   26|   609k|                Err(error) => errors.push(error.to_string()),
   27|       |            }
   28|       |        }
   29|       |    }
   30|  6.30k|    reader.end();
   31|  9.55k|    while let Some(result) = reader.read_next() {
   32|  3.25k|        match result {
   33|    145|            Ok(quad) => quads.push(quad),
   34|  3.11k|            Err(error) => errors.push(error.to_string()),
   35|       |        }
   36|       |    }
   37|  6.30k|    assert!(reader.is_end());
   38|  6.30k|    (quads, errors)
   39|  6.30k|}
_RINvCsiApsw9S2n9N_4trig5parseINtNtNtCsevdOxZso2fM_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_run0EEB2_:
    7|  6.30k|fn parse<'a>(
    8|  6.30k|    chunks: impl IntoIterator<Item = &'a [u8]>,
    9|  6.30k|    unchecked: bool,
   10|  6.30k|) -> (Vec<Quad>, Vec<String>) {
   11|  6.30k|    let mut quads = Vec::new();
   12|  6.30k|    let mut errors = Vec::new();
   13|  6.30k|    let mut parser = TriGParser::new()
   14|  6.30k|        .with_quoted_triples()
   15|  6.30k|        .with_base_iri("http://example.com/")
   16|  6.30k|        .unwrap();
   17|  6.30k|    if unchecked {
   18|      0|        parser = parser.unchecked();
   19|  6.30k|    }
   20|  6.30k|    let mut reader = parser.parse();
   21|   839k|    for chunk in chunks {
   22|   833k|        reader.extend_from_slice(chunk);
   23|  1.53M|        while let Some(result) = reader.read_next() {
   24|   703k|            match result {
   25|  93.8k|                Ok(quad) => quads.push(quad),
   26|   609k|                Err(error) => errors.push(error.to_string()),
   27|       |            }
   28|       |        }
   29|       |    }
   30|  6.30k|    reader.end();
   31|  9.55k|    while let Some(result) = reader.read_next() {
   32|  3.25k|        match result {
   33|    145|            Ok(quad) => quads.push(quad),
   34|  3.11k|            Err(error) => errors.push(error.to_string()),
   35|       |        }
   36|       |    }
   37|  6.30k|    assert!(reader.is_end());
   38|  6.30k|    (quads, errors)
   39|  6.30k|}
_RINvCsiApsw9S2n9N_4trig5parseINtNtNtCsevdOxZso2fM_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_runs0_0EEB2_:
    7|  6.30k|fn parse<'a>(
    8|  6.30k|    chunks: impl IntoIterator<Item = &'a [u8]>,
    9|  6.30k|    unchecked: bool,
   10|  6.30k|) -> (Vec<Quad>, Vec<String>) {
   11|  6.30k|    let mut quads = Vec::new();
   12|  6.30k|    let mut errors = Vec::new();
   13|  6.30k|    let mut parser = TriGParser::new()
   14|  6.30k|        .with_quoted_triples()
   15|  6.30k|        .with_base_iri("http://example.com/")
   16|  6.30k|        .unwrap();
   17|  6.30k|    if unchecked {
   18|  6.30k|        parser = parser.unchecked();
   19|  6.30k|    }
   20|  6.30k|    let mut reader = parser.parse();
   21|   839k|    for chunk in chunks {
   22|   833k|        reader.extend_from_slice(chunk);
   23|  1.53M|        while let Some(result) = reader.read_next() {
   24|   700k|            match result {
   25|   100k|                Ok(quad) => quads.push(quad),
   26|   599k|                Err(error) => errors.push(error.to_string()),
   27|       |            }
   28|       |        }
   29|       |    }
   30|  6.30k|    reader.end();
   31|  9.62k|    while let Some(result) = reader.read_next() {
   32|  3.32k|        match result {
   33|    156|            Ok(quad) => quads.push(quad),
   34|  3.16k|            Err(error) => errors.push(error.to_string()),
   35|       |        }
   36|       |    }
   37|  6.30k|    assert!(reader.is_end());
   38|  6.30k|    (quads, errors)
   39|  6.30k|}
_RNCNvNvCsiApsw9S2n9N_4trig1__19___libfuzzer_sys_run0B5_:
   75|  3.98M|    let (quads, errors) = parse(data.split(|c| *c == 0xFF), false);
_RNCNvNvCsiApsw9S2n9N_4trig1__19___libfuzzer_sys_runs_0B5_:
   81|  3.98M|            .filter(|c| *c != 0xFF)
_RNCNvNvCsiApsw9S2n9N_4trig1__19___libfuzzer_sys_runs0_0B5_:
   86|  3.98M|    let (quads_unchecked, errors_unchecked) = parse(data.split(|c| *c == 0xFF), true);

_RNvMNtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCsiApsw9S2n9N_4trig:
   88|   212k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|   212k|        BlankNodeRef(match &self.0 {
   90|  5.74k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|   207k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|   207k|                id: *id,
   93|   207k|                str: str.as_str(),
   94|   207k|            },
   95|       |        })
   96|   212k|    }
_RNvMs1_NtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB5_12BlankNodeRef10into_ownedCsiApsw9S2n9N_4trig:
  204|  67.1k|    pub fn into_owned(self) -> BlankNode {
  205|  67.1k|        BlankNode(match self.0 {
  206|    425|            BlankNodeRefContent::Named(id) => BlankNodeContent::Named(id.to_owned()),
  207|  66.7k|            BlankNodeRefContent::Anonymous { id, .. } => BlankNodeContent::Anonymous {
  208|  66.7k|                id,
  209|  66.7k|                str: IdStr::new(id),
  210|  66.7k|            },
  211|       |        })
  212|  67.1k|    }
_RNvMs1_NtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCsiApsw9S2n9N_4trig:
  176|    377|    pub const fn as_str(self) -> &'a str {
  177|    377|        match self.0 {
  178|    227|            BlankNodeRefContent::Named(id) => id,
  179|    150|            BlankNodeRefContent::Anonymous { str, .. } => str,
  180|       |        }
  181|    377|    }
_RNvMs7_NtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB5_5IdStr3newCsiApsw9S2n9N_4trig:
  255|  66.7k|    fn new(id: u128) -> Self {
  256|  66.7k|        let mut str = [0; 32];
  257|  66.7k|        write!(&mut str[..], "{id:x}").unwrap();
  258|  66.7k|        Self(str)
  259|  66.7k|    }
_RNvMs7_NtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB5_5IdStr6as_strCsiApsw9S2n9N_4trig:
  262|   207k|    fn as_str(&self) -> &str {
  263|   207k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  264|   207k|        str::from_utf8(&self.0[..len]).unwrap()
  265|   207k|    }
_RNvXs2_NtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCsevdOxZso2fM_4core3fmt7Display3fmtCsiApsw9S2n9N_4trig:
  217|    377|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  218|    377|        write!(f, "_:{}", self.as_str())
  219|    377|    }
_RNvXsF_NtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB5_5IdStrNtNtCsevdOxZso2fM_4core3cmp9PartialEq2eqCsiApsw9S2n9N_4trig:
  250|   124k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsd_NtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCsevdOxZso2fM_4core3cmp9PartialEq2eqCsiApsw9S2n9N_4trig:
   20|   126k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsi_NtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCsevdOxZso2fM_4core3cmp9PartialEq2eqCsiApsw9S2n9N_4trig:
   23|   126k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsr_NtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCsevdOxZso2fM_4core3cmp9PartialEq2eqCsiApsw9S2n9N_4trig:
  135|  70.9k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RNvXsx_NtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB5_19BlankNodeRefContentNtNtCsevdOxZso2fM_4core3cmp9PartialEq2eqCsiApsw9S2n9N_4trig:
  138|  70.9k|#[derive(PartialEq, Eq, Debug, Clone, Copy, Hash)]
_RNvMNtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idCsbUpIViwkCx3_5oxttl:
   62|   119k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|   119k|        Self(BlankNodeContent::Anonymous {
   64|   119k|            id,
   65|   119k|            str: IdStr::new(id),
   66|   119k|        })
   67|   119k|    }
_RNvMNtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCsbUpIViwkCx3_5oxttl:
   88|    549|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|    549|        BlankNodeRef(match &self.0 {
   90|    167|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|    382|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|    382|                id: *id,
   93|    382|                str: str.as_str(),
   94|    382|            },
   95|       |        })
   96|    549|    }
_RNvMs1_NtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCsbUpIViwkCx3_5oxttl:
  176|   117k|    pub const fn as_str(self) -> &'a str {
  177|   117k|        match self.0 {
  178|  1.05k|            BlankNodeRefContent::Named(id) => id,
  179|   116k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  180|       |        }
  181|   117k|    }
_RNvMs7_NtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB5_5IdStr3newCsbUpIViwkCx3_5oxttl:
  255|   577k|    fn new(id: u128) -> Self {
  256|   577k|        let mut str = [0; 32];
  257|   577k|        write!(&mut str[..], "{id:x}").unwrap();
  258|   577k|        Self(str)
  259|   577k|    }
_RNvMs7_NtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB5_5IdStr6as_strCsbUpIViwkCx3_5oxttl:
  262|   458k|    fn as_str(&self) -> &str {
  263|   458k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  264|   458k|        str::from_utf8(&self.0[..len]).unwrap()
  265|   458k|    }
_RNvNtCsfYjWOBsMZ7D_5oxrdf10blank_node13to_integer_idCsbUpIViwkCx3_5oxttl:
  328|   126k|fn to_integer_id(id: &str) -> Option<u128> {
  329|   126k|    let digits = id.as_bytes();
  330|   126k|    let mut value: u128 = 0;
  331|   126k|    if let None | Some(b'0') = digits.first() {
  332|  3.98k|        return None; // No empty string or leading zeros
  333|   122k|    }
  334|  3.86M|    for digit in digits {
  335|  3.74M|        value = value.checked_mul(16)?.checked_add(
  336|  3.74M|            match *digit {
  337|  3.74M|                b'0'..=b'9' => digit - b'0',
  338|  1.47M|                b'a'..=b'f' => digit - b'a' + 10,
  339|  2.56k|                _ => return None,
  340|       |            }
  341|  3.74M|            .into(),
  342|      0|        )?;
  343|       |    }
  344|   119k|    Some(value)
  345|   126k|}
_RNvXs0_NtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCsevdOxZso2fM_4core7default7Default7defaultCsbUpIViwkCx3_5oxttl:
  109|   183k|    fn default() -> Self {
  110|       |        // We ensure the ID does not start with a number to be also valid with RDF/XML
  111|   457k|        loop {
  112|   457k|            let id = random();
  113|   457k|            let str = IdStr::new(id);
  114|   457k|            if matches!(str.as_str().as_bytes().first(), Some(b'a'..=b'f')) {
  115|   183k|                return Self(BlankNodeContent::Anonymous { id, str });
  116|   274k|            }
  117|       |        }
  118|   183k|    }
_RNvXs2_NtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCsevdOxZso2fM_4core3fmt7Display3fmtCsbUpIViwkCx3_5oxttl:
  217|   117k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  218|   117k|        write!(f, "_:{}", self.as_str())
  219|   117k|    }
_RNvXsJ_NtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB5_5IdStrNtNtCsevdOxZso2fM_4core5clone5Clone5cloneCsbUpIViwkCx3_5oxttl:
  250|   574k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsf_NtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCsevdOxZso2fM_4core5clone5Clone5cloneCsbUpIViwkCx3_5oxttl:
   20|   583k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsm_NtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCsevdOxZso2fM_4core5clone5Clone5cloneCsbUpIViwkCx3_5oxttl:
   23|   583k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RINvMNtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedReECsbUpIViwkCx3_5oxttl:
   49|   126k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   50|   126k|        let id = id.into();
   51|   126k|        if let Some(numerical_id) = to_integer_id(&id) {
   52|   119k|            Self::new_from_unique_id(numerical_id)
   53|       |        } else {
   54|  6.95k|            Self(BlankNodeContent::Named(id))
   55|       |        }
   56|   126k|    }
_RNCNvMs7_NtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  263|  21.9M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
_RNvMNtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idB4_:
   62|  41.1k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|  41.1k|        Self(BlankNodeContent::Anonymous {
   64|  41.1k|            id,
   65|  41.1k|            str: IdStr::new(id),
   66|  41.1k|        })
   67|  41.1k|    }
_RNvMNtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB2_9BlankNode6as_refB4_:
   88|  41.6k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|  41.6k|        BlankNodeRef(match &self.0 {
   90|    138|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|  41.5k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|  41.5k|                id: *id,
   93|  41.5k|                str: str.as_str(),
   94|  41.5k|            },
   95|       |        })
   96|  41.6k|    }
_RNvMs1_NtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB5_12BlankNodeRef13new_uncheckedB7_:
  163|  4.95k|    pub fn new_unchecked(id: &'a str) -> Self {
  164|  4.95k|        if let Some(numerical_id) = to_integer_id(id) {
  165|  4.95k|            Self(BlankNodeRefContent::Anonymous {
  166|  4.95k|                id: numerical_id,
  167|  4.95k|                str: id,
  168|  4.95k|            })
  169|       |        } else {
  170|      0|            Self(BlankNodeRefContent::Named(id))
  171|       |        }
  172|  4.95k|    }
_RNvMs1_NtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strB7_:
  176|  17.7k|    pub const fn as_str(self) -> &'a str {
  177|  17.7k|        match self.0 {
  178|  1.03k|            BlankNodeRefContent::Named(id) => id,
  179|  16.7k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  180|       |        }
  181|  17.7k|    }
_RNvMs1_NtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB5_12BlankNodeRef9unique_idB7_:
  196|  56.6k|    pub const fn unique_id(&self) -> Option<u128> {
  197|  56.6k|        match self.0 {
  198|  1.03k|            BlankNodeRefContent::Named(_) => None,
  199|  55.5k|            BlankNodeRefContent::Anonymous { id, .. } => Some(id),
  200|       |        }
  201|  56.6k|    }
_RNvMs1_NtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB5_12BlankNodeRef10into_ownedB7_:
  204|    846|    pub fn into_owned(self) -> BlankNode {
  205|    846|        BlankNode(match self.0 {
  206|    138|            BlankNodeRefContent::Named(id) => BlankNodeContent::Named(id.to_owned()),
  207|    708|            BlankNodeRefContent::Anonymous { id, .. } => BlankNodeContent::Anonymous {
  208|    708|                id,
  209|    708|                str: IdStr::new(id),
  210|    708|            },
  211|       |        })
  212|    846|    }
_RNvMs7_NtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB5_5IdStr3newB7_:
  255|  41.8k|    fn new(id: u128) -> Self {
  256|  41.8k|        let mut str = [0; 32];
  257|  41.8k|        write!(&mut str[..], "{id:x}").unwrap();
  258|  41.8k|        Self(str)
  259|  41.8k|    }
_RNvMs7_NtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB5_5IdStr6as_strB7_:
  262|  41.5k|    fn as_str(&self) -> &str {
  263|  41.5k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  264|  41.5k|        str::from_utf8(&self.0[..len]).unwrap()
  265|  41.5k|    }
_RNvNtCsfYjWOBsMZ7D_5oxrdf10blank_node13to_integer_idB3_:
  328|  4.95k|fn to_integer_id(id: &str) -> Option<u128> {
  329|  4.95k|    let digits = id.as_bytes();
  330|  4.95k|    let mut value: u128 = 0;
  331|  4.95k|    if let None | Some(b'0') = digits.first() {
  332|      0|        return None; // No empty string or leading zeros
  333|  4.95k|    }
  334|  83.8k|    for digit in digits {
  335|  78.8k|        value = value.checked_mul(16)?.checked_add(
  336|  78.8k|            match *digit {
  337|  78.8k|                b'0'..=b'9' => digit - b'0',
  338|  29.3k|                b'a'..=b'f' => digit - b'a' + 10,
  339|      0|                _ => return None,
  340|       |            }
  341|  78.8k|            .into(),
  342|      0|        )?;
  343|       |    }
  344|  4.95k|    Some(value)
  345|  4.95k|}
_RNvXsf_NtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCsevdOxZso2fM_4core5clone5Clone5cloneB7_:
   20|  2.01k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsm_NtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCsevdOxZso2fM_4core5clone5Clone5cloneB7_:
   23|  2.01k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsJ_NtCsfYjWOBsMZ7D_5oxrdf10blank_nodeNtB5_5IdStrNtNtCsevdOxZso2fM_4core5clone5Clone5cloneB7_:
  250|  1.38k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]

_RINvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB3_7Dataset6insertRNtNtB5_6triple4QuadECsiApsw9S2n9N_4trig:
  361|  40.2k|    pub fn insert<'a>(&mut self, quad: impl Into<QuadRef<'a>>) -> bool {
  362|  40.2k|        let quad = self.encode_quad(quad.into());
  363|  40.2k|        self.insert_encoded(quad)
  364|  40.2k|    }
_RINvXs3_NtCsfYjWOBsMZ7D_5oxrdf7datasetNtB6_7DatasetINtNtNtNtCsevdOxZso2fM_4core4iter6traits7collect12FromIteratorRNtNtB8_6triple4QuadE9from_iterINtNtNtBW_5slice4iter4IterB1O_EECsiApsw9S2n9N_4trig:
  945|  3.54k|    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self {
  946|  3.54k|        let mut g = Self::new();
  947|  3.54k|        g.extend(iter);
  948|  3.54k|        g
  949|  3.54k|    }
_RINvXs5_NtCsfYjWOBsMZ7D_5oxrdf7datasetNtB6_7DatasetINtNtNtNtCsevdOxZso2fM_4core4iter6traits7collect6ExtendRNtNtB8_6triple4QuadE6extendINtNtNtBW_5slice4iter4IterB1H_EECsiApsw9S2n9N_4trig:
  961|  3.54k|    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  962|  43.7k|        for t in iter {
  963|  40.2k|            self.insert(t);
  964|  40.2k|        }
  965|  3.54k|    }
_RNvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB2_7Dataset3new:
  110|  3.54k|    pub fn new() -> Self {
  111|  3.54k|        Self::default()
  112|  3.54k|    }
_RNvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB2_7Dataset4iter:
  170|  1.77k|    pub fn iter(&self) -> Iter<'_> {
  171|  1.77k|        let iter = self.spog.iter();
  172|  1.77k|        Iter {
  173|  1.77k|            dataset: self,
  174|  1.77k|            inner: iter,
  175|  1.77k|        }
  176|  1.77k|    }
_RNvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB2_7Dataset3len:
  351|  3.54k|    pub fn len(&self) -> usize {
  352|  3.54k|        self.gspo.len()
  353|  3.54k|    }
_RNvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB2_7Dataset14insert_encoded:
  366|  68.9k|    fn insert_encoded(
  367|  68.9k|        &mut self,
  368|  68.9k|        quad: (
  369|  68.9k|            InternedSubject,
  370|  68.9k|            InternedNamedNode,
  371|  68.9k|            InternedTerm,
  372|  68.9k|            InternedGraphName,
  373|  68.9k|        ),
  374|  68.9k|    ) -> bool {
  375|  68.9k|        let (s, p, o, g) = quad;
  376|  68.9k|        self.gspo.insert((g.clone(), s.clone(), p, o.clone()));
  377|  68.9k|        self.gpos.insert((g.clone(), p, o.clone(), s.clone()));
  378|  68.9k|        self.gosp.insert((g.clone(), o.clone(), s.clone(), p));
  379|  68.9k|        self.spog.insert((s.clone(), p, o.clone(), g.clone()));
  380|  68.9k|        self.posg.insert((p, o.clone(), s.clone(), g.clone()));
  381|  68.9k|        self.ospg.insert((o, s, p, g))
  382|  68.9k|    }
_RNvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB2_7Dataset5clear:
  412|  3.54k|    pub fn clear(&mut self) {
  413|  3.54k|        self.gspo.clear();
  414|  3.54k|        self.gpos.clear();
  415|  3.54k|        self.gosp.clear();
  416|  3.54k|        self.spog.clear();
  417|  3.54k|        self.posg.clear();
  418|  3.54k|        self.ospg.clear();
  419|  3.54k|    }
_RNvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB2_7Dataset11encode_quad:
  421|  40.2k|    fn encode_quad(
  422|  40.2k|        &mut self,
  423|  40.2k|        quad: QuadRef<'_>,
  424|  40.2k|    ) -> (
  425|  40.2k|        InternedSubject,
  426|  40.2k|        InternedNamedNode,
  427|  40.2k|        InternedTerm,
  428|  40.2k|        InternedGraphName,
  429|  40.2k|    ) {
  430|  40.2k|        (
  431|  40.2k|            InternedSubject::encoded_into(quad.subject, &mut self.interner),
  432|  40.2k|            InternedNamedNode::encoded_into(quad.predicate, &mut self.interner),
  433|  40.2k|            InternedTerm::encoded_into(quad.object, &mut self.interner),
  434|  40.2k|            InternedGraphName::encoded_into(quad.graph_name, &mut self.interner),
  435|  40.2k|        )
  436|  40.2k|    }
_RNvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB2_7Dataset12encoded_quad:
  438|  14.3k|    fn encoded_quad(
  439|  14.3k|        &self,
  440|  14.3k|        quad: QuadRef<'_>,
  441|  14.3k|    ) -> Option<(
  442|  14.3k|        InternedSubject,
  443|  14.3k|        InternedNamedNode,
  444|  14.3k|        InternedTerm,
  445|  14.3k|        InternedGraphName,
  446|  14.3k|    )> {
  447|  14.3k|        Some((
  448|  14.3k|            self.encoded_subject(quad.subject)?,
  449|  14.3k|            self.encoded_named_node(quad.predicate)?,
  450|  14.3k|            self.encoded_term(quad.object)?,
  451|  14.3k|            self.encoded_graph_name(quad.graph_name)?,
  452|       |        ))
  453|  14.3k|    }
_RNvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB2_7Dataset11decode_spog:
  480|  14.3k|    fn decode_spog(
  481|  14.3k|        &self,
  482|  14.3k|        quad: (
  483|  14.3k|            &InternedSubject,
  484|  14.3k|            &InternedNamedNode,
  485|  14.3k|            &InternedTerm,
  486|  14.3k|            &InternedGraphName,
  487|  14.3k|        ),
  488|  14.3k|    ) -> QuadRef<'_> {
  489|  14.3k|        QuadRef {
  490|  14.3k|            subject: quad.0.decode_from(&self.interner),
  491|  14.3k|            predicate: quad.1.decode_from(&self.interner),
  492|  14.3k|            object: quad.2.decode_from(&self.interner),
  493|  14.3k|            graph_name: quad.3.decode_from(&self.interner),
  494|  14.3k|        }
  495|  14.3k|    }
_RNvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB2_7Dataset12canonicalize:
  542|  3.54k|    pub fn canonicalize(&mut self) {
  543|  3.54k|        let bnodes = self.blank_nodes();
  544|  3.54k|        let quads_per_blank_node = self.quads_per_blank_nodes();
  545|  3.54k|        let (hash, partition) = self.hash_bnodes(
  546|  3.54k|            bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
  547|  3.54k|            &quads_per_blank_node,
  548|  3.54k|        );
  549|  3.54k|        let new_quads = self.distinguish(&hash, &partition, &quads_per_blank_node);
  550|  3.54k|        self.clear();
  551|  32.2k|        for quad in new_quads {
  552|  28.7k|            self.insert_encoded(quad);
  553|  28.7k|        }
  554|  3.54k|    }
_RNvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB2_7Dataset11blank_nodes:
  556|  3.54k|    fn blank_nodes(&self) -> HashSet<InternedBlankNode> {
  557|  3.54k|        let mut bnodes = HashSet::new();
  558|  32.2k|        for (g, s, _, o) in &self.gspo {
  559|  28.7k|            if let InternedSubject::BlankNode(bnode) = s {
  560|  7.27k|                bnodes.insert(*bnode);
  561|  21.4k|            }
  562|       |            #[cfg(feature = "rdf-star")]
  563|  28.7k|            if let InternedSubject::Triple(triple) = s {
  564|  2.64k|                Self::triple_blank_nodes(triple, &mut bnodes);
  565|  26.0k|            }
  566|  28.7k|            if let InternedTerm::BlankNode(bnode) = o {
  567|  2.37k|                bnodes.insert(*bnode);
  568|  26.3k|            }
  569|       |            #[cfg(feature = "rdf-star")]
  570|  28.7k|            if let InternedTerm::Triple(triple) = o {
  571|  1.63k|                Self::triple_blank_nodes(triple, &mut bnodes);
  572|  27.0k|            }
  573|  28.7k|            if let InternedGraphName::BlankNode(bnode) = g {
  574|    262|                bnodes.insert(*bnode);
  575|  28.4k|            }
  576|       |        }
  577|  3.54k|        bnodes
  578|  3.54k|    }
_RNvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB2_7Dataset18triple_blank_nodes:
  581|  6.87k|    fn triple_blank_nodes(triple: &InternedTriple, bnodes: &mut HashSet<InternedBlankNode>) {
  582|  6.87k|        if let InternedSubject::BlankNode(bnode) = &triple.subject {
  583|    110|            bnodes.insert(*bnode);
  584|  6.76k|        } else if let InternedSubject::Triple(t) = &triple.subject {
  585|  2.59k|            Self::triple_blank_nodes(t, bnodes);
  586|  4.17k|        }
  587|  6.87k|        if let InternedTerm::BlankNode(bnode) = &triple.object {
  588|    238|            bnodes.insert(*bnode);
  589|  6.64k|        } else if let InternedTerm::Triple(t) = &triple.object {
  590|      0|            Self::triple_blank_nodes(t, bnodes);
  591|  6.64k|        }
  592|  6.87k|    }
_RNvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB2_7Dataset21quads_per_blank_nodes:
  594|  3.54k|    fn quads_per_blank_nodes(&self) -> QuadsPerBlankNode {
  595|  3.54k|        let mut map: HashMap<_, Vec<_>> = HashMap::new();
  596|  32.2k|        for quad in &self.spog {
  597|  28.7k|            if let InternedSubject::BlankNode(bnode) = &quad.0 {
  598|  7.27k|                map.entry(*bnode).or_default().push(quad.clone());
  599|  21.4k|            }
  600|       |            #[cfg(feature = "rdf-star")]
  601|  28.7k|            if let InternedSubject::Triple(t) = &quad.0 {
  602|  2.64k|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  603|  26.0k|            }
  604|  28.7k|            if let InternedTerm::BlankNode(bnode) = &quad.2 {
  605|  2.37k|                map.entry(*bnode).or_default().push(quad.clone());
  606|  26.3k|            }
  607|       |            #[cfg(feature = "rdf-star")]
  608|  28.7k|            if let InternedTerm::Triple(t) = &quad.2 {
  609|  1.63k|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  610|  27.0k|            }
  611|  28.7k|            if let InternedGraphName::BlankNode(bnode) = &quad.3 {
  612|    262|                map.entry(*bnode).or_default().push(quad.clone());
  613|  28.4k|            }
  614|       |        }
  615|  3.54k|        map
  616|  3.54k|    }
_RNvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB2_7Dataset55add_quad_with_quoted_triple_to_quad_per_blank_nodes_map:
  619|  6.87k|    fn add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(
  620|  6.87k|        quad: &(
  621|  6.87k|            InternedSubject,
  622|  6.87k|            InternedNamedNode,
  623|  6.87k|            InternedTerm,
  624|  6.87k|            InternedGraphName,
  625|  6.87k|        ),
  626|  6.87k|        triple: &InternedTriple,
  627|  6.87k|        map: &mut QuadsPerBlankNode,
  628|  6.87k|    ) {
  629|  6.87k|        if let InternedSubject::BlankNode(bnode) = &triple.subject {
  630|    110|            map.entry(*bnode).or_default().push(quad.clone());
  631|  6.76k|        }
  632|  6.87k|        if let InternedSubject::Triple(t) = &triple.subject {
  633|  2.59k|            Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, map);
  634|  4.28k|        }
  635|  6.87k|        if let InternedTerm::BlankNode(bnode) = &triple.object {
  636|    238|            map.entry(*bnode).or_default().push(quad.clone());
  637|  6.64k|        }
  638|  6.87k|        if let InternedTerm::Triple(t) = &triple.object {
  639|      0|            Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, map);
  640|  6.87k|        }
  641|  6.87k|    }
_RNvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB2_7Dataset11hash_bnodes:
  643|  17.8k|    fn hash_bnodes(
  644|  17.8k|        &self,
  645|  17.8k|        mut hashes: HashMap<InternedBlankNode, u64>,
  646|  17.8k|        quads_per_blank_node: &QuadsPerBlankNode,
  647|  17.8k|    ) -> (
  648|  17.8k|        HashMap<InternedBlankNode, u64>,
  649|  17.8k|        Vec<(u64, Vec<InternedBlankNode>)>,
  650|  17.8k|    ) {
  651|  17.8k|        let mut to_hash = Vec::new();
  652|  17.8k|        let mut to_do = hashes
  653|  17.8k|            .keys()
  654|  17.8k|            .map(|bnode| (*bnode, true))
  655|  17.8k|            .collect::<HashMap<_, _>>();
  656|  17.8k|        let mut partition = HashMap::<_, Vec<_>>::with_capacity(hashes.len());
  657|  17.8k|        let mut old_partition_count = usize::MAX;
  658|  53.5k|        while old_partition_count != partition.len() {
  659|  35.6k|            old_partition_count = partition.len();
  660|  35.6k|            partition.clear();
  661|  35.6k|            let mut new_hashes = hashes.clone();
  662|   126k|            for bnode in hashes.keys() {
  663|   126k|                let hash = if to_do.contains_key(bnode) {
  664|   130k|                    for (s, p, o, g) in &quads_per_blank_node[bnode] {
  665|   130k|                        to_hash.push((
  666|   130k|                            self.hash_subject(s, *bnode, &hashes),
  667|   130k|                            self.hash_named_node(*p),
  668|   130k|                            self.hash_term(o, *bnode, &hashes),
  669|   130k|                            self.hash_graph_name(g, *bnode, &hashes),
  670|   130k|                        ));
  671|   130k|                    }
  672|   126k|                    to_hash.sort_unstable();
  673|   126k|                    let hash = Self::hash_tuple((&to_hash, hashes[bnode]));
  674|   126k|                    to_hash.clear();
  675|   126k|                    if hash == hashes[bnode] {
  676|      0|                        to_do.insert(*bnode, false);
  677|   126k|                    } else {
  678|   126k|                        new_hashes.insert(*bnode, hash);
  679|   126k|                    }
  680|   126k|                    hash
  681|       |                } else {
  682|      0|                    hashes[bnode]
  683|       |                };
  684|   126k|                partition.entry(hash).or_default().push(*bnode);
  685|       |            }
  686|  35.6k|            hashes = new_hashes;
  687|       |        }
  688|  17.8k|        let mut partition: Vec<_> = partition.into_iter().collect();
  689|  17.8k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));
  690|  17.8k|        (hashes, partition)
  691|  17.8k|    }
_RNvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB2_7Dataset15hash_named_node:
  693|   161k|    fn hash_named_node(&self, node: InternedNamedNode) -> u64 {
  694|   161k|        Self::hash_tuple(node.decode_from(&self.interner))
  695|   161k|    }
_RNvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB2_7Dataset15hash_blank_node:
  697|   140k|    fn hash_blank_node(
  698|   140k|        node: InternedBlankNode,
  699|   140k|        current_blank_node: InternedBlankNode,
  700|   140k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  701|   140k|    ) -> u64 {
  702|   140k|        if node == current_blank_node {
  703|   130k|            u64::MAX
  704|       |        } else {
  705|  10.6k|            bnodes_hash[&node]
  706|       |        }
  707|   140k|    }
_RNvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB2_7Dataset12hash_subject:
  709|   161k|    fn hash_subject(
  710|   161k|        &self,
  711|   161k|        node: &InternedSubject,
  712|   161k|        current_blank_node: InternedBlankNode,
  713|   161k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  714|   161k|    ) -> u64 {
  715|   161k|        match node {
  716|  53.7k|            InternedSubject::NamedNode(node) => Self::hash_tuple(node.decode_from(&self.interner)),
  717|   107k|            InternedSubject::BlankNode(bnode) => {
  718|   107k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  719|       |            }
  720|       |            #[cfg(feature = "rdf-star")]
  721|      4|            InternedSubject::Triple(triple) => {
  722|      4|                self.hash_triple(triple, current_blank_node, bnodes_hash)
  723|       |            }
  724|       |        }
  725|   161k|    }
_RNvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB2_7Dataset9hash_term:
  727|   161k|    fn hash_term(
  728|   161k|        &self,
  729|   161k|        term: &InternedTerm,
  730|   161k|        current_blank_node: InternedBlankNode,
  731|   161k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  732|   161k|    ) -> u64 {
  733|   161k|        match term {
  734|  7.41k|            InternedTerm::NamedNode(node) => Self::hash_tuple(node.decode_from(&self.interner)),
  735|  32.0k|            InternedTerm::BlankNode(bnode) => {
  736|  32.0k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  737|       |            }
  738|  90.7k|            InternedTerm::Literal(literal) => Self::hash_tuple(literal.decode_from(&self.interner)),
  739|       |            #[cfg(feature = "rdf-star")]
  740|  31.0k|            InternedTerm::Triple(triple) => {
  741|  31.0k|                self.hash_triple(triple, current_blank_node, bnodes_hash)
  742|       |            }
  743|       |        }
  744|   161k|    }
_RNvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB2_7Dataset15hash_graph_name:
  746|   130k|    fn hash_graph_name(
  747|   130k|        &self,
  748|   130k|        graph_name: &InternedGraphName,
  749|   130k|        current_blank_node: InternedBlankNode,
  750|   130k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  751|   130k|    ) -> u64 {
  752|   130k|        match graph_name {
  753|  15.7k|            InternedGraphName::NamedNode(node) => {
  754|  15.7k|                Self::hash_tuple(node.decode_from(&self.interner))
  755|       |            }
  756|  1.44k|            InternedGraphName::BlankNode(bnode) => {
  757|  1.44k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  758|       |            }
  759|   112k|            InternedGraphName::DefaultGraph => 0,
  760|       |        }
  761|   130k|    }
_RNvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB2_7Dataset11hash_triple:
  764|  31.0k|    fn hash_triple(
  765|  31.0k|        &self,
  766|  31.0k|        triple: &InternedTriple,
  767|  31.0k|        current_blank_node: InternedBlankNode,
  768|  31.0k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  769|  31.0k|    ) -> u64 {
  770|  31.0k|        Self::hash_tuple((
  771|  31.0k|            self.hash_subject(&triple.subject, current_blank_node, bnodes_hash),
  772|  31.0k|            self.hash_named_node(triple.predicate),
  773|  31.0k|            self.hash_term(&triple.object, current_blank_node, bnodes_hash),
  774|  31.0k|        ))
  775|  31.0k|    }
_RNvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB2_7Dataset11distinguish:
  783|  17.8k|    fn distinguish(
  784|  17.8k|        &mut self,
  785|  17.8k|        hash: &HashMap<InternedBlankNode, u64>,
  786|  17.8k|        partition: &[(u64, Vec<InternedBlankNode>)],
  787|  17.8k|        quads_per_blank_node: &QuadsPerBlankNode,
  788|  17.8k|    ) -> Vec<(
  789|  17.8k|        InternedSubject,
  790|  17.8k|        InternedNamedNode,
  791|  17.8k|        InternedTerm,
  792|  17.8k|        InternedGraphName,
  793|  17.8k|    )> {
  794|  17.8k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
  795|  17.8k|        if let Some(b_prime) = b_prime {
  796|  6.24k|            b_prime
  797|  6.24k|                .iter()
  798|  6.24k|                .map(|b| {
  799|       |                    let mut hash_prime = hash.clone();
  800|       |                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  801|       |                    let (hash_prime_prime, partition_prime) =
  802|       |                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  803|       |                    self.distinguish(&hash_prime_prime, &partition_prime, quads_per_blank_node)
  804|  6.24k|                })
  805|  6.24k|                .reduce(min)
  806|  6.24k|                .unwrap_or_default()
  807|       |        } else {
  808|  11.5k|            self.label(hash)
  809|       |        }
  810|  17.8k|    }
_RNvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB2_7Dataset5label:
  813|  11.5k|    fn label(
  814|  11.5k|        &mut self,
  815|  11.5k|        hashes: &HashMap<InternedBlankNode, u64>,
  816|  11.5k|    ) -> Vec<(
  817|  11.5k|        InternedSubject,
  818|  11.5k|        InternedNamedNode,
  819|  11.5k|        InternedTerm,
  820|  11.5k|        InternedGraphName,
  821|  11.5k|    )> {
  822|  11.5k|        let old_quads: Vec<_> = self.spog.iter().cloned().collect();
  823|  11.5k|        let mut quads: Vec<_> = old_quads
  824|  11.5k|            .into_iter()
  825|  11.5k|            .map(|(s, p, o, g)| {
  826|       |                (
  827|       |                    match s {
  828|       |                        InternedSubject::NamedNode(_) => s,
  829|       |                        InternedSubject::BlankNode(bnode) => {
  830|       |                            InternedSubject::BlankNode(self.map_bnode(bnode, hashes))
  831|       |                        }
  832|       |                        #[cfg(feature = "rdf-star")]
  833|       |                        InternedSubject::Triple(triple) => {
  834|       |                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  835|       |                                self.label_triple(&triple, hashes).as_ref(),
  836|       |                                &mut self.interner,
  837|       |                            )))
  838|       |                        }
  839|       |                    },
  840|       |                    p,
  841|       |                    match o {
  842|       |                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  843|       |                        InternedTerm::BlankNode(bnode) => {
  844|       |                            InternedTerm::BlankNode(self.map_bnode(bnode, hashes))
  845|       |                        }
  846|       |                        #[cfg(feature = "rdf-star")]
  847|       |                        InternedTerm::Triple(triple) => {
  848|       |                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  849|       |                                self.label_triple(&triple, hashes).as_ref(),
  850|       |                                &mut self.interner,
  851|       |                            )))
  852|       |                        }
  853|       |                    },
  854|       |                    match g {
  855|       |                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  856|       |                        InternedGraphName::BlankNode(bnode) => {
  857|       |                            InternedGraphName::BlankNode(self.map_bnode(bnode, hashes))
  858|       |                        }
  859|       |                    },
  860|       |                )
  861|  11.5k|            })
  862|  11.5k|            .collect();
  863|  11.5k|        quads.sort_unstable();
  864|  11.5k|        quads
  865|  11.5k|    }
_RNvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB2_7Dataset12label_triple:
  868|  52.2k|    fn label_triple(
  869|  52.2k|        &mut self,
  870|  52.2k|        triple: &InternedTriple,
  871|  52.2k|        hashes: &HashMap<InternedBlankNode, u64>,
  872|  52.2k|    ) -> Triple {
  873|       |        Triple {
  874|  52.2k|            subject: if let InternedSubject::BlankNode(bnode) = &triple.subject {
  875|    156|                Self::gen_bnode(*bnode, hashes).into()
  876|  52.0k|            } else if let InternedSubject::Triple(t) = &triple.subject {
  877|  19.9k|                self.label_triple(t, hashes).into()
  878|       |            } else {
  879|  32.0k|                triple.subject.decode_from(&self.interner).into_owned()
  880|       |            },
  881|  52.2k|            predicate: triple.predicate.decode_from(&self.interner).into_owned(),
  882|  52.2k|            object: if let InternedTerm::BlankNode(bnode) = &triple.object {
  883|    342|                Self::gen_bnode(*bnode, hashes).into()
  884|  51.8k|            } else if let InternedTerm::Triple(t) = &triple.object {
  885|      0|                self.label_triple(t, hashes).into()
  886|       |            } else {
  887|  51.8k|                triple.object.decode_from(&self.interner).into_owned()
  888|       |            },
  889|       |        }
  890|  52.2k|    }
_RNvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB2_7Dataset9map_bnode:
  892|  40.6k|    fn map_bnode(
  893|  40.6k|        &mut self,
  894|  40.6k|        old_bnode: InternedBlankNode,
  895|  40.6k|        hashes: &HashMap<InternedBlankNode, u64>,
  896|  40.6k|    ) -> InternedBlankNode {
  897|  40.6k|        InternedBlankNode::encoded_into(
  898|  40.6k|            Self::gen_bnode(old_bnode, hashes).as_ref(),
  899|  40.6k|            &mut self.interner,
  900|  40.6k|        )
  901|  40.6k|    }
_RNvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB2_7Dataset9gen_bnode:
  903|  41.1k|    fn gen_bnode(
  904|  41.1k|        old_bnode: InternedBlankNode,
  905|  41.1k|        hashes: &HashMap<InternedBlankNode, u64>,
  906|  41.1k|    ) -> BlankNode {
  907|  41.1k|        BlankNode::new_from_unique_id(hashes[&old_bnode].into())
  908|  41.1k|    }
_RNvXs_NtCsfYjWOBsMZ7D_5oxrdf7datasetNtB4_7DatasetNtNtCsevdOxZso2fM_4core3cmp9PartialEq2eq:
  912|  1.77k|    fn eq(&self, other: &Self) -> bool {
  913|  1.77k|        if self.len() != other.len() {
  914|      0|            return false;
  915|  1.77k|        }
  916|  16.1k|        for q in self {
  917|  14.3k|            if !other.contains(q) {
  918|      0|                return false;
  919|  14.3k|            }
  920|       |        }
  921|  1.77k|        true
  922|  1.77k|    }
_RNvXs1_NtCsfYjWOBsMZ7D_5oxrdf7datasetRNtB5_7DatasetNtNtNtNtCsevdOxZso2fM_4core4iter6traits7collect12IntoIterator9into_iter:
  931|  1.77k|    fn into_iter(self) -> Self::IntoIter {
  932|  1.77k|        self.iter()
  933|  1.77k|    }
_RNvXsg_NtCsfYjWOBsMZ7D_5oxrdf7datasetNtB5_4IterNtNtNtNtCsevdOxZso2fM_4core4iter6traits8iterator8Iterator4next:
 1531|  16.1k|    fn next(&mut self) -> Option<Self::Item> {
 1532|  16.1k|        self.inner
 1533|  16.1k|            .next()
 1534|  16.1k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))
 1535|  16.1k|    }
_RNvXsj_NtCsfYjWOBsMZ7D_5oxrdf7datasetNtB5_7DatasetNtNtCsevdOxZso2fM_4core7default7Default7defaultB7_:
   67|  3.54k|#[derive(Debug, Default, Clone)]
_RINvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB3_7Dataset8containsNtNtB5_6triple7QuadRefEB5_:
  342|  14.3k|    pub fn contains<'a>(&self, quad: impl Into<QuadRef<'a>>) -> bool {
  343|  14.3k|        if let Some(q) = self.encoded_quad(quad.into()) {
  344|  14.3k|            self.spog.contains(&q)
  345|       |        } else {
  346|      0|            false
  347|       |        }
  348|  14.3k|    }
_RINvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB3_7Dataset18encoded_named_nodeNtNtB5_10named_node12NamedNodeRefEB5_:
  455|  14.3k|    pub(super) fn encoded_named_node<'a>(
  456|  14.3k|        &self,
  457|  14.3k|        node: impl Into<NamedNodeRef<'a>>,
  458|  14.3k|    ) -> Option<InternedNamedNode> {
  459|  14.3k|        InternedNamedNode::encoded_from(node.into(), &self.interner)
  460|  14.3k|    }
_RINvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB3_7Dataset15encoded_subjectNtNtB5_6triple10SubjectRefEB5_:
  462|  14.3k|    pub(super) fn encoded_subject<'a>(
  463|  14.3k|        &self,
  464|  14.3k|        node: impl Into<SubjectRef<'a>>,
  465|  14.3k|    ) -> Option<InternedSubject> {
  466|  14.3k|        InternedSubject::encoded_from(node.into(), &self.interner)
  467|  14.3k|    }
_RINvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB3_7Dataset12encoded_termNtNtB5_6triple7TermRefEB5_:
  469|  14.3k|    pub(super) fn encoded_term<'a>(&self, term: impl Into<TermRef<'a>>) -> Option<InternedTerm> {
  470|  14.3k|        InternedTerm::encoded_from(term.into(), &self.interner)
  471|  14.3k|    }
_RINvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB3_7Dataset18encoded_graph_nameNtNtB5_6triple12GraphNameRefEB5_:
  473|  14.3k|    pub(super) fn encoded_graph_name<'a>(
  474|  14.3k|        &self,
  475|  14.3k|        graph_name: impl Into<GraphNameRef<'a>>,
  476|  14.3k|    ) -> Option<InternedGraphName> {
  477|  14.3k|        InternedGraphName::encoded_from(graph_name.into(), &self.interner)
  478|  14.3k|    }
_RNCNvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB4_7Dataset12canonicalize0B6_:
  546|  8.79k|            bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
_RNCNvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB4_7Dataset11hash_bnodes0B6_:
  654|  63.3k|            .map(|bnode| (*bnode, true))
_RNCNvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB4_7Dataset11hash_bnodess_0B6_:
  689|  55.7k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));
_RINvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB3_7Dataset10hash_tupleNtNtB5_10named_node12NamedNodeRefEB5_:
  777|   238k|    fn hash_tuple(v: impl Hash) -> u64 {
  778|   238k|        let mut hasher = DefaultHasher::new();
  779|   238k|        v.hash(&mut hasher);
  780|   238k|        hasher.finish()
  781|   238k|    }
_RINvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB3_7Dataset10hash_tupleNtNtB5_7literal10LiteralRefEB5_:
  777|  90.7k|    fn hash_tuple(v: impl Hash) -> u64 {
  778|  90.7k|        let mut hasher = DefaultHasher::new();
  779|  90.7k|        v.hash(&mut hasher);
  780|  90.7k|        hasher.finish()
  781|  90.7k|    }
_RINvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB3_7Dataset10hash_tupleTRINtNtCs4msIGfPSjWU_5alloc3vec3VecTyyyyEEyEEB5_:
  777|   126k|    fn hash_tuple(v: impl Hash) -> u64 {
  778|   126k|        let mut hasher = DefaultHasher::new();
  779|   126k|        v.hash(&mut hasher);
  780|   126k|        hasher.finish()
  781|   126k|    }
_RINvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB3_7Dataset10hash_tupleTylEEB5_:
  777|  14.2k|    fn hash_tuple(v: impl Hash) -> u64 {
  778|  14.2k|        let mut hasher = DefaultHasher::new();
  779|  14.2k|        v.hash(&mut hasher);
  780|  14.2k|        hasher.finish()
  781|  14.2k|    }
_RINvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB3_7Dataset10hash_tupleTyyyEEB5_:
  777|  31.0k|    fn hash_tuple(v: impl Hash) -> u64 {
  778|  31.0k|        let mut hasher = DefaultHasher::new();
  779|  31.0k|        v.hash(&mut hasher);
  780|  31.0k|        hasher.finish()
  781|  31.0k|    }
_RNCNvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB4_7Dataset11distinguish0B6_:
  794|  55.0k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
_RNCNvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB4_7Dataset11distinguishs_0B6_:
  794|  55.0k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
_RNCNvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB4_7Dataset11distinguishs0_0B6_:
  798|  14.2k|                .map(|b| {
  799|  14.2k|                    let mut hash_prime = hash.clone();
  800|  14.2k|                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  801|  14.2k|                    let (hash_prime_prime, partition_prime) =
  802|  14.2k|                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  803|  14.2k|                    self.distinguish(&hash_prime_prime, &partition_prime, quads_per_blank_node)
  804|  14.2k|                })
_RNCNvMNtCsfYjWOBsMZ7D_5oxrdf7datasetNtB4_7Dataset5label0B6_:
  825|   138k|            .map(|(s, p, o, g)| {
  826|   138k|                (
  827|   138k|                    match s {
  828|  87.0k|                        InternedSubject::NamedNode(_) => s,
  829|  31.7k|                        InternedSubject::BlankNode(bnode) => {
  830|  31.7k|                            InternedSubject::BlankNode(self.map_bnode(bnode, hashes))
  831|       |                        }
  832|       |                        #[cfg(feature = "rdf-star")]
  833|  19.8k|                        InternedSubject::Triple(triple) => {
  834|  19.8k|                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  835|  19.8k|                                self.label_triple(&triple, hashes).as_ref(),
  836|  19.8k|                                &mut self.interner,
  837|  19.8k|                            )))
  838|       |                        }
  839|       |                    },
  840|   138k|                    p,
  841|   138k|                    match o {
  842|   117k|                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  843|  8.59k|                        InternedTerm::BlankNode(bnode) => {
  844|  8.59k|                            InternedTerm::BlankNode(self.map_bnode(bnode, hashes))
  845|       |                        }
  846|       |                        #[cfg(feature = "rdf-star")]
  847|  12.4k|                        InternedTerm::Triple(triple) => {
  848|  12.4k|                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  849|  12.4k|                                self.label_triple(&triple, hashes).as_ref(),
  850|  12.4k|                                &mut self.interner,
  851|  12.4k|                            )))
  852|       |                        }
  853|       |                    },
  854|   138k|                    match g {
  855|   138k|                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  856|    292|                        InternedGraphName::BlankNode(bnode) => {
  857|    292|                            InternedGraphName::BlankNode(self.map_bnode(bnode, hashes))
  858|       |                        }
  859|       |                    },
  860|       |                )
  861|   138k|            })
_RNCNvXsg_NtCsfYjWOBsMZ7D_5oxrdf7datasetNtB7_4IterNtNtNtNtCsevdOxZso2fM_4core4iter6traits8iterator8Iterator4next0B9_:
 1534|  14.3k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))

_RNvMNtCsfYjWOBsMZ7D_5oxrdf9interningNtB2_8Interner13get_or_intern:
   18|   363k|    fn get_or_intern(&mut self, value: &str) -> Key {
   19|   363k|        let mut hash = self.hash(value);
   20|   363k|        loop {
   21|   363k|            match self.string_for_hash.entry(hash) {
   22|  34.0k|                Entry::Vacant(e) => {
   23|  34.0k|                    e.insert(value.into());
   24|  34.0k|                    return Key(hash);
   25|       |                }
   26|   329k|                Entry::Occupied(e) => loop {
   27|   329k|                    if e.get() == value {
   28|   329k|                        return Key(hash);
   29|      0|                    } else if hash == u64::MAX - 1 {
   30|      0|                        hash = 0;
   31|      0|                    } else {
   32|      0|                        hash += 1;
   33|      0|                    }
   34|       |                },
   35|       |            }
   36|       |        }
   37|   363k|    }
_RNvMNtCsfYjWOBsMZ7D_5oxrdf9interningNtB2_8Interner3get:
   39|  59.4k|    fn get(&self, value: &str) -> Option<Key> {
   40|  59.4k|        let mut hash = self.hash(value);
   41|       |        loop {
   42|  59.4k|            let v = self.string_for_hash.get(&hash)?;
   43|  59.4k|            if v == value {
   44|  59.4k|                return Some(Key(hash));
   45|      0|            } else if hash == u64::MAX - 1 {
   46|      0|                hash = 0;
   47|      0|            } else {
   48|      0|                hash += 1;
   49|      0|            }
   50|       |        }
   51|  59.4k|    }
_RNvMNtCsfYjWOBsMZ7D_5oxrdf9interningNtB2_8Interner4hash:
   53|   423k|    fn hash(&self, value: &str) -> u64 {
   54|   423k|        let mut hasher = self.hasher.build_hasher();
   55|   423k|        hasher.write(value.as_bytes());
   56|   423k|        let hash = hasher.finish();
   57|   423k|        if hash == u64::MAX {
   58|      0|            0
   59|       |        } else {
   60|   423k|            hash
   61|       |        }
   62|   423k|    }
_RNvMNtCsfYjWOBsMZ7D_5oxrdf9interningNtB2_8Interner7resolve:
   64|   642k|    fn resolve(&self, key: Key) -> &str {
   65|   642k|        &self.string_for_hash[&key.0]
   66|   642k|    }
_RNvMs0_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_17InternedNamedNode12encoded_into:
   92|   269k|    pub fn encoded_into(named_node: NamedNodeRef<'_>, interner: &mut Interner) -> Self {
   93|   269k|        Self {
   94|   269k|            id: interner.get_or_intern(named_node.as_str()),
   95|   269k|        }
   96|   269k|    }
_RNvMs0_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_17InternedNamedNode12encoded_from:
   98|  45.2k|    pub fn encoded_from(named_node: NamedNodeRef<'_>, interner: &Interner) -> Option<Self> {
   99|  45.2k|        Some(Self {
  100|  45.2k|            id: interner.get(named_node.as_str())?,
  101|       |        })
  102|  45.2k|    }
_RNvMs0_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_17InternedNamedNode11decode_from:
  104|   484k|    pub fn decode_from(self, interner: &Interner) -> NamedNodeRef<'_> {
  105|   484k|        NamedNodeRef::new_unchecked(interner.resolve(self.id))
  106|   484k|    }
_RNvMs1_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_17InternedBlankNode12encoded_into:
  130|  51.4k|    pub fn encoded_into(blank_node: BlankNodeRef<'_>, interner: &mut Interner) -> Self {
  131|  51.4k|        if let Some(id) = blank_node.unique_id() {
  132|  50.4k|            interner
  133|  50.4k|                .string_for_blank_node_id
  134|  50.4k|                .entry(id)
  135|  50.4k|                .or_insert_with(|| blank_node.as_str().into());
  136|  50.4k|            Self::Number { id }
  137|       |        } else {
  138|  1.03k|            Self::Other {
  139|  1.03k|                id: interner.get_or_intern(blank_node.as_str()),
  140|  1.03k|            }
  141|       |        }
  142|  51.4k|    }
_RNvMs1_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_17InternedBlankNode12encoded_from:
  144|  5.12k|    pub fn encoded_from(blank_node: BlankNodeRef<'_>, interner: &Interner) -> Option<Self> {
  145|  5.12k|        if let Some(id) = blank_node.unique_id() {
  146|  5.12k|            interner
  147|  5.12k|                .string_for_blank_node_id
  148|  5.12k|                .contains_key(&id)
  149|  5.12k|                .then_some(Self::Number { id })
  150|       |        } else {
  151|       |            Some(Self::Other {
  152|      0|                id: interner.get(blank_node.as_str())?,
  153|       |            })
  154|       |        }
  155|  5.12k|    }
_RNvMs1_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_17InternedBlankNode11decode_from:
  157|  4.95k|    pub fn decode_from(self, interner: &Interner) -> BlankNodeRef<'_> {
  158|  4.95k|        BlankNodeRef::new_unchecked(match self {
  159|  4.95k|            Self::Number { id } => &interner.string_for_blank_node_id[&id],
  160|      0|            Self::Other { id } => interner.resolve(id),
  161|       |        })
  162|  4.95k|    }
_RNvMs2_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_15InternedLiteral12encoded_into:
  190|  93.3k|    pub fn encoded_into(literal: LiteralRef<'_>, interner: &mut Interner) -> Self {
  191|  93.3k|        let value_id = interner.get_or_intern(literal.value());
  192|  93.3k|        if literal.is_plain() {
  193|  2.24k|            if let Some(language) = literal.language() {
  194|    352|                Self::LanguageTaggedString {
  195|    352|                    value_id,
  196|    352|                    language_id: interner.get_or_intern(language),
  197|    352|                }
  198|       |            } else {
  199|  1.89k|                Self::String { value_id }
  200|       |            }
  201|       |        } else {
  202|  91.0k|            Self::TypedLiteral {
  203|  91.0k|                value_id,
  204|  91.0k|                datatype: InternedNamedNode::encoded_into(literal.datatype(), interner),
  205|  91.0k|            }
  206|       |        }
  207|  93.3k|    }
_RNvMs2_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_15InternedLiteral12encoded_from:
  209|  14.0k|    pub fn encoded_from(literal: LiteralRef<'_>, interner: &Interner) -> Option<Self> {
  210|  14.0k|        let value_id = interner.get(literal.value())?;
  211|  14.0k|        Some(if literal.is_plain() {
  212|    643|            if let Some(language) = literal.language() {
  213|       |                Self::LanguageTaggedString {
  214|    176|                    value_id,
  215|    176|                    language_id: interner.get(language)?,
  216|       |                }
  217|       |            } else {
  218|    467|                Self::String { value_id }
  219|       |            }
  220|       |        } else {
  221|       |            Self::TypedLiteral {
  222|  13.3k|                value_id,
  223|  13.3k|                datatype: InternedNamedNode::encoded_from(literal.datatype(), interner)?,
  224|       |            }
  225|       |        })
  226|  14.0k|    }
_RNvMs2_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_15InternedLiteral11decode_from:
  228|   152k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> LiteralRef<'a> {
  229|   152k|        match self {
  230|  11.4k|            Self::String { value_id } => {
  231|  11.4k|                LiteralRef::new_simple_literal(interner.resolve(*value_id))
  232|       |            }
  233|       |            Self::LanguageTaggedString {
  234|  5.90k|                value_id,
  235|  5.90k|                language_id,
  236|  5.90k|            } => LiteralRef::new_language_tagged_literal_unchecked(
  237|  5.90k|                interner.resolve(*value_id),
  238|  5.90k|                interner.resolve(*language_id),
  239|  5.90k|            ),
  240|   134k|            Self::TypedLiteral { value_id, datatype } => LiteralRef::new_typed_literal(
  241|   134k|                interner.resolve(*value_id),
  242|   134k|                datatype.decode_from(interner),
  243|   134k|            ),
  244|       |        }
  245|   152k|    }
_RNvMs3_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_15InternedSubject12encoded_into:
  276|   103k|    pub fn encoded_into(node: SubjectRef<'_>, interner: &mut Interner) -> Self {
  277|   103k|        match node {
  278|  66.7k|            SubjectRef::NamedNode(node) => {
  279|  66.7k|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  280|       |            }
  281|  7.58k|            SubjectRef::BlankNode(node) => {
  282|  7.58k|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  283|       |            }
  284|       |            #[cfg(feature = "rdf-star")]
  285|  29.2k|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  286|  29.2k|                triple.as_ref(),
  287|  29.2k|                interner,
  288|  29.2k|            ))),
  289|       |        }
  290|   103k|    }
_RNvMs3_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_15InternedSubject12encoded_from:
  292|  17.7k|    pub fn encoded_from(node: SubjectRef<'_>, interner: &Interner) -> Option<Self> {
  293|  17.7k|        Some(match node {
  294|  11.4k|            SubjectRef::NamedNode(node) => {
  295|  11.4k|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  296|       |            }
  297|  3.69k|            SubjectRef::BlankNode(node) => {
  298|  3.69k|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  299|       |            }
  300|       |            #[cfg(feature = "rdf-star")]
  301|  2.62k|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  302|  2.62k|                triple.as_ref(),
  303|  2.62k|                interner,
  304|  2.62k|            )?)),
  305|       |        })
  306|  17.7k|    }
_RNvMs3_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_15InternedSubject11decode_from:
  308|  46.4k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> SubjectRef<'a> {
  309|  46.4k|        match self {
  310|  41.4k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.decode_from(interner)),
  311|  3.63k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.decode_from(interner)),
  312|       |            #[cfg(feature = "rdf-star")]
  313|  1.32k|            Self::Triple(triple) => SubjectRef::Triple(&interner.triples[triple.as_ref()]),
  314|       |        }
  315|  46.4k|    }
_RNvMs4_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_17InternedGraphName12encoded_into:
  343|  40.2k|    pub fn encoded_into(node: GraphNameRef<'_>, interner: &mut Interner) -> Self {
  344|  40.2k|        match node {
  345|  37.7k|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  346|  2.17k|            GraphNameRef::NamedNode(node) => {
  347|  2.17k|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  348|       |            }
  349|    262|            GraphNameRef::BlankNode(node) => {
  350|    262|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  351|       |            }
  352|       |        }
  353|  40.2k|    }
_RNvMs4_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_17InternedGraphName12encoded_from:
  355|  14.3k|    pub fn encoded_from(node: GraphNameRef<'_>, interner: &Interner) -> Option<Self> {
  356|  14.3k|        Some(match node {
  357|  13.2k|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  358|    947|            GraphNameRef::NamedNode(node) => {
  359|    947|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  360|       |            }
  361|    131|            GraphNameRef::BlankNode(node) => {
  362|    131|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  363|       |            }
  364|       |        })
  365|  14.3k|    }
_RNvMs4_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_17InternedGraphName11decode_from:
  367|  14.3k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> GraphNameRef<'a> {
  368|  14.3k|        match self {
  369|  13.2k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  370|    947|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.decode_from(interner)),
  371|    131|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.decode_from(interner)),
  372|       |        }
  373|  14.3k|    }
_RNvMs5_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_12InternedTerm12encoded_into:
  402|   103k|    pub fn encoded_into(term: TermRef<'_>, interner: &mut Interner) -> Self {
  403|   103k|        match term {
  404|  5.43k|            TermRef::NamedNode(term) => {
  405|  5.43k|                Self::NamedNode(InternedNamedNode::encoded_into(term, interner))
  406|       |            }
  407|  2.96k|            TermRef::BlankNode(term) => {
  408|  2.96k|                Self::BlankNode(InternedBlankNode::encoded_into(term, interner))
  409|       |            }
  410|  93.3k|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_into(term, interner)),
  411|       |            #[cfg(feature = "rdf-star")]
  412|  1.88k|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  413|  1.88k|                triple.as_ref(),
  414|  1.88k|                interner,
  415|  1.88k|            ))),
  416|       |        }
  417|   103k|    }
_RNvMs5_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_12InternedTerm12encoded_from:
  419|  17.7k|    pub fn encoded_from(term: TermRef<'_>, interner: &Interner) -> Option<Self> {
  420|  17.7k|        Some(match term {
  421|  1.63k|            TermRef::NamedNode(term) => {
  422|  1.63k|                Self::NamedNode(InternedNamedNode::encoded_from(term, interner)?)
  423|       |            }
  424|  1.30k|            TermRef::BlankNode(term) => {
  425|  1.30k|                Self::BlankNode(InternedBlankNode::encoded_from(term, interner)?)
  426|       |            }
  427|  14.0k|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_from(term, interner)?),
  428|       |            #[cfg(feature = "rdf-star")]
  429|    818|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  430|    818|                triple.as_ref(),
  431|    818|                interner,
  432|    818|            )?)),
  433|       |        })
  434|  17.7k|    }
_RNvMs5_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_12InternedTerm11decode_from:
  436|  66.2k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> TermRef<'a> {
  437|  66.2k|        match self {
  438|  2.75k|            Self::NamedNode(term) => TermRef::NamedNode(term.decode_from(interner)),
  439|  1.18k|            Self::BlankNode(term) => TermRef::BlankNode(term.decode_from(interner)),
  440|  61.4k|            Self::Literal(term) => TermRef::Literal(term.decode_from(interner)),
  441|       |            #[cfg(feature = "rdf-star")]
  442|    818|            Self::Triple(triple) => TermRef::Triple(&interner.triples[triple.as_ref()]),
  443|       |        }
  444|  66.2k|    }
_RNvMs6_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_14InternedTriple12encoded_into:
  474|  63.3k|    pub fn encoded_into(triple: TripleRef<'_>, interner: &mut Interner) -> Self {
  475|  63.3k|        let interned_triple = Self {
  476|  63.3k|            subject: InternedSubject::encoded_into(triple.subject, interner),
  477|  63.3k|            predicate: InternedNamedNode::encoded_into(triple.predicate, interner),
  478|  63.3k|            object: InternedTerm::encoded_into(triple.object, interner),
  479|  63.3k|        };
  480|  63.3k|        interner
  481|  63.3k|            .triples
  482|  63.3k|            .insert(interned_triple.clone(), triple.into_owned());
  483|  63.3k|        interned_triple
  484|  63.3k|    }
_RNvMs6_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_14InternedTriple12encoded_from:
  486|  3.43k|    pub fn encoded_from(triple: TripleRef<'_>, interner: &Interner) -> Option<Self> {
  487|  3.43k|        let interned_triple = Self {
  488|  3.43k|            subject: InternedSubject::encoded_from(triple.subject, interner)?,
  489|  3.43k|            predicate: InternedNamedNode::encoded_from(triple.predicate, interner)?,
  490|  3.43k|            object: InternedTerm::encoded_from(triple.object, interner)?,
  491|       |        };
  492|  3.43k|        interner
  493|  3.43k|            .triples
  494|  3.43k|            .contains_key(&interned_triple)
  495|  3.43k|            .then_some(interned_triple)
  496|  3.43k|    }
_RNvXs7_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_21IdentityHasherBuilderNtNtCsevdOxZso2fM_4core4hash11BuildHasher12build_hasher:
  513|  1.09M|    fn build_hasher(&self) -> Self::Hasher {
  514|  1.09M|        Self::Hasher::default()
  515|  1.09M|    }
_RNvXs8_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_14IdentityHasherNtNtCsevdOxZso2fM_4core4hash6Hasher6finish:
  524|  1.09M|    fn finish(&self) -> u64 {
  525|  1.09M|        self.value
  526|  1.09M|    }
_RNvXs8_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_14IdentityHasherNtNtCsevdOxZso2fM_4core4hash6Hasher9write_u64:
  532|  1.09M|    fn write_u64(&mut self, i: u64) {
  533|  1.09M|        self.value = i
  534|  1.09M|    }
_RNvXsa_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_8InternerNtNtCsevdOxZso2fM_4core7default7Default7defaultB7_:
    7|  3.54k|#[derive(Debug, Default, Clone)]
_RNvXsf_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_3KeyNtNtCsevdOxZso2fM_4core3cmp9PartialEq2eqB7_:
   69|   474k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsg_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_3KeyNtNtCsevdOxZso2fM_4core3cmp3Ord3cmpB7_:
   69|  3.45M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsh_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_3KeyNtNtCsevdOxZso2fM_4core3cmp10PartialOrd11partial_cmpB7_:
   69|   465k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsp_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_17InternedNamedNodeNtNtCsevdOxZso2fM_4core3cmp9PartialEq2eqB7_:
   86|   271k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsq_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_17InternedNamedNodeNtNtCsevdOxZso2fM_4core3cmp3Ord3cmpB7_:
   86|  2.40M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsr_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_17InternedNamedNodeNtNtCsevdOxZso2fM_4core3cmp10PartialOrd11partial_cmpB7_:
   86|   376k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXst_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_17InternedNamedNodeNtNtCsevdOxZso2fM_4core5clone5Clone5cloneB7_:
   86|   953k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsz_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_17InternedBlankNodeNtNtCsevdOxZso2fM_4core3cmp9PartialEq2eqB7_:
  123|   861k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsA_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_17InternedBlankNodeNtNtCsevdOxZso2fM_4core3cmp3Ord3cmpB7_:
  123|  91.9k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsB_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_17InternedBlankNodeNtNtCsevdOxZso2fM_4core3cmp10PartialOrd11partial_cmpB7_:
  123|  46.8k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsD_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_17InternedBlankNodeNtNtCsevdOxZso2fM_4core5clone5Clone5cloneB7_:
  123|   159k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsJ_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_15InternedLiteralNtNtCsevdOxZso2fM_4core3cmp9PartialEq2eqB7_:
  174|   102k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsK_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_15InternedLiteralNtNtCsevdOxZso2fM_4core3cmp3Ord3cmpB7_:
  174|  1.05M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsL_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_15InternedLiteralNtNtCsevdOxZso2fM_4core3cmp10PartialOrd11partial_cmpB7_:
  174|  89.8k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsN_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_15InternedLiteralNtNtCsevdOxZso2fM_4core5clone5Clone5cloneB7_:
  174|   611k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsT_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_15InternedSubjectNtNtCsevdOxZso2fM_4core3cmp9PartialEq2eqB7_:
  267|   104k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsU_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_15InternedSubjectNtNtCsevdOxZso2fM_4core3cmp3Ord3cmpB7_:
  267|  1.26M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsV_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_15InternedSubjectNtNtCsevdOxZso2fM_4core3cmp10PartialOrd11partial_cmpB7_:
  267|   332k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsX_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB5_15InternedSubjectNtNtCsevdOxZso2fM_4core5clone5Clone5cloneB7_:
  267|   738k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs13_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB6_17InternedGraphNameNtNtCsevdOxZso2fM_4core3cmp3Ord3cmpB8_:
  335|  1.09M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs14_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB6_17InternedGraphNameNtNtCsevdOxZso2fM_4core3cmp10PartialOrd11partial_cmpB8_:
  335|  5.45k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs16_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB6_17InternedGraphNameNtNtCsevdOxZso2fM_4core5clone5Clone5cloneB8_:
  335|   493k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1b_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB6_12InternedTermNtNtCsevdOxZso2fM_4core3cmp9PartialEq2eqB8_:
  392|   103k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1c_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB6_12InternedTermNtNtCsevdOxZso2fM_4core3cmp3Ord3cmpB8_:
  392|  1.32M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1d_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB6_12InternedTermNtNtCsevdOxZso2fM_4core3cmp10PartialOrd11partial_cmpB8_:
  392|   111k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1f_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB6_12InternedTermNtNtCsevdOxZso2fM_4core5clone5Clone5cloneB8_:
  392|   738k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1k_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB6_14InternedTripleNtNtCsevdOxZso2fM_4core3cmp9PartialEq2eqB8_:
  465|   104k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1l_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB6_14InternedTripleNtNtCsevdOxZso2fM_4core3cmp3Ord3cmpB8_:
  465|   245k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1m_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB6_14InternedTripleNtNtCsevdOxZso2fM_4core3cmp10PartialOrd11partial_cmpB8_:
  465|  44.4k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1o_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB6_14InternedTripleNtNtCsevdOxZso2fM_4core5clone5Clone5cloneB8_:
  465|   244k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1q_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB6_21IdentityHasherBuilderNtNtCsevdOxZso2fM_4core7default7Default7defaultB8_:
  507|  3.54k|#[derive(Default, Clone)]
_RNvXs1s_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB6_14IdentityHasherNtNtCsevdOxZso2fM_4core7default7Default7defaultB8_:
  518|  1.09M|#[derive(Default)]
_RNCNvMs1_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB7_17InternedBlankNode12encoded_into0B9_:
  135|  16.7k|                .or_insert_with(|| blank_node.as_str().into());
_RINvXsl_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB6_3KeyNtNtCsevdOxZso2fM_4core4hash4Hash4hashNtNtNtCs283BBBqHk2D_3std4hash6random13DefaultHasherEB8_:
   69|   506k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RINvXsv_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB6_17InternedNamedNodeNtNtCsevdOxZso2fM_4core4hash4Hash4hashNtNtNtCs283BBBqHk2D_3std4hash6random13DefaultHasherEB8_:
   86|   298k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RINvXsF_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB6_17InternedBlankNodeNtNtCsevdOxZso2fM_4core4hash4Hash4hashNtNtNtCs283BBBqHk2D_3std4hash6random13DefaultHasherEB8_:
  123|   816k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RINvXsP_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB6_15InternedLiteralNtNtCsevdOxZso2fM_4core4hash4Hash4hashNtNtNtCs283BBBqHk2D_3std4hash6random13DefaultHasherEB8_:
  174|   111k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RINvXsY_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB6_15InternedSubjectNtNtCsevdOxZso2fM_4core4hash4Hash4hashNtNtNtCs283BBBqHk2D_3std4hash6random13DefaultHasherEB8_:
  267|   114k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RINvXs1g_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB7_12InternedTermNtNtCsevdOxZso2fM_4core4hash4Hash4hashNtNtNtCs283BBBqHk2D_3std4hash6random13DefaultHasherEB9_:
  392|   114k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RINvXs1p_NtCsfYjWOBsMZ7D_5oxrdf9interningNtB7_14InternedTripleNtNtCsevdOxZso2fM_4core4hash4Hash4hashNtNtNtCs283BBBqHk2D_3std4hash6random13DefaultHasherEB9_:
  465|   114k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]

_RNvMNtCsfYjWOBsMZ7D_5oxrdf7literalNtB2_7Literal6as_refCsiApsw9S2n9N_4trig:
  131|  66.9k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  132|  66.9k|        LiteralRef(match &self.0 {
  133|  4.78k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  134|  1.06k|            LiteralContent::LanguageTaggedString { value, language } => {
  135|  1.06k|                LiteralRefContent::LanguageTaggedString { value, language }
  136|       |            }
  137|  61.0k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  138|  61.0k|                value,
  139|  61.0k|                datatype: datatype.as_ref(),
  140|  61.0k|            },
  141|       |        })
  142|  66.9k|    }
_RNvXsD_NtCsfYjWOBsMZ7D_5oxrdf7literalNtB5_7LiteralNtNtCsevdOxZso2fM_4core3cmp9PartialEq2eqCsiApsw9S2n9N_4trig:
   36|  43.5k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsF_NtCsfYjWOBsMZ7D_5oxrdf7literalNtB5_7LiteralNtNtCsevdOxZso2fM_4core5clone5Clone5cloneCsiApsw9S2n9N_4trig:
   36|  2.49k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsI_NtCsfYjWOBsMZ7D_5oxrdf7literalNtB5_14LiteralContentNtNtCsevdOxZso2fM_4core3cmp9PartialEq2eqCsiApsw9S2n9N_4trig:
   39|  43.5k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsM_NtCsfYjWOBsMZ7D_5oxrdf7literalNtB5_14LiteralContentNtNtCsevdOxZso2fM_4core5clone5Clone5cloneCsiApsw9S2n9N_4trig:
   39|  2.49k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMNtCsfYjWOBsMZ7D_5oxrdf7literalNtB2_7Literal6as_refCsbUpIViwkCx3_5oxttl:
  131|  5.96k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  132|  5.96k|        LiteralRef(match &self.0 {
  133|     95|            LiteralContent::String(value) => LiteralRefContent::String(value),
  134|      0|            LiteralContent::LanguageTaggedString { value, language } => {
  135|      0|                LiteralRefContent::LanguageTaggedString { value, language }
  136|       |            }
  137|  5.87k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  138|  5.87k|                value,
  139|  5.87k|                datatype: datatype.as_ref(),
  140|  5.87k|            },
  141|       |        })
  142|  5.96k|    }
_RNvMst_NtCsfYjWOBsMZ7D_5oxrdf7literalNtB5_10LiteralRef5valueCsbUpIViwkCx3_5oxttl:
  490|  40.9k|    pub const fn value(self) -> &'a str {
  491|  40.9k|        match self.0 {
  492|  4.08k|            LiteralRefContent::String(value)
  493|    711|            | LiteralRefContent::LanguageTaggedString { value, .. }
  494|  40.9k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  495|  40.9k|        }
  496|  40.9k|    }
_RNvMst_NtCsfYjWOBsMZ7D_5oxrdf7literalNtB5_10LiteralRef8datatypeCsbUpIViwkCx3_5oxttl:
  515|  40.9k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  516|  40.9k|        match self.0 {
  517|  4.08k|            LiteralRefContent::String(_) => xsd::STRING,
  518|    711|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  519|  36.1k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  520|       |        }
  521|  40.9k|    }
_RNvXsF_NtCsfYjWOBsMZ7D_5oxrdf7literalNtB5_7LiteralNtNtCsevdOxZso2fM_4core5clone5Clone5cloneCsbUpIViwkCx3_5oxttl:
   36|   141k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsM_NtCsfYjWOBsMZ7D_5oxrdf7literalNtB5_14LiteralContentNtNtCsevdOxZso2fM_4core5clone5Clone5cloneCsbUpIViwkCx3_5oxttl:
   39|   141k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsu_NtCsfYjWOBsMZ7D_5oxrdf7literalNtB5_10LiteralRefNtNtCsevdOxZso2fM_4core3fmt7Display3fmtCsbUpIViwkCx3_5oxttl:
  567|  4.83k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  568|  4.83k|        match self.0 {
  569|  4.08k|            LiteralRefContent::String(value) => print_quoted_str(value, f),
  570|    711|            LiteralRefContent::LanguageTaggedString { value, language } => {
  571|    711|                print_quoted_str(value, f)?;
  572|    711|                write!(f, "@{language}")
  573|       |            }
  574|     36|            LiteralRefContent::TypedLiteral { value, datatype } => {
  575|     36|                print_quoted_str(value, f)?;
  576|     36|                write!(f, "^^{datatype}")
  577|       |            }
  578|       |        }
  579|  4.83k|    }
_RINvMNtCsfYjWOBsMZ7D_5oxrdf7literalNtB3_7Literal18new_simple_literalRNtNtCs4msIGfPSjWU_5alloc6string6StringECsbUpIViwkCx3_5oxttl:
   49|    213|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   50|    213|        Self(LiteralContent::String(value.into()))
   51|    213|    }
_RNvMNtCsfYjWOBsMZ7D_5oxrdf7literalNtB2_7Literal6as_refB4_:
  131|  64.5k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  132|  64.5k|        LiteralRef(match &self.0 {
  133|  1.17k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  134|      0|            LiteralContent::LanguageTaggedString { value, language } => {
  135|      0|                LiteralRefContent::LanguageTaggedString { value, language }
  136|       |            }
  137|  63.3k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  138|  63.3k|                value,
  139|  63.3k|                datatype: datatype.as_ref(),
  140|  63.3k|            },
  141|       |        })
  142|  64.5k|    }
_RNvMst_NtCsfYjWOBsMZ7D_5oxrdf7literalNtB5_10LiteralRef18new_simple_literalB7_:
  461|  11.4k|    pub const fn new_simple_literal(value: &'a str) -> Self {
  462|  11.4k|        LiteralRef(LiteralRefContent::String(value))
  463|  11.4k|    }
_RNvMst_NtCsfYjWOBsMZ7D_5oxrdf7literalNtB5_10LiteralRef37new_language_tagged_literal_uncheckedB7_:
  484|  5.90k|    pub const fn new_language_tagged_literal_unchecked(value: &'a str, language: &'a str) -> Self {
  485|  5.90k|        LiteralRef(LiteralRefContent::LanguageTaggedString { value, language })
  486|  5.90k|    }
_RNvMst_NtCsfYjWOBsMZ7D_5oxrdf7literalNtB5_10LiteralRef5valueB7_:
  490|   107k|    pub const fn value(self) -> &'a str {
  491|   107k|        match self.0 {
  492|  2.35k|            LiteralRefContent::String(value)
  493|    528|            | LiteralRefContent::LanguageTaggedString { value, .. }
  494|   107k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  495|   107k|        }
  496|   107k|    }
_RNvMst_NtCsfYjWOBsMZ7D_5oxrdf7literalNtB5_10LiteralRef8languageB7_:
  503|  2.88k|    pub const fn language(self) -> Option<&'a str> {
  504|  2.88k|        match self.0 {
  505|    528|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  506|  2.35k|            _ => None,
  507|       |        }
  508|  2.88k|    }
_RNvMst_NtCsfYjWOBsMZ7D_5oxrdf7literalNtB5_10LiteralRef8datatypeB7_:
  515|   104k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  516|   104k|        match self.0 {
  517|      0|            LiteralRefContent::String(_) => xsd::STRING,
  518|      0|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  519|   104k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  520|       |        }
  521|   104k|    }
_RNvMst_NtCsfYjWOBsMZ7D_5oxrdf7literalNtB5_10LiteralRef8is_plainB7_:
  528|   107k|    pub const fn is_plain(self) -> bool {
  529|   104k|        matches!(
  530|   107k|            self.0,
  531|       |            LiteralRefContent::String(_) | LiteralRefContent::LanguageTaggedString { .. }
  532|       |        )
  533|   107k|    }
_RNvMst_NtCsfYjWOBsMZ7D_5oxrdf7literalNtB5_10LiteralRef10into_ownedB7_:
  536|   111k|    pub fn into_owned(self) -> Literal {
  537|   111k|        Literal(match self.0 {
  538|  2.05k|            LiteralRefContent::String(value) => LiteralContent::String(value.to_owned()),
  539|      0|            LiteralRefContent::LanguageTaggedString { value, language } => {
  540|      0|                LiteralContent::LanguageTaggedString {
  541|      0|                    value: value.to_owned(),
  542|      0|                    language: language.to_owned(),
  543|      0|                }
  544|       |            }
  545|   109k|            LiteralRefContent::TypedLiteral { value, datatype } => LiteralContent::TypedLiteral {
  546|   109k|                value: value.to_owned(),
  547|   109k|                datatype: datatype.into_owned(),
  548|   109k|            },
  549|       |        })
  550|   111k|    }
_RNvXsF_NtCsfYjWOBsMZ7D_5oxrdf7literalNtB5_7LiteralNtNtCsevdOxZso2fM_4core5clone5Clone5cloneB7_:
   36|  74.8k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsM_NtCsfYjWOBsMZ7D_5oxrdf7literalNtB5_14LiteralContentNtNtCsevdOxZso2fM_4core5clone5Clone5cloneB7_:
   39|  74.8k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RINvMNtCsfYjWOBsMZ7D_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCs4msIGfPSjWU_5alloc6string6StringEB5_:
   49|  16.1k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   50|  16.1k|        Self(LiteralContent::String(value.into()))
   51|  16.1k|    }
_RINvMNtCsfYjWOBsMZ7D_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCs4msIGfPSjWU_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   55|    126|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   56|    126|        let value = value.into();
   57|    126|        let datatype = datatype.into();
   58|    126|        Self(if datatype == xsd::STRING {
   59|      0|            LiteralContent::String(value)
   60|       |        } else {
   61|    126|            LiteralContent::TypedLiteral { value, datatype }
   62|       |        })
   63|    126|    }
_RINvMNtCsfYjWOBsMZ7D_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   55|   131k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   56|   131k|        let value = value.into();
   57|   131k|        let datatype = datatype.into();
   58|   131k|        Self(if datatype == xsd::STRING {
   59|      0|            LiteralContent::String(value)
   60|       |        } else {
   61|   131k|            LiteralContent::TypedLiteral { value, datatype }
   62|       |        })
   63|   131k|    }
_RINvMNtCsfYjWOBsMZ7D_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCs4msIGfPSjWU_5alloc6string6StringB1n_EB5_:
   87|  2.97k|    pub fn new_language_tagged_literal_unchecked(
   88|  2.97k|        value: impl Into<String>,
   89|  2.97k|        language: impl Into<String>,
   90|  2.97k|    ) -> Self {
   91|  2.97k|        Self(LiteralContent::LanguageTaggedString {
   92|  2.97k|            value: value.into(),
   93|  2.97k|            language: language.into(),
   94|  2.97k|        })
   95|  2.97k|    }
_RINvMst_NtCsfYjWOBsMZ7D_5oxrdf7literalNtB6_10LiteralRef17new_typed_literalNtNtB8_10named_node12NamedNodeRefEB8_:
  467|   134k|    pub fn new_typed_literal(value: &'a str, datatype: impl Into<NamedNodeRef<'a>>) -> Self {
  468|   134k|        let datatype = datatype.into();
  469|   134k|        LiteralRef(if datatype == xsd::STRING {
  470|      0|            LiteralRefContent::String(value)
  471|       |        } else {
  472|   134k|            LiteralRefContent::TypedLiteral { value, datatype }
  473|       |        })
  474|   134k|    }
_RINvNtCsfYjWOBsMZ7D_5oxrdf7literal16print_quoted_strNtNtCsevdOxZso2fM_4core3fmt9FormatterEB4_:
  618|  4.83k|pub fn print_quoted_str(string: &str, f: &mut impl Write) -> fmt::Result {
  619|  4.83k|    f.write_char('"')?;
  620|  32.6k|    for c in string.chars() {
  621|  32.6k|        match c {
  622|    230|            '\u{08}' => f.write_str("\\b"),
  623|    232|            '\t' => f.write_str("\\t"),
  624|    292|            '\n' => f.write_str("\\n"),
  625|    217|            '\u{0c}' => f.write_str("\\f"),
  626|    283|            '\r' => f.write_str("\\r"),
  627|    904|            '"' => f.write_str("\\\""),
  628|     83|            '\\' => f.write_str("\\\\"),
  629|  30.4k|            '\0'..='\u{1f}' | '\u{7f}' => write!(f, "\\u{:04X}", u32::from(c)),
  630|  12.8k|            _ => f.write_char(c),
  631|      0|        }?;
  632|       |    }
  633|  4.83k|    f.write_char('"')
  634|  4.83k|}
_RINvXsV_NtCsfYjWOBsMZ7D_5oxrdf7literalNtB6_10LiteralRefNtNtCsevdOxZso2fM_4core4hash4Hash4hashNtNtNtCs283BBBqHk2D_3std4hash6random13DefaultHasherEB8_:
  442|  90.7k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RINvXs13_NtCsfYjWOBsMZ7D_5oxrdf7literalNtB7_17LiteralRefContentNtNtCsevdOxZso2fM_4core4hash4Hash4hashNtNtNtCs283BBBqHk2D_3std4hash6random13DefaultHasherEB9_:
  445|  90.7k|#[derive(PartialEq, Eq, Debug, Clone, Copy, Hash)]

_RNvMNtCsfYjWOBsMZ7D_5oxrdf10named_nodeNtB2_9NamedNode6as_refCsiApsw9S2n9N_4trig:
   54|   301k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|   301k|        NamedNodeRef::new_unchecked(&self.iri)
   56|   301k|    }
_RNvMNtCsfYjWOBsMZ7D_5oxrdf10named_nodeNtB2_9NamedNode6as_strCsiApsw9S2n9N_4trig:
   44|  15.7k|    pub fn as_str(&self) -> &str {
   45|  15.7k|        self.iri.as_str()
   46|  15.7k|    }
_RNvMs4_NtCsfYjWOBsMZ7D_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCsiApsw9S2n9N_4trig:
  138|  97.4k|    pub fn into_owned(self) -> NamedNode {
  139|  97.4k|        NamedNode::new_unchecked(self.iri)
  140|  97.4k|    }
_RNvMs4_NtCsfYjWOBsMZ7D_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCsiApsw9S2n9N_4trig:
  128|   301k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   301k|        Self { iri }
  130|   301k|    }
_RNvMs4_NtCsfYjWOBsMZ7D_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCsiApsw9S2n9N_4trig:
  133|   104k|    pub const fn as_str(self) -> &'a str {
  134|   104k|        self.iri
  135|   104k|    }
_RNvXs5_NtCsfYjWOBsMZ7D_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCsevdOxZso2fM_4core3fmt7Display3fmtCsiApsw9S2n9N_4trig:
  145|  88.4k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|  88.4k|        write!(f, "<{}>", self.as_str())
  147|  88.4k|    }
_RNvXs8_NtCsfYjWOBsMZ7D_5oxrdf10named_nodeNtB5_12NamedNodeRefINtNtCsevdOxZso2fM_4core3cmp9PartialEqNtB5_9NamedNodeE2eqCsiApsw9S2n9N_4trig:
  166|  15.7k|    fn eq(&self, other: &NamedNode) -> bool {
  167|  15.7k|        self.as_str() == other.as_str()
  168|  15.7k|    }
_RNvXsl_NtCsfYjWOBsMZ7D_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCsevdOxZso2fM_4core3cmp9PartialEq2eqCsiApsw9S2n9N_4trig:
   17|   183k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsp_NtCsfYjWOBsMZ7D_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCsevdOxZso2fM_4core5clone5Clone5cloneCsiApsw9S2n9N_4trig:
   17|  5.94k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsu_NtCsfYjWOBsMZ7D_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCsevdOxZso2fM_4core3cmp9PartialEq2eqCsiApsw9S2n9N_4trig:
  106|  22.3k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMNtCsfYjWOBsMZ7D_5oxrdf10named_nodeNtB2_9NamedNode6as_refCsbUpIViwkCx3_5oxttl:
   54|  16.4k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  16.4k|        NamedNodeRef::new_unchecked(&self.iri)
   56|  16.4k|    }
_RNvMs4_NtCsfYjWOBsMZ7D_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCsbUpIViwkCx3_5oxttl:
  138|  11.4k|    pub fn into_owned(self) -> NamedNode {
  139|  11.4k|        NamedNode::new_unchecked(self.iri)
  140|  11.4k|    }
_RNvMs4_NtCsfYjWOBsMZ7D_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCsbUpIViwkCx3_5oxttl:
  128|  16.4k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  16.4k|        Self { iri }
  130|  16.4k|    }
_RNvMs4_NtCsfYjWOBsMZ7D_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCsbUpIViwkCx3_5oxttl:
  133|  26.8k|    pub const fn as_str(self) -> &'a str {
  134|  26.8k|        self.iri
  135|  26.8k|    }
_RNvXs5_NtCsfYjWOBsMZ7D_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCsevdOxZso2fM_4core3fmt7Display3fmtCsbUpIViwkCx3_5oxttl:
  145|  26.8k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|  26.8k|        write!(f, "<{}>", self.as_str())
  147|  26.8k|    }
_RNvXs_NtCsfYjWOBsMZ7D_5oxrdf10named_nodeNtB4_9NamedNodeNtNtCsevdOxZso2fM_4core3fmt7Display3fmtCsbUpIViwkCx3_5oxttl:
   61|  6.58k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   62|  6.58k|        self.as_ref().fmt(f)
   63|  6.58k|    }
_RNvXsp_NtCsfYjWOBsMZ7D_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCsevdOxZso2fM_4core5clone5Clone5cloneCsbUpIViwkCx3_5oxttl:
   17|   599k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RINvMNtCsfYjWOBsMZ7D_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCs4msIGfPSjWU_5alloc6string6StringEB5_:
   39|   301k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   301k|        Self { iri: iri.into() }
   41|   301k|    }
_RINvMNtCsfYjWOBsMZ7D_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|   727k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   727k|        Self { iri: iri.into() }
   41|   727k|    }
_RINvXsA_NtCsfYjWOBsMZ7D_5oxrdf10named_nodeNtB6_12NamedNodeRefNtNtCsevdOxZso2fM_4core4hash4Hash4hashNtNtNtCs283BBBqHk2D_3std4hash6random13DefaultHasherEB8_:
  106|   313k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMNtCsfYjWOBsMZ7D_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|   131k|    pub fn as_str(&self) -> &str {
   45|   131k|        self.iri.as_str()
   46|   131k|    }
_RNvMNtCsfYjWOBsMZ7D_5oxrdf10named_nodeNtB2_9NamedNode6as_refB4_:
   54|   172k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|   172k|        NamedNodeRef::new_unchecked(&self.iri)
   56|   172k|    }
_RNvMs4_NtCsfYjWOBsMZ7D_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedB7_:
  128|   656k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   656k|        Self { iri }
  130|   656k|    }
_RNvMs4_NtCsfYjWOBsMZ7D_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|   446k|    pub const fn as_str(self) -> &'a str {
  134|   446k|        self.iri
  135|   446k|    }
_RNvMs4_NtCsfYjWOBsMZ7D_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|   618k|    pub fn into_owned(self) -> NamedNode {
  139|   618k|        NamedNode::new_unchecked(self.iri)
  140|   618k|    }
_RNvXs6_NtCsfYjWOBsMZ7D_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCsevdOxZso2fM_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|   319k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|   319k|        node.into_owned()
  154|   319k|    }
_RNvXs9_NtCsfYjWOBsMZ7D_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCsevdOxZso2fM_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|   131k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|   131k|        self.as_str() == other.as_str()
  175|   131k|    }
_RNvXsp_NtCsfYjWOBsMZ7D_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCsevdOxZso2fM_4core5clone5Clone5cloneB7_:
   17|   199k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsu_NtCsfYjWOBsMZ7D_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCsevdOxZso2fM_4core3cmp9PartialEq2eqB7_:
  106|   134k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]

_RNvMs18_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB6_9GraphName16is_default_graphCsiApsw9S2n9N_4trig:
  878|  96.0k|    pub fn is_default_graph(&self) -> bool {
  879|  96.0k|        self.as_ref().is_default_graph()
  880|  96.0k|    }
_RNvMs18_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB6_9GraphName6as_refCsiApsw9S2n9N_4trig:
  883|   324k|    pub fn as_ref(&self) -> GraphNameRef<'_> {
  884|   324k|        match self {
  885|  31.0k|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.as_ref()),
  886|  11.1k|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.as_ref()),
  887|   281k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  888|       |        }
  889|   324k|    }
_RNvMs1g_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB6_12GraphNameRef10into_ownedCsiApsw9S2n9N_4trig:
  971|  2.56k|    pub fn into_owned(self) -> GraphName {
  972|  2.56k|        match self {
  973|  1.32k|            Self::NamedNode(node) => GraphName::NamedNode(node.into_owned()),
  974|    377|            Self::BlankNode(node) => GraphName::BlankNode(node.into_owned()),
  975|    863|            Self::DefaultGraph => GraphName::DefaultGraph,
  976|       |        }
  977|  2.56k|    }
_RNvMs1g_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB6_12GraphNameRef16is_default_graphCsiApsw9S2n9N_4trig:
  966|  96.0k|    pub fn is_default_graph(&self) -> bool {
  967|  96.0k|        matches!(self, Self::DefaultGraph)
  968|  96.0k|    }
_RNvMs1q_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB6_4Quad6as_refCsiApsw9S2n9N_4trig:
 1100|   134k|    pub fn as_ref(&self) -> QuadRef<'_> {
 1101|   134k|        QuadRef {
 1102|   134k|            subject: self.subject.as_ref(),
 1103|   134k|            predicate: self.predicate.as_ref(),
 1104|   134k|            object: self.object.as_ref(),
 1105|   134k|            graph_name: self.graph_name.as_ref(),
 1106|   134k|        }
 1107|   134k|    }
_RNvMsc_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB5_7Subject6as_refCsiApsw9S2n9N_4trig:
  181|   222k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|   222k|        match self {
  183|  64.0k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|   149k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|  9.69k|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|   222k|    }
_RNvMsn_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB5_10SubjectRef10into_ownedCsiApsw9S2n9N_4trig:
  294|  78.2k|    pub fn into_owned(self) -> Subject {
  295|  78.2k|        match self {
  296|  8.92k|            Self::NamedNode(node) => Subject::NamedNode(node.into_owned()),
  297|  66.8k|            Self::BlankNode(node) => Subject::BlankNode(node.into_owned()),
  298|       |            #[cfg(feature = "rdf-star")]
  299|  2.49k|            Self::Triple(triple) => Subject::Triple(Box::new(triple.clone())),
  300|       |        }
  301|  78.2k|    }
_RNvMsy_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB5_4Term6as_refCsiApsw9S2n9N_4trig:
  417|   134k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|   134k|        match self {
  419|  11.3k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|  52.6k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  66.9k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|  3.29k|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|   134k|    }
_RNvXs1Q_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB6_7SubjectNtNtCsevdOxZso2fM_4core3cmp9PartialEq2eqCsiApsw9S2n9N_4trig:
  155|   106k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1S_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB6_7SubjectNtNtCsevdOxZso2fM_4core5clone5Clone5cloneCsiApsw9S2n9N_4trig:
  155|  2.49k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1X_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB6_10SubjectRefNtNtCsevdOxZso2fM_4core3cmp9PartialEq2eqCsiApsw9S2n9N_4trig:
  268|  88.6k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RNvXs1h_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB6_12GraphNameRefNtNtCsevdOxZso2fM_4core3fmt7Display3fmtCsiApsw9S2n9N_4trig:
  982|  1.70k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  983|  1.70k|        match self {
  984|  1.32k|            Self::NamedNode(node) => node.fmt(f),
  985|    377|            Self::BlankNode(node) => node.fmt(f),
  986|      0|            Self::DefaultGraph => write!(f, "DEFAULT"),
  987|       |        }
  988|  1.70k|    }
_RNvXs1w_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB6_7QuadRefINtNtCsevdOxZso2fM_4core7convert4FromRNtB6_4QuadE4fromCsiApsw9S2n9N_4trig:
 1216|   134k|    fn from(quad: &'a Quad) -> Self {
 1217|   134k|        quad.as_ref()
 1218|   134k|    }
_RNvXs25_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB6_4TermNtNtCsevdOxZso2fM_4core3cmp9PartialEq2eqCsiApsw9S2n9N_4trig:
  385|   103k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs27_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB6_4TermNtNtCsevdOxZso2fM_4core5clone5Clone5cloneCsiApsw9S2n9N_4trig:
  385|  2.49k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2H_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB6_12GraphNameRefNtNtCsevdOxZso2fM_4core3cmp9PartialEq2eqCsiApsw9S2n9N_4trig:
  946|  93.9k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash, Default)]
_RNvXs2Q_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB6_4QuadNtNtCsevdOxZso2fM_4core3cmp9PartialEq2eqCsiApsw9S2n9N_4trig:
 1067|  95.6k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2k_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB6_6TripleNtNtCsevdOxZso2fM_4core3cmp9PartialEq2eqCsiApsw9S2n9N_4trig:
  714|  10.4k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2m_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB6_6TripleNtNtCsevdOxZso2fM_4core5clone5Clone5cloneCsiApsw9S2n9N_4trig:
  714|  2.49k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2z_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB6_9GraphNameNtNtCsevdOxZso2fM_4core3cmp9PartialEq2eqCsiApsw9S2n9N_4trig:
  858|  95.6k|#[derive(Eq, PartialEq, Debug, Clone, Hash, Default)]
_RINvMs12_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB7_6Triple3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtB7_4TermECsbUpIViwkCx3_5oxttl:
  729|  19.8k|    pub fn new(
  730|  19.8k|        subject: impl Into<Subject>,
  731|  19.8k|        predicate: impl Into<NamedNode>,
  732|  19.8k|        object: impl Into<Term>,
  733|  19.8k|    ) -> Self {
  734|  19.8k|        Self {
  735|  19.8k|            subject: subject.into(),
  736|  19.8k|            predicate: predicate.into(),
  737|  19.8k|            object: object.into(),
  738|  19.8k|        }
  739|  19.8k|    }
_RINvMs1q_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node12NamedNodeRefB11_NtB7_9GraphNameECsbUpIViwkCx3_5oxttl:
 1085|  8.51k|    pub fn new(
 1086|  8.51k|        subject: impl Into<Subject>,
 1087|  8.51k|        predicate: impl Into<NamedNode>,
 1088|  8.51k|        object: impl Into<Term>,
 1089|  8.51k|        graph_name: impl Into<GraphName>,
 1090|  8.51k|    ) -> Self {
 1091|  8.51k|        Self {
 1092|  8.51k|            subject: subject.into(),
 1093|  8.51k|            predicate: predicate.into(),
 1094|  8.51k|            object: object.into(),
 1095|  8.51k|            graph_name: graph_name.into(),
 1096|  8.51k|        }
 1097|  8.51k|    }
_RINvMs1q_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node12NamedNodeRefNtNtB9_10blank_node9BlankNodeNtB7_9GraphNameECsbUpIViwkCx3_5oxttl:
 1085|  47.9k|    pub fn new(
 1086|  47.9k|        subject: impl Into<Subject>,
 1087|  47.9k|        predicate: impl Into<NamedNode>,
 1088|  47.9k|        object: impl Into<Term>,
 1089|  47.9k|        graph_name: impl Into<GraphName>,
 1090|  47.9k|    ) -> Self {
 1091|  47.9k|        Self {
 1092|  47.9k|            subject: subject.into(),
 1093|  47.9k|            predicate: predicate.into(),
 1094|  47.9k|            object: object.into(),
 1095|  47.9k|            graph_name: graph_name.into(),
 1096|  47.9k|        }
 1097|  47.9k|    }
_RINvMs1q_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtB7_4TermNtB7_9GraphNameECsbUpIViwkCx3_5oxttl:
 1085|   326k|    pub fn new(
 1086|   326k|        subject: impl Into<Subject>,
 1087|   326k|        predicate: impl Into<NamedNode>,
 1088|   326k|        object: impl Into<Term>,
 1089|   326k|        graph_name: impl Into<GraphName>,
 1090|   326k|    ) -> Self {
 1091|   326k|        Self {
 1092|   326k|            subject: subject.into(),
 1093|   326k|            predicate: predicate.into(),
 1094|   326k|            object: object.into(),
 1095|   326k|            graph_name: graph_name.into(),
 1096|   326k|        }
 1097|   326k|    }
_RNvMsc_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB5_7Subject6as_refCsbUpIViwkCx3_5oxttl:
  181|  6.58k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  6.58k|        match self {
  183|  3.76k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|    134|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|  2.68k|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  6.58k|    }
_RNvMsy_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB5_4Term6as_refCsbUpIViwkCx3_5oxttl:
  417|  6.58k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|  6.58k|        match self {
  419|    201|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|    415|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  5.96k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|      0|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|  6.58k|    }
_RNvXs0_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB5_16NamedOrBlankNodeINtNtCsevdOxZso2fM_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromCsbUpIViwkCx3_5oxttl:
   43|  93.0k|    fn from(node: NamedNode) -> Self {
   44|  93.0k|        Self::NamedNode(node)
   45|  93.0k|    }
_RNvXs1S_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB6_7SubjectNtNtCsevdOxZso2fM_4core5clone5Clone5cloneCsbUpIViwkCx3_5oxttl:
  155|   334k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1a_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB6_9GraphNameINtNtCsevdOxZso2fM_4core7convert4FromNtNtB8_10named_node9NamedNodeE4fromCsbUpIViwkCx3_5oxttl:
  901|  8.15k|    fn from(node: NamedNode) -> Self {
  902|  8.15k|        Self::NamedNode(node)
  903|  8.15k|    }
_RNvXs1c_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB6_9GraphNameINtNtCsevdOxZso2fM_4core7convert4FromNtNtB8_10blank_node9BlankNodeE4fromCsbUpIViwkCx3_5oxttl:
  915|  2.04k|    fn from(node: BlankNode) -> Self {
  916|  2.04k|        Self::BlankNode(node)
  917|  2.04k|    }
_RNvXs1e_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB6_9GraphNameINtNtCsevdOxZso2fM_4core7convert4FromNtB6_16NamedOrBlankNodeE4fromCsbUpIViwkCx3_5oxttl:
  929|  10.1k|    fn from(node: NamedOrBlankNode) -> Self {
  930|  10.1k|        match node {
  931|  8.15k|            NamedOrBlankNode::NamedNode(node) => node.into(),
  932|  2.04k|            NamedOrBlankNode::BlankNode(node) => node.into(),
  933|       |        }
  934|  10.1k|    }
_RNvXs27_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB6_4TermNtNtCsevdOxZso2fM_4core5clone5Clone5cloneCsbUpIViwkCx3_5oxttl:
  385|   326k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2B_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB6_9GraphNameNtNtCsevdOxZso2fM_4core5clone5Clone5cloneCsbUpIViwkCx3_5oxttl:
  858|   382k|#[derive(Eq, PartialEq, Debug, Clone, Hash, Default)]
_RNvXs2_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB5_16NamedOrBlankNodeINtNtCsevdOxZso2fM_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromCsbUpIViwkCx3_5oxttl:
   57|  59.3k|    fn from(node: BlankNode) -> Self {
   58|  59.3k|        Self::BlankNode(node)
   59|  59.3k|    }
_RNvXsB_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB5_4TermINtNtCsevdOxZso2fM_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCsbUpIViwkCx3_5oxttl:
  444|  11.2k|    fn from(node: NamedNodeRef<'_>) -> Self {
  445|  11.2k|        node.into_owned().into()
  446|  11.2k|    }
_RNvXsL_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB5_4TermINtNtCsevdOxZso2fM_4core7convert4FromNtB5_7SubjectE4fromCsbUpIViwkCx3_5oxttl:
  520|     96|    fn from(node: Subject) -> Self {
  521|     96|        match node {
  522|      0|            Subject::NamedNode(node) => node.into(),
  523|     96|            Subject::BlankNode(node) => node.into(),
  524|       |            #[cfg(feature = "rdf-star")]
  525|      0|            Subject::Triple(triple) => Self::Triple(triple),
  526|       |        }
  527|     96|    }
_RNvXsP_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB5_7TermRefINtNtCsevdOxZso2fM_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCsbUpIViwkCx3_5oxttl:
  599|  12.6k|    fn from(node: NamedNodeRef<'a>) -> Self {
  600|  12.6k|        Self::NamedNode(node)
  601|  12.6k|    }
_RNvXsR_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB5_7TermRefINtNtCsevdOxZso2fM_4core7convert4FromNtNtB7_10blank_node12BlankNodeRefE4fromCsbUpIViwkCx3_5oxttl:
  613|  66.9k|    fn from(node: BlankNodeRef<'a>) -> Self {
  614|  66.9k|        Self::BlankNode(node)
  615|  66.9k|    }
_RNvXsV_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB5_7TermRefINtNtCsevdOxZso2fM_4core7convert4FromRNtB5_6TripleE4fromCsbUpIViwkCx3_5oxttl:
  642|  5.17k|    fn from(node: &'a Triple) -> Self {
  643|  5.17k|        Self::Triple(node)
  644|  5.17k|    }
_RNvXsY_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB5_7TermRefINtNtCsevdOxZso2fM_4core7convert4FromNtB5_10SubjectRefE4fromCsbUpIViwkCx3_5oxttl:
  666|  84.8k|    fn from(node: SubjectRef<'a>) -> Self {
  667|  84.8k|        match node {
  668|  12.6k|            SubjectRef::NamedNode(node) => node.into(),
  669|  66.9k|            SubjectRef::BlankNode(node) => node.into(),
  670|       |            #[cfg(feature = "rdf-star")]
  671|  5.17k|            SubjectRef::Triple(triple) => triple.into(),
  672|       |        }
  673|  84.8k|    }
_RNvXsf_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB5_7SubjectINtNtCsevdOxZso2fM_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCsbUpIViwkCx3_5oxttl:
  207|    203|    fn from(node: NamedNodeRef<'_>) -> Self {
  208|    203|        node.into_owned().into()
  209|    203|    }
_RNvXsl_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB5_7SubjectINtNtCsevdOxZso2fM_4core7convert4FromNtB5_16NamedOrBlankNodeE4fromCsbUpIViwkCx3_5oxttl:
  252|   126k|    fn from(node: NamedOrBlankNode) -> Self {
  253|   126k|        match node {
  254|  69.4k|            NamedOrBlankNode::NamedNode(node) => node.into(),
  255|  56.9k|            NamedOrBlankNode::BlankNode(node) => node.into(),
  256|       |        }
  257|   126k|    }
_RNvMsc_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB5_7Subject6as_refB7_:
  181|  66.7k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  66.7k|        match self {
  183|  40.4k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|    321|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|  26.0k|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  66.7k|    }
_RNvXse_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB5_7SubjectINtNtCsevdOxZso2fM_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|  85.0k|    fn from(node: NamedNode) -> Self {
  201|  85.0k|        Self::NamedNode(node)
  202|  85.0k|    }
_RNvXsg_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB5_7SubjectINtNtCsevdOxZso2fM_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|   278k|    fn from(node: BlankNode) -> Self {
  215|   278k|        Self::BlankNode(node)
  216|   278k|    }
_RNvXsi_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB5_7SubjectINtNtCsevdOxZso2fM_4core7convert4FromNtB5_6TripleE4fromB7_:
  229|  34.3k|    fn from(node: Triple) -> Self {
  230|  34.3k|        Self::Triple(Box::new(node))
  231|  34.3k|    }
_RNvMsn_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB5_10SubjectRef10into_ownedB7_:
  294|  95.4k|    pub fn into_owned(self) -> Subject {
  295|  95.4k|        match self {
  296|  70.4k|            Self::NamedNode(node) => Subject::NamedNode(node.into_owned()),
  297|    266|            Self::BlankNode(node) => Subject::BlankNode(node.into_owned()),
  298|       |            #[cfg(feature = "rdf-star")]
  299|  24.7k|            Self::Triple(triple) => Subject::Triple(Box::new(triple.clone())),
  300|       |        }
  301|  95.4k|    }
_RNvMsy_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB5_4Term6as_refB7_:
  417|  66.7k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|  66.7k|        match self {
  419|  1.57k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|    699|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  64.5k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|      0|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|  66.7k|    }
_RNvXsA_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB5_4TermINtNtCsevdOxZso2fM_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|  33.1k|    fn from(node: NamedNode) -> Self {
  438|  33.1k|        Self::NamedNode(node)
  439|  33.1k|    }
_RNvXsC_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB5_4TermINtNtCsevdOxZso2fM_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  451|   205k|    fn from(node: BlankNode) -> Self {
  452|   205k|        Self::BlankNode(node)
  453|   205k|    }
_RNvXsE_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB5_4TermINtNtCsevdOxZso2fM_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  465|   151k|    fn from(literal: Literal) -> Self {
  466|   151k|        Self::Literal(literal)
  467|   151k|    }
_RNvXsG_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB5_4TermINtNtCsevdOxZso2fM_4core7convert4FromNtB5_6TripleE4fromB7_:
  480|  5.46k|    fn from(triple: Triple) -> Self {
  481|  5.46k|        Self::Triple(Box::new(triple))
  482|  5.46k|    }
_RNvMsN_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB5_7TermRef10into_ownedB7_:
  571|   115k|    pub fn into_owned(self) -> Term {
  572|   115k|        match self {
  573|  2.69k|            Self::NamedNode(node) => Term::NamedNode(node.into_owned()),
  574|    580|            Self::BlankNode(node) => Term::BlankNode(node.into_owned()),
  575|   111k|            Self::Literal(literal) => Term::Literal(literal.into_owned()),
  576|       |            #[cfg(feature = "rdf-star")]
  577|      0|            Self::Triple(triple) => Term::Triple(Box::new(triple.clone())),
  578|       |        }
  579|   115k|    }
_RNvMs12_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB6_6Triple6as_refB8_:
  753|  66.7k|    pub fn as_ref(&self) -> TripleRef<'_> {
  754|  66.7k|        TripleRef {
  755|  66.7k|            subject: self.subject.as_ref(),
  756|  66.7k|            predicate: self.predicate.as_ref(),
  757|  66.7k|            object: self.object.as_ref(),
  758|  66.7k|        }
  759|  66.7k|    }
_RNvMs14_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB6_9TripleRef10into_ownedB8_:
  826|  63.3k|    pub fn into_owned(self) -> Triple {
  827|  63.3k|        Triple {
  828|  63.3k|            subject: self.subject.into_owned(),
  829|  63.3k|            predicate: self.predicate.into_owned(),
  830|  63.3k|            object: self.object.into_owned(),
  831|  63.3k|        }
  832|  63.3k|    }
_RNvXs1S_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB6_7SubjectNtNtCsevdOxZso2fM_4core5clone5Clone5cloneB8_:
  155|  77.1k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs27_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB6_4TermNtNtCsevdOxZso2fM_4core5clone5Clone5cloneB8_:
  385|  77.1k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2m_NtCsfYjWOBsMZ7D_5oxrdf6tripleNtB6_6TripleNtNtCsevdOxZso2fM_4core5clone5Clone5cloneB8_:
  714|  77.1k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]

_RNvXNtCsbUpIViwkCx3_5oxttl5lexerNtB2_7N3LexerNtNtNtB4_7toolkit5lexer15TokenRecognizer20recognize_next_token:
   55|  5.57M|    fn recognize_next_token<'a>(
   56|  5.57M|        &mut self,
   57|  5.57M|        data: &'a [u8],
   58|  5.57M|        is_ending: bool,
   59|  5.57M|        options: &Self::Options,
   60|  5.57M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
   61|  5.57M|        match *data.first()? {
   62|   739k|            b'<' => match *data.get(1)? {
   63|  54.5k|                b'<' => Some((2, Ok(N3Token::Punctuation("<<")))),
   64|  11.2k|                b'=' if self.mode == N3LexerMode::N3 => {
   65|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   66|      0|                        Some(if let Ok(result) = result {
   67|      0|                            (consumed, Ok(result))
   68|       |                        } else {
   69|      0|                            (2, Ok(N3Token::Punctuation("<=")))
   70|       |                        })
   71|      0|                    } else if is_ending {
   72|      0|                        Some((2, Ok(N3Token::Punctuation("<="))))
   73|       |                    } else {
   74|      0|                        None
   75|       |                    }
   76|       |                }
   77|  3.78k|                b'-' if self.mode == N3LexerMode::N3 => {
   78|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   79|      0|                        Some(if let Ok(result) = result {
   80|      0|                            (consumed, Ok(result))
   81|       |                        } else {
   82|      0|                            (2, Ok(N3Token::Punctuation("<-")))
   83|       |                        })
   84|      0|                    } else if is_ending {
   85|      0|                        Some((2, Ok(N3Token::Punctuation("<-"))))
   86|       |                    } else {
   87|      0|                        None
   88|       |                    }
   89|       |                }
   90|   664k|                _ => self.recognize_iri(data, options),
   91|       |            },
   92|       |            b'>' => {
   93|  77.4k|                if *data.get(1)? == b'>' {
   94|  28.9k|                    Some((2, Ok(N3Token::Punctuation(">>"))))
   95|       |                } else {
   96|  42.8k|                    Some((1, Ok(N3Token::Punctuation(">"))))
   97|       |                }
   98|       |            }
   99|   213k|            b'_' => match data.get(1)? {
  100|   172k|                b':' => Self::recognize_blank_node_label(data),
  101|  3.14k|                c => Some((
  102|  3.14k|                    1,
  103|  3.14k|                    Err((0, format!("Unexpected character '{}'", char::from(*c))).into()),
  104|  3.14k|                )),
  105|       |            },
  106|       |            b'"' => {
  107|  42.1k|                if self.mode != N3LexerMode::NTriples
  108|  42.1k|                    && *data.get(1)? == b'"'
  109|  26.7k|                    && *data.get(2)? == b'"'
  110|       |                {
  111|  21.6k|                    Self::recognize_long_string(data, b'"')
  112|       |                } else {
  113|  18.3k|                    Self::recognize_string(data, b'"')
  114|       |                }
  115|       |            }
  116|  82.3k|            b'\'' if self.mode != N3LexerMode::NTriples => {
  117|  82.3k|                if *data.get(1)? == b'\'' && *data.get(2)? == b'\'' {
  118|  15.3k|                    Self::recognize_long_string(data, b'\'')
  119|       |                } else {
  120|  60.7k|                    Self::recognize_string(data, b'\'')
  121|       |                }
  122|       |            }
  123|  55.6k|            b'@' => self.recognize_lang_tag(data),
  124|   654k|            b'.' => match data.get(1) {
  125|   188k|                Some(b'0'..=b'9') => Self::recognize_number(data),
  126|   429k|                Some(_) => Some((1, Ok(N3Token::Punctuation(".")))),
  127|   194k|                None => is_ending.then_some((1, Ok(N3Token::Punctuation(".")))),
  128|       |            },
  129|       |            b'^' => {
  130|  15.4k|                if *data.get(1)? == b'^' {
  131|  2.52k|                    Some((2, Ok(N3Token::Punctuation("^^"))))
  132|       |                } else {
  133|  12.0k|                    Some((1, Ok(N3Token::Punctuation("^"))))
  134|       |                }
  135|       |            }
  136|   339k|            b'(' => Some((1, Ok(N3Token::Punctuation("(")))),
  137|  30.4k|            b')' => Some((1, Ok(N3Token::Punctuation(")")))),
  138|  27.6k|            b'[' => Some((1, Ok(N3Token::Punctuation("[")))),
  139|  5.48k|            b']' => Some((1, Ok(N3Token::Punctuation("]")))),
  140|       |            b'{' => {
  141|   138k|                if *data.get(1)? == b'|' {
  142|  9.31k|                    Some((2, Ok(N3Token::Punctuation("{|"))))
  143|       |                } else {
  144|  66.4k|                    Some((1, Ok(N3Token::Punctuation("{"))))
  145|       |                }
  146|       |            }
  147|  4.64k|            b'}' => Some((1, Ok(N3Token::Punctuation("}")))),
  148|  38.4k|            b',' => Some((1, Ok(N3Token::Punctuation(",")))),
  149|  20.4k|            b';' => Some((1, Ok(N3Token::Punctuation(";")))),
  150|  5.90k|            b'!' => Some((1, Ok(N3Token::Punctuation("!")))),
  151|       |            b'|' => {
  152|  6.75k|                if *data.get(1)? == b'}' {
  153|    321|                    Some((2, Ok(N3Token::Punctuation("|}"))))
  154|       |                } else {
  155|  5.49k|                    Some((1, Ok(N3Token::Punctuation("|"))))
  156|       |                }
  157|       |            }
  158|       |            b'=' => {
  159|  22.8k|                if *data.get(1)? == b'>' {
  160|    550|                    Some((2, Ok(N3Token::Punctuation("=>"))))
  161|       |                } else {
  162|  21.6k|                    Some((1, Ok(N3Token::Punctuation("="))))
  163|       |                }
  164|       |            }
  165|  1.24M|            b'0'..=b'9' | b'+' | b'-' => Self::recognize_number(data),
  166|  43.7k|            b'?' => self.recognize_variable(data, is_ending),
  167|  2.00M|            _ => self.recognize_pname_or_keyword(data, is_ending),
  168|       |        }
  169|  5.57M|    }
_RNvMs_NtCsbUpIViwkCx3_5oxttl5lexerNtB4_7N3Lexer3new:
  173|  25.2k|    pub fn new(mode: N3LexerMode, unchecked: bool) -> Self {
  174|  25.2k|        Self { mode, unchecked }
  175|  25.2k|    }
_RNvMs_NtCsbUpIViwkCx3_5oxttl5lexerNtB4_7N3Lexer13recognize_iri:
  177|   664k|    fn recognize_iri(
  178|   664k|        &self,
  179|   664k|        data: &[u8],
  180|   664k|        options: &N3LexerOptions,
  181|   664k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  182|   664k|        // [18] 	IRIREF 	::= 	'<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
  183|   664k|        let mut string = Vec::new();
  184|   664k|        let mut i = 1;
  185|       |        loop {
  186|   664k|            let end = memchr2(b'>', b'\\', &data[i..])?;
  187|   430k|            string.extend_from_slice(&data[i..i + end]);
  188|   430k|            i += end;
  189|   430k|            match data[i] {
  190|       |                b'>' => {
  191|       |                    #[allow(clippy::range_plus_one)]
  192|   422k|                    return Some((i + 1, self.parse_iri(string, 0..i + 1, options)));
  193|       |                }
  194|       |                b'\\' => {
  195|  7.98k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, false)?;
  196|  2.55k|                    i += additional + 1;
  197|  2.55k|                    match c {
  198|    447|                        Ok(c) => {
  199|    447|                            let mut buf = [0; 4];
  200|    447|                            string.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  201|    447|                        }
  202|  2.10k|                        Err(e) => return Some((i, Err(e))),
  203|       |                    }
  204|       |                }
  205|      0|                _ => unreachable!(),
  206|       |            }
  207|       |        }
  208|   664k|    }
_RNvMs_NtCsbUpIViwkCx3_5oxttl5lexerNtB4_7N3Lexer9parse_iri:
  210|   422k|    fn parse_iri(
  211|   422k|        &self,
  212|   422k|        iri: Vec<u8>,
  213|   422k|        position: Range<usize>,
  214|   422k|        options: &N3LexerOptions,
  215|   422k|    ) -> Result<N3Token<'static>, TokenRecognizerError> {
  216|   422k|        let iri = string_from_utf8(iri, position.clone())?;
  217|       |        Ok(N3Token::IriRef(
  218|   405k|            if let Some(base_iri) = options.base_iri.as_ref() {
  219|   290k|                if self.unchecked {
  220|  96.2k|                    base_iri.resolve_unchecked(&iri)
  221|       |                } else {
  222|   193k|                    base_iri.resolve(&iri)
  223|       |                }
  224|   290k|                .map_err(|e| (position, e.to_string()))?
  225|   259k|                .into_inner()
  226|   115k|            } else if self.unchecked {
  227|      0|                iri
  228|       |            } else {
  229|   115k|                Iri::parse(iri)
  230|   115k|                    .map_err(|e| (position, e.to_string()))?
  231|   115k|                    .into_inner()
  232|       |            },
  233|       |        ))
  234|   422k|    }
_RNvMs_NtCsbUpIViwkCx3_5oxttl5lexerNtB4_7N3Lexer26recognize_pname_or_keyword:
  236|  2.00M|    fn recognize_pname_or_keyword<'a>(
  237|  2.00M|        &self,
  238|  2.00M|        data: &'a [u8],
  239|  2.00M|        is_ending: bool,
  240|  2.00M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  241|  2.00M|        // [139s] 	PNAME_NS 	::= 	PN_PREFIX? ':'
  242|  2.00M|        // [140s] 	PNAME_LN 	::= 	PNAME_NS PN_LOCAL
  243|  2.00M|
  244|  2.00M|        // [167s] 	PN_PREFIX 	::= 	PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
  245|  2.00M|        let mut i = 0;
  246|       |        loop {
  247|  4.26M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  248|  4.04M|                match r {
  249|  3.68M|                    Ok((c, consumed)) => {
  250|  3.68M|                        if c == ':' {
  251|   115k|                            i += consumed;
  252|   115k|                            break;
  253|  3.57M|                        } else if i == 0 {
  254|  1.54M|                            if !Self::is_possible_pn_chars_base(c) {
  255|  1.13M|                                return Some((
  256|  1.13M|                                    consumed,
  257|  1.13M|                                    Err((
  258|  1.13M|                                        0..consumed,
  259|  1.13M|                                        format!(
  260|  1.13M|                                            "'{c}' is not allowed at the beginning of a prefix name"
  261|  1.13M|                                        ),
  262|  1.13M|                                    )
  263|  1.13M|                                        .into()),
  264|  1.13M|                                ));
  265|   403k|                            }
  266|   403k|                            i += consumed;
  267|  2.02M|                        } else if Self::is_possible_pn_chars(c) || c == '.' {
  268|  1.86M|                            i += consumed;
  269|  1.86M|                        } else {
  270|   221k|                            while data[..i].ends_with(b".") {
  271|  57.1k|                                i -= 1;
  272|  57.1k|                            }
  273|   164k|                            return Some((
  274|   164k|                                i,
  275|   164k|                                str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  276|   164k|                            ));
  277|       |                        }
  278|       |                    }
  279|   355k|                    Err(e) => return Some((e.location.end, Err(e))),
  280|       |                }
  281|   225k|            } else if is_ending {
  282|  3.71k|                while data[..i].ends_with(b".") {
  283|    834|                    i -= 1;
  284|    834|                }
  285|  2.87k|                return Some(if i == 0 {
  286|    888|                    (
  287|    888|                        1,
  288|    888|                        Err((0..1, format!("Unexpected byte {}", data[0])).into()),
  289|    888|                    )
  290|       |                } else {
  291|  1.99k|                    (
  292|  1.99k|                        i,
  293|  1.99k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  294|  1.99k|                    )
  295|       |                });
  296|       |            } else {
  297|   222k|                return None;
  298|       |            }
  299|       |        }
  300|   115k|        let pn_prefix = match str_from_utf8(&data[..i - 1], 0..i - 1) {
  301|   115k|            Ok(pn_prefix) => pn_prefix,
  302|      0|            Err(e) => return Some((i, Err(e))),
  303|       |        };
  304|   115k|        if pn_prefix.ends_with('.') {
  305|    120|            return Some((
  306|    120|                i,
  307|    120|                Err((
  308|    120|                    0..i,
  309|    120|                    format!(
  310|    120|                        "'{pn_prefix}' is not a valid prefix: prefixes are not allowed to end with '.'"),
  311|    120|                )
  312|    120|                    .into()),
  313|    120|            ));
  314|   115k|        }
  315|       |
  316|  54.8k|        let (consumed, pn_local_result) =
  317|   115k|            self.recognize_optional_pn_local(&data[i..], is_ending)?;
  318|  54.8k|        Some((
  319|  54.8k|            consumed + i,
  320|  54.8k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|       |                prefix: pn_prefix,
  322|       |                local,
  323|       |                might_be_invalid_iri,
  324|  54.8k|            }),
  325|  54.8k|        ))
  326|  2.00M|    }
_RNvMs_NtCsbUpIViwkCx3_5oxttl5lexerNtB4_7N3Lexer18recognize_variable:
  328|  43.7k|    fn recognize_variable<'a>(
  329|  43.7k|        &self,
  330|  43.7k|        data: &'a [u8],
  331|  43.7k|        is_ending: bool,
  332|  43.7k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  333|       |        // [36] 	QUICK_VAR_NAME 	::= 	"?" PN_LOCAL
  334|  43.7k|        let (consumed, result) = self.recognize_optional_pn_local(&data[1..], is_ending)?;
  335|  22.3k|        Some((
  336|  22.3k|            consumed + 1,
  337|  22.3k|            result.and_then(|(name, _)| {
  338|       |                if name.is_empty() {
  339|       |                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|       |                    Ok(N3Token::Variable(name))
  342|       |                }
  343|  22.3k|            }),
  344|  22.3k|        ))
  345|  43.7k|    }
_RNvMs_NtCsbUpIViwkCx3_5oxttl5lexerNtB4_7N3Lexer27recognize_optional_pn_local:
  347|   159k|    fn recognize_optional_pn_local<'a>(
  348|   159k|        &self,
  349|   159k|        data: &'a [u8],
  350|   159k|        is_ending: bool,
  351|   159k|    ) -> Option<(usize, Result<(Cow<'a, str>, bool), TokenRecognizerError>)> {
  352|   159k|        // [168s] 	PN_LOCAL 	::= 	(PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
  353|   159k|        let mut i = 0;
  354|   159k|        let mut buffer = None; // Buffer if there are some escaped characters
  355|   159k|        let mut position_that_is_already_in_buffer = 0;
  356|   159k|        let mut might_be_invalid_iri = false;
  357|   159k|        let mut ends_with_unescaped_dot = 0;
  358|       |        loop {
  359|  1.25M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  360|  1.17M|                match r {
  361|  1.17M|                    Ok((c, consumed)) => {
  362|  1.17M|                        if c == '%' {
  363|  5.87k|                            i += 1;
  364|  5.87k|                            let a = char::from(*data.get(i)?);
  365|  2.37k|                            i += 1;
  366|  2.37k|                            let b = char::from(*data.get(i)?);
  367|  1.70k|                            if !a.is_ascii_hexdigit() || !b.is_ascii_hexdigit() {
  368|    378|                                return Some((i + 1, Err((
  369|    378|                                    i - 2..=i, format!("escapes in IRIs should be % followed by two hexadecimal characters, found '%{a}{b}'")
  370|    378|                                ).into())));
  371|  1.32k|                            }
  372|  1.32k|                            i += 1;
  373|  1.32k|                            ends_with_unescaped_dot = 0;
  374|  1.16M|                        } else if c == '\\' {
  375|  37.2k|                            i += 1;
  376|  37.2k|                            let a = char::from(*data.get(i)?);
  377|  35.2k|                            if self.unchecked
  378|  2.74k|                                || matches!(
  379|  17.0k|                                    a,
  380|       |                                    '_' | '~'
  381|       |                                        | '.'
  382|       |                                        | '-'
  383|       |                                        | '!'
  384|       |                                        | '$'
  385|       |                                        | '&'
  386|       |                                        | '\''
  387|       |                                        | '('
  388|       |                                        | ')'
  389|       |                                        | '*'
  390|       |                                        | '+'
  391|       |                                        | ','
  392|       |                                        | ';'
  393|       |                                        | '='
  394|       |                                )
  395|  32.4k|                            {
  396|  32.4k|                                // ok to escape
  397|  32.4k|                            } else if matches!(a, '/' | '?' | '#' | '@' | '%') {
  398|  1.51k|                                // ok to escape but requires IRI validation
  399|  1.51k|                                might_be_invalid_iri = true;
  400|  1.51k|                            } else {
  401|  1.23k|                                return Some((i + 1, Err((
  402|  1.23k|                                    i..=i, format!("The character that are allowed to be escaped in IRIs are _~.-!$&'()*+,;=/?#@%, found '{a}'")
  403|  1.23k|                                ).into())));
  404|       |                            }
  405|  33.9k|                            let buffer = buffer.get_or_insert_with(String::new);
  406|  33.9k|                            // We add the missing bytes
  407|  33.9k|                            if i - position_that_is_already_in_buffer > 1 {
  408|  19.5k|                                buffer.push_str(
  409|  19.5k|                                    match str_from_utf8(
  410|  19.5k|                                        &data[position_that_is_already_in_buffer..i - 1],
  411|  19.5k|                                        position_that_is_already_in_buffer..i - 1,
  412|  19.5k|                                    ) {
  413|  19.5k|                                        Ok(data) => data,
  414|      0|                                        Err(e) => return Some((i, Err(e))),
  415|       |                                    },
  416|       |                                )
  417|  14.4k|                            }
  418|  33.9k|                            buffer.push(a);
  419|  33.9k|                            i += 1;
  420|  33.9k|                            position_that_is_already_in_buffer = i;
  421|  33.9k|                            ends_with_unescaped_dot = 0;
  422|  1.12M|                        } else if i == 0 {
  423|   119k|                            if !(Self::is_possible_pn_chars_u(c) || c == ':' || c.is_ascii_digit())
  424|       |                            {
  425|  25.7k|                                return Some((0, Ok((Cow::Borrowed(""), false))));
  426|  93.6k|                            }
  427|  93.6k|                            if !self.unchecked {
  428|       |                                might_be_invalid_iri |=
  429|  54.4k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  430|  54.4k|                                        || c == ':';
  431|  39.1k|                            }
  432|  93.6k|                            i += consumed;
  433|  1.00M|                        } else if Self::is_possible_pn_chars(c) || c == ':' {
  434|   844k|                            if !self.unchecked {
  435|       |                                might_be_invalid_iri |=
  436|   462k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  437|   462k|                                        || c == ':';
  438|   381k|                            }
  439|   844k|                            i += consumed;
  440|   844k|                            ends_with_unescaped_dot = 0;
  441|   163k|                        } else if c == '.' {
  442|   119k|                            i += consumed;
  443|   119k|                            ends_with_unescaped_dot += 1;
  444|   119k|                        } else {
  445|  44.8k|                            let buffer = if let Some(mut buffer) = buffer {
  446|  2.57k|                                buffer.push_str(
  447|  2.57k|                                    match str_from_utf8(
  448|  2.57k|                                        &data[position_that_is_already_in_buffer..i],
  449|  2.57k|                                        position_that_is_already_in_buffer..i,
  450|  2.57k|                                    ) {
  451|  2.57k|                                        Ok(data) => data,
  452|      0|                                        Err(e) => return Some((i, Err(e))),
  453|       |                                    },
  454|       |                                );
  455|       |                                // We do not include the last dots
  456|  2.57k|                                for _ in 0..ends_with_unescaped_dot {
  457|    776|                                    buffer.pop();
  458|    776|                                }
  459|  2.57k|                                i -= ends_with_unescaped_dot;
  460|  2.57k|                                Cow::Owned(buffer)
  461|       |                            } else {
  462|  42.3k|                                let mut data = match str_from_utf8(&data[..i], 0..i) {
  463|  42.3k|                                    Ok(data) => data,
  464|      0|                                    Err(e) => return Some((i, Err(e))),
  465|       |                                };
  466|       |                                // We do not include the last dots
  467|  42.3k|                                data = &data[..data.len() - ends_with_unescaped_dot];
  468|  42.3k|                                i -= ends_with_unescaped_dot;
  469|  42.3k|                                Cow::Borrowed(data)
  470|       |                            };
  471|  44.8k|                            return Some((i, Ok((buffer, might_be_invalid_iri))));
  472|       |                        }
  473|       |                    }
  474|  4.17k|                    Err(e) => return Some((e.location.end, Err(e))),
  475|       |                }
  476|  76.5k|            } else if is_ending {
  477|    800|                let buffer = if let Some(mut buffer) = buffer {
  478|       |                    // We do not include the last dot
  479|    675|                    while buffer.ends_with('.') {
  480|    424|                        buffer.pop();
  481|    424|                        i -= 1;
  482|    424|                    }
  483|    251|                    Cow::Owned(buffer)
  484|       |                } else {
  485|    549|                    let mut data = match str_from_utf8(&data[..i], 0..i) {
  486|    549|                        Ok(data) => data,
  487|      0|                        Err(e) => return Some((i, Err(e))),
  488|       |                    };
  489|       |                    // We do not include the last dot
  490|  1.01k|                    while let Some(d) = data.strip_suffix('.') {
  491|    466|                        data = d;
  492|    466|                        i -= 1;
  493|    466|                    }
  494|    549|                    Cow::Borrowed(data)
  495|       |                };
  496|    800|                return Some((i, Ok((buffer, might_be_invalid_iri))));
  497|       |            } else {
  498|  75.7k|                return None;
  499|       |            }
  500|       |        }
  501|   159k|    }
_RNvMs_NtCsbUpIViwkCx3_5oxttl5lexerNtB4_7N3Lexer26recognize_blank_node_label:
  503|   172k|    fn recognize_blank_node_label(
  504|   172k|        data: &[u8],
  505|   172k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  506|   172k|        // [141s] 	BLANK_NODE_LABEL 	::= 	'_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
  507|   172k|        let mut i = 2;
  508|       |        loop {
  509|  4.21M|            match Self::recognize_unicode_char(&data[i..], i)? {
  510|  4.17M|                Ok((c, consumed)) => {
  511|  4.17M|                    if (i == 2 && (Self::is_possible_pn_chars_u(c) || c.is_ascii_digit()))
  512|  4.02M|                        || (i > 2 && Self::is_possible_pn_chars(c))
  513|  4.04M|                    {
  514|  4.04M|                        // Ok
  515|  4.04M|                    } else if i > 2 && c == '.' {
  516|  3.57k|                        if data[i - 1] == b'.' {
  517|     99|                            i -= 1;
  518|     99|                            return Some((
  519|     99|                                i,
  520|     99|                                str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  521|     99|                            ));
  522|  3.47k|                        }
  523|   132k|                    } else if i == 0 {
  524|      0|                        return Some((
  525|      0|                            i,
  526|      0|                            Err((0..i, "A blank node ID should not be empty").into()),
  527|      0|                        ));
  528|   132k|                    } else if data[i - 1] == b'.' {
  529|  1.36k|                        i -= 1;
  530|  1.36k|                        return Some((
  531|  1.36k|                            i,
  532|  1.36k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  533|  1.36k|                        ));
  534|       |                    } else {
  535|   131k|                        return Some((
  536|   131k|                            i,
  537|   131k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  538|   131k|                        ));
  539|       |                    }
  540|  4.04M|                    i += consumed;
  541|       |                }
  542|    413|                Err(e) => return Some((e.location.end, Err(e))),
  543|       |            }
  544|       |        }
  545|   172k|    }
_RNvMs_NtCsbUpIViwkCx3_5oxttl5lexerNtB4_7N3Lexer18recognize_lang_tag:
  547|  55.6k|    fn recognize_lang_tag<'a>(
  548|  55.6k|        &self,
  549|  55.6k|        data: &'a [u8],
  550|  55.6k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  551|  55.6k|        // [144s] 	LANGTAG 	::= 	'@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
  552|  55.6k|        let mut is_last_block_empty = true;
  553|   359k|        for (i, c) in data[1..].iter().enumerate() {
  554|   359k|            if c.is_ascii_alphabetic() {
  555|   292k|                is_last_block_empty = false;
  556|   292k|            } else if i == 0 {
  557|  11.1k|                return Some((
  558|  11.1k|                    1,
  559|  11.1k|                    Err((1..2, "A language code should always start with a letter").into()),
  560|  11.1k|                ));
  561|  56.6k|            } else if is_last_block_empty {
  562|    693|                return Some((i, self.parse_lang_tag(&data[1..i], 1..i - 1)));
  563|  55.9k|            } else if *c == b'-' {
  564|  39.3k|                is_last_block_empty = true;
  565|  39.3k|            } else {
  566|  16.6k|                return Some((i + 1, self.parse_lang_tag(&data[1..=i], 1..i)));
  567|       |            }
  568|       |        }
  569|  27.2k|        None
  570|  55.6k|    }
_RNvMs_NtCsbUpIViwkCx3_5oxttl5lexerNtB4_7N3Lexer14parse_lang_tag:
  572|  17.3k|    fn parse_lang_tag<'a>(
  573|  17.3k|        &self,
  574|  17.3k|        lang_tag: &'a [u8],
  575|  17.3k|        position: Range<usize>,
  576|  17.3k|    ) -> Result<N3Token<'a>, TokenRecognizerError> {
  577|  17.3k|        let lang_tag = str_from_utf8(lang_tag, position.clone())?;
  578|  17.3k|        Ok(N3Token::LangTag(if self.unchecked {
  579|  5.53k|            lang_tag
  580|       |        } else {
  581|  11.7k|            LanguageTag::parse(lang_tag)
  582|  11.7k|                .map_err(|e| (position.clone(), e.to_string()))?
  583|  8.80k|                .into_inner()
  584|       |        }))
  585|  17.3k|    }
_RNvMs_NtCsbUpIViwkCx3_5oxttl5lexerNtB4_7N3Lexer16recognize_string:
  587|  79.1k|    fn recognize_string(
  588|  79.1k|        data: &[u8],
  589|  79.1k|        delimiter: u8,
  590|  79.1k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  591|  79.1k|        // [22] 	STRING_LITERAL_QUOTE 	::= 	'"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
  592|  79.1k|        // [23] 	STRING_LITERAL_SINGLE_QUOTE 	::= 	"'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
  593|  79.1k|        let mut string = String::new();
  594|  79.1k|        let mut i = 1;
  595|       |        loop {
  596|   131k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  597|  94.2k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  598|  92.7k|                Ok(s) => string.push_str(s),
  599|  1.51k|                Err(e) => return Some((end, Err(e))),
  600|       |            };
  601|  92.7k|            i += end;
  602|  92.7k|            match data[i] {
  603|  92.7k|                c if c == delimiter => {
  604|  18.0k|                    return Some((i + 1, Ok(N3Token::String(string))));
  605|       |                }
  606|       |                b'\\' => {
  607|  74.6k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  608|  68.0k|                    i += additional + 1;
  609|  68.0k|                    match c {
  610|  52.5k|                        Ok(c) => {
  611|  52.5k|                            string.push(c);
  612|  52.5k|                        }
  613|  15.4k|                        Err(e) => {
  614|       |                            // We read until the end of string char
  615|  15.4k|                            let end = memchr(delimiter, &data[i..])?;
  616|  1.34k|                            return Some((i + end + 1, Err(e)));
  617|       |                        }
  618|       |                    }
  619|       |                }
  620|      0|                _ => unreachable!(),
  621|       |            }
  622|       |        }
  623|  79.1k|    }
_RNvMs_NtCsbUpIViwkCx3_5oxttl5lexerNtB4_7N3Lexer21recognize_long_string:
  625|  37.0k|    fn recognize_long_string(
  626|  37.0k|        data: &[u8],
  627|  37.0k|        delimiter: u8,
  628|  37.0k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  629|  37.0k|        // [24] 	STRING_LITERAL_LONG_SINGLE_QUOTE 	::= 	"'''" (("'" | "''")? ([^'\] | ECHAR | UCHAR))* "'''"
  630|  37.0k|        // [25] 	STRING_LITERAL_LONG_QUOTE 	::= 	'"""' (('"' | '""')? ([^"\] | ECHAR | UCHAR))* '"""'
  631|  37.0k|        let mut string = String::new();
  632|  37.0k|        let mut i = 3;
  633|       |        loop {
  634|  63.9k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  635|  42.2k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  636|  40.9k|                Ok(s) => string.push_str(s),
  637|  1.26k|                Err(e) => return Some((end, Err(e))),
  638|       |            };
  639|  40.9k|            i += end;
  640|  40.9k|            match data[i] {
  641|  40.9k|                c if c == delimiter => {
  642|  37.3k|                    if *data.get(i + 1)? == delimiter && *data.get(i + 2)? == delimiter {
  643|  12.3k|                        return Some((i + 3, Ok(N3Token::String(string))));
  644|  23.8k|                    }
  645|  23.8k|                    i += 1;
  646|  23.8k|                    string.push(char::from(delimiter));
  647|       |                }
  648|       |                b'\\' => {
  649|  3.58k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  650|  3.20k|                    i += additional + 1;
  651|  3.20k|                    match c {
  652|  3.03k|                        Ok(c) => {
  653|  3.03k|                            string.push(c);
  654|  3.03k|                        }
  655|    171|                        Err(e) => return Some((i, Err(e))),
  656|       |                    }
  657|       |                }
  658|      0|                _ => unreachable!(),
  659|       |            }
  660|       |        }
  661|  37.0k|    }
_RNvMs_NtCsbUpIViwkCx3_5oxttl5lexerNtB4_7N3Lexer16recognize_number:
  663|   421k|    fn recognize_number(data: &[u8]) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  664|   421k|        // [19] 	INTEGER 	::= 	[+-]? [0-9]+
  665|   421k|        // [20] 	DECIMAL 	::= 	[+-]? [0-9]* '.' [0-9]+
  666|   421k|        // [21] 	DOUBLE 	::= 	[+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  667|   421k|        // [154s] 	EXPONENT 	::= 	[eE] [+-]? [0-9]+
  668|   421k|        let mut i = 0;
  669|   421k|        let c = *data.first()?;
  670|   421k|        if matches!(c, b'+' | b'-') {
  671|  47.5k|            i += 1;
  672|   373k|        }
  673|       |        // We read the digits before .
  674|   421k|        let mut count_before: usize = 0;
  675|       |        loop {
  676|  1.34M|            let c = *data.get(i)?;
  677|  1.29M|            if c.is_ascii_digit() {
  678|   927k|                i += 1;
  679|   927k|                count_before += 1;
  680|   927k|            } else {
  681|   367k|                break;
  682|       |            }
  683|       |        }
  684|       |
  685|       |        // We read the digits after .
  686|       |        #[allow(clippy::if_then_some_else_none)]
  687|   367k|        let count_after = if *data.get(i)? == b'.' {
  688|   101k|            i += 1;
  689|   101k|
  690|   101k|            let mut count_after = 0;
  691|       |            loop {
  692|   270k|                let c = *data.get(i)?;
  693|   255k|                if c.is_ascii_digit() {
  694|   169k|                    i += 1;
  695|   169k|                    count_after += 1;
  696|   169k|                } else {
  697|  86.2k|                    break;
  698|  86.2k|                }
  699|  86.2k|            }
  700|  86.2k|            Some(count_after)
  701|       |        } else {
  702|   266k|            None
  703|       |        };
  704|       |
  705|       |        // End
  706|   352k|        let c = *data.get(i)?;
  707|   352k|        if matches!(c, b'e' | b'E') {
  708|  65.7k|            i += 1;
  709|       |
  710|  65.7k|            let c = *data.get(i)?;
  711|  65.3k|            if matches!(c, b'+' | b'-') {
  712|  1.64k|                i += 1;
  713|  63.7k|            }
  714|       |
  715|  65.3k|            let mut found = false;
  716|       |            loop {
  717|   320k|                let c = *data.get(i)?;
  718|   314k|                if c.is_ascii_digit() {
  719|   255k|                    i += 1;
  720|   255k|                    found = true;
  721|   255k|                } else {
  722|  58.8k|                    break;
  723|  58.8k|                }
  724|  58.8k|            }
  725|  58.8k|            Some((
  726|  58.8k|                i,
  727|  58.8k|                if !found {
  728|  1.62k|                    Err((0..i, "A double exponent cannot be empty").into())
  729|  57.1k|                } else if count_before == 0 && count_after.unwrap_or(0) == 0 {
  730|     97|                    Err((0..i, "A double should not be empty").into())
  731|       |                } else {
  732|  57.0k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Double)
  733|       |                },
  734|       |            ))
  735|   286k|        } else if let Some(count_after) = count_after {
  736|  84.2k|            if count_after == 0 {
  737|       |                // We do not consume the '.' after all
  738|  55.6k|                i -= 1;
  739|  55.6k|                Some((
  740|  55.6k|                    i,
  741|  55.6k|                    if count_before == 0 {
  742|  2.99k|                        Err((0..i, "An integer should not be empty").into())
  743|       |                    } else {
  744|  52.6k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  745|       |                    },
  746|       |                ))
  747|       |            } else {
  748|  28.6k|                Some((i, str_from_utf8(&data[..i], 0..i).map(N3Token::Decimal)))
  749|       |            }
  750|       |        } else {
  751|       |            Some((
  752|   202k|                i,
  753|   202k|                if count_before == 0 {
  754|  16.9k|                    Err((0..i, "An integer should not be empty").into())
  755|       |                } else {
  756|   185k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  757|       |                },
  758|       |            ))
  759|       |        }
  760|   421k|    }
_RNvMs_NtCsbUpIViwkCx3_5oxttl5lexerNtB4_7N3Lexer16recognize_escape:
  762|  86.2k|    fn recognize_escape(
  763|  86.2k|        data: &[u8],
  764|  86.2k|        position: usize,
  765|  86.2k|        with_echar: bool,
  766|  86.2k|    ) -> Option<(usize, Result<char, TokenRecognizerError>)> {
  767|  86.2k|        // [26] 	UCHAR 	::= 	'\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
  768|  86.2k|        // [159s] 	ECHAR 	::= 	'\' [tbnrf"'\]
  769|  86.2k|        match *data.get(1)? {
  770|  31.1k|            b'u' => match Self::recognize_hex_char(&data[2..], 4, 'u', position) {
  771|  30.9k|                Ok(c) => Some((5, Ok(c?))),
  772|    256|                Err(e) => Some((5, Err(e))),
  773|       |            },
  774|  1.15k|            b'U' => match Self::recognize_hex_char(&data[2..], 8, 'u', position) {
  775|    461|                Ok(c) => Some((9, Ok(c?))),
  776|    689|                Err(e) => Some((9, Err(e))),
  777|       |            },
  778|    444|            b't' if with_echar => Some((1, Ok('\t'))),
  779|    423|            b'b' if with_echar => Some((1, Ok('\x08'))),
  780|    599|            b'n' if with_echar => Some((1, Ok('\n'))),
  781|    614|            b'r' if with_echar => Some((1, Ok('\r'))),
  782|    287|            b'f' if with_echar => Some((1, Ok('\x0C'))),
  783|  1.07k|            b'"' if with_echar => Some((1, Ok('"'))),
  784|    877|            b'\'' if with_echar => Some((1, Ok('\''))),
  785|  21.1k|            b'\\' if with_echar => Some((1, Ok('\\'))),
  786|  16.7k|            c => Some((
  787|  16.7k|                1,
  788|  16.7k|                Err((
  789|  16.7k|                    position..position + 2,
  790|  16.7k|                    format!("Unexpected escape character '\\{}'", char::from(c)),
  791|  16.7k|                )
  792|  16.7k|                    .into()),
  793|  16.7k|            )), // TODO: read until end of string
  794|       |        }
  795|  86.2k|    }
_RNvMs_NtCsbUpIViwkCx3_5oxttl5lexerNtB4_7N3Lexer18recognize_hex_char:
  797|  32.3k|    fn recognize_hex_char(
  798|  32.3k|        data: &[u8],
  799|  32.3k|        len: usize,
  800|  32.3k|        escape_char: char,
  801|  32.3k|        position: usize,
  802|  32.3k|    ) -> Result<Option<char>, TokenRecognizerError> {
  803|  32.3k|        if data.len() < len {
  804|    754|            return Ok(None);
  805|  31.5k|        }
  806|  31.5k|        let val = str_from_utf8(&data[..len], position..position + len + 2)?;
  807|  31.2k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  808|       |            (
  809|       |                position..position + len + 2,
  810|       |                format!(
  811|       |                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  812|       |                ),
  813|       |            )
  814|  31.2k|        })?;
  815|  30.8k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  816|       |            (
  817|       |                position..position + len +2,
  818|       |                format!(
  819|       |                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  820|       |                ),
  821|       |            )
  822|  30.8k|        })?;
  823|  30.6k|        Ok(Some(c))
  824|  32.3k|    }
_RNvMs_NtCsbUpIViwkCx3_5oxttl5lexerNtB4_7N3Lexer22recognize_unicode_char:
  826|  9.73M|    fn recognize_unicode_char(
  827|  9.73M|        data: &[u8],
  828|  9.73M|        position: usize,
  829|  9.73M|    ) -> Option<Result<(char, usize), TokenRecognizerError>> {
  830|  9.73M|        let mut code_point: u32;
  831|  9.73M|        let bytes_needed: usize;
  832|  9.73M|        let mut lower_boundary = 0x80;
  833|  9.73M|        let mut upper_boundary = 0xBF;
  834|       |
  835|  9.73M|        let byte = *data.first()?;
  836|  9.47M|        match byte {
  837|  9.47M|            0x00..=0x7F => return Some(Ok((char::from(byte), 1))),
  838|   300k|            0xC2..=0xDF => {
  839|   181k|                bytes_needed = 1;
  840|   181k|                code_point = u32::from(byte) & 0x1F;
  841|   181k|            }
  842|   118k|            0xE0..=0xEF => {
  843|  32.1k|                if byte == 0xE0 {
  844|  2.99k|                    lower_boundary = 0xA0;
  845|  29.1k|                }
  846|  32.1k|                if byte == 0xED {
  847|  2.02k|                    upper_boundary = 0x9F;
  848|  30.1k|                }
  849|  32.1k|                bytes_needed = 2;
  850|  32.1k|                code_point = u32::from(byte) & 0xF;
  851|       |            }
  852|  86.3k|            0xF0..=0xF4 => {
  853|  11.5k|                if byte == 0xF0 {
  854|  2.45k|                    lower_boundary = 0x90;
  855|  9.10k|                }
  856|  11.5k|                if byte == 0xF4 {
  857|  3.04k|                    upper_boundary = 0x8F;
  858|  8.51k|                }
  859|  11.5k|                bytes_needed = 3;
  860|  11.5k|                code_point = u32::from(byte) & 0x7;
  861|       |            }
  862|       |            _ => {
  863|   232k|                return Some(Err((
  864|   232k|                    position..=position,
  865|   232k|                    "Invalid UTF-8 character encoding",
  866|   232k|                )
  867|   232k|                    .into()))
  868|       |            }
  869|       |        }
  870|       |
  871|   230k|        for i in 1..=bytes_needed {
  872|   230k|            let byte = *data.get(i)?;
  873|   154k|            if byte < lower_boundary || upper_boundary < byte {
  874|   127k|                return Some(Err((
  875|   127k|                    position..=position + i,
  876|   127k|                    "Invalid UTF-8 character encoding",
  877|   127k|                )
  878|   127k|                    .into()));
  879|  26.6k|            }
  880|  26.6k|            lower_boundary = 0x80;
  881|  26.6k|            upper_boundary = 0xBF;
  882|  26.6k|            code_point = (code_point << 6) | (u32::from(byte) & 0x3F);
  883|       |        }
  884|       |
  885|  21.2k|        Some(
  886|  21.2k|            char::from_u32(code_point)
  887|  21.2k|                .map(|c| (c, bytes_needed + 1))
  888|  21.2k|                .ok_or_else(|| {
  889|       |                    (
  890|       |                        position..=position + bytes_needed,
  891|       |                        format!("The codepoint {code_point:X} is not a valid unicode character"),
  892|       |                    )
  893|       |                        .into()
  894|  21.2k|                }),
  895|  21.2k|        )
  896|  9.73M|    }
_RNvMs_NtCsbUpIViwkCx3_5oxttl5lexerNtB4_7N3Lexer25is_possible_pn_chars_base:
  899|  8.87M|    fn is_possible_pn_chars_base(c: char) -> bool {
  900|  8.87M|        matches!(c,
  901|  4.24M|        'A'..='Z'
  902|  2.94M|        | 'a'..='z'
  903|  20.6k|        | '\u{00C0}'..='\u{00D6}'
  904|  20.6k|        | '\u{00D8}'..='\u{00F6}'
  905|  20.6k|        | '\u{00F8}'..='\u{02FF}'
  906|  19.5k|        | '\u{0370}'..='\u{037D}'
  907|  19.5k|        | '\u{037F}'..='\u{1FFF}'
  908|  1.31k|        | '\u{200C}'..='\u{200D}'
  909|  1.31k|        | '\u{2070}'..='\u{218F}'
  910|  1.31k|        | '\u{2C00}'..='\u{2FEF}'
  911|  1.31k|        | '\u{3001}'..='\u{D7FF}'
  912|    317|        | '\u{F900}'..='\u{FDCF}'
  913|    242|        | '\u{FDF0}'..='\u{FFFD}'
  914|    242|        | '\u{10000}'..='\u{EFFFF}')
  915|  8.87M|    }
_RNvMs_NtCsbUpIViwkCx3_5oxttl5lexerNtB4_7N3Lexer22is_possible_pn_chars_u:
  918|  7.33M|    fn is_possible_pn_chars_u(c: char) -> bool {
  919|  7.33M|        Self::is_possible_pn_chars_base(c) || c == '_'
  920|  7.33M|    }
_RNvMs_NtCsbUpIViwkCx3_5oxttl5lexerNtB4_7N3Lexer20is_possible_pn_chars:
  923|  7.06M|    fn is_possible_pn_chars(c: char) -> bool {
  924|  7.06M|        Self::is_possible_pn_chars_u(c)
  925|  3.50M|            || matches!(c,
  926|  2.81M|        '-' | '0'..='9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
  927|  7.06M|    }
_RNvMs_NtCsbUpIViwkCx3_5oxttl5lexerNtB4_7N3Lexer43is_possible_pn_chars_base_but_not_valid_iri:
  929|   516k|    fn is_possible_pn_chars_base_but_not_valid_iri(c: char) -> bool {
  930|   516k|        matches!(c, '\u{FFF0}'..='\u{FFFD}')
  931|   516k|            || u32::from(c) % u32::from('\u{FFFE}') == 0
  932|   516k|            || u32::from(c) % u32::from('\u{FFFF}') == 0
  933|   516k|    }
_RNvNtCsbUpIViwkCx3_5oxttl5lexer18resolve_local_name:
  936|  16.4k|pub fn resolve_local_name(
  937|  16.4k|    prefix: &str,
  938|  16.4k|    local: &str,
  939|  16.4k|    might_be_invalid_iri: bool,
  940|  16.4k|    prefixes: &HashMap<String, Iri<String>>,
  941|  16.4k|) -> Result<NamedNode, String> {
  942|  16.4k|    if let Some(start) = prefixes.get(prefix) {
  943|    667|        let iri = format!("{start}{local}");
  944|    667|        if might_be_invalid_iri || start.path().is_empty() {
  945|       |            // We validate again. We always validate if the local part might be the IRI authority.
  946|     86|            if let Err(e) = Iri::parse(iri.as_str()) {
  947|      0|                return Err(format!(
  948|      0|                    "The prefixed name {prefix}:{local} builds IRI {iri} that is invalid: {e}"
  949|      0|                ));
  950|     86|            }
  951|    581|        }
  952|    667|        Ok(NamedNode::new_unchecked(iri))
  953|       |    } else {
  954|  15.7k|        Err(format!("The prefix {prefix}: has not been declared"))
  955|       |    }
  956|  16.4k|}
_RNvNtCsbUpIViwkCx3_5oxttl5lexer13str_from_utf8:
  958|   989k|fn str_from_utf8(data: &[u8], range: Range<usize>) -> Result<&str, TokenRecognizerError> {
  959|   989k|    str::from_utf8(data).map_err(|e| {
  960|       |        (
  961|       |            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  962|       |            format!("Invalid UTF-8: {e}"),
  963|       |        )
  964|       |            .into()
  965|   989k|    })
  966|   989k|}
_RNvNtCsbUpIViwkCx3_5oxttl5lexer16string_from_utf8:
  968|   422k|fn string_from_utf8(data: Vec<u8>, range: Range<usize>) -> Result<String, TokenRecognizerError> {
  969|   422k|    String::from_utf8(data).map_err(|e| {
  970|       |        (
  971|       |            range.start + e.utf8_error().valid_up_to()
  972|       |                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  973|       |            format!("Invalid UTF-8: {e}"),
  974|       |        )
  975|       |            .into()
  976|   422k|    })
  977|   422k|}
_RNvXs2_NtCsbUpIViwkCx3_5oxttl5lexerNtB5_7N3TokenNtNtCsevdOxZso2fM_4core3cmp9PartialEq2eqB7_:
   12|  2.45M|#[derive(Debug, PartialEq, Eq)]
_RNvXs8_NtCsbUpIViwkCx3_5oxttl5lexerNtB5_11N3LexerModeNtNtCsevdOxZso2fM_4core3cmp9PartialEq2eqB7_:
   31|   139k|#[derive(Eq, PartialEq)]
_RNCNvMs_NtCsbUpIViwkCx3_5oxttl5lexerNtB6_7N3Lexer9parse_iri0B8_:
  224|  30.5k|                .map_err(|e| (position, e.to_string()))?
_RNCNvMs_NtCsbUpIViwkCx3_5oxttl5lexerNtB6_7N3Lexer26recognize_pname_or_keyword0B8_:
  320|  51.5k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|  51.5k|                prefix: pn_prefix,
  322|  51.5k|                local,
  323|  51.5k|                might_be_invalid_iri,
  324|  51.5k|            }),
_RNCNvMs_NtCsbUpIViwkCx3_5oxttl5lexerNtB6_7N3Lexer18recognize_variable0B8_:
  337|  19.8k|            result.and_then(|(name, _)| {
  338|  19.8k|                if name.is_empty() {
  339|  15.5k|                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|  4.28k|                    Ok(N3Token::Variable(name))
  342|       |                }
  343|  19.8k|            }),
_RNCNvMs_NtCsbUpIViwkCx3_5oxttl5lexerNtB6_7N3Lexer14parse_lang_tag0B8_:
  582|  2.96k|                .map_err(|e| (position.clone(), e.to_string()))?
_RNCNvMs_NtCsbUpIViwkCx3_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_char0B8_:
  807|    428|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  808|    428|            (
  809|    428|                position..position + len + 2,
  810|    428|                format!(
  811|    428|                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  812|    428|                ),
  813|    428|            )
  814|    428|        })?;
_RNCNvMs_NtCsbUpIViwkCx3_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_chars_0B8_:
  815|    217|        let c = char::from_u32(codepoint).ok_or_else(|| {
  816|    217|            (
  817|    217|                position..position + len +2,
  818|    217|                format!(
  819|    217|                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  820|    217|                ),
  821|    217|            )
  822|    217|        })?;
_RNCNvMs_NtCsbUpIViwkCx3_5oxttl5lexerNtB6_7N3Lexer22recognize_unicode_char0B8_:
  887|  21.2k|                .map(|c| (c, bytes_needed + 1))
_RNCNvNtCsbUpIViwkCx3_5oxttl5lexer13str_from_utf80B5_:
  959|  3.07k|    str::from_utf8(data).map_err(|e| {
  960|  3.07k|        (
  961|  3.07k|            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  962|  3.07k|            format!("Invalid UTF-8: {e}"),
  963|  3.07k|        )
  964|  3.07k|            .into()
  965|  3.07k|    })
_RNCNvNtCsbUpIViwkCx3_5oxttl5lexer16string_from_utf80B5_:
  969|  16.4k|    String::from_utf8(data).map_err(|e| {
  970|  16.4k|        (
  971|  16.4k|            range.start + e.utf8_error().valid_up_to()
  972|  16.4k|                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  973|  16.4k|            format!("Invalid UTF-8: {e}"),
  974|  16.4k|        )
  975|  16.4k|            .into()
  976|  16.4k|    })

_RNvXNtCsbUpIViwkCx3_5oxttl5terseNtB2_14TriGRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer20error_recovery_state:
   35|  1.61M|    fn error_recovery_state(mut self) -> Self {
   36|  1.61M|        self.stack.clear();
   37|  1.61M|        self.cur_subject.clear();
   38|  1.61M|        self.cur_predicate.clear();
   39|  1.61M|        self.cur_object.clear();
   40|  1.61M|        self.cur_graph = GraphName::DefaultGraph;
   41|  1.61M|        self
   42|  1.61M|    }
_RNvXNtCsbUpIViwkCx3_5oxttl5terseNtB2_14TriGRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer14recognize_next:
   44|  3.55M|    fn recognize_next(
   45|  3.55M|        mut self,
   46|  3.55M|        token: N3Token<'_>,
   47|  3.55M|        context: &mut TriGRecognizerContext,
   48|  3.55M|        results: &mut Vec<Quad>,
   49|  3.55M|        errors: &mut Vec<RuleRecognizerError>,
   50|  3.55M|    ) -> Self {
   51|  3.55M|        if let Some(rule) = self.stack.pop() {
   52|  2.42M|            match rule {
   53|       |                // [1g] 	trigDoc 	::= 	(directive | block)*
   54|       |                // [2g] 	block 	::= 	triplesOrGraph | wrappedGraph | triples2 | "GRAPH" labelOrSubject wrappedGraph
   55|       |                // [3] 	directive 	::= 	prefixID | base | sparqlPrefix | sparqlBase
   56|       |                // [4] 	prefixID 	::= 	'@prefix' PNAME_NS IRIREF '.'
   57|       |                // [5] 	base 	::= 	'@base' IRIREF '.'
   58|       |                // [5s] 	sparqlPrefix 	::= 	"PREFIX" PNAME_NS IRIREF
   59|       |                // [6s] 	sparqlBase 	::= 	"BASE" IRIREF
   60|       |                TriGState::TriGDoc => {
   61|   345k|                    self.cur_graph = GraphName::DefaultGraph;
   62|   345k|                    self.stack.push(TriGState::TriGDoc);
   63|  17.7k|                    match token {
   64|  17.5k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("base") => {
   65|  4.69k|                            self.stack.push(TriGState::BaseExpectIri);
   66|  4.69k|                            self
   67|       |                        }
   68|  12.8k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("prefix") => {
   69|    166|                            self.stack.push(TriGState::PrefixExpectPrefix);
   70|    166|                            self
   71|       |                        }
   72|  1.45k|                        N3Token::LangTag("prefix") => {
   73|    698|                            self.stack.push(TriGState::ExpectDot);
   74|    698|                            self.stack.push(TriGState::PrefixExpectPrefix);
   75|    698|                            self
   76|       |                        }
   77|    757|                        N3Token::LangTag("base") => {
   78|     86|                            self.stack.push(TriGState::ExpectDot);
   79|     86|                            self.stack.push(TriGState::BaseExpectIri);
   80|     86|                            self
   81|       |                        }
   82|  12.6k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("graph") && context.with_graph_name => {
   83|      0|                            self.stack.push(TriGState::WrappedGraph);
   84|      0|                            self.stack.push(TriGState::GraphName);
   85|      0|                            self
   86|       |                        }
   87|   151k|                        N3Token::Punctuation("{") if context.with_graph_name => {
   88|  5.10k|                            self.stack.push(TriGState::WrappedGraph);
   89|  5.10k|                            self.recognize_next(token, context,results, errors)
   90|       |                        }
   91|       |                        _ => {
   92|   335k|                            self.stack.push(TriGState::TriplesOrGraph);
   93|   335k|                            self.recognize_next(token, context,results, errors)
   94|       |                        }
   95|       |                    }
   96|       |                },
   97|       |                TriGState::ExpectDot => {
   98|   111k|                    self.cur_subject.pop();
   99|   111k|                    if token == N3Token::Punctuation(".") {
  100|  80.7k|                        self
  101|       |                    } else  {
  102|  30.8k|                        errors.push("A dot is expected at the end of statements".into());
  103|  30.8k|                        self.recognize_next(token, context,results, errors)
  104|       |                    }
  105|       |                },
  106|  3.99k|                TriGState::BaseExpectIri => match token {
  107|  3.83k|                    N3Token::IriRef(iri) => {
  108|  3.83k|                        match Iri::parse_unchecked(iri) {
  109|  3.83k|                            Ok(iri) => {
  110|  3.83k|                                context.lexer_options.base_iri = Some(iri);
  111|  3.83k|                                self
  112|       |                            }
  113|      0|                            Err(e) => self.error(errors, format!("Invalid base IRI: {e}"))
  114|       |                        }
  115|       |                    }
  116|    154|                    _ => self.error(errors, "The BASE keyword should be followed by an IRI"),
  117|       |                },
  118|    617|                TriGState::PrefixExpectPrefix => match token {
  119|    617|                    N3Token::PrefixedName { prefix, local, .. } if local.is_empty() => {
  120|    542|                        self.stack.push(TriGState::PrefixExpectIri { name: prefix.to_owned() });
  121|    542|                        self
  122|       |                    }
  123|       |                    _ => {
  124|    205|                        self.error(errors, "The PREFIX keyword should be followed by a prefix like 'ex:'")
  125|       |                    }
  126|       |                },
  127|    427|                TriGState::PrefixExpectIri { name } => match token {
  128|    357|                    N3Token::IriRef(iri) => {
  129|    357|                        match Iri::parse_unchecked(iri) {
  130|    357|                            Ok(iri) => {
  131|    357|                                context.prefixes.insert(name, iri);
  132|    357|                                self
  133|       |                            }
  134|      0|                            Err(e) => self.error(errors, format!("Invalid prefix IRI: {e}"))
  135|       |                        }                    }
  136|     70|                    _ => self.error(errors, "The PREFIX declaration should be followed by a prefix and its value as an IRI"),
  137|       |                },
  138|       |                // [3g] 	triplesOrGraph 	::= 	labelOrSubject ( wrappedGraph | predicateObjectList '.' ) | quotedTriple predicateObjectList '.'
  139|       |                // [4g] 	triples2 	::= 	blankNodePropertyList predicateObjectList? '.' | collection predicateObjectList '.'
  140|  6.98k|                TriGState::TriplesOrGraph => match token {
  141|  92.7k|                    N3Token::IriRef(iri) => {
  142|  92.7k|                        self.stack.push(TriGState::WrappedGraphOrPredicateObjectList {
  143|  92.7k|                            term: NamedNode::new_unchecked(iri).into()
  144|  92.7k|                        });
  145|  92.7k|                        self
  146|       |                    }
  147|  14.3k|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  148|    325|                        Ok(t) => {
  149|    325|                            self.stack.push(TriGState::WrappedGraphOrPredicateObjectList {
  150|    325|                                term: t.into()
  151|    325|                            });
  152|    325|                            self
  153|       |                        },
  154|  13.9k|                        Err(e) => self.error(errors, e)
  155|       |                    }
  156|  58.5k|                    N3Token::BlankNodeLabel(label) => {
  157|  58.5k|                        self.stack.push(TriGState::WrappedGraphOrPredicateObjectList {
  158|  58.5k|                            term: BlankNode::new_unchecked(label).into()
  159|  58.5k|                        });
  160|  58.5k|                        self
  161|       |                    }
  162|   146k|                    N3Token::Punctuation("[") => {
  163|  6.04k|                        self.stack.push(TriGState::WrappedGraphBlankNodePropertyListCurrent);
  164|  6.04k|                        self
  165|       |                    }
  166|   140k|                    N3Token::Punctuation("(") => {
  167|  26.8k|                        self.stack.push(TriGState::ExpectDot);
  168|  26.8k|                        self.stack.push(TriGState::PredicateObjectList);
  169|  26.8k|                        self.stack.push(TriGState::SubjectCollectionBeginning);
  170|  26.8k|                        self
  171|       |                    }
  172|       |                    #[cfg(feature = "rdf-star")]
  173|   113k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  174|  6.98k|                        self.stack.push(TriGState::ExpectDot);
  175|  6.98k|                        self.stack.push(TriGState::PredicateObjectList);
  176|  6.98k|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  177|  6.98k|                        self.stack.push(TriGState::QuotedObject);
  178|  6.98k|                        self.stack.push(TriGState::Verb);
  179|  6.98k|                        self.stack.push(TriGState::QuotedSubject);
  180|  6.98k|                        self
  181|       |                    }
  182|       |                    _ => {
  183|   129k|                        self.error(errors, "TOKEN is not a valid subject or graph name")
  184|       |                    }
  185|       |                }
  186|   136k|                TriGState::WrappedGraphOrPredicateObjectList { term } => {
  187|   136k|                    if token == N3Token::Punctuation("{") && context.with_graph_name {
  188|  10.1k|                        self.cur_graph = term.into();
  189|  10.1k|                        self.stack.push(TriGState::WrappedGraph);
  190|   126k|                    } else {
  191|   126k|                        self.cur_subject.push(term.into());
  192|   126k|                        self.stack.push(TriGState::ExpectDot);
  193|   126k|                        self.stack.push(TriGState::PredicateObjectList);
  194|   126k|                    }
  195|   136k|                    self.recognize_next(token, context,results, errors)
  196|       |                }
  197|  5.54k|                TriGState::WrappedGraphBlankNodePropertyListCurrent => if token == N3Token::Punctuation("]") {
  198|    799|                    self.stack.push(TriGState::WrappedGraphOrPredicateObjectList {
  199|    799|                        term: BlankNode::default().into()
  200|    799|                    });
  201|    799|                    self
  202|       |                } else {
  203|  4.74k|                    self.cur_subject.push(BlankNode::default().into());
  204|  4.74k|                    self.stack.push(TriGState::ExpectDot);
  205|  4.74k|                    self.stack.push(TriGState::SubjectBlankNodePropertyListEnd);
  206|  4.74k|                    self.stack.push(TriGState::PredicateObjectList);
  207|  4.74k|                    self.recognize_next(token, context,results, errors)
  208|       |                }
  209|  1.98k|                TriGState::SubjectBlankNodePropertyListEnd => if token == N3Token::Punctuation("]") {
  210|     27|                    self.stack.push(TriGState::SubjectBlankNodePropertyListAfter  );
  211|     27|                    self
  212|       |                } else {
  213|  1.95k|                    errors.push("blank node property lists should end with a ']'".into());
  214|  1.95k|                    self.stack.push(TriGState::SubjectBlankNodePropertyListAfter );
  215|  1.95k|                    self.recognize_next(token, context,results, errors)
  216|       |                }
  217|  1.98k|                TriGState::SubjectBlankNodePropertyListAfter => if matches!(token, N3Token::Punctuation("." | "}")) {
  218|    558|                    self.recognize_next(token, context,results, errors)
  219|       |                } else {
  220|  1.42k|                    self.stack.push(TriGState::PredicateObjectList);
  221|  1.42k|                    self.recognize_next(token, context,results, errors)
  222|       |                }
  223|       |                TriGState::SubjectCollectionBeginning => {
  224|  26.7k|                    if let N3Token::Punctuation(")") = token {
  225|    203|                        self.cur_subject.push(rdf::NIL.into());
  226|    203|                        self
  227|       |                    } else {
  228|  26.5k|                        let root = BlankNode::default();
  229|  26.5k|                        self.cur_subject.push(root.clone().into());
  230|  26.5k|                        self.cur_subject.push(root.into());
  231|  26.5k|                        self.cur_predicate.push(rdf::FIRST.into());
  232|  26.5k|                        self.stack.push(TriGState::SubjectCollectionPossibleEnd);
  233|  26.5k|                        self.stack.push(TriGState::Object);
  234|  26.5k|                        self.recognize_next(token, context,results, errors)
  235|       |                    }
  236|       |                },
  237|       |                TriGState::SubjectCollectionPossibleEnd => {
  238|  9.23k|                    let old = self.cur_subject.pop().unwrap();
  239|  9.23k|                    self.cur_object.pop();
  240|  9.23k|                    if let N3Token::Punctuation(")") = token {
  241|    435|                        self.cur_predicate.pop();
  242|    435|                        results.push(Quad::new(
  243|    435|                            old,
  244|    435|                            rdf::REST,
  245|    435|                            rdf::NIL,
  246|    435|                            self.cur_graph.clone()
  247|    435|                        ));
  248|    435|                        self
  249|       |                    } else {
  250|  8.80k|                        let new = BlankNode::default();
  251|  8.80k|                        results.push(Quad::new(
  252|  8.80k|                            old,
  253|  8.80k|                            rdf::REST,
  254|  8.80k|                            new.clone(),
  255|  8.80k|                            self.cur_graph.clone()
  256|  8.80k|                        ));
  257|  8.80k|                        self.cur_subject.push(new.into());
  258|  8.80k|                        self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  259|  8.80k|                        self.stack.push(TriGState::Object);
  260|  8.80k|                        self.recognize_next(token, context,results, errors)
  261|       |                    }
  262|       |                }
  263|       |                // [5g] 	wrappedGraph 	::= 	'{' triplesBlock? '}'
  264|       |                // [6g] 	triplesBlock 	::= 	triples ('.' triplesBlock?)?
  265|  15.3k|                TriGState::WrappedGraph => if token == N3Token::Punctuation("{") {
  266|  15.3k|                    self.stack.push(TriGState::WrappedGraphPossibleEnd);
  267|  15.3k|                    self.stack.push(TriGState::Triples);
  268|  15.3k|                    self
  269|       |                } else {
  270|      0|                    self.error(errors, "The GRAPH keyword should be followed by a graph name and a value in '{'")
  271|       |                },
  272|       |                TriGState::WrappedGraphPossibleEnd => {
  273|  16.0k|                    self.cur_subject.pop();
  274|  16.0k|                    match token {
  275|  13.9k|                        N3Token::Punctuation("}") => {
  276|  1.84k|                            self
  277|       |                        }
  278|  12.1k|                        N3Token::Punctuation(".") => {
  279|  11.8k|                            self.stack.push(TriGState::WrappedGraphPossibleEnd);
  280|  11.8k|                            self.stack.push(TriGState::Triples);
  281|  11.8k|                            self
  282|       |                        }
  283|       |                       _ => {
  284|  2.36k|                            errors.push("A '}' or a '.' is expected at the end of a graph block".into());
  285|  2.36k|                            self.recognize_next(token, context,results, errors)
  286|       |                        }
  287|       |                    }
  288|       |                }
  289|       |                // [6] 	triples 	::= 	subject predicateObjectList | blankNodePropertyList predicateObjectList?
  290|       |                // [10] 	subject 	::= 	iri | BlankNode | collection | quotedTriple
  291|    102|                TriGState::Triples => match token {
  292|  9.65k|                    N3Token::Punctuation("}") => {
  293|  1.84k|                        self.recognize_next(token, context,results, errors) // Early end
  294|       |                    },
  295|  7.81k|                    N3Token::Punctuation("[") => {
  296|    240|                        self.cur_subject.push(BlankNode::default().into());
  297|    240|                        self.stack.push(TriGState::TriplesBlankNodePropertyListCurrent);
  298|    240|                        self
  299|       |                    }
  300|  3.85k|                    N3Token::IriRef(iri) => {
  301|  3.85k|                        self.cur_subject.push(NamedNode::new_unchecked(iri).into());
  302|  3.85k|                        self.stack.push(TriGState::PredicateObjectList);
  303|  3.85k|                        self
  304|       |                    }
  305|    426|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  306|    117|                        Ok(t) => {
  307|    117|                            self.cur_subject.push(t.into());
  308|    117|                            self.stack.push(TriGState::PredicateObjectList);
  309|    117|                            self
  310|       |                        },
  311|    309|                        Err(e) => self.error(errors, e)
  312|       |                    }
  313|  11.7k|                    N3Token::BlankNodeLabel(label) => {
  314|  11.7k|                        self.cur_subject.push(BlankNode::new_unchecked(label).into());
  315|  11.7k|                        self.stack.push(TriGState::PredicateObjectList);
  316|  11.7k|                        self
  317|       |                    }
  318|  7.57k|                    N3Token::Punctuation("(") => {
  319|  6.03k|                        self.stack.push(TriGState::PredicateObjectList);
  320|  6.03k|                        self.stack.push(TriGState::SubjectCollectionBeginning);
  321|  6.03k|                        self
  322|       |                    }
  323|       |                    #[cfg(feature = "rdf-star")]
  324|  1.54k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  325|    102|                        self.stack.push(TriGState::PredicateObjectList);
  326|    102|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  327|    102|                        self.stack.push(TriGState::QuotedObject);
  328|    102|                        self.stack.push(TriGState::Verb);
  329|    102|                        self.stack.push(TriGState::QuotedSubject);
  330|    102|                        self
  331|       |                    }
  332|       |                   _ => {
  333|  1.81k|                        self.error(errors, "TOKEN is not a valid RDF subject")
  334|       |                    }
  335|       |                },
  336|    235|                TriGState::TriplesBlankNodePropertyListCurrent => if token == N3Token::Punctuation("]") {
  337|    126|                    self.stack.push(TriGState::PredicateObjectList);
  338|    126|                    self
  339|       |                } else {
  340|    109|                    self.stack.push(TriGState::SubjectBlankNodePropertyListEnd);
  341|    109|                    self.stack.push(TriGState::PredicateObjectList);
  342|    109|                    self.recognize_next(token, context,results, errors)
  343|       |                }
  344|       |                // [7g] 	labelOrSubject 	::= 	iri | BlankNode
  345|      0|                TriGState::GraphName => match token {
  346|      0|                    N3Token::IriRef(iri) => {
  347|      0|                        self.cur_graph = NamedNode::new_unchecked(iri).into();
  348|      0|                        self
  349|       |                    }
  350|      0|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  351|      0|                        Ok(t) => {
  352|      0|                            self.cur_graph = t.into();
  353|      0|                            self
  354|       |                        },
  355|      0|                        Err(e) => self.error(errors, e)
  356|       |                    }
  357|      0|                    N3Token::BlankNodeLabel(label) => {
  358|      0|                        self.cur_graph = BlankNode::new_unchecked(label).into();
  359|      0|                        self
  360|       |                    }
  361|      0|                    N3Token::Punctuation("[") => {
  362|      0|                        self.stack.push(TriGState::GraphNameAnonEnd);
  363|      0|                        self
  364|       |                    }
  365|       |                   _ => {
  366|      0|                        self.error(errors, "TOKEN is not a valid graph name")
  367|       |                    }
  368|       |                }
  369|      0|                TriGState::GraphNameAnonEnd => if token == N3Token::Punctuation("]") {
  370|      0|                    self.cur_graph = BlankNode::default().into();
  371|      0|                    self
  372|       |                } else {
  373|      0|                    self.error(errors, "Anonymous blank node with a property list are not allowed as graph name")
  374|       |                }
  375|       |                // [7] 	predicateObjectList 	::= 	verb objectList (';' (verb objectList)?)*
  376|       |                TriGState::PredicateObjectList => {
  377|   159k|                    self.stack.push(TriGState::PredicateObjectListEnd);
  378|   159k|                    self.stack.push(TriGState::ObjectsList);
  379|   159k|                    self.stack.push(TriGState::Verb);
  380|   159k|                    self.recognize_next(token, context,results, errors)
  381|       |                },
  382|       |                TriGState::PredicateObjectListEnd => {
  383|   139k|                    self.cur_predicate.pop();
  384|   139k|                    if token == N3Token::Punctuation(";") {
  385|  9.54k|                        self.stack.push(TriGState::PredicateObjectListPossibleContinuation);
  386|  9.54k|                        self
  387|       |                    } else {
  388|   129k|                        self.recognize_next(token, context,results, errors)
  389|       |                    }
  390|       |                },
  391|  11.6k|                TriGState::PredicateObjectListPossibleContinuation => if token == N3Token::Punctuation(";") {
  392|  2.16k|                    self.stack.push(TriGState::PredicateObjectListPossibleContinuation);
  393|  2.16k|                    self
  394|  9.52k|                } else if matches!(token, N3Token::Punctuation("." | "}" | "]")) {
  395|    302|                    self.recognize_next(token, context,results, errors)
  396|       |                } else {
  397|  9.22k|                    self.stack.push(TriGState::PredicateObjectListEnd);
  398|  9.22k|                    self.stack.push(TriGState::ObjectsList);
  399|  9.22k|                    self.stack.push(TriGState::Verb);
  400|  9.22k|                    self.recognize_next(token, context,results, errors)
  401|       |                },
  402|       |                // [8] 	objectList 	::= 	object annotation? ( ',' object annotation? )*
  403|       |                // [30t] 	annotation 	::= 	'{|' predicateObjectList '|}'
  404|       |                TriGState::ObjectsList => {
  405|   159k|                    self.stack.push(TriGState::ObjectsListEnd);
  406|   159k|                    self.stack.push(TriGState::Object);
  407|   159k|                    self.recognize_next(token, context,results, errors)
  408|       |                }
  409|       |                TriGState::ObjectsListEnd => {
  410|   154k|                    match token {
  411|   126k|                        N3Token::Punctuation(",") => {
  412|  8.12k|                            self.cur_object.pop();
  413|  8.12k|                            self.stack.push(TriGState::ObjectsListEnd);
  414|  8.12k|                            self.stack.push(TriGState::Object);
  415|  8.12k|                            self
  416|       |                        },
  417|       |                        #[cfg(feature = "rdf-star")]
  418|   118k|                        N3Token::Punctuation("{|") => {
  419|  7.79k|                            let triple = Triple::new(
  420|  7.79k|                                self.cur_subject.last().unwrap().clone(),
  421|  7.79k|                                self.cur_predicate.last().unwrap().clone(),
  422|  7.79k|                                self.cur_object.pop().unwrap()
  423|  7.79k|                            );
  424|  7.79k|                            self.cur_subject.push(triple.into());
  425|  7.79k|                            self.stack.push(TriGState::AnnotationEnd);
  426|  7.79k|                            self.stack.push(TriGState::PredicateObjectList);
  427|  7.79k|                            self
  428|       |                        }
  429|       |                       _ => {
  430|   139k|                            self.cur_object.pop();
  431|   139k|                            self.recognize_next(token, context,results, errors)
  432|       |                        }
  433|       |                    }
  434|       |                },
  435|       |                #[cfg(feature = "rdf-star")]
  436|       |                TriGState::AnnotationEnd => {
  437|  2.57k|                    self.cur_subject.pop();
  438|  2.57k|                    self.stack.push(TriGState::ObjectsListAfterAnnotation);
  439|  2.57k|                    if token == N3Token::Punctuation("|}") {
  440|      0|                        self
  441|       |                    } else {
  442|  2.57k|                        self.error(errors, "Annotations should end with '|}'")
  443|       |                    }
  444|       |                },
  445|       |                #[cfg(feature = "rdf-star")]
  446|      0|                TriGState::ObjectsListAfterAnnotation => if token == N3Token::Punctuation(",") {
  447|      0|                    self.stack.push(TriGState::ObjectsListEnd);
  448|      0|                    self.stack.push(TriGState::Object);
  449|      0|                    self
  450|       |                } else {
  451|      0|                    self.recognize_next(token, context,results, errors)
  452|       |                },
  453|       |                // [9] 	verb 	::= 	predicate | 'a'
  454|       |                // [11] 	predicate 	::= 	iri
  455|   183k|                TriGState::Verb => match token {
  456|  6.03k|                    N3Token::PlainKeyword("a") => {
  457|  3.51k|                        self.cur_predicate.push(rdf::TYPE.into());
  458|  3.51k|                        self
  459|       |                    }
  460|   170k|                    N3Token::IriRef(iri) => {
  461|   170k|                        self.cur_predicate.push(NamedNode::new_unchecked(iri));
  462|   170k|                        self
  463|       |                    }
  464|    280|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  465|      3|                        Ok(t) => {
  466|      3|                            self.cur_predicate.push(t);
  467|      3|                            self
  468|       |                        },
  469|    277|                        Err(e) => self.error(errors, e)
  470|       |                    }
  471|       |                   _ => {
  472|  9.36k|                        self.error(errors, "TOKEN is not a valid predicate")
  473|       |                    }
  474|       |                }
  475|       |                // [12] 	object 	::= 	iri | BlankNode | collection | blankNodePropertyList | literal | quotedTriple
  476|       |                // [13] 	literal 	::= 	RDFLiteral | NumericLiteral | BooleanLiteral
  477|       |                // [14] 	blank 	::= 	BlankNode | collection
  478|       |                // [15] 	blankNodePropertyList 	::= 	'[' predicateObjectList ']'
  479|       |                // [16] 	collection 	::= 	'(' object* ')'
  480|       |                // [17] 	NumericLiteral 	::= 	INTEGER | DECIMAL | DOUBLE
  481|       |                // [128s] 	RDFLiteral 	::= 	String (LANGTAG | '^^' iri)?
  482|       |                // [133s] 	BooleanLiteral 	::= 	'true' | 'false'
  483|       |                // [18] 	String 	::= 	STRING_LITERAL_QUOTE | STRING_LITERAL_SINGLE_QUOTE | STRING_LITERAL_LONG_SINGLE_QUOTE | STRING_LITERAL_LONG_QUOTE
  484|       |                // [135s] 	iri 	::= 	IRIREF | PrefixedName
  485|       |                // [136s] 	PrefixedName 	::= 	PNAME_LN | PNAME_NS
  486|       |                // [137s] 	BlankNode 	::= 	BLANK_NODE_LABEL | ANON
  487|  8.29k|                TriGState::Object => match token {
  488|  20.6k|                    N3Token::IriRef(iri) => {
  489|  20.6k|                        self.cur_object.push(NamedNode::new_unchecked(iri).into());
  490|  20.6k|                        self.emit_quad(results);
  491|  20.6k|                        self
  492|       |                    }
  493|    797|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  494|    220|                        Ok(t) => {
  495|    220|                            self.cur_object.push(t.into());
  496|    220|                            self.emit_quad(results);
  497|    220|                            self
  498|       |                        },
  499|    577|                        Err(e) => self.error(errors, e)
  500|       |                    }
  501|  54.0k|                    N3Token::BlankNodeLabel(label) => {
  502|  54.0k|                        self.cur_object.push(BlankNode::new_unchecked(label).into());
  503|  54.0k|                        self.emit_quad(results);
  504|  54.0k|                        self
  505|       |                    }
  506|   121k|                    N3Token::Punctuation("[") => {
  507|  1.50k|                        self.stack.push(TriGState::ObjectBlankNodePropertyListCurrent);
  508|  1.50k|                        self
  509|       |                    }
  510|   120k|                    N3Token::Punctuation("(") => {
  511|   106k|                        self.stack.push(TriGState::ObjectCollectionBeginning);
  512|   106k|                        self
  513|       |                    }
  514|  19.9k|                    N3Token::String(value) => {
  515|  19.9k|                        self.stack.push(TriGState::LiteralPossibleSuffix { value, emit: true });
  516|  19.9k|                        self
  517|       |                    }
  518|  80.2k|                    N3Token::Integer(v) => {
  519|  80.2k|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::INTEGER).into());
  520|  80.2k|                        self.emit_quad(results);
  521|  80.2k|                        self
  522|       |                    }
  523|  7.24k|                    N3Token::Decimal(v) => {
  524|  7.24k|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
  525|  7.24k|                        self.emit_quad(results);
  526|  7.24k|                        self
  527|       |                    }
  528|  34.2k|                    N3Token::Double(v) => {
  529|  34.2k|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
  530|  34.2k|                        self.emit_quad(results);
  531|  34.2k|                        self
  532|       |                    }
  533|  3.74k|                    N3Token::PlainKeyword("true") => {
  534|    628|                        self.cur_object.push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
  535|    628|                        self.emit_quad(results);
  536|    628|                        self
  537|       |                    }
  538|  3.12k|                    N3Token::PlainKeyword("false") => {
  539|    178|                        self.cur_object.push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
  540|    178|                        self.emit_quad(results);
  541|    178|                        self
  542|       |                    }
  543|       |                    #[cfg(feature = "rdf-star")]
  544|  13.6k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  545|  8.29k|                        self.stack.push(TriGState::ObjectQuotedTripleEnd { emit: true });
  546|  8.29k|                        self.stack.push(TriGState::QuotedObject);
  547|  8.29k|                        self.stack.push(TriGState::Verb);
  548|  8.29k|                        self.stack.push(TriGState::QuotedSubject);
  549|  8.29k|                        self
  550|       |                    }
  551|       |                   _ => {
  552|  8.50k|                        self.error(errors, "TOKEN is not a valid RDF object")
  553|       |                    }
  554|       |
  555|       |                }
  556|  1.35k|                TriGState::ObjectBlankNodePropertyListCurrent => if token == N3Token::Punctuation("]") {
  557|    203|                    self.cur_object.push(BlankNode::default().into());
  558|    203|                    self.emit_quad(results);
  559|    203|                    self
  560|       |                } else {
  561|  1.15k|                    self.cur_subject.push(BlankNode::default().into());
  562|  1.15k|                    self.stack.push(TriGState::ObjectBlankNodePropertyListEnd);
  563|  1.15k|                    self.stack.push(TriGState::PredicateObjectList);
  564|  1.15k|                    self.recognize_next(token, context,results, errors)
  565|       |                }
  566|    303|                TriGState::ObjectBlankNodePropertyListEnd => if token == N3Token::Punctuation("]") {
  567|     96|                    self.cur_object.push(self.cur_subject.pop().unwrap().into());
  568|     96|                    self.emit_quad(results);
  569|     96|                    self
  570|       |                } else {
  571|    207|                    self.error(errors, "blank node property lists should end with a ']'")
  572|       |                }
  573|   104k|                TriGState::ObjectCollectionBeginning => if let  N3Token::Punctuation(")") = token {
  574|  2.78k|                    self.cur_object.push(rdf::NIL.into());
  575|  2.78k|                    self.emit_quad(results);
  576|  2.78k|                    self
  577|       |                } else {
  578|   101k|                    let root = BlankNode::default();
  579|   101k|                    self.cur_object.push(root.clone().into());
  580|   101k|                    self.emit_quad(results);
  581|   101k|                    self.cur_subject.push(root.into());
  582|   101k|                    self.cur_predicate.push(rdf::FIRST.into());
  583|   101k|                    self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  584|   101k|                    self.stack.push(TriGState::Object);
  585|   101k|                    self.recognize_next(token, context,results, errors)
  586|       |                },
  587|       |                TriGState::ObjectCollectionPossibleEnd => {
  588|  47.1k|                    let old = self.cur_subject.pop().unwrap();
  589|  47.1k|                    self.cur_object.pop();
  590|  47.1k|                    if let N3Token::Punctuation(")") = token {
  591|  8.07k|                        self.cur_predicate.pop();
  592|  8.07k|                        results.push(Quad::new(old,
  593|  8.07k|                                               rdf::REST,
  594|  8.07k|                                               rdf::NIL,
  595|  8.07k|                                               self.cur_graph.clone()
  596|  8.07k|                        ));
  597|  8.07k|                        self
  598|       |                    }else {
  599|  39.0k|                        let new = BlankNode::default();
  600|  39.0k|                        results.push(Quad::new(old,
  601|  39.0k|                                               rdf::REST,
  602|  39.0k|                                               new.clone(),
  603|  39.0k|                                               self.cur_graph.clone()
  604|  39.0k|                        ));
  605|  39.0k|                        self.cur_subject.push(new.into());
  606|  39.0k|                        self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  607|  39.0k|                        self.stack.push(TriGState::Object);
  608|  39.0k|                        self.recognize_next(token, context,results, errors)
  609|       |                    }
  610|       |                }
  611|  19.5k|                TriGState::LiteralPossibleSuffix { value, emit } => {
  612|  19.5k|                    match token {
  613|  2.97k|                        N3Token::LangTag(lang) => {
  614|  2.97k|                            self.cur_object.push(Literal::new_language_tagged_literal_unchecked(value, lang.to_ascii_lowercase()).into());
  615|  2.97k|                            if emit {
  616|  2.93k|                                self.emit_quad(results);
  617|  2.93k|                            }
  618|  2.97k|                            self
  619|       |                        },
  620|  9.30k|                        N3Token::Punctuation("^^") => {
  621|    374|                            self.stack.push(TriGState::LiteralExpectDatatype { value, emit });
  622|    374|                            self
  623|       |                        }
  624|       |                        _ => {
  625|  16.1k|                            self.cur_object.push(Literal::new_simple_literal(value).into());
  626|  16.1k|                            if emit {
  627|  15.8k|                                self.emit_quad(results);
  628|  15.8k|                            }
  629|  16.1k|                            self.recognize_next(token, context,results, errors)
  630|       |                        }
  631|       |                    }
  632|       |                }
  633|    297|                TriGState::LiteralExpectDatatype { value, emit } => {
  634|    297|                    match token {
  635|    124|                        N3Token::IriRef(datatype) => {
  636|    124|                            self.cur_object.push(Literal::new_typed_literal(value, NamedNode::new_unchecked(datatype)).into());
  637|    124|                            if emit {
  638|    124|                                self.emit_quad(results);
  639|    124|                            }
  640|    124|                            self
  641|       |                        },
  642|     79|                        N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  643|      2|                            Ok(t) => {
  644|      2|                                self.cur_object.push(Literal::new_typed_literal(value, t).into());
  645|      2|                                if emit {
  646|      2|                                    self.emit_quad(results);
  647|      2|                                }
  648|      2|                                self
  649|       |                            },
  650|     77|                            Err(e) => self.error(errors, e)
  651|       |                        }
  652|       |                        _ => {
  653|     94|                            self.error(errors, "Expecting a datatype IRI after ^^, found TOKEN").recognize_next(token, context, results, errors)
  654|       |                        }
  655|       |                    }
  656|       |                }
  657|       |                // [27t] 	quotedTriple 	::= 	'<<' qtSubject verb qtObject '>>'
  658|       |                #[cfg(feature = "rdf-star")]
  659|       |                TriGState::SubjectQuotedTripleEnd => {
  660|  6.58k|                    let triple = Triple::new(
  661|  6.58k|                        self.cur_subject.pop().unwrap(),
  662|  6.58k|                        self.cur_predicate.pop().unwrap(),
  663|  6.58k|                        self.cur_object.pop().unwrap()
  664|  6.58k|                    );
  665|  6.58k|                    self.cur_subject.push(triple.into());
  666|  6.58k|                    if token == N3Token::Punctuation(">>") {
  667|  5.18k|                        self
  668|       |                    } else {
  669|  1.39k|                        self.error(errors, "Expecting '>>' to close a quoted triple, found TOKEN")
  670|       |                    }
  671|       |                }
  672|       |                #[cfg(feature = "rdf-star")]
  673|  5.46k|                TriGState::ObjectQuotedTripleEnd { emit } => {
  674|  5.46k|                    let triple = Triple::new(
  675|  5.46k|                        self.cur_subject.pop().unwrap(),
  676|  5.46k|                        self.cur_predicate.pop().unwrap(),
  677|  5.46k|                        self.cur_object.pop().unwrap()
  678|  5.46k|                    );
  679|  5.46k|                    self.cur_object.push(triple.into());
  680|  5.46k|                    if emit {
  681|  5.38k|                        self.emit_quad(results);
  682|  5.38k|                    }
  683|  5.46k|                    if token == N3Token::Punctuation(">>") {
  684|  1.44k|                        self
  685|       |                    } else {
  686|  4.01k|                        self.error(errors, "Expecting '>>' to close a quoted triple, found TOKEN")
  687|       |                    }
  688|       |                }
  689|       |                // [28t] 	qtSubject 	::= 	iri | BlankNode | quotedTriple
  690|       |                #[cfg(feature = "rdf-star")]
  691|  38.1k|                TriGState::QuotedSubject => match token {
  692|  24.0k|                    N3Token::Punctuation("[") => {
  693|    217|                        self.cur_subject.push(BlankNode::default().into());
  694|    217|                        self.stack.push(TriGState::QuotedAnonEnd);
  695|    217|                        self
  696|       |                    }
  697|  11.4k|                    N3Token::IriRef(iri) => {
  698|  11.4k|                        self.cur_subject.push(NamedNode::new_unchecked(iri).into());
  699|  11.4k|                        self
  700|       |                    }
  701|    342|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  702|      0|                        Ok(t) => {
  703|      0|                            self.cur_subject.push(t.into());
  704|      0|                            self
  705|       |                        },
  706|    342|                        Err(e) => self.error(errors, e)
  707|       |                    }
  708|    954|                    N3Token::BlankNodeLabel(label) => {
  709|    954|                        self.cur_subject.push(BlankNode::new_unchecked(label).into());
  710|    954|                        self
  711|       |                    }
  712|  23.8k|                    N3Token::Punctuation("<<") => {
  713|  23.2k|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  714|  23.2k|                        self.stack.push(TriGState::QuotedObject);
  715|  23.2k|                        self.stack.push(TriGState::Verb);
  716|  23.2k|                        self.stack.push(TriGState::QuotedSubject);
  717|  23.2k|                        self
  718|       |                    }
  719|  1.88k|                    _ => self.error(errors, "TOKEN is not a valid RDF quoted triple subject: TOKEN")
  720|       |                }
  721|       |                // [29t] 	qtObject 	::= 	iri | BlankNode | literal | quotedTriple
  722|       |                #[cfg(feature = "rdf-star")]
  723|  13.6k|                TriGState::QuotedObject => match token {
  724|    867|                    N3Token::Punctuation("[") => {
  725|    125|                        self.cur_object.push(BlankNode::default().into());
  726|    125|                        self.stack.push(TriGState::QuotedAnonEnd);
  727|    125|                        self
  728|       |                    }
  729|    967|                    N3Token::IriRef(iri) => {
  730|    967|                        self.cur_object.push(NamedNode::new_unchecked(iri).into());
  731|    967|                        self
  732|       |                    }
  733|    178|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  734|      0|                        Ok(t) => {
  735|      0|                            self.cur_object.push(t.into());
  736|      0|                            self
  737|       |                        },
  738|    178|                        Err(e) => self.error(errors, e)
  739|       |                    }
  740|  1.60k|                    N3Token::BlankNodeLabel(label) => {
  741|  1.60k|                        self.cur_object.push(BlankNode::new_unchecked(label).into());
  742|  1.60k|                        self
  743|       |                    }
  744|    426|                    N3Token::String(value) => {
  745|    426|                        self.stack.push(TriGState::LiteralPossibleSuffix { value, emit: false });
  746|    426|                        self
  747|       |                    }
  748|  2.04k|                    N3Token::Integer(v) => {
  749|  2.04k|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::INTEGER).into());
  750|  2.04k|                        self
  751|       |                    }
  752|     97|                    N3Token::Decimal(v) => {
  753|     97|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
  754|     97|                        self
  755|       |                    }
  756|  7.08k|                    N3Token::Double(v) => {
  757|  7.08k|                        self.cur_object.push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
  758|  7.08k|                        self
  759|       |                    }
  760|    229|                    N3Token::PlainKeyword("true") => {
  761|     26|                        self.cur_object.push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
  762|     26|                        self
  763|       |                    }
  764|    203|                    N3Token::PlainKeyword("false") => {
  765|     64|                        self.cur_object.push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
  766|     64|                        self
  767|       |                    }
  768|    742|                    N3Token::Punctuation("<<") => {
  769|    499|                        self.stack.push(TriGState::ObjectQuotedTripleEnd { emit: false });
  770|    499|                        self.stack.push(TriGState::QuotedObject);
  771|    499|                        self.stack.push(TriGState::Verb);
  772|    499|                        self.stack.push(TriGState::QuotedSubject);
  773|    499|                        self
  774|       |                    }
  775|    580|                    _ => self.error(errors, "TOKEN is not a valid RDF quoted triple object")
  776|       |                }
  777|       |                #[cfg(feature = "rdf-star")]
  778|    293|                TriGState::QuotedAnonEnd => if token == N3Token::Punctuation("]") {
  779|    163|                    self
  780|       |                } else {
  781|    130|                    self.error(errors, "Anonymous blank node with a property list are not allowed in quoted triples")
  782|       |                }
  783|       |            }
  784|  1.12M|        } else if token == N3Token::Punctuation(".") || token == N3Token::Punctuation("}") {
  785|       |            // TODO: be smarter depending if we are in '{' or not
  786|   246k|            self.stack.push(TriGState::TriGDoc);
  787|   246k|            self
  788|       |        } else {
  789|   882k|            self
  790|       |        }
  791|  3.55M|    }
_RNvXNtCsbUpIViwkCx3_5oxttl5terseNtB2_14TriGRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer13recognize_end:
  793|  25.2k|    fn recognize_end(
  794|  25.2k|        mut self,
  795|  25.2k|        _context: &mut TriGRecognizerContext,
  796|  25.2k|        results: &mut Vec<Self::Output>,
  797|  25.2k|        errors: &mut Vec<RuleRecognizerError>,
  798|  25.2k|    ) {
  799|  25.2k|        match &*self.stack {
  800|  25.2k|            [] | [TriGState::TriGDoc] => {
  801|  24.0k|                debug_assert!(
  802|      0|                    self.cur_subject.is_empty(),
  803|      0|                    "The cur_subject stack must be empty if the state stack is empty"
  804|       |                );
  805|  24.0k|                debug_assert!(
  806|      0|                    self.cur_predicate.is_empty(),
  807|      0|                    "The cur_predicate stack must be empty if the state stack is empty"
  808|       |                );
  809|  24.0k|                debug_assert!(
  810|      0|                    self.cur_object.is_empty(),
  811|      0|                    "The cur_object stack must be empty if the state stack is empty"
  812|       |                );
  813|       |            }
  814|    213|            [.., TriGState::LiteralPossibleSuffix { value, emit: true }] => {
  815|    213|                self.cur_object
  816|    213|                    .push(Literal::new_simple_literal(value).into());
  817|    213|                self.emit_quad(results);
  818|    213|                errors.push("Triples should be followed by a dot".into())
  819|       |            }
  820|    896|            _ => errors.push("Unexpected end".into()), // TODO
  821|       |        }
  822|  25.2k|    }
_RNvXNtCsbUpIViwkCx3_5oxttl5terseNtB2_14TriGRecognizerNtNtNtB4_7toolkit6parser14RuleRecognizer13lexer_options:
  824|  5.59M|    fn lexer_options(context: &TriGRecognizerContext) -> &N3LexerOptions {
  825|  5.59M|        &context.lexer_options
  826|  5.59M|    }
_RNvMs_NtCsbUpIViwkCx3_5oxttl5terseNtB4_14TriGRecognizer10new_parser:
  830|  25.2k|    pub fn new_parser(
  831|  25.2k|        with_graph_name: bool,
  832|  25.2k|        #[cfg(feature = "rdf-star")] with_quoted_triples: bool,
  833|  25.2k|        unchecked: bool,
  834|  25.2k|        base_iri: Option<Iri<String>>,
  835|  25.2k|        prefixes: HashMap<String, Iri<String>>,
  836|  25.2k|    ) -> Parser<Self> {
  837|  25.2k|        Parser::new(
  838|  25.2k|            Lexer::new(
  839|  25.2k|                N3Lexer::new(N3LexerMode::Turtle, unchecked),
  840|  25.2k|                MIN_BUFFER_SIZE,
  841|  25.2k|                MAX_BUFFER_SIZE,
  842|  25.2k|                true,
  843|  25.2k|                Some(b"#"),
  844|  25.2k|            ),
  845|  25.2k|            Self {
  846|  25.2k|                stack: vec![TriGState::TriGDoc],
  847|  25.2k|                cur_subject: Vec::new(),
  848|  25.2k|                cur_predicate: Vec::new(),
  849|  25.2k|                cur_object: Vec::new(),
  850|  25.2k|                cur_graph: GraphName::DefaultGraph,
  851|  25.2k|            },
  852|  25.2k|            TriGRecognizerContext {
  853|  25.2k|                with_graph_name,
  854|  25.2k|                #[cfg(feature = "rdf-star")]
  855|  25.2k|                with_quoted_triples,
  856|  25.2k|                prefixes,
  857|  25.2k|                lexer_options: N3LexerOptions { base_iri },
  858|  25.2k|            },
  859|  25.2k|        )
  860|  25.2k|    }
_RNvMs_NtCsbUpIViwkCx3_5oxttl5terseNtB4_14TriGRecognizer9emit_quad:
  877|   326k|    fn emit_quad(&mut self, results: &mut Vec<Quad>) {
  878|   326k|        results.push(Quad::new(
  879|   326k|            self.cur_subject.last().unwrap().clone(),
  880|   326k|            self.cur_predicate.last().unwrap().clone(),
  881|   326k|            self.cur_object.last().unwrap().clone(),
  882|   326k|            self.cur_graph.clone(),
  883|   326k|        ));
  884|   326k|    }
_RINvMs_NtCsbUpIViwkCx3_5oxttl5terseNtB5_14TriGRecognizer5errorNtNtCs4msIGfPSjWU_5alloc6string6StringEB7_:
  863|  15.7k|    fn error(
  864|  15.7k|        mut self,
  865|  15.7k|        errors: &mut Vec<RuleRecognizerError>,
  866|  15.7k|        msg: impl Into<RuleRecognizerError>,
  867|  15.7k|    ) -> Self {
  868|  15.7k|        errors.push(msg.into());
  869|  15.7k|        self.stack.clear();
  870|  15.7k|        self.cur_subject.clear();
  871|  15.7k|        self.cur_predicate.clear();
  872|  15.7k|        self.cur_object.clear();
  873|  15.7k|        self.cur_graph = GraphName::DefaultGraph;
  874|  15.7k|        self
  875|  15.7k|    }
_RINvMs_NtCsbUpIViwkCx3_5oxttl5terseNtB5_14TriGRecognizer5errorReEB7_:
  863|   160k|    fn error(
  864|   160k|        mut self,
  865|   160k|        errors: &mut Vec<RuleRecognizerError>,
  866|   160k|        msg: impl Into<RuleRecognizerError>,
  867|   160k|    ) -> Self {
  868|   160k|        errors.push(msg.into());
  869|   160k|        self.stack.clear();
  870|   160k|        self.cur_subject.clear();
  871|   160k|        self.cur_predicate.clear();
  872|   160k|        self.cur_object.clear();
  873|   160k|        self.cur_graph = GraphName::DefaultGraph;
  874|   160k|        self
  875|   160k|    }

_RNvXs_NtNtCsbUpIViwkCx3_5oxttl7toolkit5errorNtB4_11SyntaxErrorNtNtCsevdOxZso2fM_4core3fmt7Display3fmtCsiApsw9S2n9N_4trig:
   38|  1.82M|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   39|  1.82M|        if self.location.start.offset + 1 >= self.location.end.offset {
   40|  1.57M|            write!(
   41|  1.57M|                f,
   42|  1.57M|                "Parser error at line {} column {}: {}",
   43|  1.57M|                self.location.start.line + 1,
   44|  1.57M|                self.location.start.column + 1,
   45|  1.57M|                self.message
   46|  1.57M|            )
   47|   255k|        } else if self.location.start.line == self.location.end.line {
   48|   253k|            write!(
   49|   253k|                f,
   50|   253k|                "Parser error between at line {} between columns {} and column {}: {}",
   51|   253k|                self.location.start.line + 1,
   52|   253k|                self.location.start.column + 1,
   53|   253k|                self.location.end.column + 1,
   54|   253k|                self.message
   55|   253k|            )
   56|       |        } else {
   57|  1.90k|            write!(
   58|  1.90k|                f,
   59|  1.90k|                "Parser error between line {} column {} and line {} column {}: {}",
   60|  1.90k|                self.location.start.line + 1,
   61|  1.90k|                self.location.start.column + 1,
   62|  1.90k|                self.location.end.line + 1,
   63|  1.90k|                self.location.end.column + 1,
   64|  1.90k|                self.message
   65|  1.90k|            )
   66|       |        }
   67|  1.82M|    }

_RINvMs1_NtNtCsbUpIViwkCx3_5oxttl7toolkit5lexerINtB6_5LexerNtNtBa_5lexer7N3LexerE16extend_from_readRShECsiApsw9S2n9N_4trig:
  113|  16.7k|    pub fn extend_from_read(&mut self, read: &mut impl Read) -> io::Result<()> {
  114|  16.7k|        self.shrink_data();
  115|  16.7k|        if self.data.len() == self.max_buffer_size {
  116|      0|            return Err(io::Error::new(
  117|      0|                io::ErrorKind::OutOfMemory,
  118|      0|                format!(
  119|      0|                    "Reached the buffer maximal size of {}",
  120|      0|                    self.max_buffer_size
  121|      0|                ),
  122|      0|            ));
  123|  16.7k|        }
  124|  16.7k|        let min_end = min(self.data.len() + self.min_buffer_size, self.max_buffer_size);
  125|  16.7k|        let new_start = self.data.len();
  126|  16.7k|        self.data.resize(min_end, 0);
  127|  16.7k|        if self.data.len() < self.data.capacity() {
  128|  1.64k|            // We keep extending to have as much space as available without reallocation
  129|  1.64k|            self.data.resize(self.data.capacity(), 0);
  130|  15.1k|        }
  131|  16.7k|        let read = read.read(&mut self.data[new_start..])?;
  132|  16.7k|        self.data.truncate(new_start + read);
  133|  16.7k|        self.is_ending = read == 0;
  134|  16.7k|        Ok(())
  135|  16.7k|    }
_RNvXNtNtCsbUpIViwkCx3_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCsevdOxZso2fM_4core7convert4FromTINtNtNtB1a_3ops5range5RangejENtNtCs4msIGfPSjWU_5alloc6string6StringEE4fromB6_:
   31|  1.21M|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|  1.21M|        Self {
   33|  1.21M|            location,
   34|  1.21M|            message: message.into(),
   35|  1.21M|        }
   36|  1.21M|    }
_RNvXNtNtCsbUpIViwkCx3_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCsevdOxZso2fM_4core7convert4FromTINtNtNtB1a_3ops5range5RangejEReEE4fromB6_:
   31|   408k|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|   408k|        Self {
   33|   408k|            location,
   34|   408k|            message: message.into(),
   35|   408k|        }
   36|   408k|    }
_RNvXs_NtNtCsbUpIViwkCx3_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCsevdOxZso2fM_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejENtNtCs4msIGfPSjWU_5alloc6string6StringEE4fromB8_:
   41|  4.76k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  4.76k|        (*location.start()..*location.end() + 1, message).into()
   43|  4.76k|    }
_RNvXs_NtNtCsbUpIViwkCx3_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCsevdOxZso2fM_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejEReEE4fromB8_:
   41|   360k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|   360k|        (*location.start()..*location.end() + 1, message).into()
   43|   360k|    }
_RNvXs0_NtNtCsbUpIViwkCx3_5oxttl7toolkit5lexerNtB5_20TokenRecognizerErrorINtNtCsevdOxZso2fM_4core7convert4FromTjNtNtCs4msIGfPSjWU_5alloc6string6StringEE4fromB9_:
   47|  3.14k|    fn from((location, message): (usize, S)) -> Self {
   48|  3.14k|        (location..=location, message).into()
   49|  3.14k|    }
_RNvMs1_NtNtCsbUpIViwkCx3_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3newB9_:
   73|  25.2k|    pub fn new(
   74|  25.2k|        parser: R,
   75|  25.2k|        min_buffer_size: usize,
   76|  25.2k|        max_buffer_size: usize,
   77|  25.2k|        is_line_jump_whitespace: bool,
   78|  25.2k|        line_comment_start: Option<&'static [u8]>,
   79|  25.2k|    ) -> Self {
   80|  25.2k|        Self {
   81|  25.2k|            parser,
   82|  25.2k|            data: Vec::new(),
   83|  25.2k|            position: Position {
   84|  25.2k|                line_start_buffer_offset: 0,
   85|  25.2k|                buffer_offset: 0,
   86|  25.2k|                global_offset: 0,
   87|  25.2k|                global_line: 0,
   88|  25.2k|            },
   89|  25.2k|            previous_position: Position {
   90|  25.2k|                line_start_buffer_offset: 0,
   91|  25.2k|                buffer_offset: 0,
   92|  25.2k|                global_offset: 0,
   93|  25.2k|                global_line: 0,
   94|  25.2k|            },
   95|  25.2k|            is_ending: false,
   96|  25.2k|            min_buffer_size,
   97|  25.2k|            max_buffer_size,
   98|  25.2k|            is_line_jump_whitespace,
   99|  25.2k|            line_comment_start,
  100|  25.2k|        }
  101|  25.2k|    }
_RNvMs1_NtNtCsbUpIViwkCx3_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17extend_from_sliceB9_:
  103|  1.67M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  104|  1.67M|        self.shrink_data();
  105|  1.67M|        self.data.extend_from_slice(other);
  106|  1.67M|    }
_RNvMs1_NtNtCsbUpIViwkCx3_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3endB9_:
  109|  18.9k|    pub fn end(&mut self) {
  110|  18.9k|        self.is_ending = true;
  111|  18.9k|    }
_RNvMs1_NtNtCsbUpIViwkCx3_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE9read_nextB9_:
  166|  5.59M|    pub fn read_next(&mut self, options: &R::Options) -> Option<Result<R::Token<'_>, SyntaxError>> {
  167|  5.59M|        self.skip_whitespaces_and_comments()?;
  168|  5.57M|        self.previous_position = self.position;
  169|  5.57M|        let Some((consumed, result)) = self.parser.recognize_next_token(
  170|  5.57M|            &self.data[self.position.buffer_offset..],
  171|  5.57M|            self.is_ending,
  172|  5.57M|            options,
  173|  5.57M|        ) else {
  174|  1.72M|            return if self.is_ending {
  175|  56.0k|                if self.position.buffer_offset == self.data.len() {
  176|  50.4k|                    None // We have finished
  177|       |                } else {
  178|  5.60k|                    let (new_line_jumps, new_line_start) =
  179|  5.60k|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  180|  5.60k|                            &self.data[self.position.buffer_offset..],
  181|  5.60k|                        );
  182|  5.60k|                    if new_line_jumps > 0 {
  183|    647|                        self.position.line_start_buffer_offset =
  184|    647|                            self.position.buffer_offset + new_line_start;
  185|  4.95k|                    }
  186|  5.60k|                    self.position.global_offset +=
  187|  5.60k|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  188|  5.60k|                    self.position.buffer_offset = self.data.len();
  189|  5.60k|                    self.position.global_line += new_line_jumps;
  190|  5.60k|                    let new_position = TextPosition {
  191|  5.60k|                        line: self.position.global_line,
  192|  5.60k|                        column: Self::column_from_bytes(
  193|  5.60k|                            &self.data[self.position.line_start_buffer_offset..],
  194|  5.60k|                        ),
  195|  5.60k|                        offset: self.position.global_offset,
  196|  5.60k|                    };
  197|  5.60k|                    let error = SyntaxError {
  198|  5.60k|                        location: new_position..new_position,
  199|  5.60k|                        message: "Unexpected end of file".into(),
  200|  5.60k|                    };
  201|  5.60k|                    self.position.buffer_offset = self.data.len(); // We consume everything
  202|  5.60k|                    Some(Err(error))
  203|       |                }
  204|       |            } else {
  205|  1.66M|                None
  206|       |            };
  207|       |        };
  208|  3.85M|        debug_assert!(
  209|      0|            consumed > 0,
  210|      0|            "The lexer must consume at least one byte each time"
  211|       |        );
  212|  3.85M|        debug_assert!(
  213|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  214|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  215|      0|            self.data.len() - self.position.buffer_offset
  216|       |        );
  217|  3.85M|        let (new_line_jumps, new_line_start) =
  218|  3.85M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  219|  3.85M|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  220|  3.85M|            );
  221|  3.85M|        if new_line_jumps > 0 {
  222|  4.83k|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  223|  3.85M|        }
  224|  3.85M|        self.position.buffer_offset += consumed;
  225|  3.85M|        self.position.global_offset += u64::try_from(consumed).unwrap();
  226|  3.85M|        self.position.global_line += new_line_jumps;
  227|  3.85M|        Some(result.map_err(|e| SyntaxError {
  228|       |            location: self.location_from_buffer_offset_range(e.location),
  229|       |            message: e.message,
  230|  3.85M|        }))
  231|  5.59M|    }
_RNCNvMs1_NtNtCsbUpIViwkCx3_5oxttl7toolkit5lexerINtB7_5LexerNtNtBb_5lexer7N3LexerE9read_next0Bb_:
  227|  1.60M|        Some(result.map_err(|e| SyntaxError {
  228|  1.60M|            location: self.location_from_buffer_offset_range(e.location),
  229|  1.60M|            message: e.message,
  230|  1.60M|        }))
_RNvMs1_NtNtCsbUpIViwkCx3_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE33location_from_buffer_offset_rangeB9_:
  233|  1.60M|    pub fn location_from_buffer_offset_range(
  234|  1.60M|        &self,
  235|  1.60M|        offset_range: Range<usize>,
  236|  1.60M|    ) -> Range<TextPosition> {
  237|  1.60M|        let start_offset = self.previous_position.buffer_offset + offset_range.start;
  238|  1.60M|        let (start_extra_line_jumps, start_line_start) =
  239|  1.60M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  240|  1.60M|                &self.data[self.previous_position.buffer_offset..start_offset],
  241|  1.60M|            );
  242|  1.60M|        let start_line_start = if start_extra_line_jumps > 0 {
  243|  1.09k|            start_line_start + self.previous_position.buffer_offset
  244|       |        } else {
  245|  1.60M|            self.previous_position.line_start_buffer_offset
  246|       |        };
  247|  1.60M|        let end_offset = self.previous_position.buffer_offset + offset_range.end;
  248|  1.60M|        let (end_extra_line_jumps, end_line_start) =
  249|  1.60M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  250|  1.60M|                &self.data[self.previous_position.buffer_offset..end_offset],
  251|  1.60M|            );
  252|  1.60M|        let end_line_start = if end_extra_line_jumps > 0 {
  253|  2.97k|            end_line_start + self.previous_position.buffer_offset
  254|       |        } else {
  255|  1.60M|            self.previous_position.line_start_buffer_offset
  256|       |        };
  257|  1.60M|        TextPosition {
  258|  1.60M|            line: self.previous_position.global_line + start_extra_line_jumps,
  259|  1.60M|            column: Self::column_from_bytes(&self.data[start_line_start..start_offset]),
  260|  1.60M|            offset: self.previous_position.global_offset
  261|  1.60M|                + u64::try_from(offset_range.start).unwrap(),
  262|  1.60M|        }..TextPosition {
  263|  1.60M|            line: self.previous_position.global_line + end_extra_line_jumps,
  264|  1.60M|            column: Self::column_from_bytes(&self.data[end_line_start..end_offset]),
  265|  1.60M|            offset: self.previous_position.global_offset + u64::try_from(offset_range.end).unwrap(),
  266|  1.60M|        }
  267|  1.60M|    }
_RNvMs1_NtNtCsbUpIViwkCx3_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE19last_token_locationB9_:
  269|   212k|    pub fn last_token_location(&self) -> Range<TextPosition> {
  270|   212k|        TextPosition {
  271|   212k|            line: self.previous_position.global_line,
  272|   212k|            column: Self::column_from_bytes(
  273|   212k|                &self.data[self.previous_position.line_start_buffer_offset
  274|   212k|                    ..self.previous_position.buffer_offset],
  275|   212k|            ),
  276|   212k|            offset: self.previous_position.global_offset,
  277|   212k|        }..TextPosition {
  278|   212k|            line: self.position.global_line,
  279|   212k|            column: Self::column_from_bytes(
  280|   212k|                &self.data[self.position.line_start_buffer_offset..self.position.buffer_offset],
  281|   212k|            ),
  282|   212k|            offset: self.position.global_offset,
  283|   212k|        }
  284|   212k|    }
_RNvMs1_NtNtCsbUpIViwkCx3_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17last_token_sourceB9_:
  286|   212k|    pub fn last_token_source(&self) -> Cow<'_, str> {
  287|   212k|        String::from_utf8_lossy(
  288|   212k|            &self.data[self.previous_position.buffer_offset..self.position.buffer_offset],
  289|   212k|        )
  290|   212k|    }
_RNvMs1_NtNtCsbUpIViwkCx3_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE6is_endB9_:
  292|  1.73M|    pub fn is_end(&self) -> bool {
  293|  1.73M|        self.is_ending && self.data.len() == self.position.buffer_offset
  294|  1.73M|    }
_RNvMs1_NtNtCsbUpIViwkCx3_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  297|  5.59M|    fn skip_whitespaces_and_comments(&mut self) -> Option<()> {
  298|       |        loop {
  299|  5.59M|            self.skip_whitespaces()?;
  300|       |
  301|  5.59M|            let buf = &self.data[self.position.buffer_offset..];
  302|  5.59M|            if let Some(line_comment_start) = self.line_comment_start {
  303|  5.59M|                if buf.starts_with(line_comment_start) {
  304|       |                    // Comment
  305|  13.8k|                    if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  306|  2.33k|                        let mut end_position = line_comment_start.len() + end;
  307|  2.33k|                        if buf.get(end_position).copied() == Some(b'\r') {
  308|       |                            // We look for \n for Windows line end style
  309|  1.47k|                            if let Some(c) = buf.get(end_position + 1) {
  310|    703|                                if *c == b'\n' {
  311|      0|                                    end_position += 1;
  312|    703|                                }
  313|    776|                            } else if !self.is_ending {
  314|    750|                                return None; // We need to read more
  315|     26|                            }
  316|    851|                        }
  317|  1.58k|                        let comment_size = end_position + 1;
  318|  1.58k|                        self.position.buffer_offset += comment_size;
  319|  1.58k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  320|  1.58k|                        self.position.global_offset += u64::try_from(comment_size).unwrap();
  321|  1.58k|                        self.position.global_line += 1;
  322|  1.58k|                        continue;
  323|  11.4k|                    }
  324|  11.4k|                    if self.is_ending {
  325|    662|                        self.position.buffer_offset = self.data.len(); // EOF
  326|    662|                        return Some(());
  327|  10.8k|                    }
  328|  10.8k|                    return None; // We need more data
  329|  5.57M|                }
  330|      0|            }
  331|  5.57M|            return Some(());
  332|       |        }
  333|  5.59M|    }
_RNvMs1_NtNtCsbUpIViwkCx3_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  335|  5.59M|    fn skip_whitespaces(&mut self) -> Option<()> {
  336|  5.59M|        if self.is_line_jump_whitespace {
  337|  5.59M|            let mut i = self.position.buffer_offset;
  338|  6.05M|            while let Some(c) = self.data.get(i) {
  339|  5.43M|                match c {
  340|   332k|                    b' ' | b'\t' => {
  341|   332k|                        self.position.buffer_offset += 1;
  342|   332k|                        self.position.global_offset += 1;
  343|   332k|                    }
  344|       |                    b'\r' => {
  345|       |                        // We look for \n for Windows line end style
  346|  18.6k|                        let mut increment: u8 = 1;
  347|  18.6k|                        if let Some(c) = self.data.get(i + 1) {
  348|  12.5k|                            if *c == b'\n' {
  349|     72|                                increment += 1;
  350|     72|                                i += 1;
  351|  12.5k|                            }
  352|  6.03k|                        } else if !self.is_ending {
  353|  5.91k|                            return None; // We need to read more
  354|    117|                        }
  355|  12.7k|                        self.position.buffer_offset += usize::from(increment);
  356|  12.7k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  357|  12.7k|                        self.position.global_offset += u64::from(increment);
  358|  12.7k|                        self.position.global_line += 1;
  359|       |                    }
  360|   110k|                    b'\n' => {
  361|   110k|                        self.position.buffer_offset += 1;
  362|   110k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  363|   110k|                        self.position.global_offset += 1;
  364|   110k|                        self.position.global_line += 1;
  365|   110k|                    }
  366|  4.96M|                    _ => return Some(()),
  367|       |                }
  368|   456k|                i += 1;
  369|       |                // TODO: SIMD
  370|       |            }
  371|       |        } else {
  372|      0|            for c in &self.data[self.position.buffer_offset..] {
  373|      0|                if matches!(c, b' ' | b'\t') {
  374|      0|                    self.position.buffer_offset += 1;
  375|      0|                    self.position.global_offset += 1;
  376|      0|                } else {
  377|      0|                    return Some(());
  378|       |                }
  379|       |                // TODO: SIMD
  380|       |            }
  381|       |        }
  382|   621k|        Some(())
  383|  5.59M|    }
_RNvMs1_NtNtCsbUpIViwkCx3_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE11shrink_dataB9_:
  385|  1.68M|    fn shrink_data(&mut self) {
  386|  1.68M|        if self.position.line_start_buffer_offset > 0 {
  387|  16.5k|            self.data
  388|  16.5k|                .copy_within(self.position.line_start_buffer_offset.., 0);
  389|  16.5k|            self.data
  390|  16.5k|                .truncate(self.data.len() - self.position.line_start_buffer_offset);
  391|  16.5k|            self.position.buffer_offset -= self.position.line_start_buffer_offset;
  392|  16.5k|            self.position.line_start_buffer_offset = 0;
  393|  16.5k|            self.previous_position = self.position;
  394|  1.67M|        }
  395|  1.68M|    }
_RNvMs1_NtNtCsbUpIViwkCx3_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  397|  7.07M|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  398|  7.07M|        let mut num_of_jumps = 0;
  399|  7.07M|        let mut last_jump_pos = 0;
  400|  7.07M|        let mut previous_cr = 0;
  401|  7.07M|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  402|  20.3k|            if bytes[pos] == b'\r' {
  403|  6.89k|                previous_cr = pos;
  404|  6.89k|                num_of_jumps += 1;
  405|  6.89k|                last_jump_pos = pos + 1;
  406|  6.89k|            } else {
  407|  13.4k|                if previous_cr < pos - 1 {
  408|  10.2k|                    // We count \r\n as a single line jump
  409|  10.2k|                    num_of_jumps += 1;
  410|  10.2k|                }
  411|  13.4k|                last_jump_pos = pos + 1;
  412|       |            }
  413|       |        }
  414|  7.07M|        (num_of_jumps, last_jump_pos)
  415|  7.07M|    }
_RNvMs1_NtNtCsbUpIViwkCx3_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17column_from_bytesB9_:
  417|  6.11M|    fn column_from_bytes(bytes: &[u8]) -> u64 {
  418|  6.11M|        match str::from_utf8(bytes) {
  419|  3.02M|            Ok(s) => u64::try_from(s.chars().count()).unwrap(),
  420|  3.09M|            Err(e) => {
  421|  3.09M|                if e.valid_up_to() == 0 {
  422|   625k|                    0
  423|       |                } else {
  424|  2.46M|                    Self::column_from_bytes(&bytes[..e.valid_up_to()])
  425|       |                }
  426|       |            }
  427|       |        }
  428|  6.11M|    }

_RINvMs_NtNtCsbUpIViwkCx3_5oxttl7toolkit6parserINtB5_6ParserNtNtB9_5terse14TriGRecognizerE10parse_readRShECsiApsw9S2n9N_4trig:
  124|  6.30k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadIterator<R, RR> {
  125|  6.30k|        FromReadIterator { read, parser: self }
  126|  6.30k|    }
_RNvXs0_NtNtCsbUpIViwkCx3_5oxttl7toolkit6parserINtB5_16FromReadIteratorRShNtNtB9_5terse14TriGRecognizerENtNtNtNtCsevdOxZso2fM_4core4iter6traits8iterator8Iterator4nextCsiApsw9S2n9N_4trig:
  146|   100k|    fn next(&mut self) -> Option<Self::Item> {
  147|   117k|        while !self.parser.is_end() {
  148|   110k|            if let Some(result) = self.parser.read_next() {
  149|  93.9k|                return Some(result.map_err(ParseError::Syntax));
  150|  16.7k|            }
  151|  16.7k|            if let Err(e) = self.parser.lexer.extend_from_read(&mut self.read) {
  152|      0|                return Some(Err(e.into()));
  153|  16.7k|            }
  154|       |        }
  155|  6.30k|        None
  156|   100k|    }
_RNvXNtNtCsbUpIViwkCx3_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCsevdOxZso2fM_4core7convert4FromNtNtCs4msIGfPSjWU_5alloc6string6StringE4fromB6_:
   39|  15.7k|    fn from(message: S) -> Self {
   40|  15.7k|        Self {
   41|  15.7k|            message: message.into(),
   42|  15.7k|        }
   43|  15.7k|    }
_RNvXNtNtCsbUpIViwkCx3_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCsevdOxZso2fM_4core7convert4FromReE4fromB6_:
   39|   196k|    fn from(message: S) -> Self {
   40|   196k|        Self {
   41|   196k|            message: message.into(),
   42|   196k|        }
   43|   196k|    }
_RNvMs_NtNtCsbUpIViwkCx3_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE3newB8_:
   56|  25.2k|    pub fn new(lexer: Lexer<RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   57|  25.2k|        Self {
   58|  25.2k|            lexer,
   59|  25.2k|            state: Some(recognizer),
   60|  25.2k|            context,
   61|  25.2k|            results: vec![],
   62|  25.2k|            errors: vec![],
   63|  25.2k|        }
   64|  25.2k|    }
_RNvMs_NtNtCsbUpIViwkCx3_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE17extend_from_sliceB8_:
   66|  1.67M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
   67|  1.67M|        self.lexer.extend_from_slice(other)
   68|  1.67M|    }
_RNvMs_NtNtCsbUpIViwkCx3_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE3endB8_:
   71|  18.9k|    pub fn end(&mut self) {
   72|  18.9k|        self.lexer.end()
   73|  18.9k|    }
_RNvMs_NtNtCsbUpIViwkCx3_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE6is_endB8_:
   76|   135k|    pub fn is_end(&self) -> bool {
   77|   135k|        self.state.is_none() && self.results.is_empty() && self.errors.is_empty()
   78|   135k|    }
_RNvMs_NtNtCsbUpIViwkCx3_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE9read_nextB8_:
   80|  3.91M|    pub fn read_next(&mut self) -> Option<Result<RR::Output, SyntaxError>> {
   81|       |        loop {
   82|  6.19M|            if let Some(error) = self.errors.pop() {
   83|   212k|                return Some(Err(SyntaxError {
   84|   212k|                    location: self.lexer.last_token_location(),
   85|   212k|                    message: error
   86|   212k|                        .message
   87|   212k|                        .replace("TOKEN", &self.lexer.last_token_source()),
   88|   212k|                }));
   89|  5.97M|            }
   90|  5.97M|            if let Some(result) = self.results.pop() {
   91|   382k|                return Some(Ok(result));
   92|  5.59M|            }
   93|  5.59M|            if let Some(result) = self.lexer.read_next(RR::lexer_options(&self.context)) {
   94|  3.86M|                match result {
   95|  2.24M|                    Ok(token) => {
   96|  2.24M|                        self.state = self.state.take().map(|state| {
   97|       |                            state.recognize_next(
   98|       |                                token,
   99|       |                                &mut self.context,
  100|       |                                &mut self.results,
  101|       |                                &mut self.errors,
  102|       |                            )
  103|  2.24M|                        });
  104|  2.24M|                        continue;
  105|       |                    }
  106|  1.61M|                    Err(e) => {
  107|  1.61M|                        self.state = self.state.take().map(RR::error_recovery_state);
  108|  1.61M|                        return Some(Err(e));
  109|       |                    }
  110|       |                }
  111|  1.73M|            }
  112|  1.73M|            if self.lexer.is_end() {
  113|  50.4k|                self.state.take()?.recognize_end(
  114|  25.2k|                    &mut self.context,
  115|  25.2k|                    &mut self.results,
  116|  25.2k|                    &mut self.errors,
  117|  25.2k|                )
  118|       |            } else {
  119|  1.68M|                return None;
  120|       |            }
  121|       |        }
  122|  3.91M|    }
_RNCNvMs_NtNtCsbUpIViwkCx3_5oxttl7toolkit6parserINtB6_6ParserNtNtBa_5terse14TriGRecognizerE9read_next0Ba_:
   96|  2.24M|                        self.state = self.state.take().map(|state| {
   97|  2.24M|                            state.recognize_next(
   98|  2.24M|                                token,
   99|  2.24M|                                &mut self.context,
  100|  2.24M|                                &mut self.results,
  101|  2.24M|                                &mut self.errors,
  102|  2.24M|                            )
  103|  2.24M|                        });

_RNvMNtCsbUpIViwkCx3_5oxttl4trigNtB2_10TriGParser19with_quoted_triplesCsiApsw9S2n9N_4trig:
   93|  25.2k|    pub fn with_quoted_triples(mut self) -> Self {
   94|  25.2k|        self.with_quoted_triples = true;
   95|  25.2k|        self
   96|  25.2k|    }
_RNvMNtCsbUpIViwkCx3_5oxttl4trigNtB2_10TriGParser3newCsiApsw9S2n9N_4trig:
   58|  25.2k|    pub fn new() -> Self {
   59|  25.2k|        Self::default()
   60|  25.2k|    }
_RNvMNtCsbUpIViwkCx3_5oxttl4trigNtB2_10TriGParser9uncheckedCsiApsw9S2n9N_4trig:
   68|  6.30k|    pub fn unchecked(mut self) -> Self {
   69|  6.30k|        self.unchecked = true;
   70|  6.30k|        self
   71|  6.30k|    }
_RNvMs2_NtCsbUpIViwkCx3_5oxttl4trigNtB5_14TriGSerializer3newCsiApsw9S2n9N_4trig:
  567|  6.30k|    pub fn new() -> Self {
  568|  6.30k|        Self
  569|  6.30k|    }
_RNvXs6_NtCsbUpIViwkCx3_5oxttl4trigNtB5_10TriGParserNtNtCsevdOxZso2fM_4core7default7Default7defaultCsiApsw9S2n9N_4trig:
   45|  25.2k|#[derive(Default)]
_RINvMNtCsbUpIViwkCx3_5oxttl4trigNtB3_10TriGParser10parse_readRShECsiApsw9S2n9N_4trig:
  124|  6.30k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadTriGReader<R> {
  125|  6.30k|        FromReadTriGReader {
  126|  6.30k|            inner: self.parse().parser.parse_read(read),
  127|  6.30k|        }
  128|  6.30k|    }
_RINvMNtCsbUpIViwkCx3_5oxttl4trigNtB3_10TriGParser13with_base_iriReECsiApsw9S2n9N_4trig:
   74|  18.9k|    pub fn with_base_iri(mut self, base_iri: impl Into<String>) -> Result<Self, IriParseError> {
   75|  18.9k|        self.base = Some(Iri::parse(base_iri.into())?);
   76|  18.9k|        Ok(self)
   77|  18.9k|    }
_RINvMs2_NtCsbUpIViwkCx3_5oxttl4trigNtB6_14TriGSerializer18serialize_to_writeINtNtCs4msIGfPSjWU_5alloc3vec3VechEECsiApsw9S2n9N_4trig:
  590|  6.30k|    pub fn serialize_to_write<W: Write>(self, write: W) -> ToWriteTriGWriter<W> {
  591|  6.30k|        ToWriteTriGWriter {
  592|  6.30k|            write,
  593|  6.30k|            writer: self.serialize(),
  594|  6.30k|        }
  595|  6.30k|    }
_RINvMs3_NtCsbUpIViwkCx3_5oxttl4trigINtB6_17ToWriteTriGWriterINtNtCs4msIGfPSjWU_5alloc3vec3VechEE10write_quadRNtNtCsfYjWOBsMZ7D_5oxrdf6triple4QuadECsiApsw9S2n9N_4trig:
  688|  93.9k|    pub fn write_quad<'a>(&mut self, q: impl Into<QuadRef<'a>>) -> io::Result<()> {
  689|  93.9k|        self.writer.write_quad(q, &mut self.write)
  690|  93.9k|    }
_RINvMs4_NtCsbUpIViwkCx3_5oxttl4trigNtB6_18LowLevelTriGWriter10write_quadRNtNtCsfYjWOBsMZ7D_5oxrdf6triple4QuadQINtNtCs4msIGfPSjWU_5alloc3vec3VechEECsiApsw9S2n9N_4trig:
  776|  93.9k|    pub fn write_quad<'a>(
  777|  93.9k|        &mut self,
  778|  93.9k|        q: impl Into<QuadRef<'a>>,
  779|  93.9k|        mut write: impl Write,
  780|  93.9k|    ) -> io::Result<()> {
  781|  93.9k|        let q = q.into();
  782|  93.9k|        if q.graph_name == self.current_graph_name.as_ref() {
  783|  88.6k|            if let Some((current_subject, current_predicate)) =
  784|  91.3k|                self.current_subject_predicate.take()
  785|       |            {
  786|  88.6k|                if q.subject == current_subject.as_ref() {
  787|  15.7k|                    if q.predicate == current_predicate {
  788|  6.78k|                        self.current_subject_predicate = Some((current_subject, current_predicate));
  789|  6.78k|                        write!(write, " , {}", TurtleTerm(q.object))
  790|       |                    } else {
  791|  8.93k|                        self.current_subject_predicate =
  792|  8.93k|                            Some((current_subject, q.predicate.into_owned()));
  793|  8.93k|                        writeln!(write, " ;")?;
  794|  8.93k|                        if !self.current_graph_name.is_default_graph() {
  795|  1.03k|                            write!(write, "\t")?;
  796|  7.90k|                        }
  797|  8.93k|                        write!(write, "\t{} {}", q.predicate, TurtleTerm(q.object))
  798|       |                    }
  799|       |                } else {
  800|  72.9k|                    self.current_subject_predicate =
  801|  72.9k|                        Some((q.subject.into_owned(), q.predicate.into_owned()));
  802|  72.9k|                    writeln!(write, " .")?;
  803|  72.9k|                    if !self.current_graph_name.is_default_graph() {
  804|  10.0k|                        write!(write, "\t")?;
  805|  62.8k|                    }
  806|  72.9k|                    write!(
  807|  72.9k|                        write,
  808|  72.9k|                        "{} {} {}",
  809|  72.9k|                        TurtleTerm(q.subject.into()),
  810|  72.9k|                        q.predicate,
  811|  72.9k|                        TurtleTerm(q.object)
  812|  72.9k|                    )
  813|       |                }
  814|       |            } else {
  815|  2.73k|                self.current_subject_predicate =
  816|  2.73k|                    Some((q.subject.into_owned(), q.predicate.into_owned()));
  817|  2.73k|                if !self.current_graph_name.is_default_graph() {
  818|      0|                    write!(write, "\t")?;
  819|  2.73k|                }
  820|  2.73k|                write!(
  821|  2.73k|                    write,
  822|  2.73k|                    "{} {} {}",
  823|  2.73k|                    TurtleTerm(q.subject.into()),
  824|  2.73k|                    q.predicate,
  825|  2.73k|                    TurtleTerm(q.object)
  826|  2.73k|                )
  827|       |            }
  828|       |        } else {
  829|  2.56k|            if self.current_subject_predicate.is_some() {
  830|  2.05k|                writeln!(write, " .")?;
  831|    504|            }
  832|  2.56k|            if !self.current_graph_name.is_default_graph() {
  833|  1.17k|                writeln!(write, "}}")?;
  834|  1.39k|            }
  835|  2.56k|            self.current_graph_name = q.graph_name.into_owned();
  836|  2.56k|            self.current_subject_predicate =
  837|  2.56k|                Some((q.subject.into_owned(), q.predicate.into_owned()));
  838|  2.56k|            if !self.current_graph_name.is_default_graph() {
  839|  1.70k|                writeln!(write, "{} {{", q.graph_name)?;
  840|  1.70k|                write!(write, "\t")?;
  841|    863|            }
  842|  2.56k|            write!(
  843|  2.56k|                write,
  844|  2.56k|                "{} {} {}",
  845|  2.56k|                TurtleTerm(q.subject.into()),
  846|  2.56k|                q.predicate,
  847|  2.56k|                TurtleTerm(q.object)
  848|  2.56k|            )
  849|       |        }
  850|  93.9k|    }
_RINvMs4_NtCsbUpIViwkCx3_5oxttl4trigNtB6_18LowLevelTriGWriter6finishQINtNtCs4msIGfPSjWU_5alloc3vec3VechEECsiApsw9S2n9N_4trig:
  853|  6.30k|    pub fn finish(&mut self, mut write: impl Write) -> io::Result<()> {
  854|  6.30k|        if self.current_subject_predicate.is_some() {
  855|  3.24k|            writeln!(write, " .")?;
  856|  3.05k|        }
  857|  6.30k|        if !self.current_graph_name.is_default_graph() {
  858|    527|            writeln!(write, "}}")?;
  859|  5.77k|        }
  860|  6.30k|        Ok(())
  861|  6.30k|    }
_RNvMs3_NtCsbUpIViwkCx3_5oxttl4trigINtB5_17ToWriteTriGWriterINtNtCs4msIGfPSjWU_5alloc3vec3VechEE6finishCsiApsw9S2n9N_4trig:
  693|  6.30k|    pub fn finish(mut self) -> io::Result<W> {
  694|  6.30k|        self.writer.finish(&mut self.write)?;
  695|  6.30k|        Ok(self.write)
  696|  6.30k|    }
_RNvXs0_NtCsbUpIViwkCx3_5oxttl4trigINtB5_18FromReadTriGReaderRShENtNtNtNtCsevdOxZso2fM_4core4iter6traits8iterator8Iterator4nextCsiApsw9S2n9N_4trig:
  310|   100k|    fn next(&mut self) -> Option<Self::Item> {
  311|   100k|        self.inner.next()
  312|   100k|    }
_RNvMNtCsbUpIViwkCx3_5oxttl4trigNtB2_10TriGParser5parse:
  208|  25.2k|    pub fn parse(self) -> LowLevelTriGReader {
  209|  25.2k|        LowLevelTriGReader {
  210|  25.2k|            parser: TriGRecognizer::new_parser(
  211|  25.2k|                true,
  212|  25.2k|                #[cfg(feature = "rdf-star")]
  213|  25.2k|                self.with_quoted_triples,
  214|  25.2k|                self.unchecked,
  215|  25.2k|                self.base,
  216|  25.2k|                self.prefixes,
  217|  25.2k|            ),
  218|  25.2k|        }
  219|  25.2k|    }
_RNvMs1_NtCsbUpIViwkCx3_5oxttl4trigNtB5_18LowLevelTriGReader17extend_from_slice:
  461|  1.67M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  462|  1.67M|        self.parser.extend_from_slice(other)
  463|  1.67M|    }
_RNvMs1_NtCsbUpIViwkCx3_5oxttl4trigNtB5_18LowLevelTriGReader3end:
  468|  18.9k|    pub fn end(&mut self) {
  469|  18.9k|        self.parser.end()
  470|  18.9k|    }
_RNvMs1_NtCsbUpIViwkCx3_5oxttl4trigNtB5_18LowLevelTriGReader6is_end:
  473|  18.9k|    pub fn is_end(&self) -> bool {
  474|  18.9k|        self.parser.is_end()
  475|  18.9k|    }
_RNvMs1_NtCsbUpIViwkCx3_5oxttl4trigNtB5_18LowLevelTriGReader9read_next:
  481|  3.80M|    pub fn read_next(&mut self) -> Option<Result<Quad, SyntaxError>> {
  482|  3.80M|        self.parser.read_next()
  483|  3.80M|    }
_RNvMs2_NtCsbUpIViwkCx3_5oxttl4trigNtB5_14TriGSerializer9serialize:
  653|  6.30k|    pub fn serialize(&self) -> LowLevelTriGWriter {
  654|  6.30k|        LowLevelTriGWriter {
  655|  6.30k|            current_graph_name: GraphName::DefaultGraph,
  656|  6.30k|            current_subject_predicate: None,
  657|  6.30k|        }
  658|  6.30k|    }
_RNvXs5_NtCsbUpIViwkCx3_5oxttl4trigNtB5_10TurtleTermNtNtCsevdOxZso2fM_4core3fmt7Display3fmt:
  867|   185k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  868|   185k|        match self.0 {
  869|  20.2k|            TermRef::NamedNode(v) => write!(f, "{v}"),
  870|   117k|            TermRef::BlankNode(v) => write!(f, "{v}"),
  871|  40.9k|            TermRef::Literal(v) => {
  872|  40.9k|                let value = v.value();
  873|  40.9k|                let inline = match v.datatype() {
  874|  40.9k|                    xsd::BOOLEAN => is_turtle_boolean(value),
  875|  40.7k|                    xsd::INTEGER => is_turtle_integer(value),
  876|  20.6k|                    xsd::DECIMAL => is_turtle_decimal(value),
  877|  18.8k|                    xsd::DOUBLE => is_turtle_double(value),
  878|  4.83k|                    _ => false,
  879|       |                };
  880|  40.9k|                if inline {
  881|  36.0k|                    write!(f, "{value}")
  882|       |                } else {
  883|  4.83k|                    write!(f, "{v}")
  884|       |                }
  885|       |            }
  886|       |            #[cfg(feature = "rdf-star")]
  887|  6.58k|            TermRef::Triple(t) => {
  888|  6.58k|                write!(
  889|  6.58k|                    f,
  890|  6.58k|                    "<< {} {} {} >>",
  891|  6.58k|                    TurtleTerm(t.subject.as_ref().into()),
  892|  6.58k|                    t.predicate,
  893|  6.58k|                    TurtleTerm(t.object.as_ref())
  894|  6.58k|                )
  895|       |            }
  896|       |        }
  897|   185k|    }
_RNvNtCsbUpIViwkCx3_5oxttl4trig17is_turtle_boolean:
  900|    197|fn is_turtle_boolean(value: &str) -> bool {
  901|    197|    matches!(value, "true" | "false")
  902|    197|}
_RNvNtCsbUpIViwkCx3_5oxttl4trig17is_turtle_integer:
  904|  20.0k|fn is_turtle_integer(value: &str) -> bool {
  905|  20.0k|    // [19] 	INTEGER 	::= 	[+-]? [0-9]+
  906|  20.0k|    let mut value = value.as_bytes();
  907|  20.0k|    if let Some(v) = value.strip_prefix(b"+") {
  908|  3.08k|        value = v;
  909|  16.9k|    } else if let Some(v) = value.strip_prefix(b"-") {
  910|     72|        value = v;
  911|  16.8k|    }
  912|  20.0k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  913|  20.0k|}
_RNvNtCsbUpIViwkCx3_5oxttl4trig17is_turtle_decimal:
  915|  1.79k|fn is_turtle_decimal(value: &str) -> bool {
  916|  1.79k|    // [20] 	DECIMAL 	::= 	[+-]? [0-9]* '.' [0-9]+
  917|  1.79k|    let mut value = value.as_bytes();
  918|  1.79k|    if let Some(v) = value.strip_prefix(b"+") {
  919|     49|        value = v;
  920|  1.75k|    } else if let Some(v) = value.strip_prefix(b"-") {
  921|     80|        value = v;
  922|  1.67k|    }
  923|  3.36k|    while value.first().map_or(false, u8::is_ascii_digit) {
  924|  1.56k|        value = &value[1..];
  925|  1.56k|    }
  926|  1.79k|    let Some(value) = value.strip_prefix(b".") else {
  927|      0|        return false;
  928|       |    };
  929|  1.79k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  930|  1.79k|}
_RNvNtCsbUpIViwkCx3_5oxttl4trig16is_turtle_double:
  932|  14.0k|fn is_turtle_double(value: &str) -> bool {
  933|  14.0k|    // [21] 	DOUBLE 	::= 	[+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  934|  14.0k|    // [154s] 	EXPONENT 	::= 	[eE] [+-]? [0-9]+
  935|  14.0k|    let mut value = value.as_bytes();
  936|  14.0k|    if let Some(v) = value.strip_prefix(b"+") {
  937|     13|        value = v;
  938|  14.0k|    } else if let Some(v) = value.strip_prefix(b"-") {
  939|    183|        value = v;
  940|  13.8k|    }
  941|  14.0k|    let mut with_before = false;
  942|  56.1k|    while value.first().map_or(false, u8::is_ascii_digit) {
  943|  42.0k|        value = &value[1..];
  944|  42.0k|        with_before = true;
  945|  42.0k|    }
  946|  14.0k|    let mut with_after = false;
  947|  14.0k|    if let Some(v) = value.strip_prefix(b".") {
  948|    321|        value = v;
  949|  6.96k|        while value.first().map_or(false, u8::is_ascii_digit) {
  950|  6.63k|            value = &value[1..];
  951|  6.63k|            with_after = true;
  952|  6.63k|        }
  953|  13.7k|    }
  954|  14.0k|    if let Some(v) = value.strip_prefix(b"e") {
  955|    170|        value = v;
  956|  13.8k|    } else if let Some(v) = value.strip_prefix(b"E") {
  957|  13.8k|        value = v;
  958|  13.8k|    } else {
  959|      0|        return false;
  960|       |    }
  961|  14.0k|    if let Some(v) = value.strip_prefix(b"+") {
  962|     68|        value = v;
  963|  13.9k|    } else if let Some(v) = value.strip_prefix(b"-") {
  964|     53|        value = v;
  965|  13.9k|    }
  966|  14.0k|    (with_before || with_after) && !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  967|  14.0k|}


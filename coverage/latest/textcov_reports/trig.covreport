_RINvMNtCs1bpcFFYlEl0_9getrandom4lazyNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   34|    151|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   35|    151|        // Relaxed ordering is fine, as we only have a single atomic variable.
   36|    151|        let mut val = self.0.load(Relaxed);
   37|    151|        if val == Self::UNINIT {
   38|      1|            val = init();
   39|      1|            self.0.store(val, Relaxed);
   40|    150|        }
   41|    151|        val
   42|    151|    }
_RINvMs_NtCs1bpcFFYlEl0_9getrandom4lazyNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   53|    151|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   54|    151|        self.0.unsync_init(|| init() as usize) != 0
   55|    151|    }
_RNCINvMs_NtCs1bpcFFYlEl0_9getrandom4lazyNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   54|      1|        self.0.unsync_init(|| init() as usize) != 0

_RNvCs1bpcFFYlEl0_9getrandom16getrandom_uninitCs5oKiaLr02aj_9rand_core:
  396|    151|pub fn getrandom_uninit(dest: &mut [MaybeUninit<u8>]) -> Result<&mut [u8], Error> {
  397|    151|    if !dest.is_empty() {
  398|    151|        imp::getrandom_inner(dest)?;
  399|      0|    }
  400|       |    // SAFETY: `dest` has been fully initialized by `imp::getrandom_inner`
  401|       |    // since it returned `Ok`.
  402|    151|    Ok(unsafe { slice_assume_init_mut(dest) })
  403|    151|}
_RNvCs1bpcFFYlEl0_9getrandom9getrandomCs5oKiaLr02aj_9rand_core:
  366|    151|pub fn getrandom(dest: &mut [u8]) -> Result<(), Error> {
  367|    151|    // SAFETY: The `&mut MaybeUninit<_>` reference doesn't escape, and
  368|    151|    // `getrandom_uninit` guarantees it will never de-initialize any part of
  369|    151|    // `dest`.
  370|    151|    getrandom_uninit(unsafe { slice_as_uninit_mut(dest) })?;
  371|    151|    Ok(())
  372|    151|}

_RNvNtCs1bpcFFYlEl0_9getrandom3imp15getrandom_inner:
    9|    151|pub fn getrandom_inner(dest: &mut [MaybeUninit<u8>]) -> Result<(), Error> {
   10|    151|    // getrandom(2) was introduced in Linux 3.17
   11|    151|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   12|    151|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   13|    151|        sys_fill_exact(dest, getrandom_syscall)
   14|       |    } else {
   15|      0|        use_file::getrandom_inner(dest)
   16|       |    }
   17|    151|}
_RNvNtCs1bpcFFYlEl0_9getrandom3imp22is_getrandom_available:
   19|      1|fn is_getrandom_available() -> bool {
   20|      1|    if getrandom_syscall(&mut []) < 0 {
   21|      0|        match last_os_error().raw_os_error() {
   22|      0|            Some(libc::ENOSYS) => false, // No kernel support
   23|       |            // The fallback on EPERM is intentionally not done on Android since this workaround
   24|       |            // seems to be needed only for specific Linux-based products that aren't based
   25|       |            // on Android. See https://github.com/rust-random/getrandom/issues/229.
   26|       |            #[cfg(target_os = "linux")]
   27|      0|            Some(libc::EPERM) => false, // Blocked by seccomp
   28|      0|            _ => true,
   29|       |        }
   30|       |    } else {
   31|      1|        true
   32|       |    }
   33|      1|}

_RINvNtCs1bpcFFYlEl0_9getrandom4util19slice_as_uninit_muthECs5oKiaLr02aj_9rand_core:
   32|    151|pub unsafe fn slice_as_uninit_mut<T>(slice: &mut [T]) -> &mut [MaybeUninit<T>] {
   33|    151|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   34|    151|    &mut *(slice as *mut [T] as *mut [MaybeUninit<T>])
   35|    151|}
_RINvNtCs1bpcFFYlEl0_9getrandom4util21slice_assume_init_muthECs5oKiaLr02aj_9rand_core:
    8|    151|pub unsafe fn slice_assume_init_mut<T>(slice: &mut [MaybeUninit<T>]) -> &mut [T] {
    9|    151|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   10|    151|    &mut *(slice as *mut [MaybeUninit<T>] as *mut [T])
   11|    151|}

_RINvNtCs1bpcFFYlEl0_9getrandom9util_libc14sys_fill_exactNvB2_17getrandom_syscallEB4_:
   55|    151|pub fn sys_fill_exact(
   56|    151|    mut buf: &mut [MaybeUninit<u8>],
   57|    151|    sys_fill: impl Fn(&mut [MaybeUninit<u8>]) -> libc::ssize_t,
   58|    151|) -> Result<(), Error> {
   59|    302|    while !buf.is_empty() {
   60|    151|        let res = sys_fill(buf);
   61|    151|        match res {
   62|    151|            res if res > 0 => buf = buf.get_mut(res as usize..).ok_or(Error::UNEXPECTED)?,
   63|       |            -1 => {
   64|      0|                let err = last_os_error();
   65|      0|                // We should try again if the call was interrupted.
   66|      0|                if err.raw_os_error() != Some(libc::EINTR) {
   67|      0|                    return Err(err);
   68|      0|                }
   69|       |            }
   70|       |            // Negative return codes not equal to -1 should be impossible.
   71|       |            // EOF (ret = 0) should be impossible, as the data we are reading
   72|       |            // should be an infinite stream of random bytes.
   73|      0|            _ => return Err(Error::UNEXPECTED),
   74|       |        }
   75|       |    }
   76|    151|    Ok(())
   77|    151|}
_RNvNtCs1bpcFFYlEl0_9getrandom9util_libc17getrandom_syscall:
  153|    152|pub fn getrandom_syscall(buf: &mut [MaybeUninit<u8>]) -> libc::ssize_t {
  154|    152|    unsafe {
  155|    152|        libc::syscall(
  156|    152|            libc::SYS_getrandom,
  157|    152|            buf.as_mut_ptr() as *mut libc::c_void,
  158|    152|            buf.len(),
  159|    152|            0,
  160|    152|        ) as libc::ssize_t
  161|    152|    }
  162|    152|}

rust_fuzzer_test_input:
  209|  8.43k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  8.43k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  8.43k|                }
  223|  8.43k|
  224|  8.43k|                __libfuzzer_sys_run(bytes);
  225|  8.43k|                0
  226|       |            }
_RNvNvCs7EVUVIOgNrt_4trig1__19___libfuzzer_sys_run:
  241|  8.43k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|       |            }
LLVMFuzzerTestOneInput:
   58|  8.43k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  8.43k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  8.43k|    });
   63|  8.43k|
   64|  8.43k|    match test_input {
   65|  8.43k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  8.43k|}
_RNCNvCsi2SvK2lYMoy_13libfuzzer_sys15test_input_wrap0B3_:
   59|  8.43k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  8.43k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  8.43k|        rust_fuzzer_test_input(data_slice)
   62|  8.43k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvMs3_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0ECssoZq86sT9S_5oxttl:
 1044|  14.9M|    pub(crate) unsafe fn next(
 1045|  14.9M|        &mut self,
 1046|  14.9M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  14.9M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  14.9M|        let found = find_raw(self.start, self.end)?;
 1057|  22.9k|        let result = found.distance(self.original_start);
 1058|  22.9k|        self.start = found.add(1);
 1059|  22.9k|        Some(result)
 1060|  14.9M|    }
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECssoZq86sT9S_5oxttl:
 1125|  15.3k|pub(crate) unsafe fn search_slice_with_raw(
 1126|  15.3k|    haystack: &[u8],
 1127|  15.3k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  15.3k|) -> Option<usize> {
 1129|  15.3k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  15.3k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  15.3k|    // a &[u8].
 1132|  15.3k|    let start = haystack.as_ptr();
 1133|  15.3k|    let end = start.add(haystack.len());
 1134|  15.3k|    let found = find_raw(start, end)?;
 1135|  2.03k|    Some(found.distance(start))
 1136|  15.3k|}
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr7memchr20ECssoZq86sT9S_5oxttl:
 1125|  2.99M|pub(crate) unsafe fn search_slice_with_raw(
 1126|  2.99M|    haystack: &[u8],
 1127|  2.99M|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  2.99M|) -> Option<usize> {
 1129|  2.99M|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  2.99M|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  2.99M|    // a &[u8].
 1132|  2.99M|    let start = haystack.as_ptr();
 1133|  2.99M|    let end = start.add(haystack.len());
 1134|  2.99M|    let found = find_raw(start, end)?;
 1135|  2.71M|    Some(found.distance(start))
 1136|  2.99M|}
_RNvMs3_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  14.9M|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  14.9M|        Iter {
 1029|  14.9M|            original_start: haystack.as_ptr(),
 1030|  14.9M|            start: haystack.as_ptr(),
 1031|  14.9M|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  14.9M|            haystack: core::marker::PhantomData,
 1033|  14.9M|        }
 1034|  14.9M|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle1B8_:
  117|  32.1k|    pub(crate) fn needle1(&self) -> u8 {
  118|  32.1k|        self.s1
  119|  32.1k|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE3newB8_:
  111|  15.3k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  15.3k|        One { s1: needle, v1: V::splat(needle) }
  113|  15.3k|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE3newB8_:
  111|  15.3k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  15.3k|        One { s1: needle, v1: V::splat(needle) }
  113|  15.3k|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  2.99k|    pub(crate) unsafe fn find_raw(
  144|  2.99k|        &self,
  145|  2.99k|        start: *const u8,
  146|  2.99k|        end: *const u8,
  147|  2.99k|    ) -> Option<*const u8> {
  148|  2.99k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  2.99k|        // need to move up to using a u64 for the masks used below. Currently
  150|  2.99k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  2.99k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  2.99k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  2.99k|        let topos = V::Mask::first_offset;
  155|  2.99k|        let len = end.distance(start);
  156|  2.99k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  2.99k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|     95|            return Some(cur);
  167|  2.89k|        }
  168|  2.89k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  2.89k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  2.89k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  2.89k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  2.89k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  3.81k|        while cur <= end.sub(V::BYTES) {
  213|    993|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|    993|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|     79|                return Some(cur);
  216|    914|            }
  217|    914|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  2.81k|        if cur < end {
  224|  2.52k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  2.52k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  2.52k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  2.52k|            return self.search_chunk(cur, topos);
  228|    290|        }
  229|    290|        None
  230|  2.99k|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  6.37k|    pub(crate) unsafe fn find_raw(
  144|  6.37k|        &self,
  145|  6.37k|        start: *const u8,
  146|  6.37k|        end: *const u8,
  147|  6.37k|    ) -> Option<*const u8> {
  148|  6.37k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  6.37k|        // need to move up to using a u64 for the masks used below. Currently
  150|  6.37k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  6.37k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  6.37k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  6.37k|        let topos = V::Mask::first_offset;
  155|  6.37k|        let len = end.distance(start);
  156|  6.37k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  6.37k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  1.08k|            return Some(cur);
  167|  5.29k|        }
  168|  5.29k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  5.29k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  5.29k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  5.29k|        if len >= Self::LOOP_SIZE {
  172|  4.05k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|  1.85k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|  1.85k|                let a = V::load_aligned(cur);
  176|  1.85k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|  1.85k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|  1.85k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|  1.85k|                let eqa = self.v1.cmpeq(a);
  180|  1.85k|                let eqb = self.v1.cmpeq(b);
  181|  1.85k|                let eqc = self.v1.cmpeq(c);
  182|  1.85k|                let eqd = self.v1.cmpeq(d);
  183|  1.85k|                let or1 = eqa.or(eqb);
  184|  1.85k|                let or2 = eqc.or(eqd);
  185|  1.85k|                let or3 = or1.or(or2);
  186|  1.85k|                if or3.movemask_will_have_non_zero() {
  187|    234|                    let mask = eqa.movemask();
  188|    234|                    if mask.has_non_zero() {
  189|     61|                        return Some(cur.add(topos(mask)));
  190|    173|                    }
  191|    173|
  192|    173|                    let mask = eqb.movemask();
  193|    173|                    if mask.has_non_zero() {
  194|     90|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|     83|                    }
  196|     83|
  197|     83|                    let mask = eqc.movemask();
  198|     83|                    if mask.has_non_zero() {
  199|     44|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|     39|                    }
  201|     39|
  202|     39|                    let mask = eqd.movemask();
  203|     39|                    debug_assert!(mask.has_non_zero());
  204|     39|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  1.62k|                }
  206|  1.62k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  2.86k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  11.1k|        while cur <= end.sub(V::BYTES) {
  213|  6.20k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  6.20k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|     90|                return Some(cur);
  216|  6.11k|            }
  217|  6.11k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  4.96k|        if cur < end {
  224|  4.60k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  4.60k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  4.60k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  4.60k|            return self.search_chunk(cur, topos);
  228|    360|        }
  229|    360|        None
  230|  6.37k|    }
_RINvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  6.51k|    unsafe fn search_chunk(
  417|  6.51k|        &self,
  418|  6.51k|        cur: *const u8,
  419|  6.51k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  6.51k|    ) -> Option<*const u8> {
  421|  6.51k|        let chunk = V::load_unaligned(cur);
  422|  6.51k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  6.51k|        if mask.has_non_zero() {
  424|    226|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  6.28k|            None
  427|       |        }
  428|  6.51k|    }
_RINvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  17.1k|    unsafe fn search_chunk(
  417|  17.1k|        &self,
  418|  17.1k|        cur: *const u8,
  419|  17.1k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  17.1k|    ) -> Option<*const u8> {
  421|  17.1k|        let chunk = V::load_unaligned(cur);
  422|  17.1k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  17.1k|        if mask.has_non_zero() {
  424|  1.33k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  15.8k|            None
  427|       |        }
  428|  17.1k|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE3newBa_:
  450|  17.9M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  17.9M|        Two {
  452|  17.9M|            s1: needle1,
  453|  17.9M|            s2: needle2,
  454|  17.9M|            v1: V::splat(needle1),
  455|  17.9M|            v2: V::splat(needle2),
  456|  17.9M|        }
  457|  17.9M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE3newBa_:
  450|  17.9M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  17.9M|        Two {
  452|  17.9M|            s1: needle1,
  453|  17.9M|            s2: needle2,
  454|  17.9M|            v1: V::splat(needle1),
  455|  17.9M|            v2: V::splat(needle2),
  456|  17.9M|        }
  457|  17.9M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  30.0M|    pub(crate) fn needle1(&self) -> u8 {
  462|  30.0M|        self.s1
  463|  30.0M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  29.9M|    pub(crate) fn needle2(&self) -> u8 {
  468|  29.9M|        self.s2
  469|  29.9M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE8find_rawBa_:
  493|  2.02M|    pub(crate) unsafe fn find_raw(
  494|  2.02M|        &self,
  495|  2.02M|        start: *const u8,
  496|  2.02M|        end: *const u8,
  497|  2.02M|    ) -> Option<*const u8> {
  498|  2.02M|        // If we want to support vectors bigger than 256 bits, we probably
  499|  2.02M|        // need to move up to using a u64 for the masks used below. Currently
  500|  2.02M|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|  2.02M|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|  2.02M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  2.02M|        let topos = V::Mask::first_offset;
  505|  2.02M|        let len = end.distance(start);
  506|  2.02M|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  2.02M|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  64.3k|            return Some(cur);
  517|  1.95M|        }
  518|  1.95M|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  1.95M|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|  1.95M|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  1.95M|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|  1.95M|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  2.73M|        while cur <= end.sub(V::BYTES) {
  551|   784k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   784k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  3.15k|                return Some(cur);
  554|   780k|            }
  555|   780k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|  1.95M|        if cur < end {
  562|  1.83M|            debug_assert!(end.distance(cur) < V::BYTES);
  563|  1.83M|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|  1.83M|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|  1.83M|            return self.search_chunk(cur, topos);
  566|   121k|        }
  567|   121k|        None
  568|  2.02M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE8find_rawBa_:
  493|  2.89M|    pub(crate) unsafe fn find_raw(
  494|  2.89M|        &self,
  495|  2.89M|        start: *const u8,
  496|  2.89M|        end: *const u8,
  497|  2.89M|    ) -> Option<*const u8> {
  498|  2.89M|        // If we want to support vectors bigger than 256 bits, we probably
  499|  2.89M|        // need to move up to using a u64 for the masks used below. Currently
  500|  2.89M|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|  2.89M|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|  2.89M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  2.89M|        let topos = V::Mask::first_offset;
  505|  2.89M|        let len = end.distance(start);
  506|  2.89M|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  2.89M|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  2.42M|            return Some(cur);
  517|   474k|        }
  518|   474k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   474k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|   474k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   474k|        if len >= Self::LOOP_SIZE {
  522|   400k|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|   338k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|   338k|                let a = V::load_aligned(cur);
  526|   338k|                let b = V::load_aligned(cur.add(V::BYTES));
  527|   338k|                let eqa1 = self.v1.cmpeq(a);
  528|   338k|                let eqb1 = self.v1.cmpeq(b);
  529|   338k|                let eqa2 = self.v2.cmpeq(a);
  530|   338k|                let eqb2 = self.v2.cmpeq(b);
  531|   338k|                let or1 = eqa1.or(eqb1);
  532|   338k|                let or2 = eqa2.or(eqb2);
  533|   338k|                let or3 = or1.or(or2);
  534|   338k|                if or3.movemask_will_have_non_zero() {
  535|   104k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|   104k|                    if mask.has_non_zero() {
  537|  53.0k|                        return Some(cur.add(topos(mask)));
  538|  51.5k|                    }
  539|  51.5k|
  540|  51.5k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|  51.5k|                    debug_assert!(mask.has_non_zero());
  542|  51.5k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|   233k|                }
  544|   233k|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   307k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   480k|        while cur <= end.sub(V::BYTES) {
  551|   114k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   114k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  3.43k|                return Some(cur);
  554|   111k|            }
  555|   111k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   366k|        if cur < end {
  562|   355k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   355k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|   355k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   355k|            return self.search_chunk(cur, topos);
  566|  11.2k|        }
  567|  11.2k|        None
  568|  2.89M|    }
_RINvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  4.63M|    unsafe fn search_chunk(
  671|  4.63M|        &self,
  672|  4.63M|        cur: *const u8,
  673|  4.63M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  4.63M|    ) -> Option<*const u8> {
  675|  4.63M|        let chunk = V::load_unaligned(cur);
  676|  4.63M|        let eq1 = self.v1.cmpeq(chunk);
  677|  4.63M|        let eq2 = self.v2.cmpeq(chunk);
  678|  4.63M|        let mask = eq1.or(eq2).movemask();
  679|  4.63M|        if mask.has_non_zero() {
  680|  72.5k|            let mask1 = eq1.movemask();
  681|  72.5k|            let mask2 = eq2.movemask();
  682|  72.5k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  4.56M|            None
  685|       |        }
  686|  4.63M|    }
_RINvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  3.36M|    unsafe fn search_chunk(
  671|  3.36M|        &self,
  672|  3.36M|        cur: *const u8,
  673|  3.36M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  3.36M|    ) -> Option<*const u8> {
  675|  3.36M|        let chunk = V::load_unaligned(cur);
  676|  3.36M|        let eq1 = self.v1.cmpeq(chunk);
  677|  3.36M|        let eq2 = self.v2.cmpeq(chunk);
  678|  3.36M|        let mask = eq1.or(eq2).movemask();
  679|  3.36M|        if mask.has_non_zero() {
  680|  2.43M|            let mask1 = eq1.movemask();
  681|  2.43M|            let mask2 = eq2.movemask();
  682|  2.43M|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|   934k|            None
  685|       |        }
  686|  3.36M|    }
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  4.83k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  4.83k|    start: *const u8,
 1150|  4.83k|    end: *const u8,
 1151|  4.83k|    confirm: F,
 1152|  4.83k|) -> Option<*const u8> {
 1153|  4.83k|    debug_assert!(start <= end);
 1154|  4.83k|    let mut ptr = start;
 1155|  36.7k|    while ptr < end {
 1156|  32.1k|        if confirm(*ptr) {
 1157|    237|            return Some(ptr);
 1158|  31.9k|        }
 1159|  31.9k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  4.59k|    None
 1162|  4.83k|}
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|  11.3M|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  11.3M|    start: *const u8,
 1150|  11.3M|    end: *const u8,
 1151|  11.3M|    confirm: F,
 1152|  11.3M|) -> Option<*const u8> {
 1153|  11.3M|    debug_assert!(start <= end);
 1154|  11.3M|    let mut ptr = start;
 1155|  41.2M|    while ptr < end {
 1156|  30.0M|        if confirm(*ptr) {
 1157|   122k|            return Some(ptr);
 1158|  29.8M|        }
 1159|  29.8M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  11.2M|    None
 1162|  11.3M|}

_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  15.3k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  15.3k|        One {
   71|  15.3k|            sse2: generic::One::new(needle),
   72|  15.3k|            avx2: generic::One::new(needle),
   73|  15.3k|        }
   74|  15.3k|    }
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  15.3k|    pub unsafe fn find_raw(
  180|  15.3k|        &self,
  181|  15.3k|        start: *const u8,
  182|  15.3k|        end: *const u8,
  183|  15.3k|    ) -> Option<*const u8> {
  184|  15.3k|        if start >= end {
  185|  1.09k|            return None;
  186|  14.2k|        }
  187|  14.2k|        let len = end.distance(start);
  188|  14.2k|        if len < __m256i::BYTES {
  189|  7.82k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  4.83k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  4.83k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  2.99k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  6.37k|        }
  201|  6.37k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  6.37k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  6.37k|        // enough to run on the vector routine. Pointer validity is caller's
  204|  6.37k|        // responsibility.
  205|  6.37k|        //
  206|  6.37k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  6.37k|        // means we'd have to annotate this routine with `target_feature`.
  208|  6.37k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  6.37k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  6.37k|        // The real problem is that a routine with a `target_feature`
  211|  6.37k|        // annotation generally can't be inlined into caller code unless
  212|  6.37k|        // the caller code has the same target feature annotations. Namely,
  213|  6.37k|        // the common case (at time of writing) is for calling code to not
  214|  6.37k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  6.37k|        // `target_feature` on this routine, it can be inlined which will
  216|  6.37k|        // handle some of the short-haystack cases above without touching the
  217|  6.37k|        // architecture specific code.
  218|  6.37k|        self.find_raw_avx2(start, end)
  219|  15.3k|    }
_RNCNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|  32.1k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|  32.1k|                    b == self.sse2.needle1()
  194|  32.1k|                })
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  2.99k|    unsafe fn find_raw_sse2(
  337|  2.99k|        &self,
  338|  2.99k|        start: *const u8,
  339|  2.99k|        end: *const u8,
  340|  2.99k|    ) -> Option<*const u8> {
  341|  2.99k|        self.sse2.find_raw(start, end)
  342|  2.99k|    }
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  6.37k|    unsafe fn find_raw_avx2(
  397|  6.37k|        &self,
  398|  6.37k|        start: *const u8,
  399|  6.37k|        end: *const u8,
  400|  6.37k|    ) -> Option<*const u8> {
  401|  6.37k|        self.avx2.find_raw(start, end)
  402|  6.37k|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  17.9M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  17.9M|        Two {
  558|  17.9M|            sse2: generic::Two::new(needle1, needle2),
  559|  17.9M|            avx2: generic::Two::new(needle1, needle2),
  560|  17.9M|        }
  561|  17.9M|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  17.9M|    pub unsafe fn find_raw(
  655|  17.9M|        &self,
  656|  17.9M|        start: *const u8,
  657|  17.9M|        end: *const u8,
  658|  17.9M|    ) -> Option<*const u8> {
  659|  17.9M|        if start >= end {
  660|  1.66M|            return None;
  661|  16.2M|        }
  662|  16.2M|        let len = end.distance(start);
  663|  16.2M|        if len < __m256i::BYTES {
  664|  13.3M|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  11.3M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  11.3M|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|  2.02M|                self.find_raw_sse2(start, end)
  674|       |            };
  675|  2.89M|        }
  676|  2.89M|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|  2.89M|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|  2.89M|        // enough to run on the vector routine. Pointer validity is caller's
  679|  2.89M|        // responsibility.
  680|  2.89M|        //
  681|  2.89M|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|  2.89M|        // means we'd have to annotate this routine with `target_feature`.
  683|  2.89M|        // Which is fine, because this routine is `unsafe` anyway and the
  684|  2.89M|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|  2.89M|        // The real problem is that a routine with a `target_feature`
  686|  2.89M|        // annotation generally can't be inlined into caller code unless
  687|  2.89M|        // the caller code has the same target feature annotations. Namely,
  688|  2.89M|        // the common case (at time of writing) is for calling code to not
  689|  2.89M|        // have the `avx2` target feature enabled *at compile time*. Without
  690|  2.89M|        // `target_feature` on this routine, it can be inlined which will
  691|  2.89M|        // handle some of the short-haystack cases above without touching the
  692|  2.89M|        // architecture specific code.
  693|  2.89M|        self.find_raw_avx2(start, end)
  694|  17.9M|    }
_RNCNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  30.0M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  30.0M|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  30.0M|                })
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|  2.02M|    unsafe fn find_raw_sse2(
  765|  2.02M|        &self,
  766|  2.02M|        start: *const u8,
  767|  2.02M|        end: *const u8,
  768|  2.02M|    ) -> Option<*const u8> {
  769|  2.02M|        self.sse2.find_raw(start, end)
  770|  2.02M|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|  2.89M|    unsafe fn find_raw_avx2(
  805|  2.89M|        &self,
  806|  2.89M|        start: *const u8,
  807|  2.89M|        end: *const u8,
  808|  2.89M|    ) -> Option<*const u8> {
  809|  2.89M|        self.avx2.find_raw(start, end)
  810|  2.89M|    }

_RNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  17.9M|pub(crate) fn memchr2_raw(
  221|  17.9M|    n1: u8,
  222|  17.9M|    n2: u8,
  223|  17.9M|    start: *const u8,
  224|  17.9M|    end: *const u8,
  225|  17.9M|) -> Option<*const u8> {
  226|  17.9M|    // SAFETY: We provide a valid function pointer type.
  227|  17.9M|    unsafe_ifunc!(
  228|  17.9M|        Two,
  229|  17.9M|        find_raw,
  230|  17.9M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  17.9M|        Option<*const u8>,
  232|  17.9M|        start,
  233|  17.9M|        end,
  234|  17.9M|        n1,
  235|  17.9M|        n2
  236|  17.9M|    )
  237|  17.9M|}
_RNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr10memchr_raw:
  174|  15.3k|pub(crate) fn memchr_raw(
  175|  15.3k|    n1: u8,
  176|  15.3k|    start: *const u8,
  177|  15.3k|    end: *const u8,
  178|  15.3k|) -> Option<*const u8> {
  179|  15.3k|    // SAFETY: We provide a valid function pointer type.
  180|  15.3k|    unsafe_ifunc!(
  181|  15.3k|        One,
  182|  15.3k|        find_raw,
  183|  15.3k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  15.3k|        Option<*const u8>,
  185|  15.3k|        start,
  186|  15.3k|        end,
  187|  15.3k|        n1
  188|  15.3k|    )
  189|  15.3k|}
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  15.3k|        unsafe fn find_avx2(
   79|  15.3k|            $($needle: u8),+,
   80|  15.3k|            $hay_start: *const u8,
   81|  15.3k|            $hay_end: *const u8,
   82|  15.3k|        ) -> $retty {
   83|  15.3k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  15.3k|            $memchrty::new_unchecked($($needle),+)
   85|  15.3k|                .$memchrfind($hay_start, $hay_end)
   86|  15.3k|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  17.9M|        unsafe fn find_avx2(
   79|  17.9M|            $($needle: u8),+,
   80|  17.9M|            $hay_start: *const u8,
   81|  17.9M|            $hay_end: *const u8,
   82|  17.9M|        ) -> $retty {
   83|  17.9M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  17.9M|            $memchrty::new_unchecked($($needle),+)
   85|  17.9M|                .$memchrfind($hay_start, $hay_end)
   86|  17.9M|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }

_RNvXNtCseJq1f3D7C0A_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  26.1M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  26.1M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  26.1M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  26.1M|    }
_RNvXNtCseJq1f3D7C0A_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|  2.43M|    fn as_usize(self) -> usize {
   27|  2.43M|        self as usize
   28|  2.43M|    }

_RNvMs2_NtCseJq1f3D7C0A_6memchr6memchrNtB5_7Memchr23newCssoZq86sT9S_5oxttl:
  377|  14.9M|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  14.9M|        Memchr2 {
  379|  14.9M|            needle1,
  380|  14.9M|            needle2,
  381|  14.9M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  14.9M|        }
  383|  14.9M|    }
_RNvNtCseJq1f3D7C0A_6memchr6memchr11memchr2_rawCssoZq86sT9S_5oxttl:
  574|  17.9M|unsafe fn memchr2_raw(
  575|  17.9M|    needle1: u8,
  576|  17.9M|    needle2: u8,
  577|  17.9M|    start: *const u8,
  578|  17.9M|    end: *const u8,
  579|  17.9M|) -> Option<*const u8> {
  580|  17.9M|    #[cfg(target_arch = "x86_64")]
  581|  17.9M|    {
  582|  17.9M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  17.9M|    }
  584|  17.9M|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  585|  17.9M|    {
  586|  17.9M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  17.9M|    }
  588|  17.9M|    #[cfg(target_arch = "aarch64")]
  589|  17.9M|    {
  590|  17.9M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  17.9M|    }
  592|  17.9M|    #[cfg(not(any(
  593|  17.9M|        target_arch = "x86_64",
  594|  17.9M|        all(target_arch = "wasm32", target_feature = "simd128"),
  595|  17.9M|        target_arch = "aarch64"
  596|  17.9M|    )))]
  597|  17.9M|    {
  598|  17.9M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  17.9M|            .find_raw(start, end)
  600|  17.9M|    }
  601|  17.9M|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr12memchr2_iterCssoZq86sT9S_5oxttl:
  232|  14.9M|pub fn memchr2_iter<'h>(
  233|  14.9M|    needle1: u8,
  234|  14.9M|    needle2: u8,
  235|  14.9M|    haystack: &'h [u8],
  236|  14.9M|) -> Memchr2<'h> {
  237|  14.9M|    Memchr2::new(needle1, needle2, haystack)
  238|  14.9M|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr6memchrCssoZq86sT9S_5oxttl:
   27|  15.3k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  15.3k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  15.3k|    // pointer between start and end.
   30|  15.3k|    unsafe {
   31|  15.3k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  15.3k|        })
   34|  15.3k|    }
   35|  15.3k|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr7memchr2CssoZq86sT9S_5oxttl:
   92|  2.99M|pub fn memchr2(needle1: u8, needle2: u8, haystack: &[u8]) -> Option<usize> {
   93|  2.99M|    // SAFETY: memchr2_raw, when a match is found, always returns a valid
   94|  2.99M|    // pointer between start and end.
   95|  2.99M|    unsafe {
   96|  2.99M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|       |            memchr2_raw(needle1, needle2, start, end)
   98|  2.99M|        })
   99|  2.99M|    }
  100|  2.99M|}
_RNvXs3_NtCseJq1f3D7C0A_6memchr6memchrNtB5_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCssoZq86sT9S_5oxttl:
  390|  14.9M|    fn next(&mut self) -> Option<usize> {
  391|  14.9M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  14.9M|        // pointers returns will fall within the start and end bounds, and this
  393|  14.9M|        // upholds the safety contract of `self.it.next`.
  394|  14.9M|        unsafe {
  395|  14.9M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  14.9M|        }
  397|  14.9M|    }
_RNCNvNtCseJq1f3D7C0A_6memchr6memchr7memchr20CssoZq86sT9S_5oxttl:
   96|  2.99M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|  2.99M|            memchr2_raw(needle1, needle2, start, end)
   98|  2.99M|        })
_RNCNvXs3_NtCseJq1f3D7C0A_6memchr6memchrNtB7_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0CssoZq86sT9S_5oxttl:
  395|  14.9M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNCNvNtCseJq1f3D7C0A_6memchr6memchr6memchr0B5_:
   31|  15.3k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|  15.3k|            memchr_raw(needle, start, end)
   33|  15.3k|        })
_RNvNtCseJq1f3D7C0A_6memchr6memchr10memchr_rawB3_:
  504|  15.3k|unsafe fn memchr_raw(
  505|  15.3k|    needle: u8,
  506|  15.3k|    start: *const u8,
  507|  15.3k|    end: *const u8,
  508|  15.3k|) -> Option<*const u8> {
  509|  15.3k|    #[cfg(target_arch = "x86_64")]
  510|  15.3k|    {
  511|  15.3k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  15.3k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  15.3k|        // time. This function also handles using a fallback if neither AVX2
  514|  15.3k|        // nor SSE2 (unusual) are available.
  515|  15.3k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  15.3k|    }
  517|  15.3k|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  518|  15.3k|    {
  519|  15.3k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  15.3k|    }
  521|  15.3k|    #[cfg(target_arch = "aarch64")]
  522|  15.3k|    {
  523|  15.3k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  15.3k|    }
  525|  15.3k|    #[cfg(not(any(
  526|  15.3k|        target_arch = "x86_64",
  527|  15.3k|        all(target_arch = "wasm32", target_feature = "simd128"),
  528|  15.3k|        target_arch = "aarch64"
  529|  15.3k|    )))]
  530|  15.3k|    {
  531|  15.3k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  15.3k|    }
  533|  15.3k|}

_RNvMNtCseJq1f3D7C0A_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  126|  2.61M|    fn get_for_offset(self) -> u32 {
  127|  2.61M|        #[cfg(target_endian = "big")]
  128|  2.61M|        {
  129|  2.61M|            self.0.swap_bytes()
  130|  2.61M|        }
  131|  2.61M|        #[cfg(target_endian = "little")]
  132|  2.61M|        {
  133|  2.61M|            self.0
  134|  2.61M|        }
  135|  2.61M|    }
_RNvXs_NtCseJq1f3D7C0A_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  171|  2.61M|    fn first_offset(self) -> usize {
  172|  2.61M|        // We are dealing with little endian here (and if we aren't, we swap
  173|  2.61M|        // the bytes so we are in practice), where the most significant byte
  174|  2.61M|        // is at a higher address. That means the least significant bit that
  175|  2.61M|        // is set corresponds to the position of our first matching byte.
  176|  2.61M|        // That position corresponds to the number of zeros after the least
  177|  2.61M|        // significant bit.
  178|  2.61M|        self.get_for_offset().trailing_zeros() as usize
  179|  2.61M|    }
_RNvXs_NtCseJq1f3D7C0A_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  146|  8.47M|    fn has_non_zero(self) -> bool {
  147|  8.47M|        self.0 != 0
  148|  8.47M|    }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  217|  4.64M|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  218|  4.64M|            _mm_loadu_si128(data as *const __m128i)
  219|  4.64M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  222|  4.78M|        unsafe fn movemask(self) -> SensibleMoveMask {
  223|  4.78M|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  224|  4.78M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  227|  9.27M|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  228|  9.27M|            _mm_cmpeq_epi8(self, vector2)
  229|  9.27M|        }
_RNvYNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtNtCseJq1f3D7C0A_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   63|   340k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   64|   340k|        self.movemask().has_non_zero()
   65|   340k|    }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  266|  3.38M|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  267|  3.38M|            _mm256_loadu_si256(data as *const __m256i)
  268|  3.38M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  271|  8.90M|        unsafe fn movemask(self) -> SensibleMoveMask {
  272|  8.90M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  273|  8.90M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  276|  8.11M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  277|  8.11M|            _mm256_cmpeq_epi8(self, vector2)
  278|  8.11M|        }
_RNvXs_NtCseJq1f3D7C0A_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  161|  2.66M|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  162|  2.66M|        SensibleMoveMask(self.0 | other.0)
  163|  2.66M|    }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  207|  35.8M|        unsafe fn splat(byte: u8) -> __m128i {
  208|  35.8M|            _mm_set1_epi8(byte as i8)
  209|  35.8M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector2or:
  237|  4.63M|        unsafe fn or(self, vector2: Self) -> __m128i {
  238|  4.63M|            _mm_or_si128(self, vector2)
  239|  4.63M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  256|  35.8M|        unsafe fn splat(byte: u8) -> __m256i {
  257|  35.8M|            _mm256_set1_epi8(byte as i8)
  258|  35.8M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  261|   684k|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  262|   684k|            _mm256_load_si256(data as *const __m256i)
  263|   684k|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector2or:
  286|  4.38M|        unsafe fn or(self, vector2: Self) -> __m256i {
  287|  4.38M|            _mm256_or_si256(self, vector2)
  288|  4.38M|        }

_RNvMs2_NtCskvfXHrT6OsD_9once_cell3impINtB5_8OnceCellNtNtCs3OstG5Tqy1X_5alloc6string6StringE14is_initializedCsi2SvK2lYMoy_13libfuzzer_sys:
   49|  8.43k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  8.43k|        // An `Acquire` load is enough because that makes all the initialization
   51|  8.43k|        // operations visible to us, and, this being a fast path, weaker
   52|  8.43k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  8.43k|        // `SeqCst` operations on the slow path.
   54|  8.43k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  8.43k|    }

_RNvMs4_NtCskvfXHrT6OsD_9once_cell4syncINtB5_8OnceCellNtNtCs3OstG5Tqy1X_5alloc6string6StringE3getCsi2SvK2lYMoy_13libfuzzer_sys:
  963|  8.43k|        pub fn get(&self) -> Option<&T> {
  964|  8.43k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  8.43k|                None
  969|       |            }
  970|  8.43k|        }

_RNvMCsaOqqenhRLQf_10oxilangtagINtB2_11LanguageTagReE10into_innerCssoZq86sT9S_5oxttl:
   62|  20.4k|    pub fn into_inner(self) -> T {
   63|  20.4k|        self.tag
   64|  20.4k|    }
_RNvMCsaOqqenhRLQf_10oxilangtagINtB2_11LanguageTagReE5parseCssoZq86sT9S_5oxttl:
   49|  24.4k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   50|  24.4k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   51|  20.4k|        Ok(Self { tag, positions })
   52|  24.4k|    }
_RINvCsaOqqenhRLQf_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECs23GeP7cdX8Z_5oxrdf:
  632|  20.9k|fn parse_langtag(
  633|  20.9k|    input: &str,
  634|  20.9k|    output: &mut impl OutputBuffer,
  635|  20.9k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  636|  20.9k|    #[derive(PartialEq, Eq)]
  637|  20.9k|    enum State {
  638|  20.9k|        Start,
  639|  20.9k|        AfterLanguage,
  640|  20.9k|        AfterExtLang,
  641|  20.9k|        AfterScript,
  642|  20.9k|        AfterRegion,
  643|  20.9k|        InExtension { expected: bool },
  644|  20.9k|        InPrivateUse { expected: bool },
  645|  20.9k|    }
  646|  20.9k|
  647|  20.9k|    let mut state = State::Start;
  648|  20.9k|    let mut language_end = 0;
  649|  20.9k|    let mut extlang_end = 0;
  650|  20.9k|    let mut script_end = 0;
  651|  20.9k|    let mut region_end = 0;
  652|  20.9k|    let mut variant_end = 0;
  653|  20.9k|    let mut extension_end = 0;
  654|  20.9k|    let mut extlangs_count = 0;
  655|  39.2k|    for (subtag, end) in SubTagIterator::new(input) {
  656|  39.2k|        if subtag.is_empty() {
  657|      0|            return Err(LanguageTagParseError {
  658|      0|                kind: TagParseErrorKind::EmptySubtag,
  659|      0|            });
  660|  39.2k|        }
  661|  39.2k|        if subtag.len() > 8 {
  662|    242|            return Err(LanguageTagParseError {
  663|    242|                kind: TagParseErrorKind::SubtagTooLong,
  664|    242|            });
  665|  39.0k|        }
  666|  39.0k|        if state == State::Start {
  667|       |            // Primary language
  668|  20.7k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  669|  2.03k|                return Err(LanguageTagParseError {
  670|  2.03k|                    kind: TagParseErrorKind::InvalidLanguage,
  671|  2.03k|                });
  672|  18.6k|            }
  673|  18.6k|            language_end = end;
  674|  18.6k|            output.extend(to_lowercase(subtag));
  675|  18.6k|            if subtag.len() < 4 {
  676|  9.42k|                // extlangs are only allowed for short language tags
  677|  9.42k|                state = State::AfterLanguage;
  678|  9.42k|            } else {
  679|  9.25k|                state = State::AfterExtLang;
  680|  9.25k|            }
  681|  18.3k|        } else if let State::InPrivateUse { .. } = state {
  682|  2.66k|            if !is_alphanumeric(subtag) {
  683|      0|                return Err(LanguageTagParseError {
  684|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  685|      0|                });
  686|  2.66k|            }
  687|  2.66k|            output.push('-');
  688|  2.66k|            output.extend(to_lowercase(subtag));
  689|  2.66k|            state = State::InPrivateUse { expected: false };
  690|  15.6k|        } else if subtag == "x" || subtag == "X" {
  691|       |            // We make sure extension is found
  692|  2.89k|            if let State::InExtension { expected: true } = state {
  693|    248|                return Err(LanguageTagParseError {
  694|    248|                    kind: TagParseErrorKind::EmptyExtension,
  695|    248|                });
  696|  2.64k|            }
  697|  2.64k|            output.push('-');
  698|  2.64k|            output.push('x');
  699|  2.64k|            state = State::InPrivateUse { expected: true };
  700|  12.7k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  701|       |            // We make sure extension is found
  702|  3.18k|            if let State::InExtension { expected: true } = state {
  703|    342|                return Err(LanguageTagParseError {
  704|    342|                    kind: TagParseErrorKind::EmptyExtension,
  705|    342|                });
  706|  2.84k|            }
  707|  2.84k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  708|  2.84k|            output.push('-');
  709|  2.84k|            output.push(extension_tag);
  710|  2.84k|            state = State::InExtension { expected: true };
  711|  9.59k|        } else if let State::InExtension { .. } = state {
  712|  3.18k|            if !is_alphanumeric(subtag) {
  713|      0|                return Err(LanguageTagParseError {
  714|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  715|      0|                });
  716|  3.18k|            }
  717|  3.18k|            extension_end = end;
  718|  3.18k|            output.push('-');
  719|  3.18k|            output.extend(to_lowercase(subtag));
  720|  3.18k|            state = State::InExtension { expected: false };
  721|  6.41k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  722|    716|            extlangs_count += 1;
  723|    716|            if extlangs_count > 3 {
  724|     96|                return Err(LanguageTagParseError {
  725|     96|                    kind: TagParseErrorKind::TooManyExtlangs,
  726|     96|                });
  727|    620|            }
  728|    620|            // valid extlangs
  729|    620|            extlang_end = end;
  730|    620|            output.push('-');
  731|    620|            output.extend(to_lowercase(subtag));
  732|  5.69k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  733|  5.25k|            && subtag.len() == 4
  734|    251|            && is_alphabetic(subtag)
  735|    251|        {
  736|    251|            // Script
  737|    251|            script_end = end;
  738|    251|            output.push('-');
  739|    251|            output.extend(to_uppercase_first(subtag));
  740|    251|            state = State::AfterScript;
  741|  5.44k|        } else if (state == State::AfterLanguage
  742|    861|            || state == State::AfterExtLang
  743|    446|            || state == State::AfterScript)
  744|  5.10k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  745|  1.12k|                || subtag.len() == 3 && is_numeric(subtag))
  746|  3.97k|        {
  747|  3.97k|            // Region
  748|  3.97k|            region_end = end;
  749|  3.97k|            output.push('-');
  750|  3.97k|            output.extend(to_uppercase(subtag));
  751|  3.97k|            state = State::AfterRegion;
  752|  3.97k|        } else if (state == State::AfterLanguage
  753|    534|            || state == State::AfterExtLang
  754|    430|            || state == State::AfterScript
  755|    345|            || state == State::AfterRegion)
  756|  1.46k|            && is_alphanumeric(subtag)
  757|  1.46k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  758|    374|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  759|  1.09k|        {
  760|  1.09k|            // Variant
  761|  1.09k|            variant_end = end;
  762|  1.09k|            output.push('-');
  763|  1.09k|            output.extend(to_lowercase(subtag));
  764|  1.09k|            state = State::AfterRegion;
  765|  1.09k|        } else {
  766|    374|            return Err(LanguageTagParseError {
  767|    374|                kind: TagParseErrorKind::InvalidSubtag,
  768|    374|            });
  769|       |        }
  770|       |    }
  771|       |
  772|       |    //We make sure we are in a correct final state
  773|  17.5k|    if let State::InExtension { expected: true } = state {
  774|    592|        return Err(LanguageTagParseError {
  775|    592|            kind: TagParseErrorKind::EmptyExtension,
  776|    592|        });
  777|  16.9k|    }
  778|  16.9k|    if let State::InPrivateUse { expected: true } = state {
  779|    156|        return Err(LanguageTagParseError {
  780|    156|            kind: TagParseErrorKind::EmptyPrivateUse,
  781|    156|        });
  782|  16.8k|    }
  783|  16.8k|
  784|  16.8k|    //We make sure we have not skipped anyone
  785|  16.8k|    if extlang_end < language_end {
  786|  16.5k|        extlang_end = language_end;
  787|  16.5k|    }
  788|  16.8k|    if script_end < extlang_end {
  789|  16.6k|        script_end = extlang_end;
  790|  16.6k|    }
  791|  16.8k|    if region_end < script_end {
  792|  13.1k|        region_end = script_end;
  793|  13.1k|    }
  794|  16.8k|    if variant_end < region_end {
  795|  15.7k|        variant_end = region_end;
  796|  15.7k|    }
  797|  16.8k|    if extension_end < variant_end {
  798|  15.2k|        extension_end = variant_end;
  799|  15.2k|    }
  800|       |
  801|  16.8k|    Ok(TagElementsPositions {
  802|  16.8k|        language_end,
  803|  16.8k|        extlang_end,
  804|  16.8k|        script_end,
  805|  16.8k|        region_end,
  806|  16.8k|        variant_end,
  807|  16.8k|        extension_end,
  808|  16.8k|    })
  809|  20.9k|}
_RINvCsaOqqenhRLQf_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECs23GeP7cdX8Z_5oxrdf:
  587|  24.4k|fn parse_language_tag(
  588|  24.4k|    input: &str,
  589|  24.4k|    output: &mut impl OutputBuffer,
  590|  24.4k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  591|       |    //grandfathered tags
  592|  24.4k|    if let Some(tag) = GRANDFATHEREDS
  593|  24.4k|        .iter()
  594|  24.4k|        .find(|record| record.eq_ignore_ascii_case(input))
  595|       |    {
  596|      0|        output.push_str(tag);
  597|      0|        Ok(TagElementsPositions {
  598|      0|            language_end: tag.len(),
  599|      0|            extlang_end: tag.len(),
  600|      0|            script_end: tag.len(),
  601|      0|            region_end: tag.len(),
  602|      0|            variant_end: tag.len(),
  603|      0|            extension_end: tag.len(),
  604|      0|        })
  605|  24.4k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  606|       |        // private use
  607|  3.57k|        if !is_alphanumeric_or_dash(input) {
  608|      0|            Err(LanguageTagParseError {
  609|      0|                kind: TagParseErrorKind::ForbiddenChar,
  610|      0|            })
  611|  3.57k|        } else if input.len() == 2 {
  612|      0|            Err(LanguageTagParseError {
  613|      0|                kind: TagParseErrorKind::EmptyPrivateUse,
  614|      0|            })
  615|       |        } else {
  616|  3.57k|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  617|  3.57k|            Ok(TagElementsPositions {
  618|  3.57k|                language_end: input.len(),
  619|  3.57k|                extlang_end: input.len(),
  620|  3.57k|                script_end: input.len(),
  621|  3.57k|                region_end: input.len(),
  622|  3.57k|                variant_end: input.len(),
  623|  3.57k|                extension_end: input.len(),
  624|  3.57k|            })
  625|       |        }
  626|       |    } else {
  627|  20.9k|        parse_langtag(input, output)
  628|       |    }
  629|  24.4k|}
_RINvXsr_CsaOqqenhRLQf_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECs23GeP7cdX8Z_5oxrdf:
  571|  3.57k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsaOqqenhRLQf_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECs23GeP7cdX8Z_5oxrdf:
  571|  26.2k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsaOqqenhRLQf_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECs23GeP7cdX8Z_5oxrdf:
  571|  3.97k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsaOqqenhRLQf_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECs23GeP7cdX8Z_5oxrdf:
  571|    251|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCsaOqqenhRLQf_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0Cs23GeP7cdX8Z_5oxrdf:
  594|   636k|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvCsaOqqenhRLQf_10oxilangtag10is_numericCs23GeP7cdX8Z_5oxrdf:
  876|    338|fn is_numeric(s: &str) -> bool {
  877|    338|    s.chars().all(|x| x.is_ascii_digit())
  878|    338|}
_RNvCsaOqqenhRLQf_10oxilangtag12to_lowercaseCs23GeP7cdX8Z_5oxrdf:
  903|  26.2k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  904|  26.2k|    s.chars().map(|c| c.to_ascii_lowercase())
  905|  26.2k|}
_RNvCsaOqqenhRLQf_10oxilangtag12to_uppercaseCs23GeP7cdX8Z_5oxrdf:
  891|  3.97k|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  892|  3.97k|    s.chars().map(|c| c.to_ascii_uppercase())
  893|  3.97k|}
_RNvCsaOqqenhRLQf_10oxilangtag13is_alphabeticCs23GeP7cdX8Z_5oxrdf:
  871|  24.7k|fn is_alphabetic(s: &str) -> bool {
  872|  24.7k|    s.chars().all(|x| x.is_ascii_alphabetic())
  873|  24.7k|}
_RNvCsaOqqenhRLQf_10oxilangtag15is_alphanumericCs23GeP7cdX8Z_5oxrdf:
  881|  10.5k|fn is_alphanumeric(s: &str) -> bool {
  882|  10.5k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  883|  10.5k|}
_RNvCsaOqqenhRLQf_10oxilangtag18to_uppercase_firstCs23GeP7cdX8Z_5oxrdf:
  897|    251|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  898|    251|    let mut chars = s.chars();
  899|    251|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  900|    251|}
_RNvCsaOqqenhRLQf_10oxilangtag23is_alphanumeric_or_dashCs23GeP7cdX8Z_5oxrdf:
  886|  3.57k|fn is_alphanumeric_or_dash(s: &str) -> bool {
  887|  3.57k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  888|  3.57k|}
_RNvMsv_CsaOqqenhRLQf_10oxilangtagNtB5_14SubTagIterator3newCs23GeP7cdX8Z_5oxrdf:
  850|  20.9k|    fn new(input: &'a str) -> Self {
  851|  20.9k|        Self {
  852|  20.9k|            split: input.split('-'),
  853|  20.9k|            position: 0,
  854|  20.9k|        }
  855|  20.9k|    }
_RNvXsq_CsaOqqenhRLQf_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCs23GeP7cdX8Z_5oxrdf:
  563|  22.7k|    fn push(&mut self, _: char) {}
_RNvXsw_CsaOqqenhRLQf_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCs23GeP7cdX8Z_5oxrdf:
  862|  56.8k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  863|  56.8k|        let tag = self.split.next()?;
  864|  39.2k|        let tag_end = self.position + tag.len();
  865|  39.2k|        self.position = tag_end + 1;
  866|  39.2k|        Some((tag, tag_end))
  867|  56.8k|    }
_RNvXso_CsaOqqenhRLQf_10oxilangtagNtB5_21LanguageTagParseErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
  490|  4.08k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  491|  4.08k|        match self.kind {
  492|       |            TagParseErrorKind::EmptyExtension => {
  493|  1.18k|                write!(f, "If an extension subtag is present, it must not be empty")
  494|       |            }
  495|       |            TagParseErrorKind::EmptyPrivateUse => {
  496|    156|                write!(f, "If the `x` subtag is present, it must not be empty")
  497|       |            }
  498|       |            TagParseErrorKind::ForbiddenChar => {
  499|      0|                write!(f, "The langtag contains a char not allowed")
  500|       |            }
  501|    374|            TagParseErrorKind::InvalidSubtag => write!(
  502|    374|                f,
  503|    374|                "A subtag fails to parse, it does not match any other subtags"
  504|    374|            ),
  505|  2.03k|            TagParseErrorKind::InvalidLanguage => write!(f, "The given language subtag is invalid"),
  506|       |            TagParseErrorKind::SubtagTooLong => {
  507|    242|                write!(f, "A subtag may be eight characters in length at maximum")
  508|       |            }
  509|      0|            TagParseErrorKind::EmptySubtag => write!(f, "A subtag should not be empty"),
  510|       |            TagParseErrorKind::TooManyExtlangs => {
  511|     96|                write!(f, "At maximum three extlangs are allowed")
  512|       |            }
  513|       |        }
  514|  4.08k|    }
_RNCNvCsaOqqenhRLQf_10oxilangtag13is_alphabetic0B3_:
  872|  86.2k|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCsaOqqenhRLQf_10oxilangtag10is_numeric0B3_:
  877|    338|    s.chars().all(|x| x.is_ascii_digit())
_RNCNvCsaOqqenhRLQf_10oxilangtag15is_alphanumeric0B3_:
  882|  23.9k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNCNvCsaOqqenhRLQf_10oxilangtag23is_alphanumeric_or_dash0B3_:
  887|  57.0k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')

_RNvXsZ_Cs8SDT0Q3242W_5oxiriNtNtCs3OstG5Tqy1X_5alloc6string6StringNtB5_12OutputBuffer3lenCssoZq86sT9S_5oxttl:
 1124|  1.46M|    fn len(&self) -> usize {
 1125|  1.46M|        self.len()
 1126|  1.46M|    }
_RNvXsZ_Cs8SDT0Q3242W_5oxiriNtNtCs3OstG5Tqy1X_5alloc6string6StringNtB5_12OutputBuffer4pushCssoZq86sT9S_5oxttl:
 1104|  3.60M|    fn push(&mut self, c: char) {
 1105|  3.60M|        self.push(c);
 1106|  3.60M|    }
_RNvXsZ_Cs8SDT0Q3242W_5oxiriNtNtCs3OstG5Tqy1X_5alloc6string6StringNtB5_12OutputBuffer5clearCssoZq86sT9S_5oxttl:
 1114|  81.6k|    fn clear(&mut self) {
 1115|  81.6k|        self.clear();
 1116|  81.6k|    }
_RNvXsZ_Cs8SDT0Q3242W_5oxiriNtNtCs3OstG5Tqy1X_5alloc6string6StringNtB5_12OutputBuffer6as_strCssoZq86sT9S_5oxttl:
 1129|  2.27M|    fn as_str(&self) -> &str {
 1130|  2.27M|        self.as_str()
 1131|  2.27M|    }
_RNvXsZ_Cs8SDT0Q3242W_5oxiriNtNtCs3OstG5Tqy1X_5alloc6string6StringNtB5_12OutputBuffer8push_strCssoZq86sT9S_5oxttl:
 1109|   601k|    fn push_str(&mut self, s: &str) {
 1110|   601k|        self.push_str(s);
 1111|   601k|    }
_RNvXsZ_Cs8SDT0Q3242W_5oxiriNtNtCs3OstG5Tqy1X_5alloc6string6StringNtB5_12OutputBuffer8truncateCssoZq86sT9S_5oxttl:
 1119|   750k|    fn truncate(&mut self, new_len: usize) {
 1120|   750k|        self.truncate(new_len);
 1121|   750k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb1_E27read_url_codepoint_or_echarNCNvB2_10parse_path0ECssoZq86sT9S_5oxttl:
 1556|  92.4k|    fn read_url_codepoint_or_echar(
 1557|  92.4k|        &mut self,
 1558|  92.4k|        c: char,
 1559|  92.4k|        valid: impl Fn(char) -> bool,
 1560|  92.4k|    ) -> Result<(), IriParseError> {
 1561|  92.4k|        if UNCHECKED || valid(c) {
 1562|  92.4k|            self.output.push(c);
 1563|  92.4k|            Ok(())
 1564|      0|        } else if c == '%' {
 1565|      0|            self.read_echar()
 1566|       |        } else {
 1567|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|  92.4k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb1_E27read_url_codepoint_or_echarNCNvB2_11parse_query0ECssoZq86sT9S_5oxttl:
 1556|   119k|    fn read_url_codepoint_or_echar(
 1557|   119k|        &mut self,
 1558|   119k|        c: char,
 1559|   119k|        valid: impl Fn(char) -> bool,
 1560|   119k|    ) -> Result<(), IriParseError> {
 1561|   119k|        if UNCHECKED || valid(c) {
 1562|   119k|            self.output.push(c);
 1563|   119k|            Ok(())
 1564|      0|        } else if c == '%' {
 1565|      0|            self.read_echar()
 1566|       |        } else {
 1567|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   119k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb1_E27read_url_codepoint_or_echarNCNvB2_14parse_fragment0ECssoZq86sT9S_5oxttl:
 1556|  55.7k|    fn read_url_codepoint_or_echar(
 1557|  55.7k|        &mut self,
 1558|  55.7k|        c: char,
 1559|  55.7k|        valid: impl Fn(char) -> bool,
 1560|  55.7k|    ) -> Result<(), IriParseError> {
 1561|  55.7k|        if UNCHECKED || valid(c) {
 1562|  55.7k|            self.output.push(c);
 1563|  55.7k|            Ok(())
 1564|      0|        } else if c == '%' {
 1565|      0|            self.read_echar()
 1566|       |        } else {
 1567|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|  55.7k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb1_E27read_url_codepoint_or_echarNCNvB2_15parse_authority0ECssoZq86sT9S_5oxttl:
 1556|   101k|    fn read_url_codepoint_or_echar(
 1557|   101k|        &mut self,
 1558|   101k|        c: char,
 1559|   101k|        valid: impl Fn(char) -> bool,
 1560|   101k|    ) -> Result<(), IriParseError> {
 1561|   101k|        if UNCHECKED || valid(c) {
 1562|   101k|            self.output.push(c);
 1563|   101k|            Ok(())
 1564|      0|        } else if c == '%' {
 1565|      0|            self.read_echar()
 1566|       |        } else {
 1567|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   101k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb1_E27read_url_codepoint_or_echarNvB7_28is_iunreserved_or_sub_delimsECssoZq86sT9S_5oxttl:
 1556|  96.8k|    fn read_url_codepoint_or_echar(
 1557|  96.8k|        &mut self,
 1558|  96.8k|        c: char,
 1559|  96.8k|        valid: impl Fn(char) -> bool,
 1560|  96.8k|    ) -> Result<(), IriParseError> {
 1561|  96.8k|        if UNCHECKED || valid(c) {
 1562|  96.8k|            self.output.push(c);
 1563|  96.8k|            Ok(())
 1564|      0|        } else if c == '%' {
 1565|      0|            self.read_echar()
 1566|       |        } else {
 1567|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|  96.8k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E11parse_erroruECssoZq86sT9S_5oxttl:
 1590|  33.3k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1591|  33.3k|        Err(IriParseError { kind })
 1592|  33.3k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E27read_url_codepoint_or_echarNCNvB2_10parse_path0ECssoZq86sT9S_5oxttl:
 1556|   452k|    fn read_url_codepoint_or_echar(
 1557|   452k|        &mut self,
 1558|   452k|        c: char,
 1559|   452k|        valid: impl Fn(char) -> bool,
 1560|   452k|    ) -> Result<(), IriParseError> {
 1561|   452k|        if UNCHECKED || valid(c) {
 1562|   439k|            self.output.push(c);
 1563|   439k|            Ok(())
 1564|  12.4k|        } else if c == '%' {
 1565|    608|            self.read_echar()
 1566|       |        } else {
 1567|  11.8k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   452k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E27read_url_codepoint_or_echarNCNvB2_11parse_query0ECssoZq86sT9S_5oxttl:
 1556|   153k|    fn read_url_codepoint_or_echar(
 1557|   153k|        &mut self,
 1558|   153k|        c: char,
 1559|   153k|        valid: impl Fn(char) -> bool,
 1560|   153k|    ) -> Result<(), IriParseError> {
 1561|   153k|        if UNCHECKED || valid(c) {
 1562|   149k|            self.output.push(c);
 1563|   149k|            Ok(())
 1564|  3.88k|        } else if c == '%' {
 1565|  1.88k|            self.read_echar()
 1566|       |        } else {
 1567|  1.99k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   153k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E27read_url_codepoint_or_echarNCNvB2_14parse_fragment0ECssoZq86sT9S_5oxttl:
 1556|  62.2k|    fn read_url_codepoint_or_echar(
 1557|  62.2k|        &mut self,
 1558|  62.2k|        c: char,
 1559|  62.2k|        valid: impl Fn(char) -> bool,
 1560|  62.2k|    ) -> Result<(), IriParseError> {
 1561|  62.2k|        if UNCHECKED || valid(c) {
 1562|  59.6k|            self.output.push(c);
 1563|  59.6k|            Ok(())
 1564|  2.61k|        } else if c == '%' {
 1565|    990|            self.read_echar()
 1566|       |        } else {
 1567|  1.62k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|  62.2k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E27read_url_codepoint_or_echarNCNvB2_15parse_authority0ECssoZq86sT9S_5oxttl:
 1556|   104k|    fn read_url_codepoint_or_echar(
 1557|   104k|        &mut self,
 1558|   104k|        c: char,
 1559|   104k|        valid: impl Fn(char) -> bool,
 1560|   104k|    ) -> Result<(), IriParseError> {
 1561|   104k|        if UNCHECKED || valid(c) {
 1562|   101k|            self.output.push(c);
 1563|   101k|            Ok(())
 1564|  3.15k|        } else if c == '%' {
 1565|    512|            self.read_echar()
 1566|       |        } else {
 1567|  2.63k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   104k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E27read_url_codepoint_or_echarNCNvB2_19parse_relative_path0ECssoZq86sT9S_5oxttl:
 1556|   325k|    fn read_url_codepoint_or_echar(
 1557|   325k|        &mut self,
 1558|   325k|        c: char,
 1559|   325k|        valid: impl Fn(char) -> bool,
 1560|   325k|    ) -> Result<(), IriParseError> {
 1561|   325k|        if UNCHECKED || valid(c) {
 1562|   314k|            self.output.push(c);
 1563|   314k|            Ok(())
 1564|  10.9k|        } else if c == '%' {
 1565|  1.10k|            self.read_echar()
 1566|       |        } else {
 1567|  9.82k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   325k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E27read_url_codepoint_or_echarNvB7_28is_iunreserved_or_sub_delimsECssoZq86sT9S_5oxttl:
 1556|  66.8k|    fn read_url_codepoint_or_echar(
 1557|  66.8k|        &mut self,
 1558|  66.8k|        c: char,
 1559|  66.8k|        valid: impl Fn(char) -> bool,
 1560|  66.8k|    ) -> Result<(), IriParseError> {
 1561|  66.8k|        if UNCHECKED || valid(c) {
 1562|  66.3k|            self.output.push(c);
 1563|  66.3k|            Ok(())
 1564|    498|        } else if c == '%' {
 1565|    290|            self.read_echar()
 1566|       |        } else {
 1567|    208|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|  66.8k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb1_E27read_url_codepoint_or_echarNCNvB2_10parse_path0ECssoZq86sT9S_5oxttl:
 1556|   295k|    fn read_url_codepoint_or_echar(
 1557|   295k|        &mut self,
 1558|   295k|        c: char,
 1559|   295k|        valid: impl Fn(char) -> bool,
 1560|   295k|    ) -> Result<(), IriParseError> {
 1561|   295k|        if UNCHECKED || valid(c) {
 1562|   295k|            self.output.push(c);
 1563|   295k|            Ok(())
 1564|      0|        } else if c == '%' {
 1565|      0|            self.read_echar()
 1566|       |        } else {
 1567|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   295k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb1_E27read_url_codepoint_or_echarNCNvB2_11parse_query0ECssoZq86sT9S_5oxttl:
 1556|  94.6k|    fn read_url_codepoint_or_echar(
 1557|  94.6k|        &mut self,
 1558|  94.6k|        c: char,
 1559|  94.6k|        valid: impl Fn(char) -> bool,
 1560|  94.6k|    ) -> Result<(), IriParseError> {
 1561|  94.6k|        if UNCHECKED || valid(c) {
 1562|  94.6k|            self.output.push(c);
 1563|  94.6k|            Ok(())
 1564|      0|        } else if c == '%' {
 1565|      0|            self.read_echar()
 1566|       |        } else {
 1567|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|  94.6k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb1_E27read_url_codepoint_or_echarNCNvB2_14parse_fragment0ECssoZq86sT9S_5oxttl:
 1556|  44.6k|    fn read_url_codepoint_or_echar(
 1557|  44.6k|        &mut self,
 1558|  44.6k|        c: char,
 1559|  44.6k|        valid: impl Fn(char) -> bool,
 1560|  44.6k|    ) -> Result<(), IriParseError> {
 1561|  44.6k|        if UNCHECKED || valid(c) {
 1562|  44.6k|            self.output.push(c);
 1563|  44.6k|            Ok(())
 1564|      0|        } else if c == '%' {
 1565|      0|            self.read_echar()
 1566|       |        } else {
 1567|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|  44.6k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb1_E27read_url_codepoint_or_echarNCNvB2_15parse_authority0ECssoZq86sT9S_5oxttl:
 1556|  62.3k|    fn read_url_codepoint_or_echar(
 1557|  62.3k|        &mut self,
 1558|  62.3k|        c: char,
 1559|  62.3k|        valid: impl Fn(char) -> bool,
 1560|  62.3k|    ) -> Result<(), IriParseError> {
 1561|  62.3k|        if UNCHECKED || valid(c) {
 1562|  62.3k|            self.output.push(c);
 1563|  62.3k|            Ok(())
 1564|      0|        } else if c == '%' {
 1565|      0|            self.read_echar()
 1566|       |        } else {
 1567|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|  62.3k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb1_E27read_url_codepoint_or_echarNCNvB2_19parse_relative_path0ECssoZq86sT9S_5oxttl:
 1556|   202k|    fn read_url_codepoint_or_echar(
 1557|   202k|        &mut self,
 1558|   202k|        c: char,
 1559|   202k|        valid: impl Fn(char) -> bool,
 1560|   202k|    ) -> Result<(), IriParseError> {
 1561|   202k|        if UNCHECKED || valid(c) {
 1562|   202k|            self.output.push(c);
 1563|   202k|            Ok(())
 1564|      0|        } else if c == '%' {
 1565|      0|            self.read_echar()
 1566|       |        } else {
 1567|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   202k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb1_E27read_url_codepoint_or_echarNvB7_28is_iunreserved_or_sub_delimsECssoZq86sT9S_5oxttl:
 1556|  59.3k|    fn read_url_codepoint_or_echar(
 1557|  59.3k|        &mut self,
 1558|  59.3k|        c: char,
 1559|  59.3k|        valid: impl Fn(char) -> bool,
 1560|  59.3k|    ) -> Result<(), IriParseError> {
 1561|  59.3k|        if UNCHECKED || valid(c) {
 1562|  59.3k|            self.output.push(c);
 1563|  59.3k|            Ok(())
 1564|      0|        } else if c == '%' {
 1565|      0|            self.read_echar()
 1566|       |        } else {
 1567|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|  59.3k|    }
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E10parse_path0CssoZq86sT9S_5oxttl:
 1516|   452k|                Some(c) => self.read_url_codepoint_or_echar(c, |c| {
 1517|   452k|                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1518|   452k|                })?,
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E10read_echar0CssoZq86sT9S_5oxttl:
 1574|  4.75k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E10read_echars_0CssoZq86sT9S_5oxttl:
 1575|  3.38k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E11parse_query0CssoZq86sT9S_5oxttl:
 1530|   153k|                self.read_url_codepoint_or_echar(c, |c| {
 1531|   153k|                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?' | '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1532|   153k|                })?
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E14parse_fragment0CssoZq86sT9S_5oxttl:
 1541|  62.2k|            self.read_url_codepoint_or_echar(c, |c| {
 1542|  62.2k|                is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?')
 1543|  62.2k|            })?;
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E15parse_authority0CssoZq86sT9S_5oxttl:
 1364|   104k|                    self.read_url_codepoint_or_echar(c, |c| {
 1365|   104k|                        is_iunreserved_or_sub_delims(c) || c == ':'
 1366|   104k|                    })?;
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E19parse_relative_path0CssoZq86sT9S_5oxttl:
 1323|   325k|            self.read_url_codepoint_or_echar(c, |c| is_iunreserved_or_sub_delims(c) || c == '@')?;
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE15parse_uncheckedCssoZq86sT9S_5oxttl:
   70|  11.7k|    pub fn parse_unchecked(iri: T) -> Self {
   71|  11.7k|        let positions =
   72|  11.7k|            IriParser::<_, true>::parse(&iri, None, &mut VoidOutputBuffer::default()).unwrap();
   73|  11.7k|        Self { iri, positions }
   74|  11.7k|    }
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE17resolve_uncheckedCssoZq86sT9S_5oxttl:
  107|   207k|    pub fn resolve_unchecked(&self, iri: &str) -> IriRef<String> {
  108|   207k|        let mut target_buffer = String::with_capacity(self.iri.len() + iri.len());
  109|   207k|        let positions =
  110|   207k|            IriParser::<_, true>::parse(iri, Some(self.as_ref()), &mut target_buffer).unwrap();
  111|   207k|        IriRef {
  112|   207k|            iri: target_buffer,
  113|   207k|            positions,
  114|   207k|        }
  115|   207k|    }
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE4pathCssoZq86sT9S_5oxttl:
  258|  6.59k|    pub fn path(&self) -> &str {
  259|  6.59k|        &self.iri[self.positions.authority_end..self.positions.path_end]
  260|  6.59k|    }
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE6as_refCssoZq86sT9S_5oxttl:
  154|   625k|    pub fn as_ref(&self) -> IriRef<&str> {
  155|   625k|        IriRef {
  156|   625k|            iri: &self.iri,
  157|   625k|            positions: self.positions,
  158|   625k|        }
  159|   625k|    }
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE6as_strCssoZq86sT9S_5oxttl:
  171|  4.19k|    pub fn as_str(&self) -> &str {
  172|  4.19k|        &self.iri
  173|  4.19k|    }
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE7resolveCssoZq86sT9S_5oxttl:
   89|   417k|    pub fn resolve(&self, iri: &str) -> Result<IriRef<String>, IriParseError> {
   90|   417k|        let mut target_buffer = String::with_capacity(self.iri.len() + iri.len());
   91|   417k|        let positions = IriParser::<_, false>::parse(iri, Some(self.as_ref()), &mut target_buffer)?;
   92|   384k|        Ok(IriRef {
   93|   384k|            iri: target_buffer,
   94|   384k|            positions,
   95|   384k|        })
   96|   417k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_hostCssoZq86sT9S_5oxttl:
 1372|  9.96k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1373|  9.96k|        if self.input.starts_with('[') {
 1374|       |            // IP v6
 1375|    393|            let start_position = self.input.position;
 1376|  10.5k|            while let Some(c) = self.input.next() {
 1377|  10.4k|                self.output.push(c);
 1378|  10.4k|                if c == ']' {
 1379|    364|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1380|    364|                    if !UNCHECKED {
 1381|      0|                        if ip.starts_with('v') || ip.starts_with('V') {
 1382|      0|                            self.validate_ip_v_future(ip)?;
 1383|      0|                        } else if let Err(error) = Ipv6Addr::from_str(ip) {
 1384|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1385|      0|                        }
 1386|    364|                    }
 1387|       |
 1388|    364|                    let c = self.input.next();
 1389|    364|                    return match c {
 1390|       |                        Some(':') => {
 1391|     56|                            self.output.push(':');
 1392|     56|                            self.parse_port()
 1393|       |                        }
 1394|       |                        None | Some('/') | Some('?') | Some('#') => {
 1395|    281|                            self.output_positions.authority_end = self.output.len();
 1396|    281|                            self.parse_path_start(c)
 1397|       |                        }
 1398|     27|                        Some(c) => {
 1399|     27|                            if UNCHECKED {
 1400|     27|                                self.output.push(c);
 1401|     27|                                continue;
 1402|       |                            } else {
 1403|      0|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1404|       |                            }
 1405|       |                        }
 1406|       |                    };
 1407|  10.0k|                }
 1408|       |            }
 1409|     56|            if UNCHECKED {
 1410|       |                // We consider it's valid even if it's not finished
 1411|     56|                self.output_positions.authority_end = self.output.len();
 1412|     56|                self.parse_path_start(None)
 1413|       |            } else {
 1414|      0|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1415|       |            }
 1416|       |        } else {
 1417|       |            // Other host
 1418|   106k|            loop {
 1419|   106k|                let c = self.input.next();
 1420|   106k|                match c {
 1421|       |                    Some(':') => {
 1422|    846|                        self.output.push(':');
 1423|    846|                        return self.parse_port();
 1424|       |                    }
 1425|       |                    None | Some('/') | Some('?') | Some('#') => {
 1426|  8.72k|                        self.output_positions.authority_end = self.output.len();
 1427|  8.72k|                        return self.parse_path_start(c);
 1428|       |                    }
 1429|  96.8k|                    Some(c) => self.read_url_codepoint_or_echar(c, is_iunreserved_or_sub_delims)?,
 1430|       |                }
 1431|       |            }
 1432|       |        }
 1433|  9.96k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_pathCssoZq86sT9S_5oxttl:
 1485|  8.88k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1486|   105k|        loop {
 1487|   105k|            let c = self.input.next();
 1488|   105k|            match c {
 1489|       |                None | Some('/') | Some('?') | Some('#') => {
 1490|  12.8k|                    if self.output.as_str().ends_with("/..") {
 1491|      0|                        self.remove_last_segment();
 1492|      0|                        self.remove_last_segment();
 1493|      0|                        self.output.push('/');
 1494|  12.8k|                    } else if self.output.as_str().ends_with("/.") {
 1495|      0|                        self.remove_last_segment();
 1496|      0|                        self.output.push('/');
 1497|  12.8k|                    } else if c == Some('/') {
 1498|  3.92k|                        self.output.push('/');
 1499|  8.88k|                    }
 1500|       |
 1501|  12.8k|                    if c == Some('?') {
 1502|  1.81k|                        self.output_positions.path_end = self.output.len();
 1503|  1.81k|                        self.output.push('?');
 1504|  1.81k|                        return self.parse_query();
 1505|  11.0k|                    } else if c == Some('#') {
 1506|    945|                        self.output_positions.path_end = self.output.len();
 1507|    945|                        self.output_positions.query_end = self.output.len();
 1508|    945|                        self.output.push('#');
 1509|    945|                        return self.parse_fragment();
 1510|  10.0k|                    } else if c.is_none() {
 1511|  6.12k|                        self.output_positions.path_end = self.output.len();
 1512|  6.12k|                        self.output_positions.query_end = self.output.len();
 1513|  6.12k|                        return Ok(());
 1514|  3.92k|                    }
 1515|       |                }
 1516|  92.4k|                Some(c) => self.read_url_codepoint_or_echar(c, |c| {
 1517|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1518|  92.4k|                })?,
 1519|       |            }
 1520|       |        }
 1521|  8.88k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_portCssoZq86sT9S_5oxttl:
 1435|    902|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1436|  1.69k|        loop {
 1437|  1.69k|            let c = self.input.next();
 1438|  1.69k|            match c {
 1439|       |                Some('/') | Some('?') | Some('#') | None => {
 1440|    902|                    self.output_positions.authority_end = self.output.len();
 1441|    902|                    return self.parse_path_start(c);
 1442|       |                }
 1443|    793|                Some(c) => {
 1444|    793|                    if UNCHECKED || c.is_ascii_digit() {
 1445|    793|                        self.output.push(c)
 1446|       |                    } else {
 1447|      0|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1448|       |                    }
 1449|       |                }
 1450|       |            }
 1451|       |        }
 1452|    902|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E11parse_queryCssoZq86sT9S_5oxttl:
 1523|  2.12k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1524|   121k|        while let Some(c) = self.input.next() {
 1525|   119k|            if c == '#' {
 1526|    225|                self.output_positions.query_end = self.output.len();
 1527|    225|                self.output.push('#');
 1528|    225|                return self.parse_fragment();
 1529|       |            } else {
 1530|   119k|                self.read_url_codepoint_or_echar(c, |c| {
 1531|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?' | '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1532|   119k|                })?
 1533|       |            }
 1534|       |        }
 1535|  1.90k|        self.output_positions.query_end = self.output.len();
 1536|  1.90k|        Ok(())
 1537|  2.12k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E12parse_schemeCssoZq86sT9S_5oxttl:
 1213|  11.7k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|  63.7k|        loop {
 1215|  63.7k|            let c = self.input.next();
 1216|  63.7k|            match c {
 1217|  63.7k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|  52.0k|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|  11.7k|                    self.output.push(':');
 1222|  11.7k|                    self.output_positions.scheme_end = self.output.len();
 1223|  11.7k|                    self.input_scheme_end = self.input.position;
 1224|  11.7k|                    return if self.input.starts_with('/') {
 1225|  10.5k|                        self.input.next();
 1226|  10.5k|                        self.output.push('/');
 1227|  10.5k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  1.17k|                        self.output_positions.authority_end = self.output.len();
 1230|  1.17k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|      0|                    self.input = ParserInput {
 1235|      0|                        value: self.iri.chars(),
 1236|      0|                        position: 0,
 1237|      0|                    }; // reset
 1238|      0|                    self.output.clear();
 1239|      0|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|  11.7k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E14parse_fragmentCssoZq86sT9S_5oxttl:
 1539|  1.50k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1540|  57.2k|        while let Some(c) = self.input.next() {
 1541|  55.7k|            self.read_url_codepoint_or_echar(c, |c| {
 1542|       |                is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?')
 1543|  55.7k|            })?;
 1544|       |        }
 1545|  1.50k|        Ok(())
 1546|  1.50k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E15parse_authorityCssoZq86sT9S_5oxttl:
 1346|  9.96k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1347|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1348|   111k|        loop {
 1349|   111k|            let c = self.input.next();
 1350|   111k|            match c {
 1351|       |                Some('@') => {
 1352|    240|                    self.output.push('@');
 1353|    240|                    return self.parse_host();
 1354|       |                }
 1355|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1356|  9.72k|                    self.input = ParserInput {
 1357|  9.72k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1358|  9.72k|                        position: self.input_scheme_end + 2,
 1359|  9.72k|                    };
 1360|  9.72k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1361|  9.72k|                    return self.parse_host();
 1362|       |                }
 1363|   101k|                Some(c) => {
 1364|   101k|                    self.read_url_codepoint_or_echar(c, |c| {
 1365|       |                        is_iunreserved_or_sub_delims(c) || c == ':'
 1366|   101k|                    })?;
 1367|       |                }
 1368|       |            }
 1369|       |        }
 1370|  9.96k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E16parse_path_startCssoZq86sT9S_5oxttl:
 1454|  9.96k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1455|  9.96k|        match c {
 1456|       |            None => {
 1457|  2.20k|                self.output_positions.path_end = self.output.len();
 1458|  2.20k|                self.output_positions.query_end = self.output.len();
 1459|  2.20k|                Ok(())
 1460|       |            }
 1461|       |            Some('?') => {
 1462|    317|                self.output_positions.path_end = self.output.len();
 1463|    317|                self.output.push('?');
 1464|    317|                self.parse_query()
 1465|       |            }
 1466|       |            Some('#') => {
 1467|    338|                self.output_positions.path_end = self.output.len();
 1468|    338|                self.output_positions.query_end = self.output.len();
 1469|    338|                self.output.push('#');
 1470|    338|                self.parse_fragment()
 1471|       |            }
 1472|       |            Some('/') => {
 1473|  7.10k|                self.output.push('/');
 1474|  7.10k|                self.parse_path()
 1475|       |            }
 1476|      0|            Some(c) => {
 1477|      0|                self.read_url_codepoint_or_echar(c, |c| {
 1478|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1479|      0|                })?;
 1480|      0|                self.parse_path()
 1481|       |            }
 1482|       |        }
 1483|  9.96k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E18parse_scheme_startCssoZq86sT9S_5oxttl:
 1199|  11.7k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|  11.7k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|     42|                if UNCHECKED {
 1203|     42|                    self.parse_scheme()
 1204|       |                } else {
 1205|      0|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|  11.7k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|      0|            _ => self.parse_relative(),
 1210|       |        }
 1211|  11.7k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E23parse_path_or_authorityCssoZq86sT9S_5oxttl:
 1245|  10.5k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|  10.5k|        if self.input.starts_with('/') {
 1247|  9.96k|            self.input.next();
 1248|  9.96k|            self.output.push('/');
 1249|  9.96k|            self.parse_authority()
 1250|       |        } else {
 1251|    603|            self.output_positions.authority_end = self.output.len() - 1;
 1252|    603|            self.parse_path()
 1253|       |        }
 1254|  10.5k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E5parseCssoZq86sT9S_5oxttl:
 1174|  11.7k|    fn parse(
 1175|  11.7k|        iri: &'a str,
 1176|  11.7k|        base: Option<IriRef<&'a str>>,
 1177|  11.7k|        output: &'a mut O,
 1178|  11.7k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|  11.7k|        let mut parser = Self {
 1180|  11.7k|            iri,
 1181|  11.7k|            base,
 1182|  11.7k|            input: ParserInput {
 1183|  11.7k|                value: iri.chars(),
 1184|  11.7k|                position: 0,
 1185|  11.7k|            },
 1186|  11.7k|            output,
 1187|  11.7k|            output_positions: IriElementsPositions {
 1188|  11.7k|                scheme_end: 0,
 1189|  11.7k|                authority_end: 0,
 1190|  11.7k|                path_end: 0,
 1191|  11.7k|                query_end: 0,
 1192|  11.7k|            },
 1193|  11.7k|            input_scheme_end: 0,
 1194|  11.7k|        };
 1195|  11.7k|        parser.parse_scheme_start()?;
 1196|  11.7k|        Ok(parser.output_positions)
 1197|  11.7k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E10parse_hostCssoZq86sT9S_5oxttl:
 1372|  12.4k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1373|  12.4k|        if self.input.starts_with('[') {
 1374|       |            // IP v6
 1375|  2.36k|            let start_position = self.input.position;
 1376|  46.3k|            while let Some(c) = self.input.next() {
 1377|  45.6k|                self.output.push(c);
 1378|  45.6k|                if c == ']' {
 1379|  1.66k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1380|  1.66k|                    if !UNCHECKED {
 1381|  1.66k|                        if ip.starts_with('v') || ip.starts_with('V') {
 1382|      0|                            self.validate_ip_v_future(ip)?;
 1383|  1.66k|                        } else if let Err(error) = Ipv6Addr::from_str(ip) {
 1384|  1.66k|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1385|      0|                        }
 1386|      0|                    }
 1387|       |
 1388|      0|                    let c = self.input.next();
 1389|      0|                    return match c {
 1390|       |                        Some(':') => {
 1391|      0|                            self.output.push(':');
 1392|      0|                            self.parse_port()
 1393|       |                        }
 1394|       |                        None | Some('/') | Some('?') | Some('#') => {
 1395|      0|                            self.output_positions.authority_end = self.output.len();
 1396|      0|                            self.parse_path_start(c)
 1397|       |                        }
 1398|      0|                        Some(c) => {
 1399|      0|                            if UNCHECKED {
 1400|      0|                                self.output.push(c);
 1401|      0|                                continue;
 1402|       |                            } else {
 1403|      0|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1404|       |                            }
 1405|       |                        }
 1406|       |                    };
 1407|  43.9k|                }
 1408|       |            }
 1409|    696|            if UNCHECKED {
 1410|       |                // We consider it's valid even if it's not finished
 1411|      0|                self.output_positions.authority_end = self.output.len();
 1412|      0|                self.parse_path_start(None)
 1413|       |            } else {
 1414|    696|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1415|       |            }
 1416|       |        } else {
 1417|       |            // Other host
 1418|  76.6k|            loop {
 1419|  76.6k|                let c = self.input.next();
 1420|  76.6k|                match c {
 1421|       |                    Some(':') => {
 1422|  1.79k|                        self.output.push(':');
 1423|  1.79k|                        return self.parse_port();
 1424|       |                    }
 1425|       |                    None | Some('/') | Some('?') | Some('#') => {
 1426|  7.98k|                        self.output_positions.authority_end = self.output.len();
 1427|  7.98k|                        return self.parse_path_start(c);
 1428|       |                    }
 1429|  66.8k|                    Some(c) => self.read_url_codepoint_or_echar(c, is_iunreserved_or_sub_delims)?,
 1430|       |                }
 1431|       |            }
 1432|       |        }
 1433|  12.4k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E10parse_pathCssoZq86sT9S_5oxttl:
 1485|   370k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1486|   955k|        loop {
 1487|   955k|            let c = self.input.next();
 1488|   955k|            match c {
 1489|       |                None | Some('/') | Some('?') | Some('#') => {
 1490|   503k|                    if self.output.as_str().ends_with("/..") {
 1491|    730|                        self.remove_last_segment();
 1492|    730|                        self.remove_last_segment();
 1493|    730|                        self.output.push('/');
 1494|   503k|                    } else if self.output.as_str().ends_with("/.") {
 1495|   303k|                        self.remove_last_segment();
 1496|   303k|                        self.output.push('/');
 1497|   303k|                    } else if c == Some('/') {
 1498|   144k|                        self.output.push('/');
 1499|   144k|                    }
 1500|       |
 1501|   503k|                    if c == Some('?') {
 1502|  3.19k|                        self.output_positions.path_end = self.output.len();
 1503|  3.19k|                        self.output.push('?');
 1504|  3.19k|                        return self.parse_query();
 1505|   500k|                    } else if c == Some('#') {
 1506|  3.17k|                        self.output_positions.path_end = self.output.len();
 1507|  3.17k|                        self.output_positions.query_end = self.output.len();
 1508|  3.17k|                        self.output.push('#');
 1509|  3.17k|                        return self.parse_fragment();
 1510|   497k|                    } else if c.is_none() {
 1511|   352k|                        self.output_positions.path_end = self.output.len();
 1512|   352k|                        self.output_positions.query_end = self.output.len();
 1513|   352k|                        return Ok(());
 1514|   144k|                    }
 1515|       |                }
 1516|   452k|                Some(c) => self.read_url_codepoint_or_echar(c, |c| {
 1517|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1518|   452k|                })?,
 1519|       |            }
 1520|       |        }
 1521|   370k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E10parse_portCssoZq86sT9S_5oxttl:
 1435|  1.79k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1436|  3.80k|        loop {
 1437|  3.80k|            let c = self.input.next();
 1438|  3.80k|            match c {
 1439|       |                Some('/') | Some('?') | Some('#') | None => {
 1440|  1.55k|                    self.output_positions.authority_end = self.output.len();
 1441|  1.55k|                    return self.parse_path_start(c);
 1442|       |                }
 1443|  2.24k|                Some(c) => {
 1444|  2.24k|                    if UNCHECKED || c.is_ascii_digit() {
 1445|  2.00k|                        self.output.push(c)
 1446|       |                    } else {
 1447|    238|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1448|       |                    }
 1449|       |                }
 1450|       |            }
 1451|       |        }
 1452|  1.79k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E10read_echarCssoZq86sT9S_5oxttl:
 1571|  5.38k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1572|  5.38k|        let c1 = self.input.next();
 1573|  5.38k|        let c2 = self.input.next();
 1574|  5.38k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1575|  3.38k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1576|       |        {
 1577|  3.21k|            self.output.push('%');
 1578|  3.21k|            self.output.push(c1.unwrap());
 1579|  3.21k|            self.output.push(c2.unwrap());
 1580|  3.21k|            Ok(())
 1581|       |        } else {
 1582|  2.17k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1583|  2.17k|                Some('%'),
 1584|  2.17k|                c1,
 1585|  2.17k|                c2,
 1586|  2.17k|            ]))
 1587|       |        }
 1588|  5.38k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E11parse_queryCssoZq86sT9S_5oxttl:
 1523|  12.5k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1524|   163k|        while let Some(c) = self.input.next() {
 1525|   154k|            if c == '#' {
 1526|  1.14k|                self.output_positions.query_end = self.output.len();
 1527|  1.14k|                self.output.push('#');
 1528|  1.14k|                return self.parse_fragment();
 1529|       |            } else {
 1530|   153k|                self.read_url_codepoint_or_echar(c, |c| {
 1531|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?' | '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1532|   153k|                })?
 1533|       |            }
 1534|       |        }
 1535|  8.73k|        self.output_positions.query_end = self.output.len();
 1536|  8.73k|        Ok(())
 1537|  12.5k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E12parse_schemeCssoZq86sT9S_5oxttl:
 1213|  69.7k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|   262k|        loop {
 1215|   262k|            let c = self.input.next();
 1216|   253k|            match c {
 1217|   253k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|   192k|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|  15.2k|                    self.output.push(':');
 1222|  15.2k|                    self.output_positions.scheme_end = self.output.len();
 1223|  15.2k|                    self.input_scheme_end = self.input.position;
 1224|  15.2k|                    return if self.input.starts_with('/') {
 1225|  7.64k|                        self.input.next();
 1226|  7.64k|                        self.output.push('/');
 1227|  7.64k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  7.56k|                        self.output_positions.authority_end = self.output.len();
 1230|  7.56k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|  54.5k|                    self.input = ParserInput {
 1235|  54.5k|                        value: self.iri.chars(),
 1236|  54.5k|                        position: 0,
 1237|  54.5k|                    }; // reset
 1238|  54.5k|                    self.output.clear();
 1239|  54.5k|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|  69.7k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E14parse_fragmentCssoZq86sT9S_5oxttl:
 1539|  6.54k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1540|  66.8k|        while let Some(c) = self.input.next() {
 1541|  62.2k|            self.read_url_codepoint_or_echar(c, |c| {
 1542|       |                is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?')
 1543|  62.2k|            })?;
 1544|       |        }
 1545|  4.63k|        Ok(())
 1546|  6.54k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E14parse_relativeCssoZq86sT9S_5oxttl:
 1256|   402k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1257|   402k|        if let Some(base) = self.base {
 1258|   402k|            match self.input.front() {
 1259|       |                None => {
 1260|  11.7k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1261|  11.7k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1262|  11.7k|                    self.output_positions.authority_end = base.positions.authority_end;
 1263|  11.7k|                    self.output_positions.path_end = base.positions.path_end;
 1264|  11.7k|                    self.output_positions.query_end = base.positions.query_end;
 1265|  11.7k|                    Ok(())
 1266|       |                }
 1267|       |                Some('/') => {
 1268|   200k|                    self.input.next();
 1269|   200k|                    self.parse_relative_slash(&base)
 1270|       |                }
 1271|       |                Some('?') => {
 1272|  8.92k|                    self.input.next();
 1273|  8.92k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1274|  8.92k|                    self.output.push('?');
 1275|  8.92k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1276|  8.92k|                    self.output_positions.authority_end = base.positions.authority_end;
 1277|  8.92k|                    self.output_positions.path_end = base.positions.path_end;
 1278|  8.92k|                    self.parse_query()
 1279|       |                }
 1280|       |                Some('#') => {
 1281|  1.30k|                    self.input.next();
 1282|  1.30k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1283|  1.30k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1284|  1.30k|                    self.output_positions.authority_end = base.positions.authority_end;
 1285|  1.30k|                    self.output_positions.path_end = base.positions.path_end;
 1286|  1.30k|                    self.output_positions.query_end = base.positions.query_end;
 1287|  1.30k|                    self.output.push('#');
 1288|  1.30k|                    self.parse_fragment()
 1289|       |                }
 1290|       |                _ => {
 1291|   180k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1292|   180k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1293|   180k|                    self.output_positions.authority_end = base.positions.authority_end;
 1294|   180k|                    self.output_positions.path_end = base.positions.path_end;
 1295|   180k|                    self.remove_last_segment();
 1296|   180k|                    if self.output.len() > base.positions.scheme_end {
 1297|   176k|                        // We have some path or authority, we keep a base '/'
 1298|   176k|                        self.output.push('/');
 1299|   176k|                    }
 1300|   180k|                    self.parse_relative_path()
 1301|       |                }
 1302|       |            }
 1303|       |        } else {
 1304|      0|            self.output_positions.scheme_end = 0;
 1305|      0|            self.input_scheme_end = 0;
 1306|      0|            if self.input.starts_with('/') {
 1307|      0|                self.input.next();
 1308|      0|                self.output.push('/');
 1309|      0|                self.parse_path_or_authority()
 1310|       |            } else {
 1311|      0|                self.output_positions.authority_end = 0;
 1312|      0|                self.parse_relative_path()
 1313|       |            }
 1314|       |        }
 1315|   402k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E15parse_authorityCssoZq86sT9S_5oxttl:
 1346|  15.3k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1347|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1348|   117k|        loop {
 1349|   117k|            let c = self.input.next();
 1350|   117k|            match c {
 1351|       |                Some('@') => {
 1352|    592|                    self.output.push('@');
 1353|    592|                    return self.parse_host();
 1354|       |                }
 1355|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1356|  11.8k|                    self.input = ParserInput {
 1357|  11.8k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1358|  11.8k|                        position: self.input_scheme_end + 2,
 1359|  11.8k|                    };
 1360|  11.8k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1361|  11.8k|                    return self.parse_host();
 1362|       |                }
 1363|   104k|                Some(c) => {
 1364|   104k|                    self.read_url_codepoint_or_echar(c, |c| {
 1365|       |                        is_iunreserved_or_sub_delims(c) || c == ':'
 1366|   104k|                    })?;
 1367|       |                }
 1368|       |            }
 1369|       |        }
 1370|  15.3k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E16parse_path_startCssoZq86sT9S_5oxttl:
 1454|  9.54k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1455|  9.54k|        match c {
 1456|       |            None => {
 1457|  6.84k|                self.output_positions.path_end = self.output.len();
 1458|  6.84k|                self.output_positions.query_end = self.output.len();
 1459|  6.84k|                Ok(())
 1460|       |            }
 1461|       |            Some('?') => {
 1462|    410|                self.output_positions.path_end = self.output.len();
 1463|    410|                self.output.push('?');
 1464|    410|                self.parse_query()
 1465|       |            }
 1466|       |            Some('#') => {
 1467|    928|                self.output_positions.path_end = self.output.len();
 1468|    928|                self.output_positions.query_end = self.output.len();
 1469|    928|                self.output.push('#');
 1470|    928|                self.parse_fragment()
 1471|       |            }
 1472|       |            Some('/') => {
 1473|  1.36k|                self.output.push('/');
 1474|  1.36k|                self.parse_path()
 1475|       |            }
 1476|      0|            Some(c) => {
 1477|      0|                self.read_url_codepoint_or_echar(c, |c| {
 1478|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1479|      0|                })?;
 1480|      0|                self.parse_path()
 1481|       |            }
 1482|       |        }
 1483|  9.54k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E18parse_scheme_startCssoZq86sT9S_5oxttl:
 1199|   417k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|   417k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|    474|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|    474|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|   405k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|   347k|            _ => self.parse_relative(),
 1210|       |        }
 1211|   417k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E19parse_relative_pathCssoZq86sT9S_5oxttl:
 1317|   180k|    fn parse_relative_path(&mut self) -> Result<(), IriParseError> {
 1318|   495k|        while let Some(c) = self.input.front() {
 1319|   469k|            if matches!(c, '/' | '?' | '#') {
 1320|   143k|                break;
 1321|   325k|            }
 1322|   325k|            self.input.next();
 1323|   325k|            self.read_url_codepoint_or_echar(c, |c| is_iunreserved_or_sub_delims(c) || c == '@')?;
 1324|       |        }
 1325|   169k|        self.parse_path()
 1326|   180k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E19remove_last_segmentCssoZq86sT9S_5oxttl:
 1548|   485k|    fn remove_last_segment(&mut self) {
 1549|   485k|        let last_slash_position = self.output.as_str()[self.output_positions.authority_end..]
 1550|   485k|            .rfind('/')
 1551|   485k|            .unwrap_or(0);
 1552|   485k|        self.output
 1553|   485k|            .truncate(last_slash_position + self.output_positions.authority_end)
 1554|   485k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E20parse_relative_slashCssoZq86sT9S_5oxttl:
 1328|   200k|    fn parse_relative_slash(&mut self, base: &IriRef<&'a str>) -> Result<(), IriParseError> {
 1329|   200k|        if self.input.starts_with('/') {
 1330|  8.85k|            self.input.next();
 1331|  8.85k|            self.output.push_str(&base.iri[..base.positions.scheme_end]);
 1332|  8.85k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1333|  8.85k|            self.output.push('/');
 1334|  8.85k|            self.output.push('/');
 1335|  8.85k|            self.parse_authority()
 1336|       |        } else {
 1337|   191k|            self.output
 1338|   191k|                .push_str(&base.iri[..base.positions.authority_end]);
 1339|   191k|            self.output.push('/');
 1340|   191k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1341|   191k|            self.output_positions.authority_end = base.positions.authority_end;
 1342|   191k|            self.parse_path()
 1343|       |        }
 1344|   200k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E23parse_path_or_authorityCssoZq86sT9S_5oxttl:
 1245|  7.64k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|  7.64k|        if self.input.starts_with('/') {
 1247|  6.49k|            self.input.next();
 1248|  6.49k|            self.output.push('/');
 1249|  6.49k|            self.parse_authority()
 1250|       |        } else {
 1251|  1.14k|            self.output_positions.authority_end = self.output.len() - 1;
 1252|  1.14k|            self.parse_path()
 1253|       |        }
 1254|  7.64k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E5parseCssoZq86sT9S_5oxttl:
 1174|   417k|    fn parse(
 1175|   417k|        iri: &'a str,
 1176|   417k|        base: Option<IriRef<&'a str>>,
 1177|   417k|        output: &'a mut O,
 1178|   417k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|   417k|        let mut parser = Self {
 1180|   417k|            iri,
 1181|   417k|            base,
 1182|   417k|            input: ParserInput {
 1183|   417k|                value: iri.chars(),
 1184|   417k|                position: 0,
 1185|   417k|            },
 1186|   417k|            output,
 1187|   417k|            output_positions: IriElementsPositions {
 1188|   417k|                scheme_end: 0,
 1189|   417k|                authority_end: 0,
 1190|   417k|                path_end: 0,
 1191|   417k|                query_end: 0,
 1192|   417k|            },
 1193|   417k|            input_scheme_end: 0,
 1194|   417k|        };
 1195|   417k|        parser.parse_scheme_start()?;
 1196|   384k|        Ok(parser.output_positions)
 1197|   417k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb1_E10parse_hostCssoZq86sT9S_5oxttl:
 1372|  7.65k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1373|  7.65k|        if self.input.starts_with('[') {
 1374|       |            // IP v6
 1375|  1.18k|            let start_position = self.input.position;
 1376|  24.3k|            while let Some(c) = self.input.next() {
 1377|  23.7k|                self.output.push(c);
 1378|  23.7k|                if c == ']' {
 1379|    844|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1380|    844|                    if !UNCHECKED {
 1381|      0|                        if ip.starts_with('v') || ip.starts_with('V') {
 1382|      0|                            self.validate_ip_v_future(ip)?;
 1383|      0|                        } else if let Err(error) = Ipv6Addr::from_str(ip) {
 1384|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1385|      0|                        }
 1386|    844|                    }
 1387|       |
 1388|    844|                    let c = self.input.next();
 1389|    844|                    return match c {
 1390|       |                        Some(':') => {
 1391|    168|                            self.output.push(':');
 1392|    168|                            self.parse_port()
 1393|       |                        }
 1394|       |                        None | Some('/') | Some('?') | Some('#') => {
 1395|    417|                            self.output_positions.authority_end = self.output.len();
 1396|    417|                            self.parse_path_start(c)
 1397|       |                        }
 1398|    259|                        Some(c) => {
 1399|    259|                            if UNCHECKED {
 1400|    259|                                self.output.push(c);
 1401|    259|                                continue;
 1402|       |                            } else {
 1403|      0|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1404|       |                            }
 1405|       |                        }
 1406|       |                    };
 1407|  22.8k|                }
 1408|       |            }
 1409|    597|            if UNCHECKED {
 1410|       |                // We consider it's valid even if it's not finished
 1411|    597|                self.output_positions.authority_end = self.output.len();
 1412|    597|                self.parse_path_start(None)
 1413|       |            } else {
 1414|      0|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1415|       |            }
 1416|       |        } else {
 1417|       |            // Other host
 1418|  65.8k|            loop {
 1419|  65.8k|                let c = self.input.next();
 1420|  65.8k|                match c {
 1421|       |                    Some(':') => {
 1422|  1.25k|                        self.output.push(':');
 1423|  1.25k|                        return self.parse_port();
 1424|       |                    }
 1425|       |                    None | Some('/') | Some('?') | Some('#') => {
 1426|  5.22k|                        self.output_positions.authority_end = self.output.len();
 1427|  5.22k|                        return self.parse_path_start(c);
 1428|       |                    }
 1429|  59.3k|                    Some(c) => self.read_url_codepoint_or_echar(c, is_iunreserved_or_sub_delims)?,
 1430|       |                }
 1431|       |            }
 1432|       |        }
 1433|  7.65k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb1_E10parse_pathCssoZq86sT9S_5oxttl:
 1485|   190k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1486|   566k|        loop {
 1487|   566k|            let c = self.input.next();
 1488|   566k|            match c {
 1489|       |                None | Some('/') | Some('?') | Some('#') => {
 1490|   270k|                    if self.output.as_str().ends_with("/..") {
 1491|    380|                        self.remove_last_segment();
 1492|    380|                        self.remove_last_segment();
 1493|    380|                        self.output.push('/');
 1494|   270k|                    } else if self.output.as_str().ends_with("/.") {
 1495|   156k|                        self.remove_last_segment();
 1496|   156k|                        self.output.push('/');
 1497|   156k|                    } else if c == Some('/') {
 1498|  79.5k|                        self.output.push('/');
 1499|  79.5k|                    }
 1500|       |
 1501|   270k|                    if c == Some('?') {
 1502|  2.00k|                        self.output_positions.path_end = self.output.len();
 1503|  2.00k|                        self.output.push('?');
 1504|  2.00k|                        return self.parse_query();
 1505|   268k|                    } else if c == Some('#') {
 1506|  1.80k|                        self.output_positions.path_end = self.output.len();
 1507|  1.80k|                        self.output_positions.query_end = self.output.len();
 1508|  1.80k|                        self.output.push('#');
 1509|  1.80k|                        return self.parse_fragment();
 1510|   266k|                    } else if c.is_none() {
 1511|   186k|                        self.output_positions.path_end = self.output.len();
 1512|   186k|                        self.output_positions.query_end = self.output.len();
 1513|   186k|                        return Ok(());
 1514|  79.7k|                    }
 1515|       |                }
 1516|   295k|                Some(c) => self.read_url_codepoint_or_echar(c, |c| {
 1517|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1518|   295k|                })?,
 1519|       |            }
 1520|       |        }
 1521|   190k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb1_E10parse_portCssoZq86sT9S_5oxttl:
 1435|  1.42k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1436|  4.65k|        loop {
 1437|  4.65k|            let c = self.input.next();
 1438|  4.65k|            match c {
 1439|       |                Some('/') | Some('?') | Some('#') | None => {
 1440|  1.42k|                    self.output_positions.authority_end = self.output.len();
 1441|  1.42k|                    return self.parse_path_start(c);
 1442|       |                }
 1443|  3.23k|                Some(c) => {
 1444|  3.23k|                    if UNCHECKED || c.is_ascii_digit() {
 1445|  3.23k|                        self.output.push(c)
 1446|       |                    } else {
 1447|      0|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1448|       |                    }
 1449|       |                }
 1450|       |            }
 1451|       |        }
 1452|  1.42k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb1_E11parse_queryCssoZq86sT9S_5oxttl:
 1523|  6.72k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1524|   101k|        while let Some(c) = self.input.next() {
 1525|  95.2k|            if c == '#' {
 1526|    624|                self.output_positions.query_end = self.output.len();
 1527|    624|                self.output.push('#');
 1528|    624|                return self.parse_fragment();
 1529|       |            } else {
 1530|  94.6k|                self.read_url_codepoint_or_echar(c, |c| {
 1531|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?' | '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1532|  94.6k|                })?
 1533|       |            }
 1534|       |        }
 1535|  6.10k|        self.output_positions.query_end = self.output.len();
 1536|  6.10k|        Ok(())
 1537|  6.72k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb1_E12parse_schemeCssoZq86sT9S_5oxttl:
 1213|  34.8k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|   130k|        loop {
 1215|   130k|            let c = self.input.next();
 1216|   125k|            match c {
 1217|   125k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|  95.5k|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|  7.78k|                    self.output.push(':');
 1222|  7.78k|                    self.output_positions.scheme_end = self.output.len();
 1223|  7.78k|                    self.input_scheme_end = self.input.position;
 1224|  7.78k|                    return if self.input.starts_with('/') {
 1225|  3.79k|                        self.input.next();
 1226|  3.79k|                        self.output.push('/');
 1227|  3.79k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  3.98k|                        self.output_positions.authority_end = self.output.len();
 1230|  3.98k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|  27.0k|                    self.input = ParserInput {
 1235|  27.0k|                        value: self.iri.chars(),
 1236|  27.0k|                        position: 0,
 1237|  27.0k|                    }; // reset
 1238|  27.0k|                    self.output.clear();
 1239|  27.0k|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|  34.8k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb1_E14parse_fragmentCssoZq86sT9S_5oxttl:
 1539|  3.61k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1540|  48.2k|        while let Some(c) = self.input.next() {
 1541|  44.6k|            self.read_url_codepoint_or_echar(c, |c| {
 1542|       |                is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?')
 1543|  44.6k|            })?;
 1544|       |        }
 1545|  3.61k|        Ok(())
 1546|  3.61k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb1_E14parse_relativeCssoZq86sT9S_5oxttl:
 1256|   199k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1257|   199k|        if let Some(base) = self.base {
 1258|   199k|            match self.input.front() {
 1259|       |                None => {
 1260|  5.81k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1261|  5.81k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1262|  5.81k|                    self.output_positions.authority_end = base.positions.authority_end;
 1263|  5.81k|                    self.output_positions.path_end = base.positions.path_end;
 1264|  5.81k|                    self.output_positions.query_end = base.positions.query_end;
 1265|  5.81k|                    Ok(())
 1266|       |                }
 1267|       |                Some('/') => {
 1268|  99.5k|                    self.input.next();
 1269|  99.5k|                    self.parse_relative_slash(&base)
 1270|       |                }
 1271|       |                Some('?') => {
 1272|  4.44k|                    self.input.next();
 1273|  4.44k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1274|  4.44k|                    self.output.push('?');
 1275|  4.44k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1276|  4.44k|                    self.output_positions.authority_end = base.positions.authority_end;
 1277|  4.44k|                    self.output_positions.path_end = base.positions.path_end;
 1278|  4.44k|                    self.parse_query()
 1279|       |                }
 1280|       |                Some('#') => {
 1281|    560|                    self.input.next();
 1282|    560|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1283|    560|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1284|    560|                    self.output_positions.authority_end = base.positions.authority_end;
 1285|    560|                    self.output_positions.path_end = base.positions.path_end;
 1286|    560|                    self.output_positions.query_end = base.positions.query_end;
 1287|    560|                    self.output.push('#');
 1288|    560|                    self.parse_fragment()
 1289|       |                }
 1290|       |                _ => {
 1291|  89.1k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1292|  89.1k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1293|  89.1k|                    self.output_positions.authority_end = base.positions.authority_end;
 1294|  89.1k|                    self.output_positions.path_end = base.positions.path_end;
 1295|  89.1k|                    self.remove_last_segment();
 1296|  89.1k|                    if self.output.len() > base.positions.scheme_end {
 1297|  87.3k|                        // We have some path or authority, we keep a base '/'
 1298|  87.3k|                        self.output.push('/');
 1299|  87.3k|                    }
 1300|  89.1k|                    self.parse_relative_path()
 1301|       |                }
 1302|       |            }
 1303|       |        } else {
 1304|      0|            self.output_positions.scheme_end = 0;
 1305|      0|            self.input_scheme_end = 0;
 1306|      0|            if self.input.starts_with('/') {
 1307|      0|                self.input.next();
 1308|      0|                self.output.push('/');
 1309|      0|                self.parse_path_or_authority()
 1310|       |            } else {
 1311|      0|                self.output_positions.authority_end = 0;
 1312|      0|                self.parse_relative_path()
 1313|       |            }
 1314|       |        }
 1315|   199k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb1_E15parse_authorityCssoZq86sT9S_5oxttl:
 1346|  7.65k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1347|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1348|  70.0k|        loop {
 1349|  70.0k|            let c = self.input.next();
 1350|  70.0k|            match c {
 1351|       |                Some('@') => {
 1352|    326|                    self.output.push('@');
 1353|    326|                    return self.parse_host();
 1354|       |                }
 1355|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1356|  7.33k|                    self.input = ParserInput {
 1357|  7.33k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1358|  7.33k|                        position: self.input_scheme_end + 2,
 1359|  7.33k|                    };
 1360|  7.33k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1361|  7.33k|                    return self.parse_host();
 1362|       |                }
 1363|  62.3k|                Some(c) => {
 1364|  62.3k|                    self.read_url_codepoint_or_echar(c, |c| {
 1365|       |                        is_iunreserved_or_sub_delims(c) || c == ':'
 1366|  62.3k|                    })?;
 1367|       |                }
 1368|       |            }
 1369|       |        }
 1370|  7.65k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb1_E16parse_path_startCssoZq86sT9S_5oxttl:
 1454|  7.65k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1455|  7.65k|        match c {
 1456|       |            None => {
 1457|  5.07k|                self.output_positions.path_end = self.output.len();
 1458|  5.07k|                self.output_positions.query_end = self.output.len();
 1459|  5.07k|                Ok(())
 1460|       |            }
 1461|       |            Some('?') => {
 1462|    269|                self.output_positions.path_end = self.output.len();
 1463|    269|                self.output.push('?');
 1464|    269|                self.parse_query()
 1465|       |            }
 1466|       |            Some('#') => {
 1467|    624|                self.output_positions.path_end = self.output.len();
 1468|    624|                self.output_positions.query_end = self.output.len();
 1469|    624|                self.output.push('#');
 1470|    624|                self.parse_fragment()
 1471|       |            }
 1472|       |            Some('/') => {
 1473|  1.69k|                self.output.push('/');
 1474|  1.69k|                self.parse_path()
 1475|       |            }
 1476|      0|            Some(c) => {
 1477|      0|                self.read_url_codepoint_or_echar(c, |c| {
 1478|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1479|      0|                })?;
 1480|      0|                self.parse_path()
 1481|       |            }
 1482|       |        }
 1483|  7.65k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb1_E18parse_scheme_startCssoZq86sT9S_5oxttl:
 1199|   207k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|   207k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|    237|                if UNCHECKED {
 1203|    237|                    self.parse_scheme()
 1204|       |                } else {
 1205|      0|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|   201k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|   172k|            _ => self.parse_relative(),
 1210|       |        }
 1211|   207k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb1_E19parse_relative_pathCssoZq86sT9S_5oxttl:
 1317|  89.1k|    fn parse_relative_path(&mut self) -> Result<(), IriParseError> {
 1318|   291k|        while let Some(c) = self.input.front() {
 1319|   276k|            if matches!(c, '/' | '?' | '#') {
 1320|  74.4k|                break;
 1321|   202k|            }
 1322|   202k|            self.input.next();
 1323|   202k|            self.read_url_codepoint_or_echar(c, |c| is_iunreserved_or_sub_delims(c) || c == '@')?;
 1324|       |        }
 1325|  89.1k|        self.parse_path()
 1326|  89.1k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb1_E19remove_last_segmentCssoZq86sT9S_5oxttl:
 1548|   246k|    fn remove_last_segment(&mut self) {
 1549|   246k|        let last_slash_position = self.output.as_str()[self.output_positions.authority_end..]
 1550|   246k|            .rfind('/')
 1551|   246k|            .unwrap_or(0);
 1552|   246k|        self.output
 1553|   246k|            .truncate(last_slash_position + self.output_positions.authority_end)
 1554|   246k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb1_E20parse_relative_slashCssoZq86sT9S_5oxttl:
 1328|  99.5k|    fn parse_relative_slash(&mut self, base: &IriRef<&'a str>) -> Result<(), IriParseError> {
 1329|  99.5k|        if self.input.starts_with('/') {
 1330|  4.42k|            self.input.next();
 1331|  4.42k|            self.output.push_str(&base.iri[..base.positions.scheme_end]);
 1332|  4.42k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1333|  4.42k|            self.output.push('/');
 1334|  4.42k|            self.output.push('/');
 1335|  4.42k|            self.parse_authority()
 1336|       |        } else {
 1337|  95.1k|            self.output
 1338|  95.1k|                .push_str(&base.iri[..base.positions.authority_end]);
 1339|  95.1k|            self.output.push('/');
 1340|  95.1k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1341|  95.1k|            self.output_positions.authority_end = base.positions.authority_end;
 1342|  95.1k|            self.parse_path()
 1343|       |        }
 1344|  99.5k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb1_E23parse_path_or_authorityCssoZq86sT9S_5oxttl:
 1245|  3.79k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|  3.79k|        if self.input.starts_with('/') {
 1247|  3.23k|            self.input.next();
 1248|  3.23k|            self.output.push('/');
 1249|  3.23k|            self.parse_authority()
 1250|       |        } else {
 1251|    564|            self.output_positions.authority_end = self.output.len() - 1;
 1252|    564|            self.parse_path()
 1253|       |        }
 1254|  3.79k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb1_E5parseCssoZq86sT9S_5oxttl:
 1174|   207k|    fn parse(
 1175|   207k|        iri: &'a str,
 1176|   207k|        base: Option<IriRef<&'a str>>,
 1177|   207k|        output: &'a mut O,
 1178|   207k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|   207k|        let mut parser = Self {
 1180|   207k|            iri,
 1181|   207k|            base,
 1182|   207k|            input: ParserInput {
 1183|   207k|                value: iri.chars(),
 1184|   207k|                position: 0,
 1185|   207k|            },
 1186|   207k|            output,
 1187|   207k|            output_positions: IriElementsPositions {
 1188|   207k|                scheme_end: 0,
 1189|   207k|                authority_end: 0,
 1190|   207k|                path_end: 0,
 1191|   207k|                query_end: 0,
 1192|   207k|            },
 1193|   207k|            input_scheme_end: 0,
 1194|   207k|        };
 1195|   207k|        parser.parse_scheme_start()?;
 1196|   207k|        Ok(parser.output_positions)
 1197|   207k|    }
_RNvMsp_Cs8SDT0Q3242W_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE15parse_uncheckedCssoZq86sT9S_5oxttl:
  567|  11.7k|    pub fn parse_unchecked(iri: T) -> Self {
  568|  11.7k|        Iri(IriRef::parse_unchecked(iri))
  569|  11.7k|    }
_RNvMsp_Cs8SDT0Q3242W_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE17resolve_uncheckedCssoZq86sT9S_5oxttl:
  597|   207k|    pub fn resolve_unchecked(&self, iri: &str) -> Iri<String> {
  598|   207k|        Iri(self.0.resolve_unchecked(iri))
  599|   207k|    }
_RNvMsp_Cs8SDT0Q3242W_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE4pathCssoZq86sT9S_5oxttl:
  717|  6.59k|    pub fn path(&self) -> &str {
  718|  6.59k|        self.0.path()
  719|  6.59k|    }
_RNvMsp_Cs8SDT0Q3242W_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE6as_strCssoZq86sT9S_5oxttl:
  651|  4.19k|    pub fn as_str(&self) -> &str {
  652|  4.19k|        self.0.as_str()
  653|  4.19k|    }
_RNvMsp_Cs8SDT0Q3242W_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE7resolveCssoZq86sT9S_5oxttl:
  584|   417k|    pub fn resolve(&self, iri: &str) -> Result<Iri<String>, IriParseError> {
  585|   417k|        Ok(Iri(self.0.resolve(iri)?))
  586|   417k|    }
_RNvXsL_Cs8SDT0Q3242W_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringENtNtCscdEvteftVc2_4core3fmt7Display3fmtCssoZq86sT9S_5oxttl:
  896|  74.6k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  897|  74.6k|        self.0.fmt(f)
  898|  74.6k|    }
_RNvXsg_Cs8SDT0Q3242W_5oxiriINtB5_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringENtNtCscdEvteftVc2_4core3fmt7Display3fmtCssoZq86sT9S_5oxttl:
  417|  74.6k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  418|  74.6k|        self.iri.fmt(f)
  419|  74.6k|    }
_RNvMs10_Cs8SDT0Q3242W_5oxiriNtB6_11ParserInput11starts_withCssoZq86sT9S_5oxttl:
 1156|   386k|    fn starts_with(&self, c: char) -> bool {
 1157|   386k|        self.value.as_str().starts_with(c)
 1158|   386k|    }
_RNvMs10_Cs8SDT0Q3242W_5oxiriNtB6_11ParserInput4nextCssoZq86sT9S_5oxttl:
 1141|  4.19M|    fn next(&mut self) -> Option<char> {
 1142|  4.19M|        if let Some(head) = self.value.next() {
 1143|  3.57M|            self.position += head.len_utf8();
 1144|  3.57M|            Some(head)
 1145|       |        } else {
 1146|   614k|            None
 1147|       |        }
 1148|  4.19M|    }
_RNvMs10_Cs8SDT0Q3242W_5oxiriNtB6_11ParserInput5frontCssoZq86sT9S_5oxttl:
 1151|  2.02M|    fn front(&self) -> Option<char> {
 1152|  2.02M|        self.value.clone().next()
 1153|  2.02M|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCssoZq86sT9S_5oxttl:
 1092|  46.9k|    fn len(&self) -> usize {
 1093|  46.9k|        self.len
 1094|  46.9k|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCssoZq86sT9S_5oxttl:
 1072|   577k|    fn push(&mut self, c: char) {
 1073|   577k|        self.len += c.len_utf8();
 1074|   577k|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCssoZq86sT9S_5oxttl:
 1097|  25.6k|    fn as_str(&self) -> &str {
 1098|  25.6k|        ""
 1099|  25.6k|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCssoZq86sT9S_5oxttl:
 1087|  9.72k|    fn truncate(&mut self, new_len: usize) {
 1088|  9.72k|        self.len = new_len;
 1089|  9.72k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECs23GeP7cdX8Z_5oxrdf:
 1590|  1.76k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1591|  1.76k|        Err(IriParseError { kind })
 1592|  1.76k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_10parse_path0ECs23GeP7cdX8Z_5oxrdf:
 1556|  3.72M|    fn read_url_codepoint_or_echar(
 1557|  3.72M|        &mut self,
 1558|  3.72M|        c: char,
 1559|  3.72M|        valid: impl Fn(char) -> bool,
 1560|  3.72M|    ) -> Result<(), IriParseError> {
 1561|  3.72M|        if UNCHECKED || valid(c) {
 1562|  3.72M|            self.output.push(c);
 1563|  3.72M|            Ok(())
 1564|    937|        } else if c == '%' {
 1565|    924|            self.read_echar()
 1566|       |        } else {
 1567|     13|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|  3.72M|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_11parse_query0ECs23GeP7cdX8Z_5oxrdf:
 1556|  72.8k|    fn read_url_codepoint_or_echar(
 1557|  72.8k|        &mut self,
 1558|  72.8k|        c: char,
 1559|  72.8k|        valid: impl Fn(char) -> bool,
 1560|  72.8k|    ) -> Result<(), IriParseError> {
 1561|  72.8k|        if UNCHECKED || valid(c) {
 1562|  72.1k|            self.output.push(c);
 1563|  72.1k|            Ok(())
 1564|    749|        } else if c == '%' {
 1565|    680|            self.read_echar()
 1566|       |        } else {
 1567|     69|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|  72.8k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_14parse_fragment0ECs23GeP7cdX8Z_5oxrdf:
 1556|   510k|    fn read_url_codepoint_or_echar(
 1557|   510k|        &mut self,
 1558|   510k|        c: char,
 1559|   510k|        valid: impl Fn(char) -> bool,
 1560|   510k|    ) -> Result<(), IriParseError> {
 1561|   510k|        if UNCHECKED || valid(c) {
 1562|   510k|            self.output.push(c);
 1563|   510k|            Ok(())
 1564|    655|        } else if c == '%' {
 1565|    589|            self.read_echar()
 1566|       |        } else {
 1567|     66|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   510k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_15parse_authority0ECs23GeP7cdX8Z_5oxrdf:
 1556|  22.0M|    fn read_url_codepoint_or_echar(
 1557|  22.0M|        &mut self,
 1558|  22.0M|        c: char,
 1559|  22.0M|        valid: impl Fn(char) -> bool,
 1560|  22.0M|    ) -> Result<(), IriParseError> {
 1561|  22.0M|        if UNCHECKED || valid(c) {
 1562|  22.0M|            self.output.push(c);
 1563|  22.0M|            Ok(())
 1564|  1.25k|        } else if c == '%' {
 1565|  1.16k|            self.read_echar()
 1566|       |        } else {
 1567|     86|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|  22.0M|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNvB7_28is_iunreserved_or_sub_delimsECs23GeP7cdX8Z_5oxrdf:
 1556|  22.0M|    fn read_url_codepoint_or_echar(
 1557|  22.0M|        &mut self,
 1558|  22.0M|        c: char,
 1559|  22.0M|        valid: impl Fn(char) -> bool,
 1560|  22.0M|    ) -> Result<(), IriParseError> {
 1561|  22.0M|        if UNCHECKED || valid(c) {
 1562|  22.0M|            self.output.push(c);
 1563|  22.0M|            Ok(())
 1564|    709|        } else if c == '%' {
 1565|    640|            self.read_echar()
 1566|       |        } else {
 1567|     69|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|  22.0M|    }
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10parse_path0Cs23GeP7cdX8Z_5oxrdf:
 1516|  3.72M|                Some(c) => self.read_url_codepoint_or_echar(c, |c| {
 1517|  3.72M|                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1518|  3.72M|                })?,
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0Cs23GeP7cdX8Z_5oxrdf:
 1574|  3.81k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0Cs23GeP7cdX8Z_5oxrdf:
 1575|  3.50k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E11parse_query0Cs23GeP7cdX8Z_5oxrdf:
 1530|  72.8k|                self.read_url_codepoint_or_echar(c, |c| {
 1531|  72.8k|                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?' | '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1532|  72.8k|                })?
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E14parse_fragment0Cs23GeP7cdX8Z_5oxrdf:
 1541|   510k|            self.read_url_codepoint_or_echar(c, |c| {
 1542|   510k|                is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?')
 1543|   510k|            })?;
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E15parse_authority0Cs23GeP7cdX8Z_5oxrdf:
 1364|  22.0M|                    self.read_url_codepoint_or_echar(c, |c| {
 1365|  22.0M|                        is_iunreserved_or_sub_delims(c) || c == ':'
 1366|  22.0M|                    })?;
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE10into_innerCs23GeP7cdX8Z_5oxrdf:
  185|  2.53M|    pub fn into_inner(self) -> T {
  186|  2.53M|        self.iri
  187|  2.53M|    }
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE11is_absoluteCs23GeP7cdX8Z_5oxrdf:
  199|  1.96M|    pub fn is_absolute(&self) -> bool {
  200|  1.96M|        self.positions.scheme_end != 0
  201|  1.96M|    }
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE5parseCs23GeP7cdX8Z_5oxrdf:
   58|  1.96M|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  1.96M|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  1.96M|        Ok(Self { iri, positions })
   61|  1.96M|    }
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefReE11is_absoluteCs23GeP7cdX8Z_5oxrdf:
  199|  68.5k|    pub fn is_absolute(&self) -> bool {
  200|  68.5k|        self.positions.scheme_end != 0
  201|  68.5k|    }
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefReE5parseCs23GeP7cdX8Z_5oxrdf:
   58|  70.3k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  70.3k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  68.5k|        Ok(Self { iri, positions })
   61|  70.3k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCs23GeP7cdX8Z_5oxrdf:
 1372|  2.02M|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1373|  2.02M|        if self.input.starts_with('[') {
 1374|       |            // IP v6
 1375|    352|            let start_position = self.input.position;
 1376|  10.9k|            while let Some(c) = self.input.next() {
 1377|  10.8k|                self.output.push(c);
 1378|  10.8k|                if c == ']' {
 1379|    220|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1380|    220|                    if !UNCHECKED {
 1381|    220|                        if ip.starts_with('v') || ip.starts_with('V') {
 1382|      0|                            self.validate_ip_v_future(ip)?;
 1383|    220|                        } else if let Err(error) = Ipv6Addr::from_str(ip) {
 1384|    220|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1385|      0|                        }
 1386|      0|                    }
 1387|       |
 1388|      0|                    let c = self.input.next();
 1389|      0|                    return match c {
 1390|       |                        Some(':') => {
 1391|      0|                            self.output.push(':');
 1392|      0|                            self.parse_port()
 1393|       |                        }
 1394|       |                        None | Some('/') | Some('?') | Some('#') => {
 1395|      0|                            self.output_positions.authority_end = self.output.len();
 1396|      0|                            self.parse_path_start(c)
 1397|       |                        }
 1398|      0|                        Some(c) => {
 1399|      0|                            if UNCHECKED {
 1400|      0|                                self.output.push(c);
 1401|      0|                                continue;
 1402|       |                            } else {
 1403|      0|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1404|       |                            }
 1405|       |                        }
 1406|       |                    };
 1407|  10.5k|                }
 1408|       |            }
 1409|    132|            if UNCHECKED {
 1410|       |                // We consider it's valid even if it's not finished
 1411|      0|                self.output_positions.authority_end = self.output.len();
 1412|      0|                self.parse_path_start(None)
 1413|       |            } else {
 1414|    132|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1415|       |            }
 1416|       |        } else {
 1417|       |            // Other host
 1418|  24.0M|            loop {
 1419|  24.0M|                let c = self.input.next();
 1420|  24.0M|                match c {
 1421|       |                    Some(':') => {
 1422|  1.68k|                        self.output.push(':');
 1423|  1.68k|                        return self.parse_port();
 1424|       |                    }
 1425|       |                    None | Some('/') | Some('?') | Some('#') => {
 1426|  2.02M|                        self.output_positions.authority_end = self.output.len();
 1427|  2.02M|                        return self.parse_path_start(c);
 1428|       |                    }
 1429|  22.0M|                    Some(c) => self.read_url_codepoint_or_echar(c, is_iunreserved_or_sub_delims)?,
 1430|       |                }
 1431|       |            }
 1432|       |        }
 1433|  2.02M|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCs23GeP7cdX8Z_5oxrdf:
 1485|  2.02M|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1486|  7.16M|        loop {
 1487|  7.16M|            let c = self.input.next();
 1488|  7.16M|            match c {
 1489|       |                None | Some('/') | Some('?') | Some('#') => {
 1490|  3.44M|                    if self.output.as_str().ends_with("/..") {
 1491|      0|                        self.remove_last_segment();
 1492|      0|                        self.remove_last_segment();
 1493|      0|                        self.output.push('/');
 1494|  3.44M|                    } else if self.output.as_str().ends_with("/.") {
 1495|      0|                        self.remove_last_segment();
 1496|      0|                        self.output.push('/');
 1497|  3.44M|                    } else if c == Some('/') {
 1498|  1.41M|                        self.output.push('/');
 1499|  2.02M|                    }
 1500|       |
 1501|  3.44M|                    if c == Some('?') {
 1502|  1.97k|                        self.output_positions.path_end = self.output.len();
 1503|  1.97k|                        self.output.push('?');
 1504|  1.97k|                        return self.parse_query();
 1505|  3.43M|                    } else if c == Some('#') {
 1506|  91.1k|                        self.output_positions.path_end = self.output.len();
 1507|  91.1k|                        self.output_positions.query_end = self.output.len();
 1508|  91.1k|                        self.output.push('#');
 1509|  91.1k|                        return self.parse_fragment();
 1510|  3.34M|                    } else if c.is_none() {
 1511|  1.93M|                        self.output_positions.path_end = self.output.len();
 1512|  1.93M|                        self.output_positions.query_end = self.output.len();
 1513|  1.93M|                        return Ok(());
 1514|  1.41M|                    }
 1515|       |                }
 1516|  3.72M|                Some(c) => self.read_url_codepoint_or_echar(c, |c| {
 1517|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1518|  3.72M|                })?,
 1519|       |            }
 1520|       |        }
 1521|  2.02M|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCs23GeP7cdX8Z_5oxrdf:
 1435|  1.68k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1436|  2.30k|        loop {
 1437|  2.30k|            let c = self.input.next();
 1438|  2.30k|            match c {
 1439|       |                Some('/') | Some('?') | Some('#') | None => {
 1440|  1.21k|                    self.output_positions.authority_end = self.output.len();
 1441|  1.21k|                    return self.parse_path_start(c);
 1442|       |                }
 1443|  1.09k|                Some(c) => {
 1444|  1.09k|                    if UNCHECKED || c.is_ascii_digit() {
 1445|    628|                        self.output.push(c)
 1446|       |                    } else {
 1447|    469|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1448|       |                    }
 1449|       |                }
 1450|       |            }
 1451|       |        }
 1452|  1.68k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCs23GeP7cdX8Z_5oxrdf:
 1571|  4.00k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1572|  4.00k|        let c1 = self.input.next();
 1573|  4.00k|        let c2 = self.input.next();
 1574|  4.00k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1575|  3.50k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1576|       |        {
 1577|  3.36k|            self.output.push('%');
 1578|  3.36k|            self.output.push(c1.unwrap());
 1579|  3.36k|            self.output.push(c2.unwrap());
 1580|  3.36k|            Ok(())
 1581|       |        } else {
 1582|    636|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1583|    636|                Some('%'),
 1584|    636|                c1,
 1585|    636|                c2,
 1586|    636|            ]))
 1587|       |        }
 1588|  4.00k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCs23GeP7cdX8Z_5oxrdf:
 1523|  2.48k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1524|  75.1k|        while let Some(c) = self.input.next() {
 1525|  73.1k|            if c == '#' {
 1526|    308|                self.output_positions.query_end = self.output.len();
 1527|    308|                self.output.push('#');
 1528|    308|                return self.parse_fragment();
 1529|       |            } else {
 1530|  72.8k|                self.read_url_codepoint_or_echar(c, |c| {
 1531|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?' | '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1532|  72.8k|                })?
 1533|       |            }
 1534|       |        }
 1535|  2.00k|        self.output_positions.query_end = self.output.len();
 1536|  2.00k|        Ok(())
 1537|  2.48k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCs23GeP7cdX8Z_5oxrdf:
 1213|  2.03M|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|  10.1M|        loop {
 1215|  10.1M|            let c = self.input.next();
 1216|  10.1M|            match c {
 1217|  10.1M|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|  8.13M|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|  2.03M|                    self.output.push(':');
 1222|  2.03M|                    self.output_positions.scheme_end = self.output.len();
 1223|  2.03M|                    self.input_scheme_end = self.input.position;
 1224|  2.03M|                    return if self.input.starts_with('/') {
 1225|  2.02M|                        self.input.next();
 1226|  2.02M|                        self.output.push('/');
 1227|  2.02M|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  4.44k|                        self.output_positions.authority_end = self.output.len();
 1230|  4.44k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|      0|                    self.input = ParserInput {
 1235|      0|                        value: self.iri.chars(),
 1236|      0|                        position: 0,
 1237|      0|                    }; // reset
 1238|      0|                    self.output.clear();
 1239|      0|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|  2.03M|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCs23GeP7cdX8Z_5oxrdf:
 1539|  92.0k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1540|   602k|        while let Some(c) = self.input.next() {
 1541|   510k|            self.read_url_codepoint_or_echar(c, |c| {
 1542|       |                is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?')
 1543|   510k|            })?;
 1544|       |        }
 1545|  91.9k|        Ok(())
 1546|  92.0k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCs23GeP7cdX8Z_5oxrdf:
 1346|  2.02M|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1347|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1348|  24.1M|        loop {
 1349|  24.1M|            let c = self.input.next();
 1350|  24.1M|            match c {
 1351|       |                Some('@') => {
 1352|  1.33k|                    self.output.push('@');
 1353|  1.33k|                    return self.parse_host();
 1354|       |                }
 1355|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1356|  2.02M|                    self.input = ParserInput {
 1357|  2.02M|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1358|  2.02M|                        position: self.input_scheme_end + 2,
 1359|  2.02M|                    };
 1360|  2.02M|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1361|  2.02M|                    return self.parse_host();
 1362|       |                }
 1363|  22.0M|                Some(c) => {
 1364|  22.0M|                    self.read_url_codepoint_or_echar(c, |c| {
 1365|       |                        is_iunreserved_or_sub_delims(c) || c == ':'
 1366|  22.0M|                    })?;
 1367|       |                }
 1368|       |            }
 1369|       |        }
 1370|  2.02M|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCs23GeP7cdX8Z_5oxrdf:
 1454|  2.02M|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1455|  2.02M|        match c {
 1456|       |            None => {
 1457|  3.07k|                self.output_positions.path_end = self.output.len();
 1458|  3.07k|                self.output_positions.query_end = self.output.len();
 1459|  3.07k|                Ok(())
 1460|       |            }
 1461|       |            Some('?') => {
 1462|    507|                self.output_positions.path_end = self.output.len();
 1463|    507|                self.output.push('?');
 1464|    507|                self.parse_query()
 1465|       |            }
 1466|       |            Some('#') => {
 1467|    607|                self.output_positions.path_end = self.output.len();
 1468|    607|                self.output_positions.query_end = self.output.len();
 1469|    607|                self.output.push('#');
 1470|    607|                self.parse_fragment()
 1471|       |            }
 1472|       |            Some('/') => {
 1473|  2.02M|                self.output.push('/');
 1474|  2.02M|                self.parse_path()
 1475|       |            }
 1476|      0|            Some(c) => {
 1477|      0|                self.read_url_codepoint_or_echar(c, |c| {
 1478|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1479|      0|                })?;
 1480|      0|                self.parse_path()
 1481|       |            }
 1482|       |        }
 1483|  2.02M|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCs23GeP7cdX8Z_5oxrdf:
 1199|  2.03M|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|  2.03M|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|      2|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|      2|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|  2.03M|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|      0|            _ => self.parse_relative(),
 1210|       |        }
 1211|  2.03M|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCs23GeP7cdX8Z_5oxrdf:
 1245|  2.02M|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|  2.02M|        if self.input.starts_with('/') {
 1247|  2.02M|            self.input.next();
 1248|  2.02M|            self.output.push('/');
 1249|  2.02M|            self.parse_authority()
 1250|       |        } else {
 1251|  4.05k|            self.output_positions.authority_end = self.output.len() - 1;
 1252|  4.05k|            self.parse_path()
 1253|       |        }
 1254|  2.02M|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCs23GeP7cdX8Z_5oxrdf:
 1174|  2.03M|    fn parse(
 1175|  2.03M|        iri: &'a str,
 1176|  2.03M|        base: Option<IriRef<&'a str>>,
 1177|  2.03M|        output: &'a mut O,
 1178|  2.03M|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|  2.03M|        let mut parser = Self {
 1180|  2.03M|            iri,
 1181|  2.03M|            base,
 1182|  2.03M|            input: ParserInput {
 1183|  2.03M|                value: iri.chars(),
 1184|  2.03M|                position: 0,
 1185|  2.03M|            },
 1186|  2.03M|            output,
 1187|  2.03M|            output_positions: IriElementsPositions {
 1188|  2.03M|                scheme_end: 0,
 1189|  2.03M|                authority_end: 0,
 1190|  2.03M|                path_end: 0,
 1191|  2.03M|                query_end: 0,
 1192|  2.03M|            },
 1193|  2.03M|            input_scheme_end: 0,
 1194|  2.03M|        };
 1195|  2.03M|        parser.parse_scheme_start()?;
 1196|  2.03M|        Ok(parser.output_positions)
 1197|  2.03M|    }
_RNvMsp_Cs8SDT0Q3242W_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE10into_innerCs23GeP7cdX8Z_5oxrdf:
  665|  2.53M|    pub fn into_inner(self) -> T {
  666|  2.53M|        self.0.into_inner()
  667|  2.53M|    }
_RNvMsp_Cs8SDT0Q3242W_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE5parseCs23GeP7cdX8Z_5oxrdf:
  556|  1.96M|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|  1.96M|        IriRef::parse(iri)?.try_into()
  558|  1.96M|    }
_RNvMsp_Cs8SDT0Q3242W_5oxiriINtB5_3IriReE5parseCs23GeP7cdX8Z_5oxrdf:
  556|  70.3k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|  70.3k|        IriRef::parse(iri)?.try_into()
  558|  70.3k|    }
_RNvXsV_Cs8SDT0Q3242W_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringEINtNtCscdEvteftVc2_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCs23GeP7cdX8Z_5oxrdf:
  968|  1.96M|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  969|  1.96M|        if iri.is_absolute() {
  970|  1.96M|            Ok(Self(iri))
  971|       |        } else {
  972|      0|            Err(IriParseError {
  973|      0|                kind: IriParseErrorKind::NoScheme,
  974|      0|            })
  975|       |        }
  976|  1.96M|    }
_RNvXsV_Cs8SDT0Q3242W_5oxiriINtB5_3IriReEINtNtCscdEvteftVc2_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCs23GeP7cdX8Z_5oxrdf:
  968|  68.5k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  969|  68.5k|        if iri.is_absolute() {
  970|  68.5k|            Ok(Self(iri))
  971|       |        } else {
  972|      0|            Err(IriParseError {
  973|      0|                kind: IriParseErrorKind::NoScheme,
  974|      0|            })
  975|       |        }
  976|  68.5k|    }
_RNvMs10_Cs8SDT0Q3242W_5oxiriNtB6_11ParserInput11starts_withCs23GeP7cdX8Z_5oxrdf:
 1156|  6.08M|    fn starts_with(&self, c: char) -> bool {
 1157|  6.08M|        self.value.as_str().starts_with(c)
 1158|  6.08M|    }
_RNvMs10_Cs8SDT0Q3242W_5oxiriNtB6_11ParserInput4nextCs23GeP7cdX8Z_5oxrdf:
 1141|  70.2M|    fn next(&mut self) -> Option<char> {
 1142|  70.2M|        if let Some(head) = self.value.next() {
 1143|  68.2M|            self.position += head.len_utf8();
 1144|  68.2M|            Some(head)
 1145|       |        } else {
 1146|  2.03M|            None
 1147|       |        }
 1148|  70.2M|    }
_RNvMs10_Cs8SDT0Q3242W_5oxiriNtB6_11ParserInput5frontCs23GeP7cdX8Z_5oxrdf:
 1151|  2.03M|    fn front(&self) -> Option<char> {
 1152|  2.03M|        self.value.clone().next()
 1153|  2.03M|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCs23GeP7cdX8Z_5oxrdf:
 1092|  8.13M|    fn len(&self) -> usize {
 1093|  8.13M|        self.len
 1094|  8.13M|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCs23GeP7cdX8Z_5oxrdf:
 1072|  66.2M|    fn push(&mut self, c: char) {
 1073|  66.2M|        self.len += c.len_utf8();
 1074|  66.2M|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCs23GeP7cdX8Z_5oxrdf:
 1097|  6.88M|    fn as_str(&self) -> &str {
 1098|  6.88M|        ""
 1099|  6.88M|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCs23GeP7cdX8Z_5oxrdf:
 1087|  2.02M|    fn truncate(&mut self, new_len: usize) {
 1088|  2.02M|        self.len = new_len;
 1089|  2.02M|    }
_RNvXsW_Cs8SDT0Q3242W_5oxiriNtB5_13IriParseErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
 1003|  35.1k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1004|  35.1k|        match &self.kind {
 1005|    476|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
 1006|    828|            IriParseErrorKind::InvalidHostCharacter(c) => {
 1007|    828|                write!(f, "Invalid character '{c}' in host")
 1008|       |            }
 1009|  1.88k|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({e})"),
 1010|    707|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{c}'"),
 1011|  28.4k|            IriParseErrorKind::InvalidIriCodePoint(c) => {
 1012|  28.4k|                write!(f, "Invalid IRI code point '{c}'")
 1013|       |            }
 1014|  2.80k|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
 1015|  2.80k|                f,
 1016|  2.80k|                "Invalid IRI percent encoding '{}'",
 1017|  2.80k|                cs.iter().flatten().cloned().collect::<String>()
 1018|  2.80k|            ),
 1019|       |        }
 1020|  35.1k|    }
_RNvCs8SDT0Q3242W_5oxiri28is_iunreserved_or_sub_delims:
 1634|  49.6M|fn is_iunreserved_or_sub_delims(c: char) -> bool {
 1635|  49.6M|    matches!(c,
 1636|  41.4M|        'a'..='z'
 1637|   643k|        | 'A'..='Z'
 1638|  2.51M|        | '0'..='9'
 1639|       |        | '!'
 1640|       |        | '$'
 1641|       |        | '&'
 1642|       |        | '\''
 1643|       |        | '('
 1644|       |        | ')'
 1645|       |        | '*'
 1646|       |        | '+'
 1647|       |        | ','
 1648|       |        | '-'
 1649|       |        | '.'
 1650|       |        | ';'
 1651|       |        | '='
 1652|       |        | '_'
 1653|       |        | '~'
 1654|  33.1k|        | '\u{A0}'..='\u{D7FF}'
 1655|  5.23k|        | '\u{F900}'..='\u{FDCF}'
 1656|  3.73k|        | '\u{FDF0}'..='\u{FFEF}'
 1657|  3.73k|        | '\u{10000}'..='\u{1FFFD}'
 1658|  3.73k|        | '\u{20000}'..='\u{2FFFD}'
 1659|  3.73k|        | '\u{30000}'..='\u{3FFFD}'
 1660|  3.73k|        | '\u{40000}'..='\u{4FFFD}'
 1661|    980|        | '\u{50000}'..='\u{5FFFD}'
 1662|    948|        | '\u{60000}'..='\u{6FFFD}'
 1663|    948|        | '\u{70000}'..='\u{7FFFD}'
 1664|    948|        | '\u{80000}'..='\u{8FFFD}'
 1665|    940|        | '\u{90000}'..='\u{9FFFD}'
 1666|    940|        | '\u{A0000}'..='\u{AFFFD}'
 1667|      6|        | '\u{B0000}'..='\u{BFFFD}'
 1668|      0|        | '\u{C0000}'..='\u{CFFFD}'
 1669|      0|        | '\u{D0000}'..='\u{DFFFD}'
 1670|      0|        | '\u{E1000}'..='\u{EFFFD}'
 1671|       |    )
 1672|  49.6M|}

_RNvMNtCscbn08k08Vyj_10ppv_lite864softINtB2_2x2INtNtNtNtB4_6x86_644sse24avx212u32x4x2_avx2NtBP_4NoNIENtBN_2G0E3newCs1pj3KKf4bzR_11rand_chacha:
   15|  5.26M|    pub fn new(xs: [W; 2]) -> Self {
   16|  5.26M|        x2(xs, PhantomData)
   17|  5.26M|    }
_RNvXsJ_NtCscbn08k08Vyj_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCscdEvteftVc2_4core3ops3bit6BitXor6bitxorCs1pj3KKf4bzR_11rand_chacha:
   24|  1.84M|            fn $fn(self, rhs: Self) -> Self::Output {
   25|  1.84M|                x2::new([self.0[0].$fn(rhs.0[0]), self.0[1].$fn(rhs.0[1])])
   26|  1.84M|            }
_RNvXsP_NtCscbn08k08Vyj_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCscdEvteftVc2_4core3ops5arith9AddAssign10add_assignCs1pj3KKf4bzR_11rand_chacha:
   34|  1.84M|            fn $fn_assign(&mut self, rhs: Self) {
   35|  1.84M|                (self.0[0]).$fn_assign(rhs.0[0]);
   36|  1.84M|                (self.0[1]).$fn_assign(rhs.0[1]);
   37|  1.84M|            }
_RNvXs_NtCscbn08k08Vyj_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right16Cs1pj3KKf4bzR_11rand_chacha:
   44|   461k|        fn $fn(self) -> Self {
   45|   461k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   46|   461k|        }
_RNvXs_NtCscbn08k08Vyj_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right20Cs1pj3KKf4bzR_11rand_chacha:
   44|   461k|        fn $fn(self) -> Self {
   45|   461k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   46|   461k|        }
_RNvXs_NtCscbn08k08Vyj_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right24Cs1pj3KKf4bzR_11rand_chacha:
   44|   461k|        fn $fn(self) -> Self {
   45|   461k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   46|   461k|        }
_RNvXs_NtCscbn08k08Vyj_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right25Cs1pj3KKf4bzR_11rand_chacha:
   44|   461k|        fn $fn(self) -> Self {
   45|   461k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   46|   461k|        }
_RNvXsg_NtCscbn08k08Vyj_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words1230Cs1pj3KKf4bzR_11rand_chacha:
  210|   461k|    fn shuffle_lane_words1230(self) -> Self {
  211|   461k|        Self::new([
  212|   461k|            self.0[0].shuffle_lane_words1230(),
  213|   461k|            self.0[1].shuffle_lane_words1230(),
  214|   461k|        ])
  215|   461k|    }
_RNvXsg_NtCscbn08k08Vyj_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words2301Cs1pj3KKf4bzR_11rand_chacha:
  203|   461k|    fn shuffle_lane_words2301(self) -> Self {
  204|   461k|        Self::new([
  205|   461k|            self.0[0].shuffle_lane_words2301(),
  206|   461k|            self.0[1].shuffle_lane_words2301(),
  207|   461k|        ])
  208|   461k|    }
_RNvXsg_NtCscbn08k08Vyj_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words3012Cs1pj3KKf4bzR_11rand_chacha:
  217|   461k|    fn shuffle_lane_words3012(self) -> Self {
  218|   461k|        Self::new([
  219|   461k|            self.0[0].shuffle_lane_words3012(),
  220|   461k|            self.0[1].shuffle_lane_words3012(),
  221|   461k|        ])
  222|   461k|    }

_RINvYINtNtCscbn08k08Vyj_10ppv_lite866x86_6410SseMachineNtB6_5YesS3NtB6_5YesS4NtB6_4NoNIENtNtB8_5types7Machine7read_leINtNtB6_4sse210u32x4_sse2BR_B12_B1d_EECs1pj3KKf4bzR_11rand_chacha:
  259|    302|    fn read_le<V>(self, input: &[u8]) -> V
  260|    302|    where
  261|    302|        V: StoreBytes,
  262|    302|    {
  263|    302|        unsafe { V::unsafe_read_le(input) }
  264|    302|    }
_RINvYINtNtCscbn08k08Vyj_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine3vecINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EAmj4_ECs1pj3KKf4bzR_11rand_chacha:
  251|  38.4k|    fn vec<V, A>(self, a: A) -> V
  252|  38.4k|    where
  253|  38.4k|        V: MultiLane<A>,
  254|  38.4k|    {
  255|  38.4k|        V::from_lanes(a)
  256|  38.4k|    }
_RINvYINtNtCscbn08k08Vyj_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec128_storageINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EECs1pj3KKf4bzR_11rand_chacha:
  246|   346k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|   346k|        unsafe { V::unpack(s) }
  248|   346k|    }
_RINvYINtNtCscbn08k08Vyj_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec512_storageINtNtB8_4soft2x2INtNtNtB6_4sse24avx212u32x4x2_avx2BS_ENtB2b_2G0EECs1pj3KKf4bzR_11rand_chacha:
  246|  38.4k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|  38.4k|        unsafe { V::unpack(s) }
  248|  38.4k|    }

_RNvXNtCscbn08k08Vyj_10ppv_lite866x86_64INtB2_10SseMachineNtB2_5YesS3NtB2_5YesS4NtB2_4NoNIENtNtB4_5types7Machine8instanceCs1pj3KKf4bzR_11rand_chacha:
   65|    151|    unsafe fn instance() -> Self {
   66|    151|        SseMachine(PhantomData)
   67|    151|    }
_RNvXs_NtCscbn08k08Vyj_10ppv_lite866x86_64INtB4_11Avx2MachineNtB4_4NoNIENtNtB6_5types7Machine8instanceCs1pj3KKf4bzR_11rand_chacha:
   93|  38.4k|    unsafe fn instance() -> Self {
   94|  38.4k|        Avx2Machine(PhantomData)
   95|  38.4k|    }
_RNvNtCs1pj3KKf4bzR_11rand_chacha4guts11refill_wide:
  252|  38.4k|        $($pub$(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  253|  38.4k|            #[inline(always)]
  254|  38.4k|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  255|  38.4k|            use std::arch::x86_64::*;
  256|  38.4k|            #[target_feature(enable = "avx2")]
  257|  38.4k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  258|  38.4k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  259|  38.4k|                _mm256_zeroupper();
  260|  38.4k|                ret
  261|  38.4k|            }
  262|  38.4k|            #[target_feature(enable = "avx")]
  263|  38.4k|            #[target_feature(enable = "sse4.1")]
  264|  38.4k|            #[target_feature(enable = "ssse3")]
  265|  38.4k|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  266|  38.4k|                let ret = fn_impl($crate::x86_64::AVX::instance(), $($arg),*);
  267|  38.4k|                _mm256_zeroupper();
  268|  38.4k|                ret
  269|  38.4k|            }
  270|  38.4k|            #[target_feature(enable = "sse4.1")]
  271|  38.4k|            #[target_feature(enable = "ssse3")]
  272|  38.4k|            unsafe fn impl_sse41($($arg: $argty),*) -> $ret {
  273|  38.4k|                fn_impl($crate::x86_64::SSE41::instance(), $($arg),*)
  274|  38.4k|            }
  275|  38.4k|            #[target_feature(enable = "ssse3")]
  276|  38.4k|            unsafe fn impl_ssse3($($arg: $argty),*) -> $ret {
  277|  38.4k|                fn_impl($crate::x86_64::SSSE3::instance(), $($arg),*)
  278|  38.4k|            }
  279|  38.4k|            #[target_feature(enable = "sse2")]
  280|  38.4k|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  281|  38.4k|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  282|  38.4k|            }
  283|  38.4k|            unsafe {
  284|  38.4k|                if is_x86_feature_detected!("avx2") {
  285|  38.4k|                    impl_avx2($($arg),*)
  286|      0|                } else if is_x86_feature_detected!("avx") {
  287|      0|                    impl_avx($($arg),*)
  288|      0|                } else if is_x86_feature_detected!("sse4.1") {
  289|      0|                    impl_sse41($($arg),*)
  290|      0|                } else if is_x86_feature_detected!("ssse3") {
  291|      0|                    impl_ssse3($($arg),*)
  292|      0|                } else if is_x86_feature_detected!("sse2") {
  293|      0|                    impl_sse2($($arg),*)
  294|       |                } else {
  295|      0|                    unimplemented!()
  296|       |                }
  297|       |            }
  298|       |        }
_RNvNvNtCs1pj3KKf4bzR_11rand_chacha4guts11refill_wide9impl_avx2:
  257|  38.4k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  258|  38.4k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  259|  38.4k|                _mm256_zeroupper();
  260|  38.4k|                ret
  261|  38.4k|            }
_RNvNtCs1pj3KKf4bzR_11rand_chacha4guts11init_chacha:
  335|    151|        $($pub $(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  336|    151|            #[inline(always)]
  337|    151|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  338|    151|            use std::arch::x86_64::*;
  339|    151|            #[target_feature(enable = "avx")]
  340|    151|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  341|    151|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  342|    151|            }
  343|    151|            #[target_feature(enable = "sse2")]
  344|    151|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  345|    151|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  346|    151|            }
  347|    151|            unsafe {
  348|    151|                if is_x86_feature_detected!("avx") {
  349|    151|                    impl_avx($($arg),*)
  350|      0|                } else if is_x86_feature_detected!("sse2") {
  351|      0|                    impl_sse2($($arg),*)
  352|       |                } else {
  353|      0|                    unimplemented!()
  354|       |                }
  355|       |            }
  356|       |        }
_RNvNvNtCs1pj3KKf4bzR_11rand_chacha4guts11init_chacha8impl_avx:
  340|    151|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  341|    151|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  342|    151|            }
_RNvXs2_NtCscbn08k08Vyj_10ppv_lite866x86_64NtB5_14vec128_storageINtNtCscdEvteftVc2_4core7convert4FromAmj4_E4from:
  132|    151|    fn from(u32x4: [u32; 4]) -> Self {
  133|    151|        vec128_storage { u32x4 }
  134|    151|    }

_RNvMNtNtNtCscbn08k08Vyj_10ppv_lite866x86_644sse24avx2INtB2_12u32x4x2_avx2NtB6_4NoNIE3newCs1pj3KKf4bzR_11rand_chacha:
 1398|  14.2M|        fn new(x: __m256i) -> Self {
 1399|  14.2M|            Self { x, ni: PhantomData }
 1400|  14.2M|        }
_RNvMsZ_NtNtCscbn08k08Vyj_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIE3newCs1pj3KKf4bzR_11rand_chacha:
   66|  2.15M|            fn new(x: __m128i) -> Self {
   67|  2.15M|                $vec {
   68|  2.15M|                    x,
   69|  2.15M|                    s3: PhantomData,
   70|  2.15M|                    s4: PhantomData,
   71|  2.15M|                    ni: PhantomData,
   72|  2.15M|                }
   73|  2.15M|            }
_RNvXs0_NtNtNtCscbn08k08Vyj_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types5StoreNtB9_14vec256_storageE6unpackCs1pj3KKf4bzR_11rand_chacha:
 1406|  76.9k|        unsafe fn unpack(p: vec256_storage) -> Self {
 1407|  76.9k|            Self::new(p.avx)
 1408|  76.9k|        }
_RNvXs10_NtNtCscbn08k08Vyj_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes14unsafe_read_leCs1pj3KKf4bzR_11rand_chacha:
   81|    302|            unsafe fn unsafe_read_le(input: &[u8]) -> Self {
   82|    302|                assert_eq!(input.len(), 16);
   83|    302|                Self::new(_mm_loadu_si128(input.as_ptr() as *const _))
   84|    302|            }
_RNvXs10_NtNtCscbn08k08Vyj_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes8write_leCs1pj3KKf4bzR_11rand_chacha:
   91|   615k|            fn write_le(self, out: &mut [u8]) {
   92|   615k|                assert_eq!(out.len(), 16);
   93|   615k|                unsafe { _mm_storeu_si128(out.as_mut_ptr() as *mut _, self.x) }
   94|   615k|            }
_RNvXs20_NtNtCscbn08k08Vyj_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtNtCscdEvteftVc2_4core3ops5arith3Add3addCs1pj3KKf4bzR_11rand_chacha:
   19|   615k|            fn $fn(self, rhs: Self) -> Self::Output {
   20|   615k|                Self::new(unsafe { $impl_fn(self.x, rhs.x) })
   21|   615k|            }
_RNvXs2_NtNtNtCscbn08k08Vyj_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E10from_lanesCs1pj3KKf4bzR_11rand_chacha:
 1443|   307k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 2]) -> Self {
 1444|   307k|            Self::new(unsafe { _mm256_setr_m128i(x[0].x, x[1].x) })
 1445|   307k|        }
_RNvXs2_NtNtNtCscbn08k08Vyj_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E8to_lanesCs1pj3KKf4bzR_11rand_chacha:
 1434|   307k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 2] {
 1435|   307k|            unsafe {
 1436|   307k|                [
 1437|   307k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 0)),
 1438|   307k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 1)),
 1439|   307k|                ]
 1440|   307k|            }
 1441|   307k|        }
_RNvXs6_NtNtCscbn08k08Vyj_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E10from_lanesCs1pj3KKf4bzR_11rand_chacha:
  333|  38.4k|    fn from_lanes(xs: [u32; 4]) -> Self {
  334|  38.4k|        unsafe {
  335|  38.4k|            let mut x = _mm_cvtsi64_si128((xs[0] as u64 | ((xs[1] as u64) << 32)) as i64);
  336|  38.4k|            x = _mm_insert_epi64(x, (xs[2] as u64 | ((xs[3] as u64) << 32)) as i64, 1);
  337|  38.4k|            Self::new(x)
  338|  38.4k|        }
  339|  38.4k|    }
_RNvXs6_NtNtCscbn08k08Vyj_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E8to_lanesCs1pj3KKf4bzR_11rand_chacha:
  325|   153k|    fn to_lanes(self) -> [u32; 4] {
  326|   153k|        unsafe {
  327|   153k|            let x = _mm_cvtsi128_si64(self.x) as u64;
  328|   153k|            let y = _mm_extract_epi64(self.x, 1) as u64;
  329|   153k|            [x as u32, (x >> 32) as u32, y as u32, (y >> 32) as u32]
  330|   153k|        }
  331|   153k|    }
_RNvXs6_NtNtNtCscbn08k08Vyj_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right16Cs1pj3KKf4bzR_11rand_chacha:
 1474|   923k|            fn $name(self) -> Self {
 1475|   923k|                Self::new(unsafe {
 1476|   923k|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1477|   923k|                })
 1478|   923k|            }
_RNvXs6_NtNtNtCscbn08k08Vyj_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right20Cs1pj3KKf4bzR_11rand_chacha:
 1484|   923k|            fn $name(self) -> Self {
 1485|   923k|                Self::new(unsafe {
 1486|   923k|                    _mm256_or_si256(
 1487|   923k|                        _mm256_srli_epi32(self.x, $i as i32),
 1488|   923k|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1489|   923k|                    )
 1490|   923k|                })
 1491|   923k|            }
_RNvXs6_NtNtNtCscbn08k08Vyj_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right24Cs1pj3KKf4bzR_11rand_chacha:
 1474|   923k|            fn $name(self) -> Self {
 1475|   923k|                Self::new(unsafe {
 1476|   923k|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1477|   923k|                })
 1478|   923k|            }
_RNvXs6_NtNtNtCscbn08k08Vyj_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right25Cs1pj3KKf4bzR_11rand_chacha:
 1484|   923k|            fn $name(self) -> Self {
 1485|   923k|                Self::new(unsafe {
 1486|   923k|                    _mm256_or_si256(
 1487|   923k|                        _mm256_srli_epi32(self.x, $i as i32),
 1488|   923k|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1489|   923k|                    )
 1490|   923k|                })
 1491|   923k|            }
_RNvXsX_NtNtCscbn08k08Vyj_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types5StoreNtB7_14vec128_storageE6unpackCs1pj3KKf4bzR_11rand_chacha:
   54|   346k|            unsafe fn unpack(x: vec128_storage) -> Self {
   55|   346k|                Self::new(x.sse2)
   56|   346k|            }
_RNvXsc_NtNtNtCscbn08k08Vyj_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words1230Cs1pj3KKf4bzR_11rand_chacha:
 1586|   923k|        fn shuffle_lane_words1230(self) -> Self {
 1587|   923k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b1001_0011) })
 1588|   923k|        }
_RNvXsc_NtNtNtCscbn08k08Vyj_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words2301Cs1pj3KKf4bzR_11rand_chacha:
 1590|   923k|        fn shuffle_lane_words2301(self) -> Self {
 1591|   923k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0100_1110) })
 1592|   923k|        }
_RNvXsc_NtNtNtCscbn08k08Vyj_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words3012Cs1pj3KKf4bzR_11rand_chacha:
 1594|   923k|        fn shuffle_lane_words3012(self) -> Self {
 1595|   923k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0011_1001) })
 1596|   923k|        }
_RNvXse_NtNtNtCscbn08k08Vyj_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types5StoreNtB9_14vec512_storageE6unpackCs1pj3KKf4bzR_11rand_chacha:
 1606|  38.4k|        unsafe fn unpack(p: vec512_storage) -> Self {
 1607|  38.4k|            Self::new([
 1608|  38.4k|                u32x4x2_avx2::unpack(p.avx[0]),
 1609|  38.4k|                u32x4x2_avx2::unpack(p.avx[1]),
 1610|  38.4k|            ])
 1611|  38.4k|        }
_RNvXsf_NtNtNtCscbn08k08Vyj_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E10from_lanesCs1pj3KKf4bzR_11rand_chacha:
 1621|   153k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 4]) -> Self {
 1622|   153k|            let ab = u32x4x2_avx2::from_lanes([x[0], x[1]]);
 1623|   153k|            let cd = u32x4x2_avx2::from_lanes([x[2], x[3]]);
 1624|   153k|            Self::new([ab, cd])
 1625|   153k|        }
_RNvXsf_NtNtNtCscbn08k08Vyj_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E8to_lanesCs1pj3KKf4bzR_11rand_chacha:
 1615|   153k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 4] {
 1616|   153k|            let [a, b] = self.0[0].to_lanes();
 1617|   153k|            let [c, d] = self.0[1].to_lanes();
 1618|   153k|            [a, b, c, d]
 1619|   153k|        }
_RNvXsl_NtNtCscbn08k08Vyj_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE6insertCs1pj3KKf4bzR_11rand_chacha:
  525|   538k|    fn insert(self, v: u32, i: u32) -> Self {
  526|   538k|        Self::new(unsafe {
  527|   538k|            match i {
  528|   269k|                0 => _mm_insert_epi32(self.x, v as i32, 0),
  529|   269k|                1 => _mm_insert_epi32(self.x, v as i32, 1),
  530|      0|                2 => _mm_insert_epi32(self.x, v as i32, 2),
  531|      0|                3 => _mm_insert_epi32(self.x, v as i32, 3),
  532|      0|                _ => unreachable!(),
  533|       |            }
  534|       |        })
  535|   538k|    }
_RNvXsl_NtNtCscbn08k08Vyj_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE7extractCs1pj3KKf4bzR_11rand_chacha:
  521|   153k|    fn extract(self, i: u32) -> u32 {
  522|   153k|        self.to_lanes()[i as usize]
  523|   153k|    }
_RNvXst_NtNtNtCscbn08k08Vyj_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCscdEvteftVc2_4core3ops5arith9AddAssign10add_assignCs1pj3KKf4bzR_11rand_chacha:
 1531|  3.69M|                fn $assign_fn(&mut self, rhs: Self) {
 1532|  3.69M|                    *self = self.$bin_fn(rhs);
 1533|  3.69M|                }
_RNvXsu_NtNtNtCscbn08k08Vyj_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCscdEvteftVc2_4core3ops3bit6BitXor6bitxorCs1pj3KKf4bzR_11rand_chacha:
 1547|  3.69M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1548|  3.69M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1549|  3.69M|                }
_RNvXsy_NtNtNtCscbn08k08Vyj_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCscdEvteftVc2_4core3ops5arith3Add3addCs1pj3KKf4bzR_11rand_chacha:
 1547|  3.69M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1548|  3.69M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1549|  3.69M|                }
_RNvXsY_NtNtCscbn08k08Vyj_10ppv_lite866x86_644sse2NtB7_14vec128_storageINtNtCscdEvteftVc2_4core7convert4FromINtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEE4fromCs1pj3KKf4bzR_11rand_chacha:
   60|  38.7k|            fn from(x: $vec<S3, S4, NI>) -> Self {
   61|  38.7k|                vec128_storage { sse2: x.x }
   62|  38.7k|            }
_RNvXsj_NtNtNtCscbn08k08Vyj_10ppv_lite866x86_644sse24avx2NtB9_14vec512_storageINtNtCscdEvteftVc2_4core7convert4FromINtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EE4fromCs1pj3KKf4bzR_11rand_chacha:
 1687|  38.4k|        fn from(x: u32x4x4_avx2<NI>) -> Self {
 1688|  38.4k|            Self {
 1689|  38.4k|                avx: [
 1690|  38.4k|                    vec256_storage { avx: x.0[0].x },
 1691|  38.4k|                    vec256_storage { avx: x.0[1].x },
 1692|  38.4k|                ],
 1693|  38.4k|            }
 1694|  38.4k|        }

_RINvXs2_NtNtCs4jiSbG93Pii_4rand13distributions7integerNtB8_8StandardINtNtB8_12distribution12DistributionoE6sampleNtNtNtBa_4rngs6thread9ThreadRngECssoZq86sT9S_5oxttl:
   51|   615k|    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u128 {
   52|   615k|        // Use LE; we explicitly generate one value before the next.
   53|   615k|        let x = u128::from(rng.next_u64());
   54|   615k|        let y = u128::from(rng.next_u64());
   55|   615k|        (y << 64) | x
   56|   615k|    }

_RINvCs4jiSbG93Pii_4rand6randomoECssoZq86sT9S_5oxttl:
  183|   615k|pub fn random<T>() -> T
  184|   615k|where Standard: Distribution<T> {
  185|   615k|    thread_rng().gen()
  186|   615k|}

_RINvYNtNtNtCs4jiSbG93Pii_4rand4rngs6thread9ThreadRngNtNtB9_3rng3Rng3genoECssoZq86sT9S_5oxttl:
   93|   615k|    fn gen<T>(&mut self) -> T
   94|   615k|    where Standard: Distribution<T> {
   95|   615k|        Standard.sample(self)
   96|   615k|    }

_RNvXs_NtNtNtCs4jiSbG93Pii_4rand4rngs7adapter9reseedingINtB4_12ReseedingRngNtNtCs1pj3KKf4bzR_11rand_chacha6chacha12ChaCha12CoreNtNtCs5oKiaLr02aj_9rand_core2os5OsRngENtB24_7RngCore8next_u64CssoZq86sT9S_5oxttl:
  124|  1.23M|    fn next_u64(&mut self) -> u64 {
  125|  1.23M|        self.0.next_u64()
  126|  1.23M|    }
_RNvNtNtNtNtCs4jiSbG93Pii_4rand4rngs7adapter9reseeding4fork16get_fork_counter:
  307|  38.4k|    pub fn get_fork_counter() -> usize {
  308|  38.4k|        RESEEDING_RNG_FORK_COUNTER.load(Ordering::Relaxed)
  309|  38.4k|    }
_RNvNtNtNtNtCs4jiSbG93Pii_4rand4rngs7adapter9reseeding4fork21register_fork_handler:
  317|      1|    pub fn register_fork_handler() {
  318|      1|        static REGISTER: Once = Once::new();
  319|      1|        REGISTER.call_once(|| {
  320|       |            // Bump the counter before and after forking (see #1169):
  321|       |            let ret = unsafe { libc::pthread_atfork(
  322|       |                Some(fork_handler),
  323|       |                Some(fork_handler),
  324|       |                Some(fork_handler),
  325|       |            ) };
  326|       |            if ret != 0 {
  327|       |                panic!("libc::pthread_atfork failed with code {}", ret);
  328|       |            }
  329|      1|        });
  330|      1|    }
_RNCNvNtNtNtNtCs4jiSbG93Pii_4rand4rngs7adapter9reseeding4fork21register_fork_handler0Bb_:
  319|      1|        REGISTER.call_once(|| {
  320|      1|            // Bump the counter before and after forking (see #1169):
  321|      1|            let ret = unsafe { libc::pthread_atfork(
  322|      1|                Some(fork_handler),
  323|      1|                Some(fork_handler),
  324|      1|                Some(fork_handler),
  325|      1|            ) };
  326|      1|            if ret != 0 {
  327|      0|                panic!("libc::pthread_atfork failed with code {}", ret);
  328|      1|            }
  329|      1|        });
_RNvMNtNtNtCs4jiSbG93Pii_4rand4rngs7adapter9reseedingINtB2_12ReseedingRngNtNtCs1pj3KKf4bzR_11rand_chacha6chacha12ChaCha12CoreNtNtCs5oKiaLr02aj_9rand_core2os5OsRngE3newB8_:
  101|      1|    pub fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  102|      1|        ReseedingRng(BlockRng::new(ReseedingCore::new(rng, threshold, reseeder)))
  103|      1|    }
_RNvXs2_NtNtNtCs4jiSbG93Pii_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs1pj3KKf4bzR_11rand_chacha6chacha12ChaCha12CoreNtNtCs5oKiaLr02aj_9rand_core2os5OsRngENtNtB26_5block12BlockRngCore8generateBb_:
  173|  38.4k|    fn generate(&mut self, results: &mut Self::Results) {
  174|  38.4k|        let global_fork_counter = fork::get_fork_counter();
  175|  38.4k|        if self.bytes_until_reseed <= 0 || self.is_forked(global_fork_counter) {
  176|       |            // We get better performance by not calling only `reseed` here
  177|       |            // and continuing with the rest of the function, but by directly
  178|       |            // returning from a non-inlined function.
  179|    150|            return self.reseed_and_generate(results, global_fork_counter);
  180|  38.3k|        }
  181|  38.3k|        let num_bytes = results.as_ref().len() * size_of::<Self::Item>();
  182|  38.3k|        self.bytes_until_reseed -= num_bytes as i64;
  183|  38.3k|        self.inner.generate(results);
  184|  38.4k|    }
_RNvMs3_NtNtNtCs4jiSbG93Pii_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs1pj3KKf4bzR_11rand_chacha6chacha12ChaCha12CoreNtNtCs5oKiaLr02aj_9rand_core2os5OsRngE3newBb_:
  193|      1|    fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  194|      1|        use ::core::i64::MAX;
  195|      1|        fork::register_fork_handler();
  196|       |
  197|       |        // Because generating more values than `i64::MAX` takes centuries on
  198|       |        // current hardware, we just clamp to that value.
  199|       |        // Also we set a threshold of 0, which indicates no limit, to that
  200|       |        // value.
  201|      1|        let threshold = if threshold == 0 {
  202|      0|            MAX
  203|      1|        } else if threshold <= MAX as u64 {
  204|      1|            threshold as i64
  205|       |        } else {
  206|      0|            MAX
  207|       |        };
  208|       |
  209|      1|        ReseedingCore {
  210|      1|            inner: rng,
  211|      1|            reseeder,
  212|      1|            threshold: threshold as i64,
  213|      1|            bytes_until_reseed: threshold as i64,
  214|      1|            fork_counter: 0,
  215|      1|        }
  216|      1|    }
_RNvMs3_NtNtNtCs4jiSbG93Pii_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs1pj3KKf4bzR_11rand_chacha6chacha12ChaCha12CoreNtNtCs5oKiaLr02aj_9rand_core2os5OsRngE6reseedBb_:
  219|    150|    fn reseed(&mut self) -> Result<(), Error> {
  220|    150|        R::from_rng(&mut self.reseeder).map(|result| {
  221|       |            self.bytes_until_reseed = self.threshold;
  222|       |            self.inner = result
  223|    150|        })
  224|    150|    }
_RNCNvMs3_NtNtNtCs4jiSbG93Pii_4rand4rngs7adapter9reseedingINtB7_13ReseedingCoreNtNtCs1pj3KKf4bzR_11rand_chacha6chacha12ChaCha12CoreNtNtCs5oKiaLr02aj_9rand_core2os5OsRngE6reseed0Bd_:
  220|    150|        R::from_rng(&mut self.reseeder).map(|result| {
  221|    150|            self.bytes_until_reseed = self.threshold;
  222|    150|            self.inner = result
  223|    150|        })
_RNvMs3_NtNtNtCs4jiSbG93Pii_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs1pj3KKf4bzR_11rand_chacha6chacha12ChaCha12CoreNtNtCs5oKiaLr02aj_9rand_core2os5OsRngE9is_forkedBb_:
  226|  38.4k|    fn is_forked(&self, global_fork_counter: usize) -> bool {
  227|  38.4k|        // In theory, on 32-bit platforms, it is possible for
  228|  38.4k|        // `global_fork_counter` to wrap around after ~4e9 forks.
  229|  38.4k|        //
  230|  38.4k|        // This check will detect a fork in the normal case where
  231|  38.4k|        // `fork_counter < global_fork_counter`, and also when the difference
  232|  38.4k|        // between both is greater than `isize::MAX` (wrapped around).
  233|  38.4k|        //
  234|  38.4k|        // It will still fail to detect a fork if there have been more than
  235|  38.4k|        // `isize::MAX` forks, without any reseed in between. Seems unlikely
  236|  38.4k|        // enough.
  237|  38.4k|        (self.fork_counter.wrapping_sub(global_fork_counter) as isize) < 0
  238|  38.4k|    }
_RNvMs3_NtNtNtCs4jiSbG93Pii_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs1pj3KKf4bzR_11rand_chacha6chacha12ChaCha12CoreNtNtCs5oKiaLr02aj_9rand_core2os5OsRngE19reseed_and_generateBb_:
  241|    150|    fn reseed_and_generate(
  242|    150|        &mut self, results: &mut <Self as BlockRngCore>::Results, global_fork_counter: usize,
  243|    150|    ) {
  244|    150|        #![allow(clippy::if_same_then_else)] // false positive
  245|    150|        if self.is_forked(global_fork_counter) {
  246|      0|            info!("Fork detected, reseeding RNG");
  247|    150|        } else {
  248|    150|            trace!("Reseeding RNG (periodic reseed)");
  249|    150|        }
  250|       |
  251|    150|        let num_bytes = results.as_ref().len() * size_of::<<R as BlockRngCore>::Item>();
  252|       |
  253|    150|        if let Err(e) = self.reseed() {
  254|      0|            warn!("Reseeding RNG failed: {}", e);
  255|      0|            let _ = e;
  256|    150|        }
  257|    150|        self.fork_counter = global_fork_counter;
  258|    150|
  259|    150|        self.bytes_until_reseed = self.threshold - num_bytes as i64;
  260|    150|        self.inner.generate(results);
  261|    150|    }

_RNvXs_NtNtCs4jiSbG93Pii_4rand4rngs6threadNtB4_9ThreadRngNtCs5oKiaLr02aj_9rand_core7RngCore8next_u64:
  109|  1.23M|    fn next_u64(&mut self) -> u64 {
  110|  1.23M|        // SAFETY: We must make sure to stop using `rng` before anyone else
  111|  1.23M|        // creates another mutable reference
  112|  1.23M|        let rng = unsafe { &mut *self.rng.get() };
  113|  1.23M|        rng.next_u64()
  114|  1.23M|    }
_RNvNtNtCs4jiSbG93Pii_4rand4rngs6thread10thread_rng:
   88|   615k|pub fn thread_rng() -> ThreadRng {
   89|   615k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
   90|   615k|    ThreadRng { rng }
   91|   615k|}
_RNCNvNtNtCs4jiSbG93Pii_4rand4rngs6thread10thread_rng0B7_:
   89|   615k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());

_RNvXsl_NtCs1pj3KKf4bzR_11rand_chacha6chachaNtB5_12ChaCha12CoreNtNtCs5oKiaLr02aj_9rand_core5block12BlockRngCore8generateCs4jiSbG93Pii_4rand:
   89|  38.4k|            fn generate(&mut self, r: &mut Self::Results) {
   90|  38.4k|                // Fill slice of words by writing to equivalent slice of bytes, then fixing endianness.
   91|  38.4k|                self.state.refill4($rounds, unsafe {
   92|  38.4k|                    &mut *(&mut *r as *mut Array64<u32> as *mut [u8; 256])
   93|  38.4k|                });
   94|  2.46M|                for x in r.as_mut() {
   95|  2.46M|                    *x = x.to_le();
   96|  2.46M|                }
   97|  38.4k|            }
_RNvXsm_NtCs1pj3KKf4bzR_11rand_chacha6chachaNtB5_12ChaCha12CoreNtCs5oKiaLr02aj_9rand_core11SeedableRng9from_seedCs4jiSbG93Pii_4rand:
  103|    151|            fn from_seed(seed: Self::Seed) -> Self {
  104|    151|                $ChaChaXCore { state: ChaCha::new(&seed, &[0u8; 8]) }
  105|    151|            }
_RNvXs_NtCs1pj3KKf4bzR_11rand_chacha6chachaINtB4_7Array64mEINtNtCscdEvteftVc2_4core7convert5AsRefSmE6as_refB6_:
   46|  2.53M|    fn as_ref(&self) -> &[T] {
   47|  2.53M|        &self.0
   48|  2.53M|    }
_RNvXs0_NtCs1pj3KKf4bzR_11rand_chacha6chachaINtB5_7Array64mEINtNtCscdEvteftVc2_4core7convert5AsMutSmE6as_mutB7_:
   51|  38.4k|    fn as_mut(&mut self) -> &mut [T] {
   52|  38.4k|        &mut self.0
   53|  38.4k|    }
_RNvXNtCs1pj3KKf4bzR_11rand_chacha6chachaINtB2_7Array64mENtNtCscdEvteftVc2_4core7default7Default7defaultB4_:
   32|      1|    fn default() -> Self {
   33|      1|        Self([
   34|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   35|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   36|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   37|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   38|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   39|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   40|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   41|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   42|      1|        ])
   43|      1|    }

_RNvMNtCs1pj3KKf4bzR_11rand_chacha4gutsNtB2_6ChaCha3new:
   72|    151|    pub fn new(key: &[u8; 32], nonce: &[u8]) -> Self {
   73|    151|        init_chacha(key, nonce)
   74|    151|    }
_RNvMNtCs1pj3KKf4bzR_11rand_chacha4gutsNtB2_6ChaCha7refill4:
   84|  38.4k|    pub fn refill4(&mut self, drounds: u32, out: &mut [u8; BUFSZ]) {
   85|  38.4k|        refill_wide(self, drounds, out)
   86|  38.4k|    }
_RINvNtCs1pj3KKf4bzR_11rand_chacha4guts5roundINtNtCscbn08k08Vyj_10ppv_lite864soft2x2INtNtNtNtBL_6x86_644sse24avx212u32x4x2_avx2NtB1q_4NoNIENtB1o_2G0EEB4_:
   43|   461k|pub(crate) fn round<V: ArithOps + BitOps32>(mut x: State<V>) -> State<V> {
   44|   461k|    x.a += x.b;
   45|   461k|    x.d = (x.d ^ x.a).rotate_each_word_right16();
   46|   461k|    x.c += x.d;
   47|   461k|    x.b = (x.b ^ x.c).rotate_each_word_right20();
   48|   461k|    x.a += x.b;
   49|   461k|    x.d = (x.d ^ x.a).rotate_each_word_right24();
   50|   461k|    x.c += x.d;
   51|   461k|    x.b = (x.b ^ x.c).rotate_each_word_right25();
   52|   461k|    x
   53|   461k|}
_RINvNtCs1pj3KKf4bzR_11rand_chacha4guts11diagonalizeINtNtCscbn08k08Vyj_10ppv_lite864soft2x2INtNtNtNtBS_6x86_644sse24avx212u32x4x2_avx2NtB1x_4NoNIENtB1v_2G0EEB4_:
   56|   230k|pub(crate) fn diagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   57|   230k|    x.b = x.b.shuffle_lane_words3012();
   58|   230k|    x.c = x.c.shuffle_lane_words2301();
   59|   230k|    x.d = x.d.shuffle_lane_words1230();
   60|   230k|    x
   61|   230k|}
_RINvNtCs1pj3KKf4bzR_11rand_chacha4guts13undiagonalizeINtNtCscbn08k08Vyj_10ppv_lite864soft2x2INtNtNtNtBU_6x86_644sse24avx212u32x4x2_avx2NtB1z_4NoNIENtB1x_2G0EEB4_:
   63|   230k|pub(crate) fn undiagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   64|   230k|    x.b = x.b.shuffle_lane_words1230();
   65|   230k|    x.c = x.c.shuffle_lane_words2301();
   66|   230k|    x.d = x.d.shuffle_lane_words3012();
   67|   230k|    x
   68|   230k|}
_RINvMNtCs1pj3KKf4bzR_11rand_chacha4gutsNtB3_6ChaCha5pos64INtNtCscbn08k08Vyj_10ppv_lite866x86_6411Avx2MachineNtBW_4NoNIEEB5_:
   77|  76.9k|    fn pos64<M: Machine>(&self, m: M) -> u64 {
   78|  76.9k|        let d: M::u32x4 = m.unpack(self.d);
   79|  76.9k|        ((d.extract(1) as u64) << 32) | d.extract(0) as u64
   80|  76.9k|    }
_RINvNtCs1pj3KKf4bzR_11rand_chacha4guts16refill_wide_implINtNtCscbn08k08Vyj_10ppv_lite866x86_6411Avx2MachineNtBV_4NoNIEEB4_:
  116|  38.4k|fn refill_wide_impl<Mach: Machine>(
  117|  38.4k|    m: Mach, state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ],
  118|  38.4k|) {
  119|  38.4k|    let k = m.vec([0x6170_7865, 0x3320_646e, 0x7962_2d32, 0x6b20_6574]);
  120|  38.4k|    let mut pos = state.pos64(m);
  121|  38.4k|    let d0: Mach::u32x4 = m.unpack(state.d);
  122|  38.4k|    pos = pos.wrapping_add(1);
  123|  38.4k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  124|  38.4k|    pos = pos.wrapping_add(1);
  125|  38.4k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  126|  38.4k|    pos = pos.wrapping_add(1);
  127|  38.4k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  128|  38.4k|
  129|  38.4k|    let b = m.unpack(state.b);
  130|  38.4k|    let c = m.unpack(state.c);
  131|  38.4k|    let mut x = State {
  132|  38.4k|        a: Mach::u32x4x4::from_lanes([k, k, k, k]),
  133|  38.4k|        b: Mach::u32x4x4::from_lanes([b, b, b, b]),
  134|  38.4k|        c: Mach::u32x4x4::from_lanes([c, c, c, c]),
  135|  38.4k|        d: m.unpack(Mach::u32x4x4::from_lanes([d0, d1, d2, d3]).into()),
  136|  38.4k|    };
  137|   230k|    for _ in 0..drounds {
  138|   230k|        x = round(x);
  139|   230k|        x = undiagonalize(round(diagonalize(x)));
  140|   230k|    }
  141|  38.4k|    let mut pos = state.pos64(m);
  142|  38.4k|    let d0: Mach::u32x4 = m.unpack(state.d);
  143|  38.4k|    pos = pos.wrapping_add(1);
  144|  38.4k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  145|  38.4k|    pos = pos.wrapping_add(1);
  146|  38.4k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  147|  38.4k|    pos = pos.wrapping_add(1);
  148|  38.4k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  149|  38.4k|    pos = pos.wrapping_add(1);
  150|  38.4k|    let d4 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  151|  38.4k|
  152|  38.4k|    let (a, b, c, d) = (
  153|  38.4k|        x.a.to_lanes(),
  154|  38.4k|        x.b.to_lanes(),
  155|  38.4k|        x.c.to_lanes(),
  156|  38.4k|        x.d.to_lanes(),
  157|  38.4k|    );
  158|  38.4k|    let sb = m.unpack(state.b);
  159|  38.4k|    let sc = m.unpack(state.c);
  160|  38.4k|    let sd = [m.unpack(state.d), d1, d2, d3];
  161|  38.4k|    state.d = d4.into();
  162|  38.4k|    let mut words = out.chunks_exact_mut(16);
  163|   153k|    for ((((&a, &b), &c), &d), &sd) in a.iter().zip(&b).zip(&c).zip(&d).zip(&sd) {
  164|   153k|        (a + k).write_le(words.next().unwrap());
  165|   153k|        (b + sb).write_le(words.next().unwrap());
  166|   153k|        (c + sc).write_le(words.next().unwrap());
  167|   153k|        (d + sd).write_le(words.next().unwrap());
  168|   153k|    }
  169|  38.4k|}
_RNvNtCs1pj3KKf4bzR_11rand_chacha4guts10read_u32le:
  229|    302|fn read_u32le(xs: &[u8]) -> u32 {
  230|    302|    assert_eq!(xs.len(), 4);
  231|    302|    u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24)
  232|    302|}
_RINvNvNtCs1pj3KKf4bzR_11rand_chacha4guts11refill_wide7fn_implINtNtCscbn08k08Vyj_10ppv_lite866x86_6411Avx2MachineNtB10_4NoNIEEB6_:
  172|  38.4k|    fn refill_wide(state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ]) {
  173|  38.4k|        refill_wide_impl(m, state, drounds, out);
  174|  38.4k|    }
_RINvNvNtCs1pj3KKf4bzR_11rand_chacha4guts11init_chacha7fn_implINtNtCscbn08k08Vyj_10ppv_lite866x86_6410SseMachineNtB10_5YesS3NtB10_5YesS4NtB10_4NoNIEEB6_:
  235|    151|    fn init_chacha(key: &[u8; 32], nonce: &[u8]) -> ChaCha {
  236|    151|        let ctr_nonce = [
  237|       |            0,
  238|    151|            if nonce.len() == 12 {
  239|      0|                read_u32le(&nonce[0..4])
  240|       |            } else {
  241|    151|                0
  242|       |            },
  243|    151|            read_u32le(&nonce[nonce.len() - 8..nonce.len() - 4]),
  244|    151|            read_u32le(&nonce[nonce.len() - 4..]),
  245|    151|        ];
  246|    151|        let key0: Mach::u32x4 = m.read_le(&key[..16]);
  247|    151|        let key1: Mach::u32x4 = m.read_le(&key[16..]);
  248|    151|        ChaCha {
  249|    151|            b: key0.into(),
  250|    151|            c: key1.into(),
  251|    151|            d: ctr_nonce.into(),
  252|    151|        }

_RNCNvXs0_NtCs5oKiaLr02aj_9rand_core5blockINtB7_8BlockRngINtNtNtNtCs4jiSbG93Pii_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs1pj3KKf4bzR_11rand_chacha6chacha12ChaCha12CoreNtNtB9_2os5OsRngEENtB9_7RngCore8next_u640CssoZq86sT9S_5oxttl:
  198|  1.23M|        let read_u64 = |results: &[u32], index| {
  199|  1.23M|            let data = &results[index..=index + 1];
  200|  1.23M|            u64::from(data[1]) << 32 | u64::from(data[0])
  201|  1.23M|        };
_RNvXs0_NtCs5oKiaLr02aj_9rand_core5blockINtB5_8BlockRngINtNtNtNtCs4jiSbG93Pii_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs1pj3KKf4bzR_11rand_chacha6chacha12ChaCha12CoreNtNtB7_2os5OsRngEENtB7_7RngCore8next_u64CssoZq86sT9S_5oxttl:
  197|  1.23M|    fn next_u64(&mut self) -> u64 {
  198|  1.23M|        let read_u64 = |results: &[u32], index| {
  199|       |            let data = &results[index..=index + 1];
  200|       |            u64::from(data[1]) << 32 | u64::from(data[0])
  201|       |        };
  202|       |
  203|  1.23M|        let len = self.results.as_ref().len();
  204|  1.23M|
  205|  1.23M|        let index = self.index;
  206|  1.23M|        if index < len - 1 {
  207|  1.19M|            self.index += 2;
  208|  1.19M|            // Read an u64 from the current index
  209|  1.19M|            read_u64(self.results.as_ref(), index)
  210|  38.4k|        } else if index >= len {
  211|  38.4k|            self.generate_and_set(2);
  212|  38.4k|            read_u64(self.results.as_ref(), 0)
  213|       |        } else {
  214|      0|            let x = u64::from(self.results.as_ref()[len - 1]);
  215|      0|            self.generate_and_set(1);
  216|      0|            let y = u64::from(self.results.as_ref()[0]);
  217|      0|            (y << 32) | x
  218|       |        }
  219|  1.23M|    }
_RNvMs_NtCs5oKiaLr02aj_9rand_core5blockINtB4_8BlockRngINtNtNtNtCs4jiSbG93Pii_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs1pj3KKf4bzR_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE16generate_and_setBY_:
  174|  38.4k|    pub fn generate_and_set(&mut self, index: usize) {
  175|  38.4k|        assert!(index < self.results.as_ref().len());
  176|  38.4k|        self.core.generate(&mut self.results);
  177|  38.4k|        self.index = index;
  178|  38.4k|    }
_RNvMs_NtCs5oKiaLr02aj_9rand_core5blockINtB4_8BlockRngINtNtNtNtCs4jiSbG93Pii_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs1pj3KKf4bzR_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE3newBY_:
  145|      1|    pub fn new(core: R) -> BlockRng<R> {
  146|      1|        let results_empty = R::Results::default();
  147|      1|        BlockRng {
  148|      1|            core,
  149|      1|            index: results_empty.as_ref().len(),
  150|      1|            results: results_empty,
  151|      1|        }
  152|      1|    }

_RINvYNtNtCs1pj3KKf4bzR_11rand_chacha6chacha12ChaCha12CoreNtCs5oKiaLr02aj_9rand_core11SeedableRng8from_rngNtNtBV_2os5OsRngECs4jiSbG93Pii_4rand:
  390|      1|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|      1|        let mut seed = Self::Seed::default();
  392|      1|        rng.try_fill_bytes(seed.as_mut())?;
  393|      1|        Ok(Self::from_seed(seed))
  394|      1|    }
_RINvYNtNtCs1pj3KKf4bzR_11rand_chacha6chacha12ChaCha12CoreNtCs5oKiaLr02aj_9rand_core11SeedableRng8from_rngQNtNtBV_2os5OsRngECs4jiSbG93Pii_4rand:
  390|    150|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|    150|        let mut seed = Self::Seed::default();
  392|    150|        rng.try_fill_bytes(seed.as_mut())?;
  393|    150|        Ok(Self::from_seed(seed))
  394|    150|    }
_RNvXs_Cs5oKiaLr02aj_9rand_coreQNtNtB4_2os5OsRngNtB4_7RngCore14try_fill_bytesCs4jiSbG93Pii_4rand:
  441|    150|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
  442|    150|        (**self).try_fill_bytes(dest)
  443|    150|    }

_RNvXs_NtCs5oKiaLr02aj_9rand_core2osNtB4_5OsRngNtB6_7RngCore14try_fill_bytes:
   67|    151|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
   68|    151|        getrandom(dest)?;
   69|    151|        Ok(())
   70|    151|    }

_RNvNvNtNtCs4jiSbG93Pii_4rand4rngs6thread14THREAD_RNG_KEY6___initB7_:
   82|      1|            fn __init() -> $t { $init }
_RNvNvNtNtCs4jiSbG93Pii_4rand4rngs6thread14THREAD_RNG_KEY7___getitB7_:
   85|   615k|            unsafe fn __getit(
   86|   615k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   87|   615k|            ) -> $crate::option::Option<&'static $t> {
   88|   615k|                #[thread_local]
   89|   615k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   90|   615k|                    $crate::thread::local_impl::Key::<$t>::new();
   91|   615k|
   92|   615k|                unsafe {
   93|   615k|                    __KEY.get(move || {
   94|       |                        if let $crate::option::Option::Some(init) = init {
   95|       |                            if let $crate::option::Option::Some(value) = init.take() {
   96|       |                                return value;
   97|       |                            } else if $crate::cfg!(debug_assertions) {
   98|       |                                $crate::unreachable!("missing default value");
   99|       |                            }
  100|       |                        }
  101|       |                        __init()
  102|   615k|                    })
  103|   615k|                }
  104|   615k|            }
_RNCNvNvNtNtCs4jiSbG93Pii_4rand4rngs6thread14THREAD_RNG_KEY7___getit0B9_:
   93|      1|                    __KEY.get(move || {
   94|      1|                        if let $crate::option::Option::Some(init) = init {
   95|      0|                            if let $crate::option::Option::Some(value) = init.take() {
   96|      0|                                return value;
   97|      0|                            } else if $crate::cfg!(debug_assertions) {
   98|      0|                                $crate::unreachable!("missing default value");
   99|      0|                            }
  100|      1|                        }
  101|      1|                        __init()
  102|       |                    })

_RNvCs7EVUVIOgNrt_4trig15serialize_quads:
   50|  8.43k|fn serialize_quads(quads: &[Quad], prefixes: Vec<(String, String)>) -> Vec<u8> {
   51|  8.43k|    let mut serializer = TriGSerializer::new();
   52|  9.74k|    for (prefix_name, prefix_iri) in prefixes {
   53|  1.30k|        serializer = serializer.with_prefix(prefix_name, prefix_iri).unwrap();
   54|  1.30k|    }
   55|  8.43k|    let mut serializer = serializer.for_writer(Vec::new());
   56|   199k|    for quad in quads {
   57|   190k|        serializer.serialize_quad(quad).unwrap();
   58|   190k|    }
   59|  8.43k|    serializer.finish().unwrap()
   60|  8.43k|}
_RINvCs7EVUVIOgNrt_4trig5parseARShj1_EB2_:
    9|  8.43k|fn parse<'a>(
   10|  8.43k|    chunks: impl IntoIterator<Item = &'a [u8]>,
   11|  8.43k|    unchecked: bool,
   12|  8.43k|) -> (Vec<Quad>, Vec<String>, Vec<(String, String)>) {
   13|  8.43k|    let mut quads = Vec::new();
   14|  8.43k|    let mut errors = Vec::new();
   15|  8.43k|    let mut parser = TriGParser::new()
   16|  8.43k|        .with_quoted_triples()
   17|  8.43k|        .with_base_iri("http://example.com/")
   18|  8.43k|        .unwrap();
   19|  8.43k|    if unchecked {
   20|      0|        parser = parser.unchecked();
   21|  8.43k|    }
   22|  8.43k|    let mut parser = parser.low_level();
   23|  16.8k|    for chunk in chunks {
   24|  8.43k|        parser.extend_from_slice(chunk);
   25|   854k|        while let Some(result) = parser.parse_next() {
   26|   846k|            match result {
   27|   190k|                Ok(quad) => quads.push(quad),
   28|   655k|                Err(error) => errors.push(error.to_string()),
   29|       |            }
   30|       |        }
   31|       |    }
   32|  8.43k|    parser.end();
   33|  12.9k|    while let Some(result) = parser.parse_next() {
   34|  4.55k|        match result {
   35|    181|            Ok(quad) => quads.push(quad),
   36|  4.37k|            Err(error) => errors.push(error.to_string()),
   37|       |        }
   38|       |    }
   39|  8.43k|    assert!(parser.is_end());
   40|  8.43k|    (
   41|  8.43k|        quads,
   42|  8.43k|        errors,
   43|  8.43k|        parser
   44|  8.43k|            .prefixes()
   45|  8.43k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
   46|  8.43k|            .collect(),
   47|  8.43k|    )
   48|  8.43k|}
_RINvCs7EVUVIOgNrt_4trig5parseINtNtNtCscdEvteftVc2_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_run0EEB2_:
    9|  8.43k|fn parse<'a>(
   10|  8.43k|    chunks: impl IntoIterator<Item = &'a [u8]>,
   11|  8.43k|    unchecked: bool,
   12|  8.43k|) -> (Vec<Quad>, Vec<String>, Vec<(String, String)>) {
   13|  8.43k|    let mut quads = Vec::new();
   14|  8.43k|    let mut errors = Vec::new();
   15|  8.43k|    let mut parser = TriGParser::new()
   16|  8.43k|        .with_quoted_triples()
   17|  8.43k|        .with_base_iri("http://example.com/")
   18|  8.43k|        .unwrap();
   19|  8.43k|    if unchecked {
   20|      0|        parser = parser.unchecked();
   21|  8.43k|    }
   22|  8.43k|    let mut parser = parser.low_level();
   23|   868k|    for chunk in chunks {
   24|   859k|        parser.extend_from_slice(chunk);
   25|  1.70M|        while let Some(result) = parser.parse_next() {
   26|   846k|            match result {
   27|   190k|                Ok(quad) => quads.push(quad),
   28|   655k|                Err(error) => errors.push(error.to_string()),
   29|       |            }
   30|       |        }
   31|       |    }
   32|  8.43k|    parser.end();
   33|  12.9k|    while let Some(result) = parser.parse_next() {
   34|  4.55k|        match result {
   35|    181|            Ok(quad) => quads.push(quad),
   36|  4.37k|            Err(error) => errors.push(error.to_string()),
   37|       |        }
   38|       |    }
   39|  8.43k|    assert!(parser.is_end());
   40|  8.43k|    (
   41|  8.43k|        quads,
   42|  8.43k|        errors,
   43|  8.43k|        parser
   44|  8.43k|            .prefixes()
   45|  8.43k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
   46|  8.43k|            .collect(),
   47|  8.43k|    )
   48|  8.43k|}
_RINvCs7EVUVIOgNrt_4trig5parseINtNtNtCscdEvteftVc2_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_runs0_0EEB2_:
    9|  8.43k|fn parse<'a>(
   10|  8.43k|    chunks: impl IntoIterator<Item = &'a [u8]>,
   11|  8.43k|    unchecked: bool,
   12|  8.43k|) -> (Vec<Quad>, Vec<String>, Vec<(String, String)>) {
   13|  8.43k|    let mut quads = Vec::new();
   14|  8.43k|    let mut errors = Vec::new();
   15|  8.43k|    let mut parser = TriGParser::new()
   16|  8.43k|        .with_quoted_triples()
   17|  8.43k|        .with_base_iri("http://example.com/")
   18|  8.43k|        .unwrap();
   19|  8.43k|    if unchecked {
   20|  8.43k|        parser = parser.unchecked();
   21|  8.43k|    }
   22|  8.43k|    let mut parser = parser.low_level();
   23|   868k|    for chunk in chunks {
   24|   859k|        parser.extend_from_slice(chunk);
   25|  1.69M|        while let Some(result) = parser.parse_next() {
   26|   840k|            match result {
   27|   199k|                Ok(quad) => quads.push(quad),
   28|   641k|                Err(error) => errors.push(error.to_string()),
   29|       |            }
   30|       |        }
   31|       |    }
   32|  8.43k|    parser.end();
   33|  13.0k|    while let Some(result) = parser.parse_next() {
   34|  4.66k|        match result {
   35|    200|            Ok(quad) => quads.push(quad),
   36|  4.46k|            Err(error) => errors.push(error.to_string()),
   37|       |        }
   38|       |    }
   39|  8.43k|    assert!(parser.is_end());
   40|  8.43k|    (
   41|  8.43k|        quads,
   42|  8.43k|        errors,
   43|  8.43k|        parser
   44|  8.43k|            .prefixes()
   45|  8.43k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
   46|  8.43k|            .collect(),
   47|  8.43k|    )
   48|  8.43k|}
_RNCINvCs7EVUVIOgNrt_4trig5parseARShj1_E0B4_:
   45|  1.30k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
_RNCINvCs7EVUVIOgNrt_4trig5parseINtNtNtCscdEvteftVc2_4core5slice4iter5SplithNCNvNvB4_1__19___libfuzzer_sys_run0EE0B4_:
   45|  1.30k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
_RNCINvCs7EVUVIOgNrt_4trig5parseINtNtNtCscdEvteftVc2_4core5slice4iter5SplithNCNvNvB4_1__19___libfuzzer_sys_runs0_0EE0B4_:
   45|  1.58k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
_RNCNvNvCs7EVUVIOgNrt_4trig1__19___libfuzzer_sys_run0B5_:
   64|  5.38M|    let (quads, errors, prefixes) = parse(data.split(|c| *c == 0xFF), false);
_RNCNvNvCs7EVUVIOgNrt_4trig1__19___libfuzzer_sys_runs_0B5_:
   70|  5.38M|            .filter(|c| *c != 0xFF)
_RNCNvNvCs7EVUVIOgNrt_4trig1__19___libfuzzer_sys_runs0_0B5_:
   75|  5.38M|    let (quads_unchecked, errors_unchecked, _) = parse(data.split(|c| *c == 0xFF), true);
_RNCNvNvCs7EVUVIOgNrt_4trig1__19___libfuzzer_sys_runs1_0B5_:
   82|   190k|        .map(|q| count_quad_blank_nodes(q.as_ref()))

_RNvCs76XMqcZlhDW_13oxigraph_fuzz24count_triple_blank_nodes:
    5|  1.99M|pub fn count_triple_blank_nodes(triple: TripleRef<'_>) -> usize {
    6|  1.99M|    (match &triple.subject {
    7|    503|        SubjectRef::BlankNode(_) => 1,
    8|  1.90M|        SubjectRef::Triple(t) => count_triple_blank_nodes(t.as_ref()),
    9|  82.5k|        _ => 0,
   10|  1.99M|    }) + (match &triple.object {
   11|  1.06k|        TermRef::BlankNode(_) => 1,
   12|     54|        TermRef::Triple(t) => count_triple_blank_nodes(t.as_ref()),
   13|  1.98M|        _ => 0,
   14|       |    })
   15|  1.99M|}
_RNvCs76XMqcZlhDW_13oxigraph_fuzz22count_quad_blank_nodes:
   17|   190k|pub fn count_quad_blank_nodes(quad: QuadRef<'_>) -> usize {
   18|   190k|    (match &quad.subject {
   19|  89.1k|        SubjectRef::BlankNode(_) => 1,
   20|  81.1k|        SubjectRef::Triple(t) => count_triple_blank_nodes(t.as_ref()),
   21|  20.4k|        _ => 0,
   22|   190k|    }) + (match &quad.object {
   23|  69.1k|        TermRef::BlankNode(_) => 1,
   24|  1.82k|        TermRef::Triple(t) => count_triple_blank_nodes(t.as_ref()),
   25|   119k|        _ => 0,
   26|   190k|    }) + usize::from(matches!(quad.graph_name, GraphNameRef::BlankNode(_)))
   27|   190k|}

_RNvMNtCs23GeP7cdX8Z_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCs7EVUVIOgNrt_4trig:
   88|   436k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|   436k|        BlankNodeRef(match &self.0 {
   90|  5.34k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|   430k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|   430k|                id: *id,
   93|   430k|                str: str.as_str(),
   94|   430k|            },
   95|       |        })
   96|   436k|    }
_RNvMs1_NtCs23GeP7cdX8Z_5oxrdf10blank_nodeNtB5_12BlankNodeRef10into_ownedCs7EVUVIOgNrt_4trig:
  207|  83.8k|    pub fn into_owned(self) -> BlankNode {
  208|  83.8k|        BlankNode(match self.0 {
  209|    629|            BlankNodeRefContent::Named(id) => BlankNodeContent::Named(id.to_owned()),
  210|  83.2k|            BlankNodeRefContent::Anonymous { id, .. } => BlankNodeContent::Anonymous {
  211|  83.2k|                id,
  212|  83.2k|                str: IdStr::new(u128::from_ne_bytes(id)),
  213|  83.2k|            },
  214|       |        })
  215|  83.8k|    }
_RNvMs7_NtCs23GeP7cdX8Z_5oxrdf10blank_nodeNtB5_5IdStr3newCs7EVUVIOgNrt_4trig:
  258|  83.2k|    fn new(id: u128) -> Self {
  259|  83.2k|        let mut str = [0; 32];
  260|  83.2k|        write!(&mut str[..], "{id:x}").unwrap();
  261|  83.2k|        Self(str)
  262|  83.2k|    }
_RNvMs7_NtCs23GeP7cdX8Z_5oxrdf10blank_nodeNtB5_5IdStr6as_strCs7EVUVIOgNrt_4trig:
  265|   430k|    fn as_str(&self) -> &str {
  266|   430k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|   430k|        str::from_utf8(&self.0[..len]).unwrap()
  268|   430k|    }
_RINvMNtCs23GeP7cdX8Z_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedReECssoZq86sT9S_5oxttl:
   49|   166k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   50|   166k|        let id = id.into();
   51|   166k|        if let Some(numerical_id) = to_integer_id(&id) {
   52|   160k|            Self::new_from_unique_id(numerical_id)
   53|       |        } else {
   54|  6.29k|            Self(BlankNodeContent::Named(id))
   55|       |        }
   56|   166k|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idCssoZq86sT9S_5oxttl:
   62|   160k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|   160k|        Self(BlankNodeContent::Anonymous {
   64|   160k|            id: id.to_ne_bytes(),
   65|   160k|            str: IdStr::new(id),
   66|   160k|        })
   67|   160k|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCssoZq86sT9S_5oxttl:
   88|  1.49k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|  1.49k|        BlankNodeRef(match &self.0 {
   90|    236|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|  1.25k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|  1.25k|                id: *id,
   93|  1.25k|                str: str.as_str(),
   94|  1.25k|            },
   95|       |        })
   96|  1.49k|    }
_RNvMs1_NtCs23GeP7cdX8Z_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCssoZq86sT9S_5oxttl:
  179|   154k|    pub const fn as_str(self) -> &'a str {
  180|   154k|        match self.0 {
  181|  1.35k|            BlankNodeRefContent::Named(id) => id,
  182|   153k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  183|       |        }
  184|   154k|    }
_RNvMs7_NtCs23GeP7cdX8Z_5oxrdf10blank_nodeNtB5_5IdStr3newCssoZq86sT9S_5oxttl:
  258|   776k|    fn new(id: u128) -> Self {
  259|   776k|        let mut str = [0; 32];
  260|   776k|        write!(&mut str[..], "{id:x}").unwrap();
  261|   776k|        Self(str)
  262|   776k|    }
_RNvMs7_NtCs23GeP7cdX8Z_5oxrdf10blank_nodeNtB5_5IdStr6as_strCssoZq86sT9S_5oxttl:
  265|   616k|    fn as_str(&self) -> &str {
  266|   616k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|   616k|        str::from_utf8(&self.0[..len]).unwrap()
  268|   616k|    }
_RNvNtCs23GeP7cdX8Z_5oxrdf10blank_node13to_integer_idCssoZq86sT9S_5oxttl:
  331|   166k|fn to_integer_id(id: &str) -> Option<u128> {
  332|   166k|    let digits = id.as_bytes();
  333|   166k|    let mut value: u128 = 0;
  334|   166k|    if let None | Some(b'0') = digits.first() {
  335|  1.37k|        return None; // No empty string or leading zeros
  336|   165k|    }
  337|  5.08M|    for digit in digits {
  338|  4.92M|        value = value.checked_mul(16)?.checked_add(
  339|  4.92M|            match *digit {
  340|  4.92M|                b'0'..=b'9' => digit - b'0',
  341|  1.93M|                b'a'..=b'f' => digit - b'a' + 10,
  342|  4.69k|                _ => return None,
  343|       |            }
  344|  4.91M|            .into(),
  345|      0|        )?;
  346|       |    }
  347|   160k|    Some(value)
  348|   166k|}
_RNvXs0_NtCs23GeP7cdX8Z_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCscdEvteftVc2_4core7default7Default7defaultCssoZq86sT9S_5oxttl:
  109|   246k|    fn default() -> Self {
  110|       |        // We ensure the ID does not start with a number to be also valid with RDF/XML
  111|   615k|        loop {
  112|   615k|            let id = random();
  113|   615k|            let str = IdStr::new(id);
  114|   615k|            if matches!(str.as_str().as_bytes().first(), Some(b'a'..=b'f')) {
  115|   246k|                return Self(BlankNodeContent::Anonymous {
  116|   246k|                    id: id.to_ne_bytes(),
  117|   246k|                    str,
  118|   246k|                });
  119|   368k|            }
  120|       |        }
  121|   246k|    }
_RNvXs2_NtCs23GeP7cdX8Z_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtCssoZq86sT9S_5oxttl:
  220|   154k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  221|   154k|        write!(f, "_:{}", self.as_str())
  222|   154k|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCs76XMqcZlhDW_13oxigraph_fuzz:
   88|  1.56k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|  1.56k|        BlankNodeRef(match &self.0 {
   90|    237|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|  1.33k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|  1.33k|                id: *id,
   93|  1.33k|                str: str.as_str(),
   94|  1.33k|            },
   95|       |        })
   96|  1.56k|    }
_RNvMs7_NtCs23GeP7cdX8Z_5oxrdf10blank_nodeNtB5_5IdStr6as_strCs76XMqcZlhDW_13oxigraph_fuzz:
  265|  1.33k|    fn as_str(&self) -> &str {
  266|  1.33k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|  1.33k|        str::from_utf8(&self.0[..len]).unwrap()
  268|  1.33k|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idB4_:
   62|  11.0k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|  11.0k|        Self(BlankNodeContent::Anonymous {
   64|  11.0k|            id: id.to_ne_bytes(),
   65|  11.0k|            str: IdStr::new(id),
   66|  11.0k|        })
   67|  11.0k|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf10blank_nodeNtB2_9BlankNode6as_refB4_:
   88|  14.3k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|  14.3k|        BlankNodeRef(match &self.0 {
   90|    176|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|  14.1k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|  14.1k|                id: *id,
   93|  14.1k|                str: str.as_str(),
   94|  14.1k|            },
   95|       |        })
   96|  14.3k|    }
_RNvMs1_NtCs23GeP7cdX8Z_5oxrdf10blank_nodeNtB5_12BlankNodeRef13new_uncheckedB7_:
  166|  6.09k|    pub fn new_unchecked(id: &'a str) -> Self {
  167|  6.09k|        if let Some(numerical_id) = to_integer_id(id) {
  168|  6.09k|            Self(BlankNodeRefContent::Anonymous {
  169|  6.09k|                id: numerical_id.to_ne_bytes(),
  170|  6.09k|                str: id,
  171|  6.09k|            })
  172|       |        } else {
  173|      0|            Self(BlankNodeRefContent::Named(id))
  174|       |        }
  175|  6.09k|    }
_RNvMs1_NtCs23GeP7cdX8Z_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strB7_:
  179|  22.3k|    pub const fn as_str(self) -> &'a str {
  180|  22.3k|        match self.0 {
  181|  1.02k|            BlankNodeRefContent::Named(id) => id,
  182|  21.2k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  183|       |        }
  184|  22.3k|    }
_RNvMs1_NtCs23GeP7cdX8Z_5oxrdf10blank_nodeNtB5_12BlankNodeRef9unique_idB7_:
  199|  32.6k|    pub const fn unique_id(&self) -> Option<u128> {
  200|  32.6k|        match self.0 {
  201|  1.02k|            BlankNodeRefContent::Named(_) => None,
  202|  31.6k|            BlankNodeRefContent::Anonymous { id, .. } => Some(u128::from_ne_bytes(id)),
  203|       |        }
  204|  32.6k|    }
_RNvMs1_NtCs23GeP7cdX8Z_5oxrdf10blank_nodeNtB5_12BlankNodeRef10into_ownedB7_:
  207|  1.70k|    pub fn into_owned(self) -> BlankNode {
  208|  1.70k|        BlankNode(match self.0 {
  209|    176|            BlankNodeRefContent::Named(id) => BlankNodeContent::Named(id.to_owned()),
  210|  1.52k|            BlankNodeRefContent::Anonymous { id, .. } => BlankNodeContent::Anonymous {
  211|  1.52k|                id,
  212|  1.52k|                str: IdStr::new(u128::from_ne_bytes(id)),
  213|  1.52k|            },
  214|       |        })
  215|  1.70k|    }
_RNvMs7_NtCs23GeP7cdX8Z_5oxrdf10blank_nodeNtB5_5IdStr3newB7_:
  258|  12.5k|    fn new(id: u128) -> Self {
  259|  12.5k|        let mut str = [0; 32];
  260|  12.5k|        write!(&mut str[..], "{id:x}").unwrap();
  261|  12.5k|        Self(str)
  262|  12.5k|    }
_RNvMs7_NtCs23GeP7cdX8Z_5oxrdf10blank_nodeNtB5_5IdStr6as_strB7_:
  265|  14.1k|    fn as_str(&self) -> &str {
  266|  14.1k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|  14.1k|        str::from_utf8(&self.0[..len]).unwrap()
  268|  14.1k|    }
_RNvNtCs23GeP7cdX8Z_5oxrdf10blank_node13to_integer_idB3_:
  331|  6.09k|fn to_integer_id(id: &str) -> Option<u128> {
  332|  6.09k|    let digits = id.as_bytes();
  333|  6.09k|    let mut value: u128 = 0;
  334|  6.09k|    if let None | Some(b'0') = digits.first() {
  335|      0|        return None; // No empty string or leading zeros
  336|  6.09k|    }
  337|   103k|    for digit in digits {
  338|  97.0k|        value = value.checked_mul(16)?.checked_add(
  339|  97.0k|            match *digit {
  340|  97.0k|                b'0'..=b'9' => digit - b'0',
  341|  34.8k|                b'a'..=b'f' => digit - b'a' + 10,
  342|      0|                _ => return None,
  343|       |            }
  344|  97.0k|            .into(),
  345|      0|        )?;
  346|       |    }
  347|  6.09k|    Some(value)
  348|  6.09k|}
_RNCNvMs7_NtCs23GeP7cdX8Z_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  266|  33.5M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);

_RINvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB3_7Dataset6insertRNtNtB5_6triple4QuadECs7EVUVIOgNrt_4trig:
  360|   187k|    pub fn insert<'a>(&mut self, quad: impl Into<QuadRef<'a>>) -> bool {
  361|   187k|        let quad = self.encode_quad(quad.into());
  362|   187k|        self.insert_encoded(quad)
  363|   187k|    }
_RINvXs3_NtCs23GeP7cdX8Z_5oxrdf7datasetNtB6_7DatasetINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect12FromIteratorRNtNtB8_6triple4QuadE9from_iterINtNtNtBW_5slice4iter4IterB1O_EECs7EVUVIOgNrt_4trig:
  965|  5.30k|    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self {
  966|  5.30k|        let mut g = Self::new();
  967|  5.30k|        g.extend(iter);
  968|  5.30k|        g
  969|  5.30k|    }
_RINvXs5_NtCs23GeP7cdX8Z_5oxrdf7datasetNtB6_7DatasetINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendRNtNtB8_6triple4QuadE6extendINtNtNtBW_5slice4iter4IterB1H_EECs7EVUVIOgNrt_4trig:
  981|  5.30k|    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  982|   192k|        for t in iter {
  983|   187k|            self.insert(t);
  984|   187k|        }
  985|  5.30k|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB2_7Dataset3new:
  109|  5.30k|    pub fn new() -> Self {
  110|  5.30k|        Self::default()
  111|  5.30k|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB2_7Dataset4iter:
  169|  2.65k|    pub fn iter(&self) -> Iter<'_> {
  170|  2.65k|        let iter = self.spog.iter();
  171|  2.65k|        Iter {
  172|  2.65k|            dataset: self,
  173|  2.65k|            inner: iter,
  174|  2.65k|        }
  175|  2.65k|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB2_7Dataset3len:
  350|  5.30k|    pub fn len(&self) -> usize {
  351|  5.30k|        self.gspo.len()
  352|  5.30k|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB2_7Dataset14insert_encoded:
  365|   356k|    fn insert_encoded(
  366|   356k|        &mut self,
  367|   356k|        quad: (
  368|   356k|            InternedSubject,
  369|   356k|            InternedNamedNode,
  370|   356k|            InternedTerm,
  371|   356k|            InternedGraphName,
  372|   356k|        ),
  373|   356k|    ) -> bool {
  374|   356k|        let (s, p, o, g) = quad;
  375|   356k|        self.gspo.insert((g.clone(), s.clone(), p, o.clone()));
  376|   356k|        self.gpos.insert((g.clone(), p, o.clone(), s.clone()));
  377|   356k|        self.gosp.insert((g.clone(), o.clone(), s.clone(), p));
  378|   356k|        self.spog.insert((s.clone(), p, o.clone(), g.clone()));
  379|   356k|        self.posg.insert((p, o.clone(), s.clone(), g.clone()));
  380|   356k|        self.ospg.insert((o, s, p, g))
  381|   356k|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB2_7Dataset5clear:
  411|  5.30k|    pub fn clear(&mut self) {
  412|  5.30k|        self.gspo.clear();
  413|  5.30k|        self.gpos.clear();
  414|  5.30k|        self.gosp.clear();
  415|  5.30k|        self.spog.clear();
  416|  5.30k|        self.posg.clear();
  417|  5.30k|        self.ospg.clear();
  418|  5.30k|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB2_7Dataset11encode_quad:
  420|   187k|    fn encode_quad(
  421|   187k|        &mut self,
  422|   187k|        quad: QuadRef<'_>,
  423|   187k|    ) -> (
  424|   187k|        InternedSubject,
  425|   187k|        InternedNamedNode,
  426|   187k|        InternedTerm,
  427|   187k|        InternedGraphName,
  428|   187k|    ) {
  429|   187k|        (
  430|   187k|            InternedSubject::encoded_into(quad.subject, &mut self.interner),
  431|   187k|            InternedNamedNode::encoded_into(quad.predicate, &mut self.interner),
  432|   187k|            InternedTerm::encoded_into(quad.object, &mut self.interner),
  433|   187k|            InternedGraphName::encoded_into(quad.graph_name, &mut self.interner),
  434|   187k|        )
  435|   187k|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB2_7Dataset12encoded_quad:
  437|  84.7k|    fn encoded_quad(
  438|  84.7k|        &self,
  439|  84.7k|        quad: QuadRef<'_>,
  440|  84.7k|    ) -> Option<(
  441|  84.7k|        InternedSubject,
  442|  84.7k|        InternedNamedNode,
  443|  84.7k|        InternedTerm,
  444|  84.7k|        InternedGraphName,
  445|  84.7k|    )> {
  446|  84.7k|        Some((
  447|  84.7k|            self.encoded_subject(quad.subject)?,
  448|  84.7k|            self.encoded_named_node(quad.predicate)?,
  449|  84.7k|            self.encoded_term(quad.object)?,
  450|  84.7k|            self.encoded_graph_name(quad.graph_name)?,
  451|       |        ))
  452|  84.7k|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB2_7Dataset11decode_spog:
  479|  84.7k|    fn decode_spog(
  480|  84.7k|        &self,
  481|  84.7k|        quad: (
  482|  84.7k|            &InternedSubject,
  483|  84.7k|            &InternedNamedNode,
  484|  84.7k|            &InternedTerm,
  485|  84.7k|            &InternedGraphName,
  486|  84.7k|        ),
  487|  84.7k|    ) -> QuadRef<'_> {
  488|  84.7k|        QuadRef {
  489|  84.7k|            subject: quad.0.decode_from(&self.interner),
  490|  84.7k|            predicate: quad.1.decode_from(&self.interner),
  491|  84.7k|            object: quad.2.decode_from(&self.interner),
  492|  84.7k|            graph_name: quad.3.decode_from(&self.interner),
  493|  84.7k|        }
  494|  84.7k|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB2_7Dataset12canonicalize:
  539|  5.30k|    pub fn canonicalize(&mut self, algorithm: CanonicalizationAlgorithm) {
  540|  5.30k|        let bnode_mapping = self.canonicalize_interned_blank_nodes(algorithm);
  541|  5.30k|        let new_quads = self.map_blank_nodes(&bnode_mapping);
  542|  5.30k|        self.clear();
  543|   174k|        for quad in new_quads {
  544|   169k|            self.insert_encoded(quad);
  545|   169k|        }
  546|  5.30k|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB2_7Dataset33canonicalize_interned_blank_nodes:
  562|  5.30k|    fn canonicalize_interned_blank_nodes(
  563|  5.30k|        &self,
  564|  5.30k|        algorithm: CanonicalizationAlgorithm,
  565|  5.30k|    ) -> HashMap<InternedBlankNode, BlankNode> {
  566|  5.30k|        match algorithm {
  567|  5.30k|            CanonicalizationAlgorithm::Unstable => {
  568|  5.30k|                let bnodes = self.blank_nodes();
  569|  5.30k|                let quads_per_blank_node = self.quads_per_blank_nodes();
  570|  5.30k|                let (hash, partition) = self.hash_bnodes(
  571|  5.30k|                    bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
  572|  5.30k|                    &quads_per_blank_node,
  573|  5.30k|                );
  574|  5.30k|                self.distinguish(hash, &partition, &quads_per_blank_node)
  575|  5.30k|                    .into_iter()
  576|  5.30k|                    .map(|(from, to)| (from, BlankNode::new_from_unique_id(to.into())))
  577|  5.30k|                    .collect()
  578|  5.30k|            }
  579|  5.30k|        }
  580|  5.30k|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB2_7Dataset11blank_nodes:
  582|  5.30k|    fn blank_nodes(&self) -> HashSet<InternedBlankNode> {
  583|  5.30k|        let mut bnodes = HashSet::new();
  584|   174k|        for (g, s, _, o) in &self.gspo {
  585|   169k|            if let InternedSubject::BlankNode(bnode) = s {
  586|  9.42k|                bnodes.insert(*bnode);
  587|   160k|            }
  588|       |            #[cfg(feature = "rdf-star")]
  589|   169k|            if let InternedSubject::Triple(triple) = s {
  590|   142k|                Self::triple_blank_nodes(triple, &mut bnodes);
  591|   142k|            }
  592|   169k|            if let InternedTerm::BlankNode(bnode) = o {
  593|  2.21k|                bnodes.insert(*bnode);
  594|   167k|            }
  595|       |            #[cfg(feature = "rdf-star")]
  596|   169k|            if let InternedTerm::Triple(triple) = o {
  597|  1.35k|                Self::triple_blank_nodes(triple, &mut bnodes);
  598|   168k|            }
  599|   169k|            if let InternedGraphName::BlankNode(bnode) = g {
  600|    544|                bnodes.insert(*bnode);
  601|   168k|            }
  602|       |        }
  603|  5.30k|        bnodes
  604|  5.30k|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB2_7Dataset18triple_blank_nodes:
  607|  3.63M|    fn triple_blank_nodes(triple: &InternedTriple, bnodes: &mut HashSet<InternedBlankNode>) {
  608|  3.63M|        if let InternedSubject::BlankNode(bnode) = &triple.subject {
  609|    354|            bnodes.insert(*bnode);
  610|  3.63M|        } else if let InternedSubject::Triple(t) = &triple.subject {
  611|  3.49M|            Self::triple_blank_nodes(t, bnodes);
  612|  3.49M|        }
  613|  3.63M|        if let InternedTerm::BlankNode(bnode) = &triple.object {
  614|    496|            bnodes.insert(*bnode);
  615|  3.63M|        } else if let InternedTerm::Triple(t) = &triple.object {
  616|     72|            Self::triple_blank_nodes(t, bnodes);
  617|  3.63M|        }
  618|  3.63M|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB2_7Dataset21quads_per_blank_nodes:
  620|  5.30k|    fn quads_per_blank_nodes(&self) -> QuadsPerBlankNode {
  621|  5.30k|        let mut map: HashMap<_, Vec<_>> = HashMap::new();
  622|   174k|        for quad in &self.spog {
  623|   169k|            if let InternedSubject::BlankNode(bnode) = &quad.0 {
  624|  9.42k|                map.entry(*bnode).or_default().push(quad.clone());
  625|   160k|            }
  626|       |            #[cfg(feature = "rdf-star")]
  627|   169k|            if let InternedSubject::Triple(t) = &quad.0 {
  628|   142k|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  629|   142k|            }
  630|   169k|            if let InternedTerm::BlankNode(bnode) = &quad.2 {
  631|  2.21k|                map.entry(*bnode).or_default().push(quad.clone());
  632|   167k|            }
  633|       |            #[cfg(feature = "rdf-star")]
  634|   169k|            if let InternedTerm::Triple(t) = &quad.2 {
  635|  1.35k|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  636|   168k|            }
  637|   169k|            if let InternedGraphName::BlankNode(bnode) = &quad.3 {
  638|    544|                map.entry(*bnode).or_default().push(quad.clone());
  639|   168k|            }
  640|       |        }
  641|  5.30k|        map
  642|  5.30k|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB2_7Dataset55add_quad_with_quoted_triple_to_quad_per_blank_nodes_map:
  645|  3.63M|    fn add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(
  646|  3.63M|        quad: &(
  647|  3.63M|            InternedSubject,
  648|  3.63M|            InternedNamedNode,
  649|  3.63M|            InternedTerm,
  650|  3.63M|            InternedGraphName,
  651|  3.63M|        ),
  652|  3.63M|        triple: &InternedTriple,
  653|  3.63M|        map: &mut QuadsPerBlankNode,
  654|  3.63M|    ) {
  655|  3.63M|        if let InternedSubject::BlankNode(bnode) = &triple.subject {
  656|    354|            map.entry(*bnode).or_default().push(quad.clone());
  657|  3.63M|        }
  658|  3.63M|        if let InternedSubject::Triple(t) = &triple.subject {
  659|  3.49M|            Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, map);
  660|  3.49M|        }
  661|  3.63M|        if let InternedTerm::BlankNode(bnode) = &triple.object {
  662|    496|            map.entry(*bnode).or_default().push(quad.clone());
  663|  3.63M|        }
  664|  3.63M|        if let InternedTerm::Triple(t) = &triple.object {
  665|     72|            Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, map);
  666|  3.63M|        }
  667|  3.63M|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB2_7Dataset11hash_bnodes:
  669|  14.6k|    fn hash_bnodes(
  670|  14.6k|        &self,
  671|  14.6k|        mut hashes: HashMap<InternedBlankNode, u64>,
  672|  14.6k|        quads_per_blank_node: &QuadsPerBlankNode,
  673|  14.6k|    ) -> (
  674|  14.6k|        HashMap<InternedBlankNode, u64>,
  675|  14.6k|        Vec<(u64, Vec<InternedBlankNode>)>,
  676|  14.6k|    ) {
  677|  14.6k|        let mut to_hash = Vec::new();
  678|  14.6k|        let mut to_do = hashes
  679|  14.6k|            .keys()
  680|  14.6k|            .map(|bnode| (*bnode, true))
  681|  14.6k|            .collect::<HashMap<_, _>>();
  682|  14.6k|        let mut partition = HashMap::<_, Vec<_>>::with_capacity(hashes.len());
  683|  14.6k|        let mut old_partition_count = usize::MAX;
  684|  44.0k|        while old_partition_count != partition.len() {
  685|  29.3k|            old_partition_count = partition.len();
  686|  29.3k|            partition.clear();
  687|  29.3k|            let mut new_hashes = hashes.clone();
  688|  89.9k|            for bnode in hashes.keys() {
  689|  89.9k|                let hash = if to_do.contains_key(bnode) {
  690|  94.5k|                    for (s, p, o, g) in &quads_per_blank_node[bnode] {
  691|  94.5k|                        to_hash.push((
  692|  94.5k|                            self.hash_subject(s, *bnode, &hashes),
  693|  94.5k|                            self.hash_named_node(*p),
  694|  94.5k|                            self.hash_term(o, *bnode, &hashes),
  695|  94.5k|                            self.hash_graph_name(g, *bnode, &hashes),
  696|  94.5k|                        ));
  697|  94.5k|                    }
  698|  89.9k|                    to_hash.sort_unstable();
  699|  89.9k|                    let hash = Self::hash_tuple((&to_hash, hashes[bnode]));
  700|  89.9k|                    to_hash.clear();
  701|  89.9k|                    if hash == hashes[bnode] {
  702|      0|                        to_do.insert(*bnode, false);
  703|  89.9k|                    } else {
  704|  89.9k|                        new_hashes.insert(*bnode, hash);
  705|  89.9k|                    }
  706|  89.9k|                    hash
  707|       |                } else {
  708|      0|                    hashes[bnode]
  709|       |                };
  710|  89.9k|                partition.entry(hash).or_default().push(*bnode);
  711|       |            }
  712|  29.3k|            hashes = new_hashes;
  713|       |        }
  714|  14.6k|        let mut partition: Vec<_> = partition.into_iter().collect();
  715|  14.6k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));
  716|  14.6k|        (hashes, partition)
  717|  14.6k|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB2_7Dataset15hash_named_node:
  719|   113k|    fn hash_named_node(&self, node: InternedNamedNode) -> u64 {
  720|   113k|        Self::hash_tuple(node.decode_from(&self.interner))
  721|   113k|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB2_7Dataset15hash_blank_node:
  723|   107k|    fn hash_blank_node(
  724|   107k|        node: InternedBlankNode,
  725|   107k|        current_blank_node: InternedBlankNode,
  726|   107k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  727|   107k|    ) -> u64 {
  728|   107k|        if node == current_blank_node {
  729|  94.5k|            u64::MAX
  730|       |        } else {
  731|  12.9k|            bnodes_hash[&node]
  732|       |        }
  733|   107k|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB2_7Dataset12hash_subject:
  735|   113k|    fn hash_subject(
  736|   113k|        &self,
  737|   113k|        node: &InternedSubject,
  738|   113k|        current_blank_node: InternedBlankNode,
  739|   113k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  740|   113k|    ) -> u64 {
  741|   113k|        match node {
  742|  34.1k|            InternedSubject::NamedNode(node) => Self::hash_tuple(node.decode_from(&self.interner)),
  743|  74.5k|            InternedSubject::BlankNode(bnode) => {
  744|  74.5k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  745|       |            }
  746|       |            #[cfg(feature = "rdf-star")]
  747|  4.26k|            InternedSubject::Triple(triple) => {
  748|  4.26k|                self.hash_triple(triple, current_blank_node, bnodes_hash)
  749|       |            }
  750|       |        }
  751|   113k|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB2_7Dataset9hash_term:
  753|   113k|    fn hash_term(
  754|   113k|        &self,
  755|   113k|        term: &InternedTerm,
  756|   113k|        current_blank_node: InternedBlankNode,
  757|   113k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  758|   113k|    ) -> u64 {
  759|   113k|        match term {
  760|  6.40k|            InternedTerm::NamedNode(node) => Self::hash_tuple(node.decode_from(&self.interner)),
  761|  24.4k|            InternedTerm::BlankNode(bnode) => {
  762|  24.4k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  763|       |            }
  764|  67.9k|            InternedTerm::Literal(literal) => Self::hash_tuple(literal.decode_from(&self.interner)),
  765|       |            #[cfg(feature = "rdf-star")]
  766|  14.2k|            InternedTerm::Triple(triple) => {
  767|  14.2k|                self.hash_triple(triple, current_blank_node, bnodes_hash)
  768|       |            }
  769|       |        }
  770|   113k|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB2_7Dataset15hash_graph_name:
  772|  94.5k|    fn hash_graph_name(
  773|  94.5k|        &self,
  774|  94.5k|        graph_name: &InternedGraphName,
  775|  94.5k|        current_blank_node: InternedBlankNode,
  776|  94.5k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  777|  94.5k|    ) -> u64 {
  778|  94.5k|        match graph_name {
  779|  11.0k|            InternedGraphName::NamedNode(node) => {
  780|  11.0k|                Self::hash_tuple(node.decode_from(&self.interner))
  781|       |            }
  782|  8.49k|            InternedGraphName::BlankNode(bnode) => {
  783|  8.49k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  784|       |            }
  785|  74.9k|            InternedGraphName::DefaultGraph => 0,
  786|       |        }
  787|  94.5k|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB2_7Dataset11hash_triple:
  790|  18.4k|    fn hash_triple(
  791|  18.4k|        &self,
  792|  18.4k|        triple: &InternedTriple,
  793|  18.4k|        current_blank_node: InternedBlankNode,
  794|  18.4k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  795|  18.4k|    ) -> u64 {
  796|  18.4k|        Self::hash_tuple((
  797|  18.4k|            self.hash_subject(&triple.subject, current_blank_node, bnodes_hash),
  798|  18.4k|            self.hash_named_node(triple.predicate),
  799|  18.4k|            self.hash_term(&triple.object, current_blank_node, bnodes_hash),
  800|  18.4k|        ))
  801|  18.4k|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB2_7Dataset11distinguish:
  809|  14.6k|    fn distinguish(
  810|  14.6k|        &self,
  811|  14.6k|        hash: HashMap<InternedBlankNode, u64>,
  812|  14.6k|        partition: &[(u64, Vec<InternedBlankNode>)],
  813|  14.6k|        quads_per_blank_node: &QuadsPerBlankNode,
  814|  14.6k|    ) -> HashMap<InternedBlankNode, u64> {
  815|  14.6k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
  816|  14.6k|        if let Some(b_prime) = b_prime {
  817|  4.17k|            b_prime
  818|  4.17k|                .iter()
  819|  4.17k|                .map(|b| {
  820|       |                    let mut hash_prime = hash.clone();
  821|       |                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  822|       |                    let (hash_prime_prime, partition_prime) =
  823|       |                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  824|       |                    self.distinguish(hash_prime_prime, &partition_prime, quads_per_blank_node)
  825|  4.17k|                })
  826|  4.17k|                .reduce(|a, b| {
  827|       |                    let mut a_hashes = a.values().collect::<Vec<_>>();
  828|       |                    a_hashes.sort();
  829|       |                    let mut b_hashes = a.values().collect::<Vec<_>>();
  830|       |                    b_hashes.sort();
  831|       |                    if a_hashes <= b_hashes {
  832|       |                        a
  833|       |                    } else {
  834|       |                        b
  835|       |                    }
  836|  4.17k|                })
  837|  4.17k|                .unwrap_or_default()
  838|       |        } else {
  839|  10.5k|            hash
  840|       |        }
  841|  14.6k|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB2_7Dataset15map_blank_nodes:
  844|  5.30k|    fn map_blank_nodes(
  845|  5.30k|        &mut self,
  846|  5.30k|        bnode_mapping: &HashMap<InternedBlankNode, BlankNode>,
  847|  5.30k|    ) -> Vec<(
  848|  5.30k|        InternedSubject,
  849|  5.30k|        InternedNamedNode,
  850|  5.30k|        InternedTerm,
  851|  5.30k|        InternedGraphName,
  852|  5.30k|    )> {
  853|  5.30k|        let old_quads: Vec<_> = self.spog.iter().cloned().collect();
  854|  5.30k|        old_quads
  855|  5.30k|            .into_iter()
  856|  5.30k|            .map(|(s, p, o, g)| {
  857|       |                (
  858|       |                    match s {
  859|       |                        InternedSubject::NamedNode(_) => s,
  860|       |                        InternedSubject::BlankNode(bnode) => {
  861|       |                            InternedSubject::BlankNode(InternedBlankNode::encoded_into(
  862|       |                                bnode_mapping[&bnode].as_ref(),
  863|       |                                &mut self.interner,
  864|       |                            ))
  865|       |                        }
  866|       |                        #[cfg(feature = "rdf-star")]
  867|       |                        InternedSubject::Triple(triple) => {
  868|       |                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  869|       |                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  870|       |                                &mut self.interner,
  871|       |                            )))
  872|       |                        }
  873|       |                    },
  874|       |                    p,
  875|       |                    match o {
  876|       |                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  877|       |                        InternedTerm::BlankNode(bnode) => {
  878|       |                            InternedTerm::BlankNode(InternedBlankNode::encoded_into(
  879|       |                                bnode_mapping[&bnode].as_ref(),
  880|       |                                &mut self.interner,
  881|       |                            ))
  882|       |                        }
  883|       |                        #[cfg(feature = "rdf-star")]
  884|       |                        InternedTerm::Triple(triple) => {
  885|       |                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  886|       |                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  887|       |                                &mut self.interner,
  888|       |                            )))
  889|       |                        }
  890|       |                    },
  891|       |                    match g {
  892|       |                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  893|       |                        InternedGraphName::BlankNode(bnode) => {
  894|       |                            InternedGraphName::BlankNode(InternedBlankNode::encoded_into(
  895|       |                                bnode_mapping[&bnode].as_ref(),
  896|       |                                &mut self.interner,
  897|       |                            ))
  898|       |                        }
  899|       |                    },
  900|       |                )
  901|  5.30k|            })
  902|  5.30k|            .collect()
  903|  5.30k|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB2_7Dataset22map_triple_blank_nodes:
  906|  3.63M|    fn map_triple_blank_nodes(
  907|  3.63M|        &mut self,
  908|  3.63M|        triple: &InternedTriple,
  909|  3.63M|        bnode_mapping: &HashMap<InternedBlankNode, BlankNode>,
  910|  3.63M|    ) -> Triple {
  911|       |        Triple {
  912|  3.63M|            subject: if let InternedSubject::BlankNode(bnode) = &triple.subject {
  913|    354|                bnode_mapping[bnode].clone().into()
  914|  3.63M|            } else if let InternedSubject::Triple(t) = &triple.subject {
  915|  3.49M|                self.map_triple_blank_nodes(t, bnode_mapping).into()
  916|       |            } else {
  917|   143k|                triple.subject.decode_from(&self.interner).into_owned()
  918|       |            },
  919|  3.63M|            predicate: triple.predicate.decode_from(&self.interner).into_owned(),
  920|  3.63M|            object: if let InternedTerm::BlankNode(bnode) = &triple.object {
  921|    496|                bnode_mapping[bnode].clone().into()
  922|  3.63M|            } else if let InternedTerm::Triple(t) = &triple.object {
  923|     72|                self.map_triple_blank_nodes(t, bnode_mapping).into()
  924|       |            } else {
  925|  3.63M|                triple.object.decode_from(&self.interner).into_owned()
  926|       |            },
  927|       |        }
  928|  3.63M|    }
_RNvXs_NtCs23GeP7cdX8Z_5oxrdf7datasetNtB4_7DatasetNtNtCscdEvteftVc2_4core3cmp9PartialEq2eq:
  932|  2.65k|    fn eq(&self, other: &Self) -> bool {
  933|  2.65k|        if self.len() != other.len() {
  934|      0|            return false;
  935|  2.65k|        }
  936|  87.3k|        for q in self {
  937|  84.7k|            if !other.contains(q) {
  938|      0|                return false;
  939|  84.7k|            }
  940|       |        }
  941|  2.65k|        true
  942|  2.65k|    }
_RNvXs1_NtCs23GeP7cdX8Z_5oxrdf7datasetRNtB5_7DatasetNtNtNtNtCscdEvteftVc2_4core4iter6traits7collect12IntoIterator9into_iter:
  951|  2.65k|    fn into_iter(self) -> Self::IntoIter {
  952|  2.65k|        self.iter()
  953|  2.65k|    }
_RNvXsg_NtCs23GeP7cdX8Z_5oxrdf7datasetNtB5_4IterNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next:
 1551|  87.3k|    fn next(&mut self) -> Option<Self::Item> {
 1552|  87.3k|        self.inner
 1553|  87.3k|            .next()
 1554|  87.3k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))
 1555|  87.3k|    }
_RINvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB3_7Dataset8containsNtNtB5_6triple7QuadRefEB5_:
  341|  84.7k|    pub fn contains<'a>(&self, quad: impl Into<QuadRef<'a>>) -> bool {
  342|  84.7k|        if let Some(q) = self.encoded_quad(quad.into()) {
  343|  84.7k|            self.spog.contains(&q)
  344|       |        } else {
  345|      0|            false
  346|       |        }
  347|  84.7k|    }
_RINvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB3_7Dataset18encoded_named_nodeNtNtB5_10named_node12NamedNodeRefEB5_:
  454|  84.7k|    pub(super) fn encoded_named_node<'a>(
  455|  84.7k|        &self,
  456|  84.7k|        node: impl Into<NamedNodeRef<'a>>,
  457|  84.7k|    ) -> Option<InternedNamedNode> {
  458|  84.7k|        InternedNamedNode::encoded_from(node.into(), &self.interner)
  459|  84.7k|    }
_RINvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB3_7Dataset15encoded_subjectNtNtB5_6triple10SubjectRefEB5_:
  461|  84.7k|    pub(super) fn encoded_subject<'a>(
  462|  84.7k|        &self,
  463|  84.7k|        node: impl Into<SubjectRef<'a>>,
  464|  84.7k|    ) -> Option<InternedSubject> {
  465|  84.7k|        InternedSubject::encoded_from(node.into(), &self.interner)
  466|  84.7k|    }
_RINvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB3_7Dataset12encoded_termNtNtB5_6triple7TermRefEB5_:
  468|  84.7k|    pub(super) fn encoded_term<'a>(&self, term: impl Into<TermRef<'a>>) -> Option<InternedTerm> {
  469|  84.7k|        InternedTerm::encoded_from(term.into(), &self.interner)
  470|  84.7k|    }
_RINvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB3_7Dataset18encoded_graph_nameNtNtB5_6triple12GraphNameRefEB5_:
  472|  84.7k|    pub(super) fn encoded_graph_name<'a>(
  473|  84.7k|        &self,
  474|  84.7k|        graph_name: impl Into<GraphNameRef<'a>>,
  475|  84.7k|    ) -> Option<InternedGraphName> {
  476|  84.7k|        InternedGraphName::encoded_from(graph_name.into(), &self.interner)
  477|  84.7k|    }
_RNCNvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB4_7Dataset33canonicalize_interned_blank_nodes0B6_:
  571|  11.0k|                    bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
_RNCNvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB4_7Dataset33canonicalize_interned_blank_nodess_0B6_:
  576|  11.0k|                    .map(|(from, to)| (from, BlankNode::new_from_unique_id(to.into())))
_RNCNvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB4_7Dataset11hash_bnodes0B6_:
  680|  44.8k|            .map(|bnode| (*bnode, true))
_RNCNvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB4_7Dataset11hash_bnodess_0B6_:
  715|  35.8k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));
_RINvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB3_7Dataset10hash_tupleNtNtB5_10named_node12NamedNodeRefEB5_:
  803|   164k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|   164k|        let mut hasher = DefaultHasher::new();
  805|   164k|        v.hash(&mut hasher);
  806|   164k|        hasher.finish()
  807|   164k|    }
_RINvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB3_7Dataset10hash_tupleNtNtB5_7literal10LiteralRefEB5_:
  803|  67.9k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|  67.9k|        let mut hasher = DefaultHasher::new();
  805|  67.9k|        v.hash(&mut hasher);
  806|  67.9k|        hasher.finish()
  807|  67.9k|    }
_RINvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB3_7Dataset10hash_tupleTRINtNtCs3OstG5Tqy1X_5alloc3vec3VecTyyyyEEyEEB5_:
  803|  89.9k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|  89.9k|        let mut hasher = DefaultHasher::new();
  805|  89.9k|        v.hash(&mut hasher);
  806|  89.9k|        hasher.finish()
  807|  89.9k|    }
_RINvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB3_7Dataset10hash_tupleTylEEB5_:
  803|  9.37k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|  9.37k|        let mut hasher = DefaultHasher::new();
  805|  9.37k|        v.hash(&mut hasher);
  806|  9.37k|        hasher.finish()
  807|  9.37k|    }
_RINvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB3_7Dataset10hash_tupleTyyyEEB5_:
  803|  18.4k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|  18.4k|        let mut hasher = DefaultHasher::new();
  805|  18.4k|        v.hash(&mut hasher);
  806|  18.4k|        hasher.finish()
  807|  18.4k|    }
_RNCNvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB4_7Dataset11distinguish0B6_:
  815|  39.4k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
_RNCNvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB4_7Dataset11distinguishs_0B6_:
  815|  39.4k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
_RNCNvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB4_7Dataset11distinguishs0_0B6_:
  819|  9.37k|                .map(|b| {
  820|  9.37k|                    let mut hash_prime = hash.clone();
  821|  9.37k|                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  822|  9.37k|                    let (hash_prime_prime, partition_prime) =
  823|  9.37k|                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  824|  9.37k|                    self.distinguish(hash_prime_prime, &partition_prime, quads_per_blank_node)
  825|  9.37k|                })
_RNCNvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB4_7Dataset11distinguishs1_0B6_:
  826|  5.20k|                .reduce(|a, b| {
  827|  5.20k|                    let mut a_hashes = a.values().collect::<Vec<_>>();
  828|  5.20k|                    a_hashes.sort();
  829|  5.20k|                    let mut b_hashes = a.values().collect::<Vec<_>>();
  830|  5.20k|                    b_hashes.sort();
  831|  5.20k|                    if a_hashes <= b_hashes {
  832|  5.20k|                        a
  833|       |                    } else {
  834|      0|                        b
  835|       |                    }
  836|  5.20k|                })
_RNCNvMNtCs23GeP7cdX8Z_5oxrdf7datasetNtB4_7Dataset15map_blank_nodes0B6_:
  856|   169k|            .map(|(s, p, o, g)| {
  857|   169k|                (
  858|   169k|                    match s {
  859|  17.4k|                        InternedSubject::NamedNode(_) => s,
  860|  9.42k|                        InternedSubject::BlankNode(bnode) => {
  861|  9.42k|                            InternedSubject::BlankNode(InternedBlankNode::encoded_into(
  862|  9.42k|                                bnode_mapping[&bnode].as_ref(),
  863|  9.42k|                                &mut self.interner,
  864|  9.42k|                            ))
  865|       |                        }
  866|       |                        #[cfg(feature = "rdf-star")]
  867|   142k|                        InternedSubject::Triple(triple) => {
  868|   142k|                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  869|   142k|                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  870|   142k|                                &mut self.interner,
  871|   142k|                            )))
  872|       |                        }
  873|       |                    },
  874|   169k|                    p,
  875|   169k|                    match o {
  876|   165k|                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  877|  2.21k|                        InternedTerm::BlankNode(bnode) => {
  878|  2.21k|                            InternedTerm::BlankNode(InternedBlankNode::encoded_into(
  879|  2.21k|                                bnode_mapping[&bnode].as_ref(),
  880|  2.21k|                                &mut self.interner,
  881|  2.21k|                            ))
  882|       |                        }
  883|       |                        #[cfg(feature = "rdf-star")]
  884|  1.35k|                        InternedTerm::Triple(triple) => {
  885|  1.35k|                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  886|  1.35k|                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  887|  1.35k|                                &mut self.interner,
  888|  1.35k|                            )))
  889|       |                        }
  890|       |                    },
  891|   169k|                    match g {
  892|   168k|                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  893|    544|                        InternedGraphName::BlankNode(bnode) => {
  894|    544|                            InternedGraphName::BlankNode(InternedBlankNode::encoded_into(
  895|    544|                                bnode_mapping[&bnode].as_ref(),
  896|    544|                                &mut self.interner,
  897|    544|                            ))
  898|       |                        }
  899|       |                    },
  900|       |                )
  901|   169k|            })
_RNCNvXsg_NtCs23GeP7cdX8Z_5oxrdf7datasetNtB7_4IterNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0B9_:
 1554|  84.7k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))

_RNvMNtCs23GeP7cdX8Z_5oxrdf9interningNtB2_8Interner13get_or_intern:
   18|  21.7M|    fn get_or_intern(&mut self, value: &str) -> Key {
   19|  21.7M|        let mut hash = self.hash(value);
   20|  21.7M|        loop {
   21|  21.7M|            match self.string_for_hash.entry(hash) {
   22|  61.2k|                Entry::Vacant(e) => {
   23|  61.2k|                    e.insert(value.into());
   24|  61.2k|                    return Key(hash);
   25|       |                }
   26|  21.6M|                Entry::Occupied(e) => loop {
   27|  21.6M|                    if e.get() == value {
   28|  21.6M|                        return Key(hash);
   29|      0|                    } else if hash == u64::MAX - 1 {
   30|      0|                        hash = 0;
   31|      0|                    } else {
   32|      0|                        hash += 1;
   33|      0|                    }
   34|       |                },
   35|       |            }
   36|       |        }
   37|  21.7M|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf9interningNtB2_8Interner3get:
   39|  5.49M|    fn get(&self, value: &str) -> Option<Key> {
   40|  5.49M|        let mut hash = self.hash(value);
   41|       |        loop {
   42|  5.49M|            let v = self.string_for_hash.get(&hash)?;
   43|  5.49M|            if v == value {
   44|  5.49M|                return Some(Key(hash));
   45|      0|            } else if hash == u64::MAX - 1 {
   46|      0|                hash = 0;
   47|      0|            } else {
   48|      0|                hash += 1;
   49|      0|            }
   50|       |        }
   51|  5.49M|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf9interningNtB2_8Interner4hash:
   53|  27.2M|    fn hash(&self, value: &str) -> u64 {
   54|  27.2M|        let hash = self.hasher.hash_one(value);
   55|  27.2M|        if hash == u64::MAX {
   56|      0|            0
   57|       |        } else {
   58|  27.2M|            hash
   59|       |        }
   60|  27.2M|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf9interningNtB2_8Interner7resolve:
   62|  11.0M|    fn resolve(&self, key: Key) -> &str {
   63|  11.0M|        &self.string_for_hash[&key.0]
   64|  11.0M|    }
_RNvMs0_NtCs23GeP7cdX8Z_5oxrdf9interningNtB5_17InternedNamedNode12encoded_into:
   90|  15.3M|    pub fn encoded_into(named_node: NamedNodeRef<'_>, interner: &mut Interner) -> Self {
   91|  15.3M|        Self {
   92|  15.3M|            id: interner.get_or_intern(named_node.as_str()),
   93|  15.3M|        }
   94|  15.3M|    }
_RNvMs0_NtCs23GeP7cdX8Z_5oxrdf9interningNtB5_17InternedNamedNode12encoded_from:
   96|  3.89M|    pub fn encoded_from(named_node: NamedNodeRef<'_>, interner: &Interner) -> Option<Self> {
   97|  3.89M|        Some(Self {
   98|  3.89M|            id: interner.get(named_node.as_str())?,
   99|       |        })
  100|  3.89M|    }
_RNvMs0_NtCs23GeP7cdX8Z_5oxrdf9interningNtB5_17InternedNamedNode11decode_from:
  102|  7.81M|    pub fn decode_from(self, interner: &Interner) -> NamedNodeRef<'_> {
  103|  7.81M|        NamedNodeRef::new_unchecked(interner.resolve(self.id))
  104|  7.81M|    }
_RNvMs1_NtCs23GeP7cdX8Z_5oxrdf9interningNtB5_17InternedBlankNode12encoded_into:
  128|  26.1k|    pub fn encoded_into(blank_node: BlankNodeRef<'_>, interner: &mut Interner) -> Self {
  129|  26.1k|        if let Some(id) = blank_node.unique_id() {
  130|  25.0k|            interner
  131|  25.0k|                .string_for_blank_node_id
  132|  25.0k|                .entry(id)
  133|  25.0k|                .or_insert_with(|| blank_node.as_str().into());
  134|  25.0k|            Self::Number { id }
  135|       |        } else {
  136|  1.02k|            Self::Other {
  137|  1.02k|                id: interner.get_or_intern(blank_node.as_str()),
  138|  1.02k|            }
  139|       |        }
  140|  26.1k|    }
_RNvMs1_NtCs23GeP7cdX8Z_5oxrdf9interningNtB5_17InternedBlankNode12encoded_from:
  142|  6.51k|    pub fn encoded_from(blank_node: BlankNodeRef<'_>, interner: &Interner) -> Option<Self> {
  143|  6.51k|        if let Some(id) = blank_node.unique_id() {
  144|  6.51k|            interner
  145|  6.51k|                .string_for_blank_node_id
  146|  6.51k|                .contains_key(&id)
  147|  6.51k|                .then_some(Self::Number { id })
  148|       |        } else {
  149|       |            Some(Self::Other {
  150|      0|                id: interner.get(blank_node.as_str())?,
  151|       |            })
  152|       |        }
  153|  6.51k|    }
_RNvMs1_NtCs23GeP7cdX8Z_5oxrdf9interningNtB5_17InternedBlankNode11decode_from:
  155|  6.09k|    pub fn decode_from(self, interner: &Interner) -> BlankNodeRef<'_> {
  156|  6.09k|        BlankNodeRef::new_unchecked(match self {
  157|  6.09k|            Self::Number { id } => &interner.string_for_blank_node_id[&id],
  158|      0|            Self::Other { id } => interner.resolve(id),
  159|       |        })
  160|  6.09k|    }
_RNvMs2_NtCs23GeP7cdX8Z_5oxrdf9interningNtB5_15InternedLiteral12encoded_into:
  188|  6.33M|    pub fn encoded_into(literal: LiteralRef<'_>, interner: &mut Interner) -> Self {
  189|  6.33M|        let value_id = interner.get_or_intern(literal.value());
  190|  6.33M|        if literal.is_plain() {
  191|  2.45k|            if let Some(language) = literal.language() {
  192|    824|                Self::LanguageTaggedString {
  193|    824|                    value_id,
  194|    824|                    language_id: interner.get_or_intern(language),
  195|    824|                }
  196|       |            } else {
  197|  1.62k|                Self::String { value_id }
  198|       |            }
  199|       |        } else {
  200|  6.33M|            Self::TypedLiteral {
  201|  6.33M|                value_id,
  202|  6.33M|                datatype: InternedNamedNode::encoded_into(literal.datatype(), interner),
  203|  6.33M|            }
  204|       |        }
  205|  6.33M|    }
_RNvMs2_NtCs23GeP7cdX8Z_5oxrdf9interningNtB5_15InternedLiteral12encoded_from:
  207|  1.60M|    pub fn encoded_from(literal: LiteralRef<'_>, interner: &Interner) -> Option<Self> {
  208|  1.60M|        let value_id = interner.get(literal.value())?;
  209|  1.60M|        Some(if literal.is_plain() {
  210|  1.07k|            if let Some(language) = literal.language() {
  211|       |                Self::LanguageTaggedString {
  212|    376|                    value_id,
  213|    376|                    language_id: interner.get(language)?,
  214|       |                }
  215|       |            } else {
  216|    695|                Self::String { value_id }
  217|       |            }
  218|       |        } else {
  219|       |            Self::TypedLiteral {
  220|  1.60M|                value_id,
  221|  1.60M|                datatype: InternedNamedNode::encoded_from(literal.datatype(), interner)?,
  222|       |            }
  223|       |        })
  224|  1.60M|    }
_RNvMs2_NtCs23GeP7cdX8Z_5oxrdf9interningNtB5_15InternedLiteral11decode_from:
  226|  3.19M|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> LiteralRef<'a> {
  227|  3.19M|        match self {
  228|  13.6k|            Self::String { value_id } => {
  229|  13.6k|                LiteralRef::new_simple_literal(interner.resolve(*value_id))
  230|       |            }
  231|       |            Self::LanguageTaggedString {
  232|  3.01k|                value_id,
  233|  3.01k|                language_id,
  234|  3.01k|            } => LiteralRef::new_language_tagged_literal_unchecked(
  235|  3.01k|                interner.resolve(*value_id),
  236|  3.01k|                interner.resolve(*language_id),
  237|  3.01k|            ),
  238|  3.18M|            Self::TypedLiteral { value_id, datatype } => LiteralRef::new_typed_literal(
  239|  3.18M|                interner.resolve(*value_id),
  240|  3.18M|                datatype.decode_from(interner),
  241|  3.18M|            ),
  242|       |        }
  243|  3.19M|    }
_RNvMs3_NtCs23GeP7cdX8Z_5oxrdf9interningNtB5_15InternedSubject12encoded_into:
  274|  7.52M|    pub fn encoded_into(node: SubjectRef<'_>, interner: &mut Interner) -> Self {
  275|  7.52M|        match node {
  276|   322k|            SubjectRef::NamedNode(node) => {
  277|   322k|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  278|       |            }
  279|  10.1k|            SubjectRef::BlankNode(node) => {
  280|  10.1k|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  281|       |            }
  282|       |            #[cfg(feature = "rdf-star")]
  283|  7.19M|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  284|  7.19M|                triple.as_ref(),
  285|  7.19M|                interner,
  286|  7.19M|            ))),
  287|       |        }
  288|  7.52M|    }
_RNvMs3_NtCs23GeP7cdX8Z_5oxrdf9interningNtB5_15InternedSubject12encoded_from:
  290|  1.90M|    pub fn encoded_from(node: SubjectRef<'_>, interner: &Interner) -> Option<Self> {
  291|  1.90M|        Some(match node {
  292|  80.5k|            SubjectRef::NamedNode(node) => {
  293|  80.5k|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  294|       |            }
  295|  4.88k|            SubjectRef::BlankNode(node) => {
  296|  4.88k|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  297|       |            }
  298|       |            #[cfg(feature = "rdf-star")]
  299|  1.81M|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  300|  1.81M|                triple.as_ref(),
  301|  1.81M|                interner,
  302|  1.81M|            )?)),
  303|       |        })
  304|  1.90M|    }
_RNvMs3_NtCs23GeP7cdX8Z_5oxrdf9interningNtB5_15InternedSubject11decode_from:
  306|   228k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> SubjectRef<'a> {
  307|   228k|        match self {
  308|   152k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.decode_from(interner)),
  309|  4.71k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.decode_from(interner)),
  310|       |            #[cfg(feature = "rdf-star")]
  311|  71.3k|            Self::Triple(triple) => SubjectRef::Triple(&interner.triples[triple.as_ref()]),
  312|       |        }
  313|   228k|    }
_RNvMs4_NtCs23GeP7cdX8Z_5oxrdf9interningNtB5_17InternedGraphName12encoded_into:
  341|   187k|    pub fn encoded_into(node: GraphNameRef<'_>, interner: &mut Interner) -> Self {
  342|   187k|        match node {
  343|   162k|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  344|  23.5k|            GraphNameRef::NamedNode(node) => {
  345|  23.5k|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  346|       |            }
  347|    544|            GraphNameRef::BlankNode(node) => {
  348|    544|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  349|       |            }
  350|       |        }
  351|   187k|    }
_RNvMs4_NtCs23GeP7cdX8Z_5oxrdf9interningNtB5_17InternedGraphName12encoded_from:
  353|  84.7k|    pub fn encoded_from(node: GraphNameRef<'_>, interner: &Interner) -> Option<Self> {
  354|  84.7k|        Some(match node {
  355|  74.0k|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  356|  10.4k|            GraphNameRef::NamedNode(node) => {
  357|  10.4k|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  358|       |            }
  359|    272|            GraphNameRef::BlankNode(node) => {
  360|    272|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  361|       |            }
  362|       |        })
  363|  84.7k|    }
_RNvMs4_NtCs23GeP7cdX8Z_5oxrdf9interningNtB5_17InternedGraphName11decode_from:
  365|  84.7k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> GraphNameRef<'a> {
  366|  84.7k|        match self {
  367|  74.0k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  368|  10.4k|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.decode_from(interner)),
  369|    272|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.decode_from(interner)),
  370|       |        }
  371|  84.7k|    }
_RNvMs5_NtCs23GeP7cdX8Z_5oxrdf9interningNtB5_12InternedTerm12encoded_into:
  400|  7.52M|    pub fn encoded_into(term: TermRef<'_>, interner: &mut Interner) -> Self {
  401|  7.52M|        match term {
  402|  1.18M|            TermRef::NamedNode(term) => {
  403|  1.18M|                Self::NamedNode(InternedNamedNode::encoded_into(term, interner))
  404|       |            }
  405|  3.21k|            TermRef::BlankNode(term) => {
  406|  3.21k|                Self::BlankNode(InternedBlankNode::encoded_into(term, interner))
  407|       |            }
  408|  6.33M|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_into(term, interner)),
  409|       |            #[cfg(feature = "rdf-star")]
  410|  1.78k|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  411|  1.78k|                triple.as_ref(),
  412|  1.78k|                interner,
  413|  1.78k|            ))),
  414|       |        }
  415|  7.52M|    }
_RNvMs5_NtCs23GeP7cdX8Z_5oxrdf9interningNtB5_12InternedTerm12encoded_from:
  417|  1.90M|    pub fn encoded_from(term: TermRef<'_>, interner: &Interner) -> Option<Self> {
  418|  1.90M|        Some(match term {
  419|   299k|            TermRef::NamedNode(term) => {
  420|   299k|                Self::NamedNode(InternedNamedNode::encoded_from(term, interner)?)
  421|       |            }
  422|  1.35k|            TermRef::BlankNode(term) => {
  423|  1.35k|                Self::BlankNode(InternedBlankNode::encoded_from(term, interner)?)
  424|       |            }
  425|  1.60M|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_from(term, interner)?),
  426|       |            #[cfg(feature = "rdf-star")]
  427|    712|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  428|    712|                triple.as_ref(),
  429|    712|                interner,
  430|    712|            )?)),
  431|       |        })
  432|  1.90M|    }
_RNvMs5_NtCs23GeP7cdX8Z_5oxrdf9interningNtB5_12InternedTerm11decode_from:
  434|  3.72M|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> TermRef<'a> {
  435|  3.72M|        match self {
  436|   587k|            Self::NamedNode(term) => TermRef::NamedNode(term.decode_from(interner)),
  437|  1.10k|            Self::BlankNode(term) => TermRef::BlankNode(term.decode_from(interner)),
  438|  3.13M|            Self::Literal(term) => TermRef::Literal(term.decode_from(interner)),
  439|       |            #[cfg(feature = "rdf-star")]
  440|    676|            Self::Triple(triple) => TermRef::Triple(&interner.triples[triple.as_ref()]),
  441|       |        }
  442|  3.72M|    }
_RNvMs6_NtCs23GeP7cdX8Z_5oxrdf9interningNtB5_14InternedTriple12encoded_into:
  472|  7.34M|    pub fn encoded_into(triple: TripleRef<'_>, interner: &mut Interner) -> Self {
  473|  7.34M|        let interned_triple = Self {
  474|  7.34M|            subject: InternedSubject::encoded_into(triple.subject, interner),
  475|  7.34M|            predicate: InternedNamedNode::encoded_into(triple.predicate, interner),
  476|  7.34M|            object: InternedTerm::encoded_into(triple.object, interner),
  477|  7.34M|        };
  478|  7.34M|        interner
  479|  7.34M|            .triples
  480|  7.34M|            .insert(interned_triple.clone(), triple.into_owned());
  481|  7.34M|        interned_triple
  482|  7.34M|    }
_RNvMs6_NtCs23GeP7cdX8Z_5oxrdf9interningNtB5_14InternedTriple12encoded_from:
  484|  1.81M|    pub fn encoded_from(triple: TripleRef<'_>, interner: &Interner) -> Option<Self> {
  485|  1.81M|        let interned_triple = Self {
  486|  1.81M|            subject: InternedSubject::encoded_from(triple.subject, interner)?,
  487|  1.81M|            predicate: InternedNamedNode::encoded_from(triple.predicate, interner)?,
  488|  1.81M|            object: InternedTerm::encoded_from(triple.object, interner)?,
  489|       |        };
  490|  1.81M|        interner
  491|  1.81M|            .triples
  492|  1.81M|            .contains_key(&interned_triple)
  493|  1.81M|            .then_some(interned_triple)
  494|  1.81M|    }
_RNvXs7_NtCs23GeP7cdX8Z_5oxrdf9interningNtB5_21IdentityHasherBuilderNtNtCscdEvteftVc2_4core4hash11BuildHasher12build_hasher:
  511|  38.3M|    fn build_hasher(&self) -> Self::Hasher {
  512|  38.3M|        Self::Hasher::default()
  513|  38.3M|    }
_RNvXs8_NtCs23GeP7cdX8Z_5oxrdf9interningNtB5_14IdentityHasherNtNtCscdEvteftVc2_4core4hash6Hasher6finish:
  522|  38.3M|    fn finish(&self) -> u64 {
  523|  38.3M|        self.value
  524|  38.3M|    }
_RNvXs8_NtCs23GeP7cdX8Z_5oxrdf9interningNtB5_14IdentityHasherNtNtCscdEvteftVc2_4core4hash6Hasher9write_u64:
  530|  38.3M|    fn write_u64(&mut self, i: u64) {
  531|  38.3M|        self.value = i
  532|  38.3M|    }
_RNCNvMs1_NtCs23GeP7cdX8Z_5oxrdf9interningNtB7_17InternedBlankNode12encoded_into0B9_:
  133|  21.2k|                .or_insert_with(|| blank_node.as_str().into());

_RNvMNtCs23GeP7cdX8Z_5oxrdf7literalNtB2_7Literal6as_refCs7EVUVIOgNrt_4trig:
  129|   366k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|   366k|        LiteralRef(match &self.0 {
  131|  8.37k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|  2.49k|            LiteralContent::LanguageTaggedString { value, language } => {
  133|  2.49k|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|   355k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|   355k|                value,
  137|   355k|                datatype: datatype.as_ref(),
  138|   355k|            },
  139|       |        })
  140|   366k|    }
_RINvMNtCs23GeP7cdX8Z_5oxrdf7literalNtB3_7Literal18new_simple_literalRNtNtCs3OstG5Tqy1X_5alloc6string6StringECssoZq86sT9S_5oxttl:
   47|    233|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|    233|        Self(LiteralContent::String(value.into()))
   49|    233|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf7literalNtB2_7Literal6as_refCssoZq86sT9S_5oxttl:
  129|  1.26M|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|  1.26M|        LiteralRef(match &self.0 {
  131|    150|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|     45|            LiteralContent::LanguageTaggedString { value, language } => {
  133|     45|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|  1.26M|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|  1.26M|                value,
  137|  1.26M|                datatype: datatype.as_ref(),
  138|  1.26M|            },
  139|       |        })
  140|  1.26M|    }
_RNvMst_NtCs23GeP7cdX8Z_5oxrdf7literalNtB5_10LiteralRef18new_simple_literalCssoZq86sT9S_5oxttl:
  459|    237|    pub const fn new_simple_literal(value: &'a str) -> Self {
  460|    237|        LiteralRef(LiteralRefContent::String(value))
  461|    237|    }
_RNvMst_NtCs23GeP7cdX8Z_5oxrdf7literalNtB5_10LiteralRef5valueCssoZq86sT9S_5oxttl:
  488|  1.37M|    pub const fn value(self) -> &'a str {
  489|  1.37M|        match self.0 {
  490|  3.75k|            LiteralRefContent::String(value)
  491|    944|            | LiteralRefContent::LanguageTaggedString { value, .. }
  492|  1.37M|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  493|  1.37M|        }
  494|  1.37M|    }
_RNvMst_NtCs23GeP7cdX8Z_5oxrdf7literalNtB5_10LiteralRef8datatypeCssoZq86sT9S_5oxttl:
  513|  1.37M|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  514|  1.37M|        match self.0 {
  515|  3.75k|            LiteralRefContent::String(_) => xsd::STRING,
  516|    944|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  517|  1.36M|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  518|       |        }
  519|  1.37M|    }
_RNvMst_NtCs23GeP7cdX8Z_5oxrdf7literalNtB5_10LiteralRef8is_plainCssoZq86sT9S_5oxttl:
  526|  4.94k|    pub const fn is_plain(self) -> bool {
  527|    237|        matches!(
  528|  4.94k|            self.0,
  529|       |            LiteralRefContent::String(_) | LiteralRefContent::LanguageTaggedString { .. }
  530|       |        )
  531|  4.94k|    }
_RNvXsu_NtCs23GeP7cdX8Z_5oxrdf7literalNtB5_10LiteralRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtCssoZq86sT9S_5oxttl:
  565|  4.94k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  566|  4.94k|        match self.0 {
  567|  3.99k|            LiteralRefContent::String(value) => print_quoted_str(value, f),
  568|    944|            LiteralRefContent::LanguageTaggedString { value, language } => {
  569|    944|                print_quoted_str(value, f)?;
  570|    944|                write!(f, "@{language}")
  571|       |            }
  572|      0|            LiteralRefContent::TypedLiteral { value, datatype } => {
  573|      0|                print_quoted_str(value, f)?;
  574|      0|                write!(f, "^^{datatype}")
  575|       |            }
  576|       |        }
  577|  4.94k|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf7literalNtB2_7Literal6as_refCs76XMqcZlhDW_13oxigraph_fuzz:
  129|  1.67M|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|  1.67M|        LiteralRef(match &self.0 {
  131|    156|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|     45|            LiteralContent::LanguageTaggedString { value, language } => {
  133|     45|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|  1.67M|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|  1.67M|                value,
  137|  1.67M|                datatype: datatype.as_ref(),
  138|  1.67M|            },
  139|       |        })
  140|  1.67M|    }
_RINvMNtCs23GeP7cdX8Z_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   47|  14.5k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|  14.5k|        Self(LiteralContent::String(value.into()))
   49|  14.5k|    }
_RINvMNtCs23GeP7cdX8Z_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   53|    963|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|    963|        let value = value.into();
   55|    963|        let datatype = datatype.into();
   56|    963|        Self(if datatype == xsd::STRING {
   57|      0|            LiteralContent::String(value)
   58|       |        } else {
   59|    963|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|    963|    }
_RINvMNtCs23GeP7cdX8Z_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   53|  1.66M|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|  1.66M|        let value = value.into();
   55|  1.66M|        let datatype = datatype.into();
   56|  1.66M|        Self(if datatype == xsd::STRING {
   57|      0|            LiteralContent::String(value)
   58|       |        } else {
   59|  1.66M|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|  1.66M|    }
_RINvMNtCs23GeP7cdX8Z_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringB1n_EB5_:
   85|  3.77k|    pub fn new_language_tagged_literal_unchecked(
   86|  3.77k|        value: impl Into<String>,
   87|  3.77k|        language: impl Into<String>,
   88|  3.77k|    ) -> Self {
   89|  3.77k|        Self(LiteralContent::LanguageTaggedString {
   90|  3.77k|            value: value.into(),
   91|  3.77k|            language: language.into(),
   92|  3.77k|        })
   93|  3.77k|    }
_RINvMst_NtCs23GeP7cdX8Z_5oxrdf7literalNtB6_10LiteralRef17new_typed_literalNtNtB8_10named_node12NamedNodeRefEB8_:
  465|  3.18M|    pub fn new_typed_literal(value: &'a str, datatype: impl Into<NamedNodeRef<'a>>) -> Self {
  466|  3.18M|        let datatype = datatype.into();
  467|  3.18M|        LiteralRef(if datatype == xsd::STRING {
  468|      0|            LiteralRefContent::String(value)
  469|       |        } else {
  470|  3.18M|            LiteralRefContent::TypedLiteral { value, datatype }
  471|       |        })
  472|  3.18M|    }
_RINvNtCs23GeP7cdX8Z_5oxrdf7literal16print_quoted_strNtNtCscdEvteftVc2_4core3fmt9FormatterEB4_:
  616|  4.94k|pub fn print_quoted_str(string: &str, f: &mut impl Write) -> fmt::Result {
  617|  4.94k|    f.write_char('"')?;
  618|  43.3k|    for c in string.chars() {
  619|  43.3k|        match c {
  620|    222|            '\u{08}' => f.write_str("\\b"),
  621|    264|            '\t' => f.write_str("\\t"),
  622|    290|            '\n' => f.write_str("\\n"),
  623|    326|            '\u{0C}' => f.write_str("\\f"),
  624|    149|            '\r' => f.write_str("\\r"),
  625|    879|            '"' => f.write_str("\\\""),
  626|     71|            '\\' => f.write_str("\\\\"),
  627|  41.1k|            '\0'..='\u{1F}' | '\u{7F}' => write!(f, "\\u{:04X}", u32::from(c)),
  628|  22.2k|            _ => f.write_char(c),
  629|      0|        }?;
  630|       |    }
  631|  4.94k|    f.write_char('"')
  632|  4.94k|}
_RNvMNtCs23GeP7cdX8Z_5oxrdf7literalNtB2_7Literal6as_refB4_:
  129|  7.70M|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|  7.70M|        LiteralRef(match &self.0 {
  131|    590|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|    160|            LiteralContent::LanguageTaggedString { value, language } => {
  133|    160|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|  7.70M|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|  7.70M|                value,
  137|  7.70M|                datatype: datatype.as_ref(),
  138|  7.70M|            },
  139|       |        })
  140|  7.70M|    }
_RNvMst_NtCs23GeP7cdX8Z_5oxrdf7literalNtB5_10LiteralRef18new_simple_literalB7_:
  459|  13.6k|    pub const fn new_simple_literal(value: &'a str) -> Self {
  460|  13.6k|        LiteralRef(LiteralRefContent::String(value))
  461|  13.6k|    }
_RNvMst_NtCs23GeP7cdX8Z_5oxrdf7literalNtB5_10LiteralRef37new_language_tagged_literal_uncheckedB7_:
  482|  3.01k|    pub const fn new_language_tagged_literal_unchecked(value: &'a str, language: &'a str) -> Self {
  483|  3.01k|        LiteralRef(LiteralRefContent::LanguageTaggedString { value, language })
  484|  3.01k|    }
_RNvMst_NtCs23GeP7cdX8Z_5oxrdf7literalNtB5_10LiteralRef5valueB7_:
  488|  7.93M|    pub const fn value(self) -> &'a str {
  489|  7.93M|        match self.0 {
  490|  2.32k|            LiteralRefContent::String(value)
  491|  1.20k|            | LiteralRefContent::LanguageTaggedString { value, .. }
  492|  7.93M|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  493|  7.93M|        }
  494|  7.93M|    }
_RNvMst_NtCs23GeP7cdX8Z_5oxrdf7literalNtB5_10LiteralRef8languageB7_:
  501|  3.52k|    pub const fn language(self) -> Option<&'a str> {
  502|  3.52k|        match self.0 {
  503|  1.20k|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  504|  2.32k|            _ => None,
  505|       |        }
  506|  3.52k|    }
_RNvMst_NtCs23GeP7cdX8Z_5oxrdf7literalNtB5_10LiteralRef8datatypeB7_:
  513|  7.93M|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  514|  7.93M|        match self.0 {
  515|      0|            LiteralRefContent::String(_) => xsd::STRING,
  516|      0|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  517|  7.93M|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  518|       |        }
  519|  7.93M|    }
_RNvMst_NtCs23GeP7cdX8Z_5oxrdf7literalNtB5_10LiteralRef8is_plainB7_:
  526|  7.93M|    pub const fn is_plain(self) -> bool {
  527|  7.93M|        matches!(
  528|  7.93M|            self.0,
  529|       |            LiteralRefContent::String(_) | LiteralRefContent::LanguageTaggedString { .. }
  530|       |        )
  531|  7.93M|    }
_RNvMst_NtCs23GeP7cdX8Z_5oxrdf7literalNtB5_10LiteralRef10into_ownedB7_:
  534|  9.23M|    pub fn into_owned(self) -> Literal {
  535|  9.23M|        Literal(match self.0 {
  536|    708|            LiteralRefContent::String(value) => LiteralContent::String(value.to_owned()),
  537|    192|            LiteralRefContent::LanguageTaggedString { value, language } => {
  538|    192|                LiteralContent::LanguageTaggedString {
  539|    192|                    value: value.to_owned(),
  540|    192|                    language: language.to_owned(),
  541|    192|                }
  542|       |            }
  543|  9.23M|            LiteralRefContent::TypedLiteral { value, datatype } => LiteralContent::TypedLiteral {
  544|  9.23M|                value: value.to_owned(),
  545|  9.23M|                datatype: datatype.into_owned(),
  546|  9.23M|            },
  547|       |        })
  548|  9.23M|    }

_RNvMNtCs23GeP7cdX8Z_5oxrdf10named_nodeNtB2_9NamedNode6as_refCs7EVUVIOgNrt_4trig:
   54|  1.16M|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  1.16M|        NamedNodeRef::new_unchecked(&self.iri)
   56|  1.16M|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf10named_nodeNtB2_9NamedNode6as_strCs7EVUVIOgNrt_4trig:
   44|  32.4k|    pub fn as_str(&self) -> &str {
   45|  32.4k|        self.iri.as_str()
   46|  32.4k|    }
_RNvMs4_NtCs23GeP7cdX8Z_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCs7EVUVIOgNrt_4trig:
  138|   183k|    pub fn into_owned(self) -> NamedNode {
  139|   183k|        NamedNode::new_unchecked(self.iri)
  140|   183k|    }
_RNvMs4_NtCs23GeP7cdX8Z_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCs7EVUVIOgNrt_4trig:
  128|  1.16M|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  1.16M|        Self { iri }
  130|  1.16M|    }
_RNvMs4_NtCs23GeP7cdX8Z_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCs7EVUVIOgNrt_4trig:
  133|  32.4k|    pub const fn as_str(self) -> &'a str {
  134|  32.4k|        self.iri
  135|  32.4k|    }
_RNvXs8_NtCs23GeP7cdX8Z_5oxrdf10named_nodeNtB5_12NamedNodeRefINtNtCscdEvteftVc2_4core3cmp9PartialEqNtB5_9NamedNodeE2eqCs7EVUVIOgNrt_4trig:
  166|  32.4k|    fn eq(&self, other: &NamedNode) -> bool {
  167|  32.4k|        self.as_str() == other.as_str()
  168|  32.4k|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf10named_nodeNtB2_9NamedNode6as_refCssoZq86sT9S_5oxttl:
   54|  3.07M|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  3.07M|        NamedNodeRef::new_unchecked(&self.iri)
   56|  3.07M|    }
_RNvMs4_NtCs23GeP7cdX8Z_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCssoZq86sT9S_5oxttl:
  138|  9.82k|    pub fn into_owned(self) -> NamedNode {
  139|  9.82k|        NamedNode::new_unchecked(self.iri)
  140|  9.82k|    }
_RNvMs4_NtCs23GeP7cdX8Z_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCssoZq86sT9S_5oxttl:
  128|  3.07M|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  3.07M|        Self { iri }
  130|  3.07M|    }
_RNvMs4_NtCs23GeP7cdX8Z_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCssoZq86sT9S_5oxttl:
  133|  2.07M|    pub const fn as_str(self) -> &'a str {
  134|  2.07M|        self.iri
  135|  2.07M|    }
_RNvXs5_NtCs23GeP7cdX8Z_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtCssoZq86sT9S_5oxttl:
  145|  1.93M|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|  1.93M|        write!(f, "<{}>", self.as_str())
  147|  1.93M|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf10named_nodeNtB2_9NamedNode6as_refCs76XMqcZlhDW_13oxigraph_fuzz:
   54|  4.06M|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  4.06M|        NamedNodeRef::new_unchecked(&self.iri)
   56|  4.06M|    }
_RNvMs4_NtCs23GeP7cdX8Z_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCs76XMqcZlhDW_13oxigraph_fuzz:
  128|  4.06M|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  4.06M|        Self { iri }
  130|  4.06M|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|  1.66M|    pub fn as_str(&self) -> &str {
   45|  1.66M|        self.iri.as_str()
   46|  1.66M|    }
_RNvMNtCs23GeP7cdX8Z_5oxrdf10named_nodeNtB2_9NamedNode6as_refB4_:
   54|  18.6M|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  18.6M|        NamedNodeRef::new_unchecked(&self.iri)
   56|  18.6M|    }
_RNvMs4_NtCs23GeP7cdX8Z_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedB7_:
  128|  26.5M|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  26.5M|        Self { iri }
  130|  26.5M|    }
_RNvMs4_NtCs23GeP7cdX8Z_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|  20.9M|    pub const fn as_str(self) -> &'a str {
  134|  20.9M|        self.iri
  135|  20.9M|    }
_RNvMs4_NtCs23GeP7cdX8Z_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|  24.3M|    pub fn into_owned(self) -> NamedNode {
  139|  24.3M|        NamedNode::new_unchecked(self.iri)
  140|  24.3M|    }
_RNvXs6_NtCs23GeP7cdX8Z_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCscdEvteftVc2_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|  1.91M|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|  1.91M|        node.into_owned()
  154|  1.91M|    }
_RNvXs9_NtCs23GeP7cdX8Z_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCscdEvteftVc2_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|  1.66M|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|  1.66M|        self.as_str() == other.as_str()
  175|  1.66M|    }
_RINvMNtCs23GeP7cdX8Z_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   39|  2.43M|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  2.43M|        Self { iri: iri.into() }
   41|  2.43M|    }
_RINvMNtCs23GeP7cdX8Z_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|  24.5M|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  24.5M|        Self { iri: iri.into() }
   41|  24.5M|    }

_RNvMs1c_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB6_9GraphName16is_default_graphCs7EVUVIOgNrt_4trig:
  963|   175k|    pub fn is_default_graph(&self) -> bool {
  964|   175k|        self.as_ref().is_default_graph()
  965|   175k|    }
_RNvMs1c_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB6_9GraphName6as_refCs7EVUVIOgNrt_4trig:
  968|   940k|    pub fn as_ref(&self) -> GraphNameRef<'_> {
  969|   940k|        match self {
  970|   103k|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.as_ref()),
  971|  22.8k|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.as_ref()),
  972|   813k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  973|       |        }
  974|   940k|    }
_RNvMs1k_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB6_12GraphNameRef10into_ownedCs7EVUVIOgNrt_4trig:
 1057|  5.85k|    pub fn into_owned(self) -> GraphName {
 1058|  5.85k|        match self {
 1059|  2.95k|            Self::NamedNode(node) => GraphName::NamedNode(node.into_owned()),
 1060|    744|            Self::BlankNode(node) => GraphName::BlankNode(node.into_owned()),
 1061|  2.15k|            Self::DefaultGraph => GraphName::DefaultGraph,
 1062|       |        }
 1063|  5.85k|    }
_RNvMs1k_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB6_12GraphNameRef16is_default_graphCs7EVUVIOgNrt_4trig:
 1052|   175k|    pub fn is_default_graph(&self) -> bool {
 1053|   175k|        matches!(self, Self::DefaultGraph)
 1054|   175k|    }
_RNvMs1u_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB6_4Quad6as_refCs7EVUVIOgNrt_4trig:
 1186|   568k|    pub fn as_ref(&self) -> QuadRef<'_> {
 1187|   568k|        QuadRef {
 1188|   568k|            subject: self.subject.as_ref(),
 1189|   568k|            predicate: self.predicate.as_ref(),
 1190|   568k|            object: self.object.as_ref(),
 1191|   568k|            graph_name: self.graph_name.as_ref(),
 1192|   568k|        }
 1193|   568k|    }
_RNvMsc_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB5_7Subject6as_refCs7EVUVIOgNrt_4trig:
  181|   749k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|   749k|        match self {
  183|  82.6k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|   272k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|   394k|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|   749k|    }
_RNvMsn_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB5_10SubjectRef10into_ownedCs7EVUVIOgNrt_4trig:
  294|   158k|    pub fn into_owned(self) -> Subject {
  295|   158k|        match self {
  296|  13.2k|            Self::NamedNode(node) => Subject::NamedNode(node.into_owned()),
  297|  83.1k|            Self::BlankNode(node) => Subject::BlankNode(node.into_owned()),
  298|       |            #[cfg(feature = "rdf-star")]
  299|  61.9k|            Self::Triple(triple) => Subject::Triple(Box::new(triple.clone())),
  300|       |        }
  301|   158k|    }
_RNvMsy_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB5_4Term6as_refCs7EVUVIOgNrt_4trig:
  418|   568k|    pub fn as_ref(&self) -> TermRef<'_> {
  419|   568k|        match self {
  420|  56.5k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  421|   140k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  422|   366k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  423|       |            #[cfg(feature = "rdf-star")]
  424|  5.28k|            Self::Triple(triple) => TermRef::Triple(triple),
  425|       |        }
  426|   568k|    }
_RNvXs1A_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB6_7QuadRefINtNtCscdEvteftVc2_4core7convert4FromRNtB6_4QuadE4fromCs7EVUVIOgNrt_4trig:
 1302|   377k|    fn from(quad: &'a Quad) -> Self {
 1303|   377k|        quad.as_ref()
 1304|   377k|    }
_RINvMs16_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB7_6Triple3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtB7_4TermECssoZq86sT9S_5oxttl:
  797|  1.70M|    pub fn new(
  798|  1.70M|        subject: impl Into<Subject>,
  799|  1.70M|        predicate: impl Into<NamedNode>,
  800|  1.70M|        object: impl Into<Term>,
  801|  1.70M|    ) -> Self {
  802|  1.70M|        Self {
  803|  1.70M|            subject: subject.into(),
  804|  1.70M|            predicate: predicate.into(),
  805|  1.70M|            object: object.into(),
  806|  1.70M|        }
  807|  1.70M|    }
_RINvMs1u_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node12NamedNodeRefB11_NtB7_9GraphNameECssoZq86sT9S_5oxttl:
 1171|  5.93k|    pub fn new(
 1172|  5.93k|        subject: impl Into<Subject>,
 1173|  5.93k|        predicate: impl Into<NamedNode>,
 1174|  5.93k|        object: impl Into<Term>,
 1175|  5.93k|        graph_name: impl Into<GraphName>,
 1176|  5.93k|    ) -> Self {
 1177|  5.93k|        Self {
 1178|  5.93k|            subject: subject.into(),
 1179|  5.93k|            predicate: predicate.into(),
 1180|  5.93k|            object: object.into(),
 1181|  5.93k|            graph_name: graph_name.into(),
 1182|  5.93k|        }
 1183|  5.93k|    }
_RINvMs1u_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node12NamedNodeRefNtNtB9_10blank_node9BlankNodeNtB7_9GraphNameECssoZq86sT9S_5oxttl:
 1171|  38.2k|    pub fn new(
 1172|  38.2k|        subject: impl Into<Subject>,
 1173|  38.2k|        predicate: impl Into<NamedNode>,
 1174|  38.2k|        object: impl Into<Term>,
 1175|  38.2k|        graph_name: impl Into<GraphName>,
 1176|  38.2k|    ) -> Self {
 1177|  38.2k|        Self {
 1178|  38.2k|            subject: subject.into(),
 1179|  38.2k|            predicate: predicate.into(),
 1180|  38.2k|            object: object.into(),
 1181|  38.2k|            graph_name: graph_name.into(),
 1182|  38.2k|        }
 1183|  38.2k|    }
_RINvMs1u_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtB7_4TermNtB7_9GraphNameECssoZq86sT9S_5oxttl:
 1171|   727k|    pub fn new(
 1172|   727k|        subject: impl Into<Subject>,
 1173|   727k|        predicate: impl Into<NamedNode>,
 1174|   727k|        object: impl Into<Term>,
 1175|   727k|        graph_name: impl Into<GraphName>,
 1176|   727k|    ) -> Self {
 1177|   727k|        Self {
 1178|   727k|            subject: subject.into(),
 1179|   727k|            predicate: predicate.into(),
 1180|   727k|            object: object.into(),
 1181|   727k|            graph_name: graph_name.into(),
 1182|   727k|        }
 1183|   727k|    }
_RNvMsc_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB5_7Subject6as_refCssoZq86sT9S_5oxttl:
  181|  1.50M|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  1.50M|        match self {
  183|  63.3k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|    474|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|  1.44M|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  1.50M|    }
_RNvMsy_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB5_4Term6as_refCssoZq86sT9S_5oxttl:
  418|  1.50M|    pub fn as_ref(&self) -> TermRef<'_> {
  419|  1.50M|        match self {
  420|   237k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  421|  1.01k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  422|  1.26M|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  423|       |            #[cfg(feature = "rdf-star")]
  424|     54|            Self::Triple(triple) => TermRef::Triple(triple),
  425|       |        }
  426|  1.50M|    }
_RNvXs0_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB5_16NamedOrBlankNodeINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromCssoZq86sT9S_5oxttl:
   43|   112k|    fn from(node: NamedNode) -> Self {
   44|   112k|        Self::NamedNode(node)
   45|   112k|    }
_RNvXs12_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB6_7TermRefINtNtCscdEvteftVc2_4core7convert4FromNtB6_10SubjectRefE4fromCssoZq86sT9S_5oxttl:
  734|  1.66M|    fn from(node: SubjectRef<'a>) -> Self {
  735|  1.66M|        match node {
  736|  76.6k|            SubjectRef::NamedNode(node) => node.into(),
  737|  83.6k|            SubjectRef::BlankNode(node) => node.into(),
  738|       |            #[cfg(feature = "rdf-star")]
  739|  1.50M|            SubjectRef::Triple(triple) => triple.into(),
  740|       |        }
  741|  1.66M|    }
_RNvXs1e_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB6_9GraphNameINtNtCscdEvteftVc2_4core7convert4FromNtNtB8_10named_node9NamedNodeE4fromCssoZq86sT9S_5oxttl:
  986|  16.2k|    fn from(node: NamedNode) -> Self {
  987|  16.2k|        Self::NamedNode(node)
  988|  16.2k|    }
_RNvXs1g_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB6_9GraphNameINtNtCscdEvteftVc2_4core7convert4FromNtNtB8_10blank_node9BlankNodeE4fromCssoZq86sT9S_5oxttl:
 1000|  3.42k|    fn from(node: BlankNode) -> Self {
 1001|  3.42k|        Self::BlankNode(node)
 1002|  3.42k|    }
_RNvXs1i_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB6_9GraphNameINtNtCscdEvteftVc2_4core7convert4FromNtB6_16NamedOrBlankNodeE4fromCssoZq86sT9S_5oxttl:
 1014|  19.7k|    fn from(node: NamedOrBlankNode) -> Self {
 1015|  19.7k|        match node {
 1016|  16.2k|            NamedOrBlankNode::NamedNode(node) => node.into(),
 1017|  3.42k|            NamedOrBlankNode::BlankNode(node) => node.into(),
 1018|       |        }
 1019|  19.7k|    }
_RNvXs2_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB5_16NamedOrBlankNodeINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromCssoZq86sT9S_5oxttl:
   57|  76.8k|    fn from(node: BlankNode) -> Self {
   58|  76.8k|        Self::BlankNode(node)
   59|  76.8k|    }
_RNvXsB_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCssoZq86sT9S_5oxttl:
  445|  9.63k|    fn from(node: NamedNodeRef<'_>) -> Self {
  446|  9.63k|        node.into_owned().into()
  447|  9.63k|    }
_RNvXsL_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtB5_7SubjectE4fromCssoZq86sT9S_5oxttl:
  521|    241|    fn from(node: Subject) -> Self {
  522|    241|        match node {
  523|      0|            Subject::NamedNode(node) => node.into(),
  524|    241|            Subject::BlankNode(node) => node.into(),
  525|       |            #[cfg(feature = "rdf-star")]
  526|      0|            Subject::Triple(triple) => Self::Triple(triple),
  527|       |        }
  528|    241|    }
_RNvXsT_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB5_7TermRefINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCssoZq86sT9S_5oxttl:
  667|  1.75M|    fn from(node: NamedNodeRef<'a>) -> Self {
  668|  1.75M|        Self::NamedNode(node)
  669|  1.75M|    }
_RNvXsV_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB5_7TermRefINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10blank_node12BlankNodeRefE4fromCssoZq86sT9S_5oxttl:
  681|  84.3k|    fn from(node: BlankNodeRef<'a>) -> Self {
  682|  84.3k|        Self::BlankNode(node)
  683|  84.3k|    }
_RNvXsZ_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB5_7TermRefINtNtCscdEvteftVc2_4core7convert4FromRNtB5_6TripleE4fromCssoZq86sT9S_5oxttl:
  710|  1.50M|    fn from(node: &'a Triple) -> Self {
  711|  1.50M|        Self::Triple(node)
  712|  1.50M|    }
_RNvXsf_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCssoZq86sT9S_5oxttl:
  207|    192|    fn from(node: NamedNodeRef<'_>) -> Self {
  208|    192|        node.into_owned().into()
  209|    192|    }
_RNvXsl_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtB5_16NamedOrBlankNodeE4fromCssoZq86sT9S_5oxttl:
  252|   153k|    fn from(node: NamedOrBlankNode) -> Self {
  253|   153k|        match node {
  254|  80.0k|            NamedOrBlankNode::NamedNode(node) => node.into(),
  255|  73.0k|            NamedOrBlankNode::BlankNode(node) => node.into(),
  256|       |        }
  257|   153k|    }
_RNvMs16_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB6_6Triple6as_refCs76XMqcZlhDW_13oxigraph_fuzz:
  837|  1.99M|    pub fn as_ref(&self) -> TripleRef<'_> {
  838|  1.99M|        TripleRef {
  839|  1.99M|            subject: self.subject.as_ref(),
  840|  1.99M|            predicate: self.predicate.as_ref(),
  841|  1.99M|            object: self.object.as_ref(),
  842|  1.99M|        }
  843|  1.99M|    }
_RNvMsc_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB5_7Subject6as_refCs76XMqcZlhDW_13oxigraph_fuzz:
  181|  1.99M|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  1.99M|        match self {
  183|  82.5k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|    503|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|  1.90M|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  1.99M|    }
_RNvMsy_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB5_4Term6as_refCs76XMqcZlhDW_13oxigraph_fuzz:
  418|  1.99M|    pub fn as_ref(&self) -> TermRef<'_> {
  419|  1.99M|        match self {
  420|   314k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  421|  1.06k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  422|  1.67M|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  423|       |            #[cfg(feature = "rdf-star")]
  424|     54|            Self::Triple(triple) => TermRef::Triple(triple),
  425|       |        }
  426|  1.99M|    }
_RNvMsc_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB5_7Subject6as_refB7_:
  181|  9.16M|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  9.16M|        match self {
  183|   368k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|    887|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|  8.79M|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  9.16M|    }
_RNvXse_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|   165k|    fn from(node: NamedNode) -> Self {
  201|   165k|        Self::NamedNode(node)
  202|   165k|    }
_RNvXsg_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|   364k|    fn from(node: BlankNode) -> Self {
  215|   364k|        Self::BlankNode(node)
  216|   364k|    }
_RNvXsi_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtB5_6TripleE4fromB7_:
  229|  5.18M|    fn from(node: Triple) -> Self {
  230|  5.18M|        Self::Triple(Box::new(node))
  231|  5.18M|    }
_RNvMsn_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB5_10SubjectRef10into_ownedB7_:
  294|  7.48M|    pub fn into_owned(self) -> Subject {
  295|  7.48M|        match self {
  296|   440k|            Self::NamedNode(node) => Subject::NamedNode(node.into_owned()),
  297|    710|            Self::BlankNode(node) => Subject::BlankNode(node.into_owned()),
  298|       |            #[cfg(feature = "rdf-star")]
  299|  7.04M|            Self::Triple(triple) => Subject::Triple(Box::new(triple.clone())),
  300|       |        }
  301|  7.48M|    }
_RNvMsy_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB5_4Term6as_refB7_:
  418|  9.16M|    pub fn as_ref(&self) -> TermRef<'_> {
  419|  9.16M|        match self {
  420|  1.45M|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  421|  1.24k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  422|  7.70M|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  423|       |            #[cfg(feature = "rdf-star")]
  424|    180|            Self::Triple(triple) => TermRef::Triple(triple),
  425|       |        }
  426|  9.16M|    }
_RNvXsA_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  438|   309k|    fn from(node: NamedNode) -> Self {
  439|   309k|        Self::NamedNode(node)
  440|   309k|    }
_RNvXsC_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  452|   282k|    fn from(node: BlankNode) -> Self {
  453|   282k|        Self::BlankNode(node)
  454|   282k|    }
_RNvXsE_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  466|  1.68M|    fn from(literal: Literal) -> Self {
  467|  1.68M|        Self::Literal(literal)
  468|  1.68M|    }
_RNvXsG_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtB5_6TripleE4fromB7_:
  481|  7.67k|    fn from(triple: Triple) -> Self {
  482|  7.67k|        Self::Triple(Box::new(triple))
  483|  7.67k|    }
_RNvMsR_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB5_7TermRef10into_ownedB7_:
  639|  10.9M|    pub fn into_owned(self) -> Term {
  640|  10.9M|        match self {
  641|  1.74M|            Self::NamedNode(node) => Term::NamedNode(node.into_owned()),
  642|    992|            Self::BlankNode(node) => Term::BlankNode(node.into_owned()),
  643|  9.23M|            Self::Literal(literal) => Term::Literal(literal.into_owned()),
  644|       |            #[cfg(feature = "rdf-star")]
  645|    144|            Self::Triple(triple) => Term::Triple(Box::new(triple.clone())),
  646|       |        }
  647|  10.9M|    }
_RNvMs16_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB6_6Triple6as_refB8_:
  837|  9.16M|    pub fn as_ref(&self) -> TripleRef<'_> {
  838|  9.16M|        TripleRef {
  839|  9.16M|            subject: self.subject.as_ref(),
  840|  9.16M|            predicate: self.predicate.as_ref(),
  841|  9.16M|            object: self.object.as_ref(),
  842|  9.16M|        }
  843|  9.16M|    }
_RNvMs18_NtCs23GeP7cdX8Z_5oxrdf6tripleNtB6_9TripleRef10into_ownedB8_:
  910|  7.34M|    pub fn into_owned(self) -> Triple {
  911|  7.34M|        Triple {
  912|  7.34M|            subject: self.subject.into_owned(),
  913|  7.34M|            predicate: self.predicate.into_owned(),
  914|  7.34M|            object: self.object.into_owned(),
  915|  7.34M|        }
  916|  7.34M|    }

_RNvXNtCssoZq86sT9S_5oxttl5lexerNtB2_7N3LexerNtNtNtB4_7toolkit5lexer15TokenRecognizer20recognize_next_token:
   55|  13.2M|    fn recognize_next_token<'a>(
   56|  13.2M|        &mut self,
   57|  13.2M|        data: &'a [u8],
   58|  13.2M|        is_ending: bool,
   59|  13.2M|        options: &N3LexerOptions,
   60|  13.2M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
   61|  13.2M|        match *data.first()? {
   62|  4.37M|            b'<' => match *data.get(1)? {
   63|  1.54M|                b'<' => Some((2, Ok(N3Token::Punctuation("<<")))),
   64|  8.99k|                b'=' if self.mode == N3LexerMode::N3 => {
   65|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   66|      0|                        Some(if let Ok(result) = result {
   67|      0|                            (consumed, Ok(result))
   68|       |                        } else {
   69|      0|                            (2, Ok(N3Token::Punctuation("<=")))
   70|       |                        })
   71|      0|                    } else if is_ending {
   72|      0|                        Some((2, Ok(N3Token::Punctuation("<="))))
   73|       |                    } else {
   74|      0|                        None
   75|       |                    }
   76|       |                }
   77|  4.68k|                b'-' if self.mode == N3LexerMode::N3 => {
   78|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   79|      0|                        Some(if let Ok(result) = result {
   80|      0|                            (consumed, Ok(result))
   81|       |                        } else {
   82|      0|                            (2, Ok(N3Token::Punctuation("<-")))
   83|       |                        })
   84|      0|                    } else if is_ending {
   85|      0|                        Some((2, Ok(N3Token::Punctuation("<-"))))
   86|       |                    } else {
   87|      0|                        None
   88|       |                    }
   89|       |                }
   90|  2.80M|                _ => self.recognize_iri(data, options),
   91|       |            },
   92|       |            b'>' => {
   93|  1.60M|                if *data.get(1)? == b'>' {
   94|  1.52M|                    Some((2, Ok(N3Token::Punctuation(">>"))))
   95|       |                } else {
   96|  69.6k|                    Some((1, Ok(N3Token::Punctuation(">"))))
   97|       |                }
   98|       |            }
   99|   279k|            b'_' => match data.get(1)? {
  100|   234k|                b':' => Self::recognize_blank_node_label(data),
  101|  4.25k|                c => Some((
  102|  4.25k|                    1,
  103|  4.25k|                    Err((0, format!("Unexpected character '{}'", char::from(*c))).into()),
  104|  4.25k|                )),
  105|       |            },
  106|       |            b'"' => {
  107|  41.1k|                if self.mode != N3LexerMode::NTriples
  108|  41.1k|                    && *data.get(1)? == b'"'
  109|  27.0k|                    && *data.get(2)? == b'"'
  110|       |                {
  111|  16.3k|                    self.recognize_long_string(data, b'"')
  112|       |                } else {
  113|  18.3k|                    self.recognize_string(data, b'"')
  114|       |                }
  115|       |            }
  116|  80.4k|            b'\'' if self.mode != N3LexerMode::NTriples => {
  117|  80.4k|                if *data.get(1)? == b'\'' && *data.get(2)? == b'\'' {
  118|  13.9k|                    self.recognize_long_string(data, b'\'')
  119|       |                } else {
  120|  59.8k|                    self.recognize_string(data, b'\'')
  121|       |                }
  122|       |            }
  123|  85.9k|            b'@' => self.recognize_lang_tag(data),
  124|   777k|            b'.' => match data.get(1) {
  125|   236k|                Some(b'0'..=b'9') => Self::recognize_number(data),
  126|   559k|                Some(_) => Some((1, Ok(N3Token::Punctuation(".")))),
  127|   191k|                None => is_ending.then_some((1, Ok(N3Token::Punctuation(".")))),
  128|       |            },
  129|       |            b'^' => {
  130|  14.4k|                if *data.get(1)? == b'^' {
  131|  2.81k|                    Some((2, Ok(N3Token::Punctuation("^^"))))
  132|       |                } else {
  133|  10.6k|                    Some((1, Ok(N3Token::Punctuation("^"))))
  134|       |                }
  135|       |            }
  136|   394k|            b'(' => Some((1, Ok(N3Token::Punctuation("(")))),
  137|  35.4k|            b')' => Some((1, Ok(N3Token::Punctuation(")")))),
  138|  29.1k|            b'[' => Some((1, Ok(N3Token::Punctuation("[")))),
  139|  12.8k|            b']' => Some((1, Ok(N3Token::Punctuation("]")))),
  140|       |            b'{' => {
  141|   360k|                if *data.get(1)? == b'|' {
  142|   245k|                    Some((2, Ok(N3Token::Punctuation("{|"))))
  143|       |                } else {
  144|  69.8k|                    Some((1, Ok(N3Token::Punctuation("{"))))
  145|       |                }
  146|       |            }
  147|  9.15k|            b'}' => Some((1, Ok(N3Token::Punctuation("}")))),
  148|   125k|            b',' => Some((1, Ok(N3Token::Punctuation(",")))),
  149|  21.5k|            b';' => Some((1, Ok(N3Token::Punctuation(";")))),
  150|  13.5k|            b'!' => Some((1, Ok(N3Token::Punctuation("!")))),
  151|       |            b'|' => {
  152|  6.27k|                if *data.get(1)? == b'}' {
  153|    717|                    Some((2, Ok(N3Token::Punctuation("|}"))))
  154|       |                } else {
  155|  4.05k|                    Some((1, Ok(N3Token::Punctuation("|"))))
  156|       |                }
  157|       |            }
  158|       |            b'=' => {
  159|  27.1k|                if *data.get(1)? == b'>' {
  160|  1.62k|                    Some((2, Ok(N3Token::Punctuation("=>"))))
  161|       |                } else {
  162|  24.0k|                    Some((1, Ok(N3Token::Punctuation("="))))
  163|       |                }
  164|       |            }
  165|  3.11M|            b'0'..=b'9' | b'+' | b'-' => Self::recognize_number(data),
  166|  50.7k|            b'?' => self.recognize_variable(data, is_ending),
  167|  2.15M|            _ => self.recognize_pname_or_keyword(data, is_ending),
  168|       |        }
  169|  13.2M|    }
_RNvMs_NtCssoZq86sT9S_5oxttl5lexerNtB4_7N3Lexer3new:
  173|  33.7k|    pub fn new(mode: N3LexerMode, unchecked: bool) -> Self {
  174|  33.7k|        Self { mode, unchecked }
  175|  33.7k|    }
_RNvMs_NtCssoZq86sT9S_5oxttl5lexerNtB4_7N3Lexer13recognize_iri:
  177|  2.80M|    fn recognize_iri(
  178|  2.80M|        &self,
  179|  2.80M|        data: &[u8],
  180|  2.80M|        options: &N3LexerOptions,
  181|  2.80M|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  182|  2.80M|        // [18] IRIREF  ::=  '<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
  183|  2.80M|        let mut string = Vec::new();
  184|  2.80M|        let mut i = 1;
  185|       |        loop {
  186|  2.80M|            let end = memchr2(b'>', b'\\', &data[i..])?;
  187|  2.58M|            string.extend_from_slice(&data[i..i + end]);
  188|  2.58M|            i += end;
  189|  2.58M|            match data[i] {
  190|       |                b'>' => {
  191|       |                    #[allow(clippy::range_plus_one)]
  192|  2.57M|                    return Some((i + 1, self.parse_iri(string, 0..i + 1, options)));
  193|       |                }
  194|       |                b'\\' => {
  195|  11.7k|                    let (additional, c) = self.recognize_escape(&data[i..], i, false)?;
  196|  6.33k|                    i += additional + 1;
  197|  6.33k|                    match c {
  198|  2.28k|                        Ok(c) => {
  199|  2.28k|                            let mut buf = [0; 4];
  200|  2.28k|                            string.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  201|  2.28k|                        }
  202|  4.05k|                        Err(e) => return Some((i, Err(e))),
  203|       |                    }
  204|       |                }
  205|      0|                _ => unreachable!(),
  206|       |            }
  207|       |        }
  208|  2.80M|    }
_RNvMs_NtCssoZq86sT9S_5oxttl5lexerNtB4_7N3Lexer9parse_iri:
  210|  2.57M|    fn parse_iri(
  211|  2.57M|        &self,
  212|  2.57M|        iri: Vec<u8>,
  213|  2.57M|        position: Range<usize>,
  214|  2.57M|        options: &N3LexerOptions,
  215|  2.57M|    ) -> Result<N3Token<'static>, TokenRecognizerError> {
  216|  2.57M|        let iri = string_from_utf8(iri, position.clone())?;
  217|       |        Ok(N3Token::IriRef(
  218|  2.56M|            if let Some(base_iri) = options.base_iri.as_ref() {
  219|   625k|                if self.unchecked {
  220|   207k|                    base_iri.resolve_unchecked(&iri)
  221|       |                } else {
  222|   417k|                    base_iri
  223|   417k|                        .resolve(&iri)
  224|   417k|                        .map_err(|e| (position, e.to_string()))?
  225|       |                }
  226|   591k|                .into_inner()
  227|  1.93M|            } else if self.unchecked {
  228|      0|                iri
  229|       |            } else {
  230|  1.93M|                Iri::parse(iri)
  231|  1.93M|                    .map_err(|e| (position, e.to_string()))?
  232|  1.93M|                    .into_inner()
  233|       |            },
  234|       |        ))
  235|  2.57M|    }
_RNvMs_NtCssoZq86sT9S_5oxttl5lexerNtB4_7N3Lexer26recognize_pname_or_keyword:
  237|  2.15M|    fn recognize_pname_or_keyword<'a>(
  238|  2.15M|        &self,
  239|  2.15M|        data: &'a [u8],
  240|  2.15M|        is_ending: bool,
  241|  2.15M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  242|  2.15M|        // [139s]  PNAME_NS   ::=  PN_PREFIX? ':'
  243|  2.15M|        // [140s]  PNAME_LN   ::=  PNAME_NS PN_LOCAL
  244|  2.15M|        // [167s]  PN_PREFIX  ::=  PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
  245|  2.15M|        let mut i = 0;
  246|       |        loop {
  247|  4.49M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  248|  4.28M|                match r {
  249|  3.88M|                    Ok((c, consumed)) => {
  250|  3.88M|                        if c == ':' {
  251|   196k|                            i += consumed;
  252|   196k|                            break;
  253|  3.68M|                        } else if i == 0 {
  254|  1.57M|                            if !Self::is_possible_pn_chars_base(c) {
  255|  1.15M|                                return Some((
  256|  1.15M|                                    consumed,
  257|  1.15M|                                    Err((
  258|  1.15M|                                        0..consumed,
  259|  1.15M|                                        format!(
  260|  1.15M|                                            "'{c}' is not allowed at the beginning of a prefix name"
  261|  1.15M|                                        ),
  262|  1.15M|                                    )
  263|  1.15M|                                        .into()),
  264|  1.15M|                                ));
  265|   423k|                            }
  266|   423k|                            i += consumed;
  267|  2.10M|                        } else if Self::is_possible_pn_chars(c) || c == '.' {
  268|  1.91M|                            i += consumed;
  269|  1.91M|                        } else {
  270|   253k|                            while data[..i].ends_with(b".") {
  271|  59.7k|                                i -= 1;
  272|  59.7k|                            }
  273|   193k|                            return Some((
  274|   193k|                                i,
  275|   193k|                                str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  276|   193k|                            ));
  277|       |                        }
  278|       |                    }
  279|   403k|                    Err(e) => return Some((e.location.end, Err(e))),
  280|       |                }
  281|   204k|            } else if is_ending {
  282|  4.24k|                while data[..i].ends_with(b".") {
  283|    716|                    i -= 1;
  284|    716|                }
  285|  3.52k|                return Some(if i == 0 {
  286|  1.05k|                    (
  287|  1.05k|                        1,
  288|  1.05k|                        Err((0..1, format!("Unexpected byte {}", data[0])).into()),
  289|  1.05k|                    )
  290|       |                } else {
  291|  2.47k|                    (
  292|  2.47k|                        i,
  293|  2.47k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  294|  2.47k|                    )
  295|       |                });
  296|       |            } else {
  297|   200k|                return None;
  298|       |            }
  299|       |        }
  300|   196k|        let pn_prefix = match str_from_utf8(&data[..i - 1], 0..i - 1) {
  301|   196k|            Ok(pn_prefix) => pn_prefix,
  302|      0|            Err(e) => return Some((i, Err(e))),
  303|       |        };
  304|   196k|        if pn_prefix.ends_with('.') {
  305|    150|            return Some((
  306|    150|                i,
  307|    150|                Err((
  308|    150|                    0..i,
  309|    150|                    format!(
  310|    150|                        "'{pn_prefix}' is not a valid prefix: prefixes are not allowed to end with '.'"),
  311|    150|                )
  312|    150|                    .into()),
  313|    150|            ));
  314|   196k|        }
  315|       |
  316|   147k|        let (consumed, pn_local_result) =
  317|   196k|            self.recognize_optional_pn_local(&data[i..], is_ending)?;
  318|   147k|        Some((
  319|   147k|            consumed + i,
  320|   147k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|       |                prefix: pn_prefix,
  322|       |                local,
  323|       |                might_be_invalid_iri,
  324|   147k|            }),
  325|   147k|        ))
  326|  2.15M|    }
_RNvMs_NtCssoZq86sT9S_5oxttl5lexerNtB4_7N3Lexer18recognize_variable:
  328|  50.7k|    fn recognize_variable<'a>(
  329|  50.7k|        &self,
  330|  50.7k|        data: &'a [u8],
  331|  50.7k|        is_ending: bool,
  332|  50.7k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  333|       |        // [36]  QUICK_VAR_NAME  ::=  "?" PN_LOCAL
  334|  50.7k|        let (consumed, result) = self.recognize_optional_pn_local(&data[1..], is_ending)?;
  335|  30.7k|        Some((
  336|  30.7k|            consumed + 1,
  337|  30.7k|            result.and_then(|(name, _)| {
  338|       |                if name.is_empty() {
  339|       |                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|       |                    Ok(N3Token::Variable(name))
  342|       |                }
  343|  30.7k|            }),
  344|  30.7k|        ))
  345|  50.7k|    }
_RNvMs_NtCssoZq86sT9S_5oxttl5lexerNtB4_7N3Lexer27recognize_optional_pn_local:
  347|   246k|    fn recognize_optional_pn_local<'a>(
  348|   246k|        &self,
  349|   246k|        data: &'a [u8],
  350|   246k|        is_ending: bool,
  351|   246k|    ) -> Option<(usize, Result<(Cow<'a, str>, bool), TokenRecognizerError>)> {
  352|   246k|        // [168s]  PN_LOCAL  ::=  (PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
  353|   246k|        let mut i = 0;
  354|   246k|        let mut buffer = None; // Buffer if there are some escaped characters
  355|   246k|        let mut position_that_is_already_in_buffer = 0;
  356|   246k|        let mut might_be_invalid_iri = false;
  357|   246k|        let mut ends_with_unescaped_dot = 0;
  358|       |        loop {
  359|  1.30M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  360|  1.23M|                match r {
  361|  1.23M|                    Ok((c, consumed)) => {
  362|  1.23M|                        if c == '%' {
  363|  5.18k|                            i += 1;
  364|  5.18k|                            let a = char::from(*data.get(i)?);
  365|  2.94k|                            i += 1;
  366|  2.94k|                            let b = char::from(*data.get(i)?);
  367|  2.45k|                            if !a.is_ascii_hexdigit() || !b.is_ascii_hexdigit() {
  368|    390|                                return Some((i + 1, Err((
  369|    390|                                    i - 2..=i, format!("escapes in IRIs should be % followed by two hexadecimal characters, found '%{a}{b}'")
  370|    390|                                ).into())));
  371|  2.06k|                            }
  372|  2.06k|                            i += 1;
  373|  2.06k|                            ends_with_unescaped_dot = 0;
  374|  1.23M|                        } else if c == '\\' {
  375|   182k|                            i += 1;
  376|   182k|                            let a = char::from(*data.get(i)?);
  377|   179k|                            if self.unchecked
  378|   134k|                                || matches!(
  379|   163k|                                    a,
  380|       |                                    '_' | '~'
  381|       |                                        | '.'
  382|       |                                        | '-'
  383|       |                                        | '!'
  384|       |                                        | '$'
  385|       |                                        | '&'
  386|       |                                        | '\''
  387|       |                                        | '('
  388|       |                                        | ')'
  389|       |                                        | '*'
  390|       |                                        | '+'
  391|       |                                        | ','
  392|       |                                        | ';'
  393|       |                                        | '='
  394|       |                                )
  395|  44.9k|                            {
  396|  44.9k|                                // ok to escape
  397|   134k|                            } else if matches!(a, '/' | '?' | '#' | '@' | '%') {
  398|   132k|                                // ok to escape but requires IRI validation
  399|   132k|                                might_be_invalid_iri = true;
  400|   132k|                            } else {
  401|  2.63k|                                return Some((i + 1, Err((
  402|  2.63k|                                    i..=i, format!("The character that are allowed to be escaped in IRIs are _~.-!$&'()*+,;=/?#@%, found '{a}'")
  403|  2.63k|                                ).into())));
  404|       |                            }
  405|   177k|                            let buffer = buffer.get_or_insert_with(String::new);
  406|   177k|                            // We add the missing bytes
  407|   177k|                            if i - position_that_is_already_in_buffer > 1 {
  408|  42.9k|                                buffer.push_str(
  409|  42.9k|                                    match str_from_utf8(
  410|  42.9k|                                        &data[position_that_is_already_in_buffer..i - 1],
  411|  42.9k|                                        position_that_is_already_in_buffer..i - 1,
  412|  42.9k|                                    ) {
  413|  42.9k|                                        Ok(data) => data,
  414|      0|                                        Err(e) => return Some((i, Err(e))),
  415|       |                                    },
  416|       |                                )
  417|   134k|                            }
  418|   177k|                            buffer.push(a);
  419|   177k|                            i += 1;
  420|   177k|                            position_that_is_already_in_buffer = i;
  421|   177k|                            ends_with_unescaped_dot = 0;
  422|  1.04M|                        } else if i == 0 {
  423|   155k|                            if !(Self::is_possible_pn_chars_u(c) || c == ':' || c.is_ascii_digit())
  424|       |                            {
  425|  46.5k|                                return Some((0, Ok((Cow::Borrowed(""), false))));
  426|   109k|                            }
  427|   109k|                            if !self.unchecked {
  428|       |                                might_be_invalid_iri |=
  429|  74.3k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  430|  74.3k|                                        || c == ':';
  431|  34.6k|                            }
  432|   109k|                            i += consumed;
  433|   892k|                        } else if Self::is_possible_pn_chars(c) || c == ':' {
  434|   674k|                            if !self.unchecked {
  435|       |                                might_be_invalid_iri |=
  436|   445k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  437|   445k|                                        || c == ':';
  438|   228k|                            }
  439|   674k|                            i += consumed;
  440|   674k|                            ends_with_unescaped_dot = 0;
  441|   217k|                        } else if c == '.' {
  442|  94.3k|                            i += consumed;
  443|  94.3k|                            ends_with_unescaped_dot += 1;
  444|  94.3k|                        } else {
  445|   123k|                            let buffer = if let Some(mut buffer) = buffer {
  446|  72.3k|                                buffer.push_str(
  447|  72.3k|                                    match str_from_utf8(
  448|  72.3k|                                        &data[position_that_is_already_in_buffer..i],
  449|  72.3k|                                        position_that_is_already_in_buffer..i,
  450|  72.3k|                                    ) {
  451|  72.3k|                                        Ok(data) => data,
  452|      0|                                        Err(e) => return Some((i, Err(e))),
  453|       |                                    },
  454|       |                                );
  455|       |                                // We do not include the last dots
  456|  72.3k|                                for _ in 0..ends_with_unescaped_dot {
  457|  1.94k|                                    buffer.pop();
  458|  1.94k|                                }
  459|  72.3k|                                i -= ends_with_unescaped_dot;
  460|  72.3k|                                Cow::Owned(buffer)
  461|       |                            } else {
  462|  51.1k|                                let mut data = match str_from_utf8(&data[..i], 0..i) {
  463|  51.1k|                                    Ok(data) => data,
  464|      0|                                    Err(e) => return Some((i, Err(e))),
  465|       |                                };
  466|       |                                // We do not include the last dots
  467|  51.1k|                                data = &data[..data.len() - ends_with_unescaped_dot];
  468|  51.1k|                                i -= ends_with_unescaped_dot;
  469|  51.1k|                                Cow::Borrowed(data)
  470|       |                            };
  471|   123k|                            return Some((i, Ok((buffer, might_be_invalid_iri))));
  472|       |                        }
  473|       |                    }
  474|  4.18k|                    Err(e) => return Some((e.location.end, Err(e))),
  475|       |                }
  476|  64.2k|            } else if is_ending {
  477|  1.21k|                let buffer = if let Some(mut buffer) = buffer {
  478|       |                    // We do not include the last dot
  479|    772|                    while buffer.ends_with('.') {
  480|    391|                        buffer.pop();
  481|    391|                        i -= 1;
  482|    391|                    }
  483|    381|                    Cow::Owned(buffer)
  484|       |                } else {
  485|    831|                    let mut data = match str_from_utf8(&data[..i], 0..i) {
  486|    831|                        Ok(data) => data,
  487|      0|                        Err(e) => return Some((i, Err(e))),
  488|       |                    };
  489|       |                    // We do not include the last dot
  490|  1.32k|                    while let Some(d) = data.strip_suffix('.') {
  491|    490|                        data = d;
  492|    490|                        i -= 1;
  493|    490|                    }
  494|    831|                    Cow::Borrowed(data)
  495|       |                };
  496|  1.21k|                return Some((i, Ok((buffer, might_be_invalid_iri))));
  497|       |            } else {
  498|  63.0k|                return None;
  499|       |            }
  500|       |        }
  501|   246k|    }
_RNvMs_NtCssoZq86sT9S_5oxttl5lexerNtB4_7N3Lexer26recognize_blank_node_label:
  503|   234k|    fn recognize_blank_node_label(
  504|   234k|        data: &[u8],
  505|   234k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  506|   234k|        // [141s]  BLANK_NODE_LABEL  ::=  '_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
  507|   234k|        let mut i = 2;
  508|       |        loop {
  509|  5.49M|            match Self::recognize_unicode_char(&data[i..], i)? {
  510|  5.43M|                Ok((c, consumed)) => {
  511|  5.43M|                    if (i == 2 && (Self::is_possible_pn_chars_u(c) || c.is_ascii_digit()))
  512|  5.23M|                        || (i > 2 && Self::is_possible_pn_chars(c))
  513|  5.24M|                    {
  514|  5.24M|                        // Ok
  515|  5.24M|                    } else if i > 2 && c == '.' {
  516|  8.69k|                        if data[i - 1] == b'.' {
  517|    222|                            i -= 1;
  518|    222|                            return Some((
  519|    222|                                i,
  520|    222|                                str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  521|    222|                            ));
  522|  8.47k|                        }
  523|   177k|                    } else if i == 2 {
  524|  6.29k|                        return Some((
  525|  6.29k|                            i,
  526|  6.29k|                            Err((0..i, "A blank node ID should not be empty").into()),
  527|  6.29k|                        ));
  528|   170k|                    } else if data[i - 1] == b'.' {
  529|  1.67k|                        i -= 1;
  530|  1.67k|                        return Some((
  531|  1.67k|                            i,
  532|  1.67k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  533|  1.67k|                        ));
  534|       |                    } else {
  535|   169k|                        return Some((
  536|   169k|                            i,
  537|   169k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  538|   169k|                        ));
  539|       |                    }
  540|  5.25M|                    i += consumed;
  541|       |                }
  542|    709|                Err(e) => return Some((e.location.end, Err(e))),
  543|       |            }
  544|       |        }
  545|   234k|    }
_RNvMs_NtCssoZq86sT9S_5oxttl5lexerNtB4_7N3Lexer18recognize_lang_tag:
  547|  85.9k|    fn recognize_lang_tag<'a>(
  548|  85.9k|        &self,
  549|  85.9k|        data: &'a [u8],
  550|  85.9k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  551|  85.9k|        // [144s]  LANGTAG  ::=  '@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
  552|  85.9k|        let mut is_last_block_empty = true;
  553|   524k|        for (i, c) in data[1..].iter().enumerate() {
  554|   524k|            if c.is_ascii_alphabetic() {
  555|   421k|                is_last_block_empty = false;
  556|   421k|            } else if i == 0 {
  557|  10.8k|                return Some((
  558|  10.8k|                    1,
  559|  10.8k|                    Err((1..2, "A language code should always start with a letter").into()),
  560|  10.8k|                ));
  561|  92.6k|            } else if is_last_block_empty {
  562|  2.13k|                return Some((i, self.parse_lang_tag(&data[1..i], 1..i - 1)));
  563|  90.4k|            } else if *c == b'-' {
  564|  56.7k|                is_last_block_empty = true;
  565|  56.7k|            } else {
  566|  33.6k|                return Some((i + 1, self.parse_lang_tag(&data[1..=i], 1..i)));
  567|       |            }
  568|       |        }
  569|  39.3k|        None
  570|  85.9k|    }
_RNvMs_NtCssoZq86sT9S_5oxttl5lexerNtB4_7N3Lexer14parse_lang_tag:
  572|  35.8k|    fn parse_lang_tag<'a>(
  573|  35.8k|        &self,
  574|  35.8k|        lang_tag: &'a [u8],
  575|  35.8k|        position: Range<usize>,
  576|  35.8k|    ) -> Result<N3Token<'a>, TokenRecognizerError> {
  577|  35.8k|        let lang_tag = str_from_utf8(lang_tag, position.clone())?;
  578|  35.8k|        Ok(N3Token::LangTag(if self.unchecked {
  579|  11.3k|            lang_tag
  580|       |        } else {
  581|  24.4k|            LanguageTag::parse(lang_tag)
  582|  24.4k|                .map_err(|e| (position.clone(), e.to_string()))?
  583|  20.4k|                .into_inner()
  584|       |        }))
  585|  35.8k|    }
_RNvMs_NtCssoZq86sT9S_5oxttl5lexerNtB4_7N3Lexer16recognize_string:
  587|  78.1k|    fn recognize_string(
  588|  78.1k|        &self,
  589|  78.1k|        data: &[u8],
  590|  78.1k|        delimiter: u8,
  591|  78.1k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  592|  78.1k|        // [22]  STRING_LITERAL_QUOTE         ::=  '"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
  593|  78.1k|        // [23]  STRING_LITERAL_SINGLE_QUOTE  ::=  "'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
  594|  78.1k|        let mut string = String::new();
  595|  78.1k|        let mut i = 1;
  596|       |        loop {
  597|   113k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  598|  79.2k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  599|  77.7k|                Ok(s) => string.push_str(s),
  600|  1.52k|                Err(e) => return Some((end, Err(e))),
  601|       |            };
  602|  77.7k|            i += end;
  603|  77.7k|            match data[i] {
  604|  77.7k|                c if c == delimiter => {
  605|  20.5k|                    return Some((i + 1, Ok(N3Token::String(string))));
  606|       |                }
  607|       |                b'\\' => {
  608|  57.1k|                    let (additional, c) = self.recognize_escape(&data[i..], i, true)?;
  609|  50.8k|                    i += additional + 1;
  610|  50.8k|                    match c {
  611|  35.5k|                        Ok(c) => {
  612|  35.5k|                            string.push(c);
  613|  35.5k|                        }
  614|  15.3k|                        Err(e) => {
  615|       |                            // We read until the end of string char
  616|  15.3k|                            let end = memchr(delimiter, &data[i..])?;
  617|  2.03k|                            return Some((i + end + 1, Err(e)));
  618|       |                        }
  619|       |                    }
  620|       |                }
  621|      0|                _ => unreachable!(),
  622|       |            }
  623|       |        }
  624|  78.1k|    }
_RNvMs_NtCssoZq86sT9S_5oxttl5lexerNtB4_7N3Lexer21recognize_long_string:
  626|  30.2k|    fn recognize_long_string(
  627|  30.2k|        &self,
  628|  30.2k|        data: &[u8],
  629|  30.2k|        delimiter: u8,
  630|  30.2k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  631|  30.2k|        // [24]  STRING_LITERAL_LONG_SINGLE_QUOTE  ::=  "'''" (("'" | "''")? ([^'\] | ECHAR | UCHAR))* "'''"
  632|  30.2k|        // [25]  STRING_LITERAL_LONG_QUOTE         ::=  '"""' (('"' | '""')? ([^"\] | ECHAR | UCHAR))* '"""'
  633|  30.2k|        let mut string = String::new();
  634|  30.2k|        let mut i = 3;
  635|       |        loop {
  636|  53.6k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  637|  36.4k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  638|  35.2k|                Ok(s) => string.push_str(s),
  639|  1.25k|                Err(e) => return Some((end, Err(e))),
  640|       |            };
  641|  35.2k|            i += end;
  642|  35.2k|            match data[i] {
  643|  35.2k|                c if c == delimiter => {
  644|  31.7k|                    if *data.get(i + 1)? == delimiter && *data.get(i + 2)? == delimiter {
  645|  10.1k|                        return Some((i + 3, Ok(N3Token::String(string))));
  646|  20.5k|                    }
  647|  20.5k|                    i += 1;
  648|  20.5k|                    string.push(char::from(delimiter));
  649|       |                }
  650|       |                b'\\' => {
  651|  3.45k|                    let (additional, c) = self.recognize_escape(&data[i..], i, true)?;
  652|  3.08k|                    i += additional + 1;
  653|  3.08k|                    match c {
  654|  2.93k|                        Ok(c) => {
  655|  2.93k|                            string.push(c);
  656|  2.93k|                        }
  657|    151|                        Err(e) => return Some((i, Err(e))),
  658|       |                    }
  659|       |                }
  660|      0|                _ => unreachable!(),
  661|       |            }
  662|       |        }
  663|  30.2k|    }
_RNvMs_NtCssoZq86sT9S_5oxttl5lexerNtB4_7N3Lexer16recognize_number:
  665|  2.16M|    fn recognize_number(data: &[u8]) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  666|  2.16M|        // [19]  INTEGER    ::=  [+-]? [0-9]+
  667|  2.16M|        // [20]  DECIMAL    ::=  [+-]? [0-9]* '.' [0-9]+
  668|  2.16M|        // [21]  DOUBLE     ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  669|  2.16M|        // [154s] EXPONENT  ::=  [eE] [+-]? [0-9]+
  670|  2.16M|        let mut i = 0;
  671|  2.16M|        let c = *data.first()?;
  672|  2.16M|        if matches!(c, b'+' | b'-') {
  673|  48.4k|            i += 1;
  674|  2.11M|        }
  675|       |        // We read the digits before .
  676|  2.16M|        let mut count_before: usize = 0;
  677|       |        loop {
  678|  7.04M|            let c = *data.get(i)?;
  679|  6.95M|            if c.is_ascii_digit() {
  680|  4.87M|                i += 1;
  681|  4.87M|                count_before += 1;
  682|  4.87M|            } else {
  683|  2.07M|                break;
  684|       |            }
  685|       |        }
  686|       |
  687|       |        // We read the digits after .
  688|       |        #[allow(clippy::if_then_some_else_none)]
  689|  2.07M|        let count_after = if *data.get(i)? == b'.' {
  690|   126k|            i += 1;
  691|   126k|
  692|   126k|            let mut count_after = 0;
  693|       |            loop {
  694|   233k|                let c = *data.get(i)?;
  695|   216k|                if c.is_ascii_digit() {
  696|   107k|                    i += 1;
  697|   107k|                    count_after += 1;
  698|   107k|                } else {
  699|   109k|                    break;
  700|   109k|                }
  701|   109k|            }
  702|   109k|            Some(count_after)
  703|       |        } else {
  704|  1.95M|            None
  705|       |        };
  706|       |
  707|       |        // End
  708|  2.06M|        let c = *data.get(i)?;
  709|  2.06M|        if matches!(c, b'e' | b'E') {
  710|  1.43M|            i += 1;
  711|       |
  712|  1.43M|            let c = *data.get(i)?;
  713|  1.43M|            if matches!(c, b'+' | b'-') {
  714|  2.45k|                i += 1;
  715|  1.43M|            }
  716|       |
  717|  1.43M|            let mut found = false;
  718|       |            loop {
  719|  7.39M|                let c = *data.get(i)?;
  720|  7.33M|                if c.is_ascii_digit() {
  721|  5.95M|                    i += 1;
  722|  5.95M|                    found = true;
  723|  5.95M|                } else {
  724|  1.37M|                    break;
  725|  1.37M|                }
  726|  1.37M|            }
  727|  1.37M|            Some((
  728|  1.37M|                i,
  729|  1.37M|                if !found {
  730|  3.71k|                    Err((0..i, "A double exponent cannot be empty").into())
  731|  1.37M|                } else if count_before == 0 && count_after.unwrap_or(0) == 0 {
  732|    111|                    Err((0..i, "A double should not be empty").into())
  733|       |                } else {
  734|  1.37M|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Double)
  735|       |                },
  736|       |            ))
  737|   623k|        } else if let Some(count_after) = count_after {
  738|   106k|            if count_after == 0 {
  739|       |                // We do not consume the '.' after all
  740|  76.8k|                i -= 1;
  741|  76.8k|                Some((
  742|  76.8k|                    i,
  743|  76.8k|                    if count_before == 0 {
  744|  10.4k|                        Err((0..i, "An integer should not be empty").into())
  745|       |                    } else {
  746|  66.4k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  747|       |                    },
  748|       |                ))
  749|       |            } else {
  750|  29.5k|                Some((i, str_from_utf8(&data[..i], 0..i).map(N3Token::Decimal)))
  751|       |            }
  752|       |        } else {
  753|       |            Some((
  754|   517k|                i,
  755|   517k|                if count_before == 0 {
  756|  24.3k|                    Err((0..i, "An integer should not be empty").into())
  757|       |                } else {
  758|   492k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  759|       |                },
  760|       |            ))
  761|       |        }
  762|  2.16M|    }
_RNvMs_NtCssoZq86sT9S_5oxttl5lexerNtB4_7N3Lexer16recognize_escape:
  764|  72.3k|    fn recognize_escape(
  765|  72.3k|        &self,
  766|  72.3k|        data: &[u8],
  767|  72.3k|        position: usize,
  768|  72.3k|        with_echar: bool,
  769|  72.3k|    ) -> Option<(usize, Result<char, TokenRecognizerError>)> {
  770|  72.3k|        // [26]   UCHAR  ::=  '\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
  771|  72.3k|        // [159s] ECHAR  ::=  '\' [tbnrf"'\]
  772|  72.3k|        match *data.get(1)? {
  773|  20.2k|            b'u' => match Self::recognize_hex_char(&data[2..], 4, 'u', position) {
  774|  19.7k|                Ok(c) => Some((5, Ok(c?))),
  775|    495|                Err(e) => {
  776|    495|                    if self.unchecked {
  777|    193|                        match Self::recognize_utf16_surrogate_pair(&data[2..], position) {
  778|      0|                            Ok(c) => Some((11, Ok(c?))),
  779|    193|                            Err(e) => Some((5, Err(e))),
  780|       |                        }
  781|       |                    } else {
  782|    302|                        Some((5, Err(e)))
  783|       |                    }
  784|       |                }
  785|       |            },
  786|  3.12k|            b'U' => match Self::recognize_hex_char(&data[2..], 8, 'u', position) {
  787|  2.62k|                Ok(c) => Some((9, Ok(c?))),
  788|    498|                Err(e) => Some((9, Err(e))),
  789|       |            },
  790|    491|            b't' if with_echar => Some((1, Ok('\t'))),
  791|    366|            b'b' if with_echar => Some((1, Ok('\x08'))),
  792|    521|            b'n' if with_echar => Some((1, Ok('\n'))),
  793|    623|            b'r' if with_echar => Some((1, Ok('\r'))),
  794|    364|            b'f' if with_echar => Some((1, Ok('\x0C'))),
  795|  1.18k|            b'"' if with_echar => Some((1, Ok('"'))),
  796|    979|            b'\'' if with_echar => Some((1, Ok('\''))),
  797|  15.0k|            b'\\' if with_echar => Some((1, Ok('\\'))),
  798|  18.5k|            c => Some((
  799|  18.5k|                1,
  800|  18.5k|                Err((
  801|  18.5k|                    position..position + 2,
  802|  18.5k|                    format!("Unexpected escape character '\\{}'", char::from(c)),
  803|  18.5k|                )
  804|  18.5k|                    .into()),
  805|  18.5k|            )), // TODO: read until end of string
  806|       |        }
  807|  72.3k|    }
_RNvMs_NtCssoZq86sT9S_5oxttl5lexerNtB4_7N3Lexer18recognize_hex_char:
  809|  23.3k|    fn recognize_hex_char(
  810|  23.3k|        data: &[u8],
  811|  23.3k|        len: usize,
  812|  23.3k|        escape_char: char,
  813|  23.3k|        position: usize,
  814|  23.3k|    ) -> Result<Option<char>, TokenRecognizerError> {
  815|  23.3k|        if data.len() < len {
  816|  1.20k|            return Ok(None);
  817|  22.1k|        }
  818|  22.1k|        let val = str_from_utf8(&data[..len], position..position + len + 2)?;
  819|  21.9k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  820|       |            (
  821|       |                position..position + len + 2,
  822|       |                format!(
  823|       |                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  824|       |                ),
  825|       |            )
  826|  21.9k|        })?;
  827|  21.3k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  828|       |            (
  829|       |                position..position + len +2,
  830|       |                format!(
  831|       |                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  832|       |                ),
  833|       |            )
  834|  21.3k|        })?;
  835|  21.1k|        Ok(Some(c))
  836|  23.3k|    }
_RNvMs_NtCssoZq86sT9S_5oxttl5lexerNtB4_7N3Lexer30recognize_utf16_surrogate_pair:
  838|    193|    fn recognize_utf16_surrogate_pair(
  839|    193|        data: &[u8],
  840|    193|        position: usize,
  841|    193|    ) -> Result<Option<char>, TokenRecognizerError> {
  842|    193|        let Some(val_high_slice) = data.get(..4) else {
  843|      0|            return Ok(None);
  844|       |        };
  845|    193|        let val_high = str_from_utf8(val_high_slice, position..position + 6)?;
  846|    116|        let surrogate_high = u16::from_str_radix(val_high, 16).map_err(|e| {
  847|       |            (
  848|       |                position..position + 6,
  849|       |                format!(
  850|       |                    "The escape sequence '\\u{val_high}' is not a valid hexadecimal string: {e}"
  851|       |                ),
  852|       |            )
  853|    116|        })?;
  854|       |
  855|       |        // TODO: replace with [`u16::is_utf16_surrogate`] when #94919 is stable
  856|      0|        if !matches!(surrogate_high, 0xD800..=0xDFFF) {
  857|      0|            return Err((
  858|      0|                position..position + 6,
  859|      0|                format!("The escape sequence '\\u{val_high}' is not a UTF-16 surrogate"),
  860|      0|            )
  861|      0|                .into());
  862|      0|        }
  863|      0|        let Some(&d4) = data.get(4) else {
  864|      0|            return Ok(None);
  865|       |        };
  866|      0|        let Some(&d5) = data.get(5) else {
  867|      0|            return Ok(None);
  868|       |        };
  869|      0|        if d4 != b'\\' || d5 != b'u' {
  870|      0|            return Err((
  871|      0|                position..position + 6,
  872|      0|                format!(
  873|      0|                    "UTF-16 surrogate escape sequence '\\u{val_high}' must be followed by another surrogate escape sequence"),
  874|      0|            )
  875|      0|                .into());
  876|      0|        }
  877|       |
  878|      0|        let Some(val_low_slice) = data.get(6..10) else {
  879|      0|            return Ok(None);
  880|       |        };
  881|      0|        let val_low = str_from_utf8(val_low_slice, position + 6..position + 12)?;
  882|      0|        let surrogate_low = u16::from_str_radix(val_low, 16).map_err(|e| {
  883|       |            (
  884|       |                position + 6..position + 12,
  885|       |                format!(
  886|       |                    "The escape sequence '\\u{val_low}' is not a valid hexadecimal string: {e}"
  887|       |                ),
  888|       |            )
  889|      0|        })?;
  890|       |
  891|      0|        let mut chars = char::decode_utf16([surrogate_high, surrogate_low]);
  892|       |
  893|      0|        let c = chars.next()
  894|      0|            .and_then(Result::ok)
  895|      0|            .ok_or_else(|| {
  896|       |                (
  897|       |                    position..position + 12,
  898|       |                    format!(
  899|       |                        "Escape sequences '\\u{val_high}\\u{val_low}' do not form a valid UTF-16 surrogate pair"
  900|       |                    ),
  901|       |                )
  902|      0|            })?;
  903|       |
  904|      0|        debug_assert_eq!(
  905|      0|            chars.next(),
  906|       |            None,
  907|      0|            "Surrogate pair should combine to exactly one character"
  908|       |        );
  909|       |
  910|      0|        Ok(Some(c))
  911|    193|    }
_RNvMs_NtCssoZq86sT9S_5oxttl5lexerNtB4_7N3Lexer22recognize_unicode_char:
  913|  11.2M|    fn recognize_unicode_char(
  914|  11.2M|        data: &[u8],
  915|  11.2M|        position: usize,
  916|  11.2M|    ) -> Option<Result<(char, usize), TokenRecognizerError>> {
  917|  11.2M|        let mut code_point: u32;
  918|  11.2M|        let bytes_needed: usize;
  919|  11.2M|        let mut lower_boundary = 0x80;
  920|  11.2M|        let mut upper_boundary = 0xBF;
  921|       |
  922|  11.2M|        let byte = *data.first()?;
  923|  11.0M|        match byte {
  924|  11.0M|            0x00..=0x7F => return Some(Ok((char::from(byte), 1))),
  925|   284k|            0xC2..=0xDF => {
  926|   146k|                bytes_needed = 1;
  927|   146k|                code_point = u32::from(byte) & 0x1F;
  928|   146k|            }
  929|   138k|            0xE0..=0xEF => {
  930|  37.6k|                if byte == 0xE0 {
  931|  6.91k|                    lower_boundary = 0xA0;
  932|  30.7k|                }
  933|  37.6k|                if byte == 0xED {
  934|  2.92k|                    upper_boundary = 0x9F;
  935|  34.7k|                }
  936|  37.6k|                bytes_needed = 2;
  937|  37.6k|                code_point = u32::from(byte) & 0xF;
  938|       |            }
  939|   100k|            0xF0..=0xF4 => {
  940|  16.0k|                if byte == 0xF0 {
  941|  1.36k|                    lower_boundary = 0x90;
  942|  14.6k|                }
  943|  16.0k|                if byte == 0xF4 {
  944|  4.09k|                    upper_boundary = 0x8F;
  945|  11.9k|                }
  946|  16.0k|                bytes_needed = 3;
  947|  16.0k|                code_point = u32::from(byte) & 0x7;
  948|       |            }
  949|       |            _ => {
  950|   290k|                return Some(Err((
  951|   290k|                    position..=position,
  952|   290k|                    "Invalid UTF-8 character encoding",
  953|   290k|                )
  954|   290k|                    .into()))
  955|       |            }
  956|       |        }
  957|       |
  958|   210k|        for i in 1..=bytes_needed {
  959|   210k|            let byte = *data.get(i)?;
  960|   156k|            if byte < lower_boundary || upper_boundary < byte {
  961|   118k|                return Some(Err((
  962|   118k|                    position..=position + i,
  963|   118k|                    "Invalid UTF-8 character encoding",
  964|   118k|                )
  965|   118k|                    .into()));
  966|  38.5k|            }
  967|  38.5k|            lower_boundary = 0x80;
  968|  38.5k|            upper_boundary = 0xBF;
  969|  38.5k|            code_point = (code_point << 6) | (u32::from(byte) & 0x3F);
  970|       |        }
  971|       |
  972|  28.2k|        Some(
  973|  28.2k|            char::from_u32(code_point)
  974|  28.2k|                .map(|c| (c, bytes_needed + 1))
  975|  28.2k|                .ok_or_else(|| {
  976|       |                    (
  977|       |                        position..=position + bytes_needed,
  978|       |                        format!("The codepoint {code_point:X} is not a valid unicode character"),
  979|       |                    )
  980|       |                        .into()
  981|  28.2k|                }),
  982|  28.2k|        )
  983|  11.2M|    }
_RNvMs_NtCssoZq86sT9S_5oxttl5lexerNtB4_7N3Lexer25is_possible_pn_chars_base:
  986|  10.4M|    fn is_possible_pn_chars_base(c: char) -> bool {
  987|  10.4M|        matches!(c,
  988|  4.59M|        'A'..='Z'
  989|  3.18M|        | 'a'..='z'
  990|  27.6k|        | '\u{00C0}'..='\u{00D6}'
  991|  27.6k|        | '\u{00D8}'..='\u{00F6}'
  992|  27.5k|        | '\u{00F8}'..='\u{02FF}'
  993|  23.2k|        | '\u{0370}'..='\u{037D}'
  994|  23.2k|        | '\u{037F}'..='\u{1FFF}'
  995|  3.66k|        | '\u{200C}'..='\u{200D}'
  996|  3.66k|        | '\u{2070}'..='\u{218F}'
  997|  3.65k|        | '\u{2C00}'..='\u{2FEF}'
  998|  3.64k|        | '\u{3001}'..='\u{D7FF}'
  999|  1.43k|        | '\u{F900}'..='\u{FDCF}'
 1000|  1.14k|        | '\u{FDF0}'..='\u{FFFD}'
 1001|  1.14k|        | '\u{10000}'..='\u{EFFFF}')
 1002|  10.4M|    }
_RNvMs_NtCssoZq86sT9S_5oxttl5lexerNtB4_7N3Lexer22is_possible_pn_chars_u:
 1005|  8.91M|    pub(super) fn is_possible_pn_chars_u(c: char) -> bool {
 1006|  8.91M|        Self::is_possible_pn_chars_base(c) || c == '_'
 1007|  8.91M|    }
_RNvMs_NtCssoZq86sT9S_5oxttl5lexerNtB4_7N3Lexer20is_possible_pn_chars:
 1010|  8.48M|    pub(crate) fn is_possible_pn_chars(c: char) -> bool {
 1011|  8.48M|        Self::is_possible_pn_chars_u(c)
 1012|  4.66M|            || matches!(c,
 1013|  3.66M|        '-' | '0'..='9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
 1014|  8.48M|    }
_RNvMs_NtCssoZq86sT9S_5oxttl5lexerNtB4_7N3Lexer43is_possible_pn_chars_base_but_not_valid_iri:
 1016|   519k|    fn is_possible_pn_chars_base_but_not_valid_iri(c: char) -> bool {
 1017|   519k|        matches!(c, '\u{FFF0}'..='\u{FFFD}')
 1018|   519k|            || u32::from(c) % u32::from('\u{FFFE}') == 0
 1019|   519k|            || u32::from(c) % u32::from('\u{FFFF}') == 0
 1020|   519k|    }
_RNvNtCssoZq86sT9S_5oxttl5lexer18resolve_local_name:
 1023|  94.0k|pub fn resolve_local_name(
 1024|  94.0k|    prefix: &str,
 1025|  94.0k|    local: &str,
 1026|  94.0k|    might_be_invalid_iri: bool,
 1027|  94.0k|    prefixes: &HashMap<String, Iri<String>>,
 1028|  94.0k|) -> Result<NamedNode, String> {
 1029|  94.0k|    if let Some(start) = prefixes.get(prefix) {
 1030|  74.6k|        let iri = format!("{start}{local}");
 1031|  74.6k|        if might_be_invalid_iri || start.path().is_empty() {
 1032|       |            // We validate again. We always validate if the local part might be the IRI authority.
 1033|  70.3k|            if let Err(e) = Iri::parse(iri.as_str()) {
 1034|  1.76k|                return Err(format!(
 1035|  1.76k|                    "The prefixed name {prefix}:{local} builds IRI {iri} that is invalid: {e}"
 1036|  1.76k|                ));
 1037|  68.5k|            }
 1038|  4.33k|        }
 1039|  72.9k|        Ok(NamedNode::new_unchecked(iri))
 1040|       |    } else {
 1041|  19.3k|        Err(format!("The prefix {prefix}: has not been declared"))
 1042|       |    }
 1043|  94.0k|}
_RNvNtCssoZq86sT9S_5oxttl5lexer13str_from_utf8:
 1045|  2.86M|fn str_from_utf8(data: &[u8], range: Range<usize>) -> Result<&str, TokenRecognizerError> {
 1046|  2.86M|    str::from_utf8(data).map_err(|e| {
 1047|       |        (
 1048|       |            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
 1049|       |            format!("Invalid UTF-8: {e}"),
 1050|       |        )
 1051|       |            .into()
 1052|  2.86M|    })
 1053|  2.86M|}
_RNvNtCssoZq86sT9S_5oxttl5lexer16string_from_utf8:
 1055|  2.57M|fn string_from_utf8(data: Vec<u8>, range: Range<usize>) -> Result<String, TokenRecognizerError> {
 1056|  2.57M|    String::from_utf8(data).map_err(|e| {
 1057|       |        (
 1058|       |            range.start + e.utf8_error().valid_up_to()
 1059|       |                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
 1060|       |            format!("Invalid UTF-8: {e}"),
 1061|       |        )
 1062|       |            .into()
 1063|  2.57M|    })
 1064|  2.57M|}
_RNCNvMs_NtCssoZq86sT9S_5oxttl5lexerNtB6_7N3Lexer9parse_iri0B8_:
  224|  33.3k|                        .map_err(|e| (position, e.to_string()))?
_RNCNvMs_NtCssoZq86sT9S_5oxttl5lexerNtB6_7N3Lexer26recognize_pname_or_keyword0B8_:
  320|   144k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|   144k|                prefix: pn_prefix,
  322|   144k|                local,
  323|   144k|                might_be_invalid_iri,
  324|   144k|            }),
_RNCNvMs_NtCssoZq86sT9S_5oxttl5lexerNtB6_7N3Lexer18recognize_variable0B8_:
  337|  27.1k|            result.and_then(|(name, _)| {
  338|  27.1k|                if name.is_empty() {
  339|  20.9k|                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|  6.13k|                    Ok(N3Token::Variable(name))
  342|       |                }
  343|  27.1k|            }),
_RNCNvMs_NtCssoZq86sT9S_5oxttl5lexerNtB6_7N3Lexer14parse_lang_tag0B8_:
  582|  4.08k|                .map_err(|e| (position.clone(), e.to_string()))?
_RNCNvMs_NtCssoZq86sT9S_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_char0B8_:
  819|    539|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  820|    539|            (
  821|    539|                position..position + len + 2,
  822|    539|                format!(
  823|    539|                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  824|    539|                ),
  825|    539|            )
  826|    539|        })?;
_RNCNvMs_NtCssoZq86sT9S_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_chars_0B8_:
  827|    215|        let c = char::from_u32(codepoint).ok_or_else(|| {
  828|    215|            (
  829|    215|                position..position + len +2,
  830|    215|                format!(
  831|    215|                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  832|    215|                ),
  833|    215|            )
  834|    215|        })?;
_RNCNvMs_NtCssoZq86sT9S_5oxttl5lexerNtB6_7N3Lexer30recognize_utf16_surrogate_pair0B8_:
  846|    116|        let surrogate_high = u16::from_str_radix(val_high, 16).map_err(|e| {
  847|    116|            (
  848|    116|                position..position + 6,
  849|    116|                format!(
  850|    116|                    "The escape sequence '\\u{val_high}' is not a valid hexadecimal string: {e}"
  851|    116|                ),
  852|    116|            )
  853|    116|        })?;
_RNCNvMs_NtCssoZq86sT9S_5oxttl5lexerNtB6_7N3Lexer22recognize_unicode_char0B8_:
  974|  28.2k|                .map(|c| (c, bytes_needed + 1))
_RNCNvNtCssoZq86sT9S_5oxttl5lexer13str_from_utf80B5_:
 1046|  3.09k|    str::from_utf8(data).map_err(|e| {
 1047|  3.09k|        (
 1048|  3.09k|            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
 1049|  3.09k|            format!("Invalid UTF-8: {e}"),
 1050|  3.09k|        )
 1051|  3.09k|            .into()
 1052|  3.09k|    })
_RNCNvNtCssoZq86sT9S_5oxttl5lexer16string_from_utf80B5_:
 1056|  15.2k|    String::from_utf8(data).map_err(|e| {
 1057|  15.2k|        (
 1058|  15.2k|            range.start + e.utf8_error().valid_up_to()
 1059|  15.2k|                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
 1060|  15.2k|            format!("Invalid UTF-8: {e}"),
 1061|  15.2k|        )
 1062|  15.2k|            .into()
 1063|  15.2k|    })

_RNvMNtCssoZq86sT9S_5oxttl5terseNtB2_21TriGRecognizerContext8prefixes:
   32|  25.2k|    pub fn prefixes(&self) -> Iter<'_, String, Iri<String>> {
   33|  25.2k|        self.prefixes.iter()
   34|  25.2k|    }
_RNvXs_NtCssoZq86sT9S_5oxttl5terseNtB4_14TriGRecognizerNtNtNtB6_7toolkit6parser14RuleRecognizer20error_recovery_state:
   42|  1.71M|    fn error_recovery_state(mut self) -> Self {
   43|  1.71M|        self.stack.clear();
   44|  1.71M|        self.cur_subject.clear();
   45|  1.71M|        self.cur_predicate.clear();
   46|  1.71M|        self.cur_object.clear();
   47|  1.71M|        self.cur_graph = GraphName::DefaultGraph;
   48|  1.71M|        self
   49|  1.71M|    }
_RNvXs_NtCssoZq86sT9S_5oxttl5terseNtB4_14TriGRecognizerNtNtNtB6_7toolkit6parser14RuleRecognizer14recognize_next:
   51|  12.2M|    fn recognize_next(
   52|  12.2M|        mut self,
   53|  12.2M|        token: TokenOrLineJump<N3Token<'_>>,
   54|  12.2M|        context: &mut TriGRecognizerContext,
   55|  12.2M|        results: &mut Vec<Quad>,
   56|  12.2M|        errors: &mut Vec<RuleRecognizerError>,
   57|  12.2M|    ) -> Self {
   58|  12.2M|        let TokenOrLineJump::Token(token) = token else {
   59|   224k|            return self;
   60|       |        };
   61|  12.0M|        if let Some(rule) = self.stack.pop() {
   62|  10.5M|            match rule {
   63|       |                // [1g] trigDoc      ::=  (directive | block)*
   64|       |                // [2g] block        ::=  triplesOrGraph | wrappedGraph | triples2 | "GRAPH" labelOrSubject wrappedGraph
   65|       |                // [3]  directive    ::=  prefixID | base | sparqlPrefix | sparqlBase
   66|       |                // [4]  prefixID     ::=  '@prefix' PNAME_NS IRIREF '.'
   67|       |                // [5]  base         ::=  '@base' IRIREF '.'
   68|       |                // [5s] sparqlPrefix ::=  "PREFIX" PNAME_NS IRIREF
   69|       |                // [6s] sparqlBase   ::=  "BASE" IRIREF
   70|       |                TriGState::TriGDoc => {
   71|   472k|                    self.cur_graph = GraphName::DefaultGraph;
   72|   472k|                    self.stack.push(TriGState::TriGDoc);
   73|  23.4k|                    match token {
   74|  23.1k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("base") => {
   75|  5.91k|                            self.stack.push(TriGState::BaseExpectIri);
   76|  5.91k|                            self
   77|       |                        }
   78|  17.1k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("prefix") => {
   79|    133|                            self.stack.push(TriGState::PrefixExpectPrefix);
   80|    133|                            self
   81|       |                        }
   82|  11.3k|                        N3Token::LangTag("prefix") => {
   83|  9.97k|                            self.stack.push(TriGState::ExpectDot);
   84|  9.97k|                            self.stack.push(TriGState::PrefixExpectPrefix);
   85|  9.97k|                            self
   86|       |                        }
   87|  1.35k|                        N3Token::LangTag("base") => {
   88|    128|                            self.stack.push(TriGState::ExpectDot);
   89|    128|                            self.stack.push(TriGState::BaseExpectIri);
   90|    128|                            self
   91|       |                        }
   92|      0|                        N3Token::PlainKeyword(k)
   93|  17.0k|                            if k.eq_ignore_ascii_case("graph") && context.with_graph_name =>
   94|      0|                        {
   95|      0|                            self.stack.push(TriGState::WrappedGraph);
   96|      0|                            self.stack.push(TriGState::GraphName);
   97|      0|                            self
   98|       |                        }
   99|   219k|                        N3Token::Punctuation("{") if context.with_graph_name => {
  100|  6.37k|                            self.stack.push(TriGState::WrappedGraph);
  101|  6.37k|                            self.recognize_next(
  102|  6.37k|                                TokenOrLineJump::Token(token),
  103|  6.37k|                                context,
  104|  6.37k|                                results,
  105|  6.37k|                                errors,
  106|  6.37k|                            )
  107|       |                        }
  108|       |                        _ => {
  109|   449k|                            self.stack.push(TriGState::TriplesOrGraph);
  110|   449k|                            self.recognize_next(
  111|   449k|                                TokenOrLineJump::Token(token),
  112|   449k|                                context,
  113|   449k|                                results,
  114|   449k|                                errors,
  115|   449k|                            )
  116|       |                        }
  117|       |                    }
  118|       |                }
  119|       |                TriGState::ExpectDot => {
  120|   178k|                    self.cur_subject.pop();
  121|   178k|                    if token == N3Token::Punctuation(".") {
  122|   147k|                        self
  123|       |                    } else {
  124|  31.5k|                        errors.push("A dot is expected at the end of statements".into());
  125|  31.5k|                        self.recognize_next(TokenOrLineJump::Token(token), context, results, errors)
  126|       |                    }
  127|       |                }
  128|       |                TriGState::BaseExpectIri => {
  129|  4.87k|                    if let N3Token::IriRef(iri) = token {
  130|  4.68k|                        context.lexer_options.base_iri = Some(Iri::parse_unchecked(iri));
  131|  4.68k|                        self
  132|       |                    } else {
  133|    189|                        self.error(errors, "The BASE keyword should be followed by an IRI")
  134|       |                    }
  135|       |                }
  136|  9.28k|                TriGState::PrefixExpectPrefix => match token {
  137|  9.28k|                    N3Token::PrefixedName { prefix, local, .. } if local.is_empty() => {
  138|  9.10k|                        self.stack.push(TriGState::PrefixExpectIri {
  139|  9.10k|                            name: prefix.to_owned(),
  140|  9.10k|                        });
  141|  9.10k|                        self
  142|       |                    }
  143|    753|                    _ => self.error(
  144|    753|                        errors,
  145|    753|                        "The PREFIX keyword should be followed by a prefix like 'ex:'",
  146|    753|                    ),
  147|       |                },
  148|  7.26k|                TriGState::PrefixExpectIri { name } => {
  149|  7.26k|                    if let N3Token::IriRef(iri) = token {
  150|  7.06k|                        context.prefixes.insert(name, Iri::parse_unchecked(iri));
  151|  7.06k|                        self
  152|       |                    } else {
  153|    205|                        self.error(errors, "The PREFIX declaration should be followed by a prefix and its value as an IRI")
  154|       |                    }
  155|       |                }
  156|       |                // [3g]  triplesOrGraph  ::=  labelOrSubject ( wrappedGraph | predicateObjectList '.' ) | quotedTriple predicateObjectList '.'
  157|       |                // [4g]  triples2        ::=  blankNodePropertyList predicateObjectList? '.' | collection predicateObjectList '.'
  158|  59.9k|                TriGState::TriplesOrGraph => match token {
  159|   110k|                    N3Token::IriRef(iri) => {
  160|   110k|                        self.stack
  161|   110k|                            .push(TriGState::WrappedGraphOrPredicateObjectList {
  162|   110k|                                term: NamedNode::new_unchecked(iri).into(),
  163|   110k|                            });
  164|   110k|                        self
  165|       |                    }
  166|       |                    N3Token::PrefixedName {
  167|  20.5k|                        prefix,
  168|  20.5k|                        local,
  169|  20.5k|                        might_be_invalid_iri,
  170|  20.5k|                    } => match resolve_local_name(
  171|  20.5k|                        prefix,
  172|  20.5k|                        &local,
  173|  20.5k|                        might_be_invalid_iri,
  174|  20.5k|                        &context.prefixes,
  175|  20.5k|                    ) {
  176|  2.54k|                        Ok(t) => {
  177|  2.54k|                            self.stack
  178|  2.54k|                                .push(TriGState::WrappedGraphOrPredicateObjectList {
  179|  2.54k|                                    term: t.into(),
  180|  2.54k|                                });
  181|  2.54k|                            self
  182|       |                        }
  183|  18.0k|                        Err(e) => self.error(errors, e),
  184|       |                    },
  185|  75.6k|                    N3Token::BlankNodeLabel(label) => {
  186|  75.6k|                        self.stack
  187|  75.6k|                            .push(TriGState::WrappedGraphOrPredicateObjectList {
  188|  75.6k|                                term: BlankNode::new_unchecked(label).into(),
  189|  75.6k|                            });
  190|  75.6k|                        self
  191|       |                    }
  192|   212k|                    N3Token::Punctuation("[") => {
  193|  7.45k|                        self.stack
  194|  7.45k|                            .push(TriGState::WrappedGraphBlankNodePropertyListCurrent);
  195|  7.45k|                        self
  196|       |                    }
  197|   205k|                    N3Token::Punctuation("(") => {
  198|  32.9k|                        self.stack.push(TriGState::ExpectDot);
  199|  32.9k|                        self.stack.push(TriGState::PredicateObjectList);
  200|  32.9k|                        self.stack.push(TriGState::SubjectCollectionBeginning);
  201|  32.9k|                        self
  202|       |                    }
  203|       |                    #[cfg(feature = "rdf-star")]
  204|   172k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  205|  59.9k|                        self.stack.push(TriGState::ExpectDot);
  206|  59.9k|                        self.stack.push(TriGState::PredicateObjectList);
  207|  59.9k|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  208|  59.9k|                        self.stack.push(TriGState::QuotedObject);
  209|  59.9k|                        self.stack.push(TriGState::Verb);
  210|  59.9k|                        self.stack.push(TriGState::QuotedSubject);
  211|  59.9k|                        self
  212|       |                    }
  213|   143k|                    _ => self.error(errors, "TOKEN is not a valid subject or graph name"),
  214|       |                },
  215|   172k|                TriGState::WrappedGraphOrPredicateObjectList { term } => {
  216|   172k|                    if token == N3Token::Punctuation("{") && context.with_graph_name {
  217|  19.7k|                        self.cur_graph = term.into();
  218|  19.7k|                        self.stack.push(TriGState::WrappedGraph);
  219|   153k|                    } else {
  220|   153k|                        self.cur_subject.push(term.into());
  221|   153k|                        self.stack.push(TriGState::ExpectDot);
  222|   153k|                        self.stack.push(TriGState::PredicateObjectList);
  223|   153k|                    }
  224|   172k|                    self.recognize_next(TokenOrLineJump::Token(token), context, results, errors)
  225|       |                }
  226|       |                TriGState::WrappedGraphBlankNodePropertyListCurrent => {
  227|  7.05k|                    if token == N3Token::Punctuation("]") {
  228|  1.28k|                        self.stack
  229|  1.28k|                            .push(TriGState::WrappedGraphOrPredicateObjectList {
  230|  1.28k|                                term: BlankNode::default().into(),
  231|  1.28k|                            });
  232|  1.28k|                        self
  233|       |                    } else {
  234|  5.77k|                        self.cur_subject.push(BlankNode::default().into());
  235|  5.77k|                        self.stack.push(TriGState::ExpectDot);
  236|  5.77k|                        self.stack.push(TriGState::SubjectBlankNodePropertyListEnd);
  237|  5.77k|                        self.stack.push(TriGState::PredicateObjectList);
  238|  5.77k|                        self.recognize_next(TokenOrLineJump::Token(token), context, results, errors)
  239|       |                    }
  240|       |                }
  241|       |                TriGState::SubjectBlankNodePropertyListEnd => {
  242|  2.82k|                    if token == N3Token::Punctuation("]") {
  243|  1.29k|                        self.stack
  244|  1.29k|                            .push(TriGState::SubjectBlankNodePropertyListAfter);
  245|  1.29k|                        self
  246|       |                    } else {
  247|  1.52k|                        errors.push("blank node property lists should end with a ']'".into());
  248|  1.52k|                        self.stack
  249|  1.52k|                            .push(TriGState::SubjectBlankNodePropertyListAfter);
  250|  1.52k|                        self.recognize_next(TokenOrLineJump::Token(token), context, results, errors)
  251|       |                    }
  252|       |                }
  253|       |                TriGState::SubjectBlankNodePropertyListAfter => {
  254|  2.80k|                    if matches!(token, N3Token::Punctuation("." | "}")) {
  255|  1.66k|                        self.recognize_next(TokenOrLineJump::Token(token), context, results, errors)
  256|       |                    } else {
  257|  1.13k|                        self.stack.push(TriGState::PredicateObjectList);
  258|  1.13k|                        self.recognize_next(TokenOrLineJump::Token(token), context, results, errors)
  259|       |                    }
  260|       |                }
  261|       |                TriGState::SubjectCollectionBeginning => {
  262|  33.1k|                    if let N3Token::Punctuation(")") = token {
  263|    192|                        self.cur_subject.push(rdf::NIL.into());
  264|    192|                        self
  265|       |                    } else {
  266|  32.9k|                        let root = BlankNode::default();
  267|  32.9k|                        self.cur_subject.push(root.clone().into());
  268|  32.9k|                        self.cur_subject.push(root.into());
  269|  32.9k|                        self.cur_predicate.push(rdf::FIRST.into());
  270|  32.9k|                        self.stack.push(TriGState::SubjectCollectionPossibleEnd);
  271|  32.9k|                        self.stack.push(TriGState::Object);
  272|  32.9k|                        self.recognize_next(TokenOrLineJump::Token(token), context, results, errors)
  273|       |                    }
  274|       |                }
  275|       |                TriGState::SubjectCollectionPossibleEnd => {
  276|  11.5k|                    let old = self.cur_subject.pop().unwrap();
  277|  11.5k|                    self.cur_object.pop();
  278|  11.5k|                    if let N3Token::Punctuation(")") = token {
  279|    610|                        self.cur_predicate.pop();
  280|    610|                        results.push(Quad::new(old, rdf::REST, rdf::NIL, self.cur_graph.clone()));
  281|    610|                        self
  282|       |                    } else {
  283|  10.9k|                        let new = BlankNode::default();
  284|  10.9k|                        results.push(Quad::new(
  285|  10.9k|                            old,
  286|  10.9k|                            rdf::REST,
  287|  10.9k|                            new.clone(),
  288|  10.9k|                            self.cur_graph.clone(),
  289|  10.9k|                        ));
  290|  10.9k|                        self.cur_subject.push(new.into());
  291|  10.9k|                        self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  292|  10.9k|                        self.stack.push(TriGState::Object);
  293|  10.9k|                        self.recognize_next(TokenOrLineJump::Token(token), context, results, errors)
  294|       |                    }
  295|       |                }
  296|       |                // [5g]  wrappedGraph  ::=  '{' triplesBlock? '}'
  297|       |                // [6g]  triplesBlock  ::=  triples ('.' triplesBlock?)?
  298|       |                TriGState::WrappedGraph => {
  299|  26.0k|                    if token == N3Token::Punctuation("{") {
  300|  26.0k|                        self.stack.push(TriGState::WrappedGraphPossibleEnd);
  301|  26.0k|                        self.stack.push(TriGState::Triples);
  302|  26.0k|                        self
  303|       |                    } else {
  304|      0|                        self.error(errors, "The GRAPH keyword should be followed by a graph name and a value in '{'")
  305|       |                    }
  306|       |                }
  307|       |                TriGState::WrappedGraphPossibleEnd => {
  308|  31.9k|                    self.cur_subject.pop();
  309|  31.9k|                    match token {
  310|  27.2k|                        N3Token::Punctuation("}") => self,
  311|  23.4k|                        N3Token::Punctuation(".") => {
  312|  22.5k|                            self.stack.push(TriGState::WrappedGraphPossibleEnd);
  313|  22.5k|                            self.stack.push(TriGState::Triples);
  314|  22.5k|                            self
  315|       |                        }
  316|       |                        _ => {
  317|  5.61k|                            errors.push(
  318|  5.61k|                                "A '}' or a '.' is expected at the end of a graph block".into(),
  319|  5.61k|                            );
  320|  5.61k|                            self.recognize_next(
  321|  5.61k|                                TokenOrLineJump::Token(token),
  322|  5.61k|                                context,
  323|  5.61k|                                results,
  324|  5.61k|                                errors,
  325|  5.61k|                            )
  326|       |                        }
  327|       |                    }
  328|       |                }
  329|       |                // [6]  triples   ::=  subject predicateObjectList | blankNodePropertyList predicateObjectList?
  330|       |                // [10]  subject  ::=  iri | BlankNode | collection | quotedTriple
  331|  7.99k|                TriGState::Triples => match token {
  332|  21.5k|                    N3Token::Punctuation("}") => {
  333|  3.81k|                        self.recognize_next(TokenOrLineJump::Token(token), context, results, errors)
  334|       |                        // Early end
  335|       |                    }
  336|  17.7k|                    N3Token::Punctuation("[") => {
  337|    388|                        self.cur_subject.push(BlankNode::default().into());
  338|    388|                        self.stack
  339|    388|                            .push(TriGState::TriplesBlankNodePropertyListCurrent);
  340|    388|                        self
  341|       |                    }
  342|  10.9k|                    N3Token::IriRef(iri) => {
  343|  10.9k|                        self.cur_subject.push(NamedNode::new_unchecked(iri).into());
  344|  10.9k|                        self.stack.push(TriGState::PredicateObjectList);
  345|  10.9k|                        self
  346|       |                    }
  347|       |                    N3Token::PrefixedName {
  348|    974|                        prefix,
  349|    974|                        local,
  350|    974|                        might_be_invalid_iri,
  351|    974|                    } => match resolve_local_name(
  352|    974|                        prefix,
  353|    974|                        &local,
  354|    974|                        might_be_invalid_iri,
  355|    974|                        &context.prefixes,
  356|    974|                    ) {
  357|    302|                        Ok(t) => {
  358|    302|                            self.cur_subject.push(t.into());
  359|    302|                            self.stack.push(TriGState::PredicateObjectList);
  360|    302|                            self
  361|       |                        }
  362|    672|                        Err(e) => self.error(errors, e),
  363|       |                    },
  364|  12.8k|                    N3Token::BlankNodeLabel(label) => {
  365|  12.8k|                        self.cur_subject
  366|  12.8k|                            .push(BlankNode::new_unchecked(label).into());
  367|  12.8k|                        self.stack.push(TriGState::PredicateObjectList);
  368|  12.8k|                        self
  369|       |                    }
  370|  17.3k|                    N3Token::Punctuation("(") => {
  371|  7.87k|                        self.stack.push(TriGState::PredicateObjectList);
  372|  7.87k|                        self.stack.push(TriGState::SubjectCollectionBeginning);
  373|  7.87k|                        self
  374|       |                    }
  375|       |                    #[cfg(feature = "rdf-star")]
  376|  9.48k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  377|  7.99k|                        self.stack.push(TriGState::PredicateObjectList);
  378|  7.99k|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  379|  7.99k|                        self.stack.push(TriGState::QuotedObject);
  380|  7.99k|                        self.stack.push(TriGState::Verb);
  381|  7.99k|                        self.stack.push(TriGState::QuotedSubject);
  382|  7.99k|                        self
  383|       |                    }
  384|  2.04k|                    _ => self.error(errors, "TOKEN is not a valid RDF subject"),
  385|       |                },
  386|       |                TriGState::TriplesBlankNodePropertyListCurrent => {
  387|    381|                    if token == N3Token::Punctuation("]") {
  388|     82|                        self.stack.push(TriGState::PredicateObjectList);
  389|     82|                        self
  390|       |                    } else {
  391|    299|                        self.stack.push(TriGState::SubjectBlankNodePropertyListEnd);
  392|    299|                        self.stack.push(TriGState::PredicateObjectList);
  393|    299|                        self.recognize_next(TokenOrLineJump::Token(token), context, results, errors)
  394|       |                    }
  395|       |                }
  396|       |                // [7g]  labelOrSubject  ::=  iri | BlankNode
  397|      0|                TriGState::GraphName => match token {
  398|      0|                    N3Token::IriRef(iri) => {
  399|      0|                        self.cur_graph = NamedNode::new_unchecked(iri).into();
  400|      0|                        self
  401|       |                    }
  402|       |                    N3Token::PrefixedName {
  403|      0|                        prefix,
  404|      0|                        local,
  405|      0|                        might_be_invalid_iri,
  406|      0|                    } => match resolve_local_name(
  407|      0|                        prefix,
  408|      0|                        &local,
  409|      0|                        might_be_invalid_iri,
  410|      0|                        &context.prefixes,
  411|      0|                    ) {
  412|      0|                        Ok(t) => {
  413|      0|                            self.cur_graph = t.into();
  414|      0|                            self
  415|       |                        }
  416|      0|                        Err(e) => self.error(errors, e),
  417|       |                    },
  418|      0|                    N3Token::BlankNodeLabel(label) => {
  419|      0|                        self.cur_graph = BlankNode::new_unchecked(label).into();
  420|      0|                        self
  421|       |                    }
  422|      0|                    N3Token::Punctuation("[") => {
  423|      0|                        self.stack.push(TriGState::GraphNameAnonEnd);
  424|      0|                        self
  425|       |                    }
  426|      0|                    _ => self.error(errors, "TOKEN is not a valid graph name"),
  427|       |                },
  428|       |                TriGState::GraphNameAnonEnd => {
  429|      0|                    if token == N3Token::Punctuation("]") {
  430|      0|                        self.cur_graph = BlankNode::default().into();
  431|      0|                        self
  432|       |                    } else {
  433|      0|                        self.error(errors, "Anonymous blank node with a property list are not allowed as graph name")
  434|       |                    }
  435|       |                }
  436|       |                // [7]  predicateObjectList  ::=  verb objectList (';' (verb objectList)?)*
  437|       |                TriGState::PredicateObjectList => {
  438|   436k|                    self.stack.push(TriGState::PredicateObjectListEnd);
  439|   436k|                    self.stack.push(TriGState::ObjectsList);
  440|   436k|                    self.stack.push(TriGState::Verb);
  441|   436k|                    self.recognize_next(TokenOrLineJump::Token(token), context, results, errors)
  442|       |                }
  443|       |                TriGState::PredicateObjectListEnd => {
  444|   217k|                    self.cur_predicate.pop();
  445|   217k|                    if token == N3Token::Punctuation(";") {
  446|  9.21k|                        self.stack
  447|  9.21k|                            .push(TriGState::PredicateObjectListPossibleContinuation);
  448|  9.21k|                        self
  449|       |                    } else {
  450|   208k|                        self.recognize_next(TokenOrLineJump::Token(token), context, results, errors)
  451|       |                    }
  452|       |                }
  453|       |                TriGState::PredicateObjectListPossibleContinuation => {
  454|  11.5k|                    if token == N3Token::Punctuation(";") {
  455|  2.30k|                        self.stack
  456|  2.30k|                            .push(TriGState::PredicateObjectListPossibleContinuation);
  457|  2.30k|                        self
  458|  9.20k|                    } else if matches!(token, N3Token::Punctuation("." | "}" | "]")) {
  459|    306|                        self.recognize_next(TokenOrLineJump::Token(token), context, results, errors)
  460|       |                    } else {
  461|  8.89k|                        self.stack.push(TriGState::PredicateObjectListEnd);
  462|  8.89k|                        self.stack.push(TriGState::ObjectsList);
  463|  8.89k|                        self.stack.push(TriGState::Verb);
  464|  8.89k|                        self.recognize_next(TokenOrLineJump::Token(token), context, results, errors)
  465|       |                    }
  466|       |                }
  467|       |                // [8]   objectList  ::=  object annotation? ( ',' object annotation? )*
  468|       |                // [30t] annotation  ::=  '{|' predicateObjectList '|}'
  469|       |                TriGState::ObjectsList => {
  470|   427k|                    self.stack.push(TriGState::ObjectsListEnd);
  471|   427k|                    self.stack.push(TriGState::Object);
  472|   427k|                    self.recognize_next(TokenOrLineJump::Token(token), context, results, errors)
  473|       |                }
  474|   492k|                TriGState::ObjectsListEnd => match token {
  475|   462k|                    N3Token::Punctuation(",") => {
  476|  83.9k|                        self.cur_object.pop();
  477|  83.9k|                        self.stack.push(TriGState::ObjectsListEnd);
  478|  83.9k|                        self.stack.push(TriGState::Object);
  479|  83.9k|                        self
  480|       |                    }
  481|       |                    #[cfg(feature = "rdf-star")]
  482|   378k|                    N3Token::Punctuation("{|") => {
  483|   190k|                        let triple = Triple::new(
  484|   190k|                            self.cur_subject.last().unwrap().clone(),
  485|   190k|                            self.cur_predicate.last().unwrap().clone(),
  486|   190k|                            self.cur_object.pop().unwrap(),
  487|   190k|                        );
  488|   190k|                        self.cur_subject.push(triple.into());
  489|   190k|                        self.stack.push(TriGState::AnnotationEnd);
  490|   190k|                        self.stack.push(TriGState::PredicateObjectList);
  491|   190k|                        self
  492|       |                    }
  493|       |                    _ => {
  494|   217k|                        self.cur_object.pop();
  495|   217k|                        self.recognize_next(TokenOrLineJump::Token(token), context, results, errors)
  496|       |                    }
  497|       |                },
  498|       |                #[cfg(feature = "rdf-star")]
  499|       |                TriGState::AnnotationEnd => {
  500|  6.20k|                    self.cur_subject.pop();
  501|  6.20k|                    self.stack.push(TriGState::ObjectsListAfterAnnotation);
  502|  6.20k|                    if token == N3Token::Punctuation("|}") {
  503|    328|                        self
  504|       |                    } else {
  505|  5.87k|                        self.error(errors, "Annotations should end with '|}'")
  506|       |                    }
  507|       |                }
  508|       |                #[cfg(feature = "rdf-star")]
  509|       |                TriGState::ObjectsListAfterAnnotation => {
  510|    235|                    if token == N3Token::Punctuation(",") {
  511|    132|                        self.stack.push(TriGState::ObjectsListEnd);
  512|    132|                        self.stack.push(TriGState::Object);
  513|    132|                        self
  514|       |                    } else {
  515|    103|                        self.recognize_next(TokenOrLineJump::Token(token), context, results, errors)
  516|       |                    }
  517|       |                }
  518|       |                // [9]   verb       ::=  predicate | 'a'
  519|       |                // [11]  predicate  ::=  iri
  520|  1.96M|                TriGState::Verb => match token {
  521|  10.1k|                    N3Token::PlainKeyword("a") => {
  522|  7.22k|                        self.cur_predicate.push(rdf::TYPE.into());
  523|  7.22k|                        self
  524|       |                    }
  525|  1.87M|                    N3Token::IriRef(iri) => {
  526|  1.87M|                        self.cur_predicate.push(NamedNode::new_unchecked(iri));
  527|  1.87M|                        self
  528|       |                    }
  529|       |                    N3Token::PrefixedName {
  530|  67.0k|                        prefix,
  531|  67.0k|                        local,
  532|  67.0k|                        might_be_invalid_iri,
  533|  67.0k|                    } => match resolve_local_name(
  534|  67.0k|                        prefix,
  535|  67.0k|                        &local,
  536|  67.0k|                        might_be_invalid_iri,
  537|  67.0k|                        &context.prefixes,
  538|  67.0k|                    ) {
  539|  66.4k|                        Ok(t) => {
  540|  66.4k|                            self.cur_predicate.push(t);
  541|  66.4k|                            self
  542|       |                        }
  543|    541|                        Err(e) => self.error(errors, e),
  544|       |                    },
  545|  15.3k|                    _ => self.error(errors, "TOKEN is not a valid predicate"),
  546|       |                },
  547|       |                // [12]    object                 ::=  iri | BlankNode | collection | blankNodePropertyList | literal | quotedTriple
  548|       |                // [13]    literal                ::=  RDFLiteral | NumericLiteral | BooleanLiteral
  549|       |                // [14]    blank                  ::=  BlankNode | collection
  550|       |                // [15]    blankNodePropertyList  ::=  '[' predicateObjectList ']'
  551|       |                // [16]    collection             ::=  '(' object* ')'
  552|       |                // [17]    NumericLiteral         ::=  INTEGER | DECIMAL | DOUBLE
  553|       |                // [128s]  RDFLiteral             ::=  String (LANGTAG | '^^' iri)?
  554|       |                // [133s]  BooleanLiteral         ::=  'true' | 'false'
  555|       |                // [18]    String                 ::=  STRING_LITERAL_QUOTE | STRING_LITERAL_SINGLE_QUOTE | STRING_LITERAL_LONG_SINGLE_QUOTE | STRING_LITERAL_LONG_QUOTE
  556|       |                // [135s]  iri                    ::=  IRIREF | PrefixedName
  557|       |                // [136s]  PrefixedName           ::=  PNAME_LN | PNAME_NS
  558|       |                // [137s]  BlankNode              ::=  BLANK_NODE_LABEL | ANON
  559|  9.36k|                TriGState::Object => match token {
  560|  59.8k|                    N3Token::IriRef(iri) => {
  561|  59.8k|                        self.cur_object.push(NamedNode::new_unchecked(iri).into());
  562|  59.8k|                        self.emit_quad(results);
  563|  59.8k|                        self
  564|       |                    }
  565|       |                    N3Token::PrefixedName {
  566|  3.32k|                        prefix,
  567|  3.32k|                        local,
  568|  3.32k|                        might_be_invalid_iri,
  569|  3.32k|                    } => match resolve_local_name(
  570|  3.32k|                        prefix,
  571|  3.32k|                        &local,
  572|  3.32k|                        might_be_invalid_iri,
  573|  3.32k|                        &context.prefixes,
  574|  3.32k|                    ) {
  575|  1.92k|                        Ok(t) => {
  576|  1.92k|                            self.cur_object.push(t.into());
  577|  1.92k|                            self.emit_quad(results);
  578|  1.92k|                            self
  579|       |                        }
  580|  1.39k|                        Err(e) => self.error(errors, e),
  581|       |                    },
  582|  73.7k|                    N3Token::BlankNodeLabel(label) => {
  583|  73.7k|                        self.cur_object.push(BlankNode::new_unchecked(label).into());
  584|  73.7k|                        self.emit_quad(results);
  585|  73.7k|                        self
  586|       |                    }
  587|   189k|                    N3Token::Punctuation("[") => {
  588|  2.81k|                        self.stack
  589|  2.81k|                            .push(TriGState::ObjectBlankNodePropertyListCurrent);
  590|  2.81k|                        self
  591|       |                    }
  592|   186k|                    N3Token::Punctuation("(") => {
  593|   170k|                        self.stack.push(TriGState::ObjectCollectionBeginning);
  594|   170k|                        self
  595|       |                    }
  596|  20.2k|                    N3Token::String(value) => {
  597|  20.2k|                        self.stack
  598|  20.2k|                            .push(TriGState::LiteralPossibleSuffix { value, emit: true });
  599|  20.2k|                        self
  600|       |                    }
  601|   175k|                    N3Token::Integer(v) => {
  602|   175k|                        self.cur_object
  603|   175k|                            .push(Literal::new_typed_literal(v, xsd::INTEGER).into());
  604|   175k|                        self.emit_quad(results);
  605|   175k|                        self
  606|       |                    }
  607|  8.54k|                    N3Token::Decimal(v) => {
  608|  8.54k|                        self.cur_object
  609|  8.54k|                            .push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
  610|  8.54k|                        self.emit_quad(results);
  611|  8.54k|                        self
  612|       |                    }
  613|   211k|                    N3Token::Double(v) => {
  614|   211k|                        self.cur_object
  615|   211k|                            .push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
  616|   211k|                        self.emit_quad(results);
  617|   211k|                        self
  618|       |                    }
  619|  5.17k|                    N3Token::PlainKeyword("true") => {
  620|    339|                        self.cur_object
  621|    339|                            .push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
  622|    339|                        self.emit_quad(results);
  623|    339|                        self
  624|       |                    }
  625|  4.84k|                    N3Token::PlainKeyword("false") => {
  626|    155|                        self.cur_object
  627|    155|                            .push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
  628|    155|                        self.emit_quad(results);
  629|    155|                        self
  630|       |                    }
  631|       |                    #[cfg(feature = "rdf-star")]
  632|  15.6k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  633|  9.36k|                        self.stack
  634|  9.36k|                            .push(TriGState::ObjectQuotedTripleEnd { emit: true });
  635|  9.36k|                        self.stack.push(TriGState::QuotedObject);
  636|  9.36k|                        self.stack.push(TriGState::Verb);
  637|  9.36k|                        self.stack.push(TriGState::QuotedSubject);
  638|  9.36k|                        self
  639|       |                    }
  640|  11.1k|                    _ => self.error(errors, "TOKEN is not a valid RDF object"),
  641|       |                },
  642|       |                TriGState::ObjectBlankNodePropertyListCurrent => {
  643|  2.75k|                    if token == N3Token::Punctuation("]") {
  644|  1.52k|                        self.cur_object.push(BlankNode::default().into());
  645|  1.52k|                        self.emit_quad(results);
  646|  1.52k|                        self
  647|       |                    } else {
  648|  1.23k|                        self.cur_subject.push(BlankNode::default().into());
  649|  1.23k|                        self.stack.push(TriGState::ObjectBlankNodePropertyListEnd);
  650|  1.23k|                        self.stack.push(TriGState::PredicateObjectList);
  651|  1.23k|                        self.recognize_next(TokenOrLineJump::Token(token), context, results, errors)
  652|       |                    }
  653|       |                }
  654|       |                TriGState::ObjectBlankNodePropertyListEnd => {
  655|    456|                    if token == N3Token::Punctuation("]") {
  656|    241|                        self.cur_object.push(self.cur_subject.pop().unwrap().into());
  657|    241|                        self.emit_quad(results);
  658|    241|                        self
  659|       |                    } else {
  660|    215|                        self.error(errors, "blank node property lists should end with a ']'")
  661|       |                    }
  662|       |                }
  663|       |                TriGState::ObjectCollectionBeginning => {
  664|   168k|                    if let N3Token::Punctuation(")") = token {
  665|  3.69k|                        self.cur_object.push(rdf::NIL.into());
  666|  3.69k|                        self.emit_quad(results);
  667|  3.69k|                        self
  668|       |                    } else {
  669|   164k|                        let root = BlankNode::default();
  670|   164k|                        self.cur_object.push(root.clone().into());
  671|   164k|                        self.emit_quad(results);
  672|   164k|                        self.cur_subject.push(root.into());
  673|   164k|                        self.cur_predicate.push(rdf::FIRST.into());
  674|   164k|                        self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  675|   164k|                        self.stack.push(TriGState::Object);
  676|   164k|                        self.recognize_next(TokenOrLineJump::Token(token), context, results, errors)
  677|       |                    }
  678|       |                }
  679|       |                TriGState::ObjectCollectionPossibleEnd => {
  680|  32.6k|                    let old = self.cur_subject.pop().unwrap();
  681|  32.6k|                    self.cur_object.pop();
  682|  32.6k|                    if let N3Token::Punctuation(")") = token {
  683|  5.32k|                        self.cur_predicate.pop();
  684|  5.32k|                        results.push(Quad::new(old, rdf::REST, rdf::NIL, self.cur_graph.clone()));
  685|  5.32k|                        self
  686|       |                    } else {
  687|  27.3k|                        let new = BlankNode::default();
  688|  27.3k|                        results.push(Quad::new(
  689|  27.3k|                            old,
  690|  27.3k|                            rdf::REST,
  691|  27.3k|                            new.clone(),
  692|  27.3k|                            self.cur_graph.clone(),
  693|  27.3k|                        ));
  694|  27.3k|                        self.cur_subject.push(new.into());
  695|  27.3k|                        self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  696|  27.3k|                        self.stack.push(TriGState::Object);
  697|  27.3k|                        self.recognize_next(TokenOrLineJump::Token(token), context, results, errors)
  698|       |                    }
  699|       |                }
  700|  19.8k|                TriGState::LiteralPossibleSuffix { value, emit } => match token {
  701|  3.77k|                    N3Token::LangTag(lang) => {
  702|  3.77k|                        self.cur_object.push(
  703|  3.77k|                            Literal::new_language_tagged_literal_unchecked(
  704|  3.77k|                                value,
  705|  3.77k|                                lang.to_ascii_lowercase(),
  706|  3.77k|                            )
  707|  3.77k|                            .into(),
  708|  3.77k|                        );
  709|  3.77k|                        if emit {
  710|  3.70k|                            self.emit_quad(results);
  711|  3.70k|                        }
  712|  3.77k|                        self
  713|       |                    }
  714|  10.1k|                    N3Token::Punctuation("^^") => {
  715|  1.43k|                        self.stack
  716|  1.43k|                            .push(TriGState::LiteralExpectDatatype { value, emit });
  717|  1.43k|                        self
  718|       |                    }
  719|       |                    _ => {
  720|  14.5k|                        self.cur_object
  721|  14.5k|                            .push(Literal::new_simple_literal(value).into());
  722|  14.5k|                        if emit {
  723|  14.2k|                            self.emit_quad(results);
  724|  14.2k|                        }
  725|  14.5k|                        self.recognize_next(TokenOrLineJump::Token(token), context, results, errors)
  726|       |                    }
  727|       |                },
  728|  1.29k|                TriGState::LiteralExpectDatatype { value, emit } => match token {
  729|    541|                    N3Token::IriRef(datatype) => {
  730|    541|                        self.cur_object.push(
  731|    541|                            Literal::new_typed_literal(value, NamedNode::new_unchecked(datatype))
  732|    541|                                .into(),
  733|    541|                        );
  734|    541|                        if emit {
  735|    541|                            self.emit_quad(results);
  736|    541|                        }
  737|    541|                        self
  738|       |                    }
  739|       |                    N3Token::PrefixedName {
  740|    577|                        prefix,
  741|    577|                        local,
  742|    577|                        might_be_invalid_iri,
  743|    577|                    } => match resolve_local_name(
  744|    577|                        prefix,
  745|    577|                        &local,
  746|    577|                        might_be_invalid_iri,
  747|    577|                        &context.prefixes,
  748|    577|                    ) {
  749|    422|                        Ok(t) => {
  750|    422|                            self.cur_object
  751|    422|                                .push(Literal::new_typed_literal(value, t).into());
  752|    422|                            if emit {
  753|    422|                                self.emit_quad(results);
  754|    422|                            }
  755|    422|                            self
  756|       |                        }
  757|    155|                        Err(e) => self.error(errors, e),
  758|       |                    },
  759|    174|                    _ => self
  760|    174|                        .error(errors, "Expecting a datatype IRI after ^^, found TOKEN")
  761|    174|                        .recognize_next(TokenOrLineJump::Token(token), context, results, errors),
  762|       |                },
  763|       |                // [27t]  quotedTriple  ::=  '<<' qtSubject verb qtObject '>>'
  764|       |                #[cfg(feature = "rdf-star")]
  765|       |                TriGState::SubjectQuotedTripleEnd => {
  766|  1.50M|                    let triple = Triple::new(
  767|  1.50M|                        self.cur_subject.pop().unwrap(),
  768|  1.50M|                        self.cur_predicate.pop().unwrap(),
  769|  1.50M|                        self.cur_object.pop().unwrap(),
  770|  1.50M|                    );
  771|  1.50M|                    self.cur_subject.push(triple.into());
  772|  1.50M|                    if token == N3Token::Punctuation(">>") {
  773|  1.50M|                        self
  774|       |                    } else {
  775|  1.53k|                        self.error(
  776|  1.53k|                            errors,
  777|  1.53k|                            "Expecting '>>' to close a quoted triple, found TOKEN",
  778|  1.53k|                        )
  779|       |                    }
  780|       |                }
  781|       |                #[cfg(feature = "rdf-star")]
  782|  7.60k|                TriGState::ObjectQuotedTripleEnd { emit } => {
  783|  7.60k|                    let triple = Triple::new(
  784|  7.60k|                        self.cur_subject.pop().unwrap(),
  785|  7.60k|                        self.cur_predicate.pop().unwrap(),
  786|  7.60k|                        self.cur_object.pop().unwrap(),
  787|  7.60k|                    );
  788|  7.60k|                    self.cur_object.push(triple.into());
  789|  7.60k|                    if emit {
  790|  7.15k|                        self.emit_quad(results);
  791|  7.15k|                    }
  792|  7.60k|                    if token == N3Token::Punctuation(">>") {
  793|  2.15k|                        self
  794|       |                    } else {
  795|  5.45k|                        self.error(
  796|  5.45k|                            errors,
  797|  5.45k|                            "Expecting '>>' to close a quoted triple, found TOKEN",
  798|  5.45k|                        )
  799|       |                    }
  800|       |                }
  801|       |                // [28t]  qtSubject  ::=  iri | BlankNode | quotedTriple
  802|       |                #[cfg(feature = "rdf-star")]
  803|  1.53M|                TriGState::QuotedSubject => match token {
  804|  1.45M|                    N3Token::Punctuation("[") => {
  805|    247|                        self.cur_subject.push(BlankNode::default().into());
  806|    247|                        self.stack.push(TriGState::QuotedAnonEnd);
  807|    247|                        self
  808|       |                    }
  809|  73.1k|                    N3Token::IriRef(iri) => {
  810|  73.1k|                        self.cur_subject.push(NamedNode::new_unchecked(iri).into());
  811|  73.1k|                        self
  812|       |                    }
  813|       |                    N3Token::PrefixedName {
  814|  1.09k|                        prefix,
  815|  1.09k|                        local,
  816|  1.09k|                        might_be_invalid_iri,
  817|  1.09k|                    } => match resolve_local_name(
  818|  1.09k|                        prefix,
  819|  1.09k|                        &local,
  820|  1.09k|                        might_be_invalid_iri,
  821|  1.09k|                        &context.prefixes,
  822|  1.09k|                    ) {
  823|    819|                        Ok(t) => {
  824|    819|                            self.cur_subject.push(t.into());
  825|    819|                            self
  826|       |                        }
  827|    271|                        Err(e) => self.error(errors, e),
  828|       |                    },
  829|  1.51k|                    N3Token::BlankNodeLabel(label) => {
  830|  1.51k|                        self.cur_subject
  831|  1.51k|                            .push(BlankNode::new_unchecked(label).into());
  832|  1.51k|                        self
  833|       |                    }
  834|  1.45M|                    N3Token::Punctuation("<<") => {
  835|  1.45M|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  836|  1.45M|                        self.stack.push(TriGState::QuotedObject);
  837|  1.45M|                        self.stack.push(TriGState::Verb);
  838|  1.45M|                        self.stack.push(TriGState::QuotedSubject);
  839|  1.45M|                        self
  840|       |                    }
  841|    904|                    _ => self.error(
  842|    904|                        errors,
  843|    904|                        "TOKEN is not a valid RDF quoted triple subject: TOKEN",
  844|    904|                    ),
  845|       |                },
  846|       |                // [29t]  qtObject  ::=  iri | BlankNode | literal | quotedTriple
  847|       |                #[cfg(feature = "rdf-star")]
  848|  1.51M|                TriGState::QuotedObject => match token {
  849|  1.37k|                    N3Token::Punctuation("[") => {
  850|    126|                        self.cur_object.push(BlankNode::default().into());
  851|    126|                        self.stack.push(TriGState::QuotedAnonEnd);
  852|    126|                        self
  853|       |                    }
  854|   238k|                    N3Token::IriRef(iri) => {
  855|   238k|                        self.cur_object.push(NamedNode::new_unchecked(iri).into());
  856|   238k|                        self
  857|       |                    }
  858|       |                    N3Token::PrefixedName {
  859|    523|                        prefix,
  860|    523|                        local,
  861|    523|                        might_be_invalid_iri,
  862|    523|                    } => match resolve_local_name(
  863|    523|                        prefix,
  864|    523|                        &local,
  865|    523|                        might_be_invalid_iri,
  866|    523|                        &context.prefixes,
  867|    523|                    ) {
  868|    423|                        Ok(t) => {
  869|    423|                            self.cur_object.push(t.into());
  870|    423|                            self
  871|       |                        }
  872|    100|                        Err(e) => self.error(errors, e),
  873|       |                    },
  874|  3.23k|                    N3Token::BlankNodeLabel(label) => {
  875|  3.23k|                        self.cur_object.push(BlankNode::new_unchecked(label).into());
  876|  3.23k|                        self
  877|       |                    }
  878|    463|                    N3Token::String(value) => {
  879|    463|                        self.stack
  880|    463|                            .push(TriGState::LiteralPossibleSuffix { value, emit: false });
  881|    463|                        self
  882|       |                    }
  883|   175k|                    N3Token::Integer(v) => {
  884|   175k|                        self.cur_object
  885|   175k|                            .push(Literal::new_typed_literal(v, xsd::INTEGER).into());
  886|   175k|                        self
  887|       |                    }
  888|    589|                    N3Token::Decimal(v) => {
  889|    589|                        self.cur_object
  890|    589|                            .push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
  891|    589|                        self
  892|       |                    }
  893|  1.09M|                    N3Token::Double(v) => {
  894|  1.09M|                        self.cur_object
  895|  1.09M|                            .push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
  896|  1.09M|                        self
  897|       |                    }
  898|    428|                    N3Token::PlainKeyword("true") => {
  899|     77|                        self.cur_object
  900|     77|                            .push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
  901|     77|                        self
  902|       |                    }
  903|    351|                    N3Token::PlainKeyword("false") => {
  904|    162|                        self.cur_object
  905|    162|                            .push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
  906|    162|                        self
  907|       |                    }
  908|  1.24k|                    N3Token::Punctuation("<<") => {
  909|  1.06k|                        self.stack
  910|  1.06k|                            .push(TriGState::ObjectQuotedTripleEnd { emit: false });
  911|  1.06k|                        self.stack.push(TriGState::QuotedObject);
  912|  1.06k|                        self.stack.push(TriGState::Verb);
  913|  1.06k|                        self.stack.push(TriGState::QuotedSubject);
  914|  1.06k|                        self
  915|       |                    }
  916|    622|                    _ => self.error(errors, "TOKEN is not a valid RDF quoted triple object"),
  917|       |                },
  918|       |                #[cfg(feature = "rdf-star")]
  919|       |                TriGState::QuotedAnonEnd => {
  920|    328|                    if token == N3Token::Punctuation("]") {
  921|    227|                        self
  922|       |                    } else {
  923|    101|                        self.error(errors, "Anonymous blank node with a property list are not allowed in quoted triples")
  924|       |                    }
  925|       |                }
  926|       |            }
  927|  1.45M|        } else if token == N3Token::Punctuation(".") || token == N3Token::Punctuation("}") {
  928|       |            // TODO: be smarter depending if we are in '{' or not
  929|   306k|            self.stack.push(TriGState::TriGDoc);
  930|   306k|            self
  931|       |        } else {
  932|  1.15M|            self
  933|       |        }
  934|  12.2M|    }
_RNvXs_NtCssoZq86sT9S_5oxttl5terseNtB4_14TriGRecognizerNtNtNtB6_7toolkit6parser14RuleRecognizer13recognize_end:
  936|  33.7k|    fn recognize_end(
  937|  33.7k|        mut self,
  938|  33.7k|        _context: &mut TriGRecognizerContext,
  939|  33.7k|        results: &mut Vec<Self::Output>,
  940|  33.7k|        errors: &mut Vec<RuleRecognizerError>,
  941|  33.7k|    ) {
  942|  33.7k|        match &*self.stack {
  943|  33.7k|            [] | [TriGState::TriGDoc] => {
  944|  32.1k|                debug_assert!(
  945|      0|                    self.cur_subject.is_empty(),
  946|      0|                    "The cur_subject stack must be empty if the state stack is empty"
  947|       |                );
  948|  32.1k|                debug_assert!(
  949|      0|                    self.cur_predicate.is_empty(),
  950|      0|                    "The cur_predicate stack must be empty if the state stack is empty"
  951|       |                );
  952|  32.1k|                debug_assert!(
  953|      0|                    self.cur_object.is_empty(),
  954|      0|                    "The cur_object stack must be empty if the state stack is empty"
  955|       |                );
  956|       |            }
  957|    233|            [.., TriGState::LiteralPossibleSuffix { value, emit: true }] => {
  958|    233|                self.cur_object
  959|    233|                    .push(Literal::new_simple_literal(value).into());
  960|    233|                self.emit_quad(results);
  961|    233|                errors.push("Triples should be followed by a dot".into())
  962|       |            }
  963|  1.31k|            _ => errors.push("Unexpected end".into()), // TODO
  964|       |        }
  965|  33.7k|    }
_RNvXs_NtCssoZq86sT9S_5oxttl5terseNtB4_14TriGRecognizerNtNtNtB6_7toolkit6parser14RuleRecognizer13lexer_options:
  967|  13.5M|    fn lexer_options(context: &TriGRecognizerContext) -> &N3LexerOptions {
  968|  13.5M|        &context.lexer_options
  969|  13.5M|    }
_RNvMs0_NtCssoZq86sT9S_5oxttl5terseNtB5_14TriGRecognizer9emit_quad:
 1024|   727k|    fn emit_quad(&mut self, results: &mut Vec<Quad>) {
 1025|   727k|        results.push(Quad::new(
 1026|   727k|            self.cur_subject.last().unwrap().clone(),
 1027|   727k|            self.cur_predicate.last().unwrap().clone(),
 1028|   727k|            self.cur_object.last().unwrap().clone(),
 1029|   727k|            self.cur_graph.clone(),
 1030|   727k|        ));
 1031|   727k|    }
_RINvMs0_NtCssoZq86sT9S_5oxttl5terseNtB6_14TriGRecognizer10new_parserINtNtCs3OstG5Tqy1X_5alloc3vec3VechEEB8_:
  974|  25.2k|    pub fn new_parser<B>(
  975|  25.2k|        data: B,
  976|  25.2k|        is_ending: bool,
  977|  25.2k|        with_graph_name: bool,
  978|  25.2k|        #[cfg(feature = "rdf-star")] with_quoted_triples: bool,
  979|  25.2k|        unchecked: bool,
  980|  25.2k|        base_iri: Option<Iri<String>>,
  981|  25.2k|        prefixes: HashMap<String, Iri<String>>,
  982|  25.2k|    ) -> Parser<B, Self> {
  983|  25.2k|        Parser::new(
  984|  25.2k|            Lexer::new(
  985|  25.2k|                N3Lexer::new(N3LexerMode::Turtle, unchecked),
  986|  25.2k|                data,
  987|  25.2k|                is_ending,
  988|  25.2k|                MIN_BUFFER_SIZE,
  989|  25.2k|                MAX_BUFFER_SIZE,
  990|  25.2k|                Some(b"#"),
  991|  25.2k|            ),
  992|  25.2k|            Self {
  993|  25.2k|                stack: vec![TriGState::TriGDoc],
  994|  25.2k|                cur_subject: Vec::new(),
  995|  25.2k|                cur_predicate: Vec::new(),
  996|  25.2k|                cur_object: Vec::new(),
  997|  25.2k|                cur_graph: GraphName::DefaultGraph,
  998|  25.2k|            },
  999|  25.2k|            TriGRecognizerContext {
 1000|  25.2k|                with_graph_name,
 1001|  25.2k|                #[cfg(feature = "rdf-star")]
 1002|  25.2k|                with_quoted_triples,
 1003|  25.2k|                prefixes,
 1004|  25.2k|                lexer_options: N3LexerOptions { base_iri },
 1005|  25.2k|            },
 1006|  25.2k|        )
 1007|  25.2k|    }
_RINvMs0_NtCssoZq86sT9S_5oxttl5terseNtB6_14TriGRecognizer10new_parserRShEB8_:
  974|  8.43k|    pub fn new_parser<B>(
  975|  8.43k|        data: B,
  976|  8.43k|        is_ending: bool,
  977|  8.43k|        with_graph_name: bool,
  978|  8.43k|        #[cfg(feature = "rdf-star")] with_quoted_triples: bool,
  979|  8.43k|        unchecked: bool,
  980|  8.43k|        base_iri: Option<Iri<String>>,
  981|  8.43k|        prefixes: HashMap<String, Iri<String>>,
  982|  8.43k|    ) -> Parser<B, Self> {
  983|  8.43k|        Parser::new(
  984|  8.43k|            Lexer::new(
  985|  8.43k|                N3Lexer::new(N3LexerMode::Turtle, unchecked),
  986|  8.43k|                data,
  987|  8.43k|                is_ending,
  988|  8.43k|                MIN_BUFFER_SIZE,
  989|  8.43k|                MAX_BUFFER_SIZE,
  990|  8.43k|                Some(b"#"),
  991|  8.43k|            ),
  992|  8.43k|            Self {
  993|  8.43k|                stack: vec![TriGState::TriGDoc],
  994|  8.43k|                cur_subject: Vec::new(),
  995|  8.43k|                cur_predicate: Vec::new(),
  996|  8.43k|                cur_object: Vec::new(),
  997|  8.43k|                cur_graph: GraphName::DefaultGraph,
  998|  8.43k|            },
  999|  8.43k|            TriGRecognizerContext {
 1000|  8.43k|                with_graph_name,
 1001|  8.43k|                #[cfg(feature = "rdf-star")]
 1002|  8.43k|                with_quoted_triples,
 1003|  8.43k|                prefixes,
 1004|  8.43k|                lexer_options: N3LexerOptions { base_iri },
 1005|  8.43k|            },
 1006|  8.43k|        )
 1007|  8.43k|    }
_RINvMs0_NtCssoZq86sT9S_5oxttl5terseNtB6_14TriGRecognizer5errorNtNtCs3OstG5Tqy1X_5alloc6string6StringEB8_:
 1010|  21.1k|    fn error(
 1011|  21.1k|        mut self,
 1012|  21.1k|        errors: &mut Vec<RuleRecognizerError>,
 1013|  21.1k|        msg: impl Into<RuleRecognizerError>,
 1014|  21.1k|    ) -> Self {
 1015|  21.1k|        errors.push(msg.into());
 1016|  21.1k|        self.stack.clear();
 1017|  21.1k|        self.cur_subject.clear();
 1018|  21.1k|        self.cur_predicate.clear();
 1019|  21.1k|        self.cur_object.clear();
 1020|  21.1k|        self.cur_graph = GraphName::DefaultGraph;
 1021|  21.1k|        self
 1022|  21.1k|    }
_RINvMs0_NtCssoZq86sT9S_5oxttl5terseNtB6_14TriGRecognizer5errorReEB8_:
 1010|   187k|    fn error(
 1011|   187k|        mut self,
 1012|   187k|        errors: &mut Vec<RuleRecognizerError>,
 1013|   187k|        msg: impl Into<RuleRecognizerError>,
 1014|   187k|    ) -> Self {
 1015|   187k|        errors.push(msg.into());
 1016|   187k|        self.stack.clear();
 1017|   187k|        self.cur_subject.clear();
 1018|   187k|        self.cur_predicate.clear();
 1019|   187k|        self.cur_object.clear();
 1020|   187k|        self.cur_graph = GraphName::DefaultGraph;
 1021|   187k|        self
 1022|   187k|    }

_RNvXs_NtNtCssoZq86sT9S_5oxttl7toolkit5errorNtB4_17TurtleSyntaxErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmtCs7EVUVIOgNrt_4trig:
   44|  1.96M|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   45|  1.96M|        if self.location.start.offset + 1 >= self.location.end.offset {
   46|  1.68M|            write!(
   47|  1.68M|                f,
   48|  1.68M|                "Parser error at line {} column {}: {}",
   49|  1.68M|                self.location.start.line + 1,
   50|  1.68M|                self.location.start.column + 1,
   51|  1.68M|                self.message
   52|  1.68M|            )
   53|   283k|        } else if self.location.start.line == self.location.end.line {
   54|   280k|            write!(
   55|   280k|                f,
   56|   280k|                "Parser error between at line {} between columns {} and column {}: {}",
   57|   280k|                self.location.start.line + 1,
   58|   280k|                self.location.start.column + 1,
   59|   280k|                self.location.end.column + 1,
   60|   280k|                self.message
   61|   280k|            )
   62|       |        } else {
   63|  3.15k|            write!(
   64|  3.15k|                f,
   65|  3.15k|                "Parser error between line {} column {} and line {} column {}: {}",
   66|  3.15k|                self.location.start.line + 1,
   67|  3.15k|                self.location.start.column + 1,
   68|  3.15k|                self.location.end.line + 1,
   69|  3.15k|                self.location.end.column + 1,
   70|  3.15k|                self.message
   71|  3.15k|            )
   72|       |        }
   73|  1.96M|    }
_RINvMNtNtCssoZq86sT9S_5oxttl7toolkit5errorNtB3_17TurtleSyntaxError3newNtNtCs3OstG5Tqy1X_5alloc6string6StringEB7_:
   22|  1.95M|    pub(crate) fn new(location: Range<TextPosition>, message: impl Into<String>) -> Self {
   23|  1.95M|        Self {
   24|  1.95M|            location,
   25|  1.95M|            message: message.into(),
   26|  1.95M|        }
   27|  1.95M|    }
_RINvMNtNtCssoZq86sT9S_5oxttl7toolkit5errorNtB3_17TurtleSyntaxError3newReEB7_:
   22|  8.30k|    pub(crate) fn new(location: Range<TextPosition>, message: impl Into<String>) -> Self {
   23|  8.30k|        Self {
   24|  8.30k|            location,
   25|  8.30k|            message: message.into(),
   26|  8.30k|        }
   27|  8.30k|    }

_RNvXNtNtCssoZq86sT9S_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB19_3ops5range5RangejENtNtCs3OstG5Tqy1X_5alloc6string6StringEE4fromB6_:
   37|  1.23M|    fn from((location, message): (Range<usize>, S)) -> Self {
   38|  1.23M|        Self {
   39|  1.23M|            location,
   40|  1.23M|            message: message.into(),
   41|  1.23M|        }
   42|  1.23M|    }
_RNvXNtNtCssoZq86sT9S_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB19_3ops5range5RangejEReEE4fromB6_:
   37|   485k|    fn from((location, message): (Range<usize>, S)) -> Self {
   38|   485k|        Self {
   39|   485k|            location,
   40|   485k|            message: message.into(),
   41|   485k|        }
   42|   485k|    }
_RNvXs_NtNtCssoZq86sT9S_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB1b_3ops5range14RangeInclusivejENtNtCs3OstG5Tqy1X_5alloc6string6StringEE4fromB8_:
   47|  7.27k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   48|  7.27k|        (*location.start()..*location.end() + 1, message).into()
   49|  7.27k|    }
_RNvXs_NtNtCssoZq86sT9S_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB1b_3ops5range14RangeInclusivejEReEE4fromB8_:
   47|   408k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   48|   408k|        (*location.start()..*location.end() + 1, message).into()
   49|   408k|    }
_RNvXs0_NtNtCssoZq86sT9S_5oxttl7toolkit5lexerNtB5_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTjNtNtCs3OstG5Tqy1X_5alloc6string6StringEE4fromB9_:
   53|  4.25k|    fn from((location, message): (usize, S)) -> Self {
   54|  4.25k|        (location..=location, message).into()
   55|  4.25k|    }
_RNvMs1_NtNtCssoZq86sT9S_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE3newB9_:
   78|  25.2k|    pub fn new(
   79|  25.2k|        parser: R,
   80|  25.2k|        data: B,
   81|  25.2k|        is_ending: bool,
   82|  25.2k|        min_buffer_size: usize,
   83|  25.2k|        max_buffer_size: usize,
   84|  25.2k|        line_comment_start: Option<&'static [u8]>,
   85|  25.2k|    ) -> Self {
   86|  25.2k|        Self {
   87|  25.2k|            parser,
   88|  25.2k|            data,
   89|  25.2k|            position: Position {
   90|  25.2k|                line_start_buffer_offset: 0,
   91|  25.2k|                buffer_offset: 0,
   92|  25.2k|                global_offset: 0,
   93|  25.2k|                global_line: 0,
   94|  25.2k|            },
   95|  25.2k|            previous_position: Position {
   96|  25.2k|                line_start_buffer_offset: 0,
   97|  25.2k|                buffer_offset: 0,
   98|  25.2k|                global_offset: 0,
   99|  25.2k|                global_line: 0,
  100|  25.2k|            },
  101|  25.2k|            is_ending,
  102|  25.2k|            min_buffer_size,
  103|  25.2k|            max_buffer_size,
  104|  25.2k|            line_comment_start,
  105|  25.2k|        }
  106|  25.2k|    }
_RNvMs1_NtNtCssoZq86sT9S_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE3newB9_:
   78|  8.43k|    pub fn new(
   79|  8.43k|        parser: R,
   80|  8.43k|        data: B,
   81|  8.43k|        is_ending: bool,
   82|  8.43k|        min_buffer_size: usize,
   83|  8.43k|        max_buffer_size: usize,
   84|  8.43k|        line_comment_start: Option<&'static [u8]>,
   85|  8.43k|    ) -> Self {
   86|  8.43k|        Self {
   87|  8.43k|            parser,
   88|  8.43k|            data,
   89|  8.43k|            position: Position {
   90|  8.43k|                line_start_buffer_offset: 0,
   91|  8.43k|                buffer_offset: 0,
   92|  8.43k|                global_offset: 0,
   93|  8.43k|                global_line: 0,
   94|  8.43k|            },
   95|  8.43k|            previous_position: Position {
   96|  8.43k|                line_start_buffer_offset: 0,
   97|  8.43k|                buffer_offset: 0,
   98|  8.43k|                global_offset: 0,
   99|  8.43k|                global_line: 0,
  100|  8.43k|            },
  101|  8.43k|            is_ending,
  102|  8.43k|            min_buffer_size,
  103|  8.43k|            max_buffer_size,
  104|  8.43k|            line_comment_start,
  105|  8.43k|        }
  106|  8.43k|    }
_RNvMs2_NtNtCssoZq86sT9S_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE17extend_from_sliceB9_:
  110|  1.72M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  111|  1.72M|        self.shrink_data();
  112|  1.72M|        self.data.extend_from_slice(other);
  113|  1.72M|    }
_RNvMs2_NtNtCssoZq86sT9S_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE3endB9_:
  116|  25.2k|    pub fn end(&mut self) {
  117|  25.2k|        self.is_ending = true;
  118|  25.2k|    }
_RNvMs2_NtNtCssoZq86sT9S_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE11shrink_dataB9_:
  172|  1.72M|    fn shrink_data(&mut self) {
  173|  1.72M|        if self.position.line_start_buffer_offset > 0 {
  174|  17.7k|            self.data
  175|  17.7k|                .copy_within(self.position.line_start_buffer_offset.., 0);
  176|  17.7k|            self.data
  177|  17.7k|                .truncate(self.data.len() - self.position.line_start_buffer_offset);
  178|  17.7k|            self.position.buffer_offset -= self.position.line_start_buffer_offset;
  179|  17.7k|            self.position.line_start_buffer_offset = 0;
  180|  17.7k|            self.previous_position = self.position;
  181|  1.70M|        }
  182|  1.72M|    }
_RNvMs3_NtNtCssoZq86sT9S_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE10parse_nextB9_:
  187|  6.57M|    pub fn parse_next(
  188|  6.57M|        &mut self,
  189|  6.57M|        options: &R::Options,
  190|  6.57M|    ) -> Option<Result<TokenOrLineJump<R::Token<'_>>, TurtleSyntaxError>> {
  191|  6.57M|        if self.skip_whitespaces_and_comments()? {
  192|  49.2k|            self.previous_position = self.position;
  193|  49.2k|            return Some(Ok(TokenOrLineJump::LineJump));
  194|  6.50M|        }
  195|  6.50M|        self.previous_position = self.position;
  196|  6.50M|        let Some((consumed, result)) = self.parser.recognize_next_token(
  197|  6.50M|            &self.data[self.position.buffer_offset..],
  198|  6.50M|            self.is_ending,
  199|  6.50M|            options,
  200|  6.50M|        ) else {
  201|  1.76M|            return if self.is_ending {
  202|  58.9k|                if self.position.buffer_offset == self.data.len() {
  203|  50.5k|                    None // We have finished
  204|       |                } else {
  205|  8.30k|                    let (new_line_jumps, new_line_start) =
  206|  8.30k|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  207|  8.30k|                            &self.data[self.position.buffer_offset..],
  208|  8.30k|                        );
  209|  8.30k|                    if new_line_jumps > 0 {
  210|    539|                        self.position.line_start_buffer_offset =
  211|    539|                            self.position.buffer_offset + new_line_start;
  212|  7.76k|                    }
  213|  8.30k|                    self.position.global_offset +=
  214|  8.30k|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  215|  8.30k|                    self.position.buffer_offset = self.data.len();
  216|  8.30k|                    self.position.global_line += new_line_jumps;
  217|  8.30k|                    let error = TurtleSyntaxError::new(
  218|  8.30k|                        self.last_token_location(),
  219|  8.30k|                        "Unexpected end of file",
  220|  8.30k|                    );
  221|  8.30k|                    Some(Err(error))
  222|       |                }
  223|       |            } else {
  224|  1.70M|                None
  225|       |            };
  226|       |        };
  227|  4.73M|        debug_assert!(
  228|      0|            consumed > 0,
  229|      0|            "The lexer must consume at least one byte each time"
  230|       |        );
  231|  4.73M|        debug_assert!(
  232|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  233|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  234|      0|            self.data.len() - self.position.buffer_offset
  235|       |        );
  236|  4.73M|        let (new_line_jumps, new_line_start) =
  237|  4.73M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  238|  4.73M|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  239|  4.73M|            );
  240|  4.73M|        if new_line_jumps > 0 {
  241|  6.32k|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  242|  4.73M|        }
  243|  4.73M|        self.position.buffer_offset += consumed;
  244|  4.73M|        self.position.global_offset += u64::try_from(consumed).unwrap();
  245|  4.73M|        self.position.global_line += new_line_jumps;
  246|  4.73M|        Some(result.map(TokenOrLineJump::Token).map_err(|e| {
  247|       |            TurtleSyntaxError::new(
  248|       |                self.location_from_buffer_offset_range(e.location),
  249|       |                e.message,
  250|       |            )
  251|  4.73M|        }))
  252|  6.57M|    }
_RNvMs3_NtNtCssoZq86sT9S_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE10parse_nextB9_:
  187|  6.93M|    pub fn parse_next(
  188|  6.93M|        &mut self,
  189|  6.93M|        options: &R::Options,
  190|  6.93M|    ) -> Option<Result<TokenOrLineJump<R::Token<'_>>, TurtleSyntaxError>> {
  191|  6.93M|        if self.skip_whitespaces_and_comments()? {
  192|   175k|            self.previous_position = self.position;
  193|   175k|            return Some(Ok(TokenOrLineJump::LineJump));
  194|  6.76M|        }
  195|  6.76M|        self.previous_position = self.position;
  196|  6.76M|        let Some((consumed, result)) = self.parser.recognize_next_token(
  197|  6.76M|            &self.data[self.position.buffer_offset..],
  198|  6.76M|            self.is_ending,
  199|  6.76M|            options,
  200|  6.76M|        ) else {
  201|  16.8k|            return if self.is_ending {
  202|  16.8k|                if self.position.buffer_offset == self.data.len() {
  203|  16.8k|                    None // We have finished
  204|       |                } else {
  205|      0|                    let (new_line_jumps, new_line_start) =
  206|      0|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  207|      0|                            &self.data[self.position.buffer_offset..],
  208|      0|                        );
  209|      0|                    if new_line_jumps > 0 {
  210|      0|                        self.position.line_start_buffer_offset =
  211|      0|                            self.position.buffer_offset + new_line_start;
  212|      0|                    }
  213|      0|                    self.position.global_offset +=
  214|      0|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  215|      0|                    self.position.buffer_offset = self.data.len();
  216|      0|                    self.position.global_line += new_line_jumps;
  217|      0|                    let error = TurtleSyntaxError::new(
  218|      0|                        self.last_token_location(),
  219|      0|                        "Unexpected end of file",
  220|      0|                    );
  221|      0|                    Some(Err(error))
  222|       |                }
  223|       |            } else {
  224|      0|                None
  225|       |            };
  226|       |        };
  227|  6.74M|        debug_assert!(
  228|      0|            consumed > 0,
  229|      0|            "The lexer must consume at least one byte each time"
  230|       |        );
  231|  6.74M|        debug_assert!(
  232|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  233|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  234|      0|            self.data.len() - self.position.buffer_offset
  235|       |        );
  236|  6.74M|        let (new_line_jumps, new_line_start) =
  237|  6.74M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  238|  6.74M|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  239|  6.74M|            );
  240|  6.74M|        if new_line_jumps > 0 {
  241|      0|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  242|  6.74M|        }
  243|  6.74M|        self.position.buffer_offset += consumed;
  244|  6.74M|        self.position.global_offset += u64::try_from(consumed).unwrap();
  245|  6.74M|        self.position.global_line += new_line_jumps;
  246|  6.74M|        Some(result.map(TokenOrLineJump::Token).map_err(|e| {
  247|       |            TurtleSyntaxError::new(
  248|       |                self.location_from_buffer_offset_range(e.location),
  249|       |                e.message,
  250|       |            )
  251|  6.74M|        }))
  252|  6.93M|    }
_RNCNvMs3_NtNtCssoZq86sT9S_5oxttl7toolkit5lexerINtB7_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtBb_5lexer7N3LexerE10parse_next0Bb_:
  246|  1.70M|        Some(result.map(TokenOrLineJump::Token).map_err(|e| {
  247|  1.70M|            TurtleSyntaxError::new(
  248|  1.70M|                self.location_from_buffer_offset_range(e.location),
  249|  1.70M|                e.message,
  250|  1.70M|            )
  251|  1.70M|        }))
_RNvMs3_NtNtCssoZq86sT9S_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE33location_from_buffer_offset_rangeB9_:
  254|  1.70M|    pub fn location_from_buffer_offset_range(
  255|  1.70M|        &self,
  256|  1.70M|        offset_range: Range<usize>,
  257|  1.70M|    ) -> Range<TextPosition> {
  258|  1.70M|        let start_offset = self.previous_position.buffer_offset + offset_range.start;
  259|  1.70M|        let (start_extra_line_jumps, start_line_start) =
  260|  1.70M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  261|  1.70M|                &self.data[self.previous_position.buffer_offset..start_offset],
  262|  1.70M|            );
  263|  1.70M|        let start_line_start = if start_extra_line_jumps > 0 {
  264|  1.34k|            start_line_start + self.previous_position.buffer_offset
  265|       |        } else {
  266|  1.70M|            self.previous_position.line_start_buffer_offset
  267|       |        };
  268|  1.70M|        let end_offset = self.previous_position.buffer_offset + offset_range.end;
  269|  1.70M|        let (end_extra_line_jumps, end_line_start) =
  270|  1.70M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  271|  1.70M|                &self.data[self.previous_position.buffer_offset..end_offset],
  272|  1.70M|            );
  273|  1.70M|        let end_line_start = if end_extra_line_jumps > 0 {
  274|  3.93k|            end_line_start + self.previous_position.buffer_offset
  275|       |        } else {
  276|  1.70M|            self.previous_position.line_start_buffer_offset
  277|       |        };
  278|  1.70M|        TextPosition {
  279|  1.70M|            line: self.previous_position.global_line + start_extra_line_jumps,
  280|  1.70M|            column: Self::column_from_bytes(&self.data[start_line_start..start_offset]),
  281|  1.70M|            offset: self.previous_position.global_offset
  282|  1.70M|                + u64::try_from(offset_range.start).unwrap(),
  283|  1.70M|        }..TextPosition {
  284|  1.70M|            line: self.previous_position.global_line + end_extra_line_jumps,
  285|  1.70M|            column: Self::column_from_bytes(&self.data[end_line_start..end_offset]),
  286|  1.70M|            offset: self.previous_position.global_offset + u64::try_from(offset_range.end).unwrap(),
  287|  1.70M|        }
  288|  1.70M|    }
_RNvMs3_NtNtCssoZq86sT9S_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE19last_token_locationB9_:
  290|   257k|    pub fn last_token_location(&self) -> Range<TextPosition> {
  291|   257k|        self.text_position_from_position(&self.previous_position)
  292|   257k|            ..self.text_position_from_position(&self.position)
  293|   257k|    }
_RNvMs3_NtNtCssoZq86sT9S_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE27text_position_from_positionB9_:
  295|   514k|    fn text_position_from_position(&self, position: &Position) -> TextPosition {
  296|   514k|        TextPosition {
  297|   514k|            line: position.global_line,
  298|   514k|            column: Self::column_from_bytes(
  299|   514k|                &self.data[position.line_start_buffer_offset..position.buffer_offset],
  300|   514k|            ),
  301|   514k|            offset: position.global_offset,
  302|   514k|        }
  303|   514k|    }
_RNvMs3_NtNtCssoZq86sT9S_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE17last_token_sourceB9_:
  305|   249k|    pub fn last_token_source(&self) -> Cow<'_, str> {
  306|   249k|        String::from_utf8_lossy(
  307|   249k|            &self.data[self.previous_position.buffer_offset..self.position.buffer_offset],
  308|   249k|        )
  309|   249k|    }
_RNvMs3_NtNtCssoZq86sT9S_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE6is_endB9_:
  311|  1.77M|    pub fn is_end(&self) -> bool {
  312|  1.77M|        self.is_ending && self.data.len() == self.position.buffer_offset
  313|  1.77M|    }
_RNvMs3_NtNtCssoZq86sT9S_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE6is_endB9_:
  311|  16.8k|    pub fn is_end(&self) -> bool {
  312|  16.8k|        self.is_ending && self.data.len() == self.position.buffer_offset
  313|  16.8k|    }
_RNvMs3_NtNtCssoZq86sT9S_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  316|  6.57M|    fn skip_whitespaces_and_comments(&mut self) -> Option<bool> {
  317|  6.57M|        if self.skip_whitespaces()? {
  318|  43.9k|            return Some(true);
  319|  6.52M|        }
  320|  6.52M|
  321|  6.52M|        let buf = &self.data[self.position.buffer_offset..];
  322|  6.52M|        if let Some(line_comment_start) = self.line_comment_start {
  323|  6.52M|            if buf.starts_with(line_comment_start) {
  324|       |                // Comment
  325|  17.1k|                if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  326|  6.09k|                    let mut end_position = line_comment_start.len() + end;
  327|  6.09k|                    if buf.get(end_position).copied() == Some(b'\r') {
  328|       |                        // We look for \n for Windows line end style
  329|  4.98k|                        if let Some(c) = buf.get(end_position + 1) {
  330|  4.15k|                            if *c == b'\n' {
  331|      0|                                end_position += 1;
  332|  4.15k|                            }
  333|    833|                        } else if !self.is_ending {
  334|    806|                            return None; // We need to read more
  335|     27|                        }
  336|  1.10k|                    }
  337|  5.28k|                    let comment_size = end_position + 1;
  338|  5.28k|                    self.position.buffer_offset += comment_size;
  339|  5.28k|                    self.position.line_start_buffer_offset = self.position.buffer_offset;
  340|  5.28k|                    self.position.global_offset += u64::try_from(comment_size).unwrap();
  341|  5.28k|                    self.position.global_line += 1;
  342|  5.28k|                    return Some(true);
  343|  11.0k|                }
  344|  11.0k|                if self.is_ending {
  345|    725|                    self.position.buffer_offset = self.data.len(); // EOF
  346|    725|                    return Some(false);
  347|  10.3k|                }
  348|  10.3k|                return None; // We need more data
  349|  6.50M|            }
  350|      0|        }
  351|  6.50M|        Some(false)
  352|  6.57M|    }
_RNvMs3_NtNtCssoZq86sT9S_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  316|  6.93M|    fn skip_whitespaces_and_comments(&mut self) -> Option<bool> {
  317|  6.93M|        if self.skip_whitespaces()? {
  318|   175k|            return Some(true);
  319|  6.76M|        }
  320|  6.76M|
  321|  6.76M|        let buf = &self.data[self.position.buffer_offset..];
  322|  6.76M|        if let Some(line_comment_start) = self.line_comment_start {
  323|  6.76M|            if buf.starts_with(line_comment_start) {
  324|       |                // Comment
  325|      0|                if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  326|      0|                    let mut end_position = line_comment_start.len() + end;
  327|      0|                    if buf.get(end_position).copied() == Some(b'\r') {
  328|       |                        // We look for \n for Windows line end style
  329|      0|                        if let Some(c) = buf.get(end_position + 1) {
  330|      0|                            if *c == b'\n' {
  331|      0|                                end_position += 1;
  332|      0|                            }
  333|      0|                        } else if !self.is_ending {
  334|      0|                            return None; // We need to read more
  335|      0|                        }
  336|      0|                    }
  337|      0|                    let comment_size = end_position + 1;
  338|      0|                    self.position.buffer_offset += comment_size;
  339|      0|                    self.position.line_start_buffer_offset = self.position.buffer_offset;
  340|      0|                    self.position.global_offset += u64::try_from(comment_size).unwrap();
  341|      0|                    self.position.global_line += 1;
  342|      0|                    return Some(true);
  343|      0|                }
  344|      0|                if self.is_ending {
  345|      0|                    self.position.buffer_offset = self.data.len(); // EOF
  346|      0|                    return Some(false);
  347|      0|                }
  348|      0|                return None; // We need more data
  349|  6.76M|            }
  350|      0|        }
  351|  6.76M|        Some(false)
  352|  6.93M|    }
_RNvMs3_NtNtCssoZq86sT9S_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  354|  6.57M|    fn skip_whitespaces(&mut self) -> Option<bool> {
  355|  6.57M|        let mut i = self.position.buffer_offset;
  356|  6.58M|        while let Some(c) = self.data.get(i) {
  357|  5.96M|            match c {
  358|  15.6k|                b' ' | b'\t' => {
  359|  15.6k|                    self.position.buffer_offset += 1;
  360|  15.6k|                    self.position.global_offset += 1;
  361|  15.6k|                }
  362|       |                b'\r' => {
  363|       |                    // We look for \n for Windows line end style
  364|  29.5k|                    let mut increment: u8 = 1;
  365|  29.5k|                    if let Some(c) = self.data.get(i + 1) {
  366|  22.5k|                        if *c == b'\n' {
  367|    378|                            increment += 1;
  368|  22.2k|                        }
  369|  6.98k|                    } else if !self.is_ending {
  370|  6.54k|                        return None; // We need to read more
  371|    444|                    }
  372|  23.0k|                    self.position.buffer_offset += usize::from(increment);
  373|  23.0k|                    self.position.line_start_buffer_offset = self.position.buffer_offset;
  374|  23.0k|                    self.position.global_offset += u64::from(increment);
  375|  23.0k|                    self.position.global_line += 1;
  376|  23.0k|                    return Some(true);
  377|       |                }
  378|       |                b'\n' => {
  379|  20.9k|                    self.position.buffer_offset += 1;
  380|  20.9k|                    self.position.line_start_buffer_offset = self.position.buffer_offset;
  381|  20.9k|                    self.position.global_offset += 1;
  382|  20.9k|                    self.position.global_line += 1;
  383|  20.9k|                    return Some(true);
  384|       |                }
  385|  5.89M|                _ => return Some(false),
  386|       |            }
  387|  15.6k|            i += 1;
  388|       |            // TODO: SIMD
  389|       |        }
  390|   625k|        Some(false)
  391|  6.57M|    }
_RNvMs3_NtNtCssoZq86sT9S_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  354|  6.93M|    fn skip_whitespaces(&mut self) -> Option<bool> {
  355|  6.93M|        let mut i = self.position.buffer_offset;
  356|  13.5M|        while let Some(c) = self.data.get(i) {
  357|  13.5M|            match c {
  358|  6.60M|                b' ' | b'\t' => {
  359|  6.60M|                    self.position.buffer_offset += 1;
  360|  6.60M|                    self.position.global_offset += 1;
  361|  6.60M|                }
  362|       |                b'\r' => {
  363|       |                    // We look for \n for Windows line end style
  364|      0|                    let mut increment: u8 = 1;
  365|      0|                    if let Some(c) = self.data.get(i + 1) {
  366|      0|                        if *c == b'\n' {
  367|      0|                            increment += 1;
  368|      0|                        }
  369|      0|                    } else if !self.is_ending {
  370|      0|                        return None; // We need to read more
  371|      0|                    }
  372|      0|                    self.position.buffer_offset += usize::from(increment);
  373|      0|                    self.position.line_start_buffer_offset = self.position.buffer_offset;
  374|      0|                    self.position.global_offset += u64::from(increment);
  375|      0|                    self.position.global_line += 1;
  376|      0|                    return Some(true);
  377|       |                }
  378|       |                b'\n' => {
  379|   175k|                    self.position.buffer_offset += 1;
  380|   175k|                    self.position.line_start_buffer_offset = self.position.buffer_offset;
  381|   175k|                    self.position.global_offset += 1;
  382|   175k|                    self.position.global_line += 1;
  383|   175k|                    return Some(true);
  384|       |                }
  385|  6.74M|                _ => return Some(false),
  386|       |            }
  387|  6.60M|            i += 1;
  388|       |            // TODO: SIMD
  389|       |        }
  390|  16.8k|        Some(false)
  391|  6.93M|    }
_RNvMs3_NtNtCssoZq86sT9S_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  393|  8.16M|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  394|  8.16M|        let mut num_of_jumps = 0;
  395|  8.16M|        let mut last_jump_pos = 0;
  396|  8.16M|        let mut previous_cr = 0;
  397|  8.16M|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  398|  22.9k|            if bytes[pos] == b'\r' {
  399|  7.89k|                previous_cr = pos;
  400|  7.89k|                num_of_jumps += 1;
  401|  7.89k|                last_jump_pos = pos + 1;
  402|  7.89k|            } else {
  403|  15.1k|                if previous_cr < pos - 1 {
  404|  12.7k|                    // We count \r\n as a single line jump
  405|  12.7k|                    num_of_jumps += 1;
  406|  12.7k|                }
  407|  15.1k|                last_jump_pos = pos + 1;
  408|       |            }
  409|       |        }
  410|  8.16M|        (num_of_jumps, last_jump_pos)
  411|  8.16M|    }
_RNvMs3_NtNtCssoZq86sT9S_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  393|  6.74M|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  394|  6.74M|        let mut num_of_jumps = 0;
  395|  6.74M|        let mut last_jump_pos = 0;
  396|  6.74M|        let mut previous_cr = 0;
  397|  6.74M|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  398|      0|            if bytes[pos] == b'\r' {
  399|      0|                previous_cr = pos;
  400|      0|                num_of_jumps += 1;
  401|      0|                last_jump_pos = pos + 1;
  402|      0|            } else {
  403|      0|                if previous_cr < pos - 1 {
  404|      0|                    // We count \r\n as a single line jump
  405|      0|                    num_of_jumps += 1;
  406|      0|                }
  407|      0|                last_jump_pos = pos + 1;
  408|       |            }
  409|       |        }
  410|  6.74M|        (num_of_jumps, last_jump_pos)
  411|  6.74M|    }
_RNvMs3_NtNtCssoZq86sT9S_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE17column_from_bytesB9_:
  413|  6.71M|    fn column_from_bytes(bytes: &[u8]) -> u64 {
  414|  6.71M|        match str::from_utf8(bytes) {
  415|  3.36M|            Ok(s) => u64::try_from(s.chars().count()).unwrap(),
  416|  3.34M|            Err(e) => {
  417|  3.34M|                if e.valid_up_to() == 0 {
  418|   567k|                    0
  419|       |                } else {
  420|  2.77M|                    Self::column_from_bytes(&bytes[..e.valid_up_to()])
  421|       |                }
  422|       |            }
  423|       |        }
  424|  6.71M|    }

_RNvXNtNtCssoZq86sT9S_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromNtNtCs3OstG5Tqy1X_5alloc6string6StringE4fromB6_:
   40|  21.1k|    fn from(message: S) -> Self {
   41|  21.1k|        Self {
   42|  21.1k|            message: message.into(),
   43|  21.1k|        }
   44|  21.1k|    }
_RNvXNtNtCssoZq86sT9S_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromReE4fromB6_:
   40|   227k|    fn from(message: S) -> Self {
   41|   227k|        Self {
   42|   227k|            message: message.into(),
   43|   227k|        }
   44|   227k|    }
_RNvMs_NtNtCssoZq86sT9S_5oxttl7toolkit6parserINtB4_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB8_5terse14TriGRecognizerE3newB8_:
   57|  25.2k|    pub fn new(lexer: Lexer<B, RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   58|  25.2k|        Self {
   59|  25.2k|            lexer,
   60|  25.2k|            state: Some(recognizer),
   61|  25.2k|            context,
   62|  25.2k|            results: vec![],
   63|  25.2k|            errors: vec![],
   64|  25.2k|        }
   65|  25.2k|    }
_RNvMs_NtNtCssoZq86sT9S_5oxttl7toolkit6parserINtB4_6ParserRShNtNtB8_5terse14TriGRecognizerE3newB8_:
   57|  8.43k|    pub fn new(lexer: Lexer<B, RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   58|  8.43k|        Self {
   59|  8.43k|            lexer,
   60|  8.43k|            state: Some(recognizer),
   61|  8.43k|            context,
   62|  8.43k|            results: vec![],
   63|  8.43k|            errors: vec![],
   64|  8.43k|        }
   65|  8.43k|    }
_RNvMs0_NtNtCssoZq86sT9S_5oxttl7toolkit6parserINtB5_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5terse14TriGRecognizerE6is_endB9_:
   70|  25.2k|    pub fn is_end(&self) -> bool {
   71|  25.2k|        self.state.is_none() && self.results.is_empty() && self.errors.is_empty()
   72|  25.2k|    }
_RNvMs0_NtNtCssoZq86sT9S_5oxttl7toolkit6parserINtB5_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5terse14TriGRecognizerE10parse_nextB9_:
   74|  4.30M|    pub fn parse_next(&mut self) -> Option<Result<RR::Output, TurtleSyntaxError>> {
   75|       |        loop {
   76|  7.40M|            if let Some(error) = self.errors.pop() {
   77|   249k|                return Some(Err(TurtleSyntaxError::new(
   78|   249k|                    self.lexer.last_token_location(),
   79|   249k|                    error
   80|   249k|                        .message
   81|   249k|                        .replace("TOKEN", &self.lexer.last_token_source()),
   82|   249k|                )));
   83|  7.15M|            }
   84|  7.15M|            if let Some(result) = self.results.pop() {
   85|   580k|                return Some(Ok(result));
   86|  6.57M|            }
   87|  6.57M|            if let Some(result) = self.lexer.parse_next(RR::lexer_options(&self.context)) {
   88|  4.79M|                match result {
   89|  3.07M|                    Ok(token) => {
   90|  3.07M|                        self.state = self.state.take().map(|state| {
   91|       |                            state.recognize_next(
   92|       |                                token,
   93|       |                                &mut self.context,
   94|       |                                &mut self.results,
   95|       |                                &mut self.errors,
   96|       |                            )
   97|  3.07M|                        });
   98|  3.07M|                        continue;
   99|       |                    }
  100|  1.71M|                    Err(e) => {
  101|  1.71M|                        self.state = self.state.take().map(RR::error_recovery_state);
  102|  1.71M|                        return Some(Err(e));
  103|       |                    }
  104|       |                }
  105|  1.77M|            }
  106|  1.77M|            if self.lexer.is_end() {
  107|  50.5k|                self.state.take()?.recognize_end(
  108|  25.2k|                    &mut self.context,
  109|  25.2k|                    &mut self.results,
  110|  25.2k|                    &mut self.errors,
  111|  25.2k|                )
  112|       |            } else {
  113|  1.72M|                return None;
  114|       |            }
  115|       |        }
  116|  4.30M|    }
_RNvMs0_NtNtCssoZq86sT9S_5oxttl7toolkit6parserINtB5_6ParserRShNtNtB9_5terse14TriGRecognizerE10parse_nextB9_:
   74|   199k|    pub fn parse_next(&mut self) -> Option<Result<RR::Output, TurtleSyntaxError>> {
   75|       |        loop {
   76|  7.12M|            if let Some(error) = self.errors.pop() {
   77|      0|                return Some(Err(TurtleSyntaxError::new(
   78|      0|                    self.lexer.last_token_location(),
   79|      0|                    error
   80|      0|                        .message
   81|      0|                        .replace("TOKEN", &self.lexer.last_token_source()),
   82|      0|                )));
   83|  7.12M|            }
   84|  7.12M|            if let Some(result) = self.results.pop() {
   85|   190k|                return Some(Ok(result));
   86|  6.93M|            }
   87|  6.93M|            if let Some(result) = self.lexer.parse_next(RR::lexer_options(&self.context)) {
   88|  6.92M|                match result {
   89|  6.92M|                    Ok(token) => {
   90|  6.92M|                        self.state = self.state.take().map(|state| {
   91|       |                            state.recognize_next(
   92|       |                                token,
   93|       |                                &mut self.context,
   94|       |                                &mut self.results,
   95|       |                                &mut self.errors,
   96|       |                            )
   97|  6.92M|                        });
   98|  6.92M|                        continue;
   99|       |                    }
  100|      0|                    Err(e) => {
  101|      0|                        self.state = self.state.take().map(RR::error_recovery_state);
  102|      0|                        return Some(Err(e));
  103|       |                    }
  104|       |                }
  105|  16.8k|            }
  106|  16.8k|            if self.lexer.is_end() {
  107|  16.8k|                self.state.take()?.recognize_end(
  108|  8.43k|                    &mut self.context,
  109|  8.43k|                    &mut self.results,
  110|  8.43k|                    &mut self.errors,
  111|  8.43k|                )
  112|       |            } else {
  113|      0|                return None;
  114|       |            }
  115|       |        }
  116|   199k|    }
_RNCNvMs0_NtNtCssoZq86sT9S_5oxttl7toolkit6parserINtB7_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtBb_5terse14TriGRecognizerE10parse_next0Bb_:
   90|  3.07M|                        self.state = self.state.take().map(|state| {
   91|  3.07M|                            state.recognize_next(
   92|  3.07M|                                token,
   93|  3.07M|                                &mut self.context,
   94|  3.07M|                                &mut self.results,
   95|  3.07M|                                &mut self.errors,
   96|  3.07M|                            )
   97|  3.07M|                        });
_RNCNvMs0_NtNtCssoZq86sT9S_5oxttl7toolkit6parserINtB7_6ParserRShNtNtBb_5terse14TriGRecognizerE10parse_next0Bb_:
   90|  6.92M|                        self.state = self.state.take().map(|state| {
   91|  6.92M|                            state.recognize_next(
   92|  6.92M|                                token,
   93|  6.92M|                                &mut self.context,
   94|  6.92M|                                &mut self.results,
   95|  6.92M|                                &mut self.errors,
   96|  6.92M|                            )
   97|  6.92M|                        });
_RNvMs1_NtNtCssoZq86sT9S_5oxttl7toolkit6parserINtB5_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5terse14TriGRecognizerE3endB9_:
  121|  25.2k|    pub fn end(&mut self) {
  122|  25.2k|        self.lexer.end()
  123|  25.2k|    }
_RNvMs1_NtNtCssoZq86sT9S_5oxttl7toolkit6parserINtB5_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5terse14TriGRecognizerE17extend_from_sliceB9_:
  125|  1.72M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  126|  1.72M|        self.lexer.extend_from_slice(other)
  127|  1.72M|    }
_RNvXs2_NtNtCssoZq86sT9S_5oxttl7toolkit6parserINtB5_6ParserRShNtNtB9_5terse14TriGRecognizerENtNtNtNtCscdEvteftVc2_4core4iter6traits7collect12IntoIterator9into_iterB9_:
  152|  8.43k|    fn into_iter(self) -> Self::IntoIter {
  153|  8.43k|        SliceIterator { parser: self }
  154|  8.43k|    }
_RNvXs4_NtNtCssoZq86sT9S_5oxttl7toolkit6parserINtB5_13SliceIteratorNtNtB9_5terse14TriGRecognizerENtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextB9_:
  212|   199k|    fn next(&mut self) -> Option<Self::Item> {
  213|   199k|        self.parser.parse_next()
  214|   199k|    }

_RNvMNtCssoZq86sT9S_5oxttl4trigNtB2_10TriGParser19with_quoted_triplesCs7EVUVIOgNrt_4trig:
   97|  33.7k|    pub fn with_quoted_triples(mut self) -> Self {
   98|  33.7k|        self.with_quoted_triples = true;
   99|  33.7k|        self
  100|  33.7k|    }
_RNvMNtCssoZq86sT9S_5oxttl4trigNtB2_10TriGParser3newCs7EVUVIOgNrt_4trig:
   62|  33.7k|    pub fn new() -> Self {
   63|  33.7k|        Self::default()
   64|  33.7k|    }
_RNvMNtCssoZq86sT9S_5oxttl4trigNtB2_10TriGParser9uncheckedCs7EVUVIOgNrt_4trig:
   72|  8.43k|    pub fn unchecked(mut self) -> Self {
   73|  8.43k|        self.unchecked = true;
   74|  8.43k|        self
   75|  8.43k|    }
_RNvMs5_NtCssoZq86sT9S_5oxttl4trigNtB5_14TriGSerializer3newCs7EVUVIOgNrt_4trig:
  762|  8.43k|    pub fn new() -> Self {
  763|  8.43k|        Self {
  764|  8.43k|            prefixes: BTreeMap::new(),
  765|  8.43k|        }
  766|  8.43k|    }
_RNvXs4_NtCssoZq86sT9S_5oxttl4trigNtB5_16TriGPrefixesIterNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCs7EVUVIOgNrt_4trig:
  719|  29.4k|    fn next(&mut self) -> Option<Self::Item> {
  720|  29.4k|        let (key, value) = self.inner.next()?;
  721|  4.19k|        Some((key.as_str(), value.as_str()))
  722|  29.4k|    }
_RNvXs4_NtCssoZq86sT9S_5oxttl4trigNtB5_16TriGPrefixesIterNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator9size_hintCs7EVUVIOgNrt_4trig:
  725|  3.22k|    fn size_hint(&self) -> (usize, Option<usize>) {
  726|  3.22k|        self.inner.size_hint()
  727|  3.22k|    }
_RINvMNtCssoZq86sT9S_5oxttl4trigNtB3_10TriGParser13with_base_iriReECs7EVUVIOgNrt_4trig:
   78|  25.2k|    pub fn with_base_iri(mut self, base_iri: impl Into<String>) -> Result<Self, IriParseError> {
   79|  25.2k|        self.base = Some(Iri::parse(base_iri.into())?);
   80|  25.2k|        Ok(self)
   81|  25.2k|    }
_RINvMs5_NtCssoZq86sT9S_5oxttl4trigNtB6_14TriGSerializer10for_writerINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECs7EVUVIOgNrt_4trig:
  802|  8.43k|    pub fn for_writer<W: Write>(self, writer: W) -> WriterTriGSerializer<W> {
  803|  8.43k|        WriterTriGSerializer {
  804|  8.43k|            writer,
  805|  8.43k|            low_level_writer: self.low_level(),
  806|  8.43k|        }
  807|  8.43k|    }
_RINvMs5_NtCssoZq86sT9S_5oxttl4trigNtB6_14TriGSerializer11with_prefixNtNtCs3OstG5Tqy1X_5alloc6string6StringB14_ECs7EVUVIOgNrt_4trig:
  769|  1.30k|    pub fn with_prefix(
  770|  1.30k|        mut self,
  771|  1.30k|        prefix_name: impl Into<String>,
  772|  1.30k|        prefix_iri: impl Into<String>,
  773|  1.30k|    ) -> Result<Self, IriParseError> {
  774|  1.30k|        self.prefixes.insert(
  775|  1.30k|            Iri::parse(prefix_iri.into())?.into_inner(),
  776|  1.30k|            prefix_name.into(),
  777|  1.30k|        );
  778|  1.30k|        Ok(self)
  779|  1.30k|    }
_RINvMs6_NtCssoZq86sT9S_5oxttl4trigINtB6_20WriterTriGSerializerINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE14serialize_quadRNtNtCs23GeP7cdX8Z_5oxrdf6triple4QuadECs7EVUVIOgNrt_4trig:
  914|   190k|    pub fn serialize_quad<'a>(&mut self, q: impl Into<QuadRef<'a>>) -> io::Result<()> {
  915|   190k|        self.low_level_writer.serialize_quad(q, &mut self.writer)
  916|   190k|    }
_RINvMs7_NtCssoZq86sT9S_5oxttl4trigNtB6_22LowLevelTriGSerializer14serialize_quadRNtNtCs23GeP7cdX8Z_5oxrdf6triple4QuadQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECs7EVUVIOgNrt_4trig:
 1017|   190k|    pub fn serialize_quad<'a>(
 1018|   190k|        &mut self,
 1019|   190k|        q: impl Into<QuadRef<'a>>,
 1020|   190k|        mut writer: impl Write,
 1021|   190k|    ) -> io::Result<()> {
 1022|   190k|        if !self.prelude_written {
 1023|  4.75k|            self.prelude_written = true;
 1024|  5.66k|            for (prefix_iri, prefix_name) in &self.prefixes {
 1025|    908|                writeln!(writer, "@prefix {prefix_name}: <{prefix_iri}> .")?;
 1026|       |            }
 1027|   186k|        }
 1028|   190k|        let q = q.into();
 1029|   190k|        if q.graph_name == self.current_graph_name.as_ref() {
 1030|   180k|            if let Some((current_subject, current_predicate)) =
 1031|   184k|                self.current_subject_predicate.take()
 1032|       |            {
 1033|   180k|                if q.subject == current_subject.as_ref() {
 1034|  32.4k|                    if q.predicate == current_predicate {
 1035|  23.8k|                        self.current_subject_predicate = Some((current_subject, current_predicate));
 1036|  23.8k|                        write!(writer, " , {}", self.term(q.object))
 1037|       |                    } else {
 1038|  8.59k|                        self.current_subject_predicate =
 1039|  8.59k|                            Some((current_subject, q.predicate.into_owned()));
 1040|  8.59k|                        writeln!(writer, " ;")?;
 1041|  8.59k|                        if !self.current_graph_name.is_default_graph() {
 1042|  1.20k|                            write!(writer, "\t")?;
 1043|  7.38k|                        }
 1044|  8.59k|                        write!(
 1045|  8.59k|                            writer,
 1046|  8.59k|                            "\t{} {}",
 1047|  8.59k|                            self.predicate(q.predicate),
 1048|  8.59k|                            self.term(q.object)
 1049|  8.59k|                        )
 1050|       |                    }
 1051|       |                } else {
 1052|   148k|                    self.current_subject_predicate =
 1053|   148k|                        Some((q.subject.into_owned(), q.predicate.into_owned()));
 1054|   148k|                    writeln!(writer, " .")?;
 1055|   148k|                    if !self.current_graph_name.is_default_graph() {
 1056|  18.2k|                        write!(writer, "\t")?;
 1057|   130k|                    }
 1058|   148k|                    write!(
 1059|   148k|                        writer,
 1060|   148k|                        "{} {} {}",
 1061|   148k|                        self.term(q.subject),
 1062|   148k|                        self.predicate(q.predicate),
 1063|   148k|                        self.term(q.object)
 1064|   148k|                    )
 1065|       |                }
 1066|       |            } else {
 1067|  3.97k|                self.current_subject_predicate =
 1068|  3.97k|                    Some((q.subject.into_owned(), q.predicate.into_owned()));
 1069|  3.97k|                if !self.current_graph_name.is_default_graph() {
 1070|      0|                    write!(writer, "\t")?;
 1071|  3.97k|                }
 1072|  3.97k|                write!(
 1073|  3.97k|                    writer,
 1074|  3.97k|                    "{} {} {}",
 1075|  3.97k|                    self.term(q.subject),
 1076|  3.97k|                    self.predicate(q.predicate),
 1077|  3.97k|                    self.term(q.object)
 1078|  3.97k|                )
 1079|       |            }
 1080|       |        } else {
 1081|  5.85k|            if self.current_subject_predicate.is_some() {
 1082|  5.08k|                writeln!(writer, " .")?;
 1083|    775|            }
 1084|  5.85k|            if !self.current_graph_name.is_default_graph() {
 1085|  2.83k|                writeln!(writer, "}}")?;
 1086|  3.01k|            }
 1087|  5.85k|            self.current_graph_name = q.graph_name.into_owned();
 1088|  5.85k|            self.current_subject_predicate =
 1089|  5.85k|                Some((q.subject.into_owned(), q.predicate.into_owned()));
 1090|  5.85k|            match self.current_graph_name.as_ref() {
 1091|  2.95k|                GraphNameRef::NamedNode(g) => {
 1092|  2.95k|                    writeln!(writer, "{} {{", self.term(g))?;
 1093|  2.95k|                    write!(writer, "\t")?;
 1094|       |                }
 1095|    744|                GraphNameRef::BlankNode(g) => {
 1096|    744|                    writeln!(writer, "{} {{", self.term(g))?;
 1097|    744|                    write!(writer, "\t")?;
 1098|       |                }
 1099|  2.15k|                GraphNameRef::DefaultGraph => (),
 1100|       |            }
 1101|       |
 1102|  5.85k|            write!(
 1103|  5.85k|                writer,
 1104|  5.85k|                "{} {} {}",
 1105|  5.85k|                self.term(q.subject),
 1106|  5.85k|                self.predicate(q.predicate),
 1107|  5.85k|                self.term(q.object)
 1108|  5.85k|            )
 1109|       |        }
 1110|   190k|    }
_RINvMs7_NtCssoZq86sT9S_5oxttl4trigNtB6_22LowLevelTriGSerializer4termNtNtCs23GeP7cdX8Z_5oxrdf10blank_node12BlankNodeRefECs7EVUVIOgNrt_4trig:
 1119|    744|    fn term<'a>(&'a self, term: impl Into<TermRef<'a>>) -> TurtleTerm<'a> {
 1120|    744|        TurtleTerm {
 1121|    744|            term: term.into(),
 1122|    744|            prefixes: &self.prefixes,
 1123|    744|        }
 1124|    744|    }
_RINvMs7_NtCssoZq86sT9S_5oxttl4trigNtB6_22LowLevelTriGSerializer4termNtNtCs23GeP7cdX8Z_5oxrdf10named_node12NamedNodeRefECs7EVUVIOgNrt_4trig:
 1119|  2.95k|    fn term<'a>(&'a self, term: impl Into<TermRef<'a>>) -> TurtleTerm<'a> {
 1120|  2.95k|        TurtleTerm {
 1121|  2.95k|            term: term.into(),
 1122|  2.95k|            prefixes: &self.prefixes,
 1123|  2.95k|        }
 1124|  2.95k|    }
_RINvMs7_NtCssoZq86sT9S_5oxttl4trigNtB6_22LowLevelTriGSerializer4termNtNtCs23GeP7cdX8Z_5oxrdf6triple10SubjectRefECs7EVUVIOgNrt_4trig:
 1119|   158k|    fn term<'a>(&'a self, term: impl Into<TermRef<'a>>) -> TurtleTerm<'a> {
 1120|   158k|        TurtleTerm {
 1121|   158k|            term: term.into(),
 1122|   158k|            prefixes: &self.prefixes,
 1123|   158k|        }
 1124|   158k|    }
_RINvMs7_NtCssoZq86sT9S_5oxttl4trigNtB6_22LowLevelTriGSerializer4termNtNtCs23GeP7cdX8Z_5oxrdf6triple7TermRefECs7EVUVIOgNrt_4trig:
 1119|   190k|    fn term<'a>(&'a self, term: impl Into<TermRef<'a>>) -> TurtleTerm<'a> {
 1120|   190k|        TurtleTerm {
 1121|   190k|            term: term.into(),
 1122|   190k|            prefixes: &self.prefixes,
 1123|   190k|        }
 1124|   190k|    }
_RINvMs7_NtCssoZq86sT9S_5oxttl4trigNtB6_22LowLevelTriGSerializer6finishQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECs7EVUVIOgNrt_4trig:
 1127|  8.43k|    pub fn finish(&mut self, mut writer: impl Write) -> io::Result<()> {
 1128|  8.43k|        if self.current_subject_predicate.is_some() {
 1129|  4.75k|            writeln!(writer, " .")?;
 1130|  3.68k|        }
 1131|  8.43k|        if !self.current_graph_name.is_default_graph() {
 1132|    860|            writeln!(writer, "}}")?;
 1133|  7.57k|        }
 1134|  8.43k|        Ok(())
 1135|  8.43k|    }
_RINvMs7_NtCssoZq86sT9S_5oxttl4trigNtB6_22LowLevelTriGSerializer9predicateNtNtCs23GeP7cdX8Z_5oxrdf10named_node12NamedNodeRefECs7EVUVIOgNrt_4trig:
 1112|   166k|    fn predicate<'a>(&'a self, named_node: impl Into<NamedNodeRef<'a>>) -> TurtlePredicate<'a> {
 1113|   166k|        TurtlePredicate {
 1114|   166k|            named_node: named_node.into(),
 1115|   166k|            prefixes: &self.prefixes,
 1116|   166k|        }
 1117|   166k|    }
_RNvMs6_NtCssoZq86sT9S_5oxttl4trigINtB5_20WriterTriGSerializerINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE6finishCs7EVUVIOgNrt_4trig:
  919|  8.43k|    pub fn finish(mut self) -> io::Result<W> {
  920|  8.43k|        self.low_level_writer.finish(&mut self.writer)?;
  921|  8.43k|        Ok(self.writer)
  922|  8.43k|    }
_RNvMNtCssoZq86sT9S_5oxttl4trigNtB2_10TriGParser9for_slice:
  200|  8.43k|    pub fn for_slice(self, slice: &[u8]) -> SliceTriGParser<'_> {
  201|  8.43k|        SliceTriGParser {
  202|  8.43k|            inner: TriGRecognizer::new_parser(
  203|  8.43k|                slice,
  204|  8.43k|                true,
  205|  8.43k|                true,
  206|  8.43k|                #[cfg(feature = "rdf-star")]
  207|  8.43k|                self.with_quoted_triples,
  208|  8.43k|                self.unchecked,
  209|  8.43k|                self.base,
  210|  8.43k|                self.prefixes,
  211|  8.43k|            )
  212|  8.43k|            .into_iter(),
  213|  8.43k|        }
  214|  8.43k|    }
_RNvMNtCssoZq86sT9S_5oxttl4trigNtB2_10TriGParser9low_level:
  254|  25.2k|    pub fn low_level(self) -> LowLevelTriGParser {
  255|  25.2k|        LowLevelTriGParser {
  256|  25.2k|            parser: TriGRecognizer::new_parser(
  257|  25.2k|                Vec::new(),
  258|  25.2k|                false,
  259|  25.2k|                true,
  260|  25.2k|                #[cfg(feature = "rdf-star")]
  261|  25.2k|                self.with_quoted_triples,
  262|  25.2k|                self.unchecked,
  263|  25.2k|                self.base,
  264|  25.2k|                self.prefixes,
  265|  25.2k|            ),
  266|  25.2k|        }
  267|  25.2k|    }
_RNvXs2_NtCssoZq86sT9S_5oxttl4trigNtB5_15SliceTriGParserNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next:
  574|   199k|    fn next(&mut self) -> Option<Self::Item> {
  575|   199k|        self.inner.next()
  576|   199k|    }
_RNvMs3_NtCssoZq86sT9S_5oxttl4trigNtB5_18LowLevelTriGParser17extend_from_slice:
  625|  1.72M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  626|  1.72M|        self.parser.extend_from_slice(other)
  627|  1.72M|    }
_RNvMs3_NtCssoZq86sT9S_5oxttl4trigNtB5_18LowLevelTriGParser3end:
  632|  25.2k|    pub fn end(&mut self) {
  633|  25.2k|        self.parser.end()
  634|  25.2k|    }
_RNvMs3_NtCssoZq86sT9S_5oxttl4trigNtB5_18LowLevelTriGParser6is_end:
  637|  25.2k|    pub fn is_end(&self) -> bool {
  638|  25.2k|        self.parser.is_end()
  639|  25.2k|    }
_RNvMs3_NtCssoZq86sT9S_5oxttl4trigNtB5_18LowLevelTriGParser10parse_next:
  645|  4.30M|    pub fn parse_next(&mut self) -> Option<Result<Quad, TurtleSyntaxError>> {
  646|  4.30M|        self.parser.parse_next()
  647|  4.30M|    }
_RNvMs3_NtCssoZq86sT9S_5oxttl4trigNtB5_18LowLevelTriGParser8prefixes:
  674|  25.2k|    pub fn prefixes(&self) -> TriGPrefixesIter<'_> {
  675|  25.2k|        TriGPrefixesIter {
  676|  25.2k|            inner: self.parser.context.prefixes(),
  677|  25.2k|        }
  678|  25.2k|    }
_RNvMs5_NtCssoZq86sT9S_5oxttl4trigNtB5_14TriGSerializer9low_level:
  873|  8.43k|    pub fn low_level(self) -> LowLevelTriGSerializer {
  874|  8.43k|        LowLevelTriGSerializer {
  875|  8.43k|            prefixes: self.prefixes,
  876|  8.43k|            prelude_written: false,
  877|  8.43k|            current_graph_name: GraphName::DefaultGraph,
  878|  8.43k|            current_subject_predicate: None,
  879|  8.43k|        }
  880|  8.43k|    }
_RNvXs8_NtCssoZq86sT9S_5oxttl4trigNtB5_15TurtlePredicateNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
 1144|   166k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1145|   166k|        if self.named_node == rdf::TYPE {
 1146|  1.60k|            f.write_str("a")
 1147|       |        } else {
 1148|   165k|            TurtleTerm {
 1149|   165k|                term: self.named_node.into(),
 1150|   165k|                prefixes: self.prefixes,
 1151|   165k|            }
 1152|   165k|            .fmt(f)
 1153|       |        }
 1154|   166k|    }
_RNvXs9_NtCssoZq86sT9S_5oxttl4trigNtB5_10TurtleTermNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
 1163|  5.03M|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1164|  5.03M|        match self.term {
 1165|  2.00M|            TermRef::NamedNode(v) => {
 1166|  2.07M|                for (prefix_iri, prefix_name) in self.prefixes {
 1167|   137k|                    if let Some(local_name) = v.as_str().strip_prefix(prefix_iri) {
 1168|   102k|                        if let Some(escaped_local_name) = escape_local_name(local_name) {
 1169|  69.6k|                            return write!(f, "{prefix_name}:{escaped_local_name}");
 1170|  33.0k|                        }
 1171|  34.3k|                    }
 1172|       |                }
 1173|  1.93M|                write!(f, "{v}")
 1174|       |            }
 1175|   154k|            TermRef::BlankNode(v) => write!(f, "{v}"),
 1176|  1.36M|            TermRef::Literal(v) => {
 1177|  1.36M|                let value = v.value();
 1178|  1.36M|                let inline = match v.datatype() {
 1179|  1.36M|                    xsd::BOOLEAN => is_turtle_boolean(value),
 1180|  1.36M|                    xsd::INTEGER => is_turtle_integer(value),
 1181|  1.15M|                    xsd::DECIMAL => is_turtle_decimal(value),
 1182|  1.15M|                    xsd::DOUBLE => is_turtle_double(value),
 1183|  4.94k|                    _ => false,
 1184|       |                };
 1185|  1.36M|                if inline {
 1186|  1.36M|                    f.write_str(value)
 1187|  4.94k|                } else if v.is_plain() {
 1188|  4.70k|                    write!(f, "{v}")
 1189|       |                } else {
 1190|    237|                    write!(
 1191|    237|                        f,
 1192|    237|                        "{}^^{}",
 1193|    237|                        LiteralRef::new_simple_literal(v.value()),
 1194|    237|                        TurtleTerm {
 1195|    237|                            term: v.datatype().into(),
 1196|    237|                            prefixes: self.prefixes
 1197|    237|                        }
 1198|    237|                    )
 1199|       |                }
 1200|       |            }
 1201|       |            #[cfg(feature = "rdf-star")]
 1202|  1.50M|            TermRef::Triple(t) => {
 1203|  1.50M|                write!(
 1204|  1.50M|                    f,
 1205|  1.50M|                    "<< {} {} {} >>",
 1206|  1.50M|                    TurtleTerm {
 1207|  1.50M|                        term: t.subject.as_ref().into(),
 1208|  1.50M|                        prefixes: self.prefixes
 1209|  1.50M|                    },
 1210|  1.50M|                    TurtleTerm {
 1211|  1.50M|                        term: t.predicate.as_ref().into(),
 1212|  1.50M|                        prefixes: self.prefixes
 1213|  1.50M|                    },
 1214|  1.50M|                    TurtleTerm {
 1215|  1.50M|                        term: t.object.as_ref(),
 1216|  1.50M|                        prefixes: self.prefixes
 1217|  1.50M|                    }
 1218|  1.50M|                )
 1219|       |            }
 1220|       |        }
 1221|  5.03M|    }
_RNvNtCssoZq86sT9S_5oxttl4trig17is_turtle_boolean:
 1224|    121|fn is_turtle_boolean(value: &str) -> bool {
 1225|    121|    matches!(value, "true" | "false")
 1226|    121|}
_RNvNtCssoZq86sT9S_5oxttl4trig17is_turtle_integer:
 1228|   216k|fn is_turtle_integer(value: &str) -> bool {
 1229|   216k|    // [19]  INTEGER  ::=  [+-]? [0-9]+
 1230|   216k|    let mut value = value.as_bytes();
 1231|   216k|    if let Some(v) = value.strip_prefix(b"+") {
 1232|    657|        value = v;
 1233|   215k|    } else if let Some(v) = value.strip_prefix(b"-") {
 1234|     25|        value = v;
 1235|   215k|    }
 1236|   216k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
 1237|   216k|}
_RNvNtCssoZq86sT9S_5oxttl4trig17is_turtle_decimal:
 1239|  2.64k|fn is_turtle_decimal(value: &str) -> bool {
 1240|  2.64k|    // [20]  DECIMAL  ::=  [+-]? [0-9]* '.' [0-9]+
 1241|  2.64k|    let mut value = value.as_bytes();
 1242|  2.64k|    if let Some(v) = value.strip_prefix(b"+") {
 1243|     68|        value = v;
 1244|  2.57k|    } else if let Some(v) = value.strip_prefix(b"-") {
 1245|     97|        value = v;
 1246|  2.48k|    }
 1247|  4.40k|    while value.first().map_or(false, u8::is_ascii_digit) {
 1248|  1.75k|        value = &value[1..];
 1249|  1.75k|    }
 1250|  2.64k|    let Some(value) = value.strip_prefix(b".") else {
 1251|      0|        return false;
 1252|       |    };
 1253|  2.64k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
 1254|  2.64k|}
_RNvNtCssoZq86sT9S_5oxttl4trig16is_turtle_double:
 1256|  1.14M|fn is_turtle_double(value: &str) -> bool {
 1257|  1.14M|    // [21]    DOUBLE    ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
 1258|  1.14M|    // [154s]  EXPONENT  ::=  [eE] [+-]? [0-9]+
 1259|  1.14M|    let mut value = value.as_bytes();
 1260|  1.14M|    if let Some(v) = value.strip_prefix(b"+") {
 1261|     75|        value = v;
 1262|  1.14M|    } else if let Some(v) = value.strip_prefix(b"-") {
 1263|    152|        value = v;
 1264|  1.14M|    }
 1265|  1.14M|    let mut with_before = false;
 1266|  3.64M|    while value.first().map_or(false, u8::is_ascii_digit) {
 1267|  2.50M|        value = &value[1..];
 1268|  2.50M|        with_before = true;
 1269|  2.50M|    }
 1270|  1.14M|    let mut with_after = false;
 1271|  1.14M|    if let Some(v) = value.strip_prefix(b".") {
 1272|    623|        value = v;
 1273|  6.13k|        while value.first().map_or(false, u8::is_ascii_digit) {
 1274|  5.51k|            value = &value[1..];
 1275|  5.51k|            with_after = true;
 1276|  5.51k|        }
 1277|  1.14M|    }
 1278|  1.14M|    if let Some(v) = value.strip_prefix(b"e") {
 1279|   119k|        value = v;
 1280|  1.02M|    } else if let Some(v) = value.strip_prefix(b"E") {
 1281|  1.02M|        value = v;
 1282|  1.02M|    } else {
 1283|      0|        return false;
 1284|       |    }
 1285|  1.14M|    if let Some(v) = value.strip_prefix(b"+") {
 1286|    182|        value = v;
 1287|  1.14M|    } else if let Some(v) = value.strip_prefix(b"-") {
 1288|    269|        value = v;
 1289|  1.14M|    }
 1290|  1.14M|    (with_before || with_after) && !value.is_empty() && value.iter().all(u8::is_ascii_digit)
 1291|  1.14M|}
_RNvNtCssoZq86sT9S_5oxttl4trig17escape_local_name:
 1293|   102k|fn escape_local_name(value: &str) -> Option<String> {
 1294|   102k|    // TODO: PLX
 1295|   102k|    // [168s] 	PN_LOCAL 	::= 	(PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
 1296|   102k|    let mut output = String::with_capacity(value.len());
 1297|   102k|    let mut chars = value.chars();
 1298|   102k|    let first = chars.next()?;
 1299|  69.7k|    if N3Lexer::is_possible_pn_chars_u(first) || first == ':' || first.is_ascii_digit() {
 1300|  21.8k|        output.push(first);
 1301|  47.8k|    } else if can_be_escaped_in_local_name(first) {
 1302|  47.7k|        output.push('\\');
 1303|  47.7k|        output.push(first);
 1304|  47.7k|    } else {
 1305|     34|        return None;
 1306|       |    }
 1307|       |
 1308|   321k|    while let Some(c) = chars.next() {
 1309|   252k|        if N3Lexer::is_possible_pn_chars(c) || c == ':' || (c == '.' && !chars.as_str().is_empty())
 1310|   150k|        {
 1311|   150k|            output.push(c);
 1312|   150k|        } else if can_be_escaped_in_local_name(c) {
 1313|   101k|            output.push('\\');
 1314|   101k|            output.push(c);
 1315|   101k|        } else {
 1316|     58|            return None;
 1317|       |        }
 1318|       |    }
 1319|       |
 1320|  69.6k|    Some(output)
 1321|   102k|}
_RNvNtCssoZq86sT9S_5oxttl4trig28can_be_escaped_in_local_name:
 1323|   149k|fn can_be_escaped_in_local_name(c: char) -> bool {
 1324|     92|    matches!(
 1325|   149k|        c,
 1326|       |        '_' | '~'
 1327|       |            | '.'
 1328|       |            | '-'
 1329|       |            | '!'
 1330|       |            | '$'
 1331|       |            | '&'
 1332|       |            | '\''
 1333|       |            | '('
 1334|       |            | ')'
 1335|       |            | '*'
 1336|       |            | '+'
 1337|       |            | ','
 1338|       |            | ';'
 1339|       |            | '='
 1340|       |            | '/'
 1341|       |            | '?'
 1342|       |            | '#'
 1343|       |            | '@'
 1344|       |            | '%'
 1345|       |    )
 1346|   149k|}


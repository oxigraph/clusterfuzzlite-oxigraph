_RNCINvMs_NtCs3IdWJf403OL_9getrandom4lazyNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   54|      1|        self.0.unsync_init(|| init() as usize) != 0
_RINvMNtCs3IdWJf403OL_9getrandom4lazyNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   34|    118|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   35|    118|        // Relaxed ordering is fine, as we only have a single atomic variable.
   36|    118|        let mut val = self.0.load(Relaxed);
   37|    118|        if val == Self::UNINIT {
   38|      1|            val = init();
   39|      1|            self.0.store(val, Relaxed);
   40|    117|        }
   41|    118|        val
   42|    118|    }
_RINvMs_NtCs3IdWJf403OL_9getrandom4lazyNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   53|    118|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   54|    118|        self.0.unsync_init(|| init() as usize) != 0
   55|    118|    }

_RNvCs3IdWJf403OL_9getrandom16getrandom_uninitCs59ZXsH8airK_9rand_core:
  345|    118|pub fn getrandom_uninit(dest: &mut [MaybeUninit<u8>]) -> Result<&mut [u8], Error> {
  346|    118|    if !dest.is_empty() {
  347|    118|        imp::getrandom_inner(dest)?;
  348|      0|    }
  349|       |    // SAFETY: `dest` has been fully initialized by `imp::getrandom_inner`
  350|       |    // since it returned `Ok`.
  351|    118|    Ok(unsafe { slice_assume_init_mut(dest) })
  352|    118|}
_RNvCs3IdWJf403OL_9getrandom9getrandomCs59ZXsH8airK_9rand_core:
  315|    118|pub fn getrandom(dest: &mut [u8]) -> Result<(), Error> {
  316|    118|    // SAFETY: The `&mut MaybeUninit<_>` reference doesn't escape, and
  317|    118|    // `getrandom_uninit` guarantees it will never de-initialize any part of
  318|    118|    // `dest`.
  319|    118|    getrandom_uninit(unsafe { slice_as_uninit_mut(dest) })?;
  320|    118|    Ok(())
  321|    118|}

_RNvNtCs3IdWJf403OL_9getrandom3imp22is_getrandom_available:
   21|      1|fn is_getrandom_available() -> bool {
   22|      1|    let res = unsafe { getrandom(core::ptr::null_mut(), 0, libc::GRND_NONBLOCK) };
   23|      1|    if res < 0 {
   24|      0|        match last_os_error().raw_os_error() {
   25|      0|            Some(libc::ENOSYS) => false, // No kernel support
   26|      0|            Some(libc::EPERM) => false,  // Blocked by seccomp
   27|      0|            _ => true,
   28|       |        }
   29|       |    } else {
   30|      1|        true
   31|       |    }
   32|      1|}
_RNCNvNtCs3IdWJf403OL_9getrandom3imp15getrandom_inner0B5_:
   13|    118|        sys_fill_exact(dest, |buf| unsafe {
   14|    118|            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   15|    118|        })
_RNvNtCs3IdWJf403OL_9getrandom3imp9getrandom:
   34|    119|unsafe fn getrandom(
   35|    119|    buf: *mut libc::c_void,
   36|    119|    buflen: libc::size_t,
   37|    119|    flags: libc::c_uint,
   38|    119|) -> libc::ssize_t {
   39|    119|    libc::syscall(libc::SYS_getrandom, buf, buflen, flags) as libc::ssize_t
   40|    119|}
_RNvNtCs3IdWJf403OL_9getrandom3imp15getrandom_inner:
    9|    118|pub fn getrandom_inner(dest: &mut [MaybeUninit<u8>]) -> Result<(), Error> {
   10|    118|    // getrandom(2) was introduced in Linux 3.17
   11|    118|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   12|    118|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   13|    118|        sys_fill_exact(dest, |buf| unsafe {
   14|       |            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   15|    118|        })
   16|       |    } else {
   17|      0|        use_file::getrandom_inner(dest)
   18|       |    }
   19|    118|}

_RINvNtCs3IdWJf403OL_9getrandom4util19slice_as_uninit_muthECs59ZXsH8airK_9rand_core:
   32|    118|pub unsafe fn slice_as_uninit_mut<T>(slice: &mut [T]) -> &mut [MaybeUninit<T>] {
   33|    118|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   34|    118|    &mut *(slice as *mut [T] as *mut [MaybeUninit<T>])
   35|    118|}
_RINvNtCs3IdWJf403OL_9getrandom4util21slice_assume_init_muthECs59ZXsH8airK_9rand_core:
    8|    118|pub unsafe fn slice_assume_init_mut<T>(slice: &mut [MaybeUninit<T>]) -> &mut [T] {
    9|    118|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   10|    118|    &mut *(slice as *mut [MaybeUninit<T>] as *mut [T])
   11|    118|}

_RINvNtCs3IdWJf403OL_9getrandom9util_libc14sys_fill_exactNCNvNtB4_3imp15getrandom_inner0EB4_:
   59|    118|pub fn sys_fill_exact(
   60|    118|    mut buf: &mut [MaybeUninit<u8>],
   61|    118|    sys_fill: impl Fn(&mut [MaybeUninit<u8>]) -> libc::ssize_t,
   62|    118|) -> Result<(), Error> {
   63|    236|    while !buf.is_empty() {
   64|    118|        let res = sys_fill(buf);
   65|    118|        match res {
   66|    118|            res if res > 0 => buf = buf.get_mut(res as usize..).ok_or(Error::UNEXPECTED)?,
   67|       |            -1 => {
   68|      0|                let err = last_os_error();
   69|      0|                // We should try again if the call was interrupted.
   70|      0|                if err.raw_os_error() != Some(libc::EINTR) {
   71|      0|                    return Err(err);
   72|      0|                }
   73|       |            }
   74|       |            // Negative return codes not equal to -1 should be impossible.
   75|       |            // EOF (ret = 0) should be impossible, as the data we are reading
   76|       |            // should be an infinite stream of random bytes.
   77|      0|            _ => return Err(Error::UNEXPECTED),
   78|       |        }
   79|       |    }
   80|    118|    Ok(())
   81|    118|}

rust_fuzzer_test_input:
  209|  6.79k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  6.79k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  6.79k|                }
  223|  6.79k|
  224|  6.79k|                __libfuzzer_sys_run(bytes);
  225|  6.79k|                0
  226|  6.79k|            }
_RNvNvCs7hwCOMDGQov_4trig1__19___libfuzzer_sys_run:
  241|  6.79k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|  6.79k|            }
LLVMFuzzerTestOneInput:
   58|  6.79k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  6.79k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  6.79k|    });
   63|  6.79k|
   64|  6.79k|    match test_input {
   65|  6.79k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  6.79k|}
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}
_RNCNvCs2cfBPjnRYZ_13libfuzzer_sys15test_input_wrap0B3_:
   59|  6.79k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  6.79k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  6.79k|        rust_fuzzer_test_input(data_slice)
   62|  6.79k|    });

_RINvNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr7memchr20ECsgLOhukngm62_5oxttl:
 1125|  1.54M|pub(crate) unsafe fn search_slice_with_raw(
 1126|  1.54M|    haystack: &[u8],
 1127|  1.54M|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  1.54M|) -> Option<usize> {
 1129|  1.54M|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  1.54M|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  1.54M|    // a &[u8].
 1132|  1.54M|    let start = haystack.as_ptr();
 1133|  1.54M|    let end = start.add(haystack.len());
 1134|  1.54M|    let found = find_raw(start, end)?;
 1135|  1.34M|    Some(found.distance(start))
 1136|  1.54M|}
_RINvMs3_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0ECsgLOhukngm62_5oxttl:
 1044|  8.59M|    pub(crate) unsafe fn next(
 1045|  8.59M|        &mut self,
 1046|  8.59M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  8.59M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  8.59M|        let found = find_raw(self.start, self.end)?;
 1057|  14.5k|        let result = found.distance(self.original_start);
 1058|  14.5k|        self.start = found.add(1);
 1059|  14.5k|        Some(result)
 1060|  8.59M|    }
_RINvNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECsgLOhukngm62_5oxttl:
 1125|  13.9k|pub(crate) unsafe fn search_slice_with_raw(
 1126|  13.9k|    haystack: &[u8],
 1127|  13.9k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  13.9k|) -> Option<usize> {
 1129|  13.9k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  13.9k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  13.9k|    // a &[u8].
 1132|  13.9k|    let start = haystack.as_ptr();
 1133|  13.9k|    let end = start.add(haystack.len());
 1134|  13.9k|    let found = find_raw(start, end)?;
 1135|  1.61k|    Some(found.distance(start))
 1136|  13.9k|}
_RNvMs3_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  8.57M|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  8.57M|        Iter {
 1029|  8.57M|            original_start: haystack.as_ptr(),
 1030|  8.57M|            start: haystack.as_ptr(),
 1031|  8.57M|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  8.57M|            haystack: core::marker::PhantomData,
 1033|  8.57M|        }
 1034|  8.57M|    }
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE7needle1B8_:
  117|  27.4k|    pub(crate) fn needle1(&self) -> u8 {
  118|  27.4k|        self.s1
  119|  27.4k|    }
_RINvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  16.3k|    unsafe fn search_chunk(
  417|  16.3k|        &self,
  418|  16.3k|        cur: *const u8,
  419|  16.3k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  16.3k|    ) -> Option<*const u8> {
  421|  16.3k|        let chunk = V::load_unaligned(cur);
  422|  16.3k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  16.3k|        if mask.has_non_zero() {
  424|    990|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  15.3k|            None
  427|       |        }
  428|  16.3k|    }
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  2.92k|    pub(crate) unsafe fn find_raw(
  144|  2.92k|        &self,
  145|  2.92k|        start: *const u8,
  146|  2.92k|        end: *const u8,
  147|  2.92k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  2.92k|        let topos = V::Mask::first_offset;
  155|  2.92k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  2.92k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|     92|            return Some(cur);
  167|  2.82k|        }
  168|  2.82k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  2.82k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  2.82k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  2.82k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  3.71k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|    964|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|     81|                return Some(cur);
  216|    883|            }
  217|    883|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  2.74k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  2.46k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  2.46k|            return self.search_chunk(cur, topos);
  228|    284|        }
  229|    284|        None
  230|  2.92k|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  15.8M|    pub(crate) fn needle1(&self) -> u8 {
  462|  15.8M|        self.s1
  463|  15.8M|    }
_RINvNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  4.12k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  4.12k|    start: *const u8,
 1150|  4.12k|    end: *const u8,
 1151|  4.12k|    confirm: F,
 1152|  4.12k|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  4.12k|    let mut ptr = start;
 1155|  31.4k|    while ptr < end {
 1156|  27.4k|        if confirm(*ptr) {
 1157|    210|            return Some(ptr);
 1158|  27.2k|        }
 1159|  27.2k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  3.91k|    None
 1162|  4.12k|}
_RINvNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|  6.53M|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  6.53M|    start: *const u8,
 1150|  6.53M|    end: *const u8,
 1151|  6.53M|    confirm: F,
 1152|  6.53M|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  6.53M|    let mut ptr = start;
 1155|  22.2M|    while ptr < end {
 1156|  15.8M|        if confirm(*ptr) {
 1157|  93.4k|            return Some(ptr);
 1158|  15.7M|        }
 1159|  15.7M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  6.44M|    None
 1162|  6.53M|}
_RINvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  6.34k|    unsafe fn search_chunk(
  417|  6.34k|        &self,
  418|  6.34k|        cur: *const u8,
  419|  6.34k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  6.34k|    ) -> Option<*const u8> {
  421|  6.34k|        let chunk = V::load_unaligned(cur);
  422|  6.34k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  6.34k|        if mask.has_non_zero() {
  424|    223|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  6.12k|            None
  427|       |        }
  428|  6.34k|    }
_RINvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  2.07M|    unsafe fn search_chunk(
  671|  2.07M|        &self,
  672|  2.07M|        cur: *const u8,
  673|  2.07M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  2.07M|    ) -> Option<*const u8> {
  675|  2.07M|        let chunk = V::load_unaligned(cur);
  676|  2.07M|        let eq1 = self.v1.cmpeq(chunk);
  677|  2.07M|        let eq2 = self.v2.cmpeq(chunk);
  678|  2.07M|        let mask = eq1.or(eq2).movemask();
  679|  2.07M|        if mask.has_non_zero() {
  680|  53.0k|            let mask1 = eq1.movemask();
  681|  53.0k|            let mask2 = eq2.movemask();
  682|  53.0k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  2.02M|            None
  685|       |        }
  686|  2.07M|    }
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE3newB8_:
  111|  13.9k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  13.9k|        One { s1: needle, v1: V::splat(needle) }
  113|  13.9k|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  15.7M|    pub(crate) fn needle2(&self) -> u8 {
  468|  15.7M|        self.s2
  469|  15.7M|    }
_RINvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  1.84M|    unsafe fn search_chunk(
  671|  1.84M|        &self,
  672|  1.84M|        cur: *const u8,
  673|  1.84M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  1.84M|    ) -> Option<*const u8> {
  675|  1.84M|        let chunk = V::load_unaligned(cur);
  676|  1.84M|        let eq1 = self.v1.cmpeq(chunk);
  677|  1.84M|        let eq2 = self.v2.cmpeq(chunk);
  678|  1.84M|        let mask = eq1.or(eq2).movemask();
  679|  1.84M|        if mask.has_non_zero() {
  680|  1.13M|            let mask1 = eq1.movemask();
  681|  1.13M|            let mask2 = eq2.movemask();
  682|  1.13M|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|   712k|            None
  685|       |        }
  686|  1.84M|    }
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE3newB8_:
  111|  13.9k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  13.9k|        One { s1: needle, v1: V::splat(needle) }
  113|  13.9k|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE8find_rawBa_:
  493|  1.48M|    pub(crate) unsafe fn find_raw(
  494|  1.48M|        &self,
  495|  1.48M|        start: *const u8,
  496|  1.48M|        end: *const u8,
  497|  1.48M|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  1.48M|        let topos = V::Mask::first_offset;
  505|  1.48M|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  1.48M|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  1.12M|            return Some(cur);
  517|   363k|        }
  518|   363k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   363k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   363k|        if len >= Self::LOOP_SIZE {
  522|   309k|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|   266k|                let a = V::load_aligned(cur);
  526|   266k|                let b = V::load_aligned(cur.add(V::BYTES));
  527|   266k|                let eqa1 = self.v1.cmpeq(a);
  528|   266k|                let eqb1 = self.v1.cmpeq(b);
  529|   266k|                let eqa2 = self.v2.cmpeq(a);
  530|   266k|                let eqb2 = self.v2.cmpeq(b);
  531|   266k|                let or1 = eqa1.or(eqb1);
  532|   266k|                let or2 = eqa2.or(eqb2);
  533|   266k|                let or3 = or1.or(or2);
  534|   266k|                if or3.movemask_will_have_non_zero() {
  535|  82.9k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|  82.9k|                    if mask.has_non_zero() {
  537|  41.8k|                        return Some(cur.add(topos(mask)));
  538|  41.0k|                    }
  539|  41.0k|
  540|  41.0k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|  41.0k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|   183k|                }
  544|   183k|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   237k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   364k|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  87.1k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  2.65k|                return Some(cur);
  554|  84.4k|            }
  555|  84.4k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   277k|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   269k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   269k|            return self.search_chunk(cur, topos);
  566|  8.67k|        }
  567|  8.67k|        None
  568|  1.48M|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE8find_rawBa_:
  493|   915k|    pub(crate) unsafe fn find_raw(
  494|   915k|        &self,
  495|   915k|        start: *const u8,
  496|   915k|        end: *const u8,
  497|   915k|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   915k|        let topos = V::Mask::first_offset;
  505|   915k|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   915k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  45.4k|            return Some(cur);
  517|   869k|        }
  518|   869k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   869k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   869k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   869k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  1.21M|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   348k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  3.66k|                return Some(cur);
  554|   344k|            }
  555|   344k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   866k|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   811k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   811k|            return self.search_chunk(cur, topos);
  566|  54.2k|        }
  567|  54.2k|        None
  568|   915k|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE3newBa_:
  450|  10.1M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  10.1M|        Two {
  452|  10.1M|            s1: needle1,
  453|  10.1M|            s2: needle2,
  454|  10.1M|            v1: V::splat(needle1),
  455|  10.1M|            v2: V::splat(needle2),
  456|  10.1M|        }
  457|  10.1M|    }
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  5.81k|    pub(crate) unsafe fn find_raw(
  144|  5.81k|        &self,
  145|  5.81k|        start: *const u8,
  146|  5.81k|        end: *const u8,
  147|  5.81k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  5.81k|        let topos = V::Mask::first_offset;
  155|  5.81k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  5.81k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|    763|            return Some(cur);
  167|  5.05k|        }
  168|  5.05k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  5.05k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  5.05k|        if len >= Self::LOOP_SIZE {
  172|  3.82k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|  1.69k|                let a = V::load_aligned(cur);
  176|  1.69k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|  1.69k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|  1.69k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|  1.69k|                let eqa = self.v1.cmpeq(a);
  180|  1.69k|                let eqb = self.v1.cmpeq(b);
  181|  1.69k|                let eqc = self.v1.cmpeq(c);
  182|  1.69k|                let eqd = self.v1.cmpeq(d);
  183|  1.69k|                let or1 = eqa.or(eqb);
  184|  1.69k|                let or2 = eqc.or(eqd);
  185|  1.69k|                let or3 = or1.or(or2);
  186|  1.69k|                if or3.movemask_will_have_non_zero() {
  187|    194|                    let mask = eqa.movemask();
  188|    194|                    if mask.has_non_zero() {
  189|     52|                        return Some(cur.add(topos(mask)));
  190|    142|                    }
  191|    142|
  192|    142|                    let mask = eqb.movemask();
  193|    142|                    if mask.has_non_zero() {
  194|     74|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|     68|                    }
  196|     68|
  197|     68|                    let mask = eqc.movemask();
  198|     68|                    if mask.has_non_zero() {
  199|     35|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|     33|                    }
  201|     33|
  202|     33|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|     33|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  1.50k|                }
  206|  1.50k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  2.73k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  10.7k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  6.00k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|     74|                return Some(cur);
  216|  5.93k|            }
  217|  5.93k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  4.78k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  4.54k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  4.54k|            return self.search_chunk(cur, topos);
  228|    236|        }
  229|    236|        None
  230|  5.81k|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE3newBa_:
  450|  10.1M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  10.1M|        Two {
  452|  10.1M|            s1: needle1,
  453|  10.1M|            s2: needle2,
  454|  10.1M|            v1: V::splat(needle1),
  455|  10.1M|            v2: V::splat(needle2),
  456|  10.1M|        }
  457|  10.1M|    }

_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNCNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  15.8M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  15.8M|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  15.8M|                })
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  5.81k|    unsafe fn find_raw_avx2(
  397|  5.81k|        &self,
  398|  5.81k|        start: *const u8,
  399|  5.81k|        end: *const u8,
  400|  5.81k|    ) -> Option<*const u8> {
  401|  5.81k|        self.avx2.find_raw(start, end)
  402|  5.81k|    }
_RNCNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|  27.4k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|  27.4k|                    b == self.sse2.needle1()
  194|  27.4k|                })
_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  10.1M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  10.1M|        Two {
  558|  10.1M|            sse2: generic::Two::new(needle1, needle2),
  559|  10.1M|            avx2: generic::Two::new(needle1, needle2),
  560|  10.1M|        }
  561|  10.1M|    }
_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  10.1M|    pub unsafe fn find_raw(
  655|  10.1M|        &self,
  656|  10.1M|        start: *const u8,
  657|  10.1M|        end: *const u8,
  658|  10.1M|    ) -> Option<*const u8> {
  659|  10.1M|        if start >= end {
  660|  1.19M|            return None;
  661|  8.93M|        }
  662|  8.93M|        let len = end.distance(start);
  663|  8.93M|        if len < __m256i::BYTES {
  664|  7.45M|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  6.53M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  6.53M|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|   915k|                self.find_raw_sse2(start, end)
  674|       |            };
  675|  1.48M|        }
  676|  1.48M|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|  1.48M|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|  1.48M|        // enough to run on the vector routine. Pointer validity is caller's
  679|  1.48M|        // responsibility.
  680|  1.48M|        //
  681|  1.48M|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|  1.48M|        // means we'd have to annotate this routine with `target_feature`.
  683|  1.48M|        // Which is fine, because this routine is `unsafe` anyway and the
  684|  1.48M|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|  1.48M|        // The real problem is that a routine with a `target_feature`
  686|  1.48M|        // annotation generally can't be inlined into caller code unless
  687|  1.48M|        // the caller code has the same target feature annotations. Namely,
  688|  1.48M|        // the common case (at time of writing) is for calling code to not
  689|  1.48M|        // have the `avx2` target feature enabled *at compile time*. Without
  690|  1.48M|        // `target_feature` on this routine, it can be inlined which will
  691|  1.48M|        // handle some of the short-haystack cases above without touching the
  692|  1.48M|        // architecture specific code.
  693|  1.48M|        self.find_raw_avx2(start, end)
  694|  10.1M|    }
_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|  1.48M|    unsafe fn find_raw_avx2(
  805|  1.48M|        &self,
  806|  1.48M|        start: *const u8,
  807|  1.48M|        end: *const u8,
  808|  1.48M|    ) -> Option<*const u8> {
  809|  1.48M|        self.avx2.find_raw(start, end)
  810|  1.48M|    }
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  13.9k|    pub unsafe fn find_raw(
  180|  13.9k|        &self,
  181|  13.9k|        start: *const u8,
  182|  13.9k|        end: *const u8,
  183|  13.9k|    ) -> Option<*const u8> {
  184|  13.9k|        if start >= end {
  185|  1.06k|            return None;
  186|  12.8k|        }
  187|  12.8k|        let len = end.distance(start);
  188|  12.8k|        if len < __m256i::BYTES {
  189|  7.04k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  4.12k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  4.12k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  2.92k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  5.81k|        }
  201|  5.81k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  5.81k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  5.81k|        // enough to run on the vector routine. Pointer validity is caller's
  204|  5.81k|        // responsibility.
  205|  5.81k|        //
  206|  5.81k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  5.81k|        // means we'd have to annotate this routine with `target_feature`.
  208|  5.81k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  5.81k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  5.81k|        // The real problem is that a routine with a `target_feature`
  211|  5.81k|        // annotation generally can't be inlined into caller code unless
  212|  5.81k|        // the caller code has the same target feature annotations. Namely,
  213|  5.81k|        // the common case (at time of writing) is for calling code to not
  214|  5.81k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  5.81k|        // `target_feature` on this routine, it can be inlined which will
  216|  5.81k|        // handle some of the short-haystack cases above without touching the
  217|  5.81k|        // architecture specific code.
  218|  5.81k|        self.find_raw_avx2(start, end)
  219|  13.9k|    }
_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|   915k|    unsafe fn find_raw_sse2(
  765|   915k|        &self,
  766|   915k|        start: *const u8,
  767|   915k|        end: *const u8,
  768|   915k|    ) -> Option<*const u8> {
  769|   915k|        self.sse2.find_raw(start, end)
  770|   915k|    }
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  2.92k|    unsafe fn find_raw_sse2(
  337|  2.92k|        &self,
  338|  2.92k|        start: *const u8,
  339|  2.92k|        end: *const u8,
  340|  2.92k|    ) -> Option<*const u8> {
  341|  2.92k|        self.sse2.find_raw(start, end)
  342|  2.92k|    }
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  13.9k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  13.9k|        One {
   71|  13.9k|            sse2: generic::One::new(needle),
   72|  13.9k|            avx2: generic::One::new(needle),
   73|  13.9k|        }
   74|  13.9k|    }

_RNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  10.1M|pub(crate) fn memchr2_raw(
  221|  10.1M|    n1: u8,
  222|  10.1M|    n2: u8,
  223|  10.1M|    start: *const u8,
  224|  10.1M|    end: *const u8,
  225|  10.1M|) -> Option<*const u8> {
  226|  10.1M|    // SAFETY: We provide a valid function pointer type.
  227|  10.1M|    unsafe_ifunc!(
  228|  10.1M|        Two,
  229|  10.1M|        find_raw,
  230|  10.1M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  10.1M|        Option<*const u8>,
  232|  10.1M|        start,
  233|  10.1M|        end,
  234|  10.1M|        n1,
  235|  10.1M|        n2
  236|  10.1M|    )
  237|  10.1M|}
_RNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr10memchr_raw:
  174|  13.9k|pub(crate) fn memchr_raw(
  175|  13.9k|    n1: u8,
  176|  13.9k|    start: *const u8,
  177|  13.9k|    end: *const u8,
  178|  13.9k|) -> Option<*const u8> {
  179|  13.9k|    // SAFETY: We provide a valid function pointer type.
  180|  13.9k|    unsafe_ifunc!(
  181|  13.9k|        One,
  182|  13.9k|        find_raw,
  183|  13.9k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  13.9k|        Option<*const u8>,
  185|  13.9k|        start,
  186|  13.9k|        end,
  187|  13.9k|        n1
  188|  13.9k|    )
  189|  13.9k|}
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  10.1M|        unsafe fn find_avx2(
   79|  10.1M|            $($needle: u8),+,
   80|  10.1M|            $hay_start: *const u8,
   81|  10.1M|            $hay_end: *const u8,
   82|  10.1M|        ) -> $retty {
   83|  10.1M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  10.1M|            $memchrty::new_unchecked($($needle),+)
   85|  10.1M|                .$memchrfind($hay_start, $hay_end)
   86|  10.1M|        }
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  13.9k|        unsafe fn find_avx2(
   79|  13.9k|            $($needle: u8),+,
   80|  13.9k|            $hay_start: *const u8,
   81|  13.9k|            $hay_end: *const u8,
   82|  13.9k|        ) -> $retty {
   83|  13.9k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  13.9k|            $memchrty::new_unchecked($($needle),+)
   85|  13.9k|                .$memchrfind($hay_start, $hay_end)
   86|  13.9k|        }

_RNvXNtCsezyNti1ZN2c_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  13.8M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  13.8M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  13.8M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  13.8M|    }
_RNvXNtCsezyNti1ZN2c_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|  1.24M|    fn as_usize(self) -> usize {
   27|  1.24M|        self as usize
   28|  1.24M|    }

_RNvMs2_NtCsezyNti1ZN2c_6memchr6memchrNtB5_7Memchr23newCsgLOhukngm62_5oxttl:
  377|  8.57M|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  8.57M|        Memchr2 {
  379|  8.57M|            needle1,
  380|  8.57M|            needle2,
  381|  8.57M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  8.57M|        }
  383|  8.57M|    }
_RNvNtCsezyNti1ZN2c_6memchr6memchr11memchr2_rawCsgLOhukngm62_5oxttl:
  574|  10.1M|unsafe fn memchr2_raw(
  575|  10.1M|    needle1: u8,
  576|  10.1M|    needle2: u8,
  577|  10.1M|    start: *const u8,
  578|  10.1M|    end: *const u8,
  579|  10.1M|) -> Option<*const u8> {
  580|  10.1M|    #[cfg(target_arch = "x86_64")]
  581|  10.1M|    {
  582|  10.1M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  10.1M|    }
  584|  10.1M|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  585|  10.1M|    {
  586|  10.1M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  10.1M|    }
  588|  10.1M|    #[cfg(target_arch = "aarch64")]
  589|  10.1M|    {
  590|  10.1M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  10.1M|    }
  592|  10.1M|    #[cfg(not(any(
  593|  10.1M|        target_arch = "x86_64",
  594|  10.1M|        all(target_arch = "wasm32", target_feature = "simd128"),
  595|  10.1M|        target_arch = "aarch64"
  596|  10.1M|    )))]
  597|  10.1M|    {
  598|  10.1M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  10.1M|            .find_raw(start, end)
  600|  10.1M|    }
  601|  10.1M|}
_RNvNtCsezyNti1ZN2c_6memchr6memchr12memchr2_iterCsgLOhukngm62_5oxttl:
  232|  8.57M|pub fn memchr2_iter<'h>(
  233|  8.57M|    needle1: u8,
  234|  8.57M|    needle2: u8,
  235|  8.57M|    haystack: &'h [u8],
  236|  8.57M|) -> Memchr2<'h> {
  237|  8.57M|    Memchr2::new(needle1, needle2, haystack)
  238|  8.57M|}
_RNvNtCsezyNti1ZN2c_6memchr6memchr6memchrCsgLOhukngm62_5oxttl:
   27|  13.9k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  13.9k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  13.9k|    // pointer between start and end.
   30|  13.9k|    unsafe {
   31|  13.9k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  13.9k|        })
   34|  13.9k|    }
   35|  13.9k|}
_RNvNtCsezyNti1ZN2c_6memchr6memchr7memchr2CsgLOhukngm62_5oxttl:
   92|  1.54M|pub fn memchr2(needle1: u8, needle2: u8, haystack: &[u8]) -> Option<usize> {
   93|  1.54M|    // SAFETY: memchr2_raw, when a match is found, always returns a valid
   94|  1.54M|    // pointer between start and end.
   95|  1.54M|    unsafe {
   96|  1.54M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|       |            memchr2_raw(needle1, needle2, start, end)
   98|  1.54M|        })
   99|  1.54M|    }
  100|  1.54M|}
_RNvXs3_NtCsezyNti1ZN2c_6memchr6memchrNtB5_7Memchr2NtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCsgLOhukngm62_5oxttl:
  390|  8.59M|    fn next(&mut self) -> Option<usize> {
  391|  8.59M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  8.59M|        // pointers returns will fall within the start and end bounds, and this
  393|  8.59M|        // upholds the safety contract of `self.it.next`.
  394|  8.59M|        unsafe {
  395|  8.59M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  8.59M|        }
  397|  8.59M|    }
_RNCNvNtCsezyNti1ZN2c_6memchr6memchr7memchr20CsgLOhukngm62_5oxttl:
   96|  1.54M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|  1.54M|            memchr2_raw(needle1, needle2, start, end)
   98|  1.54M|        })
_RNCNvXs3_NtCsezyNti1ZN2c_6memchr6memchrNtB7_7Memchr2NtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0CsgLOhukngm62_5oxttl:
  395|  8.59M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNCNvNtCsezyNti1ZN2c_6memchr6memchr6memchr0B5_:
   31|  13.9k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|  13.9k|            memchr_raw(needle, start, end)
   33|  13.9k|        })
_RNvNtCsezyNti1ZN2c_6memchr6memchr10memchr_rawB3_:
  504|  13.9k|unsafe fn memchr_raw(
  505|  13.9k|    needle: u8,
  506|  13.9k|    start: *const u8,
  507|  13.9k|    end: *const u8,
  508|  13.9k|) -> Option<*const u8> {
  509|  13.9k|    #[cfg(target_arch = "x86_64")]
  510|  13.9k|    {
  511|  13.9k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  13.9k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  13.9k|        // time. This function also handles using a fallback if neither AVX2
  514|  13.9k|        // nor SSE2 (unusual) are available.
  515|  13.9k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  13.9k|    }
  517|  13.9k|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  518|  13.9k|    {
  519|  13.9k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  13.9k|    }
  521|  13.9k|    #[cfg(target_arch = "aarch64")]
  522|  13.9k|    {
  523|  13.9k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  13.9k|    }
  525|  13.9k|    #[cfg(not(any(
  526|  13.9k|        target_arch = "x86_64",
  527|  13.9k|        all(target_arch = "wasm32", target_feature = "simd128"),
  528|  13.9k|        target_arch = "aarch64"
  529|  13.9k|    )))]
  530|  13.9k|    {
  531|  13.9k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  13.9k|    }
  533|  13.9k|}

_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  220|  2.08M|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  221|  2.08M|            _mm_loadu_si128(data as *const __m128i)
  222|  2.08M|        }
_RNvXs_NtCsezyNti1ZN2c_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  173|  1.26M|    fn first_offset(self) -> usize {
  174|  1.26M|        // We are dealing with little endian here (and if we aren't, we swap
  175|  1.26M|        // the bytes so we are in practice), where the most significant byte
  176|  1.26M|        // is at a higher address. That means the least significant bit that
  177|  1.26M|        // is set corresponds to the position of our first matching byte.
  178|  1.26M|        // That position corresponds to the number of zeros after the least
  179|  1.26M|        // significant bit.
  180|  1.26M|        self.get_for_offset().trailing_zeros() as usize
  181|  1.26M|    }
_RNvMNtCsezyNti1ZN2c_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  128|  1.26M|    fn get_for_offset(self) -> u32 {
  129|  1.26M|        #[cfg(target_endian = "big")]
  130|  1.26M|        {
  131|  1.26M|            self.0.swap_bytes()
  132|  1.26M|        }
  133|  1.26M|        #[cfg(target_endian = "little")]
  134|  1.26M|        {
  135|  1.26M|            self.0
  136|  1.26M|        }
  137|  1.26M|    }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  230|  4.15M|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  231|  4.15M|            _mm_cmpeq_epi8(self, vector2)
  232|  4.15M|        }
_RNvXs_NtCsezyNti1ZN2c_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  148|  4.29M|    fn has_non_zero(self) -> bool {
  149|  4.29M|        self.0 != 0
  150|  4.29M|    }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  225|  2.18M|        unsafe fn movemask(self) -> SensibleMoveMask {
  226|  2.18M|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  227|  2.18M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  275|  4.63M|        unsafe fn movemask(self) -> SensibleMoveMask {
  276|  4.63M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  277|  4.63M|        }
_RNvYNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtNtCsezyNti1ZN2c_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   65|   268k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   66|   268k|        self.movemask().has_non_zero()
   67|   268k|    }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  270|  1.85M|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  271|  1.85M|            _mm256_loadu_si256(data as *const __m256i)
  272|  1.85M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  280|  4.77M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  281|  4.77M|            _mm256_cmpeq_epi8(self, vector2)
  282|  4.77M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  210|  20.2M|        unsafe fn splat(byte: u8) -> __m128i {
  211|  20.2M|            _mm_set1_epi8(byte as i8)
  212|  20.2M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector2or:
  240|  2.07M|        unsafe fn or(self, vector2: Self) -> __m128i {
  241|  2.07M|            _mm_or_si128(self, vector2)
  242|  2.07M|        }
_RNvXs_NtCsezyNti1ZN2c_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  163|  1.30M|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  164|  1.30M|        SensibleMoveMask(self.0 | other.0)
  165|  1.30M|    }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  260|  20.2M|        unsafe fn splat(byte: u8) -> __m256i {
  261|  20.2M|            _mm256_set1_epi8(byte as i8)
  262|  20.2M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  265|   540k|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  266|   540k|            _mm256_load_si256(data as *const __m256i)
  267|   540k|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector2or:
  290|  2.64M|        unsafe fn or(self, vector2: Self) -> __m256i {
  291|  2.64M|            _mm256_or_si256(self, vector2)
  292|  2.64M|        }

_RNvMs2_NtCs4LeKDsHh25A_9once_cell3impINtB5_8OnceCellNtNtCsjOdcKtOMjJI_5alloc6string6StringE14is_initializedCs2cfBPjnRYZ_13libfuzzer_sys:
   49|  6.79k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  6.79k|        // An `Acquire` load is enough because that makes all the initialization
   51|  6.79k|        // operations visible to us, and, this being a fast path, weaker
   52|  6.79k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  6.79k|        // `SeqCst` operations on the slow path.
   54|  6.79k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  6.79k|    }

_RNvMs4_NtCs4LeKDsHh25A_9once_cell4syncINtB5_8OnceCellNtNtCsjOdcKtOMjJI_5alloc6string6StringE3getCs2cfBPjnRYZ_13libfuzzer_sys:
  963|  6.79k|        pub fn get(&self) -> Option<&T> {
  964|  6.79k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  6.79k|                None
  969|       |            }
  970|  6.79k|        }

_RNvMCs87w0kKV82sz_10oxilangtagINtB2_11LanguageTagReE5parseCsgLOhukngm62_5oxttl:
   49|  19.2k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   50|  19.2k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   51|  15.9k|        Ok(Self { tag, positions })
   52|  19.2k|    }
_RNvMCs87w0kKV82sz_10oxilangtagINtB2_11LanguageTagReE10into_innerCsgLOhukngm62_5oxttl:
   62|  15.9k|    pub fn into_inner(self) -> T {
   63|  15.9k|        self.tag
   64|  15.9k|    }
_RNvXsE_Cs87w0kKV82sz_10oxilangtagNtB5_16VoidOutputBufferNtNtCs9nhK3FOW46N_4core7default7Default7defaultCsgLOhukngm62_5oxttl:
  558|  19.2k|#[derive(Default)]
_RINvXsr_Cs87w0kKV82sz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECsaAh6yFmIely_5oxrdf:
  571|  21.2k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Cs87w0kKV82sz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECsaAh6yFmIely_5oxrdf:
  571|  3.37k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvCs87w0kKV82sz_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECsaAh6yFmIely_5oxrdf:
  632|  16.3k|fn parse_langtag(
  633|  16.3k|    input: &str,
  634|  16.3k|    output: &mut impl OutputBuffer,
  635|  16.3k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  636|  16.3k|    #[derive(PartialEq, Eq)]
  637|  16.3k|    enum State {
  638|  16.3k|        Start,
  639|  16.3k|        AfterLanguage,
  640|  16.3k|        AfterExtLang,
  641|  16.3k|        AfterScript,
  642|  16.3k|        AfterRegion,
  643|  16.3k|        InExtension { expected: bool },
  644|  16.3k|        InPrivateUse { expected: bool },
  645|  16.3k|    }
  646|  16.3k|
  647|  16.3k|    let mut state = State::Start;
  648|  16.3k|    let mut language_end = 0;
  649|  16.3k|    let mut extlang_end = 0;
  650|  16.3k|    let mut script_end = 0;
  651|  16.3k|    let mut region_end = 0;
  652|  16.3k|    let mut variant_end = 0;
  653|  16.3k|    let mut extension_end = 0;
  654|  16.3k|    let mut extlangs_count = 0;
  655|  32.2k|    for (subtag, end) in SubTagIterator::new(input) {
  656|  32.2k|        if subtag.is_empty() {
  657|      0|            return Err(LanguageTagParseError {
  658|      0|                kind: TagParseErrorKind::EmptySubtag,
  659|      0|            });
  660|  32.2k|        }
  661|  32.2k|        if subtag.len() > 8 {
  662|    174|            return Err(LanguageTagParseError {
  663|    174|                kind: TagParseErrorKind::SubtagTooLong,
  664|    174|            });
  665|  32.0k|        }
  666|  32.0k|        if state == State::Start {
  667|       |            // Primary language
  668|  16.2k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  669|  1.57k|                return Err(LanguageTagParseError {
  670|  1.57k|                    kind: TagParseErrorKind::InvalidLanguage,
  671|  1.57k|                });
  672|  14.6k|            }
  673|  14.6k|            language_end = end;
  674|  14.6k|            output.extend(to_lowercase(subtag));
  675|  14.6k|            if subtag.len() < 4 {
  676|  7.92k|                // extlangs are only allowed for short language tags
  677|  7.92k|                state = State::AfterLanguage;
  678|  7.92k|            } else {
  679|  6.74k|                state = State::AfterExtLang;
  680|  6.74k|            }
  681|  15.7k|        } else if let State::InPrivateUse { .. } = state {
  682|  2.34k|            if !is_alphanumeric(subtag) {
  683|      0|                return Err(LanguageTagParseError {
  684|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  685|      0|                });
  686|  2.34k|            }
  687|  2.34k|            output.push('-');
  688|  2.34k|            output.extend(to_lowercase(subtag));
  689|  2.34k|            state = State::InPrivateUse { expected: false };
  690|  13.4k|        } else if subtag == "x" || subtag == "X" {
  691|       |            // We make sure extension is found
  692|  2.51k|            if let State::InExtension { expected: true } = state {
  693|    192|                return Err(LanguageTagParseError {
  694|    192|                    kind: TagParseErrorKind::EmptyExtension,
  695|    192|                });
  696|  2.31k|            }
  697|  2.31k|            output.push('-');
  698|  2.31k|            output.push('x');
  699|  2.31k|            state = State::InPrivateUse { expected: true };
  700|  10.9k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  701|       |            // We make sure extension is found
  702|  2.70k|            if let State::InExtension { expected: true } = state {
  703|    292|                return Err(LanguageTagParseError {
  704|    292|                    kind: TagParseErrorKind::EmptyExtension,
  705|    292|                });
  706|  2.41k|            }
  707|  2.41k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  708|  2.41k|            output.push('-');
  709|  2.41k|            output.push(extension_tag);
  710|  2.41k|            state = State::InExtension { expected: true };
  711|  8.22k|        } else if let State::InExtension { .. } = state {
  712|  2.72k|            if !is_alphanumeric(subtag) {
  713|      0|                return Err(LanguageTagParseError {
  714|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  715|      0|                });
  716|  2.72k|            }
  717|  2.72k|            extension_end = end;
  718|  2.72k|            output.push('-');
  719|  2.72k|            output.extend(to_lowercase(subtag));
  720|  2.72k|            state = State::InExtension { expected: false };
  721|  5.50k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  722|    633|            extlangs_count += 1;
  723|    633|            if extlangs_count > 3 {
  724|     92|                return Err(LanguageTagParseError {
  725|     92|                    kind: TagParseErrorKind::TooManyExtlangs,
  726|     92|                });
  727|    541|            }
  728|    541|            // valid extlangs
  729|    541|            extlang_end = end;
  730|    541|            output.push('-');
  731|    541|            output.extend(to_lowercase(subtag));
  732|  4.87k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  733|  4.50k|            && subtag.len() == 4
  734|    232|            && is_alphabetic(subtag)
  735|    232|        {
  736|    232|            // Script
  737|    232|            script_end = end;
  738|    232|            output.push('-');
  739|    232|            output.extend(to_uppercase_first(subtag));
  740|    232|            state = State::AfterScript;
  741|  4.63k|        } else if (state == State::AfterLanguage
  742|    673|            || state == State::AfterExtLang
  743|    371|            || state == State::AfterScript)
  744|  4.35k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  745|    980|                || subtag.len() == 3 && is_numeric(subtag))
  746|  3.37k|        {
  747|  3.37k|            // Region
  748|  3.37k|            region_end = end;
  749|  3.37k|            output.push('-');
  750|  3.37k|            output.extend(to_uppercase(subtag));
  751|  3.37k|            state = State::AfterRegion;
  752|  3.37k|        } else if (state == State::AfterLanguage
  753|    472|            || state == State::AfterExtLang
  754|    363|            || state == State::AfterScript
  755|    280|            || state == State::AfterRegion)
  756|  1.26k|            && is_alphanumeric(subtag)
  757|  1.26k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  758|    334|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  759|    926|        {
  760|    926|            // Variant
  761|    926|            variant_end = end;
  762|    926|            output.push('-');
  763|    926|            output.extend(to_lowercase(subtag));
  764|    926|            state = State::AfterRegion;
  765|    926|        } else {
  766|    334|            return Err(LanguageTagParseError {
  767|    334|                kind: TagParseErrorKind::InvalidSubtag,
  768|    334|            });
  769|       |        }
  770|       |    }
  771|       |
  772|       |    //We make sure we are in a correct final state
  773|  13.7k|    if let State::InExtension { expected: true } = state {
  774|    510|        return Err(LanguageTagParseError {
  775|    510|            kind: TagParseErrorKind::EmptyExtension,
  776|    510|        });
  777|  13.2k|    }
  778|  13.2k|    if let State::InPrivateUse { expected: true } = state {
  779|    136|        return Err(LanguageTagParseError {
  780|    136|            kind: TagParseErrorKind::EmptyPrivateUse,
  781|    136|        });
  782|  13.0k|    }
  783|  13.0k|
  784|  13.0k|    //We make sure we have not skipped anyone
  785|  13.0k|    if extlang_end < language_end {
  786|  12.8k|        extlang_end = language_end;
  787|  12.8k|    }
  788|  13.0k|    if script_end < extlang_end {
  789|  12.9k|        script_end = extlang_end;
  790|  12.9k|    }
  791|  13.0k|    if region_end < script_end {
  792|  9.91k|        region_end = script_end;
  793|  9.91k|    }
  794|  13.0k|    if variant_end < region_end {
  795|  12.1k|        variant_end = region_end;
  796|  12.1k|    }
  797|  13.0k|    if extension_end < variant_end {
  798|  11.7k|        extension_end = variant_end;
  799|  11.7k|    }
  800|       |
  801|  13.0k|    Ok(TagElementsPositions {
  802|  13.0k|        language_end,
  803|  13.0k|        extlang_end,
  804|  13.0k|        script_end,
  805|  13.0k|        region_end,
  806|  13.0k|        variant_end,
  807|  13.0k|        extension_end,
  808|  13.0k|    })
  809|  16.3k|}
_RINvXsr_Cs87w0kKV82sz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECsaAh6yFmIely_5oxrdf:
  571|    232|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvCs87w0kKV82sz_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECsaAh6yFmIely_5oxrdf:
  587|  19.2k|fn parse_language_tag(
  588|  19.2k|    input: &str,
  589|  19.2k|    output: &mut impl OutputBuffer,
  590|  19.2k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  591|       |    //grandfathered tags
  592|  19.2k|    if let Some(tag) = GRANDFATHEREDS
  593|  19.2k|        .iter()
  594|  19.2k|        .find(|record| record.eq_ignore_ascii_case(input))
  595|       |    {
  596|      0|        output.push_str(tag);
  597|      0|        Ok(TagElementsPositions {
  598|      0|            language_end: tag.len(),
  599|      0|            extlang_end: tag.len(),
  600|      0|            script_end: tag.len(),
  601|      0|            region_end: tag.len(),
  602|      0|            variant_end: tag.len(),
  603|      0|            extension_end: tag.len(),
  604|      0|        })
  605|  19.2k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  606|       |        // private use
  607|  2.90k|        if !is_alphanumeric_or_dash(input) {
  608|      0|            Err(LanguageTagParseError {
  609|      0|                kind: TagParseErrorKind::ForbiddenChar,
  610|      0|            })
  611|  2.90k|        } else if input.len() == 2 {
  612|      0|            Err(LanguageTagParseError {
  613|      0|                kind: TagParseErrorKind::EmptyPrivateUse,
  614|      0|            })
  615|       |        } else {
  616|  2.90k|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  617|  2.90k|            Ok(TagElementsPositions {
  618|  2.90k|                language_end: input.len(),
  619|  2.90k|                extlang_end: input.len(),
  620|  2.90k|                script_end: input.len(),
  621|  2.90k|                region_end: input.len(),
  622|  2.90k|                variant_end: input.len(),
  623|  2.90k|                extension_end: input.len(),
  624|  2.90k|            })
  625|       |        }
  626|       |    } else {
  627|  16.3k|        parse_langtag(input, output)
  628|       |    }
  629|  19.2k|}
_RINvXsr_Cs87w0kKV82sz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECsaAh6yFmIely_5oxrdf:
  571|  2.90k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCs87w0kKV82sz_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0CsaAh6yFmIely_5oxrdf:
  594|   501k|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvCs87w0kKV82sz_10oxilangtag12to_uppercaseCsaAh6yFmIely_5oxrdf:
  891|  3.37k|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  892|  3.37k|    s.chars().map(|c| c.to_ascii_uppercase())
  893|  3.37k|}
_RNvXs_NvCs87w0kKV82sz_10oxilangtag13parse_langtagNtB4_5StateNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsaAh6yFmIely_5oxrdf:
  636|  51.2k|    #[derive(PartialEq, Eq)]
_RNvCs87w0kKV82sz_10oxilangtag15is_alphanumericCsaAh6yFmIely_5oxrdf:
  881|  9.03k|fn is_alphanumeric(s: &str) -> bool {
  882|  9.03k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  883|  9.03k|}
_RNvCs87w0kKV82sz_10oxilangtag18to_uppercase_firstCsaAh6yFmIely_5oxrdf:
  897|    232|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  898|    232|    let mut chars = s.chars();
  899|    232|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  900|    232|}
_RNvXsq_Cs87w0kKV82sz_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsaAh6yFmIely_5oxrdf:
  563|  19.6k|    fn push(&mut self, _: char) {}
_RNvCs87w0kKV82sz_10oxilangtag13is_alphabeticCsaAh6yFmIely_5oxrdf:
  871|  19.8k|fn is_alphabetic(s: &str) -> bool {
  872|  19.8k|    s.chars().all(|x| x.is_ascii_alphabetic())
  873|  19.8k|}
_RNvCs87w0kKV82sz_10oxilangtag23is_alphanumeric_or_dashCsaAh6yFmIely_5oxrdf:
  886|  2.90k|fn is_alphanumeric_or_dash(s: &str) -> bool {
  887|  2.90k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  888|  2.90k|}
_RNvCs87w0kKV82sz_10oxilangtag12to_lowercaseCsaAh6yFmIely_5oxrdf:
  903|  21.2k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  904|  21.2k|    s.chars().map(|c| c.to_ascii_lowercase())
  905|  21.2k|}
_RNvCs87w0kKV82sz_10oxilangtag10is_numericCsaAh6yFmIely_5oxrdf:
  876|    298|fn is_numeric(s: &str) -> bool {
  877|    298|    s.chars().all(|x| x.is_ascii_digit())
  878|    298|}
_RNvXsw_Cs87w0kKV82sz_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCsaAh6yFmIely_5oxrdf:
  862|  45.9k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  863|  45.9k|        let tag = self.split.next()?;
  864|  32.2k|        let tag_end = self.position + tag.len();
  865|  32.2k|        self.position = tag_end + 1;
  866|  32.2k|        Some((tag, tag_end))
  867|  45.9k|    }
_RNvMsv_Cs87w0kKV82sz_10oxilangtagNtB5_14SubTagIterator3newCsaAh6yFmIely_5oxrdf:
  850|  16.3k|    fn new(input: &'a str) -> Self {
  851|  16.3k|        Self {
  852|  16.3k|            split: input.split('-'),
  853|  16.3k|            position: 0,
  854|  16.3k|        }
  855|  16.3k|    }
_RNCNvCs87w0kKV82sz_10oxilangtag10is_numeric0B3_:
  877|    298|    s.chars().all(|x| x.is_ascii_digit())
_RNCNvCs87w0kKV82sz_10oxilangtag15is_alphanumeric0B3_:
  882|  20.5k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNvXso_Cs87w0kKV82sz_10oxilangtagNtB5_21LanguageTagParseErrorNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  490|  3.30k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  491|  3.30k|        match self.kind {
  492|       |            TagParseErrorKind::EmptyExtension => {
  493|    994|                write!(f, "If an extension subtag is present, it must not be empty")
  494|       |            }
  495|       |            TagParseErrorKind::EmptyPrivateUse => {
  496|    136|                write!(f, "If the `x` subtag is present, it must not be empty")
  497|       |            }
  498|       |            TagParseErrorKind::ForbiddenChar => {
  499|      0|                write!(f, "The langtag contains a char not allowed")
  500|       |            }
  501|    334|            TagParseErrorKind::InvalidSubtag => write!(
  502|    334|                f,
  503|    334|                "A subtag fails to parse, it does not match any other subtags"
  504|    334|            ),
  505|  1.57k|            TagParseErrorKind::InvalidLanguage => write!(f, "The given language subtag is invalid"),
  506|       |            TagParseErrorKind::SubtagTooLong => {
  507|    174|                write!(f, "A subtag may be eight characters in length at maximum")
  508|       |            }
  509|      0|            TagParseErrorKind::EmptySubtag => write!(f, "A subtag should not be empty"),
  510|       |            TagParseErrorKind::TooManyExtlangs => {
  511|     92|                write!(f, "At maximum three extlangs are allowed")
  512|       |            }
  513|       |        }
  514|  3.30k|    }
_RNCNvCs87w0kKV82sz_10oxilangtag13is_alphabetic0B3_:
  872|  66.5k|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCs87w0kKV82sz_10oxilangtag23is_alphanumeric_or_dash0B3_:
  887|  49.2k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')

_RNvCsbOXESBDtkxG_5oxiri23is_url_query_code_pointCsgLOhukngm62_5oxttl:
 1629|   125k|fn is_url_query_code_point(c: char) -> bool {
 1630|   125k|    is_url_code_point(c)
 1631|  4.60k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1632|   125k|}
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCsgLOhukngm62_5oxttl:
 1092|  35.6k|    fn len(&self) -> usize {
 1093|  35.6k|        self.len
 1094|  35.6k|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCsgLOhukngm62_5oxttl:
 1087|  7.56k|    fn truncate(&mut self, new_len: usize) {
 1088|  7.56k|        self.len = new_len;
 1089|  7.56k|    }
_RNvXs1b_CsbOXESBDtkxG_5oxiriNtB6_16VoidOutputBufferNtNtCs9nhK3FOW46N_4core7default7Default7defaultCsgLOhukngm62_5oxttl:
 1065|  8.92k|#[derive(Default)]
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsgLOhukngm62_5oxttl:
 1072|   437k|    fn push(&mut self, c: char) {
 1073|   437k|        self.len += c.len_utf8();
 1074|   437k|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCsgLOhukngm62_5oxttl:
 1097|  18.2k|    fn as_str(&self) -> &str {
 1098|  18.2k|        ""
 1099|  18.2k|    }
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput4nextCsgLOhukngm62_5oxttl:
 1141|  2.67M|    fn next(&mut self) -> Option<char> {
 1142|  2.67M|        if let Some(head) = self.value.next() {
 1143|  2.34M|            self.position += head.len_utf8();
 1144|  2.34M|            Some(head)
 1145|       |        } else {
 1146|   336k|            None
 1147|       |        }
 1148|  2.67M|    }
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput5frontCsgLOhukngm62_5oxttl:
 1151|   682k|    fn front(&self) -> Option<char> {
 1152|   682k|        self.value.clone().next()
 1153|   682k|    }
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput11starts_withCsgLOhukngm62_5oxttl:
 1156|   236k|    fn starts_with(&self, c: char) -> bool {
 1157|   236k|        self.value.as_str().starts_with(c)
 1158|   236k|    }
_RNvCsbOXESBDtkxG_5oxiri17is_url_code_pointCsgLOhukngm62_5oxttl:
 1584|   755k|fn is_url_code_point(c: char) -> bool {
 1585|   755k|    matches!(c,
 1586|   171k|        'a'..='z'
 1587|   183k|        | 'A'..='Z'
 1588|   176k|        | '0'..='9'
 1589|       |        | '!'
 1590|       |        | '$'
 1591|       |        | '&'
 1592|       |        | '\''
 1593|       |        | '('
 1594|       |        | ')'
 1595|       |        | '*'
 1596|       |        | '+'
 1597|       |        | ','
 1598|       |        | '-'
 1599|       |        | '.'
 1600|       |        | '/'
 1601|       |        | ':'
 1602|       |        | ';'
 1603|       |        | '='
 1604|       |        | '?'
 1605|       |        | '@'
 1606|       |        | '_'
 1607|       |        | '~'
 1608|  14.8k|        | '\u{A0}'..='\u{D7FF}'
 1609|  3.50k|        | '\u{F900}'..='\u{FDCF}'
 1610|  2.72k|        | '\u{FDF0}'..='\u{FFEF}'
 1611|  2.72k|        | '\u{10000}'..='\u{1FFFD}'
 1612|  2.72k|        | '\u{20000}'..='\u{2FFFD}'
 1613|  2.72k|        | '\u{30000}'..='\u{3FFFD}'
 1614|  2.72k|        | '\u{40000}'..='\u{4FFFD}'
 1615|    522|        | '\u{50000}'..='\u{5FFFD}'
 1616|    500|        | '\u{60000}'..='\u{6FFFD}'
 1617|    500|        | '\u{70000}'..='\u{7FFFD}'
 1618|    500|        | '\u{80000}'..='\u{8FFFD}'
 1619|    496|        | '\u{90000}'..='\u{9FFFD}'
 1620|    496|        | '\u{A0000}'..='\u{AFFFD}'
 1621|      2|        | '\u{B0000}'..='\u{BFFFD}'
 1622|      0|        | '\u{C0000}'..='\u{CFFFD}'
 1623|      0|        | '\u{D0000}'..='\u{DFFFD}'
 1624|      0|        | '\u{E1000}'..='\u{EFFFD}'
 1625|       |    )
 1626|   755k|}
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E11parse_queryCsgLOhukngm62_5oxttl:
 1504|  10.3k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1505|   133k|        while let Some(c) = self.input.next() {
 1506|   126k|            if c == '#' {
 1507|  1.03k|                self.output_positions.query_end = self.output.len();
 1508|  1.03k|                self.output.push('#');
 1509|  1.03k|                return self.parse_fragment();
 1510|       |            } else {
 1511|   125k|                self.read_url_query_codepoint_or_echar(c)?
 1512|       |            }
 1513|       |        }
 1514|  7.04k|        self.output_positions.query_end = self.output.len();
 1515|  7.04k|        Ok(())
 1516|  10.3k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb1_E18parse_scheme_startCsgLOhukngm62_5oxttl:
 1199|   114k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|   114k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|    222|                if UNCHECKED {
 1203|    222|                    self.parse_scheme()
 1204|       |                } else {
 1205|      0|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|   110k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|  94.4k|            _ => self.parse_relative(),
 1210|       |        }
 1211|   114k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb1_E10parse_hostCsgLOhukngm62_5oxttl:
 1359|  5.85k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1360|  5.85k|        if self.input.starts_with('[') {
 1361|       |            // IP v6
 1362|    960|            let start_position = self.input.position;
 1363|  20.2k|            while let Some(c) = self.input.next() {
 1364|  19.7k|                self.output.push(c);
 1365|  19.7k|                if c == ']' {
 1366|    734|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1367|    734|                    if !UNCHECKED {
 1368|      0|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1369|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1370|      0|                        }
 1371|    734|                    }
 1372|       |
 1373|    734|                    let c = self.input.next();
 1374|    734|                    return match c {
 1375|       |                        Some(':') => {
 1376|    150|                            self.output.push(':');
 1377|    150|                            self.parse_port()
 1378|       |                        }
 1379|       |                        None | Some('/') | Some('?') | Some('#') => {
 1380|    347|                            self.output_positions.authority_end = self.output.len();
 1381|    347|                            self.parse_path_start(c)
 1382|       |                        }
 1383|    237|                        Some(c) => {
 1384|    237|                            if UNCHECKED {
 1385|    237|                                self.output.push(c);
 1386|    237|                                continue;
 1387|       |                            } else {
 1388|      0|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1389|       |                            }
 1390|       |                        }
 1391|       |                    };
 1392|  19.0k|                }
 1393|       |            }
 1394|    463|            if UNCHECKED {
 1395|       |                // We consider it's valid even if it's not finished
 1396|    463|                self.output_positions.authority_end = self.output.len();
 1397|    463|                self.parse_path_start(None)
 1398|       |            } else {
 1399|      0|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1400|       |            }
 1401|       |        } else {
 1402|       |            // Other host
 1403|  49.2k|            loop {
 1404|  49.2k|                let c = self.input.next();
 1405|  49.2k|                match c {
 1406|       |                    Some(':') => {
 1407|    970|                        self.output.push(':');
 1408|    970|                        return self.parse_port();
 1409|       |                    }
 1410|       |                    None | Some('/') | Some('?') | Some('#') => {
 1411|  3.92k|                        self.output_positions.authority_end = self.output.len();
 1412|  3.92k|                        return self.parse_path_start(c);
 1413|       |                    }
 1414|  44.4k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1415|       |                }
 1416|       |            }
 1417|       |        }
 1418|  5.85k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb1_E19remove_last_segmentCsgLOhukngm62_5oxttl:
 1525|   123k|    fn remove_last_segment(&mut self) {
 1526|   123k|        let last_slash_position = self.output.as_str()[self.output_positions.authority_end..]
 1527|   123k|            .rfind('/')
 1528|   123k|            .unwrap_or(0);
 1529|   123k|        self.output
 1530|   123k|            .truncate(last_slash_position + self.output_positions.authority_end)
 1531|   123k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE15parse_uncheckedCsgLOhukngm62_5oxttl:
   70|  8.92k|    pub fn parse_unchecked(iri: T) -> Self {
   71|  8.92k|        let positions =
   72|  8.92k|            IriParser::<_, true>::parse(&iri, None, &mut VoidOutputBuffer::default()).unwrap();
   73|  8.92k|        Self { iri, positions }
   74|  8.92k|    }
_RNvXsg_CsbOXESBDtkxG_5oxiriINtB5_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringENtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsgLOhukngm62_5oxttl:
  417|  32.0k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  418|  32.0k|        self.iri.fmt(f)
  419|  32.0k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb1_E5parseCsgLOhukngm62_5oxttl:
 1174|   114k|    fn parse(
 1175|   114k|        iri: &'a str,
 1176|   114k|        base: Option<IriRef<&'a str>>,
 1177|   114k|        output: &'a mut O,
 1178|   114k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|   114k|        let mut parser = Self {
 1180|   114k|            iri,
 1181|   114k|            base,
 1182|   114k|            input: ParserInput {
 1183|   114k|                value: iri.chars(),
 1184|   114k|                position: 0,
 1185|   114k|            },
 1186|   114k|            output,
 1187|   114k|            output_positions: IriElementsPositions {
 1188|   114k|                scheme_end: 0,
 1189|   114k|                authority_end: 0,
 1190|   114k|                path_end: 0,
 1191|   114k|                query_end: 0,
 1192|   114k|            },
 1193|   114k|            input_scheme_end: 0,
 1194|   114k|        };
 1195|   114k|        parser.parse_scheme_start()?;
 1196|   114k|        Ok(parser.output_positions)
 1197|   114k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb1_E14parse_fragmentCsgLOhukngm62_5oxttl:
 1518|  3.18k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1519|  40.4k|        while let Some(c) = self.input.next() {
 1520|  37.2k|            self.read_url_codepoint_or_echar(c)?
 1521|       |        }
 1522|  3.18k|        Ok(())
 1523|  3.18k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb1_E15parse_authorityCsgLOhukngm62_5oxttl:
 1335|  5.85k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1336|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1337|  52.0k|        loop {
 1338|  52.0k|            let c = self.input.next();
 1339|  52.0k|            match c {
 1340|       |                Some('@') => {
 1341|    265|                    self.output.push('@');
 1342|    265|                    return self.parse_host();
 1343|       |                }
 1344|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1345|  5.58k|                    self.input = ParserInput {
 1346|  5.58k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1347|  5.58k|                        position: self.input_scheme_end + 2,
 1348|  5.58k|                    };
 1349|  5.58k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1350|  5.58k|                    return self.parse_host();
 1351|       |                }
 1352|  46.2k|                Some(c) => {
 1353|  46.2k|                    self.read_url_codepoint_or_echar(c)?;
 1354|       |                }
 1355|       |            }
 1356|       |        }
 1357|  5.85k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E27read_url_codepoint_or_echarCsgLOhukngm62_5oxttl:
 1534|   630k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1535|   630k|        if UNCHECKED || is_url_code_point(c) {
 1536|   609k|            self.output.push(c);
 1537|   609k|            Ok(())
 1538|  20.8k|        } else if c == '%' {
 1539|  3.03k|            self.read_echar()
 1540|       |        } else {
 1541|  17.8k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1542|       |        }
 1543|   630k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE4pathCsgLOhukngm62_5oxttl:
  717|  4.52k|    pub fn path(&self) -> &str {
  718|  4.52k|        self.0.path()
  719|  4.52k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E23parse_path_or_authorityCsgLOhukngm62_5oxttl:
 1245|  8.08k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|  8.08k|        if self.input.starts_with('/') {
 1247|  7.76k|            self.input.next();
 1248|  7.76k|            self.output.push('/');
 1249|  7.76k|            self.parse_authority()
 1250|       |        } else {
 1251|    315|            self.output_positions.authority_end = self.output.len() - 1;
 1252|    315|            self.parse_path()
 1253|       |        }
 1254|  8.08k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E16parse_path_startCsgLOhukngm62_5oxttl:
 1439|  7.76k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1440|  7.76k|        match c {
 1441|       |            None => {
 1442|  1.64k|                self.output_positions.path_end = self.output.len();
 1443|  1.64k|                self.output_positions.query_end = self.output.len();
 1444|  1.64k|                Ok(())
 1445|       |            }
 1446|       |            Some('?') => {
 1447|    265|                self.output_positions.path_end = self.output.len();
 1448|    265|                self.output.push('?');
 1449|    265|                self.parse_query()
 1450|       |            }
 1451|       |            Some('#') => {
 1452|    297|                self.output_positions.path_end = self.output.len();
 1453|    297|                self.output_positions.query_end = self.output.len();
 1454|    297|                self.output.push('#');
 1455|    297|                self.parse_fragment()
 1456|       |            }
 1457|       |            Some('/') => {
 1458|  5.56k|                self.output.push('/');
 1459|  5.56k|                self.parse_path()
 1460|       |            }
 1461|      0|            Some(c) => {
 1462|      0|                self.read_url_codepoint_or_echar(c)?;
 1463|      0|                self.parse_path()
 1464|       |            }
 1465|       |        }
 1466|  7.76k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb1_E11parse_queryCsgLOhukngm62_5oxttl:
 1504|  5.40k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1505|  80.5k|        while let Some(c) = self.input.next() {
 1506|  75.6k|            if c == '#' {
 1507|    548|                self.output_positions.query_end = self.output.len();
 1508|    548|                self.output.push('#');
 1509|    548|                return self.parse_fragment();
 1510|       |            } else {
 1511|  75.1k|                self.read_url_query_codepoint_or_echar(c)?
 1512|       |            }
 1513|       |        }
 1514|  4.85k|        self.output_positions.query_end = self.output.len();
 1515|  4.85k|        Ok(())
 1516|  5.40k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb1_E20parse_relative_slashCsgLOhukngm62_5oxttl:
 1317|  56.0k|    fn parse_relative_slash(&mut self, base: &IriRef<&'a str>) -> Result<(), IriParseError> {
 1318|  56.0k|        if self.input.starts_with('/') {
 1319|  3.33k|            self.input.next();
 1320|  3.33k|            self.output.push_str(&base.iri[..base.positions.scheme_end]);
 1321|  3.33k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1322|  3.33k|            self.output.push('/');
 1323|  3.33k|            self.output.push('/');
 1324|  3.33k|            self.parse_authority()
 1325|       |        } else {
 1326|  52.7k|            self.output
 1327|  52.7k|                .push_str(&base.iri[..base.positions.authority_end]);
 1328|  52.7k|            self.output.push('/');
 1329|  52.7k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1330|  52.7k|            self.output_positions.authority_end = base.positions.authority_end;
 1331|  52.7k|            self.parse_path()
 1332|       |        }
 1333|  56.0k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE6as_strCsgLOhukngm62_5oxttl:
  651|  3.03k|    pub fn as_str(&self) -> &str {
  652|  3.03k|        self.0.as_str()
  653|  3.03k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E23parse_path_or_authorityCsgLOhukngm62_5oxttl:
 1245|  5.89k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|  5.89k|        if self.input.starts_with('/') {
 1247|  5.04k|            self.input.next();
 1248|  5.04k|            self.output.push('/');
 1249|  5.04k|            self.parse_authority()
 1250|       |        } else {
 1251|    848|            self.output_positions.authority_end = self.output.len() - 1;
 1252|    848|            self.parse_path()
 1253|       |        }
 1254|  5.89k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E16parse_path_startCsgLOhukngm62_5oxttl:
 1439|  7.50k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1440|  7.50k|        match c {
 1441|       |            None => {
 1442|  5.18k|                self.output_positions.path_end = self.output.len();
 1443|  5.18k|                self.output_positions.query_end = self.output.len();
 1444|  5.18k|                Ok(())
 1445|       |            }
 1446|       |            Some('?') => {
 1447|    382|                self.output_positions.path_end = self.output.len();
 1448|    382|                self.output.push('?');
 1449|    382|                self.parse_query()
 1450|       |            }
 1451|       |            Some('#') => {
 1452|    874|                self.output_positions.path_end = self.output.len();
 1453|    874|                self.output_positions.query_end = self.output.len();
 1454|    874|                self.output.push('#');
 1455|    874|                self.parse_fragment()
 1456|       |            }
 1457|       |            Some('/') => {
 1458|  1.06k|                self.output.push('/');
 1459|  1.06k|                self.parse_path()
 1460|       |            }
 1461|      0|            Some(c) => {
 1462|      0|                self.read_url_codepoint_or_echar(c)?;
 1463|      0|                self.parse_path()
 1464|       |            }
 1465|       |        }
 1466|  7.50k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_hostCsgLOhukngm62_5oxttl:
 1359|  7.76k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1360|  7.76k|        if self.input.starts_with('[') {
 1361|       |            // IP v6
 1362|    293|            let start_position = self.input.position;
 1363|  8.18k|            while let Some(c) = self.input.next() {
 1364|  8.15k|                self.output.push(c);
 1365|  8.15k|                if c == ']' {
 1366|    281|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1367|    281|                    if !UNCHECKED {
 1368|      0|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1369|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1370|      0|                        }
 1371|    281|                    }
 1372|       |
 1373|    281|                    let c = self.input.next();
 1374|    281|                    return match c {
 1375|       |                        Some(':') => {
 1376|     48|                            self.output.push(':');
 1377|     48|                            self.parse_port()
 1378|       |                        }
 1379|       |                        None | Some('/') | Some('?') | Some('#') => {
 1380|    219|                            self.output_positions.authority_end = self.output.len();
 1381|    219|                            self.parse_path_start(c)
 1382|       |                        }
 1383|     14|                        Some(c) => {
 1384|     14|                            if UNCHECKED {
 1385|     14|                                self.output.push(c);
 1386|     14|                                continue;
 1387|       |                            } else {
 1388|      0|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1389|       |                            }
 1390|       |                        }
 1391|       |                    };
 1392|  7.87k|                }
 1393|       |            }
 1394|     26|            if UNCHECKED {
 1395|       |                // We consider it's valid even if it's not finished
 1396|     26|                self.output_positions.authority_end = self.output.len();
 1397|     26|                self.parse_path_start(None)
 1398|       |            } else {
 1399|      0|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1400|       |            }
 1401|       |        } else {
 1402|       |            // Other host
 1403|  84.4k|            loop {
 1404|  84.4k|                let c = self.input.next();
 1405|  84.4k|                match c {
 1406|       |                    Some(':') => {
 1407|    686|                        self.output.push(':');
 1408|    686|                        return self.parse_port();
 1409|       |                    }
 1410|       |                    None | Some('/') | Some('?') | Some('#') => {
 1411|  6.78k|                        self.output_positions.authority_end = self.output.len();
 1412|  6.78k|                        return self.parse_path_start(c);
 1413|       |                    }
 1414|  76.9k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1415|       |                }
 1416|       |            }
 1417|       |        }
 1418|  7.76k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E5parseCsgLOhukngm62_5oxttl:
 1174|   231k|    fn parse(
 1175|   231k|        iri: &'a str,
 1176|   231k|        base: Option<IriRef<&'a str>>,
 1177|   231k|        output: &'a mut O,
 1178|   231k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|   231k|        let mut parser = Self {
 1180|   231k|            iri,
 1181|   231k|            base,
 1182|   231k|            input: ParserInput {
 1183|   231k|                value: iri.chars(),
 1184|   231k|                position: 0,
 1185|   231k|            },
 1186|   231k|            output,
 1187|   231k|            output_positions: IriElementsPositions {
 1188|   231k|                scheme_end: 0,
 1189|   231k|                authority_end: 0,
 1190|   231k|                path_end: 0,
 1191|   231k|                query_end: 0,
 1192|   231k|            },
 1193|   231k|            input_scheme_end: 0,
 1194|   231k|        };
 1195|   231k|        parser.parse_scheme_start()?;
 1196|   207k|        Ok(parser.output_positions)
 1197|   231k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E15parse_authorityCsgLOhukngm62_5oxttl:
 1335|  11.7k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1336|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1337|  89.4k|        loop {
 1338|  89.4k|            let c = self.input.next();
 1339|  89.4k|            match c {
 1340|       |                Some('@') => {
 1341|    496|                    self.output.push('@');
 1342|    496|                    return self.parse_host();
 1343|       |                }
 1344|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1345|  9.31k|                    self.input = ParserInput {
 1346|  9.31k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1347|  9.31k|                        position: self.input_scheme_end + 2,
 1348|  9.31k|                    };
 1349|  9.31k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1350|  9.31k|                    return self.parse_host();
 1351|       |                }
 1352|  79.6k|                Some(c) => {
 1353|  79.6k|                    self.read_url_codepoint_or_echar(c)?;
 1354|       |                }
 1355|       |            }
 1356|       |        }
 1357|  11.7k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E14parse_fragmentCsgLOhukngm62_5oxttl:
 1518|  5.92k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1519|  57.6k|        while let Some(c) = self.input.next() {
 1520|  53.4k|            self.read_url_codepoint_or_echar(c)?
 1521|       |        }
 1522|  4.21k|        Ok(())
 1523|  5.92k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE17resolve_uncheckedCsgLOhukngm62_5oxttl:
  597|   114k|    pub fn resolve_unchecked(&self, iri: &str) -> Iri<String> {
  598|   114k|        Iri(self.0.resolve_unchecked(iri))
  599|   114k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E33read_url_query_codepoint_or_echarCsgLOhukngm62_5oxttl:
 1546|  85.2k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1547|  85.2k|        if UNCHECKED || is_url_query_code_point(c) {
 1548|  85.2k|            self.output.push(c);
 1549|  85.2k|            Ok(())
 1550|      0|        } else if c == '%' {
 1551|      0|            self.read_echar()
 1552|       |        } else {
 1553|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1554|       |        }
 1555|  85.2k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E5parseCsgLOhukngm62_5oxttl:
 1174|  8.92k|    fn parse(
 1175|  8.92k|        iri: &'a str,
 1176|  8.92k|        base: Option<IriRef<&'a str>>,
 1177|  8.92k|        output: &'a mut O,
 1178|  8.92k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|  8.92k|        let mut parser = Self {
 1180|  8.92k|            iri,
 1181|  8.92k|            base,
 1182|  8.92k|            input: ParserInput {
 1183|  8.92k|                value: iri.chars(),
 1184|  8.92k|                position: 0,
 1185|  8.92k|            },
 1186|  8.92k|            output,
 1187|  8.92k|            output_positions: IriElementsPositions {
 1188|  8.92k|                scheme_end: 0,
 1189|  8.92k|                authority_end: 0,
 1190|  8.92k|                path_end: 0,
 1191|  8.92k|                query_end: 0,
 1192|  8.92k|            },
 1193|  8.92k|            input_scheme_end: 0,
 1194|  8.92k|        };
 1195|  8.92k|        parser.parse_scheme_start()?;
 1196|  8.92k|        Ok(parser.output_positions)
 1197|  8.92k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E33read_url_query_codepoint_or_echarCsgLOhukngm62_5oxttl:
 1546|   125k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1547|   125k|        if UNCHECKED || is_url_query_code_point(c) {
 1548|   121k|            self.output.push(c);
 1549|   121k|            Ok(())
 1550|  3.28k|        } else if c == '%' {
 1551|  1.63k|            self.read_echar()
 1552|       |        } else {
 1553|  1.65k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1554|       |        }
 1555|   125k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE4pathCsgLOhukngm62_5oxttl:
  258|  4.52k|    pub fn path(&self) -> &str {
  259|  4.52k|        &self.iri[self.positions.authority_end..self.positions.path_end]
  260|  4.52k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE6as_refCsgLOhukngm62_5oxttl:
  154|   346k|    pub fn as_ref(&self) -> IriRef<&str> {
  155|   346k|        IriRef {
  156|   346k|            iri: &self.iri,
  157|   346k|            positions: self.positions,
  158|   346k|        }
  159|   346k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb1_E23parse_path_or_authorityCsgLOhukngm62_5oxttl:
 1245|  2.93k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|  2.93k|        if self.input.starts_with('/') {
 1247|  2.51k|            self.input.next();
 1248|  2.51k|            self.output.push('/');
 1249|  2.51k|            self.parse_authority()
 1250|       |        } else {
 1251|    422|            self.output_positions.authority_end = self.output.len() - 1;
 1252|    422|            self.parse_path()
 1253|       |        }
 1254|  2.93k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E11parse_queryCsgLOhukngm62_5oxttl:
 1504|  1.59k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1505|  86.8k|        while let Some(c) = self.input.next() {
 1506|  85.4k|            if c == '#' {
 1507|    220|                self.output_positions.query_end = self.output.len();
 1508|    220|                self.output.push('#');
 1509|    220|                return self.parse_fragment();
 1510|       |            } else {
 1511|  85.2k|                self.read_url_query_codepoint_or_echar(c)?
 1512|       |            }
 1513|       |        }
 1514|  1.37k|        self.output_positions.query_end = self.output.len();
 1515|  1.37k|        Ok(())
 1516|  1.59k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE7resolveCsgLOhukngm62_5oxttl:
   89|   231k|    pub fn resolve(&self, iri: &str) -> Result<IriRef<String>, IriParseError> {
   90|   231k|        let mut target_buffer = String::with_capacity(self.iri.len() + iri.len());
   91|   231k|        let positions = IriParser::<_, false>::parse(iri, Some(self.as_ref()), &mut target_buffer)?;
   92|   207k|        Ok(IriRef {
   93|   207k|            iri: target_buffer,
   94|   207k|            positions,
   95|   207k|        })
   96|   231k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb1_E16parse_path_startCsgLOhukngm62_5oxttl:
 1439|  5.85k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1440|  5.85k|        match c {
 1441|       |            None => {
 1442|  3.86k|                self.output_positions.path_end = self.output.len();
 1443|  3.86k|                self.output_positions.query_end = self.output.len();
 1444|  3.86k|                Ok(())
 1445|       |            }
 1446|       |            Some('?') => {
 1447|    253|                self.output_positions.path_end = self.output.len();
 1448|    253|                self.output.push('?');
 1449|    253|                self.parse_query()
 1450|       |            }
 1451|       |            Some('#') => {
 1452|    563|                self.output_positions.path_end = self.output.len();
 1453|    563|                self.output_positions.query_end = self.output.len();
 1454|    563|                self.output.push('#');
 1455|    563|                self.parse_fragment()
 1456|       |            }
 1457|       |            Some('/') => {
 1458|  1.17k|                self.output.push('/');
 1459|  1.17k|                self.parse_path()
 1460|       |            }
 1461|      0|            Some(c) => {
 1462|      0|                self.read_url_codepoint_or_echar(c)?;
 1463|      0|                self.parse_path()
 1464|       |            }
 1465|       |        }
 1466|  5.85k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb1_E14parse_relativeCsgLOhukngm62_5oxttl:
 1256|   108k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1257|   108k|        if let Some(base) = self.base {
 1258|   108k|            match self.input.front() {
 1259|       |                None => {
 1260|  4.34k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1261|  4.34k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1262|  4.34k|                    self.output_positions.authority_end = base.positions.authority_end;
 1263|  4.34k|                    self.output_positions.path_end = base.positions.path_end;
 1264|  4.34k|                    self.output_positions.query_end = base.positions.query_end;
 1265|  4.34k|                    Ok(())
 1266|       |                }
 1267|       |                Some('/') => {
 1268|  56.0k|                    self.input.next();
 1269|  56.0k|                    self.parse_relative_slash(&base)
 1270|       |                }
 1271|       |                Some('?') => {
 1272|  3.69k|                    self.input.next();
 1273|  3.69k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1274|  3.69k|                    self.output.push('?');
 1275|  3.69k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1276|  3.69k|                    self.output_positions.authority_end = base.positions.authority_end;
 1277|  3.69k|                    self.output_positions.path_end = base.positions.path_end;
 1278|  3.69k|                    self.parse_query()
 1279|       |                }
 1280|       |                Some('#') => {
 1281|    537|                    self.input.next();
 1282|    537|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1283|    537|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1284|    537|                    self.output_positions.authority_end = base.positions.authority_end;
 1285|    537|                    self.output_positions.path_end = base.positions.path_end;
 1286|    537|                    self.output_positions.query_end = base.positions.query_end;
 1287|    537|                    self.output.push('#');
 1288|    537|                    self.parse_fragment()
 1289|       |                }
 1290|       |                _ => {
 1291|  43.9k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1292|  43.9k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1293|  43.9k|                    self.output_positions.authority_end = base.positions.authority_end;
 1294|  43.9k|                    self.output_positions.path_end = base.positions.path_end;
 1295|  43.9k|                    self.remove_last_segment();
 1296|  43.9k|                    if self.output.len() > base.positions.scheme_end {
 1297|  42.9k|                        // We have some path or authority, we keep a base '/'
 1298|  42.9k|                        self.output.push('/');
 1299|  42.9k|                    }
 1300|  43.9k|                    self.parse_path()
 1301|       |                }
 1302|       |            }
 1303|       |        } else {
 1304|      0|            self.output_positions.scheme_end = 0;
 1305|      0|            self.input_scheme_end = 0;
 1306|      0|            if self.input.starts_with('/') {
 1307|      0|                self.input.next();
 1308|      0|                self.output.push('/');
 1309|      0|                self.parse_path_or_authority()
 1310|       |            } else {
 1311|      0|                self.output_positions.authority_end = 0;
 1312|      0|                self.parse_path()
 1313|       |            }
 1314|       |        }
 1315|   108k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E27read_url_codepoint_or_echarCsgLOhukngm62_5oxttl:
 1534|   267k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1535|   267k|        if UNCHECKED || is_url_code_point(c) {
 1536|   267k|            self.output.push(c);
 1537|   267k|            Ok(())
 1538|      0|        } else if c == '%' {
 1539|      0|            self.read_echar()
 1540|       |        } else {
 1541|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1542|       |        }
 1543|   267k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb1_E10parse_pathCsgLOhukngm62_5oxttl:
 1468|   101k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1469|   436k|        loop {
 1470|   436k|            let c = self.input.next();
 1471|   436k|            match c {
 1472|       |                None | Some('/') | Some('?') | Some('#') => {
 1473|   139k|                    if self.output.as_str().ends_with("/..") {
 1474|    258|                        self.remove_last_segment();
 1475|    258|                        self.remove_last_segment();
 1476|    258|                        self.output.push('/');
 1477|   139k|                    } else if self.output.as_str().ends_with("/.") {
 1478|  78.5k|                        self.remove_last_segment();
 1479|  78.5k|                        self.output.push('/');
 1480|  78.5k|                    } else if c == Some('/') {
 1481|  37.6k|                        self.output.push('/');
 1482|  37.6k|                    }
 1483|       |
 1484|   139k|                    if c == Some('?') {
 1485|  1.46k|                        self.output_positions.path_end = self.output.len();
 1486|  1.46k|                        self.output.push('?');
 1487|  1.46k|                        return self.parse_query();
 1488|   137k|                    } else if c == Some('#') {
 1489|  1.54k|                        self.output_positions.path_end = self.output.len();
 1490|  1.54k|                        self.output_positions.query_end = self.output.len();
 1491|  1.54k|                        self.output.push('#');
 1492|  1.54k|                        return self.parse_fragment();
 1493|   136k|                    } else if c.is_none() {
 1494|  98.5k|                        self.output_positions.path_end = self.output.len();
 1495|  98.5k|                        self.output_positions.query_end = self.output.len();
 1496|  98.5k|                        return Ok(());
 1497|  37.8k|                    }
 1498|       |                }
 1499|   296k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1500|       |            }
 1501|       |        }
 1502|   101k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE7resolveCsgLOhukngm62_5oxttl:
  584|   231k|    pub fn resolve(&self, iri: &str) -> Result<Iri<String>, IriParseError> {
  585|   231k|        Ok(Iri(self.0.resolve(iri)?))
  586|   231k|    }
_RNvXsL_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringENtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsgLOhukngm62_5oxttl:
  896|  32.0k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  897|  32.0k|        self.0.fmt(f)
  898|  32.0k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb1_E12parse_schemeCsgLOhukngm62_5oxttl:
 1213|  20.2k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|  81.3k|        loop {
 1215|  81.3k|            let c = self.input.next();
 1216|  78.9k|            match c {
 1217|  78.9k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|  61.0k|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|  6.20k|                    self.output.push(':');
 1222|  6.20k|                    self.output_positions.scheme_end = self.output.len();
 1223|  6.20k|                    self.input_scheme_end = self.input.position;
 1224|  6.20k|                    return if self.input.starts_with('/') {
 1225|  2.93k|                        self.input.next();
 1226|  2.93k|                        self.output.push('/');
 1227|  2.93k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  3.26k|                        self.output_positions.authority_end = self.output.len();
 1230|  3.26k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|  14.0k|                    self.input = ParserInput {
 1235|  14.0k|                        value: self.iri.chars(),
 1236|  14.0k|                        position: 0,
 1237|  14.0k|                    }; // reset
 1238|  14.0k|                    self.output.clear();
 1239|  14.0k|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|  20.2k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE6as_strCsgLOhukngm62_5oxttl:
  171|  3.03k|    pub fn as_str(&self) -> &str {
  172|  3.03k|        &self.iri
  173|  3.03k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb1_E10parse_portCsgLOhukngm62_5oxttl:
 1420|  1.12k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1421|  3.60k|        loop {
 1422|  3.60k|            let c = self.input.next();
 1423|  3.60k|            match c {
 1424|       |                Some('/') | Some('?') | Some('#') | None => {
 1425|  1.12k|                    self.output_positions.authority_end = self.output.len();
 1426|  1.12k|                    return self.parse_path_start(c);
 1427|       |                }
 1428|  2.48k|                Some(c) => {
 1429|  2.48k|                    if UNCHECKED || c.is_ascii_digit() {
 1430|  2.48k|                        self.output.push(c)
 1431|       |                    } else {
 1432|      0|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1433|       |                    }
 1434|       |                }
 1435|       |            }
 1436|       |        }
 1437|  1.12k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E18parse_scheme_startCsgLOhukngm62_5oxttl:
 1199|  8.92k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|  8.92k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|      4|                if UNCHECKED {
 1203|      4|                    self.parse_scheme()
 1204|       |                } else {
 1205|      0|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|  8.91k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|      0|            _ => self.parse_relative(),
 1210|       |        }
 1211|  8.92k|    }
_RINvMs11_CsbOXESBDtkxG_5oxiriINtB7_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E11parse_erroruECsgLOhukngm62_5oxttl:
 1578|  24.0k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1579|  24.0k|        Err(IriParseError { kind })
 1580|  24.0k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb1_E33read_url_query_codepoint_or_echarCsgLOhukngm62_5oxttl:
 1546|  75.1k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1547|  75.1k|        if UNCHECKED || is_url_query_code_point(c) {
 1548|  75.1k|            self.output.push(c);
 1549|  75.1k|            Ok(())
 1550|      0|        } else if c == '%' {
 1551|      0|            self.read_echar()
 1552|       |        } else {
 1553|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1554|       |        }
 1555|  75.1k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E18parse_scheme_startCsgLOhukngm62_5oxttl:
 1199|   231k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|   231k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|    444|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|    444|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|   222k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|   190k|            _ => self.parse_relative(),
 1210|       |        }
 1211|   231k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E10parse_hostCsgLOhukngm62_5oxttl:
 1359|  9.81k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1360|  9.81k|        if self.input.starts_with('[') {
 1361|       |            // IP v6
 1362|  1.91k|            let start_position = self.input.position;
 1363|  38.3k|            while let Some(c) = self.input.next() {
 1364|  37.9k|                self.output.push(c);
 1365|  37.9k|                if c == ']' {
 1366|  1.45k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1367|  1.45k|                    if !UNCHECKED {
 1368|  1.45k|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1369|  1.45k|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1370|      0|                        }
 1371|      0|                    }
 1372|       |
 1373|      0|                    let c = self.input.next();
 1374|      0|                    return match c {
 1375|       |                        Some(':') => {
 1376|      0|                            self.output.push(':');
 1377|      0|                            self.parse_port()
 1378|       |                        }
 1379|       |                        None | Some('/') | Some('?') | Some('#') => {
 1380|      0|                            self.output_positions.authority_end = self.output.len();
 1381|      0|                            self.parse_path_start(c)
 1382|       |                        }
 1383|      0|                        Some(c) => {
 1384|      0|                            if UNCHECKED {
 1385|      0|                                self.output.push(c);
 1386|      0|                                continue;
 1387|       |                            } else {
 1388|      0|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1389|       |                            }
 1390|       |                        }
 1391|       |                    };
 1392|  36.4k|                }
 1393|       |            }
 1394|    460|            if UNCHECKED {
 1395|       |                // We consider it's valid even if it's not finished
 1396|      0|                self.output_positions.authority_end = self.output.len();
 1397|      0|                self.parse_path_start(None)
 1398|       |            } else {
 1399|    460|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1400|       |            }
 1401|       |        } else {
 1402|       |            // Other host
 1403|  60.6k|            loop {
 1404|  60.6k|                let c = self.input.next();
 1405|  60.6k|                match c {
 1406|       |                    Some(':') => {
 1407|  1.44k|                        self.output.push(':');
 1408|  1.44k|                        return self.parse_port();
 1409|       |                    }
 1410|       |                    None | Some('/') | Some('?') | Some('#') => {
 1411|  6.25k|                        self.output_positions.authority_end = self.output.len();
 1412|  6.25k|                        return self.parse_path_start(c);
 1413|       |                    }
 1414|  52.9k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1415|       |                }
 1416|       |            }
 1417|       |        }
 1418|  9.81k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E19remove_last_segmentCsgLOhukngm62_5oxttl:
 1525|   240k|    fn remove_last_segment(&mut self) {
 1526|   240k|        let last_slash_position = self.output.as_str()[self.output_positions.authority_end..]
 1527|   240k|            .rfind('/')
 1528|   240k|            .unwrap_or(0);
 1529|   240k|        self.output
 1530|   240k|            .truncate(last_slash_position + self.output_positions.authority_end)
 1531|   240k|    }
_RNCNvMs11_CsbOXESBDtkxG_5oxiriINtB8_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E10read_echar0CsgLOhukngm62_5oxttl:
 1561|  4.09k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E14parse_fragmentCsgLOhukngm62_5oxttl:
 1518|  1.22k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1519|  48.1k|        while let Some(c) = self.input.next() {
 1520|  46.9k|            self.read_url_codepoint_or_echar(c)?
 1521|       |        }
 1522|  1.22k|        Ok(())
 1523|  1.22k|    }
_RNCNvMs11_CsbOXESBDtkxG_5oxiriINtB8_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E10read_echars_0CsgLOhukngm62_5oxttl:
 1562|  2.83k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E15parse_authorityCsgLOhukngm62_5oxttl:
 1335|  7.76k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1336|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1337|  87.8k|        loop {
 1338|  87.8k|            let c = self.input.next();
 1339|  87.8k|            match c {
 1340|       |                Some('@') => {
 1341|    199|                    self.output.push('@');
 1342|    199|                    return self.parse_host();
 1343|       |                }
 1344|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1345|  7.56k|                    self.input = ParserInput {
 1346|  7.56k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1347|  7.56k|                        position: self.input_scheme_end + 2,
 1348|  7.56k|                    };
 1349|  7.56k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1350|  7.56k|                    return self.parse_host();
 1351|       |                }
 1352|  80.1k|                Some(c) => {
 1353|  80.1k|                    self.read_url_codepoint_or_echar(c)?;
 1354|       |                }
 1355|       |            }
 1356|       |        }
 1357|  7.76k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E14parse_relativeCsgLOhukngm62_5oxttl:
 1256|   218k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1257|   218k|        if let Some(base) = self.base {
 1258|   218k|            match self.input.front() {
 1259|       |                None => {
 1260|  8.74k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1261|  8.74k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1262|  8.74k|                    self.output_positions.authority_end = base.positions.authority_end;
 1263|  8.74k|                    self.output_positions.path_end = base.positions.path_end;
 1264|  8.74k|                    self.output_positions.query_end = base.positions.query_end;
 1265|  8.74k|                    Ok(())
 1266|       |                }
 1267|       |                Some('/') => {
 1268|   112k|                    self.input.next();
 1269|   112k|                    self.parse_relative_slash(&base)
 1270|       |                }
 1271|       |                Some('?') => {
 1272|  7.40k|                    self.input.next();
 1273|  7.40k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1274|  7.40k|                    self.output.push('?');
 1275|  7.40k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1276|  7.40k|                    self.output_positions.authority_end = base.positions.authority_end;
 1277|  7.40k|                    self.output_positions.path_end = base.positions.path_end;
 1278|  7.40k|                    self.parse_query()
 1279|       |                }
 1280|       |                Some('#') => {
 1281|  1.21k|                    self.input.next();
 1282|  1.21k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1283|  1.21k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1284|  1.21k|                    self.output_positions.authority_end = base.positions.authority_end;
 1285|  1.21k|                    self.output_positions.path_end = base.positions.path_end;
 1286|  1.21k|                    self.output_positions.query_end = base.positions.query_end;
 1287|  1.21k|                    self.output.push('#');
 1288|  1.21k|                    self.parse_fragment()
 1289|       |                }
 1290|       |                _ => {
 1291|  88.7k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1292|  88.7k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1293|  88.7k|                    self.output_positions.authority_end = base.positions.authority_end;
 1294|  88.7k|                    self.output_positions.path_end = base.positions.path_end;
 1295|  88.7k|                    self.remove_last_segment();
 1296|  88.7k|                    if self.output.len() > base.positions.scheme_end {
 1297|  86.7k|                        // We have some path or authority, we keep a base '/'
 1298|  86.7k|                        self.output.push('/');
 1299|  86.7k|                    }
 1300|  88.7k|                    self.parse_path()
 1301|       |                }
 1302|       |            }
 1303|       |        } else {
 1304|      0|            self.output_positions.scheme_end = 0;
 1305|      0|            self.input_scheme_end = 0;
 1306|      0|            if self.input.starts_with('/') {
 1307|      0|                self.input.next();
 1308|      0|                self.output.push('/');
 1309|      0|                self.parse_path_or_authority()
 1310|       |            } else {
 1311|      0|                self.output_positions.authority_end = 0;
 1312|      0|                self.parse_path()
 1313|       |            }
 1314|       |        }
 1315|   218k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E10parse_pathCsgLOhukngm62_5oxttl:
 1468|   202k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1469|   697k|        loop {
 1470|   697k|            let c = self.input.next();
 1471|   697k|            match c {
 1472|       |                None | Some('/') | Some('?') | Some('#') => {
 1473|   252k|                    if self.output.as_str().ends_with("/..") {
 1474|    500|                        self.remove_last_segment();
 1475|    500|                        self.remove_last_segment();
 1476|    500|                        self.output.push('/');
 1477|   252k|                    } else if self.output.as_str().ends_with("/.") {
 1478|   150k|                        self.remove_last_segment();
 1479|   150k|                        self.output.push('/');
 1480|   150k|                    } else if c == Some('/') {
 1481|  64.8k|                        self.output.push('/');
 1482|  64.8k|                    }
 1483|       |
 1484|   252k|                    if c == Some('?') {
 1485|  2.52k|                        self.output_positions.path_end = self.output.len();
 1486|  2.52k|                        self.output.push('?');
 1487|  2.52k|                        return self.parse_query();
 1488|   250k|                    } else if c == Some('#') {
 1489|  2.79k|                        self.output_positions.path_end = self.output.len();
 1490|  2.79k|                        self.output_positions.query_end = self.output.len();
 1491|  2.79k|                        self.output.push('#');
 1492|  2.79k|                        return self.parse_fragment();
 1493|   247k|                    } else if c.is_none() {
 1494|   182k|                        self.output_positions.path_end = self.output.len();
 1495|   182k|                        self.output_positions.query_end = self.output.len();
 1496|   182k|                        return Ok(());
 1497|  65.1k|                    }
 1498|       |                }
 1499|   444k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1500|       |            }
 1501|       |        }
 1502|   202k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E10read_echarCsgLOhukngm62_5oxttl:
 1558|  4.66k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1559|  4.66k|        let c1 = self.input.next();
 1560|  4.66k|        let c2 = self.input.next();
 1561|  4.66k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1562|  2.83k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1563|       |        {
 1564|  2.67k|            self.output.push('%');
 1565|  2.67k|            self.output.push(c1.unwrap());
 1566|  2.67k|            self.output.push(c2.unwrap());
 1567|  2.67k|            Ok(())
 1568|       |        } else {
 1569|  1.99k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1570|  1.99k|                Some('%'),
 1571|  1.99k|                c1,
 1572|  1.99k|                c2,
 1573|  1.99k|            ]))
 1574|       |        }
 1575|  4.66k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE15parse_uncheckedCsgLOhukngm62_5oxttl:
  567|  8.92k|    pub fn parse_unchecked(iri: T) -> Self {
  568|  8.92k|        Iri(IriRef::parse_unchecked(iri))
  569|  8.92k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE17resolve_uncheckedCsgLOhukngm62_5oxttl:
  107|   114k|    pub fn resolve_unchecked(&self, iri: &str) -> IriRef<String> {
  108|   114k|        let mut target_buffer = String::with_capacity(self.iri.len() + iri.len());
  109|   114k|        let positions =
  110|   114k|            IriParser::<_, true>::parse(iri, Some(self.as_ref()), &mut target_buffer).unwrap();
  111|   114k|        IriRef {
  112|   114k|            iri: target_buffer,
  113|   114k|            positions,
  114|   114k|        }
  115|   114k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E12parse_schemeCsgLOhukngm62_5oxttl:
 1213|  40.4k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|   163k|        loop {
 1215|   163k|            let c = self.input.next();
 1216|   158k|            match c {
 1217|   158k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|   122k|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|  12.0k|                    self.output.push(':');
 1222|  12.0k|                    self.output_positions.scheme_end = self.output.len();
 1223|  12.0k|                    self.input_scheme_end = self.input.position;
 1224|  12.0k|                    return if self.input.starts_with('/') {
 1225|  5.89k|                        self.input.next();
 1226|  5.89k|                        self.output.push('/');
 1227|  5.89k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  6.13k|                        self.output_positions.authority_end = self.output.len();
 1230|  6.13k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|  28.3k|                    self.input = ParserInput {
 1235|  28.3k|                        value: self.iri.chars(),
 1236|  28.3k|                        position: 0,
 1237|  28.3k|                    }; // reset
 1238|  28.3k|                    self.output.clear();
 1239|  28.3k|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|  40.4k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E10parse_portCsgLOhukngm62_5oxttl:
 1420|  1.44k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1421|  3.14k|        loop {
 1422|  3.14k|            let c = self.input.next();
 1423|  3.14k|            match c {
 1424|       |                Some('/') | Some('?') | Some('#') | None => {
 1425|  1.25k|                    self.output_positions.authority_end = self.output.len();
 1426|  1.25k|                    return self.parse_path_start(c);
 1427|       |                }
 1428|  1.88k|                Some(c) => {
 1429|  1.88k|                    if UNCHECKED || c.is_ascii_digit() {
 1430|  1.69k|                        self.output.push(c)
 1431|       |                    } else {
 1432|    194|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1433|       |                    }
 1434|       |                }
 1435|       |            }
 1436|       |        }
 1437|  1.44k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_pathCsgLOhukngm62_5oxttl:
 1468|  6.71k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1469|  72.5k|        loop {
 1470|  72.5k|            let c = self.input.next();
 1471|  72.5k|            match c {
 1472|       |                None | Some('/') | Some('?') | Some('#') => {
 1473|  9.14k|                    if self.output.as_str().ends_with("/..") {
 1474|      0|                        self.remove_last_segment();
 1475|      0|                        self.remove_last_segment();
 1476|      0|                        self.output.push('/');
 1477|  9.14k|                    } else if self.output.as_str().ends_with("/.") {
 1478|      0|                        self.remove_last_segment();
 1479|      0|                        self.output.push('/');
 1480|  9.14k|                    } else if c == Some('/') {
 1481|  2.43k|                        self.output.push('/');
 1482|  6.71k|                    }
 1483|       |
 1484|  9.14k|                    if c == Some('?') {
 1485|  1.32k|                        self.output_positions.path_end = self.output.len();
 1486|  1.32k|                        self.output.push('?');
 1487|  1.32k|                        return self.parse_query();
 1488|  7.82k|                    } else if c == Some('#') {
 1489|    706|                        self.output_positions.path_end = self.output.len();
 1490|    706|                        self.output_positions.query_end = self.output.len();
 1491|    706|                        self.output.push('#');
 1492|    706|                        return self.parse_fragment();
 1493|  7.11k|                    } else if c.is_none() {
 1494|  4.68k|                        self.output_positions.path_end = self.output.len();
 1495|  4.68k|                        self.output_positions.query_end = self.output.len();
 1496|  4.68k|                        return Ok(());
 1497|  2.43k|                    }
 1498|       |                }
 1499|  63.4k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1500|       |            }
 1501|       |        }
 1502|  6.71k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb1_E27read_url_codepoint_or_echarCsgLOhukngm62_5oxttl:
 1534|   424k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1535|   424k|        if UNCHECKED || is_url_code_point(c) {
 1536|   424k|            self.output.push(c);
 1537|   424k|            Ok(())
 1538|      0|        } else if c == '%' {
 1539|      0|            self.read_echar()
 1540|       |        } else {
 1541|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1542|       |        }
 1543|   424k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E12parse_schemeCsgLOhukngm62_5oxttl:
 1213|  8.92k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|  48.2k|        loop {
 1215|  48.2k|            let c = self.input.next();
 1216|  48.2k|            match c {
 1217|  48.2k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|  39.3k|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|  8.92k|                    self.output.push(':');
 1222|  8.92k|                    self.output_positions.scheme_end = self.output.len();
 1223|  8.92k|                    self.input_scheme_end = self.input.position;
 1224|  8.92k|                    return if self.input.starts_with('/') {
 1225|  8.08k|                        self.input.next();
 1226|  8.08k|                        self.output.push('/');
 1227|  8.08k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|    841|                        self.output_positions.authority_end = self.output.len();
 1230|    841|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|      0|                    self.input = ParserInput {
 1235|      0|                        value: self.iri.chars(),
 1236|      0|                        position: 0,
 1237|      0|                    }; // reset
 1238|      0|                    self.output.clear();
 1239|      0|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|  8.92k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_portCsgLOhukngm62_5oxttl:
 1420|    734|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1421|  1.17k|        loop {
 1422|  1.17k|            let c = self.input.next();
 1423|  1.17k|            match c {
 1424|       |                Some('/') | Some('?') | Some('#') | None => {
 1425|    734|                    self.output_positions.authority_end = self.output.len();
 1426|    734|                    return self.parse_path_start(c);
 1427|       |                }
 1428|    436|                Some(c) => {
 1429|    436|                    if UNCHECKED || c.is_ascii_digit() {
 1430|    436|                        self.output.push(c)
 1431|       |                    } else {
 1432|      0|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1433|       |                    }
 1434|       |                }
 1435|       |            }
 1436|       |        }
 1437|    734|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E20parse_relative_slashCsgLOhukngm62_5oxttl:
 1317|   112k|    fn parse_relative_slash(&mut self, base: &IriRef<&'a str>) -> Result<(), IriParseError> {
 1318|   112k|        if self.input.starts_with('/') {
 1319|  6.66k|            self.input.next();
 1320|  6.66k|            self.output.push_str(&base.iri[..base.positions.scheme_end]);
 1321|  6.66k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1322|  6.66k|            self.output.push('/');
 1323|  6.66k|            self.output.push('/');
 1324|  6.66k|            self.parse_authority()
 1325|       |        } else {
 1326|   106k|            self.output
 1327|   106k|                .push_str(&base.iri[..base.positions.authority_end]);
 1328|   106k|            self.output.push('/');
 1329|   106k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1330|   106k|            self.output_positions.authority_end = base.positions.authority_end;
 1331|   106k|            self.parse_path()
 1332|       |        }
 1333|   112k|    }
_RNvXsZ_CsbOXESBDtkxG_5oxiriNtNtCsjOdcKtOMjJI_5alloc6string6StringNtB5_12OutputBuffer4pushCsgLOhukngm62_5oxttl:
 1104|  2.19M|    fn push(&mut self, c: char) {
 1105|  2.19M|        self.push(c);
 1106|  2.19M|    }
_RNvXsZ_CsbOXESBDtkxG_5oxiriNtNtCsjOdcKtOMjJI_5alloc6string6StringNtB5_12OutputBuffer5clearCsgLOhukngm62_5oxttl:
 1114|  42.4k|    fn clear(&mut self) {
 1115|  42.4k|        self.clear();
 1116|  42.4k|    }
_RNvXsZ_CsbOXESBDtkxG_5oxiriNtNtCsjOdcKtOMjJI_5alloc6string6StringNtB5_12OutputBuffer8push_strCsgLOhukngm62_5oxttl:
 1109|   327k|    fn push_str(&mut self, s: &str) {
 1110|   327k|        self.push_str(s);
 1111|   327k|    }
_RNvXsZ_CsbOXESBDtkxG_5oxiriNtNtCsjOdcKtOMjJI_5alloc6string6StringNtB5_12OutputBuffer8truncateCsgLOhukngm62_5oxttl:
 1119|   377k|    fn truncate(&mut self, new_len: usize) {
 1120|   377k|        self.truncate(new_len);
 1121|   377k|    }
_RNvXsZ_CsbOXESBDtkxG_5oxiriNtNtCsjOdcKtOMjJI_5alloc6string6StringNtB5_12OutputBuffer3lenCsgLOhukngm62_5oxttl:
 1124|   783k|    fn len(&self) -> usize {
 1125|   783k|        self.len()
 1126|   783k|    }
_RNvXsZ_CsbOXESBDtkxG_5oxiriNtNtCsjOdcKtOMjJI_5alloc6string6StringNtB5_12OutputBuffer6as_strCsgLOhukngm62_5oxttl:
 1129|  1.14M|    fn as_str(&self) -> &str {
 1130|  1.14M|        self.as_str()
 1131|  1.14M|    }
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput11starts_withCsaAh6yFmIely_5oxrdf:
 1156|  2.72M|    fn starts_with(&self, c: char) -> bool {
 1157|  2.72M|        self.value.as_str().starts_with(c)
 1158|  2.72M|    }
_RNvXs1b_CsbOXESBDtkxG_5oxiriNtB6_16VoidOutputBufferNtNtCs9nhK3FOW46N_4core7default7Default7defaultCsaAh6yFmIely_5oxrdf:
 1065|   911k|#[derive(Default)]
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCsaAh6yFmIely_5oxrdf:
 1092|  3.64M|    fn len(&self) -> usize {
 1093|  3.64M|        self.len
 1094|  3.64M|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsaAh6yFmIely_5oxrdf:
 1072|  30.4M|    fn push(&mut self, c: char) {
 1073|  30.4M|        self.len += c.len_utf8();
 1074|  30.4M|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCsaAh6yFmIely_5oxrdf:
 1097|  3.14M|    fn as_str(&self) -> &str {
 1098|  3.14M|        ""
 1099|  3.14M|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCsaAh6yFmIely_5oxrdf:
 1087|   905k|    fn truncate(&mut self, new_len: usize) {
 1088|   905k|        self.len = new_len;
 1089|   905k|    }
_RNvCsbOXESBDtkxG_5oxiri17is_url_code_pointCsaAh6yFmIely_5oxrdf:
 1584|  22.4M|fn is_url_code_point(c: char) -> bool {
 1585|  22.4M|    matches!(c,
 1586|  18.7M|        'a'..='z'
 1587|   189k|        | 'A'..='Z'
 1588|  1.31M|        | '0'..='9'
 1589|       |        | '!'
 1590|       |        | '$'
 1591|       |        | '&'
 1592|       |        | '\''
 1593|       |        | '('
 1594|       |        | ')'
 1595|       |        | '*'
 1596|       |        | '+'
 1597|       |        | ','
 1598|       |        | '-'
 1599|       |        | '.'
 1600|       |        | '/'
 1601|       |        | ':'
 1602|       |        | ';'
 1603|       |        | '='
 1604|       |        | '?'
 1605|       |        | '@'
 1606|       |        | '_'
 1607|       |        | '~'
 1608|  6.27k|        | '\u{A0}'..='\u{D7FF}'
 1609|    673|        | '\u{F900}'..='\u{FDCF}'
 1610|    353|        | '\u{FDF0}'..='\u{FFEF}'
 1611|    353|        | '\u{10000}'..='\u{1FFFD}'
 1612|    353|        | '\u{20000}'..='\u{2FFFD}'
 1613|    353|        | '\u{30000}'..='\u{3FFFD}'
 1614|    353|        | '\u{40000}'..='\u{4FFFD}'
 1615|    158|        | '\u{50000}'..='\u{5FFFD}'
 1616|    156|        | '\u{60000}'..='\u{6FFFD}'
 1617|    156|        | '\u{70000}'..='\u{7FFFD}'
 1618|    156|        | '\u{80000}'..='\u{8FFFD}'
 1619|    156|        | '\u{90000}'..='\u{9FFFD}'
 1620|    156|        | '\u{A0000}'..='\u{AFFFD}'
 1621|      1|        | '\u{B0000}'..='\u{BFFFD}'
 1622|      0|        | '\u{C0000}'..='\u{CFFFD}'
 1623|      0|        | '\u{D0000}'..='\u{DFFFD}'
 1624|      0|        | '\u{E1000}'..='\u{EFFFD}'
 1625|       |    )
 1626|  22.4M|}
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput4nextCsaAh6yFmIely_5oxrdf:
 1141|  32.3M|    fn next(&mut self) -> Option<char> {
 1142|  32.3M|        if let Some(head) = self.value.next() {
 1143|  31.3M|            self.position += head.len_utf8();
 1144|  31.3M|            Some(head)
 1145|       |        } else {
 1146|   913k|            None
 1147|       |        }
 1148|  32.3M|    }
_RNvCsbOXESBDtkxG_5oxiri23is_url_query_code_pointCsaAh6yFmIely_5oxrdf:
 1629|  57.9k|fn is_url_query_code_point(c: char) -> bool {
 1630|  57.9k|    is_url_code_point(c)
 1631|  1.29k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1632|  57.9k|}
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput5frontCsaAh6yFmIely_5oxrdf:
 1151|   911k|    fn front(&self) -> Option<char> {
 1152|   911k|        self.value.clone().next()
 1153|   911k|    }
_RINvMs11_CsbOXESBDtkxG_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECsaAh6yFmIely_5oxrdf:
 1578|  1.39k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1579|  1.39k|        Err(IriParseError { kind })
 1580|  1.39k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCsaAh6yFmIely_5oxrdf:
 1468|   907k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1469|  3.95M|        loop {
 1470|  3.95M|            let c = self.input.next();
 1471|  3.95M|            match c {
 1472|       |                None | Some('/') | Some('?') | Some('#') => {
 1473|  1.57M|                    if self.output.as_str().ends_with("/..") {
 1474|      0|                        self.remove_last_segment();
 1475|      0|                        self.remove_last_segment();
 1476|      0|                        self.output.push('/');
 1477|  1.57M|                    } else if self.output.as_str().ends_with("/.") {
 1478|      0|                        self.remove_last_segment();
 1479|      0|                        self.output.push('/');
 1480|  1.57M|                    } else if c == Some('/') {
 1481|   667k|                        self.output.push('/');
 1482|   907k|                    }
 1483|       |
 1484|  1.57M|                    if c == Some('?') {
 1485|  1.57k|                        self.output_positions.path_end = self.output.len();
 1486|  1.57k|                        self.output.push('?');
 1487|  1.57k|                        return self.parse_query();
 1488|  1.57M|                    } else if c == Some('#') {
 1489|  72.6k|                        self.output_positions.path_end = self.output.len();
 1490|  72.6k|                        self.output_positions.query_end = self.output.len();
 1491|  72.6k|                        self.output.push('#');
 1492|  72.6k|                        return self.parse_fragment();
 1493|  1.50M|                    } else if c.is_none() {
 1494|   833k|                        self.output_positions.path_end = self.output.len();
 1495|   833k|                        self.output_positions.query_end = self.output.len();
 1496|   833k|                        return Ok(());
 1497|   667k|                    }
 1498|       |                }
 1499|  2.37M|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1500|       |            }
 1501|       |        }
 1502|   907k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE10into_innerCsaAh6yFmIely_5oxrdf:
  185|  1.18M|    pub fn into_inner(self) -> T {
  186|  1.18M|        self.iri
  187|  1.18M|    }
_RNCNvMs11_CsbOXESBDtkxG_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0CsaAh6yFmIely_5oxrdf:
 1561|  3.41k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE5parseCsaAh6yFmIely_5oxrdf:
   58|   882k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|   882k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|   882k|        Ok(Self { iri, positions })
   61|   882k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefReE5parseCsaAh6yFmIely_5oxrdf:
   58|  29.3k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  29.3k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  27.9k|        Ok(Self { iri, positions })
   61|  29.3k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE5parseCsaAh6yFmIely_5oxrdf:
  556|   882k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|   882k|        IriRef::parse(iri)?.try_into()
  558|   882k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriReE5parseCsaAh6yFmIely_5oxrdf:
  556|  29.3k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|  29.3k|        IriRef::parse(iri)?.try_into()
  558|  29.3k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefReE11is_absoluteCsaAh6yFmIely_5oxrdf:
  199|  27.9k|    pub fn is_absolute(&self) -> bool {
  200|  27.9k|        self.positions.scheme_end != 0
  201|  27.9k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE11is_absoluteCsaAh6yFmIely_5oxrdf:
  199|   882k|    pub fn is_absolute(&self) -> bool {
  200|   882k|        self.positions.scheme_end != 0
  201|   882k|    }
_RNCNvMs11_CsbOXESBDtkxG_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0CsaAh6yFmIely_5oxrdf:
 1562|  3.20k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCsaAh6yFmIely_5oxrdf:
 1245|   909k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|   909k|        if self.input.starts_with('/') {
 1247|   906k|            self.input.next();
 1248|   906k|            self.output.push('/');
 1249|   906k|            self.parse_authority()
 1250|       |        } else {
 1251|  2.31k|            self.output_positions.authority_end = self.output.len() - 1;
 1252|  2.31k|            self.parse_path()
 1253|       |        }
 1254|   909k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCsaAh6yFmIely_5oxrdf:
 1439|   905k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1440|   905k|        match c {
 1441|       |            None => {
 1442|  2.02k|                self.output_positions.path_end = self.output.len();
 1443|  2.02k|                self.output_positions.query_end = self.output.len();
 1444|  2.02k|                Ok(())
 1445|       |            }
 1446|       |            Some('?') => {
 1447|    459|                self.output_positions.path_end = self.output.len();
 1448|    459|                self.output.push('?');
 1449|    459|                self.parse_query()
 1450|       |            }
 1451|       |            Some('#') => {
 1452|    566|                self.output_positions.path_end = self.output.len();
 1453|    566|                self.output_positions.query_end = self.output.len();
 1454|    566|                self.output.push('#');
 1455|    566|                self.parse_fragment()
 1456|       |            }
 1457|       |            Some('/') => {
 1458|   902k|                self.output.push('/');
 1459|   902k|                self.parse_path()
 1460|       |            }
 1461|      0|            Some(c) => {
 1462|      0|                self.read_url_codepoint_or_echar(c)?;
 1463|      0|                self.parse_path()
 1464|       |            }
 1465|       |        }
 1466|   905k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCsaAh6yFmIely_5oxrdf:
 1558|  3.56k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1559|  3.56k|        let c1 = self.input.next();
 1560|  3.56k|        let c2 = self.input.next();
 1561|  3.56k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1562|  3.20k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1563|       |        {
 1564|  3.07k|            self.output.push('%');
 1565|  3.07k|            self.output.push(c1.unwrap());
 1566|  3.07k|            self.output.push(c2.unwrap());
 1567|  3.07k|            Ok(())
 1568|       |        } else {
 1569|    486|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1570|    486|                Some('%'),
 1571|    486|                c1,
 1572|    486|                c2,
 1573|    486|            ]))
 1574|       |        }
 1575|  3.56k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCsaAh6yFmIely_5oxrdf:
 1174|   911k|    fn parse(
 1175|   911k|        iri: &'a str,
 1176|   911k|        base: Option<IriRef<&'a str>>,
 1177|   911k|        output: &'a mut O,
 1178|   911k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|   911k|        let mut parser = Self {
 1180|   911k|            iri,
 1181|   911k|            base,
 1182|   911k|            input: ParserInput {
 1183|   911k|                value: iri.chars(),
 1184|   911k|                position: 0,
 1185|   911k|            },
 1186|   911k|            output,
 1187|   911k|            output_positions: IriElementsPositions {
 1188|   911k|                scheme_end: 0,
 1189|   911k|                authority_end: 0,
 1190|   911k|                path_end: 0,
 1191|   911k|                query_end: 0,
 1192|   911k|            },
 1193|   911k|            input_scheme_end: 0,
 1194|   911k|        };
 1195|   911k|        parser.parse_scheme_start()?;
 1196|   910k|        Ok(parser.output_positions)
 1197|   911k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCsaAh6yFmIely_5oxrdf:
 1335|   906k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1336|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1337|  10.7M|        loop {
 1338|  10.7M|            let c = self.input.next();
 1339|  10.7M|            match c {
 1340|       |                Some('@') => {
 1341|    980|                    self.output.push('@');
 1342|    980|                    return self.parse_host();
 1343|       |                }
 1344|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1345|   905k|                    self.input = ParserInput {
 1346|   905k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1347|   905k|                        position: self.input_scheme_end + 2,
 1348|   905k|                    };
 1349|   905k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1350|   905k|                    return self.parse_host();
 1351|       |                }
 1352|  9.81M|                Some(c) => {
 1353|  9.81M|                    self.read_url_codepoint_or_echar(c)?;
 1354|       |                }
 1355|       |            }
 1356|       |        }
 1357|   906k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCsaAh6yFmIely_5oxrdf:
 1518|  73.5k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1519|   482k|        while let Some(c) = self.input.next() {
 1520|   409k|            self.read_url_codepoint_or_echar(c)?
 1521|       |        }
 1522|  73.3k|        Ok(())
 1523|  73.5k|    }
_RNvXsV_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringEINtNtCs9nhK3FOW46N_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsaAh6yFmIely_5oxrdf:
  968|   882k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  969|   882k|        if iri.is_absolute() {
  970|   882k|            Ok(Self(iri))
  971|       |        } else {
  972|      0|            Err(IriParseError {
  973|      0|                kind: IriParseErrorKind::NoScheme,
  974|      0|            })
  975|       |        }
  976|   882k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCsaAh6yFmIely_5oxrdf:
 1213|   911k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|  4.56M|        loop {
 1215|  4.56M|            let c = self.input.next();
 1216|  4.56M|            match c {
 1217|  4.56M|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|  3.64M|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|   911k|                    self.output.push(':');
 1222|   911k|                    self.output_positions.scheme_end = self.output.len();
 1223|   911k|                    self.input_scheme_end = self.input.position;
 1224|   911k|                    return if self.input.starts_with('/') {
 1225|   909k|                        self.input.next();
 1226|   909k|                        self.output.push('/');
 1227|   909k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  2.68k|                        self.output_positions.authority_end = self.output.len();
 1230|  2.68k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|      0|                    self.input = ParserInput {
 1235|      0|                        value: self.iri.chars(),
 1236|      0|                        position: 0,
 1237|      0|                    }; // reset
 1238|      0|                    self.output.clear();
 1239|      0|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|   911k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCsaAh6yFmIely_5oxrdf:
 1420|  1.31k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1421|  1.83k|        loop {
 1422|  1.83k|            let c = self.input.next();
 1423|  1.83k|            match c {
 1424|       |                Some('/') | Some('?') | Some('#') | None => {
 1425|    887|                    self.output_positions.authority_end = self.output.len();
 1426|    887|                    return self.parse_path_start(c);
 1427|       |                }
 1428|    951|                Some(c) => {
 1429|    951|                    if UNCHECKED || c.is_ascii_digit() {
 1430|    524|                        self.output.push(c)
 1431|       |                    } else {
 1432|    427|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1433|       |                    }
 1434|       |                }
 1435|       |            }
 1436|       |        }
 1437|  1.31k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarCsaAh6yFmIely_5oxrdf:
 1534|  22.3M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1535|  22.3M|        if UNCHECKED || is_url_code_point(c) {
 1536|  22.3M|            self.output.push(c);
 1537|  22.3M|            Ok(())
 1538|  3.19k|        } else if c == '%' {
 1539|  2.97k|            self.read_echar()
 1540|       |        } else {
 1541|    223|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1542|       |        }
 1543|  22.3M|    }
_RNvXsV_CsbOXESBDtkxG_5oxiriINtB5_3IriReEINtNtCs9nhK3FOW46N_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsaAh6yFmIely_5oxrdf:
  968|  27.9k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  969|  27.9k|        if iri.is_absolute() {
  970|  27.9k|            Ok(Self(iri))
  971|       |        } else {
  972|      0|            Err(IriParseError {
  973|      0|                kind: IriParseErrorKind::NoScheme,
  974|      0|            })
  975|       |        }
  976|  27.9k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE10into_innerCsaAh6yFmIely_5oxrdf:
  665|  1.18M|    pub fn into_inner(self) -> T {
  666|  1.18M|        self.0.into_inner()
  667|  1.18M|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E33read_url_query_codepoint_or_echarCsaAh6yFmIely_5oxrdf:
 1546|  57.9k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1547|  57.9k|        if UNCHECKED || is_url_query_code_point(c) {
 1548|  57.2k|            self.output.push(c);
 1549|  57.2k|            Ok(())
 1550|    652|        } else if c == '%' {
 1551|    586|            self.read_echar()
 1552|       |        } else {
 1553|     66|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1554|       |        }
 1555|  57.9k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCsaAh6yFmIely_5oxrdf:
 1504|  2.03k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1505|  59.8k|        while let Some(c) = self.input.next() {
 1506|  58.2k|            if c == '#' {
 1507|    271|                self.output_positions.query_end = self.output.len();
 1508|    271|                self.output.push('#');
 1509|    271|                return self.parse_fragment();
 1510|       |            } else {
 1511|  57.9k|                self.read_url_query_codepoint_or_echar(c)?
 1512|       |            }
 1513|       |        }
 1514|  1.62k|        self.output_positions.query_end = self.output.len();
 1515|  1.62k|        Ok(())
 1516|  2.03k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCsaAh6yFmIely_5oxrdf:
 1199|   911k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|   911k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|      0|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|      0|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|   911k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|      0|            _ => self.parse_relative(),
 1210|       |        }
 1211|   911k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCsaAh6yFmIely_5oxrdf:
 1359|   906k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1360|   906k|        if self.input.starts_with('[') {
 1361|       |            // IP v6
 1362|    190|            let start_position = self.input.position;
 1363|  6.42k|            while let Some(c) = self.input.next() {
 1364|  6.42k|                self.output.push(c);
 1365|  6.42k|                if c == ']' {
 1366|    186|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1367|    186|                    if !UNCHECKED {
 1368|    186|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1369|    186|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1370|      0|                        }
 1371|      0|                    }
 1372|       |
 1373|      0|                    let c = self.input.next();
 1374|      0|                    return match c {
 1375|       |                        Some(':') => {
 1376|      0|                            self.output.push(':');
 1377|      0|                            self.parse_port()
 1378|       |                        }
 1379|       |                        None | Some('/') | Some('?') | Some('#') => {
 1380|      0|                            self.output_positions.authority_end = self.output.len();
 1381|      0|                            self.parse_path_start(c)
 1382|       |                        }
 1383|      0|                        Some(c) => {
 1384|      0|                            if UNCHECKED {
 1385|      0|                                self.output.push(c);
 1386|      0|                                continue;
 1387|       |                            } else {
 1388|      0|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1389|       |                            }
 1390|       |                        }
 1391|       |                    };
 1392|  6.23k|                }
 1393|       |            }
 1394|      4|            if UNCHECKED {
 1395|       |                // We consider it's valid even if it's not finished
 1396|      0|                self.output_positions.authority_end = self.output.len();
 1397|      0|                self.parse_path_start(None)
 1398|       |            } else {
 1399|      4|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1400|       |            }
 1401|       |        } else {
 1402|       |            // Other host
 1403|  10.6M|            loop {
 1404|  10.6M|                let c = self.input.next();
 1405|  10.6M|                match c {
 1406|       |                    Some(':') => {
 1407|  1.31k|                        self.output.push(':');
 1408|  1.31k|                        return self.parse_port();
 1409|       |                    }
 1410|       |                    None | Some('/') | Some('?') | Some('#') => {
 1411|   904k|                        self.output_positions.authority_end = self.output.len();
 1412|   904k|                        return self.parse_path_start(c);
 1413|       |                    }
 1414|  9.79M|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1415|       |                }
 1416|       |            }
 1417|       |        }
 1418|   906k|    }
_RNvXsW_CsbOXESBDtkxG_5oxiriNtB5_13IriParseErrorNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1003|  25.4k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1004|  25.4k|        match &self.kind {
 1005|    444|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
 1006|    464|            IriParseErrorKind::InvalidHostCharacter(c) => {
 1007|    464|                write!(f, "Invalid character '{c}' in host")
 1008|       |            }
 1009|  1.64k|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({e})"),
 1010|    621|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{c}'"),
 1011|  19.7k|            IriParseErrorKind::InvalidIriCodePoint(c) => {
 1012|  19.7k|                write!(f, "Invalid IRI code point '{c}'")
 1013|       |            }
 1014|  2.47k|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
 1015|  2.47k|                f,
 1016|  2.47k|                "Invalid IRI percent encoding '{}'",
 1017|  2.47k|                cs.iter().flatten().cloned().collect::<String>()
 1018|  2.47k|            ),
 1019|       |        }
 1020|  25.4k|    }

_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right25Cs7Qy2jXn7BB4_11rand_chacha:
   42|   362k|        fn $fn(self) -> Self {
   43|   362k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   362k|        }
_RNvXsg_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words3012Cs7Qy2jXn7BB4_11rand_chacha:
  215|   362k|    fn shuffle_lane_words3012(self) -> Self {
  216|   362k|        Self::new([
  217|   362k|            self.0[0].shuffle_lane_words3012(),
  218|   362k|            self.0[1].shuffle_lane_words3012(),
  219|   362k|        ])
  220|   362k|    }
_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right20Cs7Qy2jXn7BB4_11rand_chacha:
   42|   362k|        fn $fn(self) -> Self {
   43|   362k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   362k|        }
_RNvXsG_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCs9nhK3FOW46N_4core3ops3bit6BitXor6bitxorCs7Qy2jXn7BB4_11rand_chacha:
   22|  1.44M|            fn $fn(self, rhs: Self) -> Self::Output {
   23|  1.44M|                x2::new([self.0[0].$fn(rhs.0[0]), self.0[1].$fn(rhs.0[1])])
   24|  1.44M|            }
_RNvXsg_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words2301Cs7Qy2jXn7BB4_11rand_chacha:
  201|   362k|    fn shuffle_lane_words2301(self) -> Self {
  202|   362k|        Self::new([
  203|   362k|            self.0[0].shuffle_lane_words2301(),
  204|   362k|            self.0[1].shuffle_lane_words2301(),
  205|   362k|        ])
  206|   362k|    }
_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right16Cs7Qy2jXn7BB4_11rand_chacha:
   42|   362k|        fn $fn(self) -> Self {
   43|   362k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   362k|        }
_RNvMNtCsf8HyAzZvOrI_10ppv_lite864softINtB2_2x2INtNtNtNtB4_6x86_644sse24avx212u32x4x2_avx2NtBP_4NoNIENtBN_2G0E3newCs7Qy2jXn7BB4_11rand_chacha:
   13|  4.13M|    pub fn new(xs: [W; 2]) -> Self {
   14|  4.13M|        x2(xs, PhantomData)
   15|  4.13M|    }
_RNvXsM_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCs9nhK3FOW46N_4core3ops5arith9AddAssign10add_assignCs7Qy2jXn7BB4_11rand_chacha:
   32|  1.44M|            fn $fn_assign(&mut self, rhs: Self) {
   33|  1.44M|                (self.0[0]).$fn_assign(rhs.0[0]);
   34|  1.44M|                (self.0[1]).$fn_assign(rhs.0[1]);
   35|  1.44M|            }
_RNvXsg_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words1230Cs7Qy2jXn7BB4_11rand_chacha:
  208|   362k|    fn shuffle_lane_words1230(self) -> Self {
  209|   362k|        Self::new([
  210|   362k|            self.0[0].shuffle_lane_words1230(),
  211|   362k|            self.0[1].shuffle_lane_words1230(),
  212|   362k|        ])
  213|   362k|    }
_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right24Cs7Qy2jXn7BB4_11rand_chacha:
   42|   362k|        fn $fn(self) -> Self {
   43|   362k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   362k|        }

_RINvYINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec128_storageINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EECs7Qy2jXn7BB4_11rand_chacha:
  246|   271k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|   271k|        unsafe { V::unpack(s) }
  248|   271k|    }
_RINvYINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec512_storageINtNtB8_4soft2x2INtNtNtB6_4sse24avx212u32x4x2_avx2BS_ENtB2b_2G0EECs7Qy2jXn7BB4_11rand_chacha:
  246|  30.1k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|  30.1k|        unsafe { V::unpack(s) }
  248|  30.1k|    }
_RINvYINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6410SseMachineNtB6_5YesS3NtB6_5YesS4NtB6_4NoNIENtNtB8_5types7Machine7read_leINtNtB6_4sse210u32x4_sse2BR_B12_B1d_EECs7Qy2jXn7BB4_11rand_chacha:
  259|    236|    fn read_le<V>(self, input: &[u8]) -> V
  260|    236|    where
  261|    236|        V: StoreBytes,
  262|    236|    {
  263|    236|        unsafe { V::unsafe_read_le(input) }
  264|    236|    }
_RINvYINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine3vecINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EAmj4_ECs7Qy2jXn7BB4_11rand_chacha:
  251|  30.1k|    fn vec<V, A>(self, a: A) -> V
  252|  30.1k|    where
  253|  30.1k|        V: MultiLane<A>,
  254|  30.1k|    {
  255|  30.1k|        V::from_lanes(a)
  256|  30.1k|    }

_RNvNtCs7Qy2jXn7BB4_11rand_chacha4guts11init_chacha:
  333|    118|        $($pub $(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  334|    118|            #[inline(always)]
  335|    118|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  336|    118|            use std::arch::x86_64::*;
  337|    118|            #[target_feature(enable = "avx")]
  338|    118|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|    118|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|    118|            }
  341|    118|            #[target_feature(enable = "sse2")]
  342|    118|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  343|    118|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  344|    118|            }
  345|    118|            unsafe {
  346|    118|                if is_x86_feature_detected!("avx") {
  347|    118|                    impl_avx($($arg),*)
  348|      0|                } else if is_x86_feature_detected!("sse2") {
  349|      0|                    impl_sse2($($arg),*)
  350|       |                } else {
  351|      0|                    unimplemented!()
  352|       |                }
  353|       |            }
  354|    118|        }
_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite866x86_64INtB4_11Avx2MachineNtB4_4NoNIENtNtB6_5types7Machine8instanceCs7Qy2jXn7BB4_11rand_chacha:
   92|  30.1k|    unsafe fn instance() -> Self {
   93|  30.1k|        Avx2Machine(PhantomData)
   94|  30.1k|    }
_RNvXNtCsf8HyAzZvOrI_10ppv_lite866x86_64INtB2_10SseMachineNtB2_5YesS3NtB2_5YesS4NtB2_4NoNIENtNtB4_5types7Machine8instanceCs7Qy2jXn7BB4_11rand_chacha:
   64|    118|    unsafe fn instance() -> Self {
   65|    118|        SseMachine(PhantomData)
   66|    118|    }
_RNvNtCs7Qy2jXn7BB4_11rand_chacha4guts11refill_wide:
  250|  30.1k|        $($pub$(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  251|  30.1k|            #[inline(always)]
  252|  30.1k|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  253|  30.1k|            use std::arch::x86_64::*;
  254|  30.1k|            #[target_feature(enable = "avx2")]
  255|  30.1k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  30.1k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  30.1k|                _mm256_zeroupper();
  258|  30.1k|                ret
  259|  30.1k|            }
  260|  30.1k|            #[target_feature(enable = "avx")]
  261|  30.1k|            #[target_feature(enable = "sse4.1")]
  262|  30.1k|            #[target_feature(enable = "ssse3")]
  263|  30.1k|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  264|  30.1k|                let ret = fn_impl($crate::x86_64::AVX::instance(), $($arg),*);
  265|  30.1k|                _mm256_zeroupper();
  266|  30.1k|                ret
  267|  30.1k|            }
  268|  30.1k|            #[target_feature(enable = "sse4.1")]
  269|  30.1k|            #[target_feature(enable = "ssse3")]
  270|  30.1k|            unsafe fn impl_sse41($($arg: $argty),*) -> $ret {
  271|  30.1k|                fn_impl($crate::x86_64::SSE41::instance(), $($arg),*)
  272|  30.1k|            }
  273|  30.1k|            #[target_feature(enable = "ssse3")]
  274|  30.1k|            unsafe fn impl_ssse3($($arg: $argty),*) -> $ret {
  275|  30.1k|                fn_impl($crate::x86_64::SSSE3::instance(), $($arg),*)
  276|  30.1k|            }
  277|  30.1k|            #[target_feature(enable = "sse2")]
  278|  30.1k|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  279|  30.1k|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  280|  30.1k|            }
  281|  30.1k|            unsafe {
  282|  30.1k|                if is_x86_feature_detected!("avx2") {
  283|  30.1k|                    impl_avx2($($arg),*)
  284|      0|                } else if is_x86_feature_detected!("avx") {
  285|      0|                    impl_avx($($arg),*)
  286|      0|                } else if is_x86_feature_detected!("sse4.1") {
  287|      0|                    impl_sse41($($arg),*)
  288|      0|                } else if is_x86_feature_detected!("ssse3") {
  289|      0|                    impl_ssse3($($arg),*)
  290|      0|                } else if is_x86_feature_detected!("sse2") {
  291|      0|                    impl_sse2($($arg),*)
  292|       |                } else {
  293|      0|                    unimplemented!()
  294|       |                }
  295|       |            }
  296|  30.1k|        }
_RNvNvNtCs7Qy2jXn7BB4_11rand_chacha4guts11refill_wide9impl_avx2:
  255|  30.1k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  30.1k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  30.1k|                _mm256_zeroupper();
  258|  30.1k|                ret
  259|  30.1k|            }
_RNvNvNtCs7Qy2jXn7BB4_11rand_chacha4guts11init_chacha8impl_avx:
  338|    118|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|    118|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|    118|            }
_RNvXs2_NtCsf8HyAzZvOrI_10ppv_lite866x86_64NtB5_14vec128_storageINtNtCs9nhK3FOW46N_4core7convert4FromAmj4_E4from:
  130|    118|    fn from(u32x4: [u32; 4]) -> Self {
  131|    118|        vec128_storage { u32x4 }
  132|    118|    }

_RNvXs10_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes8write_leCs7Qy2jXn7BB4_11rand_chacha:
   89|   482k|            fn write_le(self, out: &mut [u8]) {
   90|   482k|                assert_eq!(out.len(), 16);
   91|   482k|                unsafe { _mm_storeu_si128(out.as_mut_ptr() as *mut _, self.x) }
   92|   482k|            }
_RNvXsv_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs9nhK3FOW46N_4core3ops5arith3Add3addCs7Qy2jXn7BB4_11rand_chacha:
 1543|  2.89M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  2.89M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  2.89M|                }
_RNvXsq_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs9nhK3FOW46N_4core3ops5arith9AddAssign10add_assignCs7Qy2jXn7BB4_11rand_chacha:
 1527|  2.89M|                fn $assign_fn(&mut self, rhs: Self) {
 1528|  2.89M|                    *self = self.$bin_fn(rhs);
 1529|  2.89M|                }
_RNvXs2_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E8to_lanesCs7Qy2jXn7BB4_11rand_chacha:
 1430|   241k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 2] {
 1431|   241k|            unsafe {
 1432|   241k|                [
 1433|   241k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 0)),
 1434|   241k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 1)),
 1435|   241k|                ]
 1436|   241k|            }
 1437|   241k|        }
_RNvXs6_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E10from_lanesCs7Qy2jXn7BB4_11rand_chacha:
  331|  30.1k|    fn from_lanes(xs: [u32; 4]) -> Self {
  332|  30.1k|        unsafe {
  333|  30.1k|            let mut x = _mm_cvtsi64_si128((xs[0] as u64 | ((xs[1] as u64) << 32)) as i64);
  334|  30.1k|            x = _mm_insert_epi64(x, (xs[2] as u64 | ((xs[3] as u64) << 32)) as i64, 1);
  335|  30.1k|            Self::new(x)
  336|  30.1k|        }
  337|  30.1k|    }
_RNvXs1R_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtNtCs9nhK3FOW46N_4core3ops5arith3Add3addCs7Qy2jXn7BB4_11rand_chacha:
   18|   482k|            fn $fn(self, rhs: Self) -> Self::Output {
   19|   482k|                Self::new(unsafe { $impl_fn(self.x, rhs.x) })
   20|   482k|            }
_RNvXsl_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE6insertCs7Qy2jXn7BB4_11rand_chacha:
  523|   422k|    fn insert(self, v: u32, i: u32) -> Self {
  524|   422k|        Self::new(unsafe {
  525|   422k|            match i {
  526|   211k|                0 => _mm_insert_epi32(self.x, v as i32, 0),
  527|   211k|                1 => _mm_insert_epi32(self.x, v as i32, 1),
  528|      0|                2 => _mm_insert_epi32(self.x, v as i32, 2),
  529|      0|                3 => _mm_insert_epi32(self.x, v as i32, 3),
  530|      0|                _ => unreachable!(),
  531|       |            }
  532|       |        })
  533|   422k|    }
_RNvXs6_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right25Cs7Qy2jXn7BB4_11rand_chacha:
 1480|   724k|            fn $name(self) -> Self {
 1481|   724k|                Self::new(unsafe {
 1482|   724k|                    _mm256_or_si256(
 1483|   724k|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|   724k|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|   724k|                    )
 1486|   724k|                })
 1487|   724k|            }
_RNvXs6_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right16Cs7Qy2jXn7BB4_11rand_chacha:
 1470|   724k|            fn $name(self) -> Self {
 1471|   724k|                Self::new(unsafe {
 1472|   724k|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|   724k|                })
 1474|   724k|            }
_RNvXs6_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right20Cs7Qy2jXn7BB4_11rand_chacha:
 1480|   724k|            fn $name(self) -> Self {
 1481|   724k|                Self::new(unsafe {
 1482|   724k|                    _mm256_or_si256(
 1483|   724k|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|   724k|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|   724k|                    )
 1486|   724k|                })
 1487|   724k|            }
_RNvXsc_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words1230Cs7Qy2jXn7BB4_11rand_chacha:
 1582|   724k|        fn shuffle_lane_words1230(self) -> Self {
 1583|   724k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b1001_0011) })
 1584|   724k|        }
_RNvXse_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types5StoreNtB9_14vec512_storageE6unpackCs7Qy2jXn7BB4_11rand_chacha:
 1602|  30.1k|        unsafe fn unpack(p: vec512_storage) -> Self {
 1603|  30.1k|            Self::new([
 1604|  30.1k|                u32x4x2_avx2::unpack(p.avx[0]),
 1605|  30.1k|                u32x4x2_avx2::unpack(p.avx[1]),
 1606|  30.1k|            ])
 1607|  30.1k|        }
_RNvMNtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB2_12u32x4x2_avx2NtB6_4NoNIE3newCs7Qy2jXn7BB4_11rand_chacha:
 1394|  11.1M|        fn new(x: __m256i) -> Self {
 1395|  11.1M|            Self { x, ni: PhantomData }
 1396|  11.1M|        }
_RNvXsf_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E10from_lanesCs7Qy2jXn7BB4_11rand_chacha:
 1617|   120k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 4]) -> Self {
 1618|   120k|            let ab = u32x4x2_avx2::from_lanes([x[0], x[1]]);
 1619|   120k|            let cd = u32x4x2_avx2::from_lanes([x[2], x[3]]);
 1620|   120k|            Self::new([ab, cd])
 1621|   120k|        }
_RNvXs6_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E8to_lanesCs7Qy2jXn7BB4_11rand_chacha:
  323|   120k|    fn to_lanes(self) -> [u32; 4] {
  324|   120k|        unsafe {
  325|   120k|            let x = _mm_cvtsi128_si64(self.x) as u64;
  326|   120k|            let y = _mm_extract_epi64(self.x, 1) as u64;
  327|   120k|            [x as u32, (x >> 32) as u32, y as u32, (y >> 32) as u32]
  328|   120k|        }
  329|   120k|    }
_RNvXs10_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes14unsafe_read_leCs7Qy2jXn7BB4_11rand_chacha:
   79|    236|            unsafe fn unsafe_read_le(input: &[u8]) -> Self {
   80|    236|                assert_eq!(input.len(), 16);
   81|    236|                Self::new(_mm_loadu_si128(input.as_ptr() as *const _))
   82|    236|            }
_RNvXsf_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E8to_lanesCs7Qy2jXn7BB4_11rand_chacha:
 1611|   120k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 4] {
 1612|   120k|            let [a, b] = self.0[0].to_lanes();
 1613|   120k|            let [c, d] = self.0[1].to_lanes();
 1614|   120k|            [a, b, c, d]
 1615|   120k|        }
_RNvMsZ_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIE3newCs7Qy2jXn7BB4_11rand_chacha:
   64|  1.69M|            fn new(x: __m128i) -> Self {
   65|  1.69M|                $vec {
   66|  1.69M|                    x,
   67|  1.69M|                    s3: PhantomData,
   68|  1.69M|                    s4: PhantomData,
   69|  1.69M|                    ni: PhantomData,
   70|  1.69M|                }
   71|  1.69M|            }
_RNvXs0_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types5StoreNtB9_14vec256_storageE6unpackCs7Qy2jXn7BB4_11rand_chacha:
 1402|  60.3k|        unsafe fn unpack(p: vec256_storage) -> Self {
 1403|  60.3k|            Self::new(p.avx)
 1404|  60.3k|        }
_RNvXs2_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E10from_lanesCs7Qy2jXn7BB4_11rand_chacha:
 1439|   241k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 2]) -> Self {
 1440|   241k|            Self::new(unsafe { _mm256_setr_m128i(x[0].x, x[1].x) })
 1441|   241k|        }
_RNvXsc_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words3012Cs7Qy2jXn7BB4_11rand_chacha:
 1590|   724k|        fn shuffle_lane_words3012(self) -> Self {
 1591|   724k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0011_1001) })
 1592|   724k|        }
_RNvXsl_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE7extractCs7Qy2jXn7BB4_11rand_chacha:
  519|   120k|    fn extract(self, i: u32) -> u32 {
  520|   120k|        self.to_lanes()[i as usize]
  521|   120k|    }
_RNvXsX_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types5StoreNtB7_14vec128_storageE6unpackCs7Qy2jXn7BB4_11rand_chacha:
   52|   271k|            unsafe fn unpack(x: vec128_storage) -> Self {
   53|   271k|                Self::new(x.sse2)
   54|   271k|            }
_RNvXs6_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right24Cs7Qy2jXn7BB4_11rand_chacha:
 1470|   724k|            fn $name(self) -> Self {
 1471|   724k|                Self::new(unsafe {
 1472|   724k|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|   724k|                })
 1474|   724k|            }
_RNvXsc_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words2301Cs7Qy2jXn7BB4_11rand_chacha:
 1586|   724k|        fn shuffle_lane_words2301(self) -> Self {
 1587|   724k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0100_1110) })
 1588|   724k|        }
_RNvXsr_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs9nhK3FOW46N_4core3ops3bit6BitXor6bitxorCs7Qy2jXn7BB4_11rand_chacha:
 1543|  2.89M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  2.89M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  2.89M|                }
_RNvXsj_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2NtB9_14vec512_storageINtNtCs9nhK3FOW46N_4core7convert4FromINtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EE4fromCs7Qy2jXn7BB4_11rand_chacha:
 1683|  30.1k|        fn from(x: u32x4x4_avx2<NI>) -> Self {
 1684|  30.1k|            Self {
 1685|  30.1k|                avx: [
 1686|  30.1k|                    vec256_storage { avx: x.0[0].x },
 1687|  30.1k|                    vec256_storage { avx: x.0[1].x },
 1688|  30.1k|                ],
 1689|  30.1k|            }
 1690|  30.1k|        }
_RNvXsY_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2NtB7_14vec128_storageINtNtCs9nhK3FOW46N_4core7convert4FromINtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEE4fromCs7Qy2jXn7BB4_11rand_chacha:
   58|  30.4k|            fn from(x: $vec<S3, S4, NI>) -> Self {
   59|  30.4k|                vec128_storage { sse2: x.x }
   60|  30.4k|            }

_RINvXs2_NtNtCs55N2eBX4uiz_4rand13distributions7integerNtB8_8StandardINtNtB8_12distribution12DistributionoE6sampleNtNtNtBa_4rngs6thread9ThreadRngECsgLOhukngm62_5oxttl:
   51|   482k|    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u128 {
   52|   482k|        // Use LE; we explicitly generate one value before the next.
   53|   482k|        let x = u128::from(rng.next_u64());
   54|   482k|        let y = u128::from(rng.next_u64());
   55|   482k|        (y << 64) | x
   56|   482k|    }

_RINvCs55N2eBX4uiz_4rand6randomoECsgLOhukngm62_5oxttl:
  183|   482k|pub fn random<T>() -> T
  184|   482k|where Standard: Distribution<T> {
  185|   482k|    thread_rng().gen()
  186|   482k|}

_RINvYNtNtNtCs55N2eBX4uiz_4rand4rngs6thread9ThreadRngNtNtB9_3rng3Rng3genoECsgLOhukngm62_5oxttl:
   93|   482k|    fn gen<T>(&mut self) -> T
   94|   482k|    where Standard: Distribution<T> {
   95|   482k|        Standard.sample(self)
   96|   482k|    }

_RNvXs_NtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseedingINtB4_12ReseedingRngNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtCs59ZXsH8airK_9rand_core2os5OsRngENtB24_7RngCore8next_u64CsgLOhukngm62_5oxttl:
  124|   965k|    fn next_u64(&mut self) -> u64 {
  125|   965k|        self.0.next_u64()
  126|   965k|    }
_RNvNtNtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseeding4fork16get_fork_counter:
  307|  30.1k|    pub fn get_fork_counter() -> usize {
  308|  30.1k|        RESEEDING_RNG_FORK_COUNTER.load(Ordering::Relaxed)
  309|  30.1k|    }
_RNCNvNtNtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseeding4fork21register_fork_handler0Bb_:
  319|      1|        REGISTER.call_once(|| {
  320|      1|            // Bump the counter before and after forking (see #1169):
  321|      1|            let ret = unsafe { libc::pthread_atfork(
  322|      1|                Some(fork_handler),
  323|      1|                Some(fork_handler),
  324|      1|                Some(fork_handler),
  325|      1|            ) };
  326|      1|            if ret != 0 {
  327|      0|                panic!("libc::pthread_atfork failed with code {}", ret);
  328|      1|            }
  329|      1|        });
_RNvNtNtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseeding4fork21register_fork_handler:
  317|      1|    pub fn register_fork_handler() {
  318|      1|        static REGISTER: Once = Once::new();
  319|      1|        REGISTER.call_once(|| {
  320|       |            // Bump the counter before and after forking (see #1169):
  321|       |            let ret = unsafe { libc::pthread_atfork(
  322|       |                Some(fork_handler),
  323|       |                Some(fork_handler),
  324|       |                Some(fork_handler),
  325|       |            ) };
  326|       |            if ret != 0 {
  327|       |                panic!("libc::pthread_atfork failed with code {}", ret);
  328|       |            }
  329|      1|        });
  330|      1|    }
_RNvMs3_NtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtCs59ZXsH8airK_9rand_core2os5OsRngE3newBb_:
  193|      1|    fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  194|      1|        use ::core::i64::MAX;
  195|      1|        fork::register_fork_handler();
  196|       |
  197|       |        // Because generating more values than `i64::MAX` takes centuries on
  198|       |        // current hardware, we just clamp to that value.
  199|       |        // Also we set a threshold of 0, which indicates no limit, to that
  200|       |        // value.
  201|      1|        let threshold = if threshold == 0 {
  202|      0|            MAX
  203|      1|        } else if threshold <= MAX as u64 {
  204|      1|            threshold as i64
  205|       |        } else {
  206|      0|            MAX
  207|       |        };
  208|       |
  209|      1|        ReseedingCore {
  210|      1|            inner: rng,
  211|      1|            reseeder,
  212|      1|            threshold: threshold as i64,
  213|      1|            bytes_until_reseed: threshold as i64,
  214|      1|            fork_counter: 0,
  215|      1|        }
  216|      1|    }
_RNvMs3_NtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtCs59ZXsH8airK_9rand_core2os5OsRngE19reseed_and_generateBb_:
  241|    117|    fn reseed_and_generate(
  242|    117|        &mut self, results: &mut <Self as BlockRngCore>::Results, global_fork_counter: usize,
  243|    117|    ) {
  244|    117|        #![allow(clippy::if_same_then_else)] // false positive
  245|    117|        if self.is_forked(global_fork_counter) {
  246|      0|            info!("Fork detected, reseeding RNG");
  247|    117|        } else {
  248|    117|            trace!("Reseeding RNG (periodic reseed)");
  249|    117|        }
  250|       |
  251|    117|        let num_bytes = results.as_ref().len() * size_of::<<R as BlockRngCore>::Item>();
  252|       |
  253|    117|        if let Err(e) = self.reseed() {
  254|      0|            warn!("Reseeding RNG failed: {}", e);
  255|      0|            let _ = e;
  256|    117|        }
  257|    117|        self.fork_counter = global_fork_counter;
  258|    117|
  259|    117|        self.bytes_until_reseed = self.threshold - num_bytes as i64;
  260|    117|        self.inner.generate(results);
  261|    117|    }
_RNvMs3_NtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtCs59ZXsH8airK_9rand_core2os5OsRngE6reseedBb_:
  219|    117|    fn reseed(&mut self) -> Result<(), Error> {
  220|    117|        R::from_rng(&mut self.reseeder).map(|result| {
  221|       |            self.bytes_until_reseed = self.threshold;
  222|       |            self.inner = result
  223|    117|        })
  224|    117|    }
_RNvMs3_NtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtCs59ZXsH8airK_9rand_core2os5OsRngE9is_forkedBb_:
  226|  30.1k|    fn is_forked(&self, global_fork_counter: usize) -> bool {
  227|  30.1k|        // In theory, on 32-bit platforms, it is possible for
  228|  30.1k|        // `global_fork_counter` to wrap around after ~4e9 forks.
  229|  30.1k|        //
  230|  30.1k|        // This check will detect a fork in the normal case where
  231|  30.1k|        // `fork_counter < global_fork_counter`, and also when the difference
  232|  30.1k|        // between both is greater than `isize::MAX` (wrapped around).
  233|  30.1k|        //
  234|  30.1k|        // It will still fail to detect a fork if there have been more than
  235|  30.1k|        // `isize::MAX` forks, without any reseed in between. Seems unlikely
  236|  30.1k|        // enough.
  237|  30.1k|        (self.fork_counter.wrapping_sub(global_fork_counter) as isize) < 0
  238|  30.1k|    }
_RNvXs2_NtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtCs59ZXsH8airK_9rand_core2os5OsRngENtNtB26_5block12BlockRngCore8generateBb_:
  173|  30.1k|    fn generate(&mut self, results: &mut Self::Results) {
  174|  30.1k|        let global_fork_counter = fork::get_fork_counter();
  175|  30.1k|        if self.bytes_until_reseed <= 0 || self.is_forked(global_fork_counter) {
  176|       |            // We get better performance by not calling only `reseed` here
  177|       |            // and continuing with the rest of the function, but by directly
  178|       |            // returning from a non-inlined function.
  179|    117|            return self.reseed_and_generate(results, global_fork_counter);
  180|  30.0k|        }
  181|  30.0k|        let num_bytes = results.as_ref().len() * size_of::<Self::Item>();
  182|  30.0k|        self.bytes_until_reseed -= num_bytes as i64;
  183|  30.0k|        self.inner.generate(results);
  184|  30.1k|    }
_RNCNvMs3_NtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseedingINtB7_13ReseedingCoreNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtCs59ZXsH8airK_9rand_core2os5OsRngE6reseed0Bd_:
  220|    117|        R::from_rng(&mut self.reseeder).map(|result| {
  221|    117|            self.bytes_until_reseed = self.threshold;
  222|    117|            self.inner = result
  223|    117|        })
_RNvMNtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseedingINtB2_12ReseedingRngNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtCs59ZXsH8airK_9rand_core2os5OsRngE3newB8_:
  101|      1|    pub fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  102|      1|        ReseedingRng(BlockRng::new(ReseedingCore::new(rng, threshold, reseeder)))
  103|      1|    }

_RNvXs_NtNtCs55N2eBX4uiz_4rand4rngs6threadNtB4_9ThreadRngNtCs59ZXsH8airK_9rand_core7RngCore8next_u64:
  109|   965k|    fn next_u64(&mut self) -> u64 {
  110|   965k|        // SAFETY: We must make sure to stop using `rng` before anyone else
  111|   965k|        // creates another mutable reference
  112|   965k|        let rng = unsafe { &mut *self.rng.get() };
  113|   965k|        rng.next_u64()
  114|   965k|    }
_RNCNvNtNtCs55N2eBX4uiz_4rand4rngs6thread10thread_rng0B7_:
   89|   482k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
_RNCNvNvNtNtCs55N2eBX4uiz_4rand4rngs6thread14THREAD_RNG_KEY7___getit0B9_:
   67|      1|thread_local!(
   68|      1|    // We require Rc<..> to avoid premature freeing when thread_rng is used
   69|      1|    // within thread-local destructors. See #968.
   70|      1|    static THREAD_RNG_KEY: Rc<UnsafeCell<ReseedingRng<Core, OsRng>>> = {
   71|      1|        let r = Core::from_rng(OsRng).unwrap_or_else(|err|
   72|      1|                panic!("could not initialize thread_rng: {}", err));
   73|      1|        let rng = ReseedingRng::new(r,
   74|      1|                                    THREAD_RNG_RESEED_THRESHOLD,
   75|      1|                                    OsRng);
   76|      1|        Rc::new(UnsafeCell::new(rng))
   77|      1|    }
   78|      1|);
_RNvNtNtCs55N2eBX4uiz_4rand4rngs6thread10thread_rng:
   88|   482k|pub fn thread_rng() -> ThreadRng {
   89|   482k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
   90|   482k|    ThreadRng { rng }
   91|   482k|}

_RNvXsm_NtCs7Qy2jXn7BB4_11rand_chacha6chachaNtB5_12ChaCha12CoreNtNtCs59ZXsH8airK_9rand_core5block12BlockRngCore8generateCs55N2eBX4uiz_4rand:
   89|  30.1k|            fn generate(&mut self, r: &mut Self::Results) {
   90|  30.1k|                // Fill slice of words by writing to equivalent slice of bytes, then fixing endianness.
   91|  30.1k|                self.state.refill4($rounds, unsafe {
   92|  30.1k|                    &mut *(&mut *r as *mut Array64<u32> as *mut [u8; 256])
   93|  30.1k|                });
   94|  1.93M|                for x in r.as_mut() {
   95|  1.93M|                    *x = x.to_le();
   96|  1.93M|                }
   97|  30.1k|            }
_RNvXsn_NtCs7Qy2jXn7BB4_11rand_chacha6chachaNtB5_12ChaCha12CoreNtCs59ZXsH8airK_9rand_core11SeedableRng9from_seedCs55N2eBX4uiz_4rand:
  103|    118|            fn from_seed(seed: Self::Seed) -> Self {
  104|    118|                $ChaChaXCore { state: ChaCha::new(&seed, &[0u8; 8]) }
  105|    118|            }
_RNvXs_NtCs7Qy2jXn7BB4_11rand_chacha6chachaINtB4_7Array64mEINtNtCs9nhK3FOW46N_4core7convert5AsRefSmE6as_refB6_:
   46|  1.99M|    fn as_ref(&self) -> &[T] {
   47|  1.99M|        &self.0
   48|  1.99M|    }
_RNvXs0_NtCs7Qy2jXn7BB4_11rand_chacha6chachaINtB5_7Array64mEINtNtCs9nhK3FOW46N_4core7convert5AsMutSmE6as_mutB7_:
   51|  30.1k|    fn as_mut(&mut self) -> &mut [T] {
   52|  30.1k|        &mut self.0
   53|  30.1k|    }
_RNvXNtCs7Qy2jXn7BB4_11rand_chacha6chachaINtB2_7Array64mENtNtCs9nhK3FOW46N_4core7default7Default7defaultB4_:
   32|      1|    fn default() -> Self {
   33|      1|        Self([
   34|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   35|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   36|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   37|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   38|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   39|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   40|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   41|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   42|      1|        ])
   43|      1|    }

_RNvMNtCs7Qy2jXn7BB4_11rand_chacha4gutsNtB2_6ChaCha7refill4:
   84|  30.1k|    pub fn refill4(&mut self, drounds: u32, out: &mut [u8; BUFSZ]) {
   85|  30.1k|        refill_wide(self, drounds, out)
   86|  30.1k|    }
_RNvMNtCs7Qy2jXn7BB4_11rand_chacha4gutsNtB2_6ChaCha3new:
   72|    118|    pub fn new(key: &[u8; 32], nonce: &[u8]) -> Self {
   73|    118|        init_chacha(key, nonce)
   74|    118|    }
_RINvNtCs7Qy2jXn7BB4_11rand_chacha4guts13undiagonalizeINtNtCsf8HyAzZvOrI_10ppv_lite864soft2x2INtNtNtNtBU_6x86_644sse24avx212u32x4x2_avx2NtB1z_4NoNIENtB1x_2G0EEB4_:
   63|   181k|pub(crate) fn undiagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   64|   181k|    x.b = x.b.shuffle_lane_words1230();
   65|   181k|    x.c = x.c.shuffle_lane_words2301();
   66|   181k|    x.d = x.d.shuffle_lane_words3012();
   67|   181k|    x
   68|   181k|}
_RINvNtCs7Qy2jXn7BB4_11rand_chacha4guts11diagonalizeINtNtCsf8HyAzZvOrI_10ppv_lite864soft2x2INtNtNtNtBS_6x86_644sse24avx212u32x4x2_avx2NtB1x_4NoNIENtB1v_2G0EEB4_:
   56|   181k|pub(crate) fn diagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   57|   181k|    x.b = x.b.shuffle_lane_words3012();
   58|   181k|    x.c = x.c.shuffle_lane_words2301();
   59|   181k|    x.d = x.d.shuffle_lane_words1230();
   60|   181k|    x
   61|   181k|}
_RINvNvNtCs7Qy2jXn7BB4_11rand_chacha4guts11init_chacha7fn_implINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6410SseMachineNtB10_5YesS3NtB10_5YesS4NtB10_4NoNIEEB6_:
  235|    118|    fn init_chacha(key: &[u8; 32], nonce: &[u8]) -> ChaCha {
  236|    118|        let ctr_nonce = [
  237|       |            0,
  238|    118|            if nonce.len() == 12 {
  239|      0|                read_u32le(&nonce[0..4])
  240|       |            } else {
  241|    118|                0
  242|       |            },
  243|    118|            read_u32le(&nonce[nonce.len() - 8..nonce.len() - 4]),
  244|    118|            read_u32le(&nonce[nonce.len() - 4..]),
  245|    118|        ];
  246|    118|        let key0: Mach::u32x4 = m.read_le(&key[..16]);
  247|    118|        let key1: Mach::u32x4 = m.read_le(&key[16..]);
  248|    118|        ChaCha {
  249|    118|            b: key0.into(),
  250|    118|            c: key1.into(),
  251|    118|            d: ctr_nonce.into(),
  252|    118|        }
_RINvNtCs7Qy2jXn7BB4_11rand_chacha4guts16refill_wide_implINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtBV_4NoNIEEB4_:
  116|  30.1k|fn refill_wide_impl<Mach: Machine>(
  117|  30.1k|    m: Mach, state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ],
  118|  30.1k|) {
  119|  30.1k|    let k = m.vec([0x6170_7865, 0x3320_646e, 0x7962_2d32, 0x6b20_6574]);
  120|  30.1k|    let mut pos = state.pos64(m);
  121|  30.1k|    let d0: Mach::u32x4 = m.unpack(state.d);
  122|  30.1k|    pos = pos.wrapping_add(1);
  123|  30.1k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  124|  30.1k|    pos = pos.wrapping_add(1);
  125|  30.1k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  126|  30.1k|    pos = pos.wrapping_add(1);
  127|  30.1k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  128|  30.1k|
  129|  30.1k|    let b = m.unpack(state.b);
  130|  30.1k|    let c = m.unpack(state.c);
  131|  30.1k|    let mut x = State {
  132|  30.1k|        a: Mach::u32x4x4::from_lanes([k, k, k, k]),
  133|  30.1k|        b: Mach::u32x4x4::from_lanes([b, b, b, b]),
  134|  30.1k|        c: Mach::u32x4x4::from_lanes([c, c, c, c]),
  135|  30.1k|        d: m.unpack(Mach::u32x4x4::from_lanes([d0, d1, d2, d3]).into()),
  136|  30.1k|    };
  137|   181k|    for _ in 0..drounds {
  138|   181k|        x = round(x);
  139|   181k|        x = undiagonalize(round(diagonalize(x)));
  140|   181k|    }
  141|  30.1k|    let mut pos = state.pos64(m);
  142|  30.1k|    let d0: Mach::u32x4 = m.unpack(state.d);
  143|  30.1k|    pos = pos.wrapping_add(1);
  144|  30.1k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  145|  30.1k|    pos = pos.wrapping_add(1);
  146|  30.1k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  147|  30.1k|    pos = pos.wrapping_add(1);
  148|  30.1k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  149|  30.1k|    pos = pos.wrapping_add(1);
  150|  30.1k|    let d4 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  151|  30.1k|
  152|  30.1k|    let (a, b, c, d) = (
  153|  30.1k|        x.a.to_lanes(),
  154|  30.1k|        x.b.to_lanes(),
  155|  30.1k|        x.c.to_lanes(),
  156|  30.1k|        x.d.to_lanes(),
  157|  30.1k|    );
  158|  30.1k|    let sb = m.unpack(state.b);
  159|  30.1k|    let sc = m.unpack(state.c);
  160|  30.1k|    let sd = [m.unpack(state.d), d1, d2, d3];
  161|  30.1k|    state.d = d4.into();
  162|  30.1k|    let mut words = out.chunks_exact_mut(16);
  163|   120k|    for ((((&a, &b), &c), &d), &sd) in a.iter().zip(&b).zip(&c).zip(&d).zip(&sd) {
  164|   120k|        (a + k).write_le(words.next().unwrap());
  165|   120k|        (b + sb).write_le(words.next().unwrap());
  166|   120k|        (c + sc).write_le(words.next().unwrap());
  167|   120k|        (d + sd).write_le(words.next().unwrap());
  168|   120k|    }
  169|  30.1k|}
_RNvNtCs7Qy2jXn7BB4_11rand_chacha4guts10read_u32le:
  229|    236|fn read_u32le(xs: &[u8]) -> u32 {
  230|    236|    assert_eq!(xs.len(), 4);
  231|    236|    u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24)
  232|    236|}
_RINvMNtCs7Qy2jXn7BB4_11rand_chacha4gutsNtB3_6ChaCha5pos64INtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtBW_4NoNIEEB5_:
   77|  60.3k|    fn pos64<M: Machine>(&self, m: M) -> u64 {
   78|  60.3k|        let d: M::u32x4 = m.unpack(self.d);
   79|  60.3k|        ((d.extract(1) as u64) << 32) | d.extract(0) as u64
   80|  60.3k|    }
_RINvNvNtCs7Qy2jXn7BB4_11rand_chacha4guts11refill_wide7fn_implINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtB10_4NoNIEEB6_:
  172|  30.1k|    fn refill_wide(state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ]) {
  173|  30.1k|        refill_wide_impl(m, state, drounds, out);
  174|  30.1k|    }
_RINvNtCs7Qy2jXn7BB4_11rand_chacha4guts5roundINtNtCsf8HyAzZvOrI_10ppv_lite864soft2x2INtNtNtNtBL_6x86_644sse24avx212u32x4x2_avx2NtB1q_4NoNIENtB1o_2G0EEB4_:
   43|   362k|pub(crate) fn round<V: ArithOps + BitOps32>(mut x: State<V>) -> State<V> {
   44|   362k|    x.a += x.b;
   45|   362k|    x.d = (x.d ^ x.a).rotate_each_word_right16();
   46|   362k|    x.c += x.d;
   47|   362k|    x.b = (x.b ^ x.c).rotate_each_word_right20();
   48|   362k|    x.a += x.b;
   49|   362k|    x.d = (x.d ^ x.a).rotate_each_word_right24();
   50|   362k|    x.c += x.d;
   51|   362k|    x.b = (x.b ^ x.c).rotate_each_word_right25();
   52|   362k|    x
   53|   362k|}

_RNCNvXs0_NtCs59ZXsH8airK_9rand_core5blockINtB7_8BlockRngINtNtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtB9_2os5OsRngEENtB9_7RngCore8next_u640CsgLOhukngm62_5oxttl:
  198|   965k|        let read_u64 = |results: &[u32], index| {
  199|   965k|            let data = &results[index..=index + 1];
  200|   965k|            u64::from(data[1]) << 32 | u64::from(data[0])
  201|   965k|        };
_RNvXs0_NtCs59ZXsH8airK_9rand_core5blockINtB5_8BlockRngINtNtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtB7_2os5OsRngEENtB7_7RngCore8next_u64CsgLOhukngm62_5oxttl:
  197|   965k|    fn next_u64(&mut self) -> u64 {
  198|   965k|        let read_u64 = |results: &[u32], index| {
  199|       |            let data = &results[index..=index + 1];
  200|       |            u64::from(data[1]) << 32 | u64::from(data[0])
  201|       |        };
  202|       |
  203|   965k|        let len = self.results.as_ref().len();
  204|   965k|
  205|   965k|        let index = self.index;
  206|   965k|        if index < len - 1 {
  207|   935k|            self.index += 2;
  208|   935k|            // Read an u64 from the current index
  209|   935k|            read_u64(self.results.as_ref(), index)
  210|  30.1k|        } else if index >= len {
  211|  30.1k|            self.generate_and_set(2);
  212|  30.1k|            read_u64(self.results.as_ref(), 0)
  213|       |        } else {
  214|      0|            let x = u64::from(self.results.as_ref()[len - 1]);
  215|      0|            self.generate_and_set(1);
  216|      0|            let y = u64::from(self.results.as_ref()[0]);
  217|      0|            (y << 32) | x
  218|       |        }
  219|   965k|    }
_RNvMs_NtCs59ZXsH8airK_9rand_core5blockINtB4_8BlockRngINtNtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE16generate_and_setBY_:
  174|  30.1k|    pub fn generate_and_set(&mut self, index: usize) {
  175|  30.1k|        assert!(index < self.results.as_ref().len());
  176|  30.1k|        self.core.generate(&mut self.results);
  177|  30.1k|        self.index = index;
  178|  30.1k|    }
_RNvMs_NtCs59ZXsH8airK_9rand_core5blockINtB4_8BlockRngINtNtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE3newBY_:
  145|      1|    pub fn new(core: R) -> BlockRng<R> {
  146|      1|        let results_empty = R::Results::default();
  147|      1|        BlockRng {
  148|      1|            core,
  149|      1|            index: results_empty.as_ref().len(),
  150|      1|            results: results_empty,
  151|      1|        }
  152|      1|    }

_RINvYNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtCs59ZXsH8airK_9rand_core11SeedableRng8from_rngQNtNtBV_2os5OsRngECs55N2eBX4uiz_4rand:
  390|    117|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|    117|        let mut seed = Self::Seed::default();
  392|    117|        rng.try_fill_bytes(seed.as_mut())?;
  393|    117|        Ok(Self::from_seed(seed))
  394|    117|    }
_RNvXs_Cs59ZXsH8airK_9rand_coreQNtNtB4_2os5OsRngNtB4_7RngCore14try_fill_bytesCs55N2eBX4uiz_4rand:
  441|    117|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
  442|    117|        (**self).try_fill_bytes(dest)
  443|    117|    }
_RINvYNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtCs59ZXsH8airK_9rand_core11SeedableRng8from_rngNtNtBV_2os5OsRngECs55N2eBX4uiz_4rand:
  390|      1|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|      1|        let mut seed = Self::Seed::default();
  392|      1|        rng.try_fill_bytes(seed.as_mut())?;
  393|      1|        Ok(Self::from_seed(seed))
  394|      1|    }

_RNvXs_NtCs59ZXsH8airK_9rand_core2osNtB4_5OsRngNtB6_7RngCore14try_fill_bytes:
   67|    118|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
   68|    118|        getrandom(dest)?;
   69|    118|        Ok(())
   70|    118|    }

_RNvNvNtNtCs55N2eBX4uiz_4rand4rngs6thread14THREAD_RNG_KEY7___getitB7_:
   83|   482k|            unsafe fn __getit(
   84|   482k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|   482k|            ) -> $crate::option::Option<&'static $t> {
   86|   482k|                #[thread_local]
   87|   482k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|   482k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|   482k|
   90|   482k|                unsafe {
   91|   482k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|   482k|                    })
  101|   482k|                }
  102|   482k|            }
_RNvNvNtNtCs55N2eBX4uiz_4rand4rngs6thread14THREAD_RNG_KEY6___initB7_:
   80|      1|            fn __init() -> $t { $init }

_RINvCs7hwCOMDGQov_4trig5parseINtNtNtCs9nhK3FOW46N_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_runs0_0EEB2_:
    8|  6.79k|fn parse<'a>(
    9|  6.79k|    chunks: impl IntoIterator<Item = &'a [u8]>,
   10|  6.79k|    unchecked: bool,
   11|  6.79k|) -> (Vec<Quad>, Vec<String>, Vec<(String, String)>) {
   12|  6.79k|    let mut quads = Vec::new();
   13|  6.79k|    let mut errors = Vec::new();
   14|  6.79k|    let mut parser = TriGParser::new()
   15|  6.79k|        .with_quoted_triples()
   16|  6.79k|        .with_base_iri("http://example.com/")
   17|  6.79k|        .unwrap();
   18|  6.79k|    if unchecked {
   19|  6.79k|        parser = parser.unchecked();
   20|  6.79k|    }
   21|  6.79k|    let mut reader = parser.parse();
   22|   623k|    for chunk in chunks {
   23|   616k|        reader.extend_from_slice(chunk);
   24|  1.19M|        while let Some(result) = reader.read_next() {
   25|   582k|            match result {
   26|   123k|                Ok(quad) => quads.push(quad),
   27|   459k|                Err(error) => errors.push(error.to_string()),
   28|       |            }
   29|       |        }
   30|       |    }
   31|  6.79k|    reader.end();
   32|  10.6k|    while let Some(result) = reader.read_next() {
   33|  3.88k|        match result {
   34|    198|            Ok(quad) => quads.push(quad),
   35|  3.69k|            Err(error) => errors.push(error.to_string()),
   36|       |        }
   37|       |    }
   38|  6.79k|    assert!(reader.is_end());
   39|  6.79k|    (
   40|  6.79k|        quads,
   41|  6.79k|        errors,
   42|  6.79k|        reader
   43|  6.79k|            .prefixes()
   44|  6.79k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
   45|  6.79k|            .collect(),
   46|  6.79k|    )
   47|  6.79k|}
_RNCINvCs7hwCOMDGQov_4trig5parseARShj1_E0B4_:
   44|    955|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
_RNCINvCs7hwCOMDGQov_4trig5parseINtNtNtCs9nhK3FOW46N_4core5slice4iter5SplithNCNvNvB4_1__19___libfuzzer_sys_run0EE0B4_:
   44|    955|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
_RNCINvCs7hwCOMDGQov_4trig5parseINtNtNtCs9nhK3FOW46N_4core5slice4iter5SplithNCNvNvB4_1__19___libfuzzer_sys_runs0_0EE0B4_:
   44|  1.12k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
_RNCNvNvCs7hwCOMDGQov_4trig1__19___libfuzzer_sys_runs_0B5_:
   93|  3.47M|            .filter(|c| *c != 0xFF)
_RNCNvNvCs7hwCOMDGQov_4trig1__19___libfuzzer_sys_runs0_0B5_:
   98|  3.47M|    let (quads_unchecked, errors_unchecked, _) = parse(data.split(|c| *c == 0xFF), true);
_RINvCs7hwCOMDGQov_4trig5parseARShj1_EB2_:
    8|  6.79k|fn parse<'a>(
    9|  6.79k|    chunks: impl IntoIterator<Item = &'a [u8]>,
   10|  6.79k|    unchecked: bool,
   11|  6.79k|) -> (Vec<Quad>, Vec<String>, Vec<(String, String)>) {
   12|  6.79k|    let mut quads = Vec::new();
   13|  6.79k|    let mut errors = Vec::new();
   14|  6.79k|    let mut parser = TriGParser::new()
   15|  6.79k|        .with_quoted_triples()
   16|  6.79k|        .with_base_iri("http://example.com/")
   17|  6.79k|        .unwrap();
   18|  6.79k|    if unchecked {
   19|      0|        parser = parser.unchecked();
   20|  6.79k|    }
   21|  6.79k|    let mut reader = parser.parse();
   22|  13.5k|    for chunk in chunks {
   23|  6.79k|        reader.extend_from_slice(chunk);
   24|   595k|        while let Some(result) = reader.read_next() {
   25|   589k|            match result {
   26|   118k|                Ok(quad) => quads.push(quad),
   27|   470k|                Err(error) => errors.push(error.to_string()),
   28|       |            }
   29|       |        }
   30|       |    }
   31|  6.79k|    reader.end();
   32|  10.5k|    while let Some(result) = reader.read_next() {
   33|  3.78k|        match result {
   34|    181|            Ok(quad) => quads.push(quad),
   35|  3.60k|            Err(error) => errors.push(error.to_string()),
   36|       |        }
   37|       |    }
   38|  6.79k|    assert!(reader.is_end());
   39|  6.79k|    (
   40|  6.79k|        quads,
   41|  6.79k|        errors,
   42|  6.79k|        reader
   43|  6.79k|            .prefixes()
   44|  6.79k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
   45|  6.79k|            .collect(),
   46|  6.79k|    )
   47|  6.79k|}
_RINvCs7hwCOMDGQov_4trig5parseINtNtNtCs9nhK3FOW46N_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_run0EEB2_:
    8|  6.79k|fn parse<'a>(
    9|  6.79k|    chunks: impl IntoIterator<Item = &'a [u8]>,
   10|  6.79k|    unchecked: bool,
   11|  6.79k|) -> (Vec<Quad>, Vec<String>, Vec<(String, String)>) {
   12|  6.79k|    let mut quads = Vec::new();
   13|  6.79k|    let mut errors = Vec::new();
   14|  6.79k|    let mut parser = TriGParser::new()
   15|  6.79k|        .with_quoted_triples()
   16|  6.79k|        .with_base_iri("http://example.com/")
   17|  6.79k|        .unwrap();
   18|  6.79k|    if unchecked {
   19|      0|        parser = parser.unchecked();
   20|  6.79k|    }
   21|  6.79k|    let mut reader = parser.parse();
   22|   623k|    for chunk in chunks {
   23|   616k|        reader.extend_from_slice(chunk);
   24|  1.20M|        while let Some(result) = reader.read_next() {
   25|   589k|            match result {
   26|   118k|                Ok(quad) => quads.push(quad),
   27|   470k|                Err(error) => errors.push(error.to_string()),
   28|       |            }
   29|       |        }
   30|       |    }
   31|  6.79k|    reader.end();
   32|  10.5k|    while let Some(result) = reader.read_next() {
   33|  3.78k|        match result {
   34|    181|            Ok(quad) => quads.push(quad),
   35|  3.60k|            Err(error) => errors.push(error.to_string()),
   36|       |        }
   37|       |    }
   38|  6.79k|    assert!(reader.is_end());
   39|  6.79k|    (
   40|  6.79k|        quads,
   41|  6.79k|        errors,
   42|  6.79k|        reader
   43|  6.79k|            .prefixes()
   44|  6.79k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
   45|  6.79k|            .collect(),
   46|  6.79k|    )
   47|  6.79k|}
_RNCNvNvCs7hwCOMDGQov_4trig1__19___libfuzzer_sys_run0B5_:
   87|  3.47M|    let (quads, errors, prefixes) = parse(data.split(|c| *c == 0xFF), false);
_RNvCs7hwCOMDGQov_4trig24count_triple_blank_nodes:
   49|   837k|fn count_triple_blank_nodes(triple: &Triple) -> usize {
   50|   837k|    (match &triple.subject {
   51|    535|        Subject::BlankNode(_) => 1,
   52|   800k|        Subject::Triple(t) => count_triple_blank_nodes(t),
   53|  36.3k|        _ => 0,
   54|   837k|    }) + (match &triple.object {
   55|    939|        Term::BlankNode(_) => 1,
   56|     29|        Term::Triple(t) => count_triple_blank_nodes(t),
   57|   836k|        _ => 0,
   58|       |    })
   59|   837k|}
_RNvCs7hwCOMDGQov_4trig22count_quad_blank_nodes:
   61|   119k|fn count_quad_blank_nodes(quad: &Quad) -> usize {
   62|   119k|    (match &quad.subject {
   63|  70.9k|        Subject::BlankNode(_) => 1,
   64|  35.5k|        Subject::Triple(t) => count_triple_blank_nodes(t),
   65|  12.5k|        _ => 0,
   66|   119k|    }) + (match &quad.object {
   67|  54.6k|        Term::BlankNode(_) => 1,
   68|  1.39k|        Term::Triple(t) => count_triple_blank_nodes(t),
   69|  62.9k|        _ => 0,
   70|   119k|    }) + usize::from(matches!(quad.graph_name, GraphName::BlankNode(_)))
   71|   119k|}
_RNvCs7hwCOMDGQov_4trig15serialize_quads:
   73|  6.79k|fn serialize_quads(quads: &[Quad], prefixes: Vec<(String, String)>) -> Vec<u8> {
   74|  6.79k|    let mut serializer = TriGSerializer::new();
   75|  7.75k|    for (prefix_name, prefix_iri) in prefixes {
   76|    955|        serializer = serializer.with_prefix(prefix_name, prefix_iri).unwrap();
   77|    955|    }
   78|  6.79k|    let mut writer = serializer.serialize_to_write(Vec::new());
   79|   125k|    for quad in quads {
   80|   119k|        writer.write_quad(quad).unwrap();
   81|   119k|    }
   82|  6.79k|    writer.finish().unwrap()
   83|  6.79k|}

_RNvXsH_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_5IdStrNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs7hwCOMDGQov_4trig:
  249|    163|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsb_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCs7hwCOMDGQov_4trig:
   19|   132k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMs7_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_5IdStr3newCs7hwCOMDGQov_4trig:
  254|  65.5k|    fn new(id: u128) -> Self {
  255|  65.5k|        let mut str = [0; 32];
  256|  65.5k|        write!(&mut str[..], "{id:x}").unwrap();
  257|  65.5k|        Self(str)
  258|  65.5k|    }
_RNvXsk_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs7hwCOMDGQov_4trig:
   22|    277|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMs1_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_12BlankNodeRef10into_ownedCs7hwCOMDGQov_4trig:
  203|  66.2k|    pub fn into_owned(self) -> BlankNode {
  204|  66.2k|        BlankNode(match self.0 {
  205|    719|            BlankNodeRefContent::Named(id) => BlankNodeContent::Named(id.to_owned()),
  206|  65.5k|            BlankNodeRefContent::Anonymous { id, .. } => BlankNodeContent::Anonymous {
  207|  65.5k|                id,
  208|  65.5k|                str: IdStr::new(id),
  209|  65.5k|            },
  210|       |        })
  211|  66.2k|    }
_RNvMNtCsaAh6yFmIely_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCs7hwCOMDGQov_4trig:
   87|   218k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   88|   218k|        BlankNodeRef(match &self.0 {
   89|  6.64k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   90|   211k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   91|   211k|                id: *id,
   92|   211k|                str: str.as_str(),
   93|   211k|            },
   94|       |        })
   95|   218k|    }
_RNvXsv_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_19BlankNodeRefContentNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCs7hwCOMDGQov_4trig:
  137|  71.2k|#[derive(PartialEq, Eq, Debug, Clone, Copy, Hash)]
_RNvXsg_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCs7hwCOMDGQov_4trig:
   22|   132k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsD_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_5IdStrNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCs7hwCOMDGQov_4trig:
  249|   129k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsp_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCs7hwCOMDGQov_4trig:
  134|  71.2k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RNvMs7_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_5IdStr6as_strCs7hwCOMDGQov_4trig:
  261|   211k|    fn as_str(&self) -> &str {
  262|   211k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  263|   211k|        str::from_utf8(&self.0[..len]).unwrap()
  264|   211k|    }
_RNvXsd_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs7hwCOMDGQov_4trig:
   19|    277|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RINvMNtCsaAh6yFmIely_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedReECsgLOhukngm62_5oxttl:
   48|   135k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   49|   135k|        let id = id.into();
   50|   135k|        if let Some(numerical_id) = to_integer_id(&id) {
   51|   126k|            Self::new_from_unique_id(numerical_id)
   52|       |        } else {
   53|  8.81k|            Self(BlankNodeContent::Named(id))
   54|       |        }
   55|   135k|    }
_RNvXs2_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsgLOhukngm62_5oxttl:
  216|   122k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  217|   122k|        write!(f, "_:{}", self.as_str())
  218|   122k|    }
_RNvXsk_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsgLOhukngm62_5oxttl:
   22|   642k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMs1_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCsgLOhukngm62_5oxttl:
  175|   122k|    pub const fn as_str(self) -> &'a str {
  176|   122k|        match self.0 {
  177|  1.90k|            BlankNodeRefContent::Named(id) => id,
  178|   120k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  179|       |        }
  180|   122k|    }
_RNvMNtCsaAh6yFmIely_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCsgLOhukngm62_5oxttl:
   87|  1.39k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   88|  1.39k|        BlankNodeRef(match &self.0 {
   89|    356|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   90|  1.03k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   91|  1.03k|                id: *id,
   92|  1.03k|                str: str.as_str(),
   93|  1.03k|            },
   94|       |        })
   95|  1.39k|    }
_RNvMs7_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_5IdStr6as_strCsgLOhukngm62_5oxttl:
  261|   484k|    fn as_str(&self) -> &str {
  262|   484k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  263|   484k|        str::from_utf8(&self.0[..len]).unwrap()
  264|   484k|    }
_RNvXsH_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_5IdStrNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsgLOhukngm62_5oxttl:
  249|   631k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsd_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsgLOhukngm62_5oxttl:
   19|   642k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvNtCsaAh6yFmIely_5oxrdf10blank_node13to_integer_idCsgLOhukngm62_5oxttl:
  327|   135k|fn to_integer_id(id: &str) -> Option<u128> {
  328|   135k|    let digits = id.as_bytes();
  329|   135k|    let mut value: u128 = 0;
  330|   135k|    if let None | Some(b'0') = digits.first() {
  331|  5.11k|        return None; // No empty string or leading zeros
  332|   130k|    }
  333|  3.99M|    for digit in digits {
  334|  3.86M|        value = value.checked_mul(16)?.checked_add(
  335|  3.86M|            match *digit {
  336|  3.86M|                b'0'..=b'9' => digit - b'0',
  337|  1.52M|                b'a'..=b'f' => digit - b'a' + 10,
  338|  3.57k|                _ => return None,
  339|       |            }
  340|  3.86M|            .into(),
  341|      0|        )?;
  342|       |    }
  343|   126k|    Some(value)
  344|   135k|}
_RNvMNtCsaAh6yFmIely_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idCsgLOhukngm62_5oxttl:
   61|   126k|    pub fn new_from_unique_id(id: u128) -> Self {
   62|   126k|        Self(BlankNodeContent::Anonymous {
   63|   126k|            id,
   64|   126k|            str: IdStr::new(id),
   65|   126k|        })
   66|   126k|    }
_RNvMs7_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_5IdStr3newCsgLOhukngm62_5oxttl:
  254|   609k|    fn new(id: u128) -> Self {
  255|   609k|        let mut str = [0; 32];
  256|   609k|        write!(&mut str[..], "{id:x}").unwrap();
  257|   609k|        Self(str)
  258|   609k|    }
_RNvXs0_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs9nhK3FOW46N_4core7default7Default7defaultCsgLOhukngm62_5oxttl:
  108|   193k|    fn default() -> Self {
  109|       |        // We ensure the ID does not start with a number to be also valid with RDF/XML
  110|   482k|        loop {
  111|   482k|            let id = random();
  112|   482k|            let str = IdStr::new(id);
  113|   482k|            if matches!(str.as_str().as_bytes().first(), Some(b'a'..=b'f')) {
  114|   193k|                return Self(BlankNodeContent::Anonymous { id, str });
  115|   289k|            }
  116|       |        }
  117|   193k|    }
_RNvMNtCsaAh6yFmIely_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idB4_:
   61|  6.68k|    pub fn new_from_unique_id(id: u128) -> Self {
   62|  6.68k|        Self(BlankNodeContent::Anonymous {
   63|  6.68k|            id,
   64|  6.68k|            str: IdStr::new(id),
   65|  6.68k|        })
   66|  6.68k|    }
_RNvMs7_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_5IdStr3newB7_:
  254|  7.53k|    fn new(id: u128) -> Self {
  255|  7.53k|        let mut str = [0; 32];
  256|  7.53k|        write!(&mut str[..], "{id:x}").unwrap();
  257|  7.53k|        Self(str)
  258|  7.53k|    }
_RNvMs1_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strB7_:
  175|  13.5k|    pub const fn as_str(self) -> &'a str {
  176|  13.5k|        match self.0 {
  177|    832|            BlankNodeRefContent::Named(id) => id,
  178|  12.7k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  179|       |        }
  180|  13.5k|    }
_RNvMs7_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_5IdStr6as_strB7_:
  261|  8.76k|    fn as_str(&self) -> &str {
  262|  8.76k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  263|  8.76k|        str::from_utf8(&self.0[..len]).unwrap()
  264|  8.76k|    }
_RNvMs1_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_12BlankNodeRef10into_ownedB7_:
  203|  1.03k|    pub fn into_owned(self) -> BlankNode {
  204|  1.03k|        BlankNode(match self.0 {
  205|    176|            BlankNodeRefContent::Named(id) => BlankNodeContent::Named(id.to_owned()),
  206|    854|            BlankNodeRefContent::Anonymous { id, .. } => BlankNodeContent::Anonymous {
  207|    854|                id,
  208|    854|                str: IdStr::new(id),
  209|    854|            },
  210|       |        })
  211|  1.03k|    }
_RNvXsd_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
   19|  7.28k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsk_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
   22|  7.28k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMs1_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_12BlankNodeRef13new_uncheckedB7_:
  162|  3.83k|    pub fn new_unchecked(id: &'a str) -> Self {
  163|  3.83k|        if let Some(numerical_id) = to_integer_id(id) {
  164|  3.83k|            Self(BlankNodeRefContent::Anonymous {
  165|  3.83k|                id: numerical_id,
  166|  3.83k|                str: id,
  167|  3.83k|            })
  168|       |        } else {
  169|      0|            Self(BlankNodeRefContent::Named(id))
  170|       |        }
  171|  3.83k|    }
_RNvNtCsaAh6yFmIely_5oxrdf10blank_node13to_integer_idB3_:
  327|  3.83k|fn to_integer_id(id: &str) -> Option<u128> {
  328|  3.83k|    let digits = id.as_bytes();
  329|  3.83k|    let mut value: u128 = 0;
  330|  3.83k|    if let None | Some(b'0') = digits.first() {
  331|      0|        return None; // No empty string or leading zeros
  332|  3.83k|    }
  333|  64.8k|    for digit in digits {
  334|  60.9k|        value = value.checked_mul(16)?.checked_add(
  335|  60.9k|            match *digit {
  336|  60.9k|                b'0'..=b'9' => digit - b'0',
  337|  21.9k|                b'a'..=b'f' => digit - b'a' + 10,
  338|      0|                _ => return None,
  339|       |            }
  340|  60.9k|            .into(),
  341|      0|        )?;
  342|       |    }
  343|  3.83k|    Some(value)
  344|  3.83k|}
_RNvMs1_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_12BlankNodeRef9unique_idB7_:
  195|  20.4k|    pub const fn unique_id(&self) -> Option<u128> {
  196|  20.4k|        match self.0 {
  197|    832|            BlankNodeRefContent::Named(_) => None,
  198|  19.6k|            BlankNodeRefContent::Anonymous { id, .. } => Some(id),
  199|       |        }
  200|  20.4k|    }
_RNvMNtCsaAh6yFmIely_5oxrdf10blank_nodeNtB2_9BlankNode6as_refB4_:
   87|  8.94k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   88|  8.94k|        BlankNodeRef(match &self.0 {
   89|    176|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   90|  8.76k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   91|  8.76k|                id: *id,
   92|  8.76k|                str: str.as_str(),
   93|  8.76k|            },
   94|       |        })
   95|  8.94k|    }
_RNvXsH_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_5IdStrNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
  249|  5.31k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNCNvMs7_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  262|  22.2M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);

_RINvXs5_NtCsaAh6yFmIely_5oxrdf7datasetNtB6_7DatasetINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendRNtNtB8_6triple4QuadE6extendINtNtNtBW_5slice4iter4IterB1H_EECs7hwCOMDGQov_4trig:
  981|  3.36k|    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  982|  84.1k|        for t in iter {
  983|  80.7k|            self.insert(t);
  984|  80.7k|        }
  985|  3.36k|    }
_RINvMNtCsaAh6yFmIely_5oxrdf7datasetNtB3_7Dataset6insertRNtNtB5_6triple4QuadECs7hwCOMDGQov_4trig:
  360|  80.7k|    pub fn insert<'a>(&mut self, quad: impl Into<QuadRef<'a>>) -> bool {
  361|  80.7k|        let quad = self.encode_quad(quad.into());
  362|  80.7k|        self.insert_encoded(quad)
  363|  80.7k|    }
_RINvXs3_NtCsaAh6yFmIely_5oxrdf7datasetNtB6_7DatasetINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect12FromIteratorRNtNtB8_6triple4QuadE9from_iterINtNtNtBW_5slice4iter4IterB1O_EECs7hwCOMDGQov_4trig:
  965|  3.36k|    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self {
  966|  3.36k|        let mut g = Self::new();
  967|  3.36k|        g.extend(iter);
  968|  3.36k|        g
  969|  3.36k|    }
_RNvMNtCsaAh6yFmIely_5oxrdf7datasetNtB2_7Dataset11hash_triple:
  790|  8.80k|    fn hash_triple(
  791|  8.80k|        &self,
  792|  8.80k|        triple: &InternedTriple,
  793|  8.80k|        current_blank_node: InternedBlankNode,
  794|  8.80k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  795|  8.80k|    ) -> u64 {
  796|  8.80k|        Self::hash_tuple((
  797|  8.80k|            self.hash_subject(&triple.subject, current_blank_node, bnodes_hash),
  798|  8.80k|            self.hash_named_node(triple.predicate),
  799|  8.80k|            self.hash_term(&triple.object, current_blank_node, bnodes_hash),
  800|  8.80k|        ))
  801|  8.80k|    }
_RNvMNtCsaAh6yFmIely_5oxrdf7datasetNtB2_7Dataset12canonicalize:
  539|  3.36k|    pub fn canonicalize(&mut self, algorithm: CanonicalizationAlgorithm) {
  540|  3.36k|        let bnode_mapping = self.canonicalize_interned_blank_nodes(algorithm);
  541|  3.36k|        let new_quads = self.map_blank_nodes(&bnode_mapping);
  542|  3.36k|        self.clear();
  543|  76.8k|        for quad in new_quads {
  544|  73.5k|            self.insert_encoded(quad);
  545|  73.5k|        }
  546|  3.36k|    }
_RNvMNtCsaAh6yFmIely_5oxrdf7datasetNtB2_7Dataset11blank_nodes:
  582|  3.36k|    fn blank_nodes(&self) -> HashSet<InternedBlankNode> {
  583|  3.36k|        let mut bnodes = HashSet::new();
  584|  76.8k|        for (g, s, _, o) in &self.gspo {
  585|  73.5k|            if let InternedSubject::BlankNode(bnode) = s {
  586|  5.64k|                bnodes.insert(*bnode);
  587|  67.8k|            }
  588|       |            #[cfg(feature = "rdf-star")]
  589|  73.5k|            if let InternedSubject::Triple(triple) = s {
  590|  59.6k|                Self::triple_blank_nodes(triple, &mut bnodes);
  591|  59.6k|            }
  592|  73.5k|            if let InternedTerm::BlankNode(bnode) = o {
  593|  1.67k|                bnodes.insert(*bnode);
  594|  71.8k|            }
  595|       |            #[cfg(feature = "rdf-star")]
  596|  73.5k|            if let InternedTerm::Triple(triple) = o {
  597|    798|                Self::triple_blank_nodes(triple, &mut bnodes);
  598|  72.7k|            }
  599|  73.5k|            if let InternedGraphName::BlankNode(bnode) = g {
  600|    326|                bnodes.insert(*bnode);
  601|  73.1k|            }
  602|       |        }
  603|  3.36k|        bnodes
  604|  3.36k|    }
_RNvMNtCsaAh6yFmIely_5oxrdf7datasetNtB2_7Dataset15map_blank_nodes:
  844|  3.36k|    fn map_blank_nodes(
  845|  3.36k|        &mut self,
  846|  3.36k|        bnode_mapping: &HashMap<InternedBlankNode, BlankNode>,
  847|  3.36k|    ) -> Vec<(
  848|  3.36k|        InternedSubject,
  849|  3.36k|        InternedNamedNode,
  850|  3.36k|        InternedTerm,
  851|  3.36k|        InternedGraphName,
  852|  3.36k|    )> {
  853|  3.36k|        let old_quads: Vec<_> = self.spog.iter().cloned().collect();
  854|  3.36k|        old_quads
  855|  3.36k|            .into_iter()
  856|  3.36k|            .map(|(s, p, o, g)| {
  857|       |                (
  858|       |                    match s {
  859|       |                        InternedSubject::NamedNode(_) => s,
  860|       |                        InternedSubject::BlankNode(bnode) => {
  861|       |                            InternedSubject::BlankNode(InternedBlankNode::encoded_into(
  862|       |                                bnode_mapping[&bnode].as_ref(),
  863|       |                                &mut self.interner,
  864|       |                            ))
  865|       |                        }
  866|       |                        #[cfg(feature = "rdf-star")]
  867|       |                        InternedSubject::Triple(triple) => {
  868|       |                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  869|       |                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  870|       |                                &mut self.interner,
  871|       |                            )))
  872|       |                        }
  873|       |                    },
  874|       |                    p,
  875|       |                    match o {
  876|       |                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  877|       |                        InternedTerm::BlankNode(bnode) => {
  878|       |                            InternedTerm::BlankNode(InternedBlankNode::encoded_into(
  879|       |                                bnode_mapping[&bnode].as_ref(),
  880|       |                                &mut self.interner,
  881|       |                            ))
  882|       |                        }
  883|       |                        #[cfg(feature = "rdf-star")]
  884|       |                        InternedTerm::Triple(triple) => {
  885|       |                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  886|       |                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  887|       |                                &mut self.interner,
  888|       |                            )))
  889|       |                        }
  890|       |                    },
  891|       |                    match g {
  892|       |                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  893|       |                        InternedGraphName::BlankNode(bnode) => {
  894|       |                            InternedGraphName::BlankNode(InternedBlankNode::encoded_into(
  895|       |                                bnode_mapping[&bnode].as_ref(),
  896|       |                                &mut self.interner,
  897|       |                            ))
  898|       |                        }
  899|       |                    },
  900|       |                )
  901|  3.36k|            })
  902|  3.36k|            .collect()
  903|  3.36k|    }
_RNvXsg_NtCsaAh6yFmIely_5oxrdf7datasetNtB5_4IterNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next:
 1551|  38.4k|    fn next(&mut self) -> Option<Self::Item> {
 1552|  38.4k|        self.inner
 1553|  38.4k|            .next()
 1554|  38.4k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))
 1555|  38.4k|    }
_RNvXsj_NtCsaAh6yFmIely_5oxrdf7datasetNtB5_7DatasetNtNtCs9nhK3FOW46N_4core7default7Default7defaultB7_:
   66|  3.36k|#[derive(Debug, Default, Clone)]
_RNvMNtCsaAh6yFmIely_5oxrdf7datasetNtB2_7Dataset11decode_spog:
  479|  36.7k|    fn decode_spog(
  480|  36.7k|        &self,
  481|  36.7k|        quad: (
  482|  36.7k|            &InternedSubject,
  483|  36.7k|            &InternedNamedNode,
  484|  36.7k|            &InternedTerm,
  485|  36.7k|            &InternedGraphName,
  486|  36.7k|        ),
  487|  36.7k|    ) -> QuadRef<'_> {
  488|  36.7k|        QuadRef {
  489|  36.7k|            subject: quad.0.decode_from(&self.interner),
  490|  36.7k|            predicate: quad.1.decode_from(&self.interner),
  491|  36.7k|            object: quad.2.decode_from(&self.interner),
  492|  36.7k|            graph_name: quad.3.decode_from(&self.interner),
  493|  36.7k|        }
  494|  36.7k|    }
_RNvMNtCsaAh6yFmIely_5oxrdf7datasetNtB2_7Dataset15hash_graph_name:
  772|  50.1k|    fn hash_graph_name(
  773|  50.1k|        &self,
  774|  50.1k|        graph_name: &InternedGraphName,
  775|  50.1k|        current_blank_node: InternedBlankNode,
  776|  50.1k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  777|  50.1k|    ) -> u64 {
  778|  50.1k|        match graph_name {
  779|  6.73k|            InternedGraphName::NamedNode(node) => {
  780|  6.73k|                Self::hash_tuple(node.decode_from(&self.interner))
  781|       |            }
  782|  3.58k|            InternedGraphName::BlankNode(bnode) => {
  783|  3.58k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  784|       |            }
  785|  39.8k|            InternedGraphName::DefaultGraph => 0,
  786|       |        }
  787|  50.1k|    }
_RNvXs_NtCsaAh6yFmIely_5oxrdf7datasetNtB4_7DatasetNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eq:
  932|  1.68k|    fn eq(&self, other: &Self) -> bool {
  933|  1.68k|        if self.len() != other.len() {
  934|      0|            return false;
  935|  1.68k|        }
  936|  38.4k|        for q in self {
  937|  36.7k|            if !other.contains(q) {
  938|      0|                return false;
  939|  36.7k|            }
  940|       |        }
  941|  1.68k|        true
  942|  1.68k|    }
_RNvXs1_NtCsaAh6yFmIely_5oxrdf7datasetRNtB5_7DatasetNtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect12IntoIterator9into_iter:
  951|  1.68k|    fn into_iter(self) -> Self::IntoIter {
  952|  1.68k|        self.iter()
  953|  1.68k|    }
_RNvMNtCsaAh6yFmIely_5oxrdf7datasetNtB2_7Dataset3len:
  350|  3.36k|    pub fn len(&self) -> usize {
  351|  3.36k|        self.gspo.len()
  352|  3.36k|    }
_RNvMNtCsaAh6yFmIely_5oxrdf7datasetNtB2_7Dataset33canonicalize_interned_blank_nodes:
  562|  3.36k|    fn canonicalize_interned_blank_nodes(
  563|  3.36k|        &self,
  564|  3.36k|        algorithm: CanonicalizationAlgorithm,
  565|  3.36k|    ) -> HashMap<InternedBlankNode, BlankNode> {
  566|  3.36k|        match algorithm {
  567|  3.36k|            CanonicalizationAlgorithm::Unstable => {
  568|  3.36k|                let bnodes = self.blank_nodes();
  569|  3.36k|                let quads_per_blank_node = self.quads_per_blank_nodes();
  570|  3.36k|                let (hash, partition) = self.hash_bnodes(
  571|  3.36k|                    bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
  572|  3.36k|                    &quads_per_blank_node,
  573|  3.36k|                );
  574|  3.36k|                self.distinguish(hash, &partition, &quads_per_blank_node)
  575|  3.36k|                    .into_iter()
  576|  3.36k|                    .map(|(from, to)| (from, BlankNode::new_from_unique_id(to.into())))
  577|  3.36k|                    .collect()
  578|  3.36k|            }
  579|  3.36k|        }
  580|  3.36k|    }
_RNvMNtCsaAh6yFmIely_5oxrdf7datasetNtB2_7Dataset55add_quad_with_quoted_triple_to_quad_per_blank_nodes_map:
  645|  1.45M|    fn add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(
  646|  1.45M|        quad: &(
  647|  1.45M|            InternedSubject,
  648|  1.45M|            InternedNamedNode,
  649|  1.45M|            InternedTerm,
  650|  1.45M|            InternedGraphName,
  651|  1.45M|        ),
  652|  1.45M|        triple: &InternedTriple,
  653|  1.45M|        map: &mut QuadsPerBlankNode,
  654|  1.45M|    ) {
  655|  1.45M|        if let InternedSubject::BlankNode(bnode) = &triple.subject {
  656|    244|            map.entry(*bnode).or_default().push(quad.clone());
  657|  1.45M|        }
  658|  1.45M|        if let InternedSubject::Triple(t) = &triple.subject {
  659|  1.39M|            Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, map);
  660|  1.39M|        }
  661|  1.45M|        if let InternedTerm::BlankNode(bnode) = &triple.object {
  662|    270|            map.entry(*bnode).or_default().push(quad.clone());
  663|  1.45M|        }
  664|  1.45M|        if let InternedTerm::Triple(t) = &triple.object {
  665|     30|            Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, map);
  666|  1.45M|        }
  667|  1.45M|    }
_RNvMNtCsaAh6yFmIely_5oxrdf7datasetNtB2_7Dataset12hash_subject:
  735|  58.9k|    fn hash_subject(
  736|  58.9k|        &self,
  737|  58.9k|        node: &InternedSubject,
  738|  58.9k|        current_blank_node: InternedBlankNode,
  739|  58.9k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  740|  58.9k|    ) -> u64 {
  741|  58.9k|        match node {
  742|  17.3k|            InternedSubject::NamedNode(node) => Self::hash_tuple(node.decode_from(&self.interner)),
  743|  39.6k|            InternedSubject::BlankNode(bnode) => {
  744|  39.6k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  745|       |            }
  746|       |            #[cfg(feature = "rdf-star")]
  747|  1.92k|            InternedSubject::Triple(triple) => {
  748|  1.92k|                self.hash_triple(triple, current_blank_node, bnodes_hash)
  749|       |            }
  750|       |        }
  751|  58.9k|    }
_RNvMNtCsaAh6yFmIely_5oxrdf7datasetNtB2_7Dataset11hash_bnodes:
  669|  7.95k|    fn hash_bnodes(
  670|  7.95k|        &self,
  671|  7.95k|        mut hashes: HashMap<InternedBlankNode, u64>,
  672|  7.95k|        quads_per_blank_node: &QuadsPerBlankNode,
  673|  7.95k|    ) -> (
  674|  7.95k|        HashMap<InternedBlankNode, u64>,
  675|  7.95k|        Vec<(u64, Vec<InternedBlankNode>)>,
  676|  7.95k|    ) {
  677|  7.95k|        let mut to_hash = Vec::new();
  678|  7.95k|        let mut to_do = hashes
  679|  7.95k|            .keys()
  680|  7.95k|            .map(|bnode| (*bnode, true))
  681|  7.95k|            .collect::<HashMap<_, _>>();
  682|  7.95k|        let mut partition = HashMap::<_, Vec<_>>::with_capacity(hashes.len());
  683|  7.95k|        let mut old_partition_count = usize::MAX;
  684|  23.8k|        while old_partition_count != partition.len() {
  685|  15.9k|            old_partition_count = partition.len();
  686|  15.9k|            partition.clear();
  687|  15.9k|            let mut new_hashes = hashes.clone();
  688|  46.7k|            for bnode in hashes.keys() {
  689|  46.7k|                let hash = if to_do.contains_key(bnode) {
  690|  50.1k|                    for (s, p, o, g) in &quads_per_blank_node[bnode] {
  691|  50.1k|                        to_hash.push((
  692|  50.1k|                            self.hash_subject(s, *bnode, &hashes),
  693|  50.1k|                            self.hash_named_node(*p),
  694|  50.1k|                            self.hash_term(o, *bnode, &hashes),
  695|  50.1k|                            self.hash_graph_name(g, *bnode, &hashes),
  696|  50.1k|                        ));
  697|  50.1k|                    }
  698|  46.7k|                    to_hash.sort_unstable();
  699|  46.7k|                    let hash = Self::hash_tuple((&to_hash, hashes[bnode]));
  700|  46.7k|                    to_hash.clear();
  701|  46.7k|                    if hash == hashes[bnode] {
  702|      0|                        to_do.insert(*bnode, false);
  703|  46.7k|                    } else {
  704|  46.7k|                        new_hashes.insert(*bnode, hash);
  705|  46.7k|                    }
  706|  46.7k|                    hash
  707|       |                } else {
  708|      0|                    hashes[bnode]
  709|       |                };
  710|  46.7k|                partition.entry(hash).or_default().push(*bnode);
  711|       |            }
  712|  15.9k|            hashes = new_hashes;
  713|       |        }
  714|  7.95k|        let mut partition: Vec<_> = partition.into_iter().collect();
  715|  7.95k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));
  716|  7.95k|        (hashes, partition)
  717|  7.95k|    }
_RNvMNtCsaAh6yFmIely_5oxrdf7datasetNtB2_7Dataset9hash_term:
  753|  58.9k|    fn hash_term(
  754|  58.9k|        &self,
  755|  58.9k|        term: &InternedTerm,
  756|  58.9k|        current_blank_node: InternedBlankNode,
  757|  58.9k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  758|  58.9k|    ) -> u64 {
  759|  58.9k|        match term {
  760|  3.87k|            InternedTerm::NamedNode(node) => Self::hash_tuple(node.decode_from(&self.interner)),
  761|  16.3k|            InternedTerm::BlankNode(bnode) => {
  762|  16.3k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  763|       |            }
  764|  31.8k|            InternedTerm::Literal(literal) => Self::hash_tuple(literal.decode_from(&self.interner)),
  765|       |            #[cfg(feature = "rdf-star")]
  766|  6.88k|            InternedTerm::Triple(triple) => {
  767|  6.88k|                self.hash_triple(triple, current_blank_node, bnodes_hash)
  768|       |            }
  769|       |        }
  770|  58.9k|    }
_RNvMNtCsaAh6yFmIely_5oxrdf7datasetNtB2_7Dataset4iter:
  169|  1.68k|    pub fn iter(&self) -> Iter<'_> {
  170|  1.68k|        let iter = self.spog.iter();
  171|  1.68k|        Iter {
  172|  1.68k|            dataset: self,
  173|  1.68k|            inner: iter,
  174|  1.68k|        }
  175|  1.68k|    }
_RNvMNtCsaAh6yFmIely_5oxrdf7datasetNtB2_7Dataset3new:
  109|  3.36k|    pub fn new() -> Self {
  110|  3.36k|        Self::default()
  111|  3.36k|    }
_RNvMNtCsaAh6yFmIely_5oxrdf7datasetNtB2_7Dataset21quads_per_blank_nodes:
  620|  3.36k|    fn quads_per_blank_nodes(&self) -> QuadsPerBlankNode {
  621|  3.36k|        let mut map: HashMap<_, Vec<_>> = HashMap::new();
  622|  76.8k|        for quad in &self.spog {
  623|  73.5k|            if let InternedSubject::BlankNode(bnode) = &quad.0 {
  624|  5.64k|                map.entry(*bnode).or_default().push(quad.clone());
  625|  67.8k|            }
  626|       |            #[cfg(feature = "rdf-star")]
  627|  73.5k|            if let InternedSubject::Triple(t) = &quad.0 {
  628|  59.6k|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  629|  59.6k|            }
  630|  73.5k|            if let InternedTerm::BlankNode(bnode) = &quad.2 {
  631|  1.67k|                map.entry(*bnode).or_default().push(quad.clone());
  632|  71.8k|            }
  633|       |            #[cfg(feature = "rdf-star")]
  634|  73.5k|            if let InternedTerm::Triple(t) = &quad.2 {
  635|    798|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  636|  72.7k|            }
  637|  73.5k|            if let InternedGraphName::BlankNode(bnode) = &quad.3 {
  638|    326|                map.entry(*bnode).or_default().push(quad.clone());
  639|  73.1k|            }
  640|       |        }
  641|  3.36k|        map
  642|  3.36k|    }
_RNvMNtCsaAh6yFmIely_5oxrdf7datasetNtB2_7Dataset15hash_blank_node:
  723|  59.5k|    fn hash_blank_node(
  724|  59.5k|        node: InternedBlankNode,
  725|  59.5k|        current_blank_node: InternedBlankNode,
  726|  59.5k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  727|  59.5k|    ) -> u64 {
  728|  59.5k|        if node == current_blank_node {
  729|  50.2k|            u64::MAX
  730|       |        } else {
  731|  9.32k|            bnodes_hash[&node]
  732|       |        }
  733|  59.5k|    }
_RNvMNtCsaAh6yFmIely_5oxrdf7datasetNtB2_7Dataset11distinguish:
  809|  7.95k|    fn distinguish(
  810|  7.95k|        &self,
  811|  7.95k|        hash: HashMap<InternedBlankNode, u64>,
  812|  7.95k|        partition: &[(u64, Vec<InternedBlankNode>)],
  813|  7.95k|        quads_per_blank_node: &QuadsPerBlankNode,
  814|  7.95k|    ) -> HashMap<InternedBlankNode, u64> {
  815|  7.95k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
  816|  7.95k|        if let Some(b_prime) = b_prime {
  817|  2.04k|            b_prime
  818|  2.04k|                .iter()
  819|  2.04k|                .map(|b| {
  820|       |                    let mut hash_prime = hash.clone();
  821|       |                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  822|       |                    let (hash_prime_prime, partition_prime) =
  823|       |                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  824|       |                    self.distinguish(hash_prime_prime, &partition_prime, quads_per_blank_node)
  825|  2.04k|                })
  826|  2.04k|                .reduce(|a, b| {
  827|       |                    let mut a_hashes = a.values().collect::<Vec<_>>();
  828|       |                    a_hashes.sort();
  829|       |                    let mut b_hashes = a.values().collect::<Vec<_>>();
  830|       |                    b_hashes.sort();
  831|       |                    if a_hashes <= b_hashes {
  832|       |                        a
  833|       |                    } else {
  834|       |                        b
  835|       |                    }
  836|  2.04k|                })
  837|  2.04k|                .unwrap_or_default()
  838|       |        } else {
  839|  5.91k|            hash
  840|       |        }
  841|  7.95k|    }
_RNvMNtCsaAh6yFmIely_5oxrdf7datasetNtB2_7Dataset11encode_quad:
  420|  80.7k|    fn encode_quad(
  421|  80.7k|        &mut self,
  422|  80.7k|        quad: QuadRef<'_>,
  423|  80.7k|    ) -> (
  424|  80.7k|        InternedSubject,
  425|  80.7k|        InternedNamedNode,
  426|  80.7k|        InternedTerm,
  427|  80.7k|        InternedGraphName,
  428|  80.7k|    ) {
  429|  80.7k|        (
  430|  80.7k|            InternedSubject::encoded_into(quad.subject, &mut self.interner),
  431|  80.7k|            InternedNamedNode::encoded_into(quad.predicate, &mut self.interner),
  432|  80.7k|            InternedTerm::encoded_into(quad.object, &mut self.interner),
  433|  80.7k|            InternedGraphName::encoded_into(quad.graph_name, &mut self.interner),
  434|  80.7k|        )
  435|  80.7k|    }
_RNvMNtCsaAh6yFmIely_5oxrdf7datasetNtB2_7Dataset22map_triple_blank_nodes:
  906|  1.45M|    fn map_triple_blank_nodes(
  907|  1.45M|        &mut self,
  908|  1.45M|        triple: &InternedTriple,
  909|  1.45M|        bnode_mapping: &HashMap<InternedBlankNode, BlankNode>,
  910|  1.45M|    ) -> Triple {
  911|       |        Triple {
  912|  1.45M|            subject: if let InternedSubject::BlankNode(bnode) = &triple.subject {
  913|    244|                bnode_mapping[bnode].clone().into()
  914|  1.45M|            } else if let InternedSubject::Triple(t) = &triple.subject {
  915|  1.39M|                self.map_triple_blank_nodes(t, bnode_mapping).into()
  916|       |            } else {
  917|  60.2k|                triple.subject.decode_from(&self.interner).into_owned()
  918|       |            },
  919|  1.45M|            predicate: triple.predicate.decode_from(&self.interner).into_owned(),
  920|  1.45M|            object: if let InternedTerm::BlankNode(bnode) = &triple.object {
  921|    270|                bnode_mapping[bnode].clone().into()
  922|  1.45M|            } else if let InternedTerm::Triple(t) = &triple.object {
  923|     30|                self.map_triple_blank_nodes(t, bnode_mapping).into()
  924|       |            } else {
  925|  1.45M|                triple.object.decode_from(&self.interner).into_owned()
  926|       |            },
  927|       |        }
  928|  1.45M|    }
_RNvMNtCsaAh6yFmIely_5oxrdf7datasetNtB2_7Dataset14insert_encoded:
  365|   154k|    fn insert_encoded(
  366|   154k|        &mut self,
  367|   154k|        quad: (
  368|   154k|            InternedSubject,
  369|   154k|            InternedNamedNode,
  370|   154k|            InternedTerm,
  371|   154k|            InternedGraphName,
  372|   154k|        ),
  373|   154k|    ) -> bool {
  374|   154k|        let (s, p, o, g) = quad;
  375|   154k|        self.gspo.insert((g.clone(), s.clone(), p, o.clone()));
  376|   154k|        self.gpos.insert((g.clone(), p, o.clone(), s.clone()));
  377|   154k|        self.gosp.insert((g.clone(), o.clone(), s.clone(), p));
  378|   154k|        self.spog.insert((s.clone(), p, o.clone(), g.clone()));
  379|   154k|        self.posg.insert((p, o.clone(), s.clone(), g.clone()));
  380|   154k|        self.ospg.insert((o, s, p, g))
  381|   154k|    }
_RNvMNtCsaAh6yFmIely_5oxrdf7datasetNtB2_7Dataset12encoded_quad:
  437|  36.7k|    fn encoded_quad(
  438|  36.7k|        &self,
  439|  36.7k|        quad: QuadRef<'_>,
  440|  36.7k|    ) -> Option<(
  441|  36.7k|        InternedSubject,
  442|  36.7k|        InternedNamedNode,
  443|  36.7k|        InternedTerm,
  444|  36.7k|        InternedGraphName,
  445|  36.7k|    )> {
  446|  36.7k|        Some((
  447|  36.7k|            self.encoded_subject(quad.subject)?,
  448|  36.7k|            self.encoded_named_node(quad.predicate)?,
  449|  36.7k|            self.encoded_term(quad.object)?,
  450|  36.7k|            self.encoded_graph_name(quad.graph_name)?,
  451|       |        ))
  452|  36.7k|    }
_RNvMNtCsaAh6yFmIely_5oxrdf7datasetNtB2_7Dataset5clear:
  411|  3.36k|    pub fn clear(&mut self) {
  412|  3.36k|        self.gspo.clear();
  413|  3.36k|        self.gpos.clear();
  414|  3.36k|        self.gosp.clear();
  415|  3.36k|        self.spog.clear();
  416|  3.36k|        self.posg.clear();
  417|  3.36k|        self.ospg.clear();
  418|  3.36k|    }
_RNvMNtCsaAh6yFmIely_5oxrdf7datasetNtB2_7Dataset18triple_blank_nodes:
  607|  1.45M|    fn triple_blank_nodes(triple: &InternedTriple, bnodes: &mut HashSet<InternedBlankNode>) {
  608|  1.45M|        if let InternedSubject::BlankNode(bnode) = &triple.subject {
  609|    244|            bnodes.insert(*bnode);
  610|  1.45M|        } else if let InternedSubject::Triple(t) = &triple.subject {
  611|  1.39M|            Self::triple_blank_nodes(t, bnodes);
  612|  1.39M|        }
  613|  1.45M|        if let InternedTerm::BlankNode(bnode) = &triple.object {
  614|    270|            bnodes.insert(*bnode);
  615|  1.45M|        } else if let InternedTerm::Triple(t) = &triple.object {
  616|     30|            Self::triple_blank_nodes(t, bnodes);
  617|  1.45M|        }
  618|  1.45M|    }
_RNvMNtCsaAh6yFmIely_5oxrdf7datasetNtB2_7Dataset15hash_named_node:
  719|  58.9k|    fn hash_named_node(&self, node: InternedNamedNode) -> u64 {
  720|  58.9k|        Self::hash_tuple(node.decode_from(&self.interner))
  721|  58.9k|    }
_RINvMNtCsaAh6yFmIely_5oxrdf7datasetNtB3_7Dataset18encoded_named_nodeNtNtB5_10named_node12NamedNodeRefEB5_:
  454|  36.7k|    pub(super) fn encoded_named_node<'a>(
  455|  36.7k|        &self,
  456|  36.7k|        node: impl Into<NamedNodeRef<'a>>,
  457|  36.7k|    ) -> Option<InternedNamedNode> {
  458|  36.7k|        InternedNamedNode::encoded_from(node.into(), &self.interner)
  459|  36.7k|    }
_RINvMNtCsaAh6yFmIely_5oxrdf7datasetNtB3_7Dataset10hash_tupleTylEEB5_:
  803|  4.59k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|  4.59k|        let mut hasher = DefaultHasher::new();
  805|  4.59k|        v.hash(&mut hasher);
  806|  4.59k|        hasher.finish()
  807|  4.59k|    }
_RINvMNtCsaAh6yFmIely_5oxrdf7datasetNtB3_7Dataset15encoded_subjectNtNtB5_6triple10SubjectRefEB5_:
  461|  36.7k|    pub(super) fn encoded_subject<'a>(
  462|  36.7k|        &self,
  463|  36.7k|        node: impl Into<SubjectRef<'a>>,
  464|  36.7k|    ) -> Option<InternedSubject> {
  465|  36.7k|        InternedSubject::encoded_from(node.into(), &self.interner)
  466|  36.7k|    }
_RINvMNtCsaAh6yFmIely_5oxrdf7datasetNtB3_7Dataset10hash_tupleTyyyEEB5_:
  803|  8.80k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|  8.80k|        let mut hasher = DefaultHasher::new();
  805|  8.80k|        v.hash(&mut hasher);
  806|  8.80k|        hasher.finish()
  807|  8.80k|    }
_RNCNvMNtCsaAh6yFmIely_5oxrdf7datasetNtB4_7Dataset11hash_bnodes0B6_:
  680|  23.3k|            .map(|bnode| (*bnode, true))
_RNCNvMNtCsaAh6yFmIely_5oxrdf7datasetNtB4_7Dataset11distinguish0B6_:
  815|  20.6k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
_RINvMNtCsaAh6yFmIely_5oxrdf7datasetNtB3_7Dataset18encoded_graph_nameNtNtB5_6triple12GraphNameRefEB5_:
  472|  36.7k|    pub(super) fn encoded_graph_name<'a>(
  473|  36.7k|        &self,
  474|  36.7k|        graph_name: impl Into<GraphNameRef<'a>>,
  475|  36.7k|    ) -> Option<InternedGraphName> {
  476|  36.7k|        InternedGraphName::encoded_from(graph_name.into(), &self.interner)
  477|  36.7k|    }
_RNCNvMNtCsaAh6yFmIely_5oxrdf7datasetNtB4_7Dataset11distinguishs0_0B6_:
  819|  4.59k|                .map(|b| {
  820|  4.59k|                    let mut hash_prime = hash.clone();
  821|  4.59k|                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  822|  4.59k|                    let (hash_prime_prime, partition_prime) =
  823|  4.59k|                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  824|  4.59k|                    self.distinguish(hash_prime_prime, &partition_prime, quads_per_blank_node)
  825|  4.59k|                })
_RINvMNtCsaAh6yFmIely_5oxrdf7datasetNtB3_7Dataset10hash_tupleTRINtNtCsjOdcKtOMjJI_5alloc3vec3VecTyyyyEEyEEB5_:
  803|  46.7k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|  46.7k|        let mut hasher = DefaultHasher::new();
  805|  46.7k|        v.hash(&mut hasher);
  806|  46.7k|        hasher.finish()
  807|  46.7k|    }
_RNCNvMNtCsaAh6yFmIely_5oxrdf7datasetNtB4_7Dataset11distinguishs1_0B6_:
  826|  2.54k|                .reduce(|a, b| {
  827|  2.54k|                    let mut a_hashes = a.values().collect::<Vec<_>>();
  828|  2.54k|                    a_hashes.sort();
  829|  2.54k|                    let mut b_hashes = a.values().collect::<Vec<_>>();
  830|  2.54k|                    b_hashes.sort();
  831|  2.54k|                    if a_hashes <= b_hashes {
  832|  2.54k|                        a
  833|       |                    } else {
  834|      0|                        b
  835|       |                    }
  836|  2.54k|                })
_RNCNvMNtCsaAh6yFmIely_5oxrdf7datasetNtB4_7Dataset15map_blank_nodes0B6_:
  856|  73.5k|            .map(|(s, p, o, g)| {
  857|  73.5k|                (
  858|  73.5k|                    match s {
  859|  8.23k|                        InternedSubject::NamedNode(_) => s,
  860|  5.64k|                        InternedSubject::BlankNode(bnode) => {
  861|  5.64k|                            InternedSubject::BlankNode(InternedBlankNode::encoded_into(
  862|  5.64k|                                bnode_mapping[&bnode].as_ref(),
  863|  5.64k|                                &mut self.interner,
  864|  5.64k|                            ))
  865|       |                        }
  866|       |                        #[cfg(feature = "rdf-star")]
  867|  59.6k|                        InternedSubject::Triple(triple) => {
  868|  59.6k|                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  869|  59.6k|                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  870|  59.6k|                                &mut self.interner,
  871|  59.6k|                            )))
  872|       |                        }
  873|       |                    },
  874|  73.5k|                    p,
  875|  73.5k|                    match o {
  876|  71.0k|                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  877|  1.67k|                        InternedTerm::BlankNode(bnode) => {
  878|  1.67k|                            InternedTerm::BlankNode(InternedBlankNode::encoded_into(
  879|  1.67k|                                bnode_mapping[&bnode].as_ref(),
  880|  1.67k|                                &mut self.interner,
  881|  1.67k|                            ))
  882|       |                        }
  883|       |                        #[cfg(feature = "rdf-star")]
  884|    798|                        InternedTerm::Triple(triple) => {
  885|    798|                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  886|    798|                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  887|    798|                                &mut self.interner,
  888|    798|                            )))
  889|       |                        }
  890|       |                    },
  891|  73.5k|                    match g {
  892|  73.1k|                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  893|    326|                        InternedGraphName::BlankNode(bnode) => {
  894|    326|                            InternedGraphName::BlankNode(InternedBlankNode::encoded_into(
  895|    326|                                bnode_mapping[&bnode].as_ref(),
  896|    326|                                &mut self.interner,
  897|    326|                            ))
  898|       |                        }
  899|       |                    },
  900|       |                )
  901|  73.5k|            })
_RNCNvXsg_NtCsaAh6yFmIely_5oxrdf7datasetNtB7_4IterNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0B9_:
 1554|  36.7k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))
_RNCNvMNtCsaAh6yFmIely_5oxrdf7datasetNtB4_7Dataset33canonicalize_interned_blank_nodes0B6_:
  571|  6.68k|                    bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
_RINvMNtCsaAh6yFmIely_5oxrdf7datasetNtB3_7Dataset8containsNtNtB5_6triple7QuadRefEB5_:
  341|  36.7k|    pub fn contains<'a>(&self, quad: impl Into<QuadRef<'a>>) -> bool {
  342|  36.7k|        if let Some(q) = self.encoded_quad(quad.into()) {
  343|  36.7k|            self.spog.contains(&q)
  344|       |        } else {
  345|      0|            false
  346|       |        }
  347|  36.7k|    }
_RNCNvMNtCsaAh6yFmIely_5oxrdf7datasetNtB4_7Dataset11distinguishs_0B6_:
  815|  20.6k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
_RINvMNtCsaAh6yFmIely_5oxrdf7datasetNtB3_7Dataset10hash_tupleNtNtB5_10named_node12NamedNodeRefEB5_:
  803|  86.8k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|  86.8k|        let mut hasher = DefaultHasher::new();
  805|  86.8k|        v.hash(&mut hasher);
  806|  86.8k|        hasher.finish()
  807|  86.8k|    }
_RINvMNtCsaAh6yFmIely_5oxrdf7datasetNtB3_7Dataset10hash_tupleNtNtB5_7literal10LiteralRefEB5_:
  803|  31.8k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|  31.8k|        let mut hasher = DefaultHasher::new();
  805|  31.8k|        v.hash(&mut hasher);
  806|  31.8k|        hasher.finish()
  807|  31.8k|    }
_RINvMNtCsaAh6yFmIely_5oxrdf7datasetNtB3_7Dataset12encoded_termNtNtB5_6triple7TermRefEB5_:
  468|  36.7k|    pub(super) fn encoded_term<'a>(&self, term: impl Into<TermRef<'a>>) -> Option<InternedTerm> {
  469|  36.7k|        InternedTerm::encoded_from(term.into(), &self.interner)
  470|  36.7k|    }
_RNCNvMNtCsaAh6yFmIely_5oxrdf7datasetNtB4_7Dataset33canonicalize_interned_blank_nodess_0B6_:
  576|  6.68k|                    .map(|(from, to)| (from, BlankNode::new_from_unique_id(to.into())))
_RNCNvMNtCsaAh6yFmIely_5oxrdf7datasetNtB4_7Dataset11hash_bnodess_0B6_:
  715|  18.2k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));

_RNCNvMs1_NtCsaAh6yFmIely_5oxrdf9interningNtB7_17InternedBlankNode12encoded_into0B9_:
  135|  12.7k|                .or_insert_with(|| blank_node.as_str().into());
_RINvXs1g_NtCsaAh6yFmIely_5oxrdf9interningNtB7_12InternedTermNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEB9_:
  392|  82.1M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RINvXsv_NtCsaAh6yFmIely_5oxrdf9interningNtB6_17InternedNamedNodeNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEB8_:
   86|   168M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RINvXsP_NtCsaAh6yFmIely_5oxrdf9interningNtB6_15InternedLiteralNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEB8_:
  174|  69.6M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RINvXsF_NtCsaAh6yFmIely_5oxrdf9interningNtB6_17InternedBlankNodeNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEB8_:
  123|   319k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RINvXsY_NtCsaAh6yFmIely_5oxrdf9interningNtB6_15InternedSubjectNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEB8_:
  267|  82.1M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RINvXsl_NtCsaAh6yFmIely_5oxrdf9interningNtB6_3KeyNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEB8_:
   69|   237M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RINvXs1p_NtCsaAh6yFmIely_5oxrdf9interningNtB7_14InternedTripleNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEB9_:
  465|  82.1M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMNtCsaAh6yFmIely_5oxrdf9interningNtB2_8Interner4hash:
   53|  10.9M|    fn hash(&self, value: &str) -> u64 {
   54|  10.9M|        let mut hasher = self.hasher.build_hasher();
   55|  10.9M|        hasher.write(value.as_bytes());
   56|  10.9M|        let hash = hasher.finish();
   57|  10.9M|        if hash == u64::MAX {
   58|      0|            0
   59|       |        } else {
   60|  10.9M|            hash
   61|       |        }
   62|  10.9M|    }
_RNvMs5_NtCsaAh6yFmIely_5oxrdf9interningNtB5_12InternedTerm11decode_from:
  436|  1.49M|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> TermRef<'a> {
  437|  1.49M|        match self {
  438|   233k|            Self::NamedNode(term) => TermRef::NamedNode(term.decode_from(interner)),
  439|    841|            Self::BlankNode(term) => TermRef::BlankNode(term.decode_from(interner)),
  440|  1.26M|            Self::Literal(term) => TermRef::Literal(term.decode_from(interner)),
  441|       |            #[cfg(feature = "rdf-star")]
  442|    399|            Self::Triple(triple) => TermRef::Triple(&interner.triples[triple.as_ref()]),
  443|       |        }
  444|  1.49M|    }
_RNvMs6_NtCsaAh6yFmIely_5oxrdf9interningNtB5_14InternedTriple12encoded_into:
  474|  2.93M|    pub fn encoded_into(triple: TripleRef<'_>, interner: &mut Interner) -> Self {
  475|  2.93M|        let interned_triple = Self {
  476|  2.93M|            subject: InternedSubject::encoded_into(triple.subject, interner),
  477|  2.93M|            predicate: InternedNamedNode::encoded_into(triple.predicate, interner),
  478|  2.93M|            object: InternedTerm::encoded_into(triple.object, interner),
  479|  2.93M|        };
  480|  2.93M|        interner
  481|  2.93M|            .triples
  482|  2.93M|            .insert(interned_triple.clone(), triple.into_owned());
  483|  2.93M|        interned_triple
  484|  2.93M|    }
_RNvMNtCsaAh6yFmIely_5oxrdf9interningNtB2_8Interner13get_or_intern:
   18|  8.71M|    fn get_or_intern(&mut self, value: &str) -> Key {
   19|  8.71M|        let mut hash = self.hash(value);
   20|  8.71M|        loop {
   21|  8.71M|            match self.string_for_hash.entry(hash) {
   22|  30.6k|                Entry::Vacant(e) => {
   23|  30.6k|                    e.insert(value.into());
   24|  30.6k|                    return Key(hash);
   25|       |                }
   26|  8.68M|                Entry::Occupied(e) => loop {
   27|  8.68M|                    if e.get() == value {
   28|  8.68M|                        return Key(hash);
   29|      0|                    } else if hash == u64::MAX - 1 {
   30|      0|                        hash = 0;
   31|      0|                    } else {
   32|      0|                        hash += 1;
   33|      0|                    }
   34|       |                },
   35|       |            }
   36|       |        }
   37|  8.71M|    }
_RNvXsz_NtCsaAh6yFmIely_5oxrdf9interningNtB5_17InternedBlankNodeNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB7_:
  123|   324k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMNtCsaAh6yFmIely_5oxrdf9interningNtB2_8Interner3get:
   39|  2.21M|    fn get(&self, value: &str) -> Option<Key> {
   40|  2.21M|        let mut hash = self.hash(value);
   41|       |        loop {
   42|  2.21M|            let v = self.string_for_hash.get(&hash)?;
   43|  2.21M|            if v == value {
   44|  2.21M|                return Some(Key(hash));
   45|      0|            } else if hash == u64::MAX - 1 {
   46|      0|                hash = 0;
   47|      0|            } else {
   48|      0|                hash += 1;
   49|      0|            }
   50|       |        }
   51|  2.21M|    }
_RNvMs1_NtCsaAh6yFmIely_5oxrdf9interningNtB5_17InternedBlankNode11decode_from:
  157|  3.83k|    pub fn decode_from(self, interner: &Interner) -> BlankNodeRef<'_> {
  158|  3.83k|        BlankNodeRef::new_unchecked(match self {
  159|  3.83k|            Self::Number { id } => &interner.string_for_blank_node_id[&id],
  160|      0|            Self::Other { id } => interner.resolve(id),
  161|       |        })
  162|  3.83k|    }
_RNvMs5_NtCsaAh6yFmIely_5oxrdf9interningNtB5_12InternedTerm12encoded_from:
  419|   766k|    pub fn encoded_from(term: TermRef<'_>, interner: &Interner) -> Option<Self> {
  420|   766k|        Some(match term {
  421|   118k|            TermRef::NamedNode(term) => {
  422|   118k|                Self::NamedNode(InternedNamedNode::encoded_from(term, interner)?)
  423|       |            }
  424|    976|            TermRef::BlankNode(term) => {
  425|    976|                Self::BlankNode(InternedBlankNode::encoded_from(term, interner)?)
  426|       |            }
  427|   645k|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_from(term, interner)?),
  428|       |            #[cfg(feature = "rdf-star")]
  429|    414|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  430|    414|                triple.as_ref(),
  431|    414|                interner,
  432|    414|            )?)),
  433|       |        })
  434|   766k|    }
_RNvXs7_NtCsaAh6yFmIely_5oxrdf9interningNtB5_21IdentityHasherBuilderNtNtCs9nhK3FOW46N_4core4hash11BuildHasher12build_hasher:
  513|  15.4M|    fn build_hasher(&self) -> Self::Hasher {
  514|  15.4M|        Self::Hasher::default()
  515|  15.4M|    }
_RNvXsX_NtCsaAh6yFmIely_5oxrdf9interningNtB5_15InternedSubjectNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
  267|  81.2M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsT_NtCsaAh6yFmIely_5oxrdf9interningNtB5_15InternedSubjectNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB7_:
  267|  80.3M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1c_NtCsaAh6yFmIely_5oxrdf9interningNtB6_12InternedTermNtNtCs9nhK3FOW46N_4core3cmp3Ord3cmpB8_:
  392|  7.15M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMs4_NtCsaAh6yFmIely_5oxrdf9interningNtB5_17InternedGraphName11decode_from:
  367|  36.7k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> GraphNameRef<'a> {
  368|  36.7k|        match self {
  369|  32.7k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  370|  3.88k|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.decode_from(interner)),
  371|    163|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.decode_from(interner)),
  372|       |        }
  373|  36.7k|    }
_RNvMs5_NtCsaAh6yFmIely_5oxrdf9interningNtB5_12InternedTerm12encoded_into:
  402|  3.01M|    pub fn encoded_into(term: TermRef<'_>, interner: &mut Interner) -> Self {
  403|  3.01M|        match term {
  404|   469k|            TermRef::NamedNode(term) => {
  405|   469k|                Self::NamedNode(InternedNamedNode::encoded_into(term, interner))
  406|       |            }
  407|  2.22k|            TermRef::BlankNode(term) => {
  408|  2.22k|                Self::BlankNode(InternedBlankNode::encoded_into(term, interner))
  409|       |            }
  410|  2.54M|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_into(term, interner)),
  411|       |            #[cfg(feature = "rdf-star")]
  412|  1.01k|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  413|  1.01k|                triple.as_ref(),
  414|  1.01k|                interner,
  415|  1.01k|            ))),
  416|       |        }
  417|  3.01M|    }
_RNvXsq_NtCsaAh6yFmIely_5oxrdf9interningNtB5_17InternedNamedNodeNtNtCs9nhK3FOW46N_4core3cmp3Ord3cmpB7_:
   86|  11.3M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXst_NtCsaAh6yFmIely_5oxrdf9interningNtB5_17InternedNamedNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
   86|  96.7M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXs1f_NtCsaAh6yFmIely_5oxrdf9interningNtB6_12InternedTermNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB8_:
  392|  81.2M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1k_NtCsaAh6yFmIely_5oxrdf9interningNtB6_14InternedTripleNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB8_:
  465|  80.3M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1b_NtCsaAh6yFmIely_5oxrdf9interningNtB6_12InternedTermNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB8_:
  392|  79.9M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsK_NtCsaAh6yFmIely_5oxrdf9interningNtB5_15InternedLiteralNtNtCs9nhK3FOW46N_4core3cmp3Ord3cmpB7_:
  174|  6.19M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsN_NtCsaAh6yFmIely_5oxrdf9interningNtB5_15InternedLiteralNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
  174|  68.8M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMs4_NtCsaAh6yFmIely_5oxrdf9interningNtB5_17InternedGraphName12encoded_from:
  355|  36.7k|    pub fn encoded_from(node: GraphNameRef<'_>, interner: &Interner) -> Option<Self> {
  356|  36.7k|        Some(match node {
  357|  32.7k|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  358|  3.88k|            GraphNameRef::NamedNode(node) => {
  359|  3.88k|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  360|       |            }
  361|    163|            GraphNameRef::BlankNode(node) => {
  362|    163|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  363|       |            }
  364|       |        })
  365|  36.7k|    }
_RNvMs1_NtCsaAh6yFmIely_5oxrdf9interningNtB5_17InternedBlankNode12encoded_from:
  144|  4.08k|    pub fn encoded_from(blank_node: BlankNodeRef<'_>, interner: &Interner) -> Option<Self> {
  145|  4.08k|        if let Some(id) = blank_node.unique_id() {
  146|  4.08k|            interner
  147|  4.08k|                .string_for_blank_node_id
  148|  4.08k|                .contains_key(&id)
  149|  4.08k|                .then_some(Self::Number { id })
  150|       |        } else {
  151|       |            Some(Self::Other {
  152|      0|                id: interner.get(blank_node.as_str())?,
  153|       |            })
  154|       |        }
  155|  4.08k|    }
_RNvMs2_NtCsaAh6yFmIely_5oxrdf9interningNtB5_15InternedLiteral11decode_from:
  228|  1.29M|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> LiteralRef<'a> {
  229|  1.29M|        match self {
  230|  8.75k|            Self::String { value_id } => {
  231|  8.75k|                LiteralRef::new_simple_literal(interner.resolve(*value_id))
  232|       |            }
  233|       |            Self::LanguageTaggedString {
  234|  1.97k|                value_id,
  235|  1.97k|                language_id,
  236|  1.97k|            } => LiteralRef::new_language_tagged_literal_unchecked(
  237|  1.97k|                interner.resolve(*value_id),
  238|  1.97k|                interner.resolve(*language_id),
  239|  1.97k|            ),
  240|  1.28M|            Self::TypedLiteral { value_id, datatype } => LiteralRef::new_typed_literal(
  241|  1.28M|                interner.resolve(*value_id),
  242|  1.28M|                datatype.decode_from(interner),
  243|  1.28M|            ),
  244|       |        }
  245|  1.29M|    }
_RNvMs3_NtCsaAh6yFmIely_5oxrdf9interningNtB5_15InternedSubject11decode_from:
  308|  96.9k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> SubjectRef<'a> {
  309|  96.9k|        match self {
  310|  64.3k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.decode_from(interner)),
  311|  2.82k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.decode_from(interner)),
  312|       |            #[cfg(feature = "rdf-star")]
  313|  29.8k|            Self::Triple(triple) => SubjectRef::Triple(&interner.triples[triple.as_ref()]),
  314|       |        }
  315|  96.9k|    }
_RNvMs4_NtCsaAh6yFmIely_5oxrdf9interningNtB5_17InternedGraphName12encoded_into:
  343|  80.7k|    pub fn encoded_into(node: GraphNameRef<'_>, interner: &mut Interner) -> Self {
  344|  80.7k|        match node {
  345|  71.8k|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  346|  8.60k|            GraphNameRef::NamedNode(node) => {
  347|  8.60k|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  348|       |            }
  349|    326|            GraphNameRef::BlankNode(node) => {
  350|    326|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  351|       |            }
  352|       |        }
  353|  80.7k|    }
_RNvMs0_NtCsaAh6yFmIely_5oxrdf9interningNtB5_17InternedNamedNode12encoded_from:
   98|  1.56M|    pub fn encoded_from(named_node: NamedNodeRef<'_>, interner: &Interner) -> Option<Self> {
   99|  1.56M|        Some(Self {
  100|  1.56M|            id: interner.get(named_node.as_str())?,
  101|       |        })
  102|  1.56M|    }
_RNvMs1_NtCsaAh6yFmIely_5oxrdf9interningNtB5_17InternedBlankNode12encoded_into:
  130|  16.3k|    pub fn encoded_into(blank_node: BlankNodeRef<'_>, interner: &mut Interner) -> Self {
  131|  16.3k|        if let Some(id) = blank_node.unique_id() {
  132|  15.5k|            interner
  133|  15.5k|                .string_for_blank_node_id
  134|  15.5k|                .entry(id)
  135|  15.5k|                .or_insert_with(|| blank_node.as_str().into());
  136|  15.5k|            Self::Number { id }
  137|       |        } else {
  138|    832|            Self::Other {
  139|    832|                id: interner.get_or_intern(blank_node.as_str()),
  140|    832|            }
  141|       |        }
  142|  16.3k|    }
_RNvMs0_NtCsaAh6yFmIely_5oxrdf9interningNtB5_17InternedNamedNode11decode_from:
  104|  3.16M|    pub fn decode_from(self, interner: &Interner) -> NamedNodeRef<'_> {
  105|  3.16M|        NamedNodeRef::new_unchecked(interner.resolve(self.id))
  106|  3.16M|    }
_RNvXs8_NtCsaAh6yFmIely_5oxrdf9interningNtB5_14IdentityHasherNtNtCs9nhK3FOW46N_4core4hash6Hasher9write_u64:
  532|  15.4M|    fn write_u64(&mut self, i: u64) {
  533|  15.4M|        self.value = i
  534|  15.4M|    }
_RNvMs2_NtCsaAh6yFmIely_5oxrdf9interningNtB5_15InternedLiteral12encoded_from:
  209|   645k|    pub fn encoded_from(literal: LiteralRef<'_>, interner: &Interner) -> Option<Self> {
  210|   645k|        let value_id = interner.get(literal.value())?;
  211|   645k|        Some(if literal.is_plain() {
  212|    585|            if let Some(language) = literal.language() {
  213|       |                Self::LanguageTaggedString {
  214|    196|                    value_id,
  215|    196|                    language_id: interner.get(language)?,
  216|       |                }
  217|       |            } else {
  218|    389|                Self::String { value_id }
  219|       |            }
  220|       |        } else {
  221|       |            Self::TypedLiteral {
  222|   645k|                value_id,
  223|   645k|                datatype: InternedNamedNode::encoded_from(literal.datatype(), interner)?,
  224|       |            }
  225|       |        })
  226|   645k|    }
_RNvMs3_NtCsaAh6yFmIely_5oxrdf9interningNtB5_15InternedSubject12encoded_from:
  292|   766k|    pub fn encoded_from(node: SubjectRef<'_>, interner: &Interner) -> Option<Self> {
  293|   766k|        Some(match node {
  294|  34.2k|            SubjectRef::NamedNode(node) => {
  295|  34.2k|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  296|       |            }
  297|  2.94k|            SubjectRef::BlankNode(node) => {
  298|  2.94k|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  299|       |            }
  300|       |            #[cfg(feature = "rdf-star")]
  301|   729k|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  302|   729k|                triple.as_ref(),
  303|   729k|                interner,
  304|   729k|            )?)),
  305|       |        })
  306|   766k|    }
_RNvXsa_NtCsaAh6yFmIely_5oxrdf9interningNtB5_8InternerNtNtCs9nhK3FOW46N_4core7default7Default7defaultB7_:
    7|  3.36k|#[derive(Debug, Default, Clone)]
_RNvMNtCsaAh6yFmIely_5oxrdf9interningNtB2_8Interner7resolve:
   64|  4.46M|    fn resolve(&self, key: Key) -> &str {
   65|  4.46M|        &self.string_for_hash[&key.0]
   66|  4.46M|    }
_RNvXsg_NtCsaAh6yFmIely_5oxrdf9interningNtB5_3KeyNtNtCs9nhK3FOW46N_4core3cmp3Ord3cmpB7_:
   69|  17.5M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsp_NtCsaAh6yFmIely_5oxrdf9interningNtB5_17InternedNamedNodeNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB7_:
   86|   163M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsJ_NtCsaAh6yFmIely_5oxrdf9interningNtB5_15InternedLiteralNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB7_:
  174|  67.7M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMs2_NtCsaAh6yFmIely_5oxrdf9interningNtB5_15InternedLiteral12encoded_into:
  190|  2.54M|    pub fn encoded_into(literal: LiteralRef<'_>, interner: &mut Interner) -> Self {
  191|  2.54M|        let value_id = interner.get_or_intern(literal.value());
  192|  2.54M|        if literal.is_plain() {
  193|  1.33k|            if let Some(language) = literal.language() {
  194|    426|                Self::LanguageTaggedString {
  195|    426|                    value_id,
  196|    426|                    language_id: interner.get_or_intern(language),
  197|    426|                }
  198|       |            } else {
  199|    904|                Self::String { value_id }
  200|       |            }
  201|       |        } else {
  202|  2.54M|            Self::TypedLiteral {
  203|  2.54M|                value_id,
  204|  2.54M|                datatype: InternedNamedNode::encoded_into(literal.datatype(), interner),
  205|  2.54M|            }
  206|       |        }
  207|  2.54M|    }
_RNvMs3_NtCsaAh6yFmIely_5oxrdf9interningNtB5_15InternedSubject12encoded_into:
  276|  3.01M|    pub fn encoded_into(node: SubjectRef<'_>, interner: &mut Interner) -> Self {
  277|  3.01M|        match node {
  278|   136k|            SubjectRef::NamedNode(node) => {
  279|   136k|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  280|       |            }
  281|  6.17k|            SubjectRef::BlankNode(node) => {
  282|  6.17k|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  283|       |            }
  284|       |            #[cfg(feature = "rdf-star")]
  285|  2.87M|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  286|  2.87M|                triple.as_ref(),
  287|  2.87M|                interner,
  288|  2.87M|            ))),
  289|       |        }
  290|  3.01M|    }
_RNvXsf_NtCsaAh6yFmIely_5oxrdf9interningNtB5_3KeyNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB7_:
   69|   231M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsA_NtCsaAh6yFmIely_5oxrdf9interningNtB5_17InternedBlankNodeNtNtCs9nhK3FOW46N_4core3cmp3Ord3cmpB7_:
  123|  31.1k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsD_NtCsaAh6yFmIely_5oxrdf9interningNtB5_17InternedBlankNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
  123|   103k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXs1l_NtCsaAh6yFmIely_5oxrdf9interningNtB6_14InternedTripleNtNtCs9nhK3FOW46N_4core3cmp3Ord3cmpB8_:
  465|   113M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1o_NtCsaAh6yFmIely_5oxrdf9interningNtB6_14InternedTripleNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB8_:
  465|  80.4M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1q_NtCsaAh6yFmIely_5oxrdf9interningNtB6_21IdentityHasherBuilderNtNtCs9nhK3FOW46N_4core7default7Default7defaultB8_:
  507|  3.36k|#[derive(Default, Clone)]
_RNvXs1s_NtCsaAh6yFmIely_5oxrdf9interningNtB6_14IdentityHasherNtNtCs9nhK3FOW46N_4core7default7Default7defaultB8_:
  518|  15.4M|#[derive(Default)]
_RNvXs13_NtCsaAh6yFmIely_5oxrdf9interningNtB6_17InternedGraphNameNtNtCs9nhK3FOW46N_4core3cmp3Ord3cmpB8_:
  335|  4.19M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs16_NtCsaAh6yFmIely_5oxrdf9interningNtB6_17InternedGraphNameNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB8_:
  335|   853k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsU_NtCsaAh6yFmIely_5oxrdf9interningNtB5_15InternedSubjectNtNtCs9nhK3FOW46N_4core3cmp3Ord3cmpB7_:
  267|   118M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMs0_NtCsaAh6yFmIely_5oxrdf9interningNtB5_17InternedNamedNode12encoded_into:
   92|  6.17M|    pub fn encoded_into(named_node: NamedNodeRef<'_>, interner: &mut Interner) -> Self {
   93|  6.17M|        Self {
   94|  6.17M|            id: interner.get_or_intern(named_node.as_str()),
   95|  6.17M|        }
   96|  6.17M|    }
_RNvMs6_NtCsaAh6yFmIely_5oxrdf9interningNtB5_14InternedTriple12encoded_from:
  486|   729k|    pub fn encoded_from(triple: TripleRef<'_>, interner: &Interner) -> Option<Self> {
  487|   729k|        let interned_triple = Self {
  488|   729k|            subject: InternedSubject::encoded_from(triple.subject, interner)?,
  489|   729k|            predicate: InternedNamedNode::encoded_from(triple.predicate, interner)?,
  490|   729k|            object: InternedTerm::encoded_from(triple.object, interner)?,
  491|       |        };
  492|   729k|        interner
  493|   729k|            .triples
  494|   729k|            .contains_key(&interned_triple)
  495|   729k|            .then_some(interned_triple)
  496|   729k|    }
_RNvXs8_NtCsaAh6yFmIely_5oxrdf9interningNtB5_14IdentityHasherNtNtCs9nhK3FOW46N_4core4hash6Hasher6finish:
  524|  15.4M|    fn finish(&self) -> u64 {
  525|  15.4M|        self.value
  526|  15.4M|    }

_RNvXsM_NtCsaAh6yFmIely_5oxrdf7literalNtB5_14LiteralContentNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs7hwCOMDGQov_4trig:
   37|  23.1k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMNtCsaAh6yFmIely_5oxrdf7literalNtB2_7Literal6as_refCs7hwCOMDGQov_4trig:
  129|   121k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|   121k|        LiteralRef(match &self.0 {
  131|  3.79k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|  1.02k|            LiteralContent::LanguageTaggedString { value, language } => {
  133|  1.02k|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|   116k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|   116k|                value,
  137|   116k|                datatype: datatype.as_ref(),
  138|   116k|            },
  139|       |        })
  140|   121k|    }
_RNvXsI_NtCsaAh6yFmIely_5oxrdf7literalNtB5_14LiteralContentNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCs7hwCOMDGQov_4trig:
   37|   982k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsD_NtCsaAh6yFmIely_5oxrdf7literalNtB5_7LiteralNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCs7hwCOMDGQov_4trig:
   34|   982k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsF_NtCsaAh6yFmIely_5oxrdf7literalNtB5_7LiteralNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs7hwCOMDGQov_4trig:
   34|  23.1k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsF_NtCsaAh6yFmIely_5oxrdf7literalNtB5_7LiteralNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsgLOhukngm62_5oxttl:
   34|   212k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMNtCsaAh6yFmIely_5oxrdf7literalNtB2_7Literal6as_refCsgLOhukngm62_5oxttl:
  129|   535k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|   535k|        LiteralRef(match &self.0 {
  131|    116|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|     25|            LiteralContent::LanguageTaggedString { value, language } => {
  133|     25|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|   535k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|   535k|                value,
  137|   535k|                datatype: datatype.as_ref(),
  138|   535k|            },
  139|       |        })
  140|   535k|    }
_RNvXsM_NtCsaAh6yFmIely_5oxrdf7literalNtB5_14LiteralContentNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsgLOhukngm62_5oxttl:
   37|   212k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMst_NtCsaAh6yFmIely_5oxrdf7literalNtB5_10LiteralRef5valueCsgLOhukngm62_5oxttl:
  488|   588k|    pub const fn value(self) -> &'a str {
  489|   588k|        match self.0 {
  490|  3.25k|            LiteralRefContent::String(value)
  491|    692|            | LiteralRefContent::LanguageTaggedString { value, .. }
  492|   588k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  493|   588k|        }
  494|   588k|    }
_RNvXsu_NtCsaAh6yFmIely_5oxrdf7literalNtB5_10LiteralRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsgLOhukngm62_5oxttl:
  565|  4.14k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  566|  4.14k|        match self.0 {
  567|  3.45k|            LiteralRefContent::String(value) => print_quoted_str(value, f),
  568|    692|            LiteralRefContent::LanguageTaggedString { value, language } => {
  569|    692|                print_quoted_str(value, f)?;
  570|    692|                write!(f, "@{language}")
  571|       |            }
  572|      0|            LiteralRefContent::TypedLiteral { value, datatype } => {
  573|      0|                print_quoted_str(value, f)?;
  574|      0|                write!(f, "^^{datatype}")
  575|       |            }
  576|       |        }
  577|  4.14k|    }
_RNvMst_NtCsaAh6yFmIely_5oxrdf7literalNtB5_10LiteralRef8datatypeCsgLOhukngm62_5oxttl:
  513|   588k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  514|   588k|        match self.0 {
  515|  3.25k|            LiteralRefContent::String(_) => xsd::STRING,
  516|    692|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  517|   584k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  518|       |        }
  519|   588k|    }
_RNvMst_NtCsaAh6yFmIely_5oxrdf7literalNtB5_10LiteralRef18new_simple_literalCsgLOhukngm62_5oxttl:
  459|    203|    pub const fn new_simple_literal(value: &'a str) -> Self {
  460|    203|        LiteralRef(LiteralRefContent::String(value))
  461|    203|    }
_RNvMst_NtCsaAh6yFmIely_5oxrdf7literalNtB5_10LiteralRef8is_plainCsgLOhukngm62_5oxttl:
  526|  4.14k|    pub const fn is_plain(self) -> bool {
  527|    203|        matches!(
  528|  4.14k|            self.0,
  529|       |            LiteralRefContent::String(_) | LiteralRefContent::LanguageTaggedString { .. }
  530|       |        )
  531|  4.14k|    }
_RINvMNtCsaAh6yFmIely_5oxrdf7literalNtB3_7Literal18new_simple_literalRNtNtCsjOdcKtOMjJI_5alloc6string6StringECsgLOhukngm62_5oxttl:
   47|    227|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|    227|        Self(LiteralContent::String(value.into()))
   49|    227|    }
_RINvMNtCsaAh6yFmIely_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   53|   735k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|   735k|        let value = value.into();
   55|   735k|        let datatype = datatype.into();
   56|   735k|        Self(if datatype == xsd::STRING {
   57|      0|            LiteralContent::String(value)
   58|       |        } else {
   59|   735k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|   735k|    }
_RINvXsV_NtCsaAh6yFmIely_5oxrdf7literalNtB6_10LiteralRefNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEB8_:
  440|  31.8k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RINvMNtCsaAh6yFmIely_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCsjOdcKtOMjJI_5alloc6string6StringB1n_EB5_:
   85|  2.81k|    pub fn new_language_tagged_literal_unchecked(
   86|  2.81k|        value: impl Into<String>,
   87|  2.81k|        language: impl Into<String>,
   88|  2.81k|    ) -> Self {
   89|  2.81k|        Self(LiteralContent::LanguageTaggedString {
   90|  2.81k|            value: value.into(),
   91|  2.81k|            language: language.into(),
   92|  2.81k|        })
   93|  2.81k|    }
_RINvXs13_NtCsaAh6yFmIely_5oxrdf7literalNtB7_17LiteralRefContentNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEB9_:
  443|  31.8k|#[derive(PartialEq, Eq, Debug, Clone, Copy, Hash)]
_RINvMNtCsaAh6yFmIely_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCsjOdcKtOMjJI_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   53|    823|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|    823|        let value = value.into();
   55|    823|        let datatype = datatype.into();
   56|    823|        Self(if datatype == xsd::STRING {
   57|      0|            LiteralContent::String(value)
   58|       |        } else {
   59|    823|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|    823|    }
_RINvMst_NtCsaAh6yFmIely_5oxrdf7literalNtB6_10LiteralRef17new_typed_literalNtNtB8_10named_node12NamedNodeRefEB8_:
  465|  1.28M|    pub fn new_typed_literal(value: &'a str, datatype: impl Into<NamedNodeRef<'a>>) -> Self {
  466|  1.28M|        let datatype = datatype.into();
  467|  1.28M|        LiteralRef(if datatype == xsd::STRING {
  468|      0|            LiteralRefContent::String(value)
  469|       |        } else {
  470|  1.28M|            LiteralRefContent::TypedLiteral { value, datatype }
  471|       |        })
  472|  1.28M|    }
_RINvNtCsaAh6yFmIely_5oxrdf7literal16print_quoted_strNtNtCs9nhK3FOW46N_4core3fmt9FormatterEB4_:
  616|  4.14k|pub fn print_quoted_str(string: &str, f: &mut impl Write) -> fmt::Result {
  617|  4.14k|    f.write_char('"')?;
  618|  29.1k|    for c in string.chars() {
  619|  29.1k|        match c {
  620|    223|            '\u{08}' => f.write_str("\\b"),
  621|    231|            '\t' => f.write_str("\\t"),
  622|    265|            '\n' => f.write_str("\\n"),
  623|    248|            '\u{0C}' => f.write_str("\\f"),
  624|    108|            '\r' => f.write_str("\\r"),
  625|    629|            '"' => f.write_str("\\\""),
  626|     71|            '\\' => f.write_str("\\\\"),
  627|  27.4k|            '\0'..='\u{1F}' | '\u{7F}' => write!(f, "\\u{:04X}", u32::from(c)),
  628|  12.0k|            _ => f.write_char(c),
  629|      0|        }?;
  630|       |    }
  631|  4.14k|    f.write_char('"')
  632|  4.14k|}
_RINvMNtCsaAh6yFmIely_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCsjOdcKtOMjJI_5alloc6string6StringEB5_:
   47|  12.6k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|  12.6k|        Self(LiteralContent::String(value.into()))
   49|  12.6k|    }
_RNvMst_NtCsaAh6yFmIely_5oxrdf7literalNtB5_10LiteralRef8languageB7_:
  501|  1.91k|    pub const fn language(self) -> Option<&'a str> {
  502|  1.91k|        match self.0 {
  503|    622|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  504|  1.29k|            _ => None,
  505|       |        }
  506|  1.91k|    }
_RNvMst_NtCsaAh6yFmIely_5oxrdf7literalNtB5_10LiteralRef8datatypeB7_:
  513|  3.18M|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  514|  3.18M|        match self.0 {
  515|      0|            LiteralRefContent::String(_) => xsd::STRING,
  516|      0|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  517|  3.18M|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  518|       |        }
  519|  3.18M|    }
_RNvMNtCsaAh6yFmIely_5oxrdf7literalNtB2_7Literal6as_refB4_:
  129|  3.09M|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|  3.09M|        LiteralRef(match &self.0 {
  131|    310|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|     85|            LiteralContent::LanguageTaggedString { value, language } => {
  133|     85|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|  3.09M|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|  3.09M|                value,
  137|  3.09M|                datatype: datatype.as_ref(),
  138|  3.09M|            },
  139|       |        })
  140|  3.09M|    }
_RNvXsF_NtCsaAh6yFmIely_5oxrdf7literalNtB5_7LiteralNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
   34|  56.9M|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsM_NtCsaAh6yFmIely_5oxrdf7literalNtB5_14LiteralContentNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
   37|  56.9M|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMst_NtCsaAh6yFmIely_5oxrdf7literalNtB5_10LiteralRef18new_simple_literalB7_:
  459|  8.75k|    pub const fn new_simple_literal(value: &'a str) -> Self {
  460|  8.75k|        LiteralRef(LiteralRefContent::String(value))
  461|  8.75k|    }
_RNvMst_NtCsaAh6yFmIely_5oxrdf7literalNtB5_10LiteralRef8is_plainB7_:
  526|  3.18M|    pub const fn is_plain(self) -> bool {
  527|  3.18M|        matches!(
  528|  3.18M|            self.0,
  529|       |            LiteralRefContent::String(_) | LiteralRefContent::LanguageTaggedString { .. }
  530|       |        )
  531|  3.18M|    }
_RNvMst_NtCsaAh6yFmIely_5oxrdf7literalNtB5_10LiteralRef10into_ownedB7_:
  534|  3.70M|    pub fn into_owned(self) -> Literal {
  535|  3.70M|        Literal(match self.0 {
  536|    372|            LiteralRefContent::String(value) => LiteralContent::String(value.to_owned()),
  537|    102|            LiteralRefContent::LanguageTaggedString { value, language } => {
  538|    102|                LiteralContent::LanguageTaggedString {
  539|    102|                    value: value.to_owned(),
  540|    102|                    language: language.to_owned(),
  541|    102|                }
  542|       |            }
  543|  3.70M|            LiteralRefContent::TypedLiteral { value, datatype } => LiteralContent::TypedLiteral {
  544|  3.70M|                value: value.to_owned(),
  545|  3.70M|                datatype: datatype.into_owned(),
  546|  3.70M|            },
  547|       |        })
  548|  3.70M|    }
_RNvMst_NtCsaAh6yFmIely_5oxrdf7literalNtB5_10LiteralRef37new_language_tagged_literal_uncheckedB7_:
  482|  1.97k|    pub const fn new_language_tagged_literal_unchecked(value: &'a str, language: &'a str) -> Self {
  483|  1.97k|        LiteralRef(LiteralRefContent::LanguageTaggedString { value, language })
  484|  1.97k|    }
_RNvMst_NtCsaAh6yFmIely_5oxrdf7literalNtB5_10LiteralRef5valueB7_:
  488|  3.18M|    pub const fn value(self) -> &'a str {
  489|  3.18M|        match self.0 {
  490|  1.29k|            LiteralRefContent::String(value)
  491|    622|            | LiteralRefContent::LanguageTaggedString { value, .. }
  492|  3.18M|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  493|  3.18M|        }
  494|  3.18M|    }

_RNvMs4_NtCsaAh6yFmIely_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCs7hwCOMDGQov_4trig:
  128|   411k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   411k|        Self { iri }
  130|   411k|    }
_RNvXs8_NtCsaAh6yFmIely_5oxrdf10named_nodeNtB5_12NamedNodeRefINtNtCs9nhK3FOW46N_4core3cmp9PartialEqNtB5_9NamedNodeE2eqCs7hwCOMDGQov_4trig:
  166|  18.2k|    fn eq(&self, other: &NamedNode) -> bool {
  167|  18.2k|        self.as_str() == other.as_str()
  168|  18.2k|    }
_RNvMs4_NtCsaAh6yFmIely_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCs7hwCOMDGQov_4trig:
  133|  18.2k|    pub const fn as_str(self) -> &'a str {
  134|  18.2k|        self.iri
  135|  18.2k|    }
_RNvMNtCsaAh6yFmIely_5oxrdf10named_nodeNtB2_9NamedNode6as_refCs7hwCOMDGQov_4trig:
   54|   411k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|   411k|        NamedNodeRef::new_unchecked(&self.iri)
   56|   411k|    }
_RNvMs4_NtCsaAh6yFmIely_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCs7hwCOMDGQov_4trig:
  138|   117k|    pub fn into_owned(self) -> NamedNode {
  139|   117k|        NamedNode::new_unchecked(self.iri)
  140|   117k|    }
_RNvXsl_NtCsaAh6yFmIely_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCs7hwCOMDGQov_4trig:
   17|  2.45M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsu_NtCsaAh6yFmIely_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCs7hwCOMDGQov_4trig:
  106|  16.4k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsp_NtCsaAh6yFmIely_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs7hwCOMDGQov_4trig:
   17|  56.4k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMNtCsaAh6yFmIely_5oxrdf10named_nodeNtB2_9NamedNode6as_strCs7hwCOMDGQov_4trig:
   44|  18.2k|    pub fn as_str(&self) -> &str {
   45|  18.2k|        self.iri.as_str()
   46|  18.2k|    }
_RNvMs4_NtCsaAh6yFmIely_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCsgLOhukngm62_5oxttl:
  138|  8.15k|    pub fn into_owned(self) -> NamedNode {
  139|  8.15k|        NamedNode::new_unchecked(self.iri)
  140|  8.15k|    }
_RNvXsp_NtCsaAh6yFmIely_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsgLOhukngm62_5oxttl:
   17|   862k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsu_NtCsaAh6yFmIely_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsgLOhukngm62_5oxttl:
  106|   107k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMs4_NtCsaAh6yFmIely_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCsgLOhukngm62_5oxttl:
  128|  1.29M|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  1.29M|        Self { iri }
  130|  1.29M|    }
_RNvXs5_NtCsaAh6yFmIely_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsgLOhukngm62_5oxttl:
  145|   860k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|   860k|        write!(f, "<{}>", self.as_str())
  147|   860k|    }
_RNvMs4_NtCsaAh6yFmIely_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCsgLOhukngm62_5oxttl:
  133|   916k|    pub const fn as_str(self) -> &'a str {
  134|   916k|        self.iri
  135|   916k|    }
_RNvMNtCsaAh6yFmIely_5oxrdf10named_nodeNtB2_9NamedNode6as_refCsgLOhukngm62_5oxttl:
   54|  1.29M|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  1.29M|        NamedNodeRef::new_unchecked(&self.iri)
   56|  1.29M|    }
_RINvMNtCsaAh6yFmIely_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|  10.0M|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  10.0M|        Self { iri: iri.into() }
   41|  10.0M|    }
_RINvMNtCsaAh6yFmIely_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCsjOdcKtOMjJI_5alloc6string6StringEB5_:
   39|  1.12M|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  1.12M|        Self { iri: iri.into() }
   41|  1.12M|    }
_RINvXsA_NtCsaAh6yFmIely_5oxrdf10named_nodeNtB6_12NamedNodeRefNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEB8_:
  106|   108k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMs4_NtCsaAh6yFmIely_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|  8.47M|    pub const fn as_str(self) -> &'a str {
  134|  8.47M|        self.iri
  135|  8.47M|    }
_RNvMNtCsaAh6yFmIely_5oxrdf10named_nodeNtB2_9NamedNode6as_refB4_:
   54|  7.48M|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  7.48M|        NamedNodeRef::new_unchecked(&self.iri)
   56|  7.48M|    }
_RNvXsp_NtCsaAh6yFmIely_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
   17|   137M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsu_NtCsaAh6yFmIely_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB7_:
  106|  1.28M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMs4_NtCsaAh6yFmIely_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|  9.90M|    pub fn into_owned(self) -> NamedNode {
  139|  9.90M|        NamedNode::new_unchecked(self.iri)
  140|  9.90M|    }
_RNvXs9_NtCsaAh6yFmIely_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs9nhK3FOW46N_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|   736k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|   736k|        self.as_str() == other.as_str()
  175|   736k|    }
_RNvMNtCsaAh6yFmIely_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|   736k|    pub fn as_str(&self) -> &str {
   45|   736k|        self.iri.as_str()
   46|   736k|    }
_RNvMs4_NtCsaAh6yFmIely_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedB7_:
  128|  10.6M|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  10.6M|        Self { iri }
  130|  10.6M|    }
_RNvXs6_NtCsaAh6yFmIely_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|   930k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|   930k|        node.into_owned()
  154|   930k|    }

_RNvXs2V_NtCsaAh6yFmIely_5oxrdf6tripleNtB6_4QuadNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCs7hwCOMDGQov_4trig:
 1149|   124k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMs1c_NtCsaAh6yFmIely_5oxrdf6tripleNtB6_9GraphName16is_default_graphCs7hwCOMDGQov_4trig:
  960|   114k|    pub fn is_default_graph(&self) -> bool {
  961|   114k|        self.as_ref().is_default_graph()
  962|   114k|    }
_RNvXs2p_NtCsaAh6yFmIely_5oxrdf6tripleNtB6_6TripleNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCs7hwCOMDGQov_4trig:
  780|  1.70M|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMsn_NtCsaAh6yFmIely_5oxrdf6tripleNtB5_10SubjectRef10into_ownedCs7hwCOMDGQov_4trig:
  294|   100k|    pub fn into_owned(self) -> Subject {
  295|   100k|        match self {
  296|  8.00k|            Self::NamedNode(node) => Subject::NamedNode(node.into_owned()),
  297|  65.5k|            Self::BlankNode(node) => Subject::BlankNode(node.into_owned()),
  298|       |            #[cfg(feature = "rdf-star")]
  299|  27.2k|            Self::Triple(triple) => Subject::Triple(Box::new(triple.clone())),
  300|       |        }
  301|   100k|    }
_RNvXs1X_NtCsaAh6yFmIely_5oxrdf6tripleNtB6_7SubjectNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs7hwCOMDGQov_4trig:
  155|  27.2k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1A_NtCsaAh6yFmIely_5oxrdf6tripleNtB6_7QuadRefINtNtCs9nhK3FOW46N_4core7convert4FromRNtB6_4QuadE4fromCs7hwCOMDGQov_4trig:
 1298|   199k|    fn from(quad: &'a Quad) -> Self {
 1299|   199k|        quad.as_ref()
 1300|   199k|    }
_RNvXs1V_NtCsaAh6yFmIely_5oxrdf6tripleNtB6_7SubjectNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCs7hwCOMDGQov_4trig:
  155|  1.82M|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMs1c_NtCsaAh6yFmIely_5oxrdf6tripleNtB6_9GraphName6as_refCs7hwCOMDGQov_4trig:
  965|   436k|    pub fn as_ref(&self) -> GraphNameRef<'_> {
  966|   436k|        match self {
  967|  40.9k|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.as_ref()),
  968|  17.4k|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.as_ref()),
  969|   378k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  970|       |        }
  971|   436k|    }
_RNvXs2E_NtCsaAh6yFmIely_5oxrdf6tripleNtB6_9GraphNameNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCs7hwCOMDGQov_4trig:
  940|   124k|#[derive(Eq, PartialEq, Debug, Clone, Hash, Default)]
_RNvMs1k_NtCsaAh6yFmIely_5oxrdf6tripleNtB6_12GraphNameRef16is_default_graphCs7hwCOMDGQov_4trig:
 1048|   114k|    pub fn is_default_graph(&self) -> bool {
 1049|   114k|        matches!(self, Self::DefaultGraph)
 1050|   114k|    }
_RNvXs2M_NtCsaAh6yFmIely_5oxrdf6tripleNtB6_12GraphNameRefNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCs7hwCOMDGQov_4trig:
 1028|   119k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash, Default)]
_RNvXs2c_NtCsaAh6yFmIely_5oxrdf6tripleNtB6_4TermNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs7hwCOMDGQov_4trig:
  385|  27.2k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2a_NtCsaAh6yFmIely_5oxrdf6tripleNtB6_4TermNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCs7hwCOMDGQov_4trig:
  385|  1.22M|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMs1u_NtCsaAh6yFmIely_5oxrdf6tripleNtB6_4Quad6as_refCs7hwCOMDGQov_4trig:
 1182|   199k|    pub fn as_ref(&self) -> QuadRef<'_> {
 1183|   199k|        QuadRef {
 1184|   199k|            subject: self.subject.as_ref(),
 1185|   199k|            predicate: self.predicate.as_ref(),
 1186|   199k|            object: self.object.as_ref(),
 1187|   199k|            graph_name: self.graph_name.as_ref(),
 1188|   199k|        }
 1189|   199k|    }
_RNvMsc_NtCsaAh6yFmIely_5oxrdf6tripleNtB5_7Subject6as_refCs7hwCOMDGQov_4trig:
  181|   312k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|   312k|        match self {
  183|  34.6k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|   144k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|   133k|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|   312k|    }
_RNvXs22_NtCsaAh6yFmIely_5oxrdf6tripleNtB6_10SubjectRefNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCs7hwCOMDGQov_4trig:
  268|   112k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RNvMsy_NtCsaAh6yFmIely_5oxrdf6tripleNtB5_4Term6as_refCs7hwCOMDGQov_4trig:
  417|   199k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|   199k|        match self {
  419|  19.9k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|  56.3k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|   121k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|  2.35k|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|   199k|    }
_RNvXs2r_NtCsaAh6yFmIely_5oxrdf6tripleNtB6_6TripleNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs7hwCOMDGQov_4trig:
  780|  27.2k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMs1k_NtCsaAh6yFmIely_5oxrdf6tripleNtB6_12GraphNameRef10into_ownedCs7hwCOMDGQov_4trig:
 1053|  3.58k|    pub fn into_owned(self) -> GraphName {
 1054|  3.58k|        match self {
 1055|  1.59k|            Self::NamedNode(node) => GraphName::NamedNode(node.into_owned()),
 1056|    748|            Self::BlankNode(node) => GraphName::BlankNode(node.into_owned()),
 1057|  1.24k|            Self::DefaultGraph => GraphName::DefaultGraph,
 1058|       |        }
 1059|  3.58k|    }
_RNvXs12_NtCsaAh6yFmIely_5oxrdf6tripleNtB6_7TermRefINtNtCs9nhK3FOW46N_4core7convert4FromNtB6_10SubjectRefE4fromCsgLOhukngm62_5oxttl:
  732|   735k|    fn from(node: SubjectRef<'a>) -> Self {
  733|   735k|        match node {
  734|  36.2k|            SubjectRef::NamedNode(node) => node.into(),
  735|  66.0k|            SubjectRef::BlankNode(node) => node.into(),
  736|       |            #[cfg(feature = "rdf-star")]
  737|   633k|            SubjectRef::Triple(triple) => triple.into(),
  738|       |        }
  739|   735k|    }
_RNvXs1i_NtCsaAh6yFmIely_5oxrdf6tripleNtB6_9GraphNameINtNtCs9nhK3FOW46N_4core7convert4FromNtB6_16NamedOrBlankNodeE4fromCsgLOhukngm62_5oxttl:
 1011|  13.1k|    fn from(node: NamedOrBlankNode) -> Self {
 1012|  13.1k|        match node {
 1013|  9.48k|            NamedOrBlankNode::NamedNode(node) => node.into(),
 1014|  3.61k|            NamedOrBlankNode::BlankNode(node) => node.into(),
 1015|       |        }
 1016|  13.1k|    }
_RNvXsT_NtCsaAh6yFmIely_5oxrdf6tripleNtB5_7TermRefINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCsgLOhukngm62_5oxttl:
  665|   779k|    fn from(node: NamedNodeRef<'a>) -> Self {
  666|   779k|        Self::NamedNode(node)
  667|   779k|    }
_RNvXsV_NtCsaAh6yFmIely_5oxrdf6tripleNtB5_7TermRefINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10blank_node12BlankNodeRefE4fromCsgLOhukngm62_5oxttl:
  679|  66.7k|    fn from(node: BlankNodeRef<'a>) -> Self {
  680|  66.7k|        Self::BlankNode(node)
  681|  66.7k|    }
_RNvXs1g_NtCsaAh6yFmIely_5oxrdf6tripleNtB6_9GraphNameINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB8_10blank_node9BlankNodeE4fromCsgLOhukngm62_5oxttl:
  997|  3.61k|    fn from(node: BlankNode) -> Self {
  998|  3.61k|        Self::BlankNode(node)
  999|  3.61k|    }
_RNvXsl_NtCsaAh6yFmIely_5oxrdf6tripleNtB5_7SubjectINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_16NamedOrBlankNodeE4fromCsgLOhukngm62_5oxttl:
  252|   106k|    fn from(node: NamedOrBlankNode) -> Self {
  253|   106k|        match node {
  254|  49.5k|            NamedOrBlankNode::NamedNode(node) => node.into(),
  255|  57.1k|            NamedOrBlankNode::BlankNode(node) => node.into(),
  256|       |        }
  257|   106k|    }
_RNvXs1e_NtCsaAh6yFmIely_5oxrdf6tripleNtB6_9GraphNameINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB8_10named_node9NamedNodeE4fromCsgLOhukngm62_5oxttl:
  983|  9.48k|    fn from(node: NamedNode) -> Self {
  984|  9.48k|        Self::NamedNode(node)
  985|  9.48k|    }
_RNvXs0_NtCsaAh6yFmIely_5oxrdf6tripleNtB5_16NamedOrBlankNodeINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromCsgLOhukngm62_5oxttl:
   43|  68.2k|    fn from(node: NamedNode) -> Self {
   44|  68.2k|        Self::NamedNode(node)
   45|  68.2k|    }
_RNvXs2c_NtCsaAh6yFmIely_5oxrdf6tripleNtB6_4TermNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsgLOhukngm62_5oxttl:
  385|   442k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsZ_NtCsaAh6yFmIely_5oxrdf6tripleNtB5_7TermRefINtNtCs9nhK3FOW46N_4core7convert4FromRNtB5_6TripleE4fromCsgLOhukngm62_5oxttl:
  708|   633k|    fn from(node: &'a Triple) -> Self {
  709|   633k|        Self::Triple(node)
  710|   633k|    }
_RNvMsc_NtCsaAh6yFmIely_5oxrdf6tripleNtB5_7Subject6as_refCsgLOhukngm62_5oxttl:
  181|   635k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|   635k|        match self {
  183|  28.2k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|    490|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|   606k|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|   635k|    }
_RNvXs2_NtCsaAh6yFmIely_5oxrdf6tripleNtB5_16NamedOrBlankNodeINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromCsgLOhukngm62_5oxttl:
   57|  61.2k|    fn from(node: BlankNode) -> Self {
   58|  61.2k|        Self::BlankNode(node)
   59|  61.2k|    }
_RNvXsL_NtCsaAh6yFmIely_5oxrdf6tripleNtB5_4TermINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_7SubjectE4fromCsgLOhukngm62_5oxttl:
  520|    175|    fn from(node: Subject) -> Self {
  521|    175|        match node {
  522|      0|            Subject::NamedNode(node) => node.into(),
  523|    175|            Subject::BlankNode(node) => node.into(),
  524|       |            #[cfg(feature = "rdf-star")]
  525|      0|            Subject::Triple(triple) => Self::Triple(triple),
  526|       |        }
  527|    175|    }
_RNvMsy_NtCsaAh6yFmIely_5oxrdf6tripleNtB5_4Term6as_refCsgLOhukngm62_5oxttl:
  417|   635k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|   635k|        match self {
  419|  98.7k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|    903|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|   535k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|     29|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|   635k|    }
_RNvXsf_NtCsaAh6yFmIely_5oxrdf6tripleNtB5_7SubjectINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCsgLOhukngm62_5oxttl:
  207|    186|    fn from(node: NamedNodeRef<'_>) -> Self {
  208|    186|        node.into_owned().into()
  209|    186|    }
_RNvXs1X_NtCsaAh6yFmIely_5oxrdf6tripleNtB6_7SubjectNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsgLOhukngm62_5oxttl:
  155|   525k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsB_NtCsaAh6yFmIely_5oxrdf6tripleNtB5_4TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCsgLOhukngm62_5oxttl:
  444|  7.96k|    fn from(node: NamedNodeRef<'_>) -> Self {
  445|  7.96k|        node.into_owned().into()
  446|  7.96k|    }
_RNvXs2G_NtCsaAh6yFmIely_5oxrdf6tripleNtB6_9GraphNameNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsgLOhukngm62_5oxttl:
  940|   481k|#[derive(Eq, PartialEq, Debug, Clone, Hash, Default)]
_RINvMs16_NtCsaAh6yFmIely_5oxrdf6tripleNtB7_6Triple3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtB7_4TermECsgLOhukngm62_5oxttl:
  795|   724k|    pub fn new(
  796|   724k|        subject: impl Into<Subject>,
  797|   724k|        predicate: impl Into<NamedNode>,
  798|   724k|        object: impl Into<Term>,
  799|   724k|    ) -> Self {
  800|   724k|        Self {
  801|   724k|            subject: subject.into(),
  802|   724k|            predicate: predicate.into(),
  803|   724k|            object: object.into(),
  804|   724k|        }
  805|   724k|    }
_RINvMs1u_NtCsaAh6yFmIely_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node12NamedNodeRefB11_NtB7_9GraphNameECsgLOhukngm62_5oxttl:
 1167|  4.55k|    pub fn new(
 1168|  4.55k|        subject: impl Into<Subject>,
 1169|  4.55k|        predicate: impl Into<NamedNode>,
 1170|  4.55k|        object: impl Into<Term>,
 1171|  4.55k|        graph_name: impl Into<GraphName>,
 1172|  4.55k|    ) -> Self {
 1173|  4.55k|        Self {
 1174|  4.55k|            subject: subject.into(),
 1175|  4.55k|            predicate: predicate.into(),
 1176|  4.55k|            object: object.into(),
 1177|  4.55k|            graph_name: graph_name.into(),
 1178|  4.55k|        }
 1179|  4.55k|    }
_RINvMs1u_NtCsaAh6yFmIely_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node12NamedNodeRefNtNtB9_10blank_node9BlankNodeNtB7_9GraphNameECsgLOhukngm62_5oxttl:
 1167|  33.9k|    pub fn new(
 1168|  33.9k|        subject: impl Into<Subject>,
 1169|  33.9k|        predicate: impl Into<NamedNode>,
 1170|  33.9k|        object: impl Into<Term>,
 1171|  33.9k|        graph_name: impl Into<GraphName>,
 1172|  33.9k|    ) -> Self {
 1173|  33.9k|        Self {
 1174|  33.9k|            subject: subject.into(),
 1175|  33.9k|            predicate: predicate.into(),
 1176|  33.9k|            object: object.into(),
 1177|  33.9k|            graph_name: graph_name.into(),
 1178|  33.9k|        }
 1179|  33.9k|    }
_RINvMs1u_NtCsaAh6yFmIely_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtB7_4TermNtB7_9GraphNameECsgLOhukngm62_5oxttl:
 1167|   442k|    pub fn new(
 1168|   442k|        subject: impl Into<Subject>,
 1169|   442k|        predicate: impl Into<NamedNode>,
 1170|   442k|        object: impl Into<Term>,
 1171|   442k|        graph_name: impl Into<GraphName>,
 1172|   442k|    ) -> Self {
 1173|   442k|        Self {
 1174|   442k|            subject: subject.into(),
 1175|   442k|            predicate: predicate.into(),
 1176|   442k|            object: object.into(),
 1177|   442k|            graph_name: graph_name.into(),
 1178|   442k|        }
 1179|   442k|    }
_RNvXsC_NtCsaAh6yFmIely_5oxrdf6tripleNtB5_4TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  451|   223k|    fn from(node: BlankNode) -> Self {
  452|   223k|        Self::BlankNode(node)
  453|   223k|    }
_RNvXsA_NtCsaAh6yFmIely_5oxrdf6tripleNtB5_4TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|   142k|    fn from(node: NamedNode) -> Self {
  438|   142k|        Self::NamedNode(node)
  439|   142k|    }
_RNvXs1X_NtCsaAh6yFmIely_5oxrdf6tripleNtB6_7SubjectNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB8_:
  155|  67.1M|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsG_NtCsaAh6yFmIely_5oxrdf6tripleNtB5_4TermINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_6TripleE4fromB7_:
  480|  5.76k|    fn from(triple: Triple) -> Self {
  481|  5.76k|        Self::Triple(Box::new(triple))
  482|  5.76k|    }
_RNvMsy_NtCsaAh6yFmIely_5oxrdf6tripleNtB5_4Term6as_refB7_:
  417|  3.66M|    pub fn as_ref(&self) -> TermRef<'_> {
  418|  3.66M|        match self {
  419|   574k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|    675|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  3.09M|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|     75|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|  3.66M|    }
_RNvXs2r_NtCsaAh6yFmIely_5oxrdf6tripleNtB6_6TripleNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB8_:
  780|  67.1M|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMs16_NtCsaAh6yFmIely_5oxrdf6tripleNtB6_6Triple6as_refB8_:
  835|  3.66M|    pub fn as_ref(&self) -> TripleRef<'_> {
  836|  3.66M|        TripleRef {
  837|  3.66M|            subject: self.subject.as_ref(),
  838|  3.66M|            predicate: self.predicate.as_ref(),
  839|  3.66M|            object: self.object.as_ref(),
  840|  3.66M|        }
  841|  3.66M|    }
_RNvXs2c_NtCsaAh6yFmIely_5oxrdf6tripleNtB6_4TermNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB8_:
  385|  67.1M|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMsR_NtCsaAh6yFmIely_5oxrdf6tripleNtB5_7TermRef10into_ownedB7_:
  637|  4.39M|    pub fn into_owned(self) -> Term {
  638|  4.39M|        match self {
  639|   688k|            Self::NamedNode(node) => Term::NamedNode(node.into_owned()),
  640|    540|            Self::BlankNode(node) => Term::BlankNode(node.into_owned()),
  641|  3.70M|            Self::Literal(literal) => Term::Literal(literal.into_owned()),
  642|       |            #[cfg(feature = "rdf-star")]
  643|     60|            Self::Triple(triple) => Term::Triple(Box::new(triple.clone())),
  644|       |        }
  645|  4.39M|    }
_RNvXse_NtCsaAh6yFmIely_5oxrdf6tripleNtB5_7SubjectINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|  91.8k|    fn from(node: NamedNode) -> Self {
  201|  91.8k|        Self::NamedNode(node)
  202|  91.8k|    }
_RNvMsn_NtCsaAh6yFmIely_5oxrdf6tripleNtB5_10SubjectRef10into_ownedB7_:
  294|  2.99M|    pub fn into_owned(self) -> Subject {
  295|  2.99M|        match self {
  296|   184k|            Self::NamedNode(node) => Subject::NamedNode(node.into_owned()),
  297|    490|            Self::BlankNode(node) => Subject::BlankNode(node.into_owned()),
  298|       |            #[cfg(feature = "rdf-star")]
  299|  2.81M|            Self::Triple(triple) => Subject::Triple(Box::new(triple.clone())),
  300|       |        }
  301|  2.99M|    }
_RNvMsc_NtCsaAh6yFmIely_5oxrdf6tripleNtB5_7Subject6as_refB7_:
  181|  3.66M|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  3.66M|        match self {
  183|   154k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|    612|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|  3.51M|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  3.66M|    }
_RNvXsi_NtCsaAh6yFmIely_5oxrdf6tripleNtB5_7SubjectINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_6TripleE4fromB7_:
  229|  2.11M|    fn from(node: Triple) -> Self {
  230|  2.11M|        Self::Triple(Box::new(node))
  231|  2.11M|    }
_RNvXsg_NtCsaAh6yFmIely_5oxrdf6tripleNtB5_7SubjectINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|   287k|    fn from(node: BlankNode) -> Self {
  215|   287k|        Self::BlankNode(node)
  216|   287k|    }
_RNvXsE_NtCsaAh6yFmIely_5oxrdf6tripleNtB5_4TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  465|   751k|    fn from(literal: Literal) -> Self {
  466|   751k|        Self::Literal(literal)
  467|   751k|    }
_RNvMs18_NtCsaAh6yFmIely_5oxrdf6tripleNtB6_9TripleRef10into_ownedB8_:
  908|  2.93M|    pub fn into_owned(self) -> Triple {
  909|  2.93M|        Triple {
  910|  2.93M|            subject: self.subject.into_owned(),
  911|  2.93M|            predicate: self.predicate.into_owned(),
  912|  2.93M|            object: self.object.into_owned(),
  913|  2.93M|        }
  914|  2.93M|    }

_RNCNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB6_7N3Lexer18recognize_variable0B8_:
  337|  23.6k|            result.and_then(|(name, _)| {
  338|  23.6k|                if name.is_empty() {
  339|  18.9k|                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|  4.75k|                    Ok(N3Token::Variable(name))
  342|       |                }
  343|  23.6k|            }),
_RNCNvNtCsgLOhukngm62_5oxttl5lexer16string_from_utf80B5_:
  969|  10.0k|    String::from_utf8(data).map_err(|e| {
  970|  10.0k|        (
  971|  10.0k|            range.start + e.utf8_error().valid_up_to()
  972|  10.0k|                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  973|  10.0k|            format!("Invalid UTF-8: {e}"),
  974|  10.0k|        )
  975|  10.0k|            .into()
  976|  10.0k|    })
_RNCNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB6_7N3Lexer14parse_lang_tag0B8_:
  582|  3.30k|                .map_err(|e| (position.clone(), e.to_string()))?
_RNCNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_char0B8_:
  807|    298|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  808|    298|            (
  809|    298|                position..position + len + 2,
  810|    298|                format!(
  811|    298|                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  812|    298|                ),
  813|    298|            )
  814|    298|        })?;
_RNCNvNtCsgLOhukngm62_5oxttl5lexer13str_from_utf80B5_:
  959|  2.63k|    str::from_utf8(data).map_err(|e| {
  960|  2.63k|        (
  961|  2.63k|            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  962|  2.63k|            format!("Invalid UTF-8: {e}"),
  963|  2.63k|        )
  964|  2.63k|            .into()
  965|  2.63k|    })
_RNCNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB6_7N3Lexer9parse_iri0B8_:
  224|  24.0k|                        .map_err(|e| (position, e.to_string()))?
_RNCNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB6_7N3Lexer22recognize_unicode_char0B8_:
  887|  21.3k|                .map(|c| (c, bytes_needed + 1))
_RNCNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_chars_0B8_:
  815|    215|        let c = char::from_u32(codepoint).ok_or_else(|| {
  816|    215|            (
  817|    215|                position..position + len +2,
  818|    215|                format!(
  819|    215|                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  820|    215|                ),
  821|    215|            )
  822|    215|        })?;
_RNCNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB6_7N3Lexer26recognize_pname_or_keyword0B8_:
  320|  76.9k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|  76.9k|                prefix: pn_prefix,
  322|  76.9k|                local,
  323|  76.9k|                might_be_invalid_iri,
  324|  76.9k|            }),
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer3new:
  173|  27.1k|    pub fn new(mode: N3LexerMode, unchecked: bool) -> Self {
  174|  27.1k|        Self { mode, unchecked }
  175|  27.1k|    }
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer26recognize_pname_or_keyword:
  237|  1.52M|    fn recognize_pname_or_keyword<'a>(
  238|  1.52M|        &self,
  239|  1.52M|        data: &'a [u8],
  240|  1.52M|        is_ending: bool,
  241|  1.52M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  242|  1.52M|        // [139s]  PNAME_NS   ::=  PN_PREFIX? ':'
  243|  1.52M|        // [140s]  PNAME_LN   ::=  PNAME_NS PN_LOCAL
  244|  1.52M|        // [167s]  PN_PREFIX  ::=  PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
  245|  1.52M|        let mut i = 0;
  246|       |        loop {
  247|  3.11M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  248|  2.96M|                match r {
  249|  2.66M|                    Ok((c, consumed)) => {
  250|  2.66M|                        if c == ':' {
  251|   117k|                            i += consumed;
  252|   117k|                            break;
  253|  2.54M|                        } else if i == 0 {
  254|  1.12M|                            if !Self::is_possible_pn_chars_base(c) {
  255|   816k|                                return Some((
  256|   816k|                                    consumed,
  257|   816k|                                    Err((
  258|   816k|                                        0..consumed,
  259|   816k|                                        format!(
  260|   816k|                                            "'{c}' is not allowed at the beginning of a prefix name"
  261|   816k|                                        ),
  262|   816k|                                    )
  263|   816k|                                        .into()),
  264|   816k|                                ));
  265|   305k|                            }
  266|   305k|                            i += consumed;
  267|  1.42M|                        } else if Self::is_possible_pn_chars(c) || c == '.' {
  268|  1.28M|                            i += consumed;
  269|  1.28M|                        } else {
  270|   182k|                            while data[..i].ends_with(b".") {
  271|  40.8k|                                i -= 1;
  272|  40.8k|                            }
  273|   141k|                            return Some((
  274|   141k|                                i,
  275|   141k|                                str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  276|   141k|                            ));
  277|       |                        }
  278|       |                    }
  279|   302k|                    Err(e) => return Some((e.location.end, Err(e))),
  280|       |                }
  281|   146k|            } else if is_ending {
  282|  3.55k|                while data[..i].ends_with(b".") {
  283|    731|                    i -= 1;
  284|    731|                }
  285|  2.82k|                return Some(if i == 0 {
  286|    844|                    (
  287|    844|                        1,
  288|    844|                        Err((0..1, format!("Unexpected byte {}", data[0])).into()),
  289|    844|                    )
  290|       |                } else {
  291|  1.97k|                    (
  292|  1.97k|                        i,
  293|  1.97k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  294|  1.97k|                    )
  295|       |                });
  296|       |            } else {
  297|   143k|                return None;
  298|       |            }
  299|       |        }
  300|   117k|        let pn_prefix = match str_from_utf8(&data[..i - 1], 0..i - 1) {
  301|   117k|            Ok(pn_prefix) => pn_prefix,
  302|      0|            Err(e) => return Some((i, Err(e))),
  303|       |        };
  304|   117k|        if pn_prefix.ends_with('.') {
  305|    111|            return Some((
  306|    111|                i,
  307|    111|                Err((
  308|    111|                    0..i,
  309|    111|                    format!(
  310|    111|                        "'{pn_prefix}' is not a valid prefix: prefixes are not allowed to end with '.'"),
  311|    111|                )
  312|    111|                    .into()),
  313|    111|            ));
  314|   117k|        }
  315|       |
  316|  79.6k|        let (consumed, pn_local_result) =
  317|   117k|            self.recognize_optional_pn_local(&data[i..], is_ending)?;
  318|  79.6k|        Some((
  319|  79.6k|            consumed + i,
  320|  79.6k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|       |                prefix: pn_prefix,
  322|       |                local,
  323|       |                might_be_invalid_iri,
  324|  79.6k|            }),
  325|  79.6k|        ))
  326|  1.52M|    }
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer27recognize_optional_pn_local:
  347|   161k|    fn recognize_optional_pn_local<'a>(
  348|   161k|        &self,
  349|   161k|        data: &'a [u8],
  350|   161k|        is_ending: bool,
  351|   161k|    ) -> Option<(usize, Result<(Cow<'a, str>, bool), TokenRecognizerError>)> {
  352|   161k|        // [168s]  PN_LOCAL  ::=  (PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
  353|   161k|        let mut i = 0;
  354|   161k|        let mut buffer = None; // Buffer if there are some escaped characters
  355|   161k|        let mut position_that_is_already_in_buffer = 0;
  356|   161k|        let mut might_be_invalid_iri = false;
  357|   161k|        let mut ends_with_unescaped_dot = 0;
  358|       |        loop {
  359|   889k|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  360|   837k|                match r {
  361|   834k|                    Ok((c, consumed)) => {
  362|   834k|                        if c == '%' {
  363|  4.74k|                            i += 1;
  364|  4.74k|                            let a = char::from(*data.get(i)?);
  365|  2.66k|                            i += 1;
  366|  2.66k|                            let b = char::from(*data.get(i)?);
  367|  2.19k|                            if !a.is_ascii_hexdigit() || !b.is_ascii_hexdigit() {
  368|    343|                                return Some((i + 1, Err((
  369|    343|                                    i - 2..=i, format!("escapes in IRIs should be % followed by two hexadecimal characters, found '%{a}{b}'")
  370|    343|                                ).into())));
  371|  1.84k|                            }
  372|  1.84k|                            i += 1;
  373|  1.84k|                            ends_with_unescaped_dot = 0;
  374|   830k|                        } else if c == '\\' {
  375|   104k|                            i += 1;
  376|   104k|                            let a = char::from(*data.get(i)?);
  377|   102k|                            if self.unchecked
  378|  59.6k|                                || matches!(
  379|  88.6k|                                    a,
  380|       |                                    '_' | '~'
  381|       |                                        | '.'
  382|       |                                        | '-'
  383|       |                                        | '!'
  384|       |                                        | '$'
  385|       |                                        | '&'
  386|       |                                        | '\''
  387|       |                                        | '('
  388|       |                                        | ')'
  389|       |                                        | '*'
  390|       |                                        | '+'
  391|       |                                        | ','
  392|       |                                        | ';'
  393|       |                                        | '='
  394|       |                                )
  395|  42.9k|                            {
  396|  42.9k|                                // ok to escape
  397|  59.6k|                            } else if matches!(a, '/' | '?' | '#' | '@' | '%') {
  398|  57.4k|                                // ok to escape but requires IRI validation
  399|  57.4k|                                might_be_invalid_iri = true;
  400|  57.4k|                            } else {
  401|  2.15k|                                return Some((i + 1, Err((
  402|  2.15k|                                    i..=i, format!("The character that are allowed to be escaped in IRIs are _~.-!$&'()*+,;=/?#@%, found '{a}'")
  403|  2.15k|                                ).into())));
  404|       |                            }
  405|   100k|                            let buffer = buffer.get_or_insert_with(String::new);
  406|   100k|                            // We add the missing bytes
  407|   100k|                            if i - position_that_is_already_in_buffer > 1 {
  408|  31.2k|                                buffer.push_str(
  409|  31.2k|                                    match str_from_utf8(
  410|  31.2k|                                        &data[position_that_is_already_in_buffer..i - 1],
  411|  31.2k|                                        position_that_is_already_in_buffer..i - 1,
  412|  31.2k|                                    ) {
  413|  31.2k|                                        Ok(data) => data,
  414|      0|                                        Err(e) => return Some((i, Err(e))),
  415|       |                                    },
  416|       |                                )
  417|  69.2k|                            }
  418|   100k|                            buffer.push(a);
  419|   100k|                            i += 1;
  420|   100k|                            position_that_is_already_in_buffer = i;
  421|   100k|                            ends_with_unescaped_dot = 0;
  422|   725k|                        } else if i == 0 {
  423|   108k|                            if !(Self::is_possible_pn_chars_u(c) || c == ':' || c.is_ascii_digit())
  424|       |                            {
  425|  36.9k|                                return Some((0, Ok((Cow::Borrowed(""), false))));
  426|  71.1k|                            }
  427|  71.1k|                            if !self.unchecked {
  428|       |                                might_be_invalid_iri |=
  429|  46.3k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  430|  46.3k|                                        || c == ':';
  431|  24.7k|                            }
  432|  71.1k|                            i += consumed;
  433|   617k|                        } else if Self::is_possible_pn_chars(c) || c == ':' {
  434|   479k|                            if !self.unchecked {
  435|       |                                might_be_invalid_iri |=
  436|   317k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  437|   317k|                                        || c == ':';
  438|   162k|                            }
  439|   479k|                            i += consumed;
  440|   479k|                            ends_with_unescaped_dot = 0;
  441|   137k|                        } else if c == '.' {
  442|  74.9k|                            i += consumed;
  443|  74.9k|                            ends_with_unescaped_dot += 1;
  444|  74.9k|                        } else {
  445|  62.6k|                            let buffer = if let Some(mut buffer) = buffer {
  446|  30.3k|                                buffer.push_str(
  447|  30.3k|                                    match str_from_utf8(
  448|  30.3k|                                        &data[position_that_is_already_in_buffer..i],
  449|  30.3k|                                        position_that_is_already_in_buffer..i,
  450|  30.3k|                                    ) {
  451|  30.3k|                                        Ok(data) => data,
  452|      0|                                        Err(e) => return Some((i, Err(e))),
  453|       |                                    },
  454|       |                                );
  455|       |                                // We do not include the last dots
  456|  30.3k|                                for _ in 0..ends_with_unescaped_dot {
  457|  1.65k|                                    buffer.pop();
  458|  1.65k|                                }
  459|  30.3k|                                i -= ends_with_unescaped_dot;
  460|  30.3k|                                Cow::Owned(buffer)
  461|       |                            } else {
  462|  32.2k|                                let mut data = match str_from_utf8(&data[..i], 0..i) {
  463|  32.2k|                                    Ok(data) => data,
  464|      0|                                    Err(e) => return Some((i, Err(e))),
  465|       |                                };
  466|       |                                // We do not include the last dots
  467|  32.2k|                                data = &data[..data.len() - ends_with_unescaped_dot];
  468|  32.2k|                                i -= ends_with_unescaped_dot;
  469|  32.2k|                                Cow::Borrowed(data)
  470|       |                            };
  471|  62.6k|                            return Some((i, Ok((buffer, might_be_invalid_iri))));
  472|       |                        }
  473|       |                    }
  474|  2.98k|                    Err(e) => return Some((e.location.end, Err(e))),
  475|       |                }
  476|  51.9k|            } else if is_ending {
  477|  1.08k|                let buffer = if let Some(mut buffer) = buffer {
  478|       |                    // We do not include the last dot
  479|    753|                    while buffer.ends_with('.') {
  480|    382|                        buffer.pop();
  481|    382|                        i -= 1;
  482|    382|                    }
  483|    371|                    Cow::Owned(buffer)
  484|       |                } else {
  485|    715|                    let mut data = match str_from_utf8(&data[..i], 0..i) {
  486|    715|                        Ok(data) => data,
  487|      0|                        Err(e) => return Some((i, Err(e))),
  488|       |                    };
  489|       |                    // We do not include the last dot
  490|  1.20k|                    while let Some(d) = data.strip_suffix('.') {
  491|    486|                        data = d;
  492|    486|                        i -= 1;
  493|    486|                    }
  494|    715|                    Cow::Borrowed(data)
  495|       |                };
  496|  1.08k|                return Some((i, Ok((buffer, might_be_invalid_iri))));
  497|       |            } else {
  498|  50.8k|                return None;
  499|       |            }
  500|       |        }
  501|   161k|    }
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer16recognize_number:
  663|  1.02M|    fn recognize_number(data: &[u8]) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  664|  1.02M|        // [19]  INTEGER    ::=  [+-]? [0-9]+
  665|  1.02M|        // [20]  DECIMAL    ::=  [+-]? [0-9]* '.' [0-9]+
  666|  1.02M|        // [21]  DOUBLE     ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  667|  1.02M|        // [154s] EXPONENT  ::=  [eE] [+-]? [0-9]+
  668|  1.02M|        let mut i = 0;
  669|  1.02M|        let c = *data.first()?;
  670|  1.02M|        if matches!(c, b'+' | b'-') {
  671|  36.8k|            i += 1;
  672|   988k|        }
  673|       |        // We read the digits before .
  674|  1.02M|        let mut count_before: usize = 0;
  675|       |        loop {
  676|  3.31M|            let c = *data.get(i)?;
  677|  3.26M|            if c.is_ascii_digit() {
  678|  2.28M|                i += 1;
  679|  2.28M|                count_before += 1;
  680|  2.28M|            } else {
  681|   975k|                break;
  682|       |            }
  683|       |        }
  684|       |
  685|       |        // We read the digits after .
  686|       |        #[allow(clippy::if_then_some_else_none)]
  687|   975k|        let count_after = if *data.get(i)? == b'.' {
  688|  86.6k|            i += 1;
  689|  86.6k|
  690|  86.6k|            let mut count_after = 0;
  691|       |            loop {
  692|   169k|                let c = *data.get(i)?;
  693|   156k|                if c.is_ascii_digit() {
  694|  83.2k|                    i += 1;
  695|  83.2k|                    count_after += 1;
  696|  83.2k|                } else {
  697|  73.5k|                    break;
  698|  73.5k|                }
  699|  73.5k|            }
  700|  73.5k|            Some(count_after)
  701|       |        } else {
  702|   888k|            None
  703|       |        };
  704|       |
  705|       |        // End
  706|   962k|        let c = *data.get(i)?;
  707|   962k|        if matches!(c, b'e' | b'E') {
  708|   613k|            i += 1;
  709|       |
  710|   613k|            let c = *data.get(i)?;
  711|   612k|            if matches!(c, b'+' | b'-') {
  712|  1.90k|                i += 1;
  713|   610k|            }
  714|       |
  715|   612k|            let mut found = false;
  716|       |            loop {
  717|  3.15M|                let c = *data.get(i)?;
  718|  3.13M|                if c.is_ascii_digit() {
  719|  2.54M|                    i += 1;
  720|  2.54M|                    found = true;
  721|  2.54M|                } else {
  722|   592k|                    break;
  723|   592k|                }
  724|   592k|            }
  725|   592k|            Some((
  726|   592k|                i,
  727|   592k|                if !found {
  728|  1.96k|                    Err((0..i, "A double exponent cannot be empty").into())
  729|   590k|                } else if count_before == 0 && count_after.unwrap_or(0) == 0 {
  730|    102|                    Err((0..i, "A double should not be empty").into())
  731|       |                } else {
  732|   590k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Double)
  733|       |                },
  734|       |            ))
  735|   348k|        } else if let Some(count_after) = count_after {
  736|  71.3k|            if count_after == 0 {
  737|       |                // We do not consume the '.' after all
  738|  49.2k|                i -= 1;
  739|  49.2k|                Some((
  740|  49.2k|                    i,
  741|  49.2k|                    if count_before == 0 {
  742|  7.32k|                        Err((0..i, "An integer should not be empty").into())
  743|       |                    } else {
  744|  41.9k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  745|       |                    },
  746|       |                ))
  747|       |            } else {
  748|  22.0k|                Some((i, str_from_utf8(&data[..i], 0..i).map(N3Token::Decimal)))
  749|       |            }
  750|       |        } else {
  751|       |            Some((
  752|   277k|                i,
  753|   277k|                if count_before == 0 {
  754|  19.0k|                    Err((0..i, "An integer should not be empty").into())
  755|       |                } else {
  756|   258k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  757|       |                },
  758|       |            ))
  759|       |        }
  760|  1.02M|    }
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer18recognize_hex_char:
  797|  32.3k|    fn recognize_hex_char(
  798|  32.3k|        data: &[u8],
  799|  32.3k|        len: usize,
  800|  32.3k|        escape_char: char,
  801|  32.3k|        position: usize,
  802|  32.3k|    ) -> Result<Option<char>, TokenRecognizerError> {
  803|  32.3k|        if data.len() < len {
  804|  1.01k|            return Ok(None);
  805|  31.3k|        }
  806|  31.3k|        let val = str_from_utf8(&data[..len], position..position + len + 2)?;
  807|  31.0k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  808|       |            (
  809|       |                position..position + len + 2,
  810|       |                format!(
  811|       |                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  812|       |                ),
  813|       |            )
  814|  31.0k|        })?;
  815|  30.7k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  816|       |            (
  817|       |                position..position + len +2,
  818|       |                format!(
  819|       |                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  820|       |                ),
  821|       |            )
  822|  30.7k|        })?;
  823|  30.5k|        Ok(Some(c))
  824|  32.3k|    }
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer25is_possible_pn_chars_base:
  899|  7.73M|    fn is_possible_pn_chars_base(c: char) -> bool {
  900|  7.73M|        matches!(c,
  901|  3.35M|        'A'..='Z'
  902|  2.46M|        | 'a'..='z'
  903|  20.6k|        | '\u{00C0}'..='\u{00D6}'
  904|  20.6k|        | '\u{00D8}'..='\u{00F6}'
  905|  20.5k|        | '\u{00F8}'..='\u{02FF}'
  906|  18.1k|        | '\u{0370}'..='\u{037D}'
  907|  18.1k|        | '\u{037F}'..='\u{1FFF}'
  908|  3.23k|        | '\u{200C}'..='\u{200D}'
  909|  3.23k|        | '\u{2070}'..='\u{218F}'
  910|  3.22k|        | '\u{2C00}'..='\u{2FEF}'
  911|  3.21k|        | '\u{3001}'..='\u{D7FF}'
  912|  1.11k|        | '\u{F900}'..='\u{FDCF}'
  913|    854|        | '\u{FDF0}'..='\u{FFFD}'
  914|    851|        | '\u{10000}'..='\u{EFFFF}')
  915|  7.73M|    }
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer26recognize_blank_node_label:
  503|   186k|    fn recognize_blank_node_label(
  504|   186k|        data: &[u8],
  505|   186k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  506|   186k|        // [141s]  BLANK_NODE_LABEL  ::=  '_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
  507|   186k|        let mut i = 2;
  508|       |        loop {
  509|  4.29M|            match Self::recognize_unicode_char(&data[i..], i)? {
  510|  4.25M|                Ok((c, consumed)) => {
  511|  4.25M|                    if (i == 2 && (Self::is_possible_pn_chars_u(c) || c.is_ascii_digit()))
  512|  4.09M|                        || (i > 2 && Self::is_possible_pn_chars(c))
  513|  4.10M|                    {
  514|  4.10M|                        // Ok
  515|  4.10M|                    } else if i > 2 && c == '.' {
  516|  7.58k|                        if data[i - 1] == b'.' {
  517|    165|                            i -= 1;
  518|    165|                            return Some((
  519|    165|                                i,
  520|    165|                                str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  521|    165|                            ));
  522|  7.41k|                        }
  523|   140k|                    } else if i == 0 {
  524|      0|                        return Some((
  525|      0|                            i,
  526|      0|                            Err((0..i, "A blank node ID should not be empty").into()),
  527|      0|                        ));
  528|   140k|                    } else if data[i - 1] == b'.' {
  529|  1.28k|                        i -= 1;
  530|  1.28k|                        return Some((
  531|  1.28k|                            i,
  532|  1.28k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  533|  1.28k|                        ));
  534|       |                    } else {
  535|   138k|                        return Some((
  536|   138k|                            i,
  537|   138k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  538|   138k|                        ));
  539|       |                    }
  540|  4.11M|                    i += consumed;
  541|       |                }
  542|    577|                Err(e) => return Some((e.location.end, Err(e))),
  543|       |            }
  544|       |        }
  545|   186k|    }
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer16recognize_string:
  587|  58.7k|    fn recognize_string(
  588|  58.7k|        data: &[u8],
  589|  58.7k|        delimiter: u8,
  590|  58.7k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  591|  58.7k|        // [22]  STRING_LITERAL_QUOTE         ::=  '"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
  592|  58.7k|        // [23]  STRING_LITERAL_SINGLE_QUOTE  ::=  "'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
  593|  58.7k|        let mut string = String::new();
  594|  58.7k|        let mut i = 1;
  595|       |        loop {
  596|   102k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  597|  81.7k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  598|  80.4k|                Ok(s) => string.push_str(s),
  599|  1.30k|                Err(e) => return Some((end, Err(e))),
  600|       |            };
  601|  80.4k|            i += end;
  602|  80.4k|            match data[i] {
  603|  80.4k|                c if c == delimiter => {
  604|  16.8k|                    return Some((i + 1, Ok(N3Token::String(string))));
  605|       |                }
  606|       |                b'\\' => {
  607|  63.5k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  608|  57.3k|                    i += additional + 1;
  609|  57.3k|                    match c {
  610|  43.4k|                        Ok(c) => {
  611|  43.4k|                            string.push(c);
  612|  43.4k|                        }
  613|  13.9k|                        Err(e) => {
  614|       |                            // We read until the end of string char
  615|  13.9k|                            let end = memchr(delimiter, &data[i..])?;
  616|  1.61k|                            return Some((i + end + 1, Err(e)));
  617|       |                        }
  618|       |                    }
  619|       |                }
  620|      0|                _ => unreachable!(),
  621|       |            }
  622|       |        }
  623|  58.7k|    }
_RNvNtCsgLOhukngm62_5oxttl5lexer18resolve_local_name:
  936|  43.8k|pub fn resolve_local_name(
  937|  43.8k|    prefix: &str,
  938|  43.8k|    local: &str,
  939|  43.8k|    might_be_invalid_iri: bool,
  940|  43.8k|    prefixes: &HashMap<String, Iri<String>>,
  941|  43.8k|) -> Result<NamedNode, String> {
  942|  43.8k|    if let Some(start) = prefixes.get(prefix) {
  943|  32.0k|        let iri = format!("{start}{local}");
  944|  32.0k|        if might_be_invalid_iri || start.path().is_empty() {
  945|       |            // We validate again. We always validate if the local part might be the IRI authority.
  946|  29.3k|            if let Err(e) = Iri::parse(iri.as_str()) {
  947|  1.39k|                return Err(format!(
  948|  1.39k|                    "The prefixed name {prefix}:{local} builds IRI {iri} that is invalid: {e}"
  949|  1.39k|                ));
  950|  27.9k|            }
  951|  2.70k|        }
  952|  30.6k|        Ok(NamedNode::new_unchecked(iri))
  953|       |    } else {
  954|  11.8k|        Err(format!("The prefix {prefix}: has not been declared"))
  955|       |    }
  956|  43.8k|}
_RNvXs2_NtCsgLOhukngm62_5oxttl5lexerNtB5_7N3TokenNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB7_:
   12|  2.76M|#[derive(Debug, PartialEq, Eq)]
_RNvNtCsgLOhukngm62_5oxttl5lexer16string_from_utf8:
  968|  1.21M|fn string_from_utf8(data: Vec<u8>, range: Range<usize>) -> Result<String, TokenRecognizerError> {
  969|  1.21M|    String::from_utf8(data).map_err(|e| {
  970|       |        (
  971|       |            range.start + e.utf8_error().valid_up_to()
  972|       |                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  973|       |            format!("Invalid UTF-8: {e}"),
  974|       |        )
  975|       |            .into()
  976|  1.21M|    })
  977|  1.21M|}
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer21recognize_long_string:
  625|  26.3k|    fn recognize_long_string(
  626|  26.3k|        data: &[u8],
  627|  26.3k|        delimiter: u8,
  628|  26.3k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  629|  26.3k|        // [24]  STRING_LITERAL_LONG_SINGLE_QUOTE  ::=  "'''" (("'" | "''")? ([^'\] | ECHAR | UCHAR))* "'''"
  630|  26.3k|        // [25]  STRING_LITERAL_LONG_QUOTE         ::=  '"""' (('"' | '""')? ([^"\] | ECHAR | UCHAR))* '"""'
  631|  26.3k|        let mut string = String::new();
  632|  26.3k|        let mut i = 3;
  633|       |        loop {
  634|  47.8k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  635|  32.4k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  636|  31.3k|                Ok(s) => string.push_str(s),
  637|  1.08k|                Err(e) => return Some((end, Err(e))),
  638|       |            };
  639|  31.3k|            i += end;
  640|  31.3k|            match data[i] {
  641|  31.3k|                c if c == delimiter => {
  642|  27.9k|                    if *data.get(i + 1)? == delimiter && *data.get(i + 2)? == delimiter {
  643|  8.22k|                        return Some((i + 3, Ok(N3Token::String(string))));
  644|  18.6k|                    }
  645|  18.6k|                    i += 1;
  646|  18.6k|                    string.push(char::from(delimiter));
  647|       |                }
  648|       |                b'\\' => {
  649|  3.42k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  650|  3.06k|                    i += additional + 1;
  651|  3.06k|                    match c {
  652|  2.93k|                        Ok(c) => {
  653|  2.93k|                            string.push(c);
  654|  2.93k|                        }
  655|    139|                        Err(e) => return Some((i, Err(e))),
  656|       |                    }
  657|       |                }
  658|      0|                _ => unreachable!(),
  659|       |            }
  660|       |        }
  661|  26.3k|    }
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer22recognize_unicode_char:
  826|  8.30M|    fn recognize_unicode_char(
  827|  8.30M|        data: &[u8],
  828|  8.30M|        position: usize,
  829|  8.30M|    ) -> Option<Result<(char, usize), TokenRecognizerError>> {
  830|  8.30M|        let mut code_point: u32;
  831|  8.30M|        let bytes_needed: usize;
  832|  8.30M|        let mut lower_boundary = 0x80;
  833|  8.30M|        let mut upper_boundary = 0xBF;
  834|       |
  835|  8.30M|        let byte = *data.first()?;
  836|  8.09M|        match byte {
  837|  8.09M|            0x00..=0x7F => return Some(Ok((char::from(byte), 1))),
  838|   211k|            0xC2..=0xDF => {
  839|   113k|                bytes_needed = 1;
  840|   113k|                code_point = u32::from(byte) & 0x1F;
  841|   113k|            }
  842|  98.7k|            0xE0..=0xEF => {
  843|  29.0k|                if byte == 0xE0 {
  844|  5.10k|                    lower_boundary = 0xA0;
  845|  23.9k|                }
  846|  29.0k|                if byte == 0xED {
  847|  2.30k|                    upper_boundary = 0x9F;
  848|  26.7k|                }
  849|  29.0k|                bytes_needed = 2;
  850|  29.0k|                code_point = u32::from(byte) & 0xF;
  851|       |            }
  852|  69.7k|            0xF0..=0xF4 => {
  853|  11.2k|                if byte == 0xF0 {
  854|  1.18k|                    lower_boundary = 0x90;
  855|  10.1k|                }
  856|  11.2k|                if byte == 0xF4 {
  857|  2.36k|                    upper_boundary = 0x8F;
  858|  8.92k|                }
  859|  11.2k|                bytes_needed = 3;
  860|  11.2k|                code_point = u32::from(byte) & 0x7;
  861|       |            }
  862|       |            _ => {
  863|   214k|                return Some(Err((
  864|   214k|                    position..=position,
  865|   214k|                    "Invalid UTF-8 character encoding",
  866|   214k|                )
  867|   214k|                    .into()))
  868|       |            }
  869|       |        }
  870|       |
  871|   161k|        for i in 1..=bytes_needed {
  872|   161k|            let byte = *data.get(i)?;
  873|   121k|            if byte < lower_boundary || upper_boundary < byte {
  874|  91.2k|                return Some(Err((
  875|  91.2k|                    position..=position + i,
  876|  91.2k|                    "Invalid UTF-8 character encoding",
  877|  91.2k|                )
  878|  91.2k|                    .into()));
  879|  29.7k|            }
  880|  29.7k|            lower_boundary = 0x80;
  881|  29.7k|            upper_boundary = 0xBF;
  882|  29.7k|            code_point = (code_point << 6) | (u32::from(byte) & 0x3F);
  883|       |        }
  884|       |
  885|  21.3k|        Some(
  886|  21.3k|            char::from_u32(code_point)
  887|  21.3k|                .map(|c| (c, bytes_needed + 1))
  888|  21.3k|                .ok_or_else(|| {
  889|       |                    (
  890|       |                        position..=position + bytes_needed,
  891|       |                        format!("The codepoint {code_point:X} is not a valid unicode character"),
  892|       |                    )
  893|       |                        .into()
  894|  21.3k|                }),
  895|  21.3k|        )
  896|  8.30M|    }
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer43is_possible_pn_chars_base_but_not_valid_iri:
  929|   363k|    fn is_possible_pn_chars_base_but_not_valid_iri(c: char) -> bool {
  930|   363k|        matches!(c, '\u{FFF0}'..='\u{FFFD}')
  931|   363k|            || u32::from(c) % u32::from('\u{FFFE}') == 0
  932|   363k|            || u32::from(c) % u32::from('\u{FFFF}') == 0
  933|   363k|    }
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer14parse_lang_tag:
  572|  28.2k|    fn parse_lang_tag<'a>(
  573|  28.2k|        &self,
  574|  28.2k|        lang_tag: &'a [u8],
  575|  28.2k|        position: Range<usize>,
  576|  28.2k|    ) -> Result<N3Token<'a>, TokenRecognizerError> {
  577|  28.2k|        let lang_tag = str_from_utf8(lang_tag, position.clone())?;
  578|  28.2k|        Ok(N3Token::LangTag(if self.unchecked {
  579|  8.97k|            lang_tag
  580|       |        } else {
  581|  19.2k|            LanguageTag::parse(lang_tag)
  582|  19.2k|                .map_err(|e| (position.clone(), e.to_string()))?
  583|  15.9k|                .into_inner()
  584|       |        }))
  585|  28.2k|    }
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer13recognize_iri:
  177|  1.37M|    fn recognize_iri(
  178|  1.37M|        &self,
  179|  1.37M|        data: &[u8],
  180|  1.37M|        options: &N3LexerOptions,
  181|  1.37M|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  182|  1.37M|        // [18] IRIREF  ::=  '<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
  183|  1.37M|        let mut string = Vec::new();
  184|  1.37M|        let mut i = 1;
  185|       |        loop {
  186|  1.38M|            let end = memchr2(b'>', b'\\', &data[i..])?;
  187|  1.22M|            string.extend_from_slice(&data[i..i + end]);
  188|  1.22M|            i += end;
  189|  1.22M|            match data[i] {
  190|       |                b'>' => {
  191|       |                    #[allow(clippy::range_plus_one)]
  192|  1.21M|                    return Some((i + 1, self.parse_iri(string, 0..i + 1, options)));
  193|       |                }
  194|       |                b'\\' => {
  195|  9.75k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, false)?;
  196|  5.02k|                    i += additional + 1;
  197|  5.02k|                    match c {
  198|  2.04k|                        Ok(c) => {
  199|  2.04k|                            let mut buf = [0; 4];
  200|  2.04k|                            string.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  201|  2.04k|                        }
  202|  2.97k|                        Err(e) => return Some((i, Err(e))),
  203|       |                    }
  204|       |                }
  205|      0|                _ => unreachable!(),
  206|       |            }
  207|       |        }
  208|  1.37M|    }
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer16recognize_escape:
  762|  76.7k|    fn recognize_escape(
  763|  76.7k|        data: &[u8],
  764|  76.7k|        position: usize,
  765|  76.7k|        with_echar: bool,
  766|  76.7k|    ) -> Option<(usize, Result<char, TokenRecognizerError>)> {
  767|  76.7k|        // [26]   UCHAR  ::=  '\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
  768|  76.7k|        // [159s] ECHAR  ::=  '\' [tbnrf"'\]
  769|  76.7k|        match *data.get(1)? {
  770|  29.6k|            b'u' => match Self::recognize_hex_char(&data[2..], 4, 'u', position) {
  771|  29.3k|                Ok(c) => Some((5, Ok(c?))),
  772|    280|                Err(e) => Some((5, Err(e))),
  773|       |            },
  774|  2.68k|            b'U' => match Self::recognize_hex_char(&data[2..], 8, 'u', position) {
  775|  2.21k|                Ok(c) => Some((9, Ok(c?))),
  776|    470|                Err(e) => Some((9, Err(e))),
  777|       |            },
  778|    458|            b't' if with_echar => Some((1, Ok('\t'))),
  779|    371|            b'b' if with_echar => Some((1, Ok('\x08'))),
  780|    506|            b'n' if with_echar => Some((1, Ok('\n'))),
  781|    281|            b'r' if with_echar => Some((1, Ok('\r'))),
  782|    286|            b'f' if with_echar => Some((1, Ok('\x0C'))),
  783|    940|            b'"' if with_echar => Some((1, Ok('"'))),
  784|    918|            b'\'' if with_echar => Some((1, Ok('\''))),
  785|  14.1k|            b'\\' if with_echar => Some((1, Ok('\\'))),
  786|  16.2k|            c => Some((
  787|  16.2k|                1,
  788|  16.2k|                Err((
  789|  16.2k|                    position..position + 2,
  790|  16.2k|                    format!("Unexpected escape character '\\{}'", char::from(c)),
  791|  16.2k|                )
  792|  16.2k|                    .into()),
  793|  16.2k|            )), // TODO: read until end of string
  794|       |        }
  795|  76.7k|    }
_RNvNtCsgLOhukngm62_5oxttl5lexer13str_from_utf8:
  958|  1.58M|fn str_from_utf8(data: &[u8], range: Range<usize>) -> Result<&str, TokenRecognizerError> {
  959|  1.58M|    str::from_utf8(data).map_err(|e| {
  960|       |        (
  961|       |            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  962|       |            format!("Invalid UTF-8: {e}"),
  963|       |        )
  964|       |            .into()
  965|  1.58M|    })
  966|  1.58M|}
_RNvXNtCsgLOhukngm62_5oxttl5lexerNtB2_7N3LexerNtNtNtB4_7toolkit5lexer15TokenRecognizer20recognize_next_token:
   55|  7.41M|    fn recognize_next_token<'a>(
   56|  7.41M|        &mut self,
   57|  7.41M|        data: &'a [u8],
   58|  7.41M|        is_ending: bool,
   59|  7.41M|        options: &N3LexerOptions,
   60|  7.41M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
   61|  7.41M|        match *data.first()? {
   62|  2.06M|            b'<' => match *data.get(1)? {
   63|   667k|                b'<' => Some((2, Ok(N3Token::Punctuation("<<")))),
   64|  6.33k|                b'=' if self.mode == N3LexerMode::N3 => {
   65|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   66|      0|                        Some(if let Ok(result) = result {
   67|      0|                            (consumed, Ok(result))
   68|       |                        } else {
   69|      0|                            (2, Ok(N3Token::Punctuation("<=")))
   70|       |                        })
   71|      0|                    } else if is_ending {
   72|      0|                        Some((2, Ok(N3Token::Punctuation("<="))))
   73|       |                    } else {
   74|      0|                        None
   75|       |                    }
   76|       |                }
   77|  2.78k|                b'-' if self.mode == N3LexerMode::N3 => {
   78|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   79|      0|                        Some(if let Ok(result) = result {
   80|      0|                            (consumed, Ok(result))
   81|       |                        } else {
   82|      0|                            (2, Ok(N3Token::Punctuation("<-")))
   83|       |                        })
   84|      0|                    } else if is_ending {
   85|      0|                        Some((2, Ok(N3Token::Punctuation("<-"))))
   86|       |                    } else {
   87|      0|                        None
   88|       |                    }
   89|       |                }
   90|  1.37M|                _ => self.recognize_iri(data, options),
   91|       |            },
   92|       |            b'>' => {
   93|   703k|                if *data.get(1)? == b'>' {
   94|   651k|                    Some((2, Ok(N3Token::Punctuation(">>"))))
   95|       |                } else {
   96|  46.2k|                    Some((1, Ok(N3Token::Punctuation(">"))))
   97|       |                }
   98|       |            }
   99|   222k|            b'_' => match data.get(1)? {
  100|   186k|                b':' => Self::recognize_blank_node_label(data),
  101|  3.44k|                c => Some((
  102|  3.44k|                    1,
  103|  3.44k|                    Err((0, format!("Unexpected character '{}'", char::from(*c))).into()),
  104|  3.44k|                )),
  105|       |            },
  106|       |            b'"' => {
  107|  32.9k|                if self.mode != N3LexerMode::NTriples
  108|  32.9k|                    && *data.get(1)? == b'"'
  109|  23.0k|                    && *data.get(2)? == b'"'
  110|       |                {
  111|  13.9k|                    Self::recognize_long_string(data, b'"')
  112|       |                } else {
  113|  13.4k|                    Self::recognize_string(data, b'"')
  114|       |                }
  115|       |            }
  116|  63.8k|            b'\'' if self.mode != N3LexerMode::NTriples => {
  117|  63.8k|                if *data.get(1)? == b'\'' && *data.get(2)? == b'\'' {
  118|  12.4k|                    Self::recognize_long_string(data, b'\'')
  119|       |                } else {
  120|  45.3k|                    Self::recognize_string(data, b'\'')
  121|       |                }
  122|       |            }
  123|  67.3k|            b'@' => self.recognize_lang_tag(data),
  124|   545k|            b'.' => match data.get(1) {
  125|   155k|                Some(b'0'..=b'9') => Self::recognize_number(data),
  126|   381k|                Some(_) => Some((1, Ok(N3Token::Punctuation(".")))),
  127|   144k|                None => is_ending.then_some((1, Ok(N3Token::Punctuation(".")))),
  128|       |            },
  129|       |            b'^' => {
  130|  11.3k|                if *data.get(1)? == b'^' {
  131|  2.23k|                    Some((2, Ok(N3Token::Punctuation("^^"))))
  132|       |                } else {
  133|  8.44k|                    Some((1, Ok(N3Token::Punctuation("^"))))
  134|       |                }
  135|       |            }
  136|   290k|            b'(' => Some((1, Ok(N3Token::Punctuation("(")))),
  137|  25.9k|            b')' => Some((1, Ok(N3Token::Punctuation(")")))),
  138|  19.5k|            b'[' => Some((1, Ok(N3Token::Punctuation("[")))),
  139|  8.85k|            b']' => Some((1, Ok(N3Token::Punctuation("]")))),
  140|       |            b'{' => {
  141|   185k|                if *data.get(1)? == b'|' {
  142|   103k|                    Some((2, Ok(N3Token::Punctuation("{|"))))
  143|       |                } else {
  144|  48.9k|                    Some((1, Ok(N3Token::Punctuation("{"))))
  145|       |                }
  146|       |            }
  147|  5.62k|            b'}' => Some((1, Ok(N3Token::Punctuation("}")))),
  148|  59.3k|            b',' => Some((1, Ok(N3Token::Punctuation(",")))),
  149|  17.6k|            b';' => Some((1, Ok(N3Token::Punctuation(";")))),
  150|  9.74k|            b'!' => Some((1, Ok(N3Token::Punctuation("!")))),
  151|       |            b'|' => {
  152|  4.57k|                if *data.get(1)? == b'}' {
  153|    537|                    Some((2, Ok(N3Token::Punctuation("|}"))))
  154|       |                } else {
  155|  2.58k|                    Some((1, Ok(N3Token::Punctuation("|"))))
  156|       |                }
  157|       |            }
  158|       |            b'=' => {
  159|  20.1k|                if *data.get(1)? == b'>' {
  160|  1.38k|                    Some((2, Ok(N3Token::Punctuation("=>"))))
  161|       |                } else {
  162|  17.6k|                    Some((1, Ok(N3Token::Punctuation("="))))
  163|       |                }
  164|       |            }
  165|  1.70M|            b'0'..=b'9' | b'+' | b'-' => Self::recognize_number(data),
  166|  43.9k|            b'?' => self.recognize_variable(data, is_ending),
  167|  1.52M|            _ => self.recognize_pname_or_keyword(data, is_ending),
  168|       |        }
  169|  7.41M|    }
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer9parse_iri:
  210|  1.21M|    fn parse_iri(
  211|  1.21M|        &self,
  212|  1.21M|        iri: Vec<u8>,
  213|  1.21M|        position: Range<usize>,
  214|  1.21M|        options: &N3LexerOptions,
  215|  1.21M|    ) -> Result<N3Token<'static>, TokenRecognizerError> {
  216|  1.21M|        let iri = string_from_utf8(iri, position.clone())?;
  217|       |        Ok(N3Token::IriRef(
  218|  1.20M|            if let Some(base_iri) = options.base_iri.as_ref() {
  219|   346k|                if self.unchecked {
  220|   114k|                    base_iri.resolve_unchecked(&iri)
  221|       |                } else {
  222|   231k|                    base_iri
  223|   231k|                        .resolve(&iri)
  224|   231k|                        .map_err(|e| (position, e.to_string()))?
  225|       |                }
  226|   322k|                .into_inner()
  227|   861k|            } else if self.unchecked {
  228|      0|                iri
  229|       |            } else {
  230|   861k|                Iri::parse(iri)
  231|   861k|                    .map_err(|e| (position, e.to_string()))?
  232|   861k|                    .into_inner()
  233|       |            },
  234|       |        ))
  235|  1.21M|    }
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer18recognize_variable:
  328|  43.9k|    fn recognize_variable<'a>(
  329|  43.9k|        &self,
  330|  43.9k|        data: &'a [u8],
  331|  43.9k|        is_ending: bool,
  332|  43.9k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  333|       |        // [36]  QUICK_VAR_NAME  ::=  "?" PN_LOCAL
  334|  43.9k|        let (consumed, result) = self.recognize_optional_pn_local(&data[1..], is_ending)?;
  335|  26.5k|        Some((
  336|  26.5k|            consumed + 1,
  337|  26.5k|            result.and_then(|(name, _)| {
  338|       |                if name.is_empty() {
  339|       |                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|       |                    Ok(N3Token::Variable(name))
  342|       |                }
  343|  26.5k|            }),
  344|  26.5k|        ))
  345|  43.9k|    }
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer18recognize_lang_tag:
  547|  67.3k|    fn recognize_lang_tag<'a>(
  548|  67.3k|        &self,
  549|  67.3k|        data: &'a [u8],
  550|  67.3k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  551|  67.3k|        // [144s]  LANGTAG  ::=  '@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
  552|  67.3k|        let mut is_last_block_empty = true;
  553|   430k|        for (i, c) in data[1..].iter().enumerate() {
  554|   430k|            if c.is_ascii_alphabetic() {
  555|   344k|                is_last_block_empty = false;
  556|   344k|            } else if i == 0 {
  557|  8.04k|                return Some((
  558|  8.04k|                    1,
  559|  8.04k|                    Err((1..2, "A language code should always start with a letter").into()),
  560|  8.04k|                ));
  561|  78.1k|            } else if is_last_block_empty {
  562|  1.81k|                return Some((i, self.parse_lang_tag(&data[1..i], 1..i - 1)));
  563|  76.2k|            } else if *c == b'-' {
  564|  49.8k|                is_last_block_empty = true;
  565|  49.8k|            } else {
  566|  26.4k|                return Some((i + 1, self.parse_lang_tag(&data[1..=i], 1..i)));
  567|       |            }
  568|       |        }
  569|  31.0k|        None
  570|  67.3k|    }
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer22is_possible_pn_chars_u:
  918|  6.60M|    pub(super) fn is_possible_pn_chars_u(c: char) -> bool {
  919|  6.60M|        Self::is_possible_pn_chars_base(c) || c == '_'
  920|  6.60M|    }
_RNvXs8_NtCsgLOhukngm62_5oxttl5lexerNtB5_11N3LexerModeNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB7_:
   31|   105k|#[derive(Eq, PartialEq)]
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer20is_possible_pn_chars:
  923|  6.30M|    pub(crate) fn is_possible_pn_chars(c: char) -> bool {
  924|  6.30M|        Self::is_possible_pn_chars_u(c)
  925|  3.50M|            || matches!(c,
  926|  2.82M|        '-' | '0'..='9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
  927|  6.30M|    }

_RNvXs_NtCsgLOhukngm62_5oxttl5terseNtB4_14TriGRecognizerNtNtNtB6_7toolkit6parser14RuleRecognizer14recognize_next:
   51|  6.29M|    fn recognize_next(
   52|  6.29M|        mut self,
   53|  6.29M|        token: N3Token<'_>,
   54|  6.29M|        context: &mut TriGRecognizerContext,
   55|  6.29M|        results: &mut Vec<Quad>,
   56|  6.29M|        errors: &mut Vec<RuleRecognizerError>,
   57|  6.29M|    ) -> Self {
   58|  6.29M|        if let Some(rule) = self.stack.pop() {
   59|  5.33M|            match rule {
   60|       |                // [1g] trigDoc      ::=  (directive | block)*
   61|       |                // [2g] block        ::=  triplesOrGraph | wrappedGraph | triples2 | "GRAPH" labelOrSubject wrappedGraph
   62|       |                // [3]  directive    ::=  prefixID | base | sparqlPrefix | sparqlBase
   63|       |                // [4]  prefixID     ::=  '@prefix' PNAME_NS IRIREF '.'
   64|       |                // [5]  base         ::=  '@base' IRIREF '.'
   65|       |                // [5s] sparqlPrefix ::=  "PREFIX" PNAME_NS IRIREF
   66|       |                // [6s] sparqlBase   ::=  "BASE" IRIREF
   67|       |                TriGState::TriGDoc => {
   68|   316k|                    self.cur_graph = GraphName::DefaultGraph;
   69|   316k|                    self.stack.push(TriGState::TriGDoc);
   70|  16.3k|                    match token {
   71|  16.1k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("base") => {
   72|  4.53k|                            self.stack.push(TriGState::BaseExpectIri);
   73|  4.53k|                            self
   74|       |                        }
   75|  11.6k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("prefix") => {
   76|    128|                            self.stack.push(TriGState::PrefixExpectPrefix);
   77|    128|                            self
   78|       |                        }
   79|  7.92k|                        N3Token::LangTag("prefix") => {
   80|  6.95k|                            self.stack.push(TriGState::ExpectDot);
   81|  6.95k|                            self.stack.push(TriGState::PrefixExpectPrefix);
   82|  6.95k|                            self
   83|       |                        }
   84|    968|                        N3Token::LangTag("base") => {
   85|    129|                            self.stack.push(TriGState::ExpectDot);
   86|    129|                            self.stack.push(TriGState::BaseExpectIri);
   87|    129|                            self
   88|       |                        }
   89|      0|                        N3Token::PlainKeyword(k)
   90|  11.5k|                            if k.eq_ignore_ascii_case("graph") && context.with_graph_name =>
   91|      0|                        {
   92|      0|                            self.stack.push(TriGState::WrappedGraph);
   93|      0|                            self.stack.push(TriGState::GraphName);
   94|      0|                            self
   95|       |                        }
   96|   144k|                        N3Token::Punctuation("{") if context.with_graph_name => {
   97|  4.78k|                            self.stack.push(TriGState::WrappedGraph);
   98|  4.78k|                            self.recognize_next(token, context, results, errors)
   99|       |                        }
  100|       |                        _ => {
  101|   300k|                            self.stack.push(TriGState::TriplesOrGraph);
  102|   300k|                            self.recognize_next(token, context, results, errors)
  103|       |                        }
  104|       |                    }
  105|       |                }
  106|       |                TriGState::ExpectDot => {
  107|   114k|                    self.cur_subject.pop();
  108|   114k|                    if token == N3Token::Punctuation(".") {
  109|  93.6k|                        self
  110|       |                    } else {
  111|  20.8k|                        errors.push("A dot is expected at the end of statements".into());
  112|  20.8k|                        self.recognize_next(token, context, results, errors)
  113|       |                    }
  114|       |                }
  115|       |                TriGState::BaseExpectIri => {
  116|  4.01k|                    if let N3Token::IriRef(iri) = token {
  117|  3.85k|                        context.lexer_options.base_iri = Some(Iri::parse_unchecked(iri));
  118|  3.85k|                        self
  119|       |                    } else {
  120|    157|                        self.error(errors, "The BASE keyword should be followed by an IRI")
  121|       |                    }
  122|       |                }
  123|  6.56k|                TriGState::PrefixExpectPrefix => match token {
  124|  6.56k|                    N3Token::PrefixedName { prefix, local, .. } if local.is_empty() => {
  125|  6.45k|                        self.stack.push(TriGState::PrefixExpectIri {
  126|  6.45k|                            name: prefix.to_owned(),
  127|  6.45k|                        });
  128|  6.45k|                        self
  129|       |                    }
  130|    489|                    _ => self.error(
  131|    489|                        errors,
  132|    489|                        "The PREFIX keyword should be followed by a prefix like 'ex:'",
  133|    489|                    ),
  134|       |                },
  135|  5.23k|                TriGState::PrefixExpectIri { name } => {
  136|  5.23k|                    if let N3Token::IriRef(iri) = token {
  137|  5.06k|                        context.prefixes.insert(name, Iri::parse_unchecked(iri));
  138|  5.06k|                        self
  139|       |                    } else {
  140|    166|                        self.error(errors, "The PREFIX declaration should be followed by a prefix and its value as an IRI")
  141|       |                    }
  142|       |                }
  143|       |                // [3g]  triplesOrGraph  ::=  labelOrSubject ( wrappedGraph | predicateObjectList '.' ) | quotedTriple predicateObjectList '.'
  144|       |                // [4g]  triples2        ::=  blankNodePropertyList predicateObjectList? '.' | collection predicateObjectList '.'
  145|  29.1k|                TriGState::TriplesOrGraph => match token {
  146|  66.4k|                    N3Token::IriRef(iri) => {
  147|  66.4k|                        self.stack
  148|  66.4k|                            .push(TriGState::WrappedGraphOrPredicateObjectList {
  149|  66.4k|                                term: NamedNode::new_unchecked(iri).into(),
  150|  66.4k|                            });
  151|  66.4k|                        self
  152|       |                    }
  153|       |                    N3Token::PrefixedName {
  154|  12.3k|                        prefix,
  155|  12.3k|                        local,
  156|  12.3k|                        might_be_invalid_iri,
  157|  12.3k|                    } => match resolve_local_name(
  158|  12.3k|                        prefix,
  159|  12.3k|                        &local,
  160|  12.3k|                        might_be_invalid_iri,
  161|  12.3k|                        &context.prefixes,
  162|  12.3k|                    ) {
  163|  1.76k|                        Ok(t) => {
  164|  1.76k|                            self.stack
  165|  1.76k|                                .push(TriGState::WrappedGraphOrPredicateObjectList {
  166|  1.76k|                                    term: t.into(),
  167|  1.76k|                                });
  168|  1.76k|                            self
  169|       |                        }
  170|  10.5k|                        Err(e) => self.error(errors, e),
  171|       |                    },
  172|  60.2k|                    N3Token::BlankNodeLabel(label) => {
  173|  60.2k|                        self.stack
  174|  60.2k|                            .push(TriGState::WrappedGraphOrPredicateObjectList {
  175|  60.2k|                                term: BlankNode::new_unchecked(label).into(),
  176|  60.2k|                            });
  177|  60.2k|                        self
  178|       |                    }
  179|   139k|                    N3Token::Punctuation("[") => {
  180|  5.80k|                        self.stack
  181|  5.80k|                            .push(TriGState::WrappedGraphBlankNodePropertyListCurrent);
  182|  5.80k|                        self
  183|       |                    }
  184|   133k|                    N3Token::Punctuation("(") => {
  185|  23.9k|                        self.stack.push(TriGState::ExpectDot);
  186|  23.9k|                        self.stack.push(TriGState::PredicateObjectList);
  187|  23.9k|                        self.stack.push(TriGState::SubjectCollectionBeginning);
  188|  23.9k|                        self
  189|       |                    }
  190|       |                    #[cfg(feature = "rdf-star")]
  191|   110k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  192|  29.1k|                        self.stack.push(TriGState::ExpectDot);
  193|  29.1k|                        self.stack.push(TriGState::PredicateObjectList);
  194|  29.1k|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  195|  29.1k|                        self.stack.push(TriGState::QuotedObject);
  196|  29.1k|                        self.stack.push(TriGState::Verb);
  197|  29.1k|                        self.stack.push(TriGState::QuotedSubject);
  198|  29.1k|                        self
  199|       |                    }
  200|   102k|                    _ => self.error(errors, "TOKEN is not a valid subject or graph name"),
  201|       |                },
  202|   119k|                TriGState::WrappedGraphOrPredicateObjectList { term } => {
  203|   119k|                    if token == N3Token::Punctuation("{") && context.with_graph_name {
  204|  13.1k|                        self.cur_graph = term.into();
  205|  13.1k|                        self.stack.push(TriGState::WrappedGraph);
  206|   106k|                    } else {
  207|   106k|                        self.cur_subject.push(term.into());
  208|   106k|                        self.stack.push(TriGState::ExpectDot);
  209|   106k|                        self.stack.push(TriGState::PredicateObjectList);
  210|   106k|                    }
  211|   119k|                    self.recognize_next(token, context, results, errors)
  212|       |                }
  213|       |                TriGState::WrappedGraphBlankNodePropertyListCurrent => {
  214|  5.44k|                    if token == N3Token::Punctuation("]") {
  215|    964|                        self.stack
  216|    964|                            .push(TriGState::WrappedGraphOrPredicateObjectList {
  217|    964|                                term: BlankNode::default().into(),
  218|    964|                            });
  219|    964|                        self
  220|       |                    } else {
  221|  4.48k|                        self.cur_subject.push(BlankNode::default().into());
  222|  4.48k|                        self.stack.push(TriGState::ExpectDot);
  223|  4.48k|                        self.stack.push(TriGState::SubjectBlankNodePropertyListEnd);
  224|  4.48k|                        self.stack.push(TriGState::PredicateObjectList);
  225|  4.48k|                        self.recognize_next(token, context, results, errors)
  226|       |                    }
  227|       |                }
  228|       |                TriGState::SubjectBlankNodePropertyListEnd => {
  229|  1.99k|                    if token == N3Token::Punctuation("]") {
  230|    788|                        self.stack
  231|    788|                            .push(TriGState::SubjectBlankNodePropertyListAfter);
  232|    788|                        self
  233|       |                    } else {
  234|  1.20k|                        errors.push("blank node property lists should end with a ']'".into());
  235|  1.20k|                        self.stack
  236|  1.20k|                            .push(TriGState::SubjectBlankNodePropertyListAfter);
  237|  1.20k|                        self.recognize_next(token, context, results, errors)
  238|       |                    }
  239|       |                }
  240|       |                TriGState::SubjectBlankNodePropertyListAfter => {
  241|  1.98k|                    if matches!(token, N3Token::Punctuation("." | "}")) {
  242|  1.17k|                        self.recognize_next(token, context, results, errors)
  243|       |                    } else {
  244|    810|                        self.stack.push(TriGState::PredicateObjectList);
  245|    810|                        self.recognize_next(token, context, results, errors)
  246|       |                    }
  247|       |                }
  248|       |                TriGState::SubjectCollectionBeginning => {
  249|  26.1k|                    if let N3Token::Punctuation(")") = token {
  250|    186|                        self.cur_subject.push(rdf::NIL.into());
  251|    186|                        self
  252|       |                    } else {
  253|  26.0k|                        let root = BlankNode::default();
  254|  26.0k|                        self.cur_subject.push(root.clone().into());
  255|  26.0k|                        self.cur_subject.push(root.into());
  256|  26.0k|                        self.cur_predicate.push(rdf::FIRST.into());
  257|  26.0k|                        self.stack.push(TriGState::SubjectCollectionPossibleEnd);
  258|  26.0k|                        self.stack.push(TriGState::Object);
  259|  26.0k|                        self.recognize_next(token, context, results, errors)
  260|       |                    }
  261|       |                }
  262|       |                TriGState::SubjectCollectionPossibleEnd => {
  263|  10.1k|                    let old = self.cur_subject.pop().unwrap();
  264|  10.1k|                    self.cur_object.pop();
  265|  10.1k|                    if let N3Token::Punctuation(")") = token {
  266|    483|                        self.cur_predicate.pop();
  267|    483|                        results.push(Quad::new(old, rdf::REST, rdf::NIL, self.cur_graph.clone()));
  268|    483|                        self
  269|       |                    } else {
  270|  9.63k|                        let new = BlankNode::default();
  271|  9.63k|                        results.push(Quad::new(
  272|  9.63k|                            old,
  273|  9.63k|                            rdf::REST,
  274|  9.63k|                            new.clone(),
  275|  9.63k|                            self.cur_graph.clone(),
  276|  9.63k|                        ));
  277|  9.63k|                        self.cur_subject.push(new.into());
  278|  9.63k|                        self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  279|  9.63k|                        self.stack.push(TriGState::Object);
  280|  9.63k|                        self.recognize_next(token, context, results, errors)
  281|       |                    }
  282|       |                }
  283|       |                // [5g]  wrappedGraph  ::=  '{' triplesBlock? '}'
  284|       |                // [6g]  triplesBlock  ::=  triples ('.' triplesBlock?)?
  285|       |                TriGState::WrappedGraph => {
  286|  17.8k|                    if token == N3Token::Punctuation("{") {
  287|  17.8k|                        self.stack.push(TriGState::WrappedGraphPossibleEnd);
  288|  17.8k|                        self.stack.push(TriGState::Triples);
  289|  17.8k|                        self
  290|       |                    } else {
  291|      0|                        self.error(errors, "The GRAPH keyword should be followed by a graph name and a value in '{'")
  292|       |                    }
  293|       |                }
  294|       |                TriGState::WrappedGraphPossibleEnd => {
  295|  20.3k|                    self.cur_subject.pop();
  296|  20.3k|                    match token {
  297|  17.4k|                        N3Token::Punctuation("}") => self,
  298|  15.0k|                        N3Token::Punctuation(".") => {
  299|  14.3k|                            self.stack.push(TriGState::WrappedGraphPossibleEnd);
  300|  14.3k|                            self.stack.push(TriGState::Triples);
  301|  14.3k|                            self
  302|       |                        }
  303|       |                        _ => {
  304|  3.50k|                            errors.push(
  305|  3.50k|                                "A '}' or a '.' is expected at the end of a graph block".into(),
  306|  3.50k|                            );
  307|  3.50k|                            self.recognize_next(token, context, results, errors)
  308|       |                        }
  309|       |                    }
  310|       |                }
  311|       |                // [6]  triples   ::=  subject predicateObjectList | blankNodePropertyList predicateObjectList?
  312|       |                // [10]  subject  ::=  iri | BlankNode | collection | quotedTriple
  313|  3.09k|                TriGState::Triples => match token {
  314|  13.4k|                    N3Token::Punctuation("}") => {
  315|  2.43k|                        self.recognize_next(token, context, results, errors) // Early end
  316|       |                    }
  317|  10.9k|                    N3Token::Punctuation("[") => {
  318|    320|                        self.cur_subject.push(BlankNode::default().into());
  319|    320|                        self.stack
  320|    320|                            .push(TriGState::TriplesBlankNodePropertyListCurrent);
  321|    320|                        self
  322|       |                    }
  323|  5.74k|                    N3Token::IriRef(iri) => {
  324|  5.74k|                        self.cur_subject.push(NamedNode::new_unchecked(iri).into());
  325|  5.74k|                        self.stack.push(TriGState::PredicateObjectList);
  326|  5.74k|                        self
  327|       |                    }
  328|       |                    N3Token::PrefixedName {
  329|    631|                        prefix,
  330|    631|                        local,
  331|    631|                        might_be_invalid_iri,
  332|    631|                    } => match resolve_local_name(
  333|    631|                        prefix,
  334|    631|                        &local,
  335|    631|                        might_be_invalid_iri,
  336|    631|                        &context.prefixes,
  337|    631|                    ) {
  338|    233|                        Ok(t) => {
  339|    233|                            self.cur_subject.push(t.into());
  340|    233|                            self.stack.push(TriGState::PredicateObjectList);
  341|    233|                            self
  342|       |                        }
  343|    398|                        Err(e) => self.error(errors, e),
  344|       |                    },
  345|  11.0k|                    N3Token::BlankNodeLabel(label) => {
  346|  11.0k|                        self.cur_subject
  347|  11.0k|                            .push(BlankNode::new_unchecked(label).into());
  348|  11.0k|                        self.stack.push(TriGState::PredicateObjectList);
  349|  11.0k|                        self
  350|       |                    }
  351|  10.6k|                    N3Token::Punctuation("(") => {
  352|  6.46k|                        self.stack.push(TriGState::PredicateObjectList);
  353|  6.46k|                        self.stack.push(TriGState::SubjectCollectionBeginning);
  354|  6.46k|                        self
  355|       |                    }
  356|       |                    #[cfg(feature = "rdf-star")]
  357|  4.21k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  358|  3.09k|                        self.stack.push(TriGState::PredicateObjectList);
  359|  3.09k|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  360|  3.09k|                        self.stack.push(TriGState::QuotedObject);
  361|  3.09k|                        self.stack.push(TriGState::Verb);
  362|  3.09k|                        self.stack.push(TriGState::QuotedSubject);
  363|  3.09k|                        self
  364|       |                    }
  365|  1.54k|                    _ => self.error(errors, "TOKEN is not a valid RDF subject"),
  366|       |                },
  367|       |                TriGState::TriplesBlankNodePropertyListCurrent => {
  368|    316|                    if token == N3Token::Punctuation("]") {
  369|     72|                        self.stack.push(TriGState::PredicateObjectList);
  370|     72|                        self
  371|       |                    } else {
  372|    244|                        self.stack.push(TriGState::SubjectBlankNodePropertyListEnd);
  373|    244|                        self.stack.push(TriGState::PredicateObjectList);
  374|    244|                        self.recognize_next(token, context, results, errors)
  375|       |                    }
  376|       |                }
  377|       |                // [7g]  labelOrSubject  ::=  iri | BlankNode
  378|      0|                TriGState::GraphName => match token {
  379|      0|                    N3Token::IriRef(iri) => {
  380|      0|                        self.cur_graph = NamedNode::new_unchecked(iri).into();
  381|      0|                        self
  382|       |                    }
  383|       |                    N3Token::PrefixedName {
  384|      0|                        prefix,
  385|      0|                        local,
  386|      0|                        might_be_invalid_iri,
  387|      0|                    } => match resolve_local_name(
  388|      0|                        prefix,
  389|      0|                        &local,
  390|      0|                        might_be_invalid_iri,
  391|      0|                        &context.prefixes,
  392|      0|                    ) {
  393|      0|                        Ok(t) => {
  394|      0|                            self.cur_graph = t.into();
  395|      0|                            self
  396|       |                        }
  397|      0|                        Err(e) => self.error(errors, e),
  398|       |                    },
  399|      0|                    N3Token::BlankNodeLabel(label) => {
  400|      0|                        self.cur_graph = BlankNode::new_unchecked(label).into();
  401|      0|                        self
  402|       |                    }
  403|      0|                    N3Token::Punctuation("[") => {
  404|      0|                        self.stack.push(TriGState::GraphNameAnonEnd);
  405|      0|                        self
  406|       |                    }
  407|      0|                    _ => self.error(errors, "TOKEN is not a valid graph name"),
  408|       |                },
  409|       |                TriGState::GraphNameAnonEnd => {
  410|      0|                    if token == N3Token::Punctuation("]") {
  411|      0|                        self.cur_graph = BlankNode::default().into();
  412|      0|                        self
  413|       |                    } else {
  414|      0|                        self.error(errors, "Anonymous blank node with a property list are not allowed as graph name")
  415|       |                    }
  416|       |                }
  417|       |                // [7]  predicateObjectList  ::=  verb objectList (';' (verb objectList)?)*
  418|       |                TriGState::PredicateObjectList => {
  419|   240k|                    self.stack.push(TriGState::PredicateObjectListEnd);
  420|   240k|                    self.stack.push(TriGState::ObjectsList);
  421|   240k|                    self.stack.push(TriGState::Verb);
  422|   240k|                    self.recognize_next(token, context, results, errors)
  423|       |                }
  424|       |                TriGState::PredicateObjectListEnd => {
  425|   139k|                    self.cur_predicate.pop();
  426|   139k|                    if token == N3Token::Punctuation(";") {
  427|  7.39k|                        self.stack
  428|  7.39k|                            .push(TriGState::PredicateObjectListPossibleContinuation);
  429|  7.39k|                        self
  430|       |                    } else {
  431|   132k|                        self.recognize_next(token, context, results, errors)
  432|       |                    }
  433|       |                }
  434|       |                TriGState::PredicateObjectListPossibleContinuation => {
  435|  9.33k|                    if token == N3Token::Punctuation(";") {
  436|  1.94k|                        self.stack
  437|  1.94k|                            .push(TriGState::PredicateObjectListPossibleContinuation);
  438|  1.94k|                        self
  439|  7.38k|                    } else if matches!(token, N3Token::Punctuation("." | "}" | "]")) {
  440|    228|                        self.recognize_next(token, context, results, errors)
  441|       |                    } else {
  442|  7.16k|                        self.stack.push(TriGState::PredicateObjectListEnd);
  443|  7.16k|                        self.stack.push(TriGState::ObjectsList);
  444|  7.16k|                        self.stack.push(TriGState::Verb);
  445|  7.16k|                        self.recognize_next(token, context, results, errors)
  446|       |                    }
  447|       |                }
  448|       |                // [8]   objectList  ::=  object annotation? ( ',' object annotation? )*
  449|       |                // [30t] annotation  ::=  '{|' predicateObjectList '|}'
  450|       |                TriGState::ObjectsList => {
  451|   235k|                    self.stack.push(TriGState::ObjectsListEnd);
  452|   235k|                    self.stack.push(TriGState::Object);
  453|   235k|                    self.recognize_next(token, context, results, errors)
  454|       |                }
  455|   260k|                TriGState::ObjectsListEnd => match token {
  456|   241k|                    N3Token::Punctuation(",") => {
  457|  37.2k|                        self.cur_object.pop();
  458|  37.2k|                        self.stack.push(TriGState::ObjectsListEnd);
  459|  37.2k|                        self.stack.push(TriGState::Object);
  460|  37.2k|                        self
  461|       |                    }
  462|       |                    #[cfg(feature = "rdf-star")]
  463|   204k|                    N3Token::Punctuation("{|") => {
  464|  83.3k|                        let triple = Triple::new(
  465|  83.3k|                            self.cur_subject.last().unwrap().clone(),
  466|  83.3k|                            self.cur_predicate.last().unwrap().clone(),
  467|  83.3k|                            self.cur_object.pop().unwrap(),
  468|  83.3k|                        );
  469|  83.3k|                        self.cur_subject.push(triple.into());
  470|  83.3k|                        self.stack.push(TriGState::AnnotationEnd);
  471|  83.3k|                        self.stack.push(TriGState::PredicateObjectList);
  472|  83.3k|                        self
  473|       |                    }
  474|       |                    _ => {
  475|   139k|                        self.cur_object.pop();
  476|   139k|                        self.recognize_next(token, context, results, errors)
  477|       |                    }
  478|       |                },
  479|       |                #[cfg(feature = "rdf-star")]
  480|       |                TriGState::AnnotationEnd => {
  481|  3.51k|                    self.cur_subject.pop();
  482|  3.51k|                    self.stack.push(TriGState::ObjectsListAfterAnnotation);
  483|  3.51k|                    if token == N3Token::Punctuation("|}") {
  484|    213|                        self
  485|       |                    } else {
  486|  3.30k|                        self.error(errors, "Annotations should end with '|}'")
  487|       |                    }
  488|       |                }
  489|       |                #[cfg(feature = "rdf-star")]
  490|       |                TriGState::ObjectsListAfterAnnotation => {
  491|    147|                    if token == N3Token::Punctuation(",") {
  492|     72|                        self.stack.push(TriGState::ObjectsListEnd);
  493|     72|                        self.stack.push(TriGState::Object);
  494|     72|                        self
  495|       |                    } else {
  496|     75|                        self.recognize_next(token, context, results, errors)
  497|       |                    }
  498|       |                }
  499|       |                // [9]   verb       ::=  predicate | 'a'
  500|       |                // [11]  predicate  ::=  iri
  501|   891k|                TriGState::Verb => match token {
  502|  7.25k|                    N3Token::PlainKeyword("a") => {
  503|  5.16k|                        self.cur_predicate.push(rdf::TYPE.into());
  504|  5.16k|                        self
  505|       |                    }
  506|   849k|                    N3Token::IriRef(iri) => {
  507|   849k|                        self.cur_predicate.push(NamedNode::new_unchecked(iri));
  508|   849k|                        self
  509|       |                    }
  510|       |                    N3Token::PrefixedName {
  511|  26.1k|                        prefix,
  512|  26.1k|                        local,
  513|  26.1k|                        might_be_invalid_iri,
  514|  26.1k|                    } => match resolve_local_name(
  515|  26.1k|                        prefix,
  516|  26.1k|                        &local,
  517|  26.1k|                        might_be_invalid_iri,
  518|  26.1k|                        &context.prefixes,
  519|  26.1k|                    ) {
  520|  25.6k|                        Ok(t) => {
  521|  25.6k|                            self.cur_predicate.push(t);
  522|  25.6k|                            self
  523|       |                        }
  524|    495|                        Err(e) => self.error(errors, e),
  525|       |                    },
  526|  10.2k|                    _ => self.error(errors, "TOKEN is not a valid predicate"),
  527|       |                },
  528|       |                // [12]    object                 ::=  iri | BlankNode | collection | blankNodePropertyList | literal | quotedTriple
  529|       |                // [13]    literal                ::=  RDFLiteral | NumericLiteral | BooleanLiteral
  530|       |                // [14]    blank                  ::=  BlankNode | collection
  531|       |                // [15]    blankNodePropertyList  ::=  '[' predicateObjectList ']'
  532|       |                // [16]    collection             ::=  '(' object* ')'
  533|       |                // [17]    NumericLiteral         ::=  INTEGER | DECIMAL | DOUBLE
  534|       |                // [128s]  RDFLiteral             ::=  String (LANGTAG | '^^' iri)?
  535|       |                // [133s]  BooleanLiteral         ::=  'true' | 'false'
  536|       |                // [18]    String                 ::=  STRING_LITERAL_QUOTE | STRING_LITERAL_SINGLE_QUOTE | STRING_LITERAL_LONG_SINGLE_QUOTE | STRING_LITERAL_LONG_QUOTE
  537|       |                // [135s]  iri                    ::=  IRIREF | PrefixedName
  538|       |                // [136s]  PrefixedName           ::=  PNAME_LN | PNAME_NS
  539|       |                // [137s]  BlankNode              ::=  BLANK_NODE_LABEL | ANON
  540|  6.73k|                TriGState::Object => match token {
  541|  32.7k|                    N3Token::IriRef(iri) => {
  542|  32.7k|                        self.cur_object.push(NamedNode::new_unchecked(iri).into());
  543|  32.7k|                        self.emit_quad(results);
  544|  32.7k|                        self
  545|       |                    }
  546|       |                    N3Token::PrefixedName {
  547|  3.04k|                        prefix,
  548|  3.04k|                        local,
  549|  3.04k|                        might_be_invalid_iri,
  550|  3.04k|                    } => match resolve_local_name(
  551|  3.04k|                        prefix,
  552|  3.04k|                        &local,
  553|  3.04k|                        might_be_invalid_iri,
  554|  3.04k|                        &context.prefixes,
  555|  3.04k|                    ) {
  556|  1.79k|                        Ok(t) => {
  557|  1.79k|                            self.cur_object.push(t.into());
  558|  1.79k|                            self.emit_quad(results);
  559|  1.79k|                            self
  560|       |                        }
  561|  1.24k|                        Err(e) => self.error(errors, e),
  562|       |                    },
  563|  59.8k|                    N3Token::BlankNodeLabel(label) => {
  564|  59.8k|                        self.cur_object.push(BlankNode::new_unchecked(label).into());
  565|  59.8k|                        self.emit_quad(results);
  566|  59.8k|                        self
  567|       |                    }
  568|   144k|                    N3Token::Punctuation("[") => {
  569|  1.94k|                        self.stack
  570|  1.94k|                            .push(TriGState::ObjectBlankNodePropertyListCurrent);
  571|  1.94k|                        self
  572|       |                    }
  573|   142k|                    N3Token::Punctuation("(") => {
  574|   130k|                        self.stack.push(TriGState::ObjectCollectionBeginning);
  575|   130k|                        self
  576|       |                    }
  577|  17.1k|                    N3Token::String(value) => {
  578|  17.1k|                        self.stack
  579|  17.1k|                            .push(TriGState::LiteralPossibleSuffix { value, emit: true });
  580|  17.1k|                        self
  581|       |                    }
  582|  93.1k|                    N3Token::Integer(v) => {
  583|  93.1k|                        self.cur_object
  584|  93.1k|                            .push(Literal::new_typed_literal(v, xsd::INTEGER).into());
  585|  93.1k|                        self.emit_quad(results);
  586|  93.1k|                        self
  587|       |                    }
  588|  7.03k|                    N3Token::Decimal(v) => {
  589|  7.03k|                        self.cur_object
  590|  7.03k|                            .push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
  591|  7.03k|                        self.emit_quad(results);
  592|  7.03k|                        self
  593|       |                    }
  594|  96.1k|                    N3Token::Double(v) => {
  595|  96.1k|                        self.cur_object
  596|  96.1k|                            .push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
  597|  96.1k|                        self.emit_quad(results);
  598|  96.1k|                        self
  599|       |                    }
  600|  3.77k|                    N3Token::PlainKeyword("true") => {
  601|    305|                        self.cur_object
  602|    305|                            .push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
  603|    305|                        self.emit_quad(results);
  604|    305|                        self
  605|       |                    }
  606|  3.46k|                    N3Token::PlainKeyword("false") => {
  607|    155|                        self.cur_object
  608|    155|                            .push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
  609|    155|                        self.emit_quad(results);
  610|    155|                        self
  611|       |                    }
  612|       |                    #[cfg(feature = "rdf-star")]
  613|  12.0k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  614|  6.73k|                        self.stack
  615|  6.73k|                            .push(TriGState::ObjectQuotedTripleEnd { emit: true });
  616|  6.73k|                        self.stack.push(TriGState::QuotedObject);
  617|  6.73k|                        self.stack.push(TriGState::Verb);
  618|  6.73k|                        self.stack.push(TriGState::QuotedSubject);
  619|  6.73k|                        self
  620|       |                    }
  621|  8.84k|                    _ => self.error(errors, "TOKEN is not a valid RDF object"),
  622|       |                },
  623|       |                TriGState::ObjectBlankNodePropertyListCurrent => {
  624|  1.90k|                    if token == N3Token::Punctuation("]") {
  625|    938|                        self.cur_object.push(BlankNode::default().into());
  626|    938|                        self.emit_quad(results);
  627|    938|                        self
  628|       |                    } else {
  629|    965|                        self.cur_subject.push(BlankNode::default().into());
  630|    965|                        self.stack.push(TriGState::ObjectBlankNodePropertyListEnd);
  631|    965|                        self.stack.push(TriGState::PredicateObjectList);
  632|    965|                        self.recognize_next(token, context, results, errors)
  633|       |                    }
  634|       |                }
  635|       |                TriGState::ObjectBlankNodePropertyListEnd => {
  636|    332|                    if token == N3Token::Punctuation("]") {
  637|    175|                        self.cur_object.push(self.cur_subject.pop().unwrap().into());
  638|    175|                        self.emit_quad(results);
  639|    175|                        self
  640|       |                    } else {
  641|    157|                        self.error(errors, "blank node property lists should end with a ']'")
  642|       |                    }
  643|       |                }
  644|       |                TriGState::ObjectCollectionBeginning => {
  645|   128k|                    if let N3Token::Punctuation(")") = token {
  646|  3.41k|                        self.cur_object.push(rdf::NIL.into());
  647|  3.41k|                        self.emit_quad(results);
  648|  3.41k|                        self
  649|       |                    } else {
  650|   125k|                        let root = BlankNode::default();
  651|   125k|                        self.cur_object.push(root.clone().into());
  652|   125k|                        self.emit_quad(results);
  653|   125k|                        self.cur_subject.push(root.into());
  654|   125k|                        self.cur_predicate.push(rdf::FIRST.into());
  655|   125k|                        self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  656|   125k|                        self.stack.push(TriGState::Object);
  657|   125k|                        self.recognize_next(token, context, results, errors)
  658|       |                    }
  659|       |                }
  660|       |                TriGState::ObjectCollectionPossibleEnd => {
  661|  28.3k|                    let old = self.cur_subject.pop().unwrap();
  662|  28.3k|                    self.cur_object.pop();
  663|  28.3k|                    if let N3Token::Punctuation(")") = token {
  664|  4.06k|                        self.cur_predicate.pop();
  665|  4.06k|                        results.push(Quad::new(old, rdf::REST, rdf::NIL, self.cur_graph.clone()));
  666|  4.06k|                        self
  667|       |                    } else {
  668|  24.2k|                        let new = BlankNode::default();
  669|  24.2k|                        results.push(Quad::new(
  670|  24.2k|                            old,
  671|  24.2k|                            rdf::REST,
  672|  24.2k|                            new.clone(),
  673|  24.2k|                            self.cur_graph.clone(),
  674|  24.2k|                        ));
  675|  24.2k|                        self.cur_subject.push(new.into());
  676|  24.2k|                        self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  677|  24.2k|                        self.stack.push(TriGState::Object);
  678|  24.2k|                        self.recognize_next(token, context, results, errors)
  679|       |                    }
  680|       |                }
  681|  16.6k|                TriGState::LiteralPossibleSuffix { value, emit } => match token {
  682|  2.81k|                    N3Token::LangTag(lang) => {
  683|  2.81k|                        self.cur_object.push(
  684|  2.81k|                            Literal::new_language_tagged_literal_unchecked(
  685|  2.81k|                                value,
  686|  2.81k|                                lang.to_ascii_lowercase(),
  687|  2.81k|                            )
  688|  2.81k|                            .into(),
  689|  2.81k|                        );
  690|  2.81k|                        if emit {
  691|  2.75k|                            self.emit_quad(results);
  692|  2.75k|                        }
  693|  2.81k|                        self
  694|       |                    }
  695|  8.57k|                    N3Token::Punctuation("^^") => {
  696|  1.25k|                        self.stack
  697|  1.25k|                            .push(TriGState::LiteralExpectDatatype { value, emit });
  698|  1.25k|                        self
  699|       |                    }
  700|       |                    _ => {
  701|  12.6k|                        self.cur_object
  702|  12.6k|                            .push(Literal::new_simple_literal(value).into());
  703|  12.6k|                        if emit {
  704|  12.3k|                            self.emit_quad(results);
  705|  12.3k|                        }
  706|  12.6k|                        self.recognize_next(token, context, results, errors)
  707|       |                    }
  708|       |                },
  709|  1.12k|                TriGState::LiteralExpectDatatype { value, emit } => match token {
  710|    509|                    N3Token::IriRef(datatype) => {
  711|    509|                        self.cur_object.push(
  712|    509|                            Literal::new_typed_literal(value, NamedNode::new_unchecked(datatype))
  713|    509|                                .into(),
  714|    509|                        );
  715|    509|                        if emit {
  716|    509|                            self.emit_quad(results);
  717|    509|                        }
  718|    509|                        self
  719|       |                    }
  720|       |                    N3Token::PrefixedName {
  721|    468|                        prefix,
  722|    468|                        local,
  723|    468|                        might_be_invalid_iri,
  724|    468|                    } => match resolve_local_name(
  725|    468|                        prefix,
  726|    468|                        &local,
  727|    468|                        might_be_invalid_iri,
  728|    468|                        &context.prefixes,
  729|    468|                    ) {
  730|    314|                        Ok(t) => {
  731|    314|                            self.cur_object
  732|    314|                                .push(Literal::new_typed_literal(value, t).into());
  733|    314|                            if emit {
  734|    314|                                self.emit_quad(results);
  735|    314|                            }
  736|    314|                            self
  737|       |                        }
  738|    154|                        Err(e) => self.error(errors, e),
  739|       |                    },
  740|    144|                    _ => self
  741|    144|                        .error(errors, "Expecting a datatype IRI after ^^, found TOKEN")
  742|    144|                        .recognize_next(token, context, results, errors),
  743|       |                },
  744|       |                // [27t]  quotedTriple  ::=  '<<' qtSubject verb qtObject '>>'
  745|       |                #[cfg(feature = "rdf-star")]
  746|       |                TriGState::SubjectQuotedTripleEnd => {
  747|   635k|                    let triple = Triple::new(
  748|   635k|                        self.cur_subject.pop().unwrap(),
  749|   635k|                        self.cur_predicate.pop().unwrap(),
  750|   635k|                        self.cur_object.pop().unwrap(),
  751|   635k|                    );
  752|   635k|                    self.cur_subject.push(triple.into());
  753|   635k|                    if token == N3Token::Punctuation(">>") {
  754|   634k|                        self
  755|       |                    } else {
  756|  1.30k|                        self.error(
  757|  1.30k|                            errors,
  758|  1.30k|                            "Expecting '>>' to close a quoted triple, found TOKEN",
  759|  1.30k|                        )
  760|       |                    }
  761|       |                }
  762|       |                #[cfg(feature = "rdf-star")]
  763|  5.73k|                TriGState::ObjectQuotedTripleEnd { emit } => {
  764|  5.73k|                    let triple = Triple::new(
  765|  5.73k|                        self.cur_subject.pop().unwrap(),
  766|  5.73k|                        self.cur_predicate.pop().unwrap(),
  767|  5.73k|                        self.cur_object.pop().unwrap(),
  768|  5.73k|                    );
  769|  5.73k|                    self.cur_object.push(triple.into());
  770|  5.73k|                    if emit {
  771|  5.47k|                        self.emit_quad(results);
  772|  5.47k|                    }
  773|  5.73k|                    if token == N3Token::Punctuation(">>") {
  774|  1.67k|                        self
  775|       |                    } else {
  776|  4.06k|                        self.error(
  777|  4.06k|                            errors,
  778|  4.06k|                            "Expecting '>>' to close a quoted triple, found TOKEN",
  779|  4.06k|                        )
  780|       |                    }
  781|       |                }
  782|       |                // [28t]  qtSubject  ::=  iri | BlankNode | quotedTriple
  783|       |                #[cfg(feature = "rdf-star")]
  784|   656k|                TriGState::QuotedSubject => match token {
  785|   618k|                    N3Token::Punctuation("[") => {
  786|    162|                        self.cur_subject.push(BlankNode::default().into());
  787|    162|                        self.stack.push(TriGState::QuotedAnonEnd);
  788|    162|                        self
  789|       |                    }
  790|  35.5k|                    N3Token::IriRef(iri) => {
  791|  35.5k|                        self.cur_subject.push(NamedNode::new_unchecked(iri).into());
  792|  35.5k|                        self
  793|       |                    }
  794|       |                    N3Token::PrefixedName {
  795|    799|                        prefix,
  796|    799|                        local,
  797|    799|                        might_be_invalid_iri,
  798|    799|                    } => match resolve_local_name(
  799|    799|                        prefix,
  800|    799|                        &local,
  801|    799|                        might_be_invalid_iri,
  802|    799|                        &context.prefixes,
  803|    799|                    ) {
  804|    549|                        Ok(t) => {
  805|    549|                            self.cur_subject.push(t.into());
  806|    549|                            self
  807|       |                        }
  808|    250|                        Err(e) => self.error(errors, e),
  809|       |                    },
  810|  1.48k|                    N3Token::BlankNodeLabel(label) => {
  811|  1.48k|                        self.cur_subject
  812|  1.48k|                            .push(BlankNode::new_unchecked(label).into());
  813|  1.48k|                        self
  814|       |                    }
  815|   618k|                    N3Token::Punctuation("<<") => {
  816|   617k|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  817|   617k|                        self.stack.push(TriGState::QuotedObject);
  818|   617k|                        self.stack.push(TriGState::Verb);
  819|   617k|                        self.stack.push(TriGState::QuotedSubject);
  820|   617k|                        self
  821|       |                    }
  822|    783|                    _ => self.error(
  823|    783|                        errors,
  824|    783|                        "TOKEN is not a valid RDF quoted triple subject: TOKEN",
  825|    783|                    ),
  826|       |                },
  827|       |                // [29t]  qtObject  ::=  iri | BlankNode | literal | quotedTriple
  828|       |                #[cfg(feature = "rdf-star")]
  829|   642k|                TriGState::QuotedObject => match token {
  830|  1.02k|                    N3Token::Punctuation("[") => {
  831|    117|                        self.cur_object.push(BlankNode::default().into());
  832|    117|                        self.stack.push(TriGState::QuotedAnonEnd);
  833|    117|                        self
  834|       |                    }
  835|  99.1k|                    N3Token::IriRef(iri) => {
  836|  99.1k|                        self.cur_object.push(NamedNode::new_unchecked(iri).into());
  837|  99.1k|                        self
  838|       |                    }
  839|       |                    N3Token::PrefixedName {
  840|    488|                        prefix,
  841|    488|                        local,
  842|    488|                        might_be_invalid_iri,
  843|    488|                    } => match resolve_local_name(
  844|    488|                        prefix,
  845|    488|                        &local,
  846|    488|                        might_be_invalid_iri,
  847|    488|                        &context.prefixes,
  848|    488|                    ) {
  849|    392|                        Ok(t) => {
  850|    392|                            self.cur_object.push(t.into());
  851|    392|                            self
  852|       |                        }
  853|     96|                        Err(e) => self.error(errors, e),
  854|       |                    },
  855|  2.85k|                    N3Token::BlankNodeLabel(label) => {
  856|  2.85k|                        self.cur_object.push(BlankNode::new_unchecked(label).into());
  857|  2.85k|                        self
  858|       |                    }
  859|    381|                    N3Token::String(value) => {
  860|    381|                        self.stack
  861|    381|                            .push(TriGState::LiteralPossibleSuffix { value, emit: false });
  862|    381|                        self
  863|       |                    }
  864|  74.0k|                    N3Token::Integer(v) => {
  865|  74.0k|                        self.cur_object
  866|  74.0k|                            .push(Literal::new_typed_literal(v, xsd::INTEGER).into());
  867|  74.0k|                        self
  868|       |                    }
  869|    355|                    N3Token::Decimal(v) => {
  870|    355|                        self.cur_object
  871|    355|                            .push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
  872|    355|                        self
  873|       |                    }
  874|   464k|                    N3Token::Double(v) => {
  875|   464k|                        self.cur_object
  876|   464k|                            .push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
  877|   464k|                        self
  878|       |                    }
  879|    332|                    N3Token::PlainKeyword("true") => {
  880|     75|                        self.cur_object
  881|     75|                            .push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
  882|     75|                        self
  883|       |                    }
  884|    257|                    N3Token::PlainKeyword("false") => {
  885|     75|                        self.cur_object
  886|     75|                            .push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
  887|     75|                        self
  888|       |                    }
  889|    911|                    N3Token::Punctuation("<<") => {
  890|    712|                        self.stack
  891|    712|                            .push(TriGState::ObjectQuotedTripleEnd { emit: false });
  892|    712|                        self.stack.push(TriGState::QuotedObject);
  893|    712|                        self.stack.push(TriGState::Verb);
  894|    712|                        self.stack.push(TriGState::QuotedSubject);
  895|    712|                        self
  896|       |                    }
  897|    636|                    _ => self.error(errors, "TOKEN is not a valid RDF quoted triple object"),
  898|       |                },
  899|       |                #[cfg(feature = "rdf-star")]
  900|       |                TriGState::QuotedAnonEnd => {
  901|    255|                    if token == N3Token::Punctuation("]") {
  902|    193|                        self
  903|       |                    } else {
  904|     62|                        self.error(errors, "Anonymous blank node with a property list are not allowed in quoted triples")
  905|       |                    }
  906|       |                }
  907|       |            }
  908|   957k|        } else if token == N3Token::Punctuation(".") || token == N3Token::Punctuation("}") {
  909|       |            // TODO: be smarter depending if we are in '{' or not
  910|   208k|            self.stack.push(TriGState::TriGDoc);
  911|   208k|            self
  912|       |        } else {
  913|   748k|            self
  914|       |        }
  915|  6.29M|    }
_RNvMs0_NtCsgLOhukngm62_5oxttl5terseNtB5_14TriGRecognizer10new_parser:
  954|  27.1k|    pub fn new_parser(
  955|  27.1k|        with_graph_name: bool,
  956|  27.1k|        #[cfg(feature = "rdf-star")] with_quoted_triples: bool,
  957|  27.1k|        unchecked: bool,
  958|  27.1k|        base_iri: Option<Iri<String>>,
  959|  27.1k|        prefixes: HashMap<String, Iri<String>>,
  960|  27.1k|    ) -> Parser<Self> {
  961|  27.1k|        Parser::new(
  962|  27.1k|            Lexer::new(
  963|  27.1k|                N3Lexer::new(N3LexerMode::Turtle, unchecked),
  964|  27.1k|                MIN_BUFFER_SIZE,
  965|  27.1k|                MAX_BUFFER_SIZE,
  966|  27.1k|                true,
  967|  27.1k|                Some(b"#"),
  968|  27.1k|            ),
  969|  27.1k|            Self {
  970|  27.1k|                stack: vec![TriGState::TriGDoc],
  971|  27.1k|                cur_subject: Vec::new(),
  972|  27.1k|                cur_predicate: Vec::new(),
  973|  27.1k|                cur_object: Vec::new(),
  974|  27.1k|                cur_graph: GraphName::DefaultGraph,
  975|  27.1k|            },
  976|  27.1k|            TriGRecognizerContext {
  977|  27.1k|                with_graph_name,
  978|  27.1k|                #[cfg(feature = "rdf-star")]
  979|  27.1k|                with_quoted_triples,
  980|  27.1k|                prefixes,
  981|  27.1k|                lexer_options: N3LexerOptions { base_iri },
  982|  27.1k|            },
  983|  27.1k|        )
  984|  27.1k|    }
_RNvXs_NtCsgLOhukngm62_5oxttl5terseNtB4_14TriGRecognizerNtNtNtB6_7toolkit6parser14RuleRecognizer13recognize_end:
  917|  27.1k|    fn recognize_end(
  918|  27.1k|        mut self,
  919|  27.1k|        _context: &mut TriGRecognizerContext,
  920|  27.1k|        results: &mut Vec<Self::Output>,
  921|  27.1k|        errors: &mut Vec<RuleRecognizerError>,
  922|  27.1k|    ) {
  923|  27.1k|        match &*self.stack {
  924|  27.1k|            [] | [TriGState::TriGDoc] => {
  925|       |                debug_assert!(
  926|      0|                    self.cur_subject.is_empty(),
  927|      0|                    "The cur_subject stack must be empty if the state stack is empty"
  928|       |                );
  929|       |                debug_assert!(
  930|      0|                    self.cur_predicate.is_empty(),
  931|      0|                    "The cur_predicate stack must be empty if the state stack is empty"
  932|       |                );
  933|       |                debug_assert!(
  934|      0|                    self.cur_object.is_empty(),
  935|      0|                    "The cur_object stack must be empty if the state stack is empty"
  936|       |                );
  937|       |            }
  938|    227|            [.., TriGState::LiteralPossibleSuffix { value, emit: true }] => {
  939|    227|                self.cur_object
  940|    227|                    .push(Literal::new_simple_literal(value).into());
  941|    227|                self.emit_quad(results);
  942|    227|                errors.push("Triples should be followed by a dot".into())
  943|       |            }
  944|  1.27k|            _ => errors.push("Unexpected end".into()), // TODO
  945|       |        }
  946|  27.1k|    }
_RNvMs0_NtCsgLOhukngm62_5oxttl5terseNtB5_14TriGRecognizer9emit_quad:
 1001|   442k|    fn emit_quad(&mut self, results: &mut Vec<Quad>) {
 1002|   442k|        results.push(Quad::new(
 1003|   442k|            self.cur_subject.last().unwrap().clone(),
 1004|   442k|            self.cur_predicate.last().unwrap().clone(),
 1005|   442k|            self.cur_object.last().unwrap().clone(),
 1006|   442k|            self.cur_graph.clone(),
 1007|   442k|        ));
 1008|   442k|    }
_RNvXs_NtCsgLOhukngm62_5oxttl5terseNtB4_14TriGRecognizerNtNtNtB6_7toolkit6parser14RuleRecognizer13lexer_options:
  948|  7.42M|    fn lexer_options(context: &TriGRecognizerContext) -> &N3LexerOptions {
  949|  7.42M|        &context.lexer_options
  950|  7.42M|    }
_RNvXs_NtCsgLOhukngm62_5oxttl5terseNtB4_14TriGRecognizerNtNtNtB6_7toolkit6parser14RuleRecognizer20error_recovery_state:
   42|  1.23M|    fn error_recovery_state(mut self) -> Self {
   43|  1.23M|        self.stack.clear();
   44|  1.23M|        self.cur_subject.clear();
   45|  1.23M|        self.cur_predicate.clear();
   46|  1.23M|        self.cur_object.clear();
   47|  1.23M|        self.cur_graph = GraphName::DefaultGraph;
   48|  1.23M|        self
   49|  1.23M|    }
_RNvMNtCsgLOhukngm62_5oxttl5terseNtB2_21TriGRecognizerContext8prefixes:
   32|  20.3k|    pub fn prefixes(&self) -> Iter<'_, String, Iri<String>> {
   33|  20.3k|        self.prefixes.iter()
   34|  20.3k|    }
_RINvMs0_NtCsgLOhukngm62_5oxttl5terseNtB6_14TriGRecognizer5errorReEB8_:
  987|   134k|    fn error(
  988|   134k|        mut self,
  989|   134k|        errors: &mut Vec<RuleRecognizerError>,
  990|   134k|        msg: impl Into<RuleRecognizerError>,
  991|   134k|    ) -> Self {
  992|   134k|        errors.push(msg.into());
  993|   134k|        self.stack.clear();
  994|   134k|        self.cur_subject.clear();
  995|   134k|        self.cur_predicate.clear();
  996|   134k|        self.cur_object.clear();
  997|   134k|        self.cur_graph = GraphName::DefaultGraph;
  998|   134k|        self
  999|   134k|    }
_RINvMs0_NtCsgLOhukngm62_5oxttl5terseNtB6_14TriGRecognizer5errorNtNtCsjOdcKtOMjJI_5alloc6string6StringEB8_:
  987|  13.2k|    fn error(
  988|  13.2k|        mut self,
  989|  13.2k|        errors: &mut Vec<RuleRecognizerError>,
  990|  13.2k|        msg: impl Into<RuleRecognizerError>,
  991|  13.2k|    ) -> Self {
  992|  13.2k|        errors.push(msg.into());
  993|  13.2k|        self.stack.clear();
  994|  13.2k|        self.cur_subject.clear();
  995|  13.2k|        self.cur_predicate.clear();
  996|  13.2k|        self.cur_object.clear();
  997|  13.2k|        self.cur_graph = GraphName::DefaultGraph;
  998|  13.2k|        self
  999|  13.2k|    }

_RNvXs_NtNtCsgLOhukngm62_5oxttl7toolkit5errorNtB4_17TurtleSyntaxErrorNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCs7hwCOMDGQov_4trig:
   37|  1.41M|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   38|  1.41M|        if self.location.start.offset + 1 >= self.location.end.offset {
   39|  1.21M|            write!(
   40|  1.21M|                f,
   41|  1.21M|                "Parser error at line {} column {}: {}",
   42|  1.21M|                self.location.start.line + 1,
   43|  1.21M|                self.location.start.column + 1,
   44|  1.21M|                self.message
   45|  1.21M|            )
   46|   195k|        } else if self.location.start.line == self.location.end.line {
   47|   193k|            write!(
   48|   193k|                f,
   49|   193k|                "Parser error between at line {} between columns {} and column {}: {}",
   50|   193k|                self.location.start.line + 1,
   51|   193k|                self.location.start.column + 1,
   52|   193k|                self.location.end.column + 1,
   53|   193k|                self.message
   54|   193k|            )
   55|       |        } else {
   56|  1.73k|            write!(
   57|  1.73k|                f,
   58|  1.73k|                "Parser error between line {} column {} and line {} column {}: {}",
   59|  1.73k|                self.location.start.line + 1,
   60|  1.73k|                self.location.start.column + 1,
   61|  1.73k|                self.location.end.line + 1,
   62|  1.73k|                self.location.end.column + 1,
   63|  1.73k|                self.message
   64|  1.73k|            )
   65|       |        }
   66|  1.41M|    }

_RINvMs1_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerINtB6_5LexerNtNtBa_5lexer7N3LexerE16extend_from_readRShECs7hwCOMDGQov_4trig:
  113|  21.6k|    pub fn extend_from_read(&mut self, read: &mut impl Read) -> io::Result<()> {
  114|  21.6k|        self.shrink_data();
  115|  21.6k|        if self.data.len() == self.max_buffer_size {
  116|      0|            return Err(io::Error::new(
  117|      0|                io::ErrorKind::OutOfMemory,
  118|      0|                format!(
  119|      0|                    "Reached the buffer maximal size of {}",
  120|      0|                    self.max_buffer_size
  121|      0|                ),
  122|      0|            ));
  123|  21.6k|        }
  124|  21.6k|        let min_end = min(self.data.len() + self.min_buffer_size, self.max_buffer_size);
  125|  21.6k|        let new_start = self.data.len();
  126|  21.6k|        self.data.resize(min_end, 0);
  127|  21.6k|        if self.data.len() < self.data.capacity() {
  128|  5.79k|            // We keep extending to have as much space as available without reallocation
  129|  5.79k|            self.data.resize(self.data.capacity(), 0);
  130|  15.8k|        }
  131|  21.6k|        let read = read.read(&mut self.data[new_start..])?;
  132|  21.6k|        self.data.truncate(new_start + read);
  133|  21.6k|        self.is_ending = read == 0;
  134|  21.6k|        Ok(())
  135|  21.6k|    }
_RNvMs1_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3newB9_:
   73|  27.1k|    pub fn new(
   74|  27.1k|        parser: R,
   75|  27.1k|        min_buffer_size: usize,
   76|  27.1k|        max_buffer_size: usize,
   77|  27.1k|        is_line_jump_whitespace: bool,
   78|  27.1k|        line_comment_start: Option<&'static [u8]>,
   79|  27.1k|    ) -> Self {
   80|  27.1k|        Self {
   81|  27.1k|            parser,
   82|  27.1k|            data: Vec::new(),
   83|  27.1k|            position: Position {
   84|  27.1k|                line_start_buffer_offset: 0,
   85|  27.1k|                buffer_offset: 0,
   86|  27.1k|                global_offset: 0,
   87|  27.1k|                global_line: 0,
   88|  27.1k|            },
   89|  27.1k|            previous_position: Position {
   90|  27.1k|                line_start_buffer_offset: 0,
   91|  27.1k|                buffer_offset: 0,
   92|  27.1k|                global_offset: 0,
   93|  27.1k|                global_line: 0,
   94|  27.1k|            },
   95|  27.1k|            is_ending: false,
   96|  27.1k|            min_buffer_size,
   97|  27.1k|            max_buffer_size,
   98|  27.1k|            is_line_jump_whitespace,
   99|  27.1k|            line_comment_start,
  100|  27.1k|        }
  101|  27.1k|    }
_RNvMs1_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE33location_from_buffer_offset_rangeB9_:
  236|  1.22M|    pub fn location_from_buffer_offset_range(
  237|  1.22M|        &self,
  238|  1.22M|        offset_range: Range<usize>,
  239|  1.22M|    ) -> Range<TextPosition> {
  240|  1.22M|        let start_offset = self.previous_position.buffer_offset + offset_range.start;
  241|  1.22M|        let (start_extra_line_jumps, start_line_start) =
  242|  1.22M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  243|  1.22M|                &self.data[self.previous_position.buffer_offset..start_offset],
  244|  1.22M|            );
  245|  1.22M|        let start_line_start = if start_extra_line_jumps > 0 {
  246|    897|            start_line_start + self.previous_position.buffer_offset
  247|       |        } else {
  248|  1.22M|            self.previous_position.line_start_buffer_offset
  249|       |        };
  250|  1.22M|        let end_offset = self.previous_position.buffer_offset + offset_range.end;
  251|  1.22M|        let (end_extra_line_jumps, end_line_start) =
  252|  1.22M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  253|  1.22M|                &self.data[self.previous_position.buffer_offset..end_offset],
  254|  1.22M|            );
  255|  1.22M|        let end_line_start = if end_extra_line_jumps > 0 {
  256|  2.60k|            end_line_start + self.previous_position.buffer_offset
  257|       |        } else {
  258|  1.22M|            self.previous_position.line_start_buffer_offset
  259|       |        };
  260|  1.22M|        TextPosition {
  261|  1.22M|            line: self.previous_position.global_line + start_extra_line_jumps,
  262|  1.22M|            column: Self::column_from_bytes(&self.data[start_line_start..start_offset]),
  263|  1.22M|            offset: self.previous_position.global_offset
  264|  1.22M|                + u64::try_from(offset_range.start).unwrap(),
  265|  1.22M|        }..TextPosition {
  266|  1.22M|            line: self.previous_position.global_line + end_extra_line_jumps,
  267|  1.22M|            column: Self::column_from_bytes(&self.data[end_line_start..end_offset]),
  268|  1.22M|            offset: self.previous_position.global_offset + u64::try_from(offset_range.end).unwrap(),
  269|  1.22M|        }
  270|  1.22M|    }
_RNCNvMs1_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerINtB7_5LexerNtNtBb_5lexer7N3LexerE9read_next0Bb_:
  230|  1.22M|        Some(result.map_err(|e| TurtleSyntaxError {
  231|  1.22M|            location: self.location_from_buffer_offset_range(e.location),
  232|  1.22M|            message: e.message,
  233|  1.22M|        }))
_RNvMs1_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE19last_token_locationB9_:
  272|   174k|    pub fn last_token_location(&self) -> Range<TextPosition> {
  273|   174k|        TextPosition {
  274|   174k|            line: self.previous_position.global_line,
  275|   174k|            column: Self::column_from_bytes(
  276|   174k|                &self.data[self.previous_position.line_start_buffer_offset
  277|   174k|                    ..self.previous_position.buffer_offset],
  278|   174k|            ),
  279|   174k|            offset: self.previous_position.global_offset,
  280|   174k|        }..TextPosition {
  281|   174k|            line: self.position.global_line,
  282|   174k|            column: Self::column_from_bytes(
  283|   174k|                &self.data[self.position.line_start_buffer_offset..self.position.buffer_offset],
  284|   174k|            ),
  285|   174k|            offset: self.position.global_offset,
  286|   174k|        }
  287|   174k|    }
_RNvXNtNtCsgLOhukngm62_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromTINtNtNtB1a_3ops5range5RangejENtNtCsjOdcKtOMjJI_5alloc6string6StringEE4fromB6_:
   31|   880k|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|   880k|        Self {
   33|   880k|            location,
   34|   880k|            message: message.into(),
   35|   880k|        }
   36|   880k|    }
_RNvXs0_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerNtB5_20TokenRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromTjNtNtCsjOdcKtOMjJI_5alloc6string6StringEE4fromB9_:
   47|  3.44k|    fn from((location, message): (usize, S)) -> Self {
   48|  3.44k|        (location..=location, message).into()
   49|  3.44k|    }
_RNvMs1_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE11shrink_dataB9_:
  388|  1.26M|    fn shrink_data(&mut self) {
  389|  1.26M|        if self.position.line_start_buffer_offset > 0 {
  390|  20.4k|            self.data
  391|  20.4k|                .copy_within(self.position.line_start_buffer_offset.., 0);
  392|  20.4k|            self.data
  393|  20.4k|                .truncate(self.data.len() - self.position.line_start_buffer_offset);
  394|  20.4k|            self.position.buffer_offset -= self.position.line_start_buffer_offset;
  395|  20.4k|            self.position.line_start_buffer_offset = 0;
  396|  20.4k|            self.previous_position = self.position;
  397|  1.24M|        }
  398|  1.26M|    }
_RNvMs1_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  400|  8.57M|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  401|  8.57M|        let mut num_of_jumps = 0;
  402|  8.57M|        let mut last_jump_pos = 0;
  403|  8.57M|        let mut previous_cr = 0;
  404|  8.57M|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  405|  14.5k|            if bytes[pos] == b'\r' {
  406|  4.71k|                previous_cr = pos;
  407|  4.71k|                num_of_jumps += 1;
  408|  4.71k|                last_jump_pos = pos + 1;
  409|  4.71k|            } else {
  410|  9.79k|                if previous_cr < pos - 1 {
  411|  8.31k|                    // We count \r\n as a single line jump
  412|  8.31k|                    num_of_jumps += 1;
  413|  8.31k|                }
  414|  9.79k|                last_jump_pos = pos + 1;
  415|       |            }
  416|       |        }
  417|  8.57M|        (num_of_jumps, last_jump_pos)
  418|  8.57M|    }
_RNvMs1_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17column_from_bytesB9_:
  420|  4.73M|    fn column_from_bytes(bytes: &[u8]) -> u64 {
  421|  4.73M|        match str::from_utf8(bytes) {
  422|  2.34M|            Ok(s) => u64::try_from(s.chars().count()).unwrap(),
  423|  2.39M|            Err(e) => {
  424|  2.39M|                if e.valid_up_to() == 0 {
  425|   468k|                    0
  426|       |                } else {
  427|  1.92M|                    Self::column_from_bytes(&bytes[..e.valid_up_to()])
  428|       |                }
  429|       |            }
  430|       |        }
  431|  4.73M|    }
_RNvXs_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejEReEE4fromB8_:
   41|   306k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|   306k|        (*location.start()..*location.end() + 1, message).into()
   43|   306k|    }
_RNvMs1_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  338|  7.43M|    fn skip_whitespaces(&mut self) -> Option<()> {
  339|  7.43M|        if self.is_line_jump_whitespace {
  340|  7.43M|            let mut i = self.position.buffer_offset;
  341|  10.4M|            while let Some(c) = self.data.get(i) {
  342|  10.0M|                match c {
  343|  2.91M|                    b' ' | b'\t' => {
  344|  2.91M|                        self.position.buffer_offset += 1;
  345|  2.91M|                        self.position.global_offset += 1;
  346|  2.91M|                    }
  347|       |                    b'\r' => {
  348|       |                        // We look for \n for Windows line end style
  349|  23.0k|                        let mut increment: u8 = 1;
  350|  23.0k|                        if let Some(c) = self.data.get(i + 1) {
  351|  17.7k|                            if *c == b'\n' {
  352|    381|                                increment += 1;
  353|    381|                                i += 1;
  354|  17.3k|                            }
  355|  5.29k|                        } else if !self.is_ending {
  356|  4.91k|                            return None; // We need to read more
  357|    375|                        }
  358|  18.1k|                        self.position.buffer_offset += usize::from(increment);
  359|  18.1k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  360|  18.1k|                        self.position.global_offset += u64::from(increment);
  361|  18.1k|                        self.position.global_line += 1;
  362|       |                    }
  363|   131k|                    b'\n' => {
  364|   131k|                        self.position.buffer_offset += 1;
  365|   131k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  366|   131k|                        self.position.global_offset += 1;
  367|   131k|                        self.position.global_line += 1;
  368|   131k|                    }
  369|  6.94M|                    _ => return Some(()),
  370|       |                }
  371|  3.06M|                i += 1;
  372|       |                // TODO: SIMD
  373|       |            }
  374|       |        } else {
  375|      0|            for c in &self.data[self.position.buffer_offset..] {
  376|      0|                if matches!(c, b' ' | b'\t') {
  377|      0|                    self.position.buffer_offset += 1;
  378|      0|                    self.position.global_offset += 1;
  379|      0|                } else {
  380|      0|                    return Some(());
  381|       |                }
  382|       |                // TODO: SIMD
  383|       |            }
  384|       |        }
  385|   483k|        Some(())
  386|  7.43M|    }
_RNvMs1_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17extend_from_sliceB9_:
  103|  1.23M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  104|  1.23M|        self.shrink_data();
  105|  1.23M|        self.data.extend_from_slice(other);
  106|  1.23M|    }
_RNvXNtNtCsgLOhukngm62_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromTINtNtNtB1a_3ops5range5RangejEReEE4fromB6_:
   31|   361k|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|   361k|        Self {
   33|   361k|            location,
   34|   361k|            message: message.into(),
   35|   361k|        }
   36|   361k|    }
_RNvMs1_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3endB9_:
  109|  20.3k|    pub fn end(&mut self) {
  110|  20.3k|        self.is_ending = true;
  111|  20.3k|    }
_RNvMs1_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17last_token_sourceB9_:
  289|   174k|    pub fn last_token_source(&self) -> Cow<'_, str> {
  290|   174k|        String::from_utf8_lossy(
  291|   174k|            &self.data[self.previous_position.buffer_offset..self.position.buffer_offset],
  292|   174k|        )
  293|   174k|    }
_RNvMs1_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE6is_endB9_:
  295|  1.30M|    pub fn is_end(&self) -> bool {
  296|  1.30M|        self.is_ending && self.data.len() == self.position.buffer_offset
  297|  1.30M|    }
_RNvMs1_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE9read_nextB9_:
  166|  7.42M|    pub fn read_next(
  167|  7.42M|        &mut self,
  168|  7.42M|        options: &R::Options,
  169|  7.42M|    ) -> Option<Result<R::Token<'_>, TurtleSyntaxError>> {
  170|  7.42M|        self.skip_whitespaces_and_comments()?;
  171|  7.41M|        self.previous_position = self.position;
  172|  7.41M|        let Some((consumed, result)) = self.parser.recognize_next_token(
  173|  7.41M|            &self.data[self.position.buffer_offset..],
  174|  7.41M|            self.is_ending,
  175|  7.41M|            options,
  176|  7.41M|        ) else {
  177|  1.30M|            return if self.is_ending {
  178|  60.7k|                if self.position.buffer_offset == self.data.len() {
  179|  54.3k|                    None // We have finished
  180|       |                } else {
  181|  6.34k|                    let (new_line_jumps, new_line_start) =
  182|  6.34k|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  183|  6.34k|                            &self.data[self.position.buffer_offset..],
  184|  6.34k|                        );
  185|  6.34k|                    if new_line_jumps > 0 {
  186|    425|                        self.position.line_start_buffer_offset =
  187|    425|                            self.position.buffer_offset + new_line_start;
  188|  5.92k|                    }
  189|  6.34k|                    self.position.global_offset +=
  190|  6.34k|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  191|  6.34k|                    self.position.buffer_offset = self.data.len();
  192|  6.34k|                    self.position.global_line += new_line_jumps;
  193|  6.34k|                    let new_position = TextPosition {
  194|  6.34k|                        line: self.position.global_line,
  195|  6.34k|                        column: Self::column_from_bytes(
  196|  6.34k|                            &self.data[self.position.line_start_buffer_offset..],
  197|  6.34k|                        ),
  198|  6.34k|                        offset: self.position.global_offset,
  199|  6.34k|                    };
  200|  6.34k|                    let error = TurtleSyntaxError {
  201|  6.34k|                        location: new_position..new_position,
  202|  6.34k|                        message: "Unexpected end of file".into(),
  203|  6.34k|                    };
  204|  6.34k|                    self.position.buffer_offset = self.data.len(); // We consume everything
  205|  6.34k|                    Some(Err(error))
  206|       |                }
  207|       |            } else {
  208|  1.24M|                None
  209|       |            };
  210|       |        };
  211|       |        debug_assert!(
  212|      0|            consumed > 0,
  213|      0|            "The lexer must consume at least one byte each time"
  214|       |        );
  215|       |        debug_assert!(
  216|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  217|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  218|      0|            self.data.len() - self.position.buffer_offset
  219|       |        );
  220|  6.11M|        let (new_line_jumps, new_line_start) =
  221|  6.11M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  222|  6.11M|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  223|  6.11M|            );
  224|  6.11M|        if new_line_jumps > 0 {
  225|  4.13k|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  226|  6.10M|        }
  227|  6.11M|        self.position.buffer_offset += consumed;
  228|  6.11M|        self.position.global_offset += u64::try_from(consumed).unwrap();
  229|  6.11M|        self.position.global_line += new_line_jumps;
  230|  6.11M|        Some(result.map_err(|e| TurtleSyntaxError {
  231|       |            location: self.location_from_buffer_offset_range(e.location),
  232|       |            message: e.message,
  233|  6.11M|        }))
  234|  7.42M|    }
_RNvMs1_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  300|  7.42M|    fn skip_whitespaces_and_comments(&mut self) -> Option<()> {
  301|       |        loop {
  302|  7.43M|            self.skip_whitespaces()?;
  303|       |
  304|  7.42M|            let buf = &self.data[self.position.buffer_offset..];
  305|  7.42M|            if let Some(line_comment_start) = self.line_comment_start {
  306|  7.42M|                if buf.starts_with(line_comment_start) {
  307|       |                    // Comment
  308|  10.4k|                    if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  309|  3.63k|                        let mut end_position = line_comment_start.len() + end;
  310|  3.63k|                        if buf.get(end_position).copied() == Some(b'\r') {
  311|       |                            // We look for \n for Windows line end style
  312|  2.72k|                            if let Some(c) = buf.get(end_position + 1) {
  313|  2.12k|                                if *c == b'\n' {
  314|      0|                                    end_position += 1;
  315|  2.12k|                                }
  316|    598|                            } else if !self.is_ending {
  317|    571|                                return None; // We need to read more
  318|     27|                            }
  319|    910|                        }
  320|  3.06k|                        let comment_size = end_position + 1;
  321|  3.06k|                        self.position.buffer_offset += comment_size;
  322|  3.06k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  323|  3.06k|                        self.position.global_offset += u64::try_from(comment_size).unwrap();
  324|  3.06k|                        self.position.global_line += 1;
  325|  3.06k|                        continue;
  326|  6.81k|                    }
  327|  6.81k|                    if self.is_ending {
  328|    585|                        self.position.buffer_offset = self.data.len(); // EOF
  329|    585|                        return Some(());
  330|  6.22k|                    }
  331|  6.22k|                    return None; // We need more data
  332|  7.41M|                }
  333|      0|            }
  334|  7.41M|            return Some(());
  335|       |        }
  336|  7.42M|    }
_RNvXs_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejENtNtCsjOdcKtOMjJI_5alloc6string6StringEE4fromB8_:
   41|  5.94k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  5.94k|        (*location.start()..*location.end() + 1, message).into()
   43|  5.94k|    }

_RINvMs_NtNtCsgLOhukngm62_5oxttl7toolkit6parserINtB5_6ParserNtNtB9_5terse14TriGRecognizerE10parse_readRShECs7hwCOMDGQov_4trig:
  124|  6.79k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadIterator<R, RR> {
  125|  6.79k|        FromReadIterator { read, parser: self }
  126|  6.79k|    }
_RNvXs0_NtNtCsgLOhukngm62_5oxttl7toolkit6parserINtB5_16FromReadIteratorRShNtNtB9_5terse14TriGRecognizerENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCs7hwCOMDGQov_4trig:
  146|   125k|    fn next(&mut self) -> Option<Self::Item> {
  147|   147k|        while !self.parser.is_end() {
  148|   140k|            if let Some(result) = self.parser.read_next() {
  149|   119k|                return Some(result.map_err(TurtleParseError::Syntax));
  150|  21.6k|            }
  151|  21.6k|            if let Err(e) = self.parser.lexer.extend_from_read(&mut self.read) {
  152|      0|                return Some(Err(e.into()));
  153|  21.6k|            }
  154|       |        }
  155|  6.79k|        None
  156|   125k|    }
_RNvMs_NtNtCsgLOhukngm62_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE3endB8_:
   71|  20.3k|    pub fn end(&mut self) {
   72|  20.3k|        self.lexer.end()
   73|  20.3k|    }
_RNvXNtNtCsgLOhukngm62_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromReE4fromB6_:
   39|   161k|    fn from(message: S) -> Self {
   40|   161k|        Self {
   41|   161k|            message: message.into(),
   42|   161k|        }
   43|   161k|    }
_RNvMs_NtNtCsgLOhukngm62_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE17extend_from_sliceB8_:
   66|  1.23M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
   67|  1.23M|        self.lexer.extend_from_slice(other)
   68|  1.23M|    }
_RNvMs_NtNtCsgLOhukngm62_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE6is_endB8_:
   76|   167k|    pub fn is_end(&self) -> bool {
   77|   167k|        self.state.is_none() && self.results.is_empty() && self.errors.is_empty()
   78|   167k|    }
_RNCNvMs_NtNtCsgLOhukngm62_5oxttl7toolkit6parserINtB6_6ParserNtNtBa_5terse14TriGRecognizerE9read_next0Ba_:
   96|  4.88M|                        self.state = self.state.take().map(|state| {
   97|  4.88M|                            state.recognize_next(
   98|  4.88M|                                token,
   99|  4.88M|                                &mut self.context,
  100|  4.88M|                                &mut self.results,
  101|  4.88M|                                &mut self.errors,
  102|  4.88M|                            )
  103|  4.88M|                        });
_RNvXNtNtCsgLOhukngm62_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsjOdcKtOMjJI_5alloc6string6StringE4fromB6_:
   39|  13.2k|    fn from(message: S) -> Self {
   40|  13.2k|        Self {
   41|  13.2k|            message: message.into(),
   42|  13.2k|        }
   43|  13.2k|    }
_RNvMs_NtNtCsgLOhukngm62_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE9read_nextB8_:
   80|  3.17M|    pub fn read_next(&mut self) -> Option<Result<RR::Output, TurtleSyntaxError>> {
   81|       |        loop {
   82|  8.08M|            if let Some(error) = self.errors.pop() {
   83|   174k|                return Some(Err(TurtleSyntaxError {
   84|   174k|                    location: self.lexer.last_token_location(),
   85|   174k|                    message: error
   86|   174k|                        .message
   87|   174k|                        .replace("TOKEN", &self.lexer.last_token_source()),
   88|   174k|                }));
   89|  7.90M|            }
   90|  7.90M|            if let Some(result) = self.results.pop() {
   91|   481k|                return Some(Ok(result));
   92|  7.42M|            }
   93|  7.42M|            if let Some(result) = self.lexer.read_next(RR::lexer_options(&self.context)) {
   94|  6.11M|                match result {
   95|  4.88M|                    Ok(token) => {
   96|  4.88M|                        self.state = self.state.take().map(|state| {
   97|       |                            state.recognize_next(
   98|       |                                token,
   99|       |                                &mut self.context,
  100|       |                                &mut self.results,
  101|       |                                &mut self.errors,
  102|       |                            )
  103|  4.88M|                        });
  104|  4.88M|                        continue;
  105|       |                    }
  106|  1.23M|                    Err(e) => {
  107|  1.23M|                        self.state = self.state.take().map(RR::error_recovery_state);
  108|  1.23M|                        return Some(Err(e));
  109|       |                    }
  110|       |                }
  111|  1.30M|            }
  112|  1.30M|            if self.lexer.is_end() {
  113|  54.3k|                self.state.take()?.recognize_end(
  114|  27.1k|                    &mut self.context,
  115|  27.1k|                    &mut self.results,
  116|  27.1k|                    &mut self.errors,
  117|  27.1k|                )
  118|       |            } else {
  119|  1.25M|                return None;
  120|       |            }
  121|       |        }
  122|  3.17M|    }
_RNvMs_NtNtCsgLOhukngm62_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE3newB8_:
   56|  27.1k|    pub fn new(lexer: Lexer<RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   57|  27.1k|        Self {
   58|  27.1k|            lexer,
   59|  27.1k|            state: Some(recognizer),
   60|  27.1k|            context,
   61|  27.1k|            results: vec![],
   62|  27.1k|            errors: vec![],
   63|  27.1k|        }
   64|  27.1k|    }

_RNvXs2_NtCsgLOhukngm62_5oxttl4trigNtB5_16TriGPrefixesIterNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCs7hwCOMDGQov_4trig:
  569|  23.4k|    fn next(&mut self) -> Option<Self::Item> {
  570|  23.4k|        let (key, value) = self.inner.next()?;
  571|  3.03k|        Some((key.as_str(), value.as_str()))
  572|  23.4k|    }
_RNvXs2_NtCsgLOhukngm62_5oxttl4trigNtB5_16TriGPrefixesIterNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator9size_hintCs7hwCOMDGQov_4trig:
  575|  2.48k|    fn size_hint(&self) -> (usize, Option<usize>) {
  576|  2.48k|        self.inner.size_hint()
  577|  2.48k|    }
_RNvMNtCsgLOhukngm62_5oxttl4trigNtB2_10TriGParser19with_quoted_triplesCs7hwCOMDGQov_4trig:
   97|  27.1k|    pub fn with_quoted_triples(mut self) -> Self {
   98|  27.1k|        self.with_quoted_triples = true;
   99|  27.1k|        self
  100|  27.1k|    }
_RNvMs3_NtCsgLOhukngm62_5oxttl4trigNtB5_14TriGSerializer3newCs7hwCOMDGQov_4trig:
  612|  6.79k|    pub fn new() -> Self {
  613|  6.79k|        Self {
  614|  6.79k|            prefixes: BTreeMap::new(),
  615|  6.79k|        }
  616|  6.79k|    }
_RNvMNtCsgLOhukngm62_5oxttl4trigNtB2_10TriGParser3newCs7hwCOMDGQov_4trig:
   62|  27.1k|    pub fn new() -> Self {
   63|  27.1k|        Self::default()
   64|  27.1k|    }
_RNvXs8_NtCsgLOhukngm62_5oxttl4trigNtB5_10TriGParserNtNtCs9nhK3FOW46N_4core7default7Default7defaultCs7hwCOMDGQov_4trig:
   49|  27.1k|#[derive(Default)]
_RNvMNtCsgLOhukngm62_5oxttl4trigNtB2_10TriGParser9uncheckedCs7hwCOMDGQov_4trig:
   72|  6.79k|    pub fn unchecked(mut self) -> Self {
   73|  6.79k|        self.unchecked = true;
   74|  6.79k|        self
   75|  6.79k|    }
_RINvMs5_NtCsgLOhukngm62_5oxttl4trigNtB6_18LowLevelTriGWriter4termNtNtCsaAh6yFmIely_5oxrdf10named_node12NamedNodeRefECs7hwCOMDGQov_4trig:
  963|  1.59k|    fn term<'a>(&'a self, term: impl Into<TermRef<'a>>) -> TurtleTerm<'a> {
  964|  1.59k|        TurtleTerm {
  965|  1.59k|            term: term.into(),
  966|  1.59k|            prefixes: &self.prefixes,
  967|  1.59k|        }
  968|  1.59k|    }
_RINvMNtCsgLOhukngm62_5oxttl4trigNtB3_10TriGParser13with_base_iriReECs7hwCOMDGQov_4trig:
   78|  20.3k|    pub fn with_base_iri(mut self, base_iri: impl Into<String>) -> Result<Self, IriParseError> {
   79|  20.3k|        self.base = Some(Iri::parse(base_iri.into())?);
   80|  20.3k|        Ok(self)
   81|  20.3k|    }
_RINvMs5_NtCsgLOhukngm62_5oxttl4trigNtB6_18LowLevelTriGWriter10write_quadRNtNtCsaAh6yFmIely_5oxrdf6triple4QuadQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEECs7hwCOMDGQov_4trig:
  861|   119k|    pub fn write_quad<'a>(
  862|   119k|        &mut self,
  863|   119k|        q: impl Into<QuadRef<'a>>,
  864|   119k|        mut write: impl Write,
  865|   119k|    ) -> io::Result<()> {
  866|   119k|        if !self.prelude_written {
  867|  3.52k|            self.prelude_written = true;
  868|  4.17k|            for (prefix_iri, prefix_name) in &self.prefixes {
  869|    652|                writeln!(write, "@prefix {prefix_name}: <{prefix_iri}> .")?;
  870|       |            }
  871|   115k|        }
  872|   119k|        let q = q.into();
  873|   119k|        if q.graph_name == self.current_graph_name.as_ref() {
  874|   112k|            if let Some((current_subject, current_predicate)) =
  875|   115k|                self.current_subject_predicate.take()
  876|       |            {
  877|   112k|                if q.subject == current_subject.as_ref() {
  878|  18.2k|                    if q.predicate == current_predicate {
  879|  11.3k|                        self.current_subject_predicate = Some((current_subject, current_predicate));
  880|  11.3k|                        write!(write, " , {}", self.term(q.object))
  881|       |                    } else {
  882|  6.89k|                        self.current_subject_predicate =
  883|  6.89k|                            Some((current_subject, q.predicate.into_owned()));
  884|  6.89k|                        writeln!(write, " ;")?;
  885|  6.89k|                        if !self.current_graph_name.is_default_graph() {
  886|  1.30k|                            write!(write, "\t")?;
  887|  5.59k|                        }
  888|  6.89k|                        write!(
  889|  6.89k|                            write,
  890|  6.89k|                            "\t{} {}",
  891|  6.89k|                            self.predicate(q.predicate),
  892|  6.89k|                            self.term(q.object)
  893|  6.89k|                        )
  894|       |                    }
  895|       |                } else {
  896|  94.2k|                    self.current_subject_predicate =
  897|  94.2k|                        Some((q.subject.into_owned(), q.predicate.into_owned()));
  898|  94.2k|                    writeln!(write, " .")?;
  899|  94.2k|                    if !self.current_graph_name.is_default_graph() {
  900|  11.7k|                        write!(write, "\t")?;
  901|  82.5k|                    }
  902|  94.2k|                    write!(
  903|  94.2k|                        write,
  904|  94.2k|                        "{} {} {}",
  905|  94.2k|                        self.term(q.subject),
  906|  94.2k|                        self.predicate(q.predicate),
  907|  94.2k|                        self.term(q.object)
  908|  94.2k|                    )
  909|       |                }
  910|       |            } else {
  911|  2.96k|                self.current_subject_predicate =
  912|  2.96k|                    Some((q.subject.into_owned(), q.predicate.into_owned()));
  913|  2.96k|                if !self.current_graph_name.is_default_graph() {
  914|      0|                    write!(write, "\t")?;
  915|  2.96k|                }
  916|  2.96k|                write!(
  917|  2.96k|                    write,
  918|  2.96k|                    "{} {} {}",
  919|  2.96k|                    self.term(q.subject),
  920|  2.96k|                    self.predicate(q.predicate),
  921|  2.96k|                    self.term(q.object)
  922|  2.96k|                )
  923|       |            }
  924|       |        } else {
  925|  3.58k|            if self.current_subject_predicate.is_some() {
  926|  3.02k|                writeln!(write, " .")?;
  927|    564|            }
  928|  3.58k|            if !self.current_graph_name.is_default_graph() {
  929|  1.76k|                writeln!(write, "}}")?;
  930|  1.81k|            }
  931|  3.58k|            self.current_graph_name = q.graph_name.into_owned();
  932|  3.58k|            self.current_subject_predicate =
  933|  3.58k|                Some((q.subject.into_owned(), q.predicate.into_owned()));
  934|  3.58k|            match self.current_graph_name.as_ref() {
  935|  1.59k|                GraphNameRef::NamedNode(g) => {
  936|  1.59k|                    writeln!(write, "{} {{", self.term(g))?;
  937|  1.59k|                    write!(write, "\t")?;
  938|       |                }
  939|    748|                GraphNameRef::BlankNode(g) => {
  940|    748|                    writeln!(write, "{} {{", self.term(g))?;
  941|    748|                    write!(write, "\t")?;
  942|       |                }
  943|  1.24k|                GraphNameRef::DefaultGraph => (),
  944|       |            }
  945|       |
  946|  3.58k|            write!(
  947|  3.58k|                write,
  948|  3.58k|                "{} {} {}",
  949|  3.58k|                self.term(q.subject),
  950|  3.58k|                self.predicate(q.predicate),
  951|  3.58k|                self.term(q.object)
  952|  3.58k|            )
  953|       |        }
  954|   119k|    }
_RINvMs5_NtCsgLOhukngm62_5oxttl4trigNtB6_18LowLevelTriGWriter4termNtNtCsaAh6yFmIely_5oxrdf6triple10SubjectRefECs7hwCOMDGQov_4trig:
  963|   100k|    fn term<'a>(&'a self, term: impl Into<TermRef<'a>>) -> TurtleTerm<'a> {
  964|   100k|        TurtleTerm {
  965|   100k|            term: term.into(),
  966|   100k|            prefixes: &self.prefixes,
  967|   100k|        }
  968|   100k|    }
_RINvMs3_NtCsgLOhukngm62_5oxttl4trigNtB6_14TriGSerializer11with_prefixNtNtCsjOdcKtOMjJI_5alloc6string6StringB15_ECs7hwCOMDGQov_4trig:
  619|    955|    pub fn with_prefix(
  620|    955|        mut self,
  621|    955|        prefix_name: impl Into<String>,
  622|    955|        prefix_iri: impl Into<String>,
  623|    955|    ) -> Result<Self, IriParseError> {
  624|    955|        self.prefixes.insert(
  625|    955|            Iri::parse(prefix_iri.into())?.into_inner(),
  626|    955|            prefix_name.into(),
  627|    955|        );
  628|    955|        Ok(self)
  629|    955|    }
_RINvMs5_NtCsgLOhukngm62_5oxttl4trigNtB6_18LowLevelTriGWriter4termNtNtCsaAh6yFmIely_5oxrdf6triple7TermRefECs7hwCOMDGQov_4trig:
  963|   119k|    fn term<'a>(&'a self, term: impl Into<TermRef<'a>>) -> TurtleTerm<'a> {
  964|   119k|        TurtleTerm {
  965|   119k|            term: term.into(),
  966|   119k|            prefixes: &self.prefixes,
  967|   119k|        }
  968|   119k|    }
_RNvMs4_NtCsgLOhukngm62_5oxttl4trigINtB5_17ToWriteTriGWriterINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE6finishCs7hwCOMDGQov_4trig:
  767|  6.79k|    pub fn finish(mut self) -> io::Result<W> {
  768|  6.79k|        self.writer.finish(&mut self.write)?;
  769|  6.79k|        Ok(self.write)
  770|  6.79k|    }
_RINvMs5_NtCsgLOhukngm62_5oxttl4trigNtB6_18LowLevelTriGWriter6finishQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEECs7hwCOMDGQov_4trig:
  971|  6.79k|    pub fn finish(&mut self, mut write: impl Write) -> io::Result<()> {
  972|  6.79k|        if self.current_subject_predicate.is_some() {
  973|  3.52k|            writeln!(write, " .")?;
  974|  3.27k|        }
  975|  6.79k|        if !self.current_graph_name.is_default_graph() {
  976|    578|            writeln!(write, "}}")?;
  977|  6.21k|        }
  978|  6.79k|        Ok(())
  979|  6.79k|    }
_RNvXs0_NtCsgLOhukngm62_5oxttl4trigINtB5_18FromReadTriGReaderRShENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCs7hwCOMDGQov_4trig:
  319|   125k|    fn next(&mut self) -> Option<Self::Item> {
  320|   125k|        self.inner.next()
  321|   125k|    }
_RINvMs4_NtCsgLOhukngm62_5oxttl4trigINtB6_17ToWriteTriGWriterINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE10write_quadRNtNtCsaAh6yFmIely_5oxrdf6triple4QuadECs7hwCOMDGQov_4trig:
  762|   119k|    pub fn write_quad<'a>(&mut self, q: impl Into<QuadRef<'a>>) -> io::Result<()> {
  763|   119k|        self.writer.write_quad(q, &mut self.write)
  764|   119k|    }
_RINvMs5_NtCsgLOhukngm62_5oxttl4trigNtB6_18LowLevelTriGWriter9predicateNtNtCsaAh6yFmIely_5oxrdf10named_node12NamedNodeRefECs7hwCOMDGQov_4trig:
  956|   107k|    fn predicate<'a>(&'a self, named_node: impl Into<NamedNodeRef<'a>>) -> TurtlePredicate<'a> {
  957|   107k|        TurtlePredicate {
  958|   107k|            named_node: named_node.into(),
  959|   107k|            prefixes: &self.prefixes,
  960|   107k|        }
  961|   107k|    }
_RINvMNtCsgLOhukngm62_5oxttl4trigNtB3_10TriGParser10parse_readRShECs7hwCOMDGQov_4trig:
  128|  6.79k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadTriGReader<R> {
  129|  6.79k|        FromReadTriGReader {
  130|  6.79k|            inner: self.parse().parser.parse_read(read),
  131|  6.79k|        }
  132|  6.79k|    }
_RINvMs3_NtCsgLOhukngm62_5oxttl4trigNtB6_14TriGSerializer18serialize_to_writeINtNtCsjOdcKtOMjJI_5alloc3vec3VechEECs7hwCOMDGQov_4trig:
  652|  6.79k|    pub fn serialize_to_write<W: Write>(self, write: W) -> ToWriteTriGWriter<W> {
  653|  6.79k|        ToWriteTriGWriter {
  654|  6.79k|            write,
  655|  6.79k|            writer: self.serialize(),
  656|  6.79k|        }
  657|  6.79k|    }
_RINvMs5_NtCsgLOhukngm62_5oxttl4trigNtB6_18LowLevelTriGWriter4termNtNtCsaAh6yFmIely_5oxrdf10blank_node12BlankNodeRefECs7hwCOMDGQov_4trig:
  963|    748|    fn term<'a>(&'a self, term: impl Into<TermRef<'a>>) -> TurtleTerm<'a> {
  964|    748|        TurtleTerm {
  965|    748|            term: term.into(),
  966|    748|            prefixes: &self.prefixes,
  967|    748|        }
  968|    748|    }
_RNvXs7_NtCsgLOhukngm62_5oxttl4trigNtB5_10TurtleTermNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1007|  2.23M|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1008|  2.23M|        match self.term {
 1009|   888k|            TermRef::NamedNode(v) => {
 1010|   916k|                for (prefix_iri, prefix_name) in self.prefixes {
 1011|  55.4k|                    if let Some(local_name) = v.as_str().strip_prefix(prefix_iri) {
 1012|  40.5k|                        if let Some(escaped_local_name) = escape_local_name(local_name) {
 1013|  28.0k|                            return write!(f, "{prefix_name}:{escaped_local_name}");
 1014|  12.4k|                        }
 1015|  14.9k|                    }
 1016|       |                }
 1017|   860k|                write!(f, "{v}")
 1018|       |            }
 1019|   122k|            TermRef::BlankNode(v) => write!(f, "{v}"),
 1020|   588k|            TermRef::Literal(v) => {
 1021|   588k|                let value = v.value();
 1022|   588k|                let inline = match v.datatype() {
 1023|   588k|                    xsd::BOOLEAN => is_turtle_boolean(value),
 1024|   588k|                    xsd::INTEGER => is_turtle_integer(value),
 1025|   492k|                    xsd::DECIMAL => is_turtle_decimal(value),
 1026|   490k|                    xsd::DOUBLE => is_turtle_double(value),
 1027|  4.14k|                    _ => false,
 1028|       |                };
 1029|   588k|                if inline {
 1030|   583k|                    f.write_str(value)
 1031|  4.14k|                } else if v.is_plain() {
 1032|  3.94k|                    write!(f, "{v}")
 1033|       |                } else {
 1034|    203|                    write!(
 1035|    203|                        f,
 1036|    203|                        "{}^^{}",
 1037|    203|                        LiteralRef::new_simple_literal(v.value()),
 1038|    203|                        TurtleTerm {
 1039|    203|                            term: v.datatype().into(),
 1040|    203|                            prefixes: self.prefixes
 1041|    203|                        }
 1042|    203|                    )
 1043|       |                }
 1044|       |            }
 1045|       |            #[cfg(feature = "rdf-star")]
 1046|   635k|            TermRef::Triple(t) => {
 1047|   635k|                write!(
 1048|   635k|                    f,
 1049|   635k|                    "<< {} {} {} >>",
 1050|   635k|                    TurtleTerm {
 1051|   635k|                        term: t.subject.as_ref().into(),
 1052|   635k|                        prefixes: self.prefixes
 1053|   635k|                    },
 1054|   635k|                    TurtleTerm {
 1055|   635k|                        term: t.predicate.as_ref().into(),
 1056|   635k|                        prefixes: self.prefixes
 1057|   635k|                    },
 1058|   635k|                    TurtleTerm {
 1059|   635k|                        term: t.object.as_ref(),
 1060|   635k|                        prefixes: self.prefixes
 1061|   635k|                    }
 1062|   635k|                )
 1063|       |            }
 1064|       |        }
 1065|  2.23M|    }
_RNvNtCsgLOhukngm62_5oxttl4trig17is_turtle_integer:
 1072|  95.1k|fn is_turtle_integer(value: &str) -> bool {
 1073|  95.1k|    // [19]  INTEGER  ::=  [+-]? [0-9]+
 1074|  95.1k|    let mut value = value.as_bytes();
 1075|  95.1k|    if let Some(v) = value.strip_prefix(b"+") {
 1076|    471|        value = v;
 1077|  94.6k|    } else if let Some(v) = value.strip_prefix(b"-") {
 1078|     18|        value = v;
 1079|  94.6k|    }
 1080|  95.1k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
 1081|  95.1k|}
_RNvMs3_NtCsgLOhukngm62_5oxttl4trigNtB5_14TriGSerializer9serialize:
  723|  6.79k|    pub fn serialize(self) -> LowLevelTriGWriter {
  724|  6.79k|        LowLevelTriGWriter {
  725|  6.79k|            prefixes: self.prefixes,
  726|  6.79k|            prelude_written: false,
  727|  6.79k|            current_graph_name: GraphName::DefaultGraph,
  728|  6.79k|            current_subject_predicate: None,
  729|  6.79k|        }
  730|  6.79k|    }
_RNvMs1_NtCsgLOhukngm62_5oxttl4trigNtB5_18LowLevelTriGReader9read_next:
  495|  3.03M|    pub fn read_next(&mut self) -> Option<Result<Quad, TurtleSyntaxError>> {
  496|  3.03M|        self.parser.read_next()
  497|  3.03M|    }
_RNvNtCsgLOhukngm62_5oxttl4trig16is_turtle_double:
 1100|   486k|fn is_turtle_double(value: &str) -> bool {
 1101|   486k|    // [21]    DOUBLE    ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
 1102|   486k|    // [154s]  EXPONENT  ::=  [eE] [+-]? [0-9]+
 1103|   486k|    let mut value = value.as_bytes();
 1104|   486k|    if let Some(v) = value.strip_prefix(b"+") {
 1105|     71|        value = v;
 1106|   486k|    } else if let Some(v) = value.strip_prefix(b"-") {
 1107|    131|        value = v;
 1108|   486k|    }
 1109|   486k|    let mut with_before = false;
 1110|  1.55M|    while value.first().map_or(false, u8::is_ascii_digit) {
 1111|  1.07M|        value = &value[1..];
 1112|  1.07M|        with_before = true;
 1113|  1.07M|    }
 1114|   486k|    let mut with_after = false;
 1115|   486k|    if let Some(v) = value.strip_prefix(b".") {
 1116|    452|        value = v;
 1117|  5.04k|        while value.first().map_or(false, u8::is_ascii_digit) {
 1118|  4.59k|            value = &value[1..];
 1119|  4.59k|            with_after = true;
 1120|  4.59k|        }
 1121|   486k|    }
 1122|   486k|    if let Some(v) = value.strip_prefix(b"e") {
 1123|  47.9k|        value = v;
 1124|   438k|    } else if let Some(v) = value.strip_prefix(b"E") {
 1125|   438k|        value = v;
 1126|   438k|    } else {
 1127|      0|        return false;
 1128|       |    }
 1129|   486k|    if let Some(v) = value.strip_prefix(b"+") {
 1130|    132|        value = v;
 1131|   486k|    } else if let Some(v) = value.strip_prefix(b"-") {
 1132|     73|        value = v;
 1133|   486k|    }
 1134|   486k|    (with_before || with_after) && !value.is_empty() && value.iter().all(u8::is_ascii_digit)
 1135|   486k|}
_RNvNtCsgLOhukngm62_5oxttl4trig28can_be_escaped_in_local_name:
 1167|  76.4k|fn can_be_escaped_in_local_name(c: char) -> bool {
 1168|     76|    matches!(
 1169|  76.4k|        c,
 1170|       |        '_' | '~'
 1171|       |            | '.'
 1172|       |            | '-'
 1173|       |            | '!'
 1174|       |            | '$'
 1175|       |            | '&'
 1176|       |            | '\''
 1177|       |            | '('
 1178|       |            | ')'
 1179|       |            | '*'
 1180|       |            | '+'
 1181|       |            | ','
 1182|       |            | ';'
 1183|       |            | '='
 1184|       |            | '/'
 1185|       |            | '?'
 1186|       |            | '#'
 1187|       |            | '@'
 1188|       |            | '%'
 1189|       |    )
 1190|  76.4k|}
_RNvMs1_NtCsgLOhukngm62_5oxttl4trigNtB5_18LowLevelTriGReader3end:
  482|  20.3k|    pub fn end(&mut self) {
  483|  20.3k|        self.parser.end()
  484|  20.3k|    }
_RNvMNtCsgLOhukngm62_5oxttl4trigNtB2_10TriGParser5parse:
  212|  27.1k|    pub fn parse(self) -> LowLevelTriGReader {
  213|  27.1k|        LowLevelTriGReader {
  214|  27.1k|            parser: TriGRecognizer::new_parser(
  215|  27.1k|                true,
  216|  27.1k|                #[cfg(feature = "rdf-star")]
  217|  27.1k|                self.with_quoted_triples,
  218|  27.1k|                self.unchecked,
  219|  27.1k|                self.base,
  220|  27.1k|                self.prefixes,
  221|  27.1k|            ),
  222|  27.1k|        }
  223|  27.1k|    }
_RNvXs6_NtCsgLOhukngm62_5oxttl4trigNtB5_15TurtlePredicateNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  988|   107k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  989|   107k|        if self.named_node == rdf::TYPE {
  990|  1.14k|            f.write_str("a")
  991|       |        } else {
  992|   106k|            TurtleTerm {
  993|   106k|                term: self.named_node.into(),
  994|   106k|                prefixes: self.prefixes,
  995|   106k|            }
  996|   106k|            .fmt(f)
  997|       |        }
  998|   107k|    }
_RNvNtCsgLOhukngm62_5oxttl4trig17is_turtle_boolean:
 1068|    112|fn is_turtle_boolean(value: &str) -> bool {
 1069|    112|    matches!(value, "true" | "false")
 1070|    112|}
_RNvNtCsgLOhukngm62_5oxttl4trig17is_turtle_decimal:
 1083|  2.04k|fn is_turtle_decimal(value: &str) -> bool {
 1084|  2.04k|    // [20]  DECIMAL  ::=  [+-]? [0-9]* '.' [0-9]+
 1085|  2.04k|    let mut value = value.as_bytes();
 1086|  2.04k|    if let Some(v) = value.strip_prefix(b"+") {
 1087|     52|        value = v;
 1088|  1.99k|    } else if let Some(v) = value.strip_prefix(b"-") {
 1089|     76|        value = v;
 1090|  1.92k|    }
 1091|  3.51k|    while value.first().map_or(false, u8::is_ascii_digit) {
 1092|  1.46k|        value = &value[1..];
 1093|  1.46k|    }
 1094|  2.04k|    let Some(value) = value.strip_prefix(b".") else {
 1095|      0|        return false;
 1096|       |    };
 1097|  2.04k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
 1098|  2.04k|}
_RNvMs1_NtCsgLOhukngm62_5oxttl4trigNtB5_18LowLevelTriGReader8prefixes:
  524|  20.3k|    pub fn prefixes(&self) -> TriGPrefixesIter<'_> {
  525|  20.3k|        TriGPrefixesIter {
  526|  20.3k|            inner: self.parser.context.prefixes(),
  527|  20.3k|        }
  528|  20.3k|    }
_RNvNtCsgLOhukngm62_5oxttl4trig17escape_local_name:
 1137|  40.5k|fn escape_local_name(value: &str) -> Option<String> {
 1138|  40.5k|    // TODO: PLX
 1139|  40.5k|    // [168s] 	PN_LOCAL 	::= 	(PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
 1140|  40.5k|    let mut output = String::with_capacity(value.len());
 1141|  40.5k|    let mut chars = value.chars();
 1142|  40.5k|    let first = chars.next()?;
 1143|  28.1k|    if N3Lexer::is_possible_pn_chars_u(first) || first == ':' || first.is_ascii_digit() {
 1144|  10.5k|        output.push(first);
 1145|  17.6k|    } else if can_be_escaped_in_local_name(first) {
 1146|  17.6k|        output.push('\\');
 1147|  17.6k|        output.push(first);
 1148|  17.6k|    } else {
 1149|     22|        return None;
 1150|       |    }
 1151|       |
 1152|   206k|    while let Some(c) = chars.next() {
 1153|   178k|        if N3Lexer::is_possible_pn_chars(c) || c == ':' || (c == '.' && !chars.as_str().is_empty())
 1154|   119k|        {
 1155|   119k|            output.push(c);
 1156|   119k|        } else if can_be_escaped_in_local_name(c) {
 1157|  58.7k|            output.push('\\');
 1158|  58.7k|            output.push(c);
 1159|  58.7k|        } else {
 1160|     54|            return None;
 1161|       |        }
 1162|       |    }
 1163|       |
 1164|  28.0k|    Some(output)
 1165|  40.5k|}
_RNvMs1_NtCsgLOhukngm62_5oxttl4trigNtB5_18LowLevelTriGReader17extend_from_slice:
  475|  1.23M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  476|  1.23M|        self.parser.extend_from_slice(other)
  477|  1.23M|    }
_RNvMs1_NtCsgLOhukngm62_5oxttl4trigNtB5_18LowLevelTriGReader6is_end:
  487|  20.3k|    pub fn is_end(&self) -> bool {
  488|  20.3k|        self.parser.is_end()
  489|  20.3k|    }


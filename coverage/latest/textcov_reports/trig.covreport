






























_RINvCsbTqLqKzjopm_4trig5parseARShj1_EB2_:
    8|  8.37k|fn parse<'a>(
    9|  8.37k|    chunks: impl IntoIterator<Item = &'a [u8]>,
   10|  8.37k|    unchecked: bool,
   11|  8.37k|) -> (Vec<Quad>, Vec<String>, Vec<(String, String)>) {
   12|  8.37k|    let mut quads = Vec::new();
   13|  8.37k|    let mut errors = Vec::new();
   14|  8.37k|    let mut parser = TriGParser::new()
   15|  8.37k|        .with_quoted_triples()
   16|  8.37k|        .with_base_iri("http://example.com/")
   17|  8.37k|        .unwrap();
   18|  8.37k|    if unchecked {
   19|      0|        parser = parser.unchecked();
   20|  8.37k|    }
   21|  8.37k|    let mut reader = parser.parse();
   22|  16.7k|    for chunk in chunks {
   23|  8.37k|        reader.extend_from_slice(chunk);
   24|   848k|        while let Some(result) = reader.read_next() {
   25|   840k|            match result {
   26|   191k|                Ok(quad) => quads.push(quad),
   27|   648k|                Err(error) => errors.push(error.to_string()),
   28|       |            }
   29|       |        }
   30|       |    }
   31|  8.37k|    reader.end();
   32|  12.9k|    while let Some(result) = reader.read_next() {
   33|  4.55k|        match result {
   34|    189|            Ok(quad) => quads.push(quad),
   35|  4.36k|            Err(error) => errors.push(error.to_string()),
   36|       |        }
   37|       |    }
   38|  8.37k|    assert!(reader.is_end());
   39|  8.37k|    (
   40|  8.37k|        quads,
   41|  8.37k|        errors,
   42|  8.37k|        reader
   43|  8.37k|            .prefixes()
   44|  8.37k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
   45|  8.37k|            .collect(),
   46|  8.37k|    )
   47|  8.37k|}
_RINvCsbTqLqKzjopm_4trig5parseINtNtNtCscdEvteftVc2_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_run0EEB2_:
    8|  8.37k|fn parse<'a>(
    9|  8.37k|    chunks: impl IntoIterator<Item = &'a [u8]>,
   10|  8.37k|    unchecked: bool,
   11|  8.37k|) -> (Vec<Quad>, Vec<String>, Vec<(String, String)>) {
   12|  8.37k|    let mut quads = Vec::new();
   13|  8.37k|    let mut errors = Vec::new();
   14|  8.37k|    let mut parser = TriGParser::new()
   15|  8.37k|        .with_quoted_triples()
   16|  8.37k|        .with_base_iri("http://example.com/")
   17|  8.37k|        .unwrap();
   18|  8.37k|    if unchecked {
   19|      0|        parser = parser.unchecked();
   20|  8.37k|    }
   21|  8.37k|    let mut reader = parser.parse();
   22|   860k|    for chunk in chunks {
   23|   851k|        reader.extend_from_slice(chunk);
   24|  1.69M|        while let Some(result) = reader.read_next() {
   25|   840k|            match result {
   26|   191k|                Ok(quad) => quads.push(quad),
   27|   648k|                Err(error) => errors.push(error.to_string()),
   28|       |            }
   29|       |        }
   30|       |    }
   31|  8.37k|    reader.end();
   32|  12.9k|    while let Some(result) = reader.read_next() {
   33|  4.55k|        match result {
   34|    189|            Ok(quad) => quads.push(quad),
   35|  4.36k|            Err(error) => errors.push(error.to_string()),
   36|       |        }
   37|       |    }
   38|  8.37k|    assert!(reader.is_end());
   39|  8.37k|    (
   40|  8.37k|        quads,
   41|  8.37k|        errors,
   42|  8.37k|        reader
   43|  8.37k|            .prefixes()
   44|  8.37k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
   45|  8.37k|            .collect(),
   46|  8.37k|    )
   47|  8.37k|}
_RINvCsbTqLqKzjopm_4trig5parseINtNtNtCscdEvteftVc2_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_runs0_0EEB2_:
    8|  8.37k|fn parse<'a>(
    9|  8.37k|    chunks: impl IntoIterator<Item = &'a [u8]>,
   10|  8.37k|    unchecked: bool,
   11|  8.37k|) -> (Vec<Quad>, Vec<String>, Vec<(String, String)>) {
   12|  8.37k|    let mut quads = Vec::new();
   13|  8.37k|    let mut errors = Vec::new();
   14|  8.37k|    let mut parser = TriGParser::new()
   15|  8.37k|        .with_quoted_triples()
   16|  8.37k|        .with_base_iri("http://example.com/")
   17|  8.37k|        .unwrap();
   18|  8.37k|    if unchecked {
   19|  8.37k|        parser = parser.unchecked();
   20|  8.37k|    }
   21|  8.37k|    let mut reader = parser.parse();
   22|   860k|    for chunk in chunks {
   23|   851k|        reader.extend_from_slice(chunk);
   24|  1.68M|        while let Some(result) = reader.read_next() {
   25|   834k|            match result {
   26|   200k|                Ok(quad) => quads.push(quad),
   27|   633k|                Err(error) => errors.push(error.to_string()),
   28|       |            }
   29|       |        }
   30|       |    }
   31|  8.37k|    reader.end();
   32|  13.0k|    while let Some(result) = reader.read_next() {
   33|  4.67k|        match result {
   34|    208|            Ok(quad) => quads.push(quad),
   35|  4.46k|            Err(error) => errors.push(error.to_string()),
   36|       |        }
   37|       |    }
   38|  8.37k|    assert!(reader.is_end());
   39|  8.37k|    (
   40|  8.37k|        quads,
   41|  8.37k|        errors,
   42|  8.37k|        reader
   43|  8.37k|            .prefixes()
   44|  8.37k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
   45|  8.37k|            .collect(),
   46|  8.37k|    )
   47|  8.37k|}
_RNCINvCsbTqLqKzjopm_4trig5parseARShj1_E0B4_:
   44|  1.32k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
_RNCINvCsbTqLqKzjopm_4trig5parseINtNtNtCscdEvteftVc2_4core5slice4iter5SplithNCNvNvB4_1__19___libfuzzer_sys_run0EE0B4_:
   44|  1.32k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
_RNCINvCsbTqLqKzjopm_4trig5parseINtNtNtCscdEvteftVc2_4core5slice4iter5SplithNCNvNvB4_1__19___libfuzzer_sys_runs0_0EE0B4_:
   44|  1.56k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
_RNCNvNvCsbTqLqKzjopm_4trig1__19___libfuzzer_sys_run0B5_:
   87|  5.33M|    let (quads, errors, prefixes) = parse(data.split(|c| *c == 0xFF), false);
_RNCNvNvCsbTqLqKzjopm_4trig1__19___libfuzzer_sys_runs_0B5_:
   93|  5.33M|            .filter(|c| *c != 0xFF)
_RNCNvNvCsbTqLqKzjopm_4trig1__19___libfuzzer_sys_runs0_0B5_:
   98|  5.33M|    let (quads_unchecked, errors_unchecked, _) = parse(data.split(|c| *c == 0xFF), true);
_RNvCsbTqLqKzjopm_4trig24count_triple_blank_nodes:
   49|  1.98M|fn count_triple_blank_nodes(triple: &Triple) -> usize {
   50|  1.98M|    (match &triple.subject {
   51|    655|        Subject::BlankNode(_) => 1,
   52|  1.89M|        Subject::Triple(t) => count_triple_blank_nodes(t),
   53|  82.0k|        _ => 0,
   54|  1.98M|    }) + (match &triple.object {
   55|  1.17k|        Term::BlankNode(_) => 1,
   56|     54|        Term::Triple(t) => count_triple_blank_nodes(t),
   57|  1.97M|        _ => 0,
   58|       |    })
   59|  1.98M|}
_RNvCsbTqLqKzjopm_4trig22count_quad_blank_nodes:
   61|   192k|fn count_quad_blank_nodes(quad: &Quad) -> usize {
   62|   192k|    (match &quad.subject {
   63|  90.9k|        Subject::BlankNode(_) => 1,
   64|  80.7k|        Subject::Triple(t) => count_triple_blank_nodes(t),
   65|  20.4k|        _ => 0,
   66|   192k|    }) + (match &quad.object {
   67|  70.4k|        Term::BlankNode(_) => 1,
   68|  1.94k|        Term::Triple(t) => count_triple_blank_nodes(t),
   69|   119k|        _ => 0,
   70|   192k|    }) + usize::from(matches!(quad.graph_name, GraphName::BlankNode(_)))
   71|   192k|}
_RNvCsbTqLqKzjopm_4trig15serialize_quads:
   73|  8.37k|fn serialize_quads(quads: &[Quad], prefixes: Vec<(String, String)>) -> Vec<u8> {
   74|  8.37k|    let mut serializer = TriGSerializer::new();
   75|  9.70k|    for (prefix_name, prefix_iri) in prefixes {
   76|  1.32k|        serializer = serializer.with_prefix(prefix_name, prefix_iri).unwrap();
   77|  1.32k|    }
   78|  8.37k|    let mut writer = serializer.serialize_to_write(Vec::new());
   79|   200k|    for quad in quads {
   80|   192k|        writer.write_quad(quad).unwrap();
   81|   192k|    }
   82|  8.37k|    writer.finish().unwrap()
   83|  8.37k|}

_RNvMNtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCsbTqLqKzjopm_4trig:
   88|   281k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|   281k|        BlankNodeRef(match &self.0 {
   90|  8.26k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|   272k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|   272k|                id: *id,
   93|   272k|                str: str.as_str(),
   94|   272k|            },
   95|       |        })
   96|   281k|    }
_RNvMs1_NtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB5_12BlankNodeRef10into_ownedCsbTqLqKzjopm_4trig:
  207|  85.3k|    pub fn into_owned(self) -> BlankNode {
  208|  85.3k|        BlankNode(match self.0 {
  209|    929|            BlankNodeRefContent::Named(id) => BlankNodeContent::Named(id.to_owned()),
  210|  84.4k|            BlankNodeRefContent::Anonymous { id, .. } => BlankNodeContent::Anonymous {
  211|  84.4k|                id,
  212|  84.4k|                str: IdStr::new(u128::from_ne_bytes(id)),
  213|  84.4k|            },
  214|       |        })
  215|  85.3k|    }
_RNvMs7_NtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB5_5IdStr3newCsbTqLqKzjopm_4trig:
  258|  84.4k|    fn new(id: u128) -> Self {
  259|  84.4k|        let mut str = [0; 32];
  260|  84.4k|        write!(&mut str[..], "{id:x}").unwrap();
  261|  84.4k|        Self(str)
  262|  84.4k|    }
_RNvMs7_NtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB5_5IdStr6as_strCsbTqLqKzjopm_4trig:
  265|   272k|    fn as_str(&self) -> &str {
  266|   272k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|   272k|        str::from_utf8(&self.0[..len]).unwrap()
  268|   272k|    }
_RINvMNtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedReECs3Okv3MbnXN6_5oxttl:
   49|   174k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   50|   174k|        let id = id.into();
   51|   174k|        if let Some(numerical_id) = to_integer_id(&id) {
   52|   162k|            Self::new_from_unique_id(numerical_id)
   53|       |        } else {
   54|  11.5k|            Self(BlankNodeContent::Named(id))
   55|       |        }
   56|   174k|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idCs3Okv3MbnXN6_5oxttl:
   62|   162k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|   162k|        Self(BlankNodeContent::Anonymous {
   64|   162k|            id: id.to_ne_bytes(),
   65|   162k|            str: IdStr::new(id),
   66|   162k|        })
   67|   162k|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCs3Okv3MbnXN6_5oxttl:
   88|  1.72k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|  1.72k|        BlankNodeRef(match &self.0 {
   90|    439|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|  1.28k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|  1.28k|                id: *id,
   93|  1.28k|                str: str.as_str(),
   94|  1.28k|            },
   95|       |        })
   96|  1.72k|    }
_RNvMs1_NtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCs3Okv3MbnXN6_5oxttl:
  179|   157k|    pub const fn as_str(self) -> &'a str {
  180|   157k|        match self.0 {
  181|  2.48k|            BlankNodeRefContent::Named(id) => id,
  182|   155k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  183|       |        }
  184|   157k|    }
_RNvMs7_NtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB5_5IdStr3newCs3Okv3MbnXN6_5oxttl:
  258|   786k|    fn new(id: u128) -> Self {
  259|   786k|        let mut str = [0; 32];
  260|   786k|        write!(&mut str[..], "{id:x}").unwrap();
  261|   786k|        Self(str)
  262|   786k|    }
_RNvMs7_NtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB5_5IdStr6as_strCs3Okv3MbnXN6_5oxttl:
  265|   625k|    fn as_str(&self) -> &str {
  266|   625k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|   625k|        str::from_utf8(&self.0[..len]).unwrap()
  268|   625k|    }
_RNvNtCsg6vp76A8CLh_5oxrdf10blank_node13to_integer_idCs3Okv3MbnXN6_5oxttl:
  331|   174k|fn to_integer_id(id: &str) -> Option<u128> {
  332|   174k|    let digits = id.as_bytes();
  333|   174k|    let mut value: u128 = 0;
  334|   174k|    if let None | Some(b'0') = digits.first() {
  335|  6.66k|        return None; // No empty string or leading zeros
  336|   167k|    }
  337|  5.14M|    for digit in digits {
  338|  4.98M|        value = value.checked_mul(16)?.checked_add(
  339|  4.98M|            match *digit {
  340|  4.98M|                b'0'..=b'9' => digit - b'0',
  341|  1.96M|                b'a'..=b'f' => digit - b'a' + 10,
  342|  4.65k|                _ => return None,
  343|       |            }
  344|  4.97M|            .into(),
  345|      0|        )?;
  346|       |    }
  347|   162k|    Some(value)
  348|   174k|}
_RNvXs0_NtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCscdEvteftVc2_4core7default7Default7defaultCs3Okv3MbnXN6_5oxttl:
  109|   249k|    fn default() -> Self {
  110|       |        // We ensure the ID does not start with a number to be also valid with RDF/XML
  111|   623k|        loop {
  112|   623k|            let id = random();
  113|   623k|            let str = IdStr::new(id);
  114|   623k|            if matches!(str.as_str().as_bytes().first(), Some(b'a'..=b'f')) {
  115|   249k|                return Self(BlankNodeContent::Anonymous {
  116|   249k|                    id: id.to_ne_bytes(),
  117|   249k|                    str,
  118|   249k|                });
  119|   373k|            }
  120|       |        }
  121|   249k|    }
_RNvXs2_NtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtCs3Okv3MbnXN6_5oxttl:
  220|   157k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  221|   157k|        write!(f, "_:{}", self.as_str())
  222|   157k|    }
_RNCNvMs7_NtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  266|  28.8M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
_RNvMNtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idB4_:
   62|  11.6k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|  11.6k|        Self(BlankNodeContent::Anonymous {
   64|  11.6k|            id: id.to_ne_bytes(),
   65|  11.6k|            str: IdStr::new(id),
   66|  11.6k|        })
   67|  11.6k|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB2_9BlankNode6as_refB4_:
   88|  15.2k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|  15.2k|        BlankNodeRef(match &self.0 {
   90|    304|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|  14.9k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|  14.9k|                id: *id,
   93|  14.9k|                str: str.as_str(),
   94|  14.9k|            },
   95|       |        })
   96|  15.2k|    }
_RNvMs1_NtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB5_12BlankNodeRef13new_uncheckedB7_:
  166|  6.38k|    pub fn new_unchecked(id: &'a str) -> Self {
  167|  6.38k|        if let Some(numerical_id) = to_integer_id(id) {
  168|  6.38k|            Self(BlankNodeRefContent::Anonymous {
  169|  6.38k|                id: numerical_id.to_ne_bytes(),
  170|  6.38k|                str: id,
  171|  6.38k|            })
  172|       |        } else {
  173|      0|            Self(BlankNodeRefContent::Named(id))
  174|       |        }
  175|  6.38k|    }
_RNvMs1_NtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strB7_:
  179|  23.6k|    pub const fn as_str(self) -> &'a str {
  180|  23.6k|        match self.0 {
  181|  1.60k|            BlankNodeRefContent::Named(id) => id,
  182|  22.0k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  183|       |        }
  184|  23.6k|    }
_RNvMs1_NtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB5_12BlankNodeRef9unique_idB7_:
  199|  34.4k|    pub const fn unique_id(&self) -> Option<u128> {
  200|  34.4k|        match self.0 {
  201|  1.60k|            BlankNodeRefContent::Named(_) => None,
  202|  32.8k|            BlankNodeRefContent::Anonymous { id, .. } => Some(u128::from_ne_bytes(id)),
  203|       |        }
  204|  34.4k|    }
_RNvMs1_NtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB5_12BlankNodeRef10into_ownedB7_:
  207|  2.00k|    pub fn into_owned(self) -> BlankNode {
  208|  2.00k|        BlankNode(match self.0 {
  209|    304|            BlankNodeRefContent::Named(id) => BlankNodeContent::Named(id.to_owned()),
  210|  1.69k|            BlankNodeRefContent::Anonymous { id, .. } => BlankNodeContent::Anonymous {
  211|  1.69k|                id,
  212|  1.69k|                str: IdStr::new(u128::from_ne_bytes(id)),
  213|  1.69k|            },
  214|       |        })
  215|  2.00k|    }
_RNvMs7_NtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB5_5IdStr3newB7_:
  258|  13.3k|    fn new(id: u128) -> Self {
  259|  13.3k|        let mut str = [0; 32];
  260|  13.3k|        write!(&mut str[..], "{id:x}").unwrap();
  261|  13.3k|        Self(str)
  262|  13.3k|    }
_RNvMs7_NtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB5_5IdStr6as_strB7_:
  265|  14.9k|    fn as_str(&self) -> &str {
  266|  14.9k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|  14.9k|        str::from_utf8(&self.0[..len]).unwrap()
  268|  14.9k|    }
_RNvNtCsg6vp76A8CLh_5oxrdf10blank_node13to_integer_idB3_:
  331|  6.38k|fn to_integer_id(id: &str) -> Option<u128> {
  332|  6.38k|    let digits = id.as_bytes();
  333|  6.38k|    let mut value: u128 = 0;
  334|  6.38k|    if let None | Some(b'0') = digits.first() {
  335|      0|        return None; // No empty string or leading zeros
  336|  6.38k|    }
  337|   108k|    for digit in digits {
  338|   101k|        value = value.checked_mul(16)?.checked_add(
  339|   101k|            match *digit {
  340|   101k|                b'0'..=b'9' => digit - b'0',
  341|  36.4k|                b'a'..=b'f' => digit - b'a' + 10,
  342|      0|                _ => return None,
  343|       |            }
  344|   101k|            .into(),
  345|      0|        )?;
  346|       |    }
  347|  6.38k|    Some(value)
  348|  6.38k|}

_RINvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB3_7Dataset6insertRNtNtB5_6triple4QuadECsbTqLqKzjopm_4trig:
  360|   186k|    pub fn insert<'a>(&mut self, quad: impl Into<QuadRef<'a>>) -> bool {
  361|   186k|        let quad = self.encode_quad(quad.into());
  362|   186k|        self.insert_encoded(quad)
  363|   186k|    }
_RINvXs3_NtCsg6vp76A8CLh_5oxrdf7datasetNtB6_7DatasetINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect12FromIteratorRNtNtB8_6triple4QuadE9from_iterINtNtNtBW_5slice4iter4IterB1O_EECsbTqLqKzjopm_4trig:
  965|  5.46k|    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self {
  966|  5.46k|        let mut g = Self::new();
  967|  5.46k|        g.extend(iter);
  968|  5.46k|        g
  969|  5.46k|    }
_RINvXs5_NtCsg6vp76A8CLh_5oxrdf7datasetNtB6_7DatasetINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendRNtNtB8_6triple4QuadE6extendINtNtNtBW_5slice4iter4IterB1H_EECsbTqLqKzjopm_4trig:
  981|  5.46k|    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  982|   191k|        for t in iter {
  983|   186k|            self.insert(t);
  984|   186k|        }
  985|  5.46k|    }
_RINvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB3_7Dataset8containsNtNtB5_6triple7QuadRefEB5_:
  341|  84.5k|    pub fn contains<'a>(&self, quad: impl Into<QuadRef<'a>>) -> bool {
  342|  84.5k|        if let Some(q) = self.encoded_quad(quad.into()) {
  343|  84.5k|            self.spog.contains(&q)
  344|       |        } else {
  345|      0|            false
  346|       |        }
  347|  84.5k|    }
_RINvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB3_7Dataset18encoded_named_nodeNtNtB5_10named_node12NamedNodeRefEB5_:
  454|  84.5k|    pub(super) fn encoded_named_node<'a>(
  455|  84.5k|        &self,
  456|  84.5k|        node: impl Into<NamedNodeRef<'a>>,
  457|  84.5k|    ) -> Option<InternedNamedNode> {
  458|  84.5k|        InternedNamedNode::encoded_from(node.into(), &self.interner)
  459|  84.5k|    }
_RINvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB3_7Dataset15encoded_subjectNtNtB5_6triple10SubjectRefEB5_:
  461|  84.5k|    pub(super) fn encoded_subject<'a>(
  462|  84.5k|        &self,
  463|  84.5k|        node: impl Into<SubjectRef<'a>>,
  464|  84.5k|    ) -> Option<InternedSubject> {
  465|  84.5k|        InternedSubject::encoded_from(node.into(), &self.interner)
  466|  84.5k|    }
_RINvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB3_7Dataset12encoded_termNtNtB5_6triple7TermRefEB5_:
  468|  84.5k|    pub(super) fn encoded_term<'a>(&self, term: impl Into<TermRef<'a>>) -> Option<InternedTerm> {
  469|  84.5k|        InternedTerm::encoded_from(term.into(), &self.interner)
  470|  84.5k|    }
_RINvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB3_7Dataset18encoded_graph_nameNtNtB5_6triple12GraphNameRefEB5_:
  472|  84.5k|    pub(super) fn encoded_graph_name<'a>(
  473|  84.5k|        &self,
  474|  84.5k|        graph_name: impl Into<GraphNameRef<'a>>,
  475|  84.5k|    ) -> Option<InternedGraphName> {
  476|  84.5k|        InternedGraphName::encoded_from(graph_name.into(), &self.interner)
  477|  84.5k|    }
_RNCNvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB4_7Dataset33canonicalize_interned_blank_nodes0B6_:
  571|  11.6k|                    bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
_RNCNvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB4_7Dataset33canonicalize_interned_blank_nodess_0B6_:
  576|  11.6k|                    .map(|(from, to)| (from, BlankNode::new_from_unique_id(to.into())))
_RNCNvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB4_7Dataset11hash_bnodes0B6_:
  680|  48.7k|            .map(|bnode| (*bnode, true))
_RNCNvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB4_7Dataset11hash_bnodess_0B6_:
  715|  39.7k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));
_RINvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB3_7Dataset10hash_tupleNtNtB5_10named_node12NamedNodeRefEB5_:
  803|   180k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|   180k|        let mut hasher = DefaultHasher::new();
  805|   180k|        v.hash(&mut hasher);
  806|   180k|        hasher.finish()
  807|   180k|    }
_RINvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB3_7Dataset10hash_tupleNtNtB5_7literal10LiteralRefEB5_:
  803|  66.8k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|  66.8k|        let mut hasher = DefaultHasher::new();
  805|  66.8k|        v.hash(&mut hasher);
  806|  66.8k|        hasher.finish()
  807|  66.8k|    }
_RINvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB3_7Dataset10hash_tupleTRINtNtCs3OstG5Tqy1X_5alloc3vec3VecTyyyyEEyEEB5_:
  803|  97.6k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|  97.6k|        let mut hasher = DefaultHasher::new();
  805|  97.6k|        v.hash(&mut hasher);
  806|  97.6k|        hasher.finish()
  807|  97.6k|    }
_RINvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB3_7Dataset10hash_tupleTylEEB5_:
  803|  10.1k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|  10.1k|        let mut hasher = DefaultHasher::new();
  805|  10.1k|        v.hash(&mut hasher);
  806|  10.1k|        hasher.finish()
  807|  10.1k|    }
_RINvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB3_7Dataset10hash_tupleTyyyEEB5_:
  803|  18.9k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|  18.9k|        let mut hasher = DefaultHasher::new();
  805|  18.9k|        v.hash(&mut hasher);
  806|  18.9k|        hasher.finish()
  807|  18.9k|    }
_RNCNvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB4_7Dataset11distinguish0B6_:
  815|  42.9k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
_RNCNvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB4_7Dataset11distinguishs_0B6_:
  815|  42.9k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
_RNCNvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB4_7Dataset11distinguishs0_0B6_:
  819|  10.1k|                .map(|b| {
  820|  10.1k|                    let mut hash_prime = hash.clone();
  821|  10.1k|                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  822|  10.1k|                    let (hash_prime_prime, partition_prime) =
  823|  10.1k|                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  824|  10.1k|                    self.distinguish(hash_prime_prime, &partition_prime, quads_per_blank_node)
  825|  10.1k|                })
_RNCNvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB4_7Dataset11distinguishs1_0B6_:
  826|  5.62k|                .reduce(|a, b| {
  827|  5.62k|                    let mut a_hashes = a.values().collect::<Vec<_>>();
  828|  5.62k|                    a_hashes.sort();
  829|  5.62k|                    let mut b_hashes = a.values().collect::<Vec<_>>();
  830|  5.62k|                    b_hashes.sort();
  831|  5.62k|                    if a_hashes <= b_hashes {
  832|  5.62k|                        a
  833|       |                    } else {
  834|      0|                        b
  835|       |                    }
  836|  5.62k|                })
_RNCNvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB4_7Dataset15map_blank_nodes0B6_:
  856|   169k|            .map(|(s, p, o, g)| {
  857|   169k|                (
  858|   169k|                    match s {
  859|  17.8k|                        InternedSubject::NamedNode(_) => s,
  860|  9.66k|                        InternedSubject::BlankNode(bnode) => {
  861|  9.66k|                            InternedSubject::BlankNode(InternedBlankNode::encoded_into(
  862|  9.66k|                                bnode_mapping[&bnode].as_ref(),
  863|  9.66k|                                &mut self.interner,
  864|  9.66k|                            ))
  865|       |                        }
  866|       |                        #[cfg(feature = "rdf-star")]
  867|   141k|                        InternedSubject::Triple(triple) => {
  868|   141k|                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  869|   141k|                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  870|   141k|                                &mut self.interner,
  871|   141k|                            )))
  872|       |                        }
  873|       |                    },
  874|   169k|                    p,
  875|   169k|                    match o {
  876|   164k|                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  877|  2.48k|                        InternedTerm::BlankNode(bnode) => {
  878|  2.48k|                            InternedTerm::BlankNode(InternedBlankNode::encoded_into(
  879|  2.48k|                                bnode_mapping[&bnode].as_ref(),
  880|  2.48k|                                &mut self.interner,
  881|  2.48k|                            ))
  882|       |                        }
  883|       |                        #[cfg(feature = "rdf-star")]
  884|  1.67k|                        InternedTerm::Triple(triple) => {
  885|  1.67k|                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  886|  1.67k|                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  887|  1.67k|                                &mut self.interner,
  888|  1.67k|                            )))
  889|       |                        }
  890|       |                    },
  891|   169k|                    match g {
  892|   168k|                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  893|    616|                        InternedGraphName::BlankNode(bnode) => {
  894|    616|                            InternedGraphName::BlankNode(InternedBlankNode::encoded_into(
  895|    616|                                bnode_mapping[&bnode].as_ref(),
  896|    616|                                &mut self.interner,
  897|    616|                            ))
  898|       |                        }
  899|       |                    },
  900|       |                )
  901|   169k|            })
_RNCNvXsg_NtCsg6vp76A8CLh_5oxrdf7datasetNtB7_4IterNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0B9_:
 1554|  84.5k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))
_RNvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB2_7Dataset3new:
  109|  5.46k|    pub fn new() -> Self {
  110|  5.46k|        Self::default()
  111|  5.46k|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB2_7Dataset4iter:
  169|  2.73k|    pub fn iter(&self) -> Iter<'_> {
  170|  2.73k|        let iter = self.spog.iter();
  171|  2.73k|        Iter {
  172|  2.73k|            dataset: self,
  173|  2.73k|            inner: iter,
  174|  2.73k|        }
  175|  2.73k|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB2_7Dataset3len:
  350|  5.46k|    pub fn len(&self) -> usize {
  351|  5.46k|        self.gspo.len()
  352|  5.46k|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB2_7Dataset14insert_encoded:
  365|   355k|    fn insert_encoded(
  366|   355k|        &mut self,
  367|   355k|        quad: (
  368|   355k|            InternedSubject,
  369|   355k|            InternedNamedNode,
  370|   355k|            InternedTerm,
  371|   355k|            InternedGraphName,
  372|   355k|        ),
  373|   355k|    ) -> bool {
  374|   355k|        let (s, p, o, g) = quad;
  375|   355k|        self.gspo.insert((g.clone(), s.clone(), p, o.clone()));
  376|   355k|        self.gpos.insert((g.clone(), p, o.clone(), s.clone()));
  377|   355k|        self.gosp.insert((g.clone(), o.clone(), s.clone(), p));
  378|   355k|        self.spog.insert((s.clone(), p, o.clone(), g.clone()));
  379|   355k|        self.posg.insert((p, o.clone(), s.clone(), g.clone()));
  380|   355k|        self.ospg.insert((o, s, p, g))
  381|   355k|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB2_7Dataset5clear:
  411|  5.46k|    pub fn clear(&mut self) {
  412|  5.46k|        self.gspo.clear();
  413|  5.46k|        self.gpos.clear();
  414|  5.46k|        self.gosp.clear();
  415|  5.46k|        self.spog.clear();
  416|  5.46k|        self.posg.clear();
  417|  5.46k|        self.ospg.clear();
  418|  5.46k|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB2_7Dataset11encode_quad:
  420|   186k|    fn encode_quad(
  421|   186k|        &mut self,
  422|   186k|        quad: QuadRef<'_>,
  423|   186k|    ) -> (
  424|   186k|        InternedSubject,
  425|   186k|        InternedNamedNode,
  426|   186k|        InternedTerm,
  427|   186k|        InternedGraphName,
  428|   186k|    ) {
  429|   186k|        (
  430|   186k|            InternedSubject::encoded_into(quad.subject, &mut self.interner),
  431|   186k|            InternedNamedNode::encoded_into(quad.predicate, &mut self.interner),
  432|   186k|            InternedTerm::encoded_into(quad.object, &mut self.interner),
  433|   186k|            InternedGraphName::encoded_into(quad.graph_name, &mut self.interner),
  434|   186k|        )
  435|   186k|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB2_7Dataset12encoded_quad:
  437|  84.5k|    fn encoded_quad(
  438|  84.5k|        &self,
  439|  84.5k|        quad: QuadRef<'_>,
  440|  84.5k|    ) -> Option<(
  441|  84.5k|        InternedSubject,
  442|  84.5k|        InternedNamedNode,
  443|  84.5k|        InternedTerm,
  444|  84.5k|        InternedGraphName,
  445|  84.5k|    )> {
  446|  84.5k|        Some((
  447|  84.5k|            self.encoded_subject(quad.subject)?,
  448|  84.5k|            self.encoded_named_node(quad.predicate)?,
  449|  84.5k|            self.encoded_term(quad.object)?,
  450|  84.5k|            self.encoded_graph_name(quad.graph_name)?,
  451|       |        ))
  452|  84.5k|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB2_7Dataset11decode_spog:
  479|  84.5k|    fn decode_spog(
  480|  84.5k|        &self,
  481|  84.5k|        quad: (
  482|  84.5k|            &InternedSubject,
  483|  84.5k|            &InternedNamedNode,
  484|  84.5k|            &InternedTerm,
  485|  84.5k|            &InternedGraphName,
  486|  84.5k|        ),
  487|  84.5k|    ) -> QuadRef<'_> {
  488|  84.5k|        QuadRef {
  489|  84.5k|            subject: quad.0.decode_from(&self.interner),
  490|  84.5k|            predicate: quad.1.decode_from(&self.interner),
  491|  84.5k|            object: quad.2.decode_from(&self.interner),
  492|  84.5k|            graph_name: quad.3.decode_from(&self.interner),
  493|  84.5k|        }
  494|  84.5k|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB2_7Dataset12canonicalize:
  539|  5.46k|    pub fn canonicalize(&mut self, algorithm: CanonicalizationAlgorithm) {
  540|  5.46k|        let bnode_mapping = self.canonicalize_interned_blank_nodes(algorithm);
  541|  5.46k|        let new_quads = self.map_blank_nodes(&bnode_mapping);
  542|  5.46k|        self.clear();
  543|   174k|        for quad in new_quads {
  544|   169k|            self.insert_encoded(quad);
  545|   169k|        }
  546|  5.46k|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB2_7Dataset33canonicalize_interned_blank_nodes:
  562|  5.46k|    fn canonicalize_interned_blank_nodes(
  563|  5.46k|        &self,
  564|  5.46k|        algorithm: CanonicalizationAlgorithm,
  565|  5.46k|    ) -> HashMap<InternedBlankNode, BlankNode> {
  566|  5.46k|        match algorithm {
  567|  5.46k|            CanonicalizationAlgorithm::Unstable => {
  568|  5.46k|                let bnodes = self.blank_nodes();
  569|  5.46k|                let quads_per_blank_node = self.quads_per_blank_nodes();
  570|  5.46k|                let (hash, partition) = self.hash_bnodes(
  571|  5.46k|                    bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
  572|  5.46k|                    &quads_per_blank_node,
  573|  5.46k|                );
  574|  5.46k|                self.distinguish(hash, &partition, &quads_per_blank_node)
  575|  5.46k|                    .into_iter()
  576|  5.46k|                    .map(|(from, to)| (from, BlankNode::new_from_unique_id(to.into())))
  577|  5.46k|                    .collect()
  578|  5.46k|            }
  579|  5.46k|        }
  580|  5.46k|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB2_7Dataset11blank_nodes:
  582|  5.46k|    fn blank_nodes(&self) -> HashSet<InternedBlankNode> {
  583|  5.46k|        let mut bnodes = HashSet::new();
  584|   174k|        for (g, s, _, o) in &self.gspo {
  585|   169k|            if let InternedSubject::BlankNode(bnode) = s {
  586|  9.66k|                bnodes.insert(*bnode);
  587|   159k|            }
  588|       |            #[cfg(feature = "rdf-star")]
  589|   169k|            if let InternedSubject::Triple(triple) = s {
  590|   141k|                Self::triple_blank_nodes(triple, &mut bnodes);
  591|   141k|            }
  592|   169k|            if let InternedTerm::BlankNode(bnode) = o {
  593|  2.48k|                bnodes.insert(*bnode);
  594|   166k|            }
  595|       |            #[cfg(feature = "rdf-star")]
  596|   169k|            if let InternedTerm::Triple(triple) = o {
  597|  1.67k|                Self::triple_blank_nodes(triple, &mut bnodes);
  598|   167k|            }
  599|   169k|            if let InternedGraphName::BlankNode(bnode) = g {
  600|    616|                bnodes.insert(*bnode);
  601|   168k|            }
  602|       |        }
  603|  5.46k|        bnodes
  604|  5.46k|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB2_7Dataset18triple_blank_nodes:
  607|  3.61M|    fn triple_blank_nodes(triple: &InternedTriple, bnodes: &mut HashSet<InternedBlankNode>) {
  608|  3.61M|        if let InternedSubject::BlankNode(bnode) = &triple.subject {
  609|    440|            bnodes.insert(*bnode);
  610|  3.61M|        } else if let InternedSubject::Triple(t) = &triple.subject {
  611|  3.46M|            Self::triple_blank_nodes(t, bnodes);
  612|  3.46M|        }
  613|  3.61M|        if let InternedTerm::BlankNode(bnode) = &triple.object {
  614|    560|            bnodes.insert(*bnode);
  615|  3.61M|        } else if let InternedTerm::Triple(t) = &triple.object {
  616|     72|            Self::triple_blank_nodes(t, bnodes);
  617|  3.61M|        }
  618|  3.61M|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB2_7Dataset21quads_per_blank_nodes:
  620|  5.46k|    fn quads_per_blank_nodes(&self) -> QuadsPerBlankNode {
  621|  5.46k|        let mut map: HashMap<_, Vec<_>> = HashMap::new();
  622|   174k|        for quad in &self.spog {
  623|   169k|            if let InternedSubject::BlankNode(bnode) = &quad.0 {
  624|  9.66k|                map.entry(*bnode).or_default().push(quad.clone());
  625|   159k|            }
  626|       |            #[cfg(feature = "rdf-star")]
  627|   169k|            if let InternedSubject::Triple(t) = &quad.0 {
  628|   141k|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  629|   141k|            }
  630|   169k|            if let InternedTerm::BlankNode(bnode) = &quad.2 {
  631|  2.48k|                map.entry(*bnode).or_default().push(quad.clone());
  632|   166k|            }
  633|       |            #[cfg(feature = "rdf-star")]
  634|   169k|            if let InternedTerm::Triple(t) = &quad.2 {
  635|  1.67k|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  636|   167k|            }
  637|   169k|            if let InternedGraphName::BlankNode(bnode) = &quad.3 {
  638|    616|                map.entry(*bnode).or_default().push(quad.clone());
  639|   168k|            }
  640|       |        }
  641|  5.46k|        map
  642|  5.46k|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB2_7Dataset55add_quad_with_quoted_triple_to_quad_per_blank_nodes_map:
  645|  3.61M|    fn add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(
  646|  3.61M|        quad: &(
  647|  3.61M|            InternedSubject,
  648|  3.61M|            InternedNamedNode,
  649|  3.61M|            InternedTerm,
  650|  3.61M|            InternedGraphName,
  651|  3.61M|        ),
  652|  3.61M|        triple: &InternedTriple,
  653|  3.61M|        map: &mut QuadsPerBlankNode,
  654|  3.61M|    ) {
  655|  3.61M|        if let InternedSubject::BlankNode(bnode) = &triple.subject {
  656|    440|            map.entry(*bnode).or_default().push(quad.clone());
  657|  3.61M|        }
  658|  3.61M|        if let InternedSubject::Triple(t) = &triple.subject {
  659|  3.46M|            Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, map);
  660|  3.46M|        }
  661|  3.61M|        if let InternedTerm::BlankNode(bnode) = &triple.object {
  662|    560|            map.entry(*bnode).or_default().push(quad.clone());
  663|  3.61M|        }
  664|  3.61M|        if let InternedTerm::Triple(t) = &triple.object {
  665|     72|            Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, map);
  666|  3.61M|        }
  667|  3.61M|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB2_7Dataset11hash_bnodes:
  669|  15.5k|    fn hash_bnodes(
  670|  15.5k|        &self,
  671|  15.5k|        mut hashes: HashMap<InternedBlankNode, u64>,
  672|  15.5k|        quads_per_blank_node: &QuadsPerBlankNode,
  673|  15.5k|    ) -> (
  674|  15.5k|        HashMap<InternedBlankNode, u64>,
  675|  15.5k|        Vec<(u64, Vec<InternedBlankNode>)>,
  676|  15.5k|    ) {
  677|  15.5k|        let mut to_hash = Vec::new();
  678|  15.5k|        let mut to_do = hashes
  679|  15.5k|            .keys()
  680|  15.5k|            .map(|bnode| (*bnode, true))
  681|  15.5k|            .collect::<HashMap<_, _>>();
  682|  15.5k|        let mut partition = HashMap::<_, Vec<_>>::with_capacity(hashes.len());
  683|  15.5k|        let mut old_partition_count = usize::MAX;
  684|  46.7k|        while old_partition_count != partition.len() {
  685|  31.1k|            old_partition_count = partition.len();
  686|  31.1k|            partition.clear();
  687|  31.1k|            let mut new_hashes = hashes.clone();
  688|  97.6k|            for bnode in hashes.keys() {
  689|  97.6k|                let hash = if to_do.contains_key(bnode) {
  690|   102k|                    for (s, p, o, g) in &quads_per_blank_node[bnode] {
  691|   102k|                        to_hash.push((
  692|   102k|                            self.hash_subject(s, *bnode, &hashes),
  693|   102k|                            self.hash_named_node(*p),
  694|   102k|                            self.hash_term(o, *bnode, &hashes),
  695|   102k|                            self.hash_graph_name(g, *bnode, &hashes),
  696|   102k|                        ));
  697|   102k|                    }
  698|  97.6k|                    to_hash.sort_unstable();
  699|  97.6k|                    let hash = Self::hash_tuple((&to_hash, hashes[bnode]));
  700|  97.6k|                    to_hash.clear();
  701|  97.6k|                    if hash == hashes[bnode] {
  702|      0|                        to_do.insert(*bnode, false);
  703|  97.6k|                    } else {
  704|  97.6k|                        new_hashes.insert(*bnode, hash);
  705|  97.6k|                    }
  706|  97.6k|                    hash
  707|       |                } else {
  708|      0|                    hashes[bnode]
  709|       |                };
  710|  97.6k|                partition.entry(hash).or_default().push(*bnode);
  711|       |            }
  712|  31.1k|            hashes = new_hashes;
  713|       |        }
  714|  15.5k|        let mut partition: Vec<_> = partition.into_iter().collect();
  715|  15.5k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));
  716|  15.5k|        (hashes, partition)
  717|  15.5k|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB2_7Dataset15hash_named_node:
  719|   121k|    fn hash_named_node(&self, node: InternedNamedNode) -> u64 {
  720|   121k|        Self::hash_tuple(node.decode_from(&self.interner))
  721|   121k|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB2_7Dataset15hash_blank_node:
  723|   117k|    fn hash_blank_node(
  724|   117k|        node: InternedBlankNode,
  725|   117k|        current_blank_node: InternedBlankNode,
  726|   117k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  727|   117k|    ) -> u64 {
  728|   117k|        if node == current_blank_node {
  729|   102k|            u64::MAX
  730|       |        } else {
  731|  15.0k|            bnodes_hash[&node]
  732|       |        }
  733|   117k|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB2_7Dataset12hash_subject:
  735|   121k|    fn hash_subject(
  736|   121k|        &self,
  737|   121k|        node: &InternedSubject,
  738|   121k|        current_blank_node: InternedBlankNode,
  739|   121k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  740|   121k|    ) -> u64 {
  741|   121k|        match node {
  742|  41.1k|            InternedSubject::NamedNode(node) => Self::hash_tuple(node.decode_from(&self.interner)),
  743|  76.0k|            InternedSubject::BlankNode(bnode) => {
  744|  76.0k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  745|       |            }
  746|       |            #[cfg(feature = "rdf-star")]
  747|  4.35k|            InternedSubject::Triple(triple) => {
  748|  4.35k|                self.hash_triple(triple, current_blank_node, bnodes_hash)
  749|       |            }
  750|       |        }
  751|   121k|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB2_7Dataset9hash_term:
  753|   121k|    fn hash_term(
  754|   121k|        &self,
  755|   121k|        term: &InternedTerm,
  756|   121k|        current_blank_node: InternedBlankNode,
  757|   121k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  758|   121k|    ) -> u64 {
  759|   121k|        match term {
  760|  6.64k|            InternedTerm::NamedNode(node) => Self::hash_tuple(node.decode_from(&self.interner)),
  761|  33.4k|            InternedTerm::BlankNode(bnode) => {
  762|  33.4k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  763|       |            }
  764|  66.8k|            InternedTerm::Literal(literal) => Self::hash_tuple(literal.decode_from(&self.interner)),
  765|       |            #[cfg(feature = "rdf-star")]
  766|  14.5k|            InternedTerm::Triple(triple) => {
  767|  14.5k|                self.hash_triple(triple, current_blank_node, bnodes_hash)
  768|       |            }
  769|       |        }
  770|   121k|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB2_7Dataset15hash_graph_name:
  772|   102k|    fn hash_graph_name(
  773|   102k|        &self,
  774|   102k|        graph_name: &InternedGraphName,
  775|   102k|        current_blank_node: InternedBlankNode,
  776|   102k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  777|   102k|    ) -> u64 {
  778|   102k|        match graph_name {
  779|  11.3k|            InternedGraphName::NamedNode(node) => {
  780|  11.3k|                Self::hash_tuple(node.decode_from(&self.interner))
  781|       |            }
  782|  8.23k|            InternedGraphName::BlankNode(bnode) => {
  783|  8.23k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  784|       |            }
  785|  83.0k|            InternedGraphName::DefaultGraph => 0,
  786|       |        }
  787|   102k|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB2_7Dataset11hash_triple:
  790|  18.9k|    fn hash_triple(
  791|  18.9k|        &self,
  792|  18.9k|        triple: &InternedTriple,
  793|  18.9k|        current_blank_node: InternedBlankNode,
  794|  18.9k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  795|  18.9k|    ) -> u64 {
  796|  18.9k|        Self::hash_tuple((
  797|  18.9k|            self.hash_subject(&triple.subject, current_blank_node, bnodes_hash),
  798|  18.9k|            self.hash_named_node(triple.predicate),
  799|  18.9k|            self.hash_term(&triple.object, current_blank_node, bnodes_hash),
  800|  18.9k|        ))
  801|  18.9k|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB2_7Dataset11distinguish:
  809|  15.5k|    fn distinguish(
  810|  15.5k|        &self,
  811|  15.5k|        hash: HashMap<InternedBlankNode, u64>,
  812|  15.5k|        partition: &[(u64, Vec<InternedBlankNode>)],
  813|  15.5k|        quads_per_blank_node: &QuadsPerBlankNode,
  814|  15.5k|    ) -> HashMap<InternedBlankNode, u64> {
  815|  15.5k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
  816|  15.5k|        if let Some(b_prime) = b_prime {
  817|  4.48k|            b_prime
  818|  4.48k|                .iter()
  819|  4.48k|                .map(|b| {
  820|       |                    let mut hash_prime = hash.clone();
  821|       |                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  822|       |                    let (hash_prime_prime, partition_prime) =
  823|       |                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  824|       |                    self.distinguish(hash_prime_prime, &partition_prime, quads_per_blank_node)
  825|  4.48k|                })
  826|  4.48k|                .reduce(|a, b| {
  827|       |                    let mut a_hashes = a.values().collect::<Vec<_>>();
  828|       |                    a_hashes.sort();
  829|       |                    let mut b_hashes = a.values().collect::<Vec<_>>();
  830|       |                    b_hashes.sort();
  831|       |                    if a_hashes <= b_hashes {
  832|       |                        a
  833|       |                    } else {
  834|       |                        b
  835|       |                    }
  836|  4.48k|                })
  837|  4.48k|                .unwrap_or_default()
  838|       |        } else {
  839|  11.0k|            hash
  840|       |        }
  841|  15.5k|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB2_7Dataset15map_blank_nodes:
  844|  5.46k|    fn map_blank_nodes(
  845|  5.46k|        &mut self,
  846|  5.46k|        bnode_mapping: &HashMap<InternedBlankNode, BlankNode>,
  847|  5.46k|    ) -> Vec<(
  848|  5.46k|        InternedSubject,
  849|  5.46k|        InternedNamedNode,
  850|  5.46k|        InternedTerm,
  851|  5.46k|        InternedGraphName,
  852|  5.46k|    )> {
  853|  5.46k|        let old_quads: Vec<_> = self.spog.iter().cloned().collect();
  854|  5.46k|        old_quads
  855|  5.46k|            .into_iter()
  856|  5.46k|            .map(|(s, p, o, g)| {
  857|       |                (
  858|       |                    match s {
  859|       |                        InternedSubject::NamedNode(_) => s,
  860|       |                        InternedSubject::BlankNode(bnode) => {
  861|       |                            InternedSubject::BlankNode(InternedBlankNode::encoded_into(
  862|       |                                bnode_mapping[&bnode].as_ref(),
  863|       |                                &mut self.interner,
  864|       |                            ))
  865|       |                        }
  866|       |                        #[cfg(feature = "rdf-star")]
  867|       |                        InternedSubject::Triple(triple) => {
  868|       |                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  869|       |                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  870|       |                                &mut self.interner,
  871|       |                            )))
  872|       |                        }
  873|       |                    },
  874|       |                    p,
  875|       |                    match o {
  876|       |                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  877|       |                        InternedTerm::BlankNode(bnode) => {
  878|       |                            InternedTerm::BlankNode(InternedBlankNode::encoded_into(
  879|       |                                bnode_mapping[&bnode].as_ref(),
  880|       |                                &mut self.interner,
  881|       |                            ))
  882|       |                        }
  883|       |                        #[cfg(feature = "rdf-star")]
  884|       |                        InternedTerm::Triple(triple) => {
  885|       |                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  886|       |                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  887|       |                                &mut self.interner,
  888|       |                            )))
  889|       |                        }
  890|       |                    },
  891|       |                    match g {
  892|       |                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  893|       |                        InternedGraphName::BlankNode(bnode) => {
  894|       |                            InternedGraphName::BlankNode(InternedBlankNode::encoded_into(
  895|       |                                bnode_mapping[&bnode].as_ref(),
  896|       |                                &mut self.interner,
  897|       |                            ))
  898|       |                        }
  899|       |                    },
  900|       |                )
  901|  5.46k|            })
  902|  5.46k|            .collect()
  903|  5.46k|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf7datasetNtB2_7Dataset22map_triple_blank_nodes:
  906|  3.61M|    fn map_triple_blank_nodes(
  907|  3.61M|        &mut self,
  908|  3.61M|        triple: &InternedTriple,
  909|  3.61M|        bnode_mapping: &HashMap<InternedBlankNode, BlankNode>,
  910|  3.61M|    ) -> Triple {
  911|       |        Triple {
  912|  3.61M|            subject: if let InternedSubject::BlankNode(bnode) = &triple.subject {
  913|    440|                bnode_mapping[bnode].clone().into()
  914|  3.61M|            } else if let InternedSubject::Triple(t) = &triple.subject {
  915|  3.46M|                self.map_triple_blank_nodes(t, bnode_mapping).into()
  916|       |            } else {
  917|   142k|                triple.subject.decode_from(&self.interner).into_owned()
  918|       |            },
  919|  3.61M|            predicate: triple.predicate.decode_from(&self.interner).into_owned(),
  920|  3.61M|            object: if let InternedTerm::BlankNode(bnode) = &triple.object {
  921|    560|                bnode_mapping[bnode].clone().into()
  922|  3.61M|            } else if let InternedTerm::Triple(t) = &triple.object {
  923|     72|                self.map_triple_blank_nodes(t, bnode_mapping).into()
  924|       |            } else {
  925|  3.61M|                triple.object.decode_from(&self.interner).into_owned()
  926|       |            },
  927|       |        }
  928|  3.61M|    }
_RNvXs_NtCsg6vp76A8CLh_5oxrdf7datasetNtB4_7DatasetNtNtCscdEvteftVc2_4core3cmp9PartialEq2eq:
  932|  2.73k|    fn eq(&self, other: &Self) -> bool {
  933|  2.73k|        if self.len() != other.len() {
  934|      0|            return false;
  935|  2.73k|        }
  936|  87.2k|        for q in self {
  937|  84.5k|            if !other.contains(q) {
  938|      0|                return false;
  939|  84.5k|            }
  940|       |        }
  941|  2.73k|        true
  942|  2.73k|    }
_RNvXs1_NtCsg6vp76A8CLh_5oxrdf7datasetRNtB5_7DatasetNtNtNtNtCscdEvteftVc2_4core4iter6traits7collect12IntoIterator9into_iter:
  951|  2.73k|    fn into_iter(self) -> Self::IntoIter {
  952|  2.73k|        self.iter()
  953|  2.73k|    }
_RNvXsg_NtCsg6vp76A8CLh_5oxrdf7datasetNtB5_4IterNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next:
 1551|  87.2k|    fn next(&mut self) -> Option<Self::Item> {
 1552|  87.2k|        self.inner
 1553|  87.2k|            .next()
 1554|  87.2k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))
 1555|  87.2k|    }

_RNvMNtCsg6vp76A8CLh_5oxrdf9interningNtB2_8Interner13get_or_intern:
   18|  21.5M|    fn get_or_intern(&mut self, value: &str) -> Key {
   19|  21.5M|        let mut hash = self.hash(value);
   20|  21.5M|        loop {
   21|  21.5M|            match self.string_for_hash.entry(hash) {
   22|  62.5k|                Entry::Vacant(e) => {
   23|  62.5k|                    e.insert(value.into());
   24|  62.5k|                    return Key(hash);
   25|       |                }
   26|  21.5M|                Entry::Occupied(e) => loop {
   27|  21.5M|                    if e.get() == value {
   28|  21.5M|                        return Key(hash);
   29|      0|                    } else if hash == u64::MAX - 1 {
   30|      0|                        hash = 0;
   31|      0|                    } else {
   32|      0|                        hash += 1;
   33|      0|                    }
   34|       |                },
   35|       |            }
   36|       |        }
   37|  21.5M|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf9interningNtB2_8Interner3get:
   39|  5.45M|    fn get(&self, value: &str) -> Option<Key> {
   40|  5.45M|        let mut hash = self.hash(value);
   41|       |        loop {
   42|  5.45M|            let v = self.string_for_hash.get(&hash)?;
   43|  5.45M|            if v == value {
   44|  5.45M|                return Some(Key(hash));
   45|      0|            } else if hash == u64::MAX - 1 {
   46|      0|                hash = 0;
   47|      0|            } else {
   48|      0|                hash += 1;
   49|      0|            }
   50|       |        }
   51|  5.45M|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf9interningNtB2_8Interner4hash:
   53|  27.0M|    fn hash(&self, value: &str) -> u64 {
   54|  27.0M|        let hash = self.hasher.hash_one(value);
   55|  27.0M|        if hash == u64::MAX {
   56|      0|            0
   57|       |        } else {
   58|  27.0M|            hash
   59|       |        }
   60|  27.0M|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf9interningNtB2_8Interner7resolve:
   62|  10.9M|    fn resolve(&self, key: Key) -> &str {
   63|  10.9M|        &self.string_for_hash[&key.0]
   64|  10.9M|    }
_RNvMs0_NtCsg6vp76A8CLh_5oxrdf9interningNtB5_17InternedNamedNode12encoded_into:
   90|  15.2M|    pub fn encoded_into(named_node: NamedNodeRef<'_>, interner: &mut Interner) -> Self {
   91|  15.2M|        Self {
   92|  15.2M|            id: interner.get_or_intern(named_node.as_str()),
   93|  15.2M|        }
   94|  15.2M|    }
_RNvMs0_NtCsg6vp76A8CLh_5oxrdf9interningNtB5_17InternedNamedNode12encoded_from:
   96|  3.86M|    pub fn encoded_from(named_node: NamedNodeRef<'_>, interner: &Interner) -> Option<Self> {
   97|  3.86M|        Some(Self {
   98|  3.86M|            id: interner.get(named_node.as_str())?,
   99|       |        })
  100|  3.86M|    }
_RNvMs0_NtCsg6vp76A8CLh_5oxrdf9interningNtB5_17InternedNamedNode11decode_from:
  102|  7.78M|    pub fn decode_from(self, interner: &Interner) -> NamedNodeRef<'_> {
  103|  7.78M|        NamedNodeRef::new_unchecked(interner.resolve(self.id))
  104|  7.78M|    }
_RNvMs1_NtCsg6vp76A8CLh_5oxrdf9interningNtB5_17InternedBlankNode12encoded_into:
  128|  27.6k|    pub fn encoded_into(blank_node: BlankNodeRef<'_>, interner: &mut Interner) -> Self {
  129|  27.6k|        if let Some(id) = blank_node.unique_id() {
  130|  25.9k|            interner
  131|  25.9k|                .string_for_blank_node_id
  132|  25.9k|                .entry(id)
  133|  25.9k|                .or_insert_with(|| blank_node.as_str().into());
  134|  25.9k|            Self::Number { id }
  135|       |        } else {
  136|  1.60k|            Self::Other {
  137|  1.60k|                id: interner.get_or_intern(blank_node.as_str()),
  138|  1.60k|            }
  139|       |        }
  140|  27.6k|    }
_RNvMs1_NtCsg6vp76A8CLh_5oxrdf9interningNtB5_17InternedBlankNode12encoded_from:
  142|  6.88k|    pub fn encoded_from(blank_node: BlankNodeRef<'_>, interner: &Interner) -> Option<Self> {
  143|  6.88k|        if let Some(id) = blank_node.unique_id() {
  144|  6.88k|            interner
  145|  6.88k|                .string_for_blank_node_id
  146|  6.88k|                .contains_key(&id)
  147|  6.88k|                .then_some(Self::Number { id })
  148|       |        } else {
  149|       |            Some(Self::Other {
  150|      0|                id: interner.get(blank_node.as_str())?,
  151|       |            })
  152|       |        }
  153|  6.88k|    }
_RNvMs1_NtCsg6vp76A8CLh_5oxrdf9interningNtB5_17InternedBlankNode11decode_from:
  155|  6.38k|    pub fn decode_from(self, interner: &Interner) -> BlankNodeRef<'_> {
  156|  6.38k|        BlankNodeRef::new_unchecked(match self {
  157|  6.38k|            Self::Number { id } => &interner.string_for_blank_node_id[&id],
  158|      0|            Self::Other { id } => interner.resolve(id),
  159|       |        })
  160|  6.38k|    }
_RNvMs2_NtCsg6vp76A8CLh_5oxrdf9interningNtB5_15InternedLiteral12encoded_into:
  188|  6.29M|    pub fn encoded_into(literal: LiteralRef<'_>, interner: &mut Interner) -> Self {
  189|  6.29M|        let value_id = interner.get_or_intern(literal.value());
  190|  6.29M|        if literal.is_plain() {
  191|  2.46k|            if let Some(language) = literal.language() {
  192|    818|                Self::LanguageTaggedString {
  193|    818|                    value_id,
  194|    818|                    language_id: interner.get_or_intern(language),
  195|    818|                }
  196|       |            } else {
  197|  1.64k|                Self::String { value_id }
  198|       |            }
  199|       |        } else {
  200|  6.29M|            Self::TypedLiteral {
  201|  6.29M|                value_id,
  202|  6.29M|                datatype: InternedNamedNode::encoded_into(literal.datatype(), interner),
  203|  6.29M|            }
  204|       |        }
  205|  6.29M|    }
_RNvMs2_NtCsg6vp76A8CLh_5oxrdf9interningNtB5_15InternedLiteral12encoded_from:
  207|  1.59M|    pub fn encoded_from(literal: LiteralRef<'_>, interner: &Interner) -> Option<Self> {
  208|  1.59M|        let value_id = interner.get(literal.value())?;
  209|  1.59M|        Some(if literal.is_plain() {
  210|  1.06k|            if let Some(language) = literal.language() {
  211|       |                Self::LanguageTaggedString {
  212|    374|                    value_id,
  213|    374|                    language_id: interner.get(language)?,
  214|       |                }
  215|       |            } else {
  216|    695|                Self::String { value_id }
  217|       |            }
  218|       |        } else {
  219|       |            Self::TypedLiteral {
  220|  1.58M|                value_id,
  221|  1.58M|                datatype: InternedNamedNode::encoded_from(literal.datatype(), interner)?,
  222|       |            }
  223|       |        })
  224|  1.59M|    }
_RNvMs2_NtCsg6vp76A8CLh_5oxrdf9interningNtB5_15InternedLiteral11decode_from:
  226|  3.17M|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> LiteralRef<'a> {
  227|  3.17M|        match self {
  228|  13.7k|            Self::String { value_id } => {
  229|  13.7k|                LiteralRef::new_simple_literal(interner.resolve(*value_id))
  230|       |            }
  231|       |            Self::LanguageTaggedString {
  232|  3.00k|                value_id,
  233|  3.00k|                language_id,
  234|  3.00k|            } => LiteralRef::new_language_tagged_literal_unchecked(
  235|  3.00k|                interner.resolve(*value_id),
  236|  3.00k|                interner.resolve(*language_id),
  237|  3.00k|            ),
  238|  3.15M|            Self::TypedLiteral { value_id, datatype } => LiteralRef::new_typed_literal(
  239|  3.15M|                interner.resolve(*value_id),
  240|  3.15M|                datatype.decode_from(interner),
  241|  3.15M|            ),
  242|       |        }
  243|  3.17M|    }
_RNvMs3_NtCsg6vp76A8CLh_5oxrdf9interningNtB5_15InternedSubject12encoded_into:
  274|  7.47M|    pub fn encoded_into(node: SubjectRef<'_>, interner: &mut Interner) -> Self {
  275|  7.47M|        match node {
  276|   321k|            SubjectRef::NamedNode(node) => {
  277|   321k|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  278|       |            }
  279|  10.6k|            SubjectRef::BlankNode(node) => {
  280|  10.6k|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  281|       |            }
  282|       |            #[cfg(feature = "rdf-star")]
  283|  7.14M|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  284|  7.14M|                triple.as_ref(),
  285|  7.14M|                interner,
  286|  7.14M|            ))),
  287|       |        }
  288|  7.47M|    }
_RNvMs3_NtCsg6vp76A8CLh_5oxrdf9interningNtB5_15InternedSubject12encoded_from:
  290|  1.88M|    pub fn encoded_from(node: SubjectRef<'_>, interner: &Interner) -> Option<Self> {
  291|  1.88M|        Some(match node {
  292|  80.3k|            SubjectRef::NamedNode(node) => {
  293|  80.3k|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  294|       |            }
  295|  5.05k|            SubjectRef::BlankNode(node) => {
  296|  5.05k|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  297|       |            }
  298|       |            #[cfg(feature = "rdf-star")]
  299|  1.80M|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  300|  1.80M|                triple.as_ref(),
  301|  1.80M|                interner,
  302|  1.80M|            )?)),
  303|       |        })
  304|  1.88M|    }
_RNvMs3_NtCsg6vp76A8CLh_5oxrdf9interningNtB5_15InternedSubject11decode_from:
  306|   227k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> SubjectRef<'a> {
  307|   227k|        match self {
  308|   151k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.decode_from(interner)),
  309|  4.83k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.decode_from(interner)),
  310|       |            #[cfg(feature = "rdf-star")]
  311|  70.8k|            Self::Triple(triple) => SubjectRef::Triple(&interner.triples[triple.as_ref()]),
  312|       |        }
  313|   227k|    }
_RNvMs4_NtCsg6vp76A8CLh_5oxrdf9interningNtB5_17InternedGraphName12encoded_into:
  341|   186k|    pub fn encoded_into(node: GraphNameRef<'_>, interner: &mut Interner) -> Self {
  342|   186k|        match node {
  343|   162k|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  344|  23.5k|            GraphNameRef::NamedNode(node) => {
  345|  23.5k|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  346|       |            }
  347|    616|            GraphNameRef::BlankNode(node) => {
  348|    616|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  349|       |            }
  350|       |        }
  351|   186k|    }
_RNvMs4_NtCsg6vp76A8CLh_5oxrdf9interningNtB5_17InternedGraphName12encoded_from:
  353|  84.5k|    pub fn encoded_from(node: GraphNameRef<'_>, interner: &Interner) -> Option<Self> {
  354|  84.5k|        Some(match node {
  355|  73.8k|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  356|  10.4k|            GraphNameRef::NamedNode(node) => {
  357|  10.4k|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  358|       |            }
  359|    308|            GraphNameRef::BlankNode(node) => {
  360|    308|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  361|       |            }
  362|       |        })
  363|  84.5k|    }
_RNvMs4_NtCsg6vp76A8CLh_5oxrdf9interningNtB5_17InternedGraphName11decode_from:
  365|  84.5k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> GraphNameRef<'a> {
  366|  84.5k|        match self {
  367|  73.8k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  368|  10.4k|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.decode_from(interner)),
  369|    308|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.decode_from(interner)),
  370|       |        }
  371|  84.5k|    }
_RNvMs5_NtCsg6vp76A8CLh_5oxrdf9interningNtB5_12InternedTerm12encoded_into:
  400|  7.47M|    pub fn encoded_into(term: TermRef<'_>, interner: &mut Interner) -> Self {
  401|  7.47M|        match term {
  402|  1.17M|            TermRef::NamedNode(term) => {
  403|  1.17M|                Self::NamedNode(InternedNamedNode::encoded_into(term, interner))
  404|       |            }
  405|  3.60k|            TermRef::BlankNode(term) => {
  406|  3.60k|                Self::BlankNode(InternedBlankNode::encoded_into(term, interner))
  407|       |            }
  408|  6.29M|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_into(term, interner)),
  409|       |            #[cfg(feature = "rdf-star")]
  410|  2.03k|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  411|  2.03k|                triple.as_ref(),
  412|  2.03k|                interner,
  413|  2.03k|            ))),
  414|       |        }
  415|  7.47M|    }
_RNvMs5_NtCsg6vp76A8CLh_5oxrdf9interningNtB5_12InternedTerm12encoded_from:
  417|  1.88M|    pub fn encoded_from(term: TermRef<'_>, interner: &Interner) -> Option<Self> {
  418|  1.88M|        Some(match term {
  419|   297k|            TermRef::NamedNode(term) => {
  420|   297k|                Self::NamedNode(InternedNamedNode::encoded_from(term, interner)?)
  421|       |            }
  422|  1.52k|            TermRef::BlankNode(term) => {
  423|  1.52k|                Self::BlankNode(InternedBlankNode::encoded_from(term, interner)?)
  424|       |            }
  425|  1.59M|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_from(term, interner)?),
  426|       |            #[cfg(feature = "rdf-star")]
  427|    874|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  428|    874|                triple.as_ref(),
  429|    874|                interner,
  430|    874|            )?)),
  431|       |        })
  432|  1.88M|    }
_RNvMs5_NtCsg6vp76A8CLh_5oxrdf9interningNtB5_12InternedTerm11decode_from:
  434|  3.69M|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> TermRef<'a> {
  435|  3.69M|        match self {
  436|   583k|            Self::NamedNode(term) => TermRef::NamedNode(term.decode_from(interner)),
  437|  1.24k|            Self::BlankNode(term) => TermRef::BlankNode(term.decode_from(interner)),
  438|  3.10M|            Self::Literal(term) => TermRef::Literal(term.decode_from(interner)),
  439|       |            #[cfg(feature = "rdf-star")]
  440|    838|            Self::Triple(triple) => TermRef::Triple(&interner.triples[triple.as_ref()]),
  441|       |        }
  442|  3.69M|    }
_RNvMs6_NtCsg6vp76A8CLh_5oxrdf9interningNtB5_14InternedTriple12encoded_into:
  472|  7.29M|    pub fn encoded_into(triple: TripleRef<'_>, interner: &mut Interner) -> Self {
  473|  7.29M|        let interned_triple = Self {
  474|  7.29M|            subject: InternedSubject::encoded_into(triple.subject, interner),
  475|  7.29M|            predicate: InternedNamedNode::encoded_into(triple.predicate, interner),
  476|  7.29M|            object: InternedTerm::encoded_into(triple.object, interner),
  477|  7.29M|        };
  478|  7.29M|        interner
  479|  7.29M|            .triples
  480|  7.29M|            .insert(interned_triple.clone(), triple.into_owned());
  481|  7.29M|        interned_triple
  482|  7.29M|    }
_RNvMs6_NtCsg6vp76A8CLh_5oxrdf9interningNtB5_14InternedTriple12encoded_from:
  484|  1.80M|    pub fn encoded_from(triple: TripleRef<'_>, interner: &Interner) -> Option<Self> {
  485|  1.80M|        let interned_triple = Self {
  486|  1.80M|            subject: InternedSubject::encoded_from(triple.subject, interner)?,
  487|  1.80M|            predicate: InternedNamedNode::encoded_from(triple.predicate, interner)?,
  488|  1.80M|            object: InternedTerm::encoded_from(triple.object, interner)?,
  489|       |        };
  490|  1.80M|        interner
  491|  1.80M|            .triples
  492|  1.80M|            .contains_key(&interned_triple)
  493|  1.80M|            .then_some(interned_triple)
  494|  1.80M|    }
_RNvXs7_NtCsg6vp76A8CLh_5oxrdf9interningNtB5_21IdentityHasherBuilderNtNtCscdEvteftVc2_4core4hash11BuildHasher12build_hasher:
  511|  38.0M|    fn build_hasher(&self) -> Self::Hasher {
  512|  38.0M|        Self::Hasher::default()
  513|  38.0M|    }
_RNvXs8_NtCsg6vp76A8CLh_5oxrdf9interningNtB5_14IdentityHasherNtNtCscdEvteftVc2_4core4hash6Hasher6finish:
  522|  38.0M|    fn finish(&self) -> u64 {
  523|  38.0M|        self.value
  524|  38.0M|    }
_RNvXs8_NtCsg6vp76A8CLh_5oxrdf9interningNtB5_14IdentityHasherNtNtCscdEvteftVc2_4core4hash6Hasher9write_u64:
  530|  38.0M|    fn write_u64(&mut self, i: u64) {
  531|  38.0M|        self.value = i
  532|  38.0M|    }
_RNCNvMs1_NtCsg6vp76A8CLh_5oxrdf9interningNtB7_17InternedBlankNode12encoded_into0B9_:
  133|  22.0k|                .or_insert_with(|| blank_node.as_str().into());

_RNvMNtCsg6vp76A8CLh_5oxrdf7literalNtB2_7Literal6as_refCsbTqLqKzjopm_4trig:
  129|   262k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|   262k|        LiteralRef(match &self.0 {
  131|  5.04k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|  1.59k|            LiteralContent::LanguageTaggedString { value, language } => {
  133|  1.59k|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|   255k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|   255k|                value,
  137|   255k|                datatype: datatype.as_ref(),
  138|   255k|            },
  139|       |        })
  140|   262k|    }
_RINvMNtCsg6vp76A8CLh_5oxrdf7literalNtB3_7Literal18new_simple_literalRNtNtCs3OstG5Tqy1X_5alloc6string6StringECs3Okv3MbnXN6_5oxttl:
   47|    233|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|    233|        Self(LiteralContent::String(value.into()))
   49|    233|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf7literalNtB2_7Literal6as_refCs3Okv3MbnXN6_5oxttl:
  129|  1.26M|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|  1.26M|        LiteralRef(match &self.0 {
  131|    187|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|     43|            LiteralContent::LanguageTaggedString { value, language } => {
  133|     43|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|  1.26M|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|  1.26M|                value,
  137|  1.26M|                datatype: datatype.as_ref(),
  138|  1.26M|            },
  139|       |        })
  140|  1.26M|    }
_RNvMst_NtCsg6vp76A8CLh_5oxrdf7literalNtB5_10LiteralRef18new_simple_literalCs3Okv3MbnXN6_5oxttl:
  459|    237|    pub const fn new_simple_literal(value: &'a str) -> Self {
  460|    237|        LiteralRef(LiteralRefContent::String(value))
  461|    237|    }
_RNvMst_NtCsg6vp76A8CLh_5oxrdf7literalNtB5_10LiteralRef5valueCs3Okv3MbnXN6_5oxttl:
  488|  1.36M|    pub const fn value(self) -> &'a str {
  489|  1.36M|        match self.0 {
  490|  4.08k|            LiteralRefContent::String(value)
  491|    940|            | LiteralRefContent::LanguageTaggedString { value, .. }
  492|  1.36M|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  493|  1.36M|        }
  494|  1.36M|    }
_RNvMst_NtCsg6vp76A8CLh_5oxrdf7literalNtB5_10LiteralRef8datatypeCs3Okv3MbnXN6_5oxttl:
  513|  1.36M|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  514|  1.36M|        match self.0 {
  515|  4.08k|            LiteralRefContent::String(_) => xsd::STRING,
  516|    940|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  517|  1.35M|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  518|       |        }
  519|  1.36M|    }
_RNvMst_NtCsg6vp76A8CLh_5oxrdf7literalNtB5_10LiteralRef8is_plainCs3Okv3MbnXN6_5oxttl:
  526|  5.26k|    pub const fn is_plain(self) -> bool {
  527|    237|        matches!(
  528|  5.26k|            self.0,
  529|       |            LiteralRefContent::String(_) | LiteralRefContent::LanguageTaggedString { .. }
  530|       |        )
  531|  5.26k|    }
_RNvXsu_NtCsg6vp76A8CLh_5oxrdf7literalNtB5_10LiteralRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtCs3Okv3MbnXN6_5oxttl:
  565|  5.26k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  566|  5.26k|        match self.0 {
  567|  4.32k|            LiteralRefContent::String(value) => print_quoted_str(value, f),
  568|    940|            LiteralRefContent::LanguageTaggedString { value, language } => {
  569|    940|                print_quoted_str(value, f)?;
  570|    940|                write!(f, "@{language}")
  571|       |            }
  572|      0|            LiteralRefContent::TypedLiteral { value, datatype } => {
  573|      0|                print_quoted_str(value, f)?;
  574|      0|                write!(f, "^^{datatype}")
  575|       |            }
  576|       |        }
  577|  5.26k|    }
_RINvMNtCsg6vp76A8CLh_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   47|  15.8k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|  15.8k|        Self(LiteralContent::String(value.into()))
   49|  15.8k|    }
_RINvMNtCsg6vp76A8CLh_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   53|    963|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|    963|        let value = value.into();
   55|    963|        let datatype = datatype.into();
   56|    963|        Self(if datatype == xsd::STRING {
   57|      0|            LiteralContent::String(value)
   58|       |        } else {
   59|    963|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|    963|    }
_RINvMNtCsg6vp76A8CLh_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   53|  1.65M|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|  1.65M|        let value = value.into();
   55|  1.65M|        let datatype = datatype.into();
   56|  1.65M|        Self(if datatype == xsd::STRING {
   57|      0|            LiteralContent::String(value)
   58|       |        } else {
   59|  1.65M|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|  1.65M|    }
_RINvMNtCsg6vp76A8CLh_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringB1n_EB5_:
   85|  3.78k|    pub fn new_language_tagged_literal_unchecked(
   86|  3.78k|        value: impl Into<String>,
   87|  3.78k|        language: impl Into<String>,
   88|  3.78k|    ) -> Self {
   89|  3.78k|        Self(LiteralContent::LanguageTaggedString {
   90|  3.78k|            value: value.into(),
   91|  3.78k|            language: language.into(),
   92|  3.78k|        })
   93|  3.78k|    }
_RINvMst_NtCsg6vp76A8CLh_5oxrdf7literalNtB6_10LiteralRef17new_typed_literalNtNtB8_10named_node12NamedNodeRefEB8_:
  465|  3.15M|    pub fn new_typed_literal(value: &'a str, datatype: impl Into<NamedNodeRef<'a>>) -> Self {
  466|  3.15M|        let datatype = datatype.into();
  467|  3.15M|        LiteralRef(if datatype == xsd::STRING {
  468|      0|            LiteralRefContent::String(value)
  469|       |        } else {
  470|  3.15M|            LiteralRefContent::TypedLiteral { value, datatype }
  471|       |        })
  472|  3.15M|    }
_RINvNtCsg6vp76A8CLh_5oxrdf7literal16print_quoted_strNtNtCscdEvteftVc2_4core3fmt9FormatterEB4_:
  616|  5.26k|pub fn print_quoted_str(string: &str, f: &mut impl Write) -> fmt::Result {
  617|  5.26k|    f.write_char('"')?;
  618|  43.3k|    for c in string.chars() {
  619|  43.3k|        match c {
  620|    222|            '\u{08}' => f.write_str("\\b"),
  621|    264|            '\t' => f.write_str("\\t"),
  622|    290|            '\n' => f.write_str("\\n"),
  623|    326|            '\u{0C}' => f.write_str("\\f"),
  624|    149|            '\r' => f.write_str("\\r"),
  625|    868|            '"' => f.write_str("\\\""),
  626|     71|            '\\' => f.write_str("\\\\"),
  627|  41.1k|            '\0'..='\u{1F}' | '\u{7F}' => write!(f, "\\u{:04X}", u32::from(c)),
  628|  22.3k|            _ => f.write_char(c),
  629|      0|        }?;
  630|       |    }
  631|  5.26k|    f.write_char('"')
  632|  5.26k|}
_RNvMNtCsg6vp76A8CLh_5oxrdf7literalNtB2_7Literal6as_refB4_:
  129|  7.65M|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|  7.65M|        LiteralRef(match &self.0 {
  131|    625|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|    155|            LiteralContent::LanguageTaggedString { value, language } => {
  133|    155|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|  7.65M|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|  7.65M|                value,
  137|  7.65M|                datatype: datatype.as_ref(),
  138|  7.65M|            },
  139|       |        })
  140|  7.65M|    }
_RNvMst_NtCsg6vp76A8CLh_5oxrdf7literalNtB5_10LiteralRef18new_simple_literalB7_:
  459|  13.7k|    pub const fn new_simple_literal(value: &'a str) -> Self {
  460|  13.7k|        LiteralRef(LiteralRefContent::String(value))
  461|  13.7k|    }
_RNvMst_NtCsg6vp76A8CLh_5oxrdf7literalNtB5_10LiteralRef37new_language_tagged_literal_uncheckedB7_:
  482|  3.00k|    pub const fn new_language_tagged_literal_unchecked(value: &'a str, language: &'a str) -> Self {
  483|  3.00k|        LiteralRef(LiteralRefContent::LanguageTaggedString { value, language })
  484|  3.00k|    }
_RNvMst_NtCsg6vp76A8CLh_5oxrdf7literalNtB5_10LiteralRef5valueB7_:
  488|  7.88M|    pub const fn value(self) -> &'a str {
  489|  7.88M|        match self.0 {
  490|  2.33k|            LiteralRefContent::String(value)
  491|  1.19k|            | LiteralRefContent::LanguageTaggedString { value, .. }
  492|  7.88M|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  493|  7.88M|        }
  494|  7.88M|    }
_RNvMst_NtCsg6vp76A8CLh_5oxrdf7literalNtB5_10LiteralRef8languageB7_:
  501|  3.52k|    pub const fn language(self) -> Option<&'a str> {
  502|  3.52k|        match self.0 {
  503|  1.19k|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  504|  2.33k|            _ => None,
  505|       |        }
  506|  3.52k|    }
_RNvMst_NtCsg6vp76A8CLh_5oxrdf7literalNtB5_10LiteralRef8datatypeB7_:
  513|  7.88M|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  514|  7.88M|        match self.0 {
  515|      0|            LiteralRefContent::String(_) => xsd::STRING,
  516|      0|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  517|  7.88M|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  518|       |        }
  519|  7.88M|    }
_RNvMst_NtCsg6vp76A8CLh_5oxrdf7literalNtB5_10LiteralRef8is_plainB7_:
  526|  7.88M|    pub const fn is_plain(self) -> bool {
  527|  7.88M|        matches!(
  528|  7.88M|            self.0,
  529|       |            LiteralRefContent::String(_) | LiteralRefContent::LanguageTaggedString { .. }
  530|       |        )
  531|  7.88M|    }
_RNvMst_NtCsg6vp76A8CLh_5oxrdf7literalNtB5_10LiteralRef10into_ownedB7_:
  534|  9.17M|    pub fn into_owned(self) -> Literal {
  535|  9.17M|        Literal(match self.0 {
  536|    750|            LiteralRefContent::String(value) => LiteralContent::String(value.to_owned()),
  537|    186|            LiteralRefContent::LanguageTaggedString { value, language } => {
  538|    186|                LiteralContent::LanguageTaggedString {
  539|    186|                    value: value.to_owned(),
  540|    186|                    language: language.to_owned(),
  541|    186|                }
  542|       |            }
  543|  9.16M|            LiteralRefContent::TypedLiteral { value, datatype } => LiteralContent::TypedLiteral {
  544|  9.16M|                value: value.to_owned(),
  545|  9.16M|                datatype: datatype.into_owned(),
  546|  9.16M|            },
  547|       |        })
  548|  9.17M|    }

_RNvMNtCsg6vp76A8CLh_5oxrdf10named_nodeNtB2_9NamedNode6as_refCsbTqLqKzjopm_4trig:
   54|   820k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|   820k|        NamedNodeRef::new_unchecked(&self.iri)
   56|   820k|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf10named_nodeNtB2_9NamedNode6as_strCsbTqLqKzjopm_4trig:
   44|  32.6k|    pub fn as_str(&self) -> &str {
   45|  32.6k|        self.iri.as_str()
   46|  32.6k|    }
_RNvMs4_NtCsg6vp76A8CLh_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCsbTqLqKzjopm_4trig:
  138|   184k|    pub fn into_owned(self) -> NamedNode {
  139|   184k|        NamedNode::new_unchecked(self.iri)
  140|   184k|    }
_RNvMs4_NtCsg6vp76A8CLh_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCsbTqLqKzjopm_4trig:
  128|   820k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   820k|        Self { iri }
  130|   820k|    }
_RNvMs4_NtCsg6vp76A8CLh_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCsbTqLqKzjopm_4trig:
  133|  32.6k|    pub const fn as_str(self) -> &'a str {
  134|  32.6k|        self.iri
  135|  32.6k|    }
_RNvXs8_NtCsg6vp76A8CLh_5oxrdf10named_nodeNtB5_12NamedNodeRefINtNtCscdEvteftVc2_4core3cmp9PartialEqNtB5_9NamedNodeE2eqCsbTqLqKzjopm_4trig:
  166|  32.6k|    fn eq(&self, other: &NamedNode) -> bool {
  167|  32.6k|        self.as_str() == other.as_str()
  168|  32.6k|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf10named_nodeNtB2_9NamedNode6as_refCs3Okv3MbnXN6_5oxttl:
   54|  3.05M|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  3.05M|        NamedNodeRef::new_unchecked(&self.iri)
   56|  3.05M|    }
_RNvMs4_NtCsg6vp76A8CLh_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCs3Okv3MbnXN6_5oxttl:
  138|  10.1k|    pub fn into_owned(self) -> NamedNode {
  139|  10.1k|        NamedNode::new_unchecked(self.iri)
  140|  10.1k|    }
_RNvMs4_NtCsg6vp76A8CLh_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCs3Okv3MbnXN6_5oxttl:
  128|  3.05M|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  3.05M|        Self { iri }
  130|  3.05M|    }
_RNvMs4_NtCsg6vp76A8CLh_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCs3Okv3MbnXN6_5oxttl:
  133|  2.06M|    pub const fn as_str(self) -> &'a str {
  134|  2.06M|        self.iri
  135|  2.06M|    }
_RNvXs5_NtCsg6vp76A8CLh_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtCs3Okv3MbnXN6_5oxttl:
  145|  1.92M|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|  1.92M|        write!(f, "<{}>", self.as_str())
  147|  1.92M|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|  1.66M|    pub fn as_str(&self) -> &str {
   45|  1.66M|        self.iri.as_str()
   46|  1.66M|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf10named_nodeNtB2_9NamedNode6as_refB4_:
   54|  18.5M|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  18.5M|        NamedNodeRef::new_unchecked(&self.iri)
   56|  18.5M|    }
_RNvMs4_NtCsg6vp76A8CLh_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedB7_:
  128|  26.3M|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  26.3M|        Self { iri }
  130|  26.3M|    }
_RNvMs4_NtCsg6vp76A8CLh_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|  20.8M|    pub const fn as_str(self) -> &'a str {
  134|  20.8M|        self.iri
  135|  20.8M|    }
_RNvMs4_NtCsg6vp76A8CLh_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|  24.1M|    pub fn into_owned(self) -> NamedNode {
  139|  24.1M|        NamedNode::new_unchecked(self.iri)
  140|  24.1M|    }
_RNvXs6_NtCsg6vp76A8CLh_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCscdEvteftVc2_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|  1.91M|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|  1.91M|        node.into_owned()
  154|  1.91M|    }
_RNvXs9_NtCsg6vp76A8CLh_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCscdEvteftVc2_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|  1.66M|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|  1.66M|        self.as_str() == other.as_str()
  175|  1.66M|    }
_RINvMNtCsg6vp76A8CLh_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   39|  2.43M|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  2.43M|        Self { iri: iri.into() }
   41|  2.43M|    }
_RINvMNtCsg6vp76A8CLh_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|  24.3M|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  24.3M|        Self { iri: iri.into() }
   41|  24.3M|    }

_RNvMs1c_NtCsg6vp76A8CLh_5oxrdf6tripleNtB6_9GraphName16is_default_graphCsbTqLqKzjopm_4trig:
  960|   176k|    pub fn is_default_graph(&self) -> bool {
  961|   176k|        self.as_ref().is_default_graph()
  962|   176k|    }
_RNvMs1c_NtCsg6vp76A8CLh_5oxrdf6tripleNtB6_9GraphName6as_refCsbTqLqKzjopm_4trig:
  965|   753k|    pub fn as_ref(&self) -> GraphNameRef<'_> {
  966|   753k|        match self {
  967|  84.0k|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.as_ref()),
  968|  21.0k|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.as_ref()),
  969|   648k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  970|       |        }
  971|   753k|    }
_RNvMs1k_NtCsg6vp76A8CLh_5oxrdf6tripleNtB6_12GraphNameRef10into_ownedCsbTqLqKzjopm_4trig:
 1053|  6.29k|    pub fn into_owned(self) -> GraphName {
 1054|  6.29k|        match self {
 1055|  2.98k|            Self::NamedNode(node) => GraphName::NamedNode(node.into_owned()),
 1056|    975|            Self::BlankNode(node) => GraphName::BlankNode(node.into_owned()),
 1057|  2.34k|            Self::DefaultGraph => GraphName::DefaultGraph,
 1058|       |        }
 1059|  6.29k|    }
_RNvMs1k_NtCsg6vp76A8CLh_5oxrdf6tripleNtB6_12GraphNameRef16is_default_graphCsbTqLqKzjopm_4trig:
 1048|   176k|    pub fn is_default_graph(&self) -> bool {
 1049|   176k|        matches!(self, Self::DefaultGraph)
 1050|   176k|    }
_RNvMs1u_NtCsg6vp76A8CLh_5oxrdf6tripleNtB6_4Quad6as_refCsbTqLqKzjopm_4trig:
 1182|   378k|    pub fn as_ref(&self) -> QuadRef<'_> {
 1183|   378k|        QuadRef {
 1184|   378k|            subject: self.subject.as_ref(),
 1185|   378k|            predicate: self.predicate.as_ref(),
 1186|   378k|            object: self.object.as_ref(),
 1187|   378k|            graph_name: self.graph_name.as_ref(),
 1188|   378k|        }
 1189|   378k|    }
_RNvMsc_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_7Subject6as_refCsbTqLqKzjopm_4trig:
  181|   560k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|   560k|        match self {
  183|  62.4k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|   187k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|   310k|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|   560k|    }
_RNvMsn_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_10SubjectRef10into_ownedCsbTqLqKzjopm_4trig:
  294|   159k|    pub fn into_owned(self) -> Subject {
  295|   159k|        match self {
  296|  13.3k|            Self::NamedNode(node) => Subject::NamedNode(node.into_owned()),
  297|  84.4k|            Self::BlankNode(node) => Subject::BlankNode(node.into_owned()),
  298|       |            #[cfg(feature = "rdf-star")]
  299|  61.6k|            Self::Triple(triple) => Subject::Triple(Box::new(triple.clone())),
  300|       |        }
  301|   159k|    }
_RNvMsy_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_4Term6as_refCsbTqLqKzjopm_4trig:
  417|   378k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|   378k|        match self {
  419|  39.3k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|  72.9k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|   262k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|  3.83k|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|   378k|    }
_RNvXs1A_NtCsg6vp76A8CLh_5oxrdf6tripleNtB6_7QuadRefINtNtCscdEvteftVc2_4core7convert4FromRNtB6_4QuadE4fromCsbTqLqKzjopm_4trig:
 1298|   378k|    fn from(quad: &'a Quad) -> Self {
 1299|   378k|        quad.as_ref()
 1300|   378k|    }
_RINvMs16_NtCsg6vp76A8CLh_5oxrdf6tripleNtB7_6Triple3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtB7_4TermECs3Okv3MbnXN6_5oxttl:
  795|  1.69M|    pub fn new(
  796|  1.69M|        subject: impl Into<Subject>,
  797|  1.69M|        predicate: impl Into<NamedNode>,
  798|  1.69M|        object: impl Into<Term>,
  799|  1.69M|    ) -> Self {
  800|  1.69M|        Self {
  801|  1.69M|            subject: subject.into(),
  802|  1.69M|            predicate: predicate.into(),
  803|  1.69M|            object: object.into(),
  804|  1.69M|        }
  805|  1.69M|    }
_RINvMs1u_NtCsg6vp76A8CLh_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node12NamedNodeRefB11_NtB7_9GraphNameECs3Okv3MbnXN6_5oxttl:
 1167|  6.17k|    pub fn new(
 1168|  6.17k|        subject: impl Into<Subject>,
 1169|  6.17k|        predicate: impl Into<NamedNode>,
 1170|  6.17k|        object: impl Into<Term>,
 1171|  6.17k|        graph_name: impl Into<GraphName>,
 1172|  6.17k|    ) -> Self {
 1173|  6.17k|        Self {
 1174|  6.17k|            subject: subject.into(),
 1175|  6.17k|            predicate: predicate.into(),
 1176|  6.17k|            object: object.into(),
 1177|  6.17k|            graph_name: graph_name.into(),
 1178|  6.17k|        }
 1179|  6.17k|    }
_RINvMs1u_NtCsg6vp76A8CLh_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node12NamedNodeRefNtNtB9_10blank_node9BlankNodeNtB7_9GraphNameECs3Okv3MbnXN6_5oxttl:
 1167|  39.9k|    pub fn new(
 1168|  39.9k|        subject: impl Into<Subject>,
 1169|  39.9k|        predicate: impl Into<NamedNode>,
 1170|  39.9k|        object: impl Into<Term>,
 1171|  39.9k|        graph_name: impl Into<GraphName>,
 1172|  39.9k|    ) -> Self {
 1173|  39.9k|        Self {
 1174|  39.9k|            subject: subject.into(),
 1175|  39.9k|            predicate: predicate.into(),
 1176|  39.9k|            object: object.into(),
 1177|  39.9k|            graph_name: graph_name.into(),
 1178|  39.9k|        }
 1179|  39.9k|    }
_RINvMs1u_NtCsg6vp76A8CLh_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtB7_4TermNtB7_9GraphNameECs3Okv3MbnXN6_5oxttl:
 1167|   730k|    pub fn new(
 1168|   730k|        subject: impl Into<Subject>,
 1169|   730k|        predicate: impl Into<NamedNode>,
 1170|   730k|        object: impl Into<Term>,
 1171|   730k|        graph_name: impl Into<GraphName>,
 1172|   730k|    ) -> Self {
 1173|   730k|        Self {
 1174|   730k|            subject: subject.into(),
 1175|   730k|            predicate: predicate.into(),
 1176|   730k|            object: object.into(),
 1177|   730k|            graph_name: graph_name.into(),
 1178|   730k|        }
 1179|   730k|    }
_RNvMsc_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_7Subject6as_refCs3Okv3MbnXN6_5oxttl:
  181|  1.49M|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  1.49M|        match self {
  183|  63.0k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|    604|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|  1.43M|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  1.49M|    }
_RNvMsy_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_4Term6as_refCs3Okv3MbnXN6_5oxttl:
  417|  1.49M|    pub fn as_ref(&self) -> TermRef<'_> {
  418|  1.49M|        match self {
  419|   236k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|  1.12k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  1.26M|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|     54|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|  1.49M|    }
_RNvXs0_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_16NamedOrBlankNodeINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromCs3Okv3MbnXN6_5oxttl:
   43|   111k|    fn from(node: NamedNode) -> Self {
   44|   111k|        Self::NamedNode(node)
   45|   111k|    }
_RNvXs12_NtCsg6vp76A8CLh_5oxrdf6tripleNtB6_7TermRefINtNtCscdEvteftVc2_4core7convert4FromNtB6_10SubjectRefE4fromCs3Okv3MbnXN6_5oxttl:
  732|  1.65M|    fn from(node: SubjectRef<'a>) -> Self {
  733|  1.65M|        match node {
  734|  76.4k|            SubjectRef::NamedNode(node) => node.into(),
  735|  85.0k|            SubjectRef::BlankNode(node) => node.into(),
  736|       |            #[cfg(feature = "rdf-star")]
  737|  1.49M|            SubjectRef::Triple(triple) => triple.into(),
  738|       |        }
  739|  1.65M|    }
_RNvXs1e_NtCsg6vp76A8CLh_5oxrdf6tripleNtB6_9GraphNameINtNtCscdEvteftVc2_4core7convert4FromNtNtB8_10named_node9NamedNodeE4fromCs3Okv3MbnXN6_5oxttl:
  983|  16.2k|    fn from(node: NamedNode) -> Self {
  984|  16.2k|        Self::NamedNode(node)
  985|  16.2k|    }
_RNvXs1g_NtCsg6vp76A8CLh_5oxrdf6tripleNtB6_9GraphNameINtNtCscdEvteftVc2_4core7convert4FromNtNtB8_10blank_node9BlankNodeE4fromCs3Okv3MbnXN6_5oxttl:
  997|  4.75k|    fn from(node: BlankNode) -> Self {
  998|  4.75k|        Self::BlankNode(node)
  999|  4.75k|    }
_RNvXs1i_NtCsg6vp76A8CLh_5oxrdf6tripleNtB6_9GraphNameINtNtCscdEvteftVc2_4core7convert4FromNtB6_16NamedOrBlankNodeE4fromCs3Okv3MbnXN6_5oxttl:
 1011|  21.0k|    fn from(node: NamedOrBlankNode) -> Self {
 1012|  21.0k|        match node {
 1013|  16.2k|            NamedOrBlankNode::NamedNode(node) => node.into(),
 1014|  4.75k|            NamedOrBlankNode::BlankNode(node) => node.into(),
 1015|       |        }
 1016|  21.0k|    }
_RNvXs2_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_16NamedOrBlankNodeINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromCs3Okv3MbnXN6_5oxttl:
   57|  78.9k|    fn from(node: BlankNode) -> Self {
   58|  78.9k|        Self::BlankNode(node)
   59|  78.9k|    }
_RNvXsB_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCs3Okv3MbnXN6_5oxttl:
  444|  9.91k|    fn from(node: NamedNodeRef<'_>) -> Self {
  445|  9.91k|        node.into_owned().into()
  446|  9.91k|    }
_RNvXsL_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtB5_7SubjectE4fromCs3Okv3MbnXN6_5oxttl:
  520|    241|    fn from(node: Subject) -> Self {
  521|    241|        match node {
  522|      0|            Subject::NamedNode(node) => node.into(),
  523|    241|            Subject::BlankNode(node) => node.into(),
  524|       |            #[cfg(feature = "rdf-star")]
  525|      0|            Subject::Triple(triple) => Self::Triple(triple),
  526|       |        }
  527|    241|    }
_RNvXsT_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_7TermRefINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCs3Okv3MbnXN6_5oxttl:
  665|  1.74M|    fn from(node: NamedNodeRef<'a>) -> Self {
  666|  1.74M|        Self::NamedNode(node)
  667|  1.74M|    }
_RNvXsV_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_7TermRefINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10blank_node12BlankNodeRefE4fromCs3Okv3MbnXN6_5oxttl:
  679|  86.0k|    fn from(node: BlankNodeRef<'a>) -> Self {
  680|  86.0k|        Self::BlankNode(node)
  681|  86.0k|    }
_RNvXsZ_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_7TermRefINtNtCscdEvteftVc2_4core7convert4FromRNtB5_6TripleE4fromCs3Okv3MbnXN6_5oxttl:
  708|  1.49M|    fn from(node: &'a Triple) -> Self {
  709|  1.49M|        Self::Triple(node)
  710|  1.49M|    }
_RNvXsf_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCs3Okv3MbnXN6_5oxttl:
  207|    192|    fn from(node: NamedNodeRef<'_>) -> Self {
  208|    192|        node.into_owned().into()
  209|    192|    }
_RNvXsl_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtB5_16NamedOrBlankNodeE4fromCs3Okv3MbnXN6_5oxttl:
  252|   153k|    fn from(node: NamedOrBlankNode) -> Self {
  253|   153k|        match node {
  254|  79.6k|            NamedOrBlankNode::NamedNode(node) => node.into(),
  255|  73.6k|            NamedOrBlankNode::BlankNode(node) => node.into(),
  256|       |        }
  257|   153k|    }
_RNvMsc_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_7Subject6as_refB7_:
  181|  9.09M|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  9.09M|        match self {
  183|   366k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|  1.10k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|  8.72M|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  9.09M|    }
_RNvXse_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|   164k|    fn from(node: NamedNode) -> Self {
  201|   164k|        Self::NamedNode(node)
  202|   164k|    }
_RNvXsg_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|   371k|    fn from(node: BlankNode) -> Self {
  215|   371k|        Self::BlankNode(node)
  216|   371k|    }
_RNvXsi_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtB5_6TripleE4fromB7_:
  229|  5.15M|    fn from(node: Triple) -> Self {
  230|  5.15M|        Self::Triple(Box::new(node))
  231|  5.15M|    }
_RNvMsn_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_10SubjectRef10into_ownedB7_:
  294|  7.43M|    pub fn into_owned(self) -> Subject {
  295|  7.43M|        match self {
  296|   438k|            Self::NamedNode(node) => Subject::NamedNode(node.into_owned()),
  297|    882|            Self::BlankNode(node) => Subject::BlankNode(node.into_owned()),
  298|       |            #[cfg(feature = "rdf-star")]
  299|  6.99M|            Self::Triple(triple) => Subject::Triple(Box::new(triple.clone())),
  300|       |        }
  301|  7.43M|    }
_RNvMsy_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_4Term6as_refB7_:
  417|  9.09M|    pub fn as_ref(&self) -> TermRef<'_> {
  418|  9.09M|        match self {
  419|  1.44M|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|  1.40k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  7.65M|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|    180|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|  9.09M|    }
_RNvXsA_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|   309k|    fn from(node: NamedNode) -> Self {
  438|   309k|        Self::NamedNode(node)
  439|   309k|    }
_RNvXsC_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  451|   287k|    fn from(node: BlankNode) -> Self {
  452|   287k|        Self::BlankNode(node)
  453|   287k|    }
_RNvXsE_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  465|  1.67M|    fn from(literal: Literal) -> Self {
  466|  1.67M|        Self::Literal(literal)
  467|  1.67M|    }
_RNvXsG_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtB5_6TripleE4fromB7_:
  480|  8.16k|    fn from(triple: Triple) -> Self {
  481|  8.16k|        Self::Triple(Box::new(triple))
  482|  8.16k|    }
_RNvMsR_NtCsg6vp76A8CLh_5oxrdf6tripleNtB5_7TermRef10into_ownedB7_:
  637|  10.9M|    pub fn into_owned(self) -> Term {
  638|  10.9M|        match self {
  639|  1.72M|            Self::NamedNode(node) => Term::NamedNode(node.into_owned()),
  640|  1.12k|            Self::BlankNode(node) => Term::BlankNode(node.into_owned()),
  641|  9.17M|            Self::Literal(literal) => Term::Literal(literal.into_owned()),
  642|       |            #[cfg(feature = "rdf-star")]
  643|    144|            Self::Triple(triple) => Term::Triple(Box::new(triple.clone())),
  644|       |        }
  645|  10.9M|    }
_RNvMs16_NtCsg6vp76A8CLh_5oxrdf6tripleNtB6_6Triple6as_refB8_:
  835|  9.09M|    pub fn as_ref(&self) -> TripleRef<'_> {
  836|  9.09M|        TripleRef {
  837|  9.09M|            subject: self.subject.as_ref(),
  838|  9.09M|            predicate: self.predicate.as_ref(),
  839|  9.09M|            object: self.object.as_ref(),
  840|  9.09M|        }
  841|  9.09M|    }
_RNvMs18_NtCsg6vp76A8CLh_5oxrdf6tripleNtB6_9TripleRef10into_ownedB8_:
  908|  7.29M|    pub fn into_owned(self) -> Triple {
  909|  7.29M|        Triple {
  910|  7.29M|            subject: self.subject.into_owned(),
  911|  7.29M|            predicate: self.predicate.into_owned(),
  912|  7.29M|            object: self.object.into_owned(),
  913|  7.29M|        }
  914|  7.29M|    }

_RNCNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB6_7N3Lexer9parse_iri0B8_:
  224|  32.4k|                        .map_err(|e| (position, e.to_string()))?
_RNCNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB6_7N3Lexer26recognize_pname_or_keyword0B8_:
  320|   143k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|   143k|                prefix: pn_prefix,
  322|   143k|                local,
  323|   143k|                might_be_invalid_iri,
  324|   143k|            }),
_RNCNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB6_7N3Lexer18recognize_variable0B8_:
  337|  27.0k|            result.and_then(|(name, _)| {
  338|  27.0k|                if name.is_empty() {
  339|  20.9k|                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|  6.09k|                    Ok(N3Token::Variable(name))
  342|       |                }
  343|  27.0k|            }),
_RNCNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB6_7N3Lexer14parse_lang_tag0B8_:
  582|  4.05k|                .map_err(|e| (position.clone(), e.to_string()))?
_RNCNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_char0B8_:
  819|    528|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  820|    528|            (
  821|    528|                position..position + len + 2,
  822|    528|                format!(
  823|    528|                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  824|    528|                ),
  825|    528|            )
  826|    528|        })?;
_RNCNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_chars_0B8_:
  827|    215|        let c = char::from_u32(codepoint).ok_or_else(|| {
  828|    215|            (
  829|    215|                position..position + len +2,
  830|    215|                format!(
  831|    215|                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  832|    215|                ),
  833|    215|            )
  834|    215|        })?;
_RNCNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB6_7N3Lexer30recognize_utf16_surrogate_pair0B8_:
  846|    113|        let surrogate_high = u16::from_str_radix(val_high, 16).map_err(|e| {
  847|    113|            (
  848|    113|                position..position + 6,
  849|    113|                format!(
  850|    113|                    "The escape sequence '\\u{val_high}' is not a valid hexadecimal string: {e}"
  851|    113|                ),
  852|    113|            )
  853|    113|        })?;
_RNCNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB6_7N3Lexer22recognize_unicode_char0B8_:
  974|  28.2k|                .map(|c| (c, bytes_needed + 1))
_RNCNvNtCs3Okv3MbnXN6_5oxttl5lexer13str_from_utf80B5_:
 1046|  3.08k|    str::from_utf8(data).map_err(|e| {
 1047|  3.08k|        (
 1048|  3.08k|            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
 1049|  3.08k|            format!("Invalid UTF-8: {e}"),
 1050|  3.08k|        )
 1051|  3.08k|            .into()
 1052|  3.08k|    })
_RNCNvNtCs3Okv3MbnXN6_5oxttl5lexer16string_from_utf80B5_:
 1056|  15.0k|    String::from_utf8(data).map_err(|e| {
 1057|  15.0k|        (
 1058|  15.0k|            range.start + e.utf8_error().valid_up_to()
 1059|  15.0k|                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
 1060|  15.0k|            format!("Invalid UTF-8: {e}"),
 1061|  15.0k|        )
 1062|  15.0k|            .into()
 1063|  15.0k|    })
_RNvXNtCs3Okv3MbnXN6_5oxttl5lexerNtB2_7N3LexerNtNtNtB4_7toolkit5lexer15TokenRecognizer20recognize_next_token:
   55|  13.1M|    fn recognize_next_token<'a>(
   56|  13.1M|        &mut self,
   57|  13.1M|        data: &'a [u8],
   58|  13.1M|        is_ending: bool,
   59|  13.1M|        options: &N3LexerOptions,
   60|  13.1M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
   61|  13.1M|        match *data.first()? {
   62|  4.34M|            b'<' => match *data.get(1)? {
   63|  1.53M|                b'<' => Some((2, Ok(N3Token::Punctuation("<<")))),
   64|  8.96k|                b'=' if self.mode == N3LexerMode::N3 => {
   65|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   66|      0|                        Some(if let Ok(result) = result {
   67|      0|                            (consumed, Ok(result))
   68|       |                        } else {
   69|      0|                            (2, Ok(N3Token::Punctuation("<=")))
   70|       |                        })
   71|      0|                    } else if is_ending {
   72|      0|                        Some((2, Ok(N3Token::Punctuation("<="))))
   73|       |                    } else {
   74|      0|                        None
   75|       |                    }
   76|       |                }
   77|  4.65k|                b'-' if self.mode == N3LexerMode::N3 => {
   78|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   79|      0|                        Some(if let Ok(result) = result {
   80|      0|                            (consumed, Ok(result))
   81|       |                        } else {
   82|      0|                            (2, Ok(N3Token::Punctuation("<-")))
   83|       |                        })
   84|      0|                    } else if is_ending {
   85|      0|                        Some((2, Ok(N3Token::Punctuation("<-"))))
   86|       |                    } else {
   87|      0|                        None
   88|       |                    }
   89|       |                }
   90|  2.78M|                _ => self.recognize_iri(data, options),
   91|       |            },
   92|       |            b'>' => {
   93|  1.59M|                if *data.get(1)? == b'>' {
   94|  1.51M|                    Some((2, Ok(N3Token::Punctuation(">>"))))
   95|       |                } else {
   96|  69.0k|                    Some((1, Ok(N3Token::Punctuation(">"))))
   97|       |                }
   98|       |            }
   99|   281k|            b'_' => match data.get(1)? {
  100|   236k|                b':' => Self::recognize_blank_node_label(data),
  101|  4.23k|                c => Some((
  102|  4.23k|                    1,
  103|  4.23k|                    Err((0, format!("Unexpected character '{}'", char::from(*c))).into()),
  104|  4.23k|                )),
  105|       |            },
  106|       |            b'"' => {
  107|  40.9k|                if self.mode != N3LexerMode::NTriples
  108|  40.9k|                    && *data.get(1)? == b'"'
  109|  26.8k|                    && *data.get(2)? == b'"'
  110|       |                {
  111|  15.9k|                    self.recognize_long_string(data, b'"')
  112|       |                } else {
  113|  18.5k|                    self.recognize_string(data, b'"')
  114|       |                }
  115|       |            }
  116|  80.1k|            b'\'' if self.mode != N3LexerMode::NTriples => {
  117|  80.1k|                if *data.get(1)? == b'\'' && *data.get(2)? == b'\'' {
  118|  13.9k|                    self.recognize_long_string(data, b'\'')
  119|       |                } else {
  120|  59.6k|                    self.recognize_string(data, b'\'')
  121|       |                }
  122|       |            }
  123|  84.9k|            b'@' => self.recognize_lang_tag(data),
  124|   774k|            b'.' => match data.get(1) {
  125|   234k|                Some(b'0'..=b'9') => Self::recognize_number(data),
  126|   557k|                Some(_) => Some((1, Ok(N3Token::Punctuation(".")))),
  127|   190k|                None => is_ending.then_some((1, Ok(N3Token::Punctuation(".")))),
  128|       |            },
  129|       |            b'^' => {
  130|  14.3k|                if *data.get(1)? == b'^' {
  131|  2.81k|                    Some((2, Ok(N3Token::Punctuation("^^"))))
  132|       |                } else {
  133|  10.5k|                    Some((1, Ok(N3Token::Punctuation("^"))))
  134|       |                }
  135|       |            }
  136|   392k|            b'(' => Some((1, Ok(N3Token::Punctuation("(")))),
  137|  35.3k|            b')' => Some((1, Ok(N3Token::Punctuation(")")))),
  138|  28.9k|            b'[' => Some((1, Ok(N3Token::Punctuation("[")))),
  139|  12.7k|            b']' => Some((1, Ok(N3Token::Punctuation("]")))),
  140|       |            b'{' => {
  141|   357k|                if *data.get(1)? == b'|' {
  142|   243k|                    Some((2, Ok(N3Token::Punctuation("{|"))))
  143|       |                } else {
  144|  69.6k|                    Some((1, Ok(N3Token::Punctuation("{"))))
  145|       |                }
  146|       |            }
  147|  9.40k|            b'}' => Some((1, Ok(N3Token::Punctuation("}")))),
  148|   124k|            b',' => Some((1, Ok(N3Token::Punctuation(",")))),
  149|  21.9k|            b';' => Some((1, Ok(N3Token::Punctuation(";")))),
  150|  13.4k|            b'!' => Some((1, Ok(N3Token::Punctuation("!")))),
  151|       |            b'|' => {
  152|  5.97k|                if *data.get(1)? == b'}' {
  153|    699|                    Some((2, Ok(N3Token::Punctuation("|}"))))
  154|       |                } else {
  155|  3.76k|                    Some((1, Ok(N3Token::Punctuation("|"))))
  156|       |                }
  157|       |            }
  158|       |            b'=' => {
  159|  26.9k|                if *data.get(1)? == b'>' {
  160|  1.62k|                    Some((2, Ok(N3Token::Punctuation("=>"))))
  161|       |                } else {
  162|  23.8k|                    Some((1, Ok(N3Token::Punctuation("="))))
  163|       |                }
  164|       |            }
  165|  3.09M|            b'0'..=b'9' | b'+' | b'-' => Self::recognize_number(data),
  166|  50.6k|            b'?' => self.recognize_variable(data, is_ending),
  167|  2.13M|            _ => self.recognize_pname_or_keyword(data, is_ending),
  168|       |        }
  169|  13.1M|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer3new:
  173|  33.5k|    pub fn new(mode: N3LexerMode, unchecked: bool) -> Self {
  174|  33.5k|        Self { mode, unchecked }
  175|  33.5k|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer13recognize_iri:
  177|  2.78M|    fn recognize_iri(
  178|  2.78M|        &self,
  179|  2.78M|        data: &[u8],
  180|  2.78M|        options: &N3LexerOptions,
  181|  2.78M|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  182|  2.78M|        // [18] IRIREF  ::=  '<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
  183|  2.78M|        let mut string = Vec::new();
  184|  2.78M|        let mut i = 1;
  185|       |        loop {
  186|  2.79M|            let end = memchr2(b'>', b'\\', &data[i..])?;
  187|  2.57M|            string.extend_from_slice(&data[i..i + end]);
  188|  2.57M|            i += end;
  189|  2.57M|            match data[i] {
  190|       |                b'>' => {
  191|       |                    #[allow(clippy::range_plus_one)]
  192|  2.56M|                    return Some((i + 1, self.parse_iri(string, 0..i + 1, options)));
  193|       |                }
  194|       |                b'\\' => {
  195|  11.5k|                    let (additional, c) = self.recognize_escape(&data[i..], i, false)?;
  196|  6.22k|                    i += additional + 1;
  197|  6.22k|                    match c {
  198|  2.25k|                        Ok(c) => {
  199|  2.25k|                            let mut buf = [0; 4];
  200|  2.25k|                            string.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  201|  2.25k|                        }
  202|  3.97k|                        Err(e) => return Some((i, Err(e))),
  203|       |                    }
  204|       |                }
  205|      0|                _ => unreachable!(),
  206|       |            }
  207|       |        }
  208|  2.78M|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer9parse_iri:
  210|  2.56M|    fn parse_iri(
  211|  2.56M|        &self,
  212|  2.56M|        iri: Vec<u8>,
  213|  2.56M|        position: Range<usize>,
  214|  2.56M|        options: &N3LexerOptions,
  215|  2.56M|    ) -> Result<N3Token<'static>, TokenRecognizerError> {
  216|  2.56M|        let iri = string_from_utf8(iri, position.clone())?;
  217|       |        Ok(N3Token::IriRef(
  218|  2.54M|            if let Some(base_iri) = options.base_iri.as_ref() {
  219|   619k|                if self.unchecked {
  220|   205k|                    base_iri.resolve_unchecked(&iri)
  221|       |                } else {
  222|   413k|                    base_iri
  223|   413k|                        .resolve(&iri)
  224|   413k|                        .map_err(|e| (position, e.to_string()))?
  225|       |                }
  226|   586k|                .into_inner()
  227|  1.93M|            } else if self.unchecked {
  228|      0|                iri
  229|       |            } else {
  230|  1.93M|                Iri::parse(iri)
  231|  1.93M|                    .map_err(|e| (position, e.to_string()))?
  232|  1.93M|                    .into_inner()
  233|       |            },
  234|       |        ))
  235|  2.56M|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer26recognize_pname_or_keyword:
  237|  2.13M|    fn recognize_pname_or_keyword<'a>(
  238|  2.13M|        &self,
  239|  2.13M|        data: &'a [u8],
  240|  2.13M|        is_ending: bool,
  241|  2.13M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  242|  2.13M|        // [139s]  PNAME_NS   ::=  PN_PREFIX? ':'
  243|  2.13M|        // [140s]  PNAME_LN   ::=  PNAME_NS PN_LOCAL
  244|  2.13M|        // [167s]  PN_PREFIX  ::=  PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
  245|  2.13M|        let mut i = 0;
  246|       |        loop {
  247|  4.44M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  248|  4.24M|                match r {
  249|  3.84M|                    Ok((c, consumed)) => {
  250|  3.84M|                        if c == ':' {
  251|   195k|                            i += consumed;
  252|   195k|                            break;
  253|  3.64M|                        } else if i == 0 {
  254|  1.56M|                            if !Self::is_possible_pn_chars_base(c) {
  255|  1.14M|                                return Some((
  256|  1.14M|                                    consumed,
  257|  1.14M|                                    Err((
  258|  1.14M|                                        0..consumed,
  259|  1.14M|                                        format!(
  260|  1.14M|                                            "'{c}' is not allowed at the beginning of a prefix name"
  261|  1.14M|                                        ),
  262|  1.14M|                                    )
  263|  1.14M|                                        .into()),
  264|  1.14M|                                ));
  265|   420k|                            }
  266|   420k|                            i += consumed;
  267|  2.08M|                        } else if Self::is_possible_pn_chars(c) || c == '.' {
  268|  1.89M|                            i += consumed;
  269|  1.89M|                        } else {
  270|   251k|                            while data[..i].ends_with(b".") {
  271|  59.0k|                                i -= 1;
  272|  59.0k|                            }
  273|   192k|                            return Some((
  274|   192k|                                i,
  275|   192k|                                str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  276|   192k|                            ));
  277|       |                        }
  278|       |                    }
  279|   399k|                    Err(e) => return Some((e.location.end, Err(e))),
  280|       |                }
  281|   202k|            } else if is_ending {
  282|  4.22k|                while data[..i].ends_with(b".") {
  283|    716|                    i -= 1;
  284|    716|                }
  285|  3.51k|                return Some(if i == 0 {
  286|  1.04k|                    (
  287|  1.04k|                        1,
  288|  1.04k|                        Err((0..1, format!("Unexpected byte {}", data[0])).into()),
  289|  1.04k|                    )
  290|       |                } else {
  291|  2.46k|                    (
  292|  2.46k|                        i,
  293|  2.46k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  294|  2.46k|                    )
  295|       |                });
  296|       |            } else {
  297|   198k|                return None;
  298|       |            }
  299|       |        }
  300|   195k|        let pn_prefix = match str_from_utf8(&data[..i - 1], 0..i - 1) {
  301|   195k|            Ok(pn_prefix) => pn_prefix,
  302|      0|            Err(e) => return Some((i, Err(e))),
  303|       |        };
  304|   195k|        if pn_prefix.ends_with('.') {
  305|    150|            return Some((
  306|    150|                i,
  307|    150|                Err((
  308|    150|                    0..i,
  309|    150|                    format!(
  310|    150|                        "'{pn_prefix}' is not a valid prefix: prefixes are not allowed to end with '.'"),
  311|    150|                )
  312|    150|                    .into()),
  313|    150|            ));
  314|   195k|        }
  315|       |
  316|   147k|        let (consumed, pn_local_result) =
  317|   195k|            self.recognize_optional_pn_local(&data[i..], is_ending)?;
  318|   147k|        Some((
  319|   147k|            consumed + i,
  320|   147k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|       |                prefix: pn_prefix,
  322|       |                local,
  323|       |                might_be_invalid_iri,
  324|   147k|            }),
  325|   147k|        ))
  326|  2.13M|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer18recognize_variable:
  328|  50.6k|    fn recognize_variable<'a>(
  329|  50.6k|        &self,
  330|  50.6k|        data: &'a [u8],
  331|  50.6k|        is_ending: bool,
  332|  50.6k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  333|       |        // [36]  QUICK_VAR_NAME  ::=  "?" PN_LOCAL
  334|  50.6k|        let (consumed, result) = self.recognize_optional_pn_local(&data[1..], is_ending)?;
  335|  30.6k|        Some((
  336|  30.6k|            consumed + 1,
  337|  30.6k|            result.and_then(|(name, _)| {
  338|       |                if name.is_empty() {
  339|       |                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|       |                    Ok(N3Token::Variable(name))
  342|       |                }
  343|  30.6k|            }),
  344|  30.6k|        ))
  345|  50.6k|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer27recognize_optional_pn_local:
  347|   245k|    fn recognize_optional_pn_local<'a>(
  348|   245k|        &self,
  349|   245k|        data: &'a [u8],
  350|   245k|        is_ending: bool,
  351|   245k|    ) -> Option<(usize, Result<(Cow<'a, str>, bool), TokenRecognizerError>)> {
  352|   245k|        // [168s]  PN_LOCAL  ::=  (PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
  353|   245k|        let mut i = 0;
  354|   245k|        let mut buffer = None; // Buffer if there are some escaped characters
  355|   245k|        let mut position_that_is_already_in_buffer = 0;
  356|   245k|        let mut might_be_invalid_iri = false;
  357|   245k|        let mut ends_with_unescaped_dot = 0;
  358|       |        loop {
  359|  1.32M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  360|  1.26M|                match r {
  361|  1.25M|                    Ok((c, consumed)) => {
  362|  1.25M|                        if c == '%' {
  363|  5.17k|                            i += 1;
  364|  5.17k|                            let a = char::from(*data.get(i)?);
  365|  2.93k|                            i += 1;
  366|  2.93k|                            let b = char::from(*data.get(i)?);
  367|  2.45k|                            if !a.is_ascii_hexdigit() || !b.is_ascii_hexdigit() {
  368|    390|                                return Some((i + 1, Err((
  369|    390|                                    i - 2..=i, format!("escapes in IRIs should be % followed by two hexadecimal characters, found '%{a}{b}'")
  370|    390|                                ).into())));
  371|  2.06k|                            }
  372|  2.06k|                            i += 1;
  373|  2.06k|                            ends_with_unescaped_dot = 0;
  374|  1.25M|                        } else if c == '\\' {
  375|   190k|                            i += 1;
  376|   190k|                            let a = char::from(*data.get(i)?);
  377|   188k|                            if self.unchecked
  378|   137k|                                || matches!(
  379|   172k|                                    a,
  380|       |                                    '_' | '~'
  381|       |                                        | '.'
  382|       |                                        | '-'
  383|       |                                        | '!'
  384|       |                                        | '$'
  385|       |                                        | '&'
  386|       |                                        | '\''
  387|       |                                        | '('
  388|       |                                        | ')'
  389|       |                                        | '*'
  390|       |                                        | '+'
  391|       |                                        | ','
  392|       |                                        | ';'
  393|       |                                        | '='
  394|       |                                )
  395|  50.9k|                            {
  396|  50.9k|                                // ok to escape
  397|   137k|                            } else if matches!(a, '/' | '?' | '#' | '@' | '%') {
  398|   134k|                                // ok to escape but requires IRI validation
  399|   134k|                                might_be_invalid_iri = true;
  400|   134k|                            } else {
  401|  2.61k|                                return Some((i + 1, Err((
  402|  2.61k|                                    i..=i, format!("The character that are allowed to be escaped in IRIs are _~.-!$&'()*+,;=/?#@%, found '{a}'")
  403|  2.61k|                                ).into())));
  404|       |                            }
  405|   185k|                            let buffer = buffer.get_or_insert_with(String::new);
  406|   185k|                            // We add the missing bytes
  407|   185k|                            if i - position_that_is_already_in_buffer > 1 {
  408|  48.5k|                                buffer.push_str(
  409|  48.5k|                                    match str_from_utf8(
  410|  48.5k|                                        &data[position_that_is_already_in_buffer..i - 1],
  411|  48.5k|                                        position_that_is_already_in_buffer..i - 1,
  412|  48.5k|                                    ) {
  413|  48.5k|                                        Ok(data) => data,
  414|      0|                                        Err(e) => return Some((i, Err(e))),
  415|       |                                    },
  416|       |                                )
  417|   137k|                            }
  418|   185k|                            buffer.push(a);
  419|   185k|                            i += 1;
  420|   185k|                            position_that_is_already_in_buffer = i;
  421|   185k|                            ends_with_unescaped_dot = 0;
  422|  1.06M|                        } else if i == 0 {
  423|   154k|                            if !(Self::is_possible_pn_chars_u(c) || c == ':' || c.is_ascii_digit())
  424|       |                            {
  425|  46.3k|                                return Some((0, Ok((Cow::Borrowed(""), false))));
  426|   108k|                            }
  427|   108k|                            if !self.unchecked {
  428|       |                                might_be_invalid_iri |=
  429|  73.9k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  430|  73.9k|                                        || c == ':';
  431|  34.3k|                            }
  432|   108k|                            i += consumed;
  433|   907k|                        } else if Self::is_possible_pn_chars(c) || c == ':' {
  434|   689k|                            if !self.unchecked {
  435|       |                                might_be_invalid_iri |=
  436|   462k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  437|   462k|                                        || c == ':';
  438|   227k|                            }
  439|   689k|                            i += consumed;
  440|   689k|                            ends_with_unescaped_dot = 0;
  441|   217k|                        } else if c == '.' {
  442|  94.5k|                            i += consumed;
  443|  94.5k|                            ends_with_unescaped_dot += 1;
  444|  94.5k|                        } else {
  445|   123k|                            let buffer = if let Some(mut buffer) = buffer {
  446|  72.5k|                                buffer.push_str(
  447|  72.5k|                                    match str_from_utf8(
  448|  72.5k|                                        &data[position_that_is_already_in_buffer..i],
  449|  72.5k|                                        position_that_is_already_in_buffer..i,
  450|  72.5k|                                    ) {
  451|  72.5k|                                        Ok(data) => data,
  452|      0|                                        Err(e) => return Some((i, Err(e))),
  453|       |                                    },
  454|       |                                );
  455|       |                                // We do not include the last dots
  456|  72.5k|                                for _ in 0..ends_with_unescaped_dot {
  457|  1.94k|                                    buffer.pop();
  458|  1.94k|                                }
  459|  72.5k|                                i -= ends_with_unescaped_dot;
  460|  72.5k|                                Cow::Owned(buffer)
  461|       |                            } else {
  462|  50.6k|                                let mut data = match str_from_utf8(&data[..i], 0..i) {
  463|  50.6k|                                    Ok(data) => data,
  464|      0|                                    Err(e) => return Some((i, Err(e))),
  465|       |                                };
  466|       |                                // We do not include the last dots
  467|  50.6k|                                data = &data[..data.len() - ends_with_unescaped_dot];
  468|  50.6k|                                i -= ends_with_unescaped_dot;
  469|  50.6k|                                Cow::Borrowed(data)
  470|       |                            };
  471|   123k|                            return Some((i, Ok((buffer, might_be_invalid_iri))));
  472|       |                        }
  473|       |                    }
  474|  4.13k|                    Err(e) => return Some((e.location.end, Err(e))),
  475|       |                }
  476|  63.8k|            } else if is_ending {
  477|  1.20k|                let buffer = if let Some(mut buffer) = buffer {
  478|       |                    // We do not include the last dot
  479|    769|                    while buffer.ends_with('.') {
  480|    391|                        buffer.pop();
  481|    391|                        i -= 1;
  482|    391|                    }
  483|    378|                    Cow::Owned(buffer)
  484|       |                } else {
  485|    831|                    let mut data = match str_from_utf8(&data[..i], 0..i) {
  486|    831|                        Ok(data) => data,
  487|      0|                        Err(e) => return Some((i, Err(e))),
  488|       |                    };
  489|       |                    // We do not include the last dot
  490|  1.32k|                    while let Some(d) = data.strip_suffix('.') {
  491|    490|                        data = d;
  492|    490|                        i -= 1;
  493|    490|                    }
  494|    831|                    Cow::Borrowed(data)
  495|       |                };
  496|  1.20k|                return Some((i, Ok((buffer, might_be_invalid_iri))));
  497|       |            } else {
  498|  62.6k|                return None;
  499|       |            }
  500|       |        }
  501|   245k|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer26recognize_blank_node_label:
  503|   236k|    fn recognize_blank_node_label(
  504|   236k|        data: &[u8],
  505|   236k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  506|   236k|        // [141s]  BLANK_NODE_LABEL  ::=  '_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
  507|   236k|        let mut i = 2;
  508|       |        loop {
  509|  5.54M|            match Self::recognize_unicode_char(&data[i..], i)? {
  510|  5.49M|                Ok((c, consumed)) => {
  511|  5.49M|                    if (i == 2 && (Self::is_possible_pn_chars_u(c) || c.is_ascii_digit()))
  512|  5.28M|                        || (i > 2 && Self::is_possible_pn_chars(c))
  513|  5.30M|                    {
  514|  5.30M|                        // Ok
  515|  5.30M|                    } else if i > 2 && c == '.' {
  516|  8.62k|                        if data[i - 1] == b'.' {
  517|    222|                            i -= 1;
  518|    222|                            return Some((
  519|    222|                                i,
  520|    222|                                str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  521|    222|                            ));
  522|  8.39k|                        }
  523|   180k|                    } else if i == 0 {
  524|      0|                        return Some((
  525|      0|                            i,
  526|      0|                            Err((0..i, "A blank node ID should not be empty").into()),
  527|      0|                        ));
  528|   180k|                    } else if data[i - 1] == b'.' {
  529|  1.64k|                        i -= 1;
  530|  1.64k|                        return Some((
  531|  1.64k|                            i,
  532|  1.64k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  533|  1.64k|                        ));
  534|       |                    } else {
  535|   178k|                        return Some((
  536|   178k|                            i,
  537|   178k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  538|   178k|                        ));
  539|       |                    }
  540|  5.30M|                    i += consumed;
  541|       |                }
  542|    700|                Err(e) => return Some((e.location.end, Err(e))),
  543|       |            }
  544|       |        }
  545|   236k|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer18recognize_lang_tag:
  547|  84.9k|    fn recognize_lang_tag<'a>(
  548|  84.9k|        &self,
  549|  84.9k|        data: &'a [u8],
  550|  84.9k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  551|  84.9k|        // [144s]  LANGTAG  ::=  '@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
  552|  84.9k|        let mut is_last_block_empty = true;
  553|   522k|        for (i, c) in data[1..].iter().enumerate() {
  554|   522k|            if c.is_ascii_alphabetic() {
  555|   419k|                is_last_block_empty = false;
  556|   419k|            } else if i == 0 {
  557|  10.3k|                return Some((
  558|  10.3k|                    1,
  559|  10.3k|                    Err((1..2, "A language code should always start with a letter").into()),
  560|  10.3k|                ));
  561|  92.3k|            } else if is_last_block_empty {
  562|  2.13k|                return Some((i, self.parse_lang_tag(&data[1..i], 1..i - 1)));
  563|  90.1k|            } else if *c == b'-' {
  564|  56.6k|                is_last_block_empty = true;
  565|  56.6k|            } else {
  566|  33.4k|                return Some((i + 1, self.parse_lang_tag(&data[1..=i], 1..i)));
  567|       |            }
  568|       |        }
  569|  38.9k|        None
  570|  84.9k|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer14parse_lang_tag:
  572|  35.6k|    fn parse_lang_tag<'a>(
  573|  35.6k|        &self,
  574|  35.6k|        lang_tag: &'a [u8],
  575|  35.6k|        position: Range<usize>,
  576|  35.6k|    ) -> Result<N3Token<'a>, TokenRecognizerError> {
  577|  35.6k|        let lang_tag = str_from_utf8(lang_tag, position.clone())?;
  578|  35.6k|        Ok(N3Token::LangTag(if self.unchecked {
  579|  11.2k|            lang_tag
  580|       |        } else {
  581|  24.3k|            LanguageTag::parse(lang_tag)
  582|  24.3k|                .map_err(|e| (position.clone(), e.to_string()))?
  583|  20.3k|                .into_inner()
  584|       |        }))
  585|  35.6k|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer16recognize_string:
  587|  78.1k|    fn recognize_string(
  588|  78.1k|        &self,
  589|  78.1k|        data: &[u8],
  590|  78.1k|        delimiter: u8,
  591|  78.1k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  592|  78.1k|        // [22]  STRING_LITERAL_QUOTE         ::=  '"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
  593|  78.1k|        // [23]  STRING_LITERAL_SINGLE_QUOTE  ::=  "'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
  594|  78.1k|        let mut string = String::new();
  595|  78.1k|        let mut i = 1;
  596|       |        loop {
  597|   113k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  598|  79.4k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  599|  77.9k|                Ok(s) => string.push_str(s),
  600|  1.51k|                Err(e) => return Some((end, Err(e))),
  601|       |            };
  602|  77.9k|            i += end;
  603|  77.9k|            match data[i] {
  604|  77.9k|                c if c == delimiter => {
  605|  20.8k|                    return Some((i + 1, Ok(N3Token::String(string))));
  606|       |                }
  607|       |                b'\\' => {
  608|  57.0k|                    let (additional, c) = self.recognize_escape(&data[i..], i, true)?;
  609|  50.7k|                    i += additional + 1;
  610|  50.7k|                    match c {
  611|  35.4k|                        Ok(c) => {
  612|  35.4k|                            string.push(c);
  613|  35.4k|                        }
  614|  15.2k|                        Err(e) => {
  615|       |                            // We read until the end of string char
  616|  15.2k|                            let end = memchr(delimiter, &data[i..])?;
  617|  2.01k|                            return Some((i + end + 1, Err(e)));
  618|       |                        }
  619|       |                    }
  620|       |                }
  621|      0|                _ => unreachable!(),
  622|       |            }
  623|       |        }
  624|  78.1k|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer21recognize_long_string:
  626|  29.8k|    fn recognize_long_string(
  627|  29.8k|        &self,
  628|  29.8k|        data: &[u8],
  629|  29.8k|        delimiter: u8,
  630|  29.8k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  631|  29.8k|        // [24]  STRING_LITERAL_LONG_SINGLE_QUOTE  ::=  "'''" (("'" | "''")? ([^'\] | ECHAR | UCHAR))* "'''"
  632|  29.8k|        // [25]  STRING_LITERAL_LONG_QUOTE         ::=  '"""' (('"' | '""')? ([^"\] | ECHAR | UCHAR))* '"""'
  633|  29.8k|        let mut string = String::new();
  634|  29.8k|        let mut i = 3;
  635|       |        loop {
  636|  53.1k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  637|  35.9k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  638|  34.7k|                Ok(s) => string.push_str(s),
  639|  1.25k|                Err(e) => return Some((end, Err(e))),
  640|       |            };
  641|  34.7k|            i += end;
  642|  34.7k|            match data[i] {
  643|  34.7k|                c if c == delimiter => {
  644|  31.2k|                    if *data.get(i + 1)? == delimiter && *data.get(i + 2)? == delimiter {
  645|  9.80k|                        return Some((i + 3, Ok(N3Token::String(string))));
  646|  20.4k|                    }
  647|  20.4k|                    i += 1;
  648|  20.4k|                    string.push(char::from(delimiter));
  649|       |                }
  650|       |                b'\\' => {
  651|  3.44k|                    let (additional, c) = self.recognize_escape(&data[i..], i, true)?;
  652|  3.07k|                    i += additional + 1;
  653|  3.07k|                    match c {
  654|  2.93k|                        Ok(c) => {
  655|  2.93k|                            string.push(c);
  656|  2.93k|                        }
  657|    148|                        Err(e) => return Some((i, Err(e))),
  658|       |                    }
  659|       |                }
  660|      0|                _ => unreachable!(),
  661|       |            }
  662|       |        }
  663|  29.8k|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer16recognize_number:
  665|  2.14M|    fn recognize_number(data: &[u8]) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  666|  2.14M|        // [19]  INTEGER    ::=  [+-]? [0-9]+
  667|  2.14M|        // [20]  DECIMAL    ::=  [+-]? [0-9]* '.' [0-9]+
  668|  2.14M|        // [21]  DOUBLE     ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  669|  2.14M|        // [154s] EXPONENT  ::=  [eE] [+-]? [0-9]+
  670|  2.14M|        let mut i = 0;
  671|  2.14M|        let c = *data.first()?;
  672|  2.14M|        if matches!(c, b'+' | b'-') {
  673|  48.0k|            i += 1;
  674|  2.09M|        }
  675|       |        // We read the digits before .
  676|  2.14M|        let mut count_before: usize = 0;
  677|       |        loop {
  678|  6.99M|            let c = *data.get(i)?;
  679|  6.91M|            if c.is_ascii_digit() {
  680|  4.84M|                i += 1;
  681|  4.84M|                count_before += 1;
  682|  4.84M|            } else {
  683|  2.06M|                break;
  684|       |            }
  685|       |        }
  686|       |
  687|       |        // We read the digits after .
  688|       |        #[allow(clippy::if_then_some_else_none)]
  689|  2.06M|        let count_after = if *data.get(i)? == b'.' {
  690|   125k|            i += 1;
  691|   125k|
  692|   125k|            let mut count_after = 0;
  693|       |            loop {
  694|   232k|                let c = *data.get(i)?;
  695|   215k|                if c.is_ascii_digit() {
  696|   106k|                    i += 1;
  697|   106k|                    count_after += 1;
  698|   106k|                } else {
  699|   108k|                    break;
  700|   108k|                }
  701|   108k|            }
  702|   108k|            Some(count_after)
  703|       |        } else {
  704|  1.94M|            None
  705|       |        };
  706|       |
  707|       |        // End
  708|  2.04M|        let c = *data.get(i)?;
  709|  2.04M|        if matches!(c, b'e' | b'E') {
  710|  1.42M|            i += 1;
  711|       |
  712|  1.42M|            let c = *data.get(i)?;
  713|  1.42M|            if matches!(c, b'+' | b'-') {
  714|  2.45k|                i += 1;
  715|  1.42M|            }
  716|       |
  717|  1.42M|            let mut found = false;
  718|       |            loop {
  719|  7.34M|                let c = *data.get(i)?;
  720|  7.29M|                if c.is_ascii_digit() {
  721|  5.91M|                    i += 1;
  722|  5.91M|                    found = true;
  723|  5.91M|                } else {
  724|  1.37M|                    break;
  725|  1.37M|                }
  726|  1.37M|            }
  727|  1.37M|            Some((
  728|  1.37M|                i,
  729|  1.37M|                if !found {
  730|  3.68k|                    Err((0..i, "A double exponent cannot be empty").into())
  731|  1.36M|                } else if count_before == 0 && count_after.unwrap_or(0) == 0 {
  732|    111|                    Err((0..i, "A double should not be empty").into())
  733|       |                } else {
  734|  1.36M|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Double)
  735|       |                },
  736|       |            ))
  737|   618k|        } else if let Some(count_after) = count_after {
  738|   105k|            if count_after == 0 {
  739|       |                // We do not consume the '.' after all
  740|  76.2k|                i -= 1;
  741|  76.2k|                Some((
  742|  76.2k|                    i,
  743|  76.2k|                    if count_before == 0 {
  744|  10.3k|                        Err((0..i, "An integer should not be empty").into())
  745|       |                    } else {
  746|  65.8k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  747|       |                    },
  748|       |                ))
  749|       |            } else {
  750|  29.3k|                Some((i, str_from_utf8(&data[..i], 0..i).map(N3Token::Decimal)))
  751|       |            }
  752|       |        } else {
  753|       |            Some((
  754|   513k|                i,
  755|   513k|                if count_before == 0 {
  756|  24.1k|                    Err((0..i, "An integer should not be empty").into())
  757|       |                } else {
  758|   489k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  759|       |                },
  760|       |            ))
  761|       |        }
  762|  2.14M|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer16recognize_escape:
  764|  72.0k|    fn recognize_escape(
  765|  72.0k|        &self,
  766|  72.0k|        data: &[u8],
  767|  72.0k|        position: usize,
  768|  72.0k|        with_echar: bool,
  769|  72.0k|    ) -> Option<(usize, Result<char, TokenRecognizerError>)> {
  770|  72.0k|        // [26]   UCHAR  ::=  '\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
  771|  72.0k|        // [159s] ECHAR  ::=  '\' [tbnrf"'\]
  772|  72.0k|        match *data.get(1)? {
  773|  20.1k|            b'u' => match Self::recognize_hex_char(&data[2..], 4, 'u', position) {
  774|  19.6k|                Ok(c) => Some((5, Ok(c?))),
  775|    487|                Err(e) => {
  776|    487|                    if self.unchecked {
  777|    190|                        match Self::recognize_utf16_surrogate_pair(&data[2..], position) {
  778|      0|                            Ok(c) => Some((11, Ok(c?))),
  779|    190|                            Err(e) => Some((5, Err(e))),
  780|       |                        }
  781|       |                    } else {
  782|    297|                        Some((5, Err(e)))
  783|       |                    }
  784|       |                }
  785|       |            },
  786|  2.98k|            b'U' => match Self::recognize_hex_char(&data[2..], 8, 'u', position) {
  787|  2.49k|                Ok(c) => Some((9, Ok(c?))),
  788|    495|                Err(e) => Some((9, Err(e))),
  789|       |            },
  790|    491|            b't' if with_echar => Some((1, Ok('\t'))),
  791|    366|            b'b' if with_echar => Some((1, Ok('\x08'))),
  792|    521|            b'n' if with_echar => Some((1, Ok('\n'))),
  793|    623|            b'r' if with_echar => Some((1, Ok('\r'))),
  794|    364|            b'f' if with_echar => Some((1, Ok('\x0C'))),
  795|  1.17k|            b'"' if with_echar => Some((1, Ok('"'))),
  796|    979|            b'\'' if with_echar => Some((1, Ok('\''))),
  797|  15.0k|            b'\\' if with_echar => Some((1, Ok('\\'))),
  798|  18.3k|            c => Some((
  799|  18.3k|                1,
  800|  18.3k|                Err((
  801|  18.3k|                    position..position + 2,
  802|  18.3k|                    format!("Unexpected escape character '\\{}'", char::from(c)),
  803|  18.3k|                )
  804|  18.3k|                    .into()),
  805|  18.3k|            )), // TODO: read until end of string
  806|       |        }
  807|  72.0k|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer18recognize_hex_char:
  809|  23.1k|    fn recognize_hex_char(
  810|  23.1k|        data: &[u8],
  811|  23.1k|        len: usize,
  812|  23.1k|        escape_char: char,
  813|  23.1k|        position: usize,
  814|  23.1k|    ) -> Result<Option<char>, TokenRecognizerError> {
  815|  23.1k|        if data.len() < len {
  816|  1.10k|            return Ok(None);
  817|  22.0k|        }
  818|  22.0k|        let val = str_from_utf8(&data[..len], position..position + len + 2)?;
  819|  21.8k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  820|       |            (
  821|       |                position..position + len + 2,
  822|       |                format!(
  823|       |                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  824|       |                ),
  825|       |            )
  826|  21.8k|        })?;
  827|  21.2k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  828|       |            (
  829|       |                position..position + len +2,
  830|       |                format!(
  831|       |                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  832|       |                ),
  833|       |            )
  834|  21.2k|        })?;
  835|  21.0k|        Ok(Some(c))
  836|  23.1k|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer30recognize_utf16_surrogate_pair:
  838|    190|    fn recognize_utf16_surrogate_pair(
  839|    190|        data: &[u8],
  840|    190|        position: usize,
  841|    190|    ) -> Result<Option<char>, TokenRecognizerError> {
  842|    190|        let Some(val_high_slice) = data.get(..4) else {
  843|      0|            return Ok(None);
  844|       |        };
  845|    190|        let val_high = str_from_utf8(val_high_slice, position..position + 6)?;
  846|    113|        let surrogate_high = u16::from_str_radix(val_high, 16).map_err(|e| {
  847|       |            (
  848|       |                position..position + 6,
  849|       |                format!(
  850|       |                    "The escape sequence '\\u{val_high}' is not a valid hexadecimal string: {e}"
  851|       |                ),
  852|       |            )
  853|    113|        })?;
  854|       |
  855|       |        // TODO: replace with [`u16::is_utf16_surrogate`] when #94919 is stable
  856|      0|        if !matches!(surrogate_high, 0xD800..=0xDFFF) {
  857|      0|            return Err((
  858|      0|                position..position + 6,
  859|      0|                format!("The escape sequence '\\u{val_high}' is not a UTF-16 surrogate"),
  860|      0|            )
  861|      0|                .into());
  862|      0|        }
  863|      0|        let Some(&d4) = data.get(4) else {
  864|      0|            return Ok(None);
  865|       |        };
  866|      0|        let Some(&d5) = data.get(5) else {
  867|      0|            return Ok(None);
  868|       |        };
  869|      0|        if d4 != b'\\' || d5 != b'u' {
  870|      0|            return Err((
  871|      0|                position..position + 6,
  872|      0|                format!(
  873|      0|                    "UTF-16 surrogate escape sequence '\\u{val_high}' must be followed by another surrogate escape sequence"),
  874|      0|            )
  875|      0|                .into());
  876|      0|        }
  877|       |
  878|      0|        let Some(val_low_slice) = data.get(6..10) else {
  879|      0|            return Ok(None);
  880|       |        };
  881|      0|        let val_low = str_from_utf8(val_low_slice, position + 6..position + 12)?;
  882|      0|        let surrogate_low = u16::from_str_radix(val_low, 16).map_err(|e| {
  883|       |            (
  884|       |                position + 6..position + 12,
  885|       |                format!(
  886|       |                    "The escape sequence '\\u{val_low}' is not a valid hexadecimal string: {e}"
  887|       |                ),
  888|       |            )
  889|      0|        })?;
  890|       |
  891|      0|        let mut chars = char::decode_utf16([surrogate_high, surrogate_low]);
  892|       |
  893|      0|        let c = chars.next()
  894|      0|            .and_then(Result::ok)
  895|      0|            .ok_or_else(|| {
  896|       |                (
  897|       |                    position..position + 12,
  898|       |                    format!(
  899|       |                        "Escape sequences '\\u{val_high}\\u{val_low}' do not form a valid UTF-16 surrogate pair"
  900|       |                    ),
  901|       |                )
  902|      0|            })?;
  903|       |
  904|      0|        debug_assert_eq!(
  905|      0|            chars.next(),
  906|       |            None,
  907|      0|            "Surrogate pair should combine to exactly one character"
  908|       |        );
  909|       |
  910|      0|        Ok(Some(c))
  911|    190|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer22recognize_unicode_char:
  913|  11.3M|    fn recognize_unicode_char(
  914|  11.3M|        data: &[u8],
  915|  11.3M|        position: usize,
  916|  11.3M|    ) -> Option<Result<(char, usize), TokenRecognizerError>> {
  917|  11.3M|        let mut code_point: u32;
  918|  11.3M|        let bytes_needed: usize;
  919|  11.3M|        let mut lower_boundary = 0x80;
  920|  11.3M|        let mut upper_boundary = 0xBF;
  921|       |
  922|  11.3M|        let byte = *data.first()?;
  923|  11.0M|        match byte {
  924|  11.0M|            0x00..=0x7F => return Some(Ok((char::from(byte), 1))),
  925|   282k|            0xC2..=0xDF => {
  926|   145k|                bytes_needed = 1;
  927|   145k|                code_point = u32::from(byte) & 0x1F;
  928|   145k|            }
  929|   137k|            0xE0..=0xEF => {
  930|  37.4k|                if byte == 0xE0 {
  931|  6.90k|                    lower_boundary = 0xA0;
  932|  30.5k|                }
  933|  37.4k|                if byte == 0xED {
  934|  2.92k|                    upper_boundary = 0x9F;
  935|  34.5k|                }
  936|  37.4k|                bytes_needed = 2;
  937|  37.4k|                code_point = u32::from(byte) & 0xF;
  938|       |            }
  939|  99.5k|            0xF0..=0xF4 => {
  940|  15.9k|                if byte == 0xF0 {
  941|  1.36k|                    lower_boundary = 0x90;
  942|  14.5k|                }
  943|  15.9k|                if byte == 0xF4 {
  944|  4.08k|                    upper_boundary = 0x8F;
  945|  11.8k|                }
  946|  15.9k|                bytes_needed = 3;
  947|  15.9k|                code_point = u32::from(byte) & 0x7;
  948|       |            }
  949|       |            _ => {
  950|   286k|                return Some(Err((
  951|   286k|                    position..=position,
  952|   286k|                    "Invalid UTF-8 character encoding",
  953|   286k|                )
  954|   286k|                    .into()))
  955|       |            }
  956|       |        }
  957|       |
  958|   209k|        for i in 1..=bytes_needed {
  959|   209k|            let byte = *data.get(i)?;
  960|   155k|            if byte < lower_boundary || upper_boundary < byte {
  961|   117k|                return Some(Err((
  962|   117k|                    position..=position + i,
  963|   117k|                    "Invalid UTF-8 character encoding",
  964|   117k|                )
  965|   117k|                    .into()));
  966|  38.6k|            }
  967|  38.6k|            lower_boundary = 0x80;
  968|  38.6k|            upper_boundary = 0xBF;
  969|  38.6k|            code_point = (code_point << 6) | (u32::from(byte) & 0x3F);
  970|       |        }
  971|       |
  972|  28.2k|        Some(
  973|  28.2k|            char::from_u32(code_point)
  974|  28.2k|                .map(|c| (c, bytes_needed + 1))
  975|  28.2k|                .ok_or_else(|| {
  976|       |                    (
  977|       |                        position..=position + bytes_needed,
  978|       |                        format!("The codepoint {code_point:X} is not a valid unicode character"),
  979|       |                    )
  980|       |                        .into()
  981|  28.2k|                }),
  982|  28.2k|        )
  983|  11.3M|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer25is_possible_pn_chars_base:
  986|  10.5M|    fn is_possible_pn_chars_base(c: char) -> bool {
  987|  10.5M|        matches!(c,
  988|  4.61M|        'A'..='Z'
  989|  3.21M|        | 'a'..='z'
  990|  27.9k|        | '\u{00C0}'..='\u{00D6}'
  991|  27.9k|        | '\u{00D8}'..='\u{00F6}'
  992|  27.7k|        | '\u{00F8}'..='\u{02FF}'
  993|  23.3k|        | '\u{0370}'..='\u{037D}'
  994|  23.2k|        | '\u{037F}'..='\u{1FFF}'
  995|  3.70k|        | '\u{200C}'..='\u{200D}'
  996|  3.70k|        | '\u{2070}'..='\u{218F}'
  997|  3.69k|        | '\u{2C00}'..='\u{2FEF}'
  998|  3.69k|        | '\u{3001}'..='\u{D7FF}'
  999|  1.43k|        | '\u{F900}'..='\u{FDCF}'
 1000|  1.14k|        | '\u{FDF0}'..='\u{FFFD}'
 1001|  1.14k|        | '\u{10000}'..='\u{EFFFF}')
 1002|  10.5M|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer22is_possible_pn_chars_u:
 1005|  8.98M|    pub(super) fn is_possible_pn_chars_u(c: char) -> bool {
 1006|  8.98M|        Self::is_possible_pn_chars_base(c) || c == '_'
 1007|  8.98M|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer20is_possible_pn_chars:
 1010|  8.55M|    pub(crate) fn is_possible_pn_chars(c: char) -> bool {
 1011|  8.55M|        Self::is_possible_pn_chars_u(c)
 1012|  4.70M|            || matches!(c,
 1013|  3.71M|        '-' | '0'..='9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
 1014|  8.55M|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer43is_possible_pn_chars_base_but_not_valid_iri:
 1016|   536k|    fn is_possible_pn_chars_base_but_not_valid_iri(c: char) -> bool {
 1017|   536k|        matches!(c, '\u{FFF0}'..='\u{FFFD}')
 1018|   536k|            || u32::from(c) % u32::from('\u{FFFE}') == 0
 1019|   536k|            || u32::from(c) % u32::from('\u{FFFF}') == 0
 1020|   536k|    }
_RNvNtCs3Okv3MbnXN6_5oxttl5lexer18resolve_local_name:
 1023|  94.3k|pub fn resolve_local_name(
 1024|  94.3k|    prefix: &str,
 1025|  94.3k|    local: &str,
 1026|  94.3k|    might_be_invalid_iri: bool,
 1027|  94.3k|    prefixes: &HashMap<String, Iri<String>>,
 1028|  94.3k|) -> Result<NamedNode, String> {
 1029|  94.3k|    if let Some(start) = prefixes.get(prefix) {
 1030|  74.9k|        let iri = format!("{start}{local}");
 1031|  74.9k|        if might_be_invalid_iri || start.path().is_empty() {
 1032|       |            // We validate again. We always validate if the local part might be the IRI authority.
 1033|  70.5k|            if let Err(e) = Iri::parse(iri.as_str()) {
 1034|  1.76k|                return Err(format!(
 1035|  1.76k|                    "The prefixed name {prefix}:{local} builds IRI {iri} that is invalid: {e}"
 1036|  1.76k|                ));
 1037|  68.8k|            }
 1038|  4.38k|        }
 1039|  73.1k|        Ok(NamedNode::new_unchecked(iri))
 1040|       |    } else {
 1041|  19.4k|        Err(format!("The prefix {prefix}: has not been declared"))
 1042|       |    }
 1043|  94.3k|}
_RNvNtCs3Okv3MbnXN6_5oxttl5lexer13str_from_utf8:
 1045|  2.86M|fn str_from_utf8(data: &[u8], range: Range<usize>) -> Result<&str, TokenRecognizerError> {
 1046|  2.86M|    str::from_utf8(data).map_err(|e| {
 1047|       |        (
 1048|       |            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
 1049|       |            format!("Invalid UTF-8: {e}"),
 1050|       |        )
 1051|       |            .into()
 1052|  2.86M|    })
 1053|  2.86M|}
_RNvNtCs3Okv3MbnXN6_5oxttl5lexer16string_from_utf8:
 1055|  2.56M|fn string_from_utf8(data: Vec<u8>, range: Range<usize>) -> Result<String, TokenRecognizerError> {
 1056|  2.56M|    String::from_utf8(data).map_err(|e| {
 1057|       |        (
 1058|       |            range.start + e.utf8_error().valid_up_to()
 1059|       |                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
 1060|       |            format!("Invalid UTF-8: {e}"),
 1061|       |        )
 1062|       |            .into()
 1063|  2.56M|    })
 1064|  2.56M|}

_RINvMs0_NtCs3Okv3MbnXN6_5oxttl5terseNtB6_14TriGRecognizer10new_parserINtNtCs3OstG5Tqy1X_5alloc3vec3VechEEB8_:
  955|  25.1k|    pub fn new_parser<B>(
  956|  25.1k|        data: B,
  957|  25.1k|        is_ending: bool,
  958|  25.1k|        with_graph_name: bool,
  959|  25.1k|        #[cfg(feature = "rdf-star")] with_quoted_triples: bool,
  960|  25.1k|        unchecked: bool,
  961|  25.1k|        base_iri: Option<Iri<String>>,
  962|  25.1k|        prefixes: HashMap<String, Iri<String>>,
  963|  25.1k|    ) -> Parser<B, Self> {
  964|  25.1k|        Parser::new(
  965|  25.1k|            Lexer::new(
  966|  25.1k|                N3Lexer::new(N3LexerMode::Turtle, unchecked),
  967|  25.1k|                data,
  968|  25.1k|                is_ending,
  969|  25.1k|                MIN_BUFFER_SIZE,
  970|  25.1k|                MAX_BUFFER_SIZE,
  971|  25.1k|                true,
  972|  25.1k|                Some(b"#"),
  973|  25.1k|            ),
  974|  25.1k|            Self {
  975|  25.1k|                stack: vec![TriGState::TriGDoc],
  976|  25.1k|                cur_subject: Vec::new(),
  977|  25.1k|                cur_predicate: Vec::new(),
  978|  25.1k|                cur_object: Vec::new(),
  979|  25.1k|                cur_graph: GraphName::DefaultGraph,
  980|  25.1k|            },
  981|  25.1k|            TriGRecognizerContext {
  982|  25.1k|                with_graph_name,
  983|  25.1k|                #[cfg(feature = "rdf-star")]
  984|  25.1k|                with_quoted_triples,
  985|  25.1k|                prefixes,
  986|  25.1k|                lexer_options: N3LexerOptions { base_iri },
  987|  25.1k|            },
  988|  25.1k|        )
  989|  25.1k|    }
_RINvMs0_NtCs3Okv3MbnXN6_5oxttl5terseNtB6_14TriGRecognizer10new_parserRShEB8_:
  955|  8.37k|    pub fn new_parser<B>(
  956|  8.37k|        data: B,
  957|  8.37k|        is_ending: bool,
  958|  8.37k|        with_graph_name: bool,
  959|  8.37k|        #[cfg(feature = "rdf-star")] with_quoted_triples: bool,
  960|  8.37k|        unchecked: bool,
  961|  8.37k|        base_iri: Option<Iri<String>>,
  962|  8.37k|        prefixes: HashMap<String, Iri<String>>,
  963|  8.37k|    ) -> Parser<B, Self> {
  964|  8.37k|        Parser::new(
  965|  8.37k|            Lexer::new(
  966|  8.37k|                N3Lexer::new(N3LexerMode::Turtle, unchecked),
  967|  8.37k|                data,
  968|  8.37k|                is_ending,
  969|  8.37k|                MIN_BUFFER_SIZE,
  970|  8.37k|                MAX_BUFFER_SIZE,
  971|  8.37k|                true,
  972|  8.37k|                Some(b"#"),
  973|  8.37k|            ),
  974|  8.37k|            Self {
  975|  8.37k|                stack: vec![TriGState::TriGDoc],
  976|  8.37k|                cur_subject: Vec::new(),
  977|  8.37k|                cur_predicate: Vec::new(),
  978|  8.37k|                cur_object: Vec::new(),
  979|  8.37k|                cur_graph: GraphName::DefaultGraph,
  980|  8.37k|            },
  981|  8.37k|            TriGRecognizerContext {
  982|  8.37k|                with_graph_name,
  983|  8.37k|                #[cfg(feature = "rdf-star")]
  984|  8.37k|                with_quoted_triples,
  985|  8.37k|                prefixes,
  986|  8.37k|                lexer_options: N3LexerOptions { base_iri },
  987|  8.37k|            },
  988|  8.37k|        )
  989|  8.37k|    }
_RINvMs0_NtCs3Okv3MbnXN6_5oxttl5terseNtB6_14TriGRecognizer5errorNtNtCs3OstG5Tqy1X_5alloc6string6StringEB8_:
  992|  21.1k|    fn error(
  993|  21.1k|        mut self,
  994|  21.1k|        errors: &mut Vec<RuleRecognizerError>,
  995|  21.1k|        msg: impl Into<RuleRecognizerError>,
  996|  21.1k|    ) -> Self {
  997|  21.1k|        errors.push(msg.into());
  998|  21.1k|        self.stack.clear();
  999|  21.1k|        self.cur_subject.clear();
 1000|  21.1k|        self.cur_predicate.clear();
 1001|  21.1k|        self.cur_object.clear();
 1002|  21.1k|        self.cur_graph = GraphName::DefaultGraph;
 1003|  21.1k|        self
 1004|  21.1k|    }
_RINvMs0_NtCs3Okv3MbnXN6_5oxttl5terseNtB6_14TriGRecognizer5errorReEB8_:
  992|   188k|    fn error(
  993|   188k|        mut self,
  994|   188k|        errors: &mut Vec<RuleRecognizerError>,
  995|   188k|        msg: impl Into<RuleRecognizerError>,
  996|   188k|    ) -> Self {
  997|   188k|        errors.push(msg.into());
  998|   188k|        self.stack.clear();
  999|   188k|        self.cur_subject.clear();
 1000|   188k|        self.cur_predicate.clear();
 1001|   188k|        self.cur_object.clear();
 1002|   188k|        self.cur_graph = GraphName::DefaultGraph;
 1003|   188k|        self
 1004|   188k|    }
_RNvMNtCs3Okv3MbnXN6_5oxttl5terseNtB2_21TriGRecognizerContext8prefixes:
   32|  25.1k|    pub fn prefixes(&self) -> Iter<'_, String, Iri<String>> {
   33|  25.1k|        self.prefixes.iter()
   34|  25.1k|    }
_RNvXs_NtCs3Okv3MbnXN6_5oxttl5terseNtB4_14TriGRecognizerNtNtNtB6_7toolkit6parser14RuleRecognizer20error_recovery_state:
   42|  1.69M|    fn error_recovery_state(mut self) -> Self {
   43|  1.69M|        self.stack.clear();
   44|  1.69M|        self.cur_subject.clear();
   45|  1.69M|        self.cur_predicate.clear();
   46|  1.69M|        self.cur_object.clear();
   47|  1.69M|        self.cur_graph = GraphName::DefaultGraph;
   48|  1.69M|        self
   49|  1.69M|    }
_RNvXs_NtCs3Okv3MbnXN6_5oxttl5terseNtB4_14TriGRecognizerNtNtNtB6_7toolkit6parser14RuleRecognizer14recognize_next:
   51|  11.9M|    fn recognize_next(
   52|  11.9M|        mut self,
   53|  11.9M|        token: N3Token<'_>,
   54|  11.9M|        context: &mut TriGRecognizerContext,
   55|  11.9M|        results: &mut Vec<Quad>,
   56|  11.9M|        errors: &mut Vec<RuleRecognizerError>,
   57|  11.9M|    ) -> Self {
   58|  11.9M|        if let Some(rule) = self.stack.pop() {
   59|  10.5M|            match rule {
   60|       |                // [1g] trigDoc      ::=  (directive | block)*
   61|       |                // [2g] block        ::=  triplesOrGraph | wrappedGraph | triples2 | "GRAPH" labelOrSubject wrappedGraph
   62|       |                // [3]  directive    ::=  prefixID | base | sparqlPrefix | sparqlBase
   63|       |                // [4]  prefixID     ::=  '@prefix' PNAME_NS IRIREF '.'
   64|       |                // [5]  base         ::=  '@base' IRIREF '.'
   65|       |                // [5s] sparqlPrefix ::=  "PREFIX" PNAME_NS IRIREF
   66|       |                // [6s] sparqlBase   ::=  "BASE" IRIREF
   67|       |                TriGState::TriGDoc => {
   68|   472k|                    self.cur_graph = GraphName::DefaultGraph;
   69|   472k|                    self.stack.push(TriGState::TriGDoc);
   70|  23.3k|                    match token {
   71|  23.0k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("base") => {
   72|  5.89k|                            self.stack.push(TriGState::BaseExpectIri);
   73|  5.89k|                            self
   74|       |                        }
   75|  17.1k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("prefix") => {
   76|    133|                            self.stack.push(TriGState::PrefixExpectPrefix);
   77|    133|                            self
   78|       |                        }
   79|  11.2k|                        N3Token::LangTag("prefix") => {
   80|  9.91k|                            self.stack.push(TriGState::ExpectDot);
   81|  9.91k|                            self.stack.push(TriGState::PrefixExpectPrefix);
   82|  9.91k|                            self
   83|       |                        }
   84|  1.30k|                        N3Token::LangTag("base") => {
   85|    128|                            self.stack.push(TriGState::ExpectDot);
   86|    128|                            self.stack.push(TriGState::BaseExpectIri);
   87|    128|                            self
   88|       |                        }
   89|      0|                        N3Token::PlainKeyword(k)
   90|  16.9k|                            if k.eq_ignore_ascii_case("graph") && context.with_graph_name =>
   91|      0|                        {
   92|      0|                            self.stack.push(TriGState::WrappedGraph);
   93|      0|                            self.stack.push(TriGState::GraphName);
   94|      0|                            self
   95|       |                        }
   96|   217k|                        N3Token::Punctuation("{") if context.with_graph_name => {
   97|  6.38k|                            self.stack.push(TriGState::WrappedGraph);
   98|  6.38k|                            self.recognize_next(token, context, results, errors)
   99|       |                        }
  100|       |                        _ => {
  101|   449k|                            self.stack.push(TriGState::TriplesOrGraph);
  102|   449k|                            self.recognize_next(token, context, results, errors)
  103|       |                        }
  104|       |                    }
  105|       |                }
  106|       |                TriGState::ExpectDot => {
  107|   178k|                    self.cur_subject.pop();
  108|   178k|                    if token == N3Token::Punctuation(".") {
  109|   147k|                        self
  110|       |                    } else {
  111|  31.6k|                        errors.push("A dot is expected at the end of statements".into());
  112|  31.6k|                        self.recognize_next(token, context, results, errors)
  113|       |                    }
  114|       |                }
  115|       |                TriGState::BaseExpectIri => {
  116|  5.07k|                    if let N3Token::IriRef(iri) = token {
  117|  4.89k|                        context.lexer_options.base_iri = Some(Iri::parse_unchecked(iri));
  118|  4.89k|                        self
  119|       |                    } else {
  120|    189|                        self.error(errors, "The BASE keyword should be followed by an IRI")
  121|       |                    }
  122|       |                }
  123|  9.23k|                TriGState::PrefixExpectPrefix => match token {
  124|  9.23k|                    N3Token::PrefixedName { prefix, local, .. } if local.is_empty() => {
  125|  9.06k|                        self.stack.push(TriGState::PrefixExpectIri {
  126|  9.06k|                            name: prefix.to_owned(),
  127|  9.06k|                        });
  128|  9.06k|                        self
  129|       |                    }
  130|    780|                    _ => self.error(
  131|    780|                        errors,
  132|    780|                        "The PREFIX keyword should be followed by a prefix like 'ex:'",
  133|    780|                    ),
  134|       |                },
  135|  7.29k|                TriGState::PrefixExpectIri { name } => {
  136|  7.29k|                    if let N3Token::IriRef(iri) = token {
  137|  7.08k|                        context.prefixes.insert(name, Iri::parse_unchecked(iri));
  138|  7.08k|                        self
  139|       |                    } else {
  140|    205|                        self.error(errors, "The PREFIX declaration should be followed by a prefix and its value as an IRI")
  141|       |                    }
  142|       |                }
  143|       |                // [3g]  triplesOrGraph  ::=  labelOrSubject ( wrappedGraph | predicateObjectList '.' ) | quotedTriple predicateObjectList '.'
  144|       |                // [4g]  triples2        ::=  blankNodePropertyList predicateObjectList? '.' | collection predicateObjectList '.'
  145|  59.7k|                TriGState::TriplesOrGraph => match token {
  146|   109k|                    N3Token::IriRef(iri) => {
  147|   109k|                        self.stack
  148|   109k|                            .push(TriGState::WrappedGraphOrPredicateObjectList {
  149|   109k|                                term: NamedNode::new_unchecked(iri).into(),
  150|   109k|                            });
  151|   109k|                        self
  152|       |                    }
  153|       |                    N3Token::PrefixedName {
  154|  20.3k|                        prefix,
  155|  20.3k|                        local,
  156|  20.3k|                        might_be_invalid_iri,
  157|  20.3k|                    } => match resolve_local_name(
  158|  20.3k|                        prefix,
  159|  20.3k|                        &local,
  160|  20.3k|                        might_be_invalid_iri,
  161|  20.3k|                        &context.prefixes,
  162|  20.3k|                    ) {
  163|  2.57k|                        Ok(t) => {
  164|  2.57k|                            self.stack
  165|  2.57k|                                .push(TriGState::WrappedGraphOrPredicateObjectList {
  166|  2.57k|                                    term: t.into(),
  167|  2.57k|                                });
  168|  2.57k|                            self
  169|       |                        }
  170|  17.7k|                        Err(e) => self.error(errors, e),
  171|       |                    },
  172|  77.7k|                    N3Token::BlankNodeLabel(label) => {
  173|  77.7k|                        self.stack
  174|  77.7k|                            .push(TriGState::WrappedGraphOrPredicateObjectList {
  175|  77.7k|                                term: BlankNode::new_unchecked(label).into(),
  176|  77.7k|                            });
  177|  77.7k|                        self
  178|       |                    }
  179|   211k|                    N3Token::Punctuation("[") => {
  180|  7.39k|                        self.stack
  181|  7.39k|                            .push(TriGState::WrappedGraphBlankNodePropertyListCurrent);
  182|  7.39k|                        self
  183|       |                    }
  184|   204k|                    N3Token::Punctuation("(") => {
  185|  32.8k|                        self.stack.push(TriGState::ExpectDot);
  186|  32.8k|                        self.stack.push(TriGState::PredicateObjectList);
  187|  32.8k|                        self.stack.push(TriGState::SubjectCollectionBeginning);
  188|  32.8k|                        self
  189|       |                    }
  190|       |                    #[cfg(feature = "rdf-star")]
  191|   171k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  192|  59.7k|                        self.stack.push(TriGState::ExpectDot);
  193|  59.7k|                        self.stack.push(TriGState::PredicateObjectList);
  194|  59.7k|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  195|  59.7k|                        self.stack.push(TriGState::QuotedObject);
  196|  59.7k|                        self.stack.push(TriGState::Verb);
  197|  59.7k|                        self.stack.push(TriGState::QuotedSubject);
  198|  59.7k|                        self
  199|       |                    }
  200|   142k|                    _ => self.error(errors, "TOKEN is not a valid subject or graph name"),
  201|       |                },
  202|   174k|                TriGState::WrappedGraphOrPredicateObjectList { term } => {
  203|   174k|                    if token == N3Token::Punctuation("{") && context.with_graph_name {
  204|  21.0k|                        self.cur_graph = term.into();
  205|  21.0k|                        self.stack.push(TriGState::WrappedGraph);
  206|   153k|                    } else {
  207|   153k|                        self.cur_subject.push(term.into());
  208|   153k|                        self.stack.push(TriGState::ExpectDot);
  209|   153k|                        self.stack.push(TriGState::PredicateObjectList);
  210|   153k|                    }
  211|   174k|                    self.recognize_next(token, context, results, errors)
  212|       |                }
  213|       |                TriGState::WrappedGraphBlankNodePropertyListCurrent => {
  214|  6.99k|                    if token == N3Token::Punctuation("]") {
  215|  1.25k|                        self.stack
  216|  1.25k|                            .push(TriGState::WrappedGraphOrPredicateObjectList {
  217|  1.25k|                                term: BlankNode::default().into(),
  218|  1.25k|                            });
  219|  1.25k|                        self
  220|       |                    } else {
  221|  5.74k|                        self.cur_subject.push(BlankNode::default().into());
  222|  5.74k|                        self.stack.push(TriGState::ExpectDot);
  223|  5.74k|                        self.stack.push(TriGState::SubjectBlankNodePropertyListEnd);
  224|  5.74k|                        self.stack.push(TriGState::PredicateObjectList);
  225|  5.74k|                        self.recognize_next(token, context, results, errors)
  226|       |                    }
  227|       |                }
  228|       |                TriGState::SubjectBlankNodePropertyListEnd => {
  229|  2.81k|                    if token == N3Token::Punctuation("]") {
  230|  1.29k|                        self.stack
  231|  1.29k|                            .push(TriGState::SubjectBlankNodePropertyListAfter);
  232|  1.29k|                        self
  233|       |                    } else {
  234|  1.51k|                        errors.push("blank node property lists should end with a ']'".into());
  235|  1.51k|                        self.stack
  236|  1.51k|                            .push(TriGState::SubjectBlankNodePropertyListAfter);
  237|  1.51k|                        self.recognize_next(token, context, results, errors)
  238|       |                    }
  239|       |                }
  240|       |                TriGState::SubjectBlankNodePropertyListAfter => {
  241|  2.79k|                    if matches!(token, N3Token::Punctuation("." | "}")) {
  242|  1.66k|                        self.recognize_next(token, context, results, errors)
  243|       |                    } else {
  244|  1.12k|                        self.stack.push(TriGState::PredicateObjectList);
  245|  1.12k|                        self.recognize_next(token, context, results, errors)
  246|       |                    }
  247|       |                }
  248|       |                TriGState::SubjectCollectionBeginning => {
  249|  34.4k|                    if let N3Token::Punctuation(")") = token {
  250|    192|                        self.cur_subject.push(rdf::NIL.into());
  251|    192|                        self
  252|       |                    } else {
  253|  34.2k|                        let root = BlankNode::default();
  254|  34.2k|                        self.cur_subject.push(root.clone().into());
  255|  34.2k|                        self.cur_subject.push(root.into());
  256|  34.2k|                        self.cur_predicate.push(rdf::FIRST.into());
  257|  34.2k|                        self.stack.push(TriGState::SubjectCollectionPossibleEnd);
  258|  34.2k|                        self.stack.push(TriGState::Object);
  259|  34.2k|                        self.recognize_next(token, context, results, errors)
  260|       |                    }
  261|       |                }
  262|       |                TriGState::SubjectCollectionPossibleEnd => {
  263|  12.0k|                    let old = self.cur_subject.pop().unwrap();
  264|  12.0k|                    self.cur_object.pop();
  265|  12.0k|                    if let N3Token::Punctuation(")") = token {
  266|    634|                        self.cur_predicate.pop();
  267|    634|                        results.push(Quad::new(old, rdf::REST, rdf::NIL, self.cur_graph.clone()));
  268|    634|                        self
  269|       |                    } else {
  270|  11.4k|                        let new = BlankNode::default();
  271|  11.4k|                        results.push(Quad::new(
  272|  11.4k|                            old,
  273|  11.4k|                            rdf::REST,
  274|  11.4k|                            new.clone(),
  275|  11.4k|                            self.cur_graph.clone(),
  276|  11.4k|                        ));
  277|  11.4k|                        self.cur_subject.push(new.into());
  278|  11.4k|                        self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  279|  11.4k|                        self.stack.push(TriGState::Object);
  280|  11.4k|                        self.recognize_next(token, context, results, errors)
  281|       |                    }
  282|       |                }
  283|       |                // [5g]  wrappedGraph  ::=  '{' triplesBlock? '}'
  284|       |                // [6g]  triplesBlock  ::=  triples ('.' triplesBlock?)?
  285|       |                TriGState::WrappedGraph => {
  286|  27.3k|                    if token == N3Token::Punctuation("{") {
  287|  27.3k|                        self.stack.push(TriGState::WrappedGraphPossibleEnd);
  288|  27.3k|                        self.stack.push(TriGState::Triples);
  289|  27.3k|                        self
  290|       |                    } else {
  291|      0|                        self.error(errors, "The GRAPH keyword should be followed by a graph name and a value in '{'")
  292|       |                    }
  293|       |                }
  294|       |                TriGState::WrappedGraphPossibleEnd => {
  295|  33.2k|                    self.cur_subject.pop();
  296|  33.2k|                    match token {
  297|  28.3k|                        N3Token::Punctuation("}") => self,
  298|  24.2k|                        N3Token::Punctuation(".") => {
  299|  23.4k|                            self.stack.push(TriGState::WrappedGraphPossibleEnd);
  300|  23.4k|                            self.stack.push(TriGState::Triples);
  301|  23.4k|                            self
  302|       |                        }
  303|       |                        _ => {
  304|  5.76k|                            errors.push(
  305|  5.76k|                                "A '}' or a '.' is expected at the end of a graph block".into(),
  306|  5.76k|                            );
  307|  5.76k|                            self.recognize_next(token, context, results, errors)
  308|       |                        }
  309|       |                    }
  310|       |                }
  311|       |                // [6]  triples   ::=  subject predicateObjectList | blankNodePropertyList predicateObjectList?
  312|       |                // [10]  subject  ::=  iri | BlankNode | collection | quotedTriple
  313|  7.95k|                TriGState::Triples => match token {
  314|  22.7k|                    N3Token::Punctuation("}") => {
  315|  4.07k|                        self.recognize_next(token, context, results, errors) // Early end
  316|       |                    }
  317|  18.6k|                    N3Token::Punctuation("[") => {
  318|    388|                        self.cur_subject.push(BlankNode::default().into());
  319|    388|                        self.stack
  320|    388|                            .push(TriGState::TriplesBlankNodePropertyListCurrent);
  321|    388|                        self
  322|       |                    }
  323|  10.9k|                    N3Token::IriRef(iri) => {
  324|  10.9k|                        self.cur_subject.push(NamedNode::new_unchecked(iri).into());
  325|  10.9k|                        self.stack.push(TriGState::PredicateObjectList);
  326|  10.9k|                        self
  327|       |                    }
  328|       |                    N3Token::PrefixedName {
  329|    977|                        prefix,
  330|    977|                        local,
  331|    977|                        might_be_invalid_iri,
  332|    977|                    } => match resolve_local_name(
  333|    977|                        prefix,
  334|    977|                        &local,
  335|    977|                        might_be_invalid_iri,
  336|    977|                        &context.prefixes,
  337|    977|                    ) {
  338|    303|                        Ok(t) => {
  339|    303|                            self.cur_subject.push(t.into());
  340|    303|                            self.stack.push(TriGState::PredicateObjectList);
  341|    303|                            self
  342|       |                        }
  343|    674|                        Err(e) => self.error(errors, e),
  344|       |                    },
  345|  14.0k|                    N3Token::BlankNodeLabel(label) => {
  346|  14.0k|                        self.cur_subject
  347|  14.0k|                            .push(BlankNode::new_unchecked(label).into());
  348|  14.0k|                        self.stack.push(TriGState::PredicateObjectList);
  349|  14.0k|                        self
  350|       |                    }
  351|  18.2k|                    N3Token::Punctuation("(") => {
  352|  8.84k|                        self.stack.push(TriGState::PredicateObjectList);
  353|  8.84k|                        self.stack.push(TriGState::SubjectCollectionBeginning);
  354|  8.84k|                        self
  355|       |                    }
  356|       |                    #[cfg(feature = "rdf-star")]
  357|  9.42k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  358|  7.95k|                        self.stack.push(TriGState::PredicateObjectList);
  359|  7.95k|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  360|  7.95k|                        self.stack.push(TriGState::QuotedObject);
  361|  7.95k|                        self.stack.push(TriGState::Verb);
  362|  7.95k|                        self.stack.push(TriGState::QuotedSubject);
  363|  7.95k|                        self
  364|       |                    }
  365|  2.13k|                    _ => self.error(errors, "TOKEN is not a valid RDF subject"),
  366|       |                },
  367|       |                TriGState::TriplesBlankNodePropertyListCurrent => {
  368|    381|                    if token == N3Token::Punctuation("]") {
  369|     82|                        self.stack.push(TriGState::PredicateObjectList);
  370|     82|                        self
  371|       |                    } else {
  372|    299|                        self.stack.push(TriGState::SubjectBlankNodePropertyListEnd);
  373|    299|                        self.stack.push(TriGState::PredicateObjectList);
  374|    299|                        self.recognize_next(token, context, results, errors)
  375|       |                    }
  376|       |                }
  377|       |                // [7g]  labelOrSubject  ::=  iri | BlankNode
  378|      0|                TriGState::GraphName => match token {
  379|      0|                    N3Token::IriRef(iri) => {
  380|      0|                        self.cur_graph = NamedNode::new_unchecked(iri).into();
  381|      0|                        self
  382|       |                    }
  383|       |                    N3Token::PrefixedName {
  384|      0|                        prefix,
  385|      0|                        local,
  386|      0|                        might_be_invalid_iri,
  387|      0|                    } => match resolve_local_name(
  388|      0|                        prefix,
  389|      0|                        &local,
  390|      0|                        might_be_invalid_iri,
  391|      0|                        &context.prefixes,
  392|      0|                    ) {
  393|      0|                        Ok(t) => {
  394|      0|                            self.cur_graph = t.into();
  395|      0|                            self
  396|       |                        }
  397|      0|                        Err(e) => self.error(errors, e),
  398|       |                    },
  399|      0|                    N3Token::BlankNodeLabel(label) => {
  400|      0|                        self.cur_graph = BlankNode::new_unchecked(label).into();
  401|      0|                        self
  402|       |                    }
  403|      0|                    N3Token::Punctuation("[") => {
  404|      0|                        self.stack.push(TriGState::GraphNameAnonEnd);
  405|      0|                        self
  406|       |                    }
  407|      0|                    _ => self.error(errors, "TOKEN is not a valid graph name"),
  408|       |                },
  409|       |                TriGState::GraphNameAnonEnd => {
  410|      0|                    if token == N3Token::Punctuation("]") {
  411|      0|                        self.cur_graph = BlankNode::default().into();
  412|      0|                        self
  413|       |                    } else {
  414|      0|                        self.error(errors, "Anonymous blank node with a property list are not allowed as graph name")
  415|       |                    }
  416|       |                }
  417|       |                // [7]  predicateObjectList  ::=  verb objectList (';' (verb objectList)?)*
  418|       |                TriGState::PredicateObjectList => {
  419|   436k|                    self.stack.push(TriGState::PredicateObjectListEnd);
  420|   436k|                    self.stack.push(TriGState::ObjectsList);
  421|   436k|                    self.stack.push(TriGState::Verb);
  422|   436k|                    self.recognize_next(token, context, results, errors)
  423|       |                }
  424|       |                TriGState::PredicateObjectListEnd => {
  425|   219k|                    self.cur_predicate.pop();
  426|   219k|                    if token == N3Token::Punctuation(";") {
  427|  9.59k|                        self.stack
  428|  9.59k|                            .push(TriGState::PredicateObjectListPossibleContinuation);
  429|  9.59k|                        self
  430|       |                    } else {
  431|   209k|                        self.recognize_next(token, context, results, errors)
  432|       |                    }
  433|       |                }
  434|       |                TriGState::PredicateObjectListPossibleContinuation => {
  435|  11.8k|                    if token == N3Token::Punctuation(";") {
  436|  2.30k|                        self.stack
  437|  2.30k|                            .push(TriGState::PredicateObjectListPossibleContinuation);
  438|  2.30k|                        self
  439|  9.58k|                    } else if matches!(token, N3Token::Punctuation("." | "}" | "]")) {
  440|    303|                        self.recognize_next(token, context, results, errors)
  441|       |                    } else {
  442|  9.27k|                        self.stack.push(TriGState::PredicateObjectListEnd);
  443|  9.27k|                        self.stack.push(TriGState::ObjectsList);
  444|  9.27k|                        self.stack.push(TriGState::Verb);
  445|  9.27k|                        self.recognize_next(token, context, results, errors)
  446|       |                    }
  447|       |                }
  448|       |                // [8]   objectList  ::=  object annotation? ( ',' object annotation? )*
  449|       |                // [30t] annotation  ::=  '{|' predicateObjectList '|}'
  450|       |                TriGState::ObjectsList => {
  451|   427k|                    self.stack.push(TriGState::ObjectsListEnd);
  452|   427k|                    self.stack.push(TriGState::Object);
  453|   427k|                    self.recognize_next(token, context, results, errors)
  454|       |                }
  455|   492k|                TriGState::ObjectsListEnd => match token {
  456|   462k|                    N3Token::Punctuation(",") => {
  457|  83.5k|                        self.cur_object.pop();
  458|  83.5k|                        self.stack.push(TriGState::ObjectsListEnd);
  459|  83.5k|                        self.stack.push(TriGState::Object);
  460|  83.5k|                        self
  461|       |                    }
  462|       |                    #[cfg(feature = "rdf-star")]
  463|   378k|                    N3Token::Punctuation("{|") => {
  464|   189k|                        let triple = Triple::new(
  465|   189k|                            self.cur_subject.last().unwrap().clone(),
  466|   189k|                            self.cur_predicate.last().unwrap().clone(),
  467|   189k|                            self.cur_object.pop().unwrap(),
  468|   189k|                        );
  469|   189k|                        self.cur_subject.push(triple.into());
  470|   189k|                        self.stack.push(TriGState::AnnotationEnd);
  471|   189k|                        self.stack.push(TriGState::PredicateObjectList);
  472|   189k|                        self
  473|       |                    }
  474|       |                    _ => {
  475|   219k|                        self.cur_object.pop();
  476|   219k|                        self.recognize_next(token, context, results, errors)
  477|       |                    }
  478|       |                },
  479|       |                #[cfg(feature = "rdf-star")]
  480|       |                TriGState::AnnotationEnd => {
  481|  6.21k|                    self.cur_subject.pop();
  482|  6.21k|                    self.stack.push(TriGState::ObjectsListAfterAnnotation);
  483|  6.21k|                    if token == N3Token::Punctuation("|}") {
  484|    310|                        self
  485|       |                    } else {
  486|  5.90k|                        self.error(errors, "Annotations should end with '|}'")
  487|       |                    }
  488|       |                }
  489|       |                #[cfg(feature = "rdf-star")]
  490|       |                TriGState::ObjectsListAfterAnnotation => {
  491|    226|                    if token == N3Token::Punctuation(",") {
  492|    132|                        self.stack.push(TriGState::ObjectsListEnd);
  493|    132|                        self.stack.push(TriGState::Object);
  494|    132|                        self
  495|       |                    } else {
  496|     94|                        self.recognize_next(token, context, results, errors)
  497|       |                    }
  498|       |                }
  499|       |                // [9]   verb       ::=  predicate | 'a'
  500|       |                // [11]  predicate  ::=  iri
  501|  1.95M|                TriGState::Verb => match token {
  502|  10.1k|                    N3Token::PlainKeyword("a") => {
  503|  7.17k|                        self.cur_predicate.push(rdf::TYPE.into());
  504|  7.17k|                        self
  505|       |                    }
  506|  1.86M|                    N3Token::IriRef(iri) => {
  507|  1.86M|                        self.cur_predicate.push(NamedNode::new_unchecked(iri));
  508|  1.86M|                        self
  509|       |                    }
  510|       |                    N3Token::PrefixedName {
  511|  67.2k|                        prefix,
  512|  67.2k|                        local,
  513|  67.2k|                        might_be_invalid_iri,
  514|  67.2k|                    } => match resolve_local_name(
  515|  67.2k|                        prefix,
  516|  67.2k|                        &local,
  517|  67.2k|                        might_be_invalid_iri,
  518|  67.2k|                        &context.prefixes,
  519|  67.2k|                    ) {
  520|  66.6k|                        Ok(t) => {
  521|  66.6k|                            self.cur_predicate.push(t);
  522|  66.6k|                            self
  523|       |                        }
  524|    628|                        Err(e) => self.error(errors, e),
  525|       |                    },
  526|  15.6k|                    _ => self.error(errors, "TOKEN is not a valid predicate"),
  527|       |                },
  528|       |                // [12]    object                 ::=  iri | BlankNode | collection | blankNodePropertyList | literal | quotedTriple
  529|       |                // [13]    literal                ::=  RDFLiteral | NumericLiteral | BooleanLiteral
  530|       |                // [14]    blank                  ::=  BlankNode | collection
  531|       |                // [15]    blankNodePropertyList  ::=  '[' predicateObjectList ']'
  532|       |                // [16]    collection             ::=  '(' object* ')'
  533|       |                // [17]    NumericLiteral         ::=  INTEGER | DECIMAL | DOUBLE
  534|       |                // [128s]  RDFLiteral             ::=  String (LANGTAG | '^^' iri)?
  535|       |                // [133s]  BooleanLiteral         ::=  'true' | 'false'
  536|       |                // [18]    String                 ::=  STRING_LITERAL_QUOTE | STRING_LITERAL_SINGLE_QUOTE | STRING_LITERAL_LONG_SINGLE_QUOTE | STRING_LITERAL_LONG_QUOTE
  537|       |                // [135s]  iri                    ::=  IRIREF | PrefixedName
  538|       |                // [136s]  PrefixedName           ::=  PNAME_LN | PNAME_NS
  539|       |                // [137s]  BlankNode              ::=  BLANK_NODE_LABEL | ANON
  540|  9.51k|                TriGState::Object => match token {
  541|  60.0k|                    N3Token::IriRef(iri) => {
  542|  60.0k|                        self.cur_object.push(NamedNode::new_unchecked(iri).into());
  543|  60.0k|                        self.emit_quad(results);
  544|  60.0k|                        self
  545|       |                    }
  546|       |                    N3Token::PrefixedName {
  547|  3.55k|                        prefix,
  548|  3.55k|                        local,
  549|  3.55k|                        might_be_invalid_iri,
  550|  3.55k|                    } => match resolve_local_name(
  551|  3.55k|                        prefix,
  552|  3.55k|                        &local,
  553|  3.55k|                        might_be_invalid_iri,
  554|  3.55k|                        &context.prefixes,
  555|  3.55k|                    ) {
  556|  1.99k|                        Ok(t) => {
  557|  1.99k|                            self.cur_object.push(t.into());
  558|  1.99k|                            self.emit_quad(results);
  559|  1.99k|                            self
  560|       |                        }
  561|  1.56k|                        Err(e) => self.error(errors, e),
  562|       |                    },
  563|  76.9k|                    N3Token::BlankNodeLabel(label) => {
  564|  76.9k|                        self.cur_object.push(BlankNode::new_unchecked(label).into());
  565|  76.9k|                        self.emit_quad(results);
  566|  76.9k|                        self
  567|       |                    }
  568|   190k|                    N3Token::Punctuation("[") => {
  569|  2.81k|                        self.stack
  570|  2.81k|                            .push(TriGState::ObjectBlankNodePropertyListCurrent);
  571|  2.81k|                        self
  572|       |                    }
  573|   187k|                    N3Token::Punctuation("(") => {
  574|   171k|                        self.stack.push(TriGState::ObjectCollectionBeginning);
  575|   171k|                        self
  576|       |                    }
  577|  21.4k|                    N3Token::String(value) => {
  578|  21.4k|                        self.stack
  579|  21.4k|                            .push(TriGState::LiteralPossibleSuffix { value, emit: true });
  580|  21.4k|                        self
  581|       |                    }
  582|   174k|                    N3Token::Integer(v) => {
  583|   174k|                        self.cur_object
  584|   174k|                            .push(Literal::new_typed_literal(v, xsd::INTEGER).into());
  585|   174k|                        self.emit_quad(results);
  586|   174k|                        self
  587|       |                    }
  588|  8.56k|                    N3Token::Decimal(v) => {
  589|  8.56k|                        self.cur_object
  590|  8.56k|                            .push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
  591|  8.56k|                        self.emit_quad(results);
  592|  8.56k|                        self
  593|       |                    }
  594|   210k|                    N3Token::Double(v) => {
  595|   210k|                        self.cur_object
  596|   210k|                            .push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
  597|   210k|                        self.emit_quad(results);
  598|   210k|                        self
  599|       |                    }
  600|  5.22k|                    N3Token::PlainKeyword("true") => {
  601|    339|                        self.cur_object
  602|    339|                            .push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
  603|    339|                        self.emit_quad(results);
  604|    339|                        self
  605|       |                    }
  606|  4.88k|                    N3Token::PlainKeyword("false") => {
  607|    155|                        self.cur_object
  608|    155|                            .push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
  609|    155|                        self.emit_quad(results);
  610|    155|                        self
  611|       |                    }
  612|       |                    #[cfg(feature = "rdf-star")]
  613|  16.0k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  614|  9.51k|                        self.stack
  615|  9.51k|                            .push(TriGState::ObjectQuotedTripleEnd { emit: true });
  616|  9.51k|                        self.stack.push(TriGState::QuotedObject);
  617|  9.51k|                        self.stack.push(TriGState::Verb);
  618|  9.51k|                        self.stack.push(TriGState::QuotedSubject);
  619|  9.51k|                        self
  620|       |                    }
  621|  11.4k|                    _ => self.error(errors, "TOKEN is not a valid RDF object"),
  622|       |                },
  623|       |                TriGState::ObjectBlankNodePropertyListCurrent => {
  624|  2.75k|                    if token == N3Token::Punctuation("]") {
  625|  1.52k|                        self.cur_object.push(BlankNode::default().into());
  626|  1.52k|                        self.emit_quad(results);
  627|  1.52k|                        self
  628|       |                    } else {
  629|  1.23k|                        self.cur_subject.push(BlankNode::default().into());
  630|  1.23k|                        self.stack.push(TriGState::ObjectBlankNodePropertyListEnd);
  631|  1.23k|                        self.stack.push(TriGState::PredicateObjectList);
  632|  1.23k|                        self.recognize_next(token, context, results, errors)
  633|       |                    }
  634|       |                }
  635|       |                TriGState::ObjectBlankNodePropertyListEnd => {
  636|    458|                    if token == N3Token::Punctuation("]") {
  637|    241|                        self.cur_object.push(self.cur_subject.pop().unwrap().into());
  638|    241|                        self.emit_quad(results);
  639|    241|                        self
  640|       |                    } else {
  641|    217|                        self.error(errors, "blank node property lists should end with a ']'")
  642|       |                    }
  643|       |                }
  644|       |                TriGState::ObjectCollectionBeginning => {
  645|   168k|                    if let N3Token::Punctuation(")") = token {
  646|  3.74k|                        self.cur_object.push(rdf::NIL.into());
  647|  3.74k|                        self.emit_quad(results);
  648|  3.74k|                        self
  649|       |                    } else {
  650|   165k|                        let root = BlankNode::default();
  651|   165k|                        self.cur_object.push(root.clone().into());
  652|   165k|                        self.emit_quad(results);
  653|   165k|                        self.cur_subject.push(root.into());
  654|   165k|                        self.cur_predicate.push(rdf::FIRST.into());
  655|   165k|                        self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  656|   165k|                        self.stack.push(TriGState::Object);
  657|   165k|                        self.recognize_next(token, context, results, errors)
  658|       |                    }
  659|       |                }
  660|       |                TriGState::ObjectCollectionPossibleEnd => {
  661|  34.1k|                    let old = self.cur_subject.pop().unwrap();
  662|  34.1k|                    self.cur_object.pop();
  663|  34.1k|                    if let N3Token::Punctuation(")") = token {
  664|  5.54k|                        self.cur_predicate.pop();
  665|  5.54k|                        results.push(Quad::new(old, rdf::REST, rdf::NIL, self.cur_graph.clone()));
  666|  5.54k|                        self
  667|       |                    } else {
  668|  28.5k|                        let new = BlankNode::default();
  669|  28.5k|                        results.push(Quad::new(
  670|  28.5k|                            old,
  671|  28.5k|                            rdf::REST,
  672|  28.5k|                            new.clone(),
  673|  28.5k|                            self.cur_graph.clone(),
  674|  28.5k|                        ));
  675|  28.5k|                        self.cur_subject.push(new.into());
  676|  28.5k|                        self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  677|  28.5k|                        self.stack.push(TriGState::Object);
  678|  28.5k|                        self.recognize_next(token, context, results, errors)
  679|       |                    }
  680|       |                }
  681|  21.0k|                TriGState::LiteralPossibleSuffix { value, emit } => match token {
  682|  3.78k|                    N3Token::LangTag(lang) => {
  683|  3.78k|                        self.cur_object.push(
  684|  3.78k|                            Literal::new_language_tagged_literal_unchecked(
  685|  3.78k|                                value,
  686|  3.78k|                                lang.to_ascii_lowercase(),
  687|  3.78k|                            )
  688|  3.78k|                            .into(),
  689|  3.78k|                        );
  690|  3.78k|                        if emit {
  691|  3.70k|                            self.emit_quad(results);
  692|  3.70k|                        }
  693|  3.78k|                        self
  694|       |                    }
  695|  10.5k|                    N3Token::Punctuation("^^") => {
  696|  1.43k|                        self.stack
  697|  1.43k|                            .push(TriGState::LiteralExpectDatatype { value, emit });
  698|  1.43k|                        self
  699|       |                    }
  700|       |                    _ => {
  701|  15.8k|                        self.cur_object
  702|  15.8k|                            .push(Literal::new_simple_literal(value).into());
  703|  15.8k|                        if emit {
  704|  15.3k|                            self.emit_quad(results);
  705|  15.3k|                        }
  706|  15.8k|                        self.recognize_next(token, context, results, errors)
  707|       |                    }
  708|       |                },
  709|  1.29k|                TriGState::LiteralExpectDatatype { value, emit } => match token {
  710|    541|                    N3Token::IriRef(datatype) => {
  711|    541|                        self.cur_object.push(
  712|    541|                            Literal::new_typed_literal(value, NamedNode::new_unchecked(datatype))
  713|    541|                                .into(),
  714|    541|                        );
  715|    541|                        if emit {
  716|    541|                            self.emit_quad(results);
  717|    541|                        }
  718|    541|                        self
  719|       |                    }
  720|       |                    N3Token::PrefixedName {
  721|    577|                        prefix,
  722|    577|                        local,
  723|    577|                        might_be_invalid_iri,
  724|    577|                    } => match resolve_local_name(
  725|    577|                        prefix,
  726|    577|                        &local,
  727|    577|                        might_be_invalid_iri,
  728|    577|                        &context.prefixes,
  729|    577|                    ) {
  730|    422|                        Ok(t) => {
  731|    422|                            self.cur_object
  732|    422|                                .push(Literal::new_typed_literal(value, t).into());
  733|    422|                            if emit {
  734|    422|                                self.emit_quad(results);
  735|    422|                            }
  736|    422|                            self
  737|       |                        }
  738|    155|                        Err(e) => self.error(errors, e),
  739|       |                    },
  740|    174|                    _ => self
  741|    174|                        .error(errors, "Expecting a datatype IRI after ^^, found TOKEN")
  742|    174|                        .recognize_next(token, context, results, errors),
  743|       |                },
  744|       |                // [27t]  quotedTriple  ::=  '<<' qtSubject verb qtObject '>>'
  745|       |                #[cfg(feature = "rdf-star")]
  746|       |                TriGState::SubjectQuotedTripleEnd => {
  747|  1.49M|                    let triple = Triple::new(
  748|  1.49M|                        self.cur_subject.pop().unwrap(),
  749|  1.49M|                        self.cur_predicate.pop().unwrap(),
  750|  1.49M|                        self.cur_object.pop().unwrap(),
  751|  1.49M|                    );
  752|  1.49M|                    self.cur_subject.push(triple.into());
  753|  1.49M|                    if token == N3Token::Punctuation(">>") {
  754|  1.49M|                        self
  755|       |                    } else {
  756|  1.60k|                        self.error(
  757|  1.60k|                            errors,
  758|  1.60k|                            "Expecting '>>' to close a quoted triple, found TOKEN",
  759|  1.60k|                        )
  760|       |                    }
  761|       |                }
  762|       |                #[cfg(feature = "rdf-star")]
  763|  8.09k|                TriGState::ObjectQuotedTripleEnd { emit } => {
  764|  8.09k|                    let triple = Triple::new(
  765|  8.09k|                        self.cur_subject.pop().unwrap(),
  766|  8.09k|                        self.cur_predicate.pop().unwrap(),
  767|  8.09k|                        self.cur_object.pop().unwrap(),
  768|  8.09k|                    );
  769|  8.09k|                    self.cur_object.push(triple.into());
  770|  8.09k|                    if emit {
  771|  7.64k|                        self.emit_quad(results);
  772|  7.64k|                    }
  773|  8.09k|                    if token == N3Token::Punctuation(">>") {
  774|  2.44k|                        self
  775|       |                    } else {
  776|  5.64k|                        self.error(
  777|  5.64k|                            errors,
  778|  5.64k|                            "Expecting '>>' to close a quoted triple, found TOKEN",
  779|  5.64k|                        )
  780|       |                    }
  781|       |                }
  782|       |                // [28t]  qtSubject  ::=  iri | BlankNode | quotedTriple
  783|       |                #[cfg(feature = "rdf-star")]
  784|  1.52M|                TriGState::QuotedSubject => match token {
  785|  1.44M|                    N3Token::Punctuation("[") => {
  786|    247|                        self.cur_subject.push(BlankNode::default().into());
  787|    247|                        self.stack.push(TriGState::QuotedAnonEnd);
  788|    247|                        self
  789|       |                    }
  790|  72.8k|                    N3Token::IriRef(iri) => {
  791|  72.8k|                        self.cur_subject.push(NamedNode::new_unchecked(iri).into());
  792|  72.8k|                        self
  793|       |                    }
  794|       |                    N3Token::PrefixedName {
  795|  1.11k|                        prefix,
  796|  1.11k|                        local,
  797|  1.11k|                        might_be_invalid_iri,
  798|  1.11k|                    } => match resolve_local_name(
  799|  1.11k|                        prefix,
  800|  1.11k|                        &local,
  801|  1.11k|                        might_be_invalid_iri,
  802|  1.11k|                        &context.prefixes,
  803|  1.11k|                    ) {
  804|    847|                        Ok(t) => {
  805|    847|                            self.cur_subject.push(t.into());
  806|    847|                            self
  807|       |                        }
  808|    271|                        Err(e) => self.error(errors, e),
  809|       |                    },
  810|  1.89k|                    N3Token::BlankNodeLabel(label) => {
  811|  1.89k|                        self.cur_subject
  812|  1.89k|                            .push(BlankNode::new_unchecked(label).into());
  813|  1.89k|                        self
  814|       |                    }
  815|  1.44M|                    N3Token::Punctuation("<<") => {
  816|  1.44M|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  817|  1.44M|                        self.stack.push(TriGState::QuotedObject);
  818|  1.44M|                        self.stack.push(TriGState::Verb);
  819|  1.44M|                        self.stack.push(TriGState::QuotedSubject);
  820|  1.44M|                        self
  821|       |                    }
  822|    903|                    _ => self.error(
  823|    903|                        errors,
  824|    903|                        "TOKEN is not a valid RDF quoted triple subject: TOKEN",
  825|    903|                    ),
  826|       |                },
  827|       |                // [29t]  qtObject  ::=  iri | BlankNode | literal | quotedTriple
  828|       |                #[cfg(feature = "rdf-star")]
  829|  1.50M|                TriGState::QuotedObject => match token {
  830|  1.43k|                    N3Token::Punctuation("[") => {
  831|    126|                        self.cur_object.push(BlankNode::default().into());
  832|    126|                        self.stack.push(TriGState::QuotedAnonEnd);
  833|    126|                        self
  834|       |                    }
  835|   237k|                    N3Token::IriRef(iri) => {
  836|   237k|                        self.cur_object.push(NamedNode::new_unchecked(iri).into());
  837|   237k|                        self
  838|       |                    }
  839|       |                    N3Token::PrefixedName {
  840|    530|                        prefix,
  841|    530|                        local,
  842|    530|                        might_be_invalid_iri,
  843|    530|                    } => match resolve_local_name(
  844|    530|                        prefix,
  845|    530|                        &local,
  846|    530|                        might_be_invalid_iri,
  847|    530|                        &context.prefixes,
  848|    530|                    ) {
  849|    430|                        Ok(t) => {
  850|    430|                            self.cur_object.push(t.into());
  851|    430|                            self
  852|       |                        }
  853|    100|                        Err(e) => self.error(errors, e),
  854|       |                    },
  855|  3.57k|                    N3Token::BlankNodeLabel(label) => {
  856|  3.57k|                        self.cur_object.push(BlankNode::new_unchecked(label).into());
  857|  3.57k|                        self
  858|       |                    }
  859|    564|                    N3Token::String(value) => {
  860|    564|                        self.stack
  861|    564|                            .push(TriGState::LiteralPossibleSuffix { value, emit: false });
  862|    564|                        self
  863|       |                    }
  864|   174k|                    N3Token::Integer(v) => {
  865|   174k|                        self.cur_object
  866|   174k|                            .push(Literal::new_typed_literal(v, xsd::INTEGER).into());
  867|   174k|                        self
  868|       |                    }
  869|    589|                    N3Token::Decimal(v) => {
  870|    589|                        self.cur_object
  871|    589|                            .push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
  872|    589|                        self
  873|       |                    }
  874|  1.08M|                    N3Token::Double(v) => {
  875|  1.08M|                        self.cur_object
  876|  1.08M|                            .push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
  877|  1.08M|                        self
  878|       |                    }
  879|    428|                    N3Token::PlainKeyword("true") => {
  880|     77|                        self.cur_object
  881|     77|                            .push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
  882|     77|                        self
  883|       |                    }
  884|    351|                    N3Token::PlainKeyword("false") => {
  885|    162|                        self.cur_object
  886|    162|                            .push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
  887|    162|                        self
  888|       |                    }
  889|  1.30k|                    N3Token::Punctuation("<<") => {
  890|  1.05k|                        self.stack
  891|  1.05k|                            .push(TriGState::ObjectQuotedTripleEnd { emit: false });
  892|  1.05k|                        self.stack.push(TriGState::QuotedObject);
  893|  1.05k|                        self.stack.push(TriGState::Verb);
  894|  1.05k|                        self.stack.push(TriGState::QuotedSubject);
  895|  1.05k|                        self
  896|       |                    }
  897|    698|                    _ => self.error(errors, "TOKEN is not a valid RDF quoted triple object"),
  898|       |                },
  899|       |                #[cfg(feature = "rdf-star")]
  900|       |                TriGState::QuotedAnonEnd => {
  901|    328|                    if token == N3Token::Punctuation("]") {
  902|    227|                        self
  903|       |                    } else {
  904|    101|                        self.error(errors, "Anonymous blank node with a property list are not allowed in quoted triples")
  905|       |                    }
  906|       |                }
  907|       |            }
  908|  1.43M|        } else if token == N3Token::Punctuation(".") || token == N3Token::Punctuation("}") {
  909|       |            // TODO: be smarter depending if we are in '{' or not
  910|   304k|            self.stack.push(TriGState::TriGDoc);
  911|   304k|            self
  912|       |        } else {
  913|  1.13M|            self
  914|       |        }
  915|  11.9M|    }
_RNvXs_NtCs3Okv3MbnXN6_5oxttl5terseNtB4_14TriGRecognizerNtNtNtB6_7toolkit6parser14RuleRecognizer13recognize_end:
  917|  33.5k|    fn recognize_end(
  918|  33.5k|        mut self,
  919|  33.5k|        _context: &mut TriGRecognizerContext,
  920|  33.5k|        results: &mut Vec<Self::Output>,
  921|  33.5k|        errors: &mut Vec<RuleRecognizerError>,
  922|  33.5k|    ) {
  923|  33.5k|        match &*self.stack {
  924|  33.5k|            [] | [TriGState::TriGDoc] => {
  925|  31.9k|                debug_assert!(
  926|      0|                    self.cur_subject.is_empty(),
  927|      0|                    "The cur_subject stack must be empty if the state stack is empty"
  928|       |                );
  929|  31.9k|                debug_assert!(
  930|      0|                    self.cur_predicate.is_empty(),
  931|      0|                    "The cur_predicate stack must be empty if the state stack is empty"
  932|       |                );
  933|  31.9k|                debug_assert!(
  934|      0|                    self.cur_object.is_empty(),
  935|      0|                    "The cur_object stack must be empty if the state stack is empty"
  936|       |                );
  937|       |            }
  938|    233|            [.., TriGState::LiteralPossibleSuffix { value, emit: true }] => {
  939|    233|                self.cur_object
  940|    233|                    .push(Literal::new_simple_literal(value).into());
  941|    233|                self.emit_quad(results);
  942|    233|                errors.push("Triples should be followed by a dot".into())
  943|       |            }
  944|  1.35k|            _ => errors.push("Unexpected end".into()), // TODO
  945|       |        }
  946|  33.5k|    }
_RNvXs_NtCs3Okv3MbnXN6_5oxttl5terseNtB4_14TriGRecognizerNtNtNtB6_7toolkit6parser14RuleRecognizer13lexer_options:
  948|  13.2M|    fn lexer_options(context: &TriGRecognizerContext) -> &N3LexerOptions {
  949|  13.2M|        &context.lexer_options
  950|  13.2M|    }
_RNvMs0_NtCs3Okv3MbnXN6_5oxttl5terseNtB5_14TriGRecognizer9emit_quad:
 1006|   730k|    fn emit_quad(&mut self, results: &mut Vec<Quad>) {
 1007|   730k|        results.push(Quad::new(
 1008|   730k|            self.cur_subject.last().unwrap().clone(),
 1009|   730k|            self.cur_predicate.last().unwrap().clone(),
 1010|   730k|            self.cur_object.last().unwrap().clone(),
 1011|   730k|            self.cur_graph.clone(),
 1012|   730k|        ));
 1013|   730k|    }

_RNvXs_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5errorNtB4_17TurtleSyntaxErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmtCsbTqLqKzjopm_4trig:
   37|  1.94M|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   38|  1.94M|        if self.location.start.offset + 1 >= self.location.end.offset {
   39|  1.67M|            write!(
   40|  1.67M|                f,
   41|  1.67M|                "Parser error at line {} column {}: {}",
   42|  1.67M|                self.location.start.line + 1,
   43|  1.67M|                self.location.start.column + 1,
   44|  1.67M|                self.message
   45|  1.67M|            )
   46|   269k|        } else if self.location.start.line == self.location.end.line {
   47|   266k|            write!(
   48|   266k|                f,
   49|   266k|                "Parser error between at line {} between columns {} and column {}: {}",
   50|   266k|                self.location.start.line + 1,
   51|   266k|                self.location.start.column + 1,
   52|   266k|                self.location.end.column + 1,
   53|   266k|                self.message
   54|   266k|            )
   55|       |        } else {
   56|  2.59k|            write!(
   57|  2.59k|                f,
   58|  2.59k|                "Parser error between line {} column {} and line {} column {}: {}",
   59|  2.59k|                self.location.start.line + 1,
   60|  2.59k|                self.location.start.column + 1,
   61|  2.59k|                self.location.end.line + 1,
   62|  2.59k|                self.location.end.column + 1,
   63|  2.59k|                self.message
   64|  2.59k|            )
   65|       |        }
   66|  1.94M|    }

_RNvXNtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB1a_3ops5range5RangejENtNtCs3OstG5Tqy1X_5alloc6string6StringEE4fromB6_:
   31|  1.22M|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|  1.22M|        Self {
   33|  1.22M|            location,
   34|  1.22M|            message: message.into(),
   35|  1.22M|        }
   36|  1.22M|    }
_RNvXNtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB1a_3ops5range5RangejEReEE4fromB6_:
   31|   473k|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|   473k|        Self {
   33|   473k|            location,
   34|   473k|            message: message.into(),
   35|   473k|        }
   36|   473k|    }
_RNvXs_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejENtNtCs3OstG5Tqy1X_5alloc6string6StringEE4fromB8_:
   41|  7.24k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  7.24k|        (*location.start()..*location.end() + 1, message).into()
   43|  7.24k|    }
_RNvXs_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejEReEE4fromB8_:
   41|   404k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|   404k|        (*location.start()..*location.end() + 1, message).into()
   43|   404k|    }
_RNvXs0_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerNtB5_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTjNtNtCs3OstG5Tqy1X_5alloc6string6StringEE4fromB9_:
   47|  4.23k|    fn from((location, message): (usize, S)) -> Self {
   48|  4.23k|        (location..=location, message).into()
   49|  4.23k|    }
_RNvMs1_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE3newB9_:
   73|  25.1k|    pub fn new(
   74|  25.1k|        parser: R,
   75|  25.1k|        data: B,
   76|  25.1k|        is_ending: bool,
   77|  25.1k|        min_buffer_size: usize,
   78|  25.1k|        max_buffer_size: usize,
   79|  25.1k|        is_line_jump_whitespace: bool,
   80|  25.1k|        line_comment_start: Option<&'static [u8]>,
   81|  25.1k|    ) -> Self {
   82|  25.1k|        Self {
   83|  25.1k|            parser,
   84|  25.1k|            data,
   85|  25.1k|            position: Position {
   86|  25.1k|                line_start_buffer_offset: 0,
   87|  25.1k|                buffer_offset: 0,
   88|  25.1k|                global_offset: 0,
   89|  25.1k|                global_line: 0,
   90|  25.1k|            },
   91|  25.1k|            previous_position: Position {
   92|  25.1k|                line_start_buffer_offset: 0,
   93|  25.1k|                buffer_offset: 0,
   94|  25.1k|                global_offset: 0,
   95|  25.1k|                global_line: 0,
   96|  25.1k|            },
   97|  25.1k|            is_ending,
   98|  25.1k|            min_buffer_size,
   99|  25.1k|            max_buffer_size,
  100|  25.1k|            is_line_jump_whitespace,
  101|  25.1k|            line_comment_start,
  102|  25.1k|        }
  103|  25.1k|    }
_RNvMs1_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE3newB9_:
   73|  8.37k|    pub fn new(
   74|  8.37k|        parser: R,
   75|  8.37k|        data: B,
   76|  8.37k|        is_ending: bool,
   77|  8.37k|        min_buffer_size: usize,
   78|  8.37k|        max_buffer_size: usize,
   79|  8.37k|        is_line_jump_whitespace: bool,
   80|  8.37k|        line_comment_start: Option<&'static [u8]>,
   81|  8.37k|    ) -> Self {
   82|  8.37k|        Self {
   83|  8.37k|            parser,
   84|  8.37k|            data,
   85|  8.37k|            position: Position {
   86|  8.37k|                line_start_buffer_offset: 0,
   87|  8.37k|                buffer_offset: 0,
   88|  8.37k|                global_offset: 0,
   89|  8.37k|                global_line: 0,
   90|  8.37k|            },
   91|  8.37k|            previous_position: Position {
   92|  8.37k|                line_start_buffer_offset: 0,
   93|  8.37k|                buffer_offset: 0,
   94|  8.37k|                global_offset: 0,
   95|  8.37k|                global_line: 0,
   96|  8.37k|            },
   97|  8.37k|            is_ending,
   98|  8.37k|            min_buffer_size,
   99|  8.37k|            max_buffer_size,
  100|  8.37k|            is_line_jump_whitespace,
  101|  8.37k|            line_comment_start,
  102|  8.37k|        }
  103|  8.37k|    }
_RNvMs2_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE17extend_from_sliceB9_:
  107|  1.71M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  108|  1.71M|        self.shrink_data();
  109|  1.71M|        self.data.extend_from_slice(other);
  110|  1.71M|    }
_RNvMs2_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE3endB9_:
  113|  25.1k|    pub fn end(&mut self) {
  114|  25.1k|        self.is_ending = true;
  115|  25.1k|    }
_RNvMs2_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE11shrink_dataB9_:
  169|  1.71M|    fn shrink_data(&mut self) {
  170|  1.71M|        if self.position.line_start_buffer_offset > 0 {
  171|  17.6k|            self.data
  172|  17.6k|                .copy_within(self.position.line_start_buffer_offset.., 0);
  173|  17.6k|            self.data
  174|  17.6k|                .truncate(self.data.len() - self.position.line_start_buffer_offset);
  175|  17.6k|            self.position.buffer_offset -= self.position.line_start_buffer_offset;
  176|  17.6k|            self.position.line_start_buffer_offset = 0;
  177|  17.6k|            self.previous_position = self.position;
  178|  1.69M|        }
  179|  1.71M|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE9read_nextB9_:
  184|  6.46M|    pub fn read_next(
  185|  6.46M|        &mut self,
  186|  6.46M|        options: &R::Options,
  187|  6.46M|    ) -> Option<Result<R::Token<'_>, TurtleSyntaxError>> {
  188|  6.46M|        self.skip_whitespaces_and_comments()?;
  189|  6.44M|        self.previous_position = self.position;
  190|  6.44M|        let Some((consumed, result)) = self.parser.recognize_next_token(
  191|  6.44M|            &self.data[self.position.buffer_offset..],
  192|  6.44M|            self.is_ending,
  193|  6.44M|            options,
  194|  6.44M|        ) else {
  195|  1.75M|            return if self.is_ending {
  196|  58.4k|                if self.position.buffer_offset == self.data.len() {
  197|  50.2k|                    None // We have finished
  198|       |                } else {
  199|  8.21k|                    let (new_line_jumps, new_line_start) =
  200|  8.21k|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  201|  8.21k|                            &self.data[self.position.buffer_offset..],
  202|  8.21k|                        );
  203|  8.21k|                    if new_line_jumps > 0 {
  204|    539|                        self.position.line_start_buffer_offset =
  205|    539|                            self.position.buffer_offset + new_line_start;
  206|  7.68k|                    }
  207|  8.21k|                    self.position.global_offset +=
  208|  8.21k|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  209|  8.21k|                    self.position.buffer_offset = self.data.len();
  210|  8.21k|                    self.position.global_line += new_line_jumps;
  211|  8.21k|                    let new_position = TextPosition {
  212|  8.21k|                        line: self.position.global_line,
  213|  8.21k|                        column: Self::column_from_bytes(
  214|  8.21k|                            &self.data[self.position.line_start_buffer_offset..],
  215|  8.21k|                        ),
  216|  8.21k|                        offset: self.position.global_offset,
  217|  8.21k|                    };
  218|  8.21k|                    let error = TurtleSyntaxError {
  219|  8.21k|                        location: new_position..new_position,
  220|  8.21k|                        message: "Unexpected end of file".into(),
  221|  8.21k|                    };
  222|  8.21k|                    self.position.buffer_offset = self.data.len(); // We consume everything
  223|  8.21k|                    Some(Err(error))
  224|       |                }
  225|       |            } else {
  226|  1.69M|                None
  227|       |            };
  228|       |        };
  229|  4.69M|        debug_assert!(
  230|      0|            consumed > 0,
  231|      0|            "The lexer must consume at least one byte each time"
  232|       |        );
  233|  4.69M|        debug_assert!(
  234|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  235|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  236|      0|            self.data.len() - self.position.buffer_offset
  237|       |        );
  238|  4.69M|        let (new_line_jumps, new_line_start) =
  239|  4.69M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  240|  4.69M|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  241|  4.69M|            );
  242|  4.69M|        if new_line_jumps > 0 {
  243|  6.27k|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  244|  4.68M|        }
  245|  4.69M|        self.position.buffer_offset += consumed;
  246|  4.69M|        self.position.global_offset += u64::try_from(consumed).unwrap();
  247|  4.69M|        self.position.global_line += new_line_jumps;
  248|  4.69M|        Some(result.map_err(|e| TurtleSyntaxError {
  249|       |            location: self.location_from_buffer_offset_range(e.location),
  250|       |            message: e.message,
  251|  4.69M|        }))
  252|  6.46M|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE9read_nextB9_:
  184|  6.74M|    pub fn read_next(
  185|  6.74M|        &mut self,
  186|  6.74M|        options: &R::Options,
  187|  6.74M|    ) -> Option<Result<R::Token<'_>, TurtleSyntaxError>> {
  188|  6.74M|        self.skip_whitespaces_and_comments()?;
  189|  6.74M|        self.previous_position = self.position;
  190|  6.74M|        let Some((consumed, result)) = self.parser.recognize_next_token(
  191|  6.74M|            &self.data[self.position.buffer_offset..],
  192|  6.74M|            self.is_ending,
  193|  6.74M|            options,
  194|  6.74M|        ) else {
  195|  16.7k|            return if self.is_ending {
  196|  16.7k|                if self.position.buffer_offset == self.data.len() {
  197|  16.7k|                    None // We have finished
  198|       |                } else {
  199|      0|                    let (new_line_jumps, new_line_start) =
  200|      0|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  201|      0|                            &self.data[self.position.buffer_offset..],
  202|      0|                        );
  203|      0|                    if new_line_jumps > 0 {
  204|      0|                        self.position.line_start_buffer_offset =
  205|      0|                            self.position.buffer_offset + new_line_start;
  206|      0|                    }
  207|      0|                    self.position.global_offset +=
  208|      0|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  209|      0|                    self.position.buffer_offset = self.data.len();
  210|      0|                    self.position.global_line += new_line_jumps;
  211|      0|                    let new_position = TextPosition {
  212|      0|                        line: self.position.global_line,
  213|      0|                        column: Self::column_from_bytes(
  214|      0|                            &self.data[self.position.line_start_buffer_offset..],
  215|      0|                        ),
  216|      0|                        offset: self.position.global_offset,
  217|      0|                    };
  218|      0|                    let error = TurtleSyntaxError {
  219|      0|                        location: new_position..new_position,
  220|      0|                        message: "Unexpected end of file".into(),
  221|      0|                    };
  222|      0|                    self.position.buffer_offset = self.data.len(); // We consume everything
  223|      0|                    Some(Err(error))
  224|       |                }
  225|       |            } else {
  226|      0|                None
  227|       |            };
  228|       |        };
  229|  6.72M|        debug_assert!(
  230|      0|            consumed > 0,
  231|      0|            "The lexer must consume at least one byte each time"
  232|       |        );
  233|  6.72M|        debug_assert!(
  234|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  235|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  236|      0|            self.data.len() - self.position.buffer_offset
  237|       |        );
  238|  6.72M|        let (new_line_jumps, new_line_start) =
  239|  6.72M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  240|  6.72M|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  241|  6.72M|            );
  242|  6.72M|        if new_line_jumps > 0 {
  243|      0|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  244|  6.72M|        }
  245|  6.72M|        self.position.buffer_offset += consumed;
  246|  6.72M|        self.position.global_offset += u64::try_from(consumed).unwrap();
  247|  6.72M|        self.position.global_line += new_line_jumps;
  248|  6.72M|        Some(result.map_err(|e| TurtleSyntaxError {
  249|       |            location: self.location_from_buffer_offset_range(e.location),
  250|       |            message: e.message,
  251|  6.72M|        }))
  252|  6.74M|    }
_RNCNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB7_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtBb_5lexer7N3LexerE9read_next0Bb_:
  248|  1.68M|        Some(result.map_err(|e| TurtleSyntaxError {
  249|  1.68M|            location: self.location_from_buffer_offset_range(e.location),
  250|  1.68M|            message: e.message,
  251|  1.68M|        }))
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE33location_from_buffer_offset_rangeB9_:
  254|  1.68M|    pub fn location_from_buffer_offset_range(
  255|  1.68M|        &self,
  256|  1.68M|        offset_range: Range<usize>,
  257|  1.68M|    ) -> Range<TextPosition> {
  258|  1.68M|        let start_offset = self.previous_position.buffer_offset + offset_range.start;
  259|  1.68M|        let (start_extra_line_jumps, start_line_start) =
  260|  1.68M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  261|  1.68M|                &self.data[self.previous_position.buffer_offset..start_offset],
  262|  1.68M|            );
  263|  1.68M|        let start_line_start = if start_extra_line_jumps > 0 {
  264|  1.33k|            start_line_start + self.previous_position.buffer_offset
  265|       |        } else {
  266|  1.68M|            self.previous_position.line_start_buffer_offset
  267|       |        };
  268|  1.68M|        let end_offset = self.previous_position.buffer_offset + offset_range.end;
  269|  1.68M|        let (end_extra_line_jumps, end_line_start) =
  270|  1.68M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  271|  1.68M|                &self.data[self.previous_position.buffer_offset..end_offset],
  272|  1.68M|            );
  273|  1.68M|        let end_line_start = if end_extra_line_jumps > 0 {
  274|  3.90k|            end_line_start + self.previous_position.buffer_offset
  275|       |        } else {
  276|  1.68M|            self.previous_position.line_start_buffer_offset
  277|       |        };
  278|  1.68M|        TextPosition {
  279|  1.68M|            line: self.previous_position.global_line + start_extra_line_jumps,
  280|  1.68M|            column: Self::column_from_bytes(&self.data[start_line_start..start_offset]),
  281|  1.68M|            offset: self.previous_position.global_offset
  282|  1.68M|                + u64::try_from(offset_range.start).unwrap(),
  283|  1.68M|        }..TextPosition {
  284|  1.68M|            line: self.previous_position.global_line + end_extra_line_jumps,
  285|  1.68M|            column: Self::column_from_bytes(&self.data[end_line_start..end_offset]),
  286|  1.68M|            offset: self.previous_position.global_offset + u64::try_from(offset_range.end).unwrap(),
  287|  1.68M|        }
  288|  1.68M|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE19last_token_locationB9_:
  290|   249k|    pub fn last_token_location(&self) -> Range<TextPosition> {
  291|   249k|        TextPosition {
  292|   249k|            line: self.previous_position.global_line,
  293|   249k|            column: Self::column_from_bytes(
  294|   249k|                &self.data[self.previous_position.line_start_buffer_offset
  295|   249k|                    ..self.previous_position.buffer_offset],
  296|   249k|            ),
  297|   249k|            offset: self.previous_position.global_offset,
  298|   249k|        }..TextPosition {
  299|   249k|            line: self.position.global_line,
  300|   249k|            column: Self::column_from_bytes(
  301|   249k|                &self.data[self.position.line_start_buffer_offset..self.position.buffer_offset],
  302|   249k|            ),
  303|   249k|            offset: self.position.global_offset,
  304|   249k|        }
  305|   249k|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE17last_token_sourceB9_:
  307|   249k|    pub fn last_token_source(&self) -> Cow<'_, str> {
  308|   249k|        String::from_utf8_lossy(
  309|   249k|            &self.data[self.previous_position.buffer_offset..self.position.buffer_offset],
  310|   249k|        )
  311|   249k|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE6is_endB9_:
  313|  1.76M|    pub fn is_end(&self) -> bool {
  314|  1.76M|        self.is_ending && self.data.len() == self.position.buffer_offset
  315|  1.76M|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE6is_endB9_:
  313|  16.7k|    pub fn is_end(&self) -> bool {
  314|  16.7k|        self.is_ending && self.data.len() == self.position.buffer_offset
  315|  16.7k|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  318|  6.46M|    fn skip_whitespaces_and_comments(&mut self) -> Option<()> {
  319|       |        loop {
  320|  6.47M|            self.skip_whitespaces()?;
  321|       |
  322|  6.46M|            let buf = &self.data[self.position.buffer_offset..];
  323|  6.46M|            if let Some(line_comment_start) = self.line_comment_start {
  324|  6.46M|                if buf.starts_with(line_comment_start) {
  325|       |                    // Comment
  326|  17.0k|                    if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  327|  6.06k|                        let mut end_position = line_comment_start.len() + end;
  328|  6.06k|                        if buf.get(end_position).copied() == Some(b'\r') {
  329|       |                            // We look for \n for Windows line end style
  330|  4.96k|                            if let Some(c) = buf.get(end_position + 1) {
  331|  4.12k|                                if *c == b'\n' {
  332|      0|                                    end_position += 1;
  333|  4.12k|                                }
  334|    833|                            } else if !self.is_ending {
  335|    806|                                return None; // We need to read more
  336|     27|                            }
  337|  1.10k|                        }
  338|  5.25k|                        let comment_size = end_position + 1;
  339|  5.25k|                        self.position.buffer_offset += comment_size;
  340|  5.25k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  341|  5.25k|                        self.position.global_offset += u64::try_from(comment_size).unwrap();
  342|  5.25k|                        self.position.global_line += 1;
  343|  5.25k|                        continue;
  344|  11.0k|                    }
  345|  11.0k|                    if self.is_ending {
  346|    722|                        self.position.buffer_offset = self.data.len(); // EOF
  347|    722|                        return Some(());
  348|  10.3k|                    }
  349|  10.3k|                    return None; // We need more data
  350|  6.44M|                }
  351|      0|            }
  352|  6.44M|            return Some(());
  353|       |        }
  354|  6.46M|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  318|  6.74M|    fn skip_whitespaces_and_comments(&mut self) -> Option<()> {
  319|       |        loop {
  320|  6.74M|            self.skip_whitespaces()?;
  321|       |
  322|  6.74M|            let buf = &self.data[self.position.buffer_offset..];
  323|  6.74M|            if let Some(line_comment_start) = self.line_comment_start {
  324|  6.74M|                if buf.starts_with(line_comment_start) {
  325|       |                    // Comment
  326|      0|                    if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  327|      0|                        let mut end_position = line_comment_start.len() + end;
  328|      0|                        if buf.get(end_position).copied() == Some(b'\r') {
  329|       |                            // We look for \n for Windows line end style
  330|      0|                            if let Some(c) = buf.get(end_position + 1) {
  331|      0|                                if *c == b'\n' {
  332|      0|                                    end_position += 1;
  333|      0|                                }
  334|      0|                            } else if !self.is_ending {
  335|      0|                                return None; // We need to read more
  336|      0|                            }
  337|      0|                        }
  338|      0|                        let comment_size = end_position + 1;
  339|      0|                        self.position.buffer_offset += comment_size;
  340|      0|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  341|      0|                        self.position.global_offset += u64::try_from(comment_size).unwrap();
  342|      0|                        self.position.global_line += 1;
  343|      0|                        continue;
  344|      0|                    }
  345|      0|                    if self.is_ending {
  346|      0|                        self.position.buffer_offset = self.data.len(); // EOF
  347|      0|                        return Some(());
  348|      0|                    }
  349|      0|                    return None; // We need more data
  350|  6.74M|                }
  351|      0|            }
  352|  6.74M|            return Some(());
  353|       |        }
  354|  6.74M|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  356|  6.47M|    fn skip_whitespaces(&mut self) -> Option<()> {
  357|  6.47M|        if self.is_line_jump_whitespace {
  358|  6.47M|            let mut i = self.position.buffer_offset;
  359|  6.53M|            while let Some(c) = self.data.get(i) {
  360|  5.91M|                match c {
  361|  15.5k|                    b' ' | b'\t' => {
  362|  15.5k|                        self.position.buffer_offset += 1;
  363|  15.5k|                        self.position.global_offset += 1;
  364|  15.5k|                    }
  365|       |                    b'\r' => {
  366|       |                        // We look for \n for Windows line end style
  367|  29.3k|                        let mut increment: u8 = 1;
  368|  29.3k|                        if let Some(c) = self.data.get(i + 1) {
  369|  22.4k|                            if *c == b'\n' {
  370|    378|                                increment += 1;
  371|    378|                                i += 1;
  372|  22.0k|                            }
  373|  6.93k|                        } else if !self.is_ending {
  374|  6.49k|                            return None; // We need to read more
  375|    444|                        }
  376|  22.8k|                        self.position.buffer_offset += usize::from(increment);
  377|  22.8k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  378|  22.8k|                        self.position.global_offset += u64::from(increment);
  379|  22.8k|                        self.position.global_line += 1;
  380|       |                    }
  381|  20.8k|                    b'\n' => {
  382|  20.8k|                        self.position.buffer_offset += 1;
  383|  20.8k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  384|  20.8k|                        self.position.global_offset += 1;
  385|  20.8k|                        self.position.global_line += 1;
  386|  20.8k|                    }
  387|  5.84M|                    _ => return Some(()),
  388|       |                }
  389|  59.3k|                i += 1;
  390|       |                // TODO: SIMD
  391|       |            }
  392|       |        } else {
  393|      0|            for c in &self.data[self.position.buffer_offset..] {
  394|      0|                if matches!(c, b' ' | b'\t') {
  395|      0|                    self.position.buffer_offset += 1;
  396|      0|                    self.position.global_offset += 1;
  397|      0|                } else {
  398|      0|                    return Some(());
  399|       |                }
  400|       |                // TODO: SIMD
  401|       |            }
  402|       |        }
  403|   619k|        Some(())
  404|  6.47M|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  356|  6.74M|    fn skip_whitespaces(&mut self) -> Option<()> {
  357|  6.74M|        if self.is_line_jump_whitespace {
  358|  6.74M|            let mut i = self.position.buffer_offset;
  359|  13.4M|            while let Some(c) = self.data.get(i) {
  360|  13.4M|                match c {
  361|  6.57M|                    b' ' | b'\t' => {
  362|  6.57M|                        self.position.buffer_offset += 1;
  363|  6.57M|                        self.position.global_offset += 1;
  364|  6.57M|                    }
  365|       |                    b'\r' => {
  366|       |                        // We look for \n for Windows line end style
  367|      0|                        let mut increment: u8 = 1;
  368|      0|                        if let Some(c) = self.data.get(i + 1) {
  369|      0|                            if *c == b'\n' {
  370|      0|                                increment += 1;
  371|      0|                                i += 1;
  372|      0|                            }
  373|      0|                        } else if !self.is_ending {
  374|      0|                            return None; // We need to read more
  375|      0|                        }
  376|      0|                        self.position.buffer_offset += usize::from(increment);
  377|      0|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  378|      0|                        self.position.global_offset += u64::from(increment);
  379|      0|                        self.position.global_line += 1;
  380|       |                    }
  381|   177k|                    b'\n' => {
  382|   177k|                        self.position.buffer_offset += 1;
  383|   177k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  384|   177k|                        self.position.global_offset += 1;
  385|   177k|                        self.position.global_line += 1;
  386|   177k|                    }
  387|  6.72M|                    _ => return Some(()),
  388|       |                }
  389|  6.75M|                i += 1;
  390|       |                // TODO: SIMD
  391|       |            }
  392|       |        } else {
  393|      0|            for c in &self.data[self.position.buffer_offset..] {
  394|      0|                if matches!(c, b' ' | b'\t') {
  395|      0|                    self.position.buffer_offset += 1;
  396|      0|                    self.position.global_offset += 1;
  397|      0|                } else {
  398|      0|                    return Some(());
  399|       |                }
  400|       |                // TODO: SIMD
  401|       |            }
  402|       |        }
  403|  16.7k|        Some(())
  404|  6.74M|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  406|  8.07M|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  407|  8.07M|        let mut num_of_jumps = 0;
  408|  8.07M|        let mut last_jump_pos = 0;
  409|  8.07M|        let mut previous_cr = 0;
  410|  8.07M|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  411|  22.8k|            if bytes[pos] == b'\r' {
  412|  7.87k|                previous_cr = pos;
  413|  7.87k|                num_of_jumps += 1;
  414|  7.87k|                last_jump_pos = pos + 1;
  415|  7.87k|            } else {
  416|  14.9k|                if previous_cr < pos - 1 {
  417|  12.6k|                    // We count \r\n as a single line jump
  418|  12.6k|                    num_of_jumps += 1;
  419|  12.6k|                }
  420|  14.9k|                last_jump_pos = pos + 1;
  421|       |            }
  422|       |        }
  423|  8.07M|        (num_of_jumps, last_jump_pos)
  424|  8.07M|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerRShNtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  406|  6.72M|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  407|  6.72M|        let mut num_of_jumps = 0;
  408|  6.72M|        let mut last_jump_pos = 0;
  409|  6.72M|        let mut previous_cr = 0;
  410|  6.72M|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  411|      0|            if bytes[pos] == b'\r' {
  412|      0|                previous_cr = pos;
  413|      0|                num_of_jumps += 1;
  414|      0|                last_jump_pos = pos + 1;
  415|      0|            } else {
  416|      0|                if previous_cr < pos - 1 {
  417|      0|                    // We count \r\n as a single line jump
  418|      0|                    num_of_jumps += 1;
  419|      0|                }
  420|      0|                last_jump_pos = pos + 1;
  421|       |            }
  422|       |        }
  423|  6.72M|        (num_of_jumps, last_jump_pos)
  424|  6.72M|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE17column_from_bytesB9_:
  426|  6.61M|    fn column_from_bytes(bytes: &[u8]) -> u64 {
  427|  6.61M|        match str::from_utf8(bytes) {
  428|  3.31M|            Ok(s) => u64::try_from(s.chars().count()).unwrap(),
  429|  3.30M|            Err(e) => {
  430|  3.30M|                if e.valid_up_to() == 0 {
  431|   562k|                    0
  432|       |                } else {
  433|  2.73M|                    Self::column_from_bytes(&bytes[..e.valid_up_to()])
  434|       |                }
  435|       |            }
  436|       |        }
  437|  6.61M|    }

_RNvXNtNtCs3Okv3MbnXN6_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromNtNtCs3OstG5Tqy1X_5alloc6string6StringE4fromB6_:
   40|  21.1k|    fn from(message: S) -> Self {
   41|  21.1k|        Self {
   42|  21.1k|            message: message.into(),
   43|  21.1k|        }
   44|  21.1k|    }
_RNvXNtNtCs3Okv3MbnXN6_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromReE4fromB6_:
   40|   228k|    fn from(message: S) -> Self {
   41|   228k|        Self {
   42|   228k|            message: message.into(),
   43|   228k|        }
   44|   228k|    }
_RNvMs_NtNtCs3Okv3MbnXN6_5oxttl7toolkit6parserINtB4_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB8_5terse14TriGRecognizerE3newB8_:
   57|  25.1k|    pub fn new(lexer: Lexer<B, RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   58|  25.1k|        Self {
   59|  25.1k|            lexer,
   60|  25.1k|            state: Some(recognizer),
   61|  25.1k|            context,
   62|  25.1k|            results: vec![],
   63|  25.1k|            errors: vec![],
   64|  25.1k|        }
   65|  25.1k|    }
_RNvMs_NtNtCs3Okv3MbnXN6_5oxttl7toolkit6parserINtB4_6ParserRShNtNtB8_5terse14TriGRecognizerE3newB8_:
   57|  8.37k|    pub fn new(lexer: Lexer<B, RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   58|  8.37k|        Self {
   59|  8.37k|            lexer,
   60|  8.37k|            state: Some(recognizer),
   61|  8.37k|            context,
   62|  8.37k|            results: vec![],
   63|  8.37k|            errors: vec![],
   64|  8.37k|        }
   65|  8.37k|    }
_RNvMs0_NtNtCs3Okv3MbnXN6_5oxttl7toolkit6parserINtB5_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5terse14TriGRecognizerE6is_endB9_:
   70|  25.1k|    pub fn is_end(&self) -> bool {
   71|  25.1k|        self.state.is_none() && self.results.is_empty() && self.errors.is_empty()
   72|  25.1k|    }
_RNvMs0_NtNtCs3Okv3MbnXN6_5oxttl7toolkit6parserINtB5_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5terse14TriGRecognizerE9read_nextB9_:
   74|  4.26M|    pub fn read_next(&mut self) -> Option<Result<RR::Output, TurtleSyntaxError>> {
   75|       |        loop {
   76|  7.30M|            if let Some(error) = self.errors.pop() {
   77|   249k|                return Some(Err(TurtleSyntaxError {
   78|   249k|                    location: self.lexer.last_token_location(),
   79|   249k|                    message: error
   80|   249k|                        .message
   81|   249k|                        .replace("TOKEN", &self.lexer.last_token_source()),
   82|   249k|                }));
   83|  7.05M|            }
   84|  7.05M|            if let Some(result) = self.results.pop() {
   85|   584k|                return Some(Ok(result));
   86|  6.46M|            }
   87|  6.46M|            if let Some(result) = self.lexer.read_next(RR::lexer_options(&self.context)) {
   88|  4.70M|                match result {
   89|  3.00M|                    Ok(token) => {
   90|  3.00M|                        self.state = self.state.take().map(|state| {
   91|       |                            state.recognize_next(
   92|       |                                token,
   93|       |                                &mut self.context,
   94|       |                                &mut self.results,
   95|       |                                &mut self.errors,
   96|       |                            )
   97|  3.00M|                        });
   98|  3.00M|                        continue;
   99|       |                    }
  100|  1.69M|                    Err(e) => {
  101|  1.69M|                        self.state = self.state.take().map(RR::error_recovery_state);
  102|  1.69M|                        return Some(Err(e));
  103|       |                    }
  104|       |                }
  105|  1.76M|            }
  106|  1.76M|            if self.lexer.is_end() {
  107|  50.2k|                self.state.take()?.recognize_end(
  108|  25.1k|                    &mut self.context,
  109|  25.1k|                    &mut self.results,
  110|  25.1k|                    &mut self.errors,
  111|  25.1k|                )
  112|       |            } else {
  113|  1.71M|                return None;
  114|       |            }
  115|       |        }
  116|  4.26M|    }
_RNvMs0_NtNtCs3Okv3MbnXN6_5oxttl7toolkit6parserINtB5_6ParserRShNtNtB9_5terse14TriGRecognizerE9read_nextB9_:
   74|   200k|    pub fn read_next(&mut self) -> Option<Result<RR::Output, TurtleSyntaxError>> {
   75|       |        loop {
   76|  6.93M|            if let Some(error) = self.errors.pop() {
   77|      0|                return Some(Err(TurtleSyntaxError {
   78|      0|                    location: self.lexer.last_token_location(),
   79|      0|                    message: error
   80|      0|                        .message
   81|      0|                        .replace("TOKEN", &self.lexer.last_token_source()),
   82|      0|                }));
   83|  6.93M|            }
   84|  6.93M|            if let Some(result) = self.results.pop() {
   85|   192k|                return Some(Ok(result));
   86|  6.74M|            }
   87|  6.74M|            if let Some(result) = self.lexer.read_next(RR::lexer_options(&self.context)) {
   88|  6.72M|                match result {
   89|  6.72M|                    Ok(token) => {
   90|  6.72M|                        self.state = self.state.take().map(|state| {
   91|       |                            state.recognize_next(
   92|       |                                token,
   93|       |                                &mut self.context,
   94|       |                                &mut self.results,
   95|       |                                &mut self.errors,
   96|       |                            )
   97|  6.72M|                        });
   98|  6.72M|                        continue;
   99|       |                    }
  100|      0|                    Err(e) => {
  101|      0|                        self.state = self.state.take().map(RR::error_recovery_state);
  102|      0|                        return Some(Err(e));
  103|       |                    }
  104|       |                }
  105|  16.7k|            }
  106|  16.7k|            if self.lexer.is_end() {
  107|  16.7k|                self.state.take()?.recognize_end(
  108|  8.37k|                    &mut self.context,
  109|  8.37k|                    &mut self.results,
  110|  8.37k|                    &mut self.errors,
  111|  8.37k|                )
  112|       |            } else {
  113|      0|                return None;
  114|       |            }
  115|       |        }
  116|   200k|    }
_RNCNvMs0_NtNtCs3Okv3MbnXN6_5oxttl7toolkit6parserINtB7_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtBb_5terse14TriGRecognizerE9read_next0Bb_:
   90|  3.00M|                        self.state = self.state.take().map(|state| {
   91|  3.00M|                            state.recognize_next(
   92|  3.00M|                                token,
   93|  3.00M|                                &mut self.context,
   94|  3.00M|                                &mut self.results,
   95|  3.00M|                                &mut self.errors,
   96|  3.00M|                            )
   97|  3.00M|                        });
_RNCNvMs0_NtNtCs3Okv3MbnXN6_5oxttl7toolkit6parserINtB7_6ParserRShNtNtBb_5terse14TriGRecognizerE9read_next0Bb_:
   90|  6.72M|                        self.state = self.state.take().map(|state| {
   91|  6.72M|                            state.recognize_next(
   92|  6.72M|                                token,
   93|  6.72M|                                &mut self.context,
   94|  6.72M|                                &mut self.results,
   95|  6.72M|                                &mut self.errors,
   96|  6.72M|                            )
   97|  6.72M|                        });
_RNvMs1_NtNtCs3Okv3MbnXN6_5oxttl7toolkit6parserINtB5_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5terse14TriGRecognizerE3endB9_:
  121|  25.1k|    pub fn end(&mut self) {
  122|  25.1k|        self.lexer.end()
  123|  25.1k|    }
_RNvMs1_NtNtCs3Okv3MbnXN6_5oxttl7toolkit6parserINtB5_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5terse14TriGRecognizerE17extend_from_sliceB9_:
  125|  1.71M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  126|  1.71M|        self.lexer.extend_from_slice(other)
  127|  1.71M|    }
_RNvXs2_NtNtCs3Okv3MbnXN6_5oxttl7toolkit6parserINtB5_6ParserRShNtNtB9_5terse14TriGRecognizerENtNtNtNtCscdEvteftVc2_4core4iter6traits7collect12IntoIterator9into_iterB9_:
  146|  8.37k|    fn into_iter(self) -> Self::IntoIter {
  147|  8.37k|        FromSliceIterator { parser: self }
  148|  8.37k|    }
_RNvXs4_NtNtCs3Okv3MbnXN6_5oxttl7toolkit6parserINtB5_17FromSliceIteratorNtNtB9_5terse14TriGRecognizerENtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextB9_:
  206|   200k|    fn next(&mut self) -> Option<Self::Item> {
  207|   200k|        self.parser.read_next()
  208|   200k|    }

_RNvMNtCs3Okv3MbnXN6_5oxttl4trigNtB2_10TriGParser19with_quoted_triplesCsbTqLqKzjopm_4trig:
   99|  33.5k|    pub fn with_quoted_triples(mut self) -> Self {
  100|  33.5k|        self.with_quoted_triples = true;
  101|  33.5k|        self
  102|  33.5k|    }
_RNvMNtCs3Okv3MbnXN6_5oxttl4trigNtB2_10TriGParser3newCsbTqLqKzjopm_4trig:
   64|  33.5k|    pub fn new() -> Self {
   65|  33.5k|        Self::default()
   66|  33.5k|    }
_RNvMNtCs3Okv3MbnXN6_5oxttl4trigNtB2_10TriGParser9uncheckedCsbTqLqKzjopm_4trig:
   74|  8.37k|    pub fn unchecked(mut self) -> Self {
   75|  8.37k|        self.unchecked = true;
   76|  8.37k|        self
   77|  8.37k|    }
_RNvMs5_NtCs3Okv3MbnXN6_5oxttl4trigNtB5_14TriGSerializer3newCsbTqLqKzjopm_4trig:
  756|  8.37k|    pub fn new() -> Self {
  757|  8.37k|        Self {
  758|  8.37k|            prefixes: BTreeMap::new(),
  759|  8.37k|        }
  760|  8.37k|    }
_RNvXs4_NtCs3Okv3MbnXN6_5oxttl4trigNtB5_16TriGPrefixesIterNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCsbTqLqKzjopm_4trig:
  713|  29.3k|    fn next(&mut self) -> Option<Self::Item> {
  714|  29.3k|        let (key, value) = self.inner.next()?;
  715|  4.21k|        Some((key.as_str(), value.as_str()))
  716|  29.3k|    }
_RNvXs4_NtCs3Okv3MbnXN6_5oxttl4trigNtB5_16TriGPrefixesIterNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator9size_hintCsbTqLqKzjopm_4trig:
  719|  3.25k|    fn size_hint(&self) -> (usize, Option<usize>) {
  720|  3.25k|        self.inner.size_hint()
  721|  3.25k|    }
_RINvMNtCs3Okv3MbnXN6_5oxttl4trigNtB3_10TriGParser13with_base_iriReECsbTqLqKzjopm_4trig:
   80|  25.1k|    pub fn with_base_iri(mut self, base_iri: impl Into<String>) -> Result<Self, IriParseError> {
   81|  25.1k|        self.base = Some(Iri::parse(base_iri.into())?);
   82|  25.1k|        Ok(self)
   83|  25.1k|    }
_RINvMs5_NtCs3Okv3MbnXN6_5oxttl4trigNtB6_14TriGSerializer11with_prefixNtNtCs3OstG5Tqy1X_5alloc6string6StringB15_ECsbTqLqKzjopm_4trig:
  763|  1.32k|    pub fn with_prefix(
  764|  1.32k|        mut self,
  765|  1.32k|        prefix_name: impl Into<String>,
  766|  1.32k|        prefix_iri: impl Into<String>,
  767|  1.32k|    ) -> Result<Self, IriParseError> {
  768|  1.32k|        self.prefixes.insert(
  769|  1.32k|            Iri::parse(prefix_iri.into())?.into_inner(),
  770|  1.32k|            prefix_name.into(),
  771|  1.32k|        );
  772|  1.32k|        Ok(self)
  773|  1.32k|    }
_RINvMs5_NtCs3Okv3MbnXN6_5oxttl4trigNtB6_14TriGSerializer18serialize_to_writeINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECsbTqLqKzjopm_4trig:
  796|  8.37k|    pub fn serialize_to_write<W: Write>(self, write: W) -> ToWriteTriGWriter<W> {
  797|  8.37k|        ToWriteTriGWriter {
  798|  8.37k|            write,
  799|  8.37k|            writer: self.serialize(),
  800|  8.37k|        }
  801|  8.37k|    }
_RINvMs6_NtCs3Okv3MbnXN6_5oxttl4trigINtB6_17ToWriteTriGWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE10write_quadRNtNtCsg6vp76A8CLh_5oxrdf6triple4QuadECsbTqLqKzjopm_4trig:
  906|   192k|    pub fn write_quad<'a>(&mut self, q: impl Into<QuadRef<'a>>) -> io::Result<()> {
  907|   192k|        self.writer.write_quad(q, &mut self.write)
  908|   192k|    }
_RINvMs7_NtCs3Okv3MbnXN6_5oxttl4trigNtB6_18LowLevelTriGWriter10write_quadRNtNtCsg6vp76A8CLh_5oxrdf6triple4QuadQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECsbTqLqKzjopm_4trig:
 1005|   192k|    pub fn write_quad<'a>(
 1006|   192k|        &mut self,
 1007|   192k|        q: impl Into<QuadRef<'a>>,
 1008|   192k|        mut write: impl Write,
 1009|   192k|    ) -> io::Result<()> {
 1010|   192k|        if !self.prelude_written {
 1011|  4.83k|            self.prelude_written = true;
 1012|  5.75k|            for (prefix_iri, prefix_name) in &self.prefixes {
 1013|    920|                writeln!(write, "@prefix {prefix_name}: <{prefix_iri}> .")?;
 1014|       |            }
 1015|   187k|        }
 1016|   192k|        let q = q.into();
 1017|   192k|        if q.graph_name == self.current_graph_name.as_ref() {
 1018|   181k|            if let Some((current_subject, current_predicate)) =
 1019|   185k|                self.current_subject_predicate.take()
 1020|       |            {
 1021|   181k|                if q.subject == current_subject.as_ref() {
 1022|  32.6k|                    if q.predicate == current_predicate {
 1023|  23.7k|                        self.current_subject_predicate = Some((current_subject, current_predicate));
 1024|  23.7k|                        write!(write, " , {}", self.term(q.object))
 1025|       |                    } else {
 1026|  8.97k|                        self.current_subject_predicate =
 1027|  8.97k|                            Some((current_subject, q.predicate.into_owned()));
 1028|  8.97k|                        writeln!(write, " ;")?;
 1029|  8.97k|                        if !self.current_graph_name.is_default_graph() {
 1030|  1.54k|                            write!(write, "\t")?;
 1031|  7.43k|                        }
 1032|  8.97k|                        write!(
 1033|  8.97k|                            write,
 1034|  8.97k|                            "\t{} {}",
 1035|  8.97k|                            self.predicate(q.predicate),
 1036|  8.97k|                            self.term(q.object)
 1037|  8.97k|                        )
 1038|       |                    }
 1039|       |                } else {
 1040|   149k|                    self.current_subject_predicate =
 1041|   149k|                        Some((q.subject.into_owned(), q.predicate.into_owned()));
 1042|   149k|                    writeln!(write, " .")?;
 1043|   149k|                    if !self.current_graph_name.is_default_graph() {
 1044|  18.8k|                        write!(write, "\t")?;
 1045|   130k|                    }
 1046|   149k|                    write!(
 1047|   149k|                        write,
 1048|   149k|                        "{} {} {}",
 1049|   149k|                        self.term(q.subject),
 1050|   149k|                        self.predicate(q.predicate),
 1051|   149k|                        self.term(q.object)
 1052|   149k|                    )
 1053|       |                }
 1054|       |            } else {
 1055|  3.97k|                self.current_subject_predicate =
 1056|  3.97k|                    Some((q.subject.into_owned(), q.predicate.into_owned()));
 1057|  3.97k|                if !self.current_graph_name.is_default_graph() {
 1058|      0|                    write!(write, "\t")?;
 1059|  3.97k|                }
 1060|  3.97k|                write!(
 1061|  3.97k|                    write,
 1062|  3.97k|                    "{} {} {}",
 1063|  3.97k|                    self.term(q.subject),
 1064|  3.97k|                    self.predicate(q.predicate),
 1065|  3.97k|                    self.term(q.object)
 1066|  3.97k|                )
 1067|       |            }
 1068|       |        } else {
 1069|  6.29k|            if self.current_subject_predicate.is_some() {
 1070|  5.44k|                writeln!(write, " .")?;
 1071|    854|            }
 1072|  6.29k|            if !self.current_graph_name.is_default_graph() {
 1073|  3.04k|                writeln!(write, "}}")?;
 1074|  3.25k|            }
 1075|  6.29k|            self.current_graph_name = q.graph_name.into_owned();
 1076|  6.29k|            self.current_subject_predicate =
 1077|  6.29k|                Some((q.subject.into_owned(), q.predicate.into_owned()));
 1078|  6.29k|            match self.current_graph_name.as_ref() {
 1079|  2.98k|                GraphNameRef::NamedNode(g) => {
 1080|  2.98k|                    writeln!(write, "{} {{", self.term(g))?;
 1081|  2.98k|                    write!(write, "\t")?;
 1082|       |                }
 1083|    975|                GraphNameRef::BlankNode(g) => {
 1084|    975|                    writeln!(write, "{} {{", self.term(g))?;
 1085|    975|                    write!(write, "\t")?;
 1086|       |                }
 1087|  2.34k|                GraphNameRef::DefaultGraph => (),
 1088|       |            }
 1089|       |
 1090|  6.29k|            write!(
 1091|  6.29k|                write,
 1092|  6.29k|                "{} {} {}",
 1093|  6.29k|                self.term(q.subject),
 1094|  6.29k|                self.predicate(q.predicate),
 1095|  6.29k|                self.term(q.object)
 1096|  6.29k|            )
 1097|       |        }
 1098|   192k|    }
_RINvMs7_NtCs3Okv3MbnXN6_5oxttl4trigNtB6_18LowLevelTriGWriter4termNtNtCsg6vp76A8CLh_5oxrdf10blank_node12BlankNodeRefECsbTqLqKzjopm_4trig:
 1107|    975|    fn term<'a>(&'a self, term: impl Into<TermRef<'a>>) -> TurtleTerm<'a> {
 1108|    975|        TurtleTerm {
 1109|    975|            term: term.into(),
 1110|    975|            prefixes: &self.prefixes,
 1111|    975|        }
 1112|    975|    }
_RINvMs7_NtCs3Okv3MbnXN6_5oxttl4trigNtB6_18LowLevelTriGWriter4termNtNtCsg6vp76A8CLh_5oxrdf10named_node12NamedNodeRefECsbTqLqKzjopm_4trig:
 1107|  2.98k|    fn term<'a>(&'a self, term: impl Into<TermRef<'a>>) -> TurtleTerm<'a> {
 1108|  2.98k|        TurtleTerm {
 1109|  2.98k|            term: term.into(),
 1110|  2.98k|            prefixes: &self.prefixes,
 1111|  2.98k|        }
 1112|  2.98k|    }
_RINvMs7_NtCs3Okv3MbnXN6_5oxttl4trigNtB6_18LowLevelTriGWriter4termNtNtCsg6vp76A8CLh_5oxrdf6triple10SubjectRefECsbTqLqKzjopm_4trig:
 1107|   159k|    fn term<'a>(&'a self, term: impl Into<TermRef<'a>>) -> TurtleTerm<'a> {
 1108|   159k|        TurtleTerm {
 1109|   159k|            term: term.into(),
 1110|   159k|            prefixes: &self.prefixes,
 1111|   159k|        }
 1112|   159k|    }
_RINvMs7_NtCs3Okv3MbnXN6_5oxttl4trigNtB6_18LowLevelTriGWriter4termNtNtCsg6vp76A8CLh_5oxrdf6triple7TermRefECsbTqLqKzjopm_4trig:
 1107|   192k|    fn term<'a>(&'a self, term: impl Into<TermRef<'a>>) -> TurtleTerm<'a> {
 1108|   192k|        TurtleTerm {
 1109|   192k|            term: term.into(),
 1110|   192k|            prefixes: &self.prefixes,
 1111|   192k|        }
 1112|   192k|    }
_RINvMs7_NtCs3Okv3MbnXN6_5oxttl4trigNtB6_18LowLevelTriGWriter6finishQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECsbTqLqKzjopm_4trig:
 1115|  8.37k|    pub fn finish(&mut self, mut write: impl Write) -> io::Result<()> {
 1116|  8.37k|        if self.current_subject_predicate.is_some() {
 1117|  4.83k|            writeln!(write, " .")?;
 1118|  3.54k|        }
 1119|  8.37k|        if !self.current_graph_name.is_default_graph() {
 1120|    914|            writeln!(write, "}}")?;
 1121|  7.46k|        }
 1122|  8.37k|        Ok(())
 1123|  8.37k|    }
_RINvMs7_NtCs3Okv3MbnXN6_5oxttl4trigNtB6_18LowLevelTriGWriter9predicateNtNtCsg6vp76A8CLh_5oxrdf10named_node12NamedNodeRefECsbTqLqKzjopm_4trig:
 1100|   168k|    fn predicate<'a>(&'a self, named_node: impl Into<NamedNodeRef<'a>>) -> TurtlePredicate<'a> {
 1101|   168k|        TurtlePredicate {
 1102|   168k|            named_node: named_node.into(),
 1103|   168k|            prefixes: &self.prefixes,
 1104|   168k|        }
 1105|   168k|    }
_RNvMs6_NtCs3Okv3MbnXN6_5oxttl4trigINtB5_17ToWriteTriGWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE6finishCsbTqLqKzjopm_4trig:
  911|  8.37k|    pub fn finish(mut self) -> io::Result<W> {
  912|  8.37k|        self.writer.finish(&mut self.write)?;
  913|  8.37k|        Ok(self.write)
  914|  8.37k|    }
_RNvMNtCs3Okv3MbnXN6_5oxttl4trigNtB2_10TriGParser11parse_slice:
  202|  8.37k|    pub fn parse_slice(self, slice: &[u8]) -> FromSliceTriGReader<'_> {
  203|  8.37k|        FromSliceTriGReader {
  204|  8.37k|            inner: TriGRecognizer::new_parser(
  205|  8.37k|                slice,
  206|  8.37k|                true,
  207|  8.37k|                true,
  208|  8.37k|                #[cfg(feature = "rdf-star")]
  209|  8.37k|                self.with_quoted_triples,
  210|  8.37k|                self.unchecked,
  211|  8.37k|                self.base,
  212|  8.37k|                self.prefixes,
  213|  8.37k|            )
  214|  8.37k|            .into_iter(),
  215|  8.37k|        }
  216|  8.37k|    }
_RNvMNtCs3Okv3MbnXN6_5oxttl4trigNtB2_10TriGParser5parse:
  256|  25.1k|    pub fn parse(self) -> LowLevelTriGReader {
  257|  25.1k|        LowLevelTriGReader {
  258|  25.1k|            parser: TriGRecognizer::new_parser(
  259|  25.1k|                Vec::new(),
  260|  25.1k|                false,
  261|  25.1k|                true,
  262|  25.1k|                #[cfg(feature = "rdf-star")]
  263|  25.1k|                self.with_quoted_triples,
  264|  25.1k|                self.unchecked,
  265|  25.1k|                self.base,
  266|  25.1k|                self.prefixes,
  267|  25.1k|            ),
  268|  25.1k|        }
  269|  25.1k|    }
_RNvXs2_NtCs3Okv3MbnXN6_5oxttl4trigNtB5_19FromSliceTriGReaderNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next:
  570|   200k|    fn next(&mut self) -> Option<Self::Item> {
  571|   200k|        self.inner.next()
  572|   200k|    }
_RNvMs3_NtCs3Okv3MbnXN6_5oxttl4trigNtB5_18LowLevelTriGReader17extend_from_slice:
  619|  1.71M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  620|  1.71M|        self.parser.extend_from_slice(other)
  621|  1.71M|    }
_RNvMs3_NtCs3Okv3MbnXN6_5oxttl4trigNtB5_18LowLevelTriGReader3end:
  626|  25.1k|    pub fn end(&mut self) {
  627|  25.1k|        self.parser.end()
  628|  25.1k|    }
_RNvMs3_NtCs3Okv3MbnXN6_5oxttl4trigNtB5_18LowLevelTriGReader6is_end:
  631|  25.1k|    pub fn is_end(&self) -> bool {
  632|  25.1k|        self.parser.is_end()
  633|  25.1k|    }
_RNvMs3_NtCs3Okv3MbnXN6_5oxttl4trigNtB5_18LowLevelTriGReader9read_next:
  639|  4.26M|    pub fn read_next(&mut self) -> Option<Result<Quad, TurtleSyntaxError>> {
  640|  4.26M|        self.parser.read_next()
  641|  4.26M|    }
_RNvMs3_NtCs3Okv3MbnXN6_5oxttl4trigNtB5_18LowLevelTriGReader8prefixes:
  668|  25.1k|    pub fn prefixes(&self) -> TriGPrefixesIter<'_> {
  669|  25.1k|        TriGPrefixesIter {
  670|  25.1k|            inner: self.parser.context.prefixes(),
  671|  25.1k|        }
  672|  25.1k|    }
_RNvMs5_NtCs3Okv3MbnXN6_5oxttl4trigNtB5_14TriGSerializer9serialize:
  867|  8.37k|    pub fn serialize(self) -> LowLevelTriGWriter {
  868|  8.37k|        LowLevelTriGWriter {
  869|  8.37k|            prefixes: self.prefixes,
  870|  8.37k|            prelude_written: false,
  871|  8.37k|            current_graph_name: GraphName::DefaultGraph,
  872|  8.37k|            current_subject_predicate: None,
  873|  8.37k|        }
  874|  8.37k|    }
_RNvXs8_NtCs3Okv3MbnXN6_5oxttl4trigNtB5_15TurtlePredicateNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
 1132|   168k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1133|   168k|        if self.named_node == rdf::TYPE {
 1134|  1.59k|            f.write_str("a")
 1135|       |        } else {
 1136|   166k|            TurtleTerm {
 1137|   166k|                term: self.named_node.into(),
 1138|   166k|                prefixes: self.prefixes,
 1139|   166k|            }
 1140|   166k|            .fmt(f)
 1141|       |        }
 1142|   168k|    }
_RNvXs9_NtCs3Okv3MbnXN6_5oxttl4trigNtB5_10TurtleTermNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
 1151|  5.01M|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1152|  5.01M|        match self.term {
 1153|  1.99M|            TermRef::NamedNode(v) => {
 1154|  2.06M|                for (prefix_iri, prefix_name) in self.prefixes {
 1155|   137k|                    if let Some(local_name) = v.as_str().strip_prefix(prefix_iri) {
 1156|   102k|                        if let Some(escaped_local_name) = escape_local_name(local_name) {
 1157|  69.8k|                            return write!(f, "{prefix_name}:{escaped_local_name}");
 1158|  33.0k|                        }
 1159|  34.6k|                    }
 1160|       |                }
 1161|  1.92M|                write!(f, "{v}")
 1162|       |            }
 1163|   157k|            TermRef::BlankNode(v) => write!(f, "{v}"),
 1164|  1.36M|            TermRef::Literal(v) => {
 1165|  1.36M|                let value = v.value();
 1166|  1.36M|                let inline = match v.datatype() {
 1167|  1.36M|                    xsd::BOOLEAN => is_turtle_boolean(value),
 1168|  1.36M|                    xsd::INTEGER => is_turtle_integer(value),
 1169|  1.14M|                    xsd::DECIMAL => is_turtle_decimal(value),
 1170|  1.14M|                    xsd::DOUBLE => is_turtle_double(value),
 1171|  5.26k|                    _ => false,
 1172|       |                };
 1173|  1.36M|                if inline {
 1174|  1.35M|                    f.write_str(value)
 1175|  5.26k|                } else if v.is_plain() {
 1176|  5.02k|                    write!(f, "{v}")
 1177|       |                } else {
 1178|    237|                    write!(
 1179|    237|                        f,
 1180|    237|                        "{}^^{}",
 1181|    237|                        LiteralRef::new_simple_literal(v.value()),
 1182|    237|                        TurtleTerm {
 1183|    237|                            term: v.datatype().into(),
 1184|    237|                            prefixes: self.prefixes
 1185|    237|                        }
 1186|    237|                    )
 1187|       |                }
 1188|       |            }
 1189|       |            #[cfg(feature = "rdf-star")]
 1190|  1.49M|            TermRef::Triple(t) => {
 1191|  1.49M|                write!(
 1192|  1.49M|                    f,
 1193|  1.49M|                    "<< {} {} {} >>",
 1194|  1.49M|                    TurtleTerm {
 1195|  1.49M|                        term: t.subject.as_ref().into(),
 1196|  1.49M|                        prefixes: self.prefixes
 1197|  1.49M|                    },
 1198|  1.49M|                    TurtleTerm {
 1199|  1.49M|                        term: t.predicate.as_ref().into(),
 1200|  1.49M|                        prefixes: self.prefixes
 1201|  1.49M|                    },
 1202|  1.49M|                    TurtleTerm {
 1203|  1.49M|                        term: t.object.as_ref(),
 1204|  1.49M|                        prefixes: self.prefixes
 1205|  1.49M|                    }
 1206|  1.49M|                )
 1207|       |            }
 1208|       |        }
 1209|  5.01M|    }
_RNvNtCs3Okv3MbnXN6_5oxttl4trig17is_turtle_boolean:
 1212|    121|fn is_turtle_boolean(value: &str) -> bool {
 1213|    121|    matches!(value, "true" | "false")
 1214|    121|}
_RNvNtCs3Okv3MbnXN6_5oxttl4trig17is_turtle_integer:
 1216|   215k|fn is_turtle_integer(value: &str) -> bool {
 1217|   215k|    // [19]  INTEGER  ::=  [+-]? [0-9]+
 1218|   215k|    let mut value = value.as_bytes();
 1219|   215k|    if let Some(v) = value.strip_prefix(b"+") {
 1220|    653|        value = v;
 1221|   214k|    } else if let Some(v) = value.strip_prefix(b"-") {
 1222|     25|        value = v;
 1223|   214k|    }
 1224|   215k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
 1225|   215k|}
_RNvNtCs3Okv3MbnXN6_5oxttl4trig17is_turtle_decimal:
 1227|  2.65k|fn is_turtle_decimal(value: &str) -> bool {
 1228|  2.65k|    // [20]  DECIMAL  ::=  [+-]? [0-9]* '.' [0-9]+
 1229|  2.65k|    let mut value = value.as_bytes();
 1230|  2.65k|    if let Some(v) = value.strip_prefix(b"+") {
 1231|     68|        value = v;
 1232|  2.58k|    } else if let Some(v) = value.strip_prefix(b"-") {
 1233|     97|        value = v;
 1234|  2.48k|    }
 1235|  4.41k|    while value.first().map_or(false, u8::is_ascii_digit) {
 1236|  1.76k|        value = &value[1..];
 1237|  1.76k|    }
 1238|  2.65k|    let Some(value) = value.strip_prefix(b".") else {
 1239|      0|        return false;
 1240|       |    };
 1241|  2.65k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
 1242|  2.65k|}
_RNvNtCs3Okv3MbnXN6_5oxttl4trig16is_turtle_double:
 1244|  1.14M|fn is_turtle_double(value: &str) -> bool {
 1245|  1.14M|    // [21]    DOUBLE    ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
 1246|  1.14M|    // [154s]  EXPONENT  ::=  [eE] [+-]? [0-9]+
 1247|  1.14M|    let mut value = value.as_bytes();
 1248|  1.14M|    if let Some(v) = value.strip_prefix(b"+") {
 1249|     75|        value = v;
 1250|  1.14M|    } else if let Some(v) = value.strip_prefix(b"-") {
 1251|    151|        value = v;
 1252|  1.13M|    }
 1253|  1.14M|    let mut with_before = false;
 1254|  3.62M|    while value.first().map_or(false, u8::is_ascii_digit) {
 1255|  2.48M|        value = &value[1..];
 1256|  2.48M|        with_before = true;
 1257|  2.48M|    }
 1258|  1.14M|    let mut with_after = false;
 1259|  1.14M|    if let Some(v) = value.strip_prefix(b".") {
 1260|    621|        value = v;
 1261|  6.13k|        while value.first().map_or(false, u8::is_ascii_digit) {
 1262|  5.51k|            value = &value[1..];
 1263|  5.51k|            with_after = true;
 1264|  5.51k|        }
 1265|  1.13M|    }
 1266|  1.14M|    if let Some(v) = value.strip_prefix(b"e") {
 1267|   118k|        value = v;
 1268|  1.02M|    } else if let Some(v) = value.strip_prefix(b"E") {
 1269|  1.02M|        value = v;
 1270|  1.02M|    } else {
 1271|      0|        return false;
 1272|       |    }
 1273|  1.14M|    if let Some(v) = value.strip_prefix(b"+") {
 1274|    182|        value = v;
 1275|  1.14M|    } else if let Some(v) = value.strip_prefix(b"-") {
 1276|    269|        value = v;
 1277|  1.13M|    }
 1278|  1.14M|    (with_before || with_after) && !value.is_empty() && value.iter().all(u8::is_ascii_digit)
 1279|  1.14M|}
_RNvNtCs3Okv3MbnXN6_5oxttl4trig17escape_local_name:
 1281|   102k|fn escape_local_name(value: &str) -> Option<String> {
 1282|   102k|    // TODO: PLX
 1283|   102k|    // [168s] 	PN_LOCAL 	::= 	(PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
 1284|   102k|    let mut output = String::with_capacity(value.len());
 1285|   102k|    let mut chars = value.chars();
 1286|   102k|    let first = chars.next()?;
 1287|  69.8k|    if N3Lexer::is_possible_pn_chars_u(first) || first == ':' || first.is_ascii_digit() {
 1288|  22.0k|        output.push(first);
 1289|  47.8k|    } else if can_be_escaped_in_local_name(first) {
 1290|  47.7k|        output.push('\\');
 1291|  47.7k|        output.push(first);
 1292|  47.7k|    } else {
 1293|     34|        return None;
 1294|       |    }
 1295|       |
 1296|   350k|    while let Some(c) = chars.next() {
 1297|   281k|        if N3Lexer::is_possible_pn_chars(c) || c == ':' || (c == '.' && !chars.as_str().is_empty())
 1298|   170k|        {
 1299|   170k|            output.push(c);
 1300|   170k|        } else if can_be_escaped_in_local_name(c) {
 1301|   110k|            output.push('\\');
 1302|   110k|            output.push(c);
 1303|   110k|        } else {
 1304|     58|            return None;
 1305|       |        }
 1306|       |    }
 1307|       |
 1308|  69.8k|    Some(output)
 1309|   102k|}
_RNvNtCs3Okv3MbnXN6_5oxttl4trig28can_be_escaped_in_local_name:
 1311|   158k|fn can_be_escaped_in_local_name(c: char) -> bool {
 1312|     92|    matches!(
 1313|   158k|        c,
 1314|       |        '_' | '~'
 1315|       |            | '.'
 1316|       |            | '-'
 1317|       |            | '!'
 1318|       |            | '$'
 1319|       |            | '&'
 1320|       |            | '\''
 1321|       |            | '('
 1322|       |            | ')'
 1323|       |            | '*'
 1324|       |            | '+'
 1325|       |            | ','
 1326|       |            | ';'
 1327|       |            | '='
 1328|       |            | '/'
 1329|       |            | '?'
 1330|       |            | '#'
 1331|       |            | '@'
 1332|       |            | '%'
 1333|       |    )
 1334|   158k|}

